
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002476c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ac4  08024a1c  08024a1c  00034a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000090c  080274e0  080274e0  000374e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08027dec  08027dec  001ae2b0  2**0
                  CONTENTS
  5 .ARM          00000000  08027dec  08027dec  001ae2b0  2**0
                  CONTENTS
  6 .preinit_array 00000000  08027dec  08027dec  001ae2b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000028  08027dec  08027dec  00037dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000001c  08027e14  08027e14  00037e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000144  24000000  08027e30  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00010054  24000144  08027f74  00040144  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  24010198  08027f74  00040198  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  001ae2b0  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  ALLOC
 14 FontFlashSection 0000dbd4  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 000000fc  9000dbd4  9000dbd4  0005dbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 001505e0  9000dcd0  9000dcd0  0005dcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   000742fa  00000000  00000000  001ae2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   00109798  00000000  00000000  002225d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0001afdb  00000000  00000000  0032bd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00004678  00000000  00000000  00346d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017fb62  00000000  00000000  0034b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00004830  00000000  00000000  004caf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00045521  00000000  00000000  004cf760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00044a5a  00000000  00000000  00514c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  005596db  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000c810  00000000  00000000  005597ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000144 	.word	0x24000144
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08024a04 	.word	0x08024a04

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000148 	.word	0x24000148
 80002ec:	08024a04 	.word	0x08024a04

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003c6:	e003      	b.n	80003d0 <LoopCopyDataInit>

080003c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ce:	3104      	adds	r1, #4

080003d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003d8:	d3f6      	bcc.n	80003c8 <CopyDataInit>
  ldr  r2, =_sbss
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003dc:	e002      	b.n	80003e4 <LoopFillZerobss>

080003de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003e0:	f842 3b04 	str.w	r3, [r2], #4

080003e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003e8:	d3f9      	bcc.n	80003de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ea:	f00a f901 	bl	800a5f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f023 f8e9 	bl	80235c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f2:	f002 f927 	bl	8002644 <main>
  bx  lr
 80003f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003f8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003fc:	08027e30 	.word	0x08027e30
  ldr  r0, =_sdata
 8000400:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000404:	24000144 	.word	0x24000144
  ldr  r2, =_sbss
 8000408:	24000144 	.word	0x24000144
  ldr  r3, = _ebss
 800040c:	24010198 	.word	0x24010198

08000410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>

08000412 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8000412:	4770      	bx	lr

08000414 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8000414:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8000416:	f000 ff7b 	bl	8001310 <touchgfx_init>
}
 800041a:	bd08      	pop	{r3, pc}

0800041c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800041c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800041e:	f000 fff3 	bl	8001408 <touchgfx_taskEntry>
}
 8000422:	bd08      	pop	{r3, pc}

08000424 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000424:	4a02      	ldr	r2, [pc, #8]	; (8000430 <_ZN20STM32TouchControllerD1Ev+0xc>)
 8000426:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 8000428:	4a02      	ldr	r2, [pc, #8]	; (8000434 <_ZN20STM32TouchControllerD1Ev+0x10>)
 800042a:	6002      	str	r2, [r0, #0]
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	08024a7c 	.word	0x08024a7c
 8000434:	08024a64 	.word	0x08024a64

08000438 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000438:	b500      	push	{lr}
 800043a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800043c:	2308      	movs	r3, #8
 800043e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000440:	2000      	movs	r0, #0
 8000442:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <_ZN20STM32TouchController4initEv+0x24>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <_ZN20STM32TouchController4initEv+0x28>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000450:	4669      	mov	r1, sp
 8000452:	f009 ffd9 	bl	800a408 <BSP_TS_Init>
}
 8000456:	b005      	add	sp, #20
 8000458:	f85d fb04 	ldr.w	pc, [sp], #4
 800045c:	2400ff0e 	.word	0x2400ff0e
 8000460:	2400ff10 	.word	0x2400ff10

08000464 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	b085      	sub	sp, #20
 8000468:	460d      	mov	r5, r1
 800046a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800046c:	2000      	movs	r0, #0
 800046e:	9001      	str	r0, [sp, #4]
 8000470:	9002      	str	r0, [sp, #8]
 8000472:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000474:	a901      	add	r1, sp, #4
 8000476:	f00a f837 	bl	800a4e8 <BSP_TS_GetState>
 800047a:	b140      	cbz	r0, 800048e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000480:	f383 8811 	msr	BASEPRI, r3
 8000484:	f3bf 8f6f 	isb	sy
 8000488:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800048c:	e7fe      	b.n	800048c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800048e:	9b01      	ldr	r3, [sp, #4]
 8000490:	b913      	cbnz	r3, 8000498 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000492:	2000      	movs	r0, #0
}
 8000494:	b005      	add	sp, #20
 8000496:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000498:	9b02      	ldr	r3, [sp, #8]
 800049a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800049c:	9b03      	ldr	r3, [sp, #12]
 800049e:	6023      	str	r3, [r4, #0]
        return true;
 80004a0:	2001      	movs	r0, #1
 80004a2:	e7f7      	b.n	8000494 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

080004a4 <_ZN20STM32TouchControllerD0Ev>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	4604      	mov	r4, r0
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <_ZN20STM32TouchControllerD0Ev+0x18>)
 80004aa:	6003      	str	r3, [r0, #0]
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 80004ae:	6003      	str	r3, [r0, #0]
 80004b0:	2104      	movs	r1, #4
 80004b2:	f022 ff18 	bl	80232e6 <_ZdlPvj>
 80004b6:	4620      	mov	r0, r4
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop
 80004bc:	08024a7c 	.word	0x08024a7c
 80004c0:	08024a64 	.word	0x08024a64

080004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80004c4:	b508      	push	{r3, lr}
    switch (id)
 80004c6:	2803      	cmp	r0, #3
 80004c8:	d80e      	bhi.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 80004ca:	e8df f000 	tbb	[pc, r0]
 80004ce:	0e02      	.short	0x0e02
 80004d0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004d8:	fab2 f282 	clz	r2, r2
 80004dc:	0952      	lsrs	r2, r2, #5
 80004de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e2:	4815      	ldr	r0, [pc, #84]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004e4:	f00a fe9f 	bl	800b226 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004e8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004ec:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	0952      	lsrs	r2, r2, #5
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004fc:	f00a fe93 	bl	800b226 <HAL_GPIO_WritePin>
        break;
 8000500:	e7f2      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 8000504:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000508:	fab2 f282 	clz	r2, r2
 800050c:	0952      	lsrs	r2, r2, #5
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 8000514:	f00a fe87 	bl	800b226 <HAL_GPIO_WritePin>
        break;
 8000518:	e7e6      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 800051c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000520:	fab2 f282 	clz	r2, r2
 8000524:	0952      	lsrs	r2, r2, #5
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 800052c:	f00a fe7b 	bl	800b226 <HAL_GPIO_WritePin>
}
 8000530:	e7da      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000532:	bf00      	nop
 8000534:	24000160 	.word	0x24000160
 8000538:	58021c00 	.word	0x58021c00
 800053c:	58022000 	.word	0x58022000

08000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000540:	b508      	push	{r3, lr}
    switch (id)
 8000542:	2803      	cmp	r0, #3
 8000544:	d80e      	bhi.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000546:	e8df f000 	tbb	[pc, r0]
 800054a:	0e02      	.short	0x0e02
 800054c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000554:	b103      	cbz	r3, 8000558 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000556:	2001      	movs	r0, #1
 8000558:	4602      	mov	r2, r0
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000560:	f00a fe61 	bl	800b226 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000564:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000568:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800056c:	b903      	cbnz	r3, 8000570 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800056e:	2000      	movs	r0, #0
 8000570:	4602      	mov	r2, r0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000578:	f00a fe55 	bl	800b226 <HAL_GPIO_WritePin>
        break;
 800057c:	e7f2      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000580:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000584:	b133      	cbz	r3, 8000594 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800058e:	f00a fe4a 	bl	800b226 <HAL_GPIO_WritePin>
        break;
 8000592:	e7e7      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000594:	2200      	movs	r2, #0
 8000596:	e7f7      	b.n	8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800059a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800059e:	b133      	cbz	r3, 80005ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 80005a8:	f00a fe3d 	bl	800b226 <HAL_GPIO_WritePin>
}
 80005ac:	e7da      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80005ae:	2200      	movs	r2, #0
 80005b0:	e7f7      	b.n	80005a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 80005b2:	bf00      	nop
 80005b4:	24000160 	.word	0x24000160
 80005b8:	58021c00 	.word	0x58021c00
 80005bc:	58022000 	.word	0x58022000

080005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80005c0:	b508      	push	{r3, lr}
    switch (id)
 80005c2:	2803      	cmp	r0, #3
 80005c4:	d808      	bhi.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005c6:	e8df f000 	tbb	[pc, r0]
 80005ca:	0802      	.short	0x0802
 80005cc:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005d4:	f00a fe2d 	bl	800b232 <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005d8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005e0:	f00a fe27 	bl	800b232 <HAL_GPIO_TogglePin>
        break;
 80005e4:	e7f8      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005ec:	f00a fe21 	bl	800b232 <HAL_GPIO_TogglePin>
        break;
 80005f0:	e7f2      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005f8:	f00a fe1b 	bl	800b232 <HAL_GPIO_TogglePin>
}
 80005fc:	e7ec      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005fe:	bf00      	nop
 8000600:	58021c00 	.word	0x58021c00
 8000604:	58022000 	.word	0x58022000

08000608 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 8000608:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800060c:	2301      	movs	r3, #1
 800060e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000612:	4770      	bx	lr

08000614 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000614:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8000616:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800061a:	b123      	cbz	r3, 8000626 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 800061c:	6840      	ldr	r0, [r0, #4]
 800061e:	6803      	ldr	r3, [r0, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 8000624:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 8000626:	2000      	movs	r0, #0
 8000628:	e7fc      	b.n	8000624 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

0800062a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800062a:	2000      	movs	r0, #0
 800062c:	4770      	bx	lr
	...

08000630 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000630:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000632:	3900      	subs	r1, #0
 8000634:	bf18      	it	ne
 8000636:	2101      	movne	r1, #1
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800063a:	7019      	strb	r1, [r3, #0]
    }
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2400ff13 	.word	0x2400ff13

08000644 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000644:	2000      	movs	r0, #0
 8000646:	4770      	bx	lr

08000648 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000648:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800064a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800064c:	b10b      	cbz	r3, 8000652 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800064e:	4608      	mov	r0, r1
 8000650:	4798      	blx	r3
        }
    }
 8000652:	bd08      	pop	{r3, pc}

08000654 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000654:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000658:	4770      	bx	lr

0800065a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800065a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800065c:	6840      	ldr	r0, [r0, #4]
 800065e:	6803      	ldr	r3, [r0, #0]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4798      	blx	r3
    }
 8000664:	bd08      	pop	{r3, pc}
	...

08000668 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000668:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800066c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000670:	429a      	cmp	r2, r3
 8000672:	d00c      	beq.n	800068e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b9ab      	cbnz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800067c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000680:	8818      	ldrh	r0, [r3, #0]
 8000682:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000684:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b143      	cbz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000696:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800069a:	8818      	ldrh	r0, [r3, #0]
 800069c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800069e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
        }
    }
 80006a6:	4770      	bx	lr
 80006a8:	2400ff0c 	.word	0x2400ff0c
 80006ac:	2400ff0a 	.word	0x2400ff0a
 80006b0:	2400ff08 	.word	0x2400ff08

080006b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <_ZN11TouchGFXHALD1Ev+0x10>)
 80006b6:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <_ZN11TouchGFXHALD1Ev+0x14>)
 80006ba:	6002      	str	r2, [r0, #0]
    {
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <_ZN11TouchGFXHALD1Ev+0x18>)
 80006be:	6002      	str	r2, [r0, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	08024c0c 	.word	0x08024c0c
 80006c8:	0802521c 	.word	0x0802521c
 80006cc:	08026c44 	.word	0x08026c44

080006d0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006d0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006d2:	f001 fc65 	bl	8001fa0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006d6:	bd08      	pop	{r3, pc}

080006d8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006d8:	b508      	push	{r3, lr}
 80006da:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006dc:	6803      	ldr	r3, [r0, #0]
 80006de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006e2:	4798      	blx	r3
    enableInterrupts();
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006e8:	4620      	mov	r0, r4
 80006ea:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006ec:	f000 f920 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f4:	4620      	mov	r0, r4
 80006f6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006fe:	f00a fd92 	bl	800b226 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000702:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <_ZN11TouchGFXHAL9taskEntryEv+0x58>)
 8000704:	2201      	movs	r2, #1
 8000706:	2104      	movs	r1, #4
 8000708:	4628      	mov	r0, r5
 800070a:	f00a fd8c 	bl	800b226 <HAL_GPIO_WritePin>

    /* Wait to avoid seeing garbage on start up */
    HAL_Delay(200);
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f009 ffec 	bl	800a6ec <HAL_Delay>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2102      	movs	r1, #2
 8000718:	4628      	mov	r0, r5
 800071a:	f00a fd84 	bl	800b226 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800071e:	f000 f907 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000726:	4620      	mov	r0, r4
 8000728:	4798      	blx	r3
    for (;;)
 800072a:	e7f8      	b.n	800071e <_ZN11TouchGFXHAL9taskEntryEv+0x46>
 800072c:	58022800 	.word	0x58022800
 8000730:	58020000 	.word	0x58020000

08000734 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000734:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000736:	f001 f98d 	bl	8001a54 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 800073a:	bd08      	pop	{r3, pc}

0800073c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800073c:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800073e:	f001 f98f 	bl	8001a60 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000742:	bd08      	pop	{r3, pc}

08000744 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000744:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000746:	f001 fc53 	bl	8001ff0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000756:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800075a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800075e:	e000      	b.n	8000762 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000760:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000762:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000766:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800076a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800076e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000774:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000778:	4613      	mov	r3, r2
 800077a:	3a01      	subs	r2, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f2      	bne.n	8000766 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8000780:	1e43      	subs	r3, r0, #1
 8000782:	2800      	cmp	r0, #0
 8000784:	d1ec      	bne.n	8000760 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800078a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000794:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000796:	f001 f91b 	bl	80019d0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800079a:	bd08      	pop	{r3, pc}

0800079c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800079c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800079e:	f001 f921 	bl	80019e4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80007a2:	bd08      	pop	{r3, pc}

080007a4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80007a4:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80007a6:	f001 f927 	bl	80019f8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80007aa:	bd08      	pop	{r3, pc}

080007ac <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80007ac:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80007ae:	f001 f937 	bl	8001a20 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80007b2:	bd08      	pop	{r3, pc}

080007b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80007b4:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007b6:	b161      	cbz	r1, 80007d2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80007b8:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80007ba:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80007bc:	3a00      	subs	r2, #0
 80007be:	bf18      	it	ne
 80007c0:	2201      	movne	r2, #1
 80007c2:	4907      	ldr	r1, [pc, #28]	; (80007e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 80007c4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80007c6:	6802      	ldr	r2, [r0, #0]
 80007c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80007cc:	4619      	mov	r1, r3
 80007ce:	4790      	blx	r2
    }
 80007d0:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007d6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007dc:	f022 fdb2 	bl	8023344 <__assert_func>
 80007e0:	2400ff12 	.word	0x2400ff12
 80007e4:	08024a8c 	.word	0x08024a8c
 80007e8:	08024ac4 	.word	0x08024ac4
 80007ec:	08024b14 	.word	0x08024b14

080007f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007f0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d808      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	4293      	cmp	r3, r2
 8000800:	d804      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000804:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000808:	801a      	strh	r2, [r3, #0]
    }
 800080a:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000810:	219e      	movs	r1, #158	; 0x9e
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000814:	f022 fd96 	bl	8023344 <__assert_func>
 8000818:	2400ff08 	.word	0x2400ff08
 800081c:	2400ff0a 	.word	0x2400ff0a
 8000820:	2400ff0e 	.word	0x2400ff0e
 8000824:	2400ff10 	.word	0x2400ff10
 8000828:	08024b5c 	.word	0x08024b5c
 800082c:	08024bc0 	.word	0x08024bc0
 8000830:	08024b14 	.word	0x08024b14

08000834 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000838:	f014 fcc0 	bl	80151bc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000842:	4620      	mov	r0, r4
 8000844:	4798      	blx	r3
    }
 8000846:	bd10      	pop	{r4, pc}

08000848 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000848:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800084a:	f013 ff10 	bl	801466e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800084e:	bd08      	pop	{r3, pc}

08000850 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000850:	b510      	push	{r4, lr}
 8000852:	4604      	mov	r4, r0
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000856:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <_ZN11TouchGFXHALD0Ev+0x20>)
 800085a:	6003      	str	r3, [r0, #0]
    {
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <_ZN11TouchGFXHALD0Ev+0x24>)
 800085e:	6003      	str	r3, [r0, #0]
 8000860:	217c      	movs	r1, #124	; 0x7c
 8000862:	f022 fd40 	bl	80232e6 <_ZdlPvj>
 8000866:	4620      	mov	r0, r4
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	08024c0c 	.word	0x08024c0c
 8000870:	0802521c 	.word	0x0802521c
 8000874:	08026c44 	.word	0x08026c44

08000878 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000878:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800087a:	2200      	movs	r2, #0
 800087c:	2101      	movs	r1, #1
 800087e:	4608      	mov	r0, r1
 8000880:	f00e fe46 	bl	800f510 <osSemaphoreNew>
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000886:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000888:	b140      	cbz	r0, 800089c <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	2001      	movs	r0, #1
 8000890:	f00e fefd 	bl	800f68e <osMessageQueueNew>
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000896:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000898:	b130      	cbz	r0, 80008a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800089a:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008a0:	2128      	movs	r1, #40	; 0x28
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008a4:	f022 fd4e 	bl	8023344 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008ac:	212c      	movs	r1, #44	; 0x2c
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008b0:	f022 fd48 	bl	8023344 <__assert_func>
 80008b4:	24000174 	.word	0x24000174
 80008b8:	24000170 	.word	0x24000170
 80008bc:	08024cdc 	.word	0x08024cdc
 80008c0:	08024d28 	.word	0x08024d28
 80008c4:	08024d58 	.word	0x08024d58
 80008c8:	08024db8 	.word	0x08024db8

080008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80008cc:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80008ce:	f04f 31ff 	mov.w	r1, #4294967295
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f00e fe77 	bl	800f5c8 <osSemaphoreAcquire>
}
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	24000174 	.word	0x24000174

080008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008e0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008e2:	4b02      	ldr	r3, [pc, #8]	; (80008ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f00e fea3 	bl	800f630 <osSemaphoreRelease>
}
 80008ea:	bd08      	pop	{r3, pc}
 80008ec:	24000174 	.word	0x24000174

080008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008f0:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	f00e fe66 	bl	800f5c8 <osSemaphoreAcquire>
}
 80008fc:	bd08      	pop	{r3, pc}
 80008fe:	bf00      	nop
 8000900:	24000174 	.word	0x24000174

08000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8000904:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 8000906:	4b02      	ldr	r3, [pc, #8]	; (8000910 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f00e fe91 	bl	800f630 <osSemaphoreRelease>
}
 800090e:	bd08      	pop	{r3, pc}
 8000910:	24000174 	.word	0x24000174

08000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000914:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000916:	2300      	movs	r3, #0
 8000918:	461a      	mov	r2, r3
 800091a:	4903      	ldr	r1, [pc, #12]	; (8000928 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800091e:	6800      	ldr	r0, [r0, #0]
 8000920:	f00e ff01 	bl	800f726 <osMessageQueuePut>
}
 8000924:	bd08      	pop	{r3, pc}
 8000926:	bf00      	nop
 8000928:	24000004 	.word	0x24000004
 800092c:	24000170 	.word	0x24000170

08000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000930:	b510      	push	{r4, lr}
 8000932:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000934:	4c07      	ldr	r4, [pc, #28]	; (8000954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000936:	2300      	movs	r3, #0
 8000938:	461a      	mov	r2, r3
 800093a:	a901      	add	r1, sp, #4
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	f00e ff32 	bl	800f7a6 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2200      	movs	r2, #0
 8000948:	a901      	add	r1, sp, #4
 800094a:	6820      	ldr	r0, [r4, #0]
 800094c:	f00e ff2b 	bl	800f7a6 <osMessageQueueGet>
}
 8000950:	b002      	add	sp, #8
 8000952:	bd10      	pop	{r4, pc}
 8000954:	24000170 	.word	0x24000170

08000958 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000958:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 800095a:	6803      	ldr	r3, [r0, #0]
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4798      	blx	r3
    }
 8000960:	bd08      	pop	{r3, pc}

08000962 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000962:	2001      	movs	r0, #1
 8000964:	4770      	bx	lr

08000966 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000966:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	4798      	blx	r3
    }
 800096e:	bd08      	pop	{r3, pc}

08000970 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8000970:	b508      	push	{r3, lr}
        return instance;
 8000972:	4b03      	ldr	r3, [pc, #12]	; (8000980 <DMA2D_XferCpltCallback+0x10>)
 8000974:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000976:	6858      	ldr	r0, [r3, #4]
 8000978:	6803      	ldr	r3, [r0, #0]
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800097e:	bd08      	pop	{r3, pc}
 8000980:	2400ff14 	.word	0x2400ff14

08000984 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <_ZN8STM32DMAD1Ev+0x24>)
 8000986:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_ZN8STM32DMAD1Ev+0x28>)
 800098a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800098e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000996:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_ZN8STM32DMAD1Ev+0x2c>)
 800099c:	60c2      	str	r2, [r0, #12]
    {
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_ZN8STM32DMAD1Ev+0x30>)
 80009a0:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_ZN8STM32DMAD1Ev+0x34>)
 80009a4:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 80009a6:	4770      	bx	lr
 80009a8:	08024f98 	.word	0x08024f98
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	08026d6c 	.word	0x08026d6c
 80009b4:	08024f74 	.word	0x08024f74
 80009b8:	08026d1c 	.word	0x08026d1c

080009bc <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80009bc:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <_ZN8STM32DMA10initializeEv+0x40>)
 80009c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009c4:	f042 0210 	orr.w	r2, r2, #16
 80009c8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80009cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009d0:	f002 0210 	and.w	r2, r2, #16
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009da:	f042 0210 	orr.w	r2, r2, #16
 80009de:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009e2:	f022 0210 	bic.w	r2, r2, #16
 80009e6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_ZN8STM32DMA10initializeEv+0x44>)
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <_ZN8STM32DMA10initializeEv+0x48>)
 80009ec:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009f4:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009f6:	b002      	add	sp, #8
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	58024400 	.word	0x58024400
 8000a00:	24004f34 	.word	0x24004f34
 8000a04:	08000971 	.word	0x08000971
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000a0c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000a10:	4770      	bx	lr

08000a12 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000a12:	b510      	push	{r4, lr}
 8000a14:	4604      	mov	r4, r0
}
 8000a16:	f7ff ffb5 	bl	8000984 <_ZN8STM32DMAD1Ev>
 8000a1a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f022 fc61 	bl	80232e6 <_ZdlPvj>
 8000a24:	4620      	mov	r0, r4
 8000a26:	bd10      	pop	{r4, pc}

08000a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000a28:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000a2a:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d809      	bhi.n	8000a44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8000a30:	e8df f003 	tbb	[pc, r3]
 8000a34:	080e1006 	.word	0x080e1006
 8000a38:	10080808 	.word	0x10080808
 8000a3c:	1010      	.short	0x1010
 8000a3e:	10          	.byte	0x10
 8000a3f:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a40:	2002      	movs	r0, #2
        break;
 8000a42:	e008      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a48:	2187      	movs	r1, #135	; 0x87
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a4c:	f022 fc7a 	bl	8023344 <__assert_func>
    switch (format)
 8000a50:	2000      	movs	r0, #0
 8000a52:	e000      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a54:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a58:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a5a:	8aca      	ldrh	r2, [r1, #22]
 8000a5c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a60:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a66:	690a      	ldr	r2, [r1, #16]
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a6a:	8b4a      	ldrh	r2, [r1, #26]
 8000a6c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a70:	eba2 020c 	sub.w	r2, r2, ip
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a76:	680b      	ldr	r3, [r1, #0]
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d008      	beq.n	8000a8e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a7e:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a84:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a8a:	601a      	str	r2, [r3, #0]
    }
}
 8000a8c:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a8e:	8b4a      	ldrh	r2, [r1, #26]
 8000a90:	8a8b      	ldrh	r3, [r1, #20]
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a96:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a98:	8b4a      	ldrh	r2, [r1, #26]
 8000a9a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a9e:	eba2 020c 	sub.w	r2, r2, ip
 8000aa2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000aa4:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000aa6:	7f08      	ldrb	r0, [r1, #28]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000aaa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000aae:	61da      	str	r2, [r3, #28]
 8000ab0:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000ab2:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab4:	690a      	ldr	r2, [r1, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab8:	690a      	ldr	r2, [r1, #16]
 8000aba:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e7e4      	b.n	8000a8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000ac2:	bf00      	nop
 8000ac4:	08024dfc 	.word	0x08024dfc
 8000ac8:	08024e18 	.word	0x08024e18
 8000acc:	08024e64 	.word	0x08024e64
 8000ad0:	52001000 	.word	0x52001000
 8000ad4:	00030201 	.word	0x00030201
 8000ad8:	00010009 	.word	0x00010009
 8000adc:	00020201 	.word	0x00020201

08000ae0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ae2:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ae4:	2b0b      	cmp	r3, #11
 8000ae6:	d815      	bhi.n	8000b14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ae8:	e8df f003 	tbb	[pc, r3]
 8000aec:	141a1c06 	.word	0x141a1c06
 8000af0:	12141414 	.word	0x12141414
 8000af4:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000af8:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000afa:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000afc:	2b0b      	cmp	r3, #11
 8000afe:	d820      	bhi.n	8000b42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000b00:	e8df f003 	tbb	[pc, r3]
 8000b04:	1f252712 	.word	0x1f252712
 8000b08:	1d1f1f1f 	.word	0x1d1f1f1f
 8000b0c:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b10:	2005      	movs	r0, #5
        break;
 8000b12:	e7f2      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000b14:	4b75      	ldr	r3, [pc, #468]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b16:	4a76      	ldr	r2, [pc, #472]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b18:	2166      	movs	r1, #102	; 0x66
 8000b1a:	4876      	ldr	r0, [pc, #472]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b1c:	f022 fc12 	bl	8023344 <__assert_func>
    switch (format)
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7ea      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b24:	2001      	movs	r0, #1
 8000b26:	e7e8      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000b28:	2402      	movs	r4, #2
    switch (format)
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d815      	bhi.n	8000b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000b2e:	e8df f003 	tbb	[pc, r3]
 8000b32:	1c12      	.short	0x1c12
 8000b34:	1414141a 	.word	0x1414141a
 8000b38:	1c1c1c14 	.word	0x1c1c1c14
 8000b3c:	1c          	.byte	0x1c
 8000b3d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b3e:	2405      	movs	r4, #5
        break;
 8000b40:	e7f3      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b44:	4a6a      	ldr	r2, [pc, #424]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b46:	2166      	movs	r1, #102	; 0x66
 8000b48:	486a      	ldr	r0, [pc, #424]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b4a:	f022 fbfb 	bl	8023344 <__assert_func>
    switch (format)
 8000b4e:	2400      	movs	r4, #0
 8000b50:	e7eb      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b52:	2401      	movs	r4, #1
 8000b54:	e7e9      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b56:	2502      	movs	r5, #2
        break;
 8000b58:	e008      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b5c:	4a66      	ldr	r2, [pc, #408]	; (8000cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b5e:	2187      	movs	r1, #135	; 0x87
 8000b60:	4864      	ldr	r0, [pc, #400]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b62:	f022 fbef 	bl	8023344 <__assert_func>
    switch (format)
 8000b66:	2500      	movs	r5, #0
 8000b68:	e000      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b6a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b6c:	8b4a      	ldrh	r2, [r1, #26]
 8000b6e:	8a8b      	ldrh	r3, [r1, #20]
 8000b70:	1ad2      	subs	r2, r2, r3
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b76:	8b4a      	ldrh	r2, [r1, #26]
 8000b78:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b7c:	eba2 020c 	sub.w	r2, r2, ip
 8000b80:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b82:	8b0a      	ldrh	r2, [r1, #24]
 8000b84:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b88:	eba2 020c 	sub.w	r2, r2, ip
 8000b8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b8e:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b90:	8aca      	ldrh	r2, [r1, #22]
 8000b92:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b96:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b9a:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b9c:	690a      	ldr	r2, [r1, #16]
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000ba0:	684a      	ldr	r2, [r1, #4]
 8000ba2:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	2b80      	cmp	r3, #128	; 0x80
 8000ba8:	d036      	beq.n	8000c18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000baa:	d813      	bhi.n	8000bd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000bac:	2b20      	cmp	r3, #32
 8000bae:	d07c      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb0:	2b40      	cmp	r3, #64	; 0x40
 8000bb2:	d07a      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	f040 8085 	bne.w	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bba:	7f0b      	ldrb	r3, [r1, #28]
 8000bbc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bc0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bc4:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bc6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bc8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bca:	690a      	ldr	r2, [r1, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bd0:	601a      	str	r2, [r3, #0]
        break;
 8000bd2:	e020      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd8:	d010      	beq.n	8000bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bde:	d171      	bne.n	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000be0:	7f0b      	ldrb	r3, [r1, #28]
 8000be2:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000be4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bea:	61da      	str	r2, [r3, #28]
 8000bec:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bee:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bf2:	690a      	ldr	r2, [r1, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bf6:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bf8:	601a      	str	r2, [r3, #0]
        break;
 8000bfa:	e00c      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bfc:	7f0b      	ldrb	r3, [r1, #28]
 8000bfe:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000c00:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c0a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c0c:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0e:	690a      	ldr	r2, [r1, #16]
 8000c10:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c12:	4a3b      	ldr	r2, [pc, #236]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000c18:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c1a:	7f0b      	ldrb	r3, [r1, #28]
 8000c1c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c20:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c26:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c28:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c2a:	6908      	ldr	r0, [r1, #16]
 8000c2c:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000c2e:	1d10      	adds	r0, r2, #4
 8000c30:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000c32:	7813      	ldrb	r3, [r2, #0]
 8000c34:	b18b      	cbz	r3, 8000c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d12c      	bne.n	8000c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c3a:	7f0b      	ldrb	r3, [r1, #28]
 8000c3c:	2bff      	cmp	r3, #255	; 0xff
 8000c3e:	d027      	beq.n	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c40:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c44:	69c4      	ldr	r4, [r0, #28]
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c48:	4023      	ands	r3, r4
 8000c4a:	8852      	ldrh	r2, [r2, #2]
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	61c3      	str	r3, [r0, #28]
                break;
 8000c58:	e009      	b.n	8000c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c5a:	4928      	ldr	r1, [pc, #160]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c5c:	69c8      	ldr	r0, [r1, #28]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c60:	4003      	ands	r3, r0
 8000c62:	8852      	ldrh	r2, [r2, #2]
 8000c64:	3a01      	subs	r2, #1
 8000c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c6a:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c6c:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c70:	69d3      	ldr	r3, [r2, #28]
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f013 0f20 	tst.w	r3, #32
 8000c80:	d1fa      	bne.n	8000c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c88:	b159      	cbz	r1, 8000ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e7c2      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c90:	2100      	movs	r1, #0
 8000c92:	e7d6      	b.n	8000c42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c98:	f240 1101 	movw	r1, #257	; 0x101
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c9e:	f022 fb51 	bl	8023344 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e7b5      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000caa:	7f0b      	ldrb	r3, [r1, #28]
 8000cac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cb0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cb6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000cb8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cba:	690a      	ldr	r2, [r1, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000cc0:	601a      	str	r2, [r3, #0]
        break;
 8000cc2:	e7a8      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cc4:	7f0b      	ldrb	r3, [r1, #28]
 8000cc6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cca:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cd0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cd2:	7f4a      	ldrb	r2, [r1, #29]
 8000cd4:	7f8b      	ldrb	r3, [r1, #30]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d003      	beq.n	8000ce2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e799      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ce4:	f240 2201 	movw	r2, #513	; 0x201
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	e794      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cec:	08024dfc 	.word	0x08024dfc
 8000cf0:	08024ec4 	.word	0x08024ec4
 8000cf4:	08024e64 	.word	0x08024e64
 8000cf8:	08024e18 	.word	0x08024e18
 8000cfc:	52001000 	.word	0x52001000
 8000d00:	00020201 	.word	0x00020201
 8000d04:	00020009 	.word	0x00020009
 8000d08:	0002000a 	.word	0x0002000a
 8000d0c:	ffff00ef 	.word	0xffff00ef
 8000d10:	08024f10 	.word	0x08024f10
 8000d14:	08024f2c 	.word	0x08024f2c
 8000d18:	00010201 	.word	0x00010201

08000d1c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <_ZN8STM32DMAC1Ev+0x38>)
 8000d22:	f840 3b0c 	str.w	r3, [r0], #12
 8000d26:	6068      	str	r0, [r5, #4]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	722b      	strb	r3, [r5, #8]
 8000d2c:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000d2e:	462c      	mov	r4, r5
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <_ZN8STM32DMAC1Ev+0x3c>)
 8000d32:	f844 3b20 	str.w	r3, [r4], #32
 8000d36:	2260      	movs	r2, #96	; 0x60
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f014 fb81 	bl	8015440 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d3e:	235f      	movs	r3, #95	; 0x5f
 8000d40:	e003      	b.n	8000d4a <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60e2      	str	r2, [r4, #12]
 8000d46:	3424      	adds	r4, #36	; 0x24
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	daf9      	bge.n	8000d42 <_ZN8STM32DMAC1Ev+0x26>
}
 8000d4e:	4628      	mov	r0, r5
 8000d50:	bd38      	pop	{r3, r4, r5, pc}
 8000d52:	bf00      	nop
 8000d54:	08026d1c 	.word	0x08026d1c
 8000d58:	08024f98 	.word	0x08024f98

08000d5c <_ZN8touchgfx9TypedTextD1Ev>:
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
    {
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <_ZN8touchgfx9TypedTextD1Ev+0x8>)
 8000d5e:	6003      	str	r3, [r0, #0]
    }
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	08024fe8 	.word	0x08024fe8

08000d68 <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d68:	4b01      	ldr	r3, [pc, #4]	; (8000d70 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d6a:	6003      	str	r3, [r0, #0]
    }
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	0802500c 	.word	0x0802500c

08000d74 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d74:	4770      	bx	lr

08000d76 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d76:	4770      	bx	lr

08000d78 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d78:	4770      	bx	lr

08000d7a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d7a:	4770      	bx	lr

08000d7c <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d7c:	4770      	bx	lr

08000d7e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d7e:	4770      	bx	lr

08000d80 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d80:	4b01      	ldr	r3, [pc, #4]	; (8000d88 <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d82:	6003      	str	r3, [r0, #0]
    }
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	0802501c 	.word	0x0802501c

08000d8c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d8c:	4770      	bx	lr

08000d8e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d8e:	4770      	bx	lr

08000d90 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d90:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d94:	6808      	ldr	r0, [r1, #0]
 8000d96:	6849      	ldr	r1, [r1, #4]
 8000d98:	c303      	stmia	r3!, {r0, r1}
    }
 8000d9a:	4770      	bx	lr

08000d9c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000da0:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000da4:	b158      	cbz	r0, 8000dbe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000da6:	6803      	ldr	r3, [r0, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4798      	blx	r3
 8000dac:	b138      	cbz	r0, 8000dbe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000dae:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000db2:	6803      	ldr	r3, [r0, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000dbe:	bd10      	pop	{r4, pc}

08000dc0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000dc2:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000dc6:	6002      	str	r2, [r0, #0]
    {
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000dca:	6002      	str	r2, [r0, #0]
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	0802505c 	.word	0x0802505c
 8000dd4:	080270d4 	.word	0x080270d4
 8000dd8:	0802501c 	.word	0x0802501c

08000ddc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000dde:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000de2:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000de8:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000dee:	6002      	str	r2, [r0, #0]
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000df2:	6002      	str	r2, [r0, #0]
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000df6:	6002      	str	r2, [r0, #0]
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	080250c0 	.word	0x080250c0
 8000e00:	080250a8 	.word	0x080250a8
 8000e04:	08025044 	.word	0x08025044
 8000e08:	0802505c 	.word	0x0802505c
 8000e0c:	080270d4 	.word	0x080270d4
 8000e10:	0802501c 	.word	0x0802501c

08000e14 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <_ZN19FrontendApplicationD1Ev+0x24>)
 8000e16:	6002      	str	r2, [r0, #0]
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <_ZN19FrontendApplicationD1Ev+0x28>)
 8000e1a:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000e1e:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000e24:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <_ZN19FrontendApplicationD1Ev+0x34>)
 8000e2a:	6002      	str	r2, [r0, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <_ZN19FrontendApplicationD1Ev+0x38>)
 8000e2e:	6002      	str	r2, [r0, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000e32:	6002      	str	r2, [r0, #0]
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	0802510c 	.word	0x0802510c
 8000e3c:	080250c0 	.word	0x080250c0
 8000e40:	080250a8 	.word	0x080250a8
 8000e44:	08025044 	.word	0x08025044
 8000e48:	0802505c 	.word	0x0802505c
 8000e4c:	080270d4 	.word	0x080270d4
 8000e50:	0802501c 	.word	0x0802501c

08000e54 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e54:	4a02      	ldr	r2, [pc, #8]	; (8000e60 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e56:	6002      	str	r2, [r0, #0]
    {
 8000e58:	4a02      	ldr	r2, [pc, #8]	; (8000e64 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e5a:	6002      	str	r2, [r0, #0]
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	08025158 	.word	0x08025158
 8000e64:	0802500c 	.word	0x0802500c

08000e68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e68:	4a02      	ldr	r2, [pc, #8]	; (8000e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e6a:	6002      	str	r2, [r0, #0]
    {
 8000e6c:	4a02      	ldr	r2, [pc, #8]	; (8000e78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e6e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	080250a8 	.word	0x080250a8
 8000e78:	08025044 	.word	0x08025044

08000e7c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	4770      	bx	lr

08000e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e80:	200c      	movs	r0, #12
 8000e82:	4770      	bx	lr

08000e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e88:	0089      	lsls	r1, r1, #2
 8000e8a:	3108      	adds	r1, #8
    }
 8000e8c:	4408      	add	r0, r1
 8000e8e:	4770      	bx	lr

08000e90 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e94:	0089      	lsls	r1, r1, #2
 8000e96:	3108      	adds	r1, #8
    }
 8000e98:	4408      	add	r0, r1
 8000e9a:	4770      	bx	lr

08000e9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	4770      	bx	lr

08000ea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ea0:	f642 60c8 	movw	r0, #11976	; 0x2ec8
 8000ea4:	4770      	bx	lr

08000ea6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ea6:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 8000eaa:	fb03 f101 	mul.w	r1, r3, r1
 8000eae:	3108      	adds	r1, #8
    }
 8000eb0:	4408      	add	r0, r1
 8000eb2:	4770      	bx	lr

08000eb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb4:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 8000eb8:	fb03 f101 	mul.w	r1, r3, r1
 8000ebc:	3108      	adds	r1, #8
    }
 8000ebe:	4408      	add	r0, r1
 8000ec0:	4770      	bx	lr

08000ec2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4770      	bx	lr

08000ec6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ec6:	2010      	movs	r0, #16
 8000ec8:	4770      	bx	lr

08000eca <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eca:	0109      	lsls	r1, r1, #4
 8000ecc:	3108      	adds	r1, #8
    }
 8000ece:	4408      	add	r0, r1
 8000ed0:	4770      	bx	lr

08000ed2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ed2:	0109      	lsls	r1, r1, #4
 8000ed4:	3108      	adds	r1, #8
    }
 8000ed6:	4408      	add	r0, r1
 8000ed8:	4770      	bx	lr

08000eda <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000eda:	b508      	push	{r3, lr}
 8000edc:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000ede:	6841      	ldr	r1, [r0, #4]
 8000ee0:	68c2      	ldr	r2, [r0, #12]
 8000ee2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ee6:	f012 0f01 	tst.w	r2, #1
 8000eea:	d102      	bne.n	8000ef2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	4798      	blx	r3
    }
 8000ef0:	bd08      	pop	{r3, pc}
 8000ef2:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000ef6:	f851 200c 	ldr.w	r2, [r1, ip]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	58d3      	ldr	r3, [r2, r3]
 8000efe:	e7f6      	b.n	8000eee <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000f00 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000f00:	6843      	ldr	r3, [r0, #4]
 8000f02:	b14b      	cbz	r3, 8000f18 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000f04:	6883      	ldr	r3, [r0, #8]
 8000f06:	b10b      	cbz	r3, 8000f0c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	4770      	bx	lr
 8000f0c:	68c3      	ldr	r3, [r0, #12]
 8000f0e:	f013 0f01 	tst.w	r3, #1
 8000f12:	d003      	beq.n	8000f1c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000f14:	2001      	movs	r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	2000      	movs	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	2000      	movs	r0, #0
    }
 8000f1e:	4770      	bx	lr

08000f20 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000f20:	b510      	push	{r4, lr}
 8000f22:	4604      	mov	r4, r0
    {
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000f26:	6003      	str	r3, [r0, #0]
    }
 8000f28:	2104      	movs	r1, #4
 8000f2a:	f022 f9dc 	bl	80232e6 <_ZdlPvj>
 8000f2e:	4620      	mov	r0, r4
 8000f30:	bd10      	pop	{r4, pc}
 8000f32:	bf00      	nop
 8000f34:	0802501c 	.word	0x0802501c

08000f38 <_ZN16FrontendHeapBaseD0Ev>:
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000f3e:	6003      	str	r3, [r0, #0]
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000f42:	6003      	str	r3, [r0, #0]
 8000f44:	2114      	movs	r1, #20
 8000f46:	f022 f9ce 	bl	80232e6 <_ZdlPvj>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	bd10      	pop	{r4, pc}
 8000f4e:	bf00      	nop
 8000f50:	08025158 	.word	0x08025158
 8000f54:	0802500c 	.word	0x0802500c

08000f58 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
    {
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f5e:	6003      	str	r3, [r0, #0]
    }
 8000f60:	2114      	movs	r1, #20
 8000f62:	f022 f9c0 	bl	80232e6 <_ZdlPvj>
 8000f66:	4620      	mov	r0, r4
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	bf00      	nop
 8000f6c:	0802500c 	.word	0x0802500c

08000f70 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4604      	mov	r4, r0
    {
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <_ZN8touchgfx9TypedTextD0Ev+0x14>)
 8000f76:	6003      	str	r3, [r0, #0]
    }
 8000f78:	2108      	movs	r1, #8
 8000f7a:	f022 f9b4 	bl	80232e6 <_ZdlPvj>
 8000f7e:	4620      	mov	r0, r4
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	bf00      	nop
 8000f84:	08024fe8 	.word	0x08024fe8

08000f88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f8e:	6003      	str	r3, [r0, #0]
    {
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f92:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f94:	2110      	movs	r1, #16
 8000f96:	f022 f9a6 	bl	80232e6 <_ZdlPvj>
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	bf00      	nop
 8000fa0:	080250a8 	.word	0x080250a8
 8000fa4:	08025044 	.word	0x08025044

08000fa8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000fae:	6003      	str	r3, [r0, #0]
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000fb2:	6003      	str	r3, [r0, #0]
    {
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000fb6:	6003      	str	r3, [r0, #0]
 8000fb8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000fbc:	f022 f993 	bl	80232e6 <_ZdlPvj>
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	0802505c 	.word	0x0802505c
 8000fc8:	080270d4 	.word	0x080270d4
 8000fcc:	0802501c 	.word	0x0802501c

08000fd0 <_ZN23FrontendApplicationBaseD0Ev>:
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000fd6:	6003      	str	r3, [r0, #0]
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000fda:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000fe0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000fe6:	6003      	str	r3, [r0, #0]
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000fea:	6003      	str	r3, [r0, #0]
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000fee:	6003      	str	r3, [r0, #0]
 8000ff0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000ff4:	f022 f977 	bl	80232e6 <_ZdlPvj>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	080250c0 	.word	0x080250c0
 8001000:	080250a8 	.word	0x080250a8
 8001004:	08025044 	.word	0x08025044
 8001008:	0802505c 	.word	0x0802505c
 800100c:	080270d4 	.word	0x080270d4
 8001010:	0802501c 	.word	0x0802501c

08001014 <_ZN19FrontendApplicationD0Ev>:
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <_ZN19FrontendApplicationD0Ev+0x30>)
 800101a:	6003      	str	r3, [r0, #0]
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_ZN19FrontendApplicationD0Ev+0x34>)
 800101e:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <_ZN19FrontendApplicationD0Ev+0x38>)
 8001022:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8001028:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <_ZN19FrontendApplicationD0Ev+0x40>)
 800102e:	6003      	str	r3, [r0, #0]
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <_ZN19FrontendApplicationD0Ev+0x44>)
 8001032:	6003      	str	r3, [r0, #0]
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <_ZN19FrontendApplicationD0Ev+0x48>)
 8001036:	6003      	str	r3, [r0, #0]
 8001038:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800103c:	f022 f953 	bl	80232e6 <_ZdlPvj>
 8001040:	4620      	mov	r0, r4
 8001042:	bd10      	pop	{r4, pc}
 8001044:	0802510c 	.word	0x0802510c
 8001048:	080250c0 	.word	0x080250c0
 800104c:	080250a8 	.word	0x080250a8
 8001050:	08025044 	.word	0x08025044
 8001054:	0802505c 	.word	0x0802505c
 8001058:	080270d4 	.word	0x080270d4
 800105c:	0802501c 	.word	0x0802501c

08001060 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001060:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 8001062:	4608      	mov	r0, r1
 8001064:	f002 fdcc 	bl	8003c00 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001068:	bd08      	pop	{r3, pc}

0800106a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800106a:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 800106c:	f002 fdc8 	bl	8003c00 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001070:	bd08      	pop	{r3, pc}

08001072 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8001072:	b510      	push	{r4, lr}
 8001074:	4604      	mov	r4, r0
    {
        model.tick();
 8001076:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800107a:	f005 f935 	bl	80062e8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800107e:	4620      	mov	r0, r4
 8001080:	f016 fec6 	bl	8017e10 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8001084:	bd10      	pop	{r4, pc}
	...

08001088 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001088:	b510      	push	{r4, lr}
 800108a:	4604      	mov	r4, r0
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800108e:	6003      	str	r3, [r0, #0]
 8001090:	f011 fff1 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001094:	4620      	mov	r0, r4
 8001096:	bd10      	pop	{r4, pc}
 8001098:	080251d4 	.word	0x080251d4

0800109c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800109c:	b510      	push	{r4, lr}
 800109e:	4604      	mov	r4, r0
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010a2:	6003      	str	r3, [r0, #0]
 80010a4:	f011 ffe7 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010a8:	2114      	movs	r1, #20
 80010aa:	4620      	mov	r0, r4
 80010ac:	f022 f91b 	bl	80232e6 <_ZdlPvj>
 80010b0:	4620      	mov	r0, r4
 80010b2:	bd10      	pop	{r4, pc}
 80010b4:	080251d4 	.word	0x080251d4

080010b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010b8:	b510      	push	{r4, lr}
 80010ba:	4604      	mov	r4, r0
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010be:	6003      	str	r3, [r0, #0]
 80010c0:	f011 ffd9 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010c4:	4620      	mov	r0, r4
 80010c6:	bd10      	pop	{r4, pc}
 80010c8:	080251a0 	.word	0x080251a0

080010cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
 80010d2:	6003      	str	r3, [r0, #0]
 80010d4:	f011 ffcf 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010d8:	f642 61d0 	movw	r1, #11984	; 0x2ed0
 80010dc:	4620      	mov	r0, r4
 80010de:	f022 f902 	bl	80232e6 <_ZdlPvj>
 80010e2:	4620      	mov	r0, r4
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop
 80010e8:	080251a0 	.word	0x080251a0

080010ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010ec:	b510      	push	{r4, lr}
 80010ee:	4604      	mov	r4, r0
 80010f0:	4b02      	ldr	r3, [pc, #8]	; (80010fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010f2:	6003      	str	r3, [r0, #0]
 80010f4:	f011 ffbf 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010f8:	4620      	mov	r0, r4
 80010fa:	bd10      	pop	{r4, pc}
 80010fc:	0802516c 	.word	0x0802516c

08001100 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8001106:	6003      	str	r3, [r0, #0]
 8001108:	f011 ffb5 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800110c:	2118      	movs	r1, #24
 800110e:	4620      	mov	r0, r4
 8001110:	f022 f8e9 	bl	80232e6 <_ZdlPvj>
 8001114:	4620      	mov	r0, r4
 8001116:	bd10      	pop	{r4, pc}
 8001118:	0802516c 	.word	0x0802516c

0800111c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800111c:	b510      	push	{r4, lr}
 800111e:	4604      	mov	r4, r0
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <_ZN12FrontendHeapD1Ev+0x70>)
 8001122:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 8001124:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <_ZN12FrontendHeapD1Ev+0x74>)
 800112a:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
    virtual ~FrontendApplicationBase() { }
 800112e:	4a19      	ldr	r2, [pc, #100]	; (8001194 <_ZN12FrontendHeapD1Ev+0x78>)
 8001130:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001134:	4a18      	ldr	r2, [pc, #96]	; (8001198 <_ZN12FrontendHeapD1Ev+0x7c>)
 8001136:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
    {
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <_ZN12FrontendHeapD1Ev+0x80>)
 800113c:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <_ZN12FrontendHeapD1Ev+0x84>)
 8001142:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <_ZN12FrontendHeapD1Ev+0x88>)
 8001148:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 800114c:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <_ZN12FrontendHeapD1Ev+0x8c>)
 800114e:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 8001152:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <_ZN12FrontendHeapD1Ev+0x90>)
 8001158:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 800115c:	f642 60fc 	movw	r0, #12028	; 0x2efc
 8001160:	4420      	add	r0, r4
 8001162:	f011 ff88 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001166:	4620      	mov	r0, r4
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_ZN12FrontendHeapD1Ev+0x94>)
 800116a:	f840 3f2c 	str.w	r3, [r0, #44]!
 800116e:	f011 ff82 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001172:	4620      	mov	r0, r4
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <_ZN12FrontendHeapD1Ev+0x98>)
 8001176:	f840 3f14 	str.w	r3, [r0, #20]!
 800117a:	f011 ff7c 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <_ZN12FrontendHeapD1Ev+0x9c>)
 8001180:	6023      	str	r3, [r4, #0]
    {
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <_ZN12FrontendHeapD1Ev+0xa0>)
 8001184:	6023      	str	r3, [r4, #0]
 8001186:	4620      	mov	r0, r4
 8001188:	bd10      	pop	{r4, pc}
 800118a:	bf00      	nop
 800118c:	08025208 	.word	0x08025208
 8001190:	0802510c 	.word	0x0802510c
 8001194:	080250c0 	.word	0x080250c0
 8001198:	080250a8 	.word	0x080250a8
 800119c:	08025044 	.word	0x08025044
 80011a0:	0802505c 	.word	0x0802505c
 80011a4:	080270d4 	.word	0x080270d4
 80011a8:	0802501c 	.word	0x0802501c
 80011ac:	080251d4 	.word	0x080251d4
 80011b0:	080251a0 	.word	0x080251a0
 80011b4:	0802516c 	.word	0x0802516c
 80011b8:	08025158 	.word	0x08025158
 80011bc:	0802500c 	.word	0x0802500c

080011c0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80011c0:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 80011c2:	4c1a      	ldr	r4, [pc, #104]	; (800122c <__tcf_0+0x6c>)
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <__tcf_0+0x70>)
 80011c6:	6023      	str	r3, [r4, #0]
 80011c8:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <__tcf_0+0x74>)
 80011ce:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 80011d2:	4a19      	ldr	r2, [pc, #100]	; (8001238 <__tcf_0+0x78>)
 80011d4:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80011d8:	4a18      	ldr	r2, [pc, #96]	; (800123c <__tcf_0+0x7c>)
 80011da:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
    {
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <__tcf_0+0x80>)
 80011e0:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <__tcf_0+0x84>)
 80011e6:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <__tcf_0+0x88>)
 80011ec:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 80011f0:	4a16      	ldr	r2, [pc, #88]	; (800124c <__tcf_0+0x8c>)
 80011f2:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 80011f6:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80011fa:	4a15      	ldr	r2, [pc, #84]	; (8001250 <__tcf_0+0x90>)
 80011fc:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 8001200:	f603 60fc 	addw	r0, r3, #3836	; 0xefc
 8001204:	f011 ff37 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001208:	4620      	mov	r0, r4
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <__tcf_0+0x94>)
 800120c:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001210:	f011 ff31 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001214:	4620      	mov	r0, r4
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <__tcf_0+0x98>)
 8001218:	f840 3f14 	str.w	r3, [r0, #20]!
 800121c:	f011 ff2b 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <__tcf_0+0x9c>)
 8001222:	6023      	str	r3, [r4, #0]
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <__tcf_0+0xa0>)
 8001226:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 8001228:	bd10      	pop	{r4, pc}
 800122a:	bf00      	nop
 800122c:	2400017c 	.word	0x2400017c
 8001230:	08025208 	.word	0x08025208
 8001234:	0802510c 	.word	0x0802510c
 8001238:	080250c0 	.word	0x080250c0
 800123c:	080250a8 	.word	0x080250a8
 8001240:	08025044 	.word	0x08025044
 8001244:	0802505c 	.word	0x0802505c
 8001248:	080270d4 	.word	0x080270d4
 800124c:	0802501c 	.word	0x0802501c
 8001250:	080251d4 	.word	0x080251d4
 8001254:	080251a0 	.word	0x080251a0
 8001258:	0802516c 	.word	0x0802516c
 800125c:	08025158 	.word	0x08025158
 8001260:	0802500c 	.word	0x0802500c

08001264 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001264:	b510      	push	{r4, lr}
 8001266:	4604      	mov	r4, r0
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <_ZN12FrontendHeapD0Ev+0x78>)
 800126a:	6003      	str	r3, [r0, #0]
 800126c:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <_ZN12FrontendHeapD0Ev+0x7c>)
 8001272:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 8001276:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <_ZN12FrontendHeapD0Ev+0x80>)
 8001278:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800127c:	4a1a      	ldr	r2, [pc, #104]	; (80012e8 <_ZN12FrontendHeapD0Ev+0x84>)
 800127e:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
    {
 8001282:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <_ZN12FrontendHeapD0Ev+0x88>)
 8001284:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <_ZN12FrontendHeapD0Ev+0x8c>)
 800128a:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 800128e:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <_ZN12FrontendHeapD0Ev+0x90>)
 8001290:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 8001294:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <_ZN12FrontendHeapD0Ev+0x94>)
 8001296:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 800129a:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <_ZN12FrontendHeapD0Ev+0x98>)
 80012a0:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 80012a4:	f642 60fc 	movw	r0, #12028	; 0x2efc
 80012a8:	4420      	add	r0, r4
 80012aa:	f011 fee4 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012ae:	4620      	mov	r0, r4
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_ZN12FrontendHeapD0Ev+0x9c>)
 80012b2:	f840 3f2c 	str.w	r3, [r0, #44]!
 80012b6:	f011 fede 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012ba:	4620      	mov	r0, r4
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_ZN12FrontendHeapD0Ev+0xa0>)
 80012be:	f840 3f14 	str.w	r3, [r0, #20]!
 80012c2:	f011 fed8 	bl	8013076 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_ZN12FrontendHeapD0Ev+0xa4>)
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <_ZN12FrontendHeapD0Ev+0xa8>)
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	f643 3110 	movw	r1, #15120	; 0x3b10
 80012d2:	4620      	mov	r0, r4
 80012d4:	f022 f807 	bl	80232e6 <_ZdlPvj>
 80012d8:	4620      	mov	r0, r4
 80012da:	bd10      	pop	{r4, pc}
 80012dc:	08025208 	.word	0x08025208
 80012e0:	0802510c 	.word	0x0802510c
 80012e4:	080250c0 	.word	0x080250c0
 80012e8:	080250a8 	.word	0x080250a8
 80012ec:	08025044 	.word	0x08025044
 80012f0:	0802505c 	.word	0x0802505c
 80012f4:	080270d4 	.word	0x080270d4
 80012f8:	0802501c 	.word	0x0802501c
 80012fc:	080251d4 	.word	0x080251d4
 8001300:	080251a0 	.word	0x080251a0
 8001304:	0802516c 	.word	0x0802516c
 8001308:	08025158 	.word	0x08025158
 800130c:	0802500c 	.word	0x0802500c

08001310 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001314:	f002 f99c 	bl	8003650 <_ZN14BitmapDatabase11getInstanceEv>
 8001318:	4605      	mov	r5, r0
 800131a:	f002 f99d 	bl	8003658 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800131e:	4601      	mov	r1, r0
 8001320:	2400      	movs	r4, #0
 8001322:	9400      	str	r4, [sp, #0]
 8001324:	4623      	mov	r3, r4
 8001326:	4622      	mov	r2, r4
 8001328:	4628      	mov	r0, r5
 800132a:	f019 feed 	bl	801b108 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <touchgfx_init+0xc0>)
 8001330:	4a28      	ldr	r2, [pc, #160]	; (80013d4 <touchgfx_init+0xc4>)
 8001332:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001334:	4620      	mov	r0, r4
 8001336:	f003 f8d1 	bl	80044dc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800133a:	4827      	ldr	r0, [pc, #156]	; (80013d8 <touchgfx_init+0xc8>)
 800133c:	f019 fd92 	bl	801ae64 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <touchgfx_init+0xcc>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f3bf 8f5b 	dmb	ish
 8001348:	f013 0f01 	tst.w	r3, #1
 800134c:	d004      	beq.n	8001358 <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800134e:	4824      	ldr	r0, [pc, #144]	; (80013e0 <touchgfx_init+0xd0>)
 8001350:	f7ff f9be 	bl	80006d0 <_ZN11TouchGFXHAL10initializeEv>
}
 8001354:	b003      	add	sp, #12
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001358:	4820      	ldr	r0, [pc, #128]	; (80013dc <touchgfx_init+0xcc>)
 800135a:	f021 ffc6 	bl	80232ea <__cxa_guard_acquire>
 800135e:	2800      	cmp	r0, #0
 8001360:	d0f5      	beq.n	800134e <touchgfx_init+0x3e>
          frontendApplication(app)
 8001362:	4c20      	ldr	r4, [pc, #128]	; (80013e4 <touchgfx_init+0xd4>)
 8001364:	4620      	mov	r0, r4
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <touchgfx_init+0xd8>)
 8001368:	f840 3b14 	str.w	r3, [r0], #20
 800136c:	6060      	str	r0, [r4, #4]
 800136e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8001372:	60a7      	str	r7, [r4, #8]
 8001374:	4e1d      	ldr	r6, [pc, #116]	; (80013ec <touchgfx_init+0xdc>)
 8001376:	60e6      	str	r6, [r4, #12]
 8001378:	f606 25bc 	addw	r5, r6, #2748	; 0xabc
 800137c:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <touchgfx_init+0xe0>)
 8001380:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <touchgfx_init+0xe4>)
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	f011 fe77 	bl	8013078 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <touchgfx_init+0xe8>)
 800138c:	6163      	str	r3, [r4, #20]
 800138e:	4638      	mov	r0, r7
 8001390:	f011 fe72 	bl	8013078 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <touchgfx_init+0xec>)
 8001396:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001398:	4630      	mov	r0, r6
 800139a:	f011 fe6d 	bl	8013078 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800139e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <touchgfx_init+0xf0>)
 80013a4:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 80013a8:	3614      	adds	r6, #20
 80013aa:	4630      	mov	r0, r6
 80013ac:	f004 ff0a 	bl	80061c4 <_ZN5ModelC1Ev>
 80013b0:	4622      	mov	r2, r4
 80013b2:	4631      	mov	r1, r6
 80013b4:	4628      	mov	r0, r5
 80013b6:	f004 fefb 	bl	80061b0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 80013ba:	4628      	mov	r0, r5
 80013bc:	f002 fc20 	bl	8003c00 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 80013c0:	4810      	ldr	r0, [pc, #64]	; (8001404 <touchgfx_init+0xf4>)
 80013c2:	f021 ffdd 	bl	8023380 <atexit>
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <touchgfx_init+0xcc>)
 80013c8:	f021 ff9b 	bl	8023302 <__cxa_guard_release>
 80013cc:	e7bf      	b.n	800134e <touchgfx_init+0x3e>
 80013ce:	bf00      	nop
 80013d0:	2400ff70 	.word	0x2400ff70
 80013d4:	24004b0c 	.word	0x24004b0c
 80013d8:	24000008 	.word	0x24000008
 80013dc:	24000178 	.word	0x24000178
 80013e0:	24004a90 	.word	0x24004a90
 80013e4:	2400017c 	.word	0x2400017c
 80013e8:	0802500c 	.word	0x0802500c
 80013ec:	24003078 	.word	0x24003078
 80013f0:	08025158 	.word	0x08025158
 80013f4:	08025208 	.word	0x08025208
 80013f8:	0802516c 	.word	0x0802516c
 80013fc:	080251a0 	.word	0x080251a0
 8001400:	080251d4 	.word	0x080251d4
 8001404:	080011c1 	.word	0x080011c1

08001408 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8001408:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800140a:	4802      	ldr	r0, [pc, #8]	; (8001414 <touchgfx_taskEntry+0xc>)
 800140c:	f7ff f964 	bl	80006d8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8001410:	bd08      	pop	{r3, pc}
 8001412:	bf00      	nop
 8001414:	24004a90 	.word	0x24004a90

08001418 <_Z41__static_initialization_and_destruction_0ii>:
 8001418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800141c:	4604      	mov	r4, r0
 800141e:	460d      	mov	r5, r1
 8001420:	2801      	cmp	r0, #1
 8001422:	d007      	beq.n	8001434 <_Z41__static_initialization_and_destruction_0ii+0x1c>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8001424:	b924      	cbnz	r4, 8001430 <_Z41__static_initialization_and_destruction_0ii+0x18>
 8001426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142a:	429d      	cmp	r5, r3
 800142c:	f000 8278 	beq.w	8001920 <_Z41__static_initialization_and_destruction_0ii+0x508>
}
 8001430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001438:	4299      	cmp	r1, r3
 800143a:	d1f3      	bne.n	8001424 <_Z41__static_initialization_and_destruction_0ii+0xc>
    {27, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 4,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},
    {28, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 5,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},
    {29, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 6,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},

    {30, Rect(SPACE_X, KEY_ROW_4_Y, SPACE_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_SPACE_ID}
};
 800143c:	4be9      	ldr	r3, [pc, #932]	; (80017e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001442:	f04f 0c0c 	mov.w	ip, #12
 8001446:	f8a3 c002 	strh.w	ip, [r3, #2]
 800144a:	2064      	movs	r0, #100	; 0x64
 800144c:	8098      	strh	r0, [r3, #4]
 800144e:	2224      	movs	r2, #36	; 0x24
 8001450:	80da      	strh	r2, [r3, #6]
 8001452:	811a      	strh	r2, [r3, #8]
 8001454:	2107      	movs	r1, #7
 8001456:	8159      	strh	r1, [r3, #10]
 8001458:	2602      	movs	r6, #2
 800145a:	731e      	strb	r6, [r3, #12]
 800145c:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8001460:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8001464:	8218      	strh	r0, [r3, #16]
 8001466:	825a      	strh	r2, [r3, #18]
 8001468:	829a      	strh	r2, [r3, #20]
 800146a:	82d9      	strh	r1, [r3, #22]
 800146c:	2603      	movs	r6, #3
 800146e:	761e      	strb	r6, [r3, #24]
 8001470:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001474:	835e      	strh	r6, [r3, #26]
 8001476:	8398      	strh	r0, [r3, #28]
 8001478:	83da      	strh	r2, [r3, #30]
 800147a:	841a      	strh	r2, [r3, #32]
 800147c:	8459      	strh	r1, [r3, #34]	; 0x22
 800147e:	f04f 0704 	mov.w	r7, #4
 8001482:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
 8001486:	f04f 088a 	mov.w	r8, #138	; 0x8a
 800148a:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 800148e:	8518      	strh	r0, [r3, #40]	; 0x28
 8001490:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001492:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001494:	85d9      	strh	r1, [r3, #46]	; 0x2e
 8001496:	f04f 0705 	mov.w	r7, #5
 800149a:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
 800149e:	27b4      	movs	r7, #180	; 0xb4
 80014a0:	865f      	strh	r7, [r3, #50]	; 0x32
 80014a2:	8698      	strh	r0, [r3, #52]	; 0x34
 80014a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80014a6:	871a      	strh	r2, [r3, #56]	; 0x38
 80014a8:	8759      	strh	r1, [r3, #58]	; 0x3a
 80014aa:	f04f 0e06 	mov.w	lr, #6
 80014ae:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
 80014b2:	f04f 0ede 	mov.w	lr, #222	; 0xde
 80014b6:	f8a3 e03e 	strh.w	lr, [r3, #62]	; 0x3e
 80014ba:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 80014be:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80014c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80014c6:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
 80014ca:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
 80014ce:	f44f 7984 	mov.w	r9, #264	; 0x108
 80014d2:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80014d6:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
 80014da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80014de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80014e2:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
 80014e6:	f04f 0b08 	mov.w	fp, #8
 80014ea:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80014ee:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80014f2:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80014f6:	f8a3 0058 	strh.w	r0, [r3, #88]	; 0x58
 80014fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80014fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001502:	f8a3 105e 	strh.w	r1, [r3, #94]	; 0x5e
 8001506:	f04f 0e09 	mov.w	lr, #9
 800150a:	f883 e060 	strb.w	lr, [r3, #96]	; 0x60
 800150e:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8001512:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8001516:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 800151a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800151e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001522:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
 8001526:	f04f 0e0a 	mov.w	lr, #10
 800152a:	f883 e06c 	strb.w	lr, [r3, #108]	; 0x6c
 800152e:	f44f 7ec3 	mov.w	lr, #390	; 0x186
 8001532:	f8a3 e06e 	strh.w	lr, [r3, #110]	; 0x6e
 8001536:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
 800153a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800153e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001542:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
 8001546:	f04f 090b 	mov.w	r9, #11
 800154a:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 800154e:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8001552:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8001556:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
 800155a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800155e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001562:	f8a3 1082 	strh.w	r1, [r3, #130]	; 0x82
 8001566:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
 800156a:	f8a3 c086 	strh.w	ip, [r3, #134]	; 0x86
 800156e:	208e      	movs	r0, #142	; 0x8e
 8001570:	f8a3 0088 	strh.w	r0, [r3, #136]	; 0x88
 8001574:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8001578:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800157c:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
 8001580:	f04f 060d 	mov.w	r6, #13
 8001584:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8001588:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 800158c:	f8a3 0094 	strh.w	r0, [r3, #148]	; 0x94
 8001590:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8001594:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8001598:	f8a3 109a 	strh.w	r1, [r3, #154]	; 0x9a
 800159c:	f04f 0a0e 	mov.w	sl, #14
 80015a0:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 80015a4:	f04f 0660 	mov.w	r6, #96	; 0x60
 80015a8:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 80015ac:	f8a3 00a0 	strh.w	r0, [r3, #160]	; 0xa0
 80015b0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80015b4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80015b8:	f8a3 10a6 	strh.w	r1, [r3, #166]	; 0xa6
 80015bc:	f04f 0a0f 	mov.w	sl, #15
 80015c0:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 80015c4:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 80015c8:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80015cc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80015d0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80015d4:	f8a3 10b2 	strh.w	r1, [r3, #178]	; 0xb2
 80015d8:	f04f 0a10 	mov.w	sl, #16
 80015dc:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 80015e0:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 80015e4:	f8a3 00b8 	strh.w	r0, [r3, #184]	; 0xb8
 80015e8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80015ec:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80015f0:	f8a3 10be 	strh.w	r1, [r3, #190]	; 0xbe
 80015f4:	f04f 0a11 	mov.w	sl, #17
 80015f8:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80015fc:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001600:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8001604:	f8a3 00c4 	strh.w	r0, [r3, #196]	; 0xc4
 8001608:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 800160c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8001610:	f8a3 10ca 	strh.w	r1, [r3, #202]	; 0xca
 8001614:	f04f 0a12 	mov.w	sl, #18
 8001618:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 800161c:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001620:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8001624:	f8a3 00d0 	strh.w	r0, [r3, #208]	; 0xd0
 8001628:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 800162c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001630:	f8a3 10d6 	strh.w	r1, [r3, #214]	; 0xd6
 8001634:	f04f 0a13 	mov.w	sl, #19
 8001638:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 800163c:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8001640:	4656      	mov	r6, sl
 8001642:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8001646:	f8a3 00dc 	strh.w	r0, [r3, #220]	; 0xdc
 800164a:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 800164e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001652:	f8a3 10e2 	strh.w	r1, [r3, #226]	; 0xe2
 8001656:	f04f 0a14 	mov.w	sl, #20
 800165a:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 800165e:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8001662:	f8a3 00e8 	strh.w	r0, [r3, #232]	; 0xe8
 8001666:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 800166a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800166e:	f8a3 10ee 	strh.w	r1, [r3, #238]	; 0xee
 8001672:	f04f 0a15 	mov.w	sl, #21
 8001676:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 800167a:	f8a3 e0f2 	strh.w	lr, [r3, #242]	; 0xf2
 800167e:	f8a3 00f4 	strh.w	r0, [r3, #244]	; 0xf4
 8001682:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001686:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 800168a:	f8a3 10fa 	strh.w	r1, [r3, #250]	; 0xfa
 800168e:	f04f 0a16 	mov.w	sl, #22
 8001692:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8001696:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 800169a:	f8a3 0100 	strh.w	r0, [r3, #256]	; 0x100
 800169e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 80016a2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80016a6:	f8a3 1106 	strh.w	r1, [r3, #262]	; 0x106
 80016aa:	2017      	movs	r0, #23
 80016ac:	f883 0108 	strb.w	r0, [r3, #264]	; 0x108
 80016b0:	f04f 0060 	mov.w	r0, #96	; 0x60
 80016b4:	f8a3 010a 	strh.w	r0, [r3, #266]	; 0x10a
 80016b8:	20b8      	movs	r0, #184	; 0xb8
 80016ba:	f8a3 010c 	strh.w	r0, [r3, #268]	; 0x10c
 80016be:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 80016c2:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 80016c6:	f8a3 1112 	strh.w	r1, [r3, #274]	; 0x112
 80016ca:	f04f 0918 	mov.w	r9, #24
 80016ce:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 80016d2:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 80016d6:	f8a3 0118 	strh.w	r0, [r3, #280]	; 0x118
 80016da:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 80016de:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80016e2:	f8a3 111e 	strh.w	r1, [r3, #286]	; 0x11e
 80016e6:	f04f 0819 	mov.w	r8, #25
 80016ea:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80016ee:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80016f2:	f8a3 0124 	strh.w	r0, [r3, #292]	; 0x124
 80016f6:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80016fa:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80016fe:	f8a3 112a 	strh.w	r1, [r3, #298]	; 0x12a
 8001702:	271a      	movs	r7, #26
 8001704:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8001708:	f04f 0ade 	mov.w	sl, #222	; 0xde
 800170c:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8001710:	f8a3 0130 	strh.w	r0, [r3, #304]	; 0x130
 8001714:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8001718:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 800171c:	f8a3 1136 	strh.w	r1, [r3, #310]	; 0x136
 8001720:	271b      	movs	r7, #27
 8001722:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8001726:	f44f 7a84 	mov.w	sl, #264	; 0x108
 800172a:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 800172e:	f8a3 013c 	strh.w	r0, [r3, #316]	; 0x13c
 8001732:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8001736:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 800173a:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
 800173e:	271c      	movs	r7, #28
 8001740:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8001744:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8001748:	f8a3 0148 	strh.w	r0, [r3, #328]	; 0x148
 800174c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001750:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001754:	f8a3 114e 	strh.w	r1, [r3, #334]	; 0x14e
 8001758:	271d      	movs	r7, #29
 800175a:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 800175e:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8001762:	f8a3 0154 	strh.w	r0, [r3, #340]	; 0x154
 8001766:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 800176a:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 800176e:	f8a3 115a 	strh.w	r1, [r3, #346]	; 0x15a
 8001772:	211e      	movs	r1, #30
 8001774:	f883 115c 	strb.w	r1, [r3, #348]	; 0x15c
 8001778:	f04f 0160 	mov.w	r1, #96	; 0x60
 800177c:	f8a3 115e 	strh.w	r1, [r3, #350]	; 0x15e
 8001780:	21e2      	movs	r1, #226	; 0xe2
 8001782:	f8a3 1160 	strh.w	r1, [r3, #352]	; 0x160
 8001786:	f44f 7690 	mov.w	r6, #288	; 0x120
 800178a:	f8a3 6162 	strh.w	r6, [r3, #354]	; 0x162
 800178e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001792:	f04f 0609 	mov.w	r6, #9
 8001796:	f8a3 6166 	strh.w	r6, [r3, #358]	; 0x166
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800179c:	f8a3 c000 	strh.w	ip, [r3]
 80017a0:	8058      	strh	r0, [r3, #2]
 80017a2:	274e      	movs	r7, #78	; 0x4e
 80017a4:	809f      	strh	r7, [r3, #4]
 80017a6:	80da      	strh	r2, [r3, #6]
{
    {Rect(CAPS_LOCK_X,  KEY_ROW_3_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_CAPSLOCK_ID},    // caps-lock
    {Rect(BACKSPACE_X,  KEY_ROW_3_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_BACKSPACE_ID},   // backspace    
    {Rect(MODE_X,       KEY_ROW_4_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_MODE_ID},        // mode
    {Rect(DONE_X,       KEY_ROW_4_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_DONE_ID}         // done
};
 80017a8:	2600      	movs	r6, #0
 80017aa:	609e      	str	r6, [r3, #8]
 80017ac:	f04f 0805 	mov.w	r8, #5
 80017b0:	f8a3 800c 	strh.w	r8, [r3, #12]
 80017b4:	f8a3 e010 	strh.w	lr, [r3, #16]
 80017b8:	8258      	strh	r0, [r3, #18]
 80017ba:	829f      	strh	r7, [r3, #20]
 80017bc:	82da      	strh	r2, [r3, #22]
 80017be:	619e      	str	r6, [r3, #24]
 80017c0:	f04f 0004 	mov.w	r0, #4
 80017c4:	8398      	strh	r0, [r3, #28]
 80017c6:	f8a3 c020 	strh.w	ip, [r3, #32]
 80017ca:	8459      	strh	r1, [r3, #34]	; 0x22
 80017cc:	849f      	strh	r7, [r3, #36]	; 0x24
 80017ce:	84da      	strh	r2, [r3, #38]	; 0x26
 80017d0:	629e      	str	r6, [r3, #40]	; 0x28
 80017d2:	f04f 0008 	mov.w	r0, #8
 80017d6:	8598      	strh	r0, [r3, #44]	; 0x2c
 80017d8:	f8a3 e030 	strh.w	lr, [r3, #48]	; 0x30
 80017dc:	8659      	strh	r1, [r3, #50]	; 0x32
 80017de:	869f      	strh	r7, [r3, #52]	; 0x34
 80017e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80017e2:	e003      	b.n	80017ec <_Z41__static_initialization_and_destruction_0ii+0x3d4>
 80017e4:	24004b98 	.word	0x24004b98
 80017e8:	24003c8c 	.word	0x24003c8c
 80017ec:	639e      	str	r6, [r3, #56]	; 0x38
 80017ee:	f04f 0206 	mov.w	r2, #6
 80017f2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80017f4:	4621      	mov	r1, r4
 80017f6:	3340      	adds	r3, #64	; 0x40
 80017f8:	2900      	cmp	r1, #0
 80017fa:	db0b      	blt.n	8001814 <_Z41__static_initialization_and_destruction_0ii+0x3fc>
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8001806:	801a      	strh	r2, [r3, #0]
 8001808:	805a      	strh	r2, [r3, #2]
 800180a:	809a      	strh	r2, [r3, #4]
 800180c:	80da      	strh	r2, [r3, #6]
 800180e:	3310      	adds	r3, #16
 8001810:	3901      	subs	r1, #1
 8001812:	e7f1      	b.n	80017f8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001814:	4b51      	ldr	r3, [pc, #324]	; (800195c <_Z41__static_initialization_and_destruction_0ii+0x544>)
 8001816:	2205      	movs	r2, #5
 8001818:	825a      	strh	r2, [r3, #18]
 800181a:	222d      	movs	r2, #45	; 0x2d
 800181c:	829a      	strh	r2, [r3, #20]
 800181e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001822:	82da      	strh	r2, [r3, #22]
 8001824:	2246      	movs	r2, #70	; 0x46
 8001826:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8001828:	4a4d      	ldr	r2, [pc, #308]	; (8001960 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 800182a:	61da      	str	r2, [r3, #28]
 800182c:	2600      	movs	r6, #0
 800182e:	841e      	strh	r6, [r3, #32]
        : color(col)
 8001830:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
 8001836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
class TouchController
 800183c:	4f49      	ldr	r7, [pc, #292]	; (8001964 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 800183e:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8001840:	603b      	str	r3, [r7, #0]
{
public:

    STM32TouchController() {}
 8001842:	4b4a      	ldr	r3, [pc, #296]	; (800196c <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8001844:	603b      	str	r3, [r7, #0]
static STM32DMA dma;
 8001846:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80019b0 <_Z41__static_initialization_and_destruction_0ii+0x598>
 800184a:	4648      	mov	r0, r9
 800184c:	f7ff fa66 	bl	8000d1c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8001850:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80019a4 <_Z41__static_initialization_and_destruction_0ii+0x58c>
 8001854:	4640      	mov	r0, r8
 8001856:	f01b fe71 	bl	801d53c <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 800185a:	4b45      	ldr	r3, [pc, #276]	; (8001970 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 800185c:	4a45      	ldr	r2, [pc, #276]	; (8001974 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f8c3 9004 	str.w	r9, [r3, #4]
 8001864:	f8c3 8008 	str.w	r8, [r3, #8]
 8001868:	60df      	str	r7, [r3, #12]
 800186a:	611e      	str	r6, [r3, #16]
 800186c:	615e      	str	r6, [r3, #20]
 800186e:	619e      	str	r6, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001870:	839e      	strh	r6, [r3, #28]
 8001872:	83de      	strh	r6, [r3, #30]
 8001874:	841e      	strh	r6, [r3, #32]
 8001876:	845e      	strh	r6, [r3, #34]	; 0x22
 8001878:	849e      	strh	r6, [r3, #36]	; 0x24
 800187a:	84de      	strh	r6, [r3, #38]	; 0x26
 800187c:	851e      	strh	r6, [r3, #40]	; 0x28
 800187e:	f883 602a 	strb.w	r6, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001882:	62de      	str	r6, [r3, #44]	; 0x2c
 8001884:	861e      	strh	r6, [r3, #48]	; 0x30
 8001886:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
 800188a:	639e      	str	r6, [r3, #56]	; 0x38
 800188c:	63de      	str	r6, [r3, #60]	; 0x3c
 800188e:	641e      	str	r6, [r3, #64]	; 0x40
 8001890:	645e      	str	r6, [r3, #68]	; 0x44
 8001892:	f883 6048 	strb.w	r6, [r3, #72]	; 0x48
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800189c:	f883 604a 	strb.w	r6, [r3, #74]	; 0x4a
 80018a0:	f883 604b 	strb.w	r6, [r3, #75]	; 0x4b
 80018a4:	64de      	str	r6, [r3, #76]	; 0x4c
        : x(0), y(0), width(0), height(0)
 80018a6:	f8a3 6050 	strh.w	r6, [r3, #80]	; 0x50
 80018aa:	f8a3 6052 	strh.w	r6, [r3, #82]	; 0x52
 80018ae:	f8a3 6054 	strh.w	r6, [r3, #84]	; 0x54
 80018b2:	f8a3 6056 	strh.w	r6, [r3, #86]	; 0x56
 80018b6:	659e      	str	r6, [r3, #88]	; 0x58
 80018b8:	65de      	str	r6, [r3, #92]	; 0x5c
 80018ba:	661e      	str	r6, [r3, #96]	; 0x60
 80018bc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80018c0:	f883 6065 	strb.w	r6, [r3, #101]	; 0x65
 80018c4:	f883 6066 	strb.w	r6, [r3, #102]	; 0x66
 80018c8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80018cc:	f883 6068 	strb.w	r6, [r3, #104]	; 0x68
 80018d0:	f883 6069 	strb.w	r6, [r3, #105]	; 0x69
 80018d4:	f883 606a 	strb.w	r6, [r3, #106]	; 0x6a
 80018d8:	f883 606b 	strb.w	r6, [r3, #107]	; 0x6b
 80018dc:	f883 606c 	strb.w	r6, [r3, #108]	; 0x6c
 80018e0:	671e      	str	r6, [r3, #112]	; 0x70
 80018e2:	f883 6074 	strb.w	r6, [r3, #116]	; 0x74
 80018e6:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 80018ea:	f883 6076 	strb.w	r6, [r3, #118]	; 0x76
 80018ee:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80018f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80018f6:	4a20      	ldr	r2, [pc, #128]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 80018f8:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80018fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018fe:	491f      	ldr	r1, [pc, #124]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x564>)
 8001900:	800a      	strh	r2, [r1, #0]
 8001902:	491f      	ldr	r1, [pc, #124]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 8001904:	800a      	strh	r2, [r1, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001906:	f44f 7288 	mov.w	r2, #272	; 0x110
 800190a:	491e      	ldr	r1, [pc, #120]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x56c>)
 800190c:	800a      	strh	r2, [r1, #0]
 800190e:	491e      	ldr	r1, [pc, #120]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0x570>)
 8001910:	800a      	strh	r2, [r1, #0]
        DISPLAY_ROTATION = rotate0;
 8001912:	4a1e      	ldr	r2, [pc, #120]	; (800198c <_Z41__static_initialization_and_destruction_0ii+0x574>)
 8001914:	7016      	strb	r6, [r2, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8001916:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 8001918:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800191a:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 800191c:	601a      	str	r2, [r3, #0]
    }
 800191e:	e581      	b.n	8001424 <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 8001924:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001926:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 8001928:	601a      	str	r2, [r3, #0]
    {
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 800192c:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId WIFIBUTTON = 6;     // SairaSemiCondensed_Medium_18_4bpp
    static const touchgfx::FontId WIFICONNECTING = 7; // SairaSemiCondensed_Medium_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 8;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <_Z41__static_initialization_and_destruction_0ii+0x580>)
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <_Z41__static_initialization_and_destruction_0ii+0x584>)
 8001932:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <_Z41__static_initialization_and_destruction_0ii+0x588>)
 8001936:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800193a:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800193c:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 800193e:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <_Z41__static_initialization_and_destruction_0ii+0x594>)
 8001940:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 8001942:	481b      	ldr	r0, [pc, #108]	; (80019b0 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 8001944:	f7ff f81e 	bl	8000984 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <_Z41__static_initialization_and_destruction_0ii+0x554>)
 800194c:	601a      	str	r2, [r3, #0]
    {
 800194e:	4a06      	ldr	r2, [pc, #24]	; (8001968 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8001950:	601a      	str	r2, [r3, #0]
    {
 8001952:	4b02      	ldr	r3, [pc, #8]	; (800195c <_Z41__static_initialization_and_destruction_0ii+0x544>)
 8001954:	4a02      	ldr	r2, [pc, #8]	; (8001960 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 8001956:	61da      	str	r2, [r3, #28]
}
 8001958:	e56a      	b.n	8001430 <_Z41__static_initialization_and_destruction_0ii+0x18>
 800195a:	bf00      	nop
 800195c:	24004b10 	.word	0x24004b10
 8001960:	08024fe8 	.word	0x08024fe8
 8001964:	24003cec 	.word	0x24003cec
 8001968:	08024a64 	.word	0x08024a64
 800196c:	08024a7c 	.word	0x08024a7c
 8001970:	24004a90 	.word	0x24004a90
 8001974:	08026c44 	.word	0x08026c44
 8001978:	2400ff14 	.word	0x2400ff14
 800197c:	2400ff08 	.word	0x2400ff08
 8001980:	2400ff0e 	.word	0x2400ff0e
 8001984:	2400ff0a 	.word	0x2400ff0a
 8001988:	2400ff10 	.word	0x2400ff10
 800198c:	2400ff0c 	.word	0x2400ff0c
 8001990:	0802521c 	.word	0x0802521c
 8001994:	08024c0c 	.word	0x08024c0c
 8001998:	24000008 	.word	0x24000008
 800199c:	0802539c 	.word	0x0802539c
 80019a0:	08024ff8 	.word	0x08024ff8
 80019a4:	24004b40 	.word	0x24004b40
 80019a8:	080273b8 	.word	0x080273b8
 80019ac:	0802707c 	.word	0x0802707c
 80019b0:	24003cf0 	.word	0x24003cf0

080019b4 <_GLOBAL__sub_I_touchgfx_init>:
 80019b4:	b508      	push	{r3, lr}
 80019b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff fd2c 	bl	8001418 <_Z41__static_initialization_and_destruction_0ii>
 80019c0:	bd08      	pop	{r3, pc}

080019c2 <_GLOBAL__sub_D_touchgfx_init>:
 80019c2:	b508      	push	{r3, lr}
 80019c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fd25 	bl	8001418 <_Z41__static_initialization_and_destruction_0ii>
 80019ce:	bd08      	pop	{r3, pc}

080019d0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80019d2:	2290      	movs	r2, #144	; 0x90
 80019d4:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80019d8:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80019e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f0:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80019fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001a02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a06:	f3bf 8f6f 	isb	sy
 8001a0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001a12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a16:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001a20:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001a22:	68d3      	ldr	r3, [r2, #12]
 8001a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8001a2e:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001a30:	6911      	ldr	r1, [r2, #16]
 8001a32:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001a36:	3901      	subs	r1, #1
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 8001a3a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001a3e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001a46:	4770      	bx	lr
 8001a48:	50001000 	.word	0x50001000
 8001a4c:	24004efc 	.word	0x24004efc
 8001a50:	24004efa 	.word	0x24004efa

08001a54 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8001a54:	4b01      	ldr	r3, [pc, #4]	; (8001a5c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8001a56:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8001a5a:	4770      	bx	lr
 8001a5c:	50001000 	.word	0x50001000

08001a60 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8001a62:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001a66:	2201      	movs	r2, #1
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a6a:	4770      	bx	lr
 8001a6c:	50001000 	.word	0x50001000

08001a70 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a78:	d025      	beq.n	8001ac6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 8001a7a:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001a84:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001a88:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001a8c:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001a90:	e000      	b.n	8001a94 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 8001a92:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a94:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001a98:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001a9c:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001aa0:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001aa4:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001aa6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001aaa:	4613      	mov	r3, r2
 8001aac:	3a01      	subs	r2, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f2      	bne.n	8001a98 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001ab2:	1e43      	subs	r3, r0, #1
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d1ec      	bne.n	8001a92 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 8001ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001abc:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ad4:	d025      	beq.n	8001b22 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 8001ad6:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001ae4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ae8:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001aec:	e000      	b.n	8001af0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 8001aee:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001af0:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001af4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001af8:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001afc:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001b00:	4908      	ldr	r1, [pc, #32]	; (8001b24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001b02:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001b06:	4613      	mov	r3, r2
 8001b08:	3a01      	subs	r2, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f2      	bne.n	8001af4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 8001b0e:	1e43      	subs	r3, r0, #1
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d1ec      	bne.n	8001aee <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 8001b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b18:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <_ZN20TouchGFXGeneratedHALD1Ev>:
 8001b28:	4a02      	ldr	r2, [pc, #8]	; (8001b34 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 8001b2a:	6002      	str	r2, [r0, #0]
 8001b2c:	4a02      	ldr	r2, [pc, #8]	; (8001b38 <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 8001b2e:	6002      	str	r2, [r0, #0]
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	0802521c 	.word	0x0802521c
 8001b38:	08026c44 	.word	0x08026c44

08001b3c <_Z41__static_initialization_and_destruction_0ii>:
            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
}
 8001b3c:	2801      	cmp	r0, #1
 8001b3e:	d006      	beq.n	8001b4e <_Z41__static_initialization_and_destruction_0ii+0x12>

/**
 * The layout for the CustomKeyboard.
 */
static const Keyboard::Layout layout =
 8001b40:	b920      	cbnz	r0, 8001b4c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8001b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b46:	4299      	cmp	r1, r3
 8001b48:	f000 8222 	beq.w	8001f90 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8001b4c:	4770      	bx	lr
 8001b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b52:	4299      	cmp	r1, r3
 8001b54:	d1f4      	bne.n	8001b40 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8001b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8001b5a:	4bf0      	ldr	r3, [pc, #960]	; (8001f1c <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001b60:	240c      	movs	r4, #12
 8001b62:	805c      	strh	r4, [r3, #2]
 8001b64:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8001b68:	f8a3 e004 	strh.w	lr, [r3, #4]
 8001b6c:	2224      	movs	r2, #36	; 0x24
 8001b6e:	80da      	strh	r2, [r3, #6]
 8001b70:	811a      	strh	r2, [r3, #8]
 8001b72:	f04f 0c07 	mov.w	ip, #7
 8001b76:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8001b7a:	2502      	movs	r5, #2
 8001b7c:	731d      	strb	r5, [r3, #12]
 8001b7e:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8001b82:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8001b86:	f8a3 e010 	strh.w	lr, [r3, #16]
 8001b8a:	825a      	strh	r2, [r3, #18]
 8001b8c:	829a      	strh	r2, [r3, #20]
 8001b8e:	f8a3 c016 	strh.w	ip, [r3, #22]
 8001b92:	2503      	movs	r5, #3
 8001b94:	761d      	strb	r5, [r3, #24]
 8001b96:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001b9a:	835e      	strh	r6, [r3, #26]
 8001b9c:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8001ba0:	83da      	strh	r2, [r3, #30]
 8001ba2:	841a      	strh	r2, [r3, #32]
 8001ba4:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8001ba8:	f04f 0504 	mov.w	r5, #4
 8001bac:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8001bb0:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8001bb4:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8001bb8:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8001bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bbe:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001bc0:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8001bc4:	f04f 0505 	mov.w	r5, #5
 8001bc8:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8001bcc:	27b4      	movs	r7, #180	; 0xb4
 8001bce:	865f      	strh	r7, [r3, #50]	; 0x32
 8001bd0:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8001bd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bd6:	871a      	strh	r2, [r3, #56]	; 0x38
 8001bd8:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8001bdc:	f04f 0506 	mov.w	r5, #6
 8001be0:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 8001be4:	f04f 05de 	mov.w	r5, #222	; 0xde
 8001be8:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8001bea:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8001bee:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8001bf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001bf6:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8001bfa:	f883 c048 	strb.w	ip, [r3, #72]	; 0x48
 8001bfe:	f44f 7984 	mov.w	r9, #264	; 0x108
 8001c02:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8001c06:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8001c0a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8001c0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8001c12:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8001c16:	f04f 0b08 	mov.w	fp, #8
 8001c1a:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8001c1e:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8001c22:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8001c26:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8001c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8001c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001c32:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8001c36:	f04f 0509 	mov.w	r5, #9
 8001c3a:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8001c3e:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8001c42:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8001c46:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8001c4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001c52:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8001c56:	250a      	movs	r5, #10
 8001c58:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8001c5c:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8001c60:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8001c64:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8001c68:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8001c6c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001c70:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8001c74:	f04f 090b 	mov.w	r9, #11
 8001c78:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8001c7c:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8001c80:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8001c84:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8001c88:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001c8c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001c90:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8001c94:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8001c98:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8001c9c:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8001ca0:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8001ca4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8001ca8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8001cac:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8001cb0:	f04f 060d 	mov.w	r6, #13
 8001cb4:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8001cb8:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8001cbc:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8001cc0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8001cc4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8001cc8:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8001ccc:	f04f 0a0e 	mov.w	sl, #14
 8001cd0:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8001cd4:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001cd8:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8001cdc:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8001ce0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001ce4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8001ce8:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8001cec:	f04f 0a0f 	mov.w	sl, #15
 8001cf0:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8001cf4:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8001cf8:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8001cfc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8001d00:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8001d04:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8001d08:	f04f 0a10 	mov.w	sl, #16
 8001d0c:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8001d10:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8001d14:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8001d18:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8001d1c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8001d20:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8001d24:	f04f 0a11 	mov.w	sl, #17
 8001d28:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8001d2c:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001d30:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8001d34:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8001d38:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8001d3c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8001d40:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8001d44:	f04f 0a12 	mov.w	sl, #18
 8001d48:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8001d4c:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001d50:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8001d54:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8001d58:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8001d5c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001d60:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8001d64:	f04f 0a13 	mov.w	sl, #19
 8001d68:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8001d6c:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8001d70:	4656      	mov	r6, sl
 8001d72:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8001d76:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8001d7a:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001d7e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001d82:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8001d86:	f04f 0a14 	mov.w	sl, #20
 8001d8a:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8001d8e:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8001d92:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8001d96:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8001d9a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8001d9e:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8001da2:	f04f 0a15 	mov.w	sl, #21
 8001da6:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8001daa:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8001dae:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8001db2:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001db6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8001dba:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8001dbe:	f04f 0a16 	mov.w	sl, #22
 8001dc2:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8001dc6:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8001dca:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8001dce:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8001dd2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8001dd6:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8001dda:	f04f 0e17 	mov.w	lr, #23
 8001dde:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8001de2:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8001de6:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8001dea:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8001dee:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8001df2:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8001df6:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8001dfa:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8001dfe:	f04f 0918 	mov.w	r9, #24
 8001e02:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8001e06:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8001e0a:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8001e0e:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8001e12:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8001e16:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8001e1a:	f04f 0819 	mov.w	r8, #25
 8001e1e:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8001e22:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8001e26:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8001e2a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8001e2e:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8001e32:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8001e36:	271a      	movs	r7, #26
 8001e38:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8001e3c:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001e40:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8001e44:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8001e48:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8001e4c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8001e50:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8001e54:	271b      	movs	r7, #27
 8001e56:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8001e5a:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001e5e:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8001e62:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8001e66:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8001e6a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8001e6e:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8001e72:	271c      	movs	r7, #28
 8001e74:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8001e78:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8001e7c:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8001e80:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001e84:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001e88:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8001e8c:	271d      	movs	r7, #29
 8001e8e:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8001e92:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8001e96:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8001e9a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8001e9e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001ea2:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8001ea6:	271e      	movs	r7, #30
 8001ea8:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8001eac:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001eb0:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8001eb4:	26e2      	movs	r6, #226	; 0xe2
 8001eb6:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8001eba:	f44f 7790 	mov.w	r7, #288	; 0x120
 8001ebe:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8001ec2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001ec6:	f04f 0709 	mov.w	r7, #9
 8001eca:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8001ed0:	801c      	strh	r4, [r3, #0]
 8001ed2:	f8a3 e002 	strh.w	lr, [r3, #2]
 8001ed6:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8001eda:	f8a3 c004 	strh.w	ip, [r3, #4]
 8001ede:	80da      	strh	r2, [r3, #6]
};
 8001ee0:	2700      	movs	r7, #0
 8001ee2:	609f      	str	r7, [r3, #8]
 8001ee4:	f04f 0805 	mov.w	r8, #5
 8001ee8:	f8a3 800c 	strh.w	r8, [r3, #12]
 8001eec:	821d      	strh	r5, [r3, #16]
 8001eee:	f8a3 e012 	strh.w	lr, [r3, #18]
 8001ef2:	f8a3 c014 	strh.w	ip, [r3, #20]
 8001ef6:	82da      	strh	r2, [r3, #22]
 8001ef8:	619f      	str	r7, [r3, #24]
 8001efa:	f04f 0e04 	mov.w	lr, #4
 8001efe:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8001f02:	841c      	strh	r4, [r3, #32]
 8001f04:	845e      	strh	r6, [r3, #34]	; 0x22
 8001f06:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8001f0a:	84da      	strh	r2, [r3, #38]	; 0x26
 8001f0c:	629f      	str	r7, [r3, #40]	; 0x28
 8001f0e:	f04f 0408 	mov.w	r4, #8
 8001f12:	859c      	strh	r4, [r3, #44]	; 0x2c
 8001f14:	861d      	strh	r5, [r3, #48]	; 0x30
 8001f16:	865e      	strh	r6, [r3, #50]	; 0x32
 8001f18:	e004      	b.n	8001f24 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8001f1a:	bf00      	nop
 8001f1c:	24004d90 	.word	0x24004d90
 8001f20:	24004d00 	.word	0x24004d00
 8001f24:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8001f28:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f2a:	639f      	str	r7, [r3, #56]	; 0x38
 8001f2c:	f04f 0206 	mov.w	r2, #6
 8001f30:	879a      	strh	r2, [r3, #60]	; 0x3c
 8001f32:	4604      	mov	r4, r0
 8001f34:	3340      	adds	r3, #64	; 0x40
 8001f36:	2c00      	cmp	r4, #0
 8001f38:	db0b      	blt.n	8001f52 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	805a      	strh	r2, [r3, #2]
 8001f48:	809a      	strh	r2, [r3, #4]
 8001f4a:	80da      	strh	r2, [r3, #6]
 8001f4c:	3310      	adds	r3, #16
 8001f4e:	3c01      	subs	r4, #1
 8001f50:	e7f1      	b.n	8001f36 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f54:	2205      	movs	r2, #5
 8001f56:	825a      	strh	r2, [r3, #18]
 8001f58:	222d      	movs	r2, #45	; 0x2d
 8001f5a:	829a      	strh	r2, [r3, #20]
 8001f5c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001f60:	82da      	strh	r2, [r3, #22]
 8001f62:	2246      	movs	r2, #70	; 0x46
 8001f64:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8001f66:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f68:	61da      	str	r2, [r3, #28]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	841a      	strh	r2, [r3, #32]
        : color(col)
 8001f6e:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24
 8001f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8001f7a:	b918      	cbnz	r0, 8001f84 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8001f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f80:	4299      	cmp	r1, r3
 8001f82:	d001      	beq.n	8001f88 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8001f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f8c:	61da      	str	r2, [r3, #28]
 8001f8e:	e7f9      	b.n	8001f84 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f92:	4a02      	ldr	r2, [pc, #8]	; (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f94:	61da      	str	r2, [r3, #28]
 8001f96:	4770      	bx	lr
 8001f98:	24004d60 	.word	0x24004d60
 8001f9c:	08024fe8 	.word	0x08024fe8

08001fa0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001fa0:	b538      	push	{r3, r4, r5, lr}
 8001fa2:	4604      	mov	r4, r0
    HAL::initialize();
 8001fa4:	f012 fbb9 	bl	801471a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8001fac:	f016 f81a 	bl	8017fe4 <_ZN8touchgfx11Application11getInstanceEv>
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	4a02      	ldr	r2, [pc, #8]	; (8001fc8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 8001fc0:	4902      	ldr	r1, [pc, #8]	; (8001fcc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	47a8      	blx	r5
}
 8001fc6:	bd38      	pop	{r3, r4, r5, pc}
 8001fc8:	2409fa00 	.word	0x2409fa00
 8001fcc:	24040000 	.word	0x24040000

08001fd0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 8001fd0:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 8001fd2:	f012 fb89 	bl	80146e8 <_ZN8touchgfx3HAL10beginFrameEv>
}
 8001fd6:	bd08      	pop	{r3, pc}

08001fd8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8001fd8:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 8001fda:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8001fde:	b113      	cbz	r3, 8001fe6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 8001fe0:	4b02      	ldr	r3, [pc, #8]	; (8001fec <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8001fe6:	f012 fb8b 	bl	8014700 <_ZN8touchgfx3HAL8endFrameEv>
}
 8001fea:	bd08      	pop	{r3, pc}
 8001fec:	24004ef8 	.word	0x24004ef8

08001ff0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001ff0:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 8001ff2:	f012 fb42 	bl	801467a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ffe:	d021      	beq.n	8002044 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002008:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800200c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002010:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8002014:	e000      	b.n	8002018 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 8002016:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002018:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800201c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002020:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8002024:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8002028:	4907      	ldr	r1, [pc, #28]	; (8002048 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 800202a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800202e:	4613      	mov	r3, r2
 8002030:	3a01      	subs	r2, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f2      	bne.n	800201c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 8002036:	1e43      	subs	r3, r0, #1
 8002038:	2800      	cmp	r0, #0
 800203a:	d1ec      	bne.n	8002016 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 800203c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002040:	f3bf 8f6f 	isb	sy
}
 8002044:	bd10      	pop	{r4, pc}
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 800204c:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 800204e:	f012 fc7e 	bl	801494e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8002052:	bd08      	pop	{r3, pc}

08002054 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8002054:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8002056:	f012 fb0a 	bl	801466e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800205a:	bd08      	pop	{r3, pc}

0800205c <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800205c:	b510      	push	{r4, lr}
 800205e:	4604      	mov	r4, r0
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 8002062:	6003      	str	r3, [r0, #0]
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 8002066:	6003      	str	r3, [r0, #0]
 8002068:	217c      	movs	r1, #124	; 0x7c
 800206a:	f021 f93c 	bl	80232e6 <_ZdlPvj>
 800206e:	4620      	mov	r0, r4
 8002070:	bd10      	pop	{r4, pc}
 8002072:	bf00      	nop
 8002074:	0802521c 	.word	0x0802521c
 8002078:	08026c44 	.word	0x08026c44

0800207c <HAL_LTDC_LineEventCallback>:
        return instance;
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_LTDC_LineEventCallback+0x54>)
 800207e:	681b      	ldr	r3, [r3, #0]
        if (!HAL::getInstance())
 8002080:	b32b      	cbz	r3, 80020ce <HAL_LTDC_LineEventCallback+0x52>
    {
 8002082:	b510      	push	{r4, lr}
        if (LTDC->LIPCR == lcd_int_active_line)
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_LTDC_LineEventCallback+0x58>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_LTDC_LineEventCallback+0x5c>)
 800208a:	8811      	ldrh	r1, [r2, #0]
 800208c:	428b      	cmp	r3, r1
 800208e:	d00a      	beq.n	80020a6 <HAL_LTDC_LineEventCallback+0x2a>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002090:	f009 ff26 	bl	800bee0 <HAL_LTDC_ProgramLineEvent>
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_LTDC_LineEventCallback+0x54>)
 8002096:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 8002098:	6803      	ldr	r3, [r0, #0]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7fe fa4e 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80020a4:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_LTDC_LineEventCallback+0x60>)
 80020a8:	8819      	ldrh	r1, [r3, #0]
 80020aa:	f009 ff19 	bl	800bee0 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80020ae:	4c08      	ldr	r4, [pc, #32]	; (80020d0 <HAL_LTDC_LineEventCallback+0x54>)
 80020b0:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80020b2:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80020b6:	3301      	adds	r3, #1
 80020b8:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80020bc:	f7fe fc2a 	bl	8000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80020c0:	6820      	ldr	r0, [r4, #0]
 80020c2:	f013 f87b 	bl	80151bc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7fe f9fc 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80020cc:	e7ea      	b.n	80020a4 <HAL_LTDC_LineEventCallback+0x28>
 80020ce:	4770      	bx	lr
 80020d0:	2400ff14 	.word	0x2400ff14
 80020d4:	50001000 	.word	0x50001000
 80020d8:	24004efc 	.word	0x24004efc
 80020dc:	24004efa 	.word	0x24004efa

080020e0 <_GLOBAL__sub_I__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
}
 80020e0:	b508      	push	{r3, lr}
 80020e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7ff fd28 	bl	8001b3c <_Z41__static_initialization_and_destruction_0ii>
 80020ec:	bd08      	pop	{r3, pc}

080020ee <_GLOBAL__sub_D__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
 80020ee:	b508      	push	{r3, lr}
 80020f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff fd21 	bl	8001b3c <_Z41__static_initialization_and_destruction_0ii>
 80020fa:	bd08      	pop	{r3, pc}

080020fc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80020fc:	b530      	push	{r4, r5, lr}
 80020fe:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002100:	2400      	movs	r4, #0
 8002102:	9400      	str	r4, [sp, #0]
 8002104:	9401      	str	r4, [sp, #4]
 8002106:	9402      	str	r4, [sp, #8]
 8002108:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800210a:	f008 fb6b 	bl	800a7e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800210e:	2501      	movs	r5, #1
 8002110:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002114:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8002118:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800211c:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800211e:	231b      	movs	r3, #27
 8002120:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002124:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002128:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800212c:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002130:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002134:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002138:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800213c:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002140:	4668      	mov	r0, sp
 8002142:	f008 fb6d 	bl	800a820 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002146:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800214a:	2319      	movs	r3, #25
 800214c:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002150:	2403      	movs	r4, #3
 8002152:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002156:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800215a:	4668      	mov	r0, sp
 800215c:	f008 fb60 	bl	800a820 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002160:	2302      	movs	r3, #2
 8002162:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8002166:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800216a:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800216c:	2313      	movs	r3, #19
 800216e:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002172:	4668      	mov	r0, sp
 8002174:	f008 fb54 	bl	800a820 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8002178:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800217c:	2311      	movs	r3, #17
 800217e:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002182:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002186:	4668      	mov	r0, sp
 8002188:	f008 fb4a 	bl	800a820 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800218c:	2004      	movs	r0, #4
 800218e:	f008 fb37 	bl	800a800 <HAL_MPU_Enable>

}
 8002192:	b005      	add	sp, #20
 8002194:	bd30      	pop	{r4, r5, pc}
	...

08002198 <MX_CRC_Init>:
{
 8002198:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800219a:	4806      	ldr	r0, [pc, #24]	; (80021b4 <MX_CRC_Init+0x1c>)
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <MX_CRC_Init+0x20>)
 800219e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80021a4:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80021a6:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80021a8:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80021aa:	2301      	movs	r3, #1
 80021ac:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021ae:	f008 fb67 	bl	800a880 <HAL_CRC_Init>
}
 80021b2:	bd08      	pop	{r3, pc}
 80021b4:	24004f10 	.word	0x24004f10
 80021b8:	40023000 	.word	0x40023000

080021bc <MX_GPIO_Init>:
{
 80021bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021c0:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c2:	2400      	movs	r4, #0
 80021c4:	9409      	str	r4, [sp, #36]	; 0x24
 80021c6:	940a      	str	r4, [sp, #40]	; 0x28
 80021c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80021ca:	940c      	str	r4, [sp, #48]	; 0x30
 80021cc:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021ce:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <MX_GPIO_Init+0x1ec>)
 80021d0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021dc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021e0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80021e4:	9201      	str	r2, [sp, #4]
 80021e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80021e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021f4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021f8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80021fc:	9202      	str	r2, [sp, #8]
 80021fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002200:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002208:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800220c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002210:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002214:	9203      	str	r2, [sp, #12]
 8002216:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002218:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800221c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002220:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002224:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002228:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800222c:	9204      	str	r2, [sp, #16]
 800222e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002230:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002234:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002238:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800223c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002240:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002244:	9205      	str	r2, [sp, #20]
 8002246:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002254:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002258:	f002 0201 	and.w	r2, r2, #1
 800225c:	9206      	str	r2, [sp, #24]
 800225e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002260:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002264:	f042 0204 	orr.w	r2, r2, #4
 8002268:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800226c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002270:	f002 0204 	and.w	r2, r2, #4
 8002274:	9207      	str	r2, [sp, #28]
 8002276:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002278:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800227c:	f042 0208 	orr.w	r2, r2, #8
 8002280:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002284:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	9308      	str	r3, [sp, #32]
 800228e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|FRAME_RATE_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8002290:	4e46      	ldr	r6, [pc, #280]	; (80023ac <MX_GPIO_Init+0x1f0>)
 8002292:	4622      	mov	r2, r4
 8002294:	f240 210e 	movw	r1, #526	; 0x20e
 8002298:	4630      	mov	r0, r6
 800229a:	f008 ffc4 	bl	800b226 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800229e:	f8df a118 	ldr.w	sl, [pc, #280]	; 80023b8 <MX_GPIO_Init+0x1fc>
 80022a2:	4622      	mov	r2, r4
 80022a4:	f640 0104 	movw	r1, #2052	; 0x804
 80022a8:	4650      	mov	r0, sl
 80022aa:	f008 ffbc 	bl	800b226 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80022ae:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80023bc <MX_GPIO_Init+0x200>
 80022b2:	4622      	mov	r2, r4
 80022b4:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 80022b8:	4640      	mov	r0, r8
 80022ba:	f008 ffb4 	bl	800b226 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80022be:	4f3c      	ldr	r7, [pc, #240]	; (80023b0 <MX_GPIO_Init+0x1f4>)
 80022c0:	4622      	mov	r2, r4
 80022c2:	2106      	movs	r1, #6
 80022c4:	4638      	mov	r0, r7
 80022c6:	f008 ffae 	bl	800b226 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80022ca:	2330      	movs	r3, #48	; 0x30
 80022cc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ce:	f44f 1988 	mov.w	r9, #1114112	; 0x110000
 80022d2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022d8:	a909      	add	r1, sp, #36	; 0x24
 80022da:	4630      	mov	r0, r6
 80022dc:	f008 fde4 	bl	800aea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 80022e0:	230e      	movs	r3, #14
 80022e2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2501      	movs	r5, #1
 80022e6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022ec:	a909      	add	r1, sp, #36	; 0x24
 80022ee:	4630      	mov	r0, r6
 80022f0:	f008 fdda 	bl	800aea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80022f4:	f640 0304 	movw	r3, #2052	; 0x804
 80022f8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fa:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002300:	a909      	add	r1, sp, #36	; 0x24
 8002302:	4650      	mov	r0, sl
 8002304:	f008 fdd0 	bl	800aea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8002308:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800230c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	f04f 0a03 	mov.w	sl, #3
 8002316:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800231a:	a909      	add	r1, sp, #36	; 0x24
 800231c:	4640      	mov	r0, r8
 800231e:	f008 fdc3 	bl	800aea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8002322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002326:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002328:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8002330:	a909      	add	r1, sp, #36	; 0x24
 8002332:	4630      	mov	r0, r6
 8002334:	f008 fdb8 	bl	800aea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8002338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800233c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800233e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002344:	a909      	add	r1, sp, #36	; 0x24
 8002346:	481b      	ldr	r0, [pc, #108]	; (80023b4 <MX_GPIO_Init+0x1f8>)
 8002348:	f008 fdae 	bl	800aea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800234c:	2604      	movs	r6, #4
 800234e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002350:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002354:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002356:	a909      	add	r1, sp, #36	; 0x24
 8002358:	4640      	mov	r0, r8
 800235a:	f008 fda5 	bl	800aea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800235e:	2302      	movs	r3, #2
 8002360:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002368:	a909      	add	r1, sp, #36	; 0x24
 800236a:	4638      	mov	r0, r7
 800236c:	f008 fd9c 	bl	800aea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8002370:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002374:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8002378:	a909      	add	r1, sp, #36	; 0x24
 800237a:	4638      	mov	r0, r7
 800237c:	f008 fd94 	bl	800aea8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002380:	4622      	mov	r2, r4
 8002382:	2105      	movs	r1, #5
 8002384:	2017      	movs	r0, #23
 8002386:	f008 f9d7 	bl	800a738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800238a:	2017      	movs	r0, #23
 800238c:	f008 fa0a 	bl	800a7a4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002390:	4622      	mov	r2, r4
 8002392:	2105      	movs	r1, #5
 8002394:	2028      	movs	r0, #40	; 0x28
 8002396:	f008 f9cf 	bl	800a738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800239a:	2028      	movs	r0, #40	; 0x28
 800239c:	f008 fa02 	bl	800a7a4 <HAL_NVIC_EnableIRQ>
}
 80023a0:	b00e      	add	sp, #56	; 0x38
 80023a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023a6:	bf00      	nop
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58022000 	.word	0x58022000
 80023b0:	58020000 	.word	0x58020000
 80023b4:	58020800 	.word	0x58020800
 80023b8:	58021800 	.word	0x58021800
 80023bc:	58021c00 	.word	0x58021c00

080023c0 <MX_DMA2D_Init>:
{
 80023c0:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 80023c2:	4c0b      	ldr	r4, [pc, #44]	; (80023f0 <MX_DMA2D_Init+0x30>)
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <MX_DMA2D_Init+0x34>)
 80023c6:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80023c8:	2300      	movs	r3, #0
 80023ca:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80023cc:	2202      	movs	r2, #2
 80023ce:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 80023d0:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80023d2:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80023d4:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80023d6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80023d8:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80023da:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80023dc:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80023de:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80023e0:	4620      	mov	r0, r4
 80023e2:	f008 fbfd 	bl	800abe0 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80023e6:	2101      	movs	r1, #1
 80023e8:	4620      	mov	r0, r4
 80023ea:	f008 fcdb 	bl	800ada4 <HAL_DMA2D_ConfigLayer>
}
 80023ee:	bd10      	pop	{r4, pc}
 80023f0:	24004f34 	.word	0x24004f34
 80023f4:	52001000 	.word	0x52001000

080023f8 <MX_LTDC_Init>:
{
 80023f8:	b530      	push	{r4, r5, lr}
 80023fa:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80023fc:	2234      	movs	r2, #52	; 0x34
 80023fe:	2100      	movs	r1, #0
 8002400:	a801      	add	r0, sp, #4
 8002402:	f021 f935 	bl	8023670 <memset>
  hltdc.Instance = LTDC;
 8002406:	4c23      	ldr	r4, [pc, #140]	; (8002494 <MX_LTDC_Init+0x9c>)
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <MX_LTDC_Init+0xa0>)
 800240a:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800240c:	2500      	movs	r5, #0
 800240e:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002410:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002412:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002414:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 8002416:	2328      	movs	r3, #40	; 0x28
 8002418:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 800241a:	2309      	movs	r3, #9
 800241c:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 800241e:	232a      	movs	r3, #42	; 0x2a
 8002420:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002422:	230b      	movs	r3, #11
 8002424:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8002426:	f240 230a 	movw	r3, #522	; 0x20a
 800242a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800242c:	f240 131b 	movw	r3, #283	; 0x11b
 8002430:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8002432:	f240 232a 	movw	r3, #554	; 0x22a
 8002436:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002438:	f240 131d 	movw	r3, #285	; 0x11d
 800243c:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800243e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002442:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002446:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800244a:	4620      	mov	r0, r4
 800244c:	f009 fc2a 	bl	800bca4 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8002450:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8002452:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002456:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8002458:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 800245a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800245e:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002460:	2301      	movs	r3, #1
 8002462:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8002464:	23ff      	movs	r3, #255	; 0xff
 8002466:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8002468:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800246a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800246e:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002470:	2005      	movs	r0, #5
 8002472:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002474:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002476:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002478:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 800247a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800247e:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002482:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002486:	462a      	mov	r2, r5
 8002488:	a901      	add	r1, sp, #4
 800248a:	4620      	mov	r0, r4
 800248c:	f009 fcf3 	bl	800be76 <HAL_LTDC_ConfigLayer>
}
 8002490:	b00f      	add	sp, #60	; 0x3c
 8002492:	bd30      	pop	{r4, r5, pc}
 8002494:	24004fe8 	.word	0x24004fe8
 8002498:	50001000 	.word	0x50001000

0800249c <MX_I2C4_Init>:
{
 800249c:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 800249e:	4c0d      	ldr	r4, [pc, #52]	; (80024d4 <MX_I2C4_Init+0x38>)
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <MX_I2C4_Init+0x3c>)
 80024a2:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <MX_I2C4_Init+0x40>)
 80024a6:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80024a8:	2500      	movs	r5, #0
 80024aa:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ac:	2301      	movs	r3, #1
 80024ae:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b0:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80024b2:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024b4:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b6:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b8:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80024ba:	4620      	mov	r0, r4
 80024bc:	f009 f892 	bl	800b5e4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80024c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024c4:	4620      	mov	r0, r4
 80024c6:	f009 fab6 	bl	800ba36 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80024ca:	4629      	mov	r1, r5
 80024cc:	4620      	mov	r0, r4
 80024ce:	f009 fae0 	bl	800ba92 <HAL_I2CEx_ConfigDigitalFilter>
}
 80024d2:	bd38      	pop	{r3, r4, r5, pc}
 80024d4:	24004f9c 	.word	0x24004f9c
 80024d8:	58001c00 	.word	0x58001c00
 80024dc:	30808bd0 	.word	0x30808bd0

080024e0 <MX_OCTOSPI1_Init>:
{
 80024e0:	b530      	push	{r4, r5, lr}
 80024e2:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 80024e4:	4814      	ldr	r0, [pc, #80]	; (8002538 <MX_OCTOSPI1_Init+0x58>)
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <MX_OCTOSPI1_Init+0x5c>)
 80024e8:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 80024ea:	2501      	movs	r5, #1
 80024ec:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80024ee:	2400      	movs	r4, #0
 80024f0:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80024f2:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 80024f4:	231a      	movs	r3, #26
 80024f6:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80024f8:	2302      	movs	r3, #2
 80024fa:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80024fc:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80024fe:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8002500:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 8002502:	2303      	movs	r3, #3
 8002504:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002506:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002508:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800250a:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800250c:	2308      	movs	r3, #8
 800250e:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8002510:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8002512:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002514:	f00a f962 	bl	800c7dc <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8002518:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 800251c:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8002520:	4620      	mov	r0, r4
 8002522:	f007 fe5b 	bl	800a1dc <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8002526:	a901      	add	r1, sp, #4
 8002528:	4620      	mov	r0, r4
 800252a:	f007 fed1 	bl	800a2d0 <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 800252e:	4620      	mov	r0, r4
 8002530:	f007 fdfc 	bl	800a12c <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8002534:	b003      	add	sp, #12
 8002536:	bd30      	pop	{r4, r5, pc}
 8002538:	24005090 	.word	0x24005090
 800253c:	52005000 	.word	0x52005000

08002540 <MX_SPI2_Init>:
{
 8002540:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8002542:	4812      	ldr	r0, [pc, #72]	; (800258c <MX_SPI2_Init+0x4c>)
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <MX_SPI2_Init+0x50>)
 8002546:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002548:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800254c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800254e:	2300      	movs	r3, #0
 8002550:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002552:	220f      	movs	r2, #15
 8002554:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002556:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002558:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800255a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800255e:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002560:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002564:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002566:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002568:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800256a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800256c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800256e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002572:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002574:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002576:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002578:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800257a:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800257c:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800257e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002580:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002582:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002584:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002586:	f00b fea5 	bl	800e2d4 <HAL_SPI_Init>
}
 800258a:	bd08      	pop	{r3, pc}
 800258c:	240050ec 	.word	0x240050ec
 8002590:	40003800 	.word	0x40003800

08002594 <SystemClock_Config>:
{
 8002594:	b510      	push	{r4, lr}
 8002596:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002598:	224c      	movs	r2, #76	; 0x4c
 800259a:	2100      	movs	r1, #0
 800259c:	a809      	add	r0, sp, #36	; 0x24
 800259e:	f021 f867 	bl	8023670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025a2:	2220      	movs	r2, #32
 80025a4:	2100      	movs	r1, #0
 80025a6:	a801      	add	r0, sp, #4
 80025a8:	f021 f862 	bl	8023670 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <SystemClock_Config+0xa8>)
 80025ae:	f04f 32ff 	mov.w	r2, #4294967295
 80025b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80025b6:	2004      	movs	r0, #4
 80025b8:	f00a f994 	bl	800c8e4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025bc:	2300      	movs	r3, #0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <SystemClock_Config+0xac>)
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80025c8:	619a      	str	r2, [r3, #24]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <SystemClock_Config+0xac>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80025dc:	d0fa      	beq.n	80025d4 <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <SystemClock_Config+0xa8>)
 80025e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80025e2:	f023 0303 	bic.w	r3, r3, #3
 80025e6:	f043 0302 	orr.w	r3, r3, #2
 80025ea:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025ec:	2301      	movs	r3, #1
 80025ee:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025f6:	2302      	movs	r3, #2
 80025f8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025fa:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80025fc:	220c      	movs	r2, #12
 80025fe:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8002600:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002604:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002606:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002608:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800260a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800260c:	2304      	movs	r3, #4
 800260e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002610:	2400      	movs	r4, #0
 8002612:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002614:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002616:	a809      	add	r0, sp, #36	; 0x24
 8002618:	f00a f9ae 	bl	800c978 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800261c:	233f      	movs	r3, #63	; 0x3f
 800261e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002620:	2103      	movs	r1, #3
 8002622:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002624:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002626:	2308      	movs	r3, #8
 8002628:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800262a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800262c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800262e:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002630:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002632:	a801      	add	r0, sp, #4
 8002634:	f00a fdac 	bl	800d190 <HAL_RCC_ClockConfig>
}
 8002638:	b01c      	add	sp, #112	; 0x70
 800263a:	bd10      	pop	{r4, pc}
 800263c:	58024400 	.word	0x58024400
 8002640:	58024800 	.word	0x58024800

08002644 <main>:
{
 8002644:	b508      	push	{r3, lr}
  MPU_Config();
 8002646:	f7ff fd59 	bl	80020fc <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800264a:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <main+0x104>)
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002652:	d113      	bne.n	800267c <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8002654:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002658:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800265c:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <main+0x104>)
 800265e:	2200      	movs	r2, #0
 8002660:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002668:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002672:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002678:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <main+0x104>)
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002684:	d127      	bne.n	80026d6 <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002686:	4b30      	ldr	r3, [pc, #192]	; (8002748 <main+0x104>)
 8002688:	2200      	movs	r2, #0
 800268a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800268e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002692:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002696:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800269a:	e000      	b.n	800269e <main+0x5a>
    } while(sets-- != 0U);
 800269c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800269e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80026a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80026a6:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80026aa:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80026ae:	4926      	ldr	r1, [pc, #152]	; (8002748 <main+0x104>)
 80026b0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80026b4:	4613      	mov	r3, r2
 80026b6:	3a01      	subs	r2, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f2      	bne.n	80026a2 <main+0x5e>
    } while(sets-- != 0U);
 80026bc:	1e43      	subs	r3, r0, #1
 80026be:	2800      	cmp	r0, #0
 80026c0:	d1ec      	bne.n	800269c <main+0x58>
 80026c2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80026c6:	694b      	ldr	r3, [r1, #20]
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	614b      	str	r3, [r1, #20]
 80026ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026d2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80026d6:	f007 ffc9 	bl	800a66c <HAL_Init>
  SystemClock_Config();
 80026da:	f7ff ff5b 	bl	8002594 <SystemClock_Config>
  MX_CRC_Init();
 80026de:	f7ff fd5b 	bl	8002198 <MX_CRC_Init>
  MX_GPIO_Init();
 80026e2:	f7ff fd6b 	bl	80021bc <MX_GPIO_Init>
  MX_DMA2D_Init();
 80026e6:	f7ff fe6b 	bl	80023c0 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80026ea:	f7ff fe85 	bl	80023f8 <MX_LTDC_Init>
  MX_I2C4_Init();
 80026ee:	f7ff fed5 	bl	800249c <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 80026f2:	f7ff fef5 	bl	80024e0 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 80026f6:	f7ff ff23 	bl	8002540 <MX_SPI2_Init>
  MX_TouchGFX_Init();
 80026fa:	f7fd fe8b 	bl	8000414 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80026fe:	f7fd fe88 	bl	8000412 <MX_TouchGFX_PreOSInit>
  wifi_initialise();
 8002702:	f000 fead 	bl	8003460 <wifi_initialise>
  osKernelInitialize();
 8002706:	f00c fe77 	bl	800f3f8 <osKernelInitialize>
  GUI_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &GUI_Queue_attributes);
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <main+0x108>)
 800270c:	2101      	movs	r1, #1
 800270e:	200a      	movs	r0, #10
 8002710:	f00c ffbd 	bl	800f68e <osMessageQueueNew>
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <main+0x10c>)
 8002716:	6018      	str	r0, [r3, #0]
  WiFi_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &WiFi_Queue_attributes);
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <main+0x110>)
 800271a:	2101      	movs	r1, #1
 800271c:	200a      	movs	r0, #10
 800271e:	f00c ffb6 	bl	800f68e <osMessageQueueNew>
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <main+0x114>)
 8002724:	6018      	str	r0, [r3, #0]
  WiFi_TaskHandle = osThreadNew(esWiFi_Task, NULL, &WiFi_Task_attributes);
 8002726:	4a0d      	ldr	r2, [pc, #52]	; (800275c <main+0x118>)
 8002728:	2100      	movs	r1, #0
 800272a:	480d      	ldr	r0, [pc, #52]	; (8002760 <main+0x11c>)
 800272c:	f00c fe92 	bl	800f454 <osThreadNew>
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <main+0x120>)
 8002732:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <main+0x124>)
 8002736:	2100      	movs	r1, #0
 8002738:	480c      	ldr	r0, [pc, #48]	; (800276c <main+0x128>)
 800273a:	f00c fe8b 	bl	800f454 <osThreadNew>
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <main+0x12c>)
 8002740:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002742:	f00c fe6b 	bl	800f41c <osKernelStart>
  while (1)
 8002746:	e7fe      	b.n	8002746 <main+0x102>
 8002748:	e000ed00 	.word	0xe000ed00
 800274c:	0802531c 	.word	0x0802531c
 8002750:	24004f00 	.word	0x24004f00
 8002754:	08025358 	.word	0x08025358
 8002758:	24004f08 	.word	0x24004f08
 800275c:	08025370 	.word	0x08025370
 8002760:	080034f5 	.word	0x080034f5
 8002764:	24004f0c 	.word	0x24004f0c
 8002768:	08025334 	.word	0x08025334
 800276c:	0800041d 	.word	0x0800041d
 8002770:	24004f04 	.word	0x24004f04

08002774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002776:	6802      	ldr	r2, [r0, #0]
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800277a:	429a      	cmp	r2, r3
 800277c:	d000      	beq.n	8002780 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800277e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002780:	f007 ffa2 	bl	800a6c8 <HAL_IncTick>
}
 8002784:	e7fb      	b.n	800277e <HAL_TIM_PeriodElapsedCallback+0xa>
 8002786:	bf00      	nop
 8002788:	40001000 	.word	0x40001000

0800278c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800278c:	4770      	bx	lr
	...

08002790 <wait_cmddata_rdy_rising_event>:
}



int32_t wait_cmddata_rdy_rising_event(int32_t timeout)
{
 8002790:	b538      	push	{r3, r4, r5, lr}
 8002792:	4605      	mov	r5, r0
#ifdef SEM_WAIT
    return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
    int32_t tickstart = HAL_GetTick();
 8002794:	f007 ffa4 	bl	800a6e0 <HAL_GetTick>
 8002798:	4604      	mov	r4, r0
    while (cmddata_rdy_rising_event == 1)
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <wait_cmddata_rdy_rising_event+0x28>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <wait_cmddata_rdy_rising_event+0x22>
    {
        if ((HAL_GetTick() - tickstart) > timeout)
 80027a2:	f007 ff9d 	bl	800a6e0 <HAL_GetTick>
 80027a6:	1b00      	subs	r0, r0, r4
 80027a8:	42a8      	cmp	r0, r5
 80027aa:	d9f6      	bls.n	800279a <wait_cmddata_rdy_rising_event+0xa>
        {
            return -1;
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	e000      	b.n	80027b4 <wait_cmddata_rdy_rising_event+0x24>
        }
    }
    return 0;
 80027b2:	2000      	movs	r0, #0
#endif /* SEM_WAIT */
}
 80027b4:	bd38      	pop	{r3, r4, r5, pc}
 80027b6:	bf00      	nop
 80027b8:	2400581c 	.word	0x2400581c

080027bc <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80027bc:	b530      	push	{r4, r5, lr}
 80027be:	b083      	sub	sp, #12
 80027c0:	4604      	mov	r4, r0
    volatile        uint32_t ct = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	9301      	str	r3, [sp, #4]
    uint32_t        loop_per_us = 0;
    static uint32_t cycle_per_loop = 0;

    /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
    /* 10 cycle for STM32L4 */
    if (cycle_per_loop == 0)
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <SPI_WIFI_DelayUs+0x74>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b16b      	cbz	r3, 80027e8 <SPI_WIFI_DelayUs+0x2c>
        {
            cycle_per_loop = 1;
        }
    }

    loop_per_us = SystemCoreClock / 1000000UL / cycle_per_loop;
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <SPI_WIFI_DelayUs+0x78>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4819      	ldr	r0, [pc, #100]	; (8002838 <SPI_WIFI_DelayUs+0x7c>)
 80027d2:	fba0 2303 	umull	r2, r3, r0, r3
 80027d6:	0c9b      	lsrs	r3, r3, #18
 80027d8:	4a15      	ldr	r2, [pc, #84]	; (8002830 <SPI_WIFI_DelayUs+0x74>)
 80027da:	6810      	ldr	r0, [r2, #0]
 80027dc:	fbb3 f3f0 	udiv	r3, r3, r0
    ct = n * loop_per_us;
 80027e0:	fb04 f303 	mul.w	r3, r4, r3
 80027e4:	9301      	str	r3, [sp, #4]
    while (ct)
 80027e6:	e01d      	b.n	8002824 <SPI_WIFI_DelayUs+0x68>
        uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <SPI_WIFI_DelayUs+0x78>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a13      	ldr	r2, [pc, #76]	; (800283c <SPI_WIFI_DelayUs+0x80>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	099b      	lsrs	r3, r3, #6
        ct = cycle_per_ms;
 80027f4:	9301      	str	r3, [sp, #4]
        tick = HAL_GetTick();
 80027f6:	f007 ff73 	bl	800a6e0 <HAL_GetTick>
 80027fa:	4605      	mov	r5, r0
        while (ct)
 80027fc:	e002      	b.n	8002804 <SPI_WIFI_DelayUs+0x48>
            ct--;
 80027fe:	9b01      	ldr	r3, [sp, #4]
 8002800:	3b01      	subs	r3, #1
 8002802:	9301      	str	r3, [sp, #4]
        while (ct)
 8002804:	9b01      	ldr	r3, [sp, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f9      	bne.n	80027fe <SPI_WIFI_DelayUs+0x42>
        cycle_per_loop = HAL_GetTick() - tick;
 800280a:	f007 ff69 	bl	800a6e0 <HAL_GetTick>
 800280e:	1b40      	subs	r0, r0, r5
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <SPI_WIFI_DelayUs+0x74>)
 8002812:	6018      	str	r0, [r3, #0]
        if (cycle_per_loop == 0)
 8002814:	2800      	cmp	r0, #0
 8002816:	d1d9      	bne.n	80027cc <SPI_WIFI_DelayUs+0x10>
            cycle_per_loop = 1;
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	e7d6      	b.n	80027cc <SPI_WIFI_DelayUs+0x10>
    {
        ct--;
 800281e:	9b01      	ldr	r3, [sp, #4]
 8002820:	3b01      	subs	r3, #1
 8002822:	9301      	str	r3, [sp, #4]
    while (ct)
 8002824:	9b01      	ldr	r3, [sp, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f9      	bne.n	800281e <SPI_WIFI_DelayUs+0x62>
    }
    return;
}
 800282a:	b003      	add	sp, #12
 800282c:	bd30      	pop	{r4, r5, pc}
 800282e:	bf00      	nop
 8002830:	24005820 	.word	0x24005820
 8002834:	24000070 	.word	0x24000070
 8002838:	431bde83 	.word	0x431bde83
 800283c:	10624dd3 	.word	0x10624dd3

08002840 <wait_spi_rx_event>:
{
 8002840:	b538      	push	{r3, r4, r5, lr}
 8002842:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002844:	f007 ff4c 	bl	800a6e0 <HAL_GetTick>
 8002848:	4604      	mov	r4, r0
    while (spi_rx_event == 1)
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <wait_spi_rx_event+0x28>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d107      	bne.n	8002862 <wait_spi_rx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002852:	f007 ff45 	bl	800a6e0 <HAL_GetTick>
 8002856:	1b00      	subs	r0, r0, r4
 8002858:	42a8      	cmp	r0, r5
 800285a:	d9f6      	bls.n	800284a <wait_spi_rx_event+0xa>
            return -1;
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	e000      	b.n	8002864 <wait_spi_rx_event+0x24>
    return 0;
 8002862:	2000      	movs	r0, #0
}
 8002864:	bd38      	pop	{r3, r4, r5, pc}
 8002866:	bf00      	nop
 8002868:	24005824 	.word	0x24005824

0800286c <wait_spi_tx_event>:
{
 800286c:	b538      	push	{r3, r4, r5, lr}
 800286e:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002870:	f007 ff36 	bl	800a6e0 <HAL_GetTick>
 8002874:	4604      	mov	r4, r0
    while (spi_tx_event == 1)
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <wait_spi_tx_event+0x28>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <wait_spi_tx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 800287e:	f007 ff2f 	bl	800a6e0 <HAL_GetTick>
 8002882:	1b00      	subs	r0, r0, r4
 8002884:	42a8      	cmp	r0, r5
 8002886:	d9f6      	bls.n	8002876 <wait_spi_tx_event+0xa>
            return -1;
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	e000      	b.n	8002890 <wait_spi_tx_event+0x24>
    return 0;
 800288e:	2000      	movs	r0, #0
}
 8002890:	bd38      	pop	{r3, r4, r5, pc}
 8002892:	bf00      	nop
 8002894:	24005828 	.word	0x24005828

08002898 <SPI_WIFI_ResetModule>:
{
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	b082      	sub	sp, #8
    uint32_t tickstart = HAL_GetTick();
 800289c:	f007 ff20 	bl	800a6e0 <HAL_GetTick>
 80028a0:	4606      	mov	r6, r0
    WIFI_RESET_MODULE();
 80028a2:	4c38      	ldr	r4, [pc, #224]	; (8002984 <SPI_WIFI_ResetModule+0xec>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	2102      	movs	r1, #2
 80028a8:	4620      	mov	r0, r4
 80028aa:	f008 fcbc 	bl	800b226 <HAL_GPIO_WritePin>
 80028ae:	200a      	movs	r0, #10
 80028b0:	f007 ff1c 	bl	800a6ec <HAL_Delay>
 80028b4:	2201      	movs	r2, #1
 80028b6:	2102      	movs	r1, #2
 80028b8:	4620      	mov	r0, r4
 80028ba:	f008 fcb4 	bl	800b226 <HAL_GPIO_WritePin>
 80028be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028c2:	f007 ff13 	bl	800a6ec <HAL_Delay>
    WIFI_ENABLE_NSS();
 80028c6:	2200      	movs	r2, #0
 80028c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028cc:	482e      	ldr	r0, [pc, #184]	; (8002988 <SPI_WIFI_ResetModule+0xf0>)
 80028ce:	f008 fcaa 	bl	800b226 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80028d2:	200a      	movs	r0, #10
 80028d4:	f7ff ff72 	bl	80027bc <SPI_WIFI_DelayUs>
    uint8_t count = 0;
 80028d8:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80028da:	2120      	movs	r1, #32
 80028dc:	4829      	ldr	r0, [pc, #164]	; (8002984 <SPI_WIFI_ResetModule+0xec>)
 80028de:	f008 fc9b 	bl	800b218 <HAL_GPIO_ReadPin>
 80028e2:	2801      	cmp	r0, #1
 80028e4:	d11c      	bne.n	8002920 <SPI_WIFI_ResetModule+0x88>
        Status = HAL_SPI_Receive(&hspi2, &Prompt[count], 1, 0xFFFF);
 80028e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ea:	2201      	movs	r2, #1
 80028ec:	eb0d 0104 	add.w	r1, sp, r4
 80028f0:	4826      	ldr	r0, [pc, #152]	; (800298c <SPI_WIFI_ResetModule+0xf4>)
 80028f2:	f00b ff43 	bl	800e77c <HAL_SPI_Receive>
 80028f6:	4605      	mov	r5, r0
        count += 2;
 80028f8:	3402      	adds	r4, #2
 80028fa:	b2e4      	uxtb	r4, r4
        if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80028fc:	f007 fef0 	bl	800a6e0 <HAL_GetTick>
 8002900:	1b83      	subs	r3, r0, r6
 8002902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002906:	d201      	bcs.n	800290c <SPI_WIFI_ResetModule+0x74>
 8002908:	2d00      	cmp	r5, #0
 800290a:	d0e6      	beq.n	80028da <SPI_WIFI_ResetModule+0x42>
            WIFI_DISABLE_NSS();
 800290c:	2201      	movs	r2, #1
 800290e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002912:	481d      	ldr	r0, [pc, #116]	; (8002988 <SPI_WIFI_ResetModule+0xf0>)
 8002914:	f008 fc87 	bl	800b226 <HAL_GPIO_WritePin>
            return -1;
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
}
 800291c:	b002      	add	sp, #8
 800291e:	bd70      	pop	{r4, r5, r6, pc}
    WIFI_DISABLE_NSS();
 8002920:	2201      	movs	r2, #1
 8002922:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002926:	4818      	ldr	r0, [pc, #96]	; (8002988 <SPI_WIFI_ResetModule+0xf0>)
 8002928:	f008 fc7d 	bl	800b226 <HAL_GPIO_WritePin>
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800292c:	f89d 3000 	ldrb.w	r3, [sp]
 8002930:	2b15      	cmp	r3, #21
 8002932:	d115      	bne.n	8002960 <SPI_WIFI_ResetModule+0xc8>
 8002934:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002938:	2b15      	cmp	r3, #21
 800293a:	d114      	bne.n	8002966 <SPI_WIFI_ResetModule+0xce>
 800293c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002940:	2b0d      	cmp	r3, #13
 8002942:	d113      	bne.n	800296c <SPI_WIFI_ResetModule+0xd4>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002944:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002948:	2b0a      	cmp	r3, #10
 800294a:	d112      	bne.n	8002972 <SPI_WIFI_ResetModule+0xda>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 800294c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002950:	2b3e      	cmp	r3, #62	; 0x3e
 8002952:	d111      	bne.n	8002978 <SPI_WIFI_ResetModule+0xe0>
 8002954:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002958:	2b20      	cmp	r3, #32
 800295a:	d110      	bne.n	800297e <SPI_WIFI_ResetModule+0xe6>
    return 0;
 800295c:	2000      	movs	r0, #0
 800295e:	e7dd      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
        return -1;
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	e7da      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 8002966:	f04f 30ff 	mov.w	r0, #4294967295
 800296a:	e7d7      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	e7d4      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 8002972:	f04f 30ff 	mov.w	r0, #4294967295
 8002976:	e7d1      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	e7ce      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 800297e:	f04f 30ff 	mov.w	r0, #4294967295
 8002982:	e7cb      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 8002984:	58022000 	.word	0x58022000
 8002988:	58020000 	.word	0x58020000
 800298c:	240050ec 	.word	0x240050ec

08002990 <SPI_WIFI_ReceiveData>:
{
 8002990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002992:	b083      	sub	sp, #12
 8002994:	4605      	mov	r5, r0
 8002996:	460e      	mov	r6, r1
 8002998:	4617      	mov	r7, r2
    WIFI_DISABLE_NSS();
 800299a:	2201      	movs	r2, #1
 800299c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a0:	482b      	ldr	r0, [pc, #172]	; (8002a50 <SPI_WIFI_ReceiveData+0xc0>)
 80029a2:	f008 fc40 	bl	800b226 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80029a6:	200a      	movs	r0, #10
 80029a8:	f7ff ff08 	bl	80027bc <SPI_WIFI_DelayUs>
    if (wait_cmddata_rdy_rising_event(timeout) < 0)
 80029ac:	4638      	mov	r0, r7
 80029ae:	f7ff feef 	bl	8002790 <wait_cmddata_rdy_rising_event>
 80029b2:	2800      	cmp	r0, #0
 80029b4:	db48      	blt.n	8002a48 <SPI_WIFI_ReceiveData+0xb8>
    WIFI_ENABLE_NSS();
 80029b6:	2200      	movs	r2, #0
 80029b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029bc:	4824      	ldr	r0, [pc, #144]	; (8002a50 <SPI_WIFI_ReceiveData+0xc0>)
 80029be:	f008 fc32 	bl	800b226 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(30);
 80029c2:	201e      	movs	r0, #30
 80029c4:	f7ff fefa 	bl	80027bc <SPI_WIFI_DelayUs>
    int16_t length = 0;
 80029c8:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80029ca:	e016      	b.n	80029fa <SPI_WIFI_ReceiveData+0x6a>
            spi_rx_event = 1;
 80029cc:	2201      	movs	r2, #1
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <SPI_WIFI_ReceiveData+0xc4>)
 80029d0:	601a      	str	r2, [r3, #0]
            if (HAL_SPI_Receive_IT(&hspi2, tmp, 1) != HAL_OK)
 80029d2:	a901      	add	r1, sp, #4
 80029d4:	4820      	ldr	r0, [pc, #128]	; (8002a58 <SPI_WIFI_ReceiveData+0xc8>)
 80029d6:	f00c f97d 	bl	800ecd4 <HAL_SPI_Receive_IT>
 80029da:	bb08      	cbnz	r0, 8002a20 <SPI_WIFI_ReceiveData+0x90>
            wait_spi_rx_event(timeout);
 80029dc:	4638      	mov	r0, r7
 80029de:	f7ff ff2f 	bl	8002840 <wait_spi_rx_event>
            pData[0] = tmp[0];
 80029e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029e6:	702b      	strb	r3, [r5, #0]
            pData[1] = tmp[1];
 80029e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80029ec:	706b      	strb	r3, [r5, #1]
            length += 2;
 80029ee:	3402      	adds	r4, #2
 80029f0:	b224      	sxth	r4, r4
            pData  += 2;
 80029f2:	3502      	adds	r5, #2
            if (length >= ES_WIFI_DATA_SIZE)
 80029f4:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 80029f8:	da1b      	bge.n	8002a32 <SPI_WIFI_ReceiveData+0xa2>
    while (WIFI_IS_CMDDATA_READY())
 80029fa:	2120      	movs	r1, #32
 80029fc:	4817      	ldr	r0, [pc, #92]	; (8002a5c <SPI_WIFI_ReceiveData+0xcc>)
 80029fe:	f008 fc0b 	bl	800b218 <HAL_GPIO_ReadPin>
 8002a02:	2801      	cmp	r0, #1
 8002a04:	d103      	bne.n	8002a0e <SPI_WIFI_ReceiveData+0x7e>
        if ((length < len) || (!len))
 8002a06:	42b4      	cmp	r4, r6
 8002a08:	dbe0      	blt.n	80029cc <SPI_WIFI_ReceiveData+0x3c>
 8002a0a:	2e00      	cmp	r6, #0
 8002a0c:	d0de      	beq.n	80029cc <SPI_WIFI_ReceiveData+0x3c>
    WIFI_DISABLE_NSS();
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a14:	480e      	ldr	r0, [pc, #56]	; (8002a50 <SPI_WIFI_ReceiveData+0xc0>)
 8002a16:	f008 fc06 	bl	800b226 <HAL_GPIO_WritePin>
}
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	b003      	add	sp, #12
 8002a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                WIFI_DISABLE_NSS();
 8002a20:	2201      	movs	r2, #1
 8002a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a26:	480a      	ldr	r0, [pc, #40]	; (8002a50 <SPI_WIFI_ReceiveData+0xc0>)
 8002a28:	f008 fbfd 	bl	800b226 <HAL_GPIO_WritePin>
                return ES_WIFI_ERROR_SPI_FAILED;
 8002a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8002a30:	e7f3      	b.n	8002a1a <SPI_WIFI_ReceiveData+0x8a>
                WIFI_DISABLE_NSS();
 8002a32:	2201      	movs	r2, #1
 8002a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a38:	4805      	ldr	r0, [pc, #20]	; (8002a50 <SPI_WIFI_ReceiveData+0xc0>)
 8002a3a:	f008 fbf4 	bl	800b226 <HAL_GPIO_WritePin>
                SPI_WIFI_ResetModule();
 8002a3e:	f7ff ff2b 	bl	8002898 <SPI_WIFI_ResetModule>
                return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002a42:	f06f 0403 	mvn.w	r4, #3
 8002a46:	e7e8      	b.n	8002a1a <SPI_WIFI_ReceiveData+0x8a>
        return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002a48:	f06f 0402 	mvn.w	r4, #2
 8002a4c:	e7e5      	b.n	8002a1a <SPI_WIFI_ReceiveData+0x8a>
 8002a4e:	bf00      	nop
 8002a50:	58020000 	.word	0x58020000
 8002a54:	24005824 	.word	0x24005824
 8002a58:	240050ec 	.word	0x240050ec
 8002a5c:	58022000 	.word	0x58022000

08002a60 <SPI_WIFI_DeInit>:
{
 8002a60:	b508      	push	{r3, lr}
    HAL_SPI_DeInit(&hspi2);
 8002a62:	4802      	ldr	r0, [pc, #8]	; (8002a6c <SPI_WIFI_DeInit+0xc>)
 8002a64:	f00b fcea 	bl	800e43c <HAL_SPI_DeInit>
}
 8002a68:	2000      	movs	r0, #0
 8002a6a:	bd08      	pop	{r3, pc}
 8002a6c:	240050ec 	.word	0x240050ec

08002a70 <SPI_WIFI_MspInit>:
{
 8002a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a74:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a76:	4b4e      	ldr	r3, [pc, #312]	; (8002bb0 <SPI_WIFI_MspInit+0x140>)
 8002a78:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a80:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002a84:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a88:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a8c:	9201      	str	r2, [sp, #4]
 8002a8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SPI2_FORCE_RESET();
 8002a90:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_SPI2_RELEASE_RESET();
 8002a9c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002aa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002ab4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ab8:	f002 0201 	and.w	r2, r2, #1
 8002abc:	9202      	str	r2, [sp, #8]
 8002abe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ac4:	f042 0204 	orr.w	r2, r2, #4
 8002ac8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002acc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ad0:	f002 0204 	and.w	r2, r2, #4
 8002ad4:	9203      	str	r2, [sp, #12]
 8002ad6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ad8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002ae4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	9304      	str	r3, [sp, #16]
 8002aee:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 8002af0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002bb4 <SPI_WIFI_MspInit+0x144>
 8002af4:	2200      	movs	r2, #0
 8002af6:	2104      	movs	r1, #4
 8002af8:	4640      	mov	r0, r8
 8002afa:	f008 fb94 	bl	800b226 <HAL_GPIO_WritePin>
    GPIO_Init.Pin       = GPIO_PIN_2;
 8002afe:	f04f 0904 	mov.w	r9, #4
 8002b02:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b06:	2501      	movs	r5, #1
 8002b08:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b0a:	2400      	movs	r4, #0
 8002b0c:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b0e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b10:	a905      	add	r1, sp, #20
 8002b12:	4640      	mov	r0, r8
 8002b14:	f008 f9c8 	bl	800aea8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_5;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002b1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b20:	9306      	str	r3, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b22:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b24:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b26:	a905      	add	r1, sp, #20
 8002b28:	4640      	mov	r0, r8
 8002b2a:	f008 f9bd 	bl	800aea8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_1;
 8002b2e:	2702      	movs	r7, #2
 8002b30:	9705      	str	r7, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b32:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b34:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b36:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b38:	2605      	movs	r6, #5
 8002b3a:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b3c:	a905      	add	r1, sp, #20
 8002b3e:	4640      	mov	r0, r8
 8002b40:	f008 f9b2 	bl	800aea8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002b44:	f5a8 5800 	sub.w	r8, r8, #8192	; 0x2000
 8002b48:	462a      	mov	r2, r5
 8002b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b4e:	4640      	mov	r0, r8
 8002b50:	f008 fb69 	bl	800b226 <HAL_GPIO_WritePin>
    GPIO_Init.Pin       =  GPIO_PIN_11;
 8002b54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b58:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b5a:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b5c:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b5e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002b60:	a905      	add	r1, sp, #20
 8002b62:	4640      	mov	r0, r8
 8002b64:	f008 f9a0 	bl	800aea8 <HAL_GPIO_Init>
    GPIO_Init.Pin       =  GPIO_PIN_12;
 8002b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b6c:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b6e:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b70:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b72:	9508      	str	r5, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b74:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002b76:	a905      	add	r1, sp, #20
 8002b78:	4640      	mov	r0, r8
 8002b7a:	f008 f995 	bl	800aea8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_3;
 8002b7e:	2308      	movs	r3, #8
 8002b80:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b82:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b84:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b86:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b88:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8002b8a:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 8002b8e:	a905      	add	r1, sp, #20
 8002b90:	4640      	mov	r0, r8
 8002b92:	f008 f989 	bl	800aea8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_2;
 8002b96:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b9a:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_PULLUP;
 8002b9c:	9507      	str	r5, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b9e:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002ba0:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8002ba2:	a905      	add	r1, sp, #20
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	f008 f97f 	bl	800aea8 <HAL_GPIO_Init>
}
 8002baa:	b00b      	add	sp, #44	; 0x2c
 8002bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	58022000 	.word	0x58022000

08002bb8 <SPI_WIFI_Init>:
{
 8002bb8:	b510      	push	{r4, lr}
    if (mode == ES_WIFI_INIT)
 8002bba:	bb78      	cbnz	r0, 8002c1c <SPI_WIFI_Init+0x64>
        hspi2.Instance               = SPI2;
 8002bbc:	4c1a      	ldr	r4, [pc, #104]	; (8002c28 <SPI_WIFI_Init+0x70>)
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <SPI_WIFI_Init+0x74>)
 8002bc0:	6023      	str	r3, [r4, #0]
        SPI_WIFI_MspInit(&hspi2);
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7ff ff54 	bl	8002a70 <SPI_WIFI_MspInit>
        hspi2.Init.Mode              = SPI_MODE_MASTER;
 8002bc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bcc:	6063      	str	r3, [r4, #4]
        hspi2.Init.Direction         = SPI_DIRECTION_2LINES;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60a3      	str	r3, [r4, #8]
        hspi2.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	60e2      	str	r2, [r4, #12]
        hspi2.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002bd6:	6123      	str	r3, [r4, #16]
        hspi2.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002bd8:	6163      	str	r3, [r4, #20]
        hspi2.Init.NSS               = SPI_NSS_SOFT;
 8002bda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bde:	61a2      	str	r2, [r4, #24]
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /* 280/16 = 17.5MHz (Inventek WIFI module supports up to 20MHz)*/
 8002be0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002be4:	61e2      	str	r2, [r4, #28]
        hspi2.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002be6:	6223      	str	r3, [r4, #32]
        hspi2.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002be8:	6263      	str	r3, [r4, #36]	; 0x24
        hspi2.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002bea:	62a3      	str	r3, [r4, #40]	; 0x28
        hspi2.Init.CRCPolynomial     = 0;
 8002bec:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f00b fb70 	bl	800e2d4 <HAL_SPI_Init>
 8002bf4:	b9a8      	cbnz	r0, 8002c22 <SPI_WIFI_Init+0x6a>
        HAL_NVIC_SetPriority((IRQn_Type)DATA_READY_IRQ, SPI_INTERFACE_PRIO, 0x00);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	2017      	movs	r0, #23
 8002bfc:	f007 fd9c 	bl	800a738 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)DATA_READY_IRQ);
 8002c00:	2017      	movs	r0, #23
 8002c02:	f007 fdcf 	bl	800a7a4 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority((IRQn_Type)SPI2_IRQn, SPI_INTERFACE_PRIO, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	4611      	mov	r1, r2
 8002c0a:	2024      	movs	r0, #36	; 0x24
 8002c0c:	f007 fd94 	bl	800a738 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)SPI2_IRQn);
 8002c10:	2024      	movs	r0, #36	; 0x24
 8002c12:	f007 fdc7 	bl	800a7a4 <HAL_NVIC_EnableIRQ>
        SPI_WIFI_DelayUs(10);
 8002c16:	200a      	movs	r0, #10
 8002c18:	f7ff fdd0 	bl	80027bc <SPI_WIFI_DelayUs>
    rc = SPI_WIFI_ResetModule();
 8002c1c:	f7ff fe3c 	bl	8002898 <SPI_WIFI_ResetModule>
}
 8002c20:	bd10      	pop	{r4, pc}
            return -1;
 8002c22:	f04f 30ff 	mov.w	r0, #4294967295
 8002c26:	e7fb      	b.n	8002c20 <SPI_WIFI_Init+0x68>
 8002c28:	240050ec 	.word	0x240050ec
 8002c2c:	40003800 	.word	0x40003800

08002c30 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_rx_event)
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_SPI_RxCpltCallback+0x10>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b113      	cbz	r3, 8002c3c <HAL_SPI_RxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_rx_sem);
        spi_rx_event = 0;
 8002c36:	4b02      	ldr	r3, [pc, #8]	; (8002c40 <HAL_SPI_RxCpltCallback+0x10>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
    }
}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	24005824 	.word	0x24005824

08002c44 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_tx_event)
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_SPI_TxCpltCallback+0x10>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b113      	cbz	r3, 8002c50 <HAL_SPI_TxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_tx_sem);
        spi_tx_event = 0;
 8002c4a:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <HAL_SPI_TxCpltCallback+0x10>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
    }
}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	24005828 	.word	0x24005828

08002c58 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
    if (cmddata_rdy_rising_event == 1)
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <SPI_WIFI_ISR+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d000      	beq.n	8002c62 <SPI_WIFI_ISR+0xa>
    {
        SEM_SIGNAL(cmddata_rdy_rising_sem);
        cmddata_rdy_rising_event = 0;
    }
}
 8002c60:	4770      	bx	lr
        cmddata_rdy_rising_event = 0;
 8002c62:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <SPI_WIFI_ISR+0x14>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
}
 8002c68:	e7fa      	b.n	8002c60 <SPI_WIFI_ISR+0x8>
 8002c6a:	bf00      	nop
 8002c6c:	2400581c 	.word	0x2400581c

08002c70 <wait_cmddata_rdy_high>:
{
 8002c70:	b538      	push	{r3, r4, r5, lr}
 8002c72:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002c74:	f007 fd34 	bl	800a6e0 <HAL_GetTick>
 8002c78:	4604      	mov	r4, r0
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002c7a:	e001      	b.n	8002c80 <wait_cmddata_rdy_high+0x10>
        SPI_WIFI_ISR();
 8002c7c:	f7ff ffec 	bl	8002c58 <SPI_WIFI_ISR>
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002c80:	2120      	movs	r1, #32
 8002c82:	4807      	ldr	r0, [pc, #28]	; (8002ca0 <wait_cmddata_rdy_high+0x30>)
 8002c84:	f008 fac8 	bl	800b218 <HAL_GPIO_ReadPin>
 8002c88:	2801      	cmp	r0, #1
 8002c8a:	d007      	beq.n	8002c9c <wait_cmddata_rdy_high+0x2c>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002c8c:	f007 fd28 	bl	800a6e0 <HAL_GetTick>
 8002c90:	1b00      	subs	r0, r0, r4
 8002c92:	42a8      	cmp	r0, r5
 8002c94:	d9f2      	bls.n	8002c7c <wait_cmddata_rdy_high+0xc>
            return -1;
 8002c96:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9a:	e000      	b.n	8002c9e <wait_cmddata_rdy_high+0x2e>
    return 0;
 8002c9c:	2000      	movs	r0, #0
}
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	58022000 	.word	0x58022000

08002ca4 <SPI_WIFI_SendData>:
{
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	4606      	mov	r6, r0
 8002caa:	460c      	mov	r4, r1
 8002cac:	4615      	mov	r5, r2
    if (wait_cmddata_rdy_high(timeout) < 0)
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f7ff ffde 	bl	8002c70 <wait_cmddata_rdy_high>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	db47      	blt.n	8002d48 <SPI_WIFI_SendData+0xa4>
    cmddata_rdy_rising_event = 1;
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <SPI_WIFI_SendData+0xac>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
    WIFI_ENABLE_NSS();
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cc4:	4823      	ldr	r0, [pc, #140]	; (8002d54 <SPI_WIFI_SendData+0xb0>)
 8002cc6:	f008 faae 	bl	800b226 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 8002cca:	200a      	movs	r0, #10
 8002ccc:	f7ff fd76 	bl	80027bc <SPI_WIFI_DelayUs>
    if (len > 1)
 8002cd0:	2c01      	cmp	r4, #1
 8002cd2:	d805      	bhi.n	8002ce0 <SPI_WIFI_SendData+0x3c>
    if (len & 1)
 8002cd4:	f014 0f01 	tst.w	r4, #1
 8002cd8:	d119      	bne.n	8002d0e <SPI_WIFI_SendData+0x6a>
    return len;
 8002cda:	b220      	sxth	r0, r4
}
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
        spi_tx_event = 1;
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <SPI_WIFI_SendData+0xb4>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)pdata, len / 2) != HAL_OK)
 8002ce6:	fa24 f202 	lsr.w	r2, r4, r2
 8002cea:	4631      	mov	r1, r6
 8002cec:	481b      	ldr	r0, [pc, #108]	; (8002d5c <SPI_WIFI_SendData+0xb8>)
 8002cee:	f00b fe67 	bl	800e9c0 <HAL_SPI_Transmit_IT>
 8002cf2:	b918      	cbnz	r0, 8002cfc <SPI_WIFI_SendData+0x58>
        wait_spi_tx_event(timeout);
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	f7ff fdb9 	bl	800286c <wait_spi_tx_event>
 8002cfa:	e7eb      	b.n	8002cd4 <SPI_WIFI_SendData+0x30>
            WIFI_DISABLE_NSS();
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d02:	4814      	ldr	r0, [pc, #80]	; (8002d54 <SPI_WIFI_SendData+0xb0>)
 8002d04:	f008 fa8f 	bl	800b226 <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	e7e6      	b.n	8002cdc <SPI_WIFI_SendData+0x38>
        Padding[0] = pdata[len - 1];
 8002d0e:	1930      	adds	r0, r6, r4
 8002d10:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8002d14:	f88d 3004 	strb.w	r3, [sp, #4]
        Padding[1] = '\n';
 8002d18:	230a      	movs	r3, #10
 8002d1a:	f88d 3005 	strb.w	r3, [sp, #5]
        spi_tx_event = 1;
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <SPI_WIFI_SendData+0xb4>)
 8002d22:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, Padding, 1) != HAL_OK)
 8002d24:	a901      	add	r1, sp, #4
 8002d26:	480d      	ldr	r0, [pc, #52]	; (8002d5c <SPI_WIFI_SendData+0xb8>)
 8002d28:	f00b fe4a 	bl	800e9c0 <HAL_SPI_Transmit_IT>
 8002d2c:	b918      	cbnz	r0, 8002d36 <SPI_WIFI_SendData+0x92>
        wait_spi_tx_event(timeout);
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f7ff fd9c 	bl	800286c <wait_spi_tx_event>
 8002d34:	e7d1      	b.n	8002cda <SPI_WIFI_SendData+0x36>
            WIFI_DISABLE_NSS();
 8002d36:	2201      	movs	r2, #1
 8002d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <SPI_WIFI_SendData+0xb0>)
 8002d3e:	f008 fa72 	bl	800b226 <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002d42:	f04f 30ff 	mov.w	r0, #4294967295
 8002d46:	e7c9      	b.n	8002cdc <SPI_WIFI_SendData+0x38>
        return ES_WIFI_ERROR_SPI_FAILED;
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	e7c6      	b.n	8002cdc <SPI_WIFI_SendData+0x38>
 8002d4e:	bf00      	nop
 8002d50:	2400581c 	.word	0x2400581c
 8002d54:	58020000 	.word	0x58020000
 8002d58:	24005828 	.word	0x24005828
 8002d5c:	240050ec 	.word	0x240050ec

08002d60 <wifi_probe>:
  * @brief  probe function to register wifi to connectivity framwotk
  * @param  None
  * @retval None
  */
int32_t wifi_probe(void **ll_drv_context)
{
 8002d60:	b510      	push	{r4, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	4604      	mov	r4, r0
    if (ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <wifi_probe+0x2c>)
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <wifi_probe+0x30>)
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <wifi_probe+0x34>)
 8002d70:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <wifi_probe+0x38>)
 8002d72:	490a      	ldr	r1, [pc, #40]	; (8002d9c <wifi_probe+0x3c>)
 8002d74:	480a      	ldr	r0, [pc, #40]	; (8002da0 <wifi_probe+0x40>)
 8002d76:	f005 f8af 	bl	8007ed8 <ES_WIFI_RegisterBusIO>
 8002d7a:	b918      	cbnz	r0, 8002d84 <wifi_probe+0x24>
                              SPI_WIFI_DeInit,
                              HAL_Delay,
                              SPI_WIFI_SendData,
                              SPI_WIFI_ReceiveData) == 0)
    {
        *ll_drv_context = &EsWifiObj;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <wifi_probe+0x40>)
 8002d7e:	6023      	str	r3, [r4, #0]
        return 0;
    }
    return -1;
}
 8002d80:	b002      	add	sp, #8
 8002d82:	bd10      	pop	{r4, pc}
    return -1;
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	e7fa      	b.n	8002d80 <wifi_probe+0x20>
 8002d8a:	bf00      	nop
 8002d8c:	08002991 	.word	0x08002991
 8002d90:	08002ca5 	.word	0x08002ca5
 8002d94:	0800a6ed 	.word	0x0800a6ed
 8002d98:	08002a61 	.word	0x08002a61
 8002d9c:	08002bb9 	.word	0x08002bb9
 8002da0:	24005174 	.word	0x24005174

08002da4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_5)
 8002da4:	2820      	cmp	r0, #32
 8002da6:	d000      	beq.n	8002daa <HAL_GPIO_EXTI_Callback+0x6>
  {
    cmddata_rdy_rising_event = 0;
  }
}
 8002da8:	4770      	bx	lr
    cmddata_rdy_rising_event = 0;
 8002daa:	4b02      	ldr	r3, [pc, #8]	; (8002db4 <HAL_GPIO_EXTI_Callback+0x10>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
}
 8002db0:	e7fa      	b.n	8002da8 <HAL_GPIO_EXTI_Callback+0x4>
 8002db2:	bf00      	nop
 8002db4:	2400581c 	.word	0x2400581c

08002db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db8:	b500      	push	{lr}
 8002dba:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_MspInit+0x30>)
 8002dbe:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8002dc2:	f042 0202 	orr.w	r2, r2, #2
 8002dc6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8002dca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	210f      	movs	r1, #15
 8002dda:	f06f 0001 	mvn.w	r0, #1
 8002dde:	f007 fcab 	bl	800a738 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de2:	b003      	add	sp, #12
 8002de4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002de8:	58024400 	.word	0x58024400

08002dec <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002dec:	6802      	ldr	r2, [r0, #0]
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_CRC_MspInit+0x2c>)
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d000      	beq.n	8002df6 <HAL_CRC_MspInit+0xa>
 8002df4:	4770      	bx	lr
{
 8002df6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_CRC_MspInit+0x30>)
 8002dfa:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e02:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8002e06:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e12:	b002      	add	sp, #8
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40023000 	.word	0x40023000
 8002e1c:	58024400 	.word	0x58024400

08002e20 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8002e20:	6802      	ldr	r2, [r0, #0]
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_DMA2D_MspInit+0x40>)
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d000      	beq.n	8002e2a <HAL_DMA2D_MspInit+0xa>
 8002e28:	4770      	bx	lr
{
 8002e2a:	b500      	push	{lr}
 8002e2c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_DMA2D_MspInit+0x44>)
 8002e30:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002e34:	f042 0210 	orr.w	r2, r2, #16
 8002e38:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8002e3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2105      	movs	r1, #5
 8002e4c:	205a      	movs	r0, #90	; 0x5a
 8002e4e:	f007 fc73 	bl	800a738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002e52:	205a      	movs	r0, #90	; 0x5a
 8002e54:	f007 fca6 	bl	800a7a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002e58:	b003      	add	sp, #12
 8002e5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e5e:	bf00      	nop
 8002e60:	52001000 	.word	0x52001000
 8002e64:	58024400 	.word	0x58024400

08002e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	b0b6      	sub	sp, #216	; 0xd8
 8002e6c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6e:	2100      	movs	r1, #0
 8002e70:	9131      	str	r1, [sp, #196]	; 0xc4
 8002e72:	9132      	str	r1, [sp, #200]	; 0xc8
 8002e74:	9133      	str	r1, [sp, #204]	; 0xcc
 8002e76:	9134      	str	r1, [sp, #208]	; 0xd0
 8002e78:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e7a:	22b8      	movs	r2, #184	; 0xb8
 8002e7c:	a803      	add	r0, sp, #12
 8002e7e:	f020 fbf7 	bl	8023670 <memset>
  if(hi2c->Instance==I2C4)
 8002e82:	6822      	ldr	r2, [r4, #0]
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_I2C_MspInit+0x8c>)
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002e8a:	b036      	add	sp, #216	; 0xd8
 8002e8c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002e8e:	2310      	movs	r3, #16
 8002e90:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e92:	a803      	add	r0, sp, #12
 8002e94:	f00a fc42 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 8002e98:	bb40      	cbnz	r0, 8002eec <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9a:	4c17      	ldr	r4, [pc, #92]	; (8002ef8 <HAL_I2C_MspInit+0x90>)
 8002e9c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002ea0:	f043 0308 	orr.w	r3, r3, #8
 8002ea4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002ea8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002eb4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002eb8:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eba:	2312      	movs	r3, #18
 8002ebc:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eca:	a931      	add	r1, sp, #196	; 0xc4
 8002ecc:	480b      	ldr	r0, [pc, #44]	; (8002efc <HAL_I2C_MspInit+0x94>)
 8002ece:	f007 ffeb 	bl	800aea8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002ed2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eda:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8002ede:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	9b02      	ldr	r3, [sp, #8]
}
 8002eea:	e7ce      	b.n	8002e8a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8002eec:	f7ff fc4e 	bl	800278c <Error_Handler>
 8002ef0:	e7d3      	b.n	8002e9a <HAL_I2C_MspInit+0x32>
 8002ef2:	bf00      	nop
 8002ef4:	58001c00 	.word	0x58001c00
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	58020c00 	.word	0x58020c00

08002f00 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8002f00:	6802      	ldr	r2, [r0, #0]
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_I2C_MspDeInit+0x34>)
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d000      	beq.n	8002f0a <HAL_I2C_MspDeInit+0xa>
 8002f08:	4770      	bx	lr
{
 8002f0a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <HAL_I2C_MspDeInit+0x38>)
 8002f0e:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8002f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f16:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8002f1a:	4c08      	ldr	r4, [pc, #32]	; (8002f3c <HAL_I2C_MspDeInit+0x3c>)
 8002f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f20:	4620      	mov	r0, r4
 8002f22:	f008 f8d1 	bl	800b0c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8002f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f008 f8cc 	bl	800b0c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8002f30:	bd10      	pop	{r4, pc}
 8002f32:	bf00      	nop
 8002f34:	58001c00 	.word	0x58001c00
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	58020c00 	.word	0x58020c00

08002f40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	b0b8      	sub	sp, #224	; 0xe0
 8002f44:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f46:	2100      	movs	r1, #0
 8002f48:	9133      	str	r1, [sp, #204]	; 0xcc
 8002f4a:	9134      	str	r1, [sp, #208]	; 0xd0
 8002f4c:	9135      	str	r1, [sp, #212]	; 0xd4
 8002f4e:	9136      	str	r1, [sp, #216]	; 0xd8
 8002f50:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f52:	22b8      	movs	r2, #184	; 0xb8
 8002f54:	a805      	add	r0, sp, #20
 8002f56:	f020 fb8b 	bl	8023670 <memset>
  if(hltdc->Instance==LTDC)
 8002f5a:	6822      	ldr	r2, [r4, #0]
 8002f5c:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_LTDC_MspInit+0x114>)
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f62:	b038      	add	sp, #224	; 0xe0
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002f66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f6a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8002f6c:	2318      	movs	r3, #24
 8002f6e:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8002f70:	23c9      	movs	r3, #201	; 0xc9
 8002f72:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002f74:	2302      	movs	r3, #2
 8002f76:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002f78:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8002f7a:	2315      	movs	r3, #21
 8002f7c:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f82:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8002f84:	f241 5356 	movw	r3, #5462	; 0x1556
 8002f88:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f8a:	a805      	add	r0, sp, #20
 8002f8c:	f00a fbc6 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	d15c      	bne.n	800304e <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_LTDC_MspInit+0x118>)
 8002f96:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002f9a:	f042 0208 	orr.w	r2, r2, #8
 8002f9e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8002fa2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002fa6:	f002 0208 	and.w	r2, r2, #8
 8002faa:	9201      	str	r2, [sp, #4]
 8002fac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002fae:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fb6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fba:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fbe:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002fc2:	9202      	str	r2, [sp, #8]
 8002fc4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002fc6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fd2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fd6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002fda:	9203      	str	r2, [sp, #12]
 8002fdc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fde:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	9304      	str	r3, [sp, #16]
 8002ff4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8002ff6:	23ff      	movs	r3, #255	; 0xff
 8002ff8:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2602      	movs	r6, #2
 8002ffc:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2400      	movs	r4, #0
 8003000:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003004:	250e      	movs	r5, #14
 8003006:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003008:	a933      	add	r1, sp, #204	; 0xcc
 800300a:	4814      	ldr	r0, [pc, #80]	; (800305c <HAL_LTDC_MspInit+0x11c>)
 800300c:	f007 ff4c 	bl	800aea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8003010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003014:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800301c:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800301e:	a933      	add	r1, sp, #204	; 0xcc
 8003020:	480f      	ldr	r0, [pc, #60]	; (8003060 <HAL_LTDC_MspInit+0x120>)
 8003022:	f007 ff41 	bl	800aea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8003026:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800302a:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302c:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003032:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003034:	a933      	add	r1, sp, #204	; 0xcc
 8003036:	480b      	ldr	r0, [pc, #44]	; (8003064 <HAL_LTDC_MspInit+0x124>)
 8003038:	f007 ff36 	bl	800aea8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800303c:	4622      	mov	r2, r4
 800303e:	2105      	movs	r1, #5
 8003040:	2058      	movs	r0, #88	; 0x58
 8003042:	f007 fb79 	bl	800a738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003046:	2058      	movs	r0, #88	; 0x58
 8003048:	f007 fbac 	bl	800a7a4 <HAL_NVIC_EnableIRQ>
}
 800304c:	e789      	b.n	8002f62 <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 800304e:	f7ff fb9d 	bl	800278c <Error_Handler>
 8003052:	e79f      	b.n	8002f94 <HAL_LTDC_MspInit+0x54>
 8003054:	50001000 	.word	0x50001000
 8003058:	58024400 	.word	0x58024400
 800305c:	58022800 	.word	0x58022800
 8003060:	58022400 	.word	0x58022400
 8003064:	58022000 	.word	0x58022000

08003068 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003068:	b510      	push	{r4, lr}
 800306a:	b0b0      	sub	sp, #192	; 0xc0
 800306c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800306e:	22b8      	movs	r2, #184	; 0xb8
 8003070:	2100      	movs	r1, #0
 8003072:	a802      	add	r0, sp, #8
 8003074:	f020 fafc 	bl	8023670 <memset>
  if(hospi->Instance==OCTOSPI1)
 8003078:	6822      	ldr	r2, [r4, #0]
 800307a:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HAL_OSPI_MspInit+0x8c>)
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003080:	b030      	add	sp, #192	; 0xc0
 8003082:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003084:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003088:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 800308a:	2318      	movs	r3, #24
 800308c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 800308e:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003092:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003094:	2302      	movs	r3, #2
 8003096:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003098:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800309a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800309c:	2320      	movs	r3, #32
 800309e:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80030a0:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030a2:	a802      	add	r0, sp, #8
 80030a4:	f00a fb3a 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 80030a8:	bb08      	cbnz	r0, 80030ee <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <HAL_OSPI_MspInit+0x90>)
 80030ac:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030b0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80030b4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80030b8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030c0:	9200      	str	r2, [sp, #0]
 80030c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80030c4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030cc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80030d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80030d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80030dc:	2200      	movs	r2, #0
 80030de:	2105      	movs	r1, #5
 80030e0:	205c      	movs	r0, #92	; 0x5c
 80030e2:	f007 fb29 	bl	800a738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80030e6:	205c      	movs	r0, #92	; 0x5c
 80030e8:	f007 fb5c 	bl	800a7a4 <HAL_NVIC_EnableIRQ>
}
 80030ec:	e7c8      	b.n	8003080 <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 80030ee:	f7ff fb4d 	bl	800278c <Error_Handler>
 80030f2:	e7da      	b.n	80030aa <HAL_OSPI_MspInit+0x42>
 80030f4:	52005000 	.word	0x52005000
 80030f8:	58024400 	.word	0x58024400

080030fc <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80030fc:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 80030fe:	6802      	ldr	r2, [r0, #0]
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_OSPI_MspDeInit+0x30>)
 8003102:	429a      	cmp	r2, r3
 8003104:	d000      	beq.n	8003108 <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8003106:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_OSPI_MspDeInit+0x34>)
 800310a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800310e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003112:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8003116:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800311a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800311e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8003122:	205c      	movs	r0, #92	; 0x5c
 8003124:	f007 fb4c 	bl	800a7c0 <HAL_NVIC_DisableIRQ>
}
 8003128:	e7ed      	b.n	8003106 <HAL_OSPI_MspDeInit+0xa>
 800312a:	bf00      	nop
 800312c:	52005000 	.word	0x52005000
 8003130:	58024400 	.word	0x58024400

08003134 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	b0b6      	sub	sp, #216	; 0xd8
 8003138:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313a:	2100      	movs	r1, #0
 800313c:	9131      	str	r1, [sp, #196]	; 0xc4
 800313e:	9132      	str	r1, [sp, #200]	; 0xc8
 8003140:	9133      	str	r1, [sp, #204]	; 0xcc
 8003142:	9134      	str	r1, [sp, #208]	; 0xd0
 8003144:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003146:	22b8      	movs	r2, #184	; 0xb8
 8003148:	a803      	add	r0, sp, #12
 800314a:	f020 fa91 	bl	8023670 <memset>
  if(hspi->Instance==SPI2)
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_SPI_MspInit+0xc8>)
 8003152:	429a      	cmp	r2, r3
 8003154:	d001      	beq.n	800315a <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003156:	b036      	add	sp, #216	; 0xd8
 8003158:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800315a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800315e:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003160:	a803      	add	r0, sp, #12
 8003162:	f00a fadb 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 8003166:	2800      	cmp	r0, #0
 8003168:	d145      	bne.n	80031f6 <HAL_SPI_MspInit+0xc2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_SPI_MspInit+0xcc>)
 800316c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003170:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003174:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8003178:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800317c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003180:	9200      	str	r2, [sp, #0]
 8003182:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003190:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003194:	f002 0201 	and.w	r2, r2, #1
 8003198:	9201      	str	r2, [sp, #4]
 800319a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800319c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80031a0:	f042 0204 	orr.w	r2, r2, #4
 80031a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80031a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	9302      	str	r3, [sp, #8]
 80031b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b8:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2602      	movs	r6, #2
 80031bc:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2400      	movs	r4, #0
 80031c0:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031c4:	2505      	movs	r5, #5
 80031c6:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	a931      	add	r1, sp, #196	; 0xc4
 80031ca:	480e      	ldr	r0, [pc, #56]	; (8003204 <HAL_SPI_MspInit+0xd0>)
 80031cc:	f007 fe6c 	bl	800aea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031d0:	230c      	movs	r3, #12
 80031d2:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d4:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d8:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031da:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031dc:	a931      	add	r1, sp, #196	; 0xc4
 80031de:	480a      	ldr	r0, [pc, #40]	; (8003208 <HAL_SPI_MspInit+0xd4>)
 80031e0:	f007 fe62 	bl	800aea8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80031e4:	4622      	mov	r2, r4
 80031e6:	4621      	mov	r1, r4
 80031e8:	2024      	movs	r0, #36	; 0x24
 80031ea:	f007 faa5 	bl	800a738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80031ee:	2024      	movs	r0, #36	; 0x24
 80031f0:	f007 fad8 	bl	800a7a4 <HAL_NVIC_EnableIRQ>
}
 80031f4:	e7af      	b.n	8003156 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 80031f6:	f7ff fac9 	bl	800278c <Error_Handler>
 80031fa:	e7b6      	b.n	800316a <HAL_SPI_MspInit+0x36>
 80031fc:	40003800 	.word	0x40003800
 8003200:	58024400 	.word	0x58024400
 8003204:	58020000 	.word	0x58020000
 8003208:	58020800 	.word	0x58020800

0800320c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800320c:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI2)
 800320e:	6802      	ldr	r2, [r0, #0]
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_SPI_MspDeInit+0x34>)
 8003212:	429a      	cmp	r2, r3
 8003214:	d000      	beq.n	8003218 <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8003216:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_SPI_MspDeInit+0x38>)
 800321a:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 800321e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003222:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8003226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800322a:	4807      	ldr	r0, [pc, #28]	; (8003248 <HAL_SPI_MspDeInit+0x3c>)
 800322c:	f007 ff4c 	bl	800b0c8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8003230:	210c      	movs	r1, #12
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <HAL_SPI_MspDeInit+0x40>)
 8003234:	f007 ff48 	bl	800b0c8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8003238:	2024      	movs	r0, #36	; 0x24
 800323a:	f007 fac1 	bl	800a7c0 <HAL_NVIC_DisableIRQ>
}
 800323e:	e7ea      	b.n	8003216 <HAL_SPI_MspDeInit+0xa>
 8003240:	40003800 	.word	0x40003800
 8003244:	58024400 	.word	0x58024400
 8003248:	58020000 	.word	0x58020000
 800324c:	58020800 	.word	0x58020800

08003250 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003250:	280f      	cmp	r0, #15
 8003252:	d901      	bls.n	8003258 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8003254:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8003256:	4770      	bx	lr
{
 8003258:	b510      	push	{r4, lr}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800325e:	2200      	movs	r2, #0
 8003260:	4601      	mov	r1, r0
 8003262:	2036      	movs	r0, #54	; 0x36
 8003264:	f007 fa68 	bl	800a738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003268:	2036      	movs	r0, #54	; 0x36
 800326a:	f007 fa9b 	bl	800a7a4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <HAL_InitTick+0x88>)
 8003270:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003272:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_InitTick+0x8c>)
 8003274:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003278:	f042 0210 	orr.w	r2, r2, #16
 800327c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8003280:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800328c:	a901      	add	r1, sp, #4
 800328e:	a802      	add	r0, sp, #8
 8003290:	f00a f90e 	bl	800d4b0 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003294:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003296:	b9bb      	cbnz	r3, 80032c8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003298:	f00a f8e6 	bl	800d468 <HAL_RCC_GetPCLK1Freq>
 800329c:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800329e:	4810      	ldr	r0, [pc, #64]	; (80032e0 <HAL_InitTick+0x90>)
 80032a0:	fba0 2303 	umull	r2, r3, r0, r3
 80032a4:	0c9b      	lsrs	r3, r3, #18
 80032a6:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 80032a8:	480e      	ldr	r0, [pc, #56]	; (80032e4 <HAL_InitTick+0x94>)
 80032aa:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <HAL_InitTick+0x98>)
 80032ac:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032b2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032b4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ba:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80032bc:	f00c f85c 	bl	800f378 <HAL_TIM_Base_Init>
 80032c0:	b130      	cbz	r0, 80032d0 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80032c2:	2001      	movs	r0, #1
}
 80032c4:	b00a      	add	sp, #40	; 0x28
 80032c6:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032c8:	f00a f8ce 	bl	800d468 <HAL_RCC_GetPCLK1Freq>
 80032cc:	0043      	lsls	r3, r0, #1
 80032ce:	e7e6      	b.n	800329e <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80032d0:	4804      	ldr	r0, [pc, #16]	; (80032e4 <HAL_InitTick+0x94>)
 80032d2:	f00b feb5 	bl	800f040 <HAL_TIM_Base_Start_IT>
 80032d6:	e7f5      	b.n	80032c4 <HAL_InitTick+0x74>
 80032d8:	2400007c 	.word	0x2400007c
 80032dc:	58024400 	.word	0x58024400
 80032e0:	431bde83 	.word	0x431bde83
 80032e4:	2400582c 	.word	0x2400582c
 80032e8:	40001000 	.word	0x40001000

080032ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032ec:	4770      	bx	lr

080032ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ee:	e7fe      	b.n	80032ee <HardFault_Handler>

080032f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <MemManage_Handler>

080032f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032f2:	e7fe      	b.n	80032f2 <BusFault_Handler>

080032f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032f4:	e7fe      	b.n	80032f4 <UsageFault_Handler>

080032f6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f6:	4770      	bx	lr

080032f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_DATRDY_Pin);
 80032fa:	2020      	movs	r0, #32
 80032fc:	f007 ffa2 	bl	800b244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003300:	bd08      	pop	{r3, pc}
	...

08003304 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003306:	4802      	ldr	r0, [pc, #8]	; (8003310 <SPI2_IRQHandler+0xc>)
 8003308:	f00b fd6c 	bl	800ede4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800330c:	bd08      	pop	{r3, pc}
 800330e:	bf00      	nop
 8003310:	240050ec 	.word	0x240050ec

08003314 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_Pin);
 8003316:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800331a:	f007 ff93 	bl	800b244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800331e:	bd08      	pop	{r3, pc}

08003320 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003320:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003322:	4802      	ldr	r0, [pc, #8]	; (800332c <TIM6_DAC_IRQHandler+0xc>)
 8003324:	f00b fed8 	bl	800f0d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003328:	bd08      	pop	{r3, pc}
 800332a:	bf00      	nop
 800332c:	2400582c 	.word	0x2400582c

08003330 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003330:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003332:	4802      	ldr	r0, [pc, #8]	; (800333c <LTDC_IRQHandler+0xc>)
 8003334:	f008 fd32 	bl	800bd9c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003338:	bd08      	pop	{r3, pc}
 800333a:	bf00      	nop
 800333c:	24004fe8 	.word	0x24004fe8

08003340 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003340:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003342:	4802      	ldr	r0, [pc, #8]	; (800334c <DMA2D_IRQHandler+0xc>)
 8003344:	f007 fc90 	bl	800ac68 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003348:	bd08      	pop	{r3, pc}
 800334a:	bf00      	nop
 800334c:	24004f34 	.word	0x24004f34

08003350 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003350:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003352:	4802      	ldr	r0, [pc, #8]	; (800335c <OCTOSPI1_IRQHandler+0xc>)
 8003354:	f009 f92c 	bl	800c5b0 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8003358:	bd08      	pop	{r3, pc}
 800335a:	bf00      	nop
 800335c:	24005090 	.word	0x24005090

08003360 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003360:	2001      	movs	r0, #1
 8003362:	4770      	bx	lr

08003364 <_kill>:

int _kill(int pid, int sig)
{
 8003364:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003366:	f020 f81f 	bl	80233a8 <__errno>
 800336a:	2316      	movs	r3, #22
 800336c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	bd08      	pop	{r3, pc}

08003374 <_exit>:

void _exit (int status)
{
 8003374:	b508      	push	{r3, lr}
	_kill(status, -1);
 8003376:	f04f 31ff 	mov.w	r1, #4294967295
 800337a:	f7ff fff3 	bl	8003364 <_kill>
	while (1) {}		/* Make sure we hang here */
 800337e:	e7fe      	b.n	800337e <_exit+0xa>

08003380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	460c      	mov	r4, r1
 8003384:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003386:	2500      	movs	r5, #0
 8003388:	e006      	b.n	8003398 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800338a:	f3af 8000 	nop.w
 800338e:	4621      	mov	r1, r4
 8003390:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003394:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8003396:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003398:	42b5      	cmp	r5, r6
 800339a:	dbf6      	blt.n	800338a <_read+0xa>
	}

return len;
}
 800339c:	4630      	mov	r0, r6
 800339e:	bd70      	pop	{r4, r5, r6, pc}

080033a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	460c      	mov	r4, r1
 80033a4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a6:	2500      	movs	r5, #0
 80033a8:	e004      	b.n	80033b4 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80033aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80033ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b2:	3501      	adds	r5, #1
 80033b4:	42b5      	cmp	r5, r6
 80033b6:	dbf8      	blt.n	80033aa <_write+0xa>
	}
	return len;
}
 80033b8:	4630      	mov	r0, r6
 80033ba:	bd70      	pop	{r4, r5, r6, pc}

080033bc <_close>:

int _close(int file)
{
	return -1;
}
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	4770      	bx	lr

080033c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80033c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033c6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80033c8:	2000      	movs	r0, #0
 80033ca:	4770      	bx	lr

080033cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80033cc:	2001      	movs	r0, #1
 80033ce:	4770      	bx	lr

080033d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80033d0:	2000      	movs	r0, #0
 80033d2:	4770      	bx	lr

080033d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80033d4:	b508      	push	{r3, lr}
 80033d6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033d8:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <_sbrk+0x34>)
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	b142      	cbz	r2, 80033f0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <_sbrk+0x34>)
 80033e0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80033e2:	4403      	add	r3, r0
 80033e4:	466a      	mov	r2, sp
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d806      	bhi.n	80033f8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80033ea:	4a07      	ldr	r2, [pc, #28]	; (8003408 <_sbrk+0x34>)
 80033ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80033ee:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80033f0:	4a05      	ldr	r2, [pc, #20]	; (8003408 <_sbrk+0x34>)
 80033f2:	4906      	ldr	r1, [pc, #24]	; (800340c <_sbrk+0x38>)
 80033f4:	6011      	str	r1, [r2, #0]
 80033f6:	e7f2      	b.n	80033de <_sbrk+0xa>
		errno = ENOMEM;
 80033f8:	f01f ffd6 	bl	80233a8 <__errno>
 80033fc:	230c      	movs	r3, #12
 80033fe:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003400:	f04f 30ff 	mov.w	r0, #4294967295
 8003404:	e7f3      	b.n	80033ee <_sbrk+0x1a>
 8003406:	bf00      	nop
 8003408:	24005878 	.word	0x24005878
 800340c:	24010198 	.word	0x24010198

08003410 <wifi_networkInit>:
  * @brief  Network interface initialization
  * @param  none
  * @retval 0 in case of success, an error code otherwise
  */
static int wifi_networkInit(void)
{
 8003410:	b510      	push	{r4, lr}
  if (net_if_init(&netif, es_wifi_driver_ptr, &net_handler) != NET_OK)
 8003412:	4a10      	ldr	r2, [pc, #64]	; (8003454 <wifi_networkInit+0x44>)
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <wifi_networkInit+0x48>)
 8003416:	6819      	ldr	r1, [r3, #0]
 8003418:	4810      	ldr	r0, [pc, #64]	; (800345c <wifi_networkInit+0x4c>)
 800341a:	f00e fd59 	bl	8011ed0 <net_if_init>
 800341e:	b998      	cbnz	r0, 8003448 <wifi_networkInit+0x38>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_INITIALIZED,STATE_TRANSITION_TIMEOUT);
 8003420:	4c0e      	ldr	r4, [pc, #56]	; (800345c <wifi_networkInit+0x4c>)
 8003422:	f242 7210 	movw	r2, #10000	; 0x2710
 8003426:	2101      	movs	r1, #1
 8003428:	4620      	mov	r0, r4
 800342a:	f00e fd2a 	bl	8011e82 <net_if_wait_state>
  if ( net_if_start (&netif) != NET_OK )
 800342e:	4620      	mov	r0, r4
 8003430:	f00e fd63 	bl	8011efa <net_if_start>
 8003434:	4604      	mov	r4, r0
 8003436:	b950      	cbnz	r0, 800344e <wifi_networkInit+0x3e>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_READY,STATE_TRANSITION_TIMEOUT);
 8003438:	f242 7210 	movw	r2, #10000	; 0x2710
 800343c:	2103      	movs	r1, #3
 800343e:	4807      	ldr	r0, [pc, #28]	; (800345c <wifi_networkInit+0x4c>)
 8003440:	f00e fd1f 	bl	8011e82 <net_if_wait_state>

  return 0;
}
 8003444:	4620      	mov	r0, r4
 8003446:	bd10      	pop	{r4, pc}
    return -1;
 8003448:	f04f 34ff 	mov.w	r4, #4294967295
 800344c:	e7fa      	b.n	8003444 <wifi_networkInit+0x34>
    return -1;
 800344e:	f04f 34ff 	mov.w	r4, #4294967295
 8003452:	e7f7      	b.n	8003444 <wifi_networkInit+0x34>
 8003454:	24005a84 	.word	0x24005a84
 8003458:	2400000c 	.word	0x2400000c
 800345c:	24005a8c 	.word	0x24005a8c

08003460 <wifi_initialise>:
  * @brief  Initializes module wifi network interface
  * @param  none
  * @retval none
  */
void wifi_initialise(void)
{
 8003460:	b508      	push	{r3, lr}
    wifi_networkInit();
 8003462:	f7ff ffd5 	bl	8003410 <wifi_networkInit>
}
 8003466:	bd08      	pop	{r3, pc}

08003468 <wifi_scan>:
  * @brief  Get available access points
  * @param  APs: pointer Access points structure
  * @retval ES Wifi status
  */
int32_t wifi_scan(net_wifi_scan_results_t *APs)
{
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	4604      	mov	r4, r0
  int32_t ret;
  ret = net_wifi_scan(&netif,NET_WIFI_SCAN_PASSIVE,NULL);
 800346c:	2200      	movs	r2, #0
 800346e:	4611      	mov	r1, r2
 8003470:	4807      	ldr	r0, [pc, #28]	; (8003490 <wifi_scan+0x28>)
 8003472:	f00e fc99 	bl	8011da8 <net_wifi_scan>
  if (ret == NET_OK)
 8003476:	4605      	mov	r5, r0
 8003478:	b108      	cbz	r0, 800347e <wifi_scan+0x16>
  {
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
    if (ret > 0) ret= NET_OK;
  }
  return ret;
}
 800347a:	4628      	mov	r0, r5
 800347c:	bd38      	pop	{r3, r4, r5, pc}
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 800347e:	220a      	movs	r2, #10
 8003480:	4621      	mov	r1, r4
 8003482:	4803      	ldr	r0, [pc, #12]	; (8003490 <wifi_scan+0x28>)
 8003484:	f00e fcaa 	bl	8011ddc <net_wifi_get_scan_results>
    if (ret > 0) ret= NET_OK;
 8003488:	2800      	cmp	r0, #0
 800348a:	dcf6      	bgt.n	800347a <wifi_scan+0x12>
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 800348c:	4605      	mov	r5, r0
  return ret;
 800348e:	e7f4      	b.n	800347a <wifi_scan+0x12>
 8003490:	24005a8c 	.word	0x24005a8c

08003494 <wifi_connect>:
  * @param  password:  access point password
  * @param  encryption : security mode
  * @retval 0 in case of success, an error code otherwise
  */
int8_t wifi_connect(char *ssid, uint8_t *password, int32_t encryption )
{  
 8003494:	b500      	push	{lr}
 8003496:	b085      	sub	sp, #20
  net_wifi_credentials_t  Credentials = 
 8003498:	9001      	str	r0, [sp, #4]
 800349a:	9102      	str	r1, [sp, #8]
 800349c:	9203      	str	r2, [sp, #12]
    (char const*) ssid,
    (char const*)password,
    encryption
  };
  
  if (net_wifi_set_credentials(&netif, &Credentials) != NET_OK)
 800349e:	a901      	add	r1, sp, #4
 80034a0:	4813      	ldr	r0, [pc, #76]	; (80034f0 <wifi_connect+0x5c>)
 80034a2:	f00e fcb1 	bl	8011e08 <net_wifi_set_credentials>
 80034a6:	b9e8      	cbnz	r0, 80034e4 <wifi_connect+0x50>
  {
    return -1;
  }
  
  if (netif.state == NET_STATE_CONNECTING )
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <wifi_connect+0x5c>)
 80034aa:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d00b      	beq.n	80034ca <wifi_connect+0x36>
  {
    netif.state = NET_STATE_CONNECTED ; 
  }
    
  if (netif.state == NET_STATE_CONNECTED ) 
 80034b2:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <wifi_connect+0x5c>)
 80034b4:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d00b      	beq.n	80034d4 <wifi_connect+0x40>
    {
      return  -1;
    }
  }
  
  if(net_if_connect (&netif) != NET_OK)
 80034bc:	480c      	ldr	r0, [pc, #48]	; (80034f0 <wifi_connect+0x5c>)
 80034be:	f00e fd21 	bl	8011f04 <net_if_connect>
 80034c2:	b990      	cbnz	r0, 80034ea <wifi_connect+0x56>
  {
    return -1;
  }

  return NET_OK;
}
 80034c4:	b005      	add	sp, #20
 80034c6:	f85d fb04 	ldr.w	pc, [sp], #4
    netif.state = NET_STATE_CONNECTED ; 
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <wifi_connect+0x5c>)
 80034cc:	2205      	movs	r2, #5
 80034ce:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80034d2:	e7ee      	b.n	80034b2 <wifi_connect+0x1e>
    if(net_if_disconnect(&netif)!= NET_OK)
 80034d4:	4806      	ldr	r0, [pc, #24]	; (80034f0 <wifi_connect+0x5c>)
 80034d6:	f00e fd1a 	bl	8011f0e <net_if_disconnect>
 80034da:	2800      	cmp	r0, #0
 80034dc:	d0ee      	beq.n	80034bc <wifi_connect+0x28>
      return  -1;
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
 80034e2:	e7ef      	b.n	80034c4 <wifi_connect+0x30>
    return -1;
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	e7ec      	b.n	80034c4 <wifi_connect+0x30>
    return -1;
 80034ea:	f04f 30ff 	mov.w	r0, #4294967295
 80034ee:	e7e9      	b.n	80034c4 <wifi_connect+0x30>
 80034f0:	24005a8c 	.word	0x24005a8c

080034f4 <esWiFi_Task>:
 * WiFi Task
 * - Handle requests from GUI task
 * - Return status to GUI task
 */
void esWiFi_Task(void *argument)
{
 80034f4:	b500      	push	{lr}
 80034f6:	b083      	sub	sp, #12
    uint8_t msg;
    uint8_t retvalue;

    // Initial scan on power up
    if(wifi_scan(&APs[0]) == NET_OK)
 80034f8:	482a      	ldr	r0, [pc, #168]	; (80035a4 <esWiFi_Task+0xb0>)
 80034fa:	f7ff ffb5 	bl	8003468 <wifi_scan>
 80034fe:	bb08      	cbnz	r0, 8003544 <esWiFi_Task+0x50>
    {
        retvalue = UPDATE_WIFI_AP_DONE;
 8003500:	2301      	movs	r3, #1
 8003502:	f88d 3006 	strb.w	r3, [sp, #6]
        osMessageQueuePut(GUI_QueueHandle, &retvalue, 0, 0);
 8003506:	2300      	movs	r3, #0
 8003508:	461a      	mov	r2, r3
 800350a:	f10d 0106 	add.w	r1, sp, #6
 800350e:	4826      	ldr	r0, [pc, #152]	; (80035a8 <esWiFi_Task+0xb4>)
 8003510:	6800      	ldr	r0, [r0, #0]
 8003512:	f00c f908 	bl	800f726 <osMessageQueuePut>
 8003516:	e015      	b.n	8003544 <esWiFi_Task+0x50>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);

        switch(msg)
        {
            case UPDATE_WIFI_AP:
                memset(&APs, 0, sizeof(APs));
 8003518:	4c22      	ldr	r4, [pc, #136]	; (80035a4 <esWiFi_Task+0xb0>)
 800351a:	f44f 7202 	mov.w	r2, #520	; 0x208
 800351e:	2100      	movs	r1, #0
 8003520:	4620      	mov	r0, r4
 8003522:	f020 f8a5 	bl	8023670 <memset>

                if(wifi_scan(&APs[0]) == NET_OK)
 8003526:	4620      	mov	r0, r4
 8003528:	f7ff ff9e 	bl	8003468 <wifi_scan>
 800352c:	b950      	cbnz	r0, 8003544 <esWiFi_Task+0x50>
                {
                    retvalue = UPDATE_WIFI_AP_DONE;
 800352e:	2301      	movs	r3, #1
 8003530:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue, 0, 0);
 8003534:	2300      	movs	r3, #0
 8003536:	461a      	mov	r2, r3
 8003538:	f10d 0106 	add.w	r1, sp, #6
 800353c:	481a      	ldr	r0, [pc, #104]	; (80035a8 <esWiFi_Task+0xb4>)
 800353e:	6800      	ldr	r0, [r0, #0]
 8003540:	f00c f8f1 	bl	800f726 <osMessageQueuePut>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	2200      	movs	r2, #0
 800354a:	f10d 0107 	add.w	r1, sp, #7
 800354e:	4817      	ldr	r0, [pc, #92]	; (80035ac <esWiFi_Task+0xb8>)
 8003550:	6800      	ldr	r0, [r0, #0]
 8003552:	f00c f928 	bl	800f7a6 <osMessageQueueGet>
        switch(msg)
 8003556:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0dc      	beq.n	8003518 <esWiFi_Task+0x24>
 800355e:	2b02      	cmp	r3, #2
 8003560:	d1f0      	bne.n	8003544 <esWiFi_Task+0x50>
                }
            break;

            case CONNECTING_TO_WIFI:
                if(wifi_connect((char*)ssid_ascii, password_ascii, net_wifi_string_to_security((char*)encryption_ascii)) != NET_OK)
 8003562:	4813      	ldr	r0, [pc, #76]	; (80035b0 <esWiFi_Task+0xbc>)
 8003564:	f00e fb5e 	bl	8011c24 <net_wifi_string_to_security>
 8003568:	4602      	mov	r2, r0
 800356a:	4912      	ldr	r1, [pc, #72]	; (80035b4 <esWiFi_Task+0xc0>)
 800356c:	4812      	ldr	r0, [pc, #72]	; (80035b8 <esWiFi_Task+0xc4>)
 800356e:	f7ff ff91 	bl	8003494 <wifi_connect>
 8003572:	b158      	cbz	r0, 800358c <esWiFi_Task+0x98>
                {
                    retvalue = CONNECTING_TO_WIFI_ERROR;
 8003574:	2304      	movs	r3, #4
 8003576:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 800357a:	2300      	movs	r3, #0
 800357c:	461a      	mov	r2, r3
 800357e:	f10d 0106 	add.w	r1, sp, #6
 8003582:	4809      	ldr	r0, [pc, #36]	; (80035a8 <esWiFi_Task+0xb4>)
 8003584:	6800      	ldr	r0, [r0, #0]
 8003586:	f00c f8ce 	bl	800f726 <osMessageQueuePut>
 800358a:	e7db      	b.n	8003544 <esWiFi_Task+0x50>
                }
                else
                {
                    retvalue = CONNECTING_TO_WIFI_OK;
 800358c:	2303      	movs	r3, #3
 800358e:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 8003592:	2300      	movs	r3, #0
 8003594:	461a      	mov	r2, r3
 8003596:	f10d 0106 	add.w	r1, sp, #6
 800359a:	4803      	ldr	r0, [pc, #12]	; (80035a8 <esWiFi_Task+0xb4>)
 800359c:	6800      	ldr	r0, [r0, #0]
 800359e:	f00c f8c2 	bl	800f726 <osMessageQueuePut>
 80035a2:	e7cf      	b.n	8003544 <esWiFi_Task+0x50>
 80035a4:	2400587c 	.word	0x2400587c
 80035a8:	24004f00 	.word	0x24004f00
 80035ac:	24004f08 	.word	0x24004f08
 80035b0:	240060d4 	.word	0x240060d4
 80035b4:	240060f4 	.word	0x240060f4
 80035b8:	24006134 	.word	0x24006134

080035bc <_ZN23ApplicationFontProviderD1Ev>:
 80035bc:	4a02      	ldr	r2, [pc, #8]	; (80035c8 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 80035be:	6002      	str	r2, [r0, #0]
 80035c0:	4a02      	ldr	r2, [pc, #8]	; (80035cc <_ZN23ApplicationFontProviderD1Ev+0x10>)
 80035c2:	6002      	str	r2, [r0, #0]
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	0802539c 	.word	0x0802539c
 80035cc:	08024ff8 	.word	0x08024ff8

080035d0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80035d0:	b508      	push	{r3, lr}
    switch (typography)
 80035d2:	2908      	cmp	r1, #8
 80035d4:	d82a      	bhi.n	800362c <_ZN23ApplicationFontProvider7getFontEt+0x5c>
 80035d6:	e8df f001 	tbb	[pc, r1]
 80035da:	0905      	.short	0x0905
 80035dc:	1915110d 	.word	0x1915110d
 80035e0:	211d      	.short	0x211d
 80035e2:	25          	.byte	0x25
 80035e3:	00          	.byte	0x00
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80035e4:	f000 ffee 	bl	80045c4 <_ZN17TypedTextDatabase8getFontsEv>
 80035e8:	6800      	ldr	r0, [r0, #0]
        // SairaSemiCondensed_Medium_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
    default:
        return 0;
    }
}
 80035ea:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80035ec:	f000 ffea 	bl	80045c4 <_ZN17TypedTextDatabase8getFontsEv>
 80035f0:	6840      	ldr	r0, [r0, #4]
 80035f2:	e7fa      	b.n	80035ea <_ZN23ApplicationFontProvider7getFontEt+0x1a>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80035f4:	f000 ffe6 	bl	80045c4 <_ZN17TypedTextDatabase8getFontsEv>
 80035f8:	6880      	ldr	r0, [r0, #8]
 80035fa:	e7f6      	b.n	80035ea <_ZN23ApplicationFontProvider7getFontEt+0x1a>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80035fc:	f000 ffe2 	bl	80045c4 <_ZN17TypedTextDatabase8getFontsEv>
 8003600:	68c0      	ldr	r0, [r0, #12]
 8003602:	e7f2      	b.n	80035ea <_ZN23ApplicationFontProvider7getFontEt+0x1a>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003604:	f000 ffde 	bl	80045c4 <_ZN17TypedTextDatabase8getFontsEv>
 8003608:	6900      	ldr	r0, [r0, #16]
 800360a:	e7ee      	b.n	80035ea <_ZN23ApplicationFontProvider7getFontEt+0x1a>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800360c:	f000 ffda 	bl	80045c4 <_ZN17TypedTextDatabase8getFontsEv>
 8003610:	6900      	ldr	r0, [r0, #16]
 8003612:	e7ea      	b.n	80035ea <_ZN23ApplicationFontProvider7getFontEt+0x1a>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8003614:	f000 ffd6 	bl	80045c4 <_ZN17TypedTextDatabase8getFontsEv>
 8003618:	6940      	ldr	r0, [r0, #20]
 800361a:	e7e6      	b.n	80035ea <_ZN23ApplicationFontProvider7getFontEt+0x1a>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800361c:	f000 ffd2 	bl	80045c4 <_ZN17TypedTextDatabase8getFontsEv>
 8003620:	6980      	ldr	r0, [r0, #24]
 8003622:	e7e2      	b.n	80035ea <_ZN23ApplicationFontProvider7getFontEt+0x1a>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 8003624:	f000 ffce 	bl	80045c4 <_ZN17TypedTextDatabase8getFontsEv>
 8003628:	69c0      	ldr	r0, [r0, #28]
 800362a:	e7de      	b.n	80035ea <_ZN23ApplicationFontProvider7getFontEt+0x1a>
    switch (typography)
 800362c:	2000      	movs	r0, #0
 800362e:	e7dc      	b.n	80035ea <_ZN23ApplicationFontProvider7getFontEt+0x1a>

08003630 <_ZN23ApplicationFontProviderD0Ev>:
 8003630:	b510      	push	{r4, lr}
 8003632:	4604      	mov	r4, r0
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 8003636:	6003      	str	r3, [r0, #0]
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 800363a:	6003      	str	r3, [r0, #0]
 800363c:	2104      	movs	r1, #4
 800363e:	f01f fe52 	bl	80232e6 <_ZdlPvj>
 8003642:	4620      	mov	r0, r4
 8003644:	bd10      	pop	{r4, pc}
 8003646:	bf00      	nop
 8003648:	0802539c 	.word	0x0802539c
 800364c:	08024ff8 	.word	0x08024ff8

08003650 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003650:	4800      	ldr	r0, [pc, #0]	; (8003654 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003652:	4770      	bx	lr
 8003654:	080253a8 	.word	0x080253a8

08003658 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003658:	2014      	movs	r0, #20
 800365a:	4770      	bx	lr

0800365c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 800365c:	b169      	cbz	r1, 800367a <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800365e:	b510      	push	{r4, lr}
 8003660:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003666:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800366a:	6803      	ldr	r3, [r0, #0]
 800366c:	689c      	ldr	r4, [r3, #8]
 800366e:	f10d 0303 	add.w	r3, sp, #3
 8003672:	aa01      	add	r2, sp, #4
 8003674:	47a0      	blx	r4
        return glyph;
    }
 8003676:	b002      	add	sp, #8
 8003678:	bd10      	pop	{r4, pc}
            return 0;
 800367a:	2000      	movs	r0, #0
    }
 800367c:	4770      	bx	lr

0800367e <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800367e:	8940      	ldrh	r0, [r0, #10]
 8003680:	4770      	bx	lr

08003682 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003682:	8980      	ldrh	r0, [r0, #12]
 8003684:	4770      	bx	lr

08003686 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8003686:	8880      	ldrh	r0, [r0, #4]
 8003688:	4770      	bx	lr

0800368a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800368a:	8883      	ldrh	r3, [r0, #4]
 800368c:	7980      	ldrb	r0, [r0, #6]
 800368e:	4418      	add	r0, r3
    }
 8003690:	b280      	uxth	r0, r0
 8003692:	4770      	bx	lr

08003694 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003694:	79c0      	ldrb	r0, [r0, #7]
    }
 8003696:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800369a:	4770      	bx	lr

0800369c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800369c:	79c0      	ldrb	r0, [r0, #7]
    }
 800369e:	09c0      	lsrs	r0, r0, #7
 80036a0:	4770      	bx	lr
	...

080036a4 <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 80036a4:	4b01      	ldr	r3, [pc, #4]	; (80036ac <_ZN8touchgfx10TransitionD1Ev+0x8>)
 80036a6:	6003      	str	r3, [r0, #0]
    }
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	0802586c 	.word	0x0802586c

080036b0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 80036b0:	4770      	bx	lr

080036b2 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80036b2:	4770      	bx	lr

080036b4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80036b4:	4770      	bx	lr

080036b6 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80036b6:	6041      	str	r1, [r0, #4]
    }
 80036b8:	4770      	bx	lr

080036ba <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80036ba:	2301      	movs	r3, #1
 80036bc:	7203      	strb	r3, [r0, #8]
    }
 80036be:	4770      	bx	lr

080036c0 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80036c0:	4a02      	ldr	r2, [pc, #8]	; (80036cc <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 80036c2:	6002      	str	r2, [r0, #0]
    {
 80036c4:	4a02      	ldr	r2, [pc, #8]	; (80036d0 <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 80036c6:	6002      	str	r2, [r0, #0]
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	08025890 	.word	0x08025890
 80036d0:	0802586c 	.word	0x0802586c

080036d4 <_Z41__static_initialization_and_destruction_0ii>:
}

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
 80036d4:	2801      	cmp	r0, #1
 80036d6:	d006      	beq.n	80036e6 <_Z41__static_initialization_and_destruction_0ii+0x12>
 80036d8:	b920      	cbnz	r0, 80036e4 <_Z41__static_initialization_and_destruction_0ii+0x10>
 80036da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036de:	4299      	cmp	r1, r3
 80036e0:	f000 8222 	beq.w	8003b28 <_Z41__static_initialization_and_destruction_0ii+0x454>
 80036e4:	4770      	bx	lr
 80036e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ea:	4299      	cmp	r1, r3
 80036ec:	d1f4      	bne.n	80036d8 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80036ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80036f2:	4bf0      	ldr	r3, [pc, #960]	; (8003ab4 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80036f8:	240c      	movs	r4, #12
 80036fa:	805c      	strh	r4, [r3, #2]
 80036fc:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8003700:	f8a3 e004 	strh.w	lr, [r3, #4]
 8003704:	2224      	movs	r2, #36	; 0x24
 8003706:	80da      	strh	r2, [r3, #6]
 8003708:	811a      	strh	r2, [r3, #8]
 800370a:	f04f 0c07 	mov.w	ip, #7
 800370e:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8003712:	2502      	movs	r5, #2
 8003714:	731d      	strb	r5, [r3, #12]
 8003716:	f04f 0a36 	mov.w	sl, #54	; 0x36
 800371a:	f8a3 a00e 	strh.w	sl, [r3, #14]
 800371e:	f8a3 e010 	strh.w	lr, [r3, #16]
 8003722:	825a      	strh	r2, [r3, #18]
 8003724:	829a      	strh	r2, [r3, #20]
 8003726:	f8a3 c016 	strh.w	ip, [r3, #22]
 800372a:	2503      	movs	r5, #3
 800372c:	761d      	strb	r5, [r3, #24]
 800372e:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003732:	835e      	strh	r6, [r3, #26]
 8003734:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8003738:	83da      	strh	r2, [r3, #30]
 800373a:	841a      	strh	r2, [r3, #32]
 800373c:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8003740:	f04f 0504 	mov.w	r5, #4
 8003744:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8003748:	f04f 088a 	mov.w	r8, #138	; 0x8a
 800374c:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8003750:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003756:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003758:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 800375c:	f04f 0505 	mov.w	r5, #5
 8003760:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8003764:	27b4      	movs	r7, #180	; 0xb4
 8003766:	865f      	strh	r7, [r3, #50]	; 0x32
 8003768:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 800376c:	86da      	strh	r2, [r3, #54]	; 0x36
 800376e:	871a      	strh	r2, [r3, #56]	; 0x38
 8003770:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8003774:	f04f 0506 	mov.w	r5, #6
 8003778:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 800377c:	f04f 05de 	mov.w	r5, #222	; 0xde
 8003780:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8003782:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8003786:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800378a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800378e:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8003792:	f883 c048 	strb.w	ip, [r3, #72]	; 0x48
 8003796:	f44f 7984 	mov.w	r9, #264	; 0x108
 800379a:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 800379e:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 80037a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80037a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80037aa:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 80037ae:	f04f 0b08 	mov.w	fp, #8
 80037b2:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80037b6:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80037ba:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80037be:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 80037c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80037c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ca:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 80037ce:	f04f 0509 	mov.w	r5, #9
 80037d2:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 80037d6:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80037da:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80037de:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 80037e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80037e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80037ea:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 80037ee:	250a      	movs	r5, #10
 80037f0:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80037f4:	f44f 75c3 	mov.w	r5, #390	; 0x186
 80037f8:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 80037fc:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8003800:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8003804:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8003808:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 800380c:	f04f 090b 	mov.w	r9, #11
 8003810:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8003814:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8003818:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 800381c:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8003820:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8003824:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003828:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 800382c:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8003830:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8003834:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8003838:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 800383c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8003840:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8003844:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8003848:	f04f 060d 	mov.w	r6, #13
 800384c:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8003850:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8003854:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8003858:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800385c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8003860:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8003864:	f04f 0a0e 	mov.w	sl, #14
 8003868:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 800386c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003870:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8003874:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8003878:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800387c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003880:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8003884:	f04f 0a0f 	mov.w	sl, #15
 8003888:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 800388c:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8003890:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8003894:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8003898:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800389c:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 80038a0:	f04f 0a10 	mov.w	sl, #16
 80038a4:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 80038a8:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 80038ac:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 80038b0:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80038b4:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80038b8:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 80038bc:	f04f 0a11 	mov.w	sl, #17
 80038c0:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80038c4:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80038c8:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80038cc:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 80038d0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80038d4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80038d8:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 80038dc:	f04f 0a12 	mov.w	sl, #18
 80038e0:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80038e4:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80038e8:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 80038ec:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80038f0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80038f4:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80038f8:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 80038fc:	f04f 0a13 	mov.w	sl, #19
 8003900:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8003904:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8003908:	4656      	mov	r6, sl
 800390a:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 800390e:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8003912:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8003916:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 800391a:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 800391e:	f04f 0a14 	mov.w	sl, #20
 8003922:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8003926:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 800392a:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 800392e:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8003932:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8003936:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 800393a:	f04f 0a15 	mov.w	sl, #21
 800393e:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8003942:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8003946:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 800394a:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 800394e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8003952:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8003956:	f04f 0a16 	mov.w	sl, #22
 800395a:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 800395e:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8003962:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8003966:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800396a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800396e:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8003972:	f04f 0e17 	mov.w	lr, #23
 8003976:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 800397a:	f04f 0e60 	mov.w	lr, #96	; 0x60
 800397e:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8003982:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8003986:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 800398a:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 800398e:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8003992:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8003996:	f04f 0918 	mov.w	r9, #24
 800399a:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 800399e:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 80039a2:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 80039a6:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 80039aa:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80039ae:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 80039b2:	f04f 0819 	mov.w	r8, #25
 80039b6:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80039ba:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80039be:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 80039c2:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80039c6:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80039ca:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 80039ce:	271a      	movs	r7, #26
 80039d0:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80039d4:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80039d8:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 80039dc:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 80039e0:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80039e4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 80039e8:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 80039ec:	271b      	movs	r7, #27
 80039ee:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 80039f2:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80039f6:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 80039fa:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 80039fe:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8003a02:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8003a06:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8003a0a:	271c      	movs	r7, #28
 8003a0c:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8003a10:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8003a14:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8003a18:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8003a1c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8003a20:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8003a24:	271d      	movs	r7, #29
 8003a26:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8003a2a:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8003a2e:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8003a32:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8003a36:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8003a3a:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8003a3e:	271e      	movs	r7, #30
 8003a40:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8003a44:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003a48:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8003a4c:	26e2      	movs	r6, #226	; 0xe2
 8003a4e:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8003a52:	f44f 7790 	mov.w	r7, #288	; 0x120
 8003a56:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8003a5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8003a5e:	f04f 0709 	mov.w	r7, #9
 8003a62:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8003a66:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8003a68:	801c      	strh	r4, [r3, #0]
 8003a6a:	f8a3 e002 	strh.w	lr, [r3, #2]
 8003a6e:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8003a72:	f8a3 c004 	strh.w	ip, [r3, #4]
 8003a76:	80da      	strh	r2, [r3, #6]
};
 8003a78:	2700      	movs	r7, #0
 8003a7a:	609f      	str	r7, [r3, #8]
 8003a7c:	f04f 0805 	mov.w	r8, #5
 8003a80:	f8a3 800c 	strh.w	r8, [r3, #12]
 8003a84:	821d      	strh	r5, [r3, #16]
 8003a86:	f8a3 e012 	strh.w	lr, [r3, #18]
 8003a8a:	f8a3 c014 	strh.w	ip, [r3, #20]
 8003a8e:	82da      	strh	r2, [r3, #22]
 8003a90:	619f      	str	r7, [r3, #24]
 8003a92:	f04f 0e04 	mov.w	lr, #4
 8003a96:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8003a9a:	841c      	strh	r4, [r3, #32]
 8003a9c:	845e      	strh	r6, [r3, #34]	; 0x22
 8003a9e:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8003aa2:	84da      	strh	r2, [r3, #38]	; 0x26
 8003aa4:	629f      	str	r7, [r3, #40]	; 0x28
 8003aa6:	f04f 0408 	mov.w	r4, #8
 8003aaa:	859c      	strh	r4, [r3, #44]	; 0x2c
 8003aac:	861d      	strh	r5, [r3, #48]	; 0x30
 8003aae:	865e      	strh	r6, [r3, #50]	; 0x32
 8003ab0:	e004      	b.n	8003abc <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8003ab2:	bf00      	nop
 8003ab4:	24005c14 	.word	0x24005c14
 8003ab8:	24005b84 	.word	0x24005b84
 8003abc:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8003ac0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ac2:	639f      	str	r7, [r3, #56]	; 0x38
 8003ac4:	f04f 0206 	mov.w	r2, #6
 8003ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003aca:	4604      	mov	r4, r0
 8003acc:	3340      	adds	r3, #64	; 0x40
 8003ace:	2c00      	cmp	r4, #0
 8003ad0:	db0b      	blt.n	8003aea <_Z41__static_initialization_and_destruction_0ii+0x416>
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	805a      	strh	r2, [r3, #2]
 8003ae0:	809a      	strh	r2, [r3, #4]
 8003ae2:	80da      	strh	r2, [r3, #6]
 8003ae4:	3310      	adds	r3, #16
 8003ae6:	3c01      	subs	r4, #1
 8003ae8:	e7f1      	b.n	8003ace <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003aec:	2205      	movs	r2, #5
 8003aee:	825a      	strh	r2, [r3, #18]
 8003af0:	222d      	movs	r2, #45	; 0x2d
 8003af2:	829a      	strh	r2, [r3, #20]
 8003af4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003af8:	82da      	strh	r2, [r3, #22]
 8003afa:	2246      	movs	r2, #70	; 0x46
 8003afc:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8003afe:	4a0d      	ldr	r2, [pc, #52]	; (8003b34 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003b00:	61da      	str	r2, [r3, #28]
 8003b02:	2200      	movs	r2, #0
 8003b04:	841a      	strh	r2, [r3, #32]
        : color(col)
 8003b06:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
 8003b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b10:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8003b12:	b918      	cbnz	r0, 8003b1c <_Z41__static_initialization_and_destruction_0ii+0x448>
 8003b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b18:	4299      	cmp	r1, r3
 8003b1a:	d001      	beq.n	8003b20 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8003b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003b22:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003b24:	61da      	str	r2, [r3, #28]
 8003b26:	e7f9      	b.n	8003b1c <_Z41__static_initialization_and_destruction_0ii+0x448>
 8003b28:	4b01      	ldr	r3, [pc, #4]	; (8003b30 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003b2a:	4a02      	ldr	r2, [pc, #8]	; (8003b34 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003b2c:	61da      	str	r2, [r3, #28]
 8003b2e:	4770      	bx	lr
 8003b30:	24005be4 	.word	0x24005be4
 8003b34:	08024fe8 	.word	0x08024fe8

08003b38 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 8003b3e:	6003      	str	r3, [r0, #0]
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 8003b42:	6003      	str	r3, [r0, #0]
 8003b44:	210c      	movs	r1, #12
 8003b46:	f01f fbce 	bl	80232e6 <_ZdlPvj>
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	bd10      	pop	{r4, pc}
 8003b4e:	bf00      	nop
 8003b50:	08025890 	.word	0x08025890
 8003b54:	0802586c 	.word	0x0802586c

08003b58 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	4604      	mov	r4, r0
    {
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <_ZN8touchgfx10TransitionD0Ev+0x14>)
 8003b5e:	6003      	str	r3, [r0, #0]
    }
 8003b60:	210c      	movs	r1, #12
 8003b62:	f01f fbc0 	bl	80232e6 <_ZdlPvj>
 8003b66:	4620      	mov	r0, r4
 8003b68:	bd10      	pop	{r4, pc}
 8003b6a:	bf00      	nop
 8003b6c:	0802586c 	.word	0x0802586c

08003b70 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003b70:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8003b72:	f014 fa37 	bl	8017fe4 <_ZN8touchgfx11Application11getInstanceEv>
 8003b76:	f014 fe17 	bl	80187a8 <_ZN8touchgfx11Application10invalidateEv>
    }
 8003b7a:	bd08      	pop	{r3, pc}

08003b7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	4604      	mov	r4, r0
 8003b80:	460e      	mov	r6, r1
 8003b82:	4617      	mov	r7, r2
          pendingScreenTransitionCallback(0)
 8003b84:	f014 fa8c 	bl	80180a0 <_ZN8touchgfx11ApplicationC1Ev>
 8003b88:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8003b8a:	6023      	str	r3, [r4, #0]
 8003b8c:	2500      	movs	r5, #0
 8003b8e:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8003b92:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
        instance = this;
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8003b98:	601c      	str	r4, [r3, #0]
      model(m)
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 8003b9c:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 8003b9e:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8003ba0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 8003ba4:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 8003ba6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003baa:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003bae:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8003bb2:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 8003bb6:	f8c4 7150 	str.w	r7, [r4, #336]	; 0x150
 8003bba:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        return instance;
 8003bbe:	4e0f      	ldr	r6, [pc, #60]	; (8003bfc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
 8003bc0:	6830      	ldr	r0, [r6, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003bc2:	6803      	ldr	r3, [r0, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003bca:	4628      	mov	r0, r5
 8003bcc:	f000 fc86 	bl	80044dc <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003bd0:	6833      	ldr	r3, [r6, #0]
 8003bd2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8003bd6:	b10a      	cbz	r2, 8003bdc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
 8003bd8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003bda:	b900      	cbnz	r0, 8003bde <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x62>
        return instance->lcdRef;
 8003bdc:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003bde:	f01a fd5e 	bl	801e69e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8003be2:	4620      	mov	r0, r4
 8003be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003be6:	bf00      	nop
 8003be8:	0802505c 	.word	0x0802505c
 8003bec:	2400ff60 	.word	0x2400ff60
 8003bf0:	080250c0 	.word	0x080250c0
 8003bf4:	08025044 	.word	0x08025044
 8003bf8:	080250a8 	.word	0x080250a8
 8003bfc:	2400ff14 	.word	0x2400ff14

08003c00 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
{
 8003c00:	b410      	push	{r4}
 8003c02:	b089      	sub	sp, #36	; 0x24
 8003c04:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 8003c06:	4a10      	ldr	r2, [pc, #64]	; (8003c48 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 8003c08:	9206      	str	r2, [sp, #24]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	9207      	str	r2, [sp, #28]
 8003c0e:	46ec      	mov	ip, sp
 8003c10:	aa08      	add	r2, sp, #32
 8003c12:	e912 0003 	ldmdb	r2, {r0, r1}
 8003c16:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 8003c1a:	4c0c      	ldr	r4, [pc, #48]	; (8003c4c <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 8003c1c:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 8003c1e:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 8003c20:	9202      	str	r2, [sp, #8]
 8003c22:	9303      	str	r3, [sp, #12]
 8003c24:	aa04      	add	r2, sp, #16
 8003c26:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003c2a:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 8003c2e:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 8003c32:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 8003c36:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 8003c38:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8003c3c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8003c40:	b009      	add	sp, #36	; 0x24
 8003c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	08003da9 	.word	0x08003da9
 8003c4c:	08025044 	.word	0x08025044
 8003c50:	080250a8 	.word	0x080250a8

08003c54 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003c54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c58:	4607      	mov	r7, r0
 8003c5a:	4688      	mov	r8, r1
 8003c5c:	4615      	mov	r5, r2
 8003c5e:	4699      	mov	r9, r3
 8003c60:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003c64:	6890      	ldr	r0, [r2, #8]
 8003c66:	6803      	ldr	r3, [r0, #0]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4798      	blx	r3
 8003c6c:	f642 63c7 	movw	r3, #11975	; 0x2ec7
 8003c70:	4298      	cmp	r0, r3
 8003c72:	d976      	bls.n	8003d62 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003c74:	6868      	ldr	r0, [r5, #4]
 8003c76:	6803      	ldr	r3, [r0, #0]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	4798      	blx	r3
 8003c7c:	280f      	cmp	r0, #15
 8003c7e:	d976      	bls.n	8003d6e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003c80:	68e8      	ldr	r0, [r5, #12]
 8003c82:	6803      	ldr	r3, [r0, #0]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	4798      	blx	r3
 8003c88:	280b      	cmp	r0, #11
 8003c8a:	d976      	bls.n	8003d7a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 8003c8c:	f014 f9aa 	bl	8017fe4 <_ZN8touchgfx11Application11getInstanceEv>
 8003c90:	f014 f9e9 	bl	8018066 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003c94:	f8d9 0000 	ldr.w	r0, [r9]
 8003c98:	b110      	cbz	r0, 8003ca0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x4c>
        (*currentTrans)->tearDown();
 8003c9a:	6803      	ldr	r3, [r0, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	4798      	blx	r3
    if (*currentTrans)
 8003ca0:	f8d9 0000 	ldr.w	r0, [r9]
 8003ca4:	b110      	cbz	r0, 8003cac <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 8003ca6:	6803      	ldr	r3, [r0, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4798      	blx	r3
    if (*currentScreen)
 8003cac:	6838      	ldr	r0, [r7, #0]
 8003cae:	b110      	cbz	r0, 8003cb6 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x62>
        (*currentScreen)->tearDownScreen();
 8003cb0:	6803      	ldr	r3, [r0, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	4798      	blx	r3
    if (*currentPresenter)
 8003cb6:	f8d8 0000 	ldr.w	r0, [r8]
 8003cba:	b110      	cbz	r0, 8003cc2 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6e>
        (*currentPresenter)->deactivate();
 8003cbc:	6803      	ldr	r3, [r0, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4798      	blx	r3
    if (*currentScreen)
 8003cc2:	6838      	ldr	r0, [r7, #0]
 8003cc4:	b110      	cbz	r0, 8003ccc <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x78>
        (*currentScreen)->~Screen();
 8003cc6:	6803      	ldr	r3, [r0, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4798      	blx	r3
    if (*currentPresenter)
 8003ccc:	f8d8 0000 	ldr.w	r0, [r8]
 8003cd0:	b110      	cbz	r0, 8003cd8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x84>
        (*currentPresenter)->~Presenter();
 8003cd2:	6803      	ldr	r3, [r0, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003cd8:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003cda:	6803      	ldr	r3, [r0, #0]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4798      	blx	r3
 8003ce2:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8003ce4:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8003ce6:	6003      	str	r3, [r0, #0]
 8003ce8:	f04f 0b00 	mov.w	fp, #0
 8003cec:	f8c0 b004 	str.w	fp, [r0, #4]
 8003cf0:	f880 b008 	strb.w	fp, [r0, #8]
 8003cf4:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8003cf6:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003cf8:	68a8      	ldr	r0, [r5, #8]
 8003cfa:	6803      	ldr	r3, [r0, #0]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	4659      	mov	r1, fp
 8003d00:	4798      	blx	r3
 8003d02:	4606      	mov	r6, r0
 8003d04:	f003 fa96 	bl	8007234 <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003d08:	6868      	ldr	r0, [r5, #4]
 8003d0a:	6803      	ldr	r3, [r0, #0]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	4659      	mov	r1, fp
 8003d10:	4798      	blx	r3
 8003d12:	4605      	mov	r5, r0
 8003d14:	4631      	mov	r1, r6
 8003d16:	f002 fdad 	bl	8006874 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 8003d1a:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003d1e:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8003d22:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	d02e      	beq.n	8003d86 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 8003d28:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003d2a:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003d2e:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003d32:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 8003d34:	6833      	ldr	r3, [r6, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4630      	mov	r0, r6
 8003d3a:	4798      	blx	r3
    newPresenter->activate();
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4628      	mov	r0, r5
 8003d42:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003d44:	4621      	mov	r1, r4
 8003d46:	4630      	mov	r0, r6
 8003d48:	f015 fd5a 	bl	8019800 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	4620      	mov	r0, r4
 8003d52:	4798      	blx	r3
    newTransition->invalidate();
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	4620      	mov	r0, r4
 8003d5a:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8003d64:	4a0c      	ldr	r2, [pc, #48]	; (8003d98 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d66:	21a3      	movs	r1, #163	; 0xa3
 8003d68:	480c      	ldr	r0, [pc, #48]	; (8003d9c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d6a:	f01f faeb 	bl	8023344 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8003d70:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d72:	21a4      	movs	r1, #164	; 0xa4
 8003d74:	4809      	ldr	r0, [pc, #36]	; (8003d9c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d76:	f01f fae5 	bl	8023344 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8003d7c:	4a06      	ldr	r2, [pc, #24]	; (8003d98 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d7e:	21a5      	movs	r1, #165	; 0xa5
 8003d80:	4806      	ldr	r0, [pc, #24]	; (8003d9c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d82:	f01f fadf 	bl	8023344 <__assert_func>
    model->bind(newPresenter);
 8003d86:	462b      	mov	r3, r5
 8003d88:	e7cf      	b.n	8003d2a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
 8003d8a:	bf00      	nop
 8003d8c:	0802586c 	.word	0x0802586c
 8003d90:	08025890 	.word	0x08025890
 8003d94:	08025538 	.word	0x08025538
 8003d98:	080255c8 	.word	0x080255c8
 8003d9c:	080256d4 	.word	0x080256d4
 8003da0:	0802571c 	.word	0x0802571c
 8003da4:	080257c0 	.word	0x080257c0

08003da8 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:
{
 8003da8:	b500      	push	{lr}
 8003daa:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003dac:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 8003db4:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003db8:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8003dbc:	4803      	ldr	r0, [pc, #12]	; (8003dcc <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 8003dbe:	f7ff ff49 	bl	8003c54 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003dc2:	b003      	add	sp, #12
 8003dc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dc8:	2400ff54 	.word	0x2400ff54
 8003dcc:	2400ff50 	.word	0x2400ff50

08003dd0 <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8003dd0:	b508      	push	{r3, lr}
 8003dd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	f7ff fc7c 	bl	80036d4 <_Z41__static_initialization_and_destruction_0ii>
 8003ddc:	bd08      	pop	{r3, pc}

08003dde <_GLOBAL__sub_D__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8003dde:	b508      	push	{r3, lr}
 8003de0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003de4:	2000      	movs	r0, #0
 8003de6:	f7ff fc75 	bl	80036d4 <_Z41__static_initialization_and_destruction_0ii>
 8003dea:	bd08      	pop	{r3, pc}

08003dec <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003dec:	6a00      	ldr	r0, [r0, #32]
 8003dee:	4770      	bx	lr

08003df0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003df0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003df2:	4770      	bx	lr

08003df4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003df4:	4a03      	ldr	r2, [pc, #12]	; (8003e04 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 8003df6:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003df8:	4a03      	ldr	r2, [pc, #12]	; (8003e08 <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 8003dfa:	6002      	str	r2, [r0, #0]
    {
 8003dfc:	4a03      	ldr	r2, [pc, #12]	; (8003e0c <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 8003dfe:	6002      	str	r2, [r0, #0]
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	080258b4 	.word	0x080258b4
 8003e08:	08027188 	.word	0x08027188
 8003e0c:	08025af4 	.word	0x08025af4

08003e10 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8003e10:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003e12:	888b      	ldrh	r3, [r1, #4]
 8003e14:	0adb      	lsrs	r3, r3, #11
 8003e16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e1a:	680b      	ldr	r3, [r1, #0]
}
 8003e1c:	4418      	add	r0, r3
 8003e1e:	4770      	bx	lr

08003e20 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8003e20:	4694      	mov	ip, r2
 8003e22:	b1da      	cbz	r2, 8003e5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8003e24:	7b13      	ldrb	r3, [r2, #12]
 8003e26:	b1db      	cbz	r3, 8003e60 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003e28:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003e2a:	f89c 000d 	ldrb.w	r0, [ip, #13]
 8003e2e:	0200      	lsls	r0, r0, #8
 8003e30:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003e34:	f89c c00b 	ldrb.w	ip, [ip, #11]
 8003e38:	ea40 000c 	orr.w	r0, r0, ip
 8003e3c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	b17b      	cbz	r3, 8003e64 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003e44:	8810      	ldrh	r0, [r2, #0]
 8003e46:	4288      	cmp	r0, r1
 8003e48:	d005      	beq.n	8003e56 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 8003e4a:	4288      	cmp	r0, r1
 8003e4c:	d80c      	bhi.n	8003e68 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3204      	adds	r2, #4
 8003e54:	e7f5      	b.n	8003e42 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 8003e56:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8003e5a:	4770      	bx	lr
        return 0;
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	4770      	bx	lr
 8003e60:	2000      	movs	r0, #0
 8003e62:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 8003e64:	2000      	movs	r0, #0
 8003e66:	4770      	bx	lr
 8003e68:	2000      	movs	r0, #0
}
 8003e6a:	4770      	bx	lr

08003e6c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	4604      	mov	r4, r0
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 8003e72:	6003      	str	r3, [r0, #0]
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 8003e76:	6003      	str	r3, [r0, #0]
    {
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 8003e7a:	6003      	str	r3, [r0, #0]
 8003e7c:	2128      	movs	r1, #40	; 0x28
 8003e7e:	f01f fa32 	bl	80232e6 <_ZdlPvj>
 8003e82:	4620      	mov	r0, r4
 8003e84:	bd10      	pop	{r4, pc}
 8003e86:	bf00      	nop
 8003e88:	080258b4 	.word	0x080258b4
 8003e8c:	08027188 	.word	0x08027188
 8003e90:	08025af4 	.word	0x08025af4

08003e94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003e94:	b530      	push	{r4, r5, lr}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003e9a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8003e9e:	9506      	str	r5, [sp, #24]
 8003ea0:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003ea4:	9505      	str	r5, [sp, #20]
 8003ea6:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003eaa:	9504      	str	r5, [sp, #16]
 8003eac:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003eb0:	9503      	str	r5, [sp, #12]
 8003eb2:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003eb6:	9502      	str	r5, [sp, #8]
 8003eb8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003ebc:	9501      	str	r5, [sp, #4]
 8003ebe:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8003ec2:	9500      	str	r5, [sp, #0]
 8003ec4:	f015 f910 	bl	80190e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ece:	61a3      	str	r3, [r4, #24]
 8003ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ed2:	61e3      	str	r3, [r4, #28]
 8003ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ed6:	6223      	str	r3, [r4, #32]
 8003ed8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003eda:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003edc:	4620      	mov	r0, r4
 8003ede:	b009      	add	sp, #36	; 0x24
 8003ee0:	bd30      	pop	{r4, r5, pc}
 8003ee2:	bf00      	nop
 8003ee4:	080258b4 	.word	0x080258b4

08003ee8 <__tcf_0>:
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <__tcf_0+0x10>)
 8003eea:	4a04      	ldr	r2, [pc, #16]	; (8003efc <__tcf_0+0x14>)
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <__tcf_0+0x18>)
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <__tcf_0+0x1c>)
 8003ef4:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_SairaSemiCondensed_Medium_18_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SairaSemiCondensed_Medium_18_4bpp();

touchgfx::GeneratedFont& getFont_SairaSemiCondensed_Medium_18_4bpp()
{
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003ef6:	4770      	bx	lr
 8003ef8:	24005d80 	.word	0x24005d80
 8003efc:	080258b4 	.word	0x080258b4
 8003f00:	08027188 	.word	0x08027188
 8003f04:	08025af4 	.word	0x08025af4

08003f08 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv>:
 8003f08:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	f3bf 8f5b 	dmb	ish
 8003f10:	f013 0f01 	tst.w	r3, #1
 8003f14:	d001      	beq.n	8003f1a <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x12>
    return SairaSemiCondensed_Medium_18_4bpp;
}
 8003f16:	4816      	ldr	r0, [pc, #88]	; (8003f70 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003f18:	4770      	bx	lr
{
 8003f1a:	b500      	push	{lr}
 8003f1c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003f1e:	4813      	ldr	r0, [pc, #76]	; (8003f6c <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003f20:	f01f f9e3 	bl	80232ea <__cxa_guard_acquire>
 8003f24:	b918      	cbnz	r0, 8003f2e <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x26>
}
 8003f26:	4812      	ldr	r0, [pc, #72]	; (8003f70 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003f28:	b00d      	add	sp, #52	; 0x34
 8003f2a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	930a      	str	r3, [sp, #40]	; 0x28
 8003f32:	9309      	str	r3, [sp, #36]	; 0x24
 8003f34:	9308      	str	r3, [sp, #32]
 8003f36:	233f      	movs	r3, #63	; 0x3f
 8003f38:	9307      	str	r3, [sp, #28]
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x6c>)
 8003f3c:	9306      	str	r3, [sp, #24]
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x70>)
 8003f40:	9305      	str	r3, [sp, #20]
 8003f42:	2301      	movs	r3, #1
 8003f44:	9304      	str	r3, [sp, #16]
 8003f46:	9303      	str	r3, [sp, #12]
 8003f48:	9302      	str	r3, [sp, #8]
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2312      	movs	r3, #18
 8003f52:	226e      	movs	r2, #110	; 0x6e
 8003f54:	4909      	ldr	r1, [pc, #36]	; (8003f7c <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x74>)
 8003f56:	4806      	ldr	r0, [pc, #24]	; (8003f70 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003f58:	f7ff ff9c 	bl	8003e94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f5c:	4808      	ldr	r0, [pc, #32]	; (8003f80 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x78>)
 8003f5e:	f01f fa0f 	bl	8023380 <atexit>
 8003f62:	4802      	ldr	r0, [pc, #8]	; (8003f6c <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003f64:	f01f f9cd 	bl	8023302 <__cxa_guard_release>
 8003f68:	e7dd      	b.n	8003f26 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x1e>
 8003f6a:	bf00      	nop
 8003f6c:	24005d7c 	.word	0x24005d7c
 8003f70:	24005d80 	.word	0x24005d80
 8003f74:	080274e0 	.word	0x080274e0
 8003f78:	08027d7c 	.word	0x08027d7c
 8003f7c:	9000bd90 	.word	0x9000bd90
 8003f80:	08003ee9 	.word	0x08003ee9

08003f84 <__tcf_0>:
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <__tcf_0+0x10>)
 8003f86:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <__tcf_0+0x14>)
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <__tcf_0+0x18>)
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <__tcf_0+0x1c>)
 8003f90:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_SairaSemiCondensed_Medium_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SairaSemiCondensed_Medium_20_4bpp();

touchgfx::GeneratedFont& getFont_SairaSemiCondensed_Medium_20_4bpp()
{
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_20_4bpp(glyphs_SairaSemiCondensed_Medium_20_4bpp, 110, 20, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_20_4bpp, kerning_SairaSemiCondensed_Medium_20_4bpp, 63, 0, 0, 0);
 8003f92:	4770      	bx	lr
 8003f94:	24005dac 	.word	0x24005dac
 8003f98:	080258b4 	.word	0x080258b4
 8003f9c:	08027188 	.word	0x08027188
 8003fa0:	08025af4 	.word	0x08025af4

08003fa4 <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv>:
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x64>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	f3bf 8f5b 	dmb	ish
 8003fac:	f013 0f01 	tst.w	r3, #1
 8003fb0:	d001      	beq.n	8003fb6 <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x12>
    return SairaSemiCondensed_Medium_20_4bpp;
}
 8003fb2:	4816      	ldr	r0, [pc, #88]	; (800400c <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x68>)
 8003fb4:	4770      	bx	lr
{
 8003fb6:	b500      	push	{lr}
 8003fb8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_20_4bpp(glyphs_SairaSemiCondensed_Medium_20_4bpp, 110, 20, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_20_4bpp, kerning_SairaSemiCondensed_Medium_20_4bpp, 63, 0, 0, 0);
 8003fba:	4813      	ldr	r0, [pc, #76]	; (8004008 <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x64>)
 8003fbc:	f01f f995 	bl	80232ea <__cxa_guard_acquire>
 8003fc0:	b918      	cbnz	r0, 8003fca <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x26>
}
 8003fc2:	4812      	ldr	r0, [pc, #72]	; (800400c <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x68>)
 8003fc4:	b00d      	add	sp, #52	; 0x34
 8003fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_20_4bpp(glyphs_SairaSemiCondensed_Medium_20_4bpp, 110, 20, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_20_4bpp, kerning_SairaSemiCondensed_Medium_20_4bpp, 63, 0, 0, 0);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8003fce:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd0:	9308      	str	r3, [sp, #32]
 8003fd2:	233f      	movs	r3, #63	; 0x3f
 8003fd4:	9307      	str	r3, [sp, #28]
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x6c>)
 8003fd8:	9306      	str	r3, [sp, #24]
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x70>)
 8003fdc:	9305      	str	r3, [sp, #20]
 8003fde:	2301      	movs	r3, #1
 8003fe0:	9304      	str	r3, [sp, #16]
 8003fe2:	9303      	str	r3, [sp, #12]
 8003fe4:	9302      	str	r3, [sp, #8]
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2314      	movs	r3, #20
 8003fee:	226e      	movs	r2, #110	; 0x6e
 8003ff0:	4909      	ldr	r1, [pc, #36]	; (8004018 <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x74>)
 8003ff2:	4806      	ldr	r0, [pc, #24]	; (800400c <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x68>)
 8003ff4:	f7ff ff4e 	bl	8003e94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003ff8:	4808      	ldr	r0, [pc, #32]	; (800401c <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x78>)
 8003ffa:	f01f f9c1 	bl	8023380 <atexit>
 8003ffe:	4802      	ldr	r0, [pc, #8]	; (8004008 <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x64>)
 8004000:	f01f f97f 	bl	8023302 <__cxa_guard_release>
 8004004:	e7dd      	b.n	8003fc2 <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv+0x1e>
 8004006:	bf00      	nop
 8004008:	24005da8 	.word	0x24005da8
 800400c:	24005dac 	.word	0x24005dac
 8004010:	08027644 	.word	0x08027644
 8004014:	08027d90 	.word	0x08027d90
 8004018:	9000c394 	.word	0x9000c394
 800401c:	08003f85 	.word	0x08003f85

08004020 <__tcf_0>:
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <__tcf_0+0x10>)
 8004022:	4a04      	ldr	r2, [pc, #16]	; (8004034 <__tcf_0+0x14>)
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	4a04      	ldr	r2, [pc, #16]	; (8004038 <__tcf_0+0x18>)
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	4a04      	ldr	r2, [pc, #16]	; (800403c <__tcf_0+0x1c>)
 800402c:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_Saira_Medium_22_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Saira_Medium_22_4bpp();

touchgfx::GeneratedFont& getFont_Saira_Medium_22_4bpp()
{
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 800402e:	4770      	bx	lr
 8004030:	24005dd8 	.word	0x24005dd8
 8004034:	080258b4 	.word	0x080258b4
 8004038:	08027188 	.word	0x08027188
 800403c:	08025af4 	.word	0x08025af4

08004040 <_Z28getFont_Saira_Medium_22_4bppv>:
 8004040:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f3bf 8f5b 	dmb	ish
 8004048:	f013 0f01 	tst.w	r3, #1
 800404c:	d001      	beq.n	8004052 <_Z28getFont_Saira_Medium_22_4bppv+0x12>
    return Saira_Medium_22_4bpp;
}
 800404e:	4816      	ldr	r0, [pc, #88]	; (80040a8 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8004050:	4770      	bx	lr
{
 8004052:	b500      	push	{lr}
 8004054:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8004056:	4813      	ldr	r0, [pc, #76]	; (80040a4 <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8004058:	f01f f947 	bl	80232ea <__cxa_guard_acquire>
 800405c:	b918      	cbnz	r0, 8004066 <_Z28getFont_Saira_Medium_22_4bppv+0x26>
}
 800405e:	4812      	ldr	r0, [pc, #72]	; (80040a8 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8004060:	b00d      	add	sp, #52	; 0x34
 8004062:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8004066:	2300      	movs	r3, #0
 8004068:	930a      	str	r3, [sp, #40]	; 0x28
 800406a:	9309      	str	r3, [sp, #36]	; 0x24
 800406c:	9308      	str	r3, [sp, #32]
 800406e:	233f      	movs	r3, #63	; 0x3f
 8004070:	9307      	str	r3, [sp, #28]
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <_Z28getFont_Saira_Medium_22_4bppv+0x6c>)
 8004074:	9306      	str	r3, [sp, #24]
 8004076:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <_Z28getFont_Saira_Medium_22_4bppv+0x70>)
 8004078:	9305      	str	r3, [sp, #20]
 800407a:	2301      	movs	r3, #1
 800407c:	9304      	str	r3, [sp, #16]
 800407e:	9303      	str	r3, [sp, #12]
 8004080:	9302      	str	r3, [sp, #8]
 8004082:	2304      	movs	r3, #4
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2305      	movs	r3, #5
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2316      	movs	r3, #22
 800408c:	226e      	movs	r2, #110	; 0x6e
 800408e:	4909      	ldr	r1, [pc, #36]	; (80040b4 <_Z28getFont_Saira_Medium_22_4bppv+0x74>)
 8004090:	4805      	ldr	r0, [pc, #20]	; (80040a8 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8004092:	f7ff feff 	bl	8003e94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004096:	4808      	ldr	r0, [pc, #32]	; (80040b8 <_Z28getFont_Saira_Medium_22_4bppv+0x78>)
 8004098:	f01f f972 	bl	8023380 <atexit>
 800409c:	4801      	ldr	r0, [pc, #4]	; (80040a4 <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 800409e:	f01f f930 	bl	8023302 <__cxa_guard_release>
 80040a2:	e7dc      	b.n	800405e <_Z28getFont_Saira_Medium_22_4bppv+0x1e>
 80040a4:	24005dd4 	.word	0x24005dd4
 80040a8:	24005dd8 	.word	0x24005dd8
 80040ac:	080277b0 	.word	0x080277b0
 80040b0:	08027da4 	.word	0x08027da4
 80040b4:	9000c998 	.word	0x9000c998
 80040b8:	08004021 	.word	0x08004021

080040bc <__tcf_0>:
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <__tcf_0+0x10>)
 80040be:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <__tcf_0+0x14>)
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <__tcf_0+0x18>)
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <__tcf_0+0x1c>)
 80040c8:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80040ca:	4770      	bx	lr
 80040cc:	24005e04 	.word	0x24005e04
 80040d0:	080258b4 	.word	0x080258b4
 80040d4:	08027188 	.word	0x08027188
 80040d8:	08025af4 	.word	0x08025af4

080040dc <_Z23getFont_verdana_10_4bppv>:
 80040dc:	4b17      	ldr	r3, [pc, #92]	; (800413c <_Z23getFont_verdana_10_4bppv+0x60>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	f3bf 8f5b 	dmb	ish
 80040e4:	f013 0f01 	tst.w	r3, #1
 80040e8:	d001      	beq.n	80040ee <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 80040ea:	4815      	ldr	r0, [pc, #84]	; (8004140 <_Z23getFont_verdana_10_4bppv+0x64>)
 80040ec:	4770      	bx	lr
{
 80040ee:	b500      	push	{lr}
 80040f0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80040f2:	4812      	ldr	r0, [pc, #72]	; (800413c <_Z23getFont_verdana_10_4bppv+0x60>)
 80040f4:	f01f f8f9 	bl	80232ea <__cxa_guard_acquire>
 80040f8:	b918      	cbnz	r0, 8004102 <_Z23getFont_verdana_10_4bppv+0x26>
}
 80040fa:	4811      	ldr	r0, [pc, #68]	; (8004140 <_Z23getFont_verdana_10_4bppv+0x64>)
 80040fc:	b00d      	add	sp, #52	; 0x34
 80040fe:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004102:	2300      	movs	r3, #0
 8004104:	930a      	str	r3, [sp, #40]	; 0x28
 8004106:	9309      	str	r3, [sp, #36]	; 0x24
 8004108:	9308      	str	r3, [sp, #32]
 800410a:	223f      	movs	r2, #63	; 0x3f
 800410c:	9207      	str	r2, [sp, #28]
 800410e:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004110:	9206      	str	r2, [sp, #24]
 8004112:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004114:	9205      	str	r2, [sp, #20]
 8004116:	9304      	str	r3, [sp, #16]
 8004118:	9303      	str	r3, [sp, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	9202      	str	r2, [sp, #8]
 800411e:	2104      	movs	r1, #4
 8004120:	9101      	str	r1, [sp, #4]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	230a      	movs	r3, #10
 8004126:	4909      	ldr	r1, [pc, #36]	; (800414c <_Z23getFont_verdana_10_4bppv+0x70>)
 8004128:	4805      	ldr	r0, [pc, #20]	; (8004140 <_Z23getFont_verdana_10_4bppv+0x64>)
 800412a:	f7ff feb3 	bl	8003e94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800412e:	4808      	ldr	r0, [pc, #32]	; (8004150 <_Z23getFont_verdana_10_4bppv+0x74>)
 8004130:	f01f f926 	bl	8023380 <atexit>
 8004134:	4801      	ldr	r0, [pc, #4]	; (800413c <_Z23getFont_verdana_10_4bppv+0x60>)
 8004136:	f01f f8e4 	bl	8023302 <__cxa_guard_release>
 800413a:	e7de      	b.n	80040fa <_Z23getFont_verdana_10_4bppv+0x1e>
 800413c:	24005e00 	.word	0x24005e00
 8004140:	24005e04 	.word	0x24005e04
 8004144:	08027900 	.word	0x08027900
 8004148:	08027db8 	.word	0x08027db8
 800414c:	9000cf9c 	.word	0x9000cf9c
 8004150:	080040bd 	.word	0x080040bd

08004154 <__tcf_0>:
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <__tcf_0+0x10>)
 8004156:	4a04      	ldr	r2, [pc, #16]	; (8004168 <__tcf_0+0x14>)
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	4a04      	ldr	r2, [pc, #16]	; (800416c <__tcf_0+0x18>)
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	4a04      	ldr	r2, [pc, #16]	; (8004170 <__tcf_0+0x1c>)
 8004160:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_18_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 8004162:	4770      	bx	lr
 8004164:	24005e30 	.word	0x24005e30
 8004168:	080258b4 	.word	0x080258b4
 800416c:	08027188 	.word	0x08027188
 8004170:	08025af4 	.word	0x08025af4

08004174 <_Z23getFont_verdana_18_4bppv>:
 8004174:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <_Z23getFont_verdana_18_4bppv+0x64>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	f3bf 8f5b 	dmb	ish
 800417c:	f013 0f01 	tst.w	r3, #1
 8004180:	d001      	beq.n	8004186 <_Z23getFont_verdana_18_4bppv+0x12>
    return verdana_18_4bpp;
}
 8004182:	4816      	ldr	r0, [pc, #88]	; (80041dc <_Z23getFont_verdana_18_4bppv+0x68>)
 8004184:	4770      	bx	lr
{
 8004186:	b500      	push	{lr}
 8004188:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 800418a:	4813      	ldr	r0, [pc, #76]	; (80041d8 <_Z23getFont_verdana_18_4bppv+0x64>)
 800418c:	f01f f8ad 	bl	80232ea <__cxa_guard_acquire>
 8004190:	b918      	cbnz	r0, 800419a <_Z23getFont_verdana_18_4bppv+0x26>
}
 8004192:	4812      	ldr	r0, [pc, #72]	; (80041dc <_Z23getFont_verdana_18_4bppv+0x68>)
 8004194:	b00d      	add	sp, #52	; 0x34
 8004196:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 800419a:	2300      	movs	r3, #0
 800419c:	930a      	str	r3, [sp, #40]	; 0x28
 800419e:	9309      	str	r3, [sp, #36]	; 0x24
 80041a0:	9308      	str	r3, [sp, #32]
 80041a2:	233f      	movs	r3, #63	; 0x3f
 80041a4:	9307      	str	r3, [sp, #28]
 80041a6:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <_Z23getFont_verdana_18_4bppv+0x6c>)
 80041a8:	9306      	str	r3, [sp, #24]
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <_Z23getFont_verdana_18_4bppv+0x70>)
 80041ac:	9305      	str	r3, [sp, #20]
 80041ae:	2301      	movs	r3, #1
 80041b0:	9304      	str	r3, [sp, #16]
 80041b2:	9303      	str	r3, [sp, #12]
 80041b4:	9302      	str	r3, [sp, #8]
 80041b6:	2304      	movs	r3, #4
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	2312      	movs	r3, #18
 80041be:	226e      	movs	r2, #110	; 0x6e
 80041c0:	4909      	ldr	r1, [pc, #36]	; (80041e8 <_Z23getFont_verdana_18_4bppv+0x74>)
 80041c2:	4806      	ldr	r0, [pc, #24]	; (80041dc <_Z23getFont_verdana_18_4bppv+0x68>)
 80041c4:	f7ff fe66 	bl	8003e94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80041c8:	4808      	ldr	r0, [pc, #32]	; (80041ec <_Z23getFont_verdana_18_4bppv+0x78>)
 80041ca:	f01f f8d9 	bl	8023380 <atexit>
 80041ce:	4802      	ldr	r0, [pc, #8]	; (80041d8 <_Z23getFont_verdana_18_4bppv+0x64>)
 80041d0:	f01f f897 	bl	8023302 <__cxa_guard_release>
 80041d4:	e7dd      	b.n	8004192 <_Z23getFont_verdana_18_4bppv+0x1e>
 80041d6:	bf00      	nop
 80041d8:	24005e2c 	.word	0x24005e2c
 80041dc:	24005e30 	.word	0x24005e30
 80041e0:	08027904 	.word	0x08027904
 80041e4:	08027dbc 	.word	0x08027dbc
 80041e8:	9000cfac 	.word	0x9000cfac
 80041ec:	08004155 	.word	0x08004155

080041f0 <__tcf_0>:
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <__tcf_0+0x10>)
 80041f2:	4a04      	ldr	r2, [pc, #16]	; (8004204 <__tcf_0+0x14>)
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	4a04      	ldr	r2, [pc, #16]	; (8004208 <__tcf_0+0x18>)
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	4a04      	ldr	r2, [pc, #16]	; (800420c <__tcf_0+0x1c>)
 80041fc:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80041fe:	4770      	bx	lr
 8004200:	24005e5c 	.word	0x24005e5c
 8004204:	080258b4 	.word	0x080258b4
 8004208:	08027188 	.word	0x08027188
 800420c:	08025af4 	.word	0x08025af4

08004210 <_Z23getFont_verdana_20_4bppv>:
 8004210:	4b17      	ldr	r3, [pc, #92]	; (8004270 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	f3bf 8f5b 	dmb	ish
 8004218:	f013 0f01 	tst.w	r3, #1
 800421c:	d001      	beq.n	8004222 <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 800421e:	4815      	ldr	r0, [pc, #84]	; (8004274 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004220:	4770      	bx	lr
{
 8004222:	b500      	push	{lr}
 8004224:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004226:	4812      	ldr	r0, [pc, #72]	; (8004270 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004228:	f01f f85f 	bl	80232ea <__cxa_guard_acquire>
 800422c:	b918      	cbnz	r0, 8004236 <_Z23getFont_verdana_20_4bppv+0x26>
}
 800422e:	4811      	ldr	r0, [pc, #68]	; (8004274 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004230:	b00d      	add	sp, #52	; 0x34
 8004232:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004236:	2300      	movs	r3, #0
 8004238:	930a      	str	r3, [sp, #40]	; 0x28
 800423a:	9309      	str	r3, [sp, #36]	; 0x24
 800423c:	9308      	str	r3, [sp, #32]
 800423e:	223f      	movs	r2, #63	; 0x3f
 8004240:	9207      	str	r2, [sp, #28]
 8004242:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004244:	9206      	str	r2, [sp, #24]
 8004246:	4a0d      	ldr	r2, [pc, #52]	; (800427c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004248:	9205      	str	r2, [sp, #20]
 800424a:	9304      	str	r3, [sp, #16]
 800424c:	9303      	str	r3, [sp, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	9202      	str	r2, [sp, #8]
 8004252:	2104      	movs	r1, #4
 8004254:	9101      	str	r1, [sp, #4]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2314      	movs	r3, #20
 800425a:	4909      	ldr	r1, [pc, #36]	; (8004280 <_Z23getFont_verdana_20_4bppv+0x70>)
 800425c:	4805      	ldr	r0, [pc, #20]	; (8004274 <_Z23getFont_verdana_20_4bppv+0x64>)
 800425e:	f7ff fe19 	bl	8003e94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004262:	4808      	ldr	r0, [pc, #32]	; (8004284 <_Z23getFont_verdana_20_4bppv+0x74>)
 8004264:	f01f f88c 	bl	8023380 <atexit>
 8004268:	4801      	ldr	r0, [pc, #4]	; (8004270 <_Z23getFont_verdana_20_4bppv+0x60>)
 800426a:	f01f f84a 	bl	8023302 <__cxa_guard_release>
 800426e:	e7de      	b.n	800422e <_Z23getFont_verdana_20_4bppv+0x1e>
 8004270:	24005e58 	.word	0x24005e58
 8004274:	24005e5c 	.word	0x24005e5c
 8004278:	08027a84 	.word	0x08027a84
 800427c:	08027dd0 	.word	0x08027dd0
 8004280:	9000d5b0 	.word	0x9000d5b0
 8004284:	080041f1 	.word	0x080041f1

08004288 <__tcf_0>:
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <__tcf_0+0x10>)
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <__tcf_0+0x14>)
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <__tcf_0+0x18>)
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <__tcf_0+0x1c>)
 8004294:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_34_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_34_4bpp();

touchgfx::GeneratedFont& getFont_verdana_34_4bpp()
{
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 8004296:	4770      	bx	lr
 8004298:	24005e88 	.word	0x24005e88
 800429c:	080258b4 	.word	0x080258b4
 80042a0:	08027188 	.word	0x08027188
 80042a4:	08025af4 	.word	0x08025af4

080042a8 <_Z23getFont_verdana_34_4bppv>:
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <_Z23getFont_verdana_34_4bppv+0x68>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f3bf 8f5b 	dmb	ish
 80042b0:	f013 0f01 	tst.w	r3, #1
 80042b4:	d001      	beq.n	80042ba <_Z23getFont_verdana_34_4bppv+0x12>
    return verdana_34_4bpp;
}
 80042b6:	4817      	ldr	r0, [pc, #92]	; (8004314 <_Z23getFont_verdana_34_4bppv+0x6c>)
 80042b8:	4770      	bx	lr
{
 80042ba:	b500      	push	{lr}
 80042bc:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 80042be:	4814      	ldr	r0, [pc, #80]	; (8004310 <_Z23getFont_verdana_34_4bppv+0x68>)
 80042c0:	f01f f813 	bl	80232ea <__cxa_guard_acquire>
 80042c4:	b918      	cbnz	r0, 80042ce <_Z23getFont_verdana_34_4bppv+0x26>
}
 80042c6:	4813      	ldr	r0, [pc, #76]	; (8004314 <_Z23getFont_verdana_34_4bppv+0x6c>)
 80042c8:	b00d      	add	sp, #52	; 0x34
 80042ca:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 80042ce:	2300      	movs	r3, #0
 80042d0:	930a      	str	r3, [sp, #40]	; 0x28
 80042d2:	9309      	str	r3, [sp, #36]	; 0x24
 80042d4:	9308      	str	r3, [sp, #32]
 80042d6:	233f      	movs	r3, #63	; 0x3f
 80042d8:	9307      	str	r3, [sp, #28]
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <_Z23getFont_verdana_34_4bppv+0x70>)
 80042dc:	9306      	str	r3, [sp, #24]
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <_Z23getFont_verdana_34_4bppv+0x74>)
 80042e0:	9305      	str	r3, [sp, #20]
 80042e2:	2302      	movs	r3, #2
 80042e4:	9304      	str	r3, [sp, #16]
 80042e6:	2301      	movs	r3, #1
 80042e8:	9303      	str	r3, [sp, #12]
 80042ea:	9302      	str	r3, [sp, #8]
 80042ec:	2304      	movs	r3, #4
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	2307      	movs	r3, #7
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2322      	movs	r3, #34	; 0x22
 80042f6:	226e      	movs	r2, #110	; 0x6e
 80042f8:	4909      	ldr	r1, [pc, #36]	; (8004320 <_Z23getFont_verdana_34_4bppv+0x78>)
 80042fa:	4806      	ldr	r0, [pc, #24]	; (8004314 <_Z23getFont_verdana_34_4bppv+0x6c>)
 80042fc:	f7ff fdca 	bl	8003e94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004300:	4808      	ldr	r0, [pc, #32]	; (8004324 <_Z23getFont_verdana_34_4bppv+0x7c>)
 8004302:	f01f f83d 	bl	8023380 <atexit>
 8004306:	4802      	ldr	r0, [pc, #8]	; (8004310 <_Z23getFont_verdana_34_4bppv+0x68>)
 8004308:	f01e fffb 	bl	8023302 <__cxa_guard_release>
 800430c:	e7db      	b.n	80042c6 <_Z23getFont_verdana_34_4bppv+0x1e>
 800430e:	bf00      	nop
 8004310:	24005e84 	.word	0x24005e84
 8004314:	24005e88 	.word	0x24005e88
 8004318:	08027a88 	.word	0x08027a88
 800431c:	08027dd4 	.word	0x08027dd4
 8004320:	9000d5c0 	.word	0x9000d5c0
 8004324:	08004289 	.word	0x08004289

08004328 <__tcf_0>:
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <__tcf_0+0x10>)
 800432a:	4a04      	ldr	r2, [pc, #16]	; (800433c <__tcf_0+0x14>)
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	4a04      	ldr	r2, [pc, #16]	; (8004340 <__tcf_0+0x18>)
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	4a04      	ldr	r2, [pc, #16]	; (8004344 <__tcf_0+0x1c>)
 8004334:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004336:	4770      	bx	lr
 8004338:	24005eb4 	.word	0x24005eb4
 800433c:	080258b4 	.word	0x080258b4
 8004340:	08027188 	.word	0x08027188
 8004344:	08025af4 	.word	0x08025af4

08004348 <_Z23getFont_verdana_40_4bppv>:
 8004348:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <_Z23getFont_verdana_40_4bppv+0x60>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	f3bf 8f5b 	dmb	ish
 8004350:	f013 0f01 	tst.w	r3, #1
 8004354:	d001      	beq.n	800435a <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 8004356:	4815      	ldr	r0, [pc, #84]	; (80043ac <_Z23getFont_verdana_40_4bppv+0x64>)
 8004358:	4770      	bx	lr
{
 800435a:	b500      	push	{lr}
 800435c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800435e:	4812      	ldr	r0, [pc, #72]	; (80043a8 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004360:	f01e ffc3 	bl	80232ea <__cxa_guard_acquire>
 8004364:	b918      	cbnz	r0, 800436e <_Z23getFont_verdana_40_4bppv+0x26>
}
 8004366:	4811      	ldr	r0, [pc, #68]	; (80043ac <_Z23getFont_verdana_40_4bppv+0x64>)
 8004368:	b00d      	add	sp, #52	; 0x34
 800436a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800436e:	2300      	movs	r3, #0
 8004370:	930a      	str	r3, [sp, #40]	; 0x28
 8004372:	9309      	str	r3, [sp, #36]	; 0x24
 8004374:	9308      	str	r3, [sp, #32]
 8004376:	223f      	movs	r2, #63	; 0x3f
 8004378:	9207      	str	r2, [sp, #28]
 800437a:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <_Z23getFont_verdana_40_4bppv+0x68>)
 800437c:	9206      	str	r2, [sp, #24]
 800437e:	4a0d      	ldr	r2, [pc, #52]	; (80043b4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004380:	9205      	str	r2, [sp, #20]
 8004382:	9304      	str	r3, [sp, #16]
 8004384:	9303      	str	r3, [sp, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	9202      	str	r2, [sp, #8]
 800438a:	2104      	movs	r1, #4
 800438c:	9101      	str	r1, [sp, #4]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	2328      	movs	r3, #40	; 0x28
 8004392:	4909      	ldr	r1, [pc, #36]	; (80043b8 <_Z23getFont_verdana_40_4bppv+0x70>)
 8004394:	4805      	ldr	r0, [pc, #20]	; (80043ac <_Z23getFont_verdana_40_4bppv+0x64>)
 8004396:	f7ff fd7d 	bl	8003e94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800439a:	4808      	ldr	r0, [pc, #32]	; (80043bc <_Z23getFont_verdana_40_4bppv+0x74>)
 800439c:	f01e fff0 	bl	8023380 <atexit>
 80043a0:	4801      	ldr	r0, [pc, #4]	; (80043a8 <_Z23getFont_verdana_40_4bppv+0x60>)
 80043a2:	f01e ffae 	bl	8023302 <__cxa_guard_release>
 80043a6:	e7de      	b.n	8004366 <_Z23getFont_verdana_40_4bppv+0x1e>
 80043a8:	24005eb0 	.word	0x24005eb0
 80043ac:	24005eb4 	.word	0x24005eb4
 80043b0:	08027d78 	.word	0x08027d78
 80043b4:	08027de8 	.word	0x08027de8
 80043b8:	9000dbc4 	.word	0x9000dbc4
 80043bc:	08004329 	.word	0x08004329

080043c0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 80043c0:	2000      	movs	r0, #0
 80043c2:	4770      	bx	lr

080043c4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80043c4:	2000      	movs	r0, #0
 80043c6:	4770      	bx	lr

080043c8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80043c8:	2000      	movs	r0, #0
 80043ca:	4770      	bx	lr

080043cc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80043cc:	b40e      	push	{r1, r2, r3}
 80043ce:	b500      	push	{lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	ab03      	add	r3, sp, #12
 80043d4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80043d8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80043da:	2100      	movs	r1, #0
 80043dc:	f014 fcb4 	bl	8018d48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80043e0:	b002      	add	sp, #8
 80043e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e6:	b003      	add	sp, #12
 80043e8:	4770      	bx	lr

080043ea <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80043ea:	b40c      	push	{r2, r3}
 80043ec:	b500      	push	{lr}
 80043ee:	b083      	sub	sp, #12
 80043f0:	ab04      	add	r3, sp, #16
 80043f2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80043f6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80043f8:	f014 fca6 	bl	8018d48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80043fc:	b003      	add	sp, #12
 80043fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8004402:	b002      	add	sp, #8
 8004404:	4770      	bx	lr
	...

08004408 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8004408:	b510      	push	{r4, lr}
 800440a:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800440c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800440e:	b133      	cbz	r3, 800441e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004410:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8004412:	b143      	cbz	r3, 8004426 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8004414:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8004416:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800441a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800441c:	b94b      	cbnz	r3, 8004432 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800441e:	4620      	mov	r0, r4
 8004420:	f015 fe54 	bl	801a0cc <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8004424:	bd10      	pop	{r4, pc}
            assert(used > 0);
 8004426:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8004428:	4a1c      	ldr	r2, [pc, #112]	; (800449c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800442a:	21c0      	movs	r1, #192	; 0xc0
 800442c:	481c      	ldr	r0, [pc, #112]	; (80044a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 800442e:	f01e ff89 	bl	8023344 <__assert_func>
        substituteGlyphs();
 8004432:	f015 ff49 	bl	801a2c8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004436:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8004438:	2801      	cmp	r0, #1
 800443a:	d91d      	bls.n	8004478 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 800443c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800443e:	1c4b      	adds	r3, r1, #1
 8004440:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004442:	2b09      	cmp	r3, #9
 8004444:	d81e      	bhi.n	8004484 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 8004446:	461a      	mov	r2, r3
 8004448:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800444c:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004450:	f640 123f 	movw	r2, #2367	; 0x93f
 8004454:	4594      	cmp	ip, r2
 8004456:	d1e2      	bne.n	800441e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 8004458:	b1b8      	cbz	r0, 800448a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 800445a:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 800445e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004460:	2b09      	cmp	r3, #9
 8004462:	d900      	bls.n	8004466 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 8004464:	2300      	movs	r3, #0
 8004466:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800446a:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 800446c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004470:	f640 133f 	movw	r3, #2367	; 0x93f
 8004474:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 8004476:	e7d2      	b.n	800441e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 800447a:	4a0b      	ldr	r2, [pc, #44]	; (80044a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 800447c:	21c5      	movs	r1, #197	; 0xc5
 800447e:	4808      	ldr	r0, [pc, #32]	; (80044a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8004480:	f01e ff60 	bl	8023344 <__assert_func>
            return buffer[index < size ? index : index - size];
 8004484:	f1a3 020a 	sub.w	r2, r3, #10
 8004488:	e7de      	b.n	8004448 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 800448a:	4b03      	ldr	r3, [pc, #12]	; (8004498 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 800448c:	4a03      	ldr	r2, [pc, #12]	; (800449c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 800448e:	21c0      	movs	r1, #192	; 0xc0
 8004490:	4803      	ldr	r0, [pc, #12]	; (80044a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8004492:	f01e ff57 	bl	8023344 <__assert_func>
 8004496:	bf00      	nop
 8004498:	08025904 	.word	0x08025904
 800449c:	08025910 	.word	0x08025910
 80044a0:	080259bc 	.word	0x080259bc
 80044a4:	08025a08 	.word	0x08025a08
 80044a8:	08025a18 	.word	0x08025a18

080044ac <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80044ac:	b508      	push	{r3, lr}
    fillInputBuffer();
 80044ae:	f015 fdd6 	bl	801a05e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80044b2:	bd08      	pop	{r3, pc}

080044b4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80044b4:	b500      	push	{lr}
 80044b6:	b087      	sub	sp, #28
 80044b8:	f10d 0c08 	add.w	ip, sp, #8
 80044bc:	e88c 0006 	stmia.w	ip, {r1, r2}
 80044c0:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80044c2:	ab0a      	add	r3, sp, #40	; 0x28
 80044c4:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	9b08      	ldr	r3, [sp, #32]
 80044ce:	4661      	mov	r1, ip
 80044d0:	f013 f926 	bl	8017720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80044d4:	b007      	add	sp, #28
 80044d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080044dc <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80044dc:	bb40      	cbnz	r0, 8004530 <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 80044de:	b538      	push	{r3, r4, r5, lr}
 80044e0:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80044e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80044e8:	b1c3      	cbz	r3, 800451c <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	4419      	add	r1, r3
 80044ee:	4812      	ldr	r0, [pc, #72]	; (8004538 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80044f0:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	4419      	add	r1, r3
 80044f6:	4811      	ldr	r0, [pc, #68]	; (800453c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80044f8:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80044fa:	689c      	ldr	r4, [r3, #8]
 80044fc:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 80044fe:	b164      	cbz	r4, 800451a <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004502:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004504:	f000 f85e 	bl	80045c4 <_ZN17TypedTextDatabase8getFontsEv>
 8004508:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800450a:	f000 f859 	bl	80045c0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800450e:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004510:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004514:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004516:	4b0d      	ldr	r3, [pc, #52]	; (800454c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004518:	8018      	strh	r0, [r3, #0]
    }
}
 800451a:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800451e:	490c      	ldr	r1, [pc, #48]	; (8004550 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004520:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004524:	490b      	ldr	r1, [pc, #44]	; (8004554 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 8004526:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 800452a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800452e:	e7e6      	b.n	80044fe <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	24005edc 	.word	0x24005edc
 8004538:	24005ee0 	.word	0x24005ee0
 800453c:	24005ee4 	.word	0x24005ee4
 8004540:	24005ee8 	.word	0x24005ee8
 8004544:	2400ff64 	.word	0x2400ff64
 8004548:	2400ff6c 	.word	0x2400ff6c
 800454c:	2400ff68 	.word	0x2400ff68
 8004550:	9000dc00 	.word	0x9000dc00
 8004554:	9000dbd4 	.word	0x9000dbd4
 8004558:	9000dccc 	.word	0x9000dccc

0800455c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a04      	ldr	r2, [pc, #16]	; (8004574 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
 8004568:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	24005ee0 	.word	0x24005ee0
 8004574:	24005ee4 	.word	0x24005ee4

08004578 <_Z41__static_initialization_and_destruction_0ii>:
    case 7:
        touchgfx_fonts[7] = &(getFont_SairaSemiCondensed_Medium_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004578:	2801      	cmp	r0, #1
 800457a:	d000      	beq.n	800457e <_Z41__static_initialization_and_destruction_0ii+0x6>
 800457c:	4770      	bx	lr
 800457e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004582:	4299      	cmp	r1, r3
 8004584:	d1fa      	bne.n	800457c <_Z41__static_initialization_and_destruction_0ii+0x4>
 8004586:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8004588:	f7ff fe42 	bl	8004210 <_Z23getFont_verdana_20_4bppv>
};
 800458c:	4c0b      	ldr	r4, [pc, #44]	; (80045bc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800458e:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004590:	f7ff feda 	bl	8004348 <_Z23getFont_verdana_40_4bppv>
};
 8004594:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8004596:	f7ff fda1 	bl	80040dc <_Z23getFont_verdana_10_4bppv>
};
 800459a:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_34_4bpp()),
 800459c:	f7ff fe84 	bl	80042a8 <_Z23getFont_verdana_34_4bppv>
};
 80045a0:	60e0      	str	r0, [r4, #12]
    &(getFont_verdana_18_4bpp()),
 80045a2:	f7ff fde7 	bl	8004174 <_Z23getFont_verdana_18_4bppv>
};
 80045a6:	6120      	str	r0, [r4, #16]
    &(getFont_Saira_Medium_22_4bpp()),
 80045a8:	f7ff fd4a 	bl	8004040 <_Z28getFont_Saira_Medium_22_4bppv>
};
 80045ac:	6160      	str	r0, [r4, #20]
    &(getFont_SairaSemiCondensed_Medium_18_4bpp()),
 80045ae:	f7ff fcab 	bl	8003f08 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv>
};
 80045b2:	61a0      	str	r0, [r4, #24]
    &(getFont_SairaSemiCondensed_Medium_20_4bpp())
 80045b4:	f7ff fcf6 	bl	8003fa4 <_Z41getFont_SairaSemiCondensed_Medium_20_4bppv>
};
 80045b8:	61e0      	str	r0, [r4, #28]
} // namespace TypedTextDatabase
 80045ba:	bd10      	pop	{r4, pc}
 80045bc:	24005eec 	.word	0x24005eec

080045c0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 80045c0:	200b      	movs	r0, #11
 80045c2:	4770      	bx	lr

080045c4 <_ZN17TypedTextDatabase8getFontsEv>:
}
 80045c4:	4800      	ldr	r0, [pc, #0]	; (80045c8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80045c6:	4770      	bx	lr
 80045c8:	24005eec 	.word	0x24005eec

080045cc <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 80045cc:	b508      	push	{r3, lr}
 80045ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80045d2:	2001      	movs	r0, #1
 80045d4:	f7ff ffd0 	bl	8004578 <_Z41__static_initialization_and_destruction_0ii>
 80045d8:	bd08      	pop	{r3, pc}

080045da <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 80045da:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 80045dc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80045e0:	b113      	cbz	r3, 80045e8 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 80045e2:	6803      	ldr	r3, [r0, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4798      	blx	r3
        }
    }
 80045e8:	bd08      	pop	{r3, pc}

080045ea <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80045ea:	2000      	movs	r0, #0
 80045ec:	4770      	bx	lr

080045ee <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80045ee:	8081      	strh	r1, [r0, #4]
    }
 80045f0:	4770      	bx	lr

080045f2 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80045f2:	80c1      	strh	r1, [r0, #6]
    }
 80045f4:	4770      	bx	lr

080045f6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80045f6:	8101      	strh	r1, [r0, #8]
    }
 80045f8:	4770      	bx	lr

080045fa <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80045fa:	8141      	strh	r1, [r0, #10]
    }
 80045fc:	4770      	bx	lr

080045fe <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80045fe:	4770      	bx	lr

08004600 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8004600:	4770      	bx	lr

08004602 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8004602:	4770      	bx	lr

08004604 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8004604:	4770      	bx	lr

08004606 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8004606:	4770      	bx	lr

08004608 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004608:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 800460a:	6804      	ldr	r4, [r0, #0]
 800460c:	6d64      	ldr	r4, [r4, #84]	; 0x54
 800460e:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8004612:	eba1 010c 	sub.w	r1, r1, ip
 8004616:	88c3      	ldrh	r3, [r0, #6]
 8004618:	1ad2      	subs	r2, r2, r3
 800461a:	b212      	sxth	r2, r2
 800461c:	b209      	sxth	r1, r1
 800461e:	47a0      	blx	r4
    }
 8004620:	bd10      	pop	{r4, pc}

08004622 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004626:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004628:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800462a:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800462c:	6813      	ldr	r3, [r2, #0]
 800462e:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8004630:	6010      	str	r0, [r2, #0]
    }
 8004632:	4770      	bx	lr

08004634 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8004634:	4770      	bx	lr

08004636 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8004636:	4770      	bx	lr

08004638 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004638:	4770      	bx	lr

0800463a <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800463a:	4770      	bx	lr

0800463c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800463c:	4770      	bx	lr

0800463e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 800463e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8004642:	b11a      	cbz	r2, 800464c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 8004644:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8004648:	b102      	cbz	r2, 800464c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800464a:	6018      	str	r0, [r3, #0]
        }
    }
 800464c:	4770      	bx	lr
	...

08004650 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 8004652:	6002      	str	r2, [r0, #0]
    {
 8004654:	4a04      	ldr	r2, [pc, #16]	; (8004668 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 8004656:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8004658:	4a04      	ldr	r2, [pc, #16]	; (800466c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 800465a:	6042      	str	r2, [r0, #4]
    {
 800465c:	4a04      	ldr	r2, [pc, #16]	; (8004670 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 800465e:	6042      	str	r2, [r0, #4]
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	08025be0 	.word	0x08025be0
 8004668:	080271f4 	.word	0x080271f4
 800466c:	08026a1c 	.word	0x08026a1c
 8004670:	08027120 	.word	0x08027120

08004674 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004674:	4a02      	ldr	r2, [pc, #8]	; (8004680 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED1Ev+0xc>)
 8004676:	6002      	str	r2, [r0, #0]
    }
 8004678:	4a02      	ldr	r2, [pc, #8]	; (8004684 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED1Ev+0x10>)
 800467a:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	08025bc8 	.word	0x08025bc8
 8004684:	08025bb0 	.word	0x08025bb0

08004688 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7executeES3_>:
    virtual void execute(T1 t1)
 8004688:	b510      	push	{r4, lr}
 800468a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800468c:	6844      	ldr	r4, [r0, #4]
 800468e:	68c2      	ldr	r2, [r0, #12]
 8004690:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004694:	f012 0f01 	tst.w	r2, #1
 8004698:	d102      	bne.n	80046a0 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7executeES3_+0x18>
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4798      	blx	r3
    }
 800469e:	bd10      	pop	{r4, pc}
 80046a0:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 80046a4:	f854 200c 	ldr.w	r2, [r4, ip]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	58d3      	ldr	r3, [r2, r3]
 80046ac:	e7f6      	b.n	800469c <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7executeES3_+0x14>

080046ae <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80046ae:	6843      	ldr	r3, [r0, #4]
 80046b0:	b14b      	cbz	r3, 80046c6 <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv+0x18>
 80046b2:	6883      	ldr	r3, [r0, #8]
 80046b4:	b10b      	cbz	r3, 80046ba <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv+0xc>
 80046b6:	2001      	movs	r0, #1
 80046b8:	4770      	bx	lr
 80046ba:	68c3      	ldr	r3, [r0, #12]
 80046bc:	f013 0f01 	tst.w	r3, #1
 80046c0:	d003      	beq.n	80046ca <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv+0x1c>
 80046c2:	2001      	movs	r0, #1
 80046c4:	4770      	bx	lr
 80046c6:	2000      	movs	r0, #0
 80046c8:	4770      	bx	lr
 80046ca:	2000      	movs	r0, #0
    }
 80046cc:	4770      	bx	lr
	...

080046d0 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4604      	mov	r4, r0
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 80046d6:	6003      	str	r3, [r0, #0]
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 80046da:	6003      	str	r3, [r0, #0]
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 80046de:	6043      	str	r3, [r0, #4]
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 80046e2:	6043      	str	r3, [r0, #4]
 80046e4:	2140      	movs	r1, #64	; 0x40
 80046e6:	f01e fdfe 	bl	80232e6 <_ZdlPvj>
 80046ea:	4620      	mov	r0, r4
 80046ec:	bd10      	pop	{r4, pc}
 80046ee:	bf00      	nop
 80046f0:	08025be0 	.word	0x08025be0
 80046f4:	080271f4 	.word	0x080271f4
 80046f8:	08026a1c 	.word	0x08026a1c
 80046fc:	08027120 	.word	0x08027120

08004700 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004700:	b510      	push	{r4, lr}
 8004702:	4604      	mov	r4, r0
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED0Ev+0x18>)
 8004706:	6003      	str	r3, [r0, #0]
    }
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED0Ev+0x1c>)
 800470a:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800470c:	2110      	movs	r1, #16
 800470e:	f01e fdea 	bl	80232e6 <_ZdlPvj>
 8004712:	4620      	mov	r0, r4
 8004714:	bd10      	pop	{r4, pc}
 8004716:	bf00      	nop
 8004718:	08025bc8 	.word	0x08025bc8
 800471c:	08025bb0 	.word	0x08025bb0

08004720 <_ZN18mainScreenViewBase11setupScreenEv>:
    add(bg1);
    add(wifiMenu);
}

void mainScreenViewBase::setupScreen()
{
 8004720:	b508      	push	{r3, lr}
    wifiMenu.initialize();
 8004722:	3098      	adds	r0, #152	; 0x98
 8004724:	f002 ff11 	bl	800754a <_ZN17wifiMenuContainer10initializeEv>
}
 8004728:	bd08      	pop	{r3, pc}
	...

0800472c <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	4605      	mov	r5, r0
 8004730:	4607      	mov	r7, r0
 8004732:	4b19      	ldr	r3, [pc, #100]	; (8004798 <_ZN18mainScreenViewBaseD1Ev+0x6c>)
 8004734:	f847 3b98 	str.w	r3, [r7], #152

class wifiMenuContainer : public wifiMenuContainerBase
{
public:
    wifiMenuContainer();
    virtual ~wifiMenuContainer() {}
 8004738:	4b18      	ldr	r3, [pc, #96]	; (800479c <_ZN18mainScreenViewBaseD1Ev+0x70>)
 800473a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 800473e:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 8004742:	443c      	add	r4, r7
 8004744:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <_ZN18mainScreenViewBaseD1Ev+0x74>)
 800474a:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 800474e:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <_ZN18mainScreenViewBaseD1Ev+0x78>)
 8004750:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 8004754:	f510 76f0 	adds.w	r6, r0, #480	; 0x1e0
 8004758:	d008      	beq.n	800476c <_ZN18mainScreenViewBaseD1Ev+0x40>
 800475a:	42a6      	cmp	r6, r4
 800475c:	d006      	beq.n	800476c <_ZN18mainScreenViewBaseD1Ev+0x40>
 800475e:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4620      	mov	r0, r4
 8004768:	4798      	blx	r3
 800476a:	e7f6      	b.n	800475a <_ZN18mainScreenViewBaseD1Ev+0x2e>
 800476c:	4638      	mov	r0, r7
 800476e:	f000 fe61 	bl	8005434 <_ZN21wifiMenuContainerBaseD1Ev>
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <_ZN18mainScreenViewBaseD1Ev+0x7c>)
 8004774:	66eb      	str	r3, [r5, #108]	; 0x6c
class Widget : public Drawable
 8004776:	4a0d      	ldr	r2, [pc, #52]	; (80047ac <_ZN18mainScreenViewBaseD1Ev+0x80>)
 8004778:	66ea      	str	r2, [r5, #108]	; 0x6c
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <_ZN18mainScreenViewBaseD1Ev+0x84>)
 800477c:	66eb      	str	r3, [r5, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 800477e:	490d      	ldr	r1, [pc, #52]	; (80047b4 <_ZN18mainScreenViewBaseD1Ev+0x88>)
 8004780:	6429      	str	r1, [r5, #64]	; 0x40
 8004782:	642a      	str	r2, [r5, #64]	; 0x40
 8004784:	642b      	str	r3, [r5, #64]	; 0x40
 8004786:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <_ZN18mainScreenViewBaseD1Ev+0x8c>)
 8004788:	602a      	str	r2, [r5, #0]
 800478a:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <_ZN18mainScreenViewBaseD1Ev+0x90>)
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	4a0c      	ldr	r2, [pc, #48]	; (80047c0 <_ZN18mainScreenViewBaseD1Ev+0x94>)
 8004790:	606a      	str	r2, [r5, #4]
 8004792:	606b      	str	r3, [r5, #4]
 8004794:	4628      	mov	r0, r5
 8004796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004798:	08025c14 	.word	0x08025c14
 800479c:	080265ac 	.word	0x080265ac
 80047a0:	08025bc8 	.word	0x08025bc8
 80047a4:	08025bb0 	.word	0x08025bb0
 80047a8:	08026f80 	.word	0x08026f80
 80047ac:	08025b48 	.word	0x08025b48
 80047b0:	08027120 	.word	0x08027120
 80047b4:	08026e20 	.word	0x08026e20
 80047b8:	08025be0 	.word	0x08025be0
 80047bc:	080271f4 	.word	0x080271f4
 80047c0:	08026a1c 	.word	0x08026a1c

080047c4 <_ZN18mainScreenViewBaseD0Ev>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	4605      	mov	r5, r0
 80047c8:	4607      	mov	r7, r0
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <_ZN18mainScreenViewBaseD0Ev+0x78>)
 80047cc:	f847 3b98 	str.w	r3, [r7], #152
 80047d0:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <_ZN18mainScreenViewBaseD0Ev+0x7c>)
 80047d2:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 80047d6:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 80047da:	443c      	add	r4, r7
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80047dc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80047e0:	4a18      	ldr	r2, [pc, #96]	; (8004844 <_ZN18mainScreenViewBaseD0Ev+0x80>)
 80047e2:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 80047e6:	4a18      	ldr	r2, [pc, #96]	; (8004848 <_ZN18mainScreenViewBaseD0Ev+0x84>)
 80047e8:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 80047ec:	f510 76f0 	adds.w	r6, r0, #480	; 0x1e0
 80047f0:	d008      	beq.n	8004804 <_ZN18mainScreenViewBaseD0Ev+0x40>
 80047f2:	42a6      	cmp	r6, r4
 80047f4:	d006      	beq.n	8004804 <_ZN18mainScreenViewBaseD0Ev+0x40>
 80047f6:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4620      	mov	r0, r4
 8004800:	4798      	blx	r3
 8004802:	e7f6      	b.n	80047f2 <_ZN18mainScreenViewBaseD0Ev+0x2e>
 8004804:	4638      	mov	r0, r7
 8004806:	f000 fe15 	bl	8005434 <_ZN21wifiMenuContainerBaseD1Ev>
 800480a:	4b10      	ldr	r3, [pc, #64]	; (800484c <_ZN18mainScreenViewBaseD0Ev+0x88>)
 800480c:	66eb      	str	r3, [r5, #108]	; 0x6c
 800480e:	4a10      	ldr	r2, [pc, #64]	; (8004850 <_ZN18mainScreenViewBaseD0Ev+0x8c>)
 8004810:	66ea      	str	r2, [r5, #108]	; 0x6c
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <_ZN18mainScreenViewBaseD0Ev+0x90>)
 8004814:	66eb      	str	r3, [r5, #108]	; 0x6c
 8004816:	4910      	ldr	r1, [pc, #64]	; (8004858 <_ZN18mainScreenViewBaseD0Ev+0x94>)
 8004818:	6429      	str	r1, [r5, #64]	; 0x40
 800481a:	642a      	str	r2, [r5, #64]	; 0x40
 800481c:	642b      	str	r3, [r5, #64]	; 0x40
 800481e:	4a0f      	ldr	r2, [pc, #60]	; (800485c <_ZN18mainScreenViewBaseD0Ev+0x98>)
 8004820:	602a      	str	r2, [r5, #0]
 8004822:	4a0f      	ldr	r2, [pc, #60]	; (8004860 <_ZN18mainScreenViewBaseD0Ev+0x9c>)
 8004824:	602a      	str	r2, [r5, #0]
 8004826:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <_ZN18mainScreenViewBaseD0Ev+0xa0>)
 8004828:	606a      	str	r2, [r5, #4]
 800482a:	606b      	str	r3, [r5, #4]
 800482c:	f642 4170 	movw	r1, #11376	; 0x2c70
 8004830:	4628      	mov	r0, r5
 8004832:	f01e fd58 	bl	80232e6 <_ZdlPvj>
 8004836:	4628      	mov	r0, r5
 8004838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800483a:	bf00      	nop
 800483c:	08025c14 	.word	0x08025c14
 8004840:	080265ac 	.word	0x080265ac
 8004844:	08025bc8 	.word	0x08025bc8
 8004848:	08025bb0 	.word	0x08025bb0
 800484c:	08026f80 	.word	0x08026f80
 8004850:	08025b48 	.word	0x08025b48
 8004854:	08027120 	.word	0x08027120
 8004858:	08026e20 	.word	0x08026e20
 800485c:	08025be0 	.word	0x08025be0
 8004860:	080271f4 	.word	0x080271f4
 8004864:	08026a1c 	.word	0x08026a1c

08004868 <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	b083      	sub	sp, #12
 800486e:	4605      	mov	r5, r0
        : presenter(0)
 8004870:	f014 fe1a 	bl	80194a8 <_ZN8touchgfx6ScreenC1Ev>
 8004874:	4b53      	ldr	r3, [pc, #332]	; (80049c4 <_ZN18mainScreenViewBaseC1Ev+0x15c>)
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	2400      	movs	r4, #0
 800487a:	63ec      	str	r4, [r5, #60]	; 0x3c
 800487c:	462e      	mov	r6, r5
 800487e:	4b52      	ldr	r3, [pc, #328]	; (80049c8 <_ZN18mainScreenViewBaseC1Ev+0x160>)
 8004880:	f846 3b40 	str.w	r3, [r6], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8004884:	f04f 0926 	mov.w	r9, #38	; 0x26
 8004888:	464a      	mov	r2, r9
 800488a:	4621      	mov	r1, r4
 800488c:	4630      	mov	r0, r6
 800488e:	f01e feef 	bl	8023670 <memset>
          visible(true)
 8004892:	f8df b144 	ldr.w	fp, [pc, #324]	; 80049d8 <_ZN18mainScreenViewBaseC1Ev+0x170>
 8004896:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 800489a:	80b4      	strh	r4, [r6, #4]
 800489c:	80f4      	strh	r4, [r6, #6]
 800489e:	8134      	strh	r4, [r6, #8]
 80048a0:	8174      	strh	r4, [r6, #10]
 80048a2:	81b4      	strh	r4, [r6, #12]
 80048a4:	81f4      	strh	r4, [r6, #14]
 80048a6:	8234      	strh	r4, [r6, #16]
 80048a8:	8274      	strh	r4, [r6, #18]
 80048aa:	6174      	str	r4, [r6, #20]
 80048ac:	61b4      	str	r4, [r6, #24]
 80048ae:	61f4      	str	r4, [r6, #28]
 80048b0:	8434      	strh	r4, [r6, #32]
 80048b2:	8474      	strh	r4, [r6, #34]	; 0x22
 80048b4:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 80048b8:	f04f 0a01 	mov.w	sl, #1
 80048bc:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 80048c0:	4b42      	ldr	r3, [pc, #264]	; (80049cc <_ZN18mainScreenViewBaseC1Ev+0x164>)
 80048c2:	642b      	str	r3, [r5, #64]	; 0x40
 80048c4:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <_ZN18mainScreenViewBaseC1Ev+0x168>)
 80048c6:	642b      	str	r3, [r5, #64]	; 0x40
 80048c8:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80048cc:	f886 8026 	strb.w	r8, [r6, #38]	; 0x26
        : color(col)
 80048d0:	62b4      	str	r4, [r6, #40]	; 0x28
 80048d2:	f105 076c 	add.w	r7, r5, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80048d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048da:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 80048de:	464a      	mov	r2, r9
 80048e0:	4621      	mov	r1, r4
 80048e2:	4638      	mov	r0, r7
 80048e4:	f01e fec4 	bl	8023670 <memset>
 80048e8:	f8c5 b06c 	str.w	fp, [r5, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 80048ec:	80bc      	strh	r4, [r7, #4]
 80048ee:	80fc      	strh	r4, [r7, #6]
 80048f0:	813c      	strh	r4, [r7, #8]
 80048f2:	817c      	strh	r4, [r7, #10]
 80048f4:	81bc      	strh	r4, [r7, #12]
 80048f6:	81fc      	strh	r4, [r7, #14]
 80048f8:	823c      	strh	r4, [r7, #16]
 80048fa:	827c      	strh	r4, [r7, #18]
 80048fc:	617c      	str	r4, [r7, #20]
 80048fe:	61bc      	str	r4, [r7, #24]
 8004900:	61fc      	str	r4, [r7, #28]
 8004902:	843c      	strh	r4, [r7, #32]
 8004904:	847c      	strh	r4, [r7, #34]	; 0x22
 8004906:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 800490a:	f887 a025 	strb.w	sl, [r7, #37]	; 0x25
 800490e:	4b2f      	ldr	r3, [pc, #188]	; (80049cc <_ZN18mainScreenViewBaseC1Ev+0x164>)
 8004910:	66eb      	str	r3, [r5, #108]	; 0x6c
 8004912:	4b30      	ldr	r3, [pc, #192]	; (80049d4 <_ZN18mainScreenViewBaseC1Ev+0x16c>)
 8004914:	66eb      	str	r3, [r5, #108]	; 0x6c
 8004916:	f8bd 3000 	ldrh.w	r3, [sp]
 800491a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800491c:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8004920:	4669      	mov	r1, sp
 8004922:	4638      	mov	r0, r7
 8004924:	f011 fad5 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004928:	f105 0898 	add.w	r8, r5, #152	; 0x98
 800492c:	4640      	mov	r0, r8
 800492e:	f002 fdd1 	bl	80074d4 <_ZN17wifiMenuContainerC1Ev>
        setX(x);
 8004932:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	4621      	mov	r1, r4
 8004938:	4630      	mov	r0, r6
 800493a:	4798      	blx	r3
        setY(y);
 800493c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	4621      	mov	r1, r4
 8004942:	4630      	mov	r0, r6
 8004944:	4798      	blx	r3
        setWidth(width);
 8004946:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800494e:	4630      	mov	r0, r6
 8004950:	4798      	blx	r3
        setHeight(height);
 8004952:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	f44f 7188 	mov.w	r1, #272	; 0x110
 800495a:	4630      	mov	r0, r6
 800495c:	4798      	blx	r3
        : color(col)
 800495e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004962:	66ab      	str	r3, [r5, #104]	; 0x68
        setX(x);
 8004964:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	4621      	mov	r1, r4
 800496a:	4638      	mov	r0, r7
 800496c:	4798      	blx	r3
        setY(y);
 800496e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8004970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004972:	4621      	mov	r1, r4
 8004974:	4638      	mov	r0, r7
 8004976:	4798      	blx	r3
 8004978:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 800497c:	a901      	add	r1, sp, #4
 800497e:	4638      	mov	r0, r7
 8004980:	f011 faa7 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 8004984:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	4621      	mov	r1, r4
 800498c:	4640      	mov	r0, r8
 800498e:	4798      	blx	r3
        setY(y);
 8004990:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	4621      	mov	r1, r4
 8004998:	4640      	mov	r0, r8
 800499a:	4798      	blx	r3
        visible = vis;
 800499c:	f885 40bd 	strb.w	r4, [r5, #189]	; 0xbd
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80049a0:	1d2c      	adds	r4, r5, #4
 80049a2:	4631      	mov	r1, r6
 80049a4:	4620      	mov	r0, r4
 80049a6:	f00e fb79 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80049aa:	4639      	mov	r1, r7
 80049ac:	4620      	mov	r0, r4
 80049ae:	f00e fb75 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80049b2:	4641      	mov	r1, r8
 80049b4:	4620      	mov	r0, r4
 80049b6:	f00e fb71 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80049ba:	4628      	mov	r0, r5
 80049bc:	b003      	add	sp, #12
 80049be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c2:	bf00      	nop
 80049c4:	08025be0 	.word	0x08025be0
 80049c8:	08025c14 	.word	0x08025c14
 80049cc:	08025b48 	.word	0x08025b48
 80049d0:	08026e20 	.word	0x08026e20
 80049d4:	08026f80 	.word	0x08026f80
 80049d8:	08027120 	.word	0x08027120

080049dc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80049dc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80049de:	4770      	bx	lr

080049e0 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80049e0:	b530      	push	{r4, r5, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	4604      	mov	r4, r0
        rect.width = width;
 80049e6:	8101      	strh	r1, [r0, #8]
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80049e8:	466d      	mov	r5, sp
 80049ea:	6803      	ldr	r3, [r0, #0]
 80049ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f0:	4601      	mov	r1, r0
 80049f2:	4628      	mov	r0, r5
 80049f4:	4798      	blx	r3
 80049f6:	343c      	adds	r4, #60	; 0x3c
 80049f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004a00:	b005      	add	sp, #20
 8004a02:	bd30      	pop	{r4, r5, pc}

08004a04 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8004a04:	b530      	push	{r4, r5, lr}
 8004a06:	b085      	sub	sp, #20
 8004a08:	4604      	mov	r4, r0
        rect.height = height;
 8004a0a:	8141      	strh	r1, [r0, #10]
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004a0c:	466d      	mov	r5, sp
 8004a0e:	6803      	ldr	r3, [r0, #0]
 8004a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a14:	4601      	mov	r1, r0
 8004a16:	4628      	mov	r0, r5
 8004a18:	4798      	blx	r3
 8004a1a:	343c      	adds	r4, #60	; 0x3c
 8004a1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004a24:	b005      	add	sp, #20
 8004a26:	bd30      	pop	{r4, r5, pc}

08004a28 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	8002      	strh	r2, [r0, #0]
 8004a2c:	8042      	strh	r2, [r0, #2]
 8004a2e:	8082      	strh	r2, [r0, #4]
 8004a30:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8004a32:	4770      	bx	lr

08004a34 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004a34:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8004a38:	4770      	bx	lr

08004a3a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004a3a:	b538      	push	{r3, r4, r5, lr}
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	4615      	mov	r5, r2
    {
        setX(x);
 8004a40:	6803      	ldr	r3, [r0, #0]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	4798      	blx	r3
        setBaselineY(baselineY);
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	4798      	blx	r3
    }
 8004a50:	bd38      	pop	{r3, r4, r5, pc}

08004a52 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8004a52:	2000      	movs	r0, #0
 8004a54:	4770      	bx	lr

08004a56 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004a56:	2200      	movs	r2, #0
 8004a58:	8002      	strh	r2, [r0, #0]
 8004a5a:	8042      	strh	r2, [r0, #2]
 8004a5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a60:	8081      	strh	r1, [r0, #4]
 8004a62:	80c1      	strh	r1, [r0, #6]
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8004a64:	6082      	str	r2, [r0, #8]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 8004a66:	4770      	bx	lr

08004a68 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8004a68:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8004a6a:	4770      	bx	lr

08004a6c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004a6c:	4a06      	ldr	r2, [pc, #24]	; (8004a88 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x1c>)
 8004a6e:	6002      	str	r2, [r0, #0]
class TextAreaWithWildcardBase : public TextArea
 8004a70:	4a06      	ldr	r2, [pc, #24]	; (8004a8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8004a72:	6002      	str	r2, [r0, #0]
class TextArea : public Widget
 8004a74:	4a06      	ldr	r2, [pc, #24]	; (8004a90 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x24>)
 8004a76:	6002      	str	r2, [r0, #0]
    {
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x28>)
 8004a7a:	6282      	str	r2, [r0, #40]	; 0x28
 8004a7c:	4a06      	ldr	r2, [pc, #24]	; (8004a98 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x2c>)
 8004a7e:	6002      	str	r2, [r0, #0]
    {
 8004a80:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x30>)
 8004a82:	6002      	str	r2, [r0, #0]
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	08025d50 	.word	0x08025d50
 8004a8c:	08026e88 	.word	0x08026e88
 8004a90:	08026d90 	.word	0x08026d90
 8004a94:	08024fe8 	.word	0x08024fe8
 8004a98:	08025b48 	.word	0x08025b48
 8004a9c:	08027120 	.word	0x08027120

08004aa0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x28>)
 8004aa6:	6003      	str	r3, [r0, #0]
class TextAreaWithWildcardBase : public TextArea
 8004aa8:	4b08      	ldr	r3, [pc, #32]	; (8004acc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x2c>)
 8004aaa:	6003      	str	r3, [r0, #0]
 8004aac:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x30>)
 8004aae:	6003      	str	r3, [r0, #0]
 8004ab0:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x34>)
 8004ab2:	6283      	str	r3, [r0, #40]	; 0x28
 8004ab4:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x38>)
 8004ab6:	6003      	str	r3, [r0, #0]
 8004ab8:	4b08      	ldr	r3, [pc, #32]	; (8004adc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x3c>)
 8004aba:	6003      	str	r3, [r0, #0]
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004abc:	214c      	movs	r1, #76	; 0x4c
 8004abe:	f01e fc12 	bl	80232e6 <_ZdlPvj>
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08025d50 	.word	0x08025d50
 8004acc:	08026e88 	.word	0x08026e88
 8004ad0:	08026d90 	.word	0x08026d90
 8004ad4:	08024fe8 	.word	0x08024fe8
 8004ad8:	08025b48 	.word	0x08025b48
 8004adc:	08027120 	.word	0x08027120

08004ae0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
    virtual void setBaselineY(int16_t baselineY)
 8004ae0:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004ae2:	6803      	ldr	r3, [r0, #0]
 8004ae4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	b1a3      	cbz	r3, 8004b16 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 8004aec:	4604      	mov	r4, r0
 8004aee:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
 8004af0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8004af2:	4910      	ldr	r1, [pc, #64]	; (8004b34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8004af4:	8809      	ldrh	r1, [r1, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004af6:	428a      	cmp	r2, r1
 8004af8:	d213      	bcs.n	8004b22 <_ZN8touchgfx8TextArea12setBaselineYEs+0x42>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004afa:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004b06:	6803      	ldr	r3, [r0, #0]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	4798      	blx	r3
 8004b0c:	1a31      	subs	r1, r6, r0
 8004b0e:	b209      	sxth	r1, r1
 8004b10:	4620      	mov	r0, r4
 8004b12:	47a8      	blx	r5
    }
 8004b14:	bd70      	pop	{r4, r5, r6, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004b18:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004b1a:	216c      	movs	r1, #108	; 0x6c
 8004b1c:	4809      	ldr	r0, [pc, #36]	; (8004b44 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004b1e:	f01e fc11 	bl	8023344 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004b22:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004b24:	4a06      	ldr	r2, [pc, #24]	; (8004b40 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004b26:	216d      	movs	r1, #109	; 0x6d
 8004b28:	4806      	ldr	r0, [pc, #24]	; (8004b44 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004b2a:	f01e fc0b 	bl	8023344 <__assert_func>
 8004b2e:	bf00      	nop
 8004b30:	2400ff64 	.word	0x2400ff64
 8004b34:	2400ff68 	.word	0x2400ff68
 8004b38:	2400ff6c 	.word	0x2400ff6c
 8004b3c:	08025c40 	.word	0x08025c40
 8004b40:	08025c84 	.word	0x08025c84
 8004b44:	08025cc0 	.word	0x08025cc0
 8004b48:	08025d08 	.word	0x08025d08

08004b4c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8004b50:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004b52:	b140      	cbz	r0, 8004b66 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
 8004b54:	6803      	ldr	r3, [r0, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4798      	blx	r3
 8004b5a:	b120      	cbz	r0, 8004b66 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
        {
            action->execute(*this);
 8004b5c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004b5e:	6803      	ldr	r3, [r0, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	4621      	mov	r1, r4
 8004b64:	4798      	blx	r3
        }
    }
 8004b66:	bd10      	pop	{r4, pc}

08004b68 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
    {
    }
 8004b68:	4770      	bx	lr

08004b6a <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
    {
    }
 8004b6a:	4770      	bx	lr

08004b6c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4604      	mov	r4, r0
 8004b70:	460d      	mov	r5, r1
        return pressed;
 8004b72:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8004b76:	790b      	ldrb	r3, [r1, #4]
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0d      	iteet	eq
 8004b7c:	2201      	moveq	r2, #1
 8004b7e:	2200      	movne	r2, #0
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	42b3      	cmp	r3, r6
 8004b86:	d004      	beq.n	8004b92 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x26>
        {
            setPressed(newPressedValue);
            invalidate();
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8004b88:	b116      	cbz	r6, 8004b90 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x24>
 8004b8a:	792b      	ldrb	r3, [r5, #4]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d00b      	beq.n	8004ba8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
        {
            executeAction();
        }
    }
 8004b90:	bd70      	pop	{r4, r5, r6, pc}
        pressed = isPressed;
 8004b92:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
        handlePressedUpdated();
 8004b96:	6803      	ldr	r3, [r0, #0]
 8004b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9c:	4798      	blx	r3
            invalidate();
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	4798      	blx	r3
 8004ba6:	e7ef      	b.n	8004b88 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1c>
            executeAction();
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	4620      	mov	r0, r4
 8004bb0:	4798      	blx	r3
    }
 8004bb2:	e7ed      	b.n	8004b90 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x24>

08004bb4 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 8004bb4:	4a03      	ldr	r2, [pc, #12]	; (8004bc4 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x10>)
 8004bb6:	6002      	str	r2, [r0, #0]
class Container : public Drawable
 8004bb8:	4a03      	ldr	r2, [pc, #12]	; (8004bc8 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x14>)
 8004bba:	6002      	str	r2, [r0, #0]
 8004bbc:	4a03      	ldr	r2, [pc, #12]	; (8004bcc <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x18>)
 8004bbe:	6002      	str	r2, [r0, #0]
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	08025e1c 	.word	0x08025e1c
 8004bc8:	08026a1c 	.word	0x08026a1c
 8004bcc:	08027120 	.word	0x08027120

08004bd0 <_ZN26wifiInfoLargeContainerBase15elementSelectedEv>:
     * Virtual Action Handlers
     */
    virtual void elementSelected()
    {
        // Override and implement this function in wifiInfoLargeContainer
    }
 8004bd0:	4770      	bx	lr
	...

08004bd4 <_ZN26wifiInfoLargeContainerBaseD1Ev>:
    add(encryption);
    add(signalStrengthIcon);
    add(listButtonOverlay);
}

wifiInfoLargeContainerBase::~wifiInfoLargeContainerBase()
 8004bd4:	b4f0      	push	{r4, r5, r6, r7}
 8004bd6:	4a20      	ldr	r2, [pc, #128]	; (8004c58 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x84>)
 8004bd8:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004bda:	4a20      	ldr	r2, [pc, #128]	; (8004c5c <_ZN26wifiInfoLargeContainerBaseD1Ev+0x88>)
 8004bdc:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
    }
 8004be0:	4a1f      	ldr	r2, [pc, #124]	; (8004c60 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x8c>)
 8004be2:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 8004be6:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x90>)
 8004be8:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 8004bec:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x94>)
 8004bee:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
class Box : public Widget
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <_ZN26wifiInfoLargeContainerBaseD1Ev+0x98>)
 8004bf4:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8004bf8:	491d      	ldr	r1, [pc, #116]	; (8004c70 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x9c>)
 8004bfa:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
 8004bfe:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xa0>)
 8004c00:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
class ClickButtonTrigger : public AbstractButtonContainer
 8004c04:	4c1c      	ldr	r4, [pc, #112]	; (8004c78 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xa4>)
 8004c06:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
 8004c0a:	4c1c      	ldr	r4, [pc, #112]	; (8004c7c <_ZN26wifiInfoLargeContainerBaseD1Ev+0xa8>)
 8004c0c:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
 8004c10:	4c1b      	ldr	r4, [pc, #108]	; (8004c80 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xac>)
 8004c12:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
 8004c16:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
class Image : public Widget
 8004c1a:	4d1a      	ldr	r5, [pc, #104]	; (8004c84 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xb0>)
 8004c1c:	f8c0 50c4 	str.w	r5, [r0, #196]	; 0xc4
 8004c20:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 8004c24:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 8004c28:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004c94 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xc0>
 8004c2c:	f8c0 c078 	str.w	ip, [r0, #120]	; 0x78
class TextAreaWithWildcardBase : public TextArea
 8004c30:	4f15      	ldr	r7, [pc, #84]	; (8004c88 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xb4>)
 8004c32:	6787      	str	r7, [r0, #120]	; 0x78
class TextArea : public Widget
 8004c34:	4e15      	ldr	r6, [pc, #84]	; (8004c8c <_ZN26wifiInfoLargeContainerBaseD1Ev+0xb8>)
 8004c36:	6786      	str	r6, [r0, #120]	; 0x78
    {
 8004c38:	4d15      	ldr	r5, [pc, #84]	; (8004c90 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xbc>)
 8004c3a:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
 8004c3e:	6781      	str	r1, [r0, #120]	; 0x78
 8004c40:	6782      	str	r2, [r0, #120]	; 0x78
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004c42:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
class TextAreaWithWildcardBase : public TextArea
 8004c46:	62c7      	str	r7, [r0, #44]	; 0x2c
 8004c48:	62c6      	str	r6, [r0, #44]	; 0x2c
 8004c4a:	6545      	str	r5, [r0, #84]	; 0x54
 8004c4c:	62c1      	str	r1, [r0, #44]	; 0x2c
 8004c4e:	62c2      	str	r2, [r0, #44]	; 0x2c
 8004c50:	6004      	str	r4, [r0, #0]
 8004c52:	6002      	str	r2, [r0, #0]
{

}
 8004c54:	bcf0      	pop	{r4, r5, r6, r7}
 8004c56:	4770      	bx	lr
 8004c58:	08026020 	.word	0x08026020
 8004c5c:	08026008 	.word	0x08026008
 8004c60:	08025eb8 	.word	0x08025eb8
 8004c64:	08025f6c 	.word	0x08025f6c
 8004c68:	08026f18 	.word	0x08026f18
 8004c6c:	08026e20 	.word	0x08026e20
 8004c70:	08025b48 	.word	0x08025b48
 8004c74:	08027120 	.word	0x08027120
 8004c78:	08025ed0 	.word	0x08025ed0
 8004c7c:	08025e1c 	.word	0x08025e1c
 8004c80:	08026a1c 	.word	0x08026a1c
 8004c84:	08026f80 	.word	0x08026f80
 8004c88:	08026e88 	.word	0x08026e88
 8004c8c:	08026d90 	.word	0x08026d90
 8004c90:	08024fe8 	.word	0x08024fe8
 8004c94:	08025d50 	.word	0x08025d50

08004c98 <_ZN26wifiInfoLargeContainerBase10initializeEv>:

void wifiInfoLargeContainerBase::initialize()
{

}
 8004c98:	4770      	bx	lr

08004c9a <_ZN26wifiInfoLargeContainerBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void wifiInfoLargeContainerBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8004c9a:	b508      	push	{r3, lr}
    if (&src == &listButtonOverlay)
 8004c9c:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	d000      	beq.n	8004ca6 <_ZN26wifiInfoLargeContainerBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc>
        //Interaction1
        //When listButtonOverlay clicked call virtual function
        //Call elementSelected
        elementSelected();
    }
}
 8004ca4:	bd08      	pop	{r3, pc}
        elementSelected();
 8004ca6:	6803      	ldr	r3, [r0, #0]
 8004ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cac:	4798      	blx	r3
}
 8004cae:	e7f9      	b.n	8004ca4 <_ZN26wifiInfoLargeContainerBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>

08004cb0 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
 8004cb0:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x14>)
 8004cb2:	6002      	str	r2, [r0, #0]
 8004cb4:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x18>)
 8004cb6:	6002      	str	r2, [r0, #0]
 8004cb8:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x1c>)
 8004cba:	6002      	str	r2, [r0, #0]
 8004cbc:	4a04      	ldr	r2, [pc, #16]	; (8004cd0 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8004cbe:	6002      	str	r2, [r0, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	08025ed0 	.word	0x08025ed0
 8004cc8:	08025e1c 	.word	0x08025e1c
 8004ccc:	08026a1c 	.word	0x08026a1c
 8004cd0:	08027120 	.word	0x08027120

08004cd4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
        return pressed;
 8004cd4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8004cd8:	b14b      	cbz	r3, 8004cee <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x1a>
 8004cda:	f100 026c 	add.w	r2, r0, #108	; 0x6c
 8004cde:	6812      	ldr	r2, [r2, #0]
        color = newColor;
 8004ce0:	65c2      	str	r2, [r0, #92]	; 0x5c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004ce2:	b13b      	cbz	r3, 8004cf4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x20>
 8004ce4:	f100 0374 	add.w	r3, r0, #116	; 0x74
 8004ce8:	681b      	ldr	r3, [r3, #0]
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 8004cea:	6603      	str	r3, [r0, #96]	; 0x60
        T::handlePressedUpdated();
    }
 8004cec:	4770      	bx	lr
        borderBox.setColor(T::getPressed() ? down : up);
 8004cee:	f100 0268 	add.w	r2, r0, #104	; 0x68
 8004cf2:	e7f4      	b.n	8004cde <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xa>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004cf4:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8004cf8:	e7f6      	b.n	8004ce8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x14>
	...

08004cfc <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004cfc:	4a02      	ldr	r2, [pc, #8]	; (8004d08 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED1Ev+0xc>)
 8004cfe:	6002      	str	r2, [r0, #0]
    }
 8004d00:	4a02      	ldr	r2, [pc, #8]	; (8004d0c <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x10>)
 8004d02:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	08026008 	.word	0x08026008
 8004d0c:	08025eb8 	.word	0x08025eb8

08004d10 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 8004d10:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x24>)
 8004d12:	6002      	str	r2, [r0, #0]
class BoxWithBorder : public Box
 8004d14:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x28>)
 8004d16:	6342      	str	r2, [r0, #52]	; 0x34
class Box : public Widget
 8004d18:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8004d1a:	6342      	str	r2, [r0, #52]	; 0x34
 8004d1c:	4a08      	ldr	r2, [pc, #32]	; (8004d40 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x30>)
 8004d1e:	6342      	str	r2, [r0, #52]	; 0x34
 8004d20:	4a08      	ldr	r2, [pc, #32]	; (8004d44 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x34>)
 8004d22:	6342      	str	r2, [r0, #52]	; 0x34
 8004d24:	4908      	ldr	r1, [pc, #32]	; (8004d48 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x38>)
 8004d26:	6001      	str	r1, [r0, #0]
class AbstractButtonContainer : public Container
 8004d28:	4908      	ldr	r1, [pc, #32]	; (8004d4c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x3c>)
 8004d2a:	6001      	str	r1, [r0, #0]
 8004d2c:	4908      	ldr	r1, [pc, #32]	; (8004d50 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x40>)
 8004d2e:	6001      	str	r1, [r0, #0]
 8004d30:	6002      	str	r2, [r0, #0]
 8004d32:	4770      	bx	lr
 8004d34:	08025f6c 	.word	0x08025f6c
 8004d38:	08026f18 	.word	0x08026f18
 8004d3c:	08026e20 	.word	0x08026e20
 8004d40:	08025b48 	.word	0x08025b48
 8004d44:	08027120 	.word	0x08027120
 8004d48:	08025ed0 	.word	0x08025ed0
 8004d4c:	08025e1c 	.word	0x08025e1c
 8004d50:	08026a1c 	.word	0x08026a1c

08004d54 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004d54:	b510      	push	{r4, lr}
 8004d56:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004d58:	6844      	ldr	r4, [r0, #4]
 8004d5a:	68c2      	ldr	r2, [r0, #12]
 8004d5c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004d60:	f012 0f01 	tst.w	r2, #1
 8004d64:	d102      	bne.n	8004d6c <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x18>
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4798      	blx	r3
    }
 8004d6a:	bd10      	pop	{r4, pc}
 8004d6c:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8004d70:	f854 200c 	ldr.w	r2, [r4, ip]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	58d3      	ldr	r3, [r2, r3]
 8004d78:	e7f6      	b.n	8004d68 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x14>

08004d7a <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8004d7a:	6843      	ldr	r3, [r0, #4]
 8004d7c:	b14b      	cbz	r3, 8004d92 <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x18>
 8004d7e:	6883      	ldr	r3, [r0, #8]
 8004d80:	b10b      	cbz	r3, 8004d86 <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
 8004d82:	2001      	movs	r0, #1
 8004d84:	4770      	bx	lr
 8004d86:	68c3      	ldr	r3, [r0, #12]
 8004d88:	f013 0f01 	tst.w	r3, #1
 8004d8c:	d003      	beq.n	8004d96 <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x1c>
 8004d8e:	2001      	movs	r0, #1
 8004d90:	4770      	bx	lr
 8004d92:	2000      	movs	r0, #0
 8004d94:	4770      	bx	lr
 8004d96:	2000      	movs	r0, #0
    }
 8004d98:	4770      	bx	lr

08004d9a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
        return alpha;
 8004d9a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004d9e:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        borderBox.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8004da2:	4770      	bx	lr

08004da4 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
class AbstractButtonContainer : public Container
 8004da4:	b510      	push	{r4, lr}
 8004da6:	4604      	mov	r4, r0
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <_ZN8touchgfx23AbstractButtonContainerD0Ev+0x1c>)
 8004daa:	6003      	str	r3, [r0, #0]
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <_ZN8touchgfx23AbstractButtonContainerD0Ev+0x20>)
 8004dae:	6003      	str	r3, [r0, #0]
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <_ZN8touchgfx23AbstractButtonContainerD0Ev+0x24>)
 8004db2:	6003      	str	r3, [r0, #0]
 8004db4:	2134      	movs	r1, #52	; 0x34
 8004db6:	f01e fa96 	bl	80232e6 <_ZdlPvj>
 8004dba:	4620      	mov	r0, r4
 8004dbc:	bd10      	pop	{r4, pc}
 8004dbe:	bf00      	nop
 8004dc0:	08025e1c 	.word	0x08025e1c
 8004dc4:	08026a1c 	.word	0x08026a1c
 8004dc8:	08027120 	.word	0x08027120

08004dcc <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8004dcc:	b510      	push	{r4, lr}
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x20>)
 8004dd2:	6003      	str	r3, [r0, #0]
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x24>)
 8004dd6:	6003      	str	r3, [r0, #0]
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x28>)
 8004dda:	6003      	str	r3, [r0, #0]
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x2c>)
 8004dde:	6003      	str	r3, [r0, #0]
 8004de0:	2134      	movs	r1, #52	; 0x34
 8004de2:	f01e fa80 	bl	80232e6 <_ZdlPvj>
 8004de6:	4620      	mov	r0, r4
 8004de8:	bd10      	pop	{r4, pc}
 8004dea:	bf00      	nop
 8004dec:	08025ed0 	.word	0x08025ed0
 8004df0:	08025e1c 	.word	0x08025e1c
 8004df4:	08026a1c 	.word	0x08026a1c
 8004df8:	08027120 	.word	0x08027120

08004dfc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class BoxWithBorderButtonStyle : public T
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	4604      	mov	r4, r0
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x30>)
 8004e02:	6003      	str	r3, [r0, #0]
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x34>)
 8004e06:	6343      	str	r3, [r0, #52]	; 0x34
class Box : public Widget
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x38>)
 8004e0a:	6343      	str	r3, [r0, #52]	; 0x34
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x3c>)
 8004e0e:	6343      	str	r3, [r0, #52]	; 0x34
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x40>)
 8004e12:	6343      	str	r3, [r0, #52]	; 0x34
 8004e14:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x44>)
 8004e16:	6002      	str	r2, [r0, #0]
 8004e18:	4a0a      	ldr	r2, [pc, #40]	; (8004e44 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x48>)
 8004e1a:	6002      	str	r2, [r0, #0]
 8004e1c:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x4c>)
 8004e1e:	6002      	str	r2, [r0, #0]
 8004e20:	6003      	str	r3, [r0, #0]
 8004e22:	2178      	movs	r1, #120	; 0x78
 8004e24:	f01e fa5f 	bl	80232e6 <_ZdlPvj>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	bd10      	pop	{r4, pc}
 8004e2c:	08025f6c 	.word	0x08025f6c
 8004e30:	08026f18 	.word	0x08026f18
 8004e34:	08026e20 	.word	0x08026e20
 8004e38:	08025b48 	.word	0x08025b48
 8004e3c:	08027120 	.word	0x08027120
 8004e40:	08025ed0 	.word	0x08025ed0
 8004e44:	08025e1c 	.word	0x08025e1c
 8004e48:	08026a1c 	.word	0x08026a1c

08004e4c <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	4604      	mov	r4, r0
 8004e50:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED0Ev+0x18>)
 8004e52:	6003      	str	r3, [r0, #0]
    }
 8004e54:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED0Ev+0x1c>)
 8004e56:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004e58:	2110      	movs	r1, #16
 8004e5a:	f01e fa44 	bl	80232e6 <_ZdlPvj>
 8004e5e:	4620      	mov	r0, r4
 8004e60:	bd10      	pop	{r4, pc}
 8004e62:	bf00      	nop
 8004e64:	08026008 	.word	0x08026008
 8004e68:	08025eb8 	.word	0x08025eb8

08004e6c <_ZN26wifiInfoLargeContainerBaseD0Ev>:
wifiInfoLargeContainerBase::~wifiInfoLargeContainerBase()
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	4604      	mov	r4, r0
}
 8004e70:	f7ff feb0 	bl	8004bd4 <_ZN26wifiInfoLargeContainerBaseD1Ev>
 8004e74:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f01e fa34 	bl	80232e6 <_ZdlPvj>
 8004e7e:	4620      	mov	r0, r4
 8004e80:	bd10      	pop	{r4, pc}
	...

08004e84 <_ZN26wifiInfoLargeContainerBaseC1Ev>:
wifiInfoLargeContainerBase::wifiInfoLargeContainerBase() :
 8004e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	b093      	sub	sp, #76	; 0x4c
 8004e8a:	4605      	mov	r5, r0
          visible(true)
 8004e8c:	4fbc      	ldr	r7, [pc, #752]	; (8005180 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004e8e:	6007      	str	r7, [r0, #0]
        : x(0), y(0), width(0), height(0)
 8004e90:	2400      	movs	r4, #0
 8004e92:	8084      	strh	r4, [r0, #4]
 8004e94:	80c4      	strh	r4, [r0, #6]
 8004e96:	8104      	strh	r4, [r0, #8]
 8004e98:	8144      	strh	r4, [r0, #10]
 8004e9a:	8184      	strh	r4, [r0, #12]
 8004e9c:	81c4      	strh	r4, [r0, #14]
 8004e9e:	8204      	strh	r4, [r0, #16]
 8004ea0:	8244      	strh	r4, [r0, #18]
 8004ea2:	6144      	str	r4, [r0, #20]
 8004ea4:	6184      	str	r4, [r0, #24]
 8004ea6:	61c4      	str	r4, [r0, #28]
 8004ea8:	8404      	strh	r4, [r0, #32]
 8004eaa:	8444      	strh	r4, [r0, #34]	; 0x22
 8004eac:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8004eb0:	f04f 0b01 	mov.w	fp, #1
 8004eb4:	f880 b025 	strb.w	fp, [r0, #37]	; 0x25
          firstChild(0)
 8004eb8:	4bb2      	ldr	r3, [pc, #712]	; (8005184 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x300>)
 8004eba:	6003      	str	r3, [r0, #0]
 8004ebc:	6284      	str	r4, [r0, #40]	; 0x28
    flexButtonCallback(this, &wifiInfoLargeContainerBase::flexButtonCallbackHandler)
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	4bb1      	ldr	r3, [pc, #708]	; (8005188 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x304>)
 8004ec2:	f846 3b2c 	str.w	r3, [r6], #44
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004ec6:	2226      	movs	r2, #38	; 0x26
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f01e fbd0 	bl	8023670 <memset>
 8004ed0:	62ef      	str	r7, [r5, #44]	; 0x2c
 8004ed2:	80b4      	strh	r4, [r6, #4]
 8004ed4:	80f4      	strh	r4, [r6, #6]
 8004ed6:	8134      	strh	r4, [r6, #8]
 8004ed8:	8174      	strh	r4, [r6, #10]
 8004eda:	81b4      	strh	r4, [r6, #12]
 8004edc:	81f4      	strh	r4, [r6, #14]
 8004ede:	8234      	strh	r4, [r6, #16]
 8004ee0:	8274      	strh	r4, [r6, #18]
 8004ee2:	6174      	str	r4, [r6, #20]
 8004ee4:	61b4      	str	r4, [r6, #24]
 8004ee6:	61f4      	str	r4, [r6, #28]
 8004ee8:	8434      	strh	r4, [r6, #32]
 8004eea:	8474      	strh	r4, [r6, #34]	; 0x22
 8004eec:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 8004ef0:	f886 b025 	strb.w	fp, [r6, #37]	; 0x25
 8004ef4:	4aa5      	ldr	r2, [pc, #660]	; (800518c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 8004ef6:	62ea      	str	r2, [r5, #44]	; 0x2c
 8004ef8:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 80051c0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x33c>
 8004efc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
        : typedTextId(id)
 8004f00:	49a3      	ldr	r1, [pc, #652]	; (8005190 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x30c>)
 8004f02:	62b1      	str	r1, [r6, #40]	; 0x28
 8004f04:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8004f08:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
        : color(col)
 8004f0c:	6334      	str	r4, [r6, #48]	; 0x30
 8004f0e:	86b4      	strh	r4, [r6, #52]	; 0x34
 8004f10:	f886 a036 	strb.w	sl, [r6, #54]	; 0x36
 8004f14:	f886 4037 	strb.w	r4, [r6, #55]	; 0x37
 8004f18:	f886 4038 	strb.w	r4, [r6, #56]	; 0x38
 8004f1c:	f886 4039 	strb.w	r4, [r6, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004f20:	87b4      	strh	r4, [r6, #60]	; 0x3c
 8004f22:	87f4      	strh	r4, [r6, #62]	; 0x3e
 8004f24:	f8a6 a040 	strh.w	sl, [r6, #64]	; 0x40
 8004f28:	f8a6 a042 	strh.w	sl, [r6, #66]	; 0x42
              text(0)
 8004f2c:	6474      	str	r4, [r6, #68]	; 0x44
        : TextArea()
 8004f2e:	f8df 9294 	ldr.w	r9, [pc, #660]	; 80051c4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x340>
 8004f32:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
        : TextAreaWithWildcardBase(), wc1(0)
 8004f36:	4897      	ldr	r0, [pc, #604]	; (8005194 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x310>)
 8004f38:	62e8      	str	r0, [r5, #44]	; 0x2c
 8004f3a:	676c      	str	r4, [r5, #116]	; 0x74
        : TextArea()
 8004f3c:	f105 0778 	add.w	r7, r5, #120	; 0x78
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004f40:	2226      	movs	r2, #38	; 0x26
 8004f42:	4621      	mov	r1, r4
 8004f44:	4638      	mov	r0, r7
 8004f46:	f01e fb93 	bl	8023670 <memset>
 8004f4a:	4b8d      	ldr	r3, [pc, #564]	; (8005180 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004f4c:	67ab      	str	r3, [r5, #120]	; 0x78
        : x(0), y(0), width(0), height(0)
 8004f4e:	80bc      	strh	r4, [r7, #4]
 8004f50:	80fc      	strh	r4, [r7, #6]
 8004f52:	813c      	strh	r4, [r7, #8]
 8004f54:	817c      	strh	r4, [r7, #10]
 8004f56:	81bc      	strh	r4, [r7, #12]
 8004f58:	81fc      	strh	r4, [r7, #14]
 8004f5a:	823c      	strh	r4, [r7, #16]
 8004f5c:	827c      	strh	r4, [r7, #18]
 8004f5e:	617c      	str	r4, [r7, #20]
 8004f60:	61bc      	str	r4, [r7, #24]
 8004f62:	61fc      	str	r4, [r7, #28]
 8004f64:	843c      	strh	r4, [r7, #32]
 8004f66:	847c      	strh	r4, [r7, #34]	; 0x22
 8004f68:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 8004f6c:	f887 b025 	strb.w	fp, [r7, #37]	; 0x25
 8004f70:	4a86      	ldr	r2, [pc, #536]	; (800518c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 8004f72:	67aa      	str	r2, [r5, #120]	; 0x78
 8004f74:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 8004f78:	4985      	ldr	r1, [pc, #532]	; (8005190 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x30c>)
 8004f7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f7c:	f8a7 a02c 	strh.w	sl, [r7, #44]	; 0x2c
        : color(col)
 8004f80:	633c      	str	r4, [r7, #48]	; 0x30
 8004f82:	86bc      	strh	r4, [r7, #52]	; 0x34
 8004f84:	f887 a036 	strb.w	sl, [r7, #54]	; 0x36
 8004f88:	f887 4037 	strb.w	r4, [r7, #55]	; 0x37
 8004f8c:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
 8004f90:	f887 4039 	strb.w	r4, [r7, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004f94:	87bc      	strh	r4, [r7, #60]	; 0x3c
 8004f96:	87fc      	strh	r4, [r7, #62]	; 0x3e
 8004f98:	f8a7 a040 	strh.w	sl, [r7, #64]	; 0x40
 8004f9c:	f8a7 a042 	strh.w	sl, [r7, #66]	; 0x42
              text(0)
 8004fa0:	647c      	str	r4, [r7, #68]	; 0x44
 8004fa2:	f8c5 9078 	str.w	r9, [r5, #120]	; 0x78
        : TextAreaWithWildcardBase(), wc1(0)
 8004fa6:	4f7b      	ldr	r7, [pc, #492]	; (8005194 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x310>)
 8004fa8:	67af      	str	r7, [r5, #120]	; 0x78
 8004faa:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
 8004fae:	f105 09c4 	add.w	r9, r5, #196	; 0xc4
 8004fb2:	f8ad a018 	strh.w	sl, [sp, #24]
        : Widget(), bitmap(bmp), alpha(255)
 8004fb6:	2226      	movs	r2, #38	; 0x26
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4648      	mov	r0, r9
 8004fbc:	f01e fb58 	bl	8023670 <memset>
 8004fc0:	4b6f      	ldr	r3, [pc, #444]	; (8005180 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004fc2:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
        : x(0), y(0), width(0), height(0)
 8004fc6:	f8a9 4004 	strh.w	r4, [r9, #4]
 8004fca:	f8a9 4006 	strh.w	r4, [r9, #6]
 8004fce:	f8a9 4008 	strh.w	r4, [r9, #8]
 8004fd2:	f8a9 400a 	strh.w	r4, [r9, #10]
 8004fd6:	f8a9 400c 	strh.w	r4, [r9, #12]
 8004fda:	f8a9 400e 	strh.w	r4, [r9, #14]
 8004fde:	f8a9 4010 	strh.w	r4, [r9, #16]
 8004fe2:	f8a9 4012 	strh.w	r4, [r9, #18]
 8004fe6:	f8c9 4014 	str.w	r4, [r9, #20]
 8004fea:	f8c9 4018 	str.w	r4, [r9, #24]
 8004fee:	f8c9 401c 	str.w	r4, [r9, #28]
 8004ff2:	f8a9 4020 	strh.w	r4, [r9, #32]
 8004ff6:	f8a9 4022 	strh.w	r4, [r9, #34]	; 0x22
 8004ffa:	f889 4024 	strb.w	r4, [r9, #36]	; 0x24
 8004ffe:	f889 b025 	strb.w	fp, [r9, #37]	; 0x25
 8005002:	4a62      	ldr	r2, [pc, #392]	; (800518c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 8005004:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8005008:	4b63      	ldr	r3, [pc, #396]	; (8005198 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x314>)
 800500a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
 800500e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8005012:	f8a9 3026 	strh.w	r3, [r9, #38]	; 0x26
 8005016:	f889 a028 	strb.w	sl, [r9, #40]	; 0x28
        Image::setBitmap(bmp);
 800501a:	a906      	add	r1, sp, #24
 800501c:	4648      	mov	r0, r9
 800501e:	f010 ff58 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8005022:	f105 07f0 	add.w	r7, r5, #240	; 0xf0
        : T(), up(), down()
 8005026:	2234      	movs	r2, #52	; 0x34
 8005028:	4621      	mov	r1, r4
 800502a:	4638      	mov	r0, r7
 800502c:	f01e fb20 	bl	8023670 <memset>
 8005030:	4b53      	ldr	r3, [pc, #332]	; (8005180 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8005032:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8005036:	80bc      	strh	r4, [r7, #4]
 8005038:	80fc      	strh	r4, [r7, #6]
 800503a:	813c      	strh	r4, [r7, #8]
 800503c:	817c      	strh	r4, [r7, #10]
 800503e:	81bc      	strh	r4, [r7, #12]
 8005040:	81fc      	strh	r4, [r7, #14]
 8005042:	823c      	strh	r4, [r7, #16]
 8005044:	827c      	strh	r4, [r7, #18]
 8005046:	617c      	str	r4, [r7, #20]
 8005048:	61bc      	str	r4, [r7, #24]
 800504a:	61fc      	str	r4, [r7, #28]
 800504c:	843c      	strh	r4, [r7, #32]
 800504e:	847c      	strh	r4, [r7, #34]	; 0x22
 8005050:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 8005054:	f887 b025 	strb.w	fp, [r7, #37]	; 0x25
 8005058:	484a      	ldr	r0, [pc, #296]	; (8005184 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x300>)
 800505a:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
 800505e:	62bc      	str	r4, [r7, #40]	; 0x28
        : pressed(false), alpha(255), action(0)
 8005060:	4b4e      	ldr	r3, [pc, #312]	; (800519c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x318>)
 8005062:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8005066:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
 800506a:	f887 a02d 	strb.w	sl, [r7, #45]	; 0x2d
 800506e:	633c      	str	r4, [r7, #48]	; 0x30
        touchable = touch;
 8005070:	f887 b024 	strb.w	fp, [r7, #36]	; 0x24
 8005074:	4b4a      	ldr	r3, [pc, #296]	; (80051a0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x31c>)
 8005076:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 800507a:	4b4a      	ldr	r3, [pc, #296]	; (80051a4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x320>)
 800507c:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
        : Box(), borderColor(0), borderSize(0)
 8005080:	f505 7892 	add.w	r8, r5, #292	; 0x124
        : Widget(), alpha(255), color(0)
 8005084:	2226      	movs	r2, #38	; 0x26
 8005086:	4621      	mov	r1, r4
 8005088:	4640      	mov	r0, r8
 800508a:	f01e faf1 	bl	8023670 <memset>
          visible(true)
 800508e:	4b3c      	ldr	r3, [pc, #240]	; (8005180 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8005090:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005094:	f8a8 4004 	strh.w	r4, [r8, #4]
 8005098:	f8a8 4006 	strh.w	r4, [r8, #6]
 800509c:	f8a8 4008 	strh.w	r4, [r8, #8]
 80050a0:	f8a8 400a 	strh.w	r4, [r8, #10]
 80050a4:	f8a8 400c 	strh.w	r4, [r8, #12]
 80050a8:	f8a8 400e 	strh.w	r4, [r8, #14]
 80050ac:	f8a8 4010 	strh.w	r4, [r8, #16]
 80050b0:	f8a8 4012 	strh.w	r4, [r8, #18]
 80050b4:	f8c8 4014 	str.w	r4, [r8, #20]
 80050b8:	f8c8 4018 	str.w	r4, [r8, #24]
 80050bc:	f8c8 401c 	str.w	r4, [r8, #28]
 80050c0:	f8a8 4020 	strh.w	r4, [r8, #32]
 80050c4:	f8a8 4022 	strh.w	r4, [r8, #34]	; 0x22
 80050c8:	f888 4024 	strb.w	r4, [r8, #36]	; 0x24
 80050cc:	f888 b025 	strb.w	fp, [r8, #37]	; 0x25
 80050d0:	4a2e      	ldr	r2, [pc, #184]	; (800518c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 80050d2:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 80050d6:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x324>)
 80050d8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 80050dc:	f888 a026 	strb.w	sl, [r8, #38]	; 0x26
        : color(col)
 80050e0:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 80050e4:	4b31      	ldr	r3, [pc, #196]	; (80051ac <_ZN26wifiInfoLargeContainerBaseC1Ev+0x328>)
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
 80050e8:	663c      	str	r4, [r7, #96]	; 0x60
 80050ea:	f8a7 4064 	strh.w	r4, [r7, #100]	; 0x64
        : color(0)
 80050ee:	66bc      	str	r4, [r7, #104]	; 0x68
 80050f0:	66fc      	str	r4, [r7, #108]	; 0x6c
 80050f2:	673c      	str	r4, [r7, #112]	; 0x70
 80050f4:	677c      	str	r4, [r7, #116]	; 0x74
        setX(x);
 80050f6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	4621      	mov	r1, r4
 80050fe:	4640      	mov	r0, r8
 8005100:	4798      	blx	r3
        setY(y);
 8005102:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005108:	4621      	mov	r1, r4
 800510a:	4640      	mov	r0, r8
 800510c:	4798      	blx	r3
        T::add(borderBox);
 800510e:	4641      	mov	r1, r8
 8005110:	4638      	mov	r0, r7
 8005112:	f00d ffc3 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8005116:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x32c>)
 8005118:	9307      	str	r3, [sp, #28]
 800511a:	9408      	str	r4, [sp, #32]
 800511c:	ab04      	add	r3, sp, #16
 800511e:	aa07      	add	r2, sp, #28
 8005120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005124:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<T1, void, void>
 8005128:	4a22      	ldr	r2, [pc, #136]	; (80051b4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x330>)
 800512a:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
        : pobject(pObject), pmemfun(pmemfun_1)
 800512e:	4a22      	ldr	r2, [pc, #136]	; (80051b8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x334>)
 8005130:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
 8005134:	f8c5 520c 	str.w	r5, [r5, #524]	; 0x20c
 8005138:	f505 7204 	add.w	r2, r5, #528	; 0x210
 800513c:	e882 0003 	stmia.w	r2, {r0, r1}
        rect.width = width;
 8005140:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005144:	812b      	strh	r3, [r5, #8]
        rect.height = height;
 8005146:	233e      	movs	r3, #62	; 0x3e
 8005148:	816b      	strh	r3, [r5, #10]
        setX(x);
 800514a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	2110      	movs	r1, #16
 8005150:	4630      	mov	r0, r6
 8005152:	4798      	blx	r3
        setY(y);
 8005154:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	2105      	movs	r1, #5
 800515a:	4630      	mov	r0, r6
 800515c:	4798      	blx	r3
        setWidth(width);
 800515e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	21da      	movs	r1, #218	; 0xda
 8005164:	4630      	mov	r0, r6
 8005166:	4798      	blx	r3
        setHeight(height);
 8005168:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	211e      	movs	r1, #30
 800516e:	4630      	mov	r0, r6
 8005170:	4798      	blx	r3
        : color(col)
 8005172:	4b12      	ldr	r3, [pc, #72]	; (80051bc <_ZN26wifiInfoLargeContainerBaseC1Ev+0x338>)
        color = newColor;
 8005174:	65eb      	str	r3, [r5, #92]	; 0x5c
        linespace = space;
 8005176:	f8a5 4060 	strh.w	r4, [r5, #96]	; 0x60
        boundingArea = calculateBoundingArea();
 800517a:	466c      	mov	r4, sp
 800517c:	e024      	b.n	80051c8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x344>
 800517e:	bf00      	nop
 8005180:	08027120 	.word	0x08027120
 8005184:	08026a1c 	.word	0x08026a1c
 8005188:	08026020 	.word	0x08026020
 800518c:	08025b48 	.word	0x08025b48
 8005190:	08024fe8 	.word	0x08024fe8
 8005194:	08025d50 	.word	0x08025d50
 8005198:	08026f80 	.word	0x08026f80
 800519c:	08025e1c 	.word	0x08025e1c
 80051a0:	08025ed0 	.word	0x08025ed0
 80051a4:	08025f6c 	.word	0x08025f6c
 80051a8:	08026e20 	.word	0x08026e20
 80051ac:	08026f18 	.word	0x08026f18
 80051b0:	08004c9b 	.word	0x08004c9b
 80051b4:	08025eb8 	.word	0x08025eb8
 80051b8:	08026008 	.word	0x08026008
 80051bc:	ffebebeb 	.word	0xffebebeb
 80051c0:	08026d90 	.word	0x08026d90
 80051c4:	08026e88 	.word	0x08026e88
 80051c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80051ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ce:	4631      	mov	r1, r6
 80051d0:	4620      	mov	r0, r4
 80051d2:	4798      	blx	r3
 80051d4:	f105 0368 	add.w	r3, r5, #104	; 0x68
 80051d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80051dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80051e0:	4989      	ldr	r1, [pc, #548]	; (8005408 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x584>)
 80051e2:	9109      	str	r1, [sp, #36]	; 0x24
 80051e4:	2303      	movs	r3, #3
 80051e6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80051ea:	4b88      	ldr	r3, [pc, #544]	; (800540c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x588>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 80f2 	beq.w	80053d8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x554>
 80051f4:	f505 74b4 	add.w	r4, r5, #360	; 0x168
        return typedTextId < numberOfTypedTexts;
 80051f8:	4b85      	ldr	r3, [pc, #532]	; (8005410 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x58c>)
 80051fa:	881b      	ldrh	r3, [r3, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	f240 80f1 	bls.w	80053e4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x560>
        return texts->getText(typedTextId);
 8005202:	2103      	movs	r1, #3
 8005204:	4b83      	ldr	r3, [pc, #524]	; (8005414 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x590>)
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	f7ff f9a8 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 800520c:	4603      	mov	r3, r0
    Unicode::snprintf(wifiSSIDBuffer, WIFISSID_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NRXH).getText());
 800520e:	4a82      	ldr	r2, [pc, #520]	; (8005418 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x594>)
 8005210:	2128      	movs	r1, #40	; 0x28
 8005212:	4620      	mov	r0, r4
 8005214:	f015 fe18 	bl	801ae48 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8005218:	676c      	str	r4, [r5, #116]	; 0x74
        : typedTextId(id)
 800521a:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8005408 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x584>
 800521e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8005222:	2304      	movs	r3, #4
 8005224:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    wifiSSID.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4CY4));
 8005228:	a90b      	add	r1, sp, #44	; 0x2c
 800522a:	4630      	mov	r0, r6
 800522c:	f010 fc7c 	bl	8015b28 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005230:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    encryption.setPosition(16, 31, 218, 25);
 8005234:	f105 0478 	add.w	r4, r5, #120	; 0x78
        setX(x);
 8005238:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	2110      	movs	r1, #16
 800523e:	4620      	mov	r0, r4
 8005240:	4798      	blx	r3
        setY(y);
 8005242:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8005244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005246:	211f      	movs	r1, #31
 8005248:	4620      	mov	r0, r4
 800524a:	4798      	blx	r3
        setWidth(width);
 800524c:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	21da      	movs	r1, #218	; 0xda
 8005252:	4620      	mov	r0, r4
 8005254:	4798      	blx	r3
        setHeight(height);
 8005256:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	2119      	movs	r1, #25
 800525c:	4620      	mov	r0, r4
 800525e:	4798      	blx	r3
 8005260:	4b6e      	ldr	r3, [pc, #440]	; (800541c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x598>)
        color = newColor;
 8005262:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
        linespace = space;
 8005266:	2300      	movs	r3, #0
 8005268:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
        boundingArea = calculateBoundingArea();
 800526c:	46ea      	mov	sl, sp
 800526e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8005270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005274:	4621      	mov	r1, r4
 8005276:	4650      	mov	r0, sl
 8005278:	4798      	blx	r3
 800527a:	f105 03b4 	add.w	r3, r5, #180	; 0xb4
 800527e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8005282:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(encryptionBuffer, ENCRYPTION_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_47B1).getText());
 8005286:	f505 7adc 	add.w	sl, r5, #440	; 0x1b8
        : typedTextId(id)
 800528a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800528e:	2305      	movs	r3, #5
 8005290:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005294:	4b5d      	ldr	r3, [pc, #372]	; (800540c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x588>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80a9 	beq.w	80053f0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x56c>
        return typedTextId < numberOfTypedTexts;
 800529e:	4b5c      	ldr	r3, [pc, #368]	; (8005410 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x58c>)
 80052a0:	881b      	ldrh	r3, [r3, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	f240 80aa 	bls.w	80053fc <_ZN26wifiInfoLargeContainerBaseC1Ev+0x578>
        return texts->getText(typedTextId);
 80052a8:	2105      	movs	r1, #5
 80052aa:	4b5a      	ldr	r3, [pc, #360]	; (8005414 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x590>)
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	f7ff f955 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4a58      	ldr	r2, [pc, #352]	; (8005418 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x594>)
 80052b6:	2128      	movs	r1, #40	; 0x28
 80052b8:	4650      	mov	r0, sl
 80052ba:	f015 fdc5 	bl	801ae48 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80052be:	f8c5 a0c0 	str.w	sl, [r5, #192]	; 0xc0
        : typedTextId(id)
 80052c2:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8005408 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x584>
 80052c6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80052ca:	2306      	movs	r3, #6
 80052cc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    encryption.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X5OV));
 80052d0:	a90f      	add	r1, sp, #60	; 0x3c
 80052d2:	4620      	mov	r0, r4
 80052d4:	f010 fc28 	bl	8015b28 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 80052d8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    signalStrengthIcon.setXY(240, 11);
 80052dc:	f105 0ac4 	add.w	sl, r5, #196	; 0xc4
        setX(x);
 80052e0:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	21f0      	movs	r1, #240	; 0xf0
 80052e8:	4650      	mov	r0, sl
 80052ea:	4798      	blx	r3
        setY(y);
 80052ec:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	210b      	movs	r1, #11
 80052f4:	4650      	mov	r0, sl
 80052f6:	4798      	blx	r3
 80052f8:	2312      	movs	r3, #18
 80052fa:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    signalStrengthIcon.setBitmap(touchgfx::Bitmap(BITMAP_WIFI_LOW_SETTINGS_ID));
 80052fe:	a911      	add	r1, sp, #68	; 0x44
 8005300:	4648      	mov	r0, r9
 8005302:	f010 fde6 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        borderBox.setPosition(x, y, width, height);
 8005306:	f105 08f0 	add.w	r8, r5, #240	; 0xf0
 800530a:	f505 7992 	add.w	r9, r5, #292	; 0x124
        setX(x);
 800530e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	2100      	movs	r1, #0
 8005316:	4648      	mov	r0, r9
 8005318:	4798      	blx	r3
        setY(y);
 800531a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800531e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005320:	2100      	movs	r1, #0
 8005322:	4648      	mov	r0, r9
 8005324:	4798      	blx	r3
        setWidth(width);
 8005326:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	2100      	movs	r1, #0
 800532e:	4648      	mov	r0, r9
 8005330:	4798      	blx	r3
        setHeight(height);
 8005332:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005338:	2100      	movs	r1, #0
 800533a:	4648      	mov	r0, r9
 800533c:	4798      	blx	r3
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 800533e:	2305      	movs	r3, #5
 8005340:	f8a5 3154 	strh.w	r3, [r5, #340]	; 0x154
        up = colorReleased;
 8005344:	4b36      	ldr	r3, [pc, #216]	; (8005420 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x59c>)
 8005346:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
        down = colorPressed;
 800534a:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 800534e:	3333      	adds	r3, #51	; 0x33
 8005350:	f8c5 315c 	str.w	r3, [r5, #348]	; 0x15c
        borderUp = borderColorReleased;
 8005354:	f5a3 43cc 	sub.w	r3, r3, #26112	; 0x6600
 8005358:	3b66      	subs	r3, #102	; 0x66
 800535a:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
        borderDown = borderColorPressed;
 800535e:	f103 1333 	add.w	r3, r3, #3342387	; 0x330033
 8005362:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 8005366:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handlePressedUpdated();
 800536a:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 800536e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005372:	4638      	mov	r0, r7
 8005374:	4798      	blx	r3
        setX(x);
 8005376:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	2100      	movs	r1, #0
 800537e:	4640      	mov	r0, r8
 8005380:	4798      	blx	r3
        setY(y);
 8005382:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 8005386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005388:	2100      	movs	r1, #0
 800538a:	4640      	mov	r0, r8
 800538c:	4798      	blx	r3
        setWidth(width);
 800538e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005398:	4640      	mov	r0, r8
 800539a:	4798      	blx	r3
        setHeight(height);
 800539c:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	213e      	movs	r1, #62	; 0x3e
 80053a4:	4640      	mov	r0, r8
 80053a6:	4798      	blx	r3
    listButtonOverlay.setAction(flexButtonCallback);
 80053a8:	f505 7302 	add.w	r3, r5, #520	; 0x208
        action = &callback;
 80053ac:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    add(wifiSSID);
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	f00d fe72 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(encryption);
 80053b8:	4621      	mov	r1, r4
 80053ba:	4628      	mov	r0, r5
 80053bc:	f00d fe6e 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(signalStrengthIcon);
 80053c0:	4651      	mov	r1, sl
 80053c2:	4628      	mov	r0, r5
 80053c4:	f00d fe6a 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(listButtonOverlay);
 80053c8:	4641      	mov	r1, r8
 80053ca:	4628      	mov	r0, r5
 80053cc:	f00d fe66 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80053d0:	4628      	mov	r0, r5
 80053d2:	b013      	add	sp, #76	; 0x4c
 80053d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80053d8:	4b12      	ldr	r3, [pc, #72]	; (8005424 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a0>)
 80053da:	4a13      	ldr	r2, [pc, #76]	; (8005428 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 80053dc:	2160      	movs	r1, #96	; 0x60
 80053de:	4813      	ldr	r0, [pc, #76]	; (800542c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 80053e0:	f01d ffb0 	bl	8023344 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5ac>)
 80053e6:	4a10      	ldr	r2, [pc, #64]	; (8005428 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 80053e8:	2161      	movs	r1, #97	; 0x61
 80053ea:	4810      	ldr	r0, [pc, #64]	; (800542c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 80053ec:	f01d ffaa 	bl	8023344 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a0>)
 80053f2:	4a0d      	ldr	r2, [pc, #52]	; (8005428 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 80053f4:	2160      	movs	r1, #96	; 0x60
 80053f6:	480d      	ldr	r0, [pc, #52]	; (800542c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 80053f8:	f01d ffa4 	bl	8023344 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5ac>)
 80053fe:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 8005400:	2161      	movs	r1, #97	; 0x61
 8005402:	480a      	ldr	r0, [pc, #40]	; (800542c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 8005404:	f01d ff9e 	bl	8023344 <__assert_func>
 8005408:	08024fe8 	.word	0x08024fe8
 800540c:	2400ff64 	.word	0x2400ff64
 8005410:	2400ff68 	.word	0x2400ff68
 8005414:	2400ff70 	.word	0x2400ff70
 8005418:	08025e10 	.word	0x08025e10
 800541c:	ffebebeb 	.word	0xffebebeb
 8005420:	ff006699 	.word	0xff006699
 8005424:	08025c40 	.word	0x08025c40
 8005428:	08025dd8 	.word	0x08025dd8
 800542c:	08025cc0 	.word	0x08025cc0
 8005430:	08025d08 	.word	0x08025d08

08005434 <_ZN21wifiMenuContainerBaseD1Ev>:

    add(backgroundBox);
    add(wifiListContainer);
}

wifiMenuContainerBase::~wifiMenuContainerBase()
 8005434:	b430      	push	{r4, r5}
 8005436:	4a12      	ldr	r2, [pc, #72]	; (8005480 <_ZN21wifiMenuContainerBaseD1Ev+0x4c>)
 8005438:	6002      	str	r2, [r0, #0]
 * dimensions of the physical screen. Place the ListLayout inside e.g. a
 * ScrollableContainer to allow all the children to be viewed.
 *
 * @see ScrollableContainer
 */
class ListLayout : public Container
 800543a:	4a12      	ldr	r2, [pc, #72]	; (8005484 <_ZN21wifiMenuContainerBaseD1Ev+0x50>)
 800543c:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
class Container : public Drawable
 8005440:	4911      	ldr	r1, [pc, #68]	; (8005488 <_ZN21wifiMenuContainerBaseD1Ev+0x54>)
 8005442:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    {
 8005446:	4a11      	ldr	r2, [pc, #68]	; (800548c <_ZN21wifiMenuContainerBaseD1Ev+0x58>)
 8005448:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 * @see Container
 *
 * @note The ScrollableContainer will consume all DragEvents in the area covered by the
 *       container.
 */
class ScrollableContainer : public Container
 800544c:	4c10      	ldr	r4, [pc, #64]	; (8005490 <_ZN21wifiMenuContainerBaseD1Ev+0x5c>)
 800544e:	6584      	str	r4, [r0, #88]	; 0x58
class Box : public Widget
 8005450:	4d10      	ldr	r5, [pc, #64]	; (8005494 <_ZN21wifiMenuContainerBaseD1Ev+0x60>)
 8005452:	f8c0 50bc 	str.w	r5, [r0, #188]	; 0xbc
 8005456:	4c10      	ldr	r4, [pc, #64]	; (8005498 <_ZN21wifiMenuContainerBaseD1Ev+0x64>)
 8005458:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 800545c:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
 8005460:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
 8005464:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
 8005468:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 800546c:	6581      	str	r1, [r0, #88]	; 0x58
 800546e:	6582      	str	r2, [r0, #88]	; 0x58
class Image : public Widget
 8005470:	4d0a      	ldr	r5, [pc, #40]	; (800549c <_ZN21wifiMenuContainerBaseD1Ev+0x68>)
 8005472:	62c5      	str	r5, [r0, #44]	; 0x2c
 8005474:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005476:	62c2      	str	r2, [r0, #44]	; 0x2c
 8005478:	6001      	str	r1, [r0, #0]
 800547a:	6002      	str	r2, [r0, #0]
{

}
 800547c:	bc30      	pop	{r4, r5}
 800547e:	4770      	bx	lr
 8005480:	080260b8 	.word	0x080260b8
 8005484:	08026adc 	.word	0x08026adc
 8005488:	08026a1c 	.word	0x08026a1c
 800548c:	08027120 	.word	0x08027120
 8005490:	08026b9c 	.word	0x08026b9c
 8005494:	08026e20 	.word	0x08026e20
 8005498:	08025b48 	.word	0x08025b48
 800549c:	08026f80 	.word	0x08026f80

080054a0 <_ZN21wifiMenuContainerBase10initializeEv>:

void wifiMenuContainerBase::initialize()
{

}
 80054a0:	4770      	bx	lr

080054a2 <_ZN21wifiMenuContainerBaseD0Ev>:
wifiMenuContainerBase::~wifiMenuContainerBase()
 80054a2:	b510      	push	{r4, lr}
 80054a4:	4604      	mov	r4, r0
}
 80054a6:	f7ff ffc5 	bl	8005434 <_ZN21wifiMenuContainerBaseD1Ev>
 80054aa:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80054ae:	4620      	mov	r0, r4
 80054b0:	f01d ff19 	bl	80232e6 <_ZdlPvj>
 80054b4:	4620      	mov	r0, r4
 80054b6:	bd10      	pop	{r4, pc}

080054b8 <_ZN21wifiMenuContainerBaseC1Ev>:
wifiMenuContainerBase::wifiMenuContainerBase()
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	b083      	sub	sp, #12
 80054be:	4605      	mov	r5, r0
          visible(true)
 80054c0:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8005674 <_ZN21wifiMenuContainerBaseC1Ev+0x1bc>
 80054c4:	f8c0 a000 	str.w	sl, [r0]
        : x(0), y(0), width(0), height(0)
 80054c8:	2400      	movs	r4, #0
 80054ca:	8084      	strh	r4, [r0, #4]
 80054cc:	80c4      	strh	r4, [r0, #6]
 80054ce:	8104      	strh	r4, [r0, #8]
 80054d0:	8144      	strh	r4, [r0, #10]
 80054d2:	8184      	strh	r4, [r0, #12]
 80054d4:	81c4      	strh	r4, [r0, #14]
 80054d6:	8204      	strh	r4, [r0, #16]
 80054d8:	8244      	strh	r4, [r0, #18]
 80054da:	6144      	str	r4, [r0, #20]
 80054dc:	6184      	str	r4, [r0, #24]
 80054de:	61c4      	str	r4, [r0, #28]
 80054e0:	8404      	strh	r4, [r0, #32]
 80054e2:	8444      	strh	r4, [r0, #34]	; 0x22
 80054e4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 80054e8:	f04f 0901 	mov.w	r9, #1
 80054ec:	f880 9025 	strb.w	r9, [r0, #37]	; 0x25
          firstChild(0)
 80054f0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005678 <_ZN21wifiMenuContainerBaseC1Ev+0x1c0>
 80054f4:	f8c0 b000 	str.w	fp, [r0]
 80054f8:	6284      	str	r4, [r0, #40]	; 0x28
 80054fa:	4606      	mov	r6, r0
 80054fc:	4b59      	ldr	r3, [pc, #356]	; (8005664 <_ZN21wifiMenuContainerBaseC1Ev+0x1ac>)
 80054fe:	f846 3b2c 	str.w	r3, [r6], #44
 8005502:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005506:	f8ad 7000 	strh.w	r7, [sp]
        : Widget(), bitmap(bmp), alpha(255)
 800550a:	2226      	movs	r2, #38	; 0x26
 800550c:	4621      	mov	r1, r4
 800550e:	4630      	mov	r0, r6
 8005510:	f01e f8ae 	bl	8023670 <memset>
 8005514:	f8c5 a02c 	str.w	sl, [r5, #44]	; 0x2c
 8005518:	80b4      	strh	r4, [r6, #4]
 800551a:	80f4      	strh	r4, [r6, #6]
 800551c:	8134      	strh	r4, [r6, #8]
 800551e:	8174      	strh	r4, [r6, #10]
 8005520:	81b4      	strh	r4, [r6, #12]
 8005522:	81f4      	strh	r4, [r6, #14]
 8005524:	8234      	strh	r4, [r6, #16]
 8005526:	8274      	strh	r4, [r6, #18]
 8005528:	6174      	str	r4, [r6, #20]
 800552a:	61b4      	str	r4, [r6, #24]
 800552c:	61f4      	str	r4, [r6, #28]
 800552e:	8434      	strh	r4, [r6, #32]
 8005530:	8474      	strh	r4, [r6, #34]	; 0x22
 8005532:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 8005536:	f886 9025 	strb.w	r9, [r6, #37]	; 0x25
 800553a:	4b4b      	ldr	r3, [pc, #300]	; (8005668 <_ZN21wifiMenuContainerBaseC1Ev+0x1b0>)
 800553c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800553e:	4b4b      	ldr	r3, [pc, #300]	; (800566c <_ZN21wifiMenuContainerBaseC1Ev+0x1b4>)
 8005540:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005542:	f8bd 3000 	ldrh.w	r3, [sp]
 8005546:	84f3      	strh	r3, [r6, #38]	; 0x26
 8005548:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
        Image::setBitmap(bmp);
 800554c:	4669      	mov	r1, sp
 800554e:	4630      	mov	r0, r6
 8005550:	f010 fcbf 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8005554:	f105 0858 	add.w	r8, r5, #88	; 0x58
 8005558:	4640      	mov	r0, r8
 800555a:	f00e fd4b 	bl	8013ff4 <_ZN8touchgfx19ScrollableContainerC1Ev>
 800555e:	f505 778a 	add.w	r7, r5, #276	; 0x114
 8005562:	f8c5 a114 	str.w	sl, [r5, #276]	; 0x114
 8005566:	80bc      	strh	r4, [r7, #4]
 8005568:	80fc      	strh	r4, [r7, #6]
 800556a:	813c      	strh	r4, [r7, #8]
 800556c:	817c      	strh	r4, [r7, #10]
 800556e:	81bc      	strh	r4, [r7, #12]
 8005570:	81fc      	strh	r4, [r7, #14]
 8005572:	823c      	strh	r4, [r7, #16]
 8005574:	827c      	strh	r4, [r7, #18]
 8005576:	617c      	str	r4, [r7, #20]
 8005578:	61bc      	str	r4, [r7, #24]
 800557a:	61fc      	str	r4, [r7, #28]
 800557c:	843c      	strh	r4, [r7, #32]
 800557e:	847c      	strh	r4, [r7, #34]	; 0x22
 8005580:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 8005584:	f887 9025 	strb.w	r9, [r7, #37]	; 0x25
 8005588:	f8c5 b114 	str.w	fp, [r5, #276]	; 0x114
 800558c:	62bc      	str	r4, [r7, #40]	; 0x28
     *           places the elements vertically, ::EAST places the elements horizontally.
     *
     * @see setDirection
     */
    ListLayout(const Direction d = SOUTH)
        : Container(), direction(d), offset(0)
 800558e:	4b38      	ldr	r3, [pc, #224]	; (8005670 <_ZN21wifiMenuContainerBaseC1Ev+0x1b8>)
 8005590:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
 8005594:	f885 9140 	strb.w	r9, [r5, #320]	; 0x140
 8005598:	f8a5 4142 	strh.w	r4, [r5, #322]	; 0x142
        rect.width = width;
 800559c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80055a0:	812b      	strh	r3, [r5, #8]
        rect.height = height;
 80055a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80055a6:	816b      	strh	r3, [r5, #10]
        setX(x);
 80055a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	215a      	movs	r1, #90	; 0x5a
 80055ae:	4630      	mov	r0, r6
 80055b0:	4798      	blx	r3
        setY(y);
 80055b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	2136      	movs	r1, #54	; 0x36
 80055b8:	4630      	mov	r0, r6
 80055ba:	4798      	blx	r3
 80055bc:	f8ad 9004 	strh.w	r9, [sp, #4]
    backgroundBox.setBitmap(touchgfx::Bitmap(BITMAP_ERROR_BOX_ID));
 80055c0:	a901      	add	r1, sp, #4
 80055c2:	4630      	mov	r0, r6
 80055c4:	f010 fc85 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 80055c8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	215a      	movs	r1, #90	; 0x5a
 80055ce:	4640      	mov	r0, r8
 80055d0:	4798      	blx	r3
        setY(y);
 80055d2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	2136      	movs	r1, #54	; 0x36
 80055d8:	4640      	mov	r0, r8
 80055da:	4798      	blx	r3
        setWidth(width);
 80055dc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80055e4:	4640      	mov	r0, r8
 80055e6:	4798      	blx	r3
        setHeight(height);
 80055e8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80055ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ec:	21c6      	movs	r1, #198	; 0xc6
 80055ee:	4640      	mov	r0, r8
 80055f0:	4798      	blx	r3
     *
     * @see enableVerticalScroll
     */
    void enableHorizontalScroll(bool enable)
    {
        scrollableX = enable;
 80055f2:	f885 40fc 	strb.w	r4, [r5, #252]	; 0xfc
    wifiListContainer.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80055f6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 80055fa:	4640      	mov	r0, r8
 80055fc:	f00f f80f 	bl	801461e <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>
    wifiList.setDirection(touchgfx::SOUTH);
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	f00e f8b8 	bl	8013778 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>
        setX(x);
 8005608:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	4621      	mov	r1, r4
 8005610:	4638      	mov	r0, r7
 8005612:	4798      	blx	r3
        setY(y);
 8005614:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	4621      	mov	r1, r4
 800561c:	4638      	mov	r0, r7
 800561e:	4798      	blx	r3
        setWidth(width);
 8005620:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	f44f 7110 	mov.w	r1, #576	; 0x240
 800562a:	4638      	mov	r0, r7
 800562c:	4798      	blx	r3
        setHeight(height);
 800562e:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	213d      	movs	r1, #61	; 0x3d
 8005636:	4638      	mov	r0, r7
 8005638:	4798      	blx	r3
    wifiListContainer.add(wifiList);
 800563a:	4639      	mov	r1, r7
 800563c:	4640      	mov	r0, r8
 800563e:	f00e f9f7 	bl	8013a30 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    wifiListContainer.setScrollbarsPermanentlyVisible();
 8005642:	4649      	mov	r1, r9
 8005644:	4640      	mov	r0, r8
 8005646:	f00e fffc 	bl	8014642 <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>
    add(backgroundBox);
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	f00d fd25 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(wifiListContainer);
 8005652:	4641      	mov	r1, r8
 8005654:	4628      	mov	r0, r5
 8005656:	f00d fd21 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800565a:	4628      	mov	r0, r5
 800565c:	b003      	add	sp, #12
 800565e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005662:	bf00      	nop
 8005664:	080260b8 	.word	0x080260b8
 8005668:	08025b48 	.word	0x08025b48
 800566c:	08026f80 	.word	0x08026f80
 8005670:	08026adc 	.word	0x08026adc
 8005674:	08027120 	.word	0x08027120
 8005678:	08026a1c 	.word	0x08026a1c

0800567c <_ZN14CustomKeyboardD1Ev>:
 */
class CustomKeyboard : public Container
{
public:
    CustomKeyboard();
    virtual ~CustomKeyboard() { }
 800567c:	b4f0      	push	{r4, r5, r6, r7}
 800567e:	4a23      	ldr	r2, [pc, #140]	; (800570c <_ZN14CustomKeyboardD1Ev+0x90>)
 8005680:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005682:	4a23      	ldr	r2, [pc, #140]	; (8005710 <_ZN14CustomKeyboardD1Ev+0x94>)
 8005684:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    }
 8005688:	4a22      	ldr	r2, [pc, #136]	; (8005714 <_ZN14CustomKeyboardD1Ev+0x98>)
 800568a:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800568e:	4922      	ldr	r1, [pc, #136]	; (8005718 <_ZN14CustomKeyboardD1Ev+0x9c>)
 8005690:	f8c0 120c 	str.w	r1, [r0, #524]	; 0x20c
    {
 8005694:	4a21      	ldr	r2, [pc, #132]	; (800571c <_ZN14CustomKeyboardD1Ev+0xa0>)
 8005696:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800569a:	f8c0 11fc 	str.w	r1, [r0, #508]	; 0x1fc
    {
 800569e:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80056a2:	f8c0 11ec 	str.w	r1, [r0, #492]	; 0x1ec
    {
 80056a6:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80056aa:	f8c0 11dc 	str.w	r1, [r0, #476]	; 0x1dc
    {
 80056ae:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
class TextArea : public Widget
 80056b2:	4e1b      	ldr	r6, [pc, #108]	; (8005720 <_ZN14CustomKeyboardD1Ev+0xa4>)
 80056b4:	f8c0 6194 	str.w	r6, [r0, #404]	; 0x194
    {
 80056b8:	4d1a      	ldr	r5, [pc, #104]	; (8005724 <_ZN14CustomKeyboardD1Ev+0xa8>)
 80056ba:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
 80056be:	491a      	ldr	r1, [pc, #104]	; (8005728 <_ZN14CustomKeyboardD1Ev+0xac>)
 80056c0:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
    {
 80056c4:	4a19      	ldr	r2, [pc, #100]	; (800572c <_ZN14CustomKeyboardD1Ev+0xb0>)
 80056c6:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 * A keyboard with multiple key mappings e.g. lower case alpha, upper case alpha and
 * numeric mappings can be created by implementing callback methods for shift and mode
 * areas in the provided bitmap and then changing the KeyMappingList when those areas
 * are pressed.
 */
class Keyboard : public Container
 80056ca:	4c19      	ldr	r4, [pc, #100]	; (8005730 <_ZN14CustomKeyboardD1Ev+0xb4>)
 80056cc:	62c4      	str	r4, [r0, #44]	; 0x2c
class Image : public Widget
 80056ce:	4c19      	ldr	r4, [pc, #100]	; (8005734 <_ZN14CustomKeyboardD1Ev+0xb8>)
 80056d0:	f8c0 40e4 	str.w	r4, [r0, #228]	; 0xe4
 80056d4:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 80056d8:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80056dc:	4f16      	ldr	r7, [pc, #88]	; (8005738 <_ZN14CustomKeyboardD1Ev+0xbc>)
 80056de:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 80056e2:	4f16      	ldr	r7, [pc, #88]	; (800573c <_ZN14CustomKeyboardD1Ev+0xc0>)
 80056e4:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
 80056e8:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 80056ec:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
 80056f0:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 80056f4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 80056f8:	6644      	str	r4, [r0, #100]	; 0x64
 80056fa:	6641      	str	r1, [r0, #100]	; 0x64
 80056fc:	6642      	str	r2, [r0, #100]	; 0x64
class Container : public Drawable
 80056fe:	4910      	ldr	r1, [pc, #64]	; (8005740 <_ZN14CustomKeyboardD1Ev+0xc4>)
 8005700:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005702:	62c2      	str	r2, [r0, #44]	; 0x2c
 8005704:	6001      	str	r1, [r0, #0]
 8005706:	6002      	str	r2, [r0, #0]
 8005708:	bcf0      	pop	{r4, r5, r6, r7}
 800570a:	4770      	bx	lr
 800570c:	08026194 	.word	0x08026194
 8005710:	0802617c 	.word	0x0802617c
 8005714:	0802614c 	.word	0x0802614c
 8005718:	08026164 	.word	0x08026164
 800571c:	08025044 	.word	0x08025044
 8005720:	08026d90 	.word	0x08026d90
 8005724:	08024fe8 	.word	0x08024fe8
 8005728:	08025b48 	.word	0x08025b48
 800572c:	08027120 	.word	0x08027120
 8005730:	08026fec 	.word	0x08026fec
 8005734:	08026f80 	.word	0x08026f80
 8005738:	08025d50 	.word	0x08025d50
 800573c:	08026e88 	.word	0x08026e88
 8005740:	08026a1c 	.word	0x08026a1c

08005744 <_ZN14CustomKeyboard18donePressedHandlerEv>:
    uppercaseKeys = !uppercaseKeys;
    setKeyMappingList();
}

void CustomKeyboard::donePressedHandler()
{
 8005744:	b510      	push	{r4, lr}
 8005746:	4604      	mov	r4, r0
    if (doneReturnCallback && doneReturnCallback->isValid())
 8005748:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
 800574c:	b150      	cbz	r0, 8005764 <_ZN14CustomKeyboard18donePressedHandlerEv+0x20>
 800574e:	6803      	ldr	r3, [r0, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	4798      	blx	r3
 8005754:	b130      	cbz	r0, 8005764 <_ZN14CustomKeyboard18donePressedHandlerEv+0x20>
    {
        doneReturnCallback->execute(buffer);
 8005756:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
 800575a:	6803      	ldr	r3, [r0, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8005762:	4798      	blx	r3
    }
}
 8005764:	bd10      	pop	{r4, pc}
	...

08005768 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005768:	4a02      	ldr	r2, [pc, #8]	; (8005774 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev+0xc>)
 800576a:	6002      	str	r2, [r0, #0]
    }
 800576c:	4a02      	ldr	r2, [pc, #8]	; (8005778 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev+0x10>)
 800576e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	0802617c 	.word	0x0802617c
 8005778:	0802614c 	.word	0x0802614c

0800577c <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800577c:	4a02      	ldr	r2, [pc, #8]	; (8005788 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev+0xc>)
 800577e:	6002      	str	r2, [r0, #0]
    {
 8005780:	4a02      	ldr	r2, [pc, #8]	; (800578c <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev+0x10>)
 8005782:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	08026164 	.word	0x08026164
 800578c:	08025044 	.word	0x08025044

08005790 <_Z41__static_initialization_and_destruction_0ii>:

    uppercaseKeys = true;
    firstCharacterEntry = true;
    alphaKeys = true;
    setKeyMappingList();
}
 8005790:	2801      	cmp	r0, #1
 8005792:	d006      	beq.n	80057a2 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8005794:	b920      	cbnz	r0, 80057a0 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8005796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800579a:	4299      	cmp	r1, r3
 800579c:	f000 8222 	beq.w	8005be4 <_Z41__static_initialization_and_destruction_0ii+0x454>
 80057a0:	4770      	bx	lr
 80057a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057a6:	4299      	cmp	r1, r3
 80057a8:	d1f4      	bne.n	8005794 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80057aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80057ae:	4bf0      	ldr	r3, [pc, #960]	; (8005b70 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80057b4:	240c      	movs	r4, #12
 80057b6:	805c      	strh	r4, [r3, #2]
 80057b8:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80057bc:	f8a3 e004 	strh.w	lr, [r3, #4]
 80057c0:	2224      	movs	r2, #36	; 0x24
 80057c2:	80da      	strh	r2, [r3, #6]
 80057c4:	811a      	strh	r2, [r3, #8]
 80057c6:	f04f 0c07 	mov.w	ip, #7
 80057ca:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80057ce:	2502      	movs	r5, #2
 80057d0:	731d      	strb	r5, [r3, #12]
 80057d2:	f04f 0a36 	mov.w	sl, #54	; 0x36
 80057d6:	f8a3 a00e 	strh.w	sl, [r3, #14]
 80057da:	f8a3 e010 	strh.w	lr, [r3, #16]
 80057de:	825a      	strh	r2, [r3, #18]
 80057e0:	829a      	strh	r2, [r3, #20]
 80057e2:	f8a3 c016 	strh.w	ip, [r3, #22]
 80057e6:	2503      	movs	r5, #3
 80057e8:	761d      	strb	r5, [r3, #24]
 80057ea:	f04f 0660 	mov.w	r6, #96	; 0x60
 80057ee:	835e      	strh	r6, [r3, #26]
 80057f0:	f8a3 e01c 	strh.w	lr, [r3, #28]
 80057f4:	83da      	strh	r2, [r3, #30]
 80057f6:	841a      	strh	r2, [r3, #32]
 80057f8:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 80057fc:	f04f 0504 	mov.w	r5, #4
 8005800:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8005804:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8005808:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 800580c:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8005810:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005812:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005814:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8005818:	f04f 0505 	mov.w	r5, #5
 800581c:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8005820:	27b4      	movs	r7, #180	; 0xb4
 8005822:	865f      	strh	r7, [r3, #50]	; 0x32
 8005824:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8005828:	86da      	strh	r2, [r3, #54]	; 0x36
 800582a:	871a      	strh	r2, [r3, #56]	; 0x38
 800582c:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8005830:	f04f 0506 	mov.w	r5, #6
 8005834:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 8005838:	f04f 05de 	mov.w	r5, #222	; 0xde
 800583c:	87dd      	strh	r5, [r3, #62]	; 0x3e
 800583e:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8005842:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800584a:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 800584e:	f883 c048 	strb.w	ip, [r3, #72]	; 0x48
 8005852:	f44f 7984 	mov.w	r9, #264	; 0x108
 8005856:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 800585a:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 800585e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005862:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005866:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 800586a:	f04f 0b08 	mov.w	fp, #8
 800586e:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8005872:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8005876:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 800587a:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 800587e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005882:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005886:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 800588a:	f04f 0509 	mov.w	r5, #9
 800588e:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8005892:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8005896:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 800589a:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 800589e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80058a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80058a6:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 80058aa:	250a      	movs	r5, #10
 80058ac:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80058b0:	f44f 75c3 	mov.w	r5, #390	; 0x186
 80058b4:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 80058b8:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 80058bc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80058c0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80058c4:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 80058c8:	f04f 090b 	mov.w	r9, #11
 80058cc:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 80058d0:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 80058d4:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 80058d8:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 80058dc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80058e0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80058e4:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 80058e8:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 80058ec:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 80058f0:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 80058f4:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 80058f8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80058fc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005900:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8005904:	f04f 060d 	mov.w	r6, #13
 8005908:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 800590c:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8005910:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8005914:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005918:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800591c:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8005920:	f04f 0a0e 	mov.w	sl, #14
 8005924:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8005928:	f04f 0660 	mov.w	r6, #96	; 0x60
 800592c:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8005930:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8005934:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005938:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800593c:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8005940:	f04f 0a0f 	mov.w	sl, #15
 8005944:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8005948:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 800594c:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8005950:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005954:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005958:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 800595c:	f04f 0a10 	mov.w	sl, #16
 8005960:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8005964:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8005968:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 800596c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005970:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005974:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8005978:	f04f 0a11 	mov.w	sl, #17
 800597c:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8005980:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8005984:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8005988:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 800598c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005990:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005994:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8005998:	f04f 0a12 	mov.w	sl, #18
 800599c:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80059a0:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80059a4:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 80059a8:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80059ac:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80059b0:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80059b4:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 80059b8:	f04f 0a13 	mov.w	sl, #19
 80059bc:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 80059c0:	f44f 7a99 	mov.w	sl, #306	; 0x132
 80059c4:	4656      	mov	r6, sl
 80059c6:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 80059ca:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 80059ce:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 80059d2:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 80059d6:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 80059da:	f04f 0a14 	mov.w	sl, #20
 80059de:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 80059e2:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 80059e6:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 80059ea:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 80059ee:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 80059f2:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 80059f6:	f04f 0a15 	mov.w	sl, #21
 80059fa:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 80059fe:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8005a02:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8005a06:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8005a0a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8005a0e:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8005a12:	f04f 0a16 	mov.w	sl, #22
 8005a16:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8005a1a:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8005a1e:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8005a22:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8005a26:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8005a2a:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8005a2e:	f04f 0e17 	mov.w	lr, #23
 8005a32:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8005a36:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8005a3a:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8005a3e:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8005a42:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8005a46:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8005a4a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8005a4e:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8005a52:	f04f 0918 	mov.w	r9, #24
 8005a56:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8005a5a:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8005a5e:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8005a62:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8005a66:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8005a6a:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8005a6e:	f04f 0819 	mov.w	r8, #25
 8005a72:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8005a76:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8005a7a:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8005a7e:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8005a82:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8005a86:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8005a8a:	271a      	movs	r7, #26
 8005a8c:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8005a90:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8005a94:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8005a98:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8005a9c:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8005aa0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8005aa4:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8005aa8:	271b      	movs	r7, #27
 8005aaa:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8005aae:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8005ab2:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8005ab6:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8005aba:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8005abe:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8005ac2:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8005ac6:	271c      	movs	r7, #28
 8005ac8:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8005acc:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8005ad0:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8005ad4:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8005ad8:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8005adc:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8005ae0:	271d      	movs	r7, #29
 8005ae2:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8005ae6:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8005aea:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8005aee:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8005af2:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8005af6:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8005afa:	271e      	movs	r7, #30
 8005afc:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8005b00:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005b04:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8005b08:	26e2      	movs	r6, #226	; 0xe2
 8005b0a:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8005b0e:	f44f 7790 	mov.w	r7, #288	; 0x120
 8005b12:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8005b16:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8005b1a:	f04f 0709 	mov.w	r7, #9
 8005b1e:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8005b22:	4b14      	ldr	r3, [pc, #80]	; (8005b74 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8005b24:	801c      	strh	r4, [r3, #0]
 8005b26:	f8a3 e002 	strh.w	lr, [r3, #2]
 8005b2a:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8005b2e:	f8a3 c004 	strh.w	ip, [r3, #4]
 8005b32:	80da      	strh	r2, [r3, #6]
};
 8005b34:	2700      	movs	r7, #0
 8005b36:	609f      	str	r7, [r3, #8]
 8005b38:	f04f 0805 	mov.w	r8, #5
 8005b3c:	f8a3 800c 	strh.w	r8, [r3, #12]
 8005b40:	821d      	strh	r5, [r3, #16]
 8005b42:	f8a3 e012 	strh.w	lr, [r3, #18]
 8005b46:	f8a3 c014 	strh.w	ip, [r3, #20]
 8005b4a:	82da      	strh	r2, [r3, #22]
 8005b4c:	619f      	str	r7, [r3, #24]
 8005b4e:	f04f 0e04 	mov.w	lr, #4
 8005b52:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8005b56:	841c      	strh	r4, [r3, #32]
 8005b58:	845e      	strh	r6, [r3, #34]	; 0x22
 8005b5a:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8005b5e:	84da      	strh	r2, [r3, #38]	; 0x26
 8005b60:	629f      	str	r7, [r3, #40]	; 0x28
 8005b62:	f04f 0408 	mov.w	r4, #8
 8005b66:	859c      	strh	r4, [r3, #44]	; 0x2c
 8005b68:	861d      	strh	r5, [r3, #48]	; 0x30
 8005b6a:	865e      	strh	r6, [r3, #50]	; 0x32
 8005b6c:	e004      	b.n	8005b78 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8005b6e:	bf00      	nop
 8005b70:	24005f6c 	.word	0x24005f6c
 8005b74:	24005f0c 	.word	0x24005f0c
 8005b78:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8005b7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b7e:	639f      	str	r7, [r3, #56]	; 0x38
 8005b80:	f04f 0206 	mov.w	r2, #6
 8005b84:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005b86:	4604      	mov	r4, r0
 8005b88:	3340      	adds	r3, #64	; 0x40
 8005b8a:	2c00      	cmp	r4, #0
 8005b8c:	db0b      	blt.n	8005ba6 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	605a      	str	r2, [r3, #4]
 8005b94:	609a      	str	r2, [r3, #8]
 8005b96:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	805a      	strh	r2, [r3, #2]
 8005b9c:	809a      	strh	r2, [r3, #4]
 8005b9e:	80da      	strh	r2, [r3, #6]
 8005ba0:	3310      	adds	r3, #16
 8005ba2:	3c01      	subs	r4, #1
 8005ba4:	e7f1      	b.n	8005b8a <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005ba6:	4b11      	ldr	r3, [pc, #68]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005ba8:	2205      	movs	r2, #5
 8005baa:	825a      	strh	r2, [r3, #18]
 8005bac:	222d      	movs	r2, #45	; 0x2d
 8005bae:	829a      	strh	r2, [r3, #20]
 8005bb0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8005bb4:	82da      	strh	r2, [r3, #22]
 8005bb6:	2246      	movs	r2, #70	; 0x46
 8005bb8:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8005bba:	4a0d      	ldr	r2, [pc, #52]	; (8005bf0 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005bbc:	61da      	str	r2, [r3, #28]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	841a      	strh	r2, [r3, #32]
        : color(col)
 8005bc2:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24
 8005bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bcc:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8005bce:	b918      	cbnz	r0, 8005bd8 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bd4:	4299      	cmp	r1, r3
 8005bd6:	d001      	beq.n	8005bdc <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8005bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005bde:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005be0:	61da      	str	r2, [r3, #28]
 8005be2:	e7f9      	b.n	8005bd8 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005be4:	4b01      	ldr	r3, [pc, #4]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005be6:	4a02      	ldr	r2, [pc, #8]	; (8005bf0 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005be8:	61da      	str	r2, [r3, #28]
 8005bea:	4770      	bx	lr
 8005bec:	24000010 	.word	0x24000010
 8005bf0:	08024fe8 	.word	0x08024fe8

08005bf4 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt>:
    virtual void execute(T1 t1)
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8005bf8:	6844      	ldr	r4, [r0, #4]
 8005bfa:	68c2      	ldr	r2, [r0, #12]
 8005bfc:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8005c00:	f012 0f01 	tst.w	r2, #1
 8005c04:	d102      	bne.n	8005c0c <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt+0x18>
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4798      	blx	r3
    }
 8005c0a:	bd10      	pop	{r4, pc}
 8005c0c:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8005c10:	f854 200c 	ldr.w	r2, [r4, ip]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	58d3      	ldr	r3, [r2, r3]
 8005c18:	e7f6      	b.n	8005c08 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt+0x14>

08005c1a <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005c1a:	6843      	ldr	r3, [r0, #4]
 8005c1c:	b14b      	cbz	r3, 8005c32 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x18>
 8005c1e:	6883      	ldr	r3, [r0, #8]
 8005c20:	b10b      	cbz	r3, 8005c26 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0xc>
 8005c22:	2001      	movs	r0, #1
 8005c24:	4770      	bx	lr
 8005c26:	68c3      	ldr	r3, [r0, #12]
 8005c28:	f013 0f01 	tst.w	r3, #1
 8005c2c:	d003      	beq.n	8005c36 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x1c>
 8005c2e:	2001      	movs	r0, #1
 8005c30:	4770      	bx	lr
 8005c32:	2000      	movs	r0, #0
 8005c34:	4770      	bx	lr
 8005c36:	2000      	movs	r0, #0
    }
 8005c38:	4770      	bx	lr

08005c3a <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv>:
    virtual void execute()
 8005c3a:	b508      	push	{r3, lr}
 8005c3c:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8005c3e:	6841      	ldr	r1, [r0, #4]
 8005c40:	68c2      	ldr	r2, [r0, #12]
 8005c42:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8005c46:	f012 0f01 	tst.w	r2, #1
 8005c4a:	d102      	bne.n	8005c52 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv+0x18>
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	4798      	blx	r3
    }
 8005c50:	bd08      	pop	{r3, pc}
 8005c52:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8005c56:	f851 200c 	ldr.w	r2, [r1, ip]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	58d3      	ldr	r3, [r2, r3]
 8005c5e:	e7f6      	b.n	8005c4e <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv+0x14>

08005c60 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005c60:	6843      	ldr	r3, [r0, #4]
 8005c62:	b14b      	cbz	r3, 8005c78 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x18>
 8005c64:	6883      	ldr	r3, [r0, #8]
 8005c66:	b10b      	cbz	r3, 8005c6c <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0xc>
 8005c68:	2001      	movs	r0, #1
 8005c6a:	4770      	bx	lr
 8005c6c:	68c3      	ldr	r3, [r0, #12]
 8005c6e:	f013 0f01 	tst.w	r3, #1
 8005c72:	d003      	beq.n	8005c7c <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x1c>
 8005c74:	2001      	movs	r0, #1
 8005c76:	4770      	bx	lr
 8005c78:	2000      	movs	r0, #0
 8005c7a:	4770      	bx	lr
 8005c7c:	2000      	movs	r0, #0
    }
 8005c7e:	4770      	bx	lr

08005c80 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c80:	b510      	push	{r4, lr}
 8005c82:	4604      	mov	r4, r0
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev+0x18>)
 8005c86:	6003      	str	r3, [r0, #0]
    {
 8005c88:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev+0x1c>)
 8005c8a:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c8c:	2110      	movs	r1, #16
 8005c8e:	f01d fb2a 	bl	80232e6 <_ZdlPvj>
 8005c92:	4620      	mov	r0, r4
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	bf00      	nop
 8005c98:	08026164 	.word	0x08026164
 8005c9c:	08025044 	.word	0x08025044

08005ca0 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev+0x18>)
 8005ca6:	6003      	str	r3, [r0, #0]
    }
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev+0x1c>)
 8005caa:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005cac:	2110      	movs	r1, #16
 8005cae:	f01d fb1a 	bl	80232e6 <_ZdlPvj>
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	bf00      	nop
 8005cb8:	0802617c 	.word	0x0802617c
 8005cbc:	0802614c 	.word	0x0802614c

08005cc0 <_ZN14CustomKeyboardD0Ev>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <_ZN14CustomKeyboardD0Ev+0x9c>)
 8005cc6:	6003      	str	r3, [r0, #0]
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <_ZN14CustomKeyboardD0Ev+0xa0>)
 8005cca:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    }
 8005cce:	4b25      	ldr	r3, [pc, #148]	; (8005d64 <_ZN14CustomKeyboardD0Ev+0xa4>)
 8005cd0:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005cd4:	4a24      	ldr	r2, [pc, #144]	; (8005d68 <_ZN14CustomKeyboardD0Ev+0xa8>)
 8005cd6:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
    {
 8005cda:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <_ZN14CustomKeyboardD0Ev+0xac>)
 8005cdc:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005ce0:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
    {
 8005ce4:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005ce8:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
    {
 8005cec:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005cf0:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
    {
 8005cf4:	f8c0 31dc 	str.w	r3, [r0, #476]	; 0x1dc
 8005cf8:	4e1d      	ldr	r6, [pc, #116]	; (8005d70 <_ZN14CustomKeyboardD0Ev+0xb0>)
 8005cfa:	f8c0 6194 	str.w	r6, [r0, #404]	; 0x194
 8005cfe:	4d1d      	ldr	r5, [pc, #116]	; (8005d74 <_ZN14CustomKeyboardD0Ev+0xb4>)
 8005d00:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
 8005d04:	4a1c      	ldr	r2, [pc, #112]	; (8005d78 <_ZN14CustomKeyboardD0Ev+0xb8>)
 8005d06:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <_ZN14CustomKeyboardD0Ev+0xbc>)
 8005d0c:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
 8005d10:	491b      	ldr	r1, [pc, #108]	; (8005d80 <_ZN14CustomKeyboardD0Ev+0xc0>)
 8005d12:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005d14:	491b      	ldr	r1, [pc, #108]	; (8005d84 <_ZN14CustomKeyboardD0Ev+0xc4>)
 8005d16:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 8005d1a:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 8005d1e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8005d22:	4f19      	ldr	r7, [pc, #100]	; (8005d88 <_ZN14CustomKeyboardD0Ev+0xc8>)
 8005d24:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8005d28:	4f18      	ldr	r7, [pc, #96]	; (8005d8c <_ZN14CustomKeyboardD0Ev+0xcc>)
 8005d2a:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
 8005d2e:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 8005d32:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
 8005d36:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8005d3a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8005d3e:	6641      	str	r1, [r0, #100]	; 0x64
 8005d40:	6642      	str	r2, [r0, #100]	; 0x64
 8005d42:	6643      	str	r3, [r0, #100]	; 0x64
 8005d44:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <_ZN14CustomKeyboardD0Ev+0xd0>)
 8005d46:	62c2      	str	r2, [r0, #44]	; 0x2c
 8005d48:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005d4a:	6002      	str	r2, [r0, #0]
 8005d4c:	6003      	str	r3, [r0, #0]
 8005d4e:	f44f 710d 	mov.w	r1, #564	; 0x234
 8005d52:	f01d fac8 	bl	80232e6 <_ZdlPvj>
 8005d56:	4620      	mov	r0, r4
 8005d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08026194 	.word	0x08026194
 8005d60:	0802617c 	.word	0x0802617c
 8005d64:	0802614c 	.word	0x0802614c
 8005d68:	08026164 	.word	0x08026164
 8005d6c:	08025044 	.word	0x08025044
 8005d70:	08026d90 	.word	0x08026d90
 8005d74:	08024fe8 	.word	0x08024fe8
 8005d78:	08025b48 	.word	0x08025b48
 8005d7c:	08027120 	.word	0x08027120
 8005d80:	08026fec 	.word	0x08026fec
 8005d84:	08026f80 	.word	0x08026f80
 8005d88:	08025d50 	.word	0x08025d50
 8005d8c:	08026e88 	.word	0x08026e88
 8005d90:	08026a1c 	.word	0x08026a1c

08005d94 <_ZN14CustomKeyboard17setKeyMappingListEv>:
{
 8005d94:	b530      	push	{r4, r5, lr}
 8005d96:	b085      	sub	sp, #20
 8005d98:	4604      	mov	r4, r0
    if (alphaKeys)
 8005d9a:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
 8005d9e:	b1d3      	cbz	r3, 8005dd6 <_ZN14CustomKeyboard17setKeyMappingListEv+0x42>
        : typedTextId(id)
 8005da0:	4d1a      	ldr	r5, [pc, #104]	; (8005e0c <_ZN14CustomKeyboard17setKeyMappingListEv+0x78>)
 8005da2:	9500      	str	r5, [sp, #0]
 8005da4:	2302      	movs	r3, #2
 8005da6:	f8ad 3004 	strh.w	r3, [sp, #4]
        modeBtnTextArea.setTypedText(TypedText(T_ALPHAMODE));
 8005daa:	4669      	mov	r1, sp
 8005dac:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 8005db0:	f00f feba 	bl	8015b28 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005db4:	9500      	str	r5, [sp, #0]
        if (uppercaseKeys)
 8005db6:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8005dba:	b133      	cbz	r3, 8005dca <_ZN14CustomKeyboard17setKeyMappingListEv+0x36>
            keyboard.setKeymappingList(&keyMappingListAlphaUpper);
 8005dbc:	4914      	ldr	r1, [pc, #80]	; (8005e10 <_ZN14CustomKeyboard17setKeyMappingListEv+0x7c>)
 8005dbe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005dc2:	f010 fc83 	bl	80166cc <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
}
 8005dc6:	b005      	add	sp, #20
 8005dc8:	bd30      	pop	{r4, r5, pc}
            keyboard.setKeymappingList(&keyMappingListAlphaLower);
 8005dca:	4912      	ldr	r1, [pc, #72]	; (8005e14 <_ZN14CustomKeyboard17setKeyMappingListEv+0x80>)
 8005dcc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005dd0:	f010 fc7c 	bl	80166cc <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
 8005dd4:	e7f7      	b.n	8005dc6 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
        : typedTextId(id)
 8005dd6:	4d0d      	ldr	r5, [pc, #52]	; (8005e0c <_ZN14CustomKeyboard17setKeyMappingListEv+0x78>)
 8005dd8:	9502      	str	r5, [sp, #8]
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f8ad 300c 	strh.w	r3, [sp, #12]
        modeBtnTextArea.setTypedText(TypedText(T_NUMMODE));
 8005de0:	a902      	add	r1, sp, #8
 8005de2:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 8005de6:	f00f fe9f 	bl	8015b28 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005dea:	9502      	str	r5, [sp, #8]
        if (uppercaseKeys)
 8005dec:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8005df0:	b12b      	cbz	r3, 8005dfe <_ZN14CustomKeyboard17setKeyMappingListEv+0x6a>
            keyboard.setKeymappingList(&keyMappingListNumUpper);
 8005df2:	4909      	ldr	r1, [pc, #36]	; (8005e18 <_ZN14CustomKeyboard17setKeyMappingListEv+0x84>)
 8005df4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005df8:	f010 fc68 	bl	80166cc <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
 8005dfc:	e7e3      	b.n	8005dc6 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8005dfe:	4907      	ldr	r1, [pc, #28]	; (8005e1c <_ZN14CustomKeyboard17setKeyMappingListEv+0x88>)
 8005e00:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005e04:	f010 fc62 	bl	80166cc <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
}
 8005e08:	e7dd      	b.n	8005dc6 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
 8005e0a:	bf00      	nop
 8005e0c:	08024fe8 	.word	0x08024fe8
 8005e10:	08026414 	.word	0x08026414
 8005e14:	0802640c 	.word	0x0802640c
 8005e18:	08026404 	.word	0x08026404
 8005e1c:	080263fc 	.word	0x080263fc

08005e20 <_ZN14CustomKeyboard23backspacePressedHandlerEv>:
{
 8005e20:	b538      	push	{r3, r4, r5, lr}
     *
     * @see setBufferPosition
     */
    uint16_t getBufferPosition()
    {
        return bufferPosition;
 8005e22:	f8b0 5062 	ldrh.w	r5, [r0, #98]	; 0x62
    if (pos > 0)
 8005e26:	b905      	cbnz	r5, 8005e2a <_ZN14CustomKeyboard23backspacePressedHandlerEv+0xa>
}
 8005e28:	bd38      	pop	{r3, r4, r5, pc}
 8005e2a:	4604      	mov	r4, r0
        buffer[pos - 1] = 0;
 8005e2c:	1e69      	subs	r1, r5, #1
 8005e2e:	f105 0387 	add.w	r3, r5, #135	; 0x87
 8005e32:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005e36:	2200      	movs	r2, #0
 8005e38:	809a      	strh	r2, [r3, #4]
        keyboard.setBufferPosition(pos - 1);
 8005e3a:	b289      	uxth	r1, r1
 8005e3c:	302c      	adds	r0, #44	; 0x2c
 8005e3e:	f010 fc41 	bl	80166c4 <_ZN8touchgfx8Keyboard17setBufferPositionEt>
        if (1 == pos)
 8005e42:	2d01      	cmp	r5, #1
 8005e44:	d1f0      	bne.n	8005e28 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x8>
            firstCharacterEntry = true;
 8005e46:	2301      	movs	r3, #1
 8005e48:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
            uppercaseKeys = true;
 8005e4c:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
            setKeyMappingList();
 8005e50:	4620      	mov	r0, r4
 8005e52:	f7ff ff9f 	bl	8005d94 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005e56:	e7e7      	b.n	8005e28 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x8>

08005e58 <_ZN14CustomKeyboard22capslockPressedHandlerEv>:
{
 8005e58:	b508      	push	{r3, lr}
    uppercaseKeys = !uppercaseKeys;
 8005e5a:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
 8005e5e:	f082 0201 	eor.w	r2, r2, #1
 8005e62:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    setKeyMappingList();
 8005e66:	f7ff ff95 	bl	8005d94 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005e6a:	bd08      	pop	{r3, pc}

08005e6c <_ZN14CustomKeyboard18modePressedHandlerEv>:
{
 8005e6c:	b508      	push	{r3, lr}
    alphaKeys = !alphaKeys;
 8005e6e:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
 8005e72:	f083 0301 	eor.w	r3, r3, #1
 8005e76:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (firstCharacterEntry && alphaKeys)
 8005e7a:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
 8005e7e:	b122      	cbz	r2, 8005e8a <_ZN14CustomKeyboard18modePressedHandlerEv+0x1e>
 8005e80:	b11b      	cbz	r3, 8005e8a <_ZN14CustomKeyboard18modePressedHandlerEv+0x1e>
        uppercaseKeys = true;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
 8005e88:	e002      	b.n	8005e90 <_ZN14CustomKeyboard18modePressedHandlerEv+0x24>
        uppercaseKeys = false;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    setKeyMappingList();
 8005e90:	f7ff ff80 	bl	8005d94 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005e94:	bd08      	pop	{r3, pc}

08005e96 <_ZN14CustomKeyboard17keyPressedhandlerEt>:
{
 8005e96:	b508      	push	{r3, lr}
    if (firstCharacterEntry && keyChar != 0)
 8005e98:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
 8005e9c:	b103      	cbz	r3, 8005ea0 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xa>
 8005e9e:	b901      	cbnz	r1, 8005ea2 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xc>
}
 8005ea0:	bd08      	pop	{r3, pc}
        firstCharacterEntry = false;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f880 322e 	strb.w	r3, [r0, #558]	; 0x22e
        uppercaseKeys = false;
 8005ea8:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
        setKeyMappingList();
 8005eac:	f7ff ff72 	bl	8005d94 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005eb0:	e7f6      	b.n	8005ea0 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xa>
	...

08005eb4 <_ZN14CustomKeyboardC1Ev>:
CustomKeyboard::CustomKeyboard() : keyboard(),
 8005eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eb8:	b08d      	sub	sp, #52	; 0x34
 8005eba:	4604      	mov	r4, r0
          visible(true)
 8005ebc:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8006150 <_ZN14CustomKeyboardC1Ev+0x29c>
 8005ec0:	f8c0 9000 	str.w	r9, [r0]
        : x(0), y(0), width(0), height(0)
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	8085      	strh	r5, [r0, #4]
 8005ec8:	80c5      	strh	r5, [r0, #6]
 8005eca:	8105      	strh	r5, [r0, #8]
 8005ecc:	8145      	strh	r5, [r0, #10]
 8005ece:	8185      	strh	r5, [r0, #12]
 8005ed0:	81c5      	strh	r5, [r0, #14]
 8005ed2:	8205      	strh	r5, [r0, #16]
 8005ed4:	8245      	strh	r5, [r0, #18]
 8005ed6:	6145      	str	r5, [r0, #20]
 8005ed8:	6185      	str	r5, [r0, #24]
 8005eda:	61c5      	str	r5, [r0, #28]
 8005edc:	8405      	strh	r5, [r0, #32]
 8005ede:	8445      	strh	r5, [r0, #34]	; 0x22
 8005ee0:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8005ee4:	f04f 0801 	mov.w	r8, #1
 8005ee8:	f880 8025 	strb.w	r8, [r0, #37]	; 0x25
          firstChild(0)
 8005eec:	4b8a      	ldr	r3, [pc, #552]	; (8006118 <_ZN14CustomKeyboardC1Ev+0x264>)
 8005eee:	6003      	str	r3, [r0, #0]
 8005ef0:	6285      	str	r5, [r0, #40]	; 0x28
    firstCharacterEntry(false)
 8005ef2:	4607      	mov	r7, r0
 8005ef4:	4b89      	ldr	r3, [pc, #548]	; (800611c <_ZN14CustomKeyboardC1Ev+0x268>)
 8005ef6:	f847 3b2c 	str.w	r3, [r7], #44
 8005efa:	4638      	mov	r0, r7
 8005efc:	f010 f914 	bl	8016128 <_ZN8touchgfx8KeyboardC1Ev>
 8005f00:	f504 76ca 	add.w	r6, r4, #404	; 0x194
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005f04:	2226      	movs	r2, #38	; 0x26
 8005f06:	4629      	mov	r1, r5
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f01d fbb1 	bl	8023670 <memset>
 8005f0e:	f8c4 9194 	str.w	r9, [r4, #404]	; 0x194
 8005f12:	80b5      	strh	r5, [r6, #4]
 8005f14:	80f5      	strh	r5, [r6, #6]
 8005f16:	8135      	strh	r5, [r6, #8]
 8005f18:	8175      	strh	r5, [r6, #10]
 8005f1a:	81b5      	strh	r5, [r6, #12]
 8005f1c:	81f5      	strh	r5, [r6, #14]
 8005f1e:	8235      	strh	r5, [r6, #16]
 8005f20:	8275      	strh	r5, [r6, #18]
 8005f22:	6175      	str	r5, [r6, #20]
 8005f24:	61b5      	str	r5, [r6, #24]
 8005f26:	61f5      	str	r5, [r6, #28]
 8005f28:	8435      	strh	r5, [r6, #32]
 8005f2a:	8475      	strh	r5, [r6, #34]	; 0x22
 8005f2c:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
 8005f30:	f886 8025 	strb.w	r8, [r6, #37]	; 0x25
 8005f34:	4b7a      	ldr	r3, [pc, #488]	; (8006120 <_ZN14CustomKeyboardC1Ev+0x26c>)
 8005f36:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8005f3a:	4b7a      	ldr	r3, [pc, #488]	; (8006124 <_ZN14CustomKeyboardC1Ev+0x270>)
 8005f3c:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
        : typedTextId(id)
 8005f40:	4b79      	ldr	r3, [pc, #484]	; (8006128 <_ZN14CustomKeyboardC1Ev+0x274>)
 8005f42:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f48:	85b3      	strh	r3, [r6, #44]	; 0x2c
        : color(col)
 8005f4a:	6335      	str	r5, [r6, #48]	; 0x30
 8005f4c:	86b5      	strh	r5, [r6, #52]	; 0x34
 8005f4e:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
 8005f52:	f886 5037 	strb.w	r5, [r6, #55]	; 0x37
 8005f56:	f886 5038 	strb.w	r5, [r6, #56]	; 0x38
 8005f5a:	f886 5039 	strb.w	r5, [r6, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005f5e:	87b5      	strh	r5, [r6, #60]	; 0x3c
 8005f60:	87f5      	strh	r5, [r6, #62]	; 0x3e
 8005f62:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
 8005f66:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
              text(0)
 8005f6a:	6475      	str	r5, [r6, #68]	; 0x44
 8005f6c:	4b6f      	ldr	r3, [pc, #444]	; (800612c <_ZN14CustomKeyboardC1Ev+0x278>)
 8005f6e:	9302      	str	r3, [sp, #8]
 8005f70:	9503      	str	r5, [sp, #12]
 8005f72:	466b      	mov	r3, sp
 8005f74:	aa02      	add	r2, sp, #8
 8005f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f7a:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005f7e:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8006154 <_ZN14CustomKeyboardC1Ev+0x2a0>
 8005f82:	f8c4 c1dc 	str.w	ip, [r4, #476]	; 0x1dc
        : pobject(pObject), pmemfun(pmemfun_0)
 8005f86:	4a6a      	ldr	r2, [pc, #424]	; (8006130 <_ZN14CustomKeyboardC1Ev+0x27c>)
 8005f88:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
 8005f8c:	f8c4 41e0 	str.w	r4, [r4, #480]	; 0x1e0
 8005f90:	f504 7ef2 	add.w	lr, r4, #484	; 0x1e4
 8005f94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f98:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005f9c:	4965      	ldr	r1, [pc, #404]	; (8006134 <_ZN14CustomKeyboardC1Ev+0x280>)
 8005f9e:	9104      	str	r1, [sp, #16]
 8005fa0:	9505      	str	r5, [sp, #20]
 8005fa2:	a904      	add	r1, sp, #16
 8005fa4:	c903      	ldmia	r1, {r0, r1}
 8005fa6:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005faa:	f8c4 c1ec 	str.w	ip, [r4, #492]	; 0x1ec
        : pobject(pObject), pmemfun(pmemfun_0)
 8005fae:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
 8005fb2:	f8c4 41f0 	str.w	r4, [r4, #496]	; 0x1f0
 8005fb6:	f504 7efa 	add.w	lr, r4, #500	; 0x1f4
 8005fba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005fbe:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005fc2:	495d      	ldr	r1, [pc, #372]	; (8006138 <_ZN14CustomKeyboardC1Ev+0x284>)
 8005fc4:	9106      	str	r1, [sp, #24]
 8005fc6:	9507      	str	r5, [sp, #28]
 8005fc8:	a906      	add	r1, sp, #24
 8005fca:	c903      	ldmia	r1, {r0, r1}
 8005fcc:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005fd0:	f8c4 c1fc 	str.w	ip, [r4, #508]	; 0x1fc
        : pobject(pObject), pmemfun(pmemfun_0)
 8005fd4:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
 8005fd8:	f8c4 4200 	str.w	r4, [r4, #512]	; 0x200
 8005fdc:	f504 7e01 	add.w	lr, r4, #516	; 0x204
 8005fe0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005fe4:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005fe8:	4954      	ldr	r1, [pc, #336]	; (800613c <_ZN14CustomKeyboardC1Ev+0x288>)
 8005fea:	9108      	str	r1, [sp, #32]
 8005fec:	9509      	str	r5, [sp, #36]	; 0x24
 8005fee:	a908      	add	r1, sp, #32
 8005ff0:	c903      	ldmia	r1, {r0, r1}
 8005ff2:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005ff6:	f8c4 c20c 	str.w	ip, [r4, #524]	; 0x20c
        : pobject(pObject), pmemfun(pmemfun_0)
 8005ffa:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 8005ffe:	f8c4 4210 	str.w	r4, [r4, #528]	; 0x210
 8006002:	f504 7205 	add.w	r2, r4, #532	; 0x214
 8006006:	e893 0003 	ldmia.w	r3, {r0, r1}
 800600a:	e882 0003 	stmia.w	r2, {r0, r1}
 800600e:	4a4c      	ldr	r2, [pc, #304]	; (8006140 <_ZN14CustomKeyboardC1Ev+0x28c>)
 8006010:	920a      	str	r2, [sp, #40]	; 0x28
 8006012:	950b      	str	r5, [sp, #44]	; 0x2c
 8006014:	aa0c      	add	r2, sp, #48	; 0x30
 8006016:	e912 0003 	ldmdb	r2, {r0, r1}
 800601a:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<T1, void, void>
 800601e:	4a49      	ldr	r2, [pc, #292]	; (8006144 <_ZN14CustomKeyboardC1Ev+0x290>)
 8006020:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
        : pobject(pObject), pmemfun(pmemfun_1)
 8006024:	4a48      	ldr	r2, [pc, #288]	; (8006148 <_ZN14CustomKeyboardC1Ev+0x294>)
 8006026:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 800602a:	f8c4 4220 	str.w	r4, [r4, #544]	; 0x220
 800602e:	f504 7209 	add.w	r2, r4, #548	; 0x224
 8006032:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006036:	e882 0003 	stmia.w	r2, {r0, r1}
 800603a:	f884 822c 	strb.w	r8, [r4, #556]	; 0x22c
 800603e:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
 8006042:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
    layout.callbackAreaArray[0].callback = &capslockPressed;
 8006046:	4941      	ldr	r1, [pc, #260]	; (800614c <_ZN14CustomKeyboardC1Ev+0x298>)
 8006048:	68cb      	ldr	r3, [r1, #12]
 800604a:	f504 72ee 	add.w	r2, r4, #476	; 0x1dc
 800604e:	609a      	str	r2, [r3, #8]
    layout.callbackAreaArray[1].callback = &backspacePressed;
 8006050:	68cb      	ldr	r3, [r1, #12]
 8006052:	f504 72f6 	add.w	r2, r4, #492	; 0x1ec
 8006056:	619a      	str	r2, [r3, #24]
    layout.callbackAreaArray[2].callback = &modePressed;
 8006058:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
 800605c:	629a      	str	r2, [r3, #40]	; 0x28
    layout.callbackAreaArray[3].callback = &donePressed;
 800605e:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8006062:	639a      	str	r2, [r3, #56]	; 0x38
    keyboard.setLayout(&layout);
 8006064:	4638      	mov	r0, r7
 8006066:	f010 f8d8 	bl	801621a <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>
    keyboard.setKeyListener(keyPressed);
 800606a:	f504 7307 	add.w	r3, r4, #540	; 0x21c
     *
     * @note Backspace, shift and mode keys report a 0 as value.
     */
    void setKeyListener(GenericCallback<Unicode::UnicodeChar>& callback)
    {
        keyListener = &callback;
 800606e:	65a3      	str	r3, [r4, #88]	; 0x58
        setX(x);
 8006070:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	4629      	mov	r1, r5
 8006076:	4638      	mov	r0, r7
 8006078:	4798      	blx	r3
        setY(y);
 800607a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800607c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607e:	4629      	mov	r1, r5
 8006080:	4638      	mov	r0, r7
 8006082:	4798      	blx	r3
        setWidth(width);
 8006084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800608c:	4638      	mov	r0, r7
 800608e:	4798      	blx	r3
        setHeight(height);
 8006090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006098:	4638      	mov	r0, r7
 800609a:	4798      	blx	r3
    keyboard.setTextIndentation();
 800609c:	4638      	mov	r0, r7
 800609e:	f010 f8ed 	bl	801627c <_ZN8touchgfx8Keyboard18setTextIndentationEv>
    memset(buffer, 0, sizeof(buffer));
 80060a2:	f504 798a 	add.w	r9, r4, #276	; 0x114
 80060a6:	227e      	movs	r2, #126	; 0x7e
 80060a8:	4629      	mov	r1, r5
 80060aa:	4648      	mov	r0, r9
 80060ac:	f01d fae0 	bl	8023670 <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 80060b0:	223f      	movs	r2, #63	; 0x3f
 80060b2:	4649      	mov	r1, r9
 80060b4:	4638      	mov	r0, r7
 80060b6:	f010 f8a5 	bl	8016204 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    uppercaseKeys = true;
 80060ba:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
    firstCharacterEntry = true;
 80060be:	f884 822e 	strb.w	r8, [r4, #558]	; 0x22e
        setX(x);
 80060c2:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	210c      	movs	r1, #12
 80060ca:	4630      	mov	r0, r6
 80060cc:	4798      	blx	r3
        setY(y);
 80060ce:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 80060d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d4:	21e9      	movs	r1, #233	; 0xe9
 80060d6:	4630      	mov	r0, r6
 80060d8:	4798      	blx	r3
        setWidth(width);
 80060da:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	214e      	movs	r1, #78	; 0x4e
 80060e2:	4630      	mov	r0, r6
 80060e4:	4798      	blx	r3
        setHeight(height);
 80060e6:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 80060ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ec:	2124      	movs	r1, #36	; 0x24
 80060ee:	4630      	mov	r0, r6
 80060f0:	4798      	blx	r3
        : color(col)
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295
        color = newColor;
 80060f6:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
    setKeyMappingList();
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7ff fe4a 	bl	8005d94 <_ZN14CustomKeyboard17setKeyMappingListEv>
    add(keyboard);
 8006100:	4639      	mov	r1, r7
 8006102:	4620      	mov	r0, r4
 8006104:	f00c ffca 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(modeBtnTextArea);
 8006108:	4631      	mov	r1, r6
 800610a:	4620      	mov	r0, r4
 800610c:	f00c ffc6 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006110:	4620      	mov	r0, r4
 8006112:	b00d      	add	sp, #52	; 0x34
 8006114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006118:	08026a1c 	.word	0x08026a1c
 800611c:	08026194 	.word	0x08026194
 8006120:	08025b48 	.word	0x08025b48
 8006124:	08026d90 	.word	0x08026d90
 8006128:	08024fe8 	.word	0x08024fe8
 800612c:	08005e59 	.word	0x08005e59
 8006130:	08026164 	.word	0x08026164
 8006134:	08005e21 	.word	0x08005e21
 8006138:	08005e6d 	.word	0x08005e6d
 800613c:	08005745 	.word	0x08005745
 8006140:	08005e97 	.word	0x08005e97
 8006144:	0802614c 	.word	0x0802614c
 8006148:	0802617c 	.word	0x0802617c
 800614c:	24000010 	.word	0x24000010
 8006150:	08027120 	.word	0x08027120
 8006154:	08025044 	.word	0x08025044

08006158 <_ZN14CustomKeyboard34setKeyboardDoneReturnPressedActionERN8touchgfx15GenericCallbackIA_tvvEE>:
    doneReturnCallback = &callback;
 8006158:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
}
 800615c:	4770      	bx	lr

0800615e <_ZN14CustomKeyboard11clearBufferEv>:
{
 800615e:	b538      	push	{r3, r4, r5, lr}
 8006160:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
 8006162:	f500 758a 	add.w	r5, r0, #276	; 0x114
 8006166:	227e      	movs	r2, #126	; 0x7e
 8006168:	2100      	movs	r1, #0
 800616a:	4628      	mov	r0, r5
 800616c:	f01d fa80 	bl	8023670 <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 8006170:	223f      	movs	r2, #63	; 0x3f
 8006172:	4629      	mov	r1, r5
 8006174:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8006178:	f010 f844 	bl	8016204 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    uppercaseKeys = true;
 800617c:	2301      	movs	r3, #1
 800617e:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
    firstCharacterEntry = true;
 8006182:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    alphaKeys = true;
 8006186:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c
    setKeyMappingList();
 800618a:	4620      	mov	r0, r4
 800618c:	f7ff fe02 	bl	8005d94 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8006190:	bd38      	pop	{r3, r4, r5, pc}

08006192 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
 8006192:	b508      	push	{r3, lr}
 8006194:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006198:	2001      	movs	r0, #1
 800619a:	f7ff faf9 	bl	8005790 <_Z41__static_initialization_and_destruction_0ii>
 800619e:	bd08      	pop	{r3, pc}

080061a0 <_GLOBAL__sub_D__ZN14CustomKeyboardC2Ev>:
 80061a0:	b508      	push	{r3, lr}
 80061a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061a6:	2000      	movs	r0, #0
 80061a8:	f7ff faf2 	bl	8005790 <_Z41__static_initialization_and_destruction_0ii>
 80061ac:	bd08      	pop	{r3, pc}
	...

080061b0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80061b0:	b510      	push	{r4, lr}
 80061b2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80061b4:	f7fd fce2 	bl	8003b7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80061b8:	4b01      	ldr	r3, [pc, #4]	; (80061c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 80061ba:	6023      	str	r3, [r4, #0]
{

}
 80061bc:	4620      	mov	r0, r4
 80061be:	bd10      	pop	{r4, pc}
 80061c0:	0802510c 	.word	0x0802510c

080061c4 <_ZN5ModelC1Ev>:
#endif




Model::Model() : modelListener(0), numberOfWifiAccesPoints(0)
 80061c4:	2200      	movs	r2, #0
 80061c6:	6002      	str	r2, [r0, #0]
 80061c8:	f8c0 2aa4 	str.w	r2, [r0, #2724]	; 0xaa4
{

}
 80061cc:	4770      	bx	lr

080061ce <_ZN5Model19getWifiAccessPointsER8wifiDatai>:
    handleMessages();
#endif
}

void Model::getWifiAccessPoints(wifiData &ap, int id)
{
 80061ce:	b508      	push	{r3, lr}
 80061d0:	460b      	mov	r3, r1
#ifndef SIMULATOR
  memcpy(&ap, &wifiAccessPoints[id], sizeof(ap));
 80061d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80061d6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80061da:	2288      	movs	r2, #136	; 0x88
 80061dc:	3104      	adds	r1, #4
 80061de:	4618      	mov	r0, r3
 80061e0:	f01d fa38 	bl	8023654 <memcpy>
#endif
}
 80061e4:	bd08      	pop	{r3, pc}
	...

080061e8 <_ZN5Model10updateWifiEv>:
}


// Called once we know WiFi AP scan has completed
void Model::updateWifi()
{
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	4607      	mov	r7, r0
    for (int cnt = 0; cnt < MAX_LISTED_AP; cnt++)
 80061ec:	2400      	movs	r4, #0
 80061ee:	e019      	b.n	8006224 <_ZN5Model10updateWifiEv+0x3c>
    return 4;
 80061f0:	2204      	movs	r2, #4
            break;

        wifiAccessPoints[cnt].id = cnt;
        touchgfx::Unicode::snprintf(wifiAccessPoints[cnt].ssid, 32, (const char*)APs[cnt].ssid.value);
        touchgfx::Unicode::snprintf(wifiAccessPoints[cnt].encryption, 30,net_wifi_security_to_string(APs[cnt].security));
        wifiAccessPoints[cnt].signalStrength = rssi_to_strength(APs[cnt].rssi);
 80061f2:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 80061f6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 80061fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        if ((APs[cnt].security != NET_WIFI_SM_OPEN) && (APs[cnt].security != NET_WIFI_SM_UNKNOWN))
 80061fe:	4b2b      	ldr	r3, [pc, #172]	; (80062ac <_ZN5Model10updateWifiEv+0xc4>)
 8006200:	2234      	movs	r2, #52	; 0x34
 8006202:	fb02 3304 	mla	r3, r2, r4, r3
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	3b01      	subs	r3, #1
 800620a:	f113 0f03 	cmn.w	r3, #3
 800620e:	d806      	bhi.n	800621e <_ZN5Model10updateWifiEv+0x36>
        {
            wifiAccessPoints[cnt].encrypted = true;
 8006210:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8006214:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        }
        numberOfWifiAccesPoints=cnt+1;
 800621e:	3401      	adds	r4, #1
 8006220:	f8c7 4aa4 	str.w	r4, [r7, #2724]	; 0xaa4
    for (int cnt = 0; cnt < MAX_LISTED_AP; cnt++)
 8006224:	2c09      	cmp	r4, #9
 8006226:	dc37      	bgt.n	8006298 <_ZN5Model10updateWifiEv+0xb0>
        if (APs[cnt].ssid.value[0] == 0)
 8006228:	4b20      	ldr	r3, [pc, #128]	; (80062ac <_ZN5Model10updateWifiEv+0xc4>)
 800622a:	2234      	movs	r2, #52	; 0x34
 800622c:	fb02 3304 	mla	r3, r2, r4, r3
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	b38b      	cbz	r3, 8006298 <_ZN5Model10updateWifiEv+0xb0>
        wifiAccessPoints[cnt].id = cnt;
 8006234:	0125      	lsls	r5, r4, #4
 8006236:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 800623a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800623e:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
        touchgfx::Unicode::snprintf(wifiAccessPoints[cnt].ssid, 32, (const char*)APs[cnt].ssid.value);
 8006242:	4e1a      	ldr	r6, [pc, #104]	; (80062ac <_ZN5Model10updateWifiEv+0xc4>)
 8006244:	fb02 6604 	mla	r6, r2, r4, r6
 8006248:	1c72      	adds	r2, r6, #1
 800624a:	2120      	movs	r1, #32
 800624c:	3004      	adds	r0, #4
 800624e:	f014 fdfb 	bl	801ae48 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        touchgfx::Unicode::snprintf(wifiAccessPoints[cnt].encryption, 30,net_wifi_security_to_string(APs[cnt].security));
 8006252:	4425      	add	r5, r4
 8006254:	00ed      	lsls	r5, r5, #3
 8006256:	3540      	adds	r5, #64	; 0x40
 8006258:	443d      	add	r5, r7
 800625a:	3504      	adds	r5, #4
 800625c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800625e:	f00b fc49 	bl	8011af4 <net_wifi_security_to_string>
 8006262:	4602      	mov	r2, r0
 8006264:	211e      	movs	r1, #30
 8006266:	4628      	mov	r0, r5
 8006268:	f014 fdee 	bl	801ae48 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wifiAccessPoints[cnt].signalStrength = rssi_to_strength(APs[cnt].rssi);
 800626c:	f996 3031 	ldrsb.w	r3, [r6, #49]	; 0x31
  if(RSSI >= -50)
 8006270:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8006274:	dabc      	bge.n	80061f0 <_ZN5Model10updateWifiEv+0x8>
  if(RSSI >= -60)
 8006276:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
 800627a:	da07      	bge.n	800628c <_ZN5Model10updateWifiEv+0xa4>
  if(RSSI >= -70)
 800627c:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8006280:	da06      	bge.n	8006290 <_ZN5Model10updateWifiEv+0xa8>
  if(RSSI >= -100)
 8006282:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8006286:	da05      	bge.n	8006294 <_ZN5Model10updateWifiEv+0xac>
    return 0;
 8006288:	2200      	movs	r2, #0
 800628a:	e7b2      	b.n	80061f2 <_ZN5Model10updateWifiEv+0xa>
    return 3;
 800628c:	2203      	movs	r2, #3
 800628e:	e7b0      	b.n	80061f2 <_ZN5Model10updateWifiEv+0xa>
    return 2;
 8006290:	2202      	movs	r2, #2
 8006292:	e7ae      	b.n	80061f2 <_ZN5Model10updateWifiEv+0xa>
    return 1;
 8006294:	2201      	movs	r2, #1
 8006296:	e7ac      	b.n	80061f2 <_ZN5Model10updateWifiEv+0xa>
    }
    modelListener->updateWiFiInformaion(wifiAccessPoints, numberOfWifiAccesPoints);
 8006298:	4639      	mov	r1, r7
 800629a:	f851 0b04 	ldr.w	r0, [r1], #4
 800629e:	6803      	ldr	r3, [r0, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 80062a6:	4798      	blx	r3
}
 80062a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062aa:	bf00      	nop
 80062ac:	2400587c 	.word	0x2400587c

080062b0 <_ZN5Model14handleMessagesEv>:
{
 80062b0:	b510      	push	{r4, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	4604      	mov	r4, r0
    if (osMessageQueueGetCount(GUI_QueueHandle) > 0)
 80062b6:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <_ZN5Model14handleMessagesEv+0x34>)
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	f009 fab3 	bl	800f824 <osMessageQueueGetCount>
 80062be:	b908      	cbnz	r0, 80062c4 <_ZN5Model14handleMessagesEv+0x14>
}
 80062c0:	b002      	add	sp, #8
 80062c2:	bd10      	pop	{r4, pc}
        osMessageQueueGet(GUI_QueueHandle, &msg, 0, 0);
 80062c4:	2300      	movs	r3, #0
 80062c6:	461a      	mov	r2, r3
 80062c8:	f10d 0107 	add.w	r1, sp, #7
 80062cc:	4805      	ldr	r0, [pc, #20]	; (80062e4 <_ZN5Model14handleMessagesEv+0x34>)
 80062ce:	6800      	ldr	r0, [r0, #0]
 80062d0:	f009 fa69 	bl	800f7a6 <osMessageQueueGet>
        switch(msg)
 80062d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d1f1      	bne.n	80062c0 <_ZN5Model14handleMessagesEv+0x10>
                updateWifi();
 80062dc:	4620      	mov	r0, r4
 80062de:	f7ff ff83 	bl	80061e8 <_ZN5Model10updateWifiEv>
}
 80062e2:	e7ed      	b.n	80062c0 <_ZN5Model14handleMessagesEv+0x10>
 80062e4:	24004f00 	.word	0x24004f00

080062e8 <_ZN5Model4tickEv>:
{
 80062e8:	b508      	push	{r3, lr}
    handleMessages();
 80062ea:	f7ff ffe1 	bl	80062b0 <_ZN5Model14handleMessagesEv>
}
 80062ee:	bd08      	pop	{r3, pc}

080062f0 <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 80062f0:	4770      	bx	lr

080062f2 <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 80062f2:	4770      	bx	lr

080062f4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 80062f4:	4b01      	ldr	r3, [pc, #4]	; (80062fc <_ZN8touchgfx9PresenterD1Ev+0x8>)
 80062f6:	6003      	str	r3, [r0, #0]
    }
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	08026424 	.word	0x08026424

08006300 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8006300:	4b01      	ldr	r3, [pc, #4]	; (8006308 <_ZN13ModelListenerD1Ev+0x8>)
 8006302:	6003      	str	r3, [r0, #0]
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	0802643c 	.word	0x0802643c

0800630c <_ZN13ModelListener20updateWiFiInformaionEP8wifiDatai>:
    }

    virtual void updateWiFiInformaion(struct  wifiData data[], int numberOfPoints) {}
 800630c:	4770      	bx	lr
	...

08006310 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8006310:	4a05      	ldr	r2, [pc, #20]	; (8006328 <_ZN19mainScreenPresenterD1Ev+0x18>)
 8006312:	f102 0108 	add.w	r1, r2, #8
 8006316:	6001      	str	r1, [r0, #0]
 8006318:	3224      	adds	r2, #36	; 0x24
 800631a:	6042      	str	r2, [r0, #4]
    virtual ~ModelListener() {}
 800631c:	4a03      	ldr	r2, [pc, #12]	; (800632c <_ZN19mainScreenPresenterD1Ev+0x1c>)
 800631e:	6042      	str	r2, [r0, #4]
    {
 8006320:	4a03      	ldr	r2, [pc, #12]	; (8006330 <_ZN19mainScreenPresenterD1Ev+0x20>)
 8006322:	6002      	str	r2, [r0, #0]
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	08026448 	.word	0x08026448
 800632c:	0802643c 	.word	0x0802643c
 8006330:	08026424 	.word	0x08026424

08006334 <_ZThn4_N19mainScreenPresenterD1Ev>:
 8006334:	4603      	mov	r3, r0
 8006336:	4a07      	ldr	r2, [pc, #28]	; (8006354 <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 8006338:	f102 0108 	add.w	r1, r2, #8
 800633c:	f840 1c04 	str.w	r1, [r0, #-4]
 8006340:	3224      	adds	r2, #36	; 0x24
 8006342:	f840 2904 	str.w	r2, [r0], #-4
 8006346:	4a04      	ldr	r2, [pc, #16]	; (8006358 <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 8006348:	6042      	str	r2, [r0, #4]
 800634a:	4a04      	ldr	r2, [pc, #16]	; (800635c <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 800634c:	f843 2c04 	str.w	r2, [r3, #-4]
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	08026448 	.word	0x08026448
 8006358:	0802643c 	.word	0x0802643c
 800635c:	08026424 	.word	0x08026424

08006360 <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 8006360:	4770      	bx	lr

08006362 <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 8006362:	4770      	bx	lr

08006364 <_Z41__static_initialization_and_destruction_0ii>:
}

void mainScreenPresenter::getWifiAccessPoints(wifiData &ap, int id)
{
    model->getWifiAccessPoints(ap, id);
}
 8006364:	2801      	cmp	r0, #1
 8006366:	d006      	beq.n	8006376 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8006368:	b920      	cbnz	r0, 8006374 <_Z41__static_initialization_and_destruction_0ii+0x10>
 800636a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800636e:	4299      	cmp	r1, r3
 8006370:	f000 8222 	beq.w	80067b8 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8006374:	4770      	bx	lr
 8006376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800637a:	4299      	cmp	r1, r3
 800637c:	d1f4      	bne.n	8006368 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800637e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8006382:	4bf0      	ldr	r3, [pc, #960]	; (8006744 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8006384:	2201      	movs	r2, #1
 8006386:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006388:	240c      	movs	r4, #12
 800638a:	805c      	strh	r4, [r3, #2]
 800638c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8006390:	f8a3 e004 	strh.w	lr, [r3, #4]
 8006394:	2224      	movs	r2, #36	; 0x24
 8006396:	80da      	strh	r2, [r3, #6]
 8006398:	811a      	strh	r2, [r3, #8]
 800639a:	f04f 0c07 	mov.w	ip, #7
 800639e:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80063a2:	2502      	movs	r5, #2
 80063a4:	731d      	strb	r5, [r3, #12]
 80063a6:	f04f 0a36 	mov.w	sl, #54	; 0x36
 80063aa:	f8a3 a00e 	strh.w	sl, [r3, #14]
 80063ae:	f8a3 e010 	strh.w	lr, [r3, #16]
 80063b2:	825a      	strh	r2, [r3, #18]
 80063b4:	829a      	strh	r2, [r3, #20]
 80063b6:	f8a3 c016 	strh.w	ip, [r3, #22]
 80063ba:	2503      	movs	r5, #3
 80063bc:	761d      	strb	r5, [r3, #24]
 80063be:	f04f 0660 	mov.w	r6, #96	; 0x60
 80063c2:	835e      	strh	r6, [r3, #26]
 80063c4:	f8a3 e01c 	strh.w	lr, [r3, #28]
 80063c8:	83da      	strh	r2, [r3, #30]
 80063ca:	841a      	strh	r2, [r3, #32]
 80063cc:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 80063d0:	f04f 0504 	mov.w	r5, #4
 80063d4:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 80063d8:	f04f 088a 	mov.w	r8, #138	; 0x8a
 80063dc:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 80063e0:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 80063e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063e6:	859a      	strh	r2, [r3, #44]	; 0x2c
 80063e8:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 80063ec:	f04f 0505 	mov.w	r5, #5
 80063f0:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 80063f4:	27b4      	movs	r7, #180	; 0xb4
 80063f6:	865f      	strh	r7, [r3, #50]	; 0x32
 80063f8:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 80063fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80063fe:	871a      	strh	r2, [r3, #56]	; 0x38
 8006400:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8006404:	f04f 0506 	mov.w	r5, #6
 8006408:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 800640c:	f04f 05de 	mov.w	r5, #222	; 0xde
 8006410:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8006412:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8006416:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800641a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800641e:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8006422:	f883 c048 	strb.w	ip, [r3, #72]	; 0x48
 8006426:	f44f 7984 	mov.w	r9, #264	; 0x108
 800642a:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 800642e:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8006432:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006436:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800643a:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 800643e:	f04f 0b08 	mov.w	fp, #8
 8006442:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8006446:	f44f 7b99 	mov.w	fp, #306	; 0x132
 800644a:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 800644e:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8006452:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8006456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800645a:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 800645e:	f04f 0509 	mov.w	r5, #9
 8006462:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8006466:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 800646a:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 800646e:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8006472:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8006476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800647a:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 800647e:	250a      	movs	r5, #10
 8006480:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8006484:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8006488:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 800648c:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8006490:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8006494:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8006498:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 800649c:	f04f 090b 	mov.w	r9, #11
 80064a0:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 80064a4:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 80064a8:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 80064ac:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 80064b0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80064b4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80064b8:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 80064bc:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 80064c0:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 80064c4:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 80064c8:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 80064cc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80064d0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80064d4:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 80064d8:	f04f 060d 	mov.w	r6, #13
 80064dc:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 80064e0:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 80064e4:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 80064e8:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80064ec:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80064f0:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 80064f4:	f04f 0a0e 	mov.w	sl, #14
 80064f8:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 80064fc:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006500:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8006504:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8006508:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800650c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8006510:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8006514:	f04f 0a0f 	mov.w	sl, #15
 8006518:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 800651c:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8006520:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8006524:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8006528:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800652c:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8006530:	f04f 0a10 	mov.w	sl, #16
 8006534:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8006538:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 800653c:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8006540:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8006544:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8006548:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 800654c:	f04f 0a11 	mov.w	sl, #17
 8006550:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8006554:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8006558:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 800655c:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8006560:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8006564:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8006568:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 800656c:	f04f 0a12 	mov.w	sl, #18
 8006570:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8006574:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8006578:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 800657c:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8006580:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8006584:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8006588:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 800658c:	f04f 0a13 	mov.w	sl, #19
 8006590:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8006594:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8006598:	4656      	mov	r6, sl
 800659a:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 800659e:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 80065a2:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 80065a6:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 80065aa:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 80065ae:	f04f 0a14 	mov.w	sl, #20
 80065b2:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 80065b6:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 80065ba:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 80065be:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 80065c2:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 80065c6:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 80065ca:	f04f 0a15 	mov.w	sl, #21
 80065ce:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 80065d2:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 80065d6:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 80065da:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 80065de:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80065e2:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 80065e6:	f04f 0a16 	mov.w	sl, #22
 80065ea:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 80065ee:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 80065f2:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 80065f6:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 80065fa:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80065fe:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8006602:	f04f 0e17 	mov.w	lr, #23
 8006606:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 800660a:	f04f 0e60 	mov.w	lr, #96	; 0x60
 800660e:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8006612:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8006616:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 800661a:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 800661e:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8006622:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8006626:	f04f 0918 	mov.w	r9, #24
 800662a:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 800662e:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8006632:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8006636:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 800663a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800663e:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8006642:	f04f 0819 	mov.w	r8, #25
 8006646:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 800664a:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 800664e:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8006652:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8006656:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 800665a:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 800665e:	271a      	movs	r7, #26
 8006660:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8006664:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8006668:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 800666c:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8006670:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8006674:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8006678:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 800667c:	271b      	movs	r7, #27
 800667e:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8006682:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8006686:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 800668a:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 800668e:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8006692:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8006696:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 800669a:	271c      	movs	r7, #28
 800669c:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 80066a0:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 80066a4:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 80066a8:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 80066ac:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 80066b0:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 80066b4:	271d      	movs	r7, #29
 80066b6:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 80066ba:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 80066be:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 80066c2:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 80066c6:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 80066ca:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 80066ce:	271e      	movs	r7, #30
 80066d0:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 80066d4:	f04f 0660 	mov.w	r6, #96	; 0x60
 80066d8:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 80066dc:	26e2      	movs	r6, #226	; 0xe2
 80066de:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 80066e2:	f44f 7790 	mov.w	r7, #288	; 0x120
 80066e6:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 80066ea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 80066ee:	f04f 0709 	mov.w	r7, #9
 80066f2:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80066f8:	801c      	strh	r4, [r3, #0]
 80066fa:	f8a3 e002 	strh.w	lr, [r3, #2]
 80066fe:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8006702:	f8a3 c004 	strh.w	ip, [r3, #4]
 8006706:	80da      	strh	r2, [r3, #6]
};
 8006708:	2700      	movs	r7, #0
 800670a:	609f      	str	r7, [r3, #8]
 800670c:	f04f 0805 	mov.w	r8, #5
 8006710:	f8a3 800c 	strh.w	r8, [r3, #12]
 8006714:	821d      	strh	r5, [r3, #16]
 8006716:	f8a3 e012 	strh.w	lr, [r3, #18]
 800671a:	f8a3 c014 	strh.w	ip, [r3, #20]
 800671e:	82da      	strh	r2, [r3, #22]
 8006720:	619f      	str	r7, [r3, #24]
 8006722:	f04f 0e04 	mov.w	lr, #4
 8006726:	f8a3 e01c 	strh.w	lr, [r3, #28]
 800672a:	841c      	strh	r4, [r3, #32]
 800672c:	845e      	strh	r6, [r3, #34]	; 0x22
 800672e:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8006732:	84da      	strh	r2, [r3, #38]	; 0x26
 8006734:	629f      	str	r7, [r3, #40]	; 0x28
 8006736:	f04f 0408 	mov.w	r4, #8
 800673a:	859c      	strh	r4, [r3, #44]	; 0x2c
 800673c:	861d      	strh	r5, [r3, #48]	; 0x30
 800673e:	865e      	strh	r6, [r3, #50]	; 0x32
 8006740:	e004      	b.n	800674c <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8006742:	bf00      	nop
 8006744:	240061e4 	.word	0x240061e4
 8006748:	24006154 	.word	0x24006154
 800674c:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8006750:	86da      	strh	r2, [r3, #54]	; 0x36
 8006752:	639f      	str	r7, [r3, #56]	; 0x38
 8006754:	f04f 0206 	mov.w	r2, #6
 8006758:	879a      	strh	r2, [r3, #60]	; 0x3c
 800675a:	4604      	mov	r4, r0
 800675c:	3340      	adds	r3, #64	; 0x40
 800675e:	2c00      	cmp	r4, #0
 8006760:	db0b      	blt.n	800677a <_Z41__static_initialization_and_destruction_0ii+0x416>
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	605a      	str	r2, [r3, #4]
 8006768:	609a      	str	r2, [r3, #8]
 800676a:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 800676c:	801a      	strh	r2, [r3, #0]
 800676e:	805a      	strh	r2, [r3, #2]
 8006770:	809a      	strh	r2, [r3, #4]
 8006772:	80da      	strh	r2, [r3, #6]
 8006774:	3310      	adds	r3, #16
 8006776:	3c01      	subs	r4, #1
 8006778:	e7f1      	b.n	800675e <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800677a:	4b11      	ldr	r3, [pc, #68]	; (80067c0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 800677c:	2205      	movs	r2, #5
 800677e:	825a      	strh	r2, [r3, #18]
 8006780:	222d      	movs	r2, #45	; 0x2d
 8006782:	829a      	strh	r2, [r3, #20]
 8006784:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8006788:	82da      	strh	r2, [r3, #22]
 800678a:	2246      	movs	r2, #70	; 0x46
 800678c:	831a      	strh	r2, [r3, #24]
 800678e:	4a0d      	ldr	r2, [pc, #52]	; (80067c4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006790:	61da      	str	r2, [r3, #28]
 8006792:	2200      	movs	r2, #0
 8006794:	841a      	strh	r2, [r3, #32]
        : color(col)
 8006796:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 800679a:	625a      	str	r2, [r3, #36]	; 0x24
 800679c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067a0:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 80067a2:	b918      	cbnz	r0, 80067ac <_Z41__static_initialization_and_destruction_0ii+0x448>
 80067a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067a8:	4299      	cmp	r1, r3
 80067aa:	d001      	beq.n	80067b0 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 80067b2:	4a04      	ldr	r2, [pc, #16]	; (80067c4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 80067b4:	61da      	str	r2, [r3, #28]
 80067b6:	e7f9      	b.n	80067ac <_Z41__static_initialization_and_destruction_0ii+0x448>
 80067b8:	4b01      	ldr	r3, [pc, #4]	; (80067c0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 80067ba:	4a02      	ldr	r2, [pc, #8]	; (80067c4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 80067bc:	61da      	str	r2, [r3, #28]
 80067be:	4770      	bx	lr
 80067c0:	240061b4 	.word	0x240061b4
 80067c4:	08024fe8 	.word	0x08024fe8

080067c8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80067c8:	b510      	push	{r4, lr}
 80067ca:	4604      	mov	r4, r0
    {
 80067cc:	4b03      	ldr	r3, [pc, #12]	; (80067dc <_ZN8touchgfx9PresenterD0Ev+0x14>)
 80067ce:	6003      	str	r3, [r0, #0]
    }
 80067d0:	2104      	movs	r1, #4
 80067d2:	f01c fd88 	bl	80232e6 <_ZdlPvj>
 80067d6:	4620      	mov	r0, r4
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	bf00      	nop
 80067dc:	08026424 	.word	0x08026424

080067e0 <_ZN13ModelListenerD0Ev>:
 80067e0:	b510      	push	{r4, lr}
 80067e2:	4604      	mov	r4, r0
 80067e4:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <_ZN13ModelListenerD0Ev+0x14>)
 80067e6:	6003      	str	r3, [r0, #0]
 80067e8:	2108      	movs	r1, #8
 80067ea:	f01c fd7c 	bl	80232e6 <_ZdlPvj>
 80067ee:	4620      	mov	r0, r4
 80067f0:	bd10      	pop	{r4, pc}
 80067f2:	bf00      	nop
 80067f4:	0802643c 	.word	0x0802643c

080067f8 <_ZN19mainScreenPresenterD0Ev>:
 80067f8:	b510      	push	{r4, lr}
 80067fa:	4604      	mov	r4, r0
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <_ZN19mainScreenPresenterD0Ev+0x24>)
 80067fe:	f103 0208 	add.w	r2, r3, #8
 8006802:	6002      	str	r2, [r0, #0]
 8006804:	3324      	adds	r3, #36	; 0x24
 8006806:	6043      	str	r3, [r0, #4]
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <_ZN19mainScreenPresenterD0Ev+0x28>)
 800680a:	6043      	str	r3, [r0, #4]
    {
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <_ZN19mainScreenPresenterD0Ev+0x2c>)
 800680e:	6003      	str	r3, [r0, #0]
 8006810:	2110      	movs	r1, #16
 8006812:	f01c fd68 	bl	80232e6 <_ZdlPvj>
 8006816:	4620      	mov	r0, r4
 8006818:	bd10      	pop	{r4, pc}
 800681a:	bf00      	nop
 800681c:	08026448 	.word	0x08026448
 8006820:	0802643c 	.word	0x0802643c
 8006824:	08026424 	.word	0x08026424

08006828 <_ZThn4_N19mainScreenPresenterD0Ev>:
 8006828:	b510      	push	{r4, lr}
 800682a:	4604      	mov	r4, r0
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 800682e:	f103 0208 	add.w	r2, r3, #8
 8006832:	f840 2c04 	str.w	r2, [r0, #-4]
 8006836:	3324      	adds	r3, #36	; 0x24
 8006838:	f844 3904 	str.w	r3, [r4], #-4
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 800683e:	6063      	str	r3, [r4, #4]
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 8006842:	f840 3c04 	str.w	r3, [r0, #-4]
 8006846:	2110      	movs	r1, #16
 8006848:	4620      	mov	r0, r4
 800684a:	f01c fd4c 	bl	80232e6 <_ZdlPvj>
 800684e:	4620      	mov	r0, r4
 8006850:	bd10      	pop	{r4, pc}
 8006852:	bf00      	nop
 8006854:	08026448 	.word	0x08026448
 8006858:	0802643c 	.word	0x0802643c
 800685c:	08026424 	.word	0x08026424

08006860 <_ZN19mainScreenPresenter20updateWiFiInformaionEP8wifiDatai>:
{
 8006860:	b508      	push	{r3, lr}
    view.updateWiFiInformaion(data, numberOfPoints);
 8006862:	b292      	uxth	r2, r2
 8006864:	68c0      	ldr	r0, [r0, #12]
 8006866:	f000 fd33 	bl	80072d0 <_ZN14mainScreenView20updateWiFiInformaionEP8wifiDatat>
}
 800686a:	bd08      	pop	{r3, pc}

0800686c <_ZThn4_N19mainScreenPresenter20updateWiFiInformaionEP8wifiDatai>:

    virtual void updateWiFiInformaion(struct  wifiData data[], int numberOfPoints);
 800686c:	f1a0 0004 	sub.w	r0, r0, #4
 8006870:	f7ff bff6 	b.w	8006860 <_ZN19mainScreenPresenter20updateWiFiInformaionEP8wifiDatai>

08006874 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 8006874:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 8006876:	4a08      	ldr	r2, [pc, #32]	; (8006898 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 8006878:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 800687a:	4a08      	ldr	r2, [pc, #32]	; (800689c <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 800687c:	6042      	str	r2, [r0, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	6082      	str	r2, [r0, #8]
    : view(v)
 8006882:	4a07      	ldr	r2, [pc, #28]	; (80068a0 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 8006884:	f102 0408 	add.w	r4, r2, #8
 8006888:	6004      	str	r4, [r0, #0]
 800688a:	3224      	adds	r2, #36	; 0x24
 800688c:	6042      	str	r2, [r0, #4]
 800688e:	60c1      	str	r1, [r0, #12]
}
 8006890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	08026424 	.word	0x08026424
 800689c:	0802643c 	.word	0x0802643c
 80068a0:	08026448 	.word	0x08026448

080068a4 <_ZN19mainScreenPresenter19getWifiAccessPointsER8wifiDatai>:
{
 80068a4:	b508      	push	{r3, lr}
    model->getWifiAccessPoints(ap, id);
 80068a6:	6880      	ldr	r0, [r0, #8]
 80068a8:	f7ff fc91 	bl	80061ce <_ZN5Model19getWifiAccessPointsER8wifiDatai>
}
 80068ac:	bd08      	pop	{r3, pc}

080068ae <_GLOBAL__sub_I__ZN19mainScreenPresenterC2ER14mainScreenView>:
 80068ae:	b508      	push	{r3, lr}
 80068b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80068b4:	2001      	movs	r0, #1
 80068b6:	f7ff fd55 	bl	8006364 <_Z41__static_initialization_and_destruction_0ii>
 80068ba:	bd08      	pop	{r3, pc}

080068bc <_GLOBAL__sub_D__ZN19mainScreenPresenterC2ER14mainScreenView>:
 80068bc:	b508      	push	{r3, lr}
 80068be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80068c2:	2000      	movs	r0, #0
 80068c4:	f7ff fd4e 	bl	8006364 <_Z41__static_initialization_and_destruction_0ii>
 80068c8:	bd08      	pop	{r3, pc}

080068ca <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 80068ca:	4770      	bx	lr

080068cc <_ZN8touchgfx8CallbackI14mainScreenViewivvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80068cc:	4a02      	ldr	r2, [pc, #8]	; (80068d8 <_ZN8touchgfx8CallbackI14mainScreenViewivvED1Ev+0xc>)
 80068ce:	6002      	str	r2, [r0, #0]
    }
 80068d0:	4a02      	ldr	r2, [pc, #8]	; (80068dc <_ZN8touchgfx8CallbackI14mainScreenViewivvED1Ev+0x10>)
 80068d2:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	080264c8 	.word	0x080264c8
 80068dc:	080264b0 	.word	0x080264b0

080068e0 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev>:
 80068e0:	4a02      	ldr	r2, [pc, #8]	; (80068ec <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev+0xc>)
 80068e2:	6002      	str	r2, [r0, #0]
    }
 80068e4:	4a02      	ldr	r2, [pc, #8]	; (80068f0 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev+0x10>)
 80068e6:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	08026498 	.word	0x08026498
 80068f0:	08026480 	.word	0x08026480

080068f4 <_Z41__static_initialization_and_destruction_0ii>:
}

void mainScreenView::updateWiFiInformaion(struct  wifiData data[], uint16_t numberOfPoints)
{
    wifiMenu.updateWifiList(data, numberOfPoints);
}
 80068f4:	2801      	cmp	r0, #1
 80068f6:	d006      	beq.n	8006906 <_Z41__static_initialization_and_destruction_0ii+0x12>
 80068f8:	b920      	cbnz	r0, 8006904 <_Z41__static_initialization_and_destruction_0ii+0x10>
 80068fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068fe:	4299      	cmp	r1, r3
 8006900:	f000 8222 	beq.w	8006d48 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8006904:	4770      	bx	lr
 8006906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800690a:	4299      	cmp	r1, r3
 800690c:	d1f4      	bne.n	80068f8 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800690e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8006912:	4bf0      	ldr	r3, [pc, #960]	; (8006cd4 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006918:	240c      	movs	r4, #12
 800691a:	805c      	strh	r4, [r3, #2]
 800691c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8006920:	f8a3 e004 	strh.w	lr, [r3, #4]
 8006924:	2224      	movs	r2, #36	; 0x24
 8006926:	80da      	strh	r2, [r3, #6]
 8006928:	811a      	strh	r2, [r3, #8]
 800692a:	f04f 0c07 	mov.w	ip, #7
 800692e:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8006932:	2502      	movs	r5, #2
 8006934:	731d      	strb	r5, [r3, #12]
 8006936:	f04f 0a36 	mov.w	sl, #54	; 0x36
 800693a:	f8a3 a00e 	strh.w	sl, [r3, #14]
 800693e:	f8a3 e010 	strh.w	lr, [r3, #16]
 8006942:	825a      	strh	r2, [r3, #18]
 8006944:	829a      	strh	r2, [r3, #20]
 8006946:	f8a3 c016 	strh.w	ip, [r3, #22]
 800694a:	2503      	movs	r5, #3
 800694c:	761d      	strb	r5, [r3, #24]
 800694e:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006952:	835e      	strh	r6, [r3, #26]
 8006954:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8006958:	83da      	strh	r2, [r3, #30]
 800695a:	841a      	strh	r2, [r3, #32]
 800695c:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8006960:	f04f 0504 	mov.w	r5, #4
 8006964:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8006968:	f04f 088a 	mov.w	r8, #138	; 0x8a
 800696c:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8006970:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8006974:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006976:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006978:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 800697c:	f04f 0505 	mov.w	r5, #5
 8006980:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8006984:	27b4      	movs	r7, #180	; 0xb4
 8006986:	865f      	strh	r7, [r3, #50]	; 0x32
 8006988:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 800698c:	86da      	strh	r2, [r3, #54]	; 0x36
 800698e:	871a      	strh	r2, [r3, #56]	; 0x38
 8006990:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8006994:	f04f 0506 	mov.w	r5, #6
 8006998:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
 800699c:	f04f 05de 	mov.w	r5, #222	; 0xde
 80069a0:	87dd      	strh	r5, [r3, #62]	; 0x3e
 80069a2:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 80069a6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80069aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80069ae:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 80069b2:	f883 c048 	strb.w	ip, [r3, #72]	; 0x48
 80069b6:	f44f 7984 	mov.w	r9, #264	; 0x108
 80069ba:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80069be:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 80069c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80069c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80069ca:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 80069ce:	f04f 0b08 	mov.w	fp, #8
 80069d2:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80069d6:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80069da:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80069de:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 80069e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80069e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069ea:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 80069ee:	f04f 0509 	mov.w	r5, #9
 80069f2:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 80069f6:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80069fa:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80069fe:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8006a02:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8006a06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8006a0a:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8006a0e:	250a      	movs	r5, #10
 8006a10:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8006a14:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8006a18:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8006a1c:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8006a20:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8006a24:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8006a28:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8006a2c:	f04f 090b 	mov.w	r9, #11
 8006a30:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8006a34:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8006a38:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8006a3c:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8006a40:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8006a44:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8006a48:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8006a4c:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8006a50:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8006a54:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8006a58:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8006a5c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8006a60:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8006a64:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8006a68:	f04f 060d 	mov.w	r6, #13
 8006a6c:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8006a70:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8006a74:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8006a78:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8006a7c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8006a80:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8006a84:	f04f 0a0e 	mov.w	sl, #14
 8006a88:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8006a8c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006a90:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8006a94:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8006a98:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8006a9c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8006aa0:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8006aa4:	f04f 0a0f 	mov.w	sl, #15
 8006aa8:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8006aac:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8006ab0:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8006ab4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8006ab8:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8006abc:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8006ac0:	f04f 0a10 	mov.w	sl, #16
 8006ac4:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8006ac8:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8006acc:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8006ad0:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8006ad4:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8006ad8:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8006adc:	f04f 0a11 	mov.w	sl, #17
 8006ae0:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8006ae4:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8006ae8:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8006aec:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8006af0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8006af4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8006af8:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8006afc:	f04f 0a12 	mov.w	sl, #18
 8006b00:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8006b04:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8006b08:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8006b0c:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8006b10:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8006b14:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8006b18:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8006b1c:	f04f 0a13 	mov.w	sl, #19
 8006b20:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8006b24:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8006b28:	4656      	mov	r6, sl
 8006b2a:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8006b2e:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8006b32:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8006b36:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8006b3a:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8006b3e:	f04f 0a14 	mov.w	sl, #20
 8006b42:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8006b46:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8006b4a:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8006b4e:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8006b52:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8006b56:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8006b5a:	f04f 0a15 	mov.w	sl, #21
 8006b5e:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8006b62:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8006b66:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8006b6a:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8006b6e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8006b72:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8006b76:	f04f 0a16 	mov.w	sl, #22
 8006b7a:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8006b7e:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8006b82:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8006b86:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8006b8a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8006b8e:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8006b92:	f04f 0e17 	mov.w	lr, #23
 8006b96:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8006b9a:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8006b9e:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8006ba2:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8006ba6:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8006baa:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8006bae:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8006bb2:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8006bb6:	f04f 0918 	mov.w	r9, #24
 8006bba:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8006bbe:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8006bc2:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8006bc6:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8006bca:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8006bce:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8006bd2:	f04f 0819 	mov.w	r8, #25
 8006bd6:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8006bda:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8006bde:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8006be2:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8006be6:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8006bea:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8006bee:	271a      	movs	r7, #26
 8006bf0:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8006bf4:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8006bf8:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8006bfc:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8006c00:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8006c04:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8006c08:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8006c0c:	271b      	movs	r7, #27
 8006c0e:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8006c12:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8006c16:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8006c1a:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8006c1e:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8006c22:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8006c26:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8006c2a:	271c      	movs	r7, #28
 8006c2c:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8006c30:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8006c34:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8006c38:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8006c3c:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8006c40:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8006c44:	271d      	movs	r7, #29
 8006c46:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8006c4a:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8006c4e:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8006c52:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8006c56:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8006c5a:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8006c5e:	271e      	movs	r7, #30
 8006c60:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8006c64:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006c68:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8006c6c:	26e2      	movs	r6, #226	; 0xe2
 8006c6e:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8006c72:	f44f 7790 	mov.w	r7, #288	; 0x120
 8006c76:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8006c7a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8006c7e:	f04f 0709 	mov.w	r7, #9
 8006c82:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8006c88:	801c      	strh	r4, [r3, #0]
 8006c8a:	f8a3 e002 	strh.w	lr, [r3, #2]
 8006c8e:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8006c92:	f8a3 c004 	strh.w	ip, [r3, #4]
 8006c96:	80da      	strh	r2, [r3, #6]
};
 8006c98:	2700      	movs	r7, #0
 8006c9a:	609f      	str	r7, [r3, #8]
 8006c9c:	f04f 0805 	mov.w	r8, #5
 8006ca0:	f8a3 800c 	strh.w	r8, [r3, #12]
 8006ca4:	821d      	strh	r5, [r3, #16]
 8006ca6:	f8a3 e012 	strh.w	lr, [r3, #18]
 8006caa:	f8a3 c014 	strh.w	ip, [r3, #20]
 8006cae:	82da      	strh	r2, [r3, #22]
 8006cb0:	619f      	str	r7, [r3, #24]
 8006cb2:	f04f 0e04 	mov.w	lr, #4
 8006cb6:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8006cba:	841c      	strh	r4, [r3, #32]
 8006cbc:	845e      	strh	r6, [r3, #34]	; 0x22
 8006cbe:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8006cc2:	84da      	strh	r2, [r3, #38]	; 0x26
 8006cc4:	629f      	str	r7, [r3, #40]	; 0x28
 8006cc6:	f04f 0408 	mov.w	r4, #8
 8006cca:	859c      	strh	r4, [r3, #44]	; 0x2c
 8006ccc:	861d      	strh	r5, [r3, #48]	; 0x30
 8006cce:	865e      	strh	r6, [r3, #50]	; 0x32
 8006cd0:	e004      	b.n	8006cdc <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8006cd2:	bf00      	nop
 8006cd4:	240063dc 	.word	0x240063dc
 8006cd8:	2400634c 	.word	0x2400634c
 8006cdc:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8006ce0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ce2:	639f      	str	r7, [r3, #56]	; 0x38
 8006ce4:	f04f 0206 	mov.w	r2, #6
 8006ce8:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006cea:	4604      	mov	r4, r0
 8006cec:	3340      	adds	r3, #64	; 0x40
 8006cee:	2c00      	cmp	r4, #0
 8006cf0:	db0b      	blt.n	8006d0a <_Z41__static_initialization_and_destruction_0ii+0x416>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	605a      	str	r2, [r3, #4]
 8006cf8:	609a      	str	r2, [r3, #8]
 8006cfa:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8006cfc:	801a      	strh	r2, [r3, #0]
 8006cfe:	805a      	strh	r2, [r3, #2]
 8006d00:	809a      	strh	r2, [r3, #4]
 8006d02:	80da      	strh	r2, [r3, #6]
 8006d04:	3310      	adds	r3, #16
 8006d06:	3c01      	subs	r4, #1
 8006d08:	e7f1      	b.n	8006cee <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006d0a:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8006d0c:	2205      	movs	r2, #5
 8006d0e:	825a      	strh	r2, [r3, #18]
 8006d10:	222d      	movs	r2, #45	; 0x2d
 8006d12:	829a      	strh	r2, [r3, #20]
 8006d14:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8006d18:	82da      	strh	r2, [r3, #22]
 8006d1a:	2246      	movs	r2, #70	; 0x46
 8006d1c:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8006d1e:	4a0d      	ldr	r2, [pc, #52]	; (8006d54 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006d20:	61da      	str	r2, [r3, #28]
 8006d22:	2200      	movs	r2, #0
 8006d24:	841a      	strh	r2, [r3, #32]
        : color(col)
 8006d26:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8006d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d30:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8006d32:	b918      	cbnz	r0, 8006d3c <_Z41__static_initialization_and_destruction_0ii+0x448>
 8006d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	d001      	beq.n	8006d40 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8006d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8006d40:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8006d42:	4a04      	ldr	r2, [pc, #16]	; (8006d54 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006d44:	61da      	str	r2, [r3, #28]
 8006d46:	e7f9      	b.n	8006d3c <_Z41__static_initialization_and_destruction_0ii+0x448>
 8006d48:	4b01      	ldr	r3, [pc, #4]	; (8006d50 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8006d4a:	4a02      	ldr	r2, [pc, #8]	; (8006d54 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006d4c:	61da      	str	r2, [r3, #28]
 8006d4e:	4770      	bx	lr
 8006d50:	240063ac 	.word	0x240063ac
 8006d54:	08024fe8 	.word	0x08024fe8

08006d58 <_ZN8touchgfx8CallbackI14mainScreenViewivvE7executeEi>:
    virtual void execute(T1 t1)
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006d5c:	6844      	ldr	r4, [r0, #4]
 8006d5e:	68c2      	ldr	r2, [r0, #12]
 8006d60:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006d64:	f012 0f01 	tst.w	r2, #1
 8006d68:	d102      	bne.n	8006d70 <_ZN8touchgfx8CallbackI14mainScreenViewivvE7executeEi+0x18>
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	4798      	blx	r3
    }
 8006d6e:	bd10      	pop	{r4, pc}
 8006d70:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8006d74:	f854 200c 	ldr.w	r2, [r4, ip]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	58d3      	ldr	r3, [r2, r3]
 8006d7c:	e7f6      	b.n	8006d6c <_ZN8touchgfx8CallbackI14mainScreenViewivvE7executeEi+0x14>

08006d7e <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006d7e:	6843      	ldr	r3, [r0, #4]
 8006d80:	b14b      	cbz	r3, 8006d96 <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv+0x18>
 8006d82:	6883      	ldr	r3, [r0, #8]
 8006d84:	b10b      	cbz	r3, 8006d8a <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv+0xc>
 8006d86:	2001      	movs	r0, #1
 8006d88:	4770      	bx	lr
 8006d8a:	68c3      	ldr	r3, [r0, #12]
 8006d8c:	f013 0f01 	tst.w	r3, #1
 8006d90:	d003      	beq.n	8006d9a <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv+0x1c>
 8006d92:	2001      	movs	r0, #1
 8006d94:	4770      	bx	lr
 8006d96:	2000      	movs	r0, #0
 8006d98:	4770      	bx	lr
 8006d9a:	2000      	movs	r0, #0
    }
 8006d9c:	4770      	bx	lr

08006d9e <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt>:
    virtual void execute(T1 t1)
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006da2:	6844      	ldr	r4, [r0, #4]
 8006da4:	68c2      	ldr	r2, [r0, #12]
 8006da6:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006daa:	f012 0f01 	tst.w	r2, #1
 8006dae:	d102      	bne.n	8006db6 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt+0x18>
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	4798      	blx	r3
    }
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8006dba:	f854 200c 	ldr.w	r2, [r4, ip]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	58d3      	ldr	r3, [r2, r3]
 8006dc2:	e7f6      	b.n	8006db2 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt+0x14>

08006dc4 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006dc4:	6843      	ldr	r3, [r0, #4]
 8006dc6:	b14b      	cbz	r3, 8006ddc <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0x18>
 8006dc8:	6883      	ldr	r3, [r0, #8]
 8006dca:	b10b      	cbz	r3, 8006dd0 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0xc>
 8006dcc:	2001      	movs	r0, #1
 8006dce:	4770      	bx	lr
 8006dd0:	68c3      	ldr	r3, [r0, #12]
 8006dd2:	f013 0f01 	tst.w	r3, #1
 8006dd6:	d003      	beq.n	8006de0 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0x1c>
 8006dd8:	2001      	movs	r0, #1
 8006dda:	4770      	bx	lr
 8006ddc:	2000      	movs	r0, #0
 8006dde:	4770      	bx	lr
 8006de0:	2000      	movs	r0, #0
    }
 8006de2:	4770      	bx	lr

08006de4 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006de4:	b510      	push	{r4, lr}
 8006de6:	4604      	mov	r4, r0
 8006de8:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev+0x18>)
 8006dea:	6003      	str	r3, [r0, #0]
    }
 8006dec:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev+0x1c>)
 8006dee:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006df0:	2110      	movs	r1, #16
 8006df2:	f01c fa78 	bl	80232e6 <_ZdlPvj>
 8006df6:	4620      	mov	r0, r4
 8006df8:	bd10      	pop	{r4, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08026498 	.word	0x08026498
 8006e00:	08026480 	.word	0x08026480

08006e04 <_ZN8touchgfx8CallbackI14mainScreenViewivvED0Ev>:
 8006e04:	b510      	push	{r4, lr}
 8006e06:	4604      	mov	r4, r0
 8006e08:	4b04      	ldr	r3, [pc, #16]	; (8006e1c <_ZN8touchgfx8CallbackI14mainScreenViewivvED0Ev+0x18>)
 8006e0a:	6003      	str	r3, [r0, #0]
    }
 8006e0c:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <_ZN8touchgfx8CallbackI14mainScreenViewivvED0Ev+0x1c>)
 8006e0e:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e10:	2110      	movs	r1, #16
 8006e12:	f01c fa68 	bl	80232e6 <_ZdlPvj>
 8006e16:	4620      	mov	r0, r4
 8006e18:	bd10      	pop	{r4, pc}
 8006e1a:	bf00      	nop
 8006e1c:	080264c8 	.word	0x080264c8
 8006e20:	080264b0 	.word	0x080264b0

08006e24 <_ZN14mainScreenView11setupScreenEv>:
{
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	4604      	mov	r4, r0
    mainScreenViewBase::setupScreen();
 8006e28:	f7fd fc7a 	bl	8004720 <_ZN18mainScreenViewBase11setupScreenEv>
    wifiMenu.setAction(wifiAccessPointSelectedCallback);
 8006e2c:	f104 0598 	add.w	r5, r4, #152	; 0x98
 8006e30:	f642 61b4 	movw	r1, #11956	; 0x2eb4
 8006e34:	4421      	add	r1, r4
 8006e36:	4628      	mov	r0, r5
 8006e38:	f000 fb84 	bl	8007544 <_ZN17wifiMenuContainer9setActionERN8touchgfx15GenericCallbackIivvEE>
     *
     * @param [in] d The Drawable to remove.
     */
    void remove(Drawable& d)
    {
        container.remove(d);
 8006e3c:	1d27      	adds	r7, r4, #4
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4638      	mov	r0, r7
 8006e42:	f00c f976 	bl	8013132 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
        container.add(d);
 8006e46:	4629      	mov	r1, r5
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f00c f927 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        visible = vis;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
    wifiKeyboard.setPosition(0, 0, 480, 272);
 8006e54:	f642 4670 	movw	r6, #11376	; 0x2c70
 8006e58:	19a5      	adds	r5, r4, r6
        setX(x);
 8006e5a:	59a3      	ldr	r3, [r4, r6]
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4628      	mov	r0, r5
 8006e62:	4798      	blx	r3
        setY(y);
 8006e64:	59a3      	ldr	r3, [r4, r6]
 8006e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	4798      	blx	r3
        setWidth(width);
 8006e6e:	59a3      	ldr	r3, [r4, r6]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006e76:	4628      	mov	r0, r5
 8006e78:	4798      	blx	r3
        setHeight(height);
 8006e7a:	59a3      	ldr	r3, [r4, r6]
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006e82:	4628      	mov	r0, r5
 8006e84:	4798      	blx	r3
    wifiKeyboard.setKeyboardDoneReturnPressedAction(keyboardDonePressedCallback);
 8006e86:	f642 61a4 	movw	r1, #11940	; 0x2ea4
 8006e8a:	4421      	add	r1, r4
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f7ff f963 	bl	8006158 <_ZN14CustomKeyboard34setKeyboardDoneReturnPressedActionERN8touchgfx15GenericCallbackIA_tvvEE>
        visible = vis;
 8006e92:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8006e96:	2300      	movs	r3, #0
 8006e98:	f884 3c95 	strb.w	r3, [r4, #3221]	; 0xc95
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	f00c f8fc 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ea6 <_ZN14mainScreenView19keyboardDonePressedEPt>:
{
 8006ea6:	b538      	push	{r3, r4, r5, lr}
 8006ea8:	4604      	mov	r4, r0
    wifiKeyboard.clearBuffer();
 8006eaa:	f642 4570 	movw	r5, #11376	; 0x2c70
 8006eae:	4405      	add	r5, r0
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	f7ff f954 	bl	800615e <_ZN14CustomKeyboard11clearBufferEv>
 8006eb6:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f884 3c95 	strb.w	r3, [r4, #3221]	; 0xc95
    wifiKeyboard.invalidate();
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f012 f863 	bl	8018f8c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}

08006ec8 <_ZN14mainScreenView23wifiAccessPointSelectedEi>:
{
 8006ec8:	b530      	push	{r4, r5, lr}
 8006eca:	b0a3      	sub	sp, #140	; 0x8c
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
    presenter->getWifiAccessPoints(selectedAP, id);
 8006ed0:	460a      	mov	r2, r1
 8006ed2:	4669      	mov	r1, sp
 8006ed4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8006ed6:	f7ff fce5 	bl	80068a4 <_ZN19mainScreenPresenter19getWifiAccessPointsER8wifiDatai>
    selectedWiFiID = id;
 8006eda:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8006ede:	f8c3 5ec4 	str.w	r5, [r3, #3780]	; 0xec4
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
    wifiMenu.invalidate();
 8006ee8:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8006eec:	f012 f84e 	bl	8018f8c <_ZNK8touchgfx8Drawable10invalidateEv>
    if (selectedAP.encrypted)
 8006ef0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8006ef4:	b15b      	cbz	r3, 8006f0e <_ZN14mainScreenView23wifiAccessPointSelectedEi+0x46>
 8006ef6:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2c95 	strb.w	r2, [r3, #3221]	; 0xc95
        wifiKeyboard.invalidate();
 8006f00:	f642 4070 	movw	r0, #11376	; 0x2c70
 8006f04:	4420      	add	r0, r4
 8006f06:	f012 f841 	bl	8018f8c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8006f0a:	b023      	add	sp, #140	; 0x8c
 8006f0c:	bd30      	pop	{r4, r5, pc}
        keyboardDonePressed(0);
 8006f0e:	2100      	movs	r1, #0
 8006f10:	4620      	mov	r0, r4
 8006f12:	f7ff ffc8 	bl	8006ea6 <_ZN14mainScreenView19keyboardDonePressedEPt>
}
 8006f16:	e7f8      	b.n	8006f0a <_ZN14mainScreenView23wifiAccessPointSelectedEi+0x42>

08006f18 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8006f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	4b46      	ldr	r3, [pc, #280]	; (8007038 <_ZN14mainScreenViewD1Ev+0x120>)
 8006f1e:	6003      	str	r3, [r0, #0]
 8006f20:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8006f24:	4a45      	ldr	r2, [pc, #276]	; (800703c <_ZN14mainScreenViewD1Ev+0x124>)
 8006f26:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
    }
 8006f2a:	4a45      	ldr	r2, [pc, #276]	; (8007040 <_ZN14mainScreenViewD1Ev+0x128>)
 8006f2c:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006f30:	4a44      	ldr	r2, [pc, #272]	; (8007044 <_ZN14mainScreenViewD1Ev+0x12c>)
 8006f32:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
    }
 8006f36:	4a44      	ldr	r2, [pc, #272]	; (8007048 <_ZN14mainScreenViewD1Ev+0x130>)
 8006f38:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
 8006f3c:	f642 4170 	movw	r1, #11376	; 0x2c70
 8006f40:	1843      	adds	r3, r0, r1
 8006f42:	4a42      	ldr	r2, [pc, #264]	; (800704c <_ZN14mainScreenViewD1Ev+0x134>)
 8006f44:	5042      	str	r2, [r0, r1]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006f46:	4a42      	ldr	r2, [pc, #264]	; (8007050 <_ZN14mainScreenViewD1Ev+0x138>)
 8006f48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }
 8006f4c:	4a41      	ldr	r2, [pc, #260]	; (8007054 <_ZN14mainScreenViewD1Ev+0x13c>)
 8006f4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006f52:	4841      	ldr	r0, [pc, #260]	; (8007058 <_ZN14mainScreenViewD1Ev+0x140>)
 8006f54:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
    {
 8006f58:	4a40      	ldr	r2, [pc, #256]	; (800705c <_ZN14mainScreenViewD1Ev+0x144>)
 8006f5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006f5e:	f8c3 01fc 	str.w	r0, [r3, #508]	; 0x1fc
    {
 8006f62:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006f66:	f8c3 01ec 	str.w	r0, [r3, #492]	; 0x1ec
    {
 8006f6a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006f6e:	f8c3 01dc 	str.w	r0, [r3, #476]	; 0x1dc
    {
 8006f72:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
class TextArea : public Widget
 8006f76:	4f3a      	ldr	r7, [pc, #232]	; (8007060 <_ZN14mainScreenViewD1Ev+0x148>)
 8006f78:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 8006f7c:	4e39      	ldr	r6, [pc, #228]	; (8007064 <_ZN14mainScreenViewD1Ev+0x14c>)
 8006f7e:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
 8006f82:	4839      	ldr	r0, [pc, #228]	; (8007068 <_ZN14mainScreenViewD1Ev+0x150>)
 8006f84:	f8c3 0194 	str.w	r0, [r3, #404]	; 0x194
    {
 8006f88:	4a38      	ldr	r2, [pc, #224]	; (800706c <_ZN14mainScreenViewD1Ev+0x154>)
 8006f8a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
class Keyboard : public Container
 8006f8e:	4c38      	ldr	r4, [pc, #224]	; (8007070 <_ZN14mainScreenViewD1Ev+0x158>)
 8006f90:	62dc      	str	r4, [r3, #44]	; 0x2c
 8006f92:	4c38      	ldr	r4, [pc, #224]	; (8007074 <_ZN14mainScreenViewD1Ev+0x15c>)
 8006f94:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8006f98:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
 8006f9c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8006fa0:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8007098 <_ZN14mainScreenViewD1Ev+0x180>
 8006fa4:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8006fa8:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 800709c <_ZN14mainScreenViewD1Ev+0x184>
 8006fac:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8006fb0:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
 8006fb4:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
 8006fb8:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
 8006fbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006fc0:	665c      	str	r4, [r3, #100]	; 0x64
 8006fc2:	6658      	str	r0, [r3, #100]	; 0x64
 8006fc4:	665a      	str	r2, [r3, #100]	; 0x64
class Container : public Drawable
 8006fc6:	482c      	ldr	r0, [pc, #176]	; (8007078 <_ZN14mainScreenViewD1Ev+0x160>)
 8006fc8:	62d8      	str	r0, [r3, #44]	; 0x2c
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c
 8006fcc:	5068      	str	r0, [r5, r1]
 8006fce:	506a      	str	r2, [r5, r1]
 8006fd0:	462f      	mov	r7, r5
 8006fd2:	4b2a      	ldr	r3, [pc, #168]	; (800707c <_ZN14mainScreenViewD1Ev+0x164>)
 8006fd4:	f847 3b98 	str.w	r3, [r7], #152
 8006fd8:	4b29      	ldr	r3, [pc, #164]	; (8007080 <_ZN14mainScreenViewD1Ev+0x168>)
 8006fda:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8006fde:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 8006fe2:	443c      	add	r4, r7
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006fe4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8006fe8:	4a26      	ldr	r2, [pc, #152]	; (8007084 <_ZN14mainScreenViewD1Ev+0x16c>)
 8006fea:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 8006fee:	4a26      	ldr	r2, [pc, #152]	; (8007088 <_ZN14mainScreenViewD1Ev+0x170>)
 8006ff0:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 8006ff4:	f515 76f0 	adds.w	r6, r5, #480	; 0x1e0
 8006ff8:	d008      	beq.n	800700c <_ZN14mainScreenViewD1Ev+0xf4>
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	d006      	beq.n	800700c <_ZN14mainScreenViewD1Ev+0xf4>
 8006ffe:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4620      	mov	r0, r4
 8007008:	4798      	blx	r3
 800700a:	e7f6      	b.n	8006ffa <_ZN14mainScreenViewD1Ev+0xe2>
 800700c:	4638      	mov	r0, r7
 800700e:	f7fe fa11 	bl	8005434 <_ZN21wifiMenuContainerBaseD1Ev>
 8007012:	4b18      	ldr	r3, [pc, #96]	; (8007074 <_ZN14mainScreenViewD1Ev+0x15c>)
 8007014:	66eb      	str	r3, [r5, #108]	; 0x6c
 8007016:	4a14      	ldr	r2, [pc, #80]	; (8007068 <_ZN14mainScreenViewD1Ev+0x150>)
 8007018:	66ea      	str	r2, [r5, #108]	; 0x6c
 800701a:	4b14      	ldr	r3, [pc, #80]	; (800706c <_ZN14mainScreenViewD1Ev+0x154>)
 800701c:	66eb      	str	r3, [r5, #108]	; 0x6c
 800701e:	491b      	ldr	r1, [pc, #108]	; (800708c <_ZN14mainScreenViewD1Ev+0x174>)
 8007020:	6429      	str	r1, [r5, #64]	; 0x40
 8007022:	642a      	str	r2, [r5, #64]	; 0x40
 8007024:	642b      	str	r3, [r5, #64]	; 0x40
class View : public Screen
 8007026:	4a1a      	ldr	r2, [pc, #104]	; (8007090 <_ZN14mainScreenViewD1Ev+0x178>)
 8007028:	602a      	str	r2, [r5, #0]
    {
 800702a:	4a1a      	ldr	r2, [pc, #104]	; (8007094 <_ZN14mainScreenViewD1Ev+0x17c>)
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	4a12      	ldr	r2, [pc, #72]	; (8007078 <_ZN14mainScreenViewD1Ev+0x160>)
 8007030:	606a      	str	r2, [r5, #4]
 8007032:	606b      	str	r3, [r5, #4]
 8007034:	4628      	mov	r0, r5
 8007036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007038:	080264e0 	.word	0x080264e0
 800703c:	080264c8 	.word	0x080264c8
 8007040:	080264b0 	.word	0x080264b0
 8007044:	08026498 	.word	0x08026498
 8007048:	08026480 	.word	0x08026480
 800704c:	08026194 	.word	0x08026194
 8007050:	0802617c 	.word	0x0802617c
 8007054:	0802614c 	.word	0x0802614c
 8007058:	08026164 	.word	0x08026164
 800705c:	08025044 	.word	0x08025044
 8007060:	08026d90 	.word	0x08026d90
 8007064:	08024fe8 	.word	0x08024fe8
 8007068:	08025b48 	.word	0x08025b48
 800706c:	08027120 	.word	0x08027120
 8007070:	08026fec 	.word	0x08026fec
 8007074:	08026f80 	.word	0x08026f80
 8007078:	08026a1c 	.word	0x08026a1c
 800707c:	08025c14 	.word	0x08025c14
 8007080:	080265ac 	.word	0x080265ac
 8007084:	08025bc8 	.word	0x08025bc8
 8007088:	08025bb0 	.word	0x08025bb0
 800708c:	08026e20 	.word	0x08026e20
 8007090:	08025be0 	.word	0x08025be0
 8007094:	080271f4 	.word	0x080271f4
 8007098:	08025d50 	.word	0x08025d50
 800709c:	08026e88 	.word	0x08026e88

080070a0 <_ZN14mainScreenViewD0Ev>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	4605      	mov	r5, r0
 80070a4:	4b49      	ldr	r3, [pc, #292]	; (80071cc <_ZN14mainScreenViewD0Ev+0x12c>)
 80070a6:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80070a8:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80070ac:	4a48      	ldr	r2, [pc, #288]	; (80071d0 <_ZN14mainScreenViewD0Ev+0x130>)
 80070ae:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
    }
 80070b2:	4a48      	ldr	r2, [pc, #288]	; (80071d4 <_ZN14mainScreenViewD0Ev+0x134>)
 80070b4:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80070b8:	4a47      	ldr	r2, [pc, #284]	; (80071d8 <_ZN14mainScreenViewD0Ev+0x138>)
 80070ba:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
    }
 80070be:	4a47      	ldr	r2, [pc, #284]	; (80071dc <_ZN14mainScreenViewD0Ev+0x13c>)
 80070c0:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
 80070c4:	f642 4170 	movw	r1, #11376	; 0x2c70
 80070c8:	1843      	adds	r3, r0, r1
 80070ca:	4a45      	ldr	r2, [pc, #276]	; (80071e0 <_ZN14mainScreenViewD0Ev+0x140>)
 80070cc:	5042      	str	r2, [r0, r1]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80070ce:	4a45      	ldr	r2, [pc, #276]	; (80071e4 <_ZN14mainScreenViewD0Ev+0x144>)
 80070d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }
 80070d4:	4a44      	ldr	r2, [pc, #272]	; (80071e8 <_ZN14mainScreenViewD0Ev+0x148>)
 80070d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80070da:	4844      	ldr	r0, [pc, #272]	; (80071ec <_ZN14mainScreenViewD0Ev+0x14c>)
 80070dc:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
    {
 80070e0:	4a43      	ldr	r2, [pc, #268]	; (80071f0 <_ZN14mainScreenViewD0Ev+0x150>)
 80070e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80070e6:	f8c3 01fc 	str.w	r0, [r3, #508]	; 0x1fc
    {
 80070ea:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80070ee:	f8c3 01ec 	str.w	r0, [r3, #492]	; 0x1ec
    {
 80070f2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80070f6:	f8c3 01dc 	str.w	r0, [r3, #476]	; 0x1dc
    {
 80070fa:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 80070fe:	4f3d      	ldr	r7, [pc, #244]	; (80071f4 <_ZN14mainScreenViewD0Ev+0x154>)
 8007100:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 8007104:	4e3c      	ldr	r6, [pc, #240]	; (80071f8 <_ZN14mainScreenViewD0Ev+0x158>)
 8007106:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
 800710a:	483c      	ldr	r0, [pc, #240]	; (80071fc <_ZN14mainScreenViewD0Ev+0x15c>)
 800710c:	f8c3 0194 	str.w	r0, [r3, #404]	; 0x194
 8007110:	4a3b      	ldr	r2, [pc, #236]	; (8007200 <_ZN14mainScreenViewD0Ev+0x160>)
 8007112:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8007116:	4c3b      	ldr	r4, [pc, #236]	; (8007204 <_ZN14mainScreenViewD0Ev+0x164>)
 8007118:	62dc      	str	r4, [r3, #44]	; 0x2c
 800711a:	4c3b      	ldr	r4, [pc, #236]	; (8007208 <_ZN14mainScreenViewD0Ev+0x168>)
 800711c:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8007120:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
 8007124:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8007128:	f8df c100 	ldr.w	ip, [pc, #256]	; 800722c <_ZN14mainScreenViewD0Ev+0x18c>
 800712c:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8007130:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8007230 <_ZN14mainScreenViewD0Ev+0x190>
 8007134:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8007138:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
 800713c:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
 8007140:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
 8007144:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007148:	665c      	str	r4, [r3, #100]	; 0x64
 800714a:	6658      	str	r0, [r3, #100]	; 0x64
 800714c:	665a      	str	r2, [r3, #100]	; 0x64
 800714e:	482f      	ldr	r0, [pc, #188]	; (800720c <_ZN14mainScreenViewD0Ev+0x16c>)
 8007150:	62d8      	str	r0, [r3, #44]	; 0x2c
 8007152:	62da      	str	r2, [r3, #44]	; 0x2c
 8007154:	5068      	str	r0, [r5, r1]
 8007156:	506a      	str	r2, [r5, r1]
 8007158:	462f      	mov	r7, r5
 800715a:	4b2d      	ldr	r3, [pc, #180]	; (8007210 <_ZN14mainScreenViewD0Ev+0x170>)
 800715c:	f847 3b98 	str.w	r3, [r7], #152
 8007160:	4b2c      	ldr	r3, [pc, #176]	; (8007214 <_ZN14mainScreenViewD0Ev+0x174>)
 8007162:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8007166:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 800716a:	443c      	add	r4, r7
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800716c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8007170:	4a29      	ldr	r2, [pc, #164]	; (8007218 <_ZN14mainScreenViewD0Ev+0x178>)
 8007172:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 8007176:	4a29      	ldr	r2, [pc, #164]	; (800721c <_ZN14mainScreenViewD0Ev+0x17c>)
 8007178:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 800717c:	f515 76f0 	adds.w	r6, r5, #480	; 0x1e0
 8007180:	d008      	beq.n	8007194 <_ZN14mainScreenViewD0Ev+0xf4>
 8007182:	42a6      	cmp	r6, r4
 8007184:	d006      	beq.n	8007194 <_ZN14mainScreenViewD0Ev+0xf4>
 8007186:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4620      	mov	r0, r4
 8007190:	4798      	blx	r3
 8007192:	e7f6      	b.n	8007182 <_ZN14mainScreenViewD0Ev+0xe2>
 8007194:	4638      	mov	r0, r7
 8007196:	f7fe f94d 	bl	8005434 <_ZN21wifiMenuContainerBaseD1Ev>
 800719a:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <_ZN14mainScreenViewD0Ev+0x168>)
 800719c:	66eb      	str	r3, [r5, #108]	; 0x6c
 800719e:	4a17      	ldr	r2, [pc, #92]	; (80071fc <_ZN14mainScreenViewD0Ev+0x15c>)
 80071a0:	66ea      	str	r2, [r5, #108]	; 0x6c
 80071a2:	4b17      	ldr	r3, [pc, #92]	; (8007200 <_ZN14mainScreenViewD0Ev+0x160>)
 80071a4:	66eb      	str	r3, [r5, #108]	; 0x6c
 80071a6:	491e      	ldr	r1, [pc, #120]	; (8007220 <_ZN14mainScreenViewD0Ev+0x180>)
 80071a8:	6429      	str	r1, [r5, #64]	; 0x40
 80071aa:	642a      	str	r2, [r5, #64]	; 0x40
 80071ac:	642b      	str	r3, [r5, #64]	; 0x40
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <_ZN14mainScreenViewD0Ev+0x184>)
 80071b0:	602a      	str	r2, [r5, #0]
 80071b2:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <_ZN14mainScreenViewD0Ev+0x188>)
 80071b4:	602a      	str	r2, [r5, #0]
 80071b6:	4a15      	ldr	r2, [pc, #84]	; (800720c <_ZN14mainScreenViewD0Ev+0x16c>)
 80071b8:	606a      	str	r2, [r5, #4]
 80071ba:	606b      	str	r3, [r5, #4]
 80071bc:	f642 61c8 	movw	r1, #11976	; 0x2ec8
 80071c0:	4628      	mov	r0, r5
 80071c2:	f01c f890 	bl	80232e6 <_ZdlPvj>
 80071c6:	4628      	mov	r0, r5
 80071c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ca:	bf00      	nop
 80071cc:	080264e0 	.word	0x080264e0
 80071d0:	080264c8 	.word	0x080264c8
 80071d4:	080264b0 	.word	0x080264b0
 80071d8:	08026498 	.word	0x08026498
 80071dc:	08026480 	.word	0x08026480
 80071e0:	08026194 	.word	0x08026194
 80071e4:	0802617c 	.word	0x0802617c
 80071e8:	0802614c 	.word	0x0802614c
 80071ec:	08026164 	.word	0x08026164
 80071f0:	08025044 	.word	0x08025044
 80071f4:	08026d90 	.word	0x08026d90
 80071f8:	08024fe8 	.word	0x08024fe8
 80071fc:	08025b48 	.word	0x08025b48
 8007200:	08027120 	.word	0x08027120
 8007204:	08026fec 	.word	0x08026fec
 8007208:	08026f80 	.word	0x08026f80
 800720c:	08026a1c 	.word	0x08026a1c
 8007210:	08025c14 	.word	0x08025c14
 8007214:	080265ac 	.word	0x080265ac
 8007218:	08025bc8 	.word	0x08025bc8
 800721c:	08025bb0 	.word	0x08025bb0
 8007220:	08026e20 	.word	0x08026e20
 8007224:	08025be0 	.word	0x08025be0
 8007228:	080271f4 	.word	0x080271f4
 800722c:	08025d50 	.word	0x08025d50
 8007230:	08026e88 	.word	0x08026e88

08007234 <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView() :
 8007234:	b530      	push	{r4, r5, lr}
 8007236:	b087      	sub	sp, #28
 8007238:	4604      	mov	r4, r0
    wifiAccessPointSelectedCallback(this, &mainScreenView::wifiAccessPointSelected)
 800723a:	f7fd fb15 	bl	8004868 <_ZN18mainScreenViewBaseC1Ev>
 800723e:	4b1d      	ldr	r3, [pc, #116]	; (80072b4 <_ZN14mainScreenViewC1Ev+0x80>)
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	f642 4070 	movw	r0, #11376	; 0x2c70
 8007246:	4420      	add	r0, r4
 8007248:	f7fe fe34 	bl	8005eb4 <_ZN14CustomKeyboardC1Ev>
 800724c:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <_ZN14mainScreenViewC1Ev+0x84>)
 800724e:	9302      	str	r3, [sp, #8]
 8007250:	2500      	movs	r5, #0
 8007252:	9503      	str	r5, [sp, #12]
 8007254:	466a      	mov	r2, sp
 8007256:	ab02      	add	r3, sp, #8
 8007258:	e893 0003 	ldmia.w	r3, {r0, r1}
 800725c:	e882 0003 	stmia.w	r2, {r0, r1}
class GenericCallback<T1, void, void>
 8007260:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8007264:	4915      	ldr	r1, [pc, #84]	; (80072bc <_ZN14mainScreenViewC1Ev+0x88>)
 8007266:	f8c3 1ea4 	str.w	r1, [r3, #3748]	; 0xea4
        : pobject(pObject), pmemfun(pmemfun_1)
 800726a:	4915      	ldr	r1, [pc, #84]	; (80072c0 <_ZN14mainScreenViewC1Ev+0x8c>)
 800726c:	f8c3 1ea4 	str.w	r1, [r3, #3748]	; 0xea4
 8007270:	f8c3 4ea8 	str.w	r4, [r3, #3752]	; 0xea8
 8007274:	f603 6cac 	addw	ip, r3, #3756	; 0xeac
 8007278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800727c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007280:	4910      	ldr	r1, [pc, #64]	; (80072c4 <_ZN14mainScreenViewC1Ev+0x90>)
 8007282:	9104      	str	r1, [sp, #16]
 8007284:	9505      	str	r5, [sp, #20]
 8007286:	a906      	add	r1, sp, #24
 8007288:	e911 0003 	ldmdb	r1, {r0, r1}
 800728c:	e882 0003 	stmia.w	r2, {r0, r1}
class GenericCallback<T1, void, void>
 8007290:	490d      	ldr	r1, [pc, #52]	; (80072c8 <_ZN14mainScreenViewC1Ev+0x94>)
 8007292:	f8c3 1eb4 	str.w	r1, [r3, #3764]	; 0xeb4
        : pobject(pObject), pmemfun(pmemfun_1)
 8007296:	490d      	ldr	r1, [pc, #52]	; (80072cc <_ZN14mainScreenViewC1Ev+0x98>)
 8007298:	f8c3 1eb4 	str.w	r1, [r3, #3764]	; 0xeb4
 800729c:	f8c3 4eb8 	str.w	r4, [r3, #3768]	; 0xeb8
 80072a0:	f603 63bc 	addw	r3, r3, #3772	; 0xebc
 80072a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072a8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80072ac:	4620      	mov	r0, r4
 80072ae:	b007      	add	sp, #28
 80072b0:	bd30      	pop	{r4, r5, pc}
 80072b2:	bf00      	nop
 80072b4:	080264e0 	.word	0x080264e0
 80072b8:	08006ea7 	.word	0x08006ea7
 80072bc:	08026480 	.word	0x08026480
 80072c0:	08026498 	.word	0x08026498
 80072c4:	08006ec9 	.word	0x08006ec9
 80072c8:	080264b0 	.word	0x080264b0
 80072cc:	080264c8 	.word	0x080264c8

080072d0 <_ZN14mainScreenView20updateWiFiInformaionEP8wifiDatat>:
{
 80072d0:	b508      	push	{r3, lr}
    wifiMenu.updateWifiList(data, numberOfPoints);
 80072d2:	3098      	adds	r0, #152	; 0x98
 80072d4:	f000 f94f 	bl	8007576 <_ZN17wifiMenuContainer14updateWifiListEP8wifiDatat>
}
 80072d8:	bd08      	pop	{r3, pc}

080072da <_GLOBAL__sub_I__ZN14mainScreenViewC2Ev>:
 80072da:	b508      	push	{r3, lr}
 80072dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072e0:	2001      	movs	r0, #1
 80072e2:	f7ff fb07 	bl	80068f4 <_Z41__static_initialization_and_destruction_0ii>
 80072e6:	bd08      	pop	{r3, pc}

080072e8 <_GLOBAL__sub_D__ZN14mainScreenViewC2Ev>:
 80072e8:	b508      	push	{r3, lr}
 80072ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072ee:	2000      	movs	r0, #0
 80072f0:	f7ff fb00 	bl	80068f4 <_Z41__static_initialization_and_destruction_0ii>
 80072f4:	bd08      	pop	{r3, pc}

080072f6 <_ZN22wifiInfoLargeContainer15elementSelectedEv>:
    }
    signalStrengthIcon.invalidate();
}

void wifiInfoLargeContainer::elementSelected()
{
 80072f6:	b510      	push	{r4, lr}
 80072f8:	4604      	mov	r4, r0
    // Inform the view of the event
    if (viewCallback->isValid())
 80072fa:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
 80072fe:	6803      	ldr	r3, [r0, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	4798      	blx	r3
 8007304:	b128      	cbz	r0, 8007312 <_ZN22wifiInfoLargeContainer15elementSelectedEv+0x1c>
    {
        viewCallback->execute(*this);
 8007306:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800730a:	6803      	ldr	r3, [r0, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	4621      	mov	r1, r4
 8007310:	4798      	blx	r3
    }
}
 8007312:	bd10      	pop	{r4, pc}

08007314 <_ZN22wifiInfoLargeContainerD1Ev>:

class wifiInfoLargeContainer : public wifiInfoLargeContainerBase
{
public:
    wifiInfoLargeContainer();
    virtual ~wifiInfoLargeContainer() {}
 8007314:	b510      	push	{r4, lr}
 8007316:	4604      	mov	r4, r0
 8007318:	4b02      	ldr	r3, [pc, #8]	; (8007324 <_ZN22wifiInfoLargeContainerD1Ev+0x10>)
 800731a:	6003      	str	r3, [r0, #0]
 800731c:	f7fd fc5a 	bl	8004bd4 <_ZN26wifiInfoLargeContainerBaseD1Ev>
 8007320:	4620      	mov	r0, r4
 8007322:	bd10      	pop	{r4, pc}
 8007324:	08026514 	.word	0x08026514

08007328 <_ZN22wifiInfoLargeContainerD0Ev>:
 8007328:	b510      	push	{r4, lr}
 800732a:	4604      	mov	r4, r0
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <_ZN22wifiInfoLargeContainerD0Ev+0x1c>)
 800732e:	6003      	str	r3, [r0, #0]
 8007330:	f7fd fc50 	bl	8004bd4 <_ZN26wifiInfoLargeContainerBaseD1Ev>
 8007334:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007338:	4620      	mov	r0, r4
 800733a:	f01b ffd4 	bl	80232e6 <_ZdlPvj>
 800733e:	4620      	mov	r0, r4
 8007340:	bd10      	pop	{r4, pc}
 8007342:	bf00      	nop
 8007344:	08026514 	.word	0x08026514

08007348 <_ZN22wifiInfoLargeContainerC1Ev>:
wifiInfoLargeContainer::wifiInfoLargeContainer()
 8007348:	b510      	push	{r4, lr}
 800734a:	4604      	mov	r4, r0
 800734c:	f7fd fd9a 	bl	8004e84 <_ZN26wifiInfoLargeContainerBaseC1Ev>
 8007350:	4b01      	ldr	r3, [pc, #4]	; (8007358 <_ZN22wifiInfoLargeContainerC1Ev+0x10>)
 8007352:	6023      	str	r3, [r4, #0]
}
 8007354:	4620      	mov	r0, r4
 8007356:	bd10      	pop	{r4, pc}
 8007358:	08026514 	.word	0x08026514

0800735c <_ZN22wifiInfoLargeContainer11setWifiSSIDEPt>:
{
 800735c:	b510      	push	{r4, lr}
 800735e:	4604      	mov	r4, r0
    Unicode::strncpy(wifiSSIDBuffer, name, WIFISSID_SIZE);
 8007360:	2228      	movs	r2, #40	; 0x28
 8007362:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8007366:	f013 f9f8 	bl	801a75a <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
    wifiSSID.invalidate();
 800736a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800736e:	f011 fe0d 	bl	8018f8c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8007372:	bd10      	pop	{r4, pc}

08007374 <_ZN22wifiInfoLargeContainer13setEncryptionEPKt>:
{
 8007374:	b510      	push	{r4, lr}
 8007376:	4604      	mov	r4, r0
    Unicode::strncpy(encryptionBuffer, encryptionType, ENCRYPTION_SIZE);
 8007378:	2228      	movs	r2, #40	; 0x28
 800737a:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 800737e:	f013 f9ec 	bl	801a75a <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
    encryption.invalidate();
 8007382:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8007386:	f011 fe01 	bl	8018f8c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800738a:	bd10      	pop	{r4, pc}

0800738c <_ZN22wifiInfoLargeContainer9setActionERN8touchgfx15GenericCallbackIRS_vvEE>:

void wifiInfoLargeContainer::setAction(GenericCallback< wifiInfoLargeContainer& >& callback)
{
    viewCallback = &callback;
 800738c:	f8c0 1218 	str.w	r1, [r0, #536]	; 0x218
}
 8007390:	4770      	bx	lr

08007392 <_ZN22wifiInfoLargeContainer5setIdEi>:

void wifiInfoLargeContainer::setId(int newId)
{
    id = newId;
 8007392:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
}
 8007396:	4770      	bx	lr

08007398 <_ZN22wifiInfoLargeContainer5getIdEv>:

int wifiInfoLargeContainer::getId()
{
    return id;
}
 8007398:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800739c:	4770      	bx	lr

0800739e <_ZN22wifiInfoLargeContainer10initializeEv>:
{
 800739e:	b508      	push	{r3, lr}
    wifiInfoLargeContainerBase::initialize();
 80073a0:	f7fd fc7a 	bl	8004c98 <_ZN26wifiInfoLargeContainerBase10initializeEv>
}
 80073a4:	bd08      	pop	{r3, pc}

080073a6 <_ZN22wifiInfoLargeContainer17setSignalStrengthEt>:
{
 80073a6:	b510      	push	{r4, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	4604      	mov	r4, r0
    switch (strength)
 80073ac:	3901      	subs	r1, #1
 80073ae:	2903      	cmp	r1, #3
 80073b0:	d80a      	bhi.n	80073c8 <_ZN22wifiInfoLargeContainer17setSignalStrengthEt+0x22>
 80073b2:	e8df f001 	tbb	[pc, r1]
 80073b6:	0f02      	.short	0x0f02
 80073b8:	1f17      	.short	0x1f17
 80073ba:	230b      	movs	r3, #11
 80073bc:	f8ad 3000 	strh.w	r3, [sp]
        signalStrengthIcon.setBitmap(Bitmap(BITMAP_WIFI_DOT_SETTINGS_ID));
 80073c0:	4669      	mov	r1, sp
 80073c2:	30c4      	adds	r0, #196	; 0xc4
 80073c4:	f00e fd85 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    signalStrengthIcon.invalidate();
 80073c8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 80073cc:	f011 fdde 	bl	8018f8c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80073d0:	b004      	add	sp, #16
 80073d2:	bd10      	pop	{r4, pc}
 80073d4:	2312      	movs	r3, #18
 80073d6:	f8ad 3004 	strh.w	r3, [sp, #4]
        signalStrengthIcon.setBitmap(Bitmap(BITMAP_WIFI_LOW_SETTINGS_ID));
 80073da:	a901      	add	r1, sp, #4
 80073dc:	30c4      	adds	r0, #196	; 0xc4
 80073de:	f00e fd78 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        break;
 80073e2:	e7f1      	b.n	80073c8 <_ZN22wifiInfoLargeContainer17setSignalStrengthEt+0x22>
 80073e4:	2313      	movs	r3, #19
 80073e6:	f8ad 3008 	strh.w	r3, [sp, #8]
        signalStrengthIcon.setBitmap(Bitmap(BITMAP_WIFI_MID_SETTINGS_ID));
 80073ea:	a902      	add	r1, sp, #8
 80073ec:	30c4      	adds	r0, #196	; 0xc4
 80073ee:	f00e fd70 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        break;
 80073f2:	e7e9      	b.n	80073c8 <_ZN22wifiInfoLargeContainer17setSignalStrengthEt+0x22>
 80073f4:	230d      	movs	r3, #13
 80073f6:	f8ad 300c 	strh.w	r3, [sp, #12]
        signalStrengthIcon.setBitmap(Bitmap(BITMAP_WIFI_FULL_SETTINGS_ID));
 80073fa:	a903      	add	r1, sp, #12
 80073fc:	30c4      	adds	r0, #196	; 0xc4
 80073fe:	f00e fd68 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        break;
 8007402:	e7e1      	b.n	80073c8 <_ZN22wifiInfoLargeContainer17setSignalStrengthEt+0x22>

08007404 <_ZN17wifiMenuContainer22wifiListElementClickedER22wifiInfoLargeContainer>:

    wifiListContainer.invalidate();
}

void wifiMenuContainer::wifiListElementClicked(wifiInfoLargeContainer& element)
{
 8007404:	b570      	push	{r4, r5, r6, lr}
 8007406:	4604      	mov	r4, r0
 8007408:	460d      	mov	r5, r1
    if (viewCallback->isValid())
 800740a:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 800740e:	6803      	ldr	r3, [r0, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	4798      	blx	r3
 8007414:	b900      	cbnz	r0, 8007418 <_ZN17wifiMenuContainer22wifiListElementClickedER22wifiInfoLargeContainer+0x14>
    {
        viewCallback->execute(element.getId());
    }
}
 8007416:	bd70      	pop	{r4, r5, r6, pc}
        viewCallback->execute(element.getId());
 8007418:	f8d4 4144 	ldr.w	r4, [r4, #324]	; 0x144
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	689e      	ldr	r6, [r3, #8]
 8007420:	4628      	mov	r0, r5
 8007422:	f7ff ffb9 	bl	8007398 <_ZN22wifiInfoLargeContainer5getIdEv>
 8007426:	4601      	mov	r1, r0
 8007428:	4620      	mov	r0, r4
 800742a:	47b0      	blx	r6
}
 800742c:	e7f3      	b.n	8007416 <_ZN17wifiMenuContainer22wifiListElementClickedER22wifiInfoLargeContainer+0x12>
	...

08007430 <_ZN17wifiMenuContainerD1Ev>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	4606      	mov	r6, r0
 8007434:	4b0e      	ldr	r3, [pc, #56]	; (8007470 <_ZN17wifiMenuContainerD1Ev+0x40>)
 8007436:	6003      	str	r3, [r0, #0]
 8007438:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 800743c:	4404      	add	r4, r0
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800743e:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8007442:	4a0c      	ldr	r2, [pc, #48]	; (8007474 <_ZN17wifiMenuContainerD1Ev+0x44>)
 8007444:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 8007448:	4a0b      	ldr	r2, [pc, #44]	; (8007478 <_ZN17wifiMenuContainerD1Ev+0x48>)
 800744a:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 800744e:	f510 75a4 	adds.w	r5, r0, #328	; 0x148
 8007452:	d008      	beq.n	8007466 <_ZN17wifiMenuContainerD1Ev+0x36>
 8007454:	42a5      	cmp	r5, r4
 8007456:	d006      	beq.n	8007466 <_ZN17wifiMenuContainerD1Ev+0x36>
 8007458:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4620      	mov	r0, r4
 8007462:	4798      	blx	r3
 8007464:	e7f6      	b.n	8007454 <_ZN17wifiMenuContainerD1Ev+0x24>
 8007466:	4630      	mov	r0, r6
 8007468:	f7fd ffe4 	bl	8005434 <_ZN21wifiMenuContainerBaseD1Ev>
 800746c:	4630      	mov	r0, r6
 800746e:	bd70      	pop	{r4, r5, r6, pc}
 8007470:	080265ac 	.word	0x080265ac
 8007474:	08025bc8 	.word	0x08025bc8
 8007478:	08025bb0 	.word	0x08025bb0

0800747c <_ZN17wifiMenuContainerD0Ev>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	4606      	mov	r6, r0
 8007480:	4b11      	ldr	r3, [pc, #68]	; (80074c8 <_ZN17wifiMenuContainerD0Ev+0x4c>)
 8007482:	6003      	str	r3, [r0, #0]
 8007484:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 8007488:	4404      	add	r4, r0
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800748a:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800748e:	4a0f      	ldr	r2, [pc, #60]	; (80074cc <_ZN17wifiMenuContainerD0Ev+0x50>)
 8007490:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 8007494:	4a0e      	ldr	r2, [pc, #56]	; (80074d0 <_ZN17wifiMenuContainerD0Ev+0x54>)
 8007496:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 800749a:	f510 75a4 	adds.w	r5, r0, #328	; 0x148
 800749e:	d008      	beq.n	80074b2 <_ZN17wifiMenuContainerD0Ev+0x36>
 80074a0:	42a5      	cmp	r5, r4
 80074a2:	d006      	beq.n	80074b2 <_ZN17wifiMenuContainerD0Ev+0x36>
 80074a4:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4620      	mov	r0, r4
 80074ae:	4798      	blx	r3
 80074b0:	e7f6      	b.n	80074a0 <_ZN17wifiMenuContainerD0Ev+0x24>
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7fd ffbe 	bl	8005434 <_ZN21wifiMenuContainerBaseD1Ev>
 80074b8:	f642 31d8 	movw	r1, #11224	; 0x2bd8
 80074bc:	4630      	mov	r0, r6
 80074be:	f01b ff12 	bl	80232e6 <_ZdlPvj>
 80074c2:	4630      	mov	r0, r6
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
 80074c6:	bf00      	nop
 80074c8:	080265ac 	.word	0x080265ac
 80074cc:	08025bc8 	.word	0x08025bc8
 80074d0:	08025bb0 	.word	0x08025bb0

080074d4 <_ZN17wifiMenuContainerC1Ev>:
wifiMenuContainer::wifiMenuContainer() :
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	4606      	mov	r6, r0
    wifiListElementClickedCallback(this, &wifiMenuContainer::wifiListElementClicked)
 80074da:	f7fd ffed 	bl	80054b8 <_ZN21wifiMenuContainerBaseC1Ev>
 80074de:	4b15      	ldr	r3, [pc, #84]	; (8007534 <_ZN17wifiMenuContainerC1Ev+0x60>)
 80074e0:	6033      	str	r3, [r6, #0]
 80074e2:	f506 75a4 	add.w	r5, r6, #328	; 0x148
 80074e6:	2413      	movs	r4, #19
 80074e8:	e005      	b.n	80074f6 <_ZN17wifiMenuContainerC1Ev+0x22>
 80074ea:	4628      	mov	r0, r5
 80074ec:	f7ff ff2c 	bl	8007348 <_ZN22wifiInfoLargeContainerC1Ev>
 80074f0:	f505 7508 	add.w	r5, r5, #544	; 0x220
 80074f4:	3c01      	subs	r4, #1
 80074f6:	2c00      	cmp	r4, #0
 80074f8:	daf7      	bge.n	80074ea <_ZN17wifiMenuContainerC1Ev+0x16>
 80074fa:	4b0f      	ldr	r3, [pc, #60]	; (8007538 <_ZN17wifiMenuContainerC1Ev+0x64>)
 80074fc:	9302      	str	r3, [sp, #8]
 80074fe:	2300      	movs	r3, #0
 8007500:	9303      	str	r3, [sp, #12]
 8007502:	466a      	mov	r2, sp
 8007504:	ab04      	add	r3, sp, #16
 8007506:	e913 0003 	ldmdb	r3, {r0, r1}
 800750a:	e882 0003 	stmia.w	r2, {r0, r1}
class GenericCallback<T1, void, void>
 800750e:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 8007512:	490a      	ldr	r1, [pc, #40]	; (800753c <_ZN17wifiMenuContainerC1Ev+0x68>)
 8007514:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
        : pobject(pObject), pmemfun(pmemfun_1)
 8007518:	4909      	ldr	r1, [pc, #36]	; (8007540 <_ZN17wifiMenuContainerC1Ev+0x6c>)
 800751a:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
 800751e:	f8c3 6bcc 	str.w	r6, [r3, #3020]	; 0xbcc
 8007522:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8007526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800752a:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800752e:	4630      	mov	r0, r6
 8007530:	b004      	add	sp, #16
 8007532:	bd70      	pop	{r4, r5, r6, pc}
 8007534:	080265ac 	.word	0x080265ac
 8007538:	08007405 	.word	0x08007405
 800753c:	08025bb0 	.word	0x08025bb0
 8007540:	08025bc8 	.word	0x08025bc8

08007544 <_ZN17wifiMenuContainer9setActionERN8touchgfx15GenericCallbackIivvEE>:

void wifiMenuContainer::setAction(GenericCallback< int >& callback)
{
    viewCallback = &callback;
 8007544:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
}
 8007548:	4770      	bx	lr

0800754a <_ZN17wifiMenuContainer10initializeEv>:
{
 800754a:	b510      	push	{r4, lr}
 800754c:	4604      	mov	r4, r0
    wifiMenuContainerBase::initialize();
 800754e:	f7fd ffa7 	bl	80054a0 <_ZN21wifiMenuContainerBase10initializeEv>
        return rect.width;
 8007552:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
        rect.width = width;
 8007556:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
    wifiListContainer.setScrollbarPadding(4);
 800755a:	3458      	adds	r4, #88	; 0x58
 800755c:	2104      	movs	r1, #4
 800755e:	4620      	mov	r0, r4
 8007560:	f00d f869 	bl	8014636 <_ZN8touchgfx19ScrollableContainer19setScrollbarPaddingEh>
    wifiListContainer.setScrollbarsAlpha(100);
 8007564:	2164      	movs	r1, #100	; 0x64
 8007566:	4620      	mov	r0, r4
 8007568:	f00d f85e 	bl	8014628 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>
    wifiListContainer.setScrollbarWidth(5);
 800756c:	2105      	movs	r1, #5
 800756e:	4620      	mov	r0, r4
 8007570:	f00d f864 	bl	801463c <_ZN8touchgfx19ScrollableContainer17setScrollbarWidthEh>
}
 8007574:	bd10      	pop	{r4, pc}

08007576 <_ZN17wifiMenuContainer14updateWifiListEP8wifiDatat>:
{
 8007576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800757a:	4606      	mov	r6, r0
 800757c:	4688      	mov	r8, r1
 800757e:	4617      	mov	r7, r2
    wifiList.removeAll();
 8007580:	f500 798a 	add.w	r9, r0, #276	; 0x114
 8007584:	4648      	mov	r0, r9
 8007586:	f00c f8e4 	bl	8013752 <_ZN8touchgfx10ListLayout9removeAllEv>
    for (int cnt = 0; cnt < numberOfPoints; cnt++)
 800758a:	2500      	movs	r5, #0
 800758c:	e026      	b.n	80075dc <_ZN17wifiMenuContainer14updateWifiListEP8wifiDatat+0x66>
        wifiListElements[cnt].setWifiSSID(data[cnt].ssid);
 800758e:	eb05 1405 	add.w	r4, r5, r5, lsl #4
 8007592:	0164      	lsls	r4, r4, #5
 8007594:	f504 74a4 	add.w	r4, r4, #328	; 0x148
 8007598:	4434      	add	r4, r6
 800759a:	eb05 1a05 	add.w	sl, r5, r5, lsl #4
 800759e:	eb08 0aca 	add.w	sl, r8, sl, lsl #3
 80075a2:	4651      	mov	r1, sl
 80075a4:	4620      	mov	r0, r4
 80075a6:	f7ff fed9 	bl	800735c <_ZN22wifiInfoLargeContainer11setWifiSSIDEPt>
        wifiListElements[cnt].setEncryption(data[cnt].encryption);
 80075aa:	f10a 0140 	add.w	r1, sl, #64	; 0x40
 80075ae:	4620      	mov	r0, r4
 80075b0:	f7ff fee0 	bl	8007374 <_ZN22wifiInfoLargeContainer13setEncryptionEPKt>
        wifiListElements[cnt].setSignalStrength(data[cnt].signalStrength);
 80075b4:	f8ba 107c 	ldrh.w	r1, [sl, #124]	; 0x7c
 80075b8:	4620      	mov	r0, r4
 80075ba:	f7ff fef4 	bl	80073a6 <_ZN22wifiInfoLargeContainer17setSignalStrengthEt>
        wifiListElements[cnt].setId(cnt);
 80075be:	4629      	mov	r1, r5
 80075c0:	4620      	mov	r0, r4
 80075c2:	f7ff fee6 	bl	8007392 <_ZN22wifiInfoLargeContainer5setIdEi>
        wifiList.add(wifiListElements[cnt]);
 80075c6:	4621      	mov	r1, r4
 80075c8:	4648      	mov	r0, r9
 80075ca:	f00c f931 	bl	8013830 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
        wifiListElements[cnt].setAction(wifiListElementClickedCallback);
 80075ce:	f642 31c8 	movw	r1, #11208	; 0x2bc8
 80075d2:	4431      	add	r1, r6
 80075d4:	4620      	mov	r0, r4
 80075d6:	f7ff fed9 	bl	800738c <_ZN22wifiInfoLargeContainer9setActionERN8touchgfx15GenericCallbackIRS_vvEE>
    for (int cnt = 0; cnt < numberOfPoints; cnt++)
 80075da:	3501      	adds	r5, #1
 80075dc:	42af      	cmp	r7, r5
 80075de:	dcd6      	bgt.n	800758e <_ZN17wifiMenuContainer14updateWifiListEP8wifiDatat+0x18>
    wifiListContainer.invalidate();
 80075e0:	f106 0058 	add.w	r0, r6, #88	; 0x58
 80075e4:	f011 fcd2 	bl	8018f8c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80075e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080075ec <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 80075ec:	4603      	mov	r3, r0
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80075ee:	3830      	subs	r0, #48	; 0x30
 80075f0:	b2c0      	uxtb	r0, r0
 80075f2:	2809      	cmp	r0, #9
 80075f4:	d90a      	bls.n	800760c <Hex2Num+0x20>
        return a - '0';
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80075f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	2a05      	cmp	r2, #5
 80075fe:	d906      	bls.n	800760e <Hex2Num+0x22>
        return (a - 'a') + 10;
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8007600:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	2a05      	cmp	r2, #5
 8007608:	d904      	bls.n	8007614 <Hex2Num+0x28>
        return (a - 'A') + 10;
    }

    return 0;
 800760a:	2000      	movs	r0, #0
}
 800760c:	4770      	bx	lr
        return (a - 'a') + 10;
 800760e:	3b57      	subs	r3, #87	; 0x57
 8007610:	b2d8      	uxtb	r0, r3
 8007612:	4770      	bx	lr
        return (a - 'A') + 10;
 8007614:	3b37      	subs	r3, #55	; 0x37
 8007616:	b2d8      	uxtb	r0, r3
 8007618:	4770      	bx	lr

0800761a <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800761a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761c:	4605      	mov	r5, r0
 800761e:	460e      	mov	r6, r1
    uint32_t sum = 0;
    uint8_t i = 0;
 8007620:	2400      	movs	r4, #0
    uint32_t sum = 0;
 8007622:	4627      	mov	r7, r4

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8007624:	e006      	b.n	8007634 <ParseHexNumber+0x1a>
        sum <<= 4;
 8007626:	013f      	lsls	r7, r7, #4
        sum += Hex2Num(*ptr);
 8007628:	f7ff ffe0 	bl	80075ec <Hex2Num>
 800762c:	4407      	add	r7, r0
        ptr++;
 800762e:	3501      	adds	r5, #1
        i++;
 8007630:	3401      	adds	r4, #1
 8007632:	b2e4      	uxtb	r4, r4
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8007634:	7828      	ldrb	r0, [r5, #0]
 8007636:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b05      	cmp	r3, #5
 8007644:	bf88      	it	hi
 8007646:	2a09      	cmphi	r2, #9
 8007648:	d9ed      	bls.n	8007626 <ParseHexNumber+0xc>
 800764a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b05      	cmp	r3, #5
 8007652:	d9e8      	bls.n	8007626 <ParseHexNumber+0xc>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8007654:	b106      	cbz	r6, 8007658 <ParseHexNumber+0x3e>
        *cnt = i;
 8007656:	7034      	strb	r4, [r6, #0]
    }
    return sum;                                        		/* Return number */
}
 8007658:	4638      	mov	r0, r7
 800765a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800765c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800765c:	b510      	push	{r4, lr}
 800765e:	4686      	mov	lr, r0
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8007660:	7803      	ldrb	r3, [r0, #0]
 8007662:	2b2d      	cmp	r3, #45	; 0x2d
 8007664:	d003      	beq.n	800766e <ParseNumber+0x12>
    uint8_t minus = 0, i = 0;
 8007666:	2400      	movs	r4, #0
 8007668:	46a4      	mov	ip, r4
 800766a:	2000      	movs	r0, #0
 800766c:	e00e      	b.n	800768c <ParseNumber+0x30>
        minus = 1;
        ptr++;
 800766e:	f100 0e01 	add.w	lr, r0, #1
        minus = 1;
 8007672:	2401      	movs	r4, #1
 8007674:	e7f8      	b.n	8007668 <ParseNumber+0xc>
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007676:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800767a:	3b30      	subs	r3, #48	; 0x30
 800767c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
        ptr++;
 8007680:	f10e 0e01 	add.w	lr, lr, #1
        i++;
 8007684:	f10c 0c01 	add.w	ip, ip, #1
 8007688:	fa5f fc8c 	uxtb.w	ip, ip
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800768c:	f89e 3000 	ldrb.w	r3, [lr]
 8007690:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	2a09      	cmp	r2, #9
 8007698:	d9ed      	bls.n	8007676 <ParseNumber+0x1a>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800769a:	b109      	cbz	r1, 80076a0 <ParseNumber+0x44>
        *cnt = i;
 800769c:	f881 c000 	strb.w	ip, [r1]
    }
    if (minus) {                                    		/* Minus detected */
 80076a0:	b904      	cbnz	r4, 80076a4 <ParseNumber+0x48>
        return 0 - sum;
    }
    return sum;                                       		/* Return number */
}
 80076a2:	bd10      	pop	{r4, pc}
        return 0 - sum;
 80076a4:	4240      	negs	r0, r0
 80076a6:	e7fc      	b.n	80076a2 <ParseNumber+0x46>

080076a8 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	4604      	mov	r4, r0
 80076ae:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 80076b0:	2500      	movs	r5, #0

  while(* ptr) {
 80076b2:	e002      	b.n	80076ba <ParseMAC+0x12>
    hexcnt = 1;
    if(*ptr != ':')
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 80076b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80076b8:	441c      	add	r4, r3
  while(* ptr) {
 80076ba:	7823      	ldrb	r3, [r4, #0]
 80076bc:	b173      	cbz	r3, 80076dc <ParseMAC+0x34>
    hexcnt = 1;
 80076be:	2301      	movs	r3, #1
 80076c0:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != ':')
 80076c4:	7823      	ldrb	r3, [r4, #0]
 80076c6:	2b3a      	cmp	r3, #58	; 0x3a
 80076c8:	d0f4      	beq.n	80076b4 <ParseMAC+0xc>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80076ca:	f10d 0107 	add.w	r1, sp, #7
 80076ce:	4620      	mov	r0, r4
 80076d0:	f7ff ffa3 	bl	800761a <ParseHexNumber>
 80076d4:	1c6b      	adds	r3, r5, #1
 80076d6:	5570      	strb	r0, [r6, r5]
 80076d8:	b2dd      	uxtb	r5, r3
 80076da:	e7eb      	b.n	80076b4 <ParseMAC+0xc>
  }
}
 80076dc:	b002      	add	sp, #8
 80076de:	bd70      	pop	{r4, r5, r6, pc}

080076e0 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	4604      	mov	r4, r0
 80076e6:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 80076e8:	2500      	movs	r5, #0

  while(* ptr) {
 80076ea:	e002      	b.n	80076f2 <ParseIP+0x12>
    hexcnt = 1;
    if(*ptr != '.')
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 80076ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80076f0:	441c      	add	r4, r3
  while(* ptr) {
 80076f2:	7823      	ldrb	r3, [r4, #0]
 80076f4:	b173      	cbz	r3, 8007714 <ParseIP+0x34>
    hexcnt = 1;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != '.')
 80076fc:	7823      	ldrb	r3, [r4, #0]
 80076fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007700:	d0f4      	beq.n	80076ec <ParseIP+0xc>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007702:	f10d 0107 	add.w	r1, sp, #7
 8007706:	4620      	mov	r0, r4
 8007708:	f7ff ffa8 	bl	800765c <ParseNumber>
 800770c:	1c6b      	adds	r3, r5, #1
 800770e:	5570      	strb	r0, [r6, r5]
 8007710:	b2dd      	uxtb	r5, r3
 8007712:	e7eb      	b.n	80076ec <ParseIP+0xc>
  }
}
 8007714:	b002      	add	sp, #8
 8007716:	bd70      	pop	{r4, r5, r6, pc}

08007718 <ArrayTo32bit>:
  }
}

static uint32_t ArrayTo32bit(uint8_t * buf)
{
	return ((buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | (buf[3] << 0));
 8007718:	7802      	ldrb	r2, [r0, #0]
 800771a:	7843      	ldrb	r3, [r0, #1]
 800771c:	041b      	lsls	r3, r3, #16
 800771e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007722:	7882      	ldrb	r2, [r0, #2]
 8007724:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007728:	78c0      	ldrb	r0, [r0, #3]
}
 800772a:	4318      	orrs	r0, r3
 800772c:	4770      	bx	lr

0800772e <AT_ParseIsConnected>:
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800772e:	7883      	ldrb	r3, [r0, #2]
 8007730:	2b31      	cmp	r3, #49	; 0x31
 8007732:	bf14      	ite	ne
 8007734:	2300      	movne	r3, #0
 8007736:	2301      	moveq	r3, #1
 8007738:	700b      	strb	r3, [r1, #0]
}
 800773a:	4770      	bx	lr

0800773c <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	4604      	mov	r4, r0
 8007740:	460d      	mov	r5, r1
 8007742:	4616      	mov	r6, r2
  int ret = 0;
  int16_t recv_len = 0;

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8007744:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8007748:	4608      	mov	r0, r1
 800774a:	f7f8 fddb 	bl	8000304 <strlen>
 800774e:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007752:	b281      	uxth	r1, r0
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7

  if( ret > 0)
 8007758:	2800      	cmp	r0, #0
 800775a:	dd25      	ble.n	80077a8 <AT_ExecuteCommand+0x6c>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800775c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8007760:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007764:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8007768:	4630      	mov	r0, r6
 800776a:	4798      	blx	r3
 800776c:	4604      	mov	r4, r0
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800776e:	1e43      	subs	r3, r0, #1
 8007770:	b29b      	uxth	r3, r3
 8007772:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8007776:	d212      	bcs.n	800779e <AT_ExecuteCommand+0x62>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8007778:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
 800777c:	d008      	beq.n	8007790 <AT_ExecuteCommand+0x54>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
      }
      *(pdata + recv_len) = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	5533      	strb	r3, [r6, r4]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 8007782:	490c      	ldr	r1, [pc, #48]	; (80077b4 <AT_ExecuteCommand+0x78>)
 8007784:	4630      	mov	r0, r6
 8007786:	f01c fc91 	bl	80240ac <strstr>
 800778a:	b118      	cbz	r0, 8007794 <AT_ExecuteCommand+0x58>
      {
        return ES_WIFI_STATUS_OK;
 800778c:	2000      	movs	r0, #0
 800778e:	e00a      	b.n	80077a6 <AT_ExecuteCommand+0x6a>
        recv_len--;
 8007790:	b21c      	sxth	r4, r3
 8007792:	e7f4      	b.n	800777e <AT_ExecuteCommand+0x42>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8007794:	4908      	ldr	r1, [pc, #32]	; (80077b8 <AT_ExecuteCommand+0x7c>)
 8007796:	4630      	mov	r0, r6
 8007798:	f01c fc88 	bl	80240ac <strstr>
 800779c:	b930      	cbnz	r0, 80077ac <AT_ExecuteCommand+0x70>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800779e:	f114 0f04 	cmn.w	r4, #4
 80077a2:	d005      	beq.n	80077b0 <AT_ExecuteCommand+0x74>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80077a4:	2004      	movs	r0, #4
}
 80077a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ES_WIFI_STATUS_IO_ERROR;
 80077a8:	2004      	movs	r0, #4
 80077aa:	e7fc      	b.n	80077a6 <AT_ExecuteCommand+0x6a>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80077ac:	2005      	movs	r0, #5
 80077ae:	e7fa      	b.n	80077a6 <AT_ExecuteCommand+0x6a>
      return ES_WIFI_STATUS_MODULE_CRASH;
 80077b0:	2006      	movs	r0, #6
 80077b2:	e7f8      	b.n	80077a6 <AT_ExecuteCommand+0x6a>
 80077b4:	08026638 	.word	0x08026638
 80077b8:	08026644 	.word	0x08026644

080077bc <ParseSecurity>:
{
 80077bc:	b510      	push	{r4, lr}
 80077be:	4604      	mov	r4, r0
  if(strstr(ptr,"Open")) return ES_WIFI_SEC_OPEN;
 80077c0:	4915      	ldr	r1, [pc, #84]	; (8007818 <ParseSecurity+0x5c>)
 80077c2:	f01c fc73 	bl	80240ac <strstr>
 80077c6:	b108      	cbz	r0, 80077cc <ParseSecurity+0x10>
 80077c8:	2000      	movs	r0, #0
}
 80077ca:	bd10      	pop	{r4, pc}
  else if(strstr(ptr,"WEP")) return ES_WIFI_SEC_WEP;
 80077cc:	4913      	ldr	r1, [pc, #76]	; (800781c <ParseSecurity+0x60>)
 80077ce:	4620      	mov	r0, r4
 80077d0:	f01c fc6c 	bl	80240ac <strstr>
 80077d4:	b108      	cbz	r0, 80077da <ParseSecurity+0x1e>
 80077d6:	2001      	movs	r0, #1
 80077d8:	e7f7      	b.n	80077ca <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 80077da:	4911      	ldr	r1, [pc, #68]	; (8007820 <ParseSecurity+0x64>)
 80077dc:	4620      	mov	r0, r4
 80077de:	f01c fc65 	bl	80240ac <strstr>
 80077e2:	b980      	cbnz	r0, 8007806 <ParseSecurity+0x4a>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 80077e4:	490f      	ldr	r1, [pc, #60]	; (8007824 <ParseSecurity+0x68>)
 80077e6:	4620      	mov	r0, r4
 80077e8:	f01c fc60 	bl	80240ac <strstr>
 80077ec:	b968      	cbnz	r0, 800780a <ParseSecurity+0x4e>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 80077ee:	490e      	ldr	r1, [pc, #56]	; (8007828 <ParseSecurity+0x6c>)
 80077f0:	4620      	mov	r0, r4
 80077f2:	f01c fc5b 	bl	80240ac <strstr>
 80077f6:	b950      	cbnz	r0, 800780e <ParseSecurity+0x52>
  else if(strstr(ptr,"WPA")) return ES_WIFI_SEC_WPA;
 80077f8:	490c      	ldr	r1, [pc, #48]	; (800782c <ParseSecurity+0x70>)
 80077fa:	4620      	mov	r0, r4
 80077fc:	f01c fc56 	bl	80240ac <strstr>
 8007800:	b138      	cbz	r0, 8007812 <ParseSecurity+0x56>
 8007802:	2002      	movs	r0, #2
 8007804:	e7e1      	b.n	80077ca <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 8007806:	2004      	movs	r0, #4
 8007808:	e7df      	b.n	80077ca <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 800780a:	2005      	movs	r0, #5
 800780c:	e7dd      	b.n	80077ca <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 800780e:	2003      	movs	r0, #3
 8007810:	e7db      	b.n	80077ca <ParseSecurity+0xe>
  else return ES_WIFI_SEC_UNKNOWN;
 8007812:	20ff      	movs	r0, #255	; 0xff
 8007814:	e7d9      	b.n	80077ca <ParseSecurity+0xe>
 8007816:	bf00      	nop
 8007818:	0802664c 	.word	0x0802664c
 800781c:	08026654 	.word	0x08026654
 8007820:	08026658 	.word	0x08026658
 8007824:	08026664 	.word	0x08026664
 8007828:	0802665c 	.word	0x0802665c
 800782c:	08026670 	.word	0x08026670

08007830 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	4604      	mov	r4, r0
 8007836:	460d      	mov	r5, r1
 8007838:	4617      	mov	r7, r2
 800783a:	461e      	mov	r6, r3
  int16_t send_len = 0;
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 800783c:	4608      	mov	r0, r1
 800783e:	f7f8 fd61 	bl	8000304 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8007842:	f010 0f01 	tst.w	r0, #1
 8007846:	d138      	bne.n	80078ba <AT_RequestSendData+0x8a>
 8007848:	fa1f f880 	uxth.w	r8, r0
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800784c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007850:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007854:	4641      	mov	r1, r8
 8007856:	4628      	mov	r0, r5
 8007858:	4798      	blx	r3
 800785a:	b280      	uxth	r0, r0
  if (n == cmd_len)
 800785c:	4580      	cmp	r8, r0
 800785e:	d002      	beq.n	8007866 <AT_RequestSendData+0x36>
    else
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8007860:	2004      	movs	r0, #4
}
 8007862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8007866:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800786a:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 800786e:	4631      	mov	r1, r6
 8007870:	4638      	mov	r0, r7
 8007872:	4798      	blx	r3
    if (send_len == len)
 8007874:	42b0      	cmp	r0, r6
 8007876:	d122      	bne.n	80078be <AT_RequestSendData+0x8e>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8007878:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800787c:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007880:	2100      	movs	r1, #0
 8007882:	9806      	ldr	r0, [sp, #24]
 8007884:	4798      	blx	r3
      if (recv_len > 0)
 8007886:	2800      	cmp	r0, #0
 8007888:	dd10      	ble.n	80078ac <AT_RequestSendData+0x7c>
        *(pdata+recv_len) = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	9a06      	ldr	r2, [sp, #24]
 800788e:	5413      	strb	r3, [r2, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8007890:	490d      	ldr	r1, [pc, #52]	; (80078c8 <AT_RequestSendData+0x98>)
 8007892:	4610      	mov	r0, r2
 8007894:	f01c fc0a 	bl	80240ac <strstr>
 8007898:	b108      	cbz	r0, 800789e <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 800789a:	2000      	movs	r0, #0
 800789c:	e7e1      	b.n	8007862 <AT_RequestSendData+0x32>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800789e:	490b      	ldr	r1, [pc, #44]	; (80078cc <AT_RequestSendData+0x9c>)
 80078a0:	9806      	ldr	r0, [sp, #24]
 80078a2:	f01c fc03 	bl	80240ac <strstr>
 80078a6:	b160      	cbz	r0, 80078c2 <AT_RequestSendData+0x92>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80078a8:	2005      	movs	r0, #5
 80078aa:	e7da      	b.n	8007862 <AT_RequestSendData+0x32>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80078ac:	f110 0f04 	cmn.w	r0, #4
 80078b0:	d001      	beq.n	80078b6 <AT_RequestSendData+0x86>
      return ES_WIFI_STATUS_ERROR;
 80078b2:	2002      	movs	r0, #2
 80078b4:	e7d5      	b.n	8007862 <AT_RequestSendData+0x32>
        return ES_WIFI_STATUS_MODULE_CRASH;
 80078b6:	2006      	movs	r0, #6
 80078b8:	e7d3      	b.n	8007862 <AT_RequestSendData+0x32>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80078ba:	2002      	movs	r0, #2
 80078bc:	e7d1      	b.n	8007862 <AT_RequestSendData+0x32>
      return ES_WIFI_STATUS_ERROR;
 80078be:	2002      	movs	r0, #2
 80078c0:	e7cf      	b.n	8007862 <AT_RequestSendData+0x32>
          return ES_WIFI_STATUS_ERROR;
 80078c2:	2002      	movs	r0, #2
 80078c4:	e7cd      	b.n	8007862 <AT_RequestSendData+0x32>
 80078c6:	bf00      	nop
 80078c8:	08026638 	.word	0x08026638
 80078cc:	08026644 	.word	0x08026644

080078d0 <AT_ParseFWRev>:
{
 80078d0:	b530      	push	{r4, r5, lr}
 80078d2:	b083      	sub	sp, #12
 80078d4:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 1, ".",&saveptr);
 80078d6:	aa01      	add	r2, sp, #4
 80078d8:	490e      	ldr	r1, [pc, #56]	; (8007914 <AT_ParseFWRev+0x44>)
 80078da:	3001      	adds	r0, #1
 80078dc:	f01c fc24 	bl	8024128 <strtok_r>
  uint8_t num = 0;
 80078e0:	2400      	movs	r4, #0
  while ((ptr != NULL) && (num < 4)) {
 80078e2:	e006      	b.n	80078f2 <AT_ParseFWRev+0x22>
    num++;
 80078e4:	3401      	adds	r4, #1
 80078e6:	b2e4      	uxtb	r4, r4
    ptr = strtok_r(NULL, ".",&saveptr);
 80078e8:	aa01      	add	r2, sp, #4
 80078ea:	490a      	ldr	r1, [pc, #40]	; (8007914 <AT_ParseFWRev+0x44>)
 80078ec:	2000      	movs	r0, #0
 80078ee:	f01c fc1b 	bl	8024128 <strtok_r>
  while ((ptr != NULL) && (num < 4)) {
 80078f2:	1e03      	subs	r3, r0, #0
 80078f4:	bf18      	it	ne
 80078f6:	2301      	movne	r3, #1
 80078f8:	2c03      	cmp	r4, #3
 80078fa:	bf88      	it	hi
 80078fc:	2300      	movhi	r3, #0
 80078fe:	b133      	cbz	r3, 800790e <AT_ParseFWRev+0x3e>
    switch (num) {
 8007900:	2c03      	cmp	r4, #3
 8007902:	d8ef      	bhi.n	80078e4 <AT_ParseFWRev+0x14>
      ver[num] =  ParseNumber(ptr,0);
 8007904:	2100      	movs	r1, #0
 8007906:	f7ff fea9 	bl	800765c <ParseNumber>
 800790a:	5528      	strb	r0, [r5, r4]
      break;
 800790c:	e7ea      	b.n	80078e4 <AT_ParseFWRev+0x14>
}
 800790e:	b003      	add	sp, #12
 8007910:	bd30      	pop	{r4, r5, pc}
 8007912:	bf00      	nop
 8007914:	08026674 	.word	0x08026674

08007918 <AT_ParsePing>:
{
 8007918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800791a:	b083      	sub	sp, #12
 800791c:	4605      	mov	r5, r0
 800791e:	460c      	mov	r4, r1
 8007920:	4610      	mov	r0, r2
  ptr= strtok_r(pdata,",\n\r",&saveptr);
 8007922:	aa01      	add	r2, sp, #4
 8007924:	490f      	ldr	r1, [pc, #60]	; (8007964 <AT_ParsePing+0x4c>)
 8007926:	f01c fbff 	bl	8024128 <strtok_r>
 800792a:	4603      	mov	r3, r0
  int i=0;
 800792c:	2600      	movs	r6, #0
  while(ptr)
 800792e:	b1bb      	cbz	r3, 8007960 <AT_ParsePing+0x48>
    ptr = strtok_r(0,"\n\r",&saveptr);
 8007930:	aa01      	add	r2, sp, #4
 8007932:	490d      	ldr	r1, [pc, #52]	; (8007968 <AT_ParsePing+0x50>)
 8007934:	2000      	movs	r0, #0
 8007936:	f01c fbf7 	bl	8024128 <strtok_r>
    if (ptr)
 800793a:	4603      	mov	r3, r0
 800793c:	2800      	cmp	r0, #0
 800793e:	d0f6      	beq.n	800792e <AT_ParsePing+0x16>
      res[i++]=ParseNumber(ptr,0);
 8007940:	1c77      	adds	r7, r6, #1
 8007942:	2100      	movs	r1, #0
 8007944:	f7ff fe8a 	bl	800765c <ParseNumber>
 8007948:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
      if (i==count) return;
 800794c:	42bc      	cmp	r4, r7
 800794e:	d007      	beq.n	8007960 <AT_ParsePing+0x48>
      ptr = strtok_r(0,",\n\r",&saveptr);
 8007950:	aa01      	add	r2, sp, #4
 8007952:	4904      	ldr	r1, [pc, #16]	; (8007964 <AT_ParsePing+0x4c>)
 8007954:	2000      	movs	r0, #0
 8007956:	f01c fbe7 	bl	8024128 <strtok_r>
 800795a:	4603      	mov	r3, r0
      res[i++]=ParseNumber(ptr,0);
 800795c:	463e      	mov	r6, r7
 800795e:	e7e6      	b.n	800792e <AT_ParsePing+0x16>
}
 8007960:	b003      	add	sp, #12
 8007962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007964:	0802667c 	.word	0x0802667c
 8007968:	08026680 	.word	0x08026680

0800796c <AT_ParseTransportSettings>:
{
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8007972:	aa01      	add	r2, sp, #4
 8007974:	4937      	ldr	r1, [pc, #220]	; (8007a54 <AT_ParseTransportSettings+0xe8>)
 8007976:	3002      	adds	r0, #2
 8007978:	f01c fbd6 	bl	8024128 <strtok_r>
 800797c:	4603      	mov	r3, r0
  uint8_t num = 0;
 800797e:	2600      	movs	r6, #0
  while (ptr != NULL) {
 8007980:	e010      	b.n	80079a4 <AT_ParseTransportSettings+0x38>
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 8007982:	2100      	movs	r1, #0
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fe69 	bl	800765c <ParseNumber>
 800798a:	7028      	strb	r0, [r5, #0]
    ptr = strtok_r(NULL, ",",&saveptr);
 800798c:	aa01      	add	r2, sp, #4
 800798e:	4931      	ldr	r1, [pc, #196]	; (8007a54 <AT_ParseTransportSettings+0xe8>)
 8007990:	2000      	movs	r0, #0
 8007992:	f01c fbc9 	bl	8024128 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8007996:	4603      	mov	r3, r0
 8007998:	b118      	cbz	r0, 80079a2 <AT_ParseTransportSettings+0x36>
 800799a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800799e:	2a2c      	cmp	r2, #44	; 0x2c
 80079a0:	d053      	beq.n	8007a4a <AT_ParseTransportSettings+0xde>
{
 80079a2:	4626      	mov	r6, r4
  while (ptr != NULL) {
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d053      	beq.n	8007a50 <AT_ParseTransportSettings+0xe4>
    switch (num++) {
 80079a8:	1c74      	adds	r4, r6, #1
 80079aa:	b2e4      	uxtb	r4, r4
 80079ac:	2e09      	cmp	r6, #9
 80079ae:	d8ed      	bhi.n	800798c <AT_ParseTransportSettings+0x20>
 80079b0:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <AT_ParseTransportSettings+0x4c>)
 80079b2:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	08007983 	.word	0x08007983
 80079bc:	080079e1 	.word	0x080079e1
 80079c0:	080079eb 	.word	0x080079eb
 80079c4:	080079f7 	.word	0x080079f7
 80079c8:	08007a03 	.word	0x08007a03
 80079cc:	08007a0f 	.word	0x08007a0f
 80079d0:	08007a1b 	.word	0x08007a1b
 80079d4:	08007a27 	.word	0x08007a27
 80079d8:	08007a33 	.word	0x08007a33
 80079dc:	08007a3f 	.word	0x08007a3f
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 80079e0:	1c69      	adds	r1, r5, #1
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fe7c 	bl	80076e0 <ParseIP>
      break;
 80079e8:	e7d0      	b.n	800798c <AT_ParseTransportSettings+0x20>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 80079ea:	2100      	movs	r1, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff fe35 	bl	800765c <ParseNumber>
 80079f2:	80e8      	strh	r0, [r5, #6]
      break;
 80079f4:	e7ca      	b.n	800798c <AT_ParseTransportSettings+0x20>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 80079f6:	f105 0108 	add.w	r1, r5, #8
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fe70 	bl	80076e0 <ParseIP>
      break;
 8007a00:	e7c4      	b.n	800798c <AT_ParseTransportSettings+0x20>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 8007a02:	2100      	movs	r1, #0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff fe29 	bl	800765c <ParseNumber>
 8007a0a:	81a8      	strh	r0, [r5, #12]
      break;
 8007a0c:	e7be      	b.n	800798c <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fe23 	bl	800765c <ParseNumber>
 8007a16:	73a8      	strb	r0, [r5, #14]
      break;
 8007a18:	e7b8      	b.n	800798c <AT_ParseTransportSettings+0x20>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7ff fe1d 	bl	800765c <ParseNumber>
 8007a22:	73e8      	strb	r0, [r5, #15]
      break;
 8007a24:	e7b2      	b.n	800798c <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 8007a26:	2100      	movs	r1, #0
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fe17 	bl	800765c <ParseNumber>
 8007a2e:	7428      	strb	r0, [r5, #16]
      break;
 8007a30:	e7ac      	b.n	800798c <AT_ParseTransportSettings+0x20>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 8007a32:	2100      	movs	r1, #0
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fe11 	bl	800765c <ParseNumber>
 8007a3a:	7468      	strb	r0, [r5, #17]
      break;
 8007a3c:	e7a6      	b.n	800798c <AT_ParseTransportSettings+0x20>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 8007a3e:	2100      	movs	r1, #0
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff fe0b 	bl	800765c <ParseNumber>
 8007a46:	74a8      	strb	r0, [r5, #18]
      break;
 8007a48:	e7a0      	b.n	800798c <AT_ParseTransportSettings+0x20>
      num++;
 8007a4a:	1cb4      	adds	r4, r6, #2
 8007a4c:	b2e4      	uxtb	r4, r4
 8007a4e:	e7a8      	b.n	80079a2 <AT_ParseTransportSettings+0x36>
}
 8007a50:	b002      	add	sp, #8
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	08026678 	.word	0x08026678

08007a58 <AT_ParseInfo>:
{
 8007a58:	b530      	push	{r4, r5, lr}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	4608      	mov	r0, r1
  ptr = strtok_r((char *)pdata + 2, ",", &saveptr);
 8007a60:	aa01      	add	r2, sp, #4
 8007a62:	492c      	ldr	r1, [pc, #176]	; (8007b14 <AT_ParseInfo+0xbc>)
 8007a64:	3002      	adds	r0, #2
 8007a66:	f01c fb5f 	bl	8024128 <strtok_r>
  uint8_t num = 0;
 8007a6a:	2300      	movs	r3, #0
  while (ptr != NULL){
 8007a6c:	e00a      	b.n	8007a84 <AT_ParseInfo+0x2c>
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8007a6e:	2220      	movs	r2, #32
 8007a70:	4601      	mov	r1, r0
 8007a72:	4628      	mov	r0, r5
 8007a74:	f01c fb07 	bl	8024086 <strncpy>
    ptr = strtok_r(NULL, ",", &saveptr);
 8007a78:	aa01      	add	r2, sp, #4
 8007a7a:	4926      	ldr	r1, [pc, #152]	; (8007b14 <AT_ParseInfo+0xbc>)
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f01c fb53 	bl	8024128 <strtok_r>
    switch (num++) {
 8007a82:	4623      	mov	r3, r4
  while (ptr != NULL){
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d042      	beq.n	8007b0e <AT_ParseInfo+0xb6>
    switch (num++) {
 8007a88:	1c5c      	adds	r4, r3, #1
 8007a8a:	b2e4      	uxtb	r4, r4
 8007a8c:	2b06      	cmp	r3, #6
 8007a8e:	d8f3      	bhi.n	8007a78 <AT_ParseInfo+0x20>
 8007a90:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <AT_ParseInfo+0x40>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007a6f 	.word	0x08007a6f
 8007a9c:	08007ab5 	.word	0x08007ab5
 8007aa0:	08007ac3 	.word	0x08007ac3
 8007aa4:	08007ad1 	.word	0x08007ad1
 8007aa8:	08007adf 	.word	0x08007adf
 8007aac:	08007aed 	.word	0x08007aed
 8007ab0:	08007af9 	.word	0x08007af9
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8007ab4:	2218      	movs	r2, #24
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	f105 0020 	add.w	r0, r5, #32
 8007abc:	f01c fae3 	bl	8024086 <strncpy>
      break;
 8007ac0:	e7da      	b.n	8007a78 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8007ac2:	2210      	movs	r2, #16
 8007ac4:	4601      	mov	r1, r0
 8007ac6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8007aca:	f01c fadc 	bl	8024086 <strncpy>
      break;
 8007ace:	e7d3      	b.n	8007a78 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8007ad0:	2210      	movs	r2, #16
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8007ad8:	f01c fad5 	bl	8024086 <strncpy>
      break;
 8007adc:	e7cc      	b.n	8007a78 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8007ade:	2210      	movs	r2, #16
 8007ae0:	4601      	mov	r1, r0
 8007ae2:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8007ae6:	f01c face 	bl	8024086 <strncpy>
      break;
 8007aea:	e7c5      	b.n	8007a78 <AT_ParseInfo+0x20>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8007aec:	2100      	movs	r1, #0
 8007aee:	f7ff fdb5 	bl	800765c <ParseNumber>
 8007af2:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
      break;
 8007af6:	e7bf      	b.n	8007a78 <AT_ParseInfo+0x20>
      ptr = strtok_r(ptr, "\r", &saveptr);
 8007af8:	aa01      	add	r2, sp, #4
 8007afa:	4907      	ldr	r1, [pc, #28]	; (8007b18 <AT_ParseInfo+0xc0>)
 8007afc:	f01c fb14 	bl	8024128 <strtok_r>
 8007b00:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007b02:	2220      	movs	r2, #32
 8007b04:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8007b08:	f01c fabd 	bl	8024086 <strncpy>
      break;
 8007b0c:	e7b4      	b.n	8007a78 <AT_ParseInfo+0x20>
}
 8007b0e:	b003      	add	sp, #12
 8007b10:	bd30      	pop	{r4, r5, pc}
 8007b12:	bf00      	nop
 8007b14:	08026678 	.word	0x08026678
 8007b18:	080267f0 	.word	0x080267f0

08007b1c <AT_ParseSingleAP>:
{
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	460e      	mov	r6, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8007b22:	aa01      	add	r2, sp, #4
 8007b24:	4926      	ldr	r1, [pc, #152]	; (8007bc0 <AT_ParseSingleAP+0xa4>)
 8007b26:	3002      	adds	r0, #2
 8007b28:	f01c fafe 	bl	8024128 <strtok_r>
 8007b2c:	4604      	mov	r4, r0
  uint8_t num = 0;
 8007b2e:	2300      	movs	r3, #0
  while (ptr != NULL) {
 8007b30:	e011      	b.n	8007b56 <AT_ParseSingleAP+0x3a>
      ptr[strlen(ptr) - 1] = 0;
 8007b32:	4620      	mov	r0, r4
 8007b34:	f7f8 fbe6 	bl	8000304 <strlen>
 8007b38:	3801      	subs	r0, #1
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	5423      	strb	r3, [r4, r0]
      strncpy((char *)AP->SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8007b3e:	2221      	movs	r2, #33	; 0x21
 8007b40:	1c61      	adds	r1, r4, #1
 8007b42:	4630      	mov	r0, r6
 8007b44:	f01c fa9f 	bl	8024086 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8007b48:	aa01      	add	r2, sp, #4
 8007b4a:	491d      	ldr	r1, [pc, #116]	; (8007bc0 <AT_ParseSingleAP+0xa4>)
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	f01c faeb 	bl	8024128 <strtok_r>
 8007b52:	4604      	mov	r4, r0
 8007b54:	462b      	mov	r3, r5
  while (ptr != NULL) {
 8007b56:	b38c      	cbz	r4, 8007bbc <AT_ParseSingleAP+0xa0>
    switch (num++) {
 8007b58:	1c5d      	adds	r5, r3, #1
 8007b5a:	b2ed      	uxtb	r5, r5
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	2b07      	cmp	r3, #7
 8007b60:	d8f2      	bhi.n	8007b48 <AT_ParseSingleAP+0x2c>
 8007b62:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <AT_ParseSingleAP+0x4c>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007b33 	.word	0x08007b33
 8007b6c:	08007b89 	.word	0x08007b89
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007b49 	.word	0x08007b49
 8007b78:	08007b49 	.word	0x08007b49
 8007b7c:	08007ba1 	.word	0x08007ba1
 8007b80:	08007b49 	.word	0x08007b49
 8007b84:	08007bad 	.word	0x08007bad
      ParseMAC(ptr, AP->MAC);
 8007b88:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f7ff fd8b 	bl	80076a8 <ParseMAC>
      break;
 8007b92:	e7d9      	b.n	8007b48 <AT_ParseSingleAP+0x2c>
      AP->RSSI = ParseNumber(ptr, NULL);
 8007b94:	2100      	movs	r1, #0
 8007b96:	4620      	mov	r0, r4
 8007b98:	f7ff fd60 	bl	800765c <ParseNumber>
 8007b9c:	8470      	strh	r0, [r6, #34]	; 0x22
      break;
 8007b9e:	e7d3      	b.n	8007b48 <AT_ParseSingleAP+0x2c>
      AP->Security = ParseSecurity(ptr);
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7ff fe0b 	bl	80077bc <ParseSecurity>
 8007ba6:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 8007baa:	e7cd      	b.n	8007b48 <AT_ParseSingleAP+0x2c>
      AP->Channel = ParseNumber(ptr, NULL);
 8007bac:	2100      	movs	r1, #0
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f7ff fd54 	bl	800765c <ParseNumber>
 8007bb4:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
      num = 1;
 8007bb8:	2501      	movs	r5, #1
      break;
 8007bba:	e7c5      	b.n	8007b48 <AT_ParseSingleAP+0x2c>
}
 8007bbc:	b002      	add	sp, #8
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	08026678 	.word	0x08026678

08007bc4 <AT_ParseAP>:
{
 8007bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	460f      	mov	r7, r1
  APs->nbr = 0;
 8007bca:	2400      	movs	r4, #0
 8007bcc:	f881 4370 	strb.w	r4, [r1, #880]	; 0x370
  ptr = strtok_r(pdata + 2, "," ,&saveptr);
 8007bd0:	aa01      	add	r2, sp, #4
 8007bd2:	4935      	ldr	r1, [pc, #212]	; (8007ca8 <AT_ParseAP+0xe4>)
 8007bd4:	3002      	adds	r0, #2
 8007bd6:	f01c faa7 	bl	8024128 <strtok_r>
 8007bda:	4605      	mov	r5, r0
  uint8_t num = 0;
 8007bdc:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 8007bde:	e015      	b.n	8007c0c <AT_ParseAP+0x48>
      ptr[strlen(ptr) - 1] = 0;
 8007be0:	4628      	mov	r0, r5
 8007be2:	f7f8 fb8f 	bl	8000304 <strlen>
 8007be6:	3801      	subs	r0, #1
 8007be8:	2300      	movs	r3, #0
 8007bea:	542b      	strb	r3, [r5, r0]
      strncpy((char *)APs->AP[APs->nbr].SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8007bec:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007bf0:	2221      	movs	r2, #33	; 0x21
 8007bf2:	1c69      	adds	r1, r5, #1
 8007bf4:	202c      	movs	r0, #44	; 0x2c
 8007bf6:	fb00 7003 	mla	r0, r0, r3, r7
 8007bfa:	f01c fa44 	bl	8024086 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8007bfe:	aa01      	add	r2, sp, #4
 8007c00:	4929      	ldr	r1, [pc, #164]	; (8007ca8 <AT_ParseAP+0xe4>)
 8007c02:	2000      	movs	r0, #0
 8007c04:	f01c fa90 	bl	8024128 <strtok_r>
 8007c08:	4605      	mov	r5, r0
 8007c0a:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	d049      	beq.n	8007ca4 <AT_ParseAP+0xe0>
 8007c10:	f897 6370 	ldrb.w	r6, [r7, #880]	; 0x370
 8007c14:	2e13      	cmp	r6, #19
 8007c16:	d845      	bhi.n	8007ca4 <AT_ParseAP+0xe0>
    switch (num++) {
 8007c18:	1c5c      	adds	r4, r3, #1
 8007c1a:	b2e4      	uxtb	r4, r4
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	2b07      	cmp	r3, #7
 8007c20:	d8ed      	bhi.n	8007bfe <AT_ParseAP+0x3a>
 8007c22:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <AT_ParseAP+0x64>)
 8007c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c28:	08007be1 	.word	0x08007be1
 8007c2c:	08007c49 	.word	0x08007c49
 8007c30:	08007c5d 	.word	0x08007c5d
 8007c34:	08007bff 	.word	0x08007bff
 8007c38:	08007bff 	.word	0x08007bff
 8007c3c:	08007c73 	.word	0x08007c73
 8007c40:	08007bff 	.word	0x08007bff
 8007c44:	08007c85 	.word	0x08007c85
      ParseMAC(ptr, APs->AP[APs->nbr].MAC);
 8007c48:	212c      	movs	r1, #44	; 0x2c
 8007c4a:	fb06 f101 	mul.w	r1, r6, r1
 8007c4e:	3120      	adds	r1, #32
 8007c50:	4439      	add	r1, r7
 8007c52:	3104      	adds	r1, #4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f7ff fd27 	bl	80076a8 <ParseMAC>
      break;
 8007c5a:	e7d0      	b.n	8007bfe <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].RSSI = ParseNumber(ptr, NULL);
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f7ff fcfc 	bl	800765c <ParseNumber>
 8007c64:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007c68:	222c      	movs	r2, #44	; 0x2c
 8007c6a:	fb02 7303 	mla	r3, r2, r3, r7
 8007c6e:	8458      	strh	r0, [r3, #34]	; 0x22
      break;
 8007c70:	e7c5      	b.n	8007bfe <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Security = ParseSecurity(ptr);
 8007c72:	4628      	mov	r0, r5
 8007c74:	f7ff fda2 	bl	80077bc <ParseSecurity>
 8007c78:	232c      	movs	r3, #44	; 0x2c
 8007c7a:	fb03 7606 	mla	r6, r3, r6, r7
 8007c7e:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 8007c82:	e7bc      	b.n	8007bfe <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Channel = ParseNumber(ptr, NULL);
 8007c84:	2100      	movs	r1, #0
 8007c86:	4628      	mov	r0, r5
 8007c88:	f7ff fce8 	bl	800765c <ParseNumber>
 8007c8c:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007c90:	222c      	movs	r2, #44	; 0x2c
 8007c92:	fb02 7203 	mla	r2, r2, r3, r7
 8007c96:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
      APs->nbr++;
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
      num = 1;
 8007ca0:	2401      	movs	r4, #1
      break;
 8007ca2:	e7ac      	b.n	8007bfe <AT_ParseAP+0x3a>
}
 8007ca4:	b003      	add	sp, #12
 8007ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca8:	08026678 	.word	0x08026678

08007cac <AT_ParseConnSettings>:
{
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8007cb2:	aa01      	add	r2, sp, #4
 8007cb4:	4942      	ldr	r1, [pc, #264]	; (8007dc0 <AT_ParseConnSettings+0x114>)
 8007cb6:	3002      	adds	r0, #2
 8007cb8:	f01c fa36 	bl	8024128 <strtok_r>
 8007cbc:	4603      	mov	r3, r0
  uint8_t num = 0;
 8007cbe:	2600      	movs	r6, #0
  while (ptr != NULL) {
 8007cc0:	e010      	b.n	8007ce4 <AT_ParseConnSettings+0x38>
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8007cc2:	2221      	movs	r2, #33	; 0x21
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f01c f9dd 	bl	8024086 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8007ccc:	aa01      	add	r2, sp, #4
 8007cce:	493c      	ldr	r1, [pc, #240]	; (8007dc0 <AT_ParseConnSettings+0x114>)
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	f01c fa29 	bl	8024128 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	b118      	cbz	r0, 8007ce2 <AT_ParseConnSettings+0x36>
 8007cda:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8007cde:	2a2c      	cmp	r2, #44	; 0x2c
 8007ce0:	d069      	beq.n	8007db6 <AT_ParseConnSettings+0x10a>
{
 8007ce2:	4626      	mov	r6, r4
  while (ptr != NULL) {
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d069      	beq.n	8007dbc <AT_ParseConnSettings+0x110>
    switch (num++) {
 8007ce8:	1c74      	adds	r4, r6, #1
 8007cea:	b2e4      	uxtb	r4, r4
 8007cec:	2e0b      	cmp	r6, #11
 8007cee:	d8ed      	bhi.n	8007ccc <AT_ParseConnSettings+0x20>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <AT_ParseConnSettings+0x4c>)
 8007cf2:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007cc3 	.word	0x08007cc3
 8007cfc:	08007d29 	.word	0x08007d29
 8007d00:	08007d35 	.word	0x08007d35
 8007d04:	08007d43 	.word	0x08007d43
 8007d08:	08007d51 	.word	0x08007d51
 8007d0c:	08007d5f 	.word	0x08007d5f
 8007d10:	08007d6b 	.word	0x08007d6b
 8007d14:	08007d77 	.word	0x08007d77
 8007d18:	08007d83 	.word	0x08007d83
 8007d1c:	08007d8f 	.word	0x08007d8f
 8007d20:	08007d9b 	.word	0x08007d9b
 8007d24:	08007da9 	.word	0x08007da9
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8007d28:	2221      	movs	r2, #33	; 0x21
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	18a8      	adds	r0, r5, r2
 8007d2e:	f01c f9aa 	bl	8024086 <strncpy>
      break;
 8007d32:	e7cb      	b.n	8007ccc <AT_ParseConnSettings+0x20>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8007d34:	2100      	movs	r1, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff fc90 	bl	800765c <ParseNumber>
 8007d3c:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
        break;
 8007d40:	e7c4      	b.n	8007ccc <AT_ParseConnSettings+0x20>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007d42:	2100      	movs	r1, #0
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff fc89 	bl	800765c <ParseNumber>
 8007d4a:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
      break;
 8007d4e:	e7bd      	b.n	8007ccc <AT_ParseConnSettings+0x20>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8007d50:	2100      	movs	r1, #0
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fc82 	bl	800765c <ParseNumber>
 8007d58:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
      break;
 8007d5c:	e7b6      	b.n	8007ccc <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Addr);
 8007d5e:	f105 0148 	add.w	r1, r5, #72	; 0x48
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff fcbc 	bl	80076e0 <ParseIP>
      break;
 8007d68:	e7b0      	b.n	8007ccc <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Mask);
 8007d6a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff fcb6 	bl	80076e0 <ParseIP>
      break;
 8007d74:	e7aa      	b.n	8007ccc <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8007d76:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff fcb0 	bl	80076e0 <ParseIP>
      break;
 8007d80:	e7a4      	b.n	8007ccc <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS1);
 8007d82:	f105 0154 	add.w	r1, r5, #84	; 0x54
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fcaa 	bl	80076e0 <ParseIP>
      break;
 8007d8c:	e79e      	b.n	8007ccc <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS2);
 8007d8e:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff fca4 	bl	80076e0 <ParseIP>
      break;
 8007d98:	e798      	b.n	8007ccc <AT_ParseConnSettings+0x20>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fc5d 	bl	800765c <ParseNumber>
 8007da2:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
      break;
 8007da6:	e791      	b.n	8007ccc <AT_ParseConnSettings+0x20>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8007da8:	2100      	movs	r1, #0
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff fc56 	bl	800765c <ParseNumber>
 8007db0:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
      break;
 8007db4:	e78a      	b.n	8007ccc <AT_ParseConnSettings+0x20>
      num++;
 8007db6:	1cb4      	adds	r4, r6, #2
 8007db8:	b2e4      	uxtb	r4, r4
 8007dba:	e792      	b.n	8007ce2 <AT_ParseConnSettings+0x36>
}
 8007dbc:	b002      	add	sp, #8
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}
 8007dc0:	08026678 	.word	0x08026678

08007dc4 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8007dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc8:	4604      	mov	r4, r0
 8007dca:	460d      	mov	r5, r1
 8007dcc:	4690      	mov	r8, r2
 8007dce:	461e      	mov	r6, r3
  int len;
  uint8_t *p=Obj->CmdData;
 8007dd0:	f500 7994 	add.w	r9, r0, #296	; 0x128

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007dd4:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8007dd8:	4608      	mov	r0, r1
 8007dda:	f7f8 fa93 	bl	8000304 <strlen>
 8007dde:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007de2:	b281      	uxth	r1, r0
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b8      	blx	r7
 8007de8:	2800      	cmp	r0, #0
 8007dea:	dd48      	ble.n	8007e7e <AT_RequestReceiveData+0xba>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8007dec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8007df0:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007df4:	2100      	movs	r1, #0
 8007df6:	4648      	mov	r0, r9
 8007df8:	4798      	blx	r3
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8007dfa:	f110 0f04 	cmn.w	r0, #4
 8007dfe:	d041      	beq.n	8007e84 <AT_RequestReceiveData+0xc0>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8007e00:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8007e04:	2b0d      	cmp	r3, #13
 8007e06:	d13f      	bne.n	8007e88 <AT_RequestReceiveData+0xc4>
 8007e08:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8007e0c:	2b0a      	cmp	r3, #10
 8007e0e:	d13d      	bne.n	8007e8c <AT_RequestReceiveData+0xc8>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
    }
    len-=2;
 8007e10:	1e85      	subs	r5, r0, #2
    p+=2;
 8007e12:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    if (len >= AT_OK_STRING_LEN)
 8007e16:	2d07      	cmp	r5, #7
 8007e18:	d802      	bhi.n	8007e20 <AT_RequestReceiveData+0x5c>

     *ReadData = 0;
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8007e1a:	2004      	movs	r0, #4
 8007e1c:	e030      	b.n	8007e80 <AT_RequestReceiveData+0xbc>
     while(len && (p[len-1]==0x15)) len--;
 8007e1e:	3d01      	subs	r5, #1
 8007e20:	b125      	cbz	r5, 8007e2c <AT_RequestReceiveData+0x68>
 8007e22:	1963      	adds	r3, r4, r5
 8007e24:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007e28:	2b15      	cmp	r3, #21
 8007e2a:	d0f8      	beq.n	8007e1e <AT_RequestReceiveData+0x5a>
     p[len] = '\0';
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	5563      	strb	r3, [r4, r5]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8007e30:	f1a5 0008 	sub.w	r0, r5, #8
 8007e34:	4916      	ldr	r1, [pc, #88]	; (8007e90 <AT_RequestReceiveData+0xcc>)
 8007e36:	4420      	add	r0, r4
 8007e38:	f01c f938 	bl	80240ac <strstr>
 8007e3c:	b170      	cbz	r0, 8007e5c <AT_RequestReceiveData+0x98>
       *ReadData = len - AT_OK_STRING_LEN;
 8007e3e:	3d08      	subs	r5, #8
 8007e40:	b2ad      	uxth	r5, r5
 8007e42:	9b08      	ldr	r3, [sp, #32]
 8007e44:	801d      	strh	r5, [r3, #0]
	   if (*ReadData > Reqlen)
 8007e46:	42b5      	cmp	r5, r6
 8007e48:	d900      	bls.n	8007e4c <AT_RequestReceiveData+0x88>
         *ReadData = Reqlen;
 8007e4a:	801e      	strh	r6, [r3, #0]
       memcpy(pdata, p, *ReadData);
 8007e4c:	9b08      	ldr	r3, [sp, #32]
 8007e4e:	881a      	ldrh	r2, [r3, #0]
 8007e50:	4621      	mov	r1, r4
 8007e52:	4640      	mov	r0, r8
 8007e54:	f01b fbfe 	bl	8023654 <memcpy>
       return ES_WIFI_STATUS_OK;
 8007e58:	2000      	movs	r0, #0
 8007e5a:	e011      	b.n	8007e80 <AT_RequestReceiveData+0xbc>
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8007e5c:	1f28      	subs	r0, r5, #4
 8007e5e:	2204      	movs	r2, #4
 8007e60:	490c      	ldr	r1, [pc, #48]	; (8007e94 <AT_RequestReceiveData+0xd0>)
 8007e62:	4420      	add	r0, r4
 8007e64:	f01b fbe6 	bl	8023634 <memcmp>
 8007e68:	b920      	cbnz	r0, 8007e74 <AT_RequestReceiveData+0xb0>
       *ReadData = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9a08      	ldr	r2, [sp, #32]
 8007e6e:	8013      	strh	r3, [r2, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007e70:	2005      	movs	r0, #5
 8007e72:	e005      	b.n	8007e80 <AT_RequestReceiveData+0xbc>
     *ReadData = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	9a08      	ldr	r2, [sp, #32]
 8007e78:	8013      	strh	r3, [r2, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007e7a:	2005      	movs	r0, #5
 8007e7c:	e000      	b.n	8007e80 <AT_RequestReceiveData+0xbc>
  return ES_WIFI_STATUS_IO_ERROR;
 8007e7e:	2004      	movs	r0, #4
}
 8007e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return ES_WIFI_STATUS_MODULE_CRASH;
 8007e84:	2006      	movs	r0, #6
 8007e86:	e7fb      	b.n	8007e80 <AT_RequestReceiveData+0xbc>
     return  ES_WIFI_STATUS_IO_ERROR;
 8007e88:	2004      	movs	r0, #4
 8007e8a:	e7f9      	b.n	8007e80 <AT_RequestReceiveData+0xbc>
 8007e8c:	2004      	movs	r0, #4
 8007e8e:	e7f7      	b.n	8007e80 <AT_RequestReceiveData+0xbc>
 8007e90:	08026638 	.word	0x08026638
 8007e94:	0802663c 	.word	0x0802663c

08007e98 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8007e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ea0:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8007ea4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	4798      	blx	r3
 8007eac:	b110      	cbz	r0, 8007eb4 <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8007eae:	2502      	movs	r5, #2
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8007eb4:	f504 7694 	add.w	r6, r4, #296	; 0x128
 8007eb8:	4632      	mov	r2, r6
 8007eba:	4906      	ldr	r1, [pc, #24]	; (8007ed4 <ES_WIFI_Init+0x3c>)
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f7ff fc3d 	bl	800773c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d1f3      	bne.n	8007eb0 <ES_WIFI_Init+0x18>
      AT_ParseInfo (Obj, Obj->CmdData);
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f7ff fdc4 	bl	8007a58 <AT_ParseInfo>
 8007ed0:	e7ee      	b.n	8007eb0 <ES_WIFI_Init+0x18>
 8007ed2:	bf00      	nop
 8007ed4:	08026684 	.word	0x08026684

08007ed8 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8007ed8:	b470      	push	{r4, r5, r6}
 8007eda:	9c03      	ldr	r4, [sp, #12]
 8007edc:	9d04      	ldr	r5, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8007ede:	2900      	cmp	r1, #0
 8007ee0:	bf18      	it	ne
 8007ee2:	2800      	cmpne	r0, #0
 8007ee4:	d013      	beq.n	8007f0e <ES_WIFI_RegisterBusIO+0x36>
 8007ee6:	460e      	mov	r6, r1
 8007ee8:	fab4 f184 	clz	r1, r4
 8007eec:	0949      	lsrs	r1, r1, #5
 8007eee:	b182      	cbz	r2, 8007f12 <ES_WIFI_RegisterBusIO+0x3a>
 8007ef0:	b979      	cbnz	r1, 8007f12 <ES_WIFI_RegisterBusIO+0x3a>
 8007ef2:	b185      	cbz	r5, 8007f16 <ES_WIFI_RegisterBusIO+0x3e>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 8007ef4:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8007ef8:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8007efc:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8007f00:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8007f04:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8007f08:	2000      	movs	r0, #0
}
 8007f0a:	bc70      	pop	{r4, r5, r6}
 8007f0c:	4770      	bx	lr
    return ES_WIFI_STATUS_ERROR;
 8007f0e:	2002      	movs	r0, #2
 8007f10:	e7fb      	b.n	8007f0a <ES_WIFI_RegisterBusIO+0x32>
 8007f12:	2002      	movs	r0, #2
 8007f14:	e7f9      	b.n	8007f0a <ES_WIFI_RegisterBusIO+0x32>
 8007f16:	2002      	movs	r0, #2
 8007f18:	e7f7      	b.n	8007f0a <ES_WIFI_RegisterBusIO+0x32>
	...

08007f1c <ES_WIFI_ListAccessPoints>:
  * @param  Obj: pointer to module handle
  * @param  APs: pointer Access points structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_ListAccessPoints(ES_WIFIObject_t *Obj, ES_WIFI_APs_t *APs)
{
 8007f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	4606      	mov	r6, r0
 8007f22:	460f      	mov	r7, r1
  ES_WIFI_Status_t ret;
  int send_len;
  int16_t recv_len = 0;
  uint8_t version[4] = { 0 };
 8007f24:	2300      	movs	r3, #0
 8007f26:	9301      	str	r3, [sp, #4]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, (char*)Obj->FW_Rev);
 8007f28:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8007f2c:	f100 0120 	add.w	r1, r0, #32
 8007f30:	4620      	mov	r0, r4
 8007f32:	f01c f831 	bl	8023f98 <siprintf>

  AT_ParseFWRev((char*)Obj->CmdData, version);
 8007f36:	a901      	add	r1, sp, #4
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f7ff fcc9 	bl	80078d0 <AT_ParseFWRev>

  if (ArrayTo32bit(version) >= UPDATED_SCAN_PARAMETERS_FW_REV)
 8007f3e:	a801      	add	r0, sp, #4
 8007f40:	f7ff fbea 	bl	8007718 <ArrayTo32bit>
 8007f44:	4b36      	ldr	r3, [pc, #216]	; (8008020 <ES_WIFI_ListAccessPoints+0x104>)
 8007f46:	4298      	cmp	r0, r3
 8007f48:	d958      	bls.n	8007ffc <ES_WIFI_ListAccessPoints+0xe0>
  {
    APs->nbr = 0;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370

    sprintf((char*)Obj->CmdData,"F0=2\r");
 8007f50:	4b34      	ldr	r3, [pc, #208]	; (8008024 <ES_WIFI_ListAccessPoints+0x108>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	f8c6 0128 	str.w	r0, [r6, #296]	; 0x128
 8007f58:	889b      	ldrh	r3, [r3, #4]
 8007f5a:	80a3      	strh	r3, [r4, #4]

    send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8007f5c:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8007f60:	4620      	mov	r0, r4
 8007f62:	f7f8 f9cf 	bl	8000304 <strlen>
 8007f66:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8007f6a:	b281      	uxth	r1, r0
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	47a8      	blx	r5

    if (send_len == 5)
 8007f70:	2805      	cmp	r0, #5
 8007f72:	d019      	beq.n	8007fa8 <ES_WIFI_ListAccessPoints+0x8c>
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
	  } while (send_len == 3);
    }

    UNLOCK_WIFI();
    return ES_WIFI_STATUS_IO_ERROR;
 8007f74:	2504      	movs	r5, #4
      AT_ParseAP((char *)Obj->CmdData, APs);
    }
    UNLOCK_WIFI();
    return ret;
  }
}
 8007f76:	4628      	mov	r0, r5
 8007f78:	b003      	add	sp, #12
 8007f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8007f7c:	f115 0f04 	cmn.w	r5, #4
 8007f80:	d04b      	beq.n	800801a <ES_WIFI_ListAccessPoints+0xfe>
        if (APs->nbr < ES_WIFI_MAX_DETECTED_AP)
 8007f82:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007f86:	2b13      	cmp	r3, #19
 8007f88:	d92c      	bls.n	8007fe4 <ES_WIFI_ListAccessPoints+0xc8>
        sprintf((char*)Obj->CmdData,"MR\r");
 8007f8a:	4b27      	ldr	r3, [pc, #156]	; (8008028 <ES_WIFI_ListAccessPoints+0x10c>)
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	6020      	str	r0, [r4, #0]
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8007f90:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8007f94:	4620      	mov	r0, r4
 8007f96:	f7f8 f9b5 	bl	8000304 <strlen>
 8007f9a:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8007f9e:	b281      	uxth	r1, r0
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	47a8      	blx	r5
	  } while (send_len == 3);
 8007fa4:	2803      	cmp	r0, #3
 8007fa6:	d1e5      	bne.n	8007f74 <ES_WIFI_ListAccessPoints+0x58>
	    recv_len = Obj->fops.IO_Receive(Obj->CmdData, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007fa8:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 8007fac:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8007fb0:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	4798      	blx	r3
 8007fb8:	4605      	mov	r5, r0
        if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8007fba:	1e43      	subs	r3, r0, #1
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f240 5276 	movw	r2, #1398	; 0x576
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d8da      	bhi.n	8007f7c <ES_WIFI_ListAccessPoints+0x60>
          *(Obj->CmdData + recv_len) = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	5423      	strb	r3, [r4, r0]
	      if(strstr((char *)Obj->CmdData, AT_OK_STRING))
 8007fca:	4918      	ldr	r1, [pc, #96]	; (800802c <ES_WIFI_ListAccessPoints+0x110>)
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f01c f86d 	bl	80240ac <strstr>
 8007fd2:	bb00      	cbnz	r0, 8008016 <ES_WIFI_ListAccessPoints+0xfa>
	      else if(strstr((char *)Obj->CmdData, AT_ERROR_STRING))
 8007fd4:	4916      	ldr	r1, [pc, #88]	; (8008030 <ES_WIFI_ListAccessPoints+0x114>)
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f01c f868 	bl	80240ac <strstr>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d0cd      	beq.n	8007f7c <ES_WIFI_ListAccessPoints+0x60>
            return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007fe0:	2505      	movs	r5, #5
 8007fe2:	e7c8      	b.n	8007f76 <ES_WIFI_ListAccessPoints+0x5a>
          AT_ParseSingleAP((char *)Obj->CmdData, &(APs->AP[APs->nbr]));
 8007fe4:	212c      	movs	r1, #44	; 0x2c
 8007fe6:	fb01 7103 	mla	r1, r1, r3, r7
 8007fea:	4620      	mov	r0, r4
 8007fec:	f7ff fd96 	bl	8007b1c <AT_ParseSingleAP>
          APs->nbr++;
 8007ff0:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
 8007ffa:	e7c6      	b.n	8007f8a <ES_WIFI_ListAccessPoints+0x6e>
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"F0\r", Obj->CmdData);
 8007ffc:	4622      	mov	r2, r4
 8007ffe:	490d      	ldr	r1, [pc, #52]	; (8008034 <ES_WIFI_ListAccessPoints+0x118>)
 8008000:	4630      	mov	r0, r6
 8008002:	f7ff fb9b 	bl	800773c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8008006:	4605      	mov	r5, r0
 8008008:	2800      	cmp	r0, #0
 800800a:	d1b4      	bne.n	8007f76 <ES_WIFI_ListAccessPoints+0x5a>
      AT_ParseAP((char *)Obj->CmdData, APs);
 800800c:	4639      	mov	r1, r7
 800800e:	4620      	mov	r0, r4
 8008010:	f7ff fdd8 	bl	8007bc4 <AT_ParseAP>
    return ret;
 8008014:	e7af      	b.n	8007f76 <ES_WIFI_ListAccessPoints+0x5a>
		    return ES_WIFI_STATUS_OK;
 8008016:	2500      	movs	r5, #0
 8008018:	e7ad      	b.n	8007f76 <ES_WIFI_ListAccessPoints+0x5a>
	      return ES_WIFI_STATUS_MODULE_CRASH;
 800801a:	2506      	movs	r5, #6
 800801c:	e7ab      	b.n	8007f76 <ES_WIFI_ListAccessPoints+0x5a>
 800801e:	bf00      	nop
 8008020:	03050204 	.word	0x03050204
 8008024:	0802668c 	.word	0x0802668c
 8008028:	08026694 	.word	0x08026694
 800802c:	08026638 	.word	0x08026638
 8008030:	08026644 	.word	0x08026644
 8008034:	08026698 	.word	0x08026698

08008038 <ES_WIFI_Connect>:
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8008038:	2a00      	cmp	r2, #0
 800803a:	bf18      	it	ne
 800803c:	2900      	cmpne	r1, #0
 800803e:	d101      	bne.n	8008044 <ES_WIFI_Connect+0xc>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8008040:	2002      	movs	r0, #2
    }

    UNLOCK_WIFI();
  }
  return ret;
}
 8008042:	4770      	bx	lr
{
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	4604      	mov	r4, r0
 8008048:	461e      	mov	r6, r3
 800804a:	4617      	mov	r7, r2
    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800804c:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008050:	460a      	mov	r2, r1
 8008052:	491a      	ldr	r1, [pc, #104]	; (80080bc <ES_WIFI_Connect+0x84>)
 8008054:	4628      	mov	r0, r5
 8008056:	f01b ff9f 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800805a:	462a      	mov	r2, r5
 800805c:	4629      	mov	r1, r5
 800805e:	4620      	mov	r0, r4
 8008060:	f7ff fb6c 	bl	800773c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8008064:	b100      	cbz	r0, 8008068 <ES_WIFI_Connect+0x30>
}
 8008066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8008068:	463a      	mov	r2, r7
 800806a:	4915      	ldr	r1, [pc, #84]	; (80080c0 <ES_WIFI_Connect+0x88>)
 800806c:	4628      	mov	r0, r5
 800806e:	f01b ff93 	bl	8023f98 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008072:	462a      	mov	r2, r5
 8008074:	4629      	mov	r1, r5
 8008076:	4620      	mov	r0, r4
 8008078:	f7ff fb60 	bl	800773c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 800807c:	2800      	cmp	r0, #0
 800807e:	d1f2      	bne.n	8008066 <ES_WIFI_Connect+0x2e>
        Obj->Security = SecType;
 8008080:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8008084:	4632      	mov	r2, r6
 8008086:	490f      	ldr	r1, [pc, #60]	; (80080c4 <ES_WIFI_Connect+0x8c>)
 8008088:	4628      	mov	r0, r5
 800808a:	f01b ff85 	bl	8023f98 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800808e:	462a      	mov	r2, r5
 8008090:	4629      	mov	r1, r5
 8008092:	4620      	mov	r0, r4
 8008094:	f7ff fb52 	bl	800773c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8008098:	2800      	cmp	r0, #0
 800809a:	d1e4      	bne.n	8008066 <ES_WIFI_Connect+0x2e>
          sprintf((char*)Obj->CmdData,"C0\r");
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <ES_WIFI_Connect+0x90>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080a4:	462a      	mov	r2, r5
 80080a6:	4629      	mov	r1, r5
 80080a8:	4620      	mov	r0, r4
 80080aa:	f7ff fb47 	bl	800773c <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d1d9      	bne.n	8008066 <ES_WIFI_Connect+0x2e>
            Obj->NetSettings.IsConnected = 1;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
 80080b8:	e7d5      	b.n	8008066 <ES_WIFI_Connect+0x2e>
 80080ba:	bf00      	nop
 80080bc:	0802669c 	.word	0x0802669c
 80080c0:	080266a4 	.word	0x080266a4
 80080c4:	080266ac 	.word	0x080266ac
 80080c8:	080266b4 	.word	0x080266b4

080080cc <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 80080d0:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80080d4:	4b09      	ldr	r3, [pc, #36]	; (80080fc <ES_WIFI_IsConnected+0x30>)
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080dc:	462a      	mov	r2, r5
 80080de:	4629      	mov	r1, r5
 80080e0:	4620      	mov	r0, r4
 80080e2:	f7ff fb2b 	bl	800773c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80080e6:	b110      	cbz	r0, 80080ee <ES_WIFI_IsConnected+0x22>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 80080e8:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 80080ec:	bd38      	pop	{r3, r4, r5, pc}
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 80080ee:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
 80080f2:	4628      	mov	r0, r5
 80080f4:	f7ff fb1b 	bl	800772e <AT_ParseIsConnected>
 80080f8:	e7f6      	b.n	80080e8 <ES_WIFI_IsConnected+0x1c>
 80080fa:	bf00      	nop
 80080fc:	080266b8 	.word	0x080266b8

08008100 <ES_WIFI_Disconnect>:
  * @brief  Disconnect from a network.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Disconnect(ES_WIFIObject_t *Obj)
{
 8008100:	b508      	push	{r3, lr}
 8008102:	4603      	mov	r3, r0
   ES_WIFI_Status_t ret;
   LOCK_WIFI();
   sprintf((char*)Obj->CmdData,"CD\r");
 8008104:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8008108:	4a04      	ldr	r2, [pc, #16]	; (800811c <ES_WIFI_Disconnect+0x1c>)
 800810a:	6810      	ldr	r0, [r2, #0]
 800810c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
   ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008110:	460a      	mov	r2, r1
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff fb12 	bl	800773c <AT_ExecuteCommand>
   UNLOCK_WIFI();
   return  ret;
}
 8008118:	bd08      	pop	{r3, pc}
 800811a:	bf00      	nop
 800811c:	080266bc 	.word	0x080266bc

08008120 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8008120:	b570      	push	{r4, r5, r6, lr}
 8008122:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8008124:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008128:	4b09      	ldr	r3, [pc, #36]	; (8008150 <ES_WIFI_GetNetworkSettings+0x30>)
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008130:	462a      	mov	r2, r5
 8008132:	4629      	mov	r1, r5
 8008134:	4620      	mov	r0, r4
 8008136:	f7ff fb01 	bl	800773c <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 800813a:	4606      	mov	r6, r0
 800813c:	b108      	cbz	r0, 8008142 <ES_WIFI_GetNetworkSettings+0x22>
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
  }

  UNLOCK_WIFI();
  return ret;
}
 800813e:	4630      	mov	r0, r6
 8008140:	bd70      	pop	{r4, r5, r6, pc}
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8008142:	f104 018d 	add.w	r1, r4, #141	; 0x8d
 8008146:	4628      	mov	r0, r5
 8008148:	f7ff fdb0 	bl	8007cac <AT_ParseConnSettings>
 800814c:	e7f7      	b.n	800813e <ES_WIFI_GetNetworkSettings+0x1e>
 800814e:	bf00      	nop
 8008150:	080266c0 	.word	0x080266c0

08008154 <ES_WIFI_ActivateAP>:
  * @param  ip : AP IP address
  * @param  mac : AP MAC address
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ActivateAP(ES_WIFIObject_t *Obj, ES_WIFI_APConfig_t *ApConfig)
{
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	4604      	mov	r4, r0
 8008158:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"AS=0,%s\r", ApConfig->SSID);
 800815a:	f500 7594 	add.w	r5, r0, #296	; 0x128
 800815e:	460a      	mov	r2, r1
 8008160:	492b      	ldr	r1, [pc, #172]	; (8008210 <ES_WIFI_ActivateAP+0xbc>)
 8008162:	4628      	mov	r0, r5
 8008164:	f01b ff18 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008168:	462a      	mov	r2, r5
 800816a:	4629      	mov	r1, r5
 800816c:	4620      	mov	r0, r4
 800816e:	f7ff fae5 	bl	800773c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008172:	4607      	mov	r7, r0
 8008174:	b108      	cbz	r0, 800817a <ES_WIFI_ActivateAP+0x26>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8008176:	4638      	mov	r0, r7
 8008178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sprintf((char*)Obj->CmdData,"A1=%c\r", (int)ApConfig->Security + '0');
 800817a:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
 800817e:	3230      	adds	r2, #48	; 0x30
 8008180:	4924      	ldr	r1, [pc, #144]	; (8008214 <ES_WIFI_ActivateAP+0xc0>)
 8008182:	4628      	mov	r0, r5
 8008184:	f01b ff08 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008188:	462a      	mov	r2, r5
 800818a:	4629      	mov	r1, r5
 800818c:	4620      	mov	r0, r4
 800818e:	f7ff fad5 	bl	800773c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8008192:	4607      	mov	r7, r0
 8008194:	2800      	cmp	r0, #0
 8008196:	d1ee      	bne.n	8008176 <ES_WIFI_ActivateAP+0x22>
      sprintf((char*)Obj->CmdData,"A2=%s\r", ApConfig->Pass);
 8008198:	f106 0221 	add.w	r2, r6, #33	; 0x21
 800819c:	491e      	ldr	r1, [pc, #120]	; (8008218 <ES_WIFI_ActivateAP+0xc4>)
 800819e:	4628      	mov	r0, r5
 80081a0:	f01b fefa 	bl	8023f98 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081a4:	462a      	mov	r2, r5
 80081a6:	4629      	mov	r1, r5
 80081a8:	4620      	mov	r0, r4
 80081aa:	f7ff fac7 	bl	800773c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80081ae:	4607      	mov	r7, r0
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d1e0      	bne.n	8008176 <ES_WIFI_ActivateAP+0x22>
        sprintf((char*)Obj->CmdData,"AC=%d\r", ApConfig->Channel);
 80081b4:	f896 2043 	ldrb.w	r2, [r6, #67]	; 0x43
 80081b8:	4918      	ldr	r1, [pc, #96]	; (800821c <ES_WIFI_ActivateAP+0xc8>)
 80081ba:	4628      	mov	r0, r5
 80081bc:	f01b feec 	bl	8023f98 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081c0:	462a      	mov	r2, r5
 80081c2:	4629      	mov	r1, r5
 80081c4:	4620      	mov	r0, r4
 80081c6:	f7ff fab9 	bl	800773c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80081ca:	4607      	mov	r7, r0
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d1d2      	bne.n	8008176 <ES_WIFI_ActivateAP+0x22>
          sprintf((char*)Obj->CmdData,"AT=%d\r", ApConfig->MaxConnections);
 80081d0:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 80081d4:	4912      	ldr	r1, [pc, #72]	; (8008220 <ES_WIFI_ActivateAP+0xcc>)
 80081d6:	4628      	mov	r0, r5
 80081d8:	f01b fede 	bl	8023f98 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081dc:	462a      	mov	r2, r5
 80081de:	4629      	mov	r1, r5
 80081e0:	4620      	mov	r0, r4
 80081e2:	f7ff faab 	bl	800773c <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 80081e6:	4607      	mov	r7, r0
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d1c4      	bne.n	8008176 <ES_WIFI_ActivateAP+0x22>
            sprintf((char*)Obj->CmdData,"A0\r");
 80081ec:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <ES_WIFI_ActivateAP+0xd0>)
 80081ee:	6818      	ldr	r0, [r3, #0]
 80081f0:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081f4:	462a      	mov	r2, r5
 80081f6:	4629      	mov	r1, r5
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7ff fa9f 	bl	800773c <AT_ExecuteCommand>
            if(ret == ES_WIFI_STATUS_OK)
 80081fe:	4607      	mov	r7, r0
 8008200:	2800      	cmp	r0, #0
 8008202:	d1b8      	bne.n	8008176 <ES_WIFI_ActivateAP+0x22>
              if(strstr((char *)Obj->CmdData, "[AP     ]"))
 8008204:	4908      	ldr	r1, [pc, #32]	; (8008228 <ES_WIFI_ActivateAP+0xd4>)
 8008206:	4628      	mov	r0, r5
 8008208:	f01b ff50 	bl	80240ac <strstr>
 800820c:	e7b3      	b.n	8008176 <ES_WIFI_ActivateAP+0x22>
 800820e:	bf00      	nop
 8008210:	080266c4 	.word	0x080266c4
 8008214:	080266d0 	.word	0x080266d0
 8008218:	080266d8 	.word	0x080266d8
 800821c:	080266e0 	.word	0x080266e0
 8008220:	080266e8 	.word	0x080266e8
 8008224:	080266f0 	.word	0x080266f0
 8008228:	080266f4 	.word	0x080266f4

0800822c <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	4604      	mov	r4, r0
 8008232:	460d      	mov	r5, r1
  ES_WIFI_Status_t ret ;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8008234:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8008238:	4b0b      	ldr	r3, [pc, #44]	; (8008268 <ES_WIFI_GetMACAddress+0x3c>)
 800823a:	6818      	ldr	r0, [r3, #0]
 800823c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008240:	460a      	mov	r2, r1
 8008242:	4620      	mov	r0, r4
 8008244:	f7ff fa7a 	bl	800773c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008248:	4606      	mov	r6, r0
 800824a:	b110      	cbz	r0, 8008252 <ES_WIFI_GetMACAddress+0x26>
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
    ParseMAC(ptr, mac) ;
  }
  UNLOCK_WIFI();
  return ret;
}
 800824c:	4630      	mov	r0, r6
 800824e:	b002      	add	sp, #8
 8008250:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
 8008252:	aa01      	add	r2, sp, #4
 8008254:	4905      	ldr	r1, [pc, #20]	; (800826c <ES_WIFI_GetMACAddress+0x40>)
 8008256:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 800825a:	f01b ff65 	bl	8024128 <strtok_r>
    ParseMAC(ptr, mac) ;
 800825e:	4629      	mov	r1, r5
 8008260:	f7ff fa22 	bl	80076a8 <ParseMAC>
 8008264:	e7f2      	b.n	800824c <ES_WIFI_GetMACAddress+0x20>
 8008266:	bf00      	nop
 8008268:	08026700 	.word	0x08026700
 800826c:	08026704 	.word	0x08026704

08008270 <ES_WIFI_Ping>:
  * @param  Obj: pointer to module handle
  * @param  Ping: ping structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Ping(ES_WIFIObject_t *Obj, uint8_t *address, uint16_t count, uint16_t interval_ms, int32_t result[])
{
 8008270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	4605      	mov	r5, r0
 8008278:	460c      	mov	r4, r1
 800827a:	4617      	mov	r7, r2
 800827c:	4698      	mov	r8, r3
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  memset(result,-1,sizeof(int)*count);
 800827e:	0092      	lsls	r2, r2, #2
 8008280:	f04f 31ff 	mov.w	r1, #4294967295
 8008284:	9808      	ldr	r0, [sp, #32]
 8008286:	f01b f9f3 	bl	8023670 <memset>
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 800828a:	f505 7694 	add.w	r6, r5, #296	; 0x128
          address[2],address[3]);
 800828e:	78a3      	ldrb	r3, [r4, #2]
 8008290:	78e2      	ldrb	r2, [r4, #3]
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 8008292:	9201      	str	r2, [sp, #4]
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	7863      	ldrb	r3, [r4, #1]
 8008298:	7822      	ldrb	r2, [r4, #0]
 800829a:	491f      	ldr	r1, [pc, #124]	; (8008318 <ES_WIFI_Ping+0xa8>)
 800829c:	4630      	mov	r0, r6
 800829e:	f01b fe7b 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082a2:	4632      	mov	r2, r6
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	f7ff fa48 	bl	800773c <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 80082ac:	4604      	mov	r4, r0
 80082ae:	b118      	cbz	r0, 80082b8 <ES_WIFI_Ping+0x48>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80082b0:	4620      	mov	r0, r4
 80082b2:	b002      	add	sp, #8
 80082b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"T2=%d\r", count);
 80082b8:	463a      	mov	r2, r7
 80082ba:	4918      	ldr	r1, [pc, #96]	; (800831c <ES_WIFI_Ping+0xac>)
 80082bc:	4630      	mov	r0, r6
 80082be:	f01b fe6b 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082c2:	4632      	mov	r2, r6
 80082c4:	4631      	mov	r1, r6
 80082c6:	4628      	mov	r0, r5
 80082c8:	f7ff fa38 	bl	800773c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80082cc:	4604      	mov	r4, r0
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d1ee      	bne.n	80082b0 <ES_WIFI_Ping+0x40>
      sprintf((char*)Obj->CmdData,"T3=%d\r", interval_ms);
 80082d2:	4642      	mov	r2, r8
 80082d4:	4912      	ldr	r1, [pc, #72]	; (8008320 <ES_WIFI_Ping+0xb0>)
 80082d6:	4630      	mov	r0, r6
 80082d8:	f01b fe5e 	bl	8023f98 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082dc:	4632      	mov	r2, r6
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	f7ff fa2b 	bl	800773c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80082e6:	4604      	mov	r4, r0
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d1e1      	bne.n	80082b0 <ES_WIFI_Ping+0x40>
        sprintf((char*)Obj->CmdData,"T0=\r");
 80082ec:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <ES_WIFI_Ping+0xb4>)
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80082f4:	791b      	ldrb	r3, [r3, #4]
 80082f6:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082fa:	4632      	mov	r2, r6
 80082fc:	4631      	mov	r1, r6
 80082fe:	4628      	mov	r0, r5
 8008300:	f7ff fa1c 	bl	800773c <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8008304:	4604      	mov	r4, r0
 8008306:	2800      	cmp	r0, #0
 8008308:	d1d2      	bne.n	80082b0 <ES_WIFI_Ping+0x40>
         AT_ParsePing(result,count,(char*)Obj->CmdData);
 800830a:	4632      	mov	r2, r6
 800830c:	4639      	mov	r1, r7
 800830e:	9808      	ldr	r0, [sp, #32]
 8008310:	f7ff fb02 	bl	8007918 <AT_ParsePing>
 8008314:	e7cc      	b.n	80082b0 <ES_WIFI_Ping+0x40>
 8008316:	bf00      	nop
 8008318:	08026708 	.word	0x08026708
 800831c:	08026718 	.word	0x08026718
 8008320:	08026720 	.word	0x08026720
 8008324:	08026728 	.word	0x08026728

08008328 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	4604      	mov	r4, r0
 800832e:	4616      	mov	r6, r2
  ES_WIFI_Status_t ret;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8008330:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008334:	460a      	mov	r2, r1
 8008336:	490c      	ldr	r1, [pc, #48]	; (8008368 <ES_WIFI_DNS_LookUp+0x40>)
 8008338:	4628      	mov	r0, r5
 800833a:	f01b fe2d 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800833e:	462a      	mov	r2, r5
 8008340:	4629      	mov	r1, r5
 8008342:	4620      	mov	r0, r4
 8008344:	f7ff f9fa 	bl	800773c <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8008348:	4605      	mov	r5, r0
 800834a:	b110      	cbz	r0, 8008352 <ES_WIFI_DNS_LookUp+0x2a>
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
    ParseIP(ptr, ipaddress);
  }
  UNLOCK_WIFI();
  return ret;
}
 800834c:	4628      	mov	r0, r5
 800834e:	b002      	add	sp, #8
 8008350:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
 8008352:	aa01      	add	r2, sp, #4
 8008354:	4905      	ldr	r1, [pc, #20]	; (800836c <ES_WIFI_DNS_LookUp+0x44>)
 8008356:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 800835a:	f01b fee5 	bl	8024128 <strtok_r>
    ParseIP(ptr, ipaddress);
 800835e:	4631      	mov	r1, r6
 8008360:	f7ff f9be 	bl	80076e0 <ParseIP>
 8008364:	e7f2      	b.n	800834c <ES_WIFI_DNS_LookUp+0x24>
 8008366:	bf00      	nop
 8008368:	08026730 	.word	0x08026730
 800836c:	080267f0 	.word	0x080267f0

08008370 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	4605      	mov	r5, r0
 8008376:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8008378:	780b      	ldrb	r3, [r1, #0]
 800837a:	2b03      	cmp	r3, #3
 800837c:	bf18      	it	ne
 800837e:	2b00      	cmpne	r3, #0
 8008380:	d102      	bne.n	8008388 <ES_WIFI_StartClientConnection+0x18>
 8008382:	888b      	ldrh	r3, [r1, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d079      	beq.n	800847c <ES_WIFI_StartClientConnection+0x10c>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008388:	f505 7494 	add.w	r4, r5, #296	; 0x128
 800838c:	78b2      	ldrb	r2, [r6, #2]
 800838e:	493c      	ldr	r1, [pc, #240]	; (8008480 <ES_WIFI_StartClientConnection+0x110>)
 8008390:	4620      	mov	r0, r4
 8008392:	f01b fe01 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008396:	4622      	mov	r2, r4
 8008398:	4621      	mov	r1, r4
 800839a:	4628      	mov	r0, r5
 800839c:	f7ff f9ce 	bl	800773c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80083a0:	b1c0      	cbz	r0, 80083d4 <ES_WIFI_StartClientConnection+0x64>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 80083a2:	b310      	cbz	r0, 80083ea <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80083a4:	b920      	cbnz	r0, 80083b0 <ES_WIFI_StartClientConnection+0x40>
 80083a6:	7833      	ldrb	r3, [r6, #0]
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	bf18      	it	ne
 80083ac:	2b00      	cmpne	r3, #0
 80083ae:	d027      	beq.n	8008400 <ES_WIFI_StartClientConnection+0x90>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80083b0:	b920      	cbnz	r0, 80083bc <ES_WIFI_StartClientConnection+0x4c>
 80083b2:	7833      	ldrb	r3, [r6, #0]
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	bf18      	it	ne
 80083b8:	2b00      	cmpne	r3, #0
 80083ba:	d02c      	beq.n	8008416 <ES_WIFI_StartClientConnection+0xa6>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80083bc:	b910      	cbnz	r0, 80083c4 <ES_WIFI_StartClientConnection+0x54>
 80083be:	7833      	ldrb	r3, [r6, #0]
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d038      	beq.n	8008436 <ES_WIFI_StartClientConnection+0xc6>
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80083c4:	b910      	cbnz	r0, 80083cc <ES_WIFI_StartClientConnection+0x5c>
 80083c6:	7833      	ldrb	r3, [r6, #0]
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d03f      	beq.n	800844c <ES_WIFI_StartClientConnection+0xdc>
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d049      	beq.n	8008464 <ES_WIFI_StartClientConnection+0xf4>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 80083d0:	b002      	add	sp, #8
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80083d4:	7832      	ldrb	r2, [r6, #0]
 80083d6:	492b      	ldr	r1, [pc, #172]	; (8008484 <ES_WIFI_StartClientConnection+0x114>)
 80083d8:	4620      	mov	r0, r4
 80083da:	f01b fddd 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083de:	4622      	mov	r2, r4
 80083e0:	4621      	mov	r1, r4
 80083e2:	4628      	mov	r0, r5
 80083e4:	f7ff f9aa 	bl	800773c <AT_ExecuteCommand>
 80083e8:	e7db      	b.n	80083a2 <ES_WIFI_StartClientConnection+0x32>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80083ea:	88f2      	ldrh	r2, [r6, #6]
 80083ec:	4926      	ldr	r1, [pc, #152]	; (8008488 <ES_WIFI_StartClientConnection+0x118>)
 80083ee:	4620      	mov	r0, r4
 80083f0:	f01b fdd2 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083f4:	4622      	mov	r2, r4
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	f7ff f99f 	bl	800773c <AT_ExecuteCommand>
 80083fe:	e7d1      	b.n	80083a4 <ES_WIFI_StartClientConnection+0x34>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8008400:	88b2      	ldrh	r2, [r6, #4]
 8008402:	4922      	ldr	r1, [pc, #136]	; (800848c <ES_WIFI_StartClientConnection+0x11c>)
 8008404:	4620      	mov	r0, r4
 8008406:	f01b fdc7 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800840a:	4622      	mov	r2, r4
 800840c:	4621      	mov	r1, r4
 800840e:	4628      	mov	r0, r5
 8008410:	f7ff f994 	bl	800773c <AT_ExecuteCommand>
 8008414:	e7cc      	b.n	80083b0 <ES_WIFI_StartClientConnection+0x40>
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8008416:	7ab3      	ldrb	r3, [r6, #10]
 8008418:	7af2      	ldrb	r2, [r6, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800841a:	9201      	str	r2, [sp, #4]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	7a73      	ldrb	r3, [r6, #9]
 8008420:	7a32      	ldrb	r2, [r6, #8]
 8008422:	491b      	ldr	r1, [pc, #108]	; (8008490 <ES_WIFI_StartClientConnection+0x120>)
 8008424:	4620      	mov	r0, r4
 8008426:	f01b fdb7 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800842a:	4622      	mov	r2, r4
 800842c:	4621      	mov	r1, r4
 800842e:	4628      	mov	r0, r5
 8008430:	f7ff f984 	bl	800773c <AT_ExecuteCommand>
 8008434:	e7c2      	b.n	80083bc <ES_WIFI_StartClientConnection+0x4c>
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 8008436:	7872      	ldrb	r2, [r6, #1]
 8008438:	4916      	ldr	r1, [pc, #88]	; (8008494 <ES_WIFI_StartClientConnection+0x124>)
 800843a:	4620      	mov	r0, r4
 800843c:	f01b fdac 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008440:	4622      	mov	r2, r4
 8008442:	4621      	mov	r1, r4
 8008444:	4628      	mov	r0, r5
 8008446:	f7ff f979 	bl	800773c <AT_ExecuteCommand>
 800844a:	e7bb      	b.n	80083c4 <ES_WIFI_StartClientConnection+0x54>
    sprintf((char*)Obj->CmdData,"PB=0\r");
 800844c:	4b12      	ldr	r3, [pc, #72]	; (8008498 <ES_WIFI_StartClientConnection+0x128>)
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8008454:	889b      	ldrh	r3, [r3, #4]
 8008456:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008458:	4622      	mov	r2, r4
 800845a:	4621      	mov	r1, r4
 800845c:	4628      	mov	r0, r5
 800845e:	f7ff f96d 	bl	800773c <AT_ExecuteCommand>
 8008462:	e7b3      	b.n	80083cc <ES_WIFI_StartClientConnection+0x5c>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8008464:	4b0d      	ldr	r3, [pc, #52]	; (800849c <ES_WIFI_StartClientConnection+0x12c>)
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 800846c:	889b      	ldrh	r3, [r3, #4]
 800846e:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008470:	4622      	mov	r2, r4
 8008472:	4621      	mov	r1, r4
 8008474:	4628      	mov	r0, r5
 8008476:	f7ff f961 	bl	800773c <AT_ExecuteCommand>
 800847a:	e7a9      	b.n	80083d0 <ES_WIFI_StartClientConnection+0x60>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800847c:	2002      	movs	r0, #2
 800847e:	e7a7      	b.n	80083d0 <ES_WIFI_StartClientConnection+0x60>
 8008480:	08026738 	.word	0x08026738
 8008484:	08026740 	.word	0x08026740
 8008488:	08026748 	.word	0x08026748
 800848c:	08026750 	.word	0x08026750
 8008490:	08026758 	.word	0x08026758
 8008494:	08026768 	.word	0x08026768
 8008498:	08026770 	.word	0x08026770
 800849c:	08026778 	.word	0x08026778

080084a0 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80084a4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80084a8:	788a      	ldrb	r2, [r1, #2]
 80084aa:	490c      	ldr	r1, [pc, #48]	; (80084dc <ES_WIFI_StopClientConnection+0x3c>)
 80084ac:	4628      	mov	r0, r5
 80084ae:	f01b fd73 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084b2:	462a      	mov	r2, r5
 80084b4:	4629      	mov	r1, r5
 80084b6:	4620      	mov	r0, r4
 80084b8:	f7ff f940 	bl	800773c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80084bc:	b100      	cbz	r0, 80084c0 <ES_WIFI_StopClientConnection+0x20>
    sprintf((char*)Obj->CmdData,"P6=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  UNLOCK_WIFI();
  return ret;
}
 80084be:	bd38      	pop	{r3, r4, r5, pc}
    sprintf((char*)Obj->CmdData,"P6=0\r");
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <ES_WIFI_StopClientConnection+0x40>)
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 80084c8:	889b      	ldrh	r3, [r3, #4]
 80084ca:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084ce:	462a      	mov	r2, r5
 80084d0:	4629      	mov	r1, r5
 80084d2:	4620      	mov	r0, r4
 80084d4:	f7ff f932 	bl	800773c <AT_ExecuteCommand>
 80084d8:	e7f1      	b.n	80084be <ES_WIFI_StopClientConnection+0x1e>
 80084da:	bf00      	nop
 80084dc:	08026738 	.word	0x08026738
 80084e0:	08026780 	.word	0x08026780

080084e4 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	4605      	mov	r5, r0
 80084e8:	460e      	mov	r6, r1
#if (ES_WIFI_USE_UART == 1)
  char *saveptr;
#endif
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80084ea:	f500 7494 	add.w	r4, r0, #296	; 0x128
 80084ee:	788a      	ldrb	r2, [r1, #2]
 80084f0:	492c      	ldr	r1, [pc, #176]	; (80085a4 <ES_WIFI_StartServerSingleConn+0xc0>)
 80084f2:	4620      	mov	r0, r4
 80084f4:	f01b fd50 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084f8:	4622      	mov	r2, r4
 80084fa:	4621      	mov	r1, r4
 80084fc:	4628      	mov	r0, r5
 80084fe:	f7ff f91d 	bl	800773c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8008502:	4602      	mov	r2, r0
 8008504:	b928      	cbnz	r0, 8008512 <ES_WIFI_StartServerSingleConn+0x2e>
  {
    UNLOCK_WIFI();
    return ret;
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8008506:	7833      	ldrb	r3, [r6, #0]
 8008508:	3b01      	subs	r3, #1
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b01      	cmp	r3, #1
 800850e:	d802      	bhi.n	8008516 <ES_WIFI_StartServerSingleConn+0x32>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008510:	b18a      	cbz	r2, 8008536 <ES_WIFI_StartServerSingleConn+0x52>
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
}
 8008512:	4610      	mov	r0, r2
 8008514:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8008516:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <ES_WIFI_StartServerSingleConn+0xc4>)
 8008518:	cb03      	ldmia	r3!, {r0, r1}
 800851a:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 800851e:	6061      	str	r1, [r4, #4]
 8008520:	881a      	ldrh	r2, [r3, #0]
 8008522:	789b      	ldrb	r3, [r3, #2]
 8008524:	8122      	strh	r2, [r4, #8]
 8008526:	72a3      	strb	r3, [r4, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008528:	4622      	mov	r2, r4
 800852a:	4621      	mov	r1, r4
 800852c:	4628      	mov	r0, r5
 800852e:	f7ff f905 	bl	800773c <AT_ExecuteCommand>
 8008532:	4602      	mov	r2, r0
 8008534:	e7ec      	b.n	8008510 <ES_WIFI_StartServerSingleConn+0x2c>
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8008536:	7832      	ldrb	r2, [r6, #0]
 8008538:	491c      	ldr	r1, [pc, #112]	; (80085ac <ES_WIFI_StartServerSingleConn+0xc8>)
 800853a:	4620      	mov	r0, r4
 800853c:	f01b fd2c 	bl	8023f98 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008540:	4622      	mov	r2, r4
 8008542:	4621      	mov	r1, r4
 8008544:	4628      	mov	r0, r5
 8008546:	f7ff f8f9 	bl	800773c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 800854a:	4602      	mov	r2, r0
 800854c:	2800      	cmp	r0, #0
 800854e:	d1e0      	bne.n	8008512 <ES_WIFI_StartServerSingleConn+0x2e>
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8008550:	7c32      	ldrb	r2, [r6, #16]
 8008552:	4917      	ldr	r1, [pc, #92]	; (80085b0 <ES_WIFI_StartServerSingleConn+0xcc>)
 8008554:	4620      	mov	r0, r4
 8008556:	f01b fd1f 	bl	8023f98 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800855a:	4622      	mov	r2, r4
 800855c:	4621      	mov	r1, r4
 800855e:	4628      	mov	r0, r5
 8008560:	f7ff f8ec 	bl	800773c <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8008564:	4602      	mov	r2, r0
 8008566:	2800      	cmp	r0, #0
 8008568:	d1d3      	bne.n	8008512 <ES_WIFI_StartServerSingleConn+0x2e>
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800856a:	88f2      	ldrh	r2, [r6, #6]
 800856c:	4911      	ldr	r1, [pc, #68]	; (80085b4 <ES_WIFI_StartServerSingleConn+0xd0>)
 800856e:	4620      	mov	r0, r4
 8008570:	f01b fd12 	bl	8023f98 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008574:	4622      	mov	r2, r4
 8008576:	4621      	mov	r1, r4
 8008578:	4628      	mov	r0, r5
 800857a:	f7ff f8df 	bl	800773c <AT_ExecuteCommand>
          if (ret == ES_WIFI_STATUS_OK)
 800857e:	4602      	mov	r2, r0
 8008580:	2800      	cmp	r0, #0
 8008582:	d1c6      	bne.n	8008512 <ES_WIFI_StartServerSingleConn+0x2e>
            sprintf((char*)Obj->CmdData,"P5=11\r");
 8008584:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <ES_WIFI_StartServerSingleConn+0xd4>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 800858c:	889a      	ldrh	r2, [r3, #4]
 800858e:	799b      	ldrb	r3, [r3, #6]
 8008590:	80a2      	strh	r2, [r4, #4]
 8008592:	71a3      	strb	r3, [r4, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008594:	4622      	mov	r2, r4
 8008596:	4621      	mov	r1, r4
 8008598:	4628      	mov	r0, r5
 800859a:	f7ff f8cf 	bl	800773c <AT_ExecuteCommand>
 800859e:	4602      	mov	r2, r0
 80085a0:	e7b7      	b.n	8008512 <ES_WIFI_StartServerSingleConn+0x2e>
 80085a2:	bf00      	nop
 80085a4:	08026738 	.word	0x08026738
 80085a8:	08026788 	.word	0x08026788
 80085ac:	08026740 	.word	0x08026740
 80085b0:	08026794 	.word	0x08026794
 80085b4:	08026748 	.word	0x08026748
 80085b8:	0802679c 	.word	0x0802679c

080085bc <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	b083      	sub	sp, #12
 80085c2:	4605      	mov	r5, r0
 80085c4:	460f      	mov	r7, r1
 80085c6:	4692      	mov	sl, r2
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;
  char          *saveptr;

  tstart=HAL_GetTick();
 80085c8:	f002 f88a 	bl	800a6e0 <HAL_GetTick>
 80085cc:	4680      	mov	r8, r0
  tlast=tstart+timeout;
  if (tlast < tstart )
 80085ce:	eb10 0907 	adds.w	r9, r0, r7
 80085d2:	d301      	bcc.n	80085d8 <ES_WIFI_WaitServerConnection+0x1c>
  {
	   tstart=0;
 80085d4:	f04f 0800 	mov.w	r8, #0
 80085d8:	2600      	movs	r6, #0
 80085da:	e02d      	b.n	8008638 <ES_WIFI_WaitServerConnection+0x7c>
        if(strstr((char *)Obj->CmdData, "Accepted"))
        {
         //printf("SOMA Accepted\n");
         accepted=true;// flushing out the MR messages
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80085dc:	4946      	ldr	r1, [pc, #280]	; (80086f8 <ES_WIFI_WaitServerConnection+0x13c>)
 80085de:	4620      	mov	r0, r4
 80085e0:	f01b fd64 	bl	80240ac <strstr>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	f000 8081 	beq.w	80086ec <ES_WIFI_WaitServerConnection+0x130>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 80085ea:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80085ee:	2100      	movs	r1, #0
 80085f0:	4620      	mov	r0, r4
 80085f2:	f01b f83d 	bl	8023670 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 80085f6:	4b41      	ldr	r3, [pc, #260]	; (80086fc <ES_WIFI_WaitServerConnection+0x140>)
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085fe:	4622      	mov	r2, r4
 8008600:	4621      	mov	r1, r4
 8008602:	4628      	mov	r0, r5
 8008604:	f7ff f89a 	bl	800773c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8008608:	4683      	mov	fp, r0
 800860a:	2800      	cmp	r0, #0
 800860c:	d171      	bne.n	80086f2 <ES_WIFI_WaitServerConnection+0x136>
    {
      if(accepted && (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0))
 800860e:	b136      	cbz	r6, 800861e <ES_WIFI_WaitServerConnection+0x62>
 8008610:	220c      	movs	r2, #12
 8008612:	493b      	ldr	r1, [pc, #236]	; (8008700 <ES_WIFI_WaitServerConnection+0x144>)
 8008614:	4620      	mov	r0, r4
 8008616:	f01b fd22 	bl	802405e <strncmp>
 800861a:	2800      	cmp	r0, #0
 800861c:	d133      	bne.n	8008686 <ES_WIFI_WaitServerConnection+0xca>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 800861e:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8008622:	2064      	movs	r0, #100	; 0x64
 8008624:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 8008626:	f002 f85b 	bl	800a6e0 <HAL_GetTick>
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 800862a:	b12f      	cbz	r7, 8008638 <ES_WIFI_WaitServerConnection+0x7c>
 800862c:	464b      	mov	r3, r9
 800862e:	45c1      	cmp	r9, r8
 8008630:	bf38      	it	cc
 8008632:	4643      	movcc	r3, r8
 8008634:	4283      	cmp	r3, r0
 8008636:	d950      	bls.n	80086da <ES_WIFI_WaitServerConnection+0x11e>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8008638:	f505 7494 	add.w	r4, r5, #296	; 0x128
 800863c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8008640:	2100      	movs	r1, #0
 8008642:	4620      	mov	r0, r4
 8008644:	f01b f814 	bl	8023670 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8008648:	4b2e      	ldr	r3, [pc, #184]	; (8008704 <ES_WIFI_WaitServerConnection+0x148>)
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008650:	4622      	mov	r2, r4
 8008652:	4621      	mov	r1, r4
 8008654:	4628      	mov	r0, r5
 8008656:	f7ff f871 	bl	800773c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800865a:	2800      	cmp	r0, #0
 800865c:	d140      	bne.n	80086e0 <ES_WIFI_WaitServerConnection+0x124>
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 800865e:	492a      	ldr	r1, [pc, #168]	; (8008708 <ES_WIFI_WaitServerConnection+0x14c>)
 8008660:	4620      	mov	r0, r4
 8008662:	f01b fd23 	bl	80240ac <strstr>
 8008666:	2800      	cmp	r0, #0
 8008668:	d0bf      	beq.n	80085ea <ES_WIFI_WaitServerConnection+0x2e>
 800866a:	4928      	ldr	r1, [pc, #160]	; (800870c <ES_WIFI_WaitServerConnection+0x150>)
 800866c:	4620      	mov	r0, r4
 800866e:	f01b fd1d 	bl	80240ac <strstr>
 8008672:	2800      	cmp	r0, #0
 8008674:	d0b9      	beq.n	80085ea <ES_WIFI_WaitServerConnection+0x2e>
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8008676:	4926      	ldr	r1, [pc, #152]	; (8008710 <ES_WIFI_WaitServerConnection+0x154>)
 8008678:	4620      	mov	r0, r4
 800867a:	f01b fd17 	bl	80240ac <strstr>
 800867e:	2800      	cmp	r0, #0
 8008680:	d0ac      	beq.n	80085dc <ES_WIFI_WaitServerConnection+0x20>
         accepted=true;// flushing out the MR messages
 8008682:	2601      	movs	r6, #1
 8008684:	e7b1      	b.n	80085ea <ES_WIFI_WaitServerConnection+0x2e>
        ptr = strtok_r((char *)Obj->CmdData + 2, ",",&saveptr);
 8008686:	4c23      	ldr	r4, [pc, #140]	; (8008714 <ES_WIFI_WaitServerConnection+0x158>)
 8008688:	aa01      	add	r2, sp, #4
 800868a:	4621      	mov	r1, r4
 800868c:	f505 7095 	add.w	r0, r5, #298	; 0x12a
 8008690:	f01b fd4a 	bl	8024128 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //port
 8008694:	aa01      	add	r2, sp, #4
 8008696:	4621      	mov	r1, r4
 8008698:	2000      	movs	r0, #0
 800869a:	f01b fd45 	bl	8024128 <strtok_r>
        ParseIP((char *)ptr, conn->RemoteIP);
 800869e:	f10a 0108 	add.w	r1, sl, #8
 80086a2:	f7ff f81d 	bl	80076e0 <ParseIP>
        ptr = strtok_r(0, ",",&saveptr); //port
 80086a6:	aa01      	add	r2, sp, #4
 80086a8:	4621      	mov	r1, r4
 80086aa:	2000      	movs	r0, #0
 80086ac:	f01b fd3c 	bl	8024128 <strtok_r>
        conn->LocalPort=ParseNumber(ptr,0);
 80086b0:	2100      	movs	r1, #0
 80086b2:	f7fe ffd3 	bl	800765c <ParseNumber>
 80086b6:	f8aa 0006 	strh.w	r0, [sl, #6]
        ptr = strtok_r(0, ",",&saveptr); //ip
 80086ba:	aa01      	add	r2, sp, #4
 80086bc:	4621      	mov	r1, r4
 80086be:	2000      	movs	r0, #0
 80086c0:	f01b fd32 	bl	8024128 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //remote port
 80086c4:	aa01      	add	r2, sp, #4
 80086c6:	4621      	mov	r1, r4
 80086c8:	2000      	movs	r0, #0
 80086ca:	f01b fd2d 	bl	8024128 <strtok_r>
        conn->RemotePort=ParseNumber(ptr,0);
 80086ce:	2100      	movs	r1, #0
 80086d0:	f7fe ffc4 	bl	800765c <ParseNumber>
 80086d4:	f8aa 0004 	strh.w	r0, [sl, #4]
        return ES_WIFI_STATUS_OK;
 80086d8:	e004      	b.n	80086e4 <ES_WIFI_WaitServerConnection+0x128>
  return ES_WIFI_STATUS_TIMEOUT;
 80086da:	f04f 0b03 	mov.w	fp, #3
 80086de:	e001      	b.n	80086e4 <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 80086e0:	f04f 0b02 	mov.w	fp, #2
}
 80086e4:	4658      	mov	r0, fp
 80086e6:	b003      	add	sp, #12
 80086e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return ES_WIFI_STATUS_ERROR;
 80086ec:	f04f 0b02 	mov.w	fp, #2
 80086f0:	e7f8      	b.n	80086e4 <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 80086f2:	f04f 0b02 	mov.w	fp, #2
 80086f6:	e7f5      	b.n	80086e4 <ES_WIFI_WaitServerConnection+0x128>
 80086f8:	080267c0 	.word	0x080267c0
 80086fc:	080267d0 	.word	0x080267d0
 8008700:	080267d4 	.word	0x080267d4
 8008704:	08026694 	.word	0x08026694
 8008708:	080267a4 	.word	0x080267a4
 800870c:	080267ac 	.word	0x080267ac
 8008710:	080267b4 	.word	0x080267b4
 8008714:	08026678 	.word	0x08026678

08008718 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4604      	mov	r4, r0
 800871c:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800871e:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008722:	490d      	ldr	r1, [pc, #52]	; (8008758 <ES_WIFI_CloseServerConnection+0x40>)
 8008724:	4628      	mov	r0, r5
 8008726:	f01b fc37 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800872a:	462a      	mov	r2, r5
 800872c:	4629      	mov	r1, r5
 800872e:	4620      	mov	r0, r4
 8008730:	f7ff f804 	bl	800773c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8008734:	b100      	cbz	r0, 8008738 <ES_WIFI_CloseServerConnection+0x20>
    DEBUGW(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8008736:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=10\r");
 8008738:	4b08      	ldr	r3, [pc, #32]	; (800875c <ES_WIFI_CloseServerConnection+0x44>)
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8008740:	889a      	ldrh	r2, [r3, #4]
 8008742:	799b      	ldrb	r3, [r3, #6]
 8008744:	f8a4 212c 	strh.w	r2, [r4, #300]	; 0x12c
 8008748:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800874c:	462a      	mov	r2, r5
 800874e:	4629      	mov	r1, r5
 8008750:	4620      	mov	r0, r4
 8008752:	f7fe fff3 	bl	800773c <AT_ExecuteCommand>
  return ret;
 8008756:	e7ee      	b.n	8008736 <ES_WIFI_CloseServerConnection+0x1e>
 8008758:	08026738 	.word	0x08026738
 800875c:	080267e4 	.word	0x080267e4

08008760 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4604      	mov	r4, r0
 8008764:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8008766:	f500 7594 	add.w	r5, r0, #296	; 0x128
 800876a:	490c      	ldr	r1, [pc, #48]	; (800879c <ES_WIFI_StopServerSingleConn+0x3c>)
 800876c:	4628      	mov	r0, r5
 800876e:	f01b fc13 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008772:	462a      	mov	r2, r5
 8008774:	4629      	mov	r1, r5
 8008776:	4620      	mov	r0, r4
 8008778:	f7fe ffe0 	bl	800773c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 800877c:	b100      	cbz	r0, 8008780 <ES_WIFI_StopServerSingleConn+0x20>
    return ret;
  }

  UNLOCK_WIFI();
  return ret;
}
 800877e:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=0\r");
 8008780:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <ES_WIFI_StopServerSingleConn+0x40>)
 8008782:	6818      	ldr	r0, [r3, #0]
 8008784:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8008788:	889b      	ldrh	r3, [r3, #4]
 800878a:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800878e:	462a      	mov	r2, r5
 8008790:	4629      	mov	r1, r5
 8008792:	4620      	mov	r0, r4
 8008794:	f7fe ffd2 	bl	800773c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8008798:	e7f1      	b.n	800877e <ES_WIFI_StopServerSingleConn+0x1e>
 800879a:	bf00      	nop
 800879c:	08026738 	.word	0x08026738
 80087a0:	080267ec 	.word	0x080267ec

080087a4 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80087a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	4605      	mov	r5, r0
 80087ac:	4690      	mov	r8, r2
 80087ae:	461c      	mov	r4, r3
 80087b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80087b4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 80087b8:	f1b9 0f00 	cmp.w	r9, #0
 80087bc:	d101      	bne.n	80087c2 <ES_WIFI_SendData+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80087be:	f04f 0901 	mov.w	r9, #1
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80087c2:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 80087c6:	d301      	bcc.n	80087cc <ES_WIFI_SendData+0x28>
 80087c8:	f44f 6496 	mov.w	r4, #1200	; 0x4b0

  *SentLen = Reqlen;
 80087cc:	f8aa 4000 	strh.w	r4, [sl]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80087d0:	f505 7694 	add.w	r6, r5, #296	; 0x128
 80087d4:	460a      	mov	r2, r1
 80087d6:	491c      	ldr	r1, [pc, #112]	; (8008848 <ES_WIFI_SendData+0xa4>)
 80087d8:	4630      	mov	r0, r6
 80087da:	f01b fbdd 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087de:	4632      	mov	r2, r6
 80087e0:	4631      	mov	r1, r6
 80087e2:	4628      	mov	r0, r5
 80087e4:	f7fe ffaa 	bl	800773c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80087e8:	4607      	mov	r7, r0
 80087ea:	b128      	cbz	r0, 80087f8 <ES_WIFI_SendData+0x54>
  else
  {
   DEBUGW("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80087ec:	2f02      	cmp	r7, #2
 80087ee:	d026      	beq.n	800883e <ES_WIFI_SendData+0x9a>
  {
    *SentLen = 0;
  }
  UNLOCK_WIFI();
  return ret;
}
 80087f0:	4638      	mov	r0, r7
 80087f2:	b002      	add	sp, #8
 80087f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80087f8:	464a      	mov	r2, r9
 80087fa:	4914      	ldr	r1, [pc, #80]	; (800884c <ES_WIFI_SendData+0xa8>)
 80087fc:	4630      	mov	r0, r6
 80087fe:	f01b fbcb 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008802:	4632      	mov	r2, r6
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	f7fe ff98 	bl	800773c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800880c:	4607      	mov	r7, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	d1ec      	bne.n	80087ec <ES_WIFI_SendData+0x48>
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8008812:	4622      	mov	r2, r4
 8008814:	490e      	ldr	r1, [pc, #56]	; (8008850 <ES_WIFI_SendData+0xac>)
 8008816:	4630      	mov	r0, r6
 8008818:	f01b fbbe 	bl	8023f98 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800881c:	9600      	str	r6, [sp, #0]
 800881e:	4623      	mov	r3, r4
 8008820:	4642      	mov	r2, r8
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	f7ff f803 	bl	8007830 <AT_RequestSendData>
      if(ret == ES_WIFI_STATUS_OK)
 800882a:	4607      	mov	r7, r0
 800882c:	2800      	cmp	r0, #0
 800882e:	d1dd      	bne.n	80087ec <ES_WIFI_SendData+0x48>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8008830:	4908      	ldr	r1, [pc, #32]	; (8008854 <ES_WIFI_SendData+0xb0>)
 8008832:	4630      	mov	r0, r6
 8008834:	f01b fc3a 	bl	80240ac <strstr>
 8008838:	2800      	cmp	r0, #0
 800883a:	d0d7      	beq.n	80087ec <ES_WIFI_SendData+0x48>
          ret = ES_WIFI_STATUS_ERROR;
 800883c:	2702      	movs	r7, #2
    *SentLen = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	f8aa 3000 	strh.w	r3, [sl]
 8008844:	e7d4      	b.n	80087f0 <ES_WIFI_SendData+0x4c>
 8008846:	bf00      	nop
 8008848:	08026738 	.word	0x08026738
 800884c:	080267f4 	.word	0x080267f4
 8008850:	080267fc 	.word	0x080267fc
 8008854:	08026808 	.word	0x08026808

08008858 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 8008858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800885c:	b082      	sub	sp, #8
 800885e:	4606      	mov	r6, r0
 8008860:	4690      	mov	r8, r2
 8008862:	461f      	mov	r7, r3
 8008864:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008868:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 800886c:	f1b9 0f00 	cmp.w	r9, #0
 8008870:	d101      	bne.n	8008876 <ES_WIFI_SendDataTo+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8008872:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008876:	f506 7594 	add.w	r5, r6, #296	; 0x128
 800887a:	460a      	mov	r2, r1
 800887c:	493d      	ldr	r1, [pc, #244]	; (8008974 <ES_WIFI_SendDataTo+0x11c>)
 800887e:	4628      	mov	r0, r5
 8008880:	f01b fb8a 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008884:	462a      	mov	r2, r5
 8008886:	4629      	mov	r1, r5
 8008888:	4630      	mov	r0, r6
 800888a:	f7fe ff57 	bl	800773c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 800888e:	4604      	mov	r4, r0
 8008890:	b300      	cbz	r0, 80088d4 <ES_WIFI_SendDataTo+0x7c>
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 8008892:	b364      	cbz	r4, 80088ee <ES_WIFI_SendDataTo+0x96>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008894:	2c00      	cmp	r4, #0
 8008896:	d037      	beq.n	8008908 <ES_WIFI_SendDataTo+0xb0>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008898:	b924      	cbnz	r4, 80088a4 <ES_WIFI_SendDataTo+0x4c>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 800889a:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
 800889e:	d301      	bcc.n	80088a4 <ES_WIFI_SendDataTo+0x4c>
    {
      Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80088a0:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
 80088a4:	2c00      	cmp	r4, #0
 80088a6:	d044      	beq.n	8008932 <ES_WIFI_SendDataTo+0xda>
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 80088a8:	2c00      	cmp	r4, #0
 80088aa:	d04e      	beq.n	800894a <ES_WIFI_SendDataTo+0xf2>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 80088ac:	2c00      	cmp	r4, #0
 80088ae:	d15a      	bne.n	8008966 <ES_WIFI_SendDataTo+0x10e>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 80088b0:	4931      	ldr	r1, [pc, #196]	; (8008978 <ES_WIFI_SendDataTo+0x120>)
 80088b2:	4628      	mov	r0, r5
 80088b4:	f01b fbfa 	bl	80240ac <strstr>
    if(ptr != NULL)
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d054      	beq.n	8008966 <ES_WIFI_SendDataTo+0x10e>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 80088bc:	f506 66d4 	add.w	r6, r6, #1696	; 0x6a0
 80088c0:	4286      	cmp	r6, r0
 80088c2:	d855      	bhi.n	8008970 <ES_WIFI_SendDataTo+0x118>
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 80088c4:	2404      	movs	r4, #4
    *SentLen = Reqlen;
  }
  else
  {
    DEBUGW("Send error:\n%s\n", Obj->CmdData);
    *SentLen = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ca:	8013      	strh	r3, [r2, #0]
  }

  UNLOCK_WIFI();
  return ret;
}
 80088cc:	4620      	mov	r0, r4
 80088ce:	b002      	add	sp, #8
 80088d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 80088d4:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 80088d8:	4928      	ldr	r1, [pc, #160]	; (800897c <ES_WIFI_SendDataTo+0x124>)
 80088da:	4628      	mov	r0, r5
 80088dc:	f01b fb5c 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80088e0:	462a      	mov	r2, r5
 80088e2:	4629      	mov	r1, r5
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7fe ff29 	bl	800773c <AT_ExecuteCommand>
 80088ea:	4604      	mov	r4, r0
 80088ec:	e7d1      	b.n	8008892 <ES_WIFI_SendDataTo+0x3a>
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 80088ee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80088f2:	4923      	ldr	r1, [pc, #140]	; (8008980 <ES_WIFI_SendDataTo+0x128>)
 80088f4:	4628      	mov	r0, r5
 80088f6:	f01b fb4f 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80088fa:	462a      	mov	r2, r5
 80088fc:	4629      	mov	r1, r5
 80088fe:	4630      	mov	r0, r6
 8008900:	f7fe ff1c 	bl	800773c <AT_ExecuteCommand>
 8008904:	4604      	mov	r4, r0
 8008906:	e7c5      	b.n	8008894 <ES_WIFI_SendDataTo+0x3c>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 8008908:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800890c:	f89a 2003 	ldrb.w	r2, [sl, #3]
 8008910:	9201      	str	r2, [sp, #4]
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008918:	f89a 2000 	ldrb.w	r2, [sl]
 800891c:	4919      	ldr	r1, [pc, #100]	; (8008984 <ES_WIFI_SendDataTo+0x12c>)
 800891e:	4628      	mov	r0, r5
 8008920:	f01b fb3a 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008924:	462a      	mov	r2, r5
 8008926:	4629      	mov	r1, r5
 8008928:	4630      	mov	r0, r6
 800892a:	f7fe ff07 	bl	800773c <AT_ExecuteCommand>
 800892e:	4604      	mov	r4, r0
 8008930:	e7b2      	b.n	8008898 <ES_WIFI_SendDataTo+0x40>
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 8008932:	464a      	mov	r2, r9
 8008934:	4914      	ldr	r1, [pc, #80]	; (8008988 <ES_WIFI_SendDataTo+0x130>)
 8008936:	4628      	mov	r0, r5
 8008938:	f01b fb2e 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800893c:	462a      	mov	r2, r5
 800893e:	4629      	mov	r1, r5
 8008940:	4630      	mov	r0, r6
 8008942:	f7fe fefb 	bl	800773c <AT_ExecuteCommand>
 8008946:	4604      	mov	r4, r0
 8008948:	e7ae      	b.n	80088a8 <ES_WIFI_SendDataTo+0x50>
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 800894a:	463a      	mov	r2, r7
 800894c:	490f      	ldr	r1, [pc, #60]	; (800898c <ES_WIFI_SendDataTo+0x134>)
 800894e:	4628      	mov	r0, r5
 8008950:	f01b fb22 	bl	8023f98 <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8008954:	9500      	str	r5, [sp, #0]
 8008956:	463b      	mov	r3, r7
 8008958:	4642      	mov	r2, r8
 800895a:	4629      	mov	r1, r5
 800895c:	4630      	mov	r0, r6
 800895e:	f7fe ff67 	bl	8007830 <AT_RequestSendData>
 8008962:	4604      	mov	r4, r0
 8008964:	e7a2      	b.n	80088ac <ES_WIFI_SendDataTo+0x54>
  if (ret == ES_WIFI_STATUS_OK)
 8008966:	2c00      	cmp	r4, #0
 8008968:	d1ad      	bne.n	80088c6 <ES_WIFI_SendDataTo+0x6e>
    *SentLen = Reqlen;
 800896a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896c:	801f      	strh	r7, [r3, #0]
 800896e:	e7ad      	b.n	80088cc <ES_WIFI_SendDataTo+0x74>
        ret = ES_WIFI_STATUS_ERROR;
 8008970:	2402      	movs	r4, #2
 8008972:	e7a8      	b.n	80088c6 <ES_WIFI_SendDataTo+0x6e>
 8008974:	08026738 	.word	0x08026738
 8008978:	08026808 	.word	0x08026808
 800897c:	08026748 	.word	0x08026748
 8008980:	08026750 	.word	0x08026750
 8008984:	08026758 	.word	0x08026758
 8008988:	080267f4 	.word	0x080267f4
 800898c:	080267fc 	.word	0x080267fc

08008990 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8008990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	4604      	mov	r4, r0
 8008998:	4690      	mov	r8, r2
 800899a:	461d      	mov	r5, r3
 800899c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 800899e:	b906      	cbnz	r6, 80089a2 <ES_WIFI_ReceiveData+0x12>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80089a0:	2601      	movs	r6, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80089a2:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80089a6:	d903      	bls.n	80089b0 <ES_WIFI_ReceiveData+0x20>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80089a8:	2002      	movs	r0, #2
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80089aa:	b002      	add	sp, #8
 80089ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80089b0:	f504 7794 	add.w	r7, r4, #296	; 0x128
 80089b4:	460a      	mov	r2, r1
 80089b6:	491b      	ldr	r1, [pc, #108]	; (8008a24 <ES_WIFI_ReceiveData+0x94>)
 80089b8:	4638      	mov	r0, r7
 80089ba:	f01b faed 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089be:	463a      	mov	r2, r7
 80089c0:	4639      	mov	r1, r7
 80089c2:	4620      	mov	r0, r4
 80089c4:	f7fe feba 	bl	800773c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80089c8:	b120      	cbz	r0, 80089d4 <ES_WIFI_ReceiveData+0x44>
      issue15++;
 80089ca:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <ES_WIFI_ReceiveData+0x98>)
 80089cc:	6813      	ldr	r3, [r2, #0]
 80089ce:	3301      	adds	r3, #1
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	e7ea      	b.n	80089aa <ES_WIFI_ReceiveData+0x1a>
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80089d4:	462a      	mov	r2, r5
 80089d6:	4915      	ldr	r1, [pc, #84]	; (8008a2c <ES_WIFI_ReceiveData+0x9c>)
 80089d8:	4638      	mov	r0, r7
 80089da:	f01b fadd 	bl	8023f98 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089de:	463a      	mov	r2, r7
 80089e0:	4639      	mov	r1, r7
 80089e2:	4620      	mov	r0, r4
 80089e4:	f7fe feaa 	bl	800773c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80089e8:	b118      	cbz	r0, 80089f2 <ES_WIFI_ReceiveData+0x62>
        *Receivedlen = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	9a08      	ldr	r2, [sp, #32]
 80089ee:	8013      	strh	r3, [r2, #0]
 80089f0:	e7db      	b.n	80089aa <ES_WIFI_ReceiveData+0x1a>
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80089f2:	4632      	mov	r2, r6
 80089f4:	490e      	ldr	r1, [pc, #56]	; (8008a30 <ES_WIFI_ReceiveData+0xa0>)
 80089f6:	4638      	mov	r0, r7
 80089f8:	f01b face 	bl	8023f98 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089fc:	463a      	mov	r2, r7
 80089fe:	4639      	mov	r1, r7
 8008a00:	4620      	mov	r0, r4
 8008a02:	f7fe fe9b 	bl	800773c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d1cf      	bne.n	80089aa <ES_WIFI_ReceiveData+0x1a>
          sprintf((char*)Obj->CmdData,"R0\r");
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <ES_WIFI_ReceiveData+0xa4>)
 8008a0c:	6818      	ldr	r0, [r3, #0]
 8008a0e:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008a12:	9b08      	ldr	r3, [sp, #32]
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	462b      	mov	r3, r5
 8008a18:	4642      	mov	r2, r8
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7ff f9d1 	bl	8007dc4 <AT_RequestReceiveData>
            DEBUGW("AT_RequestReceiveData  failed\n");
 8008a22:	e7c2      	b.n	80089aa <ES_WIFI_ReceiveData+0x1a>
 8008a24:	08026738 	.word	0x08026738
 8008a28:	24006544 	.word	0x24006544
 8008a2c:	08026810 	.word	0x08026810
 8008a30:	08026818 	.word	0x08026818
 8008a34:	08026820 	.word	0x08026820

08008a38 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 8008a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	b088      	sub	sp, #32
 8008a3e:	4605      	mov	r5, r0
 8008a40:	4690      	mov	r8, r2
 8008a42:	461e      	mov	r6, r3
 8008a44:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008a46:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	803b      	strh	r3, [r7, #0]


  if (Timeout == 0)
 8008a4e:	f1b9 0f00 	cmp.w	r9, #0
 8008a52:	d101      	bne.n	8008a58 <ES_WIFI_ReceiveDataFrom+0x20>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8008a54:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8008a58:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 8008a5c:	d90f      	bls.n	8008a7e <ES_WIFI_ReceiveDataFrom+0x46>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008a5e:	2402      	movs	r4, #2
  else
  {
    DEBUGW("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008a60:	b344      	cbz	r4, 8008ab4 <ES_WIFI_ReceiveDataFrom+0x7c>
  else
  {
    DEBUGW("R1 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008a62:	b3ac      	cbz	r4, 8008ad0 <ES_WIFI_ReceiveDataFrom+0x98>
  else
  {
    DEBUGW("R2 failed.\n");
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008a64:	b924      	cbnz	r4, 8008a70 <ES_WIFI_ReceiveDataFrom+0x38>
  {
    if (*Receivedlen > Reqlen)
 8008a66:	883b      	ldrh	r3, [r7, #0]
 8008a68:	42b3      	cmp	r3, r6
 8008a6a:	d85f      	bhi.n	8008b2c <ES_WIFI_ReceiveDataFrom+0xf4>
      DEBUGW("AT_RequestReceiveData overflow\n.");
      ret = ES_WIFI_STATUS_ERROR;
    }
    else
    {
      if (*Receivedlen > 0)
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d13d      	bne.n	8008aec <ES_WIFI_ReceiveDataFrom+0xb4>
        }
      }
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
 8008a70:	b10c      	cbz	r4, 8008a76 <ES_WIFI_ReceiveDataFrom+0x3e>
  {
    DEBUGW("Read error:\n%s\n", Obj->CmdData);
    *Receivedlen = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	803b      	strh	r3, [r7, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 8008a76:	4620      	mov	r0, r4
 8008a78:	b008      	add	sp, #32
 8008a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8008a7e:	f505 7a94 	add.w	sl, r5, #296	; 0x128
 8008a82:	460a      	mov	r2, r1
 8008a84:	492a      	ldr	r1, [pc, #168]	; (8008b30 <ES_WIFI_ReceiveDataFrom+0xf8>)
 8008a86:	4650      	mov	r0, sl
 8008a88:	f01b fa86 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008a8c:	4652      	mov	r2, sl
 8008a8e:	4651      	mov	r1, sl
 8008a90:	4628      	mov	r0, r5
 8008a92:	f7fe fe53 	bl	800773c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008a96:	4604      	mov	r4, r0
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d1e1      	bne.n	8008a60 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	4925      	ldr	r1, [pc, #148]	; (8008b34 <ES_WIFI_ReceiveDataFrom+0xfc>)
 8008aa0:	4650      	mov	r0, sl
 8008aa2:	f01b fa79 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008aa6:	4652      	mov	r2, sl
 8008aa8:	4651      	mov	r1, sl
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f7fe fe46 	bl	800773c <AT_ExecuteCommand>
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	e7d5      	b.n	8008a60 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8008ab4:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8008ab8:	464a      	mov	r2, r9
 8008aba:	491f      	ldr	r1, [pc, #124]	; (8008b38 <ES_WIFI_ReceiveDataFrom+0x100>)
 8008abc:	4620      	mov	r0, r4
 8008abe:	f01b fa6b 	bl	8023f98 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f7fe fe38 	bl	800773c <AT_ExecuteCommand>
 8008acc:	4604      	mov	r4, r0
 8008ace:	e7c8      	b.n	8008a62 <ES_WIFI_ReceiveDataFrom+0x2a>
    sprintf((char*)Obj->CmdData,"R0\r");
 8008ad0:	4b1a      	ldr	r3, [pc, #104]	; (8008b3c <ES_WIFI_ReceiveDataFrom+0x104>)
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008ad8:	9700      	str	r7, [sp, #0]
 8008ada:	4633      	mov	r3, r6
 8008adc:	4642      	mov	r2, r8
 8008ade:	f505 7194 	add.w	r1, r5, #296	; 0x128
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f7ff f96e 	bl	8007dc4 <AT_RequestReceiveData>
 8008ae8:	4604      	mov	r4, r0
 8008aea:	e7bb      	b.n	8008a64 <ES_WIFI_ReceiveDataFrom+0x2c>
        sprintf((char*)Obj->CmdData,"P?\r");
 8008aec:	f505 7694 	add.w	r6, r5, #296	; 0x128
 8008af0:	4b13      	ldr	r3, [pc, #76]	; (8008b40 <ES_WIFI_ReceiveDataFrom+0x108>)
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008af8:	4632      	mov	r2, r6
 8008afa:	4631      	mov	r1, r6
 8008afc:	4628      	mov	r0, r5
 8008afe:	f7fe fe1d 	bl	800773c <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8008b02:	4604      	mov	r4, r0
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d1b3      	bne.n	8008a70 <ES_WIFI_ReceiveDataFrom+0x38>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 8008b08:	2300      	movs	r3, #0
 8008b0a:	9303      	str	r3, [sp, #12]
 8008b0c:	9304      	str	r3, [sp, #16]
 8008b0e:	9305      	str	r3, [sp, #20]
 8008b10:	9306      	str	r3, [sp, #24]
 8008b12:	9307      	str	r3, [sp, #28]
          AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8008b14:	a903      	add	r1, sp, #12
 8008b16:	4630      	mov	r0, r6
 8008b18:	f7fe ff28 	bl	800796c <AT_ParseTransportSettings>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8008b1c:	9a05      	ldr	r2, [sp, #20]
 8008b1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b20:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8008b22:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8008b26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b28:	801a      	strh	r2, [r3, #0]
 8008b2a:	e7a1      	b.n	8008a70 <ES_WIFI_ReceiveDataFrom+0x38>
      ret = ES_WIFI_STATUS_ERROR;
 8008b2c:	2402      	movs	r4, #2
 8008b2e:	e7a0      	b.n	8008a72 <ES_WIFI_ReceiveDataFrom+0x3a>
 8008b30:	08026738 	.word	0x08026738
 8008b34:	08026810 	.word	0x08026810
 8008b38:	08026818 	.word	0x08026818
 8008b3c:	08026820 	.word	0x08026820
 8008b40:	080267d0 	.word	0x080267d0

08008b44 <ES_WIFI_SockInfo>:

ES_WIFI_Status_t  ES_WIFI_SockInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8008b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b48:	b086      	sub	sp, #24
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4690      	mov	r8, r2
 8008b4e:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8008b50:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008b54:	460a      	mov	r2, r1
 8008b56:	4916      	ldr	r1, [pc, #88]	; (8008bb0 <ES_WIFI_SockInfo+0x6c>)
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f01b fa1d 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008b5e:	462a      	mov	r2, r5
 8008b60:	4629      	mov	r1, r5
 8008b62:	4620      	mov	r0, r4
 8008b64:	f7fe fdea 	bl	800773c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008b68:	4606      	mov	r6, r0
 8008b6a:	b118      	cbz	r0, 8008b74 <ES_WIFI_SockInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	b006      	add	sp, #24
 8008b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <ES_WIFI_SockInfo+0x70>)
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008b7c:	462a      	mov	r2, r5
 8008b7e:	4629      	mov	r1, r5
 8008b80:	4620      	mov	r0, r4
 8008b82:	f7fe fddb 	bl	800773c <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 8008b86:	4606      	mov	r6, r0
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d1ef      	bne.n	8008b6c <ES_WIFI_SockInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	9302      	str	r3, [sp, #8]
 8008b92:	9303      	str	r3, [sp, #12]
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8008b98:	a901      	add	r1, sp, #4
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	f7fe fee6 	bl	800796c <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Local_IP_Addr, 4);
 8008ba0:	f8dd 3005 	ldr.w	r3, [sp, #5]
 8008ba4:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Local_Port;
 8008ba8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008bac:	803b      	strh	r3, [r7, #0]
 8008bae:	e7dd      	b.n	8008b6c <ES_WIFI_SockInfo+0x28>
 8008bb0:	08026738 	.word	0x08026738
 8008bb4:	080267d0 	.word	0x080267d0

08008bb8 <ES_WIFI_PeerInfo>:


ES_WIFI_Status_t  ES_WIFI_PeerInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8008bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bbc:	b086      	sub	sp, #24
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4690      	mov	r8, r2
 8008bc2:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8008bc4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008bc8:	460a      	mov	r2, r1
 8008bca:	4916      	ldr	r1, [pc, #88]	; (8008c24 <ES_WIFI_PeerInfo+0x6c>)
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f01b f9e3 	bl	8023f98 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7fe fdb0 	bl	800773c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008bdc:	4606      	mov	r6, r0
 8008bde:	b118      	cbz	r0, 8008be8 <ES_WIFI_PeerInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 8008be0:	4630      	mov	r0, r6
 8008be2:	b006      	add	sp, #24
 8008be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 8008be8:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <ES_WIFI_PeerInfo+0x70>)
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008bf0:	462a      	mov	r2, r5
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f7fe fda1 	bl	800773c <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d1ef      	bne.n	8008be0 <ES_WIFI_PeerInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8008c00:	2300      	movs	r3, #0
 8008c02:	9301      	str	r3, [sp, #4]
 8008c04:	9302      	str	r3, [sp, #8]
 8008c06:	9303      	str	r3, [sp, #12]
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8008c0c:	a901      	add	r1, sp, #4
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f7fe feac 	bl	800796c <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Remote_Port;
 8008c1a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8008c1e:	803b      	strh	r3, [r7, #0]
 8008c20:	e7de      	b.n	8008be0 <ES_WIFI_PeerInfo+0x28>
 8008c22:	bf00      	nop
 8008c24:	08026738 	.word	0x08026738
 8008c28:	080267d0 	.word	0x080267d0

08008c2c <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8008c30:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8008c32:	2305      	movs	r3, #5
 8008c34:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8008c36:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008c3a:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8008c3c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008c40:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8008c42:	2000      	movs	r0, #0
 8008c44:	4770      	bx	lr

08008c46 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8008c46:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d001      	beq.n	8008c52 <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 8008c4e:	2000      	movs	r0, #0
 8008c50:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8008c58:	e7f9      	b.n	8008c4e <FT5336_DeInit+0x8>

08008c5a <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	4770      	bx	lr

08008c5e <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8008c5e:	2000      	movs	r0, #0
 8008c60:	4770      	bx	lr

08008c62 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008c62:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008c64:	6904      	ldr	r4, [r0, #16]
 8008c66:	8900      	ldrh	r0, [r0, #8]
 8008c68:	47a0      	blx	r4
}
 8008c6a:	bd10      	pop	{r4, pc}

08008c6c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008c6c:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008c6e:	68c4      	ldr	r4, [r0, #12]
 8008c70:	8900      	ldrh	r0, [r0, #8]
 8008c72:	47a0      	blx	r4
}
 8008c74:	bd10      	pop	{r4, pc}

08008c76 <FT5336_GestureConfig>:
{
 8008c76:	b570      	push	{r4, r5, r6, lr}
 8008c78:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8008c7a:	f100 0518 	add.w	r5, r0, #24
 8008c7e:	7809      	ldrb	r1, [r1, #0]
 8008c80:	4628      	mov	r0, r5
 8008c82:	f000 f91d 	bl	8008ec0 <ft5336_radian_value>
 8008c86:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8008c88:	7931      	ldrb	r1, [r6, #4]
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 f925 	bl	8008eda <ft5336_offset_left_right>
 8008c90:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8008c92:	7a31      	ldrb	r1, [r6, #8]
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 f92d 	bl	8008ef4 <ft5336_offset_up_down>
 8008c9a:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8008c9c:	7b31      	ldrb	r1, [r6, #12]
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f000 f935 	bl	8008f0e <ft5336_disatnce_left_right>
 8008ca4:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8008ca6:	7c31      	ldrb	r1, [r6, #16]
 8008ca8:	4628      	mov	r0, r5
 8008caa:	f000 f93d 	bl	8008f28 <ft5336_distance_up_down>
 8008cae:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8008cb0:	7d31      	ldrb	r1, [r6, #20]
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 f945 	bl	8008f42 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8008cb8:	1820      	adds	r0, r4, r0
 8008cba:	d100      	bne.n	8008cbe <FT5336_GestureConfig+0x48>
}
 8008cbc:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8008cbe:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008cc2:	e7fb      	b.n	8008cbc <FT5336_GestureConfig+0x46>

08008cc4 <FT5336_ReadID>:
{
 8008cc4:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8008cc6:	3018      	adds	r0, #24
 8008cc8:	f000 f955 	bl	8008f76 <ft5336_chip_id>
}
 8008ccc:	bd08      	pop	{r3, pc}

08008cce <FT5336_DetectTouch>:
{
 8008cce:	b500      	push	{lr}
 8008cd0:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8008cd2:	f10d 0107 	add.w	r1, sp, #7
 8008cd6:	3018      	adds	r0, #24
 8008cd8:	f000 f8e5 	bl	8008ea6 <ft5336_td_status>
 8008cdc:	b938      	cbnz	r0, 8008cee <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8008cde:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008ce2:	2b05      	cmp	r3, #5
 8008ce4:	d800      	bhi.n	8008ce8 <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 8008ce6:	4618      	mov	r0, r3
}
 8008ce8:	b003      	add	sp, #12
 8008cea:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 8008cee:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008cf2:	e7f9      	b.n	8008ce8 <FT5336_DetectTouch+0x1a>

08008cf4 <FT5336_GetState>:
{
 8008cf4:	b530      	push	{r4, r5, lr}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8008cfc:	f7ff ffe7 	bl	8008cce <FT5336_DetectTouch>
 8008d00:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008d02:	2304      	movs	r3, #4
 8008d04:	eb0d 0203 	add.w	r2, sp, r3
 8008d08:	2103      	movs	r1, #3
 8008d0a:	f105 0018 	add.w	r0, r5, #24
 8008d0e:	f000 f8b9 	bl	8008e84 <ft5336_read_reg>
 8008d12:	b998      	cbnz	r0, 8008d3c <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8008d14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008d1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8008d26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008d30:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60a3      	str	r3, [r4, #8]
}
 8008d38:	b003      	add	sp, #12
 8008d3a:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008d40:	e7fa      	b.n	8008d38 <FT5336_GetState+0x44>

08008d42 <FT5336_GetMultiTouchState>:
{
 8008d42:	b530      	push	{r4, r5, lr}
 8008d44:	b089      	sub	sp, #36	; 0x24
 8008d46:	4604      	mov	r4, r0
 8008d48:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8008d4a:	f7ff ffc0 	bl	8008cce <FT5336_DetectTouch>
 8008d4e:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008d50:	231e      	movs	r3, #30
 8008d52:	466a      	mov	r2, sp
 8008d54:	2103      	movs	r1, #3
 8008d56:	f104 0018 	add.w	r0, r4, #24
 8008d5a:	f000 f893 	bl	8008e84 <ft5336_read_reg>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d146      	bne.n	8008df0 <FT5336_GetMultiTouchState+0xae>
 8008d62:	4603      	mov	r3, r0
 8008d64:	e040      	b.n	8008de8 <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8008d66:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8008d6a:	004a      	lsls	r2, r1, #1
 8008d6c:	ac08      	add	r4, sp, #32
 8008d6e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8008d72:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 8008d76:	ea4f 210c 	mov.w	r1, ip, lsl #8
 8008d7a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8008d7e:	f102 0421 	add.w	r4, r2, #33	; 0x21
 8008d82:	446c      	add	r4, sp
 8008d84:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 8008d88:	4321      	orrs	r1, r4
 8008d8a:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 8008d8e:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8008d90:	f102 0122 	add.w	r1, r2, #34	; 0x22
 8008d94:	4469      	add	r1, sp
 8008d96:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8008d9a:	0224      	lsls	r4, r4, #8
 8008d9c:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8008da0:	f102 0123 	add.w	r1, r2, #35	; 0x23
 8008da4:	4469      	add	r1, sp
 8008da6:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8008daa:	430c      	orrs	r4, r1
 8008dac:	1d99      	adds	r1, r3, #6
 8008dae:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8008db2:	ea4f 119c 	mov.w	r1, ip, lsr #6
 8008db6:	f103 0410 	add.w	r4, r3, #16
 8008dba:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8008dbe:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8008dc2:	4469      	add	r1, sp
 8008dc4:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8008dc8:	f103 010a 	add.w	r1, r3, #10
 8008dcc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8008dd0:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8008dd2:	3225      	adds	r2, #37	; 0x25
 8008dd4:	446a      	add	r2, sp
 8008dd6:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8008dda:	0909      	lsrs	r1, r1, #4
 8008ddc:	f103 0214 	add.w	r2, r3, #20
 8008de0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8008de4:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8008de6:	3301      	adds	r3, #1
 8008de8:	2b04      	cmp	r3, #4
 8008dea:	d9bc      	bls.n	8008d66 <FT5336_GetMultiTouchState+0x24>
}
 8008dec:	b009      	add	sp, #36	; 0x24
 8008dee:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008df4:	e7fa      	b.n	8008dec <FT5336_GetMultiTouchState+0xaa>

08008df6 <FT5336_GetGesture>:
{
 8008df6:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8008df8:	3018      	adds	r0, #24
 8008dfa:	f000 f84d 	bl	8008e98 <ft5336_gest_id>
}
 8008dfe:	bd08      	pop	{r3, pc}

08008e00 <FT5336_EnableIT>:
{
 8008e00:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8008e02:	2101      	movs	r1, #1
 8008e04:	3018      	adds	r0, #24
 8008e06:	f000 f8a9 	bl	8008f5c <ft5336_g_mode>
}
 8008e0a:	bd08      	pop	{r3, pc}

08008e0c <FT5336_DisableIT>:
{
 8008e0c:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8008e0e:	2100      	movs	r1, #0
 8008e10:	3018      	adds	r0, #24
 8008e12:	f000 f8a3 	bl	8008f5c <ft5336_g_mode>
}
 8008e16:	bd08      	pop	{r3, pc}

08008e18 <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 8008e18:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008e1c:	b95b      	cbnz	r3, 8008e36 <FT5336_Init+0x1e>
{
 8008e1e:	b510      	push	{r4, lr}
 8008e20:	4604      	mov	r4, r0
    pObj->IO.Init();
 8008e22:	6803      	ldr	r3, [r0, #0]
 8008e24:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8008e26:	4620      	mov	r0, r4
 8008e28:	f7ff fff0 	bl	8008e0c <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8008e32:	b910      	cbnz	r0, 8008e3a <FT5336_Init+0x22>
}
 8008e34:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8008e36:	2000      	movs	r0, #0
}
 8008e38:	4770      	bx	lr
    ret = FT5336_ERROR;
 8008e3a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008e3e:	e7f9      	b.n	8008e34 <FT5336_Init+0x1c>

08008e40 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8008e40:	b1a8      	cbz	r0, 8008e6e <FT5336_RegisterBusIO+0x2e>
{
 8008e42:	b508      	push	{r3, lr}
 8008e44:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8008e46:	680a      	ldr	r2, [r1, #0]
 8008e48:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008e4a:	6848      	ldr	r0, [r1, #4]
 8008e4c:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8008e4e:	8908      	ldrh	r0, [r1, #8]
 8008e50:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008e52:	68c8      	ldr	r0, [r1, #12]
 8008e54:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008e56:	6908      	ldr	r0, [r1, #16]
 8008e58:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8008e5a:	6949      	ldr	r1, [r1, #20]
 8008e5c:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8008e5e:	4907      	ldr	r1, [pc, #28]	; (8008e7c <FT5336_RegisterBusIO+0x3c>)
 8008e60:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8008e62:	4907      	ldr	r1, [pc, #28]	; (8008e80 <FT5336_RegisterBusIO+0x40>)
 8008e64:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8008e66:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 8008e68:	b122      	cbz	r2, 8008e74 <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 8008e6a:	4790      	blx	r2
}
 8008e6c:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e72:	4770      	bx	lr
      ret = FT5336_ERROR;
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008e78:	e7f8      	b.n	8008e6c <FT5336_RegisterBusIO+0x2c>
 8008e7a:	bf00      	nop
 8008e7c:	08008c63 	.word	0x08008c63
 8008e80:	08008c6d 	.word	0x08008c6d

08008e84 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8008e84:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008e86:	6844      	ldr	r4, [r0, #4]
 8008e88:	6880      	ldr	r0, [r0, #8]
 8008e8a:	47a0      	blx	r4
}
 8008e8c:	bd10      	pop	{r4, pc}

08008e8e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8008e8e:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8008e90:	6804      	ldr	r4, [r0, #0]
 8008e92:	6880      	ldr	r0, [r0, #8]
 8008e94:	47a0      	blx	r4
}
 8008e96:	bd10      	pop	{r4, pc}

08008e98 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008e98:	b508      	push	{r3, lr}
 8008e9a:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	f7ff fff0 	bl	8008e84 <ft5336_read_reg>
}
 8008ea4:	bd08      	pop	{r3, pc}

08008ea6 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008ea6:	b510      	push	{r4, lr}
 8008ea8:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8008eaa:	2301      	movs	r3, #1
 8008eac:	460a      	mov	r2, r1
 8008eae:	2102      	movs	r1, #2
 8008eb0:	f7ff ffe8 	bl	8008e84 <ft5336_read_reg>
  
  if(ret == 0)
 8008eb4:	b918      	cbnz	r0, 8008ebe <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8008eb6:	7823      	ldrb	r3, [r4, #0]
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8008ebe:	bd10      	pop	{r4, pc}

08008ec0 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8008ec0:	b500      	push	{lr}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8008ec8:	2301      	movs	r3, #1
 8008eca:	f10d 0207 	add.w	r2, sp, #7
 8008ece:	2191      	movs	r1, #145	; 0x91
 8008ed0:	f7ff ffdd 	bl	8008e8e <ft5336_write_reg>
}
 8008ed4:	b003      	add	sp, #12
 8008ed6:	f85d fb04 	ldr.w	pc, [sp], #4

08008eda <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008eda:	b500      	push	{lr}
 8008edc:	b083      	sub	sp, #12
 8008ede:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	f10d 0207 	add.w	r2, sp, #7
 8008ee8:	2192      	movs	r1, #146	; 0x92
 8008eea:	f7ff ffd0 	bl	8008e8e <ft5336_write_reg>
}
 8008eee:	b003      	add	sp, #12
 8008ef0:	f85d fb04 	ldr.w	pc, [sp], #4

08008ef4 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008ef4:	b500      	push	{lr}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8008efc:	2301      	movs	r3, #1
 8008efe:	f10d 0207 	add.w	r2, sp, #7
 8008f02:	2193      	movs	r1, #147	; 0x93
 8008f04:	f7ff ffc3 	bl	8008e8e <ft5336_write_reg>
}
 8008f08:	b003      	add	sp, #12
 8008f0a:	f85d fb04 	ldr.w	pc, [sp], #4

08008f0e <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f0e:	b500      	push	{lr}
 8008f10:	b083      	sub	sp, #12
 8008f12:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8008f16:	2301      	movs	r3, #1
 8008f18:	f10d 0207 	add.w	r2, sp, #7
 8008f1c:	2194      	movs	r1, #148	; 0x94
 8008f1e:	f7ff ffb6 	bl	8008e8e <ft5336_write_reg>
}
 8008f22:	b003      	add	sp, #12
 8008f24:	f85d fb04 	ldr.w	pc, [sp], #4

08008f28 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f28:	b500      	push	{lr}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8008f30:	2301      	movs	r3, #1
 8008f32:	f10d 0207 	add.w	r2, sp, #7
 8008f36:	2195      	movs	r1, #149	; 0x95
 8008f38:	f7ff ffa9 	bl	8008e8e <ft5336_write_reg>
}
 8008f3c:	b003      	add	sp, #12
 8008f3e:	f85d fb04 	ldr.w	pc, [sp], #4

08008f42 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f42:	b500      	push	{lr}
 8008f44:	b083      	sub	sp, #12
 8008f46:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f10d 0207 	add.w	r2, sp, #7
 8008f50:	2196      	movs	r1, #150	; 0x96
 8008f52:	f7ff ff9c 	bl	8008e8e <ft5336_write_reg>
}
 8008f56:	b003      	add	sp, #12
 8008f58:	f85d fb04 	ldr.w	pc, [sp], #4

08008f5c <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f5c:	b500      	push	{lr}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8008f64:	2301      	movs	r3, #1
 8008f66:	f10d 0207 	add.w	r2, sp, #7
 8008f6a:	21a4      	movs	r1, #164	; 0xa4
 8008f6c:	f7ff ff8f 	bl	8008e8e <ft5336_write_reg>
}
 8008f70:	b003      	add	sp, #12
 8008f72:	f85d fb04 	ldr.w	pc, [sp], #4

08008f76 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008f76:	b508      	push	{r3, lr}
 8008f78:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	21a8      	movs	r1, #168	; 0xa8
 8008f7e:	f7ff ff81 	bl	8008e84 <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 8008f82:	bd08      	pop	{r3, pc}

08008f84 <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8008f84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f88:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8008f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f8e:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8008f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f94:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8008f96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f9a:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8008f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008fa0:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8008fa2:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8008fa4:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8008fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008faa:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8008fac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008fb0:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	4770      	bx	lr

08008fb6 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008fb6:	b570      	push	{r4, r5, r6, lr}
 8008fb8:	b09a      	sub	sp, #104	; 0x68
 8008fba:	4606      	mov	r6, r0
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8008fc0:	2250      	movs	r2, #80	; 0x50
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	a806      	add	r0, sp, #24
 8008fc6:	f01a fb53 	bl	8023670 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8008fca:	2300      	movs	r3, #0
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	9302      	str	r3, [sp, #8]
 8008fd0:	9303      	str	r3, [sp, #12]
 8008fd2:	9304      	str	r3, [sp, #16]
 8008fd4:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008fd6:	429c      	cmp	r4, r3
 8008fd8:	bf08      	it	eq
 8008fda:	2d01      	cmpeq	r5, #1
 8008fdc:	d061      	beq.n	80090a2 <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008fde:	2c00      	cmp	r4, #0
 8008fe0:	d143      	bne.n	800906a <MX25LM51245G_AutoPollingMemReady+0xb4>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008fe6:	2d01      	cmp	r5, #1
 8008fe8:	d041      	beq.n	800906e <MX25LM51245G_AutoPollingMemReady+0xb8>
 8008fea:	2300      	movs	r3, #0
 8008fec:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008fee:	2c00      	cmp	r4, #0
 8008ff0:	d13f      	bne.n	8009072 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8008ff6:	2c00      	cmp	r4, #0
 8008ff8:	d13d      	bne.n	8009076 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8008ffa:	2305      	movs	r3, #5
 8008ffc:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8008ffe:	2c00      	cmp	r4, #0
 8009000:	d13c      	bne.n	800907c <MX25LM51245G_AutoPollingMemReady+0xc6>
 8009002:	2300      	movs	r3, #0
 8009004:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009006:	2d01      	cmp	r5, #1
 8009008:	d03b      	beq.n	8009082 <MX25LM51245G_AutoPollingMemReady+0xcc>
 800900a:	2300      	movs	r3, #0
 800900c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800900e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009012:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009014:	2c00      	cmp	r4, #0
 8009016:	d137      	bne.n	8009088 <MX25LM51245G_AutoPollingMemReady+0xd2>
 8009018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800901c:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800901e:	2d01      	cmp	r5, #1
 8009020:	d035      	beq.n	800908e <MX25LM51245G_AutoPollingMemReady+0xd8>
 8009022:	2300      	movs	r3, #0
 8009024:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009026:	bbac      	cbnz	r4, 8009094 <MX25LM51245G_AutoPollingMemReady+0xde>
 8009028:	2300      	movs	r3, #0
 800902a:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800902c:	2d01      	cmp	r5, #1
 800902e:	d033      	beq.n	8009098 <MX25LM51245G_AutoPollingMemReady+0xe2>
 8009030:	2301      	movs	r3, #1
 8009032:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009034:	2d01      	cmp	r5, #1
 8009036:	d031      	beq.n	800909c <MX25LM51245G_AutoPollingMemReady+0xe6>
 8009038:	2300      	movs	r3, #0
 800903a:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 800903c:	2301      	movs	r3, #1
 800903e:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8009040:	2310      	movs	r3, #16
 8009042:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009044:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009048:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800904a:	f241 3288 	movw	r2, #5000	; 0x1388
 800904e:	a906      	add	r1, sp, #24
 8009050:	4630      	mov	r0, r6
 8009052:	f003 f8dd 	bl	800c210 <HAL_OSPI_Command>
 8009056:	bb38      	cbnz	r0, 80090a8 <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009058:	f241 3288 	movw	r2, #5000	; 0x1388
 800905c:	a901      	add	r1, sp, #4
 800905e:	4630      	mov	r0, r6
 8009060:	f003 f9e7 	bl	800c432 <HAL_OSPI_AutoPolling>
 8009064:	bb18      	cbnz	r0, 80090ae <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8009066:	b01a      	add	sp, #104	; 0x68
 8009068:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800906a:	2304      	movs	r3, #4
 800906c:	e7ba      	b.n	8008fe4 <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800906e:	2308      	movs	r3, #8
 8009070:	e7bc      	b.n	8008fec <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009072:	2310      	movs	r3, #16
 8009074:	e7be      	b.n	8008ff4 <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8009076:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800907a:	e7bf      	b.n	8008ffc <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800907c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009080:	e7c0      	b.n	8009004 <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009082:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009086:	e7c1      	b.n	800900c <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009088:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800908c:	e7c6      	b.n	800901c <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800908e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009092:	e7c7      	b.n	8009024 <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009094:	2305      	movs	r3, #5
 8009096:	e7c8      	b.n	800902a <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009098:	2302      	movs	r3, #2
 800909a:	e7ca      	b.n	8009032 <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800909c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80090a0:	e7cb      	b.n	800903a <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 80090a2:	f04f 30ff 	mov.w	r0, #4294967295
 80090a6:	e7de      	b.n	8009066 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ac:	e7db      	b.n	8009066 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 80090ae:	f04f 30ff 	mov.w	r0, #4294967295
 80090b2:	e7d8      	b.n	8009066 <MX25LM51245G_AutoPollingMemReady+0xb0>

080090b4 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	b096      	sub	sp, #88	; 0x58
 80090b8:	4606      	mov	r6, r0
 80090ba:	460c      	mov	r4, r1
 80090bc:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 80090be:	2250      	movs	r2, #80	; 0x50
 80090c0:	2100      	movs	r1, #0
 80090c2:	a802      	add	r0, sp, #8
 80090c4:	f01a fad4 	bl	8023670 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80090c8:	2300      	movs	r3, #0
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80090ce:	2c01      	cmp	r4, #1
 80090d0:	bf08      	it	eq
 80090d2:	429d      	cmpeq	r5, r3
 80090d4:	d04e      	beq.n	8009174 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80090d6:	2301      	movs	r3, #1
 80090d8:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80090da:	b104      	cbz	r4, 80090de <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 80090dc:	2304      	movs	r3, #4
 80090de:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80090e0:	b92c      	cbnz	r4, 80090ee <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 80090e2:	2300      	movs	r3, #0
 80090e4:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80090e6:	b924      	cbnz	r4, 80090f2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 80090e8:	bb15      	cbnz	r5, 8009130 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 80090ea:	230b      	movs	r3, #11
 80090ec:	e003      	b.n	80090f6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80090ee:	2310      	movs	r3, #16
 80090f0:	e7f8      	b.n	80090e4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80090f2:	f64e 4313 	movw	r3, #60435	; 0xec13
 80090f6:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80090f8:	b9e4      	cbnz	r4, 8009134 <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 80090fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090fe:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8009100:	b9dd      	cbnz	r5, 800913a <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 8009102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009106:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009108:	b9d4      	cbnz	r4, 8009140 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 800910a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800910e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8009110:	b9cc      	cbnz	r4, 8009146 <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 8009112:	2308      	movs	r3, #8
 8009114:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009116:	f241 3288 	movw	r2, #5000	; 0x1388
 800911a:	a902      	add	r1, sp, #8
 800911c:	4630      	mov	r0, r6
 800911e:	f003 f877 	bl	800c210 <HAL_OSPI_Command>
 8009122:	bb50      	cbnz	r0, 800917a <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8009124:	2302      	movs	r3, #2
 8009126:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8009128:	b97c      	cbnz	r4, 800914a <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 800912a:	b185      	cbz	r5, 800914e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 800912c:	2312      	movs	r3, #18
 800912e:	e00e      	b.n	800914e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8009130:	230c      	movs	r3, #12
 8009132:	e7e0      	b.n	80090f6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009138:	e7e1      	b.n	80090fe <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800913a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800913e:	e7e2      	b.n	8009106 <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009140:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009144:	e7e3      	b.n	800910e <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8009146:	2306      	movs	r3, #6
 8009148:	e7e4      	b.n	8009114 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800914a:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800914e:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009154:	f241 3288 	movw	r2, #5000	; 0x1388
 8009158:	a902      	add	r1, sp, #8
 800915a:	4630      	mov	r0, r6
 800915c:	f003 f858 	bl	800c210 <HAL_OSPI_Command>
 8009160:	b970      	cbnz	r0, 8009180 <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8009162:	2300      	movs	r3, #0
 8009164:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8009166:	4669      	mov	r1, sp
 8009168:	4630      	mov	r0, r6
 800916a:	f003 f9bf 	bl	800c4ec <HAL_OSPI_MemoryMapped>
 800916e:	b950      	cbnz	r0, 8009186 <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8009170:	b016      	add	sp, #88	; 0x58
 8009172:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 8009174:	f04f 30ff 	mov.w	r0, #4294967295
 8009178:	e7fa      	b.n	8009170 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 800917a:	f04f 30ff 	mov.w	r0, #4294967295
 800917e:	e7f7      	b.n	8009170 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	e7f4      	b.n	8009170 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8009186:	f04f 30ff 	mov.w	r0, #4294967295
 800918a:	e7f1      	b.n	8009170 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

0800918c <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800918c:	b510      	push	{r4, lr}
 800918e:	b096      	sub	sp, #88	; 0x58
 8009190:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8009192:	2250      	movs	r2, #80	; 0x50
 8009194:	2100      	movs	r1, #0
 8009196:	a802      	add	r0, sp, #8
 8009198:	f01a fa6a 	bl	8023670 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 800919c:	2300      	movs	r3, #0
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80091a2:	2301      	movs	r3, #1
 80091a4:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80091a6:	2304      	movs	r3, #4
 80091a8:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80091aa:	2308      	movs	r3, #8
 80091ac:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80091ae:	2310      	movs	r3, #16
 80091b0:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80091b2:	f64e 6311 	movw	r3, #60945	; 0xee11
 80091b6:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80091b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091bc:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80091be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091c2:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80091c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80091c8:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80091ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80091ce:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80091d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091d4:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80091d6:	2306      	movs	r3, #6
 80091d8:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80091da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80091de:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80091e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e4:	a902      	add	r1, sp, #8
 80091e6:	4620      	mov	r0, r4
 80091e8:	f003 f812 	bl	800c210 <HAL_OSPI_Command>
 80091ec:	b9b8      	cbnz	r0, 800921e <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80091ee:	2302      	movs	r3, #2
 80091f0:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80091f2:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80091f6:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 80091fc:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80091fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009202:	a902      	add	r1, sp, #8
 8009204:	4620      	mov	r0, r4
 8009206:	f003 f803 	bl	800c210 <HAL_OSPI_Command>
 800920a:	b958      	cbnz	r0, 8009224 <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800920c:	2300      	movs	r3, #0
 800920e:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8009210:	4669      	mov	r1, sp
 8009212:	4620      	mov	r0, r4
 8009214:	f003 f96a 	bl	800c4ec <HAL_OSPI_MemoryMapped>
 8009218:	b938      	cbnz	r0, 800922a <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800921a:	b016      	add	sp, #88	; 0x58
 800921c:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 800921e:	f04f 30ff 	mov.w	r0, #4294967295
 8009222:	e7fa      	b.n	800921a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8009224:	f04f 30ff 	mov.w	r0, #4294967295
 8009228:	e7f7      	b.n	800921a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 800922a:	f04f 30ff 	mov.w	r0, #4294967295
 800922e:	e7f4      	b.n	800921a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

08009230 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	b09a      	sub	sp, #104	; 0x68
 8009234:	4606      	mov	r6, r0
 8009236:	460c      	mov	r4, r1
 8009238:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 800923a:	2250      	movs	r2, #80	; 0x50
 800923c:	2100      	movs	r1, #0
 800923e:	a806      	add	r0, sp, #24
 8009240:	f01a fa16 	bl	8023670 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8009244:	2300      	movs	r3, #0
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	9303      	str	r3, [sp, #12]
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009250:	429c      	cmp	r4, r3
 8009252:	bf08      	it	eq
 8009254:	2d01      	cmpeq	r5, #1
 8009256:	d076      	beq.n	8009346 <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009258:	2c00      	cmp	r4, #0
 800925a:	d155      	bne.n	8009308 <MX25LM51245G_WriteEnable+0xd8>
 800925c:	2301      	movs	r3, #1
 800925e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009260:	2d01      	cmp	r5, #1
 8009262:	d053      	beq.n	800930c <MX25LM51245G_WriteEnable+0xdc>
 8009264:	2300      	movs	r3, #0
 8009266:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009268:	2c00      	cmp	r4, #0
 800926a:	d151      	bne.n	8009310 <MX25LM51245G_WriteEnable+0xe0>
 800926c:	2300      	movs	r3, #0
 800926e:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8009270:	2c00      	cmp	r4, #0
 8009272:	d14f      	bne.n	8009314 <MX25LM51245G_WriteEnable+0xe4>
 8009274:	2306      	movs	r3, #6
 8009276:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009278:	f241 3288 	movw	r2, #5000	; 0x1388
 800927c:	a906      	add	r1, sp, #24
 800927e:	4630      	mov	r0, r6
 8009280:	f002 ffc6 	bl	800c210 <HAL_OSPI_Command>
 8009284:	2800      	cmp	r0, #0
 8009286:	d161      	bne.n	800934c <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8009288:	2c00      	cmp	r4, #0
 800928a:	d146      	bne.n	800931a <MX25LM51245G_WriteEnable+0xea>
 800928c:	2305      	movs	r3, #5
 800928e:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8009290:	2c00      	cmp	r4, #0
 8009292:	d145      	bne.n	8009320 <MX25LM51245G_WriteEnable+0xf0>
 8009294:	2300      	movs	r3, #0
 8009296:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009298:	2d01      	cmp	r5, #1
 800929a:	d044      	beq.n	8009326 <MX25LM51245G_WriteEnable+0xf6>
 800929c:	2300      	movs	r3, #0
 800929e:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80092a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80092a4:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 80092a6:	2300      	movs	r3, #0
 80092a8:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80092aa:	2c00      	cmp	r4, #0
 80092ac:	d13e      	bne.n	800932c <MX25LM51245G_WriteEnable+0xfc>
 80092ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092b2:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80092b4:	2d01      	cmp	r5, #1
 80092b6:	d03c      	beq.n	8009332 <MX25LM51245G_WriteEnable+0x102>
 80092b8:	2300      	movs	r3, #0
 80092ba:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80092bc:	2c00      	cmp	r4, #0
 80092be:	d13b      	bne.n	8009338 <MX25LM51245G_WriteEnable+0x108>
 80092c0:	2300      	movs	r3, #0
 80092c2:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80092c4:	2d01      	cmp	r5, #1
 80092c6:	d039      	beq.n	800933c <MX25LM51245G_WriteEnable+0x10c>
 80092c8:	2301      	movs	r3, #1
 80092ca:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80092cc:	2d01      	cmp	r5, #1
 80092ce:	d037      	beq.n	8009340 <MX25LM51245G_WriteEnable+0x110>
 80092d0:	2300      	movs	r3, #0
 80092d2:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d8:	a906      	add	r1, sp, #24
 80092da:	4630      	mov	r0, r6
 80092dc:	f002 ff98 	bl	800c210 <HAL_OSPI_Command>
 80092e0:	bbb8      	cbnz	r0, 8009352 <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 80092e2:	2302      	movs	r3, #2
 80092e4:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 80092e6:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80092e8:	2300      	movs	r3, #0
 80092ea:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80092ec:	2310      	movs	r3, #16
 80092ee:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80092f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80092f4:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092fa:	a901      	add	r1, sp, #4
 80092fc:	4630      	mov	r0, r6
 80092fe:	f003 f898 	bl	800c432 <HAL_OSPI_AutoPolling>
 8009302:	bb48      	cbnz	r0, 8009358 <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8009304:	b01a      	add	sp, #104	; 0x68
 8009306:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009308:	2304      	movs	r3, #4
 800930a:	e7a8      	b.n	800925e <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800930c:	2308      	movs	r3, #8
 800930e:	e7aa      	b.n	8009266 <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009310:	2310      	movs	r3, #16
 8009312:	e7ac      	b.n	800926e <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8009314:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8009318:	e7ad      	b.n	8009276 <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800931a:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800931e:	e7b6      	b.n	800928e <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8009320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009324:	e7b7      	b.n	8009296 <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009326:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800932a:	e7b8      	b.n	800929e <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800932c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009330:	e7bf      	b.n	80092b2 <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009332:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009336:	e7c0      	b.n	80092ba <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009338:	2305      	movs	r3, #5
 800933a:	e7c2      	b.n	80092c2 <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800933c:	2302      	movs	r3, #2
 800933e:	e7c4      	b.n	80092ca <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009340:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009344:	e7c5      	b.n	80092d2 <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 8009346:	f04f 30ff 	mov.w	r0, #4294967295
 800934a:	e7db      	b.n	8009304 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 800934c:	f04f 30ff 	mov.w	r0, #4294967295
 8009350:	e7d8      	b.n	8009304 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8009352:	f04f 30ff 	mov.w	r0, #4294967295
 8009356:	e7d5      	b.n	8009304 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	e7d2      	b.n	8009304 <MX25LM51245G_WriteEnable+0xd4>

0800935e <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800935e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009360:	b095      	sub	sp, #84	; 0x54
 8009362:	4607      	mov	r7, r0
 8009364:	460c      	mov	r4, r1
 8009366:	4615      	mov	r5, r2
 8009368:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 800936a:	2250      	movs	r2, #80	; 0x50
 800936c:	2100      	movs	r1, #0
 800936e:	4668      	mov	r0, sp
 8009370:	f01a f97e 	bl	8023670 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009374:	2c00      	cmp	r4, #0
 8009376:	bf08      	it	eq
 8009378:	2d01      	cmpeq	r5, #1
 800937a:	d04e      	beq.n	800941a <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800937c:	bb24      	cbnz	r4, 80093c8 <MX25LM51245G_WriteCfg2Register+0x6a>
 800937e:	2301      	movs	r3, #1
 8009380:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009382:	2d01      	cmp	r5, #1
 8009384:	d022      	beq.n	80093cc <MX25LM51245G_WriteCfg2Register+0x6e>
 8009386:	2300      	movs	r3, #0
 8009388:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800938a:	bb0c      	cbnz	r4, 80093d0 <MX25LM51245G_WriteCfg2Register+0x72>
 800938c:	2300      	movs	r3, #0
 800938e:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8009390:	bb04      	cbnz	r4, 80093d4 <MX25LM51245G_WriteCfg2Register+0x76>
 8009392:	2372      	movs	r3, #114	; 0x72
 8009394:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009396:	bb04      	cbnz	r4, 80093da <MX25LM51245G_WriteCfg2Register+0x7c>
 8009398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800939c:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800939e:	2d01      	cmp	r5, #1
 80093a0:	d01e      	beq.n	80093e0 <MX25LM51245G_WriteCfg2Register+0x82>
 80093a2:	2300      	movs	r3, #0
 80093a4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80093a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80093aa:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 80093ac:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80093ae:	b9d4      	cbnz	r4, 80093e6 <MX25LM51245G_WriteCfg2Register+0x88>
 80093b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093b4:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80093b6:	2d01      	cmp	r5, #1
 80093b8:	d018      	beq.n	80093ec <MX25LM51245G_WriteCfg2Register+0x8e>
 80093ba:	2300      	movs	r3, #0
 80093bc:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80093be:	b1d4      	cbz	r4, 80093f6 <MX25LM51245G_WriteCfg2Register+0x98>
 80093c0:	2d01      	cmp	r5, #1
 80093c2:	d016      	beq.n	80093f2 <MX25LM51245G_WriteCfg2Register+0x94>
 80093c4:	2301      	movs	r3, #1
 80093c6:	e017      	b.n	80093f8 <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80093c8:	2304      	movs	r3, #4
 80093ca:	e7d9      	b.n	8009380 <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80093cc:	2308      	movs	r3, #8
 80093ce:	e7db      	b.n	8009388 <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80093d0:	2310      	movs	r3, #16
 80093d2:	e7dc      	b.n	800938e <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80093d4:	f247 238d 	movw	r3, #29325	; 0x728d
 80093d8:	e7dc      	b.n	8009394 <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80093da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093de:	e7dd      	b.n	800939c <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80093e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093e4:	e7de      	b.n	80093a4 <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80093e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80093ea:	e7e3      	b.n	80093b4 <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80093ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093f0:	e7e4      	b.n	80093bc <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80093f2:	2302      	movs	r3, #2
 80093f4:	e000      	b.n	80093f8 <MX25LM51245G_WriteCfg2Register+0x9a>
 80093f6:	2301      	movs	r3, #1
 80093f8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80093fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fe:	4669      	mov	r1, sp
 8009400:	4638      	mov	r0, r7
 8009402:	f002 ff05 	bl	800c210 <HAL_OSPI_Command>
 8009406:	b958      	cbnz	r0, 8009420 <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009408:	f241 3288 	movw	r2, #5000	; 0x1388
 800940c:	a91a      	add	r1, sp, #104	; 0x68
 800940e:	4638      	mov	r0, r7
 8009410:	f002 ff5f 	bl	800c2d2 <HAL_OSPI_Transmit>
 8009414:	b938      	cbnz	r0, 8009426 <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8009416:	b015      	add	sp, #84	; 0x54
 8009418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 800941a:	f04f 30ff 	mov.w	r0, #4294967295
 800941e:	e7fa      	b.n	8009416 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	e7f7      	b.n	8009416 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8009426:	f04f 30ff 	mov.w	r0, #4294967295
 800942a:	e7f4      	b.n	8009416 <MX25LM51245G_WriteCfg2Register+0xb8>

0800942c <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800942c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942e:	b095      	sub	sp, #84	; 0x54
 8009430:	4607      	mov	r7, r0
 8009432:	460c      	mov	r4, r1
 8009434:	4615      	mov	r5, r2
 8009436:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8009438:	2250      	movs	r2, #80	; 0x50
 800943a:	2100      	movs	r1, #0
 800943c:	4668      	mov	r0, sp
 800943e:	f01a f917 	bl	8023670 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009442:	2c00      	cmp	r4, #0
 8009444:	bf08      	it	eq
 8009446:	2d01      	cmpeq	r5, #1
 8009448:	d05b      	beq.n	8009502 <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800944a:	2c00      	cmp	r4, #0
 800944c:	d13d      	bne.n	80094ca <MX25LM51245G_ReadCfg2Register+0x9e>
 800944e:	2301      	movs	r3, #1
 8009450:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009452:	2d01      	cmp	r5, #1
 8009454:	d03b      	beq.n	80094ce <MX25LM51245G_ReadCfg2Register+0xa2>
 8009456:	2300      	movs	r3, #0
 8009458:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800945a:	2c00      	cmp	r4, #0
 800945c:	d139      	bne.n	80094d2 <MX25LM51245G_ReadCfg2Register+0xa6>
 800945e:	2300      	movs	r3, #0
 8009460:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8009462:	2c00      	cmp	r4, #0
 8009464:	d137      	bne.n	80094d6 <MX25LM51245G_ReadCfg2Register+0xaa>
 8009466:	2371      	movs	r3, #113	; 0x71
 8009468:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800946a:	2c00      	cmp	r4, #0
 800946c:	d136      	bne.n	80094dc <MX25LM51245G_ReadCfg2Register+0xb0>
 800946e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009472:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009474:	2d01      	cmp	r5, #1
 8009476:	d034      	beq.n	80094e2 <MX25LM51245G_ReadCfg2Register+0xb6>
 8009478:	2300      	movs	r3, #0
 800947a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800947c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009480:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 8009482:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009484:	bb84      	cbnz	r4, 80094e8 <MX25LM51245G_ReadCfg2Register+0xbc>
 8009486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800948a:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800948c:	2d01      	cmp	r5, #1
 800948e:	d02e      	beq.n	80094ee <MX25LM51245G_ReadCfg2Register+0xc2>
 8009490:	2300      	movs	r3, #0
 8009492:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009494:	bb74      	cbnz	r4, 80094f4 <MX25LM51245G_ReadCfg2Register+0xc8>
 8009496:	2300      	movs	r3, #0
 8009498:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800949a:	2d01      	cmp	r5, #1
 800949c:	d02c      	beq.n	80094f8 <MX25LM51245G_ReadCfg2Register+0xcc>
 800949e:	2301      	movs	r3, #1
 80094a0:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80094a2:	2d01      	cmp	r5, #1
 80094a4:	d02a      	beq.n	80094fc <MX25LM51245G_ReadCfg2Register+0xd0>
 80094a6:	2300      	movs	r3, #0
 80094a8:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80094aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ae:	4669      	mov	r1, sp
 80094b0:	4638      	mov	r0, r7
 80094b2:	f002 fead 	bl	800c210 <HAL_OSPI_Command>
 80094b6:	bb38      	cbnz	r0, 8009508 <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80094b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80094be:	4638      	mov	r0, r7
 80094c0:	f002 ff54 	bl	800c36c <HAL_OSPI_Receive>
 80094c4:	bb18      	cbnz	r0, 800950e <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80094c6:	b015      	add	sp, #84	; 0x54
 80094c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80094ca:	2304      	movs	r3, #4
 80094cc:	e7c0      	b.n	8009450 <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80094ce:	2308      	movs	r3, #8
 80094d0:	e7c2      	b.n	8009458 <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80094d2:	2310      	movs	r3, #16
 80094d4:	e7c4      	b.n	8009460 <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80094d6:	f247 138e 	movw	r3, #29070	; 0x718e
 80094da:	e7c5      	b.n	8009468 <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80094dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e0:	e7c7      	b.n	8009472 <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80094e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094e6:	e7c8      	b.n	800947a <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80094e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80094ec:	e7cd      	b.n	800948a <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80094ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094f2:	e7ce      	b.n	8009492 <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80094f4:	2305      	movs	r3, #5
 80094f6:	e7cf      	b.n	8009498 <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80094f8:	2302      	movs	r3, #2
 80094fa:	e7d1      	b.n	80094a0 <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80094fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009500:	e7d2      	b.n	80094a8 <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 8009502:	f04f 30ff 	mov.w	r0, #4294967295
 8009506:	e7de      	b.n	80094c6 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
 800950c:	e7db      	b.n	80094c6 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 800950e:	f04f 30ff 	mov.w	r0, #4294967295
 8009512:	e7d8      	b.n	80094c6 <MX25LM51245G_ReadCfg2Register+0x9a>

08009514 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	b094      	sub	sp, #80	; 0x50
 8009518:	4606      	mov	r6, r0
 800951a:	460c      	mov	r4, r1
 800951c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800951e:	2250      	movs	r2, #80	; 0x50
 8009520:	2100      	movs	r1, #0
 8009522:	4668      	mov	r0, sp
 8009524:	f01a f8a4 	bl	8023670 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009528:	2c00      	cmp	r4, #0
 800952a:	bf08      	it	eq
 800952c:	2d01      	cmpeq	r5, #1
 800952e:	d01e      	beq.n	800956e <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009530:	b9a4      	cbnz	r4, 800955c <MX25LM51245G_ResetEnable+0x48>
 8009532:	2301      	movs	r3, #1
 8009534:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009536:	2d01      	cmp	r5, #1
 8009538:	d012      	beq.n	8009560 <MX25LM51245G_ResetEnable+0x4c>
 800953a:	2300      	movs	r3, #0
 800953c:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800953e:	b98c      	cbnz	r4, 8009564 <MX25LM51245G_ResetEnable+0x50>
 8009540:	2300      	movs	r3, #0
 8009542:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8009544:	b984      	cbnz	r4, 8009568 <MX25LM51245G_ResetEnable+0x54>
 8009546:	2366      	movs	r3, #102	; 0x66
 8009548:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800954a:	f241 3288 	movw	r2, #5000	; 0x1388
 800954e:	4669      	mov	r1, sp
 8009550:	4630      	mov	r0, r6
 8009552:	f002 fe5d 	bl	800c210 <HAL_OSPI_Command>
 8009556:	b968      	cbnz	r0, 8009574 <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8009558:	b014      	add	sp, #80	; 0x50
 800955a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800955c:	2304      	movs	r3, #4
 800955e:	e7e9      	b.n	8009534 <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009560:	2308      	movs	r3, #8
 8009562:	e7eb      	b.n	800953c <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009564:	2310      	movs	r3, #16
 8009566:	e7ec      	b.n	8009542 <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8009568:	f246 6399 	movw	r3, #26265	; 0x6699
 800956c:	e7ec      	b.n	8009548 <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 800956e:	f04f 30ff 	mov.w	r0, #4294967295
 8009572:	e7f1      	b.n	8009558 <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 8009574:	f04f 30ff 	mov.w	r0, #4294967295
 8009578:	e7ee      	b.n	8009558 <MX25LM51245G_ResetEnable+0x44>

0800957a <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800957a:	b570      	push	{r4, r5, r6, lr}
 800957c:	b094      	sub	sp, #80	; 0x50
 800957e:	4606      	mov	r6, r0
 8009580:	460c      	mov	r4, r1
 8009582:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8009584:	2250      	movs	r2, #80	; 0x50
 8009586:	2100      	movs	r1, #0
 8009588:	4668      	mov	r0, sp
 800958a:	f01a f871 	bl	8023670 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800958e:	2c00      	cmp	r4, #0
 8009590:	bf08      	it	eq
 8009592:	2d01      	cmpeq	r5, #1
 8009594:	d01e      	beq.n	80095d4 <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009596:	b9a4      	cbnz	r4, 80095c2 <MX25LM51245G_ResetMemory+0x48>
 8009598:	2301      	movs	r3, #1
 800959a:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800959c:	2d01      	cmp	r5, #1
 800959e:	d012      	beq.n	80095c6 <MX25LM51245G_ResetMemory+0x4c>
 80095a0:	2300      	movs	r3, #0
 80095a2:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80095a4:	b98c      	cbnz	r4, 80095ca <MX25LM51245G_ResetMemory+0x50>
 80095a6:	2300      	movs	r3, #0
 80095a8:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80095aa:	b984      	cbnz	r4, 80095ce <MX25LM51245G_ResetMemory+0x54>
 80095ac:	2399      	movs	r3, #153	; 0x99
 80095ae:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80095b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b4:	4669      	mov	r1, sp
 80095b6:	4630      	mov	r0, r6
 80095b8:	f002 fe2a 	bl	800c210 <HAL_OSPI_Command>
 80095bc:	b968      	cbnz	r0, 80095da <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80095be:	b014      	add	sp, #80	; 0x50
 80095c0:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80095c2:	2304      	movs	r3, #4
 80095c4:	e7e9      	b.n	800959a <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80095c6:	2308      	movs	r3, #8
 80095c8:	e7eb      	b.n	80095a2 <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80095ca:	2310      	movs	r3, #16
 80095cc:	e7ec      	b.n	80095a8 <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80095ce:	f649 1366 	movw	r3, #39270	; 0x9966
 80095d2:	e7ec      	b.n	80095ae <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	e7f1      	b.n	80095be <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	e7ee      	b.n	80095be <MX25LM51245G_ResetMemory+0x44>

080095e0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80095e4:	4b32      	ldr	r3, [pc, #200]	; (80096b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 80095e6:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 80095ea:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80095ee:	4b31      	ldr	r3, [pc, #196]	; (80096b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 80095f0:	222c      	movs	r2, #44	; 0x2c
 80095f2:	fb02 3101 	mla	r1, r2, r1, r3
 80095f6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80095f8:	68ca      	ldr	r2, [r1, #12]
 80095fa:	eb03 0e02 	add.w	lr, r3, r2
 80095fe:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009602:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8009604:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009606:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800960a:	690b      	ldr	r3, [r1, #16]
 800960c:	6a08      	ldr	r0, [r1, #32]
 800960e:	1a1e      	subs	r6, r3, r0
 8009610:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009614:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009616:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800961a:	694b      	ldr	r3, [r1, #20]
 800961c:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 8009620:	f1be 0f00 	cmp.w	lr, #0
 8009624:	dd08      	ble.n	8009638 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 8009626:	2e00      	cmp	r6, #0
 8009628:	dd09      	ble.n	800963e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800962a:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 800962c:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009630:	2d0f      	cmp	r5, #15
 8009632:	d83b      	bhi.n	80096ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009634:	2400      	movs	r4, #0
 8009636:	e02b      	b.n	8009690 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 8009638:	f04f 0e00 	mov.w	lr, #0
 800963c:	e7f3      	b.n	8009626 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 800963e:	2600      	movs	r6, #0
 8009640:	e7f3      	b.n	800962a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009642:	3201      	adds	r2, #1
 8009644:	2a0f      	cmp	r2, #15
 8009646:	d822      	bhi.n	800968e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8009648:	fb02 f300 	mul.w	r3, r2, r0
 800964c:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009650:	459e      	cmp	lr, r3
 8009652:	bf8c      	ite	hi
 8009654:	2100      	movhi	r1, #0
 8009656:	2101      	movls	r1, #1
 8009658:	429e      	cmp	r6, r3
 800965a:	bf38      	it	cc
 800965c:	2100      	movcc	r1, #0
 800965e:	2900      	cmp	r1, #0
 8009660:	d0ef      	beq.n	8009642 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 8009662:	45a9      	cmp	r9, r5
 8009664:	d0ed      	beq.n	8009642 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009666:	4914      	ldr	r1, [pc, #80]	; (80096b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 8009668:	680b      	ldr	r3, [r1, #0]
 800966a:	f8df a050 	ldr.w	sl, [pc, #80]	; 80096bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 800966e:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8009672:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 8009676:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800967a:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800967e:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 8009682:	3301      	adds	r3, #1
 8009684:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009686:	2b7f      	cmp	r3, #127	; 0x7f
 8009688:	d810      	bhi.n	80096ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 800968a:	46a9      	mov	r9, r5
 800968c:	e7d9      	b.n	8009642 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800968e:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009690:	2c0f      	cmp	r4, #15
 8009692:	d809      	bhi.n	80096a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8009694:	1c67      	adds	r7, r4, #1
 8009696:	1c68      	adds	r0, r5, #1
 8009698:	fb04 0300 	mla	r3, r4, r0, r0
 800969c:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 80096a0:	4598      	cmp	r8, r3
 80096a2:	d8f4      	bhi.n	800968e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80096a4:	2200      	movs	r2, #0
 80096a6:	e7cd      	b.n	8009644 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80096a8:	3501      	adds	r5, #1
 80096aa:	e7c1      	b.n	8009630 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 80096ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b0:	3b9aca00 	.word	0x3b9aca00
 80096b4:	08026824 	.word	0x08026824
 80096b8:	24006f4c 	.word	0x24006f4c
 80096bc:	2400654c 	.word	0x2400654c

080096c0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	b089      	sub	sp, #36	; 0x24
 80096c6:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80096c8:	4f4b      	ldr	r7, [pc, #300]	; (80097f8 <I2C_Compute_SCLL_SCLH+0x138>)
 80096ca:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 80096ce:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80096d2:	494a      	ldr	r1, [pc, #296]	; (80097fc <I2C_Compute_SCLL_SCLH+0x13c>)
 80096d4:	232c      	movs	r3, #44	; 0x2c
 80096d6:	fb04 f303 	mul.w	r3, r4, r3
 80096da:	18ca      	adds	r2, r1, r3
 80096dc:	58cb      	ldr	r3, [r1, r3]
 80096de:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 80096e2:	fbb1 f1f3 	udiv	r1, r1, r3
 80096e6:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80096e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80096ea:	fb08 f303 	mul.w	r3, r8, r3
 80096ee:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80096f0:	6853      	ldr	r3, [r2, #4]
 80096f2:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80096f6:	6893      	ldr	r3, [r2, #8]
 80096f8:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 80096fc:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80096fe:	2300      	movs	r3, #0
 8009700:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 8009702:	f04f 33ff 	mov.w	r3, #4294967295
 8009706:	9307      	str	r3, [sp, #28]
 8009708:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800970a:	e060      	b.n	80097ce <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 800970c:	1af2      	subs	r2, r6, r3
 800970e:	e02a      	b.n	8009766 <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8009710:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009712:	29ff      	cmp	r1, #255	; 0xff
 8009714:	d837      	bhi.n	8009786 <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8009716:	1c4d      	adds	r5, r1, #1
 8009718:	fb01 0200 	mla	r2, r1, r0, r0
 800971c:	4442      	add	r2, r8
 800971e:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8009720:	eb0c 0302 	add.w	r3, ip, r2
 8009724:	4e35      	ldr	r6, [pc, #212]	; (80097fc <I2C_Compute_SCLL_SCLH+0x13c>)
 8009726:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800972a:	fb0b 6b04 	mla	fp, fp, r4, r6
 800972e:	f8db 6020 	ldr.w	r6, [fp, #32]
 8009732:	4433      	add	r3, r6
 8009734:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8009738:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800973a:	429f      	cmp	r7, r3
 800973c:	bf8c      	ite	hi
 800973e:	2600      	movhi	r6, #0
 8009740:	2601      	movls	r6, #1
 8009742:	4599      	cmp	r9, r3
 8009744:	bf38      	it	cc
 8009746:	2600      	movcc	r6, #0
 8009748:	2e00      	cmp	r6, #0
 800974a:	d0e1      	beq.n	8009710 <I2C_Compute_SCLL_SCLH+0x50>
 800974c:	4e2b      	ldr	r6, [pc, #172]	; (80097fc <I2C_Compute_SCLL_SCLH+0x13c>)
 800974e:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8009752:	fb0b 6604 	mla	r6, fp, r4, r6
 8009756:	69f6      	ldr	r6, [r6, #28]
 8009758:	4296      	cmp	r6, r2
 800975a:	d8d9      	bhi.n	8009710 <I2C_Compute_SCLL_SCLH+0x50>
 800975c:	4592      	cmp	sl, r2
 800975e:	d2d7      	bcs.n	8009710 <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 8009760:	9e05      	ldr	r6, [sp, #20]
 8009762:	1b9a      	subs	r2, r3, r6
 8009764:	d4d2      	bmi.n	800970c <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 8009766:	9b02      	ldr	r3, [sp, #8]
 8009768:	429a      	cmp	r2, r3
 800976a:	d2d1      	bcs.n	8009710 <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 8009772:	4b23      	ldr	r3, [pc, #140]	; (8009800 <I2C_Compute_SCLL_SCLH+0x140>)
 8009774:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8009778:	9e01      	ldr	r6, [sp, #4]
 800977a:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 800977c:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 800977e:	9202      	str	r2, [sp, #8]
              ret = count;
 8009780:	9b04      	ldr	r3, [sp, #16]
 8009782:	9307      	str	r3, [sp, #28]
 8009784:	e7c4      	b.n	8009710 <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009786:	9b03      	ldr	r3, [sp, #12]
 8009788:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800978a:	9b01      	ldr	r3, [sp, #4]
 800978c:	2bff      	cmp	r3, #255	; 0xff
 800978e:	d81b      	bhi.n	80097c8 <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009790:	9906      	ldr	r1, [sp, #24]
 8009792:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	9203      	str	r2, [sp, #12]
 800979c:	fb03 0c00 	mla	ip, r3, r0, r0
 80097a0:	ea4f 084a 	mov.w	r8, sl, lsl #1
 80097a4:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 80097a8:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80097aa:	4b14      	ldr	r3, [pc, #80]	; (80097fc <I2C_Compute_SCLL_SCLH+0x13c>)
 80097ac:	222c      	movs	r2, #44	; 0x2c
 80097ae:	fb02 3304 	mla	r3, r2, r4, r3
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	4563      	cmp	r3, ip
 80097b6:	d2e6      	bcs.n	8009786 <I2C_Compute_SCLL_SCLH+0xc6>
 80097b8:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 80097bc:	1a5b      	subs	r3, r3, r1
 80097be:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 80097c2:	d2e0      	bcs.n	8009786 <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80097c4:	2100      	movs	r1, #0
 80097c6:	e7a4      	b.n	8009712 <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80097c8:	9b04      	ldr	r3, [sp, #16]
 80097ca:	3301      	adds	r3, #1
 80097cc:	9304      	str	r3, [sp, #16]
 80097ce:	4b0d      	ldr	r3, [pc, #52]	; (8009804 <I2C_Compute_SCLL_SCLH+0x144>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	9a04      	ldr	r2, [sp, #16]
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d90a      	bls.n	80097ee <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80097d8:	9b04      	ldr	r3, [sp, #16]
 80097da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80097de:	4a08      	ldr	r2, [pc, #32]	; (8009800 <I2C_Compute_SCLL_SCLH+0x140>)
 80097e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80097e4:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80097e8:	2300      	movs	r3, #0
 80097ea:	9301      	str	r3, [sp, #4]
 80097ec:	e7cd      	b.n	800978a <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 80097ee:	9807      	ldr	r0, [sp, #28]
 80097f0:	b009      	add	sp, #36	; 0x24
 80097f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f6:	bf00      	nop
 80097f8:	3b9aca00 	.word	0x3b9aca00
 80097fc:	08026824 	.word	0x08026824
 8009800:	2400654c 	.word	0x2400654c
 8009804:	24006f4c 	.word	0x24006f4c

08009808 <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8009808:	2800      	cmp	r0, #0
 800980a:	bf18      	it	ne
 800980c:	2900      	cmpne	r1, #0
 800980e:	d134      	bne.n	800987a <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8009810:	2000      	movs	r0, #0
}
 8009812:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8009814:	3401      	adds	r4, #1
 8009816:	2c02      	cmp	r4, #2
 8009818:	d834      	bhi.n	8009884 <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800981a:	4b1c      	ldr	r3, [pc, #112]	; (800988c <I2C_GetTiming+0x84>)
 800981c:	212c      	movs	r1, #44	; 0x2c
 800981e:	fb01 3304 	mla	r3, r1, r4, r3
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	4293      	cmp	r3, r2
 8009826:	d8f5      	bhi.n	8009814 <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8009828:	4b18      	ldr	r3, [pc, #96]	; (800988c <I2C_GetTiming+0x84>)
 800982a:	fb01 3304 	mla	r3, r1, r4, r3
 800982e:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8009830:	4293      	cmp	r3, r2
 8009832:	d3ef      	bcc.n	8009814 <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8009834:	4621      	mov	r1, r4
 8009836:	4628      	mov	r0, r5
 8009838:	f7ff fed2 	bl	80095e0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f7ff ff3e 	bl	80096c0 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8009844:	287f      	cmp	r0, #127	; 0x7f
 8009846:	d81f      	bhi.n	8009888 <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009848:	4a11      	ldr	r2, [pc, #68]	; (8009890 <I2C_GetTiming+0x88>)
 800984a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800984e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8009852:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009856:	6863      	ldr	r3, [r4, #4]
 8009858:	051b      	lsls	r3, r3, #20
 800985a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800985e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009862:	68a1      	ldr	r1, [r4, #8]
 8009864:	0409      	lsls	r1, r1, #16
 8009866:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800986a:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800986c:	68e1      	ldr	r1, [r4, #12]
 800986e:	0209      	lsls	r1, r1, #8
 8009870:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009872:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8009874:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009876:	4318      	orrs	r0, r3
 8009878:	e005      	b.n	8009886 <I2C_GetTiming+0x7e>
{
 800987a:	b538      	push	{r3, r4, r5, lr}
 800987c:	4605      	mov	r5, r0
 800987e:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8009880:	2400      	movs	r4, #0
 8009882:	e7c8      	b.n	8009816 <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 8009884:	2000      	movs	r0, #0
}
 8009886:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 8009888:	2000      	movs	r0, #0
  return ret;
 800988a:	e7fc      	b.n	8009886 <I2C_GetTiming+0x7e>
 800988c:	08026824 	.word	0x08026824
 8009890:	2400654c 	.word	0x2400654c

08009894 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8009894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009898:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800989a:	4c2a      	ldr	r4, [pc, #168]	; (8009944 <I2C4_MspInit+0xb0>)
 800989c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80098a0:	f043 0308 	orr.w	r3, r3, #8
 80098a4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80098a8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80098ac:	f003 0308 	and.w	r3, r3, #8
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80098b4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80098b8:	f043 0308 	orr.w	r3, r3, #8
 80098bc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80098c0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80098c4:	f003 0308 	and.w	r3, r3, #8
 80098c8:	9301      	str	r3, [sp, #4]
 80098ca:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80098cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098d0:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80098d2:	f04f 0912 	mov.w	r9, #18
 80098d6:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80098da:	f04f 0800 	mov.w	r8, #0
 80098de:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80098e2:	2702      	movs	r7, #2
 80098e4:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80098e6:	2604      	movs	r6, #4
 80098e8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80098ea:	4d17      	ldr	r5, [pc, #92]	; (8009948 <I2C4_MspInit+0xb4>)
 80098ec:	a903      	add	r1, sp, #12
 80098ee:	4628      	mov	r0, r5
 80098f0:	f001 fada 	bl	800aea8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80098f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098f8:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80098fa:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80098fe:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8009902:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8009904:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009906:	a903      	add	r1, sp, #12
 8009908:	4628      	mov	r0, r5
 800990a:	f001 facd 	bl	800aea8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800990e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8009912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009916:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 800991a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 800991e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009922:	9302      	str	r3, [sp, #8]
 8009924:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8009926:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800992a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8009932:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800993a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800993e:	b009      	add	sp, #36	; 0x24
 8009940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009944:	58024400 	.word	0x58024400
 8009948:	58020c00 	.word	0x58020c00

0800994c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800994c:	b510      	push	{r4, lr}
 800994e:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8009950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009954:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8009956:	4c09      	ldr	r4, [pc, #36]	; (800997c <I2C4_MspDeInit+0x30>)
 8009958:	4620      	mov	r0, r4
 800995a:	f001 fbb5 	bl	800b0c8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800995e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009962:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8009964:	4620      	mov	r0, r4
 8009966:	f001 fbaf 	bl	800b0c8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800996a:	4a05      	ldr	r2, [pc, #20]	; (8009980 <I2C4_MspDeInit+0x34>)
 800996c:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8009970:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009974:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8009978:	b006      	add	sp, #24
 800997a:	bd10      	pop	{r4, pc}
 800997c:	58020c00 	.word	0x58020c00
 8009980:	58024400 	.word	0x58024400

08009984 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8009984:	b510      	push	{r4, lr}
 8009986:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009988:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800998c:	9402      	str	r4, [sp, #8]
 800998e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8009992:	9401      	str	r4, [sp, #4]
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	4613      	mov	r3, r2
 8009998:	460a      	mov	r2, r1
 800999a:	4601      	mov	r1, r0
 800999c:	4804      	ldr	r0, [pc, #16]	; (80099b0 <I2C4_WriteReg+0x2c>)
 800999e:	f001 fe98 	bl	800b6d2 <HAL_I2C_Mem_Write>
 80099a2:	b910      	cbnz	r0, 80099aa <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 80099a4:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 80099a6:	b004      	add	sp, #16
 80099a8:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 80099aa:	f06f 0007 	mvn.w	r0, #7
 80099ae:	e7fa      	b.n	80099a6 <I2C4_WriteReg+0x22>
 80099b0:	24006f50 	.word	0x24006f50

080099b4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80099b4:	b510      	push	{r4, lr}
 80099b6:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80099b8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80099bc:	9402      	str	r4, [sp, #8]
 80099be:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80099c2:	9401      	str	r4, [sp, #4]
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	4613      	mov	r3, r2
 80099c8:	460a      	mov	r2, r1
 80099ca:	4601      	mov	r1, r0
 80099cc:	4804      	ldr	r0, [pc, #16]	; (80099e0 <I2C4_ReadReg+0x2c>)
 80099ce:	f001 ff55 	bl	800b87c <HAL_I2C_Mem_Read>
 80099d2:	b910      	cbnz	r0, 80099da <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 80099d4:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 80099d6:	b004      	add	sp, #16
 80099d8:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 80099da:	f06f 0007 	mvn.w	r0, #7
 80099de:	e7fa      	b.n	80099d6 <I2C4_ReadReg+0x22>
 80099e0:	24006f50 	.word	0x24006f50

080099e4 <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 80099e4:	4a09      	ldr	r2, [pc, #36]	; (8009a0c <BSP_I2C4_DeInit+0x28>)
 80099e6:	6813      	ldr	r3, [r2, #0]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80099ec:	b10b      	cbz	r3, 80099f2 <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 80099ee:	2000      	movs	r0, #0
}
 80099f0:	4770      	bx	lr
{
 80099f2:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 80099f4:	4c06      	ldr	r4, [pc, #24]	; (8009a10 <BSP_I2C4_DeInit+0x2c>)
 80099f6:	4620      	mov	r0, r4
 80099f8:	f7ff ffa8 	bl	800994c <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80099fc:	4620      	mov	r0, r4
 80099fe:	f001 fe4f 	bl	800b6a0 <HAL_I2C_DeInit>
 8009a02:	b900      	cbnz	r0, 8009a06 <BSP_I2C4_DeInit+0x22>
}
 8009a04:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 8009a06:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8009a0a:	e7fb      	b.n	8009a04 <BSP_I2C4_DeInit+0x20>
 8009a0c:	24006548 	.word	0x24006548
 8009a10:	24006f50 	.word	0x24006f50

08009a14 <MX_I2C4_Init>:
{
 8009a14:	b510      	push	{r4, lr}
 8009a16:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 8009a18:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009a1e:	2201      	movs	r2, #1
 8009a20:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009a22:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8009a24:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009a26:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009a28:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009a2a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8009a2c:	f001 fdda 	bl	800b5e4 <HAL_I2C_Init>
 8009a30:	b108      	cbz	r0, 8009a36 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8009a32:	2001      	movs	r0, #1
}
 8009a34:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8009a36:	2100      	movs	r1, #0
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f001 fffc 	bl	800ba36 <HAL_I2CEx_ConfigAnalogFilter>
 8009a3e:	b108      	cbz	r0, 8009a44 <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8009a40:	2001      	movs	r0, #1
 8009a42:	e7f7      	b.n	8009a34 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8009a44:	2100      	movs	r1, #0
 8009a46:	4620      	mov	r0, r4
 8009a48:	f002 f823 	bl	800ba92 <HAL_I2CEx_ConfigDigitalFilter>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d0f1      	beq.n	8009a34 <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 8009a50:	2001      	movs	r0, #1
 8009a52:	e7ef      	b.n	8009a34 <MX_I2C4_Init+0x20>

08009a54 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8009a54:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <BSP_I2C4_Init+0x48>)
 8009a56:	4a12      	ldr	r2, [pc, #72]	; (8009aa0 <BSP_I2C4_Init+0x4c>)
 8009a58:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 8009a5a:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <BSP_I2C4_Init+0x50>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	b10b      	cbz	r3, 8009a64 <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 8009a60:	2000      	movs	r0, #0
}
 8009a62:	4770      	bx	lr
{
 8009a64:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 8009a66:	3301      	adds	r3, #1
 8009a68:	4a0e      	ldr	r2, [pc, #56]	; (8009aa4 <BSP_I2C4_Init+0x50>)
 8009a6a:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8009a6c:	480b      	ldr	r0, [pc, #44]	; (8009a9c <BSP_I2C4_Init+0x48>)
 8009a6e:	f001 ffdd 	bl	800ba2c <HAL_I2C_GetState>
 8009a72:	b108      	cbz	r0, 8009a78 <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8009a74:	2000      	movs	r0, #0
}
 8009a76:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 8009a78:	4c08      	ldr	r4, [pc, #32]	; (8009a9c <BSP_I2C4_Init+0x48>)
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f7ff ff0a 	bl	8009894 <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8009a80:	f003 fd04 	bl	800d48c <HAL_RCC_GetPCLK2Freq>
 8009a84:	4908      	ldr	r1, [pc, #32]	; (8009aa8 <BSP_I2C4_Init+0x54>)
 8009a86:	f7ff febf 	bl	8009808 <I2C_GetTiming>
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f7ff ffc1 	bl	8009a14 <MX_I2C4_Init>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d0ef      	beq.n	8009a76 <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 8009a96:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8009a9a:	e7ec      	b.n	8009a76 <BSP_I2C4_Init+0x22>
 8009a9c:	24006f50 	.word	0x24006f50
 8009aa0:	58001c00 	.word	0x58001c00
 8009aa4:	24006548 	.word	0x24006548
 8009aa8:	000186a0 	.word	0x000186a0

08009aac <BSP_I2C4_WriteReg>:
{
 8009aac:	b500      	push	{lr}
 8009aae:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f7ff ff65 	bl	8009984 <I2C4_WriteReg>
 8009aba:	b910      	cbnz	r0, 8009ac2 <BSP_I2C4_WriteReg+0x16>
}
 8009abc:	b003      	add	sp, #12
 8009abe:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009ac2:	4805      	ldr	r0, [pc, #20]	; (8009ad8 <BSP_I2C4_WriteReg+0x2c>)
 8009ac4:	f001 ffb5 	bl	800ba32 <HAL_I2C_GetError>
 8009ac8:	2804      	cmp	r0, #4
 8009aca:	d002      	beq.n	8009ad2 <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009acc:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009ad0:	e7f4      	b.n	8009abc <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009ad2:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009ad6:	e7f1      	b.n	8009abc <BSP_I2C4_WriteReg+0x10>
 8009ad8:	24006f50 	.word	0x24006f50

08009adc <BSP_I2C4_ReadReg>:
{
 8009adc:	b500      	push	{lr}
 8009ade:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f7ff ff65 	bl	80099b4 <I2C4_ReadReg>
 8009aea:	b910      	cbnz	r0, 8009af2 <BSP_I2C4_ReadReg+0x16>
}
 8009aec:	b003      	add	sp, #12
 8009aee:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009af2:	4805      	ldr	r0, [pc, #20]	; (8009b08 <BSP_I2C4_ReadReg+0x2c>)
 8009af4:	f001 ff9d 	bl	800ba32 <HAL_I2C_GetError>
 8009af8:	2804      	cmp	r0, #4
 8009afa:	d002      	beq.n	8009b02 <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009afc:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009b00:	e7f4      	b.n	8009aec <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009b02:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009b06:	e7f1      	b.n	8009aec <BSP_I2C4_ReadReg+0x10>
 8009b08:	24006f50 	.word	0x24006f50

08009b0c <BSP_GetTick>:
{
 8009b0c:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 8009b0e:	f000 fde7 	bl	800a6e0 <HAL_GetTick>
}
 8009b12:	bd08      	pop	{r3, pc}

08009b14 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8009b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8009b1a:	4b7e      	ldr	r3, [pc, #504]	; (8009d14 <OSPI_NOR_MspInit+0x200>)
 8009b1c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b24:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8009b28:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009b2c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009b30:	9201      	str	r2, [sp, #4]
 8009b32:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8009b34:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b3a:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8009b3c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009b3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b42:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8009b44:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b48:	f042 0202 	orr.w	r2, r2, #2
 8009b4c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b50:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b54:	f002 0202 	and.w	r2, r2, #2
 8009b58:	9202      	str	r2, [sp, #8]
 8009b5a:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 8009b5c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b60:	f042 0204 	orr.w	r2, r2, #4
 8009b64:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b68:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b6c:	f002 0204 	and.w	r2, r2, #4
 8009b70:	9203      	str	r2, [sp, #12]
 8009b72:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 8009b74:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b7c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b80:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b84:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009b88:	9204      	str	r2, [sp, #16]
 8009b8a:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 8009b8c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b90:	f042 0208 	orr.w	r2, r2, #8
 8009b94:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b98:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b9c:	f002 0208 	and.w	r2, r2, #8
 8009ba0:	9205      	str	r2, [sp, #20]
 8009ba2:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 8009ba4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009ba8:	f042 0220 	orr.w	r2, r2, #32
 8009bac:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009bb0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009bb4:	f002 0220 	and.w	r2, r2, #32
 8009bb8:	9206      	str	r2, [sp, #24]
 8009bba:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 8009bbc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009bc0:	f042 0220 	orr.w	r2, r2, #32
 8009bc4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009bc8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009bcc:	f002 0220 	and.w	r2, r2, #32
 8009bd0:	9207      	str	r2, [sp, #28]
 8009bd2:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8009bd4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009bd8:	f042 0220 	orr.w	r2, r2, #32
 8009bdc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009be0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009be4:	f002 0220 	and.w	r2, r2, #32
 8009be8:	9208      	str	r2, [sp, #32]
 8009bea:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 8009bec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009bf0:	f042 0204 	orr.w	r2, r2, #4
 8009bf4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009bf8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009bfc:	f002 0204 	and.w	r2, r2, #4
 8009c00:	9209      	str	r2, [sp, #36]	; 0x24
 8009c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8009c04:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009c08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c0c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009c10:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009c14:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009c18:	920a      	str	r2, [sp, #40]	; 0x28
 8009c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 8009c1c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c24:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009c28:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009c2c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009c30:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8009c34:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c3c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009c40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c48:	930c      	str	r3, [sp, #48]	; 0x30
 8009c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8009c4c:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8009c50:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009c54:	f04f 0a02 	mov.w	sl, #2
 8009c58:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c60:	2303      	movs	r3, #3
 8009c62:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8009c64:	240a      	movs	r4, #10
 8009c66:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8009c68:	a90d      	add	r1, sp, #52	; 0x34
 8009c6a:	482b      	ldr	r0, [pc, #172]	; (8009d18 <OSPI_NOR_MspInit+0x204>)
 8009c6c:	f001 f91c 	bl	800aea8 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8009c70:	2320      	movs	r3, #32
 8009c72:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8009c74:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8009c76:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8009d2c <OSPI_NOR_MspInit+0x218>
 8009c7a:	a90d      	add	r1, sp, #52	; 0x34
 8009c7c:	4648      	mov	r0, r9
 8009c7e:	f001 f913 	bl	800aea8 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8009c82:	2304      	movs	r3, #4
 8009c84:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8009c8a:	2509      	movs	r5, #9
 8009c8c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8009c8e:	a90d      	add	r1, sp, #52	; 0x34
 8009c90:	4822      	ldr	r0, [pc, #136]	; (8009d1c <OSPI_NOR_MspInit+0x208>)
 8009c92:	f001 f909 	bl	800aea8 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8009c96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c9a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8009c9c:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8009c9e:	a90d      	add	r1, sp, #52	; 0x34
 8009ca0:	481f      	ldr	r0, [pc, #124]	; (8009d20 <OSPI_NOR_MspInit+0x20c>)
 8009ca2:	f001 f901 	bl	800aea8 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8009ca6:	f44f 7800 	mov.w	r8, #512	; 0x200
 8009caa:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8009cae:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8009cb0:	4e1c      	ldr	r6, [pc, #112]	; (8009d24 <OSPI_NOR_MspInit+0x210>)
 8009cb2:	a90d      	add	r1, sp, #52	; 0x34
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f001 f8f7 	bl	800aea8 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8009cba:	2780      	movs	r7, #128	; 0x80
 8009cbc:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8009cbe:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8009cc0:	a90d      	add	r1, sp, #52	; 0x34
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f001 f8f0 	bl	800aea8 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8009cc8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8009ccc:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8009cce:	a90d      	add	r1, sp, #52	; 0x34
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f001 f8e9 	bl	800aea8 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8009cd6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8009cda:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8009cdc:	a90d      	add	r1, sp, #52	; 0x34
 8009cde:	4648      	mov	r0, r9
 8009ce0:	f001 f8e2 	bl	800aea8 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8009ce4:	2308      	movs	r3, #8
 8009ce6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8009ce8:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8009cea:	a90d      	add	r1, sp, #52	; 0x34
 8009cec:	480e      	ldr	r0, [pc, #56]	; (8009d28 <OSPI_NOR_MspInit+0x214>)
 8009cee:	f001 f8db 	bl	800aea8 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8009cf2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8009cf6:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8009cf8:	a90d      	add	r1, sp, #52	; 0x34
 8009cfa:	4807      	ldr	r0, [pc, #28]	; (8009d18 <OSPI_NOR_MspInit+0x204>)
 8009cfc:	f001 f8d4 	bl	800aea8 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8009d00:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8009d02:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8009d04:	a90d      	add	r1, sp, #52	; 0x34
 8009d06:	4806      	ldr	r0, [pc, #24]	; (8009d20 <OSPI_NOR_MspInit+0x20c>)
 8009d08:	f001 f8ce 	bl	800aea8 <HAL_GPIO_Init>
}
 8009d0c:	b013      	add	sp, #76	; 0x4c
 8009d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d12:	bf00      	nop
 8009d14:	58024400 	.word	0x58024400
 8009d18:	58021800 	.word	0x58021800
 8009d1c:	58020400 	.word	0x58020400
 8009d20:	58020c00 	.word	0x58020c00
 8009d24:	58021400 	.word	0x58021400
 8009d28:	58021c00 	.word	0x58021c00
 8009d2c:	58020800 	.word	0x58020800

08009d30 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009d34:	4c24      	ldr	r4, [pc, #144]	; (8009dc8 <OSPI_NOR_ResetMemory+0x98>)
 8009d36:	235c      	movs	r3, #92	; 0x5c
 8009d38:	fb03 4400 	mla	r4, r3, r0, r4
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4611      	mov	r1, r2
 8009d40:	4620      	mov	r0, r4
 8009d42:	f7ff fbe7 	bl	8009514 <MX25LM51245G_ResetEnable>
 8009d46:	bb60      	cbnz	r0, 8009da2 <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f7ff fc14 	bl	800957a <MX25LM51245G_ResetMemory>
 8009d52:	bb48      	cbnz	r0, 8009da8 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009d54:	2200      	movs	r2, #0
 8009d56:	2101      	movs	r1, #1
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f7ff fbdb 	bl	8009514 <MX25LM51245G_ResetEnable>
 8009d5e:	bb30      	cbnz	r0, 8009dae <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009d60:	2200      	movs	r2, #0
 8009d62:	2101      	movs	r1, #1
 8009d64:	4620      	mov	r0, r4
 8009d66:	f7ff fc08 	bl	800957a <MX25LM51245G_ResetMemory>
 8009d6a:	bb18      	cbnz	r0, 8009db4 <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	4611      	mov	r1, r2
 8009d70:	4620      	mov	r0, r4
 8009d72:	f7ff fbcf 	bl	8009514 <MX25LM51245G_ResetEnable>
 8009d76:	bb00      	cbnz	r0, 8009dba <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8009d78:	2201      	movs	r2, #1
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f7ff fbfc 	bl	800957a <MX25LM51245G_ResetMemory>
 8009d82:	4604      	mov	r4, r0
 8009d84:	b9e0      	cbnz	r0, 8009dc0 <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8009d86:	4811      	ldr	r0, [pc, #68]	; (8009dcc <OSPI_NOR_ResetMemory+0x9c>)
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 8009d8e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8009d92:	2300      	movs	r3, #0
 8009d94:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8009d96:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8009d98:	2064      	movs	r0, #100	; 0x64
 8009d9a:	f000 fca7 	bl	800a6ec <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 8009d9e:	4620      	mov	r0, r4
 8009da0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009da2:	f06f 0404 	mvn.w	r4, #4
 8009da6:	e7fa      	b.n	8009d9e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009da8:	f06f 0404 	mvn.w	r4, #4
 8009dac:	e7f7      	b.n	8009d9e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009dae:	f06f 0404 	mvn.w	r4, #4
 8009db2:	e7f4      	b.n	8009d9e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009db4:	f06f 0404 	mvn.w	r4, #4
 8009db8:	e7f1      	b.n	8009d9e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009dba:	f06f 0404 	mvn.w	r4, #4
 8009dbe:	e7ee      	b.n	8009d9e <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009dc0:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8009dc4:	e7eb      	b.n	8009d9e <OSPI_NOR_ResetMemory+0x6e>
 8009dc6:	bf00      	nop
 8009dc8:	24006fa4 	.word	0x24006fa4
 8009dcc:	24006f9c 	.word	0x24006f9c

08009dd0 <OSPI_NOR_MspDeInit>:
{
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8009dd2:	2104      	movs	r1, #4
 8009dd4:	4820      	ldr	r0, [pc, #128]	; (8009e58 <OSPI_NOR_MspDeInit+0x88>)
 8009dd6:	f001 f977 	bl	800b0c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8009dda:	4f20      	ldr	r7, [pc, #128]	; (8009e5c <OSPI_NOR_MspDeInit+0x8c>)
 8009ddc:	2120      	movs	r1, #32
 8009dde:	4638      	mov	r0, r7
 8009de0:	f001 f972 	bl	800b0c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8009de4:	4e1e      	ldr	r6, [pc, #120]	; (8009e60 <OSPI_NOR_MspDeInit+0x90>)
 8009de6:	2140      	movs	r1, #64	; 0x40
 8009de8:	4630      	mov	r0, r6
 8009dea:	f001 f96d 	bl	800b0c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8009dee:	4d1d      	ldr	r5, [pc, #116]	; (8009e64 <OSPI_NOR_MspDeInit+0x94>)
 8009df0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009df4:	4628      	mov	r0, r5
 8009df6:	f001 f967 	bl	800b0c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8009dfa:	4c1b      	ldr	r4, [pc, #108]	; (8009e68 <OSPI_NOR_MspDeInit+0x98>)
 8009dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e00:	4620      	mov	r0, r4
 8009e02:	f001 f961 	bl	800b0c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8009e06:	2180      	movs	r1, #128	; 0x80
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f001 f95d 	bl	800b0c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8009e0e:	2140      	movs	r1, #64	; 0x40
 8009e10:	4620      	mov	r0, r4
 8009e12:	f001 f959 	bl	800b0c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8009e16:	2102      	movs	r1, #2
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f001 f955 	bl	800b0c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8009e1e:	2108      	movs	r1, #8
 8009e20:	4812      	ldr	r0, [pc, #72]	; (8009e6c <OSPI_NOR_MspDeInit+0x9c>)
 8009e22:	f001 f951 	bl	800b0c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8009e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f001 f94c 	bl	800b0c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8009e30:	2180      	movs	r1, #128	; 0x80
 8009e32:	4628      	mov	r0, r5
 8009e34:	f001 f948 	bl	800b0c8 <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 8009e38:	4b0d      	ldr	r3, [pc, #52]	; (8009e70 <OSPI_NOR_MspDeInit+0xa0>)
 8009e3a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e40:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8009e42:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009e44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e48:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 8009e4a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009e4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e52:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8009e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e58:	58020400 	.word	0x58020400
 8009e5c:	58020800 	.word	0x58020800
 8009e60:	58021800 	.word	0x58021800
 8009e64:	58020c00 	.word	0x58020c00
 8009e68:	58021400 	.word	0x58021400
 8009e6c:	58021c00 	.word	0x58021c00
 8009e70:	58024400 	.word	0x58024400

08009e74 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8009e74:	b570      	push	{r4, r5, r6, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009e7a:	4d2b      	ldr	r5, [pc, #172]	; (8009f28 <OSPI_NOR_ExitOPIMode+0xb4>)
 8009e7c:	235c      	movs	r3, #92	; 0x5c
 8009e7e:	fb03 5500 	mla	r5, r3, r0, r5
 8009e82:	4b2a      	ldr	r3, [pc, #168]	; (8009f2c <OSPI_NOR_ExitOPIMode+0xb8>)
 8009e84:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009e88:	789a      	ldrb	r2, [r3, #2]
 8009e8a:	7859      	ldrb	r1, [r3, #1]
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f7ff f9cf 	bl	8009230 <MX25LM51245G_WriteEnable>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d138      	bne.n	8009f08 <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 8009e9c:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8009ea0:	4922      	ldr	r1, [pc, #136]	; (8009f2c <OSPI_NOR_ExitOPIMode+0xb8>)
 8009ea2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	788a      	ldrb	r2, [r1, #2]
 8009eaa:	7849      	ldrb	r1, [r1, #1]
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7ff fa56 	bl	800935e <MX25LM51245G_WriteCfg2Register>
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	bb58      	cbnz	r0, 8009f0e <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8009eb6:	2028      	movs	r0, #40	; 0x28
 8009eb8:	f000 fc18 	bl	800a6ec <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8009ebc:	4b1b      	ldr	r3, [pc, #108]	; (8009f2c <OSPI_NOR_ExitOPIMode+0xb8>)
 8009ebe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ec2:	789b      	ldrb	r3, [r3, #2]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d014      	beq.n	8009ef2 <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	4611      	mov	r1, r2
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f7ff f872 	bl	8008fb6 <MX25LM51245G_AutoPollingMemReady>
 8009ed2:	b9f8      	cbnz	r0, 8009f14 <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8009ed4:	ab03      	add	r3, sp, #12
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	461a      	mov	r2, r3
 8009edc:	4619      	mov	r1, r3
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f7ff faa4 	bl	800942c <MX25LM51245G_ReadCfg2Register>
 8009ee4:	b9c8      	cbnz	r0, 8009f1a <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 8009ee6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009eea:	b9cb      	cbnz	r3, 8009f20 <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 8009eec:	4630      	mov	r0, r6
 8009eee:	b004      	add	sp, #16
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8009ef6:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f002 fc6f 	bl	800c7dc <HAL_OSPI_Init>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d0e2      	beq.n	8009ec8 <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8009f02:	f06f 0603 	mvn.w	r6, #3
 8009f06:	e7df      	b.n	8009ec8 <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f08:	f06f 0604 	mvn.w	r6, #4
 8009f0c:	e7ee      	b.n	8009eec <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f0e:	f06f 0604 	mvn.w	r6, #4
 8009f12:	e7eb      	b.n	8009eec <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f14:	f06f 0604 	mvn.w	r6, #4
 8009f18:	e7e8      	b.n	8009eec <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f1a:	f06f 0604 	mvn.w	r6, #4
 8009f1e:	e7e5      	b.n	8009eec <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f20:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8009f24:	e7e2      	b.n	8009eec <OSPI_NOR_ExitOPIMode+0x78>
 8009f26:	bf00      	nop
 8009f28:	24006fa4 	.word	0x24006fa4
 8009f2c:	24006f9c 	.word	0x24006f9c

08009f30 <OSPI_NOR_EnterSOPIMode>:
{
 8009f30:	b530      	push	{r4, r5, lr}
 8009f32:	b085      	sub	sp, #20
 8009f34:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009f36:	4c2e      	ldr	r4, [pc, #184]	; (8009ff0 <OSPI_NOR_EnterSOPIMode+0xc0>)
 8009f38:	235c      	movs	r3, #92	; 0x5c
 8009f3a:	fb03 4400 	mla	r4, r3, r0, r4
 8009f3e:	4b2d      	ldr	r3, [pc, #180]	; (8009ff4 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009f40:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009f44:	789a      	ldrb	r2, [r3, #2]
 8009f46:	7859      	ldrb	r1, [r3, #1]
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7ff f971 	bl	8009230 <MX25LM51245G_WriteEnable>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d139      	bne.n	8009fc6 <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8009f52:	4928      	ldr	r1, [pc, #160]	; (8009ff4 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009f54:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009f58:	2307      	movs	r3, #7
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009f60:	788a      	ldrb	r2, [r1, #2]
 8009f62:	7849      	ldrb	r1, [r1, #1]
 8009f64:	4620      	mov	r0, r4
 8009f66:	f7ff f9fa 	bl	800935e <MX25LM51245G_WriteCfg2Register>
 8009f6a:	bb78      	cbnz	r0, 8009fcc <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009f6c:	4b21      	ldr	r3, [pc, #132]	; (8009ff4 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009f6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009f72:	789a      	ldrb	r2, [r3, #2]
 8009f74:	7859      	ldrb	r1, [r3, #1]
 8009f76:	4620      	mov	r0, r4
 8009f78:	f7ff f95a 	bl	8009230 <MX25LM51245G_WriteEnable>
 8009f7c:	bb48      	cbnz	r0, 8009fd2 <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8009f7e:	481d      	ldr	r0, [pc, #116]	; (8009ff4 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009f80:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8009f84:	2301      	movs	r3, #1
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	78aa      	ldrb	r2, [r5, #2]
 8009f8c:	7869      	ldrb	r1, [r5, #1]
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f7ff f9e5 	bl	800935e <MX25LM51245G_WriteCfg2Register>
 8009f94:	bb00      	cbnz	r0, 8009fd8 <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8009f96:	2028      	movs	r0, #40	; 0x28
 8009f98:	f000 fba8 	bl	800a6ec <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f7ff f808 	bl	8008fb6 <MX25LM51245G_AutoPollingMemReady>
 8009fa6:	b9d0      	cbnz	r0, 8009fde <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8009fa8:	ab03      	add	r3, sp, #12
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	2300      	movs	r3, #0
 8009fae:	461a      	mov	r2, r3
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f7ff fa3a 	bl	800942c <MX25LM51245G_ReadCfg2Register>
 8009fb8:	b9a0      	cbnz	r0, 8009fe4 <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 8009fba:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d113      	bne.n	8009fea <OSPI_NOR_EnterSOPIMode+0xba>
}
 8009fc2:	b005      	add	sp, #20
 8009fc4:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fc6:	f06f 0004 	mvn.w	r0, #4
 8009fca:	e7fa      	b.n	8009fc2 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fcc:	f06f 0004 	mvn.w	r0, #4
 8009fd0:	e7f7      	b.n	8009fc2 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fd2:	f06f 0004 	mvn.w	r0, #4
 8009fd6:	e7f4      	b.n	8009fc2 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fd8:	f06f 0004 	mvn.w	r0, #4
 8009fdc:	e7f1      	b.n	8009fc2 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fde:	f06f 0004 	mvn.w	r0, #4
 8009fe2:	e7ee      	b.n	8009fc2 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fe4:	f06f 0004 	mvn.w	r0, #4
 8009fe8:	e7eb      	b.n	8009fc2 <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fea:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8009fee:	e7e8      	b.n	8009fc2 <OSPI_NOR_EnterSOPIMode+0x92>
 8009ff0:	24006fa4 	.word	0x24006fa4
 8009ff4:	24006f9c 	.word	0x24006f9c

08009ff8 <OSPI_NOR_EnterDOPIMode>:
{
 8009ff8:	b530      	push	{r4, r5, lr}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009ffe:	4c35      	ldr	r4, [pc, #212]	; (800a0d4 <OSPI_NOR_EnterDOPIMode+0xdc>)
 800a000:	235c      	movs	r3, #92	; 0x5c
 800a002:	fb03 4400 	mla	r4, r3, r0, r4
 800a006:	4b34      	ldr	r3, [pc, #208]	; (800a0d8 <OSPI_NOR_EnterDOPIMode+0xe0>)
 800a008:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a00c:	789a      	ldrb	r2, [r3, #2]
 800a00e:	7859      	ldrb	r1, [r3, #1]
 800a010:	4620      	mov	r0, r4
 800a012:	f7ff f90d 	bl	8009230 <MX25LM51245G_WriteEnable>
 800a016:	2800      	cmp	r0, #0
 800a018:	d144      	bne.n	800a0a4 <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800a01a:	492f      	ldr	r1, [pc, #188]	; (800a0d8 <OSPI_NOR_EnterDOPIMode+0xe0>)
 800a01c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a020:	2307      	movs	r3, #7
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a028:	788a      	ldrb	r2, [r1, #2]
 800a02a:	7849      	ldrb	r1, [r1, #1]
 800a02c:	4620      	mov	r0, r4
 800a02e:	f7ff f996 	bl	800935e <MX25LM51245G_WriteCfg2Register>
 800a032:	2800      	cmp	r0, #0
 800a034:	d139      	bne.n	800a0aa <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a036:	4b28      	ldr	r3, [pc, #160]	; (800a0d8 <OSPI_NOR_EnterDOPIMode+0xe0>)
 800a038:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a03c:	789a      	ldrb	r2, [r3, #2]
 800a03e:	7859      	ldrb	r1, [r3, #1]
 800a040:	4620      	mov	r0, r4
 800a042:	f7ff f8f5 	bl	8009230 <MX25LM51245G_WriteEnable>
 800a046:	bb98      	cbnz	r0, 800a0b0 <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800a048:	4923      	ldr	r1, [pc, #140]	; (800a0d8 <OSPI_NOR_EnterDOPIMode+0xe0>)
 800a04a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a04e:	2302      	movs	r3, #2
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	2300      	movs	r3, #0
 800a054:	788a      	ldrb	r2, [r1, #2]
 800a056:	7849      	ldrb	r1, [r1, #1]
 800a058:	4620      	mov	r0, r4
 800a05a:	f7ff f980 	bl	800935e <MX25LM51245G_WriteCfg2Register>
 800a05e:	bb50      	cbnz	r0, 800a0b6 <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800a060:	2028      	movs	r0, #40	; 0x28
 800a062:	f000 fb43 	bl	800a6ec <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800a066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a06a:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800a06c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a070:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800a072:	4620      	mov	r0, r4
 800a074:	f002 fbb2 	bl	800c7dc <HAL_OSPI_Init>
 800a078:	bb00      	cbnz	r0, 800a0bc <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800a07a:	2201      	movs	r2, #1
 800a07c:	4611      	mov	r1, r2
 800a07e:	4620      	mov	r0, r4
 800a080:	f7fe ff99 	bl	8008fb6 <MX25LM51245G_AutoPollingMemReady>
 800a084:	b9e8      	cbnz	r0, 800a0c2 <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800a086:	ab03      	add	r3, sp, #12
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	2300      	movs	r3, #0
 800a08c:	2201      	movs	r2, #1
 800a08e:	4611      	mov	r1, r2
 800a090:	4620      	mov	r0, r4
 800a092:	f7ff f9cb 	bl	800942c <MX25LM51245G_ReadCfg2Register>
 800a096:	b9b8      	cbnz	r0, 800a0c8 <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800a098:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d116      	bne.n	800a0ce <OSPI_NOR_EnterDOPIMode+0xd6>
}
 800a0a0:	b005      	add	sp, #20
 800a0a2:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0a4:	f06f 0004 	mvn.w	r0, #4
 800a0a8:	e7fa      	b.n	800a0a0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0aa:	f06f 0004 	mvn.w	r0, #4
 800a0ae:	e7f7      	b.n	800a0a0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0b0:	f06f 0004 	mvn.w	r0, #4
 800a0b4:	e7f4      	b.n	800a0a0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0b6:	f06f 0004 	mvn.w	r0, #4
 800a0ba:	e7f1      	b.n	800a0a0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a0bc:	f06f 0003 	mvn.w	r0, #3
 800a0c0:	e7ee      	b.n	800a0a0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0c2:	f06f 0004 	mvn.w	r0, #4
 800a0c6:	e7eb      	b.n	800a0a0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0c8:	f06f 0004 	mvn.w	r0, #4
 800a0cc:	e7e8      	b.n	800a0a0 <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0ce:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800a0d2:	e7e5      	b.n	800a0a0 <OSPI_NOR_EnterDOPIMode+0xa8>
 800a0d4:	24006fa4 	.word	0x24006fa4
 800a0d8:	24006f9c 	.word	0x24006f9c

0800a0dc <MX_OSPI_NOR_Init>:
{
 800a0dc:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 800a0de:	4b12      	ldr	r3, [pc, #72]	; (800a128 <MX_OSPI_NOR_Init+0x4c>)
 800a0e0:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 800a0e2:	2304      	movs	r3, #4
 800a0e4:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800a0ea:	680a      	ldr	r2, [r1, #0]
 800a0ec:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800a0f2:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800a0f4:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800a0f6:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800a0f8:	684a      	ldr	r2, [r1, #4]
 800a0fa:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800a0fc:	688a      	ldr	r2, [r1, #8]
 800a0fe:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800a100:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800a102:	2308      	movs	r3, #8
 800a104:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800a106:	68cb      	ldr	r3, [r1, #12]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d005      	beq.n	800a118 <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800a10c:	2300      	movs	r3, #0
 800a10e:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800a110:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 800a112:	f002 fb63 	bl	800c7dc <HAL_OSPI_Init>
}
 800a116:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800a118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a11c:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800a11e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a122:	62c3      	str	r3, [r0, #44]	; 0x2c
 800a124:	e7f5      	b.n	800a112 <MX_OSPI_NOR_Init+0x36>
 800a126:	bf00      	nop
 800a128:	52005000 	.word	0x52005000

0800a12c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a12c:	bb38      	cbnz	r0, 800a17e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 800a12e:	b510      	push	{r4, lr}
 800a130:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800a132:	4b17      	ldr	r3, [pc, #92]	; (800a190 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800a134:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a138:	789b      	ldrb	r3, [r3, #2]
 800a13a:	b983      	cbnz	r3, 800a15e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800a13c:	4b14      	ldr	r3, [pc, #80]	; (800a190 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800a13e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a142:	2201      	movs	r2, #1
 800a144:	7859      	ldrb	r1, [r3, #1]
 800a146:	4b13      	ldr	r3, [pc, #76]	; (800a194 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 800a148:	205c      	movs	r0, #92	; 0x5c
 800a14a:	fb00 3004 	mla	r0, r0, r4, r3
 800a14e:	f7fe ffb1 	bl	80090b4 <MX25LM51245G_EnableMemoryMappedModeSTR>
 800a152:	b9b8      	cbnz	r0, 800a184 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800a154:	4b0e      	ldr	r3, [pc, #56]	; (800a190 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800a156:	2202      	movs	r2, #2
 800a158:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 800a15c:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800a15e:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800a160:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a164:	7859      	ldrb	r1, [r3, #1]
 800a166:	4b0b      	ldr	r3, [pc, #44]	; (800a194 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 800a168:	205c      	movs	r0, #92	; 0x5c
 800a16a:	fb00 3004 	mla	r0, r0, r4, r3
 800a16e:	f7ff f80d 	bl	800918c <MX25LM51245G_EnableMemoryMappedModeDTR>
 800a172:	b950      	cbnz	r0, 800a18a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800a174:	4b06      	ldr	r3, [pc, #24]	; (800a190 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800a176:	2202      	movs	r2, #2
 800a178:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 800a17c:	e7ee      	b.n	800a15c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 800a17e:	f06f 0001 	mvn.w	r0, #1
}
 800a182:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a184:	f06f 0004 	mvn.w	r0, #4
 800a188:	e7e8      	b.n	800a15c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a18a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800a18e:	e7e5      	b.n	800a15c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 800a190:	24006f9c 	.word	0x24006f9c
 800a194:	24006fa4 	.word	0x24006fa4

0800a198 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a198:	b990      	cbnz	r0, 800a1c0 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 800a19a:	b510      	push	{r4, lr}
 800a19c:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800a19e:	4b0d      	ldr	r3, [pc, #52]	; (800a1d4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 800a1a0:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d10e      	bne.n	800a1c6 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800a1a8:	4b0b      	ldr	r3, [pc, #44]	; (800a1d8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 800a1aa:	205c      	movs	r0, #92	; 0x5c
 800a1ac:	fb00 3004 	mla	r0, r0, r4, r3
 800a1b0:	f002 facc 	bl	800c74c <HAL_OSPI_Abort>
 800a1b4:	b950      	cbnz	r0, 800a1cc <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800a1b6:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 800a1be:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a1c0:	f06f 0001 	mvn.w	r0, #1
}
 800a1c4:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800a1c6:	f06f 001a 	mvn.w	r0, #26
 800a1ca:	e7f8      	b.n	800a1be <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 800a1cc:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a1d0:	e7f5      	b.n	800a1be <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 800a1d2:	bf00      	nop
 800a1d4:	24006f9c 	.word	0x24006f9c
 800a1d8:	24006fa4 	.word	0x24006fa4

0800a1dc <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a1dc:	bb08      	cbnz	r0, 800a222 <BSP_OSPI_NOR_DeInit+0x46>
{
 800a1de:	b510      	push	{r4, lr}
 800a1e0:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800a1e2:	4b13      	ldr	r3, [pc, #76]	; (800a230 <BSP_OSPI_NOR_DeInit+0x54>)
 800a1e4:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d013      	beq.n	800a214 <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800a1ec:	4b10      	ldr	r3, [pc, #64]	; (800a230 <BSP_OSPI_NOR_DeInit+0x54>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800a1f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1f8:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800a1fa:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800a1fc:	4b0d      	ldr	r3, [pc, #52]	; (800a234 <BSP_OSPI_NOR_DeInit+0x58>)
 800a1fe:	225c      	movs	r2, #92	; 0x5c
 800a200:	fb02 3404 	mla	r4, r2, r4, r3
 800a204:	4620      	mov	r0, r4
 800a206:	f7ff fde3 	bl	8009dd0 <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800a20a:	4620      	mov	r0, r4
 800a20c:	f001 ffec 	bl	800c1e8 <HAL_OSPI_DeInit>
 800a210:	b950      	cbnz	r0, 800a228 <BSP_OSPI_NOR_DeInit+0x4c>
}
 800a212:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800a214:	f7ff ffc0 	bl	800a198 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800a218:	2800      	cmp	r0, #0
 800a21a:	d0e7      	beq.n	800a1ec <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a21c:	f06f 0004 	mvn.w	r0, #4
 800a220:	e7f7      	b.n	800a212 <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 800a222:	f06f 0001 	mvn.w	r0, #1
}
 800a226:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 800a228:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a22c:	e7f1      	b.n	800a212 <BSP_OSPI_NOR_DeInit+0x36>
 800a22e:	bf00      	nop
 800a230:	24006f9c 	.word	0x24006f9c
 800a234:	24006fa4 	.word	0x24006fa4

0800a238 <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a238:	2800      	cmp	r0, #0
 800a23a:	d141      	bne.n	800a2c0 <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 800a23c:	b570      	push	{r4, r5, r6, lr}
 800a23e:	460d      	mov	r5, r1
 800a240:	4616      	mov	r6, r2
 800a242:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800a244:	4b21      	ldr	r3, [pc, #132]	; (800a2cc <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800a246:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d03b      	beq.n	800a2c6 <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800a24e:	4b1f      	ldr	r3, [pc, #124]	; (800a2cc <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800a250:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a254:	785b      	ldrb	r3, [r3, #1]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d00b      	beq.n	800a272 <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800a25a:	2901      	cmp	r1, #1
 800a25c:	d025      	beq.n	800a2aa <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 800a25e:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800a260:	4b1a      	ldr	r3, [pc, #104]	; (800a2cc <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800a262:	2201      	movs	r2, #1
 800a264:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800a268:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a26c:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800a26e:	70a6      	strb	r6, [r4, #2]
}
 800a270:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800a272:	2901      	cmp	r1, #1
 800a274:	d105      	bne.n	800a282 <BSP_OSPI_NOR_ConfigFlash+0x4a>
 800a276:	4b15      	ldr	r3, [pc, #84]	; (800a2cc <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800a278:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a27c:	789b      	ldrb	r3, [r3, #2]
 800a27e:	4293      	cmp	r3, r2
 800a280:	d01c      	beq.n	800a2bc <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800a282:	4620      	mov	r0, r4
 800a284:	f7ff fdf6 	bl	8009e74 <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800a288:	2800      	cmp	r0, #0
 800a28a:	bf08      	it	eq
 800a28c:	2d01      	cmpeq	r5, #1
 800a28e:	d10f      	bne.n	800a2b0 <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800a290:	4b0e      	ldr	r3, [pc, #56]	; (800a2cc <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800a292:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a296:	789b      	ldrb	r3, [r3, #2]
 800a298:	b91b      	cbnz	r3, 800a2a2 <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800a29a:	4620      	mov	r0, r4
 800a29c:	f7ff feac 	bl	8009ff8 <OSPI_NOR_EnterDOPIMode>
 800a2a0:	e006      	b.n	800a2b0 <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f7ff fe44 	bl	8009f30 <OSPI_NOR_EnterSOPIMode>
 800a2a8:	e002      	b.n	800a2b0 <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800a2aa:	b922      	cbnz	r2, 800a2b6 <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800a2ac:	f7ff fe40 	bl	8009f30 <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d1dd      	bne.n	800a270 <BSP_OSPI_NOR_ConfigFlash+0x38>
 800a2b4:	e7d4      	b.n	800a260 <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800a2b6:	f7ff fe9f 	bl	8009ff8 <OSPI_NOR_EnterDOPIMode>
 800a2ba:	e7f9      	b.n	800a2b0 <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 800a2bc:	2000      	movs	r0, #0
 800a2be:	e7cf      	b.n	800a260 <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 800a2c0:	f06f 0001 	mvn.w	r0, #1
}
 800a2c4:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800a2c6:	f06f 0019 	mvn.w	r0, #25
  return ret;
 800a2ca:	e7d1      	b.n	800a270 <BSP_OSPI_NOR_ConfigFlash+0x38>
 800a2cc:	24006f9c 	.word	0x24006f9c

0800a2d0 <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d13f      	bne.n	800a354 <BSP_OSPI_NOR_Init+0x84>
{
 800a2d4:	b570      	push	{r4, r5, r6, lr}
 800a2d6:	b08e      	sub	sp, #56	; 0x38
 800a2d8:	460d      	mov	r5, r1
 800a2da:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800a2dc:	4b23      	ldr	r3, [pc, #140]	; (800a36c <BSP_OSPI_NOR_Init+0x9c>)
 800a2de:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a2e2:	b113      	cbz	r3, 800a2ea <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800a2e4:	2000      	movs	r0, #0
}
 800a2e6:	b00e      	add	sp, #56	; 0x38
 800a2e8:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800a2ea:	4e21      	ldr	r6, [pc, #132]	; (800a370 <BSP_OSPI_NOR_Init+0xa0>)
 800a2ec:	235c      	movs	r3, #92	; 0x5c
 800a2ee:	fb03 6600 	mla	r6, r3, r0, r6
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7ff fc0e 	bl	8009b14 <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800a2f8:	a805      	add	r0, sp, #20
 800a2fa:	f7fe fe43 	bl	8008f84 <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 800a2fe:	2303      	movs	r3, #3
 800a300:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800a302:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a304:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a308:	b313      	cbz	r3, 800a350 <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800a30a:	fab3 f383 	clz	r3, r3
 800a30e:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800a310:	2300      	movs	r3, #0
 800a312:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800a314:	786b      	ldrb	r3, [r5, #1]
 800a316:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800a318:	a901      	add	r1, sp, #4
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7ff fede 	bl	800a0dc <MX_OSPI_NOR_Init>
 800a320:	b9d8      	cbnz	r0, 800a35a <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800a322:	4620      	mov	r0, r4
 800a324:	f7ff fd04 	bl	8009d30 <OSPI_NOR_ResetMemory>
 800a328:	b9d0      	cbnz	r0, 800a360 <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a32a:	4b10      	ldr	r3, [pc, #64]	; (800a36c <BSP_OSPI_NOR_Init+0x9c>)
 800a32c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a330:	789a      	ldrb	r2, [r3, #2]
 800a332:	7859      	ldrb	r1, [r3, #1]
 800a334:	4630      	mov	r0, r6
 800a336:	f7fe fe3e 	bl	8008fb6 <MX25LM51245G_AutoPollingMemReady>
 800a33a:	b9a0      	cbnz	r0, 800a366 <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800a33c:	786a      	ldrb	r2, [r5, #1]
 800a33e:	7829      	ldrb	r1, [r5, #0]
 800a340:	4620      	mov	r0, r4
 800a342:	f7ff ff79 	bl	800a238 <BSP_OSPI_NOR_ConfigFlash>
 800a346:	2800      	cmp	r0, #0
 800a348:	d0cd      	beq.n	800a2e6 <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800a34a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800a34e:	e7ca      	b.n	800a2e6 <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 800a350:	2320      	movs	r3, #32
 800a352:	e7dc      	b.n	800a30e <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 800a354:	f06f 0001 	mvn.w	r0, #1
}
 800a358:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a35a:	f06f 0003 	mvn.w	r0, #3
 800a35e:	e7c2      	b.n	800a2e6 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a360:	f06f 0004 	mvn.w	r0, #4
 800a364:	e7bf      	b.n	800a2e6 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a366:	f06f 0004 	mvn.w	r0, #4
 800a36a:	e7bc      	b.n	800a2e6 <BSP_OSPI_NOR_Init+0x16>
 800a36c:	24006f9c 	.word	0x24006f9c
 800a370:	24006fa4 	.word	0x24006fa4

0800a374 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800a374:	b510      	push	{r4, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800a37e:	2370      	movs	r3, #112	; 0x70
 800a380:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 800a384:	4b17      	ldr	r3, [pc, #92]	; (800a3e4 <FT5336_Probe+0x70>)
 800a386:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a388:	4b17      	ldr	r3, [pc, #92]	; (800a3e8 <FT5336_Probe+0x74>)
 800a38a:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800a38c:	4b17      	ldr	r3, [pc, #92]	; (800a3ec <FT5336_Probe+0x78>)
 800a38e:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800a390:	4b17      	ldr	r3, [pc, #92]	; (800a3f0 <FT5336_Probe+0x7c>)
 800a392:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 800a394:	4b17      	ldr	r3, [pc, #92]	; (800a3f4 <FT5336_Probe+0x80>)
 800a396:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800a398:	a902      	add	r1, sp, #8
 800a39a:	4817      	ldr	r0, [pc, #92]	; (800a3f8 <FT5336_Probe+0x84>)
 800a39c:	f7fe fd50 	bl	8008e40 <FT5336_RegisterBusIO>
 800a3a0:	b998      	cbnz	r0, 800a3ca <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800a3a2:	a901      	add	r1, sp, #4
 800a3a4:	4814      	ldr	r0, [pc, #80]	; (800a3f8 <FT5336_Probe+0x84>)
 800a3a6:	f7fe fc8d 	bl	8008cc4 <FT5336_ReadID>
 800a3aa:	b988      	cbnz	r0, 800a3d0 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 800a3ac:	9b01      	ldr	r3, [sp, #4]
 800a3ae:	2b51      	cmp	r3, #81	; 0x51
 800a3b0:	d111      	bne.n	800a3d6 <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800a3b2:	4811      	ldr	r0, [pc, #68]	; (800a3f8 <FT5336_Probe+0x84>)
 800a3b4:	4b11      	ldr	r3, [pc, #68]	; (800a3fc <FT5336_Probe+0x88>)
 800a3b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800a3ba:	4b11      	ldr	r3, [pc, #68]	; (800a400 <FT5336_Probe+0x8c>)
 800a3bc:	4a11      	ldr	r2, [pc, #68]	; (800a404 <FT5336_Probe+0x90>)
 800a3be:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4798      	blx	r3
 800a3c4:	b950      	cbnz	r0, 800a3dc <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 800a3c6:	b008      	add	sp, #32
 800a3c8:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 800a3ca:	f06f 0007 	mvn.w	r0, #7
 800a3ce:	e7fa      	b.n	800a3c6 <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a3d0:	f06f 0004 	mvn.w	r0, #4
 800a3d4:	e7f7      	b.n	800a3c6 <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a3d6:	f06f 0006 	mvn.w	r0, #6
 800a3da:	e7f4      	b.n	800a3c6 <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a3dc:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800a3e0:	e7f1      	b.n	800a3c6 <FT5336_Probe+0x52>
 800a3e2:	bf00      	nop
 800a3e4:	08009a55 	.word	0x08009a55
 800a3e8:	080099e5 	.word	0x080099e5
 800a3ec:	08009add 	.word	0x08009add
 800a3f0:	08009aad 	.word	0x08009aad
 800a3f4:	08009b0d 	.word	0x08009b0d
 800a3f8:	24007000 	.word	0x24007000
 800a3fc:	24007028 	.word	0x24007028
 800a400:	24000040 	.word	0x24000040
 800a404:	2400704c 	.word	0x2400704c

0800a408 <BSP_TS_Init>:
{
 800a408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a40a:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a40c:	2800      	cmp	r0, #0
 800a40e:	d150      	bne.n	800a4b2 <BSP_TS_Init+0xaa>
 800a410:	460c      	mov	r4, r1
 800a412:	4605      	mov	r5, r0
 800a414:	680b      	ldr	r3, [r1, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d04e      	beq.n	800a4b8 <BSP_TS_Init+0xb0>
 800a41a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800a41e:	d84e      	bhi.n	800a4be <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a420:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a422:	2a00      	cmp	r2, #0
 800a424:	d04e      	beq.n	800a4c4 <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a426:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 800a42a:	d84e      	bhi.n	800a4ca <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800a42c:	68c9      	ldr	r1, [r1, #12]
 800a42e:	4293      	cmp	r3, r2
 800a430:	bf28      	it	cs
 800a432:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a434:	4299      	cmp	r1, r3
 800a436:	d84b      	bhi.n	800a4d0 <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800a438:	f7ff ff9c 	bl	800a374 <FT5336_Probe>
 800a43c:	4606      	mov	r6, r0
 800a43e:	2800      	cmp	r0, #0
 800a440:	d149      	bne.n	800a4d6 <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800a442:	6820      	ldr	r0, [r4, #0]
 800a444:	4925      	ldr	r1, [pc, #148]	; (800a4dc <BSP_TS_Init+0xd4>)
 800a446:	016a      	lsls	r2, r5, #5
 800a448:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 800a44c:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800a44e:	6862      	ldr	r2, [r4, #4]
 800a450:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800a452:	68a2      	ldr	r2, [r4, #8]
 800a454:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800a456:	68e2      	ldr	r2, [r4, #12]
 800a458:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a45a:	4b21      	ldr	r3, [pc, #132]	; (800a4e0 <BSP_TS_Init+0xd8>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	a901      	add	r1, sp, #4
 800a462:	4a20      	ldr	r2, [pc, #128]	; (800a4e4 <BSP_TS_Init+0xdc>)
 800a464:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800a468:	4798      	blx	r3
 800a46a:	2800      	cmp	r0, #0
 800a46c:	db1e      	blt.n	800a4ac <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a46e:	4b1b      	ldr	r3, [pc, #108]	; (800a4dc <BSP_TS_Init+0xd4>)
 800a470:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800a474:	9a02      	ldr	r2, [sp, #8]
 800a476:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a478:	9a03      	ldr	r2, [sp, #12]
 800a47a:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800a47c:	462b      	mov	r3, r5
 800a47e:	b113      	cbz	r3, 800a486 <BSP_TS_Init+0x7e>
}
 800a480:	4630      	mov	r0, r6
 800a482:	b005      	add	sp, #20
 800a484:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a486:	6822      	ldr	r2, [r4, #0]
 800a488:	68e1      	ldr	r1, [r4, #12]
 800a48a:	440a      	add	r2, r1
 800a48c:	3201      	adds	r2, #1
 800a48e:	4913      	ldr	r1, [pc, #76]	; (800a4dc <BSP_TS_Init+0xd4>)
 800a490:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 800a494:	3006      	adds	r0, #6
 800a496:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a49a:	6862      	ldr	r2, [r4, #4]
 800a49c:	68e7      	ldr	r7, [r4, #12]
 800a49e:	443a      	add	r2, r7
 800a4a0:	3201      	adds	r2, #1
 800a4a2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a4a6:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	e7e8      	b.n	800a47e <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a4ac:	f06f 0604 	mvn.w	r6, #4
 800a4b0:	e7e6      	b.n	800a480 <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 800a4b2:	f06f 0601 	mvn.w	r6, #1
 800a4b6:	e7e3      	b.n	800a480 <BSP_TS_Init+0x78>
 800a4b8:	f06f 0601 	mvn.w	r6, #1
 800a4bc:	e7e0      	b.n	800a480 <BSP_TS_Init+0x78>
 800a4be:	f06f 0601 	mvn.w	r6, #1
 800a4c2:	e7dd      	b.n	800a480 <BSP_TS_Init+0x78>
 800a4c4:	f06f 0601 	mvn.w	r6, #1
 800a4c8:	e7da      	b.n	800a480 <BSP_TS_Init+0x78>
 800a4ca:	f06f 0601 	mvn.w	r6, #1
 800a4ce:	e7d7      	b.n	800a480 <BSP_TS_Init+0x78>
 800a4d0:	f06f 0601 	mvn.w	r6, #1
 800a4d4:	e7d4      	b.n	800a480 <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 800a4d6:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 800a4da:	e7d1      	b.n	800a480 <BSP_TS_Init+0x78>
 800a4dc:	2400702c 	.word	0x2400702c
 800a4e0:	2400704c 	.word	0x2400704c
 800a4e4:	24007028 	.word	0x24007028

0800a4e8 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d178      	bne.n	800a5de <BSP_TS_GetState+0xf6>
{
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800a4f4:	4b3b      	ldr	r3, [pc, #236]	; (800a5e4 <BSP_TS_GetState+0xfc>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	a901      	add	r1, sp, #4
 800a4fc:	4a3a      	ldr	r2, [pc, #232]	; (800a5e8 <BSP_TS_GetState+0x100>)
 800a4fe:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800a502:	4798      	blx	r3
 800a504:	2800      	cmp	r0, #0
 800a506:	db66      	blt.n	800a5d6 <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 800a508:	9e01      	ldr	r6, [sp, #4]
 800a50a:	2e00      	cmp	r6, #0
 800a50c:	d059      	beq.n	800a5c2 <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 800a50e:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 800a510:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a512:	4b36      	ldr	r3, [pc, #216]	; (800a5ec <BSP_TS_GetState+0x104>)
 800a514:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800a518:	6899      	ldr	r1, [r3, #8]
 800a51a:	f011 0f08 	tst.w	r1, #8
 800a51e:	d141      	bne.n	800a5a4 <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 800a520:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 800a522:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800a524:	f011 0f02 	tst.w	r1, #2
 800a528:	d005      	beq.n	800a536 <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800a52a:	4b30      	ldr	r3, [pc, #192]	; (800a5ec <BSP_TS_GetState+0x104>)
 800a52c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	1a9b      	subs	r3, r3, r2
 800a534:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800a536:	f011 0f04 	tst.w	r1, #4
 800a53a:	d005      	beq.n	800a548 <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800a53c:	4a2b      	ldr	r2, [pc, #172]	; (800a5ec <BSP_TS_GetState+0x104>)
 800a53e:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 800a542:	6952      	ldr	r2, [r2, #20]
 800a544:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a548:	4a28      	ldr	r2, [pc, #160]	; (800a5ec <BSP_TS_GetState+0x104>)
 800a54a:	0168      	lsls	r0, r5, #5
 800a54c:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 800a550:	5810      	ldr	r0, [r2, r0]
 800a552:	fb00 f303 	mul.w	r3, r0, r3
 800a556:	690a      	ldr	r2, [r1, #16]
 800a558:	fbb3 f3f2 	udiv	r3, r3, r2
 800a55c:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a55e:	684a      	ldr	r2, [r1, #4]
 800a560:	fb0c f202 	mul.w	r2, ip, r2
 800a564:	6948      	ldr	r0, [r1, #20]
 800a566:	fbb2 f2f0 	udiv	r2, r2, r0
 800a56a:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 800a56c:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a56e:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a570:	4283      	cmp	r3, r0
 800a572:	d91a      	bls.n	800a5aa <BSP_TS_GetState+0xc2>
 800a574:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800a576:	491d      	ldr	r1, [pc, #116]	; (800a5ec <BSP_TS_GetState+0x104>)
 800a578:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800a57c:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a57e:	428a      	cmp	r2, r1
 800a580:	d915      	bls.n	800a5ae <BSP_TS_GetState+0xc6>
 800a582:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a584:	4919      	ldr	r1, [pc, #100]	; (800a5ec <BSP_TS_GetState+0x104>)
 800a586:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800a58a:	68c9      	ldr	r1, [r1, #12]
 800a58c:	42b1      	cmp	r1, r6
 800a58e:	d301      	bcc.n	800a594 <BSP_TS_GetState+0xac>
 800a590:	4291      	cmp	r1, r2
 800a592:	d20e      	bcs.n	800a5b2 <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800a594:	4a15      	ldr	r2, [pc, #84]	; (800a5ec <BSP_TS_GetState+0x104>)
 800a596:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 800a59a:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a59c:	68a3      	ldr	r3, [r4, #8]
 800a59e:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 800a5a0:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a5a2:	e01a      	b.n	800a5da <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 800a5a4:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	e7bc      	b.n	800a524 <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a5aa:	1ac6      	subs	r6, r0, r3
 800a5ac:	e7e3      	b.n	800a576 <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a5ae:	1a8a      	subs	r2, r1, r2
 800a5b0:	e7e8      	b.n	800a584 <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800a5b2:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a5b4:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <BSP_TS_GetState+0x104>)
 800a5b6:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800a5ba:	69eb      	ldr	r3, [r5, #28]
 800a5bc:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 800a5be:	2000      	movs	r0, #0
 800a5c0:	e00b      	b.n	800a5da <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800a5c6:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <BSP_TS_GetState+0x104>)
 800a5c8:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800a5cc:	69ab      	ldr	r3, [r5, #24]
 800a5ce:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a5d0:	69eb      	ldr	r3, [r5, #28]
 800a5d2:	60a3      	str	r3, [r4, #8]
 800a5d4:	e001      	b.n	800a5da <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a5d6:	f06f 0004 	mvn.w	r0, #4
}
 800a5da:	b004      	add	sp, #16
 800a5dc:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a5de:	f06f 0001 	mvn.w	r0, #1
}
 800a5e2:	4770      	bx	lr
 800a5e4:	2400704c 	.word	0x2400704c
 800a5e8:	24007028 	.word	0x24007028
 800a5ec:	2400702c 	.word	0x2400702c

0800a5f0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a5f0:	4a18      	ldr	r2, [pc, #96]	; (800a654 <SystemInit+0x64>)
 800a5f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a5f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a5fe:	4b16      	ldr	r3, [pc, #88]	; (800a658 <SystemInit+0x68>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	f042 0201 	orr.w	r2, r2, #1
 800a606:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a608:	2200      	movs	r2, #0
 800a60a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	4913      	ldr	r1, [pc, #76]	; (800a65c <SystemInit+0x6c>)
 800a610:	4001      	ands	r1, r0
 800a612:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800a614:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800a616:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800a618:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800a61a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800a61c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800a61e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800a622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a624:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800a626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a628:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a62a:	6819      	ldr	r1, [r3, #0]
 800a62c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800a630:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a632:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a634:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <SystemInit+0x70>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <SystemInit+0x74>)
 800a63a:	4013      	ands	r3, r2
 800a63c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a640:	d203      	bcs.n	800a64a <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a642:	4b09      	ldr	r3, [pc, #36]	; (800a668 <SystemInit+0x78>)
 800a644:	2201      	movs	r2, #1
 800a646:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a64a:	4b02      	ldr	r3, [pc, #8]	; (800a654 <SystemInit+0x64>)
 800a64c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a650:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800a652:	4770      	bx	lr
 800a654:	e000ed00 	.word	0xe000ed00
 800a658:	58024400 	.word	0x58024400
 800a65c:	eaf6ed7f 	.word	0xeaf6ed7f
 800a660:	5c001000 	.word	0x5c001000
 800a664:	ffff0000 	.word	0xffff0000
 800a668:	51008000 	.word	0x51008000

0800a66c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a66c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a66e:	2003      	movs	r0, #3
 800a670:	f000 f850 	bl	800a714 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a674:	f002 fc92 	bl	800cf9c <HAL_RCC_GetSysClockFreq>
 800a678:	490f      	ldr	r1, [pc, #60]	; (800a6b8 <HAL_Init+0x4c>)
 800a67a:	698b      	ldr	r3, [r1, #24]
 800a67c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a680:	4a0e      	ldr	r2, [pc, #56]	; (800a6bc <HAL_Init+0x50>)
 800a682:	5cd3      	ldrb	r3, [r2, r3]
 800a684:	f003 031f 	and.w	r3, r3, #31
 800a688:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a68a:	698b      	ldr	r3, [r1, #24]
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	5cd3      	ldrb	r3, [r2, r3]
 800a692:	f003 031f 	and.w	r3, r3, #31
 800a696:	fa20 f303 	lsr.w	r3, r0, r3
 800a69a:	4a09      	ldr	r2, [pc, #36]	; (800a6c0 <HAL_Init+0x54>)
 800a69c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a69e:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <HAL_Init+0x58>)
 800a6a0:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a6a2:	2001      	movs	r0, #1
 800a6a4:	f7f8 fdd4 	bl	8003250 <HAL_InitTick>
 800a6a8:	b110      	cbz	r0, 800a6b0 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800a6aa:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	bd10      	pop	{r4, pc}
 800a6b0:	4604      	mov	r4, r0
  HAL_MspInit();
 800a6b2:	f7f8 fb81 	bl	8002db8 <HAL_MspInit>
  return HAL_OK;
 800a6b6:	e7f9      	b.n	800a6ac <HAL_Init+0x40>
 800a6b8:	58024400 	.word	0x58024400
 800a6bc:	080268a8 	.word	0x080268a8
 800a6c0:	24000074 	.word	0x24000074
 800a6c4:	24000070 	.word	0x24000070

0800a6c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a6c8:	4b03      	ldr	r3, [pc, #12]	; (800a6d8 <HAL_IncTick+0x10>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	4a03      	ldr	r2, [pc, #12]	; (800a6dc <HAL_IncTick+0x14>)
 800a6ce:	6811      	ldr	r1, [r2, #0]
 800a6d0:	440b      	add	r3, r1
 800a6d2:	6013      	str	r3, [r2, #0]
}
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	24000078 	.word	0x24000078
 800a6dc:	24007050 	.word	0x24007050

0800a6e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a6e0:	4b01      	ldr	r3, [pc, #4]	; (800a6e8 <HAL_GetTick+0x8>)
 800a6e2:	6818      	ldr	r0, [r3, #0]
}
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	24007050 	.word	0x24007050

0800a6ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a6f0:	f7ff fff6 	bl	800a6e0 <HAL_GetTick>
 800a6f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a6f6:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a6fa:	d002      	beq.n	800a702 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800a6fc:	4b04      	ldr	r3, [pc, #16]	; (800a710 <HAL_Delay+0x24>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a702:	f7ff ffed 	bl	800a6e0 <HAL_GetTick>
 800a706:	1b40      	subs	r0, r0, r5
 800a708:	42a0      	cmp	r0, r4
 800a70a:	d3fa      	bcc.n	800a702 <HAL_Delay+0x16>
  {
  }
}
 800a70c:	bd38      	pop	{r3, r4, r5, pc}
 800a70e:	bf00      	nop
 800a710:	24000078 	.word	0x24000078

0800a714 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a714:	4906      	ldr	r1, [pc, #24]	; (800a730 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800a716:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a718:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a71c:	041b      	lsls	r3, r3, #16
 800a71e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a720:	0200      	lsls	r0, r0, #8
 800a722:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a726:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800a728:	4a02      	ldr	r2, [pc, #8]	; (800a734 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800a72a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800a72c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a72e:	4770      	bx	lr
 800a730:	e000ed00 	.word	0xe000ed00
 800a734:	05fa0000 	.word	0x05fa0000

0800a738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a738:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a73a:	4b17      	ldr	r3, [pc, #92]	; (800a798 <HAL_NVIC_SetPriority+0x60>)
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a742:	f1c3 0c07 	rsb	ip, r3, #7
 800a746:	f1bc 0f04 	cmp.w	ip, #4
 800a74a:	bf28      	it	cs
 800a74c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a750:	f103 0e04 	add.w	lr, r3, #4
 800a754:	f1be 0f06 	cmp.w	lr, #6
 800a758:	d914      	bls.n	800a784 <HAL_NVIC_SetPriority+0x4c>
 800a75a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a75c:	f04f 3eff 	mov.w	lr, #4294967295
 800a760:	fa0e fc0c 	lsl.w	ip, lr, ip
 800a764:	ea21 010c 	bic.w	r1, r1, ip
 800a768:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a76a:	fa0e f303 	lsl.w	r3, lr, r3
 800a76e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a772:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800a774:	2800      	cmp	r0, #0
 800a776:	db07      	blt.n	800a788 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a778:	0109      	lsls	r1, r1, #4
 800a77a:	b2c9      	uxtb	r1, r1
 800a77c:	4b07      	ldr	r3, [pc, #28]	; (800a79c <HAL_NVIC_SetPriority+0x64>)
 800a77e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a780:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a784:	2300      	movs	r3, #0
 800a786:	e7e9      	b.n	800a75c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a788:	f000 000f 	and.w	r0, r0, #15
 800a78c:	0109      	lsls	r1, r1, #4
 800a78e:	b2c9      	uxtb	r1, r1
 800a790:	4b03      	ldr	r3, [pc, #12]	; (800a7a0 <HAL_NVIC_SetPriority+0x68>)
 800a792:	5419      	strb	r1, [r3, r0]
 800a794:	e7f4      	b.n	800a780 <HAL_NVIC_SetPriority+0x48>
 800a796:	bf00      	nop
 800a798:	e000ed00 	.word	0xe000ed00
 800a79c:	e000e400 	.word	0xe000e400
 800a7a0:	e000ed14 	.word	0xe000ed14

0800a7a4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	db07      	blt.n	800a7b8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7a8:	f000 021f 	and.w	r2, r0, #31
 800a7ac:	0940      	lsrs	r0, r0, #5
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	4093      	lsls	r3, r2
 800a7b2:	4a02      	ldr	r2, [pc, #8]	; (800a7bc <HAL_NVIC_EnableIRQ+0x18>)
 800a7b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	e000e100 	.word	0xe000e100

0800a7c0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	db0c      	blt.n	800a7de <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7c4:	f000 021f 	and.w	r2, r0, #31
 800a7c8:	0940      	lsrs	r0, r0, #5
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4093      	lsls	r3, r2
 800a7ce:	3020      	adds	r0, #32
 800a7d0:	4a03      	ldr	r2, [pc, #12]	; (800a7e0 <HAL_NVIC_DisableIRQ+0x20>)
 800a7d2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a7d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a7da:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800a7de:	4770      	bx	lr
 800a7e0:	e000e100 	.word	0xe000e100

0800a7e4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800a7e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a7e8:	4b04      	ldr	r3, [pc, #16]	; (800a7fc <HAL_MPU_Disable+0x18>)
 800a7ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a7f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	e000ed00 	.word	0xe000ed00

0800a800 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a800:	f040 0001 	orr.w	r0, r0, #1
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <HAL_MPU_Enable+0x1c>)
 800a806:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a80a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a80c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a810:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a812:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a816:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a81a:	4770      	bx	lr
 800a81c:	e000ed00 	.word	0xe000ed00

0800a820 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a820:	7842      	ldrb	r2, [r0, #1]
 800a822:	4b16      	ldr	r3, [pc, #88]	; (800a87c <HAL_MPU_ConfigRegion+0x5c>)
 800a824:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800a828:	7803      	ldrb	r3, [r0, #0]
 800a82a:	b1fb      	cbz	r3, 800a86c <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800a82c:	6843      	ldr	r3, [r0, #4]
 800a82e:	4a13      	ldr	r2, [pc, #76]	; (800a87c <HAL_MPU_ConfigRegion+0x5c>)
 800a830:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a834:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a836:	7ac3      	ldrb	r3, [r0, #11]
 800a838:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a83a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a83e:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a840:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a844:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a846:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a84a:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a84c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a850:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a852:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a856:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a858:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a85c:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a85e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800a862:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a864:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a866:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800a86a:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 800a86c:	4b03      	ldr	r3, [pc, #12]	; (800a87c <HAL_MPU_ConfigRegion+0x5c>)
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 800a874:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	e000ed00 	.word	0xe000ed00

0800a880 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a880:	2800      	cmp	r0, #0
 800a882:	d038      	beq.n	800a8f6 <HAL_CRC_Init+0x76>
{
 800a884:	b510      	push	{r4, lr}
 800a886:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a888:	7f43      	ldrb	r3, [r0, #29]
 800a88a:	b31b      	cbz	r3, 800a8d4 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a88c:	2302      	movs	r3, #2
 800a88e:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a890:	7923      	ldrb	r3, [r4, #4]
 800a892:	bb1b      	cbnz	r3, 800a8dc <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a894:	6823      	ldr	r3, [r4, #0]
 800a896:	4a19      	ldr	r2, [pc, #100]	; (800a8fc <HAL_CRC_Init+0x7c>)
 800a898:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a89a:	6822      	ldr	r2, [r4, #0]
 800a89c:	6893      	ldr	r3, [r2, #8]
 800a89e:	f023 0318 	bic.w	r3, r3, #24
 800a8a2:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a8a4:	7963      	ldrb	r3, [r4, #5]
 800a8a6:	bb13      	cbnz	r3, 800a8ee <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a8b0:	6822      	ldr	r2, [r4, #0]
 800a8b2:	6893      	ldr	r3, [r2, #8]
 800a8b4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a8b8:	6961      	ldr	r1, [r4, #20]
 800a8ba:	430b      	orrs	r3, r1
 800a8bc:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a8be:	6822      	ldr	r2, [r4, #0]
 800a8c0:	6893      	ldr	r3, [r2, #8]
 800a8c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8c6:	69a1      	ldr	r1, [r4, #24]
 800a8c8:	430b      	orrs	r3, r1
 800a8ca:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800a8d0:	2000      	movs	r0, #0
}
 800a8d2:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800a8d4:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a8d6:	f7f8 fa89 	bl	8002dec <HAL_CRC_MspInit>
 800a8da:	e7d7      	b.n	800a88c <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a8dc:	68e2      	ldr	r2, [r4, #12]
 800a8de:	68a1      	ldr	r1, [r4, #8]
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 f80d 	bl	800a900 <HAL_CRCEx_Polynomial_Set>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d0dc      	beq.n	800a8a4 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	e7f1      	b.n	800a8d2 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	6922      	ldr	r2, [r4, #16]
 800a8f2:	611a      	str	r2, [r3, #16]
 800a8f4:	e7dc      	b.n	800a8b0 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800a8f6:	2001      	movs	r0, #1
}
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	04c11db7 	.word	0x04c11db7

0800a900 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a900:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a902:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a904:	461c      	mov	r4, r3
 800a906:	3b01      	subs	r3, #1
 800a908:	b134      	cbz	r4, 800a918 <HAL_CRCEx_Polynomial_Set+0x18>
 800a90a:	f003 0c1f 	and.w	ip, r3, #31
 800a90e:	fa21 fc0c 	lsr.w	ip, r1, ip
 800a912:	f01c 0f01 	tst.w	ip, #1
 800a916:	d0f5      	beq.n	800a904 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800a918:	2a18      	cmp	r2, #24
 800a91a:	d822      	bhi.n	800a962 <HAL_CRCEx_Polynomial_Set+0x62>
 800a91c:	e8df f002 	tbb	[pc, r2]
 800a920:	2121210f 	.word	0x2121210f
 800a924:	21212121 	.word	0x21212121
 800a928:	2121211d 	.word	0x2121211d
 800a92c:	21212121 	.word	0x21212121
 800a930:	21212119 	.word	0x21212119
 800a934:	21212121 	.word	0x21212121
 800a938:	0d          	.byte	0x0d
 800a939:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a93a:	2b06      	cmp	r3, #6
 800a93c:	d815      	bhi.n	800a96a <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a93e:	6803      	ldr	r3, [r0, #0]
 800a940:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a942:	6801      	ldr	r1, [r0, #0]
 800a944:	688b      	ldr	r3, [r1, #8]
 800a946:	f023 0318 	bic.w	r3, r3, #24
 800a94a:	431a      	orrs	r2, r3
 800a94c:	608a      	str	r2, [r1, #8]
 800a94e:	2000      	movs	r0, #0
 800a950:	e008      	b.n	800a964 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 800a952:	2b07      	cmp	r3, #7
 800a954:	d9f3      	bls.n	800a93e <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800a956:	2001      	movs	r0, #1
 800a958:	e004      	b.n	800a964 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 800a95a:	2b0f      	cmp	r3, #15
 800a95c:	d9ef      	bls.n	800a93e <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800a95e:	2001      	movs	r0, #1
 800a960:	e000      	b.n	800a964 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 800a962:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 800a964:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a968:	4770      	bx	lr
        status =   HAL_ERROR;
 800a96a:	2001      	movs	r0, #1
 800a96c:	e7fa      	b.n	800a964 <HAL_CRCEx_Polynomial_Set+0x64>
	...

0800a970 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a970:	2800      	cmp	r0, #0
 800a972:	f000 8129 	beq.w	800abc8 <HAL_DMA_Abort_IT+0x258>
{
 800a976:	b508      	push	{r3, lr}
 800a978:	4602      	mov	r2, r0
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a97a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b02      	cmp	r3, #2
 800a982:	d003      	beq.n	800a98c <HAL_DMA_Abort_IT+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a984:	2380      	movs	r3, #128	; 0x80
 800a986:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800a988:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 800a98a:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a98c:	6803      	ldr	r3, [r0, #0]
 800a98e:	4890      	ldr	r0, [pc, #576]	; (800abd0 <HAL_DMA_Abort_IT+0x260>)
 800a990:	4990      	ldr	r1, [pc, #576]	; (800abd4 <HAL_DMA_Abort_IT+0x264>)
 800a992:	428b      	cmp	r3, r1
 800a994:	bf18      	it	ne
 800a996:	4283      	cmpne	r3, r0
 800a998:	bf0c      	ite	eq
 800a99a:	2101      	moveq	r1, #1
 800a99c:	2100      	movne	r1, #0
 800a99e:	d066      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9a0:	3030      	adds	r0, #48	; 0x30
 800a9a2:	4283      	cmp	r3, r0
 800a9a4:	d063      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9a6:	3018      	adds	r0, #24
 800a9a8:	4283      	cmp	r3, r0
 800a9aa:	d060      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9ac:	3018      	adds	r0, #24
 800a9ae:	4283      	cmp	r3, r0
 800a9b0:	d05d      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9b2:	3018      	adds	r0, #24
 800a9b4:	4283      	cmp	r3, r0
 800a9b6:	d05a      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9b8:	3018      	adds	r0, #24
 800a9ba:	4283      	cmp	r3, r0
 800a9bc:	d057      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9be:	3018      	adds	r0, #24
 800a9c0:	4283      	cmp	r3, r0
 800a9c2:	d054      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9c4:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800a9c8:	4283      	cmp	r3, r0
 800a9ca:	d050      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9cc:	3018      	adds	r0, #24
 800a9ce:	4283      	cmp	r3, r0
 800a9d0:	d04d      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9d2:	3018      	adds	r0, #24
 800a9d4:	4283      	cmp	r3, r0
 800a9d6:	d04a      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9d8:	3018      	adds	r0, #24
 800a9da:	4283      	cmp	r3, r0
 800a9dc:	d047      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9de:	3018      	adds	r0, #24
 800a9e0:	4283      	cmp	r3, r0
 800a9e2:	d044      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9e4:	3018      	adds	r0, #24
 800a9e6:	4283      	cmp	r3, r0
 800a9e8:	d041      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9ea:	3018      	adds	r0, #24
 800a9ec:	4283      	cmp	r3, r0
 800a9ee:	d03e      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
 800a9f0:	3018      	adds	r0, #24
 800a9f2:	4283      	cmp	r3, r0
 800a9f4:	d03b      	beq.n	800aa6e <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a9f6:	6819      	ldr	r1, [r3, #0]
 800a9f8:	f021 010e 	bic.w	r1, r1, #14
 800a9fc:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 800a9fe:	6813      	ldr	r3, [r2, #0]
 800aa00:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 800aa04:	4973      	ldr	r1, [pc, #460]	; (800abd4 <HAL_DMA_Abort_IT+0x264>)
 800aa06:	428b      	cmp	r3, r1
 800aa08:	bf18      	it	ne
 800aa0a:	4283      	cmpne	r3, r0
 800aa0c:	d06a      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa0e:	4972      	ldr	r1, [pc, #456]	; (800abd8 <HAL_DMA_Abort_IT+0x268>)
 800aa10:	428b      	cmp	r3, r1
 800aa12:	d067      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa14:	3118      	adds	r1, #24
 800aa16:	428b      	cmp	r3, r1
 800aa18:	d064      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa1a:	3118      	adds	r1, #24
 800aa1c:	428b      	cmp	r3, r1
 800aa1e:	d061      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa20:	3118      	adds	r1, #24
 800aa22:	428b      	cmp	r3, r1
 800aa24:	d05e      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa26:	3118      	adds	r1, #24
 800aa28:	428b      	cmp	r3, r1
 800aa2a:	d05b      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa2c:	3118      	adds	r1, #24
 800aa2e:	428b      	cmp	r3, r1
 800aa30:	d058      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa32:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800aa36:	428b      	cmp	r3, r1
 800aa38:	d054      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa3a:	3118      	adds	r1, #24
 800aa3c:	428b      	cmp	r3, r1
 800aa3e:	d051      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa40:	3118      	adds	r1, #24
 800aa42:	428b      	cmp	r3, r1
 800aa44:	d04e      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa46:	3118      	adds	r1, #24
 800aa48:	428b      	cmp	r3, r1
 800aa4a:	d04b      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa4c:	3118      	adds	r1, #24
 800aa4e:	428b      	cmp	r3, r1
 800aa50:	d048      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa52:	3118      	adds	r1, #24
 800aa54:	428b      	cmp	r3, r1
 800aa56:	d045      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa58:	3118      	adds	r1, #24
 800aa5a:	428b      	cmp	r3, r1
 800aa5c:	d042      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa5e:	3118      	adds	r1, #24
 800aa60:	428b      	cmp	r3, r1
 800aa62:	d03f      	beq.n	800aae4 <HAL_DMA_Abort_IT+0x174>
 800aa64:	6819      	ldr	r1, [r3, #0]
 800aa66:	f021 0101 	bic.w	r1, r1, #1
 800aa6a:	6019      	str	r1, [r3, #0]
 800aa6c:	e03e      	b.n	800aaec <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 800aa6e:	2004      	movs	r0, #4
 800aa70:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800aa74:	bb81      	cbnz	r1, 800aad8 <HAL_DMA_Abort_IT+0x168>
 800aa76:	4a58      	ldr	r2, [pc, #352]	; (800abd8 <HAL_DMA_Abort_IT+0x268>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d02d      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aa7c:	3218      	adds	r2, #24
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d02a      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aa82:	3218      	adds	r2, #24
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d027      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aa88:	3218      	adds	r2, #24
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d024      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aa8e:	3218      	adds	r2, #24
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d021      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aa94:	3218      	adds	r2, #24
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d01e      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aa9a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d01a      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aaa2:	3218      	adds	r2, #24
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d017      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aaa8:	3218      	adds	r2, #24
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d014      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aaae:	3218      	adds	r2, #24
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d011      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aab4:	3218      	adds	r2, #24
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d00e      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aaba:	3218      	adds	r2, #24
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d00b      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aac0:	3218      	adds	r2, #24
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d008      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aac6:	3218      	adds	r2, #24
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d005      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x168>
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	f022 0201 	bic.w	r2, r2, #1
 800aad2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800aad4:	2000      	movs	r0, #0
 800aad6:	e758      	b.n	800a98a <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	f022 0201 	bic.w	r2, r2, #1
 800aade:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800aae0:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 800aae2:	e752      	b.n	800a98a <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800aae4:	6819      	ldr	r1, [r3, #0]
 800aae6:	f021 0101 	bic.w	r1, r1, #1
 800aaea:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aaec:	6813      	ldr	r3, [r2, #0]
 800aaee:	4838      	ldr	r0, [pc, #224]	; (800abd0 <HAL_DMA_Abort_IT+0x260>)
 800aaf0:	4938      	ldr	r1, [pc, #224]	; (800abd4 <HAL_DMA_Abort_IT+0x264>)
 800aaf2:	428b      	cmp	r3, r1
 800aaf4:	bf18      	it	ne
 800aaf6:	4283      	cmpne	r3, r0
 800aaf8:	d042      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800aafa:	3118      	adds	r1, #24
 800aafc:	428b      	cmp	r3, r1
 800aafe:	d03f      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab00:	3118      	adds	r1, #24
 800ab02:	428b      	cmp	r3, r1
 800ab04:	d03c      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab06:	3118      	adds	r1, #24
 800ab08:	428b      	cmp	r3, r1
 800ab0a:	d039      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab0c:	3118      	adds	r1, #24
 800ab0e:	428b      	cmp	r3, r1
 800ab10:	d036      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab12:	3118      	adds	r1, #24
 800ab14:	428b      	cmp	r3, r1
 800ab16:	d033      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab18:	3118      	adds	r1, #24
 800ab1a:	428b      	cmp	r3, r1
 800ab1c:	d030      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab1e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800ab22:	428b      	cmp	r3, r1
 800ab24:	d02c      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab26:	3118      	adds	r1, #24
 800ab28:	428b      	cmp	r3, r1
 800ab2a:	d029      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab2c:	3118      	adds	r1, #24
 800ab2e:	428b      	cmp	r3, r1
 800ab30:	d026      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab32:	3118      	adds	r1, #24
 800ab34:	428b      	cmp	r3, r1
 800ab36:	d023      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab38:	3118      	adds	r1, #24
 800ab3a:	428b      	cmp	r3, r1
 800ab3c:	d020      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab3e:	3118      	adds	r1, #24
 800ab40:	428b      	cmp	r3, r1
 800ab42:	d01d      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab44:	3118      	adds	r1, #24
 800ab46:	428b      	cmp	r3, r1
 800ab48:	d01a      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab4a:	3118      	adds	r1, #24
 800ab4c:	428b      	cmp	r3, r1
 800ab4e:	d017      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab50:	4922      	ldr	r1, [pc, #136]	; (800abdc <HAL_DMA_Abort_IT+0x26c>)
 800ab52:	428b      	cmp	r3, r1
 800ab54:	d014      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab56:	3114      	adds	r1, #20
 800ab58:	428b      	cmp	r3, r1
 800ab5a:	d011      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab5c:	3114      	adds	r1, #20
 800ab5e:	428b      	cmp	r3, r1
 800ab60:	d00e      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab62:	3114      	adds	r1, #20
 800ab64:	428b      	cmp	r3, r1
 800ab66:	d00b      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab68:	3114      	adds	r1, #20
 800ab6a:	428b      	cmp	r3, r1
 800ab6c:	d008      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab6e:	3114      	adds	r1, #20
 800ab70:	428b      	cmp	r3, r1
 800ab72:	d005      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab74:	3114      	adds	r1, #20
 800ab76:	428b      	cmp	r3, r1
 800ab78:	d002      	beq.n	800ab80 <HAL_DMA_Abort_IT+0x210>
 800ab7a:	3114      	adds	r1, #20
 800ab7c:	428b      	cmp	r3, r1
 800ab7e:	d117      	bne.n	800abb0 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ab80:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800ab82:	680b      	ldr	r3, [r1, #0]
 800ab84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab88:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ab8a:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ab8c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800ab8e:	f003 011f 	and.w	r1, r3, #31
 800ab92:	2301      	movs	r3, #1
 800ab94:	408b      	lsls	r3, r1
 800ab96:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab98:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800ab9a:	6e91      	ldr	r1, [r2, #104]	; 0x68
 800ab9c:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800ab9e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800aba0:	b133      	cbz	r3, 800abb0 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aba2:	6819      	ldr	r1, [r3, #0]
 800aba4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800aba8:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800abaa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800abac:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800abae:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800abb0:	2301      	movs	r3, #1
 800abb2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800abb6:	2300      	movs	r3, #0
 800abb8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800abbc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800abbe:	b12b      	cbz	r3, 800abcc <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 800abc0:	4610      	mov	r0, r2
 800abc2:	4798      	blx	r3
  return HAL_OK;
 800abc4:	2000      	movs	r0, #0
 800abc6:	e6e0      	b.n	800a98a <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 800abc8:	2001      	movs	r0, #1
}
 800abca:	4770      	bx	lr
  return HAL_OK;
 800abcc:	2000      	movs	r0, #0
 800abce:	e6dc      	b.n	800a98a <HAL_DMA_Abort_IT+0x1a>
 800abd0:	40020010 	.word	0x40020010
 800abd4:	40020028 	.word	0x40020028
 800abd8:	40020040 	.word	0x40020040
 800abdc:	58025408 	.word	0x58025408

0800abe0 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d037      	beq.n	800ac54 <HAL_DMA2D_Init+0x74>
{
 800abe4:	b510      	push	{r4, lr}
 800abe6:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800abe8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800abec:	2b00      	cmp	r3, #0
 800abee:	d02c      	beq.n	800ac4a <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800abf0:	2302      	movs	r3, #2
 800abf2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800abf6:	6821      	ldr	r1, [r4, #0]
 800abf8:	680a      	ldr	r2, [r1, #0]
 800abfa:	4b17      	ldr	r3, [pc, #92]	; (800ac58 <HAL_DMA2D_Init+0x78>)
 800abfc:	4013      	ands	r3, r2
 800abfe:	6862      	ldr	r2, [r4, #4]
 800ac00:	69e0      	ldr	r0, [r4, #28]
 800ac02:	4302      	orrs	r2, r0
 800ac04:	4313      	orrs	r3, r2
 800ac06:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800ac08:	6821      	ldr	r1, [r4, #0]
 800ac0a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800ac0c:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <HAL_DMA2D_Init+0x7c>)
 800ac0e:	4013      	ands	r3, r2
 800ac10:	68a2      	ldr	r2, [r4, #8]
 800ac12:	69a0      	ldr	r0, [r4, #24]
 800ac14:	4302      	orrs	r2, r0
 800ac16:	4313      	orrs	r3, r2
 800ac18:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ac1a:	6822      	ldr	r2, [r4, #0]
 800ac1c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ac1e:	4b10      	ldr	r3, [pc, #64]	; (800ac60 <HAL_DMA2D_Init+0x80>)
 800ac20:	400b      	ands	r3, r1
 800ac22:	68e1      	ldr	r1, [r4, #12]
 800ac24:	430b      	orrs	r3, r1
 800ac26:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800ac28:	6821      	ldr	r1, [r4, #0]
 800ac2a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ac2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ac30:	6920      	ldr	r0, [r4, #16]
 800ac32:	6962      	ldr	r2, [r4, #20]
 800ac34:	0552      	lsls	r2, r2, #21
 800ac36:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ac3e:	2000      	movs	r0, #0
 800ac40:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ac42:	2301      	movs	r3, #1
 800ac44:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800ac48:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800ac4a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800ac4e:	f7f8 f8e7 	bl	8002e20 <HAL_DMA2D_MspInit>
 800ac52:	e7cd      	b.n	800abf0 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 800ac54:	2001      	movs	r0, #1
}
 800ac56:	4770      	bx	lr
 800ac58:	fff8ffbf 	.word	0xfff8ffbf
 800ac5c:	fffffef8 	.word	0xfffffef8
 800ac60:	ffff0000 	.word	0xffff0000

0800ac64 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800ac64:	4770      	bx	lr

0800ac66 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800ac66:	4770      	bx	lr

0800ac68 <HAL_DMA2D_IRQHandler>:
{
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800ac6c:	6803      	ldr	r3, [r0, #0]
 800ac6e:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800ac70:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800ac72:	f015 0f01 	tst.w	r5, #1
 800ac76:	d016      	beq.n	800aca6 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800ac78:	f416 7f80 	tst.w	r6, #256	; 0x100
 800ac7c:	d013      	beq.n	800aca6 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac84:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800ac86:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800ac88:	f043 0301 	orr.w	r3, r3, #1
 800ac8c:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800ac8e:	6803      	ldr	r3, [r0, #0]
 800ac90:	2201      	movs	r2, #1
 800ac92:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ac94:	2304      	movs	r3, #4
 800ac96:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800aca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aca2:	b103      	cbz	r3, 800aca6 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800aca4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800aca6:	f015 0f20 	tst.w	r5, #32
 800acaa:	d018      	beq.n	800acde <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800acac:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800acb0:	d015      	beq.n	800acde <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	6813      	ldr	r3, [r2, #0]
 800acb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acba:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	2220      	movs	r2, #32
 800acc0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800acc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acc4:	f043 0302 	orr.w	r3, r3, #2
 800acc8:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800acca:	2304      	movs	r3, #4
 800accc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800acd0:	2300      	movs	r3, #0
 800acd2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800acd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acd8:	b10b      	cbz	r3, 800acde <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 800acda:	4620      	mov	r0, r4
 800acdc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800acde:	f015 0f08 	tst.w	r5, #8
 800ace2:	d018      	beq.n	800ad16 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800ace4:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800ace8:	d015      	beq.n	800ad16 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800acea:	6822      	ldr	r2, [r4, #0]
 800acec:	6813      	ldr	r3, [r2, #0]
 800acee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acf2:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	2208      	movs	r2, #8
 800acf8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800acfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acfc:	f043 0304 	orr.w	r3, r3, #4
 800ad00:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ad02:	2304      	movs	r3, #4
 800ad04:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800ad0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad10:	b10b      	cbz	r3, 800ad16 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 800ad12:	4620      	mov	r0, r4
 800ad14:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800ad16:	f015 0f04 	tst.w	r5, #4
 800ad1a:	d002      	beq.n	800ad22 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800ad1c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800ad20:	d120      	bne.n	800ad64 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800ad22:	f015 0f02 	tst.w	r5, #2
 800ad26:	d016      	beq.n	800ad56 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800ad28:	f416 7f00 	tst.w	r6, #512	; 0x200
 800ad2c:	d013      	beq.n	800ad56 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800ad2e:	6822      	ldr	r2, [r4, #0]
 800ad30:	6813      	ldr	r3, [r2, #0]
 800ad32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad36:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	2202      	movs	r2, #2
 800ad3c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ad3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad40:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ad42:	2301      	movs	r3, #1
 800ad44:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800ad48:	2300      	movs	r3, #0
 800ad4a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800ad4e:	6a23      	ldr	r3, [r4, #32]
 800ad50:	b10b      	cbz	r3, 800ad56 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 800ad52:	4620      	mov	r0, r4
 800ad54:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800ad56:	f015 0f10 	tst.w	r5, #16
 800ad5a:	d002      	beq.n	800ad62 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800ad5c:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 800ad60:	d10c      	bne.n	800ad7c <HAL_DMA2D_IRQHandler+0x114>
}
 800ad62:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800ad64:	6822      	ldr	r2, [r4, #0]
 800ad66:	6813      	ldr	r3, [r2, #0]
 800ad68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad6c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	2204      	movs	r2, #4
 800ad72:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800ad74:	4620      	mov	r0, r4
 800ad76:	f7ff ff75 	bl	800ac64 <HAL_DMA2D_LineEventCallback>
 800ad7a:	e7d2      	b.n	800ad22 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800ad7c:	6822      	ldr	r2, [r4, #0]
 800ad7e:	6813      	ldr	r3, [r2, #0]
 800ad80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad84:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	2210      	movs	r2, #16
 800ad8a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ad8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad8e:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ad90:	2301      	movs	r3, #1
 800ad92:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800ad96:	2300      	movs	r3, #0
 800ad98:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f7ff ff62 	bl	800ac66 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800ada2:	e7de      	b.n	800ad62 <HAL_DMA2D_IRQHandler+0xfa>

0800ada4 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ada4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d074      	beq.n	800ae96 <HAL_DMA2D_ConfigLayer+0xf2>
{
 800adac:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 800adae:	2301      	movs	r3, #1
 800adb0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800adb4:	2302      	movs	r3, #2
 800adb6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800adba:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800adbe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800adc2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800adc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800adc6:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800adca:	6b95      	ldr	r5, [r2, #56]	; 0x38
 800adcc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800add0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800add2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800add6:	f1a4 0209 	sub.w	r2, r4, #9
 800adda:	2a01      	cmp	r2, #1
 800addc:	d921      	bls.n	800ae22 <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800adde:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800ade2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ade6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ade8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800adec:	bb61      	cbnz	r1, 800ae48 <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800adee:	6804      	ldr	r4, [r0, #0]
 800adf0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800adf2:	4a2a      	ldr	r2, [pc, #168]	; (800ae9c <HAL_DMA2D_ConfigLayer+0xf8>)
 800adf4:	402a      	ands	r2, r5
 800adf6:	4313      	orrs	r3, r2
 800adf8:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800adfa:	6802      	ldr	r2, [r0, #0]
 800adfc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800ae00:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ae04:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800ae06:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	3b09      	subs	r3, #9
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d911      	bls.n	800ae34 <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ae10:	2301      	movs	r3, #1
 800ae12:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800ae16:	2300      	movs	r3, #0
 800ae18:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 800ae1c:	4618      	mov	r0, r3
}
 800ae1e:	bc30      	pop	{r4, r5}
 800ae20:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800ae22:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800ae26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ae2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ae2c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ae30:	4313      	orrs	r3, r2
 800ae32:	e7db      	b.n	800adec <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800ae34:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ae38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae3c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ae3e:	6802      	ldr	r2, [r0, #0]
 800ae40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae44:	6293      	str	r3, [r2, #40]	; 0x28
 800ae46:	e7e3      	b.n	800ae10 <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800ae48:	2c0b      	cmp	r4, #11
 800ae4a:	d01b      	beq.n	800ae84 <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800ae4c:	4d14      	ldr	r5, [pc, #80]	; (800aea0 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ae4e:	6804      	ldr	r4, [r0, #0]
 800ae50:	69e2      	ldr	r2, [r4, #28]
 800ae52:	ea22 0205 	bic.w	r2, r2, r5
 800ae56:	4313      	orrs	r3, r2
 800ae58:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800ae5a:	6802      	ldr	r2, [r0, #0]
 800ae5c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800ae60:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ae64:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800ae66:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ae68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6a:	3b09      	subs	r3, #9
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d8cf      	bhi.n	800ae10 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800ae70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ae74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae78:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ae7a:	6802      	ldr	r2, [r0, #0]
 800ae7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae80:	6213      	str	r3, [r2, #32]
 800ae82:	e7c5      	b.n	800ae10 <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800ae84:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800ae88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ae8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ae8e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 800ae92:	4d04      	ldr	r5, [pc, #16]	; (800aea4 <HAL_DMA2D_ConfigLayer+0x100>)
 800ae94:	e7db      	b.n	800ae4e <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 800ae96:	2002      	movs	r0, #2
}
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	00ccfff0 	.word	0x00ccfff0
 800aea0:	ff33000f 	.word	0xff33000f
 800aea4:	ff3f000f 	.word	0xff3f000f

0800aea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeaa:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800aeac:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aeae:	e06b      	b.n	800af88 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aeb0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800aeb2:	005e      	lsls	r6, r3, #1
 800aeb4:	2403      	movs	r4, #3
 800aeb6:	40b4      	lsls	r4, r6
 800aeb8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aebc:	68cc      	ldr	r4, [r1, #12]
 800aebe:	40b4      	lsls	r4, r6
 800aec0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800aec2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aec4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aec6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aeca:	684c      	ldr	r4, [r1, #4]
 800aecc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800aed0:	409c      	lsls	r4, r3
 800aed2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800aed6:	6044      	str	r4, [r0, #4]
 800aed8:	e068      	b.n	800afac <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aeda:	08dd      	lsrs	r5, r3, #3
 800aedc:	3508      	adds	r5, #8
 800aede:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800aee2:	f003 0407 	and.w	r4, r3, #7
 800aee6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800aeea:	240f      	movs	r4, #15
 800aeec:	fa04 f40c 	lsl.w	r4, r4, ip
 800aef0:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800aef4:	690c      	ldr	r4, [r1, #16]
 800aef6:	fa04 f40c 	lsl.w	r4, r4, ip
 800aefa:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800aefe:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800af02:	e06b      	b.n	800afdc <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800af04:	2409      	movs	r4, #9
 800af06:	e000      	b.n	800af0a <HAL_GPIO_Init+0x62>
 800af08:	2400      	movs	r4, #0
 800af0a:	fa04 f40e 	lsl.w	r4, r4, lr
 800af0e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800af10:	f10c 0c02 	add.w	ip, ip, #2
 800af14:	4d69      	ldr	r5, [pc, #420]	; (800b0bc <HAL_GPIO_Init+0x214>)
 800af16:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800af1a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800af1e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800af20:	43d4      	mvns	r4, r2
 800af22:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800af26:	684f      	ldr	r7, [r1, #4]
 800af28:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800af2c:	d001      	beq.n	800af32 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800af2e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800af32:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800af36:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800af38:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800af3a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800af3e:	684f      	ldr	r7, [r1, #4]
 800af40:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800af44:	d001      	beq.n	800af4a <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800af46:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800af4a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800af4e:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800af50:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 800af54:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800af58:	684f      	ldr	r7, [r1, #4]
 800af5a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800af5e:	d001      	beq.n	800af64 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800af60:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800af64:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800af68:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800af6c:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 800af70:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800af72:	684e      	ldr	r6, [r1, #4]
 800af74:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800af78:	d001      	beq.n	800af7e <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800af7a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800af7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af82:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 800af86:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800af88:	680a      	ldr	r2, [r1, #0]
 800af8a:	fa32 f403 	lsrs.w	r4, r2, r3
 800af8e:	f000 8092 	beq.w	800b0b6 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800af92:	f04f 0c01 	mov.w	ip, #1
 800af96:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 800af9a:	ea1c 0202 	ands.w	r2, ip, r2
 800af9e:	d0f2      	beq.n	800af86 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800afa0:	684c      	ldr	r4, [r1, #4]
 800afa2:	f004 0403 	and.w	r4, r4, #3
 800afa6:	3c01      	subs	r4, #1
 800afa8:	2c01      	cmp	r4, #1
 800afaa:	d981      	bls.n	800aeb0 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afac:	684c      	ldr	r4, [r1, #4]
 800afae:	f004 0403 	and.w	r4, r4, #3
 800afb2:	2c03      	cmp	r4, #3
 800afb4:	d00c      	beq.n	800afd0 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 800afb6:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800afb8:	005d      	lsls	r5, r3, #1
 800afba:	f04f 0c03 	mov.w	ip, #3
 800afbe:	fa0c fc05 	lsl.w	ip, ip, r5
 800afc2:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800afc6:	688c      	ldr	r4, [r1, #8]
 800afc8:	40ac      	lsls	r4, r5
 800afca:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 800afce:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800afd0:	684c      	ldr	r4, [r1, #4]
 800afd2:	f004 0403 	and.w	r4, r4, #3
 800afd6:	2c02      	cmp	r4, #2
 800afd8:	f43f af7f 	beq.w	800aeda <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800afdc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800afde:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800afe2:	f04f 0c03 	mov.w	ip, #3
 800afe6:	fa0c fc0e 	lsl.w	ip, ip, lr
 800afea:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800afee:	684c      	ldr	r4, [r1, #4]
 800aff0:	f004 0403 	and.w	r4, r4, #3
 800aff4:	fa04 f40e 	lsl.w	r4, r4, lr
 800aff8:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800affc:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800affe:	684c      	ldr	r4, [r1, #4]
 800b000:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800b004:	d0bf      	beq.n	800af86 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b006:	4c2e      	ldr	r4, [pc, #184]	; (800b0c0 <HAL_GPIO_Init+0x218>)
 800b008:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 800b00c:	f045 0502 	orr.w	r5, r5, #2
 800b010:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 800b014:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 800b018:	f004 0402 	and.w	r4, r4, #2
 800b01c:	9401      	str	r4, [sp, #4]
 800b01e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800b020:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800b024:	f10c 0502 	add.w	r5, ip, #2
 800b028:	4c24      	ldr	r4, [pc, #144]	; (800b0bc <HAL_GPIO_Init+0x214>)
 800b02a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b02e:	f003 0403 	and.w	r4, r3, #3
 800b032:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800b036:	240f      	movs	r4, #15
 800b038:	fa04 f40e 	lsl.w	r4, r4, lr
 800b03c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b040:	4c20      	ldr	r4, [pc, #128]	; (800b0c4 <HAL_GPIO_Init+0x21c>)
 800b042:	42a0      	cmp	r0, r4
 800b044:	f43f af60 	beq.w	800af08 <HAL_GPIO_Init+0x60>
 800b048:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b04c:	42a0      	cmp	r0, r4
 800b04e:	d022      	beq.n	800b096 <HAL_GPIO_Init+0x1ee>
 800b050:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b054:	42a0      	cmp	r0, r4
 800b056:	d020      	beq.n	800b09a <HAL_GPIO_Init+0x1f2>
 800b058:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b05c:	42a0      	cmp	r0, r4
 800b05e:	d01e      	beq.n	800b09e <HAL_GPIO_Init+0x1f6>
 800b060:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b064:	42a0      	cmp	r0, r4
 800b066:	d01c      	beq.n	800b0a2 <HAL_GPIO_Init+0x1fa>
 800b068:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b06c:	42a0      	cmp	r0, r4
 800b06e:	d01a      	beq.n	800b0a6 <HAL_GPIO_Init+0x1fe>
 800b070:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b074:	42a0      	cmp	r0, r4
 800b076:	d018      	beq.n	800b0aa <HAL_GPIO_Init+0x202>
 800b078:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b07c:	42a0      	cmp	r0, r4
 800b07e:	d016      	beq.n	800b0ae <HAL_GPIO_Init+0x206>
 800b080:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b084:	42a0      	cmp	r0, r4
 800b086:	d014      	beq.n	800b0b2 <HAL_GPIO_Init+0x20a>
 800b088:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b08c:	42a0      	cmp	r0, r4
 800b08e:	f43f af39 	beq.w	800af04 <HAL_GPIO_Init+0x5c>
 800b092:	240a      	movs	r4, #10
 800b094:	e739      	b.n	800af0a <HAL_GPIO_Init+0x62>
 800b096:	2401      	movs	r4, #1
 800b098:	e737      	b.n	800af0a <HAL_GPIO_Init+0x62>
 800b09a:	2402      	movs	r4, #2
 800b09c:	e735      	b.n	800af0a <HAL_GPIO_Init+0x62>
 800b09e:	2403      	movs	r4, #3
 800b0a0:	e733      	b.n	800af0a <HAL_GPIO_Init+0x62>
 800b0a2:	2404      	movs	r4, #4
 800b0a4:	e731      	b.n	800af0a <HAL_GPIO_Init+0x62>
 800b0a6:	2405      	movs	r4, #5
 800b0a8:	e72f      	b.n	800af0a <HAL_GPIO_Init+0x62>
 800b0aa:	2406      	movs	r4, #6
 800b0ac:	e72d      	b.n	800af0a <HAL_GPIO_Init+0x62>
 800b0ae:	2407      	movs	r4, #7
 800b0b0:	e72b      	b.n	800af0a <HAL_GPIO_Init+0x62>
 800b0b2:	2408      	movs	r4, #8
 800b0b4:	e729      	b.n	800af0a <HAL_GPIO_Init+0x62>
  }
}
 800b0b6:	b003      	add	sp, #12
 800b0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	58000400 	.word	0x58000400
 800b0c0:	58024400 	.word	0x58024400
 800b0c4:	58020000 	.word	0x58020000

0800b0c8 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 800b0c8:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800b0ca:	fa31 f203 	lsrs.w	r2, r1, r3
 800b0ce:	f000 809d 	beq.w	800b20c <HAL_GPIO_DeInit+0x144>
{
 800b0d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0d4:	e02e      	b.n	800b134 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b0d6:	2509      	movs	r5, #9
 800b0d8:	e000      	b.n	800b0dc <HAL_GPIO_DeInit+0x14>
 800b0da:	2500      	movs	r5, #0
 800b0dc:	fa05 fc0c 	lsl.w	ip, r5, ip
 800b0e0:	45a4      	cmp	ip, r4
 800b0e2:	d072      	beq.n	800b1ca <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b0e4:	6804      	ldr	r4, [r0, #0]
 800b0e6:	005d      	lsls	r5, r3, #1
 800b0e8:	f04f 0c03 	mov.w	ip, #3
 800b0ec:	fa0c fc05 	lsl.w	ip, ip, r5
 800b0f0:	ea44 040c 	orr.w	r4, r4, ip
 800b0f4:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b0f6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800b0fa:	f10e 0e08 	add.w	lr, lr, #8
 800b0fe:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800b102:	f003 0507 	and.w	r5, r3, #7
 800b106:	00ae      	lsls	r6, r5, #2
 800b108:	250f      	movs	r5, #15
 800b10a:	40b5      	lsls	r5, r6
 800b10c:	ea24 0405 	bic.w	r4, r4, r5
 800b110:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b114:	68c4      	ldr	r4, [r0, #12]
 800b116:	ea24 040c 	bic.w	r4, r4, ip
 800b11a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b11c:	6844      	ldr	r4, [r0, #4]
 800b11e:	ea24 0202 	bic.w	r2, r4, r2
 800b122:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b124:	6882      	ldr	r2, [r0, #8]
 800b126:	ea22 020c 	bic.w	r2, r2, ip
 800b12a:	6082      	str	r2, [r0, #8]
    }

    position++;
 800b12c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800b12e:	fa31 f203 	lsrs.w	r2, r1, r3
 800b132:	d06a      	beq.n	800b20a <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b134:	2201      	movs	r2, #1
 800b136:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800b138:	ea12 0e01 	ands.w	lr, r2, r1
 800b13c:	d0f6      	beq.n	800b12c <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b13e:	089e      	lsrs	r6, r3, #2
 800b140:	1cb5      	adds	r5, r6, #2
 800b142:	4c33      	ldr	r4, [pc, #204]	; (800b210 <HAL_GPIO_DeInit+0x148>)
 800b144:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b148:	f003 0c03 	and.w	ip, r3, #3
 800b14c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800b150:	250f      	movs	r5, #15
 800b152:	fa05 f70c 	lsl.w	r7, r5, ip
 800b156:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b158:	4d2e      	ldr	r5, [pc, #184]	; (800b214 <HAL_GPIO_DeInit+0x14c>)
 800b15a:	42a8      	cmp	r0, r5
 800b15c:	d0bd      	beq.n	800b0da <HAL_GPIO_DeInit+0x12>
 800b15e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b162:	42a8      	cmp	r0, r5
 800b164:	d021      	beq.n	800b1aa <HAL_GPIO_DeInit+0xe2>
 800b166:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b16a:	42a8      	cmp	r0, r5
 800b16c:	d01f      	beq.n	800b1ae <HAL_GPIO_DeInit+0xe6>
 800b16e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b172:	42a8      	cmp	r0, r5
 800b174:	d01d      	beq.n	800b1b2 <HAL_GPIO_DeInit+0xea>
 800b176:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b17a:	42a8      	cmp	r0, r5
 800b17c:	d01b      	beq.n	800b1b6 <HAL_GPIO_DeInit+0xee>
 800b17e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b182:	42a8      	cmp	r0, r5
 800b184:	d019      	beq.n	800b1ba <HAL_GPIO_DeInit+0xf2>
 800b186:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b18a:	42a8      	cmp	r0, r5
 800b18c:	d017      	beq.n	800b1be <HAL_GPIO_DeInit+0xf6>
 800b18e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b192:	42a8      	cmp	r0, r5
 800b194:	d015      	beq.n	800b1c2 <HAL_GPIO_DeInit+0xfa>
 800b196:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b19a:	42a8      	cmp	r0, r5
 800b19c:	d013      	beq.n	800b1c6 <HAL_GPIO_DeInit+0xfe>
 800b19e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b1a2:	42a8      	cmp	r0, r5
 800b1a4:	d097      	beq.n	800b0d6 <HAL_GPIO_DeInit+0xe>
 800b1a6:	250a      	movs	r5, #10
 800b1a8:	e798      	b.n	800b0dc <HAL_GPIO_DeInit+0x14>
 800b1aa:	2501      	movs	r5, #1
 800b1ac:	e796      	b.n	800b0dc <HAL_GPIO_DeInit+0x14>
 800b1ae:	2502      	movs	r5, #2
 800b1b0:	e794      	b.n	800b0dc <HAL_GPIO_DeInit+0x14>
 800b1b2:	2503      	movs	r5, #3
 800b1b4:	e792      	b.n	800b0dc <HAL_GPIO_DeInit+0x14>
 800b1b6:	2504      	movs	r5, #4
 800b1b8:	e790      	b.n	800b0dc <HAL_GPIO_DeInit+0x14>
 800b1ba:	2505      	movs	r5, #5
 800b1bc:	e78e      	b.n	800b0dc <HAL_GPIO_DeInit+0x14>
 800b1be:	2506      	movs	r5, #6
 800b1c0:	e78c      	b.n	800b0dc <HAL_GPIO_DeInit+0x14>
 800b1c2:	2507      	movs	r5, #7
 800b1c4:	e78a      	b.n	800b0dc <HAL_GPIO_DeInit+0x14>
 800b1c6:	2508      	movs	r5, #8
 800b1c8:	e788      	b.n	800b0dc <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b1ca:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800b1ce:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800b1d2:	ea25 050e 	bic.w	r5, r5, lr
 800b1d6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800b1da:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800b1de:	ea25 050e 	bic.w	r5, r5, lr
 800b1e2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800b1e6:	6865      	ldr	r5, [r4, #4]
 800b1e8:	ea25 050e 	bic.w	r5, r5, lr
 800b1ec:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800b1ee:	6825      	ldr	r5, [r4, #0]
 800b1f0:	ea25 050e 	bic.w	r5, r5, lr
 800b1f4:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b1f6:	f8df c018 	ldr.w	ip, [pc, #24]	; 800b210 <HAL_GPIO_DeInit+0x148>
 800b1fa:	1cb4      	adds	r4, r6, #2
 800b1fc:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 800b200:	ea25 0507 	bic.w	r5, r5, r7
 800b204:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 800b208:	e76c      	b.n	800b0e4 <HAL_GPIO_DeInit+0x1c>
  }
}
 800b20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	58000400 	.word	0x58000400
 800b214:	58020000 	.word	0x58020000

0800b218 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b218:	6903      	ldr	r3, [r0, #16]
 800b21a:	4219      	tst	r1, r3
 800b21c:	d001      	beq.n	800b222 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800b21e:	2001      	movs	r0, #1
 800b220:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b222:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800b224:	4770      	bx	lr

0800b226 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b226:	b10a      	cbz	r2, 800b22c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b228:	6181      	str	r1, [r0, #24]
 800b22a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b22c:	0409      	lsls	r1, r1, #16
 800b22e:	6181      	str	r1, [r0, #24]
  }
}
 800b230:	4770      	bx	lr

0800b232 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b232:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b234:	ea01 0203 	and.w	r2, r1, r3
 800b238:	ea21 0103 	bic.w	r1, r1, r3
 800b23c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b240:	6181      	str	r1, [r0, #24]
}
 800b242:	4770      	bx	lr

0800b244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b244:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24e:	4203      	tst	r3, r0
 800b250:	d100      	bne.n	800b254 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 800b252:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b258:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b25c:	f7f7 fda2 	bl	8002da4 <HAL_GPIO_EXTI_Callback>
}
 800b260:	e7f7      	b.n	800b252 <HAL_GPIO_EXTI_IRQHandler+0xe>

0800b262 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b262:	6803      	ldr	r3, [r0, #0]
 800b264:	699a      	ldr	r2, [r3, #24]
 800b266:	f012 0f02 	tst.w	r2, #2
 800b26a:	d001      	beq.n	800b270 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b26c:	2200      	movs	r2, #0
 800b26e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b270:	6803      	ldr	r3, [r0, #0]
 800b272:	699a      	ldr	r2, [r3, #24]
 800b274:	f012 0f01 	tst.w	r2, #1
 800b278:	d103      	bne.n	800b282 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b27a:	699a      	ldr	r2, [r3, #24]
 800b27c:	f042 0201 	orr.w	r2, r2, #1
 800b280:	619a      	str	r2, [r3, #24]
  }
}
 800b282:	4770      	bx	lr

0800b284 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b284:	b410      	push	{r4}
 800b286:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b288:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b28c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b290:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b292:	4321      	orrs	r1, r4
 800b294:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b298:	6802      	ldr	r2, [r0, #0]
 800b29a:	6853      	ldr	r3, [r2, #4]
 800b29c:	0d64      	lsrs	r4, r4, #21
 800b29e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800b2a2:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800b2a6:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800b2aa:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800b2ae:	f044 0403 	orr.w	r4, r4, #3
 800b2b2:	ea23 0404 	bic.w	r4, r3, r4
 800b2b6:	4321      	orrs	r1, r4
 800b2b8:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <I2C_IsErrorOccurred>:
{
 800b2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c4:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800b2c6:	6803      	ldr	r3, [r0, #0]
 800b2c8:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b2ca:	f017 0710 	ands.w	r7, r7, #16
 800b2ce:	d04e      	beq.n	800b36e <I2C_IsErrorOccurred+0xae>
 800b2d0:	460e      	mov	r6, r1
 800b2d2:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2d4:	2210      	movs	r2, #16
 800b2d6:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b2d8:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	6998      	ldr	r0, [r3, #24]
 800b2de:	f010 0f20 	tst.w	r0, #32
 800b2e2:	d13d      	bne.n	800b360 <I2C_IsErrorOccurred+0xa0>
 800b2e4:	2d00      	cmp	r5, #0
 800b2e6:	d13b      	bne.n	800b360 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 800b2e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b2ec:	d0f5      	beq.n	800b2da <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b2ee:	f7ff f9f7 	bl	800a6e0 <HAL_GetTick>
 800b2f2:	eba0 0008 	sub.w	r0, r0, r8
 800b2f6:	42b0      	cmp	r0, r6
 800b2f8:	d801      	bhi.n	800b2fe <I2C_IsErrorOccurred+0x3e>
 800b2fa:	2e00      	cmp	r6, #0
 800b2fc:	d1ed      	bne.n	800b2da <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b2fe:	6821      	ldr	r1, [r4, #0]
 800b300:	684a      	ldr	r2, [r1, #4]
 800b302:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800b306:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b30a:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b30c:	6988      	ldr	r0, [r1, #24]
 800b30e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800b312:	d004      	beq.n	800b31e <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 800b314:	3b20      	subs	r3, #32
 800b316:	bf18      	it	ne
 800b318:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 800b31a:	b902      	cbnz	r2, 800b31e <I2C_IsErrorOccurred+0x5e>
 800b31c:	b9c3      	cbnz	r3, 800b350 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	f013 0f20 	tst.w	r3, #32
 800b326:	d1d8      	bne.n	800b2da <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b328:	f7ff f9da 	bl	800a6e0 <HAL_GetTick>
 800b32c:	eba0 0008 	sub.w	r0, r0, r8
 800b330:	2819      	cmp	r0, #25
 800b332:	d9f4      	bls.n	800b31e <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b334:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b336:	f043 0320 	orr.w	r3, r3, #32
 800b33a:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800b33c:	2320      	movs	r3, #32
 800b33e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800b342:	2300      	movs	r3, #0
 800b344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 800b348:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 800b34c:	2501      	movs	r5, #1
 800b34e:	e7e6      	b.n	800b31e <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b350:	684b      	ldr	r3, [r1, #4]
 800b352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b356:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800b358:	f7ff f9c2 	bl	800a6e0 <HAL_GetTick>
 800b35c:	4680      	mov	r8, r0
 800b35e:	e7de      	b.n	800b31e <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 800b360:	2d00      	cmp	r5, #0
 800b362:	d140      	bne.n	800b3e6 <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b364:	2220      	movs	r2, #32
 800b366:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800b368:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800b36a:	2501      	movs	r5, #1
 800b36c:	e000      	b.n	800b370 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 800b36e:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 800b370:	6822      	ldr	r2, [r4, #0]
 800b372:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b374:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b378:	d005      	beq.n	800b386 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 800b37a:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b37e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b382:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800b384:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b386:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b38a:	d006      	beq.n	800b39a <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 800b38c:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b390:	6822      	ldr	r2, [r4, #0]
 800b392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b396:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800b398:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b39a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b39e:	d024      	beq.n	800b3ea <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 800b3a0:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3aa:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800b3ac:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff ff57 	bl	800b262 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800b3b4:	6822      	ldr	r2, [r4, #0]
 800b3b6:	6853      	ldr	r3, [r2, #4]
 800b3b8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800b3bc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b3c0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b3c4:	f023 0301 	bic.w	r3, r3, #1
 800b3c8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800b3ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b3cc:	431f      	orrs	r7, r3
 800b3ce:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b3d0:	2320      	movs	r3, #32
 800b3d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b3dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800b3e6:	2704      	movs	r7, #4
 800b3e8:	e7c2      	b.n	800b370 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 800b3ea:	2d00      	cmp	r5, #0
 800b3ec:	d0f8      	beq.n	800b3e0 <I2C_IsErrorOccurred+0x120>
 800b3ee:	e7de      	b.n	800b3ae <I2C_IsErrorOccurred+0xee>

0800b3f0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	f013 0f02 	tst.w	r3, #2
 800b400:	d11d      	bne.n	800b43e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b402:	4632      	mov	r2, r6
 800b404:	4629      	mov	r1, r5
 800b406:	4620      	mov	r0, r4
 800b408:	f7ff ff5a 	bl	800b2c0 <I2C_IsErrorOccurred>
 800b40c:	b9c8      	cbnz	r0, 800b442 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800b40e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b412:	d0f1      	beq.n	800b3f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b414:	f7ff f964 	bl	800a6e0 <HAL_GetTick>
 800b418:	1b80      	subs	r0, r0, r6
 800b41a:	42a8      	cmp	r0, r5
 800b41c:	d801      	bhi.n	800b422 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800b41e:	2d00      	cmp	r5, #0
 800b420:	d1ea      	bne.n	800b3f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b422:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b424:	f043 0320 	orr.w	r3, r3, #32
 800b428:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b42a:	2320      	movs	r3, #32
 800b42c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b430:	2300      	movs	r3, #0
 800b432:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b436:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800b43a:	2001      	movs	r0, #1
 800b43c:	e000      	b.n	800b440 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800b43e:	2000      	movs	r0, #0
}
 800b440:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800b442:	2001      	movs	r0, #1
 800b444:	e7fc      	b.n	800b440 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800b446 <I2C_WaitOnFlagUntilTimeout>:
{
 800b446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b44a:	4606      	mov	r6, r0
 800b44c:	4688      	mov	r8, r1
 800b44e:	4617      	mov	r7, r2
 800b450:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b452:	6834      	ldr	r4, [r6, #0]
 800b454:	69a4      	ldr	r4, [r4, #24]
 800b456:	ea38 0304 	bics.w	r3, r8, r4
 800b45a:	bf0c      	ite	eq
 800b45c:	f04f 0c01 	moveq.w	ip, #1
 800b460:	f04f 0c00 	movne.w	ip, #0
 800b464:	45bc      	cmp	ip, r7
 800b466:	d118      	bne.n	800b49a <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 800b468:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b46c:	d0f1      	beq.n	800b452 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b46e:	f7ff f937 	bl	800a6e0 <HAL_GetTick>
 800b472:	9b06      	ldr	r3, [sp, #24]
 800b474:	1ac0      	subs	r0, r0, r3
 800b476:	42a8      	cmp	r0, r5
 800b478:	d801      	bhi.n	800b47e <I2C_WaitOnFlagUntilTimeout+0x38>
 800b47a:	2d00      	cmp	r5, #0
 800b47c:	d1e9      	bne.n	800b452 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b47e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800b480:	f043 0320 	orr.w	r3, r3, #32
 800b484:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b486:	2320      	movs	r3, #32
 800b488:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b48c:	2300      	movs	r3, #0
 800b48e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b492:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800b496:	2001      	movs	r0, #1
 800b498:	e000      	b.n	800b49c <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 800b49a:	2000      	movs	r0, #0
}
 800b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4a0 <I2C_RequestMemoryWrite>:
{
 800b4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a4:	b082      	sub	sp, #8
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	4690      	mov	r8, r2
 800b4aa:	461d      	mov	r5, r3
 800b4ac:	9e08      	ldr	r6, [sp, #32]
 800b4ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b4b0:	4b19      	ldr	r3, [pc, #100]	; (800b518 <I2C_RequestMemoryWrite+0x78>)
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4b8:	b2ea      	uxtb	r2, r5
 800b4ba:	f7ff fee3 	bl	800b284 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4be:	463a      	mov	r2, r7
 800b4c0:	4631      	mov	r1, r6
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f7ff ff94 	bl	800b3f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4c8:	b9f8      	cbnz	r0, 800b50a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b4ca:	2d01      	cmp	r5, #1
 800b4cc:	d10e      	bne.n	800b4ec <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	fa5f f288 	uxtb.w	r2, r8
 800b4d4:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b4d6:	9700      	str	r7, [sp, #0]
 800b4d8:	4633      	mov	r3, r6
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2180      	movs	r1, #128	; 0x80
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f7ff ffb1 	bl	800b446 <I2C_WaitOnFlagUntilTimeout>
 800b4e4:	b9a8      	cbnz	r0, 800b512 <I2C_RequestMemoryWrite+0x72>
}
 800b4e6:	b002      	add	sp, #8
 800b4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800b4f2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4f4:	463a      	mov	r2, r7
 800b4f6:	4631      	mov	r1, r6
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f7ff ff79 	bl	800b3f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4fe:	b930      	cbnz	r0, 800b50e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b500:	6823      	ldr	r3, [r4, #0]
 800b502:	fa5f f288 	uxtb.w	r2, r8
 800b506:	629a      	str	r2, [r3, #40]	; 0x28
 800b508:	e7e5      	b.n	800b4d6 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800b50a:	2001      	movs	r0, #1
 800b50c:	e7eb      	b.n	800b4e6 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800b50e:	2001      	movs	r0, #1
 800b510:	e7e9      	b.n	800b4e6 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800b512:	2001      	movs	r0, #1
 800b514:	e7e7      	b.n	800b4e6 <I2C_RequestMemoryWrite+0x46>
 800b516:	bf00      	nop
 800b518:	80002000 	.word	0x80002000

0800b51c <I2C_RequestMemoryRead>:
{
 800b51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b520:	b082      	sub	sp, #8
 800b522:	4604      	mov	r4, r0
 800b524:	4690      	mov	r8, r2
 800b526:	461d      	mov	r5, r3
 800b528:	9e08      	ldr	r6, [sp, #32]
 800b52a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b52c:	4b18      	ldr	r3, [pc, #96]	; (800b590 <I2C_RequestMemoryRead+0x74>)
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	2300      	movs	r3, #0
 800b532:	b2ea      	uxtb	r2, r5
 800b534:	f7ff fea6 	bl	800b284 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b538:	463a      	mov	r2, r7
 800b53a:	4631      	mov	r1, r6
 800b53c:	4620      	mov	r0, r4
 800b53e:	f7ff ff57 	bl	800b3f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b542:	b9f8      	cbnz	r0, 800b584 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b544:	2d01      	cmp	r5, #1
 800b546:	d10e      	bne.n	800b566 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	fa5f f288 	uxtb.w	r2, r8
 800b54e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b550:	9700      	str	r7, [sp, #0]
 800b552:	4633      	mov	r3, r6
 800b554:	2200      	movs	r2, #0
 800b556:	2140      	movs	r1, #64	; 0x40
 800b558:	4620      	mov	r0, r4
 800b55a:	f7ff ff74 	bl	800b446 <I2C_WaitOnFlagUntilTimeout>
 800b55e:	b9a8      	cbnz	r0, 800b58c <I2C_RequestMemoryRead+0x70>
}
 800b560:	b002      	add	sp, #8
 800b562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800b56c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b56e:	463a      	mov	r2, r7
 800b570:	4631      	mov	r1, r6
 800b572:	4620      	mov	r0, r4
 800b574:	f7ff ff3c 	bl	800b3f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b578:	b930      	cbnz	r0, 800b588 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	fa5f f288 	uxtb.w	r2, r8
 800b580:	629a      	str	r2, [r3, #40]	; 0x28
 800b582:	e7e5      	b.n	800b550 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 800b584:	2001      	movs	r0, #1
 800b586:	e7eb      	b.n	800b560 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800b588:	2001      	movs	r0, #1
 800b58a:	e7e9      	b.n	800b560 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800b58c:	2001      	movs	r0, #1
 800b58e:	e7e7      	b.n	800b560 <I2C_RequestMemoryRead+0x44>
 800b590:	80002000 	.word	0x80002000

0800b594 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	4605      	mov	r5, r0
 800b598:	460c      	mov	r4, r1
 800b59a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	f013 0f20 	tst.w	r3, #32
 800b5a4:	d11a      	bne.n	800b5dc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5a6:	4632      	mov	r2, r6
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f7ff fe88 	bl	800b2c0 <I2C_IsErrorOccurred>
 800b5b0:	b9b0      	cbnz	r0, 800b5e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5b2:	f7ff f895 	bl	800a6e0 <HAL_GetTick>
 800b5b6:	1b80      	subs	r0, r0, r6
 800b5b8:	42a0      	cmp	r0, r4
 800b5ba:	d801      	bhi.n	800b5c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800b5bc:	2c00      	cmp	r4, #0
 800b5be:	d1ed      	bne.n	800b59c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5c0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b5c2:	f043 0320 	orr.w	r3, r3, #32
 800b5c6:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b5c8:	2320      	movs	r3, #32
 800b5ca:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b5d4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800b5d8:	2001      	movs	r0, #1
}
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800b5dc:	2000      	movs	r0, #0
 800b5de:	e7fc      	b.n	800b5da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800b5e0:	2001      	movs	r0, #1
 800b5e2:	e7fa      	b.n	800b5da <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800b5e4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d057      	beq.n	800b698 <HAL_I2C_Init+0xb4>
{
 800b5e8:	b510      	push	{r4, lr}
 800b5ea:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b5ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d041      	beq.n	800b678 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b5f4:	2324      	movs	r3, #36	; 0x24
 800b5f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b5fa:	6822      	ldr	r2, [r4, #0]
 800b5fc:	6813      	ldr	r3, [r2, #0]
 800b5fe:	f023 0301 	bic.w	r3, r3, #1
 800b602:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b604:	6863      	ldr	r3, [r4, #4]
 800b606:	6822      	ldr	r2, [r4, #0]
 800b608:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800b60c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b60e:	6822      	ldr	r2, [r4, #0]
 800b610:	6893      	ldr	r3, [r2, #8]
 800b612:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b616:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b618:	68e3      	ldr	r3, [r4, #12]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d031      	beq.n	800b682 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b61e:	68a3      	ldr	r3, [r4, #8]
 800b620:	6822      	ldr	r2, [r4, #0]
 800b622:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800b626:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b628:	68e3      	ldr	r3, [r4, #12]
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d02f      	beq.n	800b68e <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b62e:	6822      	ldr	r2, [r4, #0]
 800b630:	6851      	ldr	r1, [r2, #4]
 800b632:	4b1a      	ldr	r3, [pc, #104]	; (800b69c <HAL_I2C_Init+0xb8>)
 800b634:	430b      	orrs	r3, r1
 800b636:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b638:	6822      	ldr	r2, [r4, #0]
 800b63a:	68d3      	ldr	r3, [r2, #12]
 800b63c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b640:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b642:	6923      	ldr	r3, [r4, #16]
 800b644:	6962      	ldr	r2, [r4, #20]
 800b646:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b648:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b64a:	6822      	ldr	r2, [r4, #0]
 800b64c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b650:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b652:	69e3      	ldr	r3, [r4, #28]
 800b654:	6a21      	ldr	r1, [r4, #32]
 800b656:	6822      	ldr	r2, [r4, #0]
 800b658:	430b      	orrs	r3, r1
 800b65a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b65c:	6822      	ldr	r2, [r4, #0]
 800b65e:	6813      	ldr	r3, [r2, #0]
 800b660:	f043 0301 	orr.w	r3, r3, #1
 800b664:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b666:	2000      	movs	r0, #0
 800b668:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b66a:	2320      	movs	r3, #32
 800b66c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b670:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b672:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800b676:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800b678:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800b67c:	f7f7 fbf4 	bl	8002e68 <HAL_I2C_MspInit>
 800b680:	e7b8      	b.n	800b5f4 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	6822      	ldr	r2, [r4, #0]
 800b686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b68a:	6093      	str	r3, [r2, #8]
 800b68c:	e7cc      	b.n	800b628 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b694:	605a      	str	r2, [r3, #4]
 800b696:	e7ca      	b.n	800b62e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800b698:	2001      	movs	r0, #1
}
 800b69a:	4770      	bx	lr
 800b69c:	02008000 	.word	0x02008000

0800b6a0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800b6a0:	b1a8      	cbz	r0, 800b6ce <HAL_I2C_DeInit+0x2e>
{
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b6a6:	2324      	movs	r3, #36	; 0x24
 800b6a8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b6ac:	6802      	ldr	r2, [r0, #0]
 800b6ae:	6813      	ldr	r3, [r2, #0]
 800b6b0:	f023 0301 	bic.w	r3, r3, #1
 800b6b4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800b6b6:	f7f7 fc23 	bl	8002f00 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b6be:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b6c2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6c4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 800b6c8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800b6cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b6ce:	2001      	movs	r0, #1
}
 800b6d0:	4770      	bx	lr

0800b6d2 <HAL_I2C_Mem_Write>:
{
 800b6d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	460d      	mov	r5, r1
 800b6da:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b6de:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6e0:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800b6e4:	b2c9      	uxtb	r1, r1
 800b6e6:	2920      	cmp	r1, #32
 800b6e8:	f040 80bc 	bne.w	800b864 <HAL_I2C_Mem_Write+0x192>
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	4690      	mov	r8, r2
 800b6f0:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800b6f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6f4:	f1ba 0f00 	cmp.w	sl, #0
 800b6f8:	bf18      	it	ne
 800b6fa:	2b00      	cmpne	r3, #0
 800b6fc:	d016      	beq.n	800b72c <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 800b6fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b702:	2b01      	cmp	r3, #1
 800b704:	f000 80b2 	beq.w	800b86c <HAL_I2C_Mem_Write+0x19a>
 800b708:	f04f 0b01 	mov.w	fp, #1
 800b70c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b710:	f7fe ffe6 	bl	800a6e0 <HAL_GetTick>
 800b714:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b716:	9000      	str	r0, [sp, #0]
 800b718:	2319      	movs	r3, #25
 800b71a:	465a      	mov	r2, fp
 800b71c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b720:	4620      	mov	r0, r4
 800b722:	f7ff fe90 	bl	800b446 <I2C_WaitOnFlagUntilTimeout>
 800b726:	b130      	cbz	r0, 800b736 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800b728:	2001      	movs	r0, #1
 800b72a:	e09c      	b.n	800b866 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b72c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b730:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800b732:	2001      	movs	r0, #1
 800b734:	e097      	b.n	800b866 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b736:	2321      	movs	r3, #33	; 0x21
 800b738:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b73c:	2340      	movs	r3, #64	; 0x40
 800b73e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b742:	2300      	movs	r3, #0
 800b744:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800b746:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b748:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800b74a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b74e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b750:	9601      	str	r6, [sp, #4]
 800b752:	9700      	str	r7, [sp, #0]
 800b754:	464b      	mov	r3, r9
 800b756:	4642      	mov	r2, r8
 800b758:	4629      	mov	r1, r5
 800b75a:	4620      	mov	r0, r4
 800b75c:	f7ff fea0 	bl	800b4a0 <I2C_RequestMemoryWrite>
 800b760:	b970      	cbnz	r0, 800b780 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b762:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b764:	b29b      	uxth	r3, r3
 800b766:	2bff      	cmp	r3, #255	; 0xff
 800b768:	d90f      	bls.n	800b78a <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b76a:	22ff      	movs	r2, #255	; 0xff
 800b76c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b76e:	2300      	movs	r3, #0
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b776:	4629      	mov	r1, r5
 800b778:	4620      	mov	r0, r4
 800b77a:	f7ff fd83 	bl	800b284 <I2C_TransferConfig>
 800b77e:	e021      	b.n	800b7c4 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 800b780:	2300      	movs	r3, #0
 800b782:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800b786:	4658      	mov	r0, fp
 800b788:	e06d      	b.n	800b866 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800b78a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b78c:	b292      	uxth	r2, r2
 800b78e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b790:	2300      	movs	r3, #0
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b798:	b2d2      	uxtb	r2, r2
 800b79a:	4629      	mov	r1, r5
 800b79c:	4620      	mov	r0, r4
 800b79e:	f7ff fd71 	bl	800b284 <I2C_TransferConfig>
 800b7a2:	e00f      	b.n	800b7c4 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800b7a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b7a6:	b292      	uxth	r2, r2
 800b7a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b7b2:	b2d2      	uxtb	r2, r2
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7ff fd64 	bl	800b284 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b7bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d033      	beq.n	800b82c <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7c4:	4632      	mov	r2, r6
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f7ff fe11 	bl	800b3f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d14e      	bne.n	800b870 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b7d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	7812      	ldrb	r2, [r2, #0]
 800b7d8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b7da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7dc:	3301      	adds	r3, #1
 800b7de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b7e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b7ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b7f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b7f4:	b292      	uxth	r2, r2
 800b7f6:	2a00      	cmp	r2, #0
 800b7f8:	d0e0      	beq.n	800b7bc <HAL_I2C_Mem_Write+0xea>
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1de      	bne.n	800b7bc <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b7fe:	9600      	str	r6, [sp, #0]
 800b800:	463b      	mov	r3, r7
 800b802:	2200      	movs	r2, #0
 800b804:	2180      	movs	r1, #128	; 0x80
 800b806:	4620      	mov	r0, r4
 800b808:	f7ff fe1d 	bl	800b446 <I2C_WaitOnFlagUntilTimeout>
 800b80c:	bb90      	cbnz	r0, 800b874 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b80e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b810:	b29b      	uxth	r3, r3
 800b812:	2bff      	cmp	r3, #255	; 0xff
 800b814:	d9c6      	bls.n	800b7a4 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b816:	22ff      	movs	r2, #255	; 0xff
 800b818:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b81a:	2300      	movs	r3, #0
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b822:	4629      	mov	r1, r5
 800b824:	4620      	mov	r0, r4
 800b826:	f7ff fd2d 	bl	800b284 <I2C_TransferConfig>
 800b82a:	e7c7      	b.n	800b7bc <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b82c:	4632      	mov	r2, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	4620      	mov	r0, r4
 800b832:	f7ff feaf 	bl	800b594 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b836:	b9f8      	cbnz	r0, 800b878 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	2220      	movs	r2, #32
 800b83c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b83e:	6821      	ldr	r1, [r4, #0]
 800b840:	684b      	ldr	r3, [r1, #4]
 800b842:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800b846:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b84a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b84e:	f023 0301 	bic.w	r3, r3, #1
 800b852:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b854:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b858:	2300      	movs	r3, #0
 800b85a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b85e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800b862:	e000      	b.n	800b866 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800b864:	2002      	movs	r0, #2
}
 800b866:	b003      	add	sp, #12
 800b868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b86c:	2002      	movs	r0, #2
 800b86e:	e7fa      	b.n	800b866 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 800b870:	2001      	movs	r0, #1
 800b872:	e7f8      	b.n	800b866 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800b874:	2001      	movs	r0, #1
 800b876:	e7f6      	b.n	800b866 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800b878:	2001      	movs	r0, #1
 800b87a:	e7f4      	b.n	800b866 <HAL_I2C_Mem_Write+0x194>

0800b87c <HAL_I2C_Mem_Read>:
{
 800b87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	b083      	sub	sp, #12
 800b882:	460d      	mov	r5, r1
 800b884:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b888:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b88a:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800b88e:	b2c9      	uxtb	r1, r1
 800b890:	2920      	cmp	r1, #32
 800b892:	f040 80bd 	bne.w	800ba10 <HAL_I2C_Mem_Read+0x194>
 800b896:	4604      	mov	r4, r0
 800b898:	4690      	mov	r8, r2
 800b89a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800b89c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b89e:	f1ba 0f00 	cmp.w	sl, #0
 800b8a2:	bf18      	it	ne
 800b8a4:	2b00      	cmpne	r3, #0
 800b8a6:	d016      	beq.n	800b8d6 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 800b8a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	f000 80b3 	beq.w	800ba18 <HAL_I2C_Mem_Read+0x19c>
 800b8b2:	f04f 0b01 	mov.w	fp, #1
 800b8b6:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b8ba:	f7fe ff11 	bl	800a6e0 <HAL_GetTick>
 800b8be:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b8c0:	9000      	str	r0, [sp, #0]
 800b8c2:	2319      	movs	r3, #25
 800b8c4:	465a      	mov	r2, fp
 800b8c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f7ff fdbb 	bl	800b446 <I2C_WaitOnFlagUntilTimeout>
 800b8d0:	b130      	cbz	r0, 800b8e0 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 800b8d2:	2001      	movs	r0, #1
 800b8d4:	e09d      	b.n	800ba12 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b8d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8da:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800b8dc:	2001      	movs	r0, #1
 800b8de:	e098      	b.n	800ba12 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b8e0:	2322      	movs	r3, #34	; 0x22
 800b8e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b8e6:	2340      	movs	r3, #64	; 0x40
 800b8e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800b8f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8f2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800b8f4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b8f8:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b8fa:	9601      	str	r6, [sp, #4]
 800b8fc:	9700      	str	r7, [sp, #0]
 800b8fe:	464b      	mov	r3, r9
 800b900:	4642      	mov	r2, r8
 800b902:	4629      	mov	r1, r5
 800b904:	4620      	mov	r0, r4
 800b906:	f7ff fe09 	bl	800b51c <I2C_RequestMemoryRead>
 800b90a:	b970      	cbnz	r0, 800b92a <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b90c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b90e:	b29b      	uxth	r3, r3
 800b910:	2bff      	cmp	r3, #255	; 0xff
 800b912:	d90f      	bls.n	800b934 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b914:	22ff      	movs	r2, #255	; 0xff
 800b916:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b918:	4b43      	ldr	r3, [pc, #268]	; (800ba28 <HAL_I2C_Mem_Read+0x1ac>)
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b920:	4629      	mov	r1, r5
 800b922:	4620      	mov	r0, r4
 800b924:	f7ff fcae 	bl	800b284 <I2C_TransferConfig>
 800b928:	e021      	b.n	800b96e <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 800b92a:	2300      	movs	r3, #0
 800b92c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800b930:	4658      	mov	r0, fp
 800b932:	e06e      	b.n	800ba12 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800b934:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b936:	b292      	uxth	r2, r2
 800b938:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b93a:	4b3b      	ldr	r3, [pc, #236]	; (800ba28 <HAL_I2C_Mem_Read+0x1ac>)
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b942:	b2d2      	uxtb	r2, r2
 800b944:	4629      	mov	r1, r5
 800b946:	4620      	mov	r0, r4
 800b948:	f7ff fc9c 	bl	800b284 <I2C_TransferConfig>
 800b94c:	e00f      	b.n	800b96e <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800b94e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b950:	b292      	uxth	r2, r2
 800b952:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b954:	2300      	movs	r3, #0
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b95c:	b2d2      	uxtb	r2, r2
 800b95e:	4629      	mov	r1, r5
 800b960:	4620      	mov	r0, r4
 800b962:	f7ff fc8f 	bl	800b284 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b966:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b968:	b29b      	uxth	r3, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d034      	beq.n	800b9d8 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b96e:	9600      	str	r6, [sp, #0]
 800b970:	463b      	mov	r3, r7
 800b972:	2200      	movs	r2, #0
 800b974:	2104      	movs	r1, #4
 800b976:	4620      	mov	r0, r4
 800b978:	f7ff fd65 	bl	800b446 <I2C_WaitOnFlagUntilTimeout>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d14d      	bne.n	800ba1c <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b986:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800b988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b98a:	3301      	adds	r3, #1
 800b98c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b98e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b990:	3a01      	subs	r2, #1
 800b992:	b292      	uxth	r2, r2
 800b994:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b996:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b998:	b29b      	uxth	r3, r3
 800b99a:	3b01      	subs	r3, #1
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b9a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d0de      	beq.n	800b966 <HAL_I2C_Mem_Read+0xea>
 800b9a8:	2a00      	cmp	r2, #0
 800b9aa:	d1dc      	bne.n	800b966 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b9ac:	9600      	str	r6, [sp, #0]
 800b9ae:	463b      	mov	r3, r7
 800b9b0:	2180      	movs	r1, #128	; 0x80
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f7ff fd47 	bl	800b446 <I2C_WaitOnFlagUntilTimeout>
 800b9b8:	bb90      	cbnz	r0, 800ba20 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	2bff      	cmp	r3, #255	; 0xff
 800b9c0:	d9c5      	bls.n	800b94e <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9c2:	22ff      	movs	r2, #255	; 0xff
 800b9c4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f7ff fc57 	bl	800b284 <I2C_TransferConfig>
 800b9d6:	e7c6      	b.n	800b966 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9d8:	4632      	mov	r2, r6
 800b9da:	4639      	mov	r1, r7
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f7ff fdd9 	bl	800b594 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b9e2:	b9f8      	cbnz	r0, 800ba24 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	2220      	movs	r2, #32
 800b9e8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b9ea:	6821      	ldr	r1, [r4, #0]
 800b9ec:	684b      	ldr	r3, [r1, #4]
 800b9ee:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800b9f2:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b9f6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b9fa:	f023 0301 	bic.w	r3, r3, #1
 800b9fe:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ba00:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800ba0a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800ba0e:	e000      	b.n	800ba12 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 800ba10:	2002      	movs	r0, #2
}
 800ba12:	b003      	add	sp, #12
 800ba14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800ba18:	2002      	movs	r0, #2
 800ba1a:	e7fa      	b.n	800ba12 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 800ba1c:	2001      	movs	r0, #1
 800ba1e:	e7f8      	b.n	800ba12 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 800ba20:	2001      	movs	r0, #1
 800ba22:	e7f6      	b.n	800ba12 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 800ba24:	2001      	movs	r0, #1
 800ba26:	e7f4      	b.n	800ba12 <HAL_I2C_Mem_Read+0x196>
 800ba28:	80002400 	.word	0x80002400

0800ba2c <HAL_I2C_GetState>:
  return hi2c->State;
 800ba2c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800ba30:	4770      	bx	lr

0800ba32 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800ba32:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800ba34:	4770      	bx	lr

0800ba36 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b20      	cmp	r3, #32
 800ba3e:	d124      	bne.n	800ba8a <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba40:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d022      	beq.n	800ba8e <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba4e:	2324      	movs	r3, #36	; 0x24
 800ba50:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba54:	6802      	ldr	r2, [r0, #0]
 800ba56:	6813      	ldr	r3, [r2, #0]
 800ba58:	f023 0301 	bic.w	r3, r3, #1
 800ba5c:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ba5e:	6802      	ldr	r2, [r0, #0]
 800ba60:	6813      	ldr	r3, [r2, #0]
 800ba62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba66:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ba68:	6802      	ldr	r2, [r0, #0]
 800ba6a:	6813      	ldr	r3, [r2, #0]
 800ba6c:	4319      	orrs	r1, r3
 800ba6e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba70:	6802      	ldr	r2, [r0, #0]
 800ba72:	6813      	ldr	r3, [r2, #0]
 800ba74:	f043 0301 	orr.w	r3, r3, #1
 800ba78:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba7a:	2320      	movs	r3, #32
 800ba7c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba80:	2300      	movs	r3, #0
 800ba82:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800ba86:	4618      	mov	r0, r3
 800ba88:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800ba8a:	2002      	movs	r0, #2
 800ba8c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800ba8e:	2002      	movs	r0, #2
  }
}
 800ba90:	4770      	bx	lr

0800ba92 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba92:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b20      	cmp	r3, #32
 800ba9a:	d122      	bne.n	800bae2 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba9c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d020      	beq.n	800bae6 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800baa4:	2301      	movs	r3, #1
 800baa6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800baaa:	2324      	movs	r3, #36	; 0x24
 800baac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bab0:	6802      	ldr	r2, [r0, #0]
 800bab2:	6813      	ldr	r3, [r2, #0]
 800bab4:	f023 0301 	bic.w	r3, r3, #1
 800bab8:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800baba:	6802      	ldr	r2, [r0, #0]
 800babc:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800babe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bac2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bac6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bac8:	6802      	ldr	r2, [r0, #0]
 800baca:	6813      	ldr	r3, [r2, #0]
 800bacc:	f043 0301 	orr.w	r3, r3, #1
 800bad0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bad2:	2320      	movs	r3, #32
 800bad4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bad8:	2300      	movs	r3, #0
 800bada:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800bade:	4618      	mov	r0, r3
 800bae0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800bae2:	2002      	movs	r0, #2
 800bae4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800bae6:	2002      	movs	r0, #2
  }
}
 800bae8:	4770      	bx	lr
	...

0800baec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800baec:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800baee:	684d      	ldr	r5, [r1, #4]
 800baf0:	6804      	ldr	r4, [r0, #0]
 800baf2:	68e3      	ldr	r3, [r4, #12]
 800baf4:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800baf8:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800bafa:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 800bafe:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800bb02:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800bb06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bb0a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bb0e:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bb10:	6804      	ldr	r4, [r0, #0]
 800bb12:	68e6      	ldr	r6, [r4, #12]
 800bb14:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bb18:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bb1a:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bb1c:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bb20:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800bb24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800bb28:	68cd      	ldr	r5, [r1, #12]
 800bb2a:	6804      	ldr	r4, [r0, #0]
 800bb2c:	68e3      	ldr	r3, [r4, #12]
 800bb2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb32:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800bb34:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 800bb38:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 800bb3c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800bb40:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800bb44:	688b      	ldr	r3, [r1, #8]
 800bb46:	6804      	ldr	r4, [r0, #0]
 800bb48:	68e6      	ldr	r6, [r4, #12]
 800bb4a:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800bb4e:	4473      	add	r3, lr
 800bb50:	3301      	adds	r3, #1
 800bb52:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800bb56:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800bb5a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800bb5e:	6803      	ldr	r3, [r0, #0]
 800bb60:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bb64:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800bb68:	f024 0407 	bic.w	r4, r4, #7
 800bb6c:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800bb70:	6803      	ldr	r3, [r0, #0]
 800bb72:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bb76:	690c      	ldr	r4, [r1, #16]
 800bb78:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800bb7c:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800bb80:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800bb84:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800bb86:	6804      	ldr	r4, [r0, #0]
 800bb88:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800bb8c:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 800bb90:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800bb94:	2400      	movs	r4, #0
 800bb96:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800bb9a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800bb9e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800bba2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800bba6:	6806      	ldr	r6, [r0, #0]
 800bba8:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 800bbac:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800bbb0:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 800bbb4:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800bbb8:	6803      	ldr	r3, [r0, #0]
 800bbba:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bbbe:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 800bbc2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800bbc6:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800bbca:	6803      	ldr	r3, [r0, #0]
 800bbcc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bbd0:	694d      	ldr	r5, [r1, #20]
 800bbd2:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800bbd6:	6803      	ldr	r3, [r0, #0]
 800bbd8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bbdc:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800bbe0:	4d2e      	ldr	r5, [pc, #184]	; (800bc9c <LTDC_SetConfig+0x1b0>)
 800bbe2:	4035      	ands	r5, r6
 800bbe4:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800bbe8:	6a0d      	ldr	r5, [r1, #32]
 800bbea:	6803      	ldr	r3, [r0, #0]
 800bbec:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bbf0:	69ce      	ldr	r6, [r1, #28]
 800bbf2:	4335      	orrs	r5, r6
 800bbf4:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800bbf8:	6803      	ldr	r3, [r0, #0]
 800bbfa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bbfe:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800bc02:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800bc06:	6803      	ldr	r3, [r0, #0]
 800bc08:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 800bc0c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bc0e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800bc12:	690b      	ldr	r3, [r1, #16]
 800bc14:	b16b      	cbz	r3, 800bc32 <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d039      	beq.n	800bc8e <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	bf18      	it	ne
 800bc1e:	2b04      	cmpne	r3, #4
 800bc20:	d037      	beq.n	800bc92 <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bc22:	2b03      	cmp	r3, #3
 800bc24:	d037      	beq.n	800bc96 <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bc26:	2b07      	cmp	r3, #7
 800bc28:	d001      	beq.n	800bc2e <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800bc2a:	2501      	movs	r5, #1
 800bc2c:	e002      	b.n	800bc34 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800bc2e:	2502      	movs	r5, #2
 800bc30:	e000      	b.n	800bc34 <LTDC_SetConfig+0x148>
    tmp = 4U;
 800bc32:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800bc34:	6802      	ldr	r2, [r0, #0]
 800bc36:	4462      	add	r2, ip
 800bc38:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800bc3c:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 800bc40:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800bc44:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800bc46:	fb05 f402 	mul.w	r4, r5, r2
 800bc4a:	684b      	ldr	r3, [r1, #4]
 800bc4c:	680a      	ldr	r2, [r1, #0]
 800bc4e:	1a9b      	subs	r3, r3, r2
 800bc50:	fb05 f303 	mul.w	r3, r5, r3
 800bc54:	3307      	adds	r3, #7
 800bc56:	6802      	ldr	r2, [r0, #0]
 800bc58:	4462      	add	r2, ip
 800bc5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bc5e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800bc62:	6803      	ldr	r3, [r0, #0]
 800bc64:	4463      	add	r3, ip
 800bc66:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800bc6a:	4a0d      	ldr	r2, [pc, #52]	; (800bca0 <LTDC_SetConfig+0x1b4>)
 800bc6c:	4022      	ands	r2, r4
 800bc6e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800bc72:	6803      	ldr	r3, [r0, #0]
 800bc74:	4463      	add	r3, ip
 800bc76:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800bc78:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800bc7c:	6803      	ldr	r3, [r0, #0]
 800bc7e:	449c      	add	ip, r3
 800bc80:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 800bc84:	f043 0301 	orr.w	r3, r3, #1
 800bc88:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 800bc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800bc8e:	2503      	movs	r5, #3
 800bc90:	e7d0      	b.n	800bc34 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800bc92:	2502      	movs	r5, #2
 800bc94:	e7ce      	b.n	800bc34 <LTDC_SetConfig+0x148>
 800bc96:	2502      	movs	r5, #2
 800bc98:	e7cc      	b.n	800bc34 <LTDC_SetConfig+0x148>
 800bc9a:	bf00      	nop
 800bc9c:	fffff8f8 	.word	0xfffff8f8
 800bca0:	fffff800 	.word	0xfffff800

0800bca4 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d072      	beq.n	800bd8e <HAL_LTDC_Init+0xea>
{
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800bcac:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d067      	beq.n	800bd84 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800bcba:	6822      	ldr	r2, [r4, #0]
 800bcbc:	6993      	ldr	r3, [r2, #24]
 800bcbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bcc2:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bcc4:	6821      	ldr	r1, [r4, #0]
 800bcc6:	698a      	ldr	r2, [r1, #24]
 800bcc8:	6863      	ldr	r3, [r4, #4]
 800bcca:	68a0      	ldr	r0, [r4, #8]
 800bccc:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bcce:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bcd0:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bcd2:	6920      	ldr	r0, [r4, #16]
 800bcd4:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800bcda:	6821      	ldr	r1, [r4, #0]
 800bcdc:	688a      	ldr	r2, [r1, #8]
 800bcde:	4b2d      	ldr	r3, [pc, #180]	; (800bd94 <HAL_LTDC_Init+0xf0>)
 800bce0:	401a      	ands	r2, r3
 800bce2:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800bce4:	6820      	ldr	r0, [r4, #0]
 800bce6:	6882      	ldr	r2, [r0, #8]
 800bce8:	69a1      	ldr	r1, [r4, #24]
 800bcea:	6965      	ldr	r5, [r4, #20]
 800bcec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800bcf0:	430a      	orrs	r2, r1
 800bcf2:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800bcf4:	6821      	ldr	r1, [r4, #0]
 800bcf6:	68ca      	ldr	r2, [r1, #12]
 800bcf8:	401a      	ands	r2, r3
 800bcfa:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800bcfc:	6820      	ldr	r0, [r4, #0]
 800bcfe:	68c2      	ldr	r2, [r0, #12]
 800bd00:	6a21      	ldr	r1, [r4, #32]
 800bd02:	69e5      	ldr	r5, [r4, #28]
 800bd04:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800bd0c:	6821      	ldr	r1, [r4, #0]
 800bd0e:	690a      	ldr	r2, [r1, #16]
 800bd10:	401a      	ands	r2, r3
 800bd12:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800bd14:	6820      	ldr	r0, [r4, #0]
 800bd16:	6902      	ldr	r2, [r0, #16]
 800bd18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bd1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bd1c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800bd20:	430a      	orrs	r2, r1
 800bd22:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800bd24:	6821      	ldr	r1, [r4, #0]
 800bd26:	694a      	ldr	r2, [r1, #20]
 800bd28:	4013      	ands	r3, r2
 800bd2a:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800bd2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800bd2e:	6821      	ldr	r1, [r4, #0]
 800bd30:	694b      	ldr	r3, [r1, #20]
 800bd32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bd34:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800bd3c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800bd40:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800bd44:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800bd46:	6821      	ldr	r1, [r4, #0]
 800bd48:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800bd4a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800bd4e:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800bd50:	6821      	ldr	r1, [r4, #0]
 800bd52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800bd54:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800bd58:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800bd5c:	4303      	orrs	r3, r0
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800bd62:	6822      	ldr	r2, [r4, #0]
 800bd64:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800bd66:	f043 0306 	orr.w	r3, r3, #6
 800bd6a:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800bd6c:	6822      	ldr	r2, [r4, #0]
 800bd6e:	6993      	ldr	r3, [r2, #24]
 800bd70:	f043 0301 	orr.w	r3, r3, #1
 800bd74:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800bd76:	2000      	movs	r0, #0
 800bd78:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800bd82:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800bd84:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800bd88:	f7f7 f8da 	bl	8002f40 <HAL_LTDC_MspInit>
 800bd8c:	e792      	b.n	800bcb4 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800bd8e:	2001      	movs	r0, #1
}
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	f000f800 	.word	0xf000f800

0800bd98 <HAL_LTDC_ErrorCallback>:
}
 800bd98:	4770      	bx	lr

0800bd9a <HAL_LTDC_ReloadEventCallback>:
}
 800bd9a:	4770      	bx	lr

0800bd9c <HAL_LTDC_IRQHandler>:
{
 800bd9c:	b570      	push	{r4, r5, r6, lr}
 800bd9e:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800bda0:	6803      	ldr	r3, [r0, #0]
 800bda2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800bda4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800bda6:	f015 0f04 	tst.w	r5, #4
 800bdaa:	d002      	beq.n	800bdb2 <HAL_LTDC_IRQHandler+0x16>
 800bdac:	f016 0f04 	tst.w	r6, #4
 800bdb0:	d112      	bne.n	800bdd8 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800bdb2:	f015 0f02 	tst.w	r5, #2
 800bdb6:	d002      	beq.n	800bdbe <HAL_LTDC_IRQHandler+0x22>
 800bdb8:	f016 0f02 	tst.w	r6, #2
 800bdbc:	d121      	bne.n	800be02 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800bdbe:	f015 0f01 	tst.w	r5, #1
 800bdc2:	d002      	beq.n	800bdca <HAL_LTDC_IRQHandler+0x2e>
 800bdc4:	f016 0f01 	tst.w	r6, #1
 800bdc8:	d132      	bne.n	800be30 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800bdca:	f015 0f08 	tst.w	r5, #8
 800bdce:	d002      	beq.n	800bdd6 <HAL_LTDC_IRQHandler+0x3a>
 800bdd0:	f016 0f08 	tst.w	r6, #8
 800bdd4:	d13d      	bne.n	800be52 <HAL_LTDC_IRQHandler+0xb6>
}
 800bdd6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800bdd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdda:	f022 0204 	bic.w	r2, r2, #4
 800bdde:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800bde0:	6803      	ldr	r3, [r0, #0]
 800bde2:	2204      	movs	r2, #4
 800bde4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800bde6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800bdea:	f043 0301 	orr.w	r3, r3, #1
 800bdee:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800bdf2:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800bdfc:	f7ff ffcc 	bl	800bd98 <HAL_LTDC_ErrorCallback>
 800be00:	e7d7      	b.n	800bdb2 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800be02:	6822      	ldr	r2, [r4, #0]
 800be04:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800be06:	f023 0302 	bic.w	r3, r3, #2
 800be0a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	2202      	movs	r2, #2
 800be10:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800be12:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800be16:	4313      	orrs	r3, r2
 800be18:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800be1c:	2304      	movs	r3, #4
 800be1e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800be22:	2300      	movs	r3, #0
 800be24:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800be28:	4620      	mov	r0, r4
 800be2a:	f7ff ffb5 	bl	800bd98 <HAL_LTDC_ErrorCallback>
 800be2e:	e7c6      	b.n	800bdbe <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800be30:	6822      	ldr	r2, [r4, #0]
 800be32:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800be34:	f023 0301 	bic.w	r3, r3, #1
 800be38:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800be3a:	6822      	ldr	r2, [r4, #0]
 800be3c:	2301      	movs	r3, #1
 800be3e:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800be40:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800be44:	2300      	movs	r3, #0
 800be46:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800be4a:	4620      	mov	r0, r4
 800be4c:	f7f6 f916 	bl	800207c <HAL_LTDC_LineEventCallback>
 800be50:	e7bb      	b.n	800bdca <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800be52:	6822      	ldr	r2, [r4, #0]
 800be54:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800be56:	f023 0308 	bic.w	r3, r3, #8
 800be5a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	2208      	movs	r2, #8
 800be60:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800be62:	2301      	movs	r3, #1
 800be64:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800be68:	2300      	movs	r3, #0
 800be6a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800be6e:	4620      	mov	r0, r4
 800be70:	f7ff ff93 	bl	800bd9a <HAL_LTDC_ReloadEventCallback>
}
 800be74:	e7af      	b.n	800bdd6 <HAL_LTDC_IRQHandler+0x3a>

0800be76 <HAL_LTDC_ConfigLayer>:
{
 800be76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800be78:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d02c      	beq.n	800beda <HAL_LTDC_ConfigLayer+0x64>
 800be80:	4604      	mov	r4, r0
 800be82:	460d      	mov	r5, r1
 800be84:	4616      	mov	r6, r2
 800be86:	2701      	movs	r7, #1
 800be88:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800be8c:	2302      	movs	r3, #2
 800be8e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800be92:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800be96:	fb0c 0c02 	mla	ip, ip, r2, r0
 800be9a:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800be9e:	468e      	mov	lr, r1
 800bea0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bea4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bea8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800beac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800beb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800beb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800beb8:	f8de 3000 	ldr.w	r3, [lr]
 800bebc:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800bec0:	4632      	mov	r2, r6
 800bec2:	4629      	mov	r1, r5
 800bec4:	4620      	mov	r0, r4
 800bec6:	f7ff fe11 	bl	800baec <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800bece:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800bed2:	2000      	movs	r0, #0
 800bed4:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800bed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800beda:	2002      	movs	r0, #2
 800bedc:	e7fc      	b.n	800bed8 <HAL_LTDC_ConfigLayer+0x62>
	...

0800bee0 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800bee0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d01a      	beq.n	800bf1e <HAL_LTDC_ProgramLineEvent+0x3e>
{
 800bee8:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 800beea:	2201      	movs	r2, #1
 800beec:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bef0:	2302      	movs	r3, #2
 800bef2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800bef6:	6804      	ldr	r4, [r0, #0]
 800bef8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800befa:	f023 0301 	bic.w	r3, r3, #1
 800befe:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800bf00:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <HAL_LTDC_ProgramLineEvent+0x44>)
 800bf02:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800bf04:	6801      	ldr	r1, [r0, #0]
 800bf06:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800bf0c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800bf10:	2300      	movs	r3, #0
 800bf12:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800bf16:	4618      	mov	r0, r3
}
 800bf18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf1c:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800bf1e:	2002      	movs	r0, #2
}
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	50001000 	.word	0x50001000

0800bf28 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800bf28:	b538      	push	{r3, r4, r5, lr}
 800bf2a:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 800bf2c:	f7fe fbd8 	bl	800a6e0 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bf30:	2c00      	cmp	r4, #0
 800bf32:	d035      	beq.n	800bfa0 <HAL_MDMA_Abort+0x78>
 800bf34:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800bf36:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d006      	beq.n	800bf4e <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800bf40:	2380      	movs	r3, #128	; 0x80
 800bf42:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800bf44:	2300      	movs	r3, #0
 800bf46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 800bf4a:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 800bf4c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800bf4e:	6822      	ldr	r2, [r4, #0]
 800bf50:	68d3      	ldr	r3, [r2, #12]
 800bf52:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800bf56:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 800bf58:	6822      	ldr	r2, [r4, #0]
 800bf5a:	68d3      	ldr	r3, [r2, #12]
 800bf5c:	f023 0301 	bic.w	r3, r3, #1
 800bf60:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bf62:	6823      	ldr	r3, [r4, #0]
 800bf64:	68da      	ldr	r2, [r3, #12]
 800bf66:	f012 0f01 	tst.w	r2, #1
 800bf6a:	d010      	beq.n	800bf8e <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800bf6c:	f7fe fbb8 	bl	800a6e0 <HAL_GetTick>
 800bf70:	1b43      	subs	r3, r0, r5
 800bf72:	2b05      	cmp	r3, #5
 800bf74:	d9f5      	bls.n	800bf62 <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800bf76:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bf78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf7c:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 800bf7e:	2300      	movs	r3, #0
 800bf80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800bf84:	2303      	movs	r3, #3
 800bf86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800bf8a:	2001      	movs	r0, #1
 800bf8c:	e7de      	b.n	800bf4c <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800bf8e:	221f      	movs	r2, #31
 800bf90:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 800bf92:	2000      	movs	r0, #0
 800bf94:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800bf9e:	e7d5      	b.n	800bf4c <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 800bfa0:	2001      	movs	r0, #1
 800bfa2:	e7d3      	b.n	800bf4c <HAL_MDMA_Abort+0x24>

0800bfa4 <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bfa4:	b190      	cbz	r0, 800bfcc <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800bfa6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d003      	beq.n	800bfb8 <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800bfb0:	2380      	movs	r3, #128	; 0x80
 800bfb2:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 800bfb4:	2001      	movs	r0, #1
 800bfb6:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800bfb8:	2304      	movs	r3, #4
 800bfba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800bfbe:	6802      	ldr	r2, [r0, #0]
 800bfc0:	68d3      	ldr	r3, [r2, #12]
 800bfc2:	f023 0301 	bic.w	r3, r3, #1
 800bfc6:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800bfc8:	2000      	movs	r0, #0
 800bfca:	4770      	bx	lr
    return HAL_ERROR;
 800bfcc:	2001      	movs	r0, #1
}
 800bfce:	4770      	bx	lr

0800bfd0 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800bfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800bfd2:	6802      	ldr	r2, [r0, #0]
 800bfd4:	6813      	ldr	r3, [r2, #0]
 800bfd6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800bfda:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800bfdc:	6883      	ldr	r3, [r0, #8]
 800bfde:	b933      	cbnz	r3, 800bfee <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800bfe0:	6802      	ldr	r2, [r0, #0]
 800bfe2:	6813      	ldr	r3, [r2, #0]
 800bfe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfe8:	684c      	ldr	r4, [r1, #4]
 800bfea:	4323      	orrs	r3, r4
 800bfec:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800bfee:	680b      	ldr	r3, [r1, #0]
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	d04d      	beq.n	800c090 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800bff4:	2b03      	cmp	r3, #3
 800bff6:	d055      	beq.n	800c0a4 <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800bff8:	6803      	ldr	r3, [r0, #0]
 800bffa:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 800bffe:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 800c002:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800c006:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800c00a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800c00c:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 800c00e:	432c      	orrs	r4, r5
 800c010:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800c012:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800c014:	b15c      	cbz	r4, 800c02e <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800c016:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800c018:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800c01a:	6813      	ldr	r3, [r2, #0]
 800c01c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800c020:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800c022:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800c024:	432c      	orrs	r4, r5
 800c026:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800c028:	432c      	orrs	r4, r5
 800c02a:	4323      	orrs	r3, r4
 800c02c:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800c02e:	f8de 3000 	ldr.w	r3, [lr]
 800c032:	f023 031f 	bic.w	r3, r3, #31
 800c036:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800c038:	4323      	orrs	r3, r4
 800c03a:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c03e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800c040:	b12b      	cbz	r3, 800c04e <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800c042:	680b      	ldr	r3, [r1, #0]
 800c044:	b91b      	cbnz	r3, 800c04e <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800c046:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c048:	6804      	ldr	r4, [r0, #0]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800c04e:	68cb      	ldr	r3, [r1, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d073      	beq.n	800c13c <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800c054:	69cc      	ldr	r4, [r1, #28]
 800c056:	2c00      	cmp	r4, #0
 800c058:	d048      	beq.n	800c0ec <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c05a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800c05c:	b365      	cbz	r5, 800c0b8 <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800c05e:	6817      	ldr	r7, [r2, #0]
 800c060:	4e48      	ldr	r6, [pc, #288]	; (800c184 <OSPI_ConfigCmd+0x1b4>)
 800c062:	403e      	ands	r6, r7
 800c064:	694f      	ldr	r7, [r1, #20]
 800c066:	433b      	orrs	r3, r7
 800c068:	690f      	ldr	r7, [r1, #16]
 800c06a:	433b      	orrs	r3, r7
 800c06c:	431c      	orrs	r4, r3
 800c06e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800c070:	431c      	orrs	r4, r3
 800c072:	6a0b      	ldr	r3, [r1, #32]
 800c074:	431c      	orrs	r4, r3
 800c076:	432c      	orrs	r4, r5
 800c078:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800c07a:	432c      	orrs	r4, r5
 800c07c:	4334      	orrs	r4, r6
 800c07e:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800c080:	688b      	ldr	r3, [r1, #8]
 800c082:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800c086:	6803      	ldr	r3, [r0, #0]
 800c088:	698a      	ldr	r2, [r1, #24]
 800c08a:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800c08c:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800c08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 800c090:	6803      	ldr	r3, [r0, #0]
 800c092:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 800c096:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800c09a:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 800c09e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800c0a2:	e7b2      	b.n	800c00a <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 800c0a4:	6803      	ldr	r3, [r0, #0]
 800c0a6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800c0aa:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800c0ae:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 800c0b2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c0b6:	e7a8      	b.n	800c00a <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800c0b8:	6816      	ldr	r6, [r2, #0]
 800c0ba:	4d33      	ldr	r5, [pc, #204]	; (800c188 <OSPI_ConfigCmd+0x1b8>)
 800c0bc:	4035      	ands	r5, r6
 800c0be:	694e      	ldr	r6, [r1, #20]
 800c0c0:	4333      	orrs	r3, r6
 800c0c2:	690e      	ldr	r6, [r1, #16]
 800c0c4:	4333      	orrs	r3, r6
 800c0c6:	431c      	orrs	r4, r3
 800c0c8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800c0ca:	431c      	orrs	r4, r3
 800c0cc:	6a0b      	ldr	r3, [r1, #32]
 800c0ce:	431c      	orrs	r4, r3
 800c0d0:	432c      	orrs	r4, r5
 800c0d2:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c0d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c0d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0da:	d1d1      	bne.n	800c080 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800c0dc:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c0de:	2b08      	cmp	r3, #8
 800c0e0:	d1ce      	bne.n	800c080 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800c0e2:	6813      	ldr	r3, [r2, #0]
 800c0e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c0e8:	6013      	str	r3, [r2, #0]
 800c0ea:	e7c9      	b.n	800c080 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c0ec:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800c0ee:	b184      	cbz	r4, 800c112 <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800c0f0:	6815      	ldr	r5, [r2, #0]
 800c0f2:	4826      	ldr	r0, [pc, #152]	; (800c18c <OSPI_ConfigCmd+0x1bc>)
 800c0f4:	4028      	ands	r0, r5
 800c0f6:	694d      	ldr	r5, [r1, #20]
 800c0f8:	432b      	orrs	r3, r5
 800c0fa:	690d      	ldr	r5, [r1, #16]
 800c0fc:	432b      	orrs	r3, r5
 800c0fe:	431c      	orrs	r4, r3
 800c100:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c102:	431c      	orrs	r4, r3
 800c104:	4304      	orrs	r4, r0
 800c106:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 800c108:	688b      	ldr	r3, [r1, #8]
 800c10a:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 800c10e:	2000      	movs	r0, #0
 800c110:	e7bd      	b.n	800c08e <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800c112:	6814      	ldr	r4, [r2, #0]
 800c114:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800c118:	694d      	ldr	r5, [r1, #20]
 800c11a:	432b      	orrs	r3, r5
 800c11c:	690d      	ldr	r5, [r1, #16]
 800c11e:	432b      	orrs	r3, r5
 800c120:	4323      	orrs	r3, r4
 800c122:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c124:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c12a:	d1ed      	bne.n	800c108 <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800c12c:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c12e:	2b08      	cmp	r3, #8
 800c130:	d1ea      	bne.n	800c108 <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800c132:	6813      	ldr	r3, [r2, #0]
 800c134:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c138:	6013      	str	r3, [r2, #0]
 800c13a:	e7e5      	b.n	800c108 <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800c13c:	69cb      	ldr	r3, [r1, #28]
 800c13e:	b1e3      	cbz	r3, 800c17a <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c140:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800c142:	b184      	cbz	r4, 800c166 <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800c144:	6816      	ldr	r6, [r2, #0]
 800c146:	4d12      	ldr	r5, [pc, #72]	; (800c190 <OSPI_ConfigCmd+0x1c0>)
 800c148:	4035      	ands	r5, r6
 800c14a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800c14c:	4333      	orrs	r3, r6
 800c14e:	6a0e      	ldr	r6, [r1, #32]
 800c150:	4333      	orrs	r3, r6
 800c152:	4323      	orrs	r3, r4
 800c154:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800c156:	4323      	orrs	r3, r4
 800c158:	432b      	orrs	r3, r5
 800c15a:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 800c15c:	6803      	ldr	r3, [r0, #0]
 800c15e:	698a      	ldr	r2, [r1, #24]
 800c160:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800c162:	2000      	movs	r0, #0
 800c164:	e793      	b.n	800c08e <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800c166:	6814      	ldr	r4, [r2, #0]
 800c168:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800c16c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800c16e:	432b      	orrs	r3, r5
 800c170:	6a0d      	ldr	r5, [r1, #32]
 800c172:	432b      	orrs	r3, r5
 800c174:	4323      	orrs	r3, r4
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	e7f0      	b.n	800c15c <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c17a:	2308      	movs	r3, #8
 800c17c:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 800c17e:	2001      	movs	r0, #1
 800c180:	e785      	b.n	800c08e <OSPI_ConfigCmd+0xbe>
 800c182:	bf00      	nop
 800c184:	f0ffc0c0 	.word	0xf0ffc0c0
 800c188:	ffffc0c0 	.word	0xffffc0c0
 800c18c:	f0ffffc0 	.word	0xf0ffffc0
 800c190:	f0ffc0ff 	.word	0xf0ffc0ff

0800c194 <OSPI_WaitFlagStateUntilTimeout>:
{
 800c194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c198:	4605      	mov	r5, r0
 800c19a:	460f      	mov	r7, r1
 800c19c:	4616      	mov	r6, r2
 800c19e:	4699      	mov	r9, r3
 800c1a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800c1a4:	682c      	ldr	r4, [r5, #0]
 800c1a6:	6a24      	ldr	r4, [r4, #32]
 800c1a8:	423c      	tst	r4, r7
 800c1aa:	bf14      	ite	ne
 800c1ac:	f04f 0c01 	movne.w	ip, #1
 800c1b0:	f04f 0c00 	moveq.w	ip, #0
 800c1b4:	45b4      	cmp	ip, r6
 800c1b6:	d014      	beq.n	800c1e2 <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800c1b8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c1bc:	d0f2      	beq.n	800c1a4 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1be:	f7fe fa8f 	bl	800a6e0 <HAL_GetTick>
 800c1c2:	eba0 0009 	sub.w	r0, r0, r9
 800c1c6:	4540      	cmp	r0, r8
 800c1c8:	d802      	bhi.n	800c1d0 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 800c1ca:	f1b8 0f00 	cmp.w	r8, #0
 800c1ce:	d1e9      	bne.n	800c1a4 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800c1d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1d4:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800c1d6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800c1d8:	f043 0301 	orr.w	r3, r3, #1
 800c1dc:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 800c1de:	2001      	movs	r0, #1
 800c1e0:	e000      	b.n	800c1e4 <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 800c1e2:	2000      	movs	r0, #0
}
 800c1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c1e8 <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 800c1e8:	b180      	cbz	r0, 800c20c <HAL_OSPI_DeInit+0x24>
{
 800c1ea:	b510      	push	{r4, lr}
 800c1ec:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 800c1ee:	6802      	ldr	r2, [r0, #0]
 800c1f0:	6813      	ldr	r3, [r2, #0]
 800c1f2:	f023 0301 	bic.w	r3, r3, #1
 800c1f6:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800c1f8:	6802      	ldr	r2, [r0, #0]
 800c1fa:	6893      	ldr	r3, [r2, #8]
 800c1fc:	f023 0302 	bic.w	r3, r3, #2
 800c200:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 800c202:	f7f6 ff7b 	bl	80030fc <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 800c206:	2000      	movs	r0, #0
 800c208:	6520      	str	r0, [r4, #80]	; 0x50
}
 800c20a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800c20c:	2001      	movs	r0, #1
}
 800c20e:	4770      	bx	lr

0800c210 <HAL_OSPI_Command>:
{
 800c210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c214:	b082      	sub	sp, #8
 800c216:	4604      	mov	r4, r0
 800c218:	4688      	mov	r8, r1
 800c21a:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800c21c:	f7fe fa60 	bl	800a6e0 <HAL_GetTick>
 800c220:	4606      	mov	r6, r0
  state = hospi->State;
 800c222:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800c224:	2d02      	cmp	r5, #2
 800c226:	d009      	beq.n	800c23c <HAL_OSPI_Command+0x2c>
 800c228:	2d14      	cmp	r5, #20
 800c22a:	d024      	beq.n	800c276 <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800c22c:	2d24      	cmp	r5, #36	; 0x24
 800c22e:	d028      	beq.n	800c282 <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c230:	2310      	movs	r3, #16
 800c232:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c234:	2001      	movs	r0, #1
}
 800c236:	b002      	add	sp, #8
 800c238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800c23c:	68e3      	ldr	r3, [r4, #12]
 800c23e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c242:	d0f1      	beq.n	800c228 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c244:	9700      	str	r7, [sp, #0]
 800c246:	4633      	mov	r3, r6
 800c248:	2200      	movs	r2, #0
 800c24a:	2120      	movs	r1, #32
 800c24c:	4620      	mov	r0, r4
 800c24e:	f7ff ffa1 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c252:	2800      	cmp	r0, #0
 800c254:	d1ef      	bne.n	800c236 <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800c256:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 800c258:	4641      	mov	r1, r8
 800c25a:	4620      	mov	r0, r4
 800c25c:	f7ff feb8 	bl	800bfd0 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800c260:	2800      	cmp	r0, #0
 800c262:	d1e8      	bne.n	800c236 <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800c264:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800c268:	b193      	cbz	r3, 800c290 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800c26a:	f8d8 3000 	ldr.w	r3, [r8]
 800c26e:	b9d3      	cbnz	r3, 800c2a6 <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800c270:	2304      	movs	r3, #4
 800c272:	6523      	str	r3, [r4, #80]	; 0x50
 800c274:	e7df      	b.n	800c236 <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800c276:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800c27a:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d8d5      	bhi.n	800c22c <HAL_OSPI_Command+0x1c>
 800c280:	e7e0      	b.n	800c244 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800c282:	f8d8 3000 	ldr.w	r3, [r8]
 800c286:	2b03      	cmp	r3, #3
 800c288:	bf18      	it	ne
 800c28a:	2b01      	cmpne	r3, #1
 800c28c:	d1d0      	bne.n	800c230 <HAL_OSPI_Command+0x20>
 800c28e:	e7d9      	b.n	800c244 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c290:	9700      	str	r7, [sp, #0]
 800c292:	4633      	mov	r3, r6
 800c294:	2201      	movs	r2, #1
 800c296:	2102      	movs	r1, #2
 800c298:	4620      	mov	r0, r4
 800c29a:	f7ff ff7b 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c29e:	6823      	ldr	r3, [r4, #0]
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	625a      	str	r2, [r3, #36]	; 0x24
 800c2a4:	e7c7      	b.n	800c236 <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d007      	beq.n	800c2ba <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d1c3      	bne.n	800c236 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800c2ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c2b0:	2b14      	cmp	r3, #20
 800c2b2:	d00b      	beq.n	800c2cc <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800c2b4:	2324      	movs	r3, #36	; 0x24
 800c2b6:	6523      	str	r3, [r4, #80]	; 0x50
 800c2b8:	e7bd      	b.n	800c236 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800c2ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c2bc:	2b24      	cmp	r3, #36	; 0x24
 800c2be:	d002      	beq.n	800c2c6 <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800c2c0:	2314      	movs	r3, #20
 800c2c2:	6523      	str	r3, [r4, #80]	; 0x50
 800c2c4:	e7b7      	b.n	800c236 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800c2c6:	2304      	movs	r3, #4
 800c2c8:	6523      	str	r3, [r4, #80]	; 0x50
 800c2ca:	e7b4      	b.n	800c236 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800c2cc:	2304      	movs	r3, #4
 800c2ce:	6523      	str	r3, [r4, #80]	; 0x50
 800c2d0:	e7b1      	b.n	800c236 <HAL_OSPI_Command+0x26>

0800c2d2 <HAL_OSPI_Transmit>:
{
 800c2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	4604      	mov	r4, r0
 800c2da:	4688      	mov	r8, r1
 800c2dc:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800c2de:	f7fe f9ff 	bl	800a6e0 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c2e2:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 800c2e4:	f1b8 0f00 	cmp.w	r8, #0
 800c2e8:	d00a      	beq.n	800c300 <HAL_OSPI_Transmit+0x2e>
 800c2ea:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c2ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c2ee:	2b04      	cmp	r3, #4
 800c2f0:	d00a      	beq.n	800c308 <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c2f2:	2310      	movs	r3, #16
 800c2f4:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	b002      	add	sp, #8
 800c2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c300:	2308      	movs	r3, #8
 800c302:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	e7f7      	b.n	800c2f8 <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800c308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c30a:	3301      	adds	r3, #1
 800c30c:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800c30e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c310:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800c312:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c31c:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800c31e:	9600      	str	r6, [sp, #0]
 800c320:	462b      	mov	r3, r5
 800c322:	2201      	movs	r2, #1
 800c324:	2104      	movs	r1, #4
 800c326:	4620      	mov	r0, r4
 800c328:	f7ff ff34 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800c32c:	4603      	mov	r3, r0
 800c32e:	b960      	cbnz	r0, 800c34a <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800c330:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c332:	7812      	ldrb	r2, [r2, #0]
 800c334:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 800c338:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c33a:	3101      	adds	r1, #1
 800c33c:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800c33e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c340:	3901      	subs	r1, #1
 800c342:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800c344:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c346:	2a00      	cmp	r2, #0
 800c348:	d1e9      	bne.n	800c31e <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1d4      	bne.n	800c2f8 <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c34e:	9600      	str	r6, [sp, #0]
 800c350:	462b      	mov	r3, r5
 800c352:	2201      	movs	r2, #1
 800c354:	2102      	movs	r1, #2
 800c356:	4620      	mov	r0, r4
 800c358:	f7ff ff1c 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800c35c:	4603      	mov	r3, r0
 800c35e:	2800      	cmp	r0, #0
 800c360:	d1ca      	bne.n	800c2f8 <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c362:	6821      	ldr	r1, [r4, #0]
 800c364:	2202      	movs	r2, #2
 800c366:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800c368:	6522      	str	r2, [r4, #80]	; 0x50
 800c36a:	e7c5      	b.n	800c2f8 <HAL_OSPI_Transmit+0x26>

0800c36c <HAL_OSPI_Receive>:
{
 800c36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c370:	b082      	sub	sp, #8
 800c372:	4604      	mov	r4, r0
 800c374:	4688      	mov	r8, r1
 800c376:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800c378:	f7fe f9b2 	bl	800a6e0 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c37c:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 800c37e:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800c380:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 800c384:	f1b8 0f00 	cmp.w	r8, #0
 800c388:	d00a      	beq.n	800c3a0 <HAL_OSPI_Receive+0x34>
 800c38a:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c38c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c38e:	2b04      	cmp	r3, #4
 800c390:	d00a      	beq.n	800c3a8 <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c392:	2310      	movs	r3, #16
 800c394:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800c396:	2301      	movs	r3, #1
}
 800c398:	4618      	mov	r0, r3
 800c39a:	b002      	add	sp, #8
 800c39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c3a0:	2308      	movs	r3, #8
 800c3a2:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e7f7      	b.n	800c398 <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800c3a8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800c3ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c3b0:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800c3b2:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c3b6:	682b      	ldr	r3, [r5, #0]
 800c3b8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c3bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3c0:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c3c2:	68e3      	ldr	r3, [r4, #12]
 800c3c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c3c8:	d007      	beq.n	800c3da <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800c3d0:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 800c3d4:	d02a      	beq.n	800c42c <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800c3d6:	649a      	str	r2, [r3, #72]	; 0x48
 800c3d8:	e001      	b.n	800c3de <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800c3da:	6823      	ldr	r3, [r4, #0]
 800c3dc:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800c3de:	9700      	str	r7, [sp, #0]
 800c3e0:	4633      	mov	r3, r6
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	2106      	movs	r1, #6
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f7ff fed4 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	b960      	cbnz	r0, 800c40a <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c3f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c3f2:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 800c3f6:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 800c3f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c3fa:	3101      	adds	r1, #1
 800c3fc:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800c3fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c400:	3901      	subs	r1, #1
 800c402:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800c404:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c406:	2a00      	cmp	r2, #0
 800c408:	d1e9      	bne.n	800c3de <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1c4      	bne.n	800c398 <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c40e:	9700      	str	r7, [sp, #0]
 800c410:	4633      	mov	r3, r6
 800c412:	2201      	movs	r2, #1
 800c414:	2102      	movs	r1, #2
 800c416:	4620      	mov	r0, r4
 800c418:	f7ff febc 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800c41c:	4603      	mov	r3, r0
 800c41e:	2800      	cmp	r0, #0
 800c420:	d1ba      	bne.n	800c398 <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c422:	6821      	ldr	r1, [r4, #0]
 800c424:	2202      	movs	r2, #2
 800c426:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800c428:	6522      	str	r2, [r4, #80]	; 0x50
 800c42a:	e7b5      	b.n	800c398 <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800c42c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 800c430:	e7d5      	b.n	800c3de <HAL_OSPI_Receive+0x72>

0800c432 <HAL_OSPI_AutoPolling>:
{
 800c432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c436:	b083      	sub	sp, #12
 800c438:	4604      	mov	r4, r0
 800c43a:	460d      	mov	r5, r1
 800c43c:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800c43e:	f7fe f94f 	bl	800a6e0 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 800c442:	6821      	ldr	r1, [r4, #0]
 800c444:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800c446:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800c44a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c44c:	2904      	cmp	r1, #4
 800c44e:	d005      	beq.n	800c45c <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c450:	2310      	movs	r3, #16
 800c452:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c454:	2001      	movs	r0, #1
}
 800c456:	b003      	add	sp, #12
 800c458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c45c:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800c45e:	68eb      	ldr	r3, [r5, #12]
 800c460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c464:	d1f4      	bne.n	800c450 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c466:	f8cd 9000 	str.w	r9, [sp]
 800c46a:	4603      	mov	r3, r0
 800c46c:	2200      	movs	r2, #0
 800c46e:	2120      	movs	r1, #32
 800c470:	4620      	mov	r0, r4
 800c472:	f7ff fe8f 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c476:	2800      	cmp	r0, #0
 800c478:	d1ed      	bne.n	800c456 <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	682a      	ldr	r2, [r5, #0]
 800c47e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	686a      	ldr	r2, [r5, #4]
 800c486:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	692a      	ldr	r2, [r5, #16]
 800c48e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800c492:	6821      	ldr	r1, [r4, #0]
 800c494:	680b      	ldr	r3, [r1, #0]
 800c496:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 800c49a:	68aa      	ldr	r2, [r5, #8]
 800c49c:	68e8      	ldr	r0, [r5, #12]
 800c49e:	4302      	orrs	r2, r0
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4a6:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c4a8:	68e3      	ldr	r3, [r4, #12]
 800c4aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c4ae:	d007      	beq.n	800c4c0 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800c4b0:	6823      	ldr	r3, [r4, #0]
 800c4b2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800c4b6:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800c4ba:	d013      	beq.n	800c4e4 <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800c4bc:	649f      	str	r7, [r3, #72]	; 0x48
 800c4be:	e001      	b.n	800c4c4 <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800c4c4:	f8cd 9000 	str.w	r9, [sp]
 800c4c8:	4643      	mov	r3, r8
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	2108      	movs	r1, #8
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f7ff fe60 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d1be      	bne.n	800c456 <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	2208      	movs	r2, #8
 800c4dc:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 800c4de:	2302      	movs	r3, #2
 800c4e0:	6523      	str	r3, [r4, #80]	; 0x50
 800c4e2:	e7b8      	b.n	800c456 <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800c4e4:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 800c4e8:	e7ec      	b.n	800c4c4 <HAL_OSPI_AutoPolling+0x92>
	...

0800c4ec <HAL_OSPI_MemoryMapped>:
{
 800c4ec:	b530      	push	{r4, r5, lr}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800c4f4:	f7fe f8f4 	bl	800a6e0 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c4f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c4fa:	2b04      	cmp	r3, #4
 800c4fc:	d004      	beq.n	800c508 <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c4fe:	2310      	movs	r3, #16
 800c500:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c502:	2001      	movs	r0, #1
}
 800c504:	b003      	add	sp, #12
 800c506:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c508:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	4603      	mov	r3, r0
 800c50e:	2200      	movs	r2, #0
 800c510:	2120      	movs	r1, #32
 800c512:	4620      	mov	r0, r4
 800c514:	f7ff fe3e 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c518:	2800      	cmp	r0, #0
 800c51a:	d1f3      	bne.n	800c504 <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800c51c:	2388      	movs	r3, #136	; 0x88
 800c51e:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	2b08      	cmp	r3, #8
 800c524:	d009      	beq.n	800c53a <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800c526:	6822      	ldr	r2, [r4, #0]
 800c528:	6811      	ldr	r1, [r2, #0]
 800c52a:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <HAL_OSPI_MemoryMapped+0x68>)
 800c52c:	400b      	ands	r3, r1
 800c52e:	6829      	ldr	r1, [r5, #0]
 800c530:	430b      	orrs	r3, r1
 800c532:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	e7e4      	b.n	800c504 <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800c53a:	6823      	ldr	r3, [r4, #0]
 800c53c:	686a      	ldr	r2, [r5, #4]
 800c53e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	2210      	movs	r2, #16
 800c546:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800c548:	6822      	ldr	r2, [r4, #0]
 800c54a:	6813      	ldr	r3, [r2, #0]
 800c54c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c550:	6013      	str	r3, [r2, #0]
 800c552:	e7e8      	b.n	800c526 <HAL_OSPI_MemoryMapped+0x3a>
 800c554:	cffffff7 	.word	0xcffffff7

0800c558 <HAL_OSPI_ErrorCallback>:
}
 800c558:	4770      	bx	lr

0800c55a <HAL_OSPI_AbortCpltCallback>:
}
 800c55a:	4770      	bx	lr

0800c55c <OSPI_DMAAbortCplt>:
{
 800c55c:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800c55e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 800c560:	2300      	movs	r3, #0
 800c562:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800c564:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c56a:	d116      	bne.n	800c59a <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c56c:	6803      	ldr	r3, [r0, #0]
 800c56e:	6a1a      	ldr	r2, [r3, #32]
 800c570:	f012 0f20 	tst.w	r2, #32
 800c574:	d00c      	beq.n	800c590 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c576:	2202      	movs	r2, #2
 800c578:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800c57a:	6802      	ldr	r2, [r0, #0]
 800c57c:	6813      	ldr	r3, [r2, #0]
 800c57e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c582:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800c584:	6802      	ldr	r2, [r0, #0]
 800c586:	6813      	ldr	r3, [r2, #0]
 800c588:	f043 0302 	orr.w	r3, r3, #2
 800c58c:	6013      	str	r3, [r2, #0]
 800c58e:	e008      	b.n	800c5a2 <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 800c590:	2302      	movs	r3, #2
 800c592:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800c594:	f7ff ffe1 	bl	800c55a <HAL_OSPI_AbortCpltCallback>
 800c598:	e003      	b.n	800c5a2 <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 800c59a:	2302      	movs	r3, #2
 800c59c:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800c59e:	f7ff ffdb 	bl	800c558 <HAL_OSPI_ErrorCallback>
}
 800c5a2:	bd08      	pop	{r3, pc}

0800c5a4 <HAL_OSPI_FifoThresholdCallback>:
}
 800c5a4:	4770      	bx	lr

0800c5a6 <HAL_OSPI_CmdCpltCallback>:
}
 800c5a6:	4770      	bx	lr

0800c5a8 <HAL_OSPI_RxCpltCallback>:
}
 800c5a8:	4770      	bx	lr

0800c5aa <HAL_OSPI_TxCpltCallback>:
}
 800c5aa:	4770      	bx	lr

0800c5ac <HAL_OSPI_StatusMatchCallback>:
}
 800c5ac:	4770      	bx	lr

0800c5ae <HAL_OSPI_TimeOutCallback>:
}
 800c5ae:	4770      	bx	lr

0800c5b0 <HAL_OSPI_IRQHandler>:
{
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c5b4:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 800c5b6:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 800c5b8:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 800c5ba:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800c5bc:	f013 0f04 	tst.w	r3, #4
 800c5c0:	d027      	beq.n	800c612 <HAL_OSPI_IRQHandler+0x62>
 800c5c2:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 800c5c6:	d024      	beq.n	800c612 <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800c5c8:	2818      	cmp	r0, #24
 800c5ca:	d00c      	beq.n	800c5e6 <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800c5cc:	2828      	cmp	r0, #40	; 0x28
 800c5ce:	d015      	beq.n	800c5fc <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 800c5d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c5d2:	b923      	cbnz	r3, 800c5de <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800c5d4:	6822      	ldr	r2, [r4, #0]
 800c5d6:	6813      	ldr	r3, [r2, #0]
 800c5d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5dc:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f7ff ffe0 	bl	800c5a4 <HAL_OSPI_FifoThresholdCallback>
}
 800c5e4:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800c5e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 800c5ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800c5f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	64a3      	str	r3, [r4, #72]	; 0x48
 800c5fa:	e7e9      	b.n	800c5d0 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c5fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5fe:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c602:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800c604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c606:	3301      	adds	r3, #1
 800c608:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800c60a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c60c:	3b01      	subs	r3, #1
 800c60e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c610:	e7de      	b.n	800c5d0 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800c612:	f013 0f02 	tst.w	r3, #2
 800c616:	d044      	beq.n	800c6a2 <HAL_OSPI_IRQHandler+0xf2>
 800c618:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800c61c:	d041      	beq.n	800c6a2 <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800c61e:	2828      	cmp	r0, #40	; 0x28
 800c620:	d014      	beq.n	800c64c <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800c622:	2102      	movs	r1, #2
 800c624:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800c626:	6822      	ldr	r2, [r4, #0]
 800c628:	6813      	ldr	r3, [r2, #0]
 800c62a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c62e:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800c630:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800c632:	2818      	cmp	r0, #24
 800c634:	d029      	beq.n	800c68a <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800c636:	2808      	cmp	r0, #8
 800c638:	d02b      	beq.n	800c692 <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800c63a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800c63e:	d1d1      	bne.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800c640:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c642:	bb53      	cbnz	r3, 800c69a <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 800c644:	4620      	mov	r0, r4
 800c646:	f7ff ff88 	bl	800c55a <HAL_OSPI_AbortCpltCallback>
 800c64a:	e7cb      	b.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800c64c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c64e:	b169      	cbz	r1, 800c66c <HAL_OSPI_IRQHandler+0xbc>
 800c650:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 800c654:	d00a      	beq.n	800c66c <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c658:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c65c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800c65e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c660:	3301      	adds	r3, #1
 800c662:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 800c664:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c666:	3b01      	subs	r3, #1
 800c668:	64a3      	str	r3, [r4, #72]	; 0x48
 800c66a:	e7bb      	b.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 800c66c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1b8      	bne.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800c672:	2102      	movs	r1, #2
 800c674:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800c676:	6822      	ldr	r2, [r4, #0]
 800c678:	6813      	ldr	r3, [r2, #0]
 800c67a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c67e:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 800c680:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 800c682:	4620      	mov	r0, r4
 800c684:	f7ff ff90 	bl	800c5a8 <HAL_OSPI_RxCpltCallback>
 800c688:	e7ac      	b.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 800c68a:	4620      	mov	r0, r4
 800c68c:	f7ff ff8d 	bl	800c5aa <HAL_OSPI_TxCpltCallback>
 800c690:	e7a8      	b.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 800c692:	4620      	mov	r0, r4
 800c694:	f7ff ff87 	bl	800c5a6 <HAL_OSPI_CmdCpltCallback>
 800c698:	e7a4      	b.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 800c69a:	4620      	mov	r0, r4
 800c69c:	f7ff ff5c 	bl	800c558 <HAL_OSPI_ErrorCallback>
 800c6a0:	e7a0      	b.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800c6a2:	f013 0f08 	tst.w	r3, #8
 800c6a6:	d013      	beq.n	800c6d0 <HAL_OSPI_IRQHandler+0x120>
 800c6a8:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 800c6ac:	d010      	beq.n	800c6d0 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800c6ae:	2308      	movs	r3, #8
 800c6b0:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800c6b2:	6823      	ldr	r3, [r4, #0]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800c6ba:	d005      	beq.n	800c6c8 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800c6c2:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f7ff ff6f 	bl	800c5ac <HAL_OSPI_StatusMatchCallback>
 800c6ce:	e789      	b.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800c6d0:	f013 0f01 	tst.w	r3, #1
 800c6d4:	d029      	beq.n	800c72a <HAL_OSPI_IRQHandler+0x17a>
 800c6d6:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800c6da:	d026      	beq.n	800c72a <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800c6e0:	6822      	ldr	r2, [r4, #0]
 800c6e2:	6813      	ldr	r3, [r2, #0]
 800c6e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c6e8:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	f012 0f04 	tst.w	r2, #4
 800c6f6:	d012      	beq.n	800c71e <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	f022 0204 	bic.w	r2, r2, #4
 800c6fe:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800c700:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c702:	4a11      	ldr	r2, [pc, #68]	; (800c748 <HAL_OSPI_IRQHandler+0x198>)
 800c704:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800c706:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c708:	f7ff fc4c 	bl	800bfa4 <HAL_MDMA_Abort_IT>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	f43f af69 	beq.w	800c5e4 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 800c712:	2302      	movs	r3, #2
 800c714:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 800c716:	4620      	mov	r0, r4
 800c718:	f7ff ff1e 	bl	800c558 <HAL_OSPI_ErrorCallback>
 800c71c:	e762      	b.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 800c71e:	2302      	movs	r3, #2
 800c720:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 800c722:	4620      	mov	r0, r4
 800c724:	f7ff ff18 	bl	800c558 <HAL_OSPI_ErrorCallback>
 800c728:	e75c      	b.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800c72a:	f013 0f10 	tst.w	r3, #16
 800c72e:	f43f af59 	beq.w	800c5e4 <HAL_OSPI_IRQHandler+0x34>
 800c732:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c736:	f43f af55 	beq.w	800c5e4 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800c73a:	2310      	movs	r3, #16
 800c73c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 800c73e:	4620      	mov	r0, r4
 800c740:	f7ff ff35 	bl	800c5ae <HAL_OSPI_TimeOutCallback>
}
 800c744:	e74e      	b.n	800c5e4 <HAL_OSPI_IRQHandler+0x34>
 800c746:	bf00      	nop
 800c748:	0800c55d 	.word	0x0800c55d

0800c74c <HAL_OSPI_Abort>:
{
 800c74c:	b530      	push	{r4, r5, lr}
 800c74e:	b083      	sub	sp, #12
 800c750:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c752:	f7fd ffc5 	bl	800a6e0 <HAL_GetTick>
  state = hospi->State;
 800c756:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800c758:	f012 0f0c 	tst.w	r2, #12
 800c75c:	d036      	beq.n	800c7cc <HAL_OSPI_Abort+0x80>
 800c75e:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800c760:	6823      	ldr	r3, [r4, #0]
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	f012 0f04 	tst.w	r2, #4
 800c768:	d108      	bne.n	800c77c <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 800c76a:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c76c:	6823      	ldr	r3, [r4, #0]
 800c76e:	6a1a      	ldr	r2, [r3, #32]
 800c770:	f012 0f20 	tst.w	r2, #32
 800c774:	d10e      	bne.n	800c794 <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 800c776:	2302      	movs	r3, #2
 800c778:	6523      	str	r3, [r4, #80]	; 0x50
 800c77a:	e02a      	b.n	800c7d2 <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	f022 0204 	bic.w	r2, r2, #4
 800c782:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 800c784:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c786:	f7ff fbcf 	bl	800bf28 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d0ee      	beq.n	800c76c <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800c78e:	2304      	movs	r3, #4
 800c790:	6563      	str	r3, [r4, #84]	; 0x54
 800c792:	e7eb      	b.n	800c76c <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	f042 0202 	orr.w	r2, r2, #2
 800c79a:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800c79c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	462b      	mov	r3, r5
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	2102      	movs	r1, #2
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f7ff fcf4 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c7ac:	b988      	cbnz	r0, 800c7d2 <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c7b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7b6:	9300      	str	r3, [sp, #0]
 800c7b8:	462b      	mov	r3, r5
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2120      	movs	r1, #32
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f7ff fce8 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800c7c4:	b928      	cbnz	r0, 800c7d2 <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 800c7c6:	2302      	movs	r3, #2
 800c7c8:	6523      	str	r3, [r4, #80]	; 0x50
 800c7ca:	e002      	b.n	800c7d2 <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c7cc:	2310      	movs	r3, #16
 800c7ce:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c7d0:	2001      	movs	r0, #1
}
 800c7d2:	b003      	add	sp, #12
 800c7d4:	bd30      	pop	{r4, r5, pc}

0800c7d6 <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 800c7d6:	6581      	str	r1, [r0, #88]	; 0x58
}
 800c7d8:	2000      	movs	r0, #0
 800c7da:	4770      	bx	lr

0800c7dc <HAL_OSPI_Init>:
{
 800c7dc:	b530      	push	{r4, r5, lr}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c7e2:	f7fd ff7d 	bl	800a6e0 <HAL_GetTick>
  if (hospi == NULL)
 800c7e6:	2c00      	cmp	r4, #0
 800c7e8:	d077      	beq.n	800c8da <HAL_OSPI_Init+0xfe>
 800c7ea:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800c7f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c7f2:	b113      	cbz	r3, 800c7fa <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 800c7f4:	2000      	movs	r0, #0
}
 800c7f6:	b003      	add	sp, #12
 800c7f8:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f7f6 fc34 	bl	8003068 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800c800:	f241 3188 	movw	r1, #5000	; 0x1388
 800c804:	4620      	mov	r0, r4
 800c806:	f7ff ffe6 	bl	800c7d6 <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 800c80a:	6820      	ldr	r0, [r4, #0]
 800c80c:	6882      	ldr	r2, [r0, #8]
 800c80e:	4b34      	ldr	r3, [pc, #208]	; (800c8e0 <HAL_OSPI_Init+0x104>)
 800c810:	4013      	ands	r3, r2
 800c812:	68e2      	ldr	r2, [r4, #12]
 800c814:	6921      	ldr	r1, [r4, #16]
 800c816:	3901      	subs	r1, #1
 800c818:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c81c:	6961      	ldr	r1, [r4, #20]
 800c81e:	3901      	subs	r1, #1
 800c820:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c826:	430a      	orrs	r2, r1
 800c828:	69e1      	ldr	r1, [r4, #28]
 800c82a:	430a      	orrs	r2, r1
 800c82c:	4313      	orrs	r3, r2
 800c82e:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800c830:	6822      	ldr	r2, [r4, #0]
 800c832:	68d3      	ldr	r3, [r2, #12]
 800c834:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c838:	6a21      	ldr	r1, [r4, #32]
 800c83a:	430b      	orrs	r3, r1
 800c83c:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800c83e:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800c840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800c842:	6822      	ldr	r2, [r4, #0]
 800c844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c848:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c84e:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800c850:	6821      	ldr	r1, [r4, #0]
 800c852:	680b      	ldr	r3, [r1, #0]
 800c854:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800c858:	6862      	ldr	r2, [r4, #4]
 800c85a:	3a01      	subs	r2, #1
 800c85c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c860:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	462b      	mov	r3, r5
 800c868:	2200      	movs	r2, #0
 800c86a:	2120      	movs	r1, #32
 800c86c:	4620      	mov	r0, r4
 800c86e:	f7ff fc91 	bl	800c194 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c872:	2800      	cmp	r0, #0
 800c874:	d1bf      	bne.n	800c7f6 <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800c876:	6821      	ldr	r1, [r4, #0]
 800c878:	68cb      	ldr	r3, [r1, #12]
 800c87a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c87e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c880:	3a01      	subs	r2, #1
 800c882:	4313      	orrs	r3, r2
 800c884:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800c886:	6822      	ldr	r2, [r4, #0]
 800c888:	6813      	ldr	r3, [r2, #0]
 800c88a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c88e:	68a1      	ldr	r1, [r4, #8]
 800c890:	430b      	orrs	r3, r1
 800c892:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800c894:	6821      	ldr	r1, [r4, #0]
 800c896:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 800c89a:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 800c89e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c8a0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800c8a2:	432a      	orrs	r2, r5
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 800c8aa:	6822      	ldr	r2, [r4, #0]
 800c8ac:	6813      	ldr	r3, [r2, #0]
 800c8ae:	f043 0301 	orr.w	r3, r3, #1
 800c8b2:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800c8b4:	69a3      	ldr	r3, [r4, #24]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d006      	beq.n	800c8c8 <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c8ba:	68e3      	ldr	r3, [r4, #12]
 800c8bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8c0:	d008      	beq.n	800c8d4 <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	6523      	str	r3, [r4, #80]	; 0x50
 800c8c6:	e796      	b.n	800c7f6 <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800c8c8:	6822      	ldr	r2, [r4, #0]
 800c8ca:	6893      	ldr	r3, [r2, #8]
 800c8cc:	f043 0302 	orr.w	r3, r3, #2
 800c8d0:	6093      	str	r3, [r2, #8]
 800c8d2:	e7f2      	b.n	800c8ba <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	6523      	str	r3, [r4, #80]	; 0x50
 800c8d8:	e78d      	b.n	800c7f6 <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 800c8da:	2001      	movs	r0, #1
 800c8dc:	e78b      	b.n	800c7f6 <HAL_OSPI_Init+0x1a>
 800c8de:	bf00      	nop
 800c8e0:	f8e0f8f4 	.word	0xf8e0f8f4

0800c8e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800c8e8:	4b22      	ldr	r3, [pc, #136]	; (800c974 <HAL_PWREx_ConfigSupply+0x90>)
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	f003 0307 	and.w	r3, r3, #7
 800c8f0:	2b06      	cmp	r3, #6
 800c8f2:	d007      	beq.n	800c904 <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c8f4:	4b1f      	ldr	r3, [pc, #124]	; (800c974 <HAL_PWREx_ConfigSupply+0x90>)
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8fc:	4283      	cmp	r3, r0
 800c8fe:	d036      	beq.n	800c96e <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c900:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800c902:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c904:	4a1b      	ldr	r2, [pc, #108]	; (800c974 <HAL_PWREx_ConfigSupply+0x90>)
 800c906:	68d3      	ldr	r3, [r2, #12]
 800c908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c90c:	4303      	orrs	r3, r0
 800c90e:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800c910:	f7fd fee6 	bl	800a6e0 <HAL_GetTick>
 800c914:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c916:	4b17      	ldr	r3, [pc, #92]	; (800c974 <HAL_PWREx_ConfigSupply+0x90>)
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c91e:	d107      	bne.n	800c930 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c920:	f7fd fede 	bl	800a6e0 <HAL_GetTick>
 800c924:	1b43      	subs	r3, r0, r5
 800c926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c92a:	d9f4      	bls.n	800c916 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 800c92c:	2001      	movs	r0, #1
 800c92e:	e7e8      	b.n	800c902 <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800c930:	2c2e      	cmp	r4, #46	; 0x2e
 800c932:	bf18      	it	ne
 800c934:	2c1e      	cmpne	r4, #30
 800c936:	d008      	beq.n	800c94a <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800c938:	2c2d      	cmp	r4, #45	; 0x2d
 800c93a:	bf14      	ite	ne
 800c93c:	2300      	movne	r3, #0
 800c93e:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800c940:	2c1d      	cmp	r4, #29
 800c942:	d002      	beq.n	800c94a <HAL_PWREx_ConfigSupply+0x66>
 800c944:	b90b      	cbnz	r3, 800c94a <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 800c946:	2000      	movs	r0, #0
 800c948:	e7db      	b.n	800c902 <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 800c94a:	f7fd fec9 	bl	800a6e0 <HAL_GetTick>
 800c94e:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c950:	4b08      	ldr	r3, [pc, #32]	; (800c974 <HAL_PWREx_ConfigSupply+0x90>)
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800c958:	d107      	bne.n	800c96a <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c95a:	f7fd fec1 	bl	800a6e0 <HAL_GetTick>
 800c95e:	1b00      	subs	r0, r0, r4
 800c960:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c964:	d9f4      	bls.n	800c950 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 800c966:	2001      	movs	r0, #1
 800c968:	e7cb      	b.n	800c902 <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 800c96a:	2000      	movs	r0, #0
 800c96c:	e7c9      	b.n	800c902 <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 800c96e:	2000      	movs	r0, #0
 800c970:	e7c7      	b.n	800c902 <HAL_PWREx_ConfigSupply+0x1e>
 800c972:	bf00      	nop
 800c974:	58024800 	.word	0x58024800

0800c978 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c978:	2800      	cmp	r0, #0
 800c97a:	f000 82f0 	beq.w	800cf5e <HAL_RCC_OscConfig+0x5e6>
{
 800c97e:	b538      	push	{r3, r4, r5, lr}
 800c980:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c982:	6803      	ldr	r3, [r0, #0]
 800c984:	f013 0f01 	tst.w	r3, #1
 800c988:	d029      	beq.n	800c9de <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c98a:	4aa1      	ldr	r2, [pc, #644]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800c98c:	6913      	ldr	r3, [r2, #16]
 800c98e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c992:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c994:	2b10      	cmp	r3, #16
 800c996:	d019      	beq.n	800c9cc <HAL_RCC_OscConfig+0x54>
 800c998:	2b18      	cmp	r3, #24
 800c99a:	d013      	beq.n	800c9c4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c99c:	6863      	ldr	r3, [r4, #4]
 800c99e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9a2:	d043      	beq.n	800ca2c <HAL_RCC_OscConfig+0xb4>
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d158      	bne.n	800ca5a <HAL_RCC_OscConfig+0xe2>
 800c9a8:	4b99      	ldr	r3, [pc, #612]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c9b0:	601a      	str	r2, [r3, #0]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c9b8:	601a      	str	r2, [r3, #0]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	e038      	b.n	800ca36 <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c9c4:	f002 0203 	and.w	r2, r2, #3
 800c9c8:	2a02      	cmp	r2, #2
 800c9ca:	d1e7      	bne.n	800c99c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9cc:	4b90      	ldr	r3, [pc, #576]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c9d4:	d003      	beq.n	800c9de <HAL_RCC_OscConfig+0x66>
 800c9d6:	6863      	ldr	r3, [r4, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f000 82c2 	beq.w	800cf62 <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	f013 0f02 	tst.w	r3, #2
 800c9e4:	f000 80a2 	beq.w	800cb2c <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c9e8:	4a89      	ldr	r2, [pc, #548]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800c9ea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c9ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c9ee:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800c9f2:	d074      	beq.n	800cade <HAL_RCC_OscConfig+0x166>
 800c9f4:	2b18      	cmp	r3, #24
 800c9f6:	d06f      	beq.n	800cad8 <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c9f8:	68e3      	ldr	r3, [r4, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 80c3 	beq.w	800cb86 <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ca00:	4983      	ldr	r1, [pc, #524]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800ca02:	680a      	ldr	r2, [r1, #0]
 800ca04:	f022 0219 	bic.w	r2, r2, #25
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca0c:	f7fd fe68 	bl	800a6e0 <HAL_GetTick>
 800ca10:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca12:	4b7f      	ldr	r3, [pc, #508]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f013 0f04 	tst.w	r3, #4
 800ca1a:	f040 80ab 	bne.w	800cb74 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ca1e:	f7fd fe5f 	bl	800a6e0 <HAL_GetTick>
 800ca22:	1b40      	subs	r0, r0, r5
 800ca24:	2802      	cmp	r0, #2
 800ca26:	d9f4      	bls.n	800ca12 <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 800ca28:	2003      	movs	r0, #3
 800ca2a:	e2a1      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca2c:	4a78      	ldr	r2, [pc, #480]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800ca2e:	6813      	ldr	r3, [r2, #0]
 800ca30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca34:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ca36:	6863      	ldr	r3, [r4, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d03e      	beq.n	800caba <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 800ca3c:	f7fd fe50 	bl	800a6e0 <HAL_GetTick>
 800ca40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ca42:	4b73      	ldr	r3, [pc, #460]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ca4a:	d1c8      	bne.n	800c9de <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca4c:	f7fd fe48 	bl	800a6e0 <HAL_GetTick>
 800ca50:	1b40      	subs	r0, r0, r5
 800ca52:	2864      	cmp	r0, #100	; 0x64
 800ca54:	d9f5      	bls.n	800ca42 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800ca56:	2003      	movs	r0, #3
 800ca58:	e28a      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca5e:	d010      	beq.n	800ca82 <HAL_RCC_OscConfig+0x10a>
 800ca60:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800ca64:	d01b      	beq.n	800ca9e <HAL_RCC_OscConfig+0x126>
 800ca66:	4b6a      	ldr	r3, [pc, #424]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ca6e:	601a      	str	r2, [r3, #0]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ca76:	601a      	str	r2, [r3, #0]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800ca7e:	601a      	str	r2, [r3, #0]
 800ca80:	e7d9      	b.n	800ca36 <HAL_RCC_OscConfig+0xbe>
 800ca82:	4b63      	ldr	r3, [pc, #396]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ca8a:	601a      	str	r2, [r3, #0]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ca9a:	601a      	str	r2, [r3, #0]
 800ca9c:	e7cb      	b.n	800ca36 <HAL_RCC_OscConfig+0xbe>
 800ca9e:	4b5c      	ldr	r3, [pc, #368]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800caa6:	601a      	str	r2, [r3, #0]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cab6:	601a      	str	r2, [r3, #0]
 800cab8:	e7bd      	b.n	800ca36 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 800caba:	f7fd fe11 	bl	800a6e0 <HAL_GetTick>
 800cabe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cac0:	4b53      	ldr	r3, [pc, #332]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800cac8:	d089      	beq.n	800c9de <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800caca:	f7fd fe09 	bl	800a6e0 <HAL_GetTick>
 800cace:	1b40      	subs	r0, r0, r5
 800cad0:	2864      	cmp	r0, #100	; 0x64
 800cad2:	d9f5      	bls.n	800cac0 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 800cad4:	2003      	movs	r0, #3
 800cad6:	e24b      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cad8:	f012 0f03 	tst.w	r2, #3
 800cadc:	d18c      	bne.n	800c9f8 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cade:	4b4c      	ldr	r3, [pc, #304]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f013 0f04 	tst.w	r3, #4
 800cae6:	d003      	beq.n	800caf0 <HAL_RCC_OscConfig+0x178>
 800cae8:	68e3      	ldr	r3, [r4, #12]
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 823b 	beq.w	800cf66 <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800caf0:	4a47      	ldr	r2, [pc, #284]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800caf2:	6813      	ldr	r3, [r2, #0]
 800caf4:	f023 0319 	bic.w	r3, r3, #25
 800caf8:	68e1      	ldr	r1, [r4, #12]
 800cafa:	430b      	orrs	r3, r1
 800cafc:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 800cafe:	f7fd fdef 	bl	800a6e0 <HAL_GetTick>
 800cb02:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cb04:	4b42      	ldr	r3, [pc, #264]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f013 0f04 	tst.w	r3, #4
 800cb0c:	d106      	bne.n	800cb1c <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb0e:	f7fd fde7 	bl	800a6e0 <HAL_GetTick>
 800cb12:	1b40      	subs	r0, r0, r5
 800cb14:	2802      	cmp	r0, #2
 800cb16:	d9f5      	bls.n	800cb04 <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 800cb18:	2003      	movs	r0, #3
 800cb1a:	e229      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb1c:	4a3c      	ldr	r2, [pc, #240]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cb1e:	6853      	ldr	r3, [r2, #4]
 800cb20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cb24:	6921      	ldr	r1, [r4, #16]
 800cb26:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800cb2a:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	f013 0f10 	tst.w	r3, #16
 800cb32:	d051      	beq.n	800cbd8 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb34:	4a36      	ldr	r2, [pc, #216]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cb36:	6913      	ldr	r3, [r2, #16]
 800cb38:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cb3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cb3e:	2b08      	cmp	r3, #8
 800cb40:	d039      	beq.n	800cbb6 <HAL_RCC_OscConfig+0x23e>
 800cb42:	2b18      	cmp	r3, #24
 800cb44:	d033      	beq.n	800cbae <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800cb46:	69e3      	ldr	r3, [r4, #28]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d06c      	beq.n	800cc26 <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cb4c:	4a30      	ldr	r2, [pc, #192]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cb4e:	6813      	ldr	r3, [r2, #0]
 800cb50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb56:	f7fd fdc3 	bl	800a6e0 <HAL_GetTick>
 800cb5a:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cb5c:	4b2c      	ldr	r3, [pc, #176]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cb64:	d156      	bne.n	800cc14 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800cb66:	f7fd fdbb 	bl	800a6e0 <HAL_GetTick>
 800cb6a:	1b40      	subs	r0, r0, r5
 800cb6c:	2802      	cmp	r0, #2
 800cb6e:	d9f5      	bls.n	800cb5c <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 800cb70:	2003      	movs	r0, #3
 800cb72:	e1fd      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb74:	4a26      	ldr	r2, [pc, #152]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cb76:	6853      	ldr	r3, [r2, #4]
 800cb78:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cb7c:	6921      	ldr	r1, [r4, #16]
 800cb7e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800cb82:	6053      	str	r3, [r2, #4]
 800cb84:	e7d2      	b.n	800cb2c <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 800cb86:	4a22      	ldr	r2, [pc, #136]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cb88:	6813      	ldr	r3, [r2, #0]
 800cb8a:	f023 0301 	bic.w	r3, r3, #1
 800cb8e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800cb90:	f7fd fda6 	bl	800a6e0 <HAL_GetTick>
 800cb94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cb96:	4b1e      	ldr	r3, [pc, #120]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f013 0f04 	tst.w	r3, #4
 800cb9e:	d0c5      	beq.n	800cb2c <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cba0:	f7fd fd9e 	bl	800a6e0 <HAL_GetTick>
 800cba4:	1b40      	subs	r0, r0, r5
 800cba6:	2802      	cmp	r0, #2
 800cba8:	d9f5      	bls.n	800cb96 <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 800cbaa:	2003      	movs	r0, #3
 800cbac:	e1e0      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cbae:	f002 0203 	and.w	r2, r2, #3
 800cbb2:	2a01      	cmp	r2, #1
 800cbb4:	d1c7      	bne.n	800cb46 <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cbb6:	4b16      	ldr	r3, [pc, #88]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cbbe:	d003      	beq.n	800cbc8 <HAL_RCC_OscConfig+0x250>
 800cbc0:	69e3      	ldr	r3, [r4, #28]
 800cbc2:	2b80      	cmp	r3, #128	; 0x80
 800cbc4:	f040 81d1 	bne.w	800cf6a <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cbc8:	4a11      	ldr	r2, [pc, #68]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cbca:	68d3      	ldr	r3, [r2, #12]
 800cbcc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800cbd0:	6a21      	ldr	r1, [r4, #32]
 800cbd2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800cbd6:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	f013 0f08 	tst.w	r3, #8
 800cbde:	d04a      	beq.n	800cc76 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cbe0:	6963      	ldr	r3, [r4, #20]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d033      	beq.n	800cc4e <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cbe6:	4a0a      	ldr	r2, [pc, #40]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cbe8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800cbea:	f043 0301 	orr.w	r3, r3, #1
 800cbee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbf0:	f7fd fd76 	bl	800a6e0 <HAL_GetTick>
 800cbf4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cbf6:	4b06      	ldr	r3, [pc, #24]	; (800cc10 <HAL_RCC_OscConfig+0x298>)
 800cbf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbfa:	f013 0f02 	tst.w	r3, #2
 800cbfe:	d13a      	bne.n	800cc76 <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc00:	f7fd fd6e 	bl	800a6e0 <HAL_GetTick>
 800cc04:	1b40      	subs	r0, r0, r5
 800cc06:	2802      	cmp	r0, #2
 800cc08:	d9f5      	bls.n	800cbf6 <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 800cc0a:	2003      	movs	r0, #3
 800cc0c:	e1b0      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
 800cc0e:	bf00      	nop
 800cc10:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cc14:	4a8c      	ldr	r2, [pc, #560]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cc16:	68d3      	ldr	r3, [r2, #12]
 800cc18:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800cc1c:	6a21      	ldr	r1, [r4, #32]
 800cc1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800cc22:	60d3      	str	r3, [r2, #12]
 800cc24:	e7d8      	b.n	800cbd8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 800cc26:	4a88      	ldr	r2, [pc, #544]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cc28:	6813      	ldr	r3, [r2, #0]
 800cc2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc2e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800cc30:	f7fd fd56 	bl	800a6e0 <HAL_GetTick>
 800cc34:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cc36:	4b84      	ldr	r3, [pc, #528]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cc3e:	d0cb      	beq.n	800cbd8 <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800cc40:	f7fd fd4e 	bl	800a6e0 <HAL_GetTick>
 800cc44:	1b40      	subs	r0, r0, r5
 800cc46:	2802      	cmp	r0, #2
 800cc48:	d9f5      	bls.n	800cc36 <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 800cc4a:	2003      	movs	r0, #3
 800cc4c:	e190      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc4e:	4a7e      	ldr	r2, [pc, #504]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cc50:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800cc52:	f023 0301 	bic.w	r3, r3, #1
 800cc56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc58:	f7fd fd42 	bl	800a6e0 <HAL_GetTick>
 800cc5c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cc5e:	4b7a      	ldr	r3, [pc, #488]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc62:	f013 0f02 	tst.w	r3, #2
 800cc66:	d006      	beq.n	800cc76 <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc68:	f7fd fd3a 	bl	800a6e0 <HAL_GetTick>
 800cc6c:	1b40      	subs	r0, r0, r5
 800cc6e:	2802      	cmp	r0, #2
 800cc70:	d9f5      	bls.n	800cc5e <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 800cc72:	2003      	movs	r0, #3
 800cc74:	e17c      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cc76:	6823      	ldr	r3, [r4, #0]
 800cc78:	f013 0f20 	tst.w	r3, #32
 800cc7c:	d029      	beq.n	800ccd2 <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800cc7e:	69a3      	ldr	r3, [r4, #24]
 800cc80:	b19b      	cbz	r3, 800ccaa <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cc82:	4a71      	ldr	r2, [pc, #452]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cc84:	6813      	ldr	r3, [r2, #0]
 800cc86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cc8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc8c:	f7fd fd28 	bl	800a6e0 <HAL_GetTick>
 800cc90:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cc92:	4b6d      	ldr	r3, [pc, #436]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800cc9a:	d11a      	bne.n	800ccd2 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800cc9c:	f7fd fd20 	bl	800a6e0 <HAL_GetTick>
 800cca0:	1b40      	subs	r0, r0, r5
 800cca2:	2802      	cmp	r0, #2
 800cca4:	d9f5      	bls.n	800cc92 <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 800cca6:	2003      	movs	r0, #3
 800cca8:	e162      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ccaa:	4a67      	ldr	r2, [pc, #412]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800ccac:	6813      	ldr	r3, [r2, #0]
 800ccae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ccb4:	f7fd fd14 	bl	800a6e0 <HAL_GetTick>
 800ccb8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ccba:	4b63      	ldr	r3, [pc, #396]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800ccc2:	d006      	beq.n	800ccd2 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ccc4:	f7fd fd0c 	bl	800a6e0 <HAL_GetTick>
 800ccc8:	1b40      	subs	r0, r0, r5
 800ccca:	2802      	cmp	r0, #2
 800cccc:	d9f5      	bls.n	800ccba <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 800ccce:	2003      	movs	r0, #3
 800ccd0:	e14e      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	f013 0f04 	tst.w	r3, #4
 800ccd8:	d122      	bne.n	800cd20 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ccda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f000 8146 	beq.w	800cf6e <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cce2:	4a59      	ldr	r2, [pc, #356]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cce4:	6912      	ldr	r2, [r2, #16]
 800cce6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800ccea:	2a18      	cmp	r2, #24
 800ccec:	f000 810e 	beq.w	800cf0c <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	f000 8094 	beq.w	800ce1e <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ccf6:	4a54      	ldr	r2, [pc, #336]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800ccf8:	6813      	ldr	r3, [r2, #0]
 800ccfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ccfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd00:	f7fd fcee 	bl	800a6e0 <HAL_GetTick>
 800cd04:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cd06:	4b50      	ldr	r3, [pc, #320]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800cd0e:	f000 80fb 	beq.w	800cf08 <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd12:	f7fd fce5 	bl	800a6e0 <HAL_GetTick>
 800cd16:	1b00      	subs	r0, r0, r4
 800cd18:	2802      	cmp	r0, #2
 800cd1a:	d9f4      	bls.n	800cd06 <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 800cd1c:	2003      	movs	r0, #3
 800cd1e:	e127      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 800cd20:	4a4a      	ldr	r2, [pc, #296]	; (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cd22:	6813      	ldr	r3, [r2, #0]
 800cd24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd28:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800cd2a:	f7fd fcd9 	bl	800a6e0 <HAL_GetTick>
 800cd2e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd30:	4b46      	ldr	r3, [pc, #280]	; (800ce4c <HAL_RCC_OscConfig+0x4d4>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cd38:	d106      	bne.n	800cd48 <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cd3a:	f7fd fcd1 	bl	800a6e0 <HAL_GetTick>
 800cd3e:	1b40      	subs	r0, r0, r5
 800cd40:	2864      	cmp	r0, #100	; 0x64
 800cd42:	d9f5      	bls.n	800cd30 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 800cd44:	2003      	movs	r0, #3
 800cd46:	e113      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd48:	68a3      	ldr	r3, [r4, #8]
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d00e      	beq.n	800cd6c <HAL_RCC_OscConfig+0x3f4>
 800cd4e:	bb33      	cbnz	r3, 800cd9e <HAL_RCC_OscConfig+0x426>
 800cd50:	4b3d      	ldr	r3, [pc, #244]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cd52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd54:	f022 0201 	bic.w	r2, r2, #1
 800cd58:	671a      	str	r2, [r3, #112]	; 0x70
 800cd5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd60:	671a      	str	r2, [r3, #112]	; 0x70
 800cd62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd64:	f022 0204 	bic.w	r2, r2, #4
 800cd68:	671a      	str	r2, [r3, #112]	; 0x70
 800cd6a:	e004      	b.n	800cd76 <HAL_RCC_OscConfig+0x3fe>
 800cd6c:	4a36      	ldr	r2, [pc, #216]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cd6e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800cd70:	f043 0301 	orr.w	r3, r3, #1
 800cd74:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cd76:	68a3      	ldr	r3, [r4, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d03e      	beq.n	800cdfa <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 800cd7c:	f7fd fcb0 	bl	800a6e0 <HAL_GetTick>
 800cd80:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd82:	4b31      	ldr	r3, [pc, #196]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cd84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd86:	f013 0f02 	tst.w	r3, #2
 800cd8a:	d1a6      	bne.n	800ccda <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd8c:	f7fd fca8 	bl	800a6e0 <HAL_GetTick>
 800cd90:	1b40      	subs	r0, r0, r5
 800cd92:	f241 3388 	movw	r3, #5000	; 0x1388
 800cd96:	4298      	cmp	r0, r3
 800cd98:	d9f3      	bls.n	800cd82 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 800cd9a:	2003      	movs	r0, #3
 800cd9c:	e0e8      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd9e:	2b05      	cmp	r3, #5
 800cda0:	d00f      	beq.n	800cdc2 <HAL_RCC_OscConfig+0x44a>
 800cda2:	2b85      	cmp	r3, #133	; 0x85
 800cda4:	d01b      	beq.n	800cdde <HAL_RCC_OscConfig+0x466>
 800cda6:	4b28      	ldr	r3, [pc, #160]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cda8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cdaa:	f022 0201 	bic.w	r2, r2, #1
 800cdae:	671a      	str	r2, [r3, #112]	; 0x70
 800cdb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cdb2:	f022 0204 	bic.w	r2, r2, #4
 800cdb6:	671a      	str	r2, [r3, #112]	; 0x70
 800cdb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cdba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdbe:	671a      	str	r2, [r3, #112]	; 0x70
 800cdc0:	e7d9      	b.n	800cd76 <HAL_RCC_OscConfig+0x3fe>
 800cdc2:	4b21      	ldr	r3, [pc, #132]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cdc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cdc6:	f042 0204 	orr.w	r2, r2, #4
 800cdca:	671a      	str	r2, [r3, #112]	; 0x70
 800cdcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cdce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdd2:	671a      	str	r2, [r3, #112]	; 0x70
 800cdd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cdd6:	f042 0201 	orr.w	r2, r2, #1
 800cdda:	671a      	str	r2, [r3, #112]	; 0x70
 800cddc:	e7cb      	b.n	800cd76 <HAL_RCC_OscConfig+0x3fe>
 800cdde:	4b1a      	ldr	r3, [pc, #104]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800cde0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cde2:	f042 0204 	orr.w	r2, r2, #4
 800cde6:	671a      	str	r2, [r3, #112]	; 0x70
 800cde8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cdea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cdee:	671a      	str	r2, [r3, #112]	; 0x70
 800cdf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cdf2:	f042 0201 	orr.w	r2, r2, #1
 800cdf6:	671a      	str	r2, [r3, #112]	; 0x70
 800cdf8:	e7bd      	b.n	800cd76 <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 800cdfa:	f7fd fc71 	bl	800a6e0 <HAL_GetTick>
 800cdfe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ce00:	4b11      	ldr	r3, [pc, #68]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800ce02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce04:	f013 0f02 	tst.w	r3, #2
 800ce08:	f43f af67 	beq.w	800ccda <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce0c:	f7fd fc68 	bl	800a6e0 <HAL_GetTick>
 800ce10:	1b40      	subs	r0, r0, r5
 800ce12:	f241 3388 	movw	r3, #5000	; 0x1388
 800ce16:	4298      	cmp	r0, r3
 800ce18:	d9f2      	bls.n	800ce00 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 800ce1a:	2003      	movs	r0, #3
 800ce1c:	e0a8      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 800ce1e:	4a0a      	ldr	r2, [pc, #40]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800ce20:	6813      	ldr	r3, [r2, #0]
 800ce22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce26:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ce28:	f7fd fc5a 	bl	800a6e0 <HAL_GetTick>
 800ce2c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ce2e:	4b06      	ldr	r3, [pc, #24]	; (800ce48 <HAL_RCC_OscConfig+0x4d0>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ce36:	d00b      	beq.n	800ce50 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce38:	f7fd fc52 	bl	800a6e0 <HAL_GetTick>
 800ce3c:	1b40      	subs	r0, r0, r5
 800ce3e:	2802      	cmp	r0, #2
 800ce40:	d9f5      	bls.n	800ce2e <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 800ce42:	2003      	movs	r0, #3
 800ce44:	e094      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
 800ce46:	bf00      	nop
 800ce48:	58024400 	.word	0x58024400
 800ce4c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce50:	4b4f      	ldr	r3, [pc, #316]	; (800cf90 <HAL_RCC_OscConfig+0x618>)
 800ce52:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800ce54:	4a4f      	ldr	r2, [pc, #316]	; (800cf94 <HAL_RCC_OscConfig+0x61c>)
 800ce56:	400a      	ands	r2, r1
 800ce58:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ce5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ce5c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800ce60:	430a      	orrs	r2, r1
 800ce62:	629a      	str	r2, [r3, #40]	; 0x28
 800ce64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ce66:	3a01      	subs	r2, #1
 800ce68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce6e:	3901      	subs	r1, #1
 800ce70:	0249      	lsls	r1, r1, #9
 800ce72:	b289      	uxth	r1, r1
 800ce74:	430a      	orrs	r2, r1
 800ce76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ce78:	3901      	subs	r1, #1
 800ce7a:	0409      	lsls	r1, r1, #16
 800ce7c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800ce80:	430a      	orrs	r2, r1
 800ce82:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ce84:	3901      	subs	r1, #1
 800ce86:	0609      	lsls	r1, r1, #24
 800ce88:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800ce8c:	430a      	orrs	r2, r1
 800ce8e:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800ce90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce92:	f022 0201 	bic.w	r2, r2, #1
 800ce96:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ce98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ce9a:	4a3f      	ldr	r2, [pc, #252]	; (800cf98 <HAL_RCC_OscConfig+0x620>)
 800ce9c:	400a      	ands	r2, r1
 800ce9e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cea0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800cea4:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea8:	f022 020c 	bic.w	r2, r2, #12
 800ceac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ceae:	430a      	orrs	r2, r1
 800ceb0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ceb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb4:	f022 0202 	bic.w	r2, r2, #2
 800ceb8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ceba:	430a      	orrs	r2, r1
 800cebc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cec4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cecc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ced4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800ced6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced8:	f042 0201 	orr.w	r2, r2, #1
 800cedc:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cee4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800cee6:	f7fd fbfb 	bl	800a6e0 <HAL_GetTick>
 800ceea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ceec:	4b28      	ldr	r3, [pc, #160]	; (800cf90 <HAL_RCC_OscConfig+0x618>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800cef4:	d106      	bne.n	800cf04 <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cef6:	f7fd fbf3 	bl	800a6e0 <HAL_GetTick>
 800cefa:	1b00      	subs	r0, r0, r4
 800cefc:	2802      	cmp	r0, #2
 800cefe:	d9f5      	bls.n	800ceec <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 800cf00:	2003      	movs	r0, #3
 800cf02:	e035      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800cf04:	2000      	movs	r0, #0
 800cf06:	e033      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
 800cf08:	2000      	movs	r0, #0
 800cf0a:	e031      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800cf0c:	4920      	ldr	r1, [pc, #128]	; (800cf90 <HAL_RCC_OscConfig+0x618>)
 800cf0e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cf10:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d02d      	beq.n	800cf72 <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf16:	f002 0303 	and.w	r3, r2, #3
 800cf1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cf1c:	428b      	cmp	r3, r1
 800cf1e:	d12a      	bne.n	800cf76 <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf20:	f3c2 1205 	ubfx	r2, r2, #4, #6
 800cf24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d127      	bne.n	800cf7a <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf2a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800cf2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cf30:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d123      	bne.n	800cf7e <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cf36:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800cf3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf3c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d11f      	bne.n	800cf82 <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cf42:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800cf46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cf48:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d11b      	bne.n	800cf86 <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cf4e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800cf52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cf54:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cf56:	4298      	cmp	r0, r3
 800cf58:	d117      	bne.n	800cf8a <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 800cf5a:	2000      	movs	r0, #0
 800cf5c:	e008      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 800cf5e:	2001      	movs	r0, #1
}
 800cf60:	4770      	bx	lr
        return HAL_ERROR;
 800cf62:	2001      	movs	r0, #1
 800cf64:	e004      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800cf66:	2001      	movs	r0, #1
 800cf68:	e002      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800cf6a:	2001      	movs	r0, #1
 800cf6c:	e000      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 800cf6e:	2000      	movs	r0, #0
}
 800cf70:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800cf72:	2001      	movs	r0, #1
 800cf74:	e7fc      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
 800cf76:	2001      	movs	r0, #1
 800cf78:	e7fa      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
 800cf7a:	2001      	movs	r0, #1
 800cf7c:	e7f8      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
 800cf7e:	2001      	movs	r0, #1
 800cf80:	e7f6      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
 800cf82:	2001      	movs	r0, #1
 800cf84:	e7f4      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
 800cf86:	2001      	movs	r0, #1
 800cf88:	e7f2      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
 800cf8a:	2001      	movs	r0, #1
 800cf8c:	e7f0      	b.n	800cf70 <HAL_RCC_OscConfig+0x5f8>
 800cf8e:	bf00      	nop
 800cf90:	58024400 	.word	0x58024400
 800cf94:	fffffc0c 	.word	0xfffffc0c
 800cf98:	ffff0007 	.word	0xffff0007

0800cf9c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cf9c:	4b74      	ldr	r3, [pc, #464]	; (800d170 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cfa4:	2b10      	cmp	r3, #16
 800cfa6:	f000 80de 	beq.w	800d166 <HAL_RCC_GetSysClockFreq+0x1ca>
 800cfaa:	2b18      	cmp	r3, #24
 800cfac:	d010      	beq.n	800cfd0 <HAL_RCC_GetSysClockFreq+0x34>
 800cfae:	b10b      	cbz	r3, 800cfb4 <HAL_RCC_GetSysClockFreq+0x18>
 800cfb0:	4870      	ldr	r0, [pc, #448]	; (800d174 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800cfb2:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfb4:	4b6e      	ldr	r3, [pc, #440]	; (800d170 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f013 0f20 	tst.w	r3, #32
 800cfbc:	f000 80d5 	beq.w	800d16a <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cfc0:	4b6b      	ldr	r3, [pc, #428]	; (800d170 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cfc2:	6818      	ldr	r0, [r3, #0]
 800cfc4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800cfc8:	4b6b      	ldr	r3, [pc, #428]	; (800d178 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800cfca:	fa23 f000 	lsr.w	r0, r3, r0
 800cfce:	4770      	bx	lr
{
 800cfd0:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfd2:	4a67      	ldr	r2, [pc, #412]	; (800d170 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cfd4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800cfd6:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800cfda:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800cfdc:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cfe0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cfe2:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800cfe6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800cfe8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800cfec:	fb0c f303 	mul.w	r3, ip, r3
 800cff0:	ee07 3a90 	vmov	s15, r3
 800cff4:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 800cff8:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800cffc:	f000 8093 	beq.w	800d126 <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 800d000:	2901      	cmp	r1, #1
 800d002:	d065      	beq.n	800d0d0 <HAL_RCC_GetSysClockFreq+0x134>
 800d004:	2902      	cmp	r1, #2
 800d006:	f000 8091 	beq.w	800d12c <HAL_RCC_GetSysClockFreq+0x190>
 800d00a:	b1e1      	cbz	r1, 800d046 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d00c:	ee07 0a10 	vmov	s14, r0
 800d010:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d014:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800d17c <HAL_RCC_GetSysClockFreq+0x1e0>
 800d018:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d01c:	4b54      	ldr	r3, [pc, #336]	; (800d170 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800d01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d024:	ee06 3a90 	vmov	s13, r3
 800d028:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d02c:	ed9f 6a54 	vldr	s12, [pc, #336]	; 800d180 <HAL_RCC_GetSysClockFreq+0x1e4>
 800d030:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d03c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d040:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800d044:	e060      	b.n	800d108 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d046:	6813      	ldr	r3, [r2, #0]
 800d048:	f013 0f20 	tst.w	r3, #32
 800d04c:	d023      	beq.n	800d096 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d04e:	4611      	mov	r1, r2
 800d050:	6812      	ldr	r2, [r2, #0]
 800d052:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800d056:	4b48      	ldr	r3, [pc, #288]	; (800d178 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800d058:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d05a:	ee07 3a10 	vmov	s14, r3
 800d05e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d062:	ee07 0a10 	vmov	s14, r0
 800d066:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800d06a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800d06e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800d070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d074:	ee06 3a90 	vmov	s13, r3
 800d078:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d07c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800d180 <HAL_RCC_GetSysClockFreq+0x1e4>
 800d080:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d08c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d090:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d094:	e038      	b.n	800d108 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d096:	ee07 0a10 	vmov	s14, r0
 800d09a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d09e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800d184 <HAL_RCC_GetSysClockFreq+0x1e8>
 800d0a2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d0a6:	4b32      	ldr	r3, [pc, #200]	; (800d170 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800d0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ae:	ee06 3a90 	vmov	s13, r3
 800d0b2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d0b6:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800d180 <HAL_RCC_GetSysClockFreq+0x1e4>
 800d0ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0ce:	e01b      	b.n	800d108 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d0d0:	ee07 0a10 	vmov	s14, r0
 800d0d4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d0d8:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800d17c <HAL_RCC_GetSysClockFreq+0x1e0>
 800d0dc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d0e0:	4b23      	ldr	r3, [pc, #140]	; (800d170 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800d0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e8:	ee06 3a90 	vmov	s13, r3
 800d0ec:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d0f0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800d180 <HAL_RCC_GetSysClockFreq+0x1e4>
 800d0f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d0f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d104:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800d108:	4b19      	ldr	r3, [pc, #100]	; (800d170 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800d10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d10c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d110:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800d112:	ee07 3a90 	vmov	s15, r3
 800d116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d11a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d11e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800d122:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800d126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d12a:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d12c:	ee07 0a10 	vmov	s14, r0
 800d130:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d134:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800d188 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d138:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d13c:	4b0c      	ldr	r3, [pc, #48]	; (800d170 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800d13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d144:	ee06 3a90 	vmov	s13, r3
 800d148:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d14c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800d180 <HAL_RCC_GetSysClockFreq+0x1e4>
 800d150:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d15c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d160:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800d164:	e7d0      	b.n	800d108 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800d166:	4809      	ldr	r0, [pc, #36]	; (800d18c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d168:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d16a:	4803      	ldr	r0, [pc, #12]	; (800d178 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop
 800d170:	58024400 	.word	0x58024400
 800d174:	003d0900 	.word	0x003d0900
 800d178:	03d09000 	.word	0x03d09000
 800d17c:	4a742400 	.word	0x4a742400
 800d180:	39000000 	.word	0x39000000
 800d184:	4c742400 	.word	0x4c742400
 800d188:	4bb71b00 	.word	0x4bb71b00
 800d18c:	016e3600 	.word	0x016e3600

0800d190 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800d190:	2800      	cmp	r0, #0
 800d192:	f000 8132 	beq.w	800d3fa <HAL_RCC_ClockConfig+0x26a>
{
 800d196:	b570      	push	{r4, r5, r6, lr}
 800d198:	460d      	mov	r5, r1
 800d19a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d19c:	4b9b      	ldr	r3, [pc, #620]	; (800d40c <HAL_RCC_ClockConfig+0x27c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 030f 	and.w	r3, r3, #15
 800d1a4:	428b      	cmp	r3, r1
 800d1a6:	d20b      	bcs.n	800d1c0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1a8:	4a98      	ldr	r2, [pc, #608]	; (800d40c <HAL_RCC_ClockConfig+0x27c>)
 800d1aa:	6813      	ldr	r3, [r2, #0]
 800d1ac:	f023 030f 	bic.w	r3, r3, #15
 800d1b0:	430b      	orrs	r3, r1
 800d1b2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1b4:	6813      	ldr	r3, [r2, #0]
 800d1b6:	f003 030f 	and.w	r3, r3, #15
 800d1ba:	428b      	cmp	r3, r1
 800d1bc:	f040 811f 	bne.w	800d3fe <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d1c0:	6823      	ldr	r3, [r4, #0]
 800d1c2:	f013 0f04 	tst.w	r3, #4
 800d1c6:	d00c      	beq.n	800d1e2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800d1c8:	6922      	ldr	r2, [r4, #16]
 800d1ca:	4b91      	ldr	r3, [pc, #580]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d905      	bls.n	800d1e2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d1d6:	498e      	ldr	r1, [pc, #568]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d1d8:	698b      	ldr	r3, [r1, #24]
 800d1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1de:	431a      	orrs	r2, r3
 800d1e0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	f013 0f08 	tst.w	r3, #8
 800d1e8:	d00c      	beq.n	800d204 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800d1ea:	6962      	ldr	r2, [r4, #20]
 800d1ec:	4b88      	ldr	r3, [pc, #544]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d1ee:	69db      	ldr	r3, [r3, #28]
 800d1f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d905      	bls.n	800d204 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d1f8:	4985      	ldr	r1, [pc, #532]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d1fa:	69cb      	ldr	r3, [r1, #28]
 800d1fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d200:	431a      	orrs	r2, r3
 800d202:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d204:	6823      	ldr	r3, [r4, #0]
 800d206:	f013 0f10 	tst.w	r3, #16
 800d20a:	d00c      	beq.n	800d226 <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800d20c:	69a2      	ldr	r2, [r4, #24]
 800d20e:	4b80      	ldr	r3, [pc, #512]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d210:	69db      	ldr	r3, [r3, #28]
 800d212:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d216:	429a      	cmp	r2, r3
 800d218:	d905      	bls.n	800d226 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d21a:	497d      	ldr	r1, [pc, #500]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d21c:	69cb      	ldr	r3, [r1, #28]
 800d21e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d222:	431a      	orrs	r2, r3
 800d224:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	f013 0f20 	tst.w	r3, #32
 800d22c:	d00c      	beq.n	800d248 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800d22e:	69e2      	ldr	r2, [r4, #28]
 800d230:	4b77      	ldr	r3, [pc, #476]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d232:	6a1b      	ldr	r3, [r3, #32]
 800d234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d238:	429a      	cmp	r2, r3
 800d23a:	d905      	bls.n	800d248 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d23c:	4974      	ldr	r1, [pc, #464]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d23e:	6a0b      	ldr	r3, [r1, #32]
 800d240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d244:	431a      	orrs	r2, r3
 800d246:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	f013 0f02 	tst.w	r3, #2
 800d24e:	d00c      	beq.n	800d26a <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800d250:	68e2      	ldr	r2, [r4, #12]
 800d252:	4b6f      	ldr	r3, [pc, #444]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d254:	699b      	ldr	r3, [r3, #24]
 800d256:	f003 030f 	and.w	r3, r3, #15
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d905      	bls.n	800d26a <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d25e:	496c      	ldr	r1, [pc, #432]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d260:	698b      	ldr	r3, [r1, #24]
 800d262:	f023 030f 	bic.w	r3, r3, #15
 800d266:	431a      	orrs	r2, r3
 800d268:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d26a:	6823      	ldr	r3, [r4, #0]
 800d26c:	f013 0f01 	tst.w	r3, #1
 800d270:	d041      	beq.n	800d2f6 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d272:	4a67      	ldr	r2, [pc, #412]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d274:	6993      	ldr	r3, [r2, #24]
 800d276:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d27a:	68a1      	ldr	r1, [r4, #8]
 800d27c:	430b      	orrs	r3, r1
 800d27e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d280:	6863      	ldr	r3, [r4, #4]
 800d282:	2b02      	cmp	r3, #2
 800d284:	d00a      	beq.n	800d29c <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d286:	2b03      	cmp	r3, #3
 800d288:	d027      	beq.n	800d2da <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d02c      	beq.n	800d2e8 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d28e:	4a60      	ldr	r2, [pc, #384]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d290:	6812      	ldr	r2, [r2, #0]
 800d292:	f012 0f04 	tst.w	r2, #4
 800d296:	d106      	bne.n	800d2a6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800d298:	2001      	movs	r0, #1
 800d29a:	e0ad      	b.n	800d3f8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d29c:	6812      	ldr	r2, [r2, #0]
 800d29e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800d2a2:	f000 80ae 	beq.w	800d402 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d2a6:	495a      	ldr	r1, [pc, #360]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d2a8:	690a      	ldr	r2, [r1, #16]
 800d2aa:	f022 0207 	bic.w	r2, r2, #7
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800d2b2:	f7fd fa15 	bl	800a6e0 <HAL_GetTick>
 800d2b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2b8:	4b55      	ldr	r3, [pc, #340]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d2c0:	6862      	ldr	r2, [r4, #4]
 800d2c2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800d2c6:	d016      	beq.n	800d2f6 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2c8:	f7fd fa0a 	bl	800a6e0 <HAL_GetTick>
 800d2cc:	1b80      	subs	r0, r0, r6
 800d2ce:	f241 3388 	movw	r3, #5000	; 0x1388
 800d2d2:	4298      	cmp	r0, r3
 800d2d4:	d9f0      	bls.n	800d2b8 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 800d2d6:	2003      	movs	r0, #3
 800d2d8:	e08e      	b.n	800d3f8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2da:	4a4d      	ldr	r2, [pc, #308]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d2dc:	6812      	ldr	r2, [r2, #0]
 800d2de:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800d2e2:	d1e0      	bne.n	800d2a6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800d2e4:	2001      	movs	r0, #1
 800d2e6:	e087      	b.n	800d3f8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d2e8:	4a49      	ldr	r2, [pc, #292]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d2ea:	6812      	ldr	r2, [r2, #0]
 800d2ec:	f412 7f80 	tst.w	r2, #256	; 0x100
 800d2f0:	d1d9      	bne.n	800d2a6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800d2f2:	2001      	movs	r0, #1
 800d2f4:	e080      	b.n	800d3f8 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	f013 0f02 	tst.w	r3, #2
 800d2fc:	d00c      	beq.n	800d318 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800d2fe:	68e2      	ldr	r2, [r4, #12]
 800d300:	4b43      	ldr	r3, [pc, #268]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	f003 030f 	and.w	r3, r3, #15
 800d308:	429a      	cmp	r2, r3
 800d30a:	d205      	bcs.n	800d318 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d30c:	4940      	ldr	r1, [pc, #256]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d30e:	698b      	ldr	r3, [r1, #24]
 800d310:	f023 030f 	bic.w	r3, r3, #15
 800d314:	431a      	orrs	r2, r3
 800d316:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d318:	4b3c      	ldr	r3, [pc, #240]	; (800d40c <HAL_RCC_ClockConfig+0x27c>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f003 030f 	and.w	r3, r3, #15
 800d320:	42ab      	cmp	r3, r5
 800d322:	d90a      	bls.n	800d33a <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d324:	4a39      	ldr	r2, [pc, #228]	; (800d40c <HAL_RCC_ClockConfig+0x27c>)
 800d326:	6813      	ldr	r3, [r2, #0]
 800d328:	f023 030f 	bic.w	r3, r3, #15
 800d32c:	432b      	orrs	r3, r5
 800d32e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d330:	6813      	ldr	r3, [r2, #0]
 800d332:	f003 030f 	and.w	r3, r3, #15
 800d336:	42ab      	cmp	r3, r5
 800d338:	d165      	bne.n	800d406 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d33a:	6823      	ldr	r3, [r4, #0]
 800d33c:	f013 0f04 	tst.w	r3, #4
 800d340:	d00c      	beq.n	800d35c <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800d342:	6922      	ldr	r2, [r4, #16]
 800d344:	4b32      	ldr	r3, [pc, #200]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d346:	699b      	ldr	r3, [r3, #24]
 800d348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d205      	bcs.n	800d35c <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d350:	492f      	ldr	r1, [pc, #188]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d352:	698b      	ldr	r3, [r1, #24]
 800d354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d358:	431a      	orrs	r2, r3
 800d35a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d35c:	6823      	ldr	r3, [r4, #0]
 800d35e:	f013 0f08 	tst.w	r3, #8
 800d362:	d00c      	beq.n	800d37e <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800d364:	6962      	ldr	r2, [r4, #20]
 800d366:	4b2a      	ldr	r3, [pc, #168]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d368:	69db      	ldr	r3, [r3, #28]
 800d36a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d36e:	429a      	cmp	r2, r3
 800d370:	d205      	bcs.n	800d37e <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d372:	4927      	ldr	r1, [pc, #156]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d374:	69cb      	ldr	r3, [r1, #28]
 800d376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d37a:	431a      	orrs	r2, r3
 800d37c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d37e:	6823      	ldr	r3, [r4, #0]
 800d380:	f013 0f10 	tst.w	r3, #16
 800d384:	d00c      	beq.n	800d3a0 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800d386:	69a2      	ldr	r2, [r4, #24]
 800d388:	4b21      	ldr	r3, [pc, #132]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d38a:	69db      	ldr	r3, [r3, #28]
 800d38c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d390:	429a      	cmp	r2, r3
 800d392:	d205      	bcs.n	800d3a0 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d394:	491e      	ldr	r1, [pc, #120]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d396:	69cb      	ldr	r3, [r1, #28]
 800d398:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d39c:	431a      	orrs	r2, r3
 800d39e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d3a0:	6823      	ldr	r3, [r4, #0]
 800d3a2:	f013 0f20 	tst.w	r3, #32
 800d3a6:	d00c      	beq.n	800d3c2 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800d3a8:	69e2      	ldr	r2, [r4, #28]
 800d3aa:	4b19      	ldr	r3, [pc, #100]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d3ac:	6a1b      	ldr	r3, [r3, #32]
 800d3ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d205      	bcs.n	800d3c2 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d3b6:	4916      	ldr	r1, [pc, #88]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d3b8:	6a0b      	ldr	r3, [r1, #32]
 800d3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3be:	431a      	orrs	r2, r3
 800d3c0:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800d3c2:	f7ff fdeb 	bl	800cf9c <HAL_RCC_GetSysClockFreq>
 800d3c6:	4912      	ldr	r1, [pc, #72]	; (800d410 <HAL_RCC_ClockConfig+0x280>)
 800d3c8:	698b      	ldr	r3, [r1, #24]
 800d3ca:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800d3ce:	4a11      	ldr	r2, [pc, #68]	; (800d414 <HAL_RCC_ClockConfig+0x284>)
 800d3d0:	5cd3      	ldrb	r3, [r2, r3]
 800d3d2:	f003 031f 	and.w	r3, r3, #31
 800d3d6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800d3d8:	698b      	ldr	r3, [r1, #24]
 800d3da:	f003 030f 	and.w	r3, r3, #15
 800d3de:	5cd3      	ldrb	r3, [r2, r3]
 800d3e0:	f003 031f 	and.w	r3, r3, #31
 800d3e4:	fa20 f303 	lsr.w	r3, r0, r3
 800d3e8:	4a0b      	ldr	r2, [pc, #44]	; (800d418 <HAL_RCC_ClockConfig+0x288>)
 800d3ea:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800d3ec:	4b0b      	ldr	r3, [pc, #44]	; (800d41c <HAL_RCC_ClockConfig+0x28c>)
 800d3ee:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800d3f0:	4b0b      	ldr	r3, [pc, #44]	; (800d420 <HAL_RCC_ClockConfig+0x290>)
 800d3f2:	6818      	ldr	r0, [r3, #0]
 800d3f4:	f7f5 ff2c 	bl	8003250 <HAL_InitTick>
}
 800d3f8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800d3fa:	2001      	movs	r0, #1
}
 800d3fc:	4770      	bx	lr
      return HAL_ERROR;
 800d3fe:	2001      	movs	r0, #1
 800d400:	e7fa      	b.n	800d3f8 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 800d402:	2001      	movs	r0, #1
 800d404:	e7f8      	b.n	800d3f8 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800d406:	2001      	movs	r0, #1
 800d408:	e7f6      	b.n	800d3f8 <HAL_RCC_ClockConfig+0x268>
 800d40a:	bf00      	nop
 800d40c:	52002000 	.word	0x52002000
 800d410:	58024400 	.word	0x58024400
 800d414:	080268a8 	.word	0x080268a8
 800d418:	24000074 	.word	0x24000074
 800d41c:	24000070 	.word	0x24000070
 800d420:	2400007c 	.word	0x2400007c

0800d424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d424:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800d426:	f7ff fdb9 	bl	800cf9c <HAL_RCC_GetSysClockFreq>
 800d42a:	4a0b      	ldr	r2, [pc, #44]	; (800d458 <HAL_RCC_GetHCLKFreq+0x34>)
 800d42c:	6993      	ldr	r3, [r2, #24]
 800d42e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800d432:	490a      	ldr	r1, [pc, #40]	; (800d45c <HAL_RCC_GetHCLKFreq+0x38>)
 800d434:	5ccb      	ldrb	r3, [r1, r3]
 800d436:	f003 031f 	and.w	r3, r3, #31
 800d43a:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800d43e:	6992      	ldr	r2, [r2, #24]
 800d440:	f002 020f 	and.w	r2, r2, #15
 800d444:	5c88      	ldrb	r0, [r1, r2]
 800d446:	f000 001f 	and.w	r0, r0, #31
 800d44a:	fa23 f000 	lsr.w	r0, r3, r0
 800d44e:	4a04      	ldr	r2, [pc, #16]	; (800d460 <HAL_RCC_GetHCLKFreq+0x3c>)
 800d450:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d452:	4a04      	ldr	r2, [pc, #16]	; (800d464 <HAL_RCC_GetHCLKFreq+0x40>)
 800d454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800d456:	bd08      	pop	{r3, pc}
 800d458:	58024400 	.word	0x58024400
 800d45c:	080268a8 	.word	0x080268a8
 800d460:	24000074 	.word	0x24000074
 800d464:	24000070 	.word	0x24000070

0800d468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d468:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800d46a:	f7ff ffdb 	bl	800d424 <HAL_RCC_GetHCLKFreq>
 800d46e:	4b05      	ldr	r3, [pc, #20]	; (800d484 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800d470:	69db      	ldr	r3, [r3, #28]
 800d472:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d476:	4a04      	ldr	r2, [pc, #16]	; (800d488 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d478:	5cd3      	ldrb	r3, [r2, r3]
 800d47a:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800d47e:	40d8      	lsrs	r0, r3
 800d480:	bd08      	pop	{r3, pc}
 800d482:	bf00      	nop
 800d484:	58024400 	.word	0x58024400
 800d488:	080268a8 	.word	0x080268a8

0800d48c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d48c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800d48e:	f7ff ffc9 	bl	800d424 <HAL_RCC_GetHCLKFreq>
 800d492:	4b05      	ldr	r3, [pc, #20]	; (800d4a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800d494:	69db      	ldr	r3, [r3, #28]
 800d496:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800d49a:	4a04      	ldr	r2, [pc, #16]	; (800d4ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800d49c:	5cd3      	ldrb	r3, [r2, r3]
 800d49e:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800d4a2:	40d8      	lsrs	r0, r3
 800d4a4:	bd08      	pop	{r3, pc}
 800d4a6:	bf00      	nop
 800d4a8:	58024400 	.word	0x58024400
 800d4ac:	080268a8 	.word	0x080268a8

0800d4b0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800d4b0:	233f      	movs	r3, #63	; 0x3f
 800d4b2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d4b4:	4b11      	ldr	r3, [pc, #68]	; (800d4fc <HAL_RCC_GetClockConfig+0x4c>)
 800d4b6:	691a      	ldr	r2, [r3, #16]
 800d4b8:	f002 0207 	and.w	r2, r2, #7
 800d4bc:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800d4be:	699a      	ldr	r2, [r3, #24]
 800d4c0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800d4c4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800d4c6:	699a      	ldr	r2, [r3, #24]
 800d4c8:	f002 020f 	and.w	r2, r2, #15
 800d4cc:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800d4ce:	699a      	ldr	r2, [r3, #24]
 800d4d0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d4d4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800d4d6:	69da      	ldr	r2, [r3, #28]
 800d4d8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d4dc:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800d4de:	69da      	ldr	r2, [r3, #28]
 800d4e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800d4e4:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800d4e6:	6a1b      	ldr	r3, [r3, #32]
 800d4e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d4ec:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d4ee:	4b04      	ldr	r3, [pc, #16]	; (800d500 <HAL_RCC_GetClockConfig+0x50>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f003 030f 	and.w	r3, r3, #15
 800d4f6:	600b      	str	r3, [r1, #0]
}
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	58024400 	.word	0x58024400
 800d500:	52002000 	.word	0x52002000

0800d504 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d504:	4b40      	ldr	r3, [pc, #256]	; (800d608 <RCCEx_PLL2_Config+0x104>)
 800d506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d508:	f003 0303 	and.w	r3, r3, #3
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d079      	beq.n	800d604 <RCCEx_PLL2_Config+0x100>
{
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	4605      	mov	r5, r0
 800d514:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d516:	4a3c      	ldr	r2, [pc, #240]	; (800d608 <RCCEx_PLL2_Config+0x104>)
 800d518:	6813      	ldr	r3, [r2, #0]
 800d51a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d51e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d520:	f7fd f8de 	bl	800a6e0 <HAL_GetTick>
 800d524:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d526:	4b38      	ldr	r3, [pc, #224]	; (800d608 <RCCEx_PLL2_Config+0x104>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800d52e:	d006      	beq.n	800d53e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d530:	f7fd f8d6 	bl	800a6e0 <HAL_GetTick>
 800d534:	1b03      	subs	r3, r0, r4
 800d536:	2b02      	cmp	r3, #2
 800d538:	d9f5      	bls.n	800d526 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800d53a:	2003      	movs	r0, #3

  }


  return status;
}
 800d53c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d53e:	4b32      	ldr	r3, [pc, #200]	; (800d608 <RCCEx_PLL2_Config+0x104>)
 800d540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d542:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800d546:	6829      	ldr	r1, [r5, #0]
 800d548:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800d54c:	629a      	str	r2, [r3, #40]	; 0x28
 800d54e:	686a      	ldr	r2, [r5, #4]
 800d550:	3a01      	subs	r2, #1
 800d552:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d556:	68a9      	ldr	r1, [r5, #8]
 800d558:	3901      	subs	r1, #1
 800d55a:	0249      	lsls	r1, r1, #9
 800d55c:	b289      	uxth	r1, r1
 800d55e:	430a      	orrs	r2, r1
 800d560:	68e9      	ldr	r1, [r5, #12]
 800d562:	3901      	subs	r1, #1
 800d564:	0409      	lsls	r1, r1, #16
 800d566:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800d56a:	430a      	orrs	r2, r1
 800d56c:	6929      	ldr	r1, [r5, #16]
 800d56e:	3901      	subs	r1, #1
 800d570:	0609      	lsls	r1, r1, #24
 800d572:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800d576:	430a      	orrs	r2, r1
 800d578:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d57c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d580:	6969      	ldr	r1, [r5, #20]
 800d582:	430a      	orrs	r2, r1
 800d584:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d588:	f022 0220 	bic.w	r2, r2, #32
 800d58c:	69a9      	ldr	r1, [r5, #24]
 800d58e:	430a      	orrs	r2, r1
 800d590:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d594:	f022 0210 	bic.w	r2, r2, #16
 800d598:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d59a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d59c:	4a1b      	ldr	r2, [pc, #108]	; (800d60c <RCCEx_PLL2_Config+0x108>)
 800d59e:	400a      	ands	r2, r1
 800d5a0:	69e9      	ldr	r1, [r5, #28]
 800d5a2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800d5a6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5aa:	f042 0210 	orr.w	r2, r2, #16
 800d5ae:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800d5b0:	b9c6      	cbnz	r6, 800d5e4 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800d5bc:	4a12      	ldr	r2, [pc, #72]	; (800d608 <RCCEx_PLL2_Config+0x104>)
 800d5be:	6813      	ldr	r3, [r2, #0]
 800d5c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d5c4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800d5c6:	f7fd f88b 	bl	800a6e0 <HAL_GetTick>
 800d5ca:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d5cc:	4b0e      	ldr	r3, [pc, #56]	; (800d608 <RCCEx_PLL2_Config+0x104>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800d5d4:	d114      	bne.n	800d600 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d5d6:	f7fd f883 	bl	800a6e0 <HAL_GetTick>
 800d5da:	1b00      	subs	r0, r0, r4
 800d5dc:	2802      	cmp	r0, #2
 800d5de:	d9f5      	bls.n	800d5cc <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 800d5e0:	2003      	movs	r0, #3
 800d5e2:	e7ab      	b.n	800d53c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800d5e4:	2e01      	cmp	r6, #1
 800d5e6:	d005      	beq.n	800d5f4 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d5e8:	4a07      	ldr	r2, [pc, #28]	; (800d608 <RCCEx_PLL2_Config+0x104>)
 800d5ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d5ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d5f2:	e7e3      	b.n	800d5bc <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d5f4:	4a04      	ldr	r2, [pc, #16]	; (800d608 <RCCEx_PLL2_Config+0x104>)
 800d5f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d5f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d5fe:	e7dd      	b.n	800d5bc <RCCEx_PLL2_Config+0xb8>
  return status;
 800d600:	2000      	movs	r0, #0
 800d602:	e79b      	b.n	800d53c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 800d604:	2001      	movs	r0, #1
}
 800d606:	4770      	bx	lr
 800d608:	58024400 	.word	0x58024400
 800d60c:	ffff0007 	.word	0xffff0007

0800d610 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d610:	4b40      	ldr	r3, [pc, #256]	; (800d714 <RCCEx_PLL3_Config+0x104>)
 800d612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d614:	f003 0303 	and.w	r3, r3, #3
 800d618:	2b03      	cmp	r3, #3
 800d61a:	d079      	beq.n	800d710 <RCCEx_PLL3_Config+0x100>
{
 800d61c:	b570      	push	{r4, r5, r6, lr}
 800d61e:	4605      	mov	r5, r0
 800d620:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d622:	4a3c      	ldr	r2, [pc, #240]	; (800d714 <RCCEx_PLL3_Config+0x104>)
 800d624:	6813      	ldr	r3, [r2, #0]
 800d626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d62a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d62c:	f7fd f858 	bl	800a6e0 <HAL_GetTick>
 800d630:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d632:	4b38      	ldr	r3, [pc, #224]	; (800d714 <RCCEx_PLL3_Config+0x104>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800d63a:	d006      	beq.n	800d64a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d63c:	f7fd f850 	bl	800a6e0 <HAL_GetTick>
 800d640:	1b03      	subs	r3, r0, r4
 800d642:	2b02      	cmp	r3, #2
 800d644:	d9f5      	bls.n	800d632 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800d646:	2003      	movs	r0, #3

  }


  return status;
}
 800d648:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d64a:	4b32      	ldr	r3, [pc, #200]	; (800d714 <RCCEx_PLL3_Config+0x104>)
 800d64c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d64e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800d652:	6829      	ldr	r1, [r5, #0]
 800d654:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800d658:	629a      	str	r2, [r3, #40]	; 0x28
 800d65a:	686a      	ldr	r2, [r5, #4]
 800d65c:	3a01      	subs	r2, #1
 800d65e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d662:	68a9      	ldr	r1, [r5, #8]
 800d664:	3901      	subs	r1, #1
 800d666:	0249      	lsls	r1, r1, #9
 800d668:	b289      	uxth	r1, r1
 800d66a:	430a      	orrs	r2, r1
 800d66c:	68e9      	ldr	r1, [r5, #12]
 800d66e:	3901      	subs	r1, #1
 800d670:	0409      	lsls	r1, r1, #16
 800d672:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800d676:	430a      	orrs	r2, r1
 800d678:	6929      	ldr	r1, [r5, #16]
 800d67a:	3901      	subs	r1, #1
 800d67c:	0609      	lsls	r1, r1, #24
 800d67e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800d682:	430a      	orrs	r2, r1
 800d684:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d688:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d68c:	6969      	ldr	r1, [r5, #20]
 800d68e:	430a      	orrs	r2, r1
 800d690:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d694:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d698:	69a9      	ldr	r1, [r5, #24]
 800d69a:	430a      	orrs	r2, r1
 800d69c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d6a4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d6a6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d6a8:	4a1b      	ldr	r2, [pc, #108]	; (800d718 <RCCEx_PLL3_Config+0x108>)
 800d6aa:	400a      	ands	r2, r1
 800d6ac:	69e9      	ldr	r1, [r5, #28]
 800d6ae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800d6b2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6ba:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800d6bc:	b9c6      	cbnz	r6, 800d6f0 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d6be:	461a      	mov	r2, r3
 800d6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d6c6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 800d6c8:	4a12      	ldr	r2, [pc, #72]	; (800d714 <RCCEx_PLL3_Config+0x104>)
 800d6ca:	6813      	ldr	r3, [r2, #0]
 800d6cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6d0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800d6d2:	f7fd f805 	bl	800a6e0 <HAL_GetTick>
 800d6d6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6d8:	4b0e      	ldr	r3, [pc, #56]	; (800d714 <RCCEx_PLL3_Config+0x104>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800d6e0:	d114      	bne.n	800d70c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d6e2:	f7fc fffd 	bl	800a6e0 <HAL_GetTick>
 800d6e6:	1b00      	subs	r0, r0, r4
 800d6e8:	2802      	cmp	r0, #2
 800d6ea:	d9f5      	bls.n	800d6d8 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800d6ec:	2003      	movs	r0, #3
 800d6ee:	e7ab      	b.n	800d648 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800d6f0:	2e01      	cmp	r6, #1
 800d6f2:	d005      	beq.n	800d700 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d6f4:	4a07      	ldr	r2, [pc, #28]	; (800d714 <RCCEx_PLL3_Config+0x104>)
 800d6f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d6f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d6fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d6fe:	e7e3      	b.n	800d6c8 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d700:	4a04      	ldr	r2, [pc, #16]	; (800d714 <RCCEx_PLL3_Config+0x104>)
 800d702:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d704:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d708:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d70a:	e7dd      	b.n	800d6c8 <RCCEx_PLL3_Config+0xb8>
  return status;
 800d70c:	2000      	movs	r0, #0
 800d70e:	e79b      	b.n	800d648 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 800d710:	2001      	movs	r0, #1
}
 800d712:	4770      	bx	lr
 800d714:	58024400 	.word	0x58024400
 800d718:	ffff0007 	.word	0xffff0007

0800d71c <HAL_RCCEx_PeriphCLKConfig>:
{
 800d71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d71e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d720:	6803      	ldr	r3, [r0, #0]
 800d722:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800d726:	d030      	beq.n	800d78a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800d728:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d72a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d72e:	d026      	beq.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d730:	d80e      	bhi.n	800d750 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800d732:	b1eb      	cbz	r3, 800d770 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d738:	d107      	bne.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d73a:	2102      	movs	r1, #2
 800d73c:	3004      	adds	r0, #4
 800d73e:	f7ff fee1 	bl	800d504 <RCCEx_PLL2_Config>
 800d742:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d744:	b145      	cbz	r5, 800d758 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800d746:	462e      	mov	r6, r5
 800d748:	e021      	b.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800d74a:	2601      	movs	r6, #1
 800d74c:	4635      	mov	r5, r6
 800d74e:	e01e      	b.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800d750:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d754:	d109      	bne.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800d756:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d758:	4a99      	ldr	r2, [pc, #612]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d75a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d75c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d760:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800d762:	430b      	orrs	r3, r1
 800d764:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d766:	2600      	movs	r6, #0
 800d768:	e011      	b.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800d76a:	2601      	movs	r6, #1
 800d76c:	4635      	mov	r5, r6
 800d76e:	e00e      	b.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d770:	4a93      	ldr	r2, [pc, #588]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d772:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d778:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d77a:	2500      	movs	r5, #0
 800d77c:	e7ec      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d77e:	2102      	movs	r1, #2
 800d780:	3024      	adds	r0, #36	; 0x24
 800d782:	f7ff ff45 	bl	800d610 <RCCEx_PLL3_Config>
 800d786:	4605      	mov	r5, r0
      break;
 800d788:	e7dc      	b.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d78a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d78c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d794:	d026      	beq.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800d796:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d798:	2b04      	cmp	r3, #4
 800d79a:	d81f      	bhi.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800d79c:	e8df f003 	tbb	[pc, r3]
 800d7a0:	08171103 	.word	0x08171103
 800d7a4:	08          	.byte	0x08
 800d7a5:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7a6:	4a86      	ldr	r2, [pc, #536]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d7a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d7aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800d7b0:	b9bd      	cbnz	r5, 800d7e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d7b2:	4a83      	ldr	r2, [pc, #524]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d7b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d7b6:	f023 0307 	bic.w	r3, r3, #7
 800d7ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d7bc:	430b      	orrs	r3, r1
 800d7be:	6513      	str	r3, [r2, #80]	; 0x50
 800d7c0:	e010      	b.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	1d20      	adds	r0, r4, #4
 800d7c6:	f7ff fe9d 	bl	800d504 <RCCEx_PLL2_Config>
 800d7ca:	4605      	mov	r5, r0
      break;
 800d7cc:	e7f0      	b.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d7d4:	f7ff ff1c 	bl	800d610 <RCCEx_PLL3_Config>
 800d7d8:	4605      	mov	r5, r0
      break;
 800d7da:	e7e9      	b.n	800d7b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 800d7dc:	2601      	movs	r6, #1
 800d7de:	4635      	mov	r5, r6
 800d7e0:	e000      	b.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800d7e2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800d7e4:	6823      	ldr	r3, [r4, #0]
 800d7e6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d7ea:	d01d      	beq.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 800d7ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7ee:	2b80      	cmp	r3, #128	; 0x80
 800d7f0:	d039      	beq.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800d7f2:	d80b      	bhi.n	800d80c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800d7f4:	b38b      	cbz	r3, 800d85a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800d7f6:	2b40      	cmp	r3, #64	; 0x40
 800d7f8:	d105      	bne.n	800d806 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	1d20      	adds	r0, r4, #4
 800d7fe:	f7ff fe81 	bl	800d504 <RCCEx_PLL2_Config>
 800d802:	4605      	mov	r5, r0
      break;
 800d804:	e008      	b.n	800d818 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 800d806:	2601      	movs	r6, #1
 800d808:	4635      	mov	r5, r6
 800d80a:	e00d      	b.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d80c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d810:	d002      	beq.n	800d818 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800d812:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d816:	d11b      	bne.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 800d818:	bb65      	cbnz	r5, 800d874 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800d81a:	4a69      	ldr	r2, [pc, #420]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d81c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d81e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800d822:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d824:	430b      	orrs	r3, r1
 800d826:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800d828:	6823      	ldr	r3, [r4, #0]
 800d82a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800d82e:	d035      	beq.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 800d830:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d836:	d057      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d838:	d821      	bhi.n	800d87e <HAL_RCCEx_PeriphCLKConfig+0x162>
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d04e      	beq.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800d83e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d842:	d119      	bne.n	800d878 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d844:	2100      	movs	r1, #0
 800d846:	1d20      	adds	r0, r4, #4
 800d848:	f7ff fe5c 	bl	800d504 <RCCEx_PLL2_Config>
 800d84c:	4605      	mov	r5, r0
      break;
 800d84e:	e01c      	b.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 800d850:	2bc0      	cmp	r3, #192	; 0xc0
 800d852:	d0e1      	beq.n	800d818 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800d854:	2601      	movs	r6, #1
 800d856:	4635      	mov	r5, r6
 800d858:	e7e6      	b.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d85a:	4a59      	ldr	r2, [pc, #356]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d85c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d85e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d862:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800d864:	e7d8      	b.n	800d818 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d866:	2100      	movs	r1, #0
 800d868:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d86c:	f7ff fed0 	bl	800d610 <RCCEx_PLL3_Config>
 800d870:	4605      	mov	r5, r0
      break;
 800d872:	e7d1      	b.n	800d818 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800d874:	462e      	mov	r6, r5
 800d876:	e7d7      	b.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 800d878:	2601      	movs	r6, #1
 800d87a:	4635      	mov	r5, r6
 800d87c:	e00e      	b.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800d87e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d882:	d002      	beq.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800d884:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d888:	d122      	bne.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 800d88a:	2d00      	cmp	r5, #0
 800d88c:	d133      	bne.n	800d8f6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800d88e:	4a4c      	ldr	r2, [pc, #304]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d890:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d892:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800d896:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d898:	430b      	orrs	r3, r1
 800d89a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d89c:	6823      	ldr	r3, [r4, #0]
 800d89e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800d8a2:	d031      	beq.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 800d8a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d8a6:	2b20      	cmp	r3, #32
 800d8a8:	d041      	beq.n	800d92e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800d8aa:	d829      	bhi.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800d8ac:	b133      	cbz	r3, 800d8bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800d8ae:	2b10      	cmp	r3, #16
 800d8b0:	d123      	bne.n	800d8fa <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8b2:	4a43      	ldr	r2, [pc, #268]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d8b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d8b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800d8bc:	2d00      	cmp	r5, #0
 800d8be:	d13c      	bne.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800d8c0:	4a3f      	ldr	r2, [pc, #252]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d8c2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d8c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d8c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d8ca:	430b      	orrs	r3, r1
 800d8cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d8ce:	e01b      	b.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 800d8d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d8d4:	d0d9      	beq.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800d8d6:	2601      	movs	r6, #1
 800d8d8:	4635      	mov	r5, r6
 800d8da:	e7df      	b.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8dc:	4a38      	ldr	r2, [pc, #224]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d8de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d8e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8e4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800d8e6:	e7d0      	b.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d8ee:	f7ff fe8f 	bl	800d610 <RCCEx_PLL3_Config>
 800d8f2:	4605      	mov	r5, r0
      break;
 800d8f4:	e7c9      	b.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800d8f6:	462e      	mov	r6, r5
 800d8f8:	e7d0      	b.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 800d8fa:	2601      	movs	r6, #1
 800d8fc:	4635      	mov	r5, r6
 800d8fe:	e003      	b.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800d900:	2b30      	cmp	r3, #48	; 0x30
 800d902:	d0db      	beq.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800d904:	2601      	movs	r6, #1
 800d906:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d908:	6823      	ldr	r3, [r4, #0]
 800d90a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800d90e:	d039      	beq.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 800d910:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d916:	d02d      	beq.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800d918:	d814      	bhi.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800d91a:	b32b      	cbz	r3, 800d968 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800d91c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d920:	d10d      	bne.n	800d93e <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d922:	2100      	movs	r1, #0
 800d924:	1d20      	adds	r0, r4, #4
 800d926:	f7ff fded 	bl	800d504 <RCCEx_PLL2_Config>
 800d92a:	4605      	mov	r5, r0
      break;
 800d92c:	e010      	b.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d92e:	2102      	movs	r1, #2
 800d930:	1d20      	adds	r0, r4, #4
 800d932:	f7ff fde7 	bl	800d504 <RCCEx_PLL2_Config>
 800d936:	4605      	mov	r5, r0
      break;
 800d938:	e7c0      	b.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800d93a:	462e      	mov	r6, r5
 800d93c:	e7e4      	b.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 800d93e:	2601      	movs	r6, #1
 800d940:	4635      	mov	r5, r6
 800d942:	e01f      	b.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800d944:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d948:	d002      	beq.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800d94a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d94e:	d108      	bne.n	800d962 <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 800d950:	b9bd      	cbnz	r5, 800d982 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d952:	4a1b      	ldr	r2, [pc, #108]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d954:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d95a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800d95c:	430b      	orrs	r3, r1
 800d95e:	6513      	str	r3, [r2, #80]	; 0x50
 800d960:	e010      	b.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 800d962:	2601      	movs	r6, #1
 800d964:	4635      	mov	r5, r6
 800d966:	e00d      	b.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d968:	4a15      	ldr	r2, [pc, #84]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d96a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d96c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d970:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800d972:	e7ed      	b.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d974:	2100      	movs	r1, #0
 800d976:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d97a:	f7ff fe49 	bl	800d610 <RCCEx_PLL3_Config>
 800d97e:	4605      	mov	r5, r0
      break;
 800d980:	e7e6      	b.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800d982:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d984:	6823      	ldr	r3, [r4, #0]
 800d986:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d98a:	d026      	beq.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 800d98c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d98e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d992:	d037      	beq.n	800da04 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800d994:	d816      	bhi.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d996:	b13b      	cbz	r3, 800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d99c:	d10d      	bne.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d99e:	2101      	movs	r1, #1
 800d9a0:	1d20      	adds	r0, r4, #4
 800d9a2:	f7ff fdaf 	bl	800d504 <RCCEx_PLL2_Config>
 800d9a6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d9a8:	bb9d      	cbnz	r5, 800da12 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d9aa:	4a05      	ldr	r2, [pc, #20]	; (800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d9ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d9ae:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800d9b2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d9b4:	430b      	orrs	r3, r1
 800d9b6:	6513      	str	r3, [r2, #80]	; 0x50
 800d9b8:	e00f      	b.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 800d9ba:	2601      	movs	r6, #1
 800d9bc:	4635      	mov	r5, r6
 800d9be:	e00c      	b.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800d9c0:	58024400 	.word	0x58024400
 800d9c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d9c8:	d0ee      	beq.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d9ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d9ce:	d0eb      	beq.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d9d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d9d4:	d0e8      	beq.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d9d6:	2601      	movs	r6, #1
 800d9d8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800d9e0:	d025      	beq.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800d9e2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800d9e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d9ea:	d04c      	beq.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800d9ec:	d816      	bhi.n	800da1c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d03c      	beq.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d9f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9f6:	d10e      	bne.n	800da16 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d9f8:	2101      	movs	r1, #1
 800d9fa:	1d20      	adds	r0, r4, #4
 800d9fc:	f7ff fd82 	bl	800d504 <RCCEx_PLL2_Config>
 800da00:	4605      	mov	r5, r0
      break;
 800da02:	e033      	b.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800da04:	2101      	movs	r1, #1
 800da06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800da0a:	f7ff fe01 	bl	800d610 <RCCEx_PLL3_Config>
 800da0e:	4605      	mov	r5, r0
      break;
 800da10:	e7ca      	b.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800da12:	462e      	mov	r6, r5
 800da14:	e7e1      	b.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 800da16:	2601      	movs	r6, #1
 800da18:	4635      	mov	r5, r6
 800da1a:	e008      	b.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0x312>
 800da1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800da20:	d024      	beq.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800da22:	d91d      	bls.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800da24:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800da28:	d020      	beq.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800da2a:	2601      	movs	r6, #1
 800da2c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800da34:	d009      	beq.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 800da36:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800da38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da3c:	d02c      	beq.n	800da98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800da3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da42:	d037      	beq.n	800dab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800da44:	b36b      	cbz	r3, 800daa2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800da46:	2601      	movs	r6, #1
 800da48:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800da50:	d045      	beq.n	800dade <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 800da52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800da54:	2b03      	cmp	r3, #3
 800da56:	d86d      	bhi.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800da58:	e8df f003 	tbb	[pc, r3]
 800da5c:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 800da60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800da64:	d002      	beq.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800da66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da6a:	d109      	bne.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 800da6c:	b995      	cbnz	r5, 800da94 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800da6e:	4a8c      	ldr	r2, [pc, #560]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800da70:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800da72:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800da76:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800da7a:	430b      	orrs	r3, r1
 800da7c:	6593      	str	r3, [r2, #88]	; 0x58
 800da7e:	e7d6      	b.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800da80:	2601      	movs	r6, #1
 800da82:	4635      	mov	r5, r6
 800da84:	e7d3      	b.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800da86:	2101      	movs	r1, #1
 800da88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800da8c:	f7ff fdc0 	bl	800d610 <RCCEx_PLL3_Config>
 800da90:	4605      	mov	r5, r0
      break;
 800da92:	e7eb      	b.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 800da94:	462e      	mov	r6, r5
 800da96:	e7ca      	b.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da98:	4a81      	ldr	r2, [pc, #516]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800da9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800da9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800daa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800daa2:	b96d      	cbnz	r5, 800dac0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800daa4:	4a7e      	ldr	r2, [pc, #504]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800daa6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800daa8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800daac:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800daae:	430b      	orrs	r3, r1
 800dab0:	6513      	str	r3, [r2, #80]	; 0x50
 800dab2:	e7ca      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dab4:	2101      	movs	r1, #1
 800dab6:	1d20      	adds	r0, r4, #4
 800dab8:	f7ff fd24 	bl	800d504 <RCCEx_PLL2_Config>
 800dabc:	4605      	mov	r5, r0
      break;
 800dabe:	e7f0      	b.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800dac0:	462e      	mov	r6, r5
 800dac2:	e7c2      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dac4:	4a76      	ldr	r2, [pc, #472]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dac6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800dac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dacc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800dace:	bba5      	cbnz	r5, 800db3a <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800dad0:	4a73      	ldr	r2, [pc, #460]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dad2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800dad4:	f023 0303 	bic.w	r3, r3, #3
 800dad8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800dada:	430b      	orrs	r3, r1
 800dadc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dade:	6823      	ldr	r3, [r4, #0]
 800dae0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800dae4:	d12b      	bne.n	800db3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800dae6:	6823      	ldr	r3, [r4, #0]
 800dae8:	f013 0f01 	tst.w	r3, #1
 800daec:	f000 80a3 	beq.w	800dc36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800daf0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800daf4:	2b28      	cmp	r3, #40	; 0x28
 800daf6:	f200 809c 	bhi.w	800dc32 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800dafa:	e8df f003 	tbb	[pc, r3]
 800dafe:	9a89      	.short	0x9a89
 800db00:	9a9a9a9a 	.word	0x9a9a9a9a
 800db04:	9a849a9a 	.word	0x9a849a9a
 800db08:	9a9a9a9a 	.word	0x9a9a9a9a
 800db0c:	9a939a9a 	.word	0x9a939a9a
 800db10:	9a9a9a9a 	.word	0x9a9a9a9a
 800db14:	9a899a9a 	.word	0x9a899a9a
 800db18:	9a9a9a9a 	.word	0x9a9a9a9a
 800db1c:	9a899a9a 	.word	0x9a899a9a
 800db20:	9a9a9a9a 	.word	0x9a9a9a9a
 800db24:	9a9a      	.short	0x9a9a
 800db26:	89          	.byte	0x89
 800db27:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800db28:	2102      	movs	r1, #2
 800db2a:	1d20      	adds	r0, r4, #4
 800db2c:	f7ff fcea 	bl	800d504 <RCCEx_PLL2_Config>
 800db30:	4605      	mov	r5, r0
      break;
 800db32:	e7cc      	b.n	800dace <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 800db34:	2601      	movs	r6, #1
 800db36:	4635      	mov	r5, r6
 800db38:	e7d1      	b.n	800dade <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800db3a:	462e      	mov	r6, r5
 800db3c:	e7cf      	b.n	800dade <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800db3e:	4a59      	ldr	r2, [pc, #356]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800db40:	6813      	ldr	r3, [r2, #0]
 800db42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db46:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800db48:	f7fc fdca 	bl	800a6e0 <HAL_GetTick>
 800db4c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800db4e:	4b55      	ldr	r3, [pc, #340]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f413 7f80 	tst.w	r3, #256	; 0x100
 800db56:	d105      	bne.n	800db64 <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800db58:	f7fc fdc2 	bl	800a6e0 <HAL_GetTick>
 800db5c:	1bc0      	subs	r0, r0, r7
 800db5e:	2864      	cmp	r0, #100	; 0x64
 800db60:	d9f5      	bls.n	800db4e <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 800db62:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 800db64:	2d00      	cmp	r5, #0
 800db66:	d14a      	bne.n	800dbfe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800db68:	4b4d      	ldr	r3, [pc, #308]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800db6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6c:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800db70:	4053      	eors	r3, r2
 800db72:	f413 7f40 	tst.w	r3, #768	; 0x300
 800db76:	d00c      	beq.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800db78:	4b49      	ldr	r3, [pc, #292]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800db7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800db7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800db80:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800db82:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800db86:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800db88:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800db8a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800db8e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800db90:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800db92:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800db96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db9a:	d015      	beq.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 800db9c:	bb8d      	cbnz	r5, 800dc02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800db9e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800dba2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800dba6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800dbaa:	d01e      	beq.n	800dbea <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800dbac:	4a3c      	ldr	r2, [pc, #240]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dbae:	6913      	ldr	r3, [r2, #16]
 800dbb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dbb4:	6113      	str	r3, [r2, #16]
 800dbb6:	493a      	ldr	r1, [pc, #232]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dbb8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800dbba:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800dbbe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	670b      	str	r3, [r1, #112]	; 0x70
 800dbc6:	e78e      	b.n	800dae6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 800dbc8:	f7fc fd8a 	bl	800a6e0 <HAL_GetTick>
 800dbcc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dbce:	4b34      	ldr	r3, [pc, #208]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dbd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbd2:	f013 0f02 	tst.w	r3, #2
 800dbd6:	d1e1      	bne.n	800db9c <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dbd8:	f7fc fd82 	bl	800a6e0 <HAL_GetTick>
 800dbdc:	1bc0      	subs	r0, r0, r7
 800dbde:	f241 3388 	movw	r3, #5000	; 0x1388
 800dbe2:	4298      	cmp	r0, r3
 800dbe4:	d9f3      	bls.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 800dbe6:	2503      	movs	r5, #3
 800dbe8:	e7d8      	b.n	800db9c <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dbea:	482d      	ldr	r0, [pc, #180]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dbec:	6902      	ldr	r2, [r0, #16]
 800dbee:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800dbf2:	492d      	ldr	r1, [pc, #180]	; (800dca8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800dbf4:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	6103      	str	r3, [r0, #16]
 800dbfc:	e7db      	b.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 800dbfe:	462e      	mov	r6, r5
 800dc00:	e771      	b.n	800dae6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 800dc02:	462e      	mov	r6, r5
 800dc04:	e76f      	b.n	800dae6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dc06:	2101      	movs	r1, #1
 800dc08:	1d20      	adds	r0, r4, #4
 800dc0a:	f7ff fc7b 	bl	800d504 <RCCEx_PLL2_Config>
 800dc0e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dc10:	b9ed      	cbnz	r5, 800dc4e <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800dc12:	4a23      	ldr	r2, [pc, #140]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dc14:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dc16:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800dc1a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800dc1e:	430b      	orrs	r3, r1
 800dc20:	6553      	str	r3, [r2, #84]	; 0x54
 800dc22:	e008      	b.n	800dc36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dc24:	2101      	movs	r1, #1
 800dc26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dc2a:	f7ff fcf1 	bl	800d610 <RCCEx_PLL3_Config>
 800dc2e:	4605      	mov	r5, r0
      break;
 800dc30:	e7ee      	b.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 800dc32:	2601      	movs	r6, #1
 800dc34:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	f013 0f02 	tst.w	r3, #2
 800dc3c:	d016      	beq.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800dc3e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800dc40:	2b05      	cmp	r3, #5
 800dc42:	d827      	bhi.n	800dc94 <HAL_RCCEx_PeriphCLKConfig+0x578>
 800dc44:	e8df f003 	tbb	[pc, r3]
 800dc48:	0a1f050a 	.word	0x0a1f050a
 800dc4c:	0a0a      	.short	0x0a0a
 800dc4e:	462e      	mov	r6, r5
 800dc50:	e7f1      	b.n	800dc36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dc52:	2101      	movs	r1, #1
 800dc54:	1d20      	adds	r0, r4, #4
 800dc56:	f7ff fc55 	bl	800d504 <RCCEx_PLL2_Config>
 800dc5a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dc5c:	b9ed      	cbnz	r5, 800dc9a <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800dc5e:	4a10      	ldr	r2, [pc, #64]	; (800dca0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dc60:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dc62:	f023 0307 	bic.w	r3, r3, #7
 800dc66:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800dc68:	430b      	orrs	r3, r1
 800dc6a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	f013 0f04 	tst.w	r3, #4
 800dc72:	d029      	beq.n	800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800dc74:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800dc78:	2b05      	cmp	r3, #5
 800dc7a:	d84a      	bhi.n	800dd12 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800dc7c:	e8df f003 	tbb	[pc, r3]
 800dc80:	1b42161b 	.word	0x1b42161b
 800dc84:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dc86:	2101      	movs	r1, #1
 800dc88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dc8c:	f7ff fcc0 	bl	800d610 <RCCEx_PLL3_Config>
 800dc90:	4605      	mov	r5, r0
      break;
 800dc92:	e7e3      	b.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800dc94:	2601      	movs	r6, #1
 800dc96:	4635      	mov	r5, r6
 800dc98:	e7e8      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 800dc9a:	462e      	mov	r6, r5
 800dc9c:	e7e6      	b.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 800dc9e:	bf00      	nop
 800dca0:	58024400 	.word	0x58024400
 800dca4:	58024800 	.word	0x58024800
 800dca8:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dcac:	2101      	movs	r1, #1
 800dcae:	1d20      	adds	r0, r4, #4
 800dcb0:	f7ff fc28 	bl	800d504 <RCCEx_PLL2_Config>
 800dcb4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dcb6:	bb7d      	cbnz	r5, 800dd18 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dcb8:	4aa9      	ldr	r2, [pc, #676]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dcba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800dcbc:	f023 0307 	bic.w	r3, r3, #7
 800dcc0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800dcc4:	430b      	orrs	r3, r1
 800dcc6:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	f013 0f20 	tst.w	r3, #32
 800dcce:	d033      	beq.n	800dd38 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800dcd0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800dcd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcd8:	d04c      	beq.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800dcda:	d822      	bhi.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x606>
 800dcdc:	b13b      	cbz	r3, 800dcee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800dcde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dce2:	d11b      	bne.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dce4:	2100      	movs	r1, #0
 800dce6:	1d20      	adds	r0, r4, #4
 800dce8:	f7ff fc0c 	bl	800d504 <RCCEx_PLL2_Config>
 800dcec:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dcee:	2d00      	cmp	r5, #0
 800dcf0:	d147      	bne.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dcf2:	4a9b      	ldr	r2, [pc, #620]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dcf4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dcf6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800dcfa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800dcfe:	430b      	orrs	r3, r1
 800dd00:	6553      	str	r3, [r2, #84]	; 0x54
 800dd02:	e019      	b.n	800dd38 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dd04:	2101      	movs	r1, #1
 800dd06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dd0a:	f7ff fc81 	bl	800d610 <RCCEx_PLL3_Config>
 800dd0e:	4605      	mov	r5, r0
      break;
 800dd10:	e7d1      	b.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800dd12:	2601      	movs	r6, #1
 800dd14:	4635      	mov	r5, r6
 800dd16:	e7d7      	b.n	800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800dd18:	462e      	mov	r6, r5
 800dd1a:	e7d5      	b.n	800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800dd1c:	2601      	movs	r6, #1
 800dd1e:	4635      	mov	r5, r6
 800dd20:	e00a      	b.n	800dd38 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800dd22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd26:	d0e2      	beq.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800dd28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd2c:	d0df      	beq.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800dd2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dd32:	d0dc      	beq.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800dd34:	2601      	movs	r6, #1
 800dd36:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800dd38:	6823      	ldr	r3, [r4, #0]
 800dd3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800dd3e:	d030      	beq.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800dd40:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800dd44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd48:	d04b      	beq.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800dd4a:	d81f      	bhi.n	800dd8c <HAL_RCCEx_PeriphCLKConfig+0x670>
 800dd4c:	b13b      	cbz	r3, 800dd5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800dd4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd52:	d118      	bne.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dd54:	2100      	movs	r1, #0
 800dd56:	1d20      	adds	r0, r4, #4
 800dd58:	f7ff fbd4 	bl	800d504 <RCCEx_PLL2_Config>
 800dd5c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dd5e:	2d00      	cmp	r5, #0
 800dd60:	d146      	bne.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dd62:	4a7f      	ldr	r2, [pc, #508]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dd64:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800dd66:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800dd6a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800dd6e:	430b      	orrs	r3, r1
 800dd70:	6593      	str	r3, [r2, #88]	; 0x58
 800dd72:	e016      	b.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800dd74:	2102      	movs	r1, #2
 800dd76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dd7a:	f7ff fc49 	bl	800d610 <RCCEx_PLL3_Config>
 800dd7e:	4605      	mov	r5, r0
      break;
 800dd80:	e7b5      	b.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800dd82:	462e      	mov	r6, r5
 800dd84:	e7d8      	b.n	800dd38 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800dd86:	2601      	movs	r6, #1
 800dd88:	4635      	mov	r5, r6
 800dd8a:	e00a      	b.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x686>
 800dd8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd90:	d0e5      	beq.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800dd92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dd96:	d0e2      	beq.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800dd98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dd9c:	d0df      	beq.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800dd9e:	2601      	movs	r6, #1
 800dda0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800dda2:	6823      	ldr	r3, [r4, #0]
 800dda4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dda8:	d032      	beq.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ddaa:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800ddae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddb2:	f000 80a2 	beq.w	800defa <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800ddb6:	d820      	bhi.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800ddb8:	b13b      	cbz	r3, 800ddca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800ddba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddbe:	d119      	bne.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	1d20      	adds	r0, r4, #4
 800ddc4:	f7ff fb9e 	bl	800d504 <RCCEx_PLL2_Config>
 800ddc8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ddca:	2d00      	cmp	r5, #0
 800ddcc:	f040 809c 	bne.w	800df08 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ddd0:	4a63      	ldr	r2, [pc, #396]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ddd2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ddd4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800ddd8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800dddc:	430b      	orrs	r3, r1
 800ddde:	6593      	str	r3, [r2, #88]	; 0x58
 800dde0:	e016      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800dde2:	2102      	movs	r1, #2
 800dde4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dde8:	f7ff fc12 	bl	800d610 <RCCEx_PLL3_Config>
 800ddec:	4605      	mov	r5, r0
      break;
 800ddee:	e7b6      	b.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800ddf0:	462e      	mov	r6, r5
 800ddf2:	e7d6      	b.n	800dda2 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ddf4:	2601      	movs	r6, #1
 800ddf6:	4635      	mov	r5, r6
 800ddf8:	e00a      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800ddfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddfe:	d0e4      	beq.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800de00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800de04:	d0e1      	beq.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800de06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800de0a:	d0de      	beq.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800de0c:	2601      	movs	r6, #1
 800de0e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	f013 0f08 	tst.w	r3, #8
 800de16:	d00c      	beq.n	800de32 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800de18:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800de1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de20:	d074      	beq.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800de22:	4a4f      	ldr	r2, [pc, #316]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800de24:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800de26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800de2a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800de2e:	430b      	orrs	r3, r1
 800de30:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	f013 0f10 	tst.w	r3, #16
 800de38:	d00c      	beq.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800de3a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800de3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de42:	d06c      	beq.n	800df1e <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800de44:	4a46      	ldr	r2, [pc, #280]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800de46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800de48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de4c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800de50:	430b      	orrs	r3, r1
 800de52:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800de54:	6823      	ldr	r3, [r4, #0]
 800de56:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800de5a:	d00b      	beq.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 800de5c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800de60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de64:	d073      	beq.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800de66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de6a:	d066      	beq.n	800df3a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d05f      	beq.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800de70:	2601      	movs	r6, #1
 800de72:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800de74:	6823      	ldr	r3, [r4, #0]
 800de76:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800de7a:	d00c      	beq.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 800de7c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800de80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de84:	d07d      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x866>
 800de86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800de8a:	d070      	beq.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800de8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de90:	d068      	beq.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800de92:	2601      	movs	r6, #1
 800de94:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800de96:	6823      	ldr	r3, [r4, #0]
 800de98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800de9c:	d008      	beq.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 800de9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d077      	beq.n	800df94 <HAL_RCCEx_PeriphCLKConfig+0x878>
 800dea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dea8:	f000 8082 	beq.w	800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800deac:	2601      	movs	r6, #1
 800deae:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800deb0:	6823      	ldr	r3, [r4, #0]
 800deb2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800deb6:	f040 8083 	bne.w	800dfc0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800dec0:	f000 808b 	beq.w	800dfda <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 800dec4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800dec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800decc:	f000 80c9 	beq.w	800e062 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800ded0:	f240 8080 	bls.w	800dfd4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800ded4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ded8:	d003      	beq.n	800dee2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800deda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dede:	f040 80be 	bne.w	800e05e <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 800dee2:	2d00      	cmp	r5, #0
 800dee4:	f040 80c3 	bne.w	800e06e <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dee8:	4a1d      	ldr	r2, [pc, #116]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800deea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800deec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800def0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800def4:	430b      	orrs	r3, r1
 800def6:	6553      	str	r3, [r2, #84]	; 0x54
 800def8:	e06f      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800defa:	2102      	movs	r1, #2
 800defc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800df00:	f7ff fb86 	bl	800d610 <RCCEx_PLL3_Config>
 800df04:	4605      	mov	r5, r0
      break;
 800df06:	e760      	b.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800df08:	462e      	mov	r6, r5
 800df0a:	e781      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800df0c:	2102      	movs	r1, #2
 800df0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800df12:	f7ff fb7d 	bl	800d610 <RCCEx_PLL3_Config>
 800df16:	2800      	cmp	r0, #0
 800df18:	d083      	beq.n	800de22 <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 800df1a:	2601      	movs	r6, #1
 800df1c:	e781      	b.n	800de22 <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800df1e:	2102      	movs	r1, #2
 800df20:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800df24:	f7ff fb74 	bl	800d610 <RCCEx_PLL3_Config>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d08b      	beq.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 800df2c:	2601      	movs	r6, #1
 800df2e:	e789      	b.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800df30:	2100      	movs	r1, #0
 800df32:	1d20      	adds	r0, r4, #4
 800df34:	f7ff fae6 	bl	800d504 <RCCEx_PLL2_Config>
 800df38:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800df3a:	b97d      	cbnz	r5, 800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800df3c:	4a08      	ldr	r2, [pc, #32]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800df3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800df40:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800df44:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800df48:	430b      	orrs	r3, r1
 800df4a:	6593      	str	r3, [r2, #88]	; 0x58
 800df4c:	e792      	b.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800df4e:	2102      	movs	r1, #2
 800df50:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800df54:	f7ff fb5c 	bl	800d610 <RCCEx_PLL3_Config>
 800df58:	4605      	mov	r5, r0
      break;
 800df5a:	e7ee      	b.n	800df3a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800df5c:	462e      	mov	r6, r5
 800df5e:	e789      	b.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800df60:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df64:	4a47      	ldr	r2, [pc, #284]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800df66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800df68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800df6e:	b97d      	cbnz	r5, 800df90 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800df70:	4a44      	ldr	r2, [pc, #272]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800df72:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800df74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800df78:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800df7c:	430b      	orrs	r3, r1
 800df7e:	6553      	str	r3, [r2, #84]	; 0x54
 800df80:	e789      	b.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800df82:	2101      	movs	r1, #1
 800df84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800df88:	f7ff fb42 	bl	800d610 <RCCEx_PLL3_Config>
 800df8c:	4605      	mov	r5, r0
      break;
 800df8e:	e7ee      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800df90:	462e      	mov	r6, r5
 800df92:	e780      	b.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df94:	4a3b      	ldr	r2, [pc, #236]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800df96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800df98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800df9e:	b96d      	cbnz	r5, 800dfbc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dfa0:	4a38      	ldr	r2, [pc, #224]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dfa2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800dfa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dfa8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dfaa:	430b      	orrs	r3, r1
 800dfac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dfae:	e77f      	b.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800dfb0:	2102      	movs	r1, #2
 800dfb2:	1d20      	adds	r0, r4, #4
 800dfb4:	f7ff faa6 	bl	800d504 <RCCEx_PLL2_Config>
 800dfb8:	4605      	mov	r5, r0
      break;
 800dfba:	e7f0      	b.n	800df9e <HAL_RCCEx_PeriphCLKConfig+0x882>
 800dfbc:	462e      	mov	r6, r5
 800dfbe:	e777      	b.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800dfc0:	2102      	movs	r1, #2
 800dfc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dfc6:	f7ff fb23 	bl	800d610 <RCCEx_PLL3_Config>
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	f43f af75 	beq.w	800deba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 800dfd0:	2601      	movs	r6, #1
 800dfd2:	e772      	b.n	800deba <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d084      	beq.n	800dee2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800dfd8:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dfda:	6823      	ldr	r3, [r4, #0]
 800dfdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800dfe0:	d006      	beq.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dfe2:	4a28      	ldr	r2, [pc, #160]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dfe4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800dfe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfea:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800dfec:	430b      	orrs	r3, r1
 800dfee:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dff0:	6823      	ldr	r3, [r4, #0]
 800dff2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800dff6:	d006      	beq.n	800e006 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dff8:	4a22      	ldr	r2, [pc, #136]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dffa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800dffc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e000:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e002:	430b      	orrs	r3, r1
 800e004:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800e00c:	d006      	beq.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800e00e:	4a1d      	ldr	r2, [pc, #116]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800e010:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e012:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800e016:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800e018:	430b      	orrs	r3, r1
 800e01a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e022:	d009      	beq.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e024:	4b17      	ldr	r3, [pc, #92]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800e026:	691a      	ldr	r2, [r3, #16]
 800e028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e02c:	611a      	str	r2, [r3, #16]
 800e02e:	691a      	ldr	r2, [r3, #16]
 800e030:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800e034:	430a      	orrs	r2, r1
 800e036:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e038:	6823      	ldr	r3, [r4, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	db19      	blt.n	800e072 <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e03e:	6823      	ldr	r3, [r4, #0]
 800e040:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800e044:	d007      	beq.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e046:	4a0f      	ldr	r2, [pc, #60]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800e048:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e04a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800e04e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800e052:	430b      	orrs	r3, r1
 800e054:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800e056:	b106      	cbz	r6, 800e05a <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 800e058:	2601      	movs	r6, #1
}
 800e05a:	4630      	mov	r0, r6
 800e05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800e05e:	2601      	movs	r6, #1
 800e060:	e7bb      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e062:	4a08      	ldr	r2, [pc, #32]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800e064:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e06a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800e06c:	e739      	b.n	800dee2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800e06e:	462e      	mov	r6, r5
 800e070:	e7b3      	b.n	800dfda <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e072:	4a04      	ldr	r2, [pc, #16]	; (800e084 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800e074:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800e076:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800e07a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800e07c:	430b      	orrs	r3, r1
 800e07e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e080:	e7dd      	b.n	800e03e <HAL_RCCEx_PeriphCLKConfig+0x922>
 800e082:	bf00      	nop
 800e084:	58024400 	.word	0x58024400

0800e088 <SPI_RxISR_8BIT>:
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800e088:	6802      	ldr	r2, [r0, #0]
 800e08a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e08c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800e090:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800e092:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e094:	3301      	adds	r3, #1
 800e096:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800e098:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800e0a6:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	b923      	cbnz	r3, 800e0b8 <SPI_RxISR_8BIT+0x30>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800e0ae:	6802      	ldr	r2, [r0, #0]
 800e0b0:	6913      	ldr	r3, [r2, #16]
 800e0b2:	f023 0301 	bic.w	r3, r3, #1
 800e0b6:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e0b8:	4770      	bx	lr

0800e0ba <SPI_RxISR_16BIT>:
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e0ba:	6802      	ldr	r2, [r0, #0]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e0bc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e0be:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800e0c0:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0c2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e0c4:	3302      	adds	r3, #2
 800e0c6:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800e0c8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800e0d6:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	b923      	cbnz	r3, 800e0e8 <SPI_RxISR_16BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800e0de:	6802      	ldr	r2, [r0, #0]
 800e0e0:	6913      	ldr	r3, [r2, #16]
 800e0e2:	f023 0301 	bic.w	r3, r3, #1
 800e0e6:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e0e8:	4770      	bx	lr

0800e0ea <SPI_RxISR_32BIT>:
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800e0ea:	6802      	ldr	r2, [r0, #0]
 800e0ec:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e0ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e0f0:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800e0f2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e0f4:	3304      	adds	r3, #4
 800e0f6:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800e0f8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	3b01      	subs	r3, #1
 800e100:	b29b      	uxth	r3, r3
 800e102:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800e106:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	b923      	cbnz	r3, 800e118 <SPI_RxISR_32BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800e10e:	6802      	ldr	r2, [r0, #0]
 800e110:	6913      	ldr	r3, [r2, #16]
 800e112:	f023 0301 	bic.w	r3, r3, #1
 800e116:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e118:	4770      	bx	lr

0800e11a <SPI_TxISR_8BIT>:
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 800e11a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e11c:	6803      	ldr	r3, [r0, #0]
 800e11e:	7812      	ldrb	r2, [r2, #0]
 800e120:	f883 2020 	strb.w	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800e124:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e126:	3301      	adds	r3, #1
 800e128:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800e12a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e12e:	b29b      	uxth	r3, r3
 800e130:	3b01      	subs	r3, #1
 800e132:	b29b      	uxth	r3, r3
 800e134:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800e138:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	b923      	cbnz	r3, 800e14a <SPI_TxISR_8BIT+0x30>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800e140:	6802      	ldr	r2, [r0, #0]
 800e142:	6913      	ldr	r3, [r2, #16]
 800e144:	f023 0302 	bic.w	r3, r3, #2
 800e148:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e14a:	4770      	bx	lr

0800e14c <SPI_TxISR_16BIT>:
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e14c:	6803      	ldr	r3, [r0, #0]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e14e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e150:	8812      	ldrh	r2, [r2, #0]
 800e152:	841a      	strh	r2, [r3, #32]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800e154:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e156:	3302      	adds	r3, #2
 800e158:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800e15a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e15e:	b29b      	uxth	r3, r3
 800e160:	3b01      	subs	r3, #1
 800e162:	b29b      	uxth	r3, r3
 800e164:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800e168:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	b923      	cbnz	r3, 800e17a <SPI_TxISR_16BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800e170:	6802      	ldr	r2, [r0, #0]
 800e172:	6913      	ldr	r3, [r2, #16]
 800e174:	f023 0302 	bic.w	r3, r3, #2
 800e178:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e17a:	4770      	bx	lr

0800e17c <SPI_TxISR_32BIT>:
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e17c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e17e:	6803      	ldr	r3, [r0, #0]
 800e180:	6812      	ldr	r2, [r2, #0]
 800e182:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800e184:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e186:	3304      	adds	r3, #4
 800e188:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800e18a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e18e:	b29b      	uxth	r3, r3
 800e190:	3b01      	subs	r3, #1
 800e192:	b29b      	uxth	r3, r3
 800e194:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800e198:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	b923      	cbnz	r3, 800e1aa <SPI_TxISR_32BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800e1a0:	6802      	ldr	r2, [r0, #0]
 800e1a2:	6913      	ldr	r3, [r2, #16]
 800e1a4:	f023 0302 	bic.w	r3, r3, #2
 800e1a8:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e1aa:	4770      	bx	lr

0800e1ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e1ac:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800e1ae:	6802      	ldr	r2, [r0, #0]
 800e1b0:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e1b2:	6991      	ldr	r1, [r2, #24]
 800e1b4:	f041 0108 	orr.w	r1, r1, #8
 800e1b8:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e1ba:	6801      	ldr	r1, [r0, #0]
 800e1bc:	698a      	ldr	r2, [r1, #24]
 800e1be:	f042 0210 	orr.w	r2, r2, #16
 800e1c2:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1c4:	6801      	ldr	r1, [r0, #0]
 800e1c6:	680a      	ldr	r2, [r1, #0]
 800e1c8:	f022 0201 	bic.w	r2, r2, #1
 800e1cc:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e1ce:	6801      	ldr	r1, [r0, #0]
 800e1d0:	690c      	ldr	r4, [r1, #16]
 800e1d2:	4a29      	ldr	r2, [pc, #164]	; (800e278 <SPI_CloseTransfer+0xcc>)
 800e1d4:	4022      	ands	r2, r4
 800e1d6:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e1d8:	6801      	ldr	r1, [r0, #0]
 800e1da:	688a      	ldr	r2, [r1, #8]
 800e1dc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e1e0:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e1e2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800e1e6:	b2d2      	uxtb	r2, r2
 800e1e8:	2a04      	cmp	r2, #4
 800e1ea:	d00d      	beq.n	800e208 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e1ec:	f013 0f20 	tst.w	r3, #32
 800e1f0:	d00a      	beq.n	800e208 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e1f2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800e1f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e1fa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e1fe:	6801      	ldr	r1, [r0, #0]
 800e200:	698a      	ldr	r2, [r1, #24]
 800e202:	f042 0220 	orr.w	r2, r2, #32
 800e206:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e208:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800e20c:	b2d2      	uxtb	r2, r2
 800e20e:	2a03      	cmp	r2, #3
 800e210:	d00d      	beq.n	800e22e <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e212:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e216:	d00a      	beq.n	800e22e <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e218:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800e21c:	f042 0204 	orr.w	r2, r2, #4
 800e220:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e224:	6801      	ldr	r1, [r0, #0]
 800e226:	698a      	ldr	r2, [r1, #24]
 800e228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e22c:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e22e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e232:	d00a      	beq.n	800e24a <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e234:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800e238:	f042 0201 	orr.w	r2, r2, #1
 800e23c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e240:	6801      	ldr	r1, [r0, #0]
 800e242:	698a      	ldr	r2, [r1, #24]
 800e244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e248:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e24a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e24e:	d00a      	beq.n	800e266 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e250:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800e254:	f043 0308 	orr.w	r3, r3, #8
 800e258:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e25c:	6802      	ldr	r2, [r0, #0]
 800e25e:	6993      	ldr	r3, [r2, #24]
 800e260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e264:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e266:	2300      	movs	r3, #0
 800e268:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e26c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800e270:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e274:	4770      	bx	lr
 800e276:	bf00      	nop
 800e278:	fffffc90 	.word	0xfffffc90

0800e27c <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e27c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e27e:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e280:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e282:	3008      	adds	r0, #8
 800e284:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800e286:	fb03 0000 	mla	r0, r3, r0, r0
 800e28a:	4770      	bx	lr

0800e28c <SPI_WaitOnFlagUntilTimeout>:
{
 800e28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e290:	4607      	mov	r7, r0
 800e292:	460e      	mov	r6, r1
 800e294:	4615      	mov	r5, r2
 800e296:	4698      	mov	r8, r3
 800e298:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e29a:	e000      	b.n	800e29e <SPI_WaitOnFlagUntilTimeout+0x12>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e29c:	b1c4      	cbz	r4, 800e2d0 <SPI_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	695b      	ldr	r3, [r3, #20]
 800e2a2:	ea36 0303 	bics.w	r3, r6, r3
 800e2a6:	bf0c      	ite	eq
 800e2a8:	f04f 0c01 	moveq.w	ip, #1
 800e2ac:	f04f 0c00 	movne.w	ip, #0
 800e2b0:	45ac      	cmp	ip, r5
 800e2b2:	d10a      	bne.n	800e2ca <SPI_WaitOnFlagUntilTimeout+0x3e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2b4:	f7fc fa14 	bl	800a6e0 <HAL_GetTick>
 800e2b8:	eba0 0008 	sub.w	r0, r0, r8
 800e2bc:	42a0      	cmp	r0, r4
 800e2be:	d3ed      	bcc.n	800e29c <SPI_WaitOnFlagUntilTimeout+0x10>
 800e2c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e2c4:	d0ea      	beq.n	800e29c <SPI_WaitOnFlagUntilTimeout+0x10>
      return HAL_TIMEOUT;
 800e2c6:	2003      	movs	r0, #3
 800e2c8:	e000      	b.n	800e2cc <SPI_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 800e2ca:	2000      	movs	r0, #0
}
 800e2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_TIMEOUT;
 800e2d0:	2003      	movs	r0, #3
 800e2d2:	e7fb      	b.n	800e2cc <SPI_WaitOnFlagUntilTimeout+0x40>

0800e2d4 <HAL_SPI_Init>:
  if (hspi == NULL)
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	f000 80a3 	beq.w	800e420 <HAL_SPI_Init+0x14c>
{
 800e2da:	b570      	push	{r4, r5, r6, lr}
 800e2dc:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e2e2:	6805      	ldr	r5, [r0, #0]
 800e2e4:	4b52      	ldr	r3, [pc, #328]	; (800e430 <HAL_SPI_Init+0x15c>)
 800e2e6:	4e53      	ldr	r6, [pc, #332]	; (800e434 <HAL_SPI_Init+0x160>)
 800e2e8:	429d      	cmp	r5, r3
 800e2ea:	bf18      	it	ne
 800e2ec:	42b5      	cmpne	r5, r6
 800e2ee:	bf14      	ite	ne
 800e2f0:	2601      	movne	r6, #1
 800e2f2:	2600      	moveq	r6, #0
 800e2f4:	d007      	beq.n	800e306 <HAL_SPI_Init+0x32>
 800e2f6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800e2fa:	429d      	cmp	r5, r3
 800e2fc:	d003      	beq.n	800e306 <HAL_SPI_Init+0x32>
 800e2fe:	68c3      	ldr	r3, [r0, #12]
 800e300:	2b0f      	cmp	r3, #15
 800e302:	f200 808f 	bhi.w	800e424 <HAL_SPI_Init+0x150>
  packet_length = SPI_GetPacketSize(hspi);
 800e306:	4620      	mov	r0, r4
 800e308:	f7ff ffb8 	bl	800e27c <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e30c:	b12e      	cbz	r6, 800e31a <HAL_SPI_Init+0x46>
 800e30e:	4b4a      	ldr	r3, [pc, #296]	; (800e438 <HAL_SPI_Init+0x164>)
 800e310:	429d      	cmp	r5, r3
 800e312:	d002      	beq.n	800e31a <HAL_SPI_Init+0x46>
 800e314:	2808      	cmp	r0, #8
 800e316:	f200 8087 	bhi.w	800e428 <HAL_SPI_Init+0x154>
 800e31a:	4a45      	ldr	r2, [pc, #276]	; (800e430 <HAL_SPI_Init+0x15c>)
 800e31c:	4b45      	ldr	r3, [pc, #276]	; (800e434 <HAL_SPI_Init+0x160>)
 800e31e:	429d      	cmp	r5, r3
 800e320:	bf18      	it	ne
 800e322:	4295      	cmpne	r5, r2
 800e324:	d003      	beq.n	800e32e <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e32a:	429d      	cmp	r5, r3
 800e32c:	d101      	bne.n	800e332 <HAL_SPI_Init+0x5e>
 800e32e:	2810      	cmp	r0, #16
 800e330:	d87c      	bhi.n	800e42c <HAL_SPI_Init+0x158>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800e332:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800e336:	2b00      	cmp	r3, #0
 800e338:	d059      	beq.n	800e3ee <HAL_SPI_Init+0x11a>
  hspi->State = HAL_SPI_STATE_BUSY;
 800e33a:	2302      	movs	r3, #2
 800e33c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800e340:	6822      	ldr	r2, [r4, #0]
 800e342:	6813      	ldr	r3, [r2, #0]
 800e344:	f023 0301 	bic.w	r3, r3, #1
 800e348:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e34a:	6821      	ldr	r1, [r4, #0]
 800e34c:	688a      	ldr	r2, [r1, #8]
 800e34e:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e352:	69a3      	ldr	r3, [r4, #24]
 800e354:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e358:	d04f      	beq.n	800e3fa <HAL_SPI_Init+0x126>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e35a:	69e3      	ldr	r3, [r4, #28]
 800e35c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e35e:	430b      	orrs	r3, r1
 800e360:	4313      	orrs	r3, r2
 800e362:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e364:	4313      	orrs	r3, r2
 800e366:	68e1      	ldr	r1, [r4, #12]
 800e368:	6822      	ldr	r2, [r4, #0]
 800e36a:	430b      	orrs	r3, r1
 800e36c:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e36e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e370:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e372:	4313      	orrs	r3, r2
 800e374:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e376:	4313      	orrs	r3, r2
 800e378:	69a2      	ldr	r2, [r4, #24]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	6922      	ldr	r2, [r4, #16]
 800e37e:	4313      	orrs	r3, r2
 800e380:	6962      	ldr	r2, [r4, #20]
 800e382:	4313      	orrs	r3, r2
 800e384:	6a22      	ldr	r2, [r4, #32]
 800e386:	4313      	orrs	r3, r2
 800e388:	6862      	ldr	r2, [r4, #4]
 800e38a:	4313      	orrs	r3, r2
 800e38c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800e38e:	4313      	orrs	r3, r2
 800e390:	68a2      	ldr	r2, [r4, #8]
 800e392:	4313      	orrs	r3, r2
 800e394:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e396:	4313      	orrs	r3, r2
 800e398:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e39a:	6822      	ldr	r2, [r4, #0]
 800e39c:	430b      	orrs	r3, r1
 800e39e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e3a0:	6863      	ldr	r3, [r4, #4]
 800e3a2:	b96b      	cbnz	r3, 800e3c0 <HAL_SPI_Init+0xec>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e3a4:	6822      	ldr	r2, [r4, #0]
 800e3a6:	6893      	ldr	r3, [r2, #8]
 800e3a8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800e3ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e3b0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e3b2:	6822      	ldr	r2, [r4, #0]
 800e3b4:	6893      	ldr	r3, [r2, #8]
 800e3b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e3ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e3be:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e3c0:	6822      	ldr	r2, [r4, #0]
 800e3c2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e3c4:	f023 0301 	bic.w	r3, r3, #1
 800e3c8:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e3ca:	6863      	ldr	r3, [r4, #4]
 800e3cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800e3d0:	d006      	beq.n	800e3e0 <HAL_SPI_Init+0x10c>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e3d2:	6822      	ldr	r2, [r4, #0]
 800e3d4:	68d3      	ldr	r3, [r2, #12]
 800e3d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e3da:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e3dc:	430b      	orrs	r3, r1
 800e3de:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800e3ec:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800e3ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f7f4 fe9e 	bl	8003134 <HAL_SPI_MspInit>
 800e3f8:	e79f      	b.n	800e33a <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e3fa:	6863      	ldr	r3, [r4, #4]
 800e3fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e400:	d006      	beq.n	800e410 <HAL_SPI_Init+0x13c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e402:	2b00      	cmp	r3, #0
 800e404:	d1a9      	bne.n	800e35a <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e406:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e40c:	d1a5      	bne.n	800e35a <HAL_SPI_Init+0x86>
 800e40e:	e002      	b.n	800e416 <HAL_SPI_Init+0x142>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e410:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e412:	2800      	cmp	r0, #0
 800e414:	d1f5      	bne.n	800e402 <HAL_SPI_Init+0x12e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e416:	680b      	ldr	r3, [r1, #0]
 800e418:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e41c:	600b      	str	r3, [r1, #0]
 800e41e:	e79c      	b.n	800e35a <HAL_SPI_Init+0x86>
    return HAL_ERROR;
 800e420:	2001      	movs	r0, #1
}
 800e422:	4770      	bx	lr
    return HAL_ERROR;
 800e424:	2001      	movs	r0, #1
 800e426:	e7e1      	b.n	800e3ec <HAL_SPI_Init+0x118>
    return HAL_ERROR;
 800e428:	2001      	movs	r0, #1
 800e42a:	e7df      	b.n	800e3ec <HAL_SPI_Init+0x118>
 800e42c:	2001      	movs	r0, #1
 800e42e:	e7dd      	b.n	800e3ec <HAL_SPI_Init+0x118>
 800e430:	40013000 	.word	0x40013000
 800e434:	40003800 	.word	0x40003800
 800e438:	40003c00 	.word	0x40003c00

0800e43c <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800e43c:	b198      	cbz	r0, 800e466 <HAL_SPI_DeInit+0x2a>
{
 800e43e:	b510      	push	{r4, lr}
 800e440:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800e442:	2302      	movs	r3, #2
 800e444:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800e448:	6802      	ldr	r2, [r0, #0]
 800e44a:	6813      	ldr	r3, [r2, #0]
 800e44c:	f023 0301 	bic.w	r3, r3, #1
 800e450:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800e452:	f7f4 fedb 	bl	800320c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e456:	2000      	movs	r0, #0
 800e458:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 800e45c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  __HAL_UNLOCK(hspi);
 800e460:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800e464:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e466:	2001      	movs	r0, #1
}
 800e468:	4770      	bx	lr

0800e46a <HAL_SPI_TransmitReceive>:
{
 800e46a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	461d      	mov	r5, r3
 800e472:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e474:	f8d0 a000 	ldr.w	sl, [r0]
  __HAL_LOCK(hspi);
 800e478:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	f000 8179 	beq.w	800e774 <HAL_SPI_TransmitReceive+0x30a>
 800e482:	4604      	mov	r4, r0
 800e484:	4688      	mov	r8, r1
 800e486:	4691      	mov	r9, r2
 800e488:	2301      	movs	r3, #1
 800e48a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800e48e:	f7fc f927 	bl	800a6e0 <HAL_GetTick>
 800e492:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 800e494:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800e498:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800e49a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d007      	beq.n	800e4b0 <HAL_SPI_TransmitReceive+0x46>
 800e4a0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800e4a4:	d13d      	bne.n	800e522 <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e4a6:	68a2      	ldr	r2, [r4, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800e4a8:	2a00      	cmp	r2, #0
 800e4aa:	d13a      	bne.n	800e522 <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e4ac:	2b04      	cmp	r3, #4
 800e4ae:	d138      	bne.n	800e522 <HAL_SPI_TransmitReceive+0xb8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e4b0:	f1b9 0f00 	cmp.w	r9, #0
 800e4b4:	bf18      	it	ne
 800e4b6:	f1b8 0f00 	cmpne.w	r8, #0
 800e4ba:	d039      	beq.n	800e530 <HAL_SPI_TransmitReceive+0xc6>
 800e4bc:	2d00      	cmp	r5, #0
 800e4be:	d037      	beq.n	800e530 <HAL_SPI_TransmitReceive+0xc6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4c0:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	2b04      	cmp	r3, #4
 800e4c8:	d002      	beq.n	800e4d0 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e4ca:	2305      	movs	r3, #5
 800e4cc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e4d6:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e4da:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e4de:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e4e2:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e4e6:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e4ea:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800e4ee:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e4f0:	6763      	str	r3, [r4, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e4f2:	6822      	ldr	r2, [r4, #0]
 800e4f4:	6851      	ldr	r1, [r2, #4]
 800e4f6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800e4fa:	400b      	ands	r3, r1
 800e4fc:	432b      	orrs	r3, r5
 800e4fe:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800e500:	6822      	ldr	r2, [r4, #0]
 800e502:	6813      	ldr	r3, [r2, #0]
 800e504:	f043 0301 	orr.w	r3, r3, #1
 800e508:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e50a:	6863      	ldr	r3, [r4, #4]
 800e50c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e510:	d013      	beq.n	800e53a <HAL_SPI_TransmitReceive+0xd0>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e512:	68e3      	ldr	r3, [r4, #12]
 800e514:	2b0f      	cmp	r3, #15
 800e516:	d868      	bhi.n	800e5ea <HAL_SPI_TransmitReceive+0x180>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e518:	2b07      	cmp	r3, #7
 800e51a:	f200 80bb 	bhi.w	800e694 <HAL_SPI_TransmitReceive+0x22a>
  initial_RxXferCount = Size;
 800e51e:	46a8      	mov	r8, r5
 800e520:	e0c4      	b.n	800e6ac <HAL_SPI_TransmitReceive+0x242>
    __HAL_UNLOCK(hspi);
 800e522:	2300      	movs	r3, #0
 800e524:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e528:	2002      	movs	r0, #2
}
 800e52a:	b002      	add	sp, #8
 800e52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800e530:	2300      	movs	r3, #0
 800e532:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e536:	2001      	movs	r0, #1
 800e538:	e7f7      	b.n	800e52a <HAL_SPI_TransmitReceive+0xc0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e53a:	6822      	ldr	r2, [r4, #0]
 800e53c:	6813      	ldr	r3, [r2, #0]
 800e53e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e542:	6013      	str	r3, [r2, #0]
 800e544:	e7e5      	b.n	800e512 <HAL_SPI_TransmitReceive+0xa8>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	6959      	ldr	r1, [r3, #20]
 800e54a:	f248 0208 	movw	r2, #32776	; 0x8008
 800e54e:	4211      	tst	r1, r2
 800e550:	d013      	beq.n	800e57a <HAL_SPI_TransmitReceive+0x110>
 800e552:	f1b8 0f00 	cmp.w	r8, #0
 800e556:	d010      	beq.n	800e57a <HAL_SPI_TransmitReceive+0x110>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e558:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e55c:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e55e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e560:	3304      	adds	r3, #4
 800e562:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800e564:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e568:	b29b      	uxth	r3, r3
 800e56a:	3b01      	subs	r3, #1
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e572:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800e576:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e57a:	f7fc f8b1 	bl	800a6e0 <HAL_GetTick>
 800e57e:	1bc0      	subs	r0, r0, r7
 800e580:	42b0      	cmp	r0, r6
 800e582:	d302      	bcc.n	800e58a <HAL_SPI_TransmitReceive+0x120>
 800e584:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e588:	d11e      	bne.n	800e5c8 <HAL_SPI_TransmitReceive+0x15e>
 800e58a:	b1ee      	cbz	r6, 800e5c8 <HAL_SPI_TransmitReceive+0x15e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e58c:	ea45 0308 	orr.w	r3, r5, r8
 800e590:	b29b      	uxth	r3, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	f000 80d2 	beq.w	800e73c <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e598:	6823      	ldr	r3, [r4, #0]
 800e59a:	695a      	ldr	r2, [r3, #20]
 800e59c:	f012 0f02 	tst.w	r2, #2
 800e5a0:	d0d1      	beq.n	800e546 <HAL_SPI_TransmitReceive+0xdc>
 800e5a2:	2d00      	cmp	r5, #0
 800e5a4:	d0cf      	beq.n	800e546 <HAL_SPI_TransmitReceive+0xdc>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e5a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e5a8:	6812      	ldr	r2, [r2, #0]
 800e5aa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e5ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e5ae:	3304      	adds	r3, #4
 800e5b0:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800e5b2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e5c0:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800e5c4:	b2ad      	uxth	r5, r5
 800e5c6:	e7be      	b.n	800e546 <HAL_SPI_TransmitReceive+0xdc>
        SPI_CloseTransfer(hspi);
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	f7ff fdef 	bl	800e1ac <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e5d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e5d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800e5e6:	2003      	movs	r0, #3
 800e5e8:	e79f      	b.n	800e52a <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800e5ea:	46a8      	mov	r8, r5
 800e5ec:	e7ce      	b.n	800e58c <HAL_SPI_TransmitReceive+0x122>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5ee:	f7fc f877 	bl	800a6e0 <HAL_GetTick>
 800e5f2:	1bc0      	subs	r0, r0, r7
 800e5f4:	42b0      	cmp	r0, r6
 800e5f6:	d302      	bcc.n	800e5fe <HAL_SPI_TransmitReceive+0x194>
 800e5f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e5fc:	d139      	bne.n	800e672 <HAL_SPI_TransmitReceive+0x208>
 800e5fe:	2e00      	cmp	r6, #0
 800e600:	d037      	beq.n	800e672 <HAL_SPI_TransmitReceive+0x208>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e602:	ea45 0308 	orr.w	r3, r5, r8
 800e606:	b29b      	uxth	r3, r3
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f000 8097 	beq.w	800e73c <HAL_SPI_TransmitReceive+0x2d2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e60e:	6823      	ldr	r3, [r4, #0]
 800e610:	695b      	ldr	r3, [r3, #20]
 800e612:	f013 0f02 	tst.w	r3, #2
 800e616:	d011      	beq.n	800e63c <HAL_SPI_TransmitReceive+0x1d2>
 800e618:	b185      	cbz	r5, 800e63c <HAL_SPI_TransmitReceive+0x1d2>
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e61a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e61c:	881b      	ldrh	r3, [r3, #0]
 800e61e:	f8aa 3020 	strh.w	r3, [sl, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e622:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e624:	3302      	adds	r3, #2
 800e626:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800e628:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	3b01      	subs	r3, #1
 800e630:	b29b      	uxth	r3, r3
 800e632:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e636:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800e63a:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800e63c:	6823      	ldr	r3, [r4, #0]
 800e63e:	695b      	ldr	r3, [r3, #20]
 800e640:	f013 0f01 	tst.w	r3, #1
 800e644:	d0d3      	beq.n	800e5ee <HAL_SPI_TransmitReceive+0x184>
 800e646:	f1b8 0f00 	cmp.w	r8, #0
 800e64a:	d0d0      	beq.n	800e5ee <HAL_SPI_TransmitReceive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e64c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e64e:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 800e652:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e656:	3302      	adds	r3, #2
 800e658:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e65a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e65e:	b29b      	uxth	r3, r3
 800e660:	3b01      	subs	r3, #1
 800e662:	b29b      	uxth	r3, r3
 800e664:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e668:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800e66c:	fa1f f888 	uxth.w	r8, r8
 800e670:	e7bd      	b.n	800e5ee <HAL_SPI_TransmitReceive+0x184>
        SPI_CloseTransfer(hspi);
 800e672:	4620      	mov	r0, r4
 800e674:	f7ff fd9a 	bl	800e1ac <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800e678:	2300      	movs	r3, #0
 800e67a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e67e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e686:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e68a:	2301      	movs	r3, #1
 800e68c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800e690:	2003      	movs	r0, #3
 800e692:	e74a      	b.n	800e52a <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800e694:	46a8      	mov	r8, r5
 800e696:	e7b4      	b.n	800e602 <HAL_SPI_TransmitReceive+0x198>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e698:	f7fc f822 	bl	800a6e0 <HAL_GetTick>
 800e69c:	1bc0      	subs	r0, r0, r7
 800e69e:	42b0      	cmp	r0, r6
 800e6a0:	d302      	bcc.n	800e6a8 <HAL_SPI_TransmitReceive+0x23e>
 800e6a2:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e6a6:	d138      	bne.n	800e71a <HAL_SPI_TransmitReceive+0x2b0>
 800e6a8:	2e00      	cmp	r6, #0
 800e6aa:	d036      	beq.n	800e71a <HAL_SPI_TransmitReceive+0x2b0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e6ac:	ea45 0308 	orr.w	r3, r5, r8
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d042      	beq.n	800e73c <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	695a      	ldr	r2, [r3, #20]
 800e6ba:	f012 0f02 	tst.w	r2, #2
 800e6be:	d011      	beq.n	800e6e4 <HAL_SPI_TransmitReceive+0x27a>
 800e6c0:	b185      	cbz	r5, 800e6e4 <HAL_SPI_TransmitReceive+0x27a>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e6c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e6c4:	7812      	ldrb	r2, [r2, #0]
 800e6c6:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e6ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800e6d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e6de:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800e6e2:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800e6e4:	6823      	ldr	r3, [r4, #0]
 800e6e6:	695a      	ldr	r2, [r3, #20]
 800e6e8:	f012 0f01 	tst.w	r2, #1
 800e6ec:	d0d4      	beq.n	800e698 <HAL_SPI_TransmitReceive+0x22e>
 800e6ee:	f1b8 0f00 	cmp.w	r8, #0
 800e6f2:	d0d1      	beq.n	800e698 <HAL_SPI_TransmitReceive+0x22e>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e6f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6fa:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6fe:	3301      	adds	r3, #1
 800e700:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e702:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e706:	b29b      	uxth	r3, r3
 800e708:	3b01      	subs	r3, #1
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e710:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800e714:	fa1f f888 	uxth.w	r8, r8
 800e718:	e7be      	b.n	800e698 <HAL_SPI_TransmitReceive+0x22e>
        SPI_CloseTransfer(hspi);
 800e71a:	4620      	mov	r0, r4
 800e71c:	f7ff fd46 	bl	800e1ac <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800e720:	2300      	movs	r3, #0
 800e722:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e726:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e72a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e72e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e732:	2301      	movs	r3, #1
 800e734:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800e738:	2003      	movs	r0, #3
 800e73a:	e6f6      	b.n	800e52a <HAL_SPI_TransmitReceive+0xc0>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e73c:	9600      	str	r6, [sp, #0]
 800e73e:	463b      	mov	r3, r7
 800e740:	2200      	movs	r2, #0
 800e742:	2108      	movs	r1, #8
 800e744:	4620      	mov	r0, r4
 800e746:	f7ff fda1 	bl	800e28c <SPI_WaitOnFlagUntilTimeout>
 800e74a:	b128      	cbz	r0, 800e758 <HAL_SPI_TransmitReceive+0x2ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e74c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e750:	f043 0320 	orr.w	r3, r3, #32
 800e754:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 800e758:	4620      	mov	r0, r4
 800e75a:	f7ff fd27 	bl	800e1ac <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800e75e:	2300      	movs	r3, #0
 800e760:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800e764:	2301      	movs	r3, #1
 800e766:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e76a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e76e:	b91b      	cbnz	r3, 800e778 <HAL_SPI_TransmitReceive+0x30e>
  return errorcode;
 800e770:	2000      	movs	r0, #0
 800e772:	e6da      	b.n	800e52a <HAL_SPI_TransmitReceive+0xc0>
  __HAL_LOCK(hspi);
 800e774:	2002      	movs	r0, #2
 800e776:	e6d8      	b.n	800e52a <HAL_SPI_TransmitReceive+0xc0>
    return HAL_ERROR;
 800e778:	2001      	movs	r0, #1
 800e77a:	e6d6      	b.n	800e52a <HAL_SPI_TransmitReceive+0xc0>

0800e77c <HAL_SPI_Receive>:
{
 800e77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e780:	b082      	sub	sp, #8
 800e782:	4604      	mov	r4, r0
 800e784:	468a      	mov	sl, r1
 800e786:	4691      	mov	r9, r2
 800e788:	461d      	mov	r5, r3
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e78a:	f8d0 8000 	ldr.w	r8, [r0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e78e:	6843      	ldr	r3, [r0, #4]
 800e790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e794:	d042      	beq.n	800e81c <HAL_SPI_Receive+0xa0>
  __HAL_LOCK(hspi);
 800e796:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	f000 810c 	beq.w	800e9b8 <HAL_SPI_Receive+0x23c>
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800e7a6:	f7fb ff9b 	bl	800a6e0 <HAL_GetTick>
 800e7aa:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800e7ac:	f894 6081 	ldrb.w	r6, [r4, #129]	; 0x81
 800e7b0:	b2f6      	uxtb	r6, r6
 800e7b2:	2e01      	cmp	r6, #1
 800e7b4:	d13f      	bne.n	800e836 <HAL_SPI_Receive+0xba>
  if ((pData == NULL) || (Size == 0UL))
 800e7b6:	f1b9 0f00 	cmp.w	r9, #0
 800e7ba:	bf18      	it	ne
 800e7bc:	f1ba 0f00 	cmpne.w	sl, #0
 800e7c0:	d041      	beq.n	800e846 <HAL_SPI_Receive+0xca>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e7c2:	2304      	movs	r3, #4
 800e7c4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e7ce:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e7d2:	f8a4 9068 	strh.w	r9, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e7d6:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800e7da:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e7dc:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e7e0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e7e4:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e7e6:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7e8:	68a3      	ldr	r3, [r4, #8]
 800e7ea:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e7ee:	d02e      	beq.n	800e84e <HAL_SPI_Receive+0xd2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e7f0:	6823      	ldr	r3, [r4, #0]
 800e7f2:	6859      	ldr	r1, [r3, #4]
 800e7f4:	4a71      	ldr	r2, [pc, #452]	; (800e9bc <HAL_SPI_Receive+0x240>)
 800e7f6:	400a      	ands	r2, r1
 800e7f8:	ea49 0202 	orr.w	r2, r9, r2
 800e7fc:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800e7fe:	6822      	ldr	r2, [r4, #0]
 800e800:	6813      	ldr	r3, [r2, #0]
 800e802:	f043 0301 	orr.w	r3, r3, #1
 800e806:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e808:	6863      	ldr	r3, [r4, #4]
 800e80a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e80e:	d024      	beq.n	800e85a <HAL_SPI_Receive+0xde>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e810:	68e3      	ldr	r3, [r4, #12]
 800e812:	2b0f      	cmp	r3, #15
 800e814:	d830      	bhi.n	800e878 <HAL_SPI_Receive+0xfc>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e816:	2b07      	cmp	r3, #7
 800e818:	d862      	bhi.n	800e8e0 <HAL_SPI_Receive+0x164>
 800e81a:	e094      	b.n	800e946 <HAL_SPI_Receive+0x1ca>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e81c:	6883      	ldr	r3, [r0, #8]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d1b9      	bne.n	800e796 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e822:	2304      	movs	r3, #4
 800e824:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e828:	9500      	str	r5, [sp, #0]
 800e82a:	4613      	mov	r3, r2
 800e82c:	460a      	mov	r2, r1
 800e82e:	f7ff fe1c 	bl	800e46a <HAL_SPI_TransmitReceive>
 800e832:	4606      	mov	r6, r0
 800e834:	e003      	b.n	800e83e <HAL_SPI_Receive+0xc2>
    __HAL_UNLOCK(hspi);
 800e836:	2300      	movs	r3, #0
 800e838:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e83c:	2602      	movs	r6, #2
}
 800e83e:	4630      	mov	r0, r6
 800e840:	b002      	add	sp, #8
 800e842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800e846:	2300      	movs	r3, #0
 800e848:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e84c:	e7f7      	b.n	800e83e <HAL_SPI_Receive+0xc2>
    SPI_1LINE_RX(hspi);
 800e84e:	6822      	ldr	r2, [r4, #0]
 800e850:	6813      	ldr	r3, [r2, #0]
 800e852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e856:	6013      	str	r3, [r2, #0]
 800e858:	e7ca      	b.n	800e7f0 <HAL_SPI_Receive+0x74>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e85a:	6822      	ldr	r2, [r4, #0]
 800e85c:	6813      	ldr	r3, [r2, #0]
 800e85e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e862:	6013      	str	r3, [r2, #0]
 800e864:	e7d4      	b.n	800e810 <HAL_SPI_Receive+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e866:	f7fb ff3b 	bl	800a6e0 <HAL_GetTick>
 800e86a:	1bc0      	subs	r0, r0, r7
 800e86c:	42a8      	cmp	r0, r5
 800e86e:	d302      	bcc.n	800e876 <HAL_SPI_Receive+0xfa>
 800e870:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e874:	d11a      	bne.n	800e8ac <HAL_SPI_Receive+0x130>
 800e876:	b1cd      	cbz	r5, 800e8ac <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0UL)
 800e878:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	2b00      	cmp	r3, #0
 800e880:	f000 808a 	beq.w	800e998 <HAL_SPI_Receive+0x21c>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e884:	6823      	ldr	r3, [r4, #0]
 800e886:	6959      	ldr	r1, [r3, #20]
 800e888:	f248 0208 	movw	r2, #32776	; 0x8008
 800e88c:	4211      	tst	r1, r2
 800e88e:	d0ea      	beq.n	800e866 <HAL_SPI_Receive+0xea>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e890:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e894:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e898:	3304      	adds	r3, #4
 800e89a:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e89c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800e8a0:	b292      	uxth	r2, r2
 800e8a2:	3a01      	subs	r2, #1
 800e8a4:	b292      	uxth	r2, r2
 800e8a6:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800e8aa:	e7e5      	b.n	800e878 <HAL_SPI_Receive+0xfc>
          SPI_CloseTransfer(hspi);
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f7ff fc7d 	bl	800e1ac <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e8b8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e8bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800e8ca:	2603      	movs	r6, #3
 800e8cc:	e7b7      	b.n	800e83e <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8ce:	f7fb ff07 	bl	800a6e0 <HAL_GetTick>
 800e8d2:	1bc0      	subs	r0, r0, r7
 800e8d4:	42a8      	cmp	r0, r5
 800e8d6:	d302      	bcc.n	800e8de <HAL_SPI_Receive+0x162>
 800e8d8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e8dc:	d119      	bne.n	800e912 <HAL_SPI_Receive+0x196>
 800e8de:	b1c5      	cbz	r5, 800e912 <HAL_SPI_Receive+0x196>
    while (hspi->RxXferCount > 0UL)
 800e8e0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d056      	beq.n	800e998 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e8ea:	6823      	ldr	r3, [r4, #0]
 800e8ec:	695b      	ldr	r3, [r3, #20]
 800e8ee:	f013 0f01 	tst.w	r3, #1
 800e8f2:	d0ec      	beq.n	800e8ce <HAL_SPI_Receive+0x152>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e8f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8f6:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 800e8fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8fe:	3302      	adds	r3, #2
 800e900:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e902:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e906:	b29b      	uxth	r3, r3
 800e908:	3b01      	subs	r3, #1
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800e910:	e7e6      	b.n	800e8e0 <HAL_SPI_Receive+0x164>
          SPI_CloseTransfer(hspi);
 800e912:	4620      	mov	r0, r4
 800e914:	f7ff fc4a 	bl	800e1ac <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800e918:	2300      	movs	r3, #0
 800e91a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e91e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e926:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e92a:	2301      	movs	r3, #1
 800e92c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800e930:	2603      	movs	r6, #3
 800e932:	e784      	b.n	800e83e <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e934:	f7fb fed4 	bl	800a6e0 <HAL_GetTick>
 800e938:	1bc0      	subs	r0, r0, r7
 800e93a:	42a8      	cmp	r0, r5
 800e93c:	d302      	bcc.n	800e944 <HAL_SPI_Receive+0x1c8>
 800e93e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e942:	d118      	bne.n	800e976 <HAL_SPI_Receive+0x1fa>
 800e944:	b1bd      	cbz	r5, 800e976 <HAL_SPI_Receive+0x1fa>
    while (hspi->RxXferCount > 0UL)
 800e946:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	b323      	cbz	r3, 800e998 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e94e:	6823      	ldr	r3, [r4, #0]
 800e950:	695a      	ldr	r2, [r3, #20]
 800e952:	f012 0f01 	tst.w	r2, #1
 800e956:	d0ed      	beq.n	800e934 <HAL_SPI_Receive+0x1b8>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e958:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e95a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e95e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e962:	3301      	adds	r3, #1
 800e964:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e966:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	3b01      	subs	r3, #1
 800e96e:	b29b      	uxth	r3, r3
 800e970:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800e974:	e7e7      	b.n	800e946 <HAL_SPI_Receive+0x1ca>
          SPI_CloseTransfer(hspi);
 800e976:	4620      	mov	r0, r4
 800e978:	f7ff fc18 	bl	800e1ac <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800e97c:	2300      	movs	r3, #0
 800e97e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e982:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e98a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e98e:	2301      	movs	r3, #1
 800e990:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800e994:	2603      	movs	r6, #3
 800e996:	e752      	b.n	800e83e <HAL_SPI_Receive+0xc2>
  SPI_CloseTransfer(hspi);
 800e998:	4620      	mov	r0, r4
 800e99a:	f7ff fc07 	bl	800e1ac <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800e99e:	2300      	movs	r3, #0
 800e9a0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9aa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	f47f af45 	bne.w	800e83e <HAL_SPI_Receive+0xc2>
  return errorcode;
 800e9b4:	2600      	movs	r6, #0
 800e9b6:	e742      	b.n	800e83e <HAL_SPI_Receive+0xc2>
  __HAL_LOCK(hspi);
 800e9b8:	2602      	movs	r6, #2
 800e9ba:	e740      	b.n	800e83e <HAL_SPI_Receive+0xc2>
 800e9bc:	ffff0000 	.word	0xffff0000

0800e9c0 <HAL_SPI_Transmit_IT>:
  __HAL_LOCK(hspi);
 800e9c0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d060      	beq.n	800ea8a <HAL_SPI_Transmit_IT+0xca>
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if ((pData == NULL) || (Size == 0UL))
 800e9ce:	2a00      	cmp	r2, #0
 800e9d0:	bf18      	it	ne
 800e9d2:	2900      	cmpne	r1, #0
 800e9d4:	d03b      	beq.n	800ea4e <HAL_SPI_Transmit_IT+0x8e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800e9d6:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d13b      	bne.n	800ea58 <HAL_SPI_Transmit_IT+0x98>
{
 800e9e0:	b410      	push	{r4}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e9e2:	2303      	movs	r3, #3
 800e9e4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e9ee:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e9f0:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e9f4:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 800e9f8:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e9fa:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e9fe:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800ea02:	6703      	str	r3, [r0, #112]	; 0x70
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea04:	68c3      	ldr	r3, [r0, #12]
 800ea06:	2b0f      	cmp	r3, #15
 800ea08:	d92b      	bls.n	800ea62 <HAL_SPI_Transmit_IT+0xa2>
    hspi->TxISR = SPI_TxISR_32BIT;
 800ea0a:	4b21      	ldr	r3, [pc, #132]	; (800ea90 <HAL_SPI_Transmit_IT+0xd0>)
 800ea0c:	6743      	str	r3, [r0, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea0e:	6883      	ldr	r3, [r0, #8]
 800ea10:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ea14:	d02d      	beq.n	800ea72 <HAL_SPI_Transmit_IT+0xb2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ea16:	6801      	ldr	r1, [r0, #0]
 800ea18:	684c      	ldr	r4, [r1, #4]
 800ea1a:	4b1e      	ldr	r3, [pc, #120]	; (800ea94 <HAL_SPI_Transmit_IT+0xd4>)
 800ea1c:	4023      	ands	r3, r4
 800ea1e:	431a      	orrs	r2, r3
 800ea20:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800ea22:	6802      	ldr	r2, [r0, #0]
 800ea24:	6813      	ldr	r3, [r2, #0]
 800ea26:	f043 0301 	orr.w	r3, r3, #1
 800ea2a:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800ea2c:	6802      	ldr	r2, [r0, #0]
 800ea2e:	6911      	ldr	r1, [r2, #16]
 800ea30:	f240 732a 	movw	r3, #1834	; 0x72a
 800ea34:	430b      	orrs	r3, r1
 800ea36:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea38:	6843      	ldr	r3, [r0, #4]
 800ea3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea3e:	d01e      	beq.n	800ea7e <HAL_SPI_Transmit_IT+0xbe>
  __HAL_UNLOCK(hspi);
 800ea40:	2300      	movs	r3, #0
 800ea42:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800ea46:	4618      	mov	r0, r3
}
 800ea48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea4c:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800ea4e:	2300      	movs	r3, #0
 800ea50:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800ea54:	2001      	movs	r0, #1
 800ea56:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800ea58:	2300      	movs	r3, #0
 800ea5a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800ea5e:	2002      	movs	r0, #2
 800ea60:	4770      	bx	lr
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea62:	2b07      	cmp	r3, #7
 800ea64:	d902      	bls.n	800ea6c <HAL_SPI_Transmit_IT+0xac>
    hspi->TxISR = SPI_TxISR_16BIT;
 800ea66:	4b0c      	ldr	r3, [pc, #48]	; (800ea98 <HAL_SPI_Transmit_IT+0xd8>)
 800ea68:	6743      	str	r3, [r0, #116]	; 0x74
 800ea6a:	e7d0      	b.n	800ea0e <HAL_SPI_Transmit_IT+0x4e>
    hspi->TxISR = SPI_TxISR_8BIT;
 800ea6c:	4b0b      	ldr	r3, [pc, #44]	; (800ea9c <HAL_SPI_Transmit_IT+0xdc>)
 800ea6e:	6743      	str	r3, [r0, #116]	; 0x74
 800ea70:	e7cd      	b.n	800ea0e <HAL_SPI_Transmit_IT+0x4e>
    SPI_1LINE_TX(hspi);
 800ea72:	6801      	ldr	r1, [r0, #0]
 800ea74:	680b      	ldr	r3, [r1, #0]
 800ea76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ea7a:	600b      	str	r3, [r1, #0]
 800ea7c:	e7cb      	b.n	800ea16 <HAL_SPI_Transmit_IT+0x56>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ea7e:	6802      	ldr	r2, [r0, #0]
 800ea80:	6813      	ldr	r3, [r2, #0]
 800ea82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea86:	6013      	str	r3, [r2, #0]
 800ea88:	e7da      	b.n	800ea40 <HAL_SPI_Transmit_IT+0x80>
  __HAL_LOCK(hspi);
 800ea8a:	2002      	movs	r0, #2
}
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	0800e17d 	.word	0x0800e17d
 800ea94:	ffff0000 	.word	0xffff0000
 800ea98:	0800e14d 	.word	0x0800e14d
 800ea9c:	0800e11b 	.word	0x0800e11b

0800eaa0 <HAL_SPI_TransmitReceive_IT>:
{
 800eaa0:	b430      	push	{r4, r5}
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eaa2:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hspi);
 800eaa4:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 800eaa8:	f1bc 0f01 	cmp.w	ip, #1
 800eaac:	f000 8101 	beq.w	800ecb2 <HAL_SPI_TransmitReceive_IT+0x212>
 800eab0:	f04f 0c01 	mov.w	ip, #1
 800eab4:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80
  tmp_state  = hspi->State;
 800eab8:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
 800eabc:	fa5f fc8c 	uxtb.w	ip, ip
  tmp_mode   = hspi->Init.Mode;
 800eac0:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800eac2:	f1bc 0f01 	cmp.w	ip, #1
 800eac6:	d008      	beq.n	800eada <HAL_SPI_TransmitReceive_IT+0x3a>
 800eac8:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 800eacc:	d136      	bne.n	800eb3c <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800eace:	6885      	ldr	r5, [r0, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800ead0:	2d00      	cmp	r5, #0
 800ead2:	d133      	bne.n	800eb3c <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ead4:	f1bc 0f04 	cmp.w	ip, #4
 800ead8:	d130      	bne.n	800eb3c <HAL_SPI_TransmitReceive_IT+0x9c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800eada:	2a00      	cmp	r2, #0
 800eadc:	bf18      	it	ne
 800eade:	2900      	cmpne	r1, #0
 800eae0:	d032      	beq.n	800eb48 <HAL_SPI_TransmitReceive_IT+0xa8>
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d030      	beq.n	800eb48 <HAL_SPI_TransmitReceive_IT+0xa8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eae6:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800eaea:	b2ed      	uxtb	r5, r5
 800eaec:	2d04      	cmp	r5, #4
 800eaee:	d002      	beq.n	800eaf6 <HAL_SPI_TransmitReceive_IT+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eaf0:	2505      	movs	r5, #5
 800eaf2:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eaf6:	2500      	movs	r5, #0
 800eaf8:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eafc:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800eafe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800eb02:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eb06:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800eb08:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800eb0c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 800eb10:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800eb14:	b292      	uxth	r2, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eb16:	68c1      	ldr	r1, [r0, #12]
 800eb18:	290f      	cmp	r1, #15
 800eb1a:	d91a      	bls.n	800eb52 <HAL_SPI_TransmitReceive_IT+0xb2>
    hspi->TxISR     = SPI_TxISR_32BIT;
 800eb1c:	4966      	ldr	r1, [pc, #408]	; (800ecb8 <HAL_SPI_TransmitReceive_IT+0x218>)
 800eb1e:	6741      	str	r1, [r0, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 800eb20:	4966      	ldr	r1, [pc, #408]	; (800ecbc <HAL_SPI_TransmitReceive_IT+0x21c>)
 800eb22:	6701      	str	r1, [r0, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eb24:	6865      	ldr	r5, [r4, #4]
 800eb26:	4966      	ldr	r1, [pc, #408]	; (800ecc0 <HAL_SPI_TransmitReceive_IT+0x220>)
 800eb28:	4029      	ands	r1, r5
 800eb2a:	430b      	orrs	r3, r1
 800eb2c:	6063      	str	r3, [r4, #4]
  __HAL_SPI_ENABLE(hspi);
 800eb2e:	6801      	ldr	r1, [r0, #0]
 800eb30:	680b      	ldr	r3, [r1, #0]
 800eb32:	f043 0301 	orr.w	r3, r3, #1
 800eb36:	600b      	str	r3, [r1, #0]
  uint32_t max_fifo_length = 0UL;
 800eb38:	2100      	movs	r1, #0
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800eb3a:	e041      	b.n	800ebc0 <HAL_SPI_TransmitReceive_IT+0x120>
    __HAL_UNLOCK(hspi);
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800eb42:	2002      	movs	r0, #2
}
 800eb44:	bc30      	pop	{r4, r5}
 800eb46:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800eb48:	2300      	movs	r3, #0
 800eb4a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800eb4e:	2001      	movs	r0, #1
 800eb50:	e7f8      	b.n	800eb44 <HAL_SPI_TransmitReceive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb52:	2907      	cmp	r1, #7
 800eb54:	d904      	bls.n	800eb60 <HAL_SPI_TransmitReceive_IT+0xc0>
    hspi->RxISR     = SPI_RxISR_16BIT;
 800eb56:	495b      	ldr	r1, [pc, #364]	; (800ecc4 <HAL_SPI_TransmitReceive_IT+0x224>)
 800eb58:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 800eb5a:	495b      	ldr	r1, [pc, #364]	; (800ecc8 <HAL_SPI_TransmitReceive_IT+0x228>)
 800eb5c:	6741      	str	r1, [r0, #116]	; 0x74
 800eb5e:	e7e1      	b.n	800eb24 <HAL_SPI_TransmitReceive_IT+0x84>
    hspi->RxISR     = SPI_RxISR_8BIT;
 800eb60:	495a      	ldr	r1, [pc, #360]	; (800eccc <HAL_SPI_TransmitReceive_IT+0x22c>)
 800eb62:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 800eb64:	495a      	ldr	r1, [pc, #360]	; (800ecd0 <HAL_SPI_TransmitReceive_IT+0x230>)
 800eb66:	6741      	str	r1, [r0, #116]	; 0x74
 800eb68:	e7dc      	b.n	800eb24 <HAL_SPI_TransmitReceive_IT+0x84>
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb6a:	2b07      	cmp	r3, #7
 800eb6c:	d945      	bls.n	800ebfa <HAL_SPI_TransmitReceive_IT+0x15a>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eb6e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d912      	bls.n	800eb9e <HAL_SPI_TransmitReceive_IT+0xfe>
 800eb78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800eb7a:	b183      	cbz	r3, 800eb9e <HAL_SPI_TransmitReceive_IT+0xfe>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800eb7c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb82:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eb84:	3304      	adds	r3, #4
 800eb86:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eb88:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	3b02      	subs	r3, #2
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800eb96:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800eb9a:	b292      	uxth	r2, r2
 800eb9c:	e00f      	b.n	800ebbe <HAL_SPI_TransmitReceive_IT+0x11e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800eb9e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eba4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eba6:	3302      	adds	r3, #2
 800eba8:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800ebaa:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800ebb8:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800ebbc:	b292      	uxth	r2, r2
      max_fifo_length++;
 800ebbe:	3101      	adds	r1, #1
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800ebc0:	6805      	ldr	r5, [r0, #0]
 800ebc2:	696b      	ldr	r3, [r5, #20]
 800ebc4:	f013 0f02 	tst.w	r3, #2
 800ebc8:	d05f      	beq.n	800ec8a <HAL_SPI_TransmitReceive_IT+0x1ea>
 800ebca:	2a00      	cmp	r2, #0
 800ebcc:	d05d      	beq.n	800ec8a <HAL_SPI_TransmitReceive_IT+0x1ea>
    if (max_fifo_length < MAX_FIFO_LENGTH)
 800ebce:	290f      	cmp	r1, #15
 800ebd0:	d856      	bhi.n	800ec80 <HAL_SPI_TransmitReceive_IT+0x1e0>
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ebd2:	68c3      	ldr	r3, [r0, #12]
 800ebd4:	2b0f      	cmp	r3, #15
 800ebd6:	d9c8      	bls.n	800eb6a <HAL_SPI_TransmitReceive_IT+0xca>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ebd8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	622b      	str	r3, [r5, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ebde:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	65c3      	str	r3, [r0, #92]	; 0x5c
        hspi->TxXferCount--;
 800ebe4:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	3b01      	subs	r3, #1
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 800ebf2:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800ebf6:	b292      	uxth	r2, r2
 800ebf8:	e7e1      	b.n	800ebbe <HAL_SPI_TransmitReceive_IT+0x11e>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ebfa:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	2b03      	cmp	r3, #3
 800ec02:	d913      	bls.n	800ec2c <HAL_SPI_TransmitReceive_IT+0x18c>
 800ec04:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ec06:	2b40      	cmp	r3, #64	; 0x40
 800ec08:	d910      	bls.n	800ec2c <HAL_SPI_TransmitReceive_IT+0x18c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ec0a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec10:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ec12:	3304      	adds	r3, #4
 800ec14:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ec16:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	3b04      	subs	r3, #4
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800ec24:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800ec28:	b292      	uxth	r2, r2
 800ec2a:	e7c8      	b.n	800ebbe <HAL_SPI_TransmitReceive_IT+0x11e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ec2c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d912      	bls.n	800ec5c <HAL_SPI_TransmitReceive_IT+0x1bc>
 800ec36:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ec38:	b183      	cbz	r3, 800ec5c <HAL_SPI_TransmitReceive_IT+0x1bc>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ec3a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ec3c:	881b      	ldrh	r3, [r3, #0]
 800ec3e:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec40:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ec42:	3302      	adds	r3, #2
 800ec44:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ec46:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	3b02      	subs	r3, #2
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800ec54:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800ec58:	b292      	uxth	r2, r2
 800ec5a:	e7b0      	b.n	800ebbe <HAL_SPI_TransmitReceive_IT+0x11e>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ec5c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	f885 3020 	strb.w	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec64:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ec66:	3301      	adds	r3, #1
 800ec68:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800ec6a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	3b01      	subs	r3, #1
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800ec78:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800ec7c:	b292      	uxth	r2, r2
 800ec7e:	e79e      	b.n	800ebbe <HAL_SPI_TransmitReceive_IT+0x11e>
      __HAL_UNLOCK(hspi);
 800ec80:	2300      	movs	r3, #0
 800ec82:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      return errorcode;
 800ec86:	2002      	movs	r0, #2
 800ec88:	e75c      	b.n	800eb44 <HAL_SPI_TransmitReceive_IT+0xa4>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 800ec8a:	692a      	ldr	r2, [r5, #16]
 800ec8c:	f240 736c 	movw	r3, #1900	; 0x76c
 800ec90:	4313      	orrs	r3, r2
 800ec92:	612b      	str	r3, [r5, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec94:	6843      	ldr	r3, [r0, #4]
 800ec96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec9a:	d004      	beq.n	800eca6 <HAL_SPI_TransmitReceive_IT+0x206>
  __HAL_UNLOCK(hspi);
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800eca2:	4618      	mov	r0, r3
 800eca4:	e74e      	b.n	800eb44 <HAL_SPI_TransmitReceive_IT+0xa4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eca6:	6802      	ldr	r2, [r0, #0]
 800eca8:	6813      	ldr	r3, [r2, #0]
 800ecaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ecae:	6013      	str	r3, [r2, #0]
 800ecb0:	e7f4      	b.n	800ec9c <HAL_SPI_TransmitReceive_IT+0x1fc>
  __HAL_LOCK(hspi);
 800ecb2:	2002      	movs	r0, #2
 800ecb4:	e746      	b.n	800eb44 <HAL_SPI_TransmitReceive_IT+0xa4>
 800ecb6:	bf00      	nop
 800ecb8:	0800e17d 	.word	0x0800e17d
 800ecbc:	0800e0eb 	.word	0x0800e0eb
 800ecc0:	ffff0000 	.word	0xffff0000
 800ecc4:	0800e0bb 	.word	0x0800e0bb
 800ecc8:	0800e14d 	.word	0x0800e14d
 800eccc:	0800e089 	.word	0x0800e089
 800ecd0:	0800e11b 	.word	0x0800e11b

0800ecd4 <HAL_SPI_Receive_IT>:
{
 800ecd4:	b510      	push	{r4, lr}
 800ecd6:	4684      	mov	ip, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ecd8:	6884      	ldr	r4, [r0, #8]
 800ecda:	b91c      	cbnz	r4, 800ece4 <HAL_SPI_Receive_IT+0x10>
 800ecdc:	6843      	ldr	r3, [r0, #4]
 800ecde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ece2:	d04a      	beq.n	800ed7a <HAL_SPI_Receive_IT+0xa6>
  __HAL_LOCK(hspi);
 800ece4:	f89c 3080 	ldrb.w	r3, [ip, #128]	; 0x80
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d06f      	beq.n	800edcc <HAL_SPI_Receive_IT+0xf8>
 800ecec:	2301      	movs	r3, #1
 800ecee:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800ecf2:	f89c 0081 	ldrb.w	r0, [ip, #129]	; 0x81
 800ecf6:	b2c0      	uxtb	r0, r0
 800ecf8:	4298      	cmp	r0, r3
 800ecfa:	d146      	bne.n	800ed8a <HAL_SPI_Receive_IT+0xb6>
  if ((pData == NULL) || (Size == 0UL))
 800ecfc:	2a00      	cmp	r2, #0
 800ecfe:	bf18      	it	ne
 800ed00:	2900      	cmpne	r1, #0
 800ed02:	d047      	beq.n	800ed94 <HAL_SPI_Receive_IT+0xc0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ed04:	2304      	movs	r3, #4
 800ed06:	f88c 3081 	strb.w	r3, [ip, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ed10:	f8cc 1064 	str.w	r1, [ip, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ed14:	f8ac 2068 	strh.w	r2, [ip, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ed18:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800ed1c:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ed20:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ed24:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  hspi->TxISR       = NULL;
 800ed28:	f8cc 3074 	str.w	r3, [ip, #116]	; 0x74
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ed2c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800ed30:	2b0f      	cmp	r3, #15
 800ed32:	d933      	bls.n	800ed9c <HAL_SPI_Receive_IT+0xc8>
    hspi->RxISR = SPI_RxISR_32BIT;
 800ed34:	4b26      	ldr	r3, [pc, #152]	; (800edd0 <HAL_SPI_Receive_IT+0xfc>)
 800ed36:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed3a:	f5b4 2fc0 	cmp.w	r4, #393216	; 0x60000
 800ed3e:	d037      	beq.n	800edb0 <HAL_SPI_Receive_IT+0xdc>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ed40:	f8dc 1000 	ldr.w	r1, [ip]
 800ed44:	6848      	ldr	r0, [r1, #4]
 800ed46:	4b23      	ldr	r3, [pc, #140]	; (800edd4 <HAL_SPI_Receive_IT+0x100>)
 800ed48:	4003      	ands	r3, r0
 800ed4a:	431a      	orrs	r2, r3
 800ed4c:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800ed4e:	f8dc 2000 	ldr.w	r2, [ip]
 800ed52:	6813      	ldr	r3, [r2, #0]
 800ed54:	f043 0301 	orr.w	r3, r3, #1
 800ed58:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800ed5a:	f8dc 2000 	ldr.w	r2, [ip]
 800ed5e:	6911      	ldr	r1, [r2, #16]
 800ed60:	f240 7349 	movw	r3, #1865	; 0x749
 800ed64:	430b      	orrs	r3, r1
 800ed66:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed68:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800ed6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed70:	d025      	beq.n	800edbe <HAL_SPI_Receive_IT+0xea>
  __HAL_UNLOCK(hspi);
 800ed72:	2000      	movs	r0, #0
 800ed74:	f88c 0080 	strb.w	r0, [ip, #128]	; 0x80
}
 800ed78:	bd10      	pop	{r4, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ed7a:	2304      	movs	r3, #4
 800ed7c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800ed80:	4613      	mov	r3, r2
 800ed82:	460a      	mov	r2, r1
 800ed84:	f7ff fe8c 	bl	800eaa0 <HAL_SPI_TransmitReceive_IT>
 800ed88:	e7f6      	b.n	800ed78 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800ed90:	2002      	movs	r0, #2
 800ed92:	e7f1      	b.n	800ed78 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800ed94:	2300      	movs	r3, #0
 800ed96:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800ed9a:	e7ed      	b.n	800ed78 <HAL_SPI_Receive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed9c:	2b07      	cmp	r3, #7
 800ed9e:	d903      	bls.n	800eda8 <HAL_SPI_Receive_IT+0xd4>
    hspi->RxISR = SPI_RxISR_16BIT;
 800eda0:	4b0d      	ldr	r3, [pc, #52]	; (800edd8 <HAL_SPI_Receive_IT+0x104>)
 800eda2:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800eda6:	e7c8      	b.n	800ed3a <HAL_SPI_Receive_IT+0x66>
    hspi->RxISR = SPI_RxISR_8BIT;
 800eda8:	4b0c      	ldr	r3, [pc, #48]	; (800eddc <HAL_SPI_Receive_IT+0x108>)
 800edaa:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800edae:	e7c4      	b.n	800ed3a <HAL_SPI_Receive_IT+0x66>
    SPI_1LINE_RX(hspi);
 800edb0:	f8dc 1000 	ldr.w	r1, [ip]
 800edb4:	680b      	ldr	r3, [r1, #0]
 800edb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800edba:	600b      	str	r3, [r1, #0]
 800edbc:	e7c0      	b.n	800ed40 <HAL_SPI_Receive_IT+0x6c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800edbe:	f8dc 2000 	ldr.w	r2, [ip]
 800edc2:	6813      	ldr	r3, [r2, #0]
 800edc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800edc8:	6013      	str	r3, [r2, #0]
 800edca:	e7d2      	b.n	800ed72 <HAL_SPI_Receive_IT+0x9e>
  __HAL_LOCK(hspi);
 800edcc:	2002      	movs	r0, #2
 800edce:	e7d3      	b.n	800ed78 <HAL_SPI_Receive_IT+0xa4>
 800edd0:	0800e0eb 	.word	0x0800e0eb
 800edd4:	ffff0000 	.word	0xffff0000
 800edd8:	0800e0bb 	.word	0x0800e0bb
 800eddc:	0800e089 	.word	0x0800e089

0800ede0 <HAL_SPI_TxRxCpltCallback>:
}
 800ede0:	4770      	bx	lr

0800ede2 <HAL_SPI_ErrorCallback>:
}
 800ede2:	4770      	bx	lr

0800ede4 <HAL_SPI_IRQHandler>:
{
 800ede4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800edea:	6806      	ldr	r6, [r0, #0]
 800edec:	f8d6 a010 	ldr.w	sl, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800edf0:	f8d6 9014 	ldr.w	r9, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800edf4:	ea0a 0509 	and.w	r5, sl, r9
  uint32_t cfg1     = hspi->Instance->CFG1;
 800edf8:	f8d6 b008 	ldr.w	fp, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800edfc:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 800ee00:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ee02:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800ee06:	2b04      	cmp	r3, #4
 800ee08:	d03b      	beq.n	800ee82 <HAL_SPI_IRQHandler+0x9e>
  uint32_t handled  = 0UL;
 800ee0a:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ee0c:	f005 0845 	and.w	r8, r5, #69	; 0x45
 800ee10:	f1b8 0f01 	cmp.w	r8, #1
 800ee14:	d03c      	beq.n	800ee90 <HAL_SPI_IRQHandler+0xac>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ee16:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800ee1a:	2a02      	cmp	r2, #2
 800ee1c:	d03d      	beq.n	800ee9a <HAL_SPI_IRQHandler+0xb6>
  if (handled != 0UL)
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d13e      	bne.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ee22:	f015 0f08 	tst.w	r5, #8
 800ee26:	d071      	beq.n	800ef0c <HAL_SPI_IRQHandler+0x128>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ee28:	6822      	ldr	r2, [r4, #0]
 800ee2a:	6993      	ldr	r3, [r2, #24]
 800ee2c:	f043 0308 	orr.w	r3, r3, #8
 800ee30:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ee32:	6822      	ldr	r2, [r4, #0]
 800ee34:	6993      	ldr	r3, [r2, #24]
 800ee36:	f043 0310 	orr.w	r3, r3, #16
 800ee3a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ee3c:	6822      	ldr	r2, [r4, #0]
 800ee3e:	6993      	ldr	r3, [r2, #24]
 800ee40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ee44:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ee46:	6822      	ldr	r2, [r4, #0]
 800ee48:	6913      	ldr	r3, [r2, #16]
 800ee4a:	f023 0308 	bic.w	r3, r3, #8
 800ee4e:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ee50:	6823      	ldr	r3, [r4, #0]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800ee58:	d033      	beq.n	800eec2 <HAL_SPI_IRQHandler+0xde>
    SPI_CloseTransfer(hspi);
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f7ff f9a6 	bl	800e1ac <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800ee60:	2301      	movs	r3, #1
 800ee62:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee66:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d142      	bne.n	800eef4 <HAL_SPI_IRQHandler+0x110>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ee6e:	2f05      	cmp	r7, #5
 800ee70:	d044      	beq.n	800eefc <HAL_SPI_IRQHandler+0x118>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ee72:	2f04      	cmp	r7, #4
 800ee74:	d046      	beq.n	800ef04 <HAL_SPI_IRQHandler+0x120>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ee76:	2f03      	cmp	r7, #3
 800ee78:	d112      	bne.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxCpltCallback(hspi);
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f7f3 fee2 	bl	8002c44 <HAL_SPI_TxCpltCallback>
    return;
 800ee80:	e00e      	b.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
    hspi->TxISR(hspi);
 800ee82:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800ee84:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ee86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ee88:	4620      	mov	r0, r4
 800ee8a:	4798      	blx	r3
    handled = 1UL;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e7bd      	b.n	800ee0c <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800ee90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ee92:	4620      	mov	r0, r4
 800ee94:	4798      	blx	r3
    handled = 1UL;
 800ee96:	4643      	mov	r3, r8
 800ee98:	e7bd      	b.n	800ee16 <HAL_SPI_IRQHandler+0x32>
    hspi->TxISR(hspi);
 800ee9a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	4798      	blx	r3
}
 800eea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eea4:	2b07      	cmp	r3, #7
 800eea6:	d91c      	bls.n	800eee2 <HAL_SPI_IRQHandler+0xfe>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800eea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeaa:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800eeac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800eeae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeb0:	3302      	adds	r3, #2
 800eeb2:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800eeb4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	3b01      	subs	r3, #1
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800eec2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d0c6      	beq.n	800ee5a <HAL_SPI_IRQHandler+0x76>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eecc:	68e3      	ldr	r3, [r4, #12]
 800eece:	2b0f      	cmp	r3, #15
 800eed0:	d9e8      	bls.n	800eea4 <HAL_SPI_IRQHandler+0xc0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800eed2:	6822      	ldr	r2, [r4, #0]
 800eed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eed6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800eed8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800eeda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eedc:	3304      	adds	r3, #4
 800eede:	6663      	str	r3, [r4, #100]	; 0x64
 800eee0:	e7e8      	b.n	800eeb4 <HAL_SPI_IRQHandler+0xd0>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eee2:	6822      	ldr	r2, [r4, #0]
 800eee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eee6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800eeea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800eeec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeee:	3301      	adds	r3, #1
 800eef0:	6663      	str	r3, [r4, #100]	; 0x64
 800eef2:	e7df      	b.n	800eeb4 <HAL_SPI_IRQHandler+0xd0>
      HAL_SPI_ErrorCallback(hspi);
 800eef4:	4620      	mov	r0, r4
 800eef6:	f7ff ff74 	bl	800ede2 <HAL_SPI_ErrorCallback>
      return;
 800eefa:	e7d1      	b.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxRxCpltCallback(hspi);
 800eefc:	4620      	mov	r0, r4
 800eefe:	f7ff ff6f 	bl	800ede0 <HAL_SPI_TxRxCpltCallback>
 800ef02:	e7cd      	b.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_RxCpltCallback(hspi);
 800ef04:	4620      	mov	r0, r4
 800ef06:	f7f3 fe93 	bl	8002c30 <HAL_SPI_RxCpltCallback>
 800ef0a:	e7c9      	b.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ef0c:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800ef10:	d002      	beq.n	800ef18 <HAL_SPI_IRQHandler+0x134>
 800ef12:	f01a 0f08 	tst.w	sl, #8
 800ef16:	d173      	bne.n	800f000 <HAL_SPI_IRQHandler+0x21c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ef18:	f415 7f58 	tst.w	r5, #864	; 0x360
 800ef1c:	d0c0      	beq.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ef1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ef22:	d00a      	beq.n	800ef3a <HAL_SPI_IRQHandler+0x156>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ef24:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ef28:	f043 0304 	orr.w	r3, r3, #4
 800ef2c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef30:	6822      	ldr	r2, [r4, #0]
 800ef32:	6993      	ldr	r3, [r2, #24]
 800ef34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef38:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ef3a:	f415 7f00 	tst.w	r5, #512	; 0x200
 800ef3e:	d00a      	beq.n	800ef56 <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ef40:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ef44:	f043 0301 	orr.w	r3, r3, #1
 800ef48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ef4c:	6822      	ldr	r2, [r4, #0]
 800ef4e:	6993      	ldr	r3, [r2, #24]
 800ef50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ef54:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ef56:	f415 7f80 	tst.w	r5, #256	; 0x100
 800ef5a:	d00a      	beq.n	800ef72 <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ef5c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ef60:	f043 0308 	orr.w	r3, r3, #8
 800ef64:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ef68:	6822      	ldr	r2, [r4, #0]
 800ef6a:	6993      	ldr	r3, [r2, #24]
 800ef6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef70:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ef72:	f015 0f20 	tst.w	r5, #32
 800ef76:	d00a      	beq.n	800ef8e <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ef78:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ef7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef80:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ef84:	6822      	ldr	r2, [r4, #0]
 800ef86:	6993      	ldr	r3, [r2, #24]
 800ef88:	f043 0320 	orr.w	r3, r3, #32
 800ef8c:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef8e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d084      	beq.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
      __HAL_SPI_DISABLE(hspi);
 800ef96:	6822      	ldr	r2, [r4, #0]
 800ef98:	6813      	ldr	r3, [r2, #0]
 800ef9a:	f023 0301 	bic.w	r3, r3, #1
 800ef9e:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800efa0:	6822      	ldr	r2, [r4, #0]
 800efa2:	6911      	ldr	r1, [r2, #16]
 800efa4:	4b1d      	ldr	r3, [pc, #116]	; (800f01c <HAL_SPI_IRQHandler+0x238>)
 800efa6:	400b      	ands	r3, r1
 800efa8:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800efaa:	f40b 4b40 	and.w	fp, fp, #49152	; 0xc000
 800efae:	f5bb 4f40 	cmp.w	fp, #49152	; 0xc000
 800efb2:	d12b      	bne.n	800f00c <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800efb4:	6822      	ldr	r2, [r4, #0]
 800efb6:	6893      	ldr	r3, [r2, #8]
 800efb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800efbc:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800efbe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800efc0:	b15b      	cbz	r3, 800efda <HAL_SPI_IRQHandler+0x1f6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800efc2:	4a17      	ldr	r2, [pc, #92]	; (800f020 <HAL_SPI_IRQHandler+0x23c>)
 800efc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800efc6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800efc8:	f7fb fcd2 	bl	800a970 <HAL_DMA_Abort_IT>
 800efcc:	b128      	cbz	r0, 800efda <HAL_SPI_IRQHandler+0x1f6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800efce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800efd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efd6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800efda:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800efdc:	2b00      	cmp	r3, #0
 800efde:	f43f af5f 	beq.w	800eea0 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800efe2:	4a0f      	ldr	r2, [pc, #60]	; (800f020 <HAL_SPI_IRQHandler+0x23c>)
 800efe4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800efe6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800efe8:	f7fb fcc2 	bl	800a970 <HAL_DMA_Abort_IT>
 800efec:	2800      	cmp	r0, #0
 800efee:	f43f af57 	beq.w	800eea0 <HAL_SPI_IRQHandler+0xbc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800eff2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800eff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800effa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800effe:	e74f      	b.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f000:	6822      	ldr	r2, [r4, #0]
 800f002:	6993      	ldr	r3, [r2, #24]
 800f004:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f008:	6193      	str	r3, [r2, #24]
    return;
 800f00a:	e749      	b.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 800f00c:	2301      	movs	r3, #1
 800f00e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800f012:	4620      	mov	r0, r4
 800f014:	f7ff fee5 	bl	800ede2 <HAL_SPI_ErrorCallback>
    return;
 800f018:	e742      	b.n	800eea0 <HAL_SPI_IRQHandler+0xbc>
 800f01a:	bf00      	nop
 800f01c:	fffffc94 	.word	0xfffffc94
 800f020:	0800f025 	.word	0x0800f025

0800f024 <SPI_DMAAbortOnError>:
{
 800f024:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f026:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800f028:	2300      	movs	r3, #0
 800f02a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800f02e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800f032:	2301      	movs	r3, #1
 800f034:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800f038:	f7ff fed3 	bl	800ede2 <HAL_SPI_ErrorCallback>
}
 800f03c:	bd08      	pop	{r3, pc}

0800f03e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f03e:	4770      	bx	lr

0800f040 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f040:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800f044:	b2db      	uxtb	r3, r3
 800f046:	2b01      	cmp	r3, #1
 800f048:	d13a      	bne.n	800f0c0 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f04a:	2302      	movs	r3, #2
 800f04c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f050:	6802      	ldr	r2, [r0, #0]
 800f052:	68d3      	ldr	r3, [r2, #12]
 800f054:	f043 0301 	orr.w	r3, r3, #1
 800f058:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f05a:	6803      	ldr	r3, [r0, #0]
 800f05c:	4a1a      	ldr	r2, [pc, #104]	; (800f0c8 <HAL_TIM_Base_Start_IT+0x88>)
 800f05e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f062:	bf18      	it	ne
 800f064:	4293      	cmpne	r3, r2
 800f066:	d01d      	beq.n	800f0a4 <HAL_TIM_Base_Start_IT+0x64>
 800f068:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d019      	beq.n	800f0a4 <HAL_TIM_Base_Start_IT+0x64>
 800f070:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f074:	4293      	cmp	r3, r2
 800f076:	d015      	beq.n	800f0a4 <HAL_TIM_Base_Start_IT+0x64>
 800f078:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d011      	beq.n	800f0a4 <HAL_TIM_Base_Start_IT+0x64>
 800f080:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800f084:	4293      	cmp	r3, r2
 800f086:	d00d      	beq.n	800f0a4 <HAL_TIM_Base_Start_IT+0x64>
 800f088:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d009      	beq.n	800f0a4 <HAL_TIM_Base_Start_IT+0x64>
 800f090:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800f094:	4293      	cmp	r3, r2
 800f096:	d005      	beq.n	800f0a4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	f042 0201 	orr.w	r2, r2, #1
 800f09e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0a4:	6899      	ldr	r1, [r3, #8]
 800f0a6:	4a09      	ldr	r2, [pc, #36]	; (800f0cc <HAL_TIM_Base_Start_IT+0x8c>)
 800f0a8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0aa:	2a06      	cmp	r2, #6
 800f0ac:	bf18      	it	ne
 800f0ae:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800f0b2:	d007      	beq.n	800f0c4 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	f042 0201 	orr.w	r2, r2, #1
 800f0ba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f0bc:	2000      	movs	r0, #0
 800f0be:	4770      	bx	lr
    return HAL_ERROR;
 800f0c0:	2001      	movs	r0, #1
 800f0c2:	4770      	bx	lr
  return HAL_OK;
 800f0c4:	2000      	movs	r0, #0
}
 800f0c6:	4770      	bx	lr
 800f0c8:	40010000 	.word	0x40010000
 800f0cc:	00010007 	.word	0x00010007

0800f0d0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f0d0:	4770      	bx	lr

0800f0d2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f0d2:	4770      	bx	lr

0800f0d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f0d4:	4770      	bx	lr

0800f0d6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f0d6:	4770      	bx	lr

0800f0d8 <HAL_TIM_IRQHandler>:
{
 800f0d8:	b510      	push	{r4, lr}
 800f0da:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f0dc:	6803      	ldr	r3, [r0, #0]
 800f0de:	691a      	ldr	r2, [r3, #16]
 800f0e0:	f012 0f02 	tst.w	r2, #2
 800f0e4:	d011      	beq.n	800f10a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f0e6:	68da      	ldr	r2, [r3, #12]
 800f0e8:	f012 0f02 	tst.w	r2, #2
 800f0ec:	d00d      	beq.n	800f10a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f0ee:	f06f 0202 	mvn.w	r2, #2
 800f0f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0f8:	6803      	ldr	r3, [r0, #0]
 800f0fa:	699b      	ldr	r3, [r3, #24]
 800f0fc:	f013 0f03 	tst.w	r3, #3
 800f100:	d079      	beq.n	800f1f6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800f102:	f7ff ffe6 	bl	800f0d2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f106:	2300      	movs	r3, #0
 800f108:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f10a:	6823      	ldr	r3, [r4, #0]
 800f10c:	691a      	ldr	r2, [r3, #16]
 800f10e:	f012 0f04 	tst.w	r2, #4
 800f112:	d012      	beq.n	800f13a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f114:	68da      	ldr	r2, [r3, #12]
 800f116:	f012 0f04 	tst.w	r2, #4
 800f11a:	d00e      	beq.n	800f13a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f11c:	f06f 0204 	mvn.w	r2, #4
 800f120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f122:	2302      	movs	r3, #2
 800f124:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f126:	6823      	ldr	r3, [r4, #0]
 800f128:	699b      	ldr	r3, [r3, #24]
 800f12a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f12e:	d068      	beq.n	800f202 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800f130:	4620      	mov	r0, r4
 800f132:	f7ff ffce 	bl	800f0d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f136:	2300      	movs	r3, #0
 800f138:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f13a:	6823      	ldr	r3, [r4, #0]
 800f13c:	691a      	ldr	r2, [r3, #16]
 800f13e:	f012 0f08 	tst.w	r2, #8
 800f142:	d012      	beq.n	800f16a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f144:	68da      	ldr	r2, [r3, #12]
 800f146:	f012 0f08 	tst.w	r2, #8
 800f14a:	d00e      	beq.n	800f16a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f14c:	f06f 0208 	mvn.w	r2, #8
 800f150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f152:	2304      	movs	r3, #4
 800f154:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f156:	6823      	ldr	r3, [r4, #0]
 800f158:	69db      	ldr	r3, [r3, #28]
 800f15a:	f013 0f03 	tst.w	r3, #3
 800f15e:	d057      	beq.n	800f210 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800f160:	4620      	mov	r0, r4
 800f162:	f7ff ffb6 	bl	800f0d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f166:	2300      	movs	r3, #0
 800f168:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	691a      	ldr	r2, [r3, #16]
 800f16e:	f012 0f10 	tst.w	r2, #16
 800f172:	d012      	beq.n	800f19a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f174:	68da      	ldr	r2, [r3, #12]
 800f176:	f012 0f10 	tst.w	r2, #16
 800f17a:	d00e      	beq.n	800f19a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f17c:	f06f 0210 	mvn.w	r2, #16
 800f180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f182:	2308      	movs	r3, #8
 800f184:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	69db      	ldr	r3, [r3, #28]
 800f18a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f18e:	d046      	beq.n	800f21e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800f190:	4620      	mov	r0, r4
 800f192:	f7ff ff9e 	bl	800f0d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f196:	2300      	movs	r3, #0
 800f198:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f19a:	6823      	ldr	r3, [r4, #0]
 800f19c:	691a      	ldr	r2, [r3, #16]
 800f19e:	f012 0f01 	tst.w	r2, #1
 800f1a2:	d003      	beq.n	800f1ac <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f1a4:	68da      	ldr	r2, [r3, #12]
 800f1a6:	f012 0f01 	tst.w	r2, #1
 800f1aa:	d13f      	bne.n	800f22c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f1ac:	6823      	ldr	r3, [r4, #0]
 800f1ae:	691a      	ldr	r2, [r3, #16]
 800f1b0:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f1b4:	d003      	beq.n	800f1be <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f1b6:	68da      	ldr	r2, [r3, #12]
 800f1b8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f1bc:	d13d      	bne.n	800f23a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	691a      	ldr	r2, [r3, #16]
 800f1c2:	f412 7f80 	tst.w	r2, #256	; 0x100
 800f1c6:	d003      	beq.n	800f1d0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f1c8:	68da      	ldr	r2, [r3, #12]
 800f1ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f1ce:	d13b      	bne.n	800f248 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f1d0:	6823      	ldr	r3, [r4, #0]
 800f1d2:	691a      	ldr	r2, [r3, #16]
 800f1d4:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f1d8:	d003      	beq.n	800f1e2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f1da:	68da      	ldr	r2, [r3, #12]
 800f1dc:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f1e0:	d139      	bne.n	800f256 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f1e2:	6823      	ldr	r3, [r4, #0]
 800f1e4:	691a      	ldr	r2, [r3, #16]
 800f1e6:	f012 0f20 	tst.w	r2, #32
 800f1ea:	d003      	beq.n	800f1f4 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f1ec:	68da      	ldr	r2, [r3, #12]
 800f1ee:	f012 0f20 	tst.w	r2, #32
 800f1f2:	d137      	bne.n	800f264 <HAL_TIM_IRQHandler+0x18c>
}
 800f1f4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1f6:	f7ff ff6b 	bl	800f0d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f7ff ff6a 	bl	800f0d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800f200:	e781      	b.n	800f106 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f202:	4620      	mov	r0, r4
 800f204:	f7ff ff64 	bl	800f0d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f208:	4620      	mov	r0, r4
 800f20a:	f7ff ff63 	bl	800f0d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800f20e:	e792      	b.n	800f136 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f210:	4620      	mov	r0, r4
 800f212:	f7ff ff5d 	bl	800f0d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f216:	4620      	mov	r0, r4
 800f218:	f7ff ff5c 	bl	800f0d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800f21c:	e7a3      	b.n	800f166 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f21e:	4620      	mov	r0, r4
 800f220:	f7ff ff56 	bl	800f0d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f224:	4620      	mov	r0, r4
 800f226:	f7ff ff55 	bl	800f0d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800f22a:	e7b4      	b.n	800f196 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f22c:	f06f 0201 	mvn.w	r2, #1
 800f230:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f232:	4620      	mov	r0, r4
 800f234:	f7f3 fa9e 	bl	8002774 <HAL_TIM_PeriodElapsedCallback>
 800f238:	e7b8      	b.n	800f1ac <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f23a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f23e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800f240:	4620      	mov	r0, r4
 800f242:	f000 f8ca 	bl	800f3da <HAL_TIMEx_BreakCallback>
 800f246:	e7ba      	b.n	800f1be <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f248:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f24c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800f24e:	4620      	mov	r0, r4
 800f250:	f000 f8c4 	bl	800f3dc <HAL_TIMEx_Break2Callback>
 800f254:	e7bc      	b.n	800f1d0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f25a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800f25c:	4620      	mov	r0, r4
 800f25e:	f7ff ff3a 	bl	800f0d6 <HAL_TIM_TriggerCallback>
 800f262:	e7be      	b.n	800f1e2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f264:	f06f 0220 	mvn.w	r2, #32
 800f268:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800f26a:	4620      	mov	r0, r4
 800f26c:	f000 f8b4 	bl	800f3d8 <HAL_TIMEx_CommutCallback>
}
 800f270:	e7c0      	b.n	800f1f4 <HAL_TIM_IRQHandler+0x11c>
	...

0800f274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f274:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f276:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f278:	4a39      	ldr	r2, [pc, #228]	; (800f360 <TIM_Base_SetConfig+0xec>)
 800f27a:	4290      	cmp	r0, r2
 800f27c:	bf14      	ite	ne
 800f27e:	f04f 0e00 	movne.w	lr, #0
 800f282:	f04f 0e01 	moveq.w	lr, #1
 800f286:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800f28a:	bf14      	ite	ne
 800f28c:	4672      	movne	r2, lr
 800f28e:	f04e 0201 	orreq.w	r2, lr, #1
 800f292:	b9aa      	cbnz	r2, 800f2c0 <TIM_Base_SetConfig+0x4c>
 800f294:	4c33      	ldr	r4, [pc, #204]	; (800f364 <TIM_Base_SetConfig+0xf0>)
 800f296:	42a0      	cmp	r0, r4
 800f298:	bf14      	ite	ne
 800f29a:	2400      	movne	r4, #0
 800f29c:	2401      	moveq	r4, #1
 800f29e:	4d32      	ldr	r5, [pc, #200]	; (800f368 <TIM_Base_SetConfig+0xf4>)
 800f2a0:	42a8      	cmp	r0, r5
 800f2a2:	d00d      	beq.n	800f2c0 <TIM_Base_SetConfig+0x4c>
 800f2a4:	b964      	cbnz	r4, 800f2c0 <TIM_Base_SetConfig+0x4c>
 800f2a6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800f2aa:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800f2ae:	42a0      	cmp	r0, r4
 800f2b0:	bf14      	ite	ne
 800f2b2:	2400      	movne	r4, #0
 800f2b4:	2401      	moveq	r4, #1
 800f2b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800f2ba:	42a8      	cmp	r0, r5
 800f2bc:	d000      	beq.n	800f2c0 <TIM_Base_SetConfig+0x4c>
 800f2be:	b11c      	cbz	r4, 800f2c8 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800f2c4:	684c      	ldr	r4, [r1, #4]
 800f2c6:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f2c8:	bb12      	cbnz	r2, 800f310 <TIM_Base_SetConfig+0x9c>
 800f2ca:	4a26      	ldr	r2, [pc, #152]	; (800f364 <TIM_Base_SetConfig+0xf0>)
 800f2cc:	4290      	cmp	r0, r2
 800f2ce:	bf14      	ite	ne
 800f2d0:	2200      	movne	r2, #0
 800f2d2:	2201      	moveq	r2, #1
 800f2d4:	4c24      	ldr	r4, [pc, #144]	; (800f368 <TIM_Base_SetConfig+0xf4>)
 800f2d6:	42a0      	cmp	r0, r4
 800f2d8:	d01a      	beq.n	800f310 <TIM_Base_SetConfig+0x9c>
 800f2da:	b9ca      	cbnz	r2, 800f310 <TIM_Base_SetConfig+0x9c>
 800f2dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f2e0:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800f2e4:	4290      	cmp	r0, r2
 800f2e6:	bf14      	ite	ne
 800f2e8:	2200      	movne	r2, #0
 800f2ea:	2201      	moveq	r2, #1
 800f2ec:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800f2f0:	42a0      	cmp	r0, r4
 800f2f2:	d00d      	beq.n	800f310 <TIM_Base_SetConfig+0x9c>
 800f2f4:	b962      	cbnz	r2, 800f310 <TIM_Base_SetConfig+0x9c>
 800f2f6:	4a1d      	ldr	r2, [pc, #116]	; (800f36c <TIM_Base_SetConfig+0xf8>)
 800f2f8:	4290      	cmp	r0, r2
 800f2fa:	bf14      	ite	ne
 800f2fc:	2200      	movne	r2, #0
 800f2fe:	2201      	moveq	r2, #1
 800f300:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800f304:	42a0      	cmp	r0, r4
 800f306:	d003      	beq.n	800f310 <TIM_Base_SetConfig+0x9c>
 800f308:	b912      	cbnz	r2, 800f310 <TIM_Base_SetConfig+0x9c>
 800f30a:	4a19      	ldr	r2, [pc, #100]	; (800f370 <TIM_Base_SetConfig+0xfc>)
 800f30c:	4290      	cmp	r0, r2
 800f30e:	d104      	bne.n	800f31a <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f310:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f314:	68cb      	ldr	r3, [r1, #12]
 800f316:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f31a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f31e:	694a      	ldr	r2, [r1, #20]
 800f320:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800f322:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f324:	688a      	ldr	r2, [r1, #8]
 800f326:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f328:	680a      	ldr	r2, [r1, #0]
 800f32a:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f32c:	4a11      	ldr	r2, [pc, #68]	; (800f374 <TIM_Base_SetConfig+0x100>)
 800f32e:	4290      	cmp	r0, r2
 800f330:	bf14      	ite	ne
 800f332:	4673      	movne	r3, lr
 800f334:	f04e 0301 	orreq.w	r3, lr, #1
 800f338:	b963      	cbnz	r3, 800f354 <TIM_Base_SetConfig+0xe0>
 800f33a:	4b0c      	ldr	r3, [pc, #48]	; (800f36c <TIM_Base_SetConfig+0xf8>)
 800f33c:	4298      	cmp	r0, r3
 800f33e:	bf14      	ite	ne
 800f340:	2300      	movne	r3, #0
 800f342:	2301      	moveq	r3, #1
 800f344:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800f348:	4290      	cmp	r0, r2
 800f34a:	d003      	beq.n	800f354 <TIM_Base_SetConfig+0xe0>
 800f34c:	b913      	cbnz	r3, 800f354 <TIM_Base_SetConfig+0xe0>
 800f34e:	4b08      	ldr	r3, [pc, #32]	; (800f370 <TIM_Base_SetConfig+0xfc>)
 800f350:	4298      	cmp	r0, r3
 800f352:	d101      	bne.n	800f358 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f354:	690b      	ldr	r3, [r1, #16]
 800f356:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f358:	2301      	movs	r3, #1
 800f35a:	6143      	str	r3, [r0, #20]
}
 800f35c:	bd30      	pop	{r4, r5, pc}
 800f35e:	bf00      	nop
 800f360:	40010000 	.word	0x40010000
 800f364:	40000800 	.word	0x40000800
 800f368:	40000400 	.word	0x40000400
 800f36c:	40014400 	.word	0x40014400
 800f370:	40014800 	.word	0x40014800
 800f374:	40010400 	.word	0x40010400

0800f378 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800f378:	b360      	cbz	r0, 800f3d4 <HAL_TIM_Base_Init+0x5c>
{
 800f37a:	b510      	push	{r4, lr}
 800f37c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800f37e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800f382:	b313      	cbz	r3, 800f3ca <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800f384:	2302      	movs	r3, #2
 800f386:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f38a:	4621      	mov	r1, r4
 800f38c:	f851 0b04 	ldr.w	r0, [r1], #4
 800f390:	f7ff ff70 	bl	800f274 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f394:	2301      	movs	r3, #1
 800f396:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f39a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f39e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f3a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f3a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f3aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f3b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f3ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f3be:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f3c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800f3c6:	2000      	movs	r0, #0
}
 800f3c8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800f3ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800f3ce:	f7ff fe36 	bl	800f03e <HAL_TIM_Base_MspInit>
 800f3d2:	e7d7      	b.n	800f384 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800f3d4:	2001      	movs	r0, #1
}
 800f3d6:	4770      	bx	lr

0800f3d8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f3d8:	4770      	bx	lr

0800f3da <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f3da:	4770      	bx	lr

0800f3dc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f3dc:	4770      	bx	lr

0800f3de <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f3de:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800f3e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f3e4:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f3e6:	f001 ff9d 	bl	8011324 <xTaskGetSchedulerState>
 800f3ea:	2801      	cmp	r0, #1
 800f3ec:	d100      	bne.n	800f3f0 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800f3ee:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800f3f0:	f000 fc80 	bl	800fcf4 <xPortSysTickHandler>
}
 800f3f4:	e7fb      	b.n	800f3ee <SysTick_Handler+0x10>
	...

0800f3f8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3f8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f3fc:	b92b      	cbnz	r3, 800f40a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800f3fe:	4b06      	ldr	r3, [pc, #24]	; (800f418 <osKernelInitialize+0x20>)
 800f400:	6818      	ldr	r0, [r3, #0]
 800f402:	b928      	cbnz	r0, 800f410 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f404:	2201      	movs	r2, #1
 800f406:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f408:	4770      	bx	lr
    stat = osErrorISR;
 800f40a:	f06f 0005 	mvn.w	r0, #5
 800f40e:	4770      	bx	lr
    } else {
      stat = osError;
 800f410:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	24007310 	.word	0x24007310

0800f41c <osKernelStart>:
 800f41c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f420:	b973      	cbnz	r3, 800f440 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800f422:	4b0a      	ldr	r3, [pc, #40]	; (800f44c <osKernelStart+0x30>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b01      	cmp	r3, #1
 800f428:	d10d      	bne.n	800f446 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800f42a:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f42c:	2400      	movs	r4, #0
 800f42e:	4b08      	ldr	r3, [pc, #32]	; (800f450 <osKernelStart+0x34>)
 800f430:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f432:	4b06      	ldr	r3, [pc, #24]	; (800f44c <osKernelStart+0x30>)
 800f434:	2202      	movs	r2, #2
 800f436:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f438:	f001 fcea 	bl	8010e10 <vTaskStartScheduler>
      stat = osOK;
 800f43c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800f43e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800f440:	f06f 0005 	mvn.w	r0, #5
 800f444:	4770      	bx	lr
      stat = osError;
 800f446:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f44a:	4770      	bx	lr
 800f44c:	24007310 	.word	0x24007310
 800f450:	e000ed00 	.word	0xe000ed00

0800f454 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f456:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f458:	2400      	movs	r4, #0
 800f45a:	9405      	str	r4, [sp, #20]
 800f45c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800f460:	bb74      	cbnz	r4, 800f4c0 <osThreadNew+0x6c>
 800f462:	b368      	cbz	r0, 800f4c0 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800f464:	b322      	cbz	r2, 800f4b0 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800f466:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800f468:	6993      	ldr	r3, [r2, #24]
 800f46a:	b903      	cbnz	r3, 800f46e <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800f46c:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f46e:	1e5c      	subs	r4, r3, #1
 800f470:	2c37      	cmp	r4, #55	; 0x37
 800f472:	d849      	bhi.n	800f508 <osThreadNew+0xb4>
 800f474:	6854      	ldr	r4, [r2, #4]
 800f476:	f014 0f01 	tst.w	r4, #1
 800f47a:	d147      	bne.n	800f50c <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800f47c:	6956      	ldr	r6, [r2, #20]
 800f47e:	b16e      	cbz	r6, 800f49c <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f480:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f484:	6894      	ldr	r4, [r2, #8]
 800f486:	b12c      	cbz	r4, 800f494 <osThreadNew+0x40>
 800f488:	68d7      	ldr	r7, [r2, #12]
 800f48a:	2fbb      	cmp	r7, #187	; 0xbb
 800f48c:	d902      	bls.n	800f494 <osThreadNew+0x40>
 800f48e:	6917      	ldr	r7, [r2, #16]
 800f490:	b107      	cbz	r7, 800f494 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f492:	b9c6      	cbnz	r6, 800f4c6 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f494:	b12c      	cbz	r4, 800f4a2 <osThreadNew+0x4e>
    mem  = -1;
 800f496:	f04f 34ff 	mov.w	r4, #4294967295
 800f49a:	e00e      	b.n	800f4ba <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800f49c:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800f4a0:	e7f0      	b.n	800f484 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f4a2:	68d4      	ldr	r4, [r2, #12]
 800f4a4:	b98c      	cbnz	r4, 800f4ca <osThreadNew+0x76>
 800f4a6:	6914      	ldr	r4, [r2, #16]
 800f4a8:	b194      	cbz	r4, 800f4d0 <osThreadNew+0x7c>
    mem  = -1;
 800f4aa:	f04f 34ff 	mov.w	r4, #4294967295
 800f4ae:	e004      	b.n	800f4ba <osThreadNew+0x66>
    name = NULL;
 800f4b0:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800f4b2:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800f4b4:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800f4b6:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800f4ba:	2c01      	cmp	r4, #1
 800f4bc:	d00a      	beq.n	800f4d4 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800f4be:	b1ac      	cbz	r4, 800f4ec <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f4c0:	9805      	ldr	r0, [sp, #20]
}
 800f4c2:	b007      	add	sp, #28
 800f4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800f4c6:	2401      	movs	r4, #1
 800f4c8:	e7f7      	b.n	800f4ba <osThreadNew+0x66>
    mem  = -1;
 800f4ca:	f04f 34ff 	mov.w	r4, #4294967295
 800f4ce:	e7f4      	b.n	800f4ba <osThreadNew+0x66>
          mem = 0;
 800f4d0:	2400      	movs	r4, #0
 800f4d2:	e7f2      	b.n	800f4ba <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f4d4:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f4d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f4d8:	9202      	str	r2, [sp, #8]
 800f4da:	9401      	str	r4, [sp, #4]
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	460b      	mov	r3, r1
 800f4e0:	4662      	mov	r2, ip
 800f4e2:	4629      	mov	r1, r5
 800f4e4:	f001 fc24 	bl	8010d30 <xTaskCreateStatic>
 800f4e8:	9005      	str	r0, [sp, #20]
 800f4ea:	e7e9      	b.n	800f4c0 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f4ec:	aa05      	add	r2, sp, #20
 800f4ee:	9201      	str	r2, [sp, #4]
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	fa1f f28c 	uxth.w	r2, ip
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	f001 fc54 	bl	8010da6 <xTaskCreate>
 800f4fe:	2801      	cmp	r0, #1
 800f500:	d0de      	beq.n	800f4c0 <osThreadNew+0x6c>
            hTask = NULL;
 800f502:	2300      	movs	r3, #0
 800f504:	9305      	str	r3, [sp, #20]
 800f506:	e7db      	b.n	800f4c0 <osThreadNew+0x6c>
        return (NULL);
 800f508:	2000      	movs	r0, #0
 800f50a:	e7da      	b.n	800f4c2 <osThreadNew+0x6e>
 800f50c:	2000      	movs	r0, #0
 800f50e:	e7d8      	b.n	800f4c2 <osThreadNew+0x6e>

0800f510 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f510:	b570      	push	{r4, r5, r6, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d14d      	bne.n	800f5b8 <osSemaphoreNew+0xa8>
 800f51c:	460e      	mov	r6, r1
 800f51e:	4614      	mov	r4, r2
 800f520:	4288      	cmp	r0, r1
 800f522:	bf34      	ite	cc
 800f524:	2300      	movcc	r3, #0
 800f526:	2301      	movcs	r3, #1
 800f528:	2800      	cmp	r0, #0
 800f52a:	d049      	beq.n	800f5c0 <osSemaphoreNew+0xb0>
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d047      	beq.n	800f5c0 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800f530:	b14a      	cbz	r2, 800f546 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f532:	6895      	ldr	r5, [r2, #8]
 800f534:	b115      	cbz	r5, 800f53c <osSemaphoreNew+0x2c>
 800f536:	68d3      	ldr	r3, [r2, #12]
 800f538:	2b4f      	cmp	r3, #79	; 0x4f
 800f53a:	d814      	bhi.n	800f566 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f53c:	2d00      	cmp	r5, #0
 800f53e:	d141      	bne.n	800f5c4 <osSemaphoreNew+0xb4>
 800f540:	68e3      	ldr	r3, [r4, #12]
 800f542:	b10b      	cbz	r3, 800f548 <osSemaphoreNew+0x38>
 800f544:	e039      	b.n	800f5ba <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800f546:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800f548:	2801      	cmp	r0, #1
 800f54a:	d00e      	beq.n	800f56a <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800f54c:	bb73      	cbnz	r3, 800f5ac <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f54e:	4631      	mov	r1, r6
 800f550:	f000 fe49 	bl	80101e6 <xQueueCreateCountingSemaphore>
 800f554:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f556:	b385      	cbz	r5, 800f5ba <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800f558:	b104      	cbz	r4, 800f55c <osSemaphoreNew+0x4c>
          name = attr->name;
 800f55a:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f55c:	4621      	mov	r1, r4
 800f55e:	4628      	mov	r0, r5
 800f560:	f001 f9d8 	bl	8010914 <vQueueAddToRegistry>
 800f564:	e029      	b.n	800f5ba <osSemaphoreNew+0xaa>
        mem = 1;
 800f566:	2301      	movs	r3, #1
 800f568:	e7ee      	b.n	800f548 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800f56a:	b9b3      	cbnz	r3, 800f59a <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800f56c:	2203      	movs	r2, #3
 800f56e:	2100      	movs	r1, #0
 800f570:	2001      	movs	r0, #1
 800f572:	f000 fdf1 	bl	8010158 <xQueueGenericCreate>
 800f576:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f578:	2d00      	cmp	r5, #0
 800f57a:	bf18      	it	ne
 800f57c:	2e00      	cmpne	r6, #0
 800f57e:	d0ea      	beq.n	800f556 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f580:	2300      	movs	r3, #0
 800f582:	461a      	mov	r2, r3
 800f584:	4619      	mov	r1, r3
 800f586:	4628      	mov	r0, r5
 800f588:	f000 fe4b 	bl	8010222 <xQueueGenericSend>
 800f58c:	2801      	cmp	r0, #1
 800f58e:	d0e2      	beq.n	800f556 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800f590:	4628      	mov	r0, r5
 800f592:	f001 f9e9 	bl	8010968 <vQueueDelete>
            hSemaphore = NULL;
 800f596:	2500      	movs	r5, #0
 800f598:	e00f      	b.n	800f5ba <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f59a:	68a3      	ldr	r3, [r4, #8]
 800f59c:	2203      	movs	r2, #3
 800f59e:	9200      	str	r2, [sp, #0]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	4611      	mov	r1, r2
 800f5a4:	f000 fd85 	bl	80100b2 <xQueueGenericCreateStatic>
 800f5a8:	4605      	mov	r5, r0
 800f5aa:	e7e5      	b.n	800f578 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f5ac:	68a2      	ldr	r2, [r4, #8]
 800f5ae:	4631      	mov	r1, r6
 800f5b0:	f000 fdf6 	bl	80101a0 <xQueueCreateCountingSemaphoreStatic>
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	e7ce      	b.n	800f556 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800f5b8:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	b002      	add	sp, #8
 800f5be:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800f5c0:	2500      	movs	r5, #0
 800f5c2:	e7fa      	b.n	800f5ba <osSemaphoreNew+0xaa>
 800f5c4:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800f5c6:	e7f8      	b.n	800f5ba <osSemaphoreNew+0xaa>

0800f5c8 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f5c8:	b320      	cbz	r0, 800f614 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f5ca:	b510      	push	{r4, lr}
 800f5cc:	b082      	sub	sp, #8
 800f5ce:	460c      	mov	r4, r1
 800f5d0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f5d4:	b1b3      	cbz	r3, 800f604 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800f5d6:	bb01      	cbnz	r1, 800f61a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800f5d8:	2100      	movs	r1, #0
 800f5da:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f5dc:	aa01      	add	r2, sp, #4
 800f5de:	f001 f926 	bl	801082e <xQueueReceiveFromISR>
 800f5e2:	2801      	cmp	r0, #1
 800f5e4:	d11c      	bne.n	800f620 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f5e6:	9801      	ldr	r0, [sp, #4]
 800f5e8:	b150      	cbz	r0, 800f600 <osSemaphoreAcquire+0x38>
 800f5ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f5ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f5f6:	f3bf 8f4f 	dsb	sy
 800f5fa:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f5fe:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f600:	b002      	add	sp, #8
 800f602:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f604:	f001 f840 	bl	8010688 <xQueueSemaphoreTake>
 800f608:	2801      	cmp	r0, #1
 800f60a:	d00c      	beq.n	800f626 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800f60c:	b16c      	cbz	r4, 800f62a <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800f60e:	f06f 0001 	mvn.w	r0, #1
 800f612:	e7f5      	b.n	800f600 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800f614:	f06f 0003 	mvn.w	r0, #3
}
 800f618:	4770      	bx	lr
      stat = osErrorParameter;
 800f61a:	f06f 0003 	mvn.w	r0, #3
 800f61e:	e7ef      	b.n	800f600 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800f620:	f06f 0002 	mvn.w	r0, #2
 800f624:	e7ec      	b.n	800f600 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800f626:	2000      	movs	r0, #0
 800f628:	e7ea      	b.n	800f600 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800f62a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f62e:	e7e7      	b.n	800f600 <osSemaphoreAcquire+0x38>

0800f630 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f630:	b320      	cbz	r0, 800f67c <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f632:	b500      	push	{lr}
 800f634:	b083      	sub	sp, #12
 800f636:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f63a:	b1a3      	cbz	r3, 800f666 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800f63c:	2300      	movs	r3, #0
 800f63e:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f640:	a901      	add	r1, sp, #4
 800f642:	f000 ff19 	bl	8010478 <xQueueGiveFromISR>
 800f646:	2801      	cmp	r0, #1
 800f648:	d11b      	bne.n	800f682 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800f64a:	9801      	ldr	r0, [sp, #4]
 800f64c:	b198      	cbz	r0, 800f676 <osSemaphoreRelease+0x46>
 800f64e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f656:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f65a:	f3bf 8f4f 	dsb	sy
 800f65e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f662:	2000      	movs	r0, #0
 800f664:	e007      	b.n	800f676 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f666:	2300      	movs	r3, #0
 800f668:	461a      	mov	r2, r3
 800f66a:	4619      	mov	r1, r3
 800f66c:	f000 fdd9 	bl	8010222 <xQueueGenericSend>
 800f670:	2801      	cmp	r0, #1
 800f672:	d109      	bne.n	800f688 <osSemaphoreRelease+0x58>
  stat = osOK;
 800f674:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800f676:	b003      	add	sp, #12
 800f678:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800f67c:	f06f 0003 	mvn.w	r0, #3
}
 800f680:	4770      	bx	lr
      stat = osErrorResource;
 800f682:	f06f 0002 	mvn.w	r0, #2
 800f686:	e7f6      	b.n	800f676 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800f688:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f68c:	e7f3      	b.n	800f676 <osSemaphoreRelease+0x46>

0800f68e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f68e:	b570      	push	{r4, r5, r6, lr}
 800f690:	b082      	sub	sp, #8
 800f692:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f696:	2b00      	cmp	r3, #0
 800f698:	d13d      	bne.n	800f716 <osMessageQueueNew+0x88>
 800f69a:	4614      	mov	r4, r2
 800f69c:	1e0b      	subs	r3, r1, #0
 800f69e:	bf18      	it	ne
 800f6a0:	2301      	movne	r3, #1
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	d03b      	beq.n	800f71e <osMessageQueueNew+0x90>
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d039      	beq.n	800f71e <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 800f6aa:	b36a      	cbz	r2, 800f708 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f6ac:	6893      	ldr	r3, [r2, #8]
 800f6ae:	b14b      	cbz	r3, 800f6c4 <osMessageQueueNew+0x36>
 800f6b0:	68d2      	ldr	r2, [r2, #12]
 800f6b2:	2a4f      	cmp	r2, #79	; 0x4f
 800f6b4:	d906      	bls.n	800f6c4 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f6b6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f6b8:	b122      	cbz	r2, 800f6c4 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f6ba:	fb01 f500 	mul.w	r5, r1, r0
 800f6be:	6966      	ldr	r6, [r4, #20]
 800f6c0:	42ae      	cmp	r6, r5
 800f6c2:	d21b      	bcs.n	800f6fc <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f6c4:	b173      	cbz	r3, 800f6e4 <osMessageQueueNew+0x56>
    mem = -1;
 800f6c6:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800f6ca:	bb53      	cbnz	r3, 800f722 <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f000 fd43 	bl	8010158 <xQueueGenericCreate>
 800f6d2:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f6d4:	b305      	cbz	r5, 800f718 <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 800f6d6:	b104      	cbz	r4, 800f6da <osMessageQueueNew+0x4c>
        name = attr->name;
 800f6d8:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800f6da:	4621      	mov	r1, r4
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f001 f919 	bl	8010914 <vQueueAddToRegistry>
 800f6e2:	e019      	b.n	800f718 <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f6e4:	68e3      	ldr	r3, [r4, #12]
 800f6e6:	b98b      	cbnz	r3, 800f70c <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f6e8:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f6ea:	b113      	cbz	r3, 800f6f2 <osMessageQueueNew+0x64>
    mem = -1;
 800f6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f6f0:	e7eb      	b.n	800f6ca <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f6f2:	6963      	ldr	r3, [r4, #20]
 800f6f4:	b16b      	cbz	r3, 800f712 <osMessageQueueNew+0x84>
    mem = -1;
 800f6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f6fa:	e7e6      	b.n	800f6ca <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f6fc:	2500      	movs	r5, #0
 800f6fe:	9500      	str	r5, [sp, #0]
 800f700:	f000 fcd7 	bl	80100b2 <xQueueGenericCreateStatic>
 800f704:	4605      	mov	r5, r0
 800f706:	e7e5      	b.n	800f6d4 <osMessageQueueNew+0x46>
      mem = 0;
 800f708:	2300      	movs	r3, #0
 800f70a:	e7de      	b.n	800f6ca <osMessageQueueNew+0x3c>
    mem = -1;
 800f70c:	f04f 33ff 	mov.w	r3, #4294967295
 800f710:	e7db      	b.n	800f6ca <osMessageQueueNew+0x3c>
          mem = 0;
 800f712:	2300      	movs	r3, #0
 800f714:	e7d9      	b.n	800f6ca <osMessageQueueNew+0x3c>
  hQueue = NULL;
 800f716:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800f718:	4628      	mov	r0, r5
 800f71a:	b002      	add	sp, #8
 800f71c:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800f71e:	2500      	movs	r5, #0
 800f720:	e7fa      	b.n	800f718 <osMessageQueueNew+0x8a>
 800f722:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800f724:	e7f8      	b.n	800f718 <osMessageQueueNew+0x8a>

0800f726 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f726:	b510      	push	{r4, lr}
 800f728:	b082      	sub	sp, #8
 800f72a:	461c      	mov	r4, r3
 800f72c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f730:	b1d3      	cbz	r3, 800f768 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f732:	2900      	cmp	r1, #0
 800f734:	bf18      	it	ne
 800f736:	2800      	cmpne	r0, #0
 800f738:	d024      	beq.n	800f784 <osMessageQueuePut+0x5e>
 800f73a:	bb34      	cbnz	r4, 800f78a <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800f73c:	2300      	movs	r3, #0
 800f73e:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f740:	aa01      	add	r2, sp, #4
 800f742:	f000 fe32 	bl	80103aa <xQueueGenericSendFromISR>
 800f746:	2801      	cmp	r0, #1
 800f748:	d122      	bne.n	800f790 <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f74a:	9801      	ldr	r0, [sp, #4]
 800f74c:	b150      	cbz	r0, 800f764 <osMessageQueuePut+0x3e>
 800f74e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f756:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f762:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f764:	b002      	add	sp, #8
 800f766:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f768:	2900      	cmp	r1, #0
 800f76a:	bf18      	it	ne
 800f76c:	2800      	cmpne	r0, #0
 800f76e:	d012      	beq.n	800f796 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f770:	2300      	movs	r3, #0
 800f772:	4622      	mov	r2, r4
 800f774:	f000 fd55 	bl	8010222 <xQueueGenericSend>
 800f778:	2801      	cmp	r0, #1
 800f77a:	d00f      	beq.n	800f79c <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 800f77c:	b184      	cbz	r4, 800f7a0 <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 800f77e:	f06f 0001 	mvn.w	r0, #1
 800f782:	e7ef      	b.n	800f764 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f784:	f06f 0003 	mvn.w	r0, #3
 800f788:	e7ec      	b.n	800f764 <osMessageQueuePut+0x3e>
 800f78a:	f06f 0003 	mvn.w	r0, #3
 800f78e:	e7e9      	b.n	800f764 <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 800f790:	f06f 0002 	mvn.w	r0, #2
 800f794:	e7e6      	b.n	800f764 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f796:	f06f 0003 	mvn.w	r0, #3
 800f79a:	e7e3      	b.n	800f764 <osMessageQueuePut+0x3e>
  stat = osOK;
 800f79c:	2000      	movs	r0, #0
 800f79e:	e7e1      	b.n	800f764 <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 800f7a0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f7a4:	e7de      	b.n	800f764 <osMessageQueuePut+0x3e>

0800f7a6 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f7a6:	b510      	push	{r4, lr}
 800f7a8:	b082      	sub	sp, #8
 800f7aa:	461c      	mov	r4, r3
 800f7ac:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f7b0:	b1d3      	cbz	r3, 800f7e8 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f7b2:	2900      	cmp	r1, #0
 800f7b4:	bf18      	it	ne
 800f7b6:	2800      	cmpne	r0, #0
 800f7b8:	d023      	beq.n	800f802 <osMessageQueueGet+0x5c>
 800f7ba:	bb2c      	cbnz	r4, 800f808 <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f7c0:	aa01      	add	r2, sp, #4
 800f7c2:	f001 f834 	bl	801082e <xQueueReceiveFromISR>
 800f7c6:	2801      	cmp	r0, #1
 800f7c8:	d121      	bne.n	800f80e <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f7ca:	9801      	ldr	r0, [sp, #4]
 800f7cc:	b150      	cbz	r0, 800f7e4 <osMessageQueueGet+0x3e>
 800f7ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f7da:	f3bf 8f4f 	dsb	sy
 800f7de:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f7e2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f7e4:	b002      	add	sp, #8
 800f7e6:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f7e8:	2900      	cmp	r1, #0
 800f7ea:	bf18      	it	ne
 800f7ec:	2800      	cmpne	r0, #0
 800f7ee:	d011      	beq.n	800f814 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f7f0:	4622      	mov	r2, r4
 800f7f2:	f000 fe9a 	bl	801052a <xQueueReceive>
 800f7f6:	2801      	cmp	r0, #1
 800f7f8:	d00f      	beq.n	800f81a <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 800f7fa:	b184      	cbz	r4, 800f81e <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 800f7fc:	f06f 0001 	mvn.w	r0, #1
 800f800:	e7f0      	b.n	800f7e4 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800f802:	f06f 0003 	mvn.w	r0, #3
 800f806:	e7ed      	b.n	800f7e4 <osMessageQueueGet+0x3e>
 800f808:	f06f 0003 	mvn.w	r0, #3
 800f80c:	e7ea      	b.n	800f7e4 <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 800f80e:	f06f 0002 	mvn.w	r0, #2
 800f812:	e7e7      	b.n	800f7e4 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800f814:	f06f 0003 	mvn.w	r0, #3
 800f818:	e7e4      	b.n	800f7e4 <osMessageQueueGet+0x3e>
  stat = osOK;
 800f81a:	2000      	movs	r0, #0
 800f81c:	e7e2      	b.n	800f7e4 <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 800f81e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f822:	e7df      	b.n	800f7e4 <osMessageQueueGet+0x3e>

0800f824 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 800f824:	b148      	cbz	r0, 800f83a <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800f826:	b508      	push	{r3, lr}
 800f828:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 800f82c:	b112      	cbz	r2, 800f834 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800f82e:	f001 f865 	bl	80108fc <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 800f832:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 800f834:	f001 f84f 	bl	80108d6 <uxQueueMessagesWaiting>
 800f838:	e7fb      	b.n	800f832 <osMessageQueueGetCount+0xe>
    count = 0U;
 800f83a:	2000      	movs	r0, #0
}
 800f83c:	4770      	bx	lr
	...

0800f840 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f840:	4b03      	ldr	r3, [pc, #12]	; (800f850 <vApplicationGetIdleTaskMemory+0x10>)
 800f842:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f844:	4b03      	ldr	r3, [pc, #12]	; (800f854 <vApplicationGetIdleTaskMemory+0x14>)
 800f846:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f848:	2380      	movs	r3, #128	; 0x80
 800f84a:	6013      	str	r3, [r2, #0]
}
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop
 800f850:	24007254 	.word	0x24007254
 800f854:	24007054 	.word	0x24007054

0800f858 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f858:	4b03      	ldr	r3, [pc, #12]	; (800f868 <vApplicationGetTimerTaskMemory+0x10>)
 800f85a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f85c:	4b03      	ldr	r3, [pc, #12]	; (800f86c <vApplicationGetTimerTaskMemory+0x14>)
 800f85e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f860:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f864:	6013      	str	r3, [r2, #0]
}
 800f866:	4770      	bx	lr
 800f868:	24007714 	.word	0x24007714
 800f86c:	24007314 	.word	0x24007314

0800f870 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f870:	4a12      	ldr	r2, [pc, #72]	; (800f8bc <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f872:	f012 0f07 	tst.w	r2, #7
 800f876:	d01e      	beq.n	800f8b6 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f878:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f87a:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f87e:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 800f882:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f884:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f886:	480e      	ldr	r0, [pc, #56]	; (800f8c0 <prvHeapInit+0x50>)
 800f888:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f88a:	2100      	movs	r1, #0
 800f88c:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f88e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800f890:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f892:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800f896:	480b      	ldr	r0, [pc, #44]	; (800f8c4 <prvHeapInit+0x54>)
 800f898:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800f89a:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f89c:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f89e:	1a99      	subs	r1, r3, r2
 800f8a0:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f8a2:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f8a4:	4b08      	ldr	r3, [pc, #32]	; (800f8c8 <prvHeapInit+0x58>)
 800f8a6:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f8a8:	4b08      	ldr	r3, [pc, #32]	; (800f8cc <prvHeapInit+0x5c>)
 800f8aa:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f8ac:	4b08      	ldr	r3, [pc, #32]	; (800f8d0 <prvHeapInit+0x60>)
 800f8ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f8b2:	601a      	str	r2, [r3, #0]
}
 800f8b4:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f8b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8ba:	e7e4      	b.n	800f886 <prvHeapInit+0x16>
 800f8bc:	240077d4 	.word	0x240077d4
 800f8c0:	2400f7e8 	.word	0x2400f7e8
 800f8c4:	240077d0 	.word	0x240077d0
 800f8c8:	2400f7dc 	.word	0x2400f7dc
 800f8cc:	2400f7d8 	.word	0x2400f7d8
 800f8d0:	2400f7d4 	.word	0x2400f7d4

0800f8d4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f8d4:	4b16      	ldr	r3, [pc, #88]	; (800f930 <prvInsertBlockIntoFreeList+0x5c>)
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4283      	cmp	r3, r0
 800f8dc:	d3fb      	bcc.n	800f8d6 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f8de:	6851      	ldr	r1, [r2, #4]
 800f8e0:	eb02 0c01 	add.w	ip, r2, r1
 800f8e4:	4584      	cmp	ip, r0
 800f8e6:	d009      	beq.n	800f8fc <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f8e8:	6841      	ldr	r1, [r0, #4]
 800f8ea:	eb00 0c01 	add.w	ip, r0, r1
 800f8ee:	4563      	cmp	r3, ip
 800f8f0:	d009      	beq.n	800f906 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f8f2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f8f4:	4290      	cmp	r0, r2
 800f8f6:	d019      	beq.n	800f92c <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f8f8:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800f8fa:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f8fc:	6840      	ldr	r0, [r0, #4]
 800f8fe:	4401      	add	r1, r0
 800f900:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800f902:	4610      	mov	r0, r2
 800f904:	e7f0      	b.n	800f8e8 <prvInsertBlockIntoFreeList+0x14>
{
 800f906:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f908:	4c0a      	ldr	r4, [pc, #40]	; (800f934 <prvInsertBlockIntoFreeList+0x60>)
 800f90a:	6824      	ldr	r4, [r4, #0]
 800f90c:	42a3      	cmp	r3, r4
 800f90e:	d00b      	beq.n	800f928 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	4419      	add	r1, r3
 800f914:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f916:	6813      	ldr	r3, [r2, #0]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800f91c:	4290      	cmp	r0, r2
 800f91e:	d000      	beq.n	800f922 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f920:	6010      	str	r0, [r2, #0]
	}
}
 800f922:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f926:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f928:	6004      	str	r4, [r0, #0]
 800f92a:	e7f7      	b.n	800f91c <prvInsertBlockIntoFreeList+0x48>
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	2400f7e8 	.word	0x2400f7e8
 800f934:	240077d0 	.word	0x240077d0

0800f938 <pvPortMalloc>:
{
 800f938:	b570      	push	{r4, r5, r6, lr}
 800f93a:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800f93c:	f001 fabe 	bl	8010ebc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f940:	4b36      	ldr	r3, [pc, #216]	; (800fa1c <pvPortMalloc+0xe4>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	b1a3      	cbz	r3, 800f970 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f946:	4b36      	ldr	r3, [pc, #216]	; (800fa20 <pvPortMalloc+0xe8>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	421d      	tst	r5, r3
 800f94c:	d14e      	bne.n	800f9ec <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800f94e:	b135      	cbz	r5, 800f95e <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800f950:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f952:	f015 0f07 	tst.w	r5, #7
 800f956:	d002      	beq.n	800f95e <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f958:	f025 0507 	bic.w	r5, r5, #7
 800f95c:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f95e:	2d00      	cmp	r5, #0
 800f960:	d046      	beq.n	800f9f0 <pvPortMalloc+0xb8>
 800f962:	4b30      	ldr	r3, [pc, #192]	; (800fa24 <pvPortMalloc+0xec>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	42ab      	cmp	r3, r5
 800f968:	d351      	bcc.n	800fa0e <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800f96a:	4a2f      	ldr	r2, [pc, #188]	; (800fa28 <pvPortMalloc+0xf0>)
 800f96c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f96e:	e004      	b.n	800f97a <pvPortMalloc+0x42>
			prvHeapInit();
 800f970:	f7ff ff7e 	bl	800f870 <prvHeapInit>
 800f974:	e7e7      	b.n	800f946 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800f976:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800f978:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f97a:	6863      	ldr	r3, [r4, #4]
 800f97c:	42ab      	cmp	r3, r5
 800f97e:	d202      	bcs.n	800f986 <pvPortMalloc+0x4e>
 800f980:	6823      	ldr	r3, [r4, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d1f7      	bne.n	800f976 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800f986:	4b25      	ldr	r3, [pc, #148]	; (800fa1c <pvPortMalloc+0xe4>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	42a3      	cmp	r3, r4
 800f98c:	d041      	beq.n	800fa12 <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f98e:	6816      	ldr	r6, [r2, #0]
 800f990:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f992:	6823      	ldr	r3, [r4, #0]
 800f994:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f996:	6863      	ldr	r3, [r4, #4]
 800f998:	1b5b      	subs	r3, r3, r5
 800f99a:	2b10      	cmp	r3, #16
 800f99c:	d910      	bls.n	800f9c0 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f99e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9a0:	f010 0f07 	tst.w	r0, #7
 800f9a4:	d008      	beq.n	800f9b8 <pvPortMalloc+0x80>
 800f9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9aa:	f383 8811 	msr	BASEPRI, r3
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	e7fe      	b.n	800f9b6 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f9b8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f9ba:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f9bc:	f7ff ff8a 	bl	800f8d4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f9c0:	6862      	ldr	r2, [r4, #4]
 800f9c2:	4918      	ldr	r1, [pc, #96]	; (800fa24 <pvPortMalloc+0xec>)
 800f9c4:	680b      	ldr	r3, [r1, #0]
 800f9c6:	1a9b      	subs	r3, r3, r2
 800f9c8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f9ca:	4918      	ldr	r1, [pc, #96]	; (800fa2c <pvPortMalloc+0xf4>)
 800f9cc:	6809      	ldr	r1, [r1, #0]
 800f9ce:	428b      	cmp	r3, r1
 800f9d0:	d201      	bcs.n	800f9d6 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f9d2:	4916      	ldr	r1, [pc, #88]	; (800fa2c <pvPortMalloc+0xf4>)
 800f9d4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f9d6:	4b12      	ldr	r3, [pc, #72]	; (800fa20 <pvPortMalloc+0xe8>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800f9e2:	4a13      	ldr	r2, [pc, #76]	; (800fa30 <pvPortMalloc+0xf8>)
 800f9e4:	6813      	ldr	r3, [r2, #0]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	6013      	str	r3, [r2, #0]
 800f9ea:	e002      	b.n	800f9f2 <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800f9ec:	2600      	movs	r6, #0
 800f9ee:	e000      	b.n	800f9f2 <pvPortMalloc+0xba>
 800f9f0:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800f9f2:	f001 fafd 	bl	8010ff0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9f6:	f016 0f07 	tst.w	r6, #7
 800f9fa:	d00c      	beq.n	800fa16 <pvPortMalloc+0xde>
 800f9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa00:	f383 8811 	msr	BASEPRI, r3
 800fa04:	f3bf 8f6f 	isb	sy
 800fa08:	f3bf 8f4f 	dsb	sy
 800fa0c:	e7fe      	b.n	800fa0c <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800fa0e:	2600      	movs	r6, #0
 800fa10:	e7ef      	b.n	800f9f2 <pvPortMalloc+0xba>
 800fa12:	2600      	movs	r6, #0
 800fa14:	e7ed      	b.n	800f9f2 <pvPortMalloc+0xba>
}
 800fa16:	4630      	mov	r0, r6
 800fa18:	bd70      	pop	{r4, r5, r6, pc}
 800fa1a:	bf00      	nop
 800fa1c:	240077d0 	.word	0x240077d0
 800fa20:	2400f7d4 	.word	0x2400f7d4
 800fa24:	2400f7d8 	.word	0x2400f7d8
 800fa28:	2400f7e8 	.word	0x2400f7e8
 800fa2c:	2400f7dc 	.word	0x2400f7dc
 800fa30:	2400f7e0 	.word	0x2400f7e0

0800fa34 <vPortFree>:
	if( pv != NULL )
 800fa34:	2800      	cmp	r0, #0
 800fa36:	d034      	beq.n	800faa2 <vPortFree+0x6e>
{
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800fa3c:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fa40:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800fa44:	4a17      	ldr	r2, [pc, #92]	; (800faa4 <vPortFree+0x70>)
 800fa46:	6812      	ldr	r2, [r2, #0]
 800fa48:	4213      	tst	r3, r2
 800fa4a:	d108      	bne.n	800fa5e <vPortFree+0x2a>
 800fa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa50:	f383 8811 	msr	BASEPRI, r3
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	e7fe      	b.n	800fa5c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fa5e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800fa62:	b141      	cbz	r1, 800fa76 <vPortFree+0x42>
 800fa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa68:	f383 8811 	msr	BASEPRI, r3
 800fa6c:	f3bf 8f6f 	isb	sy
 800fa70:	f3bf 8f4f 	dsb	sy
 800fa74:	e7fe      	b.n	800fa74 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fa76:	ea23 0302 	bic.w	r3, r3, r2
 800fa7a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800fa7e:	f001 fa1d 	bl	8010ebc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa82:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800fa86:	4a08      	ldr	r2, [pc, #32]	; (800faa8 <vPortFree+0x74>)
 800fa88:	6813      	ldr	r3, [r2, #0]
 800fa8a:	440b      	add	r3, r1
 800fa8c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa8e:	4628      	mov	r0, r5
 800fa90:	f7ff ff20 	bl	800f8d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fa94:	4a05      	ldr	r2, [pc, #20]	; (800faac <vPortFree+0x78>)
 800fa96:	6813      	ldr	r3, [r2, #0]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800fa9c:	f001 faa8 	bl	8010ff0 <xTaskResumeAll>
}
 800faa0:	bd38      	pop	{r3, r4, r5, pc}
 800faa2:	4770      	bx	lr
 800faa4:	2400f7d4 	.word	0x2400f7d4
 800faa8:	2400f7d8 	.word	0x2400f7d8
 800faac:	2400f7e4 	.word	0x2400f7e4

0800fab0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fab0:	f100 0308 	add.w	r3, r0, #8
 800fab4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fab6:	f04f 32ff 	mov.w	r2, #4294967295
 800faba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fabc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fabe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fac0:	2300      	movs	r3, #0
 800fac2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fac4:	4770      	bx	lr

0800fac6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fac6:	2300      	movs	r3, #0
 800fac8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800faca:	4770      	bx	lr

0800facc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800facc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800face:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fad0:	689a      	ldr	r2, [r3, #8]
 800fad2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fad4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fad6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fad8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800fada:	6803      	ldr	r3, [r0, #0]
 800fadc:	3301      	adds	r3, #1
 800fade:	6003      	str	r3, [r0, #0]
}
 800fae0:	4770      	bx	lr

0800fae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fae2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fae4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fae6:	f1b5 3fff 	cmp.w	r5, #4294967295
 800faea:	d011      	beq.n	800fb10 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800faec:	f100 0308 	add.w	r3, r0, #8
 800faf0:	461c      	mov	r4, r3
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	681a      	ldr	r2, [r3, #0]
 800faf6:	42aa      	cmp	r2, r5
 800faf8:	d9fa      	bls.n	800faf0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fafa:	6863      	ldr	r3, [r4, #4]
 800fafc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fafe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fb00:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800fb02:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fb04:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800fb06:	6803      	ldr	r3, [r0, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	6003      	str	r3, [r0, #0]
}
 800fb0c:	bc30      	pop	{r4, r5}
 800fb0e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800fb10:	6904      	ldr	r4, [r0, #16]
 800fb12:	e7f2      	b.n	800fafa <vListInsert+0x18>

0800fb14 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fb14:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fb16:	6841      	ldr	r1, [r0, #4]
 800fb18:	6882      	ldr	r2, [r0, #8]
 800fb1a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fb1c:	6841      	ldr	r1, [r0, #4]
 800fb1e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fb20:	685a      	ldr	r2, [r3, #4]
 800fb22:	4282      	cmp	r2, r0
 800fb24:	d006      	beq.n	800fb34 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fb26:	2200      	movs	r2, #0
 800fb28:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	3a01      	subs	r2, #1
 800fb2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fb30:	6818      	ldr	r0, [r3, #0]
}
 800fb32:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fb34:	6882      	ldr	r2, [r0, #8]
 800fb36:	605a      	str	r2, [r3, #4]
 800fb38:	e7f5      	b.n	800fb26 <uxListRemove+0x12>
	...

0800fb3c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb3c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb42:	4b0d      	ldr	r3, [pc, #52]	; (800fb78 <prvTaskExitError+0x3c>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb4a:	d008      	beq.n	800fb5e <prvTaskExitError+0x22>
 800fb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	e7fe      	b.n	800fb5c <prvTaskExitError+0x20>
 800fb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d0fc      	beq.n	800fb6e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb74:	b002      	add	sp, #8
 800fb76:	4770      	bx	lr
 800fb78:	24000080 	.word	0x24000080

0800fb7c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb7c:	4808      	ldr	r0, [pc, #32]	; (800fba0 <prvPortStartFirstTask+0x24>)
 800fb7e:	6800      	ldr	r0, [r0, #0]
 800fb80:	6800      	ldr	r0, [r0, #0]
 800fb82:	f380 8808 	msr	MSP, r0
 800fb86:	f04f 0000 	mov.w	r0, #0
 800fb8a:	f380 8814 	msr	CONTROL, r0
 800fb8e:	b662      	cpsie	i
 800fb90:	b661      	cpsie	f
 800fb92:	f3bf 8f4f 	dsb	sy
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	df00      	svc	0
 800fb9c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb9e:	0000      	.short	0x0000
 800fba0:	e000ed08 	.word	0xe000ed08

0800fba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fbb4 <vPortEnableVFP+0x10>
 800fba8:	6801      	ldr	r1, [r0, #0]
 800fbaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fbae:	6001      	str	r1, [r0, #0]
 800fbb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fbb2:	0000      	.short	0x0000
 800fbb4:	e000ed88 	.word	0xe000ed88

0800fbb8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fbb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fbbc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fbc0:	f021 0101 	bic.w	r1, r1, #1
 800fbc4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fbc8:	4b05      	ldr	r3, [pc, #20]	; (800fbe0 <pxPortInitialiseStack+0x28>)
 800fbca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fbce:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fbd2:	f06f 0302 	mvn.w	r3, #2
 800fbd6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800fbda:	3844      	subs	r0, #68	; 0x44
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop
 800fbe0:	0800fb3d 	.word	0x0800fb3d
	...

0800fbf0 <SVC_Handler>:
	__asm volatile (
 800fbf0:	4b07      	ldr	r3, [pc, #28]	; (800fc10 <pxCurrentTCBConst2>)
 800fbf2:	6819      	ldr	r1, [r3, #0]
 800fbf4:	6808      	ldr	r0, [r1, #0]
 800fbf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfa:	f380 8809 	msr	PSP, r0
 800fbfe:	f3bf 8f6f 	isb	sy
 800fc02:	f04f 0000 	mov.w	r0, #0
 800fc06:	f380 8811 	msr	BASEPRI, r0
 800fc0a:	4770      	bx	lr
 800fc0c:	f3af 8000 	nop.w

0800fc10 <pxCurrentTCBConst2>:
 800fc10:	2400f838 	.word	0x2400f838

0800fc14 <vPortEnterCritical>:
 800fc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc18:	f383 8811 	msr	BASEPRI, r3
 800fc1c:	f3bf 8f6f 	isb	sy
 800fc20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800fc24:	4a0b      	ldr	r2, [pc, #44]	; (800fc54 <vPortEnterCritical+0x40>)
 800fc26:	6813      	ldr	r3, [r2, #0]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d000      	beq.n	800fc32 <vPortEnterCritical+0x1e>
}
 800fc30:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fc32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fc36:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800fc3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fc3e:	d0f7      	beq.n	800fc30 <vPortEnterCritical+0x1c>
 800fc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc44:	f383 8811 	msr	BASEPRI, r3
 800fc48:	f3bf 8f6f 	isb	sy
 800fc4c:	f3bf 8f4f 	dsb	sy
 800fc50:	e7fe      	b.n	800fc50 <vPortEnterCritical+0x3c>
 800fc52:	bf00      	nop
 800fc54:	24000080 	.word	0x24000080

0800fc58 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800fc58:	4b09      	ldr	r3, [pc, #36]	; (800fc80 <vPortExitCritical+0x28>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	b943      	cbnz	r3, 800fc70 <vPortExitCritical+0x18>
 800fc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc62:	f383 8811 	msr	BASEPRI, r3
 800fc66:	f3bf 8f6f 	isb	sy
 800fc6a:	f3bf 8f4f 	dsb	sy
 800fc6e:	e7fe      	b.n	800fc6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800fc70:	3b01      	subs	r3, #1
 800fc72:	4a03      	ldr	r2, [pc, #12]	; (800fc80 <vPortExitCritical+0x28>)
 800fc74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc76:	b90b      	cbnz	r3, 800fc7c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fc78:	f383 8811 	msr	BASEPRI, r3
}
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop
 800fc80:	24000080 	.word	0x24000080
	...

0800fc90 <PendSV_Handler>:
	__asm volatile
 800fc90:	f3ef 8009 	mrs	r0, PSP
 800fc94:	f3bf 8f6f 	isb	sy
 800fc98:	4b15      	ldr	r3, [pc, #84]	; (800fcf0 <pxCurrentTCBConst>)
 800fc9a:	681a      	ldr	r2, [r3, #0]
 800fc9c:	f01e 0f10 	tst.w	lr, #16
 800fca0:	bf08      	it	eq
 800fca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcaa:	6010      	str	r0, [r2, #0]
 800fcac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fcb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fcb4:	f380 8811 	msr	BASEPRI, r0
 800fcb8:	f3bf 8f4f 	dsb	sy
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f001 fa12 	bl	80110e8 <vTaskSwitchContext>
 800fcc4:	f04f 0000 	mov.w	r0, #0
 800fcc8:	f380 8811 	msr	BASEPRI, r0
 800fccc:	bc09      	pop	{r0, r3}
 800fcce:	6819      	ldr	r1, [r3, #0]
 800fcd0:	6808      	ldr	r0, [r1, #0]
 800fcd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd6:	f01e 0f10 	tst.w	lr, #16
 800fcda:	bf08      	it	eq
 800fcdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fce0:	f380 8809 	msr	PSP, r0
 800fce4:	f3bf 8f6f 	isb	sy
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	f3af 8000 	nop.w

0800fcf0 <pxCurrentTCBConst>:
 800fcf0:	2400f838 	.word	0x2400f838

0800fcf4 <xPortSysTickHandler>:
{
 800fcf4:	b508      	push	{r3, lr}
	__asm volatile
 800fcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfa:	f383 8811 	msr	BASEPRI, r3
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800fd06:	f001 f8e7 	bl	8010ed8 <xTaskIncrementTick>
 800fd0a:	b128      	cbz	r0, 800fd18 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fd0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fd10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd14:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800fd18:	2300      	movs	r3, #0
 800fd1a:	f383 8811 	msr	BASEPRI, r3
}
 800fd1e:	bd08      	pop	{r3, pc}

0800fd20 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fd20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800fd24:	2300      	movs	r3, #0
 800fd26:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fd28:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd2a:	4b05      	ldr	r3, [pc, #20]	; (800fd40 <vPortSetupTimerInterrupt+0x20>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4905      	ldr	r1, [pc, #20]	; (800fd44 <vPortSetupTimerInterrupt+0x24>)
 800fd30:	fba1 1303 	umull	r1, r3, r1, r3
 800fd34:	099b      	lsrs	r3, r3, #6
 800fd36:	3b01      	subs	r3, #1
 800fd38:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fd3a:	2307      	movs	r3, #7
 800fd3c:	6113      	str	r3, [r2, #16]
}
 800fd3e:	4770      	bx	lr
 800fd40:	24000070 	.word	0x24000070
 800fd44:	10624dd3 	.word	0x10624dd3

0800fd48 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fd48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fd4c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800fd50:	4b3d      	ldr	r3, [pc, #244]	; (800fe48 <xPortStartScheduler+0x100>)
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d01c      	beq.n	800fd90 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fd56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fd5a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800fd5e:	4b3b      	ldr	r3, [pc, #236]	; (800fe4c <xPortStartScheduler+0x104>)
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d01e      	beq.n	800fda2 <xPortStartScheduler+0x5a>
{
 800fd64:	b530      	push	{r4, r5, lr}
 800fd66:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd68:	4b39      	ldr	r3, [pc, #228]	; (800fe50 <xPortStartScheduler+0x108>)
 800fd6a:	781a      	ldrb	r2, [r3, #0]
 800fd6c:	b2d2      	uxtb	r2, r2
 800fd6e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fd70:	22ff      	movs	r2, #255	; 0xff
 800fd72:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd74:	781b      	ldrb	r3, [r3, #0]
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fd80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fd84:	4a33      	ldr	r2, [pc, #204]	; (800fe54 <xPortStartScheduler+0x10c>)
 800fd86:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fd88:	4b33      	ldr	r3, [pc, #204]	; (800fe58 <xPortStartScheduler+0x110>)
 800fd8a:	2207      	movs	r2, #7
 800fd8c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd8e:	e01b      	b.n	800fdc8 <xPortStartScheduler+0x80>
	__asm volatile
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fda0:	e7fe      	b.n	800fda0 <xPortStartScheduler+0x58>
 800fda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fdb2:	e7fe      	b.n	800fdb2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800fdb4:	4a28      	ldr	r2, [pc, #160]	; (800fe58 <xPortStartScheduler+0x110>)
 800fdb6:	6813      	ldr	r3, [r2, #0]
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fdbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fdc0:	005b      	lsls	r3, r3, #1
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fdcc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fdd0:	d1f0      	bne.n	800fdb4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fdd2:	4b21      	ldr	r3, [pc, #132]	; (800fe58 <xPortStartScheduler+0x110>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b03      	cmp	r3, #3
 800fdd8:	d008      	beq.n	800fdec <xPortStartScheduler+0xa4>
 800fdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdde:	f383 8811 	msr	BASEPRI, r3
 800fde2:	f3bf 8f6f 	isb	sy
 800fde6:	f3bf 8f4f 	dsb	sy
 800fdea:	e7fe      	b.n	800fdea <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fdec:	021b      	lsls	r3, r3, #8
 800fdee:	4a1a      	ldr	r2, [pc, #104]	; (800fe58 <xPortStartScheduler+0x110>)
 800fdf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fdf2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fdf6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fdf8:	9b01      	ldr	r3, [sp, #4]
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	4a14      	ldr	r2, [pc, #80]	; (800fe50 <xPortStartScheduler+0x108>)
 800fdfe:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe00:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800fe04:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800fe08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe0c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe10:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800fe14:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe18:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800fe1c:	f7ff ff80 	bl	800fd20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800fe20:	2500      	movs	r5, #0
 800fe22:	4b0e      	ldr	r3, [pc, #56]	; (800fe5c <xPortStartScheduler+0x114>)
 800fe24:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800fe26:	f7ff febd 	bl	800fba4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe2a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800fe2e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fe32:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800fe36:	f7ff fea1 	bl	800fb7c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800fe3a:	f001 f955 	bl	80110e8 <vTaskSwitchContext>
	prvTaskExitError();
 800fe3e:	f7ff fe7d 	bl	800fb3c <prvTaskExitError>
}
 800fe42:	4628      	mov	r0, r5
 800fe44:	b003      	add	sp, #12
 800fe46:	bd30      	pop	{r4, r5, pc}
 800fe48:	410fc271 	.word	0x410fc271
 800fe4c:	410fc270 	.word	0x410fc270
 800fe50:	e000e400 	.word	0xe000e400
 800fe54:	2400f7f0 	.word	0x2400f7f0
 800fe58:	2400f7f4 	.word	0x2400f7f4
 800fe5c:	24000080 	.word	0x24000080

0800fe60 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe60:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe64:	2b0f      	cmp	r3, #15
 800fe66:	d90f      	bls.n	800fe88 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe68:	4a11      	ldr	r2, [pc, #68]	; (800feb0 <vPortValidateInterruptPriority+0x50>)
 800fe6a:	5c9b      	ldrb	r3, [r3, r2]
 800fe6c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fe6e:	4a11      	ldr	r2, [pc, #68]	; (800feb4 <vPortValidateInterruptPriority+0x54>)
 800fe70:	7812      	ldrb	r2, [r2, #0]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d908      	bls.n	800fe88 <vPortValidateInterruptPriority+0x28>
 800fe76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7a:	f383 8811 	msr	BASEPRI, r3
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f3bf 8f4f 	dsb	sy
 800fe86:	e7fe      	b.n	800fe86 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fe88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fe8c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800fe90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe94:	4a08      	ldr	r2, [pc, #32]	; (800feb8 <vPortValidateInterruptPriority+0x58>)
 800fe96:	6812      	ldr	r2, [r2, #0]
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d908      	bls.n	800feae <vPortValidateInterruptPriority+0x4e>
 800fe9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea0:	f383 8811 	msr	BASEPRI, r3
 800fea4:	f3bf 8f6f 	isb	sy
 800fea8:	f3bf 8f4f 	dsb	sy
 800feac:	e7fe      	b.n	800feac <vPortValidateInterruptPriority+0x4c>
	}
 800feae:	4770      	bx	lr
 800feb0:	e000e3f0 	.word	0xe000e3f0
 800feb4:	2400f7f0 	.word	0x2400f7f0
 800feb8:	2400f7f4 	.word	0x2400f7f4

0800febc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800febc:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800febe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fec0:	b118      	cbz	r0, 800feca <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fec4:	6818      	ldr	r0, [r3, #0]
 800fec6:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800feca:	4770      	bx	lr

0800fecc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fecc:	b510      	push	{r4, lr}
 800fece:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fed0:	f7ff fea0 	bl	800fc14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fed4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fed6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fed8:	429a      	cmp	r2, r3
 800feda:	d004      	beq.n	800fee6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800fedc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800fede:	f7ff febb 	bl	800fc58 <vPortExitCritical>

	return xReturn;
}
 800fee2:	4620      	mov	r0, r4
 800fee4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800fee6:	2401      	movs	r4, #1
 800fee8:	e7f9      	b.n	800fede <prvIsQueueFull+0x12>

0800feea <prvIsQueueEmpty>:
{
 800feea:	b510      	push	{r4, lr}
 800feec:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800feee:	f7ff fe91 	bl	800fc14 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fef2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fef4:	b923      	cbnz	r3, 800ff00 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800fef6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800fef8:	f7ff feae 	bl	800fc58 <vPortExitCritical>
}
 800fefc:	4620      	mov	r0, r4
 800fefe:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800ff00:	2400      	movs	r4, #0
 800ff02:	e7f9      	b.n	800fef8 <prvIsQueueEmpty+0xe>

0800ff04 <prvCopyDataToQueue>:
{
 800ff04:	b570      	push	{r4, r5, r6, lr}
 800ff06:	4604      	mov	r4, r0
 800ff08:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff0a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ff0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ff0e:	b95a      	cbnz	r2, 800ff28 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff10:	6803      	ldr	r3, [r0, #0]
 800ff12:	b11b      	cbz	r3, 800ff1c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800ff14:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ff16:	3601      	adds	r6, #1
 800ff18:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800ff1a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff1c:	6880      	ldr	r0, [r0, #8]
 800ff1e:	f001 fa5d 	bl	80113dc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff22:	2300      	movs	r3, #0
 800ff24:	60a3      	str	r3, [r4, #8]
 800ff26:	e7f6      	b.n	800ff16 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800ff28:	b96d      	cbnz	r5, 800ff46 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff2a:	6840      	ldr	r0, [r0, #4]
 800ff2c:	f013 fb92 	bl	8023654 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff30:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ff32:	6863      	ldr	r3, [r4, #4]
 800ff34:	4413      	add	r3, r2
 800ff36:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff38:	68a2      	ldr	r2, [r4, #8]
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d319      	bcc.n	800ff72 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800ff42:	4628      	mov	r0, r5
 800ff44:	e7e7      	b.n	800ff16 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ff46:	68c0      	ldr	r0, [r0, #12]
 800ff48:	f013 fb84 	bl	8023654 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ff4c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ff4e:	4251      	negs	r1, r2
 800ff50:	68e3      	ldr	r3, [r4, #12]
 800ff52:	1a9b      	subs	r3, r3, r2
 800ff54:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff56:	6822      	ldr	r2, [r4, #0]
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d202      	bcs.n	800ff62 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ff5c:	68a3      	ldr	r3, [r4, #8]
 800ff5e:	440b      	add	r3, r1
 800ff60:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ff62:	2d02      	cmp	r5, #2
 800ff64:	d001      	beq.n	800ff6a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800ff66:	2000      	movs	r0, #0
 800ff68:	e7d5      	b.n	800ff16 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff6a:	b126      	cbz	r6, 800ff76 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800ff6c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800ff6e:	2000      	movs	r0, #0
 800ff70:	e7d1      	b.n	800ff16 <prvCopyDataToQueue+0x12>
 800ff72:	4628      	mov	r0, r5
 800ff74:	e7cf      	b.n	800ff16 <prvCopyDataToQueue+0x12>
 800ff76:	2000      	movs	r0, #0
 800ff78:	e7cd      	b.n	800ff16 <prvCopyDataToQueue+0x12>

0800ff7a <prvCopyDataFromQueue>:
{
 800ff7a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ff7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ff7e:	b16a      	cbz	r2, 800ff9c <prvCopyDataFromQueue+0x22>
{
 800ff80:	b510      	push	{r4, lr}
 800ff82:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff84:	68d9      	ldr	r1, [r3, #12]
 800ff86:	4411      	add	r1, r2
 800ff88:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ff8a:	689c      	ldr	r4, [r3, #8]
 800ff8c:	42a1      	cmp	r1, r4
 800ff8e:	d301      	bcc.n	800ff94 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ff90:	6819      	ldr	r1, [r3, #0]
 800ff92:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff94:	68d9      	ldr	r1, [r3, #12]
 800ff96:	f013 fb5d 	bl	8023654 <memcpy>
}
 800ff9a:	bd10      	pop	{r4, pc}
 800ff9c:	4770      	bx	lr

0800ff9e <prvUnlockQueue>:
{
 800ff9e:	b538      	push	{r3, r4, r5, lr}
 800ffa0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800ffa2:	f7ff fe37 	bl	800fc14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800ffa6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800ffaa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ffac:	e001      	b.n	800ffb2 <prvUnlockQueue+0x14>
			--cTxLock;
 800ffae:	3c01      	subs	r4, #1
 800ffb0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ffb2:	2c00      	cmp	r4, #0
 800ffb4:	dd0a      	ble.n	800ffcc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ffb8:	b143      	cbz	r3, 800ffcc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffba:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800ffbe:	f001 f917 	bl	80111f0 <xTaskRemoveFromEventList>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	d0f3      	beq.n	800ffae <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800ffc6:	f001 f9a7 	bl	8011318 <vTaskMissedYield>
 800ffca:	e7f0      	b.n	800ffae <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800ffcc:	23ff      	movs	r3, #255	; 0xff
 800ffce:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ffd2:	f7ff fe41 	bl	800fc58 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ffd6:	f7ff fe1d 	bl	800fc14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ffda:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800ffde:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ffe0:	e001      	b.n	800ffe6 <prvUnlockQueue+0x48>
				--cRxLock;
 800ffe2:	3c01      	subs	r4, #1
 800ffe4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ffe6:	2c00      	cmp	r4, #0
 800ffe8:	dd0a      	ble.n	8010000 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffea:	692b      	ldr	r3, [r5, #16]
 800ffec:	b143      	cbz	r3, 8010000 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffee:	f105 0010 	add.w	r0, r5, #16
 800fff2:	f001 f8fd 	bl	80111f0 <xTaskRemoveFromEventList>
 800fff6:	2800      	cmp	r0, #0
 800fff8:	d0f3      	beq.n	800ffe2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800fffa:	f001 f98d 	bl	8011318 <vTaskMissedYield>
 800fffe:	e7f0      	b.n	800ffe2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8010000:	23ff      	movs	r3, #255	; 0xff
 8010002:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8010006:	f7ff fe27 	bl	800fc58 <vPortExitCritical>
}
 801000a:	bd38      	pop	{r3, r4, r5, pc}

0801000c <xQueueGenericReset>:
{
 801000c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801000e:	b1e0      	cbz	r0, 801004a <xQueueGenericReset+0x3e>
 8010010:	460d      	mov	r5, r1
 8010012:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010014:	f7ff fdfe 	bl	800fc14 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010018:	6823      	ldr	r3, [r4, #0]
 801001a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801001c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801001e:	fb01 3002 	mla	r0, r1, r2, r3
 8010022:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010024:	2000      	movs	r0, #0
 8010026:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010028:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801002a:	3a01      	subs	r2, #1
 801002c:	fb02 3301 	mla	r3, r2, r1, r3
 8010030:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010032:	23ff      	movs	r3, #255	; 0xff
 8010034:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010038:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 801003c:	b9fd      	cbnz	r5, 801007e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801003e:	6923      	ldr	r3, [r4, #16]
 8010040:	b963      	cbnz	r3, 801005c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8010042:	f7ff fe09 	bl	800fc58 <vPortExitCritical>
}
 8010046:	2001      	movs	r0, #1
 8010048:	bd38      	pop	{r3, r4, r5, pc}
 801004a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004e:	f383 8811 	msr	BASEPRI, r3
 8010052:	f3bf 8f6f 	isb	sy
 8010056:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801005a:	e7fe      	b.n	801005a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801005c:	f104 0010 	add.w	r0, r4, #16
 8010060:	f001 f8c6 	bl	80111f0 <xTaskRemoveFromEventList>
 8010064:	2800      	cmp	r0, #0
 8010066:	d0ec      	beq.n	8010042 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8010068:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801006c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010070:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010074:	f3bf 8f4f 	dsb	sy
 8010078:	f3bf 8f6f 	isb	sy
 801007c:	e7e1      	b.n	8010042 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801007e:	f104 0010 	add.w	r0, r4, #16
 8010082:	f7ff fd15 	bl	800fab0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010086:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801008a:	f7ff fd11 	bl	800fab0 <vListInitialise>
 801008e:	e7d8      	b.n	8010042 <xQueueGenericReset+0x36>

08010090 <prvInitialiseNewQueue>:
{
 8010090:	b538      	push	{r3, r4, r5, lr}
 8010092:	461d      	mov	r5, r3
 8010094:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8010096:	460b      	mov	r3, r1
 8010098:	b949      	cbnz	r1, 80100ae <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801009a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 801009c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801009e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80100a0:	2101      	movs	r1, #1
 80100a2:	4620      	mov	r0, r4
 80100a4:	f7ff ffb2 	bl	801000c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80100a8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80100ac:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80100ae:	6022      	str	r2, [r4, #0]
 80100b0:	e7f4      	b.n	801009c <prvInitialiseNewQueue+0xc>

080100b2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80100b2:	b940      	cbnz	r0, 80100c6 <xQueueGenericCreateStatic+0x14>
 80100b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b8:	f383 8811 	msr	BASEPRI, r3
 80100bc:	f3bf 8f6f 	isb	sy
 80100c0:	f3bf 8f4f 	dsb	sy
 80100c4:	e7fe      	b.n	80100c4 <xQueueGenericCreateStatic+0x12>
	{
 80100c6:	b510      	push	{r4, lr}
 80100c8:	b084      	sub	sp, #16
 80100ca:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 80100cc:	b183      	cbz	r3, 80100f0 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80100ce:	1e0b      	subs	r3, r1, #0
 80100d0:	bf18      	it	ne
 80100d2:	2301      	movne	r3, #1
 80100d4:	2a00      	cmp	r2, #0
 80100d6:	bf08      	it	eq
 80100d8:	f043 0301 	orreq.w	r3, r3, #1
 80100dc:	b98b      	cbnz	r3, 8010102 <xQueueGenericCreateStatic+0x50>
 80100de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e2:	f383 8811 	msr	BASEPRI, r3
 80100e6:	f3bf 8f6f 	isb	sy
 80100ea:	f3bf 8f4f 	dsb	sy
 80100ee:	e7fe      	b.n	80100ee <xQueueGenericCreateStatic+0x3c>
 80100f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f4:	f383 8811 	msr	BASEPRI, r3
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8010100:	e7fe      	b.n	8010100 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010102:	fab1 f381 	clz	r3, r1
 8010106:	095b      	lsrs	r3, r3, #5
 8010108:	2a00      	cmp	r2, #0
 801010a:	bf18      	it	ne
 801010c:	f043 0301 	orrne.w	r3, r3, #1
 8010110:	b943      	cbnz	r3, 8010124 <xQueueGenericCreateStatic+0x72>
 8010112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010116:	f383 8811 	msr	BASEPRI, r3
 801011a:	f3bf 8f6f 	isb	sy
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	e7fe      	b.n	8010122 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010124:	2350      	movs	r3, #80	; 0x50
 8010126:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010128:	9b03      	ldr	r3, [sp, #12]
 801012a:	2b50      	cmp	r3, #80	; 0x50
 801012c:	d008      	beq.n	8010140 <xQueueGenericCreateStatic+0x8e>
 801012e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010132:	f383 8811 	msr	BASEPRI, r3
 8010136:	f3bf 8f6f 	isb	sy
 801013a:	f3bf 8f4f 	dsb	sy
 801013e:	e7fe      	b.n	801013e <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010140:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010142:	2301      	movs	r3, #1
 8010144:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010148:	9400      	str	r4, [sp, #0]
 801014a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801014e:	f7ff ff9f 	bl	8010090 <prvInitialiseNewQueue>
	}
 8010152:	4620      	mov	r0, r4
 8010154:	b004      	add	sp, #16
 8010156:	bd10      	pop	{r4, pc}

08010158 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010158:	b940      	cbnz	r0, 801016c <xQueueGenericCreate+0x14>
 801015a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801015e:	f383 8811 	msr	BASEPRI, r3
 8010162:	f3bf 8f6f 	isb	sy
 8010166:	f3bf 8f4f 	dsb	sy
 801016a:	e7fe      	b.n	801016a <xQueueGenericCreate+0x12>
	{
 801016c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801016e:	b083      	sub	sp, #12
 8010170:	460d      	mov	r5, r1
 8010172:	4614      	mov	r4, r2
 8010174:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010176:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801017a:	3050      	adds	r0, #80	; 0x50
 801017c:	f7ff fbdc 	bl	800f938 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010180:	4607      	mov	r7, r0
 8010182:	b150      	cbz	r0, 801019a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010184:	2300      	movs	r3, #0
 8010186:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801018a:	9000      	str	r0, [sp, #0]
 801018c:	4623      	mov	r3, r4
 801018e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8010192:	4629      	mov	r1, r5
 8010194:	4630      	mov	r0, r6
 8010196:	f7ff ff7b 	bl	8010090 <prvInitialiseNewQueue>
	}
 801019a:	4638      	mov	r0, r7
 801019c:	b003      	add	sp, #12
 801019e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101a0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80101a0:	b940      	cbnz	r0, 80101b4 <xQueueCreateCountingSemaphoreStatic+0x14>
 80101a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a6:	f383 8811 	msr	BASEPRI, r3
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	e7fe      	b.n	80101b2 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 80101b4:	b510      	push	{r4, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 80101ba:	4288      	cmp	r0, r1
 80101bc:	d208      	bcs.n	80101d0 <xQueueCreateCountingSemaphoreStatic+0x30>
 80101be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c2:	f383 8811 	msr	BASEPRI, r3
 80101c6:	f3bf 8f6f 	isb	sy
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	e7fe      	b.n	80101ce <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80101d0:	2302      	movs	r3, #2
 80101d2:	9300      	str	r3, [sp, #0]
 80101d4:	4613      	mov	r3, r2
 80101d6:	2200      	movs	r2, #0
 80101d8:	4611      	mov	r1, r2
 80101da:	f7ff ff6a 	bl	80100b2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80101de:	b100      	cbz	r0, 80101e2 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80101e0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80101e2:	b002      	add	sp, #8
 80101e4:	bd10      	pop	{r4, pc}

080101e6 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 80101e6:	b940      	cbnz	r0, 80101fa <xQueueCreateCountingSemaphore+0x14>
 80101e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ec:	f383 8811 	msr	BASEPRI, r3
 80101f0:	f3bf 8f6f 	isb	sy
 80101f4:	f3bf 8f4f 	dsb	sy
 80101f8:	e7fe      	b.n	80101f8 <xQueueCreateCountingSemaphore+0x12>
	{
 80101fa:	b510      	push	{r4, lr}
 80101fc:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 80101fe:	4288      	cmp	r0, r1
 8010200:	d208      	bcs.n	8010214 <xQueueCreateCountingSemaphore+0x2e>
 8010202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010206:	f383 8811 	msr	BASEPRI, r3
 801020a:	f3bf 8f6f 	isb	sy
 801020e:	f3bf 8f4f 	dsb	sy
 8010212:	e7fe      	b.n	8010212 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010214:	2202      	movs	r2, #2
 8010216:	2100      	movs	r1, #0
 8010218:	f7ff ff9e 	bl	8010158 <xQueueGenericCreate>
		if( xHandle != NULL )
 801021c:	b100      	cbz	r0, 8010220 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801021e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8010220:	bd10      	pop	{r4, pc}

08010222 <xQueueGenericSend>:
{
 8010222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010224:	b085      	sub	sp, #20
 8010226:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010228:	b188      	cbz	r0, 801024e <xQueueGenericSend+0x2c>
 801022a:	460f      	mov	r7, r1
 801022c:	461d      	mov	r5, r3
 801022e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010230:	b1b1      	cbz	r1, 8010260 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010232:	2d02      	cmp	r5, #2
 8010234:	d120      	bne.n	8010278 <xQueueGenericSend+0x56>
 8010236:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010238:	2b01      	cmp	r3, #1
 801023a:	d01d      	beq.n	8010278 <xQueueGenericSend+0x56>
 801023c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010240:	f383 8811 	msr	BASEPRI, r3
 8010244:	f3bf 8f6f 	isb	sy
 8010248:	f3bf 8f4f 	dsb	sy
 801024c:	e7fe      	b.n	801024c <xQueueGenericSend+0x2a>
 801024e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801025e:	e7fe      	b.n	801025e <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010260:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010262:	2b00      	cmp	r3, #0
 8010264:	d0e5      	beq.n	8010232 <xQueueGenericSend+0x10>
 8010266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026a:	f383 8811 	msr	BASEPRI, r3
 801026e:	f3bf 8f6f 	isb	sy
 8010272:	f3bf 8f4f 	dsb	sy
 8010276:	e7fe      	b.n	8010276 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010278:	f001 f854 	bl	8011324 <xTaskGetSchedulerState>
 801027c:	4606      	mov	r6, r0
 801027e:	b958      	cbnz	r0, 8010298 <xQueueGenericSend+0x76>
 8010280:	9b01      	ldr	r3, [sp, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d048      	beq.n	8010318 <xQueueGenericSend+0xf6>
 8010286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028a:	f383 8811 	msr	BASEPRI, r3
 801028e:	f3bf 8f6f 	isb	sy
 8010292:	f3bf 8f4f 	dsb	sy
 8010296:	e7fe      	b.n	8010296 <xQueueGenericSend+0x74>
 8010298:	2600      	movs	r6, #0
 801029a:	e03d      	b.n	8010318 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801029c:	462a      	mov	r2, r5
 801029e:	4639      	mov	r1, r7
 80102a0:	4620      	mov	r0, r4
 80102a2:	f7ff fe2f 	bl	800ff04 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102a8:	b97b      	cbnz	r3, 80102ca <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80102aa:	b148      	cbz	r0, 80102c0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80102ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80102b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80102b8:	f3bf 8f4f 	dsb	sy
 80102bc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80102c0:	f7ff fcca 	bl	800fc58 <vPortExitCritical>
				return pdPASS;
 80102c4:	2001      	movs	r0, #1
}
 80102c6:	b005      	add	sp, #20
 80102c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80102ce:	f000 ff8f 	bl	80111f0 <xTaskRemoveFromEventList>
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d0f4      	beq.n	80102c0 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 80102d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80102da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80102e2:	f3bf 8f4f 	dsb	sy
 80102e6:	f3bf 8f6f 	isb	sy
 80102ea:	e7e9      	b.n	80102c0 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 80102ec:	f7ff fcb4 	bl	800fc58 <vPortExitCritical>
					return errQUEUE_FULL;
 80102f0:	2000      	movs	r0, #0
 80102f2:	e7e8      	b.n	80102c6 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102f4:	a802      	add	r0, sp, #8
 80102f6:	f000 ffc1 	bl	801127c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102fa:	2601      	movs	r6, #1
 80102fc:	e019      	b.n	8010332 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80102fe:	2300      	movs	r3, #0
 8010300:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010304:	e021      	b.n	801034a <xQueueGenericSend+0x128>
 8010306:	2300      	movs	r3, #0
 8010308:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801030c:	e023      	b.n	8010356 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 801030e:	4620      	mov	r0, r4
 8010310:	f7ff fe45 	bl	800ff9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010314:	f000 fe6c 	bl	8010ff0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8010318:	f7ff fc7c 	bl	800fc14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801031c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801031e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010320:	429a      	cmp	r2, r3
 8010322:	d3bb      	bcc.n	801029c <xQueueGenericSend+0x7a>
 8010324:	2d02      	cmp	r5, #2
 8010326:	d0b9      	beq.n	801029c <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010328:	9b01      	ldr	r3, [sp, #4]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d0de      	beq.n	80102ec <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 801032e:	2e00      	cmp	r6, #0
 8010330:	d0e0      	beq.n	80102f4 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8010332:	f7ff fc91 	bl	800fc58 <vPortExitCritical>
		vTaskSuspendAll();
 8010336:	f000 fdc1 	bl	8010ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801033a:	f7ff fc6b 	bl	800fc14 <vPortEnterCritical>
 801033e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8010342:	b252      	sxtb	r2, r2
 8010344:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010348:	d0d9      	beq.n	80102fe <xQueueGenericSend+0xdc>
 801034a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 801034e:	b252      	sxtb	r2, r2
 8010350:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010354:	d0d7      	beq.n	8010306 <xQueueGenericSend+0xe4>
 8010356:	f7ff fc7f 	bl	800fc58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801035a:	a901      	add	r1, sp, #4
 801035c:	a802      	add	r0, sp, #8
 801035e:	f000 ff99 	bl	8011294 <xTaskCheckForTimeOut>
 8010362:	b9d8      	cbnz	r0, 801039c <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010364:	4620      	mov	r0, r4
 8010366:	f7ff fdb1 	bl	800fecc <prvIsQueueFull>
 801036a:	2800      	cmp	r0, #0
 801036c:	d0cf      	beq.n	801030e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801036e:	9901      	ldr	r1, [sp, #4]
 8010370:	f104 0010 	add.w	r0, r4, #16
 8010374:	f000 ff08 	bl	8011188 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010378:	4620      	mov	r0, r4
 801037a:	f7ff fe10 	bl	800ff9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801037e:	f000 fe37 	bl	8010ff0 <xTaskResumeAll>
 8010382:	2800      	cmp	r0, #0
 8010384:	d1c8      	bne.n	8010318 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8010386:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801038a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801038e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010392:	f3bf 8f4f 	dsb	sy
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	e7bd      	b.n	8010318 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 801039c:	4620      	mov	r0, r4
 801039e:	f7ff fdfe 	bl	800ff9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103a2:	f000 fe25 	bl	8010ff0 <xTaskResumeAll>
			return errQUEUE_FULL;
 80103a6:	2000      	movs	r0, #0
 80103a8:	e78d      	b.n	80102c6 <xQueueGenericSend+0xa4>

080103aa <xQueueGenericSendFromISR>:
{
 80103aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80103ae:	b190      	cbz	r0, 80103d6 <xQueueGenericSendFromISR+0x2c>
 80103b0:	460f      	mov	r7, r1
 80103b2:	4616      	mov	r6, r2
 80103b4:	461c      	mov	r4, r3
 80103b6:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80103b8:	b1b1      	cbz	r1, 80103e8 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80103ba:	2c02      	cmp	r4, #2
 80103bc:	d120      	bne.n	8010400 <xQueueGenericSendFromISR+0x56>
 80103be:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d01d      	beq.n	8010400 <xQueueGenericSendFromISR+0x56>
 80103c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c8:	f383 8811 	msr	BASEPRI, r3
 80103cc:	f3bf 8f6f 	isb	sy
 80103d0:	f3bf 8f4f 	dsb	sy
 80103d4:	e7fe      	b.n	80103d4 <xQueueGenericSendFromISR+0x2a>
 80103d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103da:	f383 8811 	msr	BASEPRI, r3
 80103de:	f3bf 8f6f 	isb	sy
 80103e2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80103e6:	e7fe      	b.n	80103e6 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80103e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d0e5      	beq.n	80103ba <xQueueGenericSendFromISR+0x10>
 80103ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f2:	f383 8811 	msr	BASEPRI, r3
 80103f6:	f3bf 8f6f 	isb	sy
 80103fa:	f3bf 8f4f 	dsb	sy
 80103fe:	e7fe      	b.n	80103fe <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010400:	f7ff fd2e 	bl	800fe60 <vPortValidateInterruptPriority>
	__asm volatile
 8010404:	f3ef 8911 	mrs	r9, BASEPRI
 8010408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040c:	f383 8811 	msr	BASEPRI, r3
 8010410:	f3bf 8f6f 	isb	sy
 8010414:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010418:	6baa      	ldr	r2, [r5, #56]	; 0x38
 801041a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801041c:	429a      	cmp	r2, r3
 801041e:	d306      	bcc.n	801042e <xQueueGenericSendFromISR+0x84>
 8010420:	2c02      	cmp	r4, #2
 8010422:	d004      	beq.n	801042e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8010424:	2000      	movs	r0, #0
	__asm volatile
 8010426:	f389 8811 	msr	BASEPRI, r9
}
 801042a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 801042e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8010432:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010436:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010438:	4622      	mov	r2, r4
 801043a:	4639      	mov	r1, r7
 801043c:	4628      	mov	r0, r5
 801043e:	f7ff fd61 	bl	800ff04 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8010442:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010446:	d006      	beq.n	8010456 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010448:	f108 0301 	add.w	r3, r8, #1
 801044c:	b25b      	sxtb	r3, r3
 801044e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8010452:	2001      	movs	r0, #1
 8010454:	e7e7      	b.n	8010426 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010456:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010458:	b90b      	cbnz	r3, 801045e <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 801045a:	2001      	movs	r0, #1
 801045c:	e7e3      	b.n	8010426 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801045e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8010462:	f000 fec5 	bl	80111f0 <xTaskRemoveFromEventList>
 8010466:	b118      	cbz	r0, 8010470 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8010468:	b126      	cbz	r6, 8010474 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801046a:	2001      	movs	r0, #1
 801046c:	6030      	str	r0, [r6, #0]
 801046e:	e7da      	b.n	8010426 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8010470:	2001      	movs	r0, #1
 8010472:	e7d8      	b.n	8010426 <xQueueGenericSendFromISR+0x7c>
 8010474:	2001      	movs	r0, #1
 8010476:	e7d6      	b.n	8010426 <xQueueGenericSendFromISR+0x7c>

08010478 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8010478:	b168      	cbz	r0, 8010496 <xQueueGiveFromISR+0x1e>
{
 801047a:	b570      	push	{r4, r5, r6, lr}
 801047c:	460c      	mov	r4, r1
 801047e:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8010480:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010482:	b18b      	cbz	r3, 80104a8 <xQueueGiveFromISR+0x30>
	__asm volatile
 8010484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010488:	f383 8811 	msr	BASEPRI, r3
 801048c:	f3bf 8f6f 	isb	sy
 8010490:	f3bf 8f4f 	dsb	sy
 8010494:	e7fe      	b.n	8010494 <xQueueGiveFromISR+0x1c>
 8010496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049a:	f383 8811 	msr	BASEPRI, r3
 801049e:	f3bf 8f6f 	isb	sy
 80104a2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80104a6:	e7fe      	b.n	80104a6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80104a8:	6803      	ldr	r3, [r0, #0]
 80104aa:	b1eb      	cbz	r3, 80104e8 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80104ac:	f7ff fcd8 	bl	800fe60 <vPortValidateInterruptPriority>
	__asm volatile
 80104b0:	f3ef 8611 	mrs	r6, BASEPRI
 80104b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b8:	f383 8811 	msr	BASEPRI, r3
 80104bc:	f3bf 8f6f 	isb	sy
 80104c0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104c4:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80104c6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d926      	bls.n	801051a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80104cc:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80104d0:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80104d2:	3201      	adds	r2, #1
 80104d4:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80104d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104da:	d011      	beq.n	8010500 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80104dc:	3301      	adds	r3, #1
 80104de:	b25b      	sxtb	r3, r3
 80104e0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80104e4:	2001      	movs	r0, #1
 80104e6:	e019      	b.n	801051c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80104e8:	6883      	ldr	r3, [r0, #8]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d0de      	beq.n	80104ac <xQueueGiveFromISR+0x34>
	__asm volatile
 80104ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f2:	f383 8811 	msr	BASEPRI, r3
 80104f6:	f3bf 8f6f 	isb	sy
 80104fa:	f3bf 8f4f 	dsb	sy
 80104fe:	e7fe      	b.n	80104fe <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010500:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010502:	b90b      	cbnz	r3, 8010508 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8010504:	2001      	movs	r0, #1
 8010506:	e009      	b.n	801051c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010508:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801050c:	f000 fe70 	bl	80111f0 <xTaskRemoveFromEventList>
 8010510:	b138      	cbz	r0, 8010522 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8010512:	b144      	cbz	r4, 8010526 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010514:	2001      	movs	r0, #1
 8010516:	6020      	str	r0, [r4, #0]
 8010518:	e000      	b.n	801051c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 801051a:	2000      	movs	r0, #0
	__asm volatile
 801051c:	f386 8811 	msr	BASEPRI, r6
}
 8010520:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8010522:	2001      	movs	r0, #1
 8010524:	e7fa      	b.n	801051c <xQueueGiveFromISR+0xa4>
 8010526:	2001      	movs	r0, #1
 8010528:	e7f8      	b.n	801051c <xQueueGiveFromISR+0xa4>

0801052a <xQueueReceive>:
{
 801052a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801052c:	b085      	sub	sp, #20
 801052e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010530:	b190      	cbz	r0, 8010558 <xQueueReceive+0x2e>
 8010532:	460f      	mov	r7, r1
 8010534:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010536:	b1c1      	cbz	r1, 801056a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010538:	f000 fef4 	bl	8011324 <xTaskGetSchedulerState>
 801053c:	4606      	mov	r6, r0
 801053e:	bb00      	cbnz	r0, 8010582 <xQueueReceive+0x58>
 8010540:	9b01      	ldr	r3, [sp, #4]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d05e      	beq.n	8010604 <xQueueReceive+0xda>
	__asm volatile
 8010546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801054a:	f383 8811 	msr	BASEPRI, r3
 801054e:	f3bf 8f6f 	isb	sy
 8010552:	f3bf 8f4f 	dsb	sy
 8010556:	e7fe      	b.n	8010556 <xQueueReceive+0x2c>
 8010558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055c:	f383 8811 	msr	BASEPRI, r3
 8010560:	f3bf 8f6f 	isb	sy
 8010564:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8010568:	e7fe      	b.n	8010568 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801056a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801056c:	2b00      	cmp	r3, #0
 801056e:	d0e3      	beq.n	8010538 <xQueueReceive+0xe>
 8010570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010574:	f383 8811 	msr	BASEPRI, r3
 8010578:	f3bf 8f6f 	isb	sy
 801057c:	f3bf 8f4f 	dsb	sy
 8010580:	e7fe      	b.n	8010580 <xQueueReceive+0x56>
 8010582:	2600      	movs	r6, #0
 8010584:	e03e      	b.n	8010604 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010586:	4639      	mov	r1, r7
 8010588:	4620      	mov	r0, r4
 801058a:	f7ff fcf6 	bl	800ff7a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801058e:	3d01      	subs	r5, #1
 8010590:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010592:	6923      	ldr	r3, [r4, #16]
 8010594:	b923      	cbnz	r3, 80105a0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8010596:	f7ff fb5f 	bl	800fc58 <vPortExitCritical>
				return pdPASS;
 801059a:	2001      	movs	r0, #1
}
 801059c:	b005      	add	sp, #20
 801059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105a0:	f104 0010 	add.w	r0, r4, #16
 80105a4:	f000 fe24 	bl	80111f0 <xTaskRemoveFromEventList>
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d0f4      	beq.n	8010596 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80105ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80105b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80105b8:	f3bf 8f4f 	dsb	sy
 80105bc:	f3bf 8f6f 	isb	sy
 80105c0:	e7e9      	b.n	8010596 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80105c2:	f7ff fb49 	bl	800fc58 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80105c6:	2000      	movs	r0, #0
 80105c8:	e7e8      	b.n	801059c <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80105ca:	a802      	add	r0, sp, #8
 80105cc:	f000 fe56 	bl	801127c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80105d0:	2601      	movs	r6, #1
 80105d2:	e021      	b.n	8010618 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80105d4:	2300      	movs	r3, #0
 80105d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80105da:	e029      	b.n	8010630 <xQueueReceive+0x106>
 80105dc:	2300      	movs	r3, #0
 80105de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105e2:	e02b      	b.n	801063c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80105e4:	4620      	mov	r0, r4
 80105e6:	f7ff fcda 	bl	800ff9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80105ea:	f000 fd01 	bl	8010ff0 <xTaskResumeAll>
 80105ee:	e009      	b.n	8010604 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80105f0:	4620      	mov	r0, r4
 80105f2:	f7ff fcd4 	bl	800ff9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105f6:	f000 fcfb 	bl	8010ff0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80105fa:	4620      	mov	r0, r4
 80105fc:	f7ff fc75 	bl	800feea <prvIsQueueEmpty>
 8010600:	2800      	cmp	r0, #0
 8010602:	d13f      	bne.n	8010684 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8010604:	f7ff fb06 	bl	800fc14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010608:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801060a:	2d00      	cmp	r5, #0
 801060c:	d1bb      	bne.n	8010586 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801060e:	9b01      	ldr	r3, [sp, #4]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d0d6      	beq.n	80105c2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8010614:	2e00      	cmp	r6, #0
 8010616:	d0d8      	beq.n	80105ca <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8010618:	f7ff fb1e 	bl	800fc58 <vPortExitCritical>
		vTaskSuspendAll();
 801061c:	f000 fc4e 	bl	8010ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010620:	f7ff faf8 	bl	800fc14 <vPortEnterCritical>
 8010624:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010628:	b25b      	sxtb	r3, r3
 801062a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801062e:	d0d1      	beq.n	80105d4 <xQueueReceive+0xaa>
 8010630:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010634:	b25b      	sxtb	r3, r3
 8010636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801063a:	d0cf      	beq.n	80105dc <xQueueReceive+0xb2>
 801063c:	f7ff fb0c 	bl	800fc58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010640:	a901      	add	r1, sp, #4
 8010642:	a802      	add	r0, sp, #8
 8010644:	f000 fe26 	bl	8011294 <xTaskCheckForTimeOut>
 8010648:	2800      	cmp	r0, #0
 801064a:	d1d1      	bne.n	80105f0 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801064c:	4620      	mov	r0, r4
 801064e:	f7ff fc4c 	bl	800feea <prvIsQueueEmpty>
 8010652:	2800      	cmp	r0, #0
 8010654:	d0c6      	beq.n	80105e4 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010656:	9901      	ldr	r1, [sp, #4]
 8010658:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801065c:	f000 fd94 	bl	8011188 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010660:	4620      	mov	r0, r4
 8010662:	f7ff fc9c 	bl	800ff9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010666:	f000 fcc3 	bl	8010ff0 <xTaskResumeAll>
 801066a:	2800      	cmp	r0, #0
 801066c:	d1ca      	bne.n	8010604 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 801066e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010676:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801067a:	f3bf 8f4f 	dsb	sy
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	e7bf      	b.n	8010604 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8010684:	2000      	movs	r0, #0
 8010686:	e789      	b.n	801059c <xQueueReceive+0x72>

08010688 <xQueueSemaphoreTake>:
{
 8010688:	b570      	push	{r4, r5, r6, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801068e:	b158      	cbz	r0, 80106a8 <xQueueSemaphoreTake+0x20>
 8010690:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8010692:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010694:	b18b      	cbz	r3, 80106ba <xQueueSemaphoreTake+0x32>
 8010696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069a:	f383 8811 	msr	BASEPRI, r3
 801069e:	f3bf 8f6f 	isb	sy
 80106a2:	f3bf 8f4f 	dsb	sy
 80106a6:	e7fe      	b.n	80106a6 <xQueueSemaphoreTake+0x1e>
 80106a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ac:	f383 8811 	msr	BASEPRI, r3
 80106b0:	f3bf 8f6f 	isb	sy
 80106b4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80106b8:	e7fe      	b.n	80106b8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80106ba:	f000 fe33 	bl	8011324 <xTaskGetSchedulerState>
 80106be:	4605      	mov	r5, r0
 80106c0:	b950      	cbnz	r0, 80106d8 <xQueueSemaphoreTake+0x50>
 80106c2:	9b01      	ldr	r3, [sp, #4]
 80106c4:	b15b      	cbz	r3, 80106de <xQueueSemaphoreTake+0x56>
 80106c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ca:	f383 8811 	msr	BASEPRI, r3
 80106ce:	f3bf 8f6f 	isb	sy
 80106d2:	f3bf 8f4f 	dsb	sy
 80106d6:	e7fe      	b.n	80106d6 <xQueueSemaphoreTake+0x4e>
 80106d8:	2600      	movs	r6, #0
 80106da:	4635      	mov	r5, r6
 80106dc:	e055      	b.n	801078a <xQueueSemaphoreTake+0x102>
 80106de:	4606      	mov	r6, r0
 80106e0:	e053      	b.n	801078a <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80106e2:	3b01      	subs	r3, #1
 80106e4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106e6:	6823      	ldr	r3, [r4, #0]
 80106e8:	b13b      	cbz	r3, 80106fa <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106ea:	6923      	ldr	r3, [r4, #16]
 80106ec:	b94b      	cbnz	r3, 8010702 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 80106ee:	f7ff fab3 	bl	800fc58 <vPortExitCritical>
				return pdPASS;
 80106f2:	2601      	movs	r6, #1
}
 80106f4:	4630      	mov	r0, r6
 80106f6:	b004      	add	sp, #16
 80106f8:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80106fa:	f000 ff07 	bl	801150c <pvTaskIncrementMutexHeldCount>
 80106fe:	60a0      	str	r0, [r4, #8]
 8010700:	e7f3      	b.n	80106ea <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010702:	f104 0010 	add.w	r0, r4, #16
 8010706:	f000 fd73 	bl	80111f0 <xTaskRemoveFromEventList>
 801070a:	2800      	cmp	r0, #0
 801070c:	d0ef      	beq.n	80106ee <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 801070e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010716:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801071a:	f3bf 8f4f 	dsb	sy
 801071e:	f3bf 8f6f 	isb	sy
 8010722:	e7e4      	b.n	80106ee <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010724:	b146      	cbz	r6, 8010738 <xQueueSemaphoreTake+0xb0>
 8010726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072a:	f383 8811 	msr	BASEPRI, r3
 801072e:	f3bf 8f6f 	isb	sy
 8010732:	f3bf 8f4f 	dsb	sy
 8010736:	e7fe      	b.n	8010736 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8010738:	f7ff fa8e 	bl	800fc58 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801073c:	e7da      	b.n	80106f4 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801073e:	a802      	add	r0, sp, #8
 8010740:	f000 fd9c 	bl	801127c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010744:	2501      	movs	r5, #1
 8010746:	e02a      	b.n	801079e <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8010748:	2300      	movs	r3, #0
 801074a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801074e:	e032      	b.n	80107b6 <xQueueSemaphoreTake+0x12e>
 8010750:	2300      	movs	r3, #0
 8010752:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010756:	e034      	b.n	80107c2 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8010758:	f7ff fa5c 	bl	800fc14 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801075c:	68a0      	ldr	r0, [r4, #8]
 801075e:	f000 fdf1 	bl	8011344 <xTaskPriorityInherit>
 8010762:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8010764:	f7ff fa78 	bl	800fc58 <vPortExitCritical>
 8010768:	e03b      	b.n	80107e2 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 801076a:	4620      	mov	r0, r4
 801076c:	f7ff fc17 	bl	800ff9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010770:	f000 fc3e 	bl	8010ff0 <xTaskResumeAll>
 8010774:	e009      	b.n	801078a <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8010776:	4620      	mov	r0, r4
 8010778:	f7ff fc11 	bl	800ff9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801077c:	f000 fc38 	bl	8010ff0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010780:	4620      	mov	r0, r4
 8010782:	f7ff fbb2 	bl	800feea <prvIsQueueEmpty>
 8010786:	2800      	cmp	r0, #0
 8010788:	d142      	bne.n	8010810 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 801078a:	f7ff fa43 	bl	800fc14 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801078e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010790:	2b00      	cmp	r3, #0
 8010792:	d1a6      	bne.n	80106e2 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010794:	9b01      	ldr	r3, [sp, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d0c4      	beq.n	8010724 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 801079a:	2d00      	cmp	r5, #0
 801079c:	d0cf      	beq.n	801073e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 801079e:	f7ff fa5b 	bl	800fc58 <vPortExitCritical>
		vTaskSuspendAll();
 80107a2:	f000 fb8b 	bl	8010ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80107a6:	f7ff fa35 	bl	800fc14 <vPortEnterCritical>
 80107aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80107ae:	b25b      	sxtb	r3, r3
 80107b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107b4:	d0c8      	beq.n	8010748 <xQueueSemaphoreTake+0xc0>
 80107b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80107ba:	b25b      	sxtb	r3, r3
 80107bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c0:	d0c6      	beq.n	8010750 <xQueueSemaphoreTake+0xc8>
 80107c2:	f7ff fa49 	bl	800fc58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80107c6:	a901      	add	r1, sp, #4
 80107c8:	a802      	add	r0, sp, #8
 80107ca:	f000 fd63 	bl	8011294 <xTaskCheckForTimeOut>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d1d1      	bne.n	8010776 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80107d2:	4620      	mov	r0, r4
 80107d4:	f7ff fb89 	bl	800feea <prvIsQueueEmpty>
 80107d8:	2800      	cmp	r0, #0
 80107da:	d0c6      	beq.n	801076a <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80107dc:	6823      	ldr	r3, [r4, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d0ba      	beq.n	8010758 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80107e2:	9901      	ldr	r1, [sp, #4]
 80107e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80107e8:	f000 fcce 	bl	8011188 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80107ec:	4620      	mov	r0, r4
 80107ee:	f7ff fbd6 	bl	800ff9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80107f2:	f000 fbfd 	bl	8010ff0 <xTaskResumeAll>
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d1c7      	bne.n	801078a <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 80107fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80107fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010802:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010806:	f3bf 8f4f 	dsb	sy
 801080a:	f3bf 8f6f 	isb	sy
 801080e:	e7bc      	b.n	801078a <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8010810:	b90e      	cbnz	r6, 8010816 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8010812:	2600      	movs	r6, #0
 8010814:	e76e      	b.n	80106f4 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8010816:	f7ff f9fd 	bl	800fc14 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801081a:	4620      	mov	r0, r4
 801081c:	f7ff fb4e 	bl	800febc <prvGetDisinheritPriorityAfterTimeout>
 8010820:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010822:	68a0      	ldr	r0, [r4, #8]
 8010824:	f000 fe22 	bl	801146c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8010828:	f7ff fa16 	bl	800fc58 <vPortExitCritical>
 801082c:	e7f1      	b.n	8010812 <xQueueSemaphoreTake+0x18a>

0801082e <xQueueReceiveFromISR>:
{
 801082e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8010832:	b1b0      	cbz	r0, 8010862 <xQueueReceiveFromISR+0x34>
 8010834:	460d      	mov	r5, r1
 8010836:	4616      	mov	r6, r2
 8010838:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801083a:	b1d9      	cbz	r1, 8010874 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801083c:	f7ff fb10 	bl	800fe60 <vPortValidateInterruptPriority>
	__asm volatile
 8010840:	f3ef 8811 	mrs	r8, BASEPRI
 8010844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010854:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010856:	b9cf      	cbnz	r7, 801088c <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8010858:	2000      	movs	r0, #0
	__asm volatile
 801085a:	f388 8811 	msr	BASEPRI, r8
}
 801085e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8010862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010866:	f383 8811 	msr	BASEPRI, r3
 801086a:	f3bf 8f6f 	isb	sy
 801086e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010872:	e7fe      	b.n	8010872 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010874:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010876:	2b00      	cmp	r3, #0
 8010878:	d0e0      	beq.n	801083c <xQueueReceiveFromISR+0xe>
 801087a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801087e:	f383 8811 	msr	BASEPRI, r3
 8010882:	f3bf 8f6f 	isb	sy
 8010886:	f3bf 8f4f 	dsb	sy
 801088a:	e7fe      	b.n	801088a <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 801088c:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8010890:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010894:	4629      	mov	r1, r5
 8010896:	4620      	mov	r0, r4
 8010898:	f7ff fb6f 	bl	800ff7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801089c:	3f01      	subs	r7, #1
 801089e:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80108a0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80108a4:	d006      	beq.n	80108b4 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80108a6:	f109 0301 	add.w	r3, r9, #1
 80108aa:	b25b      	sxtb	r3, r3
 80108ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80108b0:	2001      	movs	r0, #1
 80108b2:	e7d2      	b.n	801085a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108b4:	6923      	ldr	r3, [r4, #16]
 80108b6:	b90b      	cbnz	r3, 80108bc <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80108b8:	2001      	movs	r0, #1
 80108ba:	e7ce      	b.n	801085a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108bc:	f104 0010 	add.w	r0, r4, #16
 80108c0:	f000 fc96 	bl	80111f0 <xTaskRemoveFromEventList>
 80108c4:	b118      	cbz	r0, 80108ce <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 80108c6:	b126      	cbz	r6, 80108d2 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80108c8:	2001      	movs	r0, #1
 80108ca:	6030      	str	r0, [r6, #0]
 80108cc:	e7c5      	b.n	801085a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80108ce:	2001      	movs	r0, #1
 80108d0:	e7c3      	b.n	801085a <xQueueReceiveFromISR+0x2c>
 80108d2:	2001      	movs	r0, #1
 80108d4:	e7c1      	b.n	801085a <xQueueReceiveFromISR+0x2c>

080108d6 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80108d6:	b140      	cbz	r0, 80108ea <uxQueueMessagesWaiting+0x14>
{
 80108d8:	b510      	push	{r4, lr}
 80108da:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80108dc:	f7ff f99a 	bl	800fc14 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80108e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80108e2:	f7ff f9b9 	bl	800fc58 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80108e6:	4620      	mov	r0, r4
 80108e8:	bd10      	pop	{r4, pc}
 80108ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ee:	f383 8811 	msr	BASEPRI, r3
 80108f2:	f3bf 8f6f 	isb	sy
 80108f6:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80108fa:	e7fe      	b.n	80108fa <uxQueueMessagesWaiting+0x24>

080108fc <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80108fc:	b108      	cbz	r0, 8010902 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80108fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010900:	4770      	bx	lr
 8010902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010906:	f383 8811 	msr	BASEPRI, r3
 801090a:	f3bf 8f6f 	isb	sy
 801090e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010912:	e7fe      	b.n	8010912 <uxQueueMessagesWaitingFromISR+0x16>

08010914 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010914:	2300      	movs	r3, #0
 8010916:	2b07      	cmp	r3, #7
 8010918:	d80c      	bhi.n	8010934 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801091a:	4a07      	ldr	r2, [pc, #28]	; (8010938 <vQueueAddToRegistry+0x24>)
 801091c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010920:	b10a      	cbz	r2, 8010926 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010922:	3301      	adds	r3, #1
 8010924:	e7f7      	b.n	8010916 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010926:	4a04      	ldr	r2, [pc, #16]	; (8010938 <vQueueAddToRegistry+0x24>)
 8010928:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801092c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010930:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010932:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010934:	4770      	bx	lr
 8010936:	bf00      	nop
 8010938:	2400f7f8 	.word	0x2400f7f8

0801093c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801093c:	2300      	movs	r3, #0
 801093e:	2b07      	cmp	r3, #7
 8010940:	d80f      	bhi.n	8010962 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010942:	4a08      	ldr	r2, [pc, #32]	; (8010964 <vQueueUnregisterQueue+0x28>)
 8010944:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010948:	6852      	ldr	r2, [r2, #4]
 801094a:	4282      	cmp	r2, r0
 801094c:	d001      	beq.n	8010952 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801094e:	3301      	adds	r3, #1
 8010950:	e7f5      	b.n	801093e <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010952:	4a04      	ldr	r2, [pc, #16]	; (8010964 <vQueueUnregisterQueue+0x28>)
 8010954:	2100      	movs	r1, #0
 8010956:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801095a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801095e:	6059      	str	r1, [r3, #4]
				break;
 8010960:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010962:	4770      	bx	lr
 8010964:	2400f7f8 	.word	0x2400f7f8

08010968 <vQueueDelete>:
	configASSERT( pxQueue );
 8010968:	b138      	cbz	r0, 801097a <vQueueDelete+0x12>
{
 801096a:	b510      	push	{r4, lr}
 801096c:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 801096e:	f7ff ffe5 	bl	801093c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010972:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010976:	b14b      	cbz	r3, 801098c <vQueueDelete+0x24>
}
 8010978:	bd10      	pop	{r4, pc}
 801097a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097e:	f383 8811 	msr	BASEPRI, r3
 8010982:	f3bf 8f6f 	isb	sy
 8010986:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801098a:	e7fe      	b.n	801098a <vQueueDelete+0x22>
			vPortFree( pxQueue );
 801098c:	4620      	mov	r0, r4
 801098e:	f7ff f851 	bl	800fa34 <vPortFree>
}
 8010992:	e7f1      	b.n	8010978 <vQueueDelete+0x10>

08010994 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010994:	b570      	push	{r4, r5, r6, lr}
 8010996:	4604      	mov	r4, r0
 8010998:	460d      	mov	r5, r1
 801099a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801099c:	f7ff f93a 	bl	800fc14 <vPortEnterCritical>
 80109a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80109a4:	b25b      	sxtb	r3, r3
 80109a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109aa:	d00d      	beq.n	80109c8 <vQueueWaitForMessageRestricted+0x34>
 80109ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80109b0:	b25b      	sxtb	r3, r3
 80109b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b6:	d00b      	beq.n	80109d0 <vQueueWaitForMessageRestricted+0x3c>
 80109b8:	f7ff f94e 	bl	800fc58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80109bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80109be:	b15b      	cbz	r3, 80109d8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80109c0:	4620      	mov	r0, r4
 80109c2:	f7ff faec 	bl	800ff9e <prvUnlockQueue>
	}
 80109c6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80109c8:	2300      	movs	r3, #0
 80109ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80109ce:	e7ed      	b.n	80109ac <vQueueWaitForMessageRestricted+0x18>
 80109d0:	2300      	movs	r3, #0
 80109d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80109d6:	e7ef      	b.n	80109b8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80109d8:	4632      	mov	r2, r6
 80109da:	4629      	mov	r1, r5
 80109dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80109e0:	f000 fbea 	bl	80111b8 <vTaskPlaceOnEventListRestricted>
 80109e4:	e7ec      	b.n	80109c0 <vQueueWaitForMessageRestricted+0x2c>
	...

080109e8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80109e8:	4b08      	ldr	r3, [pc, #32]	; (8010a0c <prvResetNextTaskUnblockTime+0x24>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	b923      	cbnz	r3, 80109fa <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80109f0:	4b07      	ldr	r3, [pc, #28]	; (8010a10 <prvResetNextTaskUnblockTime+0x28>)
 80109f2:	f04f 32ff 	mov.w	r2, #4294967295
 80109f6:	601a      	str	r2, [r3, #0]
 80109f8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109fa:	4b04      	ldr	r3, [pc, #16]	; (8010a0c <prvResetNextTaskUnblockTime+0x24>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010a02:	685a      	ldr	r2, [r3, #4]
 8010a04:	4b02      	ldr	r3, [pc, #8]	; (8010a10 <prvResetNextTaskUnblockTime+0x28>)
 8010a06:	601a      	str	r2, [r3, #0]
	}
}
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	2400f83c 	.word	0x2400f83c
 8010a10:	2400fce4 	.word	0x2400fce4

08010a14 <prvInitialiseNewTask>:
{
 8010a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a18:	4680      	mov	r8, r0
 8010a1a:	460d      	mov	r5, r1
 8010a1c:	4617      	mov	r7, r2
 8010a1e:	4699      	mov	r9, r3
 8010a20:	9e08      	ldr	r6, [sp, #32]
 8010a22:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010a26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010a28:	0092      	lsls	r2, r2, #2
 8010a2a:	21a5      	movs	r1, #165	; 0xa5
 8010a2c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010a2e:	f012 fe1f 	bl	8023670 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010a32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010a34:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8010a38:	443a      	add	r2, r7
 8010a3a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010a3e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8010a42:	2d00      	cmp	r5, #0
 8010a44:	d043      	beq.n	8010ace <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a46:	f04f 0c00 	mov.w	ip, #0
 8010a4a:	f1bc 0f0f 	cmp.w	ip, #15
 8010a4e:	d80b      	bhi.n	8010a68 <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010a50:	f815 200c 	ldrb.w	r2, [r5, ip]
 8010a54:	eb04 030c 	add.w	r3, r4, ip
 8010a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8010a5c:	f815 300c 	ldrb.w	r3, [r5, ip]
 8010a60:	b113      	cbz	r3, 8010a68 <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a62:	f10c 0c01 	add.w	ip, ip, #1
 8010a66:	e7f0      	b.n	8010a4a <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010a68:	2300      	movs	r3, #0
 8010a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010a6e:	2e37      	cmp	r6, #55	; 0x37
 8010a70:	d900      	bls.n	8010a74 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010a72:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8010a74:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8010a76:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010a78:	2500      	movs	r5, #0
 8010a7a:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010a7c:	1d20      	adds	r0, r4, #4
 8010a7e:	f7ff f822 	bl	800fac6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010a82:	f104 0018 	add.w	r0, r4, #24
 8010a86:	f7ff f81e 	bl	800fac6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010a8a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a8c:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8010a90:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010a92:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8010a94:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010a98:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010a9c:	2260      	movs	r2, #96	; 0x60
 8010a9e:	4629      	mov	r1, r5
 8010aa0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8010aa4:	f012 fde4 	bl	8023670 <memset>
 8010aa8:	4b0b      	ldr	r3, [pc, #44]	; (8010ad8 <prvInitialiseNewTask+0xc4>)
 8010aaa:	65a3      	str	r3, [r4, #88]	; 0x58
 8010aac:	4b0b      	ldr	r3, [pc, #44]	; (8010adc <prvInitialiseNewTask+0xc8>)
 8010aae:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010ab0:	4b0b      	ldr	r3, [pc, #44]	; (8010ae0 <prvInitialiseNewTask+0xcc>)
 8010ab2:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ab4:	464a      	mov	r2, r9
 8010ab6:	4641      	mov	r1, r8
 8010ab8:	4638      	mov	r0, r7
 8010aba:	f7ff f87d 	bl	800fbb8 <pxPortInitialiseStack>
 8010abe:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8010ac0:	f1ba 0f00 	cmp.w	sl, #0
 8010ac4:	d001      	beq.n	8010aca <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010ac6:	f8ca 4000 	str.w	r4, [sl]
}
 8010aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010ad4:	e7cb      	b.n	8010a6e <prvInitialiseNewTask+0x5a>
 8010ad6:	bf00      	nop
 8010ad8:	08027464 	.word	0x08027464
 8010adc:	08027484 	.word	0x08027484
 8010ae0:	08027444 	.word	0x08027444

08010ae4 <prvInitialiseTaskLists>:
{
 8010ae4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ae6:	2400      	movs	r4, #0
 8010ae8:	e007      	b.n	8010afa <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010aea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8010aee:	0093      	lsls	r3, r2, #2
 8010af0:	480e      	ldr	r0, [pc, #56]	; (8010b2c <prvInitialiseTaskLists+0x48>)
 8010af2:	4418      	add	r0, r3
 8010af4:	f7fe ffdc 	bl	800fab0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010af8:	3401      	adds	r4, #1
 8010afa:	2c37      	cmp	r4, #55	; 0x37
 8010afc:	d9f5      	bls.n	8010aea <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8010afe:	4d0c      	ldr	r5, [pc, #48]	; (8010b30 <prvInitialiseTaskLists+0x4c>)
 8010b00:	4628      	mov	r0, r5
 8010b02:	f7fe ffd5 	bl	800fab0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010b06:	4c0b      	ldr	r4, [pc, #44]	; (8010b34 <prvInitialiseTaskLists+0x50>)
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f7fe ffd1 	bl	800fab0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010b0e:	480a      	ldr	r0, [pc, #40]	; (8010b38 <prvInitialiseTaskLists+0x54>)
 8010b10:	f7fe ffce 	bl	800fab0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8010b14:	4809      	ldr	r0, [pc, #36]	; (8010b3c <prvInitialiseTaskLists+0x58>)
 8010b16:	f7fe ffcb 	bl	800fab0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8010b1a:	4809      	ldr	r0, [pc, #36]	; (8010b40 <prvInitialiseTaskLists+0x5c>)
 8010b1c:	f7fe ffc8 	bl	800fab0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8010b20:	4b08      	ldr	r3, [pc, #32]	; (8010b44 <prvInitialiseTaskLists+0x60>)
 8010b22:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010b24:	4b08      	ldr	r3, [pc, #32]	; (8010b48 <prvInitialiseTaskLists+0x64>)
 8010b26:	601c      	str	r4, [r3, #0]
}
 8010b28:	bd38      	pop	{r3, r4, r5, pc}
 8010b2a:	bf00      	nop
 8010b2c:	2400f844 	.word	0x2400f844
 8010b30:	2400fcb8 	.word	0x2400fcb8
 8010b34:	2400fccc 	.word	0x2400fccc
 8010b38:	2400fcf0 	.word	0x2400fcf0
 8010b3c:	2400fd1c 	.word	0x2400fd1c
 8010b40:	2400fd08 	.word	0x2400fd08
 8010b44:	2400f83c 	.word	0x2400f83c
 8010b48:	2400f840 	.word	0x2400f840

08010b4c <prvAddNewTaskToReadyList>:
{
 8010b4c:	b510      	push	{r4, lr}
 8010b4e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010b50:	f7ff f860 	bl	800fc14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8010b54:	4a22      	ldr	r2, [pc, #136]	; (8010be0 <prvAddNewTaskToReadyList+0x94>)
 8010b56:	6813      	ldr	r3, [r2, #0]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010b5c:	4b21      	ldr	r3, [pc, #132]	; (8010be4 <prvAddNewTaskToReadyList+0x98>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	b15b      	cbz	r3, 8010b7a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8010b62:	4b21      	ldr	r3, [pc, #132]	; (8010be8 <prvAddNewTaskToReadyList+0x9c>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	b96b      	cbnz	r3, 8010b84 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010b68:	4b1e      	ldr	r3, [pc, #120]	; (8010be4 <prvAddNewTaskToReadyList+0x98>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d807      	bhi.n	8010b84 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8010b74:	4b1b      	ldr	r3, [pc, #108]	; (8010be4 <prvAddNewTaskToReadyList+0x98>)
 8010b76:	601c      	str	r4, [r3, #0]
 8010b78:	e004      	b.n	8010b84 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8010b7a:	4b1a      	ldr	r3, [pc, #104]	; (8010be4 <prvAddNewTaskToReadyList+0x98>)
 8010b7c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010b7e:	6813      	ldr	r3, [r2, #0]
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d029      	beq.n	8010bd8 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8010b84:	4a19      	ldr	r2, [pc, #100]	; (8010bec <prvAddNewTaskToReadyList+0xa0>)
 8010b86:	6813      	ldr	r3, [r2, #0]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010b8c:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8010b8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010b90:	4b17      	ldr	r3, [pc, #92]	; (8010bf0 <prvAddNewTaskToReadyList+0xa4>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	4298      	cmp	r0, r3
 8010b96:	d901      	bls.n	8010b9c <prvAddNewTaskToReadyList+0x50>
 8010b98:	4b15      	ldr	r3, [pc, #84]	; (8010bf0 <prvAddNewTaskToReadyList+0xa4>)
 8010b9a:	6018      	str	r0, [r3, #0]
 8010b9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010ba0:	1d21      	adds	r1, r4, #4
 8010ba2:	4b14      	ldr	r3, [pc, #80]	; (8010bf4 <prvAddNewTaskToReadyList+0xa8>)
 8010ba4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010ba8:	f7fe ff90 	bl	800facc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8010bac:	f7ff f854 	bl	800fc58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8010bb0:	4b0d      	ldr	r3, [pc, #52]	; (8010be8 <prvAddNewTaskToReadyList+0x9c>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	b17b      	cbz	r3, 8010bd6 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010bb6:	4b0b      	ldr	r3, [pc, #44]	; (8010be4 <prvAddNewTaskToReadyList+0x98>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d209      	bcs.n	8010bd6 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8010bc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	f3bf 8f6f 	isb	sy
}
 8010bd6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8010bd8:	f7ff ff84 	bl	8010ae4 <prvInitialiseTaskLists>
 8010bdc:	e7d2      	b.n	8010b84 <prvAddNewTaskToReadyList+0x38>
 8010bde:	bf00      	nop
 8010be0:	2400fca4 	.word	0x2400fca4
 8010be4:	2400f838 	.word	0x2400f838
 8010be8:	2400fd04 	.word	0x2400fd04
 8010bec:	2400fcb0 	.word	0x2400fcb0
 8010bf0:	2400fcb4 	.word	0x2400fcb4
 8010bf4:	2400f844 	.word	0x2400f844

08010bf8 <prvDeleteTCB>:
	{
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010bfc:	3054      	adds	r0, #84	; 0x54
 8010bfe:	f013 f91b 	bl	8023e38 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010c02:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8010c06:	b163      	cbz	r3, 8010c22 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	d011      	beq.n	8010c30 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010c0c:	2b02      	cmp	r3, #2
 8010c0e:	d00e      	beq.n	8010c2e <prvDeleteTCB+0x36>
 8010c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c14:	f383 8811 	msr	BASEPRI, r3
 8010c18:	f3bf 8f6f 	isb	sy
 8010c1c:	f3bf 8f4f 	dsb	sy
 8010c20:	e7fe      	b.n	8010c20 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8010c22:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010c24:	f7fe ff06 	bl	800fa34 <vPortFree>
				vPortFree( pxTCB );
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f7fe ff03 	bl	800fa34 <vPortFree>
	}
 8010c2e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8010c30:	4620      	mov	r0, r4
 8010c32:	f7fe feff 	bl	800fa34 <vPortFree>
 8010c36:	e7fa      	b.n	8010c2e <prvDeleteTCB+0x36>

08010c38 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c38:	4b0f      	ldr	r3, [pc, #60]	; (8010c78 <prvCheckTasksWaitingTermination+0x40>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	b1d3      	cbz	r3, 8010c74 <prvCheckTasksWaitingTermination+0x3c>
{
 8010c3e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8010c40:	f7fe ffe8 	bl	800fc14 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c44:	4b0d      	ldr	r3, [pc, #52]	; (8010c7c <prvCheckTasksWaitingTermination+0x44>)
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c4a:	1d20      	adds	r0, r4, #4
 8010c4c:	f7fe ff62 	bl	800fb14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010c50:	4a0b      	ldr	r2, [pc, #44]	; (8010c80 <prvCheckTasksWaitingTermination+0x48>)
 8010c52:	6813      	ldr	r3, [r2, #0]
 8010c54:	3b01      	subs	r3, #1
 8010c56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010c58:	4a07      	ldr	r2, [pc, #28]	; (8010c78 <prvCheckTasksWaitingTermination+0x40>)
 8010c5a:	6813      	ldr	r3, [r2, #0]
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8010c60:	f7fe fffa 	bl	800fc58 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010c64:	4620      	mov	r0, r4
 8010c66:	f7ff ffc7 	bl	8010bf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c6a:	4b03      	ldr	r3, [pc, #12]	; (8010c78 <prvCheckTasksWaitingTermination+0x40>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d1e6      	bne.n	8010c40 <prvCheckTasksWaitingTermination+0x8>
}
 8010c72:	bd10      	pop	{r4, pc}
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop
 8010c78:	2400fca8 	.word	0x2400fca8
 8010c7c:	2400fd1c 	.word	0x2400fd1c
 8010c80:	2400fca4 	.word	0x2400fca4

08010c84 <prvIdleTask>:
{
 8010c84:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8010c86:	f7ff ffd7 	bl	8010c38 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010c8a:	4b07      	ldr	r3, [pc, #28]	; (8010ca8 <prvIdleTask+0x24>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d9f9      	bls.n	8010c86 <prvIdleTask+0x2>
				taskYIELD();
 8010c92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010c9e:	f3bf 8f4f 	dsb	sy
 8010ca2:	f3bf 8f6f 	isb	sy
 8010ca6:	e7ee      	b.n	8010c86 <prvIdleTask+0x2>
 8010ca8:	2400f844 	.word	0x2400f844

08010cac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010cac:	b570      	push	{r4, r5, r6, lr}
 8010cae:	4604      	mov	r4, r0
 8010cb0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010cb2:	4b19      	ldr	r3, [pc, #100]	; (8010d18 <prvAddCurrentTaskToDelayedList+0x6c>)
 8010cb4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010cb6:	4b19      	ldr	r3, [pc, #100]	; (8010d1c <prvAddCurrentTaskToDelayedList+0x70>)
 8010cb8:	6818      	ldr	r0, [r3, #0]
 8010cba:	3004      	adds	r0, #4
 8010cbc:	f7fe ff2a 	bl	800fb14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010cc0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010cc4:	bf14      	ite	ne
 8010cc6:	2300      	movne	r3, #0
 8010cc8:	2301      	moveq	r3, #1
 8010cca:	2d00      	cmp	r5, #0
 8010ccc:	bf08      	it	eq
 8010cce:	2300      	moveq	r3, #0
 8010cd0:	b96b      	cbnz	r3, 8010cee <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010cd2:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010cd4:	4b11      	ldr	r3, [pc, #68]	; (8010d1c <prvAddCurrentTaskToDelayedList+0x70>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8010cda:	42a6      	cmp	r6, r4
 8010cdc:	d90e      	bls.n	8010cfc <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010cde:	4b10      	ldr	r3, [pc, #64]	; (8010d20 <prvAddCurrentTaskToDelayedList+0x74>)
 8010ce0:	6818      	ldr	r0, [r3, #0]
 8010ce2:	4b0e      	ldr	r3, [pc, #56]	; (8010d1c <prvAddCurrentTaskToDelayedList+0x70>)
 8010ce4:	6819      	ldr	r1, [r3, #0]
 8010ce6:	3104      	adds	r1, #4
 8010ce8:	f7fe fefb 	bl	800fae2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010cec:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010cee:	4b0b      	ldr	r3, [pc, #44]	; (8010d1c <prvAddCurrentTaskToDelayedList+0x70>)
 8010cf0:	6819      	ldr	r1, [r3, #0]
 8010cf2:	3104      	adds	r1, #4
 8010cf4:	480b      	ldr	r0, [pc, #44]	; (8010d24 <prvAddCurrentTaskToDelayedList+0x78>)
 8010cf6:	f7fe fee9 	bl	800facc <vListInsertEnd>
 8010cfa:	e7f7      	b.n	8010cec <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010cfc:	4b0a      	ldr	r3, [pc, #40]	; (8010d28 <prvAddCurrentTaskToDelayedList+0x7c>)
 8010cfe:	6818      	ldr	r0, [r3, #0]
 8010d00:	4b06      	ldr	r3, [pc, #24]	; (8010d1c <prvAddCurrentTaskToDelayedList+0x70>)
 8010d02:	6819      	ldr	r1, [r3, #0]
 8010d04:	3104      	adds	r1, #4
 8010d06:	f7fe feec 	bl	800fae2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010d0a:	4b08      	ldr	r3, [pc, #32]	; (8010d2c <prvAddCurrentTaskToDelayedList+0x80>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	42a3      	cmp	r3, r4
 8010d10:	d9ec      	bls.n	8010cec <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 8010d12:	4b06      	ldr	r3, [pc, #24]	; (8010d2c <prvAddCurrentTaskToDelayedList+0x80>)
 8010d14:	601c      	str	r4, [r3, #0]
}
 8010d16:	e7e9      	b.n	8010cec <prvAddCurrentTaskToDelayedList+0x40>
 8010d18:	2400fd30 	.word	0x2400fd30
 8010d1c:	2400f838 	.word	0x2400f838
 8010d20:	2400f840 	.word	0x2400f840
 8010d24:	2400fd08 	.word	0x2400fd08
 8010d28:	2400f83c 	.word	0x2400f83c
 8010d2c:	2400fce4 	.word	0x2400fce4

08010d30 <xTaskCreateStatic>:
	{
 8010d30:	b530      	push	{r4, r5, lr}
 8010d32:	b087      	sub	sp, #28
 8010d34:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010d36:	b17c      	cbz	r4, 8010d58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010d38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010d3a:	b1b5      	cbz	r5, 8010d6a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010d3c:	25bc      	movs	r5, #188	; 0xbc
 8010d3e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010d40:	9d04      	ldr	r5, [sp, #16]
 8010d42:	2dbc      	cmp	r5, #188	; 0xbc
 8010d44:	d01a      	beq.n	8010d7c <xTaskCreateStatic+0x4c>
 8010d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d4a:	f383 8811 	msr	BASEPRI, r3
 8010d4e:	f3bf 8f6f 	isb	sy
 8010d52:	f3bf 8f4f 	dsb	sy
 8010d56:	e7fe      	b.n	8010d56 <xTaskCreateStatic+0x26>
 8010d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5c:	f383 8811 	msr	BASEPRI, r3
 8010d60:	f3bf 8f6f 	isb	sy
 8010d64:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8010d68:	e7fe      	b.n	8010d68 <xTaskCreateStatic+0x38>
 8010d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6e:	f383 8811 	msr	BASEPRI, r3
 8010d72:	f3bf 8f6f 	isb	sy
 8010d76:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8010d7a:	e7fe      	b.n	8010d7a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010d7c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010d7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010d80:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010d82:	2402      	movs	r4, #2
 8010d84:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010d88:	2400      	movs	r4, #0
 8010d8a:	9403      	str	r4, [sp, #12]
 8010d8c:	9502      	str	r5, [sp, #8]
 8010d8e:	ac05      	add	r4, sp, #20
 8010d90:	9401      	str	r4, [sp, #4]
 8010d92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010d94:	9400      	str	r4, [sp, #0]
 8010d96:	f7ff fe3d 	bl	8010a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010d9c:	f7ff fed6 	bl	8010b4c <prvAddNewTaskToReadyList>
	}
 8010da0:	9805      	ldr	r0, [sp, #20]
 8010da2:	b007      	add	sp, #28
 8010da4:	bd30      	pop	{r4, r5, pc}

08010da6 <xTaskCreate>:
	{
 8010da6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010daa:	b085      	sub	sp, #20
 8010dac:	4607      	mov	r7, r0
 8010dae:	4688      	mov	r8, r1
 8010db0:	4614      	mov	r4, r2
 8010db2:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010db4:	0090      	lsls	r0, r2, #2
 8010db6:	f7fe fdbf 	bl	800f938 <pvPortMalloc>
			if( pxStack != NULL )
 8010dba:	b300      	cbz	r0, 8010dfe <xTaskCreate+0x58>
 8010dbc:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010dbe:	20bc      	movs	r0, #188	; 0xbc
 8010dc0:	f7fe fdba 	bl	800f938 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8010dc4:	4605      	mov	r5, r0
 8010dc6:	b1b0      	cbz	r0, 8010df6 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8010dc8:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8010dcc:	b1e5      	cbz	r5, 8010e08 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010dd4:	9303      	str	r3, [sp, #12]
 8010dd6:	9502      	str	r5, [sp, #8]
 8010dd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dda:	9301      	str	r3, [sp, #4]
 8010ddc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dde:	9300      	str	r3, [sp, #0]
 8010de0:	4633      	mov	r3, r6
 8010de2:	4622      	mov	r2, r4
 8010de4:	4641      	mov	r1, r8
 8010de6:	4638      	mov	r0, r7
 8010de8:	f7ff fe14 	bl	8010a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010dec:	4628      	mov	r0, r5
 8010dee:	f7ff fead 	bl	8010b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010df2:	2001      	movs	r0, #1
 8010df4:	e005      	b.n	8010e02 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8010df6:	4648      	mov	r0, r9
 8010df8:	f7fe fe1c 	bl	800fa34 <vPortFree>
 8010dfc:	e7e6      	b.n	8010dcc <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010dfe:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8010e02:	b005      	add	sp, #20
 8010e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e08:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8010e0c:	e7f9      	b.n	8010e02 <xTaskCreate+0x5c>
	...

08010e10 <vTaskStartScheduler>:
{
 8010e10:	b510      	push	{r4, lr}
 8010e12:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010e14:	2400      	movs	r4, #0
 8010e16:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010e18:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010e1a:	aa07      	add	r2, sp, #28
 8010e1c:	a906      	add	r1, sp, #24
 8010e1e:	a805      	add	r0, sp, #20
 8010e20:	f7fe fd0e 	bl	800f840 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010e24:	9b05      	ldr	r3, [sp, #20]
 8010e26:	9302      	str	r3, [sp, #8]
 8010e28:	9b06      	ldr	r3, [sp, #24]
 8010e2a:	9301      	str	r3, [sp, #4]
 8010e2c:	9400      	str	r4, [sp, #0]
 8010e2e:	4623      	mov	r3, r4
 8010e30:	9a07      	ldr	r2, [sp, #28]
 8010e32:	491a      	ldr	r1, [pc, #104]	; (8010e9c <vTaskStartScheduler+0x8c>)
 8010e34:	481a      	ldr	r0, [pc, #104]	; (8010ea0 <vTaskStartScheduler+0x90>)
 8010e36:	f7ff ff7b 	bl	8010d30 <xTaskCreateStatic>
 8010e3a:	4b1a      	ldr	r3, [pc, #104]	; (8010ea4 <vTaskStartScheduler+0x94>)
 8010e3c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8010e3e:	b140      	cbz	r0, 8010e52 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8010e40:	f000 fbe2 	bl	8011608 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8010e44:	2801      	cmp	r0, #1
 8010e46:	d006      	beq.n	8010e56 <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010e48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010e4c:	d01d      	beq.n	8010e8a <vTaskStartScheduler+0x7a>
}
 8010e4e:	b008      	add	sp, #32
 8010e50:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8010e52:	2000      	movs	r0, #0
 8010e54:	e7f6      	b.n	8010e44 <vTaskStartScheduler+0x34>
 8010e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5a:	f383 8811 	msr	BASEPRI, r3
 8010e5e:	f3bf 8f6f 	isb	sy
 8010e62:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010e66:	4b10      	ldr	r3, [pc, #64]	; (8010ea8 <vTaskStartScheduler+0x98>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	3354      	adds	r3, #84	; 0x54
 8010e6c:	4a0f      	ldr	r2, [pc, #60]	; (8010eac <vTaskStartScheduler+0x9c>)
 8010e6e:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8010e70:	4b0f      	ldr	r3, [pc, #60]	; (8010eb0 <vTaskStartScheduler+0xa0>)
 8010e72:	f04f 32ff 	mov.w	r2, #4294967295
 8010e76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010e78:	4b0e      	ldr	r3, [pc, #56]	; (8010eb4 <vTaskStartScheduler+0xa4>)
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010e7e:	4b0e      	ldr	r3, [pc, #56]	; (8010eb8 <vTaskStartScheduler+0xa8>)
 8010e80:	2200      	movs	r2, #0
 8010e82:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8010e84:	f7fe ff60 	bl	800fd48 <xPortStartScheduler>
 8010e88:	e7e1      	b.n	8010e4e <vTaskStartScheduler+0x3e>
 8010e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e8e:	f383 8811 	msr	BASEPRI, r3
 8010e92:	f3bf 8f6f 	isb	sy
 8010e96:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010e9a:	e7fe      	b.n	8010e9a <vTaskStartScheduler+0x8a>
 8010e9c:	080268b8 	.word	0x080268b8
 8010ea0:	08010c85 	.word	0x08010c85
 8010ea4:	2400fce0 	.word	0x2400fce0
 8010ea8:	2400f838 	.word	0x2400f838
 8010eac:	240000dc 	.word	0x240000dc
 8010eb0:	2400fce4 	.word	0x2400fce4
 8010eb4:	2400fd04 	.word	0x2400fd04
 8010eb8:	2400fd30 	.word	0x2400fd30

08010ebc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010ebc:	4a02      	ldr	r2, [pc, #8]	; (8010ec8 <vTaskSuspendAll+0xc>)
 8010ebe:	6813      	ldr	r3, [r2, #0]
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	6013      	str	r3, [r2, #0]
}
 8010ec4:	4770      	bx	lr
 8010ec6:	bf00      	nop
 8010ec8:	2400fcac 	.word	0x2400fcac

08010ecc <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010ecc:	4b01      	ldr	r3, [pc, #4]	; (8010ed4 <xTaskGetTickCount+0x8>)
 8010ece:	6818      	ldr	r0, [r3, #0]
}
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop
 8010ed4:	2400fd30 	.word	0x2400fd30

08010ed8 <xTaskIncrementTick>:
{
 8010ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010eda:	4b3a      	ldr	r3, [pc, #232]	; (8010fc4 <xTaskIncrementTick+0xec>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d169      	bne.n	8010fb6 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010ee2:	4b39      	ldr	r3, [pc, #228]	; (8010fc8 <xTaskIncrementTick+0xf0>)
 8010ee4:	681d      	ldr	r5, [r3, #0]
 8010ee6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8010ee8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010eea:	b9c5      	cbnz	r5, 8010f1e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8010eec:	4b37      	ldr	r3, [pc, #220]	; (8010fcc <xTaskIncrementTick+0xf4>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	b143      	cbz	r3, 8010f06 <xTaskIncrementTick+0x2e>
 8010ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef8:	f383 8811 	msr	BASEPRI, r3
 8010efc:	f3bf 8f6f 	isb	sy
 8010f00:	f3bf 8f4f 	dsb	sy
 8010f04:	e7fe      	b.n	8010f04 <xTaskIncrementTick+0x2c>
 8010f06:	4a31      	ldr	r2, [pc, #196]	; (8010fcc <xTaskIncrementTick+0xf4>)
 8010f08:	6811      	ldr	r1, [r2, #0]
 8010f0a:	4b31      	ldr	r3, [pc, #196]	; (8010fd0 <xTaskIncrementTick+0xf8>)
 8010f0c:	6818      	ldr	r0, [r3, #0]
 8010f0e:	6010      	str	r0, [r2, #0]
 8010f10:	6019      	str	r1, [r3, #0]
 8010f12:	4a30      	ldr	r2, [pc, #192]	; (8010fd4 <xTaskIncrementTick+0xfc>)
 8010f14:	6813      	ldr	r3, [r2, #0]
 8010f16:	3301      	adds	r3, #1
 8010f18:	6013      	str	r3, [r2, #0]
 8010f1a:	f7ff fd65 	bl	80109e8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010f1e:	4b2e      	ldr	r3, [pc, #184]	; (8010fd8 <xTaskIncrementTick+0x100>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	42ab      	cmp	r3, r5
 8010f24:	d93d      	bls.n	8010fa2 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8010f26:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010f28:	4b2c      	ldr	r3, [pc, #176]	; (8010fdc <xTaskIncrementTick+0x104>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010f32:	009a      	lsls	r2, r3, #2
 8010f34:	4b2a      	ldr	r3, [pc, #168]	; (8010fe0 <xTaskIncrementTick+0x108>)
 8010f36:	589b      	ldr	r3, [r3, r2]
 8010f38:	2b01      	cmp	r3, #1
 8010f3a:	d900      	bls.n	8010f3e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8010f3c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8010f3e:	4b29      	ldr	r3, [pc, #164]	; (8010fe4 <xTaskIncrementTick+0x10c>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d03c      	beq.n	8010fc0 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8010f46:	2701      	movs	r7, #1
	return xSwitchRequired;
 8010f48:	e03a      	b.n	8010fc0 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8010f4a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f4c:	4b1f      	ldr	r3, [pc, #124]	; (8010fcc <xTaskIncrementTick+0xf4>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	b343      	cbz	r3, 8010fa6 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f54:	4b1d      	ldr	r3, [pc, #116]	; (8010fcc <xTaskIncrementTick+0xf4>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	68db      	ldr	r3, [r3, #12]
 8010f5a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010f5c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8010f5e:	429d      	cmp	r5, r3
 8010f60:	d326      	bcc.n	8010fb0 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f62:	1d26      	adds	r6, r4, #4
 8010f64:	4630      	mov	r0, r6
 8010f66:	f7fe fdd5 	bl	800fb14 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f6c:	b11b      	cbz	r3, 8010f76 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f6e:	f104 0018 	add.w	r0, r4, #24
 8010f72:	f7fe fdcf 	bl	800fb14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010f78:	4a1b      	ldr	r2, [pc, #108]	; (8010fe8 <xTaskIncrementTick+0x110>)
 8010f7a:	6812      	ldr	r2, [r2, #0]
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	d901      	bls.n	8010f84 <xTaskIncrementTick+0xac>
 8010f80:	4a19      	ldr	r2, [pc, #100]	; (8010fe8 <xTaskIncrementTick+0x110>)
 8010f82:	6013      	str	r3, [r2, #0]
 8010f84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010f88:	009a      	lsls	r2, r3, #2
 8010f8a:	4631      	mov	r1, r6
 8010f8c:	4814      	ldr	r0, [pc, #80]	; (8010fe0 <xTaskIncrementTick+0x108>)
 8010f8e:	4410      	add	r0, r2
 8010f90:	f7fe fd9c 	bl	800facc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010f96:	4b11      	ldr	r3, [pc, #68]	; (8010fdc <xTaskIncrementTick+0x104>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d2d4      	bcs.n	8010f4a <xTaskIncrementTick+0x72>
 8010fa0:	e7d4      	b.n	8010f4c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8010fa2:	2700      	movs	r7, #0
 8010fa4:	e7d2      	b.n	8010f4c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fa6:	4b0c      	ldr	r3, [pc, #48]	; (8010fd8 <xTaskIncrementTick+0x100>)
 8010fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8010fac:	601a      	str	r2, [r3, #0]
					break;
 8010fae:	e7bb      	b.n	8010f28 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8010fb0:	4a09      	ldr	r2, [pc, #36]	; (8010fd8 <xTaskIncrementTick+0x100>)
 8010fb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010fb4:	e7b8      	b.n	8010f28 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8010fb6:	4a0d      	ldr	r2, [pc, #52]	; (8010fec <xTaskIncrementTick+0x114>)
 8010fb8:	6813      	ldr	r3, [r2, #0]
 8010fba:	3301      	adds	r3, #1
 8010fbc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8010fbe:	2700      	movs	r7, #0
}
 8010fc0:	4638      	mov	r0, r7
 8010fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fc4:	2400fcac 	.word	0x2400fcac
 8010fc8:	2400fd30 	.word	0x2400fd30
 8010fcc:	2400f83c 	.word	0x2400f83c
 8010fd0:	2400f840 	.word	0x2400f840
 8010fd4:	2400fce8 	.word	0x2400fce8
 8010fd8:	2400fce4 	.word	0x2400fce4
 8010fdc:	2400f838 	.word	0x2400f838
 8010fe0:	2400f844 	.word	0x2400f844
 8010fe4:	2400fd34 	.word	0x2400fd34
 8010fe8:	2400fcb4 	.word	0x2400fcb4
 8010fec:	2400fcec 	.word	0x2400fcec

08010ff0 <xTaskResumeAll>:
{
 8010ff0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8010ff2:	4b35      	ldr	r3, [pc, #212]	; (80110c8 <xTaskResumeAll+0xd8>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	b943      	cbnz	r3, 801100a <xTaskResumeAll+0x1a>
 8010ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffc:	f383 8811 	msr	BASEPRI, r3
 8011000:	f3bf 8f6f 	isb	sy
 8011004:	f3bf 8f4f 	dsb	sy
 8011008:	e7fe      	b.n	8011008 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 801100a:	f7fe fe03 	bl	800fc14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801100e:	4b2e      	ldr	r3, [pc, #184]	; (80110c8 <xTaskResumeAll+0xd8>)
 8011010:	681a      	ldr	r2, [r3, #0]
 8011012:	3a01      	subs	r2, #1
 8011014:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d14f      	bne.n	80110bc <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801101c:	4b2b      	ldr	r3, [pc, #172]	; (80110cc <xTaskResumeAll+0xdc>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	b90b      	cbnz	r3, 8011026 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8011022:	2400      	movs	r4, #0
 8011024:	e04b      	b.n	80110be <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8011026:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011028:	4b29      	ldr	r3, [pc, #164]	; (80110d0 <xTaskResumeAll+0xe0>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	b31b      	cbz	r3, 8011076 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801102e:	4b28      	ldr	r3, [pc, #160]	; (80110d0 <xTaskResumeAll+0xe0>)
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011034:	f104 0018 	add.w	r0, r4, #24
 8011038:	f7fe fd6c 	bl	800fb14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801103c:	1d25      	adds	r5, r4, #4
 801103e:	4628      	mov	r0, r5
 8011040:	f7fe fd68 	bl	800fb14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011044:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011046:	4b23      	ldr	r3, [pc, #140]	; (80110d4 <xTaskResumeAll+0xe4>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	4298      	cmp	r0, r3
 801104c:	d901      	bls.n	8011052 <xTaskResumeAll+0x62>
 801104e:	4b21      	ldr	r3, [pc, #132]	; (80110d4 <xTaskResumeAll+0xe4>)
 8011050:	6018      	str	r0, [r3, #0]
 8011052:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011056:	4629      	mov	r1, r5
 8011058:	4b1f      	ldr	r3, [pc, #124]	; (80110d8 <xTaskResumeAll+0xe8>)
 801105a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801105e:	f7fe fd35 	bl	800facc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011062:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011064:	4b1d      	ldr	r3, [pc, #116]	; (80110dc <xTaskResumeAll+0xec>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801106a:	429a      	cmp	r2, r3
 801106c:	d3dc      	bcc.n	8011028 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 801106e:	4b1c      	ldr	r3, [pc, #112]	; (80110e0 <xTaskResumeAll+0xf0>)
 8011070:	2201      	movs	r2, #1
 8011072:	601a      	str	r2, [r3, #0]
 8011074:	e7d8      	b.n	8011028 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8011076:	b10c      	cbz	r4, 801107c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8011078:	f7ff fcb6 	bl	80109e8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801107c:	4b19      	ldr	r3, [pc, #100]	; (80110e4 <xTaskResumeAll+0xf4>)
 801107e:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8011080:	b984      	cbnz	r4, 80110a4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8011082:	4b17      	ldr	r3, [pc, #92]	; (80110e0 <xTaskResumeAll+0xf0>)
 8011084:	681c      	ldr	r4, [r3, #0]
 8011086:	b1d4      	cbz	r4, 80110be <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8011088:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801108c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011090:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8011094:	f3bf 8f4f 	dsb	sy
 8011098:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801109c:	2401      	movs	r4, #1
 801109e:	e00e      	b.n	80110be <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 80110a0:	3c01      	subs	r4, #1
 80110a2:	d007      	beq.n	80110b4 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 80110a4:	f7ff ff18 	bl	8010ed8 <xTaskIncrementTick>
 80110a8:	2800      	cmp	r0, #0
 80110aa:	d0f9      	beq.n	80110a0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80110ac:	4b0c      	ldr	r3, [pc, #48]	; (80110e0 <xTaskResumeAll+0xf0>)
 80110ae:	2201      	movs	r2, #1
 80110b0:	601a      	str	r2, [r3, #0]
 80110b2:	e7f5      	b.n	80110a0 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 80110b4:	4b0b      	ldr	r3, [pc, #44]	; (80110e4 <xTaskResumeAll+0xf4>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	601a      	str	r2, [r3, #0]
 80110ba:	e7e2      	b.n	8011082 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 80110bc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80110be:	f7fe fdcb 	bl	800fc58 <vPortExitCritical>
}
 80110c2:	4620      	mov	r0, r4
 80110c4:	bd38      	pop	{r3, r4, r5, pc}
 80110c6:	bf00      	nop
 80110c8:	2400fcac 	.word	0x2400fcac
 80110cc:	2400fca4 	.word	0x2400fca4
 80110d0:	2400fcf0 	.word	0x2400fcf0
 80110d4:	2400fcb4 	.word	0x2400fcb4
 80110d8:	2400f844 	.word	0x2400f844
 80110dc:	2400f838 	.word	0x2400f838
 80110e0:	2400fd34 	.word	0x2400fd34
 80110e4:	2400fcec 	.word	0x2400fcec

080110e8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80110e8:	4b21      	ldr	r3, [pc, #132]	; (8011170 <vTaskSwitchContext+0x88>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	b11b      	cbz	r3, 80110f6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80110ee:	4b21      	ldr	r3, [pc, #132]	; (8011174 <vTaskSwitchContext+0x8c>)
 80110f0:	2201      	movs	r2, #1
 80110f2:	601a      	str	r2, [r3, #0]
 80110f4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80110f6:	4b1f      	ldr	r3, [pc, #124]	; (8011174 <vTaskSwitchContext+0x8c>)
 80110f8:	2200      	movs	r2, #0
 80110fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110fc:	4b1e      	ldr	r3, [pc, #120]	; (8011178 <vTaskSwitchContext+0x90>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8011104:	008a      	lsls	r2, r1, #2
 8011106:	491d      	ldr	r1, [pc, #116]	; (801117c <vTaskSwitchContext+0x94>)
 8011108:	588a      	ldr	r2, [r1, r2]
 801110a:	b95a      	cbnz	r2, 8011124 <vTaskSwitchContext+0x3c>
 801110c:	b10b      	cbz	r3, 8011112 <vTaskSwitchContext+0x2a>
 801110e:	3b01      	subs	r3, #1
 8011110:	e7f6      	b.n	8011100 <vTaskSwitchContext+0x18>
 8011112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011116:	f383 8811 	msr	BASEPRI, r3
 801111a:	f3bf 8f6f 	isb	sy
 801111e:	f3bf 8f4f 	dsb	sy
 8011122:	e7fe      	b.n	8011122 <vTaskSwitchContext+0x3a>
 8011124:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8011128:	0082      	lsls	r2, r0, #2
 801112a:	440a      	add	r2, r1
 801112c:	6850      	ldr	r0, [r2, #4]
 801112e:	6840      	ldr	r0, [r0, #4]
 8011130:	6050      	str	r0, [r2, #4]
 8011132:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8011136:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801113a:	3208      	adds	r2, #8
 801113c:	4411      	add	r1, r2
 801113e:	4288      	cmp	r0, r1
 8011140:	d00f      	beq.n	8011162 <vTaskSwitchContext+0x7a>
 8011142:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8011146:	0091      	lsls	r1, r2, #2
 8011148:	4a0c      	ldr	r2, [pc, #48]	; (801117c <vTaskSwitchContext+0x94>)
 801114a:	440a      	add	r2, r1
 801114c:	6852      	ldr	r2, [r2, #4]
 801114e:	68d1      	ldr	r1, [r2, #12]
 8011150:	4a0b      	ldr	r2, [pc, #44]	; (8011180 <vTaskSwitchContext+0x98>)
 8011152:	6011      	str	r1, [r2, #0]
 8011154:	4908      	ldr	r1, [pc, #32]	; (8011178 <vTaskSwitchContext+0x90>)
 8011156:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011158:	6813      	ldr	r3, [r2, #0]
 801115a:	3354      	adds	r3, #84	; 0x54
 801115c:	4a09      	ldr	r2, [pc, #36]	; (8011184 <vTaskSwitchContext+0x9c>)
 801115e:	6013      	str	r3, [r2, #0]
}
 8011160:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011162:	6840      	ldr	r0, [r0, #4]
 8011164:	4662      	mov	r2, ip
 8011166:	0091      	lsls	r1, r2, #2
 8011168:	4a04      	ldr	r2, [pc, #16]	; (801117c <vTaskSwitchContext+0x94>)
 801116a:	440a      	add	r2, r1
 801116c:	6050      	str	r0, [r2, #4]
 801116e:	e7e8      	b.n	8011142 <vTaskSwitchContext+0x5a>
 8011170:	2400fcac 	.word	0x2400fcac
 8011174:	2400fd34 	.word	0x2400fd34
 8011178:	2400fcb4 	.word	0x2400fcb4
 801117c:	2400f844 	.word	0x2400f844
 8011180:	2400f838 	.word	0x2400f838
 8011184:	240000dc 	.word	0x240000dc

08011188 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8011188:	b158      	cbz	r0, 80111a2 <vTaskPlaceOnEventList+0x1a>
{
 801118a:	b510      	push	{r4, lr}
 801118c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801118e:	4a09      	ldr	r2, [pc, #36]	; (80111b4 <vTaskPlaceOnEventList+0x2c>)
 8011190:	6811      	ldr	r1, [r2, #0]
 8011192:	3118      	adds	r1, #24
 8011194:	f7fe fca5 	bl	800fae2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011198:	2101      	movs	r1, #1
 801119a:	4620      	mov	r0, r4
 801119c:	f7ff fd86 	bl	8010cac <prvAddCurrentTaskToDelayedList>
}
 80111a0:	bd10      	pop	{r4, pc}
 80111a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a6:	f383 8811 	msr	BASEPRI, r3
 80111aa:	f3bf 8f6f 	isb	sy
 80111ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80111b2:	e7fe      	b.n	80111b2 <vTaskPlaceOnEventList+0x2a>
 80111b4:	2400f838 	.word	0x2400f838

080111b8 <vTaskPlaceOnEventListRestricted>:
	{
 80111b8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80111ba:	b170      	cbz	r0, 80111da <vTaskPlaceOnEventListRestricted+0x22>
 80111bc:	460d      	mov	r5, r1
 80111be:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80111c0:	4a0a      	ldr	r2, [pc, #40]	; (80111ec <vTaskPlaceOnEventListRestricted+0x34>)
 80111c2:	6811      	ldr	r1, [r2, #0]
 80111c4:	3118      	adds	r1, #24
 80111c6:	f7fe fc81 	bl	800facc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80111ca:	b10c      	cbz	r4, 80111d0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80111cc:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80111d0:	4621      	mov	r1, r4
 80111d2:	4628      	mov	r0, r5
 80111d4:	f7ff fd6a 	bl	8010cac <prvAddCurrentTaskToDelayedList>
	}
 80111d8:	bd38      	pop	{r3, r4, r5, pc}
 80111da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111de:	f383 8811 	msr	BASEPRI, r3
 80111e2:	f3bf 8f6f 	isb	sy
 80111e6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80111ea:	e7fe      	b.n	80111ea <vTaskPlaceOnEventListRestricted+0x32>
 80111ec:	2400f838 	.word	0x2400f838

080111f0 <xTaskRemoveFromEventList>:
{
 80111f0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111f2:	68c3      	ldr	r3, [r0, #12]
 80111f4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80111f6:	b324      	cbz	r4, 8011242 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80111f8:	f104 0518 	add.w	r5, r4, #24
 80111fc:	4628      	mov	r0, r5
 80111fe:	f7fe fc89 	bl	800fb14 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011202:	4b18      	ldr	r3, [pc, #96]	; (8011264 <xTaskRemoveFromEventList+0x74>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	bb2b      	cbnz	r3, 8011254 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011208:	1d25      	adds	r5, r4, #4
 801120a:	4628      	mov	r0, r5
 801120c:	f7fe fc82 	bl	800fb14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011210:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011212:	4b15      	ldr	r3, [pc, #84]	; (8011268 <xTaskRemoveFromEventList+0x78>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4298      	cmp	r0, r3
 8011218:	d901      	bls.n	801121e <xTaskRemoveFromEventList+0x2e>
 801121a:	4b13      	ldr	r3, [pc, #76]	; (8011268 <xTaskRemoveFromEventList+0x78>)
 801121c:	6018      	str	r0, [r3, #0]
 801121e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011222:	4629      	mov	r1, r5
 8011224:	4b11      	ldr	r3, [pc, #68]	; (801126c <xTaskRemoveFromEventList+0x7c>)
 8011226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801122a:	f7fe fc4f 	bl	800facc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801122e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011230:	4b0f      	ldr	r3, [pc, #60]	; (8011270 <xTaskRemoveFromEventList+0x80>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011236:	429a      	cmp	r2, r3
 8011238:	d911      	bls.n	801125e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 801123a:	2001      	movs	r0, #1
 801123c:	4b0d      	ldr	r3, [pc, #52]	; (8011274 <xTaskRemoveFromEventList+0x84>)
 801123e:	6018      	str	r0, [r3, #0]
}
 8011240:	bd38      	pop	{r3, r4, r5, pc}
 8011242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011246:	f383 8811 	msr	BASEPRI, r3
 801124a:	f3bf 8f6f 	isb	sy
 801124e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8011252:	e7fe      	b.n	8011252 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011254:	4629      	mov	r1, r5
 8011256:	4808      	ldr	r0, [pc, #32]	; (8011278 <xTaskRemoveFromEventList+0x88>)
 8011258:	f7fe fc38 	bl	800facc <vListInsertEnd>
 801125c:	e7e7      	b.n	801122e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 801125e:	2000      	movs	r0, #0
	return xReturn;
 8011260:	e7ee      	b.n	8011240 <xTaskRemoveFromEventList+0x50>
 8011262:	bf00      	nop
 8011264:	2400fcac 	.word	0x2400fcac
 8011268:	2400fcb4 	.word	0x2400fcb4
 801126c:	2400f844 	.word	0x2400f844
 8011270:	2400f838 	.word	0x2400f838
 8011274:	2400fd34 	.word	0x2400fd34
 8011278:	2400fcf0 	.word	0x2400fcf0

0801127c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801127c:	4b03      	ldr	r3, [pc, #12]	; (801128c <vTaskInternalSetTimeOutState+0x10>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011282:	4b03      	ldr	r3, [pc, #12]	; (8011290 <vTaskInternalSetTimeOutState+0x14>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	6043      	str	r3, [r0, #4]
}
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	2400fce8 	.word	0x2400fce8
 8011290:	2400fd30 	.word	0x2400fd30

08011294 <xTaskCheckForTimeOut>:
{
 8011294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8011296:	b1c8      	cbz	r0, 80112cc <xTaskCheckForTimeOut+0x38>
 8011298:	460c      	mov	r4, r1
 801129a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 801129c:	b1f9      	cbz	r1, 80112de <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 801129e:	f7fe fcb9 	bl	800fc14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80112a2:	4b1b      	ldr	r3, [pc, #108]	; (8011310 <xTaskCheckForTimeOut+0x7c>)
 80112a4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80112a6:	686b      	ldr	r3, [r5, #4]
 80112a8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80112aa:	6822      	ldr	r2, [r4, #0]
 80112ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80112b0:	d026      	beq.n	8011300 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80112b2:	4e18      	ldr	r6, [pc, #96]	; (8011314 <xTaskCheckForTimeOut+0x80>)
 80112b4:	6836      	ldr	r6, [r6, #0]
 80112b6:	682f      	ldr	r7, [r5, #0]
 80112b8:	42b7      	cmp	r7, r6
 80112ba:	d001      	beq.n	80112c0 <xTaskCheckForTimeOut+0x2c>
 80112bc:	428b      	cmp	r3, r1
 80112be:	d924      	bls.n	801130a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80112c0:	4282      	cmp	r2, r0
 80112c2:	d815      	bhi.n	80112f0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80112c4:	2300      	movs	r3, #0
 80112c6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80112c8:	2401      	movs	r4, #1
 80112ca:	e01a      	b.n	8011302 <xTaskCheckForTimeOut+0x6e>
 80112cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d0:	f383 8811 	msr	BASEPRI, r3
 80112d4:	f3bf 8f6f 	isb	sy
 80112d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80112dc:	e7fe      	b.n	80112dc <xTaskCheckForTimeOut+0x48>
 80112de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e2:	f383 8811 	msr	BASEPRI, r3
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80112ee:	e7fe      	b.n	80112ee <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 80112f0:	1a5b      	subs	r3, r3, r1
 80112f2:	4413      	add	r3, r2
 80112f4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80112f6:	4628      	mov	r0, r5
 80112f8:	f7ff ffc0 	bl	801127c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80112fc:	2400      	movs	r4, #0
 80112fe:	e000      	b.n	8011302 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8011300:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011302:	f7fe fca9 	bl	800fc58 <vPortExitCritical>
}
 8011306:	4620      	mov	r0, r4
 8011308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801130a:	2401      	movs	r4, #1
 801130c:	e7f9      	b.n	8011302 <xTaskCheckForTimeOut+0x6e>
 801130e:	bf00      	nop
 8011310:	2400fd30 	.word	0x2400fd30
 8011314:	2400fce8 	.word	0x2400fce8

08011318 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011318:	4b01      	ldr	r3, [pc, #4]	; (8011320 <vTaskMissedYield+0x8>)
 801131a:	2201      	movs	r2, #1
 801131c:	601a      	str	r2, [r3, #0]
}
 801131e:	4770      	bx	lr
 8011320:	2400fd34 	.word	0x2400fd34

08011324 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011324:	4b05      	ldr	r3, [pc, #20]	; (801133c <xTaskGetSchedulerState+0x18>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	b133      	cbz	r3, 8011338 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801132a:	4b05      	ldr	r3, [pc, #20]	; (8011340 <xTaskGetSchedulerState+0x1c>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	b10b      	cbz	r3, 8011334 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8011330:	2000      	movs	r0, #0
	}
 8011332:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8011334:	2002      	movs	r0, #2
 8011336:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011338:	2001      	movs	r0, #1
 801133a:	4770      	bx	lr
 801133c:	2400fd04 	.word	0x2400fd04
 8011340:	2400fcac 	.word	0x2400fcac

08011344 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8011344:	2800      	cmp	r0, #0
 8011346:	d03e      	beq.n	80113c6 <xTaskPriorityInherit+0x82>
	{
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801134c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801134e:	4a20      	ldr	r2, [pc, #128]	; (80113d0 <xTaskPriorityInherit+0x8c>)
 8011350:	6812      	ldr	r2, [r2, #0]
 8011352:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011354:	4293      	cmp	r3, r2
 8011356:	d22e      	bcs.n	80113b6 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011358:	6982      	ldr	r2, [r0, #24]
 801135a:	2a00      	cmp	r2, #0
 801135c:	db05      	blt.n	801136a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801135e:	4a1c      	ldr	r2, [pc, #112]	; (80113d0 <xTaskPriorityInherit+0x8c>)
 8011360:	6812      	ldr	r2, [r2, #0]
 8011362:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011364:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011368:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801136a:	6961      	ldr	r1, [r4, #20]
 801136c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011370:	4a18      	ldr	r2, [pc, #96]	; (80113d4 <xTaskPriorityInherit+0x90>)
 8011372:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011376:	4299      	cmp	r1, r3
 8011378:	d005      	beq.n	8011386 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801137a:	4b15      	ldr	r3, [pc, #84]	; (80113d0 <xTaskPriorityInherit+0x8c>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011380:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8011382:	2001      	movs	r0, #1
	}
 8011384:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011386:	1d25      	adds	r5, r4, #4
 8011388:	4628      	mov	r0, r5
 801138a:	f7fe fbc3 	bl	800fb14 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801138e:	4b10      	ldr	r3, [pc, #64]	; (80113d0 <xTaskPriorityInherit+0x8c>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011394:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011396:	4b10      	ldr	r3, [pc, #64]	; (80113d8 <xTaskPriorityInherit+0x94>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4298      	cmp	r0, r3
 801139c:	d901      	bls.n	80113a2 <xTaskPriorityInherit+0x5e>
 801139e:	4b0e      	ldr	r3, [pc, #56]	; (80113d8 <xTaskPriorityInherit+0x94>)
 80113a0:	6018      	str	r0, [r3, #0]
 80113a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80113a6:	4629      	mov	r1, r5
 80113a8:	4b0a      	ldr	r3, [pc, #40]	; (80113d4 <xTaskPriorityInherit+0x90>)
 80113aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80113ae:	f7fe fb8d 	bl	800facc <vListInsertEnd>
				xReturn = pdTRUE;
 80113b2:	2001      	movs	r0, #1
 80113b4:	e7e6      	b.n	8011384 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80113b6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80113b8:	4b05      	ldr	r3, [pc, #20]	; (80113d0 <xTaskPriorityInherit+0x8c>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113be:	429a      	cmp	r2, r3
 80113c0:	d303      	bcc.n	80113ca <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 80113c2:	2000      	movs	r0, #0
 80113c4:	e7de      	b.n	8011384 <xTaskPriorityInherit+0x40>
 80113c6:	2000      	movs	r0, #0
	}
 80113c8:	4770      	bx	lr
					xReturn = pdTRUE;
 80113ca:	2001      	movs	r0, #1
		return xReturn;
 80113cc:	e7da      	b.n	8011384 <xTaskPriorityInherit+0x40>
 80113ce:	bf00      	nop
 80113d0:	2400f838 	.word	0x2400f838
 80113d4:	2400f844 	.word	0x2400f844
 80113d8:	2400fcb4 	.word	0x2400fcb4

080113dc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80113dc:	2800      	cmp	r0, #0
 80113de:	d03b      	beq.n	8011458 <xTaskPriorityDisinherit+0x7c>
	{
 80113e0:	b538      	push	{r3, r4, r5, lr}
 80113e2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80113e4:	4b1e      	ldr	r3, [pc, #120]	; (8011460 <xTaskPriorityDisinherit+0x84>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4283      	cmp	r3, r0
 80113ea:	d008      	beq.n	80113fe <xTaskPriorityDisinherit+0x22>
 80113ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f0:	f383 8811 	msr	BASEPRI, r3
 80113f4:	f3bf 8f6f 	isb	sy
 80113f8:	f3bf 8f4f 	dsb	sy
 80113fc:	e7fe      	b.n	80113fc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80113fe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011400:	b943      	cbnz	r3, 8011414 <xTaskPriorityDisinherit+0x38>
 8011402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011406:	f383 8811 	msr	BASEPRI, r3
 801140a:	f3bf 8f6f 	isb	sy
 801140e:	f3bf 8f4f 	dsb	sy
 8011412:	e7fe      	b.n	8011412 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8011414:	3b01      	subs	r3, #1
 8011416:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011418:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801141a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801141c:	4291      	cmp	r1, r2
 801141e:	d01d      	beq.n	801145c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011420:	b10b      	cbz	r3, 8011426 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8011422:	2000      	movs	r0, #0
	}
 8011424:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011426:	1d05      	adds	r5, r0, #4
 8011428:	4628      	mov	r0, r5
 801142a:	f7fe fb73 	bl	800fb14 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801142e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011430:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011432:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8011436:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8011438:	4b0a      	ldr	r3, [pc, #40]	; (8011464 <xTaskPriorityDisinherit+0x88>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	4298      	cmp	r0, r3
 801143e:	d901      	bls.n	8011444 <xTaskPriorityDisinherit+0x68>
 8011440:	4b08      	ldr	r3, [pc, #32]	; (8011464 <xTaskPriorityDisinherit+0x88>)
 8011442:	6018      	str	r0, [r3, #0]
 8011444:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011448:	4629      	mov	r1, r5
 801144a:	4b07      	ldr	r3, [pc, #28]	; (8011468 <xTaskPriorityDisinherit+0x8c>)
 801144c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011450:	f7fe fb3c 	bl	800facc <vListInsertEnd>
					xReturn = pdTRUE;
 8011454:	2001      	movs	r0, #1
 8011456:	e7e5      	b.n	8011424 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8011458:	2000      	movs	r0, #0
	}
 801145a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 801145c:	2000      	movs	r0, #0
 801145e:	e7e1      	b.n	8011424 <xTaskPriorityDisinherit+0x48>
 8011460:	2400f838 	.word	0x2400f838
 8011464:	2400fcb4 	.word	0x2400fcb4
 8011468:	2400f844 	.word	0x2400f844

0801146c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 801146c:	2800      	cmp	r0, #0
 801146e:	d046      	beq.n	80114fe <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8011470:	b538      	push	{r3, r4, r5, lr}
 8011472:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8011474:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011476:	b943      	cbnz	r3, 801148a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8011478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147c:	f383 8811 	msr	BASEPRI, r3
 8011480:	f3bf 8f6f 	isb	sy
 8011484:	f3bf 8f4f 	dsb	sy
 8011488:	e7fe      	b.n	8011488 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801148a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801148c:	428a      	cmp	r2, r1
 801148e:	d200      	bcs.n	8011492 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011490:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011492:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011494:	4291      	cmp	r1, r2
 8011496:	d001      	beq.n	801149c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011498:	2b01      	cmp	r3, #1
 801149a:	d000      	beq.n	801149e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 801149c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 801149e:	4b18      	ldr	r3, [pc, #96]	; (8011500 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	42a3      	cmp	r3, r4
 80114a4:	d022      	beq.n	80114ec <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80114a6:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80114a8:	69a3      	ldr	r3, [r4, #24]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	db02      	blt.n	80114b4 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114ae:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80114b2:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80114b4:	6962      	ldr	r2, [r4, #20]
 80114b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80114ba:	4b12      	ldr	r3, [pc, #72]	; (8011504 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80114bc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80114c0:	428a      	cmp	r2, r1
 80114c2:	d1eb      	bne.n	801149c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114c4:	1d25      	adds	r5, r4, #4
 80114c6:	4628      	mov	r0, r5
 80114c8:	f7fe fb24 	bl	800fb14 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80114cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80114ce:	4b0e      	ldr	r3, [pc, #56]	; (8011508 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	4298      	cmp	r0, r3
 80114d4:	d901      	bls.n	80114da <vTaskPriorityDisinheritAfterTimeout+0x6e>
 80114d6:	4b0c      	ldr	r3, [pc, #48]	; (8011508 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80114d8:	6018      	str	r0, [r3, #0]
 80114da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80114de:	4629      	mov	r1, r5
 80114e0:	4b08      	ldr	r3, [pc, #32]	; (8011504 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80114e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80114e6:	f7fe faf1 	bl	800facc <vListInsertEnd>
	}
 80114ea:	e7d7      	b.n	801149c <vTaskPriorityDisinheritAfterTimeout+0x30>
 80114ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f0:	f383 8811 	msr	BASEPRI, r3
 80114f4:	f3bf 8f6f 	isb	sy
 80114f8:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80114fc:	e7fe      	b.n	80114fc <vTaskPriorityDisinheritAfterTimeout+0x90>
 80114fe:	4770      	bx	lr
 8011500:	2400f838 	.word	0x2400f838
 8011504:	2400f844 	.word	0x2400f844
 8011508:	2400fcb4 	.word	0x2400fcb4

0801150c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801150c:	4b05      	ldr	r3, [pc, #20]	; (8011524 <pvTaskIncrementMutexHeldCount+0x18>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	b123      	cbz	r3, 801151c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8011512:	4b04      	ldr	r3, [pc, #16]	; (8011524 <pvTaskIncrementMutexHeldCount+0x18>)
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8011518:	3301      	adds	r3, #1
 801151a:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 801151c:	4b01      	ldr	r3, [pc, #4]	; (8011524 <pvTaskIncrementMutexHeldCount+0x18>)
 801151e:	6818      	ldr	r0, [r3, #0]
	}
 8011520:	4770      	bx	lr
 8011522:	bf00      	nop
 8011524:	2400f838 	.word	0x2400f838

08011528 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011528:	4b06      	ldr	r3, [pc, #24]	; (8011544 <prvGetNextExpireTime+0x1c>)
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	6813      	ldr	r3, [r2, #0]
 801152e:	b92b      	cbnz	r3, 801153c <prvGetNextExpireTime+0x14>
 8011530:	2301      	movs	r3, #1
 8011532:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011534:	b923      	cbnz	r3, 8011540 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011536:	68d3      	ldr	r3, [r2, #12]
 8011538:	6818      	ldr	r0, [r3, #0]
 801153a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801153c:	2300      	movs	r3, #0
 801153e:	e7f8      	b.n	8011532 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011540:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8011542:	4770      	bx	lr
 8011544:	2400fd38 	.word	0x2400fd38

08011548 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011548:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801154a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801154c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801154e:	4291      	cmp	r1, r2
 8011550:	d80c      	bhi.n	801156c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011552:	1ad2      	subs	r2, r2, r3
 8011554:	6983      	ldr	r3, [r0, #24]
 8011556:	429a      	cmp	r2, r3
 8011558:	d301      	bcc.n	801155e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801155a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 801155c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801155e:	1d01      	adds	r1, r0, #4
 8011560:	4b0b      	ldr	r3, [pc, #44]	; (8011590 <prvInsertTimerInActiveList+0x48>)
 8011562:	6818      	ldr	r0, [r3, #0]
 8011564:	f7fe fabd 	bl	800fae2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8011568:	2000      	movs	r0, #0
 801156a:	e7f7      	b.n	801155c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801156c:	429a      	cmp	r2, r3
 801156e:	bf2c      	ite	cs
 8011570:	2200      	movcs	r2, #0
 8011572:	2201      	movcc	r2, #1
 8011574:	4299      	cmp	r1, r3
 8011576:	bf38      	it	cc
 8011578:	2200      	movcc	r2, #0
 801157a:	b10a      	cbz	r2, 8011580 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 801157c:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801157e:	e7ed      	b.n	801155c <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011580:	1d01      	adds	r1, r0, #4
 8011582:	4b04      	ldr	r3, [pc, #16]	; (8011594 <prvInsertTimerInActiveList+0x4c>)
 8011584:	6818      	ldr	r0, [r3, #0]
 8011586:	f7fe faac 	bl	800fae2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801158a:	2000      	movs	r0, #0
 801158c:	e7e6      	b.n	801155c <prvInsertTimerInActiveList+0x14>
 801158e:	bf00      	nop
 8011590:	2400fd3c 	.word	0x2400fd3c
 8011594:	2400fd38 	.word	0x2400fd38

08011598 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011598:	b530      	push	{r4, r5, lr}
 801159a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801159c:	f7fe fb3a 	bl	800fc14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80115a0:	4b11      	ldr	r3, [pc, #68]	; (80115e8 <prvCheckForValidListAndQueue+0x50>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	b11b      	cbz	r3, 80115ae <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80115a6:	f7fe fb57 	bl	800fc58 <vPortExitCritical>
}
 80115aa:	b003      	add	sp, #12
 80115ac:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80115ae:	4d0f      	ldr	r5, [pc, #60]	; (80115ec <prvCheckForValidListAndQueue+0x54>)
 80115b0:	4628      	mov	r0, r5
 80115b2:	f7fe fa7d 	bl	800fab0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80115b6:	4c0e      	ldr	r4, [pc, #56]	; (80115f0 <prvCheckForValidListAndQueue+0x58>)
 80115b8:	4620      	mov	r0, r4
 80115ba:	f7fe fa79 	bl	800fab0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80115be:	4b0d      	ldr	r3, [pc, #52]	; (80115f4 <prvCheckForValidListAndQueue+0x5c>)
 80115c0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80115c2:	4b0d      	ldr	r3, [pc, #52]	; (80115f8 <prvCheckForValidListAndQueue+0x60>)
 80115c4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80115c6:	2300      	movs	r3, #0
 80115c8:	9300      	str	r3, [sp, #0]
 80115ca:	4b0c      	ldr	r3, [pc, #48]	; (80115fc <prvCheckForValidListAndQueue+0x64>)
 80115cc:	4a0c      	ldr	r2, [pc, #48]	; (8011600 <prvCheckForValidListAndQueue+0x68>)
 80115ce:	2110      	movs	r1, #16
 80115d0:	200a      	movs	r0, #10
 80115d2:	f7fe fd6e 	bl	80100b2 <xQueueGenericCreateStatic>
 80115d6:	4b04      	ldr	r3, [pc, #16]	; (80115e8 <prvCheckForValidListAndQueue+0x50>)
 80115d8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80115da:	2800      	cmp	r0, #0
 80115dc:	d0e3      	beq.n	80115a6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80115de:	4909      	ldr	r1, [pc, #36]	; (8011604 <prvCheckForValidListAndQueue+0x6c>)
 80115e0:	f7ff f998 	bl	8010914 <vQueueAddToRegistry>
 80115e4:	e7df      	b.n	80115a6 <prvCheckForValidListAndQueue+0xe>
 80115e6:	bf00      	nop
 80115e8:	2400fe5c 	.word	0x2400fe5c
 80115ec:	2400fde0 	.word	0x2400fde0
 80115f0:	2400fdf4 	.word	0x2400fdf4
 80115f4:	2400fd38 	.word	0x2400fd38
 80115f8:	2400fd3c 	.word	0x2400fd3c
 80115fc:	2400fe0c 	.word	0x2400fe0c
 8011600:	2400fd40 	.word	0x2400fd40
 8011604:	080268c0 	.word	0x080268c0

08011608 <xTimerCreateTimerTask>:
{
 8011608:	b510      	push	{r4, lr}
 801160a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801160c:	f7ff ffc4 	bl	8011598 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8011610:	4b12      	ldr	r3, [pc, #72]	; (801165c <xTimerCreateTimerTask+0x54>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	b1cb      	cbz	r3, 801164a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011616:	2400      	movs	r4, #0
 8011618:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801161a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801161c:	aa07      	add	r2, sp, #28
 801161e:	a906      	add	r1, sp, #24
 8011620:	a805      	add	r0, sp, #20
 8011622:	f7fe f919 	bl	800f858 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011626:	9b05      	ldr	r3, [sp, #20]
 8011628:	9302      	str	r3, [sp, #8]
 801162a:	9b06      	ldr	r3, [sp, #24]
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	2302      	movs	r3, #2
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	4623      	mov	r3, r4
 8011634:	9a07      	ldr	r2, [sp, #28]
 8011636:	490a      	ldr	r1, [pc, #40]	; (8011660 <xTimerCreateTimerTask+0x58>)
 8011638:	480a      	ldr	r0, [pc, #40]	; (8011664 <xTimerCreateTimerTask+0x5c>)
 801163a:	f7ff fb79 	bl	8010d30 <xTaskCreateStatic>
 801163e:	4b0a      	ldr	r3, [pc, #40]	; (8011668 <xTimerCreateTimerTask+0x60>)
 8011640:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8011642:	b110      	cbz	r0, 801164a <xTimerCreateTimerTask+0x42>
}
 8011644:	2001      	movs	r0, #1
 8011646:	b008      	add	sp, #32
 8011648:	bd10      	pop	{r4, pc}
 801164a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164e:	f383 8811 	msr	BASEPRI, r3
 8011652:	f3bf 8f6f 	isb	sy
 8011656:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801165a:	e7fe      	b.n	801165a <xTimerCreateTimerTask+0x52>
 801165c:	2400fe5c 	.word	0x2400fe5c
 8011660:	080268c8 	.word	0x080268c8
 8011664:	08011971 	.word	0x08011971
 8011668:	2400fe60 	.word	0x2400fe60

0801166c <xTimerGenericCommand>:
	configASSERT( xTimer );
 801166c:	b1b8      	cbz	r0, 801169e <xTimerGenericCommand+0x32>
 801166e:	469c      	mov	ip, r3
 8011670:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8011672:	4818      	ldr	r0, [pc, #96]	; (80116d4 <xTimerGenericCommand+0x68>)
 8011674:	6800      	ldr	r0, [r0, #0]
 8011676:	b358      	cbz	r0, 80116d0 <xTimerGenericCommand+0x64>
{
 8011678:	b500      	push	{lr}
 801167a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801167c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801167e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011680:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011682:	2905      	cmp	r1, #5
 8011684:	dc1c      	bgt.n	80116c0 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011686:	f7ff fe4d 	bl	8011324 <xTaskGetSchedulerState>
 801168a:	2802      	cmp	r0, #2
 801168c:	d010      	beq.n	80116b0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801168e:	2300      	movs	r3, #0
 8011690:	461a      	mov	r2, r3
 8011692:	4669      	mov	r1, sp
 8011694:	480f      	ldr	r0, [pc, #60]	; (80116d4 <xTimerGenericCommand+0x68>)
 8011696:	6800      	ldr	r0, [r0, #0]
 8011698:	f7fe fdc3 	bl	8010222 <xQueueGenericSend>
 801169c:	e015      	b.n	80116ca <xTimerGenericCommand+0x5e>
 801169e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a2:	f383 8811 	msr	BASEPRI, r3
 80116a6:	f3bf 8f6f 	isb	sy
 80116aa:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80116ae:	e7fe      	b.n	80116ae <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80116b0:	2300      	movs	r3, #0
 80116b2:	9a06      	ldr	r2, [sp, #24]
 80116b4:	4669      	mov	r1, sp
 80116b6:	4807      	ldr	r0, [pc, #28]	; (80116d4 <xTimerGenericCommand+0x68>)
 80116b8:	6800      	ldr	r0, [r0, #0]
 80116ba:	f7fe fdb2 	bl	8010222 <xQueueGenericSend>
 80116be:	e004      	b.n	80116ca <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80116c0:	2300      	movs	r3, #0
 80116c2:	4662      	mov	r2, ip
 80116c4:	4669      	mov	r1, sp
 80116c6:	f7fe fe70 	bl	80103aa <xQueueGenericSendFromISR>
}
 80116ca:	b005      	add	sp, #20
 80116cc:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 80116d0:	2000      	movs	r0, #0
}
 80116d2:	4770      	bx	lr
 80116d4:	2400fe5c 	.word	0x2400fe5c

080116d8 <prvSwitchTimerLists>:
{
 80116d8:	b570      	push	{r4, r5, r6, lr}
 80116da:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80116dc:	4b1b      	ldr	r3, [pc, #108]	; (801174c <prvSwitchTimerLists+0x74>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	b362      	cbz	r2, 801173e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116e8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116ea:	1d25      	adds	r5, r4, #4
 80116ec:	4628      	mov	r0, r5
 80116ee:	f7fe fa11 	bl	800fb14 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80116f2:	6a23      	ldr	r3, [r4, #32]
 80116f4:	4620      	mov	r0, r4
 80116f6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80116f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80116fc:	f013 0f04 	tst.w	r3, #4
 8011700:	d0ec      	beq.n	80116dc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011702:	69a3      	ldr	r3, [r4, #24]
 8011704:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8011706:	429e      	cmp	r6, r3
 8011708:	d207      	bcs.n	801171a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801170a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801170c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801170e:	4629      	mov	r1, r5
 8011710:	4b0e      	ldr	r3, [pc, #56]	; (801174c <prvSwitchTimerLists+0x74>)
 8011712:	6818      	ldr	r0, [r3, #0]
 8011714:	f7fe f9e5 	bl	800fae2 <vListInsert>
 8011718:	e7e0      	b.n	80116dc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801171a:	2100      	movs	r1, #0
 801171c:	9100      	str	r1, [sp, #0]
 801171e:	460b      	mov	r3, r1
 8011720:	4632      	mov	r2, r6
 8011722:	4620      	mov	r0, r4
 8011724:	f7ff ffa2 	bl	801166c <xTimerGenericCommand>
				configASSERT( xResult );
 8011728:	2800      	cmp	r0, #0
 801172a:	d1d7      	bne.n	80116dc <prvSwitchTimerLists+0x4>
 801172c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011730:	f383 8811 	msr	BASEPRI, r3
 8011734:	f3bf 8f6f 	isb	sy
 8011738:	f3bf 8f4f 	dsb	sy
 801173c:	e7fe      	b.n	801173c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801173e:	4a04      	ldr	r2, [pc, #16]	; (8011750 <prvSwitchTimerLists+0x78>)
 8011740:	6810      	ldr	r0, [r2, #0]
 8011742:	4902      	ldr	r1, [pc, #8]	; (801174c <prvSwitchTimerLists+0x74>)
 8011744:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8011746:	6013      	str	r3, [r2, #0]
}
 8011748:	b002      	add	sp, #8
 801174a:	bd70      	pop	{r4, r5, r6, pc}
 801174c:	2400fd38 	.word	0x2400fd38
 8011750:	2400fd3c 	.word	0x2400fd3c

08011754 <prvSampleTimeNow>:
{
 8011754:	b538      	push	{r3, r4, r5, lr}
 8011756:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8011758:	f7ff fbb8 	bl	8010ecc <xTaskGetTickCount>
 801175c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 801175e:	4b07      	ldr	r3, [pc, #28]	; (801177c <prvSampleTimeNow+0x28>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	4283      	cmp	r3, r0
 8011764:	d805      	bhi.n	8011772 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8011766:	2300      	movs	r3, #0
 8011768:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801176a:	4b04      	ldr	r3, [pc, #16]	; (801177c <prvSampleTimeNow+0x28>)
 801176c:	601c      	str	r4, [r3, #0]
}
 801176e:	4620      	mov	r0, r4
 8011770:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8011772:	f7ff ffb1 	bl	80116d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011776:	2301      	movs	r3, #1
 8011778:	602b      	str	r3, [r5, #0]
 801177a:	e7f6      	b.n	801176a <prvSampleTimeNow+0x16>
 801177c:	2400fe08 	.word	0x2400fe08

08011780 <prvProcessExpiredTimer>:
{
 8011780:	b570      	push	{r4, r5, r6, lr}
 8011782:	b082      	sub	sp, #8
 8011784:	4606      	mov	r6, r0
 8011786:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011788:	4917      	ldr	r1, [pc, #92]	; (80117e8 <prvProcessExpiredTimer+0x68>)
 801178a:	6809      	ldr	r1, [r1, #0]
 801178c:	68c9      	ldr	r1, [r1, #12]
 801178e:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011790:	1d20      	adds	r0, r4, #4
 8011792:	f7fe f9bf 	bl	800fb14 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011796:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 801179a:	f01c 0f04 	tst.w	ip, #4
 801179e:	d108      	bne.n	80117b2 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80117a0:	f02c 0c01 	bic.w	ip, ip, #1
 80117a4:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80117a8:	6a23      	ldr	r3, [r4, #32]
 80117aa:	4620      	mov	r0, r4
 80117ac:	4798      	blx	r3
}
 80117ae:	b002      	add	sp, #8
 80117b0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80117b2:	69a1      	ldr	r1, [r4, #24]
 80117b4:	4633      	mov	r3, r6
 80117b6:	462a      	mov	r2, r5
 80117b8:	4431      	add	r1, r6
 80117ba:	4620      	mov	r0, r4
 80117bc:	f7ff fec4 	bl	8011548 <prvInsertTimerInActiveList>
 80117c0:	2800      	cmp	r0, #0
 80117c2:	d0f1      	beq.n	80117a8 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80117c4:	2100      	movs	r1, #0
 80117c6:	9100      	str	r1, [sp, #0]
 80117c8:	460b      	mov	r3, r1
 80117ca:	4632      	mov	r2, r6
 80117cc:	4620      	mov	r0, r4
 80117ce:	f7ff ff4d 	bl	801166c <xTimerGenericCommand>
			configASSERT( xResult );
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d1e8      	bne.n	80117a8 <prvProcessExpiredTimer+0x28>
 80117d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117da:	f383 8811 	msr	BASEPRI, r3
 80117de:	f3bf 8f6f 	isb	sy
 80117e2:	f3bf 8f4f 	dsb	sy
 80117e6:	e7fe      	b.n	80117e6 <prvProcessExpiredTimer+0x66>
 80117e8:	2400fd38 	.word	0x2400fd38

080117ec <prvProcessTimerOrBlockTask>:
{
 80117ec:	b570      	push	{r4, r5, r6, lr}
 80117ee:	b082      	sub	sp, #8
 80117f0:	4606      	mov	r6, r0
 80117f2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80117f4:	f7ff fb62 	bl	8010ebc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80117f8:	a801      	add	r0, sp, #4
 80117fa:	f7ff ffab 	bl	8011754 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80117fe:	9b01      	ldr	r3, [sp, #4]
 8011800:	bb3b      	cbnz	r3, 8011852 <prvProcessTimerOrBlockTask+0x66>
 8011802:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011804:	42b0      	cmp	r0, r6
 8011806:	bf28      	it	cs
 8011808:	2c00      	cmpcs	r4, #0
 801180a:	d019      	beq.n	8011840 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 801180c:	b124      	cbz	r4, 8011818 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801180e:	4a13      	ldr	r2, [pc, #76]	; (801185c <prvProcessTimerOrBlockTask+0x70>)
 8011810:	6812      	ldr	r2, [r2, #0]
 8011812:	6812      	ldr	r2, [r2, #0]
 8011814:	b9da      	cbnz	r2, 801184e <prvProcessTimerOrBlockTask+0x62>
 8011816:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011818:	4622      	mov	r2, r4
 801181a:	1b71      	subs	r1, r6, r5
 801181c:	4b10      	ldr	r3, [pc, #64]	; (8011860 <prvProcessTimerOrBlockTask+0x74>)
 801181e:	6818      	ldr	r0, [r3, #0]
 8011820:	f7ff f8b8 	bl	8010994 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011824:	f7ff fbe4 	bl	8010ff0 <xTaskResumeAll>
 8011828:	b9a8      	cbnz	r0, 8011856 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 801182a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801182e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011832:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8011836:	f3bf 8f4f 	dsb	sy
 801183a:	f3bf 8f6f 	isb	sy
 801183e:	e00a      	b.n	8011856 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 8011840:	f7ff fbd6 	bl	8010ff0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011844:	4629      	mov	r1, r5
 8011846:	4630      	mov	r0, r6
 8011848:	f7ff ff9a 	bl	8011780 <prvProcessExpiredTimer>
 801184c:	e003      	b.n	8011856 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801184e:	461c      	mov	r4, r3
 8011850:	e7e2      	b.n	8011818 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 8011852:	f7ff fbcd 	bl	8010ff0 <xTaskResumeAll>
}
 8011856:	b002      	add	sp, #8
 8011858:	bd70      	pop	{r4, r5, r6, pc}
 801185a:	bf00      	nop
 801185c:	2400fd3c 	.word	0x2400fd3c
 8011860:	2400fe5c 	.word	0x2400fe5c

08011864 <prvProcessReceivedCommands>:
{
 8011864:	b510      	push	{r4, lr}
 8011866:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011868:	e002      	b.n	8011870 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801186a:	9b04      	ldr	r3, [sp, #16]
 801186c:	2b00      	cmp	r3, #0
 801186e:	da0f      	bge.n	8011890 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011870:	2200      	movs	r2, #0
 8011872:	a904      	add	r1, sp, #16
 8011874:	4b3d      	ldr	r3, [pc, #244]	; (801196c <prvProcessReceivedCommands+0x108>)
 8011876:	6818      	ldr	r0, [r3, #0]
 8011878:	f7fe fe57 	bl	801052a <xQueueReceive>
 801187c:	2800      	cmp	r0, #0
 801187e:	d073      	beq.n	8011968 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011880:	9b04      	ldr	r3, [sp, #16]
 8011882:	2b00      	cmp	r3, #0
 8011884:	daf1      	bge.n	801186a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011886:	9907      	ldr	r1, [sp, #28]
 8011888:	9806      	ldr	r0, [sp, #24]
 801188a:	9b05      	ldr	r3, [sp, #20]
 801188c:	4798      	blx	r3
 801188e:	e7ec      	b.n	801186a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011890:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011892:	6963      	ldr	r3, [r4, #20]
 8011894:	b113      	cbz	r3, 801189c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011896:	1d20      	adds	r0, r4, #4
 8011898:	f7fe f93c 	bl	800fb14 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801189c:	a803      	add	r0, sp, #12
 801189e:	f7ff ff59 	bl	8011754 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80118a2:	9b04      	ldr	r3, [sp, #16]
 80118a4:	2b09      	cmp	r3, #9
 80118a6:	d8e3      	bhi.n	8011870 <prvProcessReceivedCommands+0xc>
 80118a8:	e8df f003 	tbb	[pc, r3]
 80118ac:	30050505 	.word	0x30050505
 80118b0:	05055037 	.word	0x05055037
 80118b4:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80118b6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80118ba:	f043 0301 	orr.w	r3, r3, #1
 80118be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80118c2:	9b05      	ldr	r3, [sp, #20]
 80118c4:	69a1      	ldr	r1, [r4, #24]
 80118c6:	4602      	mov	r2, r0
 80118c8:	4419      	add	r1, r3
 80118ca:	4620      	mov	r0, r4
 80118cc:	f7ff fe3c 	bl	8011548 <prvInsertTimerInActiveList>
 80118d0:	2800      	cmp	r0, #0
 80118d2:	d0cd      	beq.n	8011870 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80118d4:	6a23      	ldr	r3, [r4, #32]
 80118d6:	4620      	mov	r0, r4
 80118d8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80118da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80118de:	f013 0f04 	tst.w	r3, #4
 80118e2:	d0c5      	beq.n	8011870 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80118e4:	69a2      	ldr	r2, [r4, #24]
 80118e6:	2100      	movs	r1, #0
 80118e8:	9100      	str	r1, [sp, #0]
 80118ea:	460b      	mov	r3, r1
 80118ec:	9805      	ldr	r0, [sp, #20]
 80118ee:	4402      	add	r2, r0
 80118f0:	4620      	mov	r0, r4
 80118f2:	f7ff febb 	bl	801166c <xTimerGenericCommand>
							configASSERT( xResult );
 80118f6:	2800      	cmp	r0, #0
 80118f8:	d1ba      	bne.n	8011870 <prvProcessReceivedCommands+0xc>
 80118fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118fe:	f383 8811 	msr	BASEPRI, r3
 8011902:	f3bf 8f6f 	isb	sy
 8011906:	f3bf 8f4f 	dsb	sy
 801190a:	e7fe      	b.n	801190a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801190c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011910:	f023 0301 	bic.w	r3, r3, #1
 8011914:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8011918:	e7aa      	b.n	8011870 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801191a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801191e:	f043 0301 	orr.w	r3, r3, #1
 8011922:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011926:	9905      	ldr	r1, [sp, #20]
 8011928:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801192a:	b131      	cbz	r1, 801193a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801192c:	4603      	mov	r3, r0
 801192e:	4602      	mov	r2, r0
 8011930:	4401      	add	r1, r0
 8011932:	4620      	mov	r0, r4
 8011934:	f7ff fe08 	bl	8011548 <prvInsertTimerInActiveList>
					break;
 8011938:	e79a      	b.n	8011870 <prvProcessReceivedCommands+0xc>
 801193a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801193e:	f383 8811 	msr	BASEPRI, r3
 8011942:	f3bf 8f6f 	isb	sy
 8011946:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801194a:	e7fe      	b.n	801194a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801194c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011950:	f013 0f02 	tst.w	r3, #2
 8011954:	d004      	beq.n	8011960 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011956:	f023 0301 	bic.w	r3, r3, #1
 801195a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 801195e:	e787      	b.n	8011870 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8011960:	4620      	mov	r0, r4
 8011962:	f7fe f867 	bl	800fa34 <vPortFree>
 8011966:	e783      	b.n	8011870 <prvProcessReceivedCommands+0xc>
}
 8011968:	b008      	add	sp, #32
 801196a:	bd10      	pop	{r4, pc}
 801196c:	2400fe5c 	.word	0x2400fe5c

08011970 <prvTimerTask>:
{
 8011970:	b500      	push	{lr}
 8011972:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011974:	a801      	add	r0, sp, #4
 8011976:	f7ff fdd7 	bl	8011528 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801197a:	9901      	ldr	r1, [sp, #4]
 801197c:	f7ff ff36 	bl	80117ec <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8011980:	f7ff ff70 	bl	8011864 <prvProcessReceivedCommands>
	for( ;; )
 8011984:	e7f6      	b.n	8011974 <prvTimerTask+0x4>

08011986 <net_aton>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
int32_t net_aton(const char_t *ptr, net_ip_addr_t *addr)
{
 8011986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011988:	b085      	sub	sp, #20
 801198a:	4684      	mov	ip, r0
 801198c:	460e      	mov	r6, r1
  uint32_t parts[4];
  uint32_t *pp = parts;
  int32_t ret = 1;
  int32_t done;

  c0 = *cp;
 801198e:	7803      	ldrb	r3, [r0, #0]
  done = 0;
 8011990:	2000      	movs	r0, #0
  int32_t ret = 1;
 8011992:	2501      	movs	r5, #1
  uint32_t *pp = parts;
 8011994:	466c      	mov	r4, sp
  uint32_t val = 0;
 8011996:	4601      	mov	r1, r0
 8011998:	e03e      	b.n	8011a18 <net_aton+0x92>
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
        {
          ret = 0;
 801199a:	4605      	mov	r5, r0
          done = 1;
 801199c:	2001      	movs	r0, #1
 801199e:	e03b      	b.n	8011a18 <net_aton+0x92>
      ret = 0;
 80119a0:	4605      	mov	r5, r0
      done = 1;
 80119a2:	2001      	movs	r0, #1
 80119a4:	e038      	b.n	8011a18 <net_aton+0x92>
        ++cp;
 80119a6:	f10c 0201 	add.w	r2, ip, #1
        c0 = (char_t) * cp;
 80119aa:	f89c 3001 	ldrb.w	r3, [ip, #1]
        if ((c0 == (char_t) 'x') || (c0 == (char_t) 'X'))
 80119ae:	2b58      	cmp	r3, #88	; 0x58
 80119b0:	bf18      	it	ne
 80119b2:	2b78      	cmpne	r3, #120	; 0x78
 80119b4:	d106      	bne.n	80119c4 <net_aton+0x3e>
          c0 = (char_t) * cp;
 80119b6:	f89c 3002 	ldrb.w	r3, [ip, #2]
          ++cp;
 80119ba:	f10c 0c02 	add.w	ip, ip, #2
          base = 16;
 80119be:	f04f 0e10 	mov.w	lr, #16
 80119c2:	e033      	b.n	8011a2c <net_aton+0xa6>
        ++cp;
 80119c4:	4694      	mov	ip, r2
          base = 8;
 80119c6:	f04f 0e08 	mov.w	lr, #8
 80119ca:	e02f      	b.n	8011a2c <net_aton+0xa6>
          val = (val * base) + (uint32_t)c0 - (uint32_t) '0';
 80119cc:	fb0e 3101 	mla	r1, lr, r1, r3
 80119d0:	3930      	subs	r1, #48	; 0x30
          c0 = (char_t) * cp;
 80119d2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
        if (NET_ISDIGIT(c0))
 80119d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80119da:	b2d2      	uxtb	r2, r2
 80119dc:	2a09      	cmp	r2, #9
 80119de:	d9f5      	bls.n	80119cc <net_aton+0x46>
        else if ((base == 16U) && NET_ISXDIGIT(c0))
 80119e0:	f1be 0f10 	cmp.w	lr, #16
 80119e4:	d115      	bne.n	8011a12 <net_aton+0x8c>
 80119e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80119ea:	b2d2      	uxtb	r2, r2
 80119ec:	2a05      	cmp	r2, #5
 80119ee:	d904      	bls.n	80119fa <net_aton+0x74>
 80119f0:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 80119f4:	b2ff      	uxtb	r7, r7
 80119f6:	2f05      	cmp	r7, #5
 80119f8:	d80b      	bhi.n	8011a12 <net_aton+0x8c>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 80119fa:	0109      	lsls	r1, r1, #4
 80119fc:	2a19      	cmp	r2, #25
 80119fe:	d806      	bhi.n	8011a0e <net_aton+0x88>
 8011a00:	2261      	movs	r2, #97	; 0x61
 8011a02:	1a9b      	subs	r3, r3, r2
 8011a04:	330a      	adds	r3, #10
 8011a06:	4319      	orrs	r1, r3
          c0 = (char_t) * cp;
 8011a08:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8011a0c:	e7e3      	b.n	80119d6 <net_aton+0x50>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 8011a0e:	2241      	movs	r2, #65	; 0x41
 8011a10:	e7f7      	b.n	8011a02 <net_aton+0x7c>
      if (c0 == '.')
 8011a12:	2b2e      	cmp	r3, #46	; 0x2e
 8011a14:	d00c      	beq.n	8011a30 <net_aton+0xaa>
          c0 = (char_t) * cp;
        }
      }
      else
      {
        done = 1;
 8011a16:	2001      	movs	r0, #1
    if (done == 1)
 8011a18:	b9a0      	cbnz	r0, 8011a44 <net_aton+0xbe>
    if (!NET_ISDIGIT(c0))
 8011a1a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011a1e:	b2d2      	uxtb	r2, r2
 8011a20:	2a09      	cmp	r2, #9
 8011a22:	d8bd      	bhi.n	80119a0 <net_aton+0x1a>
      if (c0 == '0')
 8011a24:	2b30      	cmp	r3, #48	; 0x30
 8011a26:	d0be      	beq.n	80119a6 <net_aton+0x20>
      base = 10;
 8011a28:	f04f 0e0a 	mov.w	lr, #10
          base = 8;
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	e7d2      	b.n	80119d6 <net_aton+0x50>
        if (pp >= (parts + 3))
 8011a30:	aa03      	add	r2, sp, #12
 8011a32:	4294      	cmp	r4, r2
 8011a34:	d2b1      	bcs.n	801199a <net_aton+0x14>
          *pp = val;
 8011a36:	f844 1b04 	str.w	r1, [r4], #4
          c0 = (char_t) * cp;
 8011a3a:	f89c 3001 	ldrb.w	r3, [ip, #1]
          ++cp;
 8011a3e:	f10c 0c01 	add.w	ip, ip, #1
 8011a42:	e7e9      	b.n	8011a18 <net_aton+0x92>
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (char_t)'\0') && (NET_ISSPACE((c0)) == false))
 8011a44:	b19b      	cbz	r3, 8011a6e <net_aton+0xe8>
 8011a46:	2b0c      	cmp	r3, #12
 8011a48:	bf18      	it	ne
 8011a4a:	2b20      	cmpne	r3, #32
 8011a4c:	d00f      	beq.n	8011a6e <net_aton+0xe8>
 8011a4e:	2b0d      	cmp	r3, #13
 8011a50:	bf14      	ite	ne
 8011a52:	2200      	movne	r2, #0
 8011a54:	2201      	moveq	r2, #1
 8011a56:	2b0a      	cmp	r3, #10
 8011a58:	d009      	beq.n	8011a6e <net_aton+0xe8>
 8011a5a:	b942      	cbnz	r2, 8011a6e <net_aton+0xe8>
 8011a5c:	2b0b      	cmp	r3, #11
 8011a5e:	bf14      	ite	ne
 8011a60:	2200      	movne	r2, #0
 8011a62:	2201      	moveq	r2, #1
 8011a64:	2b09      	cmp	r3, #9
 8011a66:	d002      	beq.n	8011a6e <net_aton+0xe8>
 8011a68:	b90a      	cbnz	r2, 8011a6e <net_aton+0xe8>
  {
    ret = 0;
 8011a6a:	2500      	movs	r5, #0
 8011a6c:	e011      	b.n	8011a92 <net_aton+0x10c>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 8011a6e:	466b      	mov	r3, sp
 8011a70:	1ae3      	subs	r3, r4, r3
 8011a72:	109b      	asrs	r3, r3, #2
 8011a74:	2b03      	cmp	r3, #3
 8011a76:	d834      	bhi.n	8011ae2 <net_aton+0x15c>
 8011a78:	e8df f003 	tbb	[pc, r3]
 8011a7c:	180e0209 	.word	0x180e0209

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 8011a80:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8011a84:	d300      	bcc.n	8011a88 <net_aton+0x102>
        {
          ret = 0;
 8011a86:	2500      	movs	r5, #0
        }
        val |= parts[0] << 24;
 8011a88:	9b00      	ldr	r3, [sp, #0]
 8011a8a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        ret = 0;
        break;
    }
  }

  if (ret == 1)
 8011a8e:	2d01      	cmp	r5, #1
 8011a90:	d018      	beq.n	8011ac4 <net_aton+0x13e>
    {
      addr->addr = NET_HTONL(val);
    }
  }
  return ret;
}
 8011a92:	4628      	mov	r0, r5
 8011a94:	b005      	add	sp, #20
 8011a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (val > 0xffffU)
 8011a98:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8011a9c:	d223      	bcs.n	8011ae6 <net_aton+0x160>
        val |= (parts[0] << 24) | (parts[1] << 16);
 8011a9e:	9b01      	ldr	r3, [sp, #4]
 8011aa0:	041b      	lsls	r3, r3, #16
 8011aa2:	9a00      	ldr	r2, [sp, #0]
 8011aa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011aa8:	4319      	orrs	r1, r3
        break;
 8011aaa:	e7f0      	b.n	8011a8e <net_aton+0x108>
        if (val > 0xffU)
 8011aac:	29ff      	cmp	r1, #255	; 0xff
 8011aae:	d81c      	bhi.n	8011aea <net_aton+0x164>
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8011ab0:	9b01      	ldr	r3, [sp, #4]
 8011ab2:	041b      	lsls	r3, r3, #16
 8011ab4:	9a00      	ldr	r2, [sp, #0]
 8011ab6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011aba:	9a02      	ldr	r2, [sp, #8]
 8011abc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011ac0:	4319      	orrs	r1, r3
        break;
 8011ac2:	e7e4      	b.n	8011a8e <net_aton+0x108>
    if (addr != NULL)
 8011ac4:	2e00      	cmp	r6, #0
 8011ac6:	d0e4      	beq.n	8011a92 <net_aton+0x10c>
      addr->addr = NET_HTONL(val);
 8011ac8:	0a0b      	lsrs	r3, r1, #8
 8011aca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011ace:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8011ad2:	020a      	lsls	r2, r1, #8
 8011ad4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8011ad8:	4313      	orrs	r3, r2
 8011ada:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8011ade:	6031      	str	r1, [r6, #0]
 8011ae0:	e7d7      	b.n	8011a92 <net_aton+0x10c>
    switch (pp - parts + 1)
 8011ae2:	2500      	movs	r5, #0
 8011ae4:	e7d5      	b.n	8011a92 <net_aton+0x10c>
          ret = 0;
 8011ae6:	2500      	movs	r5, #0
 8011ae8:	e7d3      	b.n	8011a92 <net_aton+0x10c>
          ret = 0;
 8011aea:	2500      	movs	r5, #0
  return ret;
 8011aec:	e7d1      	b.n	8011a92 <net_aton+0x10c>

08011aee <net_get_ip_addr>:
  /*cstat -MISRAC2012-Rule-11.3 Cast */
  addrv = ((net_sockaddr_in_t *)addr)->sin_addr.s_addr;
  /*cstat +MISRAC2012-Rule-11.3 Cast */
  NET_COPY(ipaddr, addrv);
  return ipaddr;
}
 8011aee:	6840      	ldr	r0, [r0, #4]
 8011af0:	4770      	bx	lr
	...

08011af4 <net_wifi_security_to_string>:
  * @retval a constant string , for instance "Open" or "WPA2-AES"
  */
const char_t *net_wifi_security_to_string(uint32_t sec)
{
  const char_t *s;
  if (sec == NET_WIFI_SM_OPEN)
 8011af4:	2800      	cmp	r0, #0
 8011af6:	d041      	beq.n	8011b7c <net_wifi_security_to_string+0x88>
  {
    s =  "Open";
  }
  else if (sec == NET_WIFI_SM_WEP_SHARED)
 8011af8:	f248 0201 	movw	r2, #32769	; 0x8001
 8011afc:	4290      	cmp	r0, r2
 8011afe:	d03f      	beq.n	8011b80 <net_wifi_security_to_string+0x8c>
  {
    s = "WEP-shared";
  }
  else if (sec == NET_WIFI_SM_WPA_TKIP_PSK)
 8011b00:	4a30      	ldr	r2, [pc, #192]	; (8011bc4 <net_wifi_security_to_string+0xd0>)
 8011b02:	4290      	cmp	r0, r2
 8011b04:	d03e      	beq.n	8011b84 <net_wifi_security_to_string+0x90>
  {
    s = "WPA-TKIP";
  }
  else if (sec == NET_WIFI_SM_WPA_MIXED_PSK)
 8011b06:	3204      	adds	r2, #4
 8011b08:	4290      	cmp	r0, r2
 8011b0a:	d03d      	beq.n	8011b88 <net_wifi_security_to_string+0x94>
  {
    s = "WPA-Mixed";
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_PSK)
 8011b0c:	4a2e      	ldr	r2, [pc, #184]	; (8011bc8 <net_wifi_security_to_string+0xd4>)
 8011b0e:	4290      	cmp	r0, r2
 8011b10:	d03c      	beq.n	8011b8c <net_wifi_security_to_string+0x98>
  {
    s = "WPA2-AES";
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_PSK)
 8011b12:	3a02      	subs	r2, #2
 8011b14:	4290      	cmp	r0, r2
 8011b16:	d03b      	beq.n	8011b90 <net_wifi_security_to_string+0x9c>
  {
    s = "WPA2-TKIP";
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_PSK)
 8011b18:	3204      	adds	r2, #4
 8011b1a:	4290      	cmp	r0, r2
 8011b1c:	d03a      	beq.n	8011b94 <net_wifi_security_to_string+0xa0>
  {
    s = "WPA2_Mixed";
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_PSK)
 8011b1e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011b22:	3a02      	subs	r2, #2
 8011b24:	4290      	cmp	r0, r2
 8011b26:	d037      	beq.n	8011b98 <net_wifi_security_to_string+0xa4>
  {
    s = "WPA2-FBT";
  }
  else if (sec == NET_WIFI_SM_WPA3_SAE)
 8011b28:	f1a2 527d 	sub.w	r2, r2, #1061158912	; 0x3f400000
 8011b2c:	4290      	cmp	r0, r2
 8011b2e:	d035      	beq.n	8011b9c <net_wifi_security_to_string+0xa8>
  {
    s = "WPA3";
  }
  else if (sec == NET_WIFI_SM_WPA3_WPA2_PSK)
 8011b30:	f502 0280 	add.w	r2, r2, #4194304	; 0x400000
 8011b34:	4290      	cmp	r0, r2
 8011b36:	d033      	beq.n	8011ba0 <net_wifi_security_to_string+0xac>
  {
    s = "WPA3-WPA2";
  }

  else if (sec == NET_WIFI_SM_WPA_TKIP_ENT)
 8011b38:	4a24      	ldr	r2, [pc, #144]	; (8011bcc <net_wifi_security_to_string+0xd8>)
 8011b3a:	4290      	cmp	r0, r2
 8011b3c:	d032      	beq.n	8011ba4 <net_wifi_security_to_string+0xb0>
  {
    s = "WPA-TKIP-Ent";
  }
  else if (sec == NET_WIFI_SM_WPA_AES_ENT)
 8011b3e:	3202      	adds	r2, #2
 8011b40:	4290      	cmp	r0, r2
 8011b42:	d031      	beq.n	8011ba8 <net_wifi_security_to_string+0xb4>
  {
    s = "WPA-AES-Ent";
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_ENT)
 8011b44:	4a22      	ldr	r2, [pc, #136]	; (8011bd0 <net_wifi_security_to_string+0xdc>)
 8011b46:	4290      	cmp	r0, r2
 8011b48:	d030      	beq.n	8011bac <net_wifi_security_to_string+0xb8>
  {
    s = "WPA2-TKIP-Ent";
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_ENT)
 8011b4a:	3202      	adds	r2, #2
 8011b4c:	4290      	cmp	r0, r2
 8011b4e:	d02f      	beq.n	8011bb0 <net_wifi_security_to_string+0xbc>
  {
    s = "WPA2-AES-Ent";
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_ENT)
 8011b50:	3202      	adds	r2, #2
 8011b52:	4290      	cmp	r0, r2
 8011b54:	d02e      	beq.n	8011bb4 <net_wifi_security_to_string+0xc0>
  {
    s = "WPA2-Mixed-Ent";
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_ENT)
 8011b56:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011b5a:	3a02      	subs	r2, #2
 8011b5c:	4290      	cmp	r0, r2
 8011b5e:	d02b      	beq.n	8011bb8 <net_wifi_security_to_string+0xc4>
  {
    s = "WPA-FBT-Ent";
  }

  else if (sec == NET_WIFI_SM_IBSS_OPEN)
 8011b60:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8011b64:	d02a      	beq.n	8011bbc <net_wifi_security_to_string+0xc8>
  {
    s = "IBS";
  }
  else if (sec == NET_WIFI_SM_WPS_OPEN)
 8011b66:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8011b6a:	d029      	beq.n	8011bc0 <net_wifi_security_to_string+0xcc>
  {
    s = "WPS";
  }
  else if (sec == NET_WIFI_SM_WPS_SECURE)
 8011b6c:	f1a2 5249 	sub.w	r2, r2, #843055104	; 0x32400000
 8011b70:	4290      	cmp	r0, r2
 8011b72:	d001      	beq.n	8011b78 <net_wifi_security_to_string+0x84>
  {
    s = "WPS-AES";
  }
  else
  {
    s = "unknown";
 8011b74:	4817      	ldr	r0, [pc, #92]	; (8011bd4 <net_wifi_security_to_string+0xe0>)
  }
  return s;
}
 8011b76:	4770      	bx	lr
    s = "WPS-AES";
 8011b78:	4817      	ldr	r0, [pc, #92]	; (8011bd8 <net_wifi_security_to_string+0xe4>)
 8011b7a:	4770      	bx	lr
    s =  "Open";
 8011b7c:	4817      	ldr	r0, [pc, #92]	; (8011bdc <net_wifi_security_to_string+0xe8>)
 8011b7e:	4770      	bx	lr
    s = "WEP-shared";
 8011b80:	4817      	ldr	r0, [pc, #92]	; (8011be0 <net_wifi_security_to_string+0xec>)
 8011b82:	4770      	bx	lr
    s = "WPA-TKIP";
 8011b84:	4817      	ldr	r0, [pc, #92]	; (8011be4 <net_wifi_security_to_string+0xf0>)
 8011b86:	4770      	bx	lr
    s = "WPA-Mixed";
 8011b88:	4817      	ldr	r0, [pc, #92]	; (8011be8 <net_wifi_security_to_string+0xf4>)
 8011b8a:	4770      	bx	lr
    s = "WPA2-AES";
 8011b8c:	4817      	ldr	r0, [pc, #92]	; (8011bec <net_wifi_security_to_string+0xf8>)
 8011b8e:	4770      	bx	lr
    s = "WPA2-TKIP";
 8011b90:	4817      	ldr	r0, [pc, #92]	; (8011bf0 <net_wifi_security_to_string+0xfc>)
 8011b92:	4770      	bx	lr
    s = "WPA2_Mixed";
 8011b94:	4817      	ldr	r0, [pc, #92]	; (8011bf4 <net_wifi_security_to_string+0x100>)
 8011b96:	4770      	bx	lr
    s = "WPA2-FBT";
 8011b98:	4817      	ldr	r0, [pc, #92]	; (8011bf8 <net_wifi_security_to_string+0x104>)
 8011b9a:	4770      	bx	lr
    s = "WPA3";
 8011b9c:	4817      	ldr	r0, [pc, #92]	; (8011bfc <net_wifi_security_to_string+0x108>)
 8011b9e:	4770      	bx	lr
    s = "WPA3-WPA2";
 8011ba0:	4817      	ldr	r0, [pc, #92]	; (8011c00 <net_wifi_security_to_string+0x10c>)
 8011ba2:	4770      	bx	lr
    s = "WPA-TKIP-Ent";
 8011ba4:	4817      	ldr	r0, [pc, #92]	; (8011c04 <net_wifi_security_to_string+0x110>)
 8011ba6:	4770      	bx	lr
    s = "WPA-AES-Ent";
 8011ba8:	4817      	ldr	r0, [pc, #92]	; (8011c08 <net_wifi_security_to_string+0x114>)
 8011baa:	4770      	bx	lr
    s = "WPA2-TKIP-Ent";
 8011bac:	4817      	ldr	r0, [pc, #92]	; (8011c0c <net_wifi_security_to_string+0x118>)
 8011bae:	4770      	bx	lr
    s = "WPA2-AES-Ent";
 8011bb0:	4817      	ldr	r0, [pc, #92]	; (8011c10 <net_wifi_security_to_string+0x11c>)
 8011bb2:	4770      	bx	lr
    s = "WPA2-Mixed-Ent";
 8011bb4:	4817      	ldr	r0, [pc, #92]	; (8011c14 <net_wifi_security_to_string+0x120>)
 8011bb6:	4770      	bx	lr
    s = "WPA-FBT-Ent";
 8011bb8:	4817      	ldr	r0, [pc, #92]	; (8011c18 <net_wifi_security_to_string+0x124>)
 8011bba:	4770      	bx	lr
    s = "IBS";
 8011bbc:	4817      	ldr	r0, [pc, #92]	; (8011c1c <net_wifi_security_to_string+0x128>)
 8011bbe:	4770      	bx	lr
    s = "WPS";
 8011bc0:	4817      	ldr	r0, [pc, #92]	; (8011c20 <net_wifi_security_to_string+0x12c>)
 8011bc2:	4770      	bx	lr
 8011bc4:	00200002 	.word	0x00200002
 8011bc8:	00400004 	.word	0x00400004
 8011bcc:	02200002 	.word	0x02200002
 8011bd0:	02400002 	.word	0x02400002
 8011bd4:	080268d0 	.word	0x080268d0
 8011bd8:	080269a0 	.word	0x080269a0
 8011bdc:	0802664c 	.word	0x0802664c
 8011be0:	080268d8 	.word	0x080268d8
 8011be4:	080268e4 	.word	0x080268e4
 8011be8:	080268f0 	.word	0x080268f0
 8011bec:	080268fc 	.word	0x080268fc
 8011bf0:	08026908 	.word	0x08026908
 8011bf4:	08026914 	.word	0x08026914
 8011bf8:	08026920 	.word	0x08026920
 8011bfc:	0802692c 	.word	0x0802692c
 8011c00:	08026934 	.word	0x08026934
 8011c04:	08026940 	.word	0x08026940
 8011c08:	08026950 	.word	0x08026950
 8011c0c:	0802695c 	.word	0x0802695c
 8011c10:	0802696c 	.word	0x0802696c
 8011c14:	0802697c 	.word	0x0802697c
 8011c18:	0802698c 	.word	0x0802698c
 8011c1c:	08026998 	.word	0x08026998
 8011c20:	0802699c 	.word	0x0802699c

08011c24 <net_wifi_string_to_security>:
/**
  * @brief  Convert a string to a security enum value
  * @param  sec is a pointer to a string
  */
uint32_t net_wifi_string_to_security(char_t *sec)
{
 8011c24:	b538      	push	{r3, r4, r5, lr}
 8011c26:	4604      	mov	r4, r0
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
  if (strcmp(sec, "Open") == 0)
 8011c28:	493d      	ldr	r1, [pc, #244]	; (8011d20 <net_wifi_string_to_security+0xfc>)
 8011c2a:	f7ee fb61 	bl	80002f0 <strcmp>
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	d071      	beq.n	8011d16 <net_wifi_string_to_security+0xf2>
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
 8011c32:	f04f 35ff 	mov.w	r5, #4294967295
  {
    ret = NET_WIFI_SM_OPEN;
  }
  if (strcmp(sec, "WEP-shared") == 0)
 8011c36:	493b      	ldr	r1, [pc, #236]	; (8011d24 <net_wifi_string_to_security+0x100>)
 8011c38:	4620      	mov	r0, r4
 8011c3a:	f7ee fb59 	bl	80002f0 <strcmp>
 8011c3e:	b908      	cbnz	r0, 8011c44 <net_wifi_string_to_security+0x20>
  {
    ret = NET_WIFI_SM_WEP_SHARED;
 8011c40:	f248 0501 	movw	r5, #32769	; 0x8001
  }
  if (strcmp(sec, "WPA-TKIP") == 0)
 8011c44:	4938      	ldr	r1, [pc, #224]	; (8011d28 <net_wifi_string_to_security+0x104>)
 8011c46:	4620      	mov	r0, r4
 8011c48:	f7ee fb52 	bl	80002f0 <strcmp>
 8011c4c:	b900      	cbnz	r0, 8011c50 <net_wifi_string_to_security+0x2c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_PSK;
 8011c4e:	4d37      	ldr	r5, [pc, #220]	; (8011d2c <net_wifi_string_to_security+0x108>)
  }
  if (strcmp(sec, "WPA-Mixed") == 0)
 8011c50:	4937      	ldr	r1, [pc, #220]	; (8011d30 <net_wifi_string_to_security+0x10c>)
 8011c52:	4620      	mov	r0, r4
 8011c54:	f7ee fb4c 	bl	80002f0 <strcmp>
 8011c58:	b900      	cbnz	r0, 8011c5c <net_wifi_string_to_security+0x38>
  {
    ret = NET_WIFI_SM_WPA_MIXED_PSK;
 8011c5a:	4d36      	ldr	r5, [pc, #216]	; (8011d34 <net_wifi_string_to_security+0x110>)
  }
  if (strcmp(sec, "WPA2-AES") == 0)
 8011c5c:	4936      	ldr	r1, [pc, #216]	; (8011d38 <net_wifi_string_to_security+0x114>)
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f7ee fb46 	bl	80002f0 <strcmp>
 8011c64:	b900      	cbnz	r0, 8011c68 <net_wifi_string_to_security+0x44>
  {
    ret = NET_WIFI_SM_WPA2_AES_PSK;
 8011c66:	4d35      	ldr	r5, [pc, #212]	; (8011d3c <net_wifi_string_to_security+0x118>)
  }
  if (strcmp(sec, "WPA2-TKIP") == 0)
 8011c68:	4935      	ldr	r1, [pc, #212]	; (8011d40 <net_wifi_string_to_security+0x11c>)
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	f7ee fb40 	bl	80002f0 <strcmp>
 8011c70:	b900      	cbnz	r0, 8011c74 <net_wifi_string_to_security+0x50>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 8011c72:	4d34      	ldr	r5, [pc, #208]	; (8011d44 <net_wifi_string_to_security+0x120>)
  }
  if (strcmp(sec, "WPA2-Mixed") == 0)
 8011c74:	4934      	ldr	r1, [pc, #208]	; (8011d48 <net_wifi_string_to_security+0x124>)
 8011c76:	4620      	mov	r0, r4
 8011c78:	f7ee fb3a 	bl	80002f0 <strcmp>
 8011c7c:	b900      	cbnz	r0, 8011c80 <net_wifi_string_to_security+0x5c>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 8011c7e:	4d33      	ldr	r5, [pc, #204]	; (8011d4c <net_wifi_string_to_security+0x128>)
  }
  if (strcmp(sec, "WPA2-DBT") == 0)
 8011c80:	4933      	ldr	r1, [pc, #204]	; (8011d50 <net_wifi_string_to_security+0x12c>)
 8011c82:	4620      	mov	r0, r4
 8011c84:	f7ee fb34 	bl	80002f0 <strcmp>
 8011c88:	b900      	cbnz	r0, 8011c8c <net_wifi_string_to_security+0x68>
  {
    ret = NET_WIFI_SM_WPA2_FBT_PSK;
 8011c8a:	4d32      	ldr	r5, [pc, #200]	; (8011d54 <net_wifi_string_to_security+0x130>)
  }
  if (strcmp(sec, "WPA3") == 0)
 8011c8c:	4932      	ldr	r1, [pc, #200]	; (8011d58 <net_wifi_string_to_security+0x134>)
 8011c8e:	4620      	mov	r0, r4
 8011c90:	f7ee fb2e 	bl	80002f0 <strcmp>
 8011c94:	b900      	cbnz	r0, 8011c98 <net_wifi_string_to_security+0x74>
  {
    ret = NET_WIFI_SM_WPA3_SAE;
 8011c96:	4d31      	ldr	r5, [pc, #196]	; (8011d5c <net_wifi_string_to_security+0x138>)
  }
  if (strcmp(sec, "WPA3-WPA2") == 0)
 8011c98:	4931      	ldr	r1, [pc, #196]	; (8011d60 <net_wifi_string_to_security+0x13c>)
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f7ee fb28 	bl	80002f0 <strcmp>
 8011ca0:	b900      	cbnz	r0, 8011ca4 <net_wifi_string_to_security+0x80>
  {
    ret = NET_WIFI_SM_WPA3_WPA2_PSK;
 8011ca2:	4d30      	ldr	r5, [pc, #192]	; (8011d64 <net_wifi_string_to_security+0x140>)
  }

  if (strcmp(sec, "WPA-TKIP-Ent") == 0)
 8011ca4:	4930      	ldr	r1, [pc, #192]	; (8011d68 <net_wifi_string_to_security+0x144>)
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f7ee fb22 	bl	80002f0 <strcmp>
 8011cac:	b900      	cbnz	r0, 8011cb0 <net_wifi_string_to_security+0x8c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_ENT;
 8011cae:	4d2f      	ldr	r5, [pc, #188]	; (8011d6c <net_wifi_string_to_security+0x148>)
  }
  if (strcmp(sec, "WPA-AES-Ent") == 0)
 8011cb0:	492f      	ldr	r1, [pc, #188]	; (8011d70 <net_wifi_string_to_security+0x14c>)
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f7ee fb1c 	bl	80002f0 <strcmp>
 8011cb8:	b900      	cbnz	r0, 8011cbc <net_wifi_string_to_security+0x98>
  {
    ret = NET_WIFI_SM_WPA_AES_ENT;
 8011cba:	4d2e      	ldr	r5, [pc, #184]	; (8011d74 <net_wifi_string_to_security+0x150>)
  }
  if (strcmp(sec, "WPA2-TKIP-Ent") == 0)
 8011cbc:	492e      	ldr	r1, [pc, #184]	; (8011d78 <net_wifi_string_to_security+0x154>)
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	f7ee fb16 	bl	80002f0 <strcmp>
 8011cc4:	b900      	cbnz	r0, 8011cc8 <net_wifi_string_to_security+0xa4>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_ENT;
 8011cc6:	4d2d      	ldr	r5, [pc, #180]	; (8011d7c <net_wifi_string_to_security+0x158>)
  }
  if (strcmp(sec, "WPA2-AES-Ent") == 0)
 8011cc8:	492d      	ldr	r1, [pc, #180]	; (8011d80 <net_wifi_string_to_security+0x15c>)
 8011cca:	4620      	mov	r0, r4
 8011ccc:	f7ee fb10 	bl	80002f0 <strcmp>
 8011cd0:	b900      	cbnz	r0, 8011cd4 <net_wifi_string_to_security+0xb0>
  {
    ret = NET_WIFI_SM_WPA2_AES_ENT;
 8011cd2:	4d2c      	ldr	r5, [pc, #176]	; (8011d84 <net_wifi_string_to_security+0x160>)
  }
  if (strcmp(sec, "WPA2-Mixed-Ent") == 0)
 8011cd4:	492c      	ldr	r1, [pc, #176]	; (8011d88 <net_wifi_string_to_security+0x164>)
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	f7ee fb0a 	bl	80002f0 <strcmp>
 8011cdc:	b900      	cbnz	r0, 8011ce0 <net_wifi_string_to_security+0xbc>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_ENT;
 8011cde:	4d2b      	ldr	r5, [pc, #172]	; (8011d8c <net_wifi_string_to_security+0x168>)
  }
  if (strcmp(sec, "WPA-FBT-Ent") == 0)
 8011ce0:	492b      	ldr	r1, [pc, #172]	; (8011d90 <net_wifi_string_to_security+0x16c>)
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	f7ee fb04 	bl	80002f0 <strcmp>
 8011ce8:	b900      	cbnz	r0, 8011cec <net_wifi_string_to_security+0xc8>
  {
    ret = NET_WIFI_SM_WPA2_FBT_ENT;
 8011cea:	4d2a      	ldr	r5, [pc, #168]	; (8011d94 <net_wifi_string_to_security+0x170>)
  }
  if (strcmp(sec, "IBS") == 0)
 8011cec:	492a      	ldr	r1, [pc, #168]	; (8011d98 <net_wifi_string_to_security+0x174>)
 8011cee:	4620      	mov	r0, r4
 8011cf0:	f7ee fafe 	bl	80002f0 <strcmp>
 8011cf4:	b908      	cbnz	r0, 8011cfa <net_wifi_string_to_security+0xd6>
  {
    ret = NET_WIFI_SM_IBSS_OPEN;
 8011cf6:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  }
  if (strcmp(sec, "WPS") == 0)
 8011cfa:	4928      	ldr	r1, [pc, #160]	; (8011d9c <net_wifi_string_to_security+0x178>)
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	f7ee faf7 	bl	80002f0 <strcmp>
 8011d02:	b908      	cbnz	r0, 8011d08 <net_wifi_string_to_security+0xe4>
  {
    ret = NET_WIFI_SM_WPS_OPEN;
 8011d04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  }
  if (strcmp(sec, "WPS-AES") == 0)
 8011d08:	4925      	ldr	r1, [pc, #148]	; (8011da0 <net_wifi_string_to_security+0x17c>)
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f7ee faf0 	bl	80002f0 <strcmp>
 8011d10:	b118      	cbz	r0, 8011d1a <net_wifi_string_to_security+0xf6>
  {
    ret = NET_WIFI_SM_WPS_SECURE;
  }

  return ret;
}
 8011d12:	4628      	mov	r0, r5
 8011d14:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_WIFI_SM_OPEN;
 8011d16:	2500      	movs	r5, #0
 8011d18:	e78d      	b.n	8011c36 <net_wifi_string_to_security+0x12>
    ret = NET_WIFI_SM_WPS_SECURE;
 8011d1a:	4d22      	ldr	r5, [pc, #136]	; (8011da4 <net_wifi_string_to_security+0x180>)
  return ret;
 8011d1c:	e7f9      	b.n	8011d12 <net_wifi_string_to_security+0xee>
 8011d1e:	bf00      	nop
 8011d20:	0802664c 	.word	0x0802664c
 8011d24:	080268d8 	.word	0x080268d8
 8011d28:	080268e4 	.word	0x080268e4
 8011d2c:	00200002 	.word	0x00200002
 8011d30:	080268f0 	.word	0x080268f0
 8011d34:	00200006 	.word	0x00200006
 8011d38:	080268fc 	.word	0x080268fc
 8011d3c:	00400004 	.word	0x00400004
 8011d40:	08026908 	.word	0x08026908
 8011d44:	00400002 	.word	0x00400002
 8011d48:	080269a8 	.word	0x080269a8
 8011d4c:	00400006 	.word	0x00400006
 8011d50:	080269b4 	.word	0x080269b4
 8011d54:	40400004 	.word	0x40400004
 8011d58:	0802692c 	.word	0x0802692c
 8011d5c:	01000004 	.word	0x01000004
 8011d60:	08026934 	.word	0x08026934
 8011d64:	01400004 	.word	0x01400004
 8011d68:	08026940 	.word	0x08026940
 8011d6c:	02200002 	.word	0x02200002
 8011d70:	08026950 	.word	0x08026950
 8011d74:	02200004 	.word	0x02200004
 8011d78:	0802695c 	.word	0x0802695c
 8011d7c:	02400002 	.word	0x02400002
 8011d80:	0802696c 	.word	0x0802696c
 8011d84:	02400004 	.word	0x02400004
 8011d88:	0802697c 	.word	0x0802697c
 8011d8c:	02400006 	.word	0x02400006
 8011d90:	0802698c 	.word	0x0802698c
 8011d94:	42400004 	.word	0x42400004
 8011d98:	08026998 	.word	0x08026998
 8011d9c:	0802699c 	.word	0x0802699c
 8011da0:	080269a0 	.word	0x080269a0
 8011da4:	10000004 	.word	0x10000004

08011da8 <net_wifi_scan>:
  * @retval return the number of found access point , max value is "number".
   * This function is a synchronous function.
  */

int32_t net_wifi_scan(net_if_handle_t *pnetif_in, net_wifi_scan_mode_t mode, char_t *ssid)
{
 8011da8:	b570      	push	{r4, r5, r6, lr}
 8011daa:	460d      	mov	r5, r1
 8011dac:	4614      	mov	r4, r2
  int32_t ret = NET_OK;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011dae:	f000 f861 	bl	8011e74 <netif_check>
  if (pnetif == NULL)
 8011db2:	b150      	cbz	r0, 8011dca <net_wifi_scan+0x22>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8011db4:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 8011db8:	7811      	ldrb	r1, [r2, #0]
 8011dba:	b949      	cbnz	r1, 8011dd0 <net_wifi_scan+0x28>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    if (pnetif->pdrv->extension.wifi->scan(pnetif, mode, ssid) != NET_OK)
 8011dbc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8011dbe:	6816      	ldr	r6, [r2, #0]
 8011dc0:	4622      	mov	r2, r4
 8011dc2:	4629      	mov	r1, r5
 8011dc4:	47b0      	blx	r6
 8011dc6:	b930      	cbnz	r0, 8011dd6 <net_wifi_scan+0x2e>
      ret = NET_ERROR_GENERIC;
    }
  }

  return ret;
}
 8011dc8:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 8011dca:	f06f 0003 	mvn.w	r0, #3
 8011dce:	e7fb      	b.n	8011dc8 <net_wifi_scan+0x20>
    ret = NET_ERROR_PARAMETER;
 8011dd0:	f06f 0003 	mvn.w	r0, #3
 8011dd4:	e7f8      	b.n	8011dc8 <net_wifi_scan+0x20>
      ret = NET_ERROR_GENERIC;
 8011dd6:	f06f 001c 	mvn.w	r0, #28
  return ret;
 8011dda:	e7f5      	b.n	8011dc8 <net_wifi_scan+0x20>

08011ddc <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer , size of the array 'results'
  * @retval return the number of found access point , max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif_in, net_wifi_scan_results_t *results, uint8_t number)
{
 8011ddc:	b570      	push	{r4, r5, r6, lr}
 8011dde:	460d      	mov	r5, r1
 8011de0:	4614      	mov	r4, r2
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011de2:	f000 f847 	bl	8011e74 <netif_check>
  if (pnetif == NULL)
 8011de6:	b148      	cbz	r0, 8011dfc <net_wifi_get_scan_results+0x20>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8011de8:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 8011dec:	7811      	ldrb	r1, [r2, #0]
 8011dee:	b941      	cbnz	r1, 8011e02 <net_wifi_get_scan_results+0x26>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    ret = pnetif->pdrv->extension.wifi->get_scan_results(pnetif, results, number);
 8011df0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8011df2:	6856      	ldr	r6, [r2, #4]
 8011df4:	4622      	mov	r2, r4
 8011df6:	4629      	mov	r1, r5
 8011df8:	47b0      	blx	r6
  }
  return ret;
}
 8011dfa:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 8011dfc:	f06f 0003 	mvn.w	r0, #3
 8011e00:	e7fb      	b.n	8011dfa <net_wifi_get_scan_results+0x1e>
    ret = NET_ERROR_PARAMETER;
 8011e02:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8011e06:	e7f8      	b.n	8011dfa <net_wifi_get_scan_results+0x1e>

08011e08 <net_wifi_set_credentials>:
  * @param  credentials a pointer to a const allocated structure which contain credentials values (ssid , passwd)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
  pnetif->pdrv->extension.wifi->credentials = credentials;
 8011e08:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e0e:	6159      	str	r1, [r3, #20]
  return NET_OK;
}
 8011e10:	2000      	movs	r0, #0
 8011e12:	4770      	bx	lr

08011e14 <netif_add_to_list>:
#endif /* IO */

static void netif_add_to_list(net_if_handle_t *pnetif)
{
  LOCK_NETIF_LIST();
  if (net_if_list == NULL)
 8011e14:	4b05      	ldr	r3, [pc, #20]	; (8011e2c <netif_add_to_list+0x18>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	b12b      	cbz	r3, 8011e26 <netif_add_to_list+0x12>
  else
  {
    /*add it to end of the list*/
    net_if_handle_t *plastnetif;
    plastnetif = net_if_list;
    while (plastnetif->next != NULL)
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d1fb      	bne.n	8011e1a <netif_add_to_list+0x6>
    {
      plastnetif = plastnetif->next;
    }
    plastnetif->next = pnetif;
 8011e22:	6010      	str	r0, [r2, #0]
  }
  UNLOCK_NETIF_LIST();
}
 8011e24:	4770      	bx	lr
    net_if_list = pnetif;
 8011e26:	4b01      	ldr	r3, [pc, #4]	; (8011e2c <netif_add_to_list+0x18>)
 8011e28:	6018      	str	r0, [r3, #0]
 8011e2a:	4770      	bx	lr
 8011e2c:	2400fe64 	.word	0x2400fe64

08011e30 <net_if_find>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 8011e30:	b510      	push	{r4, lr}
 8011e32:	b082      	sub	sp, #8
  net_if_handle_t *ptr;
  net_ip_addr_t ipaddr;
  net_ip_addr_t ipaddr_zero;

  NET_ZERO(ipaddr_zero);
 8011e34:	2300      	movs	r3, #0
 8011e36:	9300      	str	r3, [sp, #0]
  NET_ZERO(ipaddr);
 8011e38:	9301      	str	r3, [sp, #4]
  if (addr != NULL)
 8011e3a:	b110      	cbz	r0, 8011e42 <net_if_find+0x12>
  {
    ipaddr = net_get_ip_addr(addr);
 8011e3c:	f7ff fe57 	bl	8011aee <net_get_ip_addr>
 8011e40:	9001      	str	r0, [sp, #4]

  }
  LOCK_NETIF_LIST();

  ptr = net_if_list;
 8011e42:	4b0b      	ldr	r3, [pc, #44]	; (8011e70 <net_if_find+0x40>)
 8011e44:	681c      	ldr	r4, [r3, #0]

  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 8011e46:	2204      	movs	r2, #4
 8011e48:	4669      	mov	r1, sp
 8011e4a:	eb0d 0002 	add.w	r0, sp, r2
 8011e4e:	f011 fbf1 	bl	8023634 <memcmp>
 8011e52:	b148      	cbz	r0, 8011e68 <net_if_find+0x38>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 8011e54:	2204      	movs	r2, #4
 8011e56:	eb0d 0102 	add.w	r1, sp, r2
 8011e5a:	18a0      	adds	r0, r4, r2
 8011e5c:	f011 fbea 	bl	8023634 <memcmp>
 8011e60:	b110      	cbz	r0, 8011e68 <net_if_find+0x38>
      {
        break;
      }
      ptr = ptr->next;
 8011e62:	6824      	ldr	r4, [r4, #0]
    } while (ptr != NULL);
 8011e64:	2c00      	cmp	r4, #0
 8011e66:	d1f5      	bne.n	8011e54 <net_if_find+0x24>
  }
  UNLOCK_NETIF_LIST();
  return ptr;
}
 8011e68:	4620      	mov	r0, r4
 8011e6a:	b002      	add	sp, #8
 8011e6c:	bd10      	pop	{r4, pc}
 8011e6e:	bf00      	nop
 8011e70:	2400fe64 	.word	0x2400fe64

08011e74 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif_in)
{
 8011e74:	b508      	push	{r3, lr}
  net_if_handle_t *pnetif = pnetif_in;
  if (pnetif == NULL)
 8011e76:	b100      	cbz	r0, 8011e7a <netif_check+0x6>
    {
      NET_DBG_ERROR("No network interface defined");
    }
  }
  return pnetif;
}
 8011e78:	bd08      	pop	{r3, pc}
    pnetif = net_if_find(NULL);
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	f7ff ffd8 	bl	8011e30 <net_if_find>
    if (pnetif == NULL)
 8011e80:	e7fa      	b.n	8011e78 <netif_check+0x4>

08011e82 <net_if_wait_state>:
  * @retval 0 in case of success, an error code otherwise
  */
extern uint32_t HAL_GetTick(void);

int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 8011e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e84:	4604      	mov	r4, r0
 8011e86:	460d      	mov	r5, r1
 8011e88:	4617      	mov	r7, r2
  int32_t  ret = NET_OK;
  __IO net_state_t      *p;
  p = &pnetif->state;

  uint32_t start_time = HAL_GetTick();
 8011e8a:	f7f8 fc29 	bl	800a6e0 <HAL_GetTick>
 8011e8e:	4606      	mov	r6, r0
  while (*p != state)
 8011e90:	e005      	b.n	8011e9e <net_if_wait_state+0x1c>
    if (HAL_GetTick() >= (start_time + timeout))
    {
      ret = NET_TIMEOUT;
      break;
    }
    WAIT_STATE_CHANGE(timeout);
 8011e92:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011e96:	695b      	ldr	r3, [r3, #20]
 8011e98:	210a      	movs	r1, #10
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	4798      	blx	r3
  while (*p != state)
 8011e9e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	42ab      	cmp	r3, r5
 8011ea6:	d007      	beq.n	8011eb8 <net_if_wait_state+0x36>
    if (HAL_GetTick() >= (start_time + timeout))
 8011ea8:	f7f8 fc1a 	bl	800a6e0 <HAL_GetTick>
 8011eac:	19f3      	adds	r3, r6, r7
 8011eae:	4298      	cmp	r0, r3
 8011eb0:	d3ef      	bcc.n	8011e92 <net_if_wait_state+0x10>
      ret = NET_TIMEOUT;
 8011eb2:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return ret;
 8011eb6:	e000      	b.n	8011eba <net_if_wait_state+0x38>
  int32_t  ret = NET_OK;
 8011eb8:	2000      	movs	r0, #0

}
 8011eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011ebc <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void  *event_data)
{
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8011ebc:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8011ec0:	b128      	cbz	r0, 8011ece <net_if_notify+0x12>
{
 8011ec2:	b510      	push	{r4, lr}
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8011ec4:	6804      	ldr	r4, [r0, #0]
 8011ec6:	b10c      	cbz	r4, 8011ecc <net_if_notify+0x10>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 8011ec8:	6840      	ldr	r0, [r0, #4]
 8011eca:	47a0      	blx	r4
  }
}
 8011ecc:	bd10      	pop	{r4, pc}
 8011ece:	4770      	bx	lr

08011ed0 <net_if_init>:
    net_init_locks();
    net_initialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (pnetif != NULL)
 8011ed0:	b168      	cbz	r0, 8011eee <net_if_init+0x1e>
{
 8011ed2:	b538      	push	{r3, r4, r5, lr}
 8011ed4:	460d      	mov	r5, r1
 8011ed6:	4604      	mov	r4, r0
  {
    pnetif->event_handler = event_handler;
 8011ed8:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    pnetif->state = NET_STATE_INITIALIZED;
 8011edc:	2301      	movs	r3, #1
 8011ede:	f880 30ea 	strb.w	r3, [r0, #234]	; 0xea
    netif_add_to_list(pnetif);
 8011ee2:	f7ff ff97 	bl	8011e14 <netif_add_to_list>
    ret = (*driver_init)(pnetif);
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	47a8      	blx	r5
    if (NET_OK != ret)
 8011eea:	b918      	cbnz	r0, 8011ef4 <net_if_init+0x24>
  {
    NET_DBG_ERROR("Invalid interface.");
    ret = NET_ERROR_PARAMETER;
  }
  return ret;
}
 8011eec:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 8011eee:	f06f 0003 	mvn.w	r0, #3
}
 8011ef2:	4770      	bx	lr
      ret = NET_ERROR_INTERFACE_FAILURE;
 8011ef4:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8011ef8:	e7f8      	b.n	8011eec <net_if_init+0x1c>

08011efa <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 8011efa:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 8011efc:	2101      	movs	r1, #1
 8011efe:	f000 f8ab 	bl	8012058 <net_state_manage_event>
}
 8011f02:	bd08      	pop	{r3, pc}

08011f04 <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 8011f04:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 8011f06:	2102      	movs	r1, #2
 8011f08:	f000 f8a6 	bl	8012058 <net_state_manage_event>
}
 8011f0c:	bd08      	pop	{r3, pc}

08011f0e <net_if_disconnect>:
  * @brief  Disconnect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_disconnect(net_if_handle_t *pnetif)
{
 8011f0e:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_DISCONNECT);
 8011f10:	2103      	movs	r1, #3
 8011f12:	f000 f8a1 	bl	8012058 <net_state_manage_event>
}
 8011f16:	bd08      	pop	{r3, pc}

08011f18 <set_state>:
  "NET_STATE_CONNECTION_LOST",
};
#endif /* DEBUGSTATE */

static void   set_state(net_if_handle_t *pnetif, net_state_t state)
{
 8011f18:	b508      	push	{r3, lr}
 8011f1a:	460a      	mov	r2, r1
  pnetif->state = state;
 8011f1c:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 8011f20:	2300      	movs	r3, #0
 8011f22:	4619      	mov	r1, r3
 8011f24:	f7ff ffca 	bl	8011ebc <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 8011f28:	bd08      	pop	{r3, pc}

08011f2a <net_state_initialized>:


static  int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 8011f2a:	b538      	push	{r3, r4, r5, lr}
 8011f2c:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8011f2e:	2901      	cmp	r1, #1
 8011f30:	d004      	beq.n	8011f3c <net_state_initialized+0x12>
 8011f32:	2905      	cmp	r1, #5
 8011f34:	d010      	beq.n	8011f58 <net_state_initialized+0x2e>
 8011f36:	2500      	movs	r5, #0

    default:
      break;
  }
  return ret;
}
 8011f38:	4628      	mov	r0, r5
 8011f3a:	bd38      	pop	{r3, r4, r5, pc}
      set_state(pnetif, NET_STATE_STARTING);
 8011f3c:	2102      	movs	r1, #2
 8011f3e:	f7ff ffeb 	bl	8011f18 <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 8011f42:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	4620      	mov	r0, r4
 8011f4a:	4798      	blx	r3
      if (NET_OK != ret)
 8011f4c:	4605      	mov	r5, r0
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	d0f2      	beq.n	8011f38 <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011f52:	f06f 0510 	mvn.w	r5, #16
 8011f56:	e7ef      	b.n	8011f38 <net_state_initialized+0xe>
      ret = pnetif->pdrv->if_deinit(pnetif);
 8011f58:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011f5c:	689b      	ldr	r3, [r3, #8]
 8011f5e:	4798      	blx	r3
 8011f60:	4605      	mov	r5, r0
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 8011f62:	2100      	movs	r1, #0
 8011f64:	4620      	mov	r0, r4
 8011f66:	f7ff ffd7 	bl	8011f18 <set_state>
      if (NET_OK != ret)
 8011f6a:	2d00      	cmp	r5, #0
 8011f6c:	d0e4      	beq.n	8011f38 <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011f6e:	f06f 0510 	mvn.w	r5, #16
  return ret;
 8011f72:	e7e1      	b.n	8011f38 <net_state_initialized+0xe>

08011f74 <net_state_starting>:

static  int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t  event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8011f74:	2907      	cmp	r1, #7
 8011f76:	d001      	beq.n	8011f7c <net_state_starting+0x8>

    default:
      break;
  }
  return ret;
}
 8011f78:	2000      	movs	r0, #0
 8011f7a:	4770      	bx	lr
{
 8011f7c:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 8011f7e:	2103      	movs	r1, #3
 8011f80:	f7ff ffca 	bl	8011f18 <set_state>
}
 8011f84:	2000      	movs	r0, #0
 8011f86:	bd08      	pop	{r3, pc}

08011f88 <net_state_ready>:

static  int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 8011f88:	b510      	push	{r4, lr}
 8011f8a:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8011f8c:	2902      	cmp	r1, #2
 8011f8e:	d003      	beq.n	8011f98 <net_state_ready+0x10>
 8011f90:	2904      	cmp	r1, #4
 8011f92:	d00e      	beq.n	8011fb2 <net_state_ready+0x2a>
 8011f94:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 8011f96:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_CONNECTING);
 8011f98:	2104      	movs	r1, #4
 8011f9a:	f7ff ffbd 	bl	8011f18 <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 8011f9e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011fa2:	699b      	ldr	r3, [r3, #24]
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	4798      	blx	r3
      if (NET_OK != ret)
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	d0f4      	beq.n	8011f96 <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011fac:	f06f 0010 	mvn.w	r0, #16
 8011fb0:	e7f1      	b.n	8011f96 <net_state_ready+0xe>
      set_state(pnetif, NET_STATE_STOPPING);
 8011fb2:	2106      	movs	r1, #6
 8011fb4:	f7ff ffb0 	bl	8011f18 <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 8011fb8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011fbc:	691b      	ldr	r3, [r3, #16]
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	4798      	blx	r3
      if (NET_OK != ret)
 8011fc2:	2800      	cmp	r0, #0
 8011fc4:	d0e7      	beq.n	8011f96 <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011fc6:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8011fca:	e7e4      	b.n	8011f96 <net_state_ready+0xe>

08011fcc <net_state_connecting>:

static  int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t  event)
{
 8011fcc:	b508      	push	{r3, lr}
  int32_t       ret = NET_OK;
  switch (event)
 8011fce:	2903      	cmp	r1, #3
 8011fd0:	d006      	beq.n	8011fe0 <net_state_connecting+0x14>
 8011fd2:	290a      	cmp	r1, #10
 8011fd4:	d102      	bne.n	8011fdc <net_state_connecting+0x10>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 8011fd6:	2105      	movs	r1, #5
 8011fd8:	f7ff ff9e 	bl	8011f18 <set_state>

    default:
      break;
  }
  return ret;
}
 8011fdc:	2000      	movs	r0, #0
 8011fde:	bd08      	pop	{r3, pc}
      set_state(pnetif, NET_STATE_READY);
 8011fe0:	2103      	movs	r1, #3
 8011fe2:	f7ff ff99 	bl	8011f18 <set_state>
      break;
 8011fe6:	e7f9      	b.n	8011fdc <net_state_connecting+0x10>

08011fe8 <net_state_connected>:

static  int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 8011fe8:	b510      	push	{r4, lr}
 8011fea:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8011fec:	2903      	cmp	r1, #3
 8011fee:	d003      	beq.n	8011ff8 <net_state_connected+0x10>
 8011ff0:	2909      	cmp	r1, #9
 8011ff2:	d00e      	beq.n	8012012 <net_state_connected+0x2a>
 8011ff4:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 8011ff6:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_DISCONNECTING);
 8011ff8:	2107      	movs	r1, #7
 8011ffa:	f7ff ff8d 	bl	8011f18 <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 8011ffe:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8012002:	69db      	ldr	r3, [r3, #28]
 8012004:	4620      	mov	r0, r4
 8012006:	4798      	blx	r3
      if (NET_OK != ret)
 8012008:	2800      	cmp	r0, #0
 801200a:	d0f4      	beq.n	8011ff6 <net_state_connected+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 801200c:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8012010:	e7f1      	b.n	8011ff6 <net_state_connected+0xe>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 8012012:	2108      	movs	r1, #8
 8012014:	f7ff ff80 	bl	8011f18 <set_state>
  int32_t       ret = NET_OK;
 8012018:	2000      	movs	r0, #0
      break;
 801201a:	e7ec      	b.n	8011ff6 <net_state_connected+0xe>

0801201c <net_state_disconnecting>:

static  int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 801201c:	2907      	cmp	r1, #7
 801201e:	d001      	beq.n	8012024 <net_state_disconnecting+0x8>

    default:
      break;
  }
  return ret;
}
 8012020:	2000      	movs	r0, #0
 8012022:	4770      	bx	lr
{
 8012024:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 8012026:	2103      	movs	r1, #3
 8012028:	f7ff ff76 	bl	8011f18 <set_state>
}
 801202c:	2000      	movs	r0, #0
 801202e:	bd08      	pop	{r3, pc}

08012030 <net_state_connection_lost>:
}

static  int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8012030:	2908      	cmp	r1, #8
 8012032:	d001      	beq.n	8012038 <net_state_connection_lost+0x8>

    default:
      break;
  }
  return ret;
}
 8012034:	2000      	movs	r0, #0
 8012036:	4770      	bx	lr
{
 8012038:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_CONNECTED);
 801203a:	2105      	movs	r1, #5
 801203c:	f7ff ff6c 	bl	8011f18 <set_state>
}
 8012040:	2000      	movs	r0, #0
 8012042:	bd08      	pop	{r3, pc}

08012044 <net_state_stopping>:
  switch (event)
 8012044:	2906      	cmp	r1, #6
 8012046:	d001      	beq.n	801204c <net_state_stopping+0x8>
}
 8012048:	2000      	movs	r0, #0
 801204a:	4770      	bx	lr
{
 801204c:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_INITIALIZED);
 801204e:	2101      	movs	r1, #1
 8012050:	f7ff ff62 	bl	8011f18 <set_state>
}
 8012054:	2000      	movs	r0, #0
 8012056:	bd08      	pop	{r3, pc}

08012058 <net_state_manage_event>:




int32_t net_state_manage_event(net_if_handle_t *pnetif_in, net_state_event_t event)
{
 8012058:	b510      	push	{r4, lr}
 801205a:	460c      	mov	r4, r1
  int32_t       ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 801205c:	f7ff ff0a 	bl	8011e74 <netif_check>
  if (pnetif == NULL)
 8012060:	b350      	cbz	r0, 80120b8 <net_state_manage_event+0x60>
  else
  {
#ifdef DEBUGSTATE
    printf("In state %s , received event %s\n", statestr[pnetif->state], eventstr[event]);
#endif /* DEBUGSTATE */
    switch (pnetif->state)
 8012062:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 8012066:	3b01      	subs	r3, #1
 8012068:	2b07      	cmp	r3, #7
 801206a:	d828      	bhi.n	80120be <net_state_manage_event+0x66>
 801206c:	e8df f003 	tbb	[pc, r3]
 8012070:	100c0804 	.word	0x100c0804
 8012074:	1c182014 	.word	0x1c182014
    {
      case  NET_STATE_INITIALIZED:
        ret = net_state_initialized(pnetif, event);
 8012078:	4621      	mov	r1, r4
 801207a:	f7ff ff56 	bl	8011f2a <net_state_initialized>
        ret = NET_ERROR_INVALID_STATE;
        break;
    }
  }
  return ret;
}
 801207e:	bd10      	pop	{r4, pc}
        ret = net_state_starting(pnetif, event);
 8012080:	4621      	mov	r1, r4
 8012082:	f7ff ff77 	bl	8011f74 <net_state_starting>
        break;
 8012086:	e7fa      	b.n	801207e <net_state_manage_event+0x26>
        ret = net_state_ready(pnetif, event);
 8012088:	4621      	mov	r1, r4
 801208a:	f7ff ff7d 	bl	8011f88 <net_state_ready>
        break;
 801208e:	e7f6      	b.n	801207e <net_state_manage_event+0x26>
        ret = net_state_connecting(pnetif, event);
 8012090:	4621      	mov	r1, r4
 8012092:	f7ff ff9b 	bl	8011fcc <net_state_connecting>
        break;
 8012096:	e7f2      	b.n	801207e <net_state_manage_event+0x26>
        ret = net_state_connected(pnetif, event);
 8012098:	4621      	mov	r1, r4
 801209a:	f7ff ffa5 	bl	8011fe8 <net_state_connected>
        break;
 801209e:	e7ee      	b.n	801207e <net_state_manage_event+0x26>
        ret = net_state_disconnecting(pnetif, event);
 80120a0:	4621      	mov	r1, r4
 80120a2:	f7ff ffbb 	bl	801201c <net_state_disconnecting>
        break;
 80120a6:	e7ea      	b.n	801207e <net_state_manage_event+0x26>
        ret = net_state_connection_lost(pnetif, event);
 80120a8:	4621      	mov	r1, r4
 80120aa:	f7ff ffc1 	bl	8012030 <net_state_connection_lost>
        break;
 80120ae:	e7e6      	b.n	801207e <net_state_manage_event+0x26>
        ret = net_state_stopping(pnetif, event);
 80120b0:	4621      	mov	r1, r4
 80120b2:	f7ff ffc7 	bl	8012044 <net_state_stopping>
        break;
 80120b6:	e7e2      	b.n	801207e <net_state_manage_event+0x26>
    ret = NET_ERROR_PARAMETER;
 80120b8:	f06f 0003 	mvn.w	r0, #3
 80120bc:	e7df      	b.n	801207e <net_state_manage_event+0x26>
    switch (pnetif->state)
 80120be:	f06f 001b 	mvn.w	r0, #27
  return ret;
 80120c2:	e7dc      	b.n	801207e <net_state_manage_event+0x26>

080120c4 <castcontext>:
{
  /*cstat -MISRAC2012-Rule-11.5 */
  return (ES_WIFIObject_t *)context;
  /*cstat +MISRAC2012-Rule-11.5 */

}
 80120c4:	4770      	bx	lr

080120c6 <cast2sockaddr_in>:
{
  /*cstat -MISRAC2012-Rule-11.3 -MISRAC2012-Rule-11.8 */
  return (sockaddr_in_t *) addr;
  /*cstat +MISRAC2012-Rule-11.3 +MISRAC2012-Rule-11.8 */

}
 80120c6:	4770      	bx	lr

080120c8 <es_wifi_socket>:
static int32_t es_wifi_socket(int32_t domain, int32_t type, int32_t protocol_in)
{
  int32_t ret = NET_OK;
  int32_t protocol = protocol_in;

  if (domain != NET_AF_INET)
 80120c8:	2802      	cmp	r0, #2
 80120ca:	d13b      	bne.n	8012144 <es_wifi_socket+0x7c>
    ret = NET_ERROR_UNSUPPORTED;
  }
  else
  {
    /* currently only SOCK_DGRAM and SOCK_STREAM are supported */
    if ((type != (int32_t) NET_SOCK_STREAM) && (type != (int32_t) NET_SOCK_DGRAM))
 80120cc:	1e4b      	subs	r3, r1, #1
 80120ce:	2b01      	cmp	r3, #1
 80120d0:	d83b      	bhi.n	801214a <es_wifi_socket+0x82>
      ret = NET_ERROR_UNSUPPORTED;
    }
    else
    {
      /* Only support PROT_IP/TCP/UDP/IPV4 are supported */
      if ((protocol != NET_IPPROTO_TCP) && (protocol != NET_IPPROTO_UDP))
 80120d2:	2a06      	cmp	r2, #6
 80120d4:	bf18      	it	ne
 80120d6:	2a11      	cmpne	r2, #17
 80120d8:	d004      	beq.n	80120e4 <es_wifi_socket+0x1c>
      {
        if (type == (int32_t) NET_SOCK_STREAM)
 80120da:	2901      	cmp	r1, #1
 80120dc:	d030      	beq.n	8012140 <es_wifi_socket+0x78>
        {
          protocol = NET_IPPROTO_TCP;
        }
        /*cstat -MISRAC2012-Rule-14.3_a */
        else if (type == (int32_t) NET_SOCK_DGRAM)
 80120de:	2902      	cmp	r1, #2
 80120e0:	d113      	bne.n	801210a <es_wifi_socket+0x42>
          /*cstat +MISRAC2012-Rule-14.3_a */
        {
          protocol = NET_IPPROTO_UDP;
 80120e2:	2211      	movs	r2, #17
 80120e4:	2000      	movs	r0, #0

  if (ret == NET_OK)
  {
    ret = NET_ERROR_INVALID_SOCKET;

    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 80120e6:	2803      	cmp	r0, #3
 80120e8:	dc32      	bgt.n	8012150 <es_wifi_socket+0x88>
{
 80120ea:	b410      	push	{r4}
    {
      if (WifiChannel[i].status == WIFI_FREE_SOCKET)
 80120ec:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80120f0:	4c19      	ldr	r4, [pc, #100]	; (8012158 <es_wifi_socket+0x90>)
 80120f2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80120f6:	785b      	ldrb	r3, [r3, #1]
 80120f8:	b153      	cbz	r3, 8012110 <es_wifi_socket+0x48>
    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 80120fa:	3001      	adds	r0, #1
 80120fc:	2803      	cmp	r0, #3
 80120fe:	ddf5      	ble.n	80120ec <es_wifi_socket+0x24>
    ret = NET_ERROR_INVALID_SOCKET;
 8012100:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return ret;
}
 8012104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012108:	4770      	bx	lr
          ret = NET_ERROR_UNSUPPORTED;
 801210a:	f06f 0002 	mvn.w	r0, #2
 801210e:	4770      	bx	lr
        WifiChannel[i].status = WIFI_ALLOCATED_SOCKET;
 8012110:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012114:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8012118:	2401      	movs	r4, #1
 801211a:	705c      	strb	r4, [r3, #1]
        if (type == (int32_t) NET_SOCK_DGRAM)
 801211c:	2902      	cmp	r1, #2
 801211e:	d007      	beq.n	8012130 <es_wifi_socket+0x68>
        WifiChannel[i].protocol        = (uint8_t) protocol;
 8012120:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012124:	4c0c      	ldr	r4, [pc, #48]	; (8012158 <es_wifi_socket+0x90>)
 8012126:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 801212a:	709a      	strb	r2, [r3, #2]
        WifiChannel[i].type            = (uint8_t) type;
 801212c:	70d9      	strb	r1, [r3, #3]
        break;
 801212e:	e7e9      	b.n	8012104 <es_wifi_socket+0x3c>
          WifiChannel[i].status |= WIFI_SEND_OK | WIFI_RECV_OK;
 8012130:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012134:	4c08      	ldr	r4, [pc, #32]	; (8012158 <es_wifi_socket+0x90>)
 8012136:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 801213a:	240d      	movs	r4, #13
 801213c:	705c      	strb	r4, [r3, #1]
 801213e:	e7ef      	b.n	8012120 <es_wifi_socket+0x58>
          protocol = NET_IPPROTO_TCP;
 8012140:	2206      	movs	r2, #6
 8012142:	e7cf      	b.n	80120e4 <es_wifi_socket+0x1c>
    ret = NET_ERROR_UNSUPPORTED;
 8012144:	f06f 0002 	mvn.w	r0, #2
 8012148:	4770      	bx	lr
      ret = NET_ERROR_UNSUPPORTED;
 801214a:	f06f 0002 	mvn.w	r0, #2
  return ret;
 801214e:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 8012150:	f06f 0005 	mvn.w	r0, #5
}
 8012154:	4770      	bx	lr
 8012156:	bf00      	nop
 8012158:	2400fe68 	.word	0x2400fe68

0801215c <es_wifi_bind>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
static int32_t es_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 801215c:	b570      	push	{r4, r5, r6, lr}
 801215e:	4604      	mov	r4, r0
  int32_t ret;
  sockaddr_in_t *source;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012160:	2803      	cmp	r0, #3
 8012162:	d826      	bhi.n	80121b2 <es_wifi_bind+0x56>
 8012164:	4608      	mov	r0, r1
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    /* STREAM sockets cannot be bound after connection. */
    if ((WifiChannel [sock].status == WIFI_ALLOCATED_SOCKET)
 8012166:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801216a:	4d18      	ldr	r5, [pc, #96]	; (80121cc <es_wifi_bind+0x70>)
 801216c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8012170:	785d      	ldrb	r5, [r3, #1]
 8012172:	2d01      	cmp	r5, #1
 8012174:	d00a      	beq.n	801218c <es_wifi_bind+0x30>
        || (((WifiChannel [sock].status & WIFI_ALLOCATED_SOCKET) != 0U)
 8012176:	f015 0f01 	tst.w	r5, #1
 801217a:	d01d      	beq.n	80121b8 <es_wifi_bind+0x5c>
            && ((uint8_t) WifiChannel [sock].type == (uint8_t) NET_SOCK_DGRAM)))
 801217c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012180:	4e12      	ldr	r6, [pc, #72]	; (80121cc <es_wifi_bind+0x70>)
 8012182:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8012186:	78db      	ldrb	r3, [r3, #3]
 8012188:	2b02      	cmp	r3, #2
 801218a:	d118      	bne.n	80121be <es_wifi_bind+0x62>
    {
      if (addrlen == sizeof(sockaddr_in_t))
 801218c:	2a10      	cmp	r2, #16
 801218e:	d119      	bne.n	80121c4 <es_wifi_bind+0x68>
      {
        source = cast2sockaddr_in(addr);
 8012190:	f7ff ff99 	bl	80120c6 <cast2sockaddr_in>
        WifiChannel [sock].localport = NET_NTOHS(source->sin_port);
 8012194:	8841      	ldrh	r1, [r0, #2]
 8012196:	ba49      	rev16	r1, r1
 8012198:	4b0c      	ldr	r3, [pc, #48]	; (80121cc <es_wifi_bind+0x70>)
 801219a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801219e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80121a2:	8091      	strh	r1, [r2, #4]
        WifiChannel [sock].localaddress = source->sin_addr.s_addr;
 80121a4:	6841      	ldr	r1, [r0, #4]
 80121a6:	6091      	str	r1, [r2, #8]
        WifiChannel [sock].status |= WIFI_BIND_SOCKET;
 80121a8:	f045 0502 	orr.w	r5, r5, #2
 80121ac:	7055      	strb	r5, [r2, #1]
        ret = NET_OK;
 80121ae:	2000      	movs	r0, #0
    {
      ret = NET_ERROR_INVALID_SOCKET;
    }
  }
  return ret;
}
 80121b0:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 80121b2:	f06f 0005 	mvn.w	r0, #5
 80121b6:	e7fb      	b.n	80121b0 <es_wifi_bind+0x54>
      ret = NET_ERROR_INVALID_SOCKET;
 80121b8:	f06f 0005 	mvn.w	r0, #5
 80121bc:	e7f8      	b.n	80121b0 <es_wifi_bind+0x54>
 80121be:	f06f 0005 	mvn.w	r0, #5
 80121c2:	e7f5      	b.n	80121b0 <es_wifi_bind+0x54>
        ret = NET_ERROR_PARAMETER;
 80121c4:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80121c8:	e7f2      	b.n	80121b0 <es_wifi_bind+0x54>
 80121ca:	bf00      	nop
 80121cc:	2400fe68 	.word	0x2400fe68

080121d0 <es_wifi_shutdown>:
  * @retval socket status
  */
static int32_t es_wifi_shutdown(int32_t sock, int32_t mode)
{
  int32_t       ret;
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80121d0:	2803      	cmp	r0, #3
 80121d2:	d82f      	bhi.n	8012234 <es_wifi_shutdown+0x64>
  {
    ret =  NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    if ((WifiChannel[sock].status &  WIFI_CONNECTED_SOCKET) != 0U)
 80121d4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80121d8:	4a19      	ldr	r2, [pc, #100]	; (8012240 <es_wifi_shutdown+0x70>)
 80121da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80121de:	785b      	ldrb	r3, [r3, #1]
 80121e0:	f013 0f10 	tst.w	r3, #16
 80121e4:	d029      	beq.n	801223a <es_wifi_shutdown+0x6a>
{
 80121e6:	b410      	push	{r4}
    {
      if (mode == NET_SHUTDOWN_R)
 80121e8:	b939      	cbnz	r1, 80121fa <es_wifi_shutdown+0x2a>
      {
        WifiChannel[sock].status &=  ~WIFI_RECV_OK;
 80121ea:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80121ee:	4c14      	ldr	r4, [pc, #80]	; (8012240 <es_wifi_shutdown+0x70>)
 80121f0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80121f4:	f023 0308 	bic.w	r3, r3, #8
 80121f8:	7053      	strb	r3, [r2, #1]
      }
      if (mode == NET_SHUTDOWN_W)
 80121fa:	2901      	cmp	r1, #1
 80121fc:	d005      	beq.n	801220a <es_wifi_shutdown+0x3a>
      {
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
      }
      if (mode == NET_SHUTDOWN_RW)
 80121fe:	2902      	cmp	r1, #2
 8012200:	d00d      	beq.n	801221e <es_wifi_shutdown+0x4e>
      {
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
      }
    }
    ret = NET_OK;
 8012202:	2000      	movs	r0, #0
  }
  return ret;
}
 8012204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012208:	4770      	bx	lr
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
 801220a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801220e:	4a0c      	ldr	r2, [pc, #48]	; (8012240 <es_wifi_shutdown+0x70>)
 8012210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012214:	785a      	ldrb	r2, [r3, #1]
 8012216:	f022 0204 	bic.w	r2, r2, #4
 801221a:	705a      	strb	r2, [r3, #1]
 801221c:	e7ef      	b.n	80121fe <es_wifi_shutdown+0x2e>
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
 801221e:	4b08      	ldr	r3, [pc, #32]	; (8012240 <es_wifi_shutdown+0x70>)
 8012220:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012224:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012228:	7853      	ldrb	r3, [r2, #1]
 801222a:	f023 030c 	bic.w	r3, r3, #12
 801222e:	7053      	strb	r3, [r2, #1]
    ret = NET_OK;
 8012230:	2000      	movs	r0, #0
 8012232:	e7e7      	b.n	8012204 <es_wifi_shutdown+0x34>
    ret =  NET_ERROR_INVALID_SOCKET;
 8012234:	f06f 0005 	mvn.w	r0, #5
 8012238:	4770      	bx	lr
    ret = NET_OK;
 801223a:	2000      	movs	r0, #0
}
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop
 8012240:	2400fe68 	.word	0x2400fe68

08012244 <conv_to_net_security>:


static uint32_t conv_to_net_security(ES_WIFI_SecurityType_t     sec)
{
  uint32_t ret;
  switch (sec)
 8012244:	2805      	cmp	r0, #5
 8012246:	d80e      	bhi.n	8012266 <conv_to_net_security+0x22>
 8012248:	e8df f000 	tbb	[pc, r0]
 801224c:	07051003 	.word	0x07051003
 8012250:	0b09      	.short	0x0b09
 8012252:	2000      	movs	r0, #0
 8012254:	4770      	bx	lr
      break;
    case ES_WIFI_SEC_WEP:
      ret = NET_WIFI_SM_WEP_PSK;
      break;
    case ES_WIFI_SEC_WPA:
      ret = NET_WIFI_SM_WPA_MIXED_PSK;
 8012256:	4806      	ldr	r0, [pc, #24]	; (8012270 <conv_to_net_security+0x2c>)
      break;
 8012258:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 801225a:	4806      	ldr	r0, [pc, #24]	; (8012274 <conv_to_net_security+0x30>)
      break;
 801225c:	4770      	bx	lr
    case ES_WIFI_SEC_WPA_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 801225e:	4805      	ldr	r0, [pc, #20]	; (8012274 <conv_to_net_security+0x30>)
      break;
 8012260:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2_TKIP:
      ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 8012262:	4805      	ldr	r0, [pc, #20]	; (8012278 <conv_to_net_security+0x34>)
      break;
 8012264:	4770      	bx	lr
    default :
      ret = NET_WIFI_SM_UNKNOWN;
 8012266:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 801226a:	4770      	bx	lr
      ret = NET_WIFI_SM_WEP_PSK;
 801226c:	2001      	movs	r0, #1

  }
  return ret;
}
 801226e:	4770      	bx	lr
 8012270:	00200006 	.word	0x00200006
 8012274:	00400006 	.word	0x00400006
 8012278:	00400002 	.word	0x00400002

0801227c <es_wifi_setsockopt>:
  bool          *optbool = (bool *)optvalue;
  /*cstat +MISRAC2012-Rule-11.8 +MISRAC2012-Rule-11.5  */

  (void) level;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 801227c:	2803      	cmp	r0, #3
 801227e:	d83e      	bhi.n	80122fe <es_wifi_setsockopt+0x82>
  {
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    switch (optname)
 8012280:	f241 0105 	movw	r1, #4101	; 0x1005
 8012284:	428a      	cmp	r2, r1
 8012286:	d013      	beq.n	80122b0 <es_wifi_setsockopt+0x34>
 8012288:	dc05      	bgt.n	8012296 <es_wifi_setsockopt+0x1a>
 801228a:	2a04      	cmp	r2, #4
 801228c:	d028      	beq.n	80122e0 <es_wifi_setsockopt+0x64>
 801228e:	2a0e      	cmp	r2, #14
 8012290:	d138      	bne.n	8012304 <es_wifi_setsockopt+0x88>
        }
        break;

      case  NET_SO_TLS_CERT_PROF:
        NET_DBG_ERROR("Ignore this option because it embedded inside Inventek Wifi module and can not be changed\n");
        ret =  NET_OK;
 8012292:	2000      	movs	r0, #0
 8012294:	4770      	bx	lr
    switch (optname)
 8012296:	f241 0106 	movw	r1, #4102	; 0x1006
 801229a:	428a      	cmp	r2, r1
 801229c:	d135      	bne.n	801230a <es_wifi_setsockopt+0x8e>
        WifiChannel[sock].recvtimeout = * optint32;
 801229e:	681a      	ldr	r2, [r3, #0]
 80122a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80122a4:	4b1e      	ldr	r3, [pc, #120]	; (8012320 <es_wifi_setsockopt+0xa4>)
 80122a6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80122aa:	6182      	str	r2, [r0, #24]
        ret = NET_OK;
 80122ac:	2000      	movs	r0, #0
        break;
 80122ae:	4770      	bx	lr
        WifiChannel[sock].sendtimeout = *optint32;
 80122b0:	6819      	ldr	r1, [r3, #0]
 80122b2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80122b6:	4a1a      	ldr	r2, [pc, #104]	; (8012320 <es_wifi_setsockopt+0xa4>)
 80122b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80122bc:	6159      	str	r1, [r3, #20]
        if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_UDP)
 80122be:	789b      	ldrb	r3, [r3, #2]
 80122c0:	2b11      	cmp	r3, #17
 80122c2:	d001      	beq.n	80122c8 <es_wifi_setsockopt+0x4c>
        ret = NET_OK;
 80122c4:	2000      	movs	r0, #0
 80122c6:	4770      	bx	lr
          if (WifiChannel[sock].sendtimeout > NET_UDP_MAX_SEND_BLOCK_TO)
 80122c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80122cc:	dd20      	ble.n	8012310 <es_wifi_setsockopt+0x94>
            WifiChannel[sock].sendtimeout = NET_UDP_MAX_SEND_BLOCK_TO;
 80122ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80122d2:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80122d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122da:	6143      	str	r3, [r0, #20]
        ret = NET_OK;
 80122dc:	2000      	movs	r0, #0
 80122de:	4770      	bx	lr
        if (sizeof(bool) != optlen)
 80122e0:	9a00      	ldr	r2, [sp, #0]
 80122e2:	2a01      	cmp	r2, #1
 80122e4:	d116      	bne.n	8012314 <es_wifi_setsockopt+0x98>
          if (*optbool == false)
 80122e6:	781b      	ldrb	r3, [r3, #0]
 80122e8:	b9bb      	cbnz	r3, 801231a <es_wifi_setsockopt+0x9e>
            WifiChannel[sock].sendtimeout = 1;
 80122ea:	4b0d      	ldr	r3, [pc, #52]	; (8012320 <es_wifi_setsockopt+0xa4>)
 80122ec:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80122f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80122f4:	2101      	movs	r1, #1
 80122f6:	6151      	str	r1, [r2, #20]
            WifiChannel[sock].recvtimeout = 1;
 80122f8:	6191      	str	r1, [r2, #24]
          ret =  NET_OK;
 80122fa:	2000      	movs	r0, #0
 80122fc:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 80122fe:	f06f 0005 	mvn.w	r0, #5
 8012302:	4770      	bx	lr
    switch (optname)
 8012304:	f06f 0003 	mvn.w	r0, #3
 8012308:	4770      	bx	lr
 801230a:	f06f 0003 	mvn.w	r0, #3
 801230e:	4770      	bx	lr
        ret = NET_OK;
 8012310:	2000      	movs	r0, #0
 8012312:	4770      	bx	lr
          ret = NET_ERROR_PARAMETER;
 8012314:	f06f 0003 	mvn.w	r0, #3
 8012318:	4770      	bx	lr
          ret =  NET_OK;
 801231a:	2000      	movs	r0, #0
      default :
        break;
    }
  }
  return ret;
}
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop
 8012320:	2400fe68 	.word	0x2400fe68

08012324 <es_wifi_getsockopt>:
  (void) optname;
  (void) optvalue;
  (void) optlen;

  return NET_ERROR_UNSUPPORTED;
}
 8012324:	f06f 0002 	mvn.w	r0, #2
 8012328:	4770      	bx	lr

0801232a <es_wifi_scan>:
{
  (void) mode;
  (void) pnetif;
  (void) ssid;
  return 0;
}
 801232a:	2000      	movs	r0, #0
 801232c:	4770      	bx	lr

0801232e <es_wifi_if_deinit>:
{
 801232e:	b538      	push	{r3, r4, r5, lr}
 8012330:	4604      	mov	r4, r0
  NET_FREE(pnetif->pdrv->extension.wifi);
 8012332:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012336:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8012338:	f011 f974 	bl	8023624 <free>
  pnetif->pdrv->extension.wifi = NULL;
 801233c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8012340:	2500      	movs	r5, #0
 8012342:	675d      	str	r5, [r3, #116]	; 0x74
  NET_FREE(pnetif->pdrv);
 8012344:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8012348:	f011 f96c 	bl	8023624 <free>
  pnetif->pdrv = NULL;
 801234c:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
 8012350:	4628      	mov	r0, r5
 8012352:	bd38      	pop	{r3, r4, r5, pc}

08012354 <es_wifi_if_init>:
{
 8012354:	b570      	push	{r4, r5, r6, lr}
 8012356:	4605      	mov	r5, r0
  net_if_drv_t *p = NET_MALLOC(sizeof(net_if_drv_t));
 8012358:	2084      	movs	r0, #132	; 0x84
 801235a:	f011 f95b 	bl	8023614 <malloc>
  if (p != NULL)
 801235e:	2800      	cmp	r0, #0
 8012360:	d04c      	beq.n	80123fc <es_wifi_if_init+0xa8>
 8012362:	4604      	mov	r4, r0
    p->if_class = NET_INTERFACE_CLASS_WIFI;
 8012364:	2300      	movs	r3, #0
 8012366:	7003      	strb	r3, [r0, #0]
    p->if_init = es_wifi_if_init;
 8012368:	4b26      	ldr	r3, [pc, #152]	; (8012404 <es_wifi_if_init+0xb0>)
 801236a:	6043      	str	r3, [r0, #4]
    p->if_deinit = es_wifi_if_deinit;
 801236c:	4b26      	ldr	r3, [pc, #152]	; (8012408 <es_wifi_if_init+0xb4>)
 801236e:	6083      	str	r3, [r0, #8]
    p->if_start = es_wifi_if_start;
 8012370:	4b26      	ldr	r3, [pc, #152]	; (801240c <es_wifi_if_init+0xb8>)
 8012372:	60c3      	str	r3, [r0, #12]
    p->if_stop = es_wifi_if_stop;
 8012374:	4b26      	ldr	r3, [pc, #152]	; (8012410 <es_wifi_if_init+0xbc>)
 8012376:	6103      	str	r3, [r0, #16]
    p->if_connect = es_wifi_if_connect;
 8012378:	4b26      	ldr	r3, [pc, #152]	; (8012414 <es_wifi_if_init+0xc0>)
 801237a:	6183      	str	r3, [r0, #24]
    p->if_disconnect = es_wifi_if_disconnect;
 801237c:	4b26      	ldr	r3, [pc, #152]	; (8012418 <es_wifi_if_init+0xc4>)
 801237e:	61c3      	str	r3, [r0, #28]
    p->psocket = es_wifi_socket;
 8012380:	4b26      	ldr	r3, [pc, #152]	; (801241c <es_wifi_if_init+0xc8>)
 8012382:	6303      	str	r3, [r0, #48]	; 0x30
    p->pbind = es_wifi_bind;
 8012384:	4b26      	ldr	r3, [pc, #152]	; (8012420 <es_wifi_if_init+0xcc>)
 8012386:	6343      	str	r3, [r0, #52]	; 0x34
    p->plisten = es_wifi_listen;
 8012388:	4b26      	ldr	r3, [pc, #152]	; (8012424 <es_wifi_if_init+0xd0>)
 801238a:	6383      	str	r3, [r0, #56]	; 0x38
    p->paccept = es_wifi_accept;
 801238c:	4b26      	ldr	r3, [pc, #152]	; (8012428 <es_wifi_if_init+0xd4>)
 801238e:	63c3      	str	r3, [r0, #60]	; 0x3c
    p->pconnect = es_wifi_connect;
 8012390:	4b26      	ldr	r3, [pc, #152]	; (801242c <es_wifi_if_init+0xd8>)
 8012392:	6403      	str	r3, [r0, #64]	; 0x40
    p->psend = es_wifi_send;
 8012394:	4b26      	ldr	r3, [pc, #152]	; (8012430 <es_wifi_if_init+0xdc>)
 8012396:	6443      	str	r3, [r0, #68]	; 0x44
    p->precv = es_wifi_recv;
 8012398:	4b26      	ldr	r3, [pc, #152]	; (8012434 <es_wifi_if_init+0xe0>)
 801239a:	6483      	str	r3, [r0, #72]	; 0x48
    p->psendto = es_wifi_sendto;
 801239c:	4b26      	ldr	r3, [pc, #152]	; (8012438 <es_wifi_if_init+0xe4>)
 801239e:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->precvfrom = es_wifi_recvfrom;
 80123a0:	4b26      	ldr	r3, [pc, #152]	; (801243c <es_wifi_if_init+0xe8>)
 80123a2:	6503      	str	r3, [r0, #80]	; 0x50
    p->psetsockopt = es_wifi_setsockopt;
 80123a4:	4b26      	ldr	r3, [pc, #152]	; (8012440 <es_wifi_if_init+0xec>)
 80123a6:	6543      	str	r3, [r0, #84]	; 0x54
    p->pgetsockopt = es_wifi_getsockopt;
 80123a8:	4b26      	ldr	r3, [pc, #152]	; (8012444 <es_wifi_if_init+0xf0>)
 80123aa:	6583      	str	r3, [r0, #88]	; 0x58
    p->pgetsockname = es_wifi_getsockname;
 80123ac:	4b26      	ldr	r3, [pc, #152]	; (8012448 <es_wifi_if_init+0xf4>)
 80123ae:	65c3      	str	r3, [r0, #92]	; 0x5c
    p->pgetpeername = es_wifi_getpeername;
 80123b0:	4b26      	ldr	r3, [pc, #152]	; (801244c <es_wifi_if_init+0xf8>)
 80123b2:	6603      	str	r3, [r0, #96]	; 0x60
    p->pclose = es_wifi_close;
 80123b4:	4b26      	ldr	r3, [pc, #152]	; (8012450 <es_wifi_if_init+0xfc>)
 80123b6:	6643      	str	r3, [r0, #100]	; 0x64
    p->pshutdown = es_wifi_shutdown;
 80123b8:	4b26      	ldr	r3, [pc, #152]	; (8012454 <es_wifi_if_init+0x100>)
 80123ba:	6683      	str	r3, [r0, #104]	; 0x68
    p->pgethostbyname = es_wifi_gethostbyname;
 80123bc:	4b26      	ldr	r3, [pc, #152]	; (8012458 <es_wifi_if_init+0x104>)
 80123be:	66c3      	str	r3, [r0, #108]	; 0x6c
    p->pping = es_wifi_ping;
 80123c0:	4b26      	ldr	r3, [pc, #152]	; (801245c <es_wifi_if_init+0x108>)
 80123c2:	6703      	str	r3, [r0, #112]	; 0x70
    pextwifi = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 80123c4:	2024      	movs	r0, #36	; 0x24
 80123c6:	f011 f925 	bl	8023614 <malloc>
    if (NULL == pextwifi)
 80123ca:	4606      	mov	r6, r0
 80123cc:	b180      	cbz	r0, 80123f0 <es_wifi_if_init+0x9c>
      (void) memset(pextwifi, 0, sizeof(net_if_wifi_class_extension_t));
 80123ce:	2224      	movs	r2, #36	; 0x24
 80123d0:	2100      	movs	r1, #0
 80123d2:	f011 f94d 	bl	8023670 <memset>
      pnetif->pdrv = p;
 80123d6:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
      p->extension.wifi = pextwifi;
 80123da:	6766      	str	r6, [r4, #116]	; 0x74
      p->extension.wifi->scan = es_wifi_scan;
 80123dc:	4b20      	ldr	r3, [pc, #128]	; (8012460 <es_wifi_if_init+0x10c>)
 80123de:	6033      	str	r3, [r6, #0]
      p->extension.wifi->get_scan_results = es_wifi_get_scan_results;
 80123e0:	4b20      	ldr	r3, [pc, #128]	; (8012464 <es_wifi_if_init+0x110>)
 80123e2:	6073      	str	r3, [r6, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 80123e4:	2106      	movs	r1, #6
 80123e6:	4628      	mov	r0, r5
 80123e8:	f7ff fe36 	bl	8012058 <net_state_manage_event>
      ret = NET_OK;
 80123ec:	2000      	movs	r0, #0
}
 80123ee:	bd70      	pop	{r4, r5, r6, pc}
      NET_FREE(p);
 80123f0:	4620      	mov	r0, r4
 80123f2:	f011 f917 	bl	8023624 <free>
      ret = NET_ERROR_NO_MEMORY;
 80123f6:	f06f 0007 	mvn.w	r0, #7
 80123fa:	e7f8      	b.n	80123ee <es_wifi_if_init+0x9a>
    ret = NET_ERROR_NO_MEMORY;
 80123fc:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8012400:	e7f5      	b.n	80123ee <es_wifi_if_init+0x9a>
 8012402:	bf00      	nop
 8012404:	08012355 	.word	0x08012355
 8012408:	0801232f 	.word	0x0801232f
 801240c:	08012e09 	.word	0x08012e09
 8012410:	08012469 	.word	0x08012469
 8012414:	08013019 	.word	0x08013019
 8012418:	08012de9 	.word	0x08012de9
 801241c:	080120c9 	.word	0x080120c9
 8012420:	0801215d 	.word	0x0801215d
 8012424:	08012d8d 	.word	0x08012d8d
 8012428:	08012d09 	.word	0x08012d09
 801242c:	0801284d 	.word	0x0801284d
 8012430:	08012c75 	.word	0x08012c75
 8012434:	08012bdd 	.word	0x08012bdd
 8012438:	08012905 	.word	0x08012905
 801243c:	08012a89 	.word	0x08012a89
 8012440:	0801227d 	.word	0x0801227d
 8012444:	08012325 	.word	0x08012325
 8012448:	08012761 	.word	0x08012761
 801244c:	080126bd 	.word	0x080126bd
 8012450:	080125c9 	.word	0x080125c9
 8012454:	080121d1 	.word	0x080121d1
 8012458:	08012579 	.word	0x08012579
 801245c:	08012541 	.word	0x08012541
 8012460:	0801232b 	.word	0x0801232b
 8012464:	08012475 	.word	0x08012475

08012468 <es_wifi_if_stop>:
{
 8012468:	b508      	push	{r3, lr}
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 801246a:	2106      	movs	r1, #6
 801246c:	f7ff fdf4 	bl	8012058 <net_state_manage_event>
}
 8012470:	2000      	movs	r0, #0
 8012472:	bd08      	pop	{r3, pc}

08012474 <es_wifi_get_scan_results>:

static  int32_t es_wifi_get_scan_results(net_if_handle_t *pnetif, net_wifi_scan_results_t *results, uint8_t number)
{
 8012474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012478:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 801247c:	4688      	mov	r8, r1
 801247e:	4614      	mov	r4, r2
  int32_t ret;
  ES_WIFI_APs_t APs;
  ES_WIFI_AP_t *AP = &APs.AP[0];

  if (ES_WIFI_STATUS_OK == ES_WIFI_ListAccessPoints(castcontext(pnetif->pdrv->context), &APs))
 8012480:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012484:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012486:	f7ff fe1d 	bl	80120c4 <castcontext>
 801248a:	a901      	add	r1, sp, #4
 801248c:	f7f5 fd46 	bl	8007f1c <ES_WIFI_ListAccessPoints>
 8012490:	2800      	cmp	r0, #0
 8012492:	d14f      	bne.n	8012534 <es_wifi_get_scan_results+0xc0>
  {
    if (APs.nbr > number)
 8012494:	f89d 3374 	ldrb.w	r3, [sp, #884]	; 0x374
 8012498:	42a3      	cmp	r3, r4
 801249a:	d901      	bls.n	80124a0 <es_wifi_get_scan_results+0x2c>
    {
      APs.nbr = number;
 801249c:	f88d 4374 	strb.w	r4, [sp, #884]	; 0x374
{
 80124a0:	2600      	movs	r6, #0
 80124a2:	ac01      	add	r4, sp, #4
 80124a4:	e03e      	b.n	8012524 <es_wifi_get_scan_results+0xb0>
    }
    for (uint32_t i = 0; i < APs.nbr ; i++)
    {
      (void) memset((void *) &results[i], 0, sizeof(net_wifi_scan_bss_t));
 80124a6:	2234      	movs	r2, #52	; 0x34
 80124a8:	fb02 f706 	mul.w	r7, r2, r6
 80124ac:	eb08 0507 	add.w	r5, r8, r7
 80124b0:	2100      	movs	r1, #0
 80124b2:	4628      	mov	r0, r5
 80124b4:	f011 f8dc 	bl	8023670 <memset>
      (void) memcpy(results[i].ssid.value, AP->SSID, NET_WIFI_MAX_SSID_SIZE);
 80124b8:	6821      	ldr	r1, [r4, #0]
 80124ba:	6860      	ldr	r0, [r4, #4]
 80124bc:	68a2      	ldr	r2, [r4, #8]
 80124be:	68e3      	ldr	r3, [r4, #12]
 80124c0:	f8c5 1001 	str.w	r1, [r5, #1]
 80124c4:	f8c5 0005 	str.w	r0, [r5, #5]
 80124c8:	f8c5 2009 	str.w	r2, [r5, #9]
 80124cc:	f8c5 300d 	str.w	r3, [r5, #13]
 80124d0:	6921      	ldr	r1, [r4, #16]
 80124d2:	6960      	ldr	r0, [r4, #20]
 80124d4:	69a2      	ldr	r2, [r4, #24]
 80124d6:	69e3      	ldr	r3, [r4, #28]
 80124d8:	f8c5 1011 	str.w	r1, [r5, #17]
 80124dc:	f8c5 0015 	str.w	r0, [r5, #21]
 80124e0:	f8c5 2019 	str.w	r2, [r5, #25]
 80124e4:	f8c5 301d 	str.w	r3, [r5, #29]
      results[i].ssid.length = (uint8_t) strlen((char_t *) AP->SSID);
 80124e8:	4620      	mov	r0, r4
 80124ea:	f7ed ff0b 	bl	8000304 <strlen>
 80124ee:	f808 0007 	strb.w	r0, [r8, r7]
      results[i].security = conv_to_net_security(AP->Security);
 80124f2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 80124f6:	f7ff fea5 	bl	8012244 <conv_to_net_security>
 80124fa:	62a8      	str	r0, [r5, #40]	; 0x28
      (void)  memcpy(&results[i].bssid, AP->MAC, NET_WIFI_MAC_ADDRESS_SIZE);
 80124fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124fe:	f8c5 3021 	str.w	r3, [r5, #33]	; 0x21
 8012502:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8012504:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
      results[i].rssi = (int8_t)AP->RSSI;
 8012508:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 801250c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      results[i].channel = AP->Channel;
 8012510:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8012514:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      (void) memcpy(results[i].country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 8012518:	4b08      	ldr	r3, [pc, #32]	; (801253c <es_wifi_get_scan_results+0xc8>)
 801251a:	6818      	ldr	r0, [r3, #0]
 801251c:	f8c5 002d 	str.w	r0, [r5, #45]	; 0x2d
      AP++;
 8012520:	342c      	adds	r4, #44	; 0x2c
    for (uint32_t i = 0; i < APs.nbr ; i++)
 8012522:	3601      	adds	r6, #1
 8012524:	f89d 0374 	ldrb.w	r0, [sp, #884]	; 0x374
 8012528:	42b0      	cmp	r0, r6
 801252a:	d8bc      	bhi.n	80124a6 <es_wifi_get_scan_results+0x32>
  else
  {
    ret = NET_ERROR_NO_CONNECTION;
  }
  return ret;
}
 801252c:	f50d 7d5e 	add.w	sp, sp, #888	; 0x378
 8012530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_NO_CONNECTION;
 8012534:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8012538:	e7f8      	b.n	801252c <es_wifi_get_scan_results+0xb8>
 801253a:	bf00      	nop
 801253c:	080269c0 	.word	0x080269c0

08012540 <es_wifi_ping>:
{
 8012540:	b530      	push	{r4, r5, lr}
 8012542:	b085      	sub	sp, #20
 8012544:	4684      	mov	ip, r0
 8012546:	4614      	mov	r4, r2
 8012548:	461d      	mov	r5, r3
  (void) memcpy(ipaddr, &addr->sa_data[2], 6);
 801254a:	6848      	ldr	r0, [r1, #4]
 801254c:	9002      	str	r0, [sp, #8]
 801254e:	890b      	ldrh	r3, [r1, #8]
 8012550:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (ES_WIFI_STATUS_OK == ES_WIFI_Ping(castcontext(pnetif->pdrv->context), ipaddr, (uint16_t) count, (uint16_t) delay,
 8012554:	f8dc 30ec 	ldr.w	r3, [ip, #236]	; 0xec
 8012558:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801255a:	f7ff fdb3 	bl	80120c4 <castcontext>
 801255e:	9b08      	ldr	r3, [sp, #32]
 8012560:	9300      	str	r3, [sp, #0]
 8012562:	b2ab      	uxth	r3, r5
 8012564:	b2a2      	uxth	r2, r4
 8012566:	a902      	add	r1, sp, #8
 8012568:	f7f5 fe82 	bl	8008270 <ES_WIFI_Ping>
 801256c:	b908      	cbnz	r0, 8012572 <es_wifi_ping+0x32>
}
 801256e:	b005      	add	sp, #20
 8012570:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_NO_CONNECTION;
 8012572:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8012576:	e7fa      	b.n	801256e <es_wifi_ping+0x2e>

08012578 <es_wifi_gethostbyname>:
  if (addr->sa_len < sizeof(sockaddr_in_t))
 8012578:	780b      	ldrb	r3, [r1, #0]
 801257a:	2b0f      	cmp	r3, #15
 801257c:	d91e      	bls.n	80125bc <es_wifi_gethostbyname+0x44>
{
 801257e:	b530      	push	{r4, r5, lr}
 8012580:	b083      	sub	sp, #12
 8012582:	460c      	mov	r4, r1
 8012584:	4615      	mov	r5, r2
    if (ES_WIFI_STATUS_OK == ES_WIFI_DNS_LookUp(castcontext(pnetif->pdrv->context), (char_t *)name, ipaddr))
 8012586:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 801258a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801258c:	f7ff fd9a 	bl	80120c4 <castcontext>
 8012590:	466a      	mov	r2, sp
 8012592:	4629      	mov	r1, r5
 8012594:	f7f5 fec8 	bl	8008328 <ES_WIFI_DNS_LookUp>
 8012598:	b998      	cbnz	r0, 80125c2 <es_wifi_gethostbyname+0x4a>
      uint8_t len = addr->sa_len;
 801259a:	7825      	ldrb	r5, [r4, #0]
      sockaddr_in_t *saddr = cast2sockaddr_in(addr);
 801259c:	4620      	mov	r0, r4
 801259e:	f7ff fd92 	bl	80120c6 <cast2sockaddr_in>
 80125a2:	4604      	mov	r4, r0
      (void)  memset(saddr, 0, len);
 80125a4:	462a      	mov	r2, r5
 80125a6:	2100      	movs	r1, #0
 80125a8:	f011 f862 	bl	8023670 <memset>
      saddr->sin_len = len;
 80125ac:	7025      	strb	r5, [r4, #0]
      saddr->sin_family = NET_AF_INET;
 80125ae:	2302      	movs	r3, #2
 80125b0:	7063      	strb	r3, [r4, #1]
      (void) memcpy(&(saddr->sin_addr), ipaddr, 4);
 80125b2:	9b00      	ldr	r3, [sp, #0]
 80125b4:	6063      	str	r3, [r4, #4]
      ret = NET_OK;
 80125b6:	2000      	movs	r0, #0
}
 80125b8:	b003      	add	sp, #12
 80125ba:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 80125bc:	f06f 0003 	mvn.w	r0, #3
}
 80125c0:	4770      	bx	lr
      ret = NET_ERROR_DNS_FAILURE;
 80125c2:	f06f 0009 	mvn.w	r0, #9
  return ret;
 80125c6:	e7f7      	b.n	80125b8 <es_wifi_gethostbyname+0x40>

080125c8 <es_wifi_close>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80125c8:	2803      	cmp	r0, #3
 80125ca:	d871      	bhi.n	80126b0 <es_wifi_close+0xe8>
{
 80125cc:	b510      	push	{r4, lr}
 80125ce:	b086      	sub	sp, #24
 80125d0:	4604      	mov	r4, r0
    if ((WifiChannel [sock].status & WIFI_STARTED_SERVER_SOCKET) != 0U)
 80125d2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80125d6:	4a38      	ldr	r2, [pc, #224]	; (80126b8 <es_wifi_close+0xf0>)
 80125d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80125dc:	785b      	ldrb	r3, [r3, #1]
 80125de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80125e2:	d042      	beq.n	801266a <es_wifi_close+0xa2>
      if (isaclone)
 80125e4:	b301      	cbz	r1, 8012628 <es_wifi_close+0x60>
        if (ES_WIFI_CloseServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 80125e6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80125ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80125ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80125f4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80125f6:	f7ff fd65 	bl	80120c4 <castcontext>
 80125fa:	4621      	mov	r1, r4
 80125fc:	f7f6 f88c 	bl	8008718 <ES_WIFI_CloseServerConnection>
 8012600:	b940      	cbnz	r0, 8012614 <es_wifi_close+0x4c>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8012602:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012606:	4b2c      	ldr	r3, [pc, #176]	; (80126b8 <es_wifi_close+0xf0>)
 8012608:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801260c:	2000      	movs	r0, #0
 801260e:	7060      	strb	r0, [r4, #1]
}
 8012610:	b006      	add	sp, #24
 8012612:	bd10      	pop	{r4, pc}
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8012614:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012618:	4b27      	ldr	r3, [pc, #156]	; (80126b8 <es_wifi_close+0xf0>)
 801261a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801261e:	2200      	movs	r2, #0
 8012620:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 8012622:	f06f 0012 	mvn.w	r0, #18
 8012626:	e7f3      	b.n	8012610 <es_wifi_close+0x48>
        if (ES_WIFI_StopServerSingleConn(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 8012628:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801262c:	4a22      	ldr	r2, [pc, #136]	; (80126b8 <es_wifi_close+0xf0>)
 801262e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012634:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012638:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801263a:	f7ff fd43 	bl	80120c4 <castcontext>
 801263e:	4621      	mov	r1, r4
 8012640:	f7f6 f88e 	bl	8008760 <ES_WIFI_StopServerSingleConn>
 8012644:	b938      	cbnz	r0, 8012656 <es_wifi_close+0x8e>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8012646:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801264a:	4b1b      	ldr	r3, [pc, #108]	; (80126b8 <es_wifi_close+0xf0>)
 801264c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012650:	2000      	movs	r0, #0
 8012652:	7060      	strb	r0, [r4, #1]
          ret = NET_OK;
 8012654:	e7dc      	b.n	8012610 <es_wifi_close+0x48>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8012656:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801265a:	4b17      	ldr	r3, [pc, #92]	; (80126b8 <es_wifi_close+0xf0>)
 801265c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012660:	2200      	movs	r2, #0
 8012662:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 8012664:	f06f 0012 	mvn.w	r0, #18
 8012668:	e7d2      	b.n	8012610 <es_wifi_close+0x48>
      conn.Number = (uint8_t) sock;
 801266a:	f88d 0006 	strb.w	r0, [sp, #6]
      if (ES_WIFI_StopClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn)
 801266e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012672:	4a11      	ldr	r2, [pc, #68]	; (80126b8 <es_wifi_close+0xf0>)
 8012674:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801267a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801267e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012680:	f7ff fd20 	bl	80120c4 <castcontext>
 8012684:	a901      	add	r1, sp, #4
 8012686:	f7f5 ff0b 	bl	80084a0 <ES_WIFI_StopClientConnection>
 801268a:	b148      	cbz	r0, 80126a0 <es_wifi_close+0xd8>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 801268c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012690:	4b09      	ldr	r3, [pc, #36]	; (80126b8 <es_wifi_close+0xf0>)
 8012692:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012696:	2300      	movs	r3, #0
 8012698:	7063      	strb	r3, [r4, #1]
        ret = NET_ERROR_SOCKET_FAILURE;
 801269a:	f06f 0012 	mvn.w	r0, #18
 801269e:	e7b7      	b.n	8012610 <es_wifi_close+0x48>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 80126a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80126a4:	4b04      	ldr	r3, [pc, #16]	; (80126b8 <es_wifi_close+0xf0>)
 80126a6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80126aa:	2000      	movs	r0, #0
 80126ac:	7060      	strb	r0, [r4, #1]
        ret = NET_OK;
 80126ae:	e7af      	b.n	8012610 <es_wifi_close+0x48>
    ret = NET_ERROR_INVALID_SOCKET;
 80126b0:	f06f 0005 	mvn.w	r0, #5
}
 80126b4:	4770      	bx	lr
 80126b6:	bf00      	nop
 80126b8:	2400fe68 	.word	0x2400fe68

080126bc <es_wifi_getpeername>:
  if (*namelen < sizeof(sockaddr_in_t))
 80126bc:	6813      	ldr	r3, [r2, #0]
 80126be:	2b0f      	cmp	r3, #15
 80126c0:	d943      	bls.n	801274a <es_wifi_getpeername+0x8e>
{
 80126c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c6:	b086      	sub	sp, #24
 80126c8:	4604      	mov	r4, r0
 80126ca:	460e      	mov	r6, r1
 80126cc:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= (int32_t) ESWIFI_MAX_CHANNEL_NBR))
 80126ce:	2803      	cmp	r0, #3
 80126d0:	d83e      	bhi.n	8012750 <es_wifi_getpeername+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_PeerInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 80126d2:	f8df 8088 	ldr.w	r8, [pc, #136]	; 801275c <es_wifi_getpeername+0xa0>
 80126d6:	0087      	lsls	r7, r0, #2
 80126d8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80126dc:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80126e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80126e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80126e8:	f7ff fcec 	bl	80120c4 <castcontext>
 80126ec:	443c      	add	r4, r7
 80126ee:	f10d 0312 	add.w	r3, sp, #18
 80126f2:	aa05      	add	r2, sp, #20
 80126f4:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 80126f8:	f7f6 fa5e 	bl	8008bb8 <ES_WIFI_PeerInfo>
 80126fc:	bb58      	cbnz	r0, 8012756 <es_wifi_getpeername+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 80126fe:	2400      	movs	r4, #0
 8012700:	9400      	str	r4, [sp, #0]
 8012702:	9401      	str	r4, [sp, #4]
 8012704:	9402      	str	r4, [sp, #8]
 8012706:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 8012708:	2302      	movs	r3, #2
 801270a:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 801270e:	9b05      	ldr	r3, [sp, #20]
 8012710:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 8012712:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012716:	ba5b      	rev16	r3, r3
 8012718:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 801271c:	2710      	movs	r7, #16
 801271e:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 8012722:	682a      	ldr	r2, [r5, #0]
 8012724:	4621      	mov	r1, r4
 8012726:	4630      	mov	r0, r6
 8012728:	f010 ffa2 	bl	8023670 <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 801272c:	f89d 2000 	ldrb.w	r2, [sp]
 8012730:	682b      	ldr	r3, [r5, #0]
 8012732:	429a      	cmp	r2, r3
 8012734:	bf28      	it	cs
 8012736:	461a      	movcs	r2, r3
 8012738:	4669      	mov	r1, sp
 801273a:	4630      	mov	r0, r6
 801273c:	f010 ff8a 	bl	8023654 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 8012740:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 8012742:	4620      	mov	r0, r4
}
 8012744:	b006      	add	sp, #24
 8012746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 801274a:	f06f 0003 	mvn.w	r0, #3
}
 801274e:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 8012750:	f06f 0005 	mvn.w	r0, #5
 8012754:	e7f6      	b.n	8012744 <es_wifi_getpeername+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 8012756:	f06f 0004 	mvn.w	r0, #4
  return ret;
 801275a:	e7f3      	b.n	8012744 <es_wifi_getpeername+0x88>
 801275c:	2400fe68 	.word	0x2400fe68

08012760 <es_wifi_getsockname>:
  if (*namelen < sizeof(sockaddr_in_t))
 8012760:	6813      	ldr	r3, [r2, #0]
 8012762:	2b0f      	cmp	r3, #15
 8012764:	d943      	bls.n	80127ee <es_wifi_getsockname+0x8e>
{
 8012766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801276a:	b086      	sub	sp, #24
 801276c:	4604      	mov	r4, r0
 801276e:	460e      	mov	r6, r1
 8012770:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012772:	2803      	cmp	r0, #3
 8012774:	d83e      	bhi.n	80127f4 <es_wifi_getsockname+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_SockInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012776:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8012800 <es_wifi_getsockname+0xa0>
 801277a:	0087      	lsls	r7, r0, #2
 801277c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012780:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8012784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012786:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801278a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801278c:	f7ff fc9a 	bl	80120c4 <castcontext>
 8012790:	443c      	add	r4, r7
 8012792:	f10d 0312 	add.w	r3, sp, #18
 8012796:	aa05      	add	r2, sp, #20
 8012798:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 801279c:	f7f6 f9d2 	bl	8008b44 <ES_WIFI_SockInfo>
 80127a0:	bb58      	cbnz	r0, 80127fa <es_wifi_getsockname+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 80127a2:	2400      	movs	r4, #0
 80127a4:	9400      	str	r4, [sp, #0]
 80127a6:	9401      	str	r4, [sp, #4]
 80127a8:	9402      	str	r4, [sp, #8]
 80127aa:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 80127ac:	2302      	movs	r3, #2
 80127ae:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 80127b2:	9b05      	ldr	r3, [sp, #20]
 80127b4:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 80127b6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80127ba:	ba5b      	rev16	r3, r3
 80127bc:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 80127c0:	2710      	movs	r7, #16
 80127c2:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 80127c6:	682a      	ldr	r2, [r5, #0]
 80127c8:	4621      	mov	r1, r4
 80127ca:	4630      	mov	r0, r6
 80127cc:	f010 ff50 	bl	8023670 <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 80127d0:	f89d 2000 	ldrb.w	r2, [sp]
 80127d4:	682b      	ldr	r3, [r5, #0]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	bf28      	it	cs
 80127da:	461a      	movcs	r2, r3
 80127dc:	4669      	mov	r1, sp
 80127de:	4630      	mov	r0, r6
 80127e0:	f010 ff38 	bl	8023654 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 80127e4:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 80127e6:	4620      	mov	r0, r4
}
 80127e8:	b006      	add	sp, #24
 80127ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 80127ee:	f06f 0003 	mvn.w	r0, #3
}
 80127f2:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 80127f4:	f06f 0005 	mvn.w	r0, #5
 80127f8:	e7f6      	b.n	80127e8 <es_wifi_getsockname+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 80127fa:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80127fe:	e7f3      	b.n	80127e8 <es_wifi_getsockname+0x88>
 8012800:	2400fe68 	.word	0x2400fe68

08012804 <check_connection_lost>:
{
 8012804:	b510      	push	{r4, lr}
 8012806:	4604      	mov	r4, r0
  if (n <= 0)
 8012808:	2900      	cmp	r1, #0
 801280a:	dd04      	ble.n	8012816 <check_connection_lost+0x12>
    if (NET_STATE_CONNECTION_LOST == pnetif->state)
 801280c:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 8012810:	2b08      	cmp	r3, #8
 8012812:	d014      	beq.n	801283e <check_connection_lost+0x3a>
}
 8012814:	bd10      	pop	{r4, pc}
    if (NET_STATE_CONNECTED == pnetif->state)
 8012816:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 801281a:	2b05      	cmp	r3, #5
 801281c:	d1fa      	bne.n	8012814 <check_connection_lost+0x10>
      if (ES_WIFI_IsConnected(castcontext(pnetif->pdrv->context)) == 0u)
 801281e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012822:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012824:	f7ff fc4e 	bl	80120c4 <castcontext>
 8012828:	f7f5 fc50 	bl	80080cc <ES_WIFI_IsConnected>
 801282c:	2800      	cmp	r0, #0
 801282e:	d1f1      	bne.n	8012814 <check_connection_lost+0x10>
        (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTION_LOST, NULL);
 8012830:	2300      	movs	r3, #0
 8012832:	2208      	movs	r2, #8
 8012834:	4619      	mov	r1, r3
 8012836:	4620      	mov	r0, r4
 8012838:	f7ff fb40 	bl	8011ebc <net_if_notify>
 801283c:	e7ea      	b.n	8012814 <check_connection_lost+0x10>
      (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTED, NULL);
 801283e:	2300      	movs	r3, #0
 8012840:	2205      	movs	r2, #5
 8012842:	4619      	mov	r1, r3
 8012844:	f7ff fb3a 	bl	8011ebc <net_if_notify>
}
 8012848:	e7e4      	b.n	8012814 <check_connection_lost+0x10>
	...

0801284c <es_wifi_connect>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 801284c:	2803      	cmp	r0, #3
 801284e:	d854      	bhi.n	80128fa <es_wifi_connect+0xae>
{
 8012850:	b510      	push	{r4, lr}
 8012852:	b086      	sub	sp, #24
 8012854:	4604      	mov	r4, r0
    if (addrlen == sizeof(sockaddr_in_t))
 8012856:	2a10      	cmp	r2, #16
 8012858:	d003      	beq.n	8012862 <es_wifi_connect+0x16>
      ret = NET_ERROR_PARAMETER;
 801285a:	f06f 0003 	mvn.w	r0, #3
}
 801285e:	b006      	add	sp, #24
 8012860:	bd10      	pop	{r4, pc}
      dest = cast2sockaddr_in(addr);
 8012862:	4608      	mov	r0, r1
 8012864:	f7ff fc2f 	bl	80120c6 <cast2sockaddr_in>
      conn.Number = (uint8_t) sock;
 8012868:	f88d 4006 	strb.w	r4, [sp, #6]
      conn.LocalPort = WifiChannel[sock].localport;
 801286c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012870:	4a23      	ldr	r2, [pc, #140]	; (8012900 <es_wifi_connect+0xb4>)
 8012872:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012876:	889a      	ldrh	r2, [r3, #4]
 8012878:	f8ad 200a 	strh.w	r2, [sp, #10]
      conn.RemotePort = NET_NTOHS(dest->sin_port);
 801287c:	8842      	ldrh	r2, [r0, #2]
 801287e:	ba52      	rev16	r2, r2
 8012880:	f8ad 2008 	strh.w	r2, [sp, #8]
      NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 8012884:	79c2      	ldrb	r2, [r0, #7]
 8012886:	f88d 200f 	strb.w	r2, [sp, #15]
 801288a:	7982      	ldrb	r2, [r0, #6]
 801288c:	f88d 200e 	strb.w	r2, [sp, #14]
 8012890:	7942      	ldrb	r2, [r0, #5]
 8012892:	f88d 200d 	strb.w	r2, [sp, #13]
 8012896:	7902      	ldrb	r2, [r0, #4]
 8012898:	f88d 200c 	strb.w	r2, [sp, #12]
      switch (WifiChannel[sock].protocol)
 801289c:	789b      	ldrb	r3, [r3, #2]
 801289e:	2b11      	cmp	r3, #17
 80128a0:	d022      	beq.n	80128e8 <es_wifi_connect+0x9c>
 80128a2:	2b24      	cmp	r3, #36	; 0x24
 80128a4:	d023      	beq.n	80128ee <es_wifi_connect+0xa2>
 80128a6:	2b06      	cmp	r3, #6
 80128a8:	d002      	beq.n	80128b0 <es_wifi_connect+0x64>
          ret = NET_ERROR_PARAMETER;
 80128aa:	f06f 0003 	mvn.w	r0, #3
 80128ae:	e7d6      	b.n	801285e <es_wifi_connect+0x12>
          conn.Type = ES_WIFI_TCP_CONNECTION;
 80128b0:	2300      	movs	r3, #0
 80128b2:	f88d 3004 	strb.w	r3, [sp, #4]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 80128b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80128ba:	4a11      	ldr	r2, [pc, #68]	; (8012900 <es_wifi_connect+0xb4>)
 80128bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80128c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80128c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80128c8:	f7ff fbfc 	bl	80120c4 <castcontext>
 80128cc:	a901      	add	r1, sp, #4
 80128ce:	f7f5 fd4f 	bl	8008370 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 80128d2:	b978      	cbnz	r0, 80128f4 <es_wifi_connect+0xa8>
          WifiChannel[sock].status |= WIFI_CONNECTED_SOCKET_RW;
 80128d4:	4b0a      	ldr	r3, [pc, #40]	; (8012900 <es_wifi_connect+0xb4>)
 80128d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80128da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80128de:	7853      	ldrb	r3, [r2, #1]
 80128e0:	f043 031c 	orr.w	r3, r3, #28
 80128e4:	7053      	strb	r3, [r2, #1]
 80128e6:	e7ba      	b.n	801285e <es_wifi_connect+0x12>
      switch (WifiChannel[sock].protocol)
 80128e8:	f06f 0002 	mvn.w	r0, #2
 80128ec:	e7b7      	b.n	801285e <es_wifi_connect+0x12>
 80128ee:	f06f 0002 	mvn.w	r0, #2
 80128f2:	e7b4      	b.n	801285e <es_wifi_connect+0x12>
          ret = NET_ERROR_SOCKET_FAILURE;
 80128f4:	f06f 0012 	mvn.w	r0, #18
 80128f8:	e7b1      	b.n	801285e <es_wifi_connect+0x12>
    ret = NET_ERROR_INVALID_SOCKET;
 80128fa:	f06f 0005 	mvn.w	r0, #5
}
 80128fe:	4770      	bx	lr
 8012900:	2400fe68 	.word	0x2400fe68

08012904 <es_wifi_sendto>:
{
 8012904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012908:	b08a      	sub	sp, #40	; 0x28
 801290a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  if ((flags != 0) || (to->sa_family != (uint8_t) NET_AF_INET))
 801290c:	2b00      	cmp	r3, #0
 801290e:	f040 80aa 	bne.w	8012a66 <es_wifi_sendto+0x162>
 8012912:	4604      	mov	r4, r0
 8012914:	460e      	mov	r6, r1
 8012916:	4615      	mov	r5, r2
 8012918:	787b      	ldrb	r3, [r7, #1]
 801291a:	2b02      	cmp	r3, #2
 801291c:	f040 80a6 	bne.w	8012a6c <es_wifi_sendto+0x168>
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012920:	2803      	cmp	r0, #3
 8012922:	f200 80a6 	bhi.w	8012a72 <es_wifi_sendto+0x16e>
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 8012926:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801292a:	4a56      	ldr	r2, [pc, #344]	; (8012a84 <es_wifi_sendto+0x180>)
 801292c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012930:	789b      	ldrb	r3, [r3, #2]
 8012932:	2b11      	cmp	r3, #17
 8012934:	f040 80a0 	bne.w	8012a78 <es_wifi_sendto+0x174>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 8012938:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801293c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012940:	785b      	ldrb	r3, [r3, #1]
 8012942:	f013 0f04 	tst.w	r3, #4
 8012946:	f000 809a 	beq.w	8012a7e <es_wifi_sendto+0x17a>
    if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 801294a:	f013 0f20 	tst.w	r3, #32
 801294e:	d102      	bne.n	8012956 <es_wifi_sendto+0x52>
      if (tolen == sizeof(sockaddr_in_t))
 8012950:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012952:	2b10      	cmp	r3, #16
 8012954:	d04d      	beq.n	80129f2 <es_wifi_sendto+0xee>
      if (len > ES_WIFI_PAYLOAD_SIZE)
 8012956:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 801295a:	dd01      	ble.n	8012960 <es_wifi_sendto+0x5c>
        len = ES_WIFI_PAYLOAD_SIZE;
 801295c:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
      sockaddr_in_t *saddr = cast2sockaddr_in(to);
 8012960:	4638      	mov	r0, r7
 8012962:	f7ff fbb0 	bl	80120c6 <cast2sockaddr_in>
      remoteaddr = NET_NTOHL(saddr->sin_addr.s_addr);
 8012966:	6843      	ldr	r3, [r0, #4]
 8012968:	0a1a      	lsrs	r2, r3, #8
 801296a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801296e:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8012972:	0219      	lsls	r1, r3, #8
 8012974:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8012978:	430a      	orrs	r2, r1
 801297a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
      uint32_t IPaddr = NET_NTOHL(remoteaddr);
 801297e:	b2db      	uxtb	r3, r3
 8012980:	0a11      	lsrs	r1, r2, #8
 8012982:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8012986:	430b      	orrs	r3, r1
 8012988:	0211      	lsls	r1, r2, #8
 801298a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 801298e:	430b      	orrs	r3, r1
 8012990:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012994:	9305      	str	r3, [sp, #20]
      uint16_t Port = NET_NTOHS(saddr->sin_port);
 8012996:	8847      	ldrh	r7, [r0, #2]
 8012998:	ba7f      	rev16	r7, r7
 801299a:	b2bf      	uxth	r7, r7
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801299c:	eb04 0884 	add.w	r8, r4, r4, lsl #2
 80129a0:	4b38      	ldr	r3, [pc, #224]	; (8012a84 <es_wifi_sendto+0x180>)
 80129a2:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80129a6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80129aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80129ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80129b0:	f7ff fb88 	bl	80120c4 <castcontext>
                                                  (uint32_t) WifiChannel[sock].sendtimeout,
 80129b4:	f8d8 3014 	ldr.w	r3, [r8, #20]
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 80129b8:	9703      	str	r7, [sp, #12]
 80129ba:	aa05      	add	r2, sp, #20
 80129bc:	9202      	str	r2, [sp, #8]
 80129be:	9301      	str	r3, [sp, #4]
 80129c0:	f10d 0312 	add.w	r3, sp, #18
 80129c4:	9300      	str	r3, [sp, #0]
 80129c6:	b2ab      	uxth	r3, r5
 80129c8:	4632      	mov	r2, r6
 80129ca:	b2e1      	uxtb	r1, r4
 80129cc:	f7f5 ff44 	bl	8008858 <ES_WIFI_SendDataTo>
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d145      	bne.n	8012a60 <es_wifi_sendto+0x15c>
        ret = (int32_t) SentDatalen;
 80129d4:	f8bd 5012 	ldrh.w	r5, [sp, #18]
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 80129d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80129dc:	4829      	ldr	r0, [pc, #164]	; (8012a84 <es_wifi_sendto+0x180>)
 80129de:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80129e2:	4629      	mov	r1, r5
 80129e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80129e6:	f7ff ff0d 	bl	8012804 <check_connection_lost>
}
 80129ea:	4628      	mov	r0, r5
 80129ec:	b00a      	add	sp, #40	; 0x28
 80129ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dest = cast2sockaddr_in(to);
 80129f2:	4638      	mov	r0, r7
 80129f4:	f7ff fb67 	bl	80120c6 <cast2sockaddr_in>
        conn.Number = (uint8_t) sock;
 80129f8:	f88d 4016 	strb.w	r4, [sp, #22]
        conn.LocalPort = WifiChannel[sock].localport;
 80129fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012a00:	4a20      	ldr	r2, [pc, #128]	; (8012a84 <es_wifi_sendto+0x180>)
 8012a02:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a06:	889a      	ldrh	r2, [r3, #4]
 8012a08:	f8ad 201a 	strh.w	r2, [sp, #26]
        conn.RemotePort = NET_NTOHS(dest->sin_port);
 8012a0c:	8842      	ldrh	r2, [r0, #2]
 8012a0e:	ba52      	rev16	r2, r2
 8012a10:	f8ad 2018 	strh.w	r2, [sp, #24]
        NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 8012a14:	79c2      	ldrb	r2, [r0, #7]
 8012a16:	f88d 201f 	strb.w	r2, [sp, #31]
 8012a1a:	7982      	ldrb	r2, [r0, #6]
 8012a1c:	f88d 201e 	strb.w	r2, [sp, #30]
 8012a20:	7942      	ldrb	r2, [r0, #5]
 8012a22:	f88d 201d 	strb.w	r2, [sp, #29]
 8012a26:	7902      	ldrb	r2, [r0, #4]
 8012a28:	f88d 201c 	strb.w	r2, [sp, #28]
        conn.Type = ES_WIFI_UDP_CONNECTION;
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	f88d 2014 	strb.w	r2, [sp, #20]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 8012a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a34:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012a38:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012a3a:	f7ff fb43 	bl	80120c4 <castcontext>
 8012a3e:	a905      	add	r1, sp, #20
 8012a40:	f7f5 fc96 	bl	8008370 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 8012a44:	b948      	cbnz	r0, 8012a5a <es_wifi_sendto+0x156>
          WifiChannel[sock].status |= WIFI_STARTED_CLIENT_SOCKET;
 8012a46:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012a4a:	4a0e      	ldr	r2, [pc, #56]	; (8012a84 <es_wifi_sendto+0x180>)
 8012a4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a50:	785a      	ldrb	r2, [r3, #1]
 8012a52:	f042 0220 	orr.w	r2, r2, #32
 8012a56:	705a      	strb	r2, [r3, #1]
    if (ret == NET_OK)
 8012a58:	e77d      	b.n	8012956 <es_wifi_sendto+0x52>
          ret = NET_ERROR_SOCKET_FAILURE;
 8012a5a:	f06f 0512 	mvn.w	r5, #18
 8012a5e:	e7c4      	b.n	80129ea <es_wifi_sendto+0xe6>
        ret = NET_ERROR_SOCKET_FAILURE;
 8012a60:	f06f 0512 	mvn.w	r5, #18
 8012a64:	e7b8      	b.n	80129d8 <es_wifi_sendto+0xd4>
    ret = NET_ERROR_UNSUPPORTED;
 8012a66:	f06f 0502 	mvn.w	r5, #2
 8012a6a:	e7be      	b.n	80129ea <es_wifi_sendto+0xe6>
 8012a6c:	f06f 0502 	mvn.w	r5, #2
 8012a70:	e7bb      	b.n	80129ea <es_wifi_sendto+0xe6>
    ret = NET_ERROR_INVALID_SOCKET;
 8012a72:	f06f 0505 	mvn.w	r5, #5
 8012a76:	e7b8      	b.n	80129ea <es_wifi_sendto+0xe6>
    ret = NET_ERROR_SOCKET_FAILURE;
 8012a78:	f06f 0512 	mvn.w	r5, #18
 8012a7c:	e7b5      	b.n	80129ea <es_wifi_sendto+0xe6>
    ret =  NET_ERROR_SOCKET_FAILURE;
 8012a7e:	f06f 0512 	mvn.w	r5, #18
  return ret;
 8012a82:	e7b2      	b.n	80129ea <es_wifi_sendto+0xe6>
 8012a84:	2400fe68 	.word	0x2400fe68

08012a88 <es_wifi_recvfrom>:
{
 8012a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a8c:	b08a      	sub	sp, #40	; 0x28
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012a8e:	2803      	cmp	r0, #3
 8012a90:	f200 8097 	bhi.w	8012bc2 <es_wifi_recvfrom+0x13a>
 8012a94:	4604      	mov	r4, r0
 8012a96:	4688      	mov	r8, r1
 8012a98:	4615      	mov	r5, r2
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 8012a9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012a9e:	4f4d      	ldr	r7, [pc, #308]	; (8012bd4 <es_wifi_recvfrom+0x14c>)
 8012aa0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8012aa4:	7882      	ldrb	r2, [r0, #2]
 8012aa6:	2a11      	cmp	r2, #17
 8012aa8:	f040 808e 	bne.w	8012bc8 <es_wifi_recvfrom+0x140>
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 8012aac:	7842      	ldrb	r2, [r0, #1]
 8012aae:	f012 0f08 	tst.w	r2, #8
 8012ab2:	f000 808c 	beq.w	8012bce <es_wifi_recvfrom+0x146>
    if (((uint8_t) flags & (uint8_t) NET_MSG_DONTWAIT) == 0U)
 8012ab6:	f013 0f08 	tst.w	r3, #8
 8012aba:	d107      	bne.n	8012acc <es_wifi_recvfrom+0x44>
      timeout = (uint32_t) WifiChannel[sock].recvtimeout;
 8012abc:	6986      	ldr	r6, [r0, #24]
    if (timeout > (uint32_t) ES_WIFI_MAX_SO_TIMEOUT)
 8012abe:	f247 5330 	movw	r3, #30000	; 0x7530
 8012ac2:	429e      	cmp	r6, r3
 8012ac4:	d903      	bls.n	8012ace <es_wifi_recvfrom+0x46>
      ret = NET_ERROR_UNSUPPORTED;
 8012ac6:	f06f 0702 	mvn.w	r7, #2
  return ret;
 8012aca:	e030      	b.n	8012b2e <es_wifi_recvfrom+0xa6>
  uint32_t timeout = 0;
 8012acc:	2600      	movs	r6, #0
      if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 8012ace:	f012 0f20 	tst.w	r2, #32
 8012ad2:	d030      	beq.n	8012b36 <es_wifi_recvfrom+0xae>
        uint32_t IPaddr = 0;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	9305      	str	r3, [sp, #20]
        uint16_t port = 0;
 8012ad8:	f8ad 3012 	strh.w	r3, [sp, #18]
        if (len > ES_WIFI_PAYLOAD_SIZE)
 8012adc:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8012ae0:	dd01      	ble.n	8012ae6 <es_wifi_recvfrom+0x5e>
          len = ES_WIFI_PAYLOAD_SIZE;
 8012ae2:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
        if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveDataFrom(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012ae6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012aea:	4a3a      	ldr	r2, [pc, #232]	; (8012bd4 <es_wifi_recvfrom+0x14c>)
 8012aec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012af2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012af6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012af8:	f7ff fae4 	bl	80120c4 <castcontext>
 8012afc:	f10d 0312 	add.w	r3, sp, #18
 8012b00:	9303      	str	r3, [sp, #12]
 8012b02:	ab05      	add	r3, sp, #20
 8012b04:	9302      	str	r3, [sp, #8]
 8012b06:	9601      	str	r6, [sp, #4]
 8012b08:	ab04      	add	r3, sp, #16
 8012b0a:	9300      	str	r3, [sp, #0]
 8012b0c:	b2ab      	uxth	r3, r5
 8012b0e:	4642      	mov	r2, r8
 8012b10:	b2e1      	uxtb	r1, r4
 8012b12:	f7f5 ff91 	bl	8008a38 <ES_WIFI_ReceiveDataFrom>
 8012b16:	b368      	cbz	r0, 8012b74 <es_wifi_recvfrom+0xec>
          ret = NET_ERROR_SOCKET_FAILURE;
 8012b18:	f06f 0712 	mvn.w	r7, #18
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 8012b1c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012b20:	482c      	ldr	r0, [pc, #176]	; (8012bd4 <es_wifi_recvfrom+0x14c>)
 8012b22:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8012b26:	4639      	mov	r1, r7
 8012b28:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012b2a:	f7ff fe6b 	bl	8012804 <check_connection_lost>
}
 8012b2e:	4638      	mov	r0, r7
 8012b30:	b00a      	add	sp, #40	; 0x28
 8012b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (void) NET_ATON((const char_t *)"224.0.0.251", &ipaddr);
 8012b36:	a905      	add	r1, sp, #20
 8012b38:	4827      	ldr	r0, [pc, #156]	; (8012bd8 <es_wifi_recvfrom+0x150>)
 8012b3a:	f7fe ff24 	bl	8011986 <net_aton>
        NET_IPADDR_PORT_TO_SOCKADDR(&saddr, &ipaddr, 5353);
 8012b3e:	2310      	movs	r3, #16
 8012b40:	f88d 3018 	strb.w	r3, [sp, #24]
 8012b44:	2202      	movs	r2, #2
 8012b46:	f88d 2019 	strb.w	r2, [sp, #25]
 8012b4a:	f64e 1214 	movw	r2, #59668	; 0xe914
 8012b4e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012b52:	9a05      	ldr	r2, [sp, #20]
 8012b54:	9207      	str	r2, [sp, #28]
 8012b56:	2100      	movs	r1, #0
 8012b58:	9108      	str	r1, [sp, #32]
 8012b5a:	9109      	str	r1, [sp, #36]	; 0x24
        ret = es_wifi_sendto(sock, NULL, 0, flags, &saddr, sizeof(sockaddr_in_t));
 8012b5c:	9301      	str	r3, [sp, #4]
 8012b5e:	ab06      	add	r3, sp, #24
 8012b60:	9300      	str	r3, [sp, #0]
 8012b62:	460b      	mov	r3, r1
 8012b64:	460a      	mov	r2, r1
 8012b66:	4620      	mov	r0, r4
 8012b68:	f7ff fecc 	bl	8012904 <es_wifi_sendto>
      if (ret == NET_OK)
 8012b6c:	4607      	mov	r7, r0
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	d1d4      	bne.n	8012b1c <es_wifi_recvfrom+0x94>
 8012b72:	e7af      	b.n	8012ad4 <es_wifi_recvfrom+0x4c>
          (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 8012b74:	2100      	movs	r1, #0
 8012b76:	9106      	str	r1, [sp, #24]
 8012b78:	9107      	str	r1, [sp, #28]
 8012b7a:	9108      	str	r1, [sp, #32]
 8012b7c:	9109      	str	r1, [sp, #36]	; 0x24
          saddr.sin_family = NET_AF_INET;
 8012b7e:	2302      	movs	r3, #2
 8012b80:	f88d 3019 	strb.w	r3, [sp, #25]
          saddr.sin_addr.s_addr = IPaddr;
 8012b84:	9b05      	ldr	r3, [sp, #20]
 8012b86:	9307      	str	r3, [sp, #28]
          saddr.sin_port = NET_HTONS(port);
 8012b88:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012b8c:	ba5b      	rev16	r3, r3
 8012b8e:	f8ad 301a 	strh.w	r3, [sp, #26]
          saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 8012b92:	2510      	movs	r5, #16
 8012b94:	f88d 5018 	strb.w	r5, [sp, #24]
          (void)  memset(from, 0, *fromlen);
 8012b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012b9e:	f010 fd67 	bl	8023670 <memset>
          (void)  memcpy(from, &saddr, MIN((*fromlen), (saddr.sin_len)));
 8012ba2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8012ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	bf28      	it	cs
 8012bae:	461a      	movcs	r2, r3
 8012bb0:	a906      	add	r1, sp, #24
 8012bb2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012bb4:	f010 fd4e 	bl	8023654 <memcpy>
          *fromlen = sizeof(sockaddr_in_t);
 8012bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012bba:	601d      	str	r5, [r3, #0]
          ret = (int32_t) ReceivedDatalen;
 8012bbc:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 8012bc0:	e7ac      	b.n	8012b1c <es_wifi_recvfrom+0x94>
    ret = NET_ERROR_INVALID_SOCKET;
 8012bc2:	f06f 0705 	mvn.w	r7, #5
 8012bc6:	e7b2      	b.n	8012b2e <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 8012bc8:	f06f 0712 	mvn.w	r7, #18
 8012bcc:	e7af      	b.n	8012b2e <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 8012bce:	f06f 0712 	mvn.w	r7, #18
 8012bd2:	e7ac      	b.n	8012b2e <es_wifi_recvfrom+0xa6>
 8012bd4:	2400fe68 	.word	0x2400fe68
 8012bd8:	080269c4 	.word	0x080269c4

08012bdc <es_wifi_recv>:
{
 8012bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bde:	b085      	sub	sp, #20
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012be0:	2803      	cmp	r0, #3
 8012be2:	d83f      	bhi.n	8012c64 <es_wifi_recv+0x88>
 8012be4:	4604      	mov	r4, r0
 8012be6:	460e      	mov	r6, r1
 8012be8:	4615      	mov	r5, r2
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 8012bea:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012bee:	4920      	ldr	r1, [pc, #128]	; (8012c70 <es_wifi_recv+0x94>)
 8012bf0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012bf4:	7852      	ldrb	r2, [r2, #1]
 8012bf6:	f012 0f08 	tst.w	r2, #8
 8012bfa:	d036      	beq.n	8012c6a <es_wifi_recv+0x8e>
    if (flags == (int32_t) NET_MSG_DONTWAIT)
 8012bfc:	2b08      	cmp	r3, #8
 8012bfe:	d02c      	beq.n	8012c5a <es_wifi_recv+0x7e>
      timeout = (uint16_t) WifiChannel[sock].recvtimeout;
 8012c00:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012c04:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8012c08:	8b1f      	ldrh	r7, [r3, #24]
    if (len > ES_WIFI_PAYLOAD_SIZE)
 8012c0a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8012c0e:	dd01      	ble.n	8012c14 <es_wifi_recv+0x38>
      len = ES_WIFI_PAYLOAD_SIZE;
 8012c10:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012c14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012c18:	4a15      	ldr	r2, [pc, #84]	; (8012c70 <es_wifi_recv+0x94>)
 8012c1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c20:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012c24:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012c26:	f7ff fa4d 	bl	80120c4 <castcontext>
 8012c2a:	9701      	str	r7, [sp, #4]
 8012c2c:	f10d 030e 	add.w	r3, sp, #14
 8012c30:	9300      	str	r3, [sp, #0]
 8012c32:	b2ab      	uxth	r3, r5
 8012c34:	4632      	mov	r2, r6
 8012c36:	b2e1      	uxtb	r1, r4
 8012c38:	f7f5 feaa 	bl	8008990 <ES_WIFI_ReceiveData>
 8012c3c:	b978      	cbnz	r0, 8012c5e <es_wifi_recv+0x82>
      ret = (int32_t) ReceivedDatalen;
 8012c3e:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 8012c42:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012c46:	480a      	ldr	r0, [pc, #40]	; (8012c70 <es_wifi_recv+0x94>)
 8012c48:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8012c4c:	4629      	mov	r1, r5
 8012c4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012c50:	f7ff fdd8 	bl	8012804 <check_connection_lost>
}
 8012c54:	4628      	mov	r0, r5
 8012c56:	b005      	add	sp, #20
 8012c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
      timeout = 0;
 8012c5a:	2700      	movs	r7, #0
 8012c5c:	e7d5      	b.n	8012c0a <es_wifi_recv+0x2e>
      ret = NET_ERROR_SOCKET_FAILURE;
 8012c5e:	f06f 0512 	mvn.w	r5, #18
 8012c62:	e7ee      	b.n	8012c42 <es_wifi_recv+0x66>
    ret = NET_ERROR_INVALID_SOCKET;
 8012c64:	f06f 0505 	mvn.w	r5, #5
 8012c68:	e7f4      	b.n	8012c54 <es_wifi_recv+0x78>
    ret = NET_ERROR_SOCKET_FAILURE;
 8012c6a:	f06f 0512 	mvn.w	r5, #18
  return ret;
 8012c6e:	e7f1      	b.n	8012c54 <es_wifi_recv+0x78>
 8012c70:	2400fe68 	.word	0x2400fe68

08012c74 <es_wifi_send>:
{
 8012c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c76:	b085      	sub	sp, #20
  if (flags != 0)
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d139      	bne.n	8012cf0 <es_wifi_send+0x7c>
 8012c7c:	4604      	mov	r4, r0
 8012c7e:	460f      	mov	r7, r1
 8012c80:	4615      	mov	r5, r2
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012c82:	2803      	cmp	r0, #3
 8012c84:	d837      	bhi.n	8012cf6 <es_wifi_send+0x82>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 8012c86:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012c8a:	4a1e      	ldr	r2, [pc, #120]	; (8012d04 <es_wifi_send+0x90>)
 8012c8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012c90:	785b      	ldrb	r3, [r3, #1]
 8012c92:	f013 0f04 	tst.w	r3, #4
 8012c96:	d031      	beq.n	8012cfc <es_wifi_send+0x88>
    if (len > ES_WIFI_PAYLOAD_SIZE)
 8012c98:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8012c9c:	dd01      	ble.n	8012ca2 <es_wifi_send+0x2e>
      len = ES_WIFI_PAYLOAD_SIZE;
 8012c9e:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012ca2:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8012ca6:	4b17      	ldr	r3, [pc, #92]	; (8012d04 <es_wifi_send+0x90>)
 8012ca8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8012cac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012cae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012cb2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012cb4:	f7ff fa06 	bl	80120c4 <castcontext>
                                              (uint32_t) WifiChannel[sock].sendtimeout))
 8012cb8:	6973      	ldr	r3, [r6, #20]
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012cba:	9301      	str	r3, [sp, #4]
 8012cbc:	f10d 030e 	add.w	r3, sp, #14
 8012cc0:	9300      	str	r3, [sp, #0]
 8012cc2:	b2ab      	uxth	r3, r5
 8012cc4:	463a      	mov	r2, r7
 8012cc6:	b2e1      	uxtb	r1, r4
 8012cc8:	f7f5 fd6c 	bl	80087a4 <ES_WIFI_SendData>
 8012ccc:	b968      	cbnz	r0, 8012cea <es_wifi_send+0x76>
      ret = (int32_t) SentDatalen;
 8012cce:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 8012cd2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012cd6:	480b      	ldr	r0, [pc, #44]	; (8012d04 <es_wifi_send+0x90>)
 8012cd8:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8012cdc:	4629      	mov	r1, r5
 8012cde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012ce0:	f7ff fd90 	bl	8012804 <check_connection_lost>
}
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	b005      	add	sp, #20
 8012ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = NET_ERROR_SOCKET_FAILURE;
 8012cea:	f06f 0512 	mvn.w	r5, #18
 8012cee:	e7f0      	b.n	8012cd2 <es_wifi_send+0x5e>
    ret = NET_ERROR_UNSUPPORTED;
 8012cf0:	f06f 0502 	mvn.w	r5, #2
 8012cf4:	e7f6      	b.n	8012ce4 <es_wifi_send+0x70>
    ret = NET_ERROR_INVALID_SOCKET;
 8012cf6:	f06f 0505 	mvn.w	r5, #5
 8012cfa:	e7f3      	b.n	8012ce4 <es_wifi_send+0x70>
    ret = NET_ERROR_SOCKET_FAILURE;
 8012cfc:	f06f 0512 	mvn.w	r5, #18
  return ret;
 8012d00:	e7f0      	b.n	8012ce4 <es_wifi_send+0x70>
 8012d02:	bf00      	nop
 8012d04:	2400fe68 	.word	0x2400fe68

08012d08 <es_wifi_accept>:
{
 8012d08:	b530      	push	{r4, r5, lr}
 8012d0a:	b087      	sub	sp, #28
 8012d0c:	4604      	mov	r4, r0
  sockaddr_in_t *addrin = cast2sockaddr_in(addr);
 8012d0e:	4608      	mov	r0, r1
 8012d10:	f7ff f9d9 	bl	80120c6 <cast2sockaddr_in>
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012d14:	2c03      	cmp	r4, #3
 8012d16:	d834      	bhi.n	8012d82 <es_wifi_accept+0x7a>
 8012d18:	4605      	mov	r5, r0
    conn.Number = (uint8_t) sock;
 8012d1a:	f88d 4006 	strb.w	r4, [sp, #6]
    status = ES_WIFI_WaitServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), 0, &conn);
 8012d1e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012d22:	4a19      	ldr	r2, [pc, #100]	; (8012d88 <es_wifi_accept+0x80>)
 8012d24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012d2e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012d30:	f7ff f9c8 	bl	80120c4 <castcontext>
 8012d34:	aa01      	add	r2, sp, #4
 8012d36:	2100      	movs	r1, #0
 8012d38:	f7f5 fc40 	bl	80085bc <ES_WIFI_WaitServerConnection>
    if (ES_WIFI_STATUS_OK == status)
 8012d3c:	b9e8      	cbnz	r0, 8012d7a <es_wifi_accept+0x72>
      addrin->sin_port = NET_NTOHS(conn.RemotePort);
 8012d3e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012d42:	ba5b      	rev16	r3, r3
 8012d44:	806b      	strh	r3, [r5, #2]
      addrin->sin_addr.s_addr = NET_ARTON(conn.RemoteIP);
 8012d46:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012d4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8012d4e:	041b      	lsls	r3, r3, #16
 8012d50:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012d54:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012d58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012d5c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012d60:	4313      	orrs	r3, r2
 8012d62:	606b      	str	r3, [r5, #4]
      WifiChannel [sock].status |= WIFI_CONNECTED_SOCKET_RW | WIFI_STARTED_SERVER_SOCKET ;
 8012d64:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8012d68:	4b07      	ldr	r3, [pc, #28]	; (8012d88 <es_wifi_accept+0x80>)
 8012d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d6e:	785a      	ldrb	r2, [r3, #1]
 8012d70:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 8012d74:	705a      	strb	r2, [r3, #1]
      ret = sock;
 8012d76:	4620      	mov	r0, r4
 8012d78:	e001      	b.n	8012d7e <es_wifi_accept+0x76>
      ret =  NET_ERROR_SOCKET_FAILURE;
 8012d7a:	f06f 0012 	mvn.w	r0, #18
}
 8012d7e:	b007      	add	sp, #28
 8012d80:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 8012d82:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8012d86:	e7fa      	b.n	8012d7e <es_wifi_accept+0x76>
 8012d88:	2400fe68 	.word	0x2400fe68

08012d8c <es_wifi_listen>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012d8c:	2803      	cmp	r0, #3
 8012d8e:	d826      	bhi.n	8012dde <es_wifi_listen+0x52>
{
 8012d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d94:	b086      	sub	sp, #24
 8012d96:	4604      	mov	r4, r0
 8012d98:	460f      	mov	r7, r1
    ES_WIFIObject_t  *pEsWifiObj = castcontext(WifiChannel[sock].pnetif->pdrv->context);
 8012d9a:	4d12      	ldr	r5, [pc, #72]	; (8012de4 <es_wifi_listen+0x58>)
 8012d9c:	eb00 0680 	add.w	r6, r0, r0, lsl #2
 8012da0:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8012da4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012da6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012daa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012dac:	f7ff f98a 	bl	80120c4 <castcontext>
    conn.Number = (uint8_t) sock;
 8012db0:	f88d 4006 	strb.w	r4, [sp, #6]
    conn.LocalPort = WifiChannel[sock].localport;
 8012db4:	88b3      	ldrh	r3, [r6, #4]
 8012db6:	f8ad 300a 	strh.w	r3, [sp, #10]
    conn.Type = ES_WIFI_UDP_CONNECTION;
 8012dba:	2301      	movs	r3, #1
 8012dbc:	f88d 3004 	strb.w	r3, [sp, #4]
    if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_TCP)
 8012dc0:	78b3      	ldrb	r3, [r6, #2]
 8012dc2:	2b06      	cmp	r3, #6
 8012dc4:	d007      	beq.n	8012dd6 <es_wifi_listen+0x4a>
    conn.Backlog = (uint8_t) backlog;
 8012dc6:	f88d 7014 	strb.w	r7, [sp, #20]
    ret = (int32_t) ES_WIFI_StartServerSingleConn(pEsWifiObj, &conn);
 8012dca:	a901      	add	r1, sp, #4
 8012dcc:	f7f5 fb8a 	bl	80084e4 <ES_WIFI_StartServerSingleConn>
}
 8012dd0:	b006      	add	sp, #24
 8012dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      conn.Type = ES_WIFI_TCP_CONNECTION;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	f88d 3004 	strb.w	r3, [sp, #4]
 8012ddc:	e7f3      	b.n	8012dc6 <es_wifi_listen+0x3a>
    ret = NET_ERROR_INVALID_SOCKET;
 8012dde:	f06f 0005 	mvn.w	r0, #5
}
 8012de2:	4770      	bx	lr
 8012de4:	2400fe68 	.word	0x2400fe68

08012de8 <es_wifi_if_disconnect>:
{
 8012de8:	b510      	push	{r4, lr}
 8012dea:	4604      	mov	r4, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 8012dec:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012df0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012df2:	f7ff f967 	bl	80120c4 <castcontext>
  (void) ES_WIFI_Disconnect(pEsWifiObj);
 8012df6:	f7f5 f983 	bl	8008100 <ES_WIFI_Disconnect>
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8012dfa:	2107      	movs	r1, #7
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	f7ff f92b 	bl	8012058 <net_state_manage_event>
}
 8012e02:	2000      	movs	r0, #0
 8012e04:	bd10      	pop	{r4, pc}
	...

08012e08 <es_wifi_if_start>:
{
 8012e08:	b570      	push	{r4, r5, r6, lr}
 8012e0a:	4604      	mov	r4, r0
  if (wifi_probe(&pnetif->pdrv->context) == NET_OK)
 8012e0c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012e10:	302c      	adds	r0, #44	; 0x2c
 8012e12:	f7ef ffa5 	bl	8002d60 <wifi_probe>
 8012e16:	2800      	cmp	r0, #0
 8012e18:	d13f      	bne.n	8012e9a <es_wifi_if_start+0x92>
 8012e1a:	4605      	mov	r5, r0
    pEsWifiObj = castcontext(pnetif->pdrv->context);
 8012e1c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8012e20:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012e22:	f7ff f94f 	bl	80120c4 <castcontext>
 8012e26:	4606      	mov	r6, r0
    if (ES_WIFI_STATUS_OK != ES_WIFI_Init(pEsWifiObj))
 8012e28:	f7f5 f836 	bl	8007e98 <ES_WIFI_Init>
 8012e2c:	bbc0      	cbnz	r0, 8012ea0 <es_wifi_if_start+0x98>
      (void)strncpy(pnetif->DeviceName, (char_t *)pEsWifiObj->Product_Name, NET_DEVICE_NAME_LEN);
 8012e2e:	2240      	movs	r2, #64	; 0x40
 8012e30:	f106 0168 	add.w	r1, r6, #104	; 0x68
 8012e34:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012e38:	f011 f925 	bl	8024086 <strncpy>
      (void) strncpy(pnetif->DeviceID, (char_t *)pEsWifiObj->Product_ID, NET_DEVICE_ID_LEN);
 8012e3c:	2240      	movs	r2, #64	; 0x40
 8012e3e:	4631      	mov	r1, r6
 8012e40:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8012e44:	f011 f91f 	bl	8024086 <strncpy>
      (void) strncpy(pnetif->DeviceVer, (char_t *)pEsWifiObj->FW_Rev, NET_DEVICE_VER_LEN);
 8012e48:	2240      	movs	r2, #64	; 0x40
 8012e4a:	f106 0120 	add.w	r1, r6, #32
 8012e4e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8012e52:	f011 f918 	bl	8024086 <strncpy>
      (void) ES_WIFI_GetMACAddress(pEsWifiObj, pnetif->macaddr.mac);
 8012e56:	f104 01e4 	add.w	r1, r4, #228	; 0xe4
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	f7f5 f9e6 	bl	800822c <ES_WIFI_GetMACAddress>
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8012e60:	462b      	mov	r3, r5
 8012e62:	e012      	b.n	8012e8a <es_wifi_if_start+0x82>
        WifiChannel[i].status          = WIFI_FREE_SOCKET;
 8012e64:	4910      	ldr	r1, [pc, #64]	; (8012ea8 <es_wifi_if_start+0xa0>)
 8012e66:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8012e6a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 8012e6e:	f04f 0c00 	mov.w	ip, #0
 8012e72:	f882 c001 	strb.w	ip, [r2, #1]
        WifiChannel[i].Number          = (uint8_t) i;
 8012e76:	f801 3030 	strb.w	r3, [r1, r0, lsl #3]
        WifiChannel[i].recvtimeout     = MIN((NET_SOCK_DEFAULT_RECEIVE_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 8012e7a:	f247 5130 	movw	r1, #30000	; 0x7530
 8012e7e:	6191      	str	r1, [r2, #24]
        WifiChannel[i].sendtimeout     = MIN((NET_SOCK_DEFAULT_SEND_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 8012e80:	6151      	str	r1, [r2, #20]
        WifiChannel[i].blocking        = 1; /* default blocking */
 8012e82:	2101      	movs	r1, #1
 8012e84:	6111      	str	r1, [r2, #16]
        WifiChannel[i].pnetif          = pnetif;
 8012e86:	6254      	str	r4, [r2, #36]	; 0x24
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8012e88:	440b      	add	r3, r1
 8012e8a:	2b03      	cmp	r3, #3
 8012e8c:	ddea      	ble.n	8012e64 <es_wifi_if_start+0x5c>
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8012e8e:	2107      	movs	r1, #7
 8012e90:	4620      	mov	r0, r4
 8012e92:	f7ff f8e1 	bl	8012058 <net_state_manage_event>
}
 8012e96:	4628      	mov	r0, r5
 8012e98:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_DEVICE_ERROR;
 8012e9a:	f06f 050c 	mvn.w	r5, #12
 8012e9e:	e7fa      	b.n	8012e96 <es_wifi_if_start+0x8e>
      ret = NET_ERROR_INTERFACE_FAILURE;
 8012ea0:	f06f 0510 	mvn.w	r5, #16
  return ret;
 8012ea4:	e7f7      	b.n	8012e96 <es_wifi_if_start+0x8e>
 8012ea6:	bf00      	nop
 8012ea8:	2400fe68 	.word	0x2400fe68

08012eac <es_wifi_driver>:
{
 8012eac:	b508      	push	{r3, lr}
  return es_wifi_if_init(pnetif);
 8012eae:	f7ff fa51 	bl	8012354 <es_wifi_if_init>
}
 8012eb2:	bd08      	pop	{r3, pc}

08012eb4 <GetESWifiSecurityType>:
  if (security == NET_WIFI_SM_OPEN)
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	b1e8      	cbz	r0, 8012ef4 <GetESWifiSecurityType+0x40>
  ES_WIFI_SecurityType_t        ret = ES_WIFI_SEC_UNKNOWN;
 8012eb8:	20ff      	movs	r0, #255	; 0xff
  if (MATCH(security, NET_WEP_ENABLED))
 8012eba:	f013 0f01 	tst.w	r3, #1
 8012ebe:	d000      	beq.n	8012ec2 <GetESWifiSecurityType+0xe>
    ret = ES_WIFI_SEC_WEP;
 8012ec0:	2001      	movs	r0, #1
  if (MATCH(security, NET_WIFI_SM_WPA_MIXED_PSK))
 8012ec2:	4a14      	ldr	r2, [pc, #80]	; (8012f14 <GetESWifiSecurityType+0x60>)
 8012ec4:	439a      	bics	r2, r3
 8012ec6:	d017      	beq.n	8012ef8 <GetESWifiSecurityType+0x44>
  if (MATCH(security, NET_WIFI_SM_WPA_TKIP_PSK))
 8012ec8:	4a13      	ldr	r2, [pc, #76]	; (8012f18 <GetESWifiSecurityType+0x64>)
 8012eca:	439a      	bics	r2, r3
 8012ecc:	d016      	beq.n	8012efc <GetESWifiSecurityType+0x48>
  if (MATCH(security, NET_WIFI_SM_WPA_AES_PSK))
 8012ece:	4a13      	ldr	r2, [pc, #76]	; (8012f1c <GetESWifiSecurityType+0x68>)
 8012ed0:	439a      	bics	r2, r3
 8012ed2:	d015      	beq.n	8012f00 <GetESWifiSecurityType+0x4c>
  if (MATCH(security, NET_WIFI_SM_WPA2_WPA_PSK))
 8012ed4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8012ed8:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8012edc:	d012      	beq.n	8012f04 <GetESWifiSecurityType+0x50>
  if (MATCH(security, NET_WIFI_SM_WPA2_TKIP_PSK))
 8012ede:	4a10      	ldr	r2, [pc, #64]	; (8012f20 <GetESWifiSecurityType+0x6c>)
 8012ee0:	439a      	bics	r2, r3
 8012ee2:	d011      	beq.n	8012f08 <GetESWifiSecurityType+0x54>
  if (MATCH(security, NET_WIFI_SM_WPA2_AES_PSK))
 8012ee4:	4a0f      	ldr	r2, [pc, #60]	; (8012f24 <GetESWifiSecurityType+0x70>)
 8012ee6:	439a      	bics	r2, r3
 8012ee8:	d010      	beq.n	8012f0c <GetESWifiSecurityType+0x58>
  if (MATCH(security, NET_WIFI_SM_WPA2_MIXED_PSK))
 8012eea:	4a0f      	ldr	r2, [pc, #60]	; (8012f28 <GetESWifiSecurityType+0x74>)
 8012eec:	ea32 0303 	bics.w	r3, r2, r3
 8012ef0:	d00e      	beq.n	8012f10 <GetESWifiSecurityType+0x5c>
}
 8012ef2:	4770      	bx	lr
    ret = ES_WIFI_SEC_OPEN;
 8012ef4:	2000      	movs	r0, #0
 8012ef6:	e7e0      	b.n	8012eba <GetESWifiSecurityType+0x6>
    ret = ES_WIFI_SEC_WPA;
 8012ef8:	2002      	movs	r0, #2
 8012efa:	e7e5      	b.n	8012ec8 <GetESWifiSecurityType+0x14>
    ret = ES_WIFI_SEC_WPA;
 8012efc:	2002      	movs	r0, #2
 8012efe:	e7e6      	b.n	8012ece <GetESWifiSecurityType+0x1a>
    ret = ES_WIFI_SEC_WPA;
 8012f00:	2002      	movs	r0, #2
 8012f02:	e7e7      	b.n	8012ed4 <GetESWifiSecurityType+0x20>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8012f04:	2004      	movs	r0, #4
 8012f06:	e7ea      	b.n	8012ede <GetESWifiSecurityType+0x2a>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8012f08:	2004      	movs	r0, #4
 8012f0a:	e7eb      	b.n	8012ee4 <GetESWifiSecurityType+0x30>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8012f0c:	2004      	movs	r0, #4
 8012f0e:	e7ec      	b.n	8012eea <GetESWifiSecurityType+0x36>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8012f10:	2004      	movs	r0, #4
 8012f12:	e7ee      	b.n	8012ef2 <GetESWifiSecurityType+0x3e>
 8012f14:	00200006 	.word	0x00200006
 8012f18:	00200002 	.word	0x00200002
 8012f1c:	00200004 	.word	0x00200004
 8012f20:	00400002 	.word	0x00400002
 8012f24:	00400004 	.word	0x00400004
 8012f28:	00400006 	.word	0x00400006

08012f2c <es_wifi_if_connect_sta>:
{
 8012f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f2e:	b083      	sub	sp, #12
 8012f30:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 8012f32:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
 8012f36:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8012f38:	f7ff f8c4 	bl	80120c4 <castcontext>
 8012f3c:	4604      	mov	r4, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 8012f3e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8012f40:	695b      	ldr	r3, [r3, #20]
  ret = ES_WIFI_Connect(pEsWifiObj, credentials->ssid, credentials->psk,
 8012f42:	681e      	ldr	r6, [r3, #0]
 8012f44:	685f      	ldr	r7, [r3, #4]
 8012f46:	6898      	ldr	r0, [r3, #8]
 8012f48:	f7ff ffb4 	bl	8012eb4 <GetESWifiSecurityType>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	463a      	mov	r2, r7
 8012f50:	4631      	mov	r1, r6
 8012f52:	4620      	mov	r0, r4
 8012f54:	f7f5 f870 	bl	8008038 <ES_WIFI_Connect>
  if (ret == ES_WIFI_STATUS_OK)
 8012f58:	4606      	mov	r6, r0
 8012f5a:	b138      	cbz	r0, 8012f6c <es_wifi_if_connect_sta+0x40>
  if (ES_WIFI_STATUS_OK == ret)
 8012f5c:	b91e      	cbnz	r6, 8012f66 <es_wifi_if_connect_sta+0x3a>
    if (pEsWifiObj->NetSettings.IsConnected != 0U)
 8012f5e:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 8012f62:	b943      	cbnz	r3, 8012f76 <es_wifi_if_connect_sta+0x4a>
      ret = ES_WIFI_STATUS_ERROR;
 8012f64:	2602      	movs	r6, #2
}
 8012f66:	4630      	mov	r0, r6
 8012f68:	b003      	add	sp, #12
 8012f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = ES_WIFI_GetNetworkSettings(pEsWifiObj);
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f7f5 f8d7 	bl	8008120 <ES_WIFI_GetNetworkSettings>
 8012f72:	4606      	mov	r6, r0
 8012f74:	e7f2      	b.n	8012f5c <es_wifi_if_connect_sta+0x30>
      (void) memcpy(addr, pEsWifiObj->NetSettings.IP_Addr, 4);
 8012f76:	f8d4 20d5 	ldr.w	r2, [r4, #213]	; 0xd5
 8012f7a:	9201      	str	r2, [sp, #4]
      pnetif->ipaddr.addr = NET_ARTON(addr);
 8012f7c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8012f80:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
 8012f84:	430b      	orrs	r3, r1
 8012f86:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8012f8a:	430b      	orrs	r3, r1
 8012f8c:	b2d2      	uxtb	r2, r2
 8012f8e:	4313      	orrs	r3, r2
 8012f90:	606b      	str	r3, [r5, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8012f92:	210a      	movs	r1, #10
 8012f94:	4628      	mov	r0, r5
 8012f96:	f7ff f85f 	bl	8012058 <net_state_manage_event>
      ret = ES_WIFI_STATUS_OK;
 8012f9a:	e7e4      	b.n	8012f66 <es_wifi_if_connect_sta+0x3a>

08012f9c <es_wifi_if_connect_ap>:
{
 8012f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f9e:	b093      	sub	sp, #76	; 0x4c
 8012fa0:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 8012fa2:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
 8012fa6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012fa8:	f7ff f88c 	bl	80120c4 <castcontext>
 8012fac:	4606      	mov	r6, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 8012fae:	6f64      	ldr	r4, [r4, #116]	; 0x74
 8012fb0:	6967      	ldr	r7, [r4, #20]
  (void) strncpy((char_t *) ApConfig.SSID, credentials->ssid, sizeof(ApConfig.SSID));
 8012fb2:	2221      	movs	r2, #33	; 0x21
 8012fb4:	6839      	ldr	r1, [r7, #0]
 8012fb6:	4668      	mov	r0, sp
 8012fb8:	f011 f865 	bl	8024086 <strncpy>
  (void) strncpy((char_t *) ApConfig.Pass, credentials->psk, sizeof(ApConfig.SSID));
 8012fbc:	2221      	movs	r2, #33	; 0x21
 8012fbe:	6879      	ldr	r1, [r7, #4]
 8012fc0:	eb0d 0002 	add.w	r0, sp, r2
 8012fc4:	f011 f85f 	bl	8024086 <strncpy>
  ApConfig.Security = GetESWifiSecurityType(credentials->security_mode);
 8012fc8:	68b8      	ldr	r0, [r7, #8]
 8012fca:	f7ff ff73 	bl	8012eb4 <GetESWifiSecurityType>
 8012fce:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
  ApConfig.Channel = pnetif->pdrv->extension.wifi->access_channel;
 8012fd2:	7e63      	ldrb	r3, [r4, #25]
 8012fd4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  ApConfig.MaxConnections = pnetif->pdrv->extension.wifi->max_connections;
 8012fd8:	7ea3      	ldrb	r3, [r4, #26]
 8012fda:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (pnetif->pdrv->extension.wifi->AP_hidden)
 8012fde:	7ee3      	ldrb	r3, [r4, #27]
 8012fe0:	b15b      	cbz	r3, 8012ffa <es_wifi_if_connect_ap+0x5e>
    ApConfig.Hidden = 1;
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  ret = ES_WIFI_ActivateAP(pEsWifiObj, &ApConfig);
 8012fe8:	4669      	mov	r1, sp
 8012fea:	4630      	mov	r0, r6
 8012fec:	f7f5 f8b2 	bl	8008154 <ES_WIFI_ActivateAP>
  if (ret == ES_WIFI_STATUS_OK)
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	b130      	cbz	r0, 8013002 <es_wifi_if_connect_ap+0x66>
}
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	b013      	add	sp, #76	; 0x4c
 8012ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ApConfig.Hidden = 0;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8013000:	e7f2      	b.n	8012fe8 <es_wifi_if_connect_ap+0x4c>
    (void) NET_ATON("192.168.10.1", &(pnetif->ipaddr));
 8013002:	1d29      	adds	r1, r5, #4
 8013004:	4803      	ldr	r0, [pc, #12]	; (8013014 <es_wifi_if_connect_ap+0x78>)
 8013006:	f7fe fcbe 	bl	8011986 <net_aton>
    (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 801300a:	210a      	movs	r1, #10
 801300c:	4628      	mov	r0, r5
 801300e:	f7ff f823 	bl	8012058 <net_state_manage_event>
    ret = ES_WIFI_STATUS_OK;
 8013012:	e7ef      	b.n	8012ff4 <es_wifi_if_connect_ap+0x58>
 8013014:	080269d0 	.word	0x080269d0

08013018 <es_wifi_if_connect>:
{
 8013018:	b508      	push	{r3, lr}
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 801301a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 801301e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013020:	7e1b      	ldrb	r3, [r3, #24]
 8013022:	b913      	cbnz	r3, 801302a <es_wifi_if_connect+0x12>
    ret =  es_wifi_if_connect_sta(pnetif);
 8013024:	f7ff ff82 	bl	8012f2c <es_wifi_if_connect_sta>
}
 8013028:	bd08      	pop	{r3, pc}
    ret =  es_wifi_if_connect_ap(pnetif);
 801302a:	f7ff ffb7 	bl	8012f9c <es_wifi_if_connect_ap>
  return ret;
 801302e:	e7fb      	b.n	8013028 <es_wifi_if_connect+0x10>

08013030 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013030:	8880      	ldrh	r0, [r0, #4]
 8013032:	4770      	bx	lr

08013034 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013034:	b570      	push	{r4, r5, r6, lr}
 8013036:	6803      	ldr	r3, [r0, #0]
 8013038:	460c      	mov	r4, r1
 801303a:	2100      	movs	r1, #0
 801303c:	4605      	mov	r5, r0
 801303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013040:	4798      	blx	r3
 8013042:	4606      	mov	r6, r0
 8013044:	682b      	ldr	r3, [r5, #0]
 8013046:	4628      	mov	r0, r5
 8013048:	1ba4      	subs	r4, r4, r6
 801304a:	6a1b      	ldr	r3, [r3, #32]
 801304c:	b2a4      	uxth	r4, r4
 801304e:	4798      	blx	r3
 8013050:	fbb4 f0f0 	udiv	r0, r4, r0
 8013054:	bd70      	pop	{r4, r5, r6, pc}

08013056 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013056:	2300      	movs	r3, #0
 8013058:	8083      	strh	r3, [r0, #4]
 801305a:	4770      	bx	lr

0801305c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801305c:	b510      	push	{r4, lr}
 801305e:	6803      	ldr	r3, [r0, #0]
 8013060:	4604      	mov	r4, r0
 8013062:	8881      	ldrh	r1, [r0, #4]
 8013064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013066:	4798      	blx	r3
 8013068:	88a3      	ldrh	r3, [r4, #4]
 801306a:	3301      	adds	r3, #1
 801306c:	80a3      	strh	r3, [r4, #4]
 801306e:	bd10      	pop	{r4, pc}

08013070 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013070:	6803      	ldr	r3, [r0, #0]
 8013072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013074:	4718      	bx	r3

08013076 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013076:	4770      	bx	lr

08013078 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013078:	4a02      	ldr	r2, [pc, #8]	; (8013084 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801307a:	6002      	str	r2, [r0, #0]
 801307c:	2200      	movs	r2, #0
 801307e:	8082      	strh	r2, [r0, #4]
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	080269e8 	.word	0x080269e8

08013088 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013088:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801308a:	2000      	movs	r0, #0
 801308c:	b12b      	cbz	r3, 801309a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801308e:	b920      	cbnz	r0, 801309a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013090:	1a5a      	subs	r2, r3, r1
 8013092:	699b      	ldr	r3, [r3, #24]
 8013094:	4250      	negs	r0, r2
 8013096:	4150      	adcs	r0, r2
 8013098:	e7f8      	b.n	801308c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801309a:	4770      	bx	lr

0801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801309c:	2300      	movs	r3, #0
 801309e:	6148      	str	r0, [r1, #20]
 80130a0:	618b      	str	r3, [r1, #24]
 80130a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80130a4:	b913      	cbnz	r3, 80130ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80130a6:	6281      	str	r1, [r0, #40]	; 0x28
 80130a8:	4770      	bx	lr
 80130aa:	4613      	mov	r3, r2
 80130ac:	699a      	ldr	r2, [r3, #24]
 80130ae:	2a00      	cmp	r2, #0
 80130b0:	d1fb      	bne.n	80130aa <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80130b2:	6199      	str	r1, [r3, #24]
 80130b4:	4770      	bx	lr

080130b6 <_ZN8touchgfx9Container9removeAllEv>:
 80130b6:	2200      	movs	r2, #0
 80130b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80130ba:	b123      	cbz	r3, 80130c6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80130bc:	6999      	ldr	r1, [r3, #24]
 80130be:	6281      	str	r1, [r0, #40]	; 0x28
 80130c0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80130c4:	e7f8      	b.n	80130b8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80130c6:	4770      	bx	lr

080130c8 <_ZN8touchgfx9Container6unlinkEv>:
 80130c8:	2300      	movs	r3, #0
 80130ca:	6283      	str	r3, [r0, #40]	; 0x28
 80130cc:	4770      	bx	lr

080130ce <_ZNK8touchgfx9Container12getSolidRectEv>:
 80130ce:	2200      	movs	r2, #0
 80130d0:	8002      	strh	r2, [r0, #0]
 80130d2:	8042      	strh	r2, [r0, #2]
 80130d4:	8082      	strh	r2, [r0, #4]
 80130d6:	80c2      	strh	r2, [r0, #6]
 80130d8:	4770      	bx	lr

080130da <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80130da:	b570      	push	{r4, r5, r6, lr}
 80130dc:	460d      	mov	r5, r1
 80130de:	4616      	mov	r6, r2
 80130e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80130e2:	b13c      	cbz	r4, 80130f4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80130e4:	6823      	ldr	r3, [r4, #0]
 80130e6:	4620      	mov	r0, r4
 80130e8:	4632      	mov	r2, r6
 80130ea:	4629      	mov	r1, r5
 80130ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130ee:	4798      	blx	r3
 80130f0:	69a4      	ldr	r4, [r4, #24]
 80130f2:	e7f6      	b.n	80130e2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80130f4:	bd70      	pop	{r4, r5, r6, pc}

080130f6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80130f6:	b538      	push	{r3, r4, r5, lr}
 80130f8:	460d      	mov	r5, r1
 80130fa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80130fc:	b134      	cbz	r4, 801310c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80130fe:	682b      	ldr	r3, [r5, #0]
 8013100:	4621      	mov	r1, r4
 8013102:	4628      	mov	r0, r5
 8013104:	689b      	ldr	r3, [r3, #8]
 8013106:	4798      	blx	r3
 8013108:	69a4      	ldr	r4, [r4, #24]
 801310a:	e7f7      	b.n	80130fc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801310c:	bd38      	pop	{r3, r4, r5, pc}

0801310e <_ZNK8touchgfx9Container17invalidateContentEv>:
 801310e:	b510      	push	{r4, lr}
 8013110:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013112:	b12c      	cbz	r4, 8013120 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8013114:	6823      	ldr	r3, [r4, #0]
 8013116:	4620      	mov	r0, r4
 8013118:	699b      	ldr	r3, [r3, #24]
 801311a:	4798      	blx	r3
 801311c:	69a4      	ldr	r4, [r4, #24]
 801311e:	e7f8      	b.n	8013112 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8013120:	bd10      	pop	{r4, pc}

08013122 <_ZN8touchgfx9ContainerD1Ev>:
 8013122:	4770      	bx	lr

08013124 <_ZN8touchgfx9ContainerD0Ev>:
 8013124:	b510      	push	{r4, lr}
 8013126:	4604      	mov	r4, r0
 8013128:	212c      	movs	r1, #44	; 0x2c
 801312a:	f010 f8dc 	bl	80232e6 <_ZdlPvj>
 801312e:	4620      	mov	r0, r4
 8013130:	bd10      	pop	{r4, pc}

08013132 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013132:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013134:	b19b      	cbz	r3, 801315e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013136:	428b      	cmp	r3, r1
 8013138:	d109      	bne.n	801314e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801313a:	699a      	ldr	r2, [r3, #24]
 801313c:	2100      	movs	r1, #0
 801313e:	6159      	str	r1, [r3, #20]
 8013140:	6282      	str	r2, [r0, #40]	; 0x28
 8013142:	b902      	cbnz	r2, 8013146 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013144:	4770      	bx	lr
 8013146:	6199      	str	r1, [r3, #24]
 8013148:	4770      	bx	lr
 801314a:	4613      	mov	r3, r2
 801314c:	b13a      	cbz	r2, 801315e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801314e:	699a      	ldr	r2, [r3, #24]
 8013150:	428a      	cmp	r2, r1
 8013152:	d1fa      	bne.n	801314a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013154:	698a      	ldr	r2, [r1, #24]
 8013156:	619a      	str	r2, [r3, #24]
 8013158:	2300      	movs	r3, #0
 801315a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801315e:	4770      	bx	lr

08013160 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013160:	b410      	push	{r4}
 8013162:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013164:	4604      	mov	r4, r0
 8013166:	b92b      	cbnz	r3, 8013174 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013168:	6803      	ldr	r3, [r0, #0]
 801316a:	4611      	mov	r1, r2
 801316c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013172:	4718      	bx	r3
 8013174:	b941      	cbnz	r1, 8013188 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013176:	6193      	str	r3, [r2, #24]
 8013178:	6282      	str	r2, [r0, #40]	; 0x28
 801317a:	6154      	str	r4, [r2, #20]
 801317c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013180:	4770      	bx	lr
 8013182:	4603      	mov	r3, r0
 8013184:	2800      	cmp	r0, #0
 8013186:	d0f9      	beq.n	801317c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013188:	4299      	cmp	r1, r3
 801318a:	6998      	ldr	r0, [r3, #24]
 801318c:	d1f9      	bne.n	8013182 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801318e:	6190      	str	r0, [r2, #24]
 8013190:	618a      	str	r2, [r1, #24]
 8013192:	e7f2      	b.n	801317a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08013194 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013198:	461f      	mov	r7, r3
 801319a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801319e:	460d      	mov	r5, r1
 80131a0:	4616      	mov	r6, r2
 80131a2:	b103      	cbz	r3, 80131a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80131a4:	6038      	str	r0, [r7, #0]
 80131a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80131a8:	b314      	cbz	r4, 80131f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80131aa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80131ae:	b1eb      	cbz	r3, 80131ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80131b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80131b4:	428d      	cmp	r5, r1
 80131b6:	db19      	blt.n	80131ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80131b8:	b289      	uxth	r1, r1
 80131ba:	8923      	ldrh	r3, [r4, #8]
 80131bc:	440b      	add	r3, r1
 80131be:	b21b      	sxth	r3, r3
 80131c0:	429d      	cmp	r5, r3
 80131c2:	da13      	bge.n	80131ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80131c4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80131c8:	4296      	cmp	r6, r2
 80131ca:	db0f      	blt.n	80131ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80131cc:	b292      	uxth	r2, r2
 80131ce:	8963      	ldrh	r3, [r4, #10]
 80131d0:	4413      	add	r3, r2
 80131d2:	b21b      	sxth	r3, r3
 80131d4:	429e      	cmp	r6, r3
 80131d6:	da09      	bge.n	80131ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80131d8:	6823      	ldr	r3, [r4, #0]
 80131da:	1ab2      	subs	r2, r6, r2
 80131dc:	1a69      	subs	r1, r5, r1
 80131de:	4620      	mov	r0, r4
 80131e0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80131e4:	b212      	sxth	r2, r2
 80131e6:	463b      	mov	r3, r7
 80131e8:	b209      	sxth	r1, r1
 80131ea:	47c0      	blx	r8
 80131ec:	69a4      	ldr	r4, [r4, #24]
 80131ee:	e7db      	b.n	80131a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80131f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080131f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80131f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131f8:	4c6d      	ldr	r4, [pc, #436]	; (80133b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80131fa:	b0a1      	sub	sp, #132	; 0x84
 80131fc:	4606      	mov	r6, r0
 80131fe:	6824      	ldr	r4, [r4, #0]
 8013200:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013202:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8013206:	2400      	movs	r4, #0
 8013208:	9303      	str	r3, [sp, #12]
 801320a:	802c      	strh	r4, [r5, #0]
 801320c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801320e:	802c      	strh	r4, [r5, #0]
 8013210:	601c      	str	r4, [r3, #0]
 8013212:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013216:	f7ff ffbd 	bl	8013194 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801321a:	f1b9 0f03 	cmp.w	r9, #3
 801321e:	f340 80c1 	ble.w	80133a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8013222:	4631      	mov	r1, r6
 8013224:	a80c      	add	r0, sp, #48	; 0x30
 8013226:	f005 ff4d 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801322a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801322e:	9306      	str	r3, [sp, #24]
 8013230:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013234:	9307      	str	r3, [sp, #28]
 8013236:	9b03      	ldr	r3, [sp, #12]
 8013238:	f8d3 a000 	ldr.w	sl, [r3]
 801323c:	f1ba 0f00 	cmp.w	sl, #0
 8013240:	f000 80b3 	beq.w	80133aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8013244:	4651      	mov	r1, sl
 8013246:	a810      	add	r0, sp, #64	; 0x40
 8013248:	f005 ff3c 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801324c:	2002      	movs	r0, #2
 801324e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8013252:	9b01      	ldr	r3, [sp, #4]
 8013254:	9a06      	ldr	r2, [sp, #24]
 8013256:	fb91 f1f0 	sdiv	r1, r1, r0
 801325a:	189d      	adds	r5, r3, r2
 801325c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8013260:	9a07      	ldr	r2, [sp, #28]
 8013262:	4419      	add	r1, r3
 8013264:	9b02      	ldr	r3, [sp, #8]
 8013266:	4413      	add	r3, r2
 8013268:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801326c:	1a6d      	subs	r5, r5, r1
 801326e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8013272:	fb92 f2f0 	sdiv	r2, r2, r0
 8013276:	440a      	add	r2, r1
 8013278:	1a9b      	subs	r3, r3, r2
 801327a:	435b      	muls	r3, r3
 801327c:	fb05 3505 	mla	r5, r5, r5, r3
 8013280:	4f4c      	ldr	r7, [pc, #304]	; (80133b4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8013282:	ac10      	add	r4, sp, #64	; 0x40
 8013284:	f1b9 0f0c 	cmp.w	r9, #12
 8013288:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801328a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801328c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801328e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013290:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013294:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801329c:	f04f 0303 	mov.w	r3, #3
 80132a0:	bfd8      	it	le
 80132a2:	f109 32ff 	addle.w	r2, r9, #4294967295
 80132a6:	f04f 0400 	mov.w	r4, #0
 80132aa:	f8cd 9000 	str.w	r9, [sp]
 80132ae:	bfcc      	ite	gt
 80132b0:	4698      	movgt	r8, r3
 80132b2:	fb92 f8f3 	sdivle	r8, r2, r3
 80132b6:	1c63      	adds	r3, r4, #1
 80132b8:	aa10      	add	r2, sp, #64	; 0x40
 80132ba:	f004 0401 	and.w	r4, r4, #1
 80132be:	f04f 0b00 	mov.w	fp, #0
 80132c2:	9308      	str	r3, [sp, #32]
 80132c4:	9b00      	ldr	r3, [sp, #0]
 80132c6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80132ca:	fb93 f3f8 	sdiv	r3, r3, r8
 80132ce:	3404      	adds	r4, #4
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	9304      	str	r3, [sp, #16]
 80132d4:	9a04      	ldr	r2, [sp, #16]
 80132d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80132da:	fb13 f302 	smulbb	r3, r3, r2
 80132de:	9a01      	ldr	r2, [sp, #4]
 80132e0:	b29b      	uxth	r3, r3
 80132e2:	1899      	adds	r1, r3, r2
 80132e4:	9305      	str	r3, [sp, #20]
 80132e6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80132ea:	b209      	sxth	r1, r1
 80132ec:	4299      	cmp	r1, r3
 80132ee:	db4d      	blt.n	801338c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80132f0:	8932      	ldrh	r2, [r6, #8]
 80132f2:	4413      	add	r3, r2
 80132f4:	b21b      	sxth	r3, r3
 80132f6:	4299      	cmp	r1, r3
 80132f8:	da48      	bge.n	801338c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80132fa:	9b04      	ldr	r3, [sp, #16]
 80132fc:	6827      	ldr	r7, [r4, #0]
 80132fe:	fb17 f703 	smulbb	r7, r7, r3
 8013302:	9b02      	ldr	r3, [sp, #8]
 8013304:	b2bf      	uxth	r7, r7
 8013306:	18fa      	adds	r2, r7, r3
 8013308:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801330c:	b212      	sxth	r2, r2
 801330e:	429a      	cmp	r2, r3
 8013310:	db3c      	blt.n	801338c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013312:	8970      	ldrh	r0, [r6, #10]
 8013314:	4403      	add	r3, r0
 8013316:	b21b      	sxth	r3, r3
 8013318:	429a      	cmp	r2, r3
 801331a:	da37      	bge.n	801338c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801331c:	2300      	movs	r3, #0
 801331e:	4630      	mov	r0, r6
 8013320:	930b      	str	r3, [sp, #44]	; 0x2c
 8013322:	ab0b      	add	r3, sp, #44	; 0x2c
 8013324:	f7ff ff36 	bl	8013194 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801332a:	b37a      	cbz	r2, 801338c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801332c:	4552      	cmp	r2, sl
 801332e:	d02d      	beq.n	801338c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013330:	4611      	mov	r1, r2
 8013332:	a80e      	add	r0, sp, #56	; 0x38
 8013334:	9209      	str	r2, [sp, #36]	; 0x24
 8013336:	f005 fec5 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801333a:	f04f 0e02 	mov.w	lr, #2
 801333e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8013342:	9a06      	ldr	r2, [sp, #24]
 8013344:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8013348:	9b01      	ldr	r3, [sp, #4]
 801334a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801334e:	4413      	add	r3, r2
 8013350:	9a07      	ldr	r2, [sp, #28]
 8013352:	fb91 f1fe 	sdiv	r1, r1, lr
 8013356:	fb9c fcfe 	sdiv	ip, ip, lr
 801335a:	4401      	add	r1, r0
 801335c:	1a58      	subs	r0, r3, r1
 801335e:	9b02      	ldr	r3, [sp, #8]
 8013360:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8013364:	4413      	add	r3, r2
 8013366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013368:	448c      	add	ip, r1
 801336a:	eba3 030c 	sub.w	r3, r3, ip
 801336e:	435b      	muls	r3, r3
 8013370:	fb00 3300 	mla	r3, r0, r0, r3
 8013374:	42ab      	cmp	r3, r5
 8013376:	d208      	bcs.n	801338a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8013378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801337a:	461d      	mov	r5, r3
 801337c:	9803      	ldr	r0, [sp, #12]
 801337e:	6001      	str	r1, [r0, #0]
 8013380:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8013382:	9805      	ldr	r0, [sp, #20]
 8013384:	8008      	strh	r0, [r1, #0]
 8013386:	992b      	ldr	r1, [sp, #172]	; 0xac
 8013388:	800f      	strh	r7, [r1, #0]
 801338a:	4692      	mov	sl, r2
 801338c:	f10b 0b01 	add.w	fp, fp, #1
 8013390:	3408      	adds	r4, #8
 8013392:	f1bb 0f04 	cmp.w	fp, #4
 8013396:	d19d      	bne.n	80132d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8013398:	9b00      	ldr	r3, [sp, #0]
 801339a:	9c08      	ldr	r4, [sp, #32]
 801339c:	444b      	add	r3, r9
 801339e:	4544      	cmp	r4, r8
 80133a0:	9300      	str	r3, [sp, #0]
 80133a2:	d188      	bne.n	80132b6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80133a4:	b021      	add	sp, #132	; 0x84
 80133a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133aa:	f04f 35ff 	mov.w	r5, #4294967295
 80133ae:	e767      	b.n	8013280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80133b0:	2400ff14 	.word	0x2400ff14
 80133b4:	08024a1c 	.word	0x08024a1c

080133b8 <_ZN8touchgfx4RectaNERKS0_>:
 80133b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133bc:	f9b1 7000 	ldrsh.w	r7, [r1]
 80133c0:	888c      	ldrh	r4, [r1, #4]
 80133c2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80133c6:	443c      	add	r4, r7
 80133c8:	b2a4      	uxth	r4, r4
 80133ca:	fa0f f884 	sxth.w	r8, r4
 80133ce:	45c1      	cmp	r9, r8
 80133d0:	da2f      	bge.n	8013432 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80133d2:	8882      	ldrh	r2, [r0, #4]
 80133d4:	444a      	add	r2, r9
 80133d6:	b292      	uxth	r2, r2
 80133d8:	fa0f fe82 	sxth.w	lr, r2
 80133dc:	4577      	cmp	r7, lr
 80133de:	da28      	bge.n	8013432 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80133e0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80133e4:	88cb      	ldrh	r3, [r1, #6]
 80133e6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80133ea:	442b      	add	r3, r5
 80133ec:	b21b      	sxth	r3, r3
 80133ee:	429e      	cmp	r6, r3
 80133f0:	da1f      	bge.n	8013432 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80133f2:	88c3      	ldrh	r3, [r0, #6]
 80133f4:	4433      	add	r3, r6
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	fa0f fc83 	sxth.w	ip, r3
 80133fc:	4565      	cmp	r5, ip
 80133fe:	da18      	bge.n	8013432 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013400:	454f      	cmp	r7, r9
 8013402:	bfb8      	it	lt
 8013404:	464f      	movlt	r7, r9
 8013406:	42b5      	cmp	r5, r6
 8013408:	bfb8      	it	lt
 801340a:	4635      	movlt	r5, r6
 801340c:	45f0      	cmp	r8, lr
 801340e:	bfd8      	it	le
 8013410:	4622      	movle	r2, r4
 8013412:	1bd2      	subs	r2, r2, r7
 8013414:	8082      	strh	r2, [r0, #4]
 8013416:	884a      	ldrh	r2, [r1, #2]
 8013418:	88c9      	ldrh	r1, [r1, #6]
 801341a:	8007      	strh	r7, [r0, #0]
 801341c:	440a      	add	r2, r1
 801341e:	8045      	strh	r5, [r0, #2]
 8013420:	b292      	uxth	r2, r2
 8013422:	b211      	sxth	r1, r2
 8013424:	458c      	cmp	ip, r1
 8013426:	bfa8      	it	ge
 8013428:	4613      	movge	r3, r2
 801342a:	1b5b      	subs	r3, r3, r5
 801342c:	80c3      	strh	r3, [r0, #6]
 801342e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013432:	2300      	movs	r3, #0
 8013434:	8003      	strh	r3, [r0, #0]
 8013436:	8043      	strh	r3, [r0, #2]
 8013438:	8083      	strh	r3, [r0, #4]
 801343a:	80c3      	strh	r3, [r0, #6]
 801343c:	e7f7      	b.n	801342e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801343e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801343e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013442:	2b00      	cmp	r3, #0
 8013444:	dd06      	ble.n	8013454 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8013446:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801344a:	2800      	cmp	r0, #0
 801344c:	bfcc      	ite	gt
 801344e:	2000      	movgt	r0, #0
 8013450:	2001      	movle	r0, #1
 8013452:	4770      	bx	lr
 8013454:	2001      	movs	r0, #1
 8013456:	4770      	bx	lr

08013458 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8013458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801345c:	2300      	movs	r3, #0
 801345e:	4604      	mov	r4, r0
 8013460:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013462:	8003      	strh	r3, [r0, #0]
 8013464:	8043      	strh	r3, [r0, #2]
 8013466:	8083      	strh	r3, [r0, #4]
 8013468:	80c3      	strh	r3, [r0, #6]
 801346a:	2d00      	cmp	r5, #0
 801346c:	d040      	beq.n	80134f0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801346e:	1d28      	adds	r0, r5, #4
 8013470:	f7ff ffe5 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013474:	b988      	cbnz	r0, 801349a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013476:	4620      	mov	r0, r4
 8013478:	f7ff ffe1 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 801347c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013480:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013484:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013488:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801348c:	b138      	cbz	r0, 801349e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801348e:	8022      	strh	r2, [r4, #0]
 8013490:	8063      	strh	r3, [r4, #2]
 8013492:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013496:	f8a4 c006 	strh.w	ip, [r4, #6]
 801349a:	69ad      	ldr	r5, [r5, #24]
 801349c:	e7e5      	b.n	801346a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801349e:	f9b4 0000 	ldrsh.w	r0, [r4]
 80134a2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80134a6:	4290      	cmp	r0, r2
 80134a8:	4607      	mov	r7, r0
 80134aa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80134ae:	460e      	mov	r6, r1
 80134b0:	bfa8      	it	ge
 80134b2:	4617      	movge	r7, r2
 80134b4:	4299      	cmp	r1, r3
 80134b6:	4472      	add	r2, lr
 80134b8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80134bc:	bfa8      	it	ge
 80134be:	461e      	movge	r6, r3
 80134c0:	4440      	add	r0, r8
 80134c2:	4471      	add	r1, lr
 80134c4:	4463      	add	r3, ip
 80134c6:	b200      	sxth	r0, r0
 80134c8:	8027      	strh	r7, [r4, #0]
 80134ca:	b212      	sxth	r2, r2
 80134cc:	8066      	strh	r6, [r4, #2]
 80134ce:	b209      	sxth	r1, r1
 80134d0:	b21b      	sxth	r3, r3
 80134d2:	4290      	cmp	r0, r2
 80134d4:	bfac      	ite	ge
 80134d6:	ebc7 0200 	rsbge	r2, r7, r0
 80134da:	ebc7 0202 	rsblt	r2, r7, r2
 80134de:	4299      	cmp	r1, r3
 80134e0:	bfac      	ite	ge
 80134e2:	ebc6 0301 	rsbge	r3, r6, r1
 80134e6:	ebc6 0303 	rsblt	r3, r6, r3
 80134ea:	80a2      	strh	r2, [r4, #4]
 80134ec:	80e3      	strh	r3, [r4, #6]
 80134ee:	e7d4      	b.n	801349a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80134f0:	4620      	mov	r0, r4
 80134f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134f6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80134f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80134fa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80134fe:	b383      	cbz	r3, 8013562 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013500:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013502:	b374      	cbz	r4, 8013562 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013504:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013508:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801350c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013510:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013514:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013518:	b303      	cbz	r3, 801355c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801351a:	4668      	mov	r0, sp
 801351c:	1d21      	adds	r1, r4, #4
 801351e:	f8ad 5000 	strh.w	r5, [sp]
 8013522:	f8ad 6002 	strh.w	r6, [sp, #2]
 8013526:	f8ad 7004 	strh.w	r7, [sp, #4]
 801352a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801352e:	f7ff ff43 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 8013532:	4668      	mov	r0, sp
 8013534:	f7ff ff83 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013538:	b980      	cbnz	r0, 801355c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801353a:	f8bd 3000 	ldrh.w	r3, [sp]
 801353e:	4669      	mov	r1, sp
 8013540:	88a2      	ldrh	r2, [r4, #4]
 8013542:	4620      	mov	r0, r4
 8013544:	1a9b      	subs	r3, r3, r2
 8013546:	88e2      	ldrh	r2, [r4, #6]
 8013548:	f8ad 3000 	strh.w	r3, [sp]
 801354c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013550:	1a9b      	subs	r3, r3, r2
 8013552:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013556:	6823      	ldr	r3, [r4, #0]
 8013558:	689b      	ldr	r3, [r3, #8]
 801355a:	4798      	blx	r3
 801355c:	69a4      	ldr	r4, [r4, #24]
 801355e:	2c00      	cmp	r4, #0
 8013560:	d1d8      	bne.n	8013514 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8013562:	b002      	add	sp, #8
 8013564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013568 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013568:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801356a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801356e:	460d      	mov	r5, r1
 8013570:	4616      	mov	r6, r2
 8013572:	b323      	cbz	r3, 80135be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013574:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013576:	b314      	cbz	r4, 80135be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013578:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801357c:	b1eb      	cbz	r3, 80135ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801357e:	6828      	ldr	r0, [r5, #0]
 8013580:	466b      	mov	r3, sp
 8013582:	6869      	ldr	r1, [r5, #4]
 8013584:	c303      	stmia	r3!, {r0, r1}
 8013586:	4668      	mov	r0, sp
 8013588:	1d21      	adds	r1, r4, #4
 801358a:	f7ff ff15 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 801358e:	4668      	mov	r0, sp
 8013590:	f7ff ff55 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013594:	b988      	cbnz	r0, 80135ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013596:	f8bd 3000 	ldrh.w	r3, [sp]
 801359a:	4669      	mov	r1, sp
 801359c:	88a2      	ldrh	r2, [r4, #4]
 801359e:	4620      	mov	r0, r4
 80135a0:	1a9b      	subs	r3, r3, r2
 80135a2:	88e2      	ldrh	r2, [r4, #6]
 80135a4:	f8ad 3000 	strh.w	r3, [sp]
 80135a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80135ac:	1a9b      	subs	r3, r3, r2
 80135ae:	4632      	mov	r2, r6
 80135b0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80135b4:	6823      	ldr	r3, [r4, #0]
 80135b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80135b8:	4798      	blx	r3
 80135ba:	69a4      	ldr	r4, [r4, #24]
 80135bc:	e7db      	b.n	8013576 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80135be:	b002      	add	sp, #8
 80135c0:	bd70      	pop	{r4, r5, r6, pc}

080135c2 <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 80135c2:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80135c6:	4770      	bx	lr

080135c8 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 80135c8:	b538      	push	{r3, r4, r5, lr}
 80135ca:	7882      	ldrb	r2, [r0, #2]
 80135cc:	4604      	mov	r4, r0
 80135ce:	460d      	mov	r5, r1
 80135d0:	6843      	ldr	r3, [r0, #4]
 80135d2:	b98a      	cbnz	r2, 80135f8 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 80135d4:	4299      	cmp	r1, r3
 80135d6:	d101      	bne.n	80135dc <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 80135d8:	2301      	movs	r3, #1
 80135da:	7083      	strb	r3, [r0, #2]
 80135dc:	6863      	ldr	r3, [r4, #4]
 80135de:	42ab      	cmp	r3, r5
 80135e0:	d009      	beq.n	80135f6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 80135e2:	7a23      	ldrb	r3, [r4, #8]
 80135e4:	2b01      	cmp	r3, #1
 80135e6:	d11b      	bne.n	8013620 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 80135e8:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80135ec:	f9b4 2000 	ldrsh.w	r2, [r4]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	bfb8      	it	lt
 80135f4:	8023      	strhlt	r3, [r4, #0]
 80135f6:	bd38      	pop	{r3, r4, r5, pc}
 80135f8:	7a02      	ldrb	r2, [r0, #8]
 80135fa:	2a01      	cmp	r2, #1
 80135fc:	d108      	bne.n	8013610 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 80135fe:	895b      	ldrh	r3, [r3, #10]
 8013600:	88c9      	ldrh	r1, [r1, #6]
 8013602:	1ac9      	subs	r1, r1, r3
 8013604:	682b      	ldr	r3, [r5, #0]
 8013606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013608:	b209      	sxth	r1, r1
 801360a:	4628      	mov	r0, r5
 801360c:	4798      	blx	r3
 801360e:	e7e5      	b.n	80135dc <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8013610:	2a02      	cmp	r2, #2
 8013612:	d1e3      	bne.n	80135dc <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8013614:	891b      	ldrh	r3, [r3, #8]
 8013616:	8889      	ldrh	r1, [r1, #4]
 8013618:	1ac9      	subs	r1, r1, r3
 801361a:	682b      	ldr	r3, [r5, #0]
 801361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801361e:	e7f3      	b.n	8013608 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 8013620:	2b02      	cmp	r3, #2
 8013622:	d1e8      	bne.n	80135f6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8013624:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8013628:	e7e0      	b.n	80135ec <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

0801362a <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 801362a:	4770      	bx	lr

0801362c <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 801362c:	4770      	bx	lr

0801362e <_ZN8touchgfx10ListLayoutD1Ev>:
 801362e:	4770      	bx	lr

08013630 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 8013630:	b430      	push	{r4, r5}
 8013632:	68c5      	ldr	r5, [r0, #12]
 8013634:	4603      	mov	r3, r0
 8013636:	6844      	ldr	r4, [r0, #4]
 8013638:	106a      	asrs	r2, r5, #1
 801363a:	07ed      	lsls	r5, r5, #31
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	eb04 0002 	add.w	r0, r4, r2
 8013642:	bf48      	it	mi
 8013644:	58a2      	ldrmi	r2, [r4, r2]
 8013646:	bc30      	pop	{r4, r5}
 8013648:	bf48      	it	mi
 801364a:	58d3      	ldrmi	r3, [r2, r3]
 801364c:	4718      	bx	r3

0801364e <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 801364e:	6843      	ldr	r3, [r0, #4]
 8013650:	b12b      	cbz	r3, 801365e <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 8013652:	6883      	ldr	r3, [r0, #8]
 8013654:	b92b      	cbnz	r3, 8013662 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 8013656:	68c0      	ldr	r0, [r0, #12]
 8013658:	f000 0001 	and.w	r0, r0, #1
 801365c:	4770      	bx	lr
 801365e:	4618      	mov	r0, r3
 8013660:	4770      	bx	lr
 8013662:	2001      	movs	r0, #1
 8013664:	4770      	bx	lr

08013666 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 8013666:	b430      	push	{r4, r5}
 8013668:	68c5      	ldr	r5, [r0, #12]
 801366a:	4603      	mov	r3, r0
 801366c:	6844      	ldr	r4, [r0, #4]
 801366e:	106a      	asrs	r2, r5, #1
 8013670:	07ed      	lsls	r5, r5, #31
 8013672:	689b      	ldr	r3, [r3, #8]
 8013674:	eb04 0002 	add.w	r0, r4, r2
 8013678:	bf48      	it	mi
 801367a:	58a2      	ldrmi	r2, [r4, r2]
 801367c:	bc30      	pop	{r4, r5}
 801367e:	bf48      	it	mi
 8013680:	58d3      	ldrmi	r3, [r2, r3]
 8013682:	4718      	bx	r3

08013684 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 8013684:	6843      	ldr	r3, [r0, #4]
 8013686:	b12b      	cbz	r3, 8013694 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 8013688:	6883      	ldr	r3, [r0, #8]
 801368a:	b92b      	cbnz	r3, 8013698 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 801368c:	68c0      	ldr	r0, [r0, #12]
 801368e:	f000 0001 	and.w	r0, r0, #1
 8013692:	4770      	bx	lr
 8013694:	4618      	mov	r0, r3
 8013696:	4770      	bx	lr
 8013698:	2001      	movs	r0, #1
 801369a:	4770      	bx	lr

0801369c <_ZN8touchgfx10ListLayoutD0Ev>:
 801369c:	b510      	push	{r4, lr}
 801369e:	4604      	mov	r4, r0
 80136a0:	2130      	movs	r1, #48	; 0x30
 80136a2:	f00f fe20 	bl	80232e6 <_ZdlPvj>
 80136a6:	4620      	mov	r0, r4
 80136a8:	bd10      	pop	{r4, pc}

080136aa <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 80136aa:	b510      	push	{r4, lr}
 80136ac:	4604      	mov	r4, r0
 80136ae:	2110      	movs	r1, #16
 80136b0:	f00f fe19 	bl	80232e6 <_ZdlPvj>
 80136b4:	4620      	mov	r0, r4
 80136b6:	bd10      	pop	{r4, pc}

080136b8 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 80136b8:	b510      	push	{r4, lr}
 80136ba:	4604      	mov	r4, r0
 80136bc:	2110      	movs	r1, #16
 80136be:	f00f fe12 	bl	80232e6 <_ZdlPvj>
 80136c2:	4620      	mov	r0, r4
 80136c4:	bd10      	pop	{r4, pc}

080136c6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 80136c6:	4603      	mov	r3, r0
 80136c8:	4608      	mov	r0, r1
 80136ca:	789a      	ldrb	r2, [r3, #2]
 80136cc:	b992      	cbnz	r2, 80136f4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 80136ce:	685a      	ldr	r2, [r3, #4]
 80136d0:	428a      	cmp	r2, r1
 80136d2:	d102      	bne.n	80136da <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 80136d4:	2201      	movs	r2, #1
 80136d6:	709a      	strb	r2, [r3, #2]
 80136d8:	4770      	bx	lr
 80136da:	7a1a      	ldrb	r2, [r3, #8]
 80136dc:	2a01      	cmp	r2, #1
 80136de:	d104      	bne.n	80136ea <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 80136e0:	88ca      	ldrh	r2, [r1, #6]
 80136e2:	8949      	ldrh	r1, [r1, #10]
 80136e4:	440a      	add	r2, r1
 80136e6:	801a      	strh	r2, [r3, #0]
 80136e8:	4770      	bx	lr
 80136ea:	2a02      	cmp	r2, #2
 80136ec:	d116      	bne.n	801371c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 80136ee:	888a      	ldrh	r2, [r1, #4]
 80136f0:	8909      	ldrh	r1, [r1, #8]
 80136f2:	e7f7      	b.n	80136e4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 80136f4:	7a1a      	ldrb	r2, [r3, #8]
 80136f6:	2a01      	cmp	r2, #1
 80136f8:	d107      	bne.n	801370a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	8959      	ldrh	r1, [r3, #10]
 80136fe:	88c3      	ldrh	r3, [r0, #6]
 8013700:	4419      	add	r1, r3
 8013702:	6803      	ldr	r3, [r0, #0]
 8013704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013706:	b209      	sxth	r1, r1
 8013708:	4718      	bx	r3
 801370a:	2a02      	cmp	r2, #2
 801370c:	d106      	bne.n	801371c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	8919      	ldrh	r1, [r3, #8]
 8013712:	8883      	ldrh	r3, [r0, #4]
 8013714:	4419      	add	r1, r3
 8013716:	6803      	ldr	r3, [r0, #0]
 8013718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801371a:	e7f4      	b.n	8013706 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 801371c:	4770      	bx	lr

0801371e <_ZN8touchgfx8Drawable5setXYEss>:
 801371e:	b570      	push	{r4, r5, r6, lr}
 8013720:	6803      	ldr	r3, [r0, #0]
 8013722:	4604      	mov	r4, r0
 8013724:	4615      	mov	r5, r2
 8013726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013728:	4798      	blx	r3
 801372a:	6823      	ldr	r3, [r4, #0]
 801372c:	4629      	mov	r1, r5
 801372e:	4620      	mov	r0, r4
 8013730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013736:	4718      	bx	r3

08013738 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8013738:	b570      	push	{r4, r5, r6, lr}
 801373a:	6803      	ldr	r3, [r0, #0]
 801373c:	4604      	mov	r4, r0
 801373e:	4615      	mov	r5, r2
 8013740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013742:	4798      	blx	r3
 8013744:	6823      	ldr	r3, [r4, #0]
 8013746:	4629      	mov	r1, r5
 8013748:	4620      	mov	r0, r4
 801374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801374c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013750:	4718      	bx	r3

08013752 <_ZN8touchgfx10ListLayout9removeAllEv>:
 8013752:	2200      	movs	r2, #0
 8013754:	b510      	push	{r4, lr}
 8013756:	4604      	mov	r4, r0
 8013758:	85c2      	strh	r2, [r0, #46]	; 0x2e
 801375a:	4611      	mov	r1, r2
 801375c:	f7ff ffec 	bl	8013738 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013760:	4620      	mov	r0, r4
 8013762:	f7ff fca8 	bl	80130b6 <_ZN8touchgfx9Container9removeAllEv>
 8013766:	6960      	ldr	r0, [r4, #20]
 8013768:	b120      	cbz	r0, 8013774 <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 801376a:	6803      	ldr	r3, [r0, #0]
 801376c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013772:	4718      	bx	r3
 8013774:	bd10      	pop	{r4, pc}
	...

08013778 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 8013778:	b530      	push	{r4, r5, lr}
 801377a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801377e:	b085      	sub	sp, #20
 8013780:	4604      	mov	r4, r0
 8013782:	428b      	cmp	r3, r1
 8013784:	d017      	beq.n	80137b6 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8013786:	2500      	movs	r5, #0
 8013788:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 801378c:	85c5      	strh	r5, [r0, #46]	; 0x2e
 801378e:	462a      	mov	r2, r5
 8013790:	4629      	mov	r1, r5
 8013792:	f7ff ffd1 	bl	8013738 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013796:	4b09      	ldr	r3, [pc, #36]	; (80137bc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 8013798:	4620      	mov	r0, r4
 801379a:	4669      	mov	r1, sp
 801379c:	e9cd 3400 	strd	r3, r4, [sp]
 80137a0:	4b07      	ldr	r3, [pc, #28]	; (80137c0 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 80137a2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80137a6:	6823      	ldr	r3, [r4, #0]
 80137a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137aa:	4798      	blx	r3
 80137ac:	6960      	ldr	r0, [r4, #20]
 80137ae:	b110      	cbz	r0, 80137b6 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 80137b0:	6803      	ldr	r3, [r0, #0]
 80137b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137b4:	4798      	blx	r3
 80137b6:	b005      	add	sp, #20
 80137b8:	bd30      	pop	{r4, r5, pc}
 80137ba:	bf00      	nop
 80137bc:	08026aac 	.word	0x08026aac
 80137c0:	08013829 	.word	0x08013829

080137c4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 80137c4:	b538      	push	{r3, r4, r5, lr}
 80137c6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80137ca:	460d      	mov	r5, r1
 80137cc:	4604      	mov	r4, r0
 80137ce:	4611      	mov	r1, r2
 80137d0:	2b01      	cmp	r3, #1
 80137d2:	d002      	beq.n	80137da <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 80137d4:	2b02      	cmp	r3, #2
 80137d6:	d015      	beq.n	8013804 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 80137d8:	bd38      	pop	{r3, r4, r5, pc}
 80137da:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80137de:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	bfb8      	it	lt
 80137e6:	8103      	strhlt	r3, [r0, #8]
 80137e8:	8943      	ldrh	r3, [r0, #10]
 80137ea:	896a      	ldrh	r2, [r5, #10]
 80137ec:	4413      	add	r3, r2
 80137ee:	460a      	mov	r2, r1
 80137f0:	2100      	movs	r1, #0
 80137f2:	8143      	strh	r3, [r0, #10]
 80137f4:	4628      	mov	r0, r5
 80137f6:	f7ff ff92 	bl	801371e <_ZN8touchgfx8Drawable5setXYEss>
 80137fa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80137fc:	896a      	ldrh	r2, [r5, #10]
 80137fe:	4413      	add	r3, r2
 8013800:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8013802:	e7e9      	b.n	80137d8 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8013804:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8013808:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801380c:	429a      	cmp	r2, r3
 801380e:	bfb8      	it	lt
 8013810:	8143      	strhlt	r3, [r0, #10]
 8013812:	8903      	ldrh	r3, [r0, #8]
 8013814:	892a      	ldrh	r2, [r5, #8]
 8013816:	4413      	add	r3, r2
 8013818:	2200      	movs	r2, #0
 801381a:	8103      	strh	r3, [r0, #8]
 801381c:	4628      	mov	r0, r5
 801381e:	f7ff ff7e 	bl	801371e <_ZN8touchgfx8Drawable5setXYEss>
 8013822:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8013824:	892a      	ldrh	r2, [r5, #8]
 8013826:	e7ea      	b.n	80137fe <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

08013828 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 8013828:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 801382c:	f7ff bfca 	b.w	80137c4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08013830 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8013830:	b570      	push	{r4, r5, r6, lr}
 8013832:	4604      	mov	r4, r0
 8013834:	460d      	mov	r5, r1
 8013836:	f7ff fff7 	bl	8013828 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 801383a:	4620      	mov	r0, r4
 801383c:	4629      	mov	r1, r5
 801383e:	f7ff fc2d 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013842:	6960      	ldr	r0, [r4, #20]
 8013844:	b120      	cbz	r0, 8013850 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 8013846:	6803      	ldr	r3, [r0, #0]
 8013848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801384e:	4718      	bx	r3
 8013850:	bd70      	pop	{r4, r5, r6, pc}
	...

08013854 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8013854:	b530      	push	{r4, r5, lr}
 8013856:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013858:	b089      	sub	sp, #36	; 0x24
 801385a:	4604      	mov	r4, r0
 801385c:	4615      	mov	r5, r2
 801385e:	b92b      	cbnz	r3, 801386c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8013860:	6803      	ldr	r3, [r0, #0]
 8013862:	4611      	mov	r1, r2
 8013864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013866:	4798      	blx	r3
 8013868:	b009      	add	sp, #36	; 0x24
 801386a:	bd30      	pop	{r4, r5, pc}
 801386c:	f7ff fc78 	bl	8013160 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8013870:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8013874:	2300      	movs	r3, #0
 8013876:	a904      	add	r1, sp, #16
 8013878:	f88d 200c 	strb.w	r2, [sp, #12]
 801387c:	4620      	mov	r0, r4
 801387e:	4a0e      	ldr	r2, [pc, #56]	; (80138b8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8013880:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013884:	9204      	str	r2, [sp, #16]
 8013886:	aa01      	add	r2, sp, #4
 8013888:	f88d 3006 	strb.w	r3, [sp, #6]
 801388c:	9205      	str	r2, [sp, #20]
 801388e:	4a0b      	ldr	r2, [pc, #44]	; (80138bc <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8013890:	9502      	str	r5, [sp, #8]
 8013892:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013896:	6823      	ldr	r3, [r4, #0]
 8013898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801389a:	4798      	blx	r3
 801389c:	4620      	mov	r0, r4
 801389e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80138a2:	4629      	mov	r1, r5
 80138a4:	f7ff ff8e 	bl	80137c4 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 80138a8:	6960      	ldr	r0, [r4, #20]
 80138aa:	2800      	cmp	r0, #0
 80138ac:	d0dc      	beq.n	8013868 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 80138ae:	6803      	ldr	r3, [r0, #0]
 80138b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138b2:	4798      	blx	r3
 80138b4:	e7d8      	b.n	8013868 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 80138b6:	bf00      	nop
 80138b8:	08026ac4 	.word	0x08026ac4
 80138bc:	080136c7 	.word	0x080136c7

080138c0 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 80138c0:	b538      	push	{r3, r4, r5, lr}
 80138c2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80138c6:	4604      	mov	r4, r0
 80138c8:	460d      	mov	r5, r1
 80138ca:	2b01      	cmp	r3, #1
 80138cc:	d002      	beq.n	80138d4 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 80138ce:	2b02      	cmp	r3, #2
 80138d0:	d018      	beq.n	8013904 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 80138d2:	bd38      	pop	{r3, r4, r5, pc}
 80138d4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80138d8:	4293      	cmp	r3, r2
 80138da:	8943      	ldrh	r3, [r0, #10]
 80138dc:	bfc8      	it	gt
 80138de:	8102      	strhgt	r2, [r0, #8]
 80138e0:	894a      	ldrh	r2, [r1, #10]
 80138e2:	1a9b      	subs	r3, r3, r2
 80138e4:	8143      	strh	r3, [r0, #10]
 80138e6:	4628      	mov	r0, r5
 80138e8:	680b      	ldr	r3, [r1, #0]
 80138ea:	2100      	movs	r1, #0
 80138ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ee:	4798      	blx	r3
 80138f0:	682b      	ldr	r3, [r5, #0]
 80138f2:	2100      	movs	r1, #0
 80138f4:	4628      	mov	r0, r5
 80138f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138f8:	4798      	blx	r3
 80138fa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80138fc:	896a      	ldrh	r2, [r5, #10]
 80138fe:	1a9b      	subs	r3, r3, r2
 8013900:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8013902:	e7e6      	b.n	80138d2 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8013904:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013908:	4293      	cmp	r3, r2
 801390a:	8903      	ldrh	r3, [r0, #8]
 801390c:	bfc8      	it	gt
 801390e:	8142      	strhgt	r2, [r0, #10]
 8013910:	890a      	ldrh	r2, [r1, #8]
 8013912:	1a9b      	subs	r3, r3, r2
 8013914:	8103      	strh	r3, [r0, #8]
 8013916:	4628      	mov	r0, r5
 8013918:	680b      	ldr	r3, [r1, #0]
 801391a:	2100      	movs	r1, #0
 801391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801391e:	4798      	blx	r3
 8013920:	682b      	ldr	r3, [r5, #0]
 8013922:	2100      	movs	r1, #0
 8013924:	4628      	mov	r0, r5
 8013926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013928:	4798      	blx	r3
 801392a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801392c:	892a      	ldrh	r2, [r5, #8]
 801392e:	e7e6      	b.n	80138fe <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08013930 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8013930:	b530      	push	{r4, r5, lr}
 8013932:	b089      	sub	sp, #36	; 0x24
 8013934:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8013938:	2300      	movs	r3, #0
 801393a:	460d      	mov	r5, r1
 801393c:	f88d 200c 	strb.w	r2, [sp, #12]
 8013940:	4604      	mov	r4, r0
 8013942:	4a12      	ldr	r2, [pc, #72]	; (801398c <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8013944:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013948:	9204      	str	r2, [sp, #16]
 801394a:	aa01      	add	r2, sp, #4
 801394c:	f88d 3006 	strb.w	r3, [sp, #6]
 8013950:	9205      	str	r2, [sp, #20]
 8013952:	4a0f      	ldr	r2, [pc, #60]	; (8013990 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8013954:	9102      	str	r1, [sp, #8]
 8013956:	a904      	add	r1, sp, #16
 8013958:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801395c:	6803      	ldr	r3, [r0, #0]
 801395e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013960:	4798      	blx	r3
 8013962:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013966:	b14b      	cbz	r3, 801397c <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 8013968:	4629      	mov	r1, r5
 801396a:	4620      	mov	r0, r4
 801396c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013970:	f7ff ffa6 	bl	80138c0 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8013974:	4629      	mov	r1, r5
 8013976:	4620      	mov	r0, r4
 8013978:	f7ff fbdb 	bl	8013132 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801397c:	6960      	ldr	r0, [r4, #20]
 801397e:	b110      	cbz	r0, 8013986 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8013980:	6803      	ldr	r3, [r0, #0]
 8013982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013984:	4798      	blx	r3
 8013986:	b009      	add	sp, #36	; 0x24
 8013988:	bd30      	pop	{r4, r5, pc}
 801398a:	bf00      	nop
 801398c:	08026ac4 	.word	0x08026ac4
 8013990:	080135c9 	.word	0x080135c9

08013994 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013994:	2000      	movs	r0, #0
 8013996:	4770      	bx	lr

08013998 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8013998:	2001      	movs	r0, #1
 801399a:	4770      	bx	lr

0801399c <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 801399c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801399e:	6803      	ldr	r3, [r0, #0]
 80139a0:	4604      	mov	r4, r0
 80139a2:	460e      	mov	r6, r1
 80139a4:	4601      	mov	r1, r0
 80139a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80139aa:	4668      	mov	r0, sp
 80139ac:	4615      	mov	r5, r2
 80139ae:	4798      	blx	r3
 80139b0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80139b4:	b13b      	cbz	r3, 80139c6 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x2a>
 80139b6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80139ba:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80139be:	4293      	cmp	r3, r2
 80139c0:	bfac      	ite	ge
 80139c2:	2300      	movge	r3, #0
 80139c4:	2301      	movlt	r3, #1
 80139c6:	7033      	strb	r3, [r6, #0]
 80139c8:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80139cc:	b13b      	cbz	r3, 80139de <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x42>
 80139ce:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80139d2:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80139d6:	4293      	cmp	r3, r2
 80139d8:	bfac      	ite	ge
 80139da:	2300      	movge	r3, #0
 80139dc:	2301      	movlt	r3, #1
 80139de:	702b      	strb	r3, [r5, #0]
 80139e0:	b002      	add	sp, #8
 80139e2:	bd70      	pop	{r4, r5, r6, pc}

080139e4 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 80139e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139e8:	4604      	mov	r4, r0
 80139ea:	460f      	mov	r7, r1
 80139ec:	4616      	mov	r6, r2
 80139ee:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80139f0:	f100 0838 	add.w	r8, r0, #56	; 0x38
 80139f4:	f100 0964 	add.w	r9, r0, #100	; 0x64
 80139f8:	b15d      	cbz	r5, 8013a12 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 80139fa:	4545      	cmp	r5, r8
 80139fc:	d007      	beq.n	8013a0e <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80139fe:	454d      	cmp	r5, r9
 8013a00:	d005      	beq.n	8013a0e <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 8013a02:	682b      	ldr	r3, [r5, #0]
 8013a04:	4632      	mov	r2, r6
 8013a06:	4639      	mov	r1, r7
 8013a08:	4628      	mov	r0, r5
 8013a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a0c:	4798      	blx	r3
 8013a0e:	69ad      	ldr	r5, [r5, #24]
 8013a10:	e7f2      	b.n	80139f8 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 8013a12:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8013a16:	441f      	add	r7, r3
 8013a18:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 8013a1c:	441e      	add	r6, r3
 8013a1e:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
 8013a22:	f8a4 609a 	strh.w	r6, [r4, #154]	; 0x9a
 8013a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013a2a <_ZN8touchgfx19ScrollableContainerD1Ev>:
 8013a2a:	4770      	bx	lr

08013a2c <_ZN8touchgfx9DragEventD1Ev>:
 8013a2c:	4770      	bx	lr

08013a2e <_ZN8touchgfx10ClickEventD1Ev>:
 8013a2e:	4770      	bx	lr

08013a30 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 8013a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a32:	4605      	mov	r5, r0
 8013a34:	f100 0638 	add.w	r6, r0, #56	; 0x38
 8013a38:	4604      	mov	r4, r0
 8013a3a:	460f      	mov	r7, r1
 8013a3c:	f855 3b64 	ldr.w	r3, [r5], #100
 8013a40:	4631      	mov	r1, r6
 8013a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013a44:	4798      	blx	r3
 8013a46:	6823      	ldr	r3, [r4, #0]
 8013a48:	4629      	mov	r1, r5
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013a4e:	4798      	blx	r3
 8013a50:	4639      	mov	r1, r7
 8013a52:	4620      	mov	r0, r4
 8013a54:	f7ff fb22 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013a58:	4631      	mov	r1, r6
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	f7ff fb1e 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013a60:	4629      	mov	r1, r5
 8013a62:	4620      	mov	r0, r4
 8013a64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013a68:	f7ff bb18 	b.w	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>

08013a6c <_ZN8touchgfx10ClickEventD0Ev>:
 8013a6c:	b510      	push	{r4, lr}
 8013a6e:	4604      	mov	r4, r0
 8013a70:	210c      	movs	r1, #12
 8013a72:	f00f fc38 	bl	80232e6 <_ZdlPvj>
 8013a76:	4620      	mov	r0, r4
 8013a78:	bd10      	pop	{r4, pc}

08013a7a <_ZN8touchgfx9DragEventD0Ev>:
 8013a7a:	b510      	push	{r4, lr}
 8013a7c:	4604      	mov	r4, r0
 8013a7e:	2110      	movs	r1, #16
 8013a80:	f00f fc31 	bl	80232e6 <_ZdlPvj>
 8013a84:	4620      	mov	r0, r4
 8013a86:	bd10      	pop	{r4, pc}

08013a88 <_ZN8touchgfx19ScrollableContainerD0Ev>:
 8013a88:	b510      	push	{r4, lr}
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	21bc      	movs	r1, #188	; 0xbc
 8013a8e:	f00f fc2a 	bl	80232e6 <_ZdlPvj>
 8013a92:	4620      	mov	r0, r4
 8013a94:	bd10      	pop	{r4, pc}
	...

08013a98 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 8013a98:	b570      	push	{r4, r5, r6, lr}
 8013a9a:	b086      	sub	sp, #24
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	460c      	mov	r4, r1
 8013aa0:	4605      	mov	r5, r0
 8013aa2:	aa06      	add	r2, sp, #24
 8013aa4:	f88d 3002 	strb.w	r3, [sp, #2]
 8013aa8:	f10d 0102 	add.w	r1, sp, #2
 8013aac:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8013ab0:	6803      	ldr	r3, [r0, #0]
 8013ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ab6:	4798      	blx	r3
 8013ab8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013abc:	b10b      	cbz	r3, 8013ac2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 8013abe:	7923      	ldrb	r3, [r4, #4]
 8013ac0:	b133      	cbz	r3, 8013ad0 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 8013ac2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d067      	beq.n	8013b9a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013aca:	7923      	ldrb	r3, [r4, #4]
 8013acc:	2b01      	cmp	r3, #1
 8013ace:	d164      	bne.n	8013b9a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013ad0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013ad4:	2a00      	cmp	r2, #0
 8013ad6:	bfb8      	it	lt
 8013ad8:	4252      	neglt	r2, r2
 8013ada:	b213      	sxth	r3, r2
 8013adc:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	; 0x9c
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	dc5a      	bgt.n	8013b9a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013ae4:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 8013ae6:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
 8013aea:	429a      	cmp	r2, r3
 8013aec:	bfa8      	it	ge
 8013aee:	461a      	movge	r2, r3
 8013af0:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	; 0xba
 8013af4:	b212      	sxth	r2, r2
 8013af6:	2a05      	cmp	r2, #5
 8013af8:	bfb8      	it	lt
 8013afa:	2205      	movlt	r2, #5
 8013afc:	4351      	muls	r1, r2
 8013afe:	3a04      	subs	r2, #4
 8013b00:	fb91 f1f3 	sdiv	r1, r1, r3
 8013b04:	f8a5 10a8 	strh.w	r1, [r5, #168]	; 0xa8
 8013b08:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8013b0c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013b10:	b289      	uxth	r1, r1
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b18:	bfcc      	ite	gt
 8013b1a:	2001      	movgt	r0, #1
 8013b1c:	4618      	movle	r0, r3
 8013b1e:	00d3      	lsls	r3, r2, #3
 8013b20:	fb13 f300 	smulbb	r3, r3, r0
 8013b24:	b21b      	sxth	r3, r3
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
 8013b2c:	bfb8      	it	lt
 8013b2e:	425b      	neglt	r3, r3
 8013b30:	b21b      	sxth	r3, r3
 8013b32:	428b      	cmp	r3, r1
 8013b34:	bfa8      	it	ge
 8013b36:	460b      	movge	r3, r1
 8013b38:	4629      	mov	r1, r5
 8013b3a:	f8a5 30a8 	strh.w	r3, [r5, #168]	; 0xa8
 8013b3e:	7922      	ldrb	r2, [r4, #4]
 8013b40:	682b      	ldr	r3, [r5, #0]
 8013b42:	2a01      	cmp	r2, #1
 8013b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b48:	d129      	bne.n	8013b9e <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x106>
 8013b4a:	a801      	add	r0, sp, #4
 8013b4c:	4798      	blx	r3
 8013b4e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013b52:	2601      	movs	r6, #1
 8013b54:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
 8013b58:	f885 60b0 	strb.w	r6, [r5, #176]	; 0xb0
 8013b5c:	f004 fa42 	bl	8017fe4 <_ZN8touchgfx11Application11getInstanceEv>
 8013b60:	4629      	mov	r1, r5
 8013b62:	f004 fa45 	bl	8017ff0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8013b66:	7923      	ldrb	r3, [r4, #4]
 8013b68:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8013b6c:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8013b70:	b198      	cbz	r0, 8013b9a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013b72:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 8013b76:	b983      	cbnz	r3, 8013b9a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013b78:	4a0b      	ldr	r2, [pc, #44]	; (8013ba8 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x110>)
 8013b7a:	a903      	add	r1, sp, #12
 8013b7c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013b80:	9203      	str	r2, [sp, #12]
 8013b82:	2202      	movs	r2, #2
 8013b84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013b88:	f88d 2010 	strb.w	r2, [sp, #16]
 8013b8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013b90:	6803      	ldr	r3, [r0, #0]
 8013b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b94:	4798      	blx	r3
 8013b96:	f885 60b6 	strb.w	r6, [r5, #182]	; 0xb6
 8013b9a:	b006      	add	sp, #24
 8013b9c:	bd70      	pop	{r4, r5, r6, pc}
 8013b9e:	a803      	add	r0, sp, #12
 8013ba0:	4798      	blx	r3
 8013ba2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013ba6:	e7d4      	b.n	8013b52 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 8013ba8:	08026b74 	.word	0x08026b74

08013bac <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 8013bac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013bae:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d048      	beq.n	8013c4a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 8013bb8:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
 8013bbc:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8013bc0:	3001      	adds	r0, #1
 8013bc2:	b280      	uxth	r0, r0
 8013bc4:	4298      	cmp	r0, r3
 8013bc6:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 8013bca:	d842      	bhi.n	8013c52 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa6>
 8013bcc:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8013bd0:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8013bd4:	f005 fe1a 	bl	801980c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8013bd8:	4605      	mov	r5, r0
 8013bda:	b282      	uxth	r2, r0
 8013bdc:	f012 0301 	ands.w	r3, r2, #1
 8013be0:	d006      	beq.n	8013bf0 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 8013be2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013be6:	2800      	cmp	r0, #0
 8013be8:	bfd8      	it	le
 8013bea:	460b      	movle	r3, r1
 8013bec:	18d5      	adds	r5, r2, r3
 8013bee:	b22d      	sxth	r5, r5
 8013bf0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8013bf4:	2b01      	cmp	r3, #1
 8013bf6:	d02a      	beq.n	8013c4e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 8013bf8:	6823      	ldr	r3, [r4, #0]
 8013bfa:	4621      	mov	r1, r4
 8013bfc:	4668      	mov	r0, sp
 8013bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c02:	4798      	blx	r3
 8013c04:	f8bd 6000 	ldrh.w	r6, [sp]
 8013c08:	1bae      	subs	r6, r5, r6
 8013c0a:	b236      	sxth	r6, r6
 8013c0c:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8013c10:	b14a      	cbz	r2, 8013c26 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x7a>
 8013c12:	6823      	ldr	r3, [r4, #0]
 8013c14:	4621      	mov	r1, r4
 8013c16:	4668      	mov	r0, sp
 8013c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c1c:	4798      	blx	r3
 8013c1e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013c22:	1aad      	subs	r5, r5, r2
 8013c24:	b22a      	sxth	r2, r5
 8013c26:	6823      	ldr	r3, [r4, #0]
 8013c28:	4631      	mov	r1, r6
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c30:	4798      	blx	r3
 8013c32:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
 8013c36:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
 8013c3a:	b935      	cbnz	r5, 8013c4a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 8013c3c:	f004 f9d2 	bl	8017fe4 <_ZN8touchgfx11Application11getInstanceEv>
 8013c40:	4621      	mov	r1, r4
 8013c42:	f004 f9fa 	bl	801803a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8013c46:	f8a4 50ae 	strh.w	r5, [r4, #174]	; 0xae
 8013c4a:	b002      	add	sp, #8
 8013c4c:	bd70      	pop	{r4, r5, r6, pc}
 8013c4e:	2600      	movs	r6, #0
 8013c50:	e7dc      	b.n	8013c0c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x60>
 8013c52:	2300      	movs	r3, #0
 8013c54:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 8013c58:	e7ed      	b.n	8013c36 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x8a>

08013c5a <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8013c5a:	b470      	push	{r4, r5, r6}
 8013c5c:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 8013c60:	461d      	mov	r5, r3
 8013c62:	b11e      	cbz	r6, 8013c6c <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 8013c64:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 8013c68:	b116      	cbz	r6, 8013c70 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8013c6a:	6028      	str	r0, [r5, #0]
 8013c6c:	bc70      	pop	{r4, r5, r6}
 8013c6e:	4770      	bx	lr
 8013c70:	bc70      	pop	{r4, r5, r6}
 8013c72:	f7ff ba8f 	b.w	8013194 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
	...

08013c78 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 8013c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c7c:	b08b      	sub	sp, #44	; 0x2c
 8013c7e:	2300      	movs	r3, #0
 8013c80:	4604      	mov	r4, r0
 8013c82:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013c86:	aa0a      	add	r2, sp, #40	; 0x28
 8013c88:	f88d 3006 	strb.w	r3, [sp, #6]
 8013c8c:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8013c90:	460f      	mov	r7, r1
 8013c92:	f802 3d21 	strb.w	r3, [r2, #-33]!
 8013c96:	6803      	ldr	r3, [r0, #0]
 8013c98:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 8013c9c:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 8013ca0:	f10d 0106 	add.w	r1, sp, #6
 8013ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ca8:	4798      	blx	r3
 8013caa:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8013cae:	2900      	cmp	r1, #0
 8013cb0:	d03d      	beq.n	8013d2e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013cb2:	42a1      	cmp	r1, r4
 8013cb4:	d03b      	beq.n	8013d2e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013cb6:	a802      	add	r0, sp, #8
 8013cb8:	f005 fa04 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013cbc:	4621      	mov	r1, r4
 8013cbe:	a804      	add	r0, sp, #16
 8013cc0:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 8013cc4:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8013cc8:	f005 f9fc 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ccc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8013cd0:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 8013cd4:	eba3 030b 	sub.w	r3, r3, fp
 8013cd8:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8013cdc:	88f9      	ldrh	r1, [r7, #6]
 8013cde:	4413      	add	r3, r2
 8013ce0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013ce4:	f89d c006 	ldrb.w	ip, [sp, #6]
 8013ce8:	eba2 020a 	sub.w	r2, r2, sl
 8013cec:	b29b      	uxth	r3, r3
 8013cee:	4402      	add	r2, r0
 8013cf0:	8938      	ldrh	r0, [r7, #8]
 8013cf2:	4419      	add	r1, r3
 8013cf4:	b292      	uxth	r2, r2
 8013cf6:	b209      	sxth	r1, r1
 8013cf8:	4410      	add	r0, r2
 8013cfa:	b200      	sxth	r0, r0
 8013cfc:	f1bc 0f00 	cmp.w	ip, #0
 8013d00:	f040 808d 	bne.w	8013e1e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a6>
 8013d04:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
 8013d08:	4473      	add	r3, lr
 8013d0a:	b21b      	sxth	r3, r3
 8013d0c:	f89d e007 	ldrb.w	lr, [sp, #7]
 8013d10:	f1be 0f00 	cmp.w	lr, #0
 8013d14:	f040 80b1 	bne.w	8013e7a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 8013d18:	f8b7 e00c 	ldrh.w	lr, [r7, #12]
 8013d1c:	4472      	add	r2, lr
 8013d1e:	b212      	sxth	r2, r2
 8013d20:	f1bc 0f00 	cmp.w	ip, #0
 8013d24:	f000 80c8 	beq.w	8013eb8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 8013d28:	4290      	cmp	r0, r2
 8013d2a:	f040 80ae 	bne.w	8013e8a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8013d2e:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8013d32:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	f040 8099 	bne.w	8013e6e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 8013d3c:	897d      	ldrh	r5, [r7, #10]
 8013d3e:	89be      	ldrh	r6, [r7, #12]
 8013d40:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 8013d44:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
 8013d48:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
 8013d4c:	f8b4 c0a0 	ldrh.w	ip, [r4, #160]	; 0xa0
 8013d50:	4411      	add	r1, r2
 8013d52:	442a      	add	r2, r5
 8013d54:	449c      	add	ip, r3
 8013d56:	4433      	add	r3, r6
 8013d58:	b292      	uxth	r2, r2
 8013d5a:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	b289      	uxth	r1, r1
 8013d62:	fa1f fc8c 	uxth.w	ip, ip
 8013d66:	b215      	sxth	r5, r2
 8013d68:	b21e      	sxth	r6, r3
 8013d6a:	b15f      	cbz	r7, 8013d84 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10c>
 8013d6c:	1a52      	subs	r2, r2, r1
 8013d6e:	f9b4 709c 	ldrsh.w	r7, [r4, #156]	; 0x9c
 8013d72:	b212      	sxth	r2, r2
 8013d74:	2a00      	cmp	r2, #0
 8013d76:	bfb8      	it	lt
 8013d78:	4252      	neglt	r2, r2
 8013d7a:	b212      	sxth	r2, r2
 8013d7c:	4297      	cmp	r7, r2
 8013d7e:	bfac      	ite	ge
 8013d80:	2700      	movge	r7, #0
 8013d82:	2701      	movlt	r7, #1
 8013d84:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013d88:	b152      	cbz	r2, 8013da0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x128>
 8013d8a:	eba3 030c 	sub.w	r3, r3, ip
 8013d8e:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
 8013d92:	b21b      	sxth	r3, r3
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	bfb8      	it	lt
 8013d98:	425b      	neglt	r3, r3
 8013d9a:	b21b      	sxth	r3, r3
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	db01      	blt.n	8013da4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 8013da0:	2f00      	cmp	r7, #0
 8013da2:	d03e      	beq.n	8013e22 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 8013da4:	2701      	movs	r7, #1
 8013da6:	fa0f f881 	sxth.w	r8, r1
 8013daa:	fa0f f98c 	sxth.w	r9, ip
 8013dae:	f884 70a3 	strb.w	r7, [r4, #163]	; 0xa3
 8013db2:	b1a0      	cbz	r0, 8013dde <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8013db4:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8013db8:	b98b      	cbnz	r3, 8013dde <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8013dba:	4a41      	ldr	r2, [pc, #260]	; (8013ec0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 8013dbc:	a906      	add	r1, sp, #24
 8013dbe:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013dc2:	9206      	str	r2, [sp, #24]
 8013dc4:	2202      	movs	r2, #2
 8013dc6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013dca:	f88d 201c 	strb.w	r2, [sp, #28]
 8013dce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013dd2:	6803      	ldr	r3, [r0, #0]
 8013dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013dd6:	4798      	blx	r3
 8013dd8:	2301      	movs	r3, #1
 8013dda:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8013dde:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 8013de2:	b149      	cbz	r1, 8013df8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013de4:	eba5 0108 	sub.w	r1, r5, r8
 8013de8:	b209      	sxth	r1, r1
 8013dea:	b12f      	cbz	r7, 8013df8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013dec:	2900      	cmp	r1, #0
 8013dee:	dc40      	bgt.n	8013e72 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 8013df0:	bf14      	ite	ne
 8013df2:	f04f 31ff 	movne.w	r1, #4294967295
 8013df6:	2100      	moveq	r1, #0
 8013df8:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8013dfc:	b14a      	cbz	r2, 8013e12 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8013dfe:	eba6 0609 	sub.w	r6, r6, r9
 8013e02:	b232      	sxth	r2, r6
 8013e04:	b12f      	cbz	r7, 8013e12 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8013e06:	2a00      	cmp	r2, #0
 8013e08:	dc35      	bgt.n	8013e76 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 8013e0a:	bf14      	ite	ne
 8013e0c:	f04f 32ff 	movne.w	r2, #4294967295
 8013e10:	2200      	moveq	r2, #0
 8013e12:	6823      	ldr	r3, [r4, #0]
 8013e14:	4620      	mov	r0, r4
 8013e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e1a:	4798      	blx	r3
 8013e1c:	e024      	b.n	8013e68 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013e1e:	460b      	mov	r3, r1
 8013e20:	e774      	b.n	8013d0c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 8013e22:	b308      	cbz	r0, 8013e68 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013e24:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8013e28:	b9f3      	cbnz	r3, 8013e68 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013e2a:	ab0a      	add	r3, sp, #40	; 0x28
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	4632      	mov	r2, r6
 8013e30:	4629      	mov	r1, r5
 8013e32:	f843 7d18 	str.w	r7, [r3, #-24]!
 8013e36:	f7ff f9ad 	bl	8013194 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013e3a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013e3e:	9b04      	ldr	r3, [sp, #16]
 8013e40:	4298      	cmp	r0, r3
 8013e42:	d011      	beq.n	8013e68 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013e44:	4b1e      	ldr	r3, [pc, #120]	; (8013ec0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 8013e46:	a906      	add	r1, sp, #24
 8013e48:	f8ad 701e 	strh.w	r7, [sp, #30]
 8013e4c:	9306      	str	r3, [sp, #24]
 8013e4e:	2302      	movs	r3, #2
 8013e50:	f8ad 7020 	strh.w	r7, [sp, #32]
 8013e54:	f88d 301c 	strb.w	r3, [sp, #28]
 8013e58:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013e5c:	6803      	ldr	r3, [r0, #0]
 8013e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e60:	4798      	blx	r3
 8013e62:	2301      	movs	r3, #1
 8013e64:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8013e68:	b00b      	add	sp, #44	; 0x2c
 8013e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e6e:	2700      	movs	r7, #0
 8013e70:	e79f      	b.n	8013db2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13a>
 8013e72:	2101      	movs	r1, #1
 8013e74:	e7c0      	b.n	8013df8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013e76:	2201      	movs	r2, #1
 8013e78:	e7cb      	b.n	8013e12 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8013e7a:	f1bc 0f00 	cmp.w	ip, #0
 8013e7e:	f47f af56 	bne.w	8013d2e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013e82:	428b      	cmp	r3, r1
 8013e84:	f43f af53 	beq.w	8013d2e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013e88:	4602      	mov	r2, r0
 8013e8a:	f8df c038 	ldr.w	ip, [pc, #56]	; 8013ec4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>
 8013e8e:	f8ad 0020 	strh.w	r0, [sp, #32]
 8013e92:	f8cd c018 	str.w	ip, [sp, #24]
 8013e96:	f04f 0c00 	mov.w	ip, #0
 8013e9a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013e9e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8013ea2:	a906      	add	r1, sp, #24
 8013ea4:	f88d c01c 	strb.w	ip, [sp, #28]
 8013ea8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013eac:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8013eb0:	6803      	ldr	r3, [r0, #0]
 8013eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013eb4:	4798      	blx	r3
 8013eb6:	e73a      	b.n	8013d2e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013eb8:	428b      	cmp	r3, r1
 8013eba:	f43f af35 	beq.w	8013d28 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 8013ebe:	e7e4      	b.n	8013e8a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8013ec0:	08026b74 	.word	0x08026b74
 8013ec4:	08026b88 	.word	0x08026b88

08013ec8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eca:	4604      	mov	r4, r0
 8013ecc:	4608      	mov	r0, r1
 8013ece:	460d      	mov	r5, r1
 8013ed0:	f7ff fab5 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ed4:	b978      	cbnz	r0, 8013ef6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	f7ff fab1 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013edc:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013ee0:	b150      	cbz	r0, 8013ef8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013ee2:	8026      	strh	r6, [r4, #0]
 8013ee4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013ee8:	8063      	strh	r3, [r4, #2]
 8013eea:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8013eee:	80a3      	strh	r3, [r4, #4]
 8013ef0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013ef4:	80e3      	strh	r3, [r4, #6]
 8013ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ef8:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013efc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013f00:	42b1      	cmp	r1, r6
 8013f02:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013f06:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8013f0a:	460f      	mov	r7, r1
 8013f0c:	88ed      	ldrh	r5, [r5, #6]
 8013f0e:	bfa8      	it	ge
 8013f10:	4637      	movge	r7, r6
 8013f12:	4293      	cmp	r3, r2
 8013f14:	4618      	mov	r0, r3
 8013f16:	4466      	add	r6, ip
 8013f18:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013f1c:	bfa8      	it	ge
 8013f1e:	4610      	movge	r0, r2
 8013f20:	442a      	add	r2, r5
 8013f22:	88e5      	ldrh	r5, [r4, #6]
 8013f24:	4461      	add	r1, ip
 8013f26:	b236      	sxth	r6, r6
 8013f28:	8027      	strh	r7, [r4, #0]
 8013f2a:	442b      	add	r3, r5
 8013f2c:	b209      	sxth	r1, r1
 8013f2e:	b212      	sxth	r2, r2
 8013f30:	8060      	strh	r0, [r4, #2]
 8013f32:	b21b      	sxth	r3, r3
 8013f34:	428e      	cmp	r6, r1
 8013f36:	bfac      	ite	ge
 8013f38:	ebc7 0106 	rsbge	r1, r7, r6
 8013f3c:	ebc7 0101 	rsblt	r1, r7, r1
 8013f40:	429a      	cmp	r2, r3
 8013f42:	bfac      	ite	ge
 8013f44:	ebc0 0202 	rsbge	r2, r0, r2
 8013f48:	ebc0 0203 	rsblt	r2, r0, r3
 8013f4c:	80a1      	strh	r1, [r4, #4]
 8013f4e:	80e2      	strh	r2, [r4, #6]
 8013f50:	e7d1      	b.n	8013ef6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08013f52 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 8013f52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f54:	4604      	mov	r4, r0
 8013f56:	2200      	movs	r2, #0
 8013f58:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8013f5c:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8013f60:	680b      	ldr	r3, [r1, #0]
 8013f62:	8022      	strh	r2, [r4, #0]
 8013f64:	8062      	strh	r2, [r4, #2]
 8013f66:	80e0      	strh	r0, [r4, #6]
 8013f68:	4668      	mov	r0, sp
 8013f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f6e:	80a5      	strh	r5, [r4, #4]
 8013f70:	4798      	blx	r3
 8013f72:	4620      	mov	r0, r4
 8013f74:	4669      	mov	r1, sp
 8013f76:	f7ff ffa7 	bl	8013ec8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	b003      	add	sp, #12
 8013f7e:	bd30      	pop	{r4, r5, pc}

08013f80 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 8013f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f82:	2300      	movs	r3, #0
 8013f84:	4605      	mov	r5, r0
 8013f86:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013f88:	f101 0738 	add.w	r7, r1, #56	; 0x38
 8013f8c:	f101 0664 	add.w	r6, r1, #100	; 0x64
 8013f90:	8003      	strh	r3, [r0, #0]
 8013f92:	8043      	strh	r3, [r0, #2]
 8013f94:	8083      	strh	r3, [r0, #4]
 8013f96:	80c3      	strh	r3, [r0, #6]
 8013f98:	b164      	cbz	r4, 8013fb4 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 8013f9a:	42bc      	cmp	r4, r7
 8013f9c:	d008      	beq.n	8013fb0 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013f9e:	42b4      	cmp	r4, r6
 8013fa0:	d006      	beq.n	8013fb0 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013fa2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013fa6:	b11b      	cbz	r3, 8013fb0 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013fa8:	1d21      	adds	r1, r4, #4
 8013faa:	4628      	mov	r0, r5
 8013fac:	f7ff ff8c 	bl	8013ec8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013fb0:	69a4      	ldr	r4, [r4, #24]
 8013fb2:	e7f1      	b.n	8013f98 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 8013fb4:	4628      	mov	r0, r5
 8013fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013fb8 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 8013fb8:	b530      	push	{r4, r5, lr}
 8013fba:	2500      	movs	r5, #0
 8013fbc:	6283      	str	r3, [r0, #40]	; 0x28
 8013fbe:	8101      	strh	r1, [r0, #8]
 8013fc0:	8085      	strh	r5, [r0, #4]
 8013fc2:	80c5      	strh	r5, [r0, #6]
 8013fc4:	8185      	strh	r5, [r0, #12]
 8013fc6:	81c5      	strh	r5, [r0, #14]
 8013fc8:	8205      	strh	r5, [r0, #16]
 8013fca:	8245      	strh	r5, [r0, #18]
 8013fcc:	61c5      	str	r5, [r0, #28]
 8013fce:	8405      	strh	r5, [r0, #32]
 8013fd0:	8445      	strh	r5, [r0, #34]	; 0x22
 8013fd2:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8013fd6:	8142      	strh	r2, [r0, #10]
 8013fd8:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013fdc:	2501      	movs	r5, #1
 8013fde:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8013fe2:	4d03      	ldr	r5, [pc, #12]	; (8013ff0 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 8013fe4:	6005      	str	r5, [r0, #0]
 8013fe6:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8013fea:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 8013fee:	bd30      	pop	{r4, r5, pc}
 8013ff0:	08026e20 	.word	0x08026e20

08013ff4 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8013ff4:	4b2f      	ldr	r3, [pc, #188]	; (80140b4 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 8013ff6:	2278      	movs	r2, #120	; 0x78
 8013ff8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ffa:	6003      	str	r3, [r0, #0]
 8013ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014000:	2500      	movs	r5, #0
 8014002:	2601      	movs	r6, #1
 8014004:	8583      	strh	r3, [r0, #44]	; 0x2c
 8014006:	2111      	movs	r1, #17
 8014008:	f04f 33ff 	mov.w	r3, #4294967295
 801400c:	4604      	mov	r4, r0
 801400e:	8085      	strh	r5, [r0, #4]
 8014010:	80c5      	strh	r5, [r0, #6]
 8014012:	8105      	strh	r5, [r0, #8]
 8014014:	8145      	strh	r5, [r0, #10]
 8014016:	8185      	strh	r5, [r0, #12]
 8014018:	81c5      	strh	r5, [r0, #14]
 801401a:	8205      	strh	r5, [r0, #16]
 801401c:	8245      	strh	r5, [r0, #18]
 801401e:	61c5      	str	r5, [r0, #28]
 8014020:	8405      	strh	r5, [r0, #32]
 8014022:	8445      	strh	r5, [r0, #34]	; 0x22
 8014024:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8014028:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
 801402c:	6285      	str	r5, [r0, #40]	; 0x28
 801402e:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8014032:	6303      	str	r3, [r0, #48]	; 0x30
 8014034:	8681      	strh	r1, [r0, #52]	; 0x34
 8014036:	4629      	mov	r1, r5
 8014038:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
 801403c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8014040:	9200      	str	r2, [sp, #0]
 8014042:	3038      	adds	r0, #56	; 0x38
 8014044:	462a      	mov	r2, r5
 8014046:	f7ff ffb7 	bl	8013fb8 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 801404a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801404e:	462a      	mov	r2, r5
 8014050:	4629      	mov	r1, r5
 8014052:	9300      	str	r3, [sp, #0]
 8014054:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8014058:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801405a:	f7ff ffad 	bl	8013fb8 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 801405e:	2305      	movs	r3, #5
 8014060:	4620      	mov	r0, r4
 8014062:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 8014066:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 801406a:	4b13      	ldr	r3, [pc, #76]	; (80140b8 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 801406c:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8014070:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 8014074:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 8014078:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 801407c:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 8014080:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8014084:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 8014088:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 801408c:	f8a4 50b2 	strh.w	r5, [r4, #178]	; 0xb2
 8014090:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
 8014094:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 8014098:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801409c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 80140a0:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 80140a4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 80140a8:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 80140ac:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 80140b0:	b002      	add	sp, #8
 80140b2:	bd70      	pop	{r4, r5, r6, pc}
 80140b4:	08026b9c 	.word	0x08026b9c
 80140b8:	00010007 	.word	0x00010007

080140bc <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 80140bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80140be:	2600      	movs	r6, #0
 80140c0:	f891 30a4 	ldrb.w	r3, [r1, #164]	; 0xa4
 80140c4:	4605      	mov	r5, r0
 80140c6:	460c      	mov	r4, r1
 80140c8:	8006      	strh	r6, [r0, #0]
 80140ca:	8046      	strh	r6, [r0, #2]
 80140cc:	8086      	strh	r6, [r0, #4]
 80140ce:	80c6      	strh	r6, [r0, #6]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d041      	beq.n	8014158 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 80140d4:	680b      	ldr	r3, [r1, #0]
 80140d6:	4668      	mov	r0, sp
 80140d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140dc:	4798      	blx	r3
 80140de:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80140e2:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d039      	beq.n	801415e <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 80140ea:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80140ee:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	dd05      	ble.n	8014102 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>
 80140f6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80140fa:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80140fe:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8014102:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014106:	42bb      	cmp	r3, r7
 8014108:	da26      	bge.n	8014158 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801410a:	f9bd 0000 	ldrsh.w	r0, [sp]
 801410e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014112:	4242      	negs	r2, r0
 8014114:	4438      	add	r0, r7
 8014116:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 801411a:	b200      	sxth	r0, r0
 801411c:	435a      	muls	r2, r3
 801411e:	1b9e      	subs	r6, r3, r6
 8014120:	1ac0      	subs	r0, r0, r3
 8014122:	4343      	muls	r3, r0
 8014124:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8014128:	fb92 f2f7 	sdiv	r2, r2, r7
 801412c:	fb93 f3f7 	sdiv	r3, r3, r7
 8014130:	4413      	add	r3, r2
 8014132:	0047      	lsls	r7, r0, #1
 8014134:	1af3      	subs	r3, r6, r3
 8014136:	429f      	cmp	r7, r3
 8014138:	dd05      	ble.n	8014146 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 801413a:	1afb      	subs	r3, r7, r3
 801413c:	4353      	muls	r3, r2
 801413e:	fb93 f3f6 	sdiv	r3, r3, r6
 8014142:	1ad2      	subs	r2, r2, r3
 8014144:	463b      	mov	r3, r7
 8014146:	b289      	uxth	r1, r1
 8014148:	8964      	ldrh	r4, [r4, #10]
 801414a:	80ab      	strh	r3, [r5, #4]
 801414c:	180e      	adds	r6, r1, r0
 801414e:	4411      	add	r1, r2
 8014150:	80e8      	strh	r0, [r5, #6]
 8014152:	1ba4      	subs	r4, r4, r6
 8014154:	8029      	strh	r1, [r5, #0]
 8014156:	806c      	strh	r4, [r5, #2]
 8014158:	4628      	mov	r0, r5
 801415a:	b003      	add	sp, #12
 801415c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801415e:	461e      	mov	r6, r3
 8014160:	e7cf      	b.n	8014102 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>

08014162 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 8014162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014164:	2600      	movs	r6, #0
 8014166:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
 801416a:	4605      	mov	r5, r0
 801416c:	460c      	mov	r4, r1
 801416e:	8006      	strh	r6, [r0, #0]
 8014170:	8046      	strh	r6, [r0, #2]
 8014172:	8086      	strh	r6, [r0, #4]
 8014174:	80c6      	strh	r6, [r0, #6]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d041      	beq.n	80141fe <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 801417a:	680b      	ldr	r3, [r1, #0]
 801417c:	4668      	mov	r0, sp
 801417e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014182:	4798      	blx	r3
 8014184:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8014188:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d039      	beq.n	8014204 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 8014190:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014194:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014198:	429a      	cmp	r2, r3
 801419a:	dd05      	ble.n	80141a8 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>
 801419c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80141a0:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80141a4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80141a8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80141ac:	42bb      	cmp	r3, r7
 80141ae:	da26      	bge.n	80141fe <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 80141b0:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80141b4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80141b8:	4242      	negs	r2, r0
 80141ba:	4438      	add	r0, r7
 80141bc:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 80141c0:	b200      	sxth	r0, r0
 80141c2:	435a      	muls	r2, r3
 80141c4:	1b9e      	subs	r6, r3, r6
 80141c6:	1ac0      	subs	r0, r0, r3
 80141c8:	4343      	muls	r3, r0
 80141ca:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80141ce:	fb92 f2f7 	sdiv	r2, r2, r7
 80141d2:	fb93 f3f7 	sdiv	r3, r3, r7
 80141d6:	4413      	add	r3, r2
 80141d8:	0047      	lsls	r7, r0, #1
 80141da:	1af3      	subs	r3, r6, r3
 80141dc:	429f      	cmp	r7, r3
 80141de:	dd05      	ble.n	80141ec <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 80141e0:	1afb      	subs	r3, r7, r3
 80141e2:	4353      	muls	r3, r2
 80141e4:	fb93 f3f6 	sdiv	r3, r3, r6
 80141e8:	1ad2      	subs	r2, r2, r3
 80141ea:	463b      	mov	r3, r7
 80141ec:	b289      	uxth	r1, r1
 80141ee:	8924      	ldrh	r4, [r4, #8]
 80141f0:	80a8      	strh	r0, [r5, #4]
 80141f2:	180e      	adds	r6, r1, r0
 80141f4:	4411      	add	r1, r2
 80141f6:	80eb      	strh	r3, [r5, #6]
 80141f8:	1ba4      	subs	r4, r4, r6
 80141fa:	8069      	strh	r1, [r5, #2]
 80141fc:	802c      	strh	r4, [r5, #0]
 80141fe:	4628      	mov	r0, r5
 8014200:	b003      	add	sp, #12
 8014202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014204:	461e      	mov	r6, r3
 8014206:	e7cf      	b.n	80141a8 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>

08014208 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8014208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801420c:	4617      	mov	r7, r2
 801420e:	2200      	movs	r2, #0
 8014210:	4604      	mov	r4, r0
 8014212:	460e      	mov	r6, r1
 8014214:	8002      	strh	r2, [r0, #0]
 8014216:	4698      	mov	r8, r3
 8014218:	8042      	strh	r2, [r0, #2]
 801421a:	8082      	strh	r2, [r0, #4]
 801421c:	80c2      	strh	r2, [r0, #6]
 801421e:	4638      	mov	r0, r7
 8014220:	f7ff f90d 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014224:	4605      	mov	r5, r0
 8014226:	b998      	cbnz	r0, 8014250 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 8014228:	4640      	mov	r0, r8
 801422a:	f7ff f908 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 801422e:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8014232:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 8014236:	b908      	cbnz	r0, 801423c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 8014238:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 801423c:	8933      	ldrh	r3, [r6, #8]
 801423e:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8014242:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014246:	8022      	strh	r2, [r4, #0]
 8014248:	8067      	strh	r7, [r4, #2]
 801424a:	1b58      	subs	r0, r3, r5
 801424c:	80e1      	strh	r1, [r4, #6]
 801424e:	80a0      	strh	r0, [r4, #4]
 8014250:	4620      	mov	r0, r4
 8014252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014256 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 8014256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801425a:	4604      	mov	r4, r0
 801425c:	2000      	movs	r0, #0
 801425e:	460f      	mov	r7, r1
 8014260:	4616      	mov	r6, r2
 8014262:	8020      	strh	r0, [r4, #0]
 8014264:	4698      	mov	r8, r3
 8014266:	8060      	strh	r0, [r4, #2]
 8014268:	80a0      	strh	r0, [r4, #4]
 801426a:	80e0      	strh	r0, [r4, #6]
 801426c:	4618      	mov	r0, r3
 801426e:	f7ff f8e6 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014272:	4605      	mov	r5, r0
 8014274:	b998      	cbnz	r0, 801429e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 8014276:	4630      	mov	r0, r6
 8014278:	f7ff f8e1 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 801427c:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 8014280:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8014284:	b908      	cbnz	r0, 801428a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 8014286:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 801428a:	897a      	ldrh	r2, [r7, #10]
 801428c:	f8b8 3000 	ldrh.w	r3, [r8]
 8014290:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8014294:	8066      	strh	r6, [r4, #2]
 8014296:	8023      	strh	r3, [r4, #0]
 8014298:	1b50      	subs	r0, r2, r5
 801429a:	80a1      	strh	r1, [r4, #4]
 801429c:	80e0      	strh	r0, [r4, #6]
 801429e:	4620      	mov	r0, r4
 80142a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142a4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 80142a4:	b570      	push	{r4, r5, r6, lr}
 80142a6:	b088      	sub	sp, #32
 80142a8:	4604      	mov	r4, r0
 80142aa:	4601      	mov	r1, r0
 80142ac:	4668      	mov	r0, sp
 80142ae:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80142b2:	f7ff ff03 	bl	80140bc <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 80142b6:	4621      	mov	r1, r4
 80142b8:	a802      	add	r0, sp, #8
 80142ba:	f7ff ff52 	bl	8014162 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 80142be:	ab02      	add	r3, sp, #8
 80142c0:	466a      	mov	r2, sp
 80142c2:	4621      	mov	r1, r4
 80142c4:	a804      	add	r0, sp, #16
 80142c6:	f7ff ff9f 	bl	8014208 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 80142ca:	ab02      	add	r3, sp, #8
 80142cc:	466a      	mov	r2, sp
 80142ce:	4621      	mov	r1, r4
 80142d0:	a806      	add	r0, sp, #24
 80142d2:	f7ff ffc0 	bl	8014256 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 80142d6:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80142da:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80142de:	429a      	cmp	r2, r3
 80142e0:	da02      	bge.n	80142e8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 80142e2:	4630      	mov	r0, r6
 80142e4:	f004 fe52 	bl	8018f8c <_ZNK8touchgfx8Drawable10invalidateEv>
 80142e8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80142ec:	f104 0564 	add.w	r5, r4, #100	; 0x64
 80142f0:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 80142f4:	429a      	cmp	r2, r3
 80142f6:	da02      	bge.n	80142fe <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 80142f8:	4628      	mov	r0, r5
 80142fa:	f004 fe47 	bl	8018f8c <_ZNK8touchgfx8Drawable10invalidateEv>
 80142fe:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8014302:	f8bd 0000 	ldrh.w	r0, [sp]
 8014306:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801430a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801430e:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8014310:	4630      	mov	r0, r6
 8014312:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8014314:	f7ff fa10 	bl	8013738 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014318:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801431c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8014320:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8014324:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8014328:	4628      	mov	r0, r5
 801432a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 801432e:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8014332:	f7ff fa01 	bl	8013738 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014336:	8922      	ldrh	r2, [r4, #8]
 8014338:	2300      	movs	r3, #0
 801433a:	a804      	add	r0, sp, #16
 801433c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014340:	8962      	ldrh	r2, [r4, #10]
 8014342:	f8ad 3010 	strh.w	r3, [sp, #16]
 8014346:	f8ad 201e 	strh.w	r2, [sp, #30]
 801434a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801434e:	f7ff f876 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014352:	b920      	cbnz	r0, 801435e <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8014354:	6823      	ldr	r3, [r4, #0]
 8014356:	a904      	add	r1, sp, #16
 8014358:	4620      	mov	r0, r4
 801435a:	691b      	ldr	r3, [r3, #16]
 801435c:	4798      	blx	r3
 801435e:	a806      	add	r0, sp, #24
 8014360:	f7ff f86d 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014364:	b920      	cbnz	r0, 8014370 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 8014366:	6823      	ldr	r3, [r4, #0]
 8014368:	a906      	add	r1, sp, #24
 801436a:	4620      	mov	r0, r4
 801436c:	691b      	ldr	r3, [r3, #16]
 801436e:	4798      	blx	r3
 8014370:	b008      	add	sp, #32
 8014372:	bd70      	pop	{r4, r5, r6, pc}

08014374 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8014374:	b570      	push	{r4, r5, r6, lr}
 8014376:	790b      	ldrb	r3, [r1, #4]
 8014378:	b08a      	sub	sp, #40	; 0x28
 801437a:	4604      	mov	r4, r0
 801437c:	460d      	mov	r5, r1
 801437e:	2b00      	cmp	r3, #0
 8014380:	d17e      	bne.n	8014480 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10c>
 8014382:	2201      	movs	r2, #1
 8014384:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8014388:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 801438c:	b142      	cbz	r2, 80143a0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2c>
 801438e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8014392:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
 8014396:	f003 fe25 	bl	8017fe4 <_ZN8touchgfx11Application11getInstanceEv>
 801439a:	4621      	mov	r1, r4
 801439c:	f003 fe4d 	bl	801803a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80143a0:	4623      	mov	r3, r4
 80143a2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80143a6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80143aa:	f853 0bb4 	ldr.w	r0, [r3], #180
 80143ae:	9301      	str	r3, [sp, #4]
 80143b0:	f104 03b2 	add.w	r3, r4, #178	; 0xb2
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	f104 0390 	add.w	r3, r4, #144	; 0x90
 80143ba:	6f86      	ldr	r6, [r0, #120]	; 0x78
 80143bc:	4620      	mov	r0, r4
 80143be:	47b0      	blx	r6
 80143c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80143c4:	42a3      	cmp	r3, r4
 80143c6:	bf04      	itt	eq
 80143c8:	2300      	moveq	r3, #0
 80143ca:	f8c4 3090 	streq.w	r3, [r4, #144]	; 0x90
 80143ce:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80143d2:	2900      	cmp	r1, #0
 80143d4:	d03a      	beq.n	801444c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 80143d6:	2600      	movs	r6, #0
 80143d8:	a803      	add	r0, sp, #12
 80143da:	f884 60b6 	strb.w	r6, [r4, #182]	; 0xb6
 80143de:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80143e2:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 80143e6:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80143ea:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80143ee:	f004 fe69 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80143f2:	4621      	mov	r1, r4
 80143f4:	a805      	add	r0, sp, #20
 80143f6:	f004 fe65 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80143fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80143fe:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014402:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8014406:	1ad2      	subs	r2, r2, r3
 8014408:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801440c:	7929      	ldrb	r1, [r5, #4]
 801440e:	441a      	add	r2, r3
 8014410:	88eb      	ldrh	r3, [r5, #6]
 8014412:	f88d 1020 	strb.w	r1, [sp, #32]
 8014416:	a907      	add	r1, sp, #28
 8014418:	441a      	add	r2, r3
 801441a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801441e:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8014422:	1a1b      	subs	r3, r3, r0
 8014424:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8014428:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 801442c:	4403      	add	r3, r0
 801442e:	8928      	ldrh	r0, [r5, #8]
 8014430:	4403      	add	r3, r0
 8014432:	482f      	ldr	r0, [pc, #188]	; (80144f0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8014434:	9007      	str	r0, [sp, #28]
 8014436:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801443a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801443e:	6803      	ldr	r3, [r0, #0]
 8014440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014442:	4798      	blx	r3
 8014444:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8014448:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 801444c:	2300      	movs	r3, #0
 801444e:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 8014452:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8014456:	b112      	cbz	r2, 801445e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xea>
 8014458:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 801445c:	b90b      	cbnz	r3, 8014462 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xee>
 801445e:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8014462:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8014466:	b112      	cbz	r2, 801446e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfa>
 8014468:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 801446c:	b90b      	cbnz	r3, 8014472 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfe>
 801446e:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8014472:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 8014476:	4620      	mov	r0, r4
 8014478:	f7ff ff14 	bl	80142a4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 801447c:	b00a      	add	sp, #40	; 0x28
 801447e:	bd70      	pop	{r4, r5, r6, pc}
 8014480:	2b02      	cmp	r3, #2
 8014482:	d0fb      	beq.n	801447c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x108>
 8014484:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 8014488:	b361      	cbz	r1, 80144e4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x170>
 801448a:	a803      	add	r0, sp, #12
 801448c:	f004 fe1a 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014490:	4621      	mov	r1, r4
 8014492:	a805      	add	r0, sp, #20
 8014494:	f004 fe16 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014498:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801449c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80144a0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80144a4:	1ad2      	subs	r2, r2, r3
 80144a6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80144aa:	7929      	ldrb	r1, [r5, #4]
 80144ac:	441a      	add	r2, r3
 80144ae:	88eb      	ldrh	r3, [r5, #6]
 80144b0:	f88d 1020 	strb.w	r1, [sp, #32]
 80144b4:	a907      	add	r1, sp, #28
 80144b6:	441a      	add	r2, r3
 80144b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80144bc:	1a1b      	subs	r3, r3, r0
 80144be:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 80144c2:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 80144c6:	4403      	add	r3, r0
 80144c8:	8928      	ldrh	r0, [r5, #8]
 80144ca:	4403      	add	r3, r0
 80144cc:	4808      	ldr	r0, [pc, #32]	; (80144f0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 80144ce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80144d2:	2300      	movs	r3, #0
 80144d4:	9007      	str	r0, [sp, #28]
 80144d6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80144da:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80144de:	6803      	ldr	r3, [r0, #0]
 80144e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144e2:	4798      	blx	r3
 80144e4:	2300      	movs	r3, #0
 80144e6:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
 80144ea:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80144ee:	e7ad      	b.n	801444c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 80144f0:	08026b74 	.word	0x08026b74

080144f4 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 80144f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80144f6:	4606      	mov	r6, r0
 80144f8:	4615      	mov	r5, r2
 80144fa:	460c      	mov	r4, r1
 80144fc:	b919      	cbnz	r1, 8014506 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 80144fe:	b912      	cbnz	r2, 8014506 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8014500:	2000      	movs	r0, #0
 8014502:	b003      	add	sp, #12
 8014504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014506:	6833      	ldr	r3, [r6, #0]
 8014508:	4631      	mov	r1, r6
 801450a:	4668      	mov	r0, sp
 801450c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014510:	4798      	blx	r3
 8014512:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8014516:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 801451a:	f9bd 2000 	ldrsh.w	r2, [sp]
 801451e:	4288      	cmp	r0, r1
 8014520:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8014524:	da2c      	bge.n	8014580 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8c>
 8014526:	2c00      	cmp	r4, #0
 8014528:	dd20      	ble.n	801456c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x78>
 801452a:	1913      	adds	r3, r2, r4
 801452c:	2b00      	cmp	r3, #0
 801452e:	dd01      	ble.n	8014534 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8014530:	4252      	negs	r2, r2
 8014532:	b214      	sxth	r4, r2
 8014534:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8014538:	4297      	cmp	r7, r2
 801453a:	dd2c      	ble.n	8014596 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 801453c:	2d00      	cmp	r5, #0
 801453e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8014542:	dd1f      	ble.n	8014584 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x90>
 8014544:	195a      	adds	r2, r3, r5
 8014546:	2a00      	cmp	r2, #0
 8014548:	dd04      	ble.n	8014554 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 801454a:	425b      	negs	r3, r3
 801454c:	b21d      	sxth	r5, r3
 801454e:	b90c      	cbnz	r4, 8014554 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8014550:	2d00      	cmp	r5, #0
 8014552:	d0d5      	beq.n	8014500 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8014554:	6833      	ldr	r3, [r6, #0]
 8014556:	462a      	mov	r2, r5
 8014558:	4621      	mov	r1, r4
 801455a:	4630      	mov	r0, r6
 801455c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014560:	4798      	blx	r3
 8014562:	4630      	mov	r0, r6
 8014564:	f7ff fe9e 	bl	80142a4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8014568:	2001      	movs	r0, #1
 801456a:	e7ca      	b.n	8014502 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 801456c:	d0e2      	beq.n	8014534 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 801456e:	440a      	add	r2, r1
 8014570:	b292      	uxth	r2, r2
 8014572:	fa04 f382 	sxtah	r3, r4, r2
 8014576:	4283      	cmp	r3, r0
 8014578:	dadc      	bge.n	8014534 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 801457a:	1a84      	subs	r4, r0, r2
 801457c:	b224      	sxth	r4, r4
 801457e:	e7d9      	b.n	8014534 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8014580:	2400      	movs	r4, #0
 8014582:	e7d7      	b.n	8014534 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8014584:	d007      	beq.n	8014596 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8014586:	443b      	add	r3, r7
 8014588:	b29b      	uxth	r3, r3
 801458a:	fa05 f183 	sxtah	r1, r5, r3
 801458e:	4291      	cmp	r1, r2
 8014590:	dae0      	bge.n	8014554 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8014592:	1ad3      	subs	r3, r2, r3
 8014594:	e7da      	b.n	801454c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x58>
 8014596:	2c00      	cmp	r4, #0
 8014598:	d0b2      	beq.n	8014500 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 801459a:	2500      	movs	r5, #0
 801459c:	e7da      	b.n	8014554 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>

0801459e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 801459e:	b513      	push	{r0, r1, r4, lr}
 80145a0:	6803      	ldr	r3, [r0, #0]
 80145a2:	4601      	mov	r1, r0
 80145a4:	4604      	mov	r4, r0
 80145a6:	4668      	mov	r0, sp
 80145a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80145ac:	4798      	blx	r3
 80145ae:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80145b2:	f9bd 1000 	ldrsh.w	r1, [sp]
 80145b6:	2800      	cmp	r0, #0
 80145b8:	dd20      	ble.n	80145fc <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 80145ba:	4602      	mov	r2, r0
 80145bc:	2900      	cmp	r1, #0
 80145be:	dc0e      	bgt.n	80145de <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 80145c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80145c4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80145c8:	440b      	add	r3, r1
 80145ca:	b21b      	sxth	r3, r3
 80145cc:	4298      	cmp	r0, r3
 80145ce:	dd04      	ble.n	80145da <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 80145d0:	1a1b      	subs	r3, r3, r0
 80145d2:	4299      	cmp	r1, r3
 80145d4:	bfb8      	it	lt
 80145d6:	4619      	movlt	r1, r3
 80145d8:	b909      	cbnz	r1, 80145de <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 80145da:	b1f2      	cbz	r2, 801461a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 80145dc:	2100      	movs	r1, #0
 80145de:	6823      	ldr	r3, [r4, #0]
 80145e0:	4252      	negs	r2, r2
 80145e2:	4249      	negs	r1, r1
 80145e4:	4620      	mov	r0, r4
 80145e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80145ea:	b212      	sxth	r2, r2
 80145ec:	b209      	sxth	r1, r1
 80145ee:	4798      	blx	r3
 80145f0:	4620      	mov	r0, r4
 80145f2:	b002      	add	sp, #8
 80145f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145f8:	f7ff be54 	b.w	80142a4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80145fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014600:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8014604:	4403      	add	r3, r0
 8014606:	b21b      	sxth	r3, r3
 8014608:	429a      	cmp	r2, r3
 801460a:	dd04      	ble.n	8014616 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 801460c:	1a9a      	subs	r2, r3, r2
 801460e:	4282      	cmp	r2, r0
 8014610:	bfb8      	it	lt
 8014612:	4602      	movlt	r2, r0
 8014614:	e7d2      	b.n	80145bc <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8014616:	2200      	movs	r2, #0
 8014618:	e7d0      	b.n	80145bc <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 801461a:	b002      	add	sp, #8
 801461c:	bd10      	pop	{r4, pc}

0801461e <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 801461e:	6301      	str	r1, [r0, #48]	; 0x30
 8014620:	6601      	str	r1, [r0, #96]	; 0x60
 8014622:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8014626:	4770      	bx	lr

08014628 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>:
 8014628:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 801462c:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
 8014630:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
 8014634:	4770      	bx	lr

08014636 <_ZN8touchgfx19ScrollableContainer19setScrollbarPaddingEh>:
 8014636:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 801463a:	4770      	bx	lr

0801463c <_ZN8touchgfx19ScrollableContainer17setScrollbarWidthEh>:
 801463c:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8014640:	4770      	bx	lr

08014642 <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>:
 8014642:	2201      	movs	r2, #1
 8014644:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
 8014648:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
 801464c:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 8014650:	f7ff be28 	b.w	80142a4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

08014654 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8014654:	4770      	bx	lr

08014656 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8014656:	4770      	bx	lr

08014658 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014658:	6803      	ldr	r3, [r0, #0]
 801465a:	b513      	push	{r0, r1, r4, lr}
 801465c:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8014660:	2300      	movs	r3, #0
 8014662:	e9cd 3300 	strd	r3, r3, [sp]
 8014666:	466b      	mov	r3, sp
 8014668:	47a0      	blx	r4
 801466a:	b002      	add	sp, #8
 801466c:	bd10      	pop	{r4, pc}

0801466e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801466e:	2301      	movs	r3, #1
 8014670:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014674:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014678:	4770      	bx	lr

0801467a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801467a:	2301      	movs	r3, #1
 801467c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014680:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014684:	4770      	bx	lr

08014686 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014686:	6843      	ldr	r3, [r0, #4]
 8014688:	2201      	movs	r2, #1
 801468a:	725a      	strb	r2, [r3, #9]
 801468c:	6840      	ldr	r0, [r0, #4]
 801468e:	6803      	ldr	r3, [r0, #0]
 8014690:	691b      	ldr	r3, [r3, #16]
 8014692:	4718      	bx	r3

08014694 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014694:	6840      	ldr	r0, [r0, #4]
 8014696:	6803      	ldr	r3, [r0, #0]
 8014698:	689b      	ldr	r3, [r3, #8]
 801469a:	4718      	bx	r3

0801469c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801469c:	b530      	push	{r4, r5, lr}
 801469e:	b08b      	sub	sp, #44	; 0x2c
 80146a0:	6804      	ldr	r4, [r0, #0]
 80146a2:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80146a6:	9509      	str	r5, [sp, #36]	; 0x24
 80146a8:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80146ac:	9508      	str	r5, [sp, #32]
 80146ae:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80146b2:	9507      	str	r5, [sp, #28]
 80146b4:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80146b8:	9506      	str	r5, [sp, #24]
 80146ba:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80146be:	9505      	str	r5, [sp, #20]
 80146c0:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80146c4:	9504      	str	r5, [sp, #16]
 80146c6:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80146ca:	9503      	str	r5, [sp, #12]
 80146cc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80146d0:	9502      	str	r5, [sp, #8]
 80146d2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80146d6:	e9cd 3500 	strd	r3, r5, [sp]
 80146da:	4613      	mov	r3, r2
 80146dc:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80146de:	2200      	movs	r2, #0
 80146e0:	47a0      	blx	r4
 80146e2:	b00b      	add	sp, #44	; 0x2c
 80146e4:	bd30      	pop	{r4, r5, pc}
	...

080146e8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80146e8:	4b04      	ldr	r3, [pc, #16]	; (80146fc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	b123      	cbz	r3, 80146f8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80146ee:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80146f2:	f080 0001 	eor.w	r0, r0, #1
 80146f6:	4770      	bx	lr
 80146f8:	2001      	movs	r0, #1
 80146fa:	4770      	bx	lr
 80146fc:	2400ff12 	.word	0x2400ff12

08014700 <_ZN8touchgfx3HAL8endFrameEv>:
 8014700:	b510      	push	{r4, lr}
 8014702:	4604      	mov	r4, r0
 8014704:	6840      	ldr	r0, [r0, #4]
 8014706:	6803      	ldr	r3, [r0, #0]
 8014708:	689b      	ldr	r3, [r3, #8]
 801470a:	4798      	blx	r3
 801470c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014710:	b113      	cbz	r3, 8014718 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014712:	2301      	movs	r3, #1
 8014714:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014718:	bd10      	pop	{r4, pc}

0801471a <_ZN8touchgfx3HAL10initializeEv>:
 801471a:	b510      	push	{r4, lr}
 801471c:	4604      	mov	r4, r0
 801471e:	f7ec f8ab 	bl	8000878 <_ZN8touchgfx10OSWrappers10initializeEv>
 8014722:	6860      	ldr	r0, [r4, #4]
 8014724:	6803      	ldr	r3, [r0, #0]
 8014726:	68db      	ldr	r3, [r3, #12]
 8014728:	4798      	blx	r3
 801472a:	68e0      	ldr	r0, [r4, #12]
 801472c:	6803      	ldr	r3, [r0, #0]
 801472e:	689b      	ldr	r3, [r3, #8]
 8014730:	4798      	blx	r3
 8014732:	6823      	ldr	r3, [r4, #0]
 8014734:	4620      	mov	r0, r4
 8014736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801473c:	4718      	bx	r3

0801473e <_ZN8touchgfx3HAL9taskEntryEv>:
 801473e:	b508      	push	{r3, lr}
 8014740:	6803      	ldr	r3, [r0, #0]
 8014742:	4604      	mov	r4, r0
 8014744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014748:	4798      	blx	r3
 801474a:	6823      	ldr	r3, [r4, #0]
 801474c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801474e:	4620      	mov	r0, r4
 8014750:	4798      	blx	r3
 8014752:	f7ec f8ed 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014756:	6823      	ldr	r3, [r4, #0]
 8014758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801475a:	e7f8      	b.n	801474e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801475c <_ZN8touchgfx3HAL4tickEv>:
 801475c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801475e:	6803      	ldr	r3, [r0, #0]
 8014760:	4604      	mov	r4, r0
 8014762:	4d5b      	ldr	r5, [pc, #364]	; (80148d0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8014764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8014768:	4798      	blx	r3
 801476a:	2800      	cmp	r0, #0
 801476c:	f000 8095 	beq.w	801489a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8014770:	2001      	movs	r0, #1
 8014772:	2600      	movs	r6, #0
 8014774:	f7eb fea6 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014778:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801477c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014780:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014784:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8014788:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801478c:	b133      	cbz	r3, 801479c <_ZN8touchgfx3HAL4tickEv+0x40>
 801478e:	6823      	ldr	r3, [r4, #0]
 8014790:	4620      	mov	r0, r4
 8014792:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8014796:	4798      	blx	r3
 8014798:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801479c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80147a0:	2601      	movs	r6, #1
 80147a2:	6862      	ldr	r2, [r4, #4]
 80147a4:	f083 0301 	eor.w	r3, r3, #1
 80147a8:	702e      	strb	r6, [r5, #0]
 80147aa:	7253      	strb	r3, [r2, #9]
 80147ac:	f003 fc1a 	bl	8017fe4 <_ZN8touchgfx11Application11getInstanceEv>
 80147b0:	6803      	ldr	r3, [r0, #0]
 80147b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147b4:	4798      	blx	r3
 80147b6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80147ba:	b90b      	cbnz	r3, 80147c0 <_ZN8touchgfx3HAL4tickEv+0x64>
 80147bc:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80147c0:	f003 fc10 	bl	8017fe4 <_ZN8touchgfx11Application11getInstanceEv>
 80147c4:	6803      	ldr	r3, [r0, #0]
 80147c6:	695b      	ldr	r3, [r3, #20]
 80147c8:	4798      	blx	r3
 80147ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147cc:	6803      	ldr	r3, [r0, #0]
 80147ce:	691b      	ldr	r3, [r3, #16]
 80147d0:	4798      	blx	r3
 80147d2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80147d6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80147da:	3b01      	subs	r3, #1
 80147dc:	b2db      	uxtb	r3, r3
 80147de:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80147e2:	b10a      	cbz	r2, 80147e8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d1eb      	bne.n	80147c0 <_ZN8touchgfx3HAL4tickEv+0x64>
 80147e8:	4a3a      	ldr	r2, [pc, #232]	; (80148d4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80147ea:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80147ee:	7813      	ldrb	r3, [r2, #0]
 80147f0:	3301      	adds	r3, #1
 80147f2:	b25b      	sxtb	r3, r3
 80147f4:	4299      	cmp	r1, r3
 80147f6:	7013      	strb	r3, [r2, #0]
 80147f8:	dc10      	bgt.n	801481c <_ZN8touchgfx3HAL4tickEv+0xc0>
 80147fa:	2300      	movs	r3, #0
 80147fc:	68e0      	ldr	r0, [r4, #12]
 80147fe:	a902      	add	r1, sp, #8
 8014800:	7013      	strb	r3, [r2, #0]
 8014802:	aa03      	add	r2, sp, #12
 8014804:	6803      	ldr	r3, [r0, #0]
 8014806:	68db      	ldr	r3, [r3, #12]
 8014808:	4798      	blx	r3
 801480a:	6823      	ldr	r3, [r4, #0]
 801480c:	2800      	cmp	r0, #0
 801480e:	d050      	beq.n	80148b2 <_ZN8touchgfx3HAL4tickEv+0x156>
 8014810:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014814:	4620      	mov	r0, r4
 8014816:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801481a:	4798      	blx	r3
 801481c:	2300      	movs	r3, #0
 801481e:	6960      	ldr	r0, [r4, #20]
 8014820:	f88d 3007 	strb.w	r3, [sp, #7]
 8014824:	b158      	cbz	r0, 801483e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8014826:	6803      	ldr	r3, [r0, #0]
 8014828:	f10d 0107 	add.w	r1, sp, #7
 801482c:	68db      	ldr	r3, [r3, #12]
 801482e:	4798      	blx	r3
 8014830:	b128      	cbz	r0, 801483e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8014832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014834:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014838:	6803      	ldr	r3, [r0, #0]
 801483a:	68db      	ldr	r3, [r3, #12]
 801483c:	4798      	blx	r3
 801483e:	f104 001c 	add.w	r0, r4, #28
 8014842:	f00e fc9b 	bl	802317c <_ZN8touchgfx8Gestures4tickEv>
 8014846:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801484a:	b30b      	cbz	r3, 8014890 <_ZN8touchgfx3HAL4tickEv+0x134>
 801484c:	6920      	ldr	r0, [r4, #16]
 801484e:	6803      	ldr	r3, [r0, #0]
 8014850:	691b      	ldr	r3, [r3, #16]
 8014852:	4798      	blx	r3
 8014854:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014856:	4606      	mov	r6, r0
 8014858:	b903      	cbnz	r3, 801485c <_ZN8touchgfx3HAL4tickEv+0x100>
 801485a:	6720      	str	r0, [r4, #112]	; 0x70
 801485c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801485e:	4a1e      	ldr	r2, [pc, #120]	; (80148d8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014860:	1af3      	subs	r3, r6, r3
 8014862:	4293      	cmp	r3, r2
 8014864:	d914      	bls.n	8014890 <_ZN8touchgfx3HAL4tickEv+0x134>
 8014866:	6920      	ldr	r0, [r4, #16]
 8014868:	6803      	ldr	r3, [r0, #0]
 801486a:	699b      	ldr	r3, [r3, #24]
 801486c:	4798      	blx	r3
 801486e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014870:	2264      	movs	r2, #100	; 0x64
 8014872:	1af3      	subs	r3, r6, r3
 8014874:	fbb3 f3f2 	udiv	r3, r3, r2
 8014878:	fbb0 f0f3 	udiv	r0, r0, r3
 801487c:	2800      	cmp	r0, #0
 801487e:	dc1d      	bgt.n	80148bc <_ZN8touchgfx3HAL4tickEv+0x160>
 8014880:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8014884:	6920      	ldr	r0, [r4, #16]
 8014886:	2100      	movs	r1, #0
 8014888:	6803      	ldr	r3, [r0, #0]
 801488a:	69db      	ldr	r3, [r3, #28]
 801488c:	4798      	blx	r3
 801488e:	6726      	str	r6, [r4, #112]	; 0x70
 8014890:	f003 fba8 	bl	8017fe4 <_ZN8touchgfx11Application11getInstanceEv>
 8014894:	6803      	ldr	r3, [r0, #0]
 8014896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014898:	4798      	blx	r3
 801489a:	6823      	ldr	r3, [r4, #0]
 801489c:	4620      	mov	r0, r4
 801489e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80148a2:	4798      	blx	r3
 80148a4:	2001      	movs	r0, #1
 80148a6:	f7eb fe4b 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80148aa:	2300      	movs	r3, #0
 80148ac:	702b      	strb	r3, [r5, #0]
 80148ae:	b004      	add	sp, #16
 80148b0:	bd70      	pop	{r4, r5, r6, pc}
 80148b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80148b6:	4620      	mov	r0, r4
 80148b8:	4798      	blx	r3
 80148ba:	e7af      	b.n	801481c <_ZN8touchgfx3HAL4tickEv+0xc0>
 80148bc:	2863      	cmp	r0, #99	; 0x63
 80148be:	bfcb      	itete	gt
 80148c0:	2300      	movgt	r3, #0
 80148c2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80148c6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80148ca:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80148ce:	e7d9      	b.n	8014884 <_ZN8touchgfx3HAL4tickEv+0x128>
 80148d0:	2400ff18 	.word	0x2400ff18
 80148d4:	2400ff19 	.word	0x2400ff19
 80148d8:	05f5e100 	.word	0x05f5e100

080148dc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80148dc:	f7ec b800 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080148e0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80148e0:	6581      	str	r1, [r0, #88]	; 0x58
 80148e2:	301c      	adds	r0, #28
 80148e4:	f00e bc48 	b.w	8023178 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080148e8 <_ZN8touchgfx3HAL5touchEll>:
 80148e8:	b530      	push	{r4, r5, lr}
 80148ea:	b087      	sub	sp, #28
 80148ec:	4604      	mov	r4, r0
 80148ee:	a804      	add	r0, sp, #16
 80148f0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80148f4:	f003 f95a 	bl	8017bac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80148f8:	9b04      	ldr	r3, [sp, #16]
 80148fa:	a906      	add	r1, sp, #24
 80148fc:	a803      	add	r0, sp, #12
 80148fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014902:	9b05      	ldr	r3, [sp, #20]
 8014904:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014908:	f003 f9a2 	bl	8017c50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801490c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8014910:	f104 001c 	add.w	r0, r4, #28
 8014914:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014918:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801491c:	b189      	cbz	r1, 8014942 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801491e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8014922:	9300      	str	r3, [sp, #0]
 8014924:	4613      	mov	r3, r2
 8014926:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801492a:	462a      	mov	r2, r5
 801492c:	f00e fc34 	bl	8023198 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014930:	b128      	cbz	r0, 801493e <_ZN8touchgfx3HAL5touchEll+0x56>
 8014932:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014936:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014938:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801493c:	6623      	str	r3, [r4, #96]	; 0x60
 801493e:	b007      	add	sp, #28
 8014940:	bd30      	pop	{r4, r5, pc}
 8014942:	f00e fc69 	bl	8023218 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014946:	2301      	movs	r3, #1
 8014948:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801494c:	e7f1      	b.n	8014932 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801494e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801494e:	b510      	push	{r4, lr}
 8014950:	2b00      	cmp	r3, #0
 8014952:	d046      	beq.n	80149e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014954:	ea81 0002 	eor.w	r0, r1, r2
 8014958:	07c4      	lsls	r4, r0, #31
 801495a:	d508      	bpl.n	801496e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801495c:	440b      	add	r3, r1
 801495e:	3a01      	subs	r2, #1
 8014960:	428b      	cmp	r3, r1
 8014962:	d93e      	bls.n	80149e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014964:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014968:	f801 0b01 	strb.w	r0, [r1], #1
 801496c:	e7f8      	b.n	8014960 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801496e:	07d0      	lsls	r0, r2, #31
 8014970:	bf42      	ittt	mi
 8014972:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8014976:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801497a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801497e:	2b01      	cmp	r3, #1
 8014980:	d911      	bls.n	80149a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014982:	ea81 0402 	eor.w	r4, r1, r2
 8014986:	4610      	mov	r0, r2
 8014988:	07a4      	lsls	r4, r4, #30
 801498a:	d022      	beq.n	80149d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801498c:	f023 0401 	bic.w	r4, r3, #1
 8014990:	440c      	add	r4, r1
 8014992:	428c      	cmp	r4, r1
 8014994:	4602      	mov	r2, r0
 8014996:	d904      	bls.n	80149a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8014998:	8812      	ldrh	r2, [r2, #0]
 801499a:	3002      	adds	r0, #2
 801499c:	f821 2b02 	strh.w	r2, [r1], #2
 80149a0:	e7f7      	b.n	8014992 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80149a2:	f003 0301 	and.w	r3, r3, #1
 80149a6:	f023 0003 	bic.w	r0, r3, #3
 80149aa:	4408      	add	r0, r1
 80149ac:	4288      	cmp	r0, r1
 80149ae:	4614      	mov	r4, r2
 80149b0:	d904      	bls.n	80149bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80149b2:	6824      	ldr	r4, [r4, #0]
 80149b4:	3204      	adds	r2, #4
 80149b6:	f841 4b04 	str.w	r4, [r1], #4
 80149ba:	e7f7      	b.n	80149ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80149bc:	f003 0303 	and.w	r3, r3, #3
 80149c0:	3a01      	subs	r2, #1
 80149c2:	440b      	add	r3, r1
 80149c4:	428b      	cmp	r3, r1
 80149c6:	d90c      	bls.n	80149e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80149c8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80149cc:	f801 0b01 	strb.w	r0, [r1], #1
 80149d0:	e7f8      	b.n	80149c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80149d2:	0790      	lsls	r0, r2, #30
 80149d4:	d0e7      	beq.n	80149a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80149d6:	f832 0b02 	ldrh.w	r0, [r2], #2
 80149da:	3b02      	subs	r3, #2
 80149dc:	f821 0b02 	strh.w	r0, [r1], #2
 80149e0:	e7e1      	b.n	80149a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80149e2:	2001      	movs	r0, #1
 80149e4:	bd10      	pop	{r4, pc}

080149e6 <_ZN8touchgfx3HAL7noTouchEv>:
 80149e6:	b510      	push	{r4, lr}
 80149e8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80149ec:	4604      	mov	r4, r0
 80149ee:	b153      	cbz	r3, 8014a06 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80149f0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80149f4:	2101      	movs	r1, #1
 80149f6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80149fa:	301c      	adds	r0, #28
 80149fc:	f00e fc0c 	bl	8023218 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014a00:	2300      	movs	r3, #0
 8014a02:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014a06:	bd10      	pop	{r4, pc}

08014a08 <_ZN8touchgfx3HAL3lcdEv>:
 8014a08:	4b04      	ldr	r3, [pc, #16]	; (8014a1c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014a10:	b10a      	cbz	r2, 8014a16 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8014a12:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014a14:	b900      	cbnz	r0, 8014a18 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8014a16:	6898      	ldr	r0, [r3, #8]
 8014a18:	4770      	bx	lr
 8014a1a:	bf00      	nop
 8014a1c:	2400ff14 	.word	0x2400ff14

08014a20 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a24:	b085      	sub	sp, #20
 8014a26:	4604      	mov	r4, r0
 8014a28:	2000      	movs	r0, #0
 8014a2a:	4699      	mov	r9, r3
 8014a2c:	ad04      	add	r5, sp, #16
 8014a2e:	460f      	mov	r7, r1
 8014a30:	4690      	mov	r8, r2
 8014a32:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014a36:	69a0      	ldr	r0, [r4, #24]
 8014a38:	6806      	ldr	r6, [r0, #0]
 8014a3a:	9501      	str	r5, [sp, #4]
 8014a3c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8014a40:	9500      	str	r5, [sp, #0]
 8014a42:	6835      	ldr	r5, [r6, #0]
 8014a44:	47a8      	blx	r5
 8014a46:	4d10      	ldr	r5, [pc, #64]	; (8014a88 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8014a48:	4606      	mov	r6, r0
 8014a4a:	f8a5 9000 	strh.w	r9, [r5]
 8014a4e:	f7ff ffdb 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 8014a52:	6803      	ldr	r3, [r0, #0]
 8014a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a56:	4798      	blx	r3
 8014a58:	b128      	cbz	r0, 8014a66 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8014a5a:	2801      	cmp	r0, #1
 8014a5c:	d00b      	beq.n	8014a76 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8014a5e:	4630      	mov	r0, r6
 8014a60:	b005      	add	sp, #20
 8014a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a66:	882b      	ldrh	r3, [r5, #0]
 8014a68:	fb08 7203 	mla	r2, r8, r3, r7
 8014a6c:	9b03      	ldr	r3, [sp, #12]
 8014a6e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014a72:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014a74:	e7f3      	b.n	8014a5e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014a76:	882a      	ldrh	r2, [r5, #0]
 8014a78:	9b03      	ldr	r3, [sp, #12]
 8014a7a:	fb08 7202 	mla	r2, r8, r2, r7
 8014a7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014a82:	1a9a      	subs	r2, r3, r2
 8014a84:	63e2      	str	r2, [r4, #60]	; 0x3c
 8014a86:	e7ea      	b.n	8014a5e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8014a88:	2400ff0e 	.word	0x2400ff0e

08014a8c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a8e:	b08b      	sub	sp, #44	; 0x2c
 8014a90:	4617      	mov	r7, r2
 8014a92:	4604      	mov	r4, r0
 8014a94:	460e      	mov	r6, r1
 8014a96:	461d      	mov	r5, r3
 8014a98:	f7ff ffb6 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 8014a9c:	6803      	ldr	r3, [r0, #0]
 8014a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aa0:	4798      	blx	r3
 8014aa2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014aa6:	9007      	str	r0, [sp, #28]
 8014aa8:	4631      	mov	r1, r6
 8014aaa:	6822      	ldr	r2, [r4, #0]
 8014aac:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014ab0:	4b0c      	ldr	r3, [pc, #48]	; (8014ae4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014ab2:	4620      	mov	r0, r4
 8014ab4:	881b      	ldrh	r3, [r3, #0]
 8014ab6:	9306      	str	r3, [sp, #24]
 8014ab8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014abc:	9305      	str	r3, [sp, #20]
 8014abe:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014ac2:	9304      	str	r3, [sp, #16]
 8014ac4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014ac8:	9303      	str	r3, [sp, #12]
 8014aca:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014ace:	9302      	str	r3, [sp, #8]
 8014ad0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014ad4:	e9cd 5300 	strd	r5, r3, [sp]
 8014ad8:	463b      	mov	r3, r7
 8014ada:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8014adc:	2200      	movs	r2, #0
 8014ade:	47a8      	blx	r5
 8014ae0:	b00b      	add	sp, #44	; 0x2c
 8014ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ae4:	2400ff0e 	.word	0x2400ff0e

08014ae8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014aec:	4698      	mov	r8, r3
 8014aee:	6803      	ldr	r3, [r0, #0]
 8014af0:	b08b      	sub	sp, #44	; 0x2c
 8014af2:	4617      	mov	r7, r2
 8014af4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8014af6:	460e      	mov	r6, r1
 8014af8:	4b13      	ldr	r3, [pc, #76]	; (8014b48 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014afa:	4604      	mov	r4, r0
 8014afc:	f8b3 9000 	ldrh.w	r9, [r3]
 8014b00:	f7ff ff82 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 8014b04:	6803      	ldr	r3, [r0, #0]
 8014b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b08:	4798      	blx	r3
 8014b0a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014b0e:	2200      	movs	r2, #0
 8014b10:	4631      	mov	r1, r6
 8014b12:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014b16:	2302      	movs	r3, #2
 8014b18:	4620      	mov	r0, r4
 8014b1a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8014b1e:	2301      	movs	r3, #1
 8014b20:	9305      	str	r3, [sp, #20]
 8014b22:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014b26:	9304      	str	r3, [sp, #16]
 8014b28:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014b2c:	9303      	str	r3, [sp, #12]
 8014b2e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014b32:	9302      	str	r3, [sp, #8]
 8014b34:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014b38:	e9cd 8300 	strd	r8, r3, [sp]
 8014b3c:	463b      	mov	r3, r7
 8014b3e:	47a8      	blx	r5
 8014b40:	b00b      	add	sp, #44	; 0x2c
 8014b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b46:	bf00      	nop
 8014b48:	2400ff0e 	.word	0x2400ff0e

08014b4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8014b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b50:	4698      	mov	r8, r3
 8014b52:	6803      	ldr	r3, [r0, #0]
 8014b54:	b087      	sub	sp, #28
 8014b56:	460e      	mov	r6, r1
 8014b58:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8014b5a:	4617      	mov	r7, r2
 8014b5c:	4b0f      	ldr	r3, [pc, #60]	; (8014b9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8014b5e:	4604      	mov	r4, r0
 8014b60:	f8b3 9000 	ldrh.w	r9, [r3]
 8014b64:	f7ff ff50 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 8014b68:	6803      	ldr	r3, [r0, #0]
 8014b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b6c:	4798      	blx	r3
 8014b6e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8014b72:	463a      	mov	r2, r7
 8014b74:	4631      	mov	r1, r6
 8014b76:	f8cd 900c 	str.w	r9, [sp, #12]
 8014b7a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014b7e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8014b82:	4620      	mov	r0, r4
 8014b84:	9302      	str	r3, [sp, #8]
 8014b86:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014b8a:	9301      	str	r3, [sp, #4]
 8014b8c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014b90:	9300      	str	r3, [sp, #0]
 8014b92:	4643      	mov	r3, r8
 8014b94:	47a8      	blx	r5
 8014b96:	b007      	add	sp, #28
 8014b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b9c:	2400ff0e 	.word	0x2400ff0e

08014ba0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ba4:	4604      	mov	r4, r0
 8014ba6:	b08f      	sub	sp, #60	; 0x3c
 8014ba8:	4610      	mov	r0, r2
 8014baa:	460d      	mov	r5, r1
 8014bac:	4691      	mov	r9, r2
 8014bae:	461e      	mov	r6, r3
 8014bb0:	f006 f97a 	bl	801aea8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014bb4:	2800      	cmp	r0, #0
 8014bb6:	f000 809d 	beq.w	8014cf4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014bba:	6823      	ldr	r3, [r4, #0]
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	f8df b198 	ldr.w	fp, [pc, #408]	; 8014d58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014bc2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8014bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bc8:	4798      	blx	r3
 8014bca:	6823      	ldr	r3, [r4, #0]
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8014d5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8014bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bd4:	4798      	blx	r3
 8014bd6:	f8bb 3000 	ldrh.w	r3, [fp]
 8014bda:	4f5c      	ldr	r7, [pc, #368]	; (8014d4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014bdc:	9301      	str	r3, [sp, #4]
 8014bde:	f8ba 3000 	ldrh.w	r3, [sl]
 8014be2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014be6:	4640      	mov	r0, r8
 8014be8:	9302      	str	r3, [sp, #8]
 8014bea:	883b      	ldrh	r3, [r7, #0]
 8014bec:	9303      	str	r3, [sp, #12]
 8014bee:	4b58      	ldr	r3, [pc, #352]	; (8014d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014bf0:	881a      	ldrh	r2, [r3, #0]
 8014bf2:	9305      	str	r3, [sp, #20]
 8014bf4:	9204      	str	r2, [sp, #16]
 8014bf6:	f006 fa9b 	bl	801b130 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014bfa:	8038      	strh	r0, [r7, #0]
 8014bfc:	4640      	mov	r0, r8
 8014bfe:	f006 facb 	bl	801b198 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014c02:	9b05      	ldr	r3, [sp, #20]
 8014c04:	b280      	uxth	r0, r0
 8014c06:	8018      	strh	r0, [r3, #0]
 8014c08:	4b52      	ldr	r3, [pc, #328]	; (8014d54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d174      	bne.n	8014cfa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8014c10:	883b      	ldrh	r3, [r7, #0]
 8014c12:	f8aa 0000 	strh.w	r0, [sl]
 8014c16:	f8ab 3000 	strh.w	r3, [fp]
 8014c1a:	4648      	mov	r0, r9
 8014c1c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8014c20:	f006 f942 	bl	801aea8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014c24:	2200      	movs	r2, #0
 8014c26:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8014c2a:	4611      	mov	r1, r2
 8014c2c:	4628      	mov	r0, r5
 8014c2e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014c32:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014c36:	f7fe fd72 	bl	801371e <_ZN8touchgfx8Drawable5setXYEss>
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8014c40:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8014c44:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	dd5c      	ble.n	8014d06 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014c4c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	dd58      	ble.n	8014d06 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014c54:	462a      	mov	r2, r5
 8014c56:	ab0a      	add	r3, sp, #40	; 0x28
 8014c58:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014c5c:	6851      	ldr	r1, [r2, #4]
 8014c5e:	c303      	stmia	r3!, {r0, r1}
 8014c60:	4631      	mov	r1, r6
 8014c62:	a80a      	add	r0, sp, #40	; 0x28
 8014c64:	f7fe fba8 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 8014c68:	4b38      	ldr	r3, [pc, #224]	; (8014d4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014c6a:	2100      	movs	r1, #0
 8014c6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014c70:	4b37      	ldr	r3, [pc, #220]	; (8014d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014c72:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8014c76:	aa0a      	add	r2, sp, #40	; 0x28
 8014c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c7c:	910c      	str	r1, [sp, #48]	; 0x30
 8014c7e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014c82:	ab08      	add	r3, sp, #32
 8014c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c88:	e883 0003 	stmia.w	r3, {r0, r1}
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	a90c      	add	r1, sp, #48	; 0x30
 8014c90:	f7fe fb92 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 8014c94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d13c      	bne.n	8014d14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8014c9a:	2000      	movs	r0, #0
 8014c9c:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014ca0:	2600      	movs	r6, #0
 8014ca2:	696b      	ldr	r3, [r5, #20]
 8014ca4:	a908      	add	r1, sp, #32
 8014ca6:	682a      	ldr	r2, [r5, #0]
 8014ca8:	4628      	mov	r0, r5
 8014caa:	9305      	str	r3, [sp, #20]
 8014cac:	616e      	str	r6, [r5, #20]
 8014cae:	6892      	ldr	r2, [r2, #8]
 8014cb0:	4790      	blx	r2
 8014cb2:	9b05      	ldr	r3, [sp, #20]
 8014cb4:	4652      	mov	r2, sl
 8014cb6:	4649      	mov	r1, r9
 8014cb8:	616b      	str	r3, [r5, #20]
 8014cba:	4628      	mov	r0, r5
 8014cbc:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8014cc0:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014cc4:	f7fe fd2b 	bl	801371e <_ZN8touchgfx8Drawable5setXYEss>
 8014cc8:	9a01      	ldr	r2, [sp, #4]
 8014cca:	4b23      	ldr	r3, [pc, #140]	; (8014d58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014ccc:	4620      	mov	r0, r4
 8014cce:	801a      	strh	r2, [r3, #0]
 8014cd0:	9a02      	ldr	r2, [sp, #8]
 8014cd2:	4b22      	ldr	r3, [pc, #136]	; (8014d5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014cd4:	801a      	strh	r2, [r3, #0]
 8014cd6:	9a03      	ldr	r2, [sp, #12]
 8014cd8:	4b1c      	ldr	r3, [pc, #112]	; (8014d4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014cda:	801a      	strh	r2, [r3, #0]
 8014cdc:	4b1c      	ldr	r3, [pc, #112]	; (8014d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014cde:	9a04      	ldr	r2, [sp, #16]
 8014ce0:	801a      	strh	r2, [r3, #0]
 8014ce2:	6823      	ldr	r3, [r4, #0]
 8014ce4:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8014ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cea:	4798      	blx	r3
 8014cec:	6823      	ldr	r3, [r4, #0]
 8014cee:	4620      	mov	r0, r4
 8014cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cf2:	4798      	blx	r3
 8014cf4:	b00f      	add	sp, #60	; 0x3c
 8014cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cfa:	883b      	ldrh	r3, [r7, #0]
 8014cfc:	f8ab 0000 	strh.w	r0, [fp]
 8014d00:	f8aa 3000 	strh.w	r3, [sl]
 8014d04:	e789      	b.n	8014c1a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8014d06:	462a      	mov	r2, r5
 8014d08:	ab0a      	add	r3, sp, #40	; 0x28
 8014d0a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014d0e:	6851      	ldr	r1, [r2, #4]
 8014d10:	c303      	stmia	r3!, {r0, r1}
 8014d12:	e7a9      	b.n	8014c68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8014d14:	a807      	add	r0, sp, #28
 8014d16:	f006 fb43 	bl	801b3a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014d1a:	4606      	mov	r6, r0
 8014d1c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014d1e:	6803      	ldr	r3, [r0, #0]
 8014d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d22:	4798      	blx	r3
 8014d24:	4286      	cmp	r6, r0
 8014d26:	d1b8      	bne.n	8014c9a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8014d28:	f7ff fe6e 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 8014d2c:	6803      	ldr	r3, [r0, #0]
 8014d2e:	4606      	mov	r6, r0
 8014d30:	a807      	add	r0, sp, #28
 8014d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d34:	9305      	str	r3, [sp, #20]
 8014d36:	f006 fb33 	bl	801b3a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014d3a:	9b05      	ldr	r3, [sp, #20]
 8014d3c:	4601      	mov	r1, r0
 8014d3e:	4630      	mov	r0, r6
 8014d40:	4798      	blx	r3
 8014d42:	f080 0001 	eor.w	r0, r0, #1
 8014d46:	b2c0      	uxtb	r0, r0
 8014d48:	e7a8      	b.n	8014c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8014d4a:	bf00      	nop
 8014d4c:	2400ff08 	.word	0x2400ff08
 8014d50:	2400ff0a 	.word	0x2400ff0a
 8014d54:	2400ff0c 	.word	0x2400ff0c
 8014d58:	2400ff0e 	.word	0x2400ff0e
 8014d5c:	2400ff10 	.word	0x2400ff10

08014d60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8014d60:	4b07      	ldr	r3, [pc, #28]	; (8014d80 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8014d62:	b510      	push	{r4, lr}
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	4604      	mov	r4, r0
 8014d68:	b13b      	cbz	r3, 8014d7a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014d6a:	6803      	ldr	r3, [r0, #0]
 8014d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d6e:	4798      	blx	r3
 8014d70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014d72:	4283      	cmp	r3, r0
 8014d74:	d101      	bne.n	8014d7a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014d76:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8014d78:	bd10      	pop	{r4, pc}
 8014d7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014d7c:	e7fc      	b.n	8014d78 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8014d7e:	bf00      	nop
 8014d80:	2400ff12 	.word	0x2400ff12

08014d84 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8014d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d88:	461d      	mov	r5, r3
 8014d8a:	b08a      	sub	sp, #40	; 0x28
 8014d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d90:	4690      	mov	r8, r2
 8014d92:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8014d96:	2400      	movs	r4, #0
 8014d98:	4607      	mov	r7, r0
 8014d9a:	fb06 8505 	mla	r5, r6, r5, r8
 8014d9e:	9404      	str	r4, [sp, #16]
 8014da0:	f88d 4020 	strb.w	r4, [sp, #32]
 8014da4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014da8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014dac:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014db0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014db4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014db8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014dbc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014dc0:	f7ff ffce 	bl	8014d60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014dc4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014dce:	a901      	add	r1, sp, #4
 8014dd0:	9505      	str	r5, [sp, #20]
 8014dd2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014dd6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8014dda:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014dde:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8014de2:	6803      	ldr	r3, [r0, #0]
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	4798      	blx	r3
 8014de8:	b00a      	add	sp, #40	; 0x28
 8014dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014dee <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014dee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014df2:	b08b      	sub	sp, #44	; 0x2c
 8014df4:	2400      	movs	r4, #0
 8014df6:	4691      	mov	r9, r2
 8014df8:	461d      	mov	r5, r3
 8014dfa:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8014dfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014e02:	4688      	mov	r8, r1
 8014e04:	4607      	mov	r7, r0
 8014e06:	9404      	str	r4, [sp, #16]
 8014e08:	fb06 9505 	mla	r5, r6, r5, r9
 8014e0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014e10:	f7ff ffa6 	bl	8014d60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014e14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014e18:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014e22:	a901      	add	r1, sp, #4
 8014e24:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014e28:	9505      	str	r5, [sp, #20]
 8014e2a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014e2e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014e32:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014e36:	f8cd 8010 	str.w	r8, [sp, #16]
 8014e3a:	f8ad 4020 	strh.w	r4, [sp, #32]
 8014e3e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014e42:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014e46:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8014e4a:	6803      	ldr	r3, [r0, #0]
 8014e4c:	685b      	ldr	r3, [r3, #4]
 8014e4e:	4798      	blx	r3
 8014e50:	b00b      	add	sp, #44	; 0x2c
 8014e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08014e58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e5c:	b08a      	sub	sp, #40	; 0x28
 8014e5e:	4698      	mov	r8, r3
 8014e60:	2300      	movs	r3, #0
 8014e62:	4606      	mov	r6, r0
 8014e64:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8014e68:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8014e6c:	2d0b      	cmp	r5, #11
 8014e6e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8014e72:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8014e76:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8014e7a:	9304      	str	r3, [sp, #16]
 8014e7c:	d137      	bne.n	8014eee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8014e7e:	2380      	movs	r3, #128	; 0x80
 8014e80:	f88d 0020 	strb.w	r0, [sp, #32]
 8014e84:	4630      	mov	r0, r6
 8014e86:	9203      	str	r2, [sp, #12]
 8014e88:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014e8c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014e90:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014e94:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014e98:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014e9c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014ea0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014ea4:	f7ff ff5c 	bl	8014d60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ea8:	2c0b      	cmp	r4, #11
 8014eaa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8014eae:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014eb2:	bf94      	ite	ls
 8014eb4:	4b19      	ldrls	r3, [pc, #100]	; (8014f1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8014eb6:	2100      	movhi	r1, #0
 8014eb8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8014ebc:	bf98      	it	ls
 8014ebe:	5d19      	ldrbls	r1, [r3, r4]
 8014ec0:	fb02 8307 	mla	r3, r2, r7, r8
 8014ec4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014ec8:	10c9      	asrs	r1, r1, #3
 8014eca:	fb01 0003 	mla	r0, r1, r3, r0
 8014ece:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014ed2:	a901      	add	r1, sp, #4
 8014ed4:	9005      	str	r0, [sp, #20]
 8014ed6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014eda:	2300      	movs	r3, #0
 8014edc:	6870      	ldr	r0, [r6, #4]
 8014ede:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014ee2:	6803      	ldr	r3, [r0, #0]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	4798      	blx	r3
 8014ee8:	b00a      	add	sp, #40	; 0x28
 8014eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eee:	2d02      	cmp	r5, #2
 8014ef0:	d109      	bne.n	8014f06 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8014ef2:	28ff      	cmp	r0, #255	; 0xff
 8014ef4:	d105      	bne.n	8014f02 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014ef6:	f1bc 0f00 	cmp.w	ip, #0
 8014efa:	bf14      	ite	ne
 8014efc:	2340      	movne	r3, #64	; 0x40
 8014efe:	2320      	moveq	r3, #32
 8014f00:	e7be      	b.n	8014e80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f02:	2340      	movs	r3, #64	; 0x40
 8014f04:	e7bc      	b.n	8014e80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f06:	28ff      	cmp	r0, #255	; 0xff
 8014f08:	d105      	bne.n	8014f16 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8014f0a:	f1bc 0f00 	cmp.w	ip, #0
 8014f0e:	bf14      	ite	ne
 8014f10:	2304      	movne	r3, #4
 8014f12:	2301      	moveq	r3, #1
 8014f14:	e7b4      	b.n	8014e80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f16:	2304      	movs	r3, #4
 8014f18:	e7b2      	b.n	8014e80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014f1a:	bf00      	nop
 8014f1c:	08026c30 	.word	0x08026c30

08014f20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f24:	b08b      	sub	sp, #44	; 0x2c
 8014f26:	461d      	mov	r5, r3
 8014f28:	2400      	movs	r4, #0
 8014f2a:	4688      	mov	r8, r1
 8014f2c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8014f30:	4693      	mov	fp, r2
 8014f32:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8014f36:	4607      	mov	r7, r0
 8014f38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014f3c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8014f40:	9404      	str	r4, [sp, #16]
 8014f42:	bf14      	ite	ne
 8014f44:	2308      	movne	r3, #8
 8014f46:	2302      	moveq	r3, #2
 8014f48:	fb05 b50a 	mla	r5, r5, sl, fp
 8014f4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014f50:	f7ff ff06 	bl	8014d60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014f54:	2e0b      	cmp	r6, #11
 8014f56:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014f5a:	a901      	add	r1, sp, #4
 8014f5c:	bf98      	it	ls
 8014f5e:	4b13      	ldrls	r3, [pc, #76]	; (8014fac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014f60:	f8ad a01e 	strh.w	sl, [sp, #30]
 8014f64:	bf98      	it	ls
 8014f66:	5d9c      	ldrbls	r4, [r3, r6]
 8014f68:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014f6c:	10e4      	asrs	r4, r4, #3
 8014f6e:	f8cd 8010 	str.w	r8, [sp, #16]
 8014f72:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014f76:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014f7a:	fb04 0405 	mla	r4, r4, r5, r0
 8014f7e:	6878      	ldr	r0, [r7, #4]
 8014f80:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014f84:	2300      	movs	r3, #0
 8014f86:	9405      	str	r4, [sp, #20]
 8014f88:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014f8c:	f88d 9020 	strb.w	r9, [sp, #32]
 8014f90:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8014f94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014f98:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8014f9c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8014fa0:	6803      	ldr	r3, [r0, #0]
 8014fa2:	685b      	ldr	r3, [r3, #4]
 8014fa4:	4798      	blx	r3
 8014fa6:	b00b      	add	sp, #44	; 0x2c
 8014fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fac:	08026c30 	.word	0x08026c30

08014fb0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb4:	461e      	mov	r6, r3
 8014fb6:	4b0a      	ldr	r3, [pc, #40]	; (8014fe0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8014fb8:	460f      	mov	r7, r1
 8014fba:	4690      	mov	r8, r2
 8014fbc:	881d      	ldrh	r5, [r3, #0]
 8014fbe:	f7ff fd23 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 8014fc2:	6803      	ldr	r3, [r0, #0]
 8014fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fc6:	4798      	blx	r3
 8014fc8:	280b      	cmp	r0, #11
 8014fca:	bf96      	itet	ls
 8014fcc:	4b05      	ldrls	r3, [pc, #20]	; (8014fe4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014fce:	2400      	movhi	r4, #0
 8014fd0:	5c1c      	ldrbls	r4, [r3, r0]
 8014fd2:	fb08 7005 	mla	r0, r8, r5, r7
 8014fd6:	10e4      	asrs	r4, r4, #3
 8014fd8:	fb04 6000 	mla	r0, r4, r0, r6
 8014fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fe0:	2400ff0e 	.word	0x2400ff0e
 8014fe4:	08026c30 	.word	0x08026c30

08014fe8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fea:	b08b      	sub	sp, #44	; 0x2c
 8014fec:	461f      	mov	r7, r3
 8014fee:	4604      	mov	r4, r0
 8014ff0:	4616      	mov	r6, r2
 8014ff2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014ff6:	2500      	movs	r5, #0
 8014ff8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014ffc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015000:	9504      	str	r5, [sp, #16]
 8015002:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015006:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801500a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801500e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015012:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015016:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801501a:	f88d 3020 	strb.w	r3, [sp, #32]
 801501e:	f7ff fe9f 	bl	8014d60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015022:	463a      	mov	r2, r7
 8015024:	4631      	mov	r1, r6
 8015026:	4603      	mov	r3, r0
 8015028:	4620      	mov	r0, r4
 801502a:	f7ff ffc1 	bl	8014fb0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801502e:	4b0e      	ldr	r3, [pc, #56]	; (8015068 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8015030:	9005      	str	r0, [sp, #20]
 8015032:	881b      	ldrh	r3, [r3, #0]
 8015034:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015038:	f7ff fce6 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 801503c:	6803      	ldr	r3, [r0, #0]
 801503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015040:	4798      	blx	r3
 8015042:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015044:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8015048:	a901      	add	r1, sp, #4
 801504a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801504e:	9304      	str	r3, [sp, #16]
 8015050:	6860      	ldr	r0, [r4, #4]
 8015052:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015056:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801505a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801505e:	6803      	ldr	r3, [r0, #0]
 8015060:	685b      	ldr	r3, [r3, #4]
 8015062:	4798      	blx	r3
 8015064:	b00b      	add	sp, #44	; 0x2c
 8015066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015068:	2400ff0e 	.word	0x2400ff0e

0801506c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801506c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801506e:	b08d      	sub	sp, #52	; 0x34
 8015070:	2501      	movs	r5, #1
 8015072:	4604      	mov	r4, r0
 8015074:	466b      	mov	r3, sp
 8015076:	9503      	str	r5, [sp, #12]
 8015078:	e883 0006 	stmia.w	r3, {r1, r2}
 801507c:	2300      	movs	r3, #0
 801507e:	f8bd 6000 	ldrh.w	r6, [sp]
 8015082:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015086:	9306      	str	r3, [sp, #24]
 8015088:	6803      	ldr	r3, [r0, #0]
 801508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801508c:	4798      	blx	r3
 801508e:	463a      	mov	r2, r7
 8015090:	4631      	mov	r1, r6
 8015092:	4603      	mov	r3, r0
 8015094:	4620      	mov	r0, r4
 8015096:	f7ff ff8b 	bl	8014fb0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801509a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801509c:	9004      	str	r0, [sp, #16]
 801509e:	9307      	str	r3, [sp, #28]
 80150a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80150a4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80150a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80150ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80150b0:	4b0e      	ldr	r3, [pc, #56]	; (80150ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80150b2:	881b      	ldrh	r3, [r3, #0]
 80150b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80150b8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80150bc:	f7ff fca4 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 80150c0:	6803      	ldr	r3, [r0, #0]
 80150c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150c4:	4798      	blx	r3
 80150c6:	23ff      	movs	r3, #255	; 0xff
 80150c8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80150cc:	a903      	add	r1, sp, #12
 80150ce:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80150d2:	6860      	ldr	r0, [r4, #4]
 80150d4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80150d8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80150dc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80150e0:	6803      	ldr	r3, [r0, #0]
 80150e2:	685b      	ldr	r3, [r3, #4]
 80150e4:	4798      	blx	r3
 80150e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80150e8:	b00d      	add	sp, #52	; 0x34
 80150ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150ec:	2400ff0e 	.word	0x2400ff0e

080150f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80150f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150f4:	b08c      	sub	sp, #48	; 0x30
 80150f6:	461e      	mov	r6, r3
 80150f8:	2300      	movs	r3, #0
 80150fa:	4604      	mov	r4, r0
 80150fc:	466d      	mov	r5, sp
 80150fe:	9306      	str	r3, [sp, #24]
 8015100:	6803      	ldr	r3, [r0, #0]
 8015102:	e885 0006 	stmia.w	r5, {r1, r2}
 8015106:	2501      	movs	r5, #1
 8015108:	f8bd 7000 	ldrh.w	r7, [sp]
 801510c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8015110:	9503      	str	r5, [sp, #12]
 8015112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015114:	4798      	blx	r3
 8015116:	4642      	mov	r2, r8
 8015118:	4639      	mov	r1, r7
 801511a:	4603      	mov	r3, r0
 801511c:	4620      	mov	r0, r4
 801511e:	f7ff ff47 	bl	8014fb0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015122:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015126:	9004      	str	r0, [sp, #16]
 8015128:	f8ad 3020 	strh.w	r3, [sp, #32]
 801512c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015130:	9607      	str	r6, [sp, #28]
 8015132:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015136:	4b10      	ldr	r3, [pc, #64]	; (8015178 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8015138:	881b      	ldrh	r3, [r3, #0]
 801513a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801513e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015140:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015144:	f7ff fc60 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 8015148:	6803      	ldr	r3, [r0, #0]
 801514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801514c:	4798      	blx	r3
 801514e:	23ff      	movs	r3, #255	; 0xff
 8015150:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8015154:	a903      	add	r1, sp, #12
 8015156:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801515a:	6860      	ldr	r0, [r4, #4]
 801515c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8015160:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8015164:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8015168:	6803      	ldr	r3, [r0, #0]
 801516a:	685b      	ldr	r3, [r3, #4]
 801516c:	4798      	blx	r3
 801516e:	4630      	mov	r0, r6
 8015170:	b00c      	add	sp, #48	; 0x30
 8015172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015176:	bf00      	nop
 8015178:	2400ff0e 	.word	0x2400ff0e

0801517c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801517c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801517e:	b085      	sub	sp, #20
 8015180:	4605      	mov	r5, r0
 8015182:	ac02      	add	r4, sp, #8
 8015184:	e884 0006 	stmia.w	r4, {r1, r2}
 8015188:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801518c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8015190:	f7ff fde6 	bl	8014d60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015194:	4631      	mov	r1, r6
 8015196:	4603      	mov	r3, r0
 8015198:	463a      	mov	r2, r7
 801519a:	4628      	mov	r0, r5
 801519c:	f7ff ff08 	bl	8014fb0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80151a0:	4a05      	ldr	r2, [pc, #20]	; (80151b8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80151a2:	682b      	ldr	r3, [r5, #0]
 80151a4:	8812      	ldrh	r2, [r2, #0]
 80151a6:	9200      	str	r2, [sp, #0]
 80151a8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80151aa:	4603      	mov	r3, r0
 80151ac:	4628      	mov	r0, r5
 80151ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 80151b2:	47b0      	blx	r6
 80151b4:	b005      	add	sp, #20
 80151b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151b8:	2400ff0e 	.word	0x2400ff0e

080151bc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80151bc:	b570      	push	{r4, r5, r6, lr}
 80151be:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80151c2:	4604      	mov	r4, r0
 80151c4:	b19b      	cbz	r3, 80151ee <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80151c6:	2002      	movs	r0, #2
 80151c8:	f7eb f9fa 	bl	80005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80151cc:	2300      	movs	r3, #0
 80151ce:	4620      	mov	r0, r4
 80151d0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80151d4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80151d8:	6823      	ldr	r3, [r4, #0]
 80151da:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80151de:	f7ff fdbf 	bl	8014d60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80151e2:	4601      	mov	r1, r0
 80151e4:	4620      	mov	r0, r4
 80151e6:	462b      	mov	r3, r5
 80151e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151ec:	4718      	bx	r3
 80151ee:	bd70      	pop	{r4, r5, r6, pc}

080151f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80151f0:	b538      	push	{r3, r4, r5, lr}
 80151f2:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 80151f6:	4604      	mov	r4, r0
 80151f8:	460d      	mov	r5, r1
 80151fa:	428b      	cmp	r3, r1
 80151fc:	d006      	beq.n	801520c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80151fe:	6803      	ldr	r3, [r0, #0]
 8015200:	b929      	cbnz	r1, 801520e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8015202:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8015206:	4798      	blx	r3
 8015208:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801520c:	bd38      	pop	{r3, r4, r5, pc}
 801520e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8015212:	e7f8      	b.n	8015206 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08015214 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015214:	4b0d      	ldr	r3, [pc, #52]	; (801524c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8015216:	b510      	push	{r4, lr}
 8015218:	781b      	ldrb	r3, [r3, #0]
 801521a:	4604      	mov	r4, r0
 801521c:	b95b      	cbnz	r3, 8015236 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801521e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015222:	2b02      	cmp	r3, #2
 8015224:	d007      	beq.n	8015236 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015226:	6840      	ldr	r0, [r0, #4]
 8015228:	f000 f916 	bl	8015458 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801522c:	b118      	cbz	r0, 8015236 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801522e:	6862      	ldr	r2, [r4, #4]
 8015230:	7a53      	ldrb	r3, [r2, #9]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d0fc      	beq.n	8015230 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015236:	f7eb fb49 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801523a:	4620      	mov	r0, r4
 801523c:	2100      	movs	r1, #0
 801523e:	f7ff ffd7 	bl	80151f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015242:	4620      	mov	r0, r4
 8015244:	f7ff fd8c 	bl	8014d60 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015248:	bd10      	pop	{r4, pc}
 801524a:	bf00      	nop
 801524c:	2400ff12 	.word	0x2400ff12

08015250 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015250:	4770      	bx	lr

08015252 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015252:	2000      	movs	r0, #0
 8015254:	4770      	bx	lr

08015256 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015256:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801525a:	1a13      	subs	r3, r2, r0
 801525c:	4258      	negs	r0, r3
 801525e:	4158      	adcs	r0, r3
 8015260:	4770      	bx	lr

08015262 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015262:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015266:	1a9b      	subs	r3, r3, r2
 8015268:	2b00      	cmp	r3, #0
 801526a:	bfdc      	itt	le
 801526c:	6882      	ldrle	r2, [r0, #8]
 801526e:	189b      	addle	r3, r3, r2
 8015270:	2b01      	cmp	r3, #1
 8015272:	bfcc      	ite	gt
 8015274:	2000      	movgt	r0, #0
 8015276:	2001      	movle	r0, #1
 8015278:	4770      	bx	lr

0801527a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801527a:	6902      	ldr	r2, [r0, #16]
 801527c:	6843      	ldr	r3, [r0, #4]
 801527e:	2024      	movs	r0, #36	; 0x24
 8015280:	fb00 3002 	mla	r0, r0, r2, r3
 8015284:	4770      	bx	lr

08015286 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015286:	6803      	ldr	r3, [r0, #0]
 8015288:	691b      	ldr	r3, [r3, #16]
 801528a:	4718      	bx	r3

0801528c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801528c:	2301      	movs	r3, #1
 801528e:	b570      	push	{r4, r5, r6, lr}
 8015290:	7203      	strb	r3, [r0, #8]
 8015292:	4604      	mov	r4, r0
 8015294:	6840      	ldr	r0, [r0, #4]
 8015296:	6803      	ldr	r3, [r0, #0]
 8015298:	699b      	ldr	r3, [r3, #24]
 801529a:	4798      	blx	r3
 801529c:	6803      	ldr	r3, [r0, #0]
 801529e:	4605      	mov	r5, r0
 80152a0:	2b40      	cmp	r3, #64	; 0x40
 80152a2:	d00c      	beq.n	80152be <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80152a4:	d810      	bhi.n	80152c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80152a6:	2b04      	cmp	r3, #4
 80152a8:	d01d      	beq.n	80152e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80152aa:	d804      	bhi.n	80152b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80152ac:	2b01      	cmp	r3, #1
 80152ae:	d006      	beq.n	80152be <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80152b0:	2b02      	cmp	r3, #2
 80152b2:	d02c      	beq.n	801530e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80152b4:	bd70      	pop	{r4, r5, r6, pc}
 80152b6:	2b08      	cmp	r3, #8
 80152b8:	d01d      	beq.n	80152f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80152ba:	2b20      	cmp	r3, #32
 80152bc:	d1fa      	bne.n	80152b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80152be:	6823      	ldr	r3, [r4, #0]
 80152c0:	4620      	mov	r0, r4
 80152c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152c4:	4798      	blx	r3
 80152c6:	e013      	b.n	80152f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80152c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152cc:	d0f7      	beq.n	80152be <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80152ce:	d804      	bhi.n	80152da <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80152d0:	2b80      	cmp	r3, #128	; 0x80
 80152d2:	d0f4      	beq.n	80152be <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80152d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152d8:	e7f0      	b.n	80152bc <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80152da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80152de:	d0ee      	beq.n	80152be <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80152e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80152e4:	e7e5      	b.n	80152b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80152e6:	6823      	ldr	r3, [r4, #0]
 80152e8:	7f01      	ldrb	r1, [r0, #28]
 80152ea:	4620      	mov	r0, r4
 80152ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152ee:	4798      	blx	r3
 80152f0:	6823      	ldr	r3, [r4, #0]
 80152f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152f4:	e006      	b.n	8015304 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80152f6:	6823      	ldr	r3, [r4, #0]
 80152f8:	7f01      	ldrb	r1, [r0, #28]
 80152fa:	4620      	mov	r0, r4
 80152fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152fe:	4798      	blx	r3
 8015300:	6823      	ldr	r3, [r4, #0]
 8015302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015304:	4629      	mov	r1, r5
 8015306:	4620      	mov	r0, r4
 8015308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801530c:	4718      	bx	r3
 801530e:	6823      	ldr	r3, [r4, #0]
 8015310:	4620      	mov	r0, r4
 8015312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015314:	4798      	blx	r3
 8015316:	e7f3      	b.n	8015300 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08015318 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015318:	4770      	bx	lr

0801531a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801531a:	4770      	bx	lr

0801531c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801531c:	4770      	bx	lr

0801531e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801531e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015322:	b510      	push	{r4, lr}
 8015324:	1ad2      	subs	r2, r2, r3
 8015326:	2a00      	cmp	r2, #0
 8015328:	bfdc      	itt	le
 801532a:	6884      	ldrle	r4, [r0, #8]
 801532c:	1912      	addle	r2, r2, r4
 801532e:	2a01      	cmp	r2, #1
 8015330:	dd16      	ble.n	8015360 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015332:	6842      	ldr	r2, [r0, #4]
 8015334:	2424      	movs	r4, #36	; 0x24
 8015336:	fb04 2303 	mla	r3, r4, r3, r2
 801533a:	f101 0220 	add.w	r2, r1, #32
 801533e:	f851 4b04 	ldr.w	r4, [r1], #4
 8015342:	4291      	cmp	r1, r2
 8015344:	f843 4b04 	str.w	r4, [r3], #4
 8015348:	d1f9      	bne.n	801533e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801534a:	780a      	ldrb	r2, [r1, #0]
 801534c:	701a      	strb	r2, [r3, #0]
 801534e:	68c3      	ldr	r3, [r0, #12]
 8015350:	6882      	ldr	r2, [r0, #8]
 8015352:	f3bf 8f5b 	dmb	ish
 8015356:	3301      	adds	r3, #1
 8015358:	429a      	cmp	r2, r3
 801535a:	bfd8      	it	le
 801535c:	1a9b      	suble	r3, r3, r2
 801535e:	60c3      	str	r3, [r0, #12]
 8015360:	bd10      	pop	{r4, pc}

08015362 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015362:	6903      	ldr	r3, [r0, #16]
 8015364:	6882      	ldr	r2, [r0, #8]
 8015366:	f3bf 8f5b 	dmb	ish
 801536a:	3301      	adds	r3, #1
 801536c:	429a      	cmp	r2, r3
 801536e:	bfd8      	it	le
 8015370:	1a9b      	suble	r3, r3, r2
 8015372:	6103      	str	r3, [r0, #16]
 8015374:	4770      	bx	lr
	...

08015378 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015378:	b570      	push	{r4, r5, r6, lr}
 801537a:	4604      	mov	r4, r0
 801537c:	460e      	mov	r6, r1
 801537e:	6860      	ldr	r0, [r4, #4]
 8015380:	6803      	ldr	r3, [r0, #0]
 8015382:	685b      	ldr	r3, [r3, #4]
 8015384:	4798      	blx	r3
 8015386:	2800      	cmp	r0, #0
 8015388:	d1f9      	bne.n	801537e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801538a:	4d0d      	ldr	r5, [pc, #52]	; (80153c0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801538c:	6828      	ldr	r0, [r5, #0]
 801538e:	6803      	ldr	r3, [r0, #0]
 8015390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015392:	4798      	blx	r3
 8015394:	f7eb faac 	bl	80008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015398:	6828      	ldr	r0, [r5, #0]
 801539a:	2101      	movs	r1, #1
 801539c:	f7ff ff28 	bl	80151f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80153a0:	6860      	ldr	r0, [r4, #4]
 80153a2:	4631      	mov	r1, r6
 80153a4:	6803      	ldr	r3, [r0, #0]
 80153a6:	689b      	ldr	r3, [r3, #8]
 80153a8:	4798      	blx	r3
 80153aa:	6823      	ldr	r3, [r4, #0]
 80153ac:	4620      	mov	r0, r4
 80153ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153b0:	4798      	blx	r3
 80153b2:	6828      	ldr	r0, [r5, #0]
 80153b4:	6803      	ldr	r3, [r0, #0]
 80153b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153bc:	4718      	bx	r3
 80153be:	bf00      	nop
 80153c0:	2400ff14 	.word	0x2400ff14

080153c4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80153c4:	b508      	push	{r3, lr}
 80153c6:	f7eb fa81 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80153ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80153ce:	f7eb ba87 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080153d2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80153d2:	b510      	push	{r4, lr}
 80153d4:	4604      	mov	r4, r0
 80153d6:	2114      	movs	r1, #20
 80153d8:	f00d ff85 	bl	80232e6 <_ZdlPvj>
 80153dc:	4620      	mov	r0, r4
 80153de:	bd10      	pop	{r4, pc}

080153e0 <_ZN8touchgfx13DMA_Interface5startEv>:
 80153e0:	b510      	push	{r4, lr}
 80153e2:	4604      	mov	r4, r0
 80153e4:	6840      	ldr	r0, [r0, #4]
 80153e6:	6803      	ldr	r3, [r0, #0]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	4798      	blx	r3
 80153ec:	b948      	cbnz	r0, 8015402 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80153ee:	7a63      	ldrb	r3, [r4, #9]
 80153f0:	b13b      	cbz	r3, 8015402 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80153f2:	7a23      	ldrb	r3, [r4, #8]
 80153f4:	b92b      	cbnz	r3, 8015402 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80153f6:	6823      	ldr	r3, [r4, #0]
 80153f8:	4620      	mov	r0, r4
 80153fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015400:	4718      	bx	r3
 8015402:	bd10      	pop	{r4, pc}

08015404 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015404:	b570      	push	{r4, r5, r6, lr}
 8015406:	4604      	mov	r4, r0
 8015408:	6840      	ldr	r0, [r0, #4]
 801540a:	6803      	ldr	r3, [r0, #0]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	4798      	blx	r3
 8015410:	4605      	mov	r5, r0
 8015412:	b930      	cbnz	r0, 8015422 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015414:	7a23      	ldrb	r3, [r4, #8]
 8015416:	b123      	cbz	r3, 8015422 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015418:	6860      	ldr	r0, [r4, #4]
 801541a:	6803      	ldr	r3, [r0, #0]
 801541c:	695b      	ldr	r3, [r3, #20]
 801541e:	4798      	blx	r3
 8015420:	7225      	strb	r5, [r4, #8]
 8015422:	6860      	ldr	r0, [r4, #4]
 8015424:	6803      	ldr	r3, [r0, #0]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	4798      	blx	r3
 801542a:	b928      	cbnz	r0, 8015438 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801542c:	6823      	ldr	r3, [r4, #0]
 801542e:	4620      	mov	r0, r4
 8015430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015436:	4718      	bx	r3
 8015438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801543c:	f7eb ba62 	b.w	8000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015440 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015440:	b510      	push	{r4, lr}
 8015442:	6082      	str	r2, [r0, #8]
 8015444:	2200      	movs	r2, #0
 8015446:	4c03      	ldr	r4, [pc, #12]	; (8015454 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015448:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801544c:	e9c0 4100 	strd	r4, r1, [r0]
 8015450:	bd10      	pop	{r4, pc}
 8015452:	bf00      	nop
 8015454:	08026d6c 	.word	0x08026d6c

08015458 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015458:	6840      	ldr	r0, [r0, #4]
 801545a:	6803      	ldr	r3, [r0, #0]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	4718      	bx	r3

08015460 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8015460:	2000      	movs	r0, #0
 8015462:	4770      	bx	lr

08015464 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8015464:	4b07      	ldr	r3, [pc, #28]	; (8015484 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8015466:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015468:	881b      	ldrh	r3, [r3, #0]
 801546a:	4293      	cmp	r3, r2
 801546c:	bf81      	itttt	hi
 801546e:	4b06      	ldrhi	r3, [pc, #24]	; (8015488 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8015470:	681b      	ldrhi	r3, [r3, #0]
 8015472:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8015476:	7858      	ldrbhi	r0, [r3, #1]
 8015478:	bf8c      	ite	hi
 801547a:	f000 0003 	andhi.w	r0, r0, #3
 801547e:	2000      	movls	r0, #0
 8015480:	4770      	bx	lr
 8015482:	bf00      	nop
 8015484:	2400ff68 	.word	0x2400ff68
 8015488:	2400ff64 	.word	0x2400ff64

0801548c <_ZN8touchgfx8TextAreaD1Ev>:
 801548c:	4770      	bx	lr
	...

08015490 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8015490:	4b11      	ldr	r3, [pc, #68]	; (80154d8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8015492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015496:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015498:	4604      	mov	r4, r0
 801549a:	881b      	ldrh	r3, [r3, #0]
 801549c:	428b      	cmp	r3, r1
 801549e:	d918      	bls.n	80154d2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80154a0:	6803      	ldr	r3, [r0, #0]
 80154a2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 80154a4:	4b0d      	ldr	r3, [pc, #52]	; (80154dc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80154a6:	6818      	ldr	r0, [r3, #0]
 80154a8:	f7ef f858 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 80154ac:	6823      	ldr	r3, [r4, #0]
 80154ae:	4606      	mov	r6, r0
 80154b0:	4620      	mov	r0, r4
 80154b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80154b4:	4798      	blx	r3
 80154b6:	6823      	ldr	r3, [r4, #0]
 80154b8:	4607      	mov	r7, r0
 80154ba:	4620      	mov	r0, r4
 80154bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80154c0:	4798      	blx	r3
 80154c2:	463a      	mov	r2, r7
 80154c4:	4603      	mov	r3, r0
 80154c6:	4631      	mov	r1, r6
 80154c8:	4620      	mov	r0, r4
 80154ca:	46ac      	mov	ip, r5
 80154cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154d0:	4760      	bx	ip
 80154d2:	2000      	movs	r0, #0
 80154d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154d8:	2400ff68 	.word	0x2400ff68
 80154dc:	2400ff70 	.word	0x2400ff70

080154e0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80154e0:	4b18      	ldr	r3, [pc, #96]	; (8015544 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80154e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80154e6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80154e8:	4604      	mov	r4, r0
 80154ea:	881b      	ldrh	r3, [r3, #0]
 80154ec:	428b      	cmp	r3, r1
 80154ee:	d926      	bls.n	801553e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80154f0:	4b15      	ldr	r3, [pc, #84]	; (8015548 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80154f8:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80154fc:	4b13      	ldr	r3, [pc, #76]	; (801554c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80154fe:	7855      	ldrb	r5, [r2, #1]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8015506:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801550a:	6833      	ldr	r3, [r6, #0]
 801550c:	69df      	ldr	r7, [r3, #28]
 801550e:	4b10      	ldr	r3, [pc, #64]	; (8015550 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8015510:	6818      	ldr	r0, [r3, #0]
 8015512:	f7ef f823 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 8015516:	6823      	ldr	r3, [r4, #0]
 8015518:	4680      	mov	r8, r0
 801551a:	4620      	mov	r0, r4
 801551c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801551e:	4798      	blx	r3
 8015520:	6823      	ldr	r3, [r4, #0]
 8015522:	4681      	mov	r9, r0
 8015524:	4620      	mov	r0, r4
 8015526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801552a:	4798      	blx	r3
 801552c:	464b      	mov	r3, r9
 801552e:	9000      	str	r0, [sp, #0]
 8015530:	4642      	mov	r2, r8
 8015532:	4629      	mov	r1, r5
 8015534:	4630      	mov	r0, r6
 8015536:	47b8      	blx	r7
 8015538:	b003      	add	sp, #12
 801553a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801553e:	2000      	movs	r0, #0
 8015540:	e7fa      	b.n	8015538 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8015542:	bf00      	nop
 8015544:	2400ff68 	.word	0x2400ff68
 8015548:	2400ff64 	.word	0x2400ff64
 801554c:	2400ff6c 	.word	0x2400ff6c
 8015550:	2400ff70 	.word	0x2400ff70

08015554 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015554:	b40e      	push	{r1, r2, r3}
 8015556:	4b30      	ldr	r3, [pc, #192]	; (8015618 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8015558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801555c:	881a      	ldrh	r2, [r3, #0]
 801555e:	b09d      	sub	sp, #116	; 0x74
 8015560:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015562:	4604      	mov	r4, r0
 8015564:	429a      	cmp	r2, r3
 8015566:	d954      	bls.n	8015612 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8015568:	aa26      	add	r2, sp, #152	; 0x98
 801556a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801561c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801556e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8015620 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8015572:	9202      	str	r2, [sp, #8]
 8015574:	f8d9 2000 	ldr.w	r2, [r9]
 8015578:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801557c:	f8d8 3000 	ldr.w	r3, [r8]
 8015580:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015584:	682b      	ldr	r3, [r5, #0]
 8015586:	4628      	mov	r0, r5
 8015588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801558a:	4798      	blx	r3
 801558c:	4606      	mov	r6, r0
 801558e:	b207      	sxth	r7, r0
 8015590:	a803      	add	r0, sp, #12
 8015592:	f004 f96e 	bl	8019872 <_ZN8touchgfx12TextProviderC1Ev>
 8015596:	682b      	ldr	r3, [r5, #0]
 8015598:	4628      	mov	r0, r5
 801559a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801559c:	4798      	blx	r3
 801559e:	682b      	ldr	r3, [r5, #0]
 80155a0:	4682      	mov	sl, r0
 80155a2:	4628      	mov	r0, r5
 80155a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80155a6:	4798      	blx	r3
 80155a8:	4653      	mov	r3, sl
 80155aa:	9000      	str	r0, [sp, #0]
 80155ac:	a803      	add	r0, sp, #12
 80155ae:	9a02      	ldr	r2, [sp, #8]
 80155b0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80155b2:	f004 f9b9 	bl	8019928 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80155b6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80155b8:	f8d9 3000 	ldr.w	r3, [r9]
 80155bc:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80155c0:	8925      	ldrh	r5, [r4, #8]
 80155c2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80155c6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80155ca:	eba5 050c 	sub.w	r5, r5, ip
 80155ce:	784a      	ldrb	r2, [r1, #1]
 80155d0:	f8d8 3000 	ldr.w	r3, [r8]
 80155d4:	b22d      	sxth	r5, r5
 80155d6:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80155da:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80155de:	9500      	str	r5, [sp, #0]
 80155e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80155e4:	a803      	add	r0, sp, #12
 80155e6:	f002 f876 	bl	80176d6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80155ea:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80155ee:	b203      	sxth	r3, r0
 80155f0:	18b9      	adds	r1, r7, r2
 80155f2:	2900      	cmp	r1, #0
 80155f4:	dd0b      	ble.n	801560e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80155f6:	3b01      	subs	r3, #1
 80155f8:	fb13 f302 	smulbb	r3, r3, r2
 80155fc:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015600:	b21f      	sxth	r7, r3
 8015602:	4638      	mov	r0, r7
 8015604:	b01d      	add	sp, #116	; 0x74
 8015606:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801560a:	b003      	add	sp, #12
 801560c:	4770      	bx	lr
 801560e:	2b00      	cmp	r3, #0
 8015610:	dcf7      	bgt.n	8015602 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8015612:	2700      	movs	r7, #0
 8015614:	e7f5      	b.n	8015602 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8015616:	bf00      	nop
 8015618:	2400ff68 	.word	0x2400ff68
 801561c:	2400ff64 	.word	0x2400ff64
 8015620:	2400ff6c 	.word	0x2400ff6c

08015624 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8015624:	4bbc      	ldr	r3, [pc, #752]	; (8015918 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8015626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801562a:	460c      	mov	r4, r1
 801562c:	881b      	ldrh	r3, [r3, #0]
 801562e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8015630:	b0a9      	sub	sp, #164	; 0xa4
 8015632:	4681      	mov	r9, r0
 8015634:	428b      	cmp	r3, r1
 8015636:	d809      	bhi.n	801564c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8015638:	2300      	movs	r3, #0
 801563a:	f04f 32ff 	mov.w	r2, #4294967295
 801563e:	6083      	str	r3, [r0, #8]
 8015640:	e9c0 3200 	strd	r3, r2, [r0]
 8015644:	4648      	mov	r0, r9
 8015646:	b029      	add	sp, #164	; 0xa4
 8015648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801564c:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8015920 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8015650:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8015654:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8015924 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8015658:	f8db 3000 	ldr.w	r3, [fp]
 801565c:	f8d8 0000 	ldr.w	r0, [r8]
 8015660:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8015664:	4bad      	ldr	r3, [pc, #692]	; (801591c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801566c:	f7ee ff76 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 8015670:	4607      	mov	r7, r0
 8015672:	682b      	ldr	r3, [r5, #0]
 8015674:	4628      	mov	r0, r5
 8015676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015678:	4798      	blx	r3
 801567a:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 801567c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015680:	4430      	add	r0, r6
 8015682:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 8015686:	b283      	uxth	r3, r0
 8015688:	4650      	mov	r0, sl
 801568a:	9302      	str	r3, [sp, #8]
 801568c:	2e00      	cmp	r6, #0
 801568e:	f040 8090 	bne.w	80157b2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8015692:	f004 f8ee 	bl	8019872 <_ZN8touchgfx12TextProviderC1Ev>
 8015696:	682b      	ldr	r3, [r5, #0]
 8015698:	4628      	mov	r0, r5
 801569a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801569c:	4798      	blx	r3
 801569e:	682b      	ldr	r3, [r5, #0]
 80156a0:	9005      	str	r0, [sp, #20]
 80156a2:	4628      	mov	r0, r5
 80156a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80156a6:	4798      	blx	r3
 80156a8:	6823      	ldr	r3, [r4, #0]
 80156aa:	4680      	mov	r8, r0
 80156ac:	4620      	mov	r0, r4
 80156ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80156b0:	4798      	blx	r3
 80156b2:	6822      	ldr	r2, [r4, #0]
 80156b4:	9004      	str	r0, [sp, #16]
 80156b6:	4620      	mov	r0, r4
 80156b8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80156bc:	4790      	blx	r2
 80156be:	9905      	ldr	r1, [sp, #20]
 80156c0:	9b04      	ldr	r3, [sp, #16]
 80156c2:	460a      	mov	r2, r1
 80156c4:	4639      	mov	r1, r7
 80156c6:	4637      	mov	r7, r6
 80156c8:	9001      	str	r0, [sp, #4]
 80156ca:	9300      	str	r3, [sp, #0]
 80156cc:	4650      	mov	r0, sl
 80156ce:	4643      	mov	r3, r8
 80156d0:	f004 f93f 	bl	8019952 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80156d4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80156d6:	4629      	mov	r1, r5
 80156d8:	f8db 3000 	ldr.w	r3, [fp]
 80156dc:	4650      	mov	r0, sl
 80156de:	3601      	adds	r6, #1
 80156e0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80156e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80156e8:	b2b6      	uxth	r6, r6
 80156ea:	785b      	ldrb	r3, [r3, #1]
 80156ec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80156f0:	f001 fd42 	bl	8017178 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80156f4:	4287      	cmp	r7, r0
 80156f6:	bfb8      	it	lt
 80156f8:	b207      	sxthlt	r7, r0
 80156fa:	4650      	mov	r0, sl
 80156fc:	f004 f8e0 	bl	80198c0 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8015700:	2800      	cmp	r0, #0
 8015702:	d0e7      	beq.n	80156d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 8015704:	9b02      	ldr	r3, [sp, #8]
 8015706:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 801570a:	fb13 f606 	smulbb	r6, r3, r6
 801570e:	eba6 0608 	sub.w	r6, r6, r8
 8015712:	b2b6      	uxth	r6, r6
 8015714:	fa0f f886 	sxth.w	r8, r6
 8015718:	f1b8 0f00 	cmp.w	r8, #0
 801571c:	dd06      	ble.n	801572c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 801571e:	682b      	ldr	r3, [r5, #0]
 8015720:	4628      	mov	r0, r5
 8015722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015724:	4798      	blx	r3
 8015726:	4430      	add	r0, r6
 8015728:	fa0f f880 	sxth.w	r8, r0
 801572c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015730:	4620      	mov	r0, r4
 8015732:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015736:	6823      	ldr	r3, [r4, #0]
 8015738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801573a:	bf0c      	ite	eq
 801573c:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8015740:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 8015744:	4798      	blx	r3
 8015746:	2801      	cmp	r0, #1
 8015748:	b2ba      	uxth	r2, r7
 801574a:	f000 80d2 	beq.w	80158f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 801574e:	2802      	cmp	r0, #2
 8015750:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8015754:	f000 80d3 	beq.w	80158fe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8015758:	b21e      	sxth	r6, r3
 801575a:	7a29      	ldrb	r1, [r5, #8]
 801575c:	7a6d      	ldrb	r5, [r5, #9]
 801575e:	1a76      	subs	r6, r6, r1
 8015760:	4429      	add	r1, r5
 8015762:	b2b3      	uxth	r3, r6
 8015764:	440a      	add	r2, r1
 8015766:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801576a:	b21f      	sxth	r7, r3
 801576c:	b292      	uxth	r2, r2
 801576e:	2902      	cmp	r1, #2
 8015770:	b216      	sxth	r6, r2
 8015772:	f000 80c7 	beq.w	8015904 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 8015776:	2903      	cmp	r1, #3
 8015778:	f000 80d6 	beq.w	8015928 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 801577c:	2901      	cmp	r1, #1
 801577e:	f040 80dc 	bne.w	801593a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 8015782:	8923      	ldrh	r3, [r4, #8]
 8015784:	4632      	mov	r2, r6
 8015786:	463d      	mov	r5, r7
 8015788:	4646      	mov	r6, r8
 801578a:	eba3 0308 	sub.w	r3, r3, r8
 801578e:	4690      	mov	r8, r2
 8015790:	b21f      	sxth	r7, r3
 8015792:	9b03      	ldr	r3, [sp, #12]
 8015794:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015796:	6818      	ldr	r0, [r3, #0]
 8015798:	f7ee fee0 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 801579c:	f8a9 7000 	strh.w	r7, [r9]
 80157a0:	f8a9 5002 	strh.w	r5, [r9, #2]
 80157a4:	f8a9 6004 	strh.w	r6, [r9, #4]
 80157a8:	f8a9 8006 	strh.w	r8, [r9, #6]
 80157ac:	f8c9 0008 	str.w	r0, [r9, #8]
 80157b0:	e748      	b.n	8015644 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80157b2:	f004 f85e 	bl	8019872 <_ZN8touchgfx12TextProviderC1Ev>
 80157b6:	682b      	ldr	r3, [r5, #0]
 80157b8:	4628      	mov	r0, r5
 80157ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157bc:	4798      	blx	r3
 80157be:	682b      	ldr	r3, [r5, #0]
 80157c0:	4606      	mov	r6, r0
 80157c2:	4628      	mov	r0, r5
 80157c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80157c6:	4798      	blx	r3
 80157c8:	6823      	ldr	r3, [r4, #0]
 80157ca:	4680      	mov	r8, r0
 80157cc:	4620      	mov	r0, r4
 80157ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80157d0:	4798      	blx	r3
 80157d2:	6822      	ldr	r2, [r4, #0]
 80157d4:	9004      	str	r0, [sp, #16]
 80157d6:	4620      	mov	r0, r4
 80157d8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80157dc:	4790      	blx	r2
 80157de:	9b04      	ldr	r3, [sp, #16]
 80157e0:	4632      	mov	r2, r6
 80157e2:	9001      	str	r0, [sp, #4]
 80157e4:	9300      	str	r3, [sp, #0]
 80157e6:	4639      	mov	r1, r7
 80157e8:	4643      	mov	r3, r8
 80157ea:	4650      	mov	r0, sl
 80157ec:	f004 f8b1 	bl	8019952 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80157f0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80157f4:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80157f8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80157fc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015800:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015802:	bf0a      	itet	eq
 8015804:	4642      	moveq	r2, r8
 8015806:	461a      	movne	r2, r3
 8015808:	4698      	moveq	r8, r3
 801580a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801580e:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8015812:	1ad2      	subs	r2, r2, r3
 8015814:	f8db 3000 	ldr.w	r3, [fp]
 8015818:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801581c:	7859      	ldrb	r1, [r3, #1]
 801581e:	2300      	movs	r3, #0
 8015820:	f8cd a020 	str.w	sl, [sp, #32]
 8015824:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8015828:	f8ad 301c 	strh.w	r3, [sp, #28]
 801582c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015830:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8015834:	950a      	str	r5, [sp, #40]	; 0x28
 8015836:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801583a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801583e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8015842:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015846:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801584a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801584e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8015852:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8015856:	b350      	cbz	r0, 80158ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8015858:	682b      	ldr	r3, [r5, #0]
 801585a:	4628      	mov	r0, r5
 801585c:	695b      	ldr	r3, [r3, #20]
 801585e:	4798      	blx	r3
 8015860:	4607      	mov	r7, r0
 8015862:	b320      	cbz	r0, 80158ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8015864:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015866:	4639      	mov	r1, r7
 8015868:	6803      	ldr	r3, [r0, #0]
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	4798      	blx	r3
 801586e:	4606      	mov	r6, r0
 8015870:	b1e8      	cbz	r0, 80158ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8015872:	7b43      	ldrb	r3, [r0, #13]
 8015874:	7a82      	ldrb	r2, [r0, #10]
 8015876:	005b      	lsls	r3, r3, #1
 8015878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801587c:	4313      	orrs	r3, r2
 801587e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8015882:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8015886:	2b04      	cmp	r3, #4
 8015888:	d111      	bne.n	80158ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801588a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801588c:	4632      	mov	r2, r6
 801588e:	4639      	mov	r1, r7
 8015890:	6803      	ldr	r3, [r0, #0]
 8015892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015894:	4798      	blx	r3
 8015896:	7b73      	ldrb	r3, [r6, #13]
 8015898:	005b      	lsls	r3, r3, #1
 801589a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801589e:	7ab3      	ldrb	r3, [r6, #10]
 80158a0:	4313      	orrs	r3, r2
 80158a2:	4418      	add	r0, r3
 80158a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80158a8:	4418      	add	r0, r3
 80158aa:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80158ae:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 80158b2:	2600      	movs	r6, #0
 80158b4:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 80158b8:	4637      	mov	r7, r6
 80158ba:	45c3      	cmp	fp, r8
 80158bc:	a807      	add	r0, sp, #28
 80158be:	f106 0601 	add.w	r6, r6, #1
 80158c2:	bfd4      	ite	le
 80158c4:	2100      	movle	r1, #0
 80158c6:	2101      	movgt	r1, #1
 80158c8:	f001 fe36 	bl	8017538 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80158cc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80158d0:	b2b6      	uxth	r6, r6
 80158d2:	429f      	cmp	r7, r3
 80158d4:	bfb8      	it	lt
 80158d6:	b21f      	sxthlt	r7, r3
 80158d8:	9b02      	ldr	r3, [sp, #8]
 80158da:	eba8 0803 	sub.w	r8, r8, r3
 80158de:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80158e2:	fa0f f888 	sxth.w	r8, r8
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	f43f af0c 	beq.w	8015704 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80158ec:	45c2      	cmp	sl, r8
 80158ee:	dbe4      	blt.n	80158ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 80158f0:	e708      	b.n	8015704 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80158f2:	1bf6      	subs	r6, r6, r7
 80158f4:	2702      	movs	r7, #2
 80158f6:	fb96 f6f7 	sdiv	r6, r6, r7
 80158fa:	b236      	sxth	r6, r6
 80158fc:	e72d      	b.n	801575a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 80158fe:	4413      	add	r3, r2
 8015900:	1af6      	subs	r6, r6, r3
 8015902:	e7fa      	b.n	80158fa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 8015904:	8925      	ldrh	r5, [r4, #8]
 8015906:	1aad      	subs	r5, r5, r2
 8015908:	1aed      	subs	r5, r5, r3
 801590a:	b22f      	sxth	r7, r5
 801590c:	8965      	ldrh	r5, [r4, #10]
 801590e:	eba5 0508 	sub.w	r5, r5, r8
 8015912:	b22d      	sxth	r5, r5
 8015914:	e73d      	b.n	8015792 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8015916:	bf00      	nop
 8015918:	2400ff68 	.word	0x2400ff68
 801591c:	2400ff6c 	.word	0x2400ff6c
 8015920:	2400ff64 	.word	0x2400ff64
 8015924:	2400ff70 	.word	0x2400ff70
 8015928:	8965      	ldrh	r5, [r4, #10]
 801592a:	2700      	movs	r7, #0
 801592c:	1aad      	subs	r5, r5, r2
 801592e:	1aed      	subs	r5, r5, r3
 8015930:	4633      	mov	r3, r6
 8015932:	4646      	mov	r6, r8
 8015934:	b22d      	sxth	r5, r5
 8015936:	4698      	mov	r8, r3
 8015938:	e72b      	b.n	8015792 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801593a:	2500      	movs	r5, #0
 801593c:	e729      	b.n	8015792 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801593e:	bf00      	nop

08015940 <_ZN8touchgfx8TextAreaD0Ev>:
 8015940:	b510      	push	{r4, lr}
 8015942:	4604      	mov	r4, r0
 8015944:	2148      	movs	r1, #72	; 0x48
 8015946:	f00d fcce 	bl	80232e6 <_ZdlPvj>
 801594a:	4620      	mov	r0, r4
 801594c:	bd10      	pop	{r4, pc}
	...

08015950 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8015950:	b513      	push	{r0, r1, r4, lr}
 8015952:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8015956:	4604      	mov	r4, r0
 8015958:	b1fb      	cbz	r3, 801599a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801595a:	4b16      	ldr	r3, [pc, #88]	; (80159b4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801595c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801595e:	881b      	ldrh	r3, [r3, #0]
 8015960:	428b      	cmp	r3, r1
 8015962:	d91a      	bls.n	801599a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015964:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015968:	2b00      	cmp	r3, #0
 801596a:	dd16      	ble.n	801599a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801596c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015970:	2b00      	cmp	r3, #0
 8015972:	dd12      	ble.n	801599a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015974:	4b10      	ldr	r3, [pc, #64]	; (80159b8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8015976:	6818      	ldr	r0, [r3, #0]
 8015978:	f7ee fdf0 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 801597c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8015980:	6822      	ldr	r2, [r4, #0]
 8015982:	2b00      	cmp	r3, #0
 8015984:	db06      	blt.n	8015994 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8015986:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801598a:	2b00      	cmp	r3, #0
 801598c:	db02      	blt.n	8015994 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801598e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015990:	4298      	cmp	r0, r3
 8015992:	d004      	beq.n	801599e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8015994:	6953      	ldr	r3, [r2, #20]
 8015996:	4620      	mov	r0, r4
 8015998:	4798      	blx	r3
 801599a:	b002      	add	sp, #8
 801599c:	bd10      	pop	{r4, pc}
 801599e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80159a2:	466b      	mov	r3, sp
 80159a4:	6912      	ldr	r2, [r2, #16]
 80159a6:	c903      	ldmia	r1, {r0, r1}
 80159a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80159ac:	4619      	mov	r1, r3
 80159ae:	4620      	mov	r0, r4
 80159b0:	4790      	blx	r2
 80159b2:	e7f2      	b.n	801599a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80159b4:	2400ff68 	.word	0x2400ff68
 80159b8:	2400ff70 	.word	0x2400ff70

080159bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80159bc:	4b45      	ldr	r3, [pc, #276]	; (8015ad4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80159be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159c2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80159c4:	b08e      	sub	sp, #56	; 0x38
 80159c6:	881b      	ldrh	r3, [r3, #0]
 80159c8:	4604      	mov	r4, r0
 80159ca:	4293      	cmp	r3, r2
 80159cc:	d97e      	bls.n	8015acc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80159ce:	6808      	ldr	r0, [r1, #0]
 80159d0:	ab05      	add	r3, sp, #20
 80159d2:	6849      	ldr	r1, [r1, #4]
 80159d4:	4d40      	ldr	r5, [pc, #256]	; (8015ad8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80159d6:	c303      	stmia	r3!, {r0, r1}
 80159d8:	4611      	mov	r1, r2
 80159da:	6828      	ldr	r0, [r5, #0]
 80159dc:	f7ee fdbe 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 80159e0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	db11      	blt.n	8015a0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80159e8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	db0d      	blt.n	8015a0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80159f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80159f2:	4298      	cmp	r0, r3
 80159f4:	d10a      	bne.n	8015a0c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80159f6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80159fa:	ab09      	add	r3, sp, #36	; 0x24
 80159fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a00:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a04:	4619      	mov	r1, r3
 8015a06:	a805      	add	r0, sp, #20
 8015a08:	f7fd fcd6 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 8015a0c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	dd5b      	ble.n	8015acc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015a14:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	dd57      	ble.n	8015acc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015a1c:	4f2f      	ldr	r7, [pc, #188]	; (8015adc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8015a1e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015a26:	4b2e      	ldr	r3, [pc, #184]	; (8015ae0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8015a2e:	2e00      	cmp	r6, #0
 8015a30:	d04c      	beq.n	8015acc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015a32:	6823      	ldr	r3, [r4, #0]
 8015a34:	4620      	mov	r0, r4
 8015a36:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8015a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a3c:	4798      	blx	r3
 8015a3e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8015a46:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015a4a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8015a4e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8015a52:	785b      	ldrb	r3, [r3, #1]
 8015a54:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8015a58:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015a5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015a5e:	9609      	str	r6, [sp, #36]	; 0x24
 8015a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a64:	4b1f      	ldr	r3, [pc, #124]	; (8015ae4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8015a66:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8015a70:	910b      	str	r1, [sp, #44]	; 0x2c
 8015a72:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8015a76:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8015a7a:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8015a7e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8015a82:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015a86:	b10a      	cbz	r2, 8015a8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8015a88:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8015a8a:	b906      	cbnz	r6, 8015a8e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8015a8c:	689e      	ldr	r6, [r3, #8]
 8015a8e:	af07      	add	r7, sp, #28
 8015a90:	4621      	mov	r1, r4
 8015a92:	4638      	mov	r0, r7
 8015a94:	f003 fb16 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015a98:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015a9a:	6828      	ldr	r0, [r5, #0]
 8015a9c:	f7ee fd5e 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 8015aa0:	6823      	ldr	r3, [r4, #0]
 8015aa2:	4605      	mov	r5, r0
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015aa8:	4798      	blx	r3
 8015aaa:	6823      	ldr	r3, [r4, #0]
 8015aac:	4680      	mov	r8, r0
 8015aae:	4620      	mov	r0, r4
 8015ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015ab4:	4798      	blx	r3
 8015ab6:	ab09      	add	r3, sp, #36	; 0x24
 8015ab8:	9501      	str	r5, [sp, #4]
 8015aba:	9300      	str	r3, [sp, #0]
 8015abc:	ab05      	add	r3, sp, #20
 8015abe:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8015ac2:	4630      	mov	r0, r6
 8015ac4:	e897 0006 	ldmia.w	r7, {r1, r2}
 8015ac8:	f7ee fcf4 	bl	80044b4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015acc:	b00e      	add	sp, #56	; 0x38
 8015ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ad2:	bf00      	nop
 8015ad4:	2400ff68 	.word	0x2400ff68
 8015ad8:	2400ff70 	.word	0x2400ff70
 8015adc:	2400ff64 	.word	0x2400ff64
 8015ae0:	2400ff6c 	.word	0x2400ff6c
 8015ae4:	2400ff14 	.word	0x2400ff14

08015ae8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015ae8:	b538      	push	{r3, r4, r5, lr}
 8015aea:	4b0e      	ldr	r3, [pc, #56]	; (8015b24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8015aec:	4604      	mov	r4, r0
 8015aee:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015af0:	881b      	ldrh	r3, [r3, #0]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d214      	bcs.n	8015b20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8015af6:	6803      	ldr	r3, [r0, #0]
 8015af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015afa:	4798      	blx	r3
 8015afc:	6823      	ldr	r3, [r4, #0]
 8015afe:	4605      	mov	r5, r0
 8015b00:	4620      	mov	r0, r4
 8015b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b04:	4798      	blx	r3
 8015b06:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015b0a:	b22d      	sxth	r5, r5
 8015b0c:	4601      	mov	r1, r0
 8015b0e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015b12:	bf06      	itte	eq
 8015b14:	4602      	moveq	r2, r0
 8015b16:	4629      	moveq	r1, r5
 8015b18:	462a      	movne	r2, r5
 8015b1a:	4620      	mov	r0, r4
 8015b1c:	f7fd fe0c 	bl	8013738 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015b20:	bd38      	pop	{r3, r4, r5, pc}
 8015b22:	bf00      	nop
 8015b24:	2400ff68 	.word	0x2400ff68

08015b28 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8015b28:	b530      	push	{r4, r5, lr}
 8015b2a:	888b      	ldrh	r3, [r1, #4]
 8015b2c:	b085      	sub	sp, #20
 8015b2e:	4604      	mov	r4, r0
 8015b30:	8583      	strh	r3, [r0, #44]	; 0x2c
 8015b32:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015b36:	b923      	cbnz	r3, 8015b42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8015b38:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015b3c:	b90b      	cbnz	r3, 8015b42 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8015b3e:	f7ff ffd3 	bl	8015ae8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8015b42:	6823      	ldr	r3, [r4, #0]
 8015b44:	466d      	mov	r5, sp
 8015b46:	4621      	mov	r1, r4
 8015b48:	343c      	adds	r4, #60	; 0x3c
 8015b4a:	4628      	mov	r0, r5
 8015b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015b50:	4798      	blx	r3
 8015b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015b5a:	b005      	add	sp, #20
 8015b5c:	bd30      	pop	{r4, r5, pc}

08015b5e <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015b5e:	2300      	movs	r3, #0
 8015b60:	8083      	strh	r3, [r0, #4]
 8015b62:	80c3      	strh	r3, [r0, #6]
 8015b64:	8003      	strh	r3, [r0, #0]
 8015b66:	8043      	strh	r3, [r0, #2]
 8015b68:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8015b6c:	2bff      	cmp	r3, #255	; 0xff
 8015b6e:	bf01      	itttt	eq
 8015b70:	890b      	ldrheq	r3, [r1, #8]
 8015b72:	8083      	strheq	r3, [r0, #4]
 8015b74:	894b      	ldrheq	r3, [r1, #10]
 8015b76:	80c3      	strheq	r3, [r0, #6]
 8015b78:	4770      	bx	lr
	...

08015b7c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b7e:	4604      	mov	r4, r0
 8015b80:	466b      	mov	r3, sp
 8015b82:	6808      	ldr	r0, [r1, #0]
 8015b84:	6849      	ldr	r1, [r1, #4]
 8015b86:	c303      	stmia	r3!, {r0, r1}
 8015b88:	6823      	ldr	r3, [r4, #0]
 8015b8a:	4669      	mov	r1, sp
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b90:	4798      	blx	r3
 8015b92:	4b08      	ldr	r3, [pc, #32]	; (8015bb4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015b9a:	b10a      	cbz	r2, 8015ba0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015b9c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015b9e:	b900      	cbnz	r0, 8015ba2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8015ba0:	6898      	ldr	r0, [r3, #8]
 8015ba2:	6803      	ldr	r3, [r0, #0]
 8015ba4:	4669      	mov	r1, sp
 8015ba6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015ba8:	6a1d      	ldr	r5, [r3, #32]
 8015baa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015bae:	47a8      	blx	r5
 8015bb0:	b003      	add	sp, #12
 8015bb2:	bd30      	pop	{r4, r5, pc}
 8015bb4:	2400ff14 	.word	0x2400ff14

08015bb8 <_ZN8touchgfx3BoxD1Ev>:
 8015bb8:	4770      	bx	lr

08015bba <_ZN8touchgfx3BoxD0Ev>:
 8015bba:	b510      	push	{r4, lr}
 8015bbc:	4604      	mov	r4, r0
 8015bbe:	212c      	movs	r1, #44	; 0x2c
 8015bc0:	f00d fb91 	bl	80232e6 <_ZdlPvj>
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	bd10      	pop	{r4, pc}

08015bc8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8015bc8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8015bcc:	b12a      	cbz	r2, 8015bda <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015bce:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8015bd2:	b112      	cbz	r2, 8015bda <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015bd4:	6803      	ldr	r3, [r0, #0]
 8015bd6:	695b      	ldr	r3, [r3, #20]
 8015bd8:	4718      	bx	r3
 8015bda:	4770      	bx	lr

08015bdc <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
 8015bdc:	4770      	bx	lr
	...

08015be0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8015be0:	4b30      	ldr	r3, [pc, #192]	; (8015ca4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8015be2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015be6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015be8:	b08d      	sub	sp, #52	; 0x34
 8015bea:	881b      	ldrh	r3, [r3, #0]
 8015bec:	4604      	mov	r4, r0
 8015bee:	460f      	mov	r7, r1
 8015bf0:	4293      	cmp	r3, r2
 8015bf2:	d954      	bls.n	8015c9e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8015bf4:	4b2c      	ldr	r3, [pc, #176]	; (8015ca8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8015bf6:	6819      	ldr	r1, [r3, #0]
 8015bf8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8015bfc:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8015c00:	4a2a      	ldr	r2, [pc, #168]	; (8015cac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8015c02:	6812      	ldr	r2, [r2, #0]
 8015c04:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8015c08:	2900      	cmp	r1, #0
 8015c0a:	d048      	beq.n	8015c9e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8015c0c:	785a      	ldrb	r2, [r3, #1]
 8015c0e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8015c12:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8015c16:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015c1a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8015c1e:	4b24      	ldr	r3, [pc, #144]	; (8015cb0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8015c20:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8015c24:	681a      	ldr	r2, [r3, #0]
 8015c26:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8015c2a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8015c2e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8015c32:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8015c34:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8015c38:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8015c3c:	9107      	str	r1, [sp, #28]
 8015c3e:	f88d 8020 	strb.w	r8, [sp, #32]
 8015c42:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8015c46:	9609      	str	r6, [sp, #36]	; 0x24
 8015c48:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8015c4c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8015c50:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8015c54:	b10b      	cbz	r3, 8015c5a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8015c56:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8015c58:	b905      	cbnz	r5, 8015c5c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8015c5a:	6895      	ldr	r5, [r2, #8]
 8015c5c:	ae05      	add	r6, sp, #20
 8015c5e:	4621      	mov	r1, r4
 8015c60:	4630      	mov	r0, r6
 8015c62:	f003 fa2f 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015c66:	4b13      	ldr	r3, [pc, #76]	; (8015cb4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8015c68:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015c6a:	6818      	ldr	r0, [r3, #0]
 8015c6c:	f7ee fc76 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 8015c70:	6823      	ldr	r3, [r4, #0]
 8015c72:	4680      	mov	r8, r0
 8015c74:	4620      	mov	r0, r4
 8015c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015c78:	4798      	blx	r3
 8015c7a:	6823      	ldr	r3, [r4, #0]
 8015c7c:	4681      	mov	r9, r0
 8015c7e:	4620      	mov	r0, r4
 8015c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c84:	4798      	blx	r3
 8015c86:	ab07      	add	r3, sp, #28
 8015c88:	f8cd 8004 	str.w	r8, [sp, #4]
 8015c8c:	9300      	str	r3, [sp, #0]
 8015c8e:	463b      	mov	r3, r7
 8015c90:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8015c94:	4628      	mov	r0, r5
 8015c96:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015c9a:	f7ee fc0b 	bl	80044b4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015c9e:	b00d      	add	sp, #52	; 0x34
 8015ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ca4:	2400ff68 	.word	0x2400ff68
 8015ca8:	2400ff64 	.word	0x2400ff64
 8015cac:	2400ff6c 	.word	0x2400ff6c
 8015cb0:	2400ff14 	.word	0x2400ff14
 8015cb4:	2400ff70 	.word	0x2400ff70

08015cb8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 8015cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cbc:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8015cc0:	b0a0      	sub	sp, #128	; 0x80
 8015cc2:	4604      	mov	r4, r0
 8015cc4:	b193      	cbz	r3, 8015cec <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015cc6:	4b30      	ldr	r3, [pc, #192]	; (8015d88 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 8015cc8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015cca:	881b      	ldrh	r3, [r3, #0]
 8015ccc:	428b      	cmp	r3, r1
 8015cce:	d90d      	bls.n	8015cec <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015cd0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	dd09      	ble.n	8015cec <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015cd8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	dd05      	ble.n	8015cec <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015ce0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8015ce4:	b12b      	cbz	r3, 8015cf2 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 8015ce6:	6803      	ldr	r3, [r0, #0]
 8015ce8:	695b      	ldr	r3, [r3, #20]
 8015cea:	4798      	blx	r3
 8015cec:	b020      	add	sp, #128	; 0x80
 8015cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cf2:	4b26      	ldr	r3, [pc, #152]	; (8015d8c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8015cfa:	4b25      	ldr	r3, [pc, #148]	; (8015d90 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015d02:	4b24      	ldr	r3, [pc, #144]	; (8015d94 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 8015d04:	6818      	ldr	r0, [r3, #0]
 8015d06:	f7ee fc29 	bl	800455c <_ZNK8touchgfx5Texts7getTextEt>
 8015d0a:	4606      	mov	r6, r0
 8015d0c:	a807      	add	r0, sp, #28
 8015d0e:	f003 fdb0 	bl	8019872 <_ZN8touchgfx12TextProviderC1Ev>
 8015d12:	682b      	ldr	r3, [r5, #0]
 8015d14:	4628      	mov	r0, r5
 8015d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d18:	4798      	blx	r3
 8015d1a:	682b      	ldr	r3, [r5, #0]
 8015d1c:	4607      	mov	r7, r0
 8015d1e:	4628      	mov	r0, r5
 8015d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015d22:	4798      	blx	r3
 8015d24:	6823      	ldr	r3, [r4, #0]
 8015d26:	4605      	mov	r5, r0
 8015d28:	4620      	mov	r0, r4
 8015d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015d2c:	4798      	blx	r3
 8015d2e:	6823      	ldr	r3, [r4, #0]
 8015d30:	4680      	mov	r8, r0
 8015d32:	4620      	mov	r0, r4
 8015d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d38:	4798      	blx	r3
 8015d3a:	462b      	mov	r3, r5
 8015d3c:	463a      	mov	r2, r7
 8015d3e:	4631      	mov	r1, r6
 8015d40:	e9cd 8000 	strd	r8, r0, [sp]
 8015d44:	a807      	add	r0, sp, #28
 8015d46:	f003 fe04 	bl	8019952 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015d4a:	a807      	add	r0, sp, #28
 8015d4c:	f004 f9be 	bl	801a0cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015d50:	280a      	cmp	r0, #10
 8015d52:	d103      	bne.n	8015d5c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8015d54:	6823      	ldr	r3, [r4, #0]
 8015d56:	4620      	mov	r0, r4
 8015d58:	695b      	ldr	r3, [r3, #20]
 8015d5a:	e7c6      	b.n	8015cea <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8015d5c:	a807      	add	r0, sp, #28
 8015d5e:	f004 f9b5 	bl	801a0cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015d62:	2800      	cmp	r0, #0
 8015d64:	d1f4      	bne.n	8015d50 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 8015d66:	ad04      	add	r5, sp, #16
 8015d68:	4621      	mov	r1, r4
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	f7ff fc5a 	bl	8015624 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8015d70:	ab02      	add	r3, sp, #8
 8015d72:	6822      	ldr	r2, [r4, #0]
 8015d74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015d78:	6912      	ldr	r2, [r2, #16]
 8015d7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8015d7e:	4619      	mov	r1, r3
 8015d80:	4620      	mov	r0, r4
 8015d82:	4790      	blx	r2
 8015d84:	e7b2      	b.n	8015cec <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015d86:	bf00      	nop
 8015d88:	2400ff68 	.word	0x2400ff68
 8015d8c:	2400ff64 	.word	0x2400ff64
 8015d90:	2400ff6c 	.word	0x2400ff6c
 8015d94:	2400ff70 	.word	0x2400ff70

08015d98 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8015d98:	b510      	push	{r4, lr}
 8015d9a:	4604      	mov	r4, r0
 8015d9c:	2148      	movs	r1, #72	; 0x48
 8015d9e:	f00d faa2 	bl	80232e6 <_ZdlPvj>
 8015da2:	4620      	mov	r0, r4
 8015da4:	bd10      	pop	{r4, pc}

08015da6 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 8015da6:	4770      	bx	lr

08015da8 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8015da8:	b510      	push	{r4, lr}
 8015daa:	4604      	mov	r4, r0
 8015dac:	2134      	movs	r1, #52	; 0x34
 8015dae:	f00d fa9a 	bl	80232e6 <_ZdlPvj>
 8015db2:	4620      	mov	r0, r4
 8015db4:	bd10      	pop	{r4, pc}

08015db6 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8015db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dba:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8015dbc:	4604      	mov	r4, r0
 8015dbe:	460e      	mov	r6, r1
 8015dc0:	b08e      	sub	sp, #56	; 0x38
 8015dc2:	b218      	sxth	r0, r3
 8015dc4:	8921      	ldrh	r1, [r4, #8]
 8015dc6:	005b      	lsls	r3, r3, #1
 8015dc8:	8962      	ldrh	r2, [r4, #10]
 8015dca:	f8ad 0000 	strh.w	r0, [sp]
 8015dce:	b29b      	uxth	r3, r3
 8015dd0:	f8ad 0002 	strh.w	r0, [sp, #2]
 8015dd4:	1ac9      	subs	r1, r1, r3
 8015dd6:	1ad3      	subs	r3, r2, r3
 8015dd8:	b209      	sxth	r1, r1
 8015dda:	b21b      	sxth	r3, r3
 8015ddc:	2900      	cmp	r1, #0
 8015dde:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015de2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015de6:	dd5e      	ble.n	8015ea6 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	dd5c      	ble.n	8015ea6 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8015dec:	6830      	ldr	r0, [r6, #0]
 8015dee:	ab02      	add	r3, sp, #8
 8015df0:	6871      	ldr	r1, [r6, #4]
 8015df2:	c303      	stmia	r3!, {r0, r1}
 8015df4:	4669      	mov	r1, sp
 8015df6:	a802      	add	r0, sp, #8
 8015df8:	f7fd fade 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	a902      	add	r1, sp, #8
 8015e00:	f7ff febc 	bl	8015b7c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8015e04:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015e06:	2800      	cmp	r0, #0
 8015e08:	d05f      	beq.n	8015eca <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8015e0a:	8963      	ldrh	r3, [r4, #10]
 8015e0c:	b202      	sxth	r2, r0
 8015e0e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8015e12:	2500      	movs	r5, #0
 8015e14:	1a1f      	subs	r7, r3, r0
 8015e16:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8015e1a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015e1e:	b21b      	sxth	r3, r3
 8015e20:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8015e24:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8015e28:	af04      	add	r7, sp, #16
 8015e2a:	1a09      	subs	r1, r1, r0
 8015e2c:	9506      	str	r5, [sp, #24]
 8015e2e:	f8ad 201e 	strh.w	r2, [sp, #30]
 8015e32:	f8ad 5020 	strh.w	r5, [sp, #32]
 8015e36:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8015e3a:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8015e3e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8015e42:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8015e46:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015e4a:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8015e4e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8015e52:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015e56:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015e5a:	ab06      	add	r3, sp, #24
 8015e5c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015e60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e64:	e887 0003 	stmia.w	r7, {r0, r1}
 8015e68:	4631      	mov	r1, r6
 8015e6a:	4638      	mov	r0, r7
 8015e6c:	f7fd faa4 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 8015e70:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	dd12      	ble.n	8015e9e <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8015e78:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	dd0e      	ble.n	8015e9e <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8015e80:	6823      	ldr	r3, [r4, #0]
 8015e82:	4639      	mov	r1, r7
 8015e84:	4620      	mov	r0, r4
 8015e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e88:	4798      	blx	r3
 8015e8a:	f7fe fdbd 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 8015e8e:	6803      	ldr	r3, [r0, #0]
 8015e90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015e92:	4639      	mov	r1, r7
 8015e94:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015e98:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015e9c:	47c0      	blx	r8
 8015e9e:	3501      	adds	r5, #1
 8015ea0:	2d04      	cmp	r5, #4
 8015ea2:	d1da      	bne.n	8015e5a <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8015ea4:	e011      	b.n	8015eca <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8015ea6:	6830      	ldr	r0, [r6, #0]
 8015ea8:	ab06      	add	r3, sp, #24
 8015eaa:	6871      	ldr	r1, [r6, #4]
 8015eac:	c303      	stmia	r3!, {r0, r1}
 8015eae:	6823      	ldr	r3, [r4, #0]
 8015eb0:	a906      	add	r1, sp, #24
 8015eb2:	4620      	mov	r0, r4
 8015eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015eb6:	4798      	blx	r3
 8015eb8:	f7fe fda6 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 8015ebc:	6803      	ldr	r3, [r0, #0]
 8015ebe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015ec0:	a906      	add	r1, sp, #24
 8015ec2:	6a1d      	ldr	r5, [r3, #32]
 8015ec4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015ec8:	47a8      	blx	r5
 8015eca:	b00e      	add	sp, #56	; 0x38
 8015ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ed0 <_ZN8touchgfx5ImageD1Ev>:
 8015ed0:	4770      	bx	lr

08015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8015ed2:	b570      	push	{r4, r5, r6, lr}
 8015ed4:	880b      	ldrh	r3, [r1, #0]
 8015ed6:	460d      	mov	r5, r1
 8015ed8:	4604      	mov	r4, r0
 8015eda:	84c3      	strh	r3, [r0, #38]	; 0x26
 8015edc:	4608      	mov	r0, r1
 8015ede:	f005 f927 	bl	801b130 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015ee2:	4606      	mov	r6, r0
 8015ee4:	4628      	mov	r0, r5
 8015ee6:	f005 f957 	bl	801b198 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015eea:	6823      	ldr	r3, [r4, #0]
 8015eec:	4605      	mov	r5, r0
 8015eee:	4631      	mov	r1, r6
 8015ef0:	4620      	mov	r0, r4
 8015ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ef4:	4798      	blx	r3
 8015ef6:	6823      	ldr	r3, [r4, #0]
 8015ef8:	4629      	mov	r1, r5
 8015efa:	4620      	mov	r0, r4
 8015efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f02:	4718      	bx	r3

08015f04 <_ZN8touchgfx5ImageD0Ev>:
 8015f04:	b510      	push	{r4, lr}
 8015f06:	4604      	mov	r4, r0
 8015f08:	212c      	movs	r1, #44	; 0x2c
 8015f0a:	f00d f9ec 	bl	80232e6 <_ZdlPvj>
 8015f0e:	4620      	mov	r0, r4
 8015f10:	bd10      	pop	{r4, pc}

08015f12 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8015f12:	b510      	push	{r4, lr}
 8015f14:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8015f18:	4604      	mov	r4, r0
 8015f1a:	2bff      	cmp	r3, #255	; 0xff
 8015f1c:	d006      	beq.n	8015f2c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8015f1e:	2300      	movs	r3, #0
 8015f20:	8003      	strh	r3, [r0, #0]
 8015f22:	8043      	strh	r3, [r0, #2]
 8015f24:	8083      	strh	r3, [r0, #4]
 8015f26:	80c3      	strh	r3, [r0, #6]
 8015f28:	4620      	mov	r0, r4
 8015f2a:	bd10      	pop	{r4, pc}
 8015f2c:	3126      	adds	r1, #38	; 0x26
 8015f2e:	f005 f967 	bl	801b200 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015f32:	e7f9      	b.n	8015f28 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08015f34 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8015f34:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8015f38:	b12a      	cbz	r2, 8015f46 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015f3a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8015f3e:	b112      	cbz	r2, 8015f46 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015f40:	6803      	ldr	r3, [r0, #0]
 8015f42:	695b      	ldr	r3, [r3, #20]
 8015f44:	4718      	bx	r3
 8015f46:	4770      	bx	lr

08015f48 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8015f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f4c:	4604      	mov	r4, r0
 8015f4e:	b088      	sub	sp, #32
 8015f50:	2500      	movs	r5, #0
 8015f52:	460f      	mov	r7, r1
 8015f54:	f854 3b26 	ldr.w	r3, [r4], #38
 8015f58:	a904      	add	r1, sp, #16
 8015f5a:	4606      	mov	r6, r0
 8015f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015f62:	4798      	blx	r3
 8015f64:	4620      	mov	r0, r4
 8015f66:	f005 f8e3 	bl	801b130 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015f6a:	4680      	mov	r8, r0
 8015f6c:	4620      	mov	r0, r4
 8015f6e:	f005 f913 	bl	801b198 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015f72:	9506      	str	r5, [sp, #24]
 8015f74:	ad06      	add	r5, sp, #24
 8015f76:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015f7a:	4639      	mov	r1, r7
 8015f7c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8015f80:	4628      	mov	r0, r5
 8015f82:	f7fd fa19 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 8015f86:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	dd19      	ble.n	8015fc2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015f8e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	dd15      	ble.n	8015fc2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015f96:	4b0c      	ldr	r3, [pc, #48]	; (8015fc8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015f9e:	b10a      	cbz	r2, 8015fa4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8015fa0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015fa2:	b900      	cbnz	r0, 8015fa6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8015fa4:	6898      	ldr	r0, [r3, #8]
 8015fa6:	2701      	movs	r7, #1
 8015fa8:	6801      	ldr	r1, [r0, #0]
 8015faa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015fae:	9702      	str	r7, [sp, #8]
 8015fb0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8015fb4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015fb8:	e9cd 5600 	strd	r5, r6, [sp]
 8015fbc:	688d      	ldr	r5, [r1, #8]
 8015fbe:	4621      	mov	r1, r4
 8015fc0:	47a8      	blx	r5
 8015fc2:	b008      	add	sp, #32
 8015fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fc8:	2400ff14 	.word	0x2400ff14

08015fcc <_ZN8touchgfx8KeyboardD1Ev>:
 8015fcc:	4770      	bx	lr

08015fce <_ZN8touchgfx8Keyboard14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015fce:	b538      	push	{r3, r4, r5, lr}
 8015fd0:	4604      	mov	r4, r0
 8015fd2:	4615      	mov	r5, r2
 8015fd4:	f7fd fac8 	bl	8013568 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8015fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fdc:	81a3      	strh	r3, [r4, #12]
 8015fde:	f04f 33ff 	mov.w	r3, #4294967295
 8015fe2:	6223      	str	r3, [r4, #32]
 8015fe4:	682b      	ldr	r3, [r5, #0]
 8015fe6:	61e3      	str	r3, [r4, #28]
 8015fe8:	602c      	str	r4, [r5, #0]
 8015fea:	bd38      	pop	{r3, r4, r5, pc}

08015fec <_ZN8touchgfx8KeyboardD0Ev>:
 8015fec:	b510      	push	{r4, lr}
 8015fee:	4604      	mov	r4, r0
 8015ff0:	21e8      	movs	r1, #232	; 0xe8
 8015ff2:	f00d f978 	bl	80232e6 <_ZdlPvj>
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	bd10      	pop	{r4, pc}

08015ffa <_ZNK8touchgfx4Rect9intersectEss>:
 8015ffa:	b510      	push	{r4, lr}
 8015ffc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016000:	428b      	cmp	r3, r1
 8016002:	dc10      	bgt.n	8016026 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8016004:	8884      	ldrh	r4, [r0, #4]
 8016006:	4423      	add	r3, r4
 8016008:	b21b      	sxth	r3, r3
 801600a:	4299      	cmp	r1, r3
 801600c:	da0b      	bge.n	8016026 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801600e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016012:	4293      	cmp	r3, r2
 8016014:	dc07      	bgt.n	8016026 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8016016:	88c0      	ldrh	r0, [r0, #6]
 8016018:	4418      	add	r0, r3
 801601a:	b200      	sxth	r0, r0
 801601c:	4282      	cmp	r2, r0
 801601e:	bfac      	ite	ge
 8016020:	2000      	movge	r0, #0
 8016022:	2001      	movlt	r0, #1
 8016024:	bd10      	pop	{r4, pc}
 8016026:	2000      	movs	r0, #0
 8016028:	e7fc      	b.n	8016024 <_ZNK8touchgfx4Rect9intersectEss+0x2a>
	...

0801602c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE>:
 801602c:	b530      	push	{r4, r5, lr}
 801602e:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8016032:	b085      	sub	sp, #20
 8016034:	4604      	mov	r4, r0
 8016036:	460d      	mov	r5, r1
 8016038:	b1f3      	cbz	r3, 8016078 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 801603a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801603e:	30bc      	adds	r0, #188	; 0xbc
 8016040:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016044:	f7ff ffd9 	bl	8015ffa <_ZNK8touchgfx4Rect9intersectEss>
 8016048:	b9b0      	cbnz	r0, 8016078 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 801604a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 801604e:	b99b      	cbnz	r3, 8016078 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8016050:	480a      	ldr	r0, [pc, #40]	; (801607c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x50>)
 8016052:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016056:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801605a:	9001      	str	r0, [sp, #4]
 801605c:	2002      	movs	r0, #2
 801605e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016062:	6823      	ldr	r3, [r4, #0]
 8016064:	f88d 0008 	strb.w	r0, [sp, #8]
 8016068:	4620      	mov	r0, r4
 801606a:	f8ad 100a 	strh.w	r1, [sp, #10]
 801606e:	a901      	add	r1, sp, #4
 8016070:	f8ad 200c 	strh.w	r2, [sp, #12]
 8016074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016076:	4798      	blx	r3
 8016078:	b005      	add	sp, #20
 801607a:	bd30      	pop	{r4, r5, pc}
 801607c:	08026b74 	.word	0x08026b74

08016080 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8016080:	b510      	push	{r4, lr}
 8016082:	f9b1 4000 	ldrsh.w	r4, [r1]
 8016086:	888a      	ldrh	r2, [r1, #4]
 8016088:	f9b0 3000 	ldrsh.w	r3, [r0]
 801608c:	4422      	add	r2, r4
 801608e:	b212      	sxth	r2, r2
 8016090:	4293      	cmp	r3, r2
 8016092:	da15      	bge.n	80160c0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016094:	8882      	ldrh	r2, [r0, #4]
 8016096:	4413      	add	r3, r2
 8016098:	b21b      	sxth	r3, r3
 801609a:	429c      	cmp	r4, r3
 801609c:	da10      	bge.n	80160c0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801609e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80160a2:	88c9      	ldrh	r1, [r1, #6]
 80160a4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80160a8:	4419      	add	r1, r3
 80160aa:	b209      	sxth	r1, r1
 80160ac:	428a      	cmp	r2, r1
 80160ae:	da07      	bge.n	80160c0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80160b0:	88c0      	ldrh	r0, [r0, #6]
 80160b2:	4410      	add	r0, r2
 80160b4:	b200      	sxth	r0, r0
 80160b6:	4283      	cmp	r3, r0
 80160b8:	bfac      	ite	ge
 80160ba:	2000      	movge	r0, #0
 80160bc:	2001      	movlt	r0, #1
 80160be:	bd10      	pop	{r4, pc}
 80160c0:	2000      	movs	r0, #0
 80160c2:	e7fc      	b.n	80160be <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080160c4 <_ZN8touchgfx8DrawableC1Ev>:
 80160c4:	4a0a      	ldr	r2, [pc, #40]	; (80160f0 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 80160c6:	6002      	str	r2, [r0, #0]
 80160c8:	2200      	movs	r2, #0
 80160ca:	8082      	strh	r2, [r0, #4]
 80160cc:	80c2      	strh	r2, [r0, #6]
 80160ce:	8102      	strh	r2, [r0, #8]
 80160d0:	8142      	strh	r2, [r0, #10]
 80160d2:	8182      	strh	r2, [r0, #12]
 80160d4:	81c2      	strh	r2, [r0, #14]
 80160d6:	8202      	strh	r2, [r0, #16]
 80160d8:	8242      	strh	r2, [r0, #18]
 80160da:	61c2      	str	r2, [r0, #28]
 80160dc:	8402      	strh	r2, [r0, #32]
 80160de:	8442      	strh	r2, [r0, #34]	; 0x22
 80160e0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80160e4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80160e8:	2201      	movs	r2, #1
 80160ea:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 80160ee:	4770      	bx	lr
 80160f0:	08027120 	.word	0x08027120

080160f4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 80160f4:	b538      	push	{r3, r4, r5, lr}
 80160f6:	4604      	mov	r4, r0
 80160f8:	460d      	mov	r5, r1
 80160fa:	2226      	movs	r2, #38	; 0x26
 80160fc:	2100      	movs	r1, #0
 80160fe:	f00d fab7 	bl	8023670 <memset>
 8016102:	4620      	mov	r0, r4
 8016104:	f7ff ffde 	bl	80160c4 <_ZN8touchgfx8DrawableC1Ev>
 8016108:	4b06      	ldr	r3, [pc, #24]	; (8016124 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 801610a:	4620      	mov	r0, r4
 801610c:	4629      	mov	r1, r5
 801610e:	6023      	str	r3, [r4, #0]
 8016110:	882b      	ldrh	r3, [r5, #0]
 8016112:	84e3      	strh	r3, [r4, #38]	; 0x26
 8016114:	23ff      	movs	r3, #255	; 0xff
 8016116:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 801611a:	f7ff feda 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801611e:	4620      	mov	r0, r4
 8016120:	bd38      	pop	{r3, r4, r5, pc}
 8016122:	bf00      	nop
 8016124:	08026f80 	.word	0x08026f80

08016128 <_ZN8touchgfx8KeyboardC1Ev>:
 8016128:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801612c:	4604      	mov	r4, r0
 801612e:	2500      	movs	r5, #0
 8016130:	f7ff ffc8 	bl	80160c4 <_ZN8touchgfx8DrawableC1Ev>
 8016134:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8016138:	4b2f      	ldr	r3, [pc, #188]	; (80161f8 <_ZN8touchgfx8KeyboardC1Ev+0xd0>)
 801613a:	f104 0938 	add.w	r9, r4, #56	; 0x38
 801613e:	af02      	add	r7, sp, #8
 8016140:	f104 0864 	add.w	r8, r4, #100	; 0x64
 8016144:	6023      	str	r3, [r4, #0]
 8016146:	4648      	mov	r0, r9
 8016148:	f827 6d04 	strh.w	r6, [r7, #-4]!
 801614c:	4639      	mov	r1, r7
 801614e:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
 8016152:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 8016156:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 801615a:	f7ff ffcb 	bl	80160f4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801615e:	2226      	movs	r2, #38	; 0x26
 8016160:	4629      	mov	r1, r5
 8016162:	4640      	mov	r0, r8
 8016164:	f00d fa84 	bl	8023670 <memset>
 8016168:	4640      	mov	r0, r8
 801616a:	f7ff ffab 	bl	80160c4 <_ZN8touchgfx8DrawableC1Ev>
 801616e:	4b23      	ldr	r3, [pc, #140]	; (80161fc <_ZN8touchgfx8KeyboardC1Ev+0xd4>)
 8016170:	4639      	mov	r1, r7
 8016172:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 8016176:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 801617a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 801617e:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 8016182:	4650      	mov	r0, sl
 8016184:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8016188:	4b1d      	ldr	r3, [pc, #116]	; (8016200 <_ZN8touchgfx8KeyboardC1Ev+0xd8>)
 801618a:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 801618e:	6663      	str	r3, [r4, #100]	; 0x64
 8016190:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
 8016194:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8016198:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 801619c:	f8a4 60a4 	strh.w	r6, [r4, #164]	; 0xa4
 80161a0:	f8a4 60a6 	strh.w	r6, [r4, #166]	; 0xa6
 80161a4:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 80161a8:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 80161ac:	f8ad 6004 	strh.w	r6, [sp, #4]
 80161b0:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 80161b4:	f7ff ff9e 	bl	80160f4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80161b8:	2301      	movs	r3, #1
 80161ba:	462a      	mov	r2, r5
 80161bc:	4629      	mov	r1, r5
 80161be:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80161c2:	4648      	mov	r0, r9
 80161c4:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
 80161c8:	f7fd faa9 	bl	801371e <_ZN8touchgfx8Drawable5setXYEss>
 80161cc:	4649      	mov	r1, r9
 80161ce:	4620      	mov	r0, r4
 80161d0:	f7fc ff64 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80161d4:	4651      	mov	r1, sl
 80161d6:	4620      	mov	r0, r4
 80161d8:	f884 50dd 	strb.w	r5, [r4, #221]	; 0xdd
 80161dc:	f7fc ff5e 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80161e0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80161e4:	4620      	mov	r0, r4
 80161e6:	4641      	mov	r1, r8
 80161e8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80161ec:	f7fc ff56 	bl	801309c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80161f0:	4620      	mov	r0, r4
 80161f2:	b002      	add	sp, #8
 80161f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161f8:	08026fec 	.word	0x08026fec
 80161fc:	08024fe8 	.word	0x08024fe8
 8016200:	08025d50 	.word	0x08025d50

08016204 <_ZN8touchgfx8Keyboard9setBufferEPtt>:
 8016204:	b510      	push	{r4, lr}
 8016206:	4604      	mov	r4, r0
 8016208:	6301      	str	r1, [r0, #48]	; 0x30
 801620a:	8682      	strh	r2, [r0, #52]	; 0x34
 801620c:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
 8016210:	4608      	mov	r0, r1
 8016212:	f004 fa95 	bl	801a740 <_ZN8touchgfx7Unicode6strlenEPKt>
 8016216:	86e0      	strh	r0, [r4, #54]	; 0x36
 8016218:	bd10      	pop	{r4, pc}

0801621a <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>:
 801621a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801621e:	4605      	mov	r5, r0
 8016220:	460c      	mov	r4, r1
 8016222:	f8c5 10b0 	str.w	r1, [r5, #176]	; 0xb0
 8016226:	b309      	cbz	r1, 801626c <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE+0x52>
 8016228:	460f      	mov	r7, r1
 801622a:	a902      	add	r1, sp, #8
 801622c:	f105 0664 	add.w	r6, r5, #100	; 0x64
 8016230:	3038      	adds	r0, #56	; 0x38
 8016232:	f837 3b1c 	ldrh.w	r3, [r7], #28
 8016236:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801623a:	f7ff fe4a 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801623e:	4639      	mov	r1, r7
 8016240:	4630      	mov	r0, r6
 8016242:	f7ff fc71 	bl	8015b28 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8016246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016248:	4630      	mov	r0, r6
 801624a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 801624e:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
 8016252:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
 8016256:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801625a:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 801625e:	f7fd fa5e 	bl	801371e <_ZN8touchgfx8Drawable5setXYEss>
 8016262:	4642      	mov	r2, r8
 8016264:	4639      	mov	r1, r7
 8016266:	4630      	mov	r0, r6
 8016268:	f7fd fa66 	bl	8013738 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801626c:	682b      	ldr	r3, [r5, #0]
 801626e:	4628      	mov	r0, r5
 8016270:	695b      	ldr	r3, [r3, #20]
 8016272:	4798      	blx	r3
 8016274:	b002      	add	sp, #8
 8016276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801627c <_ZN8touchgfx8Keyboard18setTextIndentationEv>:
 801627c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016280:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8016284:	4604      	mov	r4, r0
 8016286:	b343      	cbz	r3, 80162da <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x5e>
 8016288:	4a15      	ldr	r2, [pc, #84]	; (80162e0 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x64>)
 801628a:	f100 0764 	add.w	r7, r0, #100	; 0x64
 801628e:	8c19      	ldrh	r1, [r3, #32]
 8016290:	6812      	ldr	r2, [r2, #0]
 8016292:	4638      	mov	r0, r7
 8016294:	8add      	ldrh	r5, [r3, #22]
 8016296:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 801629a:	4a12      	ldr	r2, [pc, #72]	; (80162e4 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x68>)
 801629c:	f9b3 8018 	ldrsh.w	r8, [r3, #24]
 80162a0:	6812      	ldr	r2, [r2, #0]
 80162a2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80162a6:	8a59      	ldrh	r1, [r3, #18]
 80162a8:	7a16      	ldrb	r6, [r2, #8]
 80162aa:	b2b2      	uxth	r2, r6
 80162ac:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 80162b0:	1a89      	subs	r1, r1, r2
 80162b2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80162b6:	b22d      	sxth	r5, r5
 80162b8:	b209      	sxth	r1, r1
 80162ba:	f7fd fa30 	bl	801371e <_ZN8touchgfx8Drawable5setXYEss>
 80162be:	4642      	mov	r2, r8
 80162c0:	4629      	mov	r1, r5
 80162c2:	4638      	mov	r0, r7
 80162c4:	f7fd fa38 	bl	8013738 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80162c8:	2300      	movs	r3, #0
 80162ca:	f04f 32ff 	mov.w	r2, #4294967295
 80162ce:	f884 609b 	strb.w	r6, [r4, #155]	; 0x9b
 80162d2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80162d6:	e9c4 3228 	strd	r3, r2, [r4, #160]	; 0xa0
 80162da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162de:	bf00      	nop
 80162e0:	2400ff64 	.word	0x2400ff64
 80162e4:	2400ff6c 	.word	0x2400ff6c

080162e8 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>:
 80162e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162ec:	4690      	mov	r8, r2
 80162ee:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 80162f2:	2200      	movs	r2, #0
 80162f4:	4606      	mov	r6, r0
 80162f6:	4699      	mov	r9, r3
 80162f8:	8042      	strh	r2, [r0, #2]
 80162fa:	8082      	strh	r2, [r0, #4]
 80162fc:	80c2      	strh	r2, [r0, #6]
 80162fe:	8102      	strh	r2, [r0, #8]
 8016300:	7002      	strb	r2, [r0, #0]
 8016302:	b1c7      	cbz	r7, 8016336 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8016304:	f897 a008 	ldrb.w	sl, [r7, #8]
 8016308:	4615      	mov	r5, r2
 801630a:	f04f 0b0c 	mov.w	fp, #12
 801630e:	b2eb      	uxtb	r3, r5
 8016310:	459a      	cmp	sl, r3
 8016312:	d910      	bls.n	8016336 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8016314:	687c      	ldr	r4, [r7, #4]
 8016316:	464a      	mov	r2, r9
 8016318:	4641      	mov	r1, r8
 801631a:	fb0b 4405 	mla	r4, fp, r5, r4
 801631e:	3501      	adds	r5, #1
 8016320:	1ca0      	adds	r0, r4, #2
 8016322:	f7ff fe6a 	bl	8015ffa <_ZNK8touchgfx4Rect9intersectEss>
 8016326:	2800      	cmp	r0, #0
 8016328:	d0f1      	beq.n	801630e <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x26>
 801632a:	6823      	ldr	r3, [r4, #0]
 801632c:	6033      	str	r3, [r6, #0]
 801632e:	6863      	ldr	r3, [r4, #4]
 8016330:	6073      	str	r3, [r6, #4]
 8016332:	68a3      	ldr	r3, [r4, #8]
 8016334:	60b3      	str	r3, [r6, #8]
 8016336:	4630      	mov	r0, r6
 8016338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801633c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>:
 801633c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016340:	2500      	movs	r5, #0
 8016342:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8016346:	4606      	mov	r6, r0
 8016348:	4690      	mov	r8, r2
 801634a:	4699      	mov	r9, r3
 801634c:	6085      	str	r5, [r0, #8]
 801634e:	e9c0 5500 	strd	r5, r5, [r0]
 8016352:	b307      	cbz	r7, 8016396 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 8016354:	f897 a010 	ldrb.w	sl, [r7, #16]
 8016358:	b2eb      	uxtb	r3, r5
 801635a:	459a      	cmp	sl, r3
 801635c:	d91b      	bls.n	8016396 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 801635e:	68fc      	ldr	r4, [r7, #12]
 8016360:	464a      	mov	r2, r9
 8016362:	4641      	mov	r1, r8
 8016364:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8016368:	3501      	adds	r5, #1
 801636a:	4620      	mov	r0, r4
 801636c:	f7ff fe45 	bl	8015ffa <_ZNK8touchgfx4Rect9intersectEss>
 8016370:	2800      	cmp	r0, #0
 8016372:	d0f1      	beq.n	8016358 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x1c>
 8016374:	4623      	mov	r3, r4
 8016376:	4632      	mov	r2, r6
 8016378:	f104 0508 	add.w	r5, r4, #8
 801637c:	6818      	ldr	r0, [r3, #0]
 801637e:	3308      	adds	r3, #8
 8016380:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016384:	4614      	mov	r4, r2
 8016386:	42ab      	cmp	r3, r5
 8016388:	c403      	stmia	r4!, {r0, r1}
 801638a:	4622      	mov	r2, r4
 801638c:	d1f6      	bne.n	801637c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x40>
 801638e:	6818      	ldr	r0, [r3, #0]
 8016390:	6020      	str	r0, [r4, #0]
 8016392:	889b      	ldrh	r3, [r3, #4]
 8016394:	80a3      	strh	r3, [r4, #4]
 8016396:	4630      	mov	r0, r6
 8016398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801639c <_ZNK8touchgfx8Keyboard13getCharForKeyEh>:
 801639c:	b570      	push	{r4, r5, r6, lr}
 801639e:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 80163a2:	b160      	cbz	r0, 80163be <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>
 80163a4:	7906      	ldrb	r6, [r0, #4]
 80163a6:	2300      	movs	r3, #0
 80163a8:	b2da      	uxtb	r2, r3
 80163aa:	4296      	cmp	r6, r2
 80163ac:	d908      	bls.n	80163c0 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x24>
 80163ae:	009a      	lsls	r2, r3, #2
 80163b0:	6804      	ldr	r4, [r0, #0]
 80163b2:	3301      	adds	r3, #1
 80163b4:	18a5      	adds	r5, r4, r2
 80163b6:	5ca2      	ldrb	r2, [r4, r2]
 80163b8:	428a      	cmp	r2, r1
 80163ba:	d1f5      	bne.n	80163a8 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0xc>
 80163bc:	8868      	ldrh	r0, [r5, #2]
 80163be:	bd70      	pop	{r4, r5, r6, pc}
 80163c0:	2000      	movs	r0, #0
 80163c2:	e7fc      	b.n	80163be <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>

080163c4 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE>:
 80163c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c8:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 80163cc:	b08d      	sub	sp, #52	; 0x34
 80163ce:	4605      	mov	r5, r0
 80163d0:	460e      	mov	r6, r1
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	f000 80c4 	beq.w	8016560 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 80163d8:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 80163da:	f004 fd49 	bl	801ae70 <_ZN8touchgfx11FontManager7getFontEt>
 80163de:	2800      	cmp	r0, #0
 80163e0:	f000 80be 	beq.w	8016560 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 80163e4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80163e8:	2400      	movs	r4, #0
 80163ea:	9007      	str	r0, [sp, #28]
 80163ec:	920a      	str	r2, [sp, #40]	; 0x28
 80163ee:	2201      	movs	r2, #1
 80163f0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80163f4:	f88d 2020 	strb.w	r2, [sp, #32]
 80163f8:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 80163fc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016400:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016402:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
 8016406:	9209      	str	r2, [sp, #36]	; 0x24
 8016408:	9402      	str	r4, [sp, #8]
 801640a:	6803      	ldr	r3, [r0, #0]
 801640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801640e:	4798      	blx	r3
 8016410:	4607      	mov	r7, r0
 8016412:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8016416:	fa5f f884 	uxtb.w	r8, r4
 801641a:	7a1a      	ldrb	r2, [r3, #8]
 801641c:	4542      	cmp	r2, r8
 801641e:	f240 809f 	bls.w	8016560 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8016422:	220c      	movs	r2, #12
 8016424:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8016428:	4631      	mov	r1, r6
 801642a:	fb02 f808 	mul.w	r8, r2, r8
 801642e:	eb09 0a08 	add.w	sl, r9, r8
 8016432:	f10a 0a02 	add.w	sl, sl, #2
 8016436:	4650      	mov	r0, sl
 8016438:	f7ff fe22 	bl	8016080 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801643c:	2800      	cmp	r0, #0
 801643e:	f000 808a 	beq.w	8016556 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 8016442:	f819 1008 	ldrb.w	r1, [r9, r8]
 8016446:	4628      	mov	r0, r5
 8016448:	f7ff ffa8 	bl	801639c <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 801644c:	4681      	mov	r9, r0
 801644e:	2800      	cmp	r0, #0
 8016450:	f000 8081 	beq.w	8016556 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 8016454:	f8da 0000 	ldr.w	r0, [sl]
 8016458:	ab03      	add	r3, sp, #12
 801645a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801645e:	c303      	stmia	r3!, {r0, r1}
 8016460:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8016464:	2102      	movs	r1, #2
 8016466:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 801646a:	1bd3      	subs	r3, r2, r7
 801646c:	fb93 f3f1 	sdiv	r3, r3, r1
 8016470:	b29b      	uxth	r3, r3
 8016472:	4498      	add	r8, r3
 8016474:	1ad3      	subs	r3, r2, r3
 8016476:	fa1f f888 	uxth.w	r8, r8
 801647a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801647e:	ab05      	add	r3, sp, #20
 8016480:	f8da 1004 	ldr.w	r1, [sl, #4]
 8016484:	f8ad 800e 	strh.w	r8, [sp, #14]
 8016488:	f8da 0000 	ldr.w	r0, [sl]
 801648c:	c303      	stmia	r3!, {r0, r1}
 801648e:	4631      	mov	r1, r6
 8016490:	a805      	add	r0, sp, #20
 8016492:	f7ff fdf5 	bl	8016080 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016496:	2800      	cmp	r0, #0
 8016498:	d05f      	beq.n	801655a <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x196>
 801649a:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 801649e:	f9b6 2000 	ldrsh.w	r2, [r6]
 80164a2:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80164a6:	4686      	mov	lr, r0
 80164a8:	4290      	cmp	r0, r2
 80164aa:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80164ae:	4450      	add	r0, sl
 80164b0:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 80164b4:	bfb8      	it	lt
 80164b6:	4696      	movlt	lr, r2
 80164b8:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80164bc:	4452      	add	r2, sl
 80164be:	b280      	uxth	r0, r0
 80164c0:	4299      	cmp	r1, r3
 80164c2:	468c      	mov	ip, r1
 80164c4:	b292      	uxth	r2, r2
 80164c6:	f8ad e014 	strh.w	lr, [sp, #20]
 80164ca:	fa0f fb80 	sxth.w	fp, r0
 80164ce:	bfb8      	it	lt
 80164d0:	469c      	movlt	ip, r3
 80164d2:	fa0f fa82 	sxth.w	sl, r2
 80164d6:	f8ad c016 	strh.w	ip, [sp, #22]
 80164da:	45d3      	cmp	fp, sl
 80164dc:	bfb8      	it	lt
 80164de:	4602      	movlt	r2, r0
 80164e0:	eba2 020e 	sub.w	r2, r2, lr
 80164e4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80164e8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80164ec:	4411      	add	r1, r2
 80164ee:	88f2      	ldrh	r2, [r6, #6]
 80164f0:	4413      	add	r3, r2
 80164f2:	b289      	uxth	r1, r1
 80164f4:	b29b      	uxth	r3, r3
 80164f6:	b208      	sxth	r0, r1
 80164f8:	b21a      	sxth	r2, r3
 80164fa:	4290      	cmp	r0, r2
 80164fc:	bfb8      	it	lt
 80164fe:	460b      	movlt	r3, r1
 8016500:	eba3 030c 	sub.w	r3, r3, ip
 8016504:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016508:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801650c:	4628      	mov	r0, r5
 801650e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016512:	f8ad 9008 	strh.w	r9, [sp, #8]
 8016516:	1a9b      	subs	r3, r3, r2
 8016518:	f8ad 3014 	strh.w	r3, [sp, #20]
 801651c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016520:	eba3 0808 	sub.w	r8, r3, r8
 8016524:	682b      	ldr	r3, [r5, #0]
 8016526:	f8ad 8016 	strh.w	r8, [sp, #22]
 801652a:	f10d 080c 	add.w	r8, sp, #12
 801652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016530:	4641      	mov	r1, r8
 8016532:	4798      	blx	r3
 8016534:	4b0c      	ldr	r3, [pc, #48]	; (8016568 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1a4>)
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801653c:	b10a      	cbz	r2, 8016542 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x17e>
 801653e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016540:	b900      	cbnz	r0, 8016544 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x180>
 8016542:	6898      	ldr	r0, [r3, #8]
 8016544:	ab02      	add	r3, sp, #8
 8016546:	9301      	str	r3, [sp, #4]
 8016548:	ab07      	add	r3, sp, #28
 801654a:	9300      	str	r3, [sp, #0]
 801654c:	ab05      	add	r3, sp, #20
 801654e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8016552:	f7ed ffaf 	bl	80044b4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016556:	3401      	adds	r4, #1
 8016558:	e75b      	b.n	8016412 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x4e>
 801655a:	e9cd 0005 	strd	r0, r0, [sp, #20]
 801655e:	e7d3      	b.n	8016508 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x144>
 8016560:	b00d      	add	sp, #52	; 0x34
 8016562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016566:	bf00      	nop
 8016568:	2400ff14 	.word	0x2400ff14

0801656c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE>:
 801656c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016570:	790d      	ldrb	r5, [r1, #4]
 8016572:	b08b      	sub	sp, #44	; 0x2c
 8016574:	4604      	mov	r4, r0
 8016576:	2d01      	cmp	r5, #1
 8016578:	d108      	bne.n	801658c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 801657a:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
 801657e:	b12b      	cbz	r3, 801658c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 8016580:	2300      	movs	r3, #0
 8016582:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8016586:	b00b      	add	sp, #44	; 0x2c
 8016588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801658c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016590:	2700      	movs	r7, #0
 8016592:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8016596:	a806      	add	r0, sp, #24
 8016598:	4642      	mov	r2, r8
 801659a:	4621      	mov	r1, r4
 801659c:	464b      	mov	r3, r9
 801659e:	e9cd 7701 	strd	r7, r7, [sp, #4]
 80165a2:	f7ff fecb 	bl	801633c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>
 80165a6:	9e08      	ldr	r6, [sp, #32]
 80165a8:	2e00      	cmp	r6, #0
 80165aa:	d049      	beq.n	8016640 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xd4>
 80165ac:	2d00      	cmp	r5, #0
 80165ae:	d133      	bne.n	8016618 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xac>
 80165b0:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 80165b4:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80165b8:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 80165bc:	4630      	mov	r0, r6
 80165be:	f7fd f8ae 	bl	801371e <_ZN8touchgfx8Drawable5setXYEss>
 80165c2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80165c6:	a90a      	add	r1, sp, #40	; 0x28
 80165c8:	f821 3d1c 	strh.w	r3, [r1, #-28]!
 80165cc:	4630      	mov	r0, r6
 80165ce:	f7ff fc80 	bl	8015ed2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80165d2:	2301      	movs	r3, #1
 80165d4:	4622      	mov	r2, r4
 80165d6:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 80165da:	ab01      	add	r3, sp, #4
 80165dc:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 80165e0:	6851      	ldr	r1, [r2, #4]
 80165e2:	c303      	stmia	r3!, {r0, r1}
 80165e4:	6823      	ldr	r3, [r4, #0]
 80165e6:	a901      	add	r1, sp, #4
 80165e8:	4620      	mov	r0, r4
 80165ea:	691b      	ldr	r3, [r3, #16]
 80165ec:	4798      	blx	r3
 80165ee:	1e6b      	subs	r3, r5, #1
 80165f0:	2b01      	cmp	r3, #1
 80165f2:	d8c8      	bhi.n	8016586 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 80165f4:	4622      	mov	r2, r4
 80165f6:	ab01      	add	r3, sp, #4
 80165f8:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 80165fc:	6851      	ldr	r1, [r2, #4]
 80165fe:	c303      	stmia	r3!, {r0, r1}
 8016600:	2300      	movs	r3, #0
 8016602:	a901      	add	r1, sp, #4
 8016604:	4620      	mov	r0, r4
 8016606:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801660a:	6823      	ldr	r3, [r4, #0]
 801660c:	691b      	ldr	r3, [r3, #16]
 801660e:	4798      	blx	r3
 8016610:	2d02      	cmp	r5, #2
 8016612:	d1b8      	bne.n	8016586 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 8016614:	2301      	movs	r3, #1
 8016616:	e7b4      	b.n	8016582 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x16>
 8016618:	2d01      	cmp	r5, #1
 801661a:	d1e8      	bne.n	80165ee <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801661c:	6833      	ldr	r3, [r6, #0]
 801661e:	4630      	mov	r0, r6
 8016620:	68db      	ldr	r3, [r3, #12]
 8016622:	4798      	blx	r3
 8016624:	2800      	cmp	r0, #0
 8016626:	d0e5      	beq.n	80165f4 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 8016628:	6833      	ldr	r3, [r6, #0]
 801662a:	4630      	mov	r0, r6
 801662c:	689b      	ldr	r3, [r3, #8]
 801662e:	4798      	blx	r3
 8016630:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016632:	2800      	cmp	r0, #0
 8016634:	d0de      	beq.n	80165f4 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 8016636:	6803      	ldr	r3, [r0, #0]
 8016638:	4639      	mov	r1, r7
 801663a:	689b      	ldr	r3, [r3, #8]
 801663c:	4798      	blx	r3
 801663e:	e7d6      	b.n	80165ee <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8016640:	4621      	mov	r1, r4
 8016642:	464b      	mov	r3, r9
 8016644:	4642      	mov	r2, r8
 8016646:	a803      	add	r0, sp, #12
 8016648:	f7ff fe4e 	bl	80162e8 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>
 801664c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8016650:	b985      	cbnz	r5, 8016674 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x108>
 8016652:	2900      	cmp	r1, #0
 8016654:	d0cb      	beq.n	80165ee <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8016656:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 801665a:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 801665e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016662:	4630      	mov	r0, r6
 8016664:	f7fd f85b 	bl	801371e <_ZN8touchgfx8Drawable5setXYEss>
 8016668:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801666c:	a90a      	add	r1, sp, #40	; 0x28
 801666e:	f821 3d28 	strh.w	r3, [r1, #-40]!
 8016672:	e7ab      	b.n	80165cc <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x60>
 8016674:	2d01      	cmp	r5, #1
 8016676:	d1ba      	bne.n	80165ee <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8016678:	2900      	cmp	r1, #0
 801667a:	d0b8      	beq.n	80165ee <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801667c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801667e:	2b00      	cmp	r3, #0
 8016680:	d0b5      	beq.n	80165ee <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8016682:	4620      	mov	r0, r4
 8016684:	f7ff fe8a 	bl	801639c <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 8016688:	4607      	mov	r7, r0
 801668a:	2800      	cmp	r0, #0
 801668c:	d0af      	beq.n	80165ee <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801668e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016690:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016692:	3b01      	subs	r3, #1
 8016694:	429a      	cmp	r2, r3
 8016696:	daaa      	bge.n	80165ee <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8016698:	f104 0864 	add.w	r8, r4, #100	; 0x64
 801669c:	4640      	mov	r0, r8
 801669e:	f7ff fb0b 	bl	8015cb8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 80166a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80166a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80166a6:	4640      	mov	r0, r8
 80166a8:	1c59      	adds	r1, r3, #1
 80166aa:	86e1      	strh	r1, [r4, #54]	; 0x36
 80166ac:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80166b0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80166b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80166b4:	f823 6012 	strh.w	r6, [r3, r2, lsl #1]
 80166b8:	f7ff fafe 	bl	8015cb8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 80166bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80166be:	2800      	cmp	r0, #0
 80166c0:	d1b9      	bne.n	8016636 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xca>
 80166c2:	e794      	b.n	80165ee <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>

080166c4 <_ZN8touchgfx8Keyboard17setBufferPositionEt>:
 80166c4:	86c1      	strh	r1, [r0, #54]	; 0x36
 80166c6:	3064      	adds	r0, #100	; 0x64
 80166c8:	f002 bc60 	b.w	8018f8c <_ZNK8touchgfx8Drawable10invalidateEv>

080166cc <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>:
 80166cc:	6803      	ldr	r3, [r0, #0]
 80166ce:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
 80166d2:	695b      	ldr	r3, [r3, #20]
 80166d4:	4718      	bx	r3

080166d6 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80166d6:	b510      	push	{r4, lr}
 80166d8:	6803      	ldr	r3, [r0, #0]
 80166da:	460c      	mov	r4, r1
 80166dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166de:	4798      	blx	r3
 80166e0:	1b03      	subs	r3, r0, r4
 80166e2:	4258      	negs	r0, r3
 80166e4:	4158      	adcs	r0, r3
 80166e6:	bd10      	pop	{r4, pc}

080166e8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80166e8:	4b01      	ldr	r3, [pc, #4]	; (80166f0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80166ea:	6019      	str	r1, [r3, #0]
 80166ec:	4770      	bx	lr
 80166ee:	bf00      	nop
 80166f0:	2400ff1c 	.word	0x2400ff1c

080166f4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80166f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f8:	4696      	mov	lr, r2
 80166fa:	b097      	sub	sp, #92	; 0x5c
 80166fc:	4605      	mov	r5, r0
 80166fe:	4614      	mov	r4, r2
 8016700:	460e      	mov	r6, r1
 8016702:	461f      	mov	r7, r3
 8016704:	f10d 0c1c 	add.w	ip, sp, #28
 8016708:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801670c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8016710:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8016714:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801671c:	f8de 3000 	ldr.w	r3, [lr]
 8016720:	f104 0e14 	add.w	lr, r4, #20
 8016724:	f8cc 3000 	str.w	r3, [ip]
 8016728:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801672c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016730:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016734:	f8de 3000 	ldr.w	r3, [lr]
 8016738:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801673c:	f8cc 3000 	str.w	r3, [ip]
 8016740:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016744:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016748:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801674c:	f8de 3000 	ldr.w	r3, [lr]
 8016750:	4631      	mov	r1, r6
 8016752:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016754:	4628      	mov	r0, r5
 8016756:	f8cc 3000 	str.w	r3, [ip]
 801675a:	682b      	ldr	r3, [r5, #0]
 801675c:	9201      	str	r2, [sp, #4]
 801675e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016760:	f8cd 8008 	str.w	r8, [sp, #8]
 8016764:	9200      	str	r2, [sp, #0]
 8016766:	aa07      	add	r2, sp, #28
 8016768:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801676c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8016770:	463b      	mov	r3, r7
 8016772:	47d8      	blx	fp
 8016774:	46a6      	mov	lr, r4
 8016776:	f10d 0c1c 	add.w	ip, sp, #28
 801677a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801677e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016782:	f8de 3000 	ldr.w	r3, [lr]
 8016786:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801678a:	343c      	adds	r4, #60	; 0x3c
 801678c:	f8cc 3000 	str.w	r3, [ip]
 8016790:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016794:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016798:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801679c:	f8de 3000 	ldr.w	r3, [lr]
 80167a0:	f8cc 3000 	str.w	r3, [ip]
 80167a4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80167a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80167ae:	6823      	ldr	r3, [r4, #0]
 80167b0:	4631      	mov	r1, r6
 80167b2:	4628      	mov	r0, r5
 80167b4:	f8cc 3000 	str.w	r3, [ip]
 80167b8:	682b      	ldr	r3, [r5, #0]
 80167ba:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80167be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80167c0:	f8cd 8008 	str.w	r8, [sp, #8]
 80167c4:	9201      	str	r2, [sp, #4]
 80167c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80167c8:	9200      	str	r2, [sp, #0]
 80167ca:	aa07      	add	r2, sp, #28
 80167cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80167ce:	463b      	mov	r3, r7
 80167d0:	47a0      	blx	r4
 80167d2:	b017      	add	sp, #92	; 0x5c
 80167d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167d8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80167d8:	2000      	movs	r0, #0
 80167da:	4770      	bx	lr

080167dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80167dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e0:	b08d      	sub	sp, #52	; 0x34
 80167e2:	4688      	mov	r8, r1
 80167e4:	f8d3 c000 	ldr.w	ip, [r3]
 80167e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80167ea:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80167ee:	680f      	ldr	r7, [r1, #0]
 80167f0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80167f4:	eba7 070c 	sub.w	r7, r7, ip
 80167f8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80167fc:	edd3 6a07 	vldr	s13, [r3, #28]
 8016800:	42bc      	cmp	r4, r7
 8016802:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016804:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016808:	bfa8      	it	ge
 801680a:	463c      	movge	r4, r7
 801680c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016810:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016814:	ee07 4a90 	vmov	s15, r4
 8016818:	eb09 0e0c 	add.w	lr, r9, ip
 801681c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8016820:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016824:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8016828:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801682c:	4571      	cmp	r1, lr
 801682e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016832:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016836:	ee25 5a27 	vmul.f32	s10, s10, s15
 801683a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801683e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016842:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016846:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801684a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801684e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016852:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016856:	f340 808c 	ble.w	8016972 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801685a:	eba1 060e 	sub.w	r6, r1, lr
 801685e:	fb96 f5f4 	sdiv	r5, r6, r4
 8016862:	ee07 5a10 	vmov	s14, r5
 8016866:	2d00      	cmp	r5, #0
 8016868:	fb04 6615 	mls	r6, r4, r5, r6
 801686c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016870:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016874:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016878:	eea7 1a05 	vfma.f32	s2, s14, s10
 801687c:	dd12      	ble.n	80168a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801687e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016882:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016886:	ee31 2a45 	vsub.f32	s4, s2, s10
 801688a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801688e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016892:	bf14      	ite	ne
 8016894:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016898:	eeb0 7a67 	vmoveq.f32	s14, s15
 801689c:	ee61 1a87 	vmul.f32	s3, s3, s14
 80168a0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80168a4:	fb05 f204 	mul.w	r2, r5, r4
 80168a8:	1abf      	subs	r7, r7, r2
 80168aa:	4494      	add	ip, r2
 80168ac:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80168b0:	4411      	add	r1, r2
 80168b2:	eb09 020c 	add.w	r2, r9, ip
 80168b6:	b209      	sxth	r1, r1
 80168b8:	443a      	add	r2, r7
 80168ba:	428a      	cmp	r2, r1
 80168bc:	bfc4      	itt	gt
 80168be:	eba1 0209 	subgt.w	r2, r1, r9
 80168c2:	eba2 070c 	subgt.w	r7, r2, ip
 80168c6:	2f00      	cmp	r7, #0
 80168c8:	dd50      	ble.n	801696c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80168ca:	fb97 f1f4 	sdiv	r1, r7, r4
 80168ce:	fb04 7211 	mls	r2, r4, r1, r7
 80168d2:	b90a      	cbnz	r2, 80168d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80168d4:	3901      	subs	r1, #1
 80168d6:	4622      	mov	r2, r4
 80168d8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80168dc:	6840      	ldr	r0, [r0, #4]
 80168de:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80168e2:	44b6      	add	lr, r6
 80168e4:	f8d0 a000 	ldr.w	sl, [r0]
 80168e8:	2900      	cmp	r1, #0
 80168ea:	bfcc      	ite	gt
 80168ec:	46a1      	movgt	r9, r4
 80168ee:	4691      	movle	r9, r2
 80168f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80168f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80168f4:	fb04 e505 	mla	r5, r4, r5, lr
 80168f8:	eef0 6a42 	vmov.f32	s13, s4
 80168fc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016900:	9008      	str	r0, [sp, #32]
 8016902:	eeb0 7a61 	vmov.f32	s14, s3
 8016906:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016908:	695b      	ldr	r3, [r3, #20]
 801690a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801690e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016912:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016916:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016918:	445b      	add	r3, fp
 801691a:	9307      	str	r3, [sp, #28]
 801691c:	ee16 3a90 	vmov	r3, s13
 8016920:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016924:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016928:	ee21 3a23 	vmul.f32	s6, s2, s7
 801692c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016930:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016934:	ee17 7a90 	vmov	r7, s15
 8016938:	ee73 7a42 	vsub.f32	s15, s6, s4
 801693c:	fb97 f7f4 	sdiv	r7, r7, r4
 8016940:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016944:	ee17 ca90 	vmov	ip, s15
 8016948:	fb9c fcf4 	sdiv	ip, ip, r4
 801694c:	fb0c 3306 	mla	r3, ip, r6, r3
 8016950:	9302      	str	r3, [sp, #8]
 8016952:	ee17 3a10 	vmov	r3, s14
 8016956:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801695a:	fb07 3706 	mla	r7, r7, r6, r3
 801695e:	eba9 0306 	sub.w	r3, r9, r6
 8016962:	e9cd 4700 	strd	r4, r7, [sp]
 8016966:	f8da 4008 	ldr.w	r4, [sl, #8]
 801696a:	47a0      	blx	r4
 801696c:	b00d      	add	sp, #52	; 0x34
 801696e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016972:	2500      	movs	r5, #0
 8016974:	462e      	mov	r6, r5
 8016976:	e799      	b.n	80168ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016978 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801697c:	b0db      	sub	sp, #364	; 0x16c
 801697e:	461d      	mov	r5, r3
 8016980:	4614      	mov	r4, r2
 8016982:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8016986:	910f      	str	r1, [sp, #60]	; 0x3c
 8016988:	4629      	mov	r1, r5
 801698a:	930a      	str	r3, [sp, #40]	; 0x28
 801698c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016990:	9009      	str	r0, [sp, #36]	; 0x24
 8016992:	930b      	str	r3, [sp, #44]	; 0x2c
 8016994:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8016998:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801699c:	9310      	str	r3, [sp, #64]	; 0x40
 801699e:	6803      	ldr	r3, [r0, #0]
 80169a0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80169a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80169a6:	47b8      	blx	r7
 80169a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169aa:	6058      	str	r0, [r3, #4]
 80169ac:	2800      	cmp	r0, #0
 80169ae:	f000 83a1 	beq.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80169b2:	682b      	ldr	r3, [r5, #0]
 80169b4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80169b8:	ed94 7a02 	vldr	s14, [r4, #8]
 80169bc:	9314      	str	r3, [sp, #80]	; 0x50
 80169be:	686b      	ldr	r3, [r5, #4]
 80169c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80169c4:	9315      	str	r3, [sp, #84]	; 0x54
 80169c6:	4bc1      	ldr	r3, [pc, #772]	; (8016ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80169c8:	7819      	ldrb	r1, [r3, #0]
 80169ca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80169ce:	2900      	cmp	r1, #0
 80169d0:	bf16      	itet	ne
 80169d2:	4619      	movne	r1, r3
 80169d4:	4611      	moveq	r1, r2
 80169d6:	4613      	movne	r3, r2
 80169d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169dc:	9116      	str	r1, [sp, #88]	; 0x58
 80169de:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80169e2:	f240 8387 	bls.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80169e6:	ed94 7a07 	vldr	s14, [r4, #28]
 80169ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80169ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169f2:	f240 837f 	bls.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80169f6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80169fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80169fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a02:	f240 8377 	bls.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016a06:	6822      	ldr	r2, [r4, #0]
 8016a08:	4bb1      	ldr	r3, [pc, #708]	; (8016cd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016a0a:	429a      	cmp	r2, r3
 8016a0c:	f2c0 8372 	blt.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016a10:	49b0      	ldr	r1, [pc, #704]	; (8016cd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016a12:	6963      	ldr	r3, [r4, #20]
 8016a14:	428a      	cmp	r2, r1
 8016a16:	f300 836d 	bgt.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016a1a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016a1e:	48ae      	ldr	r0, [pc, #696]	; (8016cd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016a20:	33ff      	adds	r3, #255	; 0xff
 8016a22:	4283      	cmp	r3, r0
 8016a24:	f200 8366 	bhi.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016a28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016a2a:	4dac      	ldr	r5, [pc, #688]	; (8016cdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016a2c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016a30:	33ff      	adds	r3, #255	; 0xff
 8016a32:	42ab      	cmp	r3, r5
 8016a34:	f200 835e 	bhi.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016a38:	6862      	ldr	r2, [r4, #4]
 8016a3a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8016a3e:	33ff      	adds	r3, #255	; 0xff
 8016a40:	4283      	cmp	r3, r0
 8016a42:	f200 8357 	bhi.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016a46:	69a1      	ldr	r1, [r4, #24]
 8016a48:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016a4c:	33ff      	adds	r3, #255	; 0xff
 8016a4e:	4283      	cmp	r3, r0
 8016a50:	f200 8350 	bhi.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016a54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016a56:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8016a5a:	30ff      	adds	r0, #255	; 0xff
 8016a5c:	42a8      	cmp	r0, r5
 8016a5e:	f200 8349 	bhi.w	80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016a62:	428a      	cmp	r2, r1
 8016a64:	f280 8110 	bge.w	8016c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016a68:	429a      	cmp	r2, r3
 8016a6a:	f300 8119 	bgt.w	8016ca0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016a6e:	4299      	cmp	r1, r3
 8016a70:	f280 811d 	bge.w	8016cae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016a74:	2502      	movs	r5, #2
 8016a76:	2701      	movs	r7, #1
 8016a78:	46a9      	mov	r9, r5
 8016a7a:	46b8      	mov	r8, r7
 8016a7c:	f04f 0a00 	mov.w	sl, #0
 8016a80:	4621      	mov	r1, r4
 8016a82:	a849      	add	r0, sp, #292	; 0x124
 8016a84:	f003 fc40 	bl	801a308 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016a88:	4622      	mov	r2, r4
 8016a8a:	4653      	mov	r3, sl
 8016a8c:	a949      	add	r1, sp, #292	; 0x124
 8016a8e:	f8cd 9000 	str.w	r9, [sp]
 8016a92:	a819      	add	r0, sp, #100	; 0x64
 8016a94:	f003 fd68 	bl	801a568 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016a98:	4622      	mov	r2, r4
 8016a9a:	4653      	mov	r3, sl
 8016a9c:	a949      	add	r1, sp, #292	; 0x124
 8016a9e:	f8cd 8000 	str.w	r8, [sp]
 8016aa2:	a829      	add	r0, sp, #164	; 0xa4
 8016aa4:	f003 fd60 	bl	801a568 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016aa8:	4643      	mov	r3, r8
 8016aaa:	4622      	mov	r2, r4
 8016aac:	a949      	add	r1, sp, #292	; 0x124
 8016aae:	f8cd 9000 	str.w	r9, [sp]
 8016ab2:	a839      	add	r0, sp, #228	; 0xe4
 8016ab4:	f003 fd58 	bl	801a568 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016ab8:	42af      	cmp	r7, r5
 8016aba:	af12      	add	r7, sp, #72	; 0x48
 8016abc:	bfb7      	itett	lt
 8016abe:	2300      	movlt	r3, #0
 8016ac0:	2301      	movge	r3, #1
 8016ac2:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016ac4:	ac19      	addlt	r4, sp, #100	; 0x64
 8016ac6:	bfb1      	iteee	lt
 8016ac8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016aca:	ad19      	addge	r5, sp, #100	; 0x64
 8016acc:	930e      	strge	r3, [sp, #56]	; 0x38
 8016ace:	ac29      	addge	r4, sp, #164	; 0xa4
 8016ad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ad2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016ad6:	e887 0003 	stmia.w	r7, {r0, r1}
 8016ada:	b928      	cbnz	r0, 8016ae8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016adc:	4b80      	ldr	r3, [pc, #512]	; (8016ce0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016ade:	6818      	ldr	r0, [r3, #0]
 8016ae0:	6803      	ldr	r3, [r0, #0]
 8016ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ae4:	4798      	blx	r3
 8016ae6:	6038      	str	r0, [r7, #0]
 8016ae8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016aea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016aee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016af2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016af4:	930c      	str	r3, [sp, #48]	; 0x30
 8016af6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016af8:	6963      	ldr	r3, [r4, #20]
 8016afa:	440b      	add	r3, r1
 8016afc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016b00:	4408      	add	r0, r1
 8016b02:	b200      	sxth	r0, r0
 8016b04:	4283      	cmp	r3, r0
 8016b06:	900d      	str	r0, [sp, #52]	; 0x34
 8016b08:	f280 80dd 	bge.w	8016cc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016b0c:	428b      	cmp	r3, r1
 8016b0e:	da08      	bge.n	8016b22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016b10:	2a00      	cmp	r2, #0
 8016b12:	dd06      	ble.n	8016b22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016b14:	1acb      	subs	r3, r1, r3
 8016b16:	429a      	cmp	r2, r3
 8016b18:	f2c0 80e4 	blt.w	8016ce4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	f300 80e2 	bgt.w	8016ce6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016b22:	6967      	ldr	r7, [r4, #20]
 8016b24:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b2a:	443b      	add	r3, r7
 8016b2c:	461f      	mov	r7, r3
 8016b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b30:	1bdf      	subs	r7, r3, r7
 8016b32:	4297      	cmp	r7, r2
 8016b34:	bfa8      	it	ge
 8016b36:	4617      	movge	r7, r2
 8016b38:	2f00      	cmp	r7, #0
 8016b3a:	f340 8166 	ble.w	8016e0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016b3e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016b40:	6829      	ldr	r1, [r5, #0]
 8016b42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016b46:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016b4a:	4411      	add	r1, r2
 8016b4c:	6820      	ldr	r0, [r4, #0]
 8016b4e:	4299      	cmp	r1, r3
 8016b50:	dd1a      	ble.n	8016b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016b52:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016b56:	4402      	add	r2, r0
 8016b58:	440b      	add	r3, r1
 8016b5a:	b21b      	sxth	r3, r3
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	dc13      	bgt.n	8016b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016b60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016b62:	a912      	add	r1, sp, #72	; 0x48
 8016b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	9206      	str	r2, [sp, #24]
 8016b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b6e:	9500      	str	r5, [sp, #0]
 8016b70:	9205      	str	r2, [sp, #20]
 8016b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b74:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016b78:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016b7a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016b7e:	aa49      	add	r2, sp, #292	; 0x124
 8016b80:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016b84:	4623      	mov	r3, r4
 8016b86:	47c8      	blx	r9
 8016b88:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016b8c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016b90:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016b94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016b98:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016b9c:	68a1      	ldr	r1, [r4, #8]
 8016b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ba2:	ed94 6a08 	vldr	s12, [r4, #32]
 8016ba6:	edd4 6a07 	vldr	s13, [r4, #28]
 8016baa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016bae:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016bb2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016bb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016bba:	edc4 6a07 	vstr	s13, [r4, #28]
 8016bbe:	441a      	add	r2, r3
 8016bc0:	6963      	ldr	r3, [r4, #20]
 8016bc2:	3301      	adds	r3, #1
 8016bc4:	6022      	str	r2, [r4, #0]
 8016bc6:	6163      	str	r3, [r4, #20]
 8016bc8:	69a3      	ldr	r3, [r4, #24]
 8016bca:	3b01      	subs	r3, #1
 8016bcc:	61a3      	str	r3, [r4, #24]
 8016bce:	6923      	ldr	r3, [r4, #16]
 8016bd0:	440b      	add	r3, r1
 8016bd2:	68e1      	ldr	r1, [r4, #12]
 8016bd4:	428b      	cmp	r3, r1
 8016bd6:	6123      	str	r3, [r4, #16]
 8016bd8:	db15      	blt.n	8016c06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016bda:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016bde:	3201      	adds	r2, #1
 8016be0:	1a5b      	subs	r3, r3, r1
 8016be2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016be6:	6022      	str	r2, [r4, #0]
 8016be8:	6123      	str	r3, [r4, #16]
 8016bea:	edc4 6a07 	vstr	s13, [r4, #28]
 8016bee:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016bf2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016bf6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016bfa:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c02:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016c06:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016c0a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016c0e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016c12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016c16:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016c1a:	68a9      	ldr	r1, [r5, #8]
 8016c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c20:	ed95 6a08 	vldr	s12, [r5, #32]
 8016c24:	edd5 6a07 	vldr	s13, [r5, #28]
 8016c28:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016c2c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016c30:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016c34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016c38:	edc5 6a07 	vstr	s13, [r5, #28]
 8016c3c:	441a      	add	r2, r3
 8016c3e:	696b      	ldr	r3, [r5, #20]
 8016c40:	3301      	adds	r3, #1
 8016c42:	602a      	str	r2, [r5, #0]
 8016c44:	616b      	str	r3, [r5, #20]
 8016c46:	69ab      	ldr	r3, [r5, #24]
 8016c48:	3b01      	subs	r3, #1
 8016c4a:	61ab      	str	r3, [r5, #24]
 8016c4c:	692b      	ldr	r3, [r5, #16]
 8016c4e:	440b      	add	r3, r1
 8016c50:	68e9      	ldr	r1, [r5, #12]
 8016c52:	428b      	cmp	r3, r1
 8016c54:	612b      	str	r3, [r5, #16]
 8016c56:	db15      	blt.n	8016c84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016c58:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016c5c:	3201      	adds	r2, #1
 8016c5e:	1a5b      	subs	r3, r3, r1
 8016c60:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016c64:	602a      	str	r2, [r5, #0]
 8016c66:	612b      	str	r3, [r5, #16]
 8016c68:	edc5 6a07 	vstr	s13, [r5, #28]
 8016c6c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016c70:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016c74:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016c78:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c80:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016c84:	3f01      	subs	r7, #1
 8016c86:	e757      	b.n	8016b38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016c88:	4299      	cmp	r1, r3
 8016c8a:	dc13      	bgt.n	8016cb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	da14      	bge.n	8016cba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016c90:	2502      	movs	r5, #2
 8016c92:	2703      	movs	r7, #3
 8016c94:	f04f 0800 	mov.w	r8, #0
 8016c98:	46a9      	mov	r9, r5
 8016c9a:	f04f 0a01 	mov.w	sl, #1
 8016c9e:	e6ef      	b.n	8016a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016ca0:	2501      	movs	r5, #1
 8016ca2:	2700      	movs	r7, #0
 8016ca4:	46a9      	mov	r9, r5
 8016ca6:	46b8      	mov	r8, r7
 8016ca8:	f04f 0a02 	mov.w	sl, #2
 8016cac:	e6e8      	b.n	8016a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016cae:	2501      	movs	r5, #1
 8016cb0:	2702      	movs	r7, #2
 8016cb2:	e6e1      	b.n	8016a78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016cb4:	2500      	movs	r5, #0
 8016cb6:	2701      	movs	r7, #1
 8016cb8:	e7f4      	b.n	8016ca4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016cba:	2702      	movs	r7, #2
 8016cbc:	2503      	movs	r5, #3
 8016cbe:	f04f 0900 	mov.w	r9, #0
 8016cc2:	46b8      	mov	r8, r7
 8016cc4:	e7e9      	b.n	8016c9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016cc6:	4613      	mov	r3, r2
 8016cc8:	e728      	b.n	8016b1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016cca:	bf00      	nop
 8016ccc:	2400ff0c 	.word	0x2400ff0c
 8016cd0:	fffd8f01 	.word	0xfffd8f01
 8016cd4:	00027100 	.word	0x00027100
 8016cd8:	0004e1ff 	.word	0x0004e1ff
 8016cdc:	0004e1fe 	.word	0x0004e1fe
 8016ce0:	2400ff14 	.word	0x2400ff14
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016ce8:	469e      	mov	lr, r3
 8016cea:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016cec:	469c      	mov	ip, r3
 8016cee:	9111      	str	r1, [sp, #68]	; 0x44
 8016cf0:	f04f 0900 	mov.w	r9, #0
 8016cf4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016cf8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016cfc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016d00:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016d04:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016d08:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016d0c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016d10:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016d14:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016d18:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016d1c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016d20:	f1bc 0f00 	cmp.w	ip, #0
 8016d24:	d147      	bne.n	8016db6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016d26:	eb03 0c07 	add.w	ip, r3, r7
 8016d2a:	1ad7      	subs	r7, r2, r3
 8016d2c:	f1b9 0f00 	cmp.w	r9, #0
 8016d30:	d009      	beq.n	8016d46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016d32:	9029      	str	r0, [sp, #164]	; 0xa4
 8016d34:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016d38:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016d3c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016d40:	912d      	str	r1, [sp, #180]	; 0xb4
 8016d42:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016d46:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016d48:	f04f 0800 	mov.w	r8, #0
 8016d4c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016d50:	9111      	str	r1, [sp, #68]	; 0x44
 8016d52:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016d56:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016d5a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016d5e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016d62:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016d66:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016d6a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016d6e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016d72:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016d76:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016d7a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016d7e:	f1be 0f00 	cmp.w	lr, #0
 8016d82:	d031      	beq.n	8016de8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016d84:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016d86:	4450      	add	r0, sl
 8016d88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016d8c:	4431      	add	r1, r6
 8016d8e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016d92:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016d96:	4549      	cmp	r1, r9
 8016d98:	db08      	blt.n	8016dac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016d9a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016d9e:	3001      	adds	r0, #1
 8016da0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016da4:	eba1 0109 	sub.w	r1, r1, r9
 8016da8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016dac:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016db0:	f04f 0801 	mov.w	r8, #1
 8016db4:	e7e3      	b.n	8016d7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016db6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016db8:	4450      	add	r0, sl
 8016dba:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016dbe:	4431      	add	r1, r6
 8016dc0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016dc4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016dc8:	4541      	cmp	r1, r8
 8016dca:	db08      	blt.n	8016dde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016dcc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016dd0:	3001      	adds	r0, #1
 8016dd2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016dd6:	eba1 0108 	sub.w	r1, r1, r8
 8016dda:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016dde:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016de2:	f04f 0901 	mov.w	r9, #1
 8016de6:	e79b      	b.n	8016d20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016de8:	449c      	add	ip, r3
 8016dea:	1aff      	subs	r7, r7, r3
 8016dec:	f1b8 0f00 	cmp.w	r8, #0
 8016df0:	d009      	beq.n	8016e06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016df2:	9019      	str	r0, [sp, #100]	; 0x64
 8016df4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016df8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016dfc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016e00:	911d      	str	r1, [sp, #116]	; 0x74
 8016e02:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016e06:	1ad2      	subs	r2, r2, r3
 8016e08:	e68b      	b.n	8016b22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e0c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	f000 80d1 	beq.w	8016fb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016e14:	ad19      	add	r5, sp, #100	; 0x64
 8016e16:	ac39      	add	r4, sp, #228	; 0xe4
 8016e18:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016e1a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016e22:	930c      	str	r3, [sp, #48]	; 0x30
 8016e24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016e26:	6963      	ldr	r3, [r4, #20]
 8016e28:	440b      	add	r3, r1
 8016e2a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016e2e:	4408      	add	r0, r1
 8016e30:	b200      	sxth	r0, r0
 8016e32:	4283      	cmp	r3, r0
 8016e34:	900d      	str	r0, [sp, #52]	; 0x34
 8016e36:	f280 80c1 	bge.w	8016fbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8016e3a:	428b      	cmp	r3, r1
 8016e3c:	da08      	bge.n	8016e50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016e3e:	2a00      	cmp	r2, #0
 8016e40:	dd06      	ble.n	8016e50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016e42:	1acb      	subs	r3, r1, r3
 8016e44:	429a      	cmp	r2, r3
 8016e46:	f2c0 80bb 	blt.w	8016fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	f300 80b9 	bgt.w	8016fc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016e50:	6967      	ldr	r7, [r4, #20]
 8016e52:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e58:	443b      	add	r3, r7
 8016e5a:	461f      	mov	r7, r3
 8016e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e5e:	1bdf      	subs	r7, r3, r7
 8016e60:	4297      	cmp	r7, r2
 8016e62:	bfa8      	it	ge
 8016e64:	4617      	movge	r7, r2
 8016e66:	2f00      	cmp	r7, #0
 8016e68:	f340 813c 	ble.w	80170e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016e6c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016e6e:	6829      	ldr	r1, [r5, #0]
 8016e70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e74:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016e78:	4411      	add	r1, r2
 8016e7a:	6820      	ldr	r0, [r4, #0]
 8016e7c:	4299      	cmp	r1, r3
 8016e7e:	dd1a      	ble.n	8016eb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016e80:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016e84:	4402      	add	r2, r0
 8016e86:	440b      	add	r3, r1
 8016e88:	b21b      	sxth	r3, r3
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	dc13      	bgt.n	8016eb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016e8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e90:	a912      	add	r1, sp, #72	; 0x48
 8016e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	9206      	str	r2, [sp, #24]
 8016e9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016e9c:	9500      	str	r5, [sp, #0]
 8016e9e:	9205      	str	r2, [sp, #20]
 8016ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ea2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016ea6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016ea8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016eac:	aa49      	add	r2, sp, #292	; 0x124
 8016eae:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016eb2:	4623      	mov	r3, r4
 8016eb4:	47c8      	blx	r9
 8016eb6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016eba:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016ebe:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016ec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ec6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016eca:	68a1      	ldr	r1, [r4, #8]
 8016ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ed0:	ed94 6a08 	vldr	s12, [r4, #32]
 8016ed4:	edd4 6a07 	vldr	s13, [r4, #28]
 8016ed8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016edc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016ee0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016ee4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016ee8:	edc4 6a07 	vstr	s13, [r4, #28]
 8016eec:	441a      	add	r2, r3
 8016eee:	6963      	ldr	r3, [r4, #20]
 8016ef0:	3301      	adds	r3, #1
 8016ef2:	6022      	str	r2, [r4, #0]
 8016ef4:	6163      	str	r3, [r4, #20]
 8016ef6:	69a3      	ldr	r3, [r4, #24]
 8016ef8:	3b01      	subs	r3, #1
 8016efa:	61a3      	str	r3, [r4, #24]
 8016efc:	6923      	ldr	r3, [r4, #16]
 8016efe:	440b      	add	r3, r1
 8016f00:	68e1      	ldr	r1, [r4, #12]
 8016f02:	428b      	cmp	r3, r1
 8016f04:	6123      	str	r3, [r4, #16]
 8016f06:	db15      	blt.n	8016f34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016f08:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016f0c:	3201      	adds	r2, #1
 8016f0e:	1a5b      	subs	r3, r3, r1
 8016f10:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016f14:	6022      	str	r2, [r4, #0]
 8016f16:	6123      	str	r3, [r4, #16]
 8016f18:	edc4 6a07 	vstr	s13, [r4, #28]
 8016f1c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016f20:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016f24:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016f28:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f30:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016f34:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016f38:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016f3c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016f40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016f44:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016f48:	68a9      	ldr	r1, [r5, #8]
 8016f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f4e:	ed95 6a08 	vldr	s12, [r5, #32]
 8016f52:	edd5 6a07 	vldr	s13, [r5, #28]
 8016f56:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016f5a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016f5e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016f62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016f66:	edc5 6a07 	vstr	s13, [r5, #28]
 8016f6a:	441a      	add	r2, r3
 8016f6c:	696b      	ldr	r3, [r5, #20]
 8016f6e:	3301      	adds	r3, #1
 8016f70:	602a      	str	r2, [r5, #0]
 8016f72:	616b      	str	r3, [r5, #20]
 8016f74:	69ab      	ldr	r3, [r5, #24]
 8016f76:	3b01      	subs	r3, #1
 8016f78:	61ab      	str	r3, [r5, #24]
 8016f7a:	692b      	ldr	r3, [r5, #16]
 8016f7c:	440b      	add	r3, r1
 8016f7e:	68e9      	ldr	r1, [r5, #12]
 8016f80:	428b      	cmp	r3, r1
 8016f82:	612b      	str	r3, [r5, #16]
 8016f84:	db15      	blt.n	8016fb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016f86:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016f8a:	3201      	adds	r2, #1
 8016f8c:	1a5b      	subs	r3, r3, r1
 8016f8e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016f92:	602a      	str	r2, [r5, #0]
 8016f94:	612b      	str	r3, [r5, #16]
 8016f96:	edc5 6a07 	vstr	s13, [r5, #28]
 8016f9a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016f9e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016fa2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016fa6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016fae:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016fb2:	3f01      	subs	r7, #1
 8016fb4:	e757      	b.n	8016e66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016fb6:	ad39      	add	r5, sp, #228	; 0xe4
 8016fb8:	ac19      	add	r4, sp, #100	; 0x64
 8016fba:	e72d      	b.n	8016e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016fbc:	4613      	mov	r3, r2
 8016fbe:	e744      	b.n	8016e4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016fc0:	4613      	mov	r3, r2
 8016fc2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016fc4:	469e      	mov	lr, r3
 8016fc6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8016fca:	461f      	mov	r7, r3
 8016fcc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016fd0:	f04f 0900 	mov.w	r9, #0
 8016fd4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8016fd8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8016fdc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016fe0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016fe4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8016fe8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016fea:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8016fee:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016ff2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016ff6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8016ffa:	960e      	str	r6, [sp, #56]	; 0x38
 8016ffc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017000:	2f00      	cmp	r7, #0
 8017002:	d146      	bne.n	8017092 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017004:	449c      	add	ip, r3
 8017006:	1ad7      	subs	r7, r2, r3
 8017008:	f1b9 0f00 	cmp.w	r9, #0
 801700c:	d009      	beq.n	8017022 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801700e:	9039      	str	r0, [sp, #228]	; 0xe4
 8017010:	913d      	str	r1, [sp, #244]	; 0xf4
 8017012:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017016:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801701a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801701e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017022:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017024:	f04f 0800 	mov.w	r8, #0
 8017028:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801702c:	910e      	str	r1, [sp, #56]	; 0x38
 801702e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017032:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017036:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801703a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801703e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017042:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017046:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801704a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801704e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017052:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017056:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801705a:	f1be 0f00 	cmp.w	lr, #0
 801705e:	d030      	beq.n	80170c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017060:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017062:	4450      	add	r0, sl
 8017064:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017068:	4431      	add	r1, r6
 801706a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801706e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017072:	4549      	cmp	r1, r9
 8017074:	db08      	blt.n	8017088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017076:	ee77 7a85 	vadd.f32	s15, s15, s10
 801707a:	3001      	adds	r0, #1
 801707c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017080:	eba1 0109 	sub.w	r1, r1, r9
 8017084:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017088:	f10e 3eff 	add.w	lr, lr, #4294967295
 801708c:	f04f 0801 	mov.w	r8, #1
 8017090:	e7e3      	b.n	801705a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017092:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017094:	4450      	add	r0, sl
 8017096:	ee37 7a24 	vadd.f32	s14, s14, s9
 801709a:	4431      	add	r1, r6
 801709c:	ee77 7a84 	vadd.f32	s15, s15, s8
 80170a0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80170a4:	4541      	cmp	r1, r8
 80170a6:	db08      	blt.n	80170ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80170a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80170ac:	3001      	adds	r0, #1
 80170ae:	ee37 7a25 	vadd.f32	s14, s14, s11
 80170b2:	eba1 0108 	sub.w	r1, r1, r8
 80170b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80170ba:	3f01      	subs	r7, #1
 80170bc:	f04f 0901 	mov.w	r9, #1
 80170c0:	e79e      	b.n	8017000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80170c2:	449c      	add	ip, r3
 80170c4:	1aff      	subs	r7, r7, r3
 80170c6:	f1b8 0f00 	cmp.w	r8, #0
 80170ca:	d009      	beq.n	80170e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80170cc:	9019      	str	r0, [sp, #100]	; 0x64
 80170ce:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80170d2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80170d6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80170da:	911d      	str	r1, [sp, #116]	; 0x74
 80170dc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80170e0:	1ad2      	subs	r2, r2, r3
 80170e2:	e6b5      	b.n	8016e50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80170e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	b923      	cbnz	r3, 80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80170ea:	4b04      	ldr	r3, [pc, #16]	; (80170fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80170ec:	6818      	ldr	r0, [r3, #0]
 80170ee:	6803      	ldr	r3, [r0, #0]
 80170f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170f2:	4798      	blx	r3
 80170f4:	b05b      	add	sp, #364	; 0x16c
 80170f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170fa:	bf00      	nop
 80170fc:	2400ff14 	.word	0x2400ff14

08017100 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017100:	b570      	push	{r4, r5, r6, lr}
 8017102:	4604      	mov	r4, r0
 8017104:	2500      	movs	r5, #0
 8017106:	9804      	ldr	r0, [sp, #16]
 8017108:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801710c:	8025      	strh	r5, [r4, #0]
 801710e:	6061      	str	r1, [r4, #4]
 8017110:	7223      	strb	r3, [r4, #8]
 8017112:	7266      	strb	r6, [r4, #9]
 8017114:	60e0      	str	r0, [r4, #12]
 8017116:	8222      	strh	r2, [r4, #16]
 8017118:	8265      	strh	r5, [r4, #18]
 801711a:	82a5      	strh	r5, [r4, #20]
 801711c:	82e5      	strh	r5, [r4, #22]
 801711e:	8325      	strh	r5, [r4, #24]
 8017120:	8365      	strh	r5, [r4, #26]
 8017122:	83a5      	strh	r5, [r4, #28]
 8017124:	77a5      	strb	r5, [r4, #30]
 8017126:	b32e      	cbz	r6, 8017174 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8017128:	6803      	ldr	r3, [r0, #0]
 801712a:	695b      	ldr	r3, [r3, #20]
 801712c:	4798      	blx	r3
 801712e:	4606      	mov	r6, r0
 8017130:	b300      	cbz	r0, 8017174 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8017132:	68e0      	ldr	r0, [r4, #12]
 8017134:	4631      	mov	r1, r6
 8017136:	6803      	ldr	r3, [r0, #0]
 8017138:	68db      	ldr	r3, [r3, #12]
 801713a:	4798      	blx	r3
 801713c:	4605      	mov	r5, r0
 801713e:	b1c8      	cbz	r0, 8017174 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8017140:	7b43      	ldrb	r3, [r0, #13]
 8017142:	7a82      	ldrb	r2, [r0, #10]
 8017144:	005b      	lsls	r3, r3, #1
 8017146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801714a:	4313      	orrs	r3, r2
 801714c:	83a3      	strh	r3, [r4, #28]
 801714e:	7a63      	ldrb	r3, [r4, #9]
 8017150:	2b04      	cmp	r3, #4
 8017152:	d10f      	bne.n	8017174 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8017154:	68e0      	ldr	r0, [r4, #12]
 8017156:	462a      	mov	r2, r5
 8017158:	4631      	mov	r1, r6
 801715a:	6803      	ldr	r3, [r0, #0]
 801715c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801715e:	4798      	blx	r3
 8017160:	7b6b      	ldrb	r3, [r5, #13]
 8017162:	005b      	lsls	r3, r3, #1
 8017164:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017168:	7aab      	ldrb	r3, [r5, #10]
 801716a:	4313      	orrs	r3, r2
 801716c:	4418      	add	r0, r3
 801716e:	8ba3      	ldrh	r3, [r4, #28]
 8017170:	4418      	add	r0, r3
 8017172:	83a0      	strh	r0, [r4, #28]
 8017174:	4620      	mov	r0, r4
 8017176:	bd70      	pop	{r4, r5, r6, pc}

08017178 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801717c:	2400      	movs	r4, #0
 801717e:	b085      	sub	sp, #20
 8017180:	4681      	mov	r9, r0
 8017182:	4688      	mov	r8, r1
 8017184:	4692      	mov	sl, r2
 8017186:	469b      	mov	fp, r3
 8017188:	4627      	mov	r7, r4
 801718a:	4625      	mov	r5, r4
 801718c:	4626      	mov	r6, r4
 801718e:	4554      	cmp	r4, sl
 8017190:	da2a      	bge.n	80171e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017192:	2300      	movs	r3, #0
 8017194:	9303      	str	r3, [sp, #12]
 8017196:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801719a:	429d      	cmp	r5, r3
 801719c:	d004      	beq.n	80171a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801719e:	f242 030b 	movw	r3, #8203	; 0x200b
 80171a2:	429d      	cmp	r5, r3
 80171a4:	bf18      	it	ne
 80171a6:	462f      	movne	r7, r5
 80171a8:	ab03      	add	r3, sp, #12
 80171aa:	4642      	mov	r2, r8
 80171ac:	4659      	mov	r1, fp
 80171ae:	4648      	mov	r0, r9
 80171b0:	f002 fec0 	bl	8019f34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80171b4:	4605      	mov	r5, r0
 80171b6:	b1b8      	cbz	r0, 80171e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80171b8:	280a      	cmp	r0, #10
 80171ba:	d015      	beq.n	80171e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80171bc:	9a03      	ldr	r2, [sp, #12]
 80171be:	b18a      	cbz	r2, 80171e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80171c0:	7b50      	ldrb	r0, [r2, #13]
 80171c2:	4639      	mov	r1, r7
 80171c4:	7a93      	ldrb	r3, [r2, #10]
 80171c6:	0040      	lsls	r0, r0, #1
 80171c8:	8895      	ldrh	r5, [r2, #4]
 80171ca:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80171ce:	4303      	orrs	r3, r0
 80171d0:	4640      	mov	r0, r8
 80171d2:	9301      	str	r3, [sp, #4]
 80171d4:	f8d8 3000 	ldr.w	r3, [r8]
 80171d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171da:	4798      	blx	r3
 80171dc:	9b01      	ldr	r3, [sp, #4]
 80171de:	4418      	add	r0, r3
 80171e0:	4406      	add	r6, r0
 80171e2:	b2b6      	uxth	r6, r6
 80171e4:	3401      	adds	r4, #1
 80171e6:	e7d2      	b.n	801718e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80171e8:	4630      	mov	r0, r6
 80171ea:	b005      	add	sp, #20
 80171ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80171f0:	2a02      	cmp	r2, #2
 80171f2:	b530      	push	{r4, r5, lr}
 80171f4:	d011      	beq.n	801721a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80171f6:	2a03      	cmp	r2, #3
 80171f8:	d01c      	beq.n	8017234 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80171fa:	2a01      	cmp	r2, #1
 80171fc:	d10c      	bne.n	8017218 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80171fe:	888b      	ldrh	r3, [r1, #4]
 8017200:	8801      	ldrh	r1, [r0, #0]
 8017202:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017206:	1a5b      	subs	r3, r3, r1
 8017208:	8844      	ldrh	r4, [r0, #2]
 801720a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801720e:	1a9b      	subs	r3, r3, r2
 8017210:	8004      	strh	r4, [r0, #0]
 8017212:	8081      	strh	r1, [r0, #4]
 8017214:	8043      	strh	r3, [r0, #2]
 8017216:	80c2      	strh	r2, [r0, #6]
 8017218:	bd30      	pop	{r4, r5, pc}
 801721a:	88cb      	ldrh	r3, [r1, #6]
 801721c:	8842      	ldrh	r2, [r0, #2]
 801721e:	1a9b      	subs	r3, r3, r2
 8017220:	88c2      	ldrh	r2, [r0, #6]
 8017222:	1a9b      	subs	r3, r3, r2
 8017224:	888a      	ldrh	r2, [r1, #4]
 8017226:	8801      	ldrh	r1, [r0, #0]
 8017228:	8043      	strh	r3, [r0, #2]
 801722a:	1a52      	subs	r2, r2, r1
 801722c:	8881      	ldrh	r1, [r0, #4]
 801722e:	1a52      	subs	r2, r2, r1
 8017230:	8002      	strh	r2, [r0, #0]
 8017232:	e7f1      	b.n	8017218 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017234:	88cb      	ldrh	r3, [r1, #6]
 8017236:	8841      	ldrh	r1, [r0, #2]
 8017238:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801723c:	1a5b      	subs	r3, r3, r1
 801723e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017242:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017246:	1a9b      	subs	r3, r3, r2
 8017248:	8045      	strh	r5, [r0, #2]
 801724a:	8082      	strh	r2, [r0, #4]
 801724c:	8003      	strh	r3, [r0, #0]
 801724e:	80c4      	strh	r4, [r0, #6]
 8017250:	e7e2      	b.n	8017218 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017252 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017256:	b09f      	sub	sp, #124	; 0x7c
 8017258:	9116      	str	r1, [sp, #88]	; 0x58
 801725a:	9317      	str	r3, [sp, #92]	; 0x5c
 801725c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801725e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017260:	8809      	ldrh	r1, [r1, #0]
 8017262:	889b      	ldrh	r3, [r3, #4]
 8017264:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8017268:	440b      	add	r3, r1
 801726a:	9212      	str	r2, [sp, #72]	; 0x48
 801726c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8017270:	b21b      	sxth	r3, r3
 8017272:	9011      	str	r0, [sp, #68]	; 0x44
 8017274:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8017278:	9310      	str	r3, [sp, #64]	; 0x40
 801727a:	f8d8 3000 	ldr.w	r3, [r8]
 801727e:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8017282:	7a59      	ldrb	r1, [r3, #9]
 8017284:	7a1b      	ldrb	r3, [r3, #8]
 8017286:	9114      	str	r1, [sp, #80]	; 0x50
 8017288:	9315      	str	r3, [sp, #84]	; 0x54
 801728a:	2a00      	cmp	r2, #0
 801728c:	d06a      	beq.n	8017364 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801728e:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017292:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017294:	2b04      	cmp	r3, #4
 8017296:	bf14      	ite	ne
 8017298:	2301      	movne	r3, #1
 801729a:	2302      	moveq	r3, #2
 801729c:	4413      	add	r3, r2
 801729e:	f04f 0900 	mov.w	r9, #0
 80172a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80172a4:	464c      	mov	r4, r9
 80172a6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80172aa:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80172ae:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80172b2:	4293      	cmp	r3, r2
 80172b4:	f280 808f 	bge.w	80173d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80172b8:	2300      	movs	r3, #0
 80172ba:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80172be:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80172c2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80172c6:	429c      	cmp	r4, r3
 80172c8:	d006      	beq.n	80172d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80172ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172cc:	f242 020b 	movw	r2, #8203	; 0x200b
 80172d0:	4294      	cmp	r4, r2
 80172d2:	bf18      	it	ne
 80172d4:	4623      	movne	r3, r4
 80172d6:	930d      	str	r3, [sp, #52]	; 0x34
 80172d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172da:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80172dc:	f8d8 2000 	ldr.w	r2, [r8]
 80172e0:	428b      	cmp	r3, r1
 80172e2:	db41      	blt.n	8017368 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80172e4:	6813      	ldr	r3, [r2, #0]
 80172e6:	4610      	mov	r0, r2
 80172e8:	695b      	ldr	r3, [r3, #20]
 80172ea:	4798      	blx	r3
 80172ec:	4604      	mov	r4, r0
 80172ee:	f8d8 0000 	ldr.w	r0, [r8]
 80172f2:	aa1d      	add	r2, sp, #116	; 0x74
 80172f4:	4621      	mov	r1, r4
 80172f6:	6803      	ldr	r3, [r0, #0]
 80172f8:	689e      	ldr	r6, [r3, #8]
 80172fa:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80172fe:	47b0      	blx	r6
 8017300:	901c      	str	r0, [sp, #112]	; 0x70
 8017302:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017306:	429c      	cmp	r4, r3
 8017308:	f000 80ea 	beq.w	80174e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801730c:	f242 030b 	movw	r3, #8203	; 0x200b
 8017310:	429c      	cmp	r4, r3
 8017312:	f000 80e5 	beq.w	80174e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017316:	2c00      	cmp	r4, #0
 8017318:	f000 80f7 	beq.w	801750a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801731c:	2c0a      	cmp	r4, #10
 801731e:	d060      	beq.n	80173e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8017320:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017322:	b36a      	cbz	r2, 8017380 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8017324:	8894      	ldrh	r4, [r2, #4]
 8017326:	f1bb 0f00 	cmp.w	fp, #0
 801732a:	d03b      	beq.n	80173a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801732c:	f892 900d 	ldrb.w	r9, [r2, #13]
 8017330:	f1bb 0f01 	cmp.w	fp, #1
 8017334:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017338:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801733c:	f892 900a 	ldrb.w	r9, [r2, #10]
 8017340:	ea49 0903 	orr.w	r9, r9, r3
 8017344:	d134      	bne.n	80173b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8017346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017348:	eba5 0509 	sub.w	r5, r5, r9
 801734c:	2b00      	cmp	r3, #0
 801734e:	d14f      	bne.n	80173f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8017350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017352:	eb09 0305 	add.w	r3, r9, r5
 8017356:	4413      	add	r3, r2
 8017358:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801735a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801735e:	4293      	cmp	r3, r2
 8017360:	da51      	bge.n	8017406 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8017362:	e038      	b.n	80173d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8017364:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017366:	e79a      	b.n	801729e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8017368:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801736c:	4659      	mov	r1, fp
 801736e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8017370:	9301      	str	r3, [sp, #4]
 8017372:	ab1d      	add	r3, sp, #116	; 0x74
 8017374:	9300      	str	r3, [sp, #0]
 8017376:	ab1c      	add	r3, sp, #112	; 0x70
 8017378:	f002 fe25 	bl	8019fc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801737c:	4604      	mov	r4, r0
 801737e:	e7c0      	b.n	8017302 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8017380:	f8d8 0000 	ldr.w	r0, [r8]
 8017384:	6803      	ldr	r3, [r0, #0]
 8017386:	691b      	ldr	r3, [r3, #16]
 8017388:	4798      	blx	r3
 801738a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801738e:	4298      	cmp	r0, r3
 8017390:	f000 80a6 	beq.w	80174e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017394:	f242 030b 	movw	r3, #8203	; 0x200b
 8017398:	4298      	cmp	r0, r3
 801739a:	f000 80a1 	beq.w	80174e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801739e:	f1bb 0f00 	cmp.w	fp, #0
 80173a2:	d100      	bne.n	80173a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80173a4:	444d      	add	r5, r9
 80173a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80173a8:	2a00      	cmp	r2, #0
 80173aa:	d1bf      	bne.n	801732c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80173ac:	4691      	mov	r9, r2
 80173ae:	e097      	b.n	80174e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80173b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	f000 80ab 	beq.w	801750e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80173b8:	f1bb 0f00 	cmp.w	fp, #0
 80173bc:	d118      	bne.n	80173f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80173be:	f8d8 0000 	ldr.w	r0, [r8]
 80173c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80173c4:	6803      	ldr	r3, [r0, #0]
 80173c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173c8:	4798      	blx	r3
 80173ca:	4405      	add	r5, r0
 80173cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80173ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80173d0:	1aeb      	subs	r3, r5, r3
 80173d2:	4293      	cmp	r3, r2
 80173d4:	dd17      	ble.n	8017406 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80173d6:	2c00      	cmp	r4, #0
 80173d8:	f000 8097 	beq.w	801750a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80173dc:	2c0a      	cmp	r4, #10
 80173de:	f040 8085 	bne.w	80174ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80173e2:	240a      	movs	r4, #10
 80173e4:	fab4 f084 	clz	r0, r4
 80173e8:	0940      	lsrs	r0, r0, #5
 80173ea:	b01f      	add	sp, #124	; 0x7c
 80173ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f0:	f8d8 0000 	ldr.w	r0, [r8]
 80173f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80173f6:	6803      	ldr	r3, [r0, #0]
 80173f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173fa:	4798      	blx	r3
 80173fc:	f1bb 0f01 	cmp.w	fp, #1
 8017400:	eba5 0500 	sub.w	r5, r5, r0
 8017404:	d0a4      	beq.n	8017350 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8017406:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017408:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801740a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801740e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017412:	7b43      	ldrb	r3, [r0, #13]
 8017414:	4429      	add	r1, r5
 8017416:	015b      	lsls	r3, r3, #5
 8017418:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801741c:	7983      	ldrb	r3, [r0, #6]
 801741e:	4313      	orrs	r3, r2
 8017420:	440b      	add	r3, r1
 8017422:	42b3      	cmp	r3, r6
 8017424:	db5c      	blt.n	80174e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017426:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017428:	4299      	cmp	r1, r3
 801742a:	da59      	bge.n	80174e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801742c:	f8d8 0000 	ldr.w	r0, [r8]
 8017430:	42ae      	cmp	r6, r5
 8017432:	6803      	ldr	r3, [r0, #0]
 8017434:	bfcc      	ite	gt
 8017436:	1b76      	subgt	r6, r6, r5
 8017438:	2600      	movle	r6, #0
 801743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801743c:	bfc8      	it	gt
 801743e:	b2b6      	uxthgt	r6, r6
 8017440:	4798      	blx	r3
 8017442:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017444:	7b5a      	ldrb	r2, [r3, #13]
 8017446:	00d1      	lsls	r1, r2, #3
 8017448:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801744c:	7a19      	ldrb	r1, [r3, #8]
 801744e:	4339      	orrs	r1, r7
 8017450:	0657      	lsls	r7, r2, #25
 8017452:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8017454:	bf48      	it	mi
 8017456:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801745a:	4407      	add	r7, r0
 801745c:	bf48      	it	mi
 801745e:	b209      	sxthmi	r1, r1
 8017460:	1a7f      	subs	r7, r7, r1
 8017462:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017464:	b2bf      	uxth	r7, r7
 8017466:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801746a:	fa0f fa87 	sxth.w	sl, r7
 801746e:	4551      	cmp	r1, sl
 8017470:	dd3a      	ble.n	80174e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8017472:	0112      	lsls	r2, r2, #4
 8017474:	79d8      	ldrb	r0, [r3, #7]
 8017476:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801747a:	4302      	orrs	r2, r0
 801747c:	4492      	add	sl, r2
 801747e:	4551      	cmp	r1, sl
 8017480:	dc2e      	bgt.n	80174e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017482:	1bcf      	subs	r7, r1, r7
 8017484:	468a      	mov	sl, r1
 8017486:	b2bf      	uxth	r7, r7
 8017488:	9319      	str	r3, [sp, #100]	; 0x64
 801748a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801748c:	f8d8 0000 	ldr.w	r0, [r8]
 8017490:	681a      	ldr	r2, [r3, #0]
 8017492:	6801      	ldr	r1, [r0, #0]
 8017494:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8017496:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017498:	9313      	str	r3, [sp, #76]	; 0x4c
 801749a:	9218      	str	r2, [sp, #96]	; 0x60
 801749c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801749e:	4788      	blx	r1
 80174a0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80174a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80174a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80174a8:	f898 100e 	ldrb.w	r1, [r8, #14]
 80174ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80174ae:	910a      	str	r1, [sp, #40]	; 0x28
 80174b0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80174b4:	9109      	str	r1, [sp, #36]	; 0x24
 80174b6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80174ba:	9305      	str	r3, [sp, #20]
 80174bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80174be:	9206      	str	r2, [sp, #24]
 80174c0:	e9cd a601 	strd	sl, r6, [sp, #4]
 80174c4:	442e      	add	r6, r5
 80174c6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80174ca:	b236      	sxth	r6, r6
 80174cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80174ce:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80174d2:	9600      	str	r6, [sp, #0]
 80174d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80174d6:	681a      	ldr	r2, [r3, #0]
 80174d8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80174de:	47b0      	blx	r6
 80174e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174e2:	3301      	adds	r3, #1
 80174e4:	930e      	str	r3, [sp, #56]	; 0x38
 80174e6:	e6e2      	b.n	80172ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 80174e8:	2700      	movs	r7, #0
 80174ea:	e7cd      	b.n	8017488 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 80174ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80174ee:	3501      	adds	r5, #1
 80174f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80174f2:	429d      	cmp	r5, r3
 80174f4:	f6bf af76 	bge.w	80173e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80174f8:	4659      	mov	r1, fp
 80174fa:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80174fc:	f7ec ff84 	bl	8004408 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017500:	4604      	mov	r4, r0
 8017502:	b110      	cbz	r0, 801750a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8017504:	280a      	cmp	r0, #10
 8017506:	d1f2      	bne.n	80174ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8017508:	e76b      	b.n	80173e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801750a:	2400      	movs	r4, #0
 801750c:	e76a      	b.n	80173e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801750e:	f1bb 0f00 	cmp.w	fp, #0
 8017512:	f43f af5b 	beq.w	80173cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8017516:	e776      	b.n	8017406 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08017518 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017518:	b530      	push	{r4, r5, lr}
 801751a:	8a44      	ldrh	r4, [r0, #18]
 801751c:	8ac5      	ldrh	r5, [r0, #22]
 801751e:	82c3      	strh	r3, [r0, #22]
 8017520:	442c      	add	r4, r5
 8017522:	1ae4      	subs	r4, r4, r3
 8017524:	8b03      	ldrh	r3, [r0, #24]
 8017526:	8244      	strh	r4, [r0, #18]
 8017528:	8a84      	ldrh	r4, [r0, #20]
 801752a:	4422      	add	r2, r4
 801752c:	440c      	add	r4, r1
 801752e:	1a59      	subs	r1, r3, r1
 8017530:	8342      	strh	r2, [r0, #26]
 8017532:	8284      	strh	r4, [r0, #20]
 8017534:	8301      	strh	r1, [r0, #24]
 8017536:	bd30      	pop	{r4, r5, pc}

08017538 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8017538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801753c:	7a43      	ldrb	r3, [r0, #9]
 801753e:	b087      	sub	sp, #28
 8017540:	4604      	mov	r4, r0
 8017542:	460f      	mov	r7, r1
 8017544:	1eda      	subs	r2, r3, #3
 8017546:	b2d2      	uxtb	r2, r2
 8017548:	2900      	cmp	r1, #0
 801754a:	d036      	beq.n	80175ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801754c:	2a01      	cmp	r2, #1
 801754e:	d932      	bls.n	80175b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8017550:	1e58      	subs	r0, r3, #1
 8017552:	f1d0 0b00 	rsbs	fp, r0, #0
 8017556:	eb4b 0b00 	adc.w	fp, fp, r0
 801755a:	1e99      	subs	r1, r3, #2
 801755c:	424b      	negs	r3, r1
 801755e:	414b      	adcs	r3, r1
 8017560:	9303      	str	r3, [sp, #12]
 8017562:	2300      	movs	r3, #0
 8017564:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017568:	2500      	movs	r5, #0
 801756a:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801756e:	46a9      	mov	r9, r5
 8017570:	8265      	strh	r5, [r4, #18]
 8017572:	82a5      	strh	r5, [r4, #20]
 8017574:	2300      	movs	r3, #0
 8017576:	9305      	str	r3, [sp, #20]
 8017578:	8823      	ldrh	r3, [r4, #0]
 801757a:	2b20      	cmp	r3, #32
 801757c:	d02b      	beq.n	80175d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801757e:	eba3 020a 	sub.w	r2, r3, sl
 8017582:	4256      	negs	r6, r2
 8017584:	4156      	adcs	r6, r2
 8017586:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801758a:	4293      	cmp	r3, r2
 801758c:	d004      	beq.n	8017598 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801758e:	4553      	cmp	r3, sl
 8017590:	bf16      	itet	ne
 8017592:	4699      	movne	r9, r3
 8017594:	2601      	moveq	r6, #1
 8017596:	2600      	movne	r6, #0
 8017598:	ab05      	add	r3, sp, #20
 801759a:	68e2      	ldr	r2, [r4, #12]
 801759c:	7a21      	ldrb	r1, [r4, #8]
 801759e:	6860      	ldr	r0, [r4, #4]
 80175a0:	f002 fcc8 	bl	8019f34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80175a4:	8020      	strh	r0, [r4, #0]
 80175a6:	b9c8      	cbnz	r0, 80175dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80175a8:	8b22      	ldrh	r2, [r4, #24]
 80175aa:	2300      	movs	r3, #0
 80175ac:	4611      	mov	r1, r2
 80175ae:	4620      	mov	r0, r4
 80175b0:	f7ff ffb2 	bl	8017518 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80175b4:	e066      	b.n	8017684 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80175b6:	468b      	mov	fp, r1
 80175b8:	e7cf      	b.n	801755a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80175ba:	3b01      	subs	r3, #1
 80175bc:	2a01      	cmp	r2, #1
 80175be:	9103      	str	r1, [sp, #12]
 80175c0:	468b      	mov	fp, r1
 80175c2:	bf8c      	ite	hi
 80175c4:	2200      	movhi	r2, #0
 80175c6:	2201      	movls	r2, #1
 80175c8:	2b01      	cmp	r3, #1
 80175ca:	9202      	str	r2, [sp, #8]
 80175cc:	bf8c      	ite	hi
 80175ce:	2300      	movhi	r3, #0
 80175d0:	2301      	movls	r3, #1
 80175d2:	9301      	str	r3, [sp, #4]
 80175d4:	e7c8      	b.n	8017568 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80175d6:	4699      	mov	r9, r3
 80175d8:	2601      	movs	r6, #1
 80175da:	e7dd      	b.n	8017598 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80175dc:	8ae3      	ldrh	r3, [r4, #22]
 80175de:	280a      	cmp	r0, #10
 80175e0:	f103 0301 	add.w	r3, r3, #1
 80175e4:	82e3      	strh	r3, [r4, #22]
 80175e6:	d0df      	beq.n	80175a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80175e8:	9a05      	ldr	r2, [sp, #20]
 80175ea:	bb42      	cbnz	r2, 801763e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80175ec:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80175f0:	4298      	cmp	r0, r3
 80175f2:	d001      	beq.n	80175f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80175f4:	4550      	cmp	r0, sl
 80175f6:	d1bd      	bne.n	8017574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80175f8:	8823      	ldrh	r3, [r4, #0]
 80175fa:	8b21      	ldrh	r1, [r4, #24]
 80175fc:	2b20      	cmp	r3, #32
 80175fe:	d001      	beq.n	8017604 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8017600:	4553      	cmp	r3, sl
 8017602:	d131      	bne.n	8017668 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8017604:	2e00      	cmp	r6, #0
 8017606:	bf0a      	itet	eq
 8017608:	460d      	moveq	r5, r1
 801760a:	4630      	movne	r0, r6
 801760c:	2001      	moveq	r0, #1
 801760e:	440a      	add	r2, r1
 8017610:	8aa3      	ldrh	r3, [r4, #20]
 8017612:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017616:	b292      	uxth	r2, r2
 8017618:	8322      	strh	r2, [r4, #24]
 801761a:	4413      	add	r3, r2
 801761c:	2f00      	cmp	r7, #0
 801761e:	d03a      	beq.n	8017696 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8017620:	f1bb 0f00 	cmp.w	fp, #0
 8017624:	d102      	bne.n	801762c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8017626:	9903      	ldr	r1, [sp, #12]
 8017628:	b301      	cbz	r1, 801766c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801762a:	b1f8      	cbz	r0, 801766c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801762c:	8ba1      	ldrh	r1, [r4, #28]
 801762e:	4419      	add	r1, r3
 8017630:	458c      	cmp	ip, r1
 8017632:	da2a      	bge.n	801768a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8017634:	8a61      	ldrh	r1, [r4, #18]
 8017636:	b341      	cbz	r1, 801768a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8017638:	4563      	cmp	r3, ip
 801763a:	dd9b      	ble.n	8017574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801763c:	e01c      	b.n	8017678 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801763e:	8893      	ldrh	r3, [r2, #4]
 8017640:	4649      	mov	r1, r9
 8017642:	8023      	strh	r3, [r4, #0]
 8017644:	f892 800d 	ldrb.w	r8, [r2, #13]
 8017648:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801764c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8017650:	f892 800a 	ldrb.w	r8, [r2, #10]
 8017654:	ea48 0800 	orr.w	r8, r8, r0
 8017658:	68e0      	ldr	r0, [r4, #12]
 801765a:	6803      	ldr	r3, [r0, #0]
 801765c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801765e:	4798      	blx	r3
 8017660:	eb08 0200 	add.w	r2, r8, r0
 8017664:	b292      	uxth	r2, r2
 8017666:	e7c7      	b.n	80175f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8017668:	2000      	movs	r0, #0
 801766a:	e7d0      	b.n	801760e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801766c:	4563      	cmp	r3, ip
 801766e:	dd81      	ble.n	8017574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017670:	8a63      	ldrh	r3, [r4, #18]
 8017672:	2b00      	cmp	r3, #0
 8017674:	f43f af7e 	beq.w	8017574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017678:	2301      	movs	r3, #1
 801767a:	8ba2      	ldrh	r2, [r4, #28]
 801767c:	77a3      	strb	r3, [r4, #30]
 801767e:	8b63      	ldrh	r3, [r4, #26]
 8017680:	4413      	add	r3, r2
 8017682:	8363      	strh	r3, [r4, #26]
 8017684:	b007      	add	sp, #28
 8017686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801768a:	2300      	movs	r3, #0
 801768c:	4611      	mov	r1, r2
 801768e:	4620      	mov	r0, r4
 8017690:	f7ff ff42 	bl	8017518 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017694:	e76e      	b.n	8017574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017696:	4563      	cmp	r3, ip
 8017698:	dd14      	ble.n	80176c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801769a:	9b02      	ldr	r3, [sp, #8]
 801769c:	b113      	cbz	r3, 80176a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801769e:	2301      	movs	r3, #1
 80176a0:	460a      	mov	r2, r1
 80176a2:	e783      	b.n	80175ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80176a4:	9b01      	ldr	r3, [sp, #4]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	f43f af64 	beq.w	8017574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80176ac:	2800      	cmp	r0, #0
 80176ae:	f47f af61 	bne.w	8017574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80176b2:	b116      	cbz	r6, 80176ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80176b4:	2301      	movs	r3, #1
 80176b6:	462a      	mov	r2, r5
 80176b8:	e779      	b.n	80175ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80176ba:	8a63      	ldrh	r3, [r4, #18]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	f43f af59 	beq.w	8017574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80176c2:	e7df      	b.n	8017684 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80176c4:	2800      	cmp	r0, #0
 80176c6:	f47f af55 	bne.w	8017574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80176ca:	2e00      	cmp	r6, #0
 80176cc:	f43f af52 	beq.w	8017574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80176d0:	2301      	movs	r3, #1
 80176d2:	462a      	mov	r2, r5
 80176d4:	e7db      	b.n	801768e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080176d6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80176d6:	b530      	push	{r4, r5, lr}
 80176d8:	4605      	mov	r5, r0
 80176da:	b08b      	sub	sp, #44	; 0x2c
 80176dc:	b191      	cbz	r1, 8017704 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80176de:	2401      	movs	r4, #1
 80176e0:	e9cd 3100 	strd	r3, r1, [sp]
 80176e4:	4613      	mov	r3, r2
 80176e6:	4601      	mov	r1, r0
 80176e8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80176ec:	a802      	add	r0, sp, #8
 80176ee:	f7ff fd07 	bl	8017100 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80176f2:	2100      	movs	r1, #0
 80176f4:	a802      	add	r0, sp, #8
 80176f6:	f7ff ff1f 	bl	8017538 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80176fa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80176fe:	b163      	cbz	r3, 801771a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8017700:	3401      	adds	r4, #1
 8017702:	e7f6      	b.n	80176f2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8017704:	2401      	movs	r4, #1
 8017706:	f002 fce1 	bl	801a0cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801770a:	280a      	cmp	r0, #10
 801770c:	4628      	mov	r0, r5
 801770e:	bf08      	it	eq
 8017710:	3401      	addeq	r4, #1
 8017712:	f002 fcdb 	bl	801a0cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017716:	2800      	cmp	r0, #0
 8017718:	d1f7      	bne.n	801770a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801771a:	b2a0      	uxth	r0, r4
 801771c:	b00b      	add	sp, #44	; 0x2c
 801771e:	bd30      	pop	{r4, r5, pc}

08017720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017724:	b0e5      	sub	sp, #404	; 0x194
 8017726:	4689      	mov	r9, r1
 8017728:	461c      	mov	r4, r3
 801772a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801772e:	900a      	str	r0, [sp, #40]	; 0x28
 8017730:	f1ba 0f00 	cmp.w	sl, #0
 8017734:	f000 80b4 	beq.w	80178a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	2b00      	cmp	r3, #0
 801773c:	f000 80b0 	beq.w	80178a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017740:	7ba3      	ldrb	r3, [r4, #14]
 8017742:	2b00      	cmp	r3, #0
 8017744:	f000 80ac 	beq.w	80178a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017748:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801774c:	6810      	ldr	r0, [r2, #0]
 801774e:	6851      	ldr	r1, [r2, #4]
 8017750:	2500      	movs	r5, #0
 8017752:	4643      	mov	r3, r8
 8017754:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8017758:	950f      	str	r5, [sp, #60]	; 0x3c
 801775a:	af19      	add	r7, sp, #100	; 0x64
 801775c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017760:	79a2      	ldrb	r2, [r4, #6]
 8017762:	c303      	stmia	r3!, {r0, r1}
 8017764:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8017768:	a90f      	add	r1, sp, #60	; 0x3c
 801776a:	4640      	mov	r0, r8
 801776c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017770:	f7ff fd3e 	bl	80171f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017774:	a90f      	add	r1, sp, #60	; 0x3c
 8017776:	79a2      	ldrb	r2, [r4, #6]
 8017778:	4608      	mov	r0, r1
 801777a:	f7ff fd39 	bl	80171f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801777e:	4638      	mov	r0, r7
 8017780:	f002 f877 	bl	8019872 <_ZN8touchgfx12TextProviderC1Ev>
 8017784:	6820      	ldr	r0, [r4, #0]
 8017786:	6803      	ldr	r3, [r0, #0]
 8017788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801778a:	4798      	blx	r3
 801778c:	4606      	mov	r6, r0
 801778e:	6820      	ldr	r0, [r4, #0]
 8017790:	6803      	ldr	r3, [r0, #0]
 8017792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017794:	4798      	blx	r3
 8017796:	4633      	mov	r3, r6
 8017798:	9000      	str	r0, [sp, #0]
 801779a:	4651      	mov	r1, sl
 801779c:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801779e:	4638      	mov	r0, r7
 80177a0:	f002 f8c2 	bl	8019928 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80177a4:	7923      	ldrb	r3, [r4, #4]
 80177a6:	6820      	ldr	r0, [r4, #0]
 80177a8:	9308      	str	r3, [sp, #32]
 80177aa:	6803      	ldr	r3, [r0, #0]
 80177ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177ae:	4798      	blx	r3
 80177b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177b4:	181e      	adds	r6, r3, r0
 80177b6:	42ae      	cmp	r6, r5
 80177b8:	dd06      	ble.n	80177c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80177ba:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80177be:	4282      	cmp	r2, r0
 80177c0:	bfa4      	itt	ge
 80177c2:	189d      	addge	r5, r3, r2
 80177c4:	fb95 f5f6 	sdivge	r5, r5, r6
 80177c8:	a832      	add	r0, sp, #200	; 0xc8
 80177ca:	f002 f852 	bl	8019872 <_ZN8touchgfx12TextProviderC1Ev>
 80177ce:	7c23      	ldrb	r3, [r4, #16]
 80177d0:	b17b      	cbz	r3, 80177f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 80177d2:	6820      	ldr	r0, [r4, #0]
 80177d4:	6803      	ldr	r3, [r0, #0]
 80177d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177d8:	4798      	blx	r3
 80177da:	4683      	mov	fp, r0
 80177dc:	6820      	ldr	r0, [r4, #0]
 80177de:	6803      	ldr	r3, [r0, #0]
 80177e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80177e2:	4798      	blx	r3
 80177e4:	465b      	mov	r3, fp
 80177e6:	9000      	str	r0, [sp, #0]
 80177e8:	4651      	mov	r1, sl
 80177ea:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80177ec:	a832      	add	r0, sp, #200	; 0xc8
 80177ee:	f002 f89b 	bl	8019928 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80177f2:	7be1      	ldrb	r1, [r4, #15]
 80177f4:	a811      	add	r0, sp, #68	; 0x44
 80177f6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80177fa:	7963      	ldrb	r3, [r4, #5]
 80177fc:	1a52      	subs	r2, r2, r1
 80177fe:	7c21      	ldrb	r1, [r4, #16]
 8017800:	9101      	str	r1, [sp, #4]
 8017802:	b292      	uxth	r2, r2
 8017804:	6821      	ldr	r1, [r4, #0]
 8017806:	9100      	str	r1, [sp, #0]
 8017808:	a932      	add	r1, sp, #200	; 0xc8
 801780a:	f7ff fc79 	bl	8017100 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801780e:	7c23      	ldrb	r3, [r4, #16]
 8017810:	b9bb      	cbnz	r3, 8017842 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8017812:	fa1f fa86 	uxth.w	sl, r6
 8017816:	2d00      	cmp	r5, #0
 8017818:	dd45      	ble.n	80178a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801781a:	4638      	mov	r0, r7
 801781c:	f002 fc56 	bl	801a0cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017820:	2800      	cmp	r0, #0
 8017822:	d03d      	beq.n	80178a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017824:	280a      	cmp	r0, #10
 8017826:	d1f6      	bne.n	8017816 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8017828:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801782c:	3d01      	subs	r5, #1
 801782e:	4453      	add	r3, sl
 8017830:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017834:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8017838:	eba3 030a 	sub.w	r3, r3, sl
 801783c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017840:	e7e9      	b.n	8017816 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8017842:	0073      	lsls	r3, r6, #1
 8017844:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8017848:	fa1f fa86 	uxth.w	sl, r6
 801784c:	9309      	str	r3, [sp, #36]	; 0x24
 801784e:	2d00      	cmp	r5, #0
 8017850:	dd29      	ble.n	80178a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8017852:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017856:	a811      	add	r0, sp, #68	; 0x44
 8017858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801785a:	428b      	cmp	r3, r1
 801785c:	bfd4      	ite	le
 801785e:	2100      	movle	r1, #0
 8017860:	2101      	movgt	r1, #1
 8017862:	f7ff fe69 	bl	8017538 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017866:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801786a:	3b01      	subs	r3, #1
 801786c:	b29b      	uxth	r3, r3
 801786e:	455b      	cmp	r3, fp
 8017870:	930b      	str	r3, [sp, #44]	; 0x2c
 8017872:	d005      	beq.n	8017880 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8017874:	7961      	ldrb	r1, [r4, #5]
 8017876:	4638      	mov	r0, r7
 8017878:	f7ec fdc6 	bl	8004408 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801787c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801787e:	e7f4      	b.n	801786a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8017880:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017884:	3d01      	subs	r5, #1
 8017886:	4453      	add	r3, sl
 8017888:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801788c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8017890:	eba3 030a 	sub.w	r3, r3, sl
 8017894:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017898:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801789c:	2b00      	cmp	r3, #0
 801789e:	d1d6      	bne.n	801784e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80178a0:	b065      	add	sp, #404	; 0x194
 80178a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178a6:	0075      	lsls	r5, r6, #1
 80178a8:	f04f 0a00 	mov.w	sl, #0
 80178ac:	7c23      	ldrb	r3, [r4, #16]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d066      	beq.n	8017980 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80178b2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80178b6:	a811      	add	r0, sp, #68	; 0x44
 80178b8:	428d      	cmp	r5, r1
 80178ba:	bfd4      	ite	le
 80178bc:	2100      	movle	r1, #0
 80178be:	2101      	movgt	r1, #1
 80178c0:	f7ff fe3a 	bl	8017538 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80178c4:	9b08      	ldr	r3, [sp, #32]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d055      	beq.n	8017976 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80178ca:	f894 b010 	ldrb.w	fp, [r4, #16]
 80178ce:	2264      	movs	r2, #100	; 0x64
 80178d0:	4639      	mov	r1, r7
 80178d2:	a84b      	add	r0, sp, #300	; 0x12c
 80178d4:	f00b febe 	bl	8023654 <memcpy>
 80178d8:	f1bb 0f00 	cmp.w	fp, #0
 80178dc:	d058      	beq.n	8017990 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80178de:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80178e2:	7922      	ldrb	r2, [r4, #4]
 80178e4:	2a01      	cmp	r2, #1
 80178e6:	d13c      	bne.n	8017962 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80178e8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80178ec:	1ac0      	subs	r0, r0, r3
 80178ee:	2302      	movs	r3, #2
 80178f0:	fb90 f0f3 	sdiv	r0, r0, r3
 80178f4:	b200      	sxth	r0, r0
 80178f6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80178fa:	4418      	add	r0, r3
 80178fc:	7c23      	ldrb	r3, [r4, #16]
 80178fe:	b200      	sxth	r0, r0
 8017900:	2b00      	cmp	r3, #0
 8017902:	d03a      	beq.n	801797a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8017904:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8017908:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801790c:	9000      	str	r0, [sp, #0]
 801790e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8017912:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017914:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017918:	e9cd a703 	strd	sl, r7, [sp, #12]
 801791c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8017920:	464a      	mov	r2, r9
 8017922:	2100      	movs	r1, #0
 8017924:	f7ff fc95 	bl	8017252 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017928:	2800      	cmp	r0, #0
 801792a:	d1b9      	bne.n	80178a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801792c:	b2b2      	uxth	r2, r6
 801792e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017932:	4611      	mov	r1, r2
 8017934:	4413      	add	r3, r2
 8017936:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801793a:	b21b      	sxth	r3, r3
 801793c:	1a52      	subs	r2, r2, r1
 801793e:	7c21      	ldrb	r1, [r4, #16]
 8017940:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017944:	b212      	sxth	r2, r2
 8017946:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801794a:	b109      	cbz	r1, 8017950 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801794c:	42b2      	cmp	r2, r6
 801794e:	dba7      	blt.n	80178a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017950:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8017954:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8017958:	440a      	add	r2, r1
 801795a:	b212      	sxth	r2, r2
 801795c:	4293      	cmp	r3, r2
 801795e:	dda5      	ble.n	80178ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8017960:	e79e      	b.n	80178a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017962:	2a02      	cmp	r2, #2
 8017964:	d105      	bne.n	8017972 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8017966:	7be2      	ldrb	r2, [r4, #15]
 8017968:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801796c:	1a80      	subs	r0, r0, r2
 801796e:	1ac0      	subs	r0, r0, r3
 8017970:	e7c0      	b.n	80178f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8017972:	2000      	movs	r0, #0
 8017974:	e7bf      	b.n	80178f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8017976:	7be0      	ldrb	r0, [r4, #15]
 8017978:	e7bd      	b.n	80178f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801797a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801797e:	e7c3      	b.n	8017908 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8017980:	9b08      	ldr	r3, [sp, #32]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d0f7      	beq.n	8017976 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017986:	2264      	movs	r2, #100	; 0x64
 8017988:	4639      	mov	r1, r7
 801798a:	a84b      	add	r0, sp, #300	; 0x12c
 801798c:	f00b fe62 	bl	8023654 <memcpy>
 8017990:	2300      	movs	r3, #0
 8017992:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017996:	6821      	ldr	r1, [r4, #0]
 8017998:	a84b      	add	r0, sp, #300	; 0x12c
 801799a:	f7ff fbed 	bl	8017178 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801799e:	b203      	sxth	r3, r0
 80179a0:	e79f      	b.n	80178e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

080179a2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80179a2:	2b03      	cmp	r3, #3
 80179a4:	d818      	bhi.n	80179d8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80179a6:	e8df f003 	tbb	[pc, r3]
 80179aa:	0602      	.short	0x0602
 80179ac:	130d      	.short	0x130d
 80179ae:	f9b0 2000 	ldrsh.w	r2, [r0]
 80179b2:	1850      	adds	r0, r2, r1
 80179b4:	4770      	bx	lr
 80179b6:	8803      	ldrh	r3, [r0, #0]
 80179b8:	8880      	ldrh	r0, [r0, #4]
 80179ba:	4418      	add	r0, r3
 80179bc:	b200      	sxth	r0, r0
 80179be:	1a80      	subs	r0, r0, r2
 80179c0:	3801      	subs	r0, #1
 80179c2:	4770      	bx	lr
 80179c4:	8803      	ldrh	r3, [r0, #0]
 80179c6:	8880      	ldrh	r0, [r0, #4]
 80179c8:	4418      	add	r0, r3
 80179ca:	b200      	sxth	r0, r0
 80179cc:	1a40      	subs	r0, r0, r1
 80179ce:	e7f7      	b.n	80179c0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80179d0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80179d4:	4410      	add	r0, r2
 80179d6:	4770      	bx	lr
 80179d8:	2000      	movs	r0, #0
 80179da:	4770      	bx	lr

080179dc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80179dc:	2b03      	cmp	r3, #3
 80179de:	d817      	bhi.n	8017a10 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80179e0:	e8df f003 	tbb	[pc, r3]
 80179e4:	10090602 	.word	0x10090602
 80179e8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80179ec:	1850      	adds	r0, r2, r1
 80179ee:	4770      	bx	lr
 80179f0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80179f4:	e7fa      	b.n	80179ec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80179f6:	8843      	ldrh	r3, [r0, #2]
 80179f8:	88c0      	ldrh	r0, [r0, #6]
 80179fa:	4418      	add	r0, r3
 80179fc:	b200      	sxth	r0, r0
 80179fe:	1a80      	subs	r0, r0, r2
 8017a00:	3801      	subs	r0, #1
 8017a02:	4770      	bx	lr
 8017a04:	8843      	ldrh	r3, [r0, #2]
 8017a06:	88c0      	ldrh	r0, [r0, #6]
 8017a08:	4418      	add	r0, r3
 8017a0a:	b200      	sxth	r0, r0
 8017a0c:	1a40      	subs	r0, r0, r1
 8017a0e:	e7f7      	b.n	8017a00 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017a10:	2000      	movs	r0, #0
 8017a12:	4770      	bx	lr

08017a14 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017a14:	4b01      	ldr	r3, [pc, #4]	; (8017a1c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017a16:	2200      	movs	r2, #0
 8017a18:	601a      	str	r2, [r3, #0]
 8017a1a:	4770      	bx	lr
 8017a1c:	2400ff1c 	.word	0x2400ff1c

08017a20 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017a20:	4603      	mov	r3, r0
 8017a22:	b1c8      	cbz	r0, 8017a58 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017a24:	0c02      	lsrs	r2, r0, #16
 8017a26:	0412      	lsls	r2, r2, #16
 8017a28:	b9a2      	cbnz	r2, 8017a54 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8017a2a:	0403      	lsls	r3, r0, #16
 8017a2c:	2010      	movs	r0, #16
 8017a2e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017a32:	bf04      	itt	eq
 8017a34:	021b      	lsleq	r3, r3, #8
 8017a36:	3008      	addeq	r0, #8
 8017a38:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017a3c:	bf04      	itt	eq
 8017a3e:	011b      	lsleq	r3, r3, #4
 8017a40:	3004      	addeq	r0, #4
 8017a42:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017a46:	bf04      	itt	eq
 8017a48:	009b      	lsleq	r3, r3, #2
 8017a4a:	3002      	addeq	r0, #2
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	db04      	blt.n	8017a5a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017a50:	3001      	adds	r0, #1
 8017a52:	4770      	bx	lr
 8017a54:	2000      	movs	r0, #0
 8017a56:	e7ea      	b.n	8017a2e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8017a58:	2020      	movs	r0, #32
 8017a5a:	4770      	bx	lr

08017a5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a60:	b087      	sub	sp, #28
 8017a62:	4681      	mov	r9, r0
 8017a64:	4698      	mov	r8, r3
 8017a66:	4610      	mov	r0, r2
 8017a68:	460d      	mov	r5, r1
 8017a6a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017a6e:	b981      	cbnz	r1, 8017a92 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017a70:	b14b      	cbz	r3, 8017a86 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8017a72:	460b      	mov	r3, r1
 8017a74:	464a      	mov	r2, r9
 8017a76:	4641      	mov	r1, r8
 8017a78:	e9cd 4700 	strd	r4, r7, [sp]
 8017a7c:	f7ff ffee 	bl	8017a5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017a80:	b007      	add	sp, #28
 8017a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a86:	f04f 33ff 	mov.w	r3, #4294967295
 8017a8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017a8e:	603b      	str	r3, [r7, #0]
 8017a90:	e7f6      	b.n	8017a80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017a92:	fa32 fa01 	lsrs.w	sl, r2, r1
 8017a96:	d107      	bne.n	8017aa8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8017a98:	fb09 f602 	mul.w	r6, r9, r2
 8017a9c:	fbb6 f0f4 	udiv	r0, r6, r4
 8017aa0:	fb04 6610 	mls	r6, r4, r0, r6
 8017aa4:	603e      	str	r6, [r7, #0]
 8017aa6:	e7eb      	b.n	8017a80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017aa8:	2601      	movs	r6, #1
 8017aaa:	fa09 fb01 	lsl.w	fp, r9, r1
 8017aae:	408e      	lsls	r6, r1
 8017ab0:	fbbb f3f4 	udiv	r3, fp, r4
 8017ab4:	3e01      	subs	r6, #1
 8017ab6:	9302      	str	r3, [sp, #8]
 8017ab8:	fb0a f303 	mul.w	r3, sl, r3
 8017abc:	4016      	ands	r6, r2
 8017abe:	9303      	str	r3, [sp, #12]
 8017ac0:	4630      	mov	r0, r6
 8017ac2:	f7ff ffad 	bl	8017a20 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017ac6:	464a      	mov	r2, r9
 8017ac8:	460b      	mov	r3, r1
 8017aca:	4601      	mov	r1, r0
 8017acc:	4630      	mov	r0, r6
 8017ace:	e9cd 4700 	strd	r4, r7, [sp]
 8017ad2:	f7ff ffc3 	bl	8017a5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017ad6:	9b02      	ldr	r3, [sp, #8]
 8017ad8:	4606      	mov	r6, r0
 8017ada:	eb05 0108 	add.w	r1, r5, r8
 8017ade:	fb04 bb13 	mls	fp, r4, r3, fp
 8017ae2:	4658      	mov	r0, fp
 8017ae4:	f7ff ff9c 	bl	8017a20 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017ae8:	ab05      	add	r3, sp, #20
 8017aea:	465a      	mov	r2, fp
 8017aec:	e9cd 4300 	strd	r4, r3, [sp]
 8017af0:	4603      	mov	r3, r0
 8017af2:	4650      	mov	r0, sl
 8017af4:	f7ff ffb2 	bl	8017a5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017af8:	6839      	ldr	r1, [r7, #0]
 8017afa:	9a05      	ldr	r2, [sp, #20]
 8017afc:	9b03      	ldr	r3, [sp, #12]
 8017afe:	4411      	add	r1, r2
 8017b00:	fbb1 f2f4 	udiv	r2, r1, r4
 8017b04:	18d3      	adds	r3, r2, r3
 8017b06:	fb04 1412 	mls	r4, r4, r2, r1
 8017b0a:	441e      	add	r6, r3
 8017b0c:	603c      	str	r4, [r7, #0]
 8017b0e:	4430      	add	r0, r6
 8017b10:	e7b6      	b.n	8017a80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08017b12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017b12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b16:	b085      	sub	sp, #20
 8017b18:	f1b0 0900 	subs.w	r9, r0, #0
 8017b1c:	461d      	mov	r5, r3
 8017b1e:	4617      	mov	r7, r2
 8017b20:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017b22:	bfbb      	ittet	lt
 8017b24:	f1c9 0900 	rsblt	r9, r9, #0
 8017b28:	f04f 36ff 	movlt.w	r6, #4294967295
 8017b2c:	2601      	movge	r6, #1
 8017b2e:	6823      	ldrlt	r3, [r4, #0]
 8017b30:	bfbc      	itt	lt
 8017b32:	425b      	neglt	r3, r3
 8017b34:	6023      	strlt	r3, [r4, #0]
 8017b36:	2a00      	cmp	r2, #0
 8017b38:	da04      	bge.n	8017b44 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8017b3a:	6823      	ldr	r3, [r4, #0]
 8017b3c:	4257      	negs	r7, r2
 8017b3e:	4276      	negs	r6, r6
 8017b40:	425b      	negs	r3, r3
 8017b42:	6023      	str	r3, [r4, #0]
 8017b44:	2d00      	cmp	r5, #0
 8017b46:	4638      	mov	r0, r7
 8017b48:	bfba      	itte	lt
 8017b4a:	426d      	neglt	r5, r5
 8017b4c:	f04f 38ff 	movlt.w	r8, #4294967295
 8017b50:	f04f 0801 	movge.w	r8, #1
 8017b54:	f7ff ff64 	bl	8017a20 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017b58:	ab03      	add	r3, sp, #12
 8017b5a:	463a      	mov	r2, r7
 8017b5c:	e9cd 5300 	strd	r5, r3, [sp]
 8017b60:	4603      	mov	r3, r0
 8017b62:	4648      	mov	r0, r9
 8017b64:	f7ff ff7a 	bl	8017a5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017b68:	6823      	ldr	r3, [r4, #0]
 8017b6a:	9a03      	ldr	r2, [sp, #12]
 8017b6c:	4546      	cmp	r6, r8
 8017b6e:	441a      	add	r2, r3
 8017b70:	fb92 f3f5 	sdiv	r3, r2, r5
 8017b74:	4418      	add	r0, r3
 8017b76:	fb05 2313 	mls	r3, r5, r3, r2
 8017b7a:	bf18      	it	ne
 8017b7c:	4240      	negne	r0, r0
 8017b7e:	1c72      	adds	r2, r6, #1
 8017b80:	6023      	str	r3, [r4, #0]
 8017b82:	d105      	bne.n	8017b90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	f1c3 0200 	rsb	r2, r3, #0
 8017b8a:	db0b      	blt.n	8017ba4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017b8c:	6022      	str	r2, [r4, #0]
 8017b8e:	e006      	b.n	8017b9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017b90:	2e01      	cmp	r6, #1
 8017b92:	d104      	bne.n	8017b9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	da02      	bge.n	8017b9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017b98:	442b      	add	r3, r5
 8017b9a:	3801      	subs	r0, #1
 8017b9c:	6023      	str	r3, [r4, #0]
 8017b9e:	b005      	add	sp, #20
 8017ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ba4:	3801      	subs	r0, #1
 8017ba6:	1b52      	subs	r2, r2, r5
 8017ba8:	e7f0      	b.n	8017b8c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017bac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017bac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017bb0:	4c1c      	ldr	r4, [pc, #112]	; (8017c24 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017bb2:	4605      	mov	r5, r0
 8017bb4:	6807      	ldr	r7, [r0, #0]
 8017bb6:	69a3      	ldr	r3, [r4, #24]
 8017bb8:	b92b      	cbnz	r3, 8017bc6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017bba:	6840      	ldr	r0, [r0, #4]
 8017bbc:	e9c5 7000 	strd	r7, r0, [r5]
 8017bc0:	b004      	add	sp, #16
 8017bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bc6:	f04f 0802 	mov.w	r8, #2
 8017bca:	68a2      	ldr	r2, [r4, #8]
 8017bcc:	ae04      	add	r6, sp, #16
 8017bce:	6820      	ldr	r0, [r4, #0]
 8017bd0:	fb93 f1f8 	sdiv	r1, r3, r8
 8017bd4:	440a      	add	r2, r1
 8017bd6:	69e1      	ldr	r1, [r4, #28]
 8017bd8:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017bdc:	463a      	mov	r2, r7
 8017bde:	9600      	str	r6, [sp, #0]
 8017be0:	f7ff ff97 	bl	8017b12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017be4:	69a3      	ldr	r3, [r4, #24]
 8017be6:	4607      	mov	r7, r0
 8017be8:	686a      	ldr	r2, [r5, #4]
 8017bea:	6a21      	ldr	r1, [r4, #32]
 8017bec:	9600      	str	r6, [sp, #0]
 8017bee:	6860      	ldr	r0, [r4, #4]
 8017bf0:	f7ff ff8f 	bl	8017b12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017bf4:	69a3      	ldr	r3, [r4, #24]
 8017bf6:	6962      	ldr	r2, [r4, #20]
 8017bf8:	4407      	add	r7, r0
 8017bfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017bfc:	9600      	str	r6, [sp, #0]
 8017bfe:	68e0      	ldr	r0, [r4, #12]
 8017c00:	fb93 f8f8 	sdiv	r8, r3, r8
 8017c04:	4442      	add	r2, r8
 8017c06:	9203      	str	r2, [sp, #12]
 8017c08:	682a      	ldr	r2, [r5, #0]
 8017c0a:	f7ff ff82 	bl	8017b12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017c0e:	4680      	mov	r8, r0
 8017c10:	9600      	str	r6, [sp, #0]
 8017c12:	69a3      	ldr	r3, [r4, #24]
 8017c14:	686a      	ldr	r2, [r5, #4]
 8017c16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017c18:	6920      	ldr	r0, [r4, #16]
 8017c1a:	f7ff ff7a 	bl	8017b12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017c1e:	4440      	add	r0, r8
 8017c20:	e7cc      	b.n	8017bbc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017c22:	bf00      	nop
 8017c24:	2400ff20 	.word	0x2400ff20

08017c28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017c28:	4b07      	ldr	r3, [pc, #28]	; (8017c48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8017c2a:	781b      	ldrb	r3, [r3, #0]
 8017c2c:	2b01      	cmp	r3, #1
 8017c2e:	d109      	bne.n	8017c44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8017c30:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017c34:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017c38:	8003      	strh	r3, [r0, #0]
 8017c3a:	4b04      	ldr	r3, [pc, #16]	; (8017c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017c3c:	881b      	ldrh	r3, [r3, #0]
 8017c3e:	3b01      	subs	r3, #1
 8017c40:	1a9b      	subs	r3, r3, r2
 8017c42:	800b      	strh	r3, [r1, #0]
 8017c44:	4770      	bx	lr
 8017c46:	bf00      	nop
 8017c48:	2400ff0c 	.word	0x2400ff0c
 8017c4c:	2400ff08 	.word	0x2400ff08

08017c50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017c50:	4b07      	ldr	r3, [pc, #28]	; (8017c70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017c52:	b510      	push	{r4, lr}
 8017c54:	781b      	ldrb	r3, [r3, #0]
 8017c56:	2b01      	cmp	r3, #1
 8017c58:	d108      	bne.n	8017c6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017c5a:	4b06      	ldr	r3, [pc, #24]	; (8017c74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017c5c:	880c      	ldrh	r4, [r1, #0]
 8017c5e:	881b      	ldrh	r3, [r3, #0]
 8017c60:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017c64:	3b01      	subs	r3, #1
 8017c66:	1b1b      	subs	r3, r3, r4
 8017c68:	8003      	strh	r3, [r0, #0]
 8017c6a:	800a      	strh	r2, [r1, #0]
 8017c6c:	bd10      	pop	{r4, pc}
 8017c6e:	bf00      	nop
 8017c70:	2400ff0c 	.word	0x2400ff0c
 8017c74:	2400ff08 	.word	0x2400ff08

08017c78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017c78:	4b0a      	ldr	r3, [pc, #40]	; (8017ca4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017c7a:	b510      	push	{r4, lr}
 8017c7c:	781b      	ldrb	r3, [r3, #0]
 8017c7e:	2b01      	cmp	r3, #1
 8017c80:	d10e      	bne.n	8017ca0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017c82:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017c86:	8843      	ldrh	r3, [r0, #2]
 8017c88:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017c8c:	18ca      	adds	r2, r1, r3
 8017c8e:	4b06      	ldr	r3, [pc, #24]	; (8017ca8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017c90:	8044      	strh	r4, [r0, #2]
 8017c92:	881b      	ldrh	r3, [r3, #0]
 8017c94:	1a9b      	subs	r3, r3, r2
 8017c96:	8003      	strh	r3, [r0, #0]
 8017c98:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017c9c:	8081      	strh	r1, [r0, #4]
 8017c9e:	80c3      	strh	r3, [r0, #6]
 8017ca0:	bd10      	pop	{r4, pc}
 8017ca2:	bf00      	nop
 8017ca4:	2400ff0c 	.word	0x2400ff0c
 8017ca8:	2400ff08 	.word	0x2400ff08

08017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017cac:	4b08      	ldr	r3, [pc, #32]	; (8017cd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017cae:	781b      	ldrb	r3, [r3, #0]
 8017cb0:	2b01      	cmp	r3, #1
 8017cb2:	d10c      	bne.n	8017cce <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017cb4:	8803      	ldrh	r3, [r0, #0]
 8017cb6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017cba:	8842      	ldrh	r2, [r0, #2]
 8017cbc:	8002      	strh	r2, [r0, #0]
 8017cbe:	185a      	adds	r2, r3, r1
 8017cc0:	4b04      	ldr	r3, [pc, #16]	; (8017cd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017cc2:	881b      	ldrh	r3, [r3, #0]
 8017cc4:	1a9b      	subs	r3, r3, r2
 8017cc6:	8043      	strh	r3, [r0, #2]
 8017cc8:	88c3      	ldrh	r3, [r0, #6]
 8017cca:	80c1      	strh	r1, [r0, #6]
 8017ccc:	8083      	strh	r3, [r0, #4]
 8017cce:	4770      	bx	lr
 8017cd0:	2400ff0c 	.word	0x2400ff0c
 8017cd4:	2400ff08 	.word	0x2400ff08

08017cd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017cd8:	4b07      	ldr	r3, [pc, #28]	; (8017cf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017cda:	b510      	push	{r4, lr}
 8017cdc:	781b      	ldrb	r3, [r3, #0]
 8017cde:	2b01      	cmp	r3, #1
 8017ce0:	d108      	bne.n	8017cf4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017ce2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017ce6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017cea:	8003      	strh	r3, [r0, #0]
 8017cec:	8893      	ldrh	r3, [r2, #4]
 8017cee:	3b01      	subs	r3, #1
 8017cf0:	1b1b      	subs	r3, r3, r4
 8017cf2:	800b      	strh	r3, [r1, #0]
 8017cf4:	bd10      	pop	{r4, pc}
 8017cf6:	bf00      	nop
 8017cf8:	2400ff0c 	.word	0x2400ff0c

08017cfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017cfc:	4b0a      	ldr	r3, [pc, #40]	; (8017d28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017cfe:	460a      	mov	r2, r1
 8017d00:	b510      	push	{r4, lr}
 8017d02:	781b      	ldrb	r3, [r3, #0]
 8017d04:	2b01      	cmp	r3, #1
 8017d06:	d10d      	bne.n	8017d24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017d08:	8881      	ldrh	r1, [r0, #4]
 8017d0a:	8803      	ldrh	r3, [r0, #0]
 8017d0c:	440b      	add	r3, r1
 8017d0e:	4601      	mov	r1, r0
 8017d10:	3b01      	subs	r3, #1
 8017d12:	f821 3b02 	strh.w	r3, [r1], #2
 8017d16:	f7ff ffdf 	bl	8017cd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017d1a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017d1e:	88c2      	ldrh	r2, [r0, #6]
 8017d20:	80c3      	strh	r3, [r0, #6]
 8017d22:	8082      	strh	r2, [r0, #4]
 8017d24:	bd10      	pop	{r4, pc}
 8017d26:	bf00      	nop
 8017d28:	2400ff0c 	.word	0x2400ff0c

08017d2c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017d2c:	b570      	push	{r4, r5, r6, lr}
 8017d2e:	2300      	movs	r3, #0
 8017d30:	4c0a      	ldr	r4, [pc, #40]	; (8017d5c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017d32:	4605      	mov	r5, r0
 8017d34:	460e      	mov	r6, r1
 8017d36:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017d3a:	6820      	ldr	r0, [r4, #0]
 8017d3c:	b110      	cbz	r0, 8017d44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8017d3e:	6803      	ldr	r3, [r0, #0]
 8017d40:	695b      	ldr	r3, [r3, #20]
 8017d42:	4798      	blx	r3
 8017d44:	6026      	str	r6, [r4, #0]
 8017d46:	4630      	mov	r0, r6
 8017d48:	6833      	ldr	r3, [r6, #0]
 8017d4a:	68db      	ldr	r3, [r3, #12]
 8017d4c:	4798      	blx	r3
 8017d4e:	682b      	ldr	r3, [r5, #0]
 8017d50:	4628      	mov	r0, r5
 8017d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d58:	4718      	bx	r3
 8017d5a:	bf00      	nop
 8017d5c:	2400ff50 	.word	0x2400ff50

08017d60 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017d60:	4b06      	ldr	r3, [pc, #24]	; (8017d7c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017d62:	2100      	movs	r1, #0
 8017d64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017d68:	4b05      	ldr	r3, [pc, #20]	; (8017d80 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017d6a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8017d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d72:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8017d76:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8017d7a:	4770      	bx	lr
 8017d7c:	2400ff08 	.word	0x2400ff08
 8017d80:	2400ff0a 	.word	0x2400ff0a

08017d84 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017d84:	4b03      	ldr	r3, [pc, #12]	; (8017d94 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017d86:	6818      	ldr	r0, [r3, #0]
 8017d88:	b110      	cbz	r0, 8017d90 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017d8a:	6803      	ldr	r3, [r0, #0]
 8017d8c:	699b      	ldr	r3, [r3, #24]
 8017d8e:	4718      	bx	r3
 8017d90:	4770      	bx	lr
 8017d92:	bf00      	nop
 8017d94:	2400ff50 	.word	0x2400ff50

08017d98 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017d98:	4770      	bx	lr
	...

08017d9c <_ZN8touchgfx11Application4drawEv>:
 8017d9c:	4b09      	ldr	r3, [pc, #36]	; (8017dc4 <_ZN8touchgfx11Application4drawEv+0x28>)
 8017d9e:	b507      	push	{r0, r1, r2, lr}
 8017da0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017da4:	2100      	movs	r1, #0
 8017da6:	4b08      	ldr	r3, [pc, #32]	; (8017dc8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017da8:	9100      	str	r1, [sp, #0]
 8017daa:	4669      	mov	r1, sp
 8017dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017db0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017db4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017db8:	6803      	ldr	r3, [r0, #0]
 8017dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dbc:	4798      	blx	r3
 8017dbe:	b003      	add	sp, #12
 8017dc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8017dc4:	2400ff08 	.word	0x2400ff08
 8017dc8:	2400ff0a 	.word	0x2400ff0a

08017dcc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017dcc:	4b03      	ldr	r3, [pc, #12]	; (8017ddc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017dce:	6818      	ldr	r0, [r3, #0]
 8017dd0:	b110      	cbz	r0, 8017dd8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017dd2:	6803      	ldr	r3, [r0, #0]
 8017dd4:	69db      	ldr	r3, [r3, #28]
 8017dd6:	4718      	bx	r3
 8017dd8:	4770      	bx	lr
 8017dda:	bf00      	nop
 8017ddc:	2400ff50 	.word	0x2400ff50

08017de0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017de0:	4b03      	ldr	r3, [pc, #12]	; (8017df0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017de2:	6818      	ldr	r0, [r3, #0]
 8017de4:	b110      	cbz	r0, 8017dec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017de6:	6803      	ldr	r3, [r0, #0]
 8017de8:	6a1b      	ldr	r3, [r3, #32]
 8017dea:	4718      	bx	r3
 8017dec:	4770      	bx	lr
 8017dee:	bf00      	nop
 8017df0:	2400ff50 	.word	0x2400ff50

08017df4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8017df4:	2300      	movs	r3, #0
 8017df6:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8017dfa:	4770      	bx	lr

08017dfc <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017dfc:	4b03      	ldr	r3, [pc, #12]	; (8017e0c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017dfe:	6818      	ldr	r0, [r3, #0]
 8017e00:	b110      	cbz	r0, 8017e08 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017e02:	6803      	ldr	r3, [r0, #0]
 8017e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e06:	4718      	bx	r3
 8017e08:	4770      	bx	lr
 8017e0a:	bf00      	nop
 8017e0c:	2400ff50 	.word	0x2400ff50

08017e10 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017e10:	b570      	push	{r4, r5, r6, lr}
 8017e12:	4d32      	ldr	r5, [pc, #200]	; (8017edc <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8017e14:	4604      	mov	r4, r0
 8017e16:	6828      	ldr	r0, [r5, #0]
 8017e18:	b140      	cbz	r0, 8017e2c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017e1a:	7a03      	ldrb	r3, [r0, #8]
 8017e1c:	b933      	cbnz	r3, 8017e2c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017e1e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8017e22:	6803      	ldr	r3, [r0, #0]
 8017e24:	689b      	ldr	r3, [r3, #8]
 8017e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e2a:	4718      	bx	r3
 8017e2c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8017e30:	b97b      	cbnz	r3, 8017e52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017e32:	b170      	cbz	r0, 8017e52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017e34:	7a03      	ldrb	r3, [r0, #8]
 8017e36:	b163      	cbz	r3, 8017e52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017e38:	4b29      	ldr	r3, [pc, #164]	; (8017ee0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8017e3a:	6818      	ldr	r0, [r3, #0]
 8017e3c:	b110      	cbz	r0, 8017e44 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017e3e:	6803      	ldr	r3, [r0, #0]
 8017e40:	691b      	ldr	r3, [r3, #16]
 8017e42:	4798      	blx	r3
 8017e44:	6828      	ldr	r0, [r5, #0]
 8017e46:	6803      	ldr	r3, [r0, #0]
 8017e48:	68db      	ldr	r3, [r3, #12]
 8017e4a:	4798      	blx	r3
 8017e4c:	2301      	movs	r3, #1
 8017e4e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8017e52:	2500      	movs	r5, #0
 8017e54:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8017e58:	42a8      	cmp	r0, r5
 8017e5a:	dd0c      	ble.n	8017e76 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8017e5c:	1963      	adds	r3, r4, r5
 8017e5e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017e62:	b132      	cbz	r2, 8017e72 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8017e64:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8017e68:	4413      	add	r3, r2
 8017e6a:	6858      	ldr	r0, [r3, #4]
 8017e6c:	6803      	ldr	r3, [r0, #0]
 8017e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e70:	4798      	blx	r3
 8017e72:	3501      	adds	r5, #1
 8017e74:	e7ee      	b.n	8017e54 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8017e76:	2300      	movs	r3, #0
 8017e78:	461a      	mov	r2, r3
 8017e7a:	4298      	cmp	r0, r3
 8017e7c:	d015      	beq.n	8017eaa <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8017e7e:	18e1      	adds	r1, r4, r3
 8017e80:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8017e84:	b16d      	cbz	r5, 8017ea2 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d00a      	beq.n	8017ea0 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8017e8a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8017e8e:	4431      	add	r1, r6
 8017e90:	684e      	ldr	r6, [r1, #4]
 8017e92:	b291      	uxth	r1, r2
 8017e94:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8017e98:	604e      	str	r6, [r1, #4]
 8017e9a:	18a1      	adds	r1, r4, r2
 8017e9c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017ea0:	3201      	adds	r2, #1
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	e7e9      	b.n	8017e7a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8017ea6:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8017eaa:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8017eae:	4295      	cmp	r5, r2
 8017eb0:	dd0d      	ble.n	8017ece <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8017eb2:	1e6b      	subs	r3, r5, #1
 8017eb4:	b29b      	uxth	r3, r3
 8017eb6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8017eba:	4618      	mov	r0, r3
 8017ebc:	3104      	adds	r1, #4
 8017ebe:	4285      	cmp	r5, r0
 8017ec0:	ddf1      	ble.n	8017ea6 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8017ec2:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8017ec6:	3001      	adds	r0, #1
 8017ec8:	f841 6c04 	str.w	r6, [r1, #-4]
 8017ecc:	e7f7      	b.n	8017ebe <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8017ece:	4b04      	ldr	r3, [pc, #16]	; (8017ee0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8017ed0:	6818      	ldr	r0, [r3, #0]
 8017ed2:	b110      	cbz	r0, 8017eda <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8017ed4:	6803      	ldr	r3, [r0, #0]
 8017ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ed8:	e7a5      	b.n	8017e26 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017eda:	bd70      	pop	{r4, r5, r6, pc}
 8017edc:	2400ff54 	.word	0x2400ff54
 8017ee0:	2400ff50 	.word	0x2400ff50

08017ee4 <_ZN8touchgfx11ApplicationD1Ev>:
 8017ee4:	4770      	bx	lr

08017ee6 <_ZN8touchgfx11ApplicationD0Ev>:
 8017ee6:	b510      	push	{r4, lr}
 8017ee8:	4604      	mov	r4, r0
 8017eea:	f44f 719c 	mov.w	r1, #312	; 0x138
 8017eee:	f00b f9fa 	bl	80232e6 <_ZdlPvj>
 8017ef2:	4620      	mov	r0, r4
 8017ef4:	bd10      	pop	{r4, pc}

08017ef6 <_ZN8touchgfx4Rect10restrictToEss>:
 8017ef6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	b510      	push	{r4, lr}
 8017efe:	da04      	bge.n	8017f0a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8017f00:	8884      	ldrh	r4, [r0, #4]
 8017f02:	4423      	add	r3, r4
 8017f04:	8083      	strh	r3, [r0, #4]
 8017f06:	2300      	movs	r3, #0
 8017f08:	8003      	strh	r3, [r0, #0]
 8017f0a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017f0e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017f12:	1b09      	subs	r1, r1, r4
 8017f14:	428b      	cmp	r3, r1
 8017f16:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017f1a:	bfc8      	it	gt
 8017f1c:	8081      	strhgt	r1, [r0, #4]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	da04      	bge.n	8017f2c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8017f22:	88c1      	ldrh	r1, [r0, #6]
 8017f24:	440b      	add	r3, r1
 8017f26:	80c3      	strh	r3, [r0, #6]
 8017f28:	2300      	movs	r3, #0
 8017f2a:	8043      	strh	r3, [r0, #2]
 8017f2c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017f30:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017f34:	1a52      	subs	r2, r2, r1
 8017f36:	4293      	cmp	r3, r2
 8017f38:	bfc8      	it	gt
 8017f3a:	80c2      	strhgt	r2, [r0, #6]
 8017f3c:	bd10      	pop	{r4, pc}
	...

08017f40 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017f40:	4b10      	ldr	r3, [pc, #64]	; (8017f84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8017f42:	b510      	push	{r4, lr}
 8017f44:	460c      	mov	r4, r1
 8017f46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f4a:	4b0f      	ldr	r3, [pc, #60]	; (8017f88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8017f4c:	4620      	mov	r0, r4
 8017f4e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017f52:	f7ff ffd0 	bl	8017ef6 <_ZN8touchgfx4Rect10restrictToEss>
 8017f56:	4b0d      	ldr	r3, [pc, #52]	; (8017f8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8017f58:	6818      	ldr	r0, [r3, #0]
 8017f5a:	b190      	cbz	r0, 8017f82 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017f5c:	6803      	ldr	r3, [r0, #0]
 8017f5e:	4621      	mov	r1, r4
 8017f60:	689b      	ldr	r3, [r3, #8]
 8017f62:	4798      	blx	r3
 8017f64:	4b0a      	ldr	r3, [pc, #40]	; (8017f90 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8017f66:	6818      	ldr	r0, [r3, #0]
 8017f68:	b118      	cbz	r0, 8017f72 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8017f6a:	6803      	ldr	r3, [r0, #0]
 8017f6c:	4621      	mov	r1, r4
 8017f6e:	689b      	ldr	r3, [r3, #8]
 8017f70:	4798      	blx	r3
 8017f72:	4b08      	ldr	r3, [pc, #32]	; (8017f94 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8017f74:	4621      	mov	r1, r4
 8017f76:	6818      	ldr	r0, [r3, #0]
 8017f78:	6803      	ldr	r3, [r0, #0]
 8017f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f7e:	69db      	ldr	r3, [r3, #28]
 8017f80:	4718      	bx	r3
 8017f82:	bd10      	pop	{r4, pc}
 8017f84:	2400ff0a 	.word	0x2400ff0a
 8017f88:	2400ff08 	.word	0x2400ff08
 8017f8c:	2400ff50 	.word	0x2400ff50
 8017f90:	2400ff4c 	.word	0x2400ff4c
 8017f94:	2400ff14 	.word	0x2400ff14

08017f98 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f9a:	4606      	mov	r6, r0
 8017f9c:	4608      	mov	r0, r1
 8017f9e:	460f      	mov	r7, r1
 8017fa0:	f7fb fa4d 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017fa4:	b9e8      	cbnz	r0, 8017fe2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017fa6:	f9b7 5000 	ldrsh.w	r5, [r7]
 8017faa:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017fae:	42a5      	cmp	r5, r4
 8017fb0:	db17      	blt.n	8017fe2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017fb2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017fb6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	db11      	blt.n	8017fe2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017fbe:	88b9      	ldrh	r1, [r7, #4]
 8017fc0:	440d      	add	r5, r1
 8017fc2:	88b1      	ldrh	r1, [r6, #4]
 8017fc4:	440c      	add	r4, r1
 8017fc6:	b22d      	sxth	r5, r5
 8017fc8:	b224      	sxth	r4, r4
 8017fca:	42a5      	cmp	r5, r4
 8017fcc:	dc09      	bgt.n	8017fe2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017fce:	88f8      	ldrh	r0, [r7, #6]
 8017fd0:	4410      	add	r0, r2
 8017fd2:	88f2      	ldrh	r2, [r6, #6]
 8017fd4:	4413      	add	r3, r2
 8017fd6:	b200      	sxth	r0, r0
 8017fd8:	b21b      	sxth	r3, r3
 8017fda:	4298      	cmp	r0, r3
 8017fdc:	bfcc      	ite	gt
 8017fde:	2000      	movgt	r0, #0
 8017fe0:	2001      	movle	r0, #1
 8017fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017fe4 <_ZN8touchgfx11Application11getInstanceEv>:
 8017fe4:	4b01      	ldr	r3, [pc, #4]	; (8017fec <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017fe6:	6818      	ldr	r0, [r3, #0]
 8017fe8:	4770      	bx	lr
 8017fea:	bf00      	nop
 8017fec:	2400ff60 	.word	0x2400ff60

08017ff0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8017ff0:	b570      	push	{r4, r5, r6, lr}
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8017ff8:	1d04      	adds	r4, r0, #4
 8017ffa:	b295      	uxth	r5, r2
 8017ffc:	429d      	cmp	r5, r3
 8017ffe:	d20e      	bcs.n	801801e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8018000:	f854 6b04 	ldr.w	r6, [r4], #4
 8018004:	4615      	mov	r5, r2
 8018006:	3201      	adds	r2, #1
 8018008:	428e      	cmp	r6, r1
 801800a:	d1f6      	bne.n	8017ffa <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801800c:	4428      	add	r0, r5
 801800e:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8018012:	2bff      	cmp	r3, #255	; 0xff
 8018014:	d002      	beq.n	801801c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8018016:	3301      	adds	r3, #1
 8018018:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801801c:	bd70      	pop	{r4, r5, r6, pc}
 801801e:	18c2      	adds	r2, r0, r3
 8018020:	2b20      	cmp	r3, #32
 8018022:	f04f 0401 	mov.w	r4, #1
 8018026:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801802a:	bf1f      	itttt	ne
 801802c:	191a      	addne	r2, r3, r4
 801802e:	f8a0 2084 	strhne.w	r2, [r0, #132]	; 0x84
 8018032:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
 8018036:	6041      	strne	r1, [r0, #4]
 8018038:	e7f0      	b.n	801801c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>

0801803a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801803a:	b570      	push	{r4, r5, r6, lr}
 801803c:	2300      	movs	r3, #0
 801803e:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8018042:	1d04      	adds	r4, r0, #4
 8018044:	b29a      	uxth	r2, r3
 8018046:	4296      	cmp	r6, r2
 8018048:	d90a      	bls.n	8018060 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801804a:	f854 2b04 	ldr.w	r2, [r4], #4
 801804e:	428a      	cmp	r2, r1
 8018050:	d107      	bne.n	8018062 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8018052:	18c5      	adds	r5, r0, r3
 8018054:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8018058:	b11a      	cbz	r2, 8018062 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801805a:	3a01      	subs	r2, #1
 801805c:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8018060:	bd70      	pop	{r4, r5, r6, pc}
 8018062:	3301      	adds	r3, #1
 8018064:	e7ee      	b.n	8018044 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08018066 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018066:	2300      	movs	r3, #0
 8018068:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801806c:	30a8      	adds	r0, #168	; 0xa8
 801806e:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018072:	f802 3b01 	strb.w	r3, [r2], #1
 8018076:	4282      	cmp	r2, r0
 8018078:	d1fb      	bne.n	8018072 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801807a:	4770      	bx	lr

0801807c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801807c:	4603      	mov	r3, r0
 801807e:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018082:	2200      	movs	r2, #0
 8018084:	801a      	strh	r2, [r3, #0]
 8018086:	3308      	adds	r3, #8
 8018088:	f823 2c06 	strh.w	r2, [r3, #-6]
 801808c:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018090:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018094:	428b      	cmp	r3, r1
 8018096:	d1f5      	bne.n	8018084 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018098:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801809c:	4770      	bx	lr
	...

080180a0 <_ZN8touchgfx11ApplicationC1Ev>:
 80180a0:	b570      	push	{r4, r5, r6, lr}
 80180a2:	4b19      	ldr	r3, [pc, #100]	; (8018108 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80180a4:	2500      	movs	r5, #0
 80180a6:	4604      	mov	r4, r0
 80180a8:	30a8      	adds	r0, #168	; 0xa8
 80180aa:	f840 3ca8 	str.w	r3, [r0, #-168]
 80180ae:	f820 5c24 	strh.w	r5, [r0, #-36]
 80180b2:	f7ff ffe3 	bl	801807c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80180b6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80180ba:	f7ff ffdf 	bl	801807c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80180be:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80180c2:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80180c6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80180ca:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80180ce:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80180d2:	490e      	ldr	r1, [pc, #56]	; (801810c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80180d4:	480e      	ldr	r0, [pc, #56]	; (8018110 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80180d6:	f00a fffd 	bl	80230d4 <CRC_Lock>
 80180da:	4e0e      	ldr	r6, [pc, #56]	; (8018114 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80180dc:	4b0e      	ldr	r3, [pc, #56]	; (8018118 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80180de:	b158      	cbz	r0, 80180f8 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 80180e0:	801d      	strh	r5, [r3, #0]
 80180e2:	2300      	movs	r3, #0
 80180e4:	4a0d      	ldr	r2, [pc, #52]	; (801811c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80180e6:	4620      	mov	r0, r4
 80180e8:	6013      	str	r3, [r2, #0]
 80180ea:	4a0d      	ldr	r2, [pc, #52]	; (8018120 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80180ec:	6033      	str	r3, [r6, #0]
 80180ee:	6013      	str	r3, [r2, #0]
 80180f0:	f7ff ffb9 	bl	8018066 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80180f4:	4620      	mov	r0, r4
 80180f6:	bd70      	pop	{r4, r5, r6, pc}
 80180f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80180fc:	2002      	movs	r0, #2
 80180fe:	801a      	strh	r2, [r3, #0]
 8018100:	6030      	str	r0, [r6, #0]
 8018102:	f001 fa09 	bl	8019518 <_ZN8touchgfx6Screen4drawEv>
 8018106:	e7ec      	b.n	80180e2 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8018108:	080270d4 	.word	0x080270d4
 801810c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018110:	f407a5c2 	.word	0xf407a5c2
 8018114:	2400ff50 	.word	0x2400ff50
 8018118:	24000084 	.word	0x24000084
 801811c:	2400ff60 	.word	0x2400ff60
 8018120:	2400ff54 	.word	0x2400ff54

08018124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018124:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018128:	3b01      	subs	r3, #1
 801812a:	b29b      	uxth	r3, r3
 801812c:	428b      	cmp	r3, r1
 801812e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018132:	b510      	push	{r4, lr}
 8018134:	d908      	bls.n	8018148 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8018136:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801813a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801813e:	681a      	ldr	r2, [r3, #0]
 8018140:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018144:	685a      	ldr	r2, [r3, #4]
 8018146:	6062      	str	r2, [r4, #4]
 8018148:	bd10      	pop	{r4, pc}
	...

0801814c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018150:	b08f      	sub	sp, #60	; 0x3c
 8018152:	4b94      	ldr	r3, [pc, #592]	; (80183a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8018154:	4683      	mov	fp, r0
 8018156:	ac0a      	add	r4, sp, #40	; 0x28
 8018158:	e884 0006 	stmia.w	r4, {r1, r2}
 801815c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018160:	4620      	mov	r0, r4
 8018162:	4b91      	ldr	r3, [pc, #580]	; (80183a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8018164:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018168:	f7ff fec5 	bl	8017ef6 <_ZN8touchgfx4Rect10restrictToEss>
 801816c:	4620      	mov	r0, r4
 801816e:	f7fb f966 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018172:	2800      	cmp	r0, #0
 8018174:	d16a      	bne.n	801824c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018176:	9403      	str	r4, [sp, #12]
 8018178:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801817c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8018180:	2400      	movs	r4, #0
 8018182:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8018186:	9301      	str	r3, [sp, #4]
 8018188:	36a0      	adds	r6, #160	; 0xa0
 801818a:	42a5      	cmp	r5, r4
 801818c:	d00d      	beq.n	80181aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801818e:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8018192:	9803      	ldr	r0, [sp, #12]
 8018194:	f7ff ff00 	bl	8017f98 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018198:	b128      	cbz	r0, 80181a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801819a:	1e69      	subs	r1, r5, #1
 801819c:	9801      	ldr	r0, [sp, #4]
 801819e:	1b09      	subs	r1, r1, r4
 80181a0:	b289      	uxth	r1, r1
 80181a2:	f7ff ffbf 	bl	8018124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80181a6:	3401      	adds	r4, #1
 80181a8:	e7ef      	b.n	801818a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 80181aa:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80181ae:	1e7b      	subs	r3, r7, #1
 80181b0:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80181b4:	9704      	str	r7, [sp, #16]
 80181b6:	9302      	str	r3, [sp, #8]
 80181b8:	2400      	movs	r4, #0
 80181ba:	4655      	mov	r5, sl
 80181bc:	9705      	str	r7, [sp, #20]
 80181be:	4626      	mov	r6, r4
 80181c0:	9b05      	ldr	r3, [sp, #20]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d078      	beq.n	80182b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 80181c6:	9903      	ldr	r1, [sp, #12]
 80181c8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80181cc:	f7fd ff58 	bl	8016080 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80181d0:	b360      	cbz	r0, 801822c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80181d2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80181d6:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80181da:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 80181de:	45e6      	cmp	lr, ip
 80181e0:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80181e4:	db35      	blt.n	8018252 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80181e6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80181ea:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80181ee:	4472      	add	r2, lr
 80181f0:	4463      	add	r3, ip
 80181f2:	b212      	sxth	r2, r2
 80181f4:	b21b      	sxth	r3, r3
 80181f6:	429a      	cmp	r2, r3
 80181f8:	dc2b      	bgt.n	8018252 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80181fa:	fa1f f288 	uxth.w	r2, r8
 80181fe:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018202:	45c1      	cmp	r9, r8
 8018204:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018208:	4413      	add	r3, r2
 801820a:	fa1f fc89 	uxth.w	ip, r9
 801820e:	b29b      	uxth	r3, r3
 8018210:	fa0f fe83 	sxth.w	lr, r3
 8018214:	db0f      	blt.n	8018236 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018216:	eba3 030c 	sub.w	r3, r3, ip
 801821a:	1ac9      	subs	r1, r1, r3
 801821c:	b209      	sxth	r1, r1
 801821e:	2900      	cmp	r1, #0
 8018220:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018224:	dd12      	ble.n	801824c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018226:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801822a:	4604      	mov	r4, r0
 801822c:	9b05      	ldr	r3, [sp, #20]
 801822e:	3d08      	subs	r5, #8
 8018230:	3b01      	subs	r3, #1
 8018232:	9305      	str	r3, [sp, #20]
 8018234:	e7c4      	b.n	80181c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8018236:	4461      	add	r1, ip
 8018238:	b209      	sxth	r1, r1
 801823a:	4571      	cmp	r1, lr
 801823c:	dc3a      	bgt.n	80182b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801823e:	eba2 020c 	sub.w	r2, r2, ip
 8018242:	b212      	sxth	r2, r2
 8018244:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8018248:	2a00      	cmp	r2, #0
 801824a:	dcee      	bgt.n	801822a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801824c:	b00f      	add	sp, #60	; 0x3c
 801824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018252:	45c1      	cmp	r9, r8
 8018254:	db2e      	blt.n	80182b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8018256:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801825a:	4499      	add	r9, r3
 801825c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018260:	4498      	add	r8, r3
 8018262:	fa0f f989 	sxth.w	r9, r9
 8018266:	fa0f f888 	sxth.w	r8, r8
 801826a:	45c1      	cmp	r9, r8
 801826c:	dc22      	bgt.n	80182b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801826e:	fa1f f28c 	uxth.w	r2, ip
 8018272:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018276:	45e6      	cmp	lr, ip
 8018278:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801827c:	4413      	add	r3, r2
 801827e:	fa1f f88e 	uxth.w	r8, lr
 8018282:	b29b      	uxth	r3, r3
 8018284:	fa0f f983 	sxth.w	r9, r3
 8018288:	db0a      	blt.n	80182a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801828a:	eba3 0308 	sub.w	r3, r3, r8
 801828e:	1ac9      	subs	r1, r1, r3
 8018290:	b209      	sxth	r1, r1
 8018292:	2900      	cmp	r1, #0
 8018294:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8018298:	ddd8      	ble.n	801824c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801829a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801829e:	e7c4      	b.n	801822a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80182a0:	4441      	add	r1, r8
 80182a2:	b209      	sxth	r1, r1
 80182a4:	4549      	cmp	r1, r9
 80182a6:	dc05      	bgt.n	80182b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80182a8:	eba2 0208 	sub.w	r2, r2, r8
 80182ac:	b212      	sxth	r2, r2
 80182ae:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80182b2:	e7c9      	b.n	8018248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80182b4:	4606      	mov	r6, r0
 80182b6:	e7b9      	b.n	801822c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80182b8:	2c00      	cmp	r4, #0
 80182ba:	f47f af7d 	bne.w	80181b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 80182be:	2e00      	cmp	r6, #0
 80182c0:	f000 81e1 	beq.w	8018686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80182c4:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80182c8:	4655      	mov	r5, sl
 80182ca:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80182ce:	b2b9      	uxth	r1, r7
 80182d0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80182d4:	b2b3      	uxth	r3, r6
 80182d6:	9105      	str	r1, [sp, #20]
 80182d8:	9805      	ldr	r0, [sp, #20]
 80182da:	441a      	add	r2, r3
 80182dc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80182e0:	b292      	uxth	r2, r2
 80182e2:	4401      	add	r1, r0
 80182e4:	fa0f f882 	sxth.w	r8, r2
 80182e8:	b289      	uxth	r1, r1
 80182ea:	9106      	str	r1, [sp, #24]
 80182ec:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 80182f0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80182f4:	9b04      	ldr	r3, [sp, #16]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d058      	beq.n	80183ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 80182fa:	9903      	ldr	r1, [sp, #12]
 80182fc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018300:	f7fd febe 	bl	8016080 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018304:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018308:	b1d8      	cbz	r0, 8018342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801830a:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801830e:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8018312:	4576      	cmp	r6, lr
 8018314:	dc26      	bgt.n	8018364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8018316:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801831a:	44f4      	add	ip, lr
 801831c:	fa0f fc8c 	sxth.w	ip, ip
 8018320:	45e0      	cmp	r8, ip
 8018322:	db1f      	blt.n	8018364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8018324:	428f      	cmp	r7, r1
 8018326:	fa1f fc81 	uxth.w	ip, r1
 801832a:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801832e:	dc0f      	bgt.n	8018350 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8018330:	9806      	ldr	r0, [sp, #24]
 8018332:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8018336:	eba0 0c0c 	sub.w	ip, r0, ip
 801833a:	eba1 010c 	sub.w	r1, r1, ip
 801833e:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8018342:	4620      	mov	r0, r4
 8018344:	9904      	ldr	r1, [sp, #16]
 8018346:	3d08      	subs	r5, #8
 8018348:	4604      	mov	r4, r0
 801834a:	3901      	subs	r1, #1
 801834c:	9104      	str	r1, [sp, #16]
 801834e:	e7cf      	b.n	80182f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8018350:	4461      	add	r1, ip
 8018352:	b209      	sxth	r1, r1
 8018354:	4549      	cmp	r1, r9
 8018356:	dcf5      	bgt.n	8018344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8018358:	9905      	ldr	r1, [sp, #20]
 801835a:	eba1 0c0c 	sub.w	ip, r1, ip
 801835e:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8018362:	e7ee      	b.n	8018342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8018364:	428f      	cmp	r7, r1
 8018366:	dced      	bgt.n	8018344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8018368:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801836c:	4461      	add	r1, ip
 801836e:	b209      	sxth	r1, r1
 8018370:	4589      	cmp	r9, r1
 8018372:	dbe7      	blt.n	8018344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8018374:	4576      	cmp	r6, lr
 8018376:	fa1f fc8e 	uxth.w	ip, lr
 801837a:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801837e:	dc08      	bgt.n	8018392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8018380:	eba2 0c0c 	sub.w	ip, r2, ip
 8018384:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8018388:	eba1 010c 	sub.w	r1, r1, ip
 801838c:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8018390:	e7d7      	b.n	8018342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8018392:	4461      	add	r1, ip
 8018394:	b209      	sxth	r1, r1
 8018396:	4588      	cmp	r8, r1
 8018398:	dbd4      	blt.n	8018344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801839a:	eba3 0c0c 	sub.w	ip, r3, ip
 801839e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80183a2:	e7ce      	b.n	8018342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80183a4:	2400ff0a 	.word	0x2400ff0a
 80183a8:	2400ff08 	.word	0x2400ff08
 80183ac:	2c00      	cmp	r4, #0
 80183ae:	f000 816a 	beq.w	8018686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80183b2:	9b02      	ldr	r3, [sp, #8]
 80183b4:	3301      	adds	r3, #1
 80183b6:	f000 8166 	beq.w	8018686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80183ba:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 80183be:	9803      	ldr	r0, [sp, #12]
 80183c0:	4621      	mov	r1, r4
 80183c2:	f7ff fde9 	bl	8017f98 <_ZNK8touchgfx4Rect8includesERKS0_>
 80183c6:	b120      	cbz	r0, 80183d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 80183c8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80183cc:	9801      	ldr	r0, [sp, #4]
 80183ce:	f7ff fea9 	bl	8018124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80183d2:	9903      	ldr	r1, [sp, #12]
 80183d4:	4620      	mov	r0, r4
 80183d6:	f7fd fe53 	bl	8016080 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80183da:	2800      	cmp	r0, #0
 80183dc:	f000 809b 	beq.w	8018516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 80183e0:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 80183e4:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 80183e8:	b281      	uxth	r1, r0
 80183ea:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80183ee:	9309      	str	r3, [sp, #36]	; 0x24
 80183f0:	eb01 0c03 	add.w	ip, r1, r3
 80183f4:	b2ab      	uxth	r3, r5
 80183f6:	4285      	cmp	r5, r0
 80183f8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80183fc:	fa1f f98c 	uxth.w	r9, ip
 8018400:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8018404:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8018408:	eb03 040c 	add.w	r4, r3, ip
 801840c:	b2a4      	uxth	r4, r4
 801840e:	9405      	str	r4, [sp, #20]
 8018410:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8018414:	9404      	str	r4, [sp, #16]
 8018416:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801841a:	f340 809a 	ble.w	8018552 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801841e:	1a5b      	subs	r3, r3, r1
 8018420:	4596      	cmp	lr, r2
 8018422:	fa0f f589 	sxth.w	r5, r9
 8018426:	b29b      	uxth	r3, r3
 8018428:	b21e      	sxth	r6, r3
 801842a:	dd2e      	ble.n	801848a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801842c:	9f02      	ldr	r7, [sp, #8]
 801842e:	fa1f fe8e 	uxth.w	lr, lr
 8018432:	b292      	uxth	r2, r2
 8018434:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8018438:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801843c:	9f04      	ldr	r7, [sp, #16]
 801843e:	ebae 0102 	sub.w	r1, lr, r2
 8018442:	4486      	add	lr, r0
 8018444:	1b7f      	subs	r7, r7, r5
 8018446:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801844a:	b289      	uxth	r1, r1
 801844c:	442a      	add	r2, r5
 801844e:	fa0f fe8e 	sxth.w	lr, lr
 8018452:	b20c      	sxth	r4, r1
 8018454:	b212      	sxth	r2, r2
 8018456:	4367      	muls	r7, r4
 8018458:	ebae 0202 	sub.w	r2, lr, r2
 801845c:	4372      	muls	r2, r6
 801845e:	4297      	cmp	r7, r2
 8018460:	db09      	blt.n	8018476 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8018462:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8018466:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801846a:	449c      	add	ip, r3
 801846c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018470:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8018474:	e680      	b.n	8018178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018476:	4401      	add	r1, r0
 8018478:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801847c:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8018480:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018484:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018488:	e676      	b.n	8018178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801848a:	9f04      	ldr	r7, [sp, #16]
 801848c:	42bd      	cmp	r5, r7
 801848e:	da27      	bge.n	80184e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8018490:	9902      	ldr	r1, [sp, #8]
 8018492:	1b7f      	subs	r7, r7, r5
 8018494:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8018498:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801849c:	eb04 010e 	add.w	r1, r4, lr
 80184a0:	fa1f f881 	uxth.w	r8, r1
 80184a4:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 80184a8:	4411      	add	r1, r2
 80184aa:	fa0f f988 	sxth.w	r9, r8
 80184ae:	eba2 020e 	sub.w	r2, r2, lr
 80184b2:	eba1 0108 	sub.w	r1, r1, r8
 80184b6:	4372      	muls	r2, r6
 80184b8:	b289      	uxth	r1, r1
 80184ba:	fa0f f881 	sxth.w	r8, r1
 80184be:	fb08 f707 	mul.w	r7, r8, r7
 80184c2:	42ba      	cmp	r2, r7
 80184c4:	dc06      	bgt.n	80184d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80184c6:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 80184ca:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 80184ce:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 80184d2:	e7ca      	b.n	801846a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80184d4:	4421      	add	r1, r4
 80184d6:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 80184da:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80184de:	e64b      	b.n	8018178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80184e0:	9d05      	ldr	r5, [sp, #20]
 80184e2:	2c06      	cmp	r4, #6
 80184e4:	eba9 0505 	sub.w	r5, r9, r5
 80184e8:	b2ad      	uxth	r5, r5
 80184ea:	fa0f fe85 	sxth.w	lr, r5
 80184ee:	d818      	bhi.n	8018522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 80184f0:	9b04      	ldr	r3, [sp, #16]
 80184f2:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 80184f6:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80184fa:	1c63      	adds	r3, r4, #1
 80184fc:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8018500:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8018504:	9b01      	ldr	r3, [sp, #4]
 8018506:	9d01      	ldr	r5, [sp, #4]
 8018508:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801850c:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8018510:	805a      	strh	r2, [r3, #2]
 8018512:	809e      	strh	r6, [r3, #4]
 8018514:	80d9      	strh	r1, [r3, #6]
 8018516:	9b02      	ldr	r3, [sp, #8]
 8018518:	f1aa 0a08 	sub.w	sl, sl, #8
 801851c:	3b01      	subs	r3, #1
 801851e:	9302      	str	r3, [sp, #8]
 8018520:	e747      	b.n	80183b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8018522:	9a02      	ldr	r2, [sp, #8]
 8018524:	45b6      	cmp	lr, r6
 8018526:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801852a:	db0d      	blt.n	8018548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801852c:	449c      	add	ip, r3
 801852e:	445a      	add	r2, fp
 8018530:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8018534:	fa1f fc8c 	uxth.w	ip, ip
 8018538:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801853c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8018540:	448c      	add	ip, r1
 8018542:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8018546:	e617      	b.n	8018178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018548:	445a      	add	r2, fp
 801854a:	44ac      	add	ip, r5
 801854c:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8018550:	e78e      	b.n	8018470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8018552:	fa1f f18e 	uxth.w	r1, lr
 8018556:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801855a:	b293      	uxth	r3, r2
 801855c:	4596      	cmp	lr, r2
 801855e:	eb01 0806 	add.w	r8, r1, r6
 8018562:	9306      	str	r3, [sp, #24]
 8018564:	fa1f f888 	uxth.w	r8, r8
 8018568:	9f06      	ldr	r7, [sp, #24]
 801856a:	fa0f f388 	sxth.w	r3, r8
 801856e:	9307      	str	r3, [sp, #28]
 8018570:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8018574:	443b      	add	r3, r7
 8018576:	b29b      	uxth	r3, r3
 8018578:	9308      	str	r3, [sp, #32]
 801857a:	da25      	bge.n	80185c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801857c:	9905      	ldr	r1, [sp, #20]
 801857e:	eba3 0308 	sub.w	r3, r3, r8
 8018582:	eba2 020e 	sub.w	r2, r2, lr
 8018586:	1b40      	subs	r0, r0, r5
 8018588:	eba9 0401 	sub.w	r4, r9, r1
 801858c:	b29b      	uxth	r3, r3
 801858e:	b2a4      	uxth	r4, r4
 8018590:	b219      	sxth	r1, r3
 8018592:	fa0f f984 	sxth.w	r9, r4
 8018596:	4348      	muls	r0, r1
 8018598:	fb09 f202 	mul.w	r2, r9, r2
 801859c:	4282      	cmp	r2, r0
 801859e:	9a02      	ldr	r2, [sp, #8]
 80185a0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80185a4:	445a      	add	r2, fp
 80185a6:	dc06      	bgt.n	80185b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 80185a8:	9b07      	ldr	r3, [sp, #28]
 80185aa:	44a4      	add	ip, r4
 80185ac:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 80185b0:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 80185b4:	e75c      	b.n	8018470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80185b6:	9904      	ldr	r1, [sp, #16]
 80185b8:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 80185bc:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 80185c0:	4433      	add	r3, r6
 80185c2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80185c6:	e5d7      	b.n	8018178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80185c8:	9f06      	ldr	r7, [sp, #24]
 80185ca:	9b04      	ldr	r3, [sp, #16]
 80185cc:	1bc9      	subs	r1, r1, r7
 80185ce:	fa0f f789 	sxth.w	r7, r9
 80185d2:	b289      	uxth	r1, r1
 80185d4:	429f      	cmp	r7, r3
 80185d6:	fa0f fe81 	sxth.w	lr, r1
 80185da:	dd22      	ble.n	8018622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 80185dc:	9a05      	ldr	r2, [sp, #20]
 80185de:	1b40      	subs	r0, r0, r5
 80185e0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80185e4:	eba9 0202 	sub.w	r2, r9, r2
 80185e8:	9d07      	ldr	r5, [sp, #28]
 80185ea:	fb0e f000 	mul.w	r0, lr, r0
 80185ee:	b292      	uxth	r2, r2
 80185f0:	eba5 0a03 	sub.w	sl, r5, r3
 80185f4:	9b02      	ldr	r3, [sp, #8]
 80185f6:	b214      	sxth	r4, r2
 80185f8:	00db      	lsls	r3, r3, #3
 80185fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80185fe:	445b      	add	r3, fp
 8018600:	4550      	cmp	r0, sl
 8018602:	db03      	blt.n	801860c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8018604:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8018608:	4494      	add	ip, r2
 801860a:	e731      	b.n	8018470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801860c:	9a04      	ldr	r2, [sp, #16]
 801860e:	4431      	add	r1, r6
 8018610:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8018614:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8018618:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801861c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018620:	e75b      	b.n	80184da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8018622:	9b08      	ldr	r3, [sp, #32]
 8018624:	2c06      	cmp	r4, #6
 8018626:	eba3 0308 	sub.w	r3, r3, r8
 801862a:	b29b      	uxth	r3, r3
 801862c:	b21d      	sxth	r5, r3
 801862e:	d813      	bhi.n	8018658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8018630:	9b07      	ldr	r3, [sp, #28]
 8018632:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8018636:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801863a:	1c63      	adds	r3, r4, #1
 801863c:	9901      	ldr	r1, [sp, #4]
 801863e:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8018642:	9b01      	ldr	r3, [sp, #4]
 8018644:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8018648:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801864c:	805a      	strh	r2, [r3, #2]
 801864e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018650:	f8a3 e006 	strh.w	lr, [r3, #6]
 8018654:	809a      	strh	r2, [r3, #4]
 8018656:	e75e      	b.n	8018516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8018658:	9802      	ldr	r0, [sp, #8]
 801865a:	4575      	cmp	r5, lr
 801865c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8018660:	db0d      	blt.n	801867e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8018662:	4431      	add	r1, r6
 8018664:	9b06      	ldr	r3, [sp, #24]
 8018666:	4458      	add	r0, fp
 8018668:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801866c:	b289      	uxth	r1, r1
 801866e:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8018672:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018676:	4419      	add	r1, r3
 8018678:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801867c:	e57c      	b.n	8018178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801867e:	4458      	add	r0, fp
 8018680:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8018684:	e79c      	b.n	80185c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8018686:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801868a:	2e07      	cmp	r6, #7
 801868c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8018690:	d812      	bhi.n	80186b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8018692:	1c75      	adds	r5, r6, #1
 8018694:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8018698:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801869c:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 80186a0:	9d01      	ldr	r5, [sp, #4]
 80186a2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80186a6:	442c      	add	r4, r5
 80186a8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80186ac:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80186b0:	8061      	strh	r1, [r4, #2]
 80186b2:	80a2      	strh	r2, [r4, #4]
 80186b4:	80e3      	strh	r3, [r4, #6]
 80186b6:	e5c9      	b.n	801824c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80186b8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80186bc:	3e01      	subs	r6, #1
 80186be:	445c      	add	r4, fp
 80186c0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80186c4:	f04f 37ff 	mov.w	r7, #4294967295
 80186c8:	2500      	movs	r5, #0
 80186ca:	9305      	str	r3, [sp, #20]
 80186cc:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 80186d0:	1e72      	subs	r2, r6, #1
 80186d2:	9302      	str	r3, [sp, #8]
 80186d4:	4691      	mov	r9, r2
 80186d6:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 80186da:	9304      	str	r3, [sp, #16]
 80186dc:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 80186e0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80186e4:	6818      	ldr	r0, [r3, #0]
 80186e6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80186ea:	9207      	str	r2, [sp, #28]
 80186ec:	bf16      	itet	ne
 80186ee:	9905      	ldrne	r1, [sp, #20]
 80186f0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80186f4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80186f8:	9306      	str	r3, [sp, #24]
 80186fa:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80186fe:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8018702:	fb18 f801 	smulbb	r8, r8, r1
 8018706:	6859      	ldr	r1, [r3, #4]
 8018708:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801870c:	4671      	mov	r1, lr
 801870e:	a80c      	add	r0, sp, #48	; 0x30
 8018710:	f7fb fbda 	bl	8013ec8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018714:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018718:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801871c:	f04f 0c08 	mov.w	ip, #8
 8018720:	9b04      	ldr	r3, [sp, #16]
 8018722:	9a02      	ldr	r2, [sp, #8]
 8018724:	fb10 f001 	smulbb	r0, r0, r1
 8018728:	fb02 8803 	mla	r8, r2, r3, r8
 801872c:	eba0 0108 	sub.w	r1, r0, r8
 8018730:	fb90 f0fc 	sdiv	r0, r0, ip
 8018734:	4288      	cmp	r0, r1
 8018736:	dc20      	bgt.n	801877a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8018738:	4551      	cmp	r1, sl
 801873a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801873e:	da03      	bge.n	8018748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8018740:	b1d9      	cbz	r1, 801877a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8018742:	468a      	mov	sl, r1
 8018744:	464f      	mov	r7, r9
 8018746:	4635      	mov	r5, r6
 8018748:	f109 39ff 	add.w	r9, r9, #4294967295
 801874c:	f119 0f02 	cmn.w	r9, #2
 8018750:	d1c6      	bne.n	80186e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8018752:	4616      	mov	r6, r2
 8018754:	3201      	adds	r2, #1
 8018756:	f1a4 0408 	sub.w	r4, r4, #8
 801875a:	d1b7      	bne.n	80186cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801875c:	9b01      	ldr	r3, [sp, #4]
 801875e:	b2ac      	uxth	r4, r5
 8018760:	00ed      	lsls	r5, r5, #3
 8018762:	1958      	adds	r0, r3, r5
 8018764:	1c7b      	adds	r3, r7, #1
 8018766:	d10b      	bne.n	8018780 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8018768:	4601      	mov	r1, r0
 801876a:	9803      	ldr	r0, [sp, #12]
 801876c:	f7fb fbac 	bl	8013ec8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018770:	4621      	mov	r1, r4
 8018772:	9801      	ldr	r0, [sp, #4]
 8018774:	f7ff fcd6 	bl	8018124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018778:	e4fe      	b.n	8018178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801877a:	464f      	mov	r7, r9
 801877c:	4635      	mov	r5, r6
 801877e:	e7ed      	b.n	801875c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8018780:	9b01      	ldr	r3, [sp, #4]
 8018782:	00ff      	lsls	r7, r7, #3
 8018784:	445d      	add	r5, fp
 8018786:	19d9      	adds	r1, r3, r7
 8018788:	445f      	add	r7, fp
 801878a:	f7fb fb9d 	bl	8013ec8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801878e:	9b03      	ldr	r3, [sp, #12]
 8018790:	cb03      	ldmia	r3!, {r0, r1}
 8018792:	9b03      	ldr	r3, [sp, #12]
 8018794:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8018798:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801879c:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 80187a0:	6869      	ldr	r1, [r5, #4]
 80187a2:	c303      	stmia	r3!, {r0, r1}
 80187a4:	e7e4      	b.n	8018770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80187a6:	bf00      	nop

080187a8 <_ZN8touchgfx11Application10invalidateEv>:
 80187a8:	4b09      	ldr	r3, [pc, #36]	; (80187d0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80187aa:	b082      	sub	sp, #8
 80187ac:	2100      	movs	r1, #0
 80187ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80187b2:	4b08      	ldr	r3, [pc, #32]	; (80187d4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80187b4:	9100      	str	r1, [sp, #0]
 80187b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80187ba:	f8ad 2004 	strh.w	r2, [sp, #4]
 80187be:	f8ad 3006 	strh.w	r3, [sp, #6]
 80187c2:	ab02      	add	r3, sp, #8
 80187c4:	e913 0006 	ldmdb	r3, {r1, r2}
 80187c8:	b002      	add	sp, #8
 80187ca:	f7ff bcbf 	b.w	801814c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80187ce:	bf00      	nop
 80187d0:	2400ff08 	.word	0x2400ff08
 80187d4:	2400ff0a 	.word	0x2400ff0a

080187d8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80187d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187dc:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80187e0:	b09b      	sub	sp, #108	; 0x6c
 80187e2:	4604      	mov	r4, r0
 80187e4:	4630      	mov	r0, r6
 80187e6:	f7fa fe2a 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 80187ea:	4605      	mov	r5, r0
 80187ec:	b940      	cbnz	r0, 8018800 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80187ee:	4620      	mov	r0, r4
 80187f0:	e896 0006 	ldmia.w	r6, {r1, r2}
 80187f4:	f7ff fcaa 	bl	801814c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80187f8:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80187fc:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8018800:	4bc8      	ldr	r3, [pc, #800]	; (8018b24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d03e      	beq.n	8018886 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8018808:	4dc7      	ldr	r5, [pc, #796]	; (8018b28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801880a:	4628      	mov	r0, r5
 801880c:	f7fa fe17 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018810:	4606      	mov	r6, r0
 8018812:	2800      	cmp	r0, #0
 8018814:	d137      	bne.n	8018886 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8018816:	4628      	mov	r0, r5
 8018818:	f7ff fa2e 	bl	8017c78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801881c:	6829      	ldr	r1, [r5, #0]
 801881e:	686a      	ldr	r2, [r5, #4]
 8018820:	4620      	mov	r0, r4
 8018822:	f7ff fc93 	bl	801814c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018826:	802e      	strh	r6, [r5, #0]
 8018828:	806e      	strh	r6, [r5, #2]
 801882a:	80ae      	strh	r6, [r5, #4]
 801882c:	80ee      	strh	r6, [r5, #6]
 801882e:	ae09      	add	r6, sp, #36	; 0x24
 8018830:	4630      	mov	r0, r6
 8018832:	f7ff fc23 	bl	801807c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018836:	4abd      	ldr	r2, [pc, #756]	; (8018b2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8018838:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801883c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8018840:	8815      	ldrh	r5, [r2, #0]
 8018842:	9202      	str	r2, [sp, #8]
 8018844:	462b      	mov	r3, r5
 8018846:	429f      	cmp	r7, r3
 8018848:	d924      	bls.n	8018894 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801884a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801884e:	2907      	cmp	r1, #7
 8018850:	d816      	bhi.n	8018880 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8018852:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8018856:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801885a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801885e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8018862:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8018866:	1c4a      	adds	r2, r1, #1
 8018868:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801886c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8018870:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8018874:	f8a2 9002 	strh.w	r9, [r2, #2]
 8018878:	f8a2 e004 	strh.w	lr, [r2, #4]
 801887c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018880:	3301      	adds	r3, #1
 8018882:	b29b      	uxth	r3, r3
 8018884:	e7df      	b.n	8018846 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8018886:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801888a:	2b00      	cmp	r3, #0
 801888c:	d1cf      	bne.n	801882e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801888e:	b01b      	add	sp, #108	; 0x6c
 8018890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018894:	462f      	mov	r7, r5
 8018896:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801889a:	42bb      	cmp	r3, r7
 801889c:	d90b      	bls.n	80188b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801889e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80188a2:	3701      	adds	r7, #1
 80188a4:	4620      	mov	r0, r4
 80188a6:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80188aa:	b2bf      	uxth	r7, r7
 80188ac:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80188b0:	f7ff fc4c 	bl	801814c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80188b4:	e7ef      	b.n	8018896 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80188b6:	4a9e      	ldr	r2, [pc, #632]	; (8018b30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80188b8:	6813      	ldr	r3, [r2, #0]
 80188ba:	4690      	mov	r8, r2
 80188bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80188c0:	2b01      	cmp	r3, #1
 80188c2:	f040 80e4 	bne.w	8018a8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80188c6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80188ca:	4629      	mov	r1, r5
 80188cc:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80188d0:	2500      	movs	r5, #0
 80188d2:	33aa      	adds	r3, #170	; 0xaa
 80188d4:	428f      	cmp	r7, r1
 80188d6:	f103 0308 	add.w	r3, r3, #8
 80188da:	dd0a      	ble.n	80188f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80188dc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80188e0:	3101      	adds	r1, #1
 80188e2:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80188e6:	4402      	add	r2, r0
 80188e8:	b212      	sxth	r2, r2
 80188ea:	4295      	cmp	r5, r2
 80188ec:	bfb8      	it	lt
 80188ee:	4615      	movlt	r5, r2
 80188f0:	e7f0      	b.n	80188d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80188f2:	4b90      	ldr	r3, [pc, #576]	; (8018b34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80188f4:	f8df b238 	ldr.w	fp, [pc, #568]	; 8018b30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 80188f8:	881b      	ldrh	r3, [r3, #0]
 80188fa:	46d8      	mov	r8, fp
 80188fc:	2b0f      	cmp	r3, #15
 80188fe:	bf8c      	ite	hi
 8018900:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8018904:	f04f 0a01 	movls.w	sl, #1
 8018908:	2300      	movs	r3, #0
 801890a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801890e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8018912:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8018916:	4438      	add	r0, r7
 8018918:	b207      	sxth	r7, r0
 801891a:	f8db 0000 	ldr.w	r0, [fp]
 801891e:	42bd      	cmp	r5, r7
 8018920:	6803      	ldr	r3, [r0, #0]
 8018922:	f340 8084 	ble.w	8018a2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8018926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801892a:	4798      	blx	r3
 801892c:	eb07 030a 	add.w	r3, r7, sl
 8018930:	4298      	cmp	r0, r3
 8018932:	da07      	bge.n	8018944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018934:	4285      	cmp	r5, r0
 8018936:	dd05      	ble.n	8018944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018938:	4287      	cmp	r7, r0
 801893a:	dd6d      	ble.n	8018a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801893c:	2f00      	cmp	r7, #0
 801893e:	dd6b      	ble.n	8018a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018940:	4628      	mov	r0, r5
 8018942:	e004      	b.n	801894e <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8018944:	4287      	cmp	r7, r0
 8018946:	dcfb      	bgt.n	8018940 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8018948:	42a8      	cmp	r0, r5
 801894a:	bfa8      	it	ge
 801894c:	4628      	movge	r0, r5
 801894e:	4b7a      	ldr	r3, [pc, #488]	; (8018b38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8018950:	1bc0      	subs	r0, r0, r7
 8018952:	2200      	movs	r2, #0
 8018954:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018958:	f9b3 3000 	ldrsh.w	r3, [r3]
 801895c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018960:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018964:	9b02      	ldr	r3, [sp, #8]
 8018966:	f8ad 001a 	strh.w	r0, [sp, #26]
 801896a:	881f      	ldrh	r7, [r3, #0]
 801896c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018970:	42bb      	cmp	r3, r7
 8018972:	d9cc      	bls.n	801890e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8018974:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8018978:	ab07      	add	r3, sp, #28
 801897a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801897e:	6851      	ldr	r1, [r2, #4]
 8018980:	c303      	stmia	r3!, {r0, r1}
 8018982:	a905      	add	r1, sp, #20
 8018984:	a807      	add	r0, sp, #28
 8018986:	f7fd fb7b 	bl	8016080 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801898a:	2800      	cmp	r0, #0
 801898c:	d04c      	beq.n	8018a28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801898e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8018992:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8018996:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801899a:	4686      	mov	lr, r0
 801899c:	4290      	cmp	r0, r2
 801899e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80189a2:	4448      	add	r0, r9
 80189a4:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80189a8:	bfb8      	it	lt
 80189aa:	4696      	movlt	lr, r2
 80189ac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80189b0:	444a      	add	r2, r9
 80189b2:	b280      	uxth	r0, r0
 80189b4:	4299      	cmp	r1, r3
 80189b6:	468c      	mov	ip, r1
 80189b8:	b292      	uxth	r2, r2
 80189ba:	9303      	str	r3, [sp, #12]
 80189bc:	bfb8      	it	lt
 80189be:	469c      	movlt	ip, r3
 80189c0:	b203      	sxth	r3, r0
 80189c2:	fa0f f982 	sxth.w	r9, r2
 80189c6:	f8ad e01c 	strh.w	lr, [sp, #28]
 80189ca:	f8ad c01e 	strh.w	ip, [sp, #30]
 80189ce:	454b      	cmp	r3, r9
 80189d0:	bfb8      	it	lt
 80189d2:	4602      	movlt	r2, r0
 80189d4:	9b03      	ldr	r3, [sp, #12]
 80189d6:	eba2 020e 	sub.w	r2, r2, lr
 80189da:	f8ad 2020 	strh.w	r2, [sp, #32]
 80189de:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80189e2:	4411      	add	r1, r2
 80189e4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80189e8:	4413      	add	r3, r2
 80189ea:	b289      	uxth	r1, r1
 80189ec:	b29b      	uxth	r3, r3
 80189ee:	b208      	sxth	r0, r1
 80189f0:	b21a      	sxth	r2, r3
 80189f2:	4290      	cmp	r0, r2
 80189f4:	bfb8      	it	lt
 80189f6:	460b      	movlt	r3, r1
 80189f8:	eba3 030c 	sub.w	r3, r3, ip
 80189fc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018a00:	a807      	add	r0, sp, #28
 8018a02:	f7fa fd1c 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a06:	b920      	cbnz	r0, 8018a12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8018a08:	6823      	ldr	r3, [r4, #0]
 8018a0a:	a907      	add	r1, sp, #28
 8018a0c:	4620      	mov	r0, r4
 8018a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a10:	4798      	blx	r3
 8018a12:	3701      	adds	r7, #1
 8018a14:	b2bf      	uxth	r7, r7
 8018a16:	e7a9      	b.n	801896c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8018a18:	f8d8 0000 	ldr.w	r0, [r8]
 8018a1c:	2101      	movs	r1, #1
 8018a1e:	6803      	ldr	r3, [r0, #0]
 8018a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018a24:	4798      	blx	r3
 8018a26:	e772      	b.n	801890e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8018a28:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8018a2c:	e7e8      	b.n	8018a00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8018a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a30:	4798      	blx	r3
 8018a32:	4b42      	ldr	r3, [pc, #264]	; (8018b3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8018a34:	781b      	ldrb	r3, [r3, #0]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	f43f af29 	beq.w	801888e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8018a42:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018a46:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8018a4a:	9b02      	ldr	r3, [sp, #8]
 8018a4c:	881b      	ldrh	r3, [r3, #0]
 8018a4e:	429d      	cmp	r5, r3
 8018a50:	f67f af1d 	bls.w	801888e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018a54:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8018a58:	2907      	cmp	r1, #7
 8018a5a:	d815      	bhi.n	8018a88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8018a5c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8018a60:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8018a64:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8018a68:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8018a6c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8018a70:	1c4a      	adds	r2, r1, #1
 8018a72:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8018a76:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8018a7a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8018a7e:	f8a2 e002 	strh.w	lr, [r2, #2]
 8018a82:	f8a2 c004 	strh.w	ip, [r2, #4]
 8018a86:	80d7      	strh	r7, [r2, #6]
 8018a88:	3301      	adds	r3, #1
 8018a8a:	b29b      	uxth	r3, r3
 8018a8c:	e7df      	b.n	8018a4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8018a8e:	2b02      	cmp	r3, #2
 8018a90:	f040 8135 	bne.w	8018cfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8018a94:	4b2a      	ldr	r3, [pc, #168]	; (8018b40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8018a96:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8018a9a:	781b      	ldrb	r3, [r3, #0]
 8018a9c:	2b01      	cmp	r3, #1
 8018a9e:	f000 809c 	beq.w	8018bda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8018aa2:	9b02      	ldr	r3, [sp, #8]
 8018aa4:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8018aa8:	f8b3 b000 	ldrh.w	fp, [r3]
 8018aac:	f10b 0b01 	add.w	fp, fp, #1
 8018ab0:	fa1f fb8b 	uxth.w	fp, fp
 8018ab4:	2a00      	cmp	r2, #0
 8018ab6:	d0bc      	beq.n	8018a32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018ab8:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8018abc:	4659      	mov	r1, fp
 8018abe:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8018ac2:	f04f 0800 	mov.w	r8, #0
 8018ac6:	441d      	add	r5, r3
 8018ac8:	b22d      	sxth	r5, r5
 8018aca:	b28b      	uxth	r3, r1
 8018acc:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8018ad0:	429a      	cmp	r2, r3
 8018ad2:	f240 80c0 	bls.w	8018c56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8018ad6:	4427      	add	r7, r4
 8018ad8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8018adc:	4608      	mov	r0, r1
 8018ade:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8018ae2:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8018ae6:	4563      	cmp	r3, ip
 8018ae8:	f340 80a2 	ble.w	8018c30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8018aec:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8018af0:	4465      	add	r5, ip
 8018af2:	b22d      	sxth	r5, r5
 8018af4:	429d      	cmp	r5, r3
 8018af6:	bfa8      	it	ge
 8018af8:	461d      	movge	r5, r3
 8018afa:	3101      	adds	r1, #1
 8018afc:	4680      	mov	r8, r0
 8018afe:	e7e4      	b.n	8018aca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8018b00:	d10b      	bne.n	8018b1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8018b02:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8018b06:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8018b0a:	458c      	cmp	ip, r1
 8018b0c:	bfb4      	ite	lt
 8018b0e:	469c      	movlt	ip, r3
 8018b10:	46bc      	movge	ip, r7
 8018b12:	4572      	cmp	r2, lr
 8018b14:	bfb8      	it	lt
 8018b16:	4672      	movlt	r2, lr
 8018b18:	e087      	b.n	8018c2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8018b1a:	428a      	cmp	r2, r1
 8018b1c:	46bc      	mov	ip, r7
 8018b1e:	bfb8      	it	lt
 8018b20:	460a      	movlt	r2, r1
 8018b22:	e082      	b.n	8018c2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8018b24:	2400ff4c 	.word	0x2400ff4c
 8018b28:	2400ff58 	.word	0x2400ff58
 8018b2c:	24000084 	.word	0x24000084
 8018b30:	2400ff14 	.word	0x2400ff14
 8018b34:	2400ff0a 	.word	0x2400ff0a
 8018b38:	2400ff08 	.word	0x2400ff08
 8018b3c:	2400ff12 	.word	0x2400ff12
 8018b40:	2400ff0c 	.word	0x2400ff0c
 8018b44:	1961      	adds	r1, r4, r5
 8018b46:	ab07      	add	r3, sp, #28
 8018b48:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8018b4c:	6849      	ldr	r1, [r1, #4]
 8018b4e:	c303      	stmia	r3!, {r0, r1}
 8018b50:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018b54:	a807      	add	r0, sp, #28
 8018b56:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018b5a:	2b13      	cmp	r3, #19
 8018b5c:	440b      	add	r3, r1
 8018b5e:	bfd8      	it	le
 8018b60:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018b64:	1a9b      	subs	r3, r3, r2
 8018b66:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018b6a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018b6e:	f7ff f89d 	bl	8017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018b72:	a807      	add	r0, sp, #28
 8018b74:	f7fa fc63 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018b78:	bb78      	cbnz	r0, 8018bda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8018b7a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018b7e:	4425      	add	r5, r4
 8018b80:	f8d8 0000 	ldr.w	r0, [r8]
 8018b84:	f1bc 0f14 	cmp.w	ip, #20
 8018b88:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018b8c:	f8d0 e000 	ldr.w	lr, [r0]
 8018b90:	bfa8      	it	ge
 8018b92:	f04f 0c14 	movge.w	ip, #20
 8018b96:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018b9a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018b9e:	fa1f fc8c 	uxth.w	ip, ip
 8018ba2:	f8cd c000 	str.w	ip, [sp]
 8018ba6:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8018baa:	47d0      	blx	sl
 8018bac:	4682      	mov	sl, r0
 8018bae:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018bb2:	a807      	add	r0, sp, #28
 8018bb4:	f7ff f860 	bl	8017c78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018bb8:	6823      	ldr	r3, [r4, #0]
 8018bba:	4620      	mov	r0, r4
 8018bbc:	a907      	add	r1, sp, #28
 8018bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bc0:	4798      	blx	r3
 8018bc2:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8018bc6:	eba0 000a 	sub.w	r0, r0, sl
 8018bca:	b200      	sxth	r0, r0
 8018bcc:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8018bd0:	b918      	cbnz	r0, 8018bda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8018bd2:	b2b9      	uxth	r1, r7
 8018bd4:	4648      	mov	r0, r9
 8018bd6:	f7ff faa5 	bl	8018124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018bda:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8018bde:	f1bb 0f00 	cmp.w	fp, #0
 8018be2:	f43f af26 	beq.w	8018a32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018be6:	9b02      	ldr	r3, [sp, #8]
 8018be8:	2700      	movs	r7, #0
 8018bea:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8018bee:	881b      	ldrh	r3, [r3, #0]
 8018bf0:	3301      	adds	r3, #1
 8018bf2:	b29b      	uxth	r3, r3
 8018bf4:	b299      	uxth	r1, r3
 8018bf6:	00fd      	lsls	r5, r7, #3
 8018bf8:	458b      	cmp	fp, r1
 8018bfa:	d9a3      	bls.n	8018b44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8018bfc:	4425      	add	r5, r4
 8018bfe:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8018c02:	469c      	mov	ip, r3
 8018c04:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8018c08:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8018c0c:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8018c10:	4408      	add	r0, r1
 8018c12:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8018c16:	4471      	add	r1, lr
 8018c18:	b200      	sxth	r0, r0
 8018c1a:	b209      	sxth	r1, r1
 8018c1c:	4288      	cmp	r0, r1
 8018c1e:	f6bf af6f 	bge.w	8018b00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8018c22:	4586      	cmp	lr, r0
 8018c24:	4672      	mov	r2, lr
 8018c26:	bfb8      	it	lt
 8018c28:	4602      	movlt	r2, r0
 8018c2a:	3301      	adds	r3, #1
 8018c2c:	4667      	mov	r7, ip
 8018c2e:	e7e1      	b.n	8018bf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8018c30:	d10c      	bne.n	8018c4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8018c32:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8018c36:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8018c3a:	4287      	cmp	r7, r0
 8018c3c:	bfb4      	ite	lt
 8018c3e:	4608      	movlt	r0, r1
 8018c40:	4640      	movge	r0, r8
 8018c42:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8018c46:	443b      	add	r3, r7
 8018c48:	b21b      	sxth	r3, r3
 8018c4a:	e753      	b.n	8018af4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8018c4c:	4565      	cmp	r5, ip
 8018c4e:	4640      	mov	r0, r8
 8018c50:	bfa8      	it	ge
 8018c52:	4665      	movge	r5, ip
 8018c54:	e751      	b.n	8018afa <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8018c56:	eb09 0007 	add.w	r0, r9, r7
 8018c5a:	4427      	add	r7, r4
 8018c5c:	9203      	str	r2, [sp, #12]
 8018c5e:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8018c62:	f1ba 0f13 	cmp.w	sl, #19
 8018c66:	bfde      	ittt	le
 8018c68:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8018c6c:	4455      	addle	r5, sl
 8018c6e:	b22d      	sxthle	r5, r5
 8018c70:	f7fa fbe5 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018c74:	9a03      	ldr	r2, [sp, #12]
 8018c76:	2800      	cmp	r0, #0
 8018c78:	f47f af1c 	bne.w	8018ab4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8018c7c:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8018c80:	fa1f fa8a 	uxth.w	sl, sl
 8018c84:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018c88:	1aad      	subs	r5, r5, r2
 8018c8a:	4829      	ldr	r0, [pc, #164]	; (8018d30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8018c8c:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8018c90:	2d14      	cmp	r5, #20
 8018c92:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8018c96:	6800      	ldr	r0, [r0, #0]
 8018c98:	bfa8      	it	ge
 8018c9a:	2514      	movge	r5, #20
 8018c9c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018ca0:	f8ad 201e 	strh.w	r2, [sp, #30]
 8018ca4:	b289      	uxth	r1, r1
 8018ca6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018caa:	b2ad      	uxth	r5, r5
 8018cac:	f8d0 c000 	ldr.w	ip, [r0]
 8018cb0:	b292      	uxth	r2, r2
 8018cb2:	4555      	cmp	r5, sl
 8018cb4:	bf94      	ite	ls
 8018cb6:	9500      	strls	r5, [sp, #0]
 8018cb8:	f8cd a000 	strhi.w	sl, [sp]
 8018cbc:	b29b      	uxth	r3, r3
 8018cbe:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8018cc2:	47a8      	blx	r5
 8018cc4:	6823      	ldr	r3, [r4, #0]
 8018cc6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018cca:	a907      	add	r1, sp, #28
 8018ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cce:	4620      	mov	r0, r4
 8018cd0:	4798      	blx	r3
 8018cd2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8018cd6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8018cda:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8018cde:	1a5b      	subs	r3, r3, r1
 8018ce0:	440a      	add	r2, r1
 8018ce2:	b21b      	sxth	r3, r3
 8018ce4:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8018ce8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	f47f aed8 	bne.w	8018aa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8018cf2:	fa1f f188 	uxth.w	r1, r8
 8018cf6:	4648      	mov	r0, r9
 8018cf8:	f7ff fa14 	bl	8018124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018cfc:	e6d1      	b.n	8018aa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8018cfe:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018d02:	42ab      	cmp	r3, r5
 8018d04:	f67f ae95 	bls.w	8018a32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018d08:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018d0c:	ab07      	add	r3, sp, #28
 8018d0e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018d12:	6851      	ldr	r1, [r2, #4]
 8018d14:	c303      	stmia	r3!, {r0, r1}
 8018d16:	a807      	add	r0, sp, #28
 8018d18:	f7fa fb91 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d1c:	b920      	cbnz	r0, 8018d28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8018d1e:	6823      	ldr	r3, [r4, #0]
 8018d20:	a907      	add	r1, sp, #28
 8018d22:	4620      	mov	r0, r4
 8018d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d26:	4798      	blx	r3
 8018d28:	3501      	adds	r5, #1
 8018d2a:	b2ad      	uxth	r5, r5
 8018d2c:	e7e7      	b.n	8018cfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8018d2e:	bf00      	nop
 8018d30:	2400ff14 	.word	0x2400ff14

08018d34 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018d34:	4b03      	ldr	r3, [pc, #12]	; (8018d44 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018d36:	2200      	movs	r2, #0
 8018d38:	801a      	strh	r2, [r3, #0]
 8018d3a:	805a      	strh	r2, [r3, #2]
 8018d3c:	809a      	strh	r2, [r3, #4]
 8018d3e:	80da      	strh	r2, [r3, #6]
 8018d40:	4770      	bx	lr
 8018d42:	bf00      	nop
 8018d44:	2400ff58 	.word	0x2400ff58

08018d48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d4c:	b09d      	sub	sp, #116	; 0x74
 8018d4e:	4606      	mov	r6, r0
 8018d50:	4614      	mov	r4, r2
 8018d52:	468a      	mov	sl, r1
 8018d54:	a803      	add	r0, sp, #12
 8018d56:	461d      	mov	r5, r3
 8018d58:	f000 fd8b 	bl	8019872 <_ZN8touchgfx12TextProviderC1Ev>
 8018d5c:	6833      	ldr	r3, [r6, #0]
 8018d5e:	4630      	mov	r0, r6
 8018d60:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d66:	4798      	blx	r3
 8018d68:	6833      	ldr	r3, [r6, #0]
 8018d6a:	4607      	mov	r7, r0
 8018d6c:	4630      	mov	r0, r6
 8018d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018d70:	4798      	blx	r3
 8018d72:	462a      	mov	r2, r5
 8018d74:	2500      	movs	r5, #0
 8018d76:	4621      	mov	r1, r4
 8018d78:	9000      	str	r0, [sp, #0]
 8018d7a:	463b      	mov	r3, r7
 8018d7c:	462c      	mov	r4, r5
 8018d7e:	46a9      	mov	r9, r5
 8018d80:	46a8      	mov	r8, r5
 8018d82:	a803      	add	r0, sp, #12
 8018d84:	f000 fdd0 	bl	8019928 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018d88:	2300      	movs	r3, #0
 8018d8a:	9302      	str	r3, [sp, #8]
 8018d8c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018d90:	429c      	cmp	r4, r3
 8018d92:	d002      	beq.n	8018d9a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018d94:	455c      	cmp	r4, fp
 8018d96:	bf18      	it	ne
 8018d98:	4625      	movne	r5, r4
 8018d9a:	ab02      	add	r3, sp, #8
 8018d9c:	4632      	mov	r2, r6
 8018d9e:	4651      	mov	r1, sl
 8018da0:	a803      	add	r0, sp, #12
 8018da2:	f001 f8c7 	bl	8019f34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018da6:	4604      	mov	r4, r0
 8018da8:	b108      	cbz	r0, 8018dae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018daa:	280a      	cmp	r0, #10
 8018dac:	d10a      	bne.n	8018dc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018dae:	45c1      	cmp	r9, r8
 8018db0:	bf38      	it	cc
 8018db2:	46c1      	movcc	r9, r8
 8018db4:	f04f 0800 	mov.w	r8, #0
 8018db8:	2c00      	cmp	r4, #0
 8018dba:	d1e5      	bne.n	8018d88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018dbc:	4648      	mov	r0, r9
 8018dbe:	b01d      	add	sp, #116	; 0x74
 8018dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dc4:	9a02      	ldr	r2, [sp, #8]
 8018dc6:	2a00      	cmp	r2, #0
 8018dc8:	d0de      	beq.n	8018d88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018dca:	7b57      	ldrb	r7, [r2, #13]
 8018dcc:	4629      	mov	r1, r5
 8018dce:	6833      	ldr	r3, [r6, #0]
 8018dd0:	007f      	lsls	r7, r7, #1
 8018dd2:	8894      	ldrh	r4, [r2, #4]
 8018dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dd6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018dda:	7a97      	ldrb	r7, [r2, #10]
 8018ddc:	4307      	orrs	r7, r0
 8018dde:	4630      	mov	r0, r6
 8018de0:	4798      	blx	r3
 8018de2:	4438      	add	r0, r7
 8018de4:	4480      	add	r8, r0
 8018de6:	fa1f f888 	uxth.w	r8, r8
 8018dea:	e7e5      	b.n	8018db8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018dec <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018dec:	b508      	push	{r3, lr}
 8018dee:	6803      	ldr	r3, [r0, #0]
 8018df0:	68db      	ldr	r3, [r3, #12]
 8018df2:	4798      	blx	r3
 8018df4:	b128      	cbz	r0, 8018e02 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018df6:	7b43      	ldrb	r3, [r0, #13]
 8018df8:	7a80      	ldrb	r0, [r0, #10]
 8018dfa:	005b      	lsls	r3, r3, #1
 8018dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018e00:	4318      	orrs	r0, r3
 8018e02:	bd08      	pop	{r3, pc}

08018e04 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018e04:	b40e      	push	{r1, r2, r3}
 8018e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e08:	b09e      	sub	sp, #120	; 0x78
 8018e0a:	4605      	mov	r5, r0
 8018e0c:	ab23      	add	r3, sp, #140	; 0x8c
 8018e0e:	a805      	add	r0, sp, #20
 8018e10:	f853 4b04 	ldr.w	r4, [r3], #4
 8018e14:	9303      	str	r3, [sp, #12]
 8018e16:	f000 fd2c 	bl	8019872 <_ZN8touchgfx12TextProviderC1Ev>
 8018e1a:	682b      	ldr	r3, [r5, #0]
 8018e1c:	4628      	mov	r0, r5
 8018e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e20:	4798      	blx	r3
 8018e22:	682b      	ldr	r3, [r5, #0]
 8018e24:	4606      	mov	r6, r0
 8018e26:	4628      	mov	r0, r5
 8018e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e2a:	4798      	blx	r3
 8018e2c:	4633      	mov	r3, r6
 8018e2e:	4621      	mov	r1, r4
 8018e30:	ae1e      	add	r6, sp, #120	; 0x78
 8018e32:	2400      	movs	r4, #0
 8018e34:	9000      	str	r0, [sp, #0]
 8018e36:	9a03      	ldr	r2, [sp, #12]
 8018e38:	a805      	add	r0, sp, #20
 8018e3a:	f000 fd75 	bl	8019928 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018e3e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8018e42:	462a      	mov	r2, r5
 8018e44:	4633      	mov	r3, r6
 8018e46:	4621      	mov	r1, r4
 8018e48:	a805      	add	r0, sp, #20
 8018e4a:	f001 f873 	bl	8019f34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018e4e:	b300      	cbz	r0, 8018e92 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8018e50:	280a      	cmp	r0, #10
 8018e52:	d01a      	beq.n	8018e8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018e54:	9f04      	ldr	r7, [sp, #16]
 8018e56:	b1c7      	cbz	r7, 8018e8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018e58:	7b78      	ldrb	r0, [r7, #13]
 8018e5a:	7a3b      	ldrb	r3, [r7, #8]
 8018e5c:	00c1      	lsls	r1, r0, #3
 8018e5e:	88aa      	ldrh	r2, [r5, #4]
 8018e60:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018e64:	4319      	orrs	r1, r3
 8018e66:	0643      	lsls	r3, r0, #25
 8018e68:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018e6c:	bf48      	it	mi
 8018e6e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018e72:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018e76:	bf48      	it	mi
 8018e78:	b219      	sxthmi	r1, r3
 8018e7a:	79fb      	ldrb	r3, [r7, #7]
 8018e7c:	4303      	orrs	r3, r0
 8018e7e:	4413      	add	r3, r2
 8018e80:	1a5b      	subs	r3, r3, r1
 8018e82:	b29b      	uxth	r3, r3
 8018e84:	42a3      	cmp	r3, r4
 8018e86:	bfc8      	it	gt
 8018e88:	b21c      	sxthgt	r4, r3
 8018e8a:	4633      	mov	r3, r6
 8018e8c:	462a      	mov	r2, r5
 8018e8e:	2100      	movs	r1, #0
 8018e90:	e7da      	b.n	8018e48 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8018e92:	b2a0      	uxth	r0, r4
 8018e94:	b01e      	add	sp, #120	; 0x78
 8018e96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018e9a:	b003      	add	sp, #12
 8018e9c:	4770      	bx	lr

08018e9e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018e9e:	b40e      	push	{r1, r2, r3}
 8018ea0:	b570      	push	{r4, r5, r6, lr}
 8018ea2:	b09d      	sub	sp, #116	; 0x74
 8018ea4:	4604      	mov	r4, r0
 8018ea6:	ab21      	add	r3, sp, #132	; 0x84
 8018ea8:	a803      	add	r0, sp, #12
 8018eaa:	f853 5b04 	ldr.w	r5, [r3], #4
 8018eae:	9302      	str	r3, [sp, #8]
 8018eb0:	f000 fcdf 	bl	8019872 <_ZN8touchgfx12TextProviderC1Ev>
 8018eb4:	6823      	ldr	r3, [r4, #0]
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018eba:	4798      	blx	r3
 8018ebc:	6823      	ldr	r3, [r4, #0]
 8018ebe:	4606      	mov	r6, r0
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018ec4:	2401      	movs	r4, #1
 8018ec6:	4798      	blx	r3
 8018ec8:	4633      	mov	r3, r6
 8018eca:	9000      	str	r0, [sp, #0]
 8018ecc:	4629      	mov	r1, r5
 8018ece:	9a02      	ldr	r2, [sp, #8]
 8018ed0:	a803      	add	r0, sp, #12
 8018ed2:	f000 fd29 	bl	8019928 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018ed6:	a803      	add	r0, sp, #12
 8018ed8:	f001 f8f8 	bl	801a0cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018edc:	b2a3      	uxth	r3, r4
 8018ede:	b138      	cbz	r0, 8018ef0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018ee0:	280a      	cmp	r0, #10
 8018ee2:	a803      	add	r0, sp, #12
 8018ee4:	bf04      	itt	eq
 8018ee6:	3301      	addeq	r3, #1
 8018ee8:	b21c      	sxtheq	r4, r3
 8018eea:	f001 f8ef 	bl	801a0cc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018eee:	e7f5      	b.n	8018edc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	b01d      	add	sp, #116	; 0x74
 8018ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ef8:	b003      	add	sp, #12
 8018efa:	4770      	bx	lr

08018efc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018efc:	b40e      	push	{r1, r2, r3}
 8018efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f00:	b09e      	sub	sp, #120	; 0x78
 8018f02:	4604      	mov	r4, r0
 8018f04:	ab23      	add	r3, sp, #140	; 0x8c
 8018f06:	a805      	add	r0, sp, #20
 8018f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8018f0c:	9303      	str	r3, [sp, #12]
 8018f0e:	f000 fcb0 	bl	8019872 <_ZN8touchgfx12TextProviderC1Ev>
 8018f12:	6823      	ldr	r3, [r4, #0]
 8018f14:	4620      	mov	r0, r4
 8018f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f18:	4798      	blx	r3
 8018f1a:	6823      	ldr	r3, [r4, #0]
 8018f1c:	4606      	mov	r6, r0
 8018f1e:	4620      	mov	r0, r4
 8018f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018f22:	4798      	blx	r3
 8018f24:	4633      	mov	r3, r6
 8018f26:	4629      	mov	r1, r5
 8018f28:	9000      	str	r0, [sp, #0]
 8018f2a:	9a03      	ldr	r2, [sp, #12]
 8018f2c:	a805      	add	r0, sp, #20
 8018f2e:	f000 fcfb 	bl	8019928 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018f32:	ad1e      	add	r5, sp, #120	; 0x78
 8018f34:	2100      	movs	r1, #0
 8018f36:	26ff      	movs	r6, #255	; 0xff
 8018f38:	4622      	mov	r2, r4
 8018f3a:	a805      	add	r0, sp, #20
 8018f3c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018f40:	462b      	mov	r3, r5
 8018f42:	f000 fff7 	bl	8019f34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018f46:	b1d8      	cbz	r0, 8018f80 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8018f48:	280a      	cmp	r0, #10
 8018f4a:	d012      	beq.n	8018f72 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018f4c:	9804      	ldr	r0, [sp, #16]
 8018f4e:	b180      	cbz	r0, 8018f72 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018f50:	7b47      	ldrb	r7, [r0, #13]
 8018f52:	7922      	ldrb	r2, [r4, #4]
 8018f54:	00fb      	lsls	r3, r7, #3
 8018f56:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018f5a:	7a03      	ldrb	r3, [r0, #8]
 8018f5c:	430b      	orrs	r3, r1
 8018f5e:	0679      	lsls	r1, r7, #25
 8018f60:	bf44      	itt	mi
 8018f62:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018f66:	b21b      	sxthmi	r3, r3
 8018f68:	1ad3      	subs	r3, r2, r3
 8018f6a:	b2db      	uxtb	r3, r3
 8018f6c:	429e      	cmp	r6, r3
 8018f6e:	bf28      	it	cs
 8018f70:	461e      	movcs	r6, r3
 8018f72:	462b      	mov	r3, r5
 8018f74:	4622      	mov	r2, r4
 8018f76:	2100      	movs	r1, #0
 8018f78:	a805      	add	r0, sp, #20
 8018f7a:	f000 ffdb 	bl	8019f34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018f7e:	e7e2      	b.n	8018f46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8018f80:	4630      	mov	r0, r6
 8018f82:	b01e      	add	sp, #120	; 0x78
 8018f84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018f88:	b003      	add	sp, #12
 8018f8a:	4770      	bx	lr

08018f8c <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018f8c:	b513      	push	{r0, r1, r4, lr}
 8018f8e:	6803      	ldr	r3, [r0, #0]
 8018f90:	2400      	movs	r4, #0
 8018f92:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018f96:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018f9a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018f9e:	4669      	mov	r1, sp
 8018fa0:	691b      	ldr	r3, [r3, #16]
 8018fa2:	9400      	str	r4, [sp, #0]
 8018fa4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018fa8:	4798      	blx	r3
 8018faa:	b002      	add	sp, #8
 8018fac:	bd10      	pop	{r4, pc}

08018fae <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018fae:	b538      	push	{r3, r4, r5, lr}
 8018fb0:	680b      	ldr	r3, [r1, #0]
 8018fb2:	460c      	mov	r4, r1
 8018fb4:	4605      	mov	r5, r0
 8018fb6:	68db      	ldr	r3, [r3, #12]
 8018fb8:	4798      	blx	r3
 8018fba:	6823      	ldr	r3, [r4, #0]
 8018fbc:	4620      	mov	r0, r4
 8018fbe:	4629      	mov	r1, r5
 8018fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fc2:	4798      	blx	r3
 8018fc4:	4628      	mov	r0, r5
 8018fc6:	bd38      	pop	{r3, r4, r5, pc}

08018fc8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018fc8:	b410      	push	{r4}
 8018fca:	880a      	ldrh	r2, [r1, #0]
 8018fcc:	8884      	ldrh	r4, [r0, #4]
 8018fce:	4422      	add	r2, r4
 8018fd0:	800a      	strh	r2, [r1, #0]
 8018fd2:	884a      	ldrh	r2, [r1, #2]
 8018fd4:	88c4      	ldrh	r4, [r0, #6]
 8018fd6:	4422      	add	r2, r4
 8018fd8:	804a      	strh	r2, [r1, #2]
 8018fda:	6940      	ldr	r0, [r0, #20]
 8018fdc:	b120      	cbz	r0, 8018fe8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018fde:	6803      	ldr	r3, [r0, #0]
 8018fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fe6:	4718      	bx	r3
 8018fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fec:	4770      	bx	lr

08018fee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018fee:	b570      	push	{r4, r5, r6, lr}
 8018ff0:	8882      	ldrh	r2, [r0, #4]
 8018ff2:	460c      	mov	r4, r1
 8018ff4:	880b      	ldrh	r3, [r1, #0]
 8018ff6:	4605      	mov	r5, r0
 8018ff8:	4413      	add	r3, r2
 8018ffa:	800b      	strh	r3, [r1, #0]
 8018ffc:	884b      	ldrh	r3, [r1, #2]
 8018ffe:	88c2      	ldrh	r2, [r0, #6]
 8019000:	4413      	add	r3, r2
 8019002:	804b      	strh	r3, [r1, #2]
 8019004:	1d01      	adds	r1, r0, #4
 8019006:	4620      	mov	r0, r4
 8019008:	f7fa f9d6 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 801900c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019010:	2b00      	cmp	r3, #0
 8019012:	dd0b      	ble.n	801902c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019014:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019018:	2b00      	cmp	r3, #0
 801901a:	dd07      	ble.n	801902c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801901c:	6968      	ldr	r0, [r5, #20]
 801901e:	b128      	cbz	r0, 801902c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019020:	6803      	ldr	r3, [r0, #0]
 8019022:	4621      	mov	r1, r4
 8019024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801902a:	4718      	bx	r3
 801902c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019030 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019030:	b570      	push	{r4, r5, r6, lr}
 8019032:	8882      	ldrh	r2, [r0, #4]
 8019034:	460c      	mov	r4, r1
 8019036:	880b      	ldrh	r3, [r1, #0]
 8019038:	4605      	mov	r5, r0
 801903a:	4413      	add	r3, r2
 801903c:	800b      	strh	r3, [r1, #0]
 801903e:	884b      	ldrh	r3, [r1, #2]
 8019040:	88c2      	ldrh	r2, [r0, #6]
 8019042:	4413      	add	r3, r2
 8019044:	804b      	strh	r3, [r1, #2]
 8019046:	1d01      	adds	r1, r0, #4
 8019048:	4620      	mov	r0, r4
 801904a:	f7fa f9b5 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 801904e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019052:	2b00      	cmp	r3, #0
 8019054:	dd18      	ble.n	8019088 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019056:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801905a:	2b00      	cmp	r3, #0
 801905c:	dd14      	ble.n	8019088 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801905e:	6968      	ldr	r0, [r5, #20]
 8019060:	b128      	cbz	r0, 801906e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019062:	6803      	ldr	r3, [r0, #0]
 8019064:	4621      	mov	r1, r4
 8019066:	691b      	ldr	r3, [r3, #16]
 8019068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801906c:	4718      	bx	r3
 801906e:	4b07      	ldr	r3, [pc, #28]	; (801908c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	3304      	adds	r3, #4
 8019074:	429d      	cmp	r5, r3
 8019076:	d107      	bne.n	8019088 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019078:	f7fe ffb4 	bl	8017fe4 <_ZN8touchgfx11Application11getInstanceEv>
 801907c:	6821      	ldr	r1, [r4, #0]
 801907e:	6862      	ldr	r2, [r4, #4]
 8019080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019084:	f7ff b862 	b.w	801814c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019088:	bd70      	pop	{r4, r5, r6, pc}
 801908a:	bf00      	nop
 801908c:	2400ff50 	.word	0x2400ff50

08019090 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019090:	b570      	push	{r4, r5, r6, lr}
 8019092:	4604      	mov	r4, r0
 8019094:	4616      	mov	r6, r2
 8019096:	460d      	mov	r5, r1
 8019098:	b901      	cbnz	r1, 801909c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801909a:	b192      	cbz	r2, 80190c2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801909c:	6823      	ldr	r3, [r4, #0]
 801909e:	4620      	mov	r0, r4
 80190a0:	699b      	ldr	r3, [r3, #24]
 80190a2:	4798      	blx	r3
 80190a4:	88e2      	ldrh	r2, [r4, #6]
 80190a6:	88a1      	ldrh	r1, [r4, #4]
 80190a8:	4620      	mov	r0, r4
 80190aa:	4432      	add	r2, r6
 80190ac:	4429      	add	r1, r5
 80190ae:	b212      	sxth	r2, r2
 80190b0:	b209      	sxth	r1, r1
 80190b2:	f7fa fb34 	bl	801371e <_ZN8touchgfx8Drawable5setXYEss>
 80190b6:	6823      	ldr	r3, [r4, #0]
 80190b8:	4620      	mov	r0, r4
 80190ba:	699b      	ldr	r3, [r3, #24]
 80190bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190c0:	4718      	bx	r3
 80190c2:	bd70      	pop	{r4, r5, r6, pc}

080190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80190c4:	b510      	push	{r4, lr}
 80190c6:	2300      	movs	r3, #0
 80190c8:	4604      	mov	r4, r0
 80190ca:	4608      	mov	r0, r1
 80190cc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80190d0:	8023      	strh	r3, [r4, #0]
 80190d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80190d6:	8063      	strh	r3, [r4, #2]
 80190d8:	6803      	ldr	r3, [r0, #0]
 80190da:	80a1      	strh	r1, [r4, #4]
 80190dc:	4621      	mov	r1, r4
 80190de:	80e2      	strh	r2, [r4, #6]
 80190e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190e2:	4798      	blx	r3
 80190e4:	4620      	mov	r0, r4
 80190e6:	bd10      	pop	{r4, pc}

080190e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80190e8:	b530      	push	{r4, r5, lr}
 80190ea:	8083      	strh	r3, [r0, #4]
 80190ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80190f0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80190f4:	7183      	strb	r3, [r0, #6]
 80190f6:	79c3      	ldrb	r3, [r0, #7]
 80190f8:	6101      	str	r1, [r0, #16]
 80190fa:	f365 0306 	bfi	r3, r5, #0, #7
 80190fe:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019102:	8282      	strh	r2, [r0, #20]
 8019104:	f365 13c7 	bfi	r3, r5, #7, #1
 8019108:	71c3      	strb	r3, [r0, #7]
 801910a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801910e:	7203      	strb	r3, [r0, #8]
 8019110:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019114:	7243      	strb	r3, [r0, #9]
 8019116:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801911a:	8143      	strh	r3, [r0, #10]
 801911c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019120:	8183      	strh	r3, [r0, #12]
 8019122:	4b01      	ldr	r3, [pc, #4]	; (8019128 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019124:	6003      	str	r3, [r0, #0]
 8019126:	bd30      	pop	{r4, r5, pc}
 8019128:	08027188 	.word	0x08027188

0801912c <_ZNK8touchgfx9ConstFont4findEt>:
 801912c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801912e:	6904      	ldr	r4, [r0, #16]
 8019130:	b3bc      	cbz	r4, 80191a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019132:	88a3      	ldrh	r3, [r4, #4]
 8019134:	8a82      	ldrh	r2, [r0, #20]
 8019136:	1acb      	subs	r3, r1, r3
 8019138:	f102 32ff 	add.w	r2, r2, #4294967295
 801913c:	d431      	bmi.n	80191a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801913e:	4293      	cmp	r3, r2
 8019140:	dd0c      	ble.n	801915c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019142:	230e      	movs	r3, #14
 8019144:	fb03 4302 	mla	r3, r3, r2, r4
 8019148:	889b      	ldrh	r3, [r3, #4]
 801914a:	1a5b      	subs	r3, r3, r1
 801914c:	1ad3      	subs	r3, r2, r3
 801914e:	429a      	cmp	r2, r3
 8019150:	db27      	blt.n	80191a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019152:	2b00      	cmp	r3, #0
 8019154:	bfbc      	itt	lt
 8019156:	2302      	movlt	r3, #2
 8019158:	fb92 f3f3 	sdivlt	r3, r2, r3
 801915c:	2500      	movs	r5, #0
 801915e:	260e      	movs	r6, #14
 8019160:	4295      	cmp	r5, r2
 8019162:	dc1e      	bgt.n	80191a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019164:	fb06 4003 	mla	r0, r6, r3, r4
 8019168:	8887      	ldrh	r7, [r0, #4]
 801916a:	42b9      	cmp	r1, r7
 801916c:	d01a      	beq.n	80191a4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801916e:	d20d      	bcs.n	801918c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019170:	1e5a      	subs	r2, r3, #1
 8019172:	4295      	cmp	r5, r2
 8019174:	dc15      	bgt.n	80191a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019176:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801917a:	1a5b      	subs	r3, r3, r1
 801917c:	1ad3      	subs	r3, r2, r3
 801917e:	429a      	cmp	r2, r3
 8019180:	db0f      	blt.n	80191a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019182:	429d      	cmp	r5, r3
 8019184:	ddec      	ble.n	8019160 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019186:	1953      	adds	r3, r2, r5
 8019188:	105b      	asrs	r3, r3, #1
 801918a:	e7e9      	b.n	8019160 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801918c:	1c5d      	adds	r5, r3, #1
 801918e:	42aa      	cmp	r2, r5
 8019190:	db07      	blt.n	80191a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019192:	8a43      	ldrh	r3, [r0, #18]
 8019194:	1acb      	subs	r3, r1, r3
 8019196:	442b      	add	r3, r5
 8019198:	429d      	cmp	r5, r3
 801919a:	dc02      	bgt.n	80191a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801919c:	429a      	cmp	r2, r3
 801919e:	dadf      	bge.n	8019160 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80191a0:	e7f1      	b.n	8019186 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80191a2:	2000      	movs	r0, #0
 80191a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080191a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80191a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191a8:	4604      	mov	r4, r0
 80191aa:	4617      	mov	r7, r2
 80191ac:	461e      	mov	r6, r3
 80191ae:	b911      	cbnz	r1, 80191b6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80191b0:	2500      	movs	r5, #0
 80191b2:	4628      	mov	r0, r5
 80191b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191b6:	290a      	cmp	r1, #10
 80191b8:	d0fa      	beq.n	80191b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80191ba:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80191be:	4291      	cmp	r1, r2
 80191c0:	d0f6      	beq.n	80191b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80191c2:	f242 020b 	movw	r2, #8203	; 0x200b
 80191c6:	4291      	cmp	r1, r2
 80191c8:	d0f2      	beq.n	80191b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80191ca:	f7ff ffaf 	bl	801912c <_ZNK8touchgfx9ConstFont4findEt>
 80191ce:	4605      	mov	r5, r0
 80191d0:	b950      	cbnz	r0, 80191e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80191d2:	6823      	ldr	r3, [r4, #0]
 80191d4:	4620      	mov	r0, r4
 80191d6:	691b      	ldr	r3, [r3, #16]
 80191d8:	4798      	blx	r3
 80191da:	4601      	mov	r1, r0
 80191dc:	4620      	mov	r0, r4
 80191de:	f7ff ffa5 	bl	801912c <_ZNK8touchgfx9ConstFont4findEt>
 80191e2:	4605      	mov	r5, r0
 80191e4:	2800      	cmp	r0, #0
 80191e6:	d0e3      	beq.n	80191b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80191e8:	6823      	ldr	r3, [r4, #0]
 80191ea:	4629      	mov	r1, r5
 80191ec:	4620      	mov	r0, r4
 80191ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80191f0:	4798      	blx	r3
 80191f2:	6038      	str	r0, [r7, #0]
 80191f4:	6823      	ldr	r3, [r4, #0]
 80191f6:	4620      	mov	r0, r4
 80191f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80191fa:	4798      	blx	r3
 80191fc:	7030      	strb	r0, [r6, #0]
 80191fe:	e7d8      	b.n	80191b2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019200 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8019200:	2002      	movs	r0, #2
 8019202:	4770      	bx	lr

08019204 <_ZN8touchgfx6ScreenD1Ev>:
 8019204:	4770      	bx	lr

08019206 <_ZN8touchgfx12GestureEventD1Ev>:
 8019206:	4770      	bx	lr

08019208 <_ZN8touchgfx12GestureEventD0Ev>:
 8019208:	b510      	push	{r4, lr}
 801920a:	4604      	mov	r4, r0
 801920c:	210c      	movs	r1, #12
 801920e:	f00a f86a 	bl	80232e6 <_ZdlPvj>
 8019212:	4620      	mov	r0, r4
 8019214:	bd10      	pop	{r4, pc}

08019216 <_ZN8touchgfx6ScreenD0Ev>:
 8019216:	b510      	push	{r4, lr}
 8019218:	4604      	mov	r4, r0
 801921a:	213c      	movs	r1, #60	; 0x3c
 801921c:	f00a f863 	bl	80232e6 <_ZdlPvj>
 8019220:	4620      	mov	r0, r4
 8019222:	bd10      	pop	{r4, pc}

08019224 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019224:	b530      	push	{r4, r5, lr}
 8019226:	460d      	mov	r5, r1
 8019228:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801922a:	b087      	sub	sp, #28
 801922c:	4604      	mov	r4, r0
 801922e:	b301      	cbz	r1, 8019272 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019230:	a801      	add	r0, sp, #4
 8019232:	f7ff ff47 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019236:	892a      	ldrh	r2, [r5, #8]
 8019238:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801923c:	7928      	ldrb	r0, [r5, #4]
 801923e:	1ad2      	subs	r2, r2, r3
 8019240:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019242:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019246:	441a      	add	r2, r3
 8019248:	896b      	ldrh	r3, [r5, #10]
 801924a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801924e:	f88d 0010 	strb.w	r0, [sp, #16]
 8019252:	1b5b      	subs	r3, r3, r5
 8019254:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019256:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019258:	442b      	add	r3, r5
 801925a:	4d07      	ldr	r5, [pc, #28]	; (8019278 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801925c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019260:	a903      	add	r1, sp, #12
 8019262:	9503      	str	r5, [sp, #12]
 8019264:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019268:	f8ad 3016 	strh.w	r3, [sp, #22]
 801926c:	6803      	ldr	r3, [r0, #0]
 801926e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019270:	4798      	blx	r3
 8019272:	b007      	add	sp, #28
 8019274:	bd30      	pop	{r4, r5, pc}
 8019276:	bf00      	nop
 8019278:	080271e0 	.word	0x080271e0

0801927c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019280:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019282:	b08a      	sub	sp, #40	; 0x28
 8019284:	4604      	mov	r4, r0
 8019286:	460d      	mov	r5, r1
 8019288:	b113      	cbz	r3, 8019290 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801928a:	790b      	ldrb	r3, [r1, #4]
 801928c:	2b00      	cmp	r3, #0
 801928e:	d044      	beq.n	801931a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019290:	f104 0804 	add.w	r8, r4, #4
 8019294:	a803      	add	r0, sp, #12
 8019296:	4641      	mov	r1, r8
 8019298:	f7ff ff14 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801929c:	792b      	ldrb	r3, [r5, #4]
 801929e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80192a2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80192a6:	b983      	cbnz	r3, 80192ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80192a8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80192ac:	892a      	ldrh	r2, [r5, #8]
 80192ae:	88e9      	ldrh	r1, [r5, #6]
 80192b0:	4640      	mov	r0, r8
 80192b2:	1b92      	subs	r2, r2, r6
 80192b4:	9301      	str	r3, [sp, #4]
 80192b6:	1bc9      	subs	r1, r1, r7
 80192b8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80192bc:	b212      	sxth	r2, r2
 80192be:	9300      	str	r3, [sp, #0]
 80192c0:	b209      	sxth	r1, r1
 80192c2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80192c6:	f7f9 ff95 	bl	80131f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80192ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80192cc:	b329      	cbz	r1, 801931a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80192ce:	a805      	add	r0, sp, #20
 80192d0:	f7ff fef8 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80192d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80192d8:	792b      	ldrb	r3, [r5, #4]
 80192da:	a907      	add	r1, sp, #28
 80192dc:	1abf      	subs	r7, r7, r2
 80192de:	88ea      	ldrh	r2, [r5, #6]
 80192e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80192e2:	4417      	add	r7, r2
 80192e4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80192e6:	f88d 3020 	strb.w	r3, [sp, #32]
 80192ea:	4417      	add	r7, r2
 80192ec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80192f0:	1ab6      	subs	r6, r6, r2
 80192f2:	892a      	ldrh	r2, [r5, #8]
 80192f4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80192f8:	4416      	add	r6, r2
 80192fa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80192fc:	4416      	add	r6, r2
 80192fe:	4a08      	ldr	r2, [pc, #32]	; (8019320 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019300:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8019304:	2600      	movs	r6, #0
 8019306:	9207      	str	r2, [sp, #28]
 8019308:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801930c:	6803      	ldr	r3, [r0, #0]
 801930e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019310:	4798      	blx	r3
 8019312:	792b      	ldrb	r3, [r5, #4]
 8019314:	b10b      	cbz	r3, 801931a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019316:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801931a:	b00a      	add	sp, #40	; 0x28
 801931c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019320:	08026b74 	.word	0x08026b74

08019324 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019328:	460c      	mov	r4, r1
 801932a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801932c:	b088      	sub	sp, #32
 801932e:	4605      	mov	r5, r0
 8019330:	2900      	cmp	r1, #0
 8019332:	d06d      	beq.n	8019410 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8019334:	4668      	mov	r0, sp
 8019336:	f7ff fec5 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801933a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801933c:	88e3      	ldrh	r3, [r4, #6]
 801933e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8019342:	440b      	add	r3, r1
 8019344:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8019348:	b21b      	sxth	r3, r3
 801934a:	4543      	cmp	r3, r8
 801934c:	db31      	blt.n	80193b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801934e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8019352:	44c4      	add	ip, r8
 8019354:	fa0f fc8c 	sxth.w	ip, ip
 8019358:	4563      	cmp	r3, ip
 801935a:	da2a      	bge.n	80193b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801935c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801935e:	8926      	ldrh	r6, [r4, #8]
 8019360:	4416      	add	r6, r2
 8019362:	b236      	sxth	r6, r6
 8019364:	42be      	cmp	r6, r7
 8019366:	db24      	blt.n	80193b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019368:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801936c:	4438      	add	r0, r7
 801936e:	b200      	sxth	r0, r0
 8019370:	4286      	cmp	r6, r0
 8019372:	da1e      	bge.n	80193b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019374:	8963      	ldrh	r3, [r4, #10]
 8019376:	4419      	add	r1, r3
 8019378:	b209      	sxth	r1, r1
 801937a:	4541      	cmp	r1, r8
 801937c:	db08      	blt.n	8019390 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801937e:	4561      	cmp	r1, ip
 8019380:	da06      	bge.n	8019390 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019382:	89a3      	ldrh	r3, [r4, #12]
 8019384:	441a      	add	r2, r3
 8019386:	b212      	sxth	r2, r2
 8019388:	42ba      	cmp	r2, r7
 801938a:	db01      	blt.n	8019390 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801938c:	4282      	cmp	r2, r0
 801938e:	db10      	blt.n	80193b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019390:	4b21      	ldr	r3, [pc, #132]	; (8019418 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8019392:	a904      	add	r1, sp, #16
 8019394:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019396:	9304      	str	r3, [sp, #16]
 8019398:	2302      	movs	r3, #2
 801939a:	f88d 3014 	strb.w	r3, [sp, #20]
 801939e:	2300      	movs	r3, #0
 80193a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80193a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80193a8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80193ac:	6803      	ldr	r3, [r0, #0]
 80193ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193b0:	4798      	blx	r3
 80193b2:	1d29      	adds	r1, r5, #4
 80193b4:	a802      	add	r0, sp, #8
 80193b6:	f7ff fe85 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80193ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80193be:	88e0      	ldrh	r0, [r4, #6]
 80193c0:	eba3 0808 	sub.w	r8, r3, r8
 80193c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80193c8:	7921      	ldrb	r1, [r4, #4]
 80193ca:	fa1f f888 	uxth.w	r8, r8
 80193ce:	1bdf      	subs	r7, r3, r7
 80193d0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80193d4:	b2bb      	uxth	r3, r7
 80193d6:	4440      	add	r0, r8
 80193d8:	8922      	ldrh	r2, [r4, #8]
 80193da:	8967      	ldrh	r7, [r4, #10]
 80193dc:	4460      	add	r0, ip
 80193de:	89a4      	ldrh	r4, [r4, #12]
 80193e0:	441a      	add	r2, r3
 80193e2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80193e4:	44b8      	add	r8, r7
 80193e6:	4423      	add	r3, r4
 80193e8:	f8ad 0016 	strh.w	r0, [sp, #22]
 80193ec:	4432      	add	r2, r6
 80193ee:	44e0      	add	r8, ip
 80193f0:	4433      	add	r3, r6
 80193f2:	4c0a      	ldr	r4, [pc, #40]	; (801941c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80193f4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80193f6:	f88d 1014 	strb.w	r1, [sp, #20]
 80193fa:	a904      	add	r1, sp, #16
 80193fc:	9404      	str	r4, [sp, #16]
 80193fe:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019402:	f8ad 801a 	strh.w	r8, [sp, #26]
 8019406:	f8ad 301c 	strh.w	r3, [sp, #28]
 801940a:	6803      	ldr	r3, [r0, #0]
 801940c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801940e:	4798      	blx	r3
 8019410:	b008      	add	sp, #32
 8019412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019416:	bf00      	nop
 8019418:	08026b74 	.word	0x08026b74
 801941c:	08026b88 	.word	0x08026b88

08019420 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019422:	4604      	mov	r4, r0
 8019424:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019428:	3201      	adds	r2, #1
 801942a:	d112      	bne.n	8019452 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801942c:	2500      	movs	r5, #0
 801942e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019432:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019436:	6803      	ldr	r3, [r0, #0]
 8019438:	9500      	str	r5, [sp, #0]
 801943a:	466d      	mov	r5, sp
 801943c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019440:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019444:	4629      	mov	r1, r5
 8019446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019448:	4798      	blx	r3
 801944a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801944e:	e884 0003 	stmia.w	r4, {r0, r1}
 8019452:	4620      	mov	r0, r4
 8019454:	b003      	add	sp, #12
 8019456:	bd30      	pop	{r4, r5, pc}

08019458 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019458:	b513      	push	{r0, r1, r4, lr}
 801945a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801945e:	4604      	mov	r4, r0
 8019460:	3301      	adds	r3, #1
 8019462:	d109      	bne.n	8019478 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019464:	4601      	mov	r1, r0
 8019466:	4668      	mov	r0, sp
 8019468:	f7ff fe2c 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801946c:	f8bd 3000 	ldrh.w	r3, [sp]
 8019470:	8423      	strh	r3, [r4, #32]
 8019472:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019476:	8463      	strh	r3, [r4, #34]	; 0x22
 8019478:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801947c:	b002      	add	sp, #8
 801947e:	bd10      	pop	{r4, pc}

08019480 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019480:	b513      	push	{r0, r1, r4, lr}
 8019482:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019486:	4604      	mov	r4, r0
 8019488:	3301      	adds	r3, #1
 801948a:	d109      	bne.n	80194a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801948c:	4601      	mov	r1, r0
 801948e:	4668      	mov	r0, sp
 8019490:	f7ff fe18 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019494:	f8bd 3000 	ldrh.w	r3, [sp]
 8019498:	8423      	strh	r3, [r4, #32]
 801949a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801949e:	8463      	strh	r3, [r4, #34]	; 0x22
 80194a0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80194a4:	b002      	add	sp, #8
 80194a6:	bd10      	pop	{r4, pc}

080194a8 <_ZN8touchgfx6ScreenC1Ev>:
 80194a8:	b570      	push	{r4, r5, r6, lr}
 80194aa:	4b17      	ldr	r3, [pc, #92]	; (8019508 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80194ac:	4605      	mov	r5, r0
 80194ae:	4a17      	ldr	r2, [pc, #92]	; (801950c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80194b0:	2101      	movs	r1, #1
 80194b2:	f845 3b04 	str.w	r3, [r5], #4
 80194b6:	2300      	movs	r3, #0
 80194b8:	6042      	str	r2, [r0, #4]
 80194ba:	4604      	mov	r4, r0
 80194bc:	8103      	strh	r3, [r0, #8]
 80194be:	8143      	strh	r3, [r0, #10]
 80194c0:	8183      	strh	r3, [r0, #12]
 80194c2:	81c3      	strh	r3, [r0, #14]
 80194c4:	8203      	strh	r3, [r0, #16]
 80194c6:	8243      	strh	r3, [r0, #18]
 80194c8:	8283      	strh	r3, [r0, #20]
 80194ca:	82c3      	strh	r3, [r0, #22]
 80194cc:	6203      	str	r3, [r0, #32]
 80194ce:	8483      	strh	r3, [r0, #36]	; 0x24
 80194d0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80194d2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80194d6:	6343      	str	r3, [r0, #52]	; 0x34
 80194d8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80194dc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80194e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80194e4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80194e8:	4b09      	ldr	r3, [pc, #36]	; (8019510 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80194ea:	4628      	mov	r0, r5
 80194ec:	f9b3 6000 	ldrsh.w	r6, [r3]
 80194f0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80194f2:	4a08      	ldr	r2, [pc, #32]	; (8019514 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80194f4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80194f8:	4798      	blx	r3
 80194fa:	6863      	ldr	r3, [r4, #4]
 80194fc:	4628      	mov	r0, r5
 80194fe:	4631      	mov	r1, r6
 8019500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019502:	4798      	blx	r3
 8019504:	4620      	mov	r0, r4
 8019506:	bd70      	pop	{r4, r5, r6, pc}
 8019508:	080271f4 	.word	0x080271f4
 801950c:	08026a1c 	.word	0x08026a1c
 8019510:	2400ff0a 	.word	0x2400ff0a
 8019514:	2400ff08 	.word	0x2400ff08

08019518 <_ZN8touchgfx6Screen4drawEv>:
 8019518:	4b09      	ldr	r3, [pc, #36]	; (8019540 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801951a:	b507      	push	{r0, r1, r2, lr}
 801951c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019520:	2100      	movs	r1, #0
 8019522:	4b08      	ldr	r3, [pc, #32]	; (8019544 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019524:	9100      	str	r1, [sp, #0]
 8019526:	4669      	mov	r1, sp
 8019528:	f9b3 3000 	ldrsh.w	r3, [r3]
 801952c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019530:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019534:	6803      	ldr	r3, [r0, #0]
 8019536:	689b      	ldr	r3, [r3, #8]
 8019538:	4798      	blx	r3
 801953a:	b003      	add	sp, #12
 801953c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019540:	2400ff08 	.word	0x2400ff08
 8019544:	2400ff0a 	.word	0x2400ff0a

08019548 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801954c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019550:	b089      	sub	sp, #36	; 0x24
 8019552:	4680      	mov	r8, r0
 8019554:	460c      	mov	r4, r1
 8019556:	2b00      	cmp	r3, #0
 8019558:	4615      	mov	r5, r2
 801955a:	dd0e      	ble.n	801957a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801955c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019560:	2b00      	cmp	r3, #0
 8019562:	dd0a      	ble.n	801957a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019564:	4628      	mov	r0, r5
 8019566:	f7ff ff5b 	bl	8019420 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801956a:	4621      	mov	r1, r4
 801956c:	f7fc fd88 	bl	8016080 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019570:	69eb      	ldr	r3, [r5, #28]
 8019572:	b928      	cbnz	r0, 8019580 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019574:	461d      	mov	r5, r3
 8019576:	2b00      	cmp	r3, #0
 8019578:	d1f4      	bne.n	8019564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801957a:	b009      	add	sp, #36	; 0x24
 801957c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019580:	ae04      	add	r6, sp, #16
 8019582:	2b00      	cmp	r3, #0
 8019584:	f000 80b5 	beq.w	80196f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019588:	682b      	ldr	r3, [r5, #0]
 801958a:	4629      	mov	r1, r5
 801958c:	a802      	add	r0, sp, #8
 801958e:	68db      	ldr	r3, [r3, #12]
 8019590:	4798      	blx	r3
 8019592:	4628      	mov	r0, r5
 8019594:	f7ff ff60 	bl	8019458 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019598:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801959c:	4407      	add	r7, r0
 801959e:	4628      	mov	r0, r5
 80195a0:	f7ff ff6e 	bl	8019480 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80195a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80195a8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80195ac:	b23f      	sxth	r7, r7
 80195ae:	4418      	add	r0, r3
 80195b0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80195b4:	4621      	mov	r1, r4
 80195b6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80195ba:	f8ad 0012 	strh.w	r0, [sp, #18]
 80195be:	4630      	mov	r0, r6
 80195c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80195c4:	f8ad 7010 	strh.w	r7, [sp, #16]
 80195c8:	f7f9 fef6 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 80195cc:	4628      	mov	r0, r5
 80195ce:	f7ff ff27 	bl	8019420 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80195d2:	ab06      	add	r3, sp, #24
 80195d4:	4602      	mov	r2, r0
 80195d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80195da:	e883 0003 	stmia.w	r3, {r0, r1}
 80195de:	4611      	mov	r1, r2
 80195e0:	4618      	mov	r0, r3
 80195e2:	f7f9 fee9 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 80195e6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80195ea:	f9b4 1000 	ldrsh.w	r1, [r4]
 80195ee:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80195f2:	4299      	cmp	r1, r3
 80195f4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80195f8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80195fc:	d10b      	bne.n	8019616 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80195fe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019602:	4552      	cmp	r2, sl
 8019604:	d107      	bne.n	8019616 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019606:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801960a:	455a      	cmp	r2, fp
 801960c:	d103      	bne.n	8019616 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801960e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019612:	454a      	cmp	r2, r9
 8019614:	d06d      	beq.n	80196f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019616:	f1bb 0f00 	cmp.w	fp, #0
 801961a:	dd65      	ble.n	80196e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801961c:	f1b9 0f00 	cmp.w	r9, #0
 8019620:	dd62      	ble.n	80196e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019622:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019626:	fa1f f08a 	uxth.w	r0, sl
 801962a:	4552      	cmp	r2, sl
 801962c:	9000      	str	r0, [sp, #0]
 801962e:	da12      	bge.n	8019656 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8019630:	9301      	str	r3, [sp, #4]
 8019632:	9b00      	ldr	r3, [sp, #0]
 8019634:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019638:	f8ad 2012 	strh.w	r2, [sp, #18]
 801963c:	1a9a      	subs	r2, r3, r2
 801963e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019642:	4631      	mov	r1, r6
 8019644:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019648:	4640      	mov	r0, r8
 801964a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801964e:	69ea      	ldr	r2, [r5, #28]
 8019650:	f7ff ff7a 	bl	8019548 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019654:	9b01      	ldr	r3, [sp, #4]
 8019656:	f9b4 2000 	ldrsh.w	r2, [r4]
 801965a:	b29f      	uxth	r7, r3
 801965c:	429a      	cmp	r2, r3
 801965e:	da0d      	bge.n	801967c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8019660:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019664:	1aba      	subs	r2, r7, r2
 8019666:	f8ad a012 	strh.w	sl, [sp, #18]
 801966a:	4631      	mov	r1, r6
 801966c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019670:	4640      	mov	r0, r8
 8019672:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019676:	69ea      	ldr	r2, [r5, #28]
 8019678:	f7ff ff66 	bl	8019548 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801967c:	8822      	ldrh	r2, [r4, #0]
 801967e:	445f      	add	r7, fp
 8019680:	88a3      	ldrh	r3, [r4, #4]
 8019682:	b2bf      	uxth	r7, r7
 8019684:	4413      	add	r3, r2
 8019686:	b23a      	sxth	r2, r7
 8019688:	b29b      	uxth	r3, r3
 801968a:	b219      	sxth	r1, r3
 801968c:	4291      	cmp	r1, r2
 801968e:	dd0d      	ble.n	80196ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8019690:	1bdb      	subs	r3, r3, r7
 8019692:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019696:	f8ad a012 	strh.w	sl, [sp, #18]
 801969a:	4631      	mov	r1, r6
 801969c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80196a0:	4640      	mov	r0, r8
 80196a2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80196a6:	69ea      	ldr	r2, [r5, #28]
 80196a8:	f7ff ff4e 	bl	8019548 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80196ac:	88e2      	ldrh	r2, [r4, #6]
 80196ae:	8863      	ldrh	r3, [r4, #2]
 80196b0:	4413      	add	r3, r2
 80196b2:	9a00      	ldr	r2, [sp, #0]
 80196b4:	444a      	add	r2, r9
 80196b6:	b29b      	uxth	r3, r3
 80196b8:	fa1f f982 	uxth.w	r9, r2
 80196bc:	b219      	sxth	r1, r3
 80196be:	fa0f f289 	sxth.w	r2, r9
 80196c2:	428a      	cmp	r2, r1
 80196c4:	da15      	bge.n	80196f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80196c6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80196ca:	eba3 0309 	sub.w	r3, r3, r9
 80196ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 80196d2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80196d6:	4631      	mov	r1, r6
 80196d8:	f8ad 0010 	strh.w	r0, [sp, #16]
 80196dc:	f8ad 2012 	strh.w	r2, [sp, #18]
 80196e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80196e4:	69ea      	ldr	r2, [r5, #28]
 80196e6:	e001      	b.n	80196ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80196e8:	69ea      	ldr	r2, [r5, #28]
 80196ea:	4621      	mov	r1, r4
 80196ec:	4640      	mov	r0, r8
 80196ee:	f7ff ff2b 	bl	8019548 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80196f2:	4628      	mov	r0, r5
 80196f4:	f7ff fe94 	bl	8019420 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80196f8:	6861      	ldr	r1, [r4, #4]
 80196fa:	4602      	mov	r2, r0
 80196fc:	4633      	mov	r3, r6
 80196fe:	6820      	ldr	r0, [r4, #0]
 8019700:	c303      	stmia	r3!, {r0, r1}
 8019702:	4611      	mov	r1, r2
 8019704:	4630      	mov	r0, r6
 8019706:	f7f9 fe57 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 801970a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801970e:	2b00      	cmp	r3, #0
 8019710:	f77f af33 	ble.w	801957a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019714:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019718:	2b00      	cmp	r3, #0
 801971a:	f77f af2e 	ble.w	801957a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801971e:	4628      	mov	r0, r5
 8019720:	f7ff fe9a 	bl	8019458 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019724:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019728:	1a18      	subs	r0, r3, r0
 801972a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801972e:	4628      	mov	r0, r5
 8019730:	f7ff fea6 	bl	8019480 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019734:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019738:	4631      	mov	r1, r6
 801973a:	1a18      	subs	r0, r3, r0
 801973c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019740:	4628      	mov	r0, r5
 8019742:	682b      	ldr	r3, [r5, #0]
 8019744:	689b      	ldr	r3, [r3, #8]
 8019746:	4798      	blx	r3
 8019748:	e717      	b.n	801957a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801974a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801974a:	b570      	push	{r4, r5, r6, lr}
 801974c:	1d06      	adds	r6, r0, #4
 801974e:	b086      	sub	sp, #24
 8019750:	460c      	mov	r4, r1
 8019752:	2300      	movs	r3, #0
 8019754:	4631      	mov	r1, r6
 8019756:	4605      	mov	r5, r0
 8019758:	a802      	add	r0, sp, #8
 801975a:	9301      	str	r3, [sp, #4]
 801975c:	f7ff fcb2 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019760:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019764:	8822      	ldrh	r2, [r4, #0]
 8019766:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801976a:	1ad2      	subs	r2, r2, r3
 801976c:	8863      	ldrh	r3, [r4, #2]
 801976e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019772:	1a5b      	subs	r3, r3, r1
 8019774:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019778:	f8ad 2010 	strh.w	r2, [sp, #16]
 801977c:	aa01      	add	r2, sp, #4
 801977e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019782:	4630      	mov	r0, r6
 8019784:	f8ad 1016 	strh.w	r1, [sp, #22]
 8019788:	a904      	add	r1, sp, #16
 801978a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801978e:	f7f9 feeb 	bl	8013568 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019792:	9a01      	ldr	r2, [sp, #4]
 8019794:	b11a      	cbz	r2, 801979e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8019796:	4621      	mov	r1, r4
 8019798:	4628      	mov	r0, r5
 801979a:	f7ff fed5 	bl	8019548 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801979e:	b006      	add	sp, #24
 80197a0:	bd70      	pop	{r4, r5, r6, pc}

080197a2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80197a2:	4602      	mov	r2, r0
 80197a4:	b530      	push	{r4, r5, lr}
 80197a6:	4604      	mov	r4, r0
 80197a8:	b085      	sub	sp, #20
 80197aa:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80197ae:	460d      	mov	r5, r1
 80197b0:	466b      	mov	r3, sp
 80197b2:	6851      	ldr	r1, [r2, #4]
 80197b4:	c303      	stmia	r3!, {r0, r1}
 80197b6:	4629      	mov	r1, r5
 80197b8:	4668      	mov	r0, sp
 80197ba:	f7f9 fdfd 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 80197be:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80197c2:	b12b      	cbz	r3, 80197d0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80197c4:	4669      	mov	r1, sp
 80197c6:	4620      	mov	r0, r4
 80197c8:	f7ff ffbf 	bl	801974a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80197cc:	b005      	add	sp, #20
 80197ce:	bd30      	pop	{r4, r5, pc}
 80197d0:	3404      	adds	r4, #4
 80197d2:	a802      	add	r0, sp, #8
 80197d4:	4621      	mov	r1, r4
 80197d6:	f7ff fc75 	bl	80190c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80197da:	f8bd 3000 	ldrh.w	r3, [sp]
 80197de:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80197e2:	4669      	mov	r1, sp
 80197e4:	4620      	mov	r0, r4
 80197e6:	1a9b      	subs	r3, r3, r2
 80197e8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80197ec:	f8ad 3000 	strh.w	r3, [sp]
 80197f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80197f4:	1a9b      	subs	r3, r3, r2
 80197f6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80197fa:	f7f9 fe7c 	bl	80134f6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80197fe:	e7e5      	b.n	80197cc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08019800 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019800:	460b      	mov	r3, r1
 8019802:	680a      	ldr	r2, [r1, #0]
 8019804:	1d01      	adds	r1, r0, #4
 8019806:	6992      	ldr	r2, [r2, #24]
 8019808:	4618      	mov	r0, r3
 801980a:	4710      	bx	r2

0801980c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801980c:	4298      	cmp	r0, r3
 801980e:	d200      	bcs.n	8019812 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8019810:	b913      	cbnz	r3, 8019818 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8019812:	440a      	add	r2, r1
 8019814:	b210      	sxth	r0, r2
 8019816:	4770      	bx	lr
 8019818:	ee07 0a90 	vmov	s15, r0
 801981c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8019820:	ee07 3a90 	vmov	s15, r3
 8019824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801982c:	ee07 2a90 	vmov	s15, r2
 8019830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019834:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8019838:	ee07 1a90 	vmov	s15, r1
 801983c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019840:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019844:	ee67 5a07 	vmul.f32	s11, s14, s14
 8019848:	eee5 6a87 	vfma.f32	s13, s11, s14
 801984c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019850:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019854:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801985c:	bfcc      	ite	gt
 801985e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8019862:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8019866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801986a:	ee17 3a90 	vmov	r3, s15
 801986e:	b218      	sxth	r0, r3
 8019870:	4770      	bx	lr

08019872 <_ZN8touchgfx12TextProviderC1Ev>:
 8019872:	b538      	push	{r3, r4, r5, lr}
 8019874:	2500      	movs	r5, #0
 8019876:	2302      	movs	r3, #2
 8019878:	4604      	mov	r4, r0
 801987a:	220e      	movs	r2, #14
 801987c:	7403      	strb	r3, [r0, #16]
 801987e:	4629      	mov	r1, r5
 8019880:	6145      	str	r5, [r0, #20]
 8019882:	7605      	strb	r5, [r0, #24]
 8019884:	83c5      	strh	r5, [r0, #30]
 8019886:	8405      	strh	r5, [r0, #32]
 8019888:	86c5      	strh	r5, [r0, #54]	; 0x36
 801988a:	8705      	strh	r5, [r0, #56]	; 0x38
 801988c:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801988e:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8019892:	e9c0 5500 	strd	r5, r5, [r0]
 8019896:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801989a:	304c      	adds	r0, #76	; 0x4c
 801989c:	f009 fee8 	bl	8023670 <memset>
 80198a0:	2301      	movs	r3, #1
 80198a2:	4620      	mov	r0, r4
 80198a4:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80198a8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80198ac:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80198b0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80198b4:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80198b8:	f7ea fdf8 	bl	80044ac <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80198bc:	4620      	mov	r0, r4
 80198be:	bd38      	pop	{r3, r4, r5, pc}

080198c0 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 80198c0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80198c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80198c6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80198c8:	fab0 f080 	clz	r0, r0
 80198cc:	0940      	lsrs	r0, r0, #5
 80198ce:	4770      	bx	lr

080198d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80198d0:	b530      	push	{r4, r5, lr}
 80198d2:	2500      	movs	r5, #0
 80198d4:	2401      	movs	r4, #1
 80198d6:	6843      	ldr	r3, [r0, #4]
 80198d8:	b913      	cbnz	r3, 80198e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80198da:	6803      	ldr	r3, [r0, #0]
 80198dc:	b313      	cbz	r3, 8019924 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80198de:	6043      	str	r3, [r0, #4]
 80198e0:	7e03      	ldrb	r3, [r0, #24]
 80198e2:	b143      	cbz	r3, 80198f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80198e4:	6943      	ldr	r3, [r0, #20]
 80198e6:	b12b      	cbz	r3, 80198f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80198e8:	881a      	ldrh	r2, [r3, #0]
 80198ea:	b11a      	cbz	r2, 80198f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80198ec:	1c9a      	adds	r2, r3, #2
 80198ee:	6142      	str	r2, [r0, #20]
 80198f0:	8818      	ldrh	r0, [r3, #0]
 80198f2:	bd30      	pop	{r4, r5, pc}
 80198f4:	7605      	strb	r5, [r0, #24]
 80198f6:	6843      	ldr	r3, [r0, #4]
 80198f8:	8819      	ldrh	r1, [r3, #0]
 80198fa:	b199      	cbz	r1, 8019924 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80198fc:	1c9a      	adds	r2, r3, #2
 80198fe:	2902      	cmp	r1, #2
 8019900:	6042      	str	r2, [r0, #4]
 8019902:	d1f5      	bne.n	80198f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019904:	7c03      	ldrb	r3, [r0, #16]
 8019906:	2b01      	cmp	r3, #1
 8019908:	d8e5      	bhi.n	80198d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801990a:	1c5a      	adds	r2, r3, #1
 801990c:	3302      	adds	r3, #2
 801990e:	7402      	strb	r2, [r0, #16]
 8019910:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019914:	6143      	str	r3, [r0, #20]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d0dd      	beq.n	80198d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801991a:	881b      	ldrh	r3, [r3, #0]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d0da      	beq.n	80198d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019920:	7604      	strb	r4, [r0, #24]
 8019922:	e7d8      	b.n	80198d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019924:	2000      	movs	r0, #0
 8019926:	e7e4      	b.n	80198f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019928 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8019928:	6001      	str	r1, [r0, #0]
 801992a:	2100      	movs	r1, #0
 801992c:	b430      	push	{r4, r5}
 801992e:	6041      	str	r1, [r0, #4]
 8019930:	6815      	ldr	r5, [r2, #0]
 8019932:	6085      	str	r5, [r0, #8]
 8019934:	6852      	ldr	r2, [r2, #4]
 8019936:	6443      	str	r3, [r0, #68]	; 0x44
 8019938:	9b02      	ldr	r3, [sp, #8]
 801993a:	60c2      	str	r2, [r0, #12]
 801993c:	7401      	strb	r1, [r0, #16]
 801993e:	6141      	str	r1, [r0, #20]
 8019940:	7601      	strb	r1, [r0, #24]
 8019942:	8701      	strh	r1, [r0, #56]	; 0x38
 8019944:	8401      	strh	r1, [r0, #32]
 8019946:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801994a:	6483      	str	r3, [r0, #72]	; 0x48
 801994c:	bc30      	pop	{r4, r5}
 801994e:	f7ea bdad 	b.w	80044ac <_ZN8touchgfx12TextProvider18initializeInternalEv>

08019952 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8019952:	b408      	push	{r3}
 8019954:	b510      	push	{r4, lr}
 8019956:	b085      	sub	sp, #20
 8019958:	ac07      	add	r4, sp, #28
 801995a:	f854 3b04 	ldr.w	r3, [r4], #4
 801995e:	9300      	str	r3, [sp, #0]
 8019960:	4613      	mov	r3, r2
 8019962:	4622      	mov	r2, r4
 8019964:	9403      	str	r4, [sp, #12]
 8019966:	f7ff ffdf 	bl	8019928 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801996a:	b005      	add	sp, #20
 801996c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019970:	b001      	add	sp, #4
 8019972:	4770      	bx	lr

08019974 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019976:	4605      	mov	r5, r0
 8019978:	4608      	mov	r0, r1
 801997a:	b1f1      	cbz	r1, 80199ba <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801997c:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8019980:	460b      	mov	r3, r1
 8019982:	f101 0708 	add.w	r7, r1, #8
 8019986:	4622      	mov	r2, r4
 8019988:	6818      	ldr	r0, [r3, #0]
 801998a:	3308      	adds	r3, #8
 801998c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019990:	4626      	mov	r6, r4
 8019992:	42bb      	cmp	r3, r7
 8019994:	c603      	stmia	r6!, {r0, r1}
 8019996:	4634      	mov	r4, r6
 8019998:	d1f6      	bne.n	8019988 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801999a:	6818      	ldr	r0, [r3, #0]
 801999c:	6030      	str	r0, [r6, #0]
 801999e:	4610      	mov	r0, r2
 80199a0:	889b      	ldrh	r3, [r3, #4]
 80199a2:	80b3      	strh	r3, [r6, #4]
 80199a4:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80199a8:	015b      	lsls	r3, r3, #5
 80199aa:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80199ae:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80199b2:	430b      	orrs	r3, r1
 80199b4:	425b      	negs	r3, r3
 80199b6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80199ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080199bc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80199bc:	b538      	push	{r3, r4, r5, lr}
 80199be:	460c      	mov	r4, r1
 80199c0:	6811      	ldr	r1, [r2, #0]
 80199c2:	4610      	mov	r0, r2
 80199c4:	68cd      	ldr	r5, [r1, #12]
 80199c6:	4619      	mov	r1, r3
 80199c8:	47a8      	blx	r5
 80199ca:	2800      	cmp	r0, #0
 80199cc:	bf08      	it	eq
 80199ce:	4620      	moveq	r0, r4
 80199d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080199d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80199d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199d6:	4604      	mov	r4, r0
 80199d8:	4615      	mov	r5, r2
 80199da:	4608      	mov	r0, r1
 80199dc:	b93a      	cbnz	r2, 80199ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80199de:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80199e2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80199e6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80199ea:	4628      	mov	r0, r5
 80199ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199ee:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80199f2:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80199f6:	8893      	ldrh	r3, [r2, #4]
 80199f8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80199fc:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019a00:	79ee      	ldrb	r6, [r5, #7]
 8019a02:	4316      	orrs	r6, r2
 8019a04:	19da      	adds	r2, r3, r7
 8019a06:	b291      	uxth	r1, r2
 8019a08:	b2b7      	uxth	r7, r6
 8019a0a:	291d      	cmp	r1, #29
 8019a0c:	d87b      	bhi.n	8019b06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8019a0e:	2201      	movs	r2, #1
 8019a10:	10f6      	asrs	r6, r6, #3
 8019a12:	408a      	lsls	r2, r1
 8019a14:	4974      	ldr	r1, [pc, #464]	; (8019be8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8019a16:	420a      	tst	r2, r1
 8019a18:	d12e      	bne.n	8019a78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8019a1a:	f412 7f60 	tst.w	r2, #896	; 0x380
 8019a1e:	d072      	beq.n	8019b06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8019a20:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8019a24:	462b      	mov	r3, r5
 8019a26:	f105 0e08 	add.w	lr, r5, #8
 8019a2a:	4615      	mov	r5, r2
 8019a2c:	6818      	ldr	r0, [r3, #0]
 8019a2e:	3308      	adds	r3, #8
 8019a30:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019a34:	4694      	mov	ip, r2
 8019a36:	4573      	cmp	r3, lr
 8019a38:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8019a3c:	4662      	mov	r2, ip
 8019a3e:	d1f5      	bne.n	8019a2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8019a40:	6818      	ldr	r0, [r3, #0]
 8019a42:	f8cc 0000 	str.w	r0, [ip]
 8019a46:	889b      	ldrh	r3, [r3, #4]
 8019a48:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019a4c:	b2b3      	uxth	r3, r6
 8019a4e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8019a52:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8019a56:	1aca      	subs	r2, r1, r3
 8019a58:	1bcf      	subs	r7, r1, r7
 8019a5a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8019a5e:	b292      	uxth	r2, r2
 8019a60:	1afb      	subs	r3, r7, r3
 8019a62:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8019a66:	10d2      	asrs	r2, r2, #3
 8019a68:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8019a6c:	4302      	orrs	r2, r0
 8019a6e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8019a72:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019a76:	e7b8      	b.n	80199ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019a78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019a7a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019a7e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8019a80:	f640 6333 	movw	r3, #3635	; 0xe33
 8019a84:	4299      	cmp	r1, r3
 8019a86:	d110      	bne.n	8019aaa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8019a88:	6803      	ldr	r3, [r0, #0]
 8019a8a:	68db      	ldr	r3, [r3, #12]
 8019a8c:	4798      	blx	r3
 8019a8e:	7b41      	ldrb	r1, [r0, #13]
 8019a90:	00cb      	lsls	r3, r1, #3
 8019a92:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019a96:	7a03      	ldrb	r3, [r0, #8]
 8019a98:	0648      	lsls	r0, r1, #25
 8019a9a:	ea43 0302 	orr.w	r3, r3, r2
 8019a9e:	bf44      	itt	mi
 8019aa0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019aa4:	b21b      	sxthmi	r3, r3
 8019aa6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019aaa:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8019aae:	462a      	mov	r2, r5
 8019ab0:	f105 0c08 	add.w	ip, r5, #8
 8019ab4:	443b      	add	r3, r7
 8019ab6:	4433      	add	r3, r6
 8019ab8:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8019abc:	b29b      	uxth	r3, r3
 8019abe:	4635      	mov	r5, r6
 8019ac0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019ac4:	6810      	ldr	r0, [r2, #0]
 8019ac6:	3208      	adds	r2, #8
 8019ac8:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8019acc:	4637      	mov	r7, r6
 8019ace:	4562      	cmp	r2, ip
 8019ad0:	c703      	stmia	r7!, {r0, r1}
 8019ad2:	463e      	mov	r6, r7
 8019ad4:	d1f6      	bne.n	8019ac4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8019ad6:	6810      	ldr	r0, [r2, #0]
 8019ad8:	6038      	str	r0, [r7, #0]
 8019ada:	8892      	ldrh	r2, [r2, #4]
 8019adc:	80ba      	strh	r2, [r7, #4]
 8019ade:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019ae2:	10db      	asrs	r3, r3, #3
 8019ae4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019ae8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019aec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019af0:	4313      	orrs	r3, r2
 8019af2:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8019af6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019afa:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8019afe:	1a9b      	subs	r3, r3, r2
 8019b00:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019b04:	e771      	b.n	80199ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019b06:	f023 0204 	bic.w	r2, r3, #4
 8019b0a:	f640 611b 	movw	r1, #3611	; 0xe1b
 8019b0e:	428a      	cmp	r2, r1
 8019b10:	d003      	beq.n	8019b1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8019b12:	f640 621d 	movw	r2, #3613	; 0xe1d
 8019b16:	4293      	cmp	r3, r2
 8019b18:	d120      	bne.n	8019b5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8019b1a:	3b01      	subs	r3, #1
 8019b1c:	4602      	mov	r2, r0
 8019b1e:	4629      	mov	r1, r5
 8019b20:	4620      	mov	r0, r4
 8019b22:	b29b      	uxth	r3, r3
 8019b24:	f7ff ff4a 	bl	80199bc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019b28:	7b41      	ldrb	r1, [r0, #13]
 8019b2a:	00cb      	lsls	r3, r1, #3
 8019b2c:	0649      	lsls	r1, r1, #25
 8019b2e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019b32:	7a03      	ldrb	r3, [r0, #8]
 8019b34:	ea43 0302 	orr.w	r3, r3, r2
 8019b38:	bf44      	itt	mi
 8019b3a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019b3e:	b21b      	sxthmi	r3, r3
 8019b40:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019b44:	7b6b      	ldrb	r3, [r5, #13]
 8019b46:	7aaa      	ldrb	r2, [r5, #10]
 8019b48:	005b      	lsls	r3, r3, #1
 8019b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b4e:	4313      	orrs	r3, r2
 8019b50:	115a      	asrs	r2, r3, #5
 8019b52:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019b56:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019b5a:	e035      	b.n	8019bc8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8019b5c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019b60:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8019b64:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8019b68:	7a2a      	ldrb	r2, [r5, #8]
 8019b6a:	ea42 0201 	orr.w	r2, r2, r1
 8019b6e:	f640 6109 	movw	r1, #3593	; 0xe09
 8019b72:	bf1c      	itt	ne
 8019b74:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8019b78:	b212      	sxthne	r2, r2
 8019b7a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019b7e:	f023 0210 	bic.w	r2, r3, #16
 8019b82:	428a      	cmp	r2, r1
 8019b84:	d003      	beq.n	8019b8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8019b86:	f640 6213 	movw	r2, #3603	; 0xe13
 8019b8a:	4293      	cmp	r3, r2
 8019b8c:	d129      	bne.n	8019be2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8019b8e:	7b6e      	ldrb	r6, [r5, #13]
 8019b90:	4629      	mov	r1, r5
 8019b92:	0076      	lsls	r6, r6, #1
 8019b94:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019b98:	7aae      	ldrb	r6, [r5, #10]
 8019b9a:	4316      	orrs	r6, r2
 8019b9c:	f640 6213 	movw	r2, #3603	; 0xe13
 8019ba0:	4293      	cmp	r3, r2
 8019ba2:	4602      	mov	r2, r0
 8019ba4:	4620      	mov	r0, r4
 8019ba6:	bf16      	itet	ne
 8019ba8:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019bac:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019bb0:	b29b      	uxthne	r3, r3
 8019bb2:	f7ff ff03 	bl	80199bc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019bb6:	7b43      	ldrb	r3, [r0, #13]
 8019bb8:	7a82      	ldrb	r2, [r0, #10]
 8019bba:	005b      	lsls	r3, r3, #1
 8019bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019bc0:	4313      	orrs	r3, r2
 8019bc2:	1af6      	subs	r6, r6, r3
 8019bc4:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8019bc8:	7b69      	ldrb	r1, [r5, #13]
 8019bca:	00cb      	lsls	r3, r1, #3
 8019bcc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019bd0:	7a2b      	ldrb	r3, [r5, #8]
 8019bd2:	4313      	orrs	r3, r2
 8019bd4:	064a      	lsls	r2, r1, #25
 8019bd6:	bf44      	itt	mi
 8019bd8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019bdc:	b21b      	sxthmi	r3, r3
 8019bde:	1bdb      	subs	r3, r3, r7
 8019be0:	e747      	b.n	8019a72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8019be2:	2300      	movs	r3, #0
 8019be4:	e7b7      	b.n	8019b56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8019be6:	bf00      	nop
 8019be8:	3fc00079 	.word	0x3fc00079

08019bec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019bf0:	4604      	mov	r4, r0
 8019bf2:	b942      	cbnz	r2, 8019c06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019bf8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8019bfc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8019c00:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019c04:	e047      	b.n	8019c96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019c06:	7b51      	ldrb	r1, [r2, #13]
 8019c08:	8893      	ldrh	r3, [r2, #4]
 8019c0a:	010d      	lsls	r5, r1, #4
 8019c0c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8019c10:	79d5      	ldrb	r5, [r2, #7]
 8019c12:	4305      	orrs	r5, r0
 8019c14:	2d04      	cmp	r5, #4
 8019c16:	bfcc      	ite	gt
 8019c18:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8019c1c:	f04f 0e01 	movle.w	lr, #1
 8019c20:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019c24:	f200 80ab 	bhi.w	8019d7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8019c28:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8019c2c:	4283      	cmp	r3, r0
 8019c2e:	d216      	bcs.n	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019c30:	f240 605b 	movw	r0, #1627	; 0x65b
 8019c34:	4283      	cmp	r3, r0
 8019c36:	d859      	bhi.n	8019cec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8019c38:	f240 6057 	movw	r0, #1623	; 0x657
 8019c3c:	4283      	cmp	r3, r0
 8019c3e:	d20e      	bcs.n	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019c40:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019c44:	d24a      	bcs.n	8019cdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8019c46:	f240 604e 	movw	r0, #1614	; 0x64e
 8019c4a:	4283      	cmp	r3, r0
 8019c4c:	d207      	bcs.n	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019c4e:	f240 601a 	movw	r0, #1562	; 0x61a
 8019c52:	4283      	cmp	r3, r0
 8019c54:	d02a      	beq.n	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019c56:	d821      	bhi.n	8019c9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019c58:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019c5c:	d35b      	bcc.n	8019d16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019c5e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8019c62:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019c66:	f040 80d0 	bne.w	8019e0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019c6a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8019c6e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019c72:	f040 80ca 	bne.w	8019e0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019c76:	00cb      	lsls	r3, r1, #3
 8019c78:	0649      	lsls	r1, r1, #25
 8019c7a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019c7e:	7a13      	ldrb	r3, [r2, #8]
 8019c80:	ea43 0300 	orr.w	r3, r3, r0
 8019c84:	bf44      	itt	mi
 8019c86:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019c8a:	b21b      	sxthmi	r3, r3
 8019c8c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019c90:	1b5d      	subs	r5, r3, r5
 8019c92:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019c96:	4610      	mov	r0, r2
 8019c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c9c:	f240 604b 	movw	r0, #1611	; 0x64b
 8019ca0:	4283      	cmp	r3, r0
 8019ca2:	d338      	bcc.n	8019d16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019ca4:	f240 604c 	movw	r0, #1612	; 0x64c
 8019ca8:	4283      	cmp	r3, r0
 8019caa:	d9d8      	bls.n	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019cac:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8019cb0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8019cb4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019cb8:	f040 80f3 	bne.w	8019ea2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019cbc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019cc0:	f040 80ef 	bne.w	8019ea2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019cc4:	00cb      	lsls	r3, r1, #3
 8019cc6:	064e      	lsls	r6, r1, #25
 8019cc8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019ccc:	7a13      	ldrb	r3, [r2, #8]
 8019cce:	ea43 0300 	orr.w	r3, r3, r0
 8019cd2:	bf44      	itt	mi
 8019cd4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019cd8:	b21b      	sxthmi	r3, r3
 8019cda:	e7d9      	b.n	8019c90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8019cdc:	f240 6054 	movw	r0, #1620	; 0x654
 8019ce0:	4283      	cmp	r3, r0
 8019ce2:	d8e3      	bhi.n	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019ce4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019ce8:	d9e0      	bls.n	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019cea:	e7b8      	b.n	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019cec:	f240 6074 	movw	r0, #1652	; 0x674
 8019cf0:	4283      	cmp	r3, r0
 8019cf2:	d0b4      	beq.n	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019cf4:	d82d      	bhi.n	8019d52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8019cf6:	f240 605e 	movw	r0, #1630	; 0x65e
 8019cfa:	4283      	cmp	r3, r0
 8019cfc:	d804      	bhi.n	8019d08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8019cfe:	f240 605d 	movw	r0, #1629	; 0x65d
 8019d02:	4283      	cmp	r3, r0
 8019d04:	d3d2      	bcc.n	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019d06:	e7aa      	b.n	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d08:	f240 605f 	movw	r0, #1631	; 0x65f
 8019d0c:	4283      	cmp	r3, r0
 8019d0e:	d0cd      	beq.n	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019d10:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8019d14:	d0a3      	beq.n	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d16:	00cb      	lsls	r3, r1, #3
 8019d18:	0649      	lsls	r1, r1, #25
 8019d1a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019d1e:	7a13      	ldrb	r3, [r2, #8]
 8019d20:	ea43 0300 	orr.w	r3, r3, r0
 8019d24:	bf44      	itt	mi
 8019d26:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019d2a:	b21b      	sxthmi	r3, r3
 8019d2c:	1b5d      	subs	r5, r3, r5
 8019d2e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019d32:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019d36:	7b53      	ldrb	r3, [r2, #13]
 8019d38:	015b      	lsls	r3, r3, #5
 8019d3a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019d3e:	7993      	ldrb	r3, [r2, #6]
 8019d40:	430b      	orrs	r3, r1
 8019d42:	2105      	movs	r1, #5
 8019d44:	005b      	lsls	r3, r3, #1
 8019d46:	fb93 f3f1 	sdiv	r3, r3, r1
 8019d4a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019d4e:	440b      	add	r3, r1
 8019d50:	e756      	b.n	8019c00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8019d52:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8019d56:	4283      	cmp	r3, r0
 8019d58:	d809      	bhi.n	8019d6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8019d5a:	f240 60df 	movw	r0, #1759	; 0x6df
 8019d5e:	4283      	cmp	r3, r0
 8019d60:	f4bf af7d 	bcs.w	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d64:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8019d68:	2b05      	cmp	r3, #5
 8019d6a:	d8d4      	bhi.n	8019d16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019d6c:	e777      	b.n	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d6e:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8019d72:	4283      	cmp	r3, r0
 8019d74:	d09a      	beq.n	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019d76:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8019d7a:	4283      	cmp	r3, r0
 8019d7c:	e7ca      	b.n	8019d14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019d7e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8019d82:	d22b      	bcs.n	8019ddc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019d84:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8019d88:	4283      	cmp	r3, r0
 8019d8a:	d28f      	bcs.n	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019d8c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019d90:	4283      	cmp	r3, r0
 8019d92:	d816      	bhi.n	8019dc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019d94:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8019d98:	4283      	cmp	r3, r0
 8019d9a:	f4bf af60 	bcs.w	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d9e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8019da2:	4283      	cmp	r3, r0
 8019da4:	d80a      	bhi.n	8019dbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8019da6:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8019daa:	4283      	cmp	r3, r0
 8019dac:	f4bf af57 	bcs.w	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019db0:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8019db4:	4283      	cmp	r3, r0
 8019db6:	f43f af79 	beq.w	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019dba:	e7ac      	b.n	8019d16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019dbc:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8019dc0:	e7f8      	b.n	8019db4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8019dc2:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8019dc6:	4283      	cmp	r3, r0
 8019dc8:	d802      	bhi.n	8019dd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8019dca:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019dce:	e798      	b.n	8019d02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019dd0:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8019dd4:	4283      	cmp	r3, r0
 8019dd6:	f47f af42 	bne.w	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019dda:	e767      	b.n	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019ddc:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8019de0:	4283      	cmp	r3, r0
 8019de2:	f43f af63 	beq.w	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019de6:	d802      	bhi.n	8019dee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8019de8:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8019dec:	e7f2      	b.n	8019dd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8019dee:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8019df2:	4283      	cmp	r3, r0
 8019df4:	d805      	bhi.n	8019e02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8019df6:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8019dfa:	4283      	cmp	r3, r0
 8019dfc:	f4ff af2f 	bcc.w	8019c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019e00:	e754      	b.n	8019cac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019e02:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8019e06:	4283      	cmp	r3, r0
 8019e08:	e7af      	b.n	8019d6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8019e0a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8019e0e:	4617      	mov	r7, r2
 8019e10:	f102 0808 	add.w	r8, r2, #8
 8019e14:	4666      	mov	r6, ip
 8019e16:	6838      	ldr	r0, [r7, #0]
 8019e18:	3708      	adds	r7, #8
 8019e1a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019e1e:	46e6      	mov	lr, ip
 8019e20:	4547      	cmp	r7, r8
 8019e22:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019e26:	46f4      	mov	ip, lr
 8019e28:	d1f5      	bne.n	8019e16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8019e2a:	6838      	ldr	r0, [r7, #0]
 8019e2c:	f8ce 0000 	str.w	r0, [lr]
 8019e30:	88b9      	ldrh	r1, [r7, #4]
 8019e32:	f8ae 1004 	strh.w	r1, [lr, #4]
 8019e36:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019e3a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019e3e:	d009      	beq.n	8019e54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8019e40:	7b51      	ldrb	r1, [r2, #13]
 8019e42:	7992      	ldrb	r2, [r2, #6]
 8019e44:	0149      	lsls	r1, r1, #5
 8019e46:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019e4a:	4311      	orrs	r1, r2
 8019e4c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019e50:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019e54:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019e58:	b2ad      	uxth	r5, r5
 8019e5a:	d00d      	beq.n	8019e78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8019e5c:	442b      	add	r3, r5
 8019e5e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019e68:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019e6c:	10db      	asrs	r3, r3, #3
 8019e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019e72:	4313      	orrs	r3, r2
 8019e74:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019e78:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019e7c:	00cb      	lsls	r3, r1, #3
 8019e7e:	064f      	lsls	r7, r1, #25
 8019e80:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019e84:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8019e88:	ea43 0302 	orr.w	r3, r3, r2
 8019e8c:	bf44      	itt	mi
 8019e8e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019e92:	b21b      	sxthmi	r3, r3
 8019e94:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019e98:	1b5b      	subs	r3, r3, r5
 8019e9a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019e9e:	4632      	mov	r2, r6
 8019ea0:	e6f9      	b.n	8019c96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019ea2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8019ea6:	4617      	mov	r7, r2
 8019ea8:	f102 0908 	add.w	r9, r2, #8
 8019eac:	4666      	mov	r6, ip
 8019eae:	6838      	ldr	r0, [r7, #0]
 8019eb0:	3708      	adds	r7, #8
 8019eb2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019eb6:	46e0      	mov	r8, ip
 8019eb8:	454f      	cmp	r7, r9
 8019eba:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019ebe:	46c4      	mov	ip, r8
 8019ec0:	d1f5      	bne.n	8019eae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8019ec2:	6838      	ldr	r0, [r7, #0]
 8019ec4:	f8c8 0000 	str.w	r0, [r8]
 8019ec8:	88b9      	ldrh	r1, [r7, #4]
 8019eca:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019ece:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019ed2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019ed6:	d009      	beq.n	8019eec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8019ed8:	7b51      	ldrb	r1, [r2, #13]
 8019eda:	7992      	ldrb	r2, [r2, #6]
 8019edc:	0149      	lsls	r1, r1, #5
 8019ede:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019ee2:	4311      	orrs	r1, r2
 8019ee4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019ee8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019eec:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019ef0:	d00e      	beq.n	8019f10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8019ef2:	eba3 030e 	sub.w	r3, r3, lr
 8019ef6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019efa:	b29b      	uxth	r3, r3
 8019efc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019f00:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019f04:	10db      	asrs	r3, r3, #3
 8019f06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019f0a:	4313      	orrs	r3, r2
 8019f0c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019f10:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019f14:	00cb      	lsls	r3, r1, #3
 8019f16:	0648      	lsls	r0, r1, #25
 8019f18:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019f1c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8019f20:	ea43 0302 	orr.w	r3, r3, r2
 8019f24:	bf44      	itt	mi
 8019f26:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019f2a:	b21b      	sxthmi	r3, r3
 8019f2c:	1b5d      	subs	r5, r3, r5
 8019f2e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019f32:	e7b4      	b.n	8019e9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08019f34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f38:	461e      	mov	r6, r3
 8019f3a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019f3c:	4604      	mov	r4, r0
 8019f3e:	4617      	mov	r7, r2
 8019f40:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019f44:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019f48:	f7ea fa5e 	bl	8004408 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019f4c:	4605      	mov	r5, r0
 8019f4e:	b918      	cbnz	r0, 8019f58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8019f50:	6030      	str	r0, [r6, #0]
 8019f52:	4628      	mov	r0, r5
 8019f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	4601      	mov	r1, r0
 8019f5c:	4638      	mov	r0, r7
 8019f5e:	68db      	ldr	r3, [r3, #12]
 8019f60:	4798      	blx	r3
 8019f62:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019f66:	4602      	mov	r2, r0
 8019f68:	6030      	str	r0, [r6, #0]
 8019f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019f6e:	d213      	bcs.n	8019f98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8019f70:	4643      	mov	r3, r8
 8019f72:	4639      	mov	r1, r7
 8019f74:	4620      	mov	r0, r4
 8019f76:	f7ff fe39 	bl	8019bec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019f7a:	6030      	str	r0, [r6, #0]
 8019f7c:	6833      	ldr	r3, [r6, #0]
 8019f7e:	b143      	cbz	r3, 8019f92 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019f80:	7b5a      	ldrb	r2, [r3, #13]
 8019f82:	7a9b      	ldrb	r3, [r3, #10]
 8019f84:	0052      	lsls	r2, r2, #1
 8019f86:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019f8a:	4313      	orrs	r3, r2
 8019f8c:	bf0c      	ite	eq
 8019f8e:	2301      	moveq	r3, #1
 8019f90:	2300      	movne	r3, #0
 8019f92:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8019f96:	e7dc      	b.n	8019f52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8019f98:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019f9c:	b29b      	uxth	r3, r3
 8019f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8019fa0:	d804      	bhi.n	8019fac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019fa2:	4639      	mov	r1, r7
 8019fa4:	4620      	mov	r0, r4
 8019fa6:	f7ff fd15 	bl	80199d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019faa:	e7e6      	b.n	8019f7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019fac:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d0e3      	beq.n	8019f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019fb4:	f640 1302 	movw	r3, #2306	; 0x902
 8019fb8:	429d      	cmp	r5, r3
 8019fba:	d1df      	bne.n	8019f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019fbc:	4601      	mov	r1, r0
 8019fbe:	4620      	mov	r0, r4
 8019fc0:	f7ff fcd8 	bl	8019974 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019fc4:	e7d9      	b.n	8019f7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08019fc6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8019fc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fca:	461e      	mov	r6, r3
 8019fcc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019fce:	4604      	mov	r4, r0
 8019fd0:	4617      	mov	r7, r2
 8019fd2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019fd6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019fda:	f7ea fa15 	bl	8004408 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019fde:	4605      	mov	r5, r0
 8019fe0:	b918      	cbnz	r0, 8019fea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8019fe2:	6030      	str	r0, [r6, #0]
 8019fe4:	4628      	mov	r0, r5
 8019fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fea:	683b      	ldr	r3, [r7, #0]
 8019fec:	4601      	mov	r1, r0
 8019fee:	4638      	mov	r0, r7
 8019ff0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019ff4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019ff8:	47c8      	blx	r9
 8019ffa:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019ffe:	4602      	mov	r2, r0
 801a000:	6030      	str	r0, [r6, #0]
 801a002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801a006:	d213      	bcs.n	801a030 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801a008:	4643      	mov	r3, r8
 801a00a:	4639      	mov	r1, r7
 801a00c:	4620      	mov	r0, r4
 801a00e:	f7ff fded 	bl	8019bec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a012:	6030      	str	r0, [r6, #0]
 801a014:	6833      	ldr	r3, [r6, #0]
 801a016:	b143      	cbz	r3, 801a02a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801a018:	7b5a      	ldrb	r2, [r3, #13]
 801a01a:	7a9b      	ldrb	r3, [r3, #10]
 801a01c:	0052      	lsls	r2, r2, #1
 801a01e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a022:	4313      	orrs	r3, r2
 801a024:	bf0c      	ite	eq
 801a026:	2301      	moveq	r3, #1
 801a028:	2300      	movne	r3, #0
 801a02a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801a02e:	e7d9      	b.n	8019fe4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801a030:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801a034:	b29b      	uxth	r3, r3
 801a036:	2b7f      	cmp	r3, #127	; 0x7f
 801a038:	d804      	bhi.n	801a044 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801a03a:	4639      	mov	r1, r7
 801a03c:	4620      	mov	r0, r4
 801a03e:	f7ff fcc9 	bl	80199d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a042:	e7e6      	b.n	801a012 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801a044:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d0e3      	beq.n	801a014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a04c:	f640 1302 	movw	r3, #2306	; 0x902
 801a050:	429d      	cmp	r5, r3
 801a052:	d1df      	bne.n	801a014 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a054:	4601      	mov	r1, r0
 801a056:	4620      	mov	r0, r4
 801a058:	f7ff fc8c 	bl	8019974 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a05c:	e7d9      	b.n	801a012 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801a05e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a05e:	b510      	push	{r4, lr}
 801a060:	4604      	mov	r4, r0
 801a062:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801a066:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a068:	b1e1      	cbz	r1, 801a0a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a06a:	2b0a      	cmp	r3, #10
 801a06c:	d02d      	beq.n	801a0ca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801a06e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801a070:	3901      	subs	r1, #1
 801a072:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801a076:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801a078:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801a07c:	1c51      	adds	r1, r2, #1
 801a07e:	b289      	uxth	r1, r1
 801a080:	2901      	cmp	r1, #1
 801a082:	bf8a      	itet	hi
 801a084:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a088:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801a08a:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801a08c:	1c5a      	adds	r2, r3, #1
 801a08e:	8722      	strh	r2, [r4, #56]	; 0x38
 801a090:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a092:	4413      	add	r3, r2
 801a094:	b29b      	uxth	r3, r3
 801a096:	2b09      	cmp	r3, #9
 801a098:	bf88      	it	hi
 801a09a:	3b0a      	subhi	r3, #10
 801a09c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a0a0:	8458      	strh	r0, [r3, #34]	; 0x22
 801a0a2:	e7de      	b.n	801a062 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801a0a4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a0a6:	2b0a      	cmp	r3, #10
 801a0a8:	d00f      	beq.n	801a0ca <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801a0aa:	4620      	mov	r0, r4
 801a0ac:	f7ff fc10 	bl	80198d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a0b0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a0b2:	1c5a      	adds	r2, r3, #1
 801a0b4:	8722      	strh	r2, [r4, #56]	; 0x38
 801a0b6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a0b8:	4413      	add	r3, r2
 801a0ba:	b29b      	uxth	r3, r3
 801a0bc:	2b09      	cmp	r3, #9
 801a0be:	bf88      	it	hi
 801a0c0:	3b0a      	subhi	r3, #10
 801a0c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a0c6:	8458      	strh	r0, [r3, #34]	; 0x22
 801a0c8:	e7ec      	b.n	801a0a4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a0ca:	bd10      	pop	{r4, pc}

0801a0cc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a0cc:	b538      	push	{r3, r4, r5, lr}
 801a0ce:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a0d0:	4604      	mov	r4, r0
 801a0d2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801a0d6:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801a0d8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801a0da:	3a01      	subs	r2, #1
 801a0dc:	8702      	strh	r2, [r0, #56]	; 0x38
 801a0de:	1c5a      	adds	r2, r3, #1
 801a0e0:	b292      	uxth	r2, r2
 801a0e2:	2a09      	cmp	r2, #9
 801a0e4:	bf8a      	itet	hi
 801a0e6:	3b09      	subhi	r3, #9
 801a0e8:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801a0ea:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801a0ec:	f7ff ffb7 	bl	801a05e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a0f0:	8c23      	ldrh	r3, [r4, #32]
 801a0f2:	2b01      	cmp	r3, #1
 801a0f4:	bf9c      	itt	ls
 801a0f6:	3301      	addls	r3, #1
 801a0f8:	8423      	strhls	r3, [r4, #32]
 801a0fa:	8be3      	ldrh	r3, [r4, #30]
 801a0fc:	b90b      	cbnz	r3, 801a102 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801a0fe:	2302      	movs	r3, #2
 801a100:	83e3      	strh	r3, [r4, #30]
 801a102:	8be3      	ldrh	r3, [r4, #30]
 801a104:	4628      	mov	r0, r5
 801a106:	3b01      	subs	r3, #1
 801a108:	b29b      	uxth	r3, r3
 801a10a:	83e3      	strh	r3, [r4, #30]
 801a10c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a110:	8365      	strh	r5, [r4, #26]
 801a112:	bd38      	pop	{r3, r4, r5, pc}

0801a114 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a114:	428a      	cmp	r2, r1
 801a116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a11a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801a11c:	d932      	bls.n	801a184 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801a11e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801a120:	1a54      	subs	r4, r2, r1
 801a122:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801a126:	19ee      	adds	r6, r5, r7
 801a128:	fa1f fe84 	uxth.w	lr, r4
 801a12c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801a130:	3e01      	subs	r6, #1
 801a132:	b2b4      	uxth	r4, r6
 801a134:	eba4 090e 	sub.w	r9, r4, lr
 801a138:	fa1f f989 	uxth.w	r9, r9
 801a13c:	2c09      	cmp	r4, #9
 801a13e:	4626      	mov	r6, r4
 801a140:	bf88      	it	hi
 801a142:	f1a4 060a 	subhi.w	r6, r4, #10
 801a146:	f1bc 0f00 	cmp.w	ip, #0
 801a14a:	f104 34ff 	add.w	r4, r4, #4294967295
 801a14e:	bf08      	it	eq
 801a150:	f04f 0c02 	moveq.w	ip, #2
 801a154:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a158:	b2a4      	uxth	r4, r4
 801a15a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a15e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801a162:	454c      	cmp	r4, r9
 801a164:	fa1f fc8c 	uxth.w	ip, ip
 801a168:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801a16c:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801a170:	d1e4      	bne.n	801a13c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801a172:	eba5 050e 	sub.w	r5, r5, lr
 801a176:	eb0e 0408 	add.w	r4, lr, r8
 801a17a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801a17e:	8705      	strh	r5, [r0, #56]	; 0x38
 801a180:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801a184:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801a186:	250a      	movs	r5, #10
 801a188:	1a64      	subs	r4, r4, r1
 801a18a:	4439      	add	r1, r7
 801a18c:	b289      	uxth	r1, r1
 801a18e:	8704      	strh	r4, [r0, #56]	; 0x38
 801a190:	2909      	cmp	r1, #9
 801a192:	bf88      	it	hi
 801a194:	390a      	subhi	r1, #10
 801a196:	86c1      	strh	r1, [r0, #54]	; 0x36
 801a198:	b18a      	cbz	r2, 801a1be <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a19a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801a19c:	3a01      	subs	r2, #1
 801a19e:	3101      	adds	r1, #1
 801a1a0:	b292      	uxth	r2, r2
 801a1a2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801a1a6:	8701      	strh	r1, [r0, #56]	; 0x38
 801a1a8:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801a1aa:	b901      	cbnz	r1, 801a1ae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801a1ac:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a1ae:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801a1b0:	3901      	subs	r1, #1
 801a1b2:	b289      	uxth	r1, r1
 801a1b4:	86c1      	strh	r1, [r0, #54]	; 0x36
 801a1b6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a1ba:	844c      	strh	r4, [r1, #34]	; 0x22
 801a1bc:	e7ec      	b.n	801a198 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801a1be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1c2:	f7ff bf4c 	b.w	801a05e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801a1c6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a1c6:	b570      	push	{r4, r5, r6, lr}
 801a1c8:	2500      	movs	r5, #0
 801a1ca:	4295      	cmp	r5, r2
 801a1cc:	d011      	beq.n	801a1f2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801a1ce:	8bc4      	ldrh	r4, [r0, #30]
 801a1d0:	f831 6b02 	ldrh.w	r6, [r1], #2
 801a1d4:	4414      	add	r4, r2
 801a1d6:	3c01      	subs	r4, #1
 801a1d8:	1b64      	subs	r4, r4, r5
 801a1da:	b2a4      	uxth	r4, r4
 801a1dc:	2c01      	cmp	r4, #1
 801a1de:	bf88      	it	hi
 801a1e0:	3c02      	subhi	r4, #2
 801a1e2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a1e6:	8b64      	ldrh	r4, [r4, #26]
 801a1e8:	42b4      	cmp	r4, r6
 801a1ea:	d117      	bne.n	801a21c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801a1ec:	3501      	adds	r5, #1
 801a1ee:	b2ad      	uxth	r5, r5
 801a1f0:	e7eb      	b.n	801a1ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801a1f2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a1f6:	2400      	movs	r4, #0
 801a1f8:	4413      	add	r3, r2
 801a1fa:	b2a2      	uxth	r2, r4
 801a1fc:	429a      	cmp	r2, r3
 801a1fe:	da0f      	bge.n	801a220 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801a200:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801a202:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801a206:	3401      	adds	r4, #1
 801a208:	4432      	add	r2, r6
 801a20a:	b292      	uxth	r2, r2
 801a20c:	2a09      	cmp	r2, #9
 801a20e:	bf88      	it	hi
 801a210:	3a0a      	subhi	r2, #10
 801a212:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a216:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801a218:	42aa      	cmp	r2, r5
 801a21a:	d0ee      	beq.n	801a1fa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801a21c:	2000      	movs	r0, #0
 801a21e:	bd70      	pop	{r4, r5, r6, pc}
 801a220:	2001      	movs	r0, #1
 801a222:	e7fc      	b.n	801a21e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801a224 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a228:	4605      	mov	r5, r0
 801a22a:	4616      	mov	r6, r2
 801a22c:	1c8c      	adds	r4, r1, #2
 801a22e:	8809      	ldrh	r1, [r1, #0]
 801a230:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a234:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a238:	42b3      	cmp	r3, r6
 801a23a:	d124      	bne.n	801a286 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a23c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a240:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a244:	f001 070f 	and.w	r7, r1, #15
 801a248:	4652      	mov	r2, sl
 801a24a:	f8cd 8000 	str.w	r8, [sp]
 801a24e:	464b      	mov	r3, r9
 801a250:	4621      	mov	r1, r4
 801a252:	4628      	mov	r0, r5
 801a254:	f7ff ffb7 	bl	801a1c6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a258:	4683      	mov	fp, r0
 801a25a:	b168      	cbz	r0, 801a278 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a25c:	eb0a 0109 	add.w	r1, sl, r9
 801a260:	463a      	mov	r2, r7
 801a262:	4628      	mov	r0, r5
 801a264:	4441      	add	r1, r8
 801a266:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a26a:	4649      	mov	r1, r9
 801a26c:	f7ff ff52 	bl	801a114 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a270:	4658      	mov	r0, fp
 801a272:	b003      	add	sp, #12
 801a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a278:	eb07 010a 	add.w	r1, r7, sl
 801a27c:	4449      	add	r1, r9
 801a27e:	4441      	add	r1, r8
 801a280:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a284:	e7d2      	b.n	801a22c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a286:	f04f 0b00 	mov.w	fp, #0
 801a28a:	e7f1      	b.n	801a270 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a28c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a28c:	b570      	push	{r4, r5, r6, lr}
 801a28e:	8810      	ldrh	r0, [r2, #0]
 801a290:	4298      	cmp	r0, r3
 801a292:	d817      	bhi.n	801a2c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a294:	1e48      	subs	r0, r1, #1
 801a296:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a29a:	4298      	cmp	r0, r3
 801a29c:	d312      	bcc.n	801a2c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a29e:	2400      	movs	r4, #0
 801a2a0:	428c      	cmp	r4, r1
 801a2a2:	d20f      	bcs.n	801a2c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a2a4:	1860      	adds	r0, r4, r1
 801a2a6:	1040      	asrs	r0, r0, #1
 801a2a8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a2ac:	0085      	lsls	r5, r0, #2
 801a2ae:	42b3      	cmp	r3, r6
 801a2b0:	d902      	bls.n	801a2b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a2b2:	3001      	adds	r0, #1
 801a2b4:	b284      	uxth	r4, r0
 801a2b6:	e7f3      	b.n	801a2a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a2b8:	d201      	bcs.n	801a2be <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801a2ba:	b281      	uxth	r1, r0
 801a2bc:	e7f0      	b.n	801a2a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a2be:	442a      	add	r2, r5
 801a2c0:	8850      	ldrh	r0, [r2, #2]
 801a2c2:	bd70      	pop	{r4, r5, r6, pc}
 801a2c4:	2000      	movs	r0, #0
 801a2c6:	e7fc      	b.n	801a2c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801a2c8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2cc:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801a2ce:	4604      	mov	r4, r0
 801a2d0:	260b      	movs	r6, #11
 801a2d2:	886f      	ldrh	r7, [r5, #2]
 801a2d4:	087f      	lsrs	r7, r7, #1
 801a2d6:	3e01      	subs	r6, #1
 801a2d8:	d013      	beq.n	801a302 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a2da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a2dc:	462a      	mov	r2, r5
 801a2de:	4639      	mov	r1, r7
 801a2e0:	4620      	mov	r0, r4
 801a2e2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a2e6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a2ea:	4643      	mov	r3, r8
 801a2ec:	f7ff ffce 	bl	801a28c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a2f0:	b138      	cbz	r0, 801a302 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a2f2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a2f6:	4642      	mov	r2, r8
 801a2f8:	4620      	mov	r0, r4
 801a2fa:	f7ff ff93 	bl	801a224 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a2fe:	2800      	cmp	r0, #0
 801a300:	d1e9      	bne.n	801a2d6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801a302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801a308 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801a308:	b570      	push	{r4, r5, r6, lr}
 801a30a:	694a      	ldr	r2, [r1, #20]
 801a30c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a30e:	684b      	ldr	r3, [r1, #4]
 801a310:	1b54      	subs	r4, r2, r5
 801a312:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801a314:	f000 8106 	beq.w	801a524 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801a318:	1b9b      	subs	r3, r3, r6
 801a31a:	d003      	beq.n	801a324 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a31c:	4363      	muls	r3, r4
 801a31e:	2210      	movs	r2, #16
 801a320:	fb93 f3f2 	sdiv	r3, r3, r2
 801a324:	680c      	ldr	r4, [r1, #0]
 801a326:	698a      	ldr	r2, [r1, #24]
 801a328:	1b65      	subs	r5, r4, r5
 801a32a:	f000 80fd 	beq.w	801a528 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801a32e:	1b92      	subs	r2, r2, r6
 801a330:	d003      	beq.n	801a33a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a332:	436a      	muls	r2, r5
 801a334:	2410      	movs	r4, #16
 801a336:	fb92 f2f4 	sdiv	r2, r2, r4
 801a33a:	1a9b      	subs	r3, r3, r2
 801a33c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801a564 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801a340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a344:	460a      	mov	r2, r1
 801a346:	ee07 3a90 	vmov	s15, r3
 801a34a:	f100 040c 	add.w	r4, r0, #12
 801a34e:	4603      	mov	r3, r0
 801a350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a354:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a358:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801a35c:	eeb1 6a43 	vneg.f32	s12, s6
 801a360:	edd2 7a02 	vldr	s15, [r2, #8]
 801a364:	3214      	adds	r2, #20
 801a366:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a36a:	ece3 6a01 	vstmia	r3!, {s13}
 801a36e:	429c      	cmp	r4, r3
 801a370:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a374:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a378:	edc3 7a02 	vstr	s15, [r3, #8]
 801a37c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801a380:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a384:	edc3 7a05 	vstr	s15, [r3, #20]
 801a388:	d1ea      	bne.n	801a360 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801a38a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a38c:	698b      	ldr	r3, [r1, #24]
 801a38e:	edd0 4a02 	vldr	s9, [r0, #8]
 801a392:	1a9b      	subs	r3, r3, r2
 801a394:	edd0 3a00 	vldr	s7, [r0]
 801a398:	edd0 6a01 	vldr	s13, [r0, #4]
 801a39c:	ee07 3a90 	vmov	s15, r3
 801a3a0:	684b      	ldr	r3, [r1, #4]
 801a3a2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a3a6:	ed90 5a05 	vldr	s10, [r0, #20]
 801a3aa:	1a9b      	subs	r3, r3, r2
 801a3ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3b0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801a3b4:	ed90 2a03 	vldr	s4, [r0, #12]
 801a3b8:	ee07 3a10 	vmov	s14, r3
 801a3bc:	edd0 5a04 	vldr	s11, [r0, #16]
 801a3c0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a3c4:	ed90 1a07 	vldr	s2, [r0, #28]
 801a3c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3cc:	edd0 2a06 	vldr	s5, [r0, #24]
 801a3d0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a3d4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801a3d8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a3dc:	ee32 5a45 	vsub.f32	s10, s4, s10
 801a3e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a3e4:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a3e8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801a3ec:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a3ee:	694a      	ldr	r2, [r1, #20]
 801a3f0:	1b13      	subs	r3, r2, r4
 801a3f2:	ee07 3a10 	vmov	s14, r3
 801a3f6:	680b      	ldr	r3, [r1, #0]
 801a3f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3fc:	1b1b      	subs	r3, r3, r4
 801a3fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a402:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801a406:	ee07 3a10 	vmov	s14, r3
 801a40a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a40e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a412:	eee6 4a87 	vfma.f32	s9, s13, s14
 801a416:	ee64 4a86 	vmul.f32	s9, s9, s12
 801a41a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801a41e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a420:	698b      	ldr	r3, [r1, #24]
 801a422:	1a9b      	subs	r3, r3, r2
 801a424:	ee06 3a90 	vmov	s13, r3
 801a428:	684b      	ldr	r3, [r1, #4]
 801a42a:	1a9b      	subs	r3, r3, r2
 801a42c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a430:	ee07 3a10 	vmov	s14, r3
 801a434:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a438:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a43c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801a440:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a444:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a448:	ee66 6a83 	vmul.f32	s13, s13, s6
 801a44c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801a450:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a452:	694a      	ldr	r2, [r1, #20]
 801a454:	1b13      	subs	r3, r2, r4
 801a456:	ee07 3a10 	vmov	s14, r3
 801a45a:	680b      	ldr	r3, [r1, #0]
 801a45c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a460:	1b1b      	subs	r3, r3, r4
 801a462:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a466:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801a46a:	ee07 3a10 	vmov	s14, r3
 801a46e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a472:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a476:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a47a:	edd0 5a08 	vldr	s11, [r0, #32]
 801a47e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801a482:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801a486:	ee25 5a06 	vmul.f32	s10, s10, s12
 801a48a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801a48e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a490:	698b      	ldr	r3, [r1, #24]
 801a492:	1a9b      	subs	r3, r3, r2
 801a494:	ee07 3a10 	vmov	s14, r3
 801a498:	684b      	ldr	r3, [r1, #4]
 801a49a:	1a9b      	subs	r3, r3, r2
 801a49c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a4a0:	ee01 3a90 	vmov	s3, r3
 801a4a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a4a8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a4ac:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a4b0:	ee61 1a84 	vmul.f32	s3, s3, s8
 801a4b4:	eea1 7a21 	vfma.f32	s14, s2, s3
 801a4b8:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a4bc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a4c0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a4c2:	694a      	ldr	r2, [r1, #20]
 801a4c4:	1b13      	subs	r3, r2, r4
 801a4c6:	ee03 3a10 	vmov	s6, r3
 801a4ca:	680b      	ldr	r3, [r1, #0]
 801a4cc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a4d0:	1b1b      	subs	r3, r3, r4
 801a4d2:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a4d6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801a4da:	ee03 3a10 	vmov	s6, r3
 801a4de:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a4e2:	ee23 4a04 	vmul.f32	s8, s6, s8
 801a4e6:	eee1 5a04 	vfma.f32	s11, s2, s8
 801a4ea:	ee25 6a86 	vmul.f32	s12, s11, s12
 801a4ee:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801a4f2:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801a4f6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801a4fa:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a502:	dd13      	ble.n	801a52c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801a504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a508:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801a50c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a50e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801a512:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a51a:	dd15      	ble.n	801a548 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801a51c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a520:	6403      	str	r3, [r0, #64]	; 0x40
 801a522:	bd70      	pop	{r4, r5, r6, pc}
 801a524:	4623      	mov	r3, r4
 801a526:	e6fd      	b.n	801a324 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a528:	462a      	mov	r2, r5
 801a52a:	e706      	b.n	801a33a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a52c:	d502      	bpl.n	801a534 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801a52e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a532:	e7e9      	b.n	801a508 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801a534:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801a538:	eea3 2a85 	vfma.f32	s4, s7, s10
 801a53c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801a540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a544:	dade      	bge.n	801a504 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801a546:	e7f2      	b.n	801a52e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801a548:	d502      	bpl.n	801a550 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801a54a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a54e:	e7e7      	b.n	801a520 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801a550:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a554:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a558:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a560:	dadc      	bge.n	801a51c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801a562:	e7f2      	b.n	801a54a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a564:	3d800000 	.word	0x3d800000

0801a568 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a56c:	2714      	movs	r7, #20
 801a56e:	435f      	muls	r7, r3
 801a570:	eb02 0c07 	add.w	ip, r2, r7
 801a574:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801a578:	f115 0e0f 	adds.w	lr, r5, #15
 801a57c:	f100 80a2 	bmi.w	801a6c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a580:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801a584:	9c08      	ldr	r4, [sp, #32]
 801a586:	2614      	movs	r6, #20
 801a588:	f8c0 e014 	str.w	lr, [r0, #20]
 801a58c:	4366      	muls	r6, r4
 801a58e:	eb02 0806 	add.w	r8, r2, r6
 801a592:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a596:	f115 040f 	adds.w	r4, r5, #15
 801a59a:	f100 809f 	bmi.w	801a6dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801a59e:	1124      	asrs	r4, r4, #4
 801a5a0:	eba4 040e 	sub.w	r4, r4, lr
 801a5a4:	6184      	str	r4, [r0, #24]
 801a5a6:	2c00      	cmp	r4, #0
 801a5a8:	f000 808a 	beq.w	801a6c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801a5ac:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801a5b0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801a5b4:	5995      	ldr	r5, [r2, r6]
 801a5b6:	eba4 0809 	sub.w	r8, r4, r9
 801a5ba:	59d4      	ldr	r4, [r2, r7]
 801a5bc:	eba5 0a04 	sub.w	sl, r5, r4
 801a5c0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801a5c4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801a5c8:	fb0e fe05 	mul.w	lr, lr, r5
 801a5cc:	fb0a ee19 	mls	lr, sl, r9, lr
 801a5d0:	fb08 e404 	mla	r4, r8, r4, lr
 801a5d4:	3c01      	subs	r4, #1
 801a5d6:	19a4      	adds	r4, r4, r6
 801a5d8:	f100 808c 	bmi.w	801a6f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801a5dc:	fb94 fef6 	sdiv	lr, r4, r6
 801a5e0:	fb06 441e 	mls	r4, r6, lr, r4
 801a5e4:	f8c0 e000 	str.w	lr, [r0]
 801a5e8:	6104      	str	r4, [r0, #16]
 801a5ea:	2d00      	cmp	r5, #0
 801a5ec:	f2c0 8095 	blt.w	801a71a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a5f0:	fb95 f4f6 	sdiv	r4, r5, r6
 801a5f4:	fb06 5514 	mls	r5, r6, r4, r5
 801a5f8:	6044      	str	r4, [r0, #4]
 801a5fa:	6085      	str	r5, [r0, #8]
 801a5fc:	60c6      	str	r6, [r0, #12]
 801a5fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a602:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a606:	6945      	ldr	r5, [r0, #20]
 801a608:	59d2      	ldr	r2, [r2, r7]
 801a60a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a60e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801a73c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a612:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a616:	ee07 4a10 	vmov	s14, r4
 801a61a:	6804      	ldr	r4, [r0, #0]
 801a61c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a620:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a624:	ee07 2a90 	vmov	s15, r2
 801a628:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a62c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a630:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a634:	edd3 6a00 	vldr	s13, [r3]
 801a638:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a63c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801a640:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a644:	edc0 6a07 	vstr	s13, [r0, #28]
 801a648:	edd0 6a01 	vldr	s13, [r0, #4]
 801a64c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801a650:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a654:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a658:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a65c:	ed80 6a08 	vstr	s12, [r0, #32]
 801a660:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801a662:	6242      	str	r2, [r0, #36]	; 0x24
 801a664:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801a668:	ed93 6a03 	vldr	s12, [r3, #12]
 801a66c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a670:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a674:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a678:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801a67c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a680:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801a684:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a688:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801a68c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a68e:	6302      	str	r2, [r0, #48]	; 0x30
 801a690:	ed93 6a06 	vldr	s12, [r3, #24]
 801a694:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801a698:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a69c:	eeb0 7a46 	vmov.f32	s14, s12
 801a6a0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801a6a4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a6a8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a6ac:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801a6b0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801a6b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a6b8:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801a6bc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801a6be:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6c4:	2410      	movs	r4, #16
 801a6c6:	f1c5 0501 	rsb	r5, r5, #1
 801a6ca:	fb9e fef4 	sdiv	lr, lr, r4
 801a6ce:	f015 050f 	ands.w	r5, r5, #15
 801a6d2:	bf18      	it	ne
 801a6d4:	2501      	movne	r5, #1
 801a6d6:	ebae 0e05 	sub.w	lr, lr, r5
 801a6da:	e753      	b.n	801a584 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a6dc:	f04f 0910 	mov.w	r9, #16
 801a6e0:	f1c5 0501 	rsb	r5, r5, #1
 801a6e4:	fb94 f4f9 	sdiv	r4, r4, r9
 801a6e8:	f015 050f 	ands.w	r5, r5, #15
 801a6ec:	bf18      	it	ne
 801a6ee:	2501      	movne	r5, #1
 801a6f0:	1b64      	subs	r4, r4, r5
 801a6f2:	e755      	b.n	801a5a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a6f4:	4264      	negs	r4, r4
 801a6f6:	fb94 fef6 	sdiv	lr, r4, r6
 801a6fa:	f1ce 0800 	rsb	r8, lr, #0
 801a6fe:	fb06 441e 	mls	r4, r6, lr, r4
 801a702:	f8c0 8000 	str.w	r8, [r0]
 801a706:	6104      	str	r4, [r0, #16]
 801a708:	2c00      	cmp	r4, #0
 801a70a:	f43f af6e 	beq.w	801a5ea <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a70e:	ea6f 0e0e 	mvn.w	lr, lr
 801a712:	1b34      	subs	r4, r6, r4
 801a714:	f8c0 e000 	str.w	lr, [r0]
 801a718:	e766      	b.n	801a5e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a71a:	426d      	negs	r5, r5
 801a71c:	fb95 f4f6 	sdiv	r4, r5, r6
 801a720:	f1c4 0e00 	rsb	lr, r4, #0
 801a724:	fb06 5514 	mls	r5, r6, r4, r5
 801a728:	f8c0 e004 	str.w	lr, [r0, #4]
 801a72c:	6085      	str	r5, [r0, #8]
 801a72e:	2d00      	cmp	r5, #0
 801a730:	f43f af64 	beq.w	801a5fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a734:	43e4      	mvns	r4, r4
 801a736:	1b75      	subs	r5, r6, r5
 801a738:	6044      	str	r4, [r0, #4]
 801a73a:	e75e      	b.n	801a5fa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a73c:	3d800000 	.word	0x3d800000

0801a740 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a740:	4602      	mov	r2, r0
 801a742:	b148      	cbz	r0, 801a758 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a744:	2300      	movs	r3, #0
 801a746:	b298      	uxth	r0, r3
 801a748:	3301      	adds	r3, #1
 801a74a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a74e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a752:	2900      	cmp	r1, #0
 801a754:	d1f7      	bne.n	801a746 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a756:	4770      	bx	lr
 801a758:	4770      	bx	lr

0801a75a <_ZN8touchgfx7Unicode7strncpyEPtPKtt>:
 801a75a:	b530      	push	{r4, r5, lr}
 801a75c:	4604      	mov	r4, r0
 801a75e:	b161      	cbz	r1, 801a77a <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x20>
 801a760:	b150      	cbz	r0, 801a778 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801a762:	2300      	movs	r3, #0
 801a764:	b298      	uxth	r0, r3
 801a766:	4290      	cmp	r0, r2
 801a768:	d206      	bcs.n	801a778 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801a76a:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 801a76e:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a772:	3301      	adds	r3, #1
 801a774:	2d00      	cmp	r5, #0
 801a776:	d1f5      	bne.n	801a764 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0xa>
 801a778:	bd30      	pop	{r4, r5, pc}
 801a77a:	4608      	mov	r0, r1
 801a77c:	e7fc      	b.n	801a778 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>

0801a77e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a77e:	b530      	push	{r4, r5, lr}
 801a780:	4604      	mov	r4, r0
 801a782:	b159      	cbz	r1, 801a79c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a784:	b148      	cbz	r0, 801a79a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a786:	2300      	movs	r3, #0
 801a788:	b298      	uxth	r0, r3
 801a78a:	4282      	cmp	r2, r0
 801a78c:	d905      	bls.n	801a79a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a78e:	5ccd      	ldrb	r5, [r1, r3]
 801a790:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a794:	3301      	adds	r3, #1
 801a796:	2d00      	cmp	r5, #0
 801a798:	d1f6      	bne.n	801a788 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a79a:	bd30      	pop	{r4, r5, pc}
 801a79c:	4608      	mov	r0, r1
 801a79e:	e7fc      	b.n	801a79a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a7a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801a7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7a2:	468c      	mov	ip, r1
 801a7a4:	b08b      	sub	sp, #44	; 0x2c
 801a7a6:	2100      	movs	r1, #0
 801a7a8:	ae01      	add	r6, sp, #4
 801a7aa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a7ae:	211f      	movs	r1, #31
 801a7b0:	fbb0 f7f3 	udiv	r7, r0, r3
 801a7b4:	fb03 0517 	mls	r5, r3, r7, r0
 801a7b8:	4638      	mov	r0, r7
 801a7ba:	b2ec      	uxtb	r4, r5
 801a7bc:	2d09      	cmp	r5, #9
 801a7be:	bfd4      	ite	le
 801a7c0:	3430      	addle	r4, #48	; 0x30
 801a7c2:	3457      	addgt	r4, #87	; 0x57
 801a7c4:	b2e4      	uxtb	r4, r4
 801a7c6:	558c      	strb	r4, [r1, r6]
 801a7c8:	1e4c      	subs	r4, r1, #1
 801a7ca:	b92f      	cbnz	r7, 801a7d8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801a7cc:	4431      	add	r1, r6
 801a7ce:	4660      	mov	r0, ip
 801a7d0:	f7ff ffd5 	bl	801a77e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a7d4:	b00b      	add	sp, #44	; 0x2c
 801a7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7d8:	4621      	mov	r1, r4
 801a7da:	e7e9      	b.n	801a7b0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801a7dc <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a7de:	4607      	mov	r7, r0
 801a7e0:	b08b      	sub	sp, #44	; 0x2c
 801a7e2:	4608      	mov	r0, r1
 801a7e4:	b341      	cbz	r1, 801a838 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a7e6:	1e99      	subs	r1, r3, #2
 801a7e8:	2922      	cmp	r1, #34	; 0x22
 801a7ea:	d825      	bhi.n	801a838 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a7ec:	2100      	movs	r1, #0
 801a7ee:	463c      	mov	r4, r7
 801a7f0:	261f      	movs	r6, #31
 801a7f2:	f10d 0c04 	add.w	ip, sp, #4
 801a7f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a7fa:	1e71      	subs	r1, r6, #1
 801a7fc:	fb94 fef3 	sdiv	lr, r4, r3
 801a800:	fb03 441e 	mls	r4, r3, lr, r4
 801a804:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a808:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a80c:	b2ec      	uxtb	r4, r5
 801a80e:	2d09      	cmp	r5, #9
 801a810:	bfd4      	ite	le
 801a812:	3430      	addle	r4, #48	; 0x30
 801a814:	3457      	addgt	r4, #87	; 0x57
 801a816:	b2e4      	uxtb	r4, r4
 801a818:	f80c 4006 	strb.w	r4, [ip, r6]
 801a81c:	4674      	mov	r4, lr
 801a81e:	b96c      	cbnz	r4, 801a83c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a820:	2f00      	cmp	r7, #0
 801a822:	da05      	bge.n	801a830 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a824:	ab0a      	add	r3, sp, #40	; 0x28
 801a826:	4419      	add	r1, r3
 801a828:	232d      	movs	r3, #45	; 0x2d
 801a82a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a82e:	1eb1      	subs	r1, r6, #2
 801a830:	3101      	adds	r1, #1
 801a832:	4461      	add	r1, ip
 801a834:	f7ff ffa3 	bl	801a77e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a838:	b00b      	add	sp, #44	; 0x2c
 801a83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a83c:	460e      	mov	r6, r1
 801a83e:	e7dc      	b.n	801a7fa <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a840 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a844:	b085      	sub	sp, #20
 801a846:	4691      	mov	r9, r2
 801a848:	6802      	ldr	r2, [r0, #0]
 801a84a:	4688      	mov	r8, r1
 801a84c:	461c      	mov	r4, r3
 801a84e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a852:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a856:	4683      	mov	fp, r0
 801a858:	4610      	mov	r0, r2
 801a85a:	9103      	str	r1, [sp, #12]
 801a85c:	9302      	str	r3, [sp, #8]
 801a85e:	9201      	str	r2, [sp, #4]
 801a860:	f7ff ff6e 	bl	801a740 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a864:	f1b8 0f00 	cmp.w	r8, #0
 801a868:	bf0c      	ite	eq
 801a86a:	4684      	moveq	ip, r0
 801a86c:	f100 0c01 	addne.w	ip, r0, #1
 801a870:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801a874:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801a878:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a87a:	fa1f fc8c 	uxth.w	ip, ip
 801a87e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a880:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801a884:	9903      	ldr	r1, [sp, #12]
 801a886:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a88a:	d041      	beq.n	801a910 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a88c:	d834      	bhi.n	801a8f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801a88e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801a892:	d059      	beq.n	801a948 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801a894:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801a898:	d03a      	beq.n	801a910 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a89a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801a89e:	d034      	beq.n	801a90a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a8a0:	2400      	movs	r4, #0
 801a8a2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a8a6:	3a01      	subs	r2, #1
 801a8a8:	b169      	cbz	r1, 801a8c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a8aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a8ac:	458c      	cmp	ip, r1
 801a8ae:	da09      	bge.n	801a8c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a8b0:	eba1 010c 	sub.w	r1, r1, ip
 801a8b4:	b289      	uxth	r1, r1
 801a8b6:	b933      	cbnz	r3, 801a8c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a8b8:	2e00      	cmp	r6, #0
 801a8ba:	d051      	beq.n	801a960 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a8bc:	2800      	cmp	r0, #0
 801a8be:	d04f      	beq.n	801a960 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a8c0:	440c      	add	r4, r1
 801a8c2:	b2a4      	uxth	r4, r4
 801a8c4:	2100      	movs	r1, #0
 801a8c6:	682b      	ldr	r3, [r5, #0]
 801a8c8:	4293      	cmp	r3, r2
 801a8ca:	da07      	bge.n	801a8dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a8cc:	f1b8 0f00 	cmp.w	r8, #0
 801a8d0:	d004      	beq.n	801a8dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a8d2:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801a8d6:	682b      	ldr	r3, [r5, #0]
 801a8d8:	3301      	adds	r3, #1
 801a8da:	602b      	str	r3, [r5, #0]
 801a8dc:	2730      	movs	r7, #48	; 0x30
 801a8de:	2c00      	cmp	r4, #0
 801a8e0:	d04e      	beq.n	801a980 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a8e2:	682e      	ldr	r6, [r5, #0]
 801a8e4:	3c01      	subs	r4, #1
 801a8e6:	42b2      	cmp	r2, r6
 801a8e8:	b2a4      	uxth	r4, r4
 801a8ea:	dd49      	ble.n	801a980 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a8ec:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a8f0:	682b      	ldr	r3, [r5, #0]
 801a8f2:	3301      	adds	r3, #1
 801a8f4:	602b      	str	r3, [r5, #0]
 801a8f6:	e7f2      	b.n	801a8de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801a8f8:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801a8fc:	d01d      	beq.n	801a93a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801a8fe:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801a902:	d002      	beq.n	801a90a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a904:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801a908:	e7c9      	b.n	801a89e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801a90a:	4684      	mov	ip, r0
 801a90c:	f04f 0800 	mov.w	r8, #0
 801a910:	2c00      	cmp	r4, #0
 801a912:	d0c6      	beq.n	801a8a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a914:	b947      	cbnz	r7, 801a928 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a916:	2801      	cmp	r0, #1
 801a918:	d106      	bne.n	801a928 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a91a:	8814      	ldrh	r4, [r2, #0]
 801a91c:	2c30      	cmp	r4, #48	; 0x30
 801a91e:	bf02      	ittt	eq
 801a920:	3202      	addeq	r2, #2
 801a922:	4638      	moveq	r0, r7
 801a924:	f8cb 2000 	streq.w	r2, [fp]
 801a928:	45bc      	cmp	ip, r7
 801a92a:	da14      	bge.n	801a956 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801a92c:	b2bf      	uxth	r7, r7
 801a92e:	eba7 040c 	sub.w	r4, r7, ip
 801a932:	46bc      	mov	ip, r7
 801a934:	b2a4      	uxth	r4, r4
 801a936:	2600      	movs	r6, #0
 801a938:	e7b3      	b.n	801a8a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a93a:	4684      	mov	ip, r0
 801a93c:	b16c      	cbz	r4, 801a95a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801a93e:	42b8      	cmp	r0, r7
 801a940:	dd00      	ble.n	801a944 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801a942:	b2b8      	uxth	r0, r7
 801a944:	2400      	movs	r4, #0
 801a946:	e003      	b.n	801a950 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801a948:	f04f 0c01 	mov.w	ip, #1
 801a94c:	2400      	movs	r4, #0
 801a94e:	4660      	mov	r0, ip
 801a950:	4626      	mov	r6, r4
 801a952:	46a0      	mov	r8, r4
 801a954:	e7a5      	b.n	801a8a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a956:	2400      	movs	r4, #0
 801a958:	e7ed      	b.n	801a936 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801a95a:	4626      	mov	r6, r4
 801a95c:	46a0      	mov	r8, r4
 801a95e:	e7a0      	b.n	801a8a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a960:	2900      	cmp	r1, #0
 801a962:	d0b0      	beq.n	801a8c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a964:	2720      	movs	r7, #32
 801a966:	682e      	ldr	r6, [r5, #0]
 801a968:	2900      	cmp	r1, #0
 801a96a:	d0ac      	beq.n	801a8c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a96c:	3901      	subs	r1, #1
 801a96e:	4296      	cmp	r6, r2
 801a970:	b289      	uxth	r1, r1
 801a972:	daa7      	bge.n	801a8c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a974:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a978:	682b      	ldr	r3, [r5, #0]
 801a97a:	3301      	adds	r3, #1
 801a97c:	602b      	str	r3, [r5, #0]
 801a97e:	e7f2      	b.n	801a966 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801a980:	b188      	cbz	r0, 801a9a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a982:	682b      	ldr	r3, [r5, #0]
 801a984:	3801      	subs	r0, #1
 801a986:	429a      	cmp	r2, r3
 801a988:	b280      	uxth	r0, r0
 801a98a:	dd0c      	ble.n	801a9a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a98c:	f8db 3000 	ldr.w	r3, [fp]
 801a990:	1c9c      	adds	r4, r3, #2
 801a992:	f8cb 4000 	str.w	r4, [fp]
 801a996:	881c      	ldrh	r4, [r3, #0]
 801a998:	682b      	ldr	r3, [r5, #0]
 801a99a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801a99e:	682b      	ldr	r3, [r5, #0]
 801a9a0:	3301      	adds	r3, #1
 801a9a2:	602b      	str	r3, [r5, #0]
 801a9a4:	e7ec      	b.n	801a980 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a9a6:	2620      	movs	r6, #32
 801a9a8:	b151      	cbz	r1, 801a9c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a9aa:	6828      	ldr	r0, [r5, #0]
 801a9ac:	3901      	subs	r1, #1
 801a9ae:	4282      	cmp	r2, r0
 801a9b0:	b289      	uxth	r1, r1
 801a9b2:	dd05      	ble.n	801a9c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a9b4:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801a9b8:	682b      	ldr	r3, [r5, #0]
 801a9ba:	3301      	adds	r3, #1
 801a9bc:	602b      	str	r3, [r5, #0]
 801a9be:	e7f3      	b.n	801a9a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801a9c0:	b005      	add	sp, #20
 801a9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a9c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801a9c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9ca:	2400      	movs	r4, #0
 801a9cc:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801a9d0:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801a9d4:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801a9d8:	8014      	strh	r4, [r2, #0]
 801a9da:	701c      	strb	r4, [r3, #0]
 801a9dc:	f888 4000 	strb.w	r4, [r8]
 801a9e0:	f88c 4000 	strb.w	r4, [ip]
 801a9e4:	f88e 4000 	strb.w	r4, [lr]
 801a9e8:	703c      	strb	r4, [r7, #0]
 801a9ea:	6804      	ldr	r4, [r0, #0]
 801a9ec:	b1a4      	cbz	r4, 801aa18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801a9ee:	8824      	ldrh	r4, [r4, #0]
 801a9f0:	f04f 0901 	mov.w	r9, #1
 801a9f4:	b314      	cbz	r4, 801aa3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a9f6:	2c2b      	cmp	r4, #43	; 0x2b
 801a9f8:	d001      	beq.n	801a9fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801a9fa:	2c20      	cmp	r4, #32
 801a9fc:	d110      	bne.n	801aa20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801a9fe:	8014      	strh	r4, [r2, #0]
 801aa00:	6804      	ldr	r4, [r0, #0]
 801aa02:	b10c      	cbz	r4, 801aa08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801aa04:	3402      	adds	r4, #2
 801aa06:	6004      	str	r4, [r0, #0]
 801aa08:	680c      	ldr	r4, [r1, #0]
 801aa0a:	b10c      	cbz	r4, 801aa10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801aa0c:	3401      	adds	r4, #1
 801aa0e:	600c      	str	r4, [r1, #0]
 801aa10:	6804      	ldr	r4, [r0, #0]
 801aa12:	b17c      	cbz	r4, 801aa34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801aa14:	8824      	ldrh	r4, [r4, #0]
 801aa16:	e7ed      	b.n	801a9f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801aa18:	680c      	ldr	r4, [r1, #0]
 801aa1a:	b17c      	cbz	r4, 801aa3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801aa1c:	7824      	ldrb	r4, [r4, #0]
 801aa1e:	e7e7      	b.n	801a9f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801aa20:	2c2d      	cmp	r4, #45	; 0x2d
 801aa22:	d102      	bne.n	801aa2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801aa24:	f883 9000 	strb.w	r9, [r3]
 801aa28:	e7ea      	b.n	801aa00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801aa2a:	2c23      	cmp	r4, #35	; 0x23
 801aa2c:	d107      	bne.n	801aa3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801aa2e:	f888 9000 	strb.w	r9, [r8]
 801aa32:	e7e5      	b.n	801aa00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801aa34:	680c      	ldr	r4, [r1, #0]
 801aa36:	b10c      	cbz	r4, 801aa3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801aa38:	7824      	ldrb	r4, [r4, #0]
 801aa3a:	e7db      	b.n	801a9f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801aa3c:	2400      	movs	r4, #0
 801aa3e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801aa42:	2b09      	cmp	r3, #9
 801aa44:	d901      	bls.n	801aa4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801aa46:	2c2a      	cmp	r4, #42	; 0x2a
 801aa48:	d122      	bne.n	801aa90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801aa4a:	2301      	movs	r3, #1
 801aa4c:	2c30      	cmp	r4, #48	; 0x30
 801aa4e:	f88e 3000 	strb.w	r3, [lr]
 801aa52:	d10d      	bne.n	801aa70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801aa54:	f88c 3000 	strb.w	r3, [ip]
 801aa58:	6803      	ldr	r3, [r0, #0]
 801aa5a:	b10b      	cbz	r3, 801aa60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801aa5c:	3302      	adds	r3, #2
 801aa5e:	6003      	str	r3, [r0, #0]
 801aa60:	680b      	ldr	r3, [r1, #0]
 801aa62:	b10b      	cbz	r3, 801aa68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801aa64:	3301      	adds	r3, #1
 801aa66:	600b      	str	r3, [r1, #0]
 801aa68:	6803      	ldr	r3, [r0, #0]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d02f      	beq.n	801aace <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801aa6e:	881c      	ldrh	r4, [r3, #0]
 801aa70:	2c2a      	cmp	r4, #42	; 0x2a
 801aa72:	d135      	bne.n	801aae0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801aa74:	f04f 33ff 	mov.w	r3, #4294967295
 801aa78:	6033      	str	r3, [r6, #0]
 801aa7a:	6803      	ldr	r3, [r0, #0]
 801aa7c:	b10b      	cbz	r3, 801aa82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801aa7e:	3302      	adds	r3, #2
 801aa80:	6003      	str	r3, [r0, #0]
 801aa82:	680b      	ldr	r3, [r1, #0]
 801aa84:	b10b      	cbz	r3, 801aa8a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801aa86:	3301      	adds	r3, #1
 801aa88:	600b      	str	r3, [r1, #0]
 801aa8a:	6803      	ldr	r3, [r0, #0]
 801aa8c:	b31b      	cbz	r3, 801aad6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801aa8e:	881c      	ldrh	r4, [r3, #0]
 801aa90:	2c2e      	cmp	r4, #46	; 0x2e
 801aa92:	d11a      	bne.n	801aaca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801aa94:	2301      	movs	r3, #1
 801aa96:	703b      	strb	r3, [r7, #0]
 801aa98:	6803      	ldr	r3, [r0, #0]
 801aa9a:	b10b      	cbz	r3, 801aaa0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801aa9c:	3302      	adds	r3, #2
 801aa9e:	6003      	str	r3, [r0, #0]
 801aaa0:	680b      	ldr	r3, [r1, #0]
 801aaa2:	b10b      	cbz	r3, 801aaa8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801aaa4:	3301      	adds	r3, #1
 801aaa6:	600b      	str	r3, [r1, #0]
 801aaa8:	6803      	ldr	r3, [r0, #0]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d036      	beq.n	801ab1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801aaae:	881b      	ldrh	r3, [r3, #0]
 801aab0:	2b2a      	cmp	r3, #42	; 0x2a
 801aab2:	d137      	bne.n	801ab24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801aab4:	f04f 33ff 	mov.w	r3, #4294967295
 801aab8:	602b      	str	r3, [r5, #0]
 801aaba:	6803      	ldr	r3, [r0, #0]
 801aabc:	b10b      	cbz	r3, 801aac2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801aabe:	3302      	adds	r3, #2
 801aac0:	6003      	str	r3, [r0, #0]
 801aac2:	680b      	ldr	r3, [r1, #0]
 801aac4:	b10b      	cbz	r3, 801aaca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801aac6:	3301      	adds	r3, #1
 801aac8:	600b      	str	r3, [r1, #0]
 801aaca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aace:	680c      	ldr	r4, [r1, #0]
 801aad0:	b134      	cbz	r4, 801aae0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801aad2:	7824      	ldrb	r4, [r4, #0]
 801aad4:	e7cc      	b.n	801aa70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801aad6:	680b      	ldr	r3, [r1, #0]
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d0f6      	beq.n	801aaca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801aadc:	781c      	ldrb	r4, [r3, #0]
 801aade:	e7d7      	b.n	801aa90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801aae0:	2300      	movs	r3, #0
 801aae2:	220a      	movs	r2, #10
 801aae4:	6033      	str	r3, [r6, #0]
 801aae6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801aaea:	fa1f f38c 	uxth.w	r3, ip
 801aaee:	2b09      	cmp	r3, #9
 801aaf0:	d8ce      	bhi.n	801aa90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801aaf2:	6833      	ldr	r3, [r6, #0]
 801aaf4:	fb02 c303 	mla	r3, r2, r3, ip
 801aaf8:	6033      	str	r3, [r6, #0]
 801aafa:	6803      	ldr	r3, [r0, #0]
 801aafc:	b10b      	cbz	r3, 801ab02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801aafe:	3302      	adds	r3, #2
 801ab00:	6003      	str	r3, [r0, #0]
 801ab02:	680b      	ldr	r3, [r1, #0]
 801ab04:	b10b      	cbz	r3, 801ab0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801ab06:	3301      	adds	r3, #1
 801ab08:	600b      	str	r3, [r1, #0]
 801ab0a:	6803      	ldr	r3, [r0, #0]
 801ab0c:	b10b      	cbz	r3, 801ab12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801ab0e:	881c      	ldrh	r4, [r3, #0]
 801ab10:	e7e9      	b.n	801aae6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ab12:	680c      	ldr	r4, [r1, #0]
 801ab14:	2c00      	cmp	r4, #0
 801ab16:	d0e6      	beq.n	801aae6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ab18:	7824      	ldrb	r4, [r4, #0]
 801ab1a:	e7e4      	b.n	801aae6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801ab1c:	680b      	ldr	r3, [r1, #0]
 801ab1e:	b10b      	cbz	r3, 801ab24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801ab20:	781b      	ldrb	r3, [r3, #0]
 801ab22:	e7c5      	b.n	801aab0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801ab24:	2200      	movs	r2, #0
 801ab26:	240a      	movs	r4, #10
 801ab28:	602a      	str	r2, [r5, #0]
 801ab2a:	3b30      	subs	r3, #48	; 0x30
 801ab2c:	682a      	ldr	r2, [r5, #0]
 801ab2e:	b29e      	uxth	r6, r3
 801ab30:	2e09      	cmp	r6, #9
 801ab32:	d813      	bhi.n	801ab5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801ab34:	fb04 3302 	mla	r3, r4, r2, r3
 801ab38:	602b      	str	r3, [r5, #0]
 801ab3a:	6803      	ldr	r3, [r0, #0]
 801ab3c:	b10b      	cbz	r3, 801ab42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801ab3e:	3302      	adds	r3, #2
 801ab40:	6003      	str	r3, [r0, #0]
 801ab42:	680b      	ldr	r3, [r1, #0]
 801ab44:	b10b      	cbz	r3, 801ab4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801ab46:	3301      	adds	r3, #1
 801ab48:	600b      	str	r3, [r1, #0]
 801ab4a:	6803      	ldr	r3, [r0, #0]
 801ab4c:	b10b      	cbz	r3, 801ab52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801ab4e:	881b      	ldrh	r3, [r3, #0]
 801ab50:	e7eb      	b.n	801ab2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ab52:	680b      	ldr	r3, [r1, #0]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d0e8      	beq.n	801ab2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ab58:	781b      	ldrb	r3, [r3, #0]
 801ab5a:	e7e6      	b.n	801ab2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801ab5c:	2a06      	cmp	r2, #6
 801ab5e:	bfa8      	it	ge
 801ab60:	2206      	movge	r2, #6
 801ab62:	602a      	str	r2, [r5, #0]
 801ab64:	e7b1      	b.n	801aaca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801ab66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801ab66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab6a:	b0a3      	sub	sp, #140	; 0x8c
 801ab6c:	2600      	movs	r6, #0
 801ab6e:	4607      	mov	r7, r0
 801ab70:	4688      	mov	r8, r1
 801ab72:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801ab76:	4631      	mov	r1, r6
 801ab78:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801ab7a:	4648      	mov	r0, r9
 801ab7c:	960d      	str	r6, [sp, #52]	; 0x34
 801ab7e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ab82:	2242      	movs	r2, #66	; 0x42
 801ab84:	f008 fd74 	bl	8023670 <memset>
 801ab88:	b15f      	cbz	r7, 801aba2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801ab8a:	f108 3aff 	add.w	sl, r8, #4294967295
 801ab8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab92:	b152      	cbz	r2, 801abaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801ab94:	8812      	ldrh	r2, [r2, #0]
 801ab96:	b10a      	cbz	r2, 801ab9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ab98:	459a      	cmp	sl, r3
 801ab9a:	dc2e      	bgt.n	801abfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801ab9c:	2200      	movs	r2, #0
 801ab9e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801aba2:	4638      	mov	r0, r7
 801aba4:	b023      	add	sp, #140	; 0x8c
 801aba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abaa:	9a08      	ldr	r2, [sp, #32]
 801abac:	2a00      	cmp	r2, #0
 801abae:	d0f5      	beq.n	801ab9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801abb0:	7812      	ldrb	r2, [r2, #0]
 801abb2:	e7f0      	b.n	801ab96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801abb4:	2d00      	cmp	r5, #0
 801abb6:	d0ea      	beq.n	801ab8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801abb8:	782a      	ldrb	r2, [r5, #0]
 801abba:	b142      	cbz	r2, 801abce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801abbc:	2a25      	cmp	r2, #37	; 0x25
 801abbe:	d001      	beq.n	801abc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801abc0:	459a      	cmp	sl, r3
 801abc2:	dc08      	bgt.n	801abd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801abc4:	f1bb 0f00 	cmp.w	fp, #0
 801abc8:	d121      	bne.n	801ac0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801abca:	2d00      	cmp	r5, #0
 801abcc:	d0df      	beq.n	801ab8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801abce:	782a      	ldrb	r2, [r5, #0]
 801abd0:	f04f 0b00 	mov.w	fp, #0
 801abd4:	e01d      	b.n	801ac12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801abd6:	f1bb 0f00 	cmp.w	fp, #0
 801abda:	d077      	beq.n	801accc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801abdc:	f8bb 2000 	ldrh.w	r2, [fp]
 801abe0:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801abe4:	f1bb 0f00 	cmp.w	fp, #0
 801abe8:	d002      	beq.n	801abf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801abea:	f10b 0202 	add.w	r2, fp, #2
 801abee:	9209      	str	r2, [sp, #36]	; 0x24
 801abf0:	b10d      	cbz	r5, 801abf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801abf2:	3501      	adds	r5, #1
 801abf4:	9508      	str	r5, [sp, #32]
 801abf6:	3301      	adds	r3, #1
 801abf8:	930d      	str	r3, [sp, #52]	; 0x34
 801abfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801abfc:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801ac00:	f1bb 0f00 	cmp.w	fp, #0
 801ac04:	d0d6      	beq.n	801abb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801ac06:	f8bb 2000 	ldrh.w	r2, [fp]
 801ac0a:	2a00      	cmp	r2, #0
 801ac0c:	d1d6      	bne.n	801abbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801ac0e:	f8bb 2000 	ldrh.w	r2, [fp]
 801ac12:	2a00      	cmp	r2, #0
 801ac14:	d0bb      	beq.n	801ab8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ac16:	459a      	cmp	sl, r3
 801ac18:	ddb9      	ble.n	801ab8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ac1a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801ac1e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801ac22:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801ac26:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801ac2a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801ac2e:	960e      	str	r6, [sp, #56]	; 0x38
 801ac30:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801ac34:	960f      	str	r6, [sp, #60]	; 0x3c
 801ac36:	f1bb 0f00 	cmp.w	fp, #0
 801ac3a:	d002      	beq.n	801ac42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801ac3c:	f10b 0302 	add.w	r3, fp, #2
 801ac40:	9309      	str	r3, [sp, #36]	; 0x24
 801ac42:	b10d      	cbz	r5, 801ac48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801ac44:	1c6b      	adds	r3, r5, #1
 801ac46:	9308      	str	r3, [sp, #32]
 801ac48:	ab0f      	add	r3, sp, #60	; 0x3c
 801ac4a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801ac4e:	a908      	add	r1, sp, #32
 801ac50:	a809      	add	r0, sp, #36	; 0x24
 801ac52:	9305      	str	r3, [sp, #20]
 801ac54:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ac58:	9304      	str	r3, [sp, #16]
 801ac5a:	ab0e      	add	r3, sp, #56	; 0x38
 801ac5c:	9303      	str	r3, [sp, #12]
 801ac5e:	ab0c      	add	r3, sp, #48	; 0x30
 801ac60:	9302      	str	r3, [sp, #8]
 801ac62:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ac66:	9301      	str	r3, [sp, #4]
 801ac68:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ac6c:	9300      	str	r3, [sp, #0]
 801ac6e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801ac72:	f7ff fea8 	bl	801a9c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801ac76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	bfbf      	itttt	lt
 801ac7c:	6823      	ldrlt	r3, [r4, #0]
 801ac7e:	3404      	addlt	r4, #4
 801ac80:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ac84:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ac86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	bfbe      	ittt	lt
 801ac8c:	6823      	ldrlt	r3, [r4, #0]
 801ac8e:	3404      	addlt	r4, #4
 801ac90:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ac94:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ac98:	bfb8      	it	lt
 801ac9a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801ac9c:	b1d9      	cbz	r1, 801acd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801ac9e:	880b      	ldrh	r3, [r1, #0]
 801aca0:	2b69      	cmp	r3, #105	; 0x69
 801aca2:	d01f      	beq.n	801ace4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801aca4:	d82f      	bhi.n	801ad06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801aca6:	2b58      	cmp	r3, #88	; 0x58
 801aca8:	d01c      	beq.n	801ace4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801acaa:	d818      	bhi.n	801acde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801acac:	2b25      	cmp	r3, #37	; 0x25
 801acae:	d034      	beq.n	801ad1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801acb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acb2:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801acb6:	f1bb 0f00 	cmp.w	fp, #0
 801acba:	f000 80b7 	beq.w	801ae2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801acbe:	f8bb 5000 	ldrh.w	r5, [fp]
 801acc2:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801acc6:	3301      	adds	r3, #1
 801acc8:	930d      	str	r3, [sp, #52]	; 0x34
 801acca:	e029      	b.n	801ad20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801accc:	b10d      	cbz	r5, 801acd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801acce:	782a      	ldrb	r2, [r5, #0]
 801acd0:	e786      	b.n	801abe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801acd2:	462a      	mov	r2, r5
 801acd4:	e784      	b.n	801abe0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801acd6:	2a00      	cmp	r2, #0
 801acd8:	d0ea      	beq.n	801acb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801acda:	7813      	ldrb	r3, [r2, #0]
 801acdc:	e7e0      	b.n	801aca0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801acde:	3b63      	subs	r3, #99	; 0x63
 801ace0:	2b01      	cmp	r3, #1
 801ace2:	d8e5      	bhi.n	801acb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ace4:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801ace8:	b329      	cbz	r1, 801ad36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801acea:	880b      	ldrh	r3, [r1, #0]
 801acec:	2b69      	cmp	r3, #105	; 0x69
 801acee:	d063      	beq.n	801adb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801acf0:	d825      	bhi.n	801ad3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801acf2:	2b63      	cmp	r3, #99	; 0x63
 801acf4:	d038      	beq.n	801ad68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801acf6:	2b64      	cmp	r3, #100	; 0x64
 801acf8:	d05e      	beq.n	801adb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801acfa:	2b58      	cmp	r3, #88	; 0x58
 801acfc:	d07a      	beq.n	801adf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801acfe:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801ad02:	4625      	mov	r5, r4
 801ad04:	e036      	b.n	801ad74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ad06:	2b73      	cmp	r3, #115	; 0x73
 801ad08:	d0ec      	beq.n	801ace4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ad0a:	d802      	bhi.n	801ad12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801ad0c:	2b6f      	cmp	r3, #111	; 0x6f
 801ad0e:	d1cf      	bne.n	801acb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ad10:	e7e8      	b.n	801ace4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ad12:	2b75      	cmp	r3, #117	; 0x75
 801ad14:	d0e6      	beq.n	801ace4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ad16:	2b78      	cmp	r3, #120	; 0x78
 801ad18:	e7f9      	b.n	801ad0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801ad1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad1c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801ad20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad22:	b10b      	cbz	r3, 801ad28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801ad24:	3302      	adds	r3, #2
 801ad26:	9309      	str	r3, [sp, #36]	; 0x24
 801ad28:	9b08      	ldr	r3, [sp, #32]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	f43f af2f 	beq.w	801ab8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ad30:	3301      	adds	r3, #1
 801ad32:	9308      	str	r3, [sp, #32]
 801ad34:	e72b      	b.n	801ab8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ad36:	2a00      	cmp	r2, #0
 801ad38:	d0e1      	beq.n	801acfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ad3a:	7813      	ldrb	r3, [r2, #0]
 801ad3c:	e7d6      	b.n	801acec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801ad3e:	2b73      	cmp	r3, #115	; 0x73
 801ad40:	d036      	beq.n	801adb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801ad42:	d807      	bhi.n	801ad54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801ad44:	2b6f      	cmp	r3, #111	; 0x6f
 801ad46:	d1da      	bne.n	801acfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ad48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad4a:	1d25      	adds	r5, r4, #4
 801ad4c:	2308      	movs	r3, #8
 801ad4e:	eba8 0202 	sub.w	r2, r8, r2
 801ad52:	e049      	b.n	801ade8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ad54:	2b75      	cmp	r3, #117	; 0x75
 801ad56:	d042      	beq.n	801adde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801ad58:	2b78      	cmp	r3, #120	; 0x78
 801ad5a:	d1d0      	bne.n	801acfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ad5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad5e:	1d25      	adds	r5, r4, #4
 801ad60:	2310      	movs	r3, #16
 801ad62:	eba8 0202 	sub.w	r2, r8, r2
 801ad66:	e03f      	b.n	801ade8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ad68:	6823      	ldr	r3, [r4, #0]
 801ad6a:	1d25      	adds	r5, r4, #4
 801ad6c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801ad70:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801ad74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad76:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d051      	beq.n	801ae22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801ad7e:	881a      	ldrh	r2, [r3, #0]
 801ad80:	a80d      	add	r0, sp, #52	; 0x34
 801ad82:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801ad86:	462c      	mov	r4, r5
 801ad88:	9005      	str	r0, [sp, #20]
 801ad8a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801ad8e:	9004      	str	r0, [sp, #16]
 801ad90:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ad92:	9003      	str	r0, [sp, #12]
 801ad94:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801ad98:	9002      	str	r0, [sp, #8]
 801ad9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ad9c:	9001      	str	r0, [sp, #4]
 801ad9e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801ada2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801ada6:	9000      	str	r0, [sp, #0]
 801ada8:	a810      	add	r0, sp, #64	; 0x40
 801adaa:	f7ff fd49 	bl	801a840 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801adae:	e7b7      	b.n	801ad20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801adb0:	1d25      	adds	r5, r4, #4
 801adb2:	6823      	ldr	r3, [r4, #0]
 801adb4:	9310      	str	r3, [sp, #64]	; 0x40
 801adb6:	e7dd      	b.n	801ad74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801adb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801adba:	230a      	movs	r3, #10
 801adbc:	4649      	mov	r1, r9
 801adbe:	6820      	ldr	r0, [r4, #0]
 801adc0:	eba8 0202 	sub.w	r2, r8, r2
 801adc4:	1d25      	adds	r5, r4, #4
 801adc6:	b292      	uxth	r2, r2
 801adc8:	f7ff fd08 	bl	801a7dc <_ZN8touchgfx7Unicode4itoaElPtti>
 801adcc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801add0:	2b2d      	cmp	r3, #45	; 0x2d
 801add2:	d1cf      	bne.n	801ad74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801add4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801add8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801adda:	3302      	adds	r3, #2
 801addc:	e7ea      	b.n	801adb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801adde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ade0:	1d25      	adds	r5, r4, #4
 801ade2:	230a      	movs	r3, #10
 801ade4:	eba8 0202 	sub.w	r2, r8, r2
 801ade8:	b292      	uxth	r2, r2
 801adea:	4649      	mov	r1, r9
 801adec:	6820      	ldr	r0, [r4, #0]
 801adee:	f7ff fcd7 	bl	801a7a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801adf2:	e7bf      	b.n	801ad74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801adf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801adf6:	2310      	movs	r3, #16
 801adf8:	4649      	mov	r1, r9
 801adfa:	6820      	ldr	r0, [r4, #0]
 801adfc:	eba8 0202 	sub.w	r2, r8, r2
 801ae00:	1d25      	adds	r5, r4, #4
 801ae02:	b292      	uxth	r2, r2
 801ae04:	f7ff fccc 	bl	801a7a0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ae08:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ae0c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d0af      	beq.n	801ad74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ae14:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ae18:	2919      	cmp	r1, #25
 801ae1a:	d8f7      	bhi.n	801ae0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ae1c:	3b20      	subs	r3, #32
 801ae1e:	8013      	strh	r3, [r2, #0]
 801ae20:	e7f4      	b.n	801ae0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ae22:	9a08      	ldr	r2, [sp, #32]
 801ae24:	2a00      	cmp	r2, #0
 801ae26:	d0ab      	beq.n	801ad80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ae28:	7812      	ldrb	r2, [r2, #0]
 801ae2a:	e7a9      	b.n	801ad80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ae2c:	2d00      	cmp	r5, #0
 801ae2e:	f43f af48 	beq.w	801acc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801ae32:	782d      	ldrb	r5, [r5, #0]
 801ae34:	e745      	b.n	801acc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801ae36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ae36:	b507      	push	{r0, r1, r2, lr}
 801ae38:	9300      	str	r3, [sp, #0]
 801ae3a:	4613      	mov	r3, r2
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	f7ff fe92 	bl	801ab66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801ae42:	b003      	add	sp, #12
 801ae44:	f85d fb04 	ldr.w	pc, [sp], #4

0801ae48 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ae48:	b40c      	push	{r2, r3}
 801ae4a:	b507      	push	{r0, r1, r2, lr}
 801ae4c:	ab04      	add	r3, sp, #16
 801ae4e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae52:	9301      	str	r3, [sp, #4]
 801ae54:	f7ff ffef 	bl	801ae36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ae58:	b003      	add	sp, #12
 801ae5a:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae5e:	b002      	add	sp, #8
 801ae60:	4770      	bx	lr
	...

0801ae64 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ae64:	4b01      	ldr	r3, [pc, #4]	; (801ae6c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ae66:	6018      	str	r0, [r3, #0]
 801ae68:	4770      	bx	lr
 801ae6a:	bf00      	nop
 801ae6c:	2400ff74 	.word	0x2400ff74

0801ae70 <_ZN8touchgfx11FontManager7getFontEt>:
 801ae70:	4b03      	ldr	r3, [pc, #12]	; (801ae80 <_ZN8touchgfx11FontManager7getFontEt+0x10>)
 801ae72:	4601      	mov	r1, r0
 801ae74:	6818      	ldr	r0, [r3, #0]
 801ae76:	b110      	cbz	r0, 801ae7e <_ZN8touchgfx11FontManager7getFontEt+0xe>
 801ae78:	6803      	ldr	r3, [r0, #0]
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	4718      	bx	r3
 801ae7e:	4770      	bx	lr
 801ae80:	2400ff74 	.word	0x2400ff74

0801ae84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ae84:	4b06      	ldr	r3, [pc, #24]	; (801aea0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ae86:	881a      	ldrh	r2, [r3, #0]
 801ae88:	4282      	cmp	r2, r0
 801ae8a:	d807      	bhi.n	801ae9c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801ae8c:	4b05      	ldr	r3, [pc, #20]	; (801aea4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801ae8e:	881b      	ldrh	r3, [r3, #0]
 801ae90:	4413      	add	r3, r2
 801ae92:	4298      	cmp	r0, r3
 801ae94:	bfac      	ite	ge
 801ae96:	2000      	movge	r0, #0
 801ae98:	2001      	movlt	r0, #1
 801ae9a:	4770      	bx	lr
 801ae9c:	2000      	movs	r0, #0
 801ae9e:	4770      	bx	lr
 801aea0:	2400ff94 	.word	0x2400ff94
 801aea4:	2400ff98 	.word	0x2400ff98

0801aea8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801aea8:	b508      	push	{r3, lr}
 801aeaa:	4601      	mov	r1, r0
 801aeac:	f7ff ffea 	bl	801ae84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801aeb0:	b118      	cbz	r0, 801aeba <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801aeb2:	4b02      	ldr	r3, [pc, #8]	; (801aebc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801aeba:	bd08      	pop	{r3, pc}
 801aebc:	2400ff78 	.word	0x2400ff78

0801aec0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801aec0:	b538      	push	{r3, r4, r5, lr}
 801aec2:	4604      	mov	r4, r0
 801aec4:	f7ff ffde 	bl	801ae84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801aec8:	b188      	cbz	r0, 801aeee <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801aeca:	4b09      	ldr	r3, [pc, #36]	; (801aef0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801aecc:	881a      	ldrh	r2, [r3, #0]
 801aece:	4b09      	ldr	r3, [pc, #36]	; (801aef4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801aed0:	1aa4      	subs	r4, r4, r2
 801aed2:	220e      	movs	r2, #14
 801aed4:	681d      	ldr	r5, [r3, #0]
 801aed6:	4362      	muls	r2, r4
 801aed8:	18ac      	adds	r4, r5, r2
 801aeda:	7b23      	ldrb	r3, [r4, #12]
 801aedc:	f013 0320 	ands.w	r3, r3, #32
 801aee0:	bf17      	itett	ne
 801aee2:	680b      	ldrne	r3, [r1, #0]
 801aee4:	4618      	moveq	r0, r3
 801aee6:	50ab      	strne	r3, [r5, r2]
 801aee8:	684b      	ldrne	r3, [r1, #4]
 801aeea:	bf18      	it	ne
 801aeec:	6063      	strne	r3, [r4, #4]
 801aeee:	bd38      	pop	{r3, r4, r5, pc}
 801aef0:	2400ff94 	.word	0x2400ff94
 801aef4:	2400ff7c 	.word	0x2400ff7c

0801aef8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801aef8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801aefc:	4606      	mov	r6, r0
 801aefe:	460c      	mov	r4, r1
 801af00:	f7ff ffc0 	bl	801ae84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801af04:	b918      	cbnz	r0, 801af0e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801af06:	2000      	movs	r0, #0
 801af08:	b002      	add	sp, #8
 801af0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af0e:	4608      	mov	r0, r1
 801af10:	f7f8 fa95 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 801af14:	2800      	cmp	r0, #0
 801af16:	d1f6      	bne.n	801af06 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801af18:	4b3f      	ldr	r3, [pc, #252]	; (801b018 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801af1a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801b01c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801af1e:	881d      	ldrh	r5, [r3, #0]
 801af20:	f8d9 a000 	ldr.w	sl, [r9]
 801af24:	46c8      	mov	r8, r9
 801af26:	1b73      	subs	r3, r6, r5
 801af28:	250e      	movs	r5, #14
 801af2a:	435d      	muls	r5, r3
 801af2c:	eb0a 0705 	add.w	r7, sl, r5
 801af30:	7b3b      	ldrb	r3, [r7, #12]
 801af32:	f013 0f20 	tst.w	r3, #32
 801af36:	d0e6      	beq.n	801af06 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801af38:	4621      	mov	r1, r4
 801af3a:	4638      	mov	r0, r7
 801af3c:	f7fd f82c 	bl	8017f98 <_ZNK8touchgfx4Rect8includesERKS0_>
 801af40:	2800      	cmp	r0, #0
 801af42:	d1e1      	bne.n	801af08 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801af44:	4639      	mov	r1, r7
 801af46:	4620      	mov	r0, r4
 801af48:	f7fd f826 	bl	8017f98 <_ZNK8touchgfx4Rect8includesERKS0_>
 801af4c:	b108      	cbz	r0, 801af52 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801af4e:	4621      	mov	r1, r4
 801af50:	e020      	b.n	801af94 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801af52:	f9b4 2000 	ldrsh.w	r2, [r4]
 801af56:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801af5a:	429a      	cmp	r2, r3
 801af5c:	d11e      	bne.n	801af9c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801af5e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801af62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801af66:	429a      	cmp	r2, r3
 801af68:	d118      	bne.n	801af9c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801af6a:	6820      	ldr	r0, [r4, #0]
 801af6c:	466b      	mov	r3, sp
 801af6e:	6861      	ldr	r1, [r4, #4]
 801af70:	c303      	stmia	r3!, {r0, r1}
 801af72:	4639      	mov	r1, r7
 801af74:	4668      	mov	r0, sp
 801af76:	f7f8 ffa7 	bl	8013ec8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801af7a:	f8d9 3000 	ldr.w	r3, [r9]
 801af7e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801af82:	442b      	add	r3, r5
 801af84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801af88:	4413      	add	r3, r2
 801af8a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801af8e:	4293      	cmp	r3, r2
 801af90:	dc04      	bgt.n	801af9c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801af92:	4669      	mov	r1, sp
 801af94:	4630      	mov	r0, r6
 801af96:	f7ff ff93 	bl	801aec0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801af9a:	e7b5      	b.n	801af08 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801af9c:	f8d8 3000 	ldr.w	r3, [r8]
 801afa0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801afa4:	442b      	add	r3, r5
 801afa6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801afaa:	4291      	cmp	r1, r2
 801afac:	d119      	bne.n	801afe2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801afae:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801afb2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801afb6:	4291      	cmp	r1, r2
 801afb8:	d113      	bne.n	801afe2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801afba:	6820      	ldr	r0, [r4, #0]
 801afbc:	466a      	mov	r2, sp
 801afbe:	6861      	ldr	r1, [r4, #4]
 801afc0:	c203      	stmia	r2!, {r0, r1}
 801afc2:	4619      	mov	r1, r3
 801afc4:	4668      	mov	r0, sp
 801afc6:	f7f8 ff7f 	bl	8013ec8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801afca:	f8d8 3000 	ldr.w	r3, [r8]
 801afce:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801afd2:	442b      	add	r3, r5
 801afd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801afd8:	4413      	add	r3, r2
 801afda:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801afde:	4293      	cmp	r3, r2
 801afe0:	ddd7      	ble.n	801af92 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801afe2:	4620      	mov	r0, r4
 801afe4:	f7f8 fa2b 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 801afe8:	b990      	cbnz	r0, 801b010 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801afea:	88a7      	ldrh	r7, [r4, #4]
 801afec:	88e3      	ldrh	r3, [r4, #6]
 801afee:	fb17 f703 	smulbb	r7, r7, r3
 801aff2:	f8d8 3000 	ldr.w	r3, [r8]
 801aff6:	441d      	add	r5, r3
 801aff8:	4628      	mov	r0, r5
 801affa:	f7f8 fa20 	bl	801343e <_ZNK8touchgfx4Rect7isEmptyEv>
 801affe:	b948      	cbnz	r0, 801b014 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801b000:	88ab      	ldrh	r3, [r5, #4]
 801b002:	88ea      	ldrh	r2, [r5, #6]
 801b004:	fb13 f302 	smulbb	r3, r3, r2
 801b008:	42bb      	cmp	r3, r7
 801b00a:	f6bf af7c 	bge.w	801af06 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801b00e:	e79e      	b.n	801af4e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801b010:	2700      	movs	r7, #0
 801b012:	e7ee      	b.n	801aff2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801b014:	2300      	movs	r3, #0
 801b016:	e7f7      	b.n	801b008 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801b018:	2400ff94 	.word	0x2400ff94
 801b01c:	2400ff7c 	.word	0x2400ff7c

0801b020 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b020:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b022:	4c24      	ldr	r4, [pc, #144]	; (801b0b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801b024:	6823      	ldr	r3, [r4, #0]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d042      	beq.n	801b0b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b02a:	4a23      	ldr	r2, [pc, #140]	; (801b0b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801b02c:	4d23      	ldr	r5, [pc, #140]	; (801b0bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801b02e:	8811      	ldrh	r1, [r2, #0]
 801b030:	f8b5 c000 	ldrh.w	ip, [r5]
 801b034:	4822      	ldr	r0, [pc, #136]	; (801b0c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b036:	4461      	add	r1, ip
 801b038:	1c4a      	adds	r2, r1, #1
 801b03a:	008f      	lsls	r7, r1, #2
 801b03c:	f022 0201 	bic.w	r2, r2, #1
 801b040:	19de      	adds	r6, r3, r7
 801b042:	0412      	lsls	r2, r2, #16
 801b044:	6006      	str	r6, [r0, #0]
 801b046:	4e1f      	ldr	r6, [pc, #124]	; (801b0c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b048:	0c12      	lsrs	r2, r2, #16
 801b04a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801b04e:	19da      	adds	r2, r3, r7
 801b050:	6032      	str	r2, [r6, #0]
 801b052:	220e      	movs	r2, #14
 801b054:	fb02 f20c 	mul.w	r2, r2, ip
 801b058:	3203      	adds	r2, #3
 801b05a:	f022 0203 	bic.w	r2, r2, #3
 801b05e:	443a      	add	r2, r7
 801b060:	4f19      	ldr	r7, [pc, #100]	; (801b0c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b062:	4413      	add	r3, r2
 801b064:	603b      	str	r3, [r7, #0]
 801b066:	2300      	movs	r3, #0
 801b068:	4f18      	ldr	r7, [pc, #96]	; (801b0cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b06a:	469c      	mov	ip, r3
 801b06c:	803b      	strh	r3, [r7, #0]
 801b06e:	4f18      	ldr	r7, [pc, #96]	; (801b0d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b070:	683f      	ldr	r7, [r7, #0]
 801b072:	1aba      	subs	r2, r7, r2
 801b074:	4f17      	ldr	r7, [pc, #92]	; (801b0d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b076:	603a      	str	r2, [r7, #0]
 801b078:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801b07c:	4a16      	ldr	r2, [pc, #88]	; (801b0d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b07e:	8013      	strh	r3, [r2, #0]
 801b080:	428b      	cmp	r3, r1
 801b082:	d10d      	bne.n	801b0a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801b084:	882d      	ldrh	r5, [r5, #0]
 801b086:	2300      	movs	r3, #0
 801b088:	6830      	ldr	r0, [r6, #0]
 801b08a:	240e      	movs	r4, #14
 801b08c:	429d      	cmp	r5, r3
 801b08e:	d90f      	bls.n	801b0b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b090:	fb04 0203 	mla	r2, r4, r3, r0
 801b094:	3301      	adds	r3, #1
 801b096:	7b11      	ldrb	r1, [r2, #12]
 801b098:	f36f 1145 	bfc	r1, #5, #1
 801b09c:	7311      	strb	r1, [r2, #12]
 801b09e:	e7f5      	b.n	801b08c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801b0a0:	6822      	ldr	r2, [r4, #0]
 801b0a2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b0a6:	6802      	ldr	r2, [r0, #0]
 801b0a8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801b0ac:	3301      	adds	r3, #1
 801b0ae:	e7e7      	b.n	801b080 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801b0b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0b2:	bf00      	nop
 801b0b4:	2400ff78 	.word	0x2400ff78
 801b0b8:	2400ff94 	.word	0x2400ff94
 801b0bc:	2400ff98 	.word	0x2400ff98
 801b0c0:	2400ff8c 	.word	0x2400ff8c
 801b0c4:	2400ff7c 	.word	0x2400ff7c
 801b0c8:	2400ff84 	.word	0x2400ff84
 801b0cc:	2400ff96 	.word	0x2400ff96
 801b0d0:	2400ff80 	.word	0x2400ff80
 801b0d4:	2400ff90 	.word	0x2400ff90
 801b0d8:	2400ff88 	.word	0x2400ff88

0801b0dc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b0dc:	4b06      	ldr	r3, [pc, #24]	; (801b0f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	b943      	cbnz	r3, 801b0f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b0e2:	b139      	cbz	r1, 801b0f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b0e4:	4b05      	ldr	r3, [pc, #20]	; (801b0fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801b0e6:	801a      	strh	r2, [r3, #0]
 801b0e8:	4b05      	ldr	r3, [pc, #20]	; (801b100 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801b0ea:	6019      	str	r1, [r3, #0]
 801b0ec:	4b05      	ldr	r3, [pc, #20]	; (801b104 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801b0ee:	6018      	str	r0, [r3, #0]
 801b0f0:	f7ff bf96 	b.w	801b020 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b0f4:	4770      	bx	lr
 801b0f6:	bf00      	nop
 801b0f8:	2400ff84 	.word	0x2400ff84
 801b0fc:	2400ff98 	.word	0x2400ff98
 801b100:	2400ff80 	.word	0x2400ff80
 801b104:	2400ff78 	.word	0x2400ff78

0801b108 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b108:	b470      	push	{r4, r5, r6}
 801b10a:	4c07      	ldr	r4, [pc, #28]	; (801b128 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b10c:	4605      	mov	r5, r0
 801b10e:	4610      	mov	r0, r2
 801b110:	9a03      	ldr	r2, [sp, #12]
 801b112:	6826      	ldr	r6, [r4, #0]
 801b114:	b936      	cbnz	r6, 801b124 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b116:	6025      	str	r5, [r4, #0]
 801b118:	4c04      	ldr	r4, [pc, #16]	; (801b12c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b11a:	8021      	strh	r1, [r4, #0]
 801b11c:	4619      	mov	r1, r3
 801b11e:	bc70      	pop	{r4, r5, r6}
 801b120:	f7ff bfdc 	b.w	801b0dc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b124:	bc70      	pop	{r4, r5, r6}
 801b126:	4770      	bx	lr
 801b128:	2400ff9c 	.word	0x2400ff9c
 801b12c:	2400ff94 	.word	0x2400ff94

0801b130 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b130:	4a12      	ldr	r2, [pc, #72]	; (801b17c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801b132:	8803      	ldrh	r3, [r0, #0]
 801b134:	8812      	ldrh	r2, [r2, #0]
 801b136:	4293      	cmp	r3, r2
 801b138:	d207      	bcs.n	801b14a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801b13a:	4a11      	ldr	r2, [pc, #68]	; (801b180 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801b13c:	2114      	movs	r1, #20
 801b13e:	6812      	ldr	r2, [r2, #0]
 801b140:	fb01 2303 	mla	r3, r1, r3, r2
 801b144:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801b148:	4770      	bx	lr
 801b14a:	490e      	ldr	r1, [pc, #56]	; (801b184 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b14c:	8809      	ldrh	r1, [r1, #0]
 801b14e:	4411      	add	r1, r2
 801b150:	428b      	cmp	r3, r1
 801b152:	da04      	bge.n	801b15e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801b154:	1a9b      	subs	r3, r3, r2
 801b156:	4a0c      	ldr	r2, [pc, #48]	; (801b188 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b158:	210e      	movs	r1, #14
 801b15a:	6812      	ldr	r2, [r2, #0]
 801b15c:	e7f0      	b.n	801b140 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801b15e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b162:	4293      	cmp	r3, r2
 801b164:	d108      	bne.n	801b178 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801b166:	4b09      	ldr	r3, [pc, #36]	; (801b18c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b168:	781b      	ldrb	r3, [r3, #0]
 801b16a:	b91b      	cbnz	r3, 801b174 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801b16c:	4b08      	ldr	r3, [pc, #32]	; (801b190 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b16e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b172:	4770      	bx	lr
 801b174:	4b07      	ldr	r3, [pc, #28]	; (801b194 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b176:	e7fa      	b.n	801b16e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801b178:	2000      	movs	r0, #0
 801b17a:	4770      	bx	lr
 801b17c:	2400ff94 	.word	0x2400ff94
 801b180:	2400ff9c 	.word	0x2400ff9c
 801b184:	2400ff98 	.word	0x2400ff98
 801b188:	2400ff7c 	.word	0x2400ff7c
 801b18c:	2400ff0c 	.word	0x2400ff0c
 801b190:	2400ff0e 	.word	0x2400ff0e
 801b194:	2400ff10 	.word	0x2400ff10

0801b198 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b198:	4a12      	ldr	r2, [pc, #72]	; (801b1e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801b19a:	8803      	ldrh	r3, [r0, #0]
 801b19c:	8812      	ldrh	r2, [r2, #0]
 801b19e:	4293      	cmp	r3, r2
 801b1a0:	d207      	bcs.n	801b1b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801b1a2:	4a11      	ldr	r2, [pc, #68]	; (801b1e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801b1a4:	2114      	movs	r1, #20
 801b1a6:	6812      	ldr	r2, [r2, #0]
 801b1a8:	fb01 2303 	mla	r3, r1, r3, r2
 801b1ac:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801b1b0:	4770      	bx	lr
 801b1b2:	490e      	ldr	r1, [pc, #56]	; (801b1ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b1b4:	8809      	ldrh	r1, [r1, #0]
 801b1b6:	4411      	add	r1, r2
 801b1b8:	428b      	cmp	r3, r1
 801b1ba:	da04      	bge.n	801b1c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801b1bc:	1a9b      	subs	r3, r3, r2
 801b1be:	4a0c      	ldr	r2, [pc, #48]	; (801b1f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b1c0:	210e      	movs	r1, #14
 801b1c2:	6812      	ldr	r2, [r2, #0]
 801b1c4:	e7f0      	b.n	801b1a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801b1c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b1ca:	4293      	cmp	r3, r2
 801b1cc:	d108      	bne.n	801b1e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801b1ce:	4b09      	ldr	r3, [pc, #36]	; (801b1f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b1d0:	781b      	ldrb	r3, [r3, #0]
 801b1d2:	b91b      	cbnz	r3, 801b1dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801b1d4:	4b08      	ldr	r3, [pc, #32]	; (801b1f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b1d6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b1da:	4770      	bx	lr
 801b1dc:	4b07      	ldr	r3, [pc, #28]	; (801b1fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b1de:	e7fa      	b.n	801b1d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801b1e0:	2000      	movs	r0, #0
 801b1e2:	4770      	bx	lr
 801b1e4:	2400ff94 	.word	0x2400ff94
 801b1e8:	2400ff9c 	.word	0x2400ff9c
 801b1ec:	2400ff98 	.word	0x2400ff98
 801b1f0:	2400ff7c 	.word	0x2400ff7c
 801b1f4:	2400ff0c 	.word	0x2400ff0c
 801b1f8:	2400ff10 	.word	0x2400ff10
 801b1fc:	2400ff0e 	.word	0x2400ff0e

0801b200 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b200:	4a1f      	ldr	r2, [pc, #124]	; (801b280 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801b202:	b510      	push	{r4, lr}
 801b204:	880b      	ldrh	r3, [r1, #0]
 801b206:	8812      	ldrh	r2, [r2, #0]
 801b208:	4293      	cmp	r3, r2
 801b20a:	d213      	bcs.n	801b234 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801b20c:	4a1d      	ldr	r2, [pc, #116]	; (801b284 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801b20e:	2114      	movs	r1, #20
 801b210:	6812      	ldr	r2, [r2, #0]
 801b212:	fb01 2303 	mla	r3, r1, r3, r2
 801b216:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b21a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b21e:	8a1a      	ldrh	r2, [r3, #16]
 801b220:	8a5b      	ldrh	r3, [r3, #18]
 801b222:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b226:	8004      	strh	r4, [r0, #0]
 801b228:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b22c:	8041      	strh	r1, [r0, #2]
 801b22e:	8082      	strh	r2, [r0, #4]
 801b230:	80c3      	strh	r3, [r0, #6]
 801b232:	e00e      	b.n	801b252 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801b234:	4914      	ldr	r1, [pc, #80]	; (801b288 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801b236:	8809      	ldrh	r1, [r1, #0]
 801b238:	4411      	add	r1, r2
 801b23a:	428b      	cmp	r3, r1
 801b23c:	da0a      	bge.n	801b254 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801b23e:	1a9b      	subs	r3, r3, r2
 801b240:	4a12      	ldr	r2, [pc, #72]	; (801b28c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801b242:	210e      	movs	r1, #14
 801b244:	6812      	ldr	r2, [r2, #0]
 801b246:	fb01 2303 	mla	r3, r1, r3, r2
 801b24a:	681a      	ldr	r2, [r3, #0]
 801b24c:	6002      	str	r2, [r0, #0]
 801b24e:	685a      	ldr	r2, [r3, #4]
 801b250:	6042      	str	r2, [r0, #4]
 801b252:	bd10      	pop	{r4, pc}
 801b254:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b258:	4293      	cmp	r3, r2
 801b25a:	d10b      	bne.n	801b274 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801b25c:	4b0c      	ldr	r3, [pc, #48]	; (801b290 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b25e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b262:	4b0c      	ldr	r3, [pc, #48]	; (801b294 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b264:	8081      	strh	r1, [r0, #4]
 801b266:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b26a:	2300      	movs	r3, #0
 801b26c:	80c2      	strh	r2, [r0, #6]
 801b26e:	8003      	strh	r3, [r0, #0]
 801b270:	8043      	strh	r3, [r0, #2]
 801b272:	e7ee      	b.n	801b252 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801b274:	2300      	movs	r3, #0
 801b276:	8003      	strh	r3, [r0, #0]
 801b278:	8043      	strh	r3, [r0, #2]
 801b27a:	8083      	strh	r3, [r0, #4]
 801b27c:	e7d8      	b.n	801b230 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801b27e:	bf00      	nop
 801b280:	2400ff94 	.word	0x2400ff94
 801b284:	2400ff9c 	.word	0x2400ff9c
 801b288:	2400ff98 	.word	0x2400ff98
 801b28c:	2400ff7c 	.word	0x2400ff7c
 801b290:	2400ff08 	.word	0x2400ff08
 801b294:	2400ff0a 	.word	0x2400ff0a

0801b298 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b298:	4a12      	ldr	r2, [pc, #72]	; (801b2e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b29a:	8803      	ldrh	r3, [r0, #0]
 801b29c:	8811      	ldrh	r1, [r2, #0]
 801b29e:	428b      	cmp	r3, r1
 801b2a0:	d20b      	bcs.n	801b2ba <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801b2a2:	4a11      	ldr	r2, [pc, #68]	; (801b2e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b2a4:	6812      	ldr	r2, [r2, #0]
 801b2a6:	b112      	cbz	r2, 801b2ae <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b2a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b2ac:	b9c0      	cbnz	r0, 801b2e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801b2ae:	4a0f      	ldr	r2, [pc, #60]	; (801b2ec <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b2b0:	6811      	ldr	r1, [r2, #0]
 801b2b2:	2214      	movs	r2, #20
 801b2b4:	4353      	muls	r3, r2
 801b2b6:	58c8      	ldr	r0, [r1, r3]
 801b2b8:	4770      	bx	lr
 801b2ba:	4a0d      	ldr	r2, [pc, #52]	; (801b2f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b2bc:	8812      	ldrh	r2, [r2, #0]
 801b2be:	440a      	add	r2, r1
 801b2c0:	4293      	cmp	r3, r2
 801b2c2:	da04      	bge.n	801b2ce <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801b2c4:	4a08      	ldr	r2, [pc, #32]	; (801b2e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b2c6:	6812      	ldr	r2, [r2, #0]
 801b2c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b2cc:	4770      	bx	lr
 801b2ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b2d2:	4293      	cmp	r3, r2
 801b2d4:	d103      	bne.n	801b2de <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b2d6:	4b07      	ldr	r3, [pc, #28]	; (801b2f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b2dc:	4770      	bx	lr
 801b2de:	2000      	movs	r0, #0
 801b2e0:	4770      	bx	lr
 801b2e2:	bf00      	nop
 801b2e4:	2400ff94 	.word	0x2400ff94
 801b2e8:	2400ff78 	.word	0x2400ff78
 801b2ec:	2400ff9c 	.word	0x2400ff9c
 801b2f0:	2400ff98 	.word	0x2400ff98
 801b2f4:	2400ff14 	.word	0x2400ff14

0801b2f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b2f8:	4b24      	ldr	r3, [pc, #144]	; (801b38c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b2fa:	8802      	ldrh	r2, [r0, #0]
 801b2fc:	8818      	ldrh	r0, [r3, #0]
 801b2fe:	4282      	cmp	r2, r0
 801b300:	d221      	bcs.n	801b346 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801b302:	4b23      	ldr	r3, [pc, #140]	; (801b390 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b304:	6819      	ldr	r1, [r3, #0]
 801b306:	2314      	movs	r3, #20
 801b308:	fb03 1302 	mla	r3, r3, r2, r1
 801b30c:	6858      	ldr	r0, [r3, #4]
 801b30e:	2800      	cmp	r0, #0
 801b310:	d03a      	beq.n	801b388 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b312:	4920      	ldr	r1, [pc, #128]	; (801b394 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b314:	6809      	ldr	r1, [r1, #0]
 801b316:	2900      	cmp	r1, #0
 801b318:	d036      	beq.n	801b388 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b31a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b31e:	2900      	cmp	r1, #0
 801b320:	d032      	beq.n	801b388 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b322:	891a      	ldrh	r2, [r3, #8]
 801b324:	8958      	ldrh	r0, [r3, #10]
 801b326:	4350      	muls	r0, r2
 801b328:	7c5a      	ldrb	r2, [r3, #17]
 801b32a:	7cdb      	ldrb	r3, [r3, #19]
 801b32c:	0952      	lsrs	r2, r2, #5
 801b32e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b332:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b336:	2b0b      	cmp	r3, #11
 801b338:	bf18      	it	ne
 801b33a:	0040      	lslne	r0, r0, #1
 801b33c:	3003      	adds	r0, #3
 801b33e:	f020 0003 	bic.w	r0, r0, #3
 801b342:	4408      	add	r0, r1
 801b344:	4770      	bx	lr
 801b346:	4b14      	ldr	r3, [pc, #80]	; (801b398 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b348:	881b      	ldrh	r3, [r3, #0]
 801b34a:	4403      	add	r3, r0
 801b34c:	429a      	cmp	r2, r3
 801b34e:	da1a      	bge.n	801b386 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b350:	4b12      	ldr	r3, [pc, #72]	; (801b39c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b352:	1a10      	subs	r0, r2, r0
 801b354:	210e      	movs	r1, #14
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	fb01 3000 	mla	r0, r1, r0, r3
 801b35c:	7b03      	ldrb	r3, [r0, #12]
 801b35e:	f003 031f 	and.w	r3, r3, #31
 801b362:	2b0b      	cmp	r3, #11
 801b364:	d10b      	bne.n	801b37e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801b366:	8903      	ldrh	r3, [r0, #8]
 801b368:	8940      	ldrh	r0, [r0, #10]
 801b36a:	4358      	muls	r0, r3
 801b36c:	4b09      	ldr	r3, [pc, #36]	; (801b394 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b36e:	3003      	adds	r0, #3
 801b370:	6819      	ldr	r1, [r3, #0]
 801b372:	f020 0303 	bic.w	r3, r0, #3
 801b376:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b37a:	4418      	add	r0, r3
 801b37c:	4770      	bx	lr
 801b37e:	2b0d      	cmp	r3, #13
 801b380:	d101      	bne.n	801b386 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b382:	300d      	adds	r0, #13
 801b384:	4770      	bx	lr
 801b386:	2000      	movs	r0, #0
 801b388:	4770      	bx	lr
 801b38a:	bf00      	nop
 801b38c:	2400ff94 	.word	0x2400ff94
 801b390:	2400ff9c 	.word	0x2400ff9c
 801b394:	2400ff78 	.word	0x2400ff78
 801b398:	2400ff98 	.word	0x2400ff98
 801b39c:	2400ff7c 	.word	0x2400ff7c

0801b3a0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b3a0:	4a17      	ldr	r2, [pc, #92]	; (801b400 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801b3a2:	b510      	push	{r4, lr}
 801b3a4:	8803      	ldrh	r3, [r0, #0]
 801b3a6:	8812      	ldrh	r2, [r2, #0]
 801b3a8:	4293      	cmp	r3, r2
 801b3aa:	d20c      	bcs.n	801b3c6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b3ac:	4a15      	ldr	r2, [pc, #84]	; (801b404 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801b3ae:	2114      	movs	r1, #20
 801b3b0:	6812      	ldr	r2, [r2, #0]
 801b3b2:	fb01 2303 	mla	r3, r1, r3, r2
 801b3b6:	7c58      	ldrb	r0, [r3, #17]
 801b3b8:	0942      	lsrs	r2, r0, #5
 801b3ba:	7cd8      	ldrb	r0, [r3, #19]
 801b3bc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b3c0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b3c4:	bd10      	pop	{r4, pc}
 801b3c6:	4910      	ldr	r1, [pc, #64]	; (801b408 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b3c8:	8809      	ldrh	r1, [r1, #0]
 801b3ca:	4411      	add	r1, r2
 801b3cc:	428b      	cmp	r3, r1
 801b3ce:	da09      	bge.n	801b3e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b3d0:	1a9b      	subs	r3, r3, r2
 801b3d2:	4a0e      	ldr	r2, [pc, #56]	; (801b40c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b3d4:	210e      	movs	r1, #14
 801b3d6:	6812      	ldr	r2, [r2, #0]
 801b3d8:	fb01 2303 	mla	r3, r1, r3, r2
 801b3dc:	7b18      	ldrb	r0, [r3, #12]
 801b3de:	f000 001f 	and.w	r0, r0, #31
 801b3e2:	e7ef      	b.n	801b3c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b3e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b3e8:	4293      	cmp	r3, r2
 801b3ea:	d106      	bne.n	801b3fa <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b3ec:	f7f9 fb0c 	bl	8014a08 <_ZN8touchgfx3HAL3lcdEv>
 801b3f0:	6803      	ldr	r3, [r0, #0]
 801b3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3f8:	4718      	bx	r3
 801b3fa:	2000      	movs	r0, #0
 801b3fc:	e7e2      	b.n	801b3c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b3fe:	bf00      	nop
 801b400:	2400ff94 	.word	0x2400ff94
 801b404:	2400ff9c 	.word	0x2400ff9c
 801b408:	2400ff98 	.word	0x2400ff98
 801b40c:	2400ff7c 	.word	0x2400ff7c

0801b410 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b410:	2018      	movs	r0, #24
 801b412:	4770      	bx	lr

0801b414 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b414:	2001      	movs	r0, #1
 801b416:	4770      	bx	lr

0801b418 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801b418:	4b02      	ldr	r3, [pc, #8]	; (801b424 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801b41a:	8818      	ldrh	r0, [r3, #0]
 801b41c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b420:	b280      	uxth	r0, r0
 801b422:	4770      	bx	lr
 801b424:	2400ff0e 	.word	0x2400ff0e

0801b428 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b428:	2bff      	cmp	r3, #255	; 0xff
 801b42a:	d040      	beq.n	801b4ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801b42c:	2a2c      	cmp	r2, #44	; 0x2c
 801b42e:	d02a      	beq.n	801b486 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801b430:	d80f      	bhi.n	801b452 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801b432:	2a08      	cmp	r2, #8
 801b434:	d037      	beq.n	801b4a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801b436:	d805      	bhi.n	801b444 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801b438:	2a04      	cmp	r2, #4
 801b43a:	d032      	beq.n	801b4a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801b43c:	2a05      	cmp	r2, #5
 801b43e:	d02e      	beq.n	801b49e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801b440:	2000      	movs	r0, #0
 801b442:	4770      	bx	lr
 801b444:	2a0a      	cmp	r2, #10
 801b446:	d02e      	beq.n	801b4a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801b448:	d301      	bcc.n	801b44e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801b44a:	2a0b      	cmp	r2, #11
 801b44c:	d1f8      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b44e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801b450:	4770      	bx	lr
 801b452:	2a30      	cmp	r2, #48	; 0x30
 801b454:	d029      	beq.n	801b4aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801b456:	d808      	bhi.n	801b46a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801b458:	2a2e      	cmp	r2, #46	; 0x2e
 801b45a:	684b      	ldr	r3, [r1, #4]
 801b45c:	d01a      	beq.n	801b494 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801b45e:	d90b      	bls.n	801b478 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801b460:	781b      	ldrb	r3, [r3, #0]
 801b462:	2b00      	cmp	r3, #0
 801b464:	d1ec      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b466:	6a00      	ldr	r0, [r0, #32]
 801b468:	4770      	bx	lr
 801b46a:	2a32      	cmp	r2, #50	; 0x32
 801b46c:	d01d      	beq.n	801b4aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801b46e:	d301      	bcc.n	801b474 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801b470:	2a33      	cmp	r2, #51	; 0x33
 801b472:	d1e5      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b474:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801b476:	4770      	bx	lr
 801b478:	781b      	ldrb	r3, [r3, #0]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d0f3      	beq.n	801b466 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801b47e:	2b01      	cmp	r3, #1
 801b480:	d1de      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b482:	6900      	ldr	r0, [r0, #16]
 801b484:	4770      	bx	lr
 801b486:	684b      	ldr	r3, [r1, #4]
 801b488:	781b      	ldrb	r3, [r3, #0]
 801b48a:	b133      	cbz	r3, 801b49a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801b48c:	2b01      	cmp	r3, #1
 801b48e:	d1d7      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b490:	6880      	ldr	r0, [r0, #8]
 801b492:	4770      	bx	lr
 801b494:	781b      	ldrb	r3, [r3, #0]
 801b496:	2b00      	cmp	r3, #0
 801b498:	d1d2      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b49a:	6980      	ldr	r0, [r0, #24]
 801b49c:	4770      	bx	lr
 801b49e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b4a0:	4770      	bx	lr
 801b4a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b4a4:	4770      	bx	lr
 801b4a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b4a8:	4770      	bx	lr
 801b4aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801b4ac:	4770      	bx	lr
 801b4ae:	2a2c      	cmp	r2, #44	; 0x2c
 801b4b0:	d02a      	beq.n	801b508 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801b4b2:	d80f      	bhi.n	801b4d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801b4b4:	2a08      	cmp	r2, #8
 801b4b6:	d035      	beq.n	801b524 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801b4b8:	d805      	bhi.n	801b4c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b4ba:	2a04      	cmp	r2, #4
 801b4bc:	d030      	beq.n	801b520 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801b4be:	2a05      	cmp	r2, #5
 801b4c0:	d1be      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b4c2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b4c4:	4770      	bx	lr
 801b4c6:	2a0a      	cmp	r2, #10
 801b4c8:	d02c      	beq.n	801b524 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801b4ca:	d301      	bcc.n	801b4d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801b4cc:	2a0b      	cmp	r2, #11
 801b4ce:	d1b7      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b4d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b4d2:	4770      	bx	lr
 801b4d4:	2a30      	cmp	r2, #48	; 0x30
 801b4d6:	d027      	beq.n	801b528 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801b4d8:	d808      	bhi.n	801b4ec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801b4da:	2a2e      	cmp	r2, #46	; 0x2e
 801b4dc:	684b      	ldr	r3, [r1, #4]
 801b4de:	d01a      	beq.n	801b516 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801b4e0:	d90b      	bls.n	801b4fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801b4e2:	781b      	ldrb	r3, [r3, #0]
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d1ab      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b4e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b4ea:	4770      	bx	lr
 801b4ec:	2a32      	cmp	r2, #50	; 0x32
 801b4ee:	d01b      	beq.n	801b528 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801b4f0:	d301      	bcc.n	801b4f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801b4f2:	2a33      	cmp	r2, #51	; 0x33
 801b4f4:	d1a4      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b4f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b4f8:	4770      	bx	lr
 801b4fa:	781b      	ldrb	r3, [r3, #0]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d0f3      	beq.n	801b4e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801b500:	2b01      	cmp	r3, #1
 801b502:	d19d      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b504:	6940      	ldr	r0, [r0, #20]
 801b506:	4770      	bx	lr
 801b508:	684b      	ldr	r3, [r1, #4]
 801b50a:	781b      	ldrb	r3, [r3, #0]
 801b50c:	b133      	cbz	r3, 801b51c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801b50e:	2b01      	cmp	r3, #1
 801b510:	d196      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b512:	68c0      	ldr	r0, [r0, #12]
 801b514:	4770      	bx	lr
 801b516:	781b      	ldrb	r3, [r3, #0]
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d191      	bne.n	801b440 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b51c:	69c0      	ldr	r0, [r0, #28]
 801b51e:	4770      	bx	lr
 801b520:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b522:	4770      	bx	lr
 801b524:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801b526:	4770      	bx	lr
 801b528:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801b52a:	4770      	bx	lr

0801b52c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b530:	b085      	sub	sp, #20
 801b532:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b534:	9203      	str	r2, [sp, #12]
 801b536:	6870      	ldr	r0, [r6, #4]
 801b538:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b53c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801b540:	9101      	str	r1, [sp, #4]
 801b542:	fa1f f885 	uxth.w	r8, r5
 801b546:	43ed      	mvns	r5, r5
 801b548:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b54c:	b2ed      	uxtb	r5, r5
 801b54e:	fb00 2404 	mla	r4, r0, r4, r2
 801b552:	6832      	ldr	r2, [r6, #0]
 801b554:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b558:	4414      	add	r4, r2
 801b55a:	f8dc 2000 	ldr.w	r2, [ip]
 801b55e:	9202      	str	r2, [sp, #8]
 801b560:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b564:	f102 0e04 	add.w	lr, r2, #4
 801b568:	9a01      	ldr	r2, [sp, #4]
 801b56a:	2a00      	cmp	r2, #0
 801b56c:	dc03      	bgt.n	801b576 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b56e:	9a03      	ldr	r2, [sp, #12]
 801b570:	2a00      	cmp	r2, #0
 801b572:	f340 8116 	ble.w	801b7a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b578:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801b57c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b580:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b582:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801b586:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	dd0e      	ble.n	801b5ac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b58e:	1406      	asrs	r6, r0, #16
 801b590:	d405      	bmi.n	801b59e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b592:	4556      	cmp	r6, sl
 801b594:	da03      	bge.n	801b59e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b596:	1416      	asrs	r6, r2, #16
 801b598:	d401      	bmi.n	801b59e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b59a:	454e      	cmp	r6, r9
 801b59c:	db07      	blt.n	801b5ae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b59e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b5a0:	3b01      	subs	r3, #1
 801b5a2:	3403      	adds	r4, #3
 801b5a4:	4430      	add	r0, r6
 801b5a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b5a8:	4432      	add	r2, r6
 801b5aa:	e7ee      	b.n	801b58a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b5ac:	d063      	beq.n	801b676 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b5ae:	1e5e      	subs	r6, r3, #1
 801b5b0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801b5b2:	fb07 0706 	mla	r7, r7, r6, r0
 801b5b6:	143f      	asrs	r7, r7, #16
 801b5b8:	d454      	bmi.n	801b664 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b5ba:	4557      	cmp	r7, sl
 801b5bc:	da52      	bge.n	801b664 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b5be:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801b5c0:	fb07 2606 	mla	r6, r7, r6, r2
 801b5c4:	1436      	asrs	r6, r6, #16
 801b5c6:	d44d      	bmi.n	801b664 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b5c8:	454e      	cmp	r6, r9
 801b5ca:	da4b      	bge.n	801b664 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b5cc:	1ce6      	adds	r6, r4, #3
 801b5ce:	4699      	mov	r9, r3
 801b5d0:	f1b9 0f00 	cmp.w	r9, #0
 801b5d4:	f106 0603 	add.w	r6, r6, #3
 801b5d8:	dd48      	ble.n	801b66c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801b5da:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801b5de:	1417      	asrs	r7, r2, #16
 801b5e0:	9902      	ldr	r1, [sp, #8]
 801b5e2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b5e6:	f109 39ff 	add.w	r9, r9, #4294967295
 801b5ea:	fb0b 1707 	mla	r7, fp, r7, r1
 801b5ee:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b5f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b5f4:	f817 700a 	ldrb.w	r7, [r7, sl]
 801b5f8:	fb1b fb05 	smulbb	fp, fp, r5
 801b5fc:	4408      	add	r0, r1
 801b5fe:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b600:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b604:	440a      	add	r2, r1
 801b606:	eb0e 0a07 	add.w	sl, lr, r7
 801b60a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801b60e:	fb07 b708 	mla	r7, r7, r8, fp
 801b612:	b2bf      	uxth	r7, r7
 801b614:	f107 0b01 	add.w	fp, r7, #1
 801b618:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b61c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b620:	fb1b fb05 	smulbb	fp, fp, r5
 801b624:	123f      	asrs	r7, r7, #8
 801b626:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b62a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b62e:	fb07 b708 	mla	r7, r7, r8, fp
 801b632:	b2bf      	uxth	r7, r7
 801b634:	f107 0b01 	add.w	fp, r7, #1
 801b638:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b63c:	123f      	asrs	r7, r7, #8
 801b63e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b642:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b646:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b64a:	fb1a fa05 	smulbb	sl, sl, r5
 801b64e:	fb07 a708 	mla	r7, r7, r8, sl
 801b652:	b2bf      	uxth	r7, r7
 801b654:	f107 0a01 	add.w	sl, r7, #1
 801b658:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b65c:	123f      	asrs	r7, r7, #8
 801b65e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b662:	e7b5      	b.n	801b5d0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801b664:	2700      	movs	r7, #0
 801b666:	1bde      	subs	r6, r3, r7
 801b668:	2e00      	cmp	r6, #0
 801b66a:	dc42      	bgt.n	801b6f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801b66c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b670:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b674:	441c      	add	r4, r3
 801b676:	9b01      	ldr	r3, [sp, #4]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	f340 8092 	ble.w	801b7a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b67e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b684:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b688:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b68c:	eef0 6a62 	vmov.f32	s13, s5
 801b690:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b694:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b698:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b69c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b6a0:	eef0 6a43 	vmov.f32	s13, s6
 801b6a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b6a8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b6ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b6b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b6b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b6b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b6bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b6c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b6c4:	ee12 2a90 	vmov	r2, s5
 801b6c8:	eef0 2a47 	vmov.f32	s5, s14
 801b6cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b6d0:	ee13 2a10 	vmov	r2, s6
 801b6d4:	9311      	str	r3, [sp, #68]	; 0x44
 801b6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6d8:	eeb0 3a67 	vmov.f32	s6, s15
 801b6dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b6e0:	9312      	str	r3, [sp, #72]	; 0x48
 801b6e2:	9b01      	ldr	r3, [sp, #4]
 801b6e4:	9a03      	ldr	r2, [sp, #12]
 801b6e6:	3b01      	subs	r3, #1
 801b6e8:	9301      	str	r3, [sp, #4]
 801b6ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b6ec:	bf08      	it	eq
 801b6ee:	4613      	moveq	r3, r2
 801b6f0:	e73a      	b.n	801b568 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b6f2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b6f6:	d44e      	bmi.n	801b796 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b6f8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b6fc:	4556      	cmp	r6, sl
 801b6fe:	dd4a      	ble.n	801b796 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b700:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801b704:	d447      	bmi.n	801b796 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b706:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801b70a:	4559      	cmp	r1, fp
 801b70c:	dd43      	ble.n	801b796 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b70e:	fa0f f986 	sxth.w	r9, r6
 801b712:	9902      	ldr	r1, [sp, #8]
 801b714:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b718:	fb0b 1909 	mla	r9, fp, r9, r1
 801b71c:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b720:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b724:	fb1b fb05 	smulbb	fp, fp, r5
 801b728:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b72c:	eb0e 0a09 	add.w	sl, lr, r9
 801b730:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801b734:	fb09 b908 	mla	r9, r9, r8, fp
 801b738:	fa1f f989 	uxth.w	r9, r9
 801b73c:	f109 0b01 	add.w	fp, r9, #1
 801b740:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b744:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b748:	f804 9006 	strb.w	r9, [r4, r6]
 801b74c:	4426      	add	r6, r4
 801b74e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b752:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b756:	fb1b fb05 	smulbb	fp, fp, r5
 801b75a:	fb09 b908 	mla	r9, r9, r8, fp
 801b75e:	fa1f f989 	uxth.w	r9, r9
 801b762:	f109 0b01 	add.w	fp, r9, #1
 801b766:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b76a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b76e:	f886 9001 	strb.w	r9, [r6, #1]
 801b772:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b776:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b77a:	fb1a fa05 	smulbb	sl, sl, r5
 801b77e:	fb09 a908 	mla	r9, r9, r8, sl
 801b782:	fa1f f989 	uxth.w	r9, r9
 801b786:	f109 0a01 	add.w	sl, r9, #1
 801b78a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b78e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b792:	f886 9002 	strb.w	r9, [r6, #2]
 801b796:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b798:	3701      	adds	r7, #1
 801b79a:	4408      	add	r0, r1
 801b79c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b79e:	440a      	add	r2, r1
 801b7a0:	e761      	b.n	801b666 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b7a2:	b005      	add	sp, #20
 801b7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b7ae:	4693      	mov	fp, r2
 801b7b0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b7b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b7b6:	6868      	ldr	r0, [r5, #4]
 801b7b8:	6877      	ldr	r7, [r6, #4]
 801b7ba:	9100      	str	r1, [sp, #0]
 801b7bc:	3704      	adds	r7, #4
 801b7be:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b7c2:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801b7c6:	fb00 2404 	mla	r4, r0, r4, r2
 801b7ca:	682a      	ldr	r2, [r5, #0]
 801b7cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b7d0:	4414      	add	r4, r2
 801b7d2:	6832      	ldr	r2, [r6, #0]
 801b7d4:	9201      	str	r2, [sp, #4]
 801b7d6:	9a00      	ldr	r2, [sp, #0]
 801b7d8:	2a00      	cmp	r2, #0
 801b7da:	dc03      	bgt.n	801b7e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b7dc:	f1bb 0f00 	cmp.w	fp, #0
 801b7e0:	f340 80bc 	ble.w	801b95c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b7e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b7e6:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801b7ea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b7ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b7f0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801b7f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	dd0c      	ble.n	801b816 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b7fc:	1405      	asrs	r5, r0, #16
 801b7fe:	d405      	bmi.n	801b80c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b800:	4555      	cmp	r5, sl
 801b802:	da03      	bge.n	801b80c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b804:	1415      	asrs	r5, r2, #16
 801b806:	d401      	bmi.n	801b80c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b808:	454d      	cmp	r5, r9
 801b80a:	db05      	blt.n	801b818 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b80c:	4440      	add	r0, r8
 801b80e:	4472      	add	r2, lr
 801b810:	3b01      	subs	r3, #1
 801b812:	3403      	adds	r4, #3
 801b814:	e7f0      	b.n	801b7f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b816:	d03f      	beq.n	801b898 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801b818:	1e5d      	subs	r5, r3, #1
 801b81a:	fb08 0c05 	mla	ip, r8, r5, r0
 801b81e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801b822:	d42e      	bmi.n	801b882 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b824:	45d4      	cmp	ip, sl
 801b826:	da2c      	bge.n	801b882 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b828:	fb0e 2505 	mla	r5, lr, r5, r2
 801b82c:	142d      	asrs	r5, r5, #16
 801b82e:	d428      	bmi.n	801b882 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b830:	454d      	cmp	r5, r9
 801b832:	da26      	bge.n	801b882 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b834:	1ce5      	adds	r5, r4, #3
 801b836:	469c      	mov	ip, r3
 801b838:	f1bc 0f00 	cmp.w	ip, #0
 801b83c:	f105 0503 	add.w	r5, r5, #3
 801b840:	dd25      	ble.n	801b88e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801b842:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b846:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b84a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b84e:	4472      	add	r2, lr
 801b850:	468a      	mov	sl, r1
 801b852:	9901      	ldr	r1, [sp, #4]
 801b854:	fb0a 1909 	mla	r9, sl, r9, r1
 801b858:	1401      	asrs	r1, r0, #16
 801b85a:	4440      	add	r0, r8
 801b85c:	f819 9001 	ldrb.w	r9, [r9, r1]
 801b860:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b864:	eb07 0a09 	add.w	sl, r7, r9
 801b868:	f817 9009 	ldrb.w	r9, [r7, r9]
 801b86c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b870:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b874:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b878:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b87c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b880:	e7da      	b.n	801b838 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b882:	2500      	movs	r5, #0
 801b884:	eba3 0c05 	sub.w	ip, r3, r5
 801b888:	f1bc 0f00 	cmp.w	ip, #0
 801b88c:	dc3b      	bgt.n	801b906 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b88e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b896:	441c      	add	r4, r3
 801b898:	9b00      	ldr	r3, [sp, #0]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	dd5e      	ble.n	801b95c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b89e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8a8:	eeb0 6a62 	vmov.f32	s12, s5
 801b8ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b8b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8b8:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b8bc:	eeb0 6a43 	vmov.f32	s12, s6
 801b8c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8c4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801b8c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b8d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b8d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b8dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b8e0:	ee12 2a90 	vmov	r2, s5
 801b8e4:	eef0 2a47 	vmov.f32	s5, s14
 801b8e8:	fb92 f8f3 	sdiv	r8, r2, r3
 801b8ec:	ee13 2a10 	vmov	r2, s6
 801b8f0:	eeb0 3a67 	vmov.f32	s6, s15
 801b8f4:	fb92 fef3 	sdiv	lr, r2, r3
 801b8f8:	9b00      	ldr	r3, [sp, #0]
 801b8fa:	3b01      	subs	r3, #1
 801b8fc:	9300      	str	r3, [sp, #0]
 801b8fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b900:	bf08      	it	eq
 801b902:	465b      	moveq	r3, fp
 801b904:	e767      	b.n	801b7d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b906:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b90a:	d423      	bmi.n	801b954 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b90c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801b910:	45cc      	cmp	ip, r9
 801b912:	dd1f      	ble.n	801b954 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b914:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b918:	d41c      	bmi.n	801b954 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b91a:	68f1      	ldr	r1, [r6, #12]
 801b91c:	4551      	cmp	r1, sl
 801b91e:	dd19      	ble.n	801b954 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b920:	fa0f fc8c 	sxth.w	ip, ip
 801b924:	9901      	ldr	r1, [sp, #4]
 801b926:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801b92a:	f81c c009 	ldrb.w	ip, [ip, r9]
 801b92e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b932:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801b936:	eb07 090c 	add.w	r9, r7, ip
 801b93a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801b93e:	f804 a00c 	strb.w	sl, [r4, ip]
 801b942:	44a4      	add	ip, r4
 801b944:	f899 a001 	ldrb.w	sl, [r9, #1]
 801b948:	f88c a001 	strb.w	sl, [ip, #1]
 801b94c:	f899 9002 	ldrb.w	r9, [r9, #2]
 801b950:	f88c 9002 	strb.w	r9, [ip, #2]
 801b954:	4440      	add	r0, r8
 801b956:	4472      	add	r2, lr
 801b958:	3501      	adds	r5, #1
 801b95a:	e793      	b.n	801b884 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801b95c:	b003      	add	sp, #12
 801b95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b962 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b966:	b085      	sub	sp, #20
 801b968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b96c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b96e:	9202      	str	r2, [sp, #8]
 801b970:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b974:	6860      	ldr	r0, [r4, #4]
 801b976:	9203      	str	r2, [sp, #12]
 801b978:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b97c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801b980:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b984:	fb00 2505 	mla	r5, r0, r5, r2
 801b988:	6822      	ldr	r2, [r4, #0]
 801b98a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b98e:	4415      	add	r5, r2
 801b990:	f8dc 2000 	ldr.w	r2, [ip]
 801b994:	9200      	str	r2, [sp, #0]
 801b996:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b99a:	3204      	adds	r2, #4
 801b99c:	9201      	str	r2, [sp, #4]
 801b99e:	2900      	cmp	r1, #0
 801b9a0:	dc03      	bgt.n	801b9aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b9a2:	9a02      	ldr	r2, [sp, #8]
 801b9a4:	2a00      	cmp	r2, #0
 801b9a6:	f340 8127 	ble.w	801bbf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801b9aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b9ac:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b9b0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b9b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b9b6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b9ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	dd0d      	ble.n	801b9de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b9c2:	1422      	asrs	r2, r4, #16
 801b9c4:	d405      	bmi.n	801b9d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b9c6:	4542      	cmp	r2, r8
 801b9c8:	da03      	bge.n	801b9d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b9ca:	1402      	asrs	r2, r0, #16
 801b9cc:	d401      	bmi.n	801b9d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b9ce:	42ba      	cmp	r2, r7
 801b9d0:	db06      	blt.n	801b9e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b9d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9d4:	4474      	add	r4, lr
 801b9d6:	3b01      	subs	r3, #1
 801b9d8:	3503      	adds	r5, #3
 801b9da:	4410      	add	r0, r2
 801b9dc:	e7ef      	b.n	801b9be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b9de:	d075      	beq.n	801bacc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801b9e0:	1e5a      	subs	r2, r3, #1
 801b9e2:	fb0e 4602 	mla	r6, lr, r2, r4
 801b9e6:	1436      	asrs	r6, r6, #16
 801b9e8:	d465      	bmi.n	801bab6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b9ea:	4546      	cmp	r6, r8
 801b9ec:	da63      	bge.n	801bab6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b9ee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b9f0:	fb06 0202 	mla	r2, r6, r2, r0
 801b9f4:	1412      	asrs	r2, r2, #16
 801b9f6:	d45e      	bmi.n	801bab6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b9f8:	42ba      	cmp	r2, r7
 801b9fa:	da5c      	bge.n	801bab6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b9fc:	1cef      	adds	r7, r5, #3
 801b9fe:	4699      	mov	r9, r3
 801ba00:	f1b9 0f00 	cmp.w	r9, #0
 801ba04:	dd5d      	ble.n	801bac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801ba06:	1402      	asrs	r2, r0, #16
 801ba08:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ba0c:	1426      	asrs	r6, r4, #16
 801ba0e:	4692      	mov	sl, r2
 801ba10:	9a00      	ldr	r2, [sp, #0]
 801ba12:	fb08 220a 	mla	r2, r8, sl, r2
 801ba16:	5d92      	ldrb	r2, [r2, r6]
 801ba18:	9e01      	ldr	r6, [sp, #4]
 801ba1a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ba1e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801ba22:	d041      	beq.n	801baa8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ba24:	9a03      	ldr	r2, [sp, #12]
 801ba26:	fa5f fb86 	uxtb.w	fp, r6
 801ba2a:	fb02 f808 	mul.w	r8, r2, r8
 801ba2e:	f108 0201 	add.w	r2, r8, #1
 801ba32:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801ba36:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801ba3a:	1212      	asrs	r2, r2, #8
 801ba3c:	fa1f fa82 	uxth.w	sl, r2
 801ba40:	43d2      	mvns	r2, r2
 801ba42:	fb1b fb0a 	smulbb	fp, fp, sl
 801ba46:	b2d2      	uxtb	r2, r2
 801ba48:	fb08 b802 	mla	r8, r8, r2, fp
 801ba4c:	fa1f f888 	uxth.w	r8, r8
 801ba50:	f108 0b01 	add.w	fp, r8, #1
 801ba54:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ba58:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801ba5c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ba60:	fb1b fb0a 	smulbb	fp, fp, sl
 801ba64:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ba68:	fb16 fa0a 	smulbb	sl, r6, sl
 801ba6c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801ba70:	f807 8c03 	strb.w	r8, [r7, #-3]
 801ba74:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801ba78:	fb06 aa02 	mla	sl, r6, r2, sl
 801ba7c:	fb08 b802 	mla	r8, r8, r2, fp
 801ba80:	fa1f fa8a 	uxth.w	sl, sl
 801ba84:	fa1f f888 	uxth.w	r8, r8
 801ba88:	f10a 0601 	add.w	r6, sl, #1
 801ba8c:	f108 0b01 	add.w	fp, r8, #1
 801ba90:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ba94:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ba98:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ba9c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801baa0:	f807 ac01 	strb.w	sl, [r7, #-1]
 801baa4:	f807 8c02 	strb.w	r8, [r7, #-2]
 801baa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801baaa:	4474      	add	r4, lr
 801baac:	3703      	adds	r7, #3
 801baae:	f109 39ff 	add.w	r9, r9, #4294967295
 801bab2:	4410      	add	r0, r2
 801bab4:	e7a4      	b.n	801ba00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801bab6:	f04f 0800 	mov.w	r8, #0
 801baba:	eba3 0208 	sub.w	r2, r3, r8
 801babe:	2a00      	cmp	r2, #0
 801bac0:	dc3b      	bgt.n	801bb3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801bac2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801baca:	441d      	add	r5, r3
 801bacc:	2900      	cmp	r1, #0
 801bace:	f340 8093 	ble.w	801bbf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801bad2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bad8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801badc:	3901      	subs	r1, #1
 801bade:	eeb0 6a62 	vmov.f32	s12, s5
 801bae2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bae6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801baea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801baee:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801baf2:	eeb0 6a43 	vmov.f32	s12, s6
 801baf6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bafa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bafe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb02:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb06:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb0a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb0e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb12:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bb16:	ee12 2a90 	vmov	r2, s5
 801bb1a:	eef0 2a47 	vmov.f32	s5, s14
 801bb1e:	fb92 fef3 	sdiv	lr, r2, r3
 801bb22:	ee13 2a10 	vmov	r2, s6
 801bb26:	eeb0 3a67 	vmov.f32	s6, s15
 801bb2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb2e:	9a02      	ldr	r2, [sp, #8]
 801bb30:	9312      	str	r3, [sp, #72]	; 0x48
 801bb32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb34:	bf08      	it	eq
 801bb36:	4613      	moveq	r3, r2
 801bb38:	e731      	b.n	801b99e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bb3a:	1427      	asrs	r7, r4, #16
 801bb3c:	d456      	bmi.n	801bbec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bb3e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801bb42:	42be      	cmp	r6, r7
 801bb44:	dd52      	ble.n	801bbec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bb46:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bb4a:	d44f      	bmi.n	801bbec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bb4c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bb50:	454a      	cmp	r2, r9
 801bb52:	dd4b      	ble.n	801bbec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bb54:	9a00      	ldr	r2, [sp, #0]
 801bb56:	b236      	sxth	r6, r6
 801bb58:	fb09 2606 	mla	r6, r9, r6, r2
 801bb5c:	5df2      	ldrb	r2, [r6, r7]
 801bb5e:	9e01      	ldr	r6, [sp, #4]
 801bb60:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801bb64:	0e3a      	lsrs	r2, r7, #24
 801bb66:	d041      	beq.n	801bbec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bb68:	9e03      	ldr	r6, [sp, #12]
 801bb6a:	fa5f fb87 	uxtb.w	fp, r7
 801bb6e:	4372      	muls	r2, r6
 801bb70:	1c56      	adds	r6, r2, #1
 801bb72:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bb76:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801bb7a:	1212      	asrs	r2, r2, #8
 801bb7c:	f815 9006 	ldrb.w	r9, [r5, r6]
 801bb80:	fa1f fa82 	uxth.w	sl, r2
 801bb84:	43d2      	mvns	r2, r2
 801bb86:	fb1b fb0a 	smulbb	fp, fp, sl
 801bb8a:	b2d2      	uxtb	r2, r2
 801bb8c:	fb09 b902 	mla	r9, r9, r2, fp
 801bb90:	fa1f f989 	uxth.w	r9, r9
 801bb94:	f109 0b01 	add.w	fp, r9, #1
 801bb98:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bb9c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bba0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bba4:	fb1b fb0a 	smulbb	fp, fp, sl
 801bba8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bbac:	fb17 fa0a 	smulbb	sl, r7, sl
 801bbb0:	f805 9006 	strb.w	r9, [r5, r6]
 801bbb4:	442e      	add	r6, r5
 801bbb6:	78b7      	ldrb	r7, [r6, #2]
 801bbb8:	f896 9001 	ldrb.w	r9, [r6, #1]
 801bbbc:	fb07 aa02 	mla	sl, r7, r2, sl
 801bbc0:	fb09 b902 	mla	r9, r9, r2, fp
 801bbc4:	fa1f fa8a 	uxth.w	sl, sl
 801bbc8:	fa1f f989 	uxth.w	r9, r9
 801bbcc:	f10a 0701 	add.w	r7, sl, #1
 801bbd0:	f109 0b01 	add.w	fp, r9, #1
 801bbd4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bbd8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bbdc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bbe0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bbe4:	f886 a002 	strb.w	sl, [r6, #2]
 801bbe8:	f886 9001 	strb.w	r9, [r6, #1]
 801bbec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bbee:	4474      	add	r4, lr
 801bbf0:	f108 0801 	add.w	r8, r8, #1
 801bbf4:	4410      	add	r0, r2
 801bbf6:	e760      	b.n	801baba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801bbf8:	b005      	add	sp, #20
 801bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bbfe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bbfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc02:	b085      	sub	sp, #20
 801bc04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc08:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bc0a:	9203      	str	r2, [sp, #12]
 801bc0c:	6868      	ldr	r0, [r5, #4]
 801bc0e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801bc12:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801bc16:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bc1a:	fb00 2404 	mla	r4, r0, r4, r2
 801bc1e:	682a      	ldr	r2, [r5, #0]
 801bc20:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bc24:	4414      	add	r4, r2
 801bc26:	f8dc 2000 	ldr.w	r2, [ip]
 801bc2a:	9201      	str	r2, [sp, #4]
 801bc2c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801bc30:	3204      	adds	r2, #4
 801bc32:	9202      	str	r2, [sp, #8]
 801bc34:	2900      	cmp	r1, #0
 801bc36:	dc03      	bgt.n	801bc40 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801bc38:	9a03      	ldr	r2, [sp, #12]
 801bc3a:	2a00      	cmp	r2, #0
 801bc3c:	f340 8137 	ble.w	801beae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bc40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc42:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bc46:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bc4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bc4c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bc50:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	dd0d      	ble.n	801bc74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bc58:	1405      	asrs	r5, r0, #16
 801bc5a:	d405      	bmi.n	801bc68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bc5c:	4545      	cmp	r5, r8
 801bc5e:	da03      	bge.n	801bc68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bc60:	1415      	asrs	r5, r2, #16
 801bc62:	d401      	bmi.n	801bc68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bc64:	42bd      	cmp	r5, r7
 801bc66:	db06      	blt.n	801bc76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bc68:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bc6a:	4470      	add	r0, lr
 801bc6c:	3b01      	subs	r3, #1
 801bc6e:	3403      	adds	r4, #3
 801bc70:	442a      	add	r2, r5
 801bc72:	e7ef      	b.n	801bc54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801bc74:	d070      	beq.n	801bd58 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801bc76:	1e5d      	subs	r5, r3, #1
 801bc78:	fb0e 0605 	mla	r6, lr, r5, r0
 801bc7c:	1436      	asrs	r6, r6, #16
 801bc7e:	d462      	bmi.n	801bd46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bc80:	4546      	cmp	r6, r8
 801bc82:	da60      	bge.n	801bd46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bc84:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bc86:	fb06 2505 	mla	r5, r6, r5, r2
 801bc8a:	142d      	asrs	r5, r5, #16
 801bc8c:	d45b      	bmi.n	801bd46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bc8e:	42bd      	cmp	r5, r7
 801bc90:	da59      	bge.n	801bd46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bc92:	1ce5      	adds	r5, r4, #3
 801bc94:	469a      	mov	sl, r3
 801bc96:	f1ba 0f00 	cmp.w	sl, #0
 801bc9a:	dd58      	ble.n	801bd4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801bc9c:	1416      	asrs	r6, r2, #16
 801bc9e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bca2:	1407      	asrs	r7, r0, #16
 801bca4:	46b1      	mov	r9, r6
 801bca6:	9e01      	ldr	r6, [sp, #4]
 801bca8:	fb08 6609 	mla	r6, r8, r9, r6
 801bcac:	5df6      	ldrb	r6, [r6, r7]
 801bcae:	9f02      	ldr	r7, [sp, #8]
 801bcb0:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801bcb4:	0e37      	lsrs	r7, r6, #24
 801bcb6:	2fff      	cmp	r7, #255	; 0xff
 801bcb8:	f000 80f0 	beq.w	801be9c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801bcbc:	fa5f f887 	uxtb.w	r8, r7
 801bcc0:	b3d7      	cbz	r7, 801bd38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801bcc2:	fa1f f788 	uxth.w	r7, r8
 801bcc6:	ea6f 0808 	mvn.w	r8, r8
 801bcca:	fa5f fb86 	uxtb.w	fp, r6
 801bcce:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801bcd2:	fa5f f888 	uxtb.w	r8, r8
 801bcd6:	fb1b fb07 	smulbb	fp, fp, r7
 801bcda:	fb09 b908 	mla	r9, r9, r8, fp
 801bcde:	fa1f f989 	uxth.w	r9, r9
 801bce2:	f109 0b01 	add.w	fp, r9, #1
 801bce6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bcea:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801bcee:	fb1b fb08 	smulbb	fp, fp, r8
 801bcf2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bcf6:	f805 9c03 	strb.w	r9, [r5, #-3]
 801bcfa:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801bcfe:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bd02:	fb09 b907 	mla	r9, r9, r7, fp
 801bd06:	fa1f f989 	uxth.w	r9, r9
 801bd0a:	f109 0b01 	add.w	fp, r9, #1
 801bd0e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd12:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd16:	f805 9c02 	strb.w	r9, [r5, #-2]
 801bd1a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801bd1e:	fb19 f808 	smulbb	r8, r9, r8
 801bd22:	fb06 8607 	mla	r6, r6, r7, r8
 801bd26:	b2b6      	uxth	r6, r6
 801bd28:	f106 0801 	add.w	r8, r6, #1
 801bd2c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801bd30:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bd34:	f805 8c01 	strb.w	r8, [r5, #-1]
 801bd38:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bd3a:	4470      	add	r0, lr
 801bd3c:	3503      	adds	r5, #3
 801bd3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bd42:	4432      	add	r2, r6
 801bd44:	e7a7      	b.n	801bc96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bd46:	2600      	movs	r6, #0
 801bd48:	1b9d      	subs	r5, r3, r6
 801bd4a:	2d00      	cmp	r5, #0
 801bd4c:	dc3b      	bgt.n	801bdc6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bd4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd56:	441c      	add	r4, r3
 801bd58:	2900      	cmp	r1, #0
 801bd5a:	f340 80a8 	ble.w	801beae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bd5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd68:	3901      	subs	r1, #1
 801bd6a:	eeb0 6a62 	vmov.f32	s12, s5
 801bd6e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bd72:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd7a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bd7e:	eeb0 6a43 	vmov.f32	s12, s6
 801bd82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bd86:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bd8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd92:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bda2:	ee12 2a90 	vmov	r2, s5
 801bda6:	eef0 2a47 	vmov.f32	s5, s14
 801bdaa:	fb92 fef3 	sdiv	lr, r2, r3
 801bdae:	ee13 2a10 	vmov	r2, s6
 801bdb2:	eeb0 3a67 	vmov.f32	s6, s15
 801bdb6:	fb92 f3f3 	sdiv	r3, r2, r3
 801bdba:	9a03      	ldr	r2, [sp, #12]
 801bdbc:	9312      	str	r3, [sp, #72]	; 0x48
 801bdbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdc0:	bf08      	it	eq
 801bdc2:	4613      	moveq	r3, r2
 801bdc4:	e736      	b.n	801bc34 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801bdc6:	ea5f 4820 	movs.w	r8, r0, asr #16
 801bdca:	d457      	bmi.n	801be7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bdcc:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801bdd0:	4547      	cmp	r7, r8
 801bdd2:	dd53      	ble.n	801be7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bdd4:	ea5f 4922 	movs.w	r9, r2, asr #16
 801bdd8:	d450      	bmi.n	801be7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bdda:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801bdde:	454d      	cmp	r5, r9
 801bde0:	dd4c      	ble.n	801be7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bde2:	9d01      	ldr	r5, [sp, #4]
 801bde4:	b23f      	sxth	r7, r7
 801bde6:	fb09 5707 	mla	r7, r9, r7, r5
 801bdea:	f817 5008 	ldrb.w	r5, [r7, r8]
 801bdee:	9f02      	ldr	r7, [sp, #8]
 801bdf0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801bdf4:	0e2f      	lsrs	r7, r5, #24
 801bdf6:	2fff      	cmp	r7, #255	; 0xff
 801bdf8:	d045      	beq.n	801be86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801bdfa:	fa5f f987 	uxtb.w	r9, r7
 801bdfe:	b3ef      	cbz	r7, 801be7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801be00:	fa1f f889 	uxth.w	r8, r9
 801be04:	ea6f 0909 	mvn.w	r9, r9
 801be08:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801be0c:	fa5f fb85 	uxtb.w	fp, r5
 801be10:	f814 a007 	ldrb.w	sl, [r4, r7]
 801be14:	fa5f f989 	uxtb.w	r9, r9
 801be18:	fb1b fb08 	smulbb	fp, fp, r8
 801be1c:	fb0a ba09 	mla	sl, sl, r9, fp
 801be20:	fa1f fa8a 	uxth.w	sl, sl
 801be24:	f10a 0b01 	add.w	fp, sl, #1
 801be28:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801be2c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801be30:	f804 a007 	strb.w	sl, [r4, r7]
 801be34:	4427      	add	r7, r4
 801be36:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801be3a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801be3e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801be42:	fb1b fb09 	smulbb	fp, fp, r9
 801be46:	fb0a ba08 	mla	sl, sl, r8, fp
 801be4a:	fa1f fa8a 	uxth.w	sl, sl
 801be4e:	f10a 0b01 	add.w	fp, sl, #1
 801be52:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801be56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801be5a:	f887 a001 	strb.w	sl, [r7, #1]
 801be5e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801be62:	fb1a f909 	smulbb	r9, sl, r9
 801be66:	fb05 9508 	mla	r5, r5, r8, r9
 801be6a:	b2ad      	uxth	r5, r5
 801be6c:	f105 0901 	add.w	r9, r5, #1
 801be70:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801be74:	ea4f 2929 	mov.w	r9, r9, asr #8
 801be78:	f887 9002 	strb.w	r9, [r7, #2]
 801be7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801be7e:	4470      	add	r0, lr
 801be80:	3601      	adds	r6, #1
 801be82:	442a      	add	r2, r5
 801be84:	e760      	b.n	801bd48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801be86:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801be8a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801be8e:	55e5      	strb	r5, [r4, r7]
 801be90:	4427      	add	r7, r4
 801be92:	0c2d      	lsrs	r5, r5, #16
 801be94:	f887 8001 	strb.w	r8, [r7, #1]
 801be98:	70bd      	strb	r5, [r7, #2]
 801be9a:	e7ef      	b.n	801be7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801be9c:	0a37      	lsrs	r7, r6, #8
 801be9e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801bea2:	0c36      	lsrs	r6, r6, #16
 801bea4:	f805 7c02 	strb.w	r7, [r5, #-2]
 801bea8:	f805 6c01 	strb.w	r6, [r5, #-1]
 801beac:	e744      	b.n	801bd38 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801beae:	b005      	add	sp, #20
 801beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801beb4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801beb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beb8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801beba:	9201      	str	r2, [sp, #4]
 801bebc:	6870      	ldr	r0, [r6, #4]
 801bebe:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801bec2:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801bec6:	fa1f fe85 	uxth.w	lr, r5
 801beca:	43ed      	mvns	r5, r5
 801becc:	f8dc 8000 	ldr.w	r8, [ip]
 801bed0:	b2ed      	uxtb	r5, r5
 801bed2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bed6:	fb00 2404 	mla	r4, r0, r4, r2
 801beda:	6832      	ldr	r2, [r6, #0]
 801bedc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bee0:	4414      	add	r4, r2
 801bee2:	2900      	cmp	r1, #0
 801bee4:	dc03      	bgt.n	801beee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bee6:	9a01      	ldr	r2, [sp, #4]
 801bee8:	2a00      	cmp	r2, #0
 801beea:	f340 810d 	ble.w	801c108 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801beee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bef0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801bef4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801befa:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801befe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	dd0e      	ble.n	801bf24 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801bf06:	1406      	asrs	r6, r0, #16
 801bf08:	d405      	bmi.n	801bf16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801bf0a:	4556      	cmp	r6, sl
 801bf0c:	da03      	bge.n	801bf16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801bf0e:	1416      	asrs	r6, r2, #16
 801bf10:	d401      	bmi.n	801bf16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801bf12:	454e      	cmp	r6, r9
 801bf14:	db07      	blt.n	801bf26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bf16:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bf18:	3b01      	subs	r3, #1
 801bf1a:	3403      	adds	r4, #3
 801bf1c:	4430      	add	r0, r6
 801bf1e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bf20:	4432      	add	r2, r6
 801bf22:	e7ee      	b.n	801bf02 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801bf24:	d060      	beq.n	801bfe8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801bf26:	1e5e      	subs	r6, r3, #1
 801bf28:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bf2a:	fb07 0706 	mla	r7, r7, r6, r0
 801bf2e:	143f      	asrs	r7, r7, #16
 801bf30:	d451      	bmi.n	801bfd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bf32:	4557      	cmp	r7, sl
 801bf34:	da4f      	bge.n	801bfd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bf36:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bf38:	fb07 2606 	mla	r6, r7, r6, r2
 801bf3c:	1436      	asrs	r6, r6, #16
 801bf3e:	d44a      	bmi.n	801bfd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bf40:	454e      	cmp	r6, r9
 801bf42:	da48      	bge.n	801bfd6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801bf44:	1ce6      	adds	r6, r4, #3
 801bf46:	4699      	mov	r9, r3
 801bf48:	f1b9 0f00 	cmp.w	r9, #0
 801bf4c:	f106 0603 	add.w	r6, r6, #3
 801bf50:	dd45      	ble.n	801bfde <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801bf52:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801bf56:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801bf5a:	1417      	asrs	r7, r2, #16
 801bf5c:	f109 39ff 	add.w	r9, r9, #4294967295
 801bf60:	fb0b a707 	mla	r7, fp, r7, sl
 801bf64:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801bf68:	fb1b fb05 	smulbb	fp, fp, r5
 801bf6c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bf70:	eb08 0a07 	add.w	sl, r8, r7
 801bf74:	f818 7007 	ldrb.w	r7, [r8, r7]
 801bf78:	fb07 b70e 	mla	r7, r7, lr, fp
 801bf7c:	b2bf      	uxth	r7, r7
 801bf7e:	f107 0b01 	add.w	fp, r7, #1
 801bf82:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bf86:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801bf8a:	fb1b fb05 	smulbb	fp, fp, r5
 801bf8e:	123f      	asrs	r7, r7, #8
 801bf90:	f806 7c06 	strb.w	r7, [r6, #-6]
 801bf94:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801bf98:	fb07 b70e 	mla	r7, r7, lr, fp
 801bf9c:	b2bf      	uxth	r7, r7
 801bf9e:	f107 0b01 	add.w	fp, r7, #1
 801bfa2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bfa6:	123f      	asrs	r7, r7, #8
 801bfa8:	f806 7c05 	strb.w	r7, [r6, #-5]
 801bfac:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801bfb0:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801bfb4:	fb1a fa05 	smulbb	sl, sl, r5
 801bfb8:	fb07 a70e 	mla	r7, r7, lr, sl
 801bfbc:	b2bf      	uxth	r7, r7
 801bfbe:	f107 0a01 	add.w	sl, r7, #1
 801bfc2:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801bfc6:	123f      	asrs	r7, r7, #8
 801bfc8:	f806 7c04 	strb.w	r7, [r6, #-4]
 801bfcc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bfce:	4438      	add	r0, r7
 801bfd0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bfd2:	443a      	add	r2, r7
 801bfd4:	e7b8      	b.n	801bf48 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bfd6:	2700      	movs	r7, #0
 801bfd8:	1bde      	subs	r6, r3, r7
 801bfda:	2e00      	cmp	r6, #0
 801bfdc:	dc3f      	bgt.n	801c05e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801bfde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bfe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bfe6:	441c      	add	r4, r3
 801bfe8:	2900      	cmp	r1, #0
 801bfea:	f340 808d 	ble.w	801c108 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801bfee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bff4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bff8:	3901      	subs	r1, #1
 801bffa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bffe:	eef0 6a62 	vmov.f32	s13, s5
 801c002:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c006:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c00a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c00e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c012:	eef0 6a43 	vmov.f32	s13, s6
 801c016:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c01a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c01e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c022:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c026:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c02a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c02e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c032:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c036:	ee12 2a90 	vmov	r2, s5
 801c03a:	eef0 2a47 	vmov.f32	s5, s14
 801c03e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c042:	ee13 2a10 	vmov	r2, s6
 801c046:	930f      	str	r3, [sp, #60]	; 0x3c
 801c048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c04a:	eeb0 3a67 	vmov.f32	s6, s15
 801c04e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c052:	9a01      	ldr	r2, [sp, #4]
 801c054:	9310      	str	r3, [sp, #64]	; 0x40
 801c056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c058:	bf08      	it	eq
 801c05a:	4613      	moveq	r3, r2
 801c05c:	e741      	b.n	801bee2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c05e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c062:	d44b      	bmi.n	801c0fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c064:	f8dc b008 	ldr.w	fp, [ip, #8]
 801c068:	45cb      	cmp	fp, r9
 801c06a:	dd47      	ble.n	801c0fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c06c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c070:	d444      	bmi.n	801c0fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c072:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801c076:	4556      	cmp	r6, sl
 801c078:	dd40      	ble.n	801c0fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c07a:	fa0f f68b 	sxth.w	r6, fp
 801c07e:	fb0a 9906 	mla	r9, sl, r6, r9
 801c082:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c086:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c08a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c08e:	fb1b fb05 	smulbb	fp, fp, r5
 801c092:	eb08 0a09 	add.w	sl, r8, r9
 801c096:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c09a:	fb09 b90e 	mla	r9, r9, lr, fp
 801c09e:	fa1f f989 	uxth.w	r9, r9
 801c0a2:	f109 0b01 	add.w	fp, r9, #1
 801c0a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c0aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0ae:	f804 9006 	strb.w	r9, [r4, r6]
 801c0b2:	4426      	add	r6, r4
 801c0b4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c0b8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c0bc:	fb1b fb05 	smulbb	fp, fp, r5
 801c0c0:	fb09 b90e 	mla	r9, r9, lr, fp
 801c0c4:	fa1f f989 	uxth.w	r9, r9
 801c0c8:	f109 0b01 	add.w	fp, r9, #1
 801c0cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c0d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0d4:	f886 9001 	strb.w	r9, [r6, #1]
 801c0d8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c0dc:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c0e0:	fb1a fa05 	smulbb	sl, sl, r5
 801c0e4:	fb09 a90e 	mla	r9, r9, lr, sl
 801c0e8:	fa1f f989 	uxth.w	r9, r9
 801c0ec:	f109 0a01 	add.w	sl, r9, #1
 801c0f0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c0f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0f8:	f886 9002 	strb.w	r9, [r6, #2]
 801c0fc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c0fe:	3701      	adds	r7, #1
 801c100:	4430      	add	r0, r6
 801c102:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c104:	4432      	add	r2, r6
 801c106:	e767      	b.n	801bfd8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801c108:	b003      	add	sp, #12
 801c10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c10e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c10e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c112:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c118:	9201      	str	r2, [sp, #4]
 801c11a:	6868      	ldr	r0, [r5, #4]
 801c11c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801c11e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c122:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801c126:	fb00 2404 	mla	r4, r0, r4, r2
 801c12a:	682a      	ldr	r2, [r5, #0]
 801c12c:	f8d7 8000 	ldr.w	r8, [r7]
 801c130:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c134:	4414      	add	r4, r2
 801c136:	2900      	cmp	r1, #0
 801c138:	dc03      	bgt.n	801c142 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c13a:	9a01      	ldr	r2, [sp, #4]
 801c13c:	2a00      	cmp	r2, #0
 801c13e:	f340 80af 	ble.w	801c2a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c142:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c144:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801c148:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c14c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c14e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801c152:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c156:	2b00      	cmp	r3, #0
 801c158:	dd0c      	ble.n	801c174 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c15a:	1405      	asrs	r5, r0, #16
 801c15c:	d405      	bmi.n	801c16a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c15e:	4555      	cmp	r5, sl
 801c160:	da03      	bge.n	801c16a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c162:	1415      	asrs	r5, r2, #16
 801c164:	d401      	bmi.n	801c16a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c166:	454d      	cmp	r5, r9
 801c168:	db05      	blt.n	801c176 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c16a:	4470      	add	r0, lr
 801c16c:	4462      	add	r2, ip
 801c16e:	3b01      	subs	r3, #1
 801c170:	3403      	adds	r4, #3
 801c172:	e7f0      	b.n	801c156 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c174:	d038      	beq.n	801c1e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c176:	1e5d      	subs	r5, r3, #1
 801c178:	fb0e 0605 	mla	r6, lr, r5, r0
 801c17c:	1436      	asrs	r6, r6, #16
 801c17e:	d42a      	bmi.n	801c1d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c180:	4556      	cmp	r6, sl
 801c182:	da28      	bge.n	801c1d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c184:	fb0c 2505 	mla	r5, ip, r5, r2
 801c188:	142d      	asrs	r5, r5, #16
 801c18a:	d424      	bmi.n	801c1d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c18c:	454d      	cmp	r5, r9
 801c18e:	da22      	bge.n	801c1d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c190:	1ce6      	adds	r6, r4, #3
 801c192:	4699      	mov	r9, r3
 801c194:	f1b9 0f00 	cmp.w	r9, #0
 801c198:	f106 0603 	add.w	r6, r6, #3
 801c19c:	dd1f      	ble.n	801c1de <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801c19e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801c1a2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c1a6:	1415      	asrs	r5, r2, #16
 801c1a8:	4470      	add	r0, lr
 801c1aa:	4462      	add	r2, ip
 801c1ac:	f109 39ff 	add.w	r9, r9, #4294967295
 801c1b0:	fb0b a505 	mla	r5, fp, r5, sl
 801c1b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1b8:	eb08 0a05 	add.w	sl, r8, r5
 801c1bc:	f818 5005 	ldrb.w	r5, [r8, r5]
 801c1c0:	f806 5c06 	strb.w	r5, [r6, #-6]
 801c1c4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801c1c8:	f806 5c05 	strb.w	r5, [r6, #-5]
 801c1cc:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801c1d0:	f806 5c04 	strb.w	r5, [r6, #-4]
 801c1d4:	e7de      	b.n	801c194 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c1d6:	2600      	movs	r6, #0
 801c1d8:	1b9d      	subs	r5, r3, r6
 801c1da:	2d00      	cmp	r5, #0
 801c1dc:	dc38      	bgt.n	801c250 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c1de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1e6:	441c      	add	r4, r3
 801c1e8:	2900      	cmp	r1, #0
 801c1ea:	dd59      	ble.n	801c2a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c1ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c1f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1f6:	3901      	subs	r1, #1
 801c1f8:	eeb0 6a62 	vmov.f32	s12, s5
 801c1fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c200:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c204:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c208:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c20c:	eeb0 6a43 	vmov.f32	s12, s6
 801c210:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c214:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c218:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c21c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c220:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c224:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c228:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c22c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c230:	ee12 2a90 	vmov	r2, s5
 801c234:	eef0 2a47 	vmov.f32	s5, s14
 801c238:	fb92 fef3 	sdiv	lr, r2, r3
 801c23c:	ee13 2a10 	vmov	r2, s6
 801c240:	eeb0 3a67 	vmov.f32	s6, s15
 801c244:	fb92 fcf3 	sdiv	ip, r2, r3
 801c248:	9a01      	ldr	r2, [sp, #4]
 801c24a:	bf08      	it	eq
 801c24c:	4613      	moveq	r3, r2
 801c24e:	e772      	b.n	801c136 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801c250:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c254:	d420      	bmi.n	801c298 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c256:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801c25a:	45cb      	cmp	fp, r9
 801c25c:	dd1c      	ble.n	801c298 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c25e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c262:	d419      	bmi.n	801c298 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c264:	68fd      	ldr	r5, [r7, #12]
 801c266:	4555      	cmp	r5, sl
 801c268:	dd16      	ble.n	801c298 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c26a:	fa0f f58b 	sxth.w	r5, fp
 801c26e:	fb0a 9505 	mla	r5, sl, r5, r9
 801c272:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c276:	f818 9005 	ldrb.w	r9, [r8, r5]
 801c27a:	eb08 0b05 	add.w	fp, r8, r5
 801c27e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801c282:	f804 9005 	strb.w	r9, [r4, r5]
 801c286:	4425      	add	r5, r4
 801c288:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c28c:	f885 9001 	strb.w	r9, [r5, #1]
 801c290:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c294:	f885 9002 	strb.w	r9, [r5, #2]
 801c298:	4470      	add	r0, lr
 801c29a:	4462      	add	r2, ip
 801c29c:	3601      	adds	r6, #1
 801c29e:	e79b      	b.n	801c1d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801c2a0:	b003      	add	sp, #12
 801c2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c2a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2aa:	b085      	sub	sp, #20
 801c2ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c2b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c2b2:	9202      	str	r2, [sp, #8]
 801c2b4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801c2b8:	6860      	ldr	r0, [r4, #4]
 801c2ba:	9203      	str	r2, [sp, #12]
 801c2bc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c2c0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c2c4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c2c8:	fb00 2505 	mla	r5, r0, r5, r2
 801c2cc:	6822      	ldr	r2, [r4, #0]
 801c2ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c2d2:	4415      	add	r5, r2
 801c2d4:	f8dc 2000 	ldr.w	r2, [ip]
 801c2d8:	9201      	str	r2, [sp, #4]
 801c2da:	2900      	cmp	r1, #0
 801c2dc:	dc03      	bgt.n	801c2e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c2de:	9a02      	ldr	r2, [sp, #8]
 801c2e0:	2a00      	cmp	r2, #0
 801c2e2:	f340 8122 	ble.w	801c52a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c2e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c2e8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c2ec:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c2f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c2f2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c2f6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	dd0d      	ble.n	801c31a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c2fe:	1422      	asrs	r2, r4, #16
 801c300:	d405      	bmi.n	801c30e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c302:	4542      	cmp	r2, r8
 801c304:	da03      	bge.n	801c30e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c306:	1402      	asrs	r2, r0, #16
 801c308:	d401      	bmi.n	801c30e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c30a:	42ba      	cmp	r2, r7
 801c30c:	db06      	blt.n	801c31c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c30e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c310:	4474      	add	r4, lr
 801c312:	3b01      	subs	r3, #1
 801c314:	3503      	adds	r5, #3
 801c316:	4410      	add	r0, r2
 801c318:	e7ef      	b.n	801c2fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c31a:	d072      	beq.n	801c402 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801c31c:	1e5a      	subs	r2, r3, #1
 801c31e:	fb0e 4602 	mla	r6, lr, r2, r4
 801c322:	1436      	asrs	r6, r6, #16
 801c324:	d462      	bmi.n	801c3ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c326:	4546      	cmp	r6, r8
 801c328:	da60      	bge.n	801c3ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c32a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c32c:	fb06 0202 	mla	r2, r6, r2, r0
 801c330:	1412      	asrs	r2, r2, #16
 801c332:	d45b      	bmi.n	801c3ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c334:	42ba      	cmp	r2, r7
 801c336:	da59      	bge.n	801c3ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c338:	1cef      	adds	r7, r5, #3
 801c33a:	4699      	mov	r9, r3
 801c33c:	f1b9 0f00 	cmp.w	r9, #0
 801c340:	dd5a      	ble.n	801c3f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c342:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c346:	1426      	asrs	r6, r4, #16
 801c348:	1402      	asrs	r2, r0, #16
 801c34a:	fb08 6202 	mla	r2, r8, r2, r6
 801c34e:	9e01      	ldr	r6, [sp, #4]
 801c350:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c354:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c358:	d041      	beq.n	801c3de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c35a:	9a03      	ldr	r2, [sp, #12]
 801c35c:	fa5f fb86 	uxtb.w	fp, r6
 801c360:	fb02 f808 	mul.w	r8, r2, r8
 801c364:	f108 0201 	add.w	r2, r8, #1
 801c368:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c36c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c370:	1212      	asrs	r2, r2, #8
 801c372:	fa1f fa82 	uxth.w	sl, r2
 801c376:	43d2      	mvns	r2, r2
 801c378:	fb1b fb0a 	smulbb	fp, fp, sl
 801c37c:	b2d2      	uxtb	r2, r2
 801c37e:	fb08 b802 	mla	r8, r8, r2, fp
 801c382:	fa1f f888 	uxth.w	r8, r8
 801c386:	f108 0b01 	add.w	fp, r8, #1
 801c38a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c38e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c392:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c396:	fb1b fb0a 	smulbb	fp, fp, sl
 801c39a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c39e:	fb16 fa0a 	smulbb	sl, r6, sl
 801c3a2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c3a6:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c3aa:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c3ae:	fb06 aa02 	mla	sl, r6, r2, sl
 801c3b2:	fb08 b802 	mla	r8, r8, r2, fp
 801c3b6:	fa1f fa8a 	uxth.w	sl, sl
 801c3ba:	fa1f f888 	uxth.w	r8, r8
 801c3be:	f10a 0601 	add.w	r6, sl, #1
 801c3c2:	f108 0b01 	add.w	fp, r8, #1
 801c3c6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c3ca:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c3ce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c3d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c3d6:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c3da:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c3de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c3e0:	4474      	add	r4, lr
 801c3e2:	3703      	adds	r7, #3
 801c3e4:	f109 39ff 	add.w	r9, r9, #4294967295
 801c3e8:	4410      	add	r0, r2
 801c3ea:	e7a7      	b.n	801c33c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c3ec:	f04f 0800 	mov.w	r8, #0
 801c3f0:	eba3 0208 	sub.w	r2, r3, r8
 801c3f4:	2a00      	cmp	r2, #0
 801c3f6:	dc3b      	bgt.n	801c470 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801c3f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c3fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c400:	441d      	add	r5, r3
 801c402:	2900      	cmp	r1, #0
 801c404:	f340 8091 	ble.w	801c52a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c408:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c40c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c40e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c412:	3901      	subs	r1, #1
 801c414:	eeb0 6a62 	vmov.f32	s12, s5
 801c418:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c41c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c420:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c424:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c428:	eeb0 6a43 	vmov.f32	s12, s6
 801c42c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c430:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c434:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c438:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c43c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c440:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c444:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c448:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c44c:	ee12 2a90 	vmov	r2, s5
 801c450:	eef0 2a47 	vmov.f32	s5, s14
 801c454:	fb92 fef3 	sdiv	lr, r2, r3
 801c458:	ee13 2a10 	vmov	r2, s6
 801c45c:	eeb0 3a67 	vmov.f32	s6, s15
 801c460:	fb92 f3f3 	sdiv	r3, r2, r3
 801c464:	9a02      	ldr	r2, [sp, #8]
 801c466:	9312      	str	r3, [sp, #72]	; 0x48
 801c468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c46a:	bf08      	it	eq
 801c46c:	4613      	moveq	r3, r2
 801c46e:	e734      	b.n	801c2da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c470:	1427      	asrs	r7, r4, #16
 801c472:	d454      	bmi.n	801c51e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c474:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c478:	42be      	cmp	r6, r7
 801c47a:	dd50      	ble.n	801c51e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c47c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c480:	d44d      	bmi.n	801c51e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c482:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c486:	454a      	cmp	r2, r9
 801c488:	dd49      	ble.n	801c51e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c48a:	b236      	sxth	r6, r6
 801c48c:	9a01      	ldr	r2, [sp, #4]
 801c48e:	fb09 7606 	mla	r6, r9, r6, r7
 801c492:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c496:	0e3a      	lsrs	r2, r7, #24
 801c498:	d041      	beq.n	801c51e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c49a:	9e03      	ldr	r6, [sp, #12]
 801c49c:	fa5f fb87 	uxtb.w	fp, r7
 801c4a0:	4372      	muls	r2, r6
 801c4a2:	1c56      	adds	r6, r2, #1
 801c4a4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c4a8:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c4ac:	1212      	asrs	r2, r2, #8
 801c4ae:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c4b2:	fa1f fa82 	uxth.w	sl, r2
 801c4b6:	43d2      	mvns	r2, r2
 801c4b8:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4bc:	b2d2      	uxtb	r2, r2
 801c4be:	fb09 b902 	mla	r9, r9, r2, fp
 801c4c2:	fa1f f989 	uxth.w	r9, r9
 801c4c6:	f109 0b01 	add.w	fp, r9, #1
 801c4ca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c4ce:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c4d2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c4d6:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4da:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4de:	fb17 fa0a 	smulbb	sl, r7, sl
 801c4e2:	f805 9006 	strb.w	r9, [r5, r6]
 801c4e6:	442e      	add	r6, r5
 801c4e8:	78b7      	ldrb	r7, [r6, #2]
 801c4ea:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c4ee:	fb07 aa02 	mla	sl, r7, r2, sl
 801c4f2:	fb09 b902 	mla	r9, r9, r2, fp
 801c4f6:	fa1f fa8a 	uxth.w	sl, sl
 801c4fa:	fa1f f989 	uxth.w	r9, r9
 801c4fe:	f10a 0701 	add.w	r7, sl, #1
 801c502:	f109 0b01 	add.w	fp, r9, #1
 801c506:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c50a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c50e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c512:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c516:	f886 a002 	strb.w	sl, [r6, #2]
 801c51a:	f886 9001 	strb.w	r9, [r6, #1]
 801c51e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c520:	4474      	add	r4, lr
 801c522:	f108 0801 	add.w	r8, r8, #1
 801c526:	4410      	add	r0, r2
 801c528:	e762      	b.n	801c3f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c52a:	b005      	add	sp, #20
 801c52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c530 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c534:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c53a:	9201      	str	r2, [sp, #4]
 801c53c:	6860      	ldr	r0, [r4, #4]
 801c53e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801c542:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801c546:	fb00 2505 	mla	r5, r0, r5, r2
 801c54a:	6822      	ldr	r2, [r4, #0]
 801c54c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c550:	4415      	add	r5, r2
 801c552:	f8dc 2000 	ldr.w	r2, [ip]
 801c556:	9200      	str	r2, [sp, #0]
 801c558:	2900      	cmp	r1, #0
 801c55a:	dc03      	bgt.n	801c564 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c55c:	9a01      	ldr	r2, [sp, #4]
 801c55e:	2a00      	cmp	r2, #0
 801c560:	f340 812b 	ble.w	801c7ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c564:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c566:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c56a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c56e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c570:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c574:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c578:	2b00      	cmp	r3, #0
 801c57a:	dd0e      	ble.n	801c59a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c57c:	1422      	asrs	r2, r4, #16
 801c57e:	d405      	bmi.n	801c58c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c580:	4572      	cmp	r2, lr
 801c582:	da03      	bge.n	801c58c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c584:	1402      	asrs	r2, r0, #16
 801c586:	d401      	bmi.n	801c58c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c588:	42ba      	cmp	r2, r7
 801c58a:	db07      	blt.n	801c59c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c58c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c58e:	3b01      	subs	r3, #1
 801c590:	3503      	adds	r5, #3
 801c592:	4414      	add	r4, r2
 801c594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c596:	4410      	add	r0, r2
 801c598:	e7ee      	b.n	801c578 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c59a:	d06f      	beq.n	801c67c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c59c:	1e5a      	subs	r2, r3, #1
 801c59e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c5a0:	fb06 4602 	mla	r6, r6, r2, r4
 801c5a4:	1436      	asrs	r6, r6, #16
 801c5a6:	d45e      	bmi.n	801c666 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c5a8:	4576      	cmp	r6, lr
 801c5aa:	da5c      	bge.n	801c666 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c5ac:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c5ae:	fb06 0202 	mla	r2, r6, r2, r0
 801c5b2:	1412      	asrs	r2, r2, #16
 801c5b4:	d457      	bmi.n	801c666 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c5b6:	42ba      	cmp	r2, r7
 801c5b8:	da55      	bge.n	801c666 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c5ba:	1cee      	adds	r6, r5, #3
 801c5bc:	469a      	mov	sl, r3
 801c5be:	f1ba 0f00 	cmp.w	sl, #0
 801c5c2:	dd56      	ble.n	801c672 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c5c4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c5c8:	1427      	asrs	r7, r4, #16
 801c5ca:	1402      	asrs	r2, r0, #16
 801c5cc:	fb0e 7202 	mla	r2, lr, r2, r7
 801c5d0:	9f00      	ldr	r7, [sp, #0]
 801c5d2:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c5d6:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801c5da:	d03c      	beq.n	801c656 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c5dc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c5e0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c5e4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c5e8:	fa5f f28e 	uxtb.w	r2, lr
 801c5ec:	b2ff      	uxtb	r7, r7
 801c5ee:	f000 80dd 	beq.w	801c7ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c5f2:	fa1f f882 	uxth.w	r8, r2
 801c5f6:	43d2      	mvns	r2, r2
 801c5f8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801c5fc:	fb17 f708 	smulbb	r7, r7, r8
 801c600:	b2d2      	uxtb	r2, r2
 801c602:	fb19 f908 	smulbb	r9, r9, r8
 801c606:	fb0e 7702 	mla	r7, lr, r2, r7
 801c60a:	fb1b f808 	smulbb	r8, fp, r8
 801c60e:	b2bf      	uxth	r7, r7
 801c610:	f107 0e01 	add.w	lr, r7, #1
 801c614:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c618:	123f      	asrs	r7, r7, #8
 801c61a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c61e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c622:	fb07 9902 	mla	r9, r7, r2, r9
 801c626:	fa1f f989 	uxth.w	r9, r9
 801c62a:	f109 0701 	add.w	r7, r9, #1
 801c62e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c632:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c636:	fb07 8802 	mla	r8, r7, r2, r8
 801c63a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c63e:	fa1f f888 	uxth.w	r8, r8
 801c642:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c646:	f108 0201 	add.w	r2, r8, #1
 801c64a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c64e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c652:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c656:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c658:	3603      	adds	r6, #3
 801c65a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c65e:	4414      	add	r4, r2
 801c660:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c662:	4410      	add	r0, r2
 801c664:	e7ab      	b.n	801c5be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c666:	f04f 0e00 	mov.w	lr, #0
 801c66a:	eba3 020e 	sub.w	r2, r3, lr
 801c66e:	2a00      	cmp	r2, #0
 801c670:	dc3d      	bgt.n	801c6ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801c672:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c676:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c67a:	441d      	add	r5, r3
 801c67c:	2900      	cmp	r1, #0
 801c67e:	f340 809c 	ble.w	801c7ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c682:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c688:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c68c:	3901      	subs	r1, #1
 801c68e:	eeb0 6a62 	vmov.f32	s12, s5
 801c692:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c696:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c69a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c69e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c6a2:	eeb0 6a43 	vmov.f32	s12, s6
 801c6a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6aa:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c6ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6c6:	ee12 2a90 	vmov	r2, s5
 801c6ca:	eef0 2a47 	vmov.f32	s5, s14
 801c6ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6d2:	ee13 2a10 	vmov	r2, s6
 801c6d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c6d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6da:	eeb0 3a67 	vmov.f32	s6, s15
 801c6de:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6e2:	9a01      	ldr	r2, [sp, #4]
 801c6e4:	9310      	str	r3, [sp, #64]	; 0x40
 801c6e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c6e8:	bf08      	it	eq
 801c6ea:	4613      	moveq	r3, r2
 801c6ec:	e734      	b.n	801c558 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801c6ee:	1427      	asrs	r7, r4, #16
 801c6f0:	d44d      	bmi.n	801c78e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c6f2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c6f6:	42be      	cmp	r6, r7
 801c6f8:	dd49      	ble.n	801c78e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c6fa:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c6fe:	d446      	bmi.n	801c78e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c700:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c704:	4542      	cmp	r2, r8
 801c706:	dd42      	ble.n	801c78e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c708:	b236      	sxth	r6, r6
 801c70a:	9a00      	ldr	r2, [sp, #0]
 801c70c:	fb08 7606 	mla	r6, r8, r6, r7
 801c710:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c714:	0e3a      	lsrs	r2, r7, #24
 801c716:	d03a      	beq.n	801c78e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c718:	2aff      	cmp	r2, #255	; 0xff
 801c71a:	b2d6      	uxtb	r6, r2
 801c71c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c720:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c724:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801c728:	b2ff      	uxtb	r7, r7
 801c72a:	d037      	beq.n	801c79c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801c72c:	fa1f f986 	uxth.w	r9, r6
 801c730:	4472      	add	r2, lr
 801c732:	43f6      	mvns	r6, r6
 801c734:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c738:	fb17 f709 	smulbb	r7, r7, r9
 801c73c:	fb1a fa09 	smulbb	sl, sl, r9
 801c740:	b2f6      	uxtb	r6, r6
 801c742:	fb1b f909 	smulbb	r9, fp, r9
 801c746:	fb08 7706 	mla	r7, r8, r6, r7
 801c74a:	b2bf      	uxth	r7, r7
 801c74c:	f107 0801 	add.w	r8, r7, #1
 801c750:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c754:	123f      	asrs	r7, r7, #8
 801c756:	54af      	strb	r7, [r5, r2]
 801c758:	442a      	add	r2, r5
 801c75a:	7857      	ldrb	r7, [r2, #1]
 801c75c:	fb07 aa06 	mla	sl, r7, r6, sl
 801c760:	fa1f fa8a 	uxth.w	sl, sl
 801c764:	f10a 0701 	add.w	r7, sl, #1
 801c768:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c76c:	7897      	ldrb	r7, [r2, #2]
 801c76e:	fb07 9906 	mla	r9, r7, r6, r9
 801c772:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c776:	fa1f f989 	uxth.w	r9, r9
 801c77a:	f882 a001 	strb.w	sl, [r2, #1]
 801c77e:	f109 0601 	add.w	r6, r9, #1
 801c782:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c786:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c78a:	f882 9002 	strb.w	r9, [r2, #2]
 801c78e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c790:	f10e 0e01 	add.w	lr, lr, #1
 801c794:	4414      	add	r4, r2
 801c796:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c798:	4410      	add	r0, r2
 801c79a:	e766      	b.n	801c66a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c79c:	4472      	add	r2, lr
 801c79e:	54af      	strb	r7, [r5, r2]
 801c7a0:	442a      	add	r2, r5
 801c7a2:	f882 a001 	strb.w	sl, [r2, #1]
 801c7a6:	f882 b002 	strb.w	fp, [r2, #2]
 801c7aa:	e7f0      	b.n	801c78e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c7ac:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c7b0:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c7b4:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c7b8:	e74d      	b.n	801c656 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c7ba:	b003      	add	sp, #12
 801c7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7c4:	b087      	sub	sp, #28
 801c7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c7cc:	9204      	str	r2, [sp, #16]
 801c7ce:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c7d2:	6860      	ldr	r0, [r4, #4]
 801c7d4:	9205      	str	r2, [sp, #20]
 801c7d6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c7da:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801c7de:	9101      	str	r1, [sp, #4]
 801c7e0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c7e4:	fb00 2505 	mla	r5, r0, r5, r2
 801c7e8:	6822      	ldr	r2, [r4, #0]
 801c7ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c7ee:	4415      	add	r5, r2
 801c7f0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c7f4:	3201      	adds	r2, #1
 801c7f6:	f022 0201 	bic.w	r2, r2, #1
 801c7fa:	9202      	str	r2, [sp, #8]
 801c7fc:	f8dc 2000 	ldr.w	r2, [ip]
 801c800:	9203      	str	r2, [sp, #12]
 801c802:	9a01      	ldr	r2, [sp, #4]
 801c804:	2a00      	cmp	r2, #0
 801c806:	dc03      	bgt.n	801c810 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c808:	9a04      	ldr	r2, [sp, #16]
 801c80a:	2a00      	cmp	r2, #0
 801c80c:	f340 8135 	ble.w	801ca7a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c810:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c812:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c816:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c81a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c81c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c820:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c824:	2b00      	cmp	r3, #0
 801c826:	dd0d      	ble.n	801c844 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c828:	1422      	asrs	r2, r4, #16
 801c82a:	d405      	bmi.n	801c838 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c82c:	4542      	cmp	r2, r8
 801c82e:	da03      	bge.n	801c838 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c830:	1402      	asrs	r2, r0, #16
 801c832:	d401      	bmi.n	801c838 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c834:	42ba      	cmp	r2, r7
 801c836:	db06      	blt.n	801c846 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c838:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c83a:	4474      	add	r4, lr
 801c83c:	3b01      	subs	r3, #1
 801c83e:	3503      	adds	r5, #3
 801c840:	4410      	add	r0, r2
 801c842:	e7ef      	b.n	801c824 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c844:	d077      	beq.n	801c936 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801c846:	1e5a      	subs	r2, r3, #1
 801c848:	fb0e 4602 	mla	r6, lr, r2, r4
 801c84c:	1436      	asrs	r6, r6, #16
 801c84e:	d469      	bmi.n	801c924 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c850:	4546      	cmp	r6, r8
 801c852:	da67      	bge.n	801c924 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c854:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c856:	fb06 0202 	mla	r2, r6, r2, r0
 801c85a:	1412      	asrs	r2, r2, #16
 801c85c:	d462      	bmi.n	801c924 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c85e:	42ba      	cmp	r2, r7
 801c860:	da60      	bge.n	801c924 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c862:	1cee      	adds	r6, r5, #3
 801c864:	4699      	mov	r9, r3
 801c866:	f1b9 0f00 	cmp.w	r9, #0
 801c86a:	dd5f      	ble.n	801c92c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c86c:	1422      	asrs	r2, r4, #16
 801c86e:	9902      	ldr	r1, [sp, #8]
 801c870:	1407      	asrs	r7, r0, #16
 801c872:	fb01 2707 	mla	r7, r1, r7, r2
 801c876:	9903      	ldr	r1, [sp, #12]
 801c878:	087a      	lsrs	r2, r7, #1
 801c87a:	5c8a      	ldrb	r2, [r1, r2]
 801c87c:	07f9      	lsls	r1, r7, #31
 801c87e:	bf54      	ite	pl
 801c880:	f002 020f 	andpl.w	r2, r2, #15
 801c884:	1112      	asrmi	r2, r2, #4
 801c886:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c88a:	b2d2      	uxtb	r2, r2
 801c88c:	2a00      	cmp	r2, #0
 801c88e:	d042      	beq.n	801c916 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c890:	497b      	ldr	r1, [pc, #492]	; (801ca80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c892:	680f      	ldr	r7, [r1, #0]
 801c894:	9905      	ldr	r1, [sp, #20]
 801c896:	fa5f fb87 	uxtb.w	fp, r7
 801c89a:	434a      	muls	r2, r1
 801c89c:	f102 0801 	add.w	r8, r2, #1
 801c8a0:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801c8a4:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801c8a8:	1212      	asrs	r2, r2, #8
 801c8aa:	fa1f fa82 	uxth.w	sl, r2
 801c8ae:	43d2      	mvns	r2, r2
 801c8b0:	fb1b fb0a 	smulbb	fp, fp, sl
 801c8b4:	b2d2      	uxtb	r2, r2
 801c8b6:	fb08 b802 	mla	r8, r8, r2, fp
 801c8ba:	fa1f f888 	uxth.w	r8, r8
 801c8be:	f108 0b01 	add.w	fp, r8, #1
 801c8c2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c8c6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c8ca:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c8ce:	fb1b fb0a 	smulbb	fp, fp, sl
 801c8d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c8d6:	fb17 fa0a 	smulbb	sl, r7, sl
 801c8da:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c8de:	f806 8c03 	strb.w	r8, [r6, #-3]
 801c8e2:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801c8e6:	fb07 aa02 	mla	sl, r7, r2, sl
 801c8ea:	fb08 b802 	mla	r8, r8, r2, fp
 801c8ee:	fa1f fa8a 	uxth.w	sl, sl
 801c8f2:	fa1f f888 	uxth.w	r8, r8
 801c8f6:	f10a 0701 	add.w	r7, sl, #1
 801c8fa:	f108 0b01 	add.w	fp, r8, #1
 801c8fe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c902:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c906:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c90a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c90e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c912:	f806 8c02 	strb.w	r8, [r6, #-2]
 801c916:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c918:	4474      	add	r4, lr
 801c91a:	3603      	adds	r6, #3
 801c91c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c920:	4410      	add	r0, r2
 801c922:	e7a0      	b.n	801c866 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c924:	2700      	movs	r7, #0
 801c926:	1bda      	subs	r2, r3, r7
 801c928:	2a00      	cmp	r2, #0
 801c92a:	dc3e      	bgt.n	801c9aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801c92c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c930:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c934:	441d      	add	r5, r3
 801c936:	9b01      	ldr	r3, [sp, #4]
 801c938:	2b00      	cmp	r3, #0
 801c93a:	f340 809e 	ble.w	801ca7a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c93e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c942:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c944:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c948:	eeb0 6a62 	vmov.f32	s12, s5
 801c94c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c950:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c954:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c958:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c95c:	eeb0 6a43 	vmov.f32	s12, s6
 801c960:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c964:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c968:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c96c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c970:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c974:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c978:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c97c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c980:	ee12 2a90 	vmov	r2, s5
 801c984:	eef0 2a47 	vmov.f32	s5, s14
 801c988:	fb92 fef3 	sdiv	lr, r2, r3
 801c98c:	ee13 2a10 	vmov	r2, s6
 801c990:	eeb0 3a67 	vmov.f32	s6, s15
 801c994:	fb92 f3f3 	sdiv	r3, r2, r3
 801c998:	9314      	str	r3, [sp, #80]	; 0x50
 801c99a:	9b01      	ldr	r3, [sp, #4]
 801c99c:	9a04      	ldr	r2, [sp, #16]
 801c99e:	3b01      	subs	r3, #1
 801c9a0:	9301      	str	r3, [sp, #4]
 801c9a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c9a4:	bf08      	it	eq
 801c9a6:	4613      	moveq	r3, r2
 801c9a8:	e72b      	b.n	801c802 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c9aa:	1426      	asrs	r6, r4, #16
 801c9ac:	d460      	bmi.n	801ca70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c9ae:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c9b2:	42b2      	cmp	r2, r6
 801c9b4:	dd5c      	ble.n	801ca70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c9b6:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c9ba:	d459      	bmi.n	801ca70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c9bc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c9c0:	4542      	cmp	r2, r8
 801c9c2:	dd55      	ble.n	801ca70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c9c4:	9a02      	ldr	r2, [sp, #8]
 801c9c6:	9903      	ldr	r1, [sp, #12]
 801c9c8:	fb08 6602 	mla	r6, r8, r2, r6
 801c9cc:	0872      	lsrs	r2, r6, #1
 801c9ce:	07f6      	lsls	r6, r6, #31
 801c9d0:	5c8a      	ldrb	r2, [r1, r2]
 801c9d2:	bf54      	ite	pl
 801c9d4:	f002 020f 	andpl.w	r2, r2, #15
 801c9d8:	1112      	asrmi	r2, r2, #4
 801c9da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c9de:	b2d2      	uxtb	r2, r2
 801c9e0:	2a00      	cmp	r2, #0
 801c9e2:	d045      	beq.n	801ca70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c9e4:	4926      	ldr	r1, [pc, #152]	; (801ca80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c9e6:	f8d1 8000 	ldr.w	r8, [r1]
 801c9ea:	9905      	ldr	r1, [sp, #20]
 801c9ec:	fa5f fb88 	uxtb.w	fp, r8
 801c9f0:	434a      	muls	r2, r1
 801c9f2:	1c56      	adds	r6, r2, #1
 801c9f4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c9f8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c9fc:	1212      	asrs	r2, r2, #8
 801c9fe:	f815 9006 	ldrb.w	r9, [r5, r6]
 801ca02:	fa1f fa82 	uxth.w	sl, r2
 801ca06:	43d2      	mvns	r2, r2
 801ca08:	fb1b fb0a 	smulbb	fp, fp, sl
 801ca0c:	b2d2      	uxtb	r2, r2
 801ca0e:	fb09 b902 	mla	r9, r9, r2, fp
 801ca12:	fa1f f989 	uxth.w	r9, r9
 801ca16:	f109 0b01 	add.w	fp, r9, #1
 801ca1a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ca1e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801ca22:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801ca26:	fb1b fb0a 	smulbb	fp, fp, sl
 801ca2a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca2e:	fb18 fa0a 	smulbb	sl, r8, sl
 801ca32:	f805 9006 	strb.w	r9, [r5, r6]
 801ca36:	442e      	add	r6, r5
 801ca38:	f896 8002 	ldrb.w	r8, [r6, #2]
 801ca3c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ca40:	fb08 aa02 	mla	sl, r8, r2, sl
 801ca44:	fb09 b902 	mla	r9, r9, r2, fp
 801ca48:	fa1f fa8a 	uxth.w	sl, sl
 801ca4c:	fa1f f989 	uxth.w	r9, r9
 801ca50:	f10a 0801 	add.w	r8, sl, #1
 801ca54:	f109 0b01 	add.w	fp, r9, #1
 801ca58:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801ca5c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ca60:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca64:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca68:	f886 a002 	strb.w	sl, [r6, #2]
 801ca6c:	f886 9001 	strb.w	r9, [r6, #1]
 801ca70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca72:	4474      	add	r4, lr
 801ca74:	3701      	adds	r7, #1
 801ca76:	4410      	add	r0, r2
 801ca78:	e755      	b.n	801c926 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801ca7a:	b007      	add	sp, #28
 801ca7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca80:	2400ff1c 	.word	0x2400ff1c

0801ca84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca88:	b085      	sub	sp, #20
 801ca8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ca8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ca90:	9203      	str	r2, [sp, #12]
 801ca92:	6860      	ldr	r0, [r4, #4]
 801ca94:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801ca98:	9100      	str	r1, [sp, #0]
 801ca9a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801ca9e:	fb00 2606 	mla	r6, r0, r6, r2
 801caa2:	6822      	ldr	r2, [r4, #0]
 801caa4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801caa8:	4416      	add	r6, r2
 801caaa:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801caae:	3201      	adds	r2, #1
 801cab0:	f022 0201 	bic.w	r2, r2, #1
 801cab4:	9201      	str	r2, [sp, #4]
 801cab6:	f8dc 2000 	ldr.w	r2, [ip]
 801caba:	9202      	str	r2, [sp, #8]
 801cabc:	9a00      	ldr	r2, [sp, #0]
 801cabe:	2a00      	cmp	r2, #0
 801cac0:	dc03      	bgt.n	801caca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801cac2:	9a03      	ldr	r2, [sp, #12]
 801cac4:	2a00      	cmp	r2, #0
 801cac6:	f340 8140 	ble.w	801cd4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801caca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cacc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801cad0:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801cad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cad6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cada:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cade:	2b00      	cmp	r3, #0
 801cae0:	dd0e      	ble.n	801cb00 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cae2:	142a      	asrs	r2, r5, #16
 801cae4:	d405      	bmi.n	801caf2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801cae6:	4572      	cmp	r2, lr
 801cae8:	da03      	bge.n	801caf2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801caea:	1422      	asrs	r2, r4, #16
 801caec:	d401      	bmi.n	801caf2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801caee:	42ba      	cmp	r2, r7
 801caf0:	db07      	blt.n	801cb02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801caf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801caf4:	3b01      	subs	r3, #1
 801caf6:	3603      	adds	r6, #3
 801caf8:	4415      	add	r5, r2
 801cafa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cafc:	4414      	add	r4, r2
 801cafe:	e7ee      	b.n	801cade <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801cb00:	d072      	beq.n	801cbe8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cb02:	1e5a      	subs	r2, r3, #1
 801cb04:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cb06:	fb00 5002 	mla	r0, r0, r2, r5
 801cb0a:	1400      	asrs	r0, r0, #16
 801cb0c:	d463      	bmi.n	801cbd6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cb0e:	4570      	cmp	r0, lr
 801cb10:	da61      	bge.n	801cbd6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cb12:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cb14:	fb00 4202 	mla	r2, r0, r2, r4
 801cb18:	1412      	asrs	r2, r2, #16
 801cb1a:	d45c      	bmi.n	801cbd6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cb1c:	42ba      	cmp	r2, r7
 801cb1e:	da5a      	bge.n	801cbd6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cb20:	1cf0      	adds	r0, r6, #3
 801cb22:	469a      	mov	sl, r3
 801cb24:	f1ba 0f00 	cmp.w	sl, #0
 801cb28:	dd59      	ble.n	801cbde <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801cb2a:	142a      	asrs	r2, r5, #16
 801cb2c:	9901      	ldr	r1, [sp, #4]
 801cb2e:	1427      	asrs	r7, r4, #16
 801cb30:	fb01 2707 	mla	r7, r1, r7, r2
 801cb34:	9902      	ldr	r1, [sp, #8]
 801cb36:	087a      	lsrs	r2, r7, #1
 801cb38:	5c8a      	ldrb	r2, [r1, r2]
 801cb3a:	07f9      	lsls	r1, r7, #31
 801cb3c:	bf54      	ite	pl
 801cb3e:	f002 020f 	andpl.w	r2, r2, #15
 801cb42:	1112      	asrmi	r2, r2, #4
 801cb44:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cb48:	b2d2      	uxtb	r2, r2
 801cb4a:	2a00      	cmp	r2, #0
 801cb4c:	d03b      	beq.n	801cbc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cb4e:	4980      	ldr	r1, [pc, #512]	; (801cd50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801cb50:	2aff      	cmp	r2, #255	; 0xff
 801cb52:	680f      	ldr	r7, [r1, #0]
 801cb54:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cb58:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cb5c:	b2ff      	uxtb	r7, r7
 801cb5e:	f000 80ed 	beq.w	801cd3c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801cb62:	fa1f f882 	uxth.w	r8, r2
 801cb66:	43d2      	mvns	r2, r2
 801cb68:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801cb6c:	fb17 f708 	smulbb	r7, r7, r8
 801cb70:	b2d2      	uxtb	r2, r2
 801cb72:	fb19 f908 	smulbb	r9, r9, r8
 801cb76:	fb0e 7702 	mla	r7, lr, r2, r7
 801cb7a:	fb1b f808 	smulbb	r8, fp, r8
 801cb7e:	b2bf      	uxth	r7, r7
 801cb80:	f107 0e01 	add.w	lr, r7, #1
 801cb84:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801cb88:	123f      	asrs	r7, r7, #8
 801cb8a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cb8e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801cb92:	fb07 9902 	mla	r9, r7, r2, r9
 801cb96:	fa1f f989 	uxth.w	r9, r9
 801cb9a:	f109 0701 	add.w	r7, r9, #1
 801cb9e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cba2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801cba6:	fb07 8802 	mla	r8, r7, r2, r8
 801cbaa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cbae:	fa1f f888 	uxth.w	r8, r8
 801cbb2:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cbb6:	f108 0201 	add.w	r2, r8, #1
 801cbba:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801cbbe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cbc2:	f800 8c01 	strb.w	r8, [r0, #-1]
 801cbc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cbc8:	3003      	adds	r0, #3
 801cbca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cbce:	4415      	add	r5, r2
 801cbd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cbd2:	4414      	add	r4, r2
 801cbd4:	e7a6      	b.n	801cb24 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cbd6:	2700      	movs	r7, #0
 801cbd8:	1bda      	subs	r2, r3, r7
 801cbda:	2a00      	cmp	r2, #0
 801cbdc:	dc40      	bgt.n	801cc60 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cbde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cbe6:	441e      	add	r6, r3
 801cbe8:	9b00      	ldr	r3, [sp, #0]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	f340 80ad 	ble.w	801cd4a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801cbf0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cbf6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbfa:	eeb0 6a62 	vmov.f32	s12, s5
 801cbfe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cc02:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc06:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc0a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cc0e:	eeb0 6a43 	vmov.f32	s12, s6
 801cc12:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc16:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cc1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc1e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc22:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc26:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc2a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc2e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc32:	ee12 2a90 	vmov	r2, s5
 801cc36:	eef0 2a47 	vmov.f32	s5, s14
 801cc3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc3e:	ee13 2a10 	vmov	r2, s6
 801cc42:	9311      	str	r3, [sp, #68]	; 0x44
 801cc44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc46:	eeb0 3a67 	vmov.f32	s6, s15
 801cc4a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc4e:	9312      	str	r3, [sp, #72]	; 0x48
 801cc50:	9b00      	ldr	r3, [sp, #0]
 801cc52:	9a03      	ldr	r2, [sp, #12]
 801cc54:	3b01      	subs	r3, #1
 801cc56:	9300      	str	r3, [sp, #0]
 801cc58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc5a:	bf08      	it	eq
 801cc5c:	4613      	moveq	r3, r2
 801cc5e:	e72d      	b.n	801cabc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801cc60:	1428      	asrs	r0, r5, #16
 801cc62:	d45c      	bmi.n	801cd1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cc64:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801cc68:	4282      	cmp	r2, r0
 801cc6a:	dd58      	ble.n	801cd1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cc6c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801cc70:	d455      	bmi.n	801cd1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cc72:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801cc76:	4572      	cmp	r2, lr
 801cc78:	dd51      	ble.n	801cd1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cc7a:	9a01      	ldr	r2, [sp, #4]
 801cc7c:	9902      	ldr	r1, [sp, #8]
 801cc7e:	fb0e 0002 	mla	r0, lr, r2, r0
 801cc82:	0842      	lsrs	r2, r0, #1
 801cc84:	07c0      	lsls	r0, r0, #31
 801cc86:	5c8a      	ldrb	r2, [r1, r2]
 801cc88:	bf54      	ite	pl
 801cc8a:	f002 020f 	andpl.w	r2, r2, #15
 801cc8e:	1112      	asrmi	r2, r2, #4
 801cc90:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cc94:	b2d2      	uxtb	r2, r2
 801cc96:	2a00      	cmp	r2, #0
 801cc98:	d041      	beq.n	801cd1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cc9a:	492d      	ldr	r1, [pc, #180]	; (801cd50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801cc9c:	2aff      	cmp	r2, #255	; 0xff
 801cc9e:	6808      	ldr	r0, [r1, #0]
 801cca0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801cca4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801cca8:	fa5f fe80 	uxtb.w	lr, r0
 801ccac:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801ccb0:	d03b      	beq.n	801cd2a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ccb2:	fa1f f982 	uxth.w	r9, r2
 801ccb6:	4438      	add	r0, r7
 801ccb8:	43d2      	mvns	r2, r2
 801ccba:	f816 8000 	ldrb.w	r8, [r6, r0]
 801ccbe:	fb1e fe09 	smulbb	lr, lr, r9
 801ccc2:	fb1a fa09 	smulbb	sl, sl, r9
 801ccc6:	b2d2      	uxtb	r2, r2
 801ccc8:	fb1b f909 	smulbb	r9, fp, r9
 801cccc:	fb08 ee02 	mla	lr, r8, r2, lr
 801ccd0:	fa1f fe8e 	uxth.w	lr, lr
 801ccd4:	f10e 0801 	add.w	r8, lr, #1
 801ccd8:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801ccdc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cce0:	f806 e000 	strb.w	lr, [r6, r0]
 801cce4:	4430      	add	r0, r6
 801cce6:	f890 e001 	ldrb.w	lr, [r0, #1]
 801ccea:	fb0e aa02 	mla	sl, lr, r2, sl
 801ccee:	fa1f fa8a 	uxth.w	sl, sl
 801ccf2:	f10a 0e01 	add.w	lr, sl, #1
 801ccf6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801ccfa:	f890 e002 	ldrb.w	lr, [r0, #2]
 801ccfe:	fb0e 9902 	mla	r9, lr, r2, r9
 801cd02:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cd06:	fa1f f989 	uxth.w	r9, r9
 801cd0a:	f880 a001 	strb.w	sl, [r0, #1]
 801cd0e:	f109 0201 	add.w	r2, r9, #1
 801cd12:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801cd16:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd1a:	f880 9002 	strb.w	r9, [r0, #2]
 801cd1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd20:	3701      	adds	r7, #1
 801cd22:	4415      	add	r5, r2
 801cd24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd26:	4414      	add	r4, r2
 801cd28:	e756      	b.n	801cbd8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cd2a:	4438      	add	r0, r7
 801cd2c:	f806 e000 	strb.w	lr, [r6, r0]
 801cd30:	4430      	add	r0, r6
 801cd32:	f880 a001 	strb.w	sl, [r0, #1]
 801cd36:	f880 b002 	strb.w	fp, [r0, #2]
 801cd3a:	e7f0      	b.n	801cd1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cd3c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cd40:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cd44:	f800 bc01 	strb.w	fp, [r0, #-1]
 801cd48:	e73d      	b.n	801cbc6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cd4a:	b005      	add	sp, #20
 801cd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd50:	2400ff1c 	.word	0x2400ff1c

0801cd54 <_ZN8touchgfx8LCD24bppD1Ev>:
 801cd54:	4770      	bx	lr

0801cd56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801cd56:	4770      	bx	lr

0801cd58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801cd58:	4770      	bx	lr

0801cd5a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801cd5a:	4770      	bx	lr

0801cd5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801cd5c:	4770      	bx	lr

0801cd5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cd5e:	4770      	bx	lr

0801cd60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cd60:	4770      	bx	lr

0801cd62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cd62:	4770      	bx	lr

0801cd64 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cd64:	4770      	bx	lr

0801cd66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cd66:	4770      	bx	lr

0801cd68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cd68:	4770      	bx	lr

0801cd6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cd6a:	4770      	bx	lr

0801cd6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cd6c:	4770      	bx	lr

0801cd6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cd6e:	4770      	bx	lr

0801cd70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cd70:	4770      	bx	lr

0801cd72 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cd72:	4770      	bx	lr

0801cd74 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cd74:	4770      	bx	lr

0801cd76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cd76:	4770      	bx	lr

0801cd78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cd78:	4770      	bx	lr

0801cd7a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cd7a:	4770      	bx	lr

0801cd7c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cd7c:	4770      	bx	lr
	...

0801cd80 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801cd80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd82:	4606      	mov	r6, r0
 801cd84:	b087      	sub	sp, #28
 801cd86:	4615      	mov	r5, r2
 801cd88:	461f      	mov	r7, r3
 801cd8a:	b353      	cbz	r3, 801cde2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cd8c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	dd26      	ble.n	801cde2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cd94:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	dd22      	ble.n	801cde2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cd9c:	6808      	ldr	r0, [r1, #0]
 801cd9e:	aa04      	add	r2, sp, #16
 801cda0:	6849      	ldr	r1, [r1, #4]
 801cda2:	4c1b      	ldr	r4, [pc, #108]	; (801ce10 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801cda4:	c203      	stmia	r2!, {r0, r1}
 801cda6:	a804      	add	r0, sp, #16
 801cda8:	f7fa ff80 	bl	8017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cdac:	6820      	ldr	r0, [r4, #0]
 801cdae:	6803      	ldr	r3, [r0, #0]
 801cdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdb2:	4798      	blx	r3
 801cdb4:	2fff      	cmp	r7, #255	; 0xff
 801cdb6:	d016      	beq.n	801cde6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801cdb8:	f010 0f08 	tst.w	r0, #8
 801cdbc:	6820      	ldr	r0, [r4, #0]
 801cdbe:	d015      	beq.n	801cdec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801cdc0:	2400      	movs	r4, #0
 801cdc2:	6801      	ldr	r1, [r0, #0]
 801cdc4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cdc8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cdcc:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801cdd0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801cdd4:	9401      	str	r4, [sp, #4]
 801cdd6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cdda:	9400      	str	r4, [sp, #0]
 801cddc:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801cdde:	4629      	mov	r1, r5
 801cde0:	47a0      	blx	r4
 801cde2:	b007      	add	sp, #28
 801cde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cde6:	f010 0f02 	tst.w	r0, #2
 801cdea:	e7e7      	b.n	801cdbc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801cdec:	6803      	ldr	r3, [r0, #0]
 801cdee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdf0:	4798      	blx	r3
 801cdf2:	4b08      	ldr	r3, [pc, #32]	; (801ce14 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801cdf4:	4601      	mov	r1, r0
 801cdf6:	4630      	mov	r0, r6
 801cdf8:	881a      	ldrh	r2, [r3, #0]
 801cdfa:	6833      	ldr	r3, [r6, #0]
 801cdfc:	e9cd 5700 	strd	r5, r7, [sp]
 801ce00:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801ce02:	ab04      	add	r3, sp, #16
 801ce04:	47a8      	blx	r5
 801ce06:	6820      	ldr	r0, [r4, #0]
 801ce08:	6803      	ldr	r3, [r0, #0]
 801ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce0c:	4798      	blx	r3
 801ce0e:	e7e8      	b.n	801cde2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801ce10:	2400ff14 	.word	0x2400ff14
 801ce14:	2400ff0e 	.word	0x2400ff0e

0801ce18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ce18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce1c:	b08b      	sub	sp, #44	; 0x2c
 801ce1e:	460d      	mov	r5, r1
 801ce20:	4616      	mov	r6, r2
 801ce22:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801ce26:	f1b8 0f00 	cmp.w	r8, #0
 801ce2a:	d047      	beq.n	801cebc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801ce2c:	6810      	ldr	r0, [r2, #0]
 801ce2e:	ac06      	add	r4, sp, #24
 801ce30:	6851      	ldr	r1, [r2, #4]
 801ce32:	4f51      	ldr	r7, [pc, #324]	; (801cf78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801ce34:	c403      	stmia	r4!, {r0, r1}
 801ce36:	6818      	ldr	r0, [r3, #0]
 801ce38:	ac08      	add	r4, sp, #32
 801ce3a:	6859      	ldr	r1, [r3, #4]
 801ce3c:	c403      	stmia	r4!, {r0, r1}
 801ce3e:	a806      	add	r0, sp, #24
 801ce40:	f7fa ff34 	bl	8017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ce44:	4631      	mov	r1, r6
 801ce46:	a808      	add	r0, sp, #32
 801ce48:	f7fa ff58 	bl	8017cfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ce4c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ce50:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ce54:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ce58:	6838      	ldr	r0, [r7, #0]
 801ce5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ce5e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801ce62:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801ce66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ce6a:	440d      	add	r5, r1
 801ce6c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ce70:	440a      	add	r2, r1
 801ce72:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ce76:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ce7a:	4413      	add	r3, r2
 801ce7c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ce80:	6803      	ldr	r3, [r0, #0]
 801ce82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce84:	4798      	blx	r3
 801ce86:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ce8a:	d01a      	beq.n	801cec2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801ce8c:	f010 0f04 	tst.w	r0, #4
 801ce90:	6838      	ldr	r0, [r7, #0]
 801ce92:	d019      	beq.n	801cec8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801ce94:	2100      	movs	r1, #0
 801ce96:	6807      	ldr	r7, [r0, #0]
 801ce98:	b2a4      	uxth	r4, r4
 801ce9a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ce9e:	b2b6      	uxth	r6, r6
 801cea0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801cea4:	9401      	str	r4, [sp, #4]
 801cea6:	9600      	str	r6, [sp, #0]
 801cea8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ceac:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801ceb0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ceb4:	9102      	str	r1, [sp, #8]
 801ceb6:	4629      	mov	r1, r5
 801ceb8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801ceba:	47a0      	blx	r4
 801cebc:	b00b      	add	sp, #44	; 0x2c
 801cebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cec2:	f010 0f01 	tst.w	r0, #1
 801cec6:	e7e3      	b.n	801ce90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801cec8:	6803      	ldr	r3, [r0, #0]
 801ceca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cecc:	4798      	blx	r3
 801cece:	4a2b      	ldr	r2, [pc, #172]	; (801cf7c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801ced0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ced4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ced8:	8813      	ldrh	r3, [r2, #0]
 801ceda:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801cede:	fb03 f404 	mul.w	r4, r3, r4
 801cee2:	fb03 c101 	mla	r1, r3, r1, ip
 801cee6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ceea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ceee:	4408      	add	r0, r1
 801cef0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801cef4:	4404      	add	r4, r0
 801cef6:	d02e      	beq.n	801cf56 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801cef8:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801cefc:	1b9b      	subs	r3, r3, r6
 801cefe:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801cf02:	1b96      	subs	r6, r2, r6
 801cf04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf08:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cf0c:	42a0      	cmp	r0, r4
 801cf0e:	d22d      	bcs.n	801cf6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801cf10:	eb00 0e01 	add.w	lr, r0, r1
 801cf14:	4570      	cmp	r0, lr
 801cf16:	d210      	bcs.n	801cf3a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801cf18:	f890 9000 	ldrb.w	r9, [r0]
 801cf1c:	f815 2b01 	ldrb.w	r2, [r5], #1
 801cf20:	fb19 f90c 	smulbb	r9, r9, ip
 801cf24:	fb02 9208 	mla	r2, r2, r8, r9
 801cf28:	b292      	uxth	r2, r2
 801cf2a:	f102 0901 	add.w	r9, r2, #1
 801cf2e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801cf32:	1212      	asrs	r2, r2, #8
 801cf34:	f800 2b01 	strb.w	r2, [r0], #1
 801cf38:	e7ec      	b.n	801cf14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801cf3a:	4418      	add	r0, r3
 801cf3c:	4435      	add	r5, r6
 801cf3e:	e7e5      	b.n	801cf0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801cf40:	8813      	ldrh	r3, [r2, #0]
 801cf42:	1b9b      	subs	r3, r3, r6
 801cf44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf48:	4418      	add	r0, r3
 801cf4a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cf4e:	1b9b      	subs	r3, r3, r6
 801cf50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf54:	441d      	add	r5, r3
 801cf56:	42a0      	cmp	r0, r4
 801cf58:	d208      	bcs.n	801cf6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801cf5a:	eb00 0c01 	add.w	ip, r0, r1
 801cf5e:	4560      	cmp	r0, ip
 801cf60:	d2ee      	bcs.n	801cf40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801cf62:	f815 3b01 	ldrb.w	r3, [r5], #1
 801cf66:	f800 3b01 	strb.w	r3, [r0], #1
 801cf6a:	e7f8      	b.n	801cf5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801cf6c:	6838      	ldr	r0, [r7, #0]
 801cf6e:	6803      	ldr	r3, [r0, #0]
 801cf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf72:	4798      	blx	r3
 801cf74:	e7a2      	b.n	801cebc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801cf76:	bf00      	nop
 801cf78:	2400ff14 	.word	0x2400ff14
 801cf7c:	2400ff0e 	.word	0x2400ff0e

0801cf80 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801cf80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf82:	2300      	movs	r3, #0
 801cf84:	b085      	sub	sp, #20
 801cf86:	9300      	str	r3, [sp, #0]
 801cf88:	4b41      	ldr	r3, [pc, #260]	; (801d090 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801cf8a:	781b      	ldrb	r3, [r3, #0]
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d136      	bne.n	801cffe <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801cf90:	4a40      	ldr	r2, [pc, #256]	; (801d094 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801cf92:	f9b2 2000 	ldrsh.w	r2, [r2]
 801cf96:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d131      	bne.n	801d002 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801cf9e:	4b3e      	ldr	r3, [pc, #248]	; (801d098 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801cfa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cfa4:	ac02      	add	r4, sp, #8
 801cfa6:	6808      	ldr	r0, [r1, #0]
 801cfa8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cfac:	ab02      	add	r3, sp, #8
 801cfae:	6849      	ldr	r1, [r1, #4]
 801cfb0:	4d3a      	ldr	r5, [pc, #232]	; (801d09c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801cfb2:	c303      	stmia	r3!, {r0, r1}
 801cfb4:	4669      	mov	r1, sp
 801cfb6:	4620      	mov	r0, r4
 801cfb8:	f7fa fea0 	bl	8017cfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cfbc:	4668      	mov	r0, sp
 801cfbe:	f7fa fe75 	bl	8017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cfc2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cfc6:	f8bd 2000 	ldrh.w	r2, [sp]
 801cfca:	462e      	mov	r6, r5
 801cfcc:	6828      	ldr	r0, [r5, #0]
 801cfce:	4413      	add	r3, r2
 801cfd0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cfd4:	f8ad 3008 	strh.w	r3, [sp, #8]
 801cfd8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cfdc:	4413      	add	r3, r2
 801cfde:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cfe2:	6803      	ldr	r3, [r0, #0]
 801cfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfe6:	4798      	blx	r3
 801cfe8:	f010 0f01 	tst.w	r0, #1
 801cfec:	d00b      	beq.n	801d006 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801cfee:	6828      	ldr	r0, [r5, #0]
 801cff0:	6803      	ldr	r3, [r0, #0]
 801cff2:	e894 0006 	ldmia.w	r4, {r1, r2}
 801cff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cff8:	4798      	blx	r3
 801cffa:	b005      	add	sp, #20
 801cffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cffe:	4a26      	ldr	r2, [pc, #152]	; (801d098 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801d000:	e7c7      	b.n	801cf92 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801d002:	4b24      	ldr	r3, [pc, #144]	; (801d094 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801d004:	e7cc      	b.n	801cfa0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801d006:	6830      	ldr	r0, [r6, #0]
 801d008:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801d00c:	6803      	ldr	r3, [r0, #0]
 801d00e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801d012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d014:	4798      	blx	r3
 801d016:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801d01a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d01e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801d022:	fb14 3402 	smlabb	r4, r4, r2, r3
 801d026:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d02a:	4404      	add	r4, r0
 801d02c:	6830      	ldr	r0, [r6, #0]
 801d02e:	6803      	ldr	r3, [r0, #0]
 801d030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d032:	4798      	blx	r3
 801d034:	4917      	ldr	r1, [pc, #92]	; (801d094 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801d036:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d03a:	880b      	ldrh	r3, [r1, #0]
 801d03c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801d040:	fb03 c202 	mla	r2, r3, r2, ip
 801d044:	437b      	muls	r3, r7
 801d046:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801d04a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d04e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d052:	4410      	add	r0, r2
 801d054:	18c2      	adds	r2, r0, r3
 801d056:	4290      	cmp	r0, r2
 801d058:	d214      	bcs.n	801d084 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801d05a:	eb00 0c07 	add.w	ip, r0, r7
 801d05e:	4560      	cmp	r0, ip
 801d060:	d204      	bcs.n	801d06c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801d062:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d066:	f800 3b01 	strb.w	r3, [r0], #1
 801d06a:	e7f8      	b.n	801d05e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801d06c:	880b      	ldrh	r3, [r1, #0]
 801d06e:	1b5b      	subs	r3, r3, r5
 801d070:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d074:	4418      	add	r0, r3
 801d076:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801d07a:	1b5b      	subs	r3, r3, r5
 801d07c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d080:	441c      	add	r4, r3
 801d082:	e7e8      	b.n	801d056 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801d084:	6830      	ldr	r0, [r6, #0]
 801d086:	6803      	ldr	r3, [r0, #0]
 801d088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d08a:	4798      	blx	r3
 801d08c:	e7b5      	b.n	801cffa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801d08e:	bf00      	nop
 801d090:	2400ff0c 	.word	0x2400ff0c
 801d094:	2400ff0e 	.word	0x2400ff0e
 801d098:	2400ff10 	.word	0x2400ff10
 801d09c:	2400ff14 	.word	0x2400ff14

0801d0a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0a4:	b089      	sub	sp, #36	; 0x24
 801d0a6:	4607      	mov	r7, r0
 801d0a8:	4689      	mov	r9, r1
 801d0aa:	4692      	mov	sl, r2
 801d0ac:	ac08      	add	r4, sp, #32
 801d0ae:	461e      	mov	r6, r3
 801d0b0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801d0b4:	4620      	mov	r0, r4
 801d0b6:	f7fe f8ef 	bl	801b298 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d0ba:	683b      	ldr	r3, [r7, #0]
 801d0bc:	4605      	mov	r5, r0
 801d0be:	4620      	mov	r0, r4
 801d0c0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801d0c4:	f7fe f834 	bl	801b130 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d0c8:	4683      	mov	fp, r0
 801d0ca:	4620      	mov	r0, r4
 801d0cc:	f7fe f864 	bl	801b198 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d0d0:	4653      	mov	r3, sl
 801d0d2:	464a      	mov	r2, r9
 801d0d4:	4639      	mov	r1, r7
 801d0d6:	9500      	str	r5, [sp, #0]
 801d0d8:	e9cd b001 	strd	fp, r0, [sp, #4]
 801d0dc:	a806      	add	r0, sp, #24
 801d0de:	47c0      	blx	r8
 801d0e0:	a906      	add	r1, sp, #24
 801d0e2:	4630      	mov	r0, r6
 801d0e4:	f7fd ff08 	bl	801aef8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801d0e8:	4628      	mov	r0, r5
 801d0ea:	b009      	add	sp, #36	; 0x24
 801d0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0f0 <_ZN8touchgfx8LCD24bppD0Ev>:
 801d0f0:	b510      	push	{r4, lr}
 801d0f2:	4604      	mov	r4, r0
 801d0f4:	2158      	movs	r1, #88	; 0x58
 801d0f6:	f006 f8f6 	bl	80232e6 <_ZdlPvj>
 801d0fa:	4620      	mov	r0, r4
 801d0fc:	bd10      	pop	{r4, pc}

0801d0fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d0fe:	b510      	push	{r4, lr}
 801d100:	4604      	mov	r4, r0
 801d102:	2104      	movs	r1, #4
 801d104:	f006 f8ef 	bl	80232e6 <_ZdlPvj>
 801d108:	4620      	mov	r0, r4
 801d10a:	bd10      	pop	{r4, pc}

0801d10c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d10c:	b510      	push	{r4, lr}
 801d10e:	4604      	mov	r4, r0
 801d110:	2104      	movs	r1, #4
 801d112:	f006 f8e8 	bl	80232e6 <_ZdlPvj>
 801d116:	4620      	mov	r0, r4
 801d118:	bd10      	pop	{r4, pc}

0801d11a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d11a:	b510      	push	{r4, lr}
 801d11c:	4604      	mov	r4, r0
 801d11e:	2104      	movs	r1, #4
 801d120:	f006 f8e1 	bl	80232e6 <_ZdlPvj>
 801d124:	4620      	mov	r0, r4
 801d126:	bd10      	pop	{r4, pc}

0801d128 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d128:	b510      	push	{r4, lr}
 801d12a:	4604      	mov	r4, r0
 801d12c:	2104      	movs	r1, #4
 801d12e:	f006 f8da 	bl	80232e6 <_ZdlPvj>
 801d132:	4620      	mov	r0, r4
 801d134:	bd10      	pop	{r4, pc}

0801d136 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d136:	b510      	push	{r4, lr}
 801d138:	4604      	mov	r4, r0
 801d13a:	2104      	movs	r1, #4
 801d13c:	f006 f8d3 	bl	80232e6 <_ZdlPvj>
 801d140:	4620      	mov	r0, r4
 801d142:	bd10      	pop	{r4, pc}

0801d144 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d144:	b510      	push	{r4, lr}
 801d146:	4604      	mov	r4, r0
 801d148:	2104      	movs	r1, #4
 801d14a:	f006 f8cc 	bl	80232e6 <_ZdlPvj>
 801d14e:	4620      	mov	r0, r4
 801d150:	bd10      	pop	{r4, pc}

0801d152 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d152:	b510      	push	{r4, lr}
 801d154:	4604      	mov	r4, r0
 801d156:	2104      	movs	r1, #4
 801d158:	f006 f8c5 	bl	80232e6 <_ZdlPvj>
 801d15c:	4620      	mov	r0, r4
 801d15e:	bd10      	pop	{r4, pc}

0801d160 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d160:	b510      	push	{r4, lr}
 801d162:	4604      	mov	r4, r0
 801d164:	2104      	movs	r1, #4
 801d166:	f006 f8be 	bl	80232e6 <_ZdlPvj>
 801d16a:	4620      	mov	r0, r4
 801d16c:	bd10      	pop	{r4, pc}

0801d16e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d16e:	b510      	push	{r4, lr}
 801d170:	4604      	mov	r4, r0
 801d172:	2104      	movs	r1, #4
 801d174:	f006 f8b7 	bl	80232e6 <_ZdlPvj>
 801d178:	4620      	mov	r0, r4
 801d17a:	bd10      	pop	{r4, pc}

0801d17c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d17c:	b510      	push	{r4, lr}
 801d17e:	4604      	mov	r4, r0
 801d180:	2104      	movs	r1, #4
 801d182:	f006 f8b0 	bl	80232e6 <_ZdlPvj>
 801d186:	4620      	mov	r0, r4
 801d188:	bd10      	pop	{r4, pc}

0801d18a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d18a:	b510      	push	{r4, lr}
 801d18c:	4604      	mov	r4, r0
 801d18e:	2104      	movs	r1, #4
 801d190:	f006 f8a9 	bl	80232e6 <_ZdlPvj>
 801d194:	4620      	mov	r0, r4
 801d196:	bd10      	pop	{r4, pc}

0801d198 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d198:	b510      	push	{r4, lr}
 801d19a:	4604      	mov	r4, r0
 801d19c:	2104      	movs	r1, #4
 801d19e:	f006 f8a2 	bl	80232e6 <_ZdlPvj>
 801d1a2:	4620      	mov	r0, r4
 801d1a4:	bd10      	pop	{r4, pc}

0801d1a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d1a6:	b510      	push	{r4, lr}
 801d1a8:	4604      	mov	r4, r0
 801d1aa:	2104      	movs	r1, #4
 801d1ac:	f006 f89b 	bl	80232e6 <_ZdlPvj>
 801d1b0:	4620      	mov	r0, r4
 801d1b2:	bd10      	pop	{r4, pc}

0801d1b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d1b4:	b510      	push	{r4, lr}
 801d1b6:	4604      	mov	r4, r0
 801d1b8:	2104      	movs	r1, #4
 801d1ba:	f006 f894 	bl	80232e6 <_ZdlPvj>
 801d1be:	4620      	mov	r0, r4
 801d1c0:	bd10      	pop	{r4, pc}

0801d1c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d1c2:	b510      	push	{r4, lr}
 801d1c4:	4604      	mov	r4, r0
 801d1c6:	2104      	movs	r1, #4
 801d1c8:	f006 f88d 	bl	80232e6 <_ZdlPvj>
 801d1cc:	4620      	mov	r0, r4
 801d1ce:	bd10      	pop	{r4, pc}

0801d1d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d1d0:	b510      	push	{r4, lr}
 801d1d2:	4604      	mov	r4, r0
 801d1d4:	2104      	movs	r1, #4
 801d1d6:	f006 f886 	bl	80232e6 <_ZdlPvj>
 801d1da:	4620      	mov	r0, r4
 801d1dc:	bd10      	pop	{r4, pc}

0801d1de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d1de:	b510      	push	{r4, lr}
 801d1e0:	4604      	mov	r4, r0
 801d1e2:	2104      	movs	r1, #4
 801d1e4:	f006 f87f 	bl	80232e6 <_ZdlPvj>
 801d1e8:	4620      	mov	r0, r4
 801d1ea:	bd10      	pop	{r4, pc}

0801d1ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d1ec:	b510      	push	{r4, lr}
 801d1ee:	4604      	mov	r4, r0
 801d1f0:	2104      	movs	r1, #4
 801d1f2:	f006 f878 	bl	80232e6 <_ZdlPvj>
 801d1f6:	4620      	mov	r0, r4
 801d1f8:	bd10      	pop	{r4, pc}

0801d1fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d1fa:	b510      	push	{r4, lr}
 801d1fc:	4604      	mov	r4, r0
 801d1fe:	2104      	movs	r1, #4
 801d200:	f006 f871 	bl	80232e6 <_ZdlPvj>
 801d204:	4620      	mov	r0, r4
 801d206:	bd10      	pop	{r4, pc}

0801d208 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d208:	b510      	push	{r4, lr}
 801d20a:	4604      	mov	r4, r0
 801d20c:	2104      	movs	r1, #4
 801d20e:	f006 f86a 	bl	80232e6 <_ZdlPvj>
 801d212:	4620      	mov	r0, r4
 801d214:	bd10      	pop	{r4, pc}

0801d216 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d21a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801d21e:	9c06      	ldr	r4, [sp, #24]
 801d220:	2800      	cmp	r0, #0
 801d222:	d06e      	beq.n	801d302 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d224:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801d228:	2d00      	cmp	r5, #0
 801d22a:	dd6a      	ble.n	801d302 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d22c:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801d230:	f1bc 0f00 	cmp.w	ip, #0
 801d234:	dd65      	ble.n	801d302 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d236:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801d23a:	28ff      	cmp	r0, #255	; 0xff
 801d23c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d240:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801d244:	fb02 3306 	mla	r3, r2, r6, r3
 801d248:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801d24c:	b2e4      	uxtb	r4, r4
 801d24e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d252:	4419      	add	r1, r3
 801d254:	fb02 f30c 	mul.w	r3, r2, ip
 801d258:	eba2 0205 	sub.w	r2, r2, r5
 801d25c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d260:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d264:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d268:	440b      	add	r3, r1
 801d26a:	d03e      	beq.n	801d2ea <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801d26c:	fa1f fc80 	uxth.w	ip, r0
 801d270:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801d274:	fb06 f60c 	mul.w	r6, r6, ip
 801d278:	b280      	uxth	r0, r0
 801d27a:	fb07 f70c 	mul.w	r7, r7, ip
 801d27e:	fb04 f40c 	mul.w	r4, r4, ip
 801d282:	4299      	cmp	r1, r3
 801d284:	d23d      	bcs.n	801d302 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d286:	eb01 0c05 	add.w	ip, r1, r5
 801d28a:	458c      	cmp	ip, r1
 801d28c:	f101 0e03 	add.w	lr, r1, #3
 801d290:	d928      	bls.n	801d2e4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801d292:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d296:	fb11 f100 	smulbb	r1, r1, r0
 801d29a:	4421      	add	r1, r4
 801d29c:	b289      	uxth	r1, r1
 801d29e:	f101 0801 	add.w	r8, r1, #1
 801d2a2:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d2a6:	1209      	asrs	r1, r1, #8
 801d2a8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d2ac:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801d2b0:	fb11 f100 	smulbb	r1, r1, r0
 801d2b4:	4439      	add	r1, r7
 801d2b6:	b289      	uxth	r1, r1
 801d2b8:	f101 0801 	add.w	r8, r1, #1
 801d2bc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d2c0:	1209      	asrs	r1, r1, #8
 801d2c2:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d2c6:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d2ca:	fb11 f100 	smulbb	r1, r1, r0
 801d2ce:	4431      	add	r1, r6
 801d2d0:	b289      	uxth	r1, r1
 801d2d2:	f101 0801 	add.w	r8, r1, #1
 801d2d6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d2da:	1209      	asrs	r1, r1, #8
 801d2dc:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801d2e0:	4671      	mov	r1, lr
 801d2e2:	e7d2      	b.n	801d28a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801d2e4:	4411      	add	r1, r2
 801d2e6:	e7cc      	b.n	801d282 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801d2e8:	4411      	add	r1, r2
 801d2ea:	4299      	cmp	r1, r3
 801d2ec:	d209      	bcs.n	801d302 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d2ee:	1948      	adds	r0, r1, r5
 801d2f0:	4281      	cmp	r1, r0
 801d2f2:	d2f9      	bcs.n	801d2e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801d2f4:	700c      	strb	r4, [r1, #0]
 801d2f6:	3103      	adds	r1, #3
 801d2f8:	f801 7c02 	strb.w	r7, [r1, #-2]
 801d2fc:	f801 6c01 	strb.w	r6, [r1, #-1]
 801d300:	e7f6      	b.n	801d2f0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801d302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801d308 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d30c:	b093      	sub	sp, #76	; 0x4c
 801d30e:	4699      	mov	r9, r3
 801d310:	4617      	mov	r7, r2
 801d312:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d316:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801d31a:	4604      	mov	r4, r0
 801d31c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d320:	a80c      	add	r0, sp, #48	; 0x30
 801d322:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801d326:	460d      	mov	r5, r1
 801d328:	4649      	mov	r1, r9
 801d32a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d32e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d332:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801d336:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801d33a:	f7f6 f83d 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 801d33e:	4639      	mov	r1, r7
 801d340:	a80c      	add	r0, sp, #48	; 0x30
 801d342:	f7f6 f839 	bl	80133b8 <_ZN8touchgfx4RectaNERKS0_>
 801d346:	4b78      	ldr	r3, [pc, #480]	; (801d528 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801d348:	8818      	ldrh	r0, [r3, #0]
 801d34a:	4b78      	ldr	r3, [pc, #480]	; (801d52c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801d34c:	b202      	sxth	r2, r0
 801d34e:	8819      	ldrh	r1, [r3, #0]
 801d350:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d354:	b20f      	sxth	r7, r1
 801d356:	2b00      	cmp	r3, #0
 801d358:	da07      	bge.n	801d36a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801d35a:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801d35e:	4463      	add	r3, ip
 801d360:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801d364:	2300      	movs	r3, #0
 801d366:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801d36a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d36e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801d372:	1ad2      	subs	r2, r2, r3
 801d374:	4594      	cmp	ip, r2
 801d376:	bfc4      	itt	gt
 801d378:	1ac2      	subgt	r2, r0, r3
 801d37a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801d37e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d382:	2a00      	cmp	r2, #0
 801d384:	da07      	bge.n	801d396 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801d386:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801d38a:	4462      	add	r2, ip
 801d38c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801d390:	2200      	movs	r2, #0
 801d392:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801d396:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d39a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801d39e:	1abf      	subs	r7, r7, r2
 801d3a0:	45bc      	cmp	ip, r7
 801d3a2:	f8df c190 	ldr.w	ip, [pc, #400]	; 801d534 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801d3a6:	bfc8      	it	gt
 801d3a8:	1a8f      	subgt	r7, r1, r2
 801d3aa:	f89c c000 	ldrb.w	ip, [ip]
 801d3ae:	bfc8      	it	gt
 801d3b0:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801d3b4:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d3b8:	f1bc 0f00 	cmp.w	ip, #0
 801d3bc:	d176      	bne.n	801d4ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801d3be:	4287      	cmp	r7, r0
 801d3c0:	bf14      	ite	ne
 801d3c2:	2100      	movne	r1, #0
 801d3c4:	2101      	moveq	r1, #1
 801d3c6:	2f00      	cmp	r7, #0
 801d3c8:	9107      	str	r1, [sp, #28]
 801d3ca:	dd73      	ble.n	801d4b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801d3cc:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801d3d0:	2900      	cmp	r1, #0
 801d3d2:	9104      	str	r1, [sp, #16]
 801d3d4:	dd6e      	ble.n	801d4b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801d3d6:	f8b9 1000 	ldrh.w	r1, [r9]
 801d3da:	a80e      	add	r0, sp, #56	; 0x38
 801d3dc:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801d3e0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801d3e4:	1a5b      	subs	r3, r3, r1
 801d3e6:	a910      	add	r1, sp, #64	; 0x40
 801d3e8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801d3ec:	b21b      	sxth	r3, r3
 801d3ee:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801d3f2:	f8df a144 	ldr.w	sl, [pc, #324]	; 801d538 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801d3f6:	9305      	str	r3, [sp, #20]
 801d3f8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801d3fc:	1ad2      	subs	r2, r2, r3
 801d3fe:	b213      	sxth	r3, r2
 801d400:	9306      	str	r3, [sp, #24]
 801d402:	9b05      	ldr	r3, [sp, #20]
 801d404:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801d408:	9b06      	ldr	r3, [sp, #24]
 801d40a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d40e:	9b04      	ldr	r3, [sp, #16]
 801d410:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801d414:	2300      	movs	r3, #0
 801d416:	9310      	str	r3, [sp, #64]	; 0x40
 801d418:	f7fa fc70 	bl	8017cfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d41c:	4640      	mov	r0, r8
 801d41e:	f7fa fc45 	bl	8017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d422:	a810      	add	r0, sp, #64	; 0x40
 801d424:	f7fa fc42 	bl	8017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d428:	4b41      	ldr	r3, [pc, #260]	; (801d530 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801d42a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801d42e:	4628      	mov	r0, r5
 801d430:	881b      	ldrh	r3, [r3, #0]
 801d432:	9308      	str	r3, [sp, #32]
 801d434:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d438:	b21b      	sxth	r3, r3
 801d43a:	9303      	str	r3, [sp, #12]
 801d43c:	682b      	ldr	r3, [r5, #0]
 801d43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d440:	4798      	blx	r3
 801d442:	9a03      	ldr	r2, [sp, #12]
 801d444:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801d448:	4681      	mov	r9, r0
 801d44a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801d44e:	fb13 f302 	smulbb	r3, r3, r2
 801d452:	2203      	movs	r2, #3
 801d454:	f8da 0000 	ldr.w	r0, [sl]
 801d458:	fb15 3302 	smlabb	r3, r5, r2, r3
 801d45c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801d45e:	920b      	str	r2, [sp, #44]	; 0x2c
 801d460:	441d      	add	r5, r3
 801d462:	6803      	ldr	r3, [r0, #0]
 801d464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d466:	4798      	blx	r3
 801d468:	9009      	str	r0, [sp, #36]	; 0x24
 801d46a:	f8da 0000 	ldr.w	r0, [sl]
 801d46e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d472:	6803      	ldr	r3, [r0, #0]
 801d474:	910a      	str	r1, [sp, #40]	; 0x28
 801d476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d478:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801d47c:	4798      	blx	r3
 801d47e:	f010 0f01 	tst.w	r0, #1
 801d482:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801d486:	d01e      	beq.n	801d4c6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801d488:	f8da 0000 	ldr.w	r0, [sl]
 801d48c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d490:	6803      	ldr	r3, [r0, #0]
 801d492:	9200      	str	r2, [sp, #0]
 801d494:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801d496:	462b      	mov	r3, r5
 801d498:	e898 0006 	ldmia.w	r8, {r1, r2}
 801d49c:	47b0      	blx	r6
 801d49e:	9b05      	ldr	r3, [sp, #20]
 801d4a0:	80a7      	strh	r7, [r4, #4]
 801d4a2:	8023      	strh	r3, [r4, #0]
 801d4a4:	9b06      	ldr	r3, [sp, #24]
 801d4a6:	8063      	strh	r3, [r4, #2]
 801d4a8:	9b04      	ldr	r3, [sp, #16]
 801d4aa:	e007      	b.n	801d4bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801d4ac:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801d4b0:	4288      	cmp	r0, r1
 801d4b2:	e785      	b.n	801d3c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801d4b4:	2300      	movs	r3, #0
 801d4b6:	8023      	strh	r3, [r4, #0]
 801d4b8:	8063      	strh	r3, [r4, #2]
 801d4ba:	80a3      	strh	r3, [r4, #4]
 801d4bc:	4620      	mov	r0, r4
 801d4be:	80e3      	strh	r3, [r4, #6]
 801d4c0:	b013      	add	sp, #76	; 0x4c
 801d4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4c6:	fb09 f606 	mul.w	r6, r9, r6
 801d4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4cc:	fb11 6602 	smlabb	r6, r1, r2, r6
 801d4d0:	9a07      	ldr	r2, [sp, #28]
 801d4d2:	4433      	add	r3, r6
 801d4d4:	461e      	mov	r6, r3
 801d4d6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801d4da:	b16a      	cbz	r2, 801d4f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801d4dc:	9a08      	ldr	r2, [sp, #32]
 801d4de:	4593      	cmp	fp, r2
 801d4e0:	d10a      	bne.n	801d4f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801d4e2:	f8da 0000 	ldr.w	r0, [sl]
 801d4e6:	fb09 f303 	mul.w	r3, r9, r3
 801d4ea:	4629      	mov	r1, r5
 801d4ec:	6802      	ldr	r2, [r0, #0]
 801d4ee:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801d4f2:	4632      	mov	r2, r6
 801d4f4:	47d0      	blx	sl
 801d4f6:	e7d2      	b.n	801d49e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801d4f8:	9a03      	ldr	r2, [sp, #12]
 801d4fa:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801d538 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801d4fe:	fb02 5803 	mla	r8, r2, r3, r5
 801d502:	4545      	cmp	r5, r8
 801d504:	d2cb      	bcs.n	801d49e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801d506:	f8db 0000 	ldr.w	r0, [fp]
 801d50a:	4629      	mov	r1, r5
 801d50c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801d510:	6802      	ldr	r2, [r0, #0]
 801d512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d516:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801d51a:	4632      	mov	r2, r6
 801d51c:	47d0      	blx	sl
 801d51e:	9b03      	ldr	r3, [sp, #12]
 801d520:	444e      	add	r6, r9
 801d522:	441d      	add	r5, r3
 801d524:	e7ed      	b.n	801d502 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801d526:	bf00      	nop
 801d528:	2400ff08 	.word	0x2400ff08
 801d52c:	2400ff0a 	.word	0x2400ff0a
 801d530:	2400ff0e 	.word	0x2400ff0e
 801d534:	2400ff0c 	.word	0x2400ff0c
 801d538:	2400ff14 	.word	0x2400ff14

0801d53c <_ZN8touchgfx8LCD24bppC1Ev>:
 801d53c:	2200      	movs	r2, #0
 801d53e:	490c      	ldr	r1, [pc, #48]	; (801d570 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801d540:	6042      	str	r2, [r0, #4]
 801d542:	6001      	str	r1, [r0, #0]
 801d544:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d548:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d54c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d550:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d554:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d558:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d55c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d560:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d564:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d568:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d56c:	4770      	bx	lr
 801d56e:	bf00      	nop
 801d570:	080273b8 	.word	0x080273b8

0801d574 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d578:	b091      	sub	sp, #68	; 0x44
 801d57a:	4607      	mov	r7, r0
 801d57c:	4688      	mov	r8, r1
 801d57e:	6810      	ldr	r0, [r2, #0]
 801d580:	6851      	ldr	r1, [r2, #4]
 801d582:	ac0c      	add	r4, sp, #48	; 0x30
 801d584:	4616      	mov	r6, r2
 801d586:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801d58a:	4d64      	ldr	r5, [pc, #400]	; (801d71c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d58c:	f8df a190 	ldr.w	sl, [pc, #400]	; 801d720 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d590:	c403      	stmia	r4!, {r0, r1}
 801d592:	6818      	ldr	r0, [r3, #0]
 801d594:	ac0e      	add	r4, sp, #56	; 0x38
 801d596:	6859      	ldr	r1, [r3, #4]
 801d598:	c403      	stmia	r4!, {r0, r1}
 801d59a:	a80c      	add	r0, sp, #48	; 0x30
 801d59c:	f7fa fb86 	bl	8017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d5a0:	4631      	mov	r1, r6
 801d5a2:	a80e      	add	r0, sp, #56	; 0x38
 801d5a4:	f7fa fbaa 	bl	8017cfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d5a8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d5ac:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d5b0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d5b4:	6828      	ldr	r0, [r5, #0]
 801d5b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d5ba:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801d5be:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801d5c2:	440f      	add	r7, r1
 801d5c4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d5c8:	440a      	add	r2, r1
 801d5ca:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d5ce:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d5d2:	4413      	add	r3, r2
 801d5d4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d5d8:	6803      	ldr	r3, [r0, #0]
 801d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5dc:	4798      	blx	r3
 801d5de:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d5e2:	6828      	ldr	r0, [r5, #0]
 801d5e4:	d01f      	beq.n	801d626 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801d5e6:	2201      	movs	r2, #1
 801d5e8:	2500      	movs	r5, #0
 801d5ea:	6801      	ldr	r1, [r0, #0]
 801d5ec:	b2a4      	uxth	r4, r4
 801d5ee:	b2b6      	uxth	r6, r6
 801d5f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d5f4:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801d5f8:	250b      	movs	r5, #11
 801d5fa:	9507      	str	r5, [sp, #28]
 801d5fc:	f8ba 5000 	ldrh.w	r5, [sl]
 801d600:	f8cd 9010 	str.w	r9, [sp, #16]
 801d604:	9602      	str	r6, [sp, #8]
 801d606:	9401      	str	r4, [sp, #4]
 801d608:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801d60c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d610:	9203      	str	r2, [sp, #12]
 801d612:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d616:	9200      	str	r2, [sp, #0]
 801d618:	4642      	mov	r2, r8
 801d61a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d61c:	4639      	mov	r1, r7
 801d61e:	47a0      	blx	r4
 801d620:	b011      	add	sp, #68	; 0x44
 801d622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d626:	6803      	ldr	r3, [r0, #0]
 801d628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d62a:	4798      	blx	r3
 801d62c:	f8ba 5000 	ldrh.w	r5, [sl]
 801d630:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d634:	f04f 0e04 	mov.w	lr, #4
 801d638:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d63c:	436e      	muls	r6, r5
 801d63e:	fb05 2303 	mla	r3, r5, r3, r2
 801d642:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d646:	1b2d      	subs	r5, r5, r4
 801d648:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d64c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d650:	4418      	add	r0, r3
 801d652:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d656:	1982      	adds	r2, r0, r6
 801d658:	1b1b      	subs	r3, r3, r4
 801d65a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d65e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d660:	4290      	cmp	r0, r2
 801d662:	d254      	bcs.n	801d70e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801d664:	eb00 0a04 	add.w	sl, r0, r4
 801d668:	4550      	cmp	r0, sl
 801d66a:	d24c      	bcs.n	801d706 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801d66c:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d670:	fb1e e101 	smlabb	r1, lr, r1, lr
 801d674:	eb08 0c01 	add.w	ip, r8, r1
 801d678:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801d67c:	b173      	cbz	r3, 801d69c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d67e:	2bff      	cmp	r3, #255	; 0xff
 801d680:	f818 b001 	ldrb.w	fp, [r8, r1]
 801d684:	d10c      	bne.n	801d6a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d686:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d68a:	d109      	bne.n	801d6a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d68c:	f880 b000 	strb.w	fp, [r0]
 801d690:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801d694:	7043      	strb	r3, [r0, #1]
 801d696:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801d69a:	7083      	strb	r3, [r0, #2]
 801d69c:	3003      	adds	r0, #3
 801d69e:	e7e3      	b.n	801d668 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d6a0:	fb09 f103 	mul.w	r1, r9, r3
 801d6a4:	1c4b      	adds	r3, r1, #1
 801d6a6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d6aa:	7801      	ldrb	r1, [r0, #0]
 801d6ac:	121b      	asrs	r3, r3, #8
 801d6ae:	b29e      	uxth	r6, r3
 801d6b0:	43db      	mvns	r3, r3
 801d6b2:	fb1b fb06 	smulbb	fp, fp, r6
 801d6b6:	b2db      	uxtb	r3, r3
 801d6b8:	fb01 b103 	mla	r1, r1, r3, fp
 801d6bc:	b289      	uxth	r1, r1
 801d6be:	f101 0b01 	add.w	fp, r1, #1
 801d6c2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d6c6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d6ca:	fb1b fb03 	smulbb	fp, fp, r3
 801d6ce:	1209      	asrs	r1, r1, #8
 801d6d0:	7001      	strb	r1, [r0, #0]
 801d6d2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d6d6:	fb01 b106 	mla	r1, r1, r6, fp
 801d6da:	b289      	uxth	r1, r1
 801d6dc:	f101 0b01 	add.w	fp, r1, #1
 801d6e0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d6e4:	1209      	asrs	r1, r1, #8
 801d6e6:	7041      	strb	r1, [r0, #1]
 801d6e8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801d6ec:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d6f0:	fb1c f303 	smulbb	r3, ip, r3
 801d6f4:	fb01 3606 	mla	r6, r1, r6, r3
 801d6f8:	b2b6      	uxth	r6, r6
 801d6fa:	1c73      	adds	r3, r6, #1
 801d6fc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d700:	1236      	asrs	r6, r6, #8
 801d702:	7086      	strb	r6, [r0, #2]
 801d704:	e7ca      	b.n	801d69c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d708:	4428      	add	r0, r5
 801d70a:	441f      	add	r7, r3
 801d70c:	e7a8      	b.n	801d660 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801d70e:	4b03      	ldr	r3, [pc, #12]	; (801d71c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d710:	6818      	ldr	r0, [r3, #0]
 801d712:	6803      	ldr	r3, [r0, #0]
 801d714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d716:	4798      	blx	r3
 801d718:	e782      	b.n	801d620 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d71a:	bf00      	nop
 801d71c:	2400ff14 	.word	0x2400ff14
 801d720:	2400ff0e 	.word	0x2400ff0e

0801d724 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d728:	b091      	sub	sp, #68	; 0x44
 801d72a:	4680      	mov	r8, r0
 801d72c:	460e      	mov	r6, r1
 801d72e:	6810      	ldr	r0, [r2, #0]
 801d730:	6851      	ldr	r1, [r2, #4]
 801d732:	ad0c      	add	r5, sp, #48	; 0x30
 801d734:	4614      	mov	r4, r2
 801d736:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d73a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801d8d4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801d73e:	f8df a198 	ldr.w	sl, [pc, #408]	; 801d8d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d742:	c503      	stmia	r5!, {r0, r1}
 801d744:	6818      	ldr	r0, [r3, #0]
 801d746:	ad0e      	add	r5, sp, #56	; 0x38
 801d748:	6859      	ldr	r1, [r3, #4]
 801d74a:	c503      	stmia	r5!, {r0, r1}
 801d74c:	a80c      	add	r0, sp, #48	; 0x30
 801d74e:	f7fa faad 	bl	8017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d752:	4621      	mov	r1, r4
 801d754:	a80e      	add	r0, sp, #56	; 0x38
 801d756:	f7fa fad1 	bl	8017cfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d75a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d75e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d762:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d766:	f8d9 0000 	ldr.w	r0, [r9]
 801d76a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d76e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801d772:	eb08 0401 	add.w	r4, r8, r1
 801d776:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d77a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801d77e:	440a      	add	r2, r1
 801d780:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d784:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d788:	4413      	add	r3, r2
 801d78a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d78e:	6803      	ldr	r3, [r0, #0]
 801d790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d792:	4798      	blx	r3
 801d794:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d798:	f8d9 0000 	ldr.w	r0, [r9]
 801d79c:	d022      	beq.n	801d7e4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801d79e:	2200      	movs	r2, #0
 801d7a0:	f04f 0c01 	mov.w	ip, #1
 801d7a4:	6801      	ldr	r1, [r0, #0]
 801d7a6:	b2ad      	uxth	r5, r5
 801d7a8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d7ac:	e9cd c208 	strd	ip, r2, [sp, #32]
 801d7b0:	f04f 0c0b 	mov.w	ip, #11
 801d7b4:	f8cd c01c 	str.w	ip, [sp, #28]
 801d7b8:	f8ba c000 	ldrh.w	ip, [sl]
 801d7bc:	9704      	str	r7, [sp, #16]
 801d7be:	9502      	str	r5, [sp, #8]
 801d7c0:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801d7c4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d7c8:	9203      	str	r2, [sp, #12]
 801d7ca:	fa1f f288 	uxth.w	r2, r8
 801d7ce:	9201      	str	r2, [sp, #4]
 801d7d0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d7d4:	9200      	str	r2, [sp, #0]
 801d7d6:	4632      	mov	r2, r6
 801d7d8:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d7da:	4621      	mov	r1, r4
 801d7dc:	47a8      	blx	r5
 801d7de:	b011      	add	sp, #68	; 0x44
 801d7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7e4:	6803      	ldr	r3, [r0, #0]
 801d7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d7e8:	4798      	blx	r3
 801d7ea:	f8ba 2000 	ldrh.w	r2, [sl]
 801d7ee:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d7f2:	f04f 0e03 	mov.w	lr, #3
 801d7f6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d7fa:	4355      	muls	r5, r2
 801d7fc:	fa1f fc87 	uxth.w	ip, r7
 801d800:	fb02 1303 	mla	r3, r2, r3, r1
 801d804:	eba2 0208 	sub.w	r2, r2, r8
 801d808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d80c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d810:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d814:	4418      	add	r0, r3
 801d816:	920b      	str	r2, [sp, #44]	; 0x2c
 801d818:	1943      	adds	r3, r0, r5
 801d81a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d81e:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801d822:	eba2 0208 	sub.w	r2, r2, r8
 801d826:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d82a:	b2ad      	uxth	r5, r5
 801d82c:	4298      	cmp	r0, r3
 801d82e:	d24a      	bcs.n	801d8c6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801d830:	eb00 0908 	add.w	r9, r0, r8
 801d834:	4621      	mov	r1, r4
 801d836:	4548      	cmp	r0, r9
 801d838:	460c      	mov	r4, r1
 801d83a:	d240      	bcs.n	801d8be <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801d83c:	f04f 0a04 	mov.w	sl, #4
 801d840:	7824      	ldrb	r4, [r4, #0]
 801d842:	2fff      	cmp	r7, #255	; 0xff
 801d844:	f101 0101 	add.w	r1, r1, #1
 801d848:	fb1e a404 	smlabb	r4, lr, r4, sl
 801d84c:	eb06 0a04 	add.w	sl, r6, r4
 801d850:	f816 b004 	ldrb.w	fp, [r6, r4]
 801d854:	d02b      	beq.n	801d8ae <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801d856:	7804      	ldrb	r4, [r0, #0]
 801d858:	fb14 f405 	smulbb	r4, r4, r5
 801d85c:	fb0b 440c 	mla	r4, fp, ip, r4
 801d860:	b2a4      	uxth	r4, r4
 801d862:	f104 0b01 	add.w	fp, r4, #1
 801d866:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d86a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d86e:	fb1b fb05 	smulbb	fp, fp, r5
 801d872:	1224      	asrs	r4, r4, #8
 801d874:	7004      	strb	r4, [r0, #0]
 801d876:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801d87a:	fb04 b40c 	mla	r4, r4, ip, fp
 801d87e:	b2a4      	uxth	r4, r4
 801d880:	f104 0b01 	add.w	fp, r4, #1
 801d884:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d888:	1224      	asrs	r4, r4, #8
 801d88a:	7044      	strb	r4, [r0, #1]
 801d88c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801d890:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d894:	fb1a fa05 	smulbb	sl, sl, r5
 801d898:	fb04 a40c 	mla	r4, r4, ip, sl
 801d89c:	b2a4      	uxth	r4, r4
 801d89e:	f104 0a01 	add.w	sl, r4, #1
 801d8a2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d8a6:	1224      	asrs	r4, r4, #8
 801d8a8:	7084      	strb	r4, [r0, #2]
 801d8aa:	3003      	adds	r0, #3
 801d8ac:	e7c3      	b.n	801d836 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801d8ae:	f880 b000 	strb.w	fp, [r0]
 801d8b2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801d8b6:	7044      	strb	r4, [r0, #1]
 801d8b8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801d8bc:	e7f4      	b.n	801d8a8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801d8be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d8c0:	4420      	add	r0, r4
 801d8c2:	188c      	adds	r4, r1, r2
 801d8c4:	e7b2      	b.n	801d82c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801d8c6:	4b03      	ldr	r3, [pc, #12]	; (801d8d4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801d8c8:	6818      	ldr	r0, [r3, #0]
 801d8ca:	6803      	ldr	r3, [r0, #0]
 801d8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d8ce:	4798      	blx	r3
 801d8d0:	e785      	b.n	801d7de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801d8d2:	bf00      	nop
 801d8d4:	2400ff14 	.word	0x2400ff14
 801d8d8:	2400ff0e 	.word	0x2400ff0e

0801d8dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d8dc:	b430      	push	{r4, r5}
 801d8de:	780d      	ldrb	r5, [r1, #0]
 801d8e0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d8e4:	b11d      	cbz	r5, 801d8ee <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801d8e6:	2d01      	cmp	r5, #1
 801d8e8:	d005      	beq.n	801d8f6 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d8ea:	bc30      	pop	{r4, r5}
 801d8ec:	4770      	bx	lr
 801d8ee:	9402      	str	r4, [sp, #8]
 801d8f0:	bc30      	pop	{r4, r5}
 801d8f2:	f7ff be3f 	b.w	801d574 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d8f6:	9402      	str	r4, [sp, #8]
 801d8f8:	bc30      	pop	{r4, r5}
 801d8fa:	f7ff bf13 	b.w	801d724 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801d900 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801d900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d904:	4605      	mov	r5, r0
 801d906:	b08f      	sub	sp, #60	; 0x3c
 801d908:	460c      	mov	r4, r1
 801d90a:	461f      	mov	r7, r3
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d052      	beq.n	801d9b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801d910:	6808      	ldr	r0, [r1, #0]
 801d912:	ab0a      	add	r3, sp, #40	; 0x28
 801d914:	6849      	ldr	r1, [r1, #4]
 801d916:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801dae0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801d91a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801dae4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801d91e:	c303      	stmia	r3!, {r0, r1}
 801d920:	6810      	ldr	r0, [r2, #0]
 801d922:	ab0c      	add	r3, sp, #48	; 0x30
 801d924:	6851      	ldr	r1, [r2, #4]
 801d926:	c303      	stmia	r3!, {r0, r1}
 801d928:	a80a      	add	r0, sp, #40	; 0x28
 801d92a:	f7fa f9bf 	bl	8017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d92e:	4621      	mov	r1, r4
 801d930:	a80c      	add	r0, sp, #48	; 0x30
 801d932:	f7fa f9e3 	bl	8017cfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d936:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d93a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d93e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d942:	f8d8 0000 	ldr.w	r0, [r8]
 801d946:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d94a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801d94e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801d952:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801d956:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d95a:	440a      	add	r2, r1
 801d95c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d960:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d964:	4413      	add	r3, r2
 801d966:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d96a:	6803      	ldr	r3, [r0, #0]
 801d96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d96e:	4798      	blx	r3
 801d970:	2fff      	cmp	r7, #255	; 0xff
 801d972:	d023      	beq.n	801d9bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801d974:	f010 0f04 	tst.w	r0, #4
 801d978:	f8d8 0000 	ldr.w	r0, [r8]
 801d97c:	d021      	beq.n	801d9c2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801d97e:	2100      	movs	r1, #0
 801d980:	f04f 0e01 	mov.w	lr, #1
 801d984:	f8d0 c000 	ldr.w	ip, [r0]
 801d988:	b2a4      	uxth	r4, r4
 801d98a:	9106      	str	r1, [sp, #24]
 801d98c:	b2b6      	uxth	r6, r6
 801d98e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d992:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d996:	e9cd e107 	strd	lr, r1, [sp, #28]
 801d99a:	f8b9 e000 	ldrh.w	lr, [r9]
 801d99e:	9703      	str	r7, [sp, #12]
 801d9a0:	9401      	str	r4, [sp, #4]
 801d9a2:	9600      	str	r6, [sp, #0]
 801d9a4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d9a8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d9ac:	9102      	str	r1, [sp, #8]
 801d9ae:	4629      	mov	r1, r5
 801d9b0:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801d9b4:	47a0      	blx	r4
 801d9b6:	b00f      	add	sp, #60	; 0x3c
 801d9b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d9bc:	f010 0f01 	tst.w	r0, #1
 801d9c0:	e7da      	b.n	801d978 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801d9c2:	6803      	ldr	r3, [r0, #0]
 801d9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9c6:	4798      	blx	r3
 801d9c8:	f8b9 1000 	ldrh.w	r1, [r9]
 801d9cc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d9d0:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801d9d4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d9d8:	434c      	muls	r4, r1
 801d9da:	2fff      	cmp	r7, #255	; 0xff
 801d9dc:	fb01 2303 	mla	r3, r1, r3, r2
 801d9e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d9e4:	eba1 0106 	sub.w	r1, r1, r6
 801d9e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d9f0:	4418      	add	r0, r3
 801d9f2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801d9f6:	eba3 0606 	sub.w	r6, r3, r6
 801d9fa:	4404      	add	r4, r0
 801d9fc:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801da00:	d04a      	beq.n	801da98 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801da02:	43fa      	mvns	r2, r7
 801da04:	b2bb      	uxth	r3, r7
 801da06:	b2d7      	uxtb	r7, r2
 801da08:	42a0      	cmp	r0, r4
 801da0a:	d263      	bcs.n	801dad4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801da0c:	eb00 0e0c 	add.w	lr, r0, ip
 801da10:	4586      	cmp	lr, r0
 801da12:	f100 0803 	add.w	r8, r0, #3
 801da16:	d93a      	bls.n	801da8e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801da18:	f835 2b02 	ldrh.w	r2, [r5], #2
 801da1c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801da20:	00d0      	lsls	r0, r2, #3
 801da22:	fb19 f907 	smulbb	r9, r9, r7
 801da26:	b2c0      	uxtb	r0, r0
 801da28:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801da2c:	fb00 9003 	mla	r0, r0, r3, r9
 801da30:	b280      	uxth	r0, r0
 801da32:	f100 0901 	add.w	r9, r0, #1
 801da36:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801da3a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801da3e:	fb19 f907 	smulbb	r9, r9, r7
 801da42:	1200      	asrs	r0, r0, #8
 801da44:	f808 0c03 	strb.w	r0, [r8, #-3]
 801da48:	10d0      	asrs	r0, r2, #3
 801da4a:	1212      	asrs	r2, r2, #8
 801da4c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801da50:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801da54:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801da58:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801da5c:	fb00 9003 	mla	r0, r0, r3, r9
 801da60:	b280      	uxth	r0, r0
 801da62:	f100 0901 	add.w	r9, r0, #1
 801da66:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801da6a:	1200      	asrs	r0, r0, #8
 801da6c:	f808 0c02 	strb.w	r0, [r8, #-2]
 801da70:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801da74:	fb10 f007 	smulbb	r0, r0, r7
 801da78:	fb02 0203 	mla	r2, r2, r3, r0
 801da7c:	b292      	uxth	r2, r2
 801da7e:	1c50      	adds	r0, r2, #1
 801da80:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801da84:	4640      	mov	r0, r8
 801da86:	1212      	asrs	r2, r2, #8
 801da88:	f808 2c01 	strb.w	r2, [r8, #-1]
 801da8c:	e7c0      	b.n	801da10 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801da8e:	4408      	add	r0, r1
 801da90:	4435      	add	r5, r6
 801da92:	e7b9      	b.n	801da08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801da94:	4408      	add	r0, r1
 801da96:	4435      	add	r5, r6
 801da98:	42a0      	cmp	r0, r4
 801da9a:	d21b      	bcs.n	801dad4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801da9c:	eb00 070c 	add.w	r7, r0, ip
 801daa0:	42b8      	cmp	r0, r7
 801daa2:	d2f7      	bcs.n	801da94 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801daa4:	f835 3b02 	ldrh.w	r3, [r5], #2
 801daa8:	3003      	adds	r0, #3
 801daaa:	00da      	lsls	r2, r3, #3
 801daac:	b2d2      	uxtb	r2, r2
 801daae:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801dab2:	f800 2c03 	strb.w	r2, [r0, #-3]
 801dab6:	10da      	asrs	r2, r3, #3
 801dab8:	121b      	asrs	r3, r3, #8
 801daba:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801dabe:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801dac2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801dac6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801daca:	f800 2c02 	strb.w	r2, [r0, #-2]
 801dace:	f800 3c01 	strb.w	r3, [r0, #-1]
 801dad2:	e7e5      	b.n	801daa0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801dad4:	4b02      	ldr	r3, [pc, #8]	; (801dae0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801dad6:	6818      	ldr	r0, [r3, #0]
 801dad8:	6803      	ldr	r3, [r0, #0]
 801dada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dadc:	4798      	blx	r3
 801dade:	e76a      	b.n	801d9b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801dae0:	2400ff14 	.word	0x2400ff14
 801dae4:	2400ff0e 	.word	0x2400ff0e

0801dae8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801dae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801daec:	b08a      	sub	sp, #40	; 0x28
 801daee:	460d      	mov	r5, r1
 801daf0:	4604      	mov	r4, r0
 801daf2:	461e      	mov	r6, r3
 801daf4:	6808      	ldr	r0, [r1, #0]
 801daf6:	ab06      	add	r3, sp, #24
 801daf8:	6849      	ldr	r1, [r1, #4]
 801dafa:	4f5d      	ldr	r7, [pc, #372]	; (801dc70 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801dafc:	c303      	stmia	r3!, {r0, r1}
 801dafe:	6810      	ldr	r0, [r2, #0]
 801db00:	ab08      	add	r3, sp, #32
 801db02:	6851      	ldr	r1, [r2, #4]
 801db04:	c303      	stmia	r3!, {r0, r1}
 801db06:	a806      	add	r0, sp, #24
 801db08:	f7fa f8d0 	bl	8017cac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801db0c:	4629      	mov	r1, r5
 801db0e:	a808      	add	r0, sp, #32
 801db10:	f7fa f8f4 	bl	8017cfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801db14:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801db18:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801db1c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801db20:	6838      	ldr	r0, [r7, #0]
 801db22:	fb11 2103 	smlabb	r1, r1, r3, r2
 801db26:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801db2a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801db2e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801db32:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801db36:	440a      	add	r2, r1
 801db38:	f8ad 2020 	strh.w	r2, [sp, #32]
 801db3c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801db40:	4413      	add	r3, r2
 801db42:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801db46:	6803      	ldr	r3, [r0, #0]
 801db48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db4a:	4798      	blx	r3
 801db4c:	2eff      	cmp	r6, #255	; 0xff
 801db4e:	d119      	bne.n	801db84 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801db50:	f010 0f20 	tst.w	r0, #32
 801db54:	6838      	ldr	r0, [r7, #0]
 801db56:	d018      	beq.n	801db8a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801db58:	b2ad      	uxth	r5, r5
 801db5a:	2700      	movs	r7, #0
 801db5c:	6801      	ldr	r1, [r0, #0]
 801db5e:	9501      	str	r5, [sp, #4]
 801db60:	fa1f f588 	uxth.w	r5, r8
 801db64:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801db68:	9500      	str	r5, [sp, #0]
 801db6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801db6e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801db72:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801db76:	9602      	str	r6, [sp, #8]
 801db78:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801db7a:	4621      	mov	r1, r4
 801db7c:	47a8      	blx	r5
 801db7e:	b00a      	add	sp, #40	; 0x28
 801db80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db84:	f010 0f40 	tst.w	r0, #64	; 0x40
 801db88:	e7e4      	b.n	801db54 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801db8a:	6803      	ldr	r3, [r0, #0]
 801db8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db8e:	4798      	blx	r3
 801db90:	4b38      	ldr	r3, [pc, #224]	; (801dc74 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801db92:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801db96:	f8b3 c000 	ldrh.w	ip, [r3]
 801db9a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801db9e:	fb0c f505 	mul.w	r5, ip, r5
 801dba2:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801dba6:	fb0c 2303 	mla	r3, ip, r3, r2
 801dbaa:	ebac 0c08 	sub.w	ip, ip, r8
 801dbae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dbb2:	ebae 0e08 	sub.w	lr, lr, r8
 801dbb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dbbe:	4418      	add	r0, r3
 801dbc0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801dbc4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801dbc8:	4405      	add	r5, r0
 801dbca:	42a8      	cmp	r0, r5
 801dbcc:	d24a      	bcs.n	801dc64 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801dbce:	eb00 0803 	add.w	r8, r0, r3
 801dbd2:	4540      	cmp	r0, r8
 801dbd4:	d243      	bcs.n	801dc5e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801dbd6:	78e2      	ldrb	r2, [r4, #3]
 801dbd8:	b15a      	cbz	r2, 801dbf2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801dbda:	2aff      	cmp	r2, #255	; 0xff
 801dbdc:	f894 9000 	ldrb.w	r9, [r4]
 801dbe0:	d10a      	bne.n	801dbf8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801dbe2:	2eff      	cmp	r6, #255	; 0xff
 801dbe4:	d108      	bne.n	801dbf8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801dbe6:	f880 9000 	strb.w	r9, [r0]
 801dbea:	7862      	ldrb	r2, [r4, #1]
 801dbec:	7042      	strb	r2, [r0, #1]
 801dbee:	78a2      	ldrb	r2, [r4, #2]
 801dbf0:	7082      	strb	r2, [r0, #2]
 801dbf2:	3003      	adds	r0, #3
 801dbf4:	3404      	adds	r4, #4
 801dbf6:	e7ec      	b.n	801dbd2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801dbf8:	4372      	muls	r2, r6
 801dbfa:	1c51      	adds	r1, r2, #1
 801dbfc:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801dc00:	1209      	asrs	r1, r1, #8
 801dc02:	fa1f fa81 	uxth.w	sl, r1
 801dc06:	43c9      	mvns	r1, r1
 801dc08:	fb19 f90a 	smulbb	r9, r9, sl
 801dc0c:	b2ca      	uxtb	r2, r1
 801dc0e:	7801      	ldrb	r1, [r0, #0]
 801dc10:	fb01 9902 	mla	r9, r1, r2, r9
 801dc14:	fa1f f989 	uxth.w	r9, r9
 801dc18:	f109 0101 	add.w	r1, r9, #1
 801dc1c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801dc20:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dc24:	f880 9000 	strb.w	r9, [r0]
 801dc28:	f890 9001 	ldrb.w	r9, [r0, #1]
 801dc2c:	7861      	ldrb	r1, [r4, #1]
 801dc2e:	fb19 f902 	smulbb	r9, r9, r2
 801dc32:	fb01 910a 	mla	r1, r1, sl, r9
 801dc36:	b289      	uxth	r1, r1
 801dc38:	f101 0901 	add.w	r9, r1, #1
 801dc3c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801dc40:	1209      	asrs	r1, r1, #8
 801dc42:	7041      	strb	r1, [r0, #1]
 801dc44:	7881      	ldrb	r1, [r0, #2]
 801dc46:	f894 9002 	ldrb.w	r9, [r4, #2]
 801dc4a:	fb11 f202 	smulbb	r2, r1, r2
 801dc4e:	fb09 220a 	mla	r2, r9, sl, r2
 801dc52:	b292      	uxth	r2, r2
 801dc54:	1c51      	adds	r1, r2, #1
 801dc56:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801dc5a:	1212      	asrs	r2, r2, #8
 801dc5c:	e7c8      	b.n	801dbf0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801dc5e:	4460      	add	r0, ip
 801dc60:	4474      	add	r4, lr
 801dc62:	e7b2      	b.n	801dbca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801dc64:	6838      	ldr	r0, [r7, #0]
 801dc66:	6803      	ldr	r3, [r0, #0]
 801dc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc6a:	4798      	blx	r3
 801dc6c:	e787      	b.n	801db7e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801dc6e:	bf00      	nop
 801dc70:	2400ff14 	.word	0x2400ff14
 801dc74:	2400ff0e 	.word	0x2400ff0e

0801dc78 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dc7c:	b085      	sub	sp, #20
 801dc7e:	4606      	mov	r6, r0
 801dc80:	460c      	mov	r4, r1
 801dc82:	4691      	mov	r9, r2
 801dc84:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801dc88:	4698      	mov	r8, r3
 801dc8a:	b31d      	cbz	r5, 801dcd4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dc8c:	4608      	mov	r0, r1
 801dc8e:	f7fd fa4f 	bl	801b130 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dc92:	4607      	mov	r7, r0
 801dc94:	4620      	mov	r0, r4
 801dc96:	f7fd fa7f 	bl	801b198 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dc9a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801dc9e:	4620      	mov	r0, r4
 801dca0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801dca4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801dca8:	f8ad 700c 	strh.w	r7, [sp, #12]
 801dcac:	f7fd fb78 	bl	801b3a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dcb0:	280b      	cmp	r0, #11
 801dcb2:	d80f      	bhi.n	801dcd4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dcb4:	e8df f000 	tbb	[pc, r0]
 801dcb8:	0e062920 	.word	0x0e062920
 801dcbc:	0e0e0e0e 	.word	0x0e0e0e0e
 801dcc0:	110e0e0e 	.word	0x110e0e0e
 801dcc4:	4620      	mov	r0, r4
 801dcc6:	f7fd fae7 	bl	801b298 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dcca:	462b      	mov	r3, r5
 801dccc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dcce:	a902      	add	r1, sp, #8
 801dcd0:	f7ff ff0a 	bl	801dae8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dcd4:	b005      	add	sp, #20
 801dcd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dcda:	4620      	mov	r0, r4
 801dcdc:	f7fd fadc 	bl	801b298 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dce0:	4606      	mov	r6, r0
 801dce2:	4620      	mov	r0, r4
 801dce4:	f7fd fb08 	bl	801b2f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dce8:	9500      	str	r5, [sp, #0]
 801dcea:	4601      	mov	r1, r0
 801dcec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dcee:	aa02      	add	r2, sp, #8
 801dcf0:	4630      	mov	r0, r6
 801dcf2:	f7ff fdf3 	bl	801d8dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801dcf6:	e7ed      	b.n	801dcd4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dcf8:	4620      	mov	r0, r4
 801dcfa:	f7fd facd 	bl	801b298 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dcfe:	462b      	mov	r3, r5
 801dd00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dd02:	a902      	add	r1, sp, #8
 801dd04:	f7ff fdfc 	bl	801d900 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801dd08:	e7e4      	b.n	801dcd4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dd0a:	6833      	ldr	r3, [r6, #0]
 801dd0c:	4620      	mov	r0, r4
 801dd0e:	68df      	ldr	r7, [r3, #12]
 801dd10:	f7fd fac2 	bl	801b298 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dd14:	2300      	movs	r3, #0
 801dd16:	4601      	mov	r1, r0
 801dd18:	aa02      	add	r2, sp, #8
 801dd1a:	4630      	mov	r0, r6
 801dd1c:	e9cd 5300 	strd	r5, r3, [sp]
 801dd20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd22:	47b8      	blx	r7
 801dd24:	e7d6      	b.n	801dcd4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801dd26 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801dd26:	b4f0      	push	{r4, r5, r6, r7}
 801dd28:	4616      	mov	r6, r2
 801dd2a:	461c      	mov	r4, r3
 801dd2c:	460d      	mov	r5, r1
 801dd2e:	9a04      	ldr	r2, [sp, #16]
 801dd30:	2e01      	cmp	r6, #1
 801dd32:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dd36:	d00e      	beq.n	801dd56 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801dd38:	d303      	bcc.n	801dd42 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801dd3a:	2e02      	cmp	r6, #2
 801dd3c:	d006      	beq.n	801dd4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801dd3e:	bcf0      	pop	{r4, r5, r6, r7}
 801dd40:	4770      	bx	lr
 801dd42:	4621      	mov	r1, r4
 801dd44:	4628      	mov	r0, r5
 801dd46:	bcf0      	pop	{r4, r5, r6, r7}
 801dd48:	f7ff bdda 	b.w	801d900 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801dd4c:	4621      	mov	r1, r4
 801dd4e:	4628      	mov	r0, r5
 801dd50:	bcf0      	pop	{r4, r5, r6, r7}
 801dd52:	f7ff bec9 	b.w	801dae8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dd56:	6805      	ldr	r5, [r0, #0]
 801dd58:	2600      	movs	r6, #0
 801dd5a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801dd5e:	68ed      	ldr	r5, [r5, #12]
 801dd60:	4613      	mov	r3, r2
 801dd62:	4622      	mov	r2, r4
 801dd64:	46ac      	mov	ip, r5
 801dd66:	bcf0      	pop	{r4, r5, r6, r7}
 801dd68:	4760      	bx	ip
	...

0801dd6c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801dd6c:	b160      	cbz	r0, 801dd88 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801dd6e:	2903      	cmp	r1, #3
 801dd70:	d818      	bhi.n	801dda4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801dd72:	e8df f001 	tbb	[pc, r1]
 801dd76:	1902      	.short	0x1902
 801dd78:	1b06      	.short	0x1b06
 801dd7a:	4b0e      	ldr	r3, [pc, #56]	; (801ddb4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801dd7c:	8818      	ldrh	r0, [r3, #0]
 801dd7e:	4240      	negs	r0, r0
 801dd80:	4770      	bx	lr
 801dd82:	4b0c      	ldr	r3, [pc, #48]	; (801ddb4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801dd84:	8818      	ldrh	r0, [r3, #0]
 801dd86:	4770      	bx	lr
 801dd88:	2903      	cmp	r1, #3
 801dd8a:	d80b      	bhi.n	801dda4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801dd8c:	a301      	add	r3, pc, #4	; (adr r3, 801dd94 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801dd8e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801dd92:	bf00      	nop
 801dd94:	0801dda9 	.word	0x0801dda9
 801dd98:	0801dd83 	.word	0x0801dd83
 801dd9c:	0801ddad 	.word	0x0801ddad
 801dda0:	0801dd7b 	.word	0x0801dd7b
 801dda4:	2000      	movs	r0, #0
 801dda6:	4770      	bx	lr
 801dda8:	2001      	movs	r0, #1
 801ddaa:	4770      	bx	lr
 801ddac:	f04f 30ff 	mov.w	r0, #4294967295
 801ddb0:	4770      	bx	lr
 801ddb2:	bf00      	nop
 801ddb4:	2400ff0e 	.word	0x2400ff0e

0801ddb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801ddb8:	b160      	cbz	r0, 801ddd4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801ddba:	2903      	cmp	r1, #3
 801ddbc:	d818      	bhi.n	801ddf0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801ddbe:	e8df f001 	tbb	[pc, r1]
 801ddc2:	0219      	.short	0x0219
 801ddc4:	051b      	.short	0x051b
 801ddc6:	4b0e      	ldr	r3, [pc, #56]	; (801de00 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ddc8:	8818      	ldrh	r0, [r3, #0]
 801ddca:	4770      	bx	lr
 801ddcc:	4b0c      	ldr	r3, [pc, #48]	; (801de00 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ddce:	8818      	ldrh	r0, [r3, #0]
 801ddd0:	4240      	negs	r0, r0
 801ddd2:	4770      	bx	lr
 801ddd4:	2903      	cmp	r1, #3
 801ddd6:	d80b      	bhi.n	801ddf0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801ddd8:	a301      	add	r3, pc, #4	; (adr r3, 801dde0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801ddda:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ddde:	bf00      	nop
 801dde0:	0801ddc7 	.word	0x0801ddc7
 801dde4:	0801ddf9 	.word	0x0801ddf9
 801dde8:	0801ddcd 	.word	0x0801ddcd
 801ddec:	0801ddf5 	.word	0x0801ddf5
 801ddf0:	2000      	movs	r0, #0
 801ddf2:	4770      	bx	lr
 801ddf4:	2001      	movs	r0, #1
 801ddf6:	4770      	bx	lr
 801ddf8:	f04f 30ff 	mov.w	r0, #4294967295
 801ddfc:	4770      	bx	lr
 801ddfe:	bf00      	nop
 801de00:	2400ff0e 	.word	0x2400ff0e

0801de04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de08:	b097      	sub	sp, #92	; 0x5c
 801de0a:	910b      	str	r1, [sp, #44]	; 0x2c
 801de0c:	a912      	add	r1, sp, #72	; 0x48
 801de0e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801de12:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801de16:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801de1a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801de1e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801de22:	e881 000c 	stmia.w	r1, {r2, r3}
 801de26:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801de2a:	930a      	str	r3, [sp, #40]	; 0x28
 801de2c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801de30:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801de34:	9311      	str	r3, [sp, #68]	; 0x44
 801de36:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801de3a:	798d      	ldrb	r5, [r1, #6]
 801de3c:	930c      	str	r3, [sp, #48]	; 0x30
 801de3e:	7b4b      	ldrb	r3, [r1, #13]
 801de40:	0158      	lsls	r0, r3, #5
 801de42:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801de46:	4328      	orrs	r0, r5
 801de48:	9009      	str	r0, [sp, #36]	; 0x24
 801de4a:	f000 817c 	beq.w	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801de4e:	011b      	lsls	r3, r3, #4
 801de50:	79c8      	ldrb	r0, [r1, #7]
 801de52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801de56:	4303      	orrs	r3, r0
 801de58:	930e      	str	r3, [sp, #56]	; 0x38
 801de5a:	f000 8174 	beq.w	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801de5e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801de62:	b29b      	uxth	r3, r3
 801de64:	2f00      	cmp	r7, #0
 801de66:	f000 8116 	beq.w	801e096 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801de6a:	1aff      	subs	r7, r7, r3
 801de6c:	b2bf      	uxth	r7, r7
 801de6e:	043b      	lsls	r3, r7, #16
 801de70:	d502      	bpl.n	801de78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801de72:	1bf6      	subs	r6, r6, r7
 801de74:	2700      	movs	r7, #0
 801de76:	b236      	sxth	r6, r6
 801de78:	f9b2 1000 	ldrsh.w	r1, [r2]
 801de7c:	a812      	add	r0, sp, #72	; 0x48
 801de7e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801de82:	428e      	cmp	r6, r1
 801de84:	b28b      	uxth	r3, r1
 801de86:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801de8a:	bfbf      	itttt	lt
 801de8c:	18ff      	addlt	r7, r7, r3
 801de8e:	1bbe      	sublt	r6, r7, r6
 801de90:	b2b7      	uxthlt	r7, r6
 801de92:	460e      	movlt	r6, r1
 801de94:	8891      	ldrh	r1, [r2, #4]
 801de96:	440b      	add	r3, r1
 801de98:	4631      	mov	r1, r6
 801de9a:	b21b      	sxth	r3, r3
 801de9c:	9310      	str	r3, [sp, #64]	; 0x40
 801de9e:	88d3      	ldrh	r3, [r2, #6]
 801dea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dea2:	449a      	add	sl, r3
 801dea4:	fa0f f38a 	sxth.w	r3, sl
 801dea8:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801deac:	930f      	str	r3, [sp, #60]	; 0x3c
 801deae:	4bb5      	ldr	r3, [pc, #724]	; (801e184 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801deb0:	f893 b000 	ldrb.w	fp, [r3]
 801deb4:	f10b 3cff 	add.w	ip, fp, #4294967295
 801deb8:	f1dc 0300 	rsbs	r3, ip, #0
 801debc:	eb43 030c 	adc.w	r3, r3, ip
 801dec0:	930d      	str	r3, [sp, #52]	; 0x34
 801dec2:	464b      	mov	r3, r9
 801dec4:	f7f9 fd6d 	bl	80179a2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801dec8:	4631      	mov	r1, r6
 801deca:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801dece:	464b      	mov	r3, r9
 801ded0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ded2:	a812      	add	r0, sp, #72	; 0x48
 801ded4:	f7f9 fd82 	bl	80179dc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ded8:	a916      	add	r1, sp, #88	; 0x58
 801deda:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801dede:	a815      	add	r0, sp, #84	; 0x54
 801dee0:	f7f9 fea2 	bl	8017c28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801dee4:	f1b9 0f00 	cmp.w	r9, #0
 801dee8:	f040 80d8 	bne.w	801e09c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801deec:	f1bb 0f01 	cmp.w	fp, #1
 801def0:	f040 80dc 	bne.w	801e0ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801def4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801def6:	b153      	cbz	r3, 801df0e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801def8:	2508      	movs	r5, #8
 801defa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801defc:	fb95 f3f8 	sdiv	r3, r5, r8
 801df00:	1e5d      	subs	r5, r3, #1
 801df02:	4415      	add	r5, r2
 801df04:	fb95 f5f3 	sdiv	r5, r5, r3
 801df08:	fb15 f503 	smulbb	r5, r5, r3
 801df0c:	b2ad      	uxth	r5, r5
 801df0e:	b907      	cbnz	r7, 801df12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801df10:	b16c      	cbz	r4, 801df2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801df12:	fb04 7305 	mla	r3, r4, r5, r7
 801df16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801df18:	ebaa 0a04 	sub.w	sl, sl, r4
 801df1c:	fb08 f303 	mul.w	r3, r8, r3
 801df20:	fa1f fa8a 	uxth.w	sl, sl
 801df24:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801df28:	f003 0407 	and.w	r4, r3, #7
 801df2c:	9226      	str	r2, [sp, #152]	; 0x98
 801df2e:	4649      	mov	r1, r9
 801df30:	980d      	ldr	r0, [sp, #52]	; 0x34
 801df32:	f7ff ff1b 	bl	801dd6c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801df36:	4683      	mov	fp, r0
 801df38:	980d      	ldr	r0, [sp, #52]	; 0x34
 801df3a:	f7ff ff3d 	bl	801ddb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801df3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801df40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801df42:	4681      	mov	r9, r0
 801df44:	1a9b      	subs	r3, r3, r2
 801df46:	459a      	cmp	sl, r3
 801df48:	bfa8      	it	ge
 801df4a:	469a      	movge	sl, r3
 801df4c:	f1ba 0f00 	cmp.w	sl, #0
 801df50:	f340 80f9 	ble.w	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801df54:	1bf6      	subs	r6, r6, r7
 801df56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801df58:	1b9e      	subs	r6, r3, r6
 801df5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df5c:	429e      	cmp	r6, r3
 801df5e:	bfd4      	ite	le
 801df60:	ebc7 0706 	rsble	r7, r7, r6
 801df64:	ebc7 0703 	rsbgt	r7, r7, r3
 801df68:	2f00      	cmp	r7, #0
 801df6a:	f340 80ec 	ble.w	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801df6e:	1bed      	subs	r5, r5, r7
 801df70:	fb08 f305 	mul.w	r3, r8, r5
 801df74:	930d      	str	r3, [sp, #52]	; 0x34
 801df76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801df78:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801df7c:	930e      	str	r3, [sp, #56]	; 0x38
 801df7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801df80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801df84:	930f      	str	r3, [sp, #60]	; 0x3c
 801df86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801df88:	b2db      	uxtb	r3, r3
 801df8a:	9310      	str	r3, [sp, #64]	; 0x40
 801df8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df8e:	2b00      	cmp	r3, #0
 801df90:	f040 80de 	bne.w	801e150 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801df94:	4b7c      	ldr	r3, [pc, #496]	; (801e188 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801df96:	6818      	ldr	r0, [r3, #0]
 801df98:	6803      	ldr	r3, [r0, #0]
 801df9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df9c:	4798      	blx	r3
 801df9e:	2301      	movs	r3, #1
 801dfa0:	4a7a      	ldr	r2, [pc, #488]	; (801e18c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801dfa2:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801dfa6:	fb07 9b1b 	mls	fp, r7, fp, r9
 801dfaa:	fa03 f308 	lsl.w	r3, r3, r8
 801dfae:	8811      	ldrh	r1, [r2, #0]
 801dfb0:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801dfb4:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801dfb8:	3b01      	subs	r3, #1
 801dfba:	fb06 bb07 	mla	fp, r6, r7, fp
 801dfbe:	b2db      	uxtb	r3, r3
 801dfc0:	930a      	str	r3, [sp, #40]	; 0x28
 801dfc2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801dfc6:	fb01 2303 	mla	r3, r1, r3, r2
 801dfca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dfce:	18c3      	adds	r3, r0, r3
 801dfd0:	9309      	str	r3, [sp, #36]	; 0x24
 801dfd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dfd4:	781a      	ldrb	r2, [r3, #0]
 801dfd6:	4122      	asrs	r2, r4
 801dfd8:	b2d2      	uxtb	r2, r2
 801dfda:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801dfde:	f0c0 80d7 	bcc.w	801e190 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801dfe2:	46be      	mov	lr, r7
 801dfe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dfe6:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801dfea:	f0c0 80ba 	bcc.w	801e162 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801dfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dff0:	4013      	ands	r3, r2
 801dff2:	d041      	beq.n	801e078 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801dff4:	20ff      	movs	r0, #255	; 0xff
 801dff6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801dff8:	fb90 f5f5 	sdiv	r5, r0, r5
 801dffc:	436b      	muls	r3, r5
 801dffe:	2bfe      	cmp	r3, #254	; 0xfe
 801e000:	dd03      	ble.n	801e00a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801e002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e004:	4285      	cmp	r5, r0
 801e006:	f000 80a5 	beq.w	801e154 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801e00a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e00c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e00e:	fb15 f303 	smulbb	r3, r5, r3
 801e012:	b29b      	uxth	r3, r3
 801e014:	1c5d      	adds	r5, r3, #1
 801e016:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e01a:	780d      	ldrb	r5, [r1, #0]
 801e01c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e020:	fa1f fc83 	uxth.w	ip, r3
 801e024:	43db      	mvns	r3, r3
 801e026:	fb10 f90c 	smulbb	r9, r0, ip
 801e02a:	b2db      	uxtb	r3, r3
 801e02c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e02e:	fb05 9503 	mla	r5, r5, r3, r9
 801e032:	b2ad      	uxth	r5, r5
 801e034:	f105 0901 	add.w	r9, r5, #1
 801e038:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e03c:	fb10 f90c 	smulbb	r9, r0, ip
 801e040:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e042:	122d      	asrs	r5, r5, #8
 801e044:	fb10 fc0c 	smulbb	ip, r0, ip
 801e048:	700d      	strb	r5, [r1, #0]
 801e04a:	784d      	ldrb	r5, [r1, #1]
 801e04c:	fb05 9503 	mla	r5, r5, r3, r9
 801e050:	b2ad      	uxth	r5, r5
 801e052:	f105 0901 	add.w	r9, r5, #1
 801e056:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801e05a:	122d      	asrs	r5, r5, #8
 801e05c:	704d      	strb	r5, [r1, #1]
 801e05e:	788d      	ldrb	r5, [r1, #2]
 801e060:	fb05 cc03 	mla	ip, r5, r3, ip
 801e064:	fa1f fc8c 	uxth.w	ip, ip
 801e068:	f10c 0301 	add.w	r3, ip, #1
 801e06c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e070:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e074:	f881 c002 	strb.w	ip, [r1, #2]
 801e078:	4444      	add	r4, r8
 801e07a:	4431      	add	r1, r6
 801e07c:	b2a4      	uxth	r4, r4
 801e07e:	2c07      	cmp	r4, #7
 801e080:	bf89      	itett	hi
 801e082:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801e084:	fa42 f208 	asrls.w	r2, r2, r8
 801e088:	2400      	movhi	r4, #0
 801e08a:	785a      	ldrbhi	r2, [r3, #1]
 801e08c:	bf8a      	itet	hi
 801e08e:	3301      	addhi	r3, #1
 801e090:	b2d2      	uxtbls	r2, r2
 801e092:	9326      	strhi	r3, [sp, #152]	; 0x98
 801e094:	e7a7      	b.n	801dfe6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801e096:	441e      	add	r6, r3
 801e098:	b236      	sxth	r6, r6
 801e09a:	e6ed      	b.n	801de78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e09c:	f1b9 0f01 	cmp.w	r9, #1
 801e0a0:	f47f af28 	bne.w	801def4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0a4:	f1bb 0f01 	cmp.w	fp, #1
 801e0a8:	f47f af24 	bne.w	801def4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0ac:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801e188 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801e0b0:	f8db 0000 	ldr.w	r0, [fp]
 801e0b4:	6803      	ldr	r3, [r0, #0]
 801e0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e0b8:	4798      	blx	r3
 801e0ba:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e0be:	465a      	mov	r2, fp
 801e0c0:	d006      	beq.n	801e0d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801e0c2:	f1b8 0f04 	cmp.w	r8, #4
 801e0c6:	d141      	bne.n	801e14c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801e0c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e0ca:	3300      	adds	r3, #0
 801e0cc:	bf18      	it	ne
 801e0ce:	2301      	movne	r3, #1
 801e0d0:	0580      	lsls	r0, r0, #22
 801e0d2:	d566      	bpl.n	801e1a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e0d4:	f1b8 0f08 	cmp.w	r8, #8
 801e0d8:	d163      	bne.n	801e1a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	bf0c      	ite	eq
 801e0de:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e0e2:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e0e6:	2f00      	cmp	r7, #0
 801e0e8:	f47f af04 	bne.w	801def4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0ec:	2c00      	cmp	r4, #0
 801e0ee:	f47f af01 	bne.w	801def4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e0f6:	18f3      	adds	r3, r6, r3
 801e0f8:	4283      	cmp	r3, r0
 801e0fa:	f73f aefb 	bgt.w	801def4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e102:	4403      	add	r3, r0
 801e104:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e106:	4283      	cmp	r3, r0
 801e108:	f73f aef4 	bgt.w	801def4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e10c:	f1b8 0f08 	cmp.w	r8, #8
 801e110:	6810      	ldr	r0, [r2, #0]
 801e112:	f04f 0600 	mov.w	r6, #0
 801e116:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801e11a:	bf18      	it	ne
 801e11c:	3501      	addne	r5, #1
 801e11e:	6804      	ldr	r4, [r0, #0]
 801e120:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801e124:	bf18      	it	ne
 801e126:	f025 0501 	bicne.w	r5, r5, #1
 801e12a:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801e12e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e130:	bf18      	it	ne
 801e132:	b2ad      	uxthne	r5, r5
 801e134:	9104      	str	r1, [sp, #16]
 801e136:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e138:	e9cd 5a00 	strd	r5, sl, [sp]
 801e13c:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801e140:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e142:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801e144:	47a0      	blx	r4
 801e146:	b017      	add	sp, #92	; 0x5c
 801e148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e14c:	2300      	movs	r3, #0
 801e14e:	e7bf      	b.n	801e0d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801e150:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e152:	e724      	b.n	801df9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801e154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e156:	700b      	strb	r3, [r1, #0]
 801e158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e15a:	704b      	strb	r3, [r1, #1]
 801e15c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e15e:	708b      	strb	r3, [r1, #2]
 801e160:	e78a      	b.n	801e078 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801e162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e164:	b153      	cbz	r3, 801e17c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801e166:	441c      	add	r4, r3
 801e168:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e16a:	b2a4      	uxth	r4, r4
 801e16c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e170:	f004 0407 	and.w	r4, r4, #7
 801e174:	781a      	ldrb	r2, [r3, #0]
 801e176:	9326      	str	r3, [sp, #152]	; 0x98
 801e178:	4122      	asrs	r2, r4
 801e17a:	b2d2      	uxtb	r2, r2
 801e17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e17e:	445b      	add	r3, fp
 801e180:	9309      	str	r3, [sp, #36]	; 0x24
 801e182:	e72a      	b.n	801dfda <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801e184:	2400ff0c 	.word	0x2400ff0c
 801e188:	2400ff14 	.word	0x2400ff14
 801e18c:	2400ff0e 	.word	0x2400ff0e
 801e190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e192:	2b00      	cmp	r3, #0
 801e194:	d1d7      	bne.n	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e196:	4b06      	ldr	r3, [pc, #24]	; (801e1b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801e198:	6818      	ldr	r0, [r3, #0]
 801e19a:	6803      	ldr	r3, [r0, #0]
 801e19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e19e:	4798      	blx	r3
 801e1a0:	e7d1      	b.n	801e146 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	f43f aea6 	beq.w	801def4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e1a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e1ac:	e79b      	b.n	801e0e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801e1ae:	bf00      	nop
 801e1b0:	2400ff14 	.word	0x2400ff14

0801e1b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e1b4:	b538      	push	{r3, r4, r5, lr}
 801e1b6:	4c15      	ldr	r4, [pc, #84]	; (801e20c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e1b8:	4605      	mov	r5, r0
 801e1ba:	7823      	ldrb	r3, [r4, #0]
 801e1bc:	f3bf 8f5b 	dmb	ish
 801e1c0:	07da      	lsls	r2, r3, #31
 801e1c2:	d40b      	bmi.n	801e1dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e1c4:	4620      	mov	r0, r4
 801e1c6:	f005 f890 	bl	80232ea <__cxa_guard_acquire>
 801e1ca:	b138      	cbz	r0, 801e1dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	f005 f898 	bl	8023302 <__cxa_guard_release>
 801e1d2:	4a0f      	ldr	r2, [pc, #60]	; (801e210 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e1d4:	490f      	ldr	r1, [pc, #60]	; (801e214 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e1d6:	4810      	ldr	r0, [pc, #64]	; (801e218 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e1d8:	f005 f880 	bl	80232dc <__aeabi_atexit>
 801e1dc:	4c0f      	ldr	r4, [pc, #60]	; (801e21c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e1de:	7823      	ldrb	r3, [r4, #0]
 801e1e0:	f3bf 8f5b 	dmb	ish
 801e1e4:	07db      	lsls	r3, r3, #31
 801e1e6:	d40b      	bmi.n	801e200 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e1e8:	4620      	mov	r0, r4
 801e1ea:	f005 f87e 	bl	80232ea <__cxa_guard_acquire>
 801e1ee:	b138      	cbz	r0, 801e200 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e1f0:	4620      	mov	r0, r4
 801e1f2:	f005 f886 	bl	8023302 <__cxa_guard_release>
 801e1f6:	4a06      	ldr	r2, [pc, #24]	; (801e210 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e1f8:	4909      	ldr	r1, [pc, #36]	; (801e220 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e1fa:	480a      	ldr	r0, [pc, #40]	; (801e224 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e1fc:	f005 f86e 	bl	80232dc <__aeabi_atexit>
 801e200:	4b05      	ldr	r3, [pc, #20]	; (801e218 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e202:	612b      	str	r3, [r5, #16]
 801e204:	4b07      	ldr	r3, [pc, #28]	; (801e224 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e206:	616b      	str	r3, [r5, #20]
 801e208:	bd38      	pop	{r3, r4, r5, pc}
 801e20a:	bf00      	nop
 801e20c:	2400ffe0 	.word	0x2400ffe0
 801e210:	24000000 	.word	0x24000000
 801e214:	0801cd79 	.word	0x0801cd79
 801e218:	240000c8 	.word	0x240000c8
 801e21c:	2400ffe4 	.word	0x2400ffe4
 801e220:	0801cd77 	.word	0x0801cd77
 801e224:	240000cc 	.word	0x240000cc

0801e228 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e228:	b538      	push	{r3, r4, r5, lr}
 801e22a:	4c15      	ldr	r4, [pc, #84]	; (801e280 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e22c:	4605      	mov	r5, r0
 801e22e:	7823      	ldrb	r3, [r4, #0]
 801e230:	f3bf 8f5b 	dmb	ish
 801e234:	07da      	lsls	r2, r3, #31
 801e236:	d40b      	bmi.n	801e250 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e238:	4620      	mov	r0, r4
 801e23a:	f005 f856 	bl	80232ea <__cxa_guard_acquire>
 801e23e:	b138      	cbz	r0, 801e250 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e240:	4620      	mov	r0, r4
 801e242:	f005 f85e 	bl	8023302 <__cxa_guard_release>
 801e246:	4a0f      	ldr	r2, [pc, #60]	; (801e284 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e248:	490f      	ldr	r1, [pc, #60]	; (801e288 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e24a:	4810      	ldr	r0, [pc, #64]	; (801e28c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e24c:	f005 f846 	bl	80232dc <__aeabi_atexit>
 801e250:	4c0f      	ldr	r4, [pc, #60]	; (801e290 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e252:	7823      	ldrb	r3, [r4, #0]
 801e254:	f3bf 8f5b 	dmb	ish
 801e258:	07db      	lsls	r3, r3, #31
 801e25a:	d40b      	bmi.n	801e274 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e25c:	4620      	mov	r0, r4
 801e25e:	f005 f844 	bl	80232ea <__cxa_guard_acquire>
 801e262:	b138      	cbz	r0, 801e274 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e264:	4620      	mov	r0, r4
 801e266:	f005 f84c 	bl	8023302 <__cxa_guard_release>
 801e26a:	4a06      	ldr	r2, [pc, #24]	; (801e284 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e26c:	4909      	ldr	r1, [pc, #36]	; (801e294 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e26e:	480a      	ldr	r0, [pc, #40]	; (801e298 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e270:	f005 f834 	bl	80232dc <__aeabi_atexit>
 801e274:	4b05      	ldr	r3, [pc, #20]	; (801e28c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e276:	60ab      	str	r3, [r5, #8]
 801e278:	4b07      	ldr	r3, [pc, #28]	; (801e298 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e27a:	60eb      	str	r3, [r5, #12]
 801e27c:	bd38      	pop	{r3, r4, r5, pc}
 801e27e:	bf00      	nop
 801e280:	2400ffc0 	.word	0x2400ffc0
 801e284:	24000000 	.word	0x24000000
 801e288:	0801cd7d 	.word	0x0801cd7d
 801e28c:	240000a8 	.word	0x240000a8
 801e290:	2400ffc4 	.word	0x2400ffc4
 801e294:	0801cd7b 	.word	0x0801cd7b
 801e298:	240000ac 	.word	0x240000ac

0801e29c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e29c:	b510      	push	{r4, lr}
 801e29e:	4604      	mov	r4, r0
 801e2a0:	f7ff ff88 	bl	801e1b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e2a4:	4620      	mov	r0, r4
 801e2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2aa:	f7ff bfbd 	b.w	801e228 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e2b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e2b0:	b538      	push	{r3, r4, r5, lr}
 801e2b2:	4c15      	ldr	r4, [pc, #84]	; (801e308 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e2b4:	4605      	mov	r5, r0
 801e2b6:	7823      	ldrb	r3, [r4, #0]
 801e2b8:	f3bf 8f5b 	dmb	ish
 801e2bc:	07da      	lsls	r2, r3, #31
 801e2be:	d40b      	bmi.n	801e2d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	f005 f812 	bl	80232ea <__cxa_guard_acquire>
 801e2c6:	b138      	cbz	r0, 801e2d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e2c8:	4620      	mov	r0, r4
 801e2ca:	f005 f81a 	bl	8023302 <__cxa_guard_release>
 801e2ce:	4a0f      	ldr	r2, [pc, #60]	; (801e30c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e2d0:	490f      	ldr	r1, [pc, #60]	; (801e310 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e2d2:	4810      	ldr	r0, [pc, #64]	; (801e314 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e2d4:	f005 f802 	bl	80232dc <__aeabi_atexit>
 801e2d8:	4c0f      	ldr	r4, [pc, #60]	; (801e318 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e2da:	7823      	ldrb	r3, [r4, #0]
 801e2dc:	f3bf 8f5b 	dmb	ish
 801e2e0:	07db      	lsls	r3, r3, #31
 801e2e2:	d40b      	bmi.n	801e2fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	f005 f800 	bl	80232ea <__cxa_guard_acquire>
 801e2ea:	b138      	cbz	r0, 801e2fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e2ec:	4620      	mov	r0, r4
 801e2ee:	f005 f808 	bl	8023302 <__cxa_guard_release>
 801e2f2:	4a06      	ldr	r2, [pc, #24]	; (801e30c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e2f4:	4909      	ldr	r1, [pc, #36]	; (801e31c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e2f6:	480a      	ldr	r0, [pc, #40]	; (801e320 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e2f8:	f004 fff0 	bl	80232dc <__aeabi_atexit>
 801e2fc:	4b05      	ldr	r3, [pc, #20]	; (801e314 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e2fe:	622b      	str	r3, [r5, #32]
 801e300:	4b07      	ldr	r3, [pc, #28]	; (801e320 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e302:	626b      	str	r3, [r5, #36]	; 0x24
 801e304:	bd38      	pop	{r3, r4, r5, pc}
 801e306:	bf00      	nop
 801e308:	2400ffe8 	.word	0x2400ffe8
 801e30c:	24000000 	.word	0x24000000
 801e310:	0801cd71 	.word	0x0801cd71
 801e314:	240000d0 	.word	0x240000d0
 801e318:	2400ffec 	.word	0x2400ffec
 801e31c:	0801cd6f 	.word	0x0801cd6f
 801e320:	240000d4 	.word	0x240000d4

0801e324 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e324:	b538      	push	{r3, r4, r5, lr}
 801e326:	4c15      	ldr	r4, [pc, #84]	; (801e37c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e328:	4605      	mov	r5, r0
 801e32a:	7823      	ldrb	r3, [r4, #0]
 801e32c:	f3bf 8f5b 	dmb	ish
 801e330:	07da      	lsls	r2, r3, #31
 801e332:	d40b      	bmi.n	801e34c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e334:	4620      	mov	r0, r4
 801e336:	f004 ffd8 	bl	80232ea <__cxa_guard_acquire>
 801e33a:	b138      	cbz	r0, 801e34c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e33c:	4620      	mov	r0, r4
 801e33e:	f004 ffe0 	bl	8023302 <__cxa_guard_release>
 801e342:	4a0f      	ldr	r2, [pc, #60]	; (801e380 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e344:	490f      	ldr	r1, [pc, #60]	; (801e384 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e346:	4810      	ldr	r0, [pc, #64]	; (801e388 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e348:	f004 ffc8 	bl	80232dc <__aeabi_atexit>
 801e34c:	4c0f      	ldr	r4, [pc, #60]	; (801e38c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e34e:	7823      	ldrb	r3, [r4, #0]
 801e350:	f3bf 8f5b 	dmb	ish
 801e354:	07db      	lsls	r3, r3, #31
 801e356:	d40b      	bmi.n	801e370 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e358:	4620      	mov	r0, r4
 801e35a:	f004 ffc6 	bl	80232ea <__cxa_guard_acquire>
 801e35e:	b138      	cbz	r0, 801e370 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e360:	4620      	mov	r0, r4
 801e362:	f004 ffce 	bl	8023302 <__cxa_guard_release>
 801e366:	4a06      	ldr	r2, [pc, #24]	; (801e380 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e368:	4909      	ldr	r1, [pc, #36]	; (801e390 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e36a:	480a      	ldr	r0, [pc, #40]	; (801e394 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e36c:	f004 ffb6 	bl	80232dc <__aeabi_atexit>
 801e370:	4b05      	ldr	r3, [pc, #20]	; (801e388 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e372:	61ab      	str	r3, [r5, #24]
 801e374:	4b07      	ldr	r3, [pc, #28]	; (801e394 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e376:	61eb      	str	r3, [r5, #28]
 801e378:	bd38      	pop	{r3, r4, r5, pc}
 801e37a:	bf00      	nop
 801e37c:	2400ffc8 	.word	0x2400ffc8
 801e380:	24000000 	.word	0x24000000
 801e384:	0801cd75 	.word	0x0801cd75
 801e388:	240000b0 	.word	0x240000b0
 801e38c:	2400ffcc 	.word	0x2400ffcc
 801e390:	0801cd73 	.word	0x0801cd73
 801e394:	240000b4 	.word	0x240000b4

0801e398 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e398:	b510      	push	{r4, lr}
 801e39a:	4604      	mov	r4, r0
 801e39c:	f7ff ff88 	bl	801e2b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e3a0:	4620      	mov	r0, r4
 801e3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3a6:	f7ff bfbd 	b.w	801e324 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e3ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e3ac:	b538      	push	{r3, r4, r5, lr}
 801e3ae:	4c15      	ldr	r4, [pc, #84]	; (801e404 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e3b0:	4605      	mov	r5, r0
 801e3b2:	7823      	ldrb	r3, [r4, #0]
 801e3b4:	f3bf 8f5b 	dmb	ish
 801e3b8:	07da      	lsls	r2, r3, #31
 801e3ba:	d40b      	bmi.n	801e3d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e3bc:	4620      	mov	r0, r4
 801e3be:	f004 ff94 	bl	80232ea <__cxa_guard_acquire>
 801e3c2:	b138      	cbz	r0, 801e3d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	f004 ff9c 	bl	8023302 <__cxa_guard_release>
 801e3ca:	4a0f      	ldr	r2, [pc, #60]	; (801e408 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e3cc:	490f      	ldr	r1, [pc, #60]	; (801e40c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e3ce:	4810      	ldr	r0, [pc, #64]	; (801e410 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e3d0:	f004 ff84 	bl	80232dc <__aeabi_atexit>
 801e3d4:	4c0f      	ldr	r4, [pc, #60]	; (801e414 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e3d6:	7823      	ldrb	r3, [r4, #0]
 801e3d8:	f3bf 8f5b 	dmb	ish
 801e3dc:	07db      	lsls	r3, r3, #31
 801e3de:	d40b      	bmi.n	801e3f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e3e0:	4620      	mov	r0, r4
 801e3e2:	f004 ff82 	bl	80232ea <__cxa_guard_acquire>
 801e3e6:	b138      	cbz	r0, 801e3f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e3e8:	4620      	mov	r0, r4
 801e3ea:	f004 ff8a 	bl	8023302 <__cxa_guard_release>
 801e3ee:	4a06      	ldr	r2, [pc, #24]	; (801e408 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e3f0:	4909      	ldr	r1, [pc, #36]	; (801e418 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e3f2:	480a      	ldr	r0, [pc, #40]	; (801e41c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e3f4:	f004 ff72 	bl	80232dc <__aeabi_atexit>
 801e3f8:	4b05      	ldr	r3, [pc, #20]	; (801e410 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e3fa:	632b      	str	r3, [r5, #48]	; 0x30
 801e3fc:	4b07      	ldr	r3, [pc, #28]	; (801e41c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e3fe:	636b      	str	r3, [r5, #52]	; 0x34
 801e400:	bd38      	pop	{r3, r4, r5, pc}
 801e402:	bf00      	nop
 801e404:	2400ffd0 	.word	0x2400ffd0
 801e408:	24000000 	.word	0x24000000
 801e40c:	0801cd69 	.word	0x0801cd69
 801e410:	240000b8 	.word	0x240000b8
 801e414:	2400ffd4 	.word	0x2400ffd4
 801e418:	0801cd67 	.word	0x0801cd67
 801e41c:	240000bc 	.word	0x240000bc

0801e420 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e420:	b538      	push	{r3, r4, r5, lr}
 801e422:	4c15      	ldr	r4, [pc, #84]	; (801e478 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e424:	4605      	mov	r5, r0
 801e426:	7823      	ldrb	r3, [r4, #0]
 801e428:	f3bf 8f5b 	dmb	ish
 801e42c:	07da      	lsls	r2, r3, #31
 801e42e:	d40b      	bmi.n	801e448 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e430:	4620      	mov	r0, r4
 801e432:	f004 ff5a 	bl	80232ea <__cxa_guard_acquire>
 801e436:	b138      	cbz	r0, 801e448 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e438:	4620      	mov	r0, r4
 801e43a:	f004 ff62 	bl	8023302 <__cxa_guard_release>
 801e43e:	4a0f      	ldr	r2, [pc, #60]	; (801e47c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e440:	490f      	ldr	r1, [pc, #60]	; (801e480 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e442:	4810      	ldr	r0, [pc, #64]	; (801e484 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e444:	f004 ff4a 	bl	80232dc <__aeabi_atexit>
 801e448:	4c0f      	ldr	r4, [pc, #60]	; (801e488 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e44a:	7823      	ldrb	r3, [r4, #0]
 801e44c:	f3bf 8f5b 	dmb	ish
 801e450:	07db      	lsls	r3, r3, #31
 801e452:	d40b      	bmi.n	801e46c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e454:	4620      	mov	r0, r4
 801e456:	f004 ff48 	bl	80232ea <__cxa_guard_acquire>
 801e45a:	b138      	cbz	r0, 801e46c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e45c:	4620      	mov	r0, r4
 801e45e:	f004 ff50 	bl	8023302 <__cxa_guard_release>
 801e462:	4a06      	ldr	r2, [pc, #24]	; (801e47c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e464:	4909      	ldr	r1, [pc, #36]	; (801e48c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e466:	480a      	ldr	r0, [pc, #40]	; (801e490 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e468:	f004 ff38 	bl	80232dc <__aeabi_atexit>
 801e46c:	4b05      	ldr	r3, [pc, #20]	; (801e484 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e46e:	62ab      	str	r3, [r5, #40]	; 0x28
 801e470:	4b07      	ldr	r3, [pc, #28]	; (801e490 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e472:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e474:	bd38      	pop	{r3, r4, r5, pc}
 801e476:	bf00      	nop
 801e478:	2400ffa8 	.word	0x2400ffa8
 801e47c:	24000000 	.word	0x24000000
 801e480:	0801cd6d 	.word	0x0801cd6d
 801e484:	24000090 	.word	0x24000090
 801e488:	2400ffac 	.word	0x2400ffac
 801e48c:	0801cd6b 	.word	0x0801cd6b
 801e490:	24000094 	.word	0x24000094

0801e494 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e494:	b510      	push	{r4, lr}
 801e496:	4604      	mov	r4, r0
 801e498:	f7ff ff88 	bl	801e3ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e49c:	4620      	mov	r0, r4
 801e49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4a2:	f7ff bfbd 	b.w	801e420 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e4a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e4a8:	b538      	push	{r3, r4, r5, lr}
 801e4aa:	4c15      	ldr	r4, [pc, #84]	; (801e500 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e4ac:	4605      	mov	r5, r0
 801e4ae:	7823      	ldrb	r3, [r4, #0]
 801e4b0:	f3bf 8f5b 	dmb	ish
 801e4b4:	07da      	lsls	r2, r3, #31
 801e4b6:	d40b      	bmi.n	801e4d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e4b8:	4620      	mov	r0, r4
 801e4ba:	f004 ff16 	bl	80232ea <__cxa_guard_acquire>
 801e4be:	b138      	cbz	r0, 801e4d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e4c0:	4620      	mov	r0, r4
 801e4c2:	f004 ff1e 	bl	8023302 <__cxa_guard_release>
 801e4c6:	4a0f      	ldr	r2, [pc, #60]	; (801e504 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e4c8:	490f      	ldr	r1, [pc, #60]	; (801e508 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e4ca:	4810      	ldr	r0, [pc, #64]	; (801e50c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e4cc:	f004 ff06 	bl	80232dc <__aeabi_atexit>
 801e4d0:	4c0f      	ldr	r4, [pc, #60]	; (801e510 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e4d2:	7823      	ldrb	r3, [r4, #0]
 801e4d4:	f3bf 8f5b 	dmb	ish
 801e4d8:	07db      	lsls	r3, r3, #31
 801e4da:	d40b      	bmi.n	801e4f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e4dc:	4620      	mov	r0, r4
 801e4de:	f004 ff04 	bl	80232ea <__cxa_guard_acquire>
 801e4e2:	b138      	cbz	r0, 801e4f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e4e4:	4620      	mov	r0, r4
 801e4e6:	f004 ff0c 	bl	8023302 <__cxa_guard_release>
 801e4ea:	4a06      	ldr	r2, [pc, #24]	; (801e504 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e4ec:	4909      	ldr	r1, [pc, #36]	; (801e514 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e4ee:	480a      	ldr	r0, [pc, #40]	; (801e518 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e4f0:	f004 fef4 	bl	80232dc <__aeabi_atexit>
 801e4f4:	4b05      	ldr	r3, [pc, #20]	; (801e50c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e4f6:	642b      	str	r3, [r5, #64]	; 0x40
 801e4f8:	4b07      	ldr	r3, [pc, #28]	; (801e518 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e4fa:	646b      	str	r3, [r5, #68]	; 0x44
 801e4fc:	bd38      	pop	{r3, r4, r5, pc}
 801e4fe:	bf00      	nop
 801e500:	2400ffd8 	.word	0x2400ffd8
 801e504:	24000000 	.word	0x24000000
 801e508:	0801cd61 	.word	0x0801cd61
 801e50c:	240000c0 	.word	0x240000c0
 801e510:	2400ffdc 	.word	0x2400ffdc
 801e514:	0801cd5f 	.word	0x0801cd5f
 801e518:	240000c4 	.word	0x240000c4

0801e51c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e51c:	b538      	push	{r3, r4, r5, lr}
 801e51e:	4c15      	ldr	r4, [pc, #84]	; (801e574 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e520:	4605      	mov	r5, r0
 801e522:	7823      	ldrb	r3, [r4, #0]
 801e524:	f3bf 8f5b 	dmb	ish
 801e528:	07da      	lsls	r2, r3, #31
 801e52a:	d40b      	bmi.n	801e544 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e52c:	4620      	mov	r0, r4
 801e52e:	f004 fedc 	bl	80232ea <__cxa_guard_acquire>
 801e532:	b138      	cbz	r0, 801e544 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e534:	4620      	mov	r0, r4
 801e536:	f004 fee4 	bl	8023302 <__cxa_guard_release>
 801e53a:	4a0f      	ldr	r2, [pc, #60]	; (801e578 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e53c:	490f      	ldr	r1, [pc, #60]	; (801e57c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e53e:	4810      	ldr	r0, [pc, #64]	; (801e580 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e540:	f004 fecc 	bl	80232dc <__aeabi_atexit>
 801e544:	4c0f      	ldr	r4, [pc, #60]	; (801e584 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e546:	7823      	ldrb	r3, [r4, #0]
 801e548:	f3bf 8f5b 	dmb	ish
 801e54c:	07db      	lsls	r3, r3, #31
 801e54e:	d40b      	bmi.n	801e568 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e550:	4620      	mov	r0, r4
 801e552:	f004 feca 	bl	80232ea <__cxa_guard_acquire>
 801e556:	b138      	cbz	r0, 801e568 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e558:	4620      	mov	r0, r4
 801e55a:	f004 fed2 	bl	8023302 <__cxa_guard_release>
 801e55e:	4a06      	ldr	r2, [pc, #24]	; (801e578 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e560:	4909      	ldr	r1, [pc, #36]	; (801e588 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e562:	480a      	ldr	r0, [pc, #40]	; (801e58c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e564:	f004 feba 	bl	80232dc <__aeabi_atexit>
 801e568:	4b05      	ldr	r3, [pc, #20]	; (801e580 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e56a:	63ab      	str	r3, [r5, #56]	; 0x38
 801e56c:	4b07      	ldr	r3, [pc, #28]	; (801e58c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e56e:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e570:	bd38      	pop	{r3, r4, r5, pc}
 801e572:	bf00      	nop
 801e574:	2400ffb8 	.word	0x2400ffb8
 801e578:	24000000 	.word	0x24000000
 801e57c:	0801cd65 	.word	0x0801cd65
 801e580:	240000a0 	.word	0x240000a0
 801e584:	2400ffbc 	.word	0x2400ffbc
 801e588:	0801cd63 	.word	0x0801cd63
 801e58c:	240000a4 	.word	0x240000a4

0801e590 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e590:	b510      	push	{r4, lr}
 801e592:	4604      	mov	r4, r0
 801e594:	f7ff ff88 	bl	801e4a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e598:	4620      	mov	r0, r4
 801e59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e59e:	f7ff bfbd 	b.w	801e51c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e5a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e5a4:	b538      	push	{r3, r4, r5, lr}
 801e5a6:	4c15      	ldr	r4, [pc, #84]	; (801e5fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e5a8:	4605      	mov	r5, r0
 801e5aa:	7823      	ldrb	r3, [r4, #0]
 801e5ac:	f3bf 8f5b 	dmb	ish
 801e5b0:	07da      	lsls	r2, r3, #31
 801e5b2:	d40b      	bmi.n	801e5cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e5b4:	4620      	mov	r0, r4
 801e5b6:	f004 fe98 	bl	80232ea <__cxa_guard_acquire>
 801e5ba:	b138      	cbz	r0, 801e5cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e5bc:	4620      	mov	r0, r4
 801e5be:	f004 fea0 	bl	8023302 <__cxa_guard_release>
 801e5c2:	4a0f      	ldr	r2, [pc, #60]	; (801e600 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e5c4:	490f      	ldr	r1, [pc, #60]	; (801e604 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e5c6:	4810      	ldr	r0, [pc, #64]	; (801e608 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e5c8:	f004 fe88 	bl	80232dc <__aeabi_atexit>
 801e5cc:	4c0f      	ldr	r4, [pc, #60]	; (801e60c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e5ce:	7823      	ldrb	r3, [r4, #0]
 801e5d0:	f3bf 8f5b 	dmb	ish
 801e5d4:	07db      	lsls	r3, r3, #31
 801e5d6:	d40b      	bmi.n	801e5f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e5d8:	4620      	mov	r0, r4
 801e5da:	f004 fe86 	bl	80232ea <__cxa_guard_acquire>
 801e5de:	b138      	cbz	r0, 801e5f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e5e0:	4620      	mov	r0, r4
 801e5e2:	f004 fe8e 	bl	8023302 <__cxa_guard_release>
 801e5e6:	4a06      	ldr	r2, [pc, #24]	; (801e600 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e5e8:	4909      	ldr	r1, [pc, #36]	; (801e610 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e5ea:	480a      	ldr	r0, [pc, #40]	; (801e614 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e5ec:	f004 fe76 	bl	80232dc <__aeabi_atexit>
 801e5f0:	4b05      	ldr	r3, [pc, #20]	; (801e608 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e5f2:	652b      	str	r3, [r5, #80]	; 0x50
 801e5f4:	4b07      	ldr	r3, [pc, #28]	; (801e614 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e5f6:	656b      	str	r3, [r5, #84]	; 0x54
 801e5f8:	bd38      	pop	{r3, r4, r5, pc}
 801e5fa:	bf00      	nop
 801e5fc:	2400ffb0 	.word	0x2400ffb0
 801e600:	24000000 	.word	0x24000000
 801e604:	0801cd59 	.word	0x0801cd59
 801e608:	24000098 	.word	0x24000098
 801e60c:	2400ffb4 	.word	0x2400ffb4
 801e610:	0801cd57 	.word	0x0801cd57
 801e614:	2400009c 	.word	0x2400009c

0801e618 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e618:	b538      	push	{r3, r4, r5, lr}
 801e61a:	4c15      	ldr	r4, [pc, #84]	; (801e670 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e61c:	4605      	mov	r5, r0
 801e61e:	7823      	ldrb	r3, [r4, #0]
 801e620:	f3bf 8f5b 	dmb	ish
 801e624:	07da      	lsls	r2, r3, #31
 801e626:	d40b      	bmi.n	801e640 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e628:	4620      	mov	r0, r4
 801e62a:	f004 fe5e 	bl	80232ea <__cxa_guard_acquire>
 801e62e:	b138      	cbz	r0, 801e640 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e630:	4620      	mov	r0, r4
 801e632:	f004 fe66 	bl	8023302 <__cxa_guard_release>
 801e636:	4a0f      	ldr	r2, [pc, #60]	; (801e674 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e638:	490f      	ldr	r1, [pc, #60]	; (801e678 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e63a:	4810      	ldr	r0, [pc, #64]	; (801e67c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e63c:	f004 fe4e 	bl	80232dc <__aeabi_atexit>
 801e640:	4c0f      	ldr	r4, [pc, #60]	; (801e680 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e642:	7823      	ldrb	r3, [r4, #0]
 801e644:	f3bf 8f5b 	dmb	ish
 801e648:	07db      	lsls	r3, r3, #31
 801e64a:	d40b      	bmi.n	801e664 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e64c:	4620      	mov	r0, r4
 801e64e:	f004 fe4c 	bl	80232ea <__cxa_guard_acquire>
 801e652:	b138      	cbz	r0, 801e664 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e654:	4620      	mov	r0, r4
 801e656:	f004 fe54 	bl	8023302 <__cxa_guard_release>
 801e65a:	4a06      	ldr	r2, [pc, #24]	; (801e674 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e65c:	4909      	ldr	r1, [pc, #36]	; (801e684 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e65e:	480a      	ldr	r0, [pc, #40]	; (801e688 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e660:	f004 fe3c 	bl	80232dc <__aeabi_atexit>
 801e664:	4b05      	ldr	r3, [pc, #20]	; (801e67c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e666:	64ab      	str	r3, [r5, #72]	; 0x48
 801e668:	4b07      	ldr	r3, [pc, #28]	; (801e688 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e66a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e66c:	bd38      	pop	{r3, r4, r5, pc}
 801e66e:	bf00      	nop
 801e670:	2400ffa0 	.word	0x2400ffa0
 801e674:	24000000 	.word	0x24000000
 801e678:	0801cd5d 	.word	0x0801cd5d
 801e67c:	24000088 	.word	0x24000088
 801e680:	2400ffa4 	.word	0x2400ffa4
 801e684:	0801cd5b 	.word	0x0801cd5b
 801e688:	2400008c 	.word	0x2400008c

0801e68c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e68c:	b510      	push	{r4, lr}
 801e68e:	4604      	mov	r4, r0
 801e690:	f7ff ff88 	bl	801e5a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e694:	4620      	mov	r0, r4
 801e696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e69a:	f7ff bfbd 	b.w	801e618 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e69e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e69e:	b510      	push	{r4, lr}
 801e6a0:	4604      	mov	r4, r0
 801e6a2:	f7ff fff3 	bl	801e68c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e6a6:	4620      	mov	r0, r4
 801e6a8:	f7ff ff72 	bl	801e590 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e6ac:	4620      	mov	r0, r4
 801e6ae:	f7ff fe73 	bl	801e398 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e6b2:	4620      	mov	r0, r4
 801e6b4:	f7ff fdf2 	bl	801e29c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e6b8:	4620      	mov	r0, r4
 801e6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6be:	f7ff bee9 	b.w	801e494 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801e6c2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e6c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c6:	b087      	sub	sp, #28
 801e6c8:	788d      	ldrb	r5, [r1, #2]
 801e6ca:	f891 9000 	ldrb.w	r9, [r1]
 801e6ce:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801e6d2:	9501      	str	r5, [sp, #4]
 801e6d4:	784d      	ldrb	r5, [r1, #1]
 801e6d6:	9203      	str	r2, [sp, #12]
 801e6d8:	9502      	str	r5, [sp, #8]
 801e6da:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801e6de:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801e6e2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801e6e6:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801e6ea:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801e6ee:	fb06 0708 	mla	r7, r6, r8, r0
 801e6f2:	2e00      	cmp	r6, #0
 801e6f4:	eb02 0a07 	add.w	sl, r2, r7
 801e6f8:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801e6fc:	9d01      	ldr	r5, [sp, #4]
 801e6fe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801e702:	ea45 0509 	orr.w	r5, r5, r9
 801e706:	9505      	str	r5, [sp, #20]
 801e708:	f2c0 80b2 	blt.w	801e870 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801e70c:	45b3      	cmp	fp, r6
 801e70e:	f340 80af 	ble.w	801e870 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801e712:	2800      	cmp	r0, #0
 801e714:	f2c0 80aa 	blt.w	801e86c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801e718:	4580      	cmp	r8, r0
 801e71a:	f340 80a7 	ble.w	801e86c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801e71e:	9a03      	ldr	r2, [sp, #12]
 801e720:	5dd7      	ldrb	r7, [r2, r7]
 801e722:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e726:	441f      	add	r7, r3
 801e728:	1c42      	adds	r2, r0, #1
 801e72a:	f100 80a4 	bmi.w	801e876 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e72e:	4590      	cmp	r8, r2
 801e730:	f340 80a1 	ble.w	801e876 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e734:	2c00      	cmp	r4, #0
 801e736:	f000 809e 	beq.w	801e876 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e73a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801e73e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e742:	441d      	add	r5, r3
 801e744:	3601      	adds	r6, #1
 801e746:	f100 809a 	bmi.w	801e87e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e74a:	45b3      	cmp	fp, r6
 801e74c:	f340 8097 	ble.w	801e87e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e750:	f1bc 0f00 	cmp.w	ip, #0
 801e754:	f000 8093 	beq.w	801e87e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e758:	2800      	cmp	r0, #0
 801e75a:	f2c0 808e 	blt.w	801e87a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801e75e:	4580      	cmp	r8, r0
 801e760:	f340 808b 	ble.w	801e87a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801e764:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801e768:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e76c:	441e      	add	r6, r3
 801e76e:	3001      	adds	r0, #1
 801e770:	f100 8088 	bmi.w	801e884 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e774:	4580      	cmp	r8, r0
 801e776:	f340 8085 	ble.w	801e884 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e77a:	2c00      	cmp	r4, #0
 801e77c:	f000 8082 	beq.w	801e884 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e780:	44d0      	add	r8, sl
 801e782:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e786:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e78a:	4413      	add	r3, r2
 801e78c:	b2a4      	uxth	r4, r4
 801e78e:	f895 a000 	ldrb.w	sl, [r5]
 801e792:	fa1f fc8c 	uxth.w	ip, ip
 801e796:	fb04 fb0c 	mul.w	fp, r4, ip
 801e79a:	0124      	lsls	r4, r4, #4
 801e79c:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801e7a0:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801e7a4:	eba4 040b 	sub.w	r4, r4, fp
 801e7a8:	fa1f f08c 	uxth.w	r0, ip
 801e7ac:	b2a2      	uxth	r2, r4
 801e7ae:	783c      	ldrb	r4, [r7, #0]
 801e7b0:	eba8 0800 	sub.w	r8, r8, r0
 801e7b4:	fa1f fc8e 	uxth.w	ip, lr
 801e7b8:	fb02 fa0a 	mul.w	sl, r2, sl
 801e7bc:	ea6f 0e0e 	mvn.w	lr, lr
 801e7c0:	fa1f f888 	uxth.w	r8, r8
 801e7c4:	fa5f fe8e 	uxtb.w	lr, lr
 801e7c8:	fb08 aa04 	mla	sl, r8, r4, sl
 801e7cc:	7834      	ldrb	r4, [r6, #0]
 801e7ce:	fb19 f90e 	smulbb	r9, r9, lr
 801e7d2:	fb00 aa04 	mla	sl, r0, r4, sl
 801e7d6:	781c      	ldrb	r4, [r3, #0]
 801e7d8:	fb0b a404 	mla	r4, fp, r4, sl
 801e7dc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e7e0:	fb04 990c 	mla	r9, r4, ip, r9
 801e7e4:	fa1f f989 	uxth.w	r9, r9
 801e7e8:	f109 0401 	add.w	r4, r9, #1
 801e7ec:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801e7f0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7f4:	f881 9000 	strb.w	r9, [r1]
 801e7f8:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e7fc:	787c      	ldrb	r4, [r7, #1]
 801e7fe:	fb02 f909 	mul.w	r9, r2, r9
 801e802:	fb08 9904 	mla	r9, r8, r4, r9
 801e806:	7874      	ldrb	r4, [r6, #1]
 801e808:	fb00 9904 	mla	r9, r0, r4, r9
 801e80c:	785c      	ldrb	r4, [r3, #1]
 801e80e:	fb0b 9404 	mla	r4, fp, r4, r9
 801e812:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801e816:	9c02      	ldr	r4, [sp, #8]
 801e818:	fb14 f90e 	smulbb	r9, r4, lr
 801e81c:	fb0a 940c 	mla	r4, sl, ip, r9
 801e820:	b2a4      	uxth	r4, r4
 801e822:	f104 0901 	add.w	r9, r4, #1
 801e826:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801e82a:	1224      	asrs	r4, r4, #8
 801e82c:	704c      	strb	r4, [r1, #1]
 801e82e:	78ad      	ldrb	r5, [r5, #2]
 801e830:	78bc      	ldrb	r4, [r7, #2]
 801e832:	436a      	muls	r2, r5
 801e834:	789b      	ldrb	r3, [r3, #2]
 801e836:	fb08 2204 	mla	r2, r8, r4, r2
 801e83a:	78b4      	ldrb	r4, [r6, #2]
 801e83c:	fb00 2004 	mla	r0, r0, r4, r2
 801e840:	fb0b 0b03 	mla	fp, fp, r3, r0
 801e844:	9b01      	ldr	r3, [sp, #4]
 801e846:	fb13 fe0e 	smulbb	lr, r3, lr
 801e84a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801e84e:	fb0b ec0c 	mla	ip, fp, ip, lr
 801e852:	fa1f fc8c 	uxth.w	ip, ip
 801e856:	f10c 0e01 	add.w	lr, ip, #1
 801e85a:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801e85e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e862:	f881 c002 	strb.w	ip, [r1, #2]
 801e866:	b007      	add	sp, #28
 801e868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e86c:	af05      	add	r7, sp, #20
 801e86e:	e75b      	b.n	801e728 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801e870:	ad05      	add	r5, sp, #20
 801e872:	462f      	mov	r7, r5
 801e874:	e766      	b.n	801e744 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801e876:	ad05      	add	r5, sp, #20
 801e878:	e764      	b.n	801e744 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801e87a:	ae05      	add	r6, sp, #20
 801e87c:	e777      	b.n	801e76e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801e87e:	ab05      	add	r3, sp, #20
 801e880:	461e      	mov	r6, r3
 801e882:	e783      	b.n	801e78c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801e884:	ab05      	add	r3, sp, #20
 801e886:	e781      	b.n	801e78c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801e888 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e88c:	b093      	sub	sp, #76	; 0x4c
 801e88e:	9210      	str	r2, [sp, #64]	; 0x40
 801e890:	9309      	str	r3, [sp, #36]	; 0x24
 801e892:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e894:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801e898:	9011      	str	r0, [sp, #68]	; 0x44
 801e89a:	930e      	str	r3, [sp, #56]	; 0x38
 801e89c:	6850      	ldr	r0, [r2, #4]
 801e89e:	910d      	str	r1, [sp, #52]	; 0x34
 801e8a0:	6812      	ldr	r2, [r2, #0]
 801e8a2:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801e8a6:	fb00 1303 	mla	r3, r0, r3, r1
 801e8aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8ae:	18d3      	adds	r3, r2, r3
 801e8b0:	930a      	str	r3, [sp, #40]	; 0x28
 801e8b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e8b4:	681b      	ldr	r3, [r3, #0]
 801e8b6:	930c      	str	r3, [sp, #48]	; 0x30
 801e8b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e8ba:	685c      	ldr	r4, [r3, #4]
 801e8bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8be:	3404      	adds	r4, #4
 801e8c0:	43db      	mvns	r3, r3
 801e8c2:	b2db      	uxtb	r3, r3
 801e8c4:	930b      	str	r3, [sp, #44]	; 0x2c
 801e8c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	dc03      	bgt.n	801e8d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e8cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	f340 8250 	ble.w	801ed74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801e8d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e8d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e8da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e8de:	1e48      	subs	r0, r1, #1
 801e8e0:	1e55      	subs	r5, r2, #1
 801e8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	f340 80ee 	ble.w	801eac6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801e8ea:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801e8ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e8ee:	1436      	asrs	r6, r6, #16
 801e8f0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e8f4:	d406      	bmi.n	801e904 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8f6:	4286      	cmp	r6, r0
 801e8f8:	da04      	bge.n	801e904 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	db02      	blt.n	801e904 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8fe:	42ab      	cmp	r3, r5
 801e900:	f2c0 80e2 	blt.w	801eac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e904:	3601      	adds	r6, #1
 801e906:	f100 80cf 	bmi.w	801eaa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e90a:	42b1      	cmp	r1, r6
 801e90c:	f2c0 80cc 	blt.w	801eaa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e910:	3301      	adds	r3, #1
 801e912:	f100 80c9 	bmi.w	801eaa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e916:	429a      	cmp	r2, r3
 801e918:	f2c0 80c6 	blt.w	801eaa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e91c:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801e920:	f1bb 0f00 	cmp.w	fp, #0
 801e924:	f340 80f1 	ble.w	801eb0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801e928:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e92a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e92c:	9824      	ldr	r0, [sp, #144]	; 0x90
 801e92e:	141d      	asrs	r5, r3, #16
 801e930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e932:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e936:	68c7      	ldr	r7, [r0, #12]
 801e938:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e93a:	1418      	asrs	r0, r3, #16
 801e93c:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801e940:	6892      	ldr	r2, [r2, #8]
 801e942:	f100 8137 	bmi.w	801ebb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e946:	f102 3cff 	add.w	ip, r2, #4294967295
 801e94a:	4560      	cmp	r0, ip
 801e94c:	f280 8132 	bge.w	801ebb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e950:	2d00      	cmp	r5, #0
 801e952:	f2c0 812f 	blt.w	801ebb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e956:	f107 3cff 	add.w	ip, r7, #4294967295
 801e95a:	4565      	cmp	r5, ip
 801e95c:	f280 812a 	bge.w	801ebb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e960:	b212      	sxth	r2, r2
 801e962:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e964:	fb05 0002 	mla	r0, r5, r2, r0
 801e968:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e96a:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e96e:	4405      	add	r5, r0
 801e970:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e974:	eb04 0e0c 	add.w	lr, r4, ip
 801e978:	f1b8 0f00 	cmp.w	r8, #0
 801e97c:	f000 810c 	beq.w	801eb98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801e980:	786f      	ldrb	r7, [r5, #1]
 801e982:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e986:	4427      	add	r7, r4
 801e988:	2900      	cmp	r1, #0
 801e98a:	f000 810d 	beq.w	801eba8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801e98e:	18a8      	adds	r0, r5, r2
 801e990:	5caa      	ldrb	r2, [r5, r2]
 801e992:	7840      	ldrb	r0, [r0, #1]
 801e994:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e998:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e99c:	4422      	add	r2, r4
 801e99e:	4420      	add	r0, r4
 801e9a0:	fa1f f388 	uxth.w	r3, r8
 801e9a4:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801e9a8:	b289      	uxth	r1, r1
 801e9aa:	f897 c000 	ldrb.w	ip, [r7]
 801e9ae:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801e9b2:	fb03 f901 	mul.w	r9, r3, r1
 801e9b6:	011b      	lsls	r3, r3, #4
 801e9b8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e9bc:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801e9c0:	eba3 0309 	sub.w	r3, r3, r9
 801e9c4:	b289      	uxth	r1, r1
 801e9c6:	b29b      	uxth	r3, r3
 801e9c8:	eba8 0801 	sub.w	r8, r8, r1
 801e9cc:	fb03 fc0c 	mul.w	ip, r3, ip
 801e9d0:	fa1f f888 	uxth.w	r8, r8
 801e9d4:	930f      	str	r3, [sp, #60]	; 0x3c
 801e9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e9d8:	fb08 cc0a 	mla	ip, r8, sl, ip
 801e9dc:	f892 a000 	ldrb.w	sl, [r2]
 801e9e0:	fb01 cc0a 	mla	ip, r1, sl, ip
 801e9e4:	f890 a000 	ldrb.w	sl, [r0]
 801e9e8:	fb09 cc0a 	mla	ip, r9, sl, ip
 801e9ec:	f896 a000 	ldrb.w	sl, [r6]
 801e9f0:	fb1a fa03 	smulbb	sl, sl, r3
 801e9f4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e9f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e9fa:	fb0c ac05 	mla	ip, ip, r5, sl
 801e9fe:	fa1f fc8c 	uxth.w	ip, ip
 801ea02:	f10c 0a01 	add.w	sl, ip, #1
 801ea06:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801ea0a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ea0e:	f886 a000 	strb.w	sl, [r6]
 801ea12:	f897 c001 	ldrb.w	ip, [r7, #1]
 801ea16:	f89e a001 	ldrb.w	sl, [lr, #1]
 801ea1a:	fb03 fc0c 	mul.w	ip, r3, ip
 801ea1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea20:	fb08 cc0a 	mla	ip, r8, sl, ip
 801ea24:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ea28:	fb01 cc0a 	mla	ip, r1, sl, ip
 801ea2c:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ea30:	fb09 cc0a 	mla	ip, r9, sl, ip
 801ea34:	f896 a001 	ldrb.w	sl, [r6, #1]
 801ea38:	fb1a fa03 	smulbb	sl, sl, r3
 801ea3c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ea40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ea42:	fb0c ac05 	mla	ip, ip, r5, sl
 801ea46:	fa1f fc8c 	uxth.w	ip, ip
 801ea4a:	f10c 0a01 	add.w	sl, ip, #1
 801ea4e:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801ea52:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ea56:	f886 c001 	strb.w	ip, [r6, #1]
 801ea5a:	78bf      	ldrb	r7, [r7, #2]
 801ea5c:	f89e c002 	ldrb.w	ip, [lr, #2]
 801ea60:	437b      	muls	r3, r7
 801ea62:	fb08 330c 	mla	r3, r8, ip, r3
 801ea66:	f892 c002 	ldrb.w	ip, [r2, #2]
 801ea6a:	7882      	ldrb	r2, [r0, #2]
 801ea6c:	fb01 310c 	mla	r1, r1, ip, r3
 801ea70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea72:	fb09 1902 	mla	r9, r9, r2, r1
 801ea76:	78b1      	ldrb	r1, [r6, #2]
 801ea78:	fb11 f103 	smulbb	r1, r1, r3
 801ea7c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ea80:	fb09 1505 	mla	r5, r9, r5, r1
 801ea84:	b2ad      	uxth	r5, r5
 801ea86:	1c6b      	adds	r3, r5, #1
 801ea88:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ea8c:	122d      	asrs	r5, r5, #8
 801ea8e:	70b5      	strb	r5, [r6, #2]
 801ea90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ea92:	3603      	adds	r6, #3
 801ea94:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ea96:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ea9a:	4413      	add	r3, r2
 801ea9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ea9e:	931d      	str	r3, [sp, #116]	; 0x74
 801eaa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801eaa2:	4413      	add	r3, r2
 801eaa4:	931e      	str	r3, [sp, #120]	; 0x78
 801eaa6:	e73b      	b.n	801e920 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801eaa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801eaaa:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801eaac:	4433      	add	r3, r6
 801eaae:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801eab0:	931d      	str	r3, [sp, #116]	; 0x74
 801eab2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801eab4:	4433      	add	r3, r6
 801eab6:	931e      	str	r3, [sp, #120]	; 0x78
 801eab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eaba:	3b01      	subs	r3, #1
 801eabc:	9309      	str	r3, [sp, #36]	; 0x24
 801eabe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eac0:	3303      	adds	r3, #3
 801eac2:	930a      	str	r3, [sp, #40]	; 0x28
 801eac4:	e70d      	b.n	801e8e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801eac6:	d028      	beq.n	801eb1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801eac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eaca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801eacc:	3b01      	subs	r3, #1
 801eace:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801ead0:	fb00 5003 	mla	r0, r0, r3, r5
 801ead4:	1400      	asrs	r0, r0, #16
 801ead6:	f53f af21 	bmi.w	801e91c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eada:	3901      	subs	r1, #1
 801eadc:	4288      	cmp	r0, r1
 801eade:	f6bf af1d 	bge.w	801e91c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eae2:	9920      	ldr	r1, [sp, #128]	; 0x80
 801eae4:	981e      	ldr	r0, [sp, #120]	; 0x78
 801eae6:	fb01 0303 	mla	r3, r1, r3, r0
 801eaea:	141b      	asrs	r3, r3, #16
 801eaec:	f53f af16 	bmi.w	801e91c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eaf0:	3a01      	subs	r2, #1
 801eaf2:	4293      	cmp	r3, r2
 801eaf4:	f6bf af12 	bge.w	801e91c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eafa:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801eafe:	1cdf      	adds	r7, r3, #3
 801eb00:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801eb04:	f1b9 0f00 	cmp.w	r9, #0
 801eb08:	dc73      	bgt.n	801ebf2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801eb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb16:	441a      	add	r2, r3
 801eb18:	920a      	str	r2, [sp, #40]	; 0x28
 801eb1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	f340 8129 	ble.w	801ed74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801eb22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eb26:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eb28:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb30:	eef0 6a62 	vmov.f32	s13, s5
 801eb34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eb38:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb40:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801eb44:	eef0 6a43 	vmov.f32	s13, s6
 801eb48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb4c:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801eb50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb54:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb58:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb68:	ee12 2a90 	vmov	r2, s5
 801eb6c:	eef0 2a47 	vmov.f32	s5, s14
 801eb70:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb74:	ee13 2a10 	vmov	r2, s6
 801eb78:	931f      	str	r3, [sp, #124]	; 0x7c
 801eb7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eb7c:	eeb0 3a67 	vmov.f32	s6, s15
 801eb80:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb84:	9320      	str	r3, [sp, #128]	; 0x80
 801eb86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eb8a:	3b01      	subs	r3, #1
 801eb8c:	930d      	str	r3, [sp, #52]	; 0x34
 801eb8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eb90:	bf08      	it	eq
 801eb92:	4613      	moveq	r3, r2
 801eb94:	9309      	str	r3, [sp, #36]	; 0x24
 801eb96:	e696      	b.n	801e8c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801eb98:	b149      	cbz	r1, 801ebae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801eb9a:	5caa      	ldrb	r2, [r5, r2]
 801eb9c:	4670      	mov	r0, lr
 801eb9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eba2:	4422      	add	r2, r4
 801eba4:	4677      	mov	r7, lr
 801eba6:	e6fb      	b.n	801e9a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801eba8:	4670      	mov	r0, lr
 801ebaa:	4672      	mov	r2, lr
 801ebac:	e6f8      	b.n	801e9a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ebae:	4670      	mov	r0, lr
 801ebb0:	4672      	mov	r2, lr
 801ebb2:	e7f7      	b.n	801eba4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801ebb4:	f110 0c01 	adds.w	ip, r0, #1
 801ebb8:	f53f af6a 	bmi.w	801ea90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ebbc:	4562      	cmp	r2, ip
 801ebbe:	f6ff af67 	blt.w	801ea90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ebc2:	f115 0c01 	adds.w	ip, r5, #1
 801ebc6:	f53f af63 	bmi.w	801ea90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ebca:	4567      	cmp	r7, ip
 801ebcc:	f6ff af60 	blt.w	801ea90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ebd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ebd2:	b23f      	sxth	r7, r7
 801ebd4:	b212      	sxth	r2, r2
 801ebd6:	9002      	str	r0, [sp, #8]
 801ebd8:	9701      	str	r7, [sp, #4]
 801ebda:	9200      	str	r2, [sp, #0]
 801ebdc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ebde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ebe0:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801ebe4:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801ebe8:	4623      	mov	r3, r4
 801ebea:	4631      	mov	r1, r6
 801ebec:	f7ff fd69 	bl	801e6c2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801ebf0:	e74e      	b.n	801ea90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ebf2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ebf4:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ebf6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ebfa:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801ebfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ebfe:	1400      	asrs	r0, r0, #16
 801ec00:	142d      	asrs	r5, r5, #16
 801ec02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ec04:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ec08:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ec0c:	fb02 5000 	mla	r0, r2, r0, r5
 801ec10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ec12:	f815 e000 	ldrb.w	lr, [r5, r0]
 801ec16:	eb05 0c00 	add.w	ip, r5, r0
 801ec1a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ec1e:	eb04 060e 	add.w	r6, r4, lr
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	f000 8097 	beq.w	801ed56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801ec28:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ec2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec30:	4425      	add	r5, r4
 801ec32:	2900      	cmp	r1, #0
 801ec34:	f000 8098 	beq.w	801ed68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801ec38:	eb0c 0002 	add.w	r0, ip, r2
 801ec3c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ec40:	7840      	ldrb	r0, [r0, #1]
 801ec42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ec4a:	4422      	add	r2, r4
 801ec4c:	4420      	add	r0, r4
 801ec4e:	b29b      	uxth	r3, r3
 801ec50:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ec54:	b289      	uxth	r1, r1
 801ec56:	f895 e000 	ldrb.w	lr, [r5]
 801ec5a:	3703      	adds	r7, #3
 801ec5c:	f109 39ff 	add.w	r9, r9, #4294967295
 801ec60:	fb03 f801 	mul.w	r8, r3, r1
 801ec64:	011b      	lsls	r3, r3, #4
 801ec66:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801ec6a:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ec6e:	eba3 0308 	sub.w	r3, r3, r8
 801ec72:	b289      	uxth	r1, r1
 801ec74:	b29b      	uxth	r3, r3
 801ec76:	ebac 0c01 	sub.w	ip, ip, r1
 801ec7a:	fb03 fe0e 	mul.w	lr, r3, lr
 801ec7e:	fa1f fc8c 	uxth.w	ip, ip
 801ec82:	930f      	str	r3, [sp, #60]	; 0x3c
 801ec84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec86:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ec8a:	f892 b000 	ldrb.w	fp, [r2]
 801ec8e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ec92:	f890 b000 	ldrb.w	fp, [r0]
 801ec96:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ec9a:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801ec9e:	fb1b fb03 	smulbb	fp, fp, r3
 801eca2:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801eca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eca8:	fb0e be0a 	mla	lr, lr, sl, fp
 801ecac:	fa1f fe8e 	uxth.w	lr, lr
 801ecb0:	f10e 0b01 	add.w	fp, lr, #1
 801ecb4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ecb8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ecbc:	f807 ec06 	strb.w	lr, [r7, #-6]
 801ecc0:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ecc4:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ecc8:	fb03 fe0e 	mul.w	lr, r3, lr
 801eccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ecce:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ecd2:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ecd6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ecda:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ecde:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ece2:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801ece6:	fb1b fb03 	smulbb	fp, fp, r3
 801ecea:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ecee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ecf0:	fb0e be0a 	mla	lr, lr, sl, fp
 801ecf4:	fa1f fe8e 	uxth.w	lr, lr
 801ecf8:	f10e 0b01 	add.w	fp, lr, #1
 801ecfc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ed00:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ed04:	f807 ec05 	strb.w	lr, [r7, #-5]
 801ed08:	78ad      	ldrb	r5, [r5, #2]
 801ed0a:	78b6      	ldrb	r6, [r6, #2]
 801ed0c:	436b      	muls	r3, r5
 801ed0e:	7895      	ldrb	r5, [r2, #2]
 801ed10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ed12:	fb0c 3306 	mla	r3, ip, r6, r3
 801ed16:	fb01 3305 	mla	r3, r1, r5, r3
 801ed1a:	7885      	ldrb	r5, [r0, #2]
 801ed1c:	fb08 3805 	mla	r8, r8, r5, r3
 801ed20:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801ed24:	fb13 f302 	smulbb	r3, r3, r2
 801ed28:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ed2c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ed2e:	fb08 380a 	mla	r8, r8, sl, r3
 801ed32:	fa1f f888 	uxth.w	r8, r8
 801ed36:	f108 0301 	add.w	r3, r8, #1
 801ed3a:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801ed3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ed40:	4413      	add	r3, r2
 801ed42:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ed44:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ed48:	931d      	str	r3, [sp, #116]	; 0x74
 801ed4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ed4c:	f807 8c04 	strb.w	r8, [r7, #-4]
 801ed50:	4413      	add	r3, r2
 801ed52:	931e      	str	r3, [sp, #120]	; 0x78
 801ed54:	e6d6      	b.n	801eb04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ed56:	b151      	cbz	r1, 801ed6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ed58:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ed5c:	4630      	mov	r0, r6
 801ed5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed62:	4422      	add	r2, r4
 801ed64:	4635      	mov	r5, r6
 801ed66:	e772      	b.n	801ec4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ed68:	4630      	mov	r0, r6
 801ed6a:	4632      	mov	r2, r6
 801ed6c:	e76f      	b.n	801ec4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ed6e:	4630      	mov	r0, r6
 801ed70:	4632      	mov	r2, r6
 801ed72:	e7f7      	b.n	801ed64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ed74:	b013      	add	sp, #76	; 0x4c
 801ed76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed7a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801ed7a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ed7e:	784c      	ldrb	r4, [r1, #1]
 801ed80:	f891 a002 	ldrb.w	sl, [r1, #2]
 801ed84:	0224      	lsls	r4, r4, #8
 801ed86:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801ed8a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801ed8e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801ed92:	f891 a000 	ldrb.w	sl, [r1]
 801ed96:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801ed9a:	ea44 040a 	orr.w	r4, r4, sl
 801ed9e:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801eda2:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801eda6:	9401      	str	r4, [sp, #4]
 801eda8:	fb05 c70e 	mla	r7, r5, lr, ip
 801edac:	2d00      	cmp	r5, #0
 801edae:	eb02 0807 	add.w	r8, r2, r7
 801edb2:	db72      	blt.n	801ee9a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801edb4:	45a9      	cmp	r9, r5
 801edb6:	dd70      	ble.n	801ee9a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801edb8:	f1bc 0f00 	cmp.w	ip, #0
 801edbc:	db6b      	blt.n	801ee96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801edbe:	45e6      	cmp	lr, ip
 801edc0:	dd69      	ble.n	801ee96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801edc2:	5dd7      	ldrb	r7, [r2, r7]
 801edc4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801edc8:	441f      	add	r7, r3
 801edca:	f11c 0201 	adds.w	r2, ip, #1
 801edce:	d467      	bmi.n	801eea0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801edd0:	4596      	cmp	lr, r2
 801edd2:	dd65      	ble.n	801eea0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801edd4:	2800      	cmp	r0, #0
 801edd6:	d063      	beq.n	801eea0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801edd8:	f898 4001 	ldrb.w	r4, [r8, #1]
 801eddc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ede0:	441c      	add	r4, r3
 801ede2:	3501      	adds	r5, #1
 801ede4:	d460      	bmi.n	801eea8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ede6:	45a9      	cmp	r9, r5
 801ede8:	dd5e      	ble.n	801eea8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801edea:	2e00      	cmp	r6, #0
 801edec:	d05c      	beq.n	801eea8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801edee:	f1bc 0f00 	cmp.w	ip, #0
 801edf2:	db57      	blt.n	801eea4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801edf4:	45e6      	cmp	lr, ip
 801edf6:	dd55      	ble.n	801eea4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801edf8:	f818 500e 	ldrb.w	r5, [r8, lr]
 801edfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ee00:	441d      	add	r5, r3
 801ee02:	f11c 0201 	adds.w	r2, ip, #1
 801ee06:	d452      	bmi.n	801eeae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801ee08:	4596      	cmp	lr, r2
 801ee0a:	dd50      	ble.n	801eeae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801ee0c:	2800      	cmp	r0, #0
 801ee0e:	d04e      	beq.n	801eeae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801ee10:	44c6      	add	lr, r8
 801ee12:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ee16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ee1a:	4413      	add	r3, r2
 801ee1c:	b280      	uxth	r0, r0
 801ee1e:	f897 8000 	ldrb.w	r8, [r7]
 801ee22:	b2b2      	uxth	r2, r6
 801ee24:	fb00 f602 	mul.w	r6, r0, r2
 801ee28:	0100      	lsls	r0, r0, #4
 801ee2a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801ee2e:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801ee32:	1b80      	subs	r0, r0, r6
 801ee34:	fa1f fc82 	uxth.w	ip, r2
 801ee38:	b282      	uxth	r2, r0
 801ee3a:	7820      	ldrb	r0, [r4, #0]
 801ee3c:	ebae 0e0c 	sub.w	lr, lr, ip
 801ee40:	4350      	muls	r0, r2
 801ee42:	fa1f fe8e 	uxth.w	lr, lr
 801ee46:	fb0e 0808 	mla	r8, lr, r8, r0
 801ee4a:	7828      	ldrb	r0, [r5, #0]
 801ee4c:	fb0c 8800 	mla	r8, ip, r0, r8
 801ee50:	7818      	ldrb	r0, [r3, #0]
 801ee52:	fb06 8000 	mla	r0, r6, r0, r8
 801ee56:	1200      	asrs	r0, r0, #8
 801ee58:	7008      	strb	r0, [r1, #0]
 801ee5a:	7860      	ldrb	r0, [r4, #1]
 801ee5c:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ee60:	4350      	muls	r0, r2
 801ee62:	fb0e 0808 	mla	r8, lr, r8, r0
 801ee66:	7868      	ldrb	r0, [r5, #1]
 801ee68:	fb0c 8800 	mla	r8, ip, r0, r8
 801ee6c:	7858      	ldrb	r0, [r3, #1]
 801ee6e:	fb06 8000 	mla	r0, r6, r0, r8
 801ee72:	1200      	asrs	r0, r0, #8
 801ee74:	7048      	strb	r0, [r1, #1]
 801ee76:	78a0      	ldrb	r0, [r4, #2]
 801ee78:	78bf      	ldrb	r7, [r7, #2]
 801ee7a:	4350      	muls	r0, r2
 801ee7c:	78aa      	ldrb	r2, [r5, #2]
 801ee7e:	fb0e 0007 	mla	r0, lr, r7, r0
 801ee82:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ee86:	789a      	ldrb	r2, [r3, #2]
 801ee88:	fb06 c202 	mla	r2, r6, r2, ip
 801ee8c:	1212      	asrs	r2, r2, #8
 801ee8e:	708a      	strb	r2, [r1, #2]
 801ee90:	b002      	add	sp, #8
 801ee92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee96:	af01      	add	r7, sp, #4
 801ee98:	e797      	b.n	801edca <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801ee9a:	ac01      	add	r4, sp, #4
 801ee9c:	4627      	mov	r7, r4
 801ee9e:	e7a0      	b.n	801ede2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801eea0:	ac01      	add	r4, sp, #4
 801eea2:	e79e      	b.n	801ede2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801eea4:	ad01      	add	r5, sp, #4
 801eea6:	e7ac      	b.n	801ee02 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801eea8:	ab01      	add	r3, sp, #4
 801eeaa:	461d      	mov	r5, r3
 801eeac:	e7b6      	b.n	801ee1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801eeae:	ab01      	add	r3, sp, #4
 801eeb0:	e7b4      	b.n	801ee1c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801eeb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eeb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeb6:	b08d      	sub	sp, #52	; 0x34
 801eeb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eebc:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801eec0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801eec2:	900b      	str	r0, [sp, #44]	; 0x2c
 801eec4:	9306      	str	r3, [sp, #24]
 801eec6:	6850      	ldr	r0, [r2, #4]
 801eec8:	6812      	ldr	r2, [r2, #0]
 801eeca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801eecc:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801eed0:	fb00 1303 	mla	r3, r0, r3, r1
 801eed4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eed8:	18d3      	adds	r3, r2, r3
 801eeda:	9307      	str	r3, [sp, #28]
 801eedc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801eede:	681b      	ldr	r3, [r3, #0]
 801eee0:	9308      	str	r3, [sp, #32]
 801eee2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801eee4:	685d      	ldr	r5, [r3, #4]
 801eee6:	3504      	adds	r5, #4
 801eee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	dc03      	bgt.n	801eef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801eeee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eef0:	2b00      	cmp	r3, #0
 801eef2:	f340 81e6 	ble.w	801f2c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801eef6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801eef8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eefc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ef00:	1e48      	subs	r0, r1, #1
 801ef02:	1e56      	subs	r6, r2, #1
 801ef04:	9b06      	ldr	r3, [sp, #24]
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	f340 80bd 	ble.w	801f086 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ef0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ef0e:	1427      	asrs	r7, r4, #16
 801ef10:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ef14:	d406      	bmi.n	801ef24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ef16:	4287      	cmp	r7, r0
 801ef18:	da04      	bge.n	801ef24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	db02      	blt.n	801ef24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ef1e:	42b3      	cmp	r3, r6
 801ef20:	f2c0 80b2 	blt.w	801f088 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801ef24:	3701      	adds	r7, #1
 801ef26:	f100 80a1 	bmi.w	801f06c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ef2a:	42b9      	cmp	r1, r7
 801ef2c:	f2c0 809e 	blt.w	801f06c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ef30:	3301      	adds	r3, #1
 801ef32:	f100 809b 	bmi.w	801f06c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ef36:	429a      	cmp	r2, r3
 801ef38:	f2c0 8098 	blt.w	801f06c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ef3c:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801ef40:	f1bb 0f00 	cmp.w	fp, #0
 801ef44:	f340 80bf 	ble.w	801f0c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ef48:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ef4a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ef4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ef4e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ef52:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801ef56:	1420      	asrs	r0, r4, #16
 801ef58:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ef5a:	ea4f 4723 	mov.w	r7, r3, asr #16
 801ef5e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ef62:	6892      	ldr	r2, [r2, #8]
 801ef64:	f100 8103 	bmi.w	801f16e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ef68:	f102 3eff 	add.w	lr, r2, #4294967295
 801ef6c:	4570      	cmp	r0, lr
 801ef6e:	f280 80fe 	bge.w	801f16e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ef72:	2f00      	cmp	r7, #0
 801ef74:	f2c0 80fb 	blt.w	801f16e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ef78:	f10c 3eff 	add.w	lr, ip, #4294967295
 801ef7c:	4577      	cmp	r7, lr
 801ef7e:	f280 80f6 	bge.w	801f16e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ef82:	b212      	sxth	r2, r2
 801ef84:	fb07 0002 	mla	r0, r7, r2, r0
 801ef88:	9f08      	ldr	r7, [sp, #32]
 801ef8a:	f817 8000 	ldrb.w	r8, [r7, r0]
 801ef8e:	eb07 0e00 	add.w	lr, r7, r0
 801ef92:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ef96:	eb05 0c08 	add.w	ip, r5, r8
 801ef9a:	2b00      	cmp	r3, #0
 801ef9c:	f000 80d8 	beq.w	801f150 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801efa0:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801efa4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801efa8:	442f      	add	r7, r5
 801efaa:	2900      	cmp	r1, #0
 801efac:	f000 80d9 	beq.w	801f162 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801efb0:	eb0e 0002 	add.w	r0, lr, r2
 801efb4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801efb8:	7840      	ldrb	r0, [r0, #1]
 801efba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801efbe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801efc2:	442a      	add	r2, r5
 801efc4:	4428      	add	r0, r5
 801efc6:	b29b      	uxth	r3, r3
 801efc8:	f815 a008 	ldrb.w	sl, [r5, r8]
 801efcc:	b289      	uxth	r1, r1
 801efce:	f897 8000 	ldrb.w	r8, [r7]
 801efd2:	fb03 f901 	mul.w	r9, r3, r1
 801efd6:	011b      	lsls	r3, r3, #4
 801efd8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801efdc:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801efe0:	eba3 0309 	sub.w	r3, r3, r9
 801efe4:	b289      	uxth	r1, r1
 801efe6:	b29b      	uxth	r3, r3
 801efe8:	ebae 0e01 	sub.w	lr, lr, r1
 801efec:	fb03 f808 	mul.w	r8, r3, r8
 801eff0:	fa1f fe8e 	uxth.w	lr, lr
 801eff4:	fb0e 880a 	mla	r8, lr, sl, r8
 801eff8:	f892 a000 	ldrb.w	sl, [r2]
 801effc:	fb01 880a 	mla	r8, r1, sl, r8
 801f000:	f890 a000 	ldrb.w	sl, [r0]
 801f004:	fb09 880a 	mla	r8, r9, sl, r8
 801f008:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f00c:	f886 8000 	strb.w	r8, [r6]
 801f010:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f014:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f018:	fb03 f808 	mul.w	r8, r3, r8
 801f01c:	fb0e 880a 	mla	r8, lr, sl, r8
 801f020:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f024:	fb01 880a 	mla	r8, r1, sl, r8
 801f028:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f02c:	fb09 880a 	mla	r8, r9, sl, r8
 801f030:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f034:	f886 8001 	strb.w	r8, [r6, #1]
 801f038:	78bf      	ldrb	r7, [r7, #2]
 801f03a:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f03e:	437b      	muls	r3, r7
 801f040:	7892      	ldrb	r2, [r2, #2]
 801f042:	fb0e 330c 	mla	r3, lr, ip, r3
 801f046:	fb01 3102 	mla	r1, r1, r2, r3
 801f04a:	7882      	ldrb	r2, [r0, #2]
 801f04c:	fb09 1902 	mla	r9, r9, r2, r1
 801f050:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f054:	f886 9002 	strb.w	r9, [r6, #2]
 801f058:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f05a:	3603      	adds	r6, #3
 801f05c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f05e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f062:	441c      	add	r4, r3
 801f064:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f066:	4413      	add	r3, r2
 801f068:	9318      	str	r3, [sp, #96]	; 0x60
 801f06a:	e769      	b.n	801ef40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f06c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f06e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801f070:	441c      	add	r4, r3
 801f072:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f074:	443b      	add	r3, r7
 801f076:	9318      	str	r3, [sp, #96]	; 0x60
 801f078:	9b06      	ldr	r3, [sp, #24]
 801f07a:	3b01      	subs	r3, #1
 801f07c:	9306      	str	r3, [sp, #24]
 801f07e:	9b07      	ldr	r3, [sp, #28]
 801f080:	3303      	adds	r3, #3
 801f082:	9307      	str	r3, [sp, #28]
 801f084:	e73e      	b.n	801ef04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f086:	d026      	beq.n	801f0d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801f088:	9b06      	ldr	r3, [sp, #24]
 801f08a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f08c:	3b01      	subs	r3, #1
 801f08e:	fb00 4003 	mla	r0, r0, r3, r4
 801f092:	1400      	asrs	r0, r0, #16
 801f094:	f53f af52 	bmi.w	801ef3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f098:	3901      	subs	r1, #1
 801f09a:	4288      	cmp	r0, r1
 801f09c:	f6bf af4e 	bge.w	801ef3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f0a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f0a2:	9818      	ldr	r0, [sp, #96]	; 0x60
 801f0a4:	fb01 0303 	mla	r3, r1, r3, r0
 801f0a8:	141b      	asrs	r3, r3, #16
 801f0aa:	f53f af47 	bmi.w	801ef3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f0ae:	3a01      	subs	r2, #1
 801f0b0:	4293      	cmp	r3, r2
 801f0b2:	f6bf af43 	bge.w	801ef3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f0b6:	9b07      	ldr	r3, [sp, #28]
 801f0b8:	f8dd a018 	ldr.w	sl, [sp, #24]
 801f0bc:	f103 0803 	add.w	r8, r3, #3
 801f0c0:	f1ba 0f00 	cmp.w	sl, #0
 801f0c4:	dc71      	bgt.n	801f1aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801f0c6:	9b06      	ldr	r3, [sp, #24]
 801f0c8:	9a07      	ldr	r2, [sp, #28]
 801f0ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f0ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0d2:	441a      	add	r2, r3
 801f0d4:	9207      	str	r2, [sp, #28]
 801f0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	f340 80f2 	ble.w	801f2c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801f0de:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f0e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f0e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f0e8:	eeb0 6a62 	vmov.f32	s12, s5
 801f0ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f0f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f0f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0f8:	ee16 4a10 	vmov	r4, s12
 801f0fc:	eeb0 6a43 	vmov.f32	s12, s6
 801f100:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f104:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801f108:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f10c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f110:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f114:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f118:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f11c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f120:	ee12 2a90 	vmov	r2, s5
 801f124:	eef0 2a47 	vmov.f32	s5, s14
 801f128:	fb92 f3f3 	sdiv	r3, r2, r3
 801f12c:	ee13 2a10 	vmov	r2, s6
 801f130:	9319      	str	r3, [sp, #100]	; 0x64
 801f132:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f134:	eeb0 3a67 	vmov.f32	s6, s15
 801f138:	fb92 f3f3 	sdiv	r3, r2, r3
 801f13c:	931a      	str	r3, [sp, #104]	; 0x68
 801f13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f142:	3b01      	subs	r3, #1
 801f144:	9309      	str	r3, [sp, #36]	; 0x24
 801f146:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f148:	bf08      	it	eq
 801f14a:	4613      	moveq	r3, r2
 801f14c:	9306      	str	r3, [sp, #24]
 801f14e:	e6cb      	b.n	801eee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f150:	b151      	cbz	r1, 801f168 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f152:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f156:	4660      	mov	r0, ip
 801f158:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f15c:	442a      	add	r2, r5
 801f15e:	4667      	mov	r7, ip
 801f160:	e731      	b.n	801efc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f162:	4660      	mov	r0, ip
 801f164:	4662      	mov	r2, ip
 801f166:	e72e      	b.n	801efc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f168:	4660      	mov	r0, ip
 801f16a:	4662      	mov	r2, ip
 801f16c:	e7f7      	b.n	801f15e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f16e:	f110 0e01 	adds.w	lr, r0, #1
 801f172:	f53f af71 	bmi.w	801f058 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f176:	4572      	cmp	r2, lr
 801f178:	f6ff af6e 	blt.w	801f058 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f17c:	f117 0e01 	adds.w	lr, r7, #1
 801f180:	f53f af6a 	bmi.w	801f058 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f184:	45f4      	cmp	ip, lr
 801f186:	f6ff af67 	blt.w	801f058 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f18a:	b212      	sxth	r2, r2
 801f18c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f190:	fa0f f38c 	sxth.w	r3, ip
 801f194:	9200      	str	r2, [sp, #0]
 801f196:	4631      	mov	r1, r6
 801f198:	9a08      	ldr	r2, [sp, #32]
 801f19a:	9301      	str	r3, [sp, #4]
 801f19c:	462b      	mov	r3, r5
 801f19e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801f1a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f1a4:	f7ff fde9 	bl	801ed7a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f1a8:	e756      	b.n	801f058 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f1aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f1ac:	1426      	asrs	r6, r4, #16
 801f1ae:	9818      	ldr	r0, [sp, #96]	; 0x60
 801f1b0:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801f1b4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f1b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f1ba:	1400      	asrs	r0, r0, #16
 801f1bc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f1c0:	fb02 6000 	mla	r0, r2, r0, r6
 801f1c4:	9e08      	ldr	r6, [sp, #32]
 801f1c6:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f1ca:	eb06 0c00 	add.w	ip, r6, r0
 801f1ce:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f1d2:	eb05 070e 	add.w	r7, r5, lr
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d064      	beq.n	801f2a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801f1da:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801f1de:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f1e2:	442e      	add	r6, r5
 801f1e4:	2900      	cmp	r1, #0
 801f1e6:	d066      	beq.n	801f2b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801f1e8:	eb0c 0002 	add.w	r0, ip, r2
 801f1ec:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f1f0:	7840      	ldrb	r0, [r0, #1]
 801f1f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f1f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f1fa:	442a      	add	r2, r5
 801f1fc:	4428      	add	r0, r5
 801f1fe:	b29b      	uxth	r3, r3
 801f200:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801f204:	b289      	uxth	r1, r1
 801f206:	f896 e000 	ldrb.w	lr, [r6]
 801f20a:	f108 0803 	add.w	r8, r8, #3
 801f20e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f212:	fb03 f901 	mul.w	r9, r3, r1
 801f216:	011b      	lsls	r3, r3, #4
 801f218:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f21c:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f220:	eba3 0309 	sub.w	r3, r3, r9
 801f224:	b289      	uxth	r1, r1
 801f226:	b29b      	uxth	r3, r3
 801f228:	ebac 0c01 	sub.w	ip, ip, r1
 801f22c:	fb03 fe0e 	mul.w	lr, r3, lr
 801f230:	fa1f fc8c 	uxth.w	ip, ip
 801f234:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f238:	f892 b000 	ldrb.w	fp, [r2]
 801f23c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f240:	f890 b000 	ldrb.w	fp, [r0]
 801f244:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f248:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f24c:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f250:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f254:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f258:	fb03 fe0e 	mul.w	lr, r3, lr
 801f25c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f260:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f264:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f268:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f26c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f270:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f274:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f278:	78b6      	ldrb	r6, [r6, #2]
 801f27a:	78bf      	ldrb	r7, [r7, #2]
 801f27c:	4373      	muls	r3, r6
 801f27e:	7896      	ldrb	r6, [r2, #2]
 801f280:	7882      	ldrb	r2, [r0, #2]
 801f282:	fb0c 3307 	mla	r3, ip, r7, r3
 801f286:	fb01 3306 	mla	r3, r1, r6, r3
 801f28a:	fb09 3902 	mla	r9, r9, r2, r3
 801f28e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f290:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f292:	441c      	add	r4, r3
 801f294:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f296:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f29a:	4413      	add	r3, r2
 801f29c:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f2a0:	9318      	str	r3, [sp, #96]	; 0x60
 801f2a2:	e70d      	b.n	801f0c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801f2a4:	b151      	cbz	r1, 801f2bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801f2a6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f2aa:	4638      	mov	r0, r7
 801f2ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f2b0:	442a      	add	r2, r5
 801f2b2:	463e      	mov	r6, r7
 801f2b4:	e7a3      	b.n	801f1fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f2b6:	4638      	mov	r0, r7
 801f2b8:	463a      	mov	r2, r7
 801f2ba:	e7a0      	b.n	801f1fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f2bc:	4638      	mov	r0, r7
 801f2be:	463a      	mov	r2, r7
 801f2c0:	e7f7      	b.n	801f2b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801f2c2:	b00d      	add	sp, #52	; 0x34
 801f2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2c8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f2c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2cc:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801f2d0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f2d4:	2d00      	cmp	r5, #0
 801f2d6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f2da:	fb05 700c 	mla	r0, r5, ip, r7
 801f2de:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801f2e2:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801f2e6:	eb02 0800 	add.w	r8, r2, r0
 801f2ea:	f2c0 8118 	blt.w	801f51e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801f2ee:	45a9      	cmp	r9, r5
 801f2f0:	f340 8115 	ble.w	801f51e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801f2f4:	2f00      	cmp	r7, #0
 801f2f6:	f2c0 8110 	blt.w	801f51a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801f2fa:	45bc      	cmp	ip, r7
 801f2fc:	f340 810d 	ble.w	801f51a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801f300:	5c12      	ldrb	r2, [r2, r0]
 801f302:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f306:	1c7a      	adds	r2, r7, #1
 801f308:	f100 810c 	bmi.w	801f524 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801f30c:	4594      	cmp	ip, r2
 801f30e:	f340 8109 	ble.w	801f524 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801f312:	2c00      	cmp	r4, #0
 801f314:	f000 8108 	beq.w	801f528 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801f318:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f31c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f320:	3501      	adds	r5, #1
 801f322:	f100 8105 	bmi.w	801f530 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801f326:	45a9      	cmp	r9, r5
 801f328:	f340 8102 	ble.w	801f530 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801f32c:	f1be 0f00 	cmp.w	lr, #0
 801f330:	f000 8101 	beq.w	801f536 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801f334:	2f00      	cmp	r7, #0
 801f336:	f2c0 80f9 	blt.w	801f52c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801f33a:	45bc      	cmp	ip, r7
 801f33c:	f340 80f6 	ble.w	801f52c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801f340:	f818 200c 	ldrb.w	r2, [r8, ip]
 801f344:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f348:	3701      	adds	r7, #1
 801f34a:	f100 80f7 	bmi.w	801f53c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801f34e:	45bc      	cmp	ip, r7
 801f350:	f340 80f4 	ble.w	801f53c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801f354:	2c00      	cmp	r4, #0
 801f356:	f000 80f3 	beq.w	801f540 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801f35a:	44c4      	add	ip, r8
 801f35c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f360:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f364:	fa1f fc84 	uxth.w	ip, r4
 801f368:	fa1f f48e 	uxth.w	r4, lr
 801f36c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801f370:	fb04 fe0c 	mul.w	lr, r4, ip
 801f374:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f378:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f37c:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801f380:	ebac 070e 	sub.w	r7, ip, lr
 801f384:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f388:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f38c:	b2a4      	uxth	r4, r4
 801f38e:	b2bf      	uxth	r7, r7
 801f390:	1b1b      	subs	r3, r3, r4
 801f392:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f396:	fb07 fc0a 	mul.w	ip, r7, sl
 801f39a:	b29b      	uxth	r3, r3
 801f39c:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f3a0:	9300      	str	r3, [sp, #0]
 801f3a2:	fb04 cc09 	mla	ip, r4, r9, ip
 801f3a6:	fb0e cc08 	mla	ip, lr, r8, ip
 801f3aa:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f3ae:	9301      	str	r3, [sp, #4]
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	f000 80af 	beq.w	801f514 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801f3b6:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f3ba:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f3be:	fb0b fc0c 	mul.w	ip, fp, ip
 801f3c2:	fb0b f606 	mul.w	r6, fp, r6
 801f3c6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f3ca:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f3ce:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f3d2:	44dc      	add	ip, fp
 801f3d4:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801f3d8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f3dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f3e0:	fb0a fb0b 	mul.w	fp, sl, fp
 801f3e4:	fb0a fa00 	mul.w	sl, sl, r0
 801f3e8:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f3ec:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f3f0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801f3f4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f3f8:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f3fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f400:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801f404:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f408:	0a36      	lsrs	r6, r6, #8
 801f40a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f40e:	44dc      	add	ip, fp
 801f410:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f414:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f418:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f41c:	fb09 fb0b 	mul.w	fp, r9, fp
 801f420:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f424:	fb09 f905 	mul.w	r9, r9, r5
 801f428:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801f42c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f430:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801f434:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f438:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f43c:	fb0c fc07 	mul.w	ip, ip, r7
 801f440:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801f444:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801f448:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f44c:	4458      	add	r0, fp
 801f44e:	fb08 f505 	mul.w	r5, r8, r5
 801f452:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f456:	fb08 f802 	mul.w	r8, r8, r2
 801f45a:	0a00      	lsrs	r0, r0, #8
 801f45c:	0a2a      	lsrs	r2, r5, #8
 801f45e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801f462:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f466:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f46a:	4415      	add	r5, r2
 801f46c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f470:	0a2d      	lsrs	r5, r5, #8
 801f472:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f476:	9a00      	ldr	r2, [sp, #0]
 801f478:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f47c:	fb03 cc02 	mla	ip, r3, r2, ip
 801f480:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f484:	9b01      	ldr	r3, [sp, #4]
 801f486:	fb05 c50e 	mla	r5, r5, lr, ip
 801f48a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f48e:	fb00 5004 	mla	r0, r0, r4, r5
 801f492:	0a00      	lsrs	r0, r0, #8
 801f494:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801f498:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801f49c:	4378      	muls	r0, r7
 801f49e:	fb02 0006 	mla	r0, r2, r6, r0
 801f4a2:	fb0e 0e08 	mla	lr, lr, r8, r0
 801f4a6:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801f4aa:	fb04 e000 	mla	r0, r4, r0, lr
 801f4ae:	0a00      	lsrs	r0, r0, #8
 801f4b0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f4b4:	4328      	orrs	r0, r5
 801f4b6:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801f4ba:	b2ad      	uxth	r5, r5
 801f4bc:	b2c4      	uxtb	r4, r0
 801f4be:	436b      	muls	r3, r5
 801f4c0:	fb14 f405 	smulbb	r4, r4, r5
 801f4c4:	1c5a      	adds	r2, r3, #1
 801f4c6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f4ca:	780b      	ldrb	r3, [r1, #0]
 801f4cc:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801f4d0:	b2d2      	uxtb	r2, r2
 801f4d2:	fb03 4302 	mla	r3, r3, r2, r4
 801f4d6:	b29b      	uxth	r3, r3
 801f4d8:	1c5c      	adds	r4, r3, #1
 801f4da:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f4de:	784c      	ldrb	r4, [r1, #1]
 801f4e0:	fb14 f402 	smulbb	r4, r4, r2
 801f4e4:	121b      	asrs	r3, r3, #8
 801f4e6:	700b      	strb	r3, [r1, #0]
 801f4e8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801f4ec:	fb03 4305 	mla	r3, r3, r5, r4
 801f4f0:	b29b      	uxth	r3, r3
 801f4f2:	1c5c      	adds	r4, r3, #1
 801f4f4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f4f8:	0c04      	lsrs	r4, r0, #16
 801f4fa:	7888      	ldrb	r0, [r1, #2]
 801f4fc:	121b      	asrs	r3, r3, #8
 801f4fe:	fb10 f002 	smulbb	r0, r0, r2
 801f502:	704b      	strb	r3, [r1, #1]
 801f504:	fb04 0005 	mla	r0, r4, r5, r0
 801f508:	b280      	uxth	r0, r0
 801f50a:	1c43      	adds	r3, r0, #1
 801f50c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f510:	1200      	asrs	r0, r0, #8
 801f512:	7088      	strb	r0, [r1, #2]
 801f514:	b003      	add	sp, #12
 801f516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f51a:	2600      	movs	r6, #0
 801f51c:	e6f3      	b.n	801f306 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801f51e:	2000      	movs	r0, #0
 801f520:	4606      	mov	r6, r0
 801f522:	e6fd      	b.n	801f320 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f524:	2000      	movs	r0, #0
 801f526:	e6fb      	b.n	801f320 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f528:	4620      	mov	r0, r4
 801f52a:	e6f9      	b.n	801f320 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f52c:	2500      	movs	r5, #0
 801f52e:	e70b      	b.n	801f348 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801f530:	2200      	movs	r2, #0
 801f532:	4615      	mov	r5, r2
 801f534:	e716      	b.n	801f364 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f536:	4672      	mov	r2, lr
 801f538:	4675      	mov	r5, lr
 801f53a:	e713      	b.n	801f364 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f53c:	2200      	movs	r2, #0
 801f53e:	e711      	b.n	801f364 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f540:	4622      	mov	r2, r4
 801f542:	e70f      	b.n	801f364 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801f544 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f548:	b09f      	sub	sp, #124	; 0x7c
 801f54a:	921b      	str	r2, [sp, #108]	; 0x6c
 801f54c:	9309      	str	r3, [sp, #36]	; 0x24
 801f54e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f550:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f554:	901d      	str	r0, [sp, #116]	; 0x74
 801f556:	931c      	str	r3, [sp, #112]	; 0x70
 801f558:	6850      	ldr	r0, [r2, #4]
 801f55a:	9119      	str	r1, [sp, #100]	; 0x64
 801f55c:	6812      	ldr	r2, [r2, #0]
 801f55e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801f560:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801f564:	fb00 1303 	mla	r3, r0, r3, r1
 801f568:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f56c:	18d3      	adds	r3, r2, r3
 801f56e:	930c      	str	r3, [sp, #48]	; 0x30
 801f570:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	9312      	str	r3, [sp, #72]	; 0x48
 801f576:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f578:	685e      	ldr	r6, [r3, #4]
 801f57a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801f57e:	3604      	adds	r6, #4
 801f580:	930d      	str	r3, [sp, #52]	; 0x34
 801f582:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f584:	2b00      	cmp	r3, #0
 801f586:	dc03      	bgt.n	801f590 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f588:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	f340 8378 	ble.w	801fc80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f590:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f592:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f596:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f59a:	1e48      	subs	r0, r1, #1
 801f59c:	1e57      	subs	r7, r2, #1
 801f59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	f340 818c 	ble.w	801f8be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801f5a6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f5a8:	142b      	asrs	r3, r5, #16
 801f5aa:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f5ae:	d406      	bmi.n	801f5be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f5b0:	4584      	cmp	ip, r0
 801f5b2:	da04      	bge.n	801f5be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	db02      	blt.n	801f5be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f5b8:	42bb      	cmp	r3, r7
 801f5ba:	f2c0 8181 	blt.w	801f8c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f5be:	f11c 0c01 	adds.w	ip, ip, #1
 801f5c2:	f100 816f 	bmi.w	801f8a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f5c6:	4561      	cmp	r1, ip
 801f5c8:	f2c0 816c 	blt.w	801f8a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f5cc:	3301      	adds	r3, #1
 801f5ce:	f100 8169 	bmi.w	801f8a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f5d2:	429a      	cmp	r2, r3
 801f5d4:	f2c0 8166 	blt.w	801f8a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f5dc:	931a      	str	r3, [sp, #104]	; 0x68
 801f5de:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	f340 818c 	ble.w	801f8fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f5e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f5e8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f5ec:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f5f0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f5f4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f5f6:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801f5fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f5fc:	141b      	asrs	r3, r3, #16
 801f5fe:	f100 81d0 	bmi.w	801f9a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f602:	f100 38ff 	add.w	r8, r0, #4294967295
 801f606:	4543      	cmp	r3, r8
 801f608:	f280 81cb 	bge.w	801f9a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f60c:	f1bc 0f00 	cmp.w	ip, #0
 801f610:	f2c0 81c7 	blt.w	801f9a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f614:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f618:	45c4      	cmp	ip, r8
 801f61a:	f280 81c2 	bge.w	801f9a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f61e:	b200      	sxth	r0, r0
 801f620:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f622:	fb0c 3300 	mla	r3, ip, r0, r3
 801f626:	eb04 0803 	add.w	r8, r4, r3
 801f62a:	5ce3      	ldrb	r3, [r4, r3]
 801f62c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f630:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f634:	2a00      	cmp	r2, #0
 801f636:	f000 81a9 	beq.w	801f98c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801f63a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f63e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f642:	940e      	str	r4, [sp, #56]	; 0x38
 801f644:	0e24      	lsrs	r4, r4, #24
 801f646:	9415      	str	r4, [sp, #84]	; 0x54
 801f648:	b179      	cbz	r1, 801f66a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f64a:	eb08 0c00 	add.w	ip, r8, r0
 801f64e:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f652:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f656:	900a      	str	r0, [sp, #40]	; 0x28
 801f658:	0e00      	lsrs	r0, r0, #24
 801f65a:	9013      	str	r0, [sp, #76]	; 0x4c
 801f65c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f660:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f664:	900f      	str	r0, [sp, #60]	; 0x3c
 801f666:	0e00      	lsrs	r0, r0, #24
 801f668:	9016      	str	r0, [sp, #88]	; 0x58
 801f66a:	b292      	uxth	r2, r2
 801f66c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f66e:	b289      	uxth	r1, r1
 801f670:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f672:	fb02 f901 	mul.w	r9, r2, r1
 801f676:	0112      	lsls	r2, r2, #4
 801f678:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f67c:	eba2 0809 	sub.w	r8, r2, r9
 801f680:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f684:	b289      	uxth	r1, r1
 801f686:	fa1f f888 	uxth.w	r8, r8
 801f68a:	1a52      	subs	r2, r2, r1
 801f68c:	fb08 f000 	mul.w	r0, r8, r0
 801f690:	b292      	uxth	r2, r2
 801f692:	fb02 000e 	mla	r0, r2, lr, r0
 801f696:	fb01 0004 	mla	r0, r1, r4, r0
 801f69a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f69c:	fb09 0004 	mla	r0, r9, r4, r0
 801f6a0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f6a4:	2800      	cmp	r0, #0
 801f6a6:	f000 80f2 	beq.w	801f88e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f6aa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f6ae:	d01b      	beq.n	801f6e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f6b0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f6b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f6b8:	fb0e fa0a 	mul.w	sl, lr, sl
 801f6bc:	fb0e fe03 	mul.w	lr, lr, r3
 801f6c0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f6c4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f6c8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f6cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f6d0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f6d4:	4453      	add	r3, sl
 801f6d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f6da:	0a1b      	lsrs	r3, r3, #8
 801f6dc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f6e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f6e4:	ea43 030c 	orr.w	r3, r3, ip
 801f6e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f6ea:	2cff      	cmp	r4, #255	; 0xff
 801f6ec:	d021      	beq.n	801f732 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f6ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f6f0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f6f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f6f6:	fb04 fb0b 	mul.w	fp, r4, fp
 801f6fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f6fc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f700:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f702:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f706:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f70a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f70e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f712:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f716:	44de      	add	lr, fp
 801f718:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f71c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f720:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f724:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f728:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f72c:	ea4e 040a 	orr.w	r4, lr, sl
 801f730:	940e      	str	r4, [sp, #56]	; 0x38
 801f732:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f734:	2cff      	cmp	r4, #255	; 0xff
 801f736:	d021      	beq.n	801f77c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801f738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f73a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f73e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f740:	fb04 fb0b 	mul.w	fp, r4, fp
 801f744:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f746:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f74a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f74c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f750:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f754:	fb04 fa0a 	mul.w	sl, r4, sl
 801f758:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f75c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f760:	44de      	add	lr, fp
 801f762:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f766:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f76a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f76e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f772:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f776:	ea4e 040a 	orr.w	r4, lr, sl
 801f77a:	940a      	str	r4, [sp, #40]	; 0x28
 801f77c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f77e:	2cff      	cmp	r4, #255	; 0xff
 801f780:	d021      	beq.n	801f7c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801f782:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f784:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f788:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f78a:	fb04 fb0b 	mul.w	fp, r4, fp
 801f78e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f790:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f794:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f796:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f79a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f79e:	fb04 fa0a 	mul.w	sl, r4, sl
 801f7a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f7a6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f7aa:	44de      	add	lr, fp
 801f7ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f7b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f7b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f7bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f7c0:	ea4e 040a 	orr.w	r4, lr, sl
 801f7c4:	940f      	str	r4, [sp, #60]	; 0x3c
 801f7c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f7c8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f7cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f7d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f7d6:	fb08 fc0c 	mul.w	ip, r8, ip
 801f7da:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f7de:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f7e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f7e4:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f7e8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f7ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f7ee:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f7f2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f7f6:	fb08 f80e 	mul.w	r8, r8, lr
 801f7fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7fe:	fb02 8303 	mla	r3, r2, r3, r8
 801f802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f804:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f808:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f80c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f80e:	fb01 330a 	mla	r3, r1, sl, r3
 801f812:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f816:	fb09 3901 	mla	r9, r9, r1, r3
 801f81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f81c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f81e:	4343      	muls	r3, r0
 801f820:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f824:	1c58      	adds	r0, r3, #1
 801f826:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f82a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f82e:	ea4c 0c09 	orr.w	ip, ip, r9
 801f832:	783b      	ldrb	r3, [r7, #0]
 801f834:	fa5f f28c 	uxtb.w	r2, ip
 801f838:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f83c:	fb12 f201 	smulbb	r2, r2, r1
 801f840:	b2c0      	uxtb	r0, r0
 801f842:	fb03 2300 	mla	r3, r3, r0, r2
 801f846:	b29b      	uxth	r3, r3
 801f848:	1c5a      	adds	r2, r3, #1
 801f84a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f84e:	787a      	ldrb	r2, [r7, #1]
 801f850:	fb12 f200 	smulbb	r2, r2, r0
 801f854:	121b      	asrs	r3, r3, #8
 801f856:	703b      	strb	r3, [r7, #0]
 801f858:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f85c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f860:	fb03 2301 	mla	r3, r3, r1, r2
 801f864:	b29b      	uxth	r3, r3
 801f866:	1c5a      	adds	r2, r3, #1
 801f868:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f86c:	121b      	asrs	r3, r3, #8
 801f86e:	707b      	strb	r3, [r7, #1]
 801f870:	78bb      	ldrb	r3, [r7, #2]
 801f872:	fb13 f000 	smulbb	r0, r3, r0
 801f876:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f87a:	fa1f fc8c 	uxth.w	ip, ip
 801f87e:	f10c 0301 	add.w	r3, ip, #1
 801f882:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f886:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f88a:	f887 c002 	strb.w	ip, [r7, #2]
 801f88e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f890:	3703      	adds	r7, #3
 801f892:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f894:	441a      	add	r2, r3
 801f896:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f898:	441d      	add	r5, r3
 801f89a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f89c:	9229      	str	r2, [sp, #164]	; 0xa4
 801f89e:	3b01      	subs	r3, #1
 801f8a0:	931a      	str	r3, [sp, #104]	; 0x68
 801f8a2:	e69c      	b.n	801f5de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f8a4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f8a6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f8a8:	441c      	add	r4, r3
 801f8aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f8ac:	441d      	add	r5, r3
 801f8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8b0:	9429      	str	r4, [sp, #164]	; 0xa4
 801f8b2:	3b01      	subs	r3, #1
 801f8b4:	9309      	str	r3, [sp, #36]	; 0x24
 801f8b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f8b8:	3303      	adds	r3, #3
 801f8ba:	930c      	str	r3, [sp, #48]	; 0x30
 801f8bc:	e66f      	b.n	801f59e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f8be:	d026      	beq.n	801f90e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801f8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8c2:	982b      	ldr	r0, [sp, #172]	; 0xac
 801f8c4:	3b01      	subs	r3, #1
 801f8c6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f8c8:	fb00 4003 	mla	r0, r0, r3, r4
 801f8cc:	1400      	asrs	r0, r0, #16
 801f8ce:	f53f ae83 	bmi.w	801f5d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f8d2:	3901      	subs	r1, #1
 801f8d4:	4288      	cmp	r0, r1
 801f8d6:	f6bf ae7f 	bge.w	801f5d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f8da:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f8dc:	fb01 5303 	mla	r3, r1, r3, r5
 801f8e0:	141b      	asrs	r3, r3, #16
 801f8e2:	f53f ae79 	bmi.w	801f5d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f8e6:	3a01      	subs	r2, #1
 801f8e8:	4293      	cmp	r3, r2
 801f8ea:	f6bf ae75 	bge.w	801f5d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f8ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f8f0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f8f4:	f103 0e03 	add.w	lr, r3, #3
 801f8f8:	f1bb 0f00 	cmp.w	fp, #0
 801f8fc:	dc71      	bgt.n	801f9e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801f8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f900:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f906:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f90a:	4423      	add	r3, r4
 801f90c:	930c      	str	r3, [sp, #48]	; 0x30
 801f90e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f910:	2b00      	cmp	r3, #0
 801f912:	f340 81b5 	ble.w	801fc80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f91a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f91c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f920:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f924:	eef0 6a62 	vmov.f32	s13, s5
 801f928:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f92c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f930:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f934:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801f938:	eef0 6a43 	vmov.f32	s13, s6
 801f93c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f940:	ee16 5a90 	vmov	r5, s13
 801f944:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f948:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f94c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f950:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f954:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f958:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f95c:	ee12 2a90 	vmov	r2, s5
 801f960:	eef0 2a47 	vmov.f32	s5, s14
 801f964:	fb92 f3f3 	sdiv	r3, r2, r3
 801f968:	ee13 2a10 	vmov	r2, s6
 801f96c:	932b      	str	r3, [sp, #172]	; 0xac
 801f96e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f970:	eeb0 3a67 	vmov.f32	s6, s15
 801f974:	fb92 f3f3 	sdiv	r3, r2, r3
 801f978:	932c      	str	r3, [sp, #176]	; 0xb0
 801f97a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f97c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f97e:	3b01      	subs	r3, #1
 801f980:	9319      	str	r3, [sp, #100]	; 0x64
 801f982:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f984:	bf08      	it	eq
 801f986:	4613      	moveq	r3, r2
 801f988:	9309      	str	r3, [sp, #36]	; 0x24
 801f98a:	e5fa      	b.n	801f582 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f98c:	2900      	cmp	r1, #0
 801f98e:	f43f ae6c 	beq.w	801f66a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f992:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f996:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f99a:	900a      	str	r0, [sp, #40]	; 0x28
 801f99c:	0e00      	lsrs	r0, r0, #24
 801f99e:	9013      	str	r0, [sp, #76]	; 0x4c
 801f9a0:	e663      	b.n	801f66a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f9a2:	f113 0801 	adds.w	r8, r3, #1
 801f9a6:	f53f af72 	bmi.w	801f88e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f9aa:	4540      	cmp	r0, r8
 801f9ac:	f6ff af6f 	blt.w	801f88e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f9b0:	f11c 0801 	adds.w	r8, ip, #1
 801f9b4:	f53f af6b 	bmi.w	801f88e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f9b8:	45c6      	cmp	lr, r8
 801f9ba:	f6ff af68 	blt.w	801f88e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f9be:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801f9c0:	b200      	sxth	r0, r0
 801f9c2:	9302      	str	r3, [sp, #8]
 801f9c4:	fa0f f38e 	sxth.w	r3, lr
 801f9c8:	9000      	str	r0, [sp, #0]
 801f9ca:	9301      	str	r3, [sp, #4]
 801f9cc:	4633      	mov	r3, r6
 801f9ce:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f9d0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f9d4:	e9cd c203 	strd	ip, r2, [sp, #12]
 801f9d8:	4639      	mov	r1, r7
 801f9da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f9dc:	f7ff fc74 	bl	801f2c8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801f9e0:	e755      	b.n	801f88e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f9e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f9e4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f9e8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f9ea:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f9ee:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f9f0:	1427      	asrs	r7, r4, #16
 801f9f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f9f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f9f8:	142b      	asrs	r3, r5, #16
 801f9fa:	fb01 7303 	mla	r3, r1, r3, r7
 801f9fe:	18e7      	adds	r7, r4, r3
 801fa00:	5ce3      	ldrb	r3, [r4, r3]
 801fa02:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fa06:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fa0a:	2a00      	cmp	r2, #0
 801fa0c:	f000 812e 	beq.w	801fc6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801fa10:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fa14:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801fa18:	9410      	str	r4, [sp, #64]	; 0x40
 801fa1a:	0e24      	lsrs	r4, r4, #24
 801fa1c:	9417      	str	r4, [sp, #92]	; 0x5c
 801fa1e:	b170      	cbz	r0, 801fa3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801fa20:	eb07 0801 	add.w	r8, r7, r1
 801fa24:	5c79      	ldrb	r1, [r7, r1]
 801fa26:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fa2a:	910b      	str	r1, [sp, #44]	; 0x2c
 801fa2c:	0e09      	lsrs	r1, r1, #24
 801fa2e:	9114      	str	r1, [sp, #80]	; 0x50
 801fa30:	f898 1001 	ldrb.w	r1, [r8, #1]
 801fa34:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fa38:	9111      	str	r1, [sp, #68]	; 0x44
 801fa3a:	0e09      	lsrs	r1, r1, #24
 801fa3c:	9118      	str	r1, [sp, #96]	; 0x60
 801fa3e:	b292      	uxth	r2, r2
 801fa40:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801fa42:	b280      	uxth	r0, r0
 801fa44:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fa46:	fb02 f900 	mul.w	r9, r2, r0
 801fa4a:	0112      	lsls	r2, r2, #4
 801fa4c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fa50:	eba2 0809 	sub.w	r8, r2, r9
 801fa54:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fa58:	b280      	uxth	r0, r0
 801fa5a:	fa1f f888 	uxth.w	r8, r8
 801fa5e:	1a12      	subs	r2, r2, r0
 801fa60:	fb08 f101 	mul.w	r1, r8, r1
 801fa64:	b292      	uxth	r2, r2
 801fa66:	fb02 110c 	mla	r1, r2, ip, r1
 801fa6a:	fb00 1104 	mla	r1, r0, r4, r1
 801fa6e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fa70:	fb09 1104 	mla	r1, r9, r4, r1
 801fa74:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fa78:	2900      	cmp	r1, #0
 801fa7a:	f000 80ec 	beq.w	801fc56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801fa7e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fa82:	d019      	beq.n	801fab8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801fa84:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fa88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa8c:	fb0c fa0a 	mul.w	sl, ip, sl
 801fa90:	fb0c fc03 	mul.w	ip, ip, r3
 801fa94:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fa98:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fa9c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801faa0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801faa4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801faa8:	4453      	add	r3, sl
 801faaa:	0a3f      	lsrs	r7, r7, #8
 801faac:	0a1b      	lsrs	r3, r3, #8
 801faae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fab2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fab6:	433b      	orrs	r3, r7
 801fab8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801faba:	2cff      	cmp	r4, #255	; 0xff
 801fabc:	d020      	beq.n	801fb00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801fabe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fac0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fac4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fac6:	4367      	muls	r7, r4
 801fac8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801faca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801face:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fad2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fad4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fad8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fadc:	fb04 fa0a 	mul.w	sl, r4, sl
 801fae0:	44bc      	add	ip, r7
 801fae2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fae6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801faea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801faee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801faf2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801faf6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fafa:	ea4c 040a 	orr.w	r4, ip, sl
 801fafe:	9410      	str	r4, [sp, #64]	; 0x40
 801fb00:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fb02:	2cff      	cmp	r4, #255	; 0xff
 801fb04:	d020      	beq.n	801fb48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801fb06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fb08:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fb0c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fb0e:	4367      	muls	r7, r4
 801fb10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fb12:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fb16:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fb1a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fb1c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fb20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb24:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb28:	44bc      	add	ip, r7
 801fb2a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fb2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb32:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fb36:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb3e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb42:	ea4c 040a 	orr.w	r4, ip, sl
 801fb46:	940b      	str	r4, [sp, #44]	; 0x2c
 801fb48:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fb4a:	2cff      	cmp	r4, #255	; 0xff
 801fb4c:	d020      	beq.n	801fb90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801fb4e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fb50:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fb54:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fb56:	4367      	muls	r7, r4
 801fb58:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fb5a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fb5e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fb62:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fb64:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fb68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb6c:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb70:	44bc      	add	ip, r7
 801fb72:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fb76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb7a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fb7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb8a:	ea4c 040a 	orr.w	r4, ip, sl
 801fb8e:	9411      	str	r4, [sp, #68]	; 0x44
 801fb90:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fb92:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fb96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb9a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fb9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fba0:	fb08 f707 	mul.w	r7, r8, r7
 801fba4:	fb02 770c 	mla	r7, r2, ip, r7
 801fba8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fbac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fbae:	fb00 770c 	mla	r7, r0, ip, r7
 801fbb2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fbb6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fbb8:	fb09 770c 	mla	r7, r9, ip, r7
 801fbbc:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801fbc0:	fb08 f80c 	mul.w	r8, r8, ip
 801fbc4:	0a3f      	lsrs	r7, r7, #8
 801fbc6:	fb02 8303 	mla	r3, r2, r3, r8
 801fbca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fbcc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fbd0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fbd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fbd6:	fb00 330a 	mla	r3, r0, sl, r3
 801fbda:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fbde:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fbe0:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fbe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fbe6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbea:	434b      	muls	r3, r1
 801fbec:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fbf0:	1c59      	adds	r1, r3, #1
 801fbf2:	ea47 070c 	orr.w	r7, r7, ip
 801fbf6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fbfa:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fbfe:	b2fa      	uxtb	r2, r7
 801fc00:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fc04:	fb12 f200 	smulbb	r2, r2, r0
 801fc08:	b2c9      	uxtb	r1, r1
 801fc0a:	fb03 2301 	mla	r3, r3, r1, r2
 801fc0e:	b29b      	uxth	r3, r3
 801fc10:	1c5a      	adds	r2, r3, #1
 801fc12:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc16:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fc1a:	fb12 f201 	smulbb	r2, r2, r1
 801fc1e:	121b      	asrs	r3, r3, #8
 801fc20:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fc24:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801fc28:	0c3f      	lsrs	r7, r7, #16
 801fc2a:	fb03 2300 	mla	r3, r3, r0, r2
 801fc2e:	b29b      	uxth	r3, r3
 801fc30:	1c5a      	adds	r2, r3, #1
 801fc32:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc36:	121b      	asrs	r3, r3, #8
 801fc38:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fc3c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fc40:	fb13 f101 	smulbb	r1, r3, r1
 801fc44:	fb07 1700 	mla	r7, r7, r0, r1
 801fc48:	b2bf      	uxth	r7, r7
 801fc4a:	1c7b      	adds	r3, r7, #1
 801fc4c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801fc50:	123f      	asrs	r7, r7, #8
 801fc52:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801fc56:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fc58:	f10e 0e03 	add.w	lr, lr, #3
 801fc5c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fc5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fc62:	441a      	add	r2, r3
 801fc64:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fc66:	9229      	str	r2, [sp, #164]	; 0xa4
 801fc68:	441d      	add	r5, r3
 801fc6a:	e645      	b.n	801f8f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801fc6c:	2800      	cmp	r0, #0
 801fc6e:	f43f aee6 	beq.w	801fa3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801fc72:	5c79      	ldrb	r1, [r7, r1]
 801fc74:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fc78:	910b      	str	r1, [sp, #44]	; 0x2c
 801fc7a:	0e09      	lsrs	r1, r1, #24
 801fc7c:	9114      	str	r1, [sp, #80]	; 0x50
 801fc7e:	e6de      	b.n	801fa3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801fc80:	b01f      	add	sp, #124	; 0x7c
 801fc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc86 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801fc86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc8a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801fc8e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801fc92:	2d00      	cmp	r5, #0
 801fc94:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801fc98:	fb05 700e 	mla	r0, r5, lr, r7
 801fc9c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801fca0:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801fca4:	eb02 0800 	add.w	r8, r2, r0
 801fca8:	f2c0 8105 	blt.w	801feb6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801fcac:	45a9      	cmp	r9, r5
 801fcae:	f340 8102 	ble.w	801feb6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801fcb2:	2f00      	cmp	r7, #0
 801fcb4:	f2c0 80fd 	blt.w	801feb2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801fcb8:	45be      	cmp	lr, r7
 801fcba:	f340 80fa 	ble.w	801feb2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801fcbe:	5c12      	ldrb	r2, [r2, r0]
 801fcc0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fcc4:	1c7a      	adds	r2, r7, #1
 801fcc6:	f100 80f9 	bmi.w	801febc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801fcca:	4596      	cmp	lr, r2
 801fccc:	f340 80f6 	ble.w	801febc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801fcd0:	2c00      	cmp	r4, #0
 801fcd2:	f000 80f5 	beq.w	801fec0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801fcd6:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fcda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801fcde:	3501      	adds	r5, #1
 801fce0:	f100 80f2 	bmi.w	801fec8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801fce4:	45a9      	cmp	r9, r5
 801fce6:	f340 80ef 	ble.w	801fec8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801fcea:	f1bc 0f00 	cmp.w	ip, #0
 801fcee:	f000 80ee 	beq.w	801fece <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801fcf2:	2f00      	cmp	r7, #0
 801fcf4:	f2c0 80e6 	blt.w	801fec4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801fcf8:	45be      	cmp	lr, r7
 801fcfa:	f340 80e3 	ble.w	801fec4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801fcfe:	f818 200e 	ldrb.w	r2, [r8, lr]
 801fd02:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fd06:	3701      	adds	r7, #1
 801fd08:	f100 80e4 	bmi.w	801fed4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801fd0c:	45be      	cmp	lr, r7
 801fd0e:	f340 80e1 	ble.w	801fed4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801fd12:	2c00      	cmp	r4, #0
 801fd14:	f000 80e0 	beq.w	801fed8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801fd18:	44c6      	add	lr, r8
 801fd1a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fd1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fd22:	b2a3      	uxth	r3, r4
 801fd24:	fa1f fc8c 	uxth.w	ip, ip
 801fd28:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801fd2c:	fb0c fe03 	mul.w	lr, ip, r3
 801fd30:	011b      	lsls	r3, r3, #4
 801fd32:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801fd36:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801fd3a:	eba3 070e 	sub.w	r7, r3, lr
 801fd3e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801fd42:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fd46:	fa1f f48c 	uxth.w	r4, ip
 801fd4a:	b2bf      	uxth	r7, r7
 801fd4c:	1b1b      	subs	r3, r3, r4
 801fd4e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fd52:	fb07 fc0a 	mul.w	ip, r7, sl
 801fd56:	b29b      	uxth	r3, r3
 801fd58:	fb03 cc0b 	mla	ip, r3, fp, ip
 801fd5c:	9300      	str	r3, [sp, #0]
 801fd5e:	fb04 cc09 	mla	ip, r4, r9, ip
 801fd62:	fb0e cc08 	mla	ip, lr, r8, ip
 801fd66:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fd6a:	9301      	str	r3, [sp, #4]
 801fd6c:	2b00      	cmp	r3, #0
 801fd6e:	f000 809d 	beq.w	801feac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801fd72:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fd76:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fd7a:	fb0b fc0c 	mul.w	ip, fp, ip
 801fd7e:	fb0b f606 	mul.w	r6, fp, r6
 801fd82:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fd86:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fd8a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801fd8e:	44dc      	add	ip, fp
 801fd90:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801fd94:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fd98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd9c:	fb0a fb0b 	mul.w	fp, sl, fp
 801fda0:	fb0a fa00 	mul.w	sl, sl, r0
 801fda4:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801fda8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801fdac:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801fdb0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fdb4:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fdb8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fdbc:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801fdc0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fdc4:	0a36      	lsrs	r6, r6, #8
 801fdc6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fdca:	44dc      	add	ip, fp
 801fdcc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fdd0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fdd4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fdd8:	fb09 fb0b 	mul.w	fp, r9, fp
 801fddc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fde0:	fb09 f905 	mul.w	r9, r9, r5
 801fde4:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801fde8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fdec:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801fdf0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fdf4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fdf8:	fb0c fc07 	mul.w	ip, ip, r7
 801fdfc:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801fe00:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801fe04:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fe08:	4458      	add	r0, fp
 801fe0a:	fb08 f505 	mul.w	r5, r8, r5
 801fe0e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fe12:	fb08 f802 	mul.w	r8, r8, r2
 801fe16:	0a00      	lsrs	r0, r0, #8
 801fe18:	0a2a      	lsrs	r2, r5, #8
 801fe1a:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801fe1e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fe22:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fe26:	4415      	add	r5, r2
 801fe28:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801fe2c:	0a2d      	lsrs	r5, r5, #8
 801fe2e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fe32:	9a00      	ldr	r2, [sp, #0]
 801fe34:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fe38:	fb03 cc02 	mla	ip, r3, r2, ip
 801fe3c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fe40:	9b01      	ldr	r3, [sp, #4]
 801fe42:	fb05 c50e 	mla	r5, r5, lr, ip
 801fe46:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fe4a:	43db      	mvns	r3, r3
 801fe4c:	fb00 5004 	mla	r0, r0, r4, r5
 801fe50:	b2db      	uxtb	r3, r3
 801fe52:	0a00      	lsrs	r0, r0, #8
 801fe54:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801fe58:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801fe5c:	4378      	muls	r0, r7
 801fe5e:	fb02 0006 	mla	r0, r2, r6, r0
 801fe62:	780a      	ldrb	r2, [r1, #0]
 801fe64:	fb0e 0e08 	mla	lr, lr, r8, r0
 801fe68:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801fe6c:	fb04 e000 	mla	r0, r4, r0, lr
 801fe70:	fb02 f403 	mul.w	r4, r2, r3
 801fe74:	0a00      	lsrs	r0, r0, #8
 801fe76:	1c62      	adds	r2, r4, #1
 801fe78:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fe7c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fe80:	4328      	orrs	r0, r5
 801fe82:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801fe86:	700a      	strb	r2, [r1, #0]
 801fe88:	784a      	ldrb	r2, [r1, #1]
 801fe8a:	435a      	muls	r2, r3
 801fe8c:	1c54      	adds	r4, r2, #1
 801fe8e:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801fe92:	0a02      	lsrs	r2, r0, #8
 801fe94:	0c00      	lsrs	r0, r0, #16
 801fe96:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fe9a:	704a      	strb	r2, [r1, #1]
 801fe9c:	788a      	ldrb	r2, [r1, #2]
 801fe9e:	4353      	muls	r3, r2
 801fea0:	1c5a      	adds	r2, r3, #1
 801fea2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fea6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801feaa:	7088      	strb	r0, [r1, #2]
 801feac:	b003      	add	sp, #12
 801feae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feb2:	2600      	movs	r6, #0
 801feb4:	e706      	b.n	801fcc4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801feb6:	2000      	movs	r0, #0
 801feb8:	4606      	mov	r6, r0
 801feba:	e710      	b.n	801fcde <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801febc:	2000      	movs	r0, #0
 801febe:	e70e      	b.n	801fcde <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801fec0:	4620      	mov	r0, r4
 801fec2:	e70c      	b.n	801fcde <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801fec4:	2500      	movs	r5, #0
 801fec6:	e71e      	b.n	801fd06 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801fec8:	2200      	movs	r2, #0
 801feca:	4615      	mov	r5, r2
 801fecc:	e729      	b.n	801fd22 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fece:	4662      	mov	r2, ip
 801fed0:	4665      	mov	r5, ip
 801fed2:	e726      	b.n	801fd22 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fed4:	2200      	movs	r2, #0
 801fed6:	e724      	b.n	801fd22 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fed8:	4622      	mov	r2, r4
 801feda:	e722      	b.n	801fd22 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801fedc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fee0:	b09b      	sub	sp, #108	; 0x6c
 801fee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fee6:	9218      	str	r2, [sp, #96]	; 0x60
 801fee8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801feea:	9019      	str	r0, [sp, #100]	; 0x64
 801feec:	9116      	str	r1, [sp, #88]	; 0x58
 801feee:	6850      	ldr	r0, [r2, #4]
 801fef0:	9307      	str	r3, [sp, #28]
 801fef2:	6812      	ldr	r2, [r2, #0]
 801fef4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801fef6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801fefa:	fb00 1303 	mla	r3, r0, r3, r1
 801fefe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff02:	18d3      	adds	r3, r2, r3
 801ff04:	930a      	str	r3, [sp, #40]	; 0x28
 801ff06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ff08:	681b      	ldr	r3, [r3, #0]
 801ff0a:	930f      	str	r3, [sp, #60]	; 0x3c
 801ff0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ff0e:	685e      	ldr	r6, [r3, #4]
 801ff10:	3604      	adds	r6, #4
 801ff12:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	dc03      	bgt.n	801ff20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ff18:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	f340 834f 	ble.w	80205be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801ff20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ff22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ff26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ff2a:	1e48      	subs	r0, r1, #1
 801ff2c:	1e57      	subs	r7, r2, #1
 801ff2e:	9b07      	ldr	r3, [sp, #28]
 801ff30:	2b00      	cmp	r3, #0
 801ff32:	f340 8178 	ble.w	8020226 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ff36:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ff38:	142b      	asrs	r3, r5, #16
 801ff3a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801ff3e:	d406      	bmi.n	801ff4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff40:	4584      	cmp	ip, r0
 801ff42:	da04      	bge.n	801ff4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	db02      	blt.n	801ff4e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff48:	42bb      	cmp	r3, r7
 801ff4a:	f2c0 816d 	blt.w	8020228 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801ff4e:	f11c 0c01 	adds.w	ip, ip, #1
 801ff52:	f100 815b 	bmi.w	802020c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ff56:	4561      	cmp	r1, ip
 801ff58:	f2c0 8158 	blt.w	802020c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ff5c:	3301      	adds	r3, #1
 801ff5e:	f100 8155 	bmi.w	802020c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ff62:	429a      	cmp	r2, r3
 801ff64:	f2c0 8152 	blt.w	802020c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ff68:	9b07      	ldr	r3, [sp, #28]
 801ff6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ff6c:	9317      	str	r3, [sp, #92]	; 0x5c
 801ff6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ff70:	2b00      	cmp	r3, #0
 801ff72:	f340 8178 	ble.w	8020266 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ff76:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ff78:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ff7c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ff80:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ff84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ff86:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801ff8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ff8c:	141b      	asrs	r3, r3, #16
 801ff8e:	f100 81ba 	bmi.w	8020306 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff92:	f101 38ff 	add.w	r8, r1, #4294967295
 801ff96:	4543      	cmp	r3, r8
 801ff98:	f280 81b5 	bge.w	8020306 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff9c:	f1bc 0f00 	cmp.w	ip, #0
 801ffa0:	f2c0 81b1 	blt.w	8020306 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ffa4:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ffa8:	45c4      	cmp	ip, r8
 801ffaa:	f280 81ac 	bge.w	8020306 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ffae:	b209      	sxth	r1, r1
 801ffb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ffb2:	fb0c 3301 	mla	r3, ip, r1, r3
 801ffb6:	eb04 0803 	add.w	r8, r4, r3
 801ffba:	5ce3      	ldrb	r3, [r4, r3]
 801ffbc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ffc0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ffc4:	2a00      	cmp	r2, #0
 801ffc6:	f000 8193 	beq.w	80202f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801ffca:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ffce:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ffd2:	940b      	str	r4, [sp, #44]	; 0x2c
 801ffd4:	0e24      	lsrs	r4, r4, #24
 801ffd6:	9412      	str	r4, [sp, #72]	; 0x48
 801ffd8:	b178      	cbz	r0, 801fffa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ffda:	eb08 0c01 	add.w	ip, r8, r1
 801ffde:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ffe2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ffe6:	9108      	str	r1, [sp, #32]
 801ffe8:	0e09      	lsrs	r1, r1, #24
 801ffea:	9110      	str	r1, [sp, #64]	; 0x40
 801ffec:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801fff0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fff4:	910c      	str	r1, [sp, #48]	; 0x30
 801fff6:	0e09      	lsrs	r1, r1, #24
 801fff8:	9113      	str	r1, [sp, #76]	; 0x4c
 801fffa:	b292      	uxth	r2, r2
 801fffc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fffe:	b280      	uxth	r0, r0
 8020000:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020002:	fb02 f900 	mul.w	r9, r2, r0
 8020006:	0112      	lsls	r2, r2, #4
 8020008:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802000c:	eba2 0809 	sub.w	r8, r2, r9
 8020010:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020014:	b280      	uxth	r0, r0
 8020016:	fa1f f888 	uxth.w	r8, r8
 802001a:	1a12      	subs	r2, r2, r0
 802001c:	fb08 f101 	mul.w	r1, r8, r1
 8020020:	b292      	uxth	r2, r2
 8020022:	fb02 110e 	mla	r1, r2, lr, r1
 8020026:	fb00 1104 	mla	r1, r0, r4, r1
 802002a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802002c:	fb09 1104 	mla	r1, r9, r4, r1
 8020030:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020034:	2900      	cmp	r1, #0
 8020036:	f000 80de 	beq.w	80201f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802003a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802003e:	d01b      	beq.n	8020078 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8020040:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020044:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020048:	fb0e fa0a 	mul.w	sl, lr, sl
 802004c:	fb0e fe03 	mul.w	lr, lr, r3
 8020050:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020054:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020058:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802005c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020060:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020064:	4453      	add	r3, sl
 8020066:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802006a:	0a1b      	lsrs	r3, r3, #8
 802006c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020070:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020074:	ea43 030c 	orr.w	r3, r3, ip
 8020078:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802007a:	2cff      	cmp	r4, #255	; 0xff
 802007c:	d021      	beq.n	80200c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802007e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020080:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020084:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020086:	fb04 fb0b 	mul.w	fp, r4, fp
 802008a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802008c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020090:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020092:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020096:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802009a:	fb04 fa0a 	mul.w	sl, r4, sl
 802009e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80200a6:	44de      	add	lr, fp
 80200a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80200ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80200b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80200bc:	ea4e 040a 	orr.w	r4, lr, sl
 80200c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80200c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80200c4:	2cff      	cmp	r4, #255	; 0xff
 80200c6:	d021      	beq.n	802010c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80200c8:	9c08      	ldr	r4, [sp, #32]
 80200ca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80200ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80200d0:	fb04 fb0b 	mul.w	fp, r4, fp
 80200d4:	9c08      	ldr	r4, [sp, #32]
 80200d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80200da:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80200dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80200e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80200e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80200e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80200f0:	44de      	add	lr, fp
 80200f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80200f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80200fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020102:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020106:	ea4e 040a 	orr.w	r4, lr, sl
 802010a:	9408      	str	r4, [sp, #32]
 802010c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802010e:	2cff      	cmp	r4, #255	; 0xff
 8020110:	d021      	beq.n	8020156 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020112:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020114:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020118:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802011a:	fb04 fb0b 	mul.w	fp, r4, fp
 802011e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020120:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020124:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020126:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802012a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802012e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020132:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020136:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802013a:	44de      	add	lr, fp
 802013c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020140:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020144:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020148:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802014c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020150:	ea4e 040a 	orr.w	r4, lr, sl
 8020154:	940c      	str	r4, [sp, #48]	; 0x30
 8020156:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020158:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802015c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020160:	43c9      	mvns	r1, r1
 8020162:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020166:	9c08      	ldr	r4, [sp, #32]
 8020168:	b2c9      	uxtb	r1, r1
 802016a:	fb08 fc0c 	mul.w	ip, r8, ip
 802016e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020172:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020176:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020178:	fb00 cc0e 	mla	ip, r0, lr, ip
 802017c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020180:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020182:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020186:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802018a:	fb08 f80e 	mul.w	r8, r8, lr
 802018e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020192:	fb02 8303 	mla	r3, r2, r3, r8
 8020196:	9a08      	ldr	r2, [sp, #32]
 8020198:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802019c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80201a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80201a2:	fb00 330a 	mla	r3, r0, sl, r3
 80201a6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80201aa:	fb09 3900 	mla	r9, r9, r0, r3
 80201ae:	783b      	ldrb	r3, [r7, #0]
 80201b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80201b4:	fb03 f201 	mul.w	r2, r3, r1
 80201b8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80201bc:	1c53      	adds	r3, r2, #1
 80201be:	ea4c 0c09 	orr.w	ip, ip, r9
 80201c2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80201c6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80201ca:	703b      	strb	r3, [r7, #0]
 80201cc:	787b      	ldrb	r3, [r7, #1]
 80201ce:	434b      	muls	r3, r1
 80201d0:	1c5a      	adds	r2, r3, #1
 80201d2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80201d6:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80201da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80201de:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80201e2:	707b      	strb	r3, [r7, #1]
 80201e4:	78bb      	ldrb	r3, [r7, #2]
 80201e6:	4359      	muls	r1, r3
 80201e8:	1c4b      	adds	r3, r1, #1
 80201ea:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80201ee:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80201f2:	f887 c002 	strb.w	ip, [r7, #2]
 80201f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80201f8:	3703      	adds	r7, #3
 80201fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80201fc:	441a      	add	r2, r3
 80201fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020200:	441d      	add	r5, r3
 8020202:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020204:	9225      	str	r2, [sp, #148]	; 0x94
 8020206:	3b01      	subs	r3, #1
 8020208:	9317      	str	r3, [sp, #92]	; 0x5c
 802020a:	e6b0      	b.n	801ff6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802020c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802020e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020210:	441c      	add	r4, r3
 8020212:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020214:	441d      	add	r5, r3
 8020216:	9b07      	ldr	r3, [sp, #28]
 8020218:	9425      	str	r4, [sp, #148]	; 0x94
 802021a:	3b01      	subs	r3, #1
 802021c:	9307      	str	r3, [sp, #28]
 802021e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020220:	3303      	adds	r3, #3
 8020222:	930a      	str	r3, [sp, #40]	; 0x28
 8020224:	e683      	b.n	801ff2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020226:	d026      	beq.n	8020276 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8020228:	9b07      	ldr	r3, [sp, #28]
 802022a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802022c:	3b01      	subs	r3, #1
 802022e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020230:	fb00 4003 	mla	r0, r0, r3, r4
 8020234:	1400      	asrs	r0, r0, #16
 8020236:	f53f ae97 	bmi.w	801ff68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802023a:	3901      	subs	r1, #1
 802023c:	4288      	cmp	r0, r1
 802023e:	f6bf ae93 	bge.w	801ff68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020242:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020244:	fb01 5303 	mla	r3, r1, r3, r5
 8020248:	141b      	asrs	r3, r3, #16
 802024a:	f53f ae8d 	bmi.w	801ff68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802024e:	3a01      	subs	r2, #1
 8020250:	4293      	cmp	r3, r2
 8020252:	f6bf ae89 	bge.w	801ff68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020258:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802025c:	f103 0e03 	add.w	lr, r3, #3
 8020260:	f1bb 0f00 	cmp.w	fp, #0
 8020264:	dc6d      	bgt.n	8020342 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8020266:	9b07      	ldr	r3, [sp, #28]
 8020268:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802026c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802026e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020272:	4423      	add	r3, r4
 8020274:	930a      	str	r3, [sp, #40]	; 0x28
 8020276:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020278:	2b00      	cmp	r3, #0
 802027a:	f340 81a0 	ble.w	80205be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802027e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020282:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020284:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020288:	eeb0 6a62 	vmov.f32	s12, s5
 802028c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020290:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020294:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020298:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 802029c:	eeb0 6a43 	vmov.f32	s12, s6
 80202a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202a4:	ee16 5a10 	vmov	r5, s12
 80202a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202c0:	ee12 2a90 	vmov	r2, s5
 80202c4:	eef0 2a47 	vmov.f32	s5, s14
 80202c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80202cc:	ee13 2a10 	vmov	r2, s6
 80202d0:	9327      	str	r3, [sp, #156]	; 0x9c
 80202d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80202d4:	eeb0 3a67 	vmov.f32	s6, s15
 80202d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80202dc:	9328      	str	r3, [sp, #160]	; 0xa0
 80202de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80202e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80202e2:	3b01      	subs	r3, #1
 80202e4:	9316      	str	r3, [sp, #88]	; 0x58
 80202e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80202e8:	bf08      	it	eq
 80202ea:	4613      	moveq	r3, r2
 80202ec:	9307      	str	r3, [sp, #28]
 80202ee:	e610      	b.n	801ff12 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80202f0:	2800      	cmp	r0, #0
 80202f2:	f43f ae82 	beq.w	801fffa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80202f6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80202fa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202fe:	9108      	str	r1, [sp, #32]
 8020300:	0e09      	lsrs	r1, r1, #24
 8020302:	9110      	str	r1, [sp, #64]	; 0x40
 8020304:	e679      	b.n	801fffa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020306:	f113 0801 	adds.w	r8, r3, #1
 802030a:	f53f af74 	bmi.w	80201f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802030e:	4541      	cmp	r1, r8
 8020310:	f6ff af71 	blt.w	80201f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020314:	f11c 0801 	adds.w	r8, ip, #1
 8020318:	f53f af6d 	bmi.w	80201f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802031c:	45c6      	cmp	lr, r8
 802031e:	f6ff af6a 	blt.w	80201f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020322:	b209      	sxth	r1, r1
 8020324:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020328:	fa0f f38e 	sxth.w	r3, lr
 802032c:	9100      	str	r1, [sp, #0]
 802032e:	4639      	mov	r1, r7
 8020330:	9301      	str	r3, [sp, #4]
 8020332:	4633      	mov	r3, r6
 8020334:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802033a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802033c:	f7ff fca3 	bl	801fc86 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020340:	e759      	b.n	80201f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020342:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020344:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020348:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802034a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802034e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020350:	1427      	asrs	r7, r4, #16
 8020352:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020354:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020358:	142b      	asrs	r3, r5, #16
 802035a:	fb01 7303 	mla	r3, r1, r3, r7
 802035e:	18e7      	adds	r7, r4, r3
 8020360:	5ce3      	ldrb	r3, [r4, r3]
 8020362:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020366:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802036a:	2a00      	cmp	r2, #0
 802036c:	f000 811d 	beq.w	80205aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8020370:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020374:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8020378:	940d      	str	r4, [sp, #52]	; 0x34
 802037a:	0e24      	lsrs	r4, r4, #24
 802037c:	9414      	str	r4, [sp, #80]	; 0x50
 802037e:	b170      	cbz	r0, 802039e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020380:	eb07 0801 	add.w	r8, r7, r1
 8020384:	5c79      	ldrb	r1, [r7, r1]
 8020386:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802038a:	9109      	str	r1, [sp, #36]	; 0x24
 802038c:	0e09      	lsrs	r1, r1, #24
 802038e:	9111      	str	r1, [sp, #68]	; 0x44
 8020390:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020394:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020398:	910e      	str	r1, [sp, #56]	; 0x38
 802039a:	0e09      	lsrs	r1, r1, #24
 802039c:	9115      	str	r1, [sp, #84]	; 0x54
 802039e:	b292      	uxth	r2, r2
 80203a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203a2:	b280      	uxth	r0, r0
 80203a4:	fb02 f900 	mul.w	r9, r2, r0
 80203a8:	0112      	lsls	r2, r2, #4
 80203aa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80203ae:	eba2 0809 	sub.w	r8, r2, r9
 80203b2:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80203b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80203b8:	b280      	uxth	r0, r0
 80203ba:	fa1f f888 	uxth.w	r8, r8
 80203be:	1a09      	subs	r1, r1, r0
 80203c0:	fb08 f202 	mul.w	r2, r8, r2
 80203c4:	b289      	uxth	r1, r1
 80203c6:	fb01 220c 	mla	r2, r1, ip, r2
 80203ca:	fb00 2204 	mla	r2, r0, r4, r2
 80203ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80203d0:	fb09 2204 	mla	r2, r9, r4, r2
 80203d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80203d8:	2a00      	cmp	r2, #0
 80203da:	f000 80db 	beq.w	8020594 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80203de:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80203e2:	d019      	beq.n	8020418 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80203e4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80203e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80203ec:	fb0c fa0a 	mul.w	sl, ip, sl
 80203f0:	fb0c fc03 	mul.w	ip, ip, r3
 80203f4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80203f8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80203fc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020400:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020404:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020408:	4453      	add	r3, sl
 802040a:	0a3f      	lsrs	r7, r7, #8
 802040c:	0a1b      	lsrs	r3, r3, #8
 802040e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020412:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020416:	433b      	orrs	r3, r7
 8020418:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802041a:	2cff      	cmp	r4, #255	; 0xff
 802041c:	d020      	beq.n	8020460 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 802041e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020420:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020424:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020426:	4367      	muls	r7, r4
 8020428:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802042a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802042e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020432:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020434:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020438:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802043c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020440:	44bc      	add	ip, r7
 8020442:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020446:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802044a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802044e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020452:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020456:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802045a:	ea4c 040a 	orr.w	r4, ip, sl
 802045e:	940d      	str	r4, [sp, #52]	; 0x34
 8020460:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020462:	2cff      	cmp	r4, #255	; 0xff
 8020464:	d020      	beq.n	80204a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8020466:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020468:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802046c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802046e:	4367      	muls	r7, r4
 8020470:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020472:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020476:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802047a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802047c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020480:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020484:	fb04 fa0a 	mul.w	sl, r4, sl
 8020488:	44bc      	add	ip, r7
 802048a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802048e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020492:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020496:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802049a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802049e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80204a2:	ea4c 040a 	orr.w	r4, ip, sl
 80204a6:	9409      	str	r4, [sp, #36]	; 0x24
 80204a8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80204aa:	2cff      	cmp	r4, #255	; 0xff
 80204ac:	d020      	beq.n	80204f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80204ae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80204b0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80204b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80204b6:	4367      	muls	r7, r4
 80204b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80204ba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80204be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80204c2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80204c4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80204c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204cc:	fb04 fa0a 	mul.w	sl, r4, sl
 80204d0:	44bc      	add	ip, r7
 80204d2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80204d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204da:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80204de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80204ea:	ea4c 040a 	orr.w	r4, ip, sl
 80204ee:	940e      	str	r4, [sp, #56]	; 0x38
 80204f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80204f2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80204f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80204fa:	43d2      	mvns	r2, r2
 80204fc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020500:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020502:	b2d2      	uxtb	r2, r2
 8020504:	fb08 f707 	mul.w	r7, r8, r7
 8020508:	fb01 770c 	mla	r7, r1, ip, r7
 802050c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020510:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020512:	fb00 770c 	mla	r7, r0, ip, r7
 8020516:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802051a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802051c:	fb09 770c 	mla	r7, r9, ip, r7
 8020520:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020524:	fb08 f80c 	mul.w	r8, r8, ip
 8020528:	0a3f      	lsrs	r7, r7, #8
 802052a:	fb01 8303 	mla	r3, r1, r3, r8
 802052e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020530:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020534:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020538:	990e      	ldr	r1, [sp, #56]	; 0x38
 802053a:	fb00 330a 	mla	r3, r0, sl, r3
 802053e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020542:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020546:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802054a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802054e:	fb03 f102 	mul.w	r1, r3, r2
 8020552:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020556:	1c4b      	adds	r3, r1, #1
 8020558:	ea47 070c 	orr.w	r7, r7, ip
 802055c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020560:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8020564:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020568:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 802056c:	4353      	muls	r3, r2
 802056e:	1c59      	adds	r1, r3, #1
 8020570:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020574:	0a3b      	lsrs	r3, r7, #8
 8020576:	0c3f      	lsrs	r7, r7, #16
 8020578:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802057c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020580:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020584:	435a      	muls	r2, r3
 8020586:	1c53      	adds	r3, r2, #1
 8020588:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802058c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020590:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020594:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020596:	f10e 0e03 	add.w	lr, lr, #3
 802059a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802059c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80205a0:	441a      	add	r2, r3
 80205a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205a4:	9225      	str	r2, [sp, #148]	; 0x94
 80205a6:	441d      	add	r5, r3
 80205a8:	e65a      	b.n	8020260 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80205aa:	2800      	cmp	r0, #0
 80205ac:	f43f aef7 	beq.w	802039e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80205b0:	5c79      	ldrb	r1, [r7, r1]
 80205b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80205b6:	9109      	str	r1, [sp, #36]	; 0x24
 80205b8:	0e09      	lsrs	r1, r1, #24
 80205ba:	9111      	str	r1, [sp, #68]	; 0x44
 80205bc:	e6ef      	b.n	802039e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80205be:	b01b      	add	sp, #108	; 0x6c
 80205c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080205c4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80205c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205c8:	b08d      	sub	sp, #52	; 0x34
 80205ca:	468b      	mov	fp, r1
 80205cc:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 80205d0:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80205d4:	fb0c 5703 	mla	r7, ip, r3, r5
 80205d8:	f1bc 0f00 	cmp.w	ip, #0
 80205dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80205de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80205e2:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80205e6:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80205ea:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 80205ee:	eb02 0607 	add.w	r6, r2, r7
 80205f2:	f89b 4000 	ldrb.w	r4, [fp]
 80205f6:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80205fa:	f89b 1002 	ldrb.w	r1, [fp, #2]
 80205fe:	f2c0 80c1 	blt.w	8020784 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8020602:	45e6      	cmp	lr, ip
 8020604:	f340 80be 	ble.w	8020784 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8020608:	2d00      	cmp	r5, #0
 802060a:	f2c0 80b7 	blt.w	802077c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802060e:	42ab      	cmp	r3, r5
 8020610:	f340 80b4 	ble.w	802077c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8020614:	5dd2      	ldrb	r2, [r2, r7]
 8020616:	9205      	str	r2, [sp, #20]
 8020618:	7872      	ldrb	r2, [r6, #1]
 802061a:	9206      	str	r2, [sp, #24]
 802061c:	78b2      	ldrb	r2, [r6, #2]
 802061e:	9207      	str	r2, [sp, #28]
 8020620:	1c6a      	adds	r2, r5, #1
 8020622:	f100 80b6 	bmi.w	8020792 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8020626:	4293      	cmp	r3, r2
 8020628:	f340 80b3 	ble.w	8020792 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802062c:	f1b8 0f00 	cmp.w	r8, #0
 8020630:	f000 80af 	beq.w	8020792 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8020634:	78f2      	ldrb	r2, [r6, #3]
 8020636:	9201      	str	r2, [sp, #4]
 8020638:	7932      	ldrb	r2, [r6, #4]
 802063a:	9202      	str	r2, [sp, #8]
 802063c:	7972      	ldrb	r2, [r6, #5]
 802063e:	9203      	str	r2, [sp, #12]
 8020640:	f11c 0c01 	adds.w	ip, ip, #1
 8020644:	f100 80ad 	bmi.w	80207a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020648:	45e6      	cmp	lr, ip
 802064a:	f340 80aa 	ble.w	80207a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802064e:	f1ba 0f00 	cmp.w	sl, #0
 8020652:	f000 80a6 	beq.w	80207a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020656:	2d00      	cmp	r5, #0
 8020658:	f2c0 809f 	blt.w	802079a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 802065c:	42ab      	cmp	r3, r5
 802065e:	f340 809c 	ble.w	802079a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8020662:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020666:	f816 9002 	ldrb.w	r9, [r6, r2]
 802066a:	2203      	movs	r2, #3
 802066c:	fb03 6c02 	mla	ip, r3, r2, r6
 8020670:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8020674:	f89c e002 	ldrb.w	lr, [ip, #2]
 8020678:	9704      	str	r7, [sp, #16]
 802067a:	3501      	adds	r5, #1
 802067c:	f100 8098 	bmi.w	80207b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020680:	42ab      	cmp	r3, r5
 8020682:	f340 8095 	ble.w	80207b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020686:	f1b8 0f00 	cmp.w	r8, #0
 802068a:	f000 8091 	beq.w	80207b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 802068e:	f04f 0c03 	mov.w	ip, #3
 8020692:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8020696:	5cb5      	ldrb	r5, [r6, r2]
 8020698:	fb03 620c 	mla	r2, r3, ip, r6
 802069c:	fb03 630c 	mla	r3, r3, ip, r6
 80206a0:	7912      	ldrb	r2, [r2, #4]
 80206a2:	795e      	ldrb	r6, [r3, #5]
 80206a4:	fa1f f388 	uxth.w	r3, r8
 80206a8:	fa1f fc8a 	uxth.w	ip, sl
 80206ac:	fb03 f70c 	mul.w	r7, r3, ip
 80206b0:	011b      	lsls	r3, r3, #4
 80206b2:	9708      	str	r7, [sp, #32]
 80206b4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80206b8:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 80206bc:	1bdb      	subs	r3, r3, r7
 80206be:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80206c2:	fa1f fc8c 	uxth.w	ip, ip
 80206c6:	b29b      	uxth	r3, r3
 80206c8:	9709      	str	r7, [sp, #36]	; 0x24
 80206ca:	ebaa 0a0c 	sub.w	sl, sl, ip
 80206ce:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80206d0:	930a      	str	r3, [sp, #40]	; 0x28
 80206d2:	fa1f fa8a 	uxth.w	sl, sl
 80206d6:	ea6f 0807 	mvn.w	r8, r7
 80206da:	9f01      	ldr	r7, [sp, #4]
 80206dc:	435f      	muls	r7, r3
 80206de:	9b05      	ldr	r3, [sp, #20]
 80206e0:	fa5f f888 	uxtb.w	r8, r8
 80206e4:	fb0a 7703 	mla	r7, sl, r3, r7
 80206e8:	9b08      	ldr	r3, [sp, #32]
 80206ea:	fb14 f408 	smulbb	r4, r4, r8
 80206ee:	fb0c 7709 	mla	r7, ip, r9, r7
 80206f2:	fb10 f008 	smulbb	r0, r0, r8
 80206f6:	fb11 f108 	smulbb	r1, r1, r8
 80206fa:	fb03 7705 	mla	r7, r3, r5, r7
 80206fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020700:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020704:	fb07 4703 	mla	r7, r7, r3, r4
 8020708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802070a:	b2bf      	uxth	r7, r7
 802070c:	1c7c      	adds	r4, r7, #1
 802070e:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8020712:	1224      	asrs	r4, r4, #8
 8020714:	f88b 4000 	strb.w	r4, [fp]
 8020718:	9c02      	ldr	r4, [sp, #8]
 802071a:	435c      	muls	r4, r3
 802071c:	9b06      	ldr	r3, [sp, #24]
 802071e:	fb0a 4403 	mla	r4, sl, r3, r4
 8020722:	9b04      	ldr	r3, [sp, #16]
 8020724:	fb0c 4403 	mla	r4, ip, r3, r4
 8020728:	9b08      	ldr	r3, [sp, #32]
 802072a:	fb03 4402 	mla	r4, r3, r2, r4
 802072e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020732:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020736:	fb04 0403 	mla	r4, r4, r3, r0
 802073a:	9b03      	ldr	r3, [sp, #12]
 802073c:	435a      	muls	r2, r3
 802073e:	b2a4      	uxth	r4, r4
 8020740:	4613      	mov	r3, r2
 8020742:	9a07      	ldr	r2, [sp, #28]
 8020744:	1c60      	adds	r0, r4, #1
 8020746:	fb0a 3a02 	mla	sl, sl, r2, r3
 802074a:	9b08      	ldr	r3, [sp, #32]
 802074c:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8020750:	fb0c ac0e 	mla	ip, ip, lr, sl
 8020754:	1224      	asrs	r4, r4, #8
 8020756:	fb03 c606 	mla	r6, r3, r6, ip
 802075a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802075c:	f88b 4001 	strb.w	r4, [fp, #1]
 8020760:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020764:	fb06 1103 	mla	r1, r6, r3, r1
 8020768:	b289      	uxth	r1, r1
 802076a:	1c4e      	adds	r6, r1, #1
 802076c:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8020770:	1209      	asrs	r1, r1, #8
 8020772:	f88b 1002 	strb.w	r1, [fp, #2]
 8020776:	b00d      	add	sp, #52	; 0x34
 8020778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802077c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020780:	9405      	str	r4, [sp, #20]
 8020782:	e74d      	b.n	8020620 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8020784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020788:	9401      	str	r4, [sp, #4]
 802078a:	9405      	str	r4, [sp, #20]
 802078c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020790:	e756      	b.n	8020640 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8020792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020796:	9401      	str	r4, [sp, #4]
 8020798:	e752      	b.n	8020640 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 802079a:	468e      	mov	lr, r1
 802079c:	9004      	str	r0, [sp, #16]
 802079e:	46a1      	mov	r9, r4
 80207a0:	e76b      	b.n	802067a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 80207a2:	460e      	mov	r6, r1
 80207a4:	4602      	mov	r2, r0
 80207a6:	4625      	mov	r5, r4
 80207a8:	468e      	mov	lr, r1
 80207aa:	9004      	str	r0, [sp, #16]
 80207ac:	46a1      	mov	r9, r4
 80207ae:	e779      	b.n	80206a4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 80207b0:	460e      	mov	r6, r1
 80207b2:	4602      	mov	r2, r0
 80207b4:	4625      	mov	r5, r4
 80207b6:	e775      	b.n	80206a4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

080207b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207bc:	b09f      	sub	sp, #124	; 0x7c
 80207be:	920e      	str	r2, [sp, #56]	; 0x38
 80207c0:	9307      	str	r3, [sp, #28]
 80207c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80207c4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80207c8:	901d      	str	r0, [sp, #116]	; 0x74
 80207ca:	930c      	str	r3, [sp, #48]	; 0x30
 80207cc:	6850      	ldr	r0, [r2, #4]
 80207ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80207d0:	6812      	ldr	r2, [r2, #0]
 80207d2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80207d6:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 80207da:	fb00 1303 	mla	r3, r0, r3, r1
 80207de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207e2:	18d3      	adds	r3, r2, r3
 80207e4:	9308      	str	r3, [sp, #32]
 80207e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80207e8:	681b      	ldr	r3, [r3, #0]
 80207ea:	930a      	str	r3, [sp, #40]	; 0x28
 80207ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207ee:	43db      	mvns	r3, r3
 80207f0:	b2db      	uxtb	r3, r3
 80207f2:	9309      	str	r3, [sp, #36]	; 0x24
 80207f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	dc03      	bgt.n	8020802 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80207fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	f340 81f5 	ble.w	8020bec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8020802:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020804:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020808:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802080c:	1e48      	subs	r0, r1, #1
 802080e:	1e54      	subs	r4, r2, #1
 8020810:	9b07      	ldr	r3, [sp, #28]
 8020812:	2b00      	cmp	r3, #0
 8020814:	f340 80d5 	ble.w	80209c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020818:	ea5f 452a 	movs.w	r5, sl, asr #16
 802081c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8020820:	d406      	bmi.n	8020830 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020822:	4285      	cmp	r5, r0
 8020824:	da04      	bge.n	8020830 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020826:	2b00      	cmp	r3, #0
 8020828:	db02      	blt.n	8020830 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802082a:	42a3      	cmp	r3, r4
 802082c:	f2c0 80ca 	blt.w	80209c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8020830:	3501      	adds	r5, #1
 8020832:	f100 80bb 	bmi.w	80209ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020836:	42a9      	cmp	r1, r5
 8020838:	f2c0 80b8 	blt.w	80209ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802083c:	3301      	adds	r3, #1
 802083e:	f100 80b5 	bmi.w	80209ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020842:	429a      	cmp	r2, r3
 8020844:	f2c0 80b2 	blt.w	80209ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020848:	9b07      	ldr	r3, [sp, #28]
 802084a:	9d08      	ldr	r5, [sp, #32]
 802084c:	930d      	str	r3, [sp, #52]	; 0x34
 802084e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020850:	2b00      	cmp	r3, #0
 8020852:	f340 80d6 	ble.w	8020a02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8020856:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8020858:	ea4f 4428 	mov.w	r4, r8, asr #16
 802085c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802085e:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8020862:	68c6      	ldr	r6, [r0, #12]
 8020864:	ea5f 402a 	movs.w	r0, sl, asr #16
 8020868:	f3c8 3103 	ubfx	r1, r8, #12, #4
 802086c:	689b      	ldr	r3, [r3, #8]
 802086e:	f100 810f 	bmi.w	8020a90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020872:	1e5f      	subs	r7, r3, #1
 8020874:	42b8      	cmp	r0, r7
 8020876:	f280 810b 	bge.w	8020a90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802087a:	2c00      	cmp	r4, #0
 802087c:	f2c0 8108 	blt.w	8020a90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020880:	1e77      	subs	r7, r6, #1
 8020882:	42bc      	cmp	r4, r7
 8020884:	f280 8104 	bge.w	8020a90 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020888:	b21b      	sxth	r3, r3
 802088a:	fb04 0003 	mla	r0, r4, r3, r0
 802088e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020890:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020894:	1826      	adds	r6, r4, r0
 8020896:	5c24      	ldrb	r4, [r4, r0]
 8020898:	78b7      	ldrb	r7, [r6, #2]
 802089a:	7870      	ldrb	r0, [r6, #1]
 802089c:	970f      	str	r7, [sp, #60]	; 0x3c
 802089e:	7977      	ldrb	r7, [r6, #5]
 80208a0:	f896 e003 	ldrb.w	lr, [r6, #3]
 80208a4:	f896 c004 	ldrb.w	ip, [r6, #4]
 80208a8:	9710      	str	r7, [sp, #64]	; 0x40
 80208aa:	b1c9      	cbz	r1, 80208e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80208ac:	f04f 0b03 	mov.w	fp, #3
 80208b0:	f06f 0904 	mvn.w	r9, #4
 80208b4:	3605      	adds	r6, #5
 80208b6:	fb13 930b 	smlabb	r3, r3, fp, r9
 80208ba:	eb06 0b03 	add.w	fp, r6, r3
 80208be:	5cf3      	ldrb	r3, [r6, r3]
 80208c0:	9311      	str	r3, [sp, #68]	; 0x44
 80208c2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80208c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80208c8:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80208cc:	9315      	str	r3, [sp, #84]	; 0x54
 80208ce:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80208d2:	9312      	str	r3, [sp, #72]	; 0x48
 80208d4:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80208d8:	9314      	str	r3, [sp, #80]	; 0x50
 80208da:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80208de:	9316      	str	r3, [sp, #88]	; 0x58
 80208e0:	b292      	uxth	r2, r2
 80208e2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80208e4:	b289      	uxth	r1, r1
 80208e6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80208ea:	fb02 f601 	mul.w	r6, r2, r1
 80208ee:	0112      	lsls	r2, r2, #4
 80208f0:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80208f4:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 80208f8:	1b92      	subs	r2, r2, r6
 80208fa:	b289      	uxth	r1, r1
 80208fc:	b292      	uxth	r2, r2
 80208fe:	eba9 0901 	sub.w	r9, r9, r1
 8020902:	fb02 fe0e 	mul.w	lr, r2, lr
 8020906:	fa1f f989 	uxth.w	r9, r9
 802090a:	fb02 fc0c 	mul.w	ip, r2, ip
 802090e:	fb09 e404 	mla	r4, r9, r4, lr
 8020912:	f895 e000 	ldrb.w	lr, [r5]
 8020916:	fb09 c000 	mla	r0, r9, r0, ip
 802091a:	fb01 4407 	mla	r4, r1, r7, r4
 802091e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8020920:	fb06 4407 	mla	r4, r6, r7, r4
 8020924:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020926:	fb1e fe07 	smulbb	lr, lr, r7
 802092a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802092e:	fb04 e403 	mla	r4, r4, r3, lr
 8020932:	b2a4      	uxth	r4, r4
 8020934:	f104 0e01 	add.w	lr, r4, #1
 8020938:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 802093c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802093e:	fb01 0004 	mla	r0, r1, r4, r0
 8020942:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020944:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020948:	fb06 0004 	mla	r0, r6, r4, r0
 802094c:	786c      	ldrb	r4, [r5, #1]
 802094e:	f885 e000 	strb.w	lr, [r5]
 8020952:	fb14 f407 	smulbb	r4, r4, r7
 8020956:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802095a:	fb00 4003 	mla	r0, r0, r3, r4
 802095e:	b280      	uxth	r0, r0
 8020960:	1c44      	adds	r4, r0, #1
 8020962:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020966:	1200      	asrs	r0, r0, #8
 8020968:	7068      	strb	r0, [r5, #1]
 802096a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802096c:	4342      	muls	r2, r0
 802096e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020970:	fb09 2200 	mla	r2, r9, r0, r2
 8020974:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020976:	fb01 2100 	mla	r1, r1, r0, r2
 802097a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802097c:	fb06 1602 	mla	r6, r6, r2, r1
 8020980:	78a9      	ldrb	r1, [r5, #2]
 8020982:	fb11 f107 	smulbb	r1, r1, r7
 8020986:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802098a:	fb06 1303 	mla	r3, r6, r3, r1
 802098e:	b29b      	uxth	r3, r3
 8020990:	1c5e      	adds	r6, r3, #1
 8020992:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020996:	121b      	asrs	r3, r3, #8
 8020998:	70ab      	strb	r3, [r5, #2]
 802099a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802099c:	3503      	adds	r5, #3
 802099e:	449a      	add	sl, r3
 80209a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80209a2:	4498      	add	r8, r3
 80209a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80209a6:	3b01      	subs	r3, #1
 80209a8:	930d      	str	r3, [sp, #52]	; 0x34
 80209aa:	e750      	b.n	802084e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80209ac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80209ae:	449a      	add	sl, r3
 80209b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80209b2:	4498      	add	r8, r3
 80209b4:	9b07      	ldr	r3, [sp, #28]
 80209b6:	3b01      	subs	r3, #1
 80209b8:	9307      	str	r3, [sp, #28]
 80209ba:	9b08      	ldr	r3, [sp, #32]
 80209bc:	3303      	adds	r3, #3
 80209be:	9308      	str	r3, [sp, #32]
 80209c0:	e726      	b.n	8020810 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80209c2:	d026      	beq.n	8020a12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80209c4:	9b07      	ldr	r3, [sp, #28]
 80209c6:	982b      	ldr	r0, [sp, #172]	; 0xac
 80209c8:	3b01      	subs	r3, #1
 80209ca:	fb00 a003 	mla	r0, r0, r3, sl
 80209ce:	1400      	asrs	r0, r0, #16
 80209d0:	f53f af3a 	bmi.w	8020848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80209d4:	3901      	subs	r1, #1
 80209d6:	4288      	cmp	r0, r1
 80209d8:	f6bf af36 	bge.w	8020848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80209dc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80209de:	fb01 8303 	mla	r3, r1, r3, r8
 80209e2:	141b      	asrs	r3, r3, #16
 80209e4:	f53f af30 	bmi.w	8020848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80209e8:	3a01      	subs	r2, #1
 80209ea:	4293      	cmp	r3, r2
 80209ec:	f6bf af2c 	bge.w	8020848 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80209f0:	9b08      	ldr	r3, [sp, #32]
 80209f2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80209f6:	1cdd      	adds	r5, r3, #3
 80209f8:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 80209fc:	f1bc 0f00 	cmp.w	ip, #0
 8020a00:	dc5f      	bgt.n	8020ac2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8020a02:	9b07      	ldr	r3, [sp, #28]
 8020a04:	9a08      	ldr	r2, [sp, #32]
 8020a06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020a0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020a0e:	441a      	add	r2, r3
 8020a10:	9208      	str	r2, [sp, #32]
 8020a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a14:	2b00      	cmp	r3, #0
 8020a16:	f340 80e9 	ble.w	8020bec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8020a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020a20:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020a24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020a28:	eef0 6a62 	vmov.f32	s13, s5
 8020a2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020a30:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020a34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a38:	ee16 aa90 	vmov	sl, s13
 8020a3c:	eef0 6a43 	vmov.f32	s13, s6
 8020a40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a44:	ee16 8a90 	vmov	r8, s13
 8020a48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a50:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a58:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a60:	ee12 2a90 	vmov	r2, s5
 8020a64:	eef0 2a47 	vmov.f32	s5, s14
 8020a68:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a6c:	ee13 2a10 	vmov	r2, s6
 8020a70:	932b      	str	r3, [sp, #172]	; 0xac
 8020a72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020a74:	eeb0 3a67 	vmov.f32	s6, s15
 8020a78:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a7c:	932c      	str	r3, [sp, #176]	; 0xb0
 8020a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020a80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a82:	3b01      	subs	r3, #1
 8020a84:	930b      	str	r3, [sp, #44]	; 0x2c
 8020a86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020a88:	bf08      	it	eq
 8020a8a:	4613      	moveq	r3, r2
 8020a8c:	9307      	str	r3, [sp, #28]
 8020a8e:	e6b1      	b.n	80207f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020a90:	1c47      	adds	r7, r0, #1
 8020a92:	d482      	bmi.n	802099a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020a94:	42bb      	cmp	r3, r7
 8020a96:	db80      	blt.n	802099a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020a98:	1c67      	adds	r7, r4, #1
 8020a9a:	f53f af7e 	bmi.w	802099a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020a9e:	42be      	cmp	r6, r7
 8020aa0:	f6ff af7b 	blt.w	802099a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020aa4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020aa6:	b236      	sxth	r6, r6
 8020aa8:	9001      	str	r0, [sp, #4]
 8020aaa:	b21b      	sxth	r3, r3
 8020aac:	9600      	str	r6, [sp, #0]
 8020aae:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020ab0:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8020ab4:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8020ab8:	4629      	mov	r1, r5
 8020aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020abc:	f7ff fd82 	bl	80205c4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020ac0:	e76b      	b.n	802099a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020ac2:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8020ac4:	ea4f 402a 	mov.w	r0, sl, asr #16
 8020ac8:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8020acc:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8020ad0:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8020ad4:	ea4f 4128 	mov.w	r1, r8, asr #16
 8020ad8:	fb07 0101 	mla	r1, r7, r1, r0
 8020adc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020ade:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020ae2:	1844      	adds	r4, r0, r1
 8020ae4:	5c40      	ldrb	r0, [r0, r1]
 8020ae6:	78a6      	ldrb	r6, [r4, #2]
 8020ae8:	7861      	ldrb	r1, [r4, #1]
 8020aea:	960f      	str	r6, [sp, #60]	; 0x3c
 8020aec:	78e6      	ldrb	r6, [r4, #3]
 8020aee:	910d      	str	r1, [sp, #52]	; 0x34
 8020af0:	9610      	str	r6, [sp, #64]	; 0x40
 8020af2:	f894 9004 	ldrb.w	r9, [r4, #4]
 8020af6:	f894 b005 	ldrb.w	fp, [r4, #5]
 8020afa:	b192      	cbz	r2, 8020b22 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8020afc:	f06f 0604 	mvn.w	r6, #4
 8020b00:	2103      	movs	r1, #3
 8020b02:	3405      	adds	r4, #5
 8020b04:	fb17 6701 	smlabb	r7, r7, r1, r6
 8020b08:	19e6      	adds	r6, r4, r7
 8020b0a:	5de4      	ldrb	r4, [r4, r7]
 8020b0c:	9417      	str	r4, [sp, #92]	; 0x5c
 8020b0e:	7874      	ldrb	r4, [r6, #1]
 8020b10:	9419      	str	r4, [sp, #100]	; 0x64
 8020b12:	78b4      	ldrb	r4, [r6, #2]
 8020b14:	941b      	str	r4, [sp, #108]	; 0x6c
 8020b16:	78f4      	ldrb	r4, [r6, #3]
 8020b18:	9418      	str	r4, [sp, #96]	; 0x60
 8020b1a:	7934      	ldrb	r4, [r6, #4]
 8020b1c:	941a      	str	r4, [sp, #104]	; 0x68
 8020b1e:	7974      	ldrb	r4, [r6, #5]
 8020b20:	941c      	str	r4, [sp, #112]	; 0x70
 8020b22:	b29b      	uxth	r3, r3
 8020b24:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020b26:	b292      	uxth	r2, r2
 8020b28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020b2a:	3503      	adds	r5, #3
 8020b2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020b30:	fb03 f402 	mul.w	r4, r3, r2
 8020b34:	011b      	lsls	r3, r3, #4
 8020b36:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8020b3a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8020b3e:	1b1b      	subs	r3, r3, r4
 8020b40:	b292      	uxth	r2, r2
 8020b42:	b29b      	uxth	r3, r3
 8020b44:	1ab6      	subs	r6, r6, r2
 8020b46:	435f      	muls	r7, r3
 8020b48:	b2b6      	uxth	r6, r6
 8020b4a:	fb03 f909 	mul.w	r9, r3, r9
 8020b4e:	fb03 fb0b 	mul.w	fp, r3, fp
 8020b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020b54:	fb06 7000 	mla	r0, r6, r0, r7
 8020b58:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8020b5a:	fb06 bb03 	mla	fp, r6, r3, fp
 8020b5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020b60:	fb02 0007 	mla	r0, r2, r7, r0
 8020b64:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8020b66:	fb02 bb03 	mla	fp, r2, r3, fp
 8020b6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020b6c:	fb04 0007 	mla	r0, r4, r7, r0
 8020b70:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8020b74:	fb17 f701 	smulbb	r7, r7, r1
 8020b78:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020b7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020b7e:	fb00 700e 	mla	r0, r0, lr, r7
 8020b82:	fb06 9101 	mla	r1, r6, r1, r9
 8020b86:	b280      	uxth	r0, r0
 8020b88:	1c47      	adds	r7, r0, #1
 8020b8a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8020b8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020b90:	1200      	asrs	r0, r0, #8
 8020b92:	f805 0c06 	strb.w	r0, [r5, #-6]
 8020b96:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020b98:	fb02 1100 	mla	r1, r2, r0, r1
 8020b9c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8020b9e:	fb04 1100 	mla	r1, r4, r0, r1
 8020ba2:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8020ba6:	fb04 b403 	mla	r4, r4, r3, fp
 8020baa:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8020bae:	fb10 f007 	smulbb	r0, r0, r7
 8020bb2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020bb6:	fb13 f307 	smulbb	r3, r3, r7
 8020bba:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020bbe:	fb01 010e 	mla	r1, r1, lr, r0
 8020bc2:	fb04 340e 	mla	r4, r4, lr, r3
 8020bc6:	b289      	uxth	r1, r1
 8020bc8:	b2a4      	uxth	r4, r4
 8020bca:	1c48      	adds	r0, r1, #1
 8020bcc:	1c63      	adds	r3, r4, #1
 8020bce:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020bd2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020bd6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020bd8:	1209      	asrs	r1, r1, #8
 8020bda:	1224      	asrs	r4, r4, #8
 8020bdc:	449a      	add	sl, r3
 8020bde:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020be0:	f805 1c05 	strb.w	r1, [r5, #-5]
 8020be4:	f805 4c04 	strb.w	r4, [r5, #-4]
 8020be8:	4498      	add	r8, r3
 8020bea:	e707      	b.n	80209fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8020bec:	b01f      	add	sp, #124	; 0x7c
 8020bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020bf2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020bf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bf6:	b087      	sub	sp, #28
 8020bf8:	780d      	ldrb	r5, [r1, #0]
 8020bfa:	784c      	ldrb	r4, [r1, #1]
 8020bfc:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8020c00:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8020c04:	9004      	str	r0, [sp, #16]
 8020c06:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8020c0a:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8020c0e:	9005      	str	r0, [sp, #20]
 8020c10:	fb06 bc03 	mla	ip, r6, r3, fp
 8020c14:	2e00      	cmp	r6, #0
 8020c16:	7888      	ldrb	r0, [r1, #2]
 8020c18:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020c1c:	eb02 090c 	add.w	r9, r2, ip
 8020c20:	f2c0 8084 	blt.w	8020d2c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8020c24:	42b7      	cmp	r7, r6
 8020c26:	f340 8081 	ble.w	8020d2c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8020c2a:	f1bb 0f00 	cmp.w	fp, #0
 8020c2e:	db79      	blt.n	8020d24 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8020c30:	455b      	cmp	r3, fp
 8020c32:	dd77      	ble.n	8020d24 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8020c34:	f812 200c 	ldrb.w	r2, [r2, ip]
 8020c38:	9201      	str	r2, [sp, #4]
 8020c3a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020c3e:	9202      	str	r2, [sp, #8]
 8020c40:	f899 2002 	ldrb.w	r2, [r9, #2]
 8020c44:	9203      	str	r2, [sp, #12]
 8020c46:	f11b 0201 	adds.w	r2, fp, #1
 8020c4a:	d476      	bmi.n	8020d3a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020c4c:	4293      	cmp	r3, r2
 8020c4e:	dd74      	ble.n	8020d3a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020c50:	9a04      	ldr	r2, [sp, #16]
 8020c52:	2a00      	cmp	r2, #0
 8020c54:	d071      	beq.n	8020d3a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020c56:	f899 8003 	ldrb.w	r8, [r9, #3]
 8020c5a:	f899 c004 	ldrb.w	ip, [r9, #4]
 8020c5e:	f899 a005 	ldrb.w	sl, [r9, #5]
 8020c62:	3601      	adds	r6, #1
 8020c64:	d471      	bmi.n	8020d4a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8020c66:	42b7      	cmp	r7, r6
 8020c68:	dd6f      	ble.n	8020d4a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8020c6a:	9a05      	ldr	r2, [sp, #20]
 8020c6c:	2a00      	cmp	r2, #0
 8020c6e:	d06c      	beq.n	8020d4a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8020c70:	f1bb 0f00 	cmp.w	fp, #0
 8020c74:	db65      	blt.n	8020d42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8020c76:	455b      	cmp	r3, fp
 8020c78:	dd63      	ble.n	8020d42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8020c7a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020c7e:	f819 e002 	ldrb.w	lr, [r9, r2]
 8020c82:	2203      	movs	r2, #3
 8020c84:	fb03 9602 	mla	r6, r3, r2, r9
 8020c88:	7877      	ldrb	r7, [r6, #1]
 8020c8a:	78b6      	ldrb	r6, [r6, #2]
 8020c8c:	f11b 0b01 	adds.w	fp, fp, #1
 8020c90:	d40c      	bmi.n	8020cac <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020c92:	455b      	cmp	r3, fp
 8020c94:	dd0a      	ble.n	8020cac <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020c96:	9a04      	ldr	r2, [sp, #16]
 8020c98:	b142      	cbz	r2, 8020cac <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020c9a:	2203      	movs	r2, #3
 8020c9c:	fb13 2002 	smlabb	r0, r3, r2, r2
 8020ca0:	f819 5000 	ldrb.w	r5, [r9, r0]
 8020ca4:	fb03 9002 	mla	r0, r3, r2, r9
 8020ca8:	7904      	ldrb	r4, [r0, #4]
 8020caa:	7940      	ldrb	r0, [r0, #5]
 8020cac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020cb0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8020cb4:	fb03 fb02 	mul.w	fp, r3, r2
 8020cb8:	011b      	lsls	r3, r3, #4
 8020cba:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8020cbe:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8020cc2:	eba3 030b 	sub.w	r3, r3, fp
 8020cc6:	b292      	uxth	r2, r2
 8020cc8:	b29b      	uxth	r3, r3
 8020cca:	eba9 0902 	sub.w	r9, r9, r2
 8020cce:	9304      	str	r3, [sp, #16]
 8020cd0:	fa1f f989 	uxth.w	r9, r9
 8020cd4:	fb03 f808 	mul.w	r8, r3, r8
 8020cd8:	9b01      	ldr	r3, [sp, #4]
 8020cda:	fb09 8803 	mla	r8, r9, r3, r8
 8020cde:	9b04      	ldr	r3, [sp, #16]
 8020ce0:	fb03 fc0c 	mul.w	ip, r3, ip
 8020ce4:	9b02      	ldr	r3, [sp, #8]
 8020ce6:	fb02 880e 	mla	r8, r2, lr, r8
 8020cea:	fb09 cc03 	mla	ip, r9, r3, ip
 8020cee:	9b04      	ldr	r3, [sp, #16]
 8020cf0:	fb0b 8805 	mla	r8, fp, r5, r8
 8020cf4:	fb02 c707 	mla	r7, r2, r7, ip
 8020cf8:	fb03 f30a 	mul.w	r3, r3, sl
 8020cfc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020d00:	fb0b 7404 	mla	r4, fp, r4, r7
 8020d04:	f881 8000 	strb.w	r8, [r1]
 8020d08:	1224      	asrs	r4, r4, #8
 8020d0a:	704c      	strb	r4, [r1, #1]
 8020d0c:	9c03      	ldr	r4, [sp, #12]
 8020d0e:	fb09 3904 	mla	r9, r9, r4, r3
 8020d12:	fb02 9206 	mla	r2, r2, r6, r9
 8020d16:	fb0b 2000 	mla	r0, fp, r0, r2
 8020d1a:	1200      	asrs	r0, r0, #8
 8020d1c:	7088      	strb	r0, [r1, #2]
 8020d1e:	b007      	add	sp, #28
 8020d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d24:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8020d28:	9501      	str	r5, [sp, #4]
 8020d2a:	e78c      	b.n	8020c46 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8020d2c:	4682      	mov	sl, r0
 8020d2e:	46a4      	mov	ip, r4
 8020d30:	46a8      	mov	r8, r5
 8020d32:	9501      	str	r5, [sp, #4]
 8020d34:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8020d38:	e793      	b.n	8020c62 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8020d3a:	4682      	mov	sl, r0
 8020d3c:	46a4      	mov	ip, r4
 8020d3e:	46a8      	mov	r8, r5
 8020d40:	e78f      	b.n	8020c62 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8020d42:	4606      	mov	r6, r0
 8020d44:	4627      	mov	r7, r4
 8020d46:	46ae      	mov	lr, r5
 8020d48:	e7a0      	b.n	8020c8c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020d4a:	4606      	mov	r6, r0
 8020d4c:	4627      	mov	r7, r4
 8020d4e:	46ae      	mov	lr, r5
 8020d50:	e7ac      	b.n	8020cac <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08020d52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d56:	b09b      	sub	sp, #108	; 0x6c
 8020d58:	920b      	str	r2, [sp, #44]	; 0x2c
 8020d5a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020d5c:	9019      	str	r0, [sp, #100]	; 0x64
 8020d5e:	9109      	str	r1, [sp, #36]	; 0x24
 8020d60:	6850      	ldr	r0, [r2, #4]
 8020d62:	9306      	str	r3, [sp, #24]
 8020d64:	6812      	ldr	r2, [r2, #0]
 8020d66:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8020d6a:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 8020d6e:	fb00 1303 	mla	r3, r0, r3, r1
 8020d72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d76:	18d3      	adds	r3, r2, r3
 8020d78:	9307      	str	r3, [sp, #28]
 8020d7a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d7c:	681b      	ldr	r3, [r3, #0]
 8020d7e:	9308      	str	r3, [sp, #32]
 8020d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	dc03      	bgt.n	8020d8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d88:	2b00      	cmp	r3, #0
 8020d8a:	f340 81ab 	ble.w	80210e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8020d8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d90:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d94:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020d98:	1e48      	subs	r0, r1, #1
 8020d9a:	1e55      	subs	r5, r2, #1
 8020d9c:	9b06      	ldr	r3, [sp, #24]
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	f340 80b1 	ble.w	8020f06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020da4:	ea5f 462b 	movs.w	r6, fp, asr #16
 8020da8:	ea4f 4324 	mov.w	r3, r4, asr #16
 8020dac:	d406      	bmi.n	8020dbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020dae:	4286      	cmp	r6, r0
 8020db0:	da04      	bge.n	8020dbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020db2:	2b00      	cmp	r3, #0
 8020db4:	db02      	blt.n	8020dbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020db6:	42ab      	cmp	r3, r5
 8020db8:	f2c0 80a6 	blt.w	8020f08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8020dbc:	3601      	adds	r6, #1
 8020dbe:	f100 8097 	bmi.w	8020ef0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020dc2:	42b1      	cmp	r1, r6
 8020dc4:	f2c0 8094 	blt.w	8020ef0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020dc8:	3301      	adds	r3, #1
 8020dca:	f100 8091 	bmi.w	8020ef0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020dce:	429a      	cmp	r2, r3
 8020dd0:	f2c0 808e 	blt.w	8020ef0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020dd4:	9b06      	ldr	r3, [sp, #24]
 8020dd6:	9e07      	ldr	r6, [sp, #28]
 8020dd8:	930a      	str	r3, [sp, #40]	; 0x28
 8020dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	f340 80b0 	ble.w	8020f42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020de2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8020de4:	1425      	asrs	r5, r4, #16
 8020de6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020de8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020dec:	68c7      	ldr	r7, [r0, #12]
 8020dee:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020df2:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020df6:	689b      	ldr	r3, [r3, #8]
 8020df8:	f100 80ea 	bmi.w	8020fd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020dfc:	f103 3cff 	add.w	ip, r3, #4294967295
 8020e00:	4560      	cmp	r0, ip
 8020e02:	f280 80e5 	bge.w	8020fd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020e06:	2d00      	cmp	r5, #0
 8020e08:	f2c0 80e2 	blt.w	8020fd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020e0c:	f107 3cff 	add.w	ip, r7, #4294967295
 8020e10:	4565      	cmp	r5, ip
 8020e12:	f280 80dd 	bge.w	8020fd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020e16:	b21b      	sxth	r3, r3
 8020e18:	fb05 0003 	mla	r0, r5, r3, r0
 8020e1c:	9d08      	ldr	r5, [sp, #32]
 8020e1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020e22:	182f      	adds	r7, r5, r0
 8020e24:	5c2d      	ldrb	r5, [r5, r0]
 8020e26:	7878      	ldrb	r0, [r7, #1]
 8020e28:	f897 e002 	ldrb.w	lr, [r7, #2]
 8020e2c:	900c      	str	r0, [sp, #48]	; 0x30
 8020e2e:	f897 9003 	ldrb.w	r9, [r7, #3]
 8020e32:	f897 8004 	ldrb.w	r8, [r7, #4]
 8020e36:	f897 a005 	ldrb.w	sl, [r7, #5]
 8020e3a:	b1c9      	cbz	r1, 8020e70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020e3c:	f04f 0c03 	mov.w	ip, #3
 8020e40:	f06f 0004 	mvn.w	r0, #4
 8020e44:	3705      	adds	r7, #5
 8020e46:	fb13 030c 	smlabb	r3, r3, ip, r0
 8020e4a:	eb07 0c03 	add.w	ip, r7, r3
 8020e4e:	5cfb      	ldrb	r3, [r7, r3]
 8020e50:	930d      	str	r3, [sp, #52]	; 0x34
 8020e52:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8020e58:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8020e5c:	9311      	str	r3, [sp, #68]	; 0x44
 8020e5e:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8020e62:	930e      	str	r3, [sp, #56]	; 0x38
 8020e64:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8020e68:	9310      	str	r3, [sp, #64]	; 0x40
 8020e6a:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8020e6e:	9312      	str	r3, [sp, #72]	; 0x48
 8020e70:	b292      	uxth	r2, r2
 8020e72:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020e74:	b289      	uxth	r1, r1
 8020e76:	fb02 f301 	mul.w	r3, r2, r1
 8020e7a:	0112      	lsls	r2, r2, #4
 8020e7c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020e80:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8020e84:	1ad2      	subs	r2, r2, r3
 8020e86:	b289      	uxth	r1, r1
 8020e88:	b292      	uxth	r2, r2
 8020e8a:	1a7f      	subs	r7, r7, r1
 8020e8c:	fb02 f909 	mul.w	r9, r2, r9
 8020e90:	b2bf      	uxth	r7, r7
 8020e92:	fb02 f808 	mul.w	r8, r2, r8
 8020e96:	fb02 fa0a 	mul.w	sl, r2, sl
 8020e9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e9c:	fb07 9905 	mla	r9, r7, r5, r9
 8020ea0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020ea2:	fb07 8800 	mla	r8, r7, r0, r8
 8020ea6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020ea8:	fb07 aa0e 	mla	sl, r7, lr, sl
 8020eac:	fb01 9905 	mla	r9, r1, r5, r9
 8020eb0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020eb2:	fb01 8800 	mla	r8, r1, r0, r8
 8020eb6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020eb8:	fb01 a102 	mla	r1, r1, r2, sl
 8020ebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020ebe:	fb03 9905 	mla	r9, r3, r5, r9
 8020ec2:	fb03 8800 	mla	r8, r3, r0, r8
 8020ec6:	fb03 1302 	mla	r3, r3, r2, r1
 8020eca:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020ece:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020ed2:	121b      	asrs	r3, r3, #8
 8020ed4:	f886 9000 	strb.w	r9, [r6]
 8020ed8:	f886 8001 	strb.w	r8, [r6, #1]
 8020edc:	70b3      	strb	r3, [r6, #2]
 8020ede:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020ee0:	3603      	adds	r6, #3
 8020ee2:	449b      	add	fp, r3
 8020ee4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ee6:	441c      	add	r4, r3
 8020ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020eea:	3b01      	subs	r3, #1
 8020eec:	930a      	str	r3, [sp, #40]	; 0x28
 8020eee:	e774      	b.n	8020dda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8020ef0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020ef2:	449b      	add	fp, r3
 8020ef4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020ef6:	441c      	add	r4, r3
 8020ef8:	9b06      	ldr	r3, [sp, #24]
 8020efa:	3b01      	subs	r3, #1
 8020efc:	9306      	str	r3, [sp, #24]
 8020efe:	9b07      	ldr	r3, [sp, #28]
 8020f00:	3303      	adds	r3, #3
 8020f02:	9307      	str	r3, [sp, #28]
 8020f04:	e74a      	b.n	8020d9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020f06:	d024      	beq.n	8020f52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020f08:	9b06      	ldr	r3, [sp, #24]
 8020f0a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020f0c:	3b01      	subs	r3, #1
 8020f0e:	fb00 b003 	mla	r0, r0, r3, fp
 8020f12:	1400      	asrs	r0, r0, #16
 8020f14:	f53f af5e 	bmi.w	8020dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020f18:	3901      	subs	r1, #1
 8020f1a:	4288      	cmp	r0, r1
 8020f1c:	f6bf af5a 	bge.w	8020dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020f20:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020f22:	fb01 4303 	mla	r3, r1, r3, r4
 8020f26:	141b      	asrs	r3, r3, #16
 8020f28:	f53f af54 	bmi.w	8020dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020f2c:	3a01      	subs	r2, #1
 8020f2e:	4293      	cmp	r3, r2
 8020f30:	f6bf af50 	bge.w	8020dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020f34:	9b07      	ldr	r3, [sp, #28]
 8020f36:	f8dd e018 	ldr.w	lr, [sp, #24]
 8020f3a:	1cde      	adds	r6, r3, #3
 8020f3c:	f1be 0f00 	cmp.w	lr, #0
 8020f40:	dc5f      	bgt.n	8021002 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020f42:	9b06      	ldr	r3, [sp, #24]
 8020f44:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020f48:	9b07      	ldr	r3, [sp, #28]
 8020f4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020f4e:	4423      	add	r3, r4
 8020f50:	9307      	str	r3, [sp, #28]
 8020f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	f340 80c5 	ble.w	80210e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8020f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020f5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020f60:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020f64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f68:	eef0 6a62 	vmov.f32	s13, s5
 8020f6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020f70:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020f74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f78:	ee16 ba90 	vmov	fp, s13
 8020f7c:	eef0 6a43 	vmov.f32	s13, s6
 8020f80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f84:	ee16 4a90 	vmov	r4, s13
 8020f88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f90:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020fa0:	ee12 2a90 	vmov	r2, s5
 8020fa4:	eef0 2a47 	vmov.f32	s5, s14
 8020fa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fac:	ee13 2a10 	vmov	r2, s6
 8020fb0:	9327      	str	r3, [sp, #156]	; 0x9c
 8020fb2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020fb4:	eeb0 3a67 	vmov.f32	s6, s15
 8020fb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fbc:	9328      	str	r3, [sp, #160]	; 0xa0
 8020fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020fc2:	3b01      	subs	r3, #1
 8020fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8020fc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020fc8:	bf08      	it	eq
 8020fca:	4613      	moveq	r3, r2
 8020fcc:	9306      	str	r3, [sp, #24]
 8020fce:	e6d7      	b.n	8020d80 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020fd0:	f110 0c01 	adds.w	ip, r0, #1
 8020fd4:	d483      	bmi.n	8020ede <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020fd6:	4563      	cmp	r3, ip
 8020fd8:	db81      	blt.n	8020ede <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020fda:	f115 0c01 	adds.w	ip, r5, #1
 8020fde:	f53f af7e 	bmi.w	8020ede <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020fe2:	4567      	cmp	r7, ip
 8020fe4:	f6ff af7b 	blt.w	8020ede <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020fe8:	b23f      	sxth	r7, r7
 8020fea:	b21b      	sxth	r3, r3
 8020fec:	9700      	str	r7, [sp, #0]
 8020fee:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8020ff2:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8020ff6:	9a08      	ldr	r2, [sp, #32]
 8020ff8:	4631      	mov	r1, r6
 8020ffa:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020ffc:	f7ff fdf9 	bl	8020bf2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021000:	e76d      	b.n	8020ede <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021002:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8021004:	ea4f 402b 	mov.w	r0, fp, asr #16
 8021008:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802100c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021010:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8021014:	1421      	asrs	r1, r4, #16
 8021016:	930a      	str	r3, [sp, #40]	; 0x28
 8021018:	fb0c 0101 	mla	r1, ip, r1, r0
 802101c:	9808      	ldr	r0, [sp, #32]
 802101e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021022:	1845      	adds	r5, r0, r1
 8021024:	5c40      	ldrb	r0, [r0, r1]
 8021026:	796f      	ldrb	r7, [r5, #5]
 8021028:	7869      	ldrb	r1, [r5, #1]
 802102a:	f895 8002 	ldrb.w	r8, [r5, #2]
 802102e:	f895 a003 	ldrb.w	sl, [r5, #3]
 8021032:	f895 9004 	ldrb.w	r9, [r5, #4]
 8021036:	970c      	str	r7, [sp, #48]	; 0x30
 8021038:	b1a2      	cbz	r2, 8021064 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 802103a:	2703      	movs	r7, #3
 802103c:	f06f 0304 	mvn.w	r3, #4
 8021040:	3505      	adds	r5, #5
 8021042:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8021046:	eb05 070c 	add.w	r7, r5, ip
 802104a:	f815 500c 	ldrb.w	r5, [r5, ip]
 802104e:	9513      	str	r5, [sp, #76]	; 0x4c
 8021050:	787d      	ldrb	r5, [r7, #1]
 8021052:	9515      	str	r5, [sp, #84]	; 0x54
 8021054:	78bd      	ldrb	r5, [r7, #2]
 8021056:	9517      	str	r5, [sp, #92]	; 0x5c
 8021058:	78fd      	ldrb	r5, [r7, #3]
 802105a:	9514      	str	r5, [sp, #80]	; 0x50
 802105c:	793d      	ldrb	r5, [r7, #4]
 802105e:	9516      	str	r5, [sp, #88]	; 0x58
 8021060:	797d      	ldrb	r5, [r7, #5]
 8021062:	9518      	str	r5, [sp, #96]	; 0x60
 8021064:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021068:	b292      	uxth	r2, r2
 802106a:	3603      	adds	r6, #3
 802106c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021070:	fb03 f502 	mul.w	r5, r3, r2
 8021074:	011b      	lsls	r3, r3, #4
 8021076:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 802107a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802107e:	1b5b      	subs	r3, r3, r5
 8021080:	b292      	uxth	r2, r2
 8021082:	b29b      	uxth	r3, r3
 8021084:	1abf      	subs	r7, r7, r2
 8021086:	fb03 f909 	mul.w	r9, r3, r9
 802108a:	b2bf      	uxth	r7, r7
 802108c:	fb03 fa0a 	mul.w	sl, r3, sl
 8021090:	fb07 9901 	mla	r9, r7, r1, r9
 8021094:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021096:	fb07 aa00 	mla	sl, r7, r0, sl
 802109a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802109c:	fb02 9901 	mla	r9, r2, r1, r9
 80210a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80210a2:	fb02 aa00 	mla	sl, r2, r0, sl
 80210a6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80210a8:	fb05 9901 	mla	r9, r5, r1, r9
 80210ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80210ae:	fb05 aa00 	mla	sl, r5, r0, sl
 80210b2:	434b      	muls	r3, r1
 80210b4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80210b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80210ba:	fb07 3308 	mla	r3, r7, r8, r3
 80210be:	ea4f 2929 	mov.w	r9, r9, asr #8
 80210c2:	f806 ac06 	strb.w	sl, [r6, #-6]
 80210c6:	fb02 3201 	mla	r2, r2, r1, r3
 80210ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80210cc:	f806 9c05 	strb.w	r9, [r6, #-5]
 80210d0:	fb05 2503 	mla	r5, r5, r3, r2
 80210d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80210d6:	122d      	asrs	r5, r5, #8
 80210d8:	449b      	add	fp, r3
 80210da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80210dc:	f806 5c04 	strb.w	r5, [r6, #-4]
 80210e0:	441c      	add	r4, r3
 80210e2:	e72b      	b.n	8020f3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80210e4:	b01b      	add	sp, #108	; 0x6c
 80210e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080210ea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80210ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210ee:	b087      	sub	sp, #28
 80210f0:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80210f4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80210f8:	fb05 7003 	mla	r0, r5, r3, r7
 80210fc:	2d00      	cmp	r5, #0
 80210fe:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8021102:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8021106:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802110a:	f2c0 811f 	blt.w	802134c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802110e:	45a8      	cmp	r8, r5
 8021110:	f340 811c 	ble.w	802134c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8021114:	2f00      	cmp	r7, #0
 8021116:	f2c0 8117 	blt.w	8021348 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802111a:	42bb      	cmp	r3, r7
 802111c:	f340 8114 	ble.w	8021348 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8021120:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8021124:	1c7a      	adds	r2, r7, #1
 8021126:	f100 8114 	bmi.w	8021352 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802112a:	4293      	cmp	r3, r2
 802112c:	f340 8111 	ble.w	8021352 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8021130:	2c00      	cmp	r4, #0
 8021132:	f000 8110 	beq.w	8021356 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8021136:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802113a:	3501      	adds	r5, #1
 802113c:	f100 810f 	bmi.w	802135e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8021140:	45a8      	cmp	r8, r5
 8021142:	f340 810c 	ble.w	802135e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8021146:	f1be 0f00 	cmp.w	lr, #0
 802114a:	f000 810b 	beq.w	8021364 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 802114e:	2f00      	cmp	r7, #0
 8021150:	f2c0 8103 	blt.w	802135a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8021154:	42bb      	cmp	r3, r7
 8021156:	f340 8100 	ble.w	802135a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802115a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802115e:	3701      	adds	r7, #1
 8021160:	f100 8103 	bmi.w	802136a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8021164:	42bb      	cmp	r3, r7
 8021166:	f340 8100 	ble.w	802136a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 802116a:	2c00      	cmp	r4, #0
 802116c:	f000 80ff 	beq.w	802136e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8021170:	3301      	adds	r3, #1
 8021172:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021176:	fa1f fc84 	uxth.w	ip, r4
 802117a:	fa1f fe8e 	uxth.w	lr, lr
 802117e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021182:	fb0c f90e 	mul.w	r9, ip, lr
 8021186:	0e13      	lsrs	r3, r2, #24
 8021188:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802118c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8021190:	9302      	str	r3, [sp, #8]
 8021192:	ebac 0709 	sub.w	r7, ip, r9
 8021196:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 802119a:	fa1f f48e 	uxth.w	r4, lr
 802119e:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80211a2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80211a6:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80211aa:	fb0a fe0e 	mul.w	lr, sl, lr
 80211ae:	1b1b      	subs	r3, r3, r4
 80211b0:	fb0a f606 	mul.w	r6, sl, r6
 80211b4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80211b8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80211bc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80211c0:	b29b      	uxth	r3, r3
 80211c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211c6:	b2bf      	uxth	r7, r7
 80211c8:	9301      	str	r3, [sp, #4]
 80211ca:	44e6      	add	lr, ip
 80211cc:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80211d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80211d4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80211d8:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80211dc:	9303      	str	r3, [sp, #12]
 80211de:	0a33      	lsrs	r3, r6, #8
 80211e0:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80211e4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80211e8:	9304      	str	r3, [sp, #16]
 80211ea:	fb0b f606 	mul.w	r6, fp, r6
 80211ee:	fb0b f000 	mul.w	r0, fp, r0
 80211f2:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80211f6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80211fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80211fe:	44b6      	add	lr, r6
 8021200:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8021204:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8021208:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 802120c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021210:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021214:	fb08 f606 	mul.w	r6, r8, r6
 8021218:	0a03      	lsrs	r3, r0, #8
 802121a:	fb08 f505 	mul.w	r5, r8, r5
 802121e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021222:	0a30      	lsrs	r0, r6, #8
 8021224:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021228:	9305      	str	r3, [sp, #20]
 802122a:	0e13      	lsrs	r3, r2, #24
 802122c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021230:	fb0e fe07 	mul.w	lr, lr, r7
 8021234:	4430      	add	r0, r6
 8021236:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802123a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802123e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8021242:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021246:	0a00      	lsrs	r0, r0, #8
 8021248:	435e      	muls	r6, r3
 802124a:	0a2d      	lsrs	r5, r5, #8
 802124c:	435a      	muls	r2, r3
 802124e:	9b03      	ldr	r3, [sp, #12]
 8021250:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8021254:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021258:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802125c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021260:	44b4      	add	ip, r6
 8021262:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8021266:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802126a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802126e:	9e01      	ldr	r6, [sp, #4]
 8021270:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021274:	fb03 ee06 	mla	lr, r3, r6, lr
 8021278:	9b04      	ldr	r3, [sp, #16]
 802127a:	0a12      	lsrs	r2, r2, #8
 802127c:	fb0c ee09 	mla	lr, ip, r9, lr
 8021280:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8021284:	9b05      	ldr	r3, [sp, #20]
 8021286:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802128a:	fb00 ee04 	mla	lr, r0, r4, lr
 802128e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021292:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8021296:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 802129a:	9b01      	ldr	r3, [sp, #4]
 802129c:	fb07 fe0e 	mul.w	lr, r7, lr
 80212a0:	fb07 f70b 	mul.w	r7, r7, fp
 80212a4:	fb03 ee06 	mla	lr, r3, r6, lr
 80212a8:	fb03 730a 	mla	r3, r3, sl, r7
 80212ac:	fb09 e202 	mla	r2, r9, r2, lr
 80212b0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80212b4:	fb04 2e0e 	mla	lr, r4, lr, r2
 80212b8:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80212bc:	fb04 3408 	mla	r4, r4, r8, r3
 80212c0:	9b02      	ldr	r3, [sp, #8]
 80212c2:	b292      	uxth	r2, r2
 80212c4:	fb09 4903 	mla	r9, r9, r3, r4
 80212c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80212cc:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80212d0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80212d4:	fb09 f902 	mul.w	r9, r9, r2
 80212d8:	ea40 0e0e 	orr.w	lr, r0, lr
 80212dc:	f109 0301 	add.w	r3, r9, #1
 80212e0:	fa5f f08e 	uxtb.w	r0, lr
 80212e4:	fb10 f002 	smulbb	r0, r0, r2
 80212e8:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80212ec:	780b      	ldrb	r3, [r1, #0]
 80212ee:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 80212f2:	fa5f f989 	uxtb.w	r9, r9
 80212f6:	fb03 0309 	mla	r3, r3, r9, r0
 80212fa:	b29b      	uxth	r3, r3
 80212fc:	1c58      	adds	r0, r3, #1
 80212fe:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021302:	7848      	ldrb	r0, [r1, #1]
 8021304:	fb10 f009 	smulbb	r0, r0, r9
 8021308:	121b      	asrs	r3, r3, #8
 802130a:	700b      	strb	r3, [r1, #0]
 802130c:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8021310:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021314:	fb03 0302 	mla	r3, r3, r2, r0
 8021318:	b29b      	uxth	r3, r3
 802131a:	1c58      	adds	r0, r3, #1
 802131c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021320:	121b      	asrs	r3, r3, #8
 8021322:	704b      	strb	r3, [r1, #1]
 8021324:	788b      	ldrb	r3, [r1, #2]
 8021326:	fb13 f909 	smulbb	r9, r3, r9
 802132a:	fb0e 9e02 	mla	lr, lr, r2, r9
 802132e:	fa1f fe8e 	uxth.w	lr, lr
 8021332:	f10e 0301 	add.w	r3, lr, #1
 8021336:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802133a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802133e:	f881 e002 	strb.w	lr, [r1, #2]
 8021342:	b007      	add	sp, #28
 8021344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021348:	2600      	movs	r6, #0
 802134a:	e6eb      	b.n	8021124 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 802134c:	2000      	movs	r0, #0
 802134e:	4606      	mov	r6, r0
 8021350:	e6f3      	b.n	802113a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021352:	2000      	movs	r0, #0
 8021354:	e6f1      	b.n	802113a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021356:	4620      	mov	r0, r4
 8021358:	e6ef      	b.n	802113a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802135a:	2500      	movs	r5, #0
 802135c:	e6ff      	b.n	802115e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 802135e:	2200      	movs	r2, #0
 8021360:	4615      	mov	r5, r2
 8021362:	e708      	b.n	8021176 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021364:	4672      	mov	r2, lr
 8021366:	4675      	mov	r5, lr
 8021368:	e705      	b.n	8021176 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802136a:	2200      	movs	r2, #0
 802136c:	e703      	b.n	8021176 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802136e:	4622      	mov	r2, r4
 8021370:	e701      	b.n	8021176 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08021372 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021376:	b09d      	sub	sp, #116	; 0x74
 8021378:	9219      	str	r2, [sp, #100]	; 0x64
 802137a:	9307      	str	r3, [sp, #28]
 802137c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802137e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8021382:	901b      	str	r0, [sp, #108]	; 0x6c
 8021384:	931a      	str	r3, [sp, #104]	; 0x68
 8021386:	6850      	ldr	r0, [r2, #4]
 8021388:	9117      	str	r1, [sp, #92]	; 0x5c
 802138a:	6812      	ldr	r2, [r2, #0]
 802138c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8021390:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8021394:	fb00 1303 	mla	r3, r0, r3, r1
 8021398:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802139c:	18d3      	adds	r3, r2, r3
 802139e:	930a      	str	r3, [sp, #40]	; 0x28
 80213a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80213a2:	681b      	ldr	r3, [r3, #0]
 80213a4:	9310      	str	r3, [sp, #64]	; 0x40
 80213a6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80213aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80213ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80213ae:	2b00      	cmp	r3, #0
 80213b0:	dc03      	bgt.n	80213ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80213b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	f340 8368 	ble.w	8021a8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80213ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80213bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80213c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80213c4:	1e48      	subs	r0, r1, #1
 80213c6:	1e57      	subs	r7, r2, #1
 80213c8:	9b07      	ldr	r3, [sp, #28]
 80213ca:	2b00      	cmp	r3, #0
 80213cc:	f340 8187 	ble.w	80216de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80213d0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80213d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80213d8:	d406      	bmi.n	80213e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80213da:	4584      	cmp	ip, r0
 80213dc:	da04      	bge.n	80213e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80213de:	2b00      	cmp	r3, #0
 80213e0:	db02      	blt.n	80213e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80213e2:	42bb      	cmp	r3, r7
 80213e4:	f2c0 817c 	blt.w	80216e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213e8:	f11c 0c01 	adds.w	ip, ip, #1
 80213ec:	f100 816c 	bmi.w	80216c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80213f0:	4561      	cmp	r1, ip
 80213f2:	f2c0 8169 	blt.w	80216c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80213f6:	3301      	adds	r3, #1
 80213f8:	f100 8166 	bmi.w	80216c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80213fc:	429a      	cmp	r2, r3
 80213fe:	f2c0 8163 	blt.w	80216c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021402:	9b07      	ldr	r3, [sp, #28]
 8021404:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021406:	9318      	str	r3, [sp, #96]	; 0x60
 8021408:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802140a:	2b00      	cmp	r3, #0
 802140c:	f340 8186 	ble.w	802171c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8021410:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021412:	142a      	asrs	r2, r5, #16
 8021414:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021418:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802141c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021420:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8021424:	f100 81cb 	bmi.w	80217be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021428:	f10e 38ff 	add.w	r8, lr, #4294967295
 802142c:	4542      	cmp	r2, r8
 802142e:	f280 81c6 	bge.w	80217be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021432:	2800      	cmp	r0, #0
 8021434:	f2c0 81c3 	blt.w	80217be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021438:	f103 38ff 	add.w	r8, r3, #4294967295
 802143c:	4540      	cmp	r0, r8
 802143e:	f280 81be 	bge.w	80217be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021442:	fa0f f38e 	sxth.w	r3, lr
 8021446:	fb00 2203 	mla	r2, r0, r3, r2
 802144a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802144c:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8021450:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8021454:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021458:	2900      	cmp	r1, #0
 802145a:	f000 81a6 	beq.w	80217aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802145e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021462:	900c      	str	r0, [sp, #48]	; 0x30
 8021464:	0e00      	lsrs	r0, r0, #24
 8021466:	9013      	str	r0, [sp, #76]	; 0x4c
 8021468:	f1bc 0f00 	cmp.w	ip, #0
 802146c:	d00f      	beq.n	802148e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802146e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021472:	3b01      	subs	r3, #1
 8021474:	009b      	lsls	r3, r3, #2
 8021476:	3304      	adds	r3, #4
 8021478:	eb08 0003 	add.w	r0, r8, r3
 802147c:	f858 3003 	ldr.w	r3, [r8, r3]
 8021480:	9308      	str	r3, [sp, #32]
 8021482:	0e1b      	lsrs	r3, r3, #24
 8021484:	9311      	str	r3, [sp, #68]	; 0x44
 8021486:	6843      	ldr	r3, [r0, #4]
 8021488:	930d      	str	r3, [sp, #52]	; 0x34
 802148a:	0e1b      	lsrs	r3, r3, #24
 802148c:	9314      	str	r3, [sp, #80]	; 0x50
 802148e:	b289      	uxth	r1, r1
 8021490:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021492:	fa1f fc8c 	uxth.w	ip, ip
 8021496:	0108      	lsls	r0, r1, #4
 8021498:	fb01 f90c 	mul.w	r9, r1, ip
 802149c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80214a0:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80214a4:	eba0 0809 	sub.w	r8, r0, r9
 80214a8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80214aa:	fa1f f18c 	uxth.w	r1, ip
 80214ae:	fa1f f888 	uxth.w	r8, r8
 80214b2:	1a5b      	subs	r3, r3, r1
 80214b4:	fb08 f000 	mul.w	r0, r8, r0
 80214b8:	b29b      	uxth	r3, r3
 80214ba:	fb03 000e 	mla	r0, r3, lr, r0
 80214be:	fb01 0004 	mla	r0, r1, r4, r0
 80214c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80214c4:	fb09 0004 	mla	r0, r9, r4, r0
 80214c8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80214cc:	2800      	cmp	r0, #0
 80214ce:	f000 80f2 	beq.w	80216b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80214d2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80214d6:	d01b      	beq.n	8021510 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80214d8:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80214dc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80214e0:	fb0e fa0a 	mul.w	sl, lr, sl
 80214e4:	fb0e fe02 	mul.w	lr, lr, r2
 80214e8:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80214ec:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80214f0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80214f4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80214f8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80214fc:	4452      	add	r2, sl
 80214fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021502:	0a12      	lsrs	r2, r2, #8
 8021504:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021508:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802150c:	ea42 020c 	orr.w	r2, r2, ip
 8021510:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021512:	2cff      	cmp	r4, #255	; 0xff
 8021514:	d021      	beq.n	802155a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021516:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021518:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802151c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802151e:	fb04 fb0b 	mul.w	fp, r4, fp
 8021522:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021524:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021528:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802152a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802152e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021532:	fb04 fa0a 	mul.w	sl, r4, sl
 8021536:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802153a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802153e:	44de      	add	lr, fp
 8021540:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021544:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021548:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802154c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021550:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021554:	ea4e 040a 	orr.w	r4, lr, sl
 8021558:	940c      	str	r4, [sp, #48]	; 0x30
 802155a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802155c:	2cff      	cmp	r4, #255	; 0xff
 802155e:	d021      	beq.n	80215a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8021560:	9c08      	ldr	r4, [sp, #32]
 8021562:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021566:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021568:	fb04 fb0b 	mul.w	fp, r4, fp
 802156c:	9c08      	ldr	r4, [sp, #32]
 802156e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021572:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021574:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021578:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802157c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021580:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021584:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021588:	44de      	add	lr, fp
 802158a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802158e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021592:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021596:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802159a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802159e:	ea4e 040a 	orr.w	r4, lr, sl
 80215a2:	9408      	str	r4, [sp, #32]
 80215a4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80215a6:	2cff      	cmp	r4, #255	; 0xff
 80215a8:	d021      	beq.n	80215ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80215aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80215ac:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80215b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80215b2:	fb04 fb0b 	mul.w	fp, r4, fp
 80215b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80215b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80215bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80215be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80215c2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80215c6:	fb04 fa0a 	mul.w	sl, r4, sl
 80215ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215ce:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80215d2:	44de      	add	lr, fp
 80215d4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80215d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80215e8:	ea4e 040a 	orr.w	r4, lr, sl
 80215ec:	940d      	str	r4, [sp, #52]	; 0x34
 80215ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80215f0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80215f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80215f8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80215fc:	9c08      	ldr	r4, [sp, #32]
 80215fe:	fb08 fc0c 	mul.w	ip, r8, ip
 8021602:	fb03 cc0e 	mla	ip, r3, lr, ip
 8021606:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802160a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802160c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021610:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021614:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021616:	fb09 cc0e 	mla	ip, r9, lr, ip
 802161a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802161e:	fb08 f80e 	mul.w	r8, r8, lr
 8021622:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021626:	fb03 8202 	mla	r2, r3, r2, r8
 802162a:	9b08      	ldr	r3, [sp, #32]
 802162c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021630:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8021634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021636:	fb01 220a 	mla	r2, r1, sl, r2
 802163a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802163e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021640:	fb09 2901 	mla	r9, r9, r1, r2
 8021644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021646:	4343      	muls	r3, r0
 8021648:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802164c:	1c58      	adds	r0, r3, #1
 802164e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021652:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021656:	783b      	ldrb	r3, [r7, #0]
 8021658:	ea4c 0c09 	orr.w	ip, ip, r9
 802165c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021660:	fa5f f28c 	uxtb.w	r2, ip
 8021664:	b2c0      	uxtb	r0, r0
 8021666:	fb12 f201 	smulbb	r2, r2, r1
 802166a:	fb03 2300 	mla	r3, r3, r0, r2
 802166e:	b29b      	uxth	r3, r3
 8021670:	1c5a      	adds	r2, r3, #1
 8021672:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021676:	787a      	ldrb	r2, [r7, #1]
 8021678:	fb12 f200 	smulbb	r2, r2, r0
 802167c:	121b      	asrs	r3, r3, #8
 802167e:	703b      	strb	r3, [r7, #0]
 8021680:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021684:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021688:	fb03 2301 	mla	r3, r3, r1, r2
 802168c:	b29b      	uxth	r3, r3
 802168e:	1c5a      	adds	r2, r3, #1
 8021690:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021694:	121b      	asrs	r3, r3, #8
 8021696:	707b      	strb	r3, [r7, #1]
 8021698:	78bb      	ldrb	r3, [r7, #2]
 802169a:	fb13 f000 	smulbb	r0, r3, r0
 802169e:	fb0c 0c01 	mla	ip, ip, r1, r0
 80216a2:	fa1f fc8c 	uxth.w	ip, ip
 80216a6:	f10c 0301 	add.w	r3, ip, #1
 80216aa:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80216ae:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80216b2:	f887 c002 	strb.w	ip, [r7, #2]
 80216b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80216b8:	3703      	adds	r7, #3
 80216ba:	441d      	add	r5, r3
 80216bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80216be:	441e      	add	r6, r3
 80216c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80216c2:	3b01      	subs	r3, #1
 80216c4:	9318      	str	r3, [sp, #96]	; 0x60
 80216c6:	e69f      	b.n	8021408 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80216c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80216ca:	441d      	add	r5, r3
 80216cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80216ce:	441e      	add	r6, r3
 80216d0:	9b07      	ldr	r3, [sp, #28]
 80216d2:	3b01      	subs	r3, #1
 80216d4:	9307      	str	r3, [sp, #28]
 80216d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216d8:	3303      	adds	r3, #3
 80216da:	930a      	str	r3, [sp, #40]	; 0x28
 80216dc:	e674      	b.n	80213c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80216de:	d025      	beq.n	802172c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80216e0:	9b07      	ldr	r3, [sp, #28]
 80216e2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80216e4:	3b01      	subs	r3, #1
 80216e6:	fb00 5003 	mla	r0, r0, r3, r5
 80216ea:	1400      	asrs	r0, r0, #16
 80216ec:	f53f ae89 	bmi.w	8021402 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80216f0:	3901      	subs	r1, #1
 80216f2:	4288      	cmp	r0, r1
 80216f4:	f6bf ae85 	bge.w	8021402 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80216f8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80216fa:	fb01 6303 	mla	r3, r1, r3, r6
 80216fe:	141b      	asrs	r3, r3, #16
 8021700:	f53f ae7f 	bmi.w	8021402 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021704:	3a01      	subs	r2, #1
 8021706:	4293      	cmp	r3, r2
 8021708:	f6bf ae7b 	bge.w	8021402 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802170c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802170e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021712:	f103 0e03 	add.w	lr, r3, #3
 8021716:	f1bb 0f00 	cmp.w	fp, #0
 802171a:	dc6e      	bgt.n	80217fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802171c:	9b07      	ldr	r3, [sp, #28]
 802171e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021724:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021728:	4423      	add	r3, r4
 802172a:	930a      	str	r3, [sp, #40]	; 0x28
 802172c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802172e:	2b00      	cmp	r3, #0
 8021730:	f340 81ab 	ble.w	8021a8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8021734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802173a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802173e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021742:	eef0 6a62 	vmov.f32	s13, s5
 8021746:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802174a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802174e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021752:	ee16 5a90 	vmov	r5, s13
 8021756:	eef0 6a43 	vmov.f32	s13, s6
 802175a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802175e:	ee16 6a90 	vmov	r6, s13
 8021762:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021766:	ee61 7a27 	vmul.f32	s15, s2, s15
 802176a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802176e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021772:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021776:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802177a:	ee12 2a90 	vmov	r2, s5
 802177e:	eef0 2a47 	vmov.f32	s5, s14
 8021782:	fb92 f3f3 	sdiv	r3, r2, r3
 8021786:	ee13 2a10 	vmov	r2, s6
 802178a:	9329      	str	r3, [sp, #164]	; 0xa4
 802178c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802178e:	eeb0 3a67 	vmov.f32	s6, s15
 8021792:	fb92 f3f3 	sdiv	r3, r2, r3
 8021796:	932a      	str	r3, [sp, #168]	; 0xa8
 8021798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802179a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802179c:	3b01      	subs	r3, #1
 802179e:	9317      	str	r3, [sp, #92]	; 0x5c
 80217a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80217a2:	bf08      	it	eq
 80217a4:	4613      	moveq	r3, r2
 80217a6:	9307      	str	r3, [sp, #28]
 80217a8:	e600      	b.n	80213ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80217aa:	f1bc 0f00 	cmp.w	ip, #0
 80217ae:	f43f ae6e 	beq.w	802148e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80217b2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80217b6:	9308      	str	r3, [sp, #32]
 80217b8:	0e1b      	lsrs	r3, r3, #24
 80217ba:	9311      	str	r3, [sp, #68]	; 0x44
 80217bc:	e667      	b.n	802148e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80217be:	f112 0801 	adds.w	r8, r2, #1
 80217c2:	f53f af78 	bmi.w	80216b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80217c6:	45c6      	cmp	lr, r8
 80217c8:	f6ff af75 	blt.w	80216b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80217cc:	f110 0801 	adds.w	r8, r0, #1
 80217d0:	f53f af71 	bmi.w	80216b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80217d4:	4543      	cmp	r3, r8
 80217d6:	f6ff af6e 	blt.w	80216b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80217da:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80217dc:	b21b      	sxth	r3, r3
 80217de:	9201      	str	r2, [sp, #4]
 80217e0:	9300      	str	r3, [sp, #0]
 80217e2:	fa0f f38e 	sxth.w	r3, lr
 80217e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80217e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80217ec:	e9cd c404 	strd	ip, r4, [sp, #16]
 80217f0:	4639      	mov	r1, r7
 80217f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80217f4:	f7ff fc79 	bl	80210ea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80217f8:	e75d      	b.n	80216b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80217fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80217fc:	142f      	asrs	r7, r5, #16
 80217fe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021800:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021804:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8021808:	1433      	asrs	r3, r6, #16
 802180a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802180e:	fb02 7303 	mla	r3, r2, r3, r7
 8021812:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8021816:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802181a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802181e:	2900      	cmp	r1, #0
 8021820:	f000 812a 	beq.w	8021a78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8021824:	687c      	ldr	r4, [r7, #4]
 8021826:	940e      	str	r4, [sp, #56]	; 0x38
 8021828:	0e24      	lsrs	r4, r4, #24
 802182a:	9415      	str	r4, [sp, #84]	; 0x54
 802182c:	b178      	cbz	r0, 802184e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802182e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8021832:	3a01      	subs	r2, #1
 8021834:	0092      	lsls	r2, r2, #2
 8021836:	3204      	adds	r2, #4
 8021838:	eb07 0802 	add.w	r8, r7, r2
 802183c:	58ba      	ldr	r2, [r7, r2]
 802183e:	9209      	str	r2, [sp, #36]	; 0x24
 8021840:	0e12      	lsrs	r2, r2, #24
 8021842:	9212      	str	r2, [sp, #72]	; 0x48
 8021844:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8021848:	920f      	str	r2, [sp, #60]	; 0x3c
 802184a:	0e12      	lsrs	r2, r2, #24
 802184c:	9216      	str	r2, [sp, #88]	; 0x58
 802184e:	b289      	uxth	r1, r1
 8021850:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021852:	b280      	uxth	r0, r0
 8021854:	fb01 f900 	mul.w	r9, r1, r0
 8021858:	0109      	lsls	r1, r1, #4
 802185a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802185e:	eba1 0809 	sub.w	r8, r1, r9
 8021862:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021866:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021868:	b280      	uxth	r0, r0
 802186a:	fa1f f888 	uxth.w	r8, r8
 802186e:	1a12      	subs	r2, r2, r0
 8021870:	fb08 f101 	mul.w	r1, r8, r1
 8021874:	b292      	uxth	r2, r2
 8021876:	fb02 110c 	mla	r1, r2, ip, r1
 802187a:	fb00 1104 	mla	r1, r0, r4, r1
 802187e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021880:	fb09 1104 	mla	r1, r9, r4, r1
 8021884:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021888:	2900      	cmp	r1, #0
 802188a:	f000 80ec 	beq.w	8021a66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 802188e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021892:	d019      	beq.n	80218c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8021894:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021898:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802189c:	fb0c fa0a 	mul.w	sl, ip, sl
 80218a0:	fb0c fc03 	mul.w	ip, ip, r3
 80218a4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80218a8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80218ac:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80218b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218b4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80218b8:	4453      	add	r3, sl
 80218ba:	0a3f      	lsrs	r7, r7, #8
 80218bc:	0a1b      	lsrs	r3, r3, #8
 80218be:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80218c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80218c6:	433b      	orrs	r3, r7
 80218c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80218ca:	2cff      	cmp	r4, #255	; 0xff
 80218cc:	d020      	beq.n	8021910 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 80218ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80218d0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80218d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80218d6:	4367      	muls	r7, r4
 80218d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80218da:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80218de:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80218e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80218e4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80218e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80218f0:	44bc      	add	ip, r7
 80218f2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80218f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218fa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80218fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021902:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021906:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802190a:	ea4c 040a 	orr.w	r4, ip, sl
 802190e:	940e      	str	r4, [sp, #56]	; 0x38
 8021910:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021912:	2cff      	cmp	r4, #255	; 0xff
 8021914:	d020      	beq.n	8021958 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8021916:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021918:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802191c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802191e:	4367      	muls	r7, r4
 8021920:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021922:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021926:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802192a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802192c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021930:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021934:	fb04 fa0a 	mul.w	sl, r4, sl
 8021938:	44bc      	add	ip, r7
 802193a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802193e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021942:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021946:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802194a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802194e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021952:	ea4c 040a 	orr.w	r4, ip, sl
 8021956:	9409      	str	r4, [sp, #36]	; 0x24
 8021958:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802195a:	2cff      	cmp	r4, #255	; 0xff
 802195c:	d020      	beq.n	80219a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 802195e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021960:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021964:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021966:	4367      	muls	r7, r4
 8021968:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802196a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802196e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021972:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021974:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021978:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802197c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021980:	44bc      	add	ip, r7
 8021982:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021986:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802198a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802198e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021992:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021996:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802199a:	ea4c 040a 	orr.w	r4, ip, sl
 802199e:	940f      	str	r4, [sp, #60]	; 0x3c
 80219a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80219a2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80219a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80219aa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80219ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80219b0:	fb08 f707 	mul.w	r7, r8, r7
 80219b4:	fb02 770c 	mla	r7, r2, ip, r7
 80219b8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80219bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80219be:	fb00 770c 	mla	r7, r0, ip, r7
 80219c2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80219c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80219c8:	fb09 770c 	mla	r7, r9, ip, r7
 80219cc:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80219d0:	fb08 f80c 	mul.w	r8, r8, ip
 80219d4:	0a3f      	lsrs	r7, r7, #8
 80219d6:	fb02 8303 	mla	r3, r2, r3, r8
 80219da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80219dc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219e0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80219e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80219e6:	fb00 330a 	mla	r3, r0, sl, r3
 80219ea:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80219ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80219f0:	fb09 3c0c 	mla	ip, r9, ip, r3
 80219f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80219f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219fa:	434b      	muls	r3, r1
 80219fc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021a00:	1c59      	adds	r1, r3, #1
 8021a02:	ea47 070c 	orr.w	r7, r7, ip
 8021a06:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021a0a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021a0e:	b2fa      	uxtb	r2, r7
 8021a10:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021a14:	fb12 f200 	smulbb	r2, r2, r0
 8021a18:	b2c9      	uxtb	r1, r1
 8021a1a:	fb03 2301 	mla	r3, r3, r1, r2
 8021a1e:	b29b      	uxth	r3, r3
 8021a20:	1c5a      	adds	r2, r3, #1
 8021a22:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a26:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021a2a:	fb12 f201 	smulbb	r2, r2, r1
 8021a2e:	121b      	asrs	r3, r3, #8
 8021a30:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021a34:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021a38:	0c3f      	lsrs	r7, r7, #16
 8021a3a:	fb03 2300 	mla	r3, r3, r0, r2
 8021a3e:	b29b      	uxth	r3, r3
 8021a40:	1c5a      	adds	r2, r3, #1
 8021a42:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a46:	121b      	asrs	r3, r3, #8
 8021a48:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021a4c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021a50:	fb13 f101 	smulbb	r1, r3, r1
 8021a54:	fb07 1700 	mla	r7, r7, r0, r1
 8021a58:	b2bf      	uxth	r7, r7
 8021a5a:	1c79      	adds	r1, r7, #1
 8021a5c:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021a60:	123f      	asrs	r7, r7, #8
 8021a62:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021a66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021a68:	f10e 0e03 	add.w	lr, lr, #3
 8021a6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021a70:	441d      	add	r5, r3
 8021a72:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021a74:	441e      	add	r6, r3
 8021a76:	e64e      	b.n	8021716 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8021a78:	2800      	cmp	r0, #0
 8021a7a:	f43f aee8 	beq.w	802184e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8021a7e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8021a82:	9209      	str	r2, [sp, #36]	; 0x24
 8021a84:	0e12      	lsrs	r2, r2, #24
 8021a86:	9212      	str	r2, [sp, #72]	; 0x48
 8021a88:	e6e1      	b.n	802184e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8021a8a:	b01d      	add	sp, #116	; 0x74
 8021a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a90 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a94:	b087      	sub	sp, #28
 8021a96:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8021a9a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8021a9e:	fb05 7003 	mla	r0, r5, r3, r7
 8021aa2:	2d00      	cmp	r5, #0
 8021aa4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8021aa8:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8021aac:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8021ab0:	f2c0 810a 	blt.w	8021cc8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8021ab4:	45a8      	cmp	r8, r5
 8021ab6:	f340 8107 	ble.w	8021cc8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8021aba:	2f00      	cmp	r7, #0
 8021abc:	f2c0 8102 	blt.w	8021cc4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021ac0:	42bb      	cmp	r3, r7
 8021ac2:	f340 80ff 	ble.w	8021cc4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021ac6:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8021aca:	1c7a      	adds	r2, r7, #1
 8021acc:	f100 80ff 	bmi.w	8021cce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021ad0:	4293      	cmp	r3, r2
 8021ad2:	f340 80fc 	ble.w	8021cce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021ad6:	2c00      	cmp	r4, #0
 8021ad8:	f000 80fb 	beq.w	8021cd2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8021adc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8021ae0:	3501      	adds	r5, #1
 8021ae2:	f100 80fa 	bmi.w	8021cda <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8021ae6:	45a8      	cmp	r8, r5
 8021ae8:	f340 80f7 	ble.w	8021cda <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8021aec:	f1be 0f00 	cmp.w	lr, #0
 8021af0:	f000 80f6 	beq.w	8021ce0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8021af4:	2f00      	cmp	r7, #0
 8021af6:	f2c0 80ee 	blt.w	8021cd6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021afa:	42bb      	cmp	r3, r7
 8021afc:	f340 80eb 	ble.w	8021cd6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021b00:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8021b04:	3701      	adds	r7, #1
 8021b06:	f100 80ee 	bmi.w	8021ce6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8021b0a:	42bb      	cmp	r3, r7
 8021b0c:	f340 80eb 	ble.w	8021ce6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8021b10:	2c00      	cmp	r4, #0
 8021b12:	f000 80ea 	beq.w	8021cea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8021b16:	3301      	adds	r3, #1
 8021b18:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021b1c:	fa1f fc84 	uxth.w	ip, r4
 8021b20:	fa1f fe8e 	uxth.w	lr, lr
 8021b24:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021b28:	fb0c f90e 	mul.w	r9, ip, lr
 8021b2c:	0e13      	lsrs	r3, r2, #24
 8021b2e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021b32:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8021b36:	9302      	str	r3, [sp, #8]
 8021b38:	ebac 0709 	sub.w	r7, ip, r9
 8021b3c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8021b40:	fa1f f48e 	uxth.w	r4, lr
 8021b44:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8021b48:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021b4c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8021b50:	fb0a fe0e 	mul.w	lr, sl, lr
 8021b54:	1b1b      	subs	r3, r3, r4
 8021b56:	fb0a f606 	mul.w	r6, sl, r6
 8021b5a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021b5e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021b62:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021b66:	b29b      	uxth	r3, r3
 8021b68:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021b6c:	b2bf      	uxth	r7, r7
 8021b6e:	9301      	str	r3, [sp, #4]
 8021b70:	44e6      	add	lr, ip
 8021b72:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021b76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b7a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021b7e:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8021b82:	9303      	str	r3, [sp, #12]
 8021b84:	0a33      	lsrs	r3, r6, #8
 8021b86:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8021b8a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021b8e:	9304      	str	r3, [sp, #16]
 8021b90:	fb0b f606 	mul.w	r6, fp, r6
 8021b94:	fb0b f000 	mul.w	r0, fp, r0
 8021b98:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8021b9c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021ba0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ba4:	44b6      	add	lr, r6
 8021ba6:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8021baa:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8021bae:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8021bb2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021bb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bba:	fb08 f606 	mul.w	r6, r8, r6
 8021bbe:	0a03      	lsrs	r3, r0, #8
 8021bc0:	fb08 f505 	mul.w	r5, r8, r5
 8021bc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021bc8:	0a30      	lsrs	r0, r6, #8
 8021bca:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021bce:	9305      	str	r3, [sp, #20]
 8021bd0:	0e13      	lsrs	r3, r2, #24
 8021bd2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021bd6:	fb0e fe07 	mul.w	lr, lr, r7
 8021bda:	4430      	add	r0, r6
 8021bdc:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021be0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021be4:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8021be8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021bec:	0a00      	lsrs	r0, r0, #8
 8021bee:	435e      	muls	r6, r3
 8021bf0:	0a2d      	lsrs	r5, r5, #8
 8021bf2:	435a      	muls	r2, r3
 8021bf4:	9b03      	ldr	r3, [sp, #12]
 8021bf6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8021bfa:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021bfe:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021c02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021c06:	44b4      	add	ip, r6
 8021c08:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8021c0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c10:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8021c14:	9e01      	ldr	r6, [sp, #4]
 8021c16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021c1a:	fb03 ee06 	mla	lr, r3, r6, lr
 8021c1e:	9b04      	ldr	r3, [sp, #16]
 8021c20:	0a12      	lsrs	r2, r2, #8
 8021c22:	fb0c ee09 	mla	lr, ip, r9, lr
 8021c26:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8021c2a:	9b05      	ldr	r3, [sp, #20]
 8021c2c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021c30:	fb00 ee04 	mla	lr, r0, r4, lr
 8021c34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021c38:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8021c3c:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8021c40:	9b01      	ldr	r3, [sp, #4]
 8021c42:	fb07 fe0e 	mul.w	lr, r7, lr
 8021c46:	fb07 f70b 	mul.w	r7, r7, fp
 8021c4a:	fb03 ee06 	mla	lr, r3, r6, lr
 8021c4e:	fb03 730a 	mla	r3, r3, sl, r7
 8021c52:	fb09 e202 	mla	r2, r9, r2, lr
 8021c56:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021c5a:	fb04 2e0e 	mla	lr, r4, lr, r2
 8021c5e:	fb04 3408 	mla	r4, r4, r8, r3
 8021c62:	9b02      	ldr	r3, [sp, #8]
 8021c64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021c68:	fb09 4903 	mla	r9, r9, r3, r4
 8021c6c:	780b      	ldrb	r3, [r1, #0]
 8021c6e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021c72:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8021c76:	ea40 0e0e 	orr.w	lr, r0, lr
 8021c7a:	fa5f f989 	uxtb.w	r9, r9
 8021c7e:	fb03 f209 	mul.w	r2, r3, r9
 8021c82:	1c53      	adds	r3, r2, #1
 8021c84:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c88:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8021c8c:	700b      	strb	r3, [r1, #0]
 8021c8e:	784b      	ldrb	r3, [r1, #1]
 8021c90:	fb03 f309 	mul.w	r3, r3, r9
 8021c94:	1c5a      	adds	r2, r3, #1
 8021c96:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021c9a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021c9e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021ca2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021ca6:	704b      	strb	r3, [r1, #1]
 8021ca8:	788b      	ldrb	r3, [r1, #2]
 8021caa:	fb03 f909 	mul.w	r9, r3, r9
 8021cae:	f109 0301 	add.w	r3, r9, #1
 8021cb2:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8021cb6:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8021cba:	f881 e002 	strb.w	lr, [r1, #2]
 8021cbe:	b007      	add	sp, #28
 8021cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cc4:	2600      	movs	r6, #0
 8021cc6:	e700      	b.n	8021aca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8021cc8:	2000      	movs	r0, #0
 8021cca:	4606      	mov	r6, r0
 8021ccc:	e708      	b.n	8021ae0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021cce:	2000      	movs	r0, #0
 8021cd0:	e706      	b.n	8021ae0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021cd2:	4620      	mov	r0, r4
 8021cd4:	e704      	b.n	8021ae0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021cd6:	2500      	movs	r5, #0
 8021cd8:	e714      	b.n	8021b04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8021cda:	2200      	movs	r2, #0
 8021cdc:	4615      	mov	r5, r2
 8021cde:	e71d      	b.n	8021b1c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021ce0:	4672      	mov	r2, lr
 8021ce2:	4675      	mov	r5, lr
 8021ce4:	e71a      	b.n	8021b1c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021ce6:	2200      	movs	r2, #0
 8021ce8:	e718      	b.n	8021b1c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021cea:	4622      	mov	r2, r4
 8021cec:	e716      	b.n	8021b1c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08021cee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cf2:	b099      	sub	sp, #100	; 0x64
 8021cf4:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8021cf8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021cfa:	9017      	str	r0, [sp, #92]	; 0x5c
 8021cfc:	9306      	str	r3, [sp, #24]
 8021cfe:	6850      	ldr	r0, [r2, #4]
 8021d00:	6812      	ldr	r2, [r2, #0]
 8021d02:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8021d06:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8021d0a:	fb00 1303 	mla	r3, r0, r3, r1
 8021d0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d12:	18d3      	adds	r3, r2, r3
 8021d14:	9309      	str	r3, [sp, #36]	; 0x24
 8021d16:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021d18:	681b      	ldr	r3, [r3, #0]
 8021d1a:	930e      	str	r3, [sp, #56]	; 0x38
 8021d1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	dc03      	bgt.n	8021d2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021d22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021d24:	2b00      	cmp	r3, #0
 8021d26:	f340 8360 	ble.w	80223ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8021d2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021d2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021d30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021d34:	1e48      	subs	r0, r1, #1
 8021d36:	1e57      	subs	r7, r2, #1
 8021d38:	9b06      	ldr	r3, [sp, #24]
 8021d3a:	2b00      	cmp	r3, #0
 8021d3c:	f340 817b 	ble.w	8022036 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8021d40:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021d44:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021d48:	d406      	bmi.n	8021d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021d4a:	4584      	cmp	ip, r0
 8021d4c:	da04      	bge.n	8021d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021d4e:	2b00      	cmp	r3, #0
 8021d50:	db02      	blt.n	8021d58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021d52:	42bb      	cmp	r3, r7
 8021d54:	f2c0 8170 	blt.w	8022038 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021d58:	f11c 0c01 	adds.w	ip, ip, #1
 8021d5c:	f100 8160 	bmi.w	8022020 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021d60:	4561      	cmp	r1, ip
 8021d62:	f2c0 815d 	blt.w	8022020 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021d66:	3301      	adds	r3, #1
 8021d68:	f100 815a 	bmi.w	8022020 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021d6c:	429a      	cmp	r2, r3
 8021d6e:	f2c0 8157 	blt.w	8022020 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021d72:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8021d76:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021d78:	f1b8 0f00 	cmp.w	r8, #0
 8021d7c:	f340 8179 	ble.w	8022072 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8021d80:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021d82:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021d86:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021d88:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021d8c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021d90:	142a      	asrs	r2, r5, #16
 8021d92:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021d96:	689b      	ldr	r3, [r3, #8]
 8021d98:	f100 81be 	bmi.w	8022118 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021d9c:	f103 39ff 	add.w	r9, r3, #4294967295
 8021da0:	454a      	cmp	r2, r9
 8021da2:	f280 81b9 	bge.w	8022118 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021da6:	f1bc 0f00 	cmp.w	ip, #0
 8021daa:	f2c0 81b5 	blt.w	8022118 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021dae:	f10e 39ff 	add.w	r9, lr, #4294967295
 8021db2:	45cc      	cmp	ip, r9
 8021db4:	f280 81b0 	bge.w	8022118 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021db8:	b21b      	sxth	r3, r3
 8021dba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021dbc:	fb0c 2203 	mla	r2, ip, r3, r2
 8021dc0:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8021dc4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021dc8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021dcc:	2900      	cmp	r1, #0
 8021dce:	f000 8197 	beq.w	8022100 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8021dd2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8021dd6:	940a      	str	r4, [sp, #40]	; 0x28
 8021dd8:	0e24      	lsrs	r4, r4, #24
 8021dda:	9411      	str	r4, [sp, #68]	; 0x44
 8021ddc:	b180      	cbz	r0, 8021e00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021dde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021de2:	3b01      	subs	r3, #1
 8021de4:	009b      	lsls	r3, r3, #2
 8021de6:	3304      	adds	r3, #4
 8021de8:	eb09 0c03 	add.w	ip, r9, r3
 8021dec:	f859 3003 	ldr.w	r3, [r9, r3]
 8021df0:	9307      	str	r3, [sp, #28]
 8021df2:	0e1b      	lsrs	r3, r3, #24
 8021df4:	930f      	str	r3, [sp, #60]	; 0x3c
 8021df6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8021dfc:	0e1b      	lsrs	r3, r3, #24
 8021dfe:	9312      	str	r3, [sp, #72]	; 0x48
 8021e00:	b289      	uxth	r1, r1
 8021e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021e04:	b280      	uxth	r0, r0
 8021e06:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021e08:	fb01 fa00 	mul.w	sl, r1, r0
 8021e0c:	0109      	lsls	r1, r1, #4
 8021e0e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021e12:	eba1 090a 	sub.w	r9, r1, sl
 8021e16:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021e1a:	b280      	uxth	r0, r0
 8021e1c:	fa1f f989 	uxth.w	r9, r9
 8021e20:	1a09      	subs	r1, r1, r0
 8021e22:	fb09 f303 	mul.w	r3, r9, r3
 8021e26:	b289      	uxth	r1, r1
 8021e28:	fb01 330e 	mla	r3, r1, lr, r3
 8021e2c:	fb00 3304 	mla	r3, r0, r4, r3
 8021e30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e32:	fb0a 3304 	mla	r3, sl, r4, r3
 8021e36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021e3a:	2b00      	cmp	r3, #0
 8021e3c:	f000 80e8 	beq.w	8022010 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021e40:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021e44:	d01b      	beq.n	8021e7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8021e46:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8021e4a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021e4e:	fb0e fb0b 	mul.w	fp, lr, fp
 8021e52:	fb0e fe02 	mul.w	lr, lr, r2
 8021e56:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8021e5a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e5e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021e62:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021e66:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021e6a:	445a      	add	r2, fp
 8021e6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e70:	0a12      	lsrs	r2, r2, #8
 8021e72:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021e76:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021e7a:	ea42 020c 	orr.w	r2, r2, ip
 8021e7e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021e80:	2cff      	cmp	r4, #255	; 0xff
 8021e82:	d021      	beq.n	8021ec8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8021e84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021e86:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021e8a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021e8c:	fb04 fc0c 	mul.w	ip, r4, ip
 8021e90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021e92:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021e96:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8021e9a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021e9c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021ea0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ea4:	fb04 fb0b 	mul.w	fp, r4, fp
 8021ea8:	44e6      	add	lr, ip
 8021eaa:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8021eae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021eb2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021eb6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021eba:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021ebe:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021ec2:	ea4e 040b 	orr.w	r4, lr, fp
 8021ec6:	940a      	str	r4, [sp, #40]	; 0x28
 8021ec8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021eca:	2cff      	cmp	r4, #255	; 0xff
 8021ecc:	d021      	beq.n	8021f12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021ece:	9c07      	ldr	r4, [sp, #28]
 8021ed0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021ed4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021ed6:	fb04 fc0c 	mul.w	ip, r4, ip
 8021eda:	9c07      	ldr	r4, [sp, #28]
 8021edc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021ee0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8021ee4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021ee6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021eea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021eee:	fb04 fb0b 	mul.w	fp, r4, fp
 8021ef2:	44e6      	add	lr, ip
 8021ef4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8021ef8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021efc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021f00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f04:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021f08:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021f0c:	ea4e 040b 	orr.w	r4, lr, fp
 8021f10:	9407      	str	r4, [sp, #28]
 8021f12:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021f14:	2cff      	cmp	r4, #255	; 0xff
 8021f16:	d021      	beq.n	8021f5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8021f18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f1a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f1e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021f20:	fb04 fc0c 	mul.w	ip, r4, ip
 8021f24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f26:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021f2a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8021f2e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021f30:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021f34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f38:	fb04 fb0b 	mul.w	fp, r4, fp
 8021f3c:	44e6      	add	lr, ip
 8021f3e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8021f42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f46:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021f4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f4e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021f52:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021f56:	ea4e 040b 	orr.w	r4, lr, fp
 8021f5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8021f5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021f5e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021f62:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021f66:	2bff      	cmp	r3, #255	; 0xff
 8021f68:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021f6c:	9c07      	ldr	r4, [sp, #28]
 8021f6e:	fb09 fc0c 	mul.w	ip, r9, ip
 8021f72:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021f76:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021f7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021f7c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021f80:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021f84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021f86:	fb0a cc0e 	mla	ip, sl, lr, ip
 8021f8a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021f8e:	fb09 f90e 	mul.w	r9, r9, lr
 8021f92:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f96:	fb01 9202 	mla	r2, r1, r2, r9
 8021f9a:	9907      	ldr	r1, [sp, #28]
 8021f9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021fa0:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8021fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021fa6:	fb00 220b 	mla	r2, r0, fp, r2
 8021faa:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8021fae:	fb0a 2a00 	mla	sl, sl, r0, r2
 8021fb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021fb6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021fba:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021fbe:	fa5f f08c 	uxtb.w	r0, ip
 8021fc2:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8021fc6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021fca:	f000 80a2 	beq.w	8022112 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8021fce:	43db      	mvns	r3, r3
 8021fd0:	783a      	ldrb	r2, [r7, #0]
 8021fd2:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021fd6:	b2db      	uxtb	r3, r3
 8021fd8:	fb02 fe03 	mul.w	lr, r2, r3
 8021fdc:	fb0a fa03 	mul.w	sl, sl, r3
 8021fe0:	f10e 0201 	add.w	r2, lr, #1
 8021fe4:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8021fe8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021fec:	703a      	strb	r2, [r7, #0]
 8021fee:	787a      	ldrb	r2, [r7, #1]
 8021ff0:	fb02 f003 	mul.w	r0, r2, r3
 8021ff4:	f10a 0301 	add.w	r3, sl, #1
 8021ff8:	1c42      	adds	r2, r0, #1
 8021ffa:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021ffe:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022002:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022006:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802200a:	707a      	strb	r2, [r7, #1]
 802200c:	f887 c002 	strb.w	ip, [r7, #2]
 8022010:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022012:	3703      	adds	r7, #3
 8022014:	f108 38ff 	add.w	r8, r8, #4294967295
 8022018:	441d      	add	r5, r3
 802201a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802201c:	441e      	add	r6, r3
 802201e:	e6ab      	b.n	8021d78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022020:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022022:	441d      	add	r5, r3
 8022024:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022026:	441e      	add	r6, r3
 8022028:	9b06      	ldr	r3, [sp, #24]
 802202a:	3b01      	subs	r3, #1
 802202c:	9306      	str	r3, [sp, #24]
 802202e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022030:	3303      	adds	r3, #3
 8022032:	9309      	str	r3, [sp, #36]	; 0x24
 8022034:	e680      	b.n	8021d38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022036:	d024      	beq.n	8022082 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8022038:	9b06      	ldr	r3, [sp, #24]
 802203a:	9825      	ldr	r0, [sp, #148]	; 0x94
 802203c:	3b01      	subs	r3, #1
 802203e:	fb00 5003 	mla	r0, r0, r3, r5
 8022042:	1400      	asrs	r0, r0, #16
 8022044:	f53f ae95 	bmi.w	8021d72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022048:	3901      	subs	r1, #1
 802204a:	4288      	cmp	r0, r1
 802204c:	f6bf ae91 	bge.w	8021d72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022050:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022052:	fb01 6303 	mla	r3, r1, r3, r6
 8022056:	141b      	asrs	r3, r3, #16
 8022058:	f53f ae8b 	bmi.w	8021d72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802205c:	3a01      	subs	r2, #1
 802205e:	4293      	cmp	r3, r2
 8022060:	f6bf ae87 	bge.w	8021d72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022066:	f8dd b018 	ldr.w	fp, [sp, #24]
 802206a:	1cdf      	adds	r7, r3, #3
 802206c:	f1bb 0f00 	cmp.w	fp, #0
 8022070:	dc6e      	bgt.n	8022150 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022072:	9b06      	ldr	r3, [sp, #24]
 8022074:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802207a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802207e:	4423      	add	r3, r4
 8022080:	9309      	str	r3, [sp, #36]	; 0x24
 8022082:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022084:	2b00      	cmp	r3, #0
 8022086:	f340 81b0 	ble.w	80223ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 802208a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802208e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022090:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022094:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022098:	eef0 6a62 	vmov.f32	s13, s5
 802209c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80220a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80220a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80220a8:	ee16 5a90 	vmov	r5, s13
 80220ac:	eef0 6a43 	vmov.f32	s13, s6
 80220b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80220b4:	ee16 6a90 	vmov	r6, s13
 80220b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80220bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80220c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80220c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80220c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80220cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80220d0:	ee12 2a90 	vmov	r2, s5
 80220d4:	eef0 2a47 	vmov.f32	s5, s14
 80220d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80220dc:	ee13 2a10 	vmov	r2, s6
 80220e0:	9325      	str	r3, [sp, #148]	; 0x94
 80220e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80220e4:	eeb0 3a67 	vmov.f32	s6, s15
 80220e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80220ec:	9326      	str	r3, [sp, #152]	; 0x98
 80220ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80220f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80220f2:	3b01      	subs	r3, #1
 80220f4:	9315      	str	r3, [sp, #84]	; 0x54
 80220f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80220f8:	bf08      	it	eq
 80220fa:	4613      	moveq	r3, r2
 80220fc:	9306      	str	r3, [sp, #24]
 80220fe:	e60d      	b.n	8021d1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022100:	2800      	cmp	r0, #0
 8022102:	f43f ae7d 	beq.w	8021e00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022106:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802210a:	9307      	str	r3, [sp, #28]
 802210c:	0e1b      	lsrs	r3, r3, #24
 802210e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022110:	e676      	b.n	8021e00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022112:	7038      	strb	r0, [r7, #0]
 8022114:	7079      	strb	r1, [r7, #1]
 8022116:	e779      	b.n	802200c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8022118:	f112 0901 	adds.w	r9, r2, #1
 802211c:	f53f af78 	bmi.w	8022010 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022120:	454b      	cmp	r3, r9
 8022122:	f6ff af75 	blt.w	8022010 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022126:	f11c 0901 	adds.w	r9, ip, #1
 802212a:	f53f af71 	bmi.w	8022010 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802212e:	45ce      	cmp	lr, r9
 8022130:	f6ff af6e 	blt.w	8022010 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022134:	b21b      	sxth	r3, r3
 8022136:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802213a:	fa0f f28e 	sxth.w	r2, lr
 802213e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8022142:	9200      	str	r2, [sp, #0]
 8022144:	4639      	mov	r1, r7
 8022146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022148:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802214a:	f7ff fca1 	bl	8021a90 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802214e:	e75f      	b.n	8022010 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022150:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022152:	1429      	asrs	r1, r5, #16
 8022154:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022156:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802215a:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802215e:	1433      	asrs	r3, r6, #16
 8022160:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022164:	fb0c 1303 	mla	r3, ip, r3, r1
 8022168:	990e      	ldr	r1, [sp, #56]	; 0x38
 802216a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802216e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022172:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022176:	2a00      	cmp	r2, #0
 8022178:	f000 8129 	beq.w	80223ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802217c:	684c      	ldr	r4, [r1, #4]
 802217e:	940c      	str	r4, [sp, #48]	; 0x30
 8022180:	0e24      	lsrs	r4, r4, #24
 8022182:	9413      	str	r4, [sp, #76]	; 0x4c
 8022184:	b198      	cbz	r0, 80221ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022186:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 802218a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802218e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8022192:	f10c 0c04 	add.w	ip, ip, #4
 8022196:	eb01 080c 	add.w	r8, r1, ip
 802219a:	f851 100c 	ldr.w	r1, [r1, ip]
 802219e:	9108      	str	r1, [sp, #32]
 80221a0:	0e09      	lsrs	r1, r1, #24
 80221a2:	9110      	str	r1, [sp, #64]	; 0x40
 80221a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80221a8:	910d      	str	r1, [sp, #52]	; 0x34
 80221aa:	0e09      	lsrs	r1, r1, #24
 80221ac:	9114      	str	r1, [sp, #80]	; 0x50
 80221ae:	b292      	uxth	r2, r2
 80221b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80221b2:	b280      	uxth	r0, r0
 80221b4:	fb02 f900 	mul.w	r9, r2, r0
 80221b8:	0112      	lsls	r2, r2, #4
 80221ba:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80221be:	eba2 0809 	sub.w	r8, r2, r9
 80221c2:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80221c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80221c8:	b280      	uxth	r0, r0
 80221ca:	fa1f f888 	uxth.w	r8, r8
 80221ce:	1a09      	subs	r1, r1, r0
 80221d0:	fb08 f202 	mul.w	r2, r8, r2
 80221d4:	b289      	uxth	r1, r1
 80221d6:	fb01 220e 	mla	r2, r1, lr, r2
 80221da:	fb00 2204 	mla	r2, r0, r4, r2
 80221de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80221e0:	fb09 2204 	mla	r2, r9, r4, r2
 80221e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80221e8:	2a00      	cmp	r2, #0
 80221ea:	f000 80e8 	beq.w	80223be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80221ee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80221f2:	d01b      	beq.n	802222c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80221f4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80221f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80221fc:	fb0e fa0a 	mul.w	sl, lr, sl
 8022200:	fb0e fe03 	mul.w	lr, lr, r3
 8022204:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022208:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802220c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022210:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022214:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022218:	4453      	add	r3, sl
 802221a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802221e:	0a1b      	lsrs	r3, r3, #8
 8022220:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022224:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022228:	ea43 030c 	orr.w	r3, r3, ip
 802222c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802222e:	2cff      	cmp	r4, #255	; 0xff
 8022230:	d021      	beq.n	8022276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8022232:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022234:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022238:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802223a:	fb04 fc0c 	mul.w	ip, r4, ip
 802223e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022240:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022244:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022248:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802224a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802224e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022252:	fb04 fa0a 	mul.w	sl, r4, sl
 8022256:	44e6      	add	lr, ip
 8022258:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802225c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022260:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022264:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022268:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802226c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022270:	ea4e 040a 	orr.w	r4, lr, sl
 8022274:	940c      	str	r4, [sp, #48]	; 0x30
 8022276:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022278:	2cff      	cmp	r4, #255	; 0xff
 802227a:	d021      	beq.n	80222c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 802227c:	9c08      	ldr	r4, [sp, #32]
 802227e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022282:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022284:	fb04 fc0c 	mul.w	ip, r4, ip
 8022288:	9c08      	ldr	r4, [sp, #32]
 802228a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802228e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022290:	fb04 fa0e 	mul.w	sl, r4, lr
 8022294:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022298:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802229c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222a0:	44e6      	add	lr, ip
 80222a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80222a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80222aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80222ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80222b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80222ba:	ea4e 040a 	orr.w	r4, lr, sl
 80222be:	9408      	str	r4, [sp, #32]
 80222c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80222c2:	2cff      	cmp	r4, #255	; 0xff
 80222c4:	d021      	beq.n	802230a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80222c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80222c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80222cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80222ce:	fb04 fc0c 	mul.w	ip, r4, ip
 80222d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80222d4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80222d8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80222dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80222de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80222e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80222ea:	44e6      	add	lr, ip
 80222ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80222f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80222f4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80222f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022300:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022304:	ea4e 040a 	orr.w	r4, lr, sl
 8022308:	940d      	str	r4, [sp, #52]	; 0x34
 802230a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802230c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022310:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022314:	2aff      	cmp	r2, #255	; 0xff
 8022316:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802231a:	9c08      	ldr	r4, [sp, #32]
 802231c:	fb08 fc0c 	mul.w	ip, r8, ip
 8022320:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022324:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022328:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802232a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802232e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022332:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022334:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022338:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802233c:	fb08 f80e 	mul.w	r8, r8, lr
 8022340:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022344:	fb01 8303 	mla	r3, r1, r3, r8
 8022348:	9908      	ldr	r1, [sp, #32]
 802234a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802234e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8022352:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022354:	fb00 330a 	mla	r3, r0, sl, r3
 8022358:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 802235c:	fb09 3e0e 	mla	lr, r9, lr, r3
 8022360:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022364:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022368:	ea4c 0c0e 	orr.w	ip, ip, lr
 802236c:	fa5f f08c 	uxtb.w	r0, ip
 8022370:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022374:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022378:	d032      	beq.n	80223e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 802237a:	43d2      	mvns	r2, r2
 802237c:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8022380:	b2d2      	uxtb	r2, r2
 8022382:	fb0e fe02 	mul.w	lr, lr, r2
 8022386:	f10e 0301 	add.w	r3, lr, #1
 802238a:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 802238e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022392:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8022396:	4350      	muls	r0, r2
 8022398:	f807 3c03 	strb.w	r3, [r7, #-3]
 802239c:	1c43      	adds	r3, r0, #1
 802239e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80223a2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80223a6:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80223aa:	4353      	muls	r3, r2
 80223ac:	f807 1c02 	strb.w	r1, [r7, #-2]
 80223b0:	1c5a      	adds	r2, r3, #1
 80223b2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80223b6:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80223ba:	f807 cc01 	strb.w	ip, [r7, #-1]
 80223be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80223c0:	3703      	adds	r7, #3
 80223c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80223c6:	441d      	add	r5, r3
 80223c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80223ca:	441e      	add	r6, r3
 80223cc:	e64e      	b.n	802206c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80223ce:	2800      	cmp	r0, #0
 80223d0:	f43f aeed 	beq.w	80221ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80223d4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80223d8:	9108      	str	r1, [sp, #32]
 80223da:	0e09      	lsrs	r1, r1, #24
 80223dc:	9110      	str	r1, [sp, #64]	; 0x40
 80223de:	e6e6      	b.n	80221ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80223e0:	f807 0c03 	strb.w	r0, [r7, #-3]
 80223e4:	f807 1c02 	strb.w	r1, [r7, #-2]
 80223e8:	e7e7      	b.n	80223ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 80223ea:	b019      	add	sp, #100	; 0x64
 80223ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080223f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80223f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223f4:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 80223f8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80223fc:	2c00      	cmp	r4, #0
 80223fe:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022402:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8022406:	fb00 4e03 	mla	lr, r0, r3, r4
 802240a:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 802240e:	f2c0 80b8 	blt.w	8022582 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022412:	45a1      	cmp	r9, r4
 8022414:	f340 80b5 	ble.w	8022582 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022418:	2800      	cmp	r0, #0
 802241a:	f2c0 80b2 	blt.w	8022582 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802241e:	4580      	cmp	r8, r0
 8022420:	f340 80af 	ble.w	8022582 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022424:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8022428:	f01e 0f01 	tst.w	lr, #1
 802242c:	5d56      	ldrb	r6, [r2, r5]
 802242e:	bf0c      	ite	eq
 8022430:	f006 060f 	andeq.w	r6, r6, #15
 8022434:	1136      	asrne	r6, r6, #4
 8022436:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802243a:	b2f6      	uxtb	r6, r6
 802243c:	f114 0a01 	adds.w	sl, r4, #1
 8022440:	f100 80a1 	bmi.w	8022586 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022444:	45d1      	cmp	r9, sl
 8022446:	f340 809e 	ble.w	8022586 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802244a:	2800      	cmp	r0, #0
 802244c:	f2c0 809b 	blt.w	8022586 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022450:	4580      	cmp	r8, r0
 8022452:	f340 8098 	ble.w	8022586 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022456:	2f00      	cmp	r7, #0
 8022458:	f000 8097 	beq.w	802258a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 802245c:	f10e 0b01 	add.w	fp, lr, #1
 8022460:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8022464:	f01b 0f01 	tst.w	fp, #1
 8022468:	5d55      	ldrb	r5, [r2, r5]
 802246a:	bf0c      	ite	eq
 802246c:	f005 050f 	andeq.w	r5, r5, #15
 8022470:	112d      	asrne	r5, r5, #4
 8022472:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022476:	b2ed      	uxtb	r5, r5
 8022478:	f1bc 0f00 	cmp.w	ip, #0
 802247c:	f000 8089 	beq.w	8022592 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8022480:	2c00      	cmp	r4, #0
 8022482:	f100 0001 	add.w	r0, r0, #1
 8022486:	f2c0 8082 	blt.w	802258e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802248a:	45a1      	cmp	r9, r4
 802248c:	dd7f      	ble.n	802258e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802248e:	2800      	cmp	r0, #0
 8022490:	db7d      	blt.n	802258e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022492:	4580      	cmp	r8, r0
 8022494:	dd7b      	ble.n	802258e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022496:	eb03 0b0e 	add.w	fp, r3, lr
 802249a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802249e:	f01b 0f01 	tst.w	fp, #1
 80224a2:	5d14      	ldrb	r4, [r2, r4]
 80224a4:	bf0c      	ite	eq
 80224a6:	f004 040f 	andeq.w	r4, r4, #15
 80224aa:	1124      	asrne	r4, r4, #4
 80224ac:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80224b0:	b2e4      	uxtb	r4, r4
 80224b2:	f1ba 0f00 	cmp.w	sl, #0
 80224b6:	db6f      	blt.n	8022598 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80224b8:	45d1      	cmp	r9, sl
 80224ba:	dd6d      	ble.n	8022598 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80224bc:	2800      	cmp	r0, #0
 80224be:	db6b      	blt.n	8022598 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80224c0:	4580      	cmp	r8, r0
 80224c2:	dd69      	ble.n	8022598 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80224c4:	2f00      	cmp	r7, #0
 80224c6:	d069      	beq.n	802259c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80224c8:	3301      	adds	r3, #1
 80224ca:	449e      	add	lr, r3
 80224cc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80224d0:	f01e 0f01 	tst.w	lr, #1
 80224d4:	5cd0      	ldrb	r0, [r2, r3]
 80224d6:	bf0c      	ite	eq
 80224d8:	f000 000f 	andeq.w	r0, r0, #15
 80224dc:	1100      	asrne	r0, r0, #4
 80224de:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80224e2:	b2c3      	uxtb	r3, r0
 80224e4:	b2ba      	uxth	r2, r7
 80224e6:	fa1f fc8c 	uxth.w	ip, ip
 80224ea:	fb02 f00c 	mul.w	r0, r2, ip
 80224ee:	0112      	lsls	r2, r2, #4
 80224f0:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80224f4:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80224f8:	1a12      	subs	r2, r2, r0
 80224fa:	fa1f fc8c 	uxth.w	ip, ip
 80224fe:	b292      	uxth	r2, r2
 8022500:	eba7 070c 	sub.w	r7, r7, ip
 8022504:	436a      	muls	r2, r5
 8022506:	b2bf      	uxth	r7, r7
 8022508:	fb06 2207 	mla	r2, r6, r7, r2
 802250c:	fb0c 2404 	mla	r4, ip, r4, r2
 8022510:	fb00 4303 	mla	r3, r0, r3, r4
 8022514:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022518:	b38b      	cbz	r3, 802257e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802251a:	4a21      	ldr	r2, [pc, #132]	; (80225a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 802251c:	6814      	ldr	r4, [r2, #0]
 802251e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8022522:	b2e5      	uxtb	r5, r4
 8022524:	4353      	muls	r3, r2
 8022526:	1c5a      	adds	r2, r3, #1
 8022528:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802252c:	1212      	asrs	r2, r2, #8
 802252e:	b290      	uxth	r0, r2
 8022530:	43d2      	mvns	r2, r2
 8022532:	fb15 f500 	smulbb	r5, r5, r0
 8022536:	b2d3      	uxtb	r3, r2
 8022538:	780a      	ldrb	r2, [r1, #0]
 802253a:	fb02 5203 	mla	r2, r2, r3, r5
 802253e:	b292      	uxth	r2, r2
 8022540:	1c55      	adds	r5, r2, #1
 8022542:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022546:	784d      	ldrb	r5, [r1, #1]
 8022548:	fb15 f503 	smulbb	r5, r5, r3
 802254c:	1212      	asrs	r2, r2, #8
 802254e:	700a      	strb	r2, [r1, #0]
 8022550:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022554:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022558:	fb02 5200 	mla	r2, r2, r0, r5
 802255c:	b292      	uxth	r2, r2
 802255e:	1c55      	adds	r5, r2, #1
 8022560:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022564:	1212      	asrs	r2, r2, #8
 8022566:	704a      	strb	r2, [r1, #1]
 8022568:	788a      	ldrb	r2, [r1, #2]
 802256a:	fb12 f303 	smulbb	r3, r2, r3
 802256e:	fb04 3300 	mla	r3, r4, r0, r3
 8022572:	b29b      	uxth	r3, r3
 8022574:	1c5a      	adds	r2, r3, #1
 8022576:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802257a:	121b      	asrs	r3, r3, #8
 802257c:	708b      	strb	r3, [r1, #2]
 802257e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022582:	2600      	movs	r6, #0
 8022584:	e75a      	b.n	802243c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8022586:	2500      	movs	r5, #0
 8022588:	e776      	b.n	8022478 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802258a:	463d      	mov	r5, r7
 802258c:	e774      	b.n	8022478 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802258e:	2400      	movs	r4, #0
 8022590:	e78f      	b.n	80224b2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8022592:	4663      	mov	r3, ip
 8022594:	4664      	mov	r4, ip
 8022596:	e7a5      	b.n	80224e4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022598:	2300      	movs	r3, #0
 802259a:	e7a3      	b.n	80224e4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802259c:	463b      	mov	r3, r7
 802259e:	e7a1      	b.n	80224e4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80225a0:	2400ff1c 	.word	0x2400ff1c

080225a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80225a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225a8:	b097      	sub	sp, #92	; 0x5c
 80225aa:	9214      	str	r2, [sp, #80]	; 0x50
 80225ac:	9309      	str	r3, [sp, #36]	; 0x24
 80225ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80225b0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80225b4:	9015      	str	r0, [sp, #84]	; 0x54
 80225b6:	910c      	str	r1, [sp, #48]	; 0x30
 80225b8:	6850      	ldr	r0, [r2, #4]
 80225ba:	930e      	str	r3, [sp, #56]	; 0x38
 80225bc:	6812      	ldr	r2, [r2, #0]
 80225be:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80225c2:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 80225c6:	fb00 1303 	mla	r3, r0, r3, r1
 80225ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80225ce:	eb02 0a03 	add.w	sl, r2, r3
 80225d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80225d4:	689b      	ldr	r3, [r3, #8]
 80225d6:	3301      	adds	r3, #1
 80225d8:	f023 0301 	bic.w	r3, r3, #1
 80225dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80225de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80225e0:	681f      	ldr	r7, [r3, #0]
 80225e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225e4:	2b00      	cmp	r3, #0
 80225e6:	dc03      	bgt.n	80225f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80225e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80225ea:	2b00      	cmp	r3, #0
 80225ec:	f340 8247 	ble.w	8022a7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80225f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80225f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80225f6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80225fa:	1e48      	subs	r0, r1, #1
 80225fc:	f102 3cff 	add.w	ip, r2, #4294967295
 8022600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022602:	2b00      	cmp	r3, #0
 8022604:	f340 80e5 	ble.w	80227d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8022608:	ea5f 4e25 	movs.w	lr, r5, asr #16
 802260c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022610:	d406      	bmi.n	8022620 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022612:	4586      	cmp	lr, r0
 8022614:	da04      	bge.n	8022620 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022616:	2b00      	cmp	r3, #0
 8022618:	db02      	blt.n	8022620 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802261a:	4563      	cmp	r3, ip
 802261c:	f2c0 80da 	blt.w	80227d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8022620:	f11e 0e01 	adds.w	lr, lr, #1
 8022624:	f100 80cb 	bmi.w	80227be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8022628:	4571      	cmp	r1, lr
 802262a:	f2c0 80c8 	blt.w	80227be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802262e:	3301      	adds	r3, #1
 8022630:	f100 80c5 	bmi.w	80227be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8022634:	429a      	cmp	r2, r3
 8022636:	f2c0 80c2 	blt.w	80227be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802263a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802263c:	46d0      	mov	r8, sl
 802263e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8022642:	930d      	str	r3, [sp, #52]	; 0x34
 8022644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022646:	2b00      	cmp	r3, #0
 8022648:	f340 80e3 	ble.w	8022812 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802264c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802264e:	1430      	asrs	r0, r6, #16
 8022650:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022654:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022658:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802265c:	142b      	asrs	r3, r5, #16
 802265e:	f100 812e 	bmi.w	80228be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022662:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022666:	455b      	cmp	r3, fp
 8022668:	f280 8129 	bge.w	80228be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802266c:	2800      	cmp	r0, #0
 802266e:	f2c0 8126 	blt.w	80228be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022672:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022676:	4558      	cmp	r0, fp
 8022678:	f280 8121 	bge.w	80228be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802267c:	fb00 3309 	mla	r3, r0, r9, r3
 8022680:	0858      	lsrs	r0, r3, #1
 8022682:	07dc      	lsls	r4, r3, #31
 8022684:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022688:	bf54      	ite	pl
 802268a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802268e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022692:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022696:	fa5f fc8c 	uxtb.w	ip, ip
 802269a:	2a00      	cmp	r2, #0
 802269c:	f000 80fe 	beq.w	802289c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80226a0:	1c58      	adds	r0, r3, #1
 80226a2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80226a6:	07c0      	lsls	r0, r0, #31
 80226a8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80226ac:	bf54      	ite	pl
 80226ae:	f00e 0e0f 	andpl.w	lr, lr, #15
 80226b2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80226b6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80226ba:	fa5f f08e 	uxtb.w	r0, lr
 80226be:	9010      	str	r0, [sp, #64]	; 0x40
 80226c0:	b1d9      	cbz	r1, 80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80226c2:	444b      	add	r3, r9
 80226c4:	0858      	lsrs	r0, r3, #1
 80226c6:	07dc      	lsls	r4, r3, #31
 80226c8:	f103 0301 	add.w	r3, r3, #1
 80226cc:	5c38      	ldrb	r0, [r7, r0]
 80226ce:	bf54      	ite	pl
 80226d0:	f000 000f 	andpl.w	r0, r0, #15
 80226d4:	1100      	asrmi	r0, r0, #4
 80226d6:	07dc      	lsls	r4, r3, #31
 80226d8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80226dc:	b2c0      	uxtb	r0, r0
 80226de:	900a      	str	r0, [sp, #40]	; 0x28
 80226e0:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80226e4:	f817 e000 	ldrb.w	lr, [r7, r0]
 80226e8:	bf54      	ite	pl
 80226ea:	f00e 030f 	andpl.w	r3, lr, #15
 80226ee:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80226f2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80226f6:	b2db      	uxtb	r3, r3
 80226f8:	9311      	str	r3, [sp, #68]	; 0x44
 80226fa:	b292      	uxth	r2, r2
 80226fc:	b289      	uxth	r1, r1
 80226fe:	0113      	lsls	r3, r2, #4
 8022700:	fb02 f001 	mul.w	r0, r2, r1
 8022704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022706:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802270a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802270e:	1a1b      	subs	r3, r3, r0
 8022710:	b289      	uxth	r1, r1
 8022712:	b29b      	uxth	r3, r3
 8022714:	ebae 0e01 	sub.w	lr, lr, r1
 8022718:	4353      	muls	r3, r2
 802271a:	fa1f fe8e 	uxth.w	lr, lr
 802271e:	fb0c 320e 	mla	r2, ip, lr, r3
 8022722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022724:	fb01 2203 	mla	r2, r1, r3, r2
 8022728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802272a:	fb00 2203 	mla	r2, r0, r3, r2
 802272e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022732:	2a00      	cmp	r2, #0
 8022734:	d039      	beq.n	80227aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022736:	4bc7      	ldr	r3, [pc, #796]	; (8022a54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8022738:	6819      	ldr	r1, [r3, #0]
 802273a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802273c:	fa5f fc81 	uxtb.w	ip, r1
 8022740:	435a      	muls	r2, r3
 8022742:	1c53      	adds	r3, r2, #1
 8022744:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022748:	1212      	asrs	r2, r2, #8
 802274a:	b290      	uxth	r0, r2
 802274c:	43d2      	mvns	r2, r2
 802274e:	fb1c fc00 	smulbb	ip, ip, r0
 8022752:	b2d3      	uxtb	r3, r2
 8022754:	f898 2000 	ldrb.w	r2, [r8]
 8022758:	fb02 c203 	mla	r2, r2, r3, ip
 802275c:	b292      	uxth	r2, r2
 802275e:	f102 0c01 	add.w	ip, r2, #1
 8022762:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022766:	f898 c001 	ldrb.w	ip, [r8, #1]
 802276a:	fb1c fc03 	smulbb	ip, ip, r3
 802276e:	1212      	asrs	r2, r2, #8
 8022770:	f888 2000 	strb.w	r2, [r8]
 8022774:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022778:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802277c:	fb02 c200 	mla	r2, r2, r0, ip
 8022780:	b292      	uxth	r2, r2
 8022782:	f102 0c01 	add.w	ip, r2, #1
 8022786:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802278a:	1212      	asrs	r2, r2, #8
 802278c:	f888 2001 	strb.w	r2, [r8, #1]
 8022790:	f898 2002 	ldrb.w	r2, [r8, #2]
 8022794:	fb12 f303 	smulbb	r3, r2, r3
 8022798:	fb01 3300 	mla	r3, r1, r0, r3
 802279c:	b29b      	uxth	r3, r3
 802279e:	1c5a      	adds	r2, r3, #1
 80227a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80227a4:	121b      	asrs	r3, r3, #8
 80227a6:	f888 3002 	strb.w	r3, [r8, #2]
 80227aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80227ac:	f108 0803 	add.w	r8, r8, #3
 80227b0:	441d      	add	r5, r3
 80227b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80227b4:	441e      	add	r6, r3
 80227b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80227b8:	3b01      	subs	r3, #1
 80227ba:	930d      	str	r3, [sp, #52]	; 0x34
 80227bc:	e742      	b.n	8022644 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80227be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80227c0:	f10a 0a03 	add.w	sl, sl, #3
 80227c4:	441d      	add	r5, r3
 80227c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80227c8:	441e      	add	r6, r3
 80227ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227cc:	3b01      	subs	r3, #1
 80227ce:	9309      	str	r3, [sp, #36]	; 0x24
 80227d0:	e716      	b.n	8022600 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80227d2:	d024      	beq.n	802281e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80227d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227d6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80227d8:	3b01      	subs	r3, #1
 80227da:	fb00 5003 	mla	r0, r0, r3, r5
 80227de:	1400      	asrs	r0, r0, #16
 80227e0:	f53f af2b 	bmi.w	802263a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227e4:	3901      	subs	r1, #1
 80227e6:	4288      	cmp	r0, r1
 80227e8:	f6bf af27 	bge.w	802263a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227ec:	9924      	ldr	r1, [sp, #144]	; 0x90
 80227ee:	fb01 6303 	mla	r3, r1, r3, r6
 80227f2:	141b      	asrs	r3, r3, #16
 80227f4:	f53f af21 	bmi.w	802263a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227f8:	3a01      	subs	r2, #1
 80227fa:	4293      	cmp	r3, r2
 80227fc:	f6bf af1d 	bge.w	802263a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022800:	f10a 0e03 	add.w	lr, sl, #3
 8022804:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8022808:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802280c:	f1b8 0f00 	cmp.w	r8, #0
 8022810:	dc76      	bgt.n	8022900 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8022812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022814:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022818:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802281c:	44a2      	add	sl, r4
 802281e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022820:	2b00      	cmp	r3, #0
 8022822:	f340 812c 	ble.w	8022a7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8022826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802282a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802282c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022830:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022834:	eef0 6a62 	vmov.f32	s13, s5
 8022838:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802283c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022840:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022844:	ee16 5a90 	vmov	r5, s13
 8022848:	eef0 6a43 	vmov.f32	s13, s6
 802284c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022850:	ee16 6a90 	vmov	r6, s13
 8022854:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022858:	ee61 7a27 	vmul.f32	s15, s2, s15
 802285c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022860:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022864:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022868:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802286c:	ee12 2a90 	vmov	r2, s5
 8022870:	eef0 2a47 	vmov.f32	s5, s14
 8022874:	fb92 f3f3 	sdiv	r3, r2, r3
 8022878:	ee13 2a10 	vmov	r2, s6
 802287c:	9323      	str	r3, [sp, #140]	; 0x8c
 802287e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022880:	eeb0 3a67 	vmov.f32	s6, s15
 8022884:	fb92 f3f3 	sdiv	r3, r2, r3
 8022888:	9324      	str	r3, [sp, #144]	; 0x90
 802288a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802288c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802288e:	3b01      	subs	r3, #1
 8022890:	930c      	str	r3, [sp, #48]	; 0x30
 8022892:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022894:	bf08      	it	eq
 8022896:	4613      	moveq	r3, r2
 8022898:	9309      	str	r3, [sp, #36]	; 0x24
 802289a:	e6a2      	b.n	80225e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802289c:	2900      	cmp	r1, #0
 802289e:	f43f af2c 	beq.w	80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80228a2:	eb09 0003 	add.w	r0, r9, r3
 80228a6:	0843      	lsrs	r3, r0, #1
 80228a8:	07c0      	lsls	r0, r0, #31
 80228aa:	5cfb      	ldrb	r3, [r7, r3]
 80228ac:	bf54      	ite	pl
 80228ae:	f003 030f 	andpl.w	r3, r3, #15
 80228b2:	111b      	asrmi	r3, r3, #4
 80228b4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80228b8:	b2db      	uxtb	r3, r3
 80228ba:	930a      	str	r3, [sp, #40]	; 0x28
 80228bc:	e71d      	b.n	80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80228be:	f113 0b01 	adds.w	fp, r3, #1
 80228c2:	f53f af72 	bmi.w	80227aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80228c6:	45dc      	cmp	ip, fp
 80228c8:	f6ff af6f 	blt.w	80227aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80228cc:	f110 0b01 	adds.w	fp, r0, #1
 80228d0:	f53f af6b 	bmi.w	80227aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80228d4:	45de      	cmp	lr, fp
 80228d6:	f6ff af68 	blt.w	80227aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80228da:	9302      	str	r3, [sp, #8]
 80228dc:	fa0f f38e 	sxth.w	r3, lr
 80228e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80228e2:	9301      	str	r3, [sp, #4]
 80228e4:	fa0f f38c 	sxth.w	r3, ip
 80228e8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80228ec:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80228f0:	9300      	str	r3, [sp, #0]
 80228f2:	463a      	mov	r2, r7
 80228f4:	464b      	mov	r3, r9
 80228f6:	4641      	mov	r1, r8
 80228f8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80228fa:	f7ff fd79 	bl	80223f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80228fe:	e754      	b.n	80227aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022900:	142a      	asrs	r2, r5, #16
 8022902:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022906:	1433      	asrs	r3, r6, #16
 8022908:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802290c:	fb09 2303 	mla	r3, r9, r3, r2
 8022910:	085a      	lsrs	r2, r3, #1
 8022912:	07dc      	lsls	r4, r3, #31
 8022914:	5cba      	ldrb	r2, [r7, r2]
 8022916:	bf54      	ite	pl
 8022918:	f002 020f 	andpl.w	r2, r2, #15
 802291c:	1112      	asrmi	r2, r2, #4
 802291e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022922:	b2d2      	uxtb	r2, r2
 8022924:	2900      	cmp	r1, #0
 8022926:	f000 8097 	beq.w	8022a58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802292a:	f103 0b01 	add.w	fp, r3, #1
 802292e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8022932:	f01b 0f01 	tst.w	fp, #1
 8022936:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802293a:	bf0c      	ite	eq
 802293c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022940:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022944:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022948:	fa5f f48c 	uxtb.w	r4, ip
 802294c:	9412      	str	r4, [sp, #72]	; 0x48
 802294e:	b300      	cbz	r0, 8022992 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8022950:	444b      	add	r3, r9
 8022952:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022956:	07dc      	lsls	r4, r3, #31
 8022958:	f103 0301 	add.w	r3, r3, #1
 802295c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022960:	bf54      	ite	pl
 8022962:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022966:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802296a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802296e:	fa5f f48c 	uxtb.w	r4, ip
 8022972:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022976:	940b      	str	r4, [sp, #44]	; 0x2c
 8022978:	07dc      	lsls	r4, r3, #31
 802297a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802297e:	bf54      	ite	pl
 8022980:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022984:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022988:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802298c:	fa5f f38c 	uxtb.w	r3, ip
 8022990:	9313      	str	r3, [sp, #76]	; 0x4c
 8022992:	b289      	uxth	r1, r1
 8022994:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022996:	b280      	uxth	r0, r0
 8022998:	fb01 f300 	mul.w	r3, r1, r0
 802299c:	0109      	lsls	r1, r1, #4
 802299e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80229a2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80229a6:	1ac9      	subs	r1, r1, r3
 80229a8:	b280      	uxth	r0, r0
 80229aa:	b289      	uxth	r1, r1
 80229ac:	ebac 0c00 	sub.w	ip, ip, r0
 80229b0:	4361      	muls	r1, r4
 80229b2:	fa1f fc8c 	uxth.w	ip, ip
 80229b6:	fb02 120c 	mla	r2, r2, ip, r1
 80229ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80229bc:	fb00 2001 	mla	r0, r0, r1, r2
 80229c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80229c2:	fb03 0302 	mla	r3, r3, r2, r0
 80229c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	d039      	beq.n	8022a42 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80229ce:	4a21      	ldr	r2, [pc, #132]	; (8022a54 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80229d0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80229d4:	6810      	ldr	r0, [r2, #0]
 80229d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80229d8:	fa5f fc80 	uxtb.w	ip, r0
 80229dc:	4353      	muls	r3, r2
 80229de:	1c5a      	adds	r2, r3, #1
 80229e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80229e4:	121b      	asrs	r3, r3, #8
 80229e6:	b29a      	uxth	r2, r3
 80229e8:	43db      	mvns	r3, r3
 80229ea:	fb1c fc02 	smulbb	ip, ip, r2
 80229ee:	b2db      	uxtb	r3, r3
 80229f0:	fb01 c103 	mla	r1, r1, r3, ip
 80229f4:	b289      	uxth	r1, r1
 80229f6:	f101 0c01 	add.w	ip, r1, #1
 80229fa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80229fe:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022a02:	fb1c fc03 	smulbb	ip, ip, r3
 8022a06:	1209      	asrs	r1, r1, #8
 8022a08:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022a0c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022a10:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022a14:	fb01 c102 	mla	r1, r1, r2, ip
 8022a18:	b289      	uxth	r1, r1
 8022a1a:	f101 0c01 	add.w	ip, r1, #1
 8022a1e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022a22:	1209      	asrs	r1, r1, #8
 8022a24:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022a28:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022a2c:	fb11 f303 	smulbb	r3, r1, r3
 8022a30:	fb00 3002 	mla	r0, r0, r2, r3
 8022a34:	b280      	uxth	r0, r0
 8022a36:	1c42      	adds	r2, r0, #1
 8022a38:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022a3c:	1200      	asrs	r0, r0, #8
 8022a3e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8022a42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022a44:	f10e 0e03 	add.w	lr, lr, #3
 8022a48:	f108 38ff 	add.w	r8, r8, #4294967295
 8022a4c:	441d      	add	r5, r3
 8022a4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022a50:	441e      	add	r6, r3
 8022a52:	e6db      	b.n	802280c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8022a54:	2400ff1c 	.word	0x2400ff1c
 8022a58:	2800      	cmp	r0, #0
 8022a5a:	d09a      	beq.n	8022992 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8022a5c:	444b      	add	r3, r9
 8022a5e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a62:	07db      	lsls	r3, r3, #31
 8022a64:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a68:	bf54      	ite	pl
 8022a6a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022a6e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022a72:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a76:	fa5f f38c 	uxtb.w	r3, ip
 8022a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a7c:	e789      	b.n	8022992 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8022a7e:	b017      	add	sp, #92	; 0x5c
 8022a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a84 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a88:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8022a8c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022a90:	2d00      	cmp	r5, #0
 8022a92:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022a96:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8022a9a:	fb04 5e03 	mla	lr, r4, r3, r5
 8022a9e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8022aa2:	f2c0 80b1 	blt.w	8022c08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022aa6:	45a9      	cmp	r9, r5
 8022aa8:	f340 80ae 	ble.w	8022c08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022aac:	2c00      	cmp	r4, #0
 8022aae:	f2c0 80ab 	blt.w	8022c08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022ab2:	45a0      	cmp	r8, r4
 8022ab4:	f340 80a8 	ble.w	8022c08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022ab8:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8022abc:	f01e 0f01 	tst.w	lr, #1
 8022ac0:	5d97      	ldrb	r7, [r2, r6]
 8022ac2:	bf0c      	ite	eq
 8022ac4:	f007 070f 	andeq.w	r7, r7, #15
 8022ac8:	113f      	asrne	r7, r7, #4
 8022aca:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8022ace:	b2ff      	uxtb	r7, r7
 8022ad0:	f115 0a01 	adds.w	sl, r5, #1
 8022ad4:	f100 809a 	bmi.w	8022c0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022ad8:	45d1      	cmp	r9, sl
 8022ada:	f340 8097 	ble.w	8022c0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022ade:	2c00      	cmp	r4, #0
 8022ae0:	f2c0 8094 	blt.w	8022c0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022ae4:	45a0      	cmp	r8, r4
 8022ae6:	f340 8091 	ble.w	8022c0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022aea:	2800      	cmp	r0, #0
 8022aec:	f000 8090 	beq.w	8022c10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8022af0:	f10e 0b01 	add.w	fp, lr, #1
 8022af4:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8022af8:	f01b 0f01 	tst.w	fp, #1
 8022afc:	5d96      	ldrb	r6, [r2, r6]
 8022afe:	bf0c      	ite	eq
 8022b00:	f006 060f 	andeq.w	r6, r6, #15
 8022b04:	1136      	asrne	r6, r6, #4
 8022b06:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022b0a:	b2f6      	uxtb	r6, r6
 8022b0c:	f1bc 0f00 	cmp.w	ip, #0
 8022b10:	f000 8082 	beq.w	8022c18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8022b14:	2d00      	cmp	r5, #0
 8022b16:	f104 0401 	add.w	r4, r4, #1
 8022b1a:	db7b      	blt.n	8022c14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022b1c:	45a9      	cmp	r9, r5
 8022b1e:	dd79      	ble.n	8022c14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022b20:	2c00      	cmp	r4, #0
 8022b22:	db77      	blt.n	8022c14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022b24:	45a0      	cmp	r8, r4
 8022b26:	dd75      	ble.n	8022c14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022b28:	eb03 0b0e 	add.w	fp, r3, lr
 8022b2c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8022b30:	f01b 0f01 	tst.w	fp, #1
 8022b34:	5d55      	ldrb	r5, [r2, r5]
 8022b36:	bf0c      	ite	eq
 8022b38:	f005 050f 	andeq.w	r5, r5, #15
 8022b3c:	112d      	asrne	r5, r5, #4
 8022b3e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022b42:	b2ed      	uxtb	r5, r5
 8022b44:	f1ba 0f00 	cmp.w	sl, #0
 8022b48:	db69      	blt.n	8022c1e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022b4a:	45d1      	cmp	r9, sl
 8022b4c:	dd67      	ble.n	8022c1e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022b4e:	2c00      	cmp	r4, #0
 8022b50:	db65      	blt.n	8022c1e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022b52:	45a0      	cmp	r8, r4
 8022b54:	dd63      	ble.n	8022c1e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022b56:	2800      	cmp	r0, #0
 8022b58:	d063      	beq.n	8022c22 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8022b5a:	3301      	adds	r3, #1
 8022b5c:	449e      	add	lr, r3
 8022b5e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022b62:	f01e 0f01 	tst.w	lr, #1
 8022b66:	5cd4      	ldrb	r4, [r2, r3]
 8022b68:	bf0c      	ite	eq
 8022b6a:	f004 040f 	andeq.w	r4, r4, #15
 8022b6e:	1124      	asrne	r4, r4, #4
 8022b70:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022b74:	b2e3      	uxtb	r3, r4
 8022b76:	b282      	uxth	r2, r0
 8022b78:	fa1f fc8c 	uxth.w	ip, ip
 8022b7c:	fb02 f40c 	mul.w	r4, r2, ip
 8022b80:	0112      	lsls	r2, r2, #4
 8022b82:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8022b86:	fa1f f08c 	uxth.w	r0, ip
 8022b8a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022b8e:	1b12      	subs	r2, r2, r4
 8022b90:	ebac 0c00 	sub.w	ip, ip, r0
 8022b94:	b292      	uxth	r2, r2
 8022b96:	fa1f fc8c 	uxth.w	ip, ip
 8022b9a:	4372      	muls	r2, r6
 8022b9c:	fb07 220c 	mla	r2, r7, ip, r2
 8022ba0:	fb00 2005 	mla	r0, r0, r5, r2
 8022ba4:	fb04 0303 	mla	r3, r4, r3, r0
 8022ba8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022bac:	b353      	cbz	r3, 8022c04 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8022bae:	4a1e      	ldr	r2, [pc, #120]	; (8022c28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8022bb0:	7808      	ldrb	r0, [r1, #0]
 8022bb2:	6814      	ldr	r4, [r2, #0]
 8022bb4:	b29a      	uxth	r2, r3
 8022bb6:	43db      	mvns	r3, r3
 8022bb8:	b2e5      	uxtb	r5, r4
 8022bba:	b2db      	uxtb	r3, r3
 8022bbc:	fb15 f502 	smulbb	r5, r5, r2
 8022bc0:	fb00 5003 	mla	r0, r0, r3, r5
 8022bc4:	b280      	uxth	r0, r0
 8022bc6:	1c45      	adds	r5, r0, #1
 8022bc8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022bcc:	784d      	ldrb	r5, [r1, #1]
 8022bce:	fb15 f503 	smulbb	r5, r5, r3
 8022bd2:	1200      	asrs	r0, r0, #8
 8022bd4:	7008      	strb	r0, [r1, #0]
 8022bd6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022bda:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022bde:	fb00 5002 	mla	r0, r0, r2, r5
 8022be2:	b280      	uxth	r0, r0
 8022be4:	1c45      	adds	r5, r0, #1
 8022be6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022bea:	1200      	asrs	r0, r0, #8
 8022bec:	7048      	strb	r0, [r1, #1]
 8022bee:	7888      	ldrb	r0, [r1, #2]
 8022bf0:	fb10 f303 	smulbb	r3, r0, r3
 8022bf4:	fb04 3202 	mla	r2, r4, r2, r3
 8022bf8:	b292      	uxth	r2, r2
 8022bfa:	1c53      	adds	r3, r2, #1
 8022bfc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022c00:	1212      	asrs	r2, r2, #8
 8022c02:	708a      	strb	r2, [r1, #2]
 8022c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c08:	2700      	movs	r7, #0
 8022c0a:	e761      	b.n	8022ad0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8022c0c:	2600      	movs	r6, #0
 8022c0e:	e77d      	b.n	8022b0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8022c10:	4606      	mov	r6, r0
 8022c12:	e77b      	b.n	8022b0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8022c14:	2500      	movs	r5, #0
 8022c16:	e795      	b.n	8022b44 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8022c18:	4663      	mov	r3, ip
 8022c1a:	4665      	mov	r5, ip
 8022c1c:	e7ab      	b.n	8022b76 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022c1e:	2300      	movs	r3, #0
 8022c20:	e7a9      	b.n	8022b76 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022c22:	4603      	mov	r3, r0
 8022c24:	e7a7      	b.n	8022b76 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022c26:	bf00      	nop
 8022c28:	2400ff1c 	.word	0x2400ff1c

08022c2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c30:	b093      	sub	sp, #76	; 0x4c
 8022c32:	461c      	mov	r4, r3
 8022c34:	920c      	str	r2, [sp, #48]	; 0x30
 8022c36:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022c38:	9011      	str	r0, [sp, #68]	; 0x44
 8022c3a:	9107      	str	r1, [sp, #28]
 8022c3c:	6850      	ldr	r0, [r2, #4]
 8022c3e:	6812      	ldr	r2, [r2, #0]
 8022c40:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022c44:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8022c48:	fb00 1303 	mla	r3, r0, r3, r1
 8022c4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022c50:	eb02 0b03 	add.w	fp, r2, r3
 8022c54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c56:	689b      	ldr	r3, [r3, #8]
 8022c58:	3301      	adds	r3, #1
 8022c5a:	f023 0301 	bic.w	r3, r3, #1
 8022c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8022c60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c62:	f8d3 8000 	ldr.w	r8, [r3]
 8022c66:	9b07      	ldr	r3, [sp, #28]
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	dc03      	bgt.n	8022c74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c6e:	2b00      	cmp	r3, #0
 8022c70:	f340 822b 	ble.w	80230ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022c74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022c7e:	1e48      	subs	r0, r1, #1
 8022c80:	1e57      	subs	r7, r2, #1
 8022c82:	2c00      	cmp	r4, #0
 8022c84:	f340 80d7 	ble.w	8022e36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8022c88:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022c8c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c90:	d406      	bmi.n	8022ca0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022c92:	4584      	cmp	ip, r0
 8022c94:	da04      	bge.n	8022ca0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022c96:	2b00      	cmp	r3, #0
 8022c98:	db02      	blt.n	8022ca0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022c9a:	42bb      	cmp	r3, r7
 8022c9c:	f2c0 80cc 	blt.w	8022e38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022ca0:	f11c 0c01 	adds.w	ip, ip, #1
 8022ca4:	f100 80bf 	bmi.w	8022e26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022ca8:	4561      	cmp	r1, ip
 8022caa:	f2c0 80bc 	blt.w	8022e26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022cae:	3301      	adds	r3, #1
 8022cb0:	f100 80b9 	bmi.w	8022e26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022cb4:	429a      	cmp	r2, r3
 8022cb6:	f2c0 80b6 	blt.w	8022e26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022cba:	46a2      	mov	sl, r4
 8022cbc:	465f      	mov	r7, fp
 8022cbe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022cc2:	f1ba 0f00 	cmp.w	sl, #0
 8022cc6:	f340 80d4 	ble.w	8022e72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8022cca:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8022cce:	1430      	asrs	r0, r6, #16
 8022cd0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022cd4:	9308      	str	r3, [sp, #32]
 8022cd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022cd8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022cdc:	142b      	asrs	r3, r5, #16
 8022cde:	f100 8124 	bmi.w	8022f2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022ce2:	f10c 32ff 	add.w	r2, ip, #4294967295
 8022ce6:	4293      	cmp	r3, r2
 8022ce8:	f280 811f 	bge.w	8022f2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022cec:	2800      	cmp	r0, #0
 8022cee:	f2c0 811c 	blt.w	8022f2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022cf2:	f10e 32ff 	add.w	r2, lr, #4294967295
 8022cf6:	4290      	cmp	r0, r2
 8022cf8:	f280 8117 	bge.w	8022f2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022cfc:	fb00 3309 	mla	r3, r0, r9, r3
 8022d00:	0858      	lsrs	r0, r3, #1
 8022d02:	07da      	lsls	r2, r3, #31
 8022d04:	9a08      	ldr	r2, [sp, #32]
 8022d06:	f818 c000 	ldrb.w	ip, [r8, r0]
 8022d0a:	bf54      	ite	pl
 8022d0c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022d10:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022d14:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022d18:	fa5f fc8c 	uxtb.w	ip, ip
 8022d1c:	2a00      	cmp	r2, #0
 8022d1e:	f000 80ed 	beq.w	8022efc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8022d22:	1c58      	adds	r0, r3, #1
 8022d24:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022d28:	07c0      	lsls	r0, r0, #31
 8022d2a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8022d2e:	bf54      	ite	pl
 8022d30:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022d34:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022d38:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022d3c:	fa5f fe8e 	uxtb.w	lr, lr
 8022d40:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8022d44:	b1c9      	cbz	r1, 8022d7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022d46:	444b      	add	r3, r9
 8022d48:	0858      	lsrs	r0, r3, #1
 8022d4a:	07da      	lsls	r2, r3, #31
 8022d4c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8022d50:	bf54      	ite	pl
 8022d52:	f000 000f 	andpl.w	r0, r0, #15
 8022d56:	1100      	asrmi	r0, r0, #4
 8022d58:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022d5c:	b2c0      	uxtb	r0, r0
 8022d5e:	900a      	str	r0, [sp, #40]	; 0x28
 8022d60:	1c58      	adds	r0, r3, #1
 8022d62:	0843      	lsrs	r3, r0, #1
 8022d64:	07c2      	lsls	r2, r0, #31
 8022d66:	f818 3003 	ldrb.w	r3, [r8, r3]
 8022d6a:	bf54      	ite	pl
 8022d6c:	f003 030f 	andpl.w	r3, r3, #15
 8022d70:	111b      	asrmi	r3, r3, #4
 8022d72:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022d76:	b2db      	uxtb	r3, r3
 8022d78:	930e      	str	r3, [sp, #56]	; 0x38
 8022d7a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022d7e:	b289      	uxth	r1, r1
 8022d80:	fb02 f301 	mul.w	r3, r2, r1
 8022d84:	0112      	lsls	r2, r2, #4
 8022d86:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022d8a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022d8e:	1ad2      	subs	r2, r2, r3
 8022d90:	b289      	uxth	r1, r1
 8022d92:	b292      	uxth	r2, r2
 8022d94:	1a40      	subs	r0, r0, r1
 8022d96:	fa1f fe80 	uxth.w	lr, r0
 8022d9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022d9c:	4342      	muls	r2, r0
 8022d9e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022da4:	fb01 c102 	mla	r1, r1, r2, ip
 8022da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022daa:	fb03 1302 	mla	r3, r3, r2, r1
 8022dae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022db2:	b383      	cbz	r3, 8022e16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022db4:	4ac6      	ldr	r2, [pc, #792]	; (80230d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8022db6:	2bff      	cmp	r3, #255	; 0xff
 8022db8:	6812      	ldr	r2, [r2, #0]
 8022dba:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8022dbe:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8022dc2:	b2d2      	uxtb	r2, r2
 8022dc4:	f000 80ac 	beq.w	8022f20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022dc8:	b299      	uxth	r1, r3
 8022dca:	43db      	mvns	r3, r3
 8022dcc:	f897 c000 	ldrb.w	ip, [r7]
 8022dd0:	fb12 f201 	smulbb	r2, r2, r1
 8022dd4:	b2db      	uxtb	r3, r3
 8022dd6:	fb10 f001 	smulbb	r0, r0, r1
 8022dda:	fb0c 2203 	mla	r2, ip, r3, r2
 8022dde:	fb1e f101 	smulbb	r1, lr, r1
 8022de2:	b292      	uxth	r2, r2
 8022de4:	f102 0c01 	add.w	ip, r2, #1
 8022de8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022dec:	1212      	asrs	r2, r2, #8
 8022dee:	703a      	strb	r2, [r7, #0]
 8022df0:	787a      	ldrb	r2, [r7, #1]
 8022df2:	fb02 0003 	mla	r0, r2, r3, r0
 8022df6:	b280      	uxth	r0, r0
 8022df8:	1c42      	adds	r2, r0, #1
 8022dfa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022dfe:	78ba      	ldrb	r2, [r7, #2]
 8022e00:	fb02 1303 	mla	r3, r2, r3, r1
 8022e04:	1200      	asrs	r0, r0, #8
 8022e06:	b29b      	uxth	r3, r3
 8022e08:	7078      	strb	r0, [r7, #1]
 8022e0a:	f103 0e01 	add.w	lr, r3, #1
 8022e0e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022e12:	121b      	asrs	r3, r3, #8
 8022e14:	70bb      	strb	r3, [r7, #2]
 8022e16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022e18:	3703      	adds	r7, #3
 8022e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022e1e:	441d      	add	r5, r3
 8022e20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022e22:	441e      	add	r6, r3
 8022e24:	e74d      	b.n	8022cc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022e26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022e28:	3c01      	subs	r4, #1
 8022e2a:	f10b 0b03 	add.w	fp, fp, #3
 8022e2e:	441d      	add	r5, r3
 8022e30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022e32:	441e      	add	r6, r3
 8022e34:	e725      	b.n	8022c82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022e36:	d021      	beq.n	8022e7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8022e38:	1e63      	subs	r3, r4, #1
 8022e3a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022e3c:	fb00 5003 	mla	r0, r0, r3, r5
 8022e40:	1400      	asrs	r0, r0, #16
 8022e42:	f53f af3a 	bmi.w	8022cba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022e46:	3901      	subs	r1, #1
 8022e48:	4288      	cmp	r0, r1
 8022e4a:	f6bf af36 	bge.w	8022cba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022e4e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022e50:	fb01 6303 	mla	r3, r1, r3, r6
 8022e54:	141b      	asrs	r3, r3, #16
 8022e56:	f53f af30 	bmi.w	8022cba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022e5a:	3a01      	subs	r2, #1
 8022e5c:	4293      	cmp	r3, r2
 8022e5e:	f6bf af2c 	bge.w	8022cba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022e62:	f10b 0c03 	add.w	ip, fp, #3
 8022e66:	46a6      	mov	lr, r4
 8022e68:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022e6c:	f1be 0f00 	cmp.w	lr, #0
 8022e70:	dc79      	bgt.n	8022f66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8022e72:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022e76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e7a:	44a3      	add	fp, r4
 8022e7c:	9b07      	ldr	r3, [sp, #28]
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	f340 8123 	ble.w	80230ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022e88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e92:	eef0 6a62 	vmov.f32	s13, s5
 8022e96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022e9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ea2:	ee16 5a90 	vmov	r5, s13
 8022ea6:	eef0 6a43 	vmov.f32	s13, s6
 8022eaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022eae:	ee16 6a90 	vmov	r6, s13
 8022eb2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022eb6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022eba:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022ebe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022ec2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022ec6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022eca:	ee12 2a90 	vmov	r2, s5
 8022ece:	eef0 2a47 	vmov.f32	s5, s14
 8022ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ed6:	ee13 2a10 	vmov	r2, s6
 8022eda:	931f      	str	r3, [sp, #124]	; 0x7c
 8022edc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022ede:	eeb0 3a67 	vmov.f32	s6, s15
 8022ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ee6:	9320      	str	r3, [sp, #128]	; 0x80
 8022ee8:	9b07      	ldr	r3, [sp, #28]
 8022eea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022eec:	3b01      	subs	r3, #1
 8022eee:	9307      	str	r3, [sp, #28]
 8022ef0:	bf08      	it	eq
 8022ef2:	4614      	moveq	r4, r2
 8022ef4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022ef6:	bf18      	it	ne
 8022ef8:	461c      	movne	r4, r3
 8022efa:	e6b4      	b.n	8022c66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022efc:	2900      	cmp	r1, #0
 8022efe:	f43f af3c 	beq.w	8022d7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022f02:	eb09 0003 	add.w	r0, r9, r3
 8022f06:	0843      	lsrs	r3, r0, #1
 8022f08:	07c0      	lsls	r0, r0, #31
 8022f0a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8022f0e:	bf54      	ite	pl
 8022f10:	f003 030f 	andpl.w	r3, r3, #15
 8022f14:	111b      	asrmi	r3, r3, #4
 8022f16:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022f1a:	b2db      	uxtb	r3, r3
 8022f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8022f1e:	e72c      	b.n	8022d7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022f20:	703a      	strb	r2, [r7, #0]
 8022f22:	7078      	strb	r0, [r7, #1]
 8022f24:	f887 e002 	strb.w	lr, [r7, #2]
 8022f28:	e775      	b.n	8022e16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022f2a:	1c5a      	adds	r2, r3, #1
 8022f2c:	f53f af73 	bmi.w	8022e16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022f30:	4594      	cmp	ip, r2
 8022f32:	f6ff af70 	blt.w	8022e16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022f36:	1c42      	adds	r2, r0, #1
 8022f38:	f53f af6d 	bmi.w	8022e16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022f3c:	4596      	cmp	lr, r2
 8022f3e:	f6ff af6a 	blt.w	8022e16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022f42:	9302      	str	r3, [sp, #8]
 8022f44:	fa0f f38e 	sxth.w	r3, lr
 8022f48:	9a08      	ldr	r2, [sp, #32]
 8022f4a:	9301      	str	r3, [sp, #4]
 8022f4c:	fa0f f38c 	sxth.w	r3, ip
 8022f50:	9105      	str	r1, [sp, #20]
 8022f52:	4639      	mov	r1, r7
 8022f54:	9300      	str	r3, [sp, #0]
 8022f56:	464b      	mov	r3, r9
 8022f58:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022f5c:	4642      	mov	r2, r8
 8022f5e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022f60:	f7ff fd90 	bl	8022a84 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8022f64:	e757      	b.n	8022e16 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022f66:	142a      	asrs	r2, r5, #16
 8022f68:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022f6c:	1433      	asrs	r3, r6, #16
 8022f6e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8022f72:	fb09 2303 	mla	r3, r9, r3, r2
 8022f76:	085a      	lsrs	r2, r3, #1
 8022f78:	07d9      	lsls	r1, r3, #31
 8022f7a:	f818 2002 	ldrb.w	r2, [r8, r2]
 8022f7e:	bf54      	ite	pl
 8022f80:	f002 020f 	andpl.w	r2, r2, #15
 8022f84:	1112      	asrmi	r2, r2, #4
 8022f86:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022f8a:	b2d2      	uxtb	r2, r2
 8022f8c:	2800      	cmp	r0, #0
 8022f8e:	f000 8085 	beq.w	802309c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022f92:	f103 0a01 	add.w	sl, r3, #1
 8022f96:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022f9a:	f01a 0f01 	tst.w	sl, #1
 8022f9e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022fa2:	bf0c      	ite	eq
 8022fa4:	f001 010f 	andeq.w	r1, r1, #15
 8022fa8:	1109      	asrne	r1, r1, #4
 8022faa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022fae:	b2c9      	uxtb	r1, r1
 8022fb0:	910f      	str	r1, [sp, #60]	; 0x3c
 8022fb2:	b1df      	cbz	r7, 8022fec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022fb4:	444b      	add	r3, r9
 8022fb6:	0859      	lsrs	r1, r3, #1
 8022fb8:	f013 0f01 	tst.w	r3, #1
 8022fbc:	f103 0301 	add.w	r3, r3, #1
 8022fc0:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022fc4:	bf0c      	ite	eq
 8022fc6:	f001 010f 	andeq.w	r1, r1, #15
 8022fca:	1109      	asrne	r1, r1, #4
 8022fcc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022fd0:	b2c9      	uxtb	r1, r1
 8022fd2:	910b      	str	r1, [sp, #44]	; 0x2c
 8022fd4:	0859      	lsrs	r1, r3, #1
 8022fd6:	07db      	lsls	r3, r3, #31
 8022fd8:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022fdc:	bf54      	ite	pl
 8022fde:	f001 010f 	andpl.w	r1, r1, #15
 8022fe2:	1109      	asrmi	r1, r1, #4
 8022fe4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022fe8:	b2c9      	uxtb	r1, r1
 8022fea:	9110      	str	r1, [sp, #64]	; 0x40
 8022fec:	b280      	uxth	r0, r0
 8022fee:	b2bf      	uxth	r7, r7
 8022ff0:	fb00 f307 	mul.w	r3, r0, r7
 8022ff4:	0100      	lsls	r0, r0, #4
 8022ff6:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8022ffa:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022ffe:	1ac0      	subs	r0, r0, r3
 8023000:	b2bf      	uxth	r7, r7
 8023002:	b280      	uxth	r0, r0
 8023004:	1bc9      	subs	r1, r1, r7
 8023006:	fa1f fa81 	uxth.w	sl, r1
 802300a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802300c:	4348      	muls	r0, r1
 802300e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023010:	fb02 020a 	mla	r2, r2, sl, r0
 8023014:	fb07 2701 	mla	r7, r7, r1, r2
 8023018:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802301a:	fb03 7302 	mla	r3, r3, r2, r7
 802301e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023022:	b393      	cbz	r3, 802308a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023024:	4a2a      	ldr	r2, [pc, #168]	; (80230d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8023026:	2bff      	cmp	r3, #255	; 0xff
 8023028:	6811      	ldr	r1, [r2, #0]
 802302a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802302e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8023032:	b2c9      	uxtb	r1, r1
 8023034:	d042      	beq.n	80230bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023036:	b298      	uxth	r0, r3
 8023038:	43db      	mvns	r3, r3
 802303a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802303e:	fb11 f100 	smulbb	r1, r1, r0
 8023042:	b2db      	uxtb	r3, r3
 8023044:	fb17 f700 	smulbb	r7, r7, r0
 8023048:	fb02 1103 	mla	r1, r2, r3, r1
 802304c:	fb1a f000 	smulbb	r0, sl, r0
 8023050:	b289      	uxth	r1, r1
 8023052:	1c4a      	adds	r2, r1, #1
 8023054:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023058:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 802305c:	fb02 7703 	mla	r7, r2, r3, r7
 8023060:	1209      	asrs	r1, r1, #8
 8023062:	b2bf      	uxth	r7, r7
 8023064:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023068:	1c7a      	adds	r2, r7, #1
 802306a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802306e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8023072:	fb02 0303 	mla	r3, r2, r3, r0
 8023076:	123f      	asrs	r7, r7, #8
 8023078:	b29b      	uxth	r3, r3
 802307a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802307e:	1c5a      	adds	r2, r3, #1
 8023080:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023084:	121b      	asrs	r3, r3, #8
 8023086:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802308a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802308c:	f10c 0c03 	add.w	ip, ip, #3
 8023090:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023094:	441d      	add	r5, r3
 8023096:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023098:	441e      	add	r6, r3
 802309a:	e6e7      	b.n	8022e6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802309c:	2f00      	cmp	r7, #0
 802309e:	d0a5      	beq.n	8022fec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80230a0:	444b      	add	r3, r9
 80230a2:	0859      	lsrs	r1, r3, #1
 80230a4:	07db      	lsls	r3, r3, #31
 80230a6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80230aa:	bf54      	ite	pl
 80230ac:	f001 010f 	andpl.w	r1, r1, #15
 80230b0:	1109      	asrmi	r1, r1, #4
 80230b2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80230b6:	b2c9      	uxtb	r1, r1
 80230b8:	910b      	str	r1, [sp, #44]	; 0x2c
 80230ba:	e797      	b.n	8022fec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80230bc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80230c0:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80230c4:	f80c ac01 	strb.w	sl, [ip, #-1]
 80230c8:	e7df      	b.n	802308a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80230ca:	b013      	add	sp, #76	; 0x4c
 80230cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230d0:	2400ff1c 	.word	0x2400ff1c

080230d4 <CRC_Lock>:
 80230d4:	4a20      	ldr	r2, [pc, #128]	; (8023158 <CRC_Lock+0x84>)
 80230d6:	b530      	push	{r4, r5, lr}
 80230d8:	6813      	ldr	r3, [r2, #0]
 80230da:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80230de:	f24c 2540 	movw	r5, #49728	; 0xc240
 80230e2:	f023 0301 	bic.w	r3, r3, #1
 80230e6:	6013      	str	r3, [r2, #0]
 80230e8:	4b1c      	ldr	r3, [pc, #112]	; (802315c <CRC_Lock+0x88>)
 80230ea:	681a      	ldr	r2, [r3, #0]
 80230ec:	4022      	ands	r2, r4
 80230ee:	42aa      	cmp	r2, r5
 80230f0:	d005      	beq.n	80230fe <CRC_Lock+0x2a>
 80230f2:	681b      	ldr	r3, [r3, #0]
 80230f4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80230f8:	4023      	ands	r3, r4
 80230fa:	4293      	cmp	r3, r2
 80230fc:	d124      	bne.n	8023148 <CRC_Lock+0x74>
 80230fe:	4b18      	ldr	r3, [pc, #96]	; (8023160 <CRC_Lock+0x8c>)
 8023100:	681b      	ldr	r3, [r3, #0]
 8023102:	bb0b      	cbnz	r3, 8023148 <CRC_Lock+0x74>
 8023104:	4b17      	ldr	r3, [pc, #92]	; (8023164 <CRC_Lock+0x90>)
 8023106:	681a      	ldr	r2, [r3, #0]
 8023108:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802310c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8023110:	d00d      	beq.n	802312e <CRC_Lock+0x5a>
 8023112:	681a      	ldr	r2, [r3, #0]
 8023114:	f240 4483 	movw	r4, #1155	; 0x483
 8023118:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802311c:	42a2      	cmp	r2, r4
 802311e:	d006      	beq.n	802312e <CRC_Lock+0x5a>
 8023120:	681b      	ldr	r3, [r3, #0]
 8023122:	f240 4285 	movw	r2, #1157	; 0x485
 8023126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802312a:	4293      	cmp	r3, r2
 802312c:	d10c      	bne.n	8023148 <CRC_Lock+0x74>
 802312e:	4b0e      	ldr	r3, [pc, #56]	; (8023168 <CRC_Lock+0x94>)
 8023130:	2201      	movs	r2, #1
 8023132:	601a      	str	r2, [r3, #0]
 8023134:	681a      	ldr	r2, [r3, #0]
 8023136:	2a00      	cmp	r2, #0
 8023138:	d1fc      	bne.n	8023134 <CRC_Lock+0x60>
 802313a:	4b0c      	ldr	r3, [pc, #48]	; (802316c <CRC_Lock+0x98>)
 802313c:	6018      	str	r0, [r3, #0]
 802313e:	6818      	ldr	r0, [r3, #0]
 8023140:	1a43      	subs	r3, r0, r1
 8023142:	4258      	negs	r0, r3
 8023144:	4158      	adcs	r0, r3
 8023146:	bd30      	pop	{r4, r5, pc}
 8023148:	4b09      	ldr	r3, [pc, #36]	; (8023170 <CRC_Lock+0x9c>)
 802314a:	2201      	movs	r2, #1
 802314c:	601a      	str	r2, [r3, #0]
 802314e:	681a      	ldr	r2, [r3, #0]
 8023150:	2a00      	cmp	r2, #0
 8023152:	d1fc      	bne.n	802314e <CRC_Lock+0x7a>
 8023154:	4b07      	ldr	r3, [pc, #28]	; (8023174 <CRC_Lock+0xa0>)
 8023156:	e7f1      	b.n	802313c <CRC_Lock+0x68>
 8023158:	e0002000 	.word	0xe0002000
 802315c:	e000ed00 	.word	0xe000ed00
 8023160:	e0042000 	.word	0xe0042000
 8023164:	5c001000 	.word	0x5c001000
 8023168:	58024c08 	.word	0x58024c08
 802316c:	58024c00 	.word	0x58024c00
 8023170:	40023008 	.word	0x40023008
 8023174:	40023000 	.word	0x40023000

08023178 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023178:	6101      	str	r1, [r0, #16]
 802317a:	4770      	bx	lr

0802317c <_ZN8touchgfx8Gestures4tickEv>:
 802317c:	7b83      	ldrb	r3, [r0, #14]
 802317e:	b14b      	cbz	r3, 8023194 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023180:	8903      	ldrh	r3, [r0, #8]
 8023182:	3301      	adds	r3, #1
 8023184:	b29b      	uxth	r3, r3
 8023186:	2b07      	cmp	r3, #7
 8023188:	8103      	strh	r3, [r0, #8]
 802318a:	bf81      	itttt	hi
 802318c:	2300      	movhi	r3, #0
 802318e:	8143      	strhhi	r3, [r0, #10]
 8023190:	8183      	strhhi	r3, [r0, #12]
 8023192:	7383      	strbhi	r3, [r0, #14]
 8023194:	4770      	bx	lr
	...

08023198 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023198:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802319c:	4698      	mov	r8, r3
 802319e:	8883      	ldrh	r3, [r0, #4]
 80231a0:	4604      	mov	r4, r0
 80231a2:	4617      	mov	r7, r2
 80231a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80231a8:	eba8 0303 	sub.w	r3, r8, r3
 80231ac:	4a19      	ldr	r2, [pc, #100]	; (8023214 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80231ae:	460e      	mov	r6, r1
 80231b0:	b21b      	sxth	r3, r3
 80231b2:	88c1      	ldrh	r1, [r0, #6]
 80231b4:	9200      	str	r2, [sp, #0]
 80231b6:	2000      	movs	r0, #0
 80231b8:	2b00      	cmp	r3, #0
 80231ba:	8aa2      	ldrh	r2, [r4, #20]
 80231bc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80231c0:	bfb8      	it	lt
 80231c2:	425b      	neglt	r3, r3
 80231c4:	f88d 0004 	strb.w	r0, [sp, #4]
 80231c8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80231cc:	b21b      	sxth	r3, r3
 80231ce:	f8ad 800a 	strh.w	r8, [sp, #10]
 80231d2:	f8ad 500c 	strh.w	r5, [sp, #12]
 80231d6:	4293      	cmp	r3, r2
 80231d8:	dc07      	bgt.n	80231ea <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80231da:	1a69      	subs	r1, r5, r1
 80231dc:	b209      	sxth	r1, r1
 80231de:	2900      	cmp	r1, #0
 80231e0:	bfb8      	it	lt
 80231e2:	4249      	neglt	r1, r1
 80231e4:	b209      	sxth	r1, r1
 80231e6:	428a      	cmp	r2, r1
 80231e8:	da10      	bge.n	802320c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80231ea:	6920      	ldr	r0, [r4, #16]
 80231ec:	4669      	mov	r1, sp
 80231ee:	eba8 0606 	sub.w	r6, r8, r6
 80231f2:	1bef      	subs	r7, r5, r7
 80231f4:	6803      	ldr	r3, [r0, #0]
 80231f6:	685b      	ldr	r3, [r3, #4]
 80231f8:	4798      	blx	r3
 80231fa:	2300      	movs	r3, #0
 80231fc:	2001      	movs	r0, #1
 80231fe:	8166      	strh	r6, [r4, #10]
 8023200:	8123      	strh	r3, [r4, #8]
 8023202:	81a7      	strh	r7, [r4, #12]
 8023204:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023208:	80e5      	strh	r5, [r4, #6]
 802320a:	73a0      	strb	r0, [r4, #14]
 802320c:	b004      	add	sp, #16
 802320e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023212:	bf00      	nop
 8023214:	08026b88 	.word	0x08026b88

08023218 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023218:	b5f0      	push	{r4, r5, r6, r7, lr}
 802321a:	461e      	mov	r6, r3
 802321c:	1e4b      	subs	r3, r1, #1
 802321e:	b085      	sub	sp, #20
 8023220:	4604      	mov	r4, r0
 8023222:	2b01      	cmp	r3, #1
 8023224:	460d      	mov	r5, r1
 8023226:	4617      	mov	r7, r2
 8023228:	d84b      	bhi.n	80232c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802322a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802322e:	1cd3      	adds	r3, r2, #3
 8023230:	b29b      	uxth	r3, r3
 8023232:	2b06      	cmp	r3, #6
 8023234:	d916      	bls.n	8023264 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023236:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80232d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802323a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802323e:	f8cd c004 	str.w	ip, [sp, #4]
 8023242:	f04f 0c00 	mov.w	ip, #0
 8023246:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802324a:	6900      	ldr	r0, [r0, #16]
 802324c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023250:	a901      	add	r1, sp, #4
 8023252:	f88d c008 	strb.w	ip, [sp, #8]
 8023256:	f8ad 200a 	strh.w	r2, [sp, #10]
 802325a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802325e:	6803      	ldr	r3, [r0, #0]
 8023260:	689b      	ldr	r3, [r3, #8]
 8023262:	4798      	blx	r3
 8023264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023268:	1cd3      	adds	r3, r2, #3
 802326a:	b29b      	uxth	r3, r3
 802326c:	2b06      	cmp	r3, #6
 802326e:	d916      	bls.n	802329e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023270:	f8df c064 	ldr.w	ip, [pc, #100]	; 80232d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023274:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023278:	f8cd c004 	str.w	ip, [sp, #4]
 802327c:	f04f 0c01 	mov.w	ip, #1
 8023280:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023284:	6920      	ldr	r0, [r4, #16]
 8023286:	f8ad 100c 	strh.w	r1, [sp, #12]
 802328a:	a901      	add	r1, sp, #4
 802328c:	f88d c008 	strb.w	ip, [sp, #8]
 8023290:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023294:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023298:	6803      	ldr	r3, [r0, #0]
 802329a:	689b      	ldr	r3, [r3, #8]
 802329c:	4798      	blx	r3
 802329e:	4b0d      	ldr	r3, [pc, #52]	; (80232d4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80232a0:	a901      	add	r1, sp, #4
 80232a2:	6920      	ldr	r0, [r4, #16]
 80232a4:	9301      	str	r3, [sp, #4]
 80232a6:	2300      	movs	r3, #0
 80232a8:	f88d 5008 	strb.w	r5, [sp, #8]
 80232ac:	f8ad 700a 	strh.w	r7, [sp, #10]
 80232b0:	f8ad 600c 	strh.w	r6, [sp, #12]
 80232b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80232b8:	6803      	ldr	r3, [r0, #0]
 80232ba:	681b      	ldr	r3, [r3, #0]
 80232bc:	4798      	blx	r3
 80232be:	b005      	add	sp, #20
 80232c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80232c2:	2900      	cmp	r1, #0
 80232c4:	d1eb      	bne.n	802329e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80232c6:	80a2      	strh	r2, [r4, #4]
 80232c8:	80c6      	strh	r6, [r0, #6]
 80232ca:	60a1      	str	r1, [r4, #8]
 80232cc:	81a1      	strh	r1, [r4, #12]
 80232ce:	73a1      	strb	r1, [r4, #14]
 80232d0:	e7e5      	b.n	802329e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80232d2:	bf00      	nop
 80232d4:	08026b74 	.word	0x08026b74
 80232d8:	080271e0 	.word	0x080271e0

080232dc <__aeabi_atexit>:
 80232dc:	460b      	mov	r3, r1
 80232de:	4601      	mov	r1, r0
 80232e0:	4618      	mov	r0, r3
 80232e2:	f000 b853 	b.w	802338c <__cxa_atexit>

080232e6 <_ZdlPvj>:
 80232e6:	f000 b812 	b.w	802330e <_ZdlPv>

080232ea <__cxa_guard_acquire>:
 80232ea:	6803      	ldr	r3, [r0, #0]
 80232ec:	07db      	lsls	r3, r3, #31
 80232ee:	d406      	bmi.n	80232fe <__cxa_guard_acquire+0x14>
 80232f0:	7843      	ldrb	r3, [r0, #1]
 80232f2:	b103      	cbz	r3, 80232f6 <__cxa_guard_acquire+0xc>
 80232f4:	deff      	udf	#255	; 0xff
 80232f6:	2301      	movs	r3, #1
 80232f8:	7043      	strb	r3, [r0, #1]
 80232fa:	4618      	mov	r0, r3
 80232fc:	4770      	bx	lr
 80232fe:	2000      	movs	r0, #0
 8023300:	4770      	bx	lr

08023302 <__cxa_guard_release>:
 8023302:	2301      	movs	r3, #1
 8023304:	6003      	str	r3, [r0, #0]
 8023306:	4770      	bx	lr

08023308 <__cxa_pure_virtual>:
 8023308:	b508      	push	{r3, lr}
 802330a:	f000 f80f 	bl	802332c <_ZSt9terminatev>

0802330e <_ZdlPv>:
 802330e:	f000 b989 	b.w	8023624 <free>

08023312 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8023312:	b508      	push	{r3, lr}
 8023314:	4780      	blx	r0
 8023316:	f000 f80e 	bl	8023336 <abort>
	...

0802331c <_ZSt13get_terminatev>:
 802331c:	4b02      	ldr	r3, [pc, #8]	; (8023328 <_ZSt13get_terminatev+0xc>)
 802331e:	6818      	ldr	r0, [r3, #0]
 8023320:	f3bf 8f5b 	dmb	ish
 8023324:	4770      	bx	lr
 8023326:	bf00      	nop
 8023328:	240000d8 	.word	0x240000d8

0802332c <_ZSt9terminatev>:
 802332c:	b508      	push	{r3, lr}
 802332e:	f7ff fff5 	bl	802331c <_ZSt13get_terminatev>
 8023332:	f7ff ffee 	bl	8023312 <_ZN10__cxxabiv111__terminateEPFvvE>

08023336 <abort>:
 8023336:	b508      	push	{r3, lr}
 8023338:	2006      	movs	r0, #6
 802333a:	f000 fe11 	bl	8023f60 <raise>
 802333e:	2001      	movs	r0, #1
 8023340:	f7e0 f818 	bl	8003374 <_exit>

08023344 <__assert_func>:
 8023344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023346:	4614      	mov	r4, r2
 8023348:	461a      	mov	r2, r3
 802334a:	4b09      	ldr	r3, [pc, #36]	; (8023370 <__assert_func+0x2c>)
 802334c:	681b      	ldr	r3, [r3, #0]
 802334e:	4605      	mov	r5, r0
 8023350:	68d8      	ldr	r0, [r3, #12]
 8023352:	b14c      	cbz	r4, 8023368 <__assert_func+0x24>
 8023354:	4b07      	ldr	r3, [pc, #28]	; (8023374 <__assert_func+0x30>)
 8023356:	9100      	str	r1, [sp, #0]
 8023358:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802335c:	4906      	ldr	r1, [pc, #24]	; (8023378 <__assert_func+0x34>)
 802335e:	462b      	mov	r3, r5
 8023360:	f000 f8fe 	bl	8023560 <fiprintf>
 8023364:	f7ff ffe7 	bl	8023336 <abort>
 8023368:	4b04      	ldr	r3, [pc, #16]	; (802337c <__assert_func+0x38>)
 802336a:	461c      	mov	r4, r3
 802336c:	e7f3      	b.n	8023356 <__assert_func+0x12>
 802336e:	bf00      	nop
 8023370:	240000dc 	.word	0x240000dc
 8023374:	08027408 	.word	0x08027408
 8023378:	08027415 	.word	0x08027415
 802337c:	08027443 	.word	0x08027443

08023380 <atexit>:
 8023380:	2300      	movs	r3, #0
 8023382:	4601      	mov	r1, r0
 8023384:	461a      	mov	r2, r3
 8023386:	4618      	mov	r0, r3
 8023388:	f000 bfa4 	b.w	80242d4 <__register_exitproc>

0802338c <__cxa_atexit>:
 802338c:	b510      	push	{r4, lr}
 802338e:	4c05      	ldr	r4, [pc, #20]	; (80233a4 <__cxa_atexit+0x18>)
 8023390:	4613      	mov	r3, r2
 8023392:	b12c      	cbz	r4, 80233a0 <__cxa_atexit+0x14>
 8023394:	460a      	mov	r2, r1
 8023396:	4601      	mov	r1, r0
 8023398:	2002      	movs	r0, #2
 802339a:	f000 ff9b 	bl	80242d4 <__register_exitproc>
 802339e:	bd10      	pop	{r4, pc}
 80233a0:	4620      	mov	r0, r4
 80233a2:	e7fc      	b.n	802339e <__cxa_atexit+0x12>
 80233a4:	080242d5 	.word	0x080242d5

080233a8 <__errno>:
 80233a8:	4b01      	ldr	r3, [pc, #4]	; (80233b0 <__errno+0x8>)
 80233aa:	6818      	ldr	r0, [r3, #0]
 80233ac:	4770      	bx	lr
 80233ae:	bf00      	nop
 80233b0:	240000dc 	.word	0x240000dc

080233b4 <std>:
 80233b4:	2300      	movs	r3, #0
 80233b6:	b510      	push	{r4, lr}
 80233b8:	4604      	mov	r4, r0
 80233ba:	e9c0 3300 	strd	r3, r3, [r0]
 80233be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80233c2:	6083      	str	r3, [r0, #8]
 80233c4:	8181      	strh	r1, [r0, #12]
 80233c6:	6643      	str	r3, [r0, #100]	; 0x64
 80233c8:	81c2      	strh	r2, [r0, #14]
 80233ca:	6183      	str	r3, [r0, #24]
 80233cc:	4619      	mov	r1, r3
 80233ce:	2208      	movs	r2, #8
 80233d0:	305c      	adds	r0, #92	; 0x5c
 80233d2:	f000 f94d 	bl	8023670 <memset>
 80233d6:	4b05      	ldr	r3, [pc, #20]	; (80233ec <std+0x38>)
 80233d8:	6263      	str	r3, [r4, #36]	; 0x24
 80233da:	4b05      	ldr	r3, [pc, #20]	; (80233f0 <std+0x3c>)
 80233dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80233de:	4b05      	ldr	r3, [pc, #20]	; (80233f4 <std+0x40>)
 80233e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80233e2:	4b05      	ldr	r3, [pc, #20]	; (80233f8 <std+0x44>)
 80233e4:	6224      	str	r4, [r4, #32]
 80233e6:	6323      	str	r3, [r4, #48]	; 0x30
 80233e8:	bd10      	pop	{r4, pc}
 80233ea:	bf00      	nop
 80233ec:	08023fd9 	.word	0x08023fd9
 80233f0:	08023ffb 	.word	0x08023ffb
 80233f4:	08024033 	.word	0x08024033
 80233f8:	08024057 	.word	0x08024057

080233fc <_cleanup_r>:
 80233fc:	4901      	ldr	r1, [pc, #4]	; (8023404 <_cleanup_r+0x8>)
 80233fe:	f000 b8c1 	b.w	8023584 <_fwalk_reent>
 8023402:	bf00      	nop
 8023404:	080244c5 	.word	0x080244c5

08023408 <__sfmoreglue>:
 8023408:	b570      	push	{r4, r5, r6, lr}
 802340a:	2268      	movs	r2, #104	; 0x68
 802340c:	1e4d      	subs	r5, r1, #1
 802340e:	4355      	muls	r5, r2
 8023410:	460e      	mov	r6, r1
 8023412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023416:	f000 f99f 	bl	8023758 <_malloc_r>
 802341a:	4604      	mov	r4, r0
 802341c:	b140      	cbz	r0, 8023430 <__sfmoreglue+0x28>
 802341e:	2100      	movs	r1, #0
 8023420:	e9c0 1600 	strd	r1, r6, [r0]
 8023424:	300c      	adds	r0, #12
 8023426:	60a0      	str	r0, [r4, #8]
 8023428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802342c:	f000 f920 	bl	8023670 <memset>
 8023430:	4620      	mov	r0, r4
 8023432:	bd70      	pop	{r4, r5, r6, pc}

08023434 <__sfp_lock_acquire>:
 8023434:	4801      	ldr	r0, [pc, #4]	; (802343c <__sfp_lock_acquire+0x8>)
 8023436:	f000 b8ea 	b.w	802360e <__retarget_lock_acquire_recursive>
 802343a:	bf00      	nop
 802343c:	2400fff2 	.word	0x2400fff2

08023440 <__sfp_lock_release>:
 8023440:	4801      	ldr	r0, [pc, #4]	; (8023448 <__sfp_lock_release+0x8>)
 8023442:	f000 b8e6 	b.w	8023612 <__retarget_lock_release_recursive>
 8023446:	bf00      	nop
 8023448:	2400fff2 	.word	0x2400fff2

0802344c <__sinit_lock_acquire>:
 802344c:	4801      	ldr	r0, [pc, #4]	; (8023454 <__sinit_lock_acquire+0x8>)
 802344e:	f000 b8de 	b.w	802360e <__retarget_lock_acquire_recursive>
 8023452:	bf00      	nop
 8023454:	2400fff3 	.word	0x2400fff3

08023458 <__sinit_lock_release>:
 8023458:	4801      	ldr	r0, [pc, #4]	; (8023460 <__sinit_lock_release+0x8>)
 802345a:	f000 b8da 	b.w	8023612 <__retarget_lock_release_recursive>
 802345e:	bf00      	nop
 8023460:	2400fff3 	.word	0x2400fff3

08023464 <__sinit>:
 8023464:	b510      	push	{r4, lr}
 8023466:	4604      	mov	r4, r0
 8023468:	f7ff fff0 	bl	802344c <__sinit_lock_acquire>
 802346c:	69a3      	ldr	r3, [r4, #24]
 802346e:	b11b      	cbz	r3, 8023478 <__sinit+0x14>
 8023470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023474:	f7ff bff0 	b.w	8023458 <__sinit_lock_release>
 8023478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802347c:	6523      	str	r3, [r4, #80]	; 0x50
 802347e:	4b13      	ldr	r3, [pc, #76]	; (80234cc <__sinit+0x68>)
 8023480:	4a13      	ldr	r2, [pc, #76]	; (80234d0 <__sinit+0x6c>)
 8023482:	681b      	ldr	r3, [r3, #0]
 8023484:	62a2      	str	r2, [r4, #40]	; 0x28
 8023486:	42a3      	cmp	r3, r4
 8023488:	bf04      	itt	eq
 802348a:	2301      	moveq	r3, #1
 802348c:	61a3      	streq	r3, [r4, #24]
 802348e:	4620      	mov	r0, r4
 8023490:	f000 f820 	bl	80234d4 <__sfp>
 8023494:	6060      	str	r0, [r4, #4]
 8023496:	4620      	mov	r0, r4
 8023498:	f000 f81c 	bl	80234d4 <__sfp>
 802349c:	60a0      	str	r0, [r4, #8]
 802349e:	4620      	mov	r0, r4
 80234a0:	f000 f818 	bl	80234d4 <__sfp>
 80234a4:	2200      	movs	r2, #0
 80234a6:	60e0      	str	r0, [r4, #12]
 80234a8:	2104      	movs	r1, #4
 80234aa:	6860      	ldr	r0, [r4, #4]
 80234ac:	f7ff ff82 	bl	80233b4 <std>
 80234b0:	68a0      	ldr	r0, [r4, #8]
 80234b2:	2201      	movs	r2, #1
 80234b4:	2109      	movs	r1, #9
 80234b6:	f7ff ff7d 	bl	80233b4 <std>
 80234ba:	68e0      	ldr	r0, [r4, #12]
 80234bc:	2202      	movs	r2, #2
 80234be:	2112      	movs	r1, #18
 80234c0:	f7ff ff78 	bl	80233b4 <std>
 80234c4:	2301      	movs	r3, #1
 80234c6:	61a3      	str	r3, [r4, #24]
 80234c8:	e7d2      	b.n	8023470 <__sinit+0xc>
 80234ca:	bf00      	nop
 80234cc:	080274a4 	.word	0x080274a4
 80234d0:	080233fd 	.word	0x080233fd

080234d4 <__sfp>:
 80234d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234d6:	4607      	mov	r7, r0
 80234d8:	f7ff ffac 	bl	8023434 <__sfp_lock_acquire>
 80234dc:	4b1e      	ldr	r3, [pc, #120]	; (8023558 <__sfp+0x84>)
 80234de:	681e      	ldr	r6, [r3, #0]
 80234e0:	69b3      	ldr	r3, [r6, #24]
 80234e2:	b913      	cbnz	r3, 80234ea <__sfp+0x16>
 80234e4:	4630      	mov	r0, r6
 80234e6:	f7ff ffbd 	bl	8023464 <__sinit>
 80234ea:	3648      	adds	r6, #72	; 0x48
 80234ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80234f0:	3b01      	subs	r3, #1
 80234f2:	d503      	bpl.n	80234fc <__sfp+0x28>
 80234f4:	6833      	ldr	r3, [r6, #0]
 80234f6:	b30b      	cbz	r3, 802353c <__sfp+0x68>
 80234f8:	6836      	ldr	r6, [r6, #0]
 80234fa:	e7f7      	b.n	80234ec <__sfp+0x18>
 80234fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023500:	b9d5      	cbnz	r5, 8023538 <__sfp+0x64>
 8023502:	4b16      	ldr	r3, [pc, #88]	; (802355c <__sfp+0x88>)
 8023504:	60e3      	str	r3, [r4, #12]
 8023506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802350a:	6665      	str	r5, [r4, #100]	; 0x64
 802350c:	f000 f87e 	bl	802360c <__retarget_lock_init_recursive>
 8023510:	f7ff ff96 	bl	8023440 <__sfp_lock_release>
 8023514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802351c:	6025      	str	r5, [r4, #0]
 802351e:	61a5      	str	r5, [r4, #24]
 8023520:	2208      	movs	r2, #8
 8023522:	4629      	mov	r1, r5
 8023524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023528:	f000 f8a2 	bl	8023670 <memset>
 802352c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023534:	4620      	mov	r0, r4
 8023536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023538:	3468      	adds	r4, #104	; 0x68
 802353a:	e7d9      	b.n	80234f0 <__sfp+0x1c>
 802353c:	2104      	movs	r1, #4
 802353e:	4638      	mov	r0, r7
 8023540:	f7ff ff62 	bl	8023408 <__sfmoreglue>
 8023544:	4604      	mov	r4, r0
 8023546:	6030      	str	r0, [r6, #0]
 8023548:	2800      	cmp	r0, #0
 802354a:	d1d5      	bne.n	80234f8 <__sfp+0x24>
 802354c:	f7ff ff78 	bl	8023440 <__sfp_lock_release>
 8023550:	230c      	movs	r3, #12
 8023552:	603b      	str	r3, [r7, #0]
 8023554:	e7ee      	b.n	8023534 <__sfp+0x60>
 8023556:	bf00      	nop
 8023558:	080274a4 	.word	0x080274a4
 802355c:	ffff0001 	.word	0xffff0001

08023560 <fiprintf>:
 8023560:	b40e      	push	{r1, r2, r3}
 8023562:	b503      	push	{r0, r1, lr}
 8023564:	4601      	mov	r1, r0
 8023566:	ab03      	add	r3, sp, #12
 8023568:	4805      	ldr	r0, [pc, #20]	; (8023580 <fiprintf+0x20>)
 802356a:	f853 2b04 	ldr.w	r2, [r3], #4
 802356e:	6800      	ldr	r0, [r0, #0]
 8023570:	9301      	str	r3, [sp, #4]
 8023572:	f000 f98f 	bl	8023894 <_vfiprintf_r>
 8023576:	b002      	add	sp, #8
 8023578:	f85d eb04 	ldr.w	lr, [sp], #4
 802357c:	b003      	add	sp, #12
 802357e:	4770      	bx	lr
 8023580:	240000dc 	.word	0x240000dc

08023584 <_fwalk_reent>:
 8023584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023588:	4606      	mov	r6, r0
 802358a:	4688      	mov	r8, r1
 802358c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023590:	2700      	movs	r7, #0
 8023592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023596:	f1b9 0901 	subs.w	r9, r9, #1
 802359a:	d505      	bpl.n	80235a8 <_fwalk_reent+0x24>
 802359c:	6824      	ldr	r4, [r4, #0]
 802359e:	2c00      	cmp	r4, #0
 80235a0:	d1f7      	bne.n	8023592 <_fwalk_reent+0xe>
 80235a2:	4638      	mov	r0, r7
 80235a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80235a8:	89ab      	ldrh	r3, [r5, #12]
 80235aa:	2b01      	cmp	r3, #1
 80235ac:	d907      	bls.n	80235be <_fwalk_reent+0x3a>
 80235ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80235b2:	3301      	adds	r3, #1
 80235b4:	d003      	beq.n	80235be <_fwalk_reent+0x3a>
 80235b6:	4629      	mov	r1, r5
 80235b8:	4630      	mov	r0, r6
 80235ba:	47c0      	blx	r8
 80235bc:	4307      	orrs	r7, r0
 80235be:	3568      	adds	r5, #104	; 0x68
 80235c0:	e7e9      	b.n	8023596 <_fwalk_reent+0x12>
	...

080235c4 <__libc_init_array>:
 80235c4:	b570      	push	{r4, r5, r6, lr}
 80235c6:	4d0d      	ldr	r5, [pc, #52]	; (80235fc <__libc_init_array+0x38>)
 80235c8:	4c0d      	ldr	r4, [pc, #52]	; (8023600 <__libc_init_array+0x3c>)
 80235ca:	1b64      	subs	r4, r4, r5
 80235cc:	10a4      	asrs	r4, r4, #2
 80235ce:	2600      	movs	r6, #0
 80235d0:	42a6      	cmp	r6, r4
 80235d2:	d109      	bne.n	80235e8 <__libc_init_array+0x24>
 80235d4:	4d0b      	ldr	r5, [pc, #44]	; (8023604 <__libc_init_array+0x40>)
 80235d6:	4c0c      	ldr	r4, [pc, #48]	; (8023608 <__libc_init_array+0x44>)
 80235d8:	f001 fa14 	bl	8024a04 <_init>
 80235dc:	1b64      	subs	r4, r4, r5
 80235de:	10a4      	asrs	r4, r4, #2
 80235e0:	2600      	movs	r6, #0
 80235e2:	42a6      	cmp	r6, r4
 80235e4:	d105      	bne.n	80235f2 <__libc_init_array+0x2e>
 80235e6:	bd70      	pop	{r4, r5, r6, pc}
 80235e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80235ec:	4798      	blx	r3
 80235ee:	3601      	adds	r6, #1
 80235f0:	e7ee      	b.n	80235d0 <__libc_init_array+0xc>
 80235f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80235f6:	4798      	blx	r3
 80235f8:	3601      	adds	r6, #1
 80235fa:	e7f2      	b.n	80235e2 <__libc_init_array+0x1e>
 80235fc:	08027dec 	.word	0x08027dec
 8023600:	08027dec 	.word	0x08027dec
 8023604:	08027dec 	.word	0x08027dec
 8023608:	08027e14 	.word	0x08027e14

0802360c <__retarget_lock_init_recursive>:
 802360c:	4770      	bx	lr

0802360e <__retarget_lock_acquire_recursive>:
 802360e:	4770      	bx	lr

08023610 <__retarget_lock_release>:
 8023610:	4770      	bx	lr

08023612 <__retarget_lock_release_recursive>:
 8023612:	4770      	bx	lr

08023614 <malloc>:
 8023614:	4b02      	ldr	r3, [pc, #8]	; (8023620 <malloc+0xc>)
 8023616:	4601      	mov	r1, r0
 8023618:	6818      	ldr	r0, [r3, #0]
 802361a:	f000 b89d 	b.w	8023758 <_malloc_r>
 802361e:	bf00      	nop
 8023620:	240000dc 	.word	0x240000dc

08023624 <free>:
 8023624:	4b02      	ldr	r3, [pc, #8]	; (8023630 <free+0xc>)
 8023626:	4601      	mov	r1, r0
 8023628:	6818      	ldr	r0, [r3, #0]
 802362a:	f000 b829 	b.w	8023680 <_free_r>
 802362e:	bf00      	nop
 8023630:	240000dc 	.word	0x240000dc

08023634 <memcmp>:
 8023634:	b510      	push	{r4, lr}
 8023636:	3901      	subs	r1, #1
 8023638:	4402      	add	r2, r0
 802363a:	4290      	cmp	r0, r2
 802363c:	d101      	bne.n	8023642 <memcmp+0xe>
 802363e:	2000      	movs	r0, #0
 8023640:	e005      	b.n	802364e <memcmp+0x1a>
 8023642:	7803      	ldrb	r3, [r0, #0]
 8023644:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023648:	42a3      	cmp	r3, r4
 802364a:	d001      	beq.n	8023650 <memcmp+0x1c>
 802364c:	1b18      	subs	r0, r3, r4
 802364e:	bd10      	pop	{r4, pc}
 8023650:	3001      	adds	r0, #1
 8023652:	e7f2      	b.n	802363a <memcmp+0x6>

08023654 <memcpy>:
 8023654:	440a      	add	r2, r1
 8023656:	4291      	cmp	r1, r2
 8023658:	f100 33ff 	add.w	r3, r0, #4294967295
 802365c:	d100      	bne.n	8023660 <memcpy+0xc>
 802365e:	4770      	bx	lr
 8023660:	b510      	push	{r4, lr}
 8023662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023666:	f803 4f01 	strb.w	r4, [r3, #1]!
 802366a:	4291      	cmp	r1, r2
 802366c:	d1f9      	bne.n	8023662 <memcpy+0xe>
 802366e:	bd10      	pop	{r4, pc}

08023670 <memset>:
 8023670:	4402      	add	r2, r0
 8023672:	4603      	mov	r3, r0
 8023674:	4293      	cmp	r3, r2
 8023676:	d100      	bne.n	802367a <memset+0xa>
 8023678:	4770      	bx	lr
 802367a:	f803 1b01 	strb.w	r1, [r3], #1
 802367e:	e7f9      	b.n	8023674 <memset+0x4>

08023680 <_free_r>:
 8023680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023682:	2900      	cmp	r1, #0
 8023684:	d044      	beq.n	8023710 <_free_r+0x90>
 8023686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802368a:	9001      	str	r0, [sp, #4]
 802368c:	2b00      	cmp	r3, #0
 802368e:	f1a1 0404 	sub.w	r4, r1, #4
 8023692:	bfb8      	it	lt
 8023694:	18e4      	addlt	r4, r4, r3
 8023696:	f000 ffe3 	bl	8024660 <__malloc_lock>
 802369a:	4a1e      	ldr	r2, [pc, #120]	; (8023714 <_free_r+0x94>)
 802369c:	9801      	ldr	r0, [sp, #4]
 802369e:	6813      	ldr	r3, [r2, #0]
 80236a0:	b933      	cbnz	r3, 80236b0 <_free_r+0x30>
 80236a2:	6063      	str	r3, [r4, #4]
 80236a4:	6014      	str	r4, [r2, #0]
 80236a6:	b003      	add	sp, #12
 80236a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80236ac:	f000 bfde 	b.w	802466c <__malloc_unlock>
 80236b0:	42a3      	cmp	r3, r4
 80236b2:	d908      	bls.n	80236c6 <_free_r+0x46>
 80236b4:	6825      	ldr	r5, [r4, #0]
 80236b6:	1961      	adds	r1, r4, r5
 80236b8:	428b      	cmp	r3, r1
 80236ba:	bf01      	itttt	eq
 80236bc:	6819      	ldreq	r1, [r3, #0]
 80236be:	685b      	ldreq	r3, [r3, #4]
 80236c0:	1949      	addeq	r1, r1, r5
 80236c2:	6021      	streq	r1, [r4, #0]
 80236c4:	e7ed      	b.n	80236a2 <_free_r+0x22>
 80236c6:	461a      	mov	r2, r3
 80236c8:	685b      	ldr	r3, [r3, #4]
 80236ca:	b10b      	cbz	r3, 80236d0 <_free_r+0x50>
 80236cc:	42a3      	cmp	r3, r4
 80236ce:	d9fa      	bls.n	80236c6 <_free_r+0x46>
 80236d0:	6811      	ldr	r1, [r2, #0]
 80236d2:	1855      	adds	r5, r2, r1
 80236d4:	42a5      	cmp	r5, r4
 80236d6:	d10b      	bne.n	80236f0 <_free_r+0x70>
 80236d8:	6824      	ldr	r4, [r4, #0]
 80236da:	4421      	add	r1, r4
 80236dc:	1854      	adds	r4, r2, r1
 80236de:	42a3      	cmp	r3, r4
 80236e0:	6011      	str	r1, [r2, #0]
 80236e2:	d1e0      	bne.n	80236a6 <_free_r+0x26>
 80236e4:	681c      	ldr	r4, [r3, #0]
 80236e6:	685b      	ldr	r3, [r3, #4]
 80236e8:	6053      	str	r3, [r2, #4]
 80236ea:	4421      	add	r1, r4
 80236ec:	6011      	str	r1, [r2, #0]
 80236ee:	e7da      	b.n	80236a6 <_free_r+0x26>
 80236f0:	d902      	bls.n	80236f8 <_free_r+0x78>
 80236f2:	230c      	movs	r3, #12
 80236f4:	6003      	str	r3, [r0, #0]
 80236f6:	e7d6      	b.n	80236a6 <_free_r+0x26>
 80236f8:	6825      	ldr	r5, [r4, #0]
 80236fa:	1961      	adds	r1, r4, r5
 80236fc:	428b      	cmp	r3, r1
 80236fe:	bf04      	itt	eq
 8023700:	6819      	ldreq	r1, [r3, #0]
 8023702:	685b      	ldreq	r3, [r3, #4]
 8023704:	6063      	str	r3, [r4, #4]
 8023706:	bf04      	itt	eq
 8023708:	1949      	addeq	r1, r1, r5
 802370a:	6021      	streq	r1, [r4, #0]
 802370c:	6054      	str	r4, [r2, #4]
 802370e:	e7ca      	b.n	80236a6 <_free_r+0x26>
 8023710:	b003      	add	sp, #12
 8023712:	bd30      	pop	{r4, r5, pc}
 8023714:	2400fff4 	.word	0x2400fff4

08023718 <sbrk_aligned>:
 8023718:	b570      	push	{r4, r5, r6, lr}
 802371a:	4e0e      	ldr	r6, [pc, #56]	; (8023754 <sbrk_aligned+0x3c>)
 802371c:	460c      	mov	r4, r1
 802371e:	6831      	ldr	r1, [r6, #0]
 8023720:	4605      	mov	r5, r0
 8023722:	b911      	cbnz	r1, 802372a <sbrk_aligned+0x12>
 8023724:	f000 fbe4 	bl	8023ef0 <_sbrk_r>
 8023728:	6030      	str	r0, [r6, #0]
 802372a:	4621      	mov	r1, r4
 802372c:	4628      	mov	r0, r5
 802372e:	f000 fbdf 	bl	8023ef0 <_sbrk_r>
 8023732:	1c43      	adds	r3, r0, #1
 8023734:	d00a      	beq.n	802374c <sbrk_aligned+0x34>
 8023736:	1cc4      	adds	r4, r0, #3
 8023738:	f024 0403 	bic.w	r4, r4, #3
 802373c:	42a0      	cmp	r0, r4
 802373e:	d007      	beq.n	8023750 <sbrk_aligned+0x38>
 8023740:	1a21      	subs	r1, r4, r0
 8023742:	4628      	mov	r0, r5
 8023744:	f000 fbd4 	bl	8023ef0 <_sbrk_r>
 8023748:	3001      	adds	r0, #1
 802374a:	d101      	bne.n	8023750 <sbrk_aligned+0x38>
 802374c:	f04f 34ff 	mov.w	r4, #4294967295
 8023750:	4620      	mov	r0, r4
 8023752:	bd70      	pop	{r4, r5, r6, pc}
 8023754:	2400fff8 	.word	0x2400fff8

08023758 <_malloc_r>:
 8023758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802375c:	1ccd      	adds	r5, r1, #3
 802375e:	f025 0503 	bic.w	r5, r5, #3
 8023762:	3508      	adds	r5, #8
 8023764:	2d0c      	cmp	r5, #12
 8023766:	bf38      	it	cc
 8023768:	250c      	movcc	r5, #12
 802376a:	2d00      	cmp	r5, #0
 802376c:	4607      	mov	r7, r0
 802376e:	db01      	blt.n	8023774 <_malloc_r+0x1c>
 8023770:	42a9      	cmp	r1, r5
 8023772:	d905      	bls.n	8023780 <_malloc_r+0x28>
 8023774:	230c      	movs	r3, #12
 8023776:	603b      	str	r3, [r7, #0]
 8023778:	2600      	movs	r6, #0
 802377a:	4630      	mov	r0, r6
 802377c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023780:	4e2e      	ldr	r6, [pc, #184]	; (802383c <_malloc_r+0xe4>)
 8023782:	f000 ff6d 	bl	8024660 <__malloc_lock>
 8023786:	6833      	ldr	r3, [r6, #0]
 8023788:	461c      	mov	r4, r3
 802378a:	bb34      	cbnz	r4, 80237da <_malloc_r+0x82>
 802378c:	4629      	mov	r1, r5
 802378e:	4638      	mov	r0, r7
 8023790:	f7ff ffc2 	bl	8023718 <sbrk_aligned>
 8023794:	1c43      	adds	r3, r0, #1
 8023796:	4604      	mov	r4, r0
 8023798:	d14d      	bne.n	8023836 <_malloc_r+0xde>
 802379a:	6834      	ldr	r4, [r6, #0]
 802379c:	4626      	mov	r6, r4
 802379e:	2e00      	cmp	r6, #0
 80237a0:	d140      	bne.n	8023824 <_malloc_r+0xcc>
 80237a2:	6823      	ldr	r3, [r4, #0]
 80237a4:	4631      	mov	r1, r6
 80237a6:	4638      	mov	r0, r7
 80237a8:	eb04 0803 	add.w	r8, r4, r3
 80237ac:	f000 fba0 	bl	8023ef0 <_sbrk_r>
 80237b0:	4580      	cmp	r8, r0
 80237b2:	d13a      	bne.n	802382a <_malloc_r+0xd2>
 80237b4:	6821      	ldr	r1, [r4, #0]
 80237b6:	3503      	adds	r5, #3
 80237b8:	1a6d      	subs	r5, r5, r1
 80237ba:	f025 0503 	bic.w	r5, r5, #3
 80237be:	3508      	adds	r5, #8
 80237c0:	2d0c      	cmp	r5, #12
 80237c2:	bf38      	it	cc
 80237c4:	250c      	movcc	r5, #12
 80237c6:	4629      	mov	r1, r5
 80237c8:	4638      	mov	r0, r7
 80237ca:	f7ff ffa5 	bl	8023718 <sbrk_aligned>
 80237ce:	3001      	adds	r0, #1
 80237d0:	d02b      	beq.n	802382a <_malloc_r+0xd2>
 80237d2:	6823      	ldr	r3, [r4, #0]
 80237d4:	442b      	add	r3, r5
 80237d6:	6023      	str	r3, [r4, #0]
 80237d8:	e00e      	b.n	80237f8 <_malloc_r+0xa0>
 80237da:	6822      	ldr	r2, [r4, #0]
 80237dc:	1b52      	subs	r2, r2, r5
 80237de:	d41e      	bmi.n	802381e <_malloc_r+0xc6>
 80237e0:	2a0b      	cmp	r2, #11
 80237e2:	d916      	bls.n	8023812 <_malloc_r+0xba>
 80237e4:	1961      	adds	r1, r4, r5
 80237e6:	42a3      	cmp	r3, r4
 80237e8:	6025      	str	r5, [r4, #0]
 80237ea:	bf18      	it	ne
 80237ec:	6059      	strne	r1, [r3, #4]
 80237ee:	6863      	ldr	r3, [r4, #4]
 80237f0:	bf08      	it	eq
 80237f2:	6031      	streq	r1, [r6, #0]
 80237f4:	5162      	str	r2, [r4, r5]
 80237f6:	604b      	str	r3, [r1, #4]
 80237f8:	4638      	mov	r0, r7
 80237fa:	f104 060b 	add.w	r6, r4, #11
 80237fe:	f000 ff35 	bl	802466c <__malloc_unlock>
 8023802:	f026 0607 	bic.w	r6, r6, #7
 8023806:	1d23      	adds	r3, r4, #4
 8023808:	1af2      	subs	r2, r6, r3
 802380a:	d0b6      	beq.n	802377a <_malloc_r+0x22>
 802380c:	1b9b      	subs	r3, r3, r6
 802380e:	50a3      	str	r3, [r4, r2]
 8023810:	e7b3      	b.n	802377a <_malloc_r+0x22>
 8023812:	6862      	ldr	r2, [r4, #4]
 8023814:	42a3      	cmp	r3, r4
 8023816:	bf0c      	ite	eq
 8023818:	6032      	streq	r2, [r6, #0]
 802381a:	605a      	strne	r2, [r3, #4]
 802381c:	e7ec      	b.n	80237f8 <_malloc_r+0xa0>
 802381e:	4623      	mov	r3, r4
 8023820:	6864      	ldr	r4, [r4, #4]
 8023822:	e7b2      	b.n	802378a <_malloc_r+0x32>
 8023824:	4634      	mov	r4, r6
 8023826:	6876      	ldr	r6, [r6, #4]
 8023828:	e7b9      	b.n	802379e <_malloc_r+0x46>
 802382a:	230c      	movs	r3, #12
 802382c:	603b      	str	r3, [r7, #0]
 802382e:	4638      	mov	r0, r7
 8023830:	f000 ff1c 	bl	802466c <__malloc_unlock>
 8023834:	e7a1      	b.n	802377a <_malloc_r+0x22>
 8023836:	6025      	str	r5, [r4, #0]
 8023838:	e7de      	b.n	80237f8 <_malloc_r+0xa0>
 802383a:	bf00      	nop
 802383c:	2400fff4 	.word	0x2400fff4

08023840 <__sfputc_r>:
 8023840:	6893      	ldr	r3, [r2, #8]
 8023842:	3b01      	subs	r3, #1
 8023844:	2b00      	cmp	r3, #0
 8023846:	b410      	push	{r4}
 8023848:	6093      	str	r3, [r2, #8]
 802384a:	da08      	bge.n	802385e <__sfputc_r+0x1e>
 802384c:	6994      	ldr	r4, [r2, #24]
 802384e:	42a3      	cmp	r3, r4
 8023850:	db01      	blt.n	8023856 <__sfputc_r+0x16>
 8023852:	290a      	cmp	r1, #10
 8023854:	d103      	bne.n	802385e <__sfputc_r+0x1e>
 8023856:	f85d 4b04 	ldr.w	r4, [sp], #4
 802385a:	f000 bc69 	b.w	8024130 <__swbuf_r>
 802385e:	6813      	ldr	r3, [r2, #0]
 8023860:	1c58      	adds	r0, r3, #1
 8023862:	6010      	str	r0, [r2, #0]
 8023864:	7019      	strb	r1, [r3, #0]
 8023866:	4608      	mov	r0, r1
 8023868:	f85d 4b04 	ldr.w	r4, [sp], #4
 802386c:	4770      	bx	lr

0802386e <__sfputs_r>:
 802386e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023870:	4606      	mov	r6, r0
 8023872:	460f      	mov	r7, r1
 8023874:	4614      	mov	r4, r2
 8023876:	18d5      	adds	r5, r2, r3
 8023878:	42ac      	cmp	r4, r5
 802387a:	d101      	bne.n	8023880 <__sfputs_r+0x12>
 802387c:	2000      	movs	r0, #0
 802387e:	e007      	b.n	8023890 <__sfputs_r+0x22>
 8023880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023884:	463a      	mov	r2, r7
 8023886:	4630      	mov	r0, r6
 8023888:	f7ff ffda 	bl	8023840 <__sfputc_r>
 802388c:	1c43      	adds	r3, r0, #1
 802388e:	d1f3      	bne.n	8023878 <__sfputs_r+0xa>
 8023890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023894 <_vfiprintf_r>:
 8023894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023898:	460d      	mov	r5, r1
 802389a:	b09d      	sub	sp, #116	; 0x74
 802389c:	4614      	mov	r4, r2
 802389e:	4698      	mov	r8, r3
 80238a0:	4606      	mov	r6, r0
 80238a2:	b118      	cbz	r0, 80238ac <_vfiprintf_r+0x18>
 80238a4:	6983      	ldr	r3, [r0, #24]
 80238a6:	b90b      	cbnz	r3, 80238ac <_vfiprintf_r+0x18>
 80238a8:	f7ff fddc 	bl	8023464 <__sinit>
 80238ac:	4b89      	ldr	r3, [pc, #548]	; (8023ad4 <_vfiprintf_r+0x240>)
 80238ae:	429d      	cmp	r5, r3
 80238b0:	d11b      	bne.n	80238ea <_vfiprintf_r+0x56>
 80238b2:	6875      	ldr	r5, [r6, #4]
 80238b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80238b6:	07d9      	lsls	r1, r3, #31
 80238b8:	d405      	bmi.n	80238c6 <_vfiprintf_r+0x32>
 80238ba:	89ab      	ldrh	r3, [r5, #12]
 80238bc:	059a      	lsls	r2, r3, #22
 80238be:	d402      	bmi.n	80238c6 <_vfiprintf_r+0x32>
 80238c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80238c2:	f7ff fea4 	bl	802360e <__retarget_lock_acquire_recursive>
 80238c6:	89ab      	ldrh	r3, [r5, #12]
 80238c8:	071b      	lsls	r3, r3, #28
 80238ca:	d501      	bpl.n	80238d0 <_vfiprintf_r+0x3c>
 80238cc:	692b      	ldr	r3, [r5, #16]
 80238ce:	b9eb      	cbnz	r3, 802390c <_vfiprintf_r+0x78>
 80238d0:	4629      	mov	r1, r5
 80238d2:	4630      	mov	r0, r6
 80238d4:	f000 fc90 	bl	80241f8 <__swsetup_r>
 80238d8:	b1c0      	cbz	r0, 802390c <_vfiprintf_r+0x78>
 80238da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80238dc:	07dc      	lsls	r4, r3, #31
 80238de:	d50e      	bpl.n	80238fe <_vfiprintf_r+0x6a>
 80238e0:	f04f 30ff 	mov.w	r0, #4294967295
 80238e4:	b01d      	add	sp, #116	; 0x74
 80238e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238ea:	4b7b      	ldr	r3, [pc, #492]	; (8023ad8 <_vfiprintf_r+0x244>)
 80238ec:	429d      	cmp	r5, r3
 80238ee:	d101      	bne.n	80238f4 <_vfiprintf_r+0x60>
 80238f0:	68b5      	ldr	r5, [r6, #8]
 80238f2:	e7df      	b.n	80238b4 <_vfiprintf_r+0x20>
 80238f4:	4b79      	ldr	r3, [pc, #484]	; (8023adc <_vfiprintf_r+0x248>)
 80238f6:	429d      	cmp	r5, r3
 80238f8:	bf08      	it	eq
 80238fa:	68f5      	ldreq	r5, [r6, #12]
 80238fc:	e7da      	b.n	80238b4 <_vfiprintf_r+0x20>
 80238fe:	89ab      	ldrh	r3, [r5, #12]
 8023900:	0598      	lsls	r0, r3, #22
 8023902:	d4ed      	bmi.n	80238e0 <_vfiprintf_r+0x4c>
 8023904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023906:	f7ff fe84 	bl	8023612 <__retarget_lock_release_recursive>
 802390a:	e7e9      	b.n	80238e0 <_vfiprintf_r+0x4c>
 802390c:	2300      	movs	r3, #0
 802390e:	9309      	str	r3, [sp, #36]	; 0x24
 8023910:	2320      	movs	r3, #32
 8023912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023916:	f8cd 800c 	str.w	r8, [sp, #12]
 802391a:	2330      	movs	r3, #48	; 0x30
 802391c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023ae0 <_vfiprintf_r+0x24c>
 8023920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023924:	f04f 0901 	mov.w	r9, #1
 8023928:	4623      	mov	r3, r4
 802392a:	469a      	mov	sl, r3
 802392c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023930:	b10a      	cbz	r2, 8023936 <_vfiprintf_r+0xa2>
 8023932:	2a25      	cmp	r2, #37	; 0x25
 8023934:	d1f9      	bne.n	802392a <_vfiprintf_r+0x96>
 8023936:	ebba 0b04 	subs.w	fp, sl, r4
 802393a:	d00b      	beq.n	8023954 <_vfiprintf_r+0xc0>
 802393c:	465b      	mov	r3, fp
 802393e:	4622      	mov	r2, r4
 8023940:	4629      	mov	r1, r5
 8023942:	4630      	mov	r0, r6
 8023944:	f7ff ff93 	bl	802386e <__sfputs_r>
 8023948:	3001      	adds	r0, #1
 802394a:	f000 80aa 	beq.w	8023aa2 <_vfiprintf_r+0x20e>
 802394e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023950:	445a      	add	r2, fp
 8023952:	9209      	str	r2, [sp, #36]	; 0x24
 8023954:	f89a 3000 	ldrb.w	r3, [sl]
 8023958:	2b00      	cmp	r3, #0
 802395a:	f000 80a2 	beq.w	8023aa2 <_vfiprintf_r+0x20e>
 802395e:	2300      	movs	r3, #0
 8023960:	f04f 32ff 	mov.w	r2, #4294967295
 8023964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023968:	f10a 0a01 	add.w	sl, sl, #1
 802396c:	9304      	str	r3, [sp, #16]
 802396e:	9307      	str	r3, [sp, #28]
 8023970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023974:	931a      	str	r3, [sp, #104]	; 0x68
 8023976:	4654      	mov	r4, sl
 8023978:	2205      	movs	r2, #5
 802397a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802397e:	4858      	ldr	r0, [pc, #352]	; (8023ae0 <_vfiprintf_r+0x24c>)
 8023980:	f7dc fcce 	bl	8000320 <memchr>
 8023984:	9a04      	ldr	r2, [sp, #16]
 8023986:	b9d8      	cbnz	r0, 80239c0 <_vfiprintf_r+0x12c>
 8023988:	06d1      	lsls	r1, r2, #27
 802398a:	bf44      	itt	mi
 802398c:	2320      	movmi	r3, #32
 802398e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023992:	0713      	lsls	r3, r2, #28
 8023994:	bf44      	itt	mi
 8023996:	232b      	movmi	r3, #43	; 0x2b
 8023998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802399c:	f89a 3000 	ldrb.w	r3, [sl]
 80239a0:	2b2a      	cmp	r3, #42	; 0x2a
 80239a2:	d015      	beq.n	80239d0 <_vfiprintf_r+0x13c>
 80239a4:	9a07      	ldr	r2, [sp, #28]
 80239a6:	4654      	mov	r4, sl
 80239a8:	2000      	movs	r0, #0
 80239aa:	f04f 0c0a 	mov.w	ip, #10
 80239ae:	4621      	mov	r1, r4
 80239b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80239b4:	3b30      	subs	r3, #48	; 0x30
 80239b6:	2b09      	cmp	r3, #9
 80239b8:	d94e      	bls.n	8023a58 <_vfiprintf_r+0x1c4>
 80239ba:	b1b0      	cbz	r0, 80239ea <_vfiprintf_r+0x156>
 80239bc:	9207      	str	r2, [sp, #28]
 80239be:	e014      	b.n	80239ea <_vfiprintf_r+0x156>
 80239c0:	eba0 0308 	sub.w	r3, r0, r8
 80239c4:	fa09 f303 	lsl.w	r3, r9, r3
 80239c8:	4313      	orrs	r3, r2
 80239ca:	9304      	str	r3, [sp, #16]
 80239cc:	46a2      	mov	sl, r4
 80239ce:	e7d2      	b.n	8023976 <_vfiprintf_r+0xe2>
 80239d0:	9b03      	ldr	r3, [sp, #12]
 80239d2:	1d19      	adds	r1, r3, #4
 80239d4:	681b      	ldr	r3, [r3, #0]
 80239d6:	9103      	str	r1, [sp, #12]
 80239d8:	2b00      	cmp	r3, #0
 80239da:	bfbb      	ittet	lt
 80239dc:	425b      	neglt	r3, r3
 80239de:	f042 0202 	orrlt.w	r2, r2, #2
 80239e2:	9307      	strge	r3, [sp, #28]
 80239e4:	9307      	strlt	r3, [sp, #28]
 80239e6:	bfb8      	it	lt
 80239e8:	9204      	strlt	r2, [sp, #16]
 80239ea:	7823      	ldrb	r3, [r4, #0]
 80239ec:	2b2e      	cmp	r3, #46	; 0x2e
 80239ee:	d10c      	bne.n	8023a0a <_vfiprintf_r+0x176>
 80239f0:	7863      	ldrb	r3, [r4, #1]
 80239f2:	2b2a      	cmp	r3, #42	; 0x2a
 80239f4:	d135      	bne.n	8023a62 <_vfiprintf_r+0x1ce>
 80239f6:	9b03      	ldr	r3, [sp, #12]
 80239f8:	1d1a      	adds	r2, r3, #4
 80239fa:	681b      	ldr	r3, [r3, #0]
 80239fc:	9203      	str	r2, [sp, #12]
 80239fe:	2b00      	cmp	r3, #0
 8023a00:	bfb8      	it	lt
 8023a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8023a06:	3402      	adds	r4, #2
 8023a08:	9305      	str	r3, [sp, #20]
 8023a0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023af0 <_vfiprintf_r+0x25c>
 8023a0e:	7821      	ldrb	r1, [r4, #0]
 8023a10:	2203      	movs	r2, #3
 8023a12:	4650      	mov	r0, sl
 8023a14:	f7dc fc84 	bl	8000320 <memchr>
 8023a18:	b140      	cbz	r0, 8023a2c <_vfiprintf_r+0x198>
 8023a1a:	2340      	movs	r3, #64	; 0x40
 8023a1c:	eba0 000a 	sub.w	r0, r0, sl
 8023a20:	fa03 f000 	lsl.w	r0, r3, r0
 8023a24:	9b04      	ldr	r3, [sp, #16]
 8023a26:	4303      	orrs	r3, r0
 8023a28:	3401      	adds	r4, #1
 8023a2a:	9304      	str	r3, [sp, #16]
 8023a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a30:	482c      	ldr	r0, [pc, #176]	; (8023ae4 <_vfiprintf_r+0x250>)
 8023a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023a36:	2206      	movs	r2, #6
 8023a38:	f7dc fc72 	bl	8000320 <memchr>
 8023a3c:	2800      	cmp	r0, #0
 8023a3e:	d03f      	beq.n	8023ac0 <_vfiprintf_r+0x22c>
 8023a40:	4b29      	ldr	r3, [pc, #164]	; (8023ae8 <_vfiprintf_r+0x254>)
 8023a42:	bb1b      	cbnz	r3, 8023a8c <_vfiprintf_r+0x1f8>
 8023a44:	9b03      	ldr	r3, [sp, #12]
 8023a46:	3307      	adds	r3, #7
 8023a48:	f023 0307 	bic.w	r3, r3, #7
 8023a4c:	3308      	adds	r3, #8
 8023a4e:	9303      	str	r3, [sp, #12]
 8023a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a52:	443b      	add	r3, r7
 8023a54:	9309      	str	r3, [sp, #36]	; 0x24
 8023a56:	e767      	b.n	8023928 <_vfiprintf_r+0x94>
 8023a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8023a5c:	460c      	mov	r4, r1
 8023a5e:	2001      	movs	r0, #1
 8023a60:	e7a5      	b.n	80239ae <_vfiprintf_r+0x11a>
 8023a62:	2300      	movs	r3, #0
 8023a64:	3401      	adds	r4, #1
 8023a66:	9305      	str	r3, [sp, #20]
 8023a68:	4619      	mov	r1, r3
 8023a6a:	f04f 0c0a 	mov.w	ip, #10
 8023a6e:	4620      	mov	r0, r4
 8023a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023a74:	3a30      	subs	r2, #48	; 0x30
 8023a76:	2a09      	cmp	r2, #9
 8023a78:	d903      	bls.n	8023a82 <_vfiprintf_r+0x1ee>
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	d0c5      	beq.n	8023a0a <_vfiprintf_r+0x176>
 8023a7e:	9105      	str	r1, [sp, #20]
 8023a80:	e7c3      	b.n	8023a0a <_vfiprintf_r+0x176>
 8023a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8023a86:	4604      	mov	r4, r0
 8023a88:	2301      	movs	r3, #1
 8023a8a:	e7f0      	b.n	8023a6e <_vfiprintf_r+0x1da>
 8023a8c:	ab03      	add	r3, sp, #12
 8023a8e:	9300      	str	r3, [sp, #0]
 8023a90:	462a      	mov	r2, r5
 8023a92:	4b16      	ldr	r3, [pc, #88]	; (8023aec <_vfiprintf_r+0x258>)
 8023a94:	a904      	add	r1, sp, #16
 8023a96:	4630      	mov	r0, r6
 8023a98:	f3af 8000 	nop.w
 8023a9c:	4607      	mov	r7, r0
 8023a9e:	1c78      	adds	r0, r7, #1
 8023aa0:	d1d6      	bne.n	8023a50 <_vfiprintf_r+0x1bc>
 8023aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023aa4:	07d9      	lsls	r1, r3, #31
 8023aa6:	d405      	bmi.n	8023ab4 <_vfiprintf_r+0x220>
 8023aa8:	89ab      	ldrh	r3, [r5, #12]
 8023aaa:	059a      	lsls	r2, r3, #22
 8023aac:	d402      	bmi.n	8023ab4 <_vfiprintf_r+0x220>
 8023aae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023ab0:	f7ff fdaf 	bl	8023612 <__retarget_lock_release_recursive>
 8023ab4:	89ab      	ldrh	r3, [r5, #12]
 8023ab6:	065b      	lsls	r3, r3, #25
 8023ab8:	f53f af12 	bmi.w	80238e0 <_vfiprintf_r+0x4c>
 8023abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023abe:	e711      	b.n	80238e4 <_vfiprintf_r+0x50>
 8023ac0:	ab03      	add	r3, sp, #12
 8023ac2:	9300      	str	r3, [sp, #0]
 8023ac4:	462a      	mov	r2, r5
 8023ac6:	4b09      	ldr	r3, [pc, #36]	; (8023aec <_vfiprintf_r+0x258>)
 8023ac8:	a904      	add	r1, sp, #16
 8023aca:	4630      	mov	r0, r6
 8023acc:	f000 f880 	bl	8023bd0 <_printf_i>
 8023ad0:	e7e4      	b.n	8023a9c <_vfiprintf_r+0x208>
 8023ad2:	bf00      	nop
 8023ad4:	08027464 	.word	0x08027464
 8023ad8:	08027484 	.word	0x08027484
 8023adc:	08027444 	.word	0x08027444
 8023ae0:	080274a8 	.word	0x080274a8
 8023ae4:	080274b2 	.word	0x080274b2
 8023ae8:	00000000 	.word	0x00000000
 8023aec:	0802386f 	.word	0x0802386f
 8023af0:	080274ae 	.word	0x080274ae

08023af4 <_printf_common>:
 8023af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023af8:	4616      	mov	r6, r2
 8023afa:	4699      	mov	r9, r3
 8023afc:	688a      	ldr	r2, [r1, #8]
 8023afe:	690b      	ldr	r3, [r1, #16]
 8023b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023b04:	4293      	cmp	r3, r2
 8023b06:	bfb8      	it	lt
 8023b08:	4613      	movlt	r3, r2
 8023b0a:	6033      	str	r3, [r6, #0]
 8023b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023b10:	4607      	mov	r7, r0
 8023b12:	460c      	mov	r4, r1
 8023b14:	b10a      	cbz	r2, 8023b1a <_printf_common+0x26>
 8023b16:	3301      	adds	r3, #1
 8023b18:	6033      	str	r3, [r6, #0]
 8023b1a:	6823      	ldr	r3, [r4, #0]
 8023b1c:	0699      	lsls	r1, r3, #26
 8023b1e:	bf42      	ittt	mi
 8023b20:	6833      	ldrmi	r3, [r6, #0]
 8023b22:	3302      	addmi	r3, #2
 8023b24:	6033      	strmi	r3, [r6, #0]
 8023b26:	6825      	ldr	r5, [r4, #0]
 8023b28:	f015 0506 	ands.w	r5, r5, #6
 8023b2c:	d106      	bne.n	8023b3c <_printf_common+0x48>
 8023b2e:	f104 0a19 	add.w	sl, r4, #25
 8023b32:	68e3      	ldr	r3, [r4, #12]
 8023b34:	6832      	ldr	r2, [r6, #0]
 8023b36:	1a9b      	subs	r3, r3, r2
 8023b38:	42ab      	cmp	r3, r5
 8023b3a:	dc26      	bgt.n	8023b8a <_printf_common+0x96>
 8023b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023b40:	1e13      	subs	r3, r2, #0
 8023b42:	6822      	ldr	r2, [r4, #0]
 8023b44:	bf18      	it	ne
 8023b46:	2301      	movne	r3, #1
 8023b48:	0692      	lsls	r2, r2, #26
 8023b4a:	d42b      	bmi.n	8023ba4 <_printf_common+0xb0>
 8023b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023b50:	4649      	mov	r1, r9
 8023b52:	4638      	mov	r0, r7
 8023b54:	47c0      	blx	r8
 8023b56:	3001      	adds	r0, #1
 8023b58:	d01e      	beq.n	8023b98 <_printf_common+0xa4>
 8023b5a:	6823      	ldr	r3, [r4, #0]
 8023b5c:	68e5      	ldr	r5, [r4, #12]
 8023b5e:	6832      	ldr	r2, [r6, #0]
 8023b60:	f003 0306 	and.w	r3, r3, #6
 8023b64:	2b04      	cmp	r3, #4
 8023b66:	bf08      	it	eq
 8023b68:	1aad      	subeq	r5, r5, r2
 8023b6a:	68a3      	ldr	r3, [r4, #8]
 8023b6c:	6922      	ldr	r2, [r4, #16]
 8023b6e:	bf0c      	ite	eq
 8023b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023b74:	2500      	movne	r5, #0
 8023b76:	4293      	cmp	r3, r2
 8023b78:	bfc4      	itt	gt
 8023b7a:	1a9b      	subgt	r3, r3, r2
 8023b7c:	18ed      	addgt	r5, r5, r3
 8023b7e:	2600      	movs	r6, #0
 8023b80:	341a      	adds	r4, #26
 8023b82:	42b5      	cmp	r5, r6
 8023b84:	d11a      	bne.n	8023bbc <_printf_common+0xc8>
 8023b86:	2000      	movs	r0, #0
 8023b88:	e008      	b.n	8023b9c <_printf_common+0xa8>
 8023b8a:	2301      	movs	r3, #1
 8023b8c:	4652      	mov	r2, sl
 8023b8e:	4649      	mov	r1, r9
 8023b90:	4638      	mov	r0, r7
 8023b92:	47c0      	blx	r8
 8023b94:	3001      	adds	r0, #1
 8023b96:	d103      	bne.n	8023ba0 <_printf_common+0xac>
 8023b98:	f04f 30ff 	mov.w	r0, #4294967295
 8023b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023ba0:	3501      	adds	r5, #1
 8023ba2:	e7c6      	b.n	8023b32 <_printf_common+0x3e>
 8023ba4:	18e1      	adds	r1, r4, r3
 8023ba6:	1c5a      	adds	r2, r3, #1
 8023ba8:	2030      	movs	r0, #48	; 0x30
 8023baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023bae:	4422      	add	r2, r4
 8023bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023bb8:	3302      	adds	r3, #2
 8023bba:	e7c7      	b.n	8023b4c <_printf_common+0x58>
 8023bbc:	2301      	movs	r3, #1
 8023bbe:	4622      	mov	r2, r4
 8023bc0:	4649      	mov	r1, r9
 8023bc2:	4638      	mov	r0, r7
 8023bc4:	47c0      	blx	r8
 8023bc6:	3001      	adds	r0, #1
 8023bc8:	d0e6      	beq.n	8023b98 <_printf_common+0xa4>
 8023bca:	3601      	adds	r6, #1
 8023bcc:	e7d9      	b.n	8023b82 <_printf_common+0x8e>
	...

08023bd0 <_printf_i>:
 8023bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023bd4:	7e0f      	ldrb	r7, [r1, #24]
 8023bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023bd8:	2f78      	cmp	r7, #120	; 0x78
 8023bda:	4691      	mov	r9, r2
 8023bdc:	4680      	mov	r8, r0
 8023bde:	460c      	mov	r4, r1
 8023be0:	469a      	mov	sl, r3
 8023be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023be6:	d807      	bhi.n	8023bf8 <_printf_i+0x28>
 8023be8:	2f62      	cmp	r7, #98	; 0x62
 8023bea:	d80a      	bhi.n	8023c02 <_printf_i+0x32>
 8023bec:	2f00      	cmp	r7, #0
 8023bee:	f000 80d8 	beq.w	8023da2 <_printf_i+0x1d2>
 8023bf2:	2f58      	cmp	r7, #88	; 0x58
 8023bf4:	f000 80a3 	beq.w	8023d3e <_printf_i+0x16e>
 8023bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023c00:	e03a      	b.n	8023c78 <_printf_i+0xa8>
 8023c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023c06:	2b15      	cmp	r3, #21
 8023c08:	d8f6      	bhi.n	8023bf8 <_printf_i+0x28>
 8023c0a:	a101      	add	r1, pc, #4	; (adr r1, 8023c10 <_printf_i+0x40>)
 8023c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023c10:	08023c69 	.word	0x08023c69
 8023c14:	08023c7d 	.word	0x08023c7d
 8023c18:	08023bf9 	.word	0x08023bf9
 8023c1c:	08023bf9 	.word	0x08023bf9
 8023c20:	08023bf9 	.word	0x08023bf9
 8023c24:	08023bf9 	.word	0x08023bf9
 8023c28:	08023c7d 	.word	0x08023c7d
 8023c2c:	08023bf9 	.word	0x08023bf9
 8023c30:	08023bf9 	.word	0x08023bf9
 8023c34:	08023bf9 	.word	0x08023bf9
 8023c38:	08023bf9 	.word	0x08023bf9
 8023c3c:	08023d89 	.word	0x08023d89
 8023c40:	08023cad 	.word	0x08023cad
 8023c44:	08023d6b 	.word	0x08023d6b
 8023c48:	08023bf9 	.word	0x08023bf9
 8023c4c:	08023bf9 	.word	0x08023bf9
 8023c50:	08023dab 	.word	0x08023dab
 8023c54:	08023bf9 	.word	0x08023bf9
 8023c58:	08023cad 	.word	0x08023cad
 8023c5c:	08023bf9 	.word	0x08023bf9
 8023c60:	08023bf9 	.word	0x08023bf9
 8023c64:	08023d73 	.word	0x08023d73
 8023c68:	682b      	ldr	r3, [r5, #0]
 8023c6a:	1d1a      	adds	r2, r3, #4
 8023c6c:	681b      	ldr	r3, [r3, #0]
 8023c6e:	602a      	str	r2, [r5, #0]
 8023c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023c78:	2301      	movs	r3, #1
 8023c7a:	e0a3      	b.n	8023dc4 <_printf_i+0x1f4>
 8023c7c:	6820      	ldr	r0, [r4, #0]
 8023c7e:	6829      	ldr	r1, [r5, #0]
 8023c80:	0606      	lsls	r6, r0, #24
 8023c82:	f101 0304 	add.w	r3, r1, #4
 8023c86:	d50a      	bpl.n	8023c9e <_printf_i+0xce>
 8023c88:	680e      	ldr	r6, [r1, #0]
 8023c8a:	602b      	str	r3, [r5, #0]
 8023c8c:	2e00      	cmp	r6, #0
 8023c8e:	da03      	bge.n	8023c98 <_printf_i+0xc8>
 8023c90:	232d      	movs	r3, #45	; 0x2d
 8023c92:	4276      	negs	r6, r6
 8023c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023c98:	485e      	ldr	r0, [pc, #376]	; (8023e14 <_printf_i+0x244>)
 8023c9a:	230a      	movs	r3, #10
 8023c9c:	e019      	b.n	8023cd2 <_printf_i+0x102>
 8023c9e:	680e      	ldr	r6, [r1, #0]
 8023ca0:	602b      	str	r3, [r5, #0]
 8023ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023ca6:	bf18      	it	ne
 8023ca8:	b236      	sxthne	r6, r6
 8023caa:	e7ef      	b.n	8023c8c <_printf_i+0xbc>
 8023cac:	682b      	ldr	r3, [r5, #0]
 8023cae:	6820      	ldr	r0, [r4, #0]
 8023cb0:	1d19      	adds	r1, r3, #4
 8023cb2:	6029      	str	r1, [r5, #0]
 8023cb4:	0601      	lsls	r1, r0, #24
 8023cb6:	d501      	bpl.n	8023cbc <_printf_i+0xec>
 8023cb8:	681e      	ldr	r6, [r3, #0]
 8023cba:	e002      	b.n	8023cc2 <_printf_i+0xf2>
 8023cbc:	0646      	lsls	r6, r0, #25
 8023cbe:	d5fb      	bpl.n	8023cb8 <_printf_i+0xe8>
 8023cc0:	881e      	ldrh	r6, [r3, #0]
 8023cc2:	4854      	ldr	r0, [pc, #336]	; (8023e14 <_printf_i+0x244>)
 8023cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8023cc6:	bf0c      	ite	eq
 8023cc8:	2308      	moveq	r3, #8
 8023cca:	230a      	movne	r3, #10
 8023ccc:	2100      	movs	r1, #0
 8023cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023cd2:	6865      	ldr	r5, [r4, #4]
 8023cd4:	60a5      	str	r5, [r4, #8]
 8023cd6:	2d00      	cmp	r5, #0
 8023cd8:	bfa2      	ittt	ge
 8023cda:	6821      	ldrge	r1, [r4, #0]
 8023cdc:	f021 0104 	bicge.w	r1, r1, #4
 8023ce0:	6021      	strge	r1, [r4, #0]
 8023ce2:	b90e      	cbnz	r6, 8023ce8 <_printf_i+0x118>
 8023ce4:	2d00      	cmp	r5, #0
 8023ce6:	d04d      	beq.n	8023d84 <_printf_i+0x1b4>
 8023ce8:	4615      	mov	r5, r2
 8023cea:	fbb6 f1f3 	udiv	r1, r6, r3
 8023cee:	fb03 6711 	mls	r7, r3, r1, r6
 8023cf2:	5dc7      	ldrb	r7, [r0, r7]
 8023cf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023cf8:	4637      	mov	r7, r6
 8023cfa:	42bb      	cmp	r3, r7
 8023cfc:	460e      	mov	r6, r1
 8023cfe:	d9f4      	bls.n	8023cea <_printf_i+0x11a>
 8023d00:	2b08      	cmp	r3, #8
 8023d02:	d10b      	bne.n	8023d1c <_printf_i+0x14c>
 8023d04:	6823      	ldr	r3, [r4, #0]
 8023d06:	07de      	lsls	r6, r3, #31
 8023d08:	d508      	bpl.n	8023d1c <_printf_i+0x14c>
 8023d0a:	6923      	ldr	r3, [r4, #16]
 8023d0c:	6861      	ldr	r1, [r4, #4]
 8023d0e:	4299      	cmp	r1, r3
 8023d10:	bfde      	ittt	le
 8023d12:	2330      	movle	r3, #48	; 0x30
 8023d14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023d18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023d1c:	1b52      	subs	r2, r2, r5
 8023d1e:	6122      	str	r2, [r4, #16]
 8023d20:	f8cd a000 	str.w	sl, [sp]
 8023d24:	464b      	mov	r3, r9
 8023d26:	aa03      	add	r2, sp, #12
 8023d28:	4621      	mov	r1, r4
 8023d2a:	4640      	mov	r0, r8
 8023d2c:	f7ff fee2 	bl	8023af4 <_printf_common>
 8023d30:	3001      	adds	r0, #1
 8023d32:	d14c      	bne.n	8023dce <_printf_i+0x1fe>
 8023d34:	f04f 30ff 	mov.w	r0, #4294967295
 8023d38:	b004      	add	sp, #16
 8023d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023d3e:	4835      	ldr	r0, [pc, #212]	; (8023e14 <_printf_i+0x244>)
 8023d40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023d44:	6829      	ldr	r1, [r5, #0]
 8023d46:	6823      	ldr	r3, [r4, #0]
 8023d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8023d4c:	6029      	str	r1, [r5, #0]
 8023d4e:	061d      	lsls	r5, r3, #24
 8023d50:	d514      	bpl.n	8023d7c <_printf_i+0x1ac>
 8023d52:	07df      	lsls	r7, r3, #31
 8023d54:	bf44      	itt	mi
 8023d56:	f043 0320 	orrmi.w	r3, r3, #32
 8023d5a:	6023      	strmi	r3, [r4, #0]
 8023d5c:	b91e      	cbnz	r6, 8023d66 <_printf_i+0x196>
 8023d5e:	6823      	ldr	r3, [r4, #0]
 8023d60:	f023 0320 	bic.w	r3, r3, #32
 8023d64:	6023      	str	r3, [r4, #0]
 8023d66:	2310      	movs	r3, #16
 8023d68:	e7b0      	b.n	8023ccc <_printf_i+0xfc>
 8023d6a:	6823      	ldr	r3, [r4, #0]
 8023d6c:	f043 0320 	orr.w	r3, r3, #32
 8023d70:	6023      	str	r3, [r4, #0]
 8023d72:	2378      	movs	r3, #120	; 0x78
 8023d74:	4828      	ldr	r0, [pc, #160]	; (8023e18 <_printf_i+0x248>)
 8023d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023d7a:	e7e3      	b.n	8023d44 <_printf_i+0x174>
 8023d7c:	0659      	lsls	r1, r3, #25
 8023d7e:	bf48      	it	mi
 8023d80:	b2b6      	uxthmi	r6, r6
 8023d82:	e7e6      	b.n	8023d52 <_printf_i+0x182>
 8023d84:	4615      	mov	r5, r2
 8023d86:	e7bb      	b.n	8023d00 <_printf_i+0x130>
 8023d88:	682b      	ldr	r3, [r5, #0]
 8023d8a:	6826      	ldr	r6, [r4, #0]
 8023d8c:	6961      	ldr	r1, [r4, #20]
 8023d8e:	1d18      	adds	r0, r3, #4
 8023d90:	6028      	str	r0, [r5, #0]
 8023d92:	0635      	lsls	r5, r6, #24
 8023d94:	681b      	ldr	r3, [r3, #0]
 8023d96:	d501      	bpl.n	8023d9c <_printf_i+0x1cc>
 8023d98:	6019      	str	r1, [r3, #0]
 8023d9a:	e002      	b.n	8023da2 <_printf_i+0x1d2>
 8023d9c:	0670      	lsls	r0, r6, #25
 8023d9e:	d5fb      	bpl.n	8023d98 <_printf_i+0x1c8>
 8023da0:	8019      	strh	r1, [r3, #0]
 8023da2:	2300      	movs	r3, #0
 8023da4:	6123      	str	r3, [r4, #16]
 8023da6:	4615      	mov	r5, r2
 8023da8:	e7ba      	b.n	8023d20 <_printf_i+0x150>
 8023daa:	682b      	ldr	r3, [r5, #0]
 8023dac:	1d1a      	adds	r2, r3, #4
 8023dae:	602a      	str	r2, [r5, #0]
 8023db0:	681d      	ldr	r5, [r3, #0]
 8023db2:	6862      	ldr	r2, [r4, #4]
 8023db4:	2100      	movs	r1, #0
 8023db6:	4628      	mov	r0, r5
 8023db8:	f7dc fab2 	bl	8000320 <memchr>
 8023dbc:	b108      	cbz	r0, 8023dc2 <_printf_i+0x1f2>
 8023dbe:	1b40      	subs	r0, r0, r5
 8023dc0:	6060      	str	r0, [r4, #4]
 8023dc2:	6863      	ldr	r3, [r4, #4]
 8023dc4:	6123      	str	r3, [r4, #16]
 8023dc6:	2300      	movs	r3, #0
 8023dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023dcc:	e7a8      	b.n	8023d20 <_printf_i+0x150>
 8023dce:	6923      	ldr	r3, [r4, #16]
 8023dd0:	462a      	mov	r2, r5
 8023dd2:	4649      	mov	r1, r9
 8023dd4:	4640      	mov	r0, r8
 8023dd6:	47d0      	blx	sl
 8023dd8:	3001      	adds	r0, #1
 8023dda:	d0ab      	beq.n	8023d34 <_printf_i+0x164>
 8023ddc:	6823      	ldr	r3, [r4, #0]
 8023dde:	079b      	lsls	r3, r3, #30
 8023de0:	d413      	bmi.n	8023e0a <_printf_i+0x23a>
 8023de2:	68e0      	ldr	r0, [r4, #12]
 8023de4:	9b03      	ldr	r3, [sp, #12]
 8023de6:	4298      	cmp	r0, r3
 8023de8:	bfb8      	it	lt
 8023dea:	4618      	movlt	r0, r3
 8023dec:	e7a4      	b.n	8023d38 <_printf_i+0x168>
 8023dee:	2301      	movs	r3, #1
 8023df0:	4632      	mov	r2, r6
 8023df2:	4649      	mov	r1, r9
 8023df4:	4640      	mov	r0, r8
 8023df6:	47d0      	blx	sl
 8023df8:	3001      	adds	r0, #1
 8023dfa:	d09b      	beq.n	8023d34 <_printf_i+0x164>
 8023dfc:	3501      	adds	r5, #1
 8023dfe:	68e3      	ldr	r3, [r4, #12]
 8023e00:	9903      	ldr	r1, [sp, #12]
 8023e02:	1a5b      	subs	r3, r3, r1
 8023e04:	42ab      	cmp	r3, r5
 8023e06:	dcf2      	bgt.n	8023dee <_printf_i+0x21e>
 8023e08:	e7eb      	b.n	8023de2 <_printf_i+0x212>
 8023e0a:	2500      	movs	r5, #0
 8023e0c:	f104 0619 	add.w	r6, r4, #25
 8023e10:	e7f5      	b.n	8023dfe <_printf_i+0x22e>
 8023e12:	bf00      	nop
 8023e14:	080274b9 	.word	0x080274b9
 8023e18:	080274ca 	.word	0x080274ca

08023e1c <cleanup_glue>:
 8023e1c:	b538      	push	{r3, r4, r5, lr}
 8023e1e:	460c      	mov	r4, r1
 8023e20:	6809      	ldr	r1, [r1, #0]
 8023e22:	4605      	mov	r5, r0
 8023e24:	b109      	cbz	r1, 8023e2a <cleanup_glue+0xe>
 8023e26:	f7ff fff9 	bl	8023e1c <cleanup_glue>
 8023e2a:	4621      	mov	r1, r4
 8023e2c:	4628      	mov	r0, r5
 8023e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023e32:	f7ff bc25 	b.w	8023680 <_free_r>
	...

08023e38 <_reclaim_reent>:
 8023e38:	4b2c      	ldr	r3, [pc, #176]	; (8023eec <_reclaim_reent+0xb4>)
 8023e3a:	681b      	ldr	r3, [r3, #0]
 8023e3c:	4283      	cmp	r3, r0
 8023e3e:	b570      	push	{r4, r5, r6, lr}
 8023e40:	4604      	mov	r4, r0
 8023e42:	d051      	beq.n	8023ee8 <_reclaim_reent+0xb0>
 8023e44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023e46:	b143      	cbz	r3, 8023e5a <_reclaim_reent+0x22>
 8023e48:	68db      	ldr	r3, [r3, #12]
 8023e4a:	2b00      	cmp	r3, #0
 8023e4c:	d14a      	bne.n	8023ee4 <_reclaim_reent+0xac>
 8023e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023e50:	6819      	ldr	r1, [r3, #0]
 8023e52:	b111      	cbz	r1, 8023e5a <_reclaim_reent+0x22>
 8023e54:	4620      	mov	r0, r4
 8023e56:	f7ff fc13 	bl	8023680 <_free_r>
 8023e5a:	6961      	ldr	r1, [r4, #20]
 8023e5c:	b111      	cbz	r1, 8023e64 <_reclaim_reent+0x2c>
 8023e5e:	4620      	mov	r0, r4
 8023e60:	f7ff fc0e 	bl	8023680 <_free_r>
 8023e64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023e66:	b111      	cbz	r1, 8023e6e <_reclaim_reent+0x36>
 8023e68:	4620      	mov	r0, r4
 8023e6a:	f7ff fc09 	bl	8023680 <_free_r>
 8023e6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023e70:	b111      	cbz	r1, 8023e78 <_reclaim_reent+0x40>
 8023e72:	4620      	mov	r0, r4
 8023e74:	f7ff fc04 	bl	8023680 <_free_r>
 8023e78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8023e7a:	b111      	cbz	r1, 8023e82 <_reclaim_reent+0x4a>
 8023e7c:	4620      	mov	r0, r4
 8023e7e:	f7ff fbff 	bl	8023680 <_free_r>
 8023e82:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023e84:	b111      	cbz	r1, 8023e8c <_reclaim_reent+0x54>
 8023e86:	4620      	mov	r0, r4
 8023e88:	f7ff fbfa 	bl	8023680 <_free_r>
 8023e8c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8023e8e:	b111      	cbz	r1, 8023e96 <_reclaim_reent+0x5e>
 8023e90:	4620      	mov	r0, r4
 8023e92:	f7ff fbf5 	bl	8023680 <_free_r>
 8023e96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023e98:	b111      	cbz	r1, 8023ea0 <_reclaim_reent+0x68>
 8023e9a:	4620      	mov	r0, r4
 8023e9c:	f7ff fbf0 	bl	8023680 <_free_r>
 8023ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023ea2:	b111      	cbz	r1, 8023eaa <_reclaim_reent+0x72>
 8023ea4:	4620      	mov	r0, r4
 8023ea6:	f7ff fbeb 	bl	8023680 <_free_r>
 8023eaa:	69a3      	ldr	r3, [r4, #24]
 8023eac:	b1e3      	cbz	r3, 8023ee8 <_reclaim_reent+0xb0>
 8023eae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8023eb0:	4620      	mov	r0, r4
 8023eb2:	4798      	blx	r3
 8023eb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8023eb6:	b1b9      	cbz	r1, 8023ee8 <_reclaim_reent+0xb0>
 8023eb8:	4620      	mov	r0, r4
 8023eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023ebe:	f7ff bfad 	b.w	8023e1c <cleanup_glue>
 8023ec2:	5949      	ldr	r1, [r1, r5]
 8023ec4:	b941      	cbnz	r1, 8023ed8 <_reclaim_reent+0xa0>
 8023ec6:	3504      	adds	r5, #4
 8023ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023eca:	2d80      	cmp	r5, #128	; 0x80
 8023ecc:	68d9      	ldr	r1, [r3, #12]
 8023ece:	d1f8      	bne.n	8023ec2 <_reclaim_reent+0x8a>
 8023ed0:	4620      	mov	r0, r4
 8023ed2:	f7ff fbd5 	bl	8023680 <_free_r>
 8023ed6:	e7ba      	b.n	8023e4e <_reclaim_reent+0x16>
 8023ed8:	680e      	ldr	r6, [r1, #0]
 8023eda:	4620      	mov	r0, r4
 8023edc:	f7ff fbd0 	bl	8023680 <_free_r>
 8023ee0:	4631      	mov	r1, r6
 8023ee2:	e7ef      	b.n	8023ec4 <_reclaim_reent+0x8c>
 8023ee4:	2500      	movs	r5, #0
 8023ee6:	e7ef      	b.n	8023ec8 <_reclaim_reent+0x90>
 8023ee8:	bd70      	pop	{r4, r5, r6, pc}
 8023eea:	bf00      	nop
 8023eec:	240000dc 	.word	0x240000dc

08023ef0 <_sbrk_r>:
 8023ef0:	b538      	push	{r3, r4, r5, lr}
 8023ef2:	4d06      	ldr	r5, [pc, #24]	; (8023f0c <_sbrk_r+0x1c>)
 8023ef4:	2300      	movs	r3, #0
 8023ef6:	4604      	mov	r4, r0
 8023ef8:	4608      	mov	r0, r1
 8023efa:	602b      	str	r3, [r5, #0]
 8023efc:	f7df fa6a 	bl	80033d4 <_sbrk>
 8023f00:	1c43      	adds	r3, r0, #1
 8023f02:	d102      	bne.n	8023f0a <_sbrk_r+0x1a>
 8023f04:	682b      	ldr	r3, [r5, #0]
 8023f06:	b103      	cbz	r3, 8023f0a <_sbrk_r+0x1a>
 8023f08:	6023      	str	r3, [r4, #0]
 8023f0a:	bd38      	pop	{r3, r4, r5, pc}
 8023f0c:	24010104 	.word	0x24010104

08023f10 <_raise_r>:
 8023f10:	291f      	cmp	r1, #31
 8023f12:	b538      	push	{r3, r4, r5, lr}
 8023f14:	4604      	mov	r4, r0
 8023f16:	460d      	mov	r5, r1
 8023f18:	d904      	bls.n	8023f24 <_raise_r+0x14>
 8023f1a:	2316      	movs	r3, #22
 8023f1c:	6003      	str	r3, [r0, #0]
 8023f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8023f22:	bd38      	pop	{r3, r4, r5, pc}
 8023f24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023f26:	b112      	cbz	r2, 8023f2e <_raise_r+0x1e>
 8023f28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023f2c:	b94b      	cbnz	r3, 8023f42 <_raise_r+0x32>
 8023f2e:	4620      	mov	r0, r4
 8023f30:	f000 f830 	bl	8023f94 <_getpid_r>
 8023f34:	462a      	mov	r2, r5
 8023f36:	4601      	mov	r1, r0
 8023f38:	4620      	mov	r0, r4
 8023f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023f3e:	f000 b817 	b.w	8023f70 <_kill_r>
 8023f42:	2b01      	cmp	r3, #1
 8023f44:	d00a      	beq.n	8023f5c <_raise_r+0x4c>
 8023f46:	1c59      	adds	r1, r3, #1
 8023f48:	d103      	bne.n	8023f52 <_raise_r+0x42>
 8023f4a:	2316      	movs	r3, #22
 8023f4c:	6003      	str	r3, [r0, #0]
 8023f4e:	2001      	movs	r0, #1
 8023f50:	e7e7      	b.n	8023f22 <_raise_r+0x12>
 8023f52:	2400      	movs	r4, #0
 8023f54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023f58:	4628      	mov	r0, r5
 8023f5a:	4798      	blx	r3
 8023f5c:	2000      	movs	r0, #0
 8023f5e:	e7e0      	b.n	8023f22 <_raise_r+0x12>

08023f60 <raise>:
 8023f60:	4b02      	ldr	r3, [pc, #8]	; (8023f6c <raise+0xc>)
 8023f62:	4601      	mov	r1, r0
 8023f64:	6818      	ldr	r0, [r3, #0]
 8023f66:	f7ff bfd3 	b.w	8023f10 <_raise_r>
 8023f6a:	bf00      	nop
 8023f6c:	240000dc 	.word	0x240000dc

08023f70 <_kill_r>:
 8023f70:	b538      	push	{r3, r4, r5, lr}
 8023f72:	4d07      	ldr	r5, [pc, #28]	; (8023f90 <_kill_r+0x20>)
 8023f74:	2300      	movs	r3, #0
 8023f76:	4604      	mov	r4, r0
 8023f78:	4608      	mov	r0, r1
 8023f7a:	4611      	mov	r1, r2
 8023f7c:	602b      	str	r3, [r5, #0]
 8023f7e:	f7df f9f1 	bl	8003364 <_kill>
 8023f82:	1c43      	adds	r3, r0, #1
 8023f84:	d102      	bne.n	8023f8c <_kill_r+0x1c>
 8023f86:	682b      	ldr	r3, [r5, #0]
 8023f88:	b103      	cbz	r3, 8023f8c <_kill_r+0x1c>
 8023f8a:	6023      	str	r3, [r4, #0]
 8023f8c:	bd38      	pop	{r3, r4, r5, pc}
 8023f8e:	bf00      	nop
 8023f90:	24010104 	.word	0x24010104

08023f94 <_getpid_r>:
 8023f94:	f7df b9e4 	b.w	8003360 <_getpid>

08023f98 <siprintf>:
 8023f98:	b40e      	push	{r1, r2, r3}
 8023f9a:	b500      	push	{lr}
 8023f9c:	b09c      	sub	sp, #112	; 0x70
 8023f9e:	ab1d      	add	r3, sp, #116	; 0x74
 8023fa0:	9002      	str	r0, [sp, #8]
 8023fa2:	9006      	str	r0, [sp, #24]
 8023fa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023fa8:	4809      	ldr	r0, [pc, #36]	; (8023fd0 <siprintf+0x38>)
 8023faa:	9107      	str	r1, [sp, #28]
 8023fac:	9104      	str	r1, [sp, #16]
 8023fae:	4909      	ldr	r1, [pc, #36]	; (8023fd4 <siprintf+0x3c>)
 8023fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8023fb4:	9105      	str	r1, [sp, #20]
 8023fb6:	6800      	ldr	r0, [r0, #0]
 8023fb8:	9301      	str	r3, [sp, #4]
 8023fba:	a902      	add	r1, sp, #8
 8023fbc:	f000 fbe6 	bl	802478c <_svfiprintf_r>
 8023fc0:	9b02      	ldr	r3, [sp, #8]
 8023fc2:	2200      	movs	r2, #0
 8023fc4:	701a      	strb	r2, [r3, #0]
 8023fc6:	b01c      	add	sp, #112	; 0x70
 8023fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8023fcc:	b003      	add	sp, #12
 8023fce:	4770      	bx	lr
 8023fd0:	240000dc 	.word	0x240000dc
 8023fd4:	ffff0208 	.word	0xffff0208

08023fd8 <__sread>:
 8023fd8:	b510      	push	{r4, lr}
 8023fda:	460c      	mov	r4, r1
 8023fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023fe0:	f000 fcd4 	bl	802498c <_read_r>
 8023fe4:	2800      	cmp	r0, #0
 8023fe6:	bfab      	itete	ge
 8023fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023fea:	89a3      	ldrhlt	r3, [r4, #12]
 8023fec:	181b      	addge	r3, r3, r0
 8023fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023ff2:	bfac      	ite	ge
 8023ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8023ff6:	81a3      	strhlt	r3, [r4, #12]
 8023ff8:	bd10      	pop	{r4, pc}

08023ffa <__swrite>:
 8023ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ffe:	461f      	mov	r7, r3
 8024000:	898b      	ldrh	r3, [r1, #12]
 8024002:	05db      	lsls	r3, r3, #23
 8024004:	4605      	mov	r5, r0
 8024006:	460c      	mov	r4, r1
 8024008:	4616      	mov	r6, r2
 802400a:	d505      	bpl.n	8024018 <__swrite+0x1e>
 802400c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024010:	2302      	movs	r3, #2
 8024012:	2200      	movs	r2, #0
 8024014:	f000 fa92 	bl	802453c <_lseek_r>
 8024018:	89a3      	ldrh	r3, [r4, #12]
 802401a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802401e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024022:	81a3      	strh	r3, [r4, #12]
 8024024:	4632      	mov	r2, r6
 8024026:	463b      	mov	r3, r7
 8024028:	4628      	mov	r0, r5
 802402a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802402e:	f000 b8d1 	b.w	80241d4 <_write_r>

08024032 <__sseek>:
 8024032:	b510      	push	{r4, lr}
 8024034:	460c      	mov	r4, r1
 8024036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802403a:	f000 fa7f 	bl	802453c <_lseek_r>
 802403e:	1c43      	adds	r3, r0, #1
 8024040:	89a3      	ldrh	r3, [r4, #12]
 8024042:	bf15      	itete	ne
 8024044:	6560      	strne	r0, [r4, #84]	; 0x54
 8024046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802404a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802404e:	81a3      	strheq	r3, [r4, #12]
 8024050:	bf18      	it	ne
 8024052:	81a3      	strhne	r3, [r4, #12]
 8024054:	bd10      	pop	{r4, pc}

08024056 <__sclose>:
 8024056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802405a:	f000 b99d 	b.w	8024398 <_close_r>

0802405e <strncmp>:
 802405e:	b510      	push	{r4, lr}
 8024060:	b17a      	cbz	r2, 8024082 <strncmp+0x24>
 8024062:	4603      	mov	r3, r0
 8024064:	3901      	subs	r1, #1
 8024066:	1884      	adds	r4, r0, r2
 8024068:	f813 0b01 	ldrb.w	r0, [r3], #1
 802406c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8024070:	4290      	cmp	r0, r2
 8024072:	d101      	bne.n	8024078 <strncmp+0x1a>
 8024074:	42a3      	cmp	r3, r4
 8024076:	d101      	bne.n	802407c <strncmp+0x1e>
 8024078:	1a80      	subs	r0, r0, r2
 802407a:	bd10      	pop	{r4, pc}
 802407c:	2800      	cmp	r0, #0
 802407e:	d1f3      	bne.n	8024068 <strncmp+0xa>
 8024080:	e7fa      	b.n	8024078 <strncmp+0x1a>
 8024082:	4610      	mov	r0, r2
 8024084:	e7f9      	b.n	802407a <strncmp+0x1c>

08024086 <strncpy>:
 8024086:	b510      	push	{r4, lr}
 8024088:	3901      	subs	r1, #1
 802408a:	4603      	mov	r3, r0
 802408c:	b132      	cbz	r2, 802409c <strncpy+0x16>
 802408e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024092:	f803 4b01 	strb.w	r4, [r3], #1
 8024096:	3a01      	subs	r2, #1
 8024098:	2c00      	cmp	r4, #0
 802409a:	d1f7      	bne.n	802408c <strncpy+0x6>
 802409c:	441a      	add	r2, r3
 802409e:	2100      	movs	r1, #0
 80240a0:	4293      	cmp	r3, r2
 80240a2:	d100      	bne.n	80240a6 <strncpy+0x20>
 80240a4:	bd10      	pop	{r4, pc}
 80240a6:	f803 1b01 	strb.w	r1, [r3], #1
 80240aa:	e7f9      	b.n	80240a0 <strncpy+0x1a>

080240ac <strstr>:
 80240ac:	780a      	ldrb	r2, [r1, #0]
 80240ae:	b570      	push	{r4, r5, r6, lr}
 80240b0:	b96a      	cbnz	r2, 80240ce <strstr+0x22>
 80240b2:	bd70      	pop	{r4, r5, r6, pc}
 80240b4:	429a      	cmp	r2, r3
 80240b6:	d109      	bne.n	80240cc <strstr+0x20>
 80240b8:	460c      	mov	r4, r1
 80240ba:	4605      	mov	r5, r0
 80240bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80240c0:	2b00      	cmp	r3, #0
 80240c2:	d0f6      	beq.n	80240b2 <strstr+0x6>
 80240c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80240c8:	429e      	cmp	r6, r3
 80240ca:	d0f7      	beq.n	80240bc <strstr+0x10>
 80240cc:	3001      	adds	r0, #1
 80240ce:	7803      	ldrb	r3, [r0, #0]
 80240d0:	2b00      	cmp	r3, #0
 80240d2:	d1ef      	bne.n	80240b4 <strstr+0x8>
 80240d4:	4618      	mov	r0, r3
 80240d6:	e7ec      	b.n	80240b2 <strstr+0x6>

080240d8 <__strtok_r>:
 80240d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80240da:	b908      	cbnz	r0, 80240e0 <__strtok_r+0x8>
 80240dc:	6810      	ldr	r0, [r2, #0]
 80240de:	b188      	cbz	r0, 8024104 <__strtok_r+0x2c>
 80240e0:	4604      	mov	r4, r0
 80240e2:	4620      	mov	r0, r4
 80240e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80240e8:	460f      	mov	r7, r1
 80240ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 80240ee:	b91e      	cbnz	r6, 80240f8 <__strtok_r+0x20>
 80240f0:	b965      	cbnz	r5, 802410c <__strtok_r+0x34>
 80240f2:	6015      	str	r5, [r2, #0]
 80240f4:	4628      	mov	r0, r5
 80240f6:	e005      	b.n	8024104 <__strtok_r+0x2c>
 80240f8:	42b5      	cmp	r5, r6
 80240fa:	d1f6      	bne.n	80240ea <__strtok_r+0x12>
 80240fc:	2b00      	cmp	r3, #0
 80240fe:	d1f0      	bne.n	80240e2 <__strtok_r+0xa>
 8024100:	6014      	str	r4, [r2, #0]
 8024102:	7003      	strb	r3, [r0, #0]
 8024104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024106:	461c      	mov	r4, r3
 8024108:	e00c      	b.n	8024124 <__strtok_r+0x4c>
 802410a:	b915      	cbnz	r5, 8024112 <__strtok_r+0x3a>
 802410c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024110:	460e      	mov	r6, r1
 8024112:	f816 5b01 	ldrb.w	r5, [r6], #1
 8024116:	42ab      	cmp	r3, r5
 8024118:	d1f7      	bne.n	802410a <__strtok_r+0x32>
 802411a:	2b00      	cmp	r3, #0
 802411c:	d0f3      	beq.n	8024106 <__strtok_r+0x2e>
 802411e:	2300      	movs	r3, #0
 8024120:	f804 3c01 	strb.w	r3, [r4, #-1]
 8024124:	6014      	str	r4, [r2, #0]
 8024126:	e7ed      	b.n	8024104 <__strtok_r+0x2c>

08024128 <strtok_r>:
 8024128:	2301      	movs	r3, #1
 802412a:	f7ff bfd5 	b.w	80240d8 <__strtok_r>
	...

08024130 <__swbuf_r>:
 8024130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024132:	460e      	mov	r6, r1
 8024134:	4614      	mov	r4, r2
 8024136:	4605      	mov	r5, r0
 8024138:	b118      	cbz	r0, 8024142 <__swbuf_r+0x12>
 802413a:	6983      	ldr	r3, [r0, #24]
 802413c:	b90b      	cbnz	r3, 8024142 <__swbuf_r+0x12>
 802413e:	f7ff f991 	bl	8023464 <__sinit>
 8024142:	4b21      	ldr	r3, [pc, #132]	; (80241c8 <__swbuf_r+0x98>)
 8024144:	429c      	cmp	r4, r3
 8024146:	d12b      	bne.n	80241a0 <__swbuf_r+0x70>
 8024148:	686c      	ldr	r4, [r5, #4]
 802414a:	69a3      	ldr	r3, [r4, #24]
 802414c:	60a3      	str	r3, [r4, #8]
 802414e:	89a3      	ldrh	r3, [r4, #12]
 8024150:	071a      	lsls	r2, r3, #28
 8024152:	d52f      	bpl.n	80241b4 <__swbuf_r+0x84>
 8024154:	6923      	ldr	r3, [r4, #16]
 8024156:	b36b      	cbz	r3, 80241b4 <__swbuf_r+0x84>
 8024158:	6923      	ldr	r3, [r4, #16]
 802415a:	6820      	ldr	r0, [r4, #0]
 802415c:	1ac0      	subs	r0, r0, r3
 802415e:	6963      	ldr	r3, [r4, #20]
 8024160:	b2f6      	uxtb	r6, r6
 8024162:	4283      	cmp	r3, r0
 8024164:	4637      	mov	r7, r6
 8024166:	dc04      	bgt.n	8024172 <__swbuf_r+0x42>
 8024168:	4621      	mov	r1, r4
 802416a:	4628      	mov	r0, r5
 802416c:	f000 f9aa 	bl	80244c4 <_fflush_r>
 8024170:	bb30      	cbnz	r0, 80241c0 <__swbuf_r+0x90>
 8024172:	68a3      	ldr	r3, [r4, #8]
 8024174:	3b01      	subs	r3, #1
 8024176:	60a3      	str	r3, [r4, #8]
 8024178:	6823      	ldr	r3, [r4, #0]
 802417a:	1c5a      	adds	r2, r3, #1
 802417c:	6022      	str	r2, [r4, #0]
 802417e:	701e      	strb	r6, [r3, #0]
 8024180:	6963      	ldr	r3, [r4, #20]
 8024182:	3001      	adds	r0, #1
 8024184:	4283      	cmp	r3, r0
 8024186:	d004      	beq.n	8024192 <__swbuf_r+0x62>
 8024188:	89a3      	ldrh	r3, [r4, #12]
 802418a:	07db      	lsls	r3, r3, #31
 802418c:	d506      	bpl.n	802419c <__swbuf_r+0x6c>
 802418e:	2e0a      	cmp	r6, #10
 8024190:	d104      	bne.n	802419c <__swbuf_r+0x6c>
 8024192:	4621      	mov	r1, r4
 8024194:	4628      	mov	r0, r5
 8024196:	f000 f995 	bl	80244c4 <_fflush_r>
 802419a:	b988      	cbnz	r0, 80241c0 <__swbuf_r+0x90>
 802419c:	4638      	mov	r0, r7
 802419e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80241a0:	4b0a      	ldr	r3, [pc, #40]	; (80241cc <__swbuf_r+0x9c>)
 80241a2:	429c      	cmp	r4, r3
 80241a4:	d101      	bne.n	80241aa <__swbuf_r+0x7a>
 80241a6:	68ac      	ldr	r4, [r5, #8]
 80241a8:	e7cf      	b.n	802414a <__swbuf_r+0x1a>
 80241aa:	4b09      	ldr	r3, [pc, #36]	; (80241d0 <__swbuf_r+0xa0>)
 80241ac:	429c      	cmp	r4, r3
 80241ae:	bf08      	it	eq
 80241b0:	68ec      	ldreq	r4, [r5, #12]
 80241b2:	e7ca      	b.n	802414a <__swbuf_r+0x1a>
 80241b4:	4621      	mov	r1, r4
 80241b6:	4628      	mov	r0, r5
 80241b8:	f000 f81e 	bl	80241f8 <__swsetup_r>
 80241bc:	2800      	cmp	r0, #0
 80241be:	d0cb      	beq.n	8024158 <__swbuf_r+0x28>
 80241c0:	f04f 37ff 	mov.w	r7, #4294967295
 80241c4:	e7ea      	b.n	802419c <__swbuf_r+0x6c>
 80241c6:	bf00      	nop
 80241c8:	08027464 	.word	0x08027464
 80241cc:	08027484 	.word	0x08027484
 80241d0:	08027444 	.word	0x08027444

080241d4 <_write_r>:
 80241d4:	b538      	push	{r3, r4, r5, lr}
 80241d6:	4d07      	ldr	r5, [pc, #28]	; (80241f4 <_write_r+0x20>)
 80241d8:	4604      	mov	r4, r0
 80241da:	4608      	mov	r0, r1
 80241dc:	4611      	mov	r1, r2
 80241de:	2200      	movs	r2, #0
 80241e0:	602a      	str	r2, [r5, #0]
 80241e2:	461a      	mov	r2, r3
 80241e4:	f7df f8dc 	bl	80033a0 <_write>
 80241e8:	1c43      	adds	r3, r0, #1
 80241ea:	d102      	bne.n	80241f2 <_write_r+0x1e>
 80241ec:	682b      	ldr	r3, [r5, #0]
 80241ee:	b103      	cbz	r3, 80241f2 <_write_r+0x1e>
 80241f0:	6023      	str	r3, [r4, #0]
 80241f2:	bd38      	pop	{r3, r4, r5, pc}
 80241f4:	24010104 	.word	0x24010104

080241f8 <__swsetup_r>:
 80241f8:	4b32      	ldr	r3, [pc, #200]	; (80242c4 <__swsetup_r+0xcc>)
 80241fa:	b570      	push	{r4, r5, r6, lr}
 80241fc:	681d      	ldr	r5, [r3, #0]
 80241fe:	4606      	mov	r6, r0
 8024200:	460c      	mov	r4, r1
 8024202:	b125      	cbz	r5, 802420e <__swsetup_r+0x16>
 8024204:	69ab      	ldr	r3, [r5, #24]
 8024206:	b913      	cbnz	r3, 802420e <__swsetup_r+0x16>
 8024208:	4628      	mov	r0, r5
 802420a:	f7ff f92b 	bl	8023464 <__sinit>
 802420e:	4b2e      	ldr	r3, [pc, #184]	; (80242c8 <__swsetup_r+0xd0>)
 8024210:	429c      	cmp	r4, r3
 8024212:	d10f      	bne.n	8024234 <__swsetup_r+0x3c>
 8024214:	686c      	ldr	r4, [r5, #4]
 8024216:	89a3      	ldrh	r3, [r4, #12]
 8024218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802421c:	0719      	lsls	r1, r3, #28
 802421e:	d42c      	bmi.n	802427a <__swsetup_r+0x82>
 8024220:	06dd      	lsls	r5, r3, #27
 8024222:	d411      	bmi.n	8024248 <__swsetup_r+0x50>
 8024224:	2309      	movs	r3, #9
 8024226:	6033      	str	r3, [r6, #0]
 8024228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802422c:	81a3      	strh	r3, [r4, #12]
 802422e:	f04f 30ff 	mov.w	r0, #4294967295
 8024232:	e03e      	b.n	80242b2 <__swsetup_r+0xba>
 8024234:	4b25      	ldr	r3, [pc, #148]	; (80242cc <__swsetup_r+0xd4>)
 8024236:	429c      	cmp	r4, r3
 8024238:	d101      	bne.n	802423e <__swsetup_r+0x46>
 802423a:	68ac      	ldr	r4, [r5, #8]
 802423c:	e7eb      	b.n	8024216 <__swsetup_r+0x1e>
 802423e:	4b24      	ldr	r3, [pc, #144]	; (80242d0 <__swsetup_r+0xd8>)
 8024240:	429c      	cmp	r4, r3
 8024242:	bf08      	it	eq
 8024244:	68ec      	ldreq	r4, [r5, #12]
 8024246:	e7e6      	b.n	8024216 <__swsetup_r+0x1e>
 8024248:	0758      	lsls	r0, r3, #29
 802424a:	d512      	bpl.n	8024272 <__swsetup_r+0x7a>
 802424c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802424e:	b141      	cbz	r1, 8024262 <__swsetup_r+0x6a>
 8024250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024254:	4299      	cmp	r1, r3
 8024256:	d002      	beq.n	802425e <__swsetup_r+0x66>
 8024258:	4630      	mov	r0, r6
 802425a:	f7ff fa11 	bl	8023680 <_free_r>
 802425e:	2300      	movs	r3, #0
 8024260:	6363      	str	r3, [r4, #52]	; 0x34
 8024262:	89a3      	ldrh	r3, [r4, #12]
 8024264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024268:	81a3      	strh	r3, [r4, #12]
 802426a:	2300      	movs	r3, #0
 802426c:	6063      	str	r3, [r4, #4]
 802426e:	6923      	ldr	r3, [r4, #16]
 8024270:	6023      	str	r3, [r4, #0]
 8024272:	89a3      	ldrh	r3, [r4, #12]
 8024274:	f043 0308 	orr.w	r3, r3, #8
 8024278:	81a3      	strh	r3, [r4, #12]
 802427a:	6923      	ldr	r3, [r4, #16]
 802427c:	b94b      	cbnz	r3, 8024292 <__swsetup_r+0x9a>
 802427e:	89a3      	ldrh	r3, [r4, #12]
 8024280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024288:	d003      	beq.n	8024292 <__swsetup_r+0x9a>
 802428a:	4621      	mov	r1, r4
 802428c:	4630      	mov	r0, r6
 802428e:	f000 f98d 	bl	80245ac <__smakebuf_r>
 8024292:	89a0      	ldrh	r0, [r4, #12]
 8024294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024298:	f010 0301 	ands.w	r3, r0, #1
 802429c:	d00a      	beq.n	80242b4 <__swsetup_r+0xbc>
 802429e:	2300      	movs	r3, #0
 80242a0:	60a3      	str	r3, [r4, #8]
 80242a2:	6963      	ldr	r3, [r4, #20]
 80242a4:	425b      	negs	r3, r3
 80242a6:	61a3      	str	r3, [r4, #24]
 80242a8:	6923      	ldr	r3, [r4, #16]
 80242aa:	b943      	cbnz	r3, 80242be <__swsetup_r+0xc6>
 80242ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80242b0:	d1ba      	bne.n	8024228 <__swsetup_r+0x30>
 80242b2:	bd70      	pop	{r4, r5, r6, pc}
 80242b4:	0781      	lsls	r1, r0, #30
 80242b6:	bf58      	it	pl
 80242b8:	6963      	ldrpl	r3, [r4, #20]
 80242ba:	60a3      	str	r3, [r4, #8]
 80242bc:	e7f4      	b.n	80242a8 <__swsetup_r+0xb0>
 80242be:	2000      	movs	r0, #0
 80242c0:	e7f7      	b.n	80242b2 <__swsetup_r+0xba>
 80242c2:	bf00      	nop
 80242c4:	240000dc 	.word	0x240000dc
 80242c8:	08027464 	.word	0x08027464
 80242cc:	08027484 	.word	0x08027484
 80242d0:	08027444 	.word	0x08027444

080242d4 <__register_exitproc>:
 80242d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80242d8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8024394 <__register_exitproc+0xc0>
 80242dc:	4606      	mov	r6, r0
 80242de:	f8d8 0000 	ldr.w	r0, [r8]
 80242e2:	461f      	mov	r7, r3
 80242e4:	460d      	mov	r5, r1
 80242e6:	4691      	mov	r9, r2
 80242e8:	f7ff f991 	bl	802360e <__retarget_lock_acquire_recursive>
 80242ec:	4b25      	ldr	r3, [pc, #148]	; (8024384 <__register_exitproc+0xb0>)
 80242ee:	681c      	ldr	r4, [r3, #0]
 80242f0:	b934      	cbnz	r4, 8024300 <__register_exitproc+0x2c>
 80242f2:	4c25      	ldr	r4, [pc, #148]	; (8024388 <__register_exitproc+0xb4>)
 80242f4:	601c      	str	r4, [r3, #0]
 80242f6:	4b25      	ldr	r3, [pc, #148]	; (802438c <__register_exitproc+0xb8>)
 80242f8:	b113      	cbz	r3, 8024300 <__register_exitproc+0x2c>
 80242fa:	681b      	ldr	r3, [r3, #0]
 80242fc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8024300:	6863      	ldr	r3, [r4, #4]
 8024302:	2b1f      	cmp	r3, #31
 8024304:	dd07      	ble.n	8024316 <__register_exitproc+0x42>
 8024306:	f8d8 0000 	ldr.w	r0, [r8]
 802430a:	f7ff f982 	bl	8023612 <__retarget_lock_release_recursive>
 802430e:	f04f 30ff 	mov.w	r0, #4294967295
 8024312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024316:	b34e      	cbz	r6, 802436c <__register_exitproc+0x98>
 8024318:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802431c:	b988      	cbnz	r0, 8024342 <__register_exitproc+0x6e>
 802431e:	4b1c      	ldr	r3, [pc, #112]	; (8024390 <__register_exitproc+0xbc>)
 8024320:	b923      	cbnz	r3, 802432c <__register_exitproc+0x58>
 8024322:	f8d8 0000 	ldr.w	r0, [r8]
 8024326:	f7ff f973 	bl	8023610 <__retarget_lock_release>
 802432a:	e7f0      	b.n	802430e <__register_exitproc+0x3a>
 802432c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8024330:	f7ff f970 	bl	8023614 <malloc>
 8024334:	2800      	cmp	r0, #0
 8024336:	d0f4      	beq.n	8024322 <__register_exitproc+0x4e>
 8024338:	2300      	movs	r3, #0
 802433a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802433e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8024342:	6863      	ldr	r3, [r4, #4]
 8024344:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8024348:	2201      	movs	r2, #1
 802434a:	409a      	lsls	r2, r3
 802434c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8024350:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8024354:	4313      	orrs	r3, r2
 8024356:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802435a:	2e02      	cmp	r6, #2
 802435c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8024360:	bf02      	ittt	eq
 8024362:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8024366:	4313      	orreq	r3, r2
 8024368:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802436c:	6863      	ldr	r3, [r4, #4]
 802436e:	f8d8 0000 	ldr.w	r0, [r8]
 8024372:	1c5a      	adds	r2, r3, #1
 8024374:	3302      	adds	r3, #2
 8024376:	6062      	str	r2, [r4, #4]
 8024378:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802437c:	f7ff f949 	bl	8023612 <__retarget_lock_release_recursive>
 8024380:	2000      	movs	r0, #0
 8024382:	e7c6      	b.n	8024312 <__register_exitproc+0x3e>
 8024384:	24010194 	.word	0x24010194
 8024388:	24010108 	.word	0x24010108
 802438c:	080274dc 	.word	0x080274dc
 8024390:	08023615 	.word	0x08023615
 8024394:	24000140 	.word	0x24000140

08024398 <_close_r>:
 8024398:	b538      	push	{r3, r4, r5, lr}
 802439a:	4d06      	ldr	r5, [pc, #24]	; (80243b4 <_close_r+0x1c>)
 802439c:	2300      	movs	r3, #0
 802439e:	4604      	mov	r4, r0
 80243a0:	4608      	mov	r0, r1
 80243a2:	602b      	str	r3, [r5, #0]
 80243a4:	f7df f80a 	bl	80033bc <_close>
 80243a8:	1c43      	adds	r3, r0, #1
 80243aa:	d102      	bne.n	80243b2 <_close_r+0x1a>
 80243ac:	682b      	ldr	r3, [r5, #0]
 80243ae:	b103      	cbz	r3, 80243b2 <_close_r+0x1a>
 80243b0:	6023      	str	r3, [r4, #0]
 80243b2:	bd38      	pop	{r3, r4, r5, pc}
 80243b4:	24010104 	.word	0x24010104

080243b8 <__sflush_r>:
 80243b8:	898a      	ldrh	r2, [r1, #12]
 80243ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80243be:	4605      	mov	r5, r0
 80243c0:	0710      	lsls	r0, r2, #28
 80243c2:	460c      	mov	r4, r1
 80243c4:	d458      	bmi.n	8024478 <__sflush_r+0xc0>
 80243c6:	684b      	ldr	r3, [r1, #4]
 80243c8:	2b00      	cmp	r3, #0
 80243ca:	dc05      	bgt.n	80243d8 <__sflush_r+0x20>
 80243cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80243ce:	2b00      	cmp	r3, #0
 80243d0:	dc02      	bgt.n	80243d8 <__sflush_r+0x20>
 80243d2:	2000      	movs	r0, #0
 80243d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80243d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80243da:	2e00      	cmp	r6, #0
 80243dc:	d0f9      	beq.n	80243d2 <__sflush_r+0x1a>
 80243de:	2300      	movs	r3, #0
 80243e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80243e4:	682f      	ldr	r7, [r5, #0]
 80243e6:	602b      	str	r3, [r5, #0]
 80243e8:	d032      	beq.n	8024450 <__sflush_r+0x98>
 80243ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80243ec:	89a3      	ldrh	r3, [r4, #12]
 80243ee:	075a      	lsls	r2, r3, #29
 80243f0:	d505      	bpl.n	80243fe <__sflush_r+0x46>
 80243f2:	6863      	ldr	r3, [r4, #4]
 80243f4:	1ac0      	subs	r0, r0, r3
 80243f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80243f8:	b10b      	cbz	r3, 80243fe <__sflush_r+0x46>
 80243fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80243fc:	1ac0      	subs	r0, r0, r3
 80243fe:	2300      	movs	r3, #0
 8024400:	4602      	mov	r2, r0
 8024402:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024404:	6a21      	ldr	r1, [r4, #32]
 8024406:	4628      	mov	r0, r5
 8024408:	47b0      	blx	r6
 802440a:	1c43      	adds	r3, r0, #1
 802440c:	89a3      	ldrh	r3, [r4, #12]
 802440e:	d106      	bne.n	802441e <__sflush_r+0x66>
 8024410:	6829      	ldr	r1, [r5, #0]
 8024412:	291d      	cmp	r1, #29
 8024414:	d82c      	bhi.n	8024470 <__sflush_r+0xb8>
 8024416:	4a2a      	ldr	r2, [pc, #168]	; (80244c0 <__sflush_r+0x108>)
 8024418:	40ca      	lsrs	r2, r1
 802441a:	07d6      	lsls	r6, r2, #31
 802441c:	d528      	bpl.n	8024470 <__sflush_r+0xb8>
 802441e:	2200      	movs	r2, #0
 8024420:	6062      	str	r2, [r4, #4]
 8024422:	04d9      	lsls	r1, r3, #19
 8024424:	6922      	ldr	r2, [r4, #16]
 8024426:	6022      	str	r2, [r4, #0]
 8024428:	d504      	bpl.n	8024434 <__sflush_r+0x7c>
 802442a:	1c42      	adds	r2, r0, #1
 802442c:	d101      	bne.n	8024432 <__sflush_r+0x7a>
 802442e:	682b      	ldr	r3, [r5, #0]
 8024430:	b903      	cbnz	r3, 8024434 <__sflush_r+0x7c>
 8024432:	6560      	str	r0, [r4, #84]	; 0x54
 8024434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024436:	602f      	str	r7, [r5, #0]
 8024438:	2900      	cmp	r1, #0
 802443a:	d0ca      	beq.n	80243d2 <__sflush_r+0x1a>
 802443c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024440:	4299      	cmp	r1, r3
 8024442:	d002      	beq.n	802444a <__sflush_r+0x92>
 8024444:	4628      	mov	r0, r5
 8024446:	f7ff f91b 	bl	8023680 <_free_r>
 802444a:	2000      	movs	r0, #0
 802444c:	6360      	str	r0, [r4, #52]	; 0x34
 802444e:	e7c1      	b.n	80243d4 <__sflush_r+0x1c>
 8024450:	6a21      	ldr	r1, [r4, #32]
 8024452:	2301      	movs	r3, #1
 8024454:	4628      	mov	r0, r5
 8024456:	47b0      	blx	r6
 8024458:	1c41      	adds	r1, r0, #1
 802445a:	d1c7      	bne.n	80243ec <__sflush_r+0x34>
 802445c:	682b      	ldr	r3, [r5, #0]
 802445e:	2b00      	cmp	r3, #0
 8024460:	d0c4      	beq.n	80243ec <__sflush_r+0x34>
 8024462:	2b1d      	cmp	r3, #29
 8024464:	d001      	beq.n	802446a <__sflush_r+0xb2>
 8024466:	2b16      	cmp	r3, #22
 8024468:	d101      	bne.n	802446e <__sflush_r+0xb6>
 802446a:	602f      	str	r7, [r5, #0]
 802446c:	e7b1      	b.n	80243d2 <__sflush_r+0x1a>
 802446e:	89a3      	ldrh	r3, [r4, #12]
 8024470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024474:	81a3      	strh	r3, [r4, #12]
 8024476:	e7ad      	b.n	80243d4 <__sflush_r+0x1c>
 8024478:	690f      	ldr	r7, [r1, #16]
 802447a:	2f00      	cmp	r7, #0
 802447c:	d0a9      	beq.n	80243d2 <__sflush_r+0x1a>
 802447e:	0793      	lsls	r3, r2, #30
 8024480:	680e      	ldr	r6, [r1, #0]
 8024482:	bf08      	it	eq
 8024484:	694b      	ldreq	r3, [r1, #20]
 8024486:	600f      	str	r7, [r1, #0]
 8024488:	bf18      	it	ne
 802448a:	2300      	movne	r3, #0
 802448c:	eba6 0807 	sub.w	r8, r6, r7
 8024490:	608b      	str	r3, [r1, #8]
 8024492:	f1b8 0f00 	cmp.w	r8, #0
 8024496:	dd9c      	ble.n	80243d2 <__sflush_r+0x1a>
 8024498:	6a21      	ldr	r1, [r4, #32]
 802449a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802449c:	4643      	mov	r3, r8
 802449e:	463a      	mov	r2, r7
 80244a0:	4628      	mov	r0, r5
 80244a2:	47b0      	blx	r6
 80244a4:	2800      	cmp	r0, #0
 80244a6:	dc06      	bgt.n	80244b6 <__sflush_r+0xfe>
 80244a8:	89a3      	ldrh	r3, [r4, #12]
 80244aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80244ae:	81a3      	strh	r3, [r4, #12]
 80244b0:	f04f 30ff 	mov.w	r0, #4294967295
 80244b4:	e78e      	b.n	80243d4 <__sflush_r+0x1c>
 80244b6:	4407      	add	r7, r0
 80244b8:	eba8 0800 	sub.w	r8, r8, r0
 80244bc:	e7e9      	b.n	8024492 <__sflush_r+0xda>
 80244be:	bf00      	nop
 80244c0:	20400001 	.word	0x20400001

080244c4 <_fflush_r>:
 80244c4:	b538      	push	{r3, r4, r5, lr}
 80244c6:	690b      	ldr	r3, [r1, #16]
 80244c8:	4605      	mov	r5, r0
 80244ca:	460c      	mov	r4, r1
 80244cc:	b913      	cbnz	r3, 80244d4 <_fflush_r+0x10>
 80244ce:	2500      	movs	r5, #0
 80244d0:	4628      	mov	r0, r5
 80244d2:	bd38      	pop	{r3, r4, r5, pc}
 80244d4:	b118      	cbz	r0, 80244de <_fflush_r+0x1a>
 80244d6:	6983      	ldr	r3, [r0, #24]
 80244d8:	b90b      	cbnz	r3, 80244de <_fflush_r+0x1a>
 80244da:	f7fe ffc3 	bl	8023464 <__sinit>
 80244de:	4b14      	ldr	r3, [pc, #80]	; (8024530 <_fflush_r+0x6c>)
 80244e0:	429c      	cmp	r4, r3
 80244e2:	d11b      	bne.n	802451c <_fflush_r+0x58>
 80244e4:	686c      	ldr	r4, [r5, #4]
 80244e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	d0ef      	beq.n	80244ce <_fflush_r+0xa>
 80244ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80244f0:	07d0      	lsls	r0, r2, #31
 80244f2:	d404      	bmi.n	80244fe <_fflush_r+0x3a>
 80244f4:	0599      	lsls	r1, r3, #22
 80244f6:	d402      	bmi.n	80244fe <_fflush_r+0x3a>
 80244f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80244fa:	f7ff f888 	bl	802360e <__retarget_lock_acquire_recursive>
 80244fe:	4628      	mov	r0, r5
 8024500:	4621      	mov	r1, r4
 8024502:	f7ff ff59 	bl	80243b8 <__sflush_r>
 8024506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024508:	07da      	lsls	r2, r3, #31
 802450a:	4605      	mov	r5, r0
 802450c:	d4e0      	bmi.n	80244d0 <_fflush_r+0xc>
 802450e:	89a3      	ldrh	r3, [r4, #12]
 8024510:	059b      	lsls	r3, r3, #22
 8024512:	d4dd      	bmi.n	80244d0 <_fflush_r+0xc>
 8024514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024516:	f7ff f87c 	bl	8023612 <__retarget_lock_release_recursive>
 802451a:	e7d9      	b.n	80244d0 <_fflush_r+0xc>
 802451c:	4b05      	ldr	r3, [pc, #20]	; (8024534 <_fflush_r+0x70>)
 802451e:	429c      	cmp	r4, r3
 8024520:	d101      	bne.n	8024526 <_fflush_r+0x62>
 8024522:	68ac      	ldr	r4, [r5, #8]
 8024524:	e7df      	b.n	80244e6 <_fflush_r+0x22>
 8024526:	4b04      	ldr	r3, [pc, #16]	; (8024538 <_fflush_r+0x74>)
 8024528:	429c      	cmp	r4, r3
 802452a:	bf08      	it	eq
 802452c:	68ec      	ldreq	r4, [r5, #12]
 802452e:	e7da      	b.n	80244e6 <_fflush_r+0x22>
 8024530:	08027464 	.word	0x08027464
 8024534:	08027484 	.word	0x08027484
 8024538:	08027444 	.word	0x08027444

0802453c <_lseek_r>:
 802453c:	b538      	push	{r3, r4, r5, lr}
 802453e:	4d07      	ldr	r5, [pc, #28]	; (802455c <_lseek_r+0x20>)
 8024540:	4604      	mov	r4, r0
 8024542:	4608      	mov	r0, r1
 8024544:	4611      	mov	r1, r2
 8024546:	2200      	movs	r2, #0
 8024548:	602a      	str	r2, [r5, #0]
 802454a:	461a      	mov	r2, r3
 802454c:	f7de ff40 	bl	80033d0 <_lseek>
 8024550:	1c43      	adds	r3, r0, #1
 8024552:	d102      	bne.n	802455a <_lseek_r+0x1e>
 8024554:	682b      	ldr	r3, [r5, #0]
 8024556:	b103      	cbz	r3, 802455a <_lseek_r+0x1e>
 8024558:	6023      	str	r3, [r4, #0]
 802455a:	bd38      	pop	{r3, r4, r5, pc}
 802455c:	24010104 	.word	0x24010104

08024560 <__swhatbuf_r>:
 8024560:	b570      	push	{r4, r5, r6, lr}
 8024562:	460e      	mov	r6, r1
 8024564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024568:	2900      	cmp	r1, #0
 802456a:	b096      	sub	sp, #88	; 0x58
 802456c:	4614      	mov	r4, r2
 802456e:	461d      	mov	r5, r3
 8024570:	da08      	bge.n	8024584 <__swhatbuf_r+0x24>
 8024572:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024576:	2200      	movs	r2, #0
 8024578:	602a      	str	r2, [r5, #0]
 802457a:	061a      	lsls	r2, r3, #24
 802457c:	d410      	bmi.n	80245a0 <__swhatbuf_r+0x40>
 802457e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024582:	e00e      	b.n	80245a2 <__swhatbuf_r+0x42>
 8024584:	466a      	mov	r2, sp
 8024586:	f000 fa13 	bl	80249b0 <_fstat_r>
 802458a:	2800      	cmp	r0, #0
 802458c:	dbf1      	blt.n	8024572 <__swhatbuf_r+0x12>
 802458e:	9a01      	ldr	r2, [sp, #4]
 8024590:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024594:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024598:	425a      	negs	r2, r3
 802459a:	415a      	adcs	r2, r3
 802459c:	602a      	str	r2, [r5, #0]
 802459e:	e7ee      	b.n	802457e <__swhatbuf_r+0x1e>
 80245a0:	2340      	movs	r3, #64	; 0x40
 80245a2:	2000      	movs	r0, #0
 80245a4:	6023      	str	r3, [r4, #0]
 80245a6:	b016      	add	sp, #88	; 0x58
 80245a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080245ac <__smakebuf_r>:
 80245ac:	898b      	ldrh	r3, [r1, #12]
 80245ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80245b0:	079d      	lsls	r5, r3, #30
 80245b2:	4606      	mov	r6, r0
 80245b4:	460c      	mov	r4, r1
 80245b6:	d507      	bpl.n	80245c8 <__smakebuf_r+0x1c>
 80245b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80245bc:	6023      	str	r3, [r4, #0]
 80245be:	6123      	str	r3, [r4, #16]
 80245c0:	2301      	movs	r3, #1
 80245c2:	6163      	str	r3, [r4, #20]
 80245c4:	b002      	add	sp, #8
 80245c6:	bd70      	pop	{r4, r5, r6, pc}
 80245c8:	ab01      	add	r3, sp, #4
 80245ca:	466a      	mov	r2, sp
 80245cc:	f7ff ffc8 	bl	8024560 <__swhatbuf_r>
 80245d0:	9900      	ldr	r1, [sp, #0]
 80245d2:	4605      	mov	r5, r0
 80245d4:	4630      	mov	r0, r6
 80245d6:	f7ff f8bf 	bl	8023758 <_malloc_r>
 80245da:	b948      	cbnz	r0, 80245f0 <__smakebuf_r+0x44>
 80245dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80245e0:	059a      	lsls	r2, r3, #22
 80245e2:	d4ef      	bmi.n	80245c4 <__smakebuf_r+0x18>
 80245e4:	f023 0303 	bic.w	r3, r3, #3
 80245e8:	f043 0302 	orr.w	r3, r3, #2
 80245ec:	81a3      	strh	r3, [r4, #12]
 80245ee:	e7e3      	b.n	80245b8 <__smakebuf_r+0xc>
 80245f0:	4b0d      	ldr	r3, [pc, #52]	; (8024628 <__smakebuf_r+0x7c>)
 80245f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80245f4:	89a3      	ldrh	r3, [r4, #12]
 80245f6:	6020      	str	r0, [r4, #0]
 80245f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80245fc:	81a3      	strh	r3, [r4, #12]
 80245fe:	9b00      	ldr	r3, [sp, #0]
 8024600:	6163      	str	r3, [r4, #20]
 8024602:	9b01      	ldr	r3, [sp, #4]
 8024604:	6120      	str	r0, [r4, #16]
 8024606:	b15b      	cbz	r3, 8024620 <__smakebuf_r+0x74>
 8024608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802460c:	4630      	mov	r0, r6
 802460e:	f000 f9e1 	bl	80249d4 <_isatty_r>
 8024612:	b128      	cbz	r0, 8024620 <__smakebuf_r+0x74>
 8024614:	89a3      	ldrh	r3, [r4, #12]
 8024616:	f023 0303 	bic.w	r3, r3, #3
 802461a:	f043 0301 	orr.w	r3, r3, #1
 802461e:	81a3      	strh	r3, [r4, #12]
 8024620:	89a0      	ldrh	r0, [r4, #12]
 8024622:	4305      	orrs	r5, r0
 8024624:	81a5      	strh	r5, [r4, #12]
 8024626:	e7cd      	b.n	80245c4 <__smakebuf_r+0x18>
 8024628:	080233fd 	.word	0x080233fd

0802462c <memmove>:
 802462c:	4288      	cmp	r0, r1
 802462e:	b510      	push	{r4, lr}
 8024630:	eb01 0402 	add.w	r4, r1, r2
 8024634:	d902      	bls.n	802463c <memmove+0x10>
 8024636:	4284      	cmp	r4, r0
 8024638:	4623      	mov	r3, r4
 802463a:	d807      	bhi.n	802464c <memmove+0x20>
 802463c:	1e43      	subs	r3, r0, #1
 802463e:	42a1      	cmp	r1, r4
 8024640:	d008      	beq.n	8024654 <memmove+0x28>
 8024642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024646:	f803 2f01 	strb.w	r2, [r3, #1]!
 802464a:	e7f8      	b.n	802463e <memmove+0x12>
 802464c:	4402      	add	r2, r0
 802464e:	4601      	mov	r1, r0
 8024650:	428a      	cmp	r2, r1
 8024652:	d100      	bne.n	8024656 <memmove+0x2a>
 8024654:	bd10      	pop	{r4, pc}
 8024656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802465a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802465e:	e7f7      	b.n	8024650 <memmove+0x24>

08024660 <__malloc_lock>:
 8024660:	4801      	ldr	r0, [pc, #4]	; (8024668 <__malloc_lock+0x8>)
 8024662:	f7fe bfd4 	b.w	802360e <__retarget_lock_acquire_recursive>
 8024666:	bf00      	nop
 8024668:	2400fff1 	.word	0x2400fff1

0802466c <__malloc_unlock>:
 802466c:	4801      	ldr	r0, [pc, #4]	; (8024674 <__malloc_unlock+0x8>)
 802466e:	f7fe bfd0 	b.w	8023612 <__retarget_lock_release_recursive>
 8024672:	bf00      	nop
 8024674:	2400fff1 	.word	0x2400fff1

08024678 <_realloc_r>:
 8024678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802467c:	4680      	mov	r8, r0
 802467e:	4614      	mov	r4, r2
 8024680:	460e      	mov	r6, r1
 8024682:	b921      	cbnz	r1, 802468e <_realloc_r+0x16>
 8024684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024688:	4611      	mov	r1, r2
 802468a:	f7ff b865 	b.w	8023758 <_malloc_r>
 802468e:	b92a      	cbnz	r2, 802469c <_realloc_r+0x24>
 8024690:	f7fe fff6 	bl	8023680 <_free_r>
 8024694:	4625      	mov	r5, r4
 8024696:	4628      	mov	r0, r5
 8024698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802469c:	f000 f9aa 	bl	80249f4 <_malloc_usable_size_r>
 80246a0:	4284      	cmp	r4, r0
 80246a2:	4607      	mov	r7, r0
 80246a4:	d802      	bhi.n	80246ac <_realloc_r+0x34>
 80246a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80246aa:	d812      	bhi.n	80246d2 <_realloc_r+0x5a>
 80246ac:	4621      	mov	r1, r4
 80246ae:	4640      	mov	r0, r8
 80246b0:	f7ff f852 	bl	8023758 <_malloc_r>
 80246b4:	4605      	mov	r5, r0
 80246b6:	2800      	cmp	r0, #0
 80246b8:	d0ed      	beq.n	8024696 <_realloc_r+0x1e>
 80246ba:	42bc      	cmp	r4, r7
 80246bc:	4622      	mov	r2, r4
 80246be:	4631      	mov	r1, r6
 80246c0:	bf28      	it	cs
 80246c2:	463a      	movcs	r2, r7
 80246c4:	f7fe ffc6 	bl	8023654 <memcpy>
 80246c8:	4631      	mov	r1, r6
 80246ca:	4640      	mov	r0, r8
 80246cc:	f7fe ffd8 	bl	8023680 <_free_r>
 80246d0:	e7e1      	b.n	8024696 <_realloc_r+0x1e>
 80246d2:	4635      	mov	r5, r6
 80246d4:	e7df      	b.n	8024696 <_realloc_r+0x1e>

080246d6 <__ssputs_r>:
 80246d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80246da:	688e      	ldr	r6, [r1, #8]
 80246dc:	429e      	cmp	r6, r3
 80246de:	4682      	mov	sl, r0
 80246e0:	460c      	mov	r4, r1
 80246e2:	4690      	mov	r8, r2
 80246e4:	461f      	mov	r7, r3
 80246e6:	d838      	bhi.n	802475a <__ssputs_r+0x84>
 80246e8:	898a      	ldrh	r2, [r1, #12]
 80246ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80246ee:	d032      	beq.n	8024756 <__ssputs_r+0x80>
 80246f0:	6825      	ldr	r5, [r4, #0]
 80246f2:	6909      	ldr	r1, [r1, #16]
 80246f4:	eba5 0901 	sub.w	r9, r5, r1
 80246f8:	6965      	ldr	r5, [r4, #20]
 80246fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80246fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024702:	3301      	adds	r3, #1
 8024704:	444b      	add	r3, r9
 8024706:	106d      	asrs	r5, r5, #1
 8024708:	429d      	cmp	r5, r3
 802470a:	bf38      	it	cc
 802470c:	461d      	movcc	r5, r3
 802470e:	0553      	lsls	r3, r2, #21
 8024710:	d531      	bpl.n	8024776 <__ssputs_r+0xa0>
 8024712:	4629      	mov	r1, r5
 8024714:	f7ff f820 	bl	8023758 <_malloc_r>
 8024718:	4606      	mov	r6, r0
 802471a:	b950      	cbnz	r0, 8024732 <__ssputs_r+0x5c>
 802471c:	230c      	movs	r3, #12
 802471e:	f8ca 3000 	str.w	r3, [sl]
 8024722:	89a3      	ldrh	r3, [r4, #12]
 8024724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024728:	81a3      	strh	r3, [r4, #12]
 802472a:	f04f 30ff 	mov.w	r0, #4294967295
 802472e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024732:	6921      	ldr	r1, [r4, #16]
 8024734:	464a      	mov	r2, r9
 8024736:	f7fe ff8d 	bl	8023654 <memcpy>
 802473a:	89a3      	ldrh	r3, [r4, #12]
 802473c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8024740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024744:	81a3      	strh	r3, [r4, #12]
 8024746:	6126      	str	r6, [r4, #16]
 8024748:	6165      	str	r5, [r4, #20]
 802474a:	444e      	add	r6, r9
 802474c:	eba5 0509 	sub.w	r5, r5, r9
 8024750:	6026      	str	r6, [r4, #0]
 8024752:	60a5      	str	r5, [r4, #8]
 8024754:	463e      	mov	r6, r7
 8024756:	42be      	cmp	r6, r7
 8024758:	d900      	bls.n	802475c <__ssputs_r+0x86>
 802475a:	463e      	mov	r6, r7
 802475c:	6820      	ldr	r0, [r4, #0]
 802475e:	4632      	mov	r2, r6
 8024760:	4641      	mov	r1, r8
 8024762:	f7ff ff63 	bl	802462c <memmove>
 8024766:	68a3      	ldr	r3, [r4, #8]
 8024768:	1b9b      	subs	r3, r3, r6
 802476a:	60a3      	str	r3, [r4, #8]
 802476c:	6823      	ldr	r3, [r4, #0]
 802476e:	4433      	add	r3, r6
 8024770:	6023      	str	r3, [r4, #0]
 8024772:	2000      	movs	r0, #0
 8024774:	e7db      	b.n	802472e <__ssputs_r+0x58>
 8024776:	462a      	mov	r2, r5
 8024778:	f7ff ff7e 	bl	8024678 <_realloc_r>
 802477c:	4606      	mov	r6, r0
 802477e:	2800      	cmp	r0, #0
 8024780:	d1e1      	bne.n	8024746 <__ssputs_r+0x70>
 8024782:	6921      	ldr	r1, [r4, #16]
 8024784:	4650      	mov	r0, sl
 8024786:	f7fe ff7b 	bl	8023680 <_free_r>
 802478a:	e7c7      	b.n	802471c <__ssputs_r+0x46>

0802478c <_svfiprintf_r>:
 802478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024790:	4698      	mov	r8, r3
 8024792:	898b      	ldrh	r3, [r1, #12]
 8024794:	061b      	lsls	r3, r3, #24
 8024796:	b09d      	sub	sp, #116	; 0x74
 8024798:	4607      	mov	r7, r0
 802479a:	460d      	mov	r5, r1
 802479c:	4614      	mov	r4, r2
 802479e:	d50e      	bpl.n	80247be <_svfiprintf_r+0x32>
 80247a0:	690b      	ldr	r3, [r1, #16]
 80247a2:	b963      	cbnz	r3, 80247be <_svfiprintf_r+0x32>
 80247a4:	2140      	movs	r1, #64	; 0x40
 80247a6:	f7fe ffd7 	bl	8023758 <_malloc_r>
 80247aa:	6028      	str	r0, [r5, #0]
 80247ac:	6128      	str	r0, [r5, #16]
 80247ae:	b920      	cbnz	r0, 80247ba <_svfiprintf_r+0x2e>
 80247b0:	230c      	movs	r3, #12
 80247b2:	603b      	str	r3, [r7, #0]
 80247b4:	f04f 30ff 	mov.w	r0, #4294967295
 80247b8:	e0d1      	b.n	802495e <_svfiprintf_r+0x1d2>
 80247ba:	2340      	movs	r3, #64	; 0x40
 80247bc:	616b      	str	r3, [r5, #20]
 80247be:	2300      	movs	r3, #0
 80247c0:	9309      	str	r3, [sp, #36]	; 0x24
 80247c2:	2320      	movs	r3, #32
 80247c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80247c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80247cc:	2330      	movs	r3, #48	; 0x30
 80247ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024978 <_svfiprintf_r+0x1ec>
 80247d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80247d6:	f04f 0901 	mov.w	r9, #1
 80247da:	4623      	mov	r3, r4
 80247dc:	469a      	mov	sl, r3
 80247de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80247e2:	b10a      	cbz	r2, 80247e8 <_svfiprintf_r+0x5c>
 80247e4:	2a25      	cmp	r2, #37	; 0x25
 80247e6:	d1f9      	bne.n	80247dc <_svfiprintf_r+0x50>
 80247e8:	ebba 0b04 	subs.w	fp, sl, r4
 80247ec:	d00b      	beq.n	8024806 <_svfiprintf_r+0x7a>
 80247ee:	465b      	mov	r3, fp
 80247f0:	4622      	mov	r2, r4
 80247f2:	4629      	mov	r1, r5
 80247f4:	4638      	mov	r0, r7
 80247f6:	f7ff ff6e 	bl	80246d6 <__ssputs_r>
 80247fa:	3001      	adds	r0, #1
 80247fc:	f000 80aa 	beq.w	8024954 <_svfiprintf_r+0x1c8>
 8024800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024802:	445a      	add	r2, fp
 8024804:	9209      	str	r2, [sp, #36]	; 0x24
 8024806:	f89a 3000 	ldrb.w	r3, [sl]
 802480a:	2b00      	cmp	r3, #0
 802480c:	f000 80a2 	beq.w	8024954 <_svfiprintf_r+0x1c8>
 8024810:	2300      	movs	r3, #0
 8024812:	f04f 32ff 	mov.w	r2, #4294967295
 8024816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802481a:	f10a 0a01 	add.w	sl, sl, #1
 802481e:	9304      	str	r3, [sp, #16]
 8024820:	9307      	str	r3, [sp, #28]
 8024822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024826:	931a      	str	r3, [sp, #104]	; 0x68
 8024828:	4654      	mov	r4, sl
 802482a:	2205      	movs	r2, #5
 802482c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024830:	4851      	ldr	r0, [pc, #324]	; (8024978 <_svfiprintf_r+0x1ec>)
 8024832:	f7db fd75 	bl	8000320 <memchr>
 8024836:	9a04      	ldr	r2, [sp, #16]
 8024838:	b9d8      	cbnz	r0, 8024872 <_svfiprintf_r+0xe6>
 802483a:	06d0      	lsls	r0, r2, #27
 802483c:	bf44      	itt	mi
 802483e:	2320      	movmi	r3, #32
 8024840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024844:	0711      	lsls	r1, r2, #28
 8024846:	bf44      	itt	mi
 8024848:	232b      	movmi	r3, #43	; 0x2b
 802484a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802484e:	f89a 3000 	ldrb.w	r3, [sl]
 8024852:	2b2a      	cmp	r3, #42	; 0x2a
 8024854:	d015      	beq.n	8024882 <_svfiprintf_r+0xf6>
 8024856:	9a07      	ldr	r2, [sp, #28]
 8024858:	4654      	mov	r4, sl
 802485a:	2000      	movs	r0, #0
 802485c:	f04f 0c0a 	mov.w	ip, #10
 8024860:	4621      	mov	r1, r4
 8024862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024866:	3b30      	subs	r3, #48	; 0x30
 8024868:	2b09      	cmp	r3, #9
 802486a:	d94e      	bls.n	802490a <_svfiprintf_r+0x17e>
 802486c:	b1b0      	cbz	r0, 802489c <_svfiprintf_r+0x110>
 802486e:	9207      	str	r2, [sp, #28]
 8024870:	e014      	b.n	802489c <_svfiprintf_r+0x110>
 8024872:	eba0 0308 	sub.w	r3, r0, r8
 8024876:	fa09 f303 	lsl.w	r3, r9, r3
 802487a:	4313      	orrs	r3, r2
 802487c:	9304      	str	r3, [sp, #16]
 802487e:	46a2      	mov	sl, r4
 8024880:	e7d2      	b.n	8024828 <_svfiprintf_r+0x9c>
 8024882:	9b03      	ldr	r3, [sp, #12]
 8024884:	1d19      	adds	r1, r3, #4
 8024886:	681b      	ldr	r3, [r3, #0]
 8024888:	9103      	str	r1, [sp, #12]
 802488a:	2b00      	cmp	r3, #0
 802488c:	bfbb      	ittet	lt
 802488e:	425b      	neglt	r3, r3
 8024890:	f042 0202 	orrlt.w	r2, r2, #2
 8024894:	9307      	strge	r3, [sp, #28]
 8024896:	9307      	strlt	r3, [sp, #28]
 8024898:	bfb8      	it	lt
 802489a:	9204      	strlt	r2, [sp, #16]
 802489c:	7823      	ldrb	r3, [r4, #0]
 802489e:	2b2e      	cmp	r3, #46	; 0x2e
 80248a0:	d10c      	bne.n	80248bc <_svfiprintf_r+0x130>
 80248a2:	7863      	ldrb	r3, [r4, #1]
 80248a4:	2b2a      	cmp	r3, #42	; 0x2a
 80248a6:	d135      	bne.n	8024914 <_svfiprintf_r+0x188>
 80248a8:	9b03      	ldr	r3, [sp, #12]
 80248aa:	1d1a      	adds	r2, r3, #4
 80248ac:	681b      	ldr	r3, [r3, #0]
 80248ae:	9203      	str	r2, [sp, #12]
 80248b0:	2b00      	cmp	r3, #0
 80248b2:	bfb8      	it	lt
 80248b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80248b8:	3402      	adds	r4, #2
 80248ba:	9305      	str	r3, [sp, #20]
 80248bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024988 <_svfiprintf_r+0x1fc>
 80248c0:	7821      	ldrb	r1, [r4, #0]
 80248c2:	2203      	movs	r2, #3
 80248c4:	4650      	mov	r0, sl
 80248c6:	f7db fd2b 	bl	8000320 <memchr>
 80248ca:	b140      	cbz	r0, 80248de <_svfiprintf_r+0x152>
 80248cc:	2340      	movs	r3, #64	; 0x40
 80248ce:	eba0 000a 	sub.w	r0, r0, sl
 80248d2:	fa03 f000 	lsl.w	r0, r3, r0
 80248d6:	9b04      	ldr	r3, [sp, #16]
 80248d8:	4303      	orrs	r3, r0
 80248da:	3401      	adds	r4, #1
 80248dc:	9304      	str	r3, [sp, #16]
 80248de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80248e2:	4826      	ldr	r0, [pc, #152]	; (802497c <_svfiprintf_r+0x1f0>)
 80248e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80248e8:	2206      	movs	r2, #6
 80248ea:	f7db fd19 	bl	8000320 <memchr>
 80248ee:	2800      	cmp	r0, #0
 80248f0:	d038      	beq.n	8024964 <_svfiprintf_r+0x1d8>
 80248f2:	4b23      	ldr	r3, [pc, #140]	; (8024980 <_svfiprintf_r+0x1f4>)
 80248f4:	bb1b      	cbnz	r3, 802493e <_svfiprintf_r+0x1b2>
 80248f6:	9b03      	ldr	r3, [sp, #12]
 80248f8:	3307      	adds	r3, #7
 80248fa:	f023 0307 	bic.w	r3, r3, #7
 80248fe:	3308      	adds	r3, #8
 8024900:	9303      	str	r3, [sp, #12]
 8024902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024904:	4433      	add	r3, r6
 8024906:	9309      	str	r3, [sp, #36]	; 0x24
 8024908:	e767      	b.n	80247da <_svfiprintf_r+0x4e>
 802490a:	fb0c 3202 	mla	r2, ip, r2, r3
 802490e:	460c      	mov	r4, r1
 8024910:	2001      	movs	r0, #1
 8024912:	e7a5      	b.n	8024860 <_svfiprintf_r+0xd4>
 8024914:	2300      	movs	r3, #0
 8024916:	3401      	adds	r4, #1
 8024918:	9305      	str	r3, [sp, #20]
 802491a:	4619      	mov	r1, r3
 802491c:	f04f 0c0a 	mov.w	ip, #10
 8024920:	4620      	mov	r0, r4
 8024922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024926:	3a30      	subs	r2, #48	; 0x30
 8024928:	2a09      	cmp	r2, #9
 802492a:	d903      	bls.n	8024934 <_svfiprintf_r+0x1a8>
 802492c:	2b00      	cmp	r3, #0
 802492e:	d0c5      	beq.n	80248bc <_svfiprintf_r+0x130>
 8024930:	9105      	str	r1, [sp, #20]
 8024932:	e7c3      	b.n	80248bc <_svfiprintf_r+0x130>
 8024934:	fb0c 2101 	mla	r1, ip, r1, r2
 8024938:	4604      	mov	r4, r0
 802493a:	2301      	movs	r3, #1
 802493c:	e7f0      	b.n	8024920 <_svfiprintf_r+0x194>
 802493e:	ab03      	add	r3, sp, #12
 8024940:	9300      	str	r3, [sp, #0]
 8024942:	462a      	mov	r2, r5
 8024944:	4b0f      	ldr	r3, [pc, #60]	; (8024984 <_svfiprintf_r+0x1f8>)
 8024946:	a904      	add	r1, sp, #16
 8024948:	4638      	mov	r0, r7
 802494a:	f3af 8000 	nop.w
 802494e:	1c42      	adds	r2, r0, #1
 8024950:	4606      	mov	r6, r0
 8024952:	d1d6      	bne.n	8024902 <_svfiprintf_r+0x176>
 8024954:	89ab      	ldrh	r3, [r5, #12]
 8024956:	065b      	lsls	r3, r3, #25
 8024958:	f53f af2c 	bmi.w	80247b4 <_svfiprintf_r+0x28>
 802495c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802495e:	b01d      	add	sp, #116	; 0x74
 8024960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024964:	ab03      	add	r3, sp, #12
 8024966:	9300      	str	r3, [sp, #0]
 8024968:	462a      	mov	r2, r5
 802496a:	4b06      	ldr	r3, [pc, #24]	; (8024984 <_svfiprintf_r+0x1f8>)
 802496c:	a904      	add	r1, sp, #16
 802496e:	4638      	mov	r0, r7
 8024970:	f7ff f92e 	bl	8023bd0 <_printf_i>
 8024974:	e7eb      	b.n	802494e <_svfiprintf_r+0x1c2>
 8024976:	bf00      	nop
 8024978:	080274a8 	.word	0x080274a8
 802497c:	080274b2 	.word	0x080274b2
 8024980:	00000000 	.word	0x00000000
 8024984:	080246d7 	.word	0x080246d7
 8024988:	080274ae 	.word	0x080274ae

0802498c <_read_r>:
 802498c:	b538      	push	{r3, r4, r5, lr}
 802498e:	4d07      	ldr	r5, [pc, #28]	; (80249ac <_read_r+0x20>)
 8024990:	4604      	mov	r4, r0
 8024992:	4608      	mov	r0, r1
 8024994:	4611      	mov	r1, r2
 8024996:	2200      	movs	r2, #0
 8024998:	602a      	str	r2, [r5, #0]
 802499a:	461a      	mov	r2, r3
 802499c:	f7de fcf0 	bl	8003380 <_read>
 80249a0:	1c43      	adds	r3, r0, #1
 80249a2:	d102      	bne.n	80249aa <_read_r+0x1e>
 80249a4:	682b      	ldr	r3, [r5, #0]
 80249a6:	b103      	cbz	r3, 80249aa <_read_r+0x1e>
 80249a8:	6023      	str	r3, [r4, #0]
 80249aa:	bd38      	pop	{r3, r4, r5, pc}
 80249ac:	24010104 	.word	0x24010104

080249b0 <_fstat_r>:
 80249b0:	b538      	push	{r3, r4, r5, lr}
 80249b2:	4d07      	ldr	r5, [pc, #28]	; (80249d0 <_fstat_r+0x20>)
 80249b4:	2300      	movs	r3, #0
 80249b6:	4604      	mov	r4, r0
 80249b8:	4608      	mov	r0, r1
 80249ba:	4611      	mov	r1, r2
 80249bc:	602b      	str	r3, [r5, #0]
 80249be:	f7de fd00 	bl	80033c2 <_fstat>
 80249c2:	1c43      	adds	r3, r0, #1
 80249c4:	d102      	bne.n	80249cc <_fstat_r+0x1c>
 80249c6:	682b      	ldr	r3, [r5, #0]
 80249c8:	b103      	cbz	r3, 80249cc <_fstat_r+0x1c>
 80249ca:	6023      	str	r3, [r4, #0]
 80249cc:	bd38      	pop	{r3, r4, r5, pc}
 80249ce:	bf00      	nop
 80249d0:	24010104 	.word	0x24010104

080249d4 <_isatty_r>:
 80249d4:	b538      	push	{r3, r4, r5, lr}
 80249d6:	4d06      	ldr	r5, [pc, #24]	; (80249f0 <_isatty_r+0x1c>)
 80249d8:	2300      	movs	r3, #0
 80249da:	4604      	mov	r4, r0
 80249dc:	4608      	mov	r0, r1
 80249de:	602b      	str	r3, [r5, #0]
 80249e0:	f7de fcf4 	bl	80033cc <_isatty>
 80249e4:	1c43      	adds	r3, r0, #1
 80249e6:	d102      	bne.n	80249ee <_isatty_r+0x1a>
 80249e8:	682b      	ldr	r3, [r5, #0]
 80249ea:	b103      	cbz	r3, 80249ee <_isatty_r+0x1a>
 80249ec:	6023      	str	r3, [r4, #0]
 80249ee:	bd38      	pop	{r3, r4, r5, pc}
 80249f0:	24010104 	.word	0x24010104

080249f4 <_malloc_usable_size_r>:
 80249f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80249f8:	1f18      	subs	r0, r3, #4
 80249fa:	2b00      	cmp	r3, #0
 80249fc:	bfbc      	itt	lt
 80249fe:	580b      	ldrlt	r3, [r1, r0]
 8024a00:	18c0      	addlt	r0, r0, r3
 8024a02:	4770      	bx	lr

08024a04 <_init>:
 8024a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a06:	bf00      	nop
 8024a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024a0a:	bc08      	pop	{r3}
 8024a0c:	469e      	mov	lr, r3
 8024a0e:	4770      	bx	lr

08024a10 <_fini>:
 8024a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a12:	bf00      	nop
 8024a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024a16:	bc08      	pop	{r3}
 8024a18:	469e      	mov	lr, r3
 8024a1a:	4770      	bx	lr
