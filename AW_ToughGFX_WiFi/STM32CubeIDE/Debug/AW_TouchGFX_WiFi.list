
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000246bc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a38  0802496c  0802496c  0003496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000078c  080273a4  080273a4  000373a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08027b30  08027b30  0018d0c8  2**0
                  CONTENTS
  5 .ARM          00000000  08027b30  08027b30  0018d0c8  2**0
                  CONTENTS
  6 .preinit_array 00000000  08027b30  08027b30  0018d0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000028  08027b30  08027b30  00037b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000001c  08027b58  08027b58  00037b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000144  24000000  08027b74  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00010024  24000144  08027cb8  00040144  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  24010168  08027cb8  00040168  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0018d0c8  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  ALLOC
 14 FontFlashSection 0000bf60  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000088  9000bf60  9000bf60  0005bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 001310e0  9000bfe8  9000bfe8  0005bfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   000706e9  00000000  00000000  0018d0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000fd7ca  00000000  00000000  001fd7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000198be  00000000  00000000  002fafa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00004418  00000000  00000000  00314868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017e430  00000000  00000000  00318c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000045c0  00000000  00000000  004970b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00043b04  00000000  00000000  0049b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00044255  00000000  00000000  004df174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  005233c9  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000c4ac  00000000  00000000  00523498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000144 	.word	0x24000144
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08024954 	.word	0x08024954

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000148 	.word	0x24000148
 80002ec:	08024954 	.word	0x08024954

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003c6:	e003      	b.n	80003d0 <LoopCopyDataInit>

080003c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ce:	3104      	adds	r1, #4

080003d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003d8:	d3f6      	bcc.n	80003c8 <CopyDataInit>
  ldr  r2, =_sbss
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003dc:	e002      	b.n	80003e4 <LoopFillZerobss>

080003de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003e0:	f842 3b04 	str.w	r3, [r2], #4

080003e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003e8:	d3f9      	bcc.n	80003de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ea:	f00a f8ad 	bl	800a548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f023 f891 	bl	8023514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f2:	f002 f927 	bl	8002644 <main>
  bx  lr
 80003f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003f8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003fc:	08027b74 	.word	0x08027b74
  ldr  r0, =_sdata
 8000400:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000404:	24000144 	.word	0x24000144
  ldr  r2, =_sbss
 8000408:	24000144 	.word	0x24000144
  ldr  r3, = _ebss
 800040c:	24010168 	.word	0x24010168

08000410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>

08000412 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8000412:	4770      	bx	lr

08000414 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8000414:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8000416:	f000 ff7b 	bl	8001310 <touchgfx_init>
}
 800041a:	bd08      	pop	{r3, pc}

0800041c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800041c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800041e:	f000 fff3 	bl	8001408 <touchgfx_taskEntry>
}
 8000422:	bd08      	pop	{r3, pc}

08000424 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000424:	4a02      	ldr	r2, [pc, #8]	; (8000430 <_ZN20STM32TouchControllerD1Ev+0xc>)
 8000426:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 8000428:	4a02      	ldr	r2, [pc, #8]	; (8000434 <_ZN20STM32TouchControllerD1Ev+0x10>)
 800042a:	6002      	str	r2, [r0, #0]
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	080249cc 	.word	0x080249cc
 8000434:	080249b4 	.word	0x080249b4

08000438 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000438:	b500      	push	{lr}
 800043a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800043c:	2308      	movs	r3, #8
 800043e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000440:	2000      	movs	r0, #0
 8000442:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <_ZN20STM32TouchController4initEv+0x24>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <_ZN20STM32TouchController4initEv+0x28>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000450:	4669      	mov	r1, sp
 8000452:	f009 ff85 	bl	800a360 <BSP_TS_Init>
}
 8000456:	b005      	add	sp, #20
 8000458:	f85d fb04 	ldr.w	pc, [sp], #4
 800045c:	2400fede 	.word	0x2400fede
 8000460:	2400fee0 	.word	0x2400fee0

08000464 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	b085      	sub	sp, #20
 8000468:	460d      	mov	r5, r1
 800046a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800046c:	2000      	movs	r0, #0
 800046e:	9001      	str	r0, [sp, #4]
 8000470:	9002      	str	r0, [sp, #8]
 8000472:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000474:	a901      	add	r1, sp, #4
 8000476:	f009 ffe3 	bl	800a440 <BSP_TS_GetState>
 800047a:	b140      	cbz	r0, 800048e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000480:	f383 8811 	msr	BASEPRI, r3
 8000484:	f3bf 8f6f 	isb	sy
 8000488:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800048c:	e7fe      	b.n	800048c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800048e:	9b01      	ldr	r3, [sp, #4]
 8000490:	b913      	cbnz	r3, 8000498 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000492:	2000      	movs	r0, #0
}
 8000494:	b005      	add	sp, #20
 8000496:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000498:	9b02      	ldr	r3, [sp, #8]
 800049a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800049c:	9b03      	ldr	r3, [sp, #12]
 800049e:	6023      	str	r3, [r4, #0]
        return true;
 80004a0:	2001      	movs	r0, #1
 80004a2:	e7f7      	b.n	8000494 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

080004a4 <_ZN20STM32TouchControllerD0Ev>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	4604      	mov	r4, r0
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <_ZN20STM32TouchControllerD0Ev+0x18>)
 80004aa:	6003      	str	r3, [r0, #0]
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 80004ae:	6003      	str	r3, [r0, #0]
 80004b0:	2104      	movs	r1, #4
 80004b2:	f022 fec0 	bl	8023236 <_ZdlPvj>
 80004b6:	4620      	mov	r0, r4
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop
 80004bc:	080249cc 	.word	0x080249cc
 80004c0:	080249b4 	.word	0x080249b4

080004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80004c4:	b508      	push	{r3, lr}
    switch (id)
 80004c6:	2803      	cmp	r0, #3
 80004c8:	d80e      	bhi.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 80004ca:	e8df f000 	tbb	[pc, r0]
 80004ce:	0e02      	.short	0x0e02
 80004d0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004d8:	fab2 f282 	clz	r2, r2
 80004dc:	0952      	lsrs	r2, r2, #5
 80004de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e2:	4815      	ldr	r0, [pc, #84]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004e4:	f00a fe4b 	bl	800b17e <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004e8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004ec:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	0952      	lsrs	r2, r2, #5
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004fc:	f00a fe3f 	bl	800b17e <HAL_GPIO_WritePin>
        break;
 8000500:	e7f2      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 8000504:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000508:	fab2 f282 	clz	r2, r2
 800050c:	0952      	lsrs	r2, r2, #5
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 8000514:	f00a fe33 	bl	800b17e <HAL_GPIO_WritePin>
        break;
 8000518:	e7e6      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 800051c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000520:	fab2 f282 	clz	r2, r2
 8000524:	0952      	lsrs	r2, r2, #5
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 800052c:	f00a fe27 	bl	800b17e <HAL_GPIO_WritePin>
}
 8000530:	e7da      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000532:	bf00      	nop
 8000534:	24000160 	.word	0x24000160
 8000538:	58021c00 	.word	0x58021c00
 800053c:	58022000 	.word	0x58022000

08000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000540:	b508      	push	{r3, lr}
    switch (id)
 8000542:	2803      	cmp	r0, #3
 8000544:	d80e      	bhi.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000546:	e8df f000 	tbb	[pc, r0]
 800054a:	0e02      	.short	0x0e02
 800054c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000554:	b103      	cbz	r3, 8000558 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000556:	2001      	movs	r0, #1
 8000558:	4602      	mov	r2, r0
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000560:	f00a fe0d 	bl	800b17e <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000564:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000568:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800056c:	b903      	cbnz	r3, 8000570 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800056e:	2000      	movs	r0, #0
 8000570:	4602      	mov	r2, r0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000578:	f00a fe01 	bl	800b17e <HAL_GPIO_WritePin>
        break;
 800057c:	e7f2      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000580:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000584:	b133      	cbz	r3, 8000594 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800058e:	f00a fdf6 	bl	800b17e <HAL_GPIO_WritePin>
        break;
 8000592:	e7e7      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000594:	2200      	movs	r2, #0
 8000596:	e7f7      	b.n	8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800059a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800059e:	b133      	cbz	r3, 80005ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 80005a8:	f00a fde9 	bl	800b17e <HAL_GPIO_WritePin>
}
 80005ac:	e7da      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80005ae:	2200      	movs	r2, #0
 80005b0:	e7f7      	b.n	80005a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 80005b2:	bf00      	nop
 80005b4:	24000160 	.word	0x24000160
 80005b8:	58021c00 	.word	0x58021c00
 80005bc:	58022000 	.word	0x58022000

080005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80005c0:	b508      	push	{r3, lr}
    switch (id)
 80005c2:	2803      	cmp	r0, #3
 80005c4:	d808      	bhi.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005c6:	e8df f000 	tbb	[pc, r0]
 80005ca:	0802      	.short	0x0802
 80005cc:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005d4:	f00a fdd9 	bl	800b18a <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005d8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005e0:	f00a fdd3 	bl	800b18a <HAL_GPIO_TogglePin>
        break;
 80005e4:	e7f8      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005ec:	f00a fdcd 	bl	800b18a <HAL_GPIO_TogglePin>
        break;
 80005f0:	e7f2      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005f8:	f00a fdc7 	bl	800b18a <HAL_GPIO_TogglePin>
}
 80005fc:	e7ec      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005fe:	bf00      	nop
 8000600:	58021c00 	.word	0x58021c00
 8000604:	58022000 	.word	0x58022000

08000608 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 8000608:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800060c:	2301      	movs	r3, #1
 800060e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000612:	4770      	bx	lr

08000614 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000614:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8000616:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800061a:	b123      	cbz	r3, 8000626 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 800061c:	6840      	ldr	r0, [r0, #4]
 800061e:	6803      	ldr	r3, [r0, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 8000624:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 8000626:	2000      	movs	r0, #0
 8000628:	e7fc      	b.n	8000624 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

0800062a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800062a:	2000      	movs	r0, #0
 800062c:	4770      	bx	lr
	...

08000630 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000630:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000632:	3900      	subs	r1, #0
 8000634:	bf18      	it	ne
 8000636:	2101      	movne	r1, #1
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800063a:	7019      	strb	r1, [r3, #0]
    }
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2400fee3 	.word	0x2400fee3

08000644 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000644:	2000      	movs	r0, #0
 8000646:	4770      	bx	lr

08000648 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000648:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800064a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800064c:	b10b      	cbz	r3, 8000652 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800064e:	4608      	mov	r0, r1
 8000650:	4798      	blx	r3
        }
    }
 8000652:	bd08      	pop	{r3, pc}

08000654 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000654:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000658:	4770      	bx	lr

0800065a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800065a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800065c:	6840      	ldr	r0, [r0, #4]
 800065e:	6803      	ldr	r3, [r0, #0]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4798      	blx	r3
    }
 8000664:	bd08      	pop	{r3, pc}
	...

08000668 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000668:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800066c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000670:	429a      	cmp	r2, r3
 8000672:	d00c      	beq.n	800068e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b9ab      	cbnz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800067c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000680:	8818      	ldrh	r0, [r3, #0]
 8000682:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000684:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b143      	cbz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000696:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800069a:	8818      	ldrh	r0, [r3, #0]
 800069c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800069e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
        }
    }
 80006a6:	4770      	bx	lr
 80006a8:	2400fedc 	.word	0x2400fedc
 80006ac:	2400feda 	.word	0x2400feda
 80006b0:	2400fed8 	.word	0x2400fed8

080006b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <_ZN11TouchGFXHALD1Ev+0x10>)
 80006b6:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <_ZN11TouchGFXHALD1Ev+0x14>)
 80006ba:	6002      	str	r2, [r0, #0]
    {
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <_ZN11TouchGFXHALD1Ev+0x18>)
 80006be:	6002      	str	r2, [r0, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	08024b5c 	.word	0x08024b5c
 80006c8:	0802516c 	.word	0x0802516c
 80006cc:	08026b08 	.word	0x08026b08

080006d0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006d0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006d2:	f001 fc65 	bl	8001fa0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006d6:	bd08      	pop	{r3, pc}

080006d8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006d8:	b508      	push	{r3, lr}
 80006da:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006dc:	6803      	ldr	r3, [r0, #0]
 80006de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006e2:	4798      	blx	r3
    enableInterrupts();
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006e8:	4620      	mov	r0, r4
 80006ea:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006ec:	f000 f920 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f4:	4620      	mov	r0, r4
 80006f6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006fe:	f00a fd3e 	bl	800b17e <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000702:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <_ZN11TouchGFXHAL9taskEntryEv+0x58>)
 8000704:	2201      	movs	r2, #1
 8000706:	2104      	movs	r1, #4
 8000708:	4628      	mov	r0, r5
 800070a:	f00a fd38 	bl	800b17e <HAL_GPIO_WritePin>

    /* Wait to avoid seeing garbage on start up */
    HAL_Delay(200);
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f009 ff98 	bl	800a644 <HAL_Delay>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2102      	movs	r1, #2
 8000718:	4628      	mov	r0, r5
 800071a:	f00a fd30 	bl	800b17e <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800071e:	f000 f907 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000726:	4620      	mov	r0, r4
 8000728:	4798      	blx	r3
    for (;;)
 800072a:	e7f8      	b.n	800071e <_ZN11TouchGFXHAL9taskEntryEv+0x46>
 800072c:	58022800 	.word	0x58022800
 8000730:	58020000 	.word	0x58020000

08000734 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000734:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000736:	f001 f98d 	bl	8001a54 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 800073a:	bd08      	pop	{r3, pc}

0800073c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800073c:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800073e:	f001 f98f 	bl	8001a60 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000742:	bd08      	pop	{r3, pc}

08000744 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000744:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000746:	f001 fc53 	bl	8001ff0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000756:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800075a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800075e:	e000      	b.n	8000762 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000760:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000762:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000766:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800076a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800076e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000774:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000778:	4613      	mov	r3, r2
 800077a:	3a01      	subs	r2, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f2      	bne.n	8000766 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8000780:	1e43      	subs	r3, r0, #1
 8000782:	2800      	cmp	r0, #0
 8000784:	d1ec      	bne.n	8000760 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800078a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000794:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000796:	f001 f91b 	bl	80019d0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800079a:	bd08      	pop	{r3, pc}

0800079c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800079c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800079e:	f001 f921 	bl	80019e4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80007a2:	bd08      	pop	{r3, pc}

080007a4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80007a4:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80007a6:	f001 f927 	bl	80019f8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80007aa:	bd08      	pop	{r3, pc}

080007ac <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80007ac:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80007ae:	f001 f937 	bl	8001a20 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80007b2:	bd08      	pop	{r3, pc}

080007b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80007b4:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007b6:	b161      	cbz	r1, 80007d2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80007b8:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80007ba:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80007bc:	3a00      	subs	r2, #0
 80007be:	bf18      	it	ne
 80007c0:	2201      	movne	r2, #1
 80007c2:	4907      	ldr	r1, [pc, #28]	; (80007e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 80007c4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80007c6:	6802      	ldr	r2, [r0, #0]
 80007c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80007cc:	4619      	mov	r1, r3
 80007ce:	4790      	blx	r2
    }
 80007d0:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007d6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007dc:	f022 fd5a 	bl	8023294 <__assert_func>
 80007e0:	2400fee2 	.word	0x2400fee2
 80007e4:	080249dc 	.word	0x080249dc
 80007e8:	08024a14 	.word	0x08024a14
 80007ec:	08024a64 	.word	0x08024a64

080007f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007f0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d808      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	4293      	cmp	r3, r2
 8000800:	d804      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000804:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000808:	801a      	strh	r2, [r3, #0]
    }
 800080a:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000810:	219e      	movs	r1, #158	; 0x9e
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000814:	f022 fd3e 	bl	8023294 <__assert_func>
 8000818:	2400fed8 	.word	0x2400fed8
 800081c:	2400feda 	.word	0x2400feda
 8000820:	2400fede 	.word	0x2400fede
 8000824:	2400fee0 	.word	0x2400fee0
 8000828:	08024aac 	.word	0x08024aac
 800082c:	08024b10 	.word	0x08024b10
 8000830:	08024a64 	.word	0x08024a64

08000834 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000838:	f014 fc68 	bl	801510c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000842:	4620      	mov	r0, r4
 8000844:	4798      	blx	r3
    }
 8000846:	bd10      	pop	{r4, pc}

08000848 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000848:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800084a:	f013 feb8 	bl	80145be <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800084e:	bd08      	pop	{r3, pc}

08000850 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000850:	b510      	push	{r4, lr}
 8000852:	4604      	mov	r4, r0
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000856:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <_ZN11TouchGFXHALD0Ev+0x20>)
 800085a:	6003      	str	r3, [r0, #0]
    {
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <_ZN11TouchGFXHALD0Ev+0x24>)
 800085e:	6003      	str	r3, [r0, #0]
 8000860:	217c      	movs	r1, #124	; 0x7c
 8000862:	f022 fce8 	bl	8023236 <_ZdlPvj>
 8000866:	4620      	mov	r0, r4
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	08024b5c 	.word	0x08024b5c
 8000870:	0802516c 	.word	0x0802516c
 8000874:	08026b08 	.word	0x08026b08

08000878 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000878:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800087a:	2200      	movs	r2, #0
 800087c:	2101      	movs	r1, #1
 800087e:	4608      	mov	r0, r1
 8000880:	f00e fdf2 	bl	800f468 <osSemaphoreNew>
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000886:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000888:	b140      	cbz	r0, 800089c <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	2001      	movs	r0, #1
 8000890:	f00e fea9 	bl	800f5e6 <osMessageQueueNew>
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000896:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000898:	b130      	cbz	r0, 80008a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800089a:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008a0:	2128      	movs	r1, #40	; 0x28
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008a4:	f022 fcf6 	bl	8023294 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008ac:	212c      	movs	r1, #44	; 0x2c
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008b0:	f022 fcf0 	bl	8023294 <__assert_func>
 80008b4:	24000174 	.word	0x24000174
 80008b8:	24000170 	.word	0x24000170
 80008bc:	08024c2c 	.word	0x08024c2c
 80008c0:	08024c78 	.word	0x08024c78
 80008c4:	08024ca8 	.word	0x08024ca8
 80008c8:	08024d08 	.word	0x08024d08

080008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80008cc:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80008ce:	f04f 31ff 	mov.w	r1, #4294967295
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f00e fe23 	bl	800f520 <osSemaphoreAcquire>
}
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	24000174 	.word	0x24000174

080008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008e0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008e2:	4b02      	ldr	r3, [pc, #8]	; (80008ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f00e fe4f 	bl	800f588 <osSemaphoreRelease>
}
 80008ea:	bd08      	pop	{r3, pc}
 80008ec:	24000174 	.word	0x24000174

080008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008f0:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	f00e fe12 	bl	800f520 <osSemaphoreAcquire>
}
 80008fc:	bd08      	pop	{r3, pc}
 80008fe:	bf00      	nop
 8000900:	24000174 	.word	0x24000174

08000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8000904:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 8000906:	4b02      	ldr	r3, [pc, #8]	; (8000910 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f00e fe3d 	bl	800f588 <osSemaphoreRelease>
}
 800090e:	bd08      	pop	{r3, pc}
 8000910:	24000174 	.word	0x24000174

08000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000914:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000916:	2300      	movs	r3, #0
 8000918:	461a      	mov	r2, r3
 800091a:	4903      	ldr	r1, [pc, #12]	; (8000928 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800091e:	6800      	ldr	r0, [r0, #0]
 8000920:	f00e fead 	bl	800f67e <osMessageQueuePut>
}
 8000924:	bd08      	pop	{r3, pc}
 8000926:	bf00      	nop
 8000928:	24000004 	.word	0x24000004
 800092c:	24000170 	.word	0x24000170

08000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000930:	b510      	push	{r4, lr}
 8000932:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000934:	4c07      	ldr	r4, [pc, #28]	; (8000954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000936:	2300      	movs	r3, #0
 8000938:	461a      	mov	r2, r3
 800093a:	a901      	add	r1, sp, #4
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	f00e fede 	bl	800f6fe <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2200      	movs	r2, #0
 8000948:	a901      	add	r1, sp, #4
 800094a:	6820      	ldr	r0, [r4, #0]
 800094c:	f00e fed7 	bl	800f6fe <osMessageQueueGet>
}
 8000950:	b002      	add	sp, #8
 8000952:	bd10      	pop	{r4, pc}
 8000954:	24000170 	.word	0x24000170

08000958 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000958:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 800095a:	6803      	ldr	r3, [r0, #0]
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4798      	blx	r3
    }
 8000960:	bd08      	pop	{r3, pc}

08000962 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000962:	2001      	movs	r0, #1
 8000964:	4770      	bx	lr

08000966 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000966:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	4798      	blx	r3
    }
 800096e:	bd08      	pop	{r3, pc}

08000970 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8000970:	b508      	push	{r3, lr}
        return instance;
 8000972:	4b03      	ldr	r3, [pc, #12]	; (8000980 <DMA2D_XferCpltCallback+0x10>)
 8000974:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000976:	6858      	ldr	r0, [r3, #4]
 8000978:	6803      	ldr	r3, [r0, #0]
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800097e:	bd08      	pop	{r3, pc}
 8000980:	2400fee4 	.word	0x2400fee4

08000984 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <_ZN8STM32DMAD1Ev+0x24>)
 8000986:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_ZN8STM32DMAD1Ev+0x28>)
 800098a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800098e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000996:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_ZN8STM32DMAD1Ev+0x2c>)
 800099c:	60c2      	str	r2, [r0, #12]
    {
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_ZN8STM32DMAD1Ev+0x30>)
 80009a0:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_ZN8STM32DMAD1Ev+0x34>)
 80009a4:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 80009a6:	4770      	bx	lr
 80009a8:	08024ee8 	.word	0x08024ee8
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	08026c30 	.word	0x08026c30
 80009b4:	08024ec4 	.word	0x08024ec4
 80009b8:	08026be0 	.word	0x08026be0

080009bc <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80009bc:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <_ZN8STM32DMA10initializeEv+0x40>)
 80009c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009c4:	f042 0210 	orr.w	r2, r2, #16
 80009c8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80009cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009d0:	f002 0210 	and.w	r2, r2, #16
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009da:	f042 0210 	orr.w	r2, r2, #16
 80009de:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009e2:	f022 0210 	bic.w	r2, r2, #16
 80009e6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_ZN8STM32DMA10initializeEv+0x44>)
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <_ZN8STM32DMA10initializeEv+0x48>)
 80009ec:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009f4:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009f6:	b002      	add	sp, #8
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	58024400 	.word	0x58024400
 8000a00:	24004f34 	.word	0x24004f34
 8000a04:	08000971 	.word	0x08000971
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000a0c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000a10:	4770      	bx	lr

08000a12 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000a12:	b510      	push	{r4, lr}
 8000a14:	4604      	mov	r4, r0
}
 8000a16:	f7ff ffb5 	bl	8000984 <_ZN8STM32DMAD1Ev>
 8000a1a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f022 fc09 	bl	8023236 <_ZdlPvj>
 8000a24:	4620      	mov	r0, r4
 8000a26:	bd10      	pop	{r4, pc}

08000a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000a28:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000a2a:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d809      	bhi.n	8000a44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8000a30:	e8df f003 	tbb	[pc, r3]
 8000a34:	080e1006 	.word	0x080e1006
 8000a38:	10080808 	.word	0x10080808
 8000a3c:	1010      	.short	0x1010
 8000a3e:	10          	.byte	0x10
 8000a3f:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a40:	2002      	movs	r0, #2
        break;
 8000a42:	e008      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a48:	2187      	movs	r1, #135	; 0x87
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a4c:	f022 fc22 	bl	8023294 <__assert_func>
    switch (format)
 8000a50:	2000      	movs	r0, #0
 8000a52:	e000      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a54:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a58:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a5a:	8aca      	ldrh	r2, [r1, #22]
 8000a5c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a60:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a66:	690a      	ldr	r2, [r1, #16]
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a6a:	8b4a      	ldrh	r2, [r1, #26]
 8000a6c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a70:	eba2 020c 	sub.w	r2, r2, ip
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a76:	680b      	ldr	r3, [r1, #0]
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d008      	beq.n	8000a8e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a7e:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a84:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a8a:	601a      	str	r2, [r3, #0]
    }
}
 8000a8c:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a8e:	8b4a      	ldrh	r2, [r1, #26]
 8000a90:	8a8b      	ldrh	r3, [r1, #20]
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a96:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a98:	8b4a      	ldrh	r2, [r1, #26]
 8000a9a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a9e:	eba2 020c 	sub.w	r2, r2, ip
 8000aa2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000aa4:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000aa6:	7f08      	ldrb	r0, [r1, #28]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000aaa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000aae:	61da      	str	r2, [r3, #28]
 8000ab0:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000ab2:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab4:	690a      	ldr	r2, [r1, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab8:	690a      	ldr	r2, [r1, #16]
 8000aba:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e7e4      	b.n	8000a8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000ac2:	bf00      	nop
 8000ac4:	08024d4c 	.word	0x08024d4c
 8000ac8:	08024d68 	.word	0x08024d68
 8000acc:	08024db4 	.word	0x08024db4
 8000ad0:	52001000 	.word	0x52001000
 8000ad4:	00030201 	.word	0x00030201
 8000ad8:	00010009 	.word	0x00010009
 8000adc:	00020201 	.word	0x00020201

08000ae0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ae2:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ae4:	2b0b      	cmp	r3, #11
 8000ae6:	d815      	bhi.n	8000b14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ae8:	e8df f003 	tbb	[pc, r3]
 8000aec:	141a1c06 	.word	0x141a1c06
 8000af0:	12141414 	.word	0x12141414
 8000af4:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000af8:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000afa:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000afc:	2b0b      	cmp	r3, #11
 8000afe:	d820      	bhi.n	8000b42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000b00:	e8df f003 	tbb	[pc, r3]
 8000b04:	1f252712 	.word	0x1f252712
 8000b08:	1d1f1f1f 	.word	0x1d1f1f1f
 8000b0c:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b10:	2005      	movs	r0, #5
        break;
 8000b12:	e7f2      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000b14:	4b75      	ldr	r3, [pc, #468]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b16:	4a76      	ldr	r2, [pc, #472]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b18:	2166      	movs	r1, #102	; 0x66
 8000b1a:	4876      	ldr	r0, [pc, #472]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b1c:	f022 fbba 	bl	8023294 <__assert_func>
    switch (format)
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7ea      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b24:	2001      	movs	r0, #1
 8000b26:	e7e8      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000b28:	2402      	movs	r4, #2
    switch (format)
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d815      	bhi.n	8000b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000b2e:	e8df f003 	tbb	[pc, r3]
 8000b32:	1c12      	.short	0x1c12
 8000b34:	1414141a 	.word	0x1414141a
 8000b38:	1c1c1c14 	.word	0x1c1c1c14
 8000b3c:	1c          	.byte	0x1c
 8000b3d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b3e:	2405      	movs	r4, #5
        break;
 8000b40:	e7f3      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b44:	4a6a      	ldr	r2, [pc, #424]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b46:	2166      	movs	r1, #102	; 0x66
 8000b48:	486a      	ldr	r0, [pc, #424]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b4a:	f022 fba3 	bl	8023294 <__assert_func>
    switch (format)
 8000b4e:	2400      	movs	r4, #0
 8000b50:	e7eb      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b52:	2401      	movs	r4, #1
 8000b54:	e7e9      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b56:	2502      	movs	r5, #2
        break;
 8000b58:	e008      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b5c:	4a66      	ldr	r2, [pc, #408]	; (8000cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b5e:	2187      	movs	r1, #135	; 0x87
 8000b60:	4864      	ldr	r0, [pc, #400]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b62:	f022 fb97 	bl	8023294 <__assert_func>
    switch (format)
 8000b66:	2500      	movs	r5, #0
 8000b68:	e000      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b6a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b6c:	8b4a      	ldrh	r2, [r1, #26]
 8000b6e:	8a8b      	ldrh	r3, [r1, #20]
 8000b70:	1ad2      	subs	r2, r2, r3
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b76:	8b4a      	ldrh	r2, [r1, #26]
 8000b78:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b7c:	eba2 020c 	sub.w	r2, r2, ip
 8000b80:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b82:	8b0a      	ldrh	r2, [r1, #24]
 8000b84:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b88:	eba2 020c 	sub.w	r2, r2, ip
 8000b8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b8e:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b90:	8aca      	ldrh	r2, [r1, #22]
 8000b92:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b96:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b9a:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b9c:	690a      	ldr	r2, [r1, #16]
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000ba0:	684a      	ldr	r2, [r1, #4]
 8000ba2:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	2b80      	cmp	r3, #128	; 0x80
 8000ba8:	d036      	beq.n	8000c18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000baa:	d813      	bhi.n	8000bd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000bac:	2b20      	cmp	r3, #32
 8000bae:	d07c      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb0:	2b40      	cmp	r3, #64	; 0x40
 8000bb2:	d07a      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	f040 8085 	bne.w	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bba:	7f0b      	ldrb	r3, [r1, #28]
 8000bbc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bc0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bc4:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bc6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bc8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bca:	690a      	ldr	r2, [r1, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bd0:	601a      	str	r2, [r3, #0]
        break;
 8000bd2:	e020      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd8:	d010      	beq.n	8000bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bde:	d171      	bne.n	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000be0:	7f0b      	ldrb	r3, [r1, #28]
 8000be2:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000be4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bea:	61da      	str	r2, [r3, #28]
 8000bec:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bee:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bf2:	690a      	ldr	r2, [r1, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bf6:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bf8:	601a      	str	r2, [r3, #0]
        break;
 8000bfa:	e00c      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bfc:	7f0b      	ldrb	r3, [r1, #28]
 8000bfe:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000c00:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c0a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c0c:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0e:	690a      	ldr	r2, [r1, #16]
 8000c10:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c12:	4a3b      	ldr	r2, [pc, #236]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000c18:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c1a:	7f0b      	ldrb	r3, [r1, #28]
 8000c1c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c20:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c26:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c28:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c2a:	6908      	ldr	r0, [r1, #16]
 8000c2c:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000c2e:	1d10      	adds	r0, r2, #4
 8000c30:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000c32:	7813      	ldrb	r3, [r2, #0]
 8000c34:	b18b      	cbz	r3, 8000c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d12c      	bne.n	8000c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c3a:	7f0b      	ldrb	r3, [r1, #28]
 8000c3c:	2bff      	cmp	r3, #255	; 0xff
 8000c3e:	d027      	beq.n	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c40:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c44:	69c4      	ldr	r4, [r0, #28]
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c48:	4023      	ands	r3, r4
 8000c4a:	8852      	ldrh	r2, [r2, #2]
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	61c3      	str	r3, [r0, #28]
                break;
 8000c58:	e009      	b.n	8000c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c5a:	4928      	ldr	r1, [pc, #160]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c5c:	69c8      	ldr	r0, [r1, #28]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c60:	4003      	ands	r3, r0
 8000c62:	8852      	ldrh	r2, [r2, #2]
 8000c64:	3a01      	subs	r2, #1
 8000c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c6a:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c6c:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c70:	69d3      	ldr	r3, [r2, #28]
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f013 0f20 	tst.w	r3, #32
 8000c80:	d1fa      	bne.n	8000c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c88:	b159      	cbz	r1, 8000ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e7c2      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c90:	2100      	movs	r1, #0
 8000c92:	e7d6      	b.n	8000c42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c98:	f240 1101 	movw	r1, #257	; 0x101
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c9e:	f022 faf9 	bl	8023294 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e7b5      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000caa:	7f0b      	ldrb	r3, [r1, #28]
 8000cac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cb0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cb6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000cb8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cba:	690a      	ldr	r2, [r1, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000cc0:	601a      	str	r2, [r3, #0]
        break;
 8000cc2:	e7a8      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cc4:	7f0b      	ldrb	r3, [r1, #28]
 8000cc6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cca:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cd0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cd2:	7f4a      	ldrb	r2, [r1, #29]
 8000cd4:	7f8b      	ldrb	r3, [r1, #30]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d003      	beq.n	8000ce2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e799      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ce4:	f240 2201 	movw	r2, #513	; 0x201
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	e794      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cec:	08024d4c 	.word	0x08024d4c
 8000cf0:	08024e14 	.word	0x08024e14
 8000cf4:	08024db4 	.word	0x08024db4
 8000cf8:	08024d68 	.word	0x08024d68
 8000cfc:	52001000 	.word	0x52001000
 8000d00:	00020201 	.word	0x00020201
 8000d04:	00020009 	.word	0x00020009
 8000d08:	0002000a 	.word	0x0002000a
 8000d0c:	ffff00ef 	.word	0xffff00ef
 8000d10:	08024e60 	.word	0x08024e60
 8000d14:	08024e7c 	.word	0x08024e7c
 8000d18:	00010201 	.word	0x00010201

08000d1c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <_ZN8STM32DMAC1Ev+0x38>)
 8000d22:	f840 3b0c 	str.w	r3, [r0], #12
 8000d26:	6068      	str	r0, [r5, #4]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	722b      	strb	r3, [r5, #8]
 8000d2c:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000d2e:	462c      	mov	r4, r5
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <_ZN8STM32DMAC1Ev+0x3c>)
 8000d32:	f844 3b20 	str.w	r3, [r4], #32
 8000d36:	2260      	movs	r2, #96	; 0x60
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f014 fb29 	bl	8015390 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d3e:	235f      	movs	r3, #95	; 0x5f
 8000d40:	e003      	b.n	8000d4a <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60e2      	str	r2, [r4, #12]
 8000d46:	3424      	adds	r4, #36	; 0x24
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	daf9      	bge.n	8000d42 <_ZN8STM32DMAC1Ev+0x26>
}
 8000d4e:	4628      	mov	r0, r5
 8000d50:	bd38      	pop	{r3, r4, r5, pc}
 8000d52:	bf00      	nop
 8000d54:	08026be0 	.word	0x08026be0
 8000d58:	08024ee8 	.word	0x08024ee8

08000d5c <_ZN8touchgfx9TypedTextD1Ev>:
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
    {
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <_ZN8touchgfx9TypedTextD1Ev+0x8>)
 8000d5e:	6003      	str	r3, [r0, #0]
    }
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	08024f38 	.word	0x08024f38

08000d68 <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d68:	4b01      	ldr	r3, [pc, #4]	; (8000d70 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d6a:	6003      	str	r3, [r0, #0]
    }
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	08024f5c 	.word	0x08024f5c

08000d74 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d74:	4770      	bx	lr

08000d76 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d76:	4770      	bx	lr

08000d78 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d78:	4770      	bx	lr

08000d7a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d7a:	4770      	bx	lr

08000d7c <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d7c:	4770      	bx	lr

08000d7e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d7e:	4770      	bx	lr

08000d80 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d80:	4b01      	ldr	r3, [pc, #4]	; (8000d88 <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d82:	6003      	str	r3, [r0, #0]
    }
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	08024f6c 	.word	0x08024f6c

08000d8c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d8c:	4770      	bx	lr

08000d8e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d8e:	4770      	bx	lr

08000d90 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d90:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d94:	6808      	ldr	r0, [r1, #0]
 8000d96:	6849      	ldr	r1, [r1, #4]
 8000d98:	c303      	stmia	r3!, {r0, r1}
    }
 8000d9a:	4770      	bx	lr

08000d9c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000da0:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000da4:	b158      	cbz	r0, 8000dbe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000da6:	6803      	ldr	r3, [r0, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4798      	blx	r3
 8000dac:	b138      	cbz	r0, 8000dbe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000dae:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000db2:	6803      	ldr	r3, [r0, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000dbe:	bd10      	pop	{r4, pc}

08000dc0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000dc2:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000dc6:	6002      	str	r2, [r0, #0]
    {
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000dca:	6002      	str	r2, [r0, #0]
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	08024fac 	.word	0x08024fac
 8000dd4:	08026f98 	.word	0x08026f98
 8000dd8:	08024f6c 	.word	0x08024f6c

08000ddc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000dde:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000de2:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000de8:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000dee:	6002      	str	r2, [r0, #0]
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000df2:	6002      	str	r2, [r0, #0]
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000df6:	6002      	str	r2, [r0, #0]
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	08025010 	.word	0x08025010
 8000e00:	08024ff8 	.word	0x08024ff8
 8000e04:	08024f94 	.word	0x08024f94
 8000e08:	08024fac 	.word	0x08024fac
 8000e0c:	08026f98 	.word	0x08026f98
 8000e10:	08024f6c 	.word	0x08024f6c

08000e14 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <_ZN19FrontendApplicationD1Ev+0x24>)
 8000e16:	6002      	str	r2, [r0, #0]
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <_ZN19FrontendApplicationD1Ev+0x28>)
 8000e1a:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000e1e:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000e24:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <_ZN19FrontendApplicationD1Ev+0x34>)
 8000e2a:	6002      	str	r2, [r0, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <_ZN19FrontendApplicationD1Ev+0x38>)
 8000e2e:	6002      	str	r2, [r0, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000e32:	6002      	str	r2, [r0, #0]
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	0802505c 	.word	0x0802505c
 8000e3c:	08025010 	.word	0x08025010
 8000e40:	08024ff8 	.word	0x08024ff8
 8000e44:	08024f94 	.word	0x08024f94
 8000e48:	08024fac 	.word	0x08024fac
 8000e4c:	08026f98 	.word	0x08026f98
 8000e50:	08024f6c 	.word	0x08024f6c

08000e54 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e54:	4a02      	ldr	r2, [pc, #8]	; (8000e60 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e56:	6002      	str	r2, [r0, #0]
    {
 8000e58:	4a02      	ldr	r2, [pc, #8]	; (8000e64 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e5a:	6002      	str	r2, [r0, #0]
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	080250a8 	.word	0x080250a8
 8000e64:	08024f5c 	.word	0x08024f5c

08000e68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e68:	4a02      	ldr	r2, [pc, #8]	; (8000e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e6a:	6002      	str	r2, [r0, #0]
    {
 8000e6c:	4a02      	ldr	r2, [pc, #8]	; (8000e78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e6e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	08024ff8 	.word	0x08024ff8
 8000e78:	08024f94 	.word	0x08024f94

08000e7c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	4770      	bx	lr

08000e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e80:	200c      	movs	r0, #12
 8000e82:	4770      	bx	lr

08000e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e88:	0089      	lsls	r1, r1, #2
 8000e8a:	3108      	adds	r1, #8
    }
 8000e8c:	4408      	add	r0, r1
 8000e8e:	4770      	bx	lr

08000e90 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e94:	0089      	lsls	r1, r1, #2
 8000e96:	3108      	adds	r1, #8
    }
 8000e98:	4408      	add	r0, r1
 8000e9a:	4770      	bx	lr

08000e9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	4770      	bx	lr

08000ea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ea0:	f642 60c8 	movw	r0, #11976	; 0x2ec8
 8000ea4:	4770      	bx	lr

08000ea6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ea6:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 8000eaa:	fb03 f101 	mul.w	r1, r3, r1
 8000eae:	3108      	adds	r1, #8
    }
 8000eb0:	4408      	add	r0, r1
 8000eb2:	4770      	bx	lr

08000eb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb4:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 8000eb8:	fb03 f101 	mul.w	r1, r3, r1
 8000ebc:	3108      	adds	r1, #8
    }
 8000ebe:	4408      	add	r0, r1
 8000ec0:	4770      	bx	lr

08000ec2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4770      	bx	lr

08000ec6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ec6:	2010      	movs	r0, #16
 8000ec8:	4770      	bx	lr

08000eca <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eca:	0109      	lsls	r1, r1, #4
 8000ecc:	3108      	adds	r1, #8
    }
 8000ece:	4408      	add	r0, r1
 8000ed0:	4770      	bx	lr

08000ed2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ed2:	0109      	lsls	r1, r1, #4
 8000ed4:	3108      	adds	r1, #8
    }
 8000ed6:	4408      	add	r0, r1
 8000ed8:	4770      	bx	lr

08000eda <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000eda:	b508      	push	{r3, lr}
 8000edc:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000ede:	6841      	ldr	r1, [r0, #4]
 8000ee0:	68c2      	ldr	r2, [r0, #12]
 8000ee2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ee6:	f012 0f01 	tst.w	r2, #1
 8000eea:	d102      	bne.n	8000ef2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	4798      	blx	r3
    }
 8000ef0:	bd08      	pop	{r3, pc}
 8000ef2:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000ef6:	f851 200c 	ldr.w	r2, [r1, ip]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	58d3      	ldr	r3, [r2, r3]
 8000efe:	e7f6      	b.n	8000eee <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000f00 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000f00:	6843      	ldr	r3, [r0, #4]
 8000f02:	b14b      	cbz	r3, 8000f18 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000f04:	6883      	ldr	r3, [r0, #8]
 8000f06:	b10b      	cbz	r3, 8000f0c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	4770      	bx	lr
 8000f0c:	68c3      	ldr	r3, [r0, #12]
 8000f0e:	f013 0f01 	tst.w	r3, #1
 8000f12:	d003      	beq.n	8000f1c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000f14:	2001      	movs	r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	2000      	movs	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	2000      	movs	r0, #0
    }
 8000f1e:	4770      	bx	lr

08000f20 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000f20:	b510      	push	{r4, lr}
 8000f22:	4604      	mov	r4, r0
    {
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000f26:	6003      	str	r3, [r0, #0]
    }
 8000f28:	2104      	movs	r1, #4
 8000f2a:	f022 f984 	bl	8023236 <_ZdlPvj>
 8000f2e:	4620      	mov	r0, r4
 8000f30:	bd10      	pop	{r4, pc}
 8000f32:	bf00      	nop
 8000f34:	08024f6c 	.word	0x08024f6c

08000f38 <_ZN16FrontendHeapBaseD0Ev>:
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000f3e:	6003      	str	r3, [r0, #0]
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000f42:	6003      	str	r3, [r0, #0]
 8000f44:	2114      	movs	r1, #20
 8000f46:	f022 f976 	bl	8023236 <_ZdlPvj>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	bd10      	pop	{r4, pc}
 8000f4e:	bf00      	nop
 8000f50:	080250a8 	.word	0x080250a8
 8000f54:	08024f5c 	.word	0x08024f5c

08000f58 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
    {
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f5e:	6003      	str	r3, [r0, #0]
    }
 8000f60:	2114      	movs	r1, #20
 8000f62:	f022 f968 	bl	8023236 <_ZdlPvj>
 8000f66:	4620      	mov	r0, r4
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	bf00      	nop
 8000f6c:	08024f5c 	.word	0x08024f5c

08000f70 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4604      	mov	r4, r0
    {
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <_ZN8touchgfx9TypedTextD0Ev+0x14>)
 8000f76:	6003      	str	r3, [r0, #0]
    }
 8000f78:	2108      	movs	r1, #8
 8000f7a:	f022 f95c 	bl	8023236 <_ZdlPvj>
 8000f7e:	4620      	mov	r0, r4
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	bf00      	nop
 8000f84:	08024f38 	.word	0x08024f38

08000f88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f8e:	6003      	str	r3, [r0, #0]
    {
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f92:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f94:	2110      	movs	r1, #16
 8000f96:	f022 f94e 	bl	8023236 <_ZdlPvj>
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08024ff8 	.word	0x08024ff8
 8000fa4:	08024f94 	.word	0x08024f94

08000fa8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000fae:	6003      	str	r3, [r0, #0]
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000fb2:	6003      	str	r3, [r0, #0]
    {
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000fb6:	6003      	str	r3, [r0, #0]
 8000fb8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000fbc:	f022 f93b 	bl	8023236 <_ZdlPvj>
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	08024fac 	.word	0x08024fac
 8000fc8:	08026f98 	.word	0x08026f98
 8000fcc:	08024f6c 	.word	0x08024f6c

08000fd0 <_ZN23FrontendApplicationBaseD0Ev>:
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000fd6:	6003      	str	r3, [r0, #0]
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000fda:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000fe0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000fe6:	6003      	str	r3, [r0, #0]
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000fea:	6003      	str	r3, [r0, #0]
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000fee:	6003      	str	r3, [r0, #0]
 8000ff0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000ff4:	f022 f91f 	bl	8023236 <_ZdlPvj>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	08025010 	.word	0x08025010
 8001000:	08024ff8 	.word	0x08024ff8
 8001004:	08024f94 	.word	0x08024f94
 8001008:	08024fac 	.word	0x08024fac
 800100c:	08026f98 	.word	0x08026f98
 8001010:	08024f6c 	.word	0x08024f6c

08001014 <_ZN19FrontendApplicationD0Ev>:
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <_ZN19FrontendApplicationD0Ev+0x30>)
 800101a:	6003      	str	r3, [r0, #0]
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_ZN19FrontendApplicationD0Ev+0x34>)
 800101e:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <_ZN19FrontendApplicationD0Ev+0x38>)
 8001022:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8001028:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <_ZN19FrontendApplicationD0Ev+0x40>)
 800102e:	6003      	str	r3, [r0, #0]
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <_ZN19FrontendApplicationD0Ev+0x44>)
 8001032:	6003      	str	r3, [r0, #0]
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <_ZN19FrontendApplicationD0Ev+0x48>)
 8001036:	6003      	str	r3, [r0, #0]
 8001038:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800103c:	f022 f8fb 	bl	8023236 <_ZdlPvj>
 8001040:	4620      	mov	r0, r4
 8001042:	bd10      	pop	{r4, pc}
 8001044:	0802505c 	.word	0x0802505c
 8001048:	08025010 	.word	0x08025010
 800104c:	08024ff8 	.word	0x08024ff8
 8001050:	08024f94 	.word	0x08024f94
 8001054:	08024fac 	.word	0x08024fac
 8001058:	08026f98 	.word	0x08026f98
 800105c:	08024f6c 	.word	0x08024f6c

08001060 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001060:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 8001062:	4608      	mov	r0, r1
 8001064:	f002 fdc8 	bl	8003bf8 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001068:	bd08      	pop	{r3, pc}

0800106a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800106a:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 800106c:	f002 fdc4 	bl	8003bf8 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001070:	bd08      	pop	{r3, pc}

08001072 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8001072:	b510      	push	{r4, lr}
 8001074:	4604      	mov	r4, r0
    {
        model.tick();
 8001076:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800107a:	f005 f8e1 	bl	8006240 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800107e:	4620      	mov	r0, r4
 8001080:	f016 fe6e 	bl	8017d60 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8001084:	bd10      	pop	{r4, pc}
	...

08001088 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001088:	b510      	push	{r4, lr}
 800108a:	4604      	mov	r4, r0
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800108e:	6003      	str	r3, [r0, #0]
 8001090:	f011 ff99 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001094:	4620      	mov	r0, r4
 8001096:	bd10      	pop	{r4, pc}
 8001098:	08025124 	.word	0x08025124

0800109c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800109c:	b510      	push	{r4, lr}
 800109e:	4604      	mov	r4, r0
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010a2:	6003      	str	r3, [r0, #0]
 80010a4:	f011 ff8f 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010a8:	2114      	movs	r1, #20
 80010aa:	4620      	mov	r0, r4
 80010ac:	f022 f8c3 	bl	8023236 <_ZdlPvj>
 80010b0:	4620      	mov	r0, r4
 80010b2:	bd10      	pop	{r4, pc}
 80010b4:	08025124 	.word	0x08025124

080010b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010b8:	b510      	push	{r4, lr}
 80010ba:	4604      	mov	r4, r0
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010be:	6003      	str	r3, [r0, #0]
 80010c0:	f011 ff81 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010c4:	4620      	mov	r0, r4
 80010c6:	bd10      	pop	{r4, pc}
 80010c8:	080250f0 	.word	0x080250f0

080010cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
 80010d2:	6003      	str	r3, [r0, #0]
 80010d4:	f011 ff77 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010d8:	f642 61d0 	movw	r1, #11984	; 0x2ed0
 80010dc:	4620      	mov	r0, r4
 80010de:	f022 f8aa 	bl	8023236 <_ZdlPvj>
 80010e2:	4620      	mov	r0, r4
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop
 80010e8:	080250f0 	.word	0x080250f0

080010ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010ec:	b510      	push	{r4, lr}
 80010ee:	4604      	mov	r4, r0
 80010f0:	4b02      	ldr	r3, [pc, #8]	; (80010fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010f2:	6003      	str	r3, [r0, #0]
 80010f4:	f011 ff67 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010f8:	4620      	mov	r0, r4
 80010fa:	bd10      	pop	{r4, pc}
 80010fc:	080250bc 	.word	0x080250bc

08001100 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8001106:	6003      	str	r3, [r0, #0]
 8001108:	f011 ff5d 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800110c:	2118      	movs	r1, #24
 800110e:	4620      	mov	r0, r4
 8001110:	f022 f891 	bl	8023236 <_ZdlPvj>
 8001114:	4620      	mov	r0, r4
 8001116:	bd10      	pop	{r4, pc}
 8001118:	080250bc 	.word	0x080250bc

0800111c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800111c:	b510      	push	{r4, lr}
 800111e:	4604      	mov	r4, r0
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <_ZN12FrontendHeapD1Ev+0x70>)
 8001122:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 8001124:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <_ZN12FrontendHeapD1Ev+0x74>)
 800112a:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
    virtual ~FrontendApplicationBase() { }
 800112e:	4a19      	ldr	r2, [pc, #100]	; (8001194 <_ZN12FrontendHeapD1Ev+0x78>)
 8001130:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001134:	4a18      	ldr	r2, [pc, #96]	; (8001198 <_ZN12FrontendHeapD1Ev+0x7c>)
 8001136:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
    {
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <_ZN12FrontendHeapD1Ev+0x80>)
 800113c:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <_ZN12FrontendHeapD1Ev+0x84>)
 8001142:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <_ZN12FrontendHeapD1Ev+0x88>)
 8001148:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 800114c:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <_ZN12FrontendHeapD1Ev+0x8c>)
 800114e:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 8001152:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <_ZN12FrontendHeapD1Ev+0x90>)
 8001158:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 800115c:	f642 60fc 	movw	r0, #12028	; 0x2efc
 8001160:	4420      	add	r0, r4
 8001162:	f011 ff30 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001166:	4620      	mov	r0, r4
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_ZN12FrontendHeapD1Ev+0x94>)
 800116a:	f840 3f2c 	str.w	r3, [r0, #44]!
 800116e:	f011 ff2a 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001172:	4620      	mov	r0, r4
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <_ZN12FrontendHeapD1Ev+0x98>)
 8001176:	f840 3f14 	str.w	r3, [r0, #20]!
 800117a:	f011 ff24 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <_ZN12FrontendHeapD1Ev+0x9c>)
 8001180:	6023      	str	r3, [r4, #0]
    {
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <_ZN12FrontendHeapD1Ev+0xa0>)
 8001184:	6023      	str	r3, [r4, #0]
 8001186:	4620      	mov	r0, r4
 8001188:	bd10      	pop	{r4, pc}
 800118a:	bf00      	nop
 800118c:	08025158 	.word	0x08025158
 8001190:	0802505c 	.word	0x0802505c
 8001194:	08025010 	.word	0x08025010
 8001198:	08024ff8 	.word	0x08024ff8
 800119c:	08024f94 	.word	0x08024f94
 80011a0:	08024fac 	.word	0x08024fac
 80011a4:	08026f98 	.word	0x08026f98
 80011a8:	08024f6c 	.word	0x08024f6c
 80011ac:	08025124 	.word	0x08025124
 80011b0:	080250f0 	.word	0x080250f0
 80011b4:	080250bc 	.word	0x080250bc
 80011b8:	080250a8 	.word	0x080250a8
 80011bc:	08024f5c 	.word	0x08024f5c

080011c0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80011c0:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 80011c2:	4c1a      	ldr	r4, [pc, #104]	; (800122c <__tcf_0+0x6c>)
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <__tcf_0+0x70>)
 80011c6:	6023      	str	r3, [r4, #0]
 80011c8:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <__tcf_0+0x74>)
 80011ce:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 80011d2:	4a19      	ldr	r2, [pc, #100]	; (8001238 <__tcf_0+0x78>)
 80011d4:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80011d8:	4a18      	ldr	r2, [pc, #96]	; (800123c <__tcf_0+0x7c>)
 80011da:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
    {
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <__tcf_0+0x80>)
 80011e0:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <__tcf_0+0x84>)
 80011e6:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <__tcf_0+0x88>)
 80011ec:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 80011f0:	4a16      	ldr	r2, [pc, #88]	; (800124c <__tcf_0+0x8c>)
 80011f2:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 80011f6:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80011fa:	4a15      	ldr	r2, [pc, #84]	; (8001250 <__tcf_0+0x90>)
 80011fc:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 8001200:	f603 60fc 	addw	r0, r3, #3836	; 0xefc
 8001204:	f011 fedf 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001208:	4620      	mov	r0, r4
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <__tcf_0+0x94>)
 800120c:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001210:	f011 fed9 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001214:	4620      	mov	r0, r4
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <__tcf_0+0x98>)
 8001218:	f840 3f14 	str.w	r3, [r0, #20]!
 800121c:	f011 fed3 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <__tcf_0+0x9c>)
 8001222:	6023      	str	r3, [r4, #0]
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <__tcf_0+0xa0>)
 8001226:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 8001228:	bd10      	pop	{r4, pc}
 800122a:	bf00      	nop
 800122c:	2400017c 	.word	0x2400017c
 8001230:	08025158 	.word	0x08025158
 8001234:	0802505c 	.word	0x0802505c
 8001238:	08025010 	.word	0x08025010
 800123c:	08024ff8 	.word	0x08024ff8
 8001240:	08024f94 	.word	0x08024f94
 8001244:	08024fac 	.word	0x08024fac
 8001248:	08026f98 	.word	0x08026f98
 800124c:	08024f6c 	.word	0x08024f6c
 8001250:	08025124 	.word	0x08025124
 8001254:	080250f0 	.word	0x080250f0
 8001258:	080250bc 	.word	0x080250bc
 800125c:	080250a8 	.word	0x080250a8
 8001260:	08024f5c 	.word	0x08024f5c

08001264 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001264:	b510      	push	{r4, lr}
 8001266:	4604      	mov	r4, r0
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <_ZN12FrontendHeapD0Ev+0x78>)
 800126a:	6003      	str	r3, [r0, #0]
 800126c:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <_ZN12FrontendHeapD0Ev+0x7c>)
 8001272:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 8001276:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <_ZN12FrontendHeapD0Ev+0x80>)
 8001278:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800127c:	4a1a      	ldr	r2, [pc, #104]	; (80012e8 <_ZN12FrontendHeapD0Ev+0x84>)
 800127e:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
    {
 8001282:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <_ZN12FrontendHeapD0Ev+0x88>)
 8001284:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <_ZN12FrontendHeapD0Ev+0x8c>)
 800128a:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 800128e:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <_ZN12FrontendHeapD0Ev+0x90>)
 8001290:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 8001294:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <_ZN12FrontendHeapD0Ev+0x94>)
 8001296:	f8c3 29b8 	str.w	r2, [r3, #2488]	; 0x9b8
 800129a:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <_ZN12FrontendHeapD0Ev+0x98>)
 80012a0:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 80012a4:	f642 60fc 	movw	r0, #12028	; 0x2efc
 80012a8:	4420      	add	r0, r4
 80012aa:	f011 fe8c 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012ae:	4620      	mov	r0, r4
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_ZN12FrontendHeapD0Ev+0x9c>)
 80012b2:	f840 3f2c 	str.w	r3, [r0, #44]!
 80012b6:	f011 fe86 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012ba:	4620      	mov	r0, r4
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_ZN12FrontendHeapD0Ev+0xa0>)
 80012be:	f840 3f14 	str.w	r3, [r0, #20]!
 80012c2:	f011 fe80 	bl	8012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_ZN12FrontendHeapD0Ev+0xa4>)
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <_ZN12FrontendHeapD0Ev+0xa8>)
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	f643 3110 	movw	r1, #15120	; 0x3b10
 80012d2:	4620      	mov	r0, r4
 80012d4:	f021 ffaf 	bl	8023236 <_ZdlPvj>
 80012d8:	4620      	mov	r0, r4
 80012da:	bd10      	pop	{r4, pc}
 80012dc:	08025158 	.word	0x08025158
 80012e0:	0802505c 	.word	0x0802505c
 80012e4:	08025010 	.word	0x08025010
 80012e8:	08024ff8 	.word	0x08024ff8
 80012ec:	08024f94 	.word	0x08024f94
 80012f0:	08024fac 	.word	0x08024fac
 80012f4:	08026f98 	.word	0x08026f98
 80012f8:	08024f6c 	.word	0x08024f6c
 80012fc:	08025124 	.word	0x08025124
 8001300:	080250f0 	.word	0x080250f0
 8001304:	080250bc 	.word	0x080250bc
 8001308:	080250a8 	.word	0x080250a8
 800130c:	08024f5c 	.word	0x08024f5c

08001310 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001314:	f002 f998 	bl	8003648 <_ZN14BitmapDatabase11getInstanceEv>
 8001318:	4605      	mov	r5, r0
 800131a:	f002 f999 	bl	8003650 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800131e:	4601      	mov	r1, r0
 8001320:	2400      	movs	r4, #0
 8001322:	9400      	str	r4, [sp, #0]
 8001324:	4623      	mov	r3, r4
 8001326:	4622      	mov	r2, r4
 8001328:	4628      	mov	r0, r5
 800132a:	f019 fe95 	bl	801b058 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <touchgfx_init+0xc0>)
 8001330:	4a28      	ldr	r2, [pc, #160]	; (80013d4 <touchgfx_init+0xc4>)
 8001332:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001334:	4620      	mov	r0, r4
 8001336:	f003 f87f 	bl	8004438 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800133a:	4827      	ldr	r0, [pc, #156]	; (80013d8 <touchgfx_init+0xc8>)
 800133c:	f019 fd3a 	bl	801adb4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <touchgfx_init+0xcc>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f3bf 8f5b 	dmb	ish
 8001348:	f013 0f01 	tst.w	r3, #1
 800134c:	d004      	beq.n	8001358 <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800134e:	4824      	ldr	r0, [pc, #144]	; (80013e0 <touchgfx_init+0xd0>)
 8001350:	f7ff f9be 	bl	80006d0 <_ZN11TouchGFXHAL10initializeEv>
}
 8001354:	b003      	add	sp, #12
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001358:	4820      	ldr	r0, [pc, #128]	; (80013dc <touchgfx_init+0xcc>)
 800135a:	f021 ff6e 	bl	802323a <__cxa_guard_acquire>
 800135e:	2800      	cmp	r0, #0
 8001360:	d0f5      	beq.n	800134e <touchgfx_init+0x3e>
          frontendApplication(app)
 8001362:	4c20      	ldr	r4, [pc, #128]	; (80013e4 <touchgfx_init+0xd4>)
 8001364:	4620      	mov	r0, r4
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <touchgfx_init+0xd8>)
 8001368:	f840 3b14 	str.w	r3, [r0], #20
 800136c:	6060      	str	r0, [r4, #4]
 800136e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8001372:	60a7      	str	r7, [r4, #8]
 8001374:	4e1d      	ldr	r6, [pc, #116]	; (80013ec <touchgfx_init+0xdc>)
 8001376:	60e6      	str	r6, [r4, #12]
 8001378:	f606 25bc 	addw	r5, r6, #2748	; 0xabc
 800137c:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <touchgfx_init+0xe0>)
 8001380:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <touchgfx_init+0xe4>)
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	f011 fe1f 	bl	8012fc8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <touchgfx_init+0xe8>)
 800138c:	6163      	str	r3, [r4, #20]
 800138e:	4638      	mov	r0, r7
 8001390:	f011 fe1a 	bl	8012fc8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <touchgfx_init+0xec>)
 8001396:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001398:	4630      	mov	r0, r6
 800139a:	f011 fe15 	bl	8012fc8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800139e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <touchgfx_init+0xf0>)
 80013a4:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 80013a8:	3614      	adds	r6, #20
 80013aa:	4630      	mov	r0, r6
 80013ac:	f004 feb6 	bl	800611c <_ZN5ModelC1Ev>
 80013b0:	4622      	mov	r2, r4
 80013b2:	4631      	mov	r1, r6
 80013b4:	4628      	mov	r0, r5
 80013b6:	f004 fea7 	bl	8006108 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 80013ba:	4628      	mov	r0, r5
 80013bc:	f002 fc1c 	bl	8003bf8 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 80013c0:	4810      	ldr	r0, [pc, #64]	; (8001404 <touchgfx_init+0xf4>)
 80013c2:	f021 ff85 	bl	80232d0 <atexit>
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <touchgfx_init+0xcc>)
 80013c8:	f021 ff43 	bl	8023252 <__cxa_guard_release>
 80013cc:	e7bf      	b.n	800134e <touchgfx_init+0x3e>
 80013ce:	bf00      	nop
 80013d0:	2400ff40 	.word	0x2400ff40
 80013d4:	24004b0c 	.word	0x24004b0c
 80013d8:	24000008 	.word	0x24000008
 80013dc:	24000178 	.word	0x24000178
 80013e0:	24004a90 	.word	0x24004a90
 80013e4:	2400017c 	.word	0x2400017c
 80013e8:	08024f5c 	.word	0x08024f5c
 80013ec:	24003078 	.word	0x24003078
 80013f0:	080250a8 	.word	0x080250a8
 80013f4:	08025158 	.word	0x08025158
 80013f8:	080250bc 	.word	0x080250bc
 80013fc:	080250f0 	.word	0x080250f0
 8001400:	08025124 	.word	0x08025124
 8001404:	080011c1 	.word	0x080011c1

08001408 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8001408:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800140a:	4802      	ldr	r0, [pc, #8]	; (8001414 <touchgfx_taskEntry+0xc>)
 800140c:	f7ff f964 	bl	80006d8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8001410:	bd08      	pop	{r3, pc}
 8001412:	bf00      	nop
 8001414:	24004a90 	.word	0x24004a90

08001418 <_Z41__static_initialization_and_destruction_0ii>:
 8001418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800141c:	4604      	mov	r4, r0
 800141e:	460d      	mov	r5, r1
 8001420:	2801      	cmp	r0, #1
 8001422:	d007      	beq.n	8001434 <_Z41__static_initialization_and_destruction_0ii+0x1c>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8001424:	b924      	cbnz	r4, 8001430 <_Z41__static_initialization_and_destruction_0ii+0x18>
 8001426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142a:	429d      	cmp	r5, r3
 800142c:	f000 8279 	beq.w	8001922 <_Z41__static_initialization_and_destruction_0ii+0x50a>
}
 8001430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001438:	4299      	cmp	r1, r3
 800143a:	d1f3      	bne.n	8001424 <_Z41__static_initialization_and_destruction_0ii+0xc>
    {27, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 4,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},
    {28, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 5,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},
    {29, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 6,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},

    {30, Rect(SPACE_X, KEY_ROW_4_Y, SPACE_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_SPACE_ID}
};
 800143c:	4be9      	ldr	r3, [pc, #932]	; (80017e4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001442:	f04f 0c0c 	mov.w	ip, #12
 8001446:	f8a3 c002 	strh.w	ip, [r3, #2]
 800144a:	2064      	movs	r0, #100	; 0x64
 800144c:	8098      	strh	r0, [r3, #4]
 800144e:	2224      	movs	r2, #36	; 0x24
 8001450:	80da      	strh	r2, [r3, #6]
 8001452:	811a      	strh	r2, [r3, #8]
 8001454:	2106      	movs	r1, #6
 8001456:	8159      	strh	r1, [r3, #10]
 8001458:	2602      	movs	r6, #2
 800145a:	731e      	strb	r6, [r3, #12]
 800145c:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8001460:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8001464:	8218      	strh	r0, [r3, #16]
 8001466:	825a      	strh	r2, [r3, #18]
 8001468:	829a      	strh	r2, [r3, #20]
 800146a:	82d9      	strh	r1, [r3, #22]
 800146c:	f04f 0603 	mov.w	r6, #3
 8001470:	761e      	strb	r6, [r3, #24]
 8001472:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001476:	835e      	strh	r6, [r3, #26]
 8001478:	8398      	strh	r0, [r3, #28]
 800147a:	83da      	strh	r2, [r3, #30]
 800147c:	841a      	strh	r2, [r3, #32]
 800147e:	8459      	strh	r1, [r3, #34]	; 0x22
 8001480:	f04f 0704 	mov.w	r7, #4
 8001484:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
 8001488:	f04f 088a 	mov.w	r8, #138	; 0x8a
 800148c:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8001490:	8518      	strh	r0, [r3, #40]	; 0x28
 8001492:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001494:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001496:	85d9      	strh	r1, [r3, #46]	; 0x2e
 8001498:	f04f 0705 	mov.w	r7, #5
 800149c:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
 80014a0:	27b4      	movs	r7, #180	; 0xb4
 80014a2:	865f      	strh	r7, [r3, #50]	; 0x32
 80014a4:	8698      	strh	r0, [r3, #52]	; 0x34
 80014a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80014a8:	871a      	strh	r2, [r3, #56]	; 0x38
 80014aa:	8759      	strh	r1, [r3, #58]	; 0x3a
 80014ac:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 80014b0:	f04f 0ede 	mov.w	lr, #222	; 0xde
 80014b4:	f8a3 e03e 	strh.w	lr, [r3, #62]	; 0x3e
 80014b8:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 80014bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80014c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80014c4:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
 80014c8:	f04f 0907 	mov.w	r9, #7
 80014cc:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 80014d0:	f44f 7984 	mov.w	r9, #264	; 0x108
 80014d4:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80014d8:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
 80014dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80014e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80014e4:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
 80014e8:	f04f 0b08 	mov.w	fp, #8
 80014ec:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80014f0:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80014f4:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80014f8:	f8a3 0058 	strh.w	r0, [r3, #88]	; 0x58
 80014fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8001500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001504:	f8a3 105e 	strh.w	r1, [r3, #94]	; 0x5e
 8001508:	f04f 0e09 	mov.w	lr, #9
 800150c:	f883 e060 	strb.w	lr, [r3, #96]	; 0x60
 8001510:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8001514:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8001518:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 800151c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001524:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
 8001528:	f04f 0e0a 	mov.w	lr, #10
 800152c:	f883 e06c 	strb.w	lr, [r3, #108]	; 0x6c
 8001530:	f44f 7ec3 	mov.w	lr, #390	; 0x186
 8001534:	f8a3 e06e 	strh.w	lr, [r3, #110]	; 0x6e
 8001538:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
 800153c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8001540:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001544:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
 8001548:	f04f 090b 	mov.w	r9, #11
 800154c:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8001550:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8001554:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8001558:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
 800155c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001560:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001564:	f8a3 1082 	strh.w	r1, [r3, #130]	; 0x82
 8001568:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
 800156c:	f8a3 c086 	strh.w	ip, [r3, #134]	; 0x86
 8001570:	208e      	movs	r0, #142	; 0x8e
 8001572:	f8a3 0088 	strh.w	r0, [r3, #136]	; 0x88
 8001576:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800157a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800157e:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
 8001582:	f04f 060d 	mov.w	r6, #13
 8001586:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 800158a:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 800158e:	f8a3 0094 	strh.w	r0, [r3, #148]	; 0x94
 8001592:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8001596:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800159a:	f8a3 109a 	strh.w	r1, [r3, #154]	; 0x9a
 800159e:	f04f 0a0e 	mov.w	sl, #14
 80015a2:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 80015a6:	f04f 0660 	mov.w	r6, #96	; 0x60
 80015aa:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 80015ae:	f8a3 00a0 	strh.w	r0, [r3, #160]	; 0xa0
 80015b2:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80015b6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80015ba:	f8a3 10a6 	strh.w	r1, [r3, #166]	; 0xa6
 80015be:	f04f 0a0f 	mov.w	sl, #15
 80015c2:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 80015c6:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 80015ca:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80015ce:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80015d2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80015d6:	f8a3 10b2 	strh.w	r1, [r3, #178]	; 0xb2
 80015da:	f04f 0a10 	mov.w	sl, #16
 80015de:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 80015e2:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 80015e6:	f8a3 00b8 	strh.w	r0, [r3, #184]	; 0xb8
 80015ea:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80015ee:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80015f2:	f8a3 10be 	strh.w	r1, [r3, #190]	; 0xbe
 80015f6:	f04f 0a11 	mov.w	sl, #17
 80015fa:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80015fe:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001602:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8001606:	f8a3 00c4 	strh.w	r0, [r3, #196]	; 0xc4
 800160a:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 800160e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8001612:	f8a3 10ca 	strh.w	r1, [r3, #202]	; 0xca
 8001616:	f04f 0a12 	mov.w	sl, #18
 800161a:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 800161e:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001622:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8001626:	f8a3 00d0 	strh.w	r0, [r3, #208]	; 0xd0
 800162a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 800162e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001632:	f8a3 10d6 	strh.w	r1, [r3, #214]	; 0xd6
 8001636:	f04f 0a13 	mov.w	sl, #19
 800163a:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 800163e:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8001642:	4656      	mov	r6, sl
 8001644:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8001648:	f8a3 00dc 	strh.w	r0, [r3, #220]	; 0xdc
 800164c:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001650:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001654:	f8a3 10e2 	strh.w	r1, [r3, #226]	; 0xe2
 8001658:	f04f 0a14 	mov.w	sl, #20
 800165c:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8001660:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8001664:	f8a3 00e8 	strh.w	r0, [r3, #232]	; 0xe8
 8001668:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 800166c:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8001670:	f8a3 10ee 	strh.w	r1, [r3, #238]	; 0xee
 8001674:	f04f 0a15 	mov.w	sl, #21
 8001678:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 800167c:	f8a3 e0f2 	strh.w	lr, [r3, #242]	; 0xf2
 8001680:	f8a3 00f4 	strh.w	r0, [r3, #244]	; 0xf4
 8001684:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001688:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 800168c:	f8a3 10fa 	strh.w	r1, [r3, #250]	; 0xfa
 8001690:	f04f 0a16 	mov.w	sl, #22
 8001694:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8001698:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 800169c:	f8a3 0100 	strh.w	r0, [r3, #256]	; 0x100
 80016a0:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 80016a4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80016a8:	f8a3 1106 	strh.w	r1, [r3, #262]	; 0x106
 80016ac:	2017      	movs	r0, #23
 80016ae:	f883 0108 	strb.w	r0, [r3, #264]	; 0x108
 80016b2:	f04f 0060 	mov.w	r0, #96	; 0x60
 80016b6:	f8a3 010a 	strh.w	r0, [r3, #266]	; 0x10a
 80016ba:	20b8      	movs	r0, #184	; 0xb8
 80016bc:	f8a3 010c 	strh.w	r0, [r3, #268]	; 0x10c
 80016c0:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 80016c4:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 80016c8:	f8a3 1112 	strh.w	r1, [r3, #274]	; 0x112
 80016cc:	f04f 0918 	mov.w	r9, #24
 80016d0:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 80016d4:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 80016d8:	f8a3 0118 	strh.w	r0, [r3, #280]	; 0x118
 80016dc:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 80016e0:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80016e4:	f8a3 111e 	strh.w	r1, [r3, #286]	; 0x11e
 80016e8:	f04f 0819 	mov.w	r8, #25
 80016ec:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80016f0:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80016f4:	f8a3 0124 	strh.w	r0, [r3, #292]	; 0x124
 80016f8:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80016fc:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8001700:	f8a3 112a 	strh.w	r1, [r3, #298]	; 0x12a
 8001704:	271a      	movs	r7, #26
 8001706:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 800170a:	f04f 0ade 	mov.w	sl, #222	; 0xde
 800170e:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8001712:	f8a3 0130 	strh.w	r0, [r3, #304]	; 0x130
 8001716:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 800171a:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 800171e:	f8a3 1136 	strh.w	r1, [r3, #310]	; 0x136
 8001722:	271b      	movs	r7, #27
 8001724:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8001728:	f44f 7a84 	mov.w	sl, #264	; 0x108
 800172c:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8001730:	f8a3 013c 	strh.w	r0, [r3, #316]	; 0x13c
 8001734:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8001738:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 800173c:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
 8001740:	271c      	movs	r7, #28
 8001742:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8001746:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 800174a:	f8a3 0148 	strh.w	r0, [r3, #328]	; 0x148
 800174e:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001752:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001756:	f8a3 114e 	strh.w	r1, [r3, #334]	; 0x14e
 800175a:	271d      	movs	r7, #29
 800175c:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8001760:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8001764:	f8a3 0154 	strh.w	r0, [r3, #340]	; 0x154
 8001768:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 800176c:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001770:	f8a3 115a 	strh.w	r1, [r3, #346]	; 0x15a
 8001774:	211e      	movs	r1, #30
 8001776:	f883 115c 	strb.w	r1, [r3, #348]	; 0x15c
 800177a:	f04f 0160 	mov.w	r1, #96	; 0x60
 800177e:	f8a3 115e 	strh.w	r1, [r3, #350]	; 0x15e
 8001782:	21e2      	movs	r1, #226	; 0xe2
 8001784:	f8a3 1160 	strh.w	r1, [r3, #352]	; 0x160
 8001788:	f44f 7690 	mov.w	r6, #288	; 0x120
 800178c:	f8a3 6162 	strh.w	r6, [r3, #354]	; 0x162
 8001790:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001794:	f04f 0608 	mov.w	r6, #8
 8001798:	f8a3 6166 	strh.w	r6, [r3, #358]	; 0x166
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800179e:	f8a3 c000 	strh.w	ip, [r3]
 80017a2:	8058      	strh	r0, [r3, #2]
 80017a4:	274e      	movs	r7, #78	; 0x4e
 80017a6:	809f      	strh	r7, [r3, #4]
 80017a8:	80da      	strh	r2, [r3, #6]
{
    {Rect(CAPS_LOCK_X,  KEY_ROW_3_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_CAPSLOCK_ID},    // caps-lock
    {Rect(BACKSPACE_X,  KEY_ROW_3_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_BACKSPACE_ID},   // backspace    
    {Rect(MODE_X,       KEY_ROW_4_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_MODE_ID},        // mode
    {Rect(DONE_X,       KEY_ROW_4_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_DONE_ID}         // done
};
 80017aa:	2600      	movs	r6, #0
 80017ac:	609e      	str	r6, [r3, #8]
 80017ae:	f04f 0804 	mov.w	r8, #4
 80017b2:	f8a3 800c 	strh.w	r8, [r3, #12]
 80017b6:	f8a3 e010 	strh.w	lr, [r3, #16]
 80017ba:	8258      	strh	r0, [r3, #18]
 80017bc:	829f      	strh	r7, [r3, #20]
 80017be:	82da      	strh	r2, [r3, #22]
 80017c0:	619e      	str	r6, [r3, #24]
 80017c2:	f04f 0003 	mov.w	r0, #3
 80017c6:	8398      	strh	r0, [r3, #28]
 80017c8:	f8a3 c020 	strh.w	ip, [r3, #32]
 80017cc:	8459      	strh	r1, [r3, #34]	; 0x22
 80017ce:	849f      	strh	r7, [r3, #36]	; 0x24
 80017d0:	84da      	strh	r2, [r3, #38]	; 0x26
 80017d2:	629e      	str	r6, [r3, #40]	; 0x28
 80017d4:	f04f 0007 	mov.w	r0, #7
 80017d8:	8598      	strh	r0, [r3, #44]	; 0x2c
 80017da:	f8a3 e030 	strh.w	lr, [r3, #48]	; 0x30
 80017de:	8659      	strh	r1, [r3, #50]	; 0x32
 80017e0:	869f      	strh	r7, [r3, #52]	; 0x34
 80017e2:	e003      	b.n	80017ec <_Z41__static_initialization_and_destruction_0ii+0x3d4>
 80017e4:	24004b98 	.word	0x24004b98
 80017e8:	24003c8c 	.word	0x24003c8c
 80017ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80017ee:	639e      	str	r6, [r3, #56]	; 0x38
 80017f0:	f04f 0205 	mov.w	r2, #5
 80017f4:	879a      	strh	r2, [r3, #60]	; 0x3c
 80017f6:	4621      	mov	r1, r4
 80017f8:	3340      	adds	r3, #64	; 0x40
 80017fa:	2900      	cmp	r1, #0
 80017fc:	db0b      	blt.n	8001816 <_Z41__static_initialization_and_destruction_0ii+0x3fe>
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8001808:	801a      	strh	r2, [r3, #0]
 800180a:	805a      	strh	r2, [r3, #2]
 800180c:	809a      	strh	r2, [r3, #4]
 800180e:	80da      	strh	r2, [r3, #6]
 8001810:	3310      	adds	r3, #16
 8001812:	3901      	subs	r1, #1
 8001814:	e7f1      	b.n	80017fa <_Z41__static_initialization_and_destruction_0ii+0x3e2>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001816:	4b51      	ldr	r3, [pc, #324]	; (800195c <_Z41__static_initialization_and_destruction_0ii+0x544>)
 8001818:	2205      	movs	r2, #5
 800181a:	825a      	strh	r2, [r3, #18]
 800181c:	222d      	movs	r2, #45	; 0x2d
 800181e:	829a      	strh	r2, [r3, #20]
 8001820:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001824:	82da      	strh	r2, [r3, #22]
 8001826:	2246      	movs	r2, #70	; 0x46
 8001828:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 800182a:	4a4d      	ldr	r2, [pc, #308]	; (8001960 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 800182c:	61da      	str	r2, [r3, #28]
 800182e:	2600      	movs	r6, #0
 8001830:	841e      	strh	r6, [r3, #32]
        : color(col)
 8001832:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
 8001838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
class TouchController
 800183e:	4f49      	ldr	r7, [pc, #292]	; (8001964 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 8001840:	4b49      	ldr	r3, [pc, #292]	; (8001968 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8001842:	603b      	str	r3, [r7, #0]
{
public:

    STM32TouchController() {}
 8001844:	4b49      	ldr	r3, [pc, #292]	; (800196c <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8001846:	603b      	str	r3, [r7, #0]
static STM32DMA dma;
 8001848:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80019b0 <_Z41__static_initialization_and_destruction_0ii+0x598>
 800184c:	4648      	mov	r0, r9
 800184e:	f7ff fa65 	bl	8000d1c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8001852:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80019a4 <_Z41__static_initialization_and_destruction_0ii+0x58c>
 8001856:	4640      	mov	r0, r8
 8001858:	f01b fe18 	bl	801d48c <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 800185c:	4b44      	ldr	r3, [pc, #272]	; (8001970 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 800185e:	4a45      	ldr	r2, [pc, #276]	; (8001974 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f8c3 9004 	str.w	r9, [r3, #4]
 8001866:	f8c3 8008 	str.w	r8, [r3, #8]
 800186a:	60df      	str	r7, [r3, #12]
 800186c:	611e      	str	r6, [r3, #16]
 800186e:	615e      	str	r6, [r3, #20]
 8001870:	619e      	str	r6, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001872:	839e      	strh	r6, [r3, #28]
 8001874:	83de      	strh	r6, [r3, #30]
 8001876:	841e      	strh	r6, [r3, #32]
 8001878:	845e      	strh	r6, [r3, #34]	; 0x22
 800187a:	849e      	strh	r6, [r3, #36]	; 0x24
 800187c:	84de      	strh	r6, [r3, #38]	; 0x26
 800187e:	851e      	strh	r6, [r3, #40]	; 0x28
 8001880:	f883 602a 	strb.w	r6, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001884:	62de      	str	r6, [r3, #44]	; 0x2c
 8001886:	861e      	strh	r6, [r3, #48]	; 0x30
 8001888:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
 800188c:	639e      	str	r6, [r3, #56]	; 0x38
 800188e:	63de      	str	r6, [r3, #60]	; 0x3c
 8001890:	641e      	str	r6, [r3, #64]	; 0x40
 8001892:	645e      	str	r6, [r3, #68]	; 0x44
 8001894:	f883 6048 	strb.w	r6, [r3, #72]	; 0x48
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800189e:	f883 604a 	strb.w	r6, [r3, #74]	; 0x4a
 80018a2:	f883 604b 	strb.w	r6, [r3, #75]	; 0x4b
 80018a6:	64de      	str	r6, [r3, #76]	; 0x4c
        : x(0), y(0), width(0), height(0)
 80018a8:	f8a3 6050 	strh.w	r6, [r3, #80]	; 0x50
 80018ac:	f8a3 6052 	strh.w	r6, [r3, #82]	; 0x52
 80018b0:	f8a3 6054 	strh.w	r6, [r3, #84]	; 0x54
 80018b4:	f8a3 6056 	strh.w	r6, [r3, #86]	; 0x56
 80018b8:	659e      	str	r6, [r3, #88]	; 0x58
 80018ba:	65de      	str	r6, [r3, #92]	; 0x5c
 80018bc:	661e      	str	r6, [r3, #96]	; 0x60
 80018be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80018c2:	f883 6065 	strb.w	r6, [r3, #101]	; 0x65
 80018c6:	f883 6066 	strb.w	r6, [r3, #102]	; 0x66
 80018ca:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80018ce:	f883 6068 	strb.w	r6, [r3, #104]	; 0x68
 80018d2:	f883 6069 	strb.w	r6, [r3, #105]	; 0x69
 80018d6:	f883 606a 	strb.w	r6, [r3, #106]	; 0x6a
 80018da:	f883 606b 	strb.w	r6, [r3, #107]	; 0x6b
 80018de:	f883 606c 	strb.w	r6, [r3, #108]	; 0x6c
 80018e2:	671e      	str	r6, [r3, #112]	; 0x70
 80018e4:	f883 6074 	strb.w	r6, [r3, #116]	; 0x74
 80018e8:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 80018ec:	f883 6076 	strb.w	r6, [r3, #118]	; 0x76
 80018f0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80018f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80018f8:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 80018fa:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80018fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001900:	491e      	ldr	r1, [pc, #120]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x564>)
 8001902:	800a      	strh	r2, [r1, #0]
 8001904:	491e      	ldr	r1, [pc, #120]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 8001906:	800a      	strh	r2, [r1, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001908:	f44f 7288 	mov.w	r2, #272	; 0x110
 800190c:	491d      	ldr	r1, [pc, #116]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x56c>)
 800190e:	800a      	strh	r2, [r1, #0]
 8001910:	491d      	ldr	r1, [pc, #116]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0x570>)
 8001912:	800a      	strh	r2, [r1, #0]
        DISPLAY_ROTATION = rotate0;
 8001914:	4a1d      	ldr	r2, [pc, #116]	; (800198c <_Z41__static_initialization_and_destruction_0ii+0x574>)
 8001916:	7016      	strb	r6, [r2, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 800191a:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 800191e:	601a      	str	r2, [r3, #0]
    }
 8001920:	e580      	b.n	8001424 <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8001924:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 8001926:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001928:	4a19      	ldr	r2, [pc, #100]	; (8001990 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 800192a:	601a      	str	r2, [r3, #0]
    {
 800192c:	4a11      	ldr	r2, [pc, #68]	; (8001974 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 800192e:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId WIFIERRORSMALL = 5; // Saira_Medium_22_4bpp
    static const touchgfx::FontId WIFIBUTTON = 6;     // SairaSemiCondensed_Medium_18_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <_Z41__static_initialization_and_destruction_0ii+0x580>)
 8001932:	4a1a      	ldr	r2, [pc, #104]	; (800199c <_Z41__static_initialization_and_destruction_0ii+0x584>)
 8001934:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 8001936:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <_Z41__static_initialization_and_destruction_0ii+0x588>)
 8001938:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800193c:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800193e:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 8001940:	4a1a      	ldr	r2, [pc, #104]	; (80019ac <_Z41__static_initialization_and_destruction_0ii+0x594>)
 8001942:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 8001944:	481a      	ldr	r0, [pc, #104]	; (80019b0 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 8001946:	f7ff f81d 	bl	8000984 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <_Z41__static_initialization_and_destruction_0ii+0x554>)
 800194e:	601a      	str	r2, [r3, #0]
    {
 8001950:	4a05      	ldr	r2, [pc, #20]	; (8001968 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8001952:	601a      	str	r2, [r3, #0]
    {
 8001954:	4b01      	ldr	r3, [pc, #4]	; (800195c <_Z41__static_initialization_and_destruction_0ii+0x544>)
 8001956:	4a02      	ldr	r2, [pc, #8]	; (8001960 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 8001958:	61da      	str	r2, [r3, #28]
}
 800195a:	e569      	b.n	8001430 <_Z41__static_initialization_and_destruction_0ii+0x18>
 800195c:	24004b10 	.word	0x24004b10
 8001960:	08024f38 	.word	0x08024f38
 8001964:	24003cec 	.word	0x24003cec
 8001968:	080249b4 	.word	0x080249b4
 800196c:	080249cc 	.word	0x080249cc
 8001970:	24004a90 	.word	0x24004a90
 8001974:	08026b08 	.word	0x08026b08
 8001978:	2400fee4 	.word	0x2400fee4
 800197c:	2400fed8 	.word	0x2400fed8
 8001980:	2400fede 	.word	0x2400fede
 8001984:	2400feda 	.word	0x2400feda
 8001988:	2400fee0 	.word	0x2400fee0
 800198c:	2400fedc 	.word	0x2400fedc
 8001990:	0802516c 	.word	0x0802516c
 8001994:	08024b5c 	.word	0x08024b5c
 8001998:	24000008 	.word	0x24000008
 800199c:	080252ec 	.word	0x080252ec
 80019a0:	08024f48 	.word	0x08024f48
 80019a4:	24004b40 	.word	0x24004b40
 80019a8:	0802727c 	.word	0x0802727c
 80019ac:	08026f40 	.word	0x08026f40
 80019b0:	24003cf0 	.word	0x24003cf0

080019b4 <_GLOBAL__sub_I_touchgfx_init>:
 80019b4:	b508      	push	{r3, lr}
 80019b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff fd2c 	bl	8001418 <_Z41__static_initialization_and_destruction_0ii>
 80019c0:	bd08      	pop	{r3, pc}

080019c2 <_GLOBAL__sub_D_touchgfx_init>:
 80019c2:	b508      	push	{r3, lr}
 80019c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fd25 	bl	8001418 <_Z41__static_initialization_and_destruction_0ii>
 80019ce:	bd08      	pop	{r3, pc}

080019d0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80019d2:	2290      	movs	r2, #144	; 0x90
 80019d4:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80019d8:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80019e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019f0:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80019fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001a02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a06:	f3bf 8f6f 	isb	sy
 8001a0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001a12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a16:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001a20:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001a22:	68d3      	ldr	r3, [r2, #12]
 8001a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8001a2e:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001a30:	6911      	ldr	r1, [r2, #16]
 8001a32:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001a36:	3901      	subs	r1, #1
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 8001a3a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001a3e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001a46:	4770      	bx	lr
 8001a48:	50001000 	.word	0x50001000
 8001a4c:	24004efc 	.word	0x24004efc
 8001a50:	24004efa 	.word	0x24004efa

08001a54 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8001a54:	4b01      	ldr	r3, [pc, #4]	; (8001a5c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8001a56:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8001a5a:	4770      	bx	lr
 8001a5c:	50001000 	.word	0x50001000

08001a60 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8001a62:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001a66:	2201      	movs	r2, #1
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a6a:	4770      	bx	lr
 8001a6c:	50001000 	.word	0x50001000

08001a70 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a78:	d025      	beq.n	8001ac6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 8001a7a:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001a84:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001a88:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001a8c:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001a90:	e000      	b.n	8001a94 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 8001a92:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a94:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001a98:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001a9c:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001aa0:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001aa4:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001aa6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001aaa:	4613      	mov	r3, r2
 8001aac:	3a01      	subs	r2, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f2      	bne.n	8001a98 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001ab2:	1e43      	subs	r3, r0, #1
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d1ec      	bne.n	8001a92 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 8001ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001abc:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ad4:	d025      	beq.n	8001b22 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 8001ad6:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001ae4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ae8:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001aec:	e000      	b.n	8001af0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 8001aee:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001af0:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001af4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001af8:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001afc:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001b00:	4908      	ldr	r1, [pc, #32]	; (8001b24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001b02:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001b06:	4613      	mov	r3, r2
 8001b08:	3a01      	subs	r2, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f2      	bne.n	8001af4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 8001b0e:	1e43      	subs	r3, r0, #1
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d1ec      	bne.n	8001aee <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 8001b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b18:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <_ZN20TouchGFXGeneratedHALD1Ev>:
 8001b28:	4a02      	ldr	r2, [pc, #8]	; (8001b34 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 8001b2a:	6002      	str	r2, [r0, #0]
 8001b2c:	4a02      	ldr	r2, [pc, #8]	; (8001b38 <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 8001b2e:	6002      	str	r2, [r0, #0]
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	0802516c 	.word	0x0802516c
 8001b38:	08026b08 	.word	0x08026b08

08001b3c <_Z41__static_initialization_and_destruction_0ii>:
            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
}
 8001b3c:	2801      	cmp	r0, #1
 8001b3e:	d006      	beq.n	8001b4e <_Z41__static_initialization_and_destruction_0ii+0x12>

/**
 * The layout for the CustomKeyboard.
 */
static const Keyboard::Layout layout =
 8001b40:	b920      	cbnz	r0, 8001b4c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8001b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b46:	4299      	cmp	r1, r3
 8001b48:	f000 8222 	beq.w	8001f90 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8001b4c:	4770      	bx	lr
 8001b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b52:	4299      	cmp	r1, r3
 8001b54:	d1f4      	bne.n	8001b40 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8001b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8001b5a:	4bf0      	ldr	r3, [pc, #960]	; (8001f1c <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001b60:	240c      	movs	r4, #12
 8001b62:	805c      	strh	r4, [r3, #2]
 8001b64:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8001b68:	f8a3 e004 	strh.w	lr, [r3, #4]
 8001b6c:	2224      	movs	r2, #36	; 0x24
 8001b6e:	80da      	strh	r2, [r3, #6]
 8001b70:	811a      	strh	r2, [r3, #8]
 8001b72:	f04f 0c06 	mov.w	ip, #6
 8001b76:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8001b7a:	2502      	movs	r5, #2
 8001b7c:	731d      	strb	r5, [r3, #12]
 8001b7e:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8001b82:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8001b86:	f8a3 e010 	strh.w	lr, [r3, #16]
 8001b8a:	825a      	strh	r2, [r3, #18]
 8001b8c:	829a      	strh	r2, [r3, #20]
 8001b8e:	f8a3 c016 	strh.w	ip, [r3, #22]
 8001b92:	f04f 0503 	mov.w	r5, #3
 8001b96:	761d      	strb	r5, [r3, #24]
 8001b98:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001b9c:	835e      	strh	r6, [r3, #26]
 8001b9e:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8001ba2:	83da      	strh	r2, [r3, #30]
 8001ba4:	841a      	strh	r2, [r3, #32]
 8001ba6:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8001baa:	f04f 0504 	mov.w	r5, #4
 8001bae:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8001bb2:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8001bb6:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8001bba:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8001bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bc0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001bc2:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8001bc6:	f04f 0505 	mov.w	r5, #5
 8001bca:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8001bce:	27b4      	movs	r7, #180	; 0xb4
 8001bd0:	865f      	strh	r7, [r3, #50]	; 0x32
 8001bd2:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8001bd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bd8:	871a      	strh	r2, [r3, #56]	; 0x38
 8001bda:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8001bde:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 8001be2:	f04f 05de 	mov.w	r5, #222	; 0xde
 8001be6:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8001be8:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8001bec:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8001bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001bf4:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8001bf8:	f04f 0907 	mov.w	r9, #7
 8001bfc:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8001c00:	f44f 7984 	mov.w	r9, #264	; 0x108
 8001c04:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8001c08:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8001c0c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8001c10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8001c14:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8001c18:	f04f 0b08 	mov.w	fp, #8
 8001c1c:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8001c20:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8001c24:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8001c28:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8001c2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8001c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001c34:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8001c38:	2509      	movs	r5, #9
 8001c3a:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8001c3e:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8001c42:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8001c46:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8001c4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001c52:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8001c56:	250a      	movs	r5, #10
 8001c58:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8001c5c:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8001c60:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8001c64:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8001c68:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8001c6c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001c70:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8001c74:	f04f 090b 	mov.w	r9, #11
 8001c78:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8001c7c:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8001c80:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8001c84:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8001c88:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001c8c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001c90:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8001c94:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8001c98:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8001c9c:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8001ca0:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8001ca4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8001ca8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8001cac:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8001cb0:	f04f 060d 	mov.w	r6, #13
 8001cb4:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8001cb8:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8001cbc:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8001cc0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8001cc4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8001cc8:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8001ccc:	f04f 0a0e 	mov.w	sl, #14
 8001cd0:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8001cd4:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001cd8:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8001cdc:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8001ce0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001ce4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8001ce8:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8001cec:	f04f 0a0f 	mov.w	sl, #15
 8001cf0:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8001cf4:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8001cf8:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8001cfc:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8001d00:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8001d04:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8001d08:	f04f 0a10 	mov.w	sl, #16
 8001d0c:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8001d10:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8001d14:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8001d18:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8001d1c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8001d20:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8001d24:	f04f 0a11 	mov.w	sl, #17
 8001d28:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8001d2c:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001d30:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8001d34:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8001d38:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8001d3c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8001d40:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8001d44:	f04f 0a12 	mov.w	sl, #18
 8001d48:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8001d4c:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001d50:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8001d54:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8001d58:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8001d5c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001d60:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8001d64:	f04f 0a13 	mov.w	sl, #19
 8001d68:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8001d6c:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8001d70:	4656      	mov	r6, sl
 8001d72:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8001d76:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8001d7a:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001d7e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001d82:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8001d86:	f04f 0a14 	mov.w	sl, #20
 8001d8a:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8001d8e:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8001d92:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8001d96:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8001d9a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8001d9e:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8001da2:	f04f 0a15 	mov.w	sl, #21
 8001da6:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8001daa:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8001dae:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8001db2:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001db6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8001dba:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8001dbe:	f04f 0a16 	mov.w	sl, #22
 8001dc2:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8001dc6:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8001dca:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8001dce:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8001dd2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8001dd6:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8001dda:	f04f 0e17 	mov.w	lr, #23
 8001dde:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8001de2:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8001de6:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8001dea:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8001dee:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8001df2:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8001df6:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8001dfa:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8001dfe:	f04f 0918 	mov.w	r9, #24
 8001e02:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8001e06:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8001e0a:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8001e0e:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8001e12:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8001e16:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8001e1a:	f04f 0819 	mov.w	r8, #25
 8001e1e:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8001e22:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8001e26:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8001e2a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8001e2e:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8001e32:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8001e36:	271a      	movs	r7, #26
 8001e38:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8001e3c:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001e40:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8001e44:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8001e48:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8001e4c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8001e50:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8001e54:	271b      	movs	r7, #27
 8001e56:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8001e5a:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001e5e:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8001e62:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8001e66:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8001e6a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8001e6e:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8001e72:	271c      	movs	r7, #28
 8001e74:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8001e78:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8001e7c:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8001e80:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001e84:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001e88:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8001e8c:	271d      	movs	r7, #29
 8001e8e:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8001e92:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8001e96:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8001e9a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8001e9e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001ea2:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8001ea6:	271e      	movs	r7, #30
 8001ea8:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8001eac:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001eb0:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8001eb4:	26e2      	movs	r6, #226	; 0xe2
 8001eb6:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8001eba:	f44f 7790 	mov.w	r7, #288	; 0x120
 8001ebe:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8001ec2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001ec6:	f04f 0708 	mov.w	r7, #8
 8001eca:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8001ed0:	801c      	strh	r4, [r3, #0]
 8001ed2:	f8a3 e002 	strh.w	lr, [r3, #2]
 8001ed6:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8001eda:	f8a3 c004 	strh.w	ip, [r3, #4]
 8001ede:	80da      	strh	r2, [r3, #6]
};
 8001ee0:	2700      	movs	r7, #0
 8001ee2:	609f      	str	r7, [r3, #8]
 8001ee4:	f04f 0804 	mov.w	r8, #4
 8001ee8:	f8a3 800c 	strh.w	r8, [r3, #12]
 8001eec:	821d      	strh	r5, [r3, #16]
 8001eee:	f8a3 e012 	strh.w	lr, [r3, #18]
 8001ef2:	f8a3 c014 	strh.w	ip, [r3, #20]
 8001ef6:	82da      	strh	r2, [r3, #22]
 8001ef8:	619f      	str	r7, [r3, #24]
 8001efa:	f04f 0e03 	mov.w	lr, #3
 8001efe:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8001f02:	841c      	strh	r4, [r3, #32]
 8001f04:	845e      	strh	r6, [r3, #34]	; 0x22
 8001f06:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8001f0a:	84da      	strh	r2, [r3, #38]	; 0x26
 8001f0c:	629f      	str	r7, [r3, #40]	; 0x28
 8001f0e:	f04f 0407 	mov.w	r4, #7
 8001f12:	859c      	strh	r4, [r3, #44]	; 0x2c
 8001f14:	861d      	strh	r5, [r3, #48]	; 0x30
 8001f16:	865e      	strh	r6, [r3, #50]	; 0x32
 8001f18:	e004      	b.n	8001f24 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8001f1a:	bf00      	nop
 8001f1c:	24004d90 	.word	0x24004d90
 8001f20:	24004d00 	.word	0x24004d00
 8001f24:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8001f28:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f2a:	639f      	str	r7, [r3, #56]	; 0x38
 8001f2c:	f04f 0205 	mov.w	r2, #5
 8001f30:	879a      	strh	r2, [r3, #60]	; 0x3c
 8001f32:	4604      	mov	r4, r0
 8001f34:	3340      	adds	r3, #64	; 0x40
 8001f36:	2c00      	cmp	r4, #0
 8001f38:	db0b      	blt.n	8001f52 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	805a      	strh	r2, [r3, #2]
 8001f48:	809a      	strh	r2, [r3, #4]
 8001f4a:	80da      	strh	r2, [r3, #6]
 8001f4c:	3310      	adds	r3, #16
 8001f4e:	3c01      	subs	r4, #1
 8001f50:	e7f1      	b.n	8001f36 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f54:	2205      	movs	r2, #5
 8001f56:	825a      	strh	r2, [r3, #18]
 8001f58:	222d      	movs	r2, #45	; 0x2d
 8001f5a:	829a      	strh	r2, [r3, #20]
 8001f5c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001f60:	82da      	strh	r2, [r3, #22]
 8001f62:	2246      	movs	r2, #70	; 0x46
 8001f64:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8001f66:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f68:	61da      	str	r2, [r3, #28]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	841a      	strh	r2, [r3, #32]
        : color(col)
 8001f6e:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24
 8001f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8001f7a:	b918      	cbnz	r0, 8001f84 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8001f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f80:	4299      	cmp	r1, r3
 8001f82:	d001      	beq.n	8001f88 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8001f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f8c:	61da      	str	r2, [r3, #28]
 8001f8e:	e7f9      	b.n	8001f84 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f92:	4a02      	ldr	r2, [pc, #8]	; (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f94:	61da      	str	r2, [r3, #28]
 8001f96:	4770      	bx	lr
 8001f98:	24004d60 	.word	0x24004d60
 8001f9c:	08024f38 	.word	0x08024f38

08001fa0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001fa0:	b538      	push	{r3, r4, r5, lr}
 8001fa2:	4604      	mov	r4, r0
    HAL::initialize();
 8001fa4:	f012 fb61 	bl	801466a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8001fac:	f015 ffc2 	bl	8017f34 <_ZN8touchgfx11Application11getInstanceEv>
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	4a02      	ldr	r2, [pc, #8]	; (8001fc8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 8001fc0:	4902      	ldr	r1, [pc, #8]	; (8001fcc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	47a8      	blx	r5
}
 8001fc6:	bd38      	pop	{r3, r4, r5, pc}
 8001fc8:	2409fa00 	.word	0x2409fa00
 8001fcc:	24040000 	.word	0x24040000

08001fd0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 8001fd0:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 8001fd2:	f012 fb31 	bl	8014638 <_ZN8touchgfx3HAL10beginFrameEv>
}
 8001fd6:	bd08      	pop	{r3, pc}

08001fd8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8001fd8:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 8001fda:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8001fde:	b113      	cbz	r3, 8001fe6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 8001fe0:	4b02      	ldr	r3, [pc, #8]	; (8001fec <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8001fe6:	f012 fb33 	bl	8014650 <_ZN8touchgfx3HAL8endFrameEv>
}
 8001fea:	bd08      	pop	{r3, pc}
 8001fec:	24004ef8 	.word	0x24004ef8

08001ff0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001ff0:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 8001ff2:	f012 faea 	bl	80145ca <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ffe:	d021      	beq.n	8002044 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002008:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800200c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002010:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8002014:	e000      	b.n	8002018 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 8002016:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002018:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800201c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002020:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8002024:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8002028:	4907      	ldr	r1, [pc, #28]	; (8002048 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 800202a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800202e:	4613      	mov	r3, r2
 8002030:	3a01      	subs	r2, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f2      	bne.n	800201c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 8002036:	1e43      	subs	r3, r0, #1
 8002038:	2800      	cmp	r0, #0
 800203a:	d1ec      	bne.n	8002016 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 800203c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002040:	f3bf 8f6f 	isb	sy
}
 8002044:	bd10      	pop	{r4, pc}
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 800204c:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 800204e:	f012 fc26 	bl	801489e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8002052:	bd08      	pop	{r3, pc}

08002054 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8002054:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8002056:	f012 fab2 	bl	80145be <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800205a:	bd08      	pop	{r3, pc}

0800205c <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800205c:	b510      	push	{r4, lr}
 800205e:	4604      	mov	r4, r0
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 8002062:	6003      	str	r3, [r0, #0]
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 8002066:	6003      	str	r3, [r0, #0]
 8002068:	217c      	movs	r1, #124	; 0x7c
 800206a:	f021 f8e4 	bl	8023236 <_ZdlPvj>
 800206e:	4620      	mov	r0, r4
 8002070:	bd10      	pop	{r4, pc}
 8002072:	bf00      	nop
 8002074:	0802516c 	.word	0x0802516c
 8002078:	08026b08 	.word	0x08026b08

0800207c <HAL_LTDC_LineEventCallback>:
        return instance;
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_LTDC_LineEventCallback+0x54>)
 800207e:	681b      	ldr	r3, [r3, #0]
        if (!HAL::getInstance())
 8002080:	b32b      	cbz	r3, 80020ce <HAL_LTDC_LineEventCallback+0x52>
    {
 8002082:	b510      	push	{r4, lr}
        if (LTDC->LIPCR == lcd_int_active_line)
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_LTDC_LineEventCallback+0x58>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	4a13      	ldr	r2, [pc, #76]	; (80020d8 <HAL_LTDC_LineEventCallback+0x5c>)
 800208a:	8811      	ldrh	r1, [r2, #0]
 800208c:	428b      	cmp	r3, r1
 800208e:	d00a      	beq.n	80020a6 <HAL_LTDC_LineEventCallback+0x2a>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002090:	f009 fed2 	bl	800be38 <HAL_LTDC_ProgramLineEvent>
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_LTDC_LineEventCallback+0x54>)
 8002096:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 8002098:	6803      	ldr	r3, [r0, #0]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7fe fa4e 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80020a4:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_LTDC_LineEventCallback+0x60>)
 80020a8:	8819      	ldrh	r1, [r3, #0]
 80020aa:	f009 fec5 	bl	800be38 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80020ae:	4c08      	ldr	r4, [pc, #32]	; (80020d0 <HAL_LTDC_LineEventCallback+0x54>)
 80020b0:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80020b2:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80020b6:	3301      	adds	r3, #1
 80020b8:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80020bc:	f7fe fc2a 	bl	8000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80020c0:	6820      	ldr	r0, [r4, #0]
 80020c2:	f013 f823 	bl	801510c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7fe f9fc 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80020cc:	e7ea      	b.n	80020a4 <HAL_LTDC_LineEventCallback+0x28>
 80020ce:	4770      	bx	lr
 80020d0:	2400fee4 	.word	0x2400fee4
 80020d4:	50001000 	.word	0x50001000
 80020d8:	24004efc 	.word	0x24004efc
 80020dc:	24004efa 	.word	0x24004efa

080020e0 <_GLOBAL__sub_I__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
}
 80020e0:	b508      	push	{r3, lr}
 80020e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7ff fd28 	bl	8001b3c <_Z41__static_initialization_and_destruction_0ii>
 80020ec:	bd08      	pop	{r3, pc}

080020ee <_GLOBAL__sub_D__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
 80020ee:	b508      	push	{r3, lr}
 80020f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff fd21 	bl	8001b3c <_Z41__static_initialization_and_destruction_0ii>
 80020fa:	bd08      	pop	{r3, pc}

080020fc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80020fc:	b530      	push	{r4, r5, lr}
 80020fe:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002100:	2400      	movs	r4, #0
 8002102:	9400      	str	r4, [sp, #0]
 8002104:	9401      	str	r4, [sp, #4]
 8002106:	9402      	str	r4, [sp, #8]
 8002108:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800210a:	f008 fb17 	bl	800a73c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800210e:	2501      	movs	r5, #1
 8002110:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002114:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8002118:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800211c:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800211e:	231b      	movs	r3, #27
 8002120:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002124:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002128:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800212c:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002130:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002134:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002138:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800213c:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002140:	4668      	mov	r0, sp
 8002142:	f008 fb19 	bl	800a778 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002146:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800214a:	2319      	movs	r3, #25
 800214c:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002150:	2403      	movs	r4, #3
 8002152:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002156:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800215a:	4668      	mov	r0, sp
 800215c:	f008 fb0c 	bl	800a778 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002160:	2302      	movs	r3, #2
 8002162:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8002166:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800216a:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800216c:	2313      	movs	r3, #19
 800216e:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002172:	4668      	mov	r0, sp
 8002174:	f008 fb00 	bl	800a778 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8002178:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800217c:	2311      	movs	r3, #17
 800217e:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002182:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002186:	4668      	mov	r0, sp
 8002188:	f008 faf6 	bl	800a778 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800218c:	2004      	movs	r0, #4
 800218e:	f008 fae3 	bl	800a758 <HAL_MPU_Enable>

}
 8002192:	b005      	add	sp, #20
 8002194:	bd30      	pop	{r4, r5, pc}
	...

08002198 <MX_CRC_Init>:
{
 8002198:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800219a:	4806      	ldr	r0, [pc, #24]	; (80021b4 <MX_CRC_Init+0x1c>)
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <MX_CRC_Init+0x20>)
 800219e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80021a4:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80021a6:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80021a8:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80021aa:	2301      	movs	r3, #1
 80021ac:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021ae:	f008 fb13 	bl	800a7d8 <HAL_CRC_Init>
}
 80021b2:	bd08      	pop	{r3, pc}
 80021b4:	24004f10 	.word	0x24004f10
 80021b8:	40023000 	.word	0x40023000

080021bc <MX_GPIO_Init>:
{
 80021bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021c0:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c2:	2400      	movs	r4, #0
 80021c4:	9409      	str	r4, [sp, #36]	; 0x24
 80021c6:	940a      	str	r4, [sp, #40]	; 0x28
 80021c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80021ca:	940c      	str	r4, [sp, #48]	; 0x30
 80021cc:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021ce:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <MX_GPIO_Init+0x1ec>)
 80021d0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021dc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021e0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80021e4:	9201      	str	r2, [sp, #4]
 80021e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80021e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021f4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021f8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80021fc:	9202      	str	r2, [sp, #8]
 80021fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002200:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002208:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800220c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002210:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002214:	9203      	str	r2, [sp, #12]
 8002216:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002218:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800221c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002220:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002224:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002228:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800222c:	9204      	str	r2, [sp, #16]
 800222e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002230:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002234:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002238:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800223c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002240:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002244:	9205      	str	r2, [sp, #20]
 8002246:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002254:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002258:	f002 0201 	and.w	r2, r2, #1
 800225c:	9206      	str	r2, [sp, #24]
 800225e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002260:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002264:	f042 0204 	orr.w	r2, r2, #4
 8002268:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800226c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002270:	f002 0204 	and.w	r2, r2, #4
 8002274:	9207      	str	r2, [sp, #28]
 8002276:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002278:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800227c:	f042 0208 	orr.w	r2, r2, #8
 8002280:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002284:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	9308      	str	r3, [sp, #32]
 800228e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|FRAME_RATE_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8002290:	4e46      	ldr	r6, [pc, #280]	; (80023ac <MX_GPIO_Init+0x1f0>)
 8002292:	4622      	mov	r2, r4
 8002294:	f240 210e 	movw	r1, #526	; 0x20e
 8002298:	4630      	mov	r0, r6
 800229a:	f008 ff70 	bl	800b17e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800229e:	f8df a118 	ldr.w	sl, [pc, #280]	; 80023b8 <MX_GPIO_Init+0x1fc>
 80022a2:	4622      	mov	r2, r4
 80022a4:	f640 0104 	movw	r1, #2052	; 0x804
 80022a8:	4650      	mov	r0, sl
 80022aa:	f008 ff68 	bl	800b17e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80022ae:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80023bc <MX_GPIO_Init+0x200>
 80022b2:	4622      	mov	r2, r4
 80022b4:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 80022b8:	4640      	mov	r0, r8
 80022ba:	f008 ff60 	bl	800b17e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80022be:	4f3c      	ldr	r7, [pc, #240]	; (80023b0 <MX_GPIO_Init+0x1f4>)
 80022c0:	4622      	mov	r2, r4
 80022c2:	2106      	movs	r1, #6
 80022c4:	4638      	mov	r0, r7
 80022c6:	f008 ff5a 	bl	800b17e <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80022ca:	2330      	movs	r3, #48	; 0x30
 80022cc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022ce:	f44f 1988 	mov.w	r9, #1114112	; 0x110000
 80022d2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022d8:	a909      	add	r1, sp, #36	; 0x24
 80022da:	4630      	mov	r0, r6
 80022dc:	f008 fd90 	bl	800ae00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 80022e0:	230e      	movs	r3, #14
 80022e2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2501      	movs	r5, #1
 80022e6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022ec:	a909      	add	r1, sp, #36	; 0x24
 80022ee:	4630      	mov	r0, r6
 80022f0:	f008 fd86 	bl	800ae00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80022f4:	f640 0304 	movw	r3, #2052	; 0x804
 80022f8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fa:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002300:	a909      	add	r1, sp, #36	; 0x24
 8002302:	4650      	mov	r0, sl
 8002304:	f008 fd7c 	bl	800ae00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8002308:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 800230c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	f04f 0a03 	mov.w	sl, #3
 8002316:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800231a:	a909      	add	r1, sp, #36	; 0x24
 800231c:	4640      	mov	r0, r8
 800231e:	f008 fd6f 	bl	800ae00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8002322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002326:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002328:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8002330:	a909      	add	r1, sp, #36	; 0x24
 8002332:	4630      	mov	r0, r6
 8002334:	f008 fd64 	bl	800ae00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8002338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800233c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800233e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002344:	a909      	add	r1, sp, #36	; 0x24
 8002346:	481b      	ldr	r0, [pc, #108]	; (80023b4 <MX_GPIO_Init+0x1f8>)
 8002348:	f008 fd5a 	bl	800ae00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800234c:	2604      	movs	r6, #4
 800234e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002350:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002354:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002356:	a909      	add	r1, sp, #36	; 0x24
 8002358:	4640      	mov	r0, r8
 800235a:	f008 fd51 	bl	800ae00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800235e:	2302      	movs	r3, #2
 8002360:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002368:	a909      	add	r1, sp, #36	; 0x24
 800236a:	4638      	mov	r0, r7
 800236c:	f008 fd48 	bl	800ae00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8002370:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002374:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8002378:	a909      	add	r1, sp, #36	; 0x24
 800237a:	4638      	mov	r0, r7
 800237c:	f008 fd40 	bl	800ae00 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002380:	4622      	mov	r2, r4
 8002382:	2105      	movs	r1, #5
 8002384:	2017      	movs	r0, #23
 8002386:	f008 f983 	bl	800a690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800238a:	2017      	movs	r0, #23
 800238c:	f008 f9b6 	bl	800a6fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002390:	4622      	mov	r2, r4
 8002392:	2105      	movs	r1, #5
 8002394:	2028      	movs	r0, #40	; 0x28
 8002396:	f008 f97b 	bl	800a690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800239a:	2028      	movs	r0, #40	; 0x28
 800239c:	f008 f9ae 	bl	800a6fc <HAL_NVIC_EnableIRQ>
}
 80023a0:	b00e      	add	sp, #56	; 0x38
 80023a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023a6:	bf00      	nop
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58022000 	.word	0x58022000
 80023b0:	58020000 	.word	0x58020000
 80023b4:	58020800 	.word	0x58020800
 80023b8:	58021800 	.word	0x58021800
 80023bc:	58021c00 	.word	0x58021c00

080023c0 <MX_DMA2D_Init>:
{
 80023c0:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 80023c2:	4c0b      	ldr	r4, [pc, #44]	; (80023f0 <MX_DMA2D_Init+0x30>)
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <MX_DMA2D_Init+0x34>)
 80023c6:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80023c8:	2300      	movs	r3, #0
 80023ca:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80023cc:	2202      	movs	r2, #2
 80023ce:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 80023d0:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80023d2:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80023d4:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80023d6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80023d8:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80023da:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80023dc:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80023de:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80023e0:	4620      	mov	r0, r4
 80023e2:	f008 fba9 	bl	800ab38 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80023e6:	2101      	movs	r1, #1
 80023e8:	4620      	mov	r0, r4
 80023ea:	f008 fc87 	bl	800acfc <HAL_DMA2D_ConfigLayer>
}
 80023ee:	bd10      	pop	{r4, pc}
 80023f0:	24004f34 	.word	0x24004f34
 80023f4:	52001000 	.word	0x52001000

080023f8 <MX_LTDC_Init>:
{
 80023f8:	b530      	push	{r4, r5, lr}
 80023fa:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80023fc:	2234      	movs	r2, #52	; 0x34
 80023fe:	2100      	movs	r1, #0
 8002400:	a801      	add	r0, sp, #4
 8002402:	f021 f8dd 	bl	80235c0 <memset>
  hltdc.Instance = LTDC;
 8002406:	4c23      	ldr	r4, [pc, #140]	; (8002494 <MX_LTDC_Init+0x9c>)
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <MX_LTDC_Init+0xa0>)
 800240a:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800240c:	2500      	movs	r5, #0
 800240e:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002410:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002412:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002414:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 8002416:	2328      	movs	r3, #40	; 0x28
 8002418:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 800241a:	2309      	movs	r3, #9
 800241c:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 800241e:	232a      	movs	r3, #42	; 0x2a
 8002420:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002422:	230b      	movs	r3, #11
 8002424:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8002426:	f240 230a 	movw	r3, #522	; 0x20a
 800242a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800242c:	f240 131b 	movw	r3, #283	; 0x11b
 8002430:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8002432:	f240 232a 	movw	r3, #554	; 0x22a
 8002436:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002438:	f240 131d 	movw	r3, #285	; 0x11d
 800243c:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800243e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002442:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002446:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800244a:	4620      	mov	r0, r4
 800244c:	f009 fbd6 	bl	800bbfc <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8002450:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8002452:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002456:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8002458:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 800245a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800245e:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002460:	2301      	movs	r3, #1
 8002462:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8002464:	23ff      	movs	r3, #255	; 0xff
 8002466:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8002468:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800246a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800246e:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002470:	2005      	movs	r0, #5
 8002472:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002474:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002476:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002478:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 800247a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800247e:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002482:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002486:	462a      	mov	r2, r5
 8002488:	a901      	add	r1, sp, #4
 800248a:	4620      	mov	r0, r4
 800248c:	f009 fc9f 	bl	800bdce <HAL_LTDC_ConfigLayer>
}
 8002490:	b00f      	add	sp, #60	; 0x3c
 8002492:	bd30      	pop	{r4, r5, pc}
 8002494:	24004fe8 	.word	0x24004fe8
 8002498:	50001000 	.word	0x50001000

0800249c <MX_I2C4_Init>:
{
 800249c:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 800249e:	4c0d      	ldr	r4, [pc, #52]	; (80024d4 <MX_I2C4_Init+0x38>)
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <MX_I2C4_Init+0x3c>)
 80024a2:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <MX_I2C4_Init+0x40>)
 80024a6:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80024a8:	2500      	movs	r5, #0
 80024aa:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ac:	2301      	movs	r3, #1
 80024ae:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b0:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80024b2:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024b4:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b6:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b8:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80024ba:	4620      	mov	r0, r4
 80024bc:	f009 f83e 	bl	800b53c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80024c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024c4:	4620      	mov	r0, r4
 80024c6:	f009 fa62 	bl	800b98e <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80024ca:	4629      	mov	r1, r5
 80024cc:	4620      	mov	r0, r4
 80024ce:	f009 fa8c 	bl	800b9ea <HAL_I2CEx_ConfigDigitalFilter>
}
 80024d2:	bd38      	pop	{r3, r4, r5, pc}
 80024d4:	24004f9c 	.word	0x24004f9c
 80024d8:	58001c00 	.word	0x58001c00
 80024dc:	30808bd0 	.word	0x30808bd0

080024e0 <MX_OCTOSPI1_Init>:
{
 80024e0:	b530      	push	{r4, r5, lr}
 80024e2:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 80024e4:	4814      	ldr	r0, [pc, #80]	; (8002538 <MX_OCTOSPI1_Init+0x58>)
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <MX_OCTOSPI1_Init+0x5c>)
 80024e8:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 80024ea:	2501      	movs	r5, #1
 80024ec:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80024ee:	2400      	movs	r4, #0
 80024f0:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80024f2:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 80024f4:	231a      	movs	r3, #26
 80024f6:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80024f8:	2302      	movs	r3, #2
 80024fa:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80024fc:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80024fe:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8002500:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 8002502:	2303      	movs	r3, #3
 8002504:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002506:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002508:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800250a:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800250c:	2308      	movs	r3, #8
 800250e:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8002510:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8002512:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002514:	f00a f90e 	bl	800c734 <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8002518:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 800251c:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8002520:	4620      	mov	r0, r4
 8002522:	f007 fe07 	bl	800a134 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8002526:	a901      	add	r1, sp, #4
 8002528:	4620      	mov	r0, r4
 800252a:	f007 fe7d 	bl	800a228 <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 800252e:	4620      	mov	r0, r4
 8002530:	f007 fda8 	bl	800a084 <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8002534:	b003      	add	sp, #12
 8002536:	bd30      	pop	{r4, r5, pc}
 8002538:	24005090 	.word	0x24005090
 800253c:	52005000 	.word	0x52005000

08002540 <MX_SPI2_Init>:
{
 8002540:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8002542:	4812      	ldr	r0, [pc, #72]	; (800258c <MX_SPI2_Init+0x4c>)
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <MX_SPI2_Init+0x50>)
 8002546:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002548:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800254c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800254e:	2300      	movs	r3, #0
 8002550:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002552:	220f      	movs	r2, #15
 8002554:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002556:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002558:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800255a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800255e:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002560:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002564:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002566:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002568:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800256a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800256c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800256e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002572:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002574:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002576:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002578:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800257a:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800257c:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800257e:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002580:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002582:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002584:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002586:	f00b fe51 	bl	800e22c <HAL_SPI_Init>
}
 800258a:	bd08      	pop	{r3, pc}
 800258c:	240050ec 	.word	0x240050ec
 8002590:	40003800 	.word	0x40003800

08002594 <SystemClock_Config>:
{
 8002594:	b510      	push	{r4, lr}
 8002596:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002598:	224c      	movs	r2, #76	; 0x4c
 800259a:	2100      	movs	r1, #0
 800259c:	a809      	add	r0, sp, #36	; 0x24
 800259e:	f021 f80f 	bl	80235c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025a2:	2220      	movs	r2, #32
 80025a4:	2100      	movs	r1, #0
 80025a6:	a801      	add	r0, sp, #4
 80025a8:	f021 f80a 	bl	80235c0 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <SystemClock_Config+0xa8>)
 80025ae:	f04f 32ff 	mov.w	r2, #4294967295
 80025b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80025b6:	2004      	movs	r0, #4
 80025b8:	f00a f940 	bl	800c83c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025bc:	2300      	movs	r3, #0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <SystemClock_Config+0xac>)
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80025c8:	619a      	str	r2, [r3, #24]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <SystemClock_Config+0xac>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80025dc:	d0fa      	beq.n	80025d4 <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <SystemClock_Config+0xa8>)
 80025e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80025e2:	f023 0303 	bic.w	r3, r3, #3
 80025e6:	f043 0302 	orr.w	r3, r3, #2
 80025ea:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025ec:	2301      	movs	r3, #1
 80025ee:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025f6:	2302      	movs	r3, #2
 80025f8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025fa:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80025fc:	220c      	movs	r2, #12
 80025fe:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8002600:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002604:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002606:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002608:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800260a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800260c:	2304      	movs	r3, #4
 800260e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002610:	2400      	movs	r4, #0
 8002612:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002614:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002616:	a809      	add	r0, sp, #36	; 0x24
 8002618:	f00a f95a 	bl	800c8d0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800261c:	233f      	movs	r3, #63	; 0x3f
 800261e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002620:	2103      	movs	r1, #3
 8002622:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002624:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002626:	2308      	movs	r3, #8
 8002628:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800262a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800262c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800262e:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002630:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002632:	a801      	add	r0, sp, #4
 8002634:	f00a fd58 	bl	800d0e8 <HAL_RCC_ClockConfig>
}
 8002638:	b01c      	add	sp, #112	; 0x70
 800263a:	bd10      	pop	{r4, pc}
 800263c:	58024400 	.word	0x58024400
 8002640:	58024800 	.word	0x58024800

08002644 <main>:
{
 8002644:	b508      	push	{r3, lr}
  MPU_Config();
 8002646:	f7ff fd59 	bl	80020fc <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800264a:	4b3f      	ldr	r3, [pc, #252]	; (8002748 <main+0x104>)
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002652:	d113      	bne.n	800267c <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8002654:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002658:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800265c:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <main+0x104>)
 800265e:	2200      	movs	r2, #0
 8002660:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002664:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002668:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002672:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002678:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <main+0x104>)
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002684:	d127      	bne.n	80026d6 <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002686:	4b30      	ldr	r3, [pc, #192]	; (8002748 <main+0x104>)
 8002688:	2200      	movs	r2, #0
 800268a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800268e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002692:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002696:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800269a:	e000      	b.n	800269e <main+0x5a>
    } while(sets-- != 0U);
 800269c:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800269e:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80026a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80026a6:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80026aa:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80026ae:	4926      	ldr	r1, [pc, #152]	; (8002748 <main+0x104>)
 80026b0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80026b4:	4613      	mov	r3, r2
 80026b6:	3a01      	subs	r2, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f2      	bne.n	80026a2 <main+0x5e>
    } while(sets-- != 0U);
 80026bc:	1e43      	subs	r3, r0, #1
 80026be:	2800      	cmp	r0, #0
 80026c0:	d1ec      	bne.n	800269c <main+0x58>
 80026c2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80026c6:	694b      	ldr	r3, [r1, #20]
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	614b      	str	r3, [r1, #20]
 80026ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026d2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80026d6:	f007 ff75 	bl	800a5c4 <HAL_Init>
  SystemClock_Config();
 80026da:	f7ff ff5b 	bl	8002594 <SystemClock_Config>
  MX_CRC_Init();
 80026de:	f7ff fd5b 	bl	8002198 <MX_CRC_Init>
  MX_GPIO_Init();
 80026e2:	f7ff fd6b 	bl	80021bc <MX_GPIO_Init>
  MX_DMA2D_Init();
 80026e6:	f7ff fe6b 	bl	80023c0 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80026ea:	f7ff fe85 	bl	80023f8 <MX_LTDC_Init>
  MX_I2C4_Init();
 80026ee:	f7ff fed5 	bl	800249c <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 80026f2:	f7ff fef5 	bl	80024e0 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 80026f6:	f7ff ff23 	bl	8002540 <MX_SPI2_Init>
  MX_TouchGFX_Init();
 80026fa:	f7fd fe8b 	bl	8000414 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80026fe:	f7fd fe88 	bl	8000412 <MX_TouchGFX_PreOSInit>
  wifi_initialise();
 8002702:	f000 fead 	bl	8003460 <wifi_initialise>
  osKernelInitialize();
 8002706:	f00c fe23 	bl	800f350 <osKernelInitialize>
  GUI_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &GUI_Queue_attributes);
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <main+0x108>)
 800270c:	2101      	movs	r1, #1
 800270e:	200a      	movs	r0, #10
 8002710:	f00c ff69 	bl	800f5e6 <osMessageQueueNew>
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <main+0x10c>)
 8002716:	6018      	str	r0, [r3, #0]
  WiFi_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &WiFi_Queue_attributes);
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <main+0x110>)
 800271a:	2101      	movs	r1, #1
 800271c:	200a      	movs	r0, #10
 800271e:	f00c ff62 	bl	800f5e6 <osMessageQueueNew>
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <main+0x114>)
 8002724:	6018      	str	r0, [r3, #0]
  WiFi_TaskHandle = osThreadNew(esWiFi_Task, NULL, &WiFi_Task_attributes);
 8002726:	4a0d      	ldr	r2, [pc, #52]	; (800275c <main+0x118>)
 8002728:	2100      	movs	r1, #0
 800272a:	480d      	ldr	r0, [pc, #52]	; (8002760 <main+0x11c>)
 800272c:	f00c fe3e 	bl	800f3ac <osThreadNew>
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <main+0x120>)
 8002732:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <main+0x124>)
 8002736:	2100      	movs	r1, #0
 8002738:	480c      	ldr	r0, [pc, #48]	; (800276c <main+0x128>)
 800273a:	f00c fe37 	bl	800f3ac <osThreadNew>
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <main+0x12c>)
 8002740:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002742:	f00c fe17 	bl	800f374 <osKernelStart>
  while (1)
 8002746:	e7fe      	b.n	8002746 <main+0x102>
 8002748:	e000ed00 	.word	0xe000ed00
 800274c:	0802526c 	.word	0x0802526c
 8002750:	24004f00 	.word	0x24004f00
 8002754:	080252a8 	.word	0x080252a8
 8002758:	24004f08 	.word	0x24004f08
 800275c:	080252c0 	.word	0x080252c0
 8002760:	080034f5 	.word	0x080034f5
 8002764:	24004f0c 	.word	0x24004f0c
 8002768:	08025284 	.word	0x08025284
 800276c:	0800041d 	.word	0x0800041d
 8002770:	24004f04 	.word	0x24004f04

08002774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002776:	6802      	ldr	r2, [r0, #0]
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800277a:	429a      	cmp	r2, r3
 800277c:	d000      	beq.n	8002780 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800277e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002780:	f007 ff4e 	bl	800a620 <HAL_IncTick>
}
 8002784:	e7fb      	b.n	800277e <HAL_TIM_PeriodElapsedCallback+0xa>
 8002786:	bf00      	nop
 8002788:	40001000 	.word	0x40001000

0800278c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800278c:	4770      	bx	lr
	...

08002790 <wait_cmddata_rdy_rising_event>:
}



int32_t wait_cmddata_rdy_rising_event(int32_t timeout)
{
 8002790:	b538      	push	{r3, r4, r5, lr}
 8002792:	4605      	mov	r5, r0
#ifdef SEM_WAIT
    return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
    int32_t tickstart = HAL_GetTick();
 8002794:	f007 ff50 	bl	800a638 <HAL_GetTick>
 8002798:	4604      	mov	r4, r0
    while (cmddata_rdy_rising_event == 1)
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <wait_cmddata_rdy_rising_event+0x28>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <wait_cmddata_rdy_rising_event+0x22>
    {
        if ((HAL_GetTick() - tickstart) > timeout)
 80027a2:	f007 ff49 	bl	800a638 <HAL_GetTick>
 80027a6:	1b00      	subs	r0, r0, r4
 80027a8:	42a8      	cmp	r0, r5
 80027aa:	d9f6      	bls.n	800279a <wait_cmddata_rdy_rising_event+0xa>
        {
            return -1;
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	e000      	b.n	80027b4 <wait_cmddata_rdy_rising_event+0x24>
        }
    }
    return 0;
 80027b2:	2000      	movs	r0, #0
#endif /* SEM_WAIT */
}
 80027b4:	bd38      	pop	{r3, r4, r5, pc}
 80027b6:	bf00      	nop
 80027b8:	2400581c 	.word	0x2400581c

080027bc <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80027bc:	b530      	push	{r4, r5, lr}
 80027be:	b083      	sub	sp, #12
 80027c0:	4604      	mov	r4, r0
    volatile        uint32_t ct = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	9301      	str	r3, [sp, #4]
    uint32_t        loop_per_us = 0;
    static uint32_t cycle_per_loop = 0;

    /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
    /* 10 cycle for STM32L4 */
    if (cycle_per_loop == 0)
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <SPI_WIFI_DelayUs+0x74>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b16b      	cbz	r3, 80027e8 <SPI_WIFI_DelayUs+0x2c>
        {
            cycle_per_loop = 1;
        }
    }

    loop_per_us = SystemCoreClock / 1000000UL / cycle_per_loop;
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <SPI_WIFI_DelayUs+0x78>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4819      	ldr	r0, [pc, #100]	; (8002838 <SPI_WIFI_DelayUs+0x7c>)
 80027d2:	fba0 2303 	umull	r2, r3, r0, r3
 80027d6:	0c9b      	lsrs	r3, r3, #18
 80027d8:	4a15      	ldr	r2, [pc, #84]	; (8002830 <SPI_WIFI_DelayUs+0x74>)
 80027da:	6810      	ldr	r0, [r2, #0]
 80027dc:	fbb3 f3f0 	udiv	r3, r3, r0
    ct = n * loop_per_us;
 80027e0:	fb04 f303 	mul.w	r3, r4, r3
 80027e4:	9301      	str	r3, [sp, #4]
    while (ct)
 80027e6:	e01d      	b.n	8002824 <SPI_WIFI_DelayUs+0x68>
        uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <SPI_WIFI_DelayUs+0x78>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a13      	ldr	r2, [pc, #76]	; (800283c <SPI_WIFI_DelayUs+0x80>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	099b      	lsrs	r3, r3, #6
        ct = cycle_per_ms;
 80027f4:	9301      	str	r3, [sp, #4]
        tick = HAL_GetTick();
 80027f6:	f007 ff1f 	bl	800a638 <HAL_GetTick>
 80027fa:	4605      	mov	r5, r0
        while (ct)
 80027fc:	e002      	b.n	8002804 <SPI_WIFI_DelayUs+0x48>
            ct--;
 80027fe:	9b01      	ldr	r3, [sp, #4]
 8002800:	3b01      	subs	r3, #1
 8002802:	9301      	str	r3, [sp, #4]
        while (ct)
 8002804:	9b01      	ldr	r3, [sp, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f9      	bne.n	80027fe <SPI_WIFI_DelayUs+0x42>
        cycle_per_loop = HAL_GetTick() - tick;
 800280a:	f007 ff15 	bl	800a638 <HAL_GetTick>
 800280e:	1b40      	subs	r0, r0, r5
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <SPI_WIFI_DelayUs+0x74>)
 8002812:	6018      	str	r0, [r3, #0]
        if (cycle_per_loop == 0)
 8002814:	2800      	cmp	r0, #0
 8002816:	d1d9      	bne.n	80027cc <SPI_WIFI_DelayUs+0x10>
            cycle_per_loop = 1;
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	e7d6      	b.n	80027cc <SPI_WIFI_DelayUs+0x10>
    {
        ct--;
 800281e:	9b01      	ldr	r3, [sp, #4]
 8002820:	3b01      	subs	r3, #1
 8002822:	9301      	str	r3, [sp, #4]
    while (ct)
 8002824:	9b01      	ldr	r3, [sp, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f9      	bne.n	800281e <SPI_WIFI_DelayUs+0x62>
    }
    return;
}
 800282a:	b003      	add	sp, #12
 800282c:	bd30      	pop	{r4, r5, pc}
 800282e:	bf00      	nop
 8002830:	24005820 	.word	0x24005820
 8002834:	24000070 	.word	0x24000070
 8002838:	431bde83 	.word	0x431bde83
 800283c:	10624dd3 	.word	0x10624dd3

08002840 <wait_spi_rx_event>:
{
 8002840:	b538      	push	{r3, r4, r5, lr}
 8002842:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002844:	f007 fef8 	bl	800a638 <HAL_GetTick>
 8002848:	4604      	mov	r4, r0
    while (spi_rx_event == 1)
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <wait_spi_rx_event+0x28>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d107      	bne.n	8002862 <wait_spi_rx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002852:	f007 fef1 	bl	800a638 <HAL_GetTick>
 8002856:	1b00      	subs	r0, r0, r4
 8002858:	42a8      	cmp	r0, r5
 800285a:	d9f6      	bls.n	800284a <wait_spi_rx_event+0xa>
            return -1;
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	e000      	b.n	8002864 <wait_spi_rx_event+0x24>
    return 0;
 8002862:	2000      	movs	r0, #0
}
 8002864:	bd38      	pop	{r3, r4, r5, pc}
 8002866:	bf00      	nop
 8002868:	24005824 	.word	0x24005824

0800286c <wait_spi_tx_event>:
{
 800286c:	b538      	push	{r3, r4, r5, lr}
 800286e:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002870:	f007 fee2 	bl	800a638 <HAL_GetTick>
 8002874:	4604      	mov	r4, r0
    while (spi_tx_event == 1)
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <wait_spi_tx_event+0x28>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <wait_spi_tx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 800287e:	f007 fedb 	bl	800a638 <HAL_GetTick>
 8002882:	1b00      	subs	r0, r0, r4
 8002884:	42a8      	cmp	r0, r5
 8002886:	d9f6      	bls.n	8002876 <wait_spi_tx_event+0xa>
            return -1;
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	e000      	b.n	8002890 <wait_spi_tx_event+0x24>
    return 0;
 800288e:	2000      	movs	r0, #0
}
 8002890:	bd38      	pop	{r3, r4, r5, pc}
 8002892:	bf00      	nop
 8002894:	24005828 	.word	0x24005828

08002898 <SPI_WIFI_ResetModule>:
{
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	b082      	sub	sp, #8
    uint32_t tickstart = HAL_GetTick();
 800289c:	f007 fecc 	bl	800a638 <HAL_GetTick>
 80028a0:	4606      	mov	r6, r0
    WIFI_RESET_MODULE();
 80028a2:	4c38      	ldr	r4, [pc, #224]	; (8002984 <SPI_WIFI_ResetModule+0xec>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	2102      	movs	r1, #2
 80028a8:	4620      	mov	r0, r4
 80028aa:	f008 fc68 	bl	800b17e <HAL_GPIO_WritePin>
 80028ae:	200a      	movs	r0, #10
 80028b0:	f007 fec8 	bl	800a644 <HAL_Delay>
 80028b4:	2201      	movs	r2, #1
 80028b6:	2102      	movs	r1, #2
 80028b8:	4620      	mov	r0, r4
 80028ba:	f008 fc60 	bl	800b17e <HAL_GPIO_WritePin>
 80028be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028c2:	f007 febf 	bl	800a644 <HAL_Delay>
    WIFI_ENABLE_NSS();
 80028c6:	2200      	movs	r2, #0
 80028c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028cc:	482e      	ldr	r0, [pc, #184]	; (8002988 <SPI_WIFI_ResetModule+0xf0>)
 80028ce:	f008 fc56 	bl	800b17e <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80028d2:	200a      	movs	r0, #10
 80028d4:	f7ff ff72 	bl	80027bc <SPI_WIFI_DelayUs>
    uint8_t count = 0;
 80028d8:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80028da:	2120      	movs	r1, #32
 80028dc:	4829      	ldr	r0, [pc, #164]	; (8002984 <SPI_WIFI_ResetModule+0xec>)
 80028de:	f008 fc47 	bl	800b170 <HAL_GPIO_ReadPin>
 80028e2:	2801      	cmp	r0, #1
 80028e4:	d11c      	bne.n	8002920 <SPI_WIFI_ResetModule+0x88>
        Status = HAL_SPI_Receive(&hspi2, &Prompt[count], 1, 0xFFFF);
 80028e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ea:	2201      	movs	r2, #1
 80028ec:	eb0d 0104 	add.w	r1, sp, r4
 80028f0:	4826      	ldr	r0, [pc, #152]	; (800298c <SPI_WIFI_ResetModule+0xf4>)
 80028f2:	f00b feef 	bl	800e6d4 <HAL_SPI_Receive>
 80028f6:	4605      	mov	r5, r0
        count += 2;
 80028f8:	3402      	adds	r4, #2
 80028fa:	b2e4      	uxtb	r4, r4
        if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80028fc:	f007 fe9c 	bl	800a638 <HAL_GetTick>
 8002900:	1b83      	subs	r3, r0, r6
 8002902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002906:	d201      	bcs.n	800290c <SPI_WIFI_ResetModule+0x74>
 8002908:	2d00      	cmp	r5, #0
 800290a:	d0e6      	beq.n	80028da <SPI_WIFI_ResetModule+0x42>
            WIFI_DISABLE_NSS();
 800290c:	2201      	movs	r2, #1
 800290e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002912:	481d      	ldr	r0, [pc, #116]	; (8002988 <SPI_WIFI_ResetModule+0xf0>)
 8002914:	f008 fc33 	bl	800b17e <HAL_GPIO_WritePin>
            return -1;
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
}
 800291c:	b002      	add	sp, #8
 800291e:	bd70      	pop	{r4, r5, r6, pc}
    WIFI_DISABLE_NSS();
 8002920:	2201      	movs	r2, #1
 8002922:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002926:	4818      	ldr	r0, [pc, #96]	; (8002988 <SPI_WIFI_ResetModule+0xf0>)
 8002928:	f008 fc29 	bl	800b17e <HAL_GPIO_WritePin>
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800292c:	f89d 3000 	ldrb.w	r3, [sp]
 8002930:	2b15      	cmp	r3, #21
 8002932:	d115      	bne.n	8002960 <SPI_WIFI_ResetModule+0xc8>
 8002934:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002938:	2b15      	cmp	r3, #21
 800293a:	d114      	bne.n	8002966 <SPI_WIFI_ResetModule+0xce>
 800293c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002940:	2b0d      	cmp	r3, #13
 8002942:	d113      	bne.n	800296c <SPI_WIFI_ResetModule+0xd4>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002944:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002948:	2b0a      	cmp	r3, #10
 800294a:	d112      	bne.n	8002972 <SPI_WIFI_ResetModule+0xda>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 800294c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002950:	2b3e      	cmp	r3, #62	; 0x3e
 8002952:	d111      	bne.n	8002978 <SPI_WIFI_ResetModule+0xe0>
 8002954:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002958:	2b20      	cmp	r3, #32
 800295a:	d110      	bne.n	800297e <SPI_WIFI_ResetModule+0xe6>
    return 0;
 800295c:	2000      	movs	r0, #0
 800295e:	e7dd      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
        return -1;
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	e7da      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 8002966:	f04f 30ff 	mov.w	r0, #4294967295
 800296a:	e7d7      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	e7d4      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 8002972:	f04f 30ff 	mov.w	r0, #4294967295
 8002976:	e7d1      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	e7ce      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 800297e:	f04f 30ff 	mov.w	r0, #4294967295
 8002982:	e7cb      	b.n	800291c <SPI_WIFI_ResetModule+0x84>
 8002984:	58022000 	.word	0x58022000
 8002988:	58020000 	.word	0x58020000
 800298c:	240050ec 	.word	0x240050ec

08002990 <SPI_WIFI_ReceiveData>:
{
 8002990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002992:	b083      	sub	sp, #12
 8002994:	4605      	mov	r5, r0
 8002996:	460e      	mov	r6, r1
 8002998:	4617      	mov	r7, r2
    WIFI_DISABLE_NSS();
 800299a:	2201      	movs	r2, #1
 800299c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a0:	482b      	ldr	r0, [pc, #172]	; (8002a50 <SPI_WIFI_ReceiveData+0xc0>)
 80029a2:	f008 fbec 	bl	800b17e <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80029a6:	200a      	movs	r0, #10
 80029a8:	f7ff ff08 	bl	80027bc <SPI_WIFI_DelayUs>
    if (wait_cmddata_rdy_rising_event(timeout) < 0)
 80029ac:	4638      	mov	r0, r7
 80029ae:	f7ff feef 	bl	8002790 <wait_cmddata_rdy_rising_event>
 80029b2:	2800      	cmp	r0, #0
 80029b4:	db48      	blt.n	8002a48 <SPI_WIFI_ReceiveData+0xb8>
    WIFI_ENABLE_NSS();
 80029b6:	2200      	movs	r2, #0
 80029b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029bc:	4824      	ldr	r0, [pc, #144]	; (8002a50 <SPI_WIFI_ReceiveData+0xc0>)
 80029be:	f008 fbde 	bl	800b17e <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(30);
 80029c2:	201e      	movs	r0, #30
 80029c4:	f7ff fefa 	bl	80027bc <SPI_WIFI_DelayUs>
    int16_t length = 0;
 80029c8:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80029ca:	e016      	b.n	80029fa <SPI_WIFI_ReceiveData+0x6a>
            spi_rx_event = 1;
 80029cc:	2201      	movs	r2, #1
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <SPI_WIFI_ReceiveData+0xc4>)
 80029d0:	601a      	str	r2, [r3, #0]
            if (HAL_SPI_Receive_IT(&hspi2, tmp, 1) != HAL_OK)
 80029d2:	a901      	add	r1, sp, #4
 80029d4:	4820      	ldr	r0, [pc, #128]	; (8002a58 <SPI_WIFI_ReceiveData+0xc8>)
 80029d6:	f00c f929 	bl	800ec2c <HAL_SPI_Receive_IT>
 80029da:	bb08      	cbnz	r0, 8002a20 <SPI_WIFI_ReceiveData+0x90>
            wait_spi_rx_event(timeout);
 80029dc:	4638      	mov	r0, r7
 80029de:	f7ff ff2f 	bl	8002840 <wait_spi_rx_event>
            pData[0] = tmp[0];
 80029e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029e6:	702b      	strb	r3, [r5, #0]
            pData[1] = tmp[1];
 80029e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80029ec:	706b      	strb	r3, [r5, #1]
            length += 2;
 80029ee:	3402      	adds	r4, #2
 80029f0:	b224      	sxth	r4, r4
            pData  += 2;
 80029f2:	3502      	adds	r5, #2
            if (length >= ES_WIFI_DATA_SIZE)
 80029f4:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 80029f8:	da1b      	bge.n	8002a32 <SPI_WIFI_ReceiveData+0xa2>
    while (WIFI_IS_CMDDATA_READY())
 80029fa:	2120      	movs	r1, #32
 80029fc:	4817      	ldr	r0, [pc, #92]	; (8002a5c <SPI_WIFI_ReceiveData+0xcc>)
 80029fe:	f008 fbb7 	bl	800b170 <HAL_GPIO_ReadPin>
 8002a02:	2801      	cmp	r0, #1
 8002a04:	d103      	bne.n	8002a0e <SPI_WIFI_ReceiveData+0x7e>
        if ((length < len) || (!len))
 8002a06:	42b4      	cmp	r4, r6
 8002a08:	dbe0      	blt.n	80029cc <SPI_WIFI_ReceiveData+0x3c>
 8002a0a:	2e00      	cmp	r6, #0
 8002a0c:	d0de      	beq.n	80029cc <SPI_WIFI_ReceiveData+0x3c>
    WIFI_DISABLE_NSS();
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a14:	480e      	ldr	r0, [pc, #56]	; (8002a50 <SPI_WIFI_ReceiveData+0xc0>)
 8002a16:	f008 fbb2 	bl	800b17e <HAL_GPIO_WritePin>
}
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	b003      	add	sp, #12
 8002a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                WIFI_DISABLE_NSS();
 8002a20:	2201      	movs	r2, #1
 8002a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a26:	480a      	ldr	r0, [pc, #40]	; (8002a50 <SPI_WIFI_ReceiveData+0xc0>)
 8002a28:	f008 fba9 	bl	800b17e <HAL_GPIO_WritePin>
                return ES_WIFI_ERROR_SPI_FAILED;
 8002a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8002a30:	e7f3      	b.n	8002a1a <SPI_WIFI_ReceiveData+0x8a>
                WIFI_DISABLE_NSS();
 8002a32:	2201      	movs	r2, #1
 8002a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a38:	4805      	ldr	r0, [pc, #20]	; (8002a50 <SPI_WIFI_ReceiveData+0xc0>)
 8002a3a:	f008 fba0 	bl	800b17e <HAL_GPIO_WritePin>
                SPI_WIFI_ResetModule();
 8002a3e:	f7ff ff2b 	bl	8002898 <SPI_WIFI_ResetModule>
                return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002a42:	f06f 0403 	mvn.w	r4, #3
 8002a46:	e7e8      	b.n	8002a1a <SPI_WIFI_ReceiveData+0x8a>
        return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002a48:	f06f 0402 	mvn.w	r4, #2
 8002a4c:	e7e5      	b.n	8002a1a <SPI_WIFI_ReceiveData+0x8a>
 8002a4e:	bf00      	nop
 8002a50:	58020000 	.word	0x58020000
 8002a54:	24005824 	.word	0x24005824
 8002a58:	240050ec 	.word	0x240050ec
 8002a5c:	58022000 	.word	0x58022000

08002a60 <SPI_WIFI_DeInit>:
{
 8002a60:	b508      	push	{r3, lr}
    HAL_SPI_DeInit(&hspi2);
 8002a62:	4802      	ldr	r0, [pc, #8]	; (8002a6c <SPI_WIFI_DeInit+0xc>)
 8002a64:	f00b fc96 	bl	800e394 <HAL_SPI_DeInit>
}
 8002a68:	2000      	movs	r0, #0
 8002a6a:	bd08      	pop	{r3, pc}
 8002a6c:	240050ec 	.word	0x240050ec

08002a70 <SPI_WIFI_MspInit>:
{
 8002a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a74:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a76:	4b4e      	ldr	r3, [pc, #312]	; (8002bb0 <SPI_WIFI_MspInit+0x140>)
 8002a78:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a80:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002a84:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a88:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a8c:	9201      	str	r2, [sp, #4]
 8002a8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SPI2_FORCE_RESET();
 8002a90:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_SPI2_RELEASE_RESET();
 8002a9c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002aa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002ab4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ab8:	f002 0201 	and.w	r2, r2, #1
 8002abc:	9202      	str	r2, [sp, #8]
 8002abe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ac4:	f042 0204 	orr.w	r2, r2, #4
 8002ac8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002acc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ad0:	f002 0204 	and.w	r2, r2, #4
 8002ad4:	9203      	str	r2, [sp, #12]
 8002ad6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ad8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002ae4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	9304      	str	r3, [sp, #16]
 8002aee:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 8002af0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002bb4 <SPI_WIFI_MspInit+0x144>
 8002af4:	2200      	movs	r2, #0
 8002af6:	2104      	movs	r1, #4
 8002af8:	4640      	mov	r0, r8
 8002afa:	f008 fb40 	bl	800b17e <HAL_GPIO_WritePin>
    GPIO_Init.Pin       = GPIO_PIN_2;
 8002afe:	f04f 0904 	mov.w	r9, #4
 8002b02:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b06:	2501      	movs	r5, #1
 8002b08:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b0a:	2400      	movs	r4, #0
 8002b0c:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b0e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b10:	a905      	add	r1, sp, #20
 8002b12:	4640      	mov	r0, r8
 8002b14:	f008 f974 	bl	800ae00 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_5;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002b1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b20:	9306      	str	r3, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b22:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b24:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b26:	a905      	add	r1, sp, #20
 8002b28:	4640      	mov	r0, r8
 8002b2a:	f008 f969 	bl	800ae00 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_1;
 8002b2e:	2702      	movs	r7, #2
 8002b30:	9705      	str	r7, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b32:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b34:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b36:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b38:	2605      	movs	r6, #5
 8002b3a:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b3c:	a905      	add	r1, sp, #20
 8002b3e:	4640      	mov	r0, r8
 8002b40:	f008 f95e 	bl	800ae00 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002b44:	f5a8 5800 	sub.w	r8, r8, #8192	; 0x2000
 8002b48:	462a      	mov	r2, r5
 8002b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b4e:	4640      	mov	r0, r8
 8002b50:	f008 fb15 	bl	800b17e <HAL_GPIO_WritePin>
    GPIO_Init.Pin       =  GPIO_PIN_11;
 8002b54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b58:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b5a:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b5c:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b5e:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002b60:	a905      	add	r1, sp, #20
 8002b62:	4640      	mov	r0, r8
 8002b64:	f008 f94c 	bl	800ae00 <HAL_GPIO_Init>
    GPIO_Init.Pin       =  GPIO_PIN_12;
 8002b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b6c:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b6e:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b70:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b72:	9508      	str	r5, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b74:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002b76:	a905      	add	r1, sp, #20
 8002b78:	4640      	mov	r0, r8
 8002b7a:	f008 f941 	bl	800ae00 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_3;
 8002b7e:	2308      	movs	r3, #8
 8002b80:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b82:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b84:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b86:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b88:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8002b8a:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 8002b8e:	a905      	add	r1, sp, #20
 8002b90:	4640      	mov	r0, r8
 8002b92:	f008 f935 	bl	800ae00 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_2;
 8002b96:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b9a:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_PULLUP;
 8002b9c:	9507      	str	r5, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b9e:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002ba0:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8002ba2:	a905      	add	r1, sp, #20
 8002ba4:	4640      	mov	r0, r8
 8002ba6:	f008 f92b 	bl	800ae00 <HAL_GPIO_Init>
}
 8002baa:	b00b      	add	sp, #44	; 0x2c
 8002bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	58022000 	.word	0x58022000

08002bb8 <SPI_WIFI_Init>:
{
 8002bb8:	b510      	push	{r4, lr}
    if (mode == ES_WIFI_INIT)
 8002bba:	bb78      	cbnz	r0, 8002c1c <SPI_WIFI_Init+0x64>
        hspi2.Instance               = SPI2;
 8002bbc:	4c1a      	ldr	r4, [pc, #104]	; (8002c28 <SPI_WIFI_Init+0x70>)
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <SPI_WIFI_Init+0x74>)
 8002bc0:	6023      	str	r3, [r4, #0]
        SPI_WIFI_MspInit(&hspi2);
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7ff ff54 	bl	8002a70 <SPI_WIFI_MspInit>
        hspi2.Init.Mode              = SPI_MODE_MASTER;
 8002bc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bcc:	6063      	str	r3, [r4, #4]
        hspi2.Init.Direction         = SPI_DIRECTION_2LINES;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60a3      	str	r3, [r4, #8]
        hspi2.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	60e2      	str	r2, [r4, #12]
        hspi2.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002bd6:	6123      	str	r3, [r4, #16]
        hspi2.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002bd8:	6163      	str	r3, [r4, #20]
        hspi2.Init.NSS               = SPI_NSS_SOFT;
 8002bda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bde:	61a2      	str	r2, [r4, #24]
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /* 280/16 = 17.5MHz (Inventek WIFI module supports up to 20MHz)*/
 8002be0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002be4:	61e2      	str	r2, [r4, #28]
        hspi2.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002be6:	6223      	str	r3, [r4, #32]
        hspi2.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002be8:	6263      	str	r3, [r4, #36]	; 0x24
        hspi2.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002bea:	62a3      	str	r3, [r4, #40]	; 0x28
        hspi2.Init.CRCPolynomial     = 0;
 8002bec:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f00b fb1c 	bl	800e22c <HAL_SPI_Init>
 8002bf4:	b9a8      	cbnz	r0, 8002c22 <SPI_WIFI_Init+0x6a>
        HAL_NVIC_SetPriority((IRQn_Type)DATA_READY_IRQ, SPI_INTERFACE_PRIO, 0x00);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	2017      	movs	r0, #23
 8002bfc:	f007 fd48 	bl	800a690 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)DATA_READY_IRQ);
 8002c00:	2017      	movs	r0, #23
 8002c02:	f007 fd7b 	bl	800a6fc <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority((IRQn_Type)SPI2_IRQn, SPI_INTERFACE_PRIO, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	4611      	mov	r1, r2
 8002c0a:	2024      	movs	r0, #36	; 0x24
 8002c0c:	f007 fd40 	bl	800a690 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)SPI2_IRQn);
 8002c10:	2024      	movs	r0, #36	; 0x24
 8002c12:	f007 fd73 	bl	800a6fc <HAL_NVIC_EnableIRQ>
        SPI_WIFI_DelayUs(10);
 8002c16:	200a      	movs	r0, #10
 8002c18:	f7ff fdd0 	bl	80027bc <SPI_WIFI_DelayUs>
    rc = SPI_WIFI_ResetModule();
 8002c1c:	f7ff fe3c 	bl	8002898 <SPI_WIFI_ResetModule>
}
 8002c20:	bd10      	pop	{r4, pc}
            return -1;
 8002c22:	f04f 30ff 	mov.w	r0, #4294967295
 8002c26:	e7fb      	b.n	8002c20 <SPI_WIFI_Init+0x68>
 8002c28:	240050ec 	.word	0x240050ec
 8002c2c:	40003800 	.word	0x40003800

08002c30 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_rx_event)
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_SPI_RxCpltCallback+0x10>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b113      	cbz	r3, 8002c3c <HAL_SPI_RxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_rx_sem);
        spi_rx_event = 0;
 8002c36:	4b02      	ldr	r3, [pc, #8]	; (8002c40 <HAL_SPI_RxCpltCallback+0x10>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
    }
}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	24005824 	.word	0x24005824

08002c44 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_tx_event)
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_SPI_TxCpltCallback+0x10>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b113      	cbz	r3, 8002c50 <HAL_SPI_TxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_tx_sem);
        spi_tx_event = 0;
 8002c4a:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <HAL_SPI_TxCpltCallback+0x10>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
    }
}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	24005828 	.word	0x24005828

08002c58 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
    if (cmddata_rdy_rising_event == 1)
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <SPI_WIFI_ISR+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d000      	beq.n	8002c62 <SPI_WIFI_ISR+0xa>
    {
        SEM_SIGNAL(cmddata_rdy_rising_sem);
        cmddata_rdy_rising_event = 0;
    }
}
 8002c60:	4770      	bx	lr
        cmddata_rdy_rising_event = 0;
 8002c62:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <SPI_WIFI_ISR+0x14>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
}
 8002c68:	e7fa      	b.n	8002c60 <SPI_WIFI_ISR+0x8>
 8002c6a:	bf00      	nop
 8002c6c:	2400581c 	.word	0x2400581c

08002c70 <wait_cmddata_rdy_high>:
{
 8002c70:	b538      	push	{r3, r4, r5, lr}
 8002c72:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002c74:	f007 fce0 	bl	800a638 <HAL_GetTick>
 8002c78:	4604      	mov	r4, r0
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002c7a:	e001      	b.n	8002c80 <wait_cmddata_rdy_high+0x10>
        SPI_WIFI_ISR();
 8002c7c:	f7ff ffec 	bl	8002c58 <SPI_WIFI_ISR>
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002c80:	2120      	movs	r1, #32
 8002c82:	4807      	ldr	r0, [pc, #28]	; (8002ca0 <wait_cmddata_rdy_high+0x30>)
 8002c84:	f008 fa74 	bl	800b170 <HAL_GPIO_ReadPin>
 8002c88:	2801      	cmp	r0, #1
 8002c8a:	d007      	beq.n	8002c9c <wait_cmddata_rdy_high+0x2c>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002c8c:	f007 fcd4 	bl	800a638 <HAL_GetTick>
 8002c90:	1b00      	subs	r0, r0, r4
 8002c92:	42a8      	cmp	r0, r5
 8002c94:	d9f2      	bls.n	8002c7c <wait_cmddata_rdy_high+0xc>
            return -1;
 8002c96:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9a:	e000      	b.n	8002c9e <wait_cmddata_rdy_high+0x2e>
    return 0;
 8002c9c:	2000      	movs	r0, #0
}
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	58022000 	.word	0x58022000

08002ca4 <SPI_WIFI_SendData>:
{
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	4606      	mov	r6, r0
 8002caa:	460c      	mov	r4, r1
 8002cac:	4615      	mov	r5, r2
    if (wait_cmddata_rdy_high(timeout) < 0)
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f7ff ffde 	bl	8002c70 <wait_cmddata_rdy_high>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	db47      	blt.n	8002d48 <SPI_WIFI_SendData+0xa4>
    cmddata_rdy_rising_event = 1;
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <SPI_WIFI_SendData+0xac>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
    WIFI_ENABLE_NSS();
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cc4:	4823      	ldr	r0, [pc, #140]	; (8002d54 <SPI_WIFI_SendData+0xb0>)
 8002cc6:	f008 fa5a 	bl	800b17e <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 8002cca:	200a      	movs	r0, #10
 8002ccc:	f7ff fd76 	bl	80027bc <SPI_WIFI_DelayUs>
    if (len > 1)
 8002cd0:	2c01      	cmp	r4, #1
 8002cd2:	d805      	bhi.n	8002ce0 <SPI_WIFI_SendData+0x3c>
    if (len & 1)
 8002cd4:	f014 0f01 	tst.w	r4, #1
 8002cd8:	d119      	bne.n	8002d0e <SPI_WIFI_SendData+0x6a>
    return len;
 8002cda:	b220      	sxth	r0, r4
}
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
        spi_tx_event = 1;
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <SPI_WIFI_SendData+0xb4>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)pdata, len / 2) != HAL_OK)
 8002ce6:	fa24 f202 	lsr.w	r2, r4, r2
 8002cea:	4631      	mov	r1, r6
 8002cec:	481b      	ldr	r0, [pc, #108]	; (8002d5c <SPI_WIFI_SendData+0xb8>)
 8002cee:	f00b fe13 	bl	800e918 <HAL_SPI_Transmit_IT>
 8002cf2:	b918      	cbnz	r0, 8002cfc <SPI_WIFI_SendData+0x58>
        wait_spi_tx_event(timeout);
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	f7ff fdb9 	bl	800286c <wait_spi_tx_event>
 8002cfa:	e7eb      	b.n	8002cd4 <SPI_WIFI_SendData+0x30>
            WIFI_DISABLE_NSS();
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d02:	4814      	ldr	r0, [pc, #80]	; (8002d54 <SPI_WIFI_SendData+0xb0>)
 8002d04:	f008 fa3b 	bl	800b17e <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	e7e6      	b.n	8002cdc <SPI_WIFI_SendData+0x38>
        Padding[0] = pdata[len - 1];
 8002d0e:	1930      	adds	r0, r6, r4
 8002d10:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8002d14:	f88d 3004 	strb.w	r3, [sp, #4]
        Padding[1] = '\n';
 8002d18:	230a      	movs	r3, #10
 8002d1a:	f88d 3005 	strb.w	r3, [sp, #5]
        spi_tx_event = 1;
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <SPI_WIFI_SendData+0xb4>)
 8002d22:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, Padding, 1) != HAL_OK)
 8002d24:	a901      	add	r1, sp, #4
 8002d26:	480d      	ldr	r0, [pc, #52]	; (8002d5c <SPI_WIFI_SendData+0xb8>)
 8002d28:	f00b fdf6 	bl	800e918 <HAL_SPI_Transmit_IT>
 8002d2c:	b918      	cbnz	r0, 8002d36 <SPI_WIFI_SendData+0x92>
        wait_spi_tx_event(timeout);
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f7ff fd9c 	bl	800286c <wait_spi_tx_event>
 8002d34:	e7d1      	b.n	8002cda <SPI_WIFI_SendData+0x36>
            WIFI_DISABLE_NSS();
 8002d36:	2201      	movs	r2, #1
 8002d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <SPI_WIFI_SendData+0xb0>)
 8002d3e:	f008 fa1e 	bl	800b17e <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002d42:	f04f 30ff 	mov.w	r0, #4294967295
 8002d46:	e7c9      	b.n	8002cdc <SPI_WIFI_SendData+0x38>
        return ES_WIFI_ERROR_SPI_FAILED;
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	e7c6      	b.n	8002cdc <SPI_WIFI_SendData+0x38>
 8002d4e:	bf00      	nop
 8002d50:	2400581c 	.word	0x2400581c
 8002d54:	58020000 	.word	0x58020000
 8002d58:	24005828 	.word	0x24005828
 8002d5c:	240050ec 	.word	0x240050ec

08002d60 <wifi_probe>:
  * @brief  probe function to register wifi to connectivity framwotk
  * @param  None
  * @retval None
  */
int32_t wifi_probe(void **ll_drv_context)
{
 8002d60:	b510      	push	{r4, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	4604      	mov	r4, r0
    if (ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <wifi_probe+0x2c>)
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <wifi_probe+0x30>)
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <wifi_probe+0x34>)
 8002d70:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <wifi_probe+0x38>)
 8002d72:	490a      	ldr	r1, [pc, #40]	; (8002d9c <wifi_probe+0x3c>)
 8002d74:	480a      	ldr	r0, [pc, #40]	; (8002da0 <wifi_probe+0x40>)
 8002d76:	f005 f85b 	bl	8007e30 <ES_WIFI_RegisterBusIO>
 8002d7a:	b918      	cbnz	r0, 8002d84 <wifi_probe+0x24>
                              SPI_WIFI_DeInit,
                              HAL_Delay,
                              SPI_WIFI_SendData,
                              SPI_WIFI_ReceiveData) == 0)
    {
        *ll_drv_context = &EsWifiObj;
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <wifi_probe+0x40>)
 8002d7e:	6023      	str	r3, [r4, #0]
        return 0;
    }
    return -1;
}
 8002d80:	b002      	add	sp, #8
 8002d82:	bd10      	pop	{r4, pc}
    return -1;
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	e7fa      	b.n	8002d80 <wifi_probe+0x20>
 8002d8a:	bf00      	nop
 8002d8c:	08002991 	.word	0x08002991
 8002d90:	08002ca5 	.word	0x08002ca5
 8002d94:	0800a645 	.word	0x0800a645
 8002d98:	08002a61 	.word	0x08002a61
 8002d9c:	08002bb9 	.word	0x08002bb9
 8002da0:	24005174 	.word	0x24005174

08002da4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_5)
 8002da4:	2820      	cmp	r0, #32
 8002da6:	d000      	beq.n	8002daa <HAL_GPIO_EXTI_Callback+0x6>
  {
    cmddata_rdy_rising_event = 0;
  }
}
 8002da8:	4770      	bx	lr
    cmddata_rdy_rising_event = 0;
 8002daa:	4b02      	ldr	r3, [pc, #8]	; (8002db4 <HAL_GPIO_EXTI_Callback+0x10>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
}
 8002db0:	e7fa      	b.n	8002da8 <HAL_GPIO_EXTI_Callback+0x4>
 8002db2:	bf00      	nop
 8002db4:	2400581c 	.word	0x2400581c

08002db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db8:	b500      	push	{lr}
 8002dba:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_MspInit+0x30>)
 8002dbe:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8002dc2:	f042 0202 	orr.w	r2, r2, #2
 8002dc6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8002dca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	210f      	movs	r1, #15
 8002dda:	f06f 0001 	mvn.w	r0, #1
 8002dde:	f007 fc57 	bl	800a690 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de2:	b003      	add	sp, #12
 8002de4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002de8:	58024400 	.word	0x58024400

08002dec <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002dec:	6802      	ldr	r2, [r0, #0]
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_CRC_MspInit+0x2c>)
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d000      	beq.n	8002df6 <HAL_CRC_MspInit+0xa>
 8002df4:	4770      	bx	lr
{
 8002df6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_CRC_MspInit+0x30>)
 8002dfa:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e02:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8002e06:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e12:	b002      	add	sp, #8
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40023000 	.word	0x40023000
 8002e1c:	58024400 	.word	0x58024400

08002e20 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8002e20:	6802      	ldr	r2, [r0, #0]
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_DMA2D_MspInit+0x40>)
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d000      	beq.n	8002e2a <HAL_DMA2D_MspInit+0xa>
 8002e28:	4770      	bx	lr
{
 8002e2a:	b500      	push	{lr}
 8002e2c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_DMA2D_MspInit+0x44>)
 8002e30:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002e34:	f042 0210 	orr.w	r2, r2, #16
 8002e38:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8002e3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2105      	movs	r1, #5
 8002e4c:	205a      	movs	r0, #90	; 0x5a
 8002e4e:	f007 fc1f 	bl	800a690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002e52:	205a      	movs	r0, #90	; 0x5a
 8002e54:	f007 fc52 	bl	800a6fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002e58:	b003      	add	sp, #12
 8002e5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e5e:	bf00      	nop
 8002e60:	52001000 	.word	0x52001000
 8002e64:	58024400 	.word	0x58024400

08002e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	b0b6      	sub	sp, #216	; 0xd8
 8002e6c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6e:	2100      	movs	r1, #0
 8002e70:	9131      	str	r1, [sp, #196]	; 0xc4
 8002e72:	9132      	str	r1, [sp, #200]	; 0xc8
 8002e74:	9133      	str	r1, [sp, #204]	; 0xcc
 8002e76:	9134      	str	r1, [sp, #208]	; 0xd0
 8002e78:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e7a:	22b8      	movs	r2, #184	; 0xb8
 8002e7c:	a803      	add	r0, sp, #12
 8002e7e:	f020 fb9f 	bl	80235c0 <memset>
  if(hi2c->Instance==I2C4)
 8002e82:	6822      	ldr	r2, [r4, #0]
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_I2C_MspInit+0x8c>)
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002e8a:	b036      	add	sp, #216	; 0xd8
 8002e8c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002e8e:	2310      	movs	r3, #16
 8002e90:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e92:	a803      	add	r0, sp, #12
 8002e94:	f00a fbee 	bl	800d674 <HAL_RCCEx_PeriphCLKConfig>
 8002e98:	bb40      	cbnz	r0, 8002eec <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9a:	4c17      	ldr	r4, [pc, #92]	; (8002ef8 <HAL_I2C_MspInit+0x90>)
 8002e9c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002ea0:	f043 0308 	orr.w	r3, r3, #8
 8002ea4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002ea8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002eb4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002eb8:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eba:	2312      	movs	r3, #18
 8002ebc:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eca:	a931      	add	r1, sp, #196	; 0xc4
 8002ecc:	480b      	ldr	r0, [pc, #44]	; (8002efc <HAL_I2C_MspInit+0x94>)
 8002ece:	f007 ff97 	bl	800ae00 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002ed2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eda:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8002ede:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	9b02      	ldr	r3, [sp, #8]
}
 8002eea:	e7ce      	b.n	8002e8a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8002eec:	f7ff fc4e 	bl	800278c <Error_Handler>
 8002ef0:	e7d3      	b.n	8002e9a <HAL_I2C_MspInit+0x32>
 8002ef2:	bf00      	nop
 8002ef4:	58001c00 	.word	0x58001c00
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	58020c00 	.word	0x58020c00

08002f00 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8002f00:	6802      	ldr	r2, [r0, #0]
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_I2C_MspDeInit+0x34>)
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d000      	beq.n	8002f0a <HAL_I2C_MspDeInit+0xa>
 8002f08:	4770      	bx	lr
{
 8002f0a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <HAL_I2C_MspDeInit+0x38>)
 8002f0e:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8002f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f16:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8002f1a:	4c08      	ldr	r4, [pc, #32]	; (8002f3c <HAL_I2C_MspDeInit+0x3c>)
 8002f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f20:	4620      	mov	r0, r4
 8002f22:	f008 f87d 	bl	800b020 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8002f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f008 f878 	bl	800b020 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8002f30:	bd10      	pop	{r4, pc}
 8002f32:	bf00      	nop
 8002f34:	58001c00 	.word	0x58001c00
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	58020c00 	.word	0x58020c00

08002f40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	b0b8      	sub	sp, #224	; 0xe0
 8002f44:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f46:	2100      	movs	r1, #0
 8002f48:	9133      	str	r1, [sp, #204]	; 0xcc
 8002f4a:	9134      	str	r1, [sp, #208]	; 0xd0
 8002f4c:	9135      	str	r1, [sp, #212]	; 0xd4
 8002f4e:	9136      	str	r1, [sp, #216]	; 0xd8
 8002f50:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f52:	22b8      	movs	r2, #184	; 0xb8
 8002f54:	a805      	add	r0, sp, #20
 8002f56:	f020 fb33 	bl	80235c0 <memset>
  if(hltdc->Instance==LTDC)
 8002f5a:	6822      	ldr	r2, [r4, #0]
 8002f5c:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_LTDC_MspInit+0x114>)
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f62:	b038      	add	sp, #224	; 0xe0
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002f66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f6a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8002f6c:	2318      	movs	r3, #24
 8002f6e:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8002f70:	23c9      	movs	r3, #201	; 0xc9
 8002f72:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002f74:	2302      	movs	r3, #2
 8002f76:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002f78:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8002f7a:	2315      	movs	r3, #21
 8002f7c:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f82:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8002f84:	f241 5356 	movw	r3, #5462	; 0x1556
 8002f88:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f8a:	a805      	add	r0, sp, #20
 8002f8c:	f00a fb72 	bl	800d674 <HAL_RCCEx_PeriphCLKConfig>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	d15c      	bne.n	800304e <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_LTDC_MspInit+0x118>)
 8002f96:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002f9a:	f042 0208 	orr.w	r2, r2, #8
 8002f9e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8002fa2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002fa6:	f002 0208 	and.w	r2, r2, #8
 8002faa:	9201      	str	r2, [sp, #4]
 8002fac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002fae:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fb6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fba:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fbe:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002fc2:	9202      	str	r2, [sp, #8]
 8002fc4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002fc6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fd2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fd6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002fda:	9203      	str	r2, [sp, #12]
 8002fdc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fde:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	9304      	str	r3, [sp, #16]
 8002ff4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8002ff6:	23ff      	movs	r3, #255	; 0xff
 8002ff8:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2602      	movs	r6, #2
 8002ffc:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2400      	movs	r4, #0
 8003000:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003004:	250e      	movs	r5, #14
 8003006:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003008:	a933      	add	r1, sp, #204	; 0xcc
 800300a:	4814      	ldr	r0, [pc, #80]	; (800305c <HAL_LTDC_MspInit+0x11c>)
 800300c:	f007 fef8 	bl	800ae00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8003010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003014:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800301c:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800301e:	a933      	add	r1, sp, #204	; 0xcc
 8003020:	480f      	ldr	r0, [pc, #60]	; (8003060 <HAL_LTDC_MspInit+0x120>)
 8003022:	f007 feed 	bl	800ae00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8003026:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800302a:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302c:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003032:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003034:	a933      	add	r1, sp, #204	; 0xcc
 8003036:	480b      	ldr	r0, [pc, #44]	; (8003064 <HAL_LTDC_MspInit+0x124>)
 8003038:	f007 fee2 	bl	800ae00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800303c:	4622      	mov	r2, r4
 800303e:	2105      	movs	r1, #5
 8003040:	2058      	movs	r0, #88	; 0x58
 8003042:	f007 fb25 	bl	800a690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003046:	2058      	movs	r0, #88	; 0x58
 8003048:	f007 fb58 	bl	800a6fc <HAL_NVIC_EnableIRQ>
}
 800304c:	e789      	b.n	8002f62 <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 800304e:	f7ff fb9d 	bl	800278c <Error_Handler>
 8003052:	e79f      	b.n	8002f94 <HAL_LTDC_MspInit+0x54>
 8003054:	50001000 	.word	0x50001000
 8003058:	58024400 	.word	0x58024400
 800305c:	58022800 	.word	0x58022800
 8003060:	58022400 	.word	0x58022400
 8003064:	58022000 	.word	0x58022000

08003068 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003068:	b510      	push	{r4, lr}
 800306a:	b0b0      	sub	sp, #192	; 0xc0
 800306c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800306e:	22b8      	movs	r2, #184	; 0xb8
 8003070:	2100      	movs	r1, #0
 8003072:	a802      	add	r0, sp, #8
 8003074:	f020 faa4 	bl	80235c0 <memset>
  if(hospi->Instance==OCTOSPI1)
 8003078:	6822      	ldr	r2, [r4, #0]
 800307a:	4b1e      	ldr	r3, [pc, #120]	; (80030f4 <HAL_OSPI_MspInit+0x8c>)
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003080:	b030      	add	sp, #192	; 0xc0
 8003082:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003084:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003088:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 800308a:	2318      	movs	r3, #24
 800308c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 800308e:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003092:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003094:	2302      	movs	r3, #2
 8003096:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003098:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800309a:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800309c:	2320      	movs	r3, #32
 800309e:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80030a0:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030a2:	a802      	add	r0, sp, #8
 80030a4:	f00a fae6 	bl	800d674 <HAL_RCCEx_PeriphCLKConfig>
 80030a8:	bb08      	cbnz	r0, 80030ee <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <HAL_OSPI_MspInit+0x90>)
 80030ac:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030b0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80030b4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80030b8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030c0:	9200      	str	r2, [sp, #0]
 80030c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80030c4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030cc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80030d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80030d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80030dc:	2200      	movs	r2, #0
 80030de:	2105      	movs	r1, #5
 80030e0:	205c      	movs	r0, #92	; 0x5c
 80030e2:	f007 fad5 	bl	800a690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80030e6:	205c      	movs	r0, #92	; 0x5c
 80030e8:	f007 fb08 	bl	800a6fc <HAL_NVIC_EnableIRQ>
}
 80030ec:	e7c8      	b.n	8003080 <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 80030ee:	f7ff fb4d 	bl	800278c <Error_Handler>
 80030f2:	e7da      	b.n	80030aa <HAL_OSPI_MspInit+0x42>
 80030f4:	52005000 	.word	0x52005000
 80030f8:	58024400 	.word	0x58024400

080030fc <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80030fc:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 80030fe:	6802      	ldr	r2, [r0, #0]
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_OSPI_MspDeInit+0x30>)
 8003102:	429a      	cmp	r2, r3
 8003104:	d000      	beq.n	8003108 <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8003106:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_OSPI_MspDeInit+0x34>)
 800310a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800310e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003112:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8003116:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800311a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800311e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8003122:	205c      	movs	r0, #92	; 0x5c
 8003124:	f007 faf8 	bl	800a718 <HAL_NVIC_DisableIRQ>
}
 8003128:	e7ed      	b.n	8003106 <HAL_OSPI_MspDeInit+0xa>
 800312a:	bf00      	nop
 800312c:	52005000 	.word	0x52005000
 8003130:	58024400 	.word	0x58024400

08003134 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	b0b6      	sub	sp, #216	; 0xd8
 8003138:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313a:	2100      	movs	r1, #0
 800313c:	9131      	str	r1, [sp, #196]	; 0xc4
 800313e:	9132      	str	r1, [sp, #200]	; 0xc8
 8003140:	9133      	str	r1, [sp, #204]	; 0xcc
 8003142:	9134      	str	r1, [sp, #208]	; 0xd0
 8003144:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003146:	22b8      	movs	r2, #184	; 0xb8
 8003148:	a803      	add	r0, sp, #12
 800314a:	f020 fa39 	bl	80235c0 <memset>
  if(hspi->Instance==SPI2)
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	4b2a      	ldr	r3, [pc, #168]	; (80031fc <HAL_SPI_MspInit+0xc8>)
 8003152:	429a      	cmp	r2, r3
 8003154:	d001      	beq.n	800315a <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003156:	b036      	add	sp, #216	; 0xd8
 8003158:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800315a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800315e:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003160:	a803      	add	r0, sp, #12
 8003162:	f00a fa87 	bl	800d674 <HAL_RCCEx_PeriphCLKConfig>
 8003166:	2800      	cmp	r0, #0
 8003168:	d145      	bne.n	80031f6 <HAL_SPI_MspInit+0xc2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_SPI_MspInit+0xcc>)
 800316c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003170:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003174:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8003178:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800317c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003180:	9200      	str	r2, [sp, #0]
 8003182:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003190:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003194:	f002 0201 	and.w	r2, r2, #1
 8003198:	9201      	str	r2, [sp, #4]
 800319a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800319c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80031a0:	f042 0204 	orr.w	r2, r2, #4
 80031a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80031a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	9302      	str	r3, [sp, #8]
 80031b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b8:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2602      	movs	r6, #2
 80031bc:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2400      	movs	r4, #0
 80031c0:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031c4:	2505      	movs	r5, #5
 80031c6:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	a931      	add	r1, sp, #196	; 0xc4
 80031ca:	480e      	ldr	r0, [pc, #56]	; (8003204 <HAL_SPI_MspInit+0xd0>)
 80031cc:	f007 fe18 	bl	800ae00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031d0:	230c      	movs	r3, #12
 80031d2:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d4:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d8:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031da:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031dc:	a931      	add	r1, sp, #196	; 0xc4
 80031de:	480a      	ldr	r0, [pc, #40]	; (8003208 <HAL_SPI_MspInit+0xd4>)
 80031e0:	f007 fe0e 	bl	800ae00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80031e4:	4622      	mov	r2, r4
 80031e6:	4621      	mov	r1, r4
 80031e8:	2024      	movs	r0, #36	; 0x24
 80031ea:	f007 fa51 	bl	800a690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80031ee:	2024      	movs	r0, #36	; 0x24
 80031f0:	f007 fa84 	bl	800a6fc <HAL_NVIC_EnableIRQ>
}
 80031f4:	e7af      	b.n	8003156 <HAL_SPI_MspInit+0x22>
      Error_Handler();
 80031f6:	f7ff fac9 	bl	800278c <Error_Handler>
 80031fa:	e7b6      	b.n	800316a <HAL_SPI_MspInit+0x36>
 80031fc:	40003800 	.word	0x40003800
 8003200:	58024400 	.word	0x58024400
 8003204:	58020000 	.word	0x58020000
 8003208:	58020800 	.word	0x58020800

0800320c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800320c:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI2)
 800320e:	6802      	ldr	r2, [r0, #0]
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_SPI_MspDeInit+0x34>)
 8003212:	429a      	cmp	r2, r3
 8003214:	d000      	beq.n	8003218 <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8003216:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_SPI_MspDeInit+0x38>)
 800321a:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 800321e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003222:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8003226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800322a:	4807      	ldr	r0, [pc, #28]	; (8003248 <HAL_SPI_MspDeInit+0x3c>)
 800322c:	f007 fef8 	bl	800b020 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8003230:	210c      	movs	r1, #12
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <HAL_SPI_MspDeInit+0x40>)
 8003234:	f007 fef4 	bl	800b020 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8003238:	2024      	movs	r0, #36	; 0x24
 800323a:	f007 fa6d 	bl	800a718 <HAL_NVIC_DisableIRQ>
}
 800323e:	e7ea      	b.n	8003216 <HAL_SPI_MspDeInit+0xa>
 8003240:	40003800 	.word	0x40003800
 8003244:	58024400 	.word	0x58024400
 8003248:	58020000 	.word	0x58020000
 800324c:	58020800 	.word	0x58020800

08003250 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003250:	280f      	cmp	r0, #15
 8003252:	d901      	bls.n	8003258 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8003254:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8003256:	4770      	bx	lr
{
 8003258:	b510      	push	{r4, lr}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800325e:	2200      	movs	r2, #0
 8003260:	4601      	mov	r1, r0
 8003262:	2036      	movs	r0, #54	; 0x36
 8003264:	f007 fa14 	bl	800a690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003268:	2036      	movs	r0, #54	; 0x36
 800326a:	f007 fa47 	bl	800a6fc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <HAL_InitTick+0x88>)
 8003270:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003272:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_InitTick+0x8c>)
 8003274:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003278:	f042 0210 	orr.w	r2, r2, #16
 800327c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8003280:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800328c:	a901      	add	r1, sp, #4
 800328e:	a802      	add	r0, sp, #8
 8003290:	f00a f8ba 	bl	800d408 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003294:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003296:	b9bb      	cbnz	r3, 80032c8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003298:	f00a f892 	bl	800d3c0 <HAL_RCC_GetPCLK1Freq>
 800329c:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800329e:	4810      	ldr	r0, [pc, #64]	; (80032e0 <HAL_InitTick+0x90>)
 80032a0:	fba0 2303 	umull	r2, r3, r0, r3
 80032a4:	0c9b      	lsrs	r3, r3, #18
 80032a6:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 80032a8:	480e      	ldr	r0, [pc, #56]	; (80032e4 <HAL_InitTick+0x94>)
 80032aa:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <HAL_InitTick+0x98>)
 80032ac:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032b2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032b4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ba:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80032bc:	f00c f808 	bl	800f2d0 <HAL_TIM_Base_Init>
 80032c0:	b130      	cbz	r0, 80032d0 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80032c2:	2001      	movs	r0, #1
}
 80032c4:	b00a      	add	sp, #40	; 0x28
 80032c6:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032c8:	f00a f87a 	bl	800d3c0 <HAL_RCC_GetPCLK1Freq>
 80032cc:	0043      	lsls	r3, r0, #1
 80032ce:	e7e6      	b.n	800329e <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80032d0:	4804      	ldr	r0, [pc, #16]	; (80032e4 <HAL_InitTick+0x94>)
 80032d2:	f00b fe61 	bl	800ef98 <HAL_TIM_Base_Start_IT>
 80032d6:	e7f5      	b.n	80032c4 <HAL_InitTick+0x74>
 80032d8:	2400007c 	.word	0x2400007c
 80032dc:	58024400 	.word	0x58024400
 80032e0:	431bde83 	.word	0x431bde83
 80032e4:	2400582c 	.word	0x2400582c
 80032e8:	40001000 	.word	0x40001000

080032ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032ec:	4770      	bx	lr

080032ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ee:	e7fe      	b.n	80032ee <HardFault_Handler>

080032f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f0:	e7fe      	b.n	80032f0 <MemManage_Handler>

080032f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032f2:	e7fe      	b.n	80032f2 <BusFault_Handler>

080032f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032f4:	e7fe      	b.n	80032f4 <UsageFault_Handler>

080032f6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f6:	4770      	bx	lr

080032f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_DATRDY_Pin);
 80032fa:	2020      	movs	r0, #32
 80032fc:	f007 ff4e 	bl	800b19c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003300:	bd08      	pop	{r3, pc}
	...

08003304 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003306:	4802      	ldr	r0, [pc, #8]	; (8003310 <SPI2_IRQHandler+0xc>)
 8003308:	f00b fd18 	bl	800ed3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800330c:	bd08      	pop	{r3, pc}
 800330e:	bf00      	nop
 8003310:	240050ec 	.word	0x240050ec

08003314 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_Pin);
 8003316:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800331a:	f007 ff3f 	bl	800b19c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800331e:	bd08      	pop	{r3, pc}

08003320 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003320:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003322:	4802      	ldr	r0, [pc, #8]	; (800332c <TIM6_DAC_IRQHandler+0xc>)
 8003324:	f00b fe84 	bl	800f030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003328:	bd08      	pop	{r3, pc}
 800332a:	bf00      	nop
 800332c:	2400582c 	.word	0x2400582c

08003330 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003330:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003332:	4802      	ldr	r0, [pc, #8]	; (800333c <LTDC_IRQHandler+0xc>)
 8003334:	f008 fcde 	bl	800bcf4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003338:	bd08      	pop	{r3, pc}
 800333a:	bf00      	nop
 800333c:	24004fe8 	.word	0x24004fe8

08003340 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003340:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003342:	4802      	ldr	r0, [pc, #8]	; (800334c <DMA2D_IRQHandler+0xc>)
 8003344:	f007 fc3c 	bl	800abc0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003348:	bd08      	pop	{r3, pc}
 800334a:	bf00      	nop
 800334c:	24004f34 	.word	0x24004f34

08003350 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003350:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003352:	4802      	ldr	r0, [pc, #8]	; (800335c <OCTOSPI1_IRQHandler+0xc>)
 8003354:	f009 f8d8 	bl	800c508 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8003358:	bd08      	pop	{r3, pc}
 800335a:	bf00      	nop
 800335c:	24005090 	.word	0x24005090

08003360 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003360:	2001      	movs	r0, #1
 8003362:	4770      	bx	lr

08003364 <_kill>:

int _kill(int pid, int sig)
{
 8003364:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003366:	f01f ffc7 	bl	80232f8 <__errno>
 800336a:	2316      	movs	r3, #22
 800336c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	bd08      	pop	{r3, pc}

08003374 <_exit>:

void _exit (int status)
{
 8003374:	b508      	push	{r3, lr}
	_kill(status, -1);
 8003376:	f04f 31ff 	mov.w	r1, #4294967295
 800337a:	f7ff fff3 	bl	8003364 <_kill>
	while (1) {}		/* Make sure we hang here */
 800337e:	e7fe      	b.n	800337e <_exit+0xa>

08003380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	460c      	mov	r4, r1
 8003384:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003386:	2500      	movs	r5, #0
 8003388:	e006      	b.n	8003398 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800338a:	f3af 8000 	nop.w
 800338e:	4621      	mov	r1, r4
 8003390:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003394:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8003396:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003398:	42b5      	cmp	r5, r6
 800339a:	dbf6      	blt.n	800338a <_read+0xa>
	}

return len;
}
 800339c:	4630      	mov	r0, r6
 800339e:	bd70      	pop	{r4, r5, r6, pc}

080033a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	460c      	mov	r4, r1
 80033a4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a6:	2500      	movs	r5, #0
 80033a8:	e004      	b.n	80033b4 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80033aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80033ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b2:	3501      	adds	r5, #1
 80033b4:	42b5      	cmp	r5, r6
 80033b6:	dbf8      	blt.n	80033aa <_write+0xa>
	}
	return len;
}
 80033b8:	4630      	mov	r0, r6
 80033ba:	bd70      	pop	{r4, r5, r6, pc}

080033bc <_close>:

int _close(int file)
{
	return -1;
}
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295
 80033c0:	4770      	bx	lr

080033c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80033c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033c6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80033c8:	2000      	movs	r0, #0
 80033ca:	4770      	bx	lr

080033cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80033cc:	2001      	movs	r0, #1
 80033ce:	4770      	bx	lr

080033d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80033d0:	2000      	movs	r0, #0
 80033d2:	4770      	bx	lr

080033d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80033d4:	b508      	push	{r3, lr}
 80033d6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033d8:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <_sbrk+0x34>)
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	b142      	cbz	r2, 80033f0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <_sbrk+0x34>)
 80033e0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80033e2:	4403      	add	r3, r0
 80033e4:	466a      	mov	r2, sp
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d806      	bhi.n	80033f8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80033ea:	4a07      	ldr	r2, [pc, #28]	; (8003408 <_sbrk+0x34>)
 80033ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80033ee:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80033f0:	4a05      	ldr	r2, [pc, #20]	; (8003408 <_sbrk+0x34>)
 80033f2:	4906      	ldr	r1, [pc, #24]	; (800340c <_sbrk+0x38>)
 80033f4:	6011      	str	r1, [r2, #0]
 80033f6:	e7f2      	b.n	80033de <_sbrk+0xa>
		errno = ENOMEM;
 80033f8:	f01f ff7e 	bl	80232f8 <__errno>
 80033fc:	230c      	movs	r3, #12
 80033fe:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003400:	f04f 30ff 	mov.w	r0, #4294967295
 8003404:	e7f3      	b.n	80033ee <_sbrk+0x1a>
 8003406:	bf00      	nop
 8003408:	24005878 	.word	0x24005878
 800340c:	24010168 	.word	0x24010168

08003410 <wifi_networkInit>:
  * @brief  Network interface initialization
  * @param  none
  * @retval 0 in case of success, an error code otherwise
  */
static int wifi_networkInit(void)
{
 8003410:	b510      	push	{r4, lr}
  if (net_if_init(&netif, es_wifi_driver_ptr, &net_handler) != NET_OK)
 8003412:	4a10      	ldr	r2, [pc, #64]	; (8003454 <wifi_networkInit+0x44>)
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <wifi_networkInit+0x48>)
 8003416:	6819      	ldr	r1, [r3, #0]
 8003418:	4810      	ldr	r0, [pc, #64]	; (800345c <wifi_networkInit+0x4c>)
 800341a:	f00e fd01 	bl	8011e20 <net_if_init>
 800341e:	b998      	cbnz	r0, 8003448 <wifi_networkInit+0x38>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_INITIALIZED,STATE_TRANSITION_TIMEOUT);
 8003420:	4c0e      	ldr	r4, [pc, #56]	; (800345c <wifi_networkInit+0x4c>)
 8003422:	f242 7210 	movw	r2, #10000	; 0x2710
 8003426:	2101      	movs	r1, #1
 8003428:	4620      	mov	r0, r4
 800342a:	f00e fcd2 	bl	8011dd2 <net_if_wait_state>
  if ( net_if_start (&netif) != NET_OK )
 800342e:	4620      	mov	r0, r4
 8003430:	f00e fd0b 	bl	8011e4a <net_if_start>
 8003434:	4604      	mov	r4, r0
 8003436:	b950      	cbnz	r0, 800344e <wifi_networkInit+0x3e>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_READY,STATE_TRANSITION_TIMEOUT);
 8003438:	f242 7210 	movw	r2, #10000	; 0x2710
 800343c:	2103      	movs	r1, #3
 800343e:	4807      	ldr	r0, [pc, #28]	; (800345c <wifi_networkInit+0x4c>)
 8003440:	f00e fcc7 	bl	8011dd2 <net_if_wait_state>

  return 0;
}
 8003444:	4620      	mov	r0, r4
 8003446:	bd10      	pop	{r4, pc}
    return -1;
 8003448:	f04f 34ff 	mov.w	r4, #4294967295
 800344c:	e7fa      	b.n	8003444 <wifi_networkInit+0x34>
    return -1;
 800344e:	f04f 34ff 	mov.w	r4, #4294967295
 8003452:	e7f7      	b.n	8003444 <wifi_networkInit+0x34>
 8003454:	24005a84 	.word	0x24005a84
 8003458:	2400000c 	.word	0x2400000c
 800345c:	24005a8c 	.word	0x24005a8c

08003460 <wifi_initialise>:
  * @brief  Initializes module wifi network interface
  * @param  none
  * @retval none
  */
void wifi_initialise(void)
{
 8003460:	b508      	push	{r3, lr}
    wifi_networkInit();
 8003462:	f7ff ffd5 	bl	8003410 <wifi_networkInit>
}
 8003466:	bd08      	pop	{r3, pc}

08003468 <wifi_scan>:
  * @brief  Get available access points
  * @param  APs: pointer Access points structure
  * @retval ES Wifi status
  */
int32_t wifi_scan(net_wifi_scan_results_t *APs)
{
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	4604      	mov	r4, r0
  int32_t ret;
  ret = net_wifi_scan(&netif,NET_WIFI_SCAN_PASSIVE,NULL);
 800346c:	2200      	movs	r2, #0
 800346e:	4611      	mov	r1, r2
 8003470:	4807      	ldr	r0, [pc, #28]	; (8003490 <wifi_scan+0x28>)
 8003472:	f00e fc41 	bl	8011cf8 <net_wifi_scan>
  if (ret == NET_OK)
 8003476:	4605      	mov	r5, r0
 8003478:	b108      	cbz	r0, 800347e <wifi_scan+0x16>
  {
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
    if (ret > 0) ret= NET_OK;
  }
  return ret;
}
 800347a:	4628      	mov	r0, r5
 800347c:	bd38      	pop	{r3, r4, r5, pc}
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 800347e:	220a      	movs	r2, #10
 8003480:	4621      	mov	r1, r4
 8003482:	4803      	ldr	r0, [pc, #12]	; (8003490 <wifi_scan+0x28>)
 8003484:	f00e fc52 	bl	8011d2c <net_wifi_get_scan_results>
    if (ret > 0) ret= NET_OK;
 8003488:	2800      	cmp	r0, #0
 800348a:	dcf6      	bgt.n	800347a <wifi_scan+0x12>
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 800348c:	4605      	mov	r5, r0
  return ret;
 800348e:	e7f4      	b.n	800347a <wifi_scan+0x12>
 8003490:	24005a8c 	.word	0x24005a8c

08003494 <wifi_connect>:
  * @param  password:  access point password
  * @param  encryption : security mode
  * @retval 0 in case of success, an error code otherwise
  */
int8_t wifi_connect(char *ssid, uint8_t *password, int32_t encryption )
{  
 8003494:	b500      	push	{lr}
 8003496:	b085      	sub	sp, #20
  net_wifi_credentials_t  Credentials = 
 8003498:	9001      	str	r0, [sp, #4]
 800349a:	9102      	str	r1, [sp, #8]
 800349c:	9203      	str	r2, [sp, #12]
    (char const*) ssid,
    (char const*)password,
    encryption
  };
  
  if (net_wifi_set_credentials(&netif, &Credentials) != NET_OK)
 800349e:	a901      	add	r1, sp, #4
 80034a0:	4813      	ldr	r0, [pc, #76]	; (80034f0 <wifi_connect+0x5c>)
 80034a2:	f00e fc59 	bl	8011d58 <net_wifi_set_credentials>
 80034a6:	b9e8      	cbnz	r0, 80034e4 <wifi_connect+0x50>
  {
    return -1;
  }
  
  if (netif.state == NET_STATE_CONNECTING )
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <wifi_connect+0x5c>)
 80034aa:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d00b      	beq.n	80034ca <wifi_connect+0x36>
  {
    netif.state = NET_STATE_CONNECTED ; 
  }
    
  if (netif.state == NET_STATE_CONNECTED ) 
 80034b2:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <wifi_connect+0x5c>)
 80034b4:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d00b      	beq.n	80034d4 <wifi_connect+0x40>
    {
      return  -1;
    }
  }
  
  if(net_if_connect (&netif) != NET_OK)
 80034bc:	480c      	ldr	r0, [pc, #48]	; (80034f0 <wifi_connect+0x5c>)
 80034be:	f00e fcc9 	bl	8011e54 <net_if_connect>
 80034c2:	b990      	cbnz	r0, 80034ea <wifi_connect+0x56>
  {
    return -1;
  }

  return NET_OK;
}
 80034c4:	b005      	add	sp, #20
 80034c6:	f85d fb04 	ldr.w	pc, [sp], #4
    netif.state = NET_STATE_CONNECTED ; 
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <wifi_connect+0x5c>)
 80034cc:	2205      	movs	r2, #5
 80034ce:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80034d2:	e7ee      	b.n	80034b2 <wifi_connect+0x1e>
    if(net_if_disconnect(&netif)!= NET_OK)
 80034d4:	4806      	ldr	r0, [pc, #24]	; (80034f0 <wifi_connect+0x5c>)
 80034d6:	f00e fcc2 	bl	8011e5e <net_if_disconnect>
 80034da:	2800      	cmp	r0, #0
 80034dc:	d0ee      	beq.n	80034bc <wifi_connect+0x28>
      return  -1;
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
 80034e2:	e7ef      	b.n	80034c4 <wifi_connect+0x30>
    return -1;
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	e7ec      	b.n	80034c4 <wifi_connect+0x30>
    return -1;
 80034ea:	f04f 30ff 	mov.w	r0, #4294967295
 80034ee:	e7e9      	b.n	80034c4 <wifi_connect+0x30>
 80034f0:	24005a8c 	.word	0x24005a8c

080034f4 <esWiFi_Task>:
 * WiFi Task
 * - Handle requests from GUI task
 * - Return status to GUI task
 */
void esWiFi_Task(void *argument)
{
 80034f4:	b500      	push	{lr}
 80034f6:	b083      	sub	sp, #12
    uint8_t msg;
    uint8_t retvalue;

    // Initial scan on power up
    if(wifi_scan(&APs[0]) == NET_OK)
 80034f8:	482a      	ldr	r0, [pc, #168]	; (80035a4 <esWiFi_Task+0xb0>)
 80034fa:	f7ff ffb5 	bl	8003468 <wifi_scan>
 80034fe:	bb08      	cbnz	r0, 8003544 <esWiFi_Task+0x50>
    {
        retvalue = UPDATE_WIFI_AP_DONE;
 8003500:	2301      	movs	r3, #1
 8003502:	f88d 3006 	strb.w	r3, [sp, #6]
        osMessageQueuePut(GUI_QueueHandle, &retvalue, 0, 0);
 8003506:	2300      	movs	r3, #0
 8003508:	461a      	mov	r2, r3
 800350a:	f10d 0106 	add.w	r1, sp, #6
 800350e:	4826      	ldr	r0, [pc, #152]	; (80035a8 <esWiFi_Task+0xb4>)
 8003510:	6800      	ldr	r0, [r0, #0]
 8003512:	f00c f8b4 	bl	800f67e <osMessageQueuePut>
 8003516:	e015      	b.n	8003544 <esWiFi_Task+0x50>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);

        switch(msg)
        {
            case UPDATE_WIFI_AP:
                memset(&APs, 0, sizeof(APs));
 8003518:	4c22      	ldr	r4, [pc, #136]	; (80035a4 <esWiFi_Task+0xb0>)
 800351a:	f44f 7202 	mov.w	r2, #520	; 0x208
 800351e:	2100      	movs	r1, #0
 8003520:	4620      	mov	r0, r4
 8003522:	f020 f84d 	bl	80235c0 <memset>

                if(wifi_scan(&APs[0]) == NET_OK)
 8003526:	4620      	mov	r0, r4
 8003528:	f7ff ff9e 	bl	8003468 <wifi_scan>
 800352c:	b950      	cbnz	r0, 8003544 <esWiFi_Task+0x50>
                {
                    retvalue = UPDATE_WIFI_AP_DONE;
 800352e:	2301      	movs	r3, #1
 8003530:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue, 0, 0);
 8003534:	2300      	movs	r3, #0
 8003536:	461a      	mov	r2, r3
 8003538:	f10d 0106 	add.w	r1, sp, #6
 800353c:	481a      	ldr	r0, [pc, #104]	; (80035a8 <esWiFi_Task+0xb4>)
 800353e:	6800      	ldr	r0, [r0, #0]
 8003540:	f00c f89d 	bl	800f67e <osMessageQueuePut>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	2200      	movs	r2, #0
 800354a:	f10d 0107 	add.w	r1, sp, #7
 800354e:	4817      	ldr	r0, [pc, #92]	; (80035ac <esWiFi_Task+0xb8>)
 8003550:	6800      	ldr	r0, [r0, #0]
 8003552:	f00c f8d4 	bl	800f6fe <osMessageQueueGet>
        switch(msg)
 8003556:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0dc      	beq.n	8003518 <esWiFi_Task+0x24>
 800355e:	2b02      	cmp	r3, #2
 8003560:	d1f0      	bne.n	8003544 <esWiFi_Task+0x50>
                }
            break;

            case CONNECTING_TO_WIFI:
                if(wifi_connect((char*)ssid_ascii, password_ascii, net_wifi_string_to_security((char*)encryption_ascii)) != NET_OK)
 8003562:	4813      	ldr	r0, [pc, #76]	; (80035b0 <esWiFi_Task+0xbc>)
 8003564:	f00e fb06 	bl	8011b74 <net_wifi_string_to_security>
 8003568:	4602      	mov	r2, r0
 800356a:	4912      	ldr	r1, [pc, #72]	; (80035b4 <esWiFi_Task+0xc0>)
 800356c:	4812      	ldr	r0, [pc, #72]	; (80035b8 <esWiFi_Task+0xc4>)
 800356e:	f7ff ff91 	bl	8003494 <wifi_connect>
 8003572:	b158      	cbz	r0, 800358c <esWiFi_Task+0x98>
                {
                    retvalue = CONNECTING_TO_WIFI_ERROR;
 8003574:	2304      	movs	r3, #4
 8003576:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 800357a:	2300      	movs	r3, #0
 800357c:	461a      	mov	r2, r3
 800357e:	f10d 0106 	add.w	r1, sp, #6
 8003582:	4809      	ldr	r0, [pc, #36]	; (80035a8 <esWiFi_Task+0xb4>)
 8003584:	6800      	ldr	r0, [r0, #0]
 8003586:	f00c f87a 	bl	800f67e <osMessageQueuePut>
 800358a:	e7db      	b.n	8003544 <esWiFi_Task+0x50>
                }
                else
                {
                    retvalue = CONNECTING_TO_WIFI_OK;
 800358c:	2303      	movs	r3, #3
 800358e:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 8003592:	2300      	movs	r3, #0
 8003594:	461a      	mov	r2, r3
 8003596:	f10d 0106 	add.w	r1, sp, #6
 800359a:	4803      	ldr	r0, [pc, #12]	; (80035a8 <esWiFi_Task+0xb4>)
 800359c:	6800      	ldr	r0, [r0, #0]
 800359e:	f00c f86e 	bl	800f67e <osMessageQueuePut>
 80035a2:	e7cf      	b.n	8003544 <esWiFi_Task+0x50>
 80035a4:	2400587c 	.word	0x2400587c
 80035a8:	24004f00 	.word	0x24004f00
 80035ac:	24004f08 	.word	0x24004f08
 80035b0:	240060a4 	.word	0x240060a4
 80035b4:	240060c4 	.word	0x240060c4
 80035b8:	24006104 	.word	0x24006104

080035bc <_ZN23ApplicationFontProviderD1Ev>:
 80035bc:	4a02      	ldr	r2, [pc, #8]	; (80035c8 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 80035be:	6002      	str	r2, [r0, #0]
 80035c0:	4a02      	ldr	r2, [pc, #8]	; (80035cc <_ZN23ApplicationFontProviderD1Ev+0x10>)
 80035c2:	6002      	str	r2, [r0, #0]
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	080252ec 	.word	0x080252ec
 80035cc:	08024f48 	.word	0x08024f48

080035d0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80035d0:	b508      	push	{r3, lr}
    switch (typography)
 80035d2:	2907      	cmp	r1, #7
 80035d4:	d825      	bhi.n	8003622 <_ZN23ApplicationFontProvider7getFontEt+0x52>
 80035d6:	e8df f001 	tbb	[pc, r1]
 80035da:	0804      	.short	0x0804
 80035dc:	1814100c 	.word	0x1814100c
 80035e0:	201c      	.short	0x201c
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80035e2:	f000 ff9b 	bl	800451c <_ZN17TypedTextDatabase8getFontsEv>
 80035e6:	6800      	ldr	r0, [r0, #0]
        // SairaSemiCondensed_Medium_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
    default:
        return 0;
    }
}
 80035e8:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80035ea:	f000 ff97 	bl	800451c <_ZN17TypedTextDatabase8getFontsEv>
 80035ee:	6840      	ldr	r0, [r0, #4]
 80035f0:	e7fa      	b.n	80035e8 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80035f2:	f000 ff93 	bl	800451c <_ZN17TypedTextDatabase8getFontsEv>
 80035f6:	6880      	ldr	r0, [r0, #8]
 80035f8:	e7f6      	b.n	80035e8 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80035fa:	f000 ff8f 	bl	800451c <_ZN17TypedTextDatabase8getFontsEv>
 80035fe:	68c0      	ldr	r0, [r0, #12]
 8003600:	e7f2      	b.n	80035e8 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003602:	f000 ff8b 	bl	800451c <_ZN17TypedTextDatabase8getFontsEv>
 8003606:	6900      	ldr	r0, [r0, #16]
 8003608:	e7ee      	b.n	80035e8 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800360a:	f000 ff87 	bl	800451c <_ZN17TypedTextDatabase8getFontsEv>
 800360e:	6900      	ldr	r0, [r0, #16]
 8003610:	e7ea      	b.n	80035e8 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8003612:	f000 ff83 	bl	800451c <_ZN17TypedTextDatabase8getFontsEv>
 8003616:	6940      	ldr	r0, [r0, #20]
 8003618:	e7e6      	b.n	80035e8 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800361a:	f000 ff7f 	bl	800451c <_ZN17TypedTextDatabase8getFontsEv>
 800361e:	6980      	ldr	r0, [r0, #24]
 8003620:	e7e2      	b.n	80035e8 <_ZN23ApplicationFontProvider7getFontEt+0x18>
    switch (typography)
 8003622:	2000      	movs	r0, #0
 8003624:	e7e0      	b.n	80035e8 <_ZN23ApplicationFontProvider7getFontEt+0x18>
	...

08003628 <_ZN23ApplicationFontProviderD0Ev>:
 8003628:	b510      	push	{r4, lr}
 800362a:	4604      	mov	r4, r0
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 800362e:	6003      	str	r3, [r0, #0]
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 8003632:	6003      	str	r3, [r0, #0]
 8003634:	2104      	movs	r1, #4
 8003636:	f01f fdfe 	bl	8023236 <_ZdlPvj>
 800363a:	4620      	mov	r0, r4
 800363c:	bd10      	pop	{r4, pc}
 800363e:	bf00      	nop
 8003640:	080252ec 	.word	0x080252ec
 8003644:	08024f48 	.word	0x08024f48

08003648 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003648:	4800      	ldr	r0, [pc, #0]	; (800364c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800364a:	4770      	bx	lr
 800364c:	080252f8 	.word	0x080252f8

08003650 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003650:	200d      	movs	r0, #13
 8003652:	4770      	bx	lr

08003654 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 8003654:	b169      	cbz	r1, 8003672 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003656:	b510      	push	{r4, lr}
 8003658:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800365e:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003662:	6803      	ldr	r3, [r0, #0]
 8003664:	689c      	ldr	r4, [r3, #8]
 8003666:	f10d 0303 	add.w	r3, sp, #3
 800366a:	aa01      	add	r2, sp, #4
 800366c:	47a0      	blx	r4
        return glyph;
    }
 800366e:	b002      	add	sp, #8
 8003670:	bd10      	pop	{r4, pc}
            return 0;
 8003672:	2000      	movs	r0, #0
    }
 8003674:	4770      	bx	lr

08003676 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003676:	8940      	ldrh	r0, [r0, #10]
 8003678:	4770      	bx	lr

0800367a <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800367a:	8980      	ldrh	r0, [r0, #12]
 800367c:	4770      	bx	lr

0800367e <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 800367e:	8880      	ldrh	r0, [r0, #4]
 8003680:	4770      	bx	lr

08003682 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8003682:	8883      	ldrh	r3, [r0, #4]
 8003684:	7980      	ldrb	r0, [r0, #6]
 8003686:	4418      	add	r0, r3
    }
 8003688:	b280      	uxth	r0, r0
 800368a:	4770      	bx	lr

0800368c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800368c:	79c0      	ldrb	r0, [r0, #7]
    }
 800368e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003692:	4770      	bx	lr

08003694 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003694:	79c0      	ldrb	r0, [r0, #7]
    }
 8003696:	09c0      	lsrs	r0, r0, #7
 8003698:	4770      	bx	lr
	...

0800369c <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 800369c:	4b01      	ldr	r3, [pc, #4]	; (80036a4 <_ZN8touchgfx10TransitionD1Ev+0x8>)
 800369e:	6003      	str	r3, [r0, #0]
    }
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	08025730 	.word	0x08025730

080036a8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 80036a8:	4770      	bx	lr

080036aa <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80036aa:	4770      	bx	lr

080036ac <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80036ac:	4770      	bx	lr

080036ae <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80036ae:	6041      	str	r1, [r0, #4]
    }
 80036b0:	4770      	bx	lr

080036b2 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80036b2:	2301      	movs	r3, #1
 80036b4:	7203      	strb	r3, [r0, #8]
    }
 80036b6:	4770      	bx	lr

080036b8 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80036b8:	4a02      	ldr	r2, [pc, #8]	; (80036c4 <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 80036ba:	6002      	str	r2, [r0, #0]
    {
 80036bc:	4a02      	ldr	r2, [pc, #8]	; (80036c8 <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 80036be:	6002      	str	r2, [r0, #0]
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	08025754 	.word	0x08025754
 80036c8:	08025730 	.word	0x08025730

080036cc <_Z41__static_initialization_and_destruction_0ii>:
}

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
 80036cc:	2801      	cmp	r0, #1
 80036ce:	d006      	beq.n	80036de <_Z41__static_initialization_and_destruction_0ii+0x12>
 80036d0:	b920      	cbnz	r0, 80036dc <_Z41__static_initialization_and_destruction_0ii+0x10>
 80036d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036d6:	4299      	cmp	r1, r3
 80036d8:	f000 8222 	beq.w	8003b20 <_Z41__static_initialization_and_destruction_0ii+0x454>
 80036dc:	4770      	bx	lr
 80036de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036e2:	4299      	cmp	r1, r3
 80036e4:	d1f4      	bne.n	80036d0 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80036e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80036ea:	4bf0      	ldr	r3, [pc, #960]	; (8003aac <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80036f0:	240c      	movs	r4, #12
 80036f2:	805c      	strh	r4, [r3, #2]
 80036f4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80036f8:	f8a3 e004 	strh.w	lr, [r3, #4]
 80036fc:	2224      	movs	r2, #36	; 0x24
 80036fe:	80da      	strh	r2, [r3, #6]
 8003700:	811a      	strh	r2, [r3, #8]
 8003702:	f04f 0c06 	mov.w	ip, #6
 8003706:	f8a3 c00a 	strh.w	ip, [r3, #10]
 800370a:	2502      	movs	r5, #2
 800370c:	731d      	strb	r5, [r3, #12]
 800370e:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8003712:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8003716:	f8a3 e010 	strh.w	lr, [r3, #16]
 800371a:	825a      	strh	r2, [r3, #18]
 800371c:	829a      	strh	r2, [r3, #20]
 800371e:	f8a3 c016 	strh.w	ip, [r3, #22]
 8003722:	f04f 0503 	mov.w	r5, #3
 8003726:	761d      	strb	r5, [r3, #24]
 8003728:	f04f 0660 	mov.w	r6, #96	; 0x60
 800372c:	835e      	strh	r6, [r3, #26]
 800372e:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8003732:	83da      	strh	r2, [r3, #30]
 8003734:	841a      	strh	r2, [r3, #32]
 8003736:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 800373a:	f04f 0504 	mov.w	r5, #4
 800373e:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8003742:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8003746:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 800374a:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 800374e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003750:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003752:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8003756:	f04f 0505 	mov.w	r5, #5
 800375a:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 800375e:	27b4      	movs	r7, #180	; 0xb4
 8003760:	865f      	strh	r7, [r3, #50]	; 0x32
 8003762:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8003766:	86da      	strh	r2, [r3, #54]	; 0x36
 8003768:	871a      	strh	r2, [r3, #56]	; 0x38
 800376a:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 800376e:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 8003772:	f04f 05de 	mov.w	r5, #222	; 0xde
 8003776:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8003778:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 800377c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8003780:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8003784:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8003788:	f04f 0907 	mov.w	r9, #7
 800378c:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8003790:	f44f 7984 	mov.w	r9, #264	; 0x108
 8003794:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8003798:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 800379c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80037a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80037a4:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 80037a8:	f04f 0b08 	mov.w	fp, #8
 80037ac:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80037b0:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80037b4:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80037b8:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 80037bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80037c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037c4:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 80037c8:	2509      	movs	r5, #9
 80037ca:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 80037ce:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80037d2:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80037d6:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 80037da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80037de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80037e2:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 80037e6:	250a      	movs	r5, #10
 80037e8:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80037ec:	f44f 75c3 	mov.w	r5, #390	; 0x186
 80037f0:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 80037f4:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 80037f8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80037fc:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8003800:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8003804:	f04f 090b 	mov.w	r9, #11
 8003808:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 800380c:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8003810:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8003814:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8003818:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800381c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8003820:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8003824:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8003828:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 800382c:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8003830:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8003834:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8003838:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800383c:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8003840:	f04f 060d 	mov.w	r6, #13
 8003844:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8003848:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 800384c:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8003850:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8003854:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8003858:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 800385c:	f04f 0a0e 	mov.w	sl, #14
 8003860:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8003864:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003868:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 800386c:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8003870:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8003874:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003878:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 800387c:	f04f 0a0f 	mov.w	sl, #15
 8003880:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8003884:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8003888:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 800388c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8003890:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8003894:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8003898:	f04f 0a10 	mov.w	sl, #16
 800389c:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 80038a0:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 80038a4:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 80038a8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80038ac:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80038b0:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 80038b4:	f04f 0a11 	mov.w	sl, #17
 80038b8:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80038bc:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80038c0:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80038c4:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 80038c8:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80038cc:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80038d0:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 80038d4:	f04f 0a12 	mov.w	sl, #18
 80038d8:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80038dc:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80038e0:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 80038e4:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80038e8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80038ec:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80038f0:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 80038f4:	f04f 0a13 	mov.w	sl, #19
 80038f8:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 80038fc:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8003900:	4656      	mov	r6, sl
 8003902:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8003906:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 800390a:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 800390e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8003912:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8003916:	f04f 0a14 	mov.w	sl, #20
 800391a:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 800391e:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8003922:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8003926:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 800392a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800392e:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8003932:	f04f 0a15 	mov.w	sl, #21
 8003936:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 800393a:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 800393e:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8003942:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8003946:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 800394a:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 800394e:	f04f 0a16 	mov.w	sl, #22
 8003952:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8003956:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 800395a:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 800395e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8003962:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8003966:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 800396a:	f04f 0e17 	mov.w	lr, #23
 800396e:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8003972:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8003976:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 800397a:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 800397e:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8003982:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8003986:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 800398a:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 800398e:	f04f 0918 	mov.w	r9, #24
 8003992:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8003996:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 800399a:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 800399e:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 80039a2:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80039a6:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 80039aa:	f04f 0819 	mov.w	r8, #25
 80039ae:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80039b2:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80039b6:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 80039ba:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80039be:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80039c2:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 80039c6:	271a      	movs	r7, #26
 80039c8:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80039cc:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80039d0:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 80039d4:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 80039d8:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80039dc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 80039e0:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 80039e4:	271b      	movs	r7, #27
 80039e6:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 80039ea:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80039ee:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 80039f2:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 80039f6:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 80039fa:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 80039fe:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8003a02:	271c      	movs	r7, #28
 8003a04:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8003a08:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8003a0c:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8003a10:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8003a14:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8003a18:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8003a1c:	271d      	movs	r7, #29
 8003a1e:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8003a22:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8003a26:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8003a2a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8003a2e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8003a32:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8003a36:	271e      	movs	r7, #30
 8003a38:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8003a3c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003a40:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8003a44:	26e2      	movs	r6, #226	; 0xe2
 8003a46:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8003a4a:	f44f 7790 	mov.w	r7, #288	; 0x120
 8003a4e:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8003a52:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8003a56:	f04f 0708 	mov.w	r7, #8
 8003a5a:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8003a60:	801c      	strh	r4, [r3, #0]
 8003a62:	f8a3 e002 	strh.w	lr, [r3, #2]
 8003a66:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8003a6a:	f8a3 c004 	strh.w	ip, [r3, #4]
 8003a6e:	80da      	strh	r2, [r3, #6]
};
 8003a70:	2700      	movs	r7, #0
 8003a72:	609f      	str	r7, [r3, #8]
 8003a74:	f04f 0804 	mov.w	r8, #4
 8003a78:	f8a3 800c 	strh.w	r8, [r3, #12]
 8003a7c:	821d      	strh	r5, [r3, #16]
 8003a7e:	f8a3 e012 	strh.w	lr, [r3, #18]
 8003a82:	f8a3 c014 	strh.w	ip, [r3, #20]
 8003a86:	82da      	strh	r2, [r3, #22]
 8003a88:	619f      	str	r7, [r3, #24]
 8003a8a:	f04f 0e03 	mov.w	lr, #3
 8003a8e:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8003a92:	841c      	strh	r4, [r3, #32]
 8003a94:	845e      	strh	r6, [r3, #34]	; 0x22
 8003a96:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8003a9a:	84da      	strh	r2, [r3, #38]	; 0x26
 8003a9c:	629f      	str	r7, [r3, #40]	; 0x28
 8003a9e:	f04f 0407 	mov.w	r4, #7
 8003aa2:	859c      	strh	r4, [r3, #44]	; 0x2c
 8003aa4:	861d      	strh	r5, [r3, #48]	; 0x30
 8003aa6:	865e      	strh	r6, [r3, #50]	; 0x32
 8003aa8:	e004      	b.n	8003ab4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8003aaa:	bf00      	nop
 8003aac:	24005c14 	.word	0x24005c14
 8003ab0:	24005b84 	.word	0x24005b84
 8003ab4:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8003ab8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003aba:	639f      	str	r7, [r3, #56]	; 0x38
 8003abc:	f04f 0205 	mov.w	r2, #5
 8003ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	3340      	adds	r3, #64	; 0x40
 8003ac6:	2c00      	cmp	r4, #0
 8003ac8:	db0b      	blt.n	8003ae2 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8003ad4:	801a      	strh	r2, [r3, #0]
 8003ad6:	805a      	strh	r2, [r3, #2]
 8003ad8:	809a      	strh	r2, [r3, #4]
 8003ada:	80da      	strh	r2, [r3, #6]
 8003adc:	3310      	adds	r3, #16
 8003ade:	3c01      	subs	r4, #1
 8003ae0:	e7f1      	b.n	8003ac6 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003ae4:	2205      	movs	r2, #5
 8003ae6:	825a      	strh	r2, [r3, #18]
 8003ae8:	222d      	movs	r2, #45	; 0x2d
 8003aea:	829a      	strh	r2, [r3, #20]
 8003aec:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003af0:	82da      	strh	r2, [r3, #22]
 8003af2:	2246      	movs	r2, #70	; 0x46
 8003af4:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8003af6:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003af8:	61da      	str	r2, [r3, #28]
 8003afa:	2200      	movs	r2, #0
 8003afc:	841a      	strh	r2, [r3, #32]
        : color(col)
 8003afe:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
 8003b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b08:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8003b0a:	b918      	cbnz	r0, 8003b14 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8003b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b10:	4299      	cmp	r1, r3
 8003b12:	d001      	beq.n	8003b18 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8003b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003b1a:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003b1c:	61da      	str	r2, [r3, #28]
 8003b1e:	e7f9      	b.n	8003b14 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8003b20:	4b01      	ldr	r3, [pc, #4]	; (8003b28 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003b22:	4a02      	ldr	r2, [pc, #8]	; (8003b2c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003b24:	61da      	str	r2, [r3, #28]
 8003b26:	4770      	bx	lr
 8003b28:	24005be4 	.word	0x24005be4
 8003b2c:	08024f38 	.word	0x08024f38

08003b30 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003b30:	b510      	push	{r4, lr}
 8003b32:	4604      	mov	r4, r0
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 8003b36:	6003      	str	r3, [r0, #0]
 8003b38:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 8003b3a:	6003      	str	r3, [r0, #0]
 8003b3c:	210c      	movs	r1, #12
 8003b3e:	f01f fb7a 	bl	8023236 <_ZdlPvj>
 8003b42:	4620      	mov	r0, r4
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	bf00      	nop
 8003b48:	08025754 	.word	0x08025754
 8003b4c:	08025730 	.word	0x08025730

08003b50 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003b50:	b510      	push	{r4, lr}
 8003b52:	4604      	mov	r4, r0
    {
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <_ZN8touchgfx10TransitionD0Ev+0x14>)
 8003b56:	6003      	str	r3, [r0, #0]
    }
 8003b58:	210c      	movs	r1, #12
 8003b5a:	f01f fb6c 	bl	8023236 <_ZdlPvj>
 8003b5e:	4620      	mov	r0, r4
 8003b60:	bd10      	pop	{r4, pc}
 8003b62:	bf00      	nop
 8003b64:	08025730 	.word	0x08025730

08003b68 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003b68:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8003b6a:	f014 f9e3 	bl	8017f34 <_ZN8touchgfx11Application11getInstanceEv>
 8003b6e:	f014 fdc3 	bl	80186f8 <_ZN8touchgfx11Application10invalidateEv>
    }
 8003b72:	bd08      	pop	{r3, pc}

08003b74 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	4604      	mov	r4, r0
 8003b78:	460e      	mov	r6, r1
 8003b7a:	4617      	mov	r7, r2
          pendingScreenTransitionCallback(0)
 8003b7c:	f014 fa38 	bl	8017ff0 <_ZN8touchgfx11ApplicationC1Ev>
 8003b80:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	2500      	movs	r5, #0
 8003b86:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8003b8a:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
        instance = this;
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8003b90:	601c      	str	r4, [r3, #0]
      model(m)
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 8003b94:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8003b98:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 8003b9e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003ba2:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003ba6:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8003baa:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 8003bae:	f8c4 7150 	str.w	r7, [r4, #336]	; 0x150
 8003bb2:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        return instance;
 8003bb6:	4e0f      	ldr	r6, [pc, #60]	; (8003bf4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
 8003bb8:	6830      	ldr	r0, [r6, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003bba:	6803      	ldr	r3, [r0, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f000 fc38 	bl	8004438 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003bc8:	6833      	ldr	r3, [r6, #0]
 8003bca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8003bce:	b10a      	cbz	r2, 8003bd4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
 8003bd0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003bd2:	b900      	cbnz	r0, 8003bd6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x62>
        return instance->lcdRef;
 8003bd4:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003bd6:	f01a fd0a 	bl	801e5ee <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8003bda:	4620      	mov	r0, r4
 8003bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bde:	bf00      	nop
 8003be0:	08024fac 	.word	0x08024fac
 8003be4:	2400ff30 	.word	0x2400ff30
 8003be8:	08025010 	.word	0x08025010
 8003bec:	08024f94 	.word	0x08024f94
 8003bf0:	08024ff8 	.word	0x08024ff8
 8003bf4:	2400fee4 	.word	0x2400fee4

08003bf8 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
{
 8003bf8:	b410      	push	{r4}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 8003bfe:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 8003c00:	9206      	str	r2, [sp, #24]
 8003c02:	2200      	movs	r2, #0
 8003c04:	9207      	str	r2, [sp, #28]
 8003c06:	46ec      	mov	ip, sp
 8003c08:	aa08      	add	r2, sp, #32
 8003c0a:	e912 0003 	ldmdb	r2, {r0, r1}
 8003c0e:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 8003c12:	4c0c      	ldr	r4, [pc, #48]	; (8003c44 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 8003c14:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 8003c16:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 8003c18:	9202      	str	r2, [sp, #8]
 8003c1a:	9303      	str	r3, [sp, #12]
 8003c1c:	aa04      	add	r2, sp, #16
 8003c1e:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003c22:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 8003c26:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 8003c2a:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 8003c2e:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 8003c30:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8003c34:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8003c38:	b009      	add	sp, #36	; 0x24
 8003c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	08003da1 	.word	0x08003da1
 8003c44:	08024f94 	.word	0x08024f94
 8003c48:	08024ff8 	.word	0x08024ff8

08003c4c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c50:	4607      	mov	r7, r0
 8003c52:	4688      	mov	r8, r1
 8003c54:	4615      	mov	r5, r2
 8003c56:	4699      	mov	r9, r3
 8003c58:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003c5c:	6890      	ldr	r0, [r2, #8]
 8003c5e:	6803      	ldr	r3, [r0, #0]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	4798      	blx	r3
 8003c64:	f642 63c7 	movw	r3, #11975	; 0x2ec7
 8003c68:	4298      	cmp	r0, r3
 8003c6a:	d976      	bls.n	8003d5a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003c6c:	6868      	ldr	r0, [r5, #4]
 8003c6e:	6803      	ldr	r3, [r0, #0]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	4798      	blx	r3
 8003c74:	280f      	cmp	r0, #15
 8003c76:	d976      	bls.n	8003d66 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003c78:	68e8      	ldr	r0, [r5, #12]
 8003c7a:	6803      	ldr	r3, [r0, #0]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	4798      	blx	r3
 8003c80:	280b      	cmp	r0, #11
 8003c82:	d976      	bls.n	8003d72 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 8003c84:	f014 f956 	bl	8017f34 <_ZN8touchgfx11Application11getInstanceEv>
 8003c88:	f014 f995 	bl	8017fb6 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003c8c:	f8d9 0000 	ldr.w	r0, [r9]
 8003c90:	b110      	cbz	r0, 8003c98 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x4c>
        (*currentTrans)->tearDown();
 8003c92:	6803      	ldr	r3, [r0, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4798      	blx	r3
    if (*currentTrans)
 8003c98:	f8d9 0000 	ldr.w	r0, [r9]
 8003c9c:	b110      	cbz	r0, 8003ca4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 8003c9e:	6803      	ldr	r3, [r0, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4798      	blx	r3
    if (*currentScreen)
 8003ca4:	6838      	ldr	r0, [r7, #0]
 8003ca6:	b110      	cbz	r0, 8003cae <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x62>
        (*currentScreen)->tearDownScreen();
 8003ca8:	6803      	ldr	r3, [r0, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	4798      	blx	r3
    if (*currentPresenter)
 8003cae:	f8d8 0000 	ldr.w	r0, [r8]
 8003cb2:	b110      	cbz	r0, 8003cba <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6e>
        (*currentPresenter)->deactivate();
 8003cb4:	6803      	ldr	r3, [r0, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4798      	blx	r3
    if (*currentScreen)
 8003cba:	6838      	ldr	r0, [r7, #0]
 8003cbc:	b110      	cbz	r0, 8003cc4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x78>
        (*currentScreen)->~Screen();
 8003cbe:	6803      	ldr	r3, [r0, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4798      	blx	r3
    if (*currentPresenter)
 8003cc4:	f8d8 0000 	ldr.w	r0, [r8]
 8003cc8:	b110      	cbz	r0, 8003cd0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x84>
        (*currentPresenter)->~Presenter();
 8003cca:	6803      	ldr	r3, [r0, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003cd0:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003cd2:	6803      	ldr	r3, [r0, #0]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4798      	blx	r3
 8003cda:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8003cdc:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8003cde:	6003      	str	r3, [r0, #0]
 8003ce0:	f04f 0b00 	mov.w	fp, #0
 8003ce4:	f8c0 b004 	str.w	fp, [r0, #4]
 8003ce8:	f880 b008 	strb.w	fp, [r0, #8]
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8003cee:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003cf0:	68a8      	ldr	r0, [r5, #8]
 8003cf2:	6803      	ldr	r3, [r0, #0]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	4659      	mov	r1, fp
 8003cf8:	4798      	blx	r3
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	f003 fa46 	bl	800718c <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003d00:	6868      	ldr	r0, [r5, #4]
 8003d02:	6803      	ldr	r3, [r0, #0]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	4659      	mov	r1, fp
 8003d08:	4798      	blx	r3
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	f002 fd5d 	bl	80067cc <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 8003d12:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003d16:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8003d1a:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8003d1c:	2d00      	cmp	r5, #0
 8003d1e:	d02e      	beq.n	8003d7e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 8003d20:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003d22:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003d26:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003d2a:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 8003d2c:	6833      	ldr	r3, [r6, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4630      	mov	r0, r6
 8003d32:	4798      	blx	r3
    newPresenter->activate();
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4628      	mov	r0, r5
 8003d3a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f015 fd06 	bl	8019750 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4798      	blx	r3
    newTransition->invalidate();
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	4620      	mov	r0, r4
 8003d52:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8003d54:	4628      	mov	r0, r5
 8003d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8003d5c:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d5e:	21a3      	movs	r1, #163	; 0xa3
 8003d60:	480c      	ldr	r0, [pc, #48]	; (8003d94 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d62:	f01f fa97 	bl	8023294 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8003d68:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d6a:	21a4      	movs	r1, #164	; 0xa4
 8003d6c:	4809      	ldr	r0, [pc, #36]	; (8003d94 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d6e:	f01f fa91 	bl	8023294 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003d72:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8003d74:	4a06      	ldr	r2, [pc, #24]	; (8003d90 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d76:	21a5      	movs	r1, #165	; 0xa5
 8003d78:	4806      	ldr	r0, [pc, #24]	; (8003d94 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d7a:	f01f fa8b 	bl	8023294 <__assert_func>
    model->bind(newPresenter);
 8003d7e:	462b      	mov	r3, r5
 8003d80:	e7cf      	b.n	8003d22 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
 8003d82:	bf00      	nop
 8003d84:	08025730 	.word	0x08025730
 8003d88:	08025754 	.word	0x08025754
 8003d8c:	080253fc 	.word	0x080253fc
 8003d90:	0802548c 	.word	0x0802548c
 8003d94:	08025598 	.word	0x08025598
 8003d98:	080255e0 	.word	0x080255e0
 8003d9c:	08025684 	.word	0x08025684

08003da0 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:
{
 8003da0:	b500      	push	{lr}
 8003da2:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003da4:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 8003dac:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003db0:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8003db4:	4803      	ldr	r0, [pc, #12]	; (8003dc4 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 8003db6:	f7ff ff49 	bl	8003c4c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003dba:	b003      	add	sp, #12
 8003dbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dc0:	2400ff24 	.word	0x2400ff24
 8003dc4:	2400ff20 	.word	0x2400ff20

08003dc8 <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8003dc8:	b508      	push	{r3, lr}
 8003dca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f7ff fc7c 	bl	80036cc <_Z41__static_initialization_and_destruction_0ii>
 8003dd4:	bd08      	pop	{r3, pc}

08003dd6 <_GLOBAL__sub_D__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8003dd6:	b508      	push	{r3, lr}
 8003dd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7ff fc75 	bl	80036cc <_Z41__static_initialization_and_destruction_0ii>
 8003de2:	bd08      	pop	{r3, pc}

08003de4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003de4:	6a00      	ldr	r0, [r0, #32]
 8003de6:	4770      	bx	lr

08003de8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003de8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003dea:	4770      	bx	lr

08003dec <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003dec:	4a03      	ldr	r2, [pc, #12]	; (8003dfc <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 8003dee:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003df0:	4a03      	ldr	r2, [pc, #12]	; (8003e00 <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 8003df2:	6002      	str	r2, [r0, #0]
    {
 8003df4:	4a03      	ldr	r2, [pc, #12]	; (8003e04 <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 8003df6:	6002      	str	r2, [r0, #0]
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	08025778 	.word	0x08025778
 8003e00:	0802704c 	.word	0x0802704c
 8003e04:	080259b8 	.word	0x080259b8

08003e08 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8003e08:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003e0a:	888b      	ldrh	r3, [r1, #4]
 8003e0c:	0adb      	lsrs	r3, r3, #11
 8003e0e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e12:	680b      	ldr	r3, [r1, #0]
}
 8003e14:	4418      	add	r0, r3
 8003e16:	4770      	bx	lr

08003e18 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8003e18:	4694      	mov	ip, r2
 8003e1a:	b1da      	cbz	r2, 8003e54 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8003e1c:	7b13      	ldrb	r3, [r2, #12]
 8003e1e:	b1db      	cbz	r3, 8003e58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003e20:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003e22:	f89c 000d 	ldrb.w	r0, [ip, #13]
 8003e26:	0200      	lsls	r0, r0, #8
 8003e28:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003e2c:	f89c c00b 	ldrb.w	ip, [ip, #11]
 8003e30:	ea40 000c 	orr.w	r0, r0, ip
 8003e34:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b17b      	cbz	r3, 8003e5c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003e3c:	8810      	ldrh	r0, [r2, #0]
 8003e3e:	4288      	cmp	r0, r1
 8003e40:	d005      	beq.n	8003e4e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 8003e42:	4288      	cmp	r0, r1
 8003e44:	d80c      	bhi.n	8003e60 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3204      	adds	r2, #4
 8003e4c:	e7f5      	b.n	8003e3a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 8003e4e:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8003e52:	4770      	bx	lr
        return 0;
 8003e54:	2000      	movs	r0, #0
 8003e56:	4770      	bx	lr
 8003e58:	2000      	movs	r0, #0
 8003e5a:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	4770      	bx	lr
 8003e60:	2000      	movs	r0, #0
}
 8003e62:	4770      	bx	lr

08003e64 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003e64:	b510      	push	{r4, lr}
 8003e66:	4604      	mov	r4, r0
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 8003e6a:	6003      	str	r3, [r0, #0]
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 8003e6e:	6003      	str	r3, [r0, #0]
    {
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 8003e72:	6003      	str	r3, [r0, #0]
 8003e74:	2128      	movs	r1, #40	; 0x28
 8003e76:	f01f f9de 	bl	8023236 <_ZdlPvj>
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	bf00      	nop
 8003e80:	08025778 	.word	0x08025778
 8003e84:	0802704c 	.word	0x0802704c
 8003e88:	080259b8 	.word	0x080259b8

08003e8c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003e8c:	b530      	push	{r4, r5, lr}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003e92:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8003e96:	9506      	str	r5, [sp, #24]
 8003e98:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003e9c:	9505      	str	r5, [sp, #20]
 8003e9e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003ea2:	9504      	str	r5, [sp, #16]
 8003ea4:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003ea8:	9503      	str	r5, [sp, #12]
 8003eaa:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003eae:	9502      	str	r5, [sp, #8]
 8003eb0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003eb4:	9501      	str	r5, [sp, #4]
 8003eb6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8003eba:	9500      	str	r5, [sp, #0]
 8003ebc:	f015 f8bc 	bl	8019038 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ec6:	61a3      	str	r3, [r4, #24]
 8003ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003eca:	61e3      	str	r3, [r4, #28]
 8003ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ece:	6223      	str	r3, [r4, #32]
 8003ed0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003ed2:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	b009      	add	sp, #36	; 0x24
 8003ed8:	bd30      	pop	{r4, r5, pc}
 8003eda:	bf00      	nop
 8003edc:	08025778 	.word	0x08025778

08003ee0 <__tcf_0>:
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <__tcf_0+0x10>)
 8003ee2:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <__tcf_0+0x14>)
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <__tcf_0+0x18>)
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	4a04      	ldr	r2, [pc, #16]	; (8003efc <__tcf_0+0x1c>)
 8003eec:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_SairaSemiCondensed_Medium_18_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SairaSemiCondensed_Medium_18_4bpp();

touchgfx::GeneratedFont& getFont_SairaSemiCondensed_Medium_18_4bpp()
{
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003eee:	4770      	bx	lr
 8003ef0:	24005d80 	.word	0x24005d80
 8003ef4:	08025778 	.word	0x08025778
 8003ef8:	0802704c 	.word	0x0802704c
 8003efc:	080259b8 	.word	0x080259b8

08003f00 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv>:
 8003f00:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	f3bf 8f5b 	dmb	ish
 8003f08:	f013 0f01 	tst.w	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x12>
    return SairaSemiCondensed_Medium_18_4bpp;
}
 8003f0e:	4816      	ldr	r0, [pc, #88]	; (8003f68 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003f10:	4770      	bx	lr
{
 8003f12:	b500      	push	{lr}
 8003f14:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003f16:	4813      	ldr	r0, [pc, #76]	; (8003f64 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003f18:	f01f f98f 	bl	802323a <__cxa_guard_acquire>
 8003f1c:	b918      	cbnz	r0, 8003f26 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x26>
}
 8003f1e:	4812      	ldr	r0, [pc, #72]	; (8003f68 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003f20:	b00d      	add	sp, #52	; 0x34
 8003f22:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003f26:	2300      	movs	r3, #0
 8003f28:	930a      	str	r3, [sp, #40]	; 0x28
 8003f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f2c:	9308      	str	r3, [sp, #32]
 8003f2e:	233f      	movs	r3, #63	; 0x3f
 8003f30:	9307      	str	r3, [sp, #28]
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x6c>)
 8003f34:	9306      	str	r3, [sp, #24]
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x70>)
 8003f38:	9305      	str	r3, [sp, #20]
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	9303      	str	r3, [sp, #12]
 8003f40:	9302      	str	r3, [sp, #8]
 8003f42:	2304      	movs	r3, #4
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2312      	movs	r3, #18
 8003f4a:	226e      	movs	r2, #110	; 0x6e
 8003f4c:	4909      	ldr	r1, [pc, #36]	; (8003f74 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x74>)
 8003f4e:	4806      	ldr	r0, [pc, #24]	; (8003f68 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003f50:	f7ff ff9c 	bl	8003e8c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f54:	4808      	ldr	r0, [pc, #32]	; (8003f78 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x78>)
 8003f56:	f01f f9bb 	bl	80232d0 <atexit>
 8003f5a:	4802      	ldr	r0, [pc, #8]	; (8003f64 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003f5c:	f01f f979 	bl	8023252 <__cxa_guard_release>
 8003f60:	e7dd      	b.n	8003f1e <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x1e>
 8003f62:	bf00      	nop
 8003f64:	24005d7c 	.word	0x24005d7c
 8003f68:	24005d80 	.word	0x24005d80
 8003f6c:	080273a4 	.word	0x080273a4
 8003f70:	08027ad4 	.word	0x08027ad4
 8003f74:	9000a720 	.word	0x9000a720
 8003f78:	08003ee1 	.word	0x08003ee1

08003f7c <__tcf_0>:
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <__tcf_0+0x10>)
 8003f7e:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <__tcf_0+0x14>)
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	4a04      	ldr	r2, [pc, #16]	; (8003f94 <__tcf_0+0x18>)
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <__tcf_0+0x1c>)
 8003f88:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_Saira_Medium_22_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Saira_Medium_22_4bpp();

touchgfx::GeneratedFont& getFont_Saira_Medium_22_4bpp()
{
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8003f8a:	4770      	bx	lr
 8003f8c:	24005dac 	.word	0x24005dac
 8003f90:	08025778 	.word	0x08025778
 8003f94:	0802704c 	.word	0x0802704c
 8003f98:	080259b8 	.word	0x080259b8

08003f9c <_Z28getFont_Saira_Medium_22_4bppv>:
 8003f9c:	4b18      	ldr	r3, [pc, #96]	; (8004000 <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f3bf 8f5b 	dmb	ish
 8003fa4:	f013 0f01 	tst.w	r3, #1
 8003fa8:	d001      	beq.n	8003fae <_Z28getFont_Saira_Medium_22_4bppv+0x12>
    return Saira_Medium_22_4bpp;
}
 8003faa:	4816      	ldr	r0, [pc, #88]	; (8004004 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8003fac:	4770      	bx	lr
{
 8003fae:	b500      	push	{lr}
 8003fb0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8003fb2:	4813      	ldr	r0, [pc, #76]	; (8004000 <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8003fb4:	f01f f941 	bl	802323a <__cxa_guard_acquire>
 8003fb8:	b918      	cbnz	r0, 8003fc2 <_Z28getFont_Saira_Medium_22_4bppv+0x26>
}
 8003fba:	4812      	ldr	r0, [pc, #72]	; (8004004 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8003fbc:	b00d      	add	sp, #52	; 0x34
 8003fbe:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8003fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc8:	9308      	str	r3, [sp, #32]
 8003fca:	233f      	movs	r3, #63	; 0x3f
 8003fcc:	9307      	str	r3, [sp, #28]
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <_Z28getFont_Saira_Medium_22_4bppv+0x6c>)
 8003fd0:	9306      	str	r3, [sp, #24]
 8003fd2:	4b0e      	ldr	r3, [pc, #56]	; (800400c <_Z28getFont_Saira_Medium_22_4bppv+0x70>)
 8003fd4:	9305      	str	r3, [sp, #20]
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	9304      	str	r3, [sp, #16]
 8003fda:	9303      	str	r3, [sp, #12]
 8003fdc:	9302      	str	r3, [sp, #8]
 8003fde:	2304      	movs	r3, #4
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2305      	movs	r3, #5
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2316      	movs	r3, #22
 8003fe8:	226e      	movs	r2, #110	; 0x6e
 8003fea:	4909      	ldr	r1, [pc, #36]	; (8004010 <_Z28getFont_Saira_Medium_22_4bppv+0x74>)
 8003fec:	4805      	ldr	r0, [pc, #20]	; (8004004 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8003fee:	f7ff ff4d 	bl	8003e8c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003ff2:	4808      	ldr	r0, [pc, #32]	; (8004014 <_Z28getFont_Saira_Medium_22_4bppv+0x78>)
 8003ff4:	f01f f96c 	bl	80232d0 <atexit>
 8003ff8:	4801      	ldr	r0, [pc, #4]	; (8004000 <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8003ffa:	f01f f92a 	bl	8023252 <__cxa_guard_release>
 8003ffe:	e7dc      	b.n	8003fba <_Z28getFont_Saira_Medium_22_4bppv+0x1e>
 8004000:	24005da8 	.word	0x24005da8
 8004004:	24005dac 	.word	0x24005dac
 8004008:	08027508 	.word	0x08027508
 800400c:	08027ae8 	.word	0x08027ae8
 8004010:	9000ad24 	.word	0x9000ad24
 8004014:	08003f7d 	.word	0x08003f7d

08004018 <__tcf_0>:
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <__tcf_0+0x10>)
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <__tcf_0+0x14>)
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	4a04      	ldr	r2, [pc, #16]	; (8004030 <__tcf_0+0x18>)
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	4a04      	ldr	r2, [pc, #16]	; (8004034 <__tcf_0+0x1c>)
 8004024:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004026:	4770      	bx	lr
 8004028:	24005dd8 	.word	0x24005dd8
 800402c:	08025778 	.word	0x08025778
 8004030:	0802704c 	.word	0x0802704c
 8004034:	080259b8 	.word	0x080259b8

08004038 <_Z23getFont_verdana_10_4bppv>:
 8004038:	4b17      	ldr	r3, [pc, #92]	; (8004098 <_Z23getFont_verdana_10_4bppv+0x60>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	f3bf 8f5b 	dmb	ish
 8004040:	f013 0f01 	tst.w	r3, #1
 8004044:	d001      	beq.n	800404a <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 8004046:	4815      	ldr	r0, [pc, #84]	; (800409c <_Z23getFont_verdana_10_4bppv+0x64>)
 8004048:	4770      	bx	lr
{
 800404a:	b500      	push	{lr}
 800404c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800404e:	4812      	ldr	r0, [pc, #72]	; (8004098 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004050:	f01f f8f3 	bl	802323a <__cxa_guard_acquire>
 8004054:	b918      	cbnz	r0, 800405e <_Z23getFont_verdana_10_4bppv+0x26>
}
 8004056:	4811      	ldr	r0, [pc, #68]	; (800409c <_Z23getFont_verdana_10_4bppv+0x64>)
 8004058:	b00d      	add	sp, #52	; 0x34
 800405a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800405e:	2300      	movs	r3, #0
 8004060:	930a      	str	r3, [sp, #40]	; 0x28
 8004062:	9309      	str	r3, [sp, #36]	; 0x24
 8004064:	9308      	str	r3, [sp, #32]
 8004066:	223f      	movs	r2, #63	; 0x3f
 8004068:	9207      	str	r2, [sp, #28]
 800406a:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <_Z23getFont_verdana_10_4bppv+0x68>)
 800406c:	9206      	str	r2, [sp, #24]
 800406e:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004070:	9205      	str	r2, [sp, #20]
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	9303      	str	r3, [sp, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	9202      	str	r2, [sp, #8]
 800407a:	2104      	movs	r1, #4
 800407c:	9101      	str	r1, [sp, #4]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	230a      	movs	r3, #10
 8004082:	4909      	ldr	r1, [pc, #36]	; (80040a8 <_Z23getFont_verdana_10_4bppv+0x70>)
 8004084:	4805      	ldr	r0, [pc, #20]	; (800409c <_Z23getFont_verdana_10_4bppv+0x64>)
 8004086:	f7ff ff01 	bl	8003e8c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800408a:	4808      	ldr	r0, [pc, #32]	; (80040ac <_Z23getFont_verdana_10_4bppv+0x74>)
 800408c:	f01f f920 	bl	80232d0 <atexit>
 8004090:	4801      	ldr	r0, [pc, #4]	; (8004098 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004092:	f01f f8de 	bl	8023252 <__cxa_guard_release>
 8004096:	e7de      	b.n	8004056 <_Z23getFont_verdana_10_4bppv+0x1e>
 8004098:	24005dd4 	.word	0x24005dd4
 800409c:	24005dd8 	.word	0x24005dd8
 80040a0:	08027658 	.word	0x08027658
 80040a4:	08027afc 	.word	0x08027afc
 80040a8:	9000b328 	.word	0x9000b328
 80040ac:	08004019 	.word	0x08004019

080040b0 <__tcf_0>:
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <__tcf_0+0x10>)
 80040b2:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <__tcf_0+0x14>)
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <__tcf_0+0x18>)
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	4a04      	ldr	r2, [pc, #16]	; (80040cc <__tcf_0+0x1c>)
 80040bc:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_18_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 80040be:	4770      	bx	lr
 80040c0:	24005e04 	.word	0x24005e04
 80040c4:	08025778 	.word	0x08025778
 80040c8:	0802704c 	.word	0x0802704c
 80040cc:	080259b8 	.word	0x080259b8

080040d0 <_Z23getFont_verdana_18_4bppv>:
 80040d0:	4b18      	ldr	r3, [pc, #96]	; (8004134 <_Z23getFont_verdana_18_4bppv+0x64>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	f3bf 8f5b 	dmb	ish
 80040d8:	f013 0f01 	tst.w	r3, #1
 80040dc:	d001      	beq.n	80040e2 <_Z23getFont_verdana_18_4bppv+0x12>
    return verdana_18_4bpp;
}
 80040de:	4816      	ldr	r0, [pc, #88]	; (8004138 <_Z23getFont_verdana_18_4bppv+0x68>)
 80040e0:	4770      	bx	lr
{
 80040e2:	b500      	push	{lr}
 80040e4:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 80040e6:	4813      	ldr	r0, [pc, #76]	; (8004134 <_Z23getFont_verdana_18_4bppv+0x64>)
 80040e8:	f01f f8a7 	bl	802323a <__cxa_guard_acquire>
 80040ec:	b918      	cbnz	r0, 80040f6 <_Z23getFont_verdana_18_4bppv+0x26>
}
 80040ee:	4812      	ldr	r0, [pc, #72]	; (8004138 <_Z23getFont_verdana_18_4bppv+0x68>)
 80040f0:	b00d      	add	sp, #52	; 0x34
 80040f2:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 80040f6:	2300      	movs	r3, #0
 80040f8:	930a      	str	r3, [sp, #40]	; 0x28
 80040fa:	9309      	str	r3, [sp, #36]	; 0x24
 80040fc:	9308      	str	r3, [sp, #32]
 80040fe:	233f      	movs	r3, #63	; 0x3f
 8004100:	9307      	str	r3, [sp, #28]
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <_Z23getFont_verdana_18_4bppv+0x6c>)
 8004104:	9306      	str	r3, [sp, #24]
 8004106:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <_Z23getFont_verdana_18_4bppv+0x70>)
 8004108:	9305      	str	r3, [sp, #20]
 800410a:	2301      	movs	r3, #1
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	9303      	str	r3, [sp, #12]
 8004110:	9302      	str	r3, [sp, #8]
 8004112:	2304      	movs	r3, #4
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2312      	movs	r3, #18
 800411a:	226e      	movs	r2, #110	; 0x6e
 800411c:	4909      	ldr	r1, [pc, #36]	; (8004144 <_Z23getFont_verdana_18_4bppv+0x74>)
 800411e:	4806      	ldr	r0, [pc, #24]	; (8004138 <_Z23getFont_verdana_18_4bppv+0x68>)
 8004120:	f7ff feb4 	bl	8003e8c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004124:	4808      	ldr	r0, [pc, #32]	; (8004148 <_Z23getFont_verdana_18_4bppv+0x78>)
 8004126:	f01f f8d3 	bl	80232d0 <atexit>
 800412a:	4802      	ldr	r0, [pc, #8]	; (8004134 <_Z23getFont_verdana_18_4bppv+0x64>)
 800412c:	f01f f891 	bl	8023252 <__cxa_guard_release>
 8004130:	e7dd      	b.n	80040ee <_Z23getFont_verdana_18_4bppv+0x1e>
 8004132:	bf00      	nop
 8004134:	24005e00 	.word	0x24005e00
 8004138:	24005e04 	.word	0x24005e04
 800413c:	0802765c 	.word	0x0802765c
 8004140:	08027b00 	.word	0x08027b00
 8004144:	9000b338 	.word	0x9000b338
 8004148:	080040b1 	.word	0x080040b1

0800414c <__tcf_0>:
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <__tcf_0+0x10>)
 800414e:	4a04      	ldr	r2, [pc, #16]	; (8004160 <__tcf_0+0x14>)
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	4a04      	ldr	r2, [pc, #16]	; (8004164 <__tcf_0+0x18>)
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	4a04      	ldr	r2, [pc, #16]	; (8004168 <__tcf_0+0x1c>)
 8004158:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800415a:	4770      	bx	lr
 800415c:	24005e30 	.word	0x24005e30
 8004160:	08025778 	.word	0x08025778
 8004164:	0802704c 	.word	0x0802704c
 8004168:	080259b8 	.word	0x080259b8

0800416c <_Z23getFont_verdana_20_4bppv>:
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <_Z23getFont_verdana_20_4bppv+0x60>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	f3bf 8f5b 	dmb	ish
 8004174:	f013 0f01 	tst.w	r3, #1
 8004178:	d001      	beq.n	800417e <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 800417a:	4815      	ldr	r0, [pc, #84]	; (80041d0 <_Z23getFont_verdana_20_4bppv+0x64>)
 800417c:	4770      	bx	lr
{
 800417e:	b500      	push	{lr}
 8004180:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004182:	4812      	ldr	r0, [pc, #72]	; (80041cc <_Z23getFont_verdana_20_4bppv+0x60>)
 8004184:	f01f f859 	bl	802323a <__cxa_guard_acquire>
 8004188:	b918      	cbnz	r0, 8004192 <_Z23getFont_verdana_20_4bppv+0x26>
}
 800418a:	4811      	ldr	r0, [pc, #68]	; (80041d0 <_Z23getFont_verdana_20_4bppv+0x64>)
 800418c:	b00d      	add	sp, #52	; 0x34
 800418e:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004192:	2300      	movs	r3, #0
 8004194:	930a      	str	r3, [sp, #40]	; 0x28
 8004196:	9309      	str	r3, [sp, #36]	; 0x24
 8004198:	9308      	str	r3, [sp, #32]
 800419a:	223f      	movs	r2, #63	; 0x3f
 800419c:	9207      	str	r2, [sp, #28]
 800419e:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <_Z23getFont_verdana_20_4bppv+0x68>)
 80041a0:	9206      	str	r2, [sp, #24]
 80041a2:	4a0d      	ldr	r2, [pc, #52]	; (80041d8 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80041a4:	9205      	str	r2, [sp, #20]
 80041a6:	9304      	str	r3, [sp, #16]
 80041a8:	9303      	str	r3, [sp, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	9202      	str	r2, [sp, #8]
 80041ae:	2104      	movs	r1, #4
 80041b0:	9101      	str	r1, [sp, #4]
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	2314      	movs	r3, #20
 80041b6:	4909      	ldr	r1, [pc, #36]	; (80041dc <_Z23getFont_verdana_20_4bppv+0x70>)
 80041b8:	4805      	ldr	r0, [pc, #20]	; (80041d0 <_Z23getFont_verdana_20_4bppv+0x64>)
 80041ba:	f7ff fe67 	bl	8003e8c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80041be:	4808      	ldr	r0, [pc, #32]	; (80041e0 <_Z23getFont_verdana_20_4bppv+0x74>)
 80041c0:	f01f f886 	bl	80232d0 <atexit>
 80041c4:	4801      	ldr	r0, [pc, #4]	; (80041cc <_Z23getFont_verdana_20_4bppv+0x60>)
 80041c6:	f01f f844 	bl	8023252 <__cxa_guard_release>
 80041ca:	e7de      	b.n	800418a <_Z23getFont_verdana_20_4bppv+0x1e>
 80041cc:	24005e2c 	.word	0x24005e2c
 80041d0:	24005e30 	.word	0x24005e30
 80041d4:	080277dc 	.word	0x080277dc
 80041d8:	08027b14 	.word	0x08027b14
 80041dc:	9000b93c 	.word	0x9000b93c
 80041e0:	0800414d 	.word	0x0800414d

080041e4 <__tcf_0>:
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <__tcf_0+0x10>)
 80041e6:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <__tcf_0+0x14>)
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	4a04      	ldr	r2, [pc, #16]	; (80041fc <__tcf_0+0x18>)
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	4a04      	ldr	r2, [pc, #16]	; (8004200 <__tcf_0+0x1c>)
 80041f0:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_34_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_34_4bpp();

touchgfx::GeneratedFont& getFont_verdana_34_4bpp()
{
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 80041f2:	4770      	bx	lr
 80041f4:	24005e5c 	.word	0x24005e5c
 80041f8:	08025778 	.word	0x08025778
 80041fc:	0802704c 	.word	0x0802704c
 8004200:	080259b8 	.word	0x080259b8

08004204 <_Z23getFont_verdana_34_4bppv>:
 8004204:	4b19      	ldr	r3, [pc, #100]	; (800426c <_Z23getFont_verdana_34_4bppv+0x68>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	f3bf 8f5b 	dmb	ish
 800420c:	f013 0f01 	tst.w	r3, #1
 8004210:	d001      	beq.n	8004216 <_Z23getFont_verdana_34_4bppv+0x12>
    return verdana_34_4bpp;
}
 8004212:	4817      	ldr	r0, [pc, #92]	; (8004270 <_Z23getFont_verdana_34_4bppv+0x6c>)
 8004214:	4770      	bx	lr
{
 8004216:	b500      	push	{lr}
 8004218:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 800421a:	4814      	ldr	r0, [pc, #80]	; (800426c <_Z23getFont_verdana_34_4bppv+0x68>)
 800421c:	f01f f80d 	bl	802323a <__cxa_guard_acquire>
 8004220:	b918      	cbnz	r0, 800422a <_Z23getFont_verdana_34_4bppv+0x26>
}
 8004222:	4813      	ldr	r0, [pc, #76]	; (8004270 <_Z23getFont_verdana_34_4bppv+0x6c>)
 8004224:	b00d      	add	sp, #52	; 0x34
 8004226:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 800422a:	2300      	movs	r3, #0
 800422c:	930a      	str	r3, [sp, #40]	; 0x28
 800422e:	9309      	str	r3, [sp, #36]	; 0x24
 8004230:	9308      	str	r3, [sp, #32]
 8004232:	233f      	movs	r3, #63	; 0x3f
 8004234:	9307      	str	r3, [sp, #28]
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <_Z23getFont_verdana_34_4bppv+0x70>)
 8004238:	9306      	str	r3, [sp, #24]
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <_Z23getFont_verdana_34_4bppv+0x74>)
 800423c:	9305      	str	r3, [sp, #20]
 800423e:	2302      	movs	r3, #2
 8004240:	9304      	str	r3, [sp, #16]
 8004242:	2301      	movs	r3, #1
 8004244:	9303      	str	r3, [sp, #12]
 8004246:	9302      	str	r3, [sp, #8]
 8004248:	2304      	movs	r3, #4
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	2307      	movs	r3, #7
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	2322      	movs	r3, #34	; 0x22
 8004252:	226e      	movs	r2, #110	; 0x6e
 8004254:	4909      	ldr	r1, [pc, #36]	; (800427c <_Z23getFont_verdana_34_4bppv+0x78>)
 8004256:	4806      	ldr	r0, [pc, #24]	; (8004270 <_Z23getFont_verdana_34_4bppv+0x6c>)
 8004258:	f7ff fe18 	bl	8003e8c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800425c:	4808      	ldr	r0, [pc, #32]	; (8004280 <_Z23getFont_verdana_34_4bppv+0x7c>)
 800425e:	f01f f837 	bl	80232d0 <atexit>
 8004262:	4802      	ldr	r0, [pc, #8]	; (800426c <_Z23getFont_verdana_34_4bppv+0x68>)
 8004264:	f01e fff5 	bl	8023252 <__cxa_guard_release>
 8004268:	e7db      	b.n	8004222 <_Z23getFont_verdana_34_4bppv+0x1e>
 800426a:	bf00      	nop
 800426c:	24005e58 	.word	0x24005e58
 8004270:	24005e5c 	.word	0x24005e5c
 8004274:	080277e0 	.word	0x080277e0
 8004278:	08027b18 	.word	0x08027b18
 800427c:	9000b94c 	.word	0x9000b94c
 8004280:	080041e5 	.word	0x080041e5

08004284 <__tcf_0>:
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <__tcf_0+0x10>)
 8004286:	4a04      	ldr	r2, [pc, #16]	; (8004298 <__tcf_0+0x14>)
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <__tcf_0+0x18>)
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <__tcf_0+0x1c>)
 8004290:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004292:	4770      	bx	lr
 8004294:	24005e88 	.word	0x24005e88
 8004298:	08025778 	.word	0x08025778
 800429c:	0802704c 	.word	0x0802704c
 80042a0:	080259b8 	.word	0x080259b8

080042a4 <_Z23getFont_verdana_40_4bppv>:
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <_Z23getFont_verdana_40_4bppv+0x60>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	f3bf 8f5b 	dmb	ish
 80042ac:	f013 0f01 	tst.w	r3, #1
 80042b0:	d001      	beq.n	80042b6 <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 80042b2:	4815      	ldr	r0, [pc, #84]	; (8004308 <_Z23getFont_verdana_40_4bppv+0x64>)
 80042b4:	4770      	bx	lr
{
 80042b6:	b500      	push	{lr}
 80042b8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042ba:	4812      	ldr	r0, [pc, #72]	; (8004304 <_Z23getFont_verdana_40_4bppv+0x60>)
 80042bc:	f01e ffbd 	bl	802323a <__cxa_guard_acquire>
 80042c0:	b918      	cbnz	r0, 80042ca <_Z23getFont_verdana_40_4bppv+0x26>
}
 80042c2:	4811      	ldr	r0, [pc, #68]	; (8004308 <_Z23getFont_verdana_40_4bppv+0x64>)
 80042c4:	b00d      	add	sp, #52	; 0x34
 80042c6:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042ca:	2300      	movs	r3, #0
 80042cc:	930a      	str	r3, [sp, #40]	; 0x28
 80042ce:	9309      	str	r3, [sp, #36]	; 0x24
 80042d0:	9308      	str	r3, [sp, #32]
 80042d2:	223f      	movs	r2, #63	; 0x3f
 80042d4:	9207      	str	r2, [sp, #28]
 80042d6:	4a0d      	ldr	r2, [pc, #52]	; (800430c <_Z23getFont_verdana_40_4bppv+0x68>)
 80042d8:	9206      	str	r2, [sp, #24]
 80042da:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80042dc:	9205      	str	r2, [sp, #20]
 80042de:	9304      	str	r3, [sp, #16]
 80042e0:	9303      	str	r3, [sp, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	9202      	str	r2, [sp, #8]
 80042e6:	2104      	movs	r1, #4
 80042e8:	9101      	str	r1, [sp, #4]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	2328      	movs	r3, #40	; 0x28
 80042ee:	4909      	ldr	r1, [pc, #36]	; (8004314 <_Z23getFont_verdana_40_4bppv+0x70>)
 80042f0:	4805      	ldr	r0, [pc, #20]	; (8004308 <_Z23getFont_verdana_40_4bppv+0x64>)
 80042f2:	f7ff fdcb 	bl	8003e8c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80042f6:	4808      	ldr	r0, [pc, #32]	; (8004318 <_Z23getFont_verdana_40_4bppv+0x74>)
 80042f8:	f01e ffea 	bl	80232d0 <atexit>
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <_Z23getFont_verdana_40_4bppv+0x60>)
 80042fe:	f01e ffa8 	bl	8023252 <__cxa_guard_release>
 8004302:	e7de      	b.n	80042c2 <_Z23getFont_verdana_40_4bppv+0x1e>
 8004304:	24005e84 	.word	0x24005e84
 8004308:	24005e88 	.word	0x24005e88
 800430c:	08027ad0 	.word	0x08027ad0
 8004310:	08027b2c 	.word	0x08027b2c
 8004314:	9000bf50 	.word	0x9000bf50
 8004318:	08004285 	.word	0x08004285

0800431c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 800431c:	2000      	movs	r0, #0
 800431e:	4770      	bx	lr

08004320 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8004320:	2000      	movs	r0, #0
 8004322:	4770      	bx	lr

08004324 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8004324:	2000      	movs	r0, #0
 8004326:	4770      	bx	lr

08004328 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004328:	b40e      	push	{r1, r2, r3}
 800432a:	b500      	push	{lr}
 800432c:	b082      	sub	sp, #8
 800432e:	ab03      	add	r3, sp, #12
 8004330:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004334:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004336:	2100      	movs	r1, #0
 8004338:	f014 fcae 	bl	8018c98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800433c:	b002      	add	sp, #8
 800433e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004342:	b003      	add	sp, #12
 8004344:	4770      	bx	lr

08004346 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004346:	b40c      	push	{r2, r3}
 8004348:	b500      	push	{lr}
 800434a:	b083      	sub	sp, #12
 800434c:	ab04      	add	r3, sp, #16
 800434e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004352:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004354:	f014 fca0 	bl	8018c98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004358:	b003      	add	sp, #12
 800435a:	f85d eb04 	ldr.w	lr, [sp], #4
 800435e:	b002      	add	sp, #8
 8004360:	4770      	bx	lr
	...

08004364 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8004364:	b510      	push	{r4, lr}
 8004366:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004368:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800436a:	b133      	cbz	r3, 800437a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800436c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800436e:	b143      	cbz	r3, 8004382 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 8004370:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8004372:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004376:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004378:	b94b      	cbnz	r3, 800438e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800437a:	4620      	mov	r0, r4
 800437c:	f015 fe4e 	bl	801a01c <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 8004380:	bd10      	pop	{r4, pc}
            assert(used > 0);
 8004382:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8004384:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8004386:	21c0      	movs	r1, #192	; 0xc0
 8004388:	481c      	ldr	r0, [pc, #112]	; (80043fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 800438a:	f01e ff83 	bl	8023294 <__assert_func>
        substituteGlyphs();
 800438e:	f015 ff43 	bl	801a218 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004392:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8004394:	2801      	cmp	r0, #1
 8004396:	d91d      	bls.n	80043d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 8004398:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800439a:	1c4b      	adds	r3, r1, #1
 800439c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800439e:	2b09      	cmp	r3, #9
 80043a0:	d81e      	bhi.n	80043e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 80043a2:	461a      	mov	r2, r3
 80043a4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80043a8:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80043ac:	f640 123f 	movw	r2, #2367	; 0x93f
 80043b0:	4594      	cmp	ip, r2
 80043b2:	d1e2      	bne.n	800437a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 80043b4:	b1b8      	cbz	r0, 80043e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 80043b6:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 80043ba:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80043bc:	2b09      	cmp	r3, #9
 80043be:	d900      	bls.n	80043c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 80043c0:	2300      	movs	r3, #0
 80043c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80043c6:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80043c8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80043cc:	f640 133f 	movw	r3, #2367	; 0x93f
 80043d0:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 80043d2:	e7d2      	b.n	800437a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 80043d6:	4a0b      	ldr	r2, [pc, #44]	; (8004404 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 80043d8:	21c5      	movs	r1, #197	; 0xc5
 80043da:	4808      	ldr	r0, [pc, #32]	; (80043fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80043dc:	f01e ff5a 	bl	8023294 <__assert_func>
            return buffer[index < size ? index : index - size];
 80043e0:	f1a3 020a 	sub.w	r2, r3, #10
 80043e4:	e7de      	b.n	80043a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 80043e6:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80043e8:	4a03      	ldr	r2, [pc, #12]	; (80043f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80043ea:	21c0      	movs	r1, #192	; 0xc0
 80043ec:	4803      	ldr	r0, [pc, #12]	; (80043fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80043ee:	f01e ff51 	bl	8023294 <__assert_func>
 80043f2:	bf00      	nop
 80043f4:	080257c8 	.word	0x080257c8
 80043f8:	080257d4 	.word	0x080257d4
 80043fc:	08025880 	.word	0x08025880
 8004400:	080258cc 	.word	0x080258cc
 8004404:	080258dc 	.word	0x080258dc

08004408 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8004408:	b508      	push	{r3, lr}
    fillInputBuffer();
 800440a:	f015 fdd0 	bl	8019fae <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800440e:	bd08      	pop	{r3, pc}

08004410 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004410:	b500      	push	{lr}
 8004412:	b087      	sub	sp, #28
 8004414:	f10d 0c08 	add.w	ip, sp, #8
 8004418:	e88c 0006 	stmia.w	ip, {r1, r2}
 800441c:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 800441e:	ab0a      	add	r3, sp, #40	; 0x28
 8004420:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	9b08      	ldr	r3, [sp, #32]
 800442a:	4661      	mov	r1, ip
 800442c:	f013 f920 	bl	8017670 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004430:	b007      	add	sp, #28
 8004432:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004438 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8004438:	bb40      	cbnz	r0, 800448c <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 800443a:	b538      	push	{r3, r4, r5, lr}
 800443c:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 800443e:	4b14      	ldr	r3, [pc, #80]	; (8004490 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004440:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004444:	b1c3      	cbz	r3, 8004478 <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004446:	6819      	ldr	r1, [r3, #0]
 8004448:	4419      	add	r1, r3
 800444a:	4812      	ldr	r0, [pc, #72]	; (8004494 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800444c:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	4419      	add	r1, r3
 8004452:	4811      	ldr	r0, [pc, #68]	; (8004498 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004454:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004456:	689c      	ldr	r4, [r3, #8]
 8004458:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 800445a:	b164      	cbz	r4, 8004476 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800445e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004460:	f000 f85c 	bl	800451c <_ZN17TypedTextDatabase8getFontsEv>
 8004464:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004466:	f000 f857 	bl	8004518 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 800446c:	601c      	str	r4, [r3, #0]
        fonts = f;
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004470:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004474:	8018      	strh	r0, [r3, #0]
    }
}
 8004476:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800447a:	490c      	ldr	r1, [pc, #48]	; (80044ac <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800447c:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800447e:	4b06      	ldr	r3, [pc, #24]	; (8004498 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004480:	490b      	ldr	r1, [pc, #44]	; (80044b0 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 8004482:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 8004486:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800448a:	e7e6      	b.n	800445a <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	24005eb0 	.word	0x24005eb0
 8004494:	24005eb4 	.word	0x24005eb4
 8004498:	24005eb8 	.word	0x24005eb8
 800449c:	24005ebc 	.word	0x24005ebc
 80044a0:	2400ff34 	.word	0x2400ff34
 80044a4:	2400ff3c 	.word	0x2400ff3c
 80044a8:	2400ff38 	.word	0x2400ff38
 80044ac:	9000bf7c 	.word	0x9000bf7c
 80044b0:	9000bf60 	.word	0x9000bf60
 80044b4:	9000bfe4 	.word	0x9000bfe4

080044b8 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
 80044c4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	24005eb4 	.word	0x24005eb4
 80044d0:	24005eb8 	.word	0x24005eb8

080044d4 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        touchgfx_fonts[6] = &(getFont_SairaSemiCondensed_Medium_18_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80044d4:	2801      	cmp	r0, #1
 80044d6:	d000      	beq.n	80044da <_Z41__static_initialization_and_destruction_0ii+0x6>
 80044d8:	4770      	bx	lr
 80044da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044de:	4299      	cmp	r1, r3
 80044e0:	d1fa      	bne.n	80044d8 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80044e2:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 80044e4:	f7ff fe42 	bl	800416c <_Z23getFont_verdana_20_4bppv>
};
 80044e8:	4c0a      	ldr	r4, [pc, #40]	; (8004514 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80044ea:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80044ec:	f7ff feda 	bl	80042a4 <_Z23getFont_verdana_40_4bppv>
};
 80044f0:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 80044f2:	f7ff fda1 	bl	8004038 <_Z23getFont_verdana_10_4bppv>
};
 80044f6:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_34_4bpp()),
 80044f8:	f7ff fe84 	bl	8004204 <_Z23getFont_verdana_34_4bppv>
};
 80044fc:	60e0      	str	r0, [r4, #12]
    &(getFont_verdana_18_4bpp()),
 80044fe:	f7ff fde7 	bl	80040d0 <_Z23getFont_verdana_18_4bppv>
};
 8004502:	6120      	str	r0, [r4, #16]
    &(getFont_Saira_Medium_22_4bpp()),
 8004504:	f7ff fd4a 	bl	8003f9c <_Z28getFont_Saira_Medium_22_4bppv>
};
 8004508:	6160      	str	r0, [r4, #20]
    &(getFont_SairaSemiCondensed_Medium_18_4bpp())
 800450a:	f7ff fcf9 	bl	8003f00 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv>
};
 800450e:	61a0      	str	r0, [r4, #24]
} // namespace TypedTextDatabase
 8004510:	bd10      	pop	{r4, pc}
 8004512:	bf00      	nop
 8004514:	24005ec0 	.word	0x24005ec0

08004518 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 8004518:	2007      	movs	r0, #7
 800451a:	4770      	bx	lr

0800451c <_ZN17TypedTextDatabase8getFontsEv>:
}
 800451c:	4800      	ldr	r0, [pc, #0]	; (8004520 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800451e:	4770      	bx	lr
 8004520:	24005ec0 	.word	0x24005ec0

08004524 <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 8004524:	b508      	push	{r3, lr}
 8004526:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800452a:	2001      	movs	r0, #1
 800452c:	f7ff ffd2 	bl	80044d4 <_Z41__static_initialization_and_destruction_0ii>
 8004530:	bd08      	pop	{r3, pc}

08004532 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8004532:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8004534:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004538:	b113      	cbz	r3, 8004540 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 800453a:	6803      	ldr	r3, [r0, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	4798      	blx	r3
        }
    }
 8004540:	bd08      	pop	{r3, pc}

08004542 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8004542:	2000      	movs	r0, #0
 8004544:	4770      	bx	lr

08004546 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8004546:	8081      	strh	r1, [r0, #4]
    }
 8004548:	4770      	bx	lr

0800454a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800454a:	80c1      	strh	r1, [r0, #6]
    }
 800454c:	4770      	bx	lr

0800454e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800454e:	8101      	strh	r1, [r0, #8]
    }
 8004550:	4770      	bx	lr

08004552 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8004552:	8141      	strh	r1, [r0, #10]
    }
 8004554:	4770      	bx	lr

08004556 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8004556:	4770      	bx	lr

08004558 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8004558:	4770      	bx	lr

0800455a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800455a:	4770      	bx	lr

0800455c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800455c:	4770      	bx	lr

0800455e <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800455e:	4770      	bx	lr

08004560 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004560:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 8004562:	6804      	ldr	r4, [r0, #0]
 8004564:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8004566:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800456a:	eba1 010c 	sub.w	r1, r1, ip
 800456e:	88c3      	ldrh	r3, [r0, #6]
 8004570:	1ad2      	subs	r2, r2, r3
 8004572:	b212      	sxth	r2, r2
 8004574:	b209      	sxth	r1, r1
 8004576:	47a0      	blx	r4
    }
 8004578:	bd10      	pop	{r4, pc}

0800457a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800457a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800457e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004580:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004582:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8004584:	6813      	ldr	r3, [r2, #0]
 8004586:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8004588:	6010      	str	r0, [r2, #0]
    }
 800458a:	4770      	bx	lr

0800458c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800458c:	4770      	bx	lr

0800458e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800458e:	4770      	bx	lr

08004590 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004590:	4770      	bx	lr

08004592 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004592:	4770      	bx	lr

08004594 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004594:	4770      	bx	lr

08004596 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 8004596:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800459a:	b11a      	cbz	r2, 80045a4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 800459c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80045a0:	b102      	cbz	r2, 80045a4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80045a2:	6018      	str	r0, [r3, #0]
        }
    }
 80045a4:	4770      	bx	lr
	...

080045a8 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 80045a8:	4a04      	ldr	r2, [pc, #16]	; (80045bc <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 80045aa:	6002      	str	r2, [r0, #0]
    {
 80045ac:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 80045ae:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 80045b2:	6042      	str	r2, [r0, #4]
    {
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 80045b6:	6042      	str	r2, [r0, #4]
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	08025aa4 	.word	0x08025aa4
 80045c0:	080270b8 	.word	0x080270b8
 80045c4:	080268e0 	.word	0x080268e0
 80045c8:	08026fe4 	.word	0x08026fe4

080045cc <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80045cc:	4a02      	ldr	r2, [pc, #8]	; (80045d8 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED1Ev+0xc>)
 80045ce:	6002      	str	r2, [r0, #0]
    }
 80045d0:	4a02      	ldr	r2, [pc, #8]	; (80045dc <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED1Ev+0x10>)
 80045d2:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	08025a8c 	.word	0x08025a8c
 80045dc:	08025a74 	.word	0x08025a74

080045e0 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7executeES3_>:
    virtual void execute(T1 t1)
 80045e0:	b510      	push	{r4, lr}
 80045e2:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80045e4:	6844      	ldr	r4, [r0, #4]
 80045e6:	68c2      	ldr	r2, [r0, #12]
 80045e8:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80045ec:	f012 0f01 	tst.w	r2, #1
 80045f0:	d102      	bne.n	80045f8 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7executeES3_+0x18>
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4798      	blx	r3
    }
 80045f6:	bd10      	pop	{r4, pc}
 80045f8:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 80045fc:	f854 200c 	ldr.w	r2, [r4, ip]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	58d3      	ldr	r3, [r2, r3]
 8004604:	e7f6      	b.n	80045f4 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7executeES3_+0x14>

08004606 <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8004606:	6843      	ldr	r3, [r0, #4]
 8004608:	b14b      	cbz	r3, 800461e <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv+0x18>
 800460a:	6883      	ldr	r3, [r0, #8]
 800460c:	b10b      	cbz	r3, 8004612 <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv+0xc>
 800460e:	2001      	movs	r0, #1
 8004610:	4770      	bx	lr
 8004612:	68c3      	ldr	r3, [r0, #12]
 8004614:	f013 0f01 	tst.w	r3, #1
 8004618:	d003      	beq.n	8004622 <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv+0x1c>
 800461a:	2001      	movs	r0, #1
 800461c:	4770      	bx	lr
 800461e:	2000      	movs	r0, #0
 8004620:	4770      	bx	lr
 8004622:	2000      	movs	r0, #0
    }
 8004624:	4770      	bx	lr
	...

08004628 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 8004628:	b510      	push	{r4, lr}
 800462a:	4604      	mov	r4, r0
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 800462e:	6003      	str	r3, [r0, #0]
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 8004632:	6003      	str	r3, [r0, #0]
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 8004636:	6043      	str	r3, [r0, #4]
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 800463a:	6043      	str	r3, [r0, #4]
 800463c:	2140      	movs	r1, #64	; 0x40
 800463e:	f01e fdfa 	bl	8023236 <_ZdlPvj>
 8004642:	4620      	mov	r0, r4
 8004644:	bd10      	pop	{r4, pc}
 8004646:	bf00      	nop
 8004648:	08025aa4 	.word	0x08025aa4
 800464c:	080270b8 	.word	0x080270b8
 8004650:	080268e0 	.word	0x080268e0
 8004654:	08026fe4 	.word	0x08026fe4

08004658 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004658:	b510      	push	{r4, lr}
 800465a:	4604      	mov	r4, r0
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED0Ev+0x18>)
 800465e:	6003      	str	r3, [r0, #0]
    }
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED0Ev+0x1c>)
 8004662:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004664:	2110      	movs	r1, #16
 8004666:	f01e fde6 	bl	8023236 <_ZdlPvj>
 800466a:	4620      	mov	r0, r4
 800466c:	bd10      	pop	{r4, pc}
 800466e:	bf00      	nop
 8004670:	08025a8c 	.word	0x08025a8c
 8004674:	08025a74 	.word	0x08025a74

08004678 <_ZN18mainScreenViewBase11setupScreenEv>:
    add(bg1);
    add(wifiMenu);
}

void mainScreenViewBase::setupScreen()
{
 8004678:	b508      	push	{r3, lr}
    wifiMenu.initialize();
 800467a:	3098      	adds	r0, #152	; 0x98
 800467c:	f002 ff11 	bl	80074a2 <_ZN17wifiMenuContainer10initializeEv>
}
 8004680:	bd08      	pop	{r3, pc}
	...

08004684 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004686:	4605      	mov	r5, r0
 8004688:	4607      	mov	r7, r0
 800468a:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <_ZN18mainScreenViewBaseD1Ev+0x6c>)
 800468c:	f847 3b98 	str.w	r3, [r7], #152

class wifiMenuContainer : public wifiMenuContainerBase
{
public:
    wifiMenuContainer();
    virtual ~wifiMenuContainer() {}
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <_ZN18mainScreenViewBaseD1Ev+0x70>)
 8004692:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 8004696:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 800469a:	443c      	add	r4, r7
 800469c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80046a0:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <_ZN18mainScreenViewBaseD1Ev+0x74>)
 80046a2:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 80046a6:	4a15      	ldr	r2, [pc, #84]	; (80046fc <_ZN18mainScreenViewBaseD1Ev+0x78>)
 80046a8:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 80046ac:	f510 76f0 	adds.w	r6, r0, #480	; 0x1e0
 80046b0:	d008      	beq.n	80046c4 <_ZN18mainScreenViewBaseD1Ev+0x40>
 80046b2:	42a6      	cmp	r6, r4
 80046b4:	d006      	beq.n	80046c4 <_ZN18mainScreenViewBaseD1Ev+0x40>
 80046b6:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4620      	mov	r0, r4
 80046c0:	4798      	blx	r3
 80046c2:	e7f6      	b.n	80046b2 <_ZN18mainScreenViewBaseD1Ev+0x2e>
 80046c4:	4638      	mov	r0, r7
 80046c6:	f000 fe61 	bl	800538c <_ZN21wifiMenuContainerBaseD1Ev>
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <_ZN18mainScreenViewBaseD1Ev+0x7c>)
 80046cc:	66eb      	str	r3, [r5, #108]	; 0x6c
class Widget : public Drawable
 80046ce:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <_ZN18mainScreenViewBaseD1Ev+0x80>)
 80046d0:	66ea      	str	r2, [r5, #108]	; 0x6c
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <_ZN18mainScreenViewBaseD1Ev+0x84>)
 80046d4:	66eb      	str	r3, [r5, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 80046d6:	490d      	ldr	r1, [pc, #52]	; (800470c <_ZN18mainScreenViewBaseD1Ev+0x88>)
 80046d8:	6429      	str	r1, [r5, #64]	; 0x40
 80046da:	642a      	str	r2, [r5, #64]	; 0x40
 80046dc:	642b      	str	r3, [r5, #64]	; 0x40
 80046de:	4a0c      	ldr	r2, [pc, #48]	; (8004710 <_ZN18mainScreenViewBaseD1Ev+0x8c>)
 80046e0:	602a      	str	r2, [r5, #0]
 80046e2:	4a0c      	ldr	r2, [pc, #48]	; (8004714 <_ZN18mainScreenViewBaseD1Ev+0x90>)
 80046e4:	602a      	str	r2, [r5, #0]
 80046e6:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <_ZN18mainScreenViewBaseD1Ev+0x94>)
 80046e8:	606a      	str	r2, [r5, #4]
 80046ea:	606b      	str	r3, [r5, #4]
 80046ec:	4628      	mov	r0, r5
 80046ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f0:	08025ad8 	.word	0x08025ad8
 80046f4:	08026470 	.word	0x08026470
 80046f8:	08025a8c 	.word	0x08025a8c
 80046fc:	08025a74 	.word	0x08025a74
 8004700:	08026e44 	.word	0x08026e44
 8004704:	08025a0c 	.word	0x08025a0c
 8004708:	08026fe4 	.word	0x08026fe4
 800470c:	08026ce4 	.word	0x08026ce4
 8004710:	08025aa4 	.word	0x08025aa4
 8004714:	080270b8 	.word	0x080270b8
 8004718:	080268e0 	.word	0x080268e0

0800471c <_ZN18mainScreenViewBaseD0Ev>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	4605      	mov	r5, r0
 8004720:	4607      	mov	r7, r0
 8004722:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <_ZN18mainScreenViewBaseD0Ev+0x78>)
 8004724:	f847 3b98 	str.w	r3, [r7], #152
 8004728:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <_ZN18mainScreenViewBaseD0Ev+0x7c>)
 800472a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 800472e:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 8004732:	443c      	add	r4, r7
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004734:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <_ZN18mainScreenViewBaseD0Ev+0x80>)
 800473a:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 800473e:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <_ZN18mainScreenViewBaseD0Ev+0x84>)
 8004740:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 8004744:	f510 76f0 	adds.w	r6, r0, #480	; 0x1e0
 8004748:	d008      	beq.n	800475c <_ZN18mainScreenViewBaseD0Ev+0x40>
 800474a:	42a6      	cmp	r6, r4
 800474c:	d006      	beq.n	800475c <_ZN18mainScreenViewBaseD0Ev+0x40>
 800474e:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4620      	mov	r0, r4
 8004758:	4798      	blx	r3
 800475a:	e7f6      	b.n	800474a <_ZN18mainScreenViewBaseD0Ev+0x2e>
 800475c:	4638      	mov	r0, r7
 800475e:	f000 fe15 	bl	800538c <_ZN21wifiMenuContainerBaseD1Ev>
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <_ZN18mainScreenViewBaseD0Ev+0x88>)
 8004764:	66eb      	str	r3, [r5, #108]	; 0x6c
 8004766:	4a10      	ldr	r2, [pc, #64]	; (80047a8 <_ZN18mainScreenViewBaseD0Ev+0x8c>)
 8004768:	66ea      	str	r2, [r5, #108]	; 0x6c
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <_ZN18mainScreenViewBaseD0Ev+0x90>)
 800476c:	66eb      	str	r3, [r5, #108]	; 0x6c
 800476e:	4910      	ldr	r1, [pc, #64]	; (80047b0 <_ZN18mainScreenViewBaseD0Ev+0x94>)
 8004770:	6429      	str	r1, [r5, #64]	; 0x40
 8004772:	642a      	str	r2, [r5, #64]	; 0x40
 8004774:	642b      	str	r3, [r5, #64]	; 0x40
 8004776:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <_ZN18mainScreenViewBaseD0Ev+0x98>)
 8004778:	602a      	str	r2, [r5, #0]
 800477a:	4a0f      	ldr	r2, [pc, #60]	; (80047b8 <_ZN18mainScreenViewBaseD0Ev+0x9c>)
 800477c:	602a      	str	r2, [r5, #0]
 800477e:	4a0f      	ldr	r2, [pc, #60]	; (80047bc <_ZN18mainScreenViewBaseD0Ev+0xa0>)
 8004780:	606a      	str	r2, [r5, #4]
 8004782:	606b      	str	r3, [r5, #4]
 8004784:	f642 4170 	movw	r1, #11376	; 0x2c70
 8004788:	4628      	mov	r0, r5
 800478a:	f01e fd54 	bl	8023236 <_ZdlPvj>
 800478e:	4628      	mov	r0, r5
 8004790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004792:	bf00      	nop
 8004794:	08025ad8 	.word	0x08025ad8
 8004798:	08026470 	.word	0x08026470
 800479c:	08025a8c 	.word	0x08025a8c
 80047a0:	08025a74 	.word	0x08025a74
 80047a4:	08026e44 	.word	0x08026e44
 80047a8:	08025a0c 	.word	0x08025a0c
 80047ac:	08026fe4 	.word	0x08026fe4
 80047b0:	08026ce4 	.word	0x08026ce4
 80047b4:	08025aa4 	.word	0x08025aa4
 80047b8:	080270b8 	.word	0x080270b8
 80047bc:	080268e0 	.word	0x080268e0

080047c0 <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 80047c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c4:	b083      	sub	sp, #12
 80047c6:	4605      	mov	r5, r0
        : presenter(0)
 80047c8:	f014 fe16 	bl	80193f8 <_ZN8touchgfx6ScreenC1Ev>
 80047cc:	4b53      	ldr	r3, [pc, #332]	; (800491c <_ZN18mainScreenViewBaseC1Ev+0x15c>)
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	2400      	movs	r4, #0
 80047d2:	63ec      	str	r4, [r5, #60]	; 0x3c
 80047d4:	462e      	mov	r6, r5
 80047d6:	4b52      	ldr	r3, [pc, #328]	; (8004920 <_ZN18mainScreenViewBaseC1Ev+0x160>)
 80047d8:	f846 3b40 	str.w	r3, [r6], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80047dc:	f04f 0926 	mov.w	r9, #38	; 0x26
 80047e0:	464a      	mov	r2, r9
 80047e2:	4621      	mov	r1, r4
 80047e4:	4630      	mov	r0, r6
 80047e6:	f01e feeb 	bl	80235c0 <memset>
          visible(true)
 80047ea:	f8df b144 	ldr.w	fp, [pc, #324]	; 8004930 <_ZN18mainScreenViewBaseC1Ev+0x170>
 80047ee:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 80047f2:	80b4      	strh	r4, [r6, #4]
 80047f4:	80f4      	strh	r4, [r6, #6]
 80047f6:	8134      	strh	r4, [r6, #8]
 80047f8:	8174      	strh	r4, [r6, #10]
 80047fa:	81b4      	strh	r4, [r6, #12]
 80047fc:	81f4      	strh	r4, [r6, #14]
 80047fe:	8234      	strh	r4, [r6, #16]
 8004800:	8274      	strh	r4, [r6, #18]
 8004802:	6174      	str	r4, [r6, #20]
 8004804:	61b4      	str	r4, [r6, #24]
 8004806:	61f4      	str	r4, [r6, #28]
 8004808:	8434      	strh	r4, [r6, #32]
 800480a:	8474      	strh	r4, [r6, #34]	; 0x22
 800480c:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 8004810:	f04f 0a01 	mov.w	sl, #1
 8004814:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 8004818:	4b42      	ldr	r3, [pc, #264]	; (8004924 <_ZN18mainScreenViewBaseC1Ev+0x164>)
 800481a:	642b      	str	r3, [r5, #64]	; 0x40
 800481c:	4b42      	ldr	r3, [pc, #264]	; (8004928 <_ZN18mainScreenViewBaseC1Ev+0x168>)
 800481e:	642b      	str	r3, [r5, #64]	; 0x40
 8004820:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8004824:	f886 8026 	strb.w	r8, [r6, #38]	; 0x26
        : color(col)
 8004828:	62b4      	str	r4, [r6, #40]	; 0x28
 800482a:	f105 076c 	add.w	r7, r5, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800482e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004832:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8004836:	464a      	mov	r2, r9
 8004838:	4621      	mov	r1, r4
 800483a:	4638      	mov	r0, r7
 800483c:	f01e fec0 	bl	80235c0 <memset>
 8004840:	f8c5 b06c 	str.w	fp, [r5, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 8004844:	80bc      	strh	r4, [r7, #4]
 8004846:	80fc      	strh	r4, [r7, #6]
 8004848:	813c      	strh	r4, [r7, #8]
 800484a:	817c      	strh	r4, [r7, #10]
 800484c:	81bc      	strh	r4, [r7, #12]
 800484e:	81fc      	strh	r4, [r7, #14]
 8004850:	823c      	strh	r4, [r7, #16]
 8004852:	827c      	strh	r4, [r7, #18]
 8004854:	617c      	str	r4, [r7, #20]
 8004856:	61bc      	str	r4, [r7, #24]
 8004858:	61fc      	str	r4, [r7, #28]
 800485a:	843c      	strh	r4, [r7, #32]
 800485c:	847c      	strh	r4, [r7, #34]	; 0x22
 800485e:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 8004862:	f887 a025 	strb.w	sl, [r7, #37]	; 0x25
 8004866:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <_ZN18mainScreenViewBaseC1Ev+0x164>)
 8004868:	66eb      	str	r3, [r5, #108]	; 0x6c
 800486a:	4b30      	ldr	r3, [pc, #192]	; (800492c <_ZN18mainScreenViewBaseC1Ev+0x16c>)
 800486c:	66eb      	str	r3, [r5, #108]	; 0x6c
 800486e:	f8bd 3000 	ldrh.w	r3, [sp]
 8004872:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004874:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8004878:	4669      	mov	r1, sp
 800487a:	4638      	mov	r0, r7
 800487c:	f011 fad1 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004880:	f105 0898 	add.w	r8, r5, #152	; 0x98
 8004884:	4640      	mov	r0, r8
 8004886:	f002 fdd1 	bl	800742c <_ZN17wifiMenuContainerC1Ev>
        setX(x);
 800488a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4621      	mov	r1, r4
 8004890:	4630      	mov	r0, r6
 8004892:	4798      	blx	r3
        setY(y);
 8004894:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004898:	4621      	mov	r1, r4
 800489a:	4630      	mov	r0, r6
 800489c:	4798      	blx	r3
        setWidth(width);
 800489e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80048a6:	4630      	mov	r0, r6
 80048a8:	4798      	blx	r3
        setHeight(height);
 80048aa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	f44f 7188 	mov.w	r1, #272	; 0x110
 80048b2:	4630      	mov	r0, r6
 80048b4:	4798      	blx	r3
        : color(col)
 80048b6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80048ba:	66ab      	str	r3, [r5, #104]	; 0x68
        setX(x);
 80048bc:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	4621      	mov	r1, r4
 80048c2:	4638      	mov	r0, r7
 80048c4:	4798      	blx	r3
        setY(y);
 80048c6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80048c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ca:	4621      	mov	r1, r4
 80048cc:	4638      	mov	r0, r7
 80048ce:	4798      	blx	r3
 80048d0:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 80048d4:	a901      	add	r1, sp, #4
 80048d6:	4638      	mov	r0, r7
 80048d8:	f011 faa3 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 80048dc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	4621      	mov	r1, r4
 80048e4:	4640      	mov	r0, r8
 80048e6:	4798      	blx	r3
        setY(y);
 80048e8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80048ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ee:	4621      	mov	r1, r4
 80048f0:	4640      	mov	r0, r8
 80048f2:	4798      	blx	r3
        visible = vis;
 80048f4:	f885 40bd 	strb.w	r4, [r5, #189]	; 0xbd
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80048f8:	1d2c      	adds	r4, r5, #4
 80048fa:	4631      	mov	r1, r6
 80048fc:	4620      	mov	r0, r4
 80048fe:	f00e fb75 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004902:	4639      	mov	r1, r7
 8004904:	4620      	mov	r0, r4
 8004906:	f00e fb71 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800490a:	4641      	mov	r1, r8
 800490c:	4620      	mov	r0, r4
 800490e:	f00e fb6d 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004912:	4628      	mov	r0, r5
 8004914:	b003      	add	sp, #12
 8004916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491a:	bf00      	nop
 800491c:	08025aa4 	.word	0x08025aa4
 8004920:	08025ad8 	.word	0x08025ad8
 8004924:	08025a0c 	.word	0x08025a0c
 8004928:	08026ce4 	.word	0x08026ce4
 800492c:	08026e44 	.word	0x08026e44
 8004930:	08026fe4 	.word	0x08026fe4

08004934 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8004934:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004936:	4770      	bx	lr

08004938 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8004938:	b530      	push	{r4, r5, lr}
 800493a:	b085      	sub	sp, #20
 800493c:	4604      	mov	r4, r0
        rect.width = width;
 800493e:	8101      	strh	r1, [r0, #8]
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8004940:	466d      	mov	r5, sp
 8004942:	6803      	ldr	r3, [r0, #0]
 8004944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004948:	4601      	mov	r1, r0
 800494a:	4628      	mov	r0, r5
 800494c:	4798      	blx	r3
 800494e:	343c      	adds	r4, #60	; 0x3c
 8004950:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004958:	b005      	add	sp, #20
 800495a:	bd30      	pop	{r4, r5, pc}

0800495c <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800495c:	b530      	push	{r4, r5, lr}
 800495e:	b085      	sub	sp, #20
 8004960:	4604      	mov	r4, r0
        rect.height = height;
 8004962:	8141      	strh	r1, [r0, #10]
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004964:	466d      	mov	r5, sp
 8004966:	6803      	ldr	r3, [r0, #0]
 8004968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496c:	4601      	mov	r1, r0
 800496e:	4628      	mov	r0, r5
 8004970:	4798      	blx	r3
 8004972:	343c      	adds	r4, #60	; 0x3c
 8004974:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004978:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800497c:	b005      	add	sp, #20
 800497e:	bd30      	pop	{r4, r5, pc}

08004980 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8004980:	2200      	movs	r2, #0
 8004982:	8002      	strh	r2, [r0, #0]
 8004984:	8042      	strh	r2, [r0, #2]
 8004986:	8082      	strh	r2, [r0, #4]
 8004988:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800498a:	4770      	bx	lr

0800498c <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800498c:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8004990:	4770      	bx	lr

08004992 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004992:	b538      	push	{r3, r4, r5, lr}
 8004994:	4604      	mov	r4, r0
 8004996:	4615      	mov	r5, r2
    {
        setX(x);
 8004998:	6803      	ldr	r3, [r0, #0]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	4798      	blx	r3
        setBaselineY(baselineY);
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049a2:	4629      	mov	r1, r5
 80049a4:	4620      	mov	r0, r4
 80049a6:	4798      	blx	r3
    }
 80049a8:	bd38      	pop	{r3, r4, r5, pc}

080049aa <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 80049aa:	2000      	movs	r0, #0
 80049ac:	4770      	bx	lr

080049ae <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80049ae:	2200      	movs	r2, #0
 80049b0:	8002      	strh	r2, [r0, #0]
 80049b2:	8042      	strh	r2, [r0, #2]
 80049b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049b8:	8081      	strh	r1, [r0, #4]
 80049ba:	80c1      	strh	r1, [r0, #6]
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 80049bc:	6082      	str	r2, [r0, #8]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 80049be:	4770      	bx	lr

080049c0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 80049c0:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80049c2:	4770      	bx	lr

080049c4 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 80049c4:	b510      	push	{r4, lr}
 80049c6:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 80049c8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80049ca:	b140      	cbz	r0, 80049de <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
 80049cc:	6803      	ldr	r3, [r0, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4798      	blx	r3
 80049d2:	b120      	cbz	r0, 80049de <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
        {
            action->execute(*this);
 80049d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80049d6:	6803      	ldr	r3, [r0, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	4621      	mov	r1, r4
 80049dc:	4798      	blx	r3
        }
    }
 80049de:	bd10      	pop	{r4, pc}

080049e0 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
    {
    }
 80049e0:	4770      	bx	lr

080049e2 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
    {
    }
 80049e2:	4770      	bx	lr

080049e4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	4604      	mov	r4, r0
 80049e8:	460d      	mov	r5, r1
        return pressed;
 80049ea:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 80049ee:	790b      	ldrb	r3, [r1, #4]
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf0d      	iteet	eq
 80049f4:	2201      	moveq	r2, #1
 80049f6:	2200      	movne	r2, #0
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	42b3      	cmp	r3, r6
 80049fe:	d004      	beq.n	8004a0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x26>
        {
            setPressed(newPressedValue);
            invalidate();
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8004a00:	b116      	cbz	r6, 8004a08 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x24>
 8004a02:	792b      	ldrb	r3, [r5, #4]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d00b      	beq.n	8004a20 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
        {
            executeAction();
        }
    }
 8004a08:	bd70      	pop	{r4, r5, r6, pc}
        pressed = isPressed;
 8004a0a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
        handlePressedUpdated();
 8004a0e:	6803      	ldr	r3, [r0, #0]
 8004a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a14:	4798      	blx	r3
            invalidate();
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	4798      	blx	r3
 8004a1e:	e7ef      	b.n	8004a00 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1c>
            executeAction();
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	4620      	mov	r0, r4
 8004a28:	4798      	blx	r3
    }
 8004a2a:	e7ed      	b.n	8004a08 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x24>

08004a2c <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 8004a2c:	4a03      	ldr	r2, [pc, #12]	; (8004a3c <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x10>)
 8004a2e:	6002      	str	r2, [r0, #0]
class Container : public Drawable
 8004a30:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x14>)
 8004a32:	6002      	str	r2, [r0, #0]
    {
 8004a34:	4a03      	ldr	r2, [pc, #12]	; (8004a44 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x18>)
 8004a36:	6002      	str	r2, [r0, #0]
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	08025ce0 	.word	0x08025ce0
 8004a40:	080268e0 	.word	0x080268e0
 8004a44:	08026fe4 	.word	0x08026fe4

08004a48 <_ZN26wifiInfoLargeContainerBase15elementSelectedEv>:
     * Virtual Action Handlers
     */
    virtual void elementSelected()
    {
        // Override and implement this function in wifiInfoLargeContainer
    }
 8004a48:	4770      	bx	lr
	...

08004a4c <_ZN26wifiInfoLargeContainerBaseD1Ev>:
    add(encryption);
    add(signalStrengthIcon);
    add(listButtonOverlay);
}

wifiInfoLargeContainerBase::~wifiInfoLargeContainerBase()
 8004a4c:	b4f0      	push	{r4, r5, r6, r7}
 8004a4e:	4a20      	ldr	r2, [pc, #128]	; (8004ad0 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x84>)
 8004a50:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004a52:	4a20      	ldr	r2, [pc, #128]	; (8004ad4 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x88>)
 8004a54:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
    }
 8004a58:	4a1f      	ldr	r2, [pc, #124]	; (8004ad8 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x8c>)
 8004a5a:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 8004a5e:	4a1f      	ldr	r2, [pc, #124]	; (8004adc <_ZN26wifiInfoLargeContainerBaseD1Ev+0x90>)
 8004a60:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 8004a64:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x94>)
 8004a66:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
class Box : public Widget
 8004a6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ae4 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x98>)
 8004a6c:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8004a70:	491d      	ldr	r1, [pc, #116]	; (8004ae8 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x9c>)
 8004a72:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
 8004a76:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <_ZN26wifiInfoLargeContainerBaseD1Ev+0xa0>)
 8004a78:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
class ClickButtonTrigger : public AbstractButtonContainer
 8004a7c:	4c1c      	ldr	r4, [pc, #112]	; (8004af0 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xa4>)
 8004a7e:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
 8004a82:	4c1c      	ldr	r4, [pc, #112]	; (8004af4 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xa8>)
 8004a84:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
 8004a88:	4c1b      	ldr	r4, [pc, #108]	; (8004af8 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xac>)
 8004a8a:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
 8004a8e:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
class Image : public Widget
 8004a92:	4d1a      	ldr	r5, [pc, #104]	; (8004afc <_ZN26wifiInfoLargeContainerBaseD1Ev+0xb0>)
 8004a94:	f8c0 50c4 	str.w	r5, [r0, #196]	; 0xc4
 8004a98:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 8004a9c:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004aa0:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004b0c <_ZN26wifiInfoLargeContainerBaseD1Ev+0xc0>
 8004aa4:	f8c0 c078 	str.w	ip, [r0, #120]	; 0x78
class TextAreaWithWildcardBase : public TextArea
 8004aa8:	4f15      	ldr	r7, [pc, #84]	; (8004b00 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xb4>)
 8004aaa:	6787      	str	r7, [r0, #120]	; 0x78
class TextArea : public Widget
 8004aac:	4e15      	ldr	r6, [pc, #84]	; (8004b04 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xb8>)
 8004aae:	6786      	str	r6, [r0, #120]	; 0x78
    {
 8004ab0:	4d15      	ldr	r5, [pc, #84]	; (8004b08 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xbc>)
 8004ab2:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
 8004ab6:	6781      	str	r1, [r0, #120]	; 0x78
 8004ab8:	6782      	str	r2, [r0, #120]	; 0x78
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004aba:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
class TextAreaWithWildcardBase : public TextArea
 8004abe:	62c7      	str	r7, [r0, #44]	; 0x2c
 8004ac0:	62c6      	str	r6, [r0, #44]	; 0x2c
 8004ac2:	6545      	str	r5, [r0, #84]	; 0x54
 8004ac4:	62c1      	str	r1, [r0, #44]	; 0x2c
 8004ac6:	62c2      	str	r2, [r0, #44]	; 0x2c
 8004ac8:	6004      	str	r4, [r0, #0]
 8004aca:	6002      	str	r2, [r0, #0]
{

}
 8004acc:	bcf0      	pop	{r4, r5, r6, r7}
 8004ace:	4770      	bx	lr
 8004ad0:	08025ee4 	.word	0x08025ee4
 8004ad4:	08025ecc 	.word	0x08025ecc
 8004ad8:	08025d7c 	.word	0x08025d7c
 8004adc:	08025e30 	.word	0x08025e30
 8004ae0:	08026ddc 	.word	0x08026ddc
 8004ae4:	08026ce4 	.word	0x08026ce4
 8004ae8:	08025a0c 	.word	0x08025a0c
 8004aec:	08026fe4 	.word	0x08026fe4
 8004af0:	08025d94 	.word	0x08025d94
 8004af4:	08025ce0 	.word	0x08025ce0
 8004af8:	080268e0 	.word	0x080268e0
 8004afc:	08026e44 	.word	0x08026e44
 8004b00:	08026d4c 	.word	0x08026d4c
 8004b04:	08026c54 	.word	0x08026c54
 8004b08:	08024f38 	.word	0x08024f38
 8004b0c:	08025c50 	.word	0x08025c50

08004b10 <_ZN26wifiInfoLargeContainerBase10initializeEv>:

void wifiInfoLargeContainerBase::initialize()
{

}
 8004b10:	4770      	bx	lr

08004b12 <_ZN26wifiInfoLargeContainerBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void wifiInfoLargeContainerBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8004b12:	b508      	push	{r3, lr}
    if (&src == &listButtonOverlay)
 8004b14:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
 8004b18:	428b      	cmp	r3, r1
 8004b1a:	d000      	beq.n	8004b1e <_ZN26wifiInfoLargeContainerBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc>
        //Interaction1
        //When listButtonOverlay clicked call virtual function
        //Call elementSelected
        elementSelected();
    }
}
 8004b1c:	bd08      	pop	{r3, pc}
        elementSelected();
 8004b1e:	6803      	ldr	r3, [r0, #0]
 8004b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b24:	4798      	blx	r3
}
 8004b26:	e7f9      	b.n	8004b1c <_ZN26wifiInfoLargeContainerBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>

08004b28 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
 8004b28:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x14>)
 8004b2a:	6002      	str	r2, [r0, #0]
 8004b2c:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x18>)
 8004b2e:	6002      	str	r2, [r0, #0]
 8004b30:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x1c>)
 8004b32:	6002      	str	r2, [r0, #0]
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8004b36:	6002      	str	r2, [r0, #0]
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	08025d94 	.word	0x08025d94
 8004b40:	08025ce0 	.word	0x08025ce0
 8004b44:	080268e0 	.word	0x080268e0
 8004b48:	08026fe4 	.word	0x08026fe4

08004b4c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
        return pressed;
 8004b4c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8004b50:	b14b      	cbz	r3, 8004b66 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x1a>
 8004b52:	f100 026c 	add.w	r2, r0, #108	; 0x6c
 8004b56:	6812      	ldr	r2, [r2, #0]
        color = newColor;
 8004b58:	65c2      	str	r2, [r0, #92]	; 0x5c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004b5a:	b13b      	cbz	r3, 8004b6c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x20>
 8004b5c:	f100 0374 	add.w	r3, r0, #116	; 0x74
 8004b60:	681b      	ldr	r3, [r3, #0]
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 8004b62:	6603      	str	r3, [r0, #96]	; 0x60
        T::handlePressedUpdated();
    }
 8004b64:	4770      	bx	lr
        borderBox.setColor(T::getPressed() ? down : up);
 8004b66:	f100 0268 	add.w	r2, r0, #104	; 0x68
 8004b6a:	e7f4      	b.n	8004b56 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xa>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004b6c:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8004b70:	e7f6      	b.n	8004b60 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x14>
	...

08004b74 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004b74:	4a02      	ldr	r2, [pc, #8]	; (8004b80 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED1Ev+0xc>)
 8004b76:	6002      	str	r2, [r0, #0]
    }
 8004b78:	4a02      	ldr	r2, [pc, #8]	; (8004b84 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x10>)
 8004b7a:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	08025ecc 	.word	0x08025ecc
 8004b84:	08025d7c 	.word	0x08025d7c

08004b88 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 8004b88:	4a08      	ldr	r2, [pc, #32]	; (8004bac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x24>)
 8004b8a:	6002      	str	r2, [r0, #0]
class BoxWithBorder : public Box
 8004b8c:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x28>)
 8004b8e:	6342      	str	r2, [r0, #52]	; 0x34
class Box : public Widget
 8004b90:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8004b92:	6342      	str	r2, [r0, #52]	; 0x34
 8004b94:	4a08      	ldr	r2, [pc, #32]	; (8004bb8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x30>)
 8004b96:	6342      	str	r2, [r0, #52]	; 0x34
 8004b98:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x34>)
 8004b9a:	6342      	str	r2, [r0, #52]	; 0x34
 8004b9c:	4908      	ldr	r1, [pc, #32]	; (8004bc0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x38>)
 8004b9e:	6001      	str	r1, [r0, #0]
class AbstractButtonContainer : public Container
 8004ba0:	4908      	ldr	r1, [pc, #32]	; (8004bc4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x3c>)
 8004ba2:	6001      	str	r1, [r0, #0]
 8004ba4:	4908      	ldr	r1, [pc, #32]	; (8004bc8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x40>)
 8004ba6:	6001      	str	r1, [r0, #0]
 8004ba8:	6002      	str	r2, [r0, #0]
 8004baa:	4770      	bx	lr
 8004bac:	08025e30 	.word	0x08025e30
 8004bb0:	08026ddc 	.word	0x08026ddc
 8004bb4:	08026ce4 	.word	0x08026ce4
 8004bb8:	08025a0c 	.word	0x08025a0c
 8004bbc:	08026fe4 	.word	0x08026fe4
 8004bc0:	08025d94 	.word	0x08025d94
 8004bc4:	08025ce0 	.word	0x08025ce0
 8004bc8:	080268e0 	.word	0x080268e0

08004bcc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004bcc:	4a06      	ldr	r2, [pc, #24]	; (8004be8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x1c>)
 8004bce:	6002      	str	r2, [r0, #0]
class TextAreaWithWildcardBase : public TextArea
 8004bd0:	4a06      	ldr	r2, [pc, #24]	; (8004bec <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8004bd2:	6002      	str	r2, [r0, #0]
 8004bd4:	4a06      	ldr	r2, [pc, #24]	; (8004bf0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x24>)
 8004bd6:	6002      	str	r2, [r0, #0]
 8004bd8:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x28>)
 8004bda:	6282      	str	r2, [r0, #40]	; 0x28
 8004bdc:	4a06      	ldr	r2, [pc, #24]	; (8004bf8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x2c>)
 8004bde:	6002      	str	r2, [r0, #0]
 8004be0:	4a06      	ldr	r2, [pc, #24]	; (8004bfc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x30>)
 8004be2:	6002      	str	r2, [r0, #0]
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	08025c50 	.word	0x08025c50
 8004bec:	08026d4c 	.word	0x08026d4c
 8004bf0:	08026c54 	.word	0x08026c54
 8004bf4:	08024f38 	.word	0x08024f38
 8004bf8:	08025a0c 	.word	0x08025a0c
 8004bfc:	08026fe4 	.word	0x08026fe4

08004c00 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004c00:	b510      	push	{r4, lr}
 8004c02:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004c04:	6844      	ldr	r4, [r0, #4]
 8004c06:	68c2      	ldr	r2, [r0, #12]
 8004c08:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004c0c:	f012 0f01 	tst.w	r2, #1
 8004c10:	d102      	bne.n	8004c18 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x18>
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4798      	blx	r3
    }
 8004c16:	bd10      	pop	{r4, pc}
 8004c18:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8004c1c:	f854 200c 	ldr.w	r2, [r4, ip]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	58d3      	ldr	r3, [r2, r3]
 8004c24:	e7f6      	b.n	8004c14 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x14>

08004c26 <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8004c26:	6843      	ldr	r3, [r0, #4]
 8004c28:	b14b      	cbz	r3, 8004c3e <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x18>
 8004c2a:	6883      	ldr	r3, [r0, #8]
 8004c2c:	b10b      	cbz	r3, 8004c32 <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
 8004c2e:	2001      	movs	r0, #1
 8004c30:	4770      	bx	lr
 8004c32:	68c3      	ldr	r3, [r0, #12]
 8004c34:	f013 0f01 	tst.w	r3, #1
 8004c38:	d003      	beq.n	8004c42 <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x1c>
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	4770      	bx	lr
 8004c3e:	2000      	movs	r0, #0
 8004c40:	4770      	bx	lr
 8004c42:	2000      	movs	r0, #0
    }
 8004c44:	4770      	bx	lr

08004c46 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
        return alpha;
 8004c46:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004c4a:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        borderBox.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8004c4e:	4770      	bx	lr

08004c50 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	4604      	mov	r4, r0
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x28>)
 8004c56:	6003      	str	r3, [r0, #0]
class TextAreaWithWildcardBase : public TextArea
 8004c58:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x2c>)
 8004c5a:	6003      	str	r3, [r0, #0]
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x30>)
 8004c5e:	6003      	str	r3, [r0, #0]
 8004c60:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x34>)
 8004c62:	6283      	str	r3, [r0, #40]	; 0x28
 8004c64:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x38>)
 8004c66:	6003      	str	r3, [r0, #0]
 8004c68:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x3c>)
 8004c6a:	6003      	str	r3, [r0, #0]
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004c6c:	214c      	movs	r1, #76	; 0x4c
 8004c6e:	f01e fae2 	bl	8023236 <_ZdlPvj>
 8004c72:	4620      	mov	r0, r4
 8004c74:	bd10      	pop	{r4, pc}
 8004c76:	bf00      	nop
 8004c78:	08025c50 	.word	0x08025c50
 8004c7c:	08026d4c 	.word	0x08026d4c
 8004c80:	08026c54 	.word	0x08026c54
 8004c84:	08024f38 	.word	0x08024f38
 8004c88:	08025a0c 	.word	0x08025a0c
 8004c8c:	08026fe4 	.word	0x08026fe4

08004c90 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
class AbstractButtonContainer : public Container
 8004c90:	b510      	push	{r4, lr}
 8004c92:	4604      	mov	r4, r0
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <_ZN8touchgfx23AbstractButtonContainerD0Ev+0x1c>)
 8004c96:	6003      	str	r3, [r0, #0]
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <_ZN8touchgfx23AbstractButtonContainerD0Ev+0x20>)
 8004c9a:	6003      	str	r3, [r0, #0]
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <_ZN8touchgfx23AbstractButtonContainerD0Ev+0x24>)
 8004c9e:	6003      	str	r3, [r0, #0]
 8004ca0:	2134      	movs	r1, #52	; 0x34
 8004ca2:	f01e fac8 	bl	8023236 <_ZdlPvj>
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	bf00      	nop
 8004cac:	08025ce0 	.word	0x08025ce0
 8004cb0:	080268e0 	.word	0x080268e0
 8004cb4:	08026fe4 	.word	0x08026fe4

08004cb8 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x20>)
 8004cbe:	6003      	str	r3, [r0, #0]
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x24>)
 8004cc2:	6003      	str	r3, [r0, #0]
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x28>)
 8004cc6:	6003      	str	r3, [r0, #0]
 8004cc8:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x2c>)
 8004cca:	6003      	str	r3, [r0, #0]
 8004ccc:	2134      	movs	r1, #52	; 0x34
 8004cce:	f01e fab2 	bl	8023236 <_ZdlPvj>
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	bd10      	pop	{r4, pc}
 8004cd6:	bf00      	nop
 8004cd8:	08025d94 	.word	0x08025d94
 8004cdc:	08025ce0 	.word	0x08025ce0
 8004ce0:	080268e0 	.word	0x080268e0
 8004ce4:	08026fe4 	.word	0x08026fe4

08004ce8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class BoxWithBorderButtonStyle : public T
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x30>)
 8004cee:	6003      	str	r3, [r0, #0]
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x34>)
 8004cf2:	6343      	str	r3, [r0, #52]	; 0x34
class Box : public Widget
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x38>)
 8004cf6:	6343      	str	r3, [r0, #52]	; 0x34
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x3c>)
 8004cfa:	6343      	str	r3, [r0, #52]	; 0x34
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x40>)
 8004cfe:	6343      	str	r3, [r0, #52]	; 0x34
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x44>)
 8004d02:	6002      	str	r2, [r0, #0]
 8004d04:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x48>)
 8004d06:	6002      	str	r2, [r0, #0]
 8004d08:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x4c>)
 8004d0a:	6002      	str	r2, [r0, #0]
 8004d0c:	6003      	str	r3, [r0, #0]
 8004d0e:	2178      	movs	r1, #120	; 0x78
 8004d10:	f01e fa91 	bl	8023236 <_ZdlPvj>
 8004d14:	4620      	mov	r0, r4
 8004d16:	bd10      	pop	{r4, pc}
 8004d18:	08025e30 	.word	0x08025e30
 8004d1c:	08026ddc 	.word	0x08026ddc
 8004d20:	08026ce4 	.word	0x08026ce4
 8004d24:	08025a0c 	.word	0x08025a0c
 8004d28:	08026fe4 	.word	0x08026fe4
 8004d2c:	08025d94 	.word	0x08025d94
 8004d30:	08025ce0 	.word	0x08025ce0
 8004d34:	080268e0 	.word	0x080268e0

08004d38 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED0Ev+0x18>)
 8004d3e:	6003      	str	r3, [r0, #0]
    }
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED0Ev+0x1c>)
 8004d42:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004d44:	2110      	movs	r1, #16
 8004d46:	f01e fa76 	bl	8023236 <_ZdlPvj>
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	bd10      	pop	{r4, pc}
 8004d4e:	bf00      	nop
 8004d50:	08025ecc 	.word	0x08025ecc
 8004d54:	08025d7c 	.word	0x08025d7c

08004d58 <_ZN26wifiInfoLargeContainerBaseD0Ev>:
wifiInfoLargeContainerBase::~wifiInfoLargeContainerBase()
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	4604      	mov	r4, r0
}
 8004d5c:	f7ff fe76 	bl	8004a4c <_ZN26wifiInfoLargeContainerBaseD1Ev>
 8004d60:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004d64:	4620      	mov	r0, r4
 8004d66:	f01e fa66 	bl	8023236 <_ZdlPvj>
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	bd10      	pop	{r4, pc}
	...

08004d70 <_ZN8touchgfx8TextArea12setBaselineYEs>:
    virtual void setBaselineY(int16_t baselineY)
 8004d70:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004d72:	6803      	ldr	r3, [r0, #0]
 8004d74:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004d76:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b1a3      	cbz	r3, 8004da6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
 8004d80:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8004d82:	4910      	ldr	r1, [pc, #64]	; (8004dc4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8004d84:	8809      	ldrh	r1, [r1, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004d86:	428a      	cmp	r2, r1
 8004d88:	d213      	bcs.n	8004db2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x42>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004d8a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004d96:	6803      	ldr	r3, [r0, #0]
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	4798      	blx	r3
 8004d9c:	1a31      	subs	r1, r6, r0
 8004d9e:	b209      	sxth	r1, r1
 8004da0:	4620      	mov	r0, r4
 8004da2:	47a8      	blx	r5
    }
 8004da4:	bd70      	pop	{r4, r5, r6, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004da8:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004daa:	216c      	movs	r1, #108	; 0x6c
 8004dac:	4809      	ldr	r0, [pc, #36]	; (8004dd4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004dae:	f01e fa71 	bl	8023294 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004db4:	4a06      	ldr	r2, [pc, #24]	; (8004dd0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004db6:	216d      	movs	r1, #109	; 0x6d
 8004db8:	4806      	ldr	r0, [pc, #24]	; (8004dd4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004dba:	f01e fa6b 	bl	8023294 <__assert_func>
 8004dbe:	bf00      	nop
 8004dc0:	2400ff34 	.word	0x2400ff34
 8004dc4:	2400ff38 	.word	0x2400ff38
 8004dc8:	2400ff3c 	.word	0x2400ff3c
 8004dcc:	08025b04 	.word	0x08025b04
 8004dd0:	08025b48 	.word	0x08025b48
 8004dd4:	08025b84 	.word	0x08025b84
 8004dd8:	08025bcc 	.word	0x08025bcc

08004ddc <_ZN26wifiInfoLargeContainerBaseC1Ev>:
wifiInfoLargeContainerBase::wifiInfoLargeContainerBase() :
 8004ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	b093      	sub	sp, #76	; 0x4c
 8004de2:	4605      	mov	r5, r0
          visible(true)
 8004de4:	4fbc      	ldr	r7, [pc, #752]	; (80050d8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004de6:	6007      	str	r7, [r0, #0]
        : x(0), y(0), width(0), height(0)
 8004de8:	2400      	movs	r4, #0
 8004dea:	8084      	strh	r4, [r0, #4]
 8004dec:	80c4      	strh	r4, [r0, #6]
 8004dee:	8104      	strh	r4, [r0, #8]
 8004df0:	8144      	strh	r4, [r0, #10]
 8004df2:	8184      	strh	r4, [r0, #12]
 8004df4:	81c4      	strh	r4, [r0, #14]
 8004df6:	8204      	strh	r4, [r0, #16]
 8004df8:	8244      	strh	r4, [r0, #18]
 8004dfa:	6144      	str	r4, [r0, #20]
 8004dfc:	6184      	str	r4, [r0, #24]
 8004dfe:	61c4      	str	r4, [r0, #28]
 8004e00:	8404      	strh	r4, [r0, #32]
 8004e02:	8444      	strh	r4, [r0, #34]	; 0x22
 8004e04:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8004e08:	f04f 0b01 	mov.w	fp, #1
 8004e0c:	f880 b025 	strb.w	fp, [r0, #37]	; 0x25
          firstChild(0)
 8004e10:	4bb2      	ldr	r3, [pc, #712]	; (80050dc <_ZN26wifiInfoLargeContainerBaseC1Ev+0x300>)
 8004e12:	6003      	str	r3, [r0, #0]
 8004e14:	6284      	str	r4, [r0, #40]	; 0x28
    flexButtonCallback(this, &wifiInfoLargeContainerBase::flexButtonCallbackHandler)
 8004e16:	4606      	mov	r6, r0
 8004e18:	4bb1      	ldr	r3, [pc, #708]	; (80050e0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x304>)
 8004e1a:	f846 3b2c 	str.w	r3, [r6], #44
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004e1e:	2226      	movs	r2, #38	; 0x26
 8004e20:	4621      	mov	r1, r4
 8004e22:	4630      	mov	r0, r6
 8004e24:	f01e fbcc 	bl	80235c0 <memset>
 8004e28:	62ef      	str	r7, [r5, #44]	; 0x2c
 8004e2a:	80b4      	strh	r4, [r6, #4]
 8004e2c:	80f4      	strh	r4, [r6, #6]
 8004e2e:	8134      	strh	r4, [r6, #8]
 8004e30:	8174      	strh	r4, [r6, #10]
 8004e32:	81b4      	strh	r4, [r6, #12]
 8004e34:	81f4      	strh	r4, [r6, #14]
 8004e36:	8234      	strh	r4, [r6, #16]
 8004e38:	8274      	strh	r4, [r6, #18]
 8004e3a:	6174      	str	r4, [r6, #20]
 8004e3c:	61b4      	str	r4, [r6, #24]
 8004e3e:	61f4      	str	r4, [r6, #28]
 8004e40:	8434      	strh	r4, [r6, #32]
 8004e42:	8474      	strh	r4, [r6, #34]	; 0x22
 8004e44:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 8004e48:	f886 b025 	strb.w	fp, [r6, #37]	; 0x25
 8004e4c:	4aa5      	ldr	r2, [pc, #660]	; (80050e4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 8004e4e:	62ea      	str	r2, [r5, #44]	; 0x2c
 8004e50:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8005118 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x33c>
 8004e54:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
        : typedTextId(id)
 8004e58:	49a3      	ldr	r1, [pc, #652]	; (80050e8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x30c>)
 8004e5a:	62b1      	str	r1, [r6, #40]	; 0x28
 8004e5c:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8004e60:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
        : color(col)
 8004e64:	6334      	str	r4, [r6, #48]	; 0x30
 8004e66:	86b4      	strh	r4, [r6, #52]	; 0x34
 8004e68:	f886 a036 	strb.w	sl, [r6, #54]	; 0x36
 8004e6c:	f886 4037 	strb.w	r4, [r6, #55]	; 0x37
 8004e70:	f886 4038 	strb.w	r4, [r6, #56]	; 0x38
 8004e74:	f886 4039 	strb.w	r4, [r6, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004e78:	87b4      	strh	r4, [r6, #60]	; 0x3c
 8004e7a:	87f4      	strh	r4, [r6, #62]	; 0x3e
 8004e7c:	f8a6 a040 	strh.w	sl, [r6, #64]	; 0x40
 8004e80:	f8a6 a042 	strh.w	sl, [r6, #66]	; 0x42
              text(0)
 8004e84:	6474      	str	r4, [r6, #68]	; 0x44
        : TextArea()
 8004e86:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800511c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x340>
 8004e8a:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
        : TextAreaWithWildcardBase(), wc1(0)
 8004e8e:	4897      	ldr	r0, [pc, #604]	; (80050ec <_ZN26wifiInfoLargeContainerBaseC1Ev+0x310>)
 8004e90:	62e8      	str	r0, [r5, #44]	; 0x2c
 8004e92:	676c      	str	r4, [r5, #116]	; 0x74
        : TextArea()
 8004e94:	f105 0778 	add.w	r7, r5, #120	; 0x78
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004e98:	2226      	movs	r2, #38	; 0x26
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	f01e fb8f 	bl	80235c0 <memset>
 8004ea2:	4b8d      	ldr	r3, [pc, #564]	; (80050d8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004ea4:	67ab      	str	r3, [r5, #120]	; 0x78
        : x(0), y(0), width(0), height(0)
 8004ea6:	80bc      	strh	r4, [r7, #4]
 8004ea8:	80fc      	strh	r4, [r7, #6]
 8004eaa:	813c      	strh	r4, [r7, #8]
 8004eac:	817c      	strh	r4, [r7, #10]
 8004eae:	81bc      	strh	r4, [r7, #12]
 8004eb0:	81fc      	strh	r4, [r7, #14]
 8004eb2:	823c      	strh	r4, [r7, #16]
 8004eb4:	827c      	strh	r4, [r7, #18]
 8004eb6:	617c      	str	r4, [r7, #20]
 8004eb8:	61bc      	str	r4, [r7, #24]
 8004eba:	61fc      	str	r4, [r7, #28]
 8004ebc:	843c      	strh	r4, [r7, #32]
 8004ebe:	847c      	strh	r4, [r7, #34]	; 0x22
 8004ec0:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 8004ec4:	f887 b025 	strb.w	fp, [r7, #37]	; 0x25
 8004ec8:	4a86      	ldr	r2, [pc, #536]	; (80050e4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 8004eca:	67aa      	str	r2, [r5, #120]	; 0x78
 8004ecc:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 8004ed0:	4985      	ldr	r1, [pc, #532]	; (80050e8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x30c>)
 8004ed2:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ed4:	f8a7 a02c 	strh.w	sl, [r7, #44]	; 0x2c
        : color(col)
 8004ed8:	633c      	str	r4, [r7, #48]	; 0x30
 8004eda:	86bc      	strh	r4, [r7, #52]	; 0x34
 8004edc:	f887 a036 	strb.w	sl, [r7, #54]	; 0x36
 8004ee0:	f887 4037 	strb.w	r4, [r7, #55]	; 0x37
 8004ee4:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
 8004ee8:	f887 4039 	strb.w	r4, [r7, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004eec:	87bc      	strh	r4, [r7, #60]	; 0x3c
 8004eee:	87fc      	strh	r4, [r7, #62]	; 0x3e
 8004ef0:	f8a7 a040 	strh.w	sl, [r7, #64]	; 0x40
 8004ef4:	f8a7 a042 	strh.w	sl, [r7, #66]	; 0x42
              text(0)
 8004ef8:	647c      	str	r4, [r7, #68]	; 0x44
 8004efa:	f8c5 9078 	str.w	r9, [r5, #120]	; 0x78
        : TextAreaWithWildcardBase(), wc1(0)
 8004efe:	4f7b      	ldr	r7, [pc, #492]	; (80050ec <_ZN26wifiInfoLargeContainerBaseC1Ev+0x310>)
 8004f00:	67af      	str	r7, [r5, #120]	; 0x78
 8004f02:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
 8004f06:	f105 09c4 	add.w	r9, r5, #196	; 0xc4
 8004f0a:	f8ad a018 	strh.w	sl, [sp, #24]
        : Widget(), bitmap(bmp), alpha(255)
 8004f0e:	2226      	movs	r2, #38	; 0x26
 8004f10:	4621      	mov	r1, r4
 8004f12:	4648      	mov	r0, r9
 8004f14:	f01e fb54 	bl	80235c0 <memset>
 8004f18:	4b6f      	ldr	r3, [pc, #444]	; (80050d8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004f1a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
        : x(0), y(0), width(0), height(0)
 8004f1e:	f8a9 4004 	strh.w	r4, [r9, #4]
 8004f22:	f8a9 4006 	strh.w	r4, [r9, #6]
 8004f26:	f8a9 4008 	strh.w	r4, [r9, #8]
 8004f2a:	f8a9 400a 	strh.w	r4, [r9, #10]
 8004f2e:	f8a9 400c 	strh.w	r4, [r9, #12]
 8004f32:	f8a9 400e 	strh.w	r4, [r9, #14]
 8004f36:	f8a9 4010 	strh.w	r4, [r9, #16]
 8004f3a:	f8a9 4012 	strh.w	r4, [r9, #18]
 8004f3e:	f8c9 4014 	str.w	r4, [r9, #20]
 8004f42:	f8c9 4018 	str.w	r4, [r9, #24]
 8004f46:	f8c9 401c 	str.w	r4, [r9, #28]
 8004f4a:	f8a9 4020 	strh.w	r4, [r9, #32]
 8004f4e:	f8a9 4022 	strh.w	r4, [r9, #34]	; 0x22
 8004f52:	f889 4024 	strb.w	r4, [r9, #36]	; 0x24
 8004f56:	f889 b025 	strb.w	fp, [r9, #37]	; 0x25
 8004f5a:	4a62      	ldr	r2, [pc, #392]	; (80050e4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 8004f5c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8004f60:	4b63      	ldr	r3, [pc, #396]	; (80050f0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x314>)
 8004f62:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
 8004f66:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8004f6a:	f8a9 3026 	strh.w	r3, [r9, #38]	; 0x26
 8004f6e:	f889 a028 	strb.w	sl, [r9, #40]	; 0x28
        Image::setBitmap(bmp);
 8004f72:	a906      	add	r1, sp, #24
 8004f74:	4648      	mov	r0, r9
 8004f76:	f010 ff54 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004f7a:	f105 07f0 	add.w	r7, r5, #240	; 0xf0
        : T(), up(), down()
 8004f7e:	2234      	movs	r2, #52	; 0x34
 8004f80:	4621      	mov	r1, r4
 8004f82:	4638      	mov	r0, r7
 8004f84:	f01e fb1c 	bl	80235c0 <memset>
 8004f88:	4b53      	ldr	r3, [pc, #332]	; (80050d8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004f8a:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8004f8e:	80bc      	strh	r4, [r7, #4]
 8004f90:	80fc      	strh	r4, [r7, #6]
 8004f92:	813c      	strh	r4, [r7, #8]
 8004f94:	817c      	strh	r4, [r7, #10]
 8004f96:	81bc      	strh	r4, [r7, #12]
 8004f98:	81fc      	strh	r4, [r7, #14]
 8004f9a:	823c      	strh	r4, [r7, #16]
 8004f9c:	827c      	strh	r4, [r7, #18]
 8004f9e:	617c      	str	r4, [r7, #20]
 8004fa0:	61bc      	str	r4, [r7, #24]
 8004fa2:	61fc      	str	r4, [r7, #28]
 8004fa4:	843c      	strh	r4, [r7, #32]
 8004fa6:	847c      	strh	r4, [r7, #34]	; 0x22
 8004fa8:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 8004fac:	f887 b025 	strb.w	fp, [r7, #37]	; 0x25
 8004fb0:	484a      	ldr	r0, [pc, #296]	; (80050dc <_ZN26wifiInfoLargeContainerBaseC1Ev+0x300>)
 8004fb2:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
 8004fb6:	62bc      	str	r4, [r7, #40]	; 0x28
        : pressed(false), alpha(255), action(0)
 8004fb8:	4b4e      	ldr	r3, [pc, #312]	; (80050f4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x318>)
 8004fba:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8004fbe:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
 8004fc2:	f887 a02d 	strb.w	sl, [r7, #45]	; 0x2d
 8004fc6:	633c      	str	r4, [r7, #48]	; 0x30
        touchable = touch;
 8004fc8:	f887 b024 	strb.w	fp, [r7, #36]	; 0x24
 8004fcc:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x31c>)
 8004fce:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8004fd2:	4b4a      	ldr	r3, [pc, #296]	; (80050fc <_ZN26wifiInfoLargeContainerBaseC1Ev+0x320>)
 8004fd4:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
        : Box(), borderColor(0), borderSize(0)
 8004fd8:	f505 7892 	add.w	r8, r5, #292	; 0x124
        : Widget(), alpha(255), color(0)
 8004fdc:	2226      	movs	r2, #38	; 0x26
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	f01e faed 	bl	80235c0 <memset>
          visible(true)
 8004fe6:	4b3c      	ldr	r3, [pc, #240]	; (80050d8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004fe8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8004fec:	f8a8 4004 	strh.w	r4, [r8, #4]
 8004ff0:	f8a8 4006 	strh.w	r4, [r8, #6]
 8004ff4:	f8a8 4008 	strh.w	r4, [r8, #8]
 8004ff8:	f8a8 400a 	strh.w	r4, [r8, #10]
 8004ffc:	f8a8 400c 	strh.w	r4, [r8, #12]
 8005000:	f8a8 400e 	strh.w	r4, [r8, #14]
 8005004:	f8a8 4010 	strh.w	r4, [r8, #16]
 8005008:	f8a8 4012 	strh.w	r4, [r8, #18]
 800500c:	f8c8 4014 	str.w	r4, [r8, #20]
 8005010:	f8c8 4018 	str.w	r4, [r8, #24]
 8005014:	f8c8 401c 	str.w	r4, [r8, #28]
 8005018:	f8a8 4020 	strh.w	r4, [r8, #32]
 800501c:	f8a8 4022 	strh.w	r4, [r8, #34]	; 0x22
 8005020:	f888 4024 	strb.w	r4, [r8, #36]	; 0x24
 8005024:	f888 b025 	strb.w	fp, [r8, #37]	; 0x25
 8005028:	4a2e      	ldr	r2, [pc, #184]	; (80050e4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 800502a:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 800502e:	4b34      	ldr	r3, [pc, #208]	; (8005100 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x324>)
 8005030:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005034:	f888 a026 	strb.w	sl, [r8, #38]	; 0x26
        : color(col)
 8005038:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 800503c:	4b31      	ldr	r3, [pc, #196]	; (8005104 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x328>)
 800503e:	637b      	str	r3, [r7, #52]	; 0x34
 8005040:	663c      	str	r4, [r7, #96]	; 0x60
 8005042:	f8a7 4064 	strh.w	r4, [r7, #100]	; 0x64
        : color(0)
 8005046:	66bc      	str	r4, [r7, #104]	; 0x68
 8005048:	66fc      	str	r4, [r7, #108]	; 0x6c
 800504a:	673c      	str	r4, [r7, #112]	; 0x70
 800504c:	677c      	str	r4, [r7, #116]	; 0x74
        setX(x);
 800504e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	4621      	mov	r1, r4
 8005056:	4640      	mov	r0, r8
 8005058:	4798      	blx	r3
        setY(y);
 800505a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005060:	4621      	mov	r1, r4
 8005062:	4640      	mov	r0, r8
 8005064:	4798      	blx	r3
        T::add(borderBox);
 8005066:	4641      	mov	r1, r8
 8005068:	4638      	mov	r0, r7
 800506a:	f00d ffbf 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800506e:	4b26      	ldr	r3, [pc, #152]	; (8005108 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x32c>)
 8005070:	9307      	str	r3, [sp, #28]
 8005072:	9408      	str	r4, [sp, #32]
 8005074:	ab04      	add	r3, sp, #16
 8005076:	aa07      	add	r2, sp, #28
 8005078:	e892 0003 	ldmia.w	r2, {r0, r1}
 800507c:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<T1, void, void>
 8005080:	4a22      	ldr	r2, [pc, #136]	; (800510c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x330>)
 8005082:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
        : pobject(pObject), pmemfun(pmemfun_1)
 8005086:	4a22      	ldr	r2, [pc, #136]	; (8005110 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x334>)
 8005088:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
 800508c:	f8c5 520c 	str.w	r5, [r5, #524]	; 0x20c
 8005090:	f505 7204 	add.w	r2, r5, #528	; 0x210
 8005094:	e882 0003 	stmia.w	r2, {r0, r1}
        rect.width = width;
 8005098:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800509c:	812b      	strh	r3, [r5, #8]
        rect.height = height;
 800509e:	233e      	movs	r3, #62	; 0x3e
 80050a0:	816b      	strh	r3, [r5, #10]
        setX(x);
 80050a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	2110      	movs	r1, #16
 80050a8:	4630      	mov	r0, r6
 80050aa:	4798      	blx	r3
        setY(y);
 80050ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b0:	2105      	movs	r1, #5
 80050b2:	4630      	mov	r0, r6
 80050b4:	4798      	blx	r3
        setWidth(width);
 80050b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	21da      	movs	r1, #218	; 0xda
 80050bc:	4630      	mov	r0, r6
 80050be:	4798      	blx	r3
        setHeight(height);
 80050c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c4:	211e      	movs	r1, #30
 80050c6:	4630      	mov	r0, r6
 80050c8:	4798      	blx	r3
        : color(col)
 80050ca:	4b12      	ldr	r3, [pc, #72]	; (8005114 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x338>)
        color = newColor;
 80050cc:	65eb      	str	r3, [r5, #92]	; 0x5c
        linespace = space;
 80050ce:	f8a5 4060 	strh.w	r4, [r5, #96]	; 0x60
        boundingArea = calculateBoundingArea();
 80050d2:	466c      	mov	r4, sp
 80050d4:	e024      	b.n	8005120 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x344>
 80050d6:	bf00      	nop
 80050d8:	08026fe4 	.word	0x08026fe4
 80050dc:	080268e0 	.word	0x080268e0
 80050e0:	08025ee4 	.word	0x08025ee4
 80050e4:	08025a0c 	.word	0x08025a0c
 80050e8:	08024f38 	.word	0x08024f38
 80050ec:	08025c50 	.word	0x08025c50
 80050f0:	08026e44 	.word	0x08026e44
 80050f4:	08025ce0 	.word	0x08025ce0
 80050f8:	08025d94 	.word	0x08025d94
 80050fc:	08025e30 	.word	0x08025e30
 8005100:	08026ce4 	.word	0x08026ce4
 8005104:	08026ddc 	.word	0x08026ddc
 8005108:	08004b13 	.word	0x08004b13
 800510c:	08025d7c 	.word	0x08025d7c
 8005110:	08025ecc 	.word	0x08025ecc
 8005114:	ffebebeb 	.word	0xffebebeb
 8005118:	08026c54 	.word	0x08026c54
 800511c:	08026d4c 	.word	0x08026d4c
 8005120:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005126:	4631      	mov	r1, r6
 8005128:	4620      	mov	r0, r4
 800512a:	4798      	blx	r3
 800512c:	f105 0368 	add.w	r3, r5, #104	; 0x68
 8005130:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005134:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005138:	4989      	ldr	r1, [pc, #548]	; (8005360 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x584>)
 800513a:	9109      	str	r1, [sp, #36]	; 0x24
 800513c:	2303      	movs	r3, #3
 800513e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005142:	4b88      	ldr	r3, [pc, #544]	; (8005364 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x588>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 80f2 	beq.w	8005330 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x554>
 800514c:	f505 74b4 	add.w	r4, r5, #360	; 0x168
        return typedTextId < numberOfTypedTexts;
 8005150:	4b85      	ldr	r3, [pc, #532]	; (8005368 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x58c>)
 8005152:	881b      	ldrh	r3, [r3, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005154:	2b03      	cmp	r3, #3
 8005156:	f240 80f1 	bls.w	800533c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x560>
        return texts->getText(typedTextId);
 800515a:	2103      	movs	r1, #3
 800515c:	4b83      	ldr	r3, [pc, #524]	; (800536c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x590>)
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	f7ff f9aa 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 8005164:	4603      	mov	r3, r0
    Unicode::snprintf(wifiSSIDBuffer, WIFISSID_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NRXH).getText());
 8005166:	4a82      	ldr	r2, [pc, #520]	; (8005370 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x594>)
 8005168:	2128      	movs	r1, #40	; 0x28
 800516a:	4620      	mov	r0, r4
 800516c:	f015 fe14 	bl	801ad98 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8005170:	676c      	str	r4, [r5, #116]	; 0x74
        : typedTextId(id)
 8005172:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8005360 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x584>
 8005176:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800517a:	2304      	movs	r3, #4
 800517c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    wifiSSID.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4CY4));
 8005180:	a90b      	add	r1, sp, #44	; 0x2c
 8005182:	4630      	mov	r0, r6
 8005184:	f010 fc78 	bl	8015a78 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005188:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    encryption.setPosition(16, 31, 218, 25);
 800518c:	f105 0478 	add.w	r4, r5, #120	; 0x78
        setX(x);
 8005190:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	2110      	movs	r1, #16
 8005196:	4620      	mov	r0, r4
 8005198:	4798      	blx	r3
        setY(y);
 800519a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800519c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519e:	211f      	movs	r1, #31
 80051a0:	4620      	mov	r0, r4
 80051a2:	4798      	blx	r3
        setWidth(width);
 80051a4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	21da      	movs	r1, #218	; 0xda
 80051aa:	4620      	mov	r0, r4
 80051ac:	4798      	blx	r3
        setHeight(height);
 80051ae:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	2119      	movs	r1, #25
 80051b4:	4620      	mov	r0, r4
 80051b6:	4798      	blx	r3
 80051b8:	4b6e      	ldr	r3, [pc, #440]	; (8005374 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x598>)
        color = newColor;
 80051ba:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
        linespace = space;
 80051be:	2300      	movs	r3, #0
 80051c0:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
        boundingArea = calculateBoundingArea();
 80051c4:	46ea      	mov	sl, sp
 80051c6:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80051c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051cc:	4621      	mov	r1, r4
 80051ce:	4650      	mov	r0, sl
 80051d0:	4798      	blx	r3
 80051d2:	f105 03b4 	add.w	r3, r5, #180	; 0xb4
 80051d6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 80051da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(encryptionBuffer, ENCRYPTION_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_47B1).getText());
 80051de:	f505 7adc 	add.w	sl, r5, #440	; 0x1b8
        : typedTextId(id)
 80051e2:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80051e6:	2305      	movs	r3, #5
 80051e8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80051ec:	4b5d      	ldr	r3, [pc, #372]	; (8005364 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x588>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80a9 	beq.w	8005348 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x56c>
        return typedTextId < numberOfTypedTexts;
 80051f6:	4b5c      	ldr	r3, [pc, #368]	; (8005368 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x58c>)
 80051f8:	881b      	ldrh	r3, [r3, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80051fa:	2b05      	cmp	r3, #5
 80051fc:	f240 80aa 	bls.w	8005354 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x578>
        return texts->getText(typedTextId);
 8005200:	2105      	movs	r1, #5
 8005202:	4b5a      	ldr	r3, [pc, #360]	; (800536c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x590>)
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	f7ff f957 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 800520a:	4603      	mov	r3, r0
 800520c:	4a58      	ldr	r2, [pc, #352]	; (8005370 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x594>)
 800520e:	2128      	movs	r1, #40	; 0x28
 8005210:	4650      	mov	r0, sl
 8005212:	f015 fdc1 	bl	801ad98 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8005216:	f8c5 a0c0 	str.w	sl, [r5, #192]	; 0xc0
        : typedTextId(id)
 800521a:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8005360 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x584>
 800521e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8005222:	2306      	movs	r3, #6
 8005224:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    encryption.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X5OV));
 8005228:	a90f      	add	r1, sp, #60	; 0x3c
 800522a:	4620      	mov	r0, r4
 800522c:	f010 fc24 	bl	8015a78 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005230:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    signalStrengthIcon.setXY(240, 11);
 8005234:	f105 0ac4 	add.w	sl, r5, #196	; 0xc4
        setX(x);
 8005238:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	21f0      	movs	r1, #240	; 0xf0
 8005240:	4650      	mov	r0, sl
 8005242:	4798      	blx	r3
        setY(y);
 8005244:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	210b      	movs	r1, #11
 800524c:	4650      	mov	r0, sl
 800524e:	4798      	blx	r3
 8005250:	230b      	movs	r3, #11
 8005252:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    signalStrengthIcon.setBitmap(touchgfx::Bitmap(BITMAP_WIFI_LOW_SETTINGS_ID));
 8005256:	a911      	add	r1, sp, #68	; 0x44
 8005258:	4648      	mov	r0, r9
 800525a:	f010 fde2 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        borderBox.setPosition(x, y, width, height);
 800525e:	f105 08f0 	add.w	r8, r5, #240	; 0xf0
 8005262:	f505 7992 	add.w	r9, r5, #292	; 0x124
        setX(x);
 8005266:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	2100      	movs	r1, #0
 800526e:	4648      	mov	r0, r9
 8005270:	4798      	blx	r3
        setY(y);
 8005272:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	2100      	movs	r1, #0
 800527a:	4648      	mov	r0, r9
 800527c:	4798      	blx	r3
        setWidth(width);
 800527e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	2100      	movs	r1, #0
 8005286:	4648      	mov	r0, r9
 8005288:	4798      	blx	r3
        setHeight(height);
 800528a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	2100      	movs	r1, #0
 8005292:	4648      	mov	r0, r9
 8005294:	4798      	blx	r3
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8005296:	2305      	movs	r3, #5
 8005298:	f8a5 3154 	strh.w	r3, [r5, #340]	; 0x154
        up = colorReleased;
 800529c:	4b36      	ldr	r3, [pc, #216]	; (8005378 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x59c>)
 800529e:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
        down = colorPressed;
 80052a2:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 80052a6:	3333      	adds	r3, #51	; 0x33
 80052a8:	f8c5 315c 	str.w	r3, [r5, #348]	; 0x15c
        borderUp = borderColorReleased;
 80052ac:	f5a3 43cc 	sub.w	r3, r3, #26112	; 0x6600
 80052b0:	3b66      	subs	r3, #102	; 0x66
 80052b2:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
        borderDown = borderColorPressed;
 80052b6:	f103 1333 	add.w	r3, r3, #3342387	; 0x330033
 80052ba:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 80052be:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handlePressedUpdated();
 80052c2:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80052c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ca:	4638      	mov	r0, r7
 80052cc:	4798      	blx	r3
        setX(x);
 80052ce:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	2100      	movs	r1, #0
 80052d6:	4640      	mov	r0, r8
 80052d8:	4798      	blx	r3
        setY(y);
 80052da:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80052de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e0:	2100      	movs	r1, #0
 80052e2:	4640      	mov	r0, r8
 80052e4:	4798      	blx	r3
        setWidth(width);
 80052e6:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80052f0:	4640      	mov	r0, r8
 80052f2:	4798      	blx	r3
        setHeight(height);
 80052f4:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80052f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fa:	213e      	movs	r1, #62	; 0x3e
 80052fc:	4640      	mov	r0, r8
 80052fe:	4798      	blx	r3
    listButtonOverlay.setAction(flexButtonCallback);
 8005300:	f505 7302 	add.w	r3, r5, #520	; 0x208
        action = &callback;
 8005304:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    add(wifiSSID);
 8005308:	4631      	mov	r1, r6
 800530a:	4628      	mov	r0, r5
 800530c:	f00d fe6e 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(encryption);
 8005310:	4621      	mov	r1, r4
 8005312:	4628      	mov	r0, r5
 8005314:	f00d fe6a 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(signalStrengthIcon);
 8005318:	4651      	mov	r1, sl
 800531a:	4628      	mov	r0, r5
 800531c:	f00d fe66 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(listButtonOverlay);
 8005320:	4641      	mov	r1, r8
 8005322:	4628      	mov	r0, r5
 8005324:	f00d fe62 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005328:	4628      	mov	r0, r5
 800532a:	b013      	add	sp, #76	; 0x4c
 800532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005330:	4b12      	ldr	r3, [pc, #72]	; (800537c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a0>)
 8005332:	4a13      	ldr	r2, [pc, #76]	; (8005380 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 8005334:	2160      	movs	r1, #96	; 0x60
 8005336:	4813      	ldr	r0, [pc, #76]	; (8005384 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 8005338:	f01d ffac 	bl	8023294 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5ac>)
 800533e:	4a10      	ldr	r2, [pc, #64]	; (8005380 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 8005340:	2161      	movs	r1, #97	; 0x61
 8005342:	4810      	ldr	r0, [pc, #64]	; (8005384 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 8005344:	f01d ffa6 	bl	8023294 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a0>)
 800534a:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 800534c:	2160      	movs	r1, #96	; 0x60
 800534e:	480d      	ldr	r0, [pc, #52]	; (8005384 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 8005350:	f01d ffa0 	bl	8023294 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5ac>)
 8005356:	4a0a      	ldr	r2, [pc, #40]	; (8005380 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 8005358:	2161      	movs	r1, #97	; 0x61
 800535a:	480a      	ldr	r0, [pc, #40]	; (8005384 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 800535c:	f01d ff9a 	bl	8023294 <__assert_func>
 8005360:	08024f38 	.word	0x08024f38
 8005364:	2400ff34 	.word	0x2400ff34
 8005368:	2400ff38 	.word	0x2400ff38
 800536c:	2400ff40 	.word	0x2400ff40
 8005370:	08025c44 	.word	0x08025c44
 8005374:	ffebebeb 	.word	0xffebebeb
 8005378:	ff006699 	.word	0xff006699
 800537c:	08025b04 	.word	0x08025b04
 8005380:	08025c0c 	.word	0x08025c0c
 8005384:	08025b84 	.word	0x08025b84
 8005388:	08025bcc 	.word	0x08025bcc

0800538c <_ZN21wifiMenuContainerBaseD1Ev>:

    add(backgroundBox);
    add(wifiListContainer);
}

wifiMenuContainerBase::~wifiMenuContainerBase()
 800538c:	b430      	push	{r4, r5}
 800538e:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <_ZN21wifiMenuContainerBaseD1Ev+0x4c>)
 8005390:	6002      	str	r2, [r0, #0]
 * dimensions of the physical screen. Place the ListLayout inside e.g. a
 * ScrollableContainer to allow all the children to be viewed.
 *
 * @see ScrollableContainer
 */
class ListLayout : public Container
 8005392:	4a12      	ldr	r2, [pc, #72]	; (80053dc <_ZN21wifiMenuContainerBaseD1Ev+0x50>)
 8005394:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
class Container : public Drawable
 8005398:	4911      	ldr	r1, [pc, #68]	; (80053e0 <_ZN21wifiMenuContainerBaseD1Ev+0x54>)
 800539a:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    {
 800539e:	4a11      	ldr	r2, [pc, #68]	; (80053e4 <_ZN21wifiMenuContainerBaseD1Ev+0x58>)
 80053a0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 * @see Container
 *
 * @note The ScrollableContainer will consume all DragEvents in the area covered by the
 *       container.
 */
class ScrollableContainer : public Container
 80053a4:	4c10      	ldr	r4, [pc, #64]	; (80053e8 <_ZN21wifiMenuContainerBaseD1Ev+0x5c>)
 80053a6:	6584      	str	r4, [r0, #88]	; 0x58
class Box : public Widget
 80053a8:	4d10      	ldr	r5, [pc, #64]	; (80053ec <_ZN21wifiMenuContainerBaseD1Ev+0x60>)
 80053aa:	f8c0 50bc 	str.w	r5, [r0, #188]	; 0xbc
 80053ae:	4c10      	ldr	r4, [pc, #64]	; (80053f0 <_ZN21wifiMenuContainerBaseD1Ev+0x64>)
 80053b0:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 80053b4:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
 80053b8:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
 80053bc:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
 80053c0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 80053c4:	6581      	str	r1, [r0, #88]	; 0x58
 80053c6:	6582      	str	r2, [r0, #88]	; 0x58
class Image : public Widget
 80053c8:	4d0a      	ldr	r5, [pc, #40]	; (80053f4 <_ZN21wifiMenuContainerBaseD1Ev+0x68>)
 80053ca:	62c5      	str	r5, [r0, #44]	; 0x2c
 80053cc:	62c4      	str	r4, [r0, #44]	; 0x2c
 80053ce:	62c2      	str	r2, [r0, #44]	; 0x2c
 80053d0:	6001      	str	r1, [r0, #0]
 80053d2:	6002      	str	r2, [r0, #0]
{

}
 80053d4:	bc30      	pop	{r4, r5}
 80053d6:	4770      	bx	lr
 80053d8:	08025f7c 	.word	0x08025f7c
 80053dc:	080269a0 	.word	0x080269a0
 80053e0:	080268e0 	.word	0x080268e0
 80053e4:	08026fe4 	.word	0x08026fe4
 80053e8:	08026a60 	.word	0x08026a60
 80053ec:	08026ce4 	.word	0x08026ce4
 80053f0:	08025a0c 	.word	0x08025a0c
 80053f4:	08026e44 	.word	0x08026e44

080053f8 <_ZN21wifiMenuContainerBase10initializeEv>:

void wifiMenuContainerBase::initialize()
{

}
 80053f8:	4770      	bx	lr

080053fa <_ZN21wifiMenuContainerBaseD0Ev>:
wifiMenuContainerBase::~wifiMenuContainerBase()
 80053fa:	b510      	push	{r4, lr}
 80053fc:	4604      	mov	r4, r0
}
 80053fe:	f7ff ffc5 	bl	800538c <_ZN21wifiMenuContainerBaseD1Ev>
 8005402:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8005406:	4620      	mov	r0, r4
 8005408:	f01d ff15 	bl	8023236 <_ZdlPvj>
 800540c:	4620      	mov	r0, r4
 800540e:	bd10      	pop	{r4, pc}

08005410 <_ZN21wifiMenuContainerBaseC1Ev>:
wifiMenuContainerBase::wifiMenuContainerBase()
 8005410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005414:	b083      	sub	sp, #12
 8005416:	4605      	mov	r5, r0
          visible(true)
 8005418:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 80055cc <_ZN21wifiMenuContainerBaseC1Ev+0x1bc>
 800541c:	f8c0 a000 	str.w	sl, [r0]
        : x(0), y(0), width(0), height(0)
 8005420:	2400      	movs	r4, #0
 8005422:	8084      	strh	r4, [r0, #4]
 8005424:	80c4      	strh	r4, [r0, #6]
 8005426:	8104      	strh	r4, [r0, #8]
 8005428:	8144      	strh	r4, [r0, #10]
 800542a:	8184      	strh	r4, [r0, #12]
 800542c:	81c4      	strh	r4, [r0, #14]
 800542e:	8204      	strh	r4, [r0, #16]
 8005430:	8244      	strh	r4, [r0, #18]
 8005432:	6144      	str	r4, [r0, #20]
 8005434:	6184      	str	r4, [r0, #24]
 8005436:	61c4      	str	r4, [r0, #28]
 8005438:	8404      	strh	r4, [r0, #32]
 800543a:	8444      	strh	r4, [r0, #34]	; 0x22
 800543c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8005440:	f04f 0901 	mov.w	r9, #1
 8005444:	f880 9025 	strb.w	r9, [r0, #37]	; 0x25
          firstChild(0)
 8005448:	f8df b184 	ldr.w	fp, [pc, #388]	; 80055d0 <_ZN21wifiMenuContainerBaseC1Ev+0x1c0>
 800544c:	f8c0 b000 	str.w	fp, [r0]
 8005450:	6284      	str	r4, [r0, #40]	; 0x28
 8005452:	4606      	mov	r6, r0
 8005454:	4b59      	ldr	r3, [pc, #356]	; (80055bc <_ZN21wifiMenuContainerBaseC1Ev+0x1ac>)
 8005456:	f846 3b2c 	str.w	r3, [r6], #44
 800545a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800545e:	f8ad 7000 	strh.w	r7, [sp]
        : Widget(), bitmap(bmp), alpha(255)
 8005462:	2226      	movs	r2, #38	; 0x26
 8005464:	4621      	mov	r1, r4
 8005466:	4630      	mov	r0, r6
 8005468:	f01e f8aa 	bl	80235c0 <memset>
 800546c:	f8c5 a02c 	str.w	sl, [r5, #44]	; 0x2c
 8005470:	80b4      	strh	r4, [r6, #4]
 8005472:	80f4      	strh	r4, [r6, #6]
 8005474:	8134      	strh	r4, [r6, #8]
 8005476:	8174      	strh	r4, [r6, #10]
 8005478:	81b4      	strh	r4, [r6, #12]
 800547a:	81f4      	strh	r4, [r6, #14]
 800547c:	8234      	strh	r4, [r6, #16]
 800547e:	8274      	strh	r4, [r6, #18]
 8005480:	6174      	str	r4, [r6, #20]
 8005482:	61b4      	str	r4, [r6, #24]
 8005484:	61f4      	str	r4, [r6, #28]
 8005486:	8434      	strh	r4, [r6, #32]
 8005488:	8474      	strh	r4, [r6, #34]	; 0x22
 800548a:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 800548e:	f886 9025 	strb.w	r9, [r6, #37]	; 0x25
 8005492:	4b4b      	ldr	r3, [pc, #300]	; (80055c0 <_ZN21wifiMenuContainerBaseC1Ev+0x1b0>)
 8005494:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005496:	4b4b      	ldr	r3, [pc, #300]	; (80055c4 <_ZN21wifiMenuContainerBaseC1Ev+0x1b4>)
 8005498:	62eb      	str	r3, [r5, #44]	; 0x2c
 800549a:	f8bd 3000 	ldrh.w	r3, [sp]
 800549e:	84f3      	strh	r3, [r6, #38]	; 0x26
 80054a0:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
        Image::setBitmap(bmp);
 80054a4:	4669      	mov	r1, sp
 80054a6:	4630      	mov	r0, r6
 80054a8:	f010 fcbb 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80054ac:	f105 0858 	add.w	r8, r5, #88	; 0x58
 80054b0:	4640      	mov	r0, r8
 80054b2:	f00e fd47 	bl	8013f44 <_ZN8touchgfx19ScrollableContainerC1Ev>
 80054b6:	f505 778a 	add.w	r7, r5, #276	; 0x114
 80054ba:	f8c5 a114 	str.w	sl, [r5, #276]	; 0x114
 80054be:	80bc      	strh	r4, [r7, #4]
 80054c0:	80fc      	strh	r4, [r7, #6]
 80054c2:	813c      	strh	r4, [r7, #8]
 80054c4:	817c      	strh	r4, [r7, #10]
 80054c6:	81bc      	strh	r4, [r7, #12]
 80054c8:	81fc      	strh	r4, [r7, #14]
 80054ca:	823c      	strh	r4, [r7, #16]
 80054cc:	827c      	strh	r4, [r7, #18]
 80054ce:	617c      	str	r4, [r7, #20]
 80054d0:	61bc      	str	r4, [r7, #24]
 80054d2:	61fc      	str	r4, [r7, #28]
 80054d4:	843c      	strh	r4, [r7, #32]
 80054d6:	847c      	strh	r4, [r7, #34]	; 0x22
 80054d8:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 80054dc:	f887 9025 	strb.w	r9, [r7, #37]	; 0x25
 80054e0:	f8c5 b114 	str.w	fp, [r5, #276]	; 0x114
 80054e4:	62bc      	str	r4, [r7, #40]	; 0x28
     *           places the elements vertically, ::EAST places the elements horizontally.
     *
     * @see setDirection
     */
    ListLayout(const Direction d = SOUTH)
        : Container(), direction(d), offset(0)
 80054e6:	4b38      	ldr	r3, [pc, #224]	; (80055c8 <_ZN21wifiMenuContainerBaseC1Ev+0x1b8>)
 80054e8:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
 80054ec:	f885 9140 	strb.w	r9, [r5, #320]	; 0x140
 80054f0:	f8a5 4142 	strh.w	r4, [r5, #322]	; 0x142
        rect.width = width;
 80054f4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80054f8:	812b      	strh	r3, [r5, #8]
        rect.height = height;
 80054fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80054fe:	816b      	strh	r3, [r5, #10]
        setX(x);
 8005500:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	215a      	movs	r1, #90	; 0x5a
 8005506:	4630      	mov	r0, r6
 8005508:	4798      	blx	r3
        setY(y);
 800550a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800550c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550e:	2136      	movs	r1, #54	; 0x36
 8005510:	4630      	mov	r0, r6
 8005512:	4798      	blx	r3
 8005514:	f8ad 9004 	strh.w	r9, [sp, #4]
    backgroundBox.setBitmap(touchgfx::Bitmap(BITMAP_ERROR_BOX_ID));
 8005518:	a901      	add	r1, sp, #4
 800551a:	4630      	mov	r0, r6
 800551c:	f010 fc81 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 8005520:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	215a      	movs	r1, #90	; 0x5a
 8005526:	4640      	mov	r0, r8
 8005528:	4798      	blx	r3
        setY(y);
 800552a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800552c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552e:	2136      	movs	r1, #54	; 0x36
 8005530:	4640      	mov	r0, r8
 8005532:	4798      	blx	r3
        setWidth(width);
 8005534:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800553c:	4640      	mov	r0, r8
 800553e:	4798      	blx	r3
        setHeight(height);
 8005540:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005544:	21c6      	movs	r1, #198	; 0xc6
 8005546:	4640      	mov	r0, r8
 8005548:	4798      	blx	r3
     *
     * @see enableVerticalScroll
     */
    void enableHorizontalScroll(bool enable)
    {
        scrollableX = enable;
 800554a:	f885 40fc 	strb.w	r4, [r5, #252]	; 0xfc
    wifiListContainer.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800554e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8005552:	4640      	mov	r0, r8
 8005554:	f00f f80b 	bl	801456e <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>
    wifiList.setDirection(touchgfx::SOUTH);
 8005558:	4649      	mov	r1, r9
 800555a:	4638      	mov	r0, r7
 800555c:	f00e f8b4 	bl	80136c8 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>
        setX(x);
 8005560:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	4621      	mov	r1, r4
 8005568:	4638      	mov	r0, r7
 800556a:	4798      	blx	r3
        setY(y);
 800556c:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	4621      	mov	r1, r4
 8005574:	4638      	mov	r0, r7
 8005576:	4798      	blx	r3
        setWidth(width);
 8005578:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005582:	4638      	mov	r0, r7
 8005584:	4798      	blx	r3
        setHeight(height);
 8005586:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800558a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558c:	213d      	movs	r1, #61	; 0x3d
 800558e:	4638      	mov	r0, r7
 8005590:	4798      	blx	r3
    wifiListContainer.add(wifiList);
 8005592:	4639      	mov	r1, r7
 8005594:	4640      	mov	r0, r8
 8005596:	f00e f9f3 	bl	8013980 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    wifiListContainer.setScrollbarsPermanentlyVisible();
 800559a:	4649      	mov	r1, r9
 800559c:	4640      	mov	r0, r8
 800559e:	f00e fff8 	bl	8014592 <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>
    add(backgroundBox);
 80055a2:	4631      	mov	r1, r6
 80055a4:	4628      	mov	r0, r5
 80055a6:	f00d fd21 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(wifiListContainer);
 80055aa:	4641      	mov	r1, r8
 80055ac:	4628      	mov	r0, r5
 80055ae:	f00d fd1d 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80055b2:	4628      	mov	r0, r5
 80055b4:	b003      	add	sp, #12
 80055b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ba:	bf00      	nop
 80055bc:	08025f7c 	.word	0x08025f7c
 80055c0:	08025a0c 	.word	0x08025a0c
 80055c4:	08026e44 	.word	0x08026e44
 80055c8:	080269a0 	.word	0x080269a0
 80055cc:	08026fe4 	.word	0x08026fe4
 80055d0:	080268e0 	.word	0x080268e0

080055d4 <_ZN14CustomKeyboardD1Ev>:
 */
class CustomKeyboard : public Container
{
public:
    CustomKeyboard();
    virtual ~CustomKeyboard() { }
 80055d4:	b4f0      	push	{r4, r5, r6, r7}
 80055d6:	4a23      	ldr	r2, [pc, #140]	; (8005664 <_ZN14CustomKeyboardD1Ev+0x90>)
 80055d8:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80055da:	4a23      	ldr	r2, [pc, #140]	; (8005668 <_ZN14CustomKeyboardD1Ev+0x94>)
 80055dc:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    }
 80055e0:	4a22      	ldr	r2, [pc, #136]	; (800566c <_ZN14CustomKeyboardD1Ev+0x98>)
 80055e2:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80055e6:	4922      	ldr	r1, [pc, #136]	; (8005670 <_ZN14CustomKeyboardD1Ev+0x9c>)
 80055e8:	f8c0 120c 	str.w	r1, [r0, #524]	; 0x20c
    {
 80055ec:	4a21      	ldr	r2, [pc, #132]	; (8005674 <_ZN14CustomKeyboardD1Ev+0xa0>)
 80055ee:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80055f2:	f8c0 11fc 	str.w	r1, [r0, #508]	; 0x1fc
    {
 80055f6:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80055fa:	f8c0 11ec 	str.w	r1, [r0, #492]	; 0x1ec
    {
 80055fe:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005602:	f8c0 11dc 	str.w	r1, [r0, #476]	; 0x1dc
    {
 8005606:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
class TextArea : public Widget
 800560a:	4e1b      	ldr	r6, [pc, #108]	; (8005678 <_ZN14CustomKeyboardD1Ev+0xa4>)
 800560c:	f8c0 6194 	str.w	r6, [r0, #404]	; 0x194
    {
 8005610:	4d1a      	ldr	r5, [pc, #104]	; (800567c <_ZN14CustomKeyboardD1Ev+0xa8>)
 8005612:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
 8005616:	491a      	ldr	r1, [pc, #104]	; (8005680 <_ZN14CustomKeyboardD1Ev+0xac>)
 8005618:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
    {
 800561c:	4a19      	ldr	r2, [pc, #100]	; (8005684 <_ZN14CustomKeyboardD1Ev+0xb0>)
 800561e:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 * A keyboard with multiple key mappings e.g. lower case alpha, upper case alpha and
 * numeric mappings can be created by implementing callback methods for shift and mode
 * areas in the provided bitmap and then changing the KeyMappingList when those areas
 * are pressed.
 */
class Keyboard : public Container
 8005622:	4c19      	ldr	r4, [pc, #100]	; (8005688 <_ZN14CustomKeyboardD1Ev+0xb4>)
 8005624:	62c4      	str	r4, [r0, #44]	; 0x2c
class Image : public Widget
 8005626:	4c19      	ldr	r4, [pc, #100]	; (800568c <_ZN14CustomKeyboardD1Ev+0xb8>)
 8005628:	f8c0 40e4 	str.w	r4, [r0, #228]	; 0xe4
 800562c:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 8005630:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8005634:	4f16      	ldr	r7, [pc, #88]	; (8005690 <_ZN14CustomKeyboardD1Ev+0xbc>)
 8005636:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 800563a:	4f16      	ldr	r7, [pc, #88]	; (8005694 <_ZN14CustomKeyboardD1Ev+0xc0>)
 800563c:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
 8005640:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 8005644:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
 8005648:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 800564c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8005650:	6644      	str	r4, [r0, #100]	; 0x64
 8005652:	6641      	str	r1, [r0, #100]	; 0x64
 8005654:	6642      	str	r2, [r0, #100]	; 0x64
class Container : public Drawable
 8005656:	4910      	ldr	r1, [pc, #64]	; (8005698 <_ZN14CustomKeyboardD1Ev+0xc4>)
 8005658:	62c1      	str	r1, [r0, #44]	; 0x2c
 800565a:	62c2      	str	r2, [r0, #44]	; 0x2c
 800565c:	6001      	str	r1, [r0, #0]
 800565e:	6002      	str	r2, [r0, #0]
 8005660:	bcf0      	pop	{r4, r5, r6, r7}
 8005662:	4770      	bx	lr
 8005664:	08026058 	.word	0x08026058
 8005668:	08026040 	.word	0x08026040
 800566c:	08026010 	.word	0x08026010
 8005670:	08026028 	.word	0x08026028
 8005674:	08024f94 	.word	0x08024f94
 8005678:	08026c54 	.word	0x08026c54
 800567c:	08024f38 	.word	0x08024f38
 8005680:	08025a0c 	.word	0x08025a0c
 8005684:	08026fe4 	.word	0x08026fe4
 8005688:	08026eb0 	.word	0x08026eb0
 800568c:	08026e44 	.word	0x08026e44
 8005690:	08025c50 	.word	0x08025c50
 8005694:	08026d4c 	.word	0x08026d4c
 8005698:	080268e0 	.word	0x080268e0

0800569c <_ZN14CustomKeyboard18donePressedHandlerEv>:
    uppercaseKeys = !uppercaseKeys;
    setKeyMappingList();
}

void CustomKeyboard::donePressedHandler()
{
 800569c:	b510      	push	{r4, lr}
 800569e:	4604      	mov	r4, r0
    if (doneReturnCallback && doneReturnCallback->isValid())
 80056a0:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
 80056a4:	b150      	cbz	r0, 80056bc <_ZN14CustomKeyboard18donePressedHandlerEv+0x20>
 80056a6:	6803      	ldr	r3, [r0, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	4798      	blx	r3
 80056ac:	b130      	cbz	r0, 80056bc <_ZN14CustomKeyboard18donePressedHandlerEv+0x20>
    {
        doneReturnCallback->execute(buffer);
 80056ae:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
 80056b2:	6803      	ldr	r3, [r0, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f504 718a 	add.w	r1, r4, #276	; 0x114
 80056ba:	4798      	blx	r3
    }
}
 80056bc:	bd10      	pop	{r4, pc}
	...

080056c0 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80056c0:	4a02      	ldr	r2, [pc, #8]	; (80056cc <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev+0xc>)
 80056c2:	6002      	str	r2, [r0, #0]
    }
 80056c4:	4a02      	ldr	r2, [pc, #8]	; (80056d0 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev+0x10>)
 80056c6:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	08026040 	.word	0x08026040
 80056d0:	08026010 	.word	0x08026010

080056d4 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80056d4:	4a02      	ldr	r2, [pc, #8]	; (80056e0 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev+0xc>)
 80056d6:	6002      	str	r2, [r0, #0]
    {
 80056d8:	4a02      	ldr	r2, [pc, #8]	; (80056e4 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev+0x10>)
 80056da:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	08026028 	.word	0x08026028
 80056e4:	08024f94 	.word	0x08024f94

080056e8 <_Z41__static_initialization_and_destruction_0ii>:

    uppercaseKeys = true;
    firstCharacterEntry = true;
    alphaKeys = true;
    setKeyMappingList();
}
 80056e8:	2801      	cmp	r0, #1
 80056ea:	d006      	beq.n	80056fa <_Z41__static_initialization_and_destruction_0ii+0x12>
 80056ec:	b920      	cbnz	r0, 80056f8 <_Z41__static_initialization_and_destruction_0ii+0x10>
 80056ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056f2:	4299      	cmp	r1, r3
 80056f4:	f000 8222 	beq.w	8005b3c <_Z41__static_initialization_and_destruction_0ii+0x454>
 80056f8:	4770      	bx	lr
 80056fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056fe:	4299      	cmp	r1, r3
 8005700:	d1f4      	bne.n	80056ec <_Z41__static_initialization_and_destruction_0ii+0x4>
 8005702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8005706:	4bf0      	ldr	r3, [pc, #960]	; (8005ac8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8005708:	2201      	movs	r2, #1
 800570a:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800570c:	240c      	movs	r4, #12
 800570e:	805c      	strh	r4, [r3, #2]
 8005710:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8005714:	f8a3 e004 	strh.w	lr, [r3, #4]
 8005718:	2224      	movs	r2, #36	; 0x24
 800571a:	80da      	strh	r2, [r3, #6]
 800571c:	811a      	strh	r2, [r3, #8]
 800571e:	f04f 0c06 	mov.w	ip, #6
 8005722:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8005726:	2502      	movs	r5, #2
 8005728:	731d      	strb	r5, [r3, #12]
 800572a:	f04f 0a36 	mov.w	sl, #54	; 0x36
 800572e:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8005732:	f8a3 e010 	strh.w	lr, [r3, #16]
 8005736:	825a      	strh	r2, [r3, #18]
 8005738:	829a      	strh	r2, [r3, #20]
 800573a:	f8a3 c016 	strh.w	ip, [r3, #22]
 800573e:	f04f 0503 	mov.w	r5, #3
 8005742:	761d      	strb	r5, [r3, #24]
 8005744:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005748:	835e      	strh	r6, [r3, #26]
 800574a:	f8a3 e01c 	strh.w	lr, [r3, #28]
 800574e:	83da      	strh	r2, [r3, #30]
 8005750:	841a      	strh	r2, [r3, #32]
 8005752:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8005756:	f04f 0504 	mov.w	r5, #4
 800575a:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 800575e:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8005762:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8005766:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 800576a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800576c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800576e:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8005772:	f04f 0505 	mov.w	r5, #5
 8005776:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 800577a:	27b4      	movs	r7, #180	; 0xb4
 800577c:	865f      	strh	r7, [r3, #50]	; 0x32
 800577e:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8005782:	86da      	strh	r2, [r3, #54]	; 0x36
 8005784:	871a      	strh	r2, [r3, #56]	; 0x38
 8005786:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 800578a:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 800578e:	f04f 05de 	mov.w	r5, #222	; 0xde
 8005792:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8005794:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8005798:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800579c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80057a0:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 80057a4:	f04f 0907 	mov.w	r9, #7
 80057a8:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 80057ac:	f44f 7984 	mov.w	r9, #264	; 0x108
 80057b0:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80057b4:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 80057b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80057bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80057c0:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 80057c4:	f04f 0b08 	mov.w	fp, #8
 80057c8:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80057cc:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80057d0:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80057d4:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 80057d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80057dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057e0:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 80057e4:	2509      	movs	r5, #9
 80057e6:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 80057ea:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80057ee:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80057f2:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 80057f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80057fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80057fe:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8005802:	250a      	movs	r5, #10
 8005804:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8005808:	f44f 75c3 	mov.w	r5, #390	; 0x186
 800580c:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8005810:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8005814:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005818:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800581c:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8005820:	f04f 090b 	mov.w	r9, #11
 8005824:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8005828:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 800582c:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8005830:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8005834:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005838:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800583c:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8005840:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8005844:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8005848:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 800584c:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8005850:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005854:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005858:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 800585c:	f04f 060d 	mov.w	r6, #13
 8005860:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8005864:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8005868:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 800586c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005870:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005874:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8005878:	f04f 0a0e 	mov.w	sl, #14
 800587c:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8005880:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005884:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8005888:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 800588c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005890:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005894:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8005898:	f04f 0a0f 	mov.w	sl, #15
 800589c:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 80058a0:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 80058a4:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 80058a8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80058ac:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80058b0:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 80058b4:	f04f 0a10 	mov.w	sl, #16
 80058b8:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 80058bc:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 80058c0:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 80058c4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80058c8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80058cc:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 80058d0:	f04f 0a11 	mov.w	sl, #17
 80058d4:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80058d8:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80058dc:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80058e0:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 80058e4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80058e8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80058ec:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 80058f0:	f04f 0a12 	mov.w	sl, #18
 80058f4:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80058f8:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80058fc:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8005900:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8005904:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8005908:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 800590c:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8005910:	f04f 0a13 	mov.w	sl, #19
 8005914:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8005918:	f44f 7a99 	mov.w	sl, #306	; 0x132
 800591c:	4656      	mov	r6, sl
 800591e:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8005922:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8005926:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 800592a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 800592e:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8005932:	f04f 0a14 	mov.w	sl, #20
 8005936:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 800593a:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 800593e:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8005942:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8005946:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800594a:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 800594e:	f04f 0a15 	mov.w	sl, #21
 8005952:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8005956:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 800595a:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 800595e:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8005962:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8005966:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 800596a:	f04f 0a16 	mov.w	sl, #22
 800596e:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8005972:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8005976:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 800597a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800597e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8005982:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8005986:	f04f 0e17 	mov.w	lr, #23
 800598a:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 800598e:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8005992:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8005996:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 800599a:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 800599e:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 80059a2:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 80059a6:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 80059aa:	f04f 0918 	mov.w	r9, #24
 80059ae:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 80059b2:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 80059b6:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 80059ba:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 80059be:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80059c2:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 80059c6:	f04f 0819 	mov.w	r8, #25
 80059ca:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80059ce:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80059d2:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 80059d6:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80059da:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80059de:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 80059e2:	271a      	movs	r7, #26
 80059e4:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80059e8:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80059ec:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 80059f0:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 80059f4:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80059f8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 80059fc:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8005a00:	271b      	movs	r7, #27
 8005a02:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8005a06:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8005a0a:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8005a0e:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8005a12:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8005a16:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8005a1a:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8005a1e:	271c      	movs	r7, #28
 8005a20:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8005a24:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8005a28:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8005a2c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8005a30:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8005a34:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8005a38:	271d      	movs	r7, #29
 8005a3a:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8005a3e:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8005a42:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8005a46:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8005a4a:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8005a4e:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8005a52:	271e      	movs	r7, #30
 8005a54:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8005a58:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005a5c:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8005a60:	26e2      	movs	r6, #226	; 0xe2
 8005a62:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8005a66:	f44f 7790 	mov.w	r7, #288	; 0x120
 8005a6a:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8005a6e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8005a72:	f04f 0708 	mov.w	r7, #8
 8005a76:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8005a7a:	4b14      	ldr	r3, [pc, #80]	; (8005acc <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8005a7c:	801c      	strh	r4, [r3, #0]
 8005a7e:	f8a3 e002 	strh.w	lr, [r3, #2]
 8005a82:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8005a86:	f8a3 c004 	strh.w	ip, [r3, #4]
 8005a8a:	80da      	strh	r2, [r3, #6]
};
 8005a8c:	2700      	movs	r7, #0
 8005a8e:	609f      	str	r7, [r3, #8]
 8005a90:	f04f 0804 	mov.w	r8, #4
 8005a94:	f8a3 800c 	strh.w	r8, [r3, #12]
 8005a98:	821d      	strh	r5, [r3, #16]
 8005a9a:	f8a3 e012 	strh.w	lr, [r3, #18]
 8005a9e:	f8a3 c014 	strh.w	ip, [r3, #20]
 8005aa2:	82da      	strh	r2, [r3, #22]
 8005aa4:	619f      	str	r7, [r3, #24]
 8005aa6:	f04f 0e03 	mov.w	lr, #3
 8005aaa:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8005aae:	841c      	strh	r4, [r3, #32]
 8005ab0:	845e      	strh	r6, [r3, #34]	; 0x22
 8005ab2:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8005ab6:	84da      	strh	r2, [r3, #38]	; 0x26
 8005ab8:	629f      	str	r7, [r3, #40]	; 0x28
 8005aba:	f04f 0407 	mov.w	r4, #7
 8005abe:	859c      	strh	r4, [r3, #44]	; 0x2c
 8005ac0:	861d      	strh	r5, [r3, #48]	; 0x30
 8005ac2:	865e      	strh	r6, [r3, #50]	; 0x32
 8005ac4:	e004      	b.n	8005ad0 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8005ac6:	bf00      	nop
 8005ac8:	24005f3c 	.word	0x24005f3c
 8005acc:	24005edc 	.word	0x24005edc
 8005ad0:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8005ad4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ad6:	639f      	str	r7, [r3, #56]	; 0x38
 8005ad8:	f04f 0205 	mov.w	r2, #5
 8005adc:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005ade:	4604      	mov	r4, r0
 8005ae0:	3340      	adds	r3, #64	; 0x40
 8005ae2:	2c00      	cmp	r4, #0
 8005ae4:	db0b      	blt.n	8005afe <_Z41__static_initialization_and_destruction_0ii+0x416>
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	605a      	str	r2, [r3, #4]
 8005aec:	609a      	str	r2, [r3, #8]
 8005aee:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8005af0:	801a      	strh	r2, [r3, #0]
 8005af2:	805a      	strh	r2, [r3, #2]
 8005af4:	809a      	strh	r2, [r3, #4]
 8005af6:	80da      	strh	r2, [r3, #6]
 8005af8:	3310      	adds	r3, #16
 8005afa:	3c01      	subs	r4, #1
 8005afc:	e7f1      	b.n	8005ae2 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005afe:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005b00:	2205      	movs	r2, #5
 8005b02:	825a      	strh	r2, [r3, #18]
 8005b04:	222d      	movs	r2, #45	; 0x2d
 8005b06:	829a      	strh	r2, [r3, #20]
 8005b08:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8005b0c:	82da      	strh	r2, [r3, #22]
 8005b0e:	2246      	movs	r2, #70	; 0x46
 8005b10:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8005b12:	4a0d      	ldr	r2, [pc, #52]	; (8005b48 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005b14:	61da      	str	r2, [r3, #28]
 8005b16:	2200      	movs	r2, #0
 8005b18:	841a      	strh	r2, [r3, #32]
        : color(col)
 8005b1a:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b24:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8005b26:	b918      	cbnz	r0, 8005b30 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b2c:	4299      	cmp	r1, r3
 8005b2e:	d001      	beq.n	8005b34 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8005b34:	4b03      	ldr	r3, [pc, #12]	; (8005b44 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005b36:	4a04      	ldr	r2, [pc, #16]	; (8005b48 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005b38:	61da      	str	r2, [r3, #28]
 8005b3a:	e7f9      	b.n	8005b30 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005b3c:	4b01      	ldr	r3, [pc, #4]	; (8005b44 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005b3e:	4a02      	ldr	r2, [pc, #8]	; (8005b48 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005b40:	61da      	str	r2, [r3, #28]
 8005b42:	4770      	bx	lr
 8005b44:	24000010 	.word	0x24000010
 8005b48:	08024f38 	.word	0x08024f38

08005b4c <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt>:
    virtual void execute(T1 t1)
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8005b50:	6844      	ldr	r4, [r0, #4]
 8005b52:	68c2      	ldr	r2, [r0, #12]
 8005b54:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8005b58:	f012 0f01 	tst.w	r2, #1
 8005b5c:	d102      	bne.n	8005b64 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt+0x18>
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4798      	blx	r3
    }
 8005b62:	bd10      	pop	{r4, pc}
 8005b64:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8005b68:	f854 200c 	ldr.w	r2, [r4, ip]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	58d3      	ldr	r3, [r2, r3]
 8005b70:	e7f6      	b.n	8005b60 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt+0x14>

08005b72 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005b72:	6843      	ldr	r3, [r0, #4]
 8005b74:	b14b      	cbz	r3, 8005b8a <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x18>
 8005b76:	6883      	ldr	r3, [r0, #8]
 8005b78:	b10b      	cbz	r3, 8005b7e <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0xc>
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	4770      	bx	lr
 8005b7e:	68c3      	ldr	r3, [r0, #12]
 8005b80:	f013 0f01 	tst.w	r3, #1
 8005b84:	d003      	beq.n	8005b8e <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x1c>
 8005b86:	2001      	movs	r0, #1
 8005b88:	4770      	bx	lr
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	4770      	bx	lr
 8005b8e:	2000      	movs	r0, #0
    }
 8005b90:	4770      	bx	lr

08005b92 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv>:
    virtual void execute()
 8005b92:	b508      	push	{r3, lr}
 8005b94:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8005b96:	6841      	ldr	r1, [r0, #4]
 8005b98:	68c2      	ldr	r2, [r0, #12]
 8005b9a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8005b9e:	f012 0f01 	tst.w	r2, #1
 8005ba2:	d102      	bne.n	8005baa <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv+0x18>
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	4798      	blx	r3
    }
 8005ba8:	bd08      	pop	{r3, pc}
 8005baa:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8005bae:	f851 200c 	ldr.w	r2, [r1, ip]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	58d3      	ldr	r3, [r2, r3]
 8005bb6:	e7f6      	b.n	8005ba6 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv+0x14>

08005bb8 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005bb8:	6843      	ldr	r3, [r0, #4]
 8005bba:	b14b      	cbz	r3, 8005bd0 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x18>
 8005bbc:	6883      	ldr	r3, [r0, #8]
 8005bbe:	b10b      	cbz	r3, 8005bc4 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0xc>
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	4770      	bx	lr
 8005bc4:	68c3      	ldr	r3, [r0, #12]
 8005bc6:	f013 0f01 	tst.w	r3, #1
 8005bca:	d003      	beq.n	8005bd4 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x1c>
 8005bcc:	2001      	movs	r0, #1
 8005bce:	4770      	bx	lr
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	4770      	bx	lr
 8005bd4:	2000      	movs	r0, #0
    }
 8005bd6:	4770      	bx	lr

08005bd8 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev+0x18>)
 8005bde:	6003      	str	r3, [r0, #0]
    {
 8005be0:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev+0x1c>)
 8005be2:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005be4:	2110      	movs	r1, #16
 8005be6:	f01d fb26 	bl	8023236 <_ZdlPvj>
 8005bea:	4620      	mov	r0, r4
 8005bec:	bd10      	pop	{r4, pc}
 8005bee:	bf00      	nop
 8005bf0:	08026028 	.word	0x08026028
 8005bf4:	08024f94 	.word	0x08024f94

08005bf8 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev+0x18>)
 8005bfe:	6003      	str	r3, [r0, #0]
    }
 8005c00:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev+0x1c>)
 8005c02:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005c04:	2110      	movs	r1, #16
 8005c06:	f01d fb16 	bl	8023236 <_ZdlPvj>
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	bd10      	pop	{r4, pc}
 8005c0e:	bf00      	nop
 8005c10:	08026040 	.word	0x08026040
 8005c14:	08026010 	.word	0x08026010

08005c18 <_ZN14CustomKeyboardD0Ev>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4b25      	ldr	r3, [pc, #148]	; (8005cb4 <_ZN14CustomKeyboardD0Ev+0x9c>)
 8005c1e:	6003      	str	r3, [r0, #0]
 8005c20:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <_ZN14CustomKeyboardD0Ev+0xa0>)
 8005c22:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    }
 8005c26:	4b25      	ldr	r3, [pc, #148]	; (8005cbc <_ZN14CustomKeyboardD0Ev+0xa4>)
 8005c28:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c2c:	4a24      	ldr	r2, [pc, #144]	; (8005cc0 <_ZN14CustomKeyboardD0Ev+0xa8>)
 8005c2e:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
    {
 8005c32:	4b24      	ldr	r3, [pc, #144]	; (8005cc4 <_ZN14CustomKeyboardD0Ev+0xac>)
 8005c34:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c38:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
    {
 8005c3c:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c40:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
    {
 8005c44:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c48:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
    {
 8005c4c:	f8c0 31dc 	str.w	r3, [r0, #476]	; 0x1dc
 8005c50:	4e1d      	ldr	r6, [pc, #116]	; (8005cc8 <_ZN14CustomKeyboardD0Ev+0xb0>)
 8005c52:	f8c0 6194 	str.w	r6, [r0, #404]	; 0x194
 8005c56:	4d1d      	ldr	r5, [pc, #116]	; (8005ccc <_ZN14CustomKeyboardD0Ev+0xb4>)
 8005c58:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
 8005c5c:	4a1c      	ldr	r2, [pc, #112]	; (8005cd0 <_ZN14CustomKeyboardD0Ev+0xb8>)
 8005c5e:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <_ZN14CustomKeyboardD0Ev+0xbc>)
 8005c64:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
 8005c68:	491b      	ldr	r1, [pc, #108]	; (8005cd8 <_ZN14CustomKeyboardD0Ev+0xc0>)
 8005c6a:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005c6c:	491b      	ldr	r1, [pc, #108]	; (8005cdc <_ZN14CustomKeyboardD0Ev+0xc4>)
 8005c6e:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 8005c72:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 8005c76:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8005c7a:	4f19      	ldr	r7, [pc, #100]	; (8005ce0 <_ZN14CustomKeyboardD0Ev+0xc8>)
 8005c7c:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8005c80:	4f18      	ldr	r7, [pc, #96]	; (8005ce4 <_ZN14CustomKeyboardD0Ev+0xcc>)
 8005c82:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
 8005c86:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 8005c8a:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
 8005c8e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8005c92:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8005c96:	6641      	str	r1, [r0, #100]	; 0x64
 8005c98:	6642      	str	r2, [r0, #100]	; 0x64
 8005c9a:	6643      	str	r3, [r0, #100]	; 0x64
 8005c9c:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <_ZN14CustomKeyboardD0Ev+0xd0>)
 8005c9e:	62c2      	str	r2, [r0, #44]	; 0x2c
 8005ca0:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005ca2:	6002      	str	r2, [r0, #0]
 8005ca4:	6003      	str	r3, [r0, #0]
 8005ca6:	f44f 710d 	mov.w	r1, #564	; 0x234
 8005caa:	f01d fac4 	bl	8023236 <_ZdlPvj>
 8005cae:	4620      	mov	r0, r4
 8005cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	08026058 	.word	0x08026058
 8005cb8:	08026040 	.word	0x08026040
 8005cbc:	08026010 	.word	0x08026010
 8005cc0:	08026028 	.word	0x08026028
 8005cc4:	08024f94 	.word	0x08024f94
 8005cc8:	08026c54 	.word	0x08026c54
 8005ccc:	08024f38 	.word	0x08024f38
 8005cd0:	08025a0c 	.word	0x08025a0c
 8005cd4:	08026fe4 	.word	0x08026fe4
 8005cd8:	08026eb0 	.word	0x08026eb0
 8005cdc:	08026e44 	.word	0x08026e44
 8005ce0:	08025c50 	.word	0x08025c50
 8005ce4:	08026d4c 	.word	0x08026d4c
 8005ce8:	080268e0 	.word	0x080268e0

08005cec <_ZN14CustomKeyboard17setKeyMappingListEv>:
{
 8005cec:	b530      	push	{r4, r5, lr}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	4604      	mov	r4, r0
    if (alphaKeys)
 8005cf2:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
 8005cf6:	b1d3      	cbz	r3, 8005d2e <_ZN14CustomKeyboard17setKeyMappingListEv+0x42>
        : typedTextId(id)
 8005cf8:	4d1a      	ldr	r5, [pc, #104]	; (8005d64 <_ZN14CustomKeyboard17setKeyMappingListEv+0x78>)
 8005cfa:	9500      	str	r5, [sp, #0]
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	f8ad 3004 	strh.w	r3, [sp, #4]
        modeBtnTextArea.setTypedText(TypedText(T_ALPHAMODE));
 8005d02:	4669      	mov	r1, sp
 8005d04:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 8005d08:	f00f feb6 	bl	8015a78 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005d0c:	9500      	str	r5, [sp, #0]
        if (uppercaseKeys)
 8005d0e:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8005d12:	b133      	cbz	r3, 8005d22 <_ZN14CustomKeyboard17setKeyMappingListEv+0x36>
            keyboard.setKeymappingList(&keyMappingListAlphaUpper);
 8005d14:	4914      	ldr	r1, [pc, #80]	; (8005d68 <_ZN14CustomKeyboard17setKeyMappingListEv+0x7c>)
 8005d16:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005d1a:	f010 fc7f 	bl	801661c <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
}
 8005d1e:	b005      	add	sp, #20
 8005d20:	bd30      	pop	{r4, r5, pc}
            keyboard.setKeymappingList(&keyMappingListAlphaLower);
 8005d22:	4912      	ldr	r1, [pc, #72]	; (8005d6c <_ZN14CustomKeyboard17setKeyMappingListEv+0x80>)
 8005d24:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005d28:	f010 fc78 	bl	801661c <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
 8005d2c:	e7f7      	b.n	8005d1e <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
        : typedTextId(id)
 8005d2e:	4d0d      	ldr	r5, [pc, #52]	; (8005d64 <_ZN14CustomKeyboard17setKeyMappingListEv+0x78>)
 8005d30:	9502      	str	r5, [sp, #8]
 8005d32:	2301      	movs	r3, #1
 8005d34:	f8ad 300c 	strh.w	r3, [sp, #12]
        modeBtnTextArea.setTypedText(TypedText(T_NUMMODE));
 8005d38:	a902      	add	r1, sp, #8
 8005d3a:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 8005d3e:	f00f fe9b 	bl	8015a78 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005d42:	9502      	str	r5, [sp, #8]
        if (uppercaseKeys)
 8005d44:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8005d48:	b12b      	cbz	r3, 8005d56 <_ZN14CustomKeyboard17setKeyMappingListEv+0x6a>
            keyboard.setKeymappingList(&keyMappingListNumUpper);
 8005d4a:	4909      	ldr	r1, [pc, #36]	; (8005d70 <_ZN14CustomKeyboard17setKeyMappingListEv+0x84>)
 8005d4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005d50:	f010 fc64 	bl	801661c <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
 8005d54:	e7e3      	b.n	8005d1e <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8005d56:	4907      	ldr	r1, [pc, #28]	; (8005d74 <_ZN14CustomKeyboard17setKeyMappingListEv+0x88>)
 8005d58:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005d5c:	f010 fc5e 	bl	801661c <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
}
 8005d60:	e7dd      	b.n	8005d1e <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
 8005d62:	bf00      	nop
 8005d64:	08024f38 	.word	0x08024f38
 8005d68:	080262d8 	.word	0x080262d8
 8005d6c:	080262d0 	.word	0x080262d0
 8005d70:	080262c8 	.word	0x080262c8
 8005d74:	080262c0 	.word	0x080262c0

08005d78 <_ZN14CustomKeyboard23backspacePressedHandlerEv>:
{
 8005d78:	b538      	push	{r3, r4, r5, lr}
     *
     * @see setBufferPosition
     */
    uint16_t getBufferPosition()
    {
        return bufferPosition;
 8005d7a:	f8b0 5062 	ldrh.w	r5, [r0, #98]	; 0x62
    if (pos > 0)
 8005d7e:	b905      	cbnz	r5, 8005d82 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0xa>
}
 8005d80:	bd38      	pop	{r3, r4, r5, pc}
 8005d82:	4604      	mov	r4, r0
        buffer[pos - 1] = 0;
 8005d84:	1e69      	subs	r1, r5, #1
 8005d86:	f105 0387 	add.w	r3, r5, #135	; 0x87
 8005d8a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005d8e:	2200      	movs	r2, #0
 8005d90:	809a      	strh	r2, [r3, #4]
        keyboard.setBufferPosition(pos - 1);
 8005d92:	b289      	uxth	r1, r1
 8005d94:	302c      	adds	r0, #44	; 0x2c
 8005d96:	f010 fc3d 	bl	8016614 <_ZN8touchgfx8Keyboard17setBufferPositionEt>
        if (1 == pos)
 8005d9a:	2d01      	cmp	r5, #1
 8005d9c:	d1f0      	bne.n	8005d80 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x8>
            firstCharacterEntry = true;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
            uppercaseKeys = true;
 8005da4:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
            setKeyMappingList();
 8005da8:	4620      	mov	r0, r4
 8005daa:	f7ff ff9f 	bl	8005cec <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005dae:	e7e7      	b.n	8005d80 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x8>

08005db0 <_ZN14CustomKeyboard22capslockPressedHandlerEv>:
{
 8005db0:	b508      	push	{r3, lr}
    uppercaseKeys = !uppercaseKeys;
 8005db2:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
 8005db6:	f082 0201 	eor.w	r2, r2, #1
 8005dba:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    setKeyMappingList();
 8005dbe:	f7ff ff95 	bl	8005cec <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005dc2:	bd08      	pop	{r3, pc}

08005dc4 <_ZN14CustomKeyboard18modePressedHandlerEv>:
{
 8005dc4:	b508      	push	{r3, lr}
    alphaKeys = !alphaKeys;
 8005dc6:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
 8005dca:	f083 0301 	eor.w	r3, r3, #1
 8005dce:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (firstCharacterEntry && alphaKeys)
 8005dd2:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
 8005dd6:	b122      	cbz	r2, 8005de2 <_ZN14CustomKeyboard18modePressedHandlerEv+0x1e>
 8005dd8:	b11b      	cbz	r3, 8005de2 <_ZN14CustomKeyboard18modePressedHandlerEv+0x1e>
        uppercaseKeys = true;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
 8005de0:	e002      	b.n	8005de8 <_ZN14CustomKeyboard18modePressedHandlerEv+0x24>
        uppercaseKeys = false;
 8005de2:	2300      	movs	r3, #0
 8005de4:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    setKeyMappingList();
 8005de8:	f7ff ff80 	bl	8005cec <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005dec:	bd08      	pop	{r3, pc}

08005dee <_ZN14CustomKeyboard17keyPressedhandlerEt>:
{
 8005dee:	b508      	push	{r3, lr}
    if (firstCharacterEntry && keyChar != 0)
 8005df0:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
 8005df4:	b103      	cbz	r3, 8005df8 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xa>
 8005df6:	b901      	cbnz	r1, 8005dfa <_ZN14CustomKeyboard17keyPressedhandlerEt+0xc>
}
 8005df8:	bd08      	pop	{r3, pc}
        firstCharacterEntry = false;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f880 322e 	strb.w	r3, [r0, #558]	; 0x22e
        uppercaseKeys = false;
 8005e00:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
        setKeyMappingList();
 8005e04:	f7ff ff72 	bl	8005cec <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005e08:	e7f6      	b.n	8005df8 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xa>
	...

08005e0c <_ZN14CustomKeyboardC1Ev>:
CustomKeyboard::CustomKeyboard() : keyboard(),
 8005e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e10:	b08d      	sub	sp, #52	; 0x34
 8005e12:	4604      	mov	r4, r0
          visible(true)
 8005e14:	f8df 9290 	ldr.w	r9, [pc, #656]	; 80060a8 <_ZN14CustomKeyboardC1Ev+0x29c>
 8005e18:	f8c0 9000 	str.w	r9, [r0]
        : x(0), y(0), width(0), height(0)
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	8085      	strh	r5, [r0, #4]
 8005e20:	80c5      	strh	r5, [r0, #6]
 8005e22:	8105      	strh	r5, [r0, #8]
 8005e24:	8145      	strh	r5, [r0, #10]
 8005e26:	8185      	strh	r5, [r0, #12]
 8005e28:	81c5      	strh	r5, [r0, #14]
 8005e2a:	8205      	strh	r5, [r0, #16]
 8005e2c:	8245      	strh	r5, [r0, #18]
 8005e2e:	6145      	str	r5, [r0, #20]
 8005e30:	6185      	str	r5, [r0, #24]
 8005e32:	61c5      	str	r5, [r0, #28]
 8005e34:	8405      	strh	r5, [r0, #32]
 8005e36:	8445      	strh	r5, [r0, #34]	; 0x22
 8005e38:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8005e3c:	f04f 0801 	mov.w	r8, #1
 8005e40:	f880 8025 	strb.w	r8, [r0, #37]	; 0x25
          firstChild(0)
 8005e44:	4b8a      	ldr	r3, [pc, #552]	; (8006070 <_ZN14CustomKeyboardC1Ev+0x264>)
 8005e46:	6003      	str	r3, [r0, #0]
 8005e48:	6285      	str	r5, [r0, #40]	; 0x28
    firstCharacterEntry(false)
 8005e4a:	4607      	mov	r7, r0
 8005e4c:	4b89      	ldr	r3, [pc, #548]	; (8006074 <_ZN14CustomKeyboardC1Ev+0x268>)
 8005e4e:	f847 3b2c 	str.w	r3, [r7], #44
 8005e52:	4638      	mov	r0, r7
 8005e54:	f010 f910 	bl	8016078 <_ZN8touchgfx8KeyboardC1Ev>
 8005e58:	f504 76ca 	add.w	r6, r4, #404	; 0x194
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005e5c:	2226      	movs	r2, #38	; 0x26
 8005e5e:	4629      	mov	r1, r5
 8005e60:	4630      	mov	r0, r6
 8005e62:	f01d fbad 	bl	80235c0 <memset>
 8005e66:	f8c4 9194 	str.w	r9, [r4, #404]	; 0x194
 8005e6a:	80b5      	strh	r5, [r6, #4]
 8005e6c:	80f5      	strh	r5, [r6, #6]
 8005e6e:	8135      	strh	r5, [r6, #8]
 8005e70:	8175      	strh	r5, [r6, #10]
 8005e72:	81b5      	strh	r5, [r6, #12]
 8005e74:	81f5      	strh	r5, [r6, #14]
 8005e76:	8235      	strh	r5, [r6, #16]
 8005e78:	8275      	strh	r5, [r6, #18]
 8005e7a:	6175      	str	r5, [r6, #20]
 8005e7c:	61b5      	str	r5, [r6, #24]
 8005e7e:	61f5      	str	r5, [r6, #28]
 8005e80:	8435      	strh	r5, [r6, #32]
 8005e82:	8475      	strh	r5, [r6, #34]	; 0x22
 8005e84:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
 8005e88:	f886 8025 	strb.w	r8, [r6, #37]	; 0x25
 8005e8c:	4b7a      	ldr	r3, [pc, #488]	; (8006078 <_ZN14CustomKeyboardC1Ev+0x26c>)
 8005e8e:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8005e92:	4b7a      	ldr	r3, [pc, #488]	; (800607c <_ZN14CustomKeyboardC1Ev+0x270>)
 8005e94:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
        : typedTextId(id)
 8005e98:	4b79      	ldr	r3, [pc, #484]	; (8006080 <_ZN14CustomKeyboardC1Ev+0x274>)
 8005e9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ea0:	85b3      	strh	r3, [r6, #44]	; 0x2c
        : color(col)
 8005ea2:	6335      	str	r5, [r6, #48]	; 0x30
 8005ea4:	86b5      	strh	r5, [r6, #52]	; 0x34
 8005ea6:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
 8005eaa:	f886 5037 	strb.w	r5, [r6, #55]	; 0x37
 8005eae:	f886 5038 	strb.w	r5, [r6, #56]	; 0x38
 8005eb2:	f886 5039 	strb.w	r5, [r6, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005eb6:	87b5      	strh	r5, [r6, #60]	; 0x3c
 8005eb8:	87f5      	strh	r5, [r6, #62]	; 0x3e
 8005eba:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
 8005ebe:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
              text(0)
 8005ec2:	6475      	str	r5, [r6, #68]	; 0x44
 8005ec4:	4b6f      	ldr	r3, [pc, #444]	; (8006084 <_ZN14CustomKeyboardC1Ev+0x278>)
 8005ec6:	9302      	str	r3, [sp, #8]
 8005ec8:	9503      	str	r5, [sp, #12]
 8005eca:	466b      	mov	r3, sp
 8005ecc:	aa02      	add	r2, sp, #8
 8005ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ed2:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005ed6:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80060ac <_ZN14CustomKeyboardC1Ev+0x2a0>
 8005eda:	f8c4 c1dc 	str.w	ip, [r4, #476]	; 0x1dc
        : pobject(pObject), pmemfun(pmemfun_0)
 8005ede:	4a6a      	ldr	r2, [pc, #424]	; (8006088 <_ZN14CustomKeyboardC1Ev+0x27c>)
 8005ee0:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
 8005ee4:	f8c4 41e0 	str.w	r4, [r4, #480]	; 0x1e0
 8005ee8:	f504 7ef2 	add.w	lr, r4, #484	; 0x1e4
 8005eec:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ef0:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005ef4:	4965      	ldr	r1, [pc, #404]	; (800608c <_ZN14CustomKeyboardC1Ev+0x280>)
 8005ef6:	9104      	str	r1, [sp, #16]
 8005ef8:	9505      	str	r5, [sp, #20]
 8005efa:	a904      	add	r1, sp, #16
 8005efc:	c903      	ldmia	r1, {r0, r1}
 8005efe:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005f02:	f8c4 c1ec 	str.w	ip, [r4, #492]	; 0x1ec
        : pobject(pObject), pmemfun(pmemfun_0)
 8005f06:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
 8005f0a:	f8c4 41f0 	str.w	r4, [r4, #496]	; 0x1f0
 8005f0e:	f504 7efa 	add.w	lr, r4, #500	; 0x1f4
 8005f12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f16:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005f1a:	495d      	ldr	r1, [pc, #372]	; (8006090 <_ZN14CustomKeyboardC1Ev+0x284>)
 8005f1c:	9106      	str	r1, [sp, #24]
 8005f1e:	9507      	str	r5, [sp, #28]
 8005f20:	a906      	add	r1, sp, #24
 8005f22:	c903      	ldmia	r1, {r0, r1}
 8005f24:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005f28:	f8c4 c1fc 	str.w	ip, [r4, #508]	; 0x1fc
        : pobject(pObject), pmemfun(pmemfun_0)
 8005f2c:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
 8005f30:	f8c4 4200 	str.w	r4, [r4, #512]	; 0x200
 8005f34:	f504 7e01 	add.w	lr, r4, #516	; 0x204
 8005f38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f3c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005f40:	4954      	ldr	r1, [pc, #336]	; (8006094 <_ZN14CustomKeyboardC1Ev+0x288>)
 8005f42:	9108      	str	r1, [sp, #32]
 8005f44:	9509      	str	r5, [sp, #36]	; 0x24
 8005f46:	a908      	add	r1, sp, #32
 8005f48:	c903      	ldmia	r1, {r0, r1}
 8005f4a:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005f4e:	f8c4 c20c 	str.w	ip, [r4, #524]	; 0x20c
        : pobject(pObject), pmemfun(pmemfun_0)
 8005f52:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 8005f56:	f8c4 4210 	str.w	r4, [r4, #528]	; 0x210
 8005f5a:	f504 7205 	add.w	r2, r4, #532	; 0x214
 8005f5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f62:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f66:	4a4c      	ldr	r2, [pc, #304]	; (8006098 <_ZN14CustomKeyboardC1Ev+0x28c>)
 8005f68:	920a      	str	r2, [sp, #40]	; 0x28
 8005f6a:	950b      	str	r5, [sp, #44]	; 0x2c
 8005f6c:	aa0c      	add	r2, sp, #48	; 0x30
 8005f6e:	e912 0003 	ldmdb	r2, {r0, r1}
 8005f72:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<T1, void, void>
 8005f76:	4a49      	ldr	r2, [pc, #292]	; (800609c <_ZN14CustomKeyboardC1Ev+0x290>)
 8005f78:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
        : pobject(pObject), pmemfun(pmemfun_1)
 8005f7c:	4a48      	ldr	r2, [pc, #288]	; (80060a0 <_ZN14CustomKeyboardC1Ev+0x294>)
 8005f7e:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 8005f82:	f8c4 4220 	str.w	r4, [r4, #544]	; 0x220
 8005f86:	f504 7209 	add.w	r2, r4, #548	; 0x224
 8005f8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f8e:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f92:	f884 822c 	strb.w	r8, [r4, #556]	; 0x22c
 8005f96:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
 8005f9a:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
    layout.callbackAreaArray[0].callback = &capslockPressed;
 8005f9e:	4941      	ldr	r1, [pc, #260]	; (80060a4 <_ZN14CustomKeyboardC1Ev+0x298>)
 8005fa0:	68cb      	ldr	r3, [r1, #12]
 8005fa2:	f504 72ee 	add.w	r2, r4, #476	; 0x1dc
 8005fa6:	609a      	str	r2, [r3, #8]
    layout.callbackAreaArray[1].callback = &backspacePressed;
 8005fa8:	68cb      	ldr	r3, [r1, #12]
 8005faa:	f504 72f6 	add.w	r2, r4, #492	; 0x1ec
 8005fae:	619a      	str	r2, [r3, #24]
    layout.callbackAreaArray[2].callback = &modePressed;
 8005fb0:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
 8005fb4:	629a      	str	r2, [r3, #40]	; 0x28
    layout.callbackAreaArray[3].callback = &donePressed;
 8005fb6:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8005fba:	639a      	str	r2, [r3, #56]	; 0x38
    keyboard.setLayout(&layout);
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	f010 f8d4 	bl	801616a <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>
    keyboard.setKeyListener(keyPressed);
 8005fc2:	f504 7307 	add.w	r3, r4, #540	; 0x21c
     *
     * @note Backspace, shift and mode keys report a 0 as value.
     */
    void setKeyListener(GenericCallback<Unicode::UnicodeChar>& callback)
    {
        keyListener = &callback;
 8005fc6:	65a3      	str	r3, [r4, #88]	; 0x58
        setX(x);
 8005fc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fcc:	4629      	mov	r1, r5
 8005fce:	4638      	mov	r0, r7
 8005fd0:	4798      	blx	r3
        setY(y);
 8005fd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	4638      	mov	r0, r7
 8005fda:	4798      	blx	r3
        setWidth(width);
 8005fdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	4798      	blx	r3
        setHeight(height);
 8005fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fec:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	4798      	blx	r3
    keyboard.setTextIndentation();
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	f010 f8e9 	bl	80161cc <_ZN8touchgfx8Keyboard18setTextIndentationEv>
    memset(buffer, 0, sizeof(buffer));
 8005ffa:	f504 798a 	add.w	r9, r4, #276	; 0x114
 8005ffe:	227e      	movs	r2, #126	; 0x7e
 8006000:	4629      	mov	r1, r5
 8006002:	4648      	mov	r0, r9
 8006004:	f01d fadc 	bl	80235c0 <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 8006008:	223f      	movs	r2, #63	; 0x3f
 800600a:	4649      	mov	r1, r9
 800600c:	4638      	mov	r0, r7
 800600e:	f010 f8a1 	bl	8016154 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    uppercaseKeys = true;
 8006012:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
    firstCharacterEntry = true;
 8006016:	f884 822e 	strb.w	r8, [r4, #558]	; 0x22e
        setX(x);
 800601a:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	210c      	movs	r1, #12
 8006022:	4630      	mov	r0, r6
 8006024:	4798      	blx	r3
        setY(y);
 8006026:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 800602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602c:	21e9      	movs	r1, #233	; 0xe9
 800602e:	4630      	mov	r0, r6
 8006030:	4798      	blx	r3
        setWidth(width);
 8006032:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	214e      	movs	r1, #78	; 0x4e
 800603a:	4630      	mov	r0, r6
 800603c:	4798      	blx	r3
        setHeight(height);
 800603e:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	2124      	movs	r1, #36	; 0x24
 8006046:	4630      	mov	r0, r6
 8006048:	4798      	blx	r3
        : color(col)
 800604a:	f04f 33ff 	mov.w	r3, #4294967295
        color = newColor;
 800604e:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
    setKeyMappingList();
 8006052:	4620      	mov	r0, r4
 8006054:	f7ff fe4a 	bl	8005cec <_ZN14CustomKeyboard17setKeyMappingListEv>
    add(keyboard);
 8006058:	4639      	mov	r1, r7
 800605a:	4620      	mov	r0, r4
 800605c:	f00c ffc6 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(modeBtnTextArea);
 8006060:	4631      	mov	r1, r6
 8006062:	4620      	mov	r0, r4
 8006064:	f00c ffc2 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006068:	4620      	mov	r0, r4
 800606a:	b00d      	add	sp, #52	; 0x34
 800606c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006070:	080268e0 	.word	0x080268e0
 8006074:	08026058 	.word	0x08026058
 8006078:	08025a0c 	.word	0x08025a0c
 800607c:	08026c54 	.word	0x08026c54
 8006080:	08024f38 	.word	0x08024f38
 8006084:	08005db1 	.word	0x08005db1
 8006088:	08026028 	.word	0x08026028
 800608c:	08005d79 	.word	0x08005d79
 8006090:	08005dc5 	.word	0x08005dc5
 8006094:	0800569d 	.word	0x0800569d
 8006098:	08005def 	.word	0x08005def
 800609c:	08026010 	.word	0x08026010
 80060a0:	08026040 	.word	0x08026040
 80060a4:	24000010 	.word	0x24000010
 80060a8:	08026fe4 	.word	0x08026fe4
 80060ac:	08024f94 	.word	0x08024f94

080060b0 <_ZN14CustomKeyboard34setKeyboardDoneReturnPressedActionERN8touchgfx15GenericCallbackIA_tvvEE>:
    doneReturnCallback = &callback;
 80060b0:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
}
 80060b4:	4770      	bx	lr

080060b6 <_ZN14CustomKeyboard11clearBufferEv>:
{
 80060b6:	b538      	push	{r3, r4, r5, lr}
 80060b8:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
 80060ba:	f500 758a 	add.w	r5, r0, #276	; 0x114
 80060be:	227e      	movs	r2, #126	; 0x7e
 80060c0:	2100      	movs	r1, #0
 80060c2:	4628      	mov	r0, r5
 80060c4:	f01d fa7c 	bl	80235c0 <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 80060c8:	223f      	movs	r2, #63	; 0x3f
 80060ca:	4629      	mov	r1, r5
 80060cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80060d0:	f010 f840 	bl	8016154 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    uppercaseKeys = true;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
    firstCharacterEntry = true;
 80060da:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    alphaKeys = true;
 80060de:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c
    setKeyMappingList();
 80060e2:	4620      	mov	r0, r4
 80060e4:	f7ff fe02 	bl	8005cec <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 80060e8:	bd38      	pop	{r3, r4, r5, pc}

080060ea <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
 80060ea:	b508      	push	{r3, lr}
 80060ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060f0:	2001      	movs	r0, #1
 80060f2:	f7ff faf9 	bl	80056e8 <_Z41__static_initialization_and_destruction_0ii>
 80060f6:	bd08      	pop	{r3, pc}

080060f8 <_GLOBAL__sub_D__ZN14CustomKeyboardC2Ev>:
 80060f8:	b508      	push	{r3, lr}
 80060fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060fe:	2000      	movs	r0, #0
 8006100:	f7ff faf2 	bl	80056e8 <_Z41__static_initialization_and_destruction_0ii>
 8006104:	bd08      	pop	{r3, pc}
	...

08006108 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8006108:	b510      	push	{r4, lr}
 800610a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800610c:	f7fd fd32 	bl	8003b74 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8006110:	4b01      	ldr	r3, [pc, #4]	; (8006118 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8006112:	6023      	str	r3, [r4, #0]
{

}
 8006114:	4620      	mov	r0, r4
 8006116:	bd10      	pop	{r4, pc}
 8006118:	0802505c 	.word	0x0802505c

0800611c <_ZN5ModelC1Ev>:
#endif




Model::Model() : modelListener(0), numberOfWifiAccesPoints(0)
 800611c:	2200      	movs	r2, #0
 800611e:	6002      	str	r2, [r0, #0]
 8006120:	f8c0 2aa4 	str.w	r2, [r0, #2724]	; 0xaa4
{

}
 8006124:	4770      	bx	lr

08006126 <_ZN5Model19getWifiAccessPointsER8wifiDatai>:
  }
    return 0;
}

void Model::getWifiAccessPoints(wifiData &ap, int id)
{
 8006126:	b508      	push	{r3, lr}
 8006128:	460b      	mov	r3, r1
  memcpy(&ap, &wifiAccessPoints[id], sizeof(ap));
 800612a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800612e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8006132:	2288      	movs	r2, #136	; 0x88
 8006134:	3104      	adds	r1, #4
 8006136:	4618      	mov	r0, r3
 8006138:	f01d fa34 	bl	80235a4 <memcpy>
}
 800613c:	bd08      	pop	{r3, pc}
	...

08006140 <_ZN5Model10updateWifiEv>:

// Called once we know WiFi AP scan has completed
void Model::updateWifi()
{
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	4607      	mov	r7, r0
    for (int cnt = 0; cnt < MAX_LISTED_AP; cnt++)
 8006144:	2400      	movs	r4, #0
 8006146:	e019      	b.n	800617c <_ZN5Model10updateWifiEv+0x3c>
    return 4;
 8006148:	2204      	movs	r2, #4
            break;

        wifiAccessPoints[cnt].id = cnt;
        touchgfx::Unicode::snprintf(wifiAccessPoints[cnt].ssid, 32, (const char*)APs[cnt].ssid.value);
        touchgfx::Unicode::snprintf(wifiAccessPoints[cnt].encryption, 30,net_wifi_security_to_string(APs[cnt].security));
        wifiAccessPoints[cnt].signalStrength = rssi_to_strength(APs[cnt].rssi);
 800614a:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 800614e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8006152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        if ((APs[cnt].security != NET_WIFI_SM_OPEN) && (APs[cnt].security != NET_WIFI_SM_UNKNOWN))
 8006156:	4b2b      	ldr	r3, [pc, #172]	; (8006204 <_ZN5Model10updateWifiEv+0xc4>)
 8006158:	2234      	movs	r2, #52	; 0x34
 800615a:	fb02 3304 	mla	r3, r2, r4, r3
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	3b01      	subs	r3, #1
 8006162:	f113 0f03 	cmn.w	r3, #3
 8006166:	d806      	bhi.n	8006176 <_ZN5Model10updateWifiEv+0x36>
        {
            wifiAccessPoints[cnt].encrypted = true;
 8006168:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 800616c:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        }
        numberOfWifiAccesPoints=cnt+1;
 8006176:	3401      	adds	r4, #1
 8006178:	f8c7 4aa4 	str.w	r4, [r7, #2724]	; 0xaa4
    for (int cnt = 0; cnt < MAX_LISTED_AP; cnt++)
 800617c:	2c09      	cmp	r4, #9
 800617e:	dc37      	bgt.n	80061f0 <_ZN5Model10updateWifiEv+0xb0>
        if (APs[cnt].ssid.value[0] == 0)
 8006180:	4b20      	ldr	r3, [pc, #128]	; (8006204 <_ZN5Model10updateWifiEv+0xc4>)
 8006182:	2234      	movs	r2, #52	; 0x34
 8006184:	fb02 3304 	mla	r3, r2, r4, r3
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	b38b      	cbz	r3, 80061f0 <_ZN5Model10updateWifiEv+0xb0>
        wifiAccessPoints[cnt].id = cnt;
 800618c:	0125      	lsls	r5, r4, #4
 800618e:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 8006192:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8006196:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
        touchgfx::Unicode::snprintf(wifiAccessPoints[cnt].ssid, 32, (const char*)APs[cnt].ssid.value);
 800619a:	4e1a      	ldr	r6, [pc, #104]	; (8006204 <_ZN5Model10updateWifiEv+0xc4>)
 800619c:	fb02 6604 	mla	r6, r2, r4, r6
 80061a0:	1c72      	adds	r2, r6, #1
 80061a2:	2120      	movs	r1, #32
 80061a4:	3004      	adds	r0, #4
 80061a6:	f014 fdf7 	bl	801ad98 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        touchgfx::Unicode::snprintf(wifiAccessPoints[cnt].encryption, 30,net_wifi_security_to_string(APs[cnt].security));
 80061aa:	4425      	add	r5, r4
 80061ac:	00ed      	lsls	r5, r5, #3
 80061ae:	3540      	adds	r5, #64	; 0x40
 80061b0:	443d      	add	r5, r7
 80061b2:	3504      	adds	r5, #4
 80061b4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80061b6:	f00b fc45 	bl	8011a44 <net_wifi_security_to_string>
 80061ba:	4602      	mov	r2, r0
 80061bc:	211e      	movs	r1, #30
 80061be:	4628      	mov	r0, r5
 80061c0:	f014 fdea 	bl	801ad98 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wifiAccessPoints[cnt].signalStrength = rssi_to_strength(APs[cnt].rssi);
 80061c4:	f996 3031 	ldrsb.w	r3, [r6, #49]	; 0x31
  if(RSSI >= -50)
 80061c8:	f113 0f32 	cmn.w	r3, #50	; 0x32
 80061cc:	dabc      	bge.n	8006148 <_ZN5Model10updateWifiEv+0x8>
  if(RSSI >= -60)
 80061ce:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
 80061d2:	da07      	bge.n	80061e4 <_ZN5Model10updateWifiEv+0xa4>
  if(RSSI >= -70)
 80061d4:	f113 0f46 	cmn.w	r3, #70	; 0x46
 80061d8:	da06      	bge.n	80061e8 <_ZN5Model10updateWifiEv+0xa8>
  if(RSSI >= -100)
 80061da:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80061de:	da05      	bge.n	80061ec <_ZN5Model10updateWifiEv+0xac>
    return 0;
 80061e0:	2200      	movs	r2, #0
 80061e2:	e7b2      	b.n	800614a <_ZN5Model10updateWifiEv+0xa>
    return 3;
 80061e4:	2203      	movs	r2, #3
 80061e6:	e7b0      	b.n	800614a <_ZN5Model10updateWifiEv+0xa>
    return 2;
 80061e8:	2202      	movs	r2, #2
 80061ea:	e7ae      	b.n	800614a <_ZN5Model10updateWifiEv+0xa>
    return 1;
 80061ec:	2201      	movs	r2, #1
 80061ee:	e7ac      	b.n	800614a <_ZN5Model10updateWifiEv+0xa>
    }
    modelListener->updateWiFiInformaion(wifiAccessPoints, numberOfWifiAccesPoints);
 80061f0:	4639      	mov	r1, r7
 80061f2:	f851 0b04 	ldr.w	r0, [r1], #4
 80061f6:	6803      	ldr	r3, [r0, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f8d7 2aa4 	ldr.w	r2, [r7, #2724]	; 0xaa4
 80061fe:	4798      	blx	r3
}
 8006200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006202:	bf00      	nop
 8006204:	2400587c 	.word	0x2400587c

08006208 <_ZN5Model14handleMessagesEv>:
{
 8006208:	b510      	push	{r4, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	4604      	mov	r4, r0
    if (osMessageQueueGetCount(GUI_QueueHandle) > 0)
 800620e:	4b0b      	ldr	r3, [pc, #44]	; (800623c <_ZN5Model14handleMessagesEv+0x34>)
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	f009 fab3 	bl	800f77c <osMessageQueueGetCount>
 8006216:	b908      	cbnz	r0, 800621c <_ZN5Model14handleMessagesEv+0x14>
}
 8006218:	b002      	add	sp, #8
 800621a:	bd10      	pop	{r4, pc}
        osMessageQueueGet(GUI_QueueHandle, &msg, 0, 0);
 800621c:	2300      	movs	r3, #0
 800621e:	461a      	mov	r2, r3
 8006220:	f10d 0107 	add.w	r1, sp, #7
 8006224:	4805      	ldr	r0, [pc, #20]	; (800623c <_ZN5Model14handleMessagesEv+0x34>)
 8006226:	6800      	ldr	r0, [r0, #0]
 8006228:	f009 fa69 	bl	800f6fe <osMessageQueueGet>
        switch(msg)
 800622c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d1f1      	bne.n	8006218 <_ZN5Model14handleMessagesEv+0x10>
                updateWifi();
 8006234:	4620      	mov	r0, r4
 8006236:	f7ff ff83 	bl	8006140 <_ZN5Model10updateWifiEv>
}
 800623a:	e7ed      	b.n	8006218 <_ZN5Model14handleMessagesEv+0x10>
 800623c:	24004f00 	.word	0x24004f00

08006240 <_ZN5Model4tickEv>:
{
 8006240:	b508      	push	{r3, lr}
    handleMessages();
 8006242:	f7ff ffe1 	bl	8006208 <_ZN5Model14handleMessagesEv>
}
 8006246:	bd08      	pop	{r3, pc}

08006248 <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 8006248:	4770      	bx	lr

0800624a <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 800624a:	4770      	bx	lr

0800624c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 800624c:	4b01      	ldr	r3, [pc, #4]	; (8006254 <_ZN8touchgfx9PresenterD1Ev+0x8>)
 800624e:	6003      	str	r3, [r0, #0]
    }
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	080262e8 	.word	0x080262e8

08006258 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8006258:	4b01      	ldr	r3, [pc, #4]	; (8006260 <_ZN13ModelListenerD1Ev+0x8>)
 800625a:	6003      	str	r3, [r0, #0]
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	08026300 	.word	0x08026300

08006264 <_ZN13ModelListener20updateWiFiInformaionEP8wifiDatai>:
    }

    virtual void updateWiFiInformaion(struct  wifiData data[], int numberOfPoints) {}
 8006264:	4770      	bx	lr
	...

08006268 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8006268:	4a05      	ldr	r2, [pc, #20]	; (8006280 <_ZN19mainScreenPresenterD1Ev+0x18>)
 800626a:	f102 0108 	add.w	r1, r2, #8
 800626e:	6001      	str	r1, [r0, #0]
 8006270:	3224      	adds	r2, #36	; 0x24
 8006272:	6042      	str	r2, [r0, #4]
    virtual ~ModelListener() {}
 8006274:	4a03      	ldr	r2, [pc, #12]	; (8006284 <_ZN19mainScreenPresenterD1Ev+0x1c>)
 8006276:	6042      	str	r2, [r0, #4]
    {
 8006278:	4a03      	ldr	r2, [pc, #12]	; (8006288 <_ZN19mainScreenPresenterD1Ev+0x20>)
 800627a:	6002      	str	r2, [r0, #0]
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	0802630c 	.word	0x0802630c
 8006284:	08026300 	.word	0x08026300
 8006288:	080262e8 	.word	0x080262e8

0800628c <_ZThn4_N19mainScreenPresenterD1Ev>:
 800628c:	4603      	mov	r3, r0
 800628e:	4a07      	ldr	r2, [pc, #28]	; (80062ac <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 8006290:	f102 0108 	add.w	r1, r2, #8
 8006294:	f840 1c04 	str.w	r1, [r0, #-4]
 8006298:	3224      	adds	r2, #36	; 0x24
 800629a:	f840 2904 	str.w	r2, [r0], #-4
 800629e:	4a04      	ldr	r2, [pc, #16]	; (80062b0 <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 80062a0:	6042      	str	r2, [r0, #4]
 80062a2:	4a04      	ldr	r2, [pc, #16]	; (80062b4 <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 80062a4:	f843 2c04 	str.w	r2, [r3, #-4]
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	0802630c 	.word	0x0802630c
 80062b0:	08026300 	.word	0x08026300
 80062b4:	080262e8 	.word	0x080262e8

080062b8 <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 80062b8:	4770      	bx	lr

080062ba <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 80062ba:	4770      	bx	lr

080062bc <_Z41__static_initialization_and_destruction_0ii>:
}

void mainScreenPresenter::getWifiAccessPoints(wifiData &ap, int id)
{
    model->getWifiAccessPoints(ap, id);
}
 80062bc:	2801      	cmp	r0, #1
 80062be:	d006      	beq.n	80062ce <_Z41__static_initialization_and_destruction_0ii+0x12>
 80062c0:	b920      	cbnz	r0, 80062cc <_Z41__static_initialization_and_destruction_0ii+0x10>
 80062c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062c6:	4299      	cmp	r1, r3
 80062c8:	f000 8222 	beq.w	8006710 <_Z41__static_initialization_and_destruction_0ii+0x454>
 80062cc:	4770      	bx	lr
 80062ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062d2:	4299      	cmp	r1, r3
 80062d4:	d1f4      	bne.n	80062c0 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80062d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80062da:	4bf0      	ldr	r3, [pc, #960]	; (800669c <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80062dc:	2201      	movs	r2, #1
 80062de:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80062e0:	240c      	movs	r4, #12
 80062e2:	805c      	strh	r4, [r3, #2]
 80062e4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80062e8:	f8a3 e004 	strh.w	lr, [r3, #4]
 80062ec:	2224      	movs	r2, #36	; 0x24
 80062ee:	80da      	strh	r2, [r3, #6]
 80062f0:	811a      	strh	r2, [r3, #8]
 80062f2:	f04f 0c06 	mov.w	ip, #6
 80062f6:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80062fa:	2502      	movs	r5, #2
 80062fc:	731d      	strb	r5, [r3, #12]
 80062fe:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8006302:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8006306:	f8a3 e010 	strh.w	lr, [r3, #16]
 800630a:	825a      	strh	r2, [r3, #18]
 800630c:	829a      	strh	r2, [r3, #20]
 800630e:	f8a3 c016 	strh.w	ip, [r3, #22]
 8006312:	f04f 0503 	mov.w	r5, #3
 8006316:	761d      	strb	r5, [r3, #24]
 8006318:	f04f 0660 	mov.w	r6, #96	; 0x60
 800631c:	835e      	strh	r6, [r3, #26]
 800631e:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8006322:	83da      	strh	r2, [r3, #30]
 8006324:	841a      	strh	r2, [r3, #32]
 8006326:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 800632a:	f04f 0504 	mov.w	r5, #4
 800632e:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8006332:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8006336:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 800633a:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 800633e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006340:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006342:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8006346:	f04f 0505 	mov.w	r5, #5
 800634a:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 800634e:	27b4      	movs	r7, #180	; 0xb4
 8006350:	865f      	strh	r7, [r3, #50]	; 0x32
 8006352:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8006356:	86da      	strh	r2, [r3, #54]	; 0x36
 8006358:	871a      	strh	r2, [r3, #56]	; 0x38
 800635a:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 800635e:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 8006362:	f04f 05de 	mov.w	r5, #222	; 0xde
 8006366:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8006368:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 800636c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8006370:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006374:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8006378:	f04f 0907 	mov.w	r9, #7
 800637c:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8006380:	f44f 7984 	mov.w	r9, #264	; 0x108
 8006384:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8006388:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 800638c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006390:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8006394:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8006398:	f04f 0b08 	mov.w	fp, #8
 800639c:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80063a0:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80063a4:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80063a8:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 80063ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80063b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063b4:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 80063b8:	2509      	movs	r5, #9
 80063ba:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 80063be:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80063c2:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80063c6:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 80063ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80063ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80063d2:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 80063d6:	250a      	movs	r5, #10
 80063d8:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80063dc:	f44f 75c3 	mov.w	r5, #390	; 0x186
 80063e0:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 80063e4:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 80063e8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80063ec:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80063f0:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 80063f4:	f04f 090b 	mov.w	r9, #11
 80063f8:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 80063fc:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8006400:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8006404:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8006408:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800640c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8006410:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8006414:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8006418:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 800641c:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8006420:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8006424:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8006428:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800642c:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8006430:	f04f 060d 	mov.w	r6, #13
 8006434:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8006438:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 800643c:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8006440:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8006444:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8006448:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 800644c:	f04f 0a0e 	mov.w	sl, #14
 8006450:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8006454:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006458:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 800645c:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8006460:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8006464:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8006468:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 800646c:	f04f 0a0f 	mov.w	sl, #15
 8006470:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8006474:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8006478:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 800647c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8006480:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8006484:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8006488:	f04f 0a10 	mov.w	sl, #16
 800648c:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8006490:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8006494:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8006498:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 800649c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80064a0:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 80064a4:	f04f 0a11 	mov.w	sl, #17
 80064a8:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80064ac:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80064b0:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80064b4:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 80064b8:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80064bc:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80064c0:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 80064c4:	f04f 0a12 	mov.w	sl, #18
 80064c8:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80064cc:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80064d0:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 80064d4:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80064d8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80064dc:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80064e0:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 80064e4:	f04f 0a13 	mov.w	sl, #19
 80064e8:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 80064ec:	f44f 7a99 	mov.w	sl, #306	; 0x132
 80064f0:	4656      	mov	r6, sl
 80064f2:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 80064f6:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 80064fa:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 80064fe:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8006502:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8006506:	f04f 0a14 	mov.w	sl, #20
 800650a:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 800650e:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8006512:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8006516:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 800651a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800651e:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8006522:	f04f 0a15 	mov.w	sl, #21
 8006526:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 800652a:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 800652e:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8006532:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8006536:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 800653a:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 800653e:	f04f 0a16 	mov.w	sl, #22
 8006542:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8006546:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 800654a:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 800654e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8006552:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8006556:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 800655a:	f04f 0e17 	mov.w	lr, #23
 800655e:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8006562:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8006566:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 800656a:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 800656e:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8006572:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8006576:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 800657a:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 800657e:	f04f 0918 	mov.w	r9, #24
 8006582:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8006586:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 800658a:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 800658e:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8006592:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8006596:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 800659a:	f04f 0819 	mov.w	r8, #25
 800659e:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80065a2:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80065a6:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 80065aa:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80065ae:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80065b2:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 80065b6:	271a      	movs	r7, #26
 80065b8:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80065bc:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80065c0:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 80065c4:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 80065c8:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80065cc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 80065d0:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 80065d4:	271b      	movs	r7, #27
 80065d6:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 80065da:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80065de:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 80065e2:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 80065e6:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 80065ea:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 80065ee:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 80065f2:	271c      	movs	r7, #28
 80065f4:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 80065f8:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 80065fc:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8006600:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8006604:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8006608:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 800660c:	271d      	movs	r7, #29
 800660e:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8006612:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8006616:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 800661a:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 800661e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8006622:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8006626:	271e      	movs	r7, #30
 8006628:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 800662c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006630:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8006634:	26e2      	movs	r6, #226	; 0xe2
 8006636:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 800663a:	f44f 7790 	mov.w	r7, #288	; 0x120
 800663e:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8006642:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8006646:	f04f 0708 	mov.w	r7, #8
 800664a:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 800664e:	4b14      	ldr	r3, [pc, #80]	; (80066a0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8006650:	801c      	strh	r4, [r3, #0]
 8006652:	f8a3 e002 	strh.w	lr, [r3, #2]
 8006656:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 800665a:	f8a3 c004 	strh.w	ip, [r3, #4]
 800665e:	80da      	strh	r2, [r3, #6]
};
 8006660:	2700      	movs	r7, #0
 8006662:	609f      	str	r7, [r3, #8]
 8006664:	f04f 0804 	mov.w	r8, #4
 8006668:	f8a3 800c 	strh.w	r8, [r3, #12]
 800666c:	821d      	strh	r5, [r3, #16]
 800666e:	f8a3 e012 	strh.w	lr, [r3, #18]
 8006672:	f8a3 c014 	strh.w	ip, [r3, #20]
 8006676:	82da      	strh	r2, [r3, #22]
 8006678:	619f      	str	r7, [r3, #24]
 800667a:	f04f 0e03 	mov.w	lr, #3
 800667e:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8006682:	841c      	strh	r4, [r3, #32]
 8006684:	845e      	strh	r6, [r3, #34]	; 0x22
 8006686:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 800668a:	84da      	strh	r2, [r3, #38]	; 0x26
 800668c:	629f      	str	r7, [r3, #40]	; 0x28
 800668e:	f04f 0407 	mov.w	r4, #7
 8006692:	859c      	strh	r4, [r3, #44]	; 0x2c
 8006694:	861d      	strh	r5, [r3, #48]	; 0x30
 8006696:	865e      	strh	r6, [r3, #50]	; 0x32
 8006698:	e004      	b.n	80066a4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 800669a:	bf00      	nop
 800669c:	240061b4 	.word	0x240061b4
 80066a0:	24006124 	.word	0x24006124
 80066a4:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 80066a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80066aa:	639f      	str	r7, [r3, #56]	; 0x38
 80066ac:	f04f 0205 	mov.w	r2, #5
 80066b0:	879a      	strh	r2, [r3, #60]	; 0x3c
 80066b2:	4604      	mov	r4, r0
 80066b4:	3340      	adds	r3, #64	; 0x40
 80066b6:	2c00      	cmp	r4, #0
 80066b8:	db0b      	blt.n	80066d2 <_Z41__static_initialization_and_destruction_0ii+0x416>
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	605a      	str	r2, [r3, #4]
 80066c0:	609a      	str	r2, [r3, #8]
 80066c2:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 80066c4:	801a      	strh	r2, [r3, #0]
 80066c6:	805a      	strh	r2, [r3, #2]
 80066c8:	809a      	strh	r2, [r3, #4]
 80066ca:	80da      	strh	r2, [r3, #6]
 80066cc:	3310      	adds	r3, #16
 80066ce:	3c01      	subs	r4, #1
 80066d0:	e7f1      	b.n	80066b6 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80066d2:	4b11      	ldr	r3, [pc, #68]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 80066d4:	2205      	movs	r2, #5
 80066d6:	825a      	strh	r2, [r3, #18]
 80066d8:	222d      	movs	r2, #45	; 0x2d
 80066da:	829a      	strh	r2, [r3, #20]
 80066dc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80066e0:	82da      	strh	r2, [r3, #22]
 80066e2:	2246      	movs	r2, #70	; 0x46
 80066e4:	831a      	strh	r2, [r3, #24]
 80066e6:	4a0d      	ldr	r2, [pc, #52]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 80066e8:	61da      	str	r2, [r3, #28]
 80066ea:	2200      	movs	r2, #0
 80066ec:	841a      	strh	r2, [r3, #32]
        : color(col)
 80066ee:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 80066f2:	625a      	str	r2, [r3, #36]	; 0x24
 80066f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066f8:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 80066fa:	b918      	cbnz	r0, 8006704 <_Z41__static_initialization_and_destruction_0ii+0x448>
 80066fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006700:	4299      	cmp	r1, r3
 8006702:	d001      	beq.n	8006708 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8006704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8006708:	4b03      	ldr	r3, [pc, #12]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 800670a:	4a04      	ldr	r2, [pc, #16]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 800670c:	61da      	str	r2, [r3, #28]
 800670e:	e7f9      	b.n	8006704 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8006710:	4b01      	ldr	r3, [pc, #4]	; (8006718 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8006712:	4a02      	ldr	r2, [pc, #8]	; (800671c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006714:	61da      	str	r2, [r3, #28]
 8006716:	4770      	bx	lr
 8006718:	24006184 	.word	0x24006184
 800671c:	08024f38 	.word	0x08024f38

08006720 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8006720:	b510      	push	{r4, lr}
 8006722:	4604      	mov	r4, r0
    {
 8006724:	4b03      	ldr	r3, [pc, #12]	; (8006734 <_ZN8touchgfx9PresenterD0Ev+0x14>)
 8006726:	6003      	str	r3, [r0, #0]
    }
 8006728:	2104      	movs	r1, #4
 800672a:	f01c fd84 	bl	8023236 <_ZdlPvj>
 800672e:	4620      	mov	r0, r4
 8006730:	bd10      	pop	{r4, pc}
 8006732:	bf00      	nop
 8006734:	080262e8 	.word	0x080262e8

08006738 <_ZN13ModelListenerD0Ev>:
 8006738:	b510      	push	{r4, lr}
 800673a:	4604      	mov	r4, r0
 800673c:	4b03      	ldr	r3, [pc, #12]	; (800674c <_ZN13ModelListenerD0Ev+0x14>)
 800673e:	6003      	str	r3, [r0, #0]
 8006740:	2108      	movs	r1, #8
 8006742:	f01c fd78 	bl	8023236 <_ZdlPvj>
 8006746:	4620      	mov	r0, r4
 8006748:	bd10      	pop	{r4, pc}
 800674a:	bf00      	nop
 800674c:	08026300 	.word	0x08026300

08006750 <_ZN19mainScreenPresenterD0Ev>:
 8006750:	b510      	push	{r4, lr}
 8006752:	4604      	mov	r4, r0
 8006754:	4b07      	ldr	r3, [pc, #28]	; (8006774 <_ZN19mainScreenPresenterD0Ev+0x24>)
 8006756:	f103 0208 	add.w	r2, r3, #8
 800675a:	6002      	str	r2, [r0, #0]
 800675c:	3324      	adds	r3, #36	; 0x24
 800675e:	6043      	str	r3, [r0, #4]
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <_ZN19mainScreenPresenterD0Ev+0x28>)
 8006762:	6043      	str	r3, [r0, #4]
    {
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <_ZN19mainScreenPresenterD0Ev+0x2c>)
 8006766:	6003      	str	r3, [r0, #0]
 8006768:	2110      	movs	r1, #16
 800676a:	f01c fd64 	bl	8023236 <_ZdlPvj>
 800676e:	4620      	mov	r0, r4
 8006770:	bd10      	pop	{r4, pc}
 8006772:	bf00      	nop
 8006774:	0802630c 	.word	0x0802630c
 8006778:	08026300 	.word	0x08026300
 800677c:	080262e8 	.word	0x080262e8

08006780 <_ZThn4_N19mainScreenPresenterD0Ev>:
 8006780:	b510      	push	{r4, lr}
 8006782:	4604      	mov	r4, r0
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 8006786:	f103 0208 	add.w	r2, r3, #8
 800678a:	f840 2c04 	str.w	r2, [r0, #-4]
 800678e:	3324      	adds	r3, #36	; 0x24
 8006790:	f844 3904 	str.w	r3, [r4], #-4
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 8006796:	6063      	str	r3, [r4, #4]
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 800679a:	f840 3c04 	str.w	r3, [r0, #-4]
 800679e:	2110      	movs	r1, #16
 80067a0:	4620      	mov	r0, r4
 80067a2:	f01c fd48 	bl	8023236 <_ZdlPvj>
 80067a6:	4620      	mov	r0, r4
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	bf00      	nop
 80067ac:	0802630c 	.word	0x0802630c
 80067b0:	08026300 	.word	0x08026300
 80067b4:	080262e8 	.word	0x080262e8

080067b8 <_ZN19mainScreenPresenter20updateWiFiInformaionEP8wifiDatai>:
{
 80067b8:	b508      	push	{r3, lr}
    view.updateWiFiInformaion(data, numberOfPoints);
 80067ba:	b292      	uxth	r2, r2
 80067bc:	68c0      	ldr	r0, [r0, #12]
 80067be:	f000 fd33 	bl	8007228 <_ZN14mainScreenView20updateWiFiInformaionEP8wifiDatat>
}
 80067c2:	bd08      	pop	{r3, pc}

080067c4 <_ZThn4_N19mainScreenPresenter20updateWiFiInformaionEP8wifiDatai>:

    virtual void updateWiFiInformaion(struct  wifiData data[], int numberOfPoints);
 80067c4:	f1a0 0004 	sub.w	r0, r0, #4
 80067c8:	f7ff bff6 	b.w	80067b8 <_ZN19mainScreenPresenter20updateWiFiInformaionEP8wifiDatai>

080067cc <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 80067cc:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 80067ce:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 80067d0:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 80067d2:	4a08      	ldr	r2, [pc, #32]	; (80067f4 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 80067d4:	6042      	str	r2, [r0, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	6082      	str	r2, [r0, #8]
    : view(v)
 80067da:	4a07      	ldr	r2, [pc, #28]	; (80067f8 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 80067dc:	f102 0408 	add.w	r4, r2, #8
 80067e0:	6004      	str	r4, [r0, #0]
 80067e2:	3224      	adds	r2, #36	; 0x24
 80067e4:	6042      	str	r2, [r0, #4]
 80067e6:	60c1      	str	r1, [r0, #12]
}
 80067e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	080262e8 	.word	0x080262e8
 80067f4:	08026300 	.word	0x08026300
 80067f8:	0802630c 	.word	0x0802630c

080067fc <_ZN19mainScreenPresenter19getWifiAccessPointsER8wifiDatai>:
{
 80067fc:	b508      	push	{r3, lr}
    model->getWifiAccessPoints(ap, id);
 80067fe:	6880      	ldr	r0, [r0, #8]
 8006800:	f7ff fc91 	bl	8006126 <_ZN5Model19getWifiAccessPointsER8wifiDatai>
}
 8006804:	bd08      	pop	{r3, pc}

08006806 <_GLOBAL__sub_I__ZN19mainScreenPresenterC2ER14mainScreenView>:
 8006806:	b508      	push	{r3, lr}
 8006808:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800680c:	2001      	movs	r0, #1
 800680e:	f7ff fd55 	bl	80062bc <_Z41__static_initialization_and_destruction_0ii>
 8006812:	bd08      	pop	{r3, pc}

08006814 <_GLOBAL__sub_D__ZN19mainScreenPresenterC2ER14mainScreenView>:
 8006814:	b508      	push	{r3, lr}
 8006816:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800681a:	2000      	movs	r0, #0
 800681c:	f7ff fd4e 	bl	80062bc <_Z41__static_initialization_and_destruction_0ii>
 8006820:	bd08      	pop	{r3, pc}

08006822 <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 8006822:	4770      	bx	lr

08006824 <_ZN8touchgfx8CallbackI14mainScreenViewivvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006824:	4a02      	ldr	r2, [pc, #8]	; (8006830 <_ZN8touchgfx8CallbackI14mainScreenViewivvED1Ev+0xc>)
 8006826:	6002      	str	r2, [r0, #0]
    }
 8006828:	4a02      	ldr	r2, [pc, #8]	; (8006834 <_ZN8touchgfx8CallbackI14mainScreenViewivvED1Ev+0x10>)
 800682a:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	0802638c 	.word	0x0802638c
 8006834:	08026374 	.word	0x08026374

08006838 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev>:
 8006838:	4a02      	ldr	r2, [pc, #8]	; (8006844 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev+0xc>)
 800683a:	6002      	str	r2, [r0, #0]
    }
 800683c:	4a02      	ldr	r2, [pc, #8]	; (8006848 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev+0x10>)
 800683e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	0802635c 	.word	0x0802635c
 8006848:	08026344 	.word	0x08026344

0800684c <_Z41__static_initialization_and_destruction_0ii>:
}

void mainScreenView::updateWiFiInformaion(struct  wifiData data[], uint16_t numberOfPoints)
{
    wifiMenu.updateWifiList(data, numberOfPoints);
}
 800684c:	2801      	cmp	r0, #1
 800684e:	d006      	beq.n	800685e <_Z41__static_initialization_and_destruction_0ii+0x12>
 8006850:	b920      	cbnz	r0, 800685c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8006852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006856:	4299      	cmp	r1, r3
 8006858:	f000 8222 	beq.w	8006ca0 <_Z41__static_initialization_and_destruction_0ii+0x454>
 800685c:	4770      	bx	lr
 800685e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006862:	4299      	cmp	r1, r3
 8006864:	d1f4      	bne.n	8006850 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8006866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 800686a:	4bf0      	ldr	r3, [pc, #960]	; (8006c2c <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800686c:	2201      	movs	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006870:	240c      	movs	r4, #12
 8006872:	805c      	strh	r4, [r3, #2]
 8006874:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8006878:	f8a3 e004 	strh.w	lr, [r3, #4]
 800687c:	2224      	movs	r2, #36	; 0x24
 800687e:	80da      	strh	r2, [r3, #6]
 8006880:	811a      	strh	r2, [r3, #8]
 8006882:	f04f 0c06 	mov.w	ip, #6
 8006886:	f8a3 c00a 	strh.w	ip, [r3, #10]
 800688a:	2502      	movs	r5, #2
 800688c:	731d      	strb	r5, [r3, #12]
 800688e:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8006892:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8006896:	f8a3 e010 	strh.w	lr, [r3, #16]
 800689a:	825a      	strh	r2, [r3, #18]
 800689c:	829a      	strh	r2, [r3, #20]
 800689e:	f8a3 c016 	strh.w	ip, [r3, #22]
 80068a2:	f04f 0503 	mov.w	r5, #3
 80068a6:	761d      	strb	r5, [r3, #24]
 80068a8:	f04f 0660 	mov.w	r6, #96	; 0x60
 80068ac:	835e      	strh	r6, [r3, #26]
 80068ae:	f8a3 e01c 	strh.w	lr, [r3, #28]
 80068b2:	83da      	strh	r2, [r3, #30]
 80068b4:	841a      	strh	r2, [r3, #32]
 80068b6:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 80068ba:	f04f 0504 	mov.w	r5, #4
 80068be:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 80068c2:	f04f 088a 	mov.w	r8, #138	; 0x8a
 80068c6:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 80068ca:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 80068ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068d0:	859a      	strh	r2, [r3, #44]	; 0x2c
 80068d2:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 80068d6:	f04f 0505 	mov.w	r5, #5
 80068da:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 80068de:	27b4      	movs	r7, #180	; 0xb4
 80068e0:	865f      	strh	r7, [r3, #50]	; 0x32
 80068e2:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 80068e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80068e8:	871a      	strh	r2, [r3, #56]	; 0x38
 80068ea:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 80068ee:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 80068f2:	f04f 05de 	mov.w	r5, #222	; 0xde
 80068f6:	87dd      	strh	r5, [r3, #62]	; 0x3e
 80068f8:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 80068fc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8006900:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006904:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8006908:	f04f 0907 	mov.w	r9, #7
 800690c:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8006910:	f44f 7984 	mov.w	r9, #264	; 0x108
 8006914:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8006918:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 800691c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006920:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8006924:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8006928:	f04f 0b08 	mov.w	fp, #8
 800692c:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8006930:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8006934:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8006938:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 800693c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8006940:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006944:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8006948:	2509      	movs	r5, #9
 800694a:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 800694e:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8006952:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8006956:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 800695a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800695e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8006962:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8006966:	250a      	movs	r5, #10
 8006968:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 800696c:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8006970:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8006974:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8006978:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800697c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8006980:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8006984:	f04f 090b 	mov.w	r9, #11
 8006988:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 800698c:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8006990:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8006994:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8006998:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800699c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80069a0:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 80069a4:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 80069a8:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 80069ac:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 80069b0:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 80069b4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80069b8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80069bc:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 80069c0:	f04f 060d 	mov.w	r6, #13
 80069c4:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 80069c8:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 80069cc:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 80069d0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80069d4:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80069d8:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 80069dc:	f04f 0a0e 	mov.w	sl, #14
 80069e0:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 80069e4:	f04f 0660 	mov.w	r6, #96	; 0x60
 80069e8:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 80069ec:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 80069f0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80069f4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80069f8:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 80069fc:	f04f 0a0f 	mov.w	sl, #15
 8006a00:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8006a04:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8006a08:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8006a0c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8006a10:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8006a14:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8006a18:	f04f 0a10 	mov.w	sl, #16
 8006a1c:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8006a20:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8006a24:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8006a28:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8006a2c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8006a30:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8006a34:	f04f 0a11 	mov.w	sl, #17
 8006a38:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8006a3c:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8006a40:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8006a44:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8006a48:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8006a4c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8006a50:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8006a54:	f04f 0a12 	mov.w	sl, #18
 8006a58:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8006a5c:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8006a60:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8006a64:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8006a68:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8006a6c:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8006a70:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8006a74:	f04f 0a13 	mov.w	sl, #19
 8006a78:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8006a7c:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8006a80:	4656      	mov	r6, sl
 8006a82:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8006a86:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8006a8a:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8006a8e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8006a92:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8006a96:	f04f 0a14 	mov.w	sl, #20
 8006a9a:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8006a9e:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8006aa2:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8006aa6:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8006aaa:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8006aae:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8006ab2:	f04f 0a15 	mov.w	sl, #21
 8006ab6:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8006aba:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8006abe:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8006ac2:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8006ac6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8006aca:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8006ace:	f04f 0a16 	mov.w	sl, #22
 8006ad2:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8006ad6:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8006ada:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8006ade:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8006ae2:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8006ae6:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8006aea:	f04f 0e17 	mov.w	lr, #23
 8006aee:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8006af2:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8006af6:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8006afa:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8006afe:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8006b02:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8006b06:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8006b0a:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8006b0e:	f04f 0918 	mov.w	r9, #24
 8006b12:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8006b16:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8006b1a:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8006b1e:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8006b22:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8006b26:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8006b2a:	f04f 0819 	mov.w	r8, #25
 8006b2e:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8006b32:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8006b36:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8006b3a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8006b3e:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8006b42:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8006b46:	271a      	movs	r7, #26
 8006b48:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8006b4c:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8006b50:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8006b54:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8006b58:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8006b5c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8006b60:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8006b64:	271b      	movs	r7, #27
 8006b66:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8006b6a:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8006b6e:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8006b72:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8006b76:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8006b7a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8006b7e:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8006b82:	271c      	movs	r7, #28
 8006b84:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8006b88:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8006b8c:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8006b90:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8006b94:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8006b98:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8006b9c:	271d      	movs	r7, #29
 8006b9e:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8006ba2:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8006ba6:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8006baa:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8006bae:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8006bb2:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8006bb6:	271e      	movs	r7, #30
 8006bb8:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8006bbc:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006bc0:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8006bc4:	26e2      	movs	r6, #226	; 0xe2
 8006bc6:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8006bca:	f44f 7790 	mov.w	r7, #288	; 0x120
 8006bce:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8006bd2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8006bd6:	f04f 0708 	mov.w	r7, #8
 8006bda:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8006bde:	4b14      	ldr	r3, [pc, #80]	; (8006c30 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8006be0:	801c      	strh	r4, [r3, #0]
 8006be2:	f8a3 e002 	strh.w	lr, [r3, #2]
 8006be6:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8006bea:	f8a3 c004 	strh.w	ip, [r3, #4]
 8006bee:	80da      	strh	r2, [r3, #6]
};
 8006bf0:	2700      	movs	r7, #0
 8006bf2:	609f      	str	r7, [r3, #8]
 8006bf4:	f04f 0804 	mov.w	r8, #4
 8006bf8:	f8a3 800c 	strh.w	r8, [r3, #12]
 8006bfc:	821d      	strh	r5, [r3, #16]
 8006bfe:	f8a3 e012 	strh.w	lr, [r3, #18]
 8006c02:	f8a3 c014 	strh.w	ip, [r3, #20]
 8006c06:	82da      	strh	r2, [r3, #22]
 8006c08:	619f      	str	r7, [r3, #24]
 8006c0a:	f04f 0e03 	mov.w	lr, #3
 8006c0e:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8006c12:	841c      	strh	r4, [r3, #32]
 8006c14:	845e      	strh	r6, [r3, #34]	; 0x22
 8006c16:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8006c1a:	84da      	strh	r2, [r3, #38]	; 0x26
 8006c1c:	629f      	str	r7, [r3, #40]	; 0x28
 8006c1e:	f04f 0407 	mov.w	r4, #7
 8006c22:	859c      	strh	r4, [r3, #44]	; 0x2c
 8006c24:	861d      	strh	r5, [r3, #48]	; 0x30
 8006c26:	865e      	strh	r6, [r3, #50]	; 0x32
 8006c28:	e004      	b.n	8006c34 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8006c2a:	bf00      	nop
 8006c2c:	240063ac 	.word	0x240063ac
 8006c30:	2400631c 	.word	0x2400631c
 8006c34:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8006c38:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c3a:	639f      	str	r7, [r3, #56]	; 0x38
 8006c3c:	f04f 0205 	mov.w	r2, #5
 8006c40:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006c42:	4604      	mov	r4, r0
 8006c44:	3340      	adds	r3, #64	; 0x40
 8006c46:	2c00      	cmp	r4, #0
 8006c48:	db0b      	blt.n	8006c62 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	605a      	str	r2, [r3, #4]
 8006c50:	609a      	str	r2, [r3, #8]
 8006c52:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8006c54:	801a      	strh	r2, [r3, #0]
 8006c56:	805a      	strh	r2, [r3, #2]
 8006c58:	809a      	strh	r2, [r3, #4]
 8006c5a:	80da      	strh	r2, [r3, #6]
 8006c5c:	3310      	adds	r3, #16
 8006c5e:	3c01      	subs	r4, #1
 8006c60:	e7f1      	b.n	8006c46 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006c62:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8006c64:	2205      	movs	r2, #5
 8006c66:	825a      	strh	r2, [r3, #18]
 8006c68:	222d      	movs	r2, #45	; 0x2d
 8006c6a:	829a      	strh	r2, [r3, #20]
 8006c6c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8006c70:	82da      	strh	r2, [r3, #22]
 8006c72:	2246      	movs	r2, #70	; 0x46
 8006c74:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8006c76:	4a0d      	ldr	r2, [pc, #52]	; (8006cac <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006c78:	61da      	str	r2, [r3, #28]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	841a      	strh	r2, [r3, #32]
        : color(col)
 8006c7e:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24
 8006c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c88:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8006c8a:	b918      	cbnz	r0, 8006c94 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8006c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c90:	4299      	cmp	r1, r3
 8006c92:	d001      	beq.n	8006c98 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8006c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8006c98:	4b03      	ldr	r3, [pc, #12]	; (8006ca8 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8006c9a:	4a04      	ldr	r2, [pc, #16]	; (8006cac <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006c9c:	61da      	str	r2, [r3, #28]
 8006c9e:	e7f9      	b.n	8006c94 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8006ca0:	4b01      	ldr	r3, [pc, #4]	; (8006ca8 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8006ca2:	4a02      	ldr	r2, [pc, #8]	; (8006cac <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006ca4:	61da      	str	r2, [r3, #28]
 8006ca6:	4770      	bx	lr
 8006ca8:	2400637c 	.word	0x2400637c
 8006cac:	08024f38 	.word	0x08024f38

08006cb0 <_ZN8touchgfx8CallbackI14mainScreenViewivvE7executeEi>:
    virtual void execute(T1 t1)
 8006cb0:	b510      	push	{r4, lr}
 8006cb2:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006cb4:	6844      	ldr	r4, [r0, #4]
 8006cb6:	68c2      	ldr	r2, [r0, #12]
 8006cb8:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006cbc:	f012 0f01 	tst.w	r2, #1
 8006cc0:	d102      	bne.n	8006cc8 <_ZN8touchgfx8CallbackI14mainScreenViewivvE7executeEi+0x18>
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4798      	blx	r3
    }
 8006cc6:	bd10      	pop	{r4, pc}
 8006cc8:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8006ccc:	f854 200c 	ldr.w	r2, [r4, ip]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	58d3      	ldr	r3, [r2, r3]
 8006cd4:	e7f6      	b.n	8006cc4 <_ZN8touchgfx8CallbackI14mainScreenViewivvE7executeEi+0x14>

08006cd6 <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006cd6:	6843      	ldr	r3, [r0, #4]
 8006cd8:	b14b      	cbz	r3, 8006cee <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv+0x18>
 8006cda:	6883      	ldr	r3, [r0, #8]
 8006cdc:	b10b      	cbz	r3, 8006ce2 <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv+0xc>
 8006cde:	2001      	movs	r0, #1
 8006ce0:	4770      	bx	lr
 8006ce2:	68c3      	ldr	r3, [r0, #12]
 8006ce4:	f013 0f01 	tst.w	r3, #1
 8006ce8:	d003      	beq.n	8006cf2 <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv+0x1c>
 8006cea:	2001      	movs	r0, #1
 8006cec:	4770      	bx	lr
 8006cee:	2000      	movs	r0, #0
 8006cf0:	4770      	bx	lr
 8006cf2:	2000      	movs	r0, #0
    }
 8006cf4:	4770      	bx	lr

08006cf6 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt>:
    virtual void execute(T1 t1)
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006cfa:	6844      	ldr	r4, [r0, #4]
 8006cfc:	68c2      	ldr	r2, [r0, #12]
 8006cfe:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006d02:	f012 0f01 	tst.w	r2, #1
 8006d06:	d102      	bne.n	8006d0e <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt+0x18>
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	4798      	blx	r3
    }
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8006d12:	f854 200c 	ldr.w	r2, [r4, ip]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	58d3      	ldr	r3, [r2, r3]
 8006d1a:	e7f6      	b.n	8006d0a <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt+0x14>

08006d1c <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006d1c:	6843      	ldr	r3, [r0, #4]
 8006d1e:	b14b      	cbz	r3, 8006d34 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0x18>
 8006d20:	6883      	ldr	r3, [r0, #8]
 8006d22:	b10b      	cbz	r3, 8006d28 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0xc>
 8006d24:	2001      	movs	r0, #1
 8006d26:	4770      	bx	lr
 8006d28:	68c3      	ldr	r3, [r0, #12]
 8006d2a:	f013 0f01 	tst.w	r3, #1
 8006d2e:	d003      	beq.n	8006d38 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0x1c>
 8006d30:	2001      	movs	r0, #1
 8006d32:	4770      	bx	lr
 8006d34:	2000      	movs	r0, #0
 8006d36:	4770      	bx	lr
 8006d38:	2000      	movs	r0, #0
    }
 8006d3a:	4770      	bx	lr

08006d3c <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4b04      	ldr	r3, [pc, #16]	; (8006d54 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev+0x18>)
 8006d42:	6003      	str	r3, [r0, #0]
    }
 8006d44:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev+0x1c>)
 8006d46:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006d48:	2110      	movs	r1, #16
 8006d4a:	f01c fa74 	bl	8023236 <_ZdlPvj>
 8006d4e:	4620      	mov	r0, r4
 8006d50:	bd10      	pop	{r4, pc}
 8006d52:	bf00      	nop
 8006d54:	0802635c 	.word	0x0802635c
 8006d58:	08026344 	.word	0x08026344

08006d5c <_ZN8touchgfx8CallbackI14mainScreenViewivvED0Ev>:
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <_ZN8touchgfx8CallbackI14mainScreenViewivvED0Ev+0x18>)
 8006d62:	6003      	str	r3, [r0, #0]
    }
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <_ZN8touchgfx8CallbackI14mainScreenViewivvED0Ev+0x1c>)
 8006d66:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006d68:	2110      	movs	r1, #16
 8006d6a:	f01c fa64 	bl	8023236 <_ZdlPvj>
 8006d6e:	4620      	mov	r0, r4
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	bf00      	nop
 8006d74:	0802638c 	.word	0x0802638c
 8006d78:	08026374 	.word	0x08026374

08006d7c <_ZN14mainScreenView11setupScreenEv>:
{
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	4604      	mov	r4, r0
    mainScreenViewBase::setupScreen();
 8006d80:	f7fd fc7a 	bl	8004678 <_ZN18mainScreenViewBase11setupScreenEv>
    wifiMenu.setAction(wifiAccessPointSelectedCallback);
 8006d84:	f104 0598 	add.w	r5, r4, #152	; 0x98
 8006d88:	f642 61b4 	movw	r1, #11956	; 0x2eb4
 8006d8c:	4421      	add	r1, r4
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f000 fb84 	bl	800749c <_ZN17wifiMenuContainer9setActionERN8touchgfx15GenericCallbackIivvEE>
     *
     * @param [in] d The Drawable to remove.
     */
    void remove(Drawable& d)
    {
        container.remove(d);
 8006d94:	1d27      	adds	r7, r4, #4
 8006d96:	4629      	mov	r1, r5
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f00c f972 	bl	8013082 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
        container.add(d);
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4638      	mov	r0, r7
 8006da2:	f00c f923 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
        visible = vis;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
    wifiKeyboard.setPosition(0, 0, 480, 272);
 8006dac:	f642 4670 	movw	r6, #11376	; 0x2c70
 8006db0:	19a5      	adds	r5, r4, r6
        setX(x);
 8006db2:	59a3      	ldr	r3, [r4, r6]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	2100      	movs	r1, #0
 8006db8:	4628      	mov	r0, r5
 8006dba:	4798      	blx	r3
        setY(y);
 8006dbc:	59a3      	ldr	r3, [r4, r6]
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	4798      	blx	r3
        setWidth(width);
 8006dc6:	59a3      	ldr	r3, [r4, r6]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8006dce:	4628      	mov	r0, r5
 8006dd0:	4798      	blx	r3
        setHeight(height);
 8006dd2:	59a3      	ldr	r3, [r4, r6]
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006dda:	4628      	mov	r0, r5
 8006ddc:	4798      	blx	r3
    wifiKeyboard.setKeyboardDoneReturnPressedAction(keyboardDonePressedCallback);
 8006dde:	f642 61a4 	movw	r1, #11940	; 0x2ea4
 8006de2:	4421      	add	r1, r4
 8006de4:	4628      	mov	r0, r5
 8006de6:	f7ff f963 	bl	80060b0 <_ZN14CustomKeyboard34setKeyboardDoneReturnPressedActionERN8touchgfx15GenericCallbackIA_tvvEE>
        visible = vis;
 8006dea:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8006dee:	2300      	movs	r3, #0
 8006df0:	f884 3c95 	strb.w	r3, [r4, #3221]	; 0xc95
 8006df4:	4629      	mov	r1, r5
 8006df6:	4638      	mov	r0, r7
 8006df8:	f00c f8f8 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006dfe <_ZN14mainScreenView19keyboardDonePressedEPt>:
{
 8006dfe:	b538      	push	{r3, r4, r5, lr}
 8006e00:	4604      	mov	r4, r0
    wifiKeyboard.clearBuffer();
 8006e02:	f642 4570 	movw	r5, #11376	; 0x2c70
 8006e06:	4405      	add	r5, r0
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f7ff f954 	bl	80060b6 <_ZN14CustomKeyboard11clearBufferEv>
 8006e0e:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8006e12:	2300      	movs	r3, #0
 8006e14:	f884 3c95 	strb.w	r3, [r4, #3221]	; 0xc95
    wifiKeyboard.invalidate();
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f012 f85f 	bl	8018edc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}

08006e20 <_ZN14mainScreenView23wifiAccessPointSelectedEi>:
{
 8006e20:	b530      	push	{r4, r5, lr}
 8006e22:	b0a3      	sub	sp, #140	; 0x8c
 8006e24:	4604      	mov	r4, r0
 8006e26:	460d      	mov	r5, r1
    presenter->getWifiAccessPoints(selectedAP, id);
 8006e28:	460a      	mov	r2, r1
 8006e2a:	4669      	mov	r1, sp
 8006e2c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8006e2e:	f7ff fce5 	bl	80067fc <_ZN19mainScreenPresenter19getWifiAccessPointsER8wifiDatai>
    selectedWiFiID = id;
 8006e32:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8006e36:	f8c3 5ec4 	str.w	r5, [r3, #3780]	; 0xec4
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
    wifiMenu.invalidate();
 8006e40:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8006e44:	f012 f84a 	bl	8018edc <_ZNK8touchgfx8Drawable10invalidateEv>
    if (selectedAP.encrypted)
 8006e48:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8006e4c:	b15b      	cbz	r3, 8006e66 <_ZN14mainScreenView23wifiAccessPointSelectedEi+0x46>
 8006e4e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2c95 	strb.w	r2, [r3, #3221]	; 0xc95
        wifiKeyboard.invalidate();
 8006e58:	f642 4070 	movw	r0, #11376	; 0x2c70
 8006e5c:	4420      	add	r0, r4
 8006e5e:	f012 f83d 	bl	8018edc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8006e62:	b023      	add	sp, #140	; 0x8c
 8006e64:	bd30      	pop	{r4, r5, pc}
        keyboardDonePressed(0);
 8006e66:	2100      	movs	r1, #0
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f7ff ffc8 	bl	8006dfe <_ZN14mainScreenView19keyboardDonePressedEPt>
}
 8006e6e:	e7f8      	b.n	8006e62 <_ZN14mainScreenView23wifiAccessPointSelectedEi+0x42>

08006e70 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	4605      	mov	r5, r0
 8006e74:	4b46      	ldr	r3, [pc, #280]	; (8006f90 <_ZN14mainScreenViewD1Ev+0x120>)
 8006e76:	6003      	str	r3, [r0, #0]
 8006e78:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8006e7c:	4a45      	ldr	r2, [pc, #276]	; (8006f94 <_ZN14mainScreenViewD1Ev+0x124>)
 8006e7e:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
    }
 8006e82:	4a45      	ldr	r2, [pc, #276]	; (8006f98 <_ZN14mainScreenViewD1Ev+0x128>)
 8006e84:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e88:	4a44      	ldr	r2, [pc, #272]	; (8006f9c <_ZN14mainScreenViewD1Ev+0x12c>)
 8006e8a:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
    }
 8006e8e:	4a44      	ldr	r2, [pc, #272]	; (8006fa0 <_ZN14mainScreenViewD1Ev+0x130>)
 8006e90:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
 8006e94:	f642 4170 	movw	r1, #11376	; 0x2c70
 8006e98:	1843      	adds	r3, r0, r1
 8006e9a:	4a42      	ldr	r2, [pc, #264]	; (8006fa4 <_ZN14mainScreenViewD1Ev+0x134>)
 8006e9c:	5042      	str	r2, [r0, r1]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e9e:	4a42      	ldr	r2, [pc, #264]	; (8006fa8 <_ZN14mainScreenViewD1Ev+0x138>)
 8006ea0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }
 8006ea4:	4a41      	ldr	r2, [pc, #260]	; (8006fac <_ZN14mainScreenViewD1Ev+0x13c>)
 8006ea6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006eaa:	4841      	ldr	r0, [pc, #260]	; (8006fb0 <_ZN14mainScreenViewD1Ev+0x140>)
 8006eac:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
    {
 8006eb0:	4a40      	ldr	r2, [pc, #256]	; (8006fb4 <_ZN14mainScreenViewD1Ev+0x144>)
 8006eb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006eb6:	f8c3 01fc 	str.w	r0, [r3, #508]	; 0x1fc
    {
 8006eba:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006ebe:	f8c3 01ec 	str.w	r0, [r3, #492]	; 0x1ec
    {
 8006ec2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006ec6:	f8c3 01dc 	str.w	r0, [r3, #476]	; 0x1dc
    {
 8006eca:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
class TextArea : public Widget
 8006ece:	4f3a      	ldr	r7, [pc, #232]	; (8006fb8 <_ZN14mainScreenViewD1Ev+0x148>)
 8006ed0:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 8006ed4:	4e39      	ldr	r6, [pc, #228]	; (8006fbc <_ZN14mainScreenViewD1Ev+0x14c>)
 8006ed6:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
 8006eda:	4839      	ldr	r0, [pc, #228]	; (8006fc0 <_ZN14mainScreenViewD1Ev+0x150>)
 8006edc:	f8c3 0194 	str.w	r0, [r3, #404]	; 0x194
    {
 8006ee0:	4a38      	ldr	r2, [pc, #224]	; (8006fc4 <_ZN14mainScreenViewD1Ev+0x154>)
 8006ee2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
class Keyboard : public Container
 8006ee6:	4c38      	ldr	r4, [pc, #224]	; (8006fc8 <_ZN14mainScreenViewD1Ev+0x158>)
 8006ee8:	62dc      	str	r4, [r3, #44]	; 0x2c
 8006eea:	4c38      	ldr	r4, [pc, #224]	; (8006fcc <_ZN14mainScreenViewD1Ev+0x15c>)
 8006eec:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8006ef0:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
 8006ef4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8006ef8:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8006ff0 <_ZN14mainScreenViewD1Ev+0x180>
 8006efc:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8006f00:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8006ff4 <_ZN14mainScreenViewD1Ev+0x184>
 8006f04:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8006f08:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
 8006f0c:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
 8006f10:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
 8006f14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006f18:	665c      	str	r4, [r3, #100]	; 0x64
 8006f1a:	6658      	str	r0, [r3, #100]	; 0x64
 8006f1c:	665a      	str	r2, [r3, #100]	; 0x64
class Container : public Drawable
 8006f1e:	482c      	ldr	r0, [pc, #176]	; (8006fd0 <_ZN14mainScreenViewD1Ev+0x160>)
 8006f20:	62d8      	str	r0, [r3, #44]	; 0x2c
 8006f22:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f24:	5068      	str	r0, [r5, r1]
 8006f26:	506a      	str	r2, [r5, r1]
 8006f28:	462f      	mov	r7, r5
 8006f2a:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <_ZN14mainScreenViewD1Ev+0x164>)
 8006f2c:	f847 3b98 	str.w	r3, [r7], #152
 8006f30:	4b29      	ldr	r3, [pc, #164]	; (8006fd8 <_ZN14mainScreenViewD1Ev+0x168>)
 8006f32:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8006f36:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 8006f3a:	443c      	add	r4, r7
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006f3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8006f40:	4a26      	ldr	r2, [pc, #152]	; (8006fdc <_ZN14mainScreenViewD1Ev+0x16c>)
 8006f42:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 8006f46:	4a26      	ldr	r2, [pc, #152]	; (8006fe0 <_ZN14mainScreenViewD1Ev+0x170>)
 8006f48:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 8006f4c:	f515 76f0 	adds.w	r6, r5, #480	; 0x1e0
 8006f50:	d008      	beq.n	8006f64 <_ZN14mainScreenViewD1Ev+0xf4>
 8006f52:	42a6      	cmp	r6, r4
 8006f54:	d006      	beq.n	8006f64 <_ZN14mainScreenViewD1Ev+0xf4>
 8006f56:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4798      	blx	r3
 8006f62:	e7f6      	b.n	8006f52 <_ZN14mainScreenViewD1Ev+0xe2>
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7fe fa11 	bl	800538c <_ZN21wifiMenuContainerBaseD1Ev>
 8006f6a:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <_ZN14mainScreenViewD1Ev+0x15c>)
 8006f6c:	66eb      	str	r3, [r5, #108]	; 0x6c
 8006f6e:	4a14      	ldr	r2, [pc, #80]	; (8006fc0 <_ZN14mainScreenViewD1Ev+0x150>)
 8006f70:	66ea      	str	r2, [r5, #108]	; 0x6c
 8006f72:	4b14      	ldr	r3, [pc, #80]	; (8006fc4 <_ZN14mainScreenViewD1Ev+0x154>)
 8006f74:	66eb      	str	r3, [r5, #108]	; 0x6c
 8006f76:	491b      	ldr	r1, [pc, #108]	; (8006fe4 <_ZN14mainScreenViewD1Ev+0x174>)
 8006f78:	6429      	str	r1, [r5, #64]	; 0x40
 8006f7a:	642a      	str	r2, [r5, #64]	; 0x40
 8006f7c:	642b      	str	r3, [r5, #64]	; 0x40
class View : public Screen
 8006f7e:	4a1a      	ldr	r2, [pc, #104]	; (8006fe8 <_ZN14mainScreenViewD1Ev+0x178>)
 8006f80:	602a      	str	r2, [r5, #0]
    {
 8006f82:	4a1a      	ldr	r2, [pc, #104]	; (8006fec <_ZN14mainScreenViewD1Ev+0x17c>)
 8006f84:	602a      	str	r2, [r5, #0]
 8006f86:	4a12      	ldr	r2, [pc, #72]	; (8006fd0 <_ZN14mainScreenViewD1Ev+0x160>)
 8006f88:	606a      	str	r2, [r5, #4]
 8006f8a:	606b      	str	r3, [r5, #4]
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f90:	080263a4 	.word	0x080263a4
 8006f94:	0802638c 	.word	0x0802638c
 8006f98:	08026374 	.word	0x08026374
 8006f9c:	0802635c 	.word	0x0802635c
 8006fa0:	08026344 	.word	0x08026344
 8006fa4:	08026058 	.word	0x08026058
 8006fa8:	08026040 	.word	0x08026040
 8006fac:	08026010 	.word	0x08026010
 8006fb0:	08026028 	.word	0x08026028
 8006fb4:	08024f94 	.word	0x08024f94
 8006fb8:	08026c54 	.word	0x08026c54
 8006fbc:	08024f38 	.word	0x08024f38
 8006fc0:	08025a0c 	.word	0x08025a0c
 8006fc4:	08026fe4 	.word	0x08026fe4
 8006fc8:	08026eb0 	.word	0x08026eb0
 8006fcc:	08026e44 	.word	0x08026e44
 8006fd0:	080268e0 	.word	0x080268e0
 8006fd4:	08025ad8 	.word	0x08025ad8
 8006fd8:	08026470 	.word	0x08026470
 8006fdc:	08025a8c 	.word	0x08025a8c
 8006fe0:	08025a74 	.word	0x08025a74
 8006fe4:	08026ce4 	.word	0x08026ce4
 8006fe8:	08025aa4 	.word	0x08025aa4
 8006fec:	080270b8 	.word	0x080270b8
 8006ff0:	08025c50 	.word	0x08025c50
 8006ff4:	08026d4c 	.word	0x08026d4c

08006ff8 <_ZN14mainScreenViewD0Ev>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	4b49      	ldr	r3, [pc, #292]	; (8007124 <_ZN14mainScreenViewD0Ev+0x12c>)
 8006ffe:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007000:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8007004:	4a48      	ldr	r2, [pc, #288]	; (8007128 <_ZN14mainScreenViewD0Ev+0x130>)
 8007006:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
    }
 800700a:	4a48      	ldr	r2, [pc, #288]	; (800712c <_ZN14mainScreenViewD0Ev+0x134>)
 800700c:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007010:	4a47      	ldr	r2, [pc, #284]	; (8007130 <_ZN14mainScreenViewD0Ev+0x138>)
 8007012:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
    }
 8007016:	4a47      	ldr	r2, [pc, #284]	; (8007134 <_ZN14mainScreenViewD0Ev+0x13c>)
 8007018:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
 800701c:	f642 4170 	movw	r1, #11376	; 0x2c70
 8007020:	1843      	adds	r3, r0, r1
 8007022:	4a45      	ldr	r2, [pc, #276]	; (8007138 <_ZN14mainScreenViewD0Ev+0x140>)
 8007024:	5042      	str	r2, [r0, r1]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007026:	4a45      	ldr	r2, [pc, #276]	; (800713c <_ZN14mainScreenViewD0Ev+0x144>)
 8007028:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }
 800702c:	4a44      	ldr	r2, [pc, #272]	; (8007140 <_ZN14mainScreenViewD0Ev+0x148>)
 800702e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007032:	4844      	ldr	r0, [pc, #272]	; (8007144 <_ZN14mainScreenViewD0Ev+0x14c>)
 8007034:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
    {
 8007038:	4a43      	ldr	r2, [pc, #268]	; (8007148 <_ZN14mainScreenViewD0Ev+0x150>)
 800703a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800703e:	f8c3 01fc 	str.w	r0, [r3, #508]	; 0x1fc
    {
 8007042:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8007046:	f8c3 01ec 	str.w	r0, [r3, #492]	; 0x1ec
    {
 800704a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800704e:	f8c3 01dc 	str.w	r0, [r3, #476]	; 0x1dc
    {
 8007052:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 8007056:	4f3d      	ldr	r7, [pc, #244]	; (800714c <_ZN14mainScreenViewD0Ev+0x154>)
 8007058:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 800705c:	4e3c      	ldr	r6, [pc, #240]	; (8007150 <_ZN14mainScreenViewD0Ev+0x158>)
 800705e:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
 8007062:	483c      	ldr	r0, [pc, #240]	; (8007154 <_ZN14mainScreenViewD0Ev+0x15c>)
 8007064:	f8c3 0194 	str.w	r0, [r3, #404]	; 0x194
 8007068:	4a3b      	ldr	r2, [pc, #236]	; (8007158 <_ZN14mainScreenViewD0Ev+0x160>)
 800706a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 800706e:	4c3b      	ldr	r4, [pc, #236]	; (800715c <_ZN14mainScreenViewD0Ev+0x164>)
 8007070:	62dc      	str	r4, [r3, #44]	; 0x2c
 8007072:	4c3b      	ldr	r4, [pc, #236]	; (8007160 <_ZN14mainScreenViewD0Ev+0x168>)
 8007074:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8007078:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
 800707c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8007080:	f8df c100 	ldr.w	ip, [pc, #256]	; 8007184 <_ZN14mainScreenViewD0Ev+0x18c>
 8007084:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8007088:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8007188 <_ZN14mainScreenViewD0Ev+0x190>
 800708c:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8007090:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
 8007094:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
 8007098:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
 800709c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80070a0:	665c      	str	r4, [r3, #100]	; 0x64
 80070a2:	6658      	str	r0, [r3, #100]	; 0x64
 80070a4:	665a      	str	r2, [r3, #100]	; 0x64
 80070a6:	482f      	ldr	r0, [pc, #188]	; (8007164 <_ZN14mainScreenViewD0Ev+0x16c>)
 80070a8:	62d8      	str	r0, [r3, #44]	; 0x2c
 80070aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80070ac:	5068      	str	r0, [r5, r1]
 80070ae:	506a      	str	r2, [r5, r1]
 80070b0:	462f      	mov	r7, r5
 80070b2:	4b2d      	ldr	r3, [pc, #180]	; (8007168 <_ZN14mainScreenViewD0Ev+0x170>)
 80070b4:	f847 3b98 	str.w	r3, [r7], #152
 80070b8:	4b2c      	ldr	r3, [pc, #176]	; (800716c <_ZN14mainScreenViewD0Ev+0x174>)
 80070ba:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 80070be:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 80070c2:	443c      	add	r4, r7
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80070c4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80070c8:	4a29      	ldr	r2, [pc, #164]	; (8007170 <_ZN14mainScreenViewD0Ev+0x178>)
 80070ca:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 80070ce:	4a29      	ldr	r2, [pc, #164]	; (8007174 <_ZN14mainScreenViewD0Ev+0x17c>)
 80070d0:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 80070d4:	f515 76f0 	adds.w	r6, r5, #480	; 0x1e0
 80070d8:	d008      	beq.n	80070ec <_ZN14mainScreenViewD0Ev+0xf4>
 80070da:	42a6      	cmp	r6, r4
 80070dc:	d006      	beq.n	80070ec <_ZN14mainScreenViewD0Ev+0xf4>
 80070de:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4620      	mov	r0, r4
 80070e8:	4798      	blx	r3
 80070ea:	e7f6      	b.n	80070da <_ZN14mainScreenViewD0Ev+0xe2>
 80070ec:	4638      	mov	r0, r7
 80070ee:	f7fe f94d 	bl	800538c <_ZN21wifiMenuContainerBaseD1Ev>
 80070f2:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <_ZN14mainScreenViewD0Ev+0x168>)
 80070f4:	66eb      	str	r3, [r5, #108]	; 0x6c
 80070f6:	4a17      	ldr	r2, [pc, #92]	; (8007154 <_ZN14mainScreenViewD0Ev+0x15c>)
 80070f8:	66ea      	str	r2, [r5, #108]	; 0x6c
 80070fa:	4b17      	ldr	r3, [pc, #92]	; (8007158 <_ZN14mainScreenViewD0Ev+0x160>)
 80070fc:	66eb      	str	r3, [r5, #108]	; 0x6c
 80070fe:	491e      	ldr	r1, [pc, #120]	; (8007178 <_ZN14mainScreenViewD0Ev+0x180>)
 8007100:	6429      	str	r1, [r5, #64]	; 0x40
 8007102:	642a      	str	r2, [r5, #64]	; 0x40
 8007104:	642b      	str	r3, [r5, #64]	; 0x40
 8007106:	4a1d      	ldr	r2, [pc, #116]	; (800717c <_ZN14mainScreenViewD0Ev+0x184>)
 8007108:	602a      	str	r2, [r5, #0]
 800710a:	4a1d      	ldr	r2, [pc, #116]	; (8007180 <_ZN14mainScreenViewD0Ev+0x188>)
 800710c:	602a      	str	r2, [r5, #0]
 800710e:	4a15      	ldr	r2, [pc, #84]	; (8007164 <_ZN14mainScreenViewD0Ev+0x16c>)
 8007110:	606a      	str	r2, [r5, #4]
 8007112:	606b      	str	r3, [r5, #4]
 8007114:	f642 61c8 	movw	r1, #11976	; 0x2ec8
 8007118:	4628      	mov	r0, r5
 800711a:	f01c f88c 	bl	8023236 <_ZdlPvj>
 800711e:	4628      	mov	r0, r5
 8007120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007122:	bf00      	nop
 8007124:	080263a4 	.word	0x080263a4
 8007128:	0802638c 	.word	0x0802638c
 800712c:	08026374 	.word	0x08026374
 8007130:	0802635c 	.word	0x0802635c
 8007134:	08026344 	.word	0x08026344
 8007138:	08026058 	.word	0x08026058
 800713c:	08026040 	.word	0x08026040
 8007140:	08026010 	.word	0x08026010
 8007144:	08026028 	.word	0x08026028
 8007148:	08024f94 	.word	0x08024f94
 800714c:	08026c54 	.word	0x08026c54
 8007150:	08024f38 	.word	0x08024f38
 8007154:	08025a0c 	.word	0x08025a0c
 8007158:	08026fe4 	.word	0x08026fe4
 800715c:	08026eb0 	.word	0x08026eb0
 8007160:	08026e44 	.word	0x08026e44
 8007164:	080268e0 	.word	0x080268e0
 8007168:	08025ad8 	.word	0x08025ad8
 800716c:	08026470 	.word	0x08026470
 8007170:	08025a8c 	.word	0x08025a8c
 8007174:	08025a74 	.word	0x08025a74
 8007178:	08026ce4 	.word	0x08026ce4
 800717c:	08025aa4 	.word	0x08025aa4
 8007180:	080270b8 	.word	0x080270b8
 8007184:	08025c50 	.word	0x08025c50
 8007188:	08026d4c 	.word	0x08026d4c

0800718c <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView() :
 800718c:	b530      	push	{r4, r5, lr}
 800718e:	b087      	sub	sp, #28
 8007190:	4604      	mov	r4, r0
    wifiAccessPointSelectedCallback(this, &mainScreenView::wifiAccessPointSelected)
 8007192:	f7fd fb15 	bl	80047c0 <_ZN18mainScreenViewBaseC1Ev>
 8007196:	4b1d      	ldr	r3, [pc, #116]	; (800720c <_ZN14mainScreenViewC1Ev+0x80>)
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	f642 4070 	movw	r0, #11376	; 0x2c70
 800719e:	4420      	add	r0, r4
 80071a0:	f7fe fe34 	bl	8005e0c <_ZN14CustomKeyboardC1Ev>
 80071a4:	4b1a      	ldr	r3, [pc, #104]	; (8007210 <_ZN14mainScreenViewC1Ev+0x84>)
 80071a6:	9302      	str	r3, [sp, #8]
 80071a8:	2500      	movs	r5, #0
 80071aa:	9503      	str	r5, [sp, #12]
 80071ac:	466a      	mov	r2, sp
 80071ae:	ab02      	add	r3, sp, #8
 80071b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80071b4:	e882 0003 	stmia.w	r2, {r0, r1}
class GenericCallback<T1, void, void>
 80071b8:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80071bc:	4915      	ldr	r1, [pc, #84]	; (8007214 <_ZN14mainScreenViewC1Ev+0x88>)
 80071be:	f8c3 1ea4 	str.w	r1, [r3, #3748]	; 0xea4
        : pobject(pObject), pmemfun(pmemfun_1)
 80071c2:	4915      	ldr	r1, [pc, #84]	; (8007218 <_ZN14mainScreenViewC1Ev+0x8c>)
 80071c4:	f8c3 1ea4 	str.w	r1, [r3, #3748]	; 0xea4
 80071c8:	f8c3 4ea8 	str.w	r4, [r3, #3752]	; 0xea8
 80071cc:	f603 6cac 	addw	ip, r3, #3756	; 0xeac
 80071d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80071d8:	4910      	ldr	r1, [pc, #64]	; (800721c <_ZN14mainScreenViewC1Ev+0x90>)
 80071da:	9104      	str	r1, [sp, #16]
 80071dc:	9505      	str	r5, [sp, #20]
 80071de:	a906      	add	r1, sp, #24
 80071e0:	e911 0003 	ldmdb	r1, {r0, r1}
 80071e4:	e882 0003 	stmia.w	r2, {r0, r1}
class GenericCallback<T1, void, void>
 80071e8:	490d      	ldr	r1, [pc, #52]	; (8007220 <_ZN14mainScreenViewC1Ev+0x94>)
 80071ea:	f8c3 1eb4 	str.w	r1, [r3, #3764]	; 0xeb4
        : pobject(pObject), pmemfun(pmemfun_1)
 80071ee:	490d      	ldr	r1, [pc, #52]	; (8007224 <_ZN14mainScreenViewC1Ev+0x98>)
 80071f0:	f8c3 1eb4 	str.w	r1, [r3, #3764]	; 0xeb4
 80071f4:	f8c3 4eb8 	str.w	r4, [r3, #3768]	; 0xeb8
 80071f8:	f603 63bc 	addw	r3, r3, #3772	; 0xebc
 80071fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007200:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8007204:	4620      	mov	r0, r4
 8007206:	b007      	add	sp, #28
 8007208:	bd30      	pop	{r4, r5, pc}
 800720a:	bf00      	nop
 800720c:	080263a4 	.word	0x080263a4
 8007210:	08006dff 	.word	0x08006dff
 8007214:	08026344 	.word	0x08026344
 8007218:	0802635c 	.word	0x0802635c
 800721c:	08006e21 	.word	0x08006e21
 8007220:	08026374 	.word	0x08026374
 8007224:	0802638c 	.word	0x0802638c

08007228 <_ZN14mainScreenView20updateWiFiInformaionEP8wifiDatat>:
{
 8007228:	b508      	push	{r3, lr}
    wifiMenu.updateWifiList(data, numberOfPoints);
 800722a:	3098      	adds	r0, #152	; 0x98
 800722c:	f000 f94f 	bl	80074ce <_ZN17wifiMenuContainer14updateWifiListEP8wifiDatat>
}
 8007230:	bd08      	pop	{r3, pc}

08007232 <_GLOBAL__sub_I__ZN14mainScreenViewC2Ev>:
 8007232:	b508      	push	{r3, lr}
 8007234:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007238:	2001      	movs	r0, #1
 800723a:	f7ff fb07 	bl	800684c <_Z41__static_initialization_and_destruction_0ii>
 800723e:	bd08      	pop	{r3, pc}

08007240 <_GLOBAL__sub_D__ZN14mainScreenViewC2Ev>:
 8007240:	b508      	push	{r3, lr}
 8007242:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007246:	2000      	movs	r0, #0
 8007248:	f7ff fb00 	bl	800684c <_Z41__static_initialization_and_destruction_0ii>
 800724c:	bd08      	pop	{r3, pc}

0800724e <_ZN22wifiInfoLargeContainer15elementSelectedEv>:
    }
    signalStrengthIcon.invalidate();
}

void wifiInfoLargeContainer::elementSelected()
{
 800724e:	b510      	push	{r4, lr}
 8007250:	4604      	mov	r4, r0
    // Inform the view of the event
    if (viewCallback->isValid())
 8007252:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
 8007256:	6803      	ldr	r3, [r0, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	4798      	blx	r3
 800725c:	b128      	cbz	r0, 800726a <_ZN22wifiInfoLargeContainer15elementSelectedEv+0x1c>
    {
        viewCallback->execute(*this);
 800725e:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8007262:	6803      	ldr	r3, [r0, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	4621      	mov	r1, r4
 8007268:	4798      	blx	r3
    }
}
 800726a:	bd10      	pop	{r4, pc}

0800726c <_ZN22wifiInfoLargeContainerD1Ev>:

class wifiInfoLargeContainer : public wifiInfoLargeContainerBase
{
public:
    wifiInfoLargeContainer();
    virtual ~wifiInfoLargeContainer() {}
 800726c:	b510      	push	{r4, lr}
 800726e:	4604      	mov	r4, r0
 8007270:	4b02      	ldr	r3, [pc, #8]	; (800727c <_ZN22wifiInfoLargeContainerD1Ev+0x10>)
 8007272:	6003      	str	r3, [r0, #0]
 8007274:	f7fd fbea 	bl	8004a4c <_ZN26wifiInfoLargeContainerBaseD1Ev>
 8007278:	4620      	mov	r0, r4
 800727a:	bd10      	pop	{r4, pc}
 800727c:	080263d8 	.word	0x080263d8

08007280 <_ZN22wifiInfoLargeContainerD0Ev>:
 8007280:	b510      	push	{r4, lr}
 8007282:	4604      	mov	r4, r0
 8007284:	4b05      	ldr	r3, [pc, #20]	; (800729c <_ZN22wifiInfoLargeContainerD0Ev+0x1c>)
 8007286:	6003      	str	r3, [r0, #0]
 8007288:	f7fd fbe0 	bl	8004a4c <_ZN26wifiInfoLargeContainerBaseD1Ev>
 800728c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007290:	4620      	mov	r0, r4
 8007292:	f01b ffd0 	bl	8023236 <_ZdlPvj>
 8007296:	4620      	mov	r0, r4
 8007298:	bd10      	pop	{r4, pc}
 800729a:	bf00      	nop
 800729c:	080263d8 	.word	0x080263d8

080072a0 <_ZN22wifiInfoLargeContainerC1Ev>:
wifiInfoLargeContainer::wifiInfoLargeContainer()
 80072a0:	b510      	push	{r4, lr}
 80072a2:	4604      	mov	r4, r0
 80072a4:	f7fd fd9a 	bl	8004ddc <_ZN26wifiInfoLargeContainerBaseC1Ev>
 80072a8:	4b01      	ldr	r3, [pc, #4]	; (80072b0 <_ZN22wifiInfoLargeContainerC1Ev+0x10>)
 80072aa:	6023      	str	r3, [r4, #0]
}
 80072ac:	4620      	mov	r0, r4
 80072ae:	bd10      	pop	{r4, pc}
 80072b0:	080263d8 	.word	0x080263d8

080072b4 <_ZN22wifiInfoLargeContainer11setWifiSSIDEPt>:
{
 80072b4:	b510      	push	{r4, lr}
 80072b6:	4604      	mov	r4, r0
    Unicode::strncpy(wifiSSIDBuffer, name, WIFISSID_SIZE);
 80072b8:	2228      	movs	r2, #40	; 0x28
 80072ba:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 80072be:	f013 f9f4 	bl	801a6aa <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
    wifiSSID.invalidate();
 80072c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80072c6:	f011 fe09 	bl	8018edc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80072ca:	bd10      	pop	{r4, pc}

080072cc <_ZN22wifiInfoLargeContainer13setEncryptionEPKt>:
{
 80072cc:	b510      	push	{r4, lr}
 80072ce:	4604      	mov	r4, r0
    Unicode::strncpy(encryptionBuffer, encryptionType, ENCRYPTION_SIZE);
 80072d0:	2228      	movs	r2, #40	; 0x28
 80072d2:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 80072d6:	f013 f9e8 	bl	801a6aa <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
    encryption.invalidate();
 80072da:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80072de:	f011 fdfd 	bl	8018edc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80072e2:	bd10      	pop	{r4, pc}

080072e4 <_ZN22wifiInfoLargeContainer9setActionERN8touchgfx15GenericCallbackIRS_vvEE>:

void wifiInfoLargeContainer::setAction(GenericCallback< wifiInfoLargeContainer& >& callback)
{
    viewCallback = &callback;
 80072e4:	f8c0 1218 	str.w	r1, [r0, #536]	; 0x218
}
 80072e8:	4770      	bx	lr

080072ea <_ZN22wifiInfoLargeContainer5setIdEi>:

void wifiInfoLargeContainer::setId(int newId)
{
    id = newId;
 80072ea:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
}
 80072ee:	4770      	bx	lr

080072f0 <_ZN22wifiInfoLargeContainer5getIdEv>:

int wifiInfoLargeContainer::getId()
{
    return id;
}
 80072f0:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80072f4:	4770      	bx	lr

080072f6 <_ZN22wifiInfoLargeContainer10initializeEv>:
{
 80072f6:	b508      	push	{r3, lr}
    wifiInfoLargeContainerBase::initialize();
 80072f8:	f7fd fc0a 	bl	8004b10 <_ZN26wifiInfoLargeContainerBase10initializeEv>
}
 80072fc:	bd08      	pop	{r3, pc}

080072fe <_ZN22wifiInfoLargeContainer17setSignalStrengthEt>:
{
 80072fe:	b510      	push	{r4, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	4604      	mov	r4, r0
    switch (strength)
 8007304:	3901      	subs	r1, #1
 8007306:	2903      	cmp	r1, #3
 8007308:	d80a      	bhi.n	8007320 <_ZN22wifiInfoLargeContainer17setSignalStrengthEt+0x22>
 800730a:	e8df f001 	tbb	[pc, r1]
 800730e:	0f02      	.short	0x0f02
 8007310:	1f17      	.short	0x1f17
 8007312:	2309      	movs	r3, #9
 8007314:	f8ad 3000 	strh.w	r3, [sp]
        signalStrengthIcon.setBitmap(Bitmap(BITMAP_WIFI_DOT_SETTINGS_ID));
 8007318:	4669      	mov	r1, sp
 800731a:	30c4      	adds	r0, #196	; 0xc4
 800731c:	f00e fd81 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    signalStrengthIcon.invalidate();
 8007320:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 8007324:	f011 fdda 	bl	8018edc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8007328:	b004      	add	sp, #16
 800732a:	bd10      	pop	{r4, pc}
 800732c:	230b      	movs	r3, #11
 800732e:	f8ad 3004 	strh.w	r3, [sp, #4]
        signalStrengthIcon.setBitmap(Bitmap(BITMAP_WIFI_LOW_SETTINGS_ID));
 8007332:	a901      	add	r1, sp, #4
 8007334:	30c4      	adds	r0, #196	; 0xc4
 8007336:	f00e fd74 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        break;
 800733a:	e7f1      	b.n	8007320 <_ZN22wifiInfoLargeContainer17setSignalStrengthEt+0x22>
 800733c:	230c      	movs	r3, #12
 800733e:	f8ad 3008 	strh.w	r3, [sp, #8]
        signalStrengthIcon.setBitmap(Bitmap(BITMAP_WIFI_MID_SETTINGS_ID));
 8007342:	a902      	add	r1, sp, #8
 8007344:	30c4      	adds	r0, #196	; 0xc4
 8007346:	f00e fd6c 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        break;
 800734a:	e7e9      	b.n	8007320 <_ZN22wifiInfoLargeContainer17setSignalStrengthEt+0x22>
 800734c:	230a      	movs	r3, #10
 800734e:	f8ad 300c 	strh.w	r3, [sp, #12]
        signalStrengthIcon.setBitmap(Bitmap(BITMAP_WIFI_FULL_SETTINGS_ID));
 8007352:	a903      	add	r1, sp, #12
 8007354:	30c4      	adds	r0, #196	; 0xc4
 8007356:	f00e fd64 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        break;
 800735a:	e7e1      	b.n	8007320 <_ZN22wifiInfoLargeContainer17setSignalStrengthEt+0x22>

0800735c <_ZN17wifiMenuContainer22wifiListElementClickedER22wifiInfoLargeContainer>:

    wifiListContainer.invalidate();
}

void wifiMenuContainer::wifiListElementClicked(wifiInfoLargeContainer& element)
{
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4604      	mov	r4, r0
 8007360:	460d      	mov	r5, r1
    if (viewCallback->isValid())
 8007362:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8007366:	6803      	ldr	r3, [r0, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	4798      	blx	r3
 800736c:	b900      	cbnz	r0, 8007370 <_ZN17wifiMenuContainer22wifiListElementClickedER22wifiInfoLargeContainer+0x14>
    {
        viewCallback->execute(element.getId());
    }
}
 800736e:	bd70      	pop	{r4, r5, r6, pc}
        viewCallback->execute(element.getId());
 8007370:	f8d4 4144 	ldr.w	r4, [r4, #324]	; 0x144
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	689e      	ldr	r6, [r3, #8]
 8007378:	4628      	mov	r0, r5
 800737a:	f7ff ffb9 	bl	80072f0 <_ZN22wifiInfoLargeContainer5getIdEv>
 800737e:	4601      	mov	r1, r0
 8007380:	4620      	mov	r0, r4
 8007382:	47b0      	blx	r6
}
 8007384:	e7f3      	b.n	800736e <_ZN17wifiMenuContainer22wifiListElementClickedER22wifiInfoLargeContainer+0x12>
	...

08007388 <_ZN17wifiMenuContainerD1Ev>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	4606      	mov	r6, r0
 800738c:	4b0e      	ldr	r3, [pc, #56]	; (80073c8 <_ZN17wifiMenuContainerD1Ev+0x40>)
 800738e:	6003      	str	r3, [r0, #0]
 8007390:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 8007394:	4404      	add	r4, r0
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007396:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800739a:	4a0c      	ldr	r2, [pc, #48]	; (80073cc <_ZN17wifiMenuContainerD1Ev+0x44>)
 800739c:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 80073a0:	4a0b      	ldr	r2, [pc, #44]	; (80073d0 <_ZN17wifiMenuContainerD1Ev+0x48>)
 80073a2:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 80073a6:	f510 75a4 	adds.w	r5, r0, #328	; 0x148
 80073aa:	d008      	beq.n	80073be <_ZN17wifiMenuContainerD1Ev+0x36>
 80073ac:	42a5      	cmp	r5, r4
 80073ae:	d006      	beq.n	80073be <_ZN17wifiMenuContainerD1Ev+0x36>
 80073b0:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4620      	mov	r0, r4
 80073ba:	4798      	blx	r3
 80073bc:	e7f6      	b.n	80073ac <_ZN17wifiMenuContainerD1Ev+0x24>
 80073be:	4630      	mov	r0, r6
 80073c0:	f7fd ffe4 	bl	800538c <_ZN21wifiMenuContainerBaseD1Ev>
 80073c4:	4630      	mov	r0, r6
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	08026470 	.word	0x08026470
 80073cc:	08025a8c 	.word	0x08025a8c
 80073d0:	08025a74 	.word	0x08025a74

080073d4 <_ZN17wifiMenuContainerD0Ev>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	4606      	mov	r6, r0
 80073d8:	4b11      	ldr	r3, [pc, #68]	; (8007420 <_ZN17wifiMenuContainerD0Ev+0x4c>)
 80073da:	6003      	str	r3, [r0, #0]
 80073dc:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 80073e0:	4404      	add	r4, r0
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80073e2:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80073e6:	4a0f      	ldr	r2, [pc, #60]	; (8007424 <_ZN17wifiMenuContainerD0Ev+0x50>)
 80073e8:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 80073ec:	4a0e      	ldr	r2, [pc, #56]	; (8007428 <_ZN17wifiMenuContainerD0Ev+0x54>)
 80073ee:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 80073f2:	f510 75a4 	adds.w	r5, r0, #328	; 0x148
 80073f6:	d008      	beq.n	800740a <_ZN17wifiMenuContainerD0Ev+0x36>
 80073f8:	42a5      	cmp	r5, r4
 80073fa:	d006      	beq.n	800740a <_ZN17wifiMenuContainerD0Ev+0x36>
 80073fc:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4620      	mov	r0, r4
 8007406:	4798      	blx	r3
 8007408:	e7f6      	b.n	80073f8 <_ZN17wifiMenuContainerD0Ev+0x24>
 800740a:	4630      	mov	r0, r6
 800740c:	f7fd ffbe 	bl	800538c <_ZN21wifiMenuContainerBaseD1Ev>
 8007410:	f642 31d8 	movw	r1, #11224	; 0x2bd8
 8007414:	4630      	mov	r0, r6
 8007416:	f01b ff0e 	bl	8023236 <_ZdlPvj>
 800741a:	4630      	mov	r0, r6
 800741c:	bd70      	pop	{r4, r5, r6, pc}
 800741e:	bf00      	nop
 8007420:	08026470 	.word	0x08026470
 8007424:	08025a8c 	.word	0x08025a8c
 8007428:	08025a74 	.word	0x08025a74

0800742c <_ZN17wifiMenuContainerC1Ev>:
wifiMenuContainer::wifiMenuContainer() :
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	4606      	mov	r6, r0
    wifiListElementClickedCallback(this, &wifiMenuContainer::wifiListElementClicked)
 8007432:	f7fd ffed 	bl	8005410 <_ZN21wifiMenuContainerBaseC1Ev>
 8007436:	4b15      	ldr	r3, [pc, #84]	; (800748c <_ZN17wifiMenuContainerC1Ev+0x60>)
 8007438:	6033      	str	r3, [r6, #0]
 800743a:	f506 75a4 	add.w	r5, r6, #328	; 0x148
 800743e:	2413      	movs	r4, #19
 8007440:	e005      	b.n	800744e <_ZN17wifiMenuContainerC1Ev+0x22>
 8007442:	4628      	mov	r0, r5
 8007444:	f7ff ff2c 	bl	80072a0 <_ZN22wifiInfoLargeContainerC1Ev>
 8007448:	f505 7508 	add.w	r5, r5, #544	; 0x220
 800744c:	3c01      	subs	r4, #1
 800744e:	2c00      	cmp	r4, #0
 8007450:	daf7      	bge.n	8007442 <_ZN17wifiMenuContainerC1Ev+0x16>
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <_ZN17wifiMenuContainerC1Ev+0x64>)
 8007454:	9302      	str	r3, [sp, #8]
 8007456:	2300      	movs	r3, #0
 8007458:	9303      	str	r3, [sp, #12]
 800745a:	466a      	mov	r2, sp
 800745c:	ab04      	add	r3, sp, #16
 800745e:	e913 0003 	ldmdb	r3, {r0, r1}
 8007462:	e882 0003 	stmia.w	r2, {r0, r1}
class GenericCallback<T1, void, void>
 8007466:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 800746a:	490a      	ldr	r1, [pc, #40]	; (8007494 <_ZN17wifiMenuContainerC1Ev+0x68>)
 800746c:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
        : pobject(pObject), pmemfun(pmemfun_1)
 8007470:	4909      	ldr	r1, [pc, #36]	; (8007498 <_ZN17wifiMenuContainerC1Ev+0x6c>)
 8007472:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
 8007476:	f8c3 6bcc 	str.w	r6, [r3, #3020]	; 0xbcc
 800747a:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 800747e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007482:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8007486:	4630      	mov	r0, r6
 8007488:	b004      	add	sp, #16
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	08026470 	.word	0x08026470
 8007490:	0800735d 	.word	0x0800735d
 8007494:	08025a74 	.word	0x08025a74
 8007498:	08025a8c 	.word	0x08025a8c

0800749c <_ZN17wifiMenuContainer9setActionERN8touchgfx15GenericCallbackIivvEE>:

void wifiMenuContainer::setAction(GenericCallback< int >& callback)
{
    viewCallback = &callback;
 800749c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
}
 80074a0:	4770      	bx	lr

080074a2 <_ZN17wifiMenuContainer10initializeEv>:
{
 80074a2:	b510      	push	{r4, lr}
 80074a4:	4604      	mov	r4, r0
    wifiMenuContainerBase::initialize();
 80074a6:	f7fd ffa7 	bl	80053f8 <_ZN21wifiMenuContainerBase10initializeEv>
        return rect.width;
 80074aa:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
        rect.width = width;
 80074ae:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
    wifiListContainer.setScrollbarPadding(4);
 80074b2:	3458      	adds	r4, #88	; 0x58
 80074b4:	2104      	movs	r1, #4
 80074b6:	4620      	mov	r0, r4
 80074b8:	f00d f865 	bl	8014586 <_ZN8touchgfx19ScrollableContainer19setScrollbarPaddingEh>
    wifiListContainer.setScrollbarsAlpha(100);
 80074bc:	2164      	movs	r1, #100	; 0x64
 80074be:	4620      	mov	r0, r4
 80074c0:	f00d f85a 	bl	8014578 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>
    wifiListContainer.setScrollbarWidth(5);
 80074c4:	2105      	movs	r1, #5
 80074c6:	4620      	mov	r0, r4
 80074c8:	f00d f860 	bl	801458c <_ZN8touchgfx19ScrollableContainer17setScrollbarWidthEh>
}
 80074cc:	bd10      	pop	{r4, pc}

080074ce <_ZN17wifiMenuContainer14updateWifiListEP8wifiDatat>:
{
 80074ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d2:	4606      	mov	r6, r0
 80074d4:	4688      	mov	r8, r1
 80074d6:	4617      	mov	r7, r2
    wifiList.removeAll();
 80074d8:	f500 798a 	add.w	r9, r0, #276	; 0x114
 80074dc:	4648      	mov	r0, r9
 80074de:	f00c f8e0 	bl	80136a2 <_ZN8touchgfx10ListLayout9removeAllEv>
    for (int cnt = 0; cnt < numberOfPoints; cnt++)
 80074e2:	2500      	movs	r5, #0
 80074e4:	e026      	b.n	8007534 <_ZN17wifiMenuContainer14updateWifiListEP8wifiDatat+0x66>
        wifiListElements[cnt].setWifiSSID(data[cnt].ssid);
 80074e6:	eb05 1405 	add.w	r4, r5, r5, lsl #4
 80074ea:	0164      	lsls	r4, r4, #5
 80074ec:	f504 74a4 	add.w	r4, r4, #328	; 0x148
 80074f0:	4434      	add	r4, r6
 80074f2:	eb05 1a05 	add.w	sl, r5, r5, lsl #4
 80074f6:	eb08 0aca 	add.w	sl, r8, sl, lsl #3
 80074fa:	4651      	mov	r1, sl
 80074fc:	4620      	mov	r0, r4
 80074fe:	f7ff fed9 	bl	80072b4 <_ZN22wifiInfoLargeContainer11setWifiSSIDEPt>
        wifiListElements[cnt].setEncryption(data[cnt].encryption);
 8007502:	f10a 0140 	add.w	r1, sl, #64	; 0x40
 8007506:	4620      	mov	r0, r4
 8007508:	f7ff fee0 	bl	80072cc <_ZN22wifiInfoLargeContainer13setEncryptionEPKt>
        wifiListElements[cnt].setSignalStrength(data[cnt].signalStrength);
 800750c:	f8ba 107c 	ldrh.w	r1, [sl, #124]	; 0x7c
 8007510:	4620      	mov	r0, r4
 8007512:	f7ff fef4 	bl	80072fe <_ZN22wifiInfoLargeContainer17setSignalStrengthEt>
        wifiListElements[cnt].setId(cnt);
 8007516:	4629      	mov	r1, r5
 8007518:	4620      	mov	r0, r4
 800751a:	f7ff fee6 	bl	80072ea <_ZN22wifiInfoLargeContainer5setIdEi>
        wifiList.add(wifiListElements[cnt]);
 800751e:	4621      	mov	r1, r4
 8007520:	4648      	mov	r0, r9
 8007522:	f00c f92d 	bl	8013780 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
        wifiListElements[cnt].setAction(wifiListElementClickedCallback);
 8007526:	f642 31c8 	movw	r1, #11208	; 0x2bc8
 800752a:	4431      	add	r1, r6
 800752c:	4620      	mov	r0, r4
 800752e:	f7ff fed9 	bl	80072e4 <_ZN22wifiInfoLargeContainer9setActionERN8touchgfx15GenericCallbackIRS_vvEE>
    for (int cnt = 0; cnt < numberOfPoints; cnt++)
 8007532:	3501      	adds	r5, #1
 8007534:	42af      	cmp	r7, r5
 8007536:	dcd6      	bgt.n	80074e6 <_ZN17wifiMenuContainer14updateWifiListEP8wifiDatat+0x18>
    wifiListContainer.invalidate();
 8007538:	f106 0058 	add.w	r0, r6, #88	; 0x58
 800753c:	f011 fcce 	bl	8018edc <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8007540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007544 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8007544:	4603      	mov	r3, r0
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007546:	3830      	subs	r0, #48	; 0x30
 8007548:	b2c0      	uxtb	r0, r0
 800754a:	2809      	cmp	r0, #9
 800754c:	d90a      	bls.n	8007564 <Hex2Num+0x20>
        return a - '0';
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800754e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	2a05      	cmp	r2, #5
 8007556:	d906      	bls.n	8007566 <Hex2Num+0x22>
        return (a - 'a') + 10;
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8007558:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	2a05      	cmp	r2, #5
 8007560:	d904      	bls.n	800756c <Hex2Num+0x28>
        return (a - 'A') + 10;
    }

    return 0;
 8007562:	2000      	movs	r0, #0
}
 8007564:	4770      	bx	lr
        return (a - 'a') + 10;
 8007566:	3b57      	subs	r3, #87	; 0x57
 8007568:	b2d8      	uxtb	r0, r3
 800756a:	4770      	bx	lr
        return (a - 'A') + 10;
 800756c:	3b37      	subs	r3, #55	; 0x37
 800756e:	b2d8      	uxtb	r0, r3
 8007570:	4770      	bx	lr

08007572 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8007572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007574:	4605      	mov	r5, r0
 8007576:	460e      	mov	r6, r1
    uint32_t sum = 0;
    uint8_t i = 0;
 8007578:	2400      	movs	r4, #0
    uint32_t sum = 0;
 800757a:	4627      	mov	r7, r4

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800757c:	e006      	b.n	800758c <ParseHexNumber+0x1a>
        sum <<= 4;
 800757e:	013f      	lsls	r7, r7, #4
        sum += Hex2Num(*ptr);
 8007580:	f7ff ffe0 	bl	8007544 <Hex2Num>
 8007584:	4407      	add	r7, r0
        ptr++;
 8007586:	3501      	adds	r5, #1
        i++;
 8007588:	3401      	adds	r4, #1
 800758a:	b2e4      	uxtb	r4, r4
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800758c:	7828      	ldrb	r0, [r5, #0]
 800758e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b05      	cmp	r3, #5
 800759c:	bf88      	it	hi
 800759e:	2a09      	cmphi	r2, #9
 80075a0:	d9ed      	bls.n	800757e <ParseHexNumber+0xc>
 80075a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b05      	cmp	r3, #5
 80075aa:	d9e8      	bls.n	800757e <ParseHexNumber+0xc>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 80075ac:	b106      	cbz	r6, 80075b0 <ParseHexNumber+0x3e>
        *cnt = i;
 80075ae:	7034      	strb	r4, [r6, #0]
    }
    return sum;                                        		/* Return number */
}
 80075b0:	4638      	mov	r0, r7
 80075b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075b4 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 80075b4:	b510      	push	{r4, lr}
 80075b6:	4686      	mov	lr, r0
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 80075b8:	7803      	ldrb	r3, [r0, #0]
 80075ba:	2b2d      	cmp	r3, #45	; 0x2d
 80075bc:	d003      	beq.n	80075c6 <ParseNumber+0x12>
    uint8_t minus = 0, i = 0;
 80075be:	2400      	movs	r4, #0
 80075c0:	46a4      	mov	ip, r4
 80075c2:	2000      	movs	r0, #0
 80075c4:	e00e      	b.n	80075e4 <ParseNumber+0x30>
        minus = 1;
        ptr++;
 80075c6:	f100 0e01 	add.w	lr, r0, #1
        minus = 1;
 80075ca:	2401      	movs	r4, #1
 80075cc:	e7f8      	b.n	80075c0 <ParseNumber+0xc>
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 80075ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80075d2:	3b30      	subs	r3, #48	; 0x30
 80075d4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
        ptr++;
 80075d8:	f10e 0e01 	add.w	lr, lr, #1
        i++;
 80075dc:	f10c 0c01 	add.w	ip, ip, #1
 80075e0:	fa5f fc8c 	uxtb.w	ip, ip
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80075e4:	f89e 3000 	ldrb.w	r3, [lr]
 80075e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	2a09      	cmp	r2, #9
 80075f0:	d9ed      	bls.n	80075ce <ParseNumber+0x1a>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80075f2:	b109      	cbz	r1, 80075f8 <ParseNumber+0x44>
        *cnt = i;
 80075f4:	f881 c000 	strb.w	ip, [r1]
    }
    if (minus) {                                    		/* Minus detected */
 80075f8:	b904      	cbnz	r4, 80075fc <ParseNumber+0x48>
        return 0 - sum;
    }
    return sum;                                       		/* Return number */
}
 80075fa:	bd10      	pop	{r4, pc}
        return 0 - sum;
 80075fc:	4240      	negs	r0, r0
 80075fe:	e7fc      	b.n	80075fa <ParseNumber+0x46>

08007600 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	4604      	mov	r4, r0
 8007606:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8007608:	2500      	movs	r5, #0

  while(* ptr) {
 800760a:	e002      	b.n	8007612 <ParseMAC+0x12>
    hexcnt = 1;
    if(*ptr != ':')
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 800760c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007610:	441c      	add	r4, r3
  while(* ptr) {
 8007612:	7823      	ldrb	r3, [r4, #0]
 8007614:	b173      	cbz	r3, 8007634 <ParseMAC+0x34>
    hexcnt = 1;
 8007616:	2301      	movs	r3, #1
 8007618:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != ':')
 800761c:	7823      	ldrb	r3, [r4, #0]
 800761e:	2b3a      	cmp	r3, #58	; 0x3a
 8007620:	d0f4      	beq.n	800760c <ParseMAC+0xc>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8007622:	f10d 0107 	add.w	r1, sp, #7
 8007626:	4620      	mov	r0, r4
 8007628:	f7ff ffa3 	bl	8007572 <ParseHexNumber>
 800762c:	1c6b      	adds	r3, r5, #1
 800762e:	5570      	strb	r0, [r6, r5]
 8007630:	b2dd      	uxtb	r5, r3
 8007632:	e7eb      	b.n	800760c <ParseMAC+0xc>
  }
}
 8007634:	b002      	add	sp, #8
 8007636:	bd70      	pop	{r4, r5, r6, pc}

08007638 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	4604      	mov	r4, r0
 800763e:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8007640:	2500      	movs	r5, #0

  while(* ptr) {
 8007642:	e002      	b.n	800764a <ParseIP+0x12>
    hexcnt = 1;
    if(*ptr != '.')
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 8007644:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007648:	441c      	add	r4, r3
  while(* ptr) {
 800764a:	7823      	ldrb	r3, [r4, #0]
 800764c:	b173      	cbz	r3, 800766c <ParseIP+0x34>
    hexcnt = 1;
 800764e:	2301      	movs	r3, #1
 8007650:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != '.')
 8007654:	7823      	ldrb	r3, [r4, #0]
 8007656:	2b2e      	cmp	r3, #46	; 0x2e
 8007658:	d0f4      	beq.n	8007644 <ParseIP+0xc>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800765a:	f10d 0107 	add.w	r1, sp, #7
 800765e:	4620      	mov	r0, r4
 8007660:	f7ff ffa8 	bl	80075b4 <ParseNumber>
 8007664:	1c6b      	adds	r3, r5, #1
 8007666:	5570      	strb	r0, [r6, r5]
 8007668:	b2dd      	uxtb	r5, r3
 800766a:	e7eb      	b.n	8007644 <ParseIP+0xc>
  }
}
 800766c:	b002      	add	sp, #8
 800766e:	bd70      	pop	{r4, r5, r6, pc}

08007670 <ArrayTo32bit>:
  }
}

static uint32_t ArrayTo32bit(uint8_t * buf)
{
	return ((buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | (buf[3] << 0));
 8007670:	7802      	ldrb	r2, [r0, #0]
 8007672:	7843      	ldrb	r3, [r0, #1]
 8007674:	041b      	lsls	r3, r3, #16
 8007676:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800767a:	7882      	ldrb	r2, [r0, #2]
 800767c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007680:	78c0      	ldrb	r0, [r0, #3]
}
 8007682:	4318      	orrs	r0, r3
 8007684:	4770      	bx	lr

08007686 <AT_ParseIsConnected>:
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8007686:	7883      	ldrb	r3, [r0, #2]
 8007688:	2b31      	cmp	r3, #49	; 0x31
 800768a:	bf14      	ite	ne
 800768c:	2300      	movne	r3, #0
 800768e:	2301      	moveq	r3, #1
 8007690:	700b      	strb	r3, [r1, #0]
}
 8007692:	4770      	bx	lr

08007694 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8007694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007696:	4604      	mov	r4, r0
 8007698:	460d      	mov	r5, r1
 800769a:	4616      	mov	r6, r2
  int ret = 0;
  int16_t recv_len = 0;

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800769c:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 80076a0:	4608      	mov	r0, r1
 80076a2:	f7f8 fe2f 	bl	8000304 <strlen>
 80076a6:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80076aa:	b281      	uxth	r1, r0
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b8      	blx	r7

  if( ret > 0)
 80076b0:	2800      	cmp	r0, #0
 80076b2:	dd25      	ble.n	8007700 <AT_ExecuteCommand+0x6c>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80076b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80076b8:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80076bc:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80076c0:	4630      	mov	r0, r6
 80076c2:	4798      	blx	r3
 80076c4:	4604      	mov	r4, r0
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 80076c6:	1e43      	subs	r3, r0, #1
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80076ce:	d212      	bcs.n	80076f6 <AT_ExecuteCommand+0x62>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 80076d0:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
 80076d4:	d008      	beq.n	80076e8 <AT_ExecuteCommand+0x54>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
      }
      *(pdata + recv_len) = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	5533      	strb	r3, [r6, r4]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 80076da:	490c      	ldr	r1, [pc, #48]	; (800770c <AT_ExecuteCommand+0x78>)
 80076dc:	4630      	mov	r0, r6
 80076de:	f01c fc8d 	bl	8023ffc <strstr>
 80076e2:	b118      	cbz	r0, 80076ec <AT_ExecuteCommand+0x58>
      {
        return ES_WIFI_STATUS_OK;
 80076e4:	2000      	movs	r0, #0
 80076e6:	e00a      	b.n	80076fe <AT_ExecuteCommand+0x6a>
        recv_len--;
 80076e8:	b21c      	sxth	r4, r3
 80076ea:	e7f4      	b.n	80076d6 <AT_ExecuteCommand+0x42>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80076ec:	4908      	ldr	r1, [pc, #32]	; (8007710 <AT_ExecuteCommand+0x7c>)
 80076ee:	4630      	mov	r0, r6
 80076f0:	f01c fc84 	bl	8023ffc <strstr>
 80076f4:	b930      	cbnz	r0, 8007704 <AT_ExecuteCommand+0x70>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80076f6:	f114 0f04 	cmn.w	r4, #4
 80076fa:	d005      	beq.n	8007708 <AT_ExecuteCommand+0x74>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80076fc:	2004      	movs	r0, #4
}
 80076fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ES_WIFI_STATUS_IO_ERROR;
 8007700:	2004      	movs	r0, #4
 8007702:	e7fc      	b.n	80076fe <AT_ExecuteCommand+0x6a>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007704:	2005      	movs	r0, #5
 8007706:	e7fa      	b.n	80076fe <AT_ExecuteCommand+0x6a>
      return ES_WIFI_STATUS_MODULE_CRASH;
 8007708:	2006      	movs	r0, #6
 800770a:	e7f8      	b.n	80076fe <AT_ExecuteCommand+0x6a>
 800770c:	080264fc 	.word	0x080264fc
 8007710:	08026508 	.word	0x08026508

08007714 <ParseSecurity>:
{
 8007714:	b510      	push	{r4, lr}
 8007716:	4604      	mov	r4, r0
  if(strstr(ptr,"Open")) return ES_WIFI_SEC_OPEN;
 8007718:	4915      	ldr	r1, [pc, #84]	; (8007770 <ParseSecurity+0x5c>)
 800771a:	f01c fc6f 	bl	8023ffc <strstr>
 800771e:	b108      	cbz	r0, 8007724 <ParseSecurity+0x10>
 8007720:	2000      	movs	r0, #0
}
 8007722:	bd10      	pop	{r4, pc}
  else if(strstr(ptr,"WEP")) return ES_WIFI_SEC_WEP;
 8007724:	4913      	ldr	r1, [pc, #76]	; (8007774 <ParseSecurity+0x60>)
 8007726:	4620      	mov	r0, r4
 8007728:	f01c fc68 	bl	8023ffc <strstr>
 800772c:	b108      	cbz	r0, 8007732 <ParseSecurity+0x1e>
 800772e:	2001      	movs	r0, #1
 8007730:	e7f7      	b.n	8007722 <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 8007732:	4911      	ldr	r1, [pc, #68]	; (8007778 <ParseSecurity+0x64>)
 8007734:	4620      	mov	r0, r4
 8007736:	f01c fc61 	bl	8023ffc <strstr>
 800773a:	b980      	cbnz	r0, 800775e <ParseSecurity+0x4a>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 800773c:	490f      	ldr	r1, [pc, #60]	; (800777c <ParseSecurity+0x68>)
 800773e:	4620      	mov	r0, r4
 8007740:	f01c fc5c 	bl	8023ffc <strstr>
 8007744:	b968      	cbnz	r0, 8007762 <ParseSecurity+0x4e>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 8007746:	490e      	ldr	r1, [pc, #56]	; (8007780 <ParseSecurity+0x6c>)
 8007748:	4620      	mov	r0, r4
 800774a:	f01c fc57 	bl	8023ffc <strstr>
 800774e:	b950      	cbnz	r0, 8007766 <ParseSecurity+0x52>
  else if(strstr(ptr,"WPA")) return ES_WIFI_SEC_WPA;
 8007750:	490c      	ldr	r1, [pc, #48]	; (8007784 <ParseSecurity+0x70>)
 8007752:	4620      	mov	r0, r4
 8007754:	f01c fc52 	bl	8023ffc <strstr>
 8007758:	b138      	cbz	r0, 800776a <ParseSecurity+0x56>
 800775a:	2002      	movs	r0, #2
 800775c:	e7e1      	b.n	8007722 <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 800775e:	2004      	movs	r0, #4
 8007760:	e7df      	b.n	8007722 <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 8007762:	2005      	movs	r0, #5
 8007764:	e7dd      	b.n	8007722 <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 8007766:	2003      	movs	r0, #3
 8007768:	e7db      	b.n	8007722 <ParseSecurity+0xe>
  else return ES_WIFI_SEC_UNKNOWN;
 800776a:	20ff      	movs	r0, #255	; 0xff
 800776c:	e7d9      	b.n	8007722 <ParseSecurity+0xe>
 800776e:	bf00      	nop
 8007770:	08026510 	.word	0x08026510
 8007774:	08026518 	.word	0x08026518
 8007778:	0802651c 	.word	0x0802651c
 800777c:	08026528 	.word	0x08026528
 8007780:	08026520 	.word	0x08026520
 8007784:	08026534 	.word	0x08026534

08007788 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8007788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	460d      	mov	r5, r1
 8007790:	4617      	mov	r7, r2
 8007792:	461e      	mov	r6, r3
  int16_t send_len = 0;
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 8007794:	4608      	mov	r0, r1
 8007796:	f7f8 fdb5 	bl	8000304 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800779a:	f010 0f01 	tst.w	r0, #1
 800779e:	d138      	bne.n	8007812 <AT_RequestSendData+0x8a>
 80077a0:	fa1f f880 	uxth.w	r8, r0
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80077a4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80077a8:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80077ac:	4641      	mov	r1, r8
 80077ae:	4628      	mov	r0, r5
 80077b0:	4798      	blx	r3
 80077b2:	b280      	uxth	r0, r0
  if (n == cmd_len)
 80077b4:	4580      	cmp	r8, r0
 80077b6:	d002      	beq.n	80077be <AT_RequestSendData+0x36>
    else
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80077b8:	2004      	movs	r0, #4
}
 80077ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80077be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80077c2:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80077c6:	4631      	mov	r1, r6
 80077c8:	4638      	mov	r0, r7
 80077ca:	4798      	blx	r3
    if (send_len == len)
 80077cc:	42b0      	cmp	r0, r6
 80077ce:	d122      	bne.n	8007816 <AT_RequestSendData+0x8e>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80077d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80077d4:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80077d8:	2100      	movs	r1, #0
 80077da:	9806      	ldr	r0, [sp, #24]
 80077dc:	4798      	blx	r3
      if (recv_len > 0)
 80077de:	2800      	cmp	r0, #0
 80077e0:	dd10      	ble.n	8007804 <AT_RequestSendData+0x7c>
        *(pdata+recv_len) = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	9a06      	ldr	r2, [sp, #24]
 80077e6:	5413      	strb	r3, [r2, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80077e8:	490d      	ldr	r1, [pc, #52]	; (8007820 <AT_RequestSendData+0x98>)
 80077ea:	4610      	mov	r0, r2
 80077ec:	f01c fc06 	bl	8023ffc <strstr>
 80077f0:	b108      	cbz	r0, 80077f6 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 80077f2:	2000      	movs	r0, #0
 80077f4:	e7e1      	b.n	80077ba <AT_RequestSendData+0x32>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80077f6:	490b      	ldr	r1, [pc, #44]	; (8007824 <AT_RequestSendData+0x9c>)
 80077f8:	9806      	ldr	r0, [sp, #24]
 80077fa:	f01c fbff 	bl	8023ffc <strstr>
 80077fe:	b160      	cbz	r0, 800781a <AT_RequestSendData+0x92>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007800:	2005      	movs	r0, #5
 8007802:	e7da      	b.n	80077ba <AT_RequestSendData+0x32>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8007804:	f110 0f04 	cmn.w	r0, #4
 8007808:	d001      	beq.n	800780e <AT_RequestSendData+0x86>
      return ES_WIFI_STATUS_ERROR;
 800780a:	2002      	movs	r0, #2
 800780c:	e7d5      	b.n	80077ba <AT_RequestSendData+0x32>
        return ES_WIFI_STATUS_MODULE_CRASH;
 800780e:	2006      	movs	r0, #6
 8007810:	e7d3      	b.n	80077ba <AT_RequestSendData+0x32>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8007812:	2002      	movs	r0, #2
 8007814:	e7d1      	b.n	80077ba <AT_RequestSendData+0x32>
      return ES_WIFI_STATUS_ERROR;
 8007816:	2002      	movs	r0, #2
 8007818:	e7cf      	b.n	80077ba <AT_RequestSendData+0x32>
          return ES_WIFI_STATUS_ERROR;
 800781a:	2002      	movs	r0, #2
 800781c:	e7cd      	b.n	80077ba <AT_RequestSendData+0x32>
 800781e:	bf00      	nop
 8007820:	080264fc 	.word	0x080264fc
 8007824:	08026508 	.word	0x08026508

08007828 <AT_ParseFWRev>:
{
 8007828:	b530      	push	{r4, r5, lr}
 800782a:	b083      	sub	sp, #12
 800782c:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 1, ".",&saveptr);
 800782e:	aa01      	add	r2, sp, #4
 8007830:	490e      	ldr	r1, [pc, #56]	; (800786c <AT_ParseFWRev+0x44>)
 8007832:	3001      	adds	r0, #1
 8007834:	f01c fc20 	bl	8024078 <strtok_r>
  uint8_t num = 0;
 8007838:	2400      	movs	r4, #0
  while ((ptr != NULL) && (num < 4)) {
 800783a:	e006      	b.n	800784a <AT_ParseFWRev+0x22>
    num++;
 800783c:	3401      	adds	r4, #1
 800783e:	b2e4      	uxtb	r4, r4
    ptr = strtok_r(NULL, ".",&saveptr);
 8007840:	aa01      	add	r2, sp, #4
 8007842:	490a      	ldr	r1, [pc, #40]	; (800786c <AT_ParseFWRev+0x44>)
 8007844:	2000      	movs	r0, #0
 8007846:	f01c fc17 	bl	8024078 <strtok_r>
  while ((ptr != NULL) && (num < 4)) {
 800784a:	1e03      	subs	r3, r0, #0
 800784c:	bf18      	it	ne
 800784e:	2301      	movne	r3, #1
 8007850:	2c03      	cmp	r4, #3
 8007852:	bf88      	it	hi
 8007854:	2300      	movhi	r3, #0
 8007856:	b133      	cbz	r3, 8007866 <AT_ParseFWRev+0x3e>
    switch (num) {
 8007858:	2c03      	cmp	r4, #3
 800785a:	d8ef      	bhi.n	800783c <AT_ParseFWRev+0x14>
      ver[num] =  ParseNumber(ptr,0);
 800785c:	2100      	movs	r1, #0
 800785e:	f7ff fea9 	bl	80075b4 <ParseNumber>
 8007862:	5528      	strb	r0, [r5, r4]
      break;
 8007864:	e7ea      	b.n	800783c <AT_ParseFWRev+0x14>
}
 8007866:	b003      	add	sp, #12
 8007868:	bd30      	pop	{r4, r5, pc}
 800786a:	bf00      	nop
 800786c:	08026538 	.word	0x08026538

08007870 <AT_ParsePing>:
{
 8007870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007872:	b083      	sub	sp, #12
 8007874:	4605      	mov	r5, r0
 8007876:	460c      	mov	r4, r1
 8007878:	4610      	mov	r0, r2
  ptr= strtok_r(pdata,",\n\r",&saveptr);
 800787a:	aa01      	add	r2, sp, #4
 800787c:	490f      	ldr	r1, [pc, #60]	; (80078bc <AT_ParsePing+0x4c>)
 800787e:	f01c fbfb 	bl	8024078 <strtok_r>
 8007882:	4603      	mov	r3, r0
  int i=0;
 8007884:	2600      	movs	r6, #0
  while(ptr)
 8007886:	b1bb      	cbz	r3, 80078b8 <AT_ParsePing+0x48>
    ptr = strtok_r(0,"\n\r",&saveptr);
 8007888:	aa01      	add	r2, sp, #4
 800788a:	490d      	ldr	r1, [pc, #52]	; (80078c0 <AT_ParsePing+0x50>)
 800788c:	2000      	movs	r0, #0
 800788e:	f01c fbf3 	bl	8024078 <strtok_r>
    if (ptr)
 8007892:	4603      	mov	r3, r0
 8007894:	2800      	cmp	r0, #0
 8007896:	d0f6      	beq.n	8007886 <AT_ParsePing+0x16>
      res[i++]=ParseNumber(ptr,0);
 8007898:	1c77      	adds	r7, r6, #1
 800789a:	2100      	movs	r1, #0
 800789c:	f7ff fe8a 	bl	80075b4 <ParseNumber>
 80078a0:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
      if (i==count) return;
 80078a4:	42bc      	cmp	r4, r7
 80078a6:	d007      	beq.n	80078b8 <AT_ParsePing+0x48>
      ptr = strtok_r(0,",\n\r",&saveptr);
 80078a8:	aa01      	add	r2, sp, #4
 80078aa:	4904      	ldr	r1, [pc, #16]	; (80078bc <AT_ParsePing+0x4c>)
 80078ac:	2000      	movs	r0, #0
 80078ae:	f01c fbe3 	bl	8024078 <strtok_r>
 80078b2:	4603      	mov	r3, r0
      res[i++]=ParseNumber(ptr,0);
 80078b4:	463e      	mov	r6, r7
 80078b6:	e7e6      	b.n	8007886 <AT_ParsePing+0x16>
}
 80078b8:	b003      	add	sp, #12
 80078ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078bc:	08026540 	.word	0x08026540
 80078c0:	08026544 	.word	0x08026544

080078c4 <AT_ParseTransportSettings>:
{
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 80078ca:	aa01      	add	r2, sp, #4
 80078cc:	4937      	ldr	r1, [pc, #220]	; (80079ac <AT_ParseTransportSettings+0xe8>)
 80078ce:	3002      	adds	r0, #2
 80078d0:	f01c fbd2 	bl	8024078 <strtok_r>
 80078d4:	4603      	mov	r3, r0
  uint8_t num = 0;
 80078d6:	2600      	movs	r6, #0
  while (ptr != NULL) {
 80078d8:	e010      	b.n	80078fc <AT_ParseTransportSettings+0x38>
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff fe69 	bl	80075b4 <ParseNumber>
 80078e2:	7028      	strb	r0, [r5, #0]
    ptr = strtok_r(NULL, ",",&saveptr);
 80078e4:	aa01      	add	r2, sp, #4
 80078e6:	4931      	ldr	r1, [pc, #196]	; (80079ac <AT_ParseTransportSettings+0xe8>)
 80078e8:	2000      	movs	r0, #0
 80078ea:	f01c fbc5 	bl	8024078 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 80078ee:	4603      	mov	r3, r0
 80078f0:	b118      	cbz	r0, 80078fa <AT_ParseTransportSettings+0x36>
 80078f2:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80078f6:	2a2c      	cmp	r2, #44	; 0x2c
 80078f8:	d053      	beq.n	80079a2 <AT_ParseTransportSettings+0xde>
{
 80078fa:	4626      	mov	r6, r4
  while (ptr != NULL) {
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d053      	beq.n	80079a8 <AT_ParseTransportSettings+0xe4>
    switch (num++) {
 8007900:	1c74      	adds	r4, r6, #1
 8007902:	b2e4      	uxtb	r4, r4
 8007904:	2e09      	cmp	r6, #9
 8007906:	d8ed      	bhi.n	80078e4 <AT_ParseTransportSettings+0x20>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <AT_ParseTransportSettings+0x4c>)
 800790a:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800790e:	bf00      	nop
 8007910:	080078db 	.word	0x080078db
 8007914:	08007939 	.word	0x08007939
 8007918:	08007943 	.word	0x08007943
 800791c:	0800794f 	.word	0x0800794f
 8007920:	0800795b 	.word	0x0800795b
 8007924:	08007967 	.word	0x08007967
 8007928:	08007973 	.word	0x08007973
 800792c:	0800797f 	.word	0x0800797f
 8007930:	0800798b 	.word	0x0800798b
 8007934:	08007997 	.word	0x08007997
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 8007938:	1c69      	adds	r1, r5, #1
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff fe7c 	bl	8007638 <ParseIP>
      break;
 8007940:	e7d0      	b.n	80078e4 <AT_ParseTransportSettings+0x20>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 8007942:	2100      	movs	r1, #0
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff fe35 	bl	80075b4 <ParseNumber>
 800794a:	80e8      	strh	r0, [r5, #6]
      break;
 800794c:	e7ca      	b.n	80078e4 <AT_ParseTransportSettings+0x20>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 800794e:	f105 0108 	add.w	r1, r5, #8
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff fe70 	bl	8007638 <ParseIP>
      break;
 8007958:	e7c4      	b.n	80078e4 <AT_ParseTransportSettings+0x20>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 800795a:	2100      	movs	r1, #0
 800795c:	4618      	mov	r0, r3
 800795e:	f7ff fe29 	bl	80075b4 <ParseNumber>
 8007962:	81a8      	strh	r0, [r5, #12]
      break;
 8007964:	e7be      	b.n	80078e4 <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 8007966:	2100      	movs	r1, #0
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff fe23 	bl	80075b4 <ParseNumber>
 800796e:	73a8      	strb	r0, [r5, #14]
      break;
 8007970:	e7b8      	b.n	80078e4 <AT_ParseTransportSettings+0x20>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 8007972:	2100      	movs	r1, #0
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fe1d 	bl	80075b4 <ParseNumber>
 800797a:	73e8      	strb	r0, [r5, #15]
      break;
 800797c:	e7b2      	b.n	80078e4 <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 800797e:	2100      	movs	r1, #0
 8007980:	4618      	mov	r0, r3
 8007982:	f7ff fe17 	bl	80075b4 <ParseNumber>
 8007986:	7428      	strb	r0, [r5, #16]
      break;
 8007988:	e7ac      	b.n	80078e4 <AT_ParseTransportSettings+0x20>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff fe11 	bl	80075b4 <ParseNumber>
 8007992:	7468      	strb	r0, [r5, #17]
      break;
 8007994:	e7a6      	b.n	80078e4 <AT_ParseTransportSettings+0x20>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 8007996:	2100      	movs	r1, #0
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff fe0b 	bl	80075b4 <ParseNumber>
 800799e:	74a8      	strb	r0, [r5, #18]
      break;
 80079a0:	e7a0      	b.n	80078e4 <AT_ParseTransportSettings+0x20>
      num++;
 80079a2:	1cb4      	adds	r4, r6, #2
 80079a4:	b2e4      	uxtb	r4, r4
 80079a6:	e7a8      	b.n	80078fa <AT_ParseTransportSettings+0x36>
}
 80079a8:	b002      	add	sp, #8
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	0802653c 	.word	0x0802653c

080079b0 <AT_ParseInfo>:
{
 80079b0:	b530      	push	{r4, r5, lr}
 80079b2:	b083      	sub	sp, #12
 80079b4:	4605      	mov	r5, r0
 80079b6:	4608      	mov	r0, r1
  ptr = strtok_r((char *)pdata + 2, ",", &saveptr);
 80079b8:	aa01      	add	r2, sp, #4
 80079ba:	492c      	ldr	r1, [pc, #176]	; (8007a6c <AT_ParseInfo+0xbc>)
 80079bc:	3002      	adds	r0, #2
 80079be:	f01c fb5b 	bl	8024078 <strtok_r>
  uint8_t num = 0;
 80079c2:	2300      	movs	r3, #0
  while (ptr != NULL){
 80079c4:	e00a      	b.n	80079dc <AT_ParseInfo+0x2c>
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80079c6:	2220      	movs	r2, #32
 80079c8:	4601      	mov	r1, r0
 80079ca:	4628      	mov	r0, r5
 80079cc:	f01c fb03 	bl	8023fd6 <strncpy>
    ptr = strtok_r(NULL, ",", &saveptr);
 80079d0:	aa01      	add	r2, sp, #4
 80079d2:	4926      	ldr	r1, [pc, #152]	; (8007a6c <AT_ParseInfo+0xbc>)
 80079d4:	2000      	movs	r0, #0
 80079d6:	f01c fb4f 	bl	8024078 <strtok_r>
    switch (num++) {
 80079da:	4623      	mov	r3, r4
  while (ptr != NULL){
 80079dc:	2800      	cmp	r0, #0
 80079de:	d042      	beq.n	8007a66 <AT_ParseInfo+0xb6>
    switch (num++) {
 80079e0:	1c5c      	adds	r4, r3, #1
 80079e2:	b2e4      	uxtb	r4, r4
 80079e4:	2b06      	cmp	r3, #6
 80079e6:	d8f3      	bhi.n	80079d0 <AT_ParseInfo+0x20>
 80079e8:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <AT_ParseInfo+0x40>)
 80079ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ee:	bf00      	nop
 80079f0:	080079c7 	.word	0x080079c7
 80079f4:	08007a0d 	.word	0x08007a0d
 80079f8:	08007a1b 	.word	0x08007a1b
 80079fc:	08007a29 	.word	0x08007a29
 8007a00:	08007a37 	.word	0x08007a37
 8007a04:	08007a45 	.word	0x08007a45
 8007a08:	08007a51 	.word	0x08007a51
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8007a0c:	2218      	movs	r2, #24
 8007a0e:	4601      	mov	r1, r0
 8007a10:	f105 0020 	add.w	r0, r5, #32
 8007a14:	f01c fadf 	bl	8023fd6 <strncpy>
      break;
 8007a18:	e7da      	b.n	80079d0 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8007a1a:	2210      	movs	r2, #16
 8007a1c:	4601      	mov	r1, r0
 8007a1e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8007a22:	f01c fad8 	bl	8023fd6 <strncpy>
      break;
 8007a26:	e7d3      	b.n	80079d0 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8007a28:	2210      	movs	r2, #16
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8007a30:	f01c fad1 	bl	8023fd6 <strncpy>
      break;
 8007a34:	e7cc      	b.n	80079d0 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8007a36:	2210      	movs	r2, #16
 8007a38:	4601      	mov	r1, r0
 8007a3a:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8007a3e:	f01c faca 	bl	8023fd6 <strncpy>
      break;
 8007a42:	e7c5      	b.n	80079d0 <AT_ParseInfo+0x20>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8007a44:	2100      	movs	r1, #0
 8007a46:	f7ff fdb5 	bl	80075b4 <ParseNumber>
 8007a4a:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
      break;
 8007a4e:	e7bf      	b.n	80079d0 <AT_ParseInfo+0x20>
      ptr = strtok_r(ptr, "\r", &saveptr);
 8007a50:	aa01      	add	r2, sp, #4
 8007a52:	4907      	ldr	r1, [pc, #28]	; (8007a70 <AT_ParseInfo+0xc0>)
 8007a54:	f01c fb10 	bl	8024078 <strtok_r>
 8007a58:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8007a60:	f01c fab9 	bl	8023fd6 <strncpy>
      break;
 8007a64:	e7b4      	b.n	80079d0 <AT_ParseInfo+0x20>
}
 8007a66:	b003      	add	sp, #12
 8007a68:	bd30      	pop	{r4, r5, pc}
 8007a6a:	bf00      	nop
 8007a6c:	0802653c 	.word	0x0802653c
 8007a70:	080266b4 	.word	0x080266b4

08007a74 <AT_ParseSingleAP>:
{
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	460e      	mov	r6, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8007a7a:	aa01      	add	r2, sp, #4
 8007a7c:	4926      	ldr	r1, [pc, #152]	; (8007b18 <AT_ParseSingleAP+0xa4>)
 8007a7e:	3002      	adds	r0, #2
 8007a80:	f01c fafa 	bl	8024078 <strtok_r>
 8007a84:	4604      	mov	r4, r0
  uint8_t num = 0;
 8007a86:	2300      	movs	r3, #0
  while (ptr != NULL) {
 8007a88:	e011      	b.n	8007aae <AT_ParseSingleAP+0x3a>
      ptr[strlen(ptr) - 1] = 0;
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7f8 fc3a 	bl	8000304 <strlen>
 8007a90:	3801      	subs	r0, #1
 8007a92:	2300      	movs	r3, #0
 8007a94:	5423      	strb	r3, [r4, r0]
      strncpy((char *)AP->SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8007a96:	2221      	movs	r2, #33	; 0x21
 8007a98:	1c61      	adds	r1, r4, #1
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f01c fa9b 	bl	8023fd6 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8007aa0:	aa01      	add	r2, sp, #4
 8007aa2:	491d      	ldr	r1, [pc, #116]	; (8007b18 <AT_ParseSingleAP+0xa4>)
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	f01c fae7 	bl	8024078 <strtok_r>
 8007aaa:	4604      	mov	r4, r0
 8007aac:	462b      	mov	r3, r5
  while (ptr != NULL) {
 8007aae:	b38c      	cbz	r4, 8007b14 <AT_ParseSingleAP+0xa0>
    switch (num++) {
 8007ab0:	1c5d      	adds	r5, r3, #1
 8007ab2:	b2ed      	uxtb	r5, r5
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	2b07      	cmp	r3, #7
 8007ab8:	d8f2      	bhi.n	8007aa0 <AT_ParseSingleAP+0x2c>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <AT_ParseSingleAP+0x4c>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007a8b 	.word	0x08007a8b
 8007ac4:	08007ae1 	.word	0x08007ae1
 8007ac8:	08007aed 	.word	0x08007aed
 8007acc:	08007aa1 	.word	0x08007aa1
 8007ad0:	08007aa1 	.word	0x08007aa1
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007aa1 	.word	0x08007aa1
 8007adc:	08007b05 	.word	0x08007b05
      ParseMAC(ptr, AP->MAC);
 8007ae0:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f7ff fd8b 	bl	8007600 <ParseMAC>
      break;
 8007aea:	e7d9      	b.n	8007aa0 <AT_ParseSingleAP+0x2c>
      AP->RSSI = ParseNumber(ptr, NULL);
 8007aec:	2100      	movs	r1, #0
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7ff fd60 	bl	80075b4 <ParseNumber>
 8007af4:	8470      	strh	r0, [r6, #34]	; 0x22
      break;
 8007af6:	e7d3      	b.n	8007aa0 <AT_ParseSingleAP+0x2c>
      AP->Security = ParseSecurity(ptr);
 8007af8:	4620      	mov	r0, r4
 8007afa:	f7ff fe0b 	bl	8007714 <ParseSecurity>
 8007afe:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 8007b02:	e7cd      	b.n	8007aa0 <AT_ParseSingleAP+0x2c>
      AP->Channel = ParseNumber(ptr, NULL);
 8007b04:	2100      	movs	r1, #0
 8007b06:	4620      	mov	r0, r4
 8007b08:	f7ff fd54 	bl	80075b4 <ParseNumber>
 8007b0c:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
      num = 1;
 8007b10:	2501      	movs	r5, #1
      break;
 8007b12:	e7c5      	b.n	8007aa0 <AT_ParseSingleAP+0x2c>
}
 8007b14:	b002      	add	sp, #8
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	0802653c 	.word	0x0802653c

08007b1c <AT_ParseAP>:
{
 8007b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	460f      	mov	r7, r1
  APs->nbr = 0;
 8007b22:	2400      	movs	r4, #0
 8007b24:	f881 4370 	strb.w	r4, [r1, #880]	; 0x370
  ptr = strtok_r(pdata + 2, "," ,&saveptr);
 8007b28:	aa01      	add	r2, sp, #4
 8007b2a:	4935      	ldr	r1, [pc, #212]	; (8007c00 <AT_ParseAP+0xe4>)
 8007b2c:	3002      	adds	r0, #2
 8007b2e:	f01c faa3 	bl	8024078 <strtok_r>
 8007b32:	4605      	mov	r5, r0
  uint8_t num = 0;
 8007b34:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 8007b36:	e015      	b.n	8007b64 <AT_ParseAP+0x48>
      ptr[strlen(ptr) - 1] = 0;
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f7f8 fbe3 	bl	8000304 <strlen>
 8007b3e:	3801      	subs	r0, #1
 8007b40:	2300      	movs	r3, #0
 8007b42:	542b      	strb	r3, [r5, r0]
      strncpy((char *)APs->AP[APs->nbr].SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8007b44:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007b48:	2221      	movs	r2, #33	; 0x21
 8007b4a:	1c69      	adds	r1, r5, #1
 8007b4c:	202c      	movs	r0, #44	; 0x2c
 8007b4e:	fb00 7003 	mla	r0, r0, r3, r7
 8007b52:	f01c fa40 	bl	8023fd6 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8007b56:	aa01      	add	r2, sp, #4
 8007b58:	4929      	ldr	r1, [pc, #164]	; (8007c00 <AT_ParseAP+0xe4>)
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	f01c fa8c 	bl	8024078 <strtok_r>
 8007b60:	4605      	mov	r5, r0
 8007b62:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	d049      	beq.n	8007bfc <AT_ParseAP+0xe0>
 8007b68:	f897 6370 	ldrb.w	r6, [r7, #880]	; 0x370
 8007b6c:	2e13      	cmp	r6, #19
 8007b6e:	d845      	bhi.n	8007bfc <AT_ParseAP+0xe0>
    switch (num++) {
 8007b70:	1c5c      	adds	r4, r3, #1
 8007b72:	b2e4      	uxtb	r4, r4
 8007b74:	3b01      	subs	r3, #1
 8007b76:	2b07      	cmp	r3, #7
 8007b78:	d8ed      	bhi.n	8007b56 <AT_ParseAP+0x3a>
 8007b7a:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <AT_ParseAP+0x64>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007b39 	.word	0x08007b39
 8007b84:	08007ba1 	.word	0x08007ba1
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	08007b57 	.word	0x08007b57
 8007b90:	08007b57 	.word	0x08007b57
 8007b94:	08007bcb 	.word	0x08007bcb
 8007b98:	08007b57 	.word	0x08007b57
 8007b9c:	08007bdd 	.word	0x08007bdd
      ParseMAC(ptr, APs->AP[APs->nbr].MAC);
 8007ba0:	212c      	movs	r1, #44	; 0x2c
 8007ba2:	fb06 f101 	mul.w	r1, r6, r1
 8007ba6:	3120      	adds	r1, #32
 8007ba8:	4439      	add	r1, r7
 8007baa:	3104      	adds	r1, #4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f7ff fd27 	bl	8007600 <ParseMAC>
      break;
 8007bb2:	e7d0      	b.n	8007b56 <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].RSSI = ParseNumber(ptr, NULL);
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f7ff fcfc 	bl	80075b4 <ParseNumber>
 8007bbc:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007bc0:	222c      	movs	r2, #44	; 0x2c
 8007bc2:	fb02 7303 	mla	r3, r2, r3, r7
 8007bc6:	8458      	strh	r0, [r3, #34]	; 0x22
      break;
 8007bc8:	e7c5      	b.n	8007b56 <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Security = ParseSecurity(ptr);
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f7ff fda2 	bl	8007714 <ParseSecurity>
 8007bd0:	232c      	movs	r3, #44	; 0x2c
 8007bd2:	fb03 7606 	mla	r6, r3, r6, r7
 8007bd6:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 8007bda:	e7bc      	b.n	8007b56 <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Channel = ParseNumber(ptr, NULL);
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4628      	mov	r0, r5
 8007be0:	f7ff fce8 	bl	80075b4 <ParseNumber>
 8007be4:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007be8:	222c      	movs	r2, #44	; 0x2c
 8007bea:	fb02 7203 	mla	r2, r2, r3, r7
 8007bee:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
      APs->nbr++;
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
      num = 1;
 8007bf8:	2401      	movs	r4, #1
      break;
 8007bfa:	e7ac      	b.n	8007b56 <AT_ParseAP+0x3a>
}
 8007bfc:	b003      	add	sp, #12
 8007bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c00:	0802653c 	.word	0x0802653c

08007c04 <AT_ParseConnSettings>:
{
 8007c04:	b570      	push	{r4, r5, r6, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8007c0a:	aa01      	add	r2, sp, #4
 8007c0c:	4942      	ldr	r1, [pc, #264]	; (8007d18 <AT_ParseConnSettings+0x114>)
 8007c0e:	3002      	adds	r0, #2
 8007c10:	f01c fa32 	bl	8024078 <strtok_r>
 8007c14:	4603      	mov	r3, r0
  uint8_t num = 0;
 8007c16:	2600      	movs	r6, #0
  while (ptr != NULL) {
 8007c18:	e010      	b.n	8007c3c <AT_ParseConnSettings+0x38>
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8007c1a:	2221      	movs	r2, #33	; 0x21
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f01c f9d9 	bl	8023fd6 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8007c24:	aa01      	add	r2, sp, #4
 8007c26:	493c      	ldr	r1, [pc, #240]	; (8007d18 <AT_ParseConnSettings+0x114>)
 8007c28:	2000      	movs	r0, #0
 8007c2a:	f01c fa25 	bl	8024078 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8007c2e:	4603      	mov	r3, r0
 8007c30:	b118      	cbz	r0, 8007c3a <AT_ParseConnSettings+0x36>
 8007c32:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8007c36:	2a2c      	cmp	r2, #44	; 0x2c
 8007c38:	d069      	beq.n	8007d0e <AT_ParseConnSettings+0x10a>
{
 8007c3a:	4626      	mov	r6, r4
  while (ptr != NULL) {
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d069      	beq.n	8007d14 <AT_ParseConnSettings+0x110>
    switch (num++) {
 8007c40:	1c74      	adds	r4, r6, #1
 8007c42:	b2e4      	uxtb	r4, r4
 8007c44:	2e0b      	cmp	r6, #11
 8007c46:	d8ed      	bhi.n	8007c24 <AT_ParseConnSettings+0x20>
 8007c48:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <AT_ParseConnSettings+0x4c>)
 8007c4a:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8007c4e:	bf00      	nop
 8007c50:	08007c1b 	.word	0x08007c1b
 8007c54:	08007c81 	.word	0x08007c81
 8007c58:	08007c8d 	.word	0x08007c8d
 8007c5c:	08007c9b 	.word	0x08007c9b
 8007c60:	08007ca9 	.word	0x08007ca9
 8007c64:	08007cb7 	.word	0x08007cb7
 8007c68:	08007cc3 	.word	0x08007cc3
 8007c6c:	08007ccf 	.word	0x08007ccf
 8007c70:	08007cdb 	.word	0x08007cdb
 8007c74:	08007ce7 	.word	0x08007ce7
 8007c78:	08007cf3 	.word	0x08007cf3
 8007c7c:	08007d01 	.word	0x08007d01
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8007c80:	2221      	movs	r2, #33	; 0x21
 8007c82:	4619      	mov	r1, r3
 8007c84:	18a8      	adds	r0, r5, r2
 8007c86:	f01c f9a6 	bl	8023fd6 <strncpy>
      break;
 8007c8a:	e7cb      	b.n	8007c24 <AT_ParseConnSettings+0x20>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff fc90 	bl	80075b4 <ParseNumber>
 8007c94:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
        break;
 8007c98:	e7c4      	b.n	8007c24 <AT_ParseConnSettings+0x20>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fc89 	bl	80075b4 <ParseNumber>
 8007ca2:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
      break;
 8007ca6:	e7bd      	b.n	8007c24 <AT_ParseConnSettings+0x20>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff fc82 	bl	80075b4 <ParseNumber>
 8007cb0:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
      break;
 8007cb4:	e7b6      	b.n	8007c24 <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Addr);
 8007cb6:	f105 0148 	add.w	r1, r5, #72	; 0x48
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff fcbc 	bl	8007638 <ParseIP>
      break;
 8007cc0:	e7b0      	b.n	8007c24 <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Mask);
 8007cc2:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fcb6 	bl	8007638 <ParseIP>
      break;
 8007ccc:	e7aa      	b.n	8007c24 <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8007cce:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fcb0 	bl	8007638 <ParseIP>
      break;
 8007cd8:	e7a4      	b.n	8007c24 <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS1);
 8007cda:	f105 0154 	add.w	r1, r5, #84	; 0x54
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fcaa 	bl	8007638 <ParseIP>
      break;
 8007ce4:	e79e      	b.n	8007c24 <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS2);
 8007ce6:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff fca4 	bl	8007638 <ParseIP>
      break;
 8007cf0:	e798      	b.n	8007c24 <AT_ParseConnSettings+0x20>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff fc5d 	bl	80075b4 <ParseNumber>
 8007cfa:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
      break;
 8007cfe:	e791      	b.n	8007c24 <AT_ParseConnSettings+0x20>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8007d00:	2100      	movs	r1, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff fc56 	bl	80075b4 <ParseNumber>
 8007d08:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
      break;
 8007d0c:	e78a      	b.n	8007c24 <AT_ParseConnSettings+0x20>
      num++;
 8007d0e:	1cb4      	adds	r4, r6, #2
 8007d10:	b2e4      	uxtb	r4, r4
 8007d12:	e792      	b.n	8007c3a <AT_ParseConnSettings+0x36>
}
 8007d14:	b002      	add	sp, #8
 8007d16:	bd70      	pop	{r4, r5, r6, pc}
 8007d18:	0802653c 	.word	0x0802653c

08007d1c <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8007d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d20:	4604      	mov	r4, r0
 8007d22:	460d      	mov	r5, r1
 8007d24:	4690      	mov	r8, r2
 8007d26:	461e      	mov	r6, r3
  int len;
  uint8_t *p=Obj->CmdData;
 8007d28:	f500 7994 	add.w	r9, r0, #296	; 0x128

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007d2c:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8007d30:	4608      	mov	r0, r1
 8007d32:	f7f8 fae7 	bl	8000304 <strlen>
 8007d36:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007d3a:	b281      	uxth	r1, r0
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b8      	blx	r7
 8007d40:	2800      	cmp	r0, #0
 8007d42:	dd48      	ble.n	8007dd6 <AT_RequestReceiveData+0xba>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8007d44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8007d48:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4648      	mov	r0, r9
 8007d50:	4798      	blx	r3
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8007d52:	f110 0f04 	cmn.w	r0, #4
 8007d56:	d041      	beq.n	8007ddc <AT_RequestReceiveData+0xc0>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8007d58:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8007d5c:	2b0d      	cmp	r3, #13
 8007d5e:	d13f      	bne.n	8007de0 <AT_RequestReceiveData+0xc4>
 8007d60:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8007d64:	2b0a      	cmp	r3, #10
 8007d66:	d13d      	bne.n	8007de4 <AT_RequestReceiveData+0xc8>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
    }
    len-=2;
 8007d68:	1e85      	subs	r5, r0, #2
    p+=2;
 8007d6a:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    if (len >= AT_OK_STRING_LEN)
 8007d6e:	2d07      	cmp	r5, #7
 8007d70:	d802      	bhi.n	8007d78 <AT_RequestReceiveData+0x5c>

     *ReadData = 0;
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8007d72:	2004      	movs	r0, #4
 8007d74:	e030      	b.n	8007dd8 <AT_RequestReceiveData+0xbc>
     while(len && (p[len-1]==0x15)) len--;
 8007d76:	3d01      	subs	r5, #1
 8007d78:	b125      	cbz	r5, 8007d84 <AT_RequestReceiveData+0x68>
 8007d7a:	1963      	adds	r3, r4, r5
 8007d7c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007d80:	2b15      	cmp	r3, #21
 8007d82:	d0f8      	beq.n	8007d76 <AT_RequestReceiveData+0x5a>
     p[len] = '\0';
 8007d84:	2300      	movs	r3, #0
 8007d86:	5563      	strb	r3, [r4, r5]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8007d88:	f1a5 0008 	sub.w	r0, r5, #8
 8007d8c:	4916      	ldr	r1, [pc, #88]	; (8007de8 <AT_RequestReceiveData+0xcc>)
 8007d8e:	4420      	add	r0, r4
 8007d90:	f01c f934 	bl	8023ffc <strstr>
 8007d94:	b170      	cbz	r0, 8007db4 <AT_RequestReceiveData+0x98>
       *ReadData = len - AT_OK_STRING_LEN;
 8007d96:	3d08      	subs	r5, #8
 8007d98:	b2ad      	uxth	r5, r5
 8007d9a:	9b08      	ldr	r3, [sp, #32]
 8007d9c:	801d      	strh	r5, [r3, #0]
	   if (*ReadData > Reqlen)
 8007d9e:	42b5      	cmp	r5, r6
 8007da0:	d900      	bls.n	8007da4 <AT_RequestReceiveData+0x88>
         *ReadData = Reqlen;
 8007da2:	801e      	strh	r6, [r3, #0]
       memcpy(pdata, p, *ReadData);
 8007da4:	9b08      	ldr	r3, [sp, #32]
 8007da6:	881a      	ldrh	r2, [r3, #0]
 8007da8:	4621      	mov	r1, r4
 8007daa:	4640      	mov	r0, r8
 8007dac:	f01b fbfa 	bl	80235a4 <memcpy>
       return ES_WIFI_STATUS_OK;
 8007db0:	2000      	movs	r0, #0
 8007db2:	e011      	b.n	8007dd8 <AT_RequestReceiveData+0xbc>
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8007db4:	1f28      	subs	r0, r5, #4
 8007db6:	2204      	movs	r2, #4
 8007db8:	490c      	ldr	r1, [pc, #48]	; (8007dec <AT_RequestReceiveData+0xd0>)
 8007dba:	4420      	add	r0, r4
 8007dbc:	f01b fbe2 	bl	8023584 <memcmp>
 8007dc0:	b920      	cbnz	r0, 8007dcc <AT_RequestReceiveData+0xb0>
       *ReadData = 0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9a08      	ldr	r2, [sp, #32]
 8007dc6:	8013      	strh	r3, [r2, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007dc8:	2005      	movs	r0, #5
 8007dca:	e005      	b.n	8007dd8 <AT_RequestReceiveData+0xbc>
     *ReadData = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9a08      	ldr	r2, [sp, #32]
 8007dd0:	8013      	strh	r3, [r2, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007dd2:	2005      	movs	r0, #5
 8007dd4:	e000      	b.n	8007dd8 <AT_RequestReceiveData+0xbc>
  return ES_WIFI_STATUS_IO_ERROR;
 8007dd6:	2004      	movs	r0, #4
}
 8007dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return ES_WIFI_STATUS_MODULE_CRASH;
 8007ddc:	2006      	movs	r0, #6
 8007dde:	e7fb      	b.n	8007dd8 <AT_RequestReceiveData+0xbc>
     return  ES_WIFI_STATUS_IO_ERROR;
 8007de0:	2004      	movs	r0, #4
 8007de2:	e7f9      	b.n	8007dd8 <AT_RequestReceiveData+0xbc>
 8007de4:	2004      	movs	r0, #4
 8007de6:	e7f7      	b.n	8007dd8 <AT_RequestReceiveData+0xbc>
 8007de8:	080264fc 	.word	0x080264fc
 8007dec:	08026500 	.word	0x08026500

08007df0 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8007df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007df8:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8007dfc:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8007e00:	2000      	movs	r0, #0
 8007e02:	4798      	blx	r3
 8007e04:	b110      	cbz	r0, 8007e0c <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8007e06:	2502      	movs	r5, #2
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8007e08:	4628      	mov	r0, r5
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8007e0c:	f504 7694 	add.w	r6, r4, #296	; 0x128
 8007e10:	4632      	mov	r2, r6
 8007e12:	4906      	ldr	r1, [pc, #24]	; (8007e2c <ES_WIFI_Init+0x3c>)
 8007e14:	4620      	mov	r0, r4
 8007e16:	f7ff fc3d 	bl	8007694 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d1f3      	bne.n	8007e08 <ES_WIFI_Init+0x18>
      AT_ParseInfo (Obj, Obj->CmdData);
 8007e20:	4631      	mov	r1, r6
 8007e22:	4620      	mov	r0, r4
 8007e24:	f7ff fdc4 	bl	80079b0 <AT_ParseInfo>
 8007e28:	e7ee      	b.n	8007e08 <ES_WIFI_Init+0x18>
 8007e2a:	bf00      	nop
 8007e2c:	08026548 	.word	0x08026548

08007e30 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8007e30:	b470      	push	{r4, r5, r6}
 8007e32:	9c03      	ldr	r4, [sp, #12]
 8007e34:	9d04      	ldr	r5, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8007e36:	2900      	cmp	r1, #0
 8007e38:	bf18      	it	ne
 8007e3a:	2800      	cmpne	r0, #0
 8007e3c:	d013      	beq.n	8007e66 <ES_WIFI_RegisterBusIO+0x36>
 8007e3e:	460e      	mov	r6, r1
 8007e40:	fab4 f184 	clz	r1, r4
 8007e44:	0949      	lsrs	r1, r1, #5
 8007e46:	b182      	cbz	r2, 8007e6a <ES_WIFI_RegisterBusIO+0x3a>
 8007e48:	b979      	cbnz	r1, 8007e6a <ES_WIFI_RegisterBusIO+0x3a>
 8007e4a:	b185      	cbz	r5, 8007e6e <ES_WIFI_RegisterBusIO+0x3e>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 8007e4c:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8007e50:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8007e54:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8007e58:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8007e5c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8007e60:	2000      	movs	r0, #0
}
 8007e62:	bc70      	pop	{r4, r5, r6}
 8007e64:	4770      	bx	lr
    return ES_WIFI_STATUS_ERROR;
 8007e66:	2002      	movs	r0, #2
 8007e68:	e7fb      	b.n	8007e62 <ES_WIFI_RegisterBusIO+0x32>
 8007e6a:	2002      	movs	r0, #2
 8007e6c:	e7f9      	b.n	8007e62 <ES_WIFI_RegisterBusIO+0x32>
 8007e6e:	2002      	movs	r0, #2
 8007e70:	e7f7      	b.n	8007e62 <ES_WIFI_RegisterBusIO+0x32>
	...

08007e74 <ES_WIFI_ListAccessPoints>:
  * @param  Obj: pointer to module handle
  * @param  APs: pointer Access points structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_ListAccessPoints(ES_WIFIObject_t *Obj, ES_WIFI_APs_t *APs)
{
 8007e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e76:	b083      	sub	sp, #12
 8007e78:	4606      	mov	r6, r0
 8007e7a:	460f      	mov	r7, r1
  ES_WIFI_Status_t ret;
  int send_len;
  int16_t recv_len = 0;
  uint8_t version[4] = { 0 };
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9301      	str	r3, [sp, #4]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, (char*)Obj->FW_Rev);
 8007e80:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8007e84:	f100 0120 	add.w	r1, r0, #32
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f01c f82d 	bl	8023ee8 <siprintf>

  AT_ParseFWRev((char*)Obj->CmdData, version);
 8007e8e:	a901      	add	r1, sp, #4
 8007e90:	4620      	mov	r0, r4
 8007e92:	f7ff fcc9 	bl	8007828 <AT_ParseFWRev>

  if (ArrayTo32bit(version) >= UPDATED_SCAN_PARAMETERS_FW_REV)
 8007e96:	a801      	add	r0, sp, #4
 8007e98:	f7ff fbea 	bl	8007670 <ArrayTo32bit>
 8007e9c:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <ES_WIFI_ListAccessPoints+0x104>)
 8007e9e:	4298      	cmp	r0, r3
 8007ea0:	d958      	bls.n	8007f54 <ES_WIFI_ListAccessPoints+0xe0>
  {
    APs->nbr = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370

    sprintf((char*)Obj->CmdData,"F0=2\r");
 8007ea8:	4b34      	ldr	r3, [pc, #208]	; (8007f7c <ES_WIFI_ListAccessPoints+0x108>)
 8007eaa:	6818      	ldr	r0, [r3, #0]
 8007eac:	f8c6 0128 	str.w	r0, [r6, #296]	; 0x128
 8007eb0:	889b      	ldrh	r3, [r3, #4]
 8007eb2:	80a3      	strh	r3, [r4, #4]

    send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8007eb4:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f7f8 fa23 	bl	8000304 <strlen>
 8007ebe:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8007ec2:	b281      	uxth	r1, r0
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	47a8      	blx	r5

    if (send_len == 5)
 8007ec8:	2805      	cmp	r0, #5
 8007eca:	d019      	beq.n	8007f00 <ES_WIFI_ListAccessPoints+0x8c>
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
	  } while (send_len == 3);
    }

    UNLOCK_WIFI();
    return ES_WIFI_STATUS_IO_ERROR;
 8007ecc:	2504      	movs	r5, #4
      AT_ParseAP((char *)Obj->CmdData, APs);
    }
    UNLOCK_WIFI();
    return ret;
  }
}
 8007ece:	4628      	mov	r0, r5
 8007ed0:	b003      	add	sp, #12
 8007ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8007ed4:	f115 0f04 	cmn.w	r5, #4
 8007ed8:	d04b      	beq.n	8007f72 <ES_WIFI_ListAccessPoints+0xfe>
        if (APs->nbr < ES_WIFI_MAX_DETECTED_AP)
 8007eda:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007ede:	2b13      	cmp	r3, #19
 8007ee0:	d92c      	bls.n	8007f3c <ES_WIFI_ListAccessPoints+0xc8>
        sprintf((char*)Obj->CmdData,"MR\r");
 8007ee2:	4b27      	ldr	r3, [pc, #156]	; (8007f80 <ES_WIFI_ListAccessPoints+0x10c>)
 8007ee4:	6818      	ldr	r0, [r3, #0]
 8007ee6:	6020      	str	r0, [r4, #0]
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8007ee8:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8007eec:	4620      	mov	r0, r4
 8007eee:	f7f8 fa09 	bl	8000304 <strlen>
 8007ef2:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8007ef6:	b281      	uxth	r1, r0
 8007ef8:	4620      	mov	r0, r4
 8007efa:	47a8      	blx	r5
	  } while (send_len == 3);
 8007efc:	2803      	cmp	r0, #3
 8007efe:	d1e5      	bne.n	8007ecc <ES_WIFI_ListAccessPoints+0x58>
	    recv_len = Obj->fops.IO_Receive(Obj->CmdData, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007f00:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 8007f04:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8007f08:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	4798      	blx	r3
 8007f10:	4605      	mov	r5, r0
        if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8007f12:	1e43      	subs	r3, r0, #1
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f240 5276 	movw	r2, #1398	; 0x576
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d8da      	bhi.n	8007ed4 <ES_WIFI_ListAccessPoints+0x60>
          *(Obj->CmdData + recv_len) = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	5423      	strb	r3, [r4, r0]
	      if(strstr((char *)Obj->CmdData, AT_OK_STRING))
 8007f22:	4918      	ldr	r1, [pc, #96]	; (8007f84 <ES_WIFI_ListAccessPoints+0x110>)
 8007f24:	4620      	mov	r0, r4
 8007f26:	f01c f869 	bl	8023ffc <strstr>
 8007f2a:	bb00      	cbnz	r0, 8007f6e <ES_WIFI_ListAccessPoints+0xfa>
	      else if(strstr((char *)Obj->CmdData, AT_ERROR_STRING))
 8007f2c:	4916      	ldr	r1, [pc, #88]	; (8007f88 <ES_WIFI_ListAccessPoints+0x114>)
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f01c f864 	bl	8023ffc <strstr>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d0cd      	beq.n	8007ed4 <ES_WIFI_ListAccessPoints+0x60>
            return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007f38:	2505      	movs	r5, #5
 8007f3a:	e7c8      	b.n	8007ece <ES_WIFI_ListAccessPoints+0x5a>
          AT_ParseSingleAP((char *)Obj->CmdData, &(APs->AP[APs->nbr]));
 8007f3c:	212c      	movs	r1, #44	; 0x2c
 8007f3e:	fb01 7103 	mla	r1, r1, r3, r7
 8007f42:	4620      	mov	r0, r4
 8007f44:	f7ff fd96 	bl	8007a74 <AT_ParseSingleAP>
          APs->nbr++;
 8007f48:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
 8007f52:	e7c6      	b.n	8007ee2 <ES_WIFI_ListAccessPoints+0x6e>
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"F0\r", Obj->CmdData);
 8007f54:	4622      	mov	r2, r4
 8007f56:	490d      	ldr	r1, [pc, #52]	; (8007f8c <ES_WIFI_ListAccessPoints+0x118>)
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7ff fb9b 	bl	8007694 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007f5e:	4605      	mov	r5, r0
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d1b4      	bne.n	8007ece <ES_WIFI_ListAccessPoints+0x5a>
      AT_ParseAP((char *)Obj->CmdData, APs);
 8007f64:	4639      	mov	r1, r7
 8007f66:	4620      	mov	r0, r4
 8007f68:	f7ff fdd8 	bl	8007b1c <AT_ParseAP>
    return ret;
 8007f6c:	e7af      	b.n	8007ece <ES_WIFI_ListAccessPoints+0x5a>
		    return ES_WIFI_STATUS_OK;
 8007f6e:	2500      	movs	r5, #0
 8007f70:	e7ad      	b.n	8007ece <ES_WIFI_ListAccessPoints+0x5a>
	      return ES_WIFI_STATUS_MODULE_CRASH;
 8007f72:	2506      	movs	r5, #6
 8007f74:	e7ab      	b.n	8007ece <ES_WIFI_ListAccessPoints+0x5a>
 8007f76:	bf00      	nop
 8007f78:	03050204 	.word	0x03050204
 8007f7c:	08026550 	.word	0x08026550
 8007f80:	08026558 	.word	0x08026558
 8007f84:	080264fc 	.word	0x080264fc
 8007f88:	08026508 	.word	0x08026508
 8007f8c:	0802655c 	.word	0x0802655c

08007f90 <ES_WIFI_Connect>:
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8007f90:	2a00      	cmp	r2, #0
 8007f92:	bf18      	it	ne
 8007f94:	2900      	cmpne	r1, #0
 8007f96:	d101      	bne.n	8007f9c <ES_WIFI_Connect+0xc>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8007f98:	2002      	movs	r0, #2
    }

    UNLOCK_WIFI();
  }
  return ret;
}
 8007f9a:	4770      	bx	lr
{
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	461e      	mov	r6, r3
 8007fa2:	4617      	mov	r7, r2
    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8007fa4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8007fa8:	460a      	mov	r2, r1
 8007faa:	491a      	ldr	r1, [pc, #104]	; (8008014 <ES_WIFI_Connect+0x84>)
 8007fac:	4628      	mov	r0, r5
 8007fae:	f01b ff9b 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007fb2:	462a      	mov	r2, r5
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7ff fb6c 	bl	8007694 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007fbc:	b100      	cbz	r0, 8007fc0 <ES_WIFI_Connect+0x30>
}
 8007fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8007fc0:	463a      	mov	r2, r7
 8007fc2:	4915      	ldr	r1, [pc, #84]	; (8008018 <ES_WIFI_Connect+0x88>)
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f01b ff8f 	bl	8023ee8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007fca:	462a      	mov	r2, r5
 8007fcc:	4629      	mov	r1, r5
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f7ff fb60 	bl	8007694 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d1f2      	bne.n	8007fbe <ES_WIFI_Connect+0x2e>
        Obj->Security = SecType;
 8007fd8:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8007fdc:	4632      	mov	r2, r6
 8007fde:	490f      	ldr	r1, [pc, #60]	; (800801c <ES_WIFI_Connect+0x8c>)
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f01b ff81 	bl	8023ee8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007fe6:	462a      	mov	r2, r5
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4620      	mov	r0, r4
 8007fec:	f7ff fb52 	bl	8007694 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d1e4      	bne.n	8007fbe <ES_WIFI_Connect+0x2e>
          sprintf((char*)Obj->CmdData,"C0\r");
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <ES_WIFI_Connect+0x90>)
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007ffc:	462a      	mov	r2, r5
 8007ffe:	4629      	mov	r1, r5
 8008000:	4620      	mov	r0, r4
 8008002:	f7ff fb47 	bl	8007694 <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 8008006:	2800      	cmp	r0, #0
 8008008:	d1d9      	bne.n	8007fbe <ES_WIFI_Connect+0x2e>
            Obj->NetSettings.IsConnected = 1;
 800800a:	2301      	movs	r3, #1
 800800c:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
 8008010:	e7d5      	b.n	8007fbe <ES_WIFI_Connect+0x2e>
 8008012:	bf00      	nop
 8008014:	08026560 	.word	0x08026560
 8008018:	08026568 	.word	0x08026568
 800801c:	08026570 	.word	0x08026570
 8008020:	08026578 	.word	0x08026578

08008024 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8008028:	f500 7594 	add.w	r5, r0, #296	; 0x128
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <ES_WIFI_IsConnected+0x30>)
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008034:	462a      	mov	r2, r5
 8008036:	4629      	mov	r1, r5
 8008038:	4620      	mov	r0, r4
 800803a:	f7ff fb2b 	bl	8007694 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 800803e:	b110      	cbz	r0, 8008046 <ES_WIFI_IsConnected+0x22>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8008040:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8008044:	bd38      	pop	{r3, r4, r5, pc}
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8008046:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
 800804a:	4628      	mov	r0, r5
 800804c:	f7ff fb1b 	bl	8007686 <AT_ParseIsConnected>
 8008050:	e7f6      	b.n	8008040 <ES_WIFI_IsConnected+0x1c>
 8008052:	bf00      	nop
 8008054:	0802657c 	.word	0x0802657c

08008058 <ES_WIFI_Disconnect>:
  * @brief  Disconnect from a network.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Disconnect(ES_WIFIObject_t *Obj)
{
 8008058:	b508      	push	{r3, lr}
 800805a:	4603      	mov	r3, r0
   ES_WIFI_Status_t ret;
   LOCK_WIFI();
   sprintf((char*)Obj->CmdData,"CD\r");
 800805c:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8008060:	4a04      	ldr	r2, [pc, #16]	; (8008074 <ES_WIFI_Disconnect+0x1c>)
 8008062:	6810      	ldr	r0, [r2, #0]
 8008064:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
   ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008068:	460a      	mov	r2, r1
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff fb12 	bl	8007694 <AT_ExecuteCommand>
   UNLOCK_WIFI();
   return  ret;
}
 8008070:	bd08      	pop	{r3, pc}
 8008072:	bf00      	nop
 8008074:	08026580 	.word	0x08026580

08008078 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 800807c:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008080:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <ES_WIFI_GetNetworkSettings+0x30>)
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008088:	462a      	mov	r2, r5
 800808a:	4629      	mov	r1, r5
 800808c:	4620      	mov	r0, r4
 800808e:	f7ff fb01 	bl	8007694 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8008092:	4606      	mov	r6, r0
 8008094:	b108      	cbz	r0, 800809a <ES_WIFI_GetNetworkSettings+0x22>
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
  }

  UNLOCK_WIFI();
  return ret;
}
 8008096:	4630      	mov	r0, r6
 8008098:	bd70      	pop	{r4, r5, r6, pc}
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800809a:	f104 018d 	add.w	r1, r4, #141	; 0x8d
 800809e:	4628      	mov	r0, r5
 80080a0:	f7ff fdb0 	bl	8007c04 <AT_ParseConnSettings>
 80080a4:	e7f7      	b.n	8008096 <ES_WIFI_GetNetworkSettings+0x1e>
 80080a6:	bf00      	nop
 80080a8:	08026584 	.word	0x08026584

080080ac <ES_WIFI_ActivateAP>:
  * @param  ip : AP IP address
  * @param  mac : AP MAC address
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ActivateAP(ES_WIFIObject_t *Obj, ES_WIFI_APConfig_t *ApConfig)
{
 80080ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ae:	4604      	mov	r4, r0
 80080b0:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"AS=0,%s\r", ApConfig->SSID);
 80080b2:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80080b6:	460a      	mov	r2, r1
 80080b8:	492b      	ldr	r1, [pc, #172]	; (8008168 <ES_WIFI_ActivateAP+0xbc>)
 80080ba:	4628      	mov	r0, r5
 80080bc:	f01b ff14 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080c0:	462a      	mov	r2, r5
 80080c2:	4629      	mov	r1, r5
 80080c4:	4620      	mov	r0, r4
 80080c6:	f7ff fae5 	bl	8007694 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80080ca:	4607      	mov	r7, r0
 80080cc:	b108      	cbz	r0, 80080d2 <ES_WIFI_ActivateAP+0x26>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80080ce:	4638      	mov	r0, r7
 80080d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sprintf((char*)Obj->CmdData,"A1=%c\r", (int)ApConfig->Security + '0');
 80080d2:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
 80080d6:	3230      	adds	r2, #48	; 0x30
 80080d8:	4924      	ldr	r1, [pc, #144]	; (800816c <ES_WIFI_ActivateAP+0xc0>)
 80080da:	4628      	mov	r0, r5
 80080dc:	f01b ff04 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080e0:	462a      	mov	r2, r5
 80080e2:	4629      	mov	r1, r5
 80080e4:	4620      	mov	r0, r4
 80080e6:	f7ff fad5 	bl	8007694 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80080ea:	4607      	mov	r7, r0
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d1ee      	bne.n	80080ce <ES_WIFI_ActivateAP+0x22>
      sprintf((char*)Obj->CmdData,"A2=%s\r", ApConfig->Pass);
 80080f0:	f106 0221 	add.w	r2, r6, #33	; 0x21
 80080f4:	491e      	ldr	r1, [pc, #120]	; (8008170 <ES_WIFI_ActivateAP+0xc4>)
 80080f6:	4628      	mov	r0, r5
 80080f8:	f01b fef6 	bl	8023ee8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080fc:	462a      	mov	r2, r5
 80080fe:	4629      	mov	r1, r5
 8008100:	4620      	mov	r0, r4
 8008102:	f7ff fac7 	bl	8007694 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8008106:	4607      	mov	r7, r0
 8008108:	2800      	cmp	r0, #0
 800810a:	d1e0      	bne.n	80080ce <ES_WIFI_ActivateAP+0x22>
        sprintf((char*)Obj->CmdData,"AC=%d\r", ApConfig->Channel);
 800810c:	f896 2043 	ldrb.w	r2, [r6, #67]	; 0x43
 8008110:	4918      	ldr	r1, [pc, #96]	; (8008174 <ES_WIFI_ActivateAP+0xc8>)
 8008112:	4628      	mov	r0, r5
 8008114:	f01b fee8 	bl	8023ee8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008118:	462a      	mov	r2, r5
 800811a:	4629      	mov	r1, r5
 800811c:	4620      	mov	r0, r4
 800811e:	f7ff fab9 	bl	8007694 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8008122:	4607      	mov	r7, r0
 8008124:	2800      	cmp	r0, #0
 8008126:	d1d2      	bne.n	80080ce <ES_WIFI_ActivateAP+0x22>
          sprintf((char*)Obj->CmdData,"AT=%d\r", ApConfig->MaxConnections);
 8008128:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 800812c:	4912      	ldr	r1, [pc, #72]	; (8008178 <ES_WIFI_ActivateAP+0xcc>)
 800812e:	4628      	mov	r0, r5
 8008130:	f01b feda 	bl	8023ee8 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008134:	462a      	mov	r2, r5
 8008136:	4629      	mov	r1, r5
 8008138:	4620      	mov	r0, r4
 800813a:	f7ff faab 	bl	8007694 <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 800813e:	4607      	mov	r7, r0
 8008140:	2800      	cmp	r0, #0
 8008142:	d1c4      	bne.n	80080ce <ES_WIFI_ActivateAP+0x22>
            sprintf((char*)Obj->CmdData,"A0\r");
 8008144:	4b0d      	ldr	r3, [pc, #52]	; (800817c <ES_WIFI_ActivateAP+0xd0>)
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800814c:	462a      	mov	r2, r5
 800814e:	4629      	mov	r1, r5
 8008150:	4620      	mov	r0, r4
 8008152:	f7ff fa9f 	bl	8007694 <AT_ExecuteCommand>
            if(ret == ES_WIFI_STATUS_OK)
 8008156:	4607      	mov	r7, r0
 8008158:	2800      	cmp	r0, #0
 800815a:	d1b8      	bne.n	80080ce <ES_WIFI_ActivateAP+0x22>
              if(strstr((char *)Obj->CmdData, "[AP     ]"))
 800815c:	4908      	ldr	r1, [pc, #32]	; (8008180 <ES_WIFI_ActivateAP+0xd4>)
 800815e:	4628      	mov	r0, r5
 8008160:	f01b ff4c 	bl	8023ffc <strstr>
 8008164:	e7b3      	b.n	80080ce <ES_WIFI_ActivateAP+0x22>
 8008166:	bf00      	nop
 8008168:	08026588 	.word	0x08026588
 800816c:	08026594 	.word	0x08026594
 8008170:	0802659c 	.word	0x0802659c
 8008174:	080265a4 	.word	0x080265a4
 8008178:	080265ac 	.word	0x080265ac
 800817c:	080265b4 	.word	0x080265b4
 8008180:	080265b8 	.word	0x080265b8

08008184 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	4604      	mov	r4, r0
 800818a:	460d      	mov	r5, r1
  ES_WIFI_Status_t ret ;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800818c:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <ES_WIFI_GetMACAddress+0x3c>)
 8008192:	6818      	ldr	r0, [r3, #0]
 8008194:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008198:	460a      	mov	r2, r1
 800819a:	4620      	mov	r0, r4
 800819c:	f7ff fa7a 	bl	8007694 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80081a0:	4606      	mov	r6, r0
 80081a2:	b110      	cbz	r0, 80081aa <ES_WIFI_GetMACAddress+0x26>
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
    ParseMAC(ptr, mac) ;
  }
  UNLOCK_WIFI();
  return ret;
}
 80081a4:	4630      	mov	r0, r6
 80081a6:	b002      	add	sp, #8
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
 80081aa:	aa01      	add	r2, sp, #4
 80081ac:	4905      	ldr	r1, [pc, #20]	; (80081c4 <ES_WIFI_GetMACAddress+0x40>)
 80081ae:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80081b2:	f01b ff61 	bl	8024078 <strtok_r>
    ParseMAC(ptr, mac) ;
 80081b6:	4629      	mov	r1, r5
 80081b8:	f7ff fa22 	bl	8007600 <ParseMAC>
 80081bc:	e7f2      	b.n	80081a4 <ES_WIFI_GetMACAddress+0x20>
 80081be:	bf00      	nop
 80081c0:	080265c4 	.word	0x080265c4
 80081c4:	080265c8 	.word	0x080265c8

080081c8 <ES_WIFI_Ping>:
  * @param  Obj: pointer to module handle
  * @param  Ping: ping structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Ping(ES_WIFIObject_t *Obj, uint8_t *address, uint16_t count, uint16_t interval_ms, int32_t result[])
{
 80081c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	4605      	mov	r5, r0
 80081d0:	460c      	mov	r4, r1
 80081d2:	4617      	mov	r7, r2
 80081d4:	4698      	mov	r8, r3
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  memset(result,-1,sizeof(int)*count);
 80081d6:	0092      	lsls	r2, r2, #2
 80081d8:	f04f 31ff 	mov.w	r1, #4294967295
 80081dc:	9808      	ldr	r0, [sp, #32]
 80081de:	f01b f9ef 	bl	80235c0 <memset>
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 80081e2:	f505 7694 	add.w	r6, r5, #296	; 0x128
          address[2],address[3]);
 80081e6:	78a3      	ldrb	r3, [r4, #2]
 80081e8:	78e2      	ldrb	r2, [r4, #3]
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 80081ea:	9201      	str	r2, [sp, #4]
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	7863      	ldrb	r3, [r4, #1]
 80081f0:	7822      	ldrb	r2, [r4, #0]
 80081f2:	491f      	ldr	r1, [pc, #124]	; (8008270 <ES_WIFI_Ping+0xa8>)
 80081f4:	4630      	mov	r0, r6
 80081f6:	f01b fe77 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081fa:	4632      	mov	r2, r6
 80081fc:	4631      	mov	r1, r6
 80081fe:	4628      	mov	r0, r5
 8008200:	f7ff fa48 	bl	8007694 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8008204:	4604      	mov	r4, r0
 8008206:	b118      	cbz	r0, 8008210 <ES_WIFI_Ping+0x48>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8008208:	4620      	mov	r0, r4
 800820a:	b002      	add	sp, #8
 800820c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"T2=%d\r", count);
 8008210:	463a      	mov	r2, r7
 8008212:	4918      	ldr	r1, [pc, #96]	; (8008274 <ES_WIFI_Ping+0xac>)
 8008214:	4630      	mov	r0, r6
 8008216:	f01b fe67 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800821a:	4632      	mov	r2, r6
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	f7ff fa38 	bl	8007694 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8008224:	4604      	mov	r4, r0
 8008226:	2800      	cmp	r0, #0
 8008228:	d1ee      	bne.n	8008208 <ES_WIFI_Ping+0x40>
      sprintf((char*)Obj->CmdData,"T3=%d\r", interval_ms);
 800822a:	4642      	mov	r2, r8
 800822c:	4912      	ldr	r1, [pc, #72]	; (8008278 <ES_WIFI_Ping+0xb0>)
 800822e:	4630      	mov	r0, r6
 8008230:	f01b fe5a 	bl	8023ee8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008234:	4632      	mov	r2, r6
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	f7ff fa2b 	bl	8007694 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 800823e:	4604      	mov	r4, r0
 8008240:	2800      	cmp	r0, #0
 8008242:	d1e1      	bne.n	8008208 <ES_WIFI_Ping+0x40>
        sprintf((char*)Obj->CmdData,"T0=\r");
 8008244:	4b0d      	ldr	r3, [pc, #52]	; (800827c <ES_WIFI_Ping+0xb4>)
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 800824c:	791b      	ldrb	r3, [r3, #4]
 800824e:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008252:	4632      	mov	r2, r6
 8008254:	4631      	mov	r1, r6
 8008256:	4628      	mov	r0, r5
 8008258:	f7ff fa1c 	bl	8007694 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 800825c:	4604      	mov	r4, r0
 800825e:	2800      	cmp	r0, #0
 8008260:	d1d2      	bne.n	8008208 <ES_WIFI_Ping+0x40>
         AT_ParsePing(result,count,(char*)Obj->CmdData);
 8008262:	4632      	mov	r2, r6
 8008264:	4639      	mov	r1, r7
 8008266:	9808      	ldr	r0, [sp, #32]
 8008268:	f7ff fb02 	bl	8007870 <AT_ParsePing>
 800826c:	e7cc      	b.n	8008208 <ES_WIFI_Ping+0x40>
 800826e:	bf00      	nop
 8008270:	080265cc 	.word	0x080265cc
 8008274:	080265dc 	.word	0x080265dc
 8008278:	080265e4 	.word	0x080265e4
 800827c:	080265ec 	.word	0x080265ec

08008280 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	4604      	mov	r4, r0
 8008286:	4616      	mov	r6, r2
  ES_WIFI_Status_t ret;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8008288:	f500 7594 	add.w	r5, r0, #296	; 0x128
 800828c:	460a      	mov	r2, r1
 800828e:	490c      	ldr	r1, [pc, #48]	; (80082c0 <ES_WIFI_DNS_LookUp+0x40>)
 8008290:	4628      	mov	r0, r5
 8008292:	f01b fe29 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008296:	462a      	mov	r2, r5
 8008298:	4629      	mov	r1, r5
 800829a:	4620      	mov	r0, r4
 800829c:	f7ff f9fa 	bl	8007694 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 80082a0:	4605      	mov	r5, r0
 80082a2:	b110      	cbz	r0, 80082aa <ES_WIFI_DNS_LookUp+0x2a>
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
    ParseIP(ptr, ipaddress);
  }
  UNLOCK_WIFI();
  return ret;
}
 80082a4:	4628      	mov	r0, r5
 80082a6:	b002      	add	sp, #8
 80082a8:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
 80082aa:	aa01      	add	r2, sp, #4
 80082ac:	4905      	ldr	r1, [pc, #20]	; (80082c4 <ES_WIFI_DNS_LookUp+0x44>)
 80082ae:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80082b2:	f01b fee1 	bl	8024078 <strtok_r>
    ParseIP(ptr, ipaddress);
 80082b6:	4631      	mov	r1, r6
 80082b8:	f7ff f9be 	bl	8007638 <ParseIP>
 80082bc:	e7f2      	b.n	80082a4 <ES_WIFI_DNS_LookUp+0x24>
 80082be:	bf00      	nop
 80082c0:	080265f4 	.word	0x080265f4
 80082c4:	080266b4 	.word	0x080266b4

080082c8 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	4605      	mov	r5, r0
 80082ce:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80082d0:	780b      	ldrb	r3, [r1, #0]
 80082d2:	2b03      	cmp	r3, #3
 80082d4:	bf18      	it	ne
 80082d6:	2b00      	cmpne	r3, #0
 80082d8:	d102      	bne.n	80082e0 <ES_WIFI_StartClientConnection+0x18>
 80082da:	888b      	ldrh	r3, [r1, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d079      	beq.n	80083d4 <ES_WIFI_StartClientConnection+0x10c>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80082e0:	f505 7494 	add.w	r4, r5, #296	; 0x128
 80082e4:	78b2      	ldrb	r2, [r6, #2]
 80082e6:	493c      	ldr	r1, [pc, #240]	; (80083d8 <ES_WIFI_StartClientConnection+0x110>)
 80082e8:	4620      	mov	r0, r4
 80082ea:	f01b fdfd 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082ee:	4622      	mov	r2, r4
 80082f0:	4621      	mov	r1, r4
 80082f2:	4628      	mov	r0, r5
 80082f4:	f7ff f9ce 	bl	8007694 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80082f8:	b1c0      	cbz	r0, 800832c <ES_WIFI_StartClientConnection+0x64>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 80082fa:	b310      	cbz	r0, 8008342 <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80082fc:	b920      	cbnz	r0, 8008308 <ES_WIFI_StartClientConnection+0x40>
 80082fe:	7833      	ldrb	r3, [r6, #0]
 8008300:	2b03      	cmp	r3, #3
 8008302:	bf18      	it	ne
 8008304:	2b00      	cmpne	r3, #0
 8008306:	d027      	beq.n	8008358 <ES_WIFI_StartClientConnection+0x90>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8008308:	b920      	cbnz	r0, 8008314 <ES_WIFI_StartClientConnection+0x4c>
 800830a:	7833      	ldrb	r3, [r6, #0]
 800830c:	2b03      	cmp	r3, #3
 800830e:	bf18      	it	ne
 8008310:	2b00      	cmpne	r3, #0
 8008312:	d02c      	beq.n	800836e <ES_WIFI_StartClientConnection+0xa6>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8008314:	b910      	cbnz	r0, 800831c <ES_WIFI_StartClientConnection+0x54>
 8008316:	7833      	ldrb	r3, [r6, #0]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d038      	beq.n	800838e <ES_WIFI_StartClientConnection+0xc6>
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 800831c:	b910      	cbnz	r0, 8008324 <ES_WIFI_StartClientConnection+0x5c>
 800831e:	7833      	ldrb	r3, [r6, #0]
 8008320:	2b03      	cmp	r3, #3
 8008322:	d03f      	beq.n	80083a4 <ES_WIFI_StartClientConnection+0xdc>
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 8008324:	2800      	cmp	r0, #0
 8008326:	d049      	beq.n	80083bc <ES_WIFI_StartClientConnection+0xf4>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8008328:	b002      	add	sp, #8
 800832a:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800832c:	7832      	ldrb	r2, [r6, #0]
 800832e:	492b      	ldr	r1, [pc, #172]	; (80083dc <ES_WIFI_StartClientConnection+0x114>)
 8008330:	4620      	mov	r0, r4
 8008332:	f01b fdd9 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008336:	4622      	mov	r2, r4
 8008338:	4621      	mov	r1, r4
 800833a:	4628      	mov	r0, r5
 800833c:	f7ff f9aa 	bl	8007694 <AT_ExecuteCommand>
 8008340:	e7db      	b.n	80082fa <ES_WIFI_StartClientConnection+0x32>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8008342:	88f2      	ldrh	r2, [r6, #6]
 8008344:	4926      	ldr	r1, [pc, #152]	; (80083e0 <ES_WIFI_StartClientConnection+0x118>)
 8008346:	4620      	mov	r0, r4
 8008348:	f01b fdce 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800834c:	4622      	mov	r2, r4
 800834e:	4621      	mov	r1, r4
 8008350:	4628      	mov	r0, r5
 8008352:	f7ff f99f 	bl	8007694 <AT_ExecuteCommand>
 8008356:	e7d1      	b.n	80082fc <ES_WIFI_StartClientConnection+0x34>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8008358:	88b2      	ldrh	r2, [r6, #4]
 800835a:	4922      	ldr	r1, [pc, #136]	; (80083e4 <ES_WIFI_StartClientConnection+0x11c>)
 800835c:	4620      	mov	r0, r4
 800835e:	f01b fdc3 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008362:	4622      	mov	r2, r4
 8008364:	4621      	mov	r1, r4
 8008366:	4628      	mov	r0, r5
 8008368:	f7ff f994 	bl	8007694 <AT_ExecuteCommand>
 800836c:	e7cc      	b.n	8008308 <ES_WIFI_StartClientConnection+0x40>
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800836e:	7ab3      	ldrb	r3, [r6, #10]
 8008370:	7af2      	ldrb	r2, [r6, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8008372:	9201      	str	r2, [sp, #4]
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	7a73      	ldrb	r3, [r6, #9]
 8008378:	7a32      	ldrb	r2, [r6, #8]
 800837a:	491b      	ldr	r1, [pc, #108]	; (80083e8 <ES_WIFI_StartClientConnection+0x120>)
 800837c:	4620      	mov	r0, r4
 800837e:	f01b fdb3 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008382:	4622      	mov	r2, r4
 8008384:	4621      	mov	r1, r4
 8008386:	4628      	mov	r0, r5
 8008388:	f7ff f984 	bl	8007694 <AT_ExecuteCommand>
 800838c:	e7c2      	b.n	8008314 <ES_WIFI_StartClientConnection+0x4c>
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 800838e:	7872      	ldrb	r2, [r6, #1]
 8008390:	4916      	ldr	r1, [pc, #88]	; (80083ec <ES_WIFI_StartClientConnection+0x124>)
 8008392:	4620      	mov	r0, r4
 8008394:	f01b fda8 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008398:	4622      	mov	r2, r4
 800839a:	4621      	mov	r1, r4
 800839c:	4628      	mov	r0, r5
 800839e:	f7ff f979 	bl	8007694 <AT_ExecuteCommand>
 80083a2:	e7bb      	b.n	800831c <ES_WIFI_StartClientConnection+0x54>
    sprintf((char*)Obj->CmdData,"PB=0\r");
 80083a4:	4b12      	ldr	r3, [pc, #72]	; (80083f0 <ES_WIFI_StartClientConnection+0x128>)
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80083ac:	889b      	ldrh	r3, [r3, #4]
 80083ae:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083b0:	4622      	mov	r2, r4
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	f7ff f96d 	bl	8007694 <AT_ExecuteCommand>
 80083ba:	e7b3      	b.n	8008324 <ES_WIFI_StartClientConnection+0x5c>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80083bc:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <ES_WIFI_StartClientConnection+0x12c>)
 80083be:	6818      	ldr	r0, [r3, #0]
 80083c0:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80083c4:	889b      	ldrh	r3, [r3, #4]
 80083c6:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083c8:	4622      	mov	r2, r4
 80083ca:	4621      	mov	r1, r4
 80083cc:	4628      	mov	r0, r5
 80083ce:	f7ff f961 	bl	8007694 <AT_ExecuteCommand>
 80083d2:	e7a9      	b.n	8008328 <ES_WIFI_StartClientConnection+0x60>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80083d4:	2002      	movs	r0, #2
 80083d6:	e7a7      	b.n	8008328 <ES_WIFI_StartClientConnection+0x60>
 80083d8:	080265fc 	.word	0x080265fc
 80083dc:	08026604 	.word	0x08026604
 80083e0:	0802660c 	.word	0x0802660c
 80083e4:	08026614 	.word	0x08026614
 80083e8:	0802661c 	.word	0x0802661c
 80083ec:	0802662c 	.word	0x0802662c
 80083f0:	08026634 	.word	0x08026634
 80083f4:	0802663c 	.word	0x0802663c

080083f8 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80083fc:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008400:	788a      	ldrb	r2, [r1, #2]
 8008402:	490c      	ldr	r1, [pc, #48]	; (8008434 <ES_WIFI_StopClientConnection+0x3c>)
 8008404:	4628      	mov	r0, r5
 8008406:	f01b fd6f 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800840a:	462a      	mov	r2, r5
 800840c:	4629      	mov	r1, r5
 800840e:	4620      	mov	r0, r4
 8008410:	f7ff f940 	bl	8007694 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008414:	b100      	cbz	r0, 8008418 <ES_WIFI_StopClientConnection+0x20>
    sprintf((char*)Obj->CmdData,"P6=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  UNLOCK_WIFI();
  return ret;
}
 8008416:	bd38      	pop	{r3, r4, r5, pc}
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8008418:	4b07      	ldr	r3, [pc, #28]	; (8008438 <ES_WIFI_StopClientConnection+0x40>)
 800841a:	6818      	ldr	r0, [r3, #0]
 800841c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8008420:	889b      	ldrh	r3, [r3, #4]
 8008422:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008426:	462a      	mov	r2, r5
 8008428:	4629      	mov	r1, r5
 800842a:	4620      	mov	r0, r4
 800842c:	f7ff f932 	bl	8007694 <AT_ExecuteCommand>
 8008430:	e7f1      	b.n	8008416 <ES_WIFI_StopClientConnection+0x1e>
 8008432:	bf00      	nop
 8008434:	080265fc 	.word	0x080265fc
 8008438:	08026644 	.word	0x08026644

0800843c <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	4605      	mov	r5, r0
 8008440:	460e      	mov	r6, r1
#if (ES_WIFI_USE_UART == 1)
  char *saveptr;
#endif
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008442:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8008446:	788a      	ldrb	r2, [r1, #2]
 8008448:	492c      	ldr	r1, [pc, #176]	; (80084fc <ES_WIFI_StartServerSingleConn+0xc0>)
 800844a:	4620      	mov	r0, r4
 800844c:	f01b fd4c 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008450:	4622      	mov	r2, r4
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f7ff f91d 	bl	8007694 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 800845a:	4602      	mov	r2, r0
 800845c:	b928      	cbnz	r0, 800846a <ES_WIFI_StartServerSingleConn+0x2e>
  {
    UNLOCK_WIFI();
    return ret;
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 800845e:	7833      	ldrb	r3, [r6, #0]
 8008460:	3b01      	subs	r3, #1
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	d802      	bhi.n	800846e <ES_WIFI_StartServerSingleConn+0x32>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008468:	b18a      	cbz	r2, 800848e <ES_WIFI_StartServerSingleConn+0x52>
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
}
 800846a:	4610      	mov	r0, r2
 800846c:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 800846e:	4b24      	ldr	r3, [pc, #144]	; (8008500 <ES_WIFI_StartServerSingleConn+0xc4>)
 8008470:	cb03      	ldmia	r3!, {r0, r1}
 8008472:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8008476:	6061      	str	r1, [r4, #4]
 8008478:	881a      	ldrh	r2, [r3, #0]
 800847a:	789b      	ldrb	r3, [r3, #2]
 800847c:	8122      	strh	r2, [r4, #8]
 800847e:	72a3      	strb	r3, [r4, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008480:	4622      	mov	r2, r4
 8008482:	4621      	mov	r1, r4
 8008484:	4628      	mov	r0, r5
 8008486:	f7ff f905 	bl	8007694 <AT_ExecuteCommand>
 800848a:	4602      	mov	r2, r0
 800848c:	e7ec      	b.n	8008468 <ES_WIFI_StartServerSingleConn+0x2c>
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800848e:	7832      	ldrb	r2, [r6, #0]
 8008490:	491c      	ldr	r1, [pc, #112]	; (8008504 <ES_WIFI_StartServerSingleConn+0xc8>)
 8008492:	4620      	mov	r0, r4
 8008494:	f01b fd28 	bl	8023ee8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008498:	4622      	mov	r2, r4
 800849a:	4621      	mov	r1, r4
 800849c:	4628      	mov	r0, r5
 800849e:	f7ff f8f9 	bl	8007694 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80084a2:	4602      	mov	r2, r0
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d1e0      	bne.n	800846a <ES_WIFI_StartServerSingleConn+0x2e>
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 80084a8:	7c32      	ldrb	r2, [r6, #16]
 80084aa:	4917      	ldr	r1, [pc, #92]	; (8008508 <ES_WIFI_StartServerSingleConn+0xcc>)
 80084ac:	4620      	mov	r0, r4
 80084ae:	f01b fd1b 	bl	8023ee8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084b2:	4622      	mov	r2, r4
 80084b4:	4621      	mov	r1, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f7ff f8ec 	bl	8007694 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 80084bc:	4602      	mov	r2, r0
 80084be:	2800      	cmp	r0, #0
 80084c0:	d1d3      	bne.n	800846a <ES_WIFI_StartServerSingleConn+0x2e>
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80084c2:	88f2      	ldrh	r2, [r6, #6]
 80084c4:	4911      	ldr	r1, [pc, #68]	; (800850c <ES_WIFI_StartServerSingleConn+0xd0>)
 80084c6:	4620      	mov	r0, r4
 80084c8:	f01b fd0e 	bl	8023ee8 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084cc:	4622      	mov	r2, r4
 80084ce:	4621      	mov	r1, r4
 80084d0:	4628      	mov	r0, r5
 80084d2:	f7ff f8df 	bl	8007694 <AT_ExecuteCommand>
          if (ret == ES_WIFI_STATUS_OK)
 80084d6:	4602      	mov	r2, r0
 80084d8:	2800      	cmp	r0, #0
 80084da:	d1c6      	bne.n	800846a <ES_WIFI_StartServerSingleConn+0x2e>
            sprintf((char*)Obj->CmdData,"P5=11\r");
 80084dc:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <ES_WIFI_StartServerSingleConn+0xd4>)
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80084e4:	889a      	ldrh	r2, [r3, #4]
 80084e6:	799b      	ldrb	r3, [r3, #6]
 80084e8:	80a2      	strh	r2, [r4, #4]
 80084ea:	71a3      	strb	r3, [r4, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084ec:	4622      	mov	r2, r4
 80084ee:	4621      	mov	r1, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f7ff f8cf 	bl	8007694 <AT_ExecuteCommand>
 80084f6:	4602      	mov	r2, r0
 80084f8:	e7b7      	b.n	800846a <ES_WIFI_StartServerSingleConn+0x2e>
 80084fa:	bf00      	nop
 80084fc:	080265fc 	.word	0x080265fc
 8008500:	0802664c 	.word	0x0802664c
 8008504:	08026604 	.word	0x08026604
 8008508:	08026658 	.word	0x08026658
 800850c:	0802660c 	.word	0x0802660c
 8008510:	08026660 	.word	0x08026660

08008514 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 8008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	b083      	sub	sp, #12
 800851a:	4605      	mov	r5, r0
 800851c:	460f      	mov	r7, r1
 800851e:	4692      	mov	sl, r2
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;
  char          *saveptr;

  tstart=HAL_GetTick();
 8008520:	f002 f88a 	bl	800a638 <HAL_GetTick>
 8008524:	4680      	mov	r8, r0
  tlast=tstart+timeout;
  if (tlast < tstart )
 8008526:	eb10 0907 	adds.w	r9, r0, r7
 800852a:	d301      	bcc.n	8008530 <ES_WIFI_WaitServerConnection+0x1c>
  {
	   tstart=0;
 800852c:	f04f 0800 	mov.w	r8, #0
 8008530:	2600      	movs	r6, #0
 8008532:	e02d      	b.n	8008590 <ES_WIFI_WaitServerConnection+0x7c>
        if(strstr((char *)Obj->CmdData, "Accepted"))
        {
         //printf("SOMA Accepted\n");
         accepted=true;// flushing out the MR messages
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8008534:	4946      	ldr	r1, [pc, #280]	; (8008650 <ES_WIFI_WaitServerConnection+0x13c>)
 8008536:	4620      	mov	r0, r4
 8008538:	f01b fd60 	bl	8023ffc <strstr>
 800853c:	2800      	cmp	r0, #0
 800853e:	f000 8081 	beq.w	8008644 <ES_WIFI_WaitServerConnection+0x130>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8008542:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8008546:	2100      	movs	r1, #0
 8008548:	4620      	mov	r0, r4
 800854a:	f01b f839 	bl	80235c0 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 800854e:	4b41      	ldr	r3, [pc, #260]	; (8008654 <ES_WIFI_WaitServerConnection+0x140>)
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008556:	4622      	mov	r2, r4
 8008558:	4621      	mov	r1, r4
 800855a:	4628      	mov	r0, r5
 800855c:	f7ff f89a 	bl	8007694 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8008560:	4683      	mov	fp, r0
 8008562:	2800      	cmp	r0, #0
 8008564:	d171      	bne.n	800864a <ES_WIFI_WaitServerConnection+0x136>
    {
      if(accepted && (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0))
 8008566:	b136      	cbz	r6, 8008576 <ES_WIFI_WaitServerConnection+0x62>
 8008568:	220c      	movs	r2, #12
 800856a:	493b      	ldr	r1, [pc, #236]	; (8008658 <ES_WIFI_WaitServerConnection+0x144>)
 800856c:	4620      	mov	r0, r4
 800856e:	f01b fd1e 	bl	8023fae <strncmp>
 8008572:	2800      	cmp	r0, #0
 8008574:	d133      	bne.n	80085de <ES_WIFI_WaitServerConnection+0xca>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 8008576:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 800857a:	2064      	movs	r0, #100	; 0x64
 800857c:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 800857e:	f002 f85b 	bl	800a638 <HAL_GetTick>
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 8008582:	b12f      	cbz	r7, 8008590 <ES_WIFI_WaitServerConnection+0x7c>
 8008584:	464b      	mov	r3, r9
 8008586:	45c1      	cmp	r9, r8
 8008588:	bf38      	it	cc
 800858a:	4643      	movcc	r3, r8
 800858c:	4283      	cmp	r3, r0
 800858e:	d950      	bls.n	8008632 <ES_WIFI_WaitServerConnection+0x11e>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8008590:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8008594:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8008598:	2100      	movs	r1, #0
 800859a:	4620      	mov	r0, r4
 800859c:	f01b f810 	bl	80235c0 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 80085a0:	4b2e      	ldr	r3, [pc, #184]	; (800865c <ES_WIFI_WaitServerConnection+0x148>)
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085a8:	4622      	mov	r2, r4
 80085aa:	4621      	mov	r1, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f7ff f871 	bl	8007694 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d140      	bne.n	8008638 <ES_WIFI_WaitServerConnection+0x124>
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80085b6:	492a      	ldr	r1, [pc, #168]	; (8008660 <ES_WIFI_WaitServerConnection+0x14c>)
 80085b8:	4620      	mov	r0, r4
 80085ba:	f01b fd1f 	bl	8023ffc <strstr>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d0bf      	beq.n	8008542 <ES_WIFI_WaitServerConnection+0x2e>
 80085c2:	4928      	ldr	r1, [pc, #160]	; (8008664 <ES_WIFI_WaitServerConnection+0x150>)
 80085c4:	4620      	mov	r0, r4
 80085c6:	f01b fd19 	bl	8023ffc <strstr>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d0b9      	beq.n	8008542 <ES_WIFI_WaitServerConnection+0x2e>
        if(strstr((char *)Obj->CmdData, "Accepted"))
 80085ce:	4926      	ldr	r1, [pc, #152]	; (8008668 <ES_WIFI_WaitServerConnection+0x154>)
 80085d0:	4620      	mov	r0, r4
 80085d2:	f01b fd13 	bl	8023ffc <strstr>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d0ac      	beq.n	8008534 <ES_WIFI_WaitServerConnection+0x20>
         accepted=true;// flushing out the MR messages
 80085da:	2601      	movs	r6, #1
 80085dc:	e7b1      	b.n	8008542 <ES_WIFI_WaitServerConnection+0x2e>
        ptr = strtok_r((char *)Obj->CmdData + 2, ",",&saveptr);
 80085de:	4c23      	ldr	r4, [pc, #140]	; (800866c <ES_WIFI_WaitServerConnection+0x158>)
 80085e0:	aa01      	add	r2, sp, #4
 80085e2:	4621      	mov	r1, r4
 80085e4:	f505 7095 	add.w	r0, r5, #298	; 0x12a
 80085e8:	f01b fd46 	bl	8024078 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //port
 80085ec:	aa01      	add	r2, sp, #4
 80085ee:	4621      	mov	r1, r4
 80085f0:	2000      	movs	r0, #0
 80085f2:	f01b fd41 	bl	8024078 <strtok_r>
        ParseIP((char *)ptr, conn->RemoteIP);
 80085f6:	f10a 0108 	add.w	r1, sl, #8
 80085fa:	f7ff f81d 	bl	8007638 <ParseIP>
        ptr = strtok_r(0, ",",&saveptr); //port
 80085fe:	aa01      	add	r2, sp, #4
 8008600:	4621      	mov	r1, r4
 8008602:	2000      	movs	r0, #0
 8008604:	f01b fd38 	bl	8024078 <strtok_r>
        conn->LocalPort=ParseNumber(ptr,0);
 8008608:	2100      	movs	r1, #0
 800860a:	f7fe ffd3 	bl	80075b4 <ParseNumber>
 800860e:	f8aa 0006 	strh.w	r0, [sl, #6]
        ptr = strtok_r(0, ",",&saveptr); //ip
 8008612:	aa01      	add	r2, sp, #4
 8008614:	4621      	mov	r1, r4
 8008616:	2000      	movs	r0, #0
 8008618:	f01b fd2e 	bl	8024078 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //remote port
 800861c:	aa01      	add	r2, sp, #4
 800861e:	4621      	mov	r1, r4
 8008620:	2000      	movs	r0, #0
 8008622:	f01b fd29 	bl	8024078 <strtok_r>
        conn->RemotePort=ParseNumber(ptr,0);
 8008626:	2100      	movs	r1, #0
 8008628:	f7fe ffc4 	bl	80075b4 <ParseNumber>
 800862c:	f8aa 0004 	strh.w	r0, [sl, #4]
        return ES_WIFI_STATUS_OK;
 8008630:	e004      	b.n	800863c <ES_WIFI_WaitServerConnection+0x128>
  return ES_WIFI_STATUS_TIMEOUT;
 8008632:	f04f 0b03 	mov.w	fp, #3
 8008636:	e001      	b.n	800863c <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 8008638:	f04f 0b02 	mov.w	fp, #2
}
 800863c:	4658      	mov	r0, fp
 800863e:	b003      	add	sp, #12
 8008640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return ES_WIFI_STATUS_ERROR;
 8008644:	f04f 0b02 	mov.w	fp, #2
 8008648:	e7f8      	b.n	800863c <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 800864a:	f04f 0b02 	mov.w	fp, #2
 800864e:	e7f5      	b.n	800863c <ES_WIFI_WaitServerConnection+0x128>
 8008650:	08026684 	.word	0x08026684
 8008654:	08026694 	.word	0x08026694
 8008658:	08026698 	.word	0x08026698
 800865c:	08026558 	.word	0x08026558
 8008660:	08026668 	.word	0x08026668
 8008664:	08026670 	.word	0x08026670
 8008668:	08026678 	.word	0x08026678
 800866c:	0802653c 	.word	0x0802653c

08008670 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4604      	mov	r4, r0
 8008674:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8008676:	f500 7594 	add.w	r5, r0, #296	; 0x128
 800867a:	490d      	ldr	r1, [pc, #52]	; (80086b0 <ES_WIFI_CloseServerConnection+0x40>)
 800867c:	4628      	mov	r0, r5
 800867e:	f01b fc33 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008682:	462a      	mov	r2, r5
 8008684:	4629      	mov	r1, r5
 8008686:	4620      	mov	r0, r4
 8008688:	f7ff f804 	bl	8007694 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 800868c:	b100      	cbz	r0, 8008690 <ES_WIFI_CloseServerConnection+0x20>
    DEBUGW(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 800868e:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=10\r");
 8008690:	4b08      	ldr	r3, [pc, #32]	; (80086b4 <ES_WIFI_CloseServerConnection+0x44>)
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8008698:	889a      	ldrh	r2, [r3, #4]
 800869a:	799b      	ldrb	r3, [r3, #6]
 800869c:	f8a4 212c 	strh.w	r2, [r4, #300]	; 0x12c
 80086a0:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086a4:	462a      	mov	r2, r5
 80086a6:	4629      	mov	r1, r5
 80086a8:	4620      	mov	r0, r4
 80086aa:	f7fe fff3 	bl	8007694 <AT_ExecuteCommand>
  return ret;
 80086ae:	e7ee      	b.n	800868e <ES_WIFI_CloseServerConnection+0x1e>
 80086b0:	080265fc 	.word	0x080265fc
 80086b4:	080266a8 	.word	0x080266a8

080086b8 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4604      	mov	r4, r0
 80086bc:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80086be:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80086c2:	490c      	ldr	r1, [pc, #48]	; (80086f4 <ES_WIFI_StopServerSingleConn+0x3c>)
 80086c4:	4628      	mov	r0, r5
 80086c6:	f01b fc0f 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086ca:	462a      	mov	r2, r5
 80086cc:	4629      	mov	r1, r5
 80086ce:	4620      	mov	r0, r4
 80086d0:	f7fe ffe0 	bl	8007694 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 80086d4:	b100      	cbz	r0, 80086d8 <ES_WIFI_StopServerSingleConn+0x20>
    return ret;
  }

  UNLOCK_WIFI();
  return ret;
}
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=0\r");
 80086d8:	4b07      	ldr	r3, [pc, #28]	; (80086f8 <ES_WIFI_StopServerSingleConn+0x40>)
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 80086e0:	889b      	ldrh	r3, [r3, #4]
 80086e2:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086e6:	462a      	mov	r2, r5
 80086e8:	4629      	mov	r1, r5
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7fe ffd2 	bl	8007694 <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 80086f0:	e7f1      	b.n	80086d6 <ES_WIFI_StopServerSingleConn+0x1e>
 80086f2:	bf00      	nop
 80086f4:	080265fc 	.word	0x080265fc
 80086f8:	080266b0 	.word	0x080266b0

080086fc <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	4605      	mov	r5, r0
 8008704:	4690      	mov	r8, r2
 8008706:	461c      	mov	r4, r3
 8008708:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800870c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 8008710:	f1b9 0f00 	cmp.w	r9, #0
 8008714:	d101      	bne.n	800871a <ES_WIFI_SendData+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8008716:	f04f 0901 	mov.w	r9, #1
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 800871a:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 800871e:	d301      	bcc.n	8008724 <ES_WIFI_SendData+0x28>
 8008720:	f44f 6496 	mov.w	r4, #1200	; 0x4b0

  *SentLen = Reqlen;
 8008724:	f8aa 4000 	strh.w	r4, [sl]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008728:	f505 7694 	add.w	r6, r5, #296	; 0x128
 800872c:	460a      	mov	r2, r1
 800872e:	491c      	ldr	r1, [pc, #112]	; (80087a0 <ES_WIFI_SendData+0xa4>)
 8008730:	4630      	mov	r0, r6
 8008732:	f01b fbd9 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008736:	4632      	mov	r2, r6
 8008738:	4631      	mov	r1, r6
 800873a:	4628      	mov	r0, r5
 800873c:	f7fe ffaa 	bl	8007694 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008740:	4607      	mov	r7, r0
 8008742:	b128      	cbz	r0, 8008750 <ES_WIFI_SendData+0x54>
  else
  {
   DEBUGW("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8008744:	2f02      	cmp	r7, #2
 8008746:	d026      	beq.n	8008796 <ES_WIFI_SendData+0x9a>
  {
    *SentLen = 0;
  }
  UNLOCK_WIFI();
  return ret;
}
 8008748:	4638      	mov	r0, r7
 800874a:	b002      	add	sp, #8
 800874c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8008750:	464a      	mov	r2, r9
 8008752:	4914      	ldr	r1, [pc, #80]	; (80087a4 <ES_WIFI_SendData+0xa8>)
 8008754:	4630      	mov	r0, r6
 8008756:	f01b fbc7 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800875a:	4632      	mov	r2, r6
 800875c:	4631      	mov	r1, r6
 800875e:	4628      	mov	r0, r5
 8008760:	f7fe ff98 	bl	8007694 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8008764:	4607      	mov	r7, r0
 8008766:	2800      	cmp	r0, #0
 8008768:	d1ec      	bne.n	8008744 <ES_WIFI_SendData+0x48>
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800876a:	4622      	mov	r2, r4
 800876c:	490e      	ldr	r1, [pc, #56]	; (80087a8 <ES_WIFI_SendData+0xac>)
 800876e:	4630      	mov	r0, r6
 8008770:	f01b fbba 	bl	8023ee8 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8008774:	9600      	str	r6, [sp, #0]
 8008776:	4623      	mov	r3, r4
 8008778:	4642      	mov	r2, r8
 800877a:	4631      	mov	r1, r6
 800877c:	4628      	mov	r0, r5
 800877e:	f7ff f803 	bl	8007788 <AT_RequestSendData>
      if(ret == ES_WIFI_STATUS_OK)
 8008782:	4607      	mov	r7, r0
 8008784:	2800      	cmp	r0, #0
 8008786:	d1dd      	bne.n	8008744 <ES_WIFI_SendData+0x48>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8008788:	4908      	ldr	r1, [pc, #32]	; (80087ac <ES_WIFI_SendData+0xb0>)
 800878a:	4630      	mov	r0, r6
 800878c:	f01b fc36 	bl	8023ffc <strstr>
 8008790:	2800      	cmp	r0, #0
 8008792:	d0d7      	beq.n	8008744 <ES_WIFI_SendData+0x48>
          ret = ES_WIFI_STATUS_ERROR;
 8008794:	2702      	movs	r7, #2
    *SentLen = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	f8aa 3000 	strh.w	r3, [sl]
 800879c:	e7d4      	b.n	8008748 <ES_WIFI_SendData+0x4c>
 800879e:	bf00      	nop
 80087a0:	080265fc 	.word	0x080265fc
 80087a4:	080266b8 	.word	0x080266b8
 80087a8:	080266c0 	.word	0x080266c0
 80087ac:	080266cc 	.word	0x080266cc

080087b0 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 80087b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	4606      	mov	r6, r0
 80087b8:	4690      	mov	r8, r2
 80087ba:	461f      	mov	r7, r3
 80087bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80087c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 80087c4:	f1b9 0f00 	cmp.w	r9, #0
 80087c8:	d101      	bne.n	80087ce <ES_WIFI_SendDataTo+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80087ca:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80087ce:	f506 7594 	add.w	r5, r6, #296	; 0x128
 80087d2:	460a      	mov	r2, r1
 80087d4:	493d      	ldr	r1, [pc, #244]	; (80088cc <ES_WIFI_SendDataTo+0x11c>)
 80087d6:	4628      	mov	r0, r5
 80087d8:	f01b fb86 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087dc:	462a      	mov	r2, r5
 80087de:	4629      	mov	r1, r5
 80087e0:	4630      	mov	r0, r6
 80087e2:	f7fe ff57 	bl	8007694 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80087e6:	4604      	mov	r4, r0
 80087e8:	b300      	cbz	r0, 800882c <ES_WIFI_SendDataTo+0x7c>
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 80087ea:	b364      	cbz	r4, 8008846 <ES_WIFI_SendDataTo+0x96>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 80087ec:	2c00      	cmp	r4, #0
 80087ee:	d037      	beq.n	8008860 <ES_WIFI_SendDataTo+0xb0>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 80087f0:	b924      	cbnz	r4, 80087fc <ES_WIFI_SendDataTo+0x4c>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 80087f2:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
 80087f6:	d301      	bcc.n	80087fc <ES_WIFI_SendDataTo+0x4c>
    {
      Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80087f8:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
 80087fc:	2c00      	cmp	r4, #0
 80087fe:	d044      	beq.n	800888a <ES_WIFI_SendDataTo+0xda>
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008800:	2c00      	cmp	r4, #0
 8008802:	d04e      	beq.n	80088a2 <ES_WIFI_SendDataTo+0xf2>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008804:	2c00      	cmp	r4, #0
 8008806:	d15a      	bne.n	80088be <ES_WIFI_SendDataTo+0x10e>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 8008808:	4931      	ldr	r1, [pc, #196]	; (80088d0 <ES_WIFI_SendDataTo+0x120>)
 800880a:	4628      	mov	r0, r5
 800880c:	f01b fbf6 	bl	8023ffc <strstr>
    if(ptr != NULL)
 8008810:	2800      	cmp	r0, #0
 8008812:	d054      	beq.n	80088be <ES_WIFI_SendDataTo+0x10e>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 8008814:	f506 66d4 	add.w	r6, r6, #1696	; 0x6a0
 8008818:	4286      	cmp	r6, r0
 800881a:	d855      	bhi.n	80088c8 <ES_WIFI_SendDataTo+0x118>
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 800881c:	2404      	movs	r4, #4
    *SentLen = Reqlen;
  }
  else
  {
    DEBUGW("Send error:\n%s\n", Obj->CmdData);
    *SentLen = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008822:	8013      	strh	r3, [r2, #0]
  }

  UNLOCK_WIFI();
  return ret;
}
 8008824:	4620      	mov	r0, r4
 8008826:	b002      	add	sp, #8
 8008828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 800882c:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 8008830:	4928      	ldr	r1, [pc, #160]	; (80088d4 <ES_WIFI_SendDataTo+0x124>)
 8008832:	4628      	mov	r0, r5
 8008834:	f01b fb58 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008838:	462a      	mov	r2, r5
 800883a:	4629      	mov	r1, r5
 800883c:	4630      	mov	r0, r6
 800883e:	f7fe ff29 	bl	8007694 <AT_ExecuteCommand>
 8008842:	4604      	mov	r4, r0
 8008844:	e7d1      	b.n	80087ea <ES_WIFI_SendDataTo+0x3a>
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 8008846:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800884a:	4923      	ldr	r1, [pc, #140]	; (80088d8 <ES_WIFI_SendDataTo+0x128>)
 800884c:	4628      	mov	r0, r5
 800884e:	f01b fb4b 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008852:	462a      	mov	r2, r5
 8008854:	4629      	mov	r1, r5
 8008856:	4630      	mov	r0, r6
 8008858:	f7fe ff1c 	bl	8007694 <AT_ExecuteCommand>
 800885c:	4604      	mov	r4, r0
 800885e:	e7c5      	b.n	80087ec <ES_WIFI_SendDataTo+0x3c>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 8008860:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8008864:	f89a 2003 	ldrb.w	r2, [sl, #3]
 8008868:	9201      	str	r2, [sp, #4]
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008870:	f89a 2000 	ldrb.w	r2, [sl]
 8008874:	4919      	ldr	r1, [pc, #100]	; (80088dc <ES_WIFI_SendDataTo+0x12c>)
 8008876:	4628      	mov	r0, r5
 8008878:	f01b fb36 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800887c:	462a      	mov	r2, r5
 800887e:	4629      	mov	r1, r5
 8008880:	4630      	mov	r0, r6
 8008882:	f7fe ff07 	bl	8007694 <AT_ExecuteCommand>
 8008886:	4604      	mov	r4, r0
 8008888:	e7b2      	b.n	80087f0 <ES_WIFI_SendDataTo+0x40>
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 800888a:	464a      	mov	r2, r9
 800888c:	4914      	ldr	r1, [pc, #80]	; (80088e0 <ES_WIFI_SendDataTo+0x130>)
 800888e:	4628      	mov	r0, r5
 8008890:	f01b fb2a 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008894:	462a      	mov	r2, r5
 8008896:	4629      	mov	r1, r5
 8008898:	4630      	mov	r0, r6
 800889a:	f7fe fefb 	bl	8007694 <AT_ExecuteCommand>
 800889e:	4604      	mov	r4, r0
 80088a0:	e7ae      	b.n	8008800 <ES_WIFI_SendDataTo+0x50>
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 80088a2:	463a      	mov	r2, r7
 80088a4:	490f      	ldr	r1, [pc, #60]	; (80088e4 <ES_WIFI_SendDataTo+0x134>)
 80088a6:	4628      	mov	r0, r5
 80088a8:	f01b fb1e 	bl	8023ee8 <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80088ac:	9500      	str	r5, [sp, #0]
 80088ae:	463b      	mov	r3, r7
 80088b0:	4642      	mov	r2, r8
 80088b2:	4629      	mov	r1, r5
 80088b4:	4630      	mov	r0, r6
 80088b6:	f7fe ff67 	bl	8007788 <AT_RequestSendData>
 80088ba:	4604      	mov	r4, r0
 80088bc:	e7a2      	b.n	8008804 <ES_WIFI_SendDataTo+0x54>
  if (ret == ES_WIFI_STATUS_OK)
 80088be:	2c00      	cmp	r4, #0
 80088c0:	d1ad      	bne.n	800881e <ES_WIFI_SendDataTo+0x6e>
    *SentLen = Reqlen;
 80088c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c4:	801f      	strh	r7, [r3, #0]
 80088c6:	e7ad      	b.n	8008824 <ES_WIFI_SendDataTo+0x74>
        ret = ES_WIFI_STATUS_ERROR;
 80088c8:	2402      	movs	r4, #2
 80088ca:	e7a8      	b.n	800881e <ES_WIFI_SendDataTo+0x6e>
 80088cc:	080265fc 	.word	0x080265fc
 80088d0:	080266cc 	.word	0x080266cc
 80088d4:	0802660c 	.word	0x0802660c
 80088d8:	08026614 	.word	0x08026614
 80088dc:	0802661c 	.word	0x0802661c
 80088e0:	080266b8 	.word	0x080266b8
 80088e4:	080266c0 	.word	0x080266c0

080088e8 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	4604      	mov	r4, r0
 80088f0:	4690      	mov	r8, r2
 80088f2:	461d      	mov	r5, r3
 80088f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 80088f6:	b906      	cbnz	r6, 80088fa <ES_WIFI_ReceiveData+0x12>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80088f8:	2601      	movs	r6, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80088fa:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80088fe:	d903      	bls.n	8008908 <ES_WIFI_ReceiveData+0x20>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008900:	2002      	movs	r0, #2
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8008902:	b002      	add	sp, #8
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008908:	f504 7794 	add.w	r7, r4, #296	; 0x128
 800890c:	460a      	mov	r2, r1
 800890e:	491b      	ldr	r1, [pc, #108]	; (800897c <ES_WIFI_ReceiveData+0x94>)
 8008910:	4638      	mov	r0, r7
 8008912:	f01b fae9 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008916:	463a      	mov	r2, r7
 8008918:	4639      	mov	r1, r7
 800891a:	4620      	mov	r0, r4
 800891c:	f7fe feba 	bl	8007694 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8008920:	b120      	cbz	r0, 800892c <ES_WIFI_ReceiveData+0x44>
      issue15++;
 8008922:	4a17      	ldr	r2, [pc, #92]	; (8008980 <ES_WIFI_ReceiveData+0x98>)
 8008924:	6813      	ldr	r3, [r2, #0]
 8008926:	3301      	adds	r3, #1
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	e7ea      	b.n	8008902 <ES_WIFI_ReceiveData+0x1a>
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 800892c:	462a      	mov	r2, r5
 800892e:	4915      	ldr	r1, [pc, #84]	; (8008984 <ES_WIFI_ReceiveData+0x9c>)
 8008930:	4638      	mov	r0, r7
 8008932:	f01b fad9 	bl	8023ee8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008936:	463a      	mov	r2, r7
 8008938:	4639      	mov	r1, r7
 800893a:	4620      	mov	r0, r4
 800893c:	f7fe feaa 	bl	8007694 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8008940:	b118      	cbz	r0, 800894a <ES_WIFI_ReceiveData+0x62>
        *Receivedlen = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	9a08      	ldr	r2, [sp, #32]
 8008946:	8013      	strh	r3, [r2, #0]
 8008948:	e7db      	b.n	8008902 <ES_WIFI_ReceiveData+0x1a>
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800894a:	4632      	mov	r2, r6
 800894c:	490e      	ldr	r1, [pc, #56]	; (8008988 <ES_WIFI_ReceiveData+0xa0>)
 800894e:	4638      	mov	r0, r7
 8008950:	f01b faca 	bl	8023ee8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008954:	463a      	mov	r2, r7
 8008956:	4639      	mov	r1, r7
 8008958:	4620      	mov	r0, r4
 800895a:	f7fe fe9b 	bl	8007694 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 800895e:	2800      	cmp	r0, #0
 8008960:	d1cf      	bne.n	8008902 <ES_WIFI_ReceiveData+0x1a>
          sprintf((char*)Obj->CmdData,"R0\r");
 8008962:	4b0a      	ldr	r3, [pc, #40]	; (800898c <ES_WIFI_ReceiveData+0xa4>)
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800896a:	9b08      	ldr	r3, [sp, #32]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	462b      	mov	r3, r5
 8008970:	4642      	mov	r2, r8
 8008972:	4639      	mov	r1, r7
 8008974:	4620      	mov	r0, r4
 8008976:	f7ff f9d1 	bl	8007d1c <AT_RequestReceiveData>
            DEBUGW("AT_RequestReceiveData  failed\n");
 800897a:	e7c2      	b.n	8008902 <ES_WIFI_ReceiveData+0x1a>
 800897c:	080265fc 	.word	0x080265fc
 8008980:	24006514 	.word	0x24006514
 8008984:	080266d4 	.word	0x080266d4
 8008988:	080266dc 	.word	0x080266dc
 800898c:	080266e4 	.word	0x080266e4

08008990 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 8008990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	b088      	sub	sp, #32
 8008996:	4605      	mov	r5, r0
 8008998:	4690      	mov	r8, r2
 800899a:	461e      	mov	r6, r3
 800899c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800899e:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	803b      	strh	r3, [r7, #0]


  if (Timeout == 0)
 80089a6:	f1b9 0f00 	cmp.w	r9, #0
 80089aa:	d101      	bne.n	80089b0 <ES_WIFI_ReceiveDataFrom+0x20>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80089ac:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80089b0:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 80089b4:	d90f      	bls.n	80089d6 <ES_WIFI_ReceiveDataFrom+0x46>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80089b6:	2402      	movs	r4, #2
  else
  {
    DEBUGW("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 80089b8:	b344      	cbz	r4, 8008a0c <ES_WIFI_ReceiveDataFrom+0x7c>
  else
  {
    DEBUGW("R1 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 80089ba:	b3ac      	cbz	r4, 8008a28 <ES_WIFI_ReceiveDataFrom+0x98>
  else
  {
    DEBUGW("R2 failed.\n");
  }

  if (ret == ES_WIFI_STATUS_OK)
 80089bc:	b924      	cbnz	r4, 80089c8 <ES_WIFI_ReceiveDataFrom+0x38>
  {
    if (*Receivedlen > Reqlen)
 80089be:	883b      	ldrh	r3, [r7, #0]
 80089c0:	42b3      	cmp	r3, r6
 80089c2:	d85f      	bhi.n	8008a84 <ES_WIFI_ReceiveDataFrom+0xf4>
      DEBUGW("AT_RequestReceiveData overflow\n.");
      ret = ES_WIFI_STATUS_ERROR;
    }
    else
    {
      if (*Receivedlen > 0)
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d13d      	bne.n	8008a44 <ES_WIFI_ReceiveDataFrom+0xb4>
        }
      }
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
 80089c8:	b10c      	cbz	r4, 80089ce <ES_WIFI_ReceiveDataFrom+0x3e>
  {
    DEBUGW("Read error:\n%s\n", Obj->CmdData);
    *Receivedlen = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	803b      	strh	r3, [r7, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 80089ce:	4620      	mov	r0, r4
 80089d0:	b008      	add	sp, #32
 80089d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 80089d6:	f505 7a94 	add.w	sl, r5, #296	; 0x128
 80089da:	460a      	mov	r2, r1
 80089dc:	492a      	ldr	r1, [pc, #168]	; (8008a88 <ES_WIFI_ReceiveDataFrom+0xf8>)
 80089de:	4650      	mov	r0, sl
 80089e0:	f01b fa82 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089e4:	4652      	mov	r2, sl
 80089e6:	4651      	mov	r1, sl
 80089e8:	4628      	mov	r0, r5
 80089ea:	f7fe fe53 	bl	8007694 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80089ee:	4604      	mov	r4, r0
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d1e1      	bne.n	80089b8 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80089f4:	4632      	mov	r2, r6
 80089f6:	4925      	ldr	r1, [pc, #148]	; (8008a8c <ES_WIFI_ReceiveDataFrom+0xfc>)
 80089f8:	4650      	mov	r0, sl
 80089fa:	f01b fa75 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089fe:	4652      	mov	r2, sl
 8008a00:	4651      	mov	r1, sl
 8008a02:	4628      	mov	r0, r5
 8008a04:	f7fe fe46 	bl	8007694 <AT_ExecuteCommand>
 8008a08:	4604      	mov	r4, r0
 8008a0a:	e7d5      	b.n	80089b8 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8008a0c:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8008a10:	464a      	mov	r2, r9
 8008a12:	491f      	ldr	r1, [pc, #124]	; (8008a90 <ES_WIFI_ReceiveDataFrom+0x100>)
 8008a14:	4620      	mov	r0, r4
 8008a16:	f01b fa67 	bl	8023ee8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f7fe fe38 	bl	8007694 <AT_ExecuteCommand>
 8008a24:	4604      	mov	r4, r0
 8008a26:	e7c8      	b.n	80089ba <ES_WIFI_ReceiveDataFrom+0x2a>
    sprintf((char*)Obj->CmdData,"R0\r");
 8008a28:	4b1a      	ldr	r3, [pc, #104]	; (8008a94 <ES_WIFI_ReceiveDataFrom+0x104>)
 8008a2a:	6818      	ldr	r0, [r3, #0]
 8008a2c:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008a30:	9700      	str	r7, [sp, #0]
 8008a32:	4633      	mov	r3, r6
 8008a34:	4642      	mov	r2, r8
 8008a36:	f505 7194 	add.w	r1, r5, #296	; 0x128
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f7ff f96e 	bl	8007d1c <AT_RequestReceiveData>
 8008a40:	4604      	mov	r4, r0
 8008a42:	e7bb      	b.n	80089bc <ES_WIFI_ReceiveDataFrom+0x2c>
        sprintf((char*)Obj->CmdData,"P?\r");
 8008a44:	f505 7694 	add.w	r6, r5, #296	; 0x128
 8008a48:	4b13      	ldr	r3, [pc, #76]	; (8008a98 <ES_WIFI_ReceiveDataFrom+0x108>)
 8008a4a:	6818      	ldr	r0, [r3, #0]
 8008a4c:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008a50:	4632      	mov	r2, r6
 8008a52:	4631      	mov	r1, r6
 8008a54:	4628      	mov	r0, r5
 8008a56:	f7fe fe1d 	bl	8007694 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d1b3      	bne.n	80089c8 <ES_WIFI_ReceiveDataFrom+0x38>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 8008a60:	2300      	movs	r3, #0
 8008a62:	9303      	str	r3, [sp, #12]
 8008a64:	9304      	str	r3, [sp, #16]
 8008a66:	9305      	str	r3, [sp, #20]
 8008a68:	9306      	str	r3, [sp, #24]
 8008a6a:	9307      	str	r3, [sp, #28]
          AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8008a6c:	a903      	add	r1, sp, #12
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f7fe ff28 	bl	80078c4 <AT_ParseTransportSettings>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8008a74:	9a05      	ldr	r2, [sp, #20]
 8008a76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a78:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8008a7a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8008a7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	e7a1      	b.n	80089c8 <ES_WIFI_ReceiveDataFrom+0x38>
      ret = ES_WIFI_STATUS_ERROR;
 8008a84:	2402      	movs	r4, #2
 8008a86:	e7a0      	b.n	80089ca <ES_WIFI_ReceiveDataFrom+0x3a>
 8008a88:	080265fc 	.word	0x080265fc
 8008a8c:	080266d4 	.word	0x080266d4
 8008a90:	080266dc 	.word	0x080266dc
 8008a94:	080266e4 	.word	0x080266e4
 8008a98:	08026694 	.word	0x08026694

08008a9c <ES_WIFI_SockInfo>:

ES_WIFI_Status_t  ES_WIFI_SockInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8008a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	b086      	sub	sp, #24
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4690      	mov	r8, r2
 8008aa6:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8008aa8:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008aac:	460a      	mov	r2, r1
 8008aae:	4916      	ldr	r1, [pc, #88]	; (8008b08 <ES_WIFI_SockInfo+0x6c>)
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f01b fa19 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4620      	mov	r0, r4
 8008abc:	f7fe fdea 	bl	8007694 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008ac0:	4606      	mov	r6, r0
 8008ac2:	b118      	cbz	r0, 8008acc <ES_WIFI_SockInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	b006      	add	sp, #24
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 8008acc:	4b0f      	ldr	r3, [pc, #60]	; (8008b0c <ES_WIFI_SockInfo+0x70>)
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f7fe fddb 	bl	8007694 <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 8008ade:	4606      	mov	r6, r0
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d1ef      	bne.n	8008ac4 <ES_WIFI_SockInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9301      	str	r3, [sp, #4]
 8008ae8:	9302      	str	r3, [sp, #8]
 8008aea:	9303      	str	r3, [sp, #12]
 8008aec:	9304      	str	r3, [sp, #16]
 8008aee:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8008af0:	a901      	add	r1, sp, #4
 8008af2:	4628      	mov	r0, r5
 8008af4:	f7fe fee6 	bl	80078c4 <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Local_IP_Addr, 4);
 8008af8:	f8dd 3005 	ldr.w	r3, [sp, #5]
 8008afc:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Local_Port;
 8008b00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8008b04:	803b      	strh	r3, [r7, #0]
 8008b06:	e7dd      	b.n	8008ac4 <ES_WIFI_SockInfo+0x28>
 8008b08:	080265fc 	.word	0x080265fc
 8008b0c:	08026694 	.word	0x08026694

08008b10 <ES_WIFI_PeerInfo>:


ES_WIFI_Status_t  ES_WIFI_PeerInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8008b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b14:	b086      	sub	sp, #24
 8008b16:	4604      	mov	r4, r0
 8008b18:	4690      	mov	r8, r2
 8008b1a:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8008b1c:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008b20:	460a      	mov	r2, r1
 8008b22:	4916      	ldr	r1, [pc, #88]	; (8008b7c <ES_WIFI_PeerInfo+0x6c>)
 8008b24:	4628      	mov	r0, r5
 8008b26:	f01b f9df 	bl	8023ee8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008b2a:	462a      	mov	r2, r5
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f7fe fdb0 	bl	8007694 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008b34:	4606      	mov	r6, r0
 8008b36:	b118      	cbz	r0, 8008b40 <ES_WIFI_PeerInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 8008b38:	4630      	mov	r0, r6
 8008b3a:	b006      	add	sp, #24
 8008b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 8008b40:	4b0f      	ldr	r3, [pc, #60]	; (8008b80 <ES_WIFI_PeerInfo+0x70>)
 8008b42:	6818      	ldr	r0, [r3, #0]
 8008b44:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008b48:	462a      	mov	r2, r5
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f7fe fda1 	bl	8007694 <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 8008b52:	4606      	mov	r6, r0
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d1ef      	bne.n	8008b38 <ES_WIFI_PeerInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	9302      	str	r3, [sp, #8]
 8008b5e:	9303      	str	r3, [sp, #12]
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8008b64:	a901      	add	r1, sp, #4
 8008b66:	4628      	mov	r0, r5
 8008b68:	f7fe feac 	bl	80078c4 <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Remote_Port;
 8008b72:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8008b76:	803b      	strh	r3, [r7, #0]
 8008b78:	e7de      	b.n	8008b38 <ES_WIFI_PeerInfo+0x28>
 8008b7a:	bf00      	nop
 8008b7c:	080265fc 	.word	0x080265fc
 8008b80:	08026694 	.word	0x08026694

08008b84 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8008b84:	2301      	movs	r3, #1
 8008b86:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8008b88:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8008b8a:	2305      	movs	r3, #5
 8008b8c:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8008b8e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008b92:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8008b94:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008b98:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	4770      	bx	lr

08008b9e <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8008b9e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d001      	beq.n	8008baa <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8008bb0:	e7f9      	b.n	8008ba6 <FT5336_DeInit+0x8>

08008bb2 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	4770      	bx	lr

08008bb6 <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	4770      	bx	lr

08008bba <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008bba:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008bbc:	6904      	ldr	r4, [r0, #16]
 8008bbe:	8900      	ldrh	r0, [r0, #8]
 8008bc0:	47a0      	blx	r4
}
 8008bc2:	bd10      	pop	{r4, pc}

08008bc4 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008bc4:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008bc6:	68c4      	ldr	r4, [r0, #12]
 8008bc8:	8900      	ldrh	r0, [r0, #8]
 8008bca:	47a0      	blx	r4
}
 8008bcc:	bd10      	pop	{r4, pc}

08008bce <FT5336_GestureConfig>:
{
 8008bce:	b570      	push	{r4, r5, r6, lr}
 8008bd0:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8008bd2:	f100 0518 	add.w	r5, r0, #24
 8008bd6:	7809      	ldrb	r1, [r1, #0]
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f000 f91d 	bl	8008e18 <ft5336_radian_value>
 8008bde:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8008be0:	7931      	ldrb	r1, [r6, #4]
 8008be2:	4628      	mov	r0, r5
 8008be4:	f000 f925 	bl	8008e32 <ft5336_offset_left_right>
 8008be8:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8008bea:	7a31      	ldrb	r1, [r6, #8]
 8008bec:	4628      	mov	r0, r5
 8008bee:	f000 f92d 	bl	8008e4c <ft5336_offset_up_down>
 8008bf2:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8008bf4:	7b31      	ldrb	r1, [r6, #12]
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f000 f935 	bl	8008e66 <ft5336_disatnce_left_right>
 8008bfc:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8008bfe:	7c31      	ldrb	r1, [r6, #16]
 8008c00:	4628      	mov	r0, r5
 8008c02:	f000 f93d 	bl	8008e80 <ft5336_distance_up_down>
 8008c06:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8008c08:	7d31      	ldrb	r1, [r6, #20]
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 f945 	bl	8008e9a <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 8008c10:	1820      	adds	r0, r4, r0
 8008c12:	d100      	bne.n	8008c16 <FT5336_GestureConfig+0x48>
}
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8008c16:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008c1a:	e7fb      	b.n	8008c14 <FT5336_GestureConfig+0x46>

08008c1c <FT5336_ReadID>:
{
 8008c1c:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8008c1e:	3018      	adds	r0, #24
 8008c20:	f000 f955 	bl	8008ece <ft5336_chip_id>
}
 8008c24:	bd08      	pop	{r3, pc}

08008c26 <FT5336_DetectTouch>:
{
 8008c26:	b500      	push	{lr}
 8008c28:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8008c2a:	f10d 0107 	add.w	r1, sp, #7
 8008c2e:	3018      	adds	r0, #24
 8008c30:	f000 f8e5 	bl	8008dfe <ft5336_td_status>
 8008c34:	b938      	cbnz	r0, 8008c46 <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8008c36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008c3a:	2b05      	cmp	r3, #5
 8008c3c:	d800      	bhi.n	8008c40 <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 8008c3e:	4618      	mov	r0, r3
}
 8008c40:	b003      	add	sp, #12
 8008c42:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 8008c46:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008c4a:	e7f9      	b.n	8008c40 <FT5336_DetectTouch+0x1a>

08008c4c <FT5336_GetState>:
{
 8008c4c:	b530      	push	{r4, r5, lr}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	4605      	mov	r5, r0
 8008c52:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8008c54:	f7ff ffe7 	bl	8008c26 <FT5336_DetectTouch>
 8008c58:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008c5a:	2304      	movs	r3, #4
 8008c5c:	eb0d 0203 	add.w	r2, sp, r3
 8008c60:	2103      	movs	r1, #3
 8008c62:	f105 0018 	add.w	r0, r5, #24
 8008c66:	f000 f8b9 	bl	8008ddc <ft5336_read_reg>
 8008c6a:	b998      	cbnz	r0, 8008c94 <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8008c6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008c70:	021b      	lsls	r3, r3, #8
 8008c72:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8008c7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008c82:	021b      	lsls	r3, r3, #8
 8008c84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c88:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60a3      	str	r3, [r4, #8]
}
 8008c90:	b003      	add	sp, #12
 8008c92:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008c98:	e7fa      	b.n	8008c90 <FT5336_GetState+0x44>

08008c9a <FT5336_GetMultiTouchState>:
{
 8008c9a:	b530      	push	{r4, r5, lr}
 8008c9c:	b089      	sub	sp, #36	; 0x24
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8008ca2:	f7ff ffc0 	bl	8008c26 <FT5336_DetectTouch>
 8008ca6:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008ca8:	231e      	movs	r3, #30
 8008caa:	466a      	mov	r2, sp
 8008cac:	2103      	movs	r1, #3
 8008cae:	f104 0018 	add.w	r0, r4, #24
 8008cb2:	f000 f893 	bl	8008ddc <ft5336_read_reg>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d146      	bne.n	8008d48 <FT5336_GetMultiTouchState+0xae>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	e040      	b.n	8008d40 <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8008cbe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8008cc2:	004a      	lsls	r2, r1, #1
 8008cc4:	ac08      	add	r4, sp, #32
 8008cc6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8008cca:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 8008cce:	ea4f 210c 	mov.w	r1, ip, lsl #8
 8008cd2:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8008cd6:	f102 0421 	add.w	r4, r2, #33	; 0x21
 8008cda:	446c      	add	r4, sp
 8008cdc:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 8008ce0:	4321      	orrs	r1, r4
 8008ce2:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 8008ce6:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8008ce8:	f102 0122 	add.w	r1, r2, #34	; 0x22
 8008cec:	4469      	add	r1, sp
 8008cee:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8008cf2:	0224      	lsls	r4, r4, #8
 8008cf4:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 8008cf8:	f102 0123 	add.w	r1, r2, #35	; 0x23
 8008cfc:	4469      	add	r1, sp
 8008cfe:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8008d02:	430c      	orrs	r4, r1
 8008d04:	1d99      	adds	r1, r3, #6
 8008d06:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8008d0a:	ea4f 119c 	mov.w	r1, ip, lsr #6
 8008d0e:	f103 0410 	add.w	r4, r3, #16
 8008d12:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8008d16:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8008d1a:	4469      	add	r1, sp
 8008d1c:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8008d20:	f103 010a 	add.w	r1, r3, #10
 8008d24:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8008d28:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8008d2a:	3225      	adds	r2, #37	; 0x25
 8008d2c:	446a      	add	r2, sp
 8008d2e:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8008d32:	0909      	lsrs	r1, r1, #4
 8008d34:	f103 0214 	add.w	r2, r3, #20
 8008d38:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8008d3c:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8008d3e:	3301      	adds	r3, #1
 8008d40:	2b04      	cmp	r3, #4
 8008d42:	d9bc      	bls.n	8008cbe <FT5336_GetMultiTouchState+0x24>
}
 8008d44:	b009      	add	sp, #36	; 0x24
 8008d46:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008d4c:	e7fa      	b.n	8008d44 <FT5336_GetMultiTouchState+0xaa>

08008d4e <FT5336_GetGesture>:
{
 8008d4e:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8008d50:	3018      	adds	r0, #24
 8008d52:	f000 f84d 	bl	8008df0 <ft5336_gest_id>
}
 8008d56:	bd08      	pop	{r3, pc}

08008d58 <FT5336_EnableIT>:
{
 8008d58:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	3018      	adds	r0, #24
 8008d5e:	f000 f8a9 	bl	8008eb4 <ft5336_g_mode>
}
 8008d62:	bd08      	pop	{r3, pc}

08008d64 <FT5336_DisableIT>:
{
 8008d64:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8008d66:	2100      	movs	r1, #0
 8008d68:	3018      	adds	r0, #24
 8008d6a:	f000 f8a3 	bl	8008eb4 <ft5336_g_mode>
}
 8008d6e:	bd08      	pop	{r3, pc}

08008d70 <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 8008d70:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008d74:	b95b      	cbnz	r3, 8008d8e <FT5336_Init+0x1e>
{
 8008d76:	b510      	push	{r4, lr}
 8008d78:	4604      	mov	r4, r0
    pObj->IO.Init();
 8008d7a:	6803      	ldr	r3, [r0, #0]
 8008d7c:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7ff fff0 	bl	8008d64 <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 8008d84:	2201      	movs	r2, #1
 8008d86:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8008d8a:	b910      	cbnz	r0, 8008d92 <FT5336_Init+0x22>
}
 8008d8c:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8008d8e:	2000      	movs	r0, #0
}
 8008d90:	4770      	bx	lr
    ret = FT5336_ERROR;
 8008d92:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008d96:	e7f9      	b.n	8008d8c <FT5336_Init+0x1c>

08008d98 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8008d98:	b1a8      	cbz	r0, 8008dc6 <FT5336_RegisterBusIO+0x2e>
{
 8008d9a:	b508      	push	{r3, lr}
 8008d9c:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8008d9e:	680a      	ldr	r2, [r1, #0]
 8008da0:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008da2:	6848      	ldr	r0, [r1, #4]
 8008da4:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8008da6:	8908      	ldrh	r0, [r1, #8]
 8008da8:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008daa:	68c8      	ldr	r0, [r1, #12]
 8008dac:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008dae:	6908      	ldr	r0, [r1, #16]
 8008db0:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8008db2:	6949      	ldr	r1, [r1, #20]
 8008db4:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8008db6:	4907      	ldr	r1, [pc, #28]	; (8008dd4 <FT5336_RegisterBusIO+0x3c>)
 8008db8:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8008dba:	4907      	ldr	r1, [pc, #28]	; (8008dd8 <FT5336_RegisterBusIO+0x40>)
 8008dbc:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8008dbe:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 8008dc0:	b122      	cbz	r2, 8008dcc <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 8008dc2:	4790      	blx	r2
}
 8008dc4:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 8008dc6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008dca:	4770      	bx	lr
      ret = FT5336_ERROR;
 8008dcc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008dd0:	e7f8      	b.n	8008dc4 <FT5336_RegisterBusIO+0x2c>
 8008dd2:	bf00      	nop
 8008dd4:	08008bbb 	.word	0x08008bbb
 8008dd8:	08008bc5 	.word	0x08008bc5

08008ddc <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8008ddc:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008dde:	6844      	ldr	r4, [r0, #4]
 8008de0:	6880      	ldr	r0, [r0, #8]
 8008de2:	47a0      	blx	r4
}
 8008de4:	bd10      	pop	{r4, pc}

08008de6 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8008de6:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8008de8:	6804      	ldr	r4, [r0, #0]
 8008dea:	6880      	ldr	r0, [r0, #8]
 8008dec:	47a0      	blx	r4
}
 8008dee:	bd10      	pop	{r4, pc}

08008df0 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008df0:	b508      	push	{r3, lr}
 8008df2:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8008df4:	2301      	movs	r3, #1
 8008df6:	4619      	mov	r1, r3
 8008df8:	f7ff fff0 	bl	8008ddc <ft5336_read_reg>
}
 8008dfc:	bd08      	pop	{r3, pc}

08008dfe <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008dfe:	b510      	push	{r4, lr}
 8008e00:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8008e02:	2301      	movs	r3, #1
 8008e04:	460a      	mov	r2, r1
 8008e06:	2102      	movs	r1, #2
 8008e08:	f7ff ffe8 	bl	8008ddc <ft5336_read_reg>
  
  if(ret == 0)
 8008e0c:	b918      	cbnz	r0, 8008e16 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8008e0e:	7823      	ldrb	r3, [r4, #0]
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8008e16:	bd10      	pop	{r4, pc}

08008e18 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8008e18:	b500      	push	{lr}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8008e20:	2301      	movs	r3, #1
 8008e22:	f10d 0207 	add.w	r2, sp, #7
 8008e26:	2191      	movs	r1, #145	; 0x91
 8008e28:	f7ff ffdd 	bl	8008de6 <ft5336_write_reg>
}
 8008e2c:	b003      	add	sp, #12
 8008e2e:	f85d fb04 	ldr.w	pc, [sp], #4

08008e32 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008e32:	b500      	push	{lr}
 8008e34:	b083      	sub	sp, #12
 8008e36:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	f10d 0207 	add.w	r2, sp, #7
 8008e40:	2192      	movs	r1, #146	; 0x92
 8008e42:	f7ff ffd0 	bl	8008de6 <ft5336_write_reg>
}
 8008e46:	b003      	add	sp, #12
 8008e48:	f85d fb04 	ldr.w	pc, [sp], #4

08008e4c <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008e4c:	b500      	push	{lr}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8008e54:	2301      	movs	r3, #1
 8008e56:	f10d 0207 	add.w	r2, sp, #7
 8008e5a:	2193      	movs	r1, #147	; 0x93
 8008e5c:	f7ff ffc3 	bl	8008de6 <ft5336_write_reg>
}
 8008e60:	b003      	add	sp, #12
 8008e62:	f85d fb04 	ldr.w	pc, [sp], #4

08008e66 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008e66:	b500      	push	{lr}
 8008e68:	b083      	sub	sp, #12
 8008e6a:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8008e6e:	2301      	movs	r3, #1
 8008e70:	f10d 0207 	add.w	r2, sp, #7
 8008e74:	2194      	movs	r1, #148	; 0x94
 8008e76:	f7ff ffb6 	bl	8008de6 <ft5336_write_reg>
}
 8008e7a:	b003      	add	sp, #12
 8008e7c:	f85d fb04 	ldr.w	pc, [sp], #4

08008e80 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008e80:	b500      	push	{lr}
 8008e82:	b083      	sub	sp, #12
 8008e84:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f10d 0207 	add.w	r2, sp, #7
 8008e8e:	2195      	movs	r1, #149	; 0x95
 8008e90:	f7ff ffa9 	bl	8008de6 <ft5336_write_reg>
}
 8008e94:	b003      	add	sp, #12
 8008e96:	f85d fb04 	ldr.w	pc, [sp], #4

08008e9a <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8008e9a:	b500      	push	{lr}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f10d 0207 	add.w	r2, sp, #7
 8008ea8:	2196      	movs	r1, #150	; 0x96
 8008eaa:	f7ff ff9c 	bl	8008de6 <ft5336_write_reg>
}
 8008eae:	b003      	add	sp, #12
 8008eb0:	f85d fb04 	ldr.w	pc, [sp], #4

08008eb4 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8008eb4:	b500      	push	{lr}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f10d 0207 	add.w	r2, sp, #7
 8008ec2:	21a4      	movs	r1, #164	; 0xa4
 8008ec4:	f7ff ff8f 	bl	8008de6 <ft5336_write_reg>
}
 8008ec8:	b003      	add	sp, #12
 8008eca:	f85d fb04 	ldr.w	pc, [sp], #4

08008ece <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008ece:	b508      	push	{r3, lr}
 8008ed0:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	21a8      	movs	r1, #168	; 0xa8
 8008ed6:	f7ff ff81 	bl	8008ddc <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 8008eda:	bd08      	pop	{r3, pc}

08008edc <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8008edc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ee0:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8008ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ee6:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8008ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eec:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8008eee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ef2:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8008ef4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ef8:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8008efa:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8008efc:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8008efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f02:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8008f04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f08:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	4770      	bx	lr

08008f0e <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008f0e:	b570      	push	{r4, r5, r6, lr}
 8008f10:	b09a      	sub	sp, #104	; 0x68
 8008f12:	4606      	mov	r6, r0
 8008f14:	460c      	mov	r4, r1
 8008f16:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8008f18:	2250      	movs	r2, #80	; 0x50
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	a806      	add	r0, sp, #24
 8008f1e:	f01a fb4f 	bl	80235c0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8008f22:	2300      	movs	r3, #0
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	9302      	str	r3, [sp, #8]
 8008f28:	9303      	str	r3, [sp, #12]
 8008f2a:	9304      	str	r3, [sp, #16]
 8008f2c:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008f2e:	429c      	cmp	r4, r3
 8008f30:	bf08      	it	eq
 8008f32:	2d01      	cmpeq	r5, #1
 8008f34:	d061      	beq.n	8008ffa <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008f36:	2c00      	cmp	r4, #0
 8008f38:	d143      	bne.n	8008fc2 <MX25LM51245G_AutoPollingMemReady+0xb4>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008f3e:	2d01      	cmp	r5, #1
 8008f40:	d041      	beq.n	8008fc6 <MX25LM51245G_AutoPollingMemReady+0xb8>
 8008f42:	2300      	movs	r3, #0
 8008f44:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008f46:	2c00      	cmp	r4, #0
 8008f48:	d13f      	bne.n	8008fca <MX25LM51245G_AutoPollingMemReady+0xbc>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8008f4e:	2c00      	cmp	r4, #0
 8008f50:	d13d      	bne.n	8008fce <MX25LM51245G_AutoPollingMemReady+0xc0>
 8008f52:	2305      	movs	r3, #5
 8008f54:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8008f56:	2c00      	cmp	r4, #0
 8008f58:	d13c      	bne.n	8008fd4 <MX25LM51245G_AutoPollingMemReady+0xc6>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008f5e:	2d01      	cmp	r5, #1
 8008f60:	d03b      	beq.n	8008fda <MX25LM51245G_AutoPollingMemReady+0xcc>
 8008f62:	2300      	movs	r3, #0
 8008f64:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8008f66:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008f6a:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008f6c:	2c00      	cmp	r4, #0
 8008f6e:	d137      	bne.n	8008fe0 <MX25LM51245G_AutoPollingMemReady+0xd2>
 8008f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f74:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008f76:	2d01      	cmp	r5, #1
 8008f78:	d035      	beq.n	8008fe6 <MX25LM51245G_AutoPollingMemReady+0xd8>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008f7e:	bbac      	cbnz	r4, 8008fec <MX25LM51245G_AutoPollingMemReady+0xde>
 8008f80:	2300      	movs	r3, #0
 8008f82:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8008f84:	2d01      	cmp	r5, #1
 8008f86:	d033      	beq.n	8008ff0 <MX25LM51245G_AutoPollingMemReady+0xe2>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8008f8c:	2d01      	cmp	r5, #1
 8008f8e:	d031      	beq.n	8008ff4 <MX25LM51245G_AutoPollingMemReady+0xe6>
 8008f90:	2300      	movs	r3, #0
 8008f92:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8008f94:	2301      	movs	r3, #1
 8008f96:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8008f98:	2310      	movs	r3, #16
 8008f9a:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8008f9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008fa0:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fa6:	a906      	add	r1, sp, #24
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f003 f8dd 	bl	800c168 <HAL_OSPI_Command>
 8008fae:	bb38      	cbnz	r0, 8009000 <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb4:	a901      	add	r1, sp, #4
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f003 f9e7 	bl	800c38a <HAL_OSPI_AutoPolling>
 8008fbc:	bb18      	cbnz	r0, 8009006 <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8008fbe:	b01a      	add	sp, #104	; 0x68
 8008fc0:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008fc2:	2304      	movs	r3, #4
 8008fc4:	e7ba      	b.n	8008f3c <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	e7bc      	b.n	8008f44 <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008fca:	2310      	movs	r3, #16
 8008fcc:	e7be      	b.n	8008f4c <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8008fce:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8008fd2:	e7bf      	b.n	8008f54 <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8008fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fd8:	e7c0      	b.n	8008f5c <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fde:	e7c1      	b.n	8008f64 <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008fe0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008fe4:	e7c6      	b.n	8008f74 <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008fe6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fea:	e7c7      	b.n	8008f7c <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008fec:	2305      	movs	r3, #5
 8008fee:	e7c8      	b.n	8008f82 <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e7ca      	b.n	8008f8a <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8008ff4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008ff8:	e7cb      	b.n	8008f92 <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 8008ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffe:	e7de      	b.n	8008fbe <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e7db      	b.n	8008fbe <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8009006:	f04f 30ff 	mov.w	r0, #4294967295
 800900a:	e7d8      	b.n	8008fbe <MX25LM51245G_AutoPollingMemReady+0xb0>

0800900c <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	b096      	sub	sp, #88	; 0x58
 8009010:	4606      	mov	r6, r0
 8009012:	460c      	mov	r4, r1
 8009014:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 8009016:	2250      	movs	r2, #80	; 0x50
 8009018:	2100      	movs	r1, #0
 800901a:	a802      	add	r0, sp, #8
 800901c:	f01a fad0 	bl	80235c0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8009020:	2300      	movs	r3, #0
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8009026:	2c01      	cmp	r4, #1
 8009028:	bf08      	it	eq
 800902a:	429d      	cmpeq	r5, r3
 800902c:	d04e      	beq.n	80090cc <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800902e:	2301      	movs	r3, #1
 8009030:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009032:	b104      	cbz	r4, 8009036 <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 8009034:	2304      	movs	r3, #4
 8009036:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009038:	b92c      	cbnz	r4, 8009046 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 800903a:	2300      	movs	r3, #0
 800903c:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800903e:	b924      	cbnz	r4, 800904a <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 8009040:	bb15      	cbnz	r5, 8009088 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 8009042:	230b      	movs	r3, #11
 8009044:	e003      	b.n	800904e <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009046:	2310      	movs	r3, #16
 8009048:	e7f8      	b.n	800903c <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800904a:	f64e 4313 	movw	r3, #60435	; 0xec13
 800904e:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009050:	b9e4      	cbnz	r4, 800908c <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 8009052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009056:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8009058:	b9dd      	cbnz	r5, 8009092 <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 800905a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800905e:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009060:	b9d4      	cbnz	r4, 8009098 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8009062:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009066:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8009068:	b9cc      	cbnz	r4, 800909e <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 800906a:	2308      	movs	r3, #8
 800906c:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800906e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009072:	a902      	add	r1, sp, #8
 8009074:	4630      	mov	r0, r6
 8009076:	f003 f877 	bl	800c168 <HAL_OSPI_Command>
 800907a:	bb50      	cbnz	r0, 80090d2 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 800907c:	2302      	movs	r3, #2
 800907e:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8009080:	b97c      	cbnz	r4, 80090a2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 8009082:	b185      	cbz	r5, 80090a6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 8009084:	2312      	movs	r3, #18
 8009086:	e00e      	b.n	80090a6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8009088:	230c      	movs	r3, #12
 800908a:	e7e0      	b.n	800904e <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800908c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009090:	e7e1      	b.n	8009056 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8009092:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009096:	e7e2      	b.n	800905e <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009098:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800909c:	e7e3      	b.n	8009066 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 800909e:	2306      	movs	r3, #6
 80090a0:	e7e4      	b.n	800906c <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80090a2:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80090a6:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 80090a8:	2300      	movs	r3, #0
 80090aa:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80090ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80090b0:	a902      	add	r1, sp, #8
 80090b2:	4630      	mov	r0, r6
 80090b4:	f003 f858 	bl	800c168 <HAL_OSPI_Command>
 80090b8:	b970      	cbnz	r0, 80090d8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80090be:	4669      	mov	r1, sp
 80090c0:	4630      	mov	r0, r6
 80090c2:	f003 f9bf 	bl	800c444 <HAL_OSPI_MemoryMapped>
 80090c6:	b950      	cbnz	r0, 80090de <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80090c8:	b016      	add	sp, #88	; 0x58
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295
 80090d0:	e7fa      	b.n	80090c8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80090d2:	f04f 30ff 	mov.w	r0, #4294967295
 80090d6:	e7f7      	b.n	80090c8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80090d8:	f04f 30ff 	mov.w	r0, #4294967295
 80090dc:	e7f4      	b.n	80090c8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	e7f1      	b.n	80090c8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

080090e4 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 80090e4:	b510      	push	{r4, lr}
 80090e6:	b096      	sub	sp, #88	; 0x58
 80090e8:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 80090ea:	2250      	movs	r2, #80	; 0x50
 80090ec:	2100      	movs	r1, #0
 80090ee:	a802      	add	r0, sp, #8
 80090f0:	f01a fa66 	bl	80235c0 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80090f4:	2300      	movs	r3, #0
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80090fa:	2301      	movs	r3, #1
 80090fc:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80090fe:	2304      	movs	r3, #4
 8009100:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8009102:	2308      	movs	r3, #8
 8009104:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8009106:	2310      	movs	r3, #16
 8009108:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 800910a:	f64e 6311 	movw	r3, #60945	; 0xee11
 800910e:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8009110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009114:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8009116:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800911a:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800911c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009120:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8009122:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009126:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8009128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800912c:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800912e:	2306      	movs	r3, #6
 8009130:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8009132:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009136:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009138:	f241 3288 	movw	r2, #5000	; 0x1388
 800913c:	a902      	add	r1, sp, #8
 800913e:	4620      	mov	r0, r4
 8009140:	f003 f812 	bl	800c168 <HAL_OSPI_Command>
 8009144:	b9b8      	cbnz	r0, 8009176 <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8009146:	2302      	movs	r3, #2
 8009148:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800914a:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800914e:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8009154:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009156:	f241 3288 	movw	r2, #5000	; 0x1388
 800915a:	a902      	add	r1, sp, #8
 800915c:	4620      	mov	r0, r4
 800915e:	f003 f803 	bl	800c168 <HAL_OSPI_Command>
 8009162:	b958      	cbnz	r0, 800917c <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8009164:	2300      	movs	r3, #0
 8009166:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8009168:	4669      	mov	r1, sp
 800916a:	4620      	mov	r0, r4
 800916c:	f003 f96a 	bl	800c444 <HAL_OSPI_MemoryMapped>
 8009170:	b938      	cbnz	r0, 8009182 <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8009172:	b016      	add	sp, #88	; 0x58
 8009174:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
 800917a:	e7fa      	b.n	8009172 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	e7f7      	b.n	8009172 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8009182:	f04f 30ff 	mov.w	r0, #4294967295
 8009186:	e7f4      	b.n	8009172 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

08009188 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	b09a      	sub	sp, #104	; 0x68
 800918c:	4606      	mov	r6, r0
 800918e:	460c      	mov	r4, r1
 8009190:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 8009192:	2250      	movs	r2, #80	; 0x50
 8009194:	2100      	movs	r1, #0
 8009196:	a806      	add	r0, sp, #24
 8009198:	f01a fa12 	bl	80235c0 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800919c:	2300      	movs	r3, #0
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	9302      	str	r3, [sp, #8]
 80091a2:	9303      	str	r3, [sp, #12]
 80091a4:	9304      	str	r3, [sp, #16]
 80091a6:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80091a8:	429c      	cmp	r4, r3
 80091aa:	bf08      	it	eq
 80091ac:	2d01      	cmpeq	r5, #1
 80091ae:	d076      	beq.n	800929e <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80091b0:	2c00      	cmp	r4, #0
 80091b2:	d155      	bne.n	8009260 <MX25LM51245G_WriteEnable+0xd8>
 80091b4:	2301      	movs	r3, #1
 80091b6:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80091b8:	2d01      	cmp	r5, #1
 80091ba:	d053      	beq.n	8009264 <MX25LM51245G_WriteEnable+0xdc>
 80091bc:	2300      	movs	r3, #0
 80091be:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80091c0:	2c00      	cmp	r4, #0
 80091c2:	d151      	bne.n	8009268 <MX25LM51245G_WriteEnable+0xe0>
 80091c4:	2300      	movs	r3, #0
 80091c6:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 80091c8:	2c00      	cmp	r4, #0
 80091ca:	d14f      	bne.n	800926c <MX25LM51245G_WriteEnable+0xe4>
 80091cc:	2306      	movs	r3, #6
 80091ce:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80091d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d4:	a906      	add	r1, sp, #24
 80091d6:	4630      	mov	r0, r6
 80091d8:	f002 ffc6 	bl	800c168 <HAL_OSPI_Command>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d161      	bne.n	80092a4 <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80091e0:	2c00      	cmp	r4, #0
 80091e2:	d146      	bne.n	8009272 <MX25LM51245G_WriteEnable+0xea>
 80091e4:	2305      	movs	r3, #5
 80091e6:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80091e8:	2c00      	cmp	r4, #0
 80091ea:	d145      	bne.n	8009278 <MX25LM51245G_WriteEnable+0xf0>
 80091ec:	2300      	movs	r3, #0
 80091ee:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80091f0:	2d01      	cmp	r5, #1
 80091f2:	d044      	beq.n	800927e <MX25LM51245G_WriteEnable+0xf6>
 80091f4:	2300      	movs	r3, #0
 80091f6:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80091f8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80091fc:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009202:	2c00      	cmp	r4, #0
 8009204:	d13e      	bne.n	8009284 <MX25LM51245G_WriteEnable+0xfc>
 8009206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800920a:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800920c:	2d01      	cmp	r5, #1
 800920e:	d03c      	beq.n	800928a <MX25LM51245G_WriteEnable+0x102>
 8009210:	2300      	movs	r3, #0
 8009212:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009214:	2c00      	cmp	r4, #0
 8009216:	d13b      	bne.n	8009290 <MX25LM51245G_WriteEnable+0x108>
 8009218:	2300      	movs	r3, #0
 800921a:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800921c:	2d01      	cmp	r5, #1
 800921e:	d039      	beq.n	8009294 <MX25LM51245G_WriteEnable+0x10c>
 8009220:	2301      	movs	r3, #1
 8009222:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009224:	2d01      	cmp	r5, #1
 8009226:	d037      	beq.n	8009298 <MX25LM51245G_WriteEnable+0x110>
 8009228:	2300      	movs	r3, #0
 800922a:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800922c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009230:	a906      	add	r1, sp, #24
 8009232:	4630      	mov	r0, r6
 8009234:	f002 ff98 	bl	800c168 <HAL_OSPI_Command>
 8009238:	bbb8      	cbnz	r0, 80092aa <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 800923a:	2302      	movs	r3, #2
 800923c:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 800923e:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8009240:	2300      	movs	r3, #0
 8009242:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8009244:	2310      	movs	r3, #16
 8009246:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009248:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800924c:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800924e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009252:	a901      	add	r1, sp, #4
 8009254:	4630      	mov	r0, r6
 8009256:	f003 f898 	bl	800c38a <HAL_OSPI_AutoPolling>
 800925a:	bb48      	cbnz	r0, 80092b0 <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800925c:	b01a      	add	sp, #104	; 0x68
 800925e:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009260:	2304      	movs	r3, #4
 8009262:	e7a8      	b.n	80091b6 <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009264:	2308      	movs	r3, #8
 8009266:	e7aa      	b.n	80091be <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009268:	2310      	movs	r3, #16
 800926a:	e7ac      	b.n	80091c6 <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800926c:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8009270:	e7ad      	b.n	80091ce <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8009272:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8009276:	e7b6      	b.n	80091e6 <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8009278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800927c:	e7b7      	b.n	80091ee <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800927e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009282:	e7b8      	b.n	80091f6 <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009284:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009288:	e7bf      	b.n	800920a <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800928a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800928e:	e7c0      	b.n	8009212 <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009290:	2305      	movs	r3, #5
 8009292:	e7c2      	b.n	800921a <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009294:	2302      	movs	r3, #2
 8009296:	e7c4      	b.n	8009222 <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009298:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800929c:	e7c5      	b.n	800922a <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 800929e:	f04f 30ff 	mov.w	r0, #4294967295
 80092a2:	e7db      	b.n	800925c <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	e7d8      	b.n	800925c <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295
 80092ae:	e7d5      	b.n	800925c <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	e7d2      	b.n	800925c <MX25LM51245G_WriteEnable+0xd4>

080092b6 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 80092b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092b8:	b095      	sub	sp, #84	; 0x54
 80092ba:	4607      	mov	r7, r0
 80092bc:	460c      	mov	r4, r1
 80092be:	4615      	mov	r5, r2
 80092c0:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80092c2:	2250      	movs	r2, #80	; 0x50
 80092c4:	2100      	movs	r1, #0
 80092c6:	4668      	mov	r0, sp
 80092c8:	f01a f97a 	bl	80235c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80092cc:	2c00      	cmp	r4, #0
 80092ce:	bf08      	it	eq
 80092d0:	2d01      	cmpeq	r5, #1
 80092d2:	d04e      	beq.n	8009372 <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80092d4:	bb24      	cbnz	r4, 8009320 <MX25LM51245G_WriteCfg2Register+0x6a>
 80092d6:	2301      	movs	r3, #1
 80092d8:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80092da:	2d01      	cmp	r5, #1
 80092dc:	d022      	beq.n	8009324 <MX25LM51245G_WriteCfg2Register+0x6e>
 80092de:	2300      	movs	r3, #0
 80092e0:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80092e2:	bb0c      	cbnz	r4, 8009328 <MX25LM51245G_WriteCfg2Register+0x72>
 80092e4:	2300      	movs	r3, #0
 80092e6:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80092e8:	bb04      	cbnz	r4, 800932c <MX25LM51245G_WriteCfg2Register+0x76>
 80092ea:	2372      	movs	r3, #114	; 0x72
 80092ec:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80092ee:	bb04      	cbnz	r4, 8009332 <MX25LM51245G_WriteCfg2Register+0x7c>
 80092f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092f4:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80092f6:	2d01      	cmp	r5, #1
 80092f8:	d01e      	beq.n	8009338 <MX25LM51245G_WriteCfg2Register+0x82>
 80092fa:	2300      	movs	r3, #0
 80092fc:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80092fe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009302:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 8009304:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009306:	b9d4      	cbnz	r4, 800933e <MX25LM51245G_WriteCfg2Register+0x88>
 8009308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800930c:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800930e:	2d01      	cmp	r5, #1
 8009310:	d018      	beq.n	8009344 <MX25LM51245G_WriteCfg2Register+0x8e>
 8009312:	2300      	movs	r3, #0
 8009314:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8009316:	b1d4      	cbz	r4, 800934e <MX25LM51245G_WriteCfg2Register+0x98>
 8009318:	2d01      	cmp	r5, #1
 800931a:	d016      	beq.n	800934a <MX25LM51245G_WriteCfg2Register+0x94>
 800931c:	2301      	movs	r3, #1
 800931e:	e017      	b.n	8009350 <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009320:	2304      	movs	r3, #4
 8009322:	e7d9      	b.n	80092d8 <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009324:	2308      	movs	r3, #8
 8009326:	e7db      	b.n	80092e0 <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009328:	2310      	movs	r3, #16
 800932a:	e7dc      	b.n	80092e6 <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800932c:	f247 238d 	movw	r3, #29325	; 0x728d
 8009330:	e7dc      	b.n	80092ec <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009336:	e7dd      	b.n	80092f4 <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800933c:	e7de      	b.n	80092fc <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800933e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009342:	e7e3      	b.n	800930c <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009348:	e7e4      	b.n	8009314 <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800934a:	2302      	movs	r3, #2
 800934c:	e000      	b.n	8009350 <MX25LM51245G_WriteCfg2Register+0x9a>
 800934e:	2301      	movs	r3, #1
 8009350:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009352:	f241 3288 	movw	r2, #5000	; 0x1388
 8009356:	4669      	mov	r1, sp
 8009358:	4638      	mov	r0, r7
 800935a:	f002 ff05 	bl	800c168 <HAL_OSPI_Command>
 800935e:	b958      	cbnz	r0, 8009378 <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009360:	f241 3288 	movw	r2, #5000	; 0x1388
 8009364:	a91a      	add	r1, sp, #104	; 0x68
 8009366:	4638      	mov	r0, r7
 8009368:	f002 ff5f 	bl	800c22a <HAL_OSPI_Transmit>
 800936c:	b938      	cbnz	r0, 800937e <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800936e:	b015      	add	sp, #84	; 0x54
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 8009372:	f04f 30ff 	mov.w	r0, #4294967295
 8009376:	e7fa      	b.n	800936e <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	e7f7      	b.n	800936e <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 800937e:	f04f 30ff 	mov.w	r0, #4294967295
 8009382:	e7f4      	b.n	800936e <MX25LM51245G_WriteCfg2Register+0xb8>

08009384 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8009384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009386:	b095      	sub	sp, #84	; 0x54
 8009388:	4607      	mov	r7, r0
 800938a:	460c      	mov	r4, r1
 800938c:	4615      	mov	r5, r2
 800938e:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8009390:	2250      	movs	r2, #80	; 0x50
 8009392:	2100      	movs	r1, #0
 8009394:	4668      	mov	r0, sp
 8009396:	f01a f913 	bl	80235c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800939a:	2c00      	cmp	r4, #0
 800939c:	bf08      	it	eq
 800939e:	2d01      	cmpeq	r5, #1
 80093a0:	d05b      	beq.n	800945a <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80093a2:	2c00      	cmp	r4, #0
 80093a4:	d13d      	bne.n	8009422 <MX25LM51245G_ReadCfg2Register+0x9e>
 80093a6:	2301      	movs	r3, #1
 80093a8:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80093aa:	2d01      	cmp	r5, #1
 80093ac:	d03b      	beq.n	8009426 <MX25LM51245G_ReadCfg2Register+0xa2>
 80093ae:	2300      	movs	r3, #0
 80093b0:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80093b2:	2c00      	cmp	r4, #0
 80093b4:	d139      	bne.n	800942a <MX25LM51245G_ReadCfg2Register+0xa6>
 80093b6:	2300      	movs	r3, #0
 80093b8:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80093ba:	2c00      	cmp	r4, #0
 80093bc:	d137      	bne.n	800942e <MX25LM51245G_ReadCfg2Register+0xaa>
 80093be:	2371      	movs	r3, #113	; 0x71
 80093c0:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80093c2:	2c00      	cmp	r4, #0
 80093c4:	d136      	bne.n	8009434 <MX25LM51245G_ReadCfg2Register+0xb0>
 80093c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ca:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80093cc:	2d01      	cmp	r5, #1
 80093ce:	d034      	beq.n	800943a <MX25LM51245G_ReadCfg2Register+0xb6>
 80093d0:	2300      	movs	r3, #0
 80093d2:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80093d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80093d8:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 80093da:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80093dc:	bb84      	cbnz	r4, 8009440 <MX25LM51245G_ReadCfg2Register+0xbc>
 80093de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093e2:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80093e4:	2d01      	cmp	r5, #1
 80093e6:	d02e      	beq.n	8009446 <MX25LM51245G_ReadCfg2Register+0xc2>
 80093e8:	2300      	movs	r3, #0
 80093ea:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80093ec:	bb74      	cbnz	r4, 800944c <MX25LM51245G_ReadCfg2Register+0xc8>
 80093ee:	2300      	movs	r3, #0
 80093f0:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80093f2:	2d01      	cmp	r5, #1
 80093f4:	d02c      	beq.n	8009450 <MX25LM51245G_ReadCfg2Register+0xcc>
 80093f6:	2301      	movs	r3, #1
 80093f8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80093fa:	2d01      	cmp	r5, #1
 80093fc:	d02a      	beq.n	8009454 <MX25LM51245G_ReadCfg2Register+0xd0>
 80093fe:	2300      	movs	r3, #0
 8009400:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009402:	f241 3288 	movw	r2, #5000	; 0x1388
 8009406:	4669      	mov	r1, sp
 8009408:	4638      	mov	r0, r7
 800940a:	f002 fead 	bl	800c168 <HAL_OSPI_Command>
 800940e:	bb38      	cbnz	r0, 8009460 <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009410:	f241 3288 	movw	r2, #5000	; 0x1388
 8009414:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009416:	4638      	mov	r0, r7
 8009418:	f002 ff54 	bl	800c2c4 <HAL_OSPI_Receive>
 800941c:	bb18      	cbnz	r0, 8009466 <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800941e:	b015      	add	sp, #84	; 0x54
 8009420:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009422:	2304      	movs	r3, #4
 8009424:	e7c0      	b.n	80093a8 <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009426:	2308      	movs	r3, #8
 8009428:	e7c2      	b.n	80093b0 <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800942a:	2310      	movs	r3, #16
 800942c:	e7c4      	b.n	80093b8 <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800942e:	f247 138e 	movw	r3, #29070	; 0x718e
 8009432:	e7c5      	b.n	80093c0 <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009438:	e7c7      	b.n	80093ca <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800943a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800943e:	e7c8      	b.n	80093d2 <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009440:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009444:	e7cd      	b.n	80093e2 <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009446:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800944a:	e7ce      	b.n	80093ea <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800944c:	2305      	movs	r3, #5
 800944e:	e7cf      	b.n	80093f0 <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009450:	2302      	movs	r3, #2
 8009452:	e7d1      	b.n	80093f8 <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8009454:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009458:	e7d2      	b.n	8009400 <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 800945a:	f04f 30ff 	mov.w	r0, #4294967295
 800945e:	e7de      	b.n	800941e <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8009460:	f04f 30ff 	mov.w	r0, #4294967295
 8009464:	e7db      	b.n	800941e <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8009466:	f04f 30ff 	mov.w	r0, #4294967295
 800946a:	e7d8      	b.n	800941e <MX25LM51245G_ReadCfg2Register+0x9a>

0800946c <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	b094      	sub	sp, #80	; 0x50
 8009470:	4606      	mov	r6, r0
 8009472:	460c      	mov	r4, r1
 8009474:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8009476:	2250      	movs	r2, #80	; 0x50
 8009478:	2100      	movs	r1, #0
 800947a:	4668      	mov	r0, sp
 800947c:	f01a f8a0 	bl	80235c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009480:	2c00      	cmp	r4, #0
 8009482:	bf08      	it	eq
 8009484:	2d01      	cmpeq	r5, #1
 8009486:	d01e      	beq.n	80094c6 <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009488:	b9a4      	cbnz	r4, 80094b4 <MX25LM51245G_ResetEnable+0x48>
 800948a:	2301      	movs	r3, #1
 800948c:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800948e:	2d01      	cmp	r5, #1
 8009490:	d012      	beq.n	80094b8 <MX25LM51245G_ResetEnable+0x4c>
 8009492:	2300      	movs	r3, #0
 8009494:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009496:	b98c      	cbnz	r4, 80094bc <MX25LM51245G_ResetEnable+0x50>
 8009498:	2300      	movs	r3, #0
 800949a:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800949c:	b984      	cbnz	r4, 80094c0 <MX25LM51245G_ResetEnable+0x54>
 800949e:	2366      	movs	r3, #102	; 0x66
 80094a0:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80094a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a6:	4669      	mov	r1, sp
 80094a8:	4630      	mov	r0, r6
 80094aa:	f002 fe5d 	bl	800c168 <HAL_OSPI_Command>
 80094ae:	b968      	cbnz	r0, 80094cc <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80094b0:	b014      	add	sp, #80	; 0x50
 80094b2:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80094b4:	2304      	movs	r3, #4
 80094b6:	e7e9      	b.n	800948c <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80094b8:	2308      	movs	r3, #8
 80094ba:	e7eb      	b.n	8009494 <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80094bc:	2310      	movs	r3, #16
 80094be:	e7ec      	b.n	800949a <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80094c0:	f246 6399 	movw	r3, #26265	; 0x6699
 80094c4:	e7ec      	b.n	80094a0 <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 80094c6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ca:	e7f1      	b.n	80094b0 <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
 80094d0:	e7ee      	b.n	80094b0 <MX25LM51245G_ResetEnable+0x44>

080094d2 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80094d2:	b570      	push	{r4, r5, r6, lr}
 80094d4:	b094      	sub	sp, #80	; 0x50
 80094d6:	4606      	mov	r6, r0
 80094d8:	460c      	mov	r4, r1
 80094da:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80094dc:	2250      	movs	r2, #80	; 0x50
 80094de:	2100      	movs	r1, #0
 80094e0:	4668      	mov	r0, sp
 80094e2:	f01a f86d 	bl	80235c0 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80094e6:	2c00      	cmp	r4, #0
 80094e8:	bf08      	it	eq
 80094ea:	2d01      	cmpeq	r5, #1
 80094ec:	d01e      	beq.n	800952c <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80094ee:	b9a4      	cbnz	r4, 800951a <MX25LM51245G_ResetMemory+0x48>
 80094f0:	2301      	movs	r3, #1
 80094f2:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80094f4:	2d01      	cmp	r5, #1
 80094f6:	d012      	beq.n	800951e <MX25LM51245G_ResetMemory+0x4c>
 80094f8:	2300      	movs	r3, #0
 80094fa:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80094fc:	b98c      	cbnz	r4, 8009522 <MX25LM51245G_ResetMemory+0x50>
 80094fe:	2300      	movs	r3, #0
 8009500:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8009502:	b984      	cbnz	r4, 8009526 <MX25LM51245G_ResetMemory+0x54>
 8009504:	2399      	movs	r3, #153	; 0x99
 8009506:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009508:	f241 3288 	movw	r2, #5000	; 0x1388
 800950c:	4669      	mov	r1, sp
 800950e:	4630      	mov	r0, r6
 8009510:	f002 fe2a 	bl	800c168 <HAL_OSPI_Command>
 8009514:	b968      	cbnz	r0, 8009532 <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8009516:	b014      	add	sp, #80	; 0x50
 8009518:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800951a:	2304      	movs	r3, #4
 800951c:	e7e9      	b.n	80094f2 <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800951e:	2308      	movs	r3, #8
 8009520:	e7eb      	b.n	80094fa <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009522:	2310      	movs	r3, #16
 8009524:	e7ec      	b.n	8009500 <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8009526:	f649 1366 	movw	r3, #39270	; 0x9966
 800952a:	e7ec      	b.n	8009506 <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	e7f1      	b.n	8009516 <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 8009532:	f04f 30ff 	mov.w	r0, #4294967295
 8009536:	e7ee      	b.n	8009516 <MX25LM51245G_ResetMemory+0x44>

08009538 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800953c:	4b32      	ldr	r3, [pc, #200]	; (8009608 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 800953e:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 8009542:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009546:	4b31      	ldr	r3, [pc, #196]	; (800960c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 8009548:	222c      	movs	r2, #44	; 0x2c
 800954a:	fb02 3101 	mla	r1, r2, r1, r3
 800954e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8009550:	68ca      	ldr	r2, [r1, #12]
 8009552:	eb03 0e02 	add.w	lr, r3, r2
 8009556:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800955a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800955c:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800955e:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009562:	690b      	ldr	r3, [r1, #16]
 8009564:	6a08      	ldr	r0, [r1, #32]
 8009566:	1a1e      	subs	r6, r3, r0
 8009568:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800956c:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800956e:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8009572:	694b      	ldr	r3, [r1, #20]
 8009574:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 8009578:	f1be 0f00 	cmp.w	lr, #0
 800957c:	dd08      	ble.n	8009590 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 800957e:	2e00      	cmp	r6, #0
 8009580:	dd09      	ble.n	8009596 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009582:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 8009584:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009588:	2d0f      	cmp	r5, #15
 800958a:	d83b      	bhi.n	8009604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800958c:	2400      	movs	r4, #0
 800958e:	e02b      	b.n	80095e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 8009590:	f04f 0e00 	mov.w	lr, #0
 8009594:	e7f3      	b.n	800957e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 8009596:	2600      	movs	r6, #0
 8009598:	e7f3      	b.n	8009582 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800959a:	3201      	adds	r2, #1
 800959c:	2a0f      	cmp	r2, #15
 800959e:	d822      	bhi.n	80095e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80095a0:	fb02 f300 	mul.w	r3, r2, r0
 80095a4:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80095a8:	459e      	cmp	lr, r3
 80095aa:	bf8c      	ite	hi
 80095ac:	2100      	movhi	r1, #0
 80095ae:	2101      	movls	r1, #1
 80095b0:	429e      	cmp	r6, r3
 80095b2:	bf38      	it	cc
 80095b4:	2100      	movcc	r1, #0
 80095b6:	2900      	cmp	r1, #0
 80095b8:	d0ef      	beq.n	800959a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 80095ba:	45a9      	cmp	r9, r5
 80095bc:	d0ed      	beq.n	800959a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80095be:	4914      	ldr	r1, [pc, #80]	; (8009610 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 80095c0:	680b      	ldr	r3, [r1, #0]
 80095c2:	f8df a050 	ldr.w	sl, [pc, #80]	; 8009614 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 80095c6:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80095ca:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 80095ce:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80095d2:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80095d6:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 80095da:	3301      	adds	r3, #1
 80095dc:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80095de:	2b7f      	cmp	r3, #127	; 0x7f
 80095e0:	d810      	bhi.n	8009604 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 80095e2:	46a9      	mov	r9, r5
 80095e4:	e7d9      	b.n	800959a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80095e6:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80095e8:	2c0f      	cmp	r4, #15
 80095ea:	d809      	bhi.n	8009600 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80095ec:	1c67      	adds	r7, r4, #1
 80095ee:	1c68      	adds	r0, r5, #1
 80095f0:	fb04 0300 	mla	r3, r4, r0, r0
 80095f4:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 80095f8:	4598      	cmp	r8, r3
 80095fa:	d8f4      	bhi.n	80095e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80095fc:	2200      	movs	r2, #0
 80095fe:	e7cd      	b.n	800959c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009600:	3501      	adds	r5, #1
 8009602:	e7c1      	b.n	8009588 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 8009604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009608:	3b9aca00 	.word	0x3b9aca00
 800960c:	080266e8 	.word	0x080266e8
 8009610:	24006f1c 	.word	0x24006f1c
 8009614:	2400651c 	.word	0x2400651c

08009618 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	b089      	sub	sp, #36	; 0x24
 800961e:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009620:	4f4b      	ldr	r7, [pc, #300]	; (8009750 <I2C_Compute_SCLL_SCLH+0x138>)
 8009622:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 8009626:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800962a:	494a      	ldr	r1, [pc, #296]	; (8009754 <I2C_Compute_SCLL_SCLH+0x13c>)
 800962c:	232c      	movs	r3, #44	; 0x2c
 800962e:	fb04 f303 	mul.w	r3, r4, r3
 8009632:	18ca      	adds	r2, r1, r3
 8009634:	58cb      	ldr	r3, [r1, r3]
 8009636:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 800963a:	fbb1 f1f3 	udiv	r1, r1, r3
 800963e:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8009640:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009642:	fb08 f303 	mul.w	r3, r8, r3
 8009646:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8009648:	6853      	ldr	r3, [r2, #4]
 800964a:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800964e:	6893      	ldr	r3, [r2, #8]
 8009650:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 8009654:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009656:	2300      	movs	r3, #0
 8009658:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 800965a:	f04f 33ff 	mov.w	r3, #4294967295
 800965e:	9307      	str	r3, [sp, #28]
 8009660:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009662:	e060      	b.n	8009726 <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 8009664:	1af2      	subs	r2, r6, r3
 8009666:	e02a      	b.n	80096be <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8009668:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800966a:	29ff      	cmp	r1, #255	; 0xff
 800966c:	d837      	bhi.n	80096de <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800966e:	1c4d      	adds	r5, r1, #1
 8009670:	fb01 0200 	mla	r2, r1, r0, r0
 8009674:	4442      	add	r2, r8
 8009676:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8009678:	eb0c 0302 	add.w	r3, ip, r2
 800967c:	4e35      	ldr	r6, [pc, #212]	; (8009754 <I2C_Compute_SCLL_SCLH+0x13c>)
 800967e:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8009682:	fb0b 6b04 	mla	fp, fp, r4, r6
 8009686:	f8db 6020 	ldr.w	r6, [fp, #32]
 800968a:	4433      	add	r3, r6
 800968c:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8009690:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009692:	429f      	cmp	r7, r3
 8009694:	bf8c      	ite	hi
 8009696:	2600      	movhi	r6, #0
 8009698:	2601      	movls	r6, #1
 800969a:	4599      	cmp	r9, r3
 800969c:	bf38      	it	cc
 800969e:	2600      	movcc	r6, #0
 80096a0:	2e00      	cmp	r6, #0
 80096a2:	d0e1      	beq.n	8009668 <I2C_Compute_SCLL_SCLH+0x50>
 80096a4:	4e2b      	ldr	r6, [pc, #172]	; (8009754 <I2C_Compute_SCLL_SCLH+0x13c>)
 80096a6:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 80096aa:	fb0b 6604 	mla	r6, fp, r4, r6
 80096ae:	69f6      	ldr	r6, [r6, #28]
 80096b0:	4296      	cmp	r6, r2
 80096b2:	d8d9      	bhi.n	8009668 <I2C_Compute_SCLL_SCLH+0x50>
 80096b4:	4592      	cmp	sl, r2
 80096b6:	d2d7      	bcs.n	8009668 <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 80096b8:	9e05      	ldr	r6, [sp, #20]
 80096ba:	1b9a      	subs	r2, r3, r6
 80096bc:	d4d2      	bmi.n	8009664 <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 80096be:	9b02      	ldr	r3, [sp, #8]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d2d1      	bcs.n	8009668 <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 80096ca:	4b23      	ldr	r3, [pc, #140]	; (8009758 <I2C_Compute_SCLL_SCLH+0x140>)
 80096cc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80096d0:	9e01      	ldr	r6, [sp, #4]
 80096d2:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 80096d4:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 80096d6:	9202      	str	r2, [sp, #8]
              ret = count;
 80096d8:	9b04      	ldr	r3, [sp, #16]
 80096da:	9307      	str	r3, [sp, #28]
 80096dc:	e7c4      	b.n	8009668 <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80096e2:	9b01      	ldr	r3, [sp, #4]
 80096e4:	2bff      	cmp	r3, #255	; 0xff
 80096e6:	d81b      	bhi.n	8009720 <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80096e8:	9906      	ldr	r1, [sp, #24]
 80096ea:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 80096ee:	9b01      	ldr	r3, [sp, #4]
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	9203      	str	r2, [sp, #12]
 80096f4:	fb03 0c00 	mla	ip, r3, r0, r0
 80096f8:	ea4f 084a 	mov.w	r8, sl, lsl #1
 80096fc:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 8009700:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009702:	4b14      	ldr	r3, [pc, #80]	; (8009754 <I2C_Compute_SCLL_SCLH+0x13c>)
 8009704:	222c      	movs	r2, #44	; 0x2c
 8009706:	fb02 3304 	mla	r3, r2, r4, r3
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	4563      	cmp	r3, ip
 800970e:	d2e6      	bcs.n	80096de <I2C_Compute_SCLL_SCLH+0xc6>
 8009710:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 8009714:	1a5b      	subs	r3, r3, r1
 8009716:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 800971a:	d2e0      	bcs.n	80096de <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800971c:	2100      	movs	r1, #0
 800971e:	e7a4      	b.n	800966a <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009720:	9b04      	ldr	r3, [sp, #16]
 8009722:	3301      	adds	r3, #1
 8009724:	9304      	str	r3, [sp, #16]
 8009726:	4b0d      	ldr	r3, [pc, #52]	; (800975c <I2C_Compute_SCLL_SCLH+0x144>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	9a04      	ldr	r2, [sp, #16]
 800972c:	4293      	cmp	r3, r2
 800972e:	d90a      	bls.n	8009746 <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009730:	9b04      	ldr	r3, [sp, #16]
 8009732:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009736:	4a08      	ldr	r2, [pc, #32]	; (8009758 <I2C_Compute_SCLL_SCLH+0x140>)
 8009738:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800973c:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009740:	2300      	movs	r3, #0
 8009742:	9301      	str	r3, [sp, #4]
 8009744:	e7cd      	b.n	80096e2 <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 8009746:	9807      	ldr	r0, [sp, #28]
 8009748:	b009      	add	sp, #36	; 0x24
 800974a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974e:	bf00      	nop
 8009750:	3b9aca00 	.word	0x3b9aca00
 8009754:	080266e8 	.word	0x080266e8
 8009758:	2400651c 	.word	0x2400651c
 800975c:	24006f1c 	.word	0x24006f1c

08009760 <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8009760:	2800      	cmp	r0, #0
 8009762:	bf18      	it	ne
 8009764:	2900      	cmpne	r1, #0
 8009766:	d134      	bne.n	80097d2 <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8009768:	2000      	movs	r0, #0
}
 800976a:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800976c:	3401      	adds	r4, #1
 800976e:	2c02      	cmp	r4, #2
 8009770:	d834      	bhi.n	80097dc <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8009772:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <I2C_GetTiming+0x84>)
 8009774:	212c      	movs	r1, #44	; 0x2c
 8009776:	fb01 3304 	mla	r3, r1, r4, r3
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	4293      	cmp	r3, r2
 800977e:	d8f5      	bhi.n	800976c <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8009780:	4b18      	ldr	r3, [pc, #96]	; (80097e4 <I2C_GetTiming+0x84>)
 8009782:	fb01 3304 	mla	r3, r1, r4, r3
 8009786:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8009788:	4293      	cmp	r3, r2
 800978a:	d3ef      	bcc.n	800976c <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f7ff fed2 	bl	8009538 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8009794:	4621      	mov	r1, r4
 8009796:	4628      	mov	r0, r5
 8009798:	f7ff ff3e 	bl	8009618 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 800979c:	287f      	cmp	r0, #127	; 0x7f
 800979e:	d81f      	bhi.n	80097e0 <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80097a0:	4a11      	ldr	r2, [pc, #68]	; (80097e8 <I2C_GetTiming+0x88>)
 80097a2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80097a6:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 80097aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80097ae:	6863      	ldr	r3, [r4, #4]
 80097b0:	051b      	lsls	r3, r3, #20
 80097b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80097b6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80097ba:	68a1      	ldr	r1, [r4, #8]
 80097bc:	0409      	lsls	r1, r1, #16
 80097be:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80097c2:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80097c4:	68e1      	ldr	r1, [r4, #12]
 80097c6:	0209      	lsls	r1, r1, #8
 80097c8:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80097ca:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80097cc:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80097ce:	4318      	orrs	r0, r3
 80097d0:	e005      	b.n	80097de <I2C_GetTiming+0x7e>
{
 80097d2:	b538      	push	{r3, r4, r5, lr}
 80097d4:	4605      	mov	r5, r0
 80097d6:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80097d8:	2400      	movs	r4, #0
 80097da:	e7c8      	b.n	800976e <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 80097dc:	2000      	movs	r0, #0
}
 80097de:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 80097e0:	2000      	movs	r0, #0
  return ret;
 80097e2:	e7fc      	b.n	80097de <I2C_GetTiming+0x7e>
 80097e4:	080266e8 	.word	0x080266e8
 80097e8:	2400651c 	.word	0x2400651c

080097ec <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80097ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097f0:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80097f2:	4c2a      	ldr	r4, [pc, #168]	; (800989c <I2C4_MspInit+0xb0>)
 80097f4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80097f8:	f043 0308 	orr.w	r3, r3, #8
 80097fc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8009800:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8009804:	f003 0308 	and.w	r3, r3, #8
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800980c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8009810:	f043 0308 	orr.w	r3, r3, #8
 8009814:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8009818:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800981c:	f003 0308 	and.w	r3, r3, #8
 8009820:	9301      	str	r3, [sp, #4]
 8009822:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8009824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009828:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800982a:	f04f 0912 	mov.w	r9, #18
 800982e:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009832:	f04f 0800 	mov.w	r8, #0
 8009836:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800983a:	2702      	movs	r7, #2
 800983c:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800983e:	2604      	movs	r6, #4
 8009840:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009842:	4d17      	ldr	r5, [pc, #92]	; (80098a0 <I2C4_MspInit+0xb4>)
 8009844:	a903      	add	r1, sp, #12
 8009846:	4628      	mov	r0, r5
 8009848:	f001 fada 	bl	800ae00 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800984c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009850:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009852:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009856:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800985a:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800985c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800985e:	a903      	add	r1, sp, #12
 8009860:	4628      	mov	r0, r5
 8009862:	f001 facd 	bl	800ae00 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8009866:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 800986a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800986e:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8009872:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8009876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987a:	9302      	str	r3, [sp, #8]
 800987c:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800987e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009886:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800988a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800988e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009892:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 8009896:	b009      	add	sp, #36	; 0x24
 8009898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800989c:	58024400 	.word	0x58024400
 80098a0:	58020c00 	.word	0x58020c00

080098a4 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80098a4:	b510      	push	{r4, lr}
 80098a6:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80098a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098ac:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80098ae:	4c09      	ldr	r4, [pc, #36]	; (80098d4 <I2C4_MspDeInit+0x30>)
 80098b0:	4620      	mov	r0, r4
 80098b2:	f001 fbb5 	bl	800b020 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80098b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80098ba:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80098bc:	4620      	mov	r0, r4
 80098be:	f001 fbaf 	bl	800b020 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80098c2:	4a05      	ldr	r2, [pc, #20]	; (80098d8 <I2C4_MspDeInit+0x34>)
 80098c4:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 80098c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098cc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 80098d0:	b006      	add	sp, #24
 80098d2:	bd10      	pop	{r4, pc}
 80098d4:	58020c00 	.word	0x58020c00
 80098d8:	58024400 	.word	0x58024400

080098dc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80098dc:	b510      	push	{r4, lr}
 80098de:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80098e0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80098e4:	9402      	str	r4, [sp, #8]
 80098e6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80098ea:	9401      	str	r4, [sp, #4]
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	4613      	mov	r3, r2
 80098f0:	460a      	mov	r2, r1
 80098f2:	4601      	mov	r1, r0
 80098f4:	4804      	ldr	r0, [pc, #16]	; (8009908 <I2C4_WriteReg+0x2c>)
 80098f6:	f001 fe98 	bl	800b62a <HAL_I2C_Mem_Write>
 80098fa:	b910      	cbnz	r0, 8009902 <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 80098fc:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 80098fe:	b004      	add	sp, #16
 8009900:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8009902:	f06f 0007 	mvn.w	r0, #7
 8009906:	e7fa      	b.n	80098fe <I2C4_WriteReg+0x22>
 8009908:	24006f20 	.word	0x24006f20

0800990c <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800990c:	b510      	push	{r4, lr}
 800990e:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8009910:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8009914:	9402      	str	r4, [sp, #8]
 8009916:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800991a:	9401      	str	r4, [sp, #4]
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	4613      	mov	r3, r2
 8009920:	460a      	mov	r2, r1
 8009922:	4601      	mov	r1, r0
 8009924:	4804      	ldr	r0, [pc, #16]	; (8009938 <I2C4_ReadReg+0x2c>)
 8009926:	f001 ff55 	bl	800b7d4 <HAL_I2C_Mem_Read>
 800992a:	b910      	cbnz	r0, 8009932 <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 800992c:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 800992e:	b004      	add	sp, #16
 8009930:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 8009932:	f06f 0007 	mvn.w	r0, #7
 8009936:	e7fa      	b.n	800992e <I2C4_ReadReg+0x22>
 8009938:	24006f20 	.word	0x24006f20

0800993c <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 800993c:	4a09      	ldr	r2, [pc, #36]	; (8009964 <BSP_I2C4_DeInit+0x28>)
 800993e:	6813      	ldr	r3, [r2, #0]
 8009940:	3b01      	subs	r3, #1
 8009942:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8009944:	b10b      	cbz	r3, 800994a <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 8009946:	2000      	movs	r0, #0
}
 8009948:	4770      	bx	lr
{
 800994a:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 800994c:	4c06      	ldr	r4, [pc, #24]	; (8009968 <BSP_I2C4_DeInit+0x2c>)
 800994e:	4620      	mov	r0, r4
 8009950:	f7ff ffa8 	bl	80098a4 <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8009954:	4620      	mov	r0, r4
 8009956:	f001 fe4f 	bl	800b5f8 <HAL_I2C_DeInit>
 800995a:	b900      	cbnz	r0, 800995e <BSP_I2C4_DeInit+0x22>
}
 800995c:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 800995e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8009962:	e7fb      	b.n	800995c <BSP_I2C4_DeInit+0x20>
 8009964:	24006518 	.word	0x24006518
 8009968:	24006f20 	.word	0x24006f20

0800996c <MX_I2C4_Init>:
{
 800996c:	b510      	push	{r4, lr}
 800996e:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 8009970:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 8009972:	2300      	movs	r3, #0
 8009974:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009976:	2201      	movs	r2, #1
 8009978:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800997a:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 800997c:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800997e:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009980:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009982:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8009984:	f001 fdda 	bl	800b53c <HAL_I2C_Init>
 8009988:	b108      	cbz	r0, 800998e <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 800998a:	2001      	movs	r0, #1
}
 800998c:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800998e:	2100      	movs	r1, #0
 8009990:	4620      	mov	r0, r4
 8009992:	f001 fffc 	bl	800b98e <HAL_I2CEx_ConfigAnalogFilter>
 8009996:	b108      	cbz	r0, 800999c <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8009998:	2001      	movs	r0, #1
 800999a:	e7f7      	b.n	800998c <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800999c:	2100      	movs	r1, #0
 800999e:	4620      	mov	r0, r4
 80099a0:	f002 f823 	bl	800b9ea <HAL_I2CEx_ConfigDigitalFilter>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d0f1      	beq.n	800998c <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 80099a8:	2001      	movs	r0, #1
 80099aa:	e7ef      	b.n	800998c <MX_I2C4_Init+0x20>

080099ac <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80099ac:	4b11      	ldr	r3, [pc, #68]	; (80099f4 <BSP_I2C4_Init+0x48>)
 80099ae:	4a12      	ldr	r2, [pc, #72]	; (80099f8 <BSP_I2C4_Init+0x4c>)
 80099b0:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 80099b2:	4b12      	ldr	r3, [pc, #72]	; (80099fc <BSP_I2C4_Init+0x50>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	b10b      	cbz	r3, 80099bc <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 80099b8:	2000      	movs	r0, #0
}
 80099ba:	4770      	bx	lr
{
 80099bc:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 80099be:	3301      	adds	r3, #1
 80099c0:	4a0e      	ldr	r2, [pc, #56]	; (80099fc <BSP_I2C4_Init+0x50>)
 80099c2:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80099c4:	480b      	ldr	r0, [pc, #44]	; (80099f4 <BSP_I2C4_Init+0x48>)
 80099c6:	f001 ffdd 	bl	800b984 <HAL_I2C_GetState>
 80099ca:	b108      	cbz	r0, 80099d0 <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 80099cc:	2000      	movs	r0, #0
}
 80099ce:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 80099d0:	4c08      	ldr	r4, [pc, #32]	; (80099f4 <BSP_I2C4_Init+0x48>)
 80099d2:	4620      	mov	r0, r4
 80099d4:	f7ff ff0a 	bl	80097ec <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80099d8:	f003 fd04 	bl	800d3e4 <HAL_RCC_GetPCLK2Freq>
 80099dc:	4908      	ldr	r1, [pc, #32]	; (8009a00 <BSP_I2C4_Init+0x54>)
 80099de:	f7ff febf 	bl	8009760 <I2C_GetTiming>
 80099e2:	4601      	mov	r1, r0
 80099e4:	4620      	mov	r0, r4
 80099e6:	f7ff ffc1 	bl	800996c <MX_I2C4_Init>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d0ef      	beq.n	80099ce <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 80099ee:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80099f2:	e7ec      	b.n	80099ce <BSP_I2C4_Init+0x22>
 80099f4:	24006f20 	.word	0x24006f20
 80099f8:	58001c00 	.word	0x58001c00
 80099fc:	24006518 	.word	0x24006518
 8009a00:	000186a0 	.word	0x000186a0

08009a04 <BSP_I2C4_WriteReg>:
{
 8009a04:	b500      	push	{lr}
 8009a06:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f7ff ff65 	bl	80098dc <I2C4_WriteReg>
 8009a12:	b910      	cbnz	r0, 8009a1a <BSP_I2C4_WriteReg+0x16>
}
 8009a14:	b003      	add	sp, #12
 8009a16:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009a1a:	4805      	ldr	r0, [pc, #20]	; (8009a30 <BSP_I2C4_WriteReg+0x2c>)
 8009a1c:	f001 ffb5 	bl	800b98a <HAL_I2C_GetError>
 8009a20:	2804      	cmp	r0, #4
 8009a22:	d002      	beq.n	8009a2a <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009a24:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009a28:	e7f4      	b.n	8009a14 <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009a2a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a2e:	e7f1      	b.n	8009a14 <BSP_I2C4_WriteReg+0x10>
 8009a30:	24006f20 	.word	0x24006f20

08009a34 <BSP_I2C4_ReadReg>:
{
 8009a34:	b500      	push	{lr}
 8009a36:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f7ff ff65 	bl	800990c <I2C4_ReadReg>
 8009a42:	b910      	cbnz	r0, 8009a4a <BSP_I2C4_ReadReg+0x16>
}
 8009a44:	b003      	add	sp, #12
 8009a46:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009a4a:	4805      	ldr	r0, [pc, #20]	; (8009a60 <BSP_I2C4_ReadReg+0x2c>)
 8009a4c:	f001 ff9d 	bl	800b98a <HAL_I2C_GetError>
 8009a50:	2804      	cmp	r0, #4
 8009a52:	d002      	beq.n	8009a5a <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009a54:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009a58:	e7f4      	b.n	8009a44 <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009a5a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009a5e:	e7f1      	b.n	8009a44 <BSP_I2C4_ReadReg+0x10>
 8009a60:	24006f20 	.word	0x24006f20

08009a64 <BSP_GetTick>:
{
 8009a64:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 8009a66:	f000 fde7 	bl	800a638 <HAL_GetTick>
}
 8009a6a:	bd08      	pop	{r3, pc}

08009a6c <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8009a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a70:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8009a72:	4b7e      	ldr	r3, [pc, #504]	; (8009c6c <OSPI_NOR_MspInit+0x200>)
 8009a74:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a7c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8009a80:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009a84:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009a88:	9201      	str	r2, [sp, #4]
 8009a8a:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8009a8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a92:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8009a94:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009a96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a9a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8009a9c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009aa0:	f042 0202 	orr.w	r2, r2, #2
 8009aa4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009aa8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009aac:	f002 0202 	and.w	r2, r2, #2
 8009ab0:	9202      	str	r2, [sp, #8]
 8009ab2:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 8009ab4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009ab8:	f042 0204 	orr.w	r2, r2, #4
 8009abc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009ac0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009ac4:	f002 0204 	and.w	r2, r2, #4
 8009ac8:	9203      	str	r2, [sp, #12]
 8009aca:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 8009acc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ad4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009ad8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009adc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009ae0:	9204      	str	r2, [sp, #16]
 8009ae2:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 8009ae4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009ae8:	f042 0208 	orr.w	r2, r2, #8
 8009aec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009af0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009af4:	f002 0208 	and.w	r2, r2, #8
 8009af8:	9205      	str	r2, [sp, #20]
 8009afa:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 8009afc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b00:	f042 0220 	orr.w	r2, r2, #32
 8009b04:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b08:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b0c:	f002 0220 	and.w	r2, r2, #32
 8009b10:	9206      	str	r2, [sp, #24]
 8009b12:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 8009b14:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b18:	f042 0220 	orr.w	r2, r2, #32
 8009b1c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b20:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b24:	f002 0220 	and.w	r2, r2, #32
 8009b28:	9207      	str	r2, [sp, #28]
 8009b2a:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8009b2c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b30:	f042 0220 	orr.w	r2, r2, #32
 8009b34:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b38:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b3c:	f002 0220 	and.w	r2, r2, #32
 8009b40:	9208      	str	r2, [sp, #32]
 8009b42:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 8009b44:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b48:	f042 0204 	orr.w	r2, r2, #4
 8009b4c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b50:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b54:	f002 0204 	and.w	r2, r2, #4
 8009b58:	9209      	str	r2, [sp, #36]	; 0x24
 8009b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8009b5c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b64:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b68:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b6c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009b70:	920a      	str	r2, [sp, #40]	; 0x28
 8009b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 8009b74:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b7c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b80:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b84:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009b88:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8009b8c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b94:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009b98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8009ba4:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8009ba8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009bac:	f04f 0a02 	mov.w	sl, #2
 8009bb0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8009bbc:	240a      	movs	r4, #10
 8009bbe:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8009bc0:	a90d      	add	r1, sp, #52	; 0x34
 8009bc2:	482b      	ldr	r0, [pc, #172]	; (8009c70 <OSPI_NOR_MspInit+0x204>)
 8009bc4:	f001 f91c 	bl	800ae00 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8009bc8:	2320      	movs	r3, #32
 8009bca:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8009bcc:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8009bce:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8009c84 <OSPI_NOR_MspInit+0x218>
 8009bd2:	a90d      	add	r1, sp, #52	; 0x34
 8009bd4:	4648      	mov	r0, r9
 8009bd6:	f001 f913 	bl	800ae00 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8009bda:	2304      	movs	r3, #4
 8009bdc:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8009be2:	2509      	movs	r5, #9
 8009be4:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8009be6:	a90d      	add	r1, sp, #52	; 0x34
 8009be8:	4822      	ldr	r0, [pc, #136]	; (8009c74 <OSPI_NOR_MspInit+0x208>)
 8009bea:	f001 f909 	bl	800ae00 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8009bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bf2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8009bf4:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8009bf6:	a90d      	add	r1, sp, #52	; 0x34
 8009bf8:	481f      	ldr	r0, [pc, #124]	; (8009c78 <OSPI_NOR_MspInit+0x20c>)
 8009bfa:	f001 f901 	bl	800ae00 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8009bfe:	f44f 7800 	mov.w	r8, #512	; 0x200
 8009c02:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8009c06:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8009c08:	4e1c      	ldr	r6, [pc, #112]	; (8009c7c <OSPI_NOR_MspInit+0x210>)
 8009c0a:	a90d      	add	r1, sp, #52	; 0x34
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f001 f8f7 	bl	800ae00 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8009c12:	2780      	movs	r7, #128	; 0x80
 8009c14:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8009c16:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8009c18:	a90d      	add	r1, sp, #52	; 0x34
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f001 f8f0 	bl	800ae00 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8009c20:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8009c24:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8009c26:	a90d      	add	r1, sp, #52	; 0x34
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f001 f8e9 	bl	800ae00 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8009c2e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8009c32:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8009c34:	a90d      	add	r1, sp, #52	; 0x34
 8009c36:	4648      	mov	r0, r9
 8009c38:	f001 f8e2 	bl	800ae00 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8009c3c:	2308      	movs	r3, #8
 8009c3e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8009c40:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8009c42:	a90d      	add	r1, sp, #52	; 0x34
 8009c44:	480e      	ldr	r0, [pc, #56]	; (8009c80 <OSPI_NOR_MspInit+0x214>)
 8009c46:	f001 f8db 	bl	800ae00 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8009c4a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8009c4e:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8009c50:	a90d      	add	r1, sp, #52	; 0x34
 8009c52:	4807      	ldr	r0, [pc, #28]	; (8009c70 <OSPI_NOR_MspInit+0x204>)
 8009c54:	f001 f8d4 	bl	800ae00 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8009c58:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8009c5a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8009c5c:	a90d      	add	r1, sp, #52	; 0x34
 8009c5e:	4806      	ldr	r0, [pc, #24]	; (8009c78 <OSPI_NOR_MspInit+0x20c>)
 8009c60:	f001 f8ce 	bl	800ae00 <HAL_GPIO_Init>
}
 8009c64:	b013      	add	sp, #76	; 0x4c
 8009c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6a:	bf00      	nop
 8009c6c:	58024400 	.word	0x58024400
 8009c70:	58021800 	.word	0x58021800
 8009c74:	58020400 	.word	0x58020400
 8009c78:	58020c00 	.word	0x58020c00
 8009c7c:	58021400 	.word	0x58021400
 8009c80:	58021c00 	.word	0x58021c00
 8009c84:	58020800 	.word	0x58020800

08009c88 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009c8c:	4c24      	ldr	r4, [pc, #144]	; (8009d20 <OSPI_NOR_ResetMemory+0x98>)
 8009c8e:	235c      	movs	r3, #92	; 0x5c
 8009c90:	fb03 4400 	mla	r4, r3, r0, r4
 8009c94:	2200      	movs	r2, #0
 8009c96:	4611      	mov	r1, r2
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f7ff fbe7 	bl	800946c <MX25LM51245G_ResetEnable>
 8009c9e:	bb60      	cbnz	r0, 8009cfa <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f7ff fc14 	bl	80094d2 <MX25LM51245G_ResetMemory>
 8009caa:	bb48      	cbnz	r0, 8009d00 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009cac:	2200      	movs	r2, #0
 8009cae:	2101      	movs	r1, #1
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f7ff fbdb 	bl	800946c <MX25LM51245G_ResetEnable>
 8009cb6:	bb30      	cbnz	r0, 8009d06 <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2101      	movs	r1, #1
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f7ff fc08 	bl	80094d2 <MX25LM51245G_ResetMemory>
 8009cc2:	bb18      	cbnz	r0, 8009d0c <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f7ff fbcf 	bl	800946c <MX25LM51245G_ResetEnable>
 8009cce:	bb00      	cbnz	r0, 8009d12 <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f7ff fbfc 	bl	80094d2 <MX25LM51245G_ResetMemory>
 8009cda:	4604      	mov	r4, r0
 8009cdc:	b9e0      	cbnz	r0, 8009d18 <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8009cde:	4811      	ldr	r0, [pc, #68]	; (8009d24 <OSPI_NOR_ResetMemory+0x9c>)
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 8009ce6:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8009cea:	2300      	movs	r3, #0
 8009cec:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8009cee:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8009cf0:	2064      	movs	r0, #100	; 0x64
 8009cf2:	f000 fca7 	bl	800a644 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cfa:	f06f 0404 	mvn.w	r4, #4
 8009cfe:	e7fa      	b.n	8009cf6 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d00:	f06f 0404 	mvn.w	r4, #4
 8009d04:	e7f7      	b.n	8009cf6 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d06:	f06f 0404 	mvn.w	r4, #4
 8009d0a:	e7f4      	b.n	8009cf6 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d0c:	f06f 0404 	mvn.w	r4, #4
 8009d10:	e7f1      	b.n	8009cf6 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d12:	f06f 0404 	mvn.w	r4, #4
 8009d16:	e7ee      	b.n	8009cf6 <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d18:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8009d1c:	e7eb      	b.n	8009cf6 <OSPI_NOR_ResetMemory+0x6e>
 8009d1e:	bf00      	nop
 8009d20:	24006f74 	.word	0x24006f74
 8009d24:	24006f6c 	.word	0x24006f6c

08009d28 <OSPI_NOR_MspDeInit>:
{
 8009d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8009d2a:	2104      	movs	r1, #4
 8009d2c:	4820      	ldr	r0, [pc, #128]	; (8009db0 <OSPI_NOR_MspDeInit+0x88>)
 8009d2e:	f001 f977 	bl	800b020 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8009d32:	4f20      	ldr	r7, [pc, #128]	; (8009db4 <OSPI_NOR_MspDeInit+0x8c>)
 8009d34:	2120      	movs	r1, #32
 8009d36:	4638      	mov	r0, r7
 8009d38:	f001 f972 	bl	800b020 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8009d3c:	4e1e      	ldr	r6, [pc, #120]	; (8009db8 <OSPI_NOR_MspDeInit+0x90>)
 8009d3e:	2140      	movs	r1, #64	; 0x40
 8009d40:	4630      	mov	r0, r6
 8009d42:	f001 f96d 	bl	800b020 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8009d46:	4d1d      	ldr	r5, [pc, #116]	; (8009dbc <OSPI_NOR_MspDeInit+0x94>)
 8009d48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f001 f967 	bl	800b020 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8009d52:	4c1b      	ldr	r4, [pc, #108]	; (8009dc0 <OSPI_NOR_MspDeInit+0x98>)
 8009d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f001 f961 	bl	800b020 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8009d5e:	2180      	movs	r1, #128	; 0x80
 8009d60:	4620      	mov	r0, r4
 8009d62:	f001 f95d 	bl	800b020 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8009d66:	2140      	movs	r1, #64	; 0x40
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f001 f959 	bl	800b020 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8009d6e:	2102      	movs	r1, #2
 8009d70:	4638      	mov	r0, r7
 8009d72:	f001 f955 	bl	800b020 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8009d76:	2108      	movs	r1, #8
 8009d78:	4812      	ldr	r0, [pc, #72]	; (8009dc4 <OSPI_NOR_MspDeInit+0x9c>)
 8009d7a:	f001 f951 	bl	800b020 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8009d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d82:	4630      	mov	r0, r6
 8009d84:	f001 f94c 	bl	800b020 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8009d88:	2180      	movs	r1, #128	; 0x80
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f001 f948 	bl	800b020 <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 8009d90:	4b0d      	ldr	r3, [pc, #52]	; (8009dc8 <OSPI_NOR_MspDeInit+0xa0>)
 8009d92:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d98:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8009d9a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009d9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009da0:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 8009da2:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009da6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009daa:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8009dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db0:	58020400 	.word	0x58020400
 8009db4:	58020800 	.word	0x58020800
 8009db8:	58021800 	.word	0x58021800
 8009dbc:	58020c00 	.word	0x58020c00
 8009dc0:	58021400 	.word	0x58021400
 8009dc4:	58021c00 	.word	0x58021c00
 8009dc8:	58024400 	.word	0x58024400

08009dcc <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8009dcc:	b570      	push	{r4, r5, r6, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009dd2:	4d2b      	ldr	r5, [pc, #172]	; (8009e80 <OSPI_NOR_ExitOPIMode+0xb4>)
 8009dd4:	235c      	movs	r3, #92	; 0x5c
 8009dd6:	fb03 5500 	mla	r5, r3, r0, r5
 8009dda:	4b2a      	ldr	r3, [pc, #168]	; (8009e84 <OSPI_NOR_ExitOPIMode+0xb8>)
 8009ddc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009de0:	789a      	ldrb	r2, [r3, #2]
 8009de2:	7859      	ldrb	r1, [r3, #1]
 8009de4:	4628      	mov	r0, r5
 8009de6:	f7ff f9cf 	bl	8009188 <MX25LM51245G_WriteEnable>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d138      	bne.n	8009e60 <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 8009df4:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8009df8:	4922      	ldr	r1, [pc, #136]	; (8009e84 <OSPI_NOR_ExitOPIMode+0xb8>)
 8009dfa:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	788a      	ldrb	r2, [r1, #2]
 8009e02:	7849      	ldrb	r1, [r1, #1]
 8009e04:	4628      	mov	r0, r5
 8009e06:	f7ff fa56 	bl	80092b6 <MX25LM51245G_WriteCfg2Register>
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	bb58      	cbnz	r0, 8009e66 <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8009e0e:	2028      	movs	r0, #40	; 0x28
 8009e10:	f000 fc18 	bl	800a644 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8009e14:	4b1b      	ldr	r3, [pc, #108]	; (8009e84 <OSPI_NOR_ExitOPIMode+0xb8>)
 8009e16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e1a:	789b      	ldrb	r3, [r3, #2]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d014      	beq.n	8009e4a <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009e20:	2200      	movs	r2, #0
 8009e22:	4611      	mov	r1, r2
 8009e24:	4628      	mov	r0, r5
 8009e26:	f7ff f872 	bl	8008f0e <MX25LM51245G_AutoPollingMemReady>
 8009e2a:	b9f8      	cbnz	r0, 8009e6c <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8009e2c:	ab03      	add	r3, sp, #12
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	2300      	movs	r3, #0
 8009e32:	461a      	mov	r2, r3
 8009e34:	4619      	mov	r1, r3
 8009e36:	4628      	mov	r0, r5
 8009e38:	f7ff faa4 	bl	8009384 <MX25LM51245G_ReadCfg2Register>
 8009e3c:	b9c8      	cbnz	r0, 8009e72 <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 8009e3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009e42:	b9cb      	cbnz	r3, 8009e78 <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 8009e44:	4630      	mov	r0, r6
 8009e46:	b004      	add	sp, #16
 8009e48:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8009e4e:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8009e50:	4628      	mov	r0, r5
 8009e52:	f002 fc6f 	bl	800c734 <HAL_OSPI_Init>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d0e2      	beq.n	8009e20 <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8009e5a:	f06f 0603 	mvn.w	r6, #3
 8009e5e:	e7df      	b.n	8009e20 <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e60:	f06f 0604 	mvn.w	r6, #4
 8009e64:	e7ee      	b.n	8009e44 <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e66:	f06f 0604 	mvn.w	r6, #4
 8009e6a:	e7eb      	b.n	8009e44 <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e6c:	f06f 0604 	mvn.w	r6, #4
 8009e70:	e7e8      	b.n	8009e44 <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e72:	f06f 0604 	mvn.w	r6, #4
 8009e76:	e7e5      	b.n	8009e44 <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e78:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8009e7c:	e7e2      	b.n	8009e44 <OSPI_NOR_ExitOPIMode+0x78>
 8009e7e:	bf00      	nop
 8009e80:	24006f74 	.word	0x24006f74
 8009e84:	24006f6c 	.word	0x24006f6c

08009e88 <OSPI_NOR_EnterSOPIMode>:
{
 8009e88:	b530      	push	{r4, r5, lr}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009e8e:	4c2e      	ldr	r4, [pc, #184]	; (8009f48 <OSPI_NOR_EnterSOPIMode+0xc0>)
 8009e90:	235c      	movs	r3, #92	; 0x5c
 8009e92:	fb03 4400 	mla	r4, r3, r0, r4
 8009e96:	4b2d      	ldr	r3, [pc, #180]	; (8009f4c <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009e98:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009e9c:	789a      	ldrb	r2, [r3, #2]
 8009e9e:	7859      	ldrb	r1, [r3, #1]
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f7ff f971 	bl	8009188 <MX25LM51245G_WriteEnable>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d139      	bne.n	8009f1e <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8009eaa:	4928      	ldr	r1, [pc, #160]	; (8009f4c <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009eac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009eb0:	2307      	movs	r3, #7
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009eb8:	788a      	ldrb	r2, [r1, #2]
 8009eba:	7849      	ldrb	r1, [r1, #1]
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f7ff f9fa 	bl	80092b6 <MX25LM51245G_WriteCfg2Register>
 8009ec2:	bb78      	cbnz	r0, 8009f24 <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009ec4:	4b21      	ldr	r3, [pc, #132]	; (8009f4c <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009ec6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009eca:	789a      	ldrb	r2, [r3, #2]
 8009ecc:	7859      	ldrb	r1, [r3, #1]
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f7ff f95a 	bl	8009188 <MX25LM51245G_WriteEnable>
 8009ed4:	bb48      	cbnz	r0, 8009f2a <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8009ed6:	481d      	ldr	r0, [pc, #116]	; (8009f4c <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009ed8:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8009edc:	2301      	movs	r3, #1
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	78aa      	ldrb	r2, [r5, #2]
 8009ee4:	7869      	ldrb	r1, [r5, #1]
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f7ff f9e5 	bl	80092b6 <MX25LM51245G_WriteCfg2Register>
 8009eec:	bb00      	cbnz	r0, 8009f30 <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8009eee:	2028      	movs	r0, #40	; 0x28
 8009ef0:	f000 fba8 	bl	800a644 <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f7ff f808 	bl	8008f0e <MX25LM51245G_AutoPollingMemReady>
 8009efe:	b9d0      	cbnz	r0, 8009f36 <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8009f00:	ab03      	add	r3, sp, #12
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	2300      	movs	r3, #0
 8009f06:	461a      	mov	r2, r3
 8009f08:	2101      	movs	r1, #1
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f7ff fa3a 	bl	8009384 <MX25LM51245G_ReadCfg2Register>
 8009f10:	b9a0      	cbnz	r0, 8009f3c <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 8009f12:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d113      	bne.n	8009f42 <OSPI_NOR_EnterSOPIMode+0xba>
}
 8009f1a:	b005      	add	sp, #20
 8009f1c:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f1e:	f06f 0004 	mvn.w	r0, #4
 8009f22:	e7fa      	b.n	8009f1a <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f24:	f06f 0004 	mvn.w	r0, #4
 8009f28:	e7f7      	b.n	8009f1a <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f2a:	f06f 0004 	mvn.w	r0, #4
 8009f2e:	e7f4      	b.n	8009f1a <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f30:	f06f 0004 	mvn.w	r0, #4
 8009f34:	e7f1      	b.n	8009f1a <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f36:	f06f 0004 	mvn.w	r0, #4
 8009f3a:	e7ee      	b.n	8009f1a <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f3c:	f06f 0004 	mvn.w	r0, #4
 8009f40:	e7eb      	b.n	8009f1a <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f42:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8009f46:	e7e8      	b.n	8009f1a <OSPI_NOR_EnterSOPIMode+0x92>
 8009f48:	24006f74 	.word	0x24006f74
 8009f4c:	24006f6c 	.word	0x24006f6c

08009f50 <OSPI_NOR_EnterDOPIMode>:
{
 8009f50:	b530      	push	{r4, r5, lr}
 8009f52:	b085      	sub	sp, #20
 8009f54:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009f56:	4c35      	ldr	r4, [pc, #212]	; (800a02c <OSPI_NOR_EnterDOPIMode+0xdc>)
 8009f58:	235c      	movs	r3, #92	; 0x5c
 8009f5a:	fb03 4400 	mla	r4, r3, r0, r4
 8009f5e:	4b34      	ldr	r3, [pc, #208]	; (800a030 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8009f60:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009f64:	789a      	ldrb	r2, [r3, #2]
 8009f66:	7859      	ldrb	r1, [r3, #1]
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f7ff f90d 	bl	8009188 <MX25LM51245G_WriteEnable>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d144      	bne.n	8009ffc <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8009f72:	492f      	ldr	r1, [pc, #188]	; (800a030 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8009f74:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009f78:	2307      	movs	r3, #7
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009f80:	788a      	ldrb	r2, [r1, #2]
 8009f82:	7849      	ldrb	r1, [r1, #1]
 8009f84:	4620      	mov	r0, r4
 8009f86:	f7ff f996 	bl	80092b6 <MX25LM51245G_WriteCfg2Register>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d139      	bne.n	800a002 <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009f8e:	4b28      	ldr	r3, [pc, #160]	; (800a030 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8009f90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009f94:	789a      	ldrb	r2, [r3, #2]
 8009f96:	7859      	ldrb	r1, [r3, #1]
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7ff f8f5 	bl	8009188 <MX25LM51245G_WriteEnable>
 8009f9e:	bb98      	cbnz	r0, 800a008 <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8009fa0:	4923      	ldr	r1, [pc, #140]	; (800a030 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8009fa2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	2300      	movs	r3, #0
 8009fac:	788a      	ldrb	r2, [r1, #2]
 8009fae:	7849      	ldrb	r1, [r1, #1]
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f7ff f980 	bl	80092b6 <MX25LM51245G_WriteCfg2Register>
 8009fb6:	bb50      	cbnz	r0, 800a00e <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8009fb8:	2028      	movs	r0, #40	; 0x28
 8009fba:	f000 fb43 	bl	800a644 <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8009fbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009fc2:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8009fc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f002 fbb2 	bl	800c734 <HAL_OSPI_Init>
 8009fd0:	bb00      	cbnz	r0, 800a014 <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f7fe ff99 	bl	8008f0e <MX25LM51245G_AutoPollingMemReady>
 8009fdc:	b9e8      	cbnz	r0, 800a01a <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8009fde:	ab03      	add	r3, sp, #12
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f7ff f9cb 	bl	8009384 <MX25LM51245G_ReadCfg2Register>
 8009fee:	b9b8      	cbnz	r0, 800a020 <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 8009ff0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d116      	bne.n	800a026 <OSPI_NOR_EnterDOPIMode+0xd6>
}
 8009ff8:	b005      	add	sp, #20
 8009ffa:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ffc:	f06f 0004 	mvn.w	r0, #4
 800a000:	e7fa      	b.n	8009ff8 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a002:	f06f 0004 	mvn.w	r0, #4
 800a006:	e7f7      	b.n	8009ff8 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a008:	f06f 0004 	mvn.w	r0, #4
 800a00c:	e7f4      	b.n	8009ff8 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a00e:	f06f 0004 	mvn.w	r0, #4
 800a012:	e7f1      	b.n	8009ff8 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a014:	f06f 0003 	mvn.w	r0, #3
 800a018:	e7ee      	b.n	8009ff8 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a01a:	f06f 0004 	mvn.w	r0, #4
 800a01e:	e7eb      	b.n	8009ff8 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a020:	f06f 0004 	mvn.w	r0, #4
 800a024:	e7e8      	b.n	8009ff8 <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a026:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800a02a:	e7e5      	b.n	8009ff8 <OSPI_NOR_EnterDOPIMode+0xa8>
 800a02c:	24006f74 	.word	0x24006f74
 800a030:	24006f6c 	.word	0x24006f6c

0800a034 <MX_OSPI_NOR_Init>:
{
 800a034:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 800a036:	4b12      	ldr	r3, [pc, #72]	; (800a080 <MX_OSPI_NOR_Init+0x4c>)
 800a038:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 800a03a:	2304      	movs	r3, #4
 800a03c:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800a03e:	2300      	movs	r3, #0
 800a040:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800a042:	680a      	ldr	r2, [r1, #0]
 800a044:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800a046:	2202      	movs	r2, #2
 800a048:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800a04a:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800a04c:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800a04e:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800a050:	684a      	ldr	r2, [r1, #4]
 800a052:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800a054:	688a      	ldr	r2, [r1, #8]
 800a056:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800a058:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800a05a:	2308      	movs	r3, #8
 800a05c:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800a05e:	68cb      	ldr	r3, [r1, #12]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d005      	beq.n	800a070 <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800a064:	2300      	movs	r3, #0
 800a066:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800a068:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 800a06a:	f002 fb63 	bl	800c734 <HAL_OSPI_Init>
}
 800a06e:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800a070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a074:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800a076:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a07a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800a07c:	e7f5      	b.n	800a06a <MX_OSPI_NOR_Init+0x36>
 800a07e:	bf00      	nop
 800a080:	52005000 	.word	0x52005000

0800a084 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a084:	bb38      	cbnz	r0, 800a0d6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 800a086:	b510      	push	{r4, lr}
 800a088:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800a08a:	4b17      	ldr	r3, [pc, #92]	; (800a0e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800a08c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a090:	789b      	ldrb	r3, [r3, #2]
 800a092:	b983      	cbnz	r3, 800a0b6 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800a094:	4b14      	ldr	r3, [pc, #80]	; (800a0e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800a096:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a09a:	2201      	movs	r2, #1
 800a09c:	7859      	ldrb	r1, [r3, #1]
 800a09e:	4b13      	ldr	r3, [pc, #76]	; (800a0ec <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 800a0a0:	205c      	movs	r0, #92	; 0x5c
 800a0a2:	fb00 3004 	mla	r0, r0, r4, r3
 800a0a6:	f7fe ffb1 	bl	800900c <MX25LM51245G_EnableMemoryMappedModeSTR>
 800a0aa:	b9b8      	cbnz	r0, 800a0dc <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800a0ac:	4b0e      	ldr	r3, [pc, #56]	; (800a0e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 800a0b4:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800a0b6:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800a0b8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a0bc:	7859      	ldrb	r1, [r3, #1]
 800a0be:	4b0b      	ldr	r3, [pc, #44]	; (800a0ec <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 800a0c0:	205c      	movs	r0, #92	; 0x5c
 800a0c2:	fb00 3004 	mla	r0, r0, r4, r3
 800a0c6:	f7ff f80d 	bl	80090e4 <MX25LM51245G_EnableMemoryMappedModeDTR>
 800a0ca:	b950      	cbnz	r0, 800a0e2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800a0cc:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 800a0d4:	e7ee      	b.n	800a0b4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 800a0d6:	f06f 0001 	mvn.w	r0, #1
}
 800a0da:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0dc:	f06f 0004 	mvn.w	r0, #4
 800a0e0:	e7e8      	b.n	800a0b4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0e2:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800a0e6:	e7e5      	b.n	800a0b4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 800a0e8:	24006f6c 	.word	0x24006f6c
 800a0ec:	24006f74 	.word	0x24006f74

0800a0f0 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a0f0:	b990      	cbnz	r0, 800a118 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800a0f6:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 800a0f8:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d10e      	bne.n	800a11e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800a100:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 800a102:	205c      	movs	r0, #92	; 0x5c
 800a104:	fb00 3004 	mla	r0, r0, r4, r3
 800a108:	f002 facc 	bl	800c6a4 <HAL_OSPI_Abort>
 800a10c:	b950      	cbnz	r0, 800a124 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800a10e:	4b07      	ldr	r3, [pc, #28]	; (800a12c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 800a110:	2201      	movs	r2, #1
 800a112:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 800a116:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a118:	f06f 0001 	mvn.w	r0, #1
}
 800a11c:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800a11e:	f06f 001a 	mvn.w	r0, #26
 800a122:	e7f8      	b.n	800a116 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 800a124:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a128:	e7f5      	b.n	800a116 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 800a12a:	bf00      	nop
 800a12c:	24006f6c 	.word	0x24006f6c
 800a130:	24006f74 	.word	0x24006f74

0800a134 <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a134:	bb08      	cbnz	r0, 800a17a <BSP_OSPI_NOR_DeInit+0x46>
{
 800a136:	b510      	push	{r4, lr}
 800a138:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800a13a:	4b13      	ldr	r3, [pc, #76]	; (800a188 <BSP_OSPI_NOR_DeInit+0x54>)
 800a13c:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a140:	2b02      	cmp	r3, #2
 800a142:	d013      	beq.n	800a16c <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800a144:	4b10      	ldr	r3, [pc, #64]	; (800a188 <BSP_OSPI_NOR_DeInit+0x54>)
 800a146:	2200      	movs	r2, #0
 800a148:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800a14c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a150:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800a152:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800a154:	4b0d      	ldr	r3, [pc, #52]	; (800a18c <BSP_OSPI_NOR_DeInit+0x58>)
 800a156:	225c      	movs	r2, #92	; 0x5c
 800a158:	fb02 3404 	mla	r4, r2, r4, r3
 800a15c:	4620      	mov	r0, r4
 800a15e:	f7ff fde3 	bl	8009d28 <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800a162:	4620      	mov	r0, r4
 800a164:	f001 ffec 	bl	800c140 <HAL_OSPI_DeInit>
 800a168:	b950      	cbnz	r0, 800a180 <BSP_OSPI_NOR_DeInit+0x4c>
}
 800a16a:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800a16c:	f7ff ffc0 	bl	800a0f0 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800a170:	2800      	cmp	r0, #0
 800a172:	d0e7      	beq.n	800a144 <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a174:	f06f 0004 	mvn.w	r0, #4
 800a178:	e7f7      	b.n	800a16a <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 800a17a:	f06f 0001 	mvn.w	r0, #1
}
 800a17e:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 800a180:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a184:	e7f1      	b.n	800a16a <BSP_OSPI_NOR_DeInit+0x36>
 800a186:	bf00      	nop
 800a188:	24006f6c 	.word	0x24006f6c
 800a18c:	24006f74 	.word	0x24006f74

0800a190 <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a190:	2800      	cmp	r0, #0
 800a192:	d141      	bne.n	800a218 <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	460d      	mov	r5, r1
 800a198:	4616      	mov	r6, r2
 800a19a:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800a19c:	4b21      	ldr	r3, [pc, #132]	; (800a224 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800a19e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d03b      	beq.n	800a21e <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800a1a6:	4b1f      	ldr	r3, [pc, #124]	; (800a224 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800a1a8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a1ac:	785b      	ldrb	r3, [r3, #1]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d00b      	beq.n	800a1ca <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800a1b2:	2901      	cmp	r1, #1
 800a1b4:	d025      	beq.n	800a202 <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 800a1b6:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800a1b8:	4b1a      	ldr	r3, [pc, #104]	; (800a224 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800a1c0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a1c4:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800a1c6:	70a6      	strb	r6, [r4, #2]
}
 800a1c8:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800a1ca:	2901      	cmp	r1, #1
 800a1cc:	d105      	bne.n	800a1da <BSP_OSPI_NOR_ConfigFlash+0x4a>
 800a1ce:	4b15      	ldr	r3, [pc, #84]	; (800a224 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800a1d0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800a1d4:	789b      	ldrb	r3, [r3, #2]
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d01c      	beq.n	800a214 <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f7ff fdf6 	bl	8009dcc <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	bf08      	it	eq
 800a1e4:	2d01      	cmpeq	r5, #1
 800a1e6:	d10f      	bne.n	800a208 <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800a1e8:	4b0e      	ldr	r3, [pc, #56]	; (800a224 <BSP_OSPI_NOR_ConfigFlash+0x94>)
 800a1ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1ee:	789b      	ldrb	r3, [r3, #2]
 800a1f0:	b91b      	cbnz	r3, 800a1fa <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f7ff feac 	bl	8009f50 <OSPI_NOR_EnterDOPIMode>
 800a1f8:	e006      	b.n	800a208 <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff fe44 	bl	8009e88 <OSPI_NOR_EnterSOPIMode>
 800a200:	e002      	b.n	800a208 <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800a202:	b922      	cbnz	r2, 800a20e <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800a204:	f7ff fe40 	bl	8009e88 <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 800a208:	2800      	cmp	r0, #0
 800a20a:	d1dd      	bne.n	800a1c8 <BSP_OSPI_NOR_ConfigFlash+0x38>
 800a20c:	e7d4      	b.n	800a1b8 <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800a20e:	f7ff fe9f 	bl	8009f50 <OSPI_NOR_EnterDOPIMode>
 800a212:	e7f9      	b.n	800a208 <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 800a214:	2000      	movs	r0, #0
 800a216:	e7cf      	b.n	800a1b8 <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 800a218:	f06f 0001 	mvn.w	r0, #1
}
 800a21c:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800a21e:	f06f 0019 	mvn.w	r0, #25
  return ret;
 800a222:	e7d1      	b.n	800a1c8 <BSP_OSPI_NOR_ConfigFlash+0x38>
 800a224:	24006f6c 	.word	0x24006f6c

0800a228 <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a228:	2800      	cmp	r0, #0
 800a22a:	d13f      	bne.n	800a2ac <BSP_OSPI_NOR_Init+0x84>
{
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	b08e      	sub	sp, #56	; 0x38
 800a230:	460d      	mov	r5, r1
 800a232:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800a234:	4b23      	ldr	r3, [pc, #140]	; (800a2c4 <BSP_OSPI_NOR_Init+0x9c>)
 800a236:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800a23a:	b113      	cbz	r3, 800a242 <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800a23c:	2000      	movs	r0, #0
}
 800a23e:	b00e      	add	sp, #56	; 0x38
 800a240:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800a242:	4e21      	ldr	r6, [pc, #132]	; (800a2c8 <BSP_OSPI_NOR_Init+0xa0>)
 800a244:	235c      	movs	r3, #92	; 0x5c
 800a246:	fb03 6600 	mla	r6, r3, r0, r6
 800a24a:	4630      	mov	r0, r6
 800a24c:	f7ff fc0e 	bl	8009a6c <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800a250:	a805      	add	r0, sp, #20
 800a252:	f7fe fe43 	bl	8008edc <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 800a256:	2303      	movs	r3, #3
 800a258:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800a25a:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a25c:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a260:	b313      	cbz	r3, 800a2a8 <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800a262:	fab3 f383 	clz	r3, r3
 800a266:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800a268:	2300      	movs	r3, #0
 800a26a:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800a26c:	786b      	ldrb	r3, [r5, #1]
 800a26e:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800a270:	a901      	add	r1, sp, #4
 800a272:	4630      	mov	r0, r6
 800a274:	f7ff fede 	bl	800a034 <MX_OSPI_NOR_Init>
 800a278:	b9d8      	cbnz	r0, 800a2b2 <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800a27a:	4620      	mov	r0, r4
 800a27c:	f7ff fd04 	bl	8009c88 <OSPI_NOR_ResetMemory>
 800a280:	b9d0      	cbnz	r0, 800a2b8 <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a282:	4b10      	ldr	r3, [pc, #64]	; (800a2c4 <BSP_OSPI_NOR_Init+0x9c>)
 800a284:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a288:	789a      	ldrb	r2, [r3, #2]
 800a28a:	7859      	ldrb	r1, [r3, #1]
 800a28c:	4630      	mov	r0, r6
 800a28e:	f7fe fe3e 	bl	8008f0e <MX25LM51245G_AutoPollingMemReady>
 800a292:	b9a0      	cbnz	r0, 800a2be <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800a294:	786a      	ldrb	r2, [r5, #1]
 800a296:	7829      	ldrb	r1, [r5, #0]
 800a298:	4620      	mov	r0, r4
 800a29a:	f7ff ff79 	bl	800a190 <BSP_OSPI_NOR_ConfigFlash>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d0cd      	beq.n	800a23e <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2a2:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800a2a6:	e7ca      	b.n	800a23e <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	e7dc      	b.n	800a266 <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 800a2ac:	f06f 0001 	mvn.w	r0, #1
}
 800a2b0:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a2b2:	f06f 0003 	mvn.w	r0, #3
 800a2b6:	e7c2      	b.n	800a23e <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2b8:	f06f 0004 	mvn.w	r0, #4
 800a2bc:	e7bf      	b.n	800a23e <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2be:	f06f 0004 	mvn.w	r0, #4
 800a2c2:	e7bc      	b.n	800a23e <BSP_OSPI_NOR_Init+0x16>
 800a2c4:	24006f6c 	.word	0x24006f6c
 800a2c8:	24006f74 	.word	0x24006f74

0800a2cc <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800a2cc:	b510      	push	{r4, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800a2d6:	2370      	movs	r3, #112	; 0x70
 800a2d8:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 800a2dc:	4b17      	ldr	r3, [pc, #92]	; (800a33c <FT5336_Probe+0x70>)
 800a2de:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a2e0:	4b17      	ldr	r3, [pc, #92]	; (800a340 <FT5336_Probe+0x74>)
 800a2e2:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800a2e4:	4b17      	ldr	r3, [pc, #92]	; (800a344 <FT5336_Probe+0x78>)
 800a2e6:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800a2e8:	4b17      	ldr	r3, [pc, #92]	; (800a348 <FT5336_Probe+0x7c>)
 800a2ea:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 800a2ec:	4b17      	ldr	r3, [pc, #92]	; (800a34c <FT5336_Probe+0x80>)
 800a2ee:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800a2f0:	a902      	add	r1, sp, #8
 800a2f2:	4817      	ldr	r0, [pc, #92]	; (800a350 <FT5336_Probe+0x84>)
 800a2f4:	f7fe fd50 	bl	8008d98 <FT5336_RegisterBusIO>
 800a2f8:	b998      	cbnz	r0, 800a322 <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800a2fa:	a901      	add	r1, sp, #4
 800a2fc:	4814      	ldr	r0, [pc, #80]	; (800a350 <FT5336_Probe+0x84>)
 800a2fe:	f7fe fc8d 	bl	8008c1c <FT5336_ReadID>
 800a302:	b988      	cbnz	r0, 800a328 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 800a304:	9b01      	ldr	r3, [sp, #4]
 800a306:	2b51      	cmp	r3, #81	; 0x51
 800a308:	d111      	bne.n	800a32e <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800a30a:	4811      	ldr	r0, [pc, #68]	; (800a350 <FT5336_Probe+0x84>)
 800a30c:	4b11      	ldr	r3, [pc, #68]	; (800a354 <FT5336_Probe+0x88>)
 800a30e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800a312:	4b11      	ldr	r3, [pc, #68]	; (800a358 <FT5336_Probe+0x8c>)
 800a314:	4a11      	ldr	r2, [pc, #68]	; (800a35c <FT5336_Probe+0x90>)
 800a316:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4798      	blx	r3
 800a31c:	b950      	cbnz	r0, 800a334 <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 800a31e:	b008      	add	sp, #32
 800a320:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 800a322:	f06f 0007 	mvn.w	r0, #7
 800a326:	e7fa      	b.n	800a31e <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a328:	f06f 0004 	mvn.w	r0, #4
 800a32c:	e7f7      	b.n	800a31e <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a32e:	f06f 0006 	mvn.w	r0, #6
 800a332:	e7f4      	b.n	800a31e <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a334:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800a338:	e7f1      	b.n	800a31e <FT5336_Probe+0x52>
 800a33a:	bf00      	nop
 800a33c:	080099ad 	.word	0x080099ad
 800a340:	0800993d 	.word	0x0800993d
 800a344:	08009a35 	.word	0x08009a35
 800a348:	08009a05 	.word	0x08009a05
 800a34c:	08009a65 	.word	0x08009a65
 800a350:	24006fd0 	.word	0x24006fd0
 800a354:	24006ff8 	.word	0x24006ff8
 800a358:	24000040 	.word	0x24000040
 800a35c:	2400701c 	.word	0x2400701c

0800a360 <BSP_TS_Init>:
{
 800a360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a362:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a364:	2800      	cmp	r0, #0
 800a366:	d150      	bne.n	800a40a <BSP_TS_Init+0xaa>
 800a368:	460c      	mov	r4, r1
 800a36a:	4605      	mov	r5, r0
 800a36c:	680b      	ldr	r3, [r1, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d04e      	beq.n	800a410 <BSP_TS_Init+0xb0>
 800a372:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800a376:	d84e      	bhi.n	800a416 <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a378:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	d04e      	beq.n	800a41c <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a37e:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 800a382:	d84e      	bhi.n	800a422 <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800a384:	68c9      	ldr	r1, [r1, #12]
 800a386:	4293      	cmp	r3, r2
 800a388:	bf28      	it	cs
 800a38a:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a38c:	4299      	cmp	r1, r3
 800a38e:	d84b      	bhi.n	800a428 <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800a390:	f7ff ff9c 	bl	800a2cc <FT5336_Probe>
 800a394:	4606      	mov	r6, r0
 800a396:	2800      	cmp	r0, #0
 800a398:	d149      	bne.n	800a42e <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800a39a:	6820      	ldr	r0, [r4, #0]
 800a39c:	4925      	ldr	r1, [pc, #148]	; (800a434 <BSP_TS_Init+0xd4>)
 800a39e:	016a      	lsls	r2, r5, #5
 800a3a0:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 800a3a4:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800a3a6:	6862      	ldr	r2, [r4, #4]
 800a3a8:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800a3aa:	68a2      	ldr	r2, [r4, #8]
 800a3ac:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800a3ae:	68e2      	ldr	r2, [r4, #12]
 800a3b0:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a3b2:	4b21      	ldr	r3, [pc, #132]	; (800a438 <BSP_TS_Init+0xd8>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	a901      	add	r1, sp, #4
 800a3ba:	4a20      	ldr	r2, [pc, #128]	; (800a43c <BSP_TS_Init+0xdc>)
 800a3bc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800a3c0:	4798      	blx	r3
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	db1e      	blt.n	800a404 <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a3c6:	4b1b      	ldr	r3, [pc, #108]	; (800a434 <BSP_TS_Init+0xd4>)
 800a3c8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800a3cc:	9a02      	ldr	r2, [sp, #8]
 800a3ce:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a3d0:	9a03      	ldr	r2, [sp, #12]
 800a3d2:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800a3d4:	462b      	mov	r3, r5
 800a3d6:	b113      	cbz	r3, 800a3de <BSP_TS_Init+0x7e>
}
 800a3d8:	4630      	mov	r0, r6
 800a3da:	b005      	add	sp, #20
 800a3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a3de:	6822      	ldr	r2, [r4, #0]
 800a3e0:	68e1      	ldr	r1, [r4, #12]
 800a3e2:	440a      	add	r2, r1
 800a3e4:	3201      	adds	r2, #1
 800a3e6:	4913      	ldr	r1, [pc, #76]	; (800a434 <BSP_TS_Init+0xd4>)
 800a3e8:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 800a3ec:	3006      	adds	r0, #6
 800a3ee:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a3f2:	6862      	ldr	r2, [r4, #4]
 800a3f4:	68e7      	ldr	r7, [r4, #12]
 800a3f6:	443a      	add	r2, r7
 800a3f8:	3201      	adds	r2, #1
 800a3fa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a3fe:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800a400:	3301      	adds	r3, #1
 800a402:	e7e8      	b.n	800a3d6 <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a404:	f06f 0604 	mvn.w	r6, #4
 800a408:	e7e6      	b.n	800a3d8 <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 800a40a:	f06f 0601 	mvn.w	r6, #1
 800a40e:	e7e3      	b.n	800a3d8 <BSP_TS_Init+0x78>
 800a410:	f06f 0601 	mvn.w	r6, #1
 800a414:	e7e0      	b.n	800a3d8 <BSP_TS_Init+0x78>
 800a416:	f06f 0601 	mvn.w	r6, #1
 800a41a:	e7dd      	b.n	800a3d8 <BSP_TS_Init+0x78>
 800a41c:	f06f 0601 	mvn.w	r6, #1
 800a420:	e7da      	b.n	800a3d8 <BSP_TS_Init+0x78>
 800a422:	f06f 0601 	mvn.w	r6, #1
 800a426:	e7d7      	b.n	800a3d8 <BSP_TS_Init+0x78>
 800a428:	f06f 0601 	mvn.w	r6, #1
 800a42c:	e7d4      	b.n	800a3d8 <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 800a42e:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 800a432:	e7d1      	b.n	800a3d8 <BSP_TS_Init+0x78>
 800a434:	24006ffc 	.word	0x24006ffc
 800a438:	2400701c 	.word	0x2400701c
 800a43c:	24006ff8 	.word	0x24006ff8

0800a440 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 800a440:	2800      	cmp	r0, #0
 800a442:	d178      	bne.n	800a536 <BSP_TS_GetState+0xf6>
{
 800a444:	b570      	push	{r4, r5, r6, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	460c      	mov	r4, r1
 800a44a:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800a44c:	4b3b      	ldr	r3, [pc, #236]	; (800a53c <BSP_TS_GetState+0xfc>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	a901      	add	r1, sp, #4
 800a454:	4a3a      	ldr	r2, [pc, #232]	; (800a540 <BSP_TS_GetState+0x100>)
 800a456:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800a45a:	4798      	blx	r3
 800a45c:	2800      	cmp	r0, #0
 800a45e:	db66      	blt.n	800a52e <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 800a460:	9e01      	ldr	r6, [sp, #4]
 800a462:	2e00      	cmp	r6, #0
 800a464:	d059      	beq.n	800a51a <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 800a466:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 800a468:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a46a:	4b36      	ldr	r3, [pc, #216]	; (800a544 <BSP_TS_GetState+0x104>)
 800a46c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800a470:	6899      	ldr	r1, [r3, #8]
 800a472:	f011 0f08 	tst.w	r1, #8
 800a476:	d141      	bne.n	800a4fc <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 800a478:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 800a47a:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800a47c:	f011 0f02 	tst.w	r1, #2
 800a480:	d005      	beq.n	800a48e <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800a482:	4b30      	ldr	r3, [pc, #192]	; (800a544 <BSP_TS_GetState+0x104>)
 800a484:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	1a9b      	subs	r3, r3, r2
 800a48c:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800a48e:	f011 0f04 	tst.w	r1, #4
 800a492:	d005      	beq.n	800a4a0 <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800a494:	4a2b      	ldr	r2, [pc, #172]	; (800a544 <BSP_TS_GetState+0x104>)
 800a496:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 800a49a:	6952      	ldr	r2, [r2, #20]
 800a49c:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a4a0:	4a28      	ldr	r2, [pc, #160]	; (800a544 <BSP_TS_GetState+0x104>)
 800a4a2:	0168      	lsls	r0, r5, #5
 800a4a4:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 800a4a8:	5810      	ldr	r0, [r2, r0]
 800a4aa:	fb00 f303 	mul.w	r3, r0, r3
 800a4ae:	690a      	ldr	r2, [r1, #16]
 800a4b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4b4:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a4b6:	684a      	ldr	r2, [r1, #4]
 800a4b8:	fb0c f202 	mul.w	r2, ip, r2
 800a4bc:	6948      	ldr	r0, [r1, #20]
 800a4be:	fbb2 f2f0 	udiv	r2, r2, r0
 800a4c2:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 800a4c4:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a4c6:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a4c8:	4283      	cmp	r3, r0
 800a4ca:	d91a      	bls.n	800a502 <BSP_TS_GetState+0xc2>
 800a4cc:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800a4ce:	491d      	ldr	r1, [pc, #116]	; (800a544 <BSP_TS_GetState+0x104>)
 800a4d0:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800a4d4:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a4d6:	428a      	cmp	r2, r1
 800a4d8:	d915      	bls.n	800a506 <BSP_TS_GetState+0xc6>
 800a4da:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a4dc:	4919      	ldr	r1, [pc, #100]	; (800a544 <BSP_TS_GetState+0x104>)
 800a4de:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800a4e2:	68c9      	ldr	r1, [r1, #12]
 800a4e4:	42b1      	cmp	r1, r6
 800a4e6:	d301      	bcc.n	800a4ec <BSP_TS_GetState+0xac>
 800a4e8:	4291      	cmp	r1, r2
 800a4ea:	d20e      	bcs.n	800a50a <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800a4ec:	4a15      	ldr	r2, [pc, #84]	; (800a544 <BSP_TS_GetState+0x104>)
 800a4ee:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 800a4f2:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a4f4:	68a3      	ldr	r3, [r4, #8]
 800a4f6:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 800a4f8:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a4fa:	e01a      	b.n	800a532 <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 800a4fc:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 800a4fe:	4603      	mov	r3, r0
 800a500:	e7bc      	b.n	800a47c <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a502:	1ac6      	subs	r6, r0, r3
 800a504:	e7e3      	b.n	800a4ce <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a506:	1a8a      	subs	r2, r1, r2
 800a508:	e7e8      	b.n	800a4dc <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800a50a:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a50c:	4b0d      	ldr	r3, [pc, #52]	; (800a544 <BSP_TS_GetState+0x104>)
 800a50e:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800a512:	69eb      	ldr	r3, [r5, #28]
 800a514:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 800a516:	2000      	movs	r0, #0
 800a518:	e00b      	b.n	800a532 <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 800a51a:	2000      	movs	r0, #0
 800a51c:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800a51e:	4b09      	ldr	r3, [pc, #36]	; (800a544 <BSP_TS_GetState+0x104>)
 800a520:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800a524:	69ab      	ldr	r3, [r5, #24]
 800a526:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a528:	69eb      	ldr	r3, [r5, #28]
 800a52a:	60a3      	str	r3, [r4, #8]
 800a52c:	e001      	b.n	800a532 <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a52e:	f06f 0004 	mvn.w	r0, #4
}
 800a532:	b004      	add	sp, #16
 800a534:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a536:	f06f 0001 	mvn.w	r0, #1
}
 800a53a:	4770      	bx	lr
 800a53c:	2400701c 	.word	0x2400701c
 800a540:	24006ff8 	.word	0x24006ff8
 800a544:	24006ffc 	.word	0x24006ffc

0800a548 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a548:	4a18      	ldr	r2, [pc, #96]	; (800a5ac <SystemInit+0x64>)
 800a54a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a54e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a552:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a556:	4b16      	ldr	r3, [pc, #88]	; (800a5b0 <SystemInit+0x68>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	f042 0201 	orr.w	r2, r2, #1
 800a55e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a560:	2200      	movs	r2, #0
 800a562:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a564:	6818      	ldr	r0, [r3, #0]
 800a566:	4913      	ldr	r1, [pc, #76]	; (800a5b4 <SystemInit+0x6c>)
 800a568:	4001      	ands	r1, r0
 800a56a:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800a56c:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800a56e:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800a570:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800a572:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800a574:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800a576:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800a57a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a57c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800a57e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a580:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a582:	6819      	ldr	r1, [r3, #0]
 800a584:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800a588:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a58a:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <SystemInit+0x70>)
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <SystemInit+0x74>)
 800a592:	4013      	ands	r3, r2
 800a594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a598:	d203      	bcs.n	800a5a2 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a59a:	4b09      	ldr	r3, [pc, #36]	; (800a5c0 <SystemInit+0x78>)
 800a59c:	2201      	movs	r2, #1
 800a59e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a5a2:	4b02      	ldr	r3, [pc, #8]	; (800a5ac <SystemInit+0x64>)
 800a5a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a5a8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800a5aa:	4770      	bx	lr
 800a5ac:	e000ed00 	.word	0xe000ed00
 800a5b0:	58024400 	.word	0x58024400
 800a5b4:	eaf6ed7f 	.word	0xeaf6ed7f
 800a5b8:	5c001000 	.word	0x5c001000
 800a5bc:	ffff0000 	.word	0xffff0000
 800a5c0:	51008000 	.word	0x51008000

0800a5c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a5c4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a5c6:	2003      	movs	r0, #3
 800a5c8:	f000 f850 	bl	800a66c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a5cc:	f002 fc92 	bl	800cef4 <HAL_RCC_GetSysClockFreq>
 800a5d0:	490f      	ldr	r1, [pc, #60]	; (800a610 <HAL_Init+0x4c>)
 800a5d2:	698b      	ldr	r3, [r1, #24]
 800a5d4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a5d8:	4a0e      	ldr	r2, [pc, #56]	; (800a614 <HAL_Init+0x50>)
 800a5da:	5cd3      	ldrb	r3, [r2, r3]
 800a5dc:	f003 031f 	and.w	r3, r3, #31
 800a5e0:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a5e2:	698b      	ldr	r3, [r1, #24]
 800a5e4:	f003 030f 	and.w	r3, r3, #15
 800a5e8:	5cd3      	ldrb	r3, [r2, r3]
 800a5ea:	f003 031f 	and.w	r3, r3, #31
 800a5ee:	fa20 f303 	lsr.w	r3, r0, r3
 800a5f2:	4a09      	ldr	r2, [pc, #36]	; (800a618 <HAL_Init+0x54>)
 800a5f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5f6:	4b09      	ldr	r3, [pc, #36]	; (800a61c <HAL_Init+0x58>)
 800a5f8:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a5fa:	2001      	movs	r0, #1
 800a5fc:	f7f8 fe28 	bl	8003250 <HAL_InitTick>
 800a600:	b110      	cbz	r0, 800a608 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800a602:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800a604:	4620      	mov	r0, r4
 800a606:	bd10      	pop	{r4, pc}
 800a608:	4604      	mov	r4, r0
  HAL_MspInit();
 800a60a:	f7f8 fbd5 	bl	8002db8 <HAL_MspInit>
  return HAL_OK;
 800a60e:	e7f9      	b.n	800a604 <HAL_Init+0x40>
 800a610:	58024400 	.word	0x58024400
 800a614:	0802676c 	.word	0x0802676c
 800a618:	24000074 	.word	0x24000074
 800a61c:	24000070 	.word	0x24000070

0800a620 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a620:	4b03      	ldr	r3, [pc, #12]	; (800a630 <HAL_IncTick+0x10>)
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	4a03      	ldr	r2, [pc, #12]	; (800a634 <HAL_IncTick+0x14>)
 800a626:	6811      	ldr	r1, [r2, #0]
 800a628:	440b      	add	r3, r1
 800a62a:	6013      	str	r3, [r2, #0]
}
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	24000078 	.word	0x24000078
 800a634:	24007020 	.word	0x24007020

0800a638 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a638:	4b01      	ldr	r3, [pc, #4]	; (800a640 <HAL_GetTick+0x8>)
 800a63a:	6818      	ldr	r0, [r3, #0]
}
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	24007020 	.word	0x24007020

0800a644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a648:	f7ff fff6 	bl	800a638 <HAL_GetTick>
 800a64c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a64e:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a652:	d002      	beq.n	800a65a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800a654:	4b04      	ldr	r3, [pc, #16]	; (800a668 <HAL_Delay+0x24>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a65a:	f7ff ffed 	bl	800a638 <HAL_GetTick>
 800a65e:	1b40      	subs	r0, r0, r5
 800a660:	42a0      	cmp	r0, r4
 800a662:	d3fa      	bcc.n	800a65a <HAL_Delay+0x16>
  {
  }
}
 800a664:	bd38      	pop	{r3, r4, r5, pc}
 800a666:	bf00      	nop
 800a668:	24000078 	.word	0x24000078

0800a66c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a66c:	4906      	ldr	r1, [pc, #24]	; (800a688 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800a66e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a670:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a674:	041b      	lsls	r3, r3, #16
 800a676:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a678:	0200      	lsls	r0, r0, #8
 800a67a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a67e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800a680:	4a02      	ldr	r2, [pc, #8]	; (800a68c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800a682:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800a684:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a686:	4770      	bx	lr
 800a688:	e000ed00 	.word	0xe000ed00
 800a68c:	05fa0000 	.word	0x05fa0000

0800a690 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a690:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a692:	4b17      	ldr	r3, [pc, #92]	; (800a6f0 <HAL_NVIC_SetPriority+0x60>)
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a69a:	f1c3 0c07 	rsb	ip, r3, #7
 800a69e:	f1bc 0f04 	cmp.w	ip, #4
 800a6a2:	bf28      	it	cs
 800a6a4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6a8:	f103 0e04 	add.w	lr, r3, #4
 800a6ac:	f1be 0f06 	cmp.w	lr, #6
 800a6b0:	d914      	bls.n	800a6dc <HAL_NVIC_SetPriority+0x4c>
 800a6b2:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6b4:	f04f 3eff 	mov.w	lr, #4294967295
 800a6b8:	fa0e fc0c 	lsl.w	ip, lr, ip
 800a6bc:	ea21 010c 	bic.w	r1, r1, ip
 800a6c0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a6c2:	fa0e f303 	lsl.w	r3, lr, r3
 800a6c6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6ca:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	db07      	blt.n	800a6e0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6d0:	0109      	lsls	r1, r1, #4
 800a6d2:	b2c9      	uxtb	r1, r1
 800a6d4:	4b07      	ldr	r3, [pc, #28]	; (800a6f4 <HAL_NVIC_SetPriority+0x64>)
 800a6d6:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a6d8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6dc:	2300      	movs	r3, #0
 800a6de:	e7e9      	b.n	800a6b4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6e0:	f000 000f 	and.w	r0, r0, #15
 800a6e4:	0109      	lsls	r1, r1, #4
 800a6e6:	b2c9      	uxtb	r1, r1
 800a6e8:	4b03      	ldr	r3, [pc, #12]	; (800a6f8 <HAL_NVIC_SetPriority+0x68>)
 800a6ea:	5419      	strb	r1, [r3, r0]
 800a6ec:	e7f4      	b.n	800a6d8 <HAL_NVIC_SetPriority+0x48>
 800a6ee:	bf00      	nop
 800a6f0:	e000ed00 	.word	0xe000ed00
 800a6f4:	e000e400 	.word	0xe000e400
 800a6f8:	e000ed14 	.word	0xe000ed14

0800a6fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	db07      	blt.n	800a710 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a700:	f000 021f 	and.w	r2, r0, #31
 800a704:	0940      	lsrs	r0, r0, #5
 800a706:	2301      	movs	r3, #1
 800a708:	4093      	lsls	r3, r2
 800a70a:	4a02      	ldr	r2, [pc, #8]	; (800a714 <HAL_NVIC_EnableIRQ+0x18>)
 800a70c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	e000e100 	.word	0xe000e100

0800a718 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a718:	2800      	cmp	r0, #0
 800a71a:	db0c      	blt.n	800a736 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a71c:	f000 021f 	and.w	r2, r0, #31
 800a720:	0940      	lsrs	r0, r0, #5
 800a722:	2301      	movs	r3, #1
 800a724:	4093      	lsls	r3, r2
 800a726:	3020      	adds	r0, #32
 800a728:	4a03      	ldr	r2, [pc, #12]	; (800a738 <HAL_NVIC_DisableIRQ+0x20>)
 800a72a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a72e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a732:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800a736:	4770      	bx	lr
 800a738:	e000e100 	.word	0xe000e100

0800a73c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800a73c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a740:	4b04      	ldr	r3, [pc, #16]	; (800a754 <HAL_MPU_Disable+0x18>)
 800a742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a744:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a74a:	2200      	movs	r2, #0
 800a74c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	e000ed00 	.word	0xe000ed00

0800a758 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a758:	f040 0001 	orr.w	r0, r0, #1
 800a75c:	4b05      	ldr	r3, [pc, #20]	; (800a774 <HAL_MPU_Enable+0x1c>)
 800a75e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a764:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a768:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a76a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a76e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a772:	4770      	bx	lr
 800a774:	e000ed00 	.word	0xe000ed00

0800a778 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a778:	7842      	ldrb	r2, [r0, #1]
 800a77a:	4b16      	ldr	r3, [pc, #88]	; (800a7d4 <HAL_MPU_ConfigRegion+0x5c>)
 800a77c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800a780:	7803      	ldrb	r3, [r0, #0]
 800a782:	b1fb      	cbz	r3, 800a7c4 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800a784:	6843      	ldr	r3, [r0, #4]
 800a786:	4a13      	ldr	r2, [pc, #76]	; (800a7d4 <HAL_MPU_ConfigRegion+0x5c>)
 800a788:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a78c:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a78e:	7ac3      	ldrb	r3, [r0, #11]
 800a790:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a792:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a796:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a798:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a79c:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a79e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a7a2:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a7a4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a7a8:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a7aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a7ae:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a7b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a7b4:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a7b6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800a7ba:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a7bc:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a7be:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800a7c2:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 800a7c4:	4b03      	ldr	r3, [pc, #12]	; (800a7d4 <HAL_MPU_ConfigRegion+0x5c>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 800a7cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	e000ed00 	.word	0xe000ed00

0800a7d8 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d038      	beq.n	800a84e <HAL_CRC_Init+0x76>
{
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a7e0:	7f43      	ldrb	r3, [r0, #29]
 800a7e2:	b31b      	cbz	r3, 800a82c <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a7e8:	7923      	ldrb	r3, [r4, #4]
 800a7ea:	bb1b      	cbnz	r3, 800a834 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	4a19      	ldr	r2, [pc, #100]	; (800a854 <HAL_CRC_Init+0x7c>)
 800a7f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a7f2:	6822      	ldr	r2, [r4, #0]
 800a7f4:	6893      	ldr	r3, [r2, #8]
 800a7f6:	f023 0318 	bic.w	r3, r3, #24
 800a7fa:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a7fc:	7963      	ldrb	r3, [r4, #5]
 800a7fe:	bb13      	cbnz	r3, 800a846 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a800:	6823      	ldr	r3, [r4, #0]
 800a802:	f04f 32ff 	mov.w	r2, #4294967295
 800a806:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a808:	6822      	ldr	r2, [r4, #0]
 800a80a:	6893      	ldr	r3, [r2, #8]
 800a80c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a810:	6961      	ldr	r1, [r4, #20]
 800a812:	430b      	orrs	r3, r1
 800a814:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a816:	6822      	ldr	r2, [r4, #0]
 800a818:	6893      	ldr	r3, [r2, #8]
 800a81a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a81e:	69a1      	ldr	r1, [r4, #24]
 800a820:	430b      	orrs	r3, r1
 800a822:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a824:	2301      	movs	r3, #1
 800a826:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800a828:	2000      	movs	r0, #0
}
 800a82a:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800a82c:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a82e:	f7f8 fadd 	bl	8002dec <HAL_CRC_MspInit>
 800a832:	e7d7      	b.n	800a7e4 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a834:	68e2      	ldr	r2, [r4, #12]
 800a836:	68a1      	ldr	r1, [r4, #8]
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 f80d 	bl	800a858 <HAL_CRCEx_Polynomial_Set>
 800a83e:	2800      	cmp	r0, #0
 800a840:	d0dc      	beq.n	800a7fc <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800a842:	2001      	movs	r0, #1
 800a844:	e7f1      	b.n	800a82a <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	6922      	ldr	r2, [r4, #16]
 800a84a:	611a      	str	r2, [r3, #16]
 800a84c:	e7dc      	b.n	800a808 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800a84e:	2001      	movs	r0, #1
}
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	04c11db7 	.word	0x04c11db7

0800a858 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a858:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a85a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a85c:	461c      	mov	r4, r3
 800a85e:	3b01      	subs	r3, #1
 800a860:	b134      	cbz	r4, 800a870 <HAL_CRCEx_Polynomial_Set+0x18>
 800a862:	f003 0c1f 	and.w	ip, r3, #31
 800a866:	fa21 fc0c 	lsr.w	ip, r1, ip
 800a86a:	f01c 0f01 	tst.w	ip, #1
 800a86e:	d0f5      	beq.n	800a85c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800a870:	2a18      	cmp	r2, #24
 800a872:	d822      	bhi.n	800a8ba <HAL_CRCEx_Polynomial_Set+0x62>
 800a874:	e8df f002 	tbb	[pc, r2]
 800a878:	2121210f 	.word	0x2121210f
 800a87c:	21212121 	.word	0x21212121
 800a880:	2121211d 	.word	0x2121211d
 800a884:	21212121 	.word	0x21212121
 800a888:	21212119 	.word	0x21212119
 800a88c:	21212121 	.word	0x21212121
 800a890:	0d          	.byte	0x0d
 800a891:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a892:	2b06      	cmp	r3, #6
 800a894:	d815      	bhi.n	800a8c2 <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a896:	6803      	ldr	r3, [r0, #0]
 800a898:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a89a:	6801      	ldr	r1, [r0, #0]
 800a89c:	688b      	ldr	r3, [r1, #8]
 800a89e:	f023 0318 	bic.w	r3, r3, #24
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	608a      	str	r2, [r1, #8]
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	e008      	b.n	800a8bc <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 800a8aa:	2b07      	cmp	r3, #7
 800a8ac:	d9f3      	bls.n	800a896 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800a8ae:	2001      	movs	r0, #1
 800a8b0:	e004      	b.n	800a8bc <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 800a8b2:	2b0f      	cmp	r3, #15
 800a8b4:	d9ef      	bls.n	800a896 <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	e000      	b.n	800a8bc <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 800a8ba:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 800a8bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8c0:	4770      	bx	lr
        status =   HAL_ERROR;
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	e7fa      	b.n	800a8bc <HAL_CRCEx_Polynomial_Set+0x64>
	...

0800a8c8 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	f000 8129 	beq.w	800ab20 <HAL_DMA_Abort_IT+0x258>
{
 800a8ce:	b508      	push	{r3, lr}
 800a8d0:	4602      	mov	r2, r0
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a8d2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d003      	beq.n	800a8e4 <HAL_DMA_Abort_IT+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a8dc:	2380      	movs	r3, #128	; 0x80
 800a8de:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800a8e0:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 800a8e2:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a8e4:	6803      	ldr	r3, [r0, #0]
 800a8e6:	4890      	ldr	r0, [pc, #576]	; (800ab28 <HAL_DMA_Abort_IT+0x260>)
 800a8e8:	4990      	ldr	r1, [pc, #576]	; (800ab2c <HAL_DMA_Abort_IT+0x264>)
 800a8ea:	428b      	cmp	r3, r1
 800a8ec:	bf18      	it	ne
 800a8ee:	4283      	cmpne	r3, r0
 800a8f0:	bf0c      	ite	eq
 800a8f2:	2101      	moveq	r1, #1
 800a8f4:	2100      	movne	r1, #0
 800a8f6:	d066      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a8f8:	3030      	adds	r0, #48	; 0x30
 800a8fa:	4283      	cmp	r3, r0
 800a8fc:	d063      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a8fe:	3018      	adds	r0, #24
 800a900:	4283      	cmp	r3, r0
 800a902:	d060      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a904:	3018      	adds	r0, #24
 800a906:	4283      	cmp	r3, r0
 800a908:	d05d      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a90a:	3018      	adds	r0, #24
 800a90c:	4283      	cmp	r3, r0
 800a90e:	d05a      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a910:	3018      	adds	r0, #24
 800a912:	4283      	cmp	r3, r0
 800a914:	d057      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a916:	3018      	adds	r0, #24
 800a918:	4283      	cmp	r3, r0
 800a91a:	d054      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a91c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800a920:	4283      	cmp	r3, r0
 800a922:	d050      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a924:	3018      	adds	r0, #24
 800a926:	4283      	cmp	r3, r0
 800a928:	d04d      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a92a:	3018      	adds	r0, #24
 800a92c:	4283      	cmp	r3, r0
 800a92e:	d04a      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a930:	3018      	adds	r0, #24
 800a932:	4283      	cmp	r3, r0
 800a934:	d047      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a936:	3018      	adds	r0, #24
 800a938:	4283      	cmp	r3, r0
 800a93a:	d044      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a93c:	3018      	adds	r0, #24
 800a93e:	4283      	cmp	r3, r0
 800a940:	d041      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a942:	3018      	adds	r0, #24
 800a944:	4283      	cmp	r3, r0
 800a946:	d03e      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
 800a948:	3018      	adds	r0, #24
 800a94a:	4283      	cmp	r3, r0
 800a94c:	d03b      	beq.n	800a9c6 <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a94e:	6819      	ldr	r1, [r3, #0]
 800a950:	f021 010e 	bic.w	r1, r1, #14
 800a954:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 800a956:	6813      	ldr	r3, [r2, #0]
 800a958:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 800a95c:	4973      	ldr	r1, [pc, #460]	; (800ab2c <HAL_DMA_Abort_IT+0x264>)
 800a95e:	428b      	cmp	r3, r1
 800a960:	bf18      	it	ne
 800a962:	4283      	cmpne	r3, r0
 800a964:	d06a      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a966:	4972      	ldr	r1, [pc, #456]	; (800ab30 <HAL_DMA_Abort_IT+0x268>)
 800a968:	428b      	cmp	r3, r1
 800a96a:	d067      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a96c:	3118      	adds	r1, #24
 800a96e:	428b      	cmp	r3, r1
 800a970:	d064      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a972:	3118      	adds	r1, #24
 800a974:	428b      	cmp	r3, r1
 800a976:	d061      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a978:	3118      	adds	r1, #24
 800a97a:	428b      	cmp	r3, r1
 800a97c:	d05e      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a97e:	3118      	adds	r1, #24
 800a980:	428b      	cmp	r3, r1
 800a982:	d05b      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a984:	3118      	adds	r1, #24
 800a986:	428b      	cmp	r3, r1
 800a988:	d058      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a98a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800a98e:	428b      	cmp	r3, r1
 800a990:	d054      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a992:	3118      	adds	r1, #24
 800a994:	428b      	cmp	r3, r1
 800a996:	d051      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a998:	3118      	adds	r1, #24
 800a99a:	428b      	cmp	r3, r1
 800a99c:	d04e      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a99e:	3118      	adds	r1, #24
 800a9a0:	428b      	cmp	r3, r1
 800a9a2:	d04b      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a9a4:	3118      	adds	r1, #24
 800a9a6:	428b      	cmp	r3, r1
 800a9a8:	d048      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a9aa:	3118      	adds	r1, #24
 800a9ac:	428b      	cmp	r3, r1
 800a9ae:	d045      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a9b0:	3118      	adds	r1, #24
 800a9b2:	428b      	cmp	r3, r1
 800a9b4:	d042      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a9b6:	3118      	adds	r1, #24
 800a9b8:	428b      	cmp	r3, r1
 800a9ba:	d03f      	beq.n	800aa3c <HAL_DMA_Abort_IT+0x174>
 800a9bc:	6819      	ldr	r1, [r3, #0]
 800a9be:	f021 0101 	bic.w	r1, r1, #1
 800a9c2:	6019      	str	r1, [r3, #0]
 800a9c4:	e03e      	b.n	800aa44 <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 800a9c6:	2004      	movs	r0, #4
 800a9c8:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800a9cc:	bb81      	cbnz	r1, 800aa30 <HAL_DMA_Abort_IT+0x168>
 800a9ce:	4a58      	ldr	r2, [pc, #352]	; (800ab30 <HAL_DMA_Abort_IT+0x268>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d02d      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800a9d4:	3218      	adds	r2, #24
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d02a      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800a9da:	3218      	adds	r2, #24
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d027      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800a9e0:	3218      	adds	r2, #24
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d024      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800a9e6:	3218      	adds	r2, #24
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d021      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800a9ec:	3218      	adds	r2, #24
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d01e      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800a9f2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d01a      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800a9fa:	3218      	adds	r2, #24
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d017      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800aa00:	3218      	adds	r2, #24
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d014      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800aa06:	3218      	adds	r2, #24
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d011      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800aa0c:	3218      	adds	r2, #24
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d00e      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800aa12:	3218      	adds	r2, #24
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d00b      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800aa18:	3218      	adds	r2, #24
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d008      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800aa1e:	3218      	adds	r2, #24
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d005      	beq.n	800aa30 <HAL_DMA_Abort_IT+0x168>
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	f022 0201 	bic.w	r2, r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	e758      	b.n	800a8e2 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	f022 0201 	bic.w	r2, r2, #1
 800aa36:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800aa38:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 800aa3a:	e752      	b.n	800a8e2 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800aa3c:	6819      	ldr	r1, [r3, #0]
 800aa3e:	f021 0101 	bic.w	r1, r1, #1
 800aa42:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aa44:	6813      	ldr	r3, [r2, #0]
 800aa46:	4838      	ldr	r0, [pc, #224]	; (800ab28 <HAL_DMA_Abort_IT+0x260>)
 800aa48:	4938      	ldr	r1, [pc, #224]	; (800ab2c <HAL_DMA_Abort_IT+0x264>)
 800aa4a:	428b      	cmp	r3, r1
 800aa4c:	bf18      	it	ne
 800aa4e:	4283      	cmpne	r3, r0
 800aa50:	d042      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa52:	3118      	adds	r1, #24
 800aa54:	428b      	cmp	r3, r1
 800aa56:	d03f      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa58:	3118      	adds	r1, #24
 800aa5a:	428b      	cmp	r3, r1
 800aa5c:	d03c      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa5e:	3118      	adds	r1, #24
 800aa60:	428b      	cmp	r3, r1
 800aa62:	d039      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa64:	3118      	adds	r1, #24
 800aa66:	428b      	cmp	r3, r1
 800aa68:	d036      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa6a:	3118      	adds	r1, #24
 800aa6c:	428b      	cmp	r3, r1
 800aa6e:	d033      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa70:	3118      	adds	r1, #24
 800aa72:	428b      	cmp	r3, r1
 800aa74:	d030      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa76:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800aa7a:	428b      	cmp	r3, r1
 800aa7c:	d02c      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa7e:	3118      	adds	r1, #24
 800aa80:	428b      	cmp	r3, r1
 800aa82:	d029      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa84:	3118      	adds	r1, #24
 800aa86:	428b      	cmp	r3, r1
 800aa88:	d026      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa8a:	3118      	adds	r1, #24
 800aa8c:	428b      	cmp	r3, r1
 800aa8e:	d023      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa90:	3118      	adds	r1, #24
 800aa92:	428b      	cmp	r3, r1
 800aa94:	d020      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa96:	3118      	adds	r1, #24
 800aa98:	428b      	cmp	r3, r1
 800aa9a:	d01d      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aa9c:	3118      	adds	r1, #24
 800aa9e:	428b      	cmp	r3, r1
 800aaa0:	d01a      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aaa2:	3118      	adds	r1, #24
 800aaa4:	428b      	cmp	r3, r1
 800aaa6:	d017      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aaa8:	4922      	ldr	r1, [pc, #136]	; (800ab34 <HAL_DMA_Abort_IT+0x26c>)
 800aaaa:	428b      	cmp	r3, r1
 800aaac:	d014      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aaae:	3114      	adds	r1, #20
 800aab0:	428b      	cmp	r3, r1
 800aab2:	d011      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aab4:	3114      	adds	r1, #20
 800aab6:	428b      	cmp	r3, r1
 800aab8:	d00e      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aaba:	3114      	adds	r1, #20
 800aabc:	428b      	cmp	r3, r1
 800aabe:	d00b      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aac0:	3114      	adds	r1, #20
 800aac2:	428b      	cmp	r3, r1
 800aac4:	d008      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aac6:	3114      	adds	r1, #20
 800aac8:	428b      	cmp	r3, r1
 800aaca:	d005      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aacc:	3114      	adds	r1, #20
 800aace:	428b      	cmp	r3, r1
 800aad0:	d002      	beq.n	800aad8 <HAL_DMA_Abort_IT+0x210>
 800aad2:	3114      	adds	r1, #20
 800aad4:	428b      	cmp	r3, r1
 800aad6:	d117      	bne.n	800ab08 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800aad8:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800aada:	680b      	ldr	r3, [r1, #0]
 800aadc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aae0:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800aae2:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800aae4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800aae6:	f003 011f 	and.w	r1, r3, #31
 800aaea:	2301      	movs	r3, #1
 800aaec:	408b      	lsls	r3, r1
 800aaee:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aaf0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800aaf2:	6e91      	ldr	r1, [r2, #104]	; 0x68
 800aaf4:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800aaf6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800aaf8:	b133      	cbz	r3, 800ab08 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aafa:	6819      	ldr	r1, [r3, #0]
 800aafc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800ab00:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ab02:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800ab04:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800ab06:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800ab14:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ab16:	b12b      	cbz	r3, 800ab24 <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 800ab18:	4610      	mov	r0, r2
 800ab1a:	4798      	blx	r3
  return HAL_OK;
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e6e0      	b.n	800a8e2 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 800ab20:	2001      	movs	r0, #1
}
 800ab22:	4770      	bx	lr
  return HAL_OK;
 800ab24:	2000      	movs	r0, #0
 800ab26:	e6dc      	b.n	800a8e2 <HAL_DMA_Abort_IT+0x1a>
 800ab28:	40020010 	.word	0x40020010
 800ab2c:	40020028 	.word	0x40020028
 800ab30:	40020040 	.word	0x40020040
 800ab34:	58025408 	.word	0x58025408

0800ab38 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d037      	beq.n	800abac <HAL_DMA2D_Init+0x74>
{
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800ab40:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d02c      	beq.n	800aba2 <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ab48:	2302      	movs	r3, #2
 800ab4a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800ab4e:	6821      	ldr	r1, [r4, #0]
 800ab50:	680a      	ldr	r2, [r1, #0]
 800ab52:	4b17      	ldr	r3, [pc, #92]	; (800abb0 <HAL_DMA2D_Init+0x78>)
 800ab54:	4013      	ands	r3, r2
 800ab56:	6862      	ldr	r2, [r4, #4]
 800ab58:	69e0      	ldr	r0, [r4, #28]
 800ab5a:	4302      	orrs	r2, r0
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800ab60:	6821      	ldr	r1, [r4, #0]
 800ab62:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800ab64:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <HAL_DMA2D_Init+0x7c>)
 800ab66:	4013      	ands	r3, r2
 800ab68:	68a2      	ldr	r2, [r4, #8]
 800ab6a:	69a0      	ldr	r0, [r4, #24]
 800ab6c:	4302      	orrs	r2, r0
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800ab72:	6822      	ldr	r2, [r4, #0]
 800ab74:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ab76:	4b10      	ldr	r3, [pc, #64]	; (800abb8 <HAL_DMA2D_Init+0x80>)
 800ab78:	400b      	ands	r3, r1
 800ab7a:	68e1      	ldr	r1, [r4, #12]
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800ab80:	6821      	ldr	r1, [r4, #0]
 800ab82:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ab84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ab88:	6920      	ldr	r0, [r4, #16]
 800ab8a:	6962      	ldr	r2, [r4, #20]
 800ab8c:	0552      	lsls	r2, r2, #21
 800ab8e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800ab92:	4313      	orrs	r3, r2
 800ab94:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800ab96:	2000      	movs	r0, #0
 800ab98:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800aba0:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800aba2:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800aba6:	f7f8 f93b 	bl	8002e20 <HAL_DMA2D_MspInit>
 800abaa:	e7cd      	b.n	800ab48 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 800abac:	2001      	movs	r0, #1
}
 800abae:	4770      	bx	lr
 800abb0:	fff8ffbf 	.word	0xfff8ffbf
 800abb4:	fffffef8 	.word	0xfffffef8
 800abb8:	ffff0000 	.word	0xffff0000

0800abbc <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800abbc:	4770      	bx	lr

0800abbe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800abbe:	4770      	bx	lr

0800abc0 <HAL_DMA2D_IRQHandler>:
{
 800abc0:	b570      	push	{r4, r5, r6, lr}
 800abc2:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800abc4:	6803      	ldr	r3, [r0, #0]
 800abc6:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800abc8:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800abca:	f015 0f01 	tst.w	r5, #1
 800abce:	d016      	beq.n	800abfe <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800abd0:	f416 7f80 	tst.w	r6, #256	; 0x100
 800abd4:	d013      	beq.n	800abfe <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800abdc:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800abde:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800abe0:	f043 0301 	orr.w	r3, r3, #1
 800abe4:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800abe6:	6803      	ldr	r3, [r0, #0]
 800abe8:	2201      	movs	r2, #1
 800abea:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800abec:	2304      	movs	r3, #4
 800abee:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800abf2:	2300      	movs	r3, #0
 800abf4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800abf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800abfa:	b103      	cbz	r3, 800abfe <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800abfc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800abfe:	f015 0f20 	tst.w	r5, #32
 800ac02:	d018      	beq.n	800ac36 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800ac04:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800ac08:	d015      	beq.n	800ac36 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800ac0a:	6822      	ldr	r2, [r4, #0]
 800ac0c:	6813      	ldr	r3, [r2, #0]
 800ac0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac12:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800ac14:	6823      	ldr	r3, [r4, #0]
 800ac16:	2220      	movs	r2, #32
 800ac18:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800ac1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac1c:	f043 0302 	orr.w	r3, r3, #2
 800ac20:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ac22:	2304      	movs	r3, #4
 800ac24:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800ac28:	2300      	movs	r3, #0
 800ac2a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800ac2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac30:	b10b      	cbz	r3, 800ac36 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 800ac32:	4620      	mov	r0, r4
 800ac34:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800ac36:	f015 0f08 	tst.w	r5, #8
 800ac3a:	d018      	beq.n	800ac6e <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800ac3c:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800ac40:	d015      	beq.n	800ac6e <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800ac42:	6822      	ldr	r2, [r4, #0]
 800ac44:	6813      	ldr	r3, [r2, #0]
 800ac46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac4a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	2208      	movs	r2, #8
 800ac50:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800ac52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac54:	f043 0304 	orr.w	r3, r3, #4
 800ac58:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800ac5a:	2304      	movs	r3, #4
 800ac5c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800ac60:	2300      	movs	r3, #0
 800ac62:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800ac66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac68:	b10b      	cbz	r3, 800ac6e <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800ac6e:	f015 0f04 	tst.w	r5, #4
 800ac72:	d002      	beq.n	800ac7a <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800ac74:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800ac78:	d120      	bne.n	800acbc <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800ac7a:	f015 0f02 	tst.w	r5, #2
 800ac7e:	d016      	beq.n	800acae <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800ac80:	f416 7f00 	tst.w	r6, #512	; 0x200
 800ac84:	d013      	beq.n	800acae <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800ac86:	6822      	ldr	r2, [r4, #0]
 800ac88:	6813      	ldr	r3, [r2, #0]
 800ac8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac8e:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800ac90:	6823      	ldr	r3, [r4, #0]
 800ac92:	2202      	movs	r2, #2
 800ac94:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ac96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac98:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800aca0:	2300      	movs	r3, #0
 800aca2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800aca6:	6a23      	ldr	r3, [r4, #32]
 800aca8:	b10b      	cbz	r3, 800acae <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 800acaa:	4620      	mov	r0, r4
 800acac:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800acae:	f015 0f10 	tst.w	r5, #16
 800acb2:	d002      	beq.n	800acba <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800acb4:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 800acb8:	d10c      	bne.n	800acd4 <HAL_DMA2D_IRQHandler+0x114>
}
 800acba:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800acbc:	6822      	ldr	r2, [r4, #0]
 800acbe:	6813      	ldr	r3, [r2, #0]
 800acc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acc4:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	2204      	movs	r2, #4
 800acca:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800accc:	4620      	mov	r0, r4
 800acce:	f7ff ff75 	bl	800abbc <HAL_DMA2D_LineEventCallback>
 800acd2:	e7d2      	b.n	800ac7a <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800acd4:	6822      	ldr	r2, [r4, #0]
 800acd6:	6813      	ldr	r3, [r2, #0]
 800acd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acdc:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800acde:	6823      	ldr	r3, [r4, #0]
 800ace0:	2210      	movs	r2, #16
 800ace2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ace4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ace6:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ace8:	2301      	movs	r3, #1
 800acea:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800acee:	2300      	movs	r3, #0
 800acf0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800acf4:	4620      	mov	r0, r4
 800acf6:	f7ff ff62 	bl	800abbe <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800acfa:	e7de      	b.n	800acba <HAL_DMA2D_IRQHandler+0xfa>

0800acfc <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800acfc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d074      	beq.n	800adee <HAL_DMA2D_ConfigLayer+0xf2>
{
 800ad04:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 800ad06:	2301      	movs	r3, #1
 800ad08:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ad12:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800ad16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ad1a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800ad1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ad1e:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800ad22:	6b95      	ldr	r5, [r2, #56]	; 0x38
 800ad24:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800ad28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ad2a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ad2e:	f1a4 0209 	sub.w	r2, r4, #9
 800ad32:	2a01      	cmp	r2, #1
 800ad34:	d921      	bls.n	800ad7a <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800ad36:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800ad3a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ad3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ad40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800ad44:	bb61      	cbnz	r1, 800ada0 <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ad46:	6804      	ldr	r4, [r0, #0]
 800ad48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ad4a:	4a2a      	ldr	r2, [pc, #168]	; (800adf4 <HAL_DMA2D_ConfigLayer+0xf8>)
 800ad4c:	402a      	ands	r2, r5
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800ad52:	6802      	ldr	r2, [r0, #0]
 800ad54:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800ad58:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ad5c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800ad5e:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ad60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad62:	3b09      	subs	r3, #9
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d911      	bls.n	800ad8c <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 800ad74:	4618      	mov	r0, r3
}
 800ad76:	bc30      	pop	{r4, r5}
 800ad78:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800ad7a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800ad7e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ad82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ad84:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	e7db      	b.n	800ad44 <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800ad8c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ad90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad94:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ad96:	6802      	ldr	r2, [r0, #0]
 800ad98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad9c:	6293      	str	r3, [r2, #40]	; 0x28
 800ad9e:	e7e3      	b.n	800ad68 <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800ada0:	2c0b      	cmp	r4, #11
 800ada2:	d01b      	beq.n	800addc <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800ada4:	4d14      	ldr	r5, [pc, #80]	; (800adf8 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ada6:	6804      	ldr	r4, [r0, #0]
 800ada8:	69e2      	ldr	r2, [r4, #28]
 800adaa:	ea22 0205 	bic.w	r2, r2, r5
 800adae:	4313      	orrs	r3, r2
 800adb0:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800adb2:	6802      	ldr	r2, [r0, #0]
 800adb4:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800adb8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800adbc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800adbe:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800adc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc2:	3b09      	subs	r3, #9
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d8cf      	bhi.n	800ad68 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800adc8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800adcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800add0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800add2:	6802      	ldr	r2, [r0, #0]
 800add4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800add8:	6213      	str	r3, [r2, #32]
 800adda:	e7c5      	b.n	800ad68 <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800addc:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800ade0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ade4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ade6:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 800adea:	4d04      	ldr	r5, [pc, #16]	; (800adfc <HAL_DMA2D_ConfigLayer+0x100>)
 800adec:	e7db      	b.n	800ada6 <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 800adee:	2002      	movs	r0, #2
}
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	00ccfff0 	.word	0x00ccfff0
 800adf8:	ff33000f 	.word	0xff33000f
 800adfc:	ff3f000f 	.word	0xff3f000f

0800ae00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae02:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800ae04:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ae06:	e06b      	b.n	800aee0 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ae08:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ae0a:	005e      	lsls	r6, r3, #1
 800ae0c:	2403      	movs	r4, #3
 800ae0e:	40b4      	lsls	r4, r6
 800ae10:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ae14:	68cc      	ldr	r4, [r1, #12]
 800ae16:	40b4      	lsls	r4, r6
 800ae18:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800ae1a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ae1c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ae1e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ae22:	684c      	ldr	r4, [r1, #4]
 800ae24:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800ae28:	409c      	lsls	r4, r3
 800ae2a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800ae2e:	6044      	str	r4, [r0, #4]
 800ae30:	e068      	b.n	800af04 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae32:	08dd      	lsrs	r5, r3, #3
 800ae34:	3508      	adds	r5, #8
 800ae36:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ae3a:	f003 0407 	and.w	r4, r3, #7
 800ae3e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ae42:	240f      	movs	r4, #15
 800ae44:	fa04 f40c 	lsl.w	r4, r4, ip
 800ae48:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ae4c:	690c      	ldr	r4, [r1, #16]
 800ae4e:	fa04 f40c 	lsl.w	r4, r4, ip
 800ae52:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800ae56:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800ae5a:	e06b      	b.n	800af34 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ae5c:	2409      	movs	r4, #9
 800ae5e:	e000      	b.n	800ae62 <HAL_GPIO_Init+0x62>
 800ae60:	2400      	movs	r4, #0
 800ae62:	fa04 f40e 	lsl.w	r4, r4, lr
 800ae66:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ae68:	f10c 0c02 	add.w	ip, ip, #2
 800ae6c:	4d69      	ldr	r5, [pc, #420]	; (800b014 <HAL_GPIO_Init+0x214>)
 800ae6e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ae72:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800ae76:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800ae78:	43d4      	mvns	r4, r2
 800ae7a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ae7e:	684f      	ldr	r7, [r1, #4]
 800ae80:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800ae84:	d001      	beq.n	800ae8a <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800ae86:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800ae8a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800ae8e:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800ae90:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800ae92:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ae96:	684f      	ldr	r7, [r1, #4]
 800ae98:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800ae9c:	d001      	beq.n	800aea2 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800ae9e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800aea2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800aea6:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800aea8:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 800aeac:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aeb0:	684f      	ldr	r7, [r1, #4]
 800aeb2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800aeb6:	d001      	beq.n	800aebc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800aeb8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800aebc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800aec0:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800aec4:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 800aec8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aeca:	684e      	ldr	r6, [r1, #4]
 800aecc:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800aed0:	d001      	beq.n	800aed6 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800aed2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800aed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aeda:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 800aede:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aee0:	680a      	ldr	r2, [r1, #0]
 800aee2:	fa32 f403 	lsrs.w	r4, r2, r3
 800aee6:	f000 8092 	beq.w	800b00e <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aeea:	f04f 0c01 	mov.w	ip, #1
 800aeee:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 800aef2:	ea1c 0202 	ands.w	r2, ip, r2
 800aef6:	d0f2      	beq.n	800aede <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aef8:	684c      	ldr	r4, [r1, #4]
 800aefa:	f004 0403 	and.w	r4, r4, #3
 800aefe:	3c01      	subs	r4, #1
 800af00:	2c01      	cmp	r4, #1
 800af02:	d981      	bls.n	800ae08 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af04:	684c      	ldr	r4, [r1, #4]
 800af06:	f004 0403 	and.w	r4, r4, #3
 800af0a:	2c03      	cmp	r4, #3
 800af0c:	d00c      	beq.n	800af28 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 800af0e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af10:	005d      	lsls	r5, r3, #1
 800af12:	f04f 0c03 	mov.w	ip, #3
 800af16:	fa0c fc05 	lsl.w	ip, ip, r5
 800af1a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af1e:	688c      	ldr	r4, [r1, #8]
 800af20:	40ac      	lsls	r4, r5
 800af22:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 800af26:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af28:	684c      	ldr	r4, [r1, #4]
 800af2a:	f004 0403 	and.w	r4, r4, #3
 800af2e:	2c02      	cmp	r4, #2
 800af30:	f43f af7f 	beq.w	800ae32 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800af34:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800af36:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800af3a:	f04f 0c03 	mov.w	ip, #3
 800af3e:	fa0c fc0e 	lsl.w	ip, ip, lr
 800af42:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800af46:	684c      	ldr	r4, [r1, #4]
 800af48:	f004 0403 	and.w	r4, r4, #3
 800af4c:	fa04 f40e 	lsl.w	r4, r4, lr
 800af50:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800af54:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800af56:	684c      	ldr	r4, [r1, #4]
 800af58:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800af5c:	d0bf      	beq.n	800aede <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af5e:	4c2e      	ldr	r4, [pc, #184]	; (800b018 <HAL_GPIO_Init+0x218>)
 800af60:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 800af64:	f045 0502 	orr.w	r5, r5, #2
 800af68:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 800af6c:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 800af70:	f004 0402 	and.w	r4, r4, #2
 800af74:	9401      	str	r4, [sp, #4]
 800af76:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800af78:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800af7c:	f10c 0502 	add.w	r5, ip, #2
 800af80:	4c24      	ldr	r4, [pc, #144]	; (800b014 <HAL_GPIO_Init+0x214>)
 800af82:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800af86:	f003 0403 	and.w	r4, r3, #3
 800af8a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800af8e:	240f      	movs	r4, #15
 800af90:	fa04 f40e 	lsl.w	r4, r4, lr
 800af94:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800af98:	4c20      	ldr	r4, [pc, #128]	; (800b01c <HAL_GPIO_Init+0x21c>)
 800af9a:	42a0      	cmp	r0, r4
 800af9c:	f43f af60 	beq.w	800ae60 <HAL_GPIO_Init+0x60>
 800afa0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afa4:	42a0      	cmp	r0, r4
 800afa6:	d022      	beq.n	800afee <HAL_GPIO_Init+0x1ee>
 800afa8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afac:	42a0      	cmp	r0, r4
 800afae:	d020      	beq.n	800aff2 <HAL_GPIO_Init+0x1f2>
 800afb0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afb4:	42a0      	cmp	r0, r4
 800afb6:	d01e      	beq.n	800aff6 <HAL_GPIO_Init+0x1f6>
 800afb8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afbc:	42a0      	cmp	r0, r4
 800afbe:	d01c      	beq.n	800affa <HAL_GPIO_Init+0x1fa>
 800afc0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afc4:	42a0      	cmp	r0, r4
 800afc6:	d01a      	beq.n	800affe <HAL_GPIO_Init+0x1fe>
 800afc8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afcc:	42a0      	cmp	r0, r4
 800afce:	d018      	beq.n	800b002 <HAL_GPIO_Init+0x202>
 800afd0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afd4:	42a0      	cmp	r0, r4
 800afd6:	d016      	beq.n	800b006 <HAL_GPIO_Init+0x206>
 800afd8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afdc:	42a0      	cmp	r0, r4
 800afde:	d014      	beq.n	800b00a <HAL_GPIO_Init+0x20a>
 800afe0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afe4:	42a0      	cmp	r0, r4
 800afe6:	f43f af39 	beq.w	800ae5c <HAL_GPIO_Init+0x5c>
 800afea:	240a      	movs	r4, #10
 800afec:	e739      	b.n	800ae62 <HAL_GPIO_Init+0x62>
 800afee:	2401      	movs	r4, #1
 800aff0:	e737      	b.n	800ae62 <HAL_GPIO_Init+0x62>
 800aff2:	2402      	movs	r4, #2
 800aff4:	e735      	b.n	800ae62 <HAL_GPIO_Init+0x62>
 800aff6:	2403      	movs	r4, #3
 800aff8:	e733      	b.n	800ae62 <HAL_GPIO_Init+0x62>
 800affa:	2404      	movs	r4, #4
 800affc:	e731      	b.n	800ae62 <HAL_GPIO_Init+0x62>
 800affe:	2405      	movs	r4, #5
 800b000:	e72f      	b.n	800ae62 <HAL_GPIO_Init+0x62>
 800b002:	2406      	movs	r4, #6
 800b004:	e72d      	b.n	800ae62 <HAL_GPIO_Init+0x62>
 800b006:	2407      	movs	r4, #7
 800b008:	e72b      	b.n	800ae62 <HAL_GPIO_Init+0x62>
 800b00a:	2408      	movs	r4, #8
 800b00c:	e729      	b.n	800ae62 <HAL_GPIO_Init+0x62>
  }
}
 800b00e:	b003      	add	sp, #12
 800b010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b012:	bf00      	nop
 800b014:	58000400 	.word	0x58000400
 800b018:	58024400 	.word	0x58024400
 800b01c:	58020000 	.word	0x58020000

0800b020 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 800b020:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800b022:	fa31 f203 	lsrs.w	r2, r1, r3
 800b026:	f000 809d 	beq.w	800b164 <HAL_GPIO_DeInit+0x144>
{
 800b02a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b02c:	e02e      	b.n	800b08c <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b02e:	2509      	movs	r5, #9
 800b030:	e000      	b.n	800b034 <HAL_GPIO_DeInit+0x14>
 800b032:	2500      	movs	r5, #0
 800b034:	fa05 fc0c 	lsl.w	ip, r5, ip
 800b038:	45a4      	cmp	ip, r4
 800b03a:	d072      	beq.n	800b122 <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b03c:	6804      	ldr	r4, [r0, #0]
 800b03e:	005d      	lsls	r5, r3, #1
 800b040:	f04f 0c03 	mov.w	ip, #3
 800b044:	fa0c fc05 	lsl.w	ip, ip, r5
 800b048:	ea44 040c 	orr.w	r4, r4, ip
 800b04c:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b04e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800b052:	f10e 0e08 	add.w	lr, lr, #8
 800b056:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800b05a:	f003 0507 	and.w	r5, r3, #7
 800b05e:	00ae      	lsls	r6, r5, #2
 800b060:	250f      	movs	r5, #15
 800b062:	40b5      	lsls	r5, r6
 800b064:	ea24 0405 	bic.w	r4, r4, r5
 800b068:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b06c:	68c4      	ldr	r4, [r0, #12]
 800b06e:	ea24 040c 	bic.w	r4, r4, ip
 800b072:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b074:	6844      	ldr	r4, [r0, #4]
 800b076:	ea24 0202 	bic.w	r2, r4, r2
 800b07a:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b07c:	6882      	ldr	r2, [r0, #8]
 800b07e:	ea22 020c 	bic.w	r2, r2, ip
 800b082:	6082      	str	r2, [r0, #8]
    }

    position++;
 800b084:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800b086:	fa31 f203 	lsrs.w	r2, r1, r3
 800b08a:	d06a      	beq.n	800b162 <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b08c:	2201      	movs	r2, #1
 800b08e:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800b090:	ea12 0e01 	ands.w	lr, r2, r1
 800b094:	d0f6      	beq.n	800b084 <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b096:	089e      	lsrs	r6, r3, #2
 800b098:	1cb5      	adds	r5, r6, #2
 800b09a:	4c33      	ldr	r4, [pc, #204]	; (800b168 <HAL_GPIO_DeInit+0x148>)
 800b09c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b0a0:	f003 0c03 	and.w	ip, r3, #3
 800b0a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800b0a8:	250f      	movs	r5, #15
 800b0aa:	fa05 f70c 	lsl.w	r7, r5, ip
 800b0ae:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b0b0:	4d2e      	ldr	r5, [pc, #184]	; (800b16c <HAL_GPIO_DeInit+0x14c>)
 800b0b2:	42a8      	cmp	r0, r5
 800b0b4:	d0bd      	beq.n	800b032 <HAL_GPIO_DeInit+0x12>
 800b0b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b0ba:	42a8      	cmp	r0, r5
 800b0bc:	d021      	beq.n	800b102 <HAL_GPIO_DeInit+0xe2>
 800b0be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b0c2:	42a8      	cmp	r0, r5
 800b0c4:	d01f      	beq.n	800b106 <HAL_GPIO_DeInit+0xe6>
 800b0c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b0ca:	42a8      	cmp	r0, r5
 800b0cc:	d01d      	beq.n	800b10a <HAL_GPIO_DeInit+0xea>
 800b0ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b0d2:	42a8      	cmp	r0, r5
 800b0d4:	d01b      	beq.n	800b10e <HAL_GPIO_DeInit+0xee>
 800b0d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b0da:	42a8      	cmp	r0, r5
 800b0dc:	d019      	beq.n	800b112 <HAL_GPIO_DeInit+0xf2>
 800b0de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b0e2:	42a8      	cmp	r0, r5
 800b0e4:	d017      	beq.n	800b116 <HAL_GPIO_DeInit+0xf6>
 800b0e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b0ea:	42a8      	cmp	r0, r5
 800b0ec:	d015      	beq.n	800b11a <HAL_GPIO_DeInit+0xfa>
 800b0ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b0f2:	42a8      	cmp	r0, r5
 800b0f4:	d013      	beq.n	800b11e <HAL_GPIO_DeInit+0xfe>
 800b0f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b0fa:	42a8      	cmp	r0, r5
 800b0fc:	d097      	beq.n	800b02e <HAL_GPIO_DeInit+0xe>
 800b0fe:	250a      	movs	r5, #10
 800b100:	e798      	b.n	800b034 <HAL_GPIO_DeInit+0x14>
 800b102:	2501      	movs	r5, #1
 800b104:	e796      	b.n	800b034 <HAL_GPIO_DeInit+0x14>
 800b106:	2502      	movs	r5, #2
 800b108:	e794      	b.n	800b034 <HAL_GPIO_DeInit+0x14>
 800b10a:	2503      	movs	r5, #3
 800b10c:	e792      	b.n	800b034 <HAL_GPIO_DeInit+0x14>
 800b10e:	2504      	movs	r5, #4
 800b110:	e790      	b.n	800b034 <HAL_GPIO_DeInit+0x14>
 800b112:	2505      	movs	r5, #5
 800b114:	e78e      	b.n	800b034 <HAL_GPIO_DeInit+0x14>
 800b116:	2506      	movs	r5, #6
 800b118:	e78c      	b.n	800b034 <HAL_GPIO_DeInit+0x14>
 800b11a:	2507      	movs	r5, #7
 800b11c:	e78a      	b.n	800b034 <HAL_GPIO_DeInit+0x14>
 800b11e:	2508      	movs	r5, #8
 800b120:	e788      	b.n	800b034 <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b122:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800b126:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800b12a:	ea25 050e 	bic.w	r5, r5, lr
 800b12e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800b132:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800b136:	ea25 050e 	bic.w	r5, r5, lr
 800b13a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800b13e:	6865      	ldr	r5, [r4, #4]
 800b140:	ea25 050e 	bic.w	r5, r5, lr
 800b144:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800b146:	6825      	ldr	r5, [r4, #0]
 800b148:	ea25 050e 	bic.w	r5, r5, lr
 800b14c:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b14e:	f8df c018 	ldr.w	ip, [pc, #24]	; 800b168 <HAL_GPIO_DeInit+0x148>
 800b152:	1cb4      	adds	r4, r6, #2
 800b154:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 800b158:	ea25 0507 	bic.w	r5, r5, r7
 800b15c:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 800b160:	e76c      	b.n	800b03c <HAL_GPIO_DeInit+0x1c>
  }
}
 800b162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	58000400 	.word	0x58000400
 800b16c:	58020000 	.word	0x58020000

0800b170 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b170:	6903      	ldr	r3, [r0, #16]
 800b172:	4219      	tst	r1, r3
 800b174:	d001      	beq.n	800b17a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800b176:	2001      	movs	r0, #1
 800b178:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b17a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800b17c:	4770      	bx	lr

0800b17e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b17e:	b10a      	cbz	r2, 800b184 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b180:	6181      	str	r1, [r0, #24]
 800b182:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b184:	0409      	lsls	r1, r1, #16
 800b186:	6181      	str	r1, [r0, #24]
  }
}
 800b188:	4770      	bx	lr

0800b18a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b18a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b18c:	ea01 0203 	and.w	r2, r1, r3
 800b190:	ea21 0103 	bic.w	r1, r1, r3
 800b194:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b198:	6181      	str	r1, [r0, #24]
}
 800b19a:	4770      	bx	lr

0800b19c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b19c:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b19e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a6:	4203      	tst	r3, r0
 800b1a8:	d100      	bne.n	800b1ac <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 800b1aa:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b1ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b1b0:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b1b4:	f7f7 fdf6 	bl	8002da4 <HAL_GPIO_EXTI_Callback>
}
 800b1b8:	e7f7      	b.n	800b1aa <HAL_GPIO_EXTI_IRQHandler+0xe>

0800b1ba <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b1ba:	6803      	ldr	r3, [r0, #0]
 800b1bc:	699a      	ldr	r2, [r3, #24]
 800b1be:	f012 0f02 	tst.w	r2, #2
 800b1c2:	d001      	beq.n	800b1c8 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b1c8:	6803      	ldr	r3, [r0, #0]
 800b1ca:	699a      	ldr	r2, [r3, #24]
 800b1cc:	f012 0f01 	tst.w	r2, #1
 800b1d0:	d103      	bne.n	800b1da <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b1d2:	699a      	ldr	r2, [r3, #24]
 800b1d4:	f042 0201 	orr.w	r2, r2, #1
 800b1d8:	619a      	str	r2, [r3, #24]
  }
}
 800b1da:	4770      	bx	lr

0800b1dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b1dc:	b410      	push	{r4}
 800b1de:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1e0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b1e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b1e8:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1ea:	4321      	orrs	r1, r4
 800b1ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1f0:	6802      	ldr	r2, [r0, #0]
 800b1f2:	6853      	ldr	r3, [r2, #4]
 800b1f4:	0d64      	lsrs	r4, r4, #21
 800b1f6:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800b1fa:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800b1fe:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800b202:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800b206:	f044 0403 	orr.w	r4, r4, #3
 800b20a:	ea23 0404 	bic.w	r4, r3, r4
 800b20e:	4321      	orrs	r1, r4
 800b210:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b212:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <I2C_IsErrorOccurred>:
{
 800b218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b21c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800b21e:	6803      	ldr	r3, [r0, #0]
 800b220:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b222:	f017 0710 	ands.w	r7, r7, #16
 800b226:	d04e      	beq.n	800b2c6 <I2C_IsErrorOccurred+0xae>
 800b228:	460e      	mov	r6, r1
 800b22a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b22c:	2210      	movs	r2, #16
 800b22e:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800b230:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b232:	6823      	ldr	r3, [r4, #0]
 800b234:	6998      	ldr	r0, [r3, #24]
 800b236:	f010 0f20 	tst.w	r0, #32
 800b23a:	d13d      	bne.n	800b2b8 <I2C_IsErrorOccurred+0xa0>
 800b23c:	2d00      	cmp	r5, #0
 800b23e:	d13b      	bne.n	800b2b8 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 800b240:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b244:	d0f5      	beq.n	800b232 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b246:	f7ff f9f7 	bl	800a638 <HAL_GetTick>
 800b24a:	eba0 0008 	sub.w	r0, r0, r8
 800b24e:	42b0      	cmp	r0, r6
 800b250:	d801      	bhi.n	800b256 <I2C_IsErrorOccurred+0x3e>
 800b252:	2e00      	cmp	r6, #0
 800b254:	d1ed      	bne.n	800b232 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b256:	6821      	ldr	r1, [r4, #0]
 800b258:	684a      	ldr	r2, [r1, #4]
 800b25a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800b25e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b262:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b264:	6988      	ldr	r0, [r1, #24]
 800b266:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800b26a:	d004      	beq.n	800b276 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 800b26c:	3b20      	subs	r3, #32
 800b26e:	bf18      	it	ne
 800b270:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 800b272:	b902      	cbnz	r2, 800b276 <I2C_IsErrorOccurred+0x5e>
 800b274:	b9c3      	cbnz	r3, 800b2a8 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	f013 0f20 	tst.w	r3, #32
 800b27e:	d1d8      	bne.n	800b232 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b280:	f7ff f9da 	bl	800a638 <HAL_GetTick>
 800b284:	eba0 0008 	sub.w	r0, r0, r8
 800b288:	2819      	cmp	r0, #25
 800b28a:	d9f4      	bls.n	800b276 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b28c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b28e:	f043 0320 	orr.w	r3, r3, #32
 800b292:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800b294:	2320      	movs	r3, #32
 800b296:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800b29a:	2300      	movs	r3, #0
 800b29c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 800b2a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 800b2a4:	2501      	movs	r5, #1
 800b2a6:	e7e6      	b.n	800b276 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b2a8:	684b      	ldr	r3, [r1, #4]
 800b2aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b2ae:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800b2b0:	f7ff f9c2 	bl	800a638 <HAL_GetTick>
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	e7de      	b.n	800b276 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 800b2b8:	2d00      	cmp	r5, #0
 800b2ba:	d140      	bne.n	800b33e <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2bc:	2220      	movs	r2, #32
 800b2be:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800b2c0:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800b2c2:	2501      	movs	r5, #1
 800b2c4:	e000      	b.n	800b2c8 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 800b2c6:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 800b2c8:	6822      	ldr	r2, [r4, #0]
 800b2ca:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b2cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b2d0:	d005      	beq.n	800b2de <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 800b2d2:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b2d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2da:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800b2dc:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b2de:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b2e2:	d006      	beq.n	800b2f2 <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 800b2e4:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b2e8:	6822      	ldr	r2, [r4, #0]
 800b2ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b2ee:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800b2f0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b2f2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b2f6:	d024      	beq.n	800b342 <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 800b2f8:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b302:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800b304:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800b306:	4620      	mov	r0, r4
 800b308:	f7ff ff57 	bl	800b1ba <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800b30c:	6822      	ldr	r2, [r4, #0]
 800b30e:	6853      	ldr	r3, [r2, #4]
 800b310:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800b314:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b318:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b31c:	f023 0301 	bic.w	r3, r3, #1
 800b320:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800b322:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b324:	431f      	orrs	r7, r3
 800b326:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b328:	2320      	movs	r3, #32
 800b32a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b32e:	2300      	movs	r3, #0
 800b330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b334:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b338:	4628      	mov	r0, r5
 800b33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800b33e:	2704      	movs	r7, #4
 800b340:	e7c2      	b.n	800b2c8 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 800b342:	2d00      	cmp	r5, #0
 800b344:	d0f8      	beq.n	800b338 <I2C_IsErrorOccurred+0x120>
 800b346:	e7de      	b.n	800b306 <I2C_IsErrorOccurred+0xee>

0800b348 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	4604      	mov	r4, r0
 800b34c:	460d      	mov	r5, r1
 800b34e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	f013 0f02 	tst.w	r3, #2
 800b358:	d11d      	bne.n	800b396 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b35a:	4632      	mov	r2, r6
 800b35c:	4629      	mov	r1, r5
 800b35e:	4620      	mov	r0, r4
 800b360:	f7ff ff5a 	bl	800b218 <I2C_IsErrorOccurred>
 800b364:	b9c8      	cbnz	r0, 800b39a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800b366:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b36a:	d0f1      	beq.n	800b350 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b36c:	f7ff f964 	bl	800a638 <HAL_GetTick>
 800b370:	1b80      	subs	r0, r0, r6
 800b372:	42a8      	cmp	r0, r5
 800b374:	d801      	bhi.n	800b37a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800b376:	2d00      	cmp	r5, #0
 800b378:	d1ea      	bne.n	800b350 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b37a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b37c:	f043 0320 	orr.w	r3, r3, #32
 800b380:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b382:	2320      	movs	r3, #32
 800b384:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b388:	2300      	movs	r3, #0
 800b38a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b38e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800b392:	2001      	movs	r0, #1
 800b394:	e000      	b.n	800b398 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800b396:	2000      	movs	r0, #0
}
 800b398:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800b39a:	2001      	movs	r0, #1
 800b39c:	e7fc      	b.n	800b398 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800b39e <I2C_WaitOnFlagUntilTimeout>:
{
 800b39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	4688      	mov	r8, r1
 800b3a6:	4617      	mov	r7, r2
 800b3a8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3aa:	6834      	ldr	r4, [r6, #0]
 800b3ac:	69a4      	ldr	r4, [r4, #24]
 800b3ae:	ea38 0304 	bics.w	r3, r8, r4
 800b3b2:	bf0c      	ite	eq
 800b3b4:	f04f 0c01 	moveq.w	ip, #1
 800b3b8:	f04f 0c00 	movne.w	ip, #0
 800b3bc:	45bc      	cmp	ip, r7
 800b3be:	d118      	bne.n	800b3f2 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 800b3c0:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b3c4:	d0f1      	beq.n	800b3aa <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3c6:	f7ff f937 	bl	800a638 <HAL_GetTick>
 800b3ca:	9b06      	ldr	r3, [sp, #24]
 800b3cc:	1ac0      	subs	r0, r0, r3
 800b3ce:	42a8      	cmp	r0, r5
 800b3d0:	d801      	bhi.n	800b3d6 <I2C_WaitOnFlagUntilTimeout+0x38>
 800b3d2:	2d00      	cmp	r5, #0
 800b3d4:	d1e9      	bne.n	800b3aa <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3d6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800b3d8:	f043 0320 	orr.w	r3, r3, #32
 800b3dc:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b3de:	2320      	movs	r3, #32
 800b3e0:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b3ea:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800b3ee:	2001      	movs	r0, #1
 800b3f0:	e000      	b.n	800b3f4 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 800b3f2:	2000      	movs	r0, #0
}
 800b3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3f8 <I2C_RequestMemoryWrite>:
{
 800b3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	4604      	mov	r4, r0
 800b400:	4690      	mov	r8, r2
 800b402:	461d      	mov	r5, r3
 800b404:	9e08      	ldr	r6, [sp, #32]
 800b406:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b408:	4b19      	ldr	r3, [pc, #100]	; (800b470 <I2C_RequestMemoryWrite+0x78>)
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b410:	b2ea      	uxtb	r2, r5
 800b412:	f7ff fee3 	bl	800b1dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b416:	463a      	mov	r2, r7
 800b418:	4631      	mov	r1, r6
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7ff ff94 	bl	800b348 <I2C_WaitOnTXISFlagUntilTimeout>
 800b420:	b9f8      	cbnz	r0, 800b462 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b422:	2d01      	cmp	r5, #1
 800b424:	d10e      	bne.n	800b444 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	fa5f f288 	uxtb.w	r2, r8
 800b42c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b42e:	9700      	str	r7, [sp, #0]
 800b430:	4633      	mov	r3, r6
 800b432:	2200      	movs	r2, #0
 800b434:	2180      	movs	r1, #128	; 0x80
 800b436:	4620      	mov	r0, r4
 800b438:	f7ff ffb1 	bl	800b39e <I2C_WaitOnFlagUntilTimeout>
 800b43c:	b9a8      	cbnz	r0, 800b46a <I2C_RequestMemoryWrite+0x72>
}
 800b43e:	b002      	add	sp, #8
 800b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800b44a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b44c:	463a      	mov	r2, r7
 800b44e:	4631      	mov	r1, r6
 800b450:	4620      	mov	r0, r4
 800b452:	f7ff ff79 	bl	800b348 <I2C_WaitOnTXISFlagUntilTimeout>
 800b456:	b930      	cbnz	r0, 800b466 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	fa5f f288 	uxtb.w	r2, r8
 800b45e:	629a      	str	r2, [r3, #40]	; 0x28
 800b460:	e7e5      	b.n	800b42e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800b462:	2001      	movs	r0, #1
 800b464:	e7eb      	b.n	800b43e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800b466:	2001      	movs	r0, #1
 800b468:	e7e9      	b.n	800b43e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800b46a:	2001      	movs	r0, #1
 800b46c:	e7e7      	b.n	800b43e <I2C_RequestMemoryWrite+0x46>
 800b46e:	bf00      	nop
 800b470:	80002000 	.word	0x80002000

0800b474 <I2C_RequestMemoryRead>:
{
 800b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b478:	b082      	sub	sp, #8
 800b47a:	4604      	mov	r4, r0
 800b47c:	4690      	mov	r8, r2
 800b47e:	461d      	mov	r5, r3
 800b480:	9e08      	ldr	r6, [sp, #32]
 800b482:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b484:	4b18      	ldr	r3, [pc, #96]	; (800b4e8 <I2C_RequestMemoryRead+0x74>)
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	2300      	movs	r3, #0
 800b48a:	b2ea      	uxtb	r2, r5
 800b48c:	f7ff fea6 	bl	800b1dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b490:	463a      	mov	r2, r7
 800b492:	4631      	mov	r1, r6
 800b494:	4620      	mov	r0, r4
 800b496:	f7ff ff57 	bl	800b348 <I2C_WaitOnTXISFlagUntilTimeout>
 800b49a:	b9f8      	cbnz	r0, 800b4dc <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b49c:	2d01      	cmp	r5, #1
 800b49e:	d10e      	bne.n	800b4be <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	fa5f f288 	uxtb.w	r2, r8
 800b4a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b4a8:	9700      	str	r7, [sp, #0]
 800b4aa:	4633      	mov	r3, r6
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	2140      	movs	r1, #64	; 0x40
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f7ff ff74 	bl	800b39e <I2C_WaitOnFlagUntilTimeout>
 800b4b6:	b9a8      	cbnz	r0, 800b4e4 <I2C_RequestMemoryRead+0x70>
}
 800b4b8:	b002      	add	sp, #8
 800b4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800b4c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4c6:	463a      	mov	r2, r7
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f7ff ff3c 	bl	800b348 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4d0:	b930      	cbnz	r0, 800b4e0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	fa5f f288 	uxtb.w	r2, r8
 800b4d8:	629a      	str	r2, [r3, #40]	; 0x28
 800b4da:	e7e5      	b.n	800b4a8 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 800b4dc:	2001      	movs	r0, #1
 800b4de:	e7eb      	b.n	800b4b8 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	e7e9      	b.n	800b4b8 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800b4e4:	2001      	movs	r0, #1
 800b4e6:	e7e7      	b.n	800b4b8 <I2C_RequestMemoryRead+0x44>
 800b4e8:	80002000 	.word	0x80002000

0800b4ec <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	f013 0f20 	tst.w	r3, #32
 800b4fc:	d11a      	bne.n	800b534 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4fe:	4632      	mov	r2, r6
 800b500:	4621      	mov	r1, r4
 800b502:	4628      	mov	r0, r5
 800b504:	f7ff fe88 	bl	800b218 <I2C_IsErrorOccurred>
 800b508:	b9b0      	cbnz	r0, 800b538 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b50a:	f7ff f895 	bl	800a638 <HAL_GetTick>
 800b50e:	1b80      	subs	r0, r0, r6
 800b510:	42a0      	cmp	r0, r4
 800b512:	d801      	bhi.n	800b518 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800b514:	2c00      	cmp	r4, #0
 800b516:	d1ed      	bne.n	800b4f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b518:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b51a:	f043 0320 	orr.w	r3, r3, #32
 800b51e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b520:	2320      	movs	r3, #32
 800b522:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b526:	2300      	movs	r3, #0
 800b528:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b52c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800b530:	2001      	movs	r0, #1
}
 800b532:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800b534:	2000      	movs	r0, #0
 800b536:	e7fc      	b.n	800b532 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800b538:	2001      	movs	r0, #1
 800b53a:	e7fa      	b.n	800b532 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800b53c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d057      	beq.n	800b5f0 <HAL_I2C_Init+0xb4>
{
 800b540:	b510      	push	{r4, lr}
 800b542:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b544:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d041      	beq.n	800b5d0 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b54c:	2324      	movs	r3, #36	; 0x24
 800b54e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b552:	6822      	ldr	r2, [r4, #0]
 800b554:	6813      	ldr	r3, [r2, #0]
 800b556:	f023 0301 	bic.w	r3, r3, #1
 800b55a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b55c:	6863      	ldr	r3, [r4, #4]
 800b55e:	6822      	ldr	r2, [r4, #0]
 800b560:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800b564:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b566:	6822      	ldr	r2, [r4, #0]
 800b568:	6893      	ldr	r3, [r2, #8]
 800b56a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b56e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b570:	68e3      	ldr	r3, [r4, #12]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d031      	beq.n	800b5da <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b576:	68a3      	ldr	r3, [r4, #8]
 800b578:	6822      	ldr	r2, [r4, #0]
 800b57a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800b57e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b580:	68e3      	ldr	r3, [r4, #12]
 800b582:	2b02      	cmp	r3, #2
 800b584:	d02f      	beq.n	800b5e6 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b586:	6822      	ldr	r2, [r4, #0]
 800b588:	6851      	ldr	r1, [r2, #4]
 800b58a:	4b1a      	ldr	r3, [pc, #104]	; (800b5f4 <HAL_I2C_Init+0xb8>)
 800b58c:	430b      	orrs	r3, r1
 800b58e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b590:	6822      	ldr	r2, [r4, #0]
 800b592:	68d3      	ldr	r3, [r2, #12]
 800b594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b598:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b59a:	6923      	ldr	r3, [r4, #16]
 800b59c:	6962      	ldr	r2, [r4, #20]
 800b59e:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b5a0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b5a2:	6822      	ldr	r2, [r4, #0]
 800b5a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b5a8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b5aa:	69e3      	ldr	r3, [r4, #28]
 800b5ac:	6a21      	ldr	r1, [r4, #32]
 800b5ae:	6822      	ldr	r2, [r4, #0]
 800b5b0:	430b      	orrs	r3, r1
 800b5b2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b5b4:	6822      	ldr	r2, [r4, #0]
 800b5b6:	6813      	ldr	r3, [r2, #0]
 800b5b8:	f043 0301 	orr.w	r3, r3, #1
 800b5bc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5be:	2000      	movs	r0, #0
 800b5c0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b5c2:	2320      	movs	r3, #32
 800b5c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5c8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ca:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800b5ce:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800b5d0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800b5d4:	f7f7 fc48 	bl	8002e68 <HAL_I2C_MspInit>
 800b5d8:	e7b8      	b.n	800b54c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b5da:	68a3      	ldr	r3, [r4, #8]
 800b5dc:	6822      	ldr	r2, [r4, #0]
 800b5de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5e2:	6093      	str	r3, [r2, #8]
 800b5e4:	e7cc      	b.n	800b580 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5ec:	605a      	str	r2, [r3, #4]
 800b5ee:	e7ca      	b.n	800b586 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800b5f0:	2001      	movs	r0, #1
}
 800b5f2:	4770      	bx	lr
 800b5f4:	02008000 	.word	0x02008000

0800b5f8 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800b5f8:	b1a8      	cbz	r0, 800b626 <HAL_I2C_DeInit+0x2e>
{
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b5fe:	2324      	movs	r3, #36	; 0x24
 800b600:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b604:	6802      	ldr	r2, [r0, #0]
 800b606:	6813      	ldr	r3, [r2, #0]
 800b608:	f023 0301 	bic.w	r3, r3, #1
 800b60c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800b60e:	f7f7 fc77 	bl	8002f00 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b612:	2000      	movs	r0, #0
 800b614:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b616:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b61a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b61c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 800b620:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800b624:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b626:	2001      	movs	r0, #1
}
 800b628:	4770      	bx	lr

0800b62a <HAL_I2C_Mem_Write>:
{
 800b62a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62e:	b083      	sub	sp, #12
 800b630:	460d      	mov	r5, r1
 800b632:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b636:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b638:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800b63c:	b2c9      	uxtb	r1, r1
 800b63e:	2920      	cmp	r1, #32
 800b640:	f040 80bc 	bne.w	800b7bc <HAL_I2C_Mem_Write+0x192>
 800b644:	4604      	mov	r4, r0
 800b646:	4690      	mov	r8, r2
 800b648:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800b64a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b64c:	f1ba 0f00 	cmp.w	sl, #0
 800b650:	bf18      	it	ne
 800b652:	2b00      	cmpne	r3, #0
 800b654:	d016      	beq.n	800b684 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 800b656:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	f000 80b2 	beq.w	800b7c4 <HAL_I2C_Mem_Write+0x19a>
 800b660:	f04f 0b01 	mov.w	fp, #1
 800b664:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b668:	f7fe ffe6 	bl	800a638 <HAL_GetTick>
 800b66c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b66e:	9000      	str	r0, [sp, #0]
 800b670:	2319      	movs	r3, #25
 800b672:	465a      	mov	r2, fp
 800b674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b678:	4620      	mov	r0, r4
 800b67a:	f7ff fe90 	bl	800b39e <I2C_WaitOnFlagUntilTimeout>
 800b67e:	b130      	cbz	r0, 800b68e <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800b680:	2001      	movs	r0, #1
 800b682:	e09c      	b.n	800b7be <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b684:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b688:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800b68a:	2001      	movs	r0, #1
 800b68c:	e097      	b.n	800b7be <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b68e:	2321      	movs	r3, #33	; 0x21
 800b690:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b694:	2340      	movs	r3, #64	; 0x40
 800b696:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b69a:	2300      	movs	r3, #0
 800b69c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800b69e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6a0:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800b6a2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b6a6:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b6a8:	9601      	str	r6, [sp, #4]
 800b6aa:	9700      	str	r7, [sp, #0]
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	4642      	mov	r2, r8
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f7ff fea0 	bl	800b3f8 <I2C_RequestMemoryWrite>
 800b6b8:	b970      	cbnz	r0, 800b6d8 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2bff      	cmp	r3, #255	; 0xff
 800b6c0:	d90f      	bls.n	800b6e2 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6c2:	22ff      	movs	r2, #255	; 0xff
 800b6c4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f7ff fd83 	bl	800b1dc <I2C_TransferConfig>
 800b6d6:	e021      	b.n	800b71c <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800b6de:	4658      	mov	r0, fp
 800b6e0:	e06d      	b.n	800b7be <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800b6e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b6e4:	b292      	uxth	r2, r2
 800b6e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6f0:	b2d2      	uxtb	r2, r2
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f7ff fd71 	bl	800b1dc <I2C_TransferConfig>
 800b6fa:	e00f      	b.n	800b71c <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800b6fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b6fe:	b292      	uxth	r2, r2
 800b700:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b702:	2300      	movs	r3, #0
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b70a:	b2d2      	uxtb	r2, r2
 800b70c:	4629      	mov	r1, r5
 800b70e:	4620      	mov	r0, r4
 800b710:	f7ff fd64 	bl	800b1dc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b714:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b716:	b29b      	uxth	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d033      	beq.n	800b784 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b71c:	4632      	mov	r2, r6
 800b71e:	4639      	mov	r1, r7
 800b720:	4620      	mov	r0, r4
 800b722:	f7ff fe11 	bl	800b348 <I2C_WaitOnTXISFlagUntilTimeout>
 800b726:	2800      	cmp	r0, #0
 800b728:	d14e      	bne.n	800b7c8 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b72a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	7812      	ldrb	r2, [r2, #0]
 800b730:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b734:	3301      	adds	r3, #1
 800b736:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b738:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	3b01      	subs	r3, #1
 800b73e:	b29b      	uxth	r3, r3
 800b740:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b742:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b744:	3b01      	subs	r3, #1
 800b746:	b29b      	uxth	r3, r3
 800b748:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b74a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b74c:	b292      	uxth	r2, r2
 800b74e:	2a00      	cmp	r2, #0
 800b750:	d0e0      	beq.n	800b714 <HAL_I2C_Mem_Write+0xea>
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1de      	bne.n	800b714 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b756:	9600      	str	r6, [sp, #0]
 800b758:	463b      	mov	r3, r7
 800b75a:	2200      	movs	r2, #0
 800b75c:	2180      	movs	r1, #128	; 0x80
 800b75e:	4620      	mov	r0, r4
 800b760:	f7ff fe1d 	bl	800b39e <I2C_WaitOnFlagUntilTimeout>
 800b764:	bb90      	cbnz	r0, 800b7cc <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b766:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b768:	b29b      	uxth	r3, r3
 800b76a:	2bff      	cmp	r3, #255	; 0xff
 800b76c:	d9c6      	bls.n	800b6fc <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b76e:	22ff      	movs	r2, #255	; 0xff
 800b770:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b772:	2300      	movs	r3, #0
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b77a:	4629      	mov	r1, r5
 800b77c:	4620      	mov	r0, r4
 800b77e:	f7ff fd2d 	bl	800b1dc <I2C_TransferConfig>
 800b782:	e7c7      	b.n	800b714 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b784:	4632      	mov	r2, r6
 800b786:	4639      	mov	r1, r7
 800b788:	4620      	mov	r0, r4
 800b78a:	f7ff feaf 	bl	800b4ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800b78e:	b9f8      	cbnz	r0, 800b7d0 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	2220      	movs	r2, #32
 800b794:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b796:	6821      	ldr	r1, [r4, #0]
 800b798:	684b      	ldr	r3, [r1, #4]
 800b79a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800b79e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b7a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b7a6:	f023 0301 	bic.w	r3, r3, #1
 800b7aa:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b7ac:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b7b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800b7ba:	e000      	b.n	800b7be <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800b7bc:	2002      	movs	r0, #2
}
 800b7be:	b003      	add	sp, #12
 800b7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b7c4:	2002      	movs	r0, #2
 800b7c6:	e7fa      	b.n	800b7be <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 800b7c8:	2001      	movs	r0, #1
 800b7ca:	e7f8      	b.n	800b7be <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800b7cc:	2001      	movs	r0, #1
 800b7ce:	e7f6      	b.n	800b7be <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	e7f4      	b.n	800b7be <HAL_I2C_Mem_Write+0x194>

0800b7d4 <HAL_I2C_Mem_Read>:
{
 800b7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	460d      	mov	r5, r1
 800b7dc:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b7e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7e2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800b7e6:	b2c9      	uxtb	r1, r1
 800b7e8:	2920      	cmp	r1, #32
 800b7ea:	f040 80bd 	bne.w	800b968 <HAL_I2C_Mem_Read+0x194>
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	4690      	mov	r8, r2
 800b7f2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800b7f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7f6:	f1ba 0f00 	cmp.w	sl, #0
 800b7fa:	bf18      	it	ne
 800b7fc:	2b00      	cmpne	r3, #0
 800b7fe:	d016      	beq.n	800b82e <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 800b800:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b804:	2b01      	cmp	r3, #1
 800b806:	f000 80b3 	beq.w	800b970 <HAL_I2C_Mem_Read+0x19c>
 800b80a:	f04f 0b01 	mov.w	fp, #1
 800b80e:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b812:	f7fe ff11 	bl	800a638 <HAL_GetTick>
 800b816:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b818:	9000      	str	r0, [sp, #0]
 800b81a:	2319      	movs	r3, #25
 800b81c:	465a      	mov	r2, fp
 800b81e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b822:	4620      	mov	r0, r4
 800b824:	f7ff fdbb 	bl	800b39e <I2C_WaitOnFlagUntilTimeout>
 800b828:	b130      	cbz	r0, 800b838 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 800b82a:	2001      	movs	r0, #1
 800b82c:	e09d      	b.n	800b96a <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b82e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b832:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800b834:	2001      	movs	r0, #1
 800b836:	e098      	b.n	800b96a <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b838:	2322      	movs	r3, #34	; 0x22
 800b83a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b83e:	2340      	movs	r3, #64	; 0x40
 800b840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b844:	2300      	movs	r3, #0
 800b846:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800b848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b84a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800b84c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b850:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b852:	9601      	str	r6, [sp, #4]
 800b854:	9700      	str	r7, [sp, #0]
 800b856:	464b      	mov	r3, r9
 800b858:	4642      	mov	r2, r8
 800b85a:	4629      	mov	r1, r5
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7ff fe09 	bl	800b474 <I2C_RequestMemoryRead>
 800b862:	b970      	cbnz	r0, 800b882 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b864:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b866:	b29b      	uxth	r3, r3
 800b868:	2bff      	cmp	r3, #255	; 0xff
 800b86a:	d90f      	bls.n	800b88c <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b86c:	22ff      	movs	r2, #255	; 0xff
 800b86e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b870:	4b43      	ldr	r3, [pc, #268]	; (800b980 <HAL_I2C_Mem_Read+0x1ac>)
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b878:	4629      	mov	r1, r5
 800b87a:	4620      	mov	r0, r4
 800b87c:	f7ff fcae 	bl	800b1dc <I2C_TransferConfig>
 800b880:	e021      	b.n	800b8c6 <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 800b882:	2300      	movs	r3, #0
 800b884:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800b888:	4658      	mov	r0, fp
 800b88a:	e06e      	b.n	800b96a <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800b88c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b88e:	b292      	uxth	r2, r2
 800b890:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b892:	4b3b      	ldr	r3, [pc, #236]	; (800b980 <HAL_I2C_Mem_Read+0x1ac>)
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b89a:	b2d2      	uxtb	r2, r2
 800b89c:	4629      	mov	r1, r5
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7ff fc9c 	bl	800b1dc <I2C_TransferConfig>
 800b8a4:	e00f      	b.n	800b8c6 <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800b8a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b8a8:	b292      	uxth	r2, r2
 800b8aa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8b4:	b2d2      	uxtb	r2, r2
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f7ff fc8f 	bl	800b1dc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b8be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d034      	beq.n	800b930 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b8c6:	9600      	str	r6, [sp, #0]
 800b8c8:	463b      	mov	r3, r7
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2104      	movs	r1, #4
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f7ff fd65 	bl	800b39e <I2C_WaitOnFlagUntilTimeout>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d14d      	bne.n	800b974 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8de:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800b8e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b8e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b8e8:	3a01      	subs	r2, #1
 800b8ea:	b292      	uxth	r2, r2
 800b8ec:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b8ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b8f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d0de      	beq.n	800b8be <HAL_I2C_Mem_Read+0xea>
 800b900:	2a00      	cmp	r2, #0
 800b902:	d1dc      	bne.n	800b8be <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b904:	9600      	str	r6, [sp, #0]
 800b906:	463b      	mov	r3, r7
 800b908:	2180      	movs	r1, #128	; 0x80
 800b90a:	4620      	mov	r0, r4
 800b90c:	f7ff fd47 	bl	800b39e <I2C_WaitOnFlagUntilTimeout>
 800b910:	bb90      	cbnz	r0, 800b978 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b912:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b914:	b29b      	uxth	r3, r3
 800b916:	2bff      	cmp	r3, #255	; 0xff
 800b918:	d9c5      	bls.n	800b8a6 <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b91a:	22ff      	movs	r2, #255	; 0xff
 800b91c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b91e:	2300      	movs	r3, #0
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b926:	4629      	mov	r1, r5
 800b928:	4620      	mov	r0, r4
 800b92a:	f7ff fc57 	bl	800b1dc <I2C_TransferConfig>
 800b92e:	e7c6      	b.n	800b8be <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b930:	4632      	mov	r2, r6
 800b932:	4639      	mov	r1, r7
 800b934:	4620      	mov	r0, r4
 800b936:	f7ff fdd9 	bl	800b4ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800b93a:	b9f8      	cbnz	r0, 800b97c <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b93c:	6823      	ldr	r3, [r4, #0]
 800b93e:	2220      	movs	r2, #32
 800b940:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b942:	6821      	ldr	r1, [r4, #0]
 800b944:	684b      	ldr	r3, [r1, #4]
 800b946:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800b94a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b94e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b952:	f023 0301 	bic.w	r3, r3, #1
 800b956:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b958:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b95c:	2300      	movs	r3, #0
 800b95e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b962:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800b966:	e000      	b.n	800b96a <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 800b968:	2002      	movs	r0, #2
}
 800b96a:	b003      	add	sp, #12
 800b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b970:	2002      	movs	r0, #2
 800b972:	e7fa      	b.n	800b96a <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 800b974:	2001      	movs	r0, #1
 800b976:	e7f8      	b.n	800b96a <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 800b978:	2001      	movs	r0, #1
 800b97a:	e7f6      	b.n	800b96a <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 800b97c:	2001      	movs	r0, #1
 800b97e:	e7f4      	b.n	800b96a <HAL_I2C_Mem_Read+0x196>
 800b980:	80002400 	.word	0x80002400

0800b984 <HAL_I2C_GetState>:
  return hi2c->State;
 800b984:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800b988:	4770      	bx	lr

0800b98a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800b98a:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800b98c:	4770      	bx	lr

0800b98e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b98e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b992:	b2db      	uxtb	r3, r3
 800b994:	2b20      	cmp	r3, #32
 800b996:	d124      	bne.n	800b9e2 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b998:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d022      	beq.n	800b9e6 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b9a6:	2324      	movs	r3, #36	; 0x24
 800b9a8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b9ac:	6802      	ldr	r2, [r0, #0]
 800b9ae:	6813      	ldr	r3, [r2, #0]
 800b9b0:	f023 0301 	bic.w	r3, r3, #1
 800b9b4:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b9b6:	6802      	ldr	r2, [r0, #0]
 800b9b8:	6813      	ldr	r3, [r2, #0]
 800b9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9be:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b9c0:	6802      	ldr	r2, [r0, #0]
 800b9c2:	6813      	ldr	r3, [r2, #0]
 800b9c4:	4319      	orrs	r1, r3
 800b9c6:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b9c8:	6802      	ldr	r2, [r0, #0]
 800b9ca:	6813      	ldr	r3, [r2, #0]
 800b9cc:	f043 0301 	orr.w	r3, r3, #1
 800b9d0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9d2:	2320      	movs	r3, #32
 800b9d4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800b9de:	4618      	mov	r0, r3
 800b9e0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800b9e2:	2002      	movs	r0, #2
 800b9e4:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800b9e6:	2002      	movs	r0, #2
  }
}
 800b9e8:	4770      	bx	lr

0800b9ea <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b20      	cmp	r3, #32
 800b9f2:	d122      	bne.n	800ba3a <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9f4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d020      	beq.n	800ba3e <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba02:	2324      	movs	r3, #36	; 0x24
 800ba04:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba08:	6802      	ldr	r2, [r0, #0]
 800ba0a:	6813      	ldr	r3, [r2, #0]
 800ba0c:	f023 0301 	bic.w	r3, r3, #1
 800ba10:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba12:	6802      	ldr	r2, [r0, #0]
 800ba14:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ba16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ba1a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ba1e:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba20:	6802      	ldr	r2, [r0, #0]
 800ba22:	6813      	ldr	r3, [r2, #0]
 800ba24:	f043 0301 	orr.w	r3, r3, #1
 800ba28:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba2a:	2320      	movs	r3, #32
 800ba2c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba30:	2300      	movs	r3, #0
 800ba32:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800ba36:	4618      	mov	r0, r3
 800ba38:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800ba3a:	2002      	movs	r0, #2
 800ba3c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800ba3e:	2002      	movs	r0, #2
  }
}
 800ba40:	4770      	bx	lr
	...

0800ba44 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ba44:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ba46:	684d      	ldr	r5, [r1, #4]
 800ba48:	6804      	ldr	r4, [r0, #0]
 800ba4a:	68e3      	ldr	r3, [r4, #12]
 800ba4c:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800ba50:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ba52:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 800ba56:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800ba5a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800ba5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ba62:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ba66:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ba68:	6804      	ldr	r4, [r0, #0]
 800ba6a:	68e6      	ldr	r6, [r4, #12]
 800ba6c:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ba70:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ba72:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ba74:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ba78:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ba7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ba80:	68cd      	ldr	r5, [r1, #12]
 800ba82:	6804      	ldr	r4, [r0, #0]
 800ba84:	68e3      	ldr	r3, [r4, #12]
 800ba86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba8a:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ba8c:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 800ba90:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 800ba94:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ba98:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ba9c:	688b      	ldr	r3, [r1, #8]
 800ba9e:	6804      	ldr	r4, [r0, #0]
 800baa0:	68e6      	ldr	r6, [r4, #12]
 800baa2:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800baa6:	4473      	add	r3, lr
 800baa8:	3301      	adds	r3, #1
 800baaa:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800baae:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800bab2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800bab6:	6803      	ldr	r3, [r0, #0]
 800bab8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800babc:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800bac0:	f024 0407 	bic.w	r4, r4, #7
 800bac4:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800bac8:	6803      	ldr	r3, [r0, #0]
 800baca:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bace:	690c      	ldr	r4, [r1, #16]
 800bad0:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800bad4:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800bad8:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800badc:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800bade:	6804      	ldr	r4, [r0, #0]
 800bae0:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800bae4:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 800bae8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800baec:	2400      	movs	r4, #0
 800baee:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800baf2:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800baf6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800bafa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800bafe:	6806      	ldr	r6, [r0, #0]
 800bb00:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 800bb04:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800bb08:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 800bb0c:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800bb10:	6803      	ldr	r3, [r0, #0]
 800bb12:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bb16:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 800bb1a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800bb1e:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800bb22:	6803      	ldr	r3, [r0, #0]
 800bb24:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bb28:	694d      	ldr	r5, [r1, #20]
 800bb2a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800bb2e:	6803      	ldr	r3, [r0, #0]
 800bb30:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bb34:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800bb38:	4d2e      	ldr	r5, [pc, #184]	; (800bbf4 <LTDC_SetConfig+0x1b0>)
 800bb3a:	4035      	ands	r5, r6
 800bb3c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800bb40:	6a0d      	ldr	r5, [r1, #32]
 800bb42:	6803      	ldr	r3, [r0, #0]
 800bb44:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bb48:	69ce      	ldr	r6, [r1, #28]
 800bb4a:	4335      	orrs	r5, r6
 800bb4c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800bb50:	6803      	ldr	r3, [r0, #0]
 800bb52:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bb56:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800bb5a:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800bb5e:	6803      	ldr	r3, [r0, #0]
 800bb60:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 800bb64:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bb66:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800bb6a:	690b      	ldr	r3, [r1, #16]
 800bb6c:	b16b      	cbz	r3, 800bb8a <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d039      	beq.n	800bbe6 <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	bf18      	it	ne
 800bb76:	2b04      	cmpne	r3, #4
 800bb78:	d037      	beq.n	800bbea <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800bb7a:	2b03      	cmp	r3, #3
 800bb7c:	d037      	beq.n	800bbee <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800bb7e:	2b07      	cmp	r3, #7
 800bb80:	d001      	beq.n	800bb86 <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800bb82:	2501      	movs	r5, #1
 800bb84:	e002      	b.n	800bb8c <LTDC_SetConfig+0x148>
    tmp = 2U;
 800bb86:	2502      	movs	r5, #2
 800bb88:	e000      	b.n	800bb8c <LTDC_SetConfig+0x148>
    tmp = 4U;
 800bb8a:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800bb8c:	6802      	ldr	r2, [r0, #0]
 800bb8e:	4462      	add	r2, ip
 800bb90:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800bb94:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 800bb98:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800bb9c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800bb9e:	fb05 f402 	mul.w	r4, r5, r2
 800bba2:	684b      	ldr	r3, [r1, #4]
 800bba4:	680a      	ldr	r2, [r1, #0]
 800bba6:	1a9b      	subs	r3, r3, r2
 800bba8:	fb05 f303 	mul.w	r3, r5, r3
 800bbac:	3307      	adds	r3, #7
 800bbae:	6802      	ldr	r2, [r0, #0]
 800bbb0:	4462      	add	r2, ip
 800bbb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bbb6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800bbba:	6803      	ldr	r3, [r0, #0]
 800bbbc:	4463      	add	r3, ip
 800bbbe:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800bbc2:	4a0d      	ldr	r2, [pc, #52]	; (800bbf8 <LTDC_SetConfig+0x1b4>)
 800bbc4:	4022      	ands	r2, r4
 800bbc6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800bbca:	6803      	ldr	r3, [r0, #0]
 800bbcc:	4463      	add	r3, ip
 800bbce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800bbd0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800bbd4:	6803      	ldr	r3, [r0, #0]
 800bbd6:	449c      	add	ip, r3
 800bbd8:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 800bbdc:	f043 0301 	orr.w	r3, r3, #1
 800bbe0:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 800bbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800bbe6:	2503      	movs	r5, #3
 800bbe8:	e7d0      	b.n	800bb8c <LTDC_SetConfig+0x148>
    tmp = 2U;
 800bbea:	2502      	movs	r5, #2
 800bbec:	e7ce      	b.n	800bb8c <LTDC_SetConfig+0x148>
 800bbee:	2502      	movs	r5, #2
 800bbf0:	e7cc      	b.n	800bb8c <LTDC_SetConfig+0x148>
 800bbf2:	bf00      	nop
 800bbf4:	fffff8f8 	.word	0xfffff8f8
 800bbf8:	fffff800 	.word	0xfffff800

0800bbfc <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d072      	beq.n	800bce6 <HAL_LTDC_Init+0xea>
{
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800bc04:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d067      	beq.n	800bcdc <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800bc12:	6822      	ldr	r2, [r4, #0]
 800bc14:	6993      	ldr	r3, [r2, #24]
 800bc16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc1a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bc1c:	6821      	ldr	r1, [r4, #0]
 800bc1e:	698a      	ldr	r2, [r1, #24]
 800bc20:	6863      	ldr	r3, [r4, #4]
 800bc22:	68a0      	ldr	r0, [r4, #8]
 800bc24:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bc26:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bc28:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800bc2a:	6920      	ldr	r0, [r4, #16]
 800bc2c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800bc32:	6821      	ldr	r1, [r4, #0]
 800bc34:	688a      	ldr	r2, [r1, #8]
 800bc36:	4b2d      	ldr	r3, [pc, #180]	; (800bcec <HAL_LTDC_Init+0xf0>)
 800bc38:	401a      	ands	r2, r3
 800bc3a:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800bc3c:	6820      	ldr	r0, [r4, #0]
 800bc3e:	6882      	ldr	r2, [r0, #8]
 800bc40:	69a1      	ldr	r1, [r4, #24]
 800bc42:	6965      	ldr	r5, [r4, #20]
 800bc44:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800bc48:	430a      	orrs	r2, r1
 800bc4a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800bc4c:	6821      	ldr	r1, [r4, #0]
 800bc4e:	68ca      	ldr	r2, [r1, #12]
 800bc50:	401a      	ands	r2, r3
 800bc52:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800bc54:	6820      	ldr	r0, [r4, #0]
 800bc56:	68c2      	ldr	r2, [r0, #12]
 800bc58:	6a21      	ldr	r1, [r4, #32]
 800bc5a:	69e5      	ldr	r5, [r4, #28]
 800bc5c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800bc60:	430a      	orrs	r2, r1
 800bc62:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800bc64:	6821      	ldr	r1, [r4, #0]
 800bc66:	690a      	ldr	r2, [r1, #16]
 800bc68:	401a      	ands	r2, r3
 800bc6a:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800bc6c:	6820      	ldr	r0, [r4, #0]
 800bc6e:	6902      	ldr	r2, [r0, #16]
 800bc70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bc72:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bc74:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800bc78:	430a      	orrs	r2, r1
 800bc7a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800bc7c:	6821      	ldr	r1, [r4, #0]
 800bc7e:	694a      	ldr	r2, [r1, #20]
 800bc80:	4013      	ands	r3, r2
 800bc82:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800bc84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800bc86:	6821      	ldr	r1, [r4, #0]
 800bc88:	694b      	ldr	r3, [r1, #20]
 800bc8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bc8c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800bc90:	4313      	orrs	r3, r2
 800bc92:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800bc94:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800bc98:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800bc9c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800bc9e:	6821      	ldr	r1, [r4, #0]
 800bca0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800bca2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800bca6:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800bca8:	6821      	ldr	r1, [r4, #0]
 800bcaa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800bcac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800bcb0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800bcb4:	4303      	orrs	r3, r0
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800bcba:	6822      	ldr	r2, [r4, #0]
 800bcbc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800bcbe:	f043 0306 	orr.w	r3, r3, #6
 800bcc2:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800bcc4:	6822      	ldr	r2, [r4, #0]
 800bcc6:	6993      	ldr	r3, [r2, #24]
 800bcc8:	f043 0301 	orr.w	r3, r3, #1
 800bccc:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800bcce:	2000      	movs	r0, #0
 800bcd0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800bcdc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800bce0:	f7f7 f92e 	bl	8002f40 <HAL_LTDC_MspInit>
 800bce4:	e792      	b.n	800bc0c <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800bce6:	2001      	movs	r0, #1
}
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	f000f800 	.word	0xf000f800

0800bcf0 <HAL_LTDC_ErrorCallback>:
}
 800bcf0:	4770      	bx	lr

0800bcf2 <HAL_LTDC_ReloadEventCallback>:
}
 800bcf2:	4770      	bx	lr

0800bcf4 <HAL_LTDC_IRQHandler>:
{
 800bcf4:	b570      	push	{r4, r5, r6, lr}
 800bcf6:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800bcf8:	6803      	ldr	r3, [r0, #0]
 800bcfa:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800bcfc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800bcfe:	f015 0f04 	tst.w	r5, #4
 800bd02:	d002      	beq.n	800bd0a <HAL_LTDC_IRQHandler+0x16>
 800bd04:	f016 0f04 	tst.w	r6, #4
 800bd08:	d112      	bne.n	800bd30 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800bd0a:	f015 0f02 	tst.w	r5, #2
 800bd0e:	d002      	beq.n	800bd16 <HAL_LTDC_IRQHandler+0x22>
 800bd10:	f016 0f02 	tst.w	r6, #2
 800bd14:	d121      	bne.n	800bd5a <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800bd16:	f015 0f01 	tst.w	r5, #1
 800bd1a:	d002      	beq.n	800bd22 <HAL_LTDC_IRQHandler+0x2e>
 800bd1c:	f016 0f01 	tst.w	r6, #1
 800bd20:	d132      	bne.n	800bd88 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800bd22:	f015 0f08 	tst.w	r5, #8
 800bd26:	d002      	beq.n	800bd2e <HAL_LTDC_IRQHandler+0x3a>
 800bd28:	f016 0f08 	tst.w	r6, #8
 800bd2c:	d13d      	bne.n	800bdaa <HAL_LTDC_IRQHandler+0xb6>
}
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800bd30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd32:	f022 0204 	bic.w	r2, r2, #4
 800bd36:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800bd38:	6803      	ldr	r3, [r0, #0]
 800bd3a:	2204      	movs	r2, #4
 800bd3c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800bd3e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800bd42:	f043 0301 	orr.w	r3, r3, #1
 800bd46:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800bd4a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800bd54:	f7ff ffcc 	bl	800bcf0 <HAL_LTDC_ErrorCallback>
 800bd58:	e7d7      	b.n	800bd0a <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800bd5a:	6822      	ldr	r2, [r4, #0]
 800bd5c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800bd5e:	f023 0302 	bic.w	r3, r3, #2
 800bd62:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	2202      	movs	r2, #2
 800bd68:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800bd6a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800bd74:	2304      	movs	r3, #4
 800bd76:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800bd80:	4620      	mov	r0, r4
 800bd82:	f7ff ffb5 	bl	800bcf0 <HAL_LTDC_ErrorCallback>
 800bd86:	e7c6      	b.n	800bd16 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800bd88:	6822      	ldr	r2, [r4, #0]
 800bd8a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800bd8c:	f023 0301 	bic.w	r3, r3, #1
 800bd90:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800bd92:	6822      	ldr	r2, [r4, #0]
 800bd94:	2301      	movs	r3, #1
 800bd96:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800bd98:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800bda2:	4620      	mov	r0, r4
 800bda4:	f7f6 f96a 	bl	800207c <HAL_LTDC_LineEventCallback>
 800bda8:	e7bb      	b.n	800bd22 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800bdaa:	6822      	ldr	r2, [r4, #0]
 800bdac:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800bdae:	f023 0308 	bic.w	r3, r3, #8
 800bdb2:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	2208      	movs	r2, #8
 800bdb8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7ff ff93 	bl	800bcf2 <HAL_LTDC_ReloadEventCallback>
}
 800bdcc:	e7af      	b.n	800bd2e <HAL_LTDC_IRQHandler+0x3a>

0800bdce <HAL_LTDC_ConfigLayer>:
{
 800bdce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800bdd0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d02c      	beq.n	800be32 <HAL_LTDC_ConfigLayer+0x64>
 800bdd8:	4604      	mov	r4, r0
 800bdda:	460d      	mov	r5, r1
 800bddc:	4616      	mov	r6, r2
 800bdde:	2701      	movs	r7, #1
 800bde0:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bde4:	2302      	movs	r3, #2
 800bde6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800bdea:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800bdee:	fb0c 0c02 	mla	ip, ip, r2, r0
 800bdf2:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800bdf6:	468e      	mov	lr, r1
 800bdf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be10:	f8de 3000 	ldr.w	r3, [lr]
 800be14:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800be18:	4632      	mov	r2, r6
 800be1a:	4629      	mov	r1, r5
 800be1c:	4620      	mov	r0, r4
 800be1e:	f7ff fe11 	bl	800ba44 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800be22:	6823      	ldr	r3, [r4, #0]
 800be24:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800be26:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800be2a:	2000      	movs	r0, #0
 800be2c:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800be30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800be32:	2002      	movs	r0, #2
 800be34:	e7fc      	b.n	800be30 <HAL_LTDC_ConfigLayer+0x62>
	...

0800be38 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800be38:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d01a      	beq.n	800be76 <HAL_LTDC_ProgramLineEvent+0x3e>
{
 800be40:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 800be42:	2201      	movs	r2, #1
 800be44:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800be48:	2302      	movs	r3, #2
 800be4a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800be4e:	6804      	ldr	r4, [r0, #0]
 800be50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be52:	f023 0301 	bic.w	r3, r3, #1
 800be56:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800be58:	4b08      	ldr	r3, [pc, #32]	; (800be7c <HAL_LTDC_ProgramLineEvent+0x44>)
 800be5a:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800be5c:	6801      	ldr	r1, [r0, #0]
 800be5e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800be60:	4313      	orrs	r3, r2
 800be62:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800be64:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800be68:	2300      	movs	r3, #0
 800be6a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800be6e:	4618      	mov	r0, r3
}
 800be70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be74:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800be76:	2002      	movs	r0, #2
}
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	50001000 	.word	0x50001000

0800be80 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 800be84:	f7fe fbd8 	bl	800a638 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800be88:	2c00      	cmp	r4, #0
 800be8a:	d035      	beq.n	800bef8 <HAL_MDMA_Abort+0x78>
 800be8c:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800be8e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b02      	cmp	r3, #2
 800be96:	d006      	beq.n	800bea6 <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800be98:	2380      	movs	r3, #128	; 0x80
 800be9a:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800be9c:	2300      	movs	r3, #0
 800be9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 800bea2:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 800bea4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800bea6:	6822      	ldr	r2, [r4, #0]
 800bea8:	68d3      	ldr	r3, [r2, #12]
 800beaa:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800beae:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 800beb0:	6822      	ldr	r2, [r4, #0]
 800beb2:	68d3      	ldr	r3, [r2, #12]
 800beb4:	f023 0301 	bic.w	r3, r3, #1
 800beb8:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	68da      	ldr	r2, [r3, #12]
 800bebe:	f012 0f01 	tst.w	r2, #1
 800bec2:	d010      	beq.n	800bee6 <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800bec4:	f7fe fbb8 	bl	800a638 <HAL_GetTick>
 800bec8:	1b43      	subs	r3, r0, r5
 800beca:	2b05      	cmp	r3, #5
 800becc:	d9f5      	bls.n	800beba <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800bece:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bed4:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 800bed6:	2300      	movs	r3, #0
 800bed8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800bedc:	2303      	movs	r3, #3
 800bede:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800bee2:	2001      	movs	r0, #1
 800bee4:	e7de      	b.n	800bea4 <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800bee6:	221f      	movs	r2, #31
 800bee8:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 800beea:	2000      	movs	r0, #0
 800beec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 800bef0:	2301      	movs	r3, #1
 800bef2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800bef6:	e7d5      	b.n	800bea4 <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 800bef8:	2001      	movs	r0, #1
 800befa:	e7d3      	b.n	800bea4 <HAL_MDMA_Abort+0x24>

0800befc <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800befc:	b190      	cbz	r0, 800bf24 <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800befe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d003      	beq.n	800bf10 <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800bf08:	2380      	movs	r3, #128	; 0x80
 800bf0a:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 800bf0c:	2001      	movs	r0, #1
 800bf0e:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800bf10:	2304      	movs	r3, #4
 800bf12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800bf16:	6802      	ldr	r2, [r0, #0]
 800bf18:	68d3      	ldr	r3, [r2, #12]
 800bf1a:	f023 0301 	bic.w	r3, r3, #1
 800bf1e:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800bf20:	2000      	movs	r0, #0
 800bf22:	4770      	bx	lr
    return HAL_ERROR;
 800bf24:	2001      	movs	r0, #1
}
 800bf26:	4770      	bx	lr

0800bf28 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800bf28:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800bf2a:	6802      	ldr	r2, [r0, #0]
 800bf2c:	6813      	ldr	r3, [r2, #0]
 800bf2e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800bf32:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800bf34:	6883      	ldr	r3, [r0, #8]
 800bf36:	b933      	cbnz	r3, 800bf46 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800bf38:	6802      	ldr	r2, [r0, #0]
 800bf3a:	6813      	ldr	r3, [r2, #0]
 800bf3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf40:	684c      	ldr	r4, [r1, #4]
 800bf42:	4323      	orrs	r3, r4
 800bf44:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800bf46:	680b      	ldr	r3, [r1, #0]
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d04d      	beq.n	800bfe8 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800bf4c:	2b03      	cmp	r3, #3
 800bf4e:	d055      	beq.n	800bffc <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800bf50:	6803      	ldr	r3, [r0, #0]
 800bf52:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 800bf56:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 800bf5a:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800bf5e:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800bf62:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800bf64:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 800bf66:	432c      	orrs	r4, r5
 800bf68:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800bf6a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800bf6c:	b15c      	cbz	r4, 800bf86 <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800bf6e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800bf70:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800bf72:	6813      	ldr	r3, [r2, #0]
 800bf74:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800bf78:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800bf7a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800bf7c:	432c      	orrs	r4, r5
 800bf7e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800bf80:	432c      	orrs	r4, r5
 800bf82:	4323      	orrs	r3, r4
 800bf84:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800bf86:	f8de 3000 	ldr.w	r3, [lr]
 800bf8a:	f023 031f 	bic.w	r3, r3, #31
 800bf8e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800bf90:	4323      	orrs	r3, r4
 800bf92:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800bf96:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800bf98:	b12b      	cbz	r3, 800bfa6 <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800bf9a:	680b      	ldr	r3, [r1, #0]
 800bf9c:	b91b      	cbnz	r3, 800bfa6 <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800bf9e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800bfa0:	6804      	ldr	r4, [r0, #0]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800bfa6:	68cb      	ldr	r3, [r1, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d073      	beq.n	800c094 <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800bfac:	69cc      	ldr	r4, [r1, #28]
 800bfae:	2c00      	cmp	r4, #0
 800bfb0:	d048      	beq.n	800c044 <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800bfb2:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800bfb4:	b365      	cbz	r5, 800c010 <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800bfb6:	6817      	ldr	r7, [r2, #0]
 800bfb8:	4e48      	ldr	r6, [pc, #288]	; (800c0dc <OSPI_ConfigCmd+0x1b4>)
 800bfba:	403e      	ands	r6, r7
 800bfbc:	694f      	ldr	r7, [r1, #20]
 800bfbe:	433b      	orrs	r3, r7
 800bfc0:	690f      	ldr	r7, [r1, #16]
 800bfc2:	433b      	orrs	r3, r7
 800bfc4:	431c      	orrs	r4, r3
 800bfc6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bfc8:	431c      	orrs	r4, r3
 800bfca:	6a0b      	ldr	r3, [r1, #32]
 800bfcc:	431c      	orrs	r4, r3
 800bfce:	432c      	orrs	r4, r5
 800bfd0:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800bfd2:	432c      	orrs	r4, r5
 800bfd4:	4334      	orrs	r4, r6
 800bfd6:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800bfd8:	688b      	ldr	r3, [r1, #8]
 800bfda:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800bfde:	6803      	ldr	r3, [r0, #0]
 800bfe0:	698a      	ldr	r2, [r1, #24]
 800bfe2:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800bfe4:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800bfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 800bfe8:	6803      	ldr	r3, [r0, #0]
 800bfea:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 800bfee:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800bff2:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 800bff6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800bffa:	e7b2      	b.n	800bf62 <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 800bffc:	6803      	ldr	r3, [r0, #0]
 800bffe:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800c002:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800c006:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 800c00a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c00e:	e7a8      	b.n	800bf62 <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800c010:	6816      	ldr	r6, [r2, #0]
 800c012:	4d33      	ldr	r5, [pc, #204]	; (800c0e0 <OSPI_ConfigCmd+0x1b8>)
 800c014:	4035      	ands	r5, r6
 800c016:	694e      	ldr	r6, [r1, #20]
 800c018:	4333      	orrs	r3, r6
 800c01a:	690e      	ldr	r6, [r1, #16]
 800c01c:	4333      	orrs	r3, r6
 800c01e:	431c      	orrs	r4, r3
 800c020:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800c022:	431c      	orrs	r4, r3
 800c024:	6a0b      	ldr	r3, [r1, #32]
 800c026:	431c      	orrs	r4, r3
 800c028:	432c      	orrs	r4, r5
 800c02a:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c02c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c02e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c032:	d1d1      	bne.n	800bfd8 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800c034:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c036:	2b08      	cmp	r3, #8
 800c038:	d1ce      	bne.n	800bfd8 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800c03a:	6813      	ldr	r3, [r2, #0]
 800c03c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	e7c9      	b.n	800bfd8 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c044:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800c046:	b184      	cbz	r4, 800c06a <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800c048:	6815      	ldr	r5, [r2, #0]
 800c04a:	4826      	ldr	r0, [pc, #152]	; (800c0e4 <OSPI_ConfigCmd+0x1bc>)
 800c04c:	4028      	ands	r0, r5
 800c04e:	694d      	ldr	r5, [r1, #20]
 800c050:	432b      	orrs	r3, r5
 800c052:	690d      	ldr	r5, [r1, #16]
 800c054:	432b      	orrs	r3, r5
 800c056:	431c      	orrs	r4, r3
 800c058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c05a:	431c      	orrs	r4, r3
 800c05c:	4304      	orrs	r4, r0
 800c05e:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 800c060:	688b      	ldr	r3, [r1, #8]
 800c062:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 800c066:	2000      	movs	r0, #0
 800c068:	e7bd      	b.n	800bfe6 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800c06a:	6814      	ldr	r4, [r2, #0]
 800c06c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800c070:	694d      	ldr	r5, [r1, #20]
 800c072:	432b      	orrs	r3, r5
 800c074:	690d      	ldr	r5, [r1, #16]
 800c076:	432b      	orrs	r3, r5
 800c078:	4323      	orrs	r3, r4
 800c07a:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c07c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c07e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c082:	d1ed      	bne.n	800c060 <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800c084:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800c086:	2b08      	cmp	r3, #8
 800c088:	d1ea      	bne.n	800c060 <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800c08a:	6813      	ldr	r3, [r2, #0]
 800c08c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c090:	6013      	str	r3, [r2, #0]
 800c092:	e7e5      	b.n	800c060 <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800c094:	69cb      	ldr	r3, [r1, #28]
 800c096:	b1e3      	cbz	r3, 800c0d2 <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800c098:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800c09a:	b184      	cbz	r4, 800c0be <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800c09c:	6816      	ldr	r6, [r2, #0]
 800c09e:	4d12      	ldr	r5, [pc, #72]	; (800c0e8 <OSPI_ConfigCmd+0x1c0>)
 800c0a0:	4035      	ands	r5, r6
 800c0a2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800c0a4:	4333      	orrs	r3, r6
 800c0a6:	6a0e      	ldr	r6, [r1, #32]
 800c0a8:	4333      	orrs	r3, r6
 800c0aa:	4323      	orrs	r3, r4
 800c0ac:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800c0ae:	4323      	orrs	r3, r4
 800c0b0:	432b      	orrs	r3, r5
 800c0b2:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 800c0b4:	6803      	ldr	r3, [r0, #0]
 800c0b6:	698a      	ldr	r2, [r1, #24]
 800c0b8:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	e793      	b.n	800bfe6 <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800c0be:	6814      	ldr	r4, [r2, #0]
 800c0c0:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800c0c4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800c0c6:	432b      	orrs	r3, r5
 800c0c8:	6a0d      	ldr	r5, [r1, #32]
 800c0ca:	432b      	orrs	r3, r5
 800c0cc:	4323      	orrs	r3, r4
 800c0ce:	6013      	str	r3, [r2, #0]
 800c0d0:	e7f0      	b.n	800c0b4 <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c0d2:	2308      	movs	r3, #8
 800c0d4:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 800c0d6:	2001      	movs	r0, #1
 800c0d8:	e785      	b.n	800bfe6 <OSPI_ConfigCmd+0xbe>
 800c0da:	bf00      	nop
 800c0dc:	f0ffc0c0 	.word	0xf0ffc0c0
 800c0e0:	ffffc0c0 	.word	0xffffc0c0
 800c0e4:	f0ffffc0 	.word	0xf0ffffc0
 800c0e8:	f0ffc0ff 	.word	0xf0ffc0ff

0800c0ec <OSPI_WaitFlagStateUntilTimeout>:
{
 800c0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	460f      	mov	r7, r1
 800c0f4:	4616      	mov	r6, r2
 800c0f6:	4699      	mov	r9, r3
 800c0f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800c0fc:	682c      	ldr	r4, [r5, #0]
 800c0fe:	6a24      	ldr	r4, [r4, #32]
 800c100:	423c      	tst	r4, r7
 800c102:	bf14      	ite	ne
 800c104:	f04f 0c01 	movne.w	ip, #1
 800c108:	f04f 0c00 	moveq.w	ip, #0
 800c10c:	45b4      	cmp	ip, r6
 800c10e:	d014      	beq.n	800c13a <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800c110:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c114:	d0f2      	beq.n	800c0fc <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c116:	f7fe fa8f 	bl	800a638 <HAL_GetTick>
 800c11a:	eba0 0009 	sub.w	r0, r0, r9
 800c11e:	4540      	cmp	r0, r8
 800c120:	d802      	bhi.n	800c128 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 800c122:	f1b8 0f00 	cmp.w	r8, #0
 800c126:	d1e9      	bne.n	800c0fc <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800c128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c12c:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800c12e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800c130:	f043 0301 	orr.w	r3, r3, #1
 800c134:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 800c136:	2001      	movs	r0, #1
 800c138:	e000      	b.n	800c13c <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 800c13a:	2000      	movs	r0, #0
}
 800c13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c140 <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 800c140:	b180      	cbz	r0, 800c164 <HAL_OSPI_DeInit+0x24>
{
 800c142:	b510      	push	{r4, lr}
 800c144:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 800c146:	6802      	ldr	r2, [r0, #0]
 800c148:	6813      	ldr	r3, [r2, #0]
 800c14a:	f023 0301 	bic.w	r3, r3, #1
 800c14e:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800c150:	6802      	ldr	r2, [r0, #0]
 800c152:	6893      	ldr	r3, [r2, #8]
 800c154:	f023 0302 	bic.w	r3, r3, #2
 800c158:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 800c15a:	f7f6 ffcf 	bl	80030fc <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 800c15e:	2000      	movs	r0, #0
 800c160:	6520      	str	r0, [r4, #80]	; 0x50
}
 800c162:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800c164:	2001      	movs	r0, #1
}
 800c166:	4770      	bx	lr

0800c168 <HAL_OSPI_Command>:
{
 800c168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c16c:	b082      	sub	sp, #8
 800c16e:	4604      	mov	r4, r0
 800c170:	4688      	mov	r8, r1
 800c172:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800c174:	f7fe fa60 	bl	800a638 <HAL_GetTick>
 800c178:	4606      	mov	r6, r0
  state = hospi->State;
 800c17a:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800c17c:	2d02      	cmp	r5, #2
 800c17e:	d009      	beq.n	800c194 <HAL_OSPI_Command+0x2c>
 800c180:	2d14      	cmp	r5, #20
 800c182:	d024      	beq.n	800c1ce <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800c184:	2d24      	cmp	r5, #36	; 0x24
 800c186:	d028      	beq.n	800c1da <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c188:	2310      	movs	r3, #16
 800c18a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c18c:	2001      	movs	r0, #1
}
 800c18e:	b002      	add	sp, #8
 800c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800c194:	68e3      	ldr	r3, [r4, #12]
 800c196:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c19a:	d0f1      	beq.n	800c180 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c19c:	9700      	str	r7, [sp, #0]
 800c19e:	4633      	mov	r3, r6
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	2120      	movs	r1, #32
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f7ff ffa1 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d1ef      	bne.n	800c18e <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800c1ae:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 800c1b0:	4641      	mov	r1, r8
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f7ff feb8 	bl	800bf28 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d1e8      	bne.n	800c18e <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800c1bc:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800c1c0:	b193      	cbz	r3, 800c1e8 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800c1c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c1c6:	b9d3      	cbnz	r3, 800c1fe <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800c1c8:	2304      	movs	r3, #4
 800c1ca:	6523      	str	r3, [r4, #80]	; 0x50
 800c1cc:	e7df      	b.n	800c18e <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800c1ce:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800c1d2:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d8d5      	bhi.n	800c184 <HAL_OSPI_Command+0x1c>
 800c1d8:	e7e0      	b.n	800c19c <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800c1da:	f8d8 3000 	ldr.w	r3, [r8]
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	bf18      	it	ne
 800c1e2:	2b01      	cmpne	r3, #1
 800c1e4:	d1d0      	bne.n	800c188 <HAL_OSPI_Command+0x20>
 800c1e6:	e7d9      	b.n	800c19c <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c1e8:	9700      	str	r7, [sp, #0]
 800c1ea:	4633      	mov	r3, r6
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	2102      	movs	r1, #2
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f7ff ff7b 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	625a      	str	r2, [r3, #36]	; 0x24
 800c1fc:	e7c7      	b.n	800c18e <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d007      	beq.n	800c212 <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800c202:	2b02      	cmp	r3, #2
 800c204:	d1c3      	bne.n	800c18e <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800c206:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c208:	2b14      	cmp	r3, #20
 800c20a:	d00b      	beq.n	800c224 <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800c20c:	2324      	movs	r3, #36	; 0x24
 800c20e:	6523      	str	r3, [r4, #80]	; 0x50
 800c210:	e7bd      	b.n	800c18e <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800c212:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c214:	2b24      	cmp	r3, #36	; 0x24
 800c216:	d002      	beq.n	800c21e <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800c218:	2314      	movs	r3, #20
 800c21a:	6523      	str	r3, [r4, #80]	; 0x50
 800c21c:	e7b7      	b.n	800c18e <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800c21e:	2304      	movs	r3, #4
 800c220:	6523      	str	r3, [r4, #80]	; 0x50
 800c222:	e7b4      	b.n	800c18e <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800c224:	2304      	movs	r3, #4
 800c226:	6523      	str	r3, [r4, #80]	; 0x50
 800c228:	e7b1      	b.n	800c18e <HAL_OSPI_Command+0x26>

0800c22a <HAL_OSPI_Transmit>:
{
 800c22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	4604      	mov	r4, r0
 800c232:	4688      	mov	r8, r1
 800c234:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800c236:	f7fe f9ff 	bl	800a638 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c23a:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 800c23c:	f1b8 0f00 	cmp.w	r8, #0
 800c240:	d00a      	beq.n	800c258 <HAL_OSPI_Transmit+0x2e>
 800c242:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c244:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c246:	2b04      	cmp	r3, #4
 800c248:	d00a      	beq.n	800c260 <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c24a:	2310      	movs	r3, #16
 800c24c:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
}
 800c250:	4618      	mov	r0, r3
 800c252:	b002      	add	sp, #8
 800c254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c258:	2308      	movs	r3, #8
 800c25a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	e7f7      	b.n	800c250 <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800c260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c262:	3301      	adds	r3, #1
 800c264:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800c266:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c268:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800c26a:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c274:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800c276:	9600      	str	r6, [sp, #0]
 800c278:	462b      	mov	r3, r5
 800c27a:	2201      	movs	r2, #1
 800c27c:	2104      	movs	r1, #4
 800c27e:	4620      	mov	r0, r4
 800c280:	f7ff ff34 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800c284:	4603      	mov	r3, r0
 800c286:	b960      	cbnz	r0, 800c2a2 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800c288:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c28a:	7812      	ldrb	r2, [r2, #0]
 800c28c:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 800c290:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c292:	3101      	adds	r1, #1
 800c294:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800c296:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c298:	3901      	subs	r1, #1
 800c29a:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800c29c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c29e:	2a00      	cmp	r2, #0
 800c2a0:	d1e9      	bne.n	800c276 <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1d4      	bne.n	800c250 <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c2a6:	9600      	str	r6, [sp, #0]
 800c2a8:	462b      	mov	r3, r5
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	2102      	movs	r1, #2
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f7ff ff1c 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	d1ca      	bne.n	800c250 <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c2ba:	6821      	ldr	r1, [r4, #0]
 800c2bc:	2202      	movs	r2, #2
 800c2be:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800c2c0:	6522      	str	r2, [r4, #80]	; 0x50
 800c2c2:	e7c5      	b.n	800c250 <HAL_OSPI_Transmit+0x26>

0800c2c4 <HAL_OSPI_Receive>:
{
 800c2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c8:	b082      	sub	sp, #8
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	4688      	mov	r8, r1
 800c2ce:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800c2d0:	f7fe f9b2 	bl	800a638 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c2d4:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 800c2d6:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800c2d8:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 800c2dc:	f1b8 0f00 	cmp.w	r8, #0
 800c2e0:	d00a      	beq.n	800c2f8 <HAL_OSPI_Receive+0x34>
 800c2e2:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c2e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c2e6:	2b04      	cmp	r3, #4
 800c2e8:	d00a      	beq.n	800c300 <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c2ea:	2310      	movs	r3, #16
 800c2ec:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	b002      	add	sp, #8
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c2f8:	2308      	movs	r3, #8
 800c2fa:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e7f7      	b.n	800c2f0 <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800c300:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800c302:	3301      	adds	r3, #1
 800c304:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800c306:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c308:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800c30a:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c30e:	682b      	ldr	r3, [r5, #0]
 800c310:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c318:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c31a:	68e3      	ldr	r3, [r4, #12]
 800c31c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c320:	d007      	beq.n	800c332 <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800c322:	6823      	ldr	r3, [r4, #0]
 800c324:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800c328:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 800c32c:	d02a      	beq.n	800c384 <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800c32e:	649a      	str	r2, [r3, #72]	; 0x48
 800c330:	e001      	b.n	800c336 <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800c336:	9700      	str	r7, [sp, #0]
 800c338:	4633      	mov	r3, r6
 800c33a:	2201      	movs	r2, #1
 800c33c:	2106      	movs	r1, #6
 800c33e:	4620      	mov	r0, r4
 800c340:	f7ff fed4 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800c344:	4603      	mov	r3, r0
 800c346:	b960      	cbnz	r0, 800c362 <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c348:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c34a:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 800c34e:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 800c350:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c352:	3101      	adds	r1, #1
 800c354:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800c356:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c358:	3901      	subs	r1, #1
 800c35a:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800c35c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c35e:	2a00      	cmp	r2, #0
 800c360:	d1e9      	bne.n	800c336 <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1c4      	bne.n	800c2f0 <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c366:	9700      	str	r7, [sp, #0]
 800c368:	4633      	mov	r3, r6
 800c36a:	2201      	movs	r2, #1
 800c36c:	2102      	movs	r1, #2
 800c36e:	4620      	mov	r0, r4
 800c370:	f7ff febc 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800c374:	4603      	mov	r3, r0
 800c376:	2800      	cmp	r0, #0
 800c378:	d1ba      	bne.n	800c2f0 <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c37a:	6821      	ldr	r1, [r4, #0]
 800c37c:	2202      	movs	r2, #2
 800c37e:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800c380:	6522      	str	r2, [r4, #80]	; 0x50
 800c382:	e7b5      	b.n	800c2f0 <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800c384:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 800c388:	e7d5      	b.n	800c336 <HAL_OSPI_Receive+0x72>

0800c38a <HAL_OSPI_AutoPolling>:
{
 800c38a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c38e:	b083      	sub	sp, #12
 800c390:	4604      	mov	r4, r0
 800c392:	460d      	mov	r5, r1
 800c394:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800c396:	f7fe f94f 	bl	800a638 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 800c39a:	6821      	ldr	r1, [r4, #0]
 800c39c:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800c39e:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800c3a2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c3a4:	2904      	cmp	r1, #4
 800c3a6:	d005      	beq.n	800c3b4 <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c3a8:	2310      	movs	r3, #16
 800c3aa:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c3ac:	2001      	movs	r0, #1
}
 800c3ae:	b003      	add	sp, #12
 800c3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3b4:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800c3b6:	68eb      	ldr	r3, [r5, #12]
 800c3b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3bc:	d1f4      	bne.n	800c3a8 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c3be:	f8cd 9000 	str.w	r9, [sp]
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2120      	movs	r1, #32
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f7ff fe8f 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d1ed      	bne.n	800c3ae <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800c3d2:	6823      	ldr	r3, [r4, #0]
 800c3d4:	682a      	ldr	r2, [r5, #0]
 800c3d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800c3da:	6823      	ldr	r3, [r4, #0]
 800c3dc:	686a      	ldr	r2, [r5, #4]
 800c3de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	692a      	ldr	r2, [r5, #16]
 800c3e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800c3ea:	6821      	ldr	r1, [r4, #0]
 800c3ec:	680b      	ldr	r3, [r1, #0]
 800c3ee:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 800c3f2:	68aa      	ldr	r2, [r5, #8]
 800c3f4:	68e8      	ldr	r0, [r5, #12]
 800c3f6:	4302      	orrs	r2, r0
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3fe:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c400:	68e3      	ldr	r3, [r4, #12]
 800c402:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c406:	d007      	beq.n	800c418 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800c408:	6823      	ldr	r3, [r4, #0]
 800c40a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800c40e:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800c412:	d013      	beq.n	800c43c <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800c414:	649f      	str	r7, [r3, #72]	; 0x48
 800c416:	e001      	b.n	800c41c <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800c41c:	f8cd 9000 	str.w	r9, [sp]
 800c420:	4643      	mov	r3, r8
 800c422:	2201      	movs	r2, #1
 800c424:	2108      	movs	r1, #8
 800c426:	4620      	mov	r0, r4
 800c428:	f7ff fe60 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c42c:	2800      	cmp	r0, #0
 800c42e:	d1be      	bne.n	800c3ae <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	2208      	movs	r2, #8
 800c434:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 800c436:	2302      	movs	r3, #2
 800c438:	6523      	str	r3, [r4, #80]	; 0x50
 800c43a:	e7b8      	b.n	800c3ae <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800c43c:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 800c440:	e7ec      	b.n	800c41c <HAL_OSPI_AutoPolling+0x92>
	...

0800c444 <HAL_OSPI_MemoryMapped>:
{
 800c444:	b530      	push	{r4, r5, lr}
 800c446:	b083      	sub	sp, #12
 800c448:	4604      	mov	r4, r0
 800c44a:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800c44c:	f7fe f8f4 	bl	800a638 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c450:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c452:	2b04      	cmp	r3, #4
 800c454:	d004      	beq.n	800c460 <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c456:	2310      	movs	r3, #16
 800c458:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c45a:	2001      	movs	r0, #1
}
 800c45c:	b003      	add	sp, #12
 800c45e:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	4603      	mov	r3, r0
 800c466:	2200      	movs	r2, #0
 800c468:	2120      	movs	r1, #32
 800c46a:	4620      	mov	r0, r4
 800c46c:	f7ff fe3e 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c470:	2800      	cmp	r0, #0
 800c472:	d1f3      	bne.n	800c45c <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800c474:	2388      	movs	r3, #136	; 0x88
 800c476:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	2b08      	cmp	r3, #8
 800c47c:	d009      	beq.n	800c492 <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800c47e:	6822      	ldr	r2, [r4, #0]
 800c480:	6811      	ldr	r1, [r2, #0]
 800c482:	4b0a      	ldr	r3, [pc, #40]	; (800c4ac <HAL_OSPI_MemoryMapped+0x68>)
 800c484:	400b      	ands	r3, r1
 800c486:	6829      	ldr	r1, [r5, #0]
 800c488:	430b      	orrs	r3, r1
 800c48a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800c48e:	6013      	str	r3, [r2, #0]
 800c490:	e7e4      	b.n	800c45c <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800c492:	6823      	ldr	r3, [r4, #0]
 800c494:	686a      	ldr	r2, [r5, #4]
 800c496:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	2210      	movs	r2, #16
 800c49e:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800c4a0:	6822      	ldr	r2, [r4, #0]
 800c4a2:	6813      	ldr	r3, [r2, #0]
 800c4a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4a8:	6013      	str	r3, [r2, #0]
 800c4aa:	e7e8      	b.n	800c47e <HAL_OSPI_MemoryMapped+0x3a>
 800c4ac:	cffffff7 	.word	0xcffffff7

0800c4b0 <HAL_OSPI_ErrorCallback>:
}
 800c4b0:	4770      	bx	lr

0800c4b2 <HAL_OSPI_AbortCpltCallback>:
}
 800c4b2:	4770      	bx	lr

0800c4b4 <OSPI_DMAAbortCplt>:
{
 800c4b4:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800c4b6:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800c4bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c4be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4c2:	d116      	bne.n	800c4f2 <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c4c4:	6803      	ldr	r3, [r0, #0]
 800c4c6:	6a1a      	ldr	r2, [r3, #32]
 800c4c8:	f012 0f20 	tst.w	r2, #32
 800c4cc:	d00c      	beq.n	800c4e8 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800c4d2:	6802      	ldr	r2, [r0, #0]
 800c4d4:	6813      	ldr	r3, [r2, #0]
 800c4d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4da:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800c4dc:	6802      	ldr	r2, [r0, #0]
 800c4de:	6813      	ldr	r3, [r2, #0]
 800c4e0:	f043 0302 	orr.w	r3, r3, #2
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	e008      	b.n	800c4fa <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800c4ec:	f7ff ffe1 	bl	800c4b2 <HAL_OSPI_AbortCpltCallback>
 800c4f0:	e003      	b.n	800c4fa <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 800c4f2:	2302      	movs	r3, #2
 800c4f4:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800c4f6:	f7ff ffdb 	bl	800c4b0 <HAL_OSPI_ErrorCallback>
}
 800c4fa:	bd08      	pop	{r3, pc}

0800c4fc <HAL_OSPI_FifoThresholdCallback>:
}
 800c4fc:	4770      	bx	lr

0800c4fe <HAL_OSPI_CmdCpltCallback>:
}
 800c4fe:	4770      	bx	lr

0800c500 <HAL_OSPI_RxCpltCallback>:
}
 800c500:	4770      	bx	lr

0800c502 <HAL_OSPI_TxCpltCallback>:
}
 800c502:	4770      	bx	lr

0800c504 <HAL_OSPI_StatusMatchCallback>:
}
 800c504:	4770      	bx	lr

0800c506 <HAL_OSPI_TimeOutCallback>:
}
 800c506:	4770      	bx	lr

0800c508 <HAL_OSPI_IRQHandler>:
{
 800c508:	b510      	push	{r4, lr}
 800c50a:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c50c:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 800c50e:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 800c510:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 800c512:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800c514:	f013 0f04 	tst.w	r3, #4
 800c518:	d027      	beq.n	800c56a <HAL_OSPI_IRQHandler+0x62>
 800c51a:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 800c51e:	d024      	beq.n	800c56a <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800c520:	2818      	cmp	r0, #24
 800c522:	d00c      	beq.n	800c53e <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800c524:	2828      	cmp	r0, #40	; 0x28
 800c526:	d015      	beq.n	800c554 <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 800c528:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c52a:	b923      	cbnz	r3, 800c536 <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800c52c:	6822      	ldr	r2, [r4, #0]
 800c52e:	6813      	ldr	r3, [r2, #0]
 800c530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c534:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 800c536:	4620      	mov	r0, r4
 800c538:	f7ff ffe0 	bl	800c4fc <HAL_OSPI_FifoThresholdCallback>
}
 800c53c:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800c53e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 800c546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c548:	3301      	adds	r3, #1
 800c54a:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800c54c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c54e:	3b01      	subs	r3, #1
 800c550:	64a3      	str	r3, [r4, #72]	; 0x48
 800c552:	e7e9      	b.n	800c528 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c556:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c55a:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800c55c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c55e:	3301      	adds	r3, #1
 800c560:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800c562:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c564:	3b01      	subs	r3, #1
 800c566:	64a3      	str	r3, [r4, #72]	; 0x48
 800c568:	e7de      	b.n	800c528 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800c56a:	f013 0f02 	tst.w	r3, #2
 800c56e:	d044      	beq.n	800c5fa <HAL_OSPI_IRQHandler+0xf2>
 800c570:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800c574:	d041      	beq.n	800c5fa <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800c576:	2828      	cmp	r0, #40	; 0x28
 800c578:	d014      	beq.n	800c5a4 <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800c57a:	2102      	movs	r1, #2
 800c57c:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800c57e:	6822      	ldr	r2, [r4, #0]
 800c580:	6813      	ldr	r3, [r2, #0]
 800c582:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c586:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800c588:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800c58a:	2818      	cmp	r0, #24
 800c58c:	d029      	beq.n	800c5e2 <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800c58e:	2808      	cmp	r0, #8
 800c590:	d02b      	beq.n	800c5ea <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800c592:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800c596:	d1d1      	bne.n	800c53c <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800c598:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c59a:	bb53      	cbnz	r3, 800c5f2 <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 800c59c:	4620      	mov	r0, r4
 800c59e:	f7ff ff88 	bl	800c4b2 <HAL_OSPI_AbortCpltCallback>
 800c5a2:	e7cb      	b.n	800c53c <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800c5a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c5a6:	b169      	cbz	r1, 800c5c4 <HAL_OSPI_IRQHandler+0xbc>
 800c5a8:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 800c5ac:	d00a      	beq.n	800c5c4 <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c5ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5b0:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c5b4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800c5b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 800c5bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	64a3      	str	r3, [r4, #72]	; 0x48
 800c5c2:	e7bb      	b.n	800c53c <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 800c5c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d1b8      	bne.n	800c53c <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800c5ca:	2102      	movs	r1, #2
 800c5cc:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800c5ce:	6822      	ldr	r2, [r4, #0]
 800c5d0:	6813      	ldr	r3, [r2, #0]
 800c5d2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c5d6:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 800c5d8:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f7ff ff90 	bl	800c500 <HAL_OSPI_RxCpltCallback>
 800c5e0:	e7ac      	b.n	800c53c <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f7ff ff8d 	bl	800c502 <HAL_OSPI_TxCpltCallback>
 800c5e8:	e7a8      	b.n	800c53c <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f7ff ff87 	bl	800c4fe <HAL_OSPI_CmdCpltCallback>
 800c5f0:	e7a4      	b.n	800c53c <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f7ff ff5c 	bl	800c4b0 <HAL_OSPI_ErrorCallback>
 800c5f8:	e7a0      	b.n	800c53c <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800c5fa:	f013 0f08 	tst.w	r3, #8
 800c5fe:	d013      	beq.n	800c628 <HAL_OSPI_IRQHandler+0x120>
 800c600:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 800c604:	d010      	beq.n	800c628 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800c606:	2308      	movs	r3, #8
 800c608:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800c612:	d005      	beq.n	800c620 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800c61a:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800c61c:	2302      	movs	r3, #2
 800c61e:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 800c620:	4620      	mov	r0, r4
 800c622:	f7ff ff6f 	bl	800c504 <HAL_OSPI_StatusMatchCallback>
 800c626:	e789      	b.n	800c53c <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800c628:	f013 0f01 	tst.w	r3, #1
 800c62c:	d029      	beq.n	800c682 <HAL_OSPI_IRQHandler+0x17a>
 800c62e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800c632:	d026      	beq.n	800c682 <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800c634:	2301      	movs	r3, #1
 800c636:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800c638:	6822      	ldr	r2, [r4, #0]
 800c63a:	6813      	ldr	r3, [r2, #0]
 800c63c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c640:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800c642:	2302      	movs	r3, #2
 800c644:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800c646:	6823      	ldr	r3, [r4, #0]
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	f012 0f04 	tst.w	r2, #4
 800c64e:	d012      	beq.n	800c676 <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	f022 0204 	bic.w	r2, r2, #4
 800c656:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800c658:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c65a:	4a11      	ldr	r2, [pc, #68]	; (800c6a0 <HAL_OSPI_IRQHandler+0x198>)
 800c65c:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800c65e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c660:	f7ff fc4c 	bl	800befc <HAL_MDMA_Abort_IT>
 800c664:	2800      	cmp	r0, #0
 800c666:	f43f af69 	beq.w	800c53c <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 800c66a:	2302      	movs	r3, #2
 800c66c:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 800c66e:	4620      	mov	r0, r4
 800c670:	f7ff ff1e 	bl	800c4b0 <HAL_OSPI_ErrorCallback>
 800c674:	e762      	b.n	800c53c <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 800c676:	2302      	movs	r3, #2
 800c678:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 800c67a:	4620      	mov	r0, r4
 800c67c:	f7ff ff18 	bl	800c4b0 <HAL_OSPI_ErrorCallback>
 800c680:	e75c      	b.n	800c53c <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800c682:	f013 0f10 	tst.w	r3, #16
 800c686:	f43f af59 	beq.w	800c53c <HAL_OSPI_IRQHandler+0x34>
 800c68a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c68e:	f43f af55 	beq.w	800c53c <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800c692:	2310      	movs	r3, #16
 800c694:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 800c696:	4620      	mov	r0, r4
 800c698:	f7ff ff35 	bl	800c506 <HAL_OSPI_TimeOutCallback>
}
 800c69c:	e74e      	b.n	800c53c <HAL_OSPI_IRQHandler+0x34>
 800c69e:	bf00      	nop
 800c6a0:	0800c4b5 	.word	0x0800c4b5

0800c6a4 <HAL_OSPI_Abort>:
{
 800c6a4:	b530      	push	{r4, r5, lr}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c6aa:	f7fd ffc5 	bl	800a638 <HAL_GetTick>
  state = hospi->State;
 800c6ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800c6b0:	f012 0f0c 	tst.w	r2, #12
 800c6b4:	d036      	beq.n	800c724 <HAL_OSPI_Abort+0x80>
 800c6b6:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	f012 0f04 	tst.w	r2, #4
 800c6c0:	d108      	bne.n	800c6d4 <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 800c6c2:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c6c4:	6823      	ldr	r3, [r4, #0]
 800c6c6:	6a1a      	ldr	r2, [r3, #32]
 800c6c8:	f012 0f20 	tst.w	r2, #32
 800c6cc:	d10e      	bne.n	800c6ec <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 800c6ce:	2302      	movs	r3, #2
 800c6d0:	6523      	str	r3, [r4, #80]	; 0x50
 800c6d2:	e02a      	b.n	800c72a <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	f022 0204 	bic.w	r2, r2, #4
 800c6da:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 800c6dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c6de:	f7ff fbcf 	bl	800be80 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d0ee      	beq.n	800c6c4 <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800c6e6:	2304      	movs	r3, #4
 800c6e8:	6563      	str	r3, [r4, #84]	; 0x54
 800c6ea:	e7eb      	b.n	800c6c4 <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	f042 0202 	orr.w	r2, r2, #2
 800c6f2:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800c6f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	462b      	mov	r3, r5
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	2102      	movs	r1, #2
 800c6fe:	4620      	mov	r0, r4
 800c700:	f7ff fcf4 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c704:	b988      	cbnz	r0, 800c72a <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c706:	6823      	ldr	r3, [r4, #0]
 800c708:	2202      	movs	r2, #2
 800c70a:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c70c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	462b      	mov	r3, r5
 800c712:	2200      	movs	r2, #0
 800c714:	2120      	movs	r1, #32
 800c716:	4620      	mov	r0, r4
 800c718:	f7ff fce8 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800c71c:	b928      	cbnz	r0, 800c72a <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 800c71e:	2302      	movs	r3, #2
 800c720:	6523      	str	r3, [r4, #80]	; 0x50
 800c722:	e002      	b.n	800c72a <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c724:	2310      	movs	r3, #16
 800c726:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c728:	2001      	movs	r0, #1
}
 800c72a:	b003      	add	sp, #12
 800c72c:	bd30      	pop	{r4, r5, pc}

0800c72e <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 800c72e:	6581      	str	r1, [r0, #88]	; 0x58
}
 800c730:	2000      	movs	r0, #0
 800c732:	4770      	bx	lr

0800c734 <HAL_OSPI_Init>:
{
 800c734:	b530      	push	{r4, r5, lr}
 800c736:	b083      	sub	sp, #12
 800c738:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c73a:	f7fd ff7d 	bl	800a638 <HAL_GetTick>
  if (hospi == NULL)
 800c73e:	2c00      	cmp	r4, #0
 800c740:	d077      	beq.n	800c832 <HAL_OSPI_Init+0xfe>
 800c742:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800c744:	2300      	movs	r3, #0
 800c746:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800c748:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c74a:	b113      	cbz	r3, 800c752 <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 800c74c:	2000      	movs	r0, #0
}
 800c74e:	b003      	add	sp, #12
 800c750:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 800c752:	4620      	mov	r0, r4
 800c754:	f7f6 fc88 	bl	8003068 <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800c758:	f241 3188 	movw	r1, #5000	; 0x1388
 800c75c:	4620      	mov	r0, r4
 800c75e:	f7ff ffe6 	bl	800c72e <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 800c762:	6820      	ldr	r0, [r4, #0]
 800c764:	6882      	ldr	r2, [r0, #8]
 800c766:	4b34      	ldr	r3, [pc, #208]	; (800c838 <HAL_OSPI_Init+0x104>)
 800c768:	4013      	ands	r3, r2
 800c76a:	68e2      	ldr	r2, [r4, #12]
 800c76c:	6921      	ldr	r1, [r4, #16]
 800c76e:	3901      	subs	r1, #1
 800c770:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c774:	6961      	ldr	r1, [r4, #20]
 800c776:	3901      	subs	r1, #1
 800c778:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c77e:	430a      	orrs	r2, r1
 800c780:	69e1      	ldr	r1, [r4, #28]
 800c782:	430a      	orrs	r2, r1
 800c784:	4313      	orrs	r3, r2
 800c786:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800c788:	6822      	ldr	r2, [r4, #0]
 800c78a:	68d3      	ldr	r3, [r2, #12]
 800c78c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c790:	6a21      	ldr	r1, [r4, #32]
 800c792:	430b      	orrs	r3, r1
 800c794:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800c796:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800c798:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800c79a:	6822      	ldr	r2, [r4, #0]
 800c79c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c7a0:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800c7a2:	6823      	ldr	r3, [r4, #0]
 800c7a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c7a6:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800c7a8:	6821      	ldr	r1, [r4, #0]
 800c7aa:	680b      	ldr	r3, [r1, #0]
 800c7ac:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800c7b0:	6862      	ldr	r2, [r4, #4]
 800c7b2:	3a01      	subs	r2, #1
 800c7b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c7b8:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c7ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	462b      	mov	r3, r5
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2120      	movs	r1, #32
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f7ff fc91 	bl	800c0ec <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d1bf      	bne.n	800c74e <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800c7ce:	6821      	ldr	r1, [r4, #0]
 800c7d0:	68cb      	ldr	r3, [r1, #12]
 800c7d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c7d8:	3a01      	subs	r2, #1
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800c7de:	6822      	ldr	r2, [r4, #0]
 800c7e0:	6813      	ldr	r3, [r2, #0]
 800c7e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7e6:	68a1      	ldr	r1, [r4, #8]
 800c7e8:	430b      	orrs	r3, r1
 800c7ea:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800c7ec:	6821      	ldr	r1, [r4, #0]
 800c7ee:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 800c7f2:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 800c7f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c7f8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800c7fa:	432a      	orrs	r2, r5
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 800c802:	6822      	ldr	r2, [r4, #0]
 800c804:	6813      	ldr	r3, [r2, #0]
 800c806:	f043 0301 	orr.w	r3, r3, #1
 800c80a:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800c80c:	69a3      	ldr	r3, [r4, #24]
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d006      	beq.n	800c820 <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c812:	68e3      	ldr	r3, [r4, #12]
 800c814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c818:	d008      	beq.n	800c82c <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 800c81a:	2302      	movs	r3, #2
 800c81c:	6523      	str	r3, [r4, #80]	; 0x50
 800c81e:	e796      	b.n	800c74e <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800c820:	6822      	ldr	r2, [r4, #0]
 800c822:	6893      	ldr	r3, [r2, #8]
 800c824:	f043 0302 	orr.w	r3, r3, #2
 800c828:	6093      	str	r3, [r2, #8]
 800c82a:	e7f2      	b.n	800c812 <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800c82c:	2301      	movs	r3, #1
 800c82e:	6523      	str	r3, [r4, #80]	; 0x50
 800c830:	e78d      	b.n	800c74e <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 800c832:	2001      	movs	r0, #1
 800c834:	e78b      	b.n	800c74e <HAL_OSPI_Init+0x1a>
 800c836:	bf00      	nop
 800c838:	f8e0f8f4 	.word	0xf8e0f8f4

0800c83c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800c840:	4b22      	ldr	r3, [pc, #136]	; (800c8cc <HAL_PWREx_ConfigSupply+0x90>)
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	f003 0307 	and.w	r3, r3, #7
 800c848:	2b06      	cmp	r3, #6
 800c84a:	d007      	beq.n	800c85c <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c84c:	4b1f      	ldr	r3, [pc, #124]	; (800c8cc <HAL_PWREx_ConfigSupply+0x90>)
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c854:	4283      	cmp	r3, r0
 800c856:	d036      	beq.n	800c8c6 <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c858:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c85c:	4a1b      	ldr	r2, [pc, #108]	; (800c8cc <HAL_PWREx_ConfigSupply+0x90>)
 800c85e:	68d3      	ldr	r3, [r2, #12]
 800c860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c864:	4303      	orrs	r3, r0
 800c866:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800c868:	f7fd fee6 	bl	800a638 <HAL_GetTick>
 800c86c:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c86e:	4b17      	ldr	r3, [pc, #92]	; (800c8cc <HAL_PWREx_ConfigSupply+0x90>)
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c876:	d107      	bne.n	800c888 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c878:	f7fd fede 	bl	800a638 <HAL_GetTick>
 800c87c:	1b43      	subs	r3, r0, r5
 800c87e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c882:	d9f4      	bls.n	800c86e <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 800c884:	2001      	movs	r0, #1
 800c886:	e7e8      	b.n	800c85a <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800c888:	2c2e      	cmp	r4, #46	; 0x2e
 800c88a:	bf18      	it	ne
 800c88c:	2c1e      	cmpne	r4, #30
 800c88e:	d008      	beq.n	800c8a2 <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800c890:	2c2d      	cmp	r4, #45	; 0x2d
 800c892:	bf14      	ite	ne
 800c894:	2300      	movne	r3, #0
 800c896:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800c898:	2c1d      	cmp	r4, #29
 800c89a:	d002      	beq.n	800c8a2 <HAL_PWREx_ConfigSupply+0x66>
 800c89c:	b90b      	cbnz	r3, 800c8a2 <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 800c89e:	2000      	movs	r0, #0
 800c8a0:	e7db      	b.n	800c85a <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 800c8a2:	f7fd fec9 	bl	800a638 <HAL_GetTick>
 800c8a6:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c8a8:	4b08      	ldr	r3, [pc, #32]	; (800c8cc <HAL_PWREx_ConfigSupply+0x90>)
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800c8b0:	d107      	bne.n	800c8c2 <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c8b2:	f7fd fec1 	bl	800a638 <HAL_GetTick>
 800c8b6:	1b00      	subs	r0, r0, r4
 800c8b8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c8bc:	d9f4      	bls.n	800c8a8 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 800c8be:	2001      	movs	r0, #1
 800c8c0:	e7cb      	b.n	800c85a <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	e7c9      	b.n	800c85a <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	e7c7      	b.n	800c85a <HAL_PWREx_ConfigSupply+0x1e>
 800c8ca:	bf00      	nop
 800c8cc:	58024800 	.word	0x58024800

0800c8d0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	f000 82f0 	beq.w	800ceb6 <HAL_RCC_OscConfig+0x5e6>
{
 800c8d6:	b538      	push	{r3, r4, r5, lr}
 800c8d8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c8da:	6803      	ldr	r3, [r0, #0]
 800c8dc:	f013 0f01 	tst.w	r3, #1
 800c8e0:	d029      	beq.n	800c936 <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8e2:	4aa1      	ldr	r2, [pc, #644]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c8e4:	6913      	ldr	r3, [r2, #16]
 800c8e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c8ea:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c8ec:	2b10      	cmp	r3, #16
 800c8ee:	d019      	beq.n	800c924 <HAL_RCC_OscConfig+0x54>
 800c8f0:	2b18      	cmp	r3, #24
 800c8f2:	d013      	beq.n	800c91c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c8f4:	6863      	ldr	r3, [r4, #4]
 800c8f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8fa:	d043      	beq.n	800c984 <HAL_RCC_OscConfig+0xb4>
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d158      	bne.n	800c9b2 <HAL_RCC_OscConfig+0xe2>
 800c900:	4b99      	ldr	r3, [pc, #612]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c910:	601a      	str	r2, [r3, #0]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c918:	601a      	str	r2, [r3, #0]
 800c91a:	e038      	b.n	800c98e <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c91c:	f002 0203 	and.w	r2, r2, #3
 800c920:	2a02      	cmp	r2, #2
 800c922:	d1e7      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c924:	4b90      	ldr	r3, [pc, #576]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c92c:	d003      	beq.n	800c936 <HAL_RCC_OscConfig+0x66>
 800c92e:	6863      	ldr	r3, [r4, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	f000 82c2 	beq.w	800ceba <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	f013 0f02 	tst.w	r3, #2
 800c93c:	f000 80a2 	beq.w	800ca84 <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c940:	4a89      	ldr	r2, [pc, #548]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c942:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c944:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c946:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800c94a:	d074      	beq.n	800ca36 <HAL_RCC_OscConfig+0x166>
 800c94c:	2b18      	cmp	r3, #24
 800c94e:	d06f      	beq.n	800ca30 <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c950:	68e3      	ldr	r3, [r4, #12]
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 80c3 	beq.w	800cade <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c958:	4983      	ldr	r1, [pc, #524]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c95a:	680a      	ldr	r2, [r1, #0]
 800c95c:	f022 0219 	bic.w	r2, r2, #25
 800c960:	4313      	orrs	r3, r2
 800c962:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c964:	f7fd fe68 	bl	800a638 <HAL_GetTick>
 800c968:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c96a:	4b7f      	ldr	r3, [pc, #508]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f013 0f04 	tst.w	r3, #4
 800c972:	f040 80ab 	bne.w	800cacc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c976:	f7fd fe5f 	bl	800a638 <HAL_GetTick>
 800c97a:	1b40      	subs	r0, r0, r5
 800c97c:	2802      	cmp	r0, #2
 800c97e:	d9f4      	bls.n	800c96a <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 800c980:	2003      	movs	r0, #3
 800c982:	e2a1      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c984:	4a78      	ldr	r2, [pc, #480]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c986:	6813      	ldr	r3, [r2, #0]
 800c988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c98c:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c98e:	6863      	ldr	r3, [r4, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d03e      	beq.n	800ca12 <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 800c994:	f7fd fe50 	bl	800a638 <HAL_GetTick>
 800c998:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c99a:	4b73      	ldr	r3, [pc, #460]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c9a2:	d1c8      	bne.n	800c936 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c9a4:	f7fd fe48 	bl	800a638 <HAL_GetTick>
 800c9a8:	1b40      	subs	r0, r0, r5
 800c9aa:	2864      	cmp	r0, #100	; 0x64
 800c9ac:	d9f5      	bls.n	800c99a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800c9ae:	2003      	movs	r0, #3
 800c9b0:	e28a      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c9b6:	d010      	beq.n	800c9da <HAL_RCC_OscConfig+0x10a>
 800c9b8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800c9bc:	d01b      	beq.n	800c9f6 <HAL_RCC_OscConfig+0x126>
 800c9be:	4b6a      	ldr	r3, [pc, #424]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c9c6:	601a      	str	r2, [r3, #0]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c9d6:	601a      	str	r2, [r3, #0]
 800c9d8:	e7d9      	b.n	800c98e <HAL_RCC_OscConfig+0xbe>
 800c9da:	4b63      	ldr	r3, [pc, #396]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c9ea:	601a      	str	r2, [r3, #0]
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	e7cb      	b.n	800c98e <HAL_RCC_OscConfig+0xbe>
 800c9f6:	4b5c      	ldr	r3, [pc, #368]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ca06:	601a      	str	r2, [r3, #0]
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ca0e:	601a      	str	r2, [r3, #0]
 800ca10:	e7bd      	b.n	800c98e <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 800ca12:	f7fd fe11 	bl	800a638 <HAL_GetTick>
 800ca16:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ca18:	4b53      	ldr	r3, [pc, #332]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ca20:	d089      	beq.n	800c936 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca22:	f7fd fe09 	bl	800a638 <HAL_GetTick>
 800ca26:	1b40      	subs	r0, r0, r5
 800ca28:	2864      	cmp	r0, #100	; 0x64
 800ca2a:	d9f5      	bls.n	800ca18 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 800ca2c:	2003      	movs	r0, #3
 800ca2e:	e24b      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ca30:	f012 0f03 	tst.w	r2, #3
 800ca34:	d18c      	bne.n	800c950 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca36:	4b4c      	ldr	r3, [pc, #304]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f013 0f04 	tst.w	r3, #4
 800ca3e:	d003      	beq.n	800ca48 <HAL_RCC_OscConfig+0x178>
 800ca40:	68e3      	ldr	r3, [r4, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f000 823b 	beq.w	800cebe <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ca48:	4a47      	ldr	r2, [pc, #284]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800ca4a:	6813      	ldr	r3, [r2, #0]
 800ca4c:	f023 0319 	bic.w	r3, r3, #25
 800ca50:	68e1      	ldr	r1, [r4, #12]
 800ca52:	430b      	orrs	r3, r1
 800ca54:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 800ca56:	f7fd fdef 	bl	800a638 <HAL_GetTick>
 800ca5a:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca5c:	4b42      	ldr	r3, [pc, #264]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f013 0f04 	tst.w	r3, #4
 800ca64:	d106      	bne.n	800ca74 <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ca66:	f7fd fde7 	bl	800a638 <HAL_GetTick>
 800ca6a:	1b40      	subs	r0, r0, r5
 800ca6c:	2802      	cmp	r0, #2
 800ca6e:	d9f5      	bls.n	800ca5c <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 800ca70:	2003      	movs	r0, #3
 800ca72:	e229      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca74:	4a3c      	ldr	r2, [pc, #240]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800ca76:	6853      	ldr	r3, [r2, #4]
 800ca78:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ca7c:	6921      	ldr	r1, [r4, #16]
 800ca7e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ca82:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ca84:	6823      	ldr	r3, [r4, #0]
 800ca86:	f013 0f10 	tst.w	r3, #16
 800ca8a:	d051      	beq.n	800cb30 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca8c:	4a36      	ldr	r2, [pc, #216]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800ca8e:	6913      	ldr	r3, [r2, #16]
 800ca90:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ca94:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ca96:	2b08      	cmp	r3, #8
 800ca98:	d039      	beq.n	800cb0e <HAL_RCC_OscConfig+0x23e>
 800ca9a:	2b18      	cmp	r3, #24
 800ca9c:	d033      	beq.n	800cb06 <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ca9e:	69e3      	ldr	r3, [r4, #28]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d06c      	beq.n	800cb7e <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800caa4:	4a30      	ldr	r2, [pc, #192]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800caa6:	6813      	ldr	r3, [r2, #0]
 800caa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caae:	f7fd fdc3 	bl	800a638 <HAL_GetTick>
 800cab2:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cab4:	4b2c      	ldr	r3, [pc, #176]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cabc:	d156      	bne.n	800cb6c <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800cabe:	f7fd fdbb 	bl	800a638 <HAL_GetTick>
 800cac2:	1b40      	subs	r0, r0, r5
 800cac4:	2802      	cmp	r0, #2
 800cac6:	d9f5      	bls.n	800cab4 <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 800cac8:	2003      	movs	r0, #3
 800caca:	e1fd      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cacc:	4a26      	ldr	r2, [pc, #152]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800cace:	6853      	ldr	r3, [r2, #4]
 800cad0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cad4:	6921      	ldr	r1, [r4, #16]
 800cad6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800cada:	6053      	str	r3, [r2, #4]
 800cadc:	e7d2      	b.n	800ca84 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 800cade:	4a22      	ldr	r2, [pc, #136]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800cae0:	6813      	ldr	r3, [r2, #0]
 800cae2:	f023 0301 	bic.w	r3, r3, #1
 800cae6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800cae8:	f7fd fda6 	bl	800a638 <HAL_GetTick>
 800caec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800caee:	4b1e      	ldr	r3, [pc, #120]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f013 0f04 	tst.w	r3, #4
 800caf6:	d0c5      	beq.n	800ca84 <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800caf8:	f7fd fd9e 	bl	800a638 <HAL_GetTick>
 800cafc:	1b40      	subs	r0, r0, r5
 800cafe:	2802      	cmp	r0, #2
 800cb00:	d9f5      	bls.n	800caee <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 800cb02:	2003      	movs	r0, #3
 800cb04:	e1e0      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cb06:	f002 0203 	and.w	r2, r2, #3
 800cb0a:	2a01      	cmp	r2, #1
 800cb0c:	d1c7      	bne.n	800ca9e <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cb0e:	4b16      	ldr	r3, [pc, #88]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cb16:	d003      	beq.n	800cb20 <HAL_RCC_OscConfig+0x250>
 800cb18:	69e3      	ldr	r3, [r4, #28]
 800cb1a:	2b80      	cmp	r3, #128	; 0x80
 800cb1c:	f040 81d1 	bne.w	800cec2 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cb20:	4a11      	ldr	r2, [pc, #68]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800cb22:	68d3      	ldr	r3, [r2, #12]
 800cb24:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800cb28:	6a21      	ldr	r1, [r4, #32]
 800cb2a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800cb2e:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb30:	6823      	ldr	r3, [r4, #0]
 800cb32:	f013 0f08 	tst.w	r3, #8
 800cb36:	d04a      	beq.n	800cbce <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cb38:	6963      	ldr	r3, [r4, #20]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d033      	beq.n	800cba6 <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb3e:	4a0a      	ldr	r2, [pc, #40]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800cb40:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800cb42:	f043 0301 	orr.w	r3, r3, #1
 800cb46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb48:	f7fd fd76 	bl	800a638 <HAL_GetTick>
 800cb4c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cb4e:	4b06      	ldr	r3, [pc, #24]	; (800cb68 <HAL_RCC_OscConfig+0x298>)
 800cb50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb52:	f013 0f02 	tst.w	r3, #2
 800cb56:	d13a      	bne.n	800cbce <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb58:	f7fd fd6e 	bl	800a638 <HAL_GetTick>
 800cb5c:	1b40      	subs	r0, r0, r5
 800cb5e:	2802      	cmp	r0, #2
 800cb60:	d9f5      	bls.n	800cb4e <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 800cb62:	2003      	movs	r0, #3
 800cb64:	e1b0      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
 800cb66:	bf00      	nop
 800cb68:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cb6c:	4a8c      	ldr	r2, [pc, #560]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cb6e:	68d3      	ldr	r3, [r2, #12]
 800cb70:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800cb74:	6a21      	ldr	r1, [r4, #32]
 800cb76:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800cb7a:	60d3      	str	r3, [r2, #12]
 800cb7c:	e7d8      	b.n	800cb30 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 800cb7e:	4a88      	ldr	r2, [pc, #544]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cb80:	6813      	ldr	r3, [r2, #0]
 800cb82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb86:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800cb88:	f7fd fd56 	bl	800a638 <HAL_GetTick>
 800cb8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cb8e:	4b84      	ldr	r3, [pc, #528]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cb96:	d0cb      	beq.n	800cb30 <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800cb98:	f7fd fd4e 	bl	800a638 <HAL_GetTick>
 800cb9c:	1b40      	subs	r0, r0, r5
 800cb9e:	2802      	cmp	r0, #2
 800cba0:	d9f5      	bls.n	800cb8e <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 800cba2:	2003      	movs	r0, #3
 800cba4:	e190      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cba6:	4a7e      	ldr	r2, [pc, #504]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cba8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800cbaa:	f023 0301 	bic.w	r3, r3, #1
 800cbae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbb0:	f7fd fd42 	bl	800a638 <HAL_GetTick>
 800cbb4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cbb6:	4b7a      	ldr	r3, [pc, #488]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cbb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbba:	f013 0f02 	tst.w	r3, #2
 800cbbe:	d006      	beq.n	800cbce <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cbc0:	f7fd fd3a 	bl	800a638 <HAL_GetTick>
 800cbc4:	1b40      	subs	r0, r0, r5
 800cbc6:	2802      	cmp	r0, #2
 800cbc8:	d9f5      	bls.n	800cbb6 <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 800cbca:	2003      	movs	r0, #3
 800cbcc:	e17c      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	f013 0f20 	tst.w	r3, #32
 800cbd4:	d029      	beq.n	800cc2a <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800cbd6:	69a3      	ldr	r3, [r4, #24]
 800cbd8:	b19b      	cbz	r3, 800cc02 <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cbda:	4a71      	ldr	r2, [pc, #452]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cbdc:	6813      	ldr	r3, [r2, #0]
 800cbde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cbe2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cbe4:	f7fd fd28 	bl	800a638 <HAL_GetTick>
 800cbe8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cbea:	4b6d      	ldr	r3, [pc, #436]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800cbf2:	d11a      	bne.n	800cc2a <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800cbf4:	f7fd fd20 	bl	800a638 <HAL_GetTick>
 800cbf8:	1b40      	subs	r0, r0, r5
 800cbfa:	2802      	cmp	r0, #2
 800cbfc:	d9f5      	bls.n	800cbea <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 800cbfe:	2003      	movs	r0, #3
 800cc00:	e162      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cc02:	4a67      	ldr	r2, [pc, #412]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cc04:	6813      	ldr	r3, [r2, #0]
 800cc06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc0c:	f7fd fd14 	bl	800a638 <HAL_GetTick>
 800cc10:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc12:	4b63      	ldr	r3, [pc, #396]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800cc1a:	d006      	beq.n	800cc2a <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800cc1c:	f7fd fd0c 	bl	800a638 <HAL_GetTick>
 800cc20:	1b40      	subs	r0, r0, r5
 800cc22:	2802      	cmp	r0, #2
 800cc24:	d9f5      	bls.n	800cc12 <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 800cc26:	2003      	movs	r0, #3
 800cc28:	e14e      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	f013 0f04 	tst.w	r3, #4
 800cc30:	d122      	bne.n	800cc78 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cc32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f000 8146 	beq.w	800cec6 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cc3a:	4a59      	ldr	r2, [pc, #356]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cc3c:	6912      	ldr	r2, [r2, #16]
 800cc3e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800cc42:	2a18      	cmp	r2, #24
 800cc44:	f000 810e 	beq.w	800ce64 <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	f000 8094 	beq.w	800cd76 <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc4e:	4a54      	ldr	r2, [pc, #336]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cc50:	6813      	ldr	r3, [r2, #0]
 800cc52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc58:	f7fd fcee 	bl	800a638 <HAL_GetTick>
 800cc5c:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cc5e:	4b50      	ldr	r3, [pc, #320]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800cc66:	f000 80fb 	beq.w	800ce60 <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cc6a:	f7fd fce5 	bl	800a638 <HAL_GetTick>
 800cc6e:	1b00      	subs	r0, r0, r4
 800cc70:	2802      	cmp	r0, #2
 800cc72:	d9f4      	bls.n	800cc5e <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 800cc74:	2003      	movs	r0, #3
 800cc76:	e127      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 800cc78:	4a4a      	ldr	r2, [pc, #296]	; (800cda4 <HAL_RCC_OscConfig+0x4d4>)
 800cc7a:	6813      	ldr	r3, [r2, #0]
 800cc7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc80:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800cc82:	f7fd fcd9 	bl	800a638 <HAL_GetTick>
 800cc86:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc88:	4b46      	ldr	r3, [pc, #280]	; (800cda4 <HAL_RCC_OscConfig+0x4d4>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cc90:	d106      	bne.n	800cca0 <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cc92:	f7fd fcd1 	bl	800a638 <HAL_GetTick>
 800cc96:	1b40      	subs	r0, r0, r5
 800cc98:	2864      	cmp	r0, #100	; 0x64
 800cc9a:	d9f5      	bls.n	800cc88 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 800cc9c:	2003      	movs	r0, #3
 800cc9e:	e113      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cca0:	68a3      	ldr	r3, [r4, #8]
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d00e      	beq.n	800ccc4 <HAL_RCC_OscConfig+0x3f4>
 800cca6:	bb33      	cbnz	r3, 800ccf6 <HAL_RCC_OscConfig+0x426>
 800cca8:	4b3d      	ldr	r3, [pc, #244]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800ccaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ccac:	f022 0201 	bic.w	r2, r2, #1
 800ccb0:	671a      	str	r2, [r3, #112]	; 0x70
 800ccb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ccb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ccb8:	671a      	str	r2, [r3, #112]	; 0x70
 800ccba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ccbc:	f022 0204 	bic.w	r2, r2, #4
 800ccc0:	671a      	str	r2, [r3, #112]	; 0x70
 800ccc2:	e004      	b.n	800ccce <HAL_RCC_OscConfig+0x3fe>
 800ccc4:	4a36      	ldr	r2, [pc, #216]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800ccc6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800ccc8:	f043 0301 	orr.w	r3, r3, #1
 800cccc:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ccce:	68a3      	ldr	r3, [r4, #8]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d03e      	beq.n	800cd52 <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 800ccd4:	f7fd fcb0 	bl	800a638 <HAL_GetTick>
 800ccd8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ccda:	4b31      	ldr	r3, [pc, #196]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800ccdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccde:	f013 0f02 	tst.w	r3, #2
 800cce2:	d1a6      	bne.n	800cc32 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cce4:	f7fd fca8 	bl	800a638 <HAL_GetTick>
 800cce8:	1b40      	subs	r0, r0, r5
 800ccea:	f241 3388 	movw	r3, #5000	; 0x1388
 800ccee:	4298      	cmp	r0, r3
 800ccf0:	d9f3      	bls.n	800ccda <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 800ccf2:	2003      	movs	r0, #3
 800ccf4:	e0e8      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ccf6:	2b05      	cmp	r3, #5
 800ccf8:	d00f      	beq.n	800cd1a <HAL_RCC_OscConfig+0x44a>
 800ccfa:	2b85      	cmp	r3, #133	; 0x85
 800ccfc:	d01b      	beq.n	800cd36 <HAL_RCC_OscConfig+0x466>
 800ccfe:	4b28      	ldr	r3, [pc, #160]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cd00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd02:	f022 0201 	bic.w	r2, r2, #1
 800cd06:	671a      	str	r2, [r3, #112]	; 0x70
 800cd08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd0a:	f022 0204 	bic.w	r2, r2, #4
 800cd0e:	671a      	str	r2, [r3, #112]	; 0x70
 800cd10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd16:	671a      	str	r2, [r3, #112]	; 0x70
 800cd18:	e7d9      	b.n	800ccce <HAL_RCC_OscConfig+0x3fe>
 800cd1a:	4b21      	ldr	r3, [pc, #132]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cd1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd1e:	f042 0204 	orr.w	r2, r2, #4
 800cd22:	671a      	str	r2, [r3, #112]	; 0x70
 800cd24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd2a:	671a      	str	r2, [r3, #112]	; 0x70
 800cd2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd2e:	f042 0201 	orr.w	r2, r2, #1
 800cd32:	671a      	str	r2, [r3, #112]	; 0x70
 800cd34:	e7cb      	b.n	800ccce <HAL_RCC_OscConfig+0x3fe>
 800cd36:	4b1a      	ldr	r3, [pc, #104]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cd38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd3a:	f042 0204 	orr.w	r2, r2, #4
 800cd3e:	671a      	str	r2, [r3, #112]	; 0x70
 800cd40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd46:	671a      	str	r2, [r3, #112]	; 0x70
 800cd48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd4a:	f042 0201 	orr.w	r2, r2, #1
 800cd4e:	671a      	str	r2, [r3, #112]	; 0x70
 800cd50:	e7bd      	b.n	800ccce <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 800cd52:	f7fd fc71 	bl	800a638 <HAL_GetTick>
 800cd56:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cd58:	4b11      	ldr	r3, [pc, #68]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cd5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd5c:	f013 0f02 	tst.w	r3, #2
 800cd60:	f43f af67 	beq.w	800cc32 <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd64:	f7fd fc68 	bl	800a638 <HAL_GetTick>
 800cd68:	1b40      	subs	r0, r0, r5
 800cd6a:	f241 3388 	movw	r3, #5000	; 0x1388
 800cd6e:	4298      	cmp	r0, r3
 800cd70:	d9f2      	bls.n	800cd58 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 800cd72:	2003      	movs	r0, #3
 800cd74:	e0a8      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 800cd76:	4a0a      	ldr	r2, [pc, #40]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cd78:	6813      	ldr	r3, [r2, #0]
 800cd7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd7e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800cd80:	f7fd fc5a 	bl	800a638 <HAL_GetTick>
 800cd84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cd86:	4b06      	ldr	r3, [pc, #24]	; (800cda0 <HAL_RCC_OscConfig+0x4d0>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800cd8e:	d00b      	beq.n	800cda8 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd90:	f7fd fc52 	bl	800a638 <HAL_GetTick>
 800cd94:	1b40      	subs	r0, r0, r5
 800cd96:	2802      	cmp	r0, #2
 800cd98:	d9f5      	bls.n	800cd86 <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 800cd9a:	2003      	movs	r0, #3
 800cd9c:	e094      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
 800cd9e:	bf00      	nop
 800cda0:	58024400 	.word	0x58024400
 800cda4:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cda8:	4b4f      	ldr	r3, [pc, #316]	; (800cee8 <HAL_RCC_OscConfig+0x618>)
 800cdaa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800cdac:	4a4f      	ldr	r2, [pc, #316]	; (800ceec <HAL_RCC_OscConfig+0x61c>)
 800cdae:	400a      	ands	r2, r1
 800cdb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cdb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800cdb4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800cdb8:	430a      	orrs	r2, r1
 800cdba:	629a      	str	r2, [r3, #40]	; 0x28
 800cdbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cdbe:	3a01      	subs	r2, #1
 800cdc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cdc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdc6:	3901      	subs	r1, #1
 800cdc8:	0249      	lsls	r1, r1, #9
 800cdca:	b289      	uxth	r1, r1
 800cdcc:	430a      	orrs	r2, r1
 800cdce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cdd0:	3901      	subs	r1, #1
 800cdd2:	0409      	lsls	r1, r1, #16
 800cdd4:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800cdd8:	430a      	orrs	r2, r1
 800cdda:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cddc:	3901      	subs	r1, #1
 800cdde:	0609      	lsls	r1, r1, #24
 800cde0:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800cde4:	430a      	orrs	r2, r1
 800cde6:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800cde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdea:	f022 0201 	bic.w	r2, r2, #1
 800cdee:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cdf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cdf2:	4a3f      	ldr	r2, [pc, #252]	; (800cef0 <HAL_RCC_OscConfig+0x620>)
 800cdf4:	400a      	ands	r2, r1
 800cdf6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cdf8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800cdfc:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cdfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce00:	f022 020c 	bic.w	r2, r2, #12
 800ce04:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ce06:	430a      	orrs	r2, r1
 800ce08:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ce0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce0c:	f022 0202 	bic.w	r2, r2, #2
 800ce10:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ce12:	430a      	orrs	r2, r1
 800ce14:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ce16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ce1c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ce24:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ce26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ce2c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800ce2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce30:	f042 0201 	orr.w	r2, r2, #1
 800ce34:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800ce3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ce3e:	f7fd fbfb 	bl	800a638 <HAL_GetTick>
 800ce42:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ce44:	4b28      	ldr	r3, [pc, #160]	; (800cee8 <HAL_RCC_OscConfig+0x618>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ce4c:	d106      	bne.n	800ce5c <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce4e:	f7fd fbf3 	bl	800a638 <HAL_GetTick>
 800ce52:	1b00      	subs	r0, r0, r4
 800ce54:	2802      	cmp	r0, #2
 800ce56:	d9f5      	bls.n	800ce44 <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 800ce58:	2003      	movs	r0, #3
 800ce5a:	e035      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	e033      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
 800ce60:	2000      	movs	r0, #0
 800ce62:	e031      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ce64:	4920      	ldr	r1, [pc, #128]	; (800cee8 <HAL_RCC_OscConfig+0x618>)
 800ce66:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ce68:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d02d      	beq.n	800ceca <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce6e:	f002 0303 	and.w	r3, r2, #3
 800ce72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce74:	428b      	cmp	r3, r1
 800ce76:	d12a      	bne.n	800cece <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ce78:	f3c2 1205 	ubfx	r2, r2, #4, #6
 800ce7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d127      	bne.n	800ced2 <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ce82:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800ce86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ce88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d123      	bne.n	800ced6 <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ce8e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800ce92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce94:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d11f      	bne.n	800ceda <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ce9a:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800ce9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cea0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d11b      	bne.n	800cede <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cea6:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800ceaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ceac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ceae:	4298      	cmp	r0, r3
 800ceb0:	d117      	bne.n	800cee2 <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	e008      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 800ceb6:	2001      	movs	r0, #1
}
 800ceb8:	4770      	bx	lr
        return HAL_ERROR;
 800ceba:	2001      	movs	r0, #1
 800cebc:	e004      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800cebe:	2001      	movs	r0, #1
 800cec0:	e002      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800cec2:	2001      	movs	r0, #1
 800cec4:	e000      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 800cec6:	2000      	movs	r0, #0
}
 800cec8:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800ceca:	2001      	movs	r0, #1
 800cecc:	e7fc      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
 800cece:	2001      	movs	r0, #1
 800ced0:	e7fa      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
 800ced2:	2001      	movs	r0, #1
 800ced4:	e7f8      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
 800ced6:	2001      	movs	r0, #1
 800ced8:	e7f6      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
 800ceda:	2001      	movs	r0, #1
 800cedc:	e7f4      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
 800cede:	2001      	movs	r0, #1
 800cee0:	e7f2      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
 800cee2:	2001      	movs	r0, #1
 800cee4:	e7f0      	b.n	800cec8 <HAL_RCC_OscConfig+0x5f8>
 800cee6:	bf00      	nop
 800cee8:	58024400 	.word	0x58024400
 800ceec:	fffffc0c 	.word	0xfffffc0c
 800cef0:	ffff0007 	.word	0xffff0007

0800cef4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cef4:	4b74      	ldr	r3, [pc, #464]	; (800d0c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cefc:	2b10      	cmp	r3, #16
 800cefe:	f000 80de 	beq.w	800d0be <HAL_RCC_GetSysClockFreq+0x1ca>
 800cf02:	2b18      	cmp	r3, #24
 800cf04:	d010      	beq.n	800cf28 <HAL_RCC_GetSysClockFreq+0x34>
 800cf06:	b10b      	cbz	r3, 800cf0c <HAL_RCC_GetSysClockFreq+0x18>
 800cf08:	4870      	ldr	r0, [pc, #448]	; (800d0cc <HAL_RCC_GetSysClockFreq+0x1d8>)
 800cf0a:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf0c:	4b6e      	ldr	r3, [pc, #440]	; (800d0c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f013 0f20 	tst.w	r3, #32
 800cf14:	f000 80d5 	beq.w	800d0c2 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cf18:	4b6b      	ldr	r3, [pc, #428]	; (800d0c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cf1a:	6818      	ldr	r0, [r3, #0]
 800cf1c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800cf20:	4b6b      	ldr	r3, [pc, #428]	; (800d0d0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800cf22:	fa23 f000 	lsr.w	r0, r3, r0
 800cf26:	4770      	bx	lr
{
 800cf28:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf2a:	4a67      	ldr	r2, [pc, #412]	; (800d0c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cf2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800cf2e:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800cf32:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800cf34:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cf38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cf3a:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800cf3e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800cf40:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800cf44:	fb0c f303 	mul.w	r3, ip, r3
 800cf48:	ee07 3a90 	vmov	s15, r3
 800cf4c:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 800cf50:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800cf54:	f000 8093 	beq.w	800d07e <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 800cf58:	2901      	cmp	r1, #1
 800cf5a:	d065      	beq.n	800d028 <HAL_RCC_GetSysClockFreq+0x134>
 800cf5c:	2902      	cmp	r1, #2
 800cf5e:	f000 8091 	beq.w	800d084 <HAL_RCC_GetSysClockFreq+0x190>
 800cf62:	b1e1      	cbz	r1, 800cf9e <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cf64:	ee07 0a10 	vmov	s14, r0
 800cf68:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800cf6c:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800d0d4 <HAL_RCC_GetSysClockFreq+0x1e0>
 800cf70:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cf74:	4b54      	ldr	r3, [pc, #336]	; (800d0c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf7c:	ee06 3a90 	vmov	s13, r3
 800cf80:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800cf84:	ed9f 6a54 	vldr	s12, [pc, #336]	; 800d0d8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800cf88:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cf8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf98:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800cf9c:	e060      	b.n	800d060 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf9e:	6813      	ldr	r3, [r2, #0]
 800cfa0:	f013 0f20 	tst.w	r3, #32
 800cfa4:	d023      	beq.n	800cfee <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	6812      	ldr	r2, [r2, #0]
 800cfaa:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800cfae:	4b48      	ldr	r3, [pc, #288]	; (800d0d0 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800cfb0:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cfb2:	ee07 3a10 	vmov	s14, r3
 800cfb6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800cfba:	ee07 0a10 	vmov	s14, r0
 800cfbe:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800cfc2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800cfc6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800cfc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfcc:	ee06 3a90 	vmov	s13, r3
 800cfd0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800cfd4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800d0d8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800cfd8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cfdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfec:	e038      	b.n	800d060 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cfee:	ee07 0a10 	vmov	s14, r0
 800cff2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800cff6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800d0dc <HAL_RCC_GetSysClockFreq+0x1e8>
 800cffa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cffe:	4b32      	ldr	r3, [pc, #200]	; (800d0c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800d000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d006:	ee06 3a90 	vmov	s13, r3
 800d00a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d00e:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800d0d8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800d012:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d022:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d026:	e01b      	b.n	800d060 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d028:	ee07 0a10 	vmov	s14, r0
 800d02c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d030:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800d0d4 <HAL_RCC_GetSysClockFreq+0x1e0>
 800d034:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d038:	4b23      	ldr	r3, [pc, #140]	; (800d0c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800d03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d040:	ee06 3a90 	vmov	s13, r3
 800d044:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d048:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800d0d8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800d04c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d05c:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800d060:	4b19      	ldr	r3, [pc, #100]	; (800d0c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800d062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d064:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d068:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800d06a:	ee07 3a90 	vmov	s15, r3
 800d06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d072:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d076:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800d07a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800d07e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d082:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d084:	ee07 0a10 	vmov	s14, r0
 800d088:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d08c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800d0e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d090:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d094:	4b0c      	ldr	r3, [pc, #48]	; (800d0c8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800d096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09c:	ee06 3a90 	vmov	s13, r3
 800d0a0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d0a4:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800d0d8 <HAL_RCC_GetSysClockFreq+0x1e4>
 800d0a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d0ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0b8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800d0bc:	e7d0      	b.n	800d060 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800d0be:	4809      	ldr	r0, [pc, #36]	; (800d0e4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800d0c0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d0c2:	4803      	ldr	r0, [pc, #12]	; (800d0d0 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	58024400 	.word	0x58024400
 800d0cc:	003d0900 	.word	0x003d0900
 800d0d0:	03d09000 	.word	0x03d09000
 800d0d4:	4a742400 	.word	0x4a742400
 800d0d8:	39000000 	.word	0x39000000
 800d0dc:	4c742400 	.word	0x4c742400
 800d0e0:	4bb71b00 	.word	0x4bb71b00
 800d0e4:	016e3600 	.word	0x016e3600

0800d0e8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	f000 8132 	beq.w	800d352 <HAL_RCC_ClockConfig+0x26a>
{
 800d0ee:	b570      	push	{r4, r5, r6, lr}
 800d0f0:	460d      	mov	r5, r1
 800d0f2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d0f4:	4b9b      	ldr	r3, [pc, #620]	; (800d364 <HAL_RCC_ClockConfig+0x27c>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f003 030f 	and.w	r3, r3, #15
 800d0fc:	428b      	cmp	r3, r1
 800d0fe:	d20b      	bcs.n	800d118 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d100:	4a98      	ldr	r2, [pc, #608]	; (800d364 <HAL_RCC_ClockConfig+0x27c>)
 800d102:	6813      	ldr	r3, [r2, #0]
 800d104:	f023 030f 	bic.w	r3, r3, #15
 800d108:	430b      	orrs	r3, r1
 800d10a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d10c:	6813      	ldr	r3, [r2, #0]
 800d10e:	f003 030f 	and.w	r3, r3, #15
 800d112:	428b      	cmp	r3, r1
 800d114:	f040 811f 	bne.w	800d356 <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d118:	6823      	ldr	r3, [r4, #0]
 800d11a:	f013 0f04 	tst.w	r3, #4
 800d11e:	d00c      	beq.n	800d13a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800d120:	6922      	ldr	r2, [r4, #16]
 800d122:	4b91      	ldr	r3, [pc, #580]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d905      	bls.n	800d13a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d12e:	498e      	ldr	r1, [pc, #568]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d130:	698b      	ldr	r3, [r1, #24]
 800d132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d136:	431a      	orrs	r2, r3
 800d138:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d13a:	6823      	ldr	r3, [r4, #0]
 800d13c:	f013 0f08 	tst.w	r3, #8
 800d140:	d00c      	beq.n	800d15c <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800d142:	6962      	ldr	r2, [r4, #20]
 800d144:	4b88      	ldr	r3, [pc, #544]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d146:	69db      	ldr	r3, [r3, #28]
 800d148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d905      	bls.n	800d15c <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d150:	4985      	ldr	r1, [pc, #532]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d152:	69cb      	ldr	r3, [r1, #28]
 800d154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d158:	431a      	orrs	r2, r3
 800d15a:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	f013 0f10 	tst.w	r3, #16
 800d162:	d00c      	beq.n	800d17e <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800d164:	69a2      	ldr	r2, [r4, #24]
 800d166:	4b80      	ldr	r3, [pc, #512]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d168:	69db      	ldr	r3, [r3, #28]
 800d16a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d16e:	429a      	cmp	r2, r3
 800d170:	d905      	bls.n	800d17e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d172:	497d      	ldr	r1, [pc, #500]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d174:	69cb      	ldr	r3, [r1, #28]
 800d176:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d17a:	431a      	orrs	r2, r3
 800d17c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d17e:	6823      	ldr	r3, [r4, #0]
 800d180:	f013 0f20 	tst.w	r3, #32
 800d184:	d00c      	beq.n	800d1a0 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800d186:	69e2      	ldr	r2, [r4, #28]
 800d188:	4b77      	ldr	r3, [pc, #476]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d18a:	6a1b      	ldr	r3, [r3, #32]
 800d18c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d190:	429a      	cmp	r2, r3
 800d192:	d905      	bls.n	800d1a0 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d194:	4974      	ldr	r1, [pc, #464]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d196:	6a0b      	ldr	r3, [r1, #32]
 800d198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d19c:	431a      	orrs	r2, r3
 800d19e:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	f013 0f02 	tst.w	r3, #2
 800d1a6:	d00c      	beq.n	800d1c2 <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800d1a8:	68e2      	ldr	r2, [r4, #12]
 800d1aa:	4b6f      	ldr	r3, [pc, #444]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	f003 030f 	and.w	r3, r3, #15
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d905      	bls.n	800d1c2 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d1b6:	496c      	ldr	r1, [pc, #432]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d1b8:	698b      	ldr	r3, [r1, #24]
 800d1ba:	f023 030f 	bic.w	r3, r3, #15
 800d1be:	431a      	orrs	r2, r3
 800d1c0:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	f013 0f01 	tst.w	r3, #1
 800d1c8:	d041      	beq.n	800d24e <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d1ca:	4a67      	ldr	r2, [pc, #412]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d1cc:	6993      	ldr	r3, [r2, #24]
 800d1ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d1d2:	68a1      	ldr	r1, [r4, #8]
 800d1d4:	430b      	orrs	r3, r1
 800d1d6:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d1d8:	6863      	ldr	r3, [r4, #4]
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d00a      	beq.n	800d1f4 <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d027      	beq.n	800d232 <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d02c      	beq.n	800d240 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d1e6:	4a60      	ldr	r2, [pc, #384]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d1e8:	6812      	ldr	r2, [r2, #0]
 800d1ea:	f012 0f04 	tst.w	r2, #4
 800d1ee:	d106      	bne.n	800d1fe <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800d1f0:	2001      	movs	r0, #1
 800d1f2:	e0ad      	b.n	800d350 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d1f4:	6812      	ldr	r2, [r2, #0]
 800d1f6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800d1fa:	f000 80ae 	beq.w	800d35a <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d1fe:	495a      	ldr	r1, [pc, #360]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d200:	690a      	ldr	r2, [r1, #16]
 800d202:	f022 0207 	bic.w	r2, r2, #7
 800d206:	4313      	orrs	r3, r2
 800d208:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800d20a:	f7fd fa15 	bl	800a638 <HAL_GetTick>
 800d20e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d210:	4b55      	ldr	r3, [pc, #340]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d212:	691b      	ldr	r3, [r3, #16]
 800d214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d218:	6862      	ldr	r2, [r4, #4]
 800d21a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800d21e:	d016      	beq.n	800d24e <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d220:	f7fd fa0a 	bl	800a638 <HAL_GetTick>
 800d224:	1b80      	subs	r0, r0, r6
 800d226:	f241 3388 	movw	r3, #5000	; 0x1388
 800d22a:	4298      	cmp	r0, r3
 800d22c:	d9f0      	bls.n	800d210 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 800d22e:	2003      	movs	r0, #3
 800d230:	e08e      	b.n	800d350 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d232:	4a4d      	ldr	r2, [pc, #308]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d234:	6812      	ldr	r2, [r2, #0]
 800d236:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800d23a:	d1e0      	bne.n	800d1fe <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800d23c:	2001      	movs	r0, #1
 800d23e:	e087      	b.n	800d350 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d240:	4a49      	ldr	r2, [pc, #292]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d242:	6812      	ldr	r2, [r2, #0]
 800d244:	f412 7f80 	tst.w	r2, #256	; 0x100
 800d248:	d1d9      	bne.n	800d1fe <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800d24a:	2001      	movs	r0, #1
 800d24c:	e080      	b.n	800d350 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d24e:	6823      	ldr	r3, [r4, #0]
 800d250:	f013 0f02 	tst.w	r3, #2
 800d254:	d00c      	beq.n	800d270 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800d256:	68e2      	ldr	r2, [r4, #12]
 800d258:	4b43      	ldr	r3, [pc, #268]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	f003 030f 	and.w	r3, r3, #15
 800d260:	429a      	cmp	r2, r3
 800d262:	d205      	bcs.n	800d270 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d264:	4940      	ldr	r1, [pc, #256]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d266:	698b      	ldr	r3, [r1, #24]
 800d268:	f023 030f 	bic.w	r3, r3, #15
 800d26c:	431a      	orrs	r2, r3
 800d26e:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d270:	4b3c      	ldr	r3, [pc, #240]	; (800d364 <HAL_RCC_ClockConfig+0x27c>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f003 030f 	and.w	r3, r3, #15
 800d278:	42ab      	cmp	r3, r5
 800d27a:	d90a      	bls.n	800d292 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d27c:	4a39      	ldr	r2, [pc, #228]	; (800d364 <HAL_RCC_ClockConfig+0x27c>)
 800d27e:	6813      	ldr	r3, [r2, #0]
 800d280:	f023 030f 	bic.w	r3, r3, #15
 800d284:	432b      	orrs	r3, r5
 800d286:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d288:	6813      	ldr	r3, [r2, #0]
 800d28a:	f003 030f 	and.w	r3, r3, #15
 800d28e:	42ab      	cmp	r3, r5
 800d290:	d165      	bne.n	800d35e <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	f013 0f04 	tst.w	r3, #4
 800d298:	d00c      	beq.n	800d2b4 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800d29a:	6922      	ldr	r2, [r4, #16]
 800d29c:	4b32      	ldr	r3, [pc, #200]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d205      	bcs.n	800d2b4 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d2a8:	492f      	ldr	r1, [pc, #188]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d2aa:	698b      	ldr	r3, [r1, #24]
 800d2ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2b0:	431a      	orrs	r2, r3
 800d2b2:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	f013 0f08 	tst.w	r3, #8
 800d2ba:	d00c      	beq.n	800d2d6 <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800d2bc:	6962      	ldr	r2, [r4, #20]
 800d2be:	4b2a      	ldr	r3, [pc, #168]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d2c0:	69db      	ldr	r3, [r3, #28]
 800d2c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d205      	bcs.n	800d2d6 <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d2ca:	4927      	ldr	r1, [pc, #156]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d2cc:	69cb      	ldr	r3, [r1, #28]
 800d2ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2d2:	431a      	orrs	r2, r3
 800d2d4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2d6:	6823      	ldr	r3, [r4, #0]
 800d2d8:	f013 0f10 	tst.w	r3, #16
 800d2dc:	d00c      	beq.n	800d2f8 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800d2de:	69a2      	ldr	r2, [r4, #24]
 800d2e0:	4b21      	ldr	r3, [pc, #132]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d2e2:	69db      	ldr	r3, [r3, #28]
 800d2e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d205      	bcs.n	800d2f8 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d2ec:	491e      	ldr	r1, [pc, #120]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d2ee:	69cb      	ldr	r3, [r1, #28]
 800d2f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d2f4:	431a      	orrs	r2, r3
 800d2f6:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d2f8:	6823      	ldr	r3, [r4, #0]
 800d2fa:	f013 0f20 	tst.w	r3, #32
 800d2fe:	d00c      	beq.n	800d31a <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800d300:	69e2      	ldr	r2, [r4, #28]
 800d302:	4b19      	ldr	r3, [pc, #100]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d205      	bcs.n	800d31a <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d30e:	4916      	ldr	r1, [pc, #88]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d310:	6a0b      	ldr	r3, [r1, #32]
 800d312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d316:	431a      	orrs	r2, r3
 800d318:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800d31a:	f7ff fdeb 	bl	800cef4 <HAL_RCC_GetSysClockFreq>
 800d31e:	4912      	ldr	r1, [pc, #72]	; (800d368 <HAL_RCC_ClockConfig+0x280>)
 800d320:	698b      	ldr	r3, [r1, #24]
 800d322:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800d326:	4a11      	ldr	r2, [pc, #68]	; (800d36c <HAL_RCC_ClockConfig+0x284>)
 800d328:	5cd3      	ldrb	r3, [r2, r3]
 800d32a:	f003 031f 	and.w	r3, r3, #31
 800d32e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800d330:	698b      	ldr	r3, [r1, #24]
 800d332:	f003 030f 	and.w	r3, r3, #15
 800d336:	5cd3      	ldrb	r3, [r2, r3]
 800d338:	f003 031f 	and.w	r3, r3, #31
 800d33c:	fa20 f303 	lsr.w	r3, r0, r3
 800d340:	4a0b      	ldr	r2, [pc, #44]	; (800d370 <HAL_RCC_ClockConfig+0x288>)
 800d342:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800d344:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <HAL_RCC_ClockConfig+0x28c>)
 800d346:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800d348:	4b0b      	ldr	r3, [pc, #44]	; (800d378 <HAL_RCC_ClockConfig+0x290>)
 800d34a:	6818      	ldr	r0, [r3, #0]
 800d34c:	f7f5 ff80 	bl	8003250 <HAL_InitTick>
}
 800d350:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800d352:	2001      	movs	r0, #1
}
 800d354:	4770      	bx	lr
      return HAL_ERROR;
 800d356:	2001      	movs	r0, #1
 800d358:	e7fa      	b.n	800d350 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 800d35a:	2001      	movs	r0, #1
 800d35c:	e7f8      	b.n	800d350 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800d35e:	2001      	movs	r0, #1
 800d360:	e7f6      	b.n	800d350 <HAL_RCC_ClockConfig+0x268>
 800d362:	bf00      	nop
 800d364:	52002000 	.word	0x52002000
 800d368:	58024400 	.word	0x58024400
 800d36c:	0802676c 	.word	0x0802676c
 800d370:	24000074 	.word	0x24000074
 800d374:	24000070 	.word	0x24000070
 800d378:	2400007c 	.word	0x2400007c

0800d37c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d37c:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800d37e:	f7ff fdb9 	bl	800cef4 <HAL_RCC_GetSysClockFreq>
 800d382:	4a0b      	ldr	r2, [pc, #44]	; (800d3b0 <HAL_RCC_GetHCLKFreq+0x34>)
 800d384:	6993      	ldr	r3, [r2, #24]
 800d386:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800d38a:	490a      	ldr	r1, [pc, #40]	; (800d3b4 <HAL_RCC_GetHCLKFreq+0x38>)
 800d38c:	5ccb      	ldrb	r3, [r1, r3]
 800d38e:	f003 031f 	and.w	r3, r3, #31
 800d392:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800d396:	6992      	ldr	r2, [r2, #24]
 800d398:	f002 020f 	and.w	r2, r2, #15
 800d39c:	5c88      	ldrb	r0, [r1, r2]
 800d39e:	f000 001f 	and.w	r0, r0, #31
 800d3a2:	fa23 f000 	lsr.w	r0, r3, r0
 800d3a6:	4a04      	ldr	r2, [pc, #16]	; (800d3b8 <HAL_RCC_GetHCLKFreq+0x3c>)
 800d3a8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d3aa:	4a04      	ldr	r2, [pc, #16]	; (800d3bc <HAL_RCC_GetHCLKFreq+0x40>)
 800d3ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800d3ae:	bd08      	pop	{r3, pc}
 800d3b0:	58024400 	.word	0x58024400
 800d3b4:	0802676c 	.word	0x0802676c
 800d3b8:	24000074 	.word	0x24000074
 800d3bc:	24000070 	.word	0x24000070

0800d3c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d3c0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800d3c2:	f7ff ffdb 	bl	800d37c <HAL_RCC_GetHCLKFreq>
 800d3c6:	4b05      	ldr	r3, [pc, #20]	; (800d3dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 800d3c8:	69db      	ldr	r3, [r3, #28]
 800d3ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d3ce:	4a04      	ldr	r2, [pc, #16]	; (800d3e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d3d0:	5cd3      	ldrb	r3, [r2, r3]
 800d3d2:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800d3d6:	40d8      	lsrs	r0, r3
 800d3d8:	bd08      	pop	{r3, pc}
 800d3da:	bf00      	nop
 800d3dc:	58024400 	.word	0x58024400
 800d3e0:	0802676c 	.word	0x0802676c

0800d3e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d3e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800d3e6:	f7ff ffc9 	bl	800d37c <HAL_RCC_GetHCLKFreq>
 800d3ea:	4b05      	ldr	r3, [pc, #20]	; (800d400 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800d3ec:	69db      	ldr	r3, [r3, #28]
 800d3ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800d3f2:	4a04      	ldr	r2, [pc, #16]	; (800d404 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d3f4:	5cd3      	ldrb	r3, [r2, r3]
 800d3f6:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800d3fa:	40d8      	lsrs	r0, r3
 800d3fc:	bd08      	pop	{r3, pc}
 800d3fe:	bf00      	nop
 800d400:	58024400 	.word	0x58024400
 800d404:	0802676c 	.word	0x0802676c

0800d408 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800d408:	233f      	movs	r3, #63	; 0x3f
 800d40a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d40c:	4b11      	ldr	r3, [pc, #68]	; (800d454 <HAL_RCC_GetClockConfig+0x4c>)
 800d40e:	691a      	ldr	r2, [r3, #16]
 800d410:	f002 0207 	and.w	r2, r2, #7
 800d414:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800d416:	699a      	ldr	r2, [r3, #24]
 800d418:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800d41c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800d41e:	699a      	ldr	r2, [r3, #24]
 800d420:	f002 020f 	and.w	r2, r2, #15
 800d424:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800d426:	699a      	ldr	r2, [r3, #24]
 800d428:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d42c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800d42e:	69da      	ldr	r2, [r3, #28]
 800d430:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d434:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800d436:	69da      	ldr	r2, [r3, #28]
 800d438:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800d43c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800d43e:	6a1b      	ldr	r3, [r3, #32]
 800d440:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d444:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d446:	4b04      	ldr	r3, [pc, #16]	; (800d458 <HAL_RCC_GetClockConfig+0x50>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f003 030f 	and.w	r3, r3, #15
 800d44e:	600b      	str	r3, [r1, #0]
}
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	58024400 	.word	0x58024400
 800d458:	52002000 	.word	0x52002000

0800d45c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d45c:	4b40      	ldr	r3, [pc, #256]	; (800d560 <RCCEx_PLL2_Config+0x104>)
 800d45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d460:	f003 0303 	and.w	r3, r3, #3
 800d464:	2b03      	cmp	r3, #3
 800d466:	d079      	beq.n	800d55c <RCCEx_PLL2_Config+0x100>
{
 800d468:	b570      	push	{r4, r5, r6, lr}
 800d46a:	4605      	mov	r5, r0
 800d46c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d46e:	4a3c      	ldr	r2, [pc, #240]	; (800d560 <RCCEx_PLL2_Config+0x104>)
 800d470:	6813      	ldr	r3, [r2, #0]
 800d472:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d478:	f7fd f8de 	bl	800a638 <HAL_GetTick>
 800d47c:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d47e:	4b38      	ldr	r3, [pc, #224]	; (800d560 <RCCEx_PLL2_Config+0x104>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800d486:	d006      	beq.n	800d496 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d488:	f7fd f8d6 	bl	800a638 <HAL_GetTick>
 800d48c:	1b03      	subs	r3, r0, r4
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d9f5      	bls.n	800d47e <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800d492:	2003      	movs	r0, #3

  }


  return status;
}
 800d494:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d496:	4b32      	ldr	r3, [pc, #200]	; (800d560 <RCCEx_PLL2_Config+0x104>)
 800d498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d49a:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800d49e:	6829      	ldr	r1, [r5, #0]
 800d4a0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800d4a4:	629a      	str	r2, [r3, #40]	; 0x28
 800d4a6:	686a      	ldr	r2, [r5, #4]
 800d4a8:	3a01      	subs	r2, #1
 800d4aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4ae:	68a9      	ldr	r1, [r5, #8]
 800d4b0:	3901      	subs	r1, #1
 800d4b2:	0249      	lsls	r1, r1, #9
 800d4b4:	b289      	uxth	r1, r1
 800d4b6:	430a      	orrs	r2, r1
 800d4b8:	68e9      	ldr	r1, [r5, #12]
 800d4ba:	3901      	subs	r1, #1
 800d4bc:	0409      	lsls	r1, r1, #16
 800d4be:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800d4c2:	430a      	orrs	r2, r1
 800d4c4:	6929      	ldr	r1, [r5, #16]
 800d4c6:	3901      	subs	r1, #1
 800d4c8:	0609      	lsls	r1, r1, #24
 800d4ca:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800d4ce:	430a      	orrs	r2, r1
 800d4d0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d4d8:	6969      	ldr	r1, [r5, #20]
 800d4da:	430a      	orrs	r2, r1
 800d4dc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e0:	f022 0220 	bic.w	r2, r2, #32
 800d4e4:	69a9      	ldr	r1, [r5, #24]
 800d4e6:	430a      	orrs	r2, r1
 800d4e8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ec:	f022 0210 	bic.w	r2, r2, #16
 800d4f0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d4f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d4f4:	4a1b      	ldr	r2, [pc, #108]	; (800d564 <RCCEx_PLL2_Config+0x108>)
 800d4f6:	400a      	ands	r2, r1
 800d4f8:	69e9      	ldr	r1, [r5, #28]
 800d4fa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800d4fe:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d502:	f042 0210 	orr.w	r2, r2, #16
 800d506:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800d508:	b9c6      	cbnz	r6, 800d53c <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d50a:	461a      	mov	r2, r3
 800d50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d512:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800d514:	4a12      	ldr	r2, [pc, #72]	; (800d560 <RCCEx_PLL2_Config+0x104>)
 800d516:	6813      	ldr	r3, [r2, #0]
 800d518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d51c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800d51e:	f7fd f88b 	bl	800a638 <HAL_GetTick>
 800d522:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d524:	4b0e      	ldr	r3, [pc, #56]	; (800d560 <RCCEx_PLL2_Config+0x104>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800d52c:	d114      	bne.n	800d558 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d52e:	f7fd f883 	bl	800a638 <HAL_GetTick>
 800d532:	1b00      	subs	r0, r0, r4
 800d534:	2802      	cmp	r0, #2
 800d536:	d9f5      	bls.n	800d524 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 800d538:	2003      	movs	r0, #3
 800d53a:	e7ab      	b.n	800d494 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800d53c:	2e01      	cmp	r6, #1
 800d53e:	d005      	beq.n	800d54c <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d540:	4a07      	ldr	r2, [pc, #28]	; (800d560 <RCCEx_PLL2_Config+0x104>)
 800d542:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d548:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d54a:	e7e3      	b.n	800d514 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d54c:	4a04      	ldr	r2, [pc, #16]	; (800d560 <RCCEx_PLL2_Config+0x104>)
 800d54e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d554:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d556:	e7dd      	b.n	800d514 <RCCEx_PLL2_Config+0xb8>
  return status;
 800d558:	2000      	movs	r0, #0
 800d55a:	e79b      	b.n	800d494 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 800d55c:	2001      	movs	r0, #1
}
 800d55e:	4770      	bx	lr
 800d560:	58024400 	.word	0x58024400
 800d564:	ffff0007 	.word	0xffff0007

0800d568 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d568:	4b40      	ldr	r3, [pc, #256]	; (800d66c <RCCEx_PLL3_Config+0x104>)
 800d56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d56c:	f003 0303 	and.w	r3, r3, #3
 800d570:	2b03      	cmp	r3, #3
 800d572:	d079      	beq.n	800d668 <RCCEx_PLL3_Config+0x100>
{
 800d574:	b570      	push	{r4, r5, r6, lr}
 800d576:	4605      	mov	r5, r0
 800d578:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d57a:	4a3c      	ldr	r2, [pc, #240]	; (800d66c <RCCEx_PLL3_Config+0x104>)
 800d57c:	6813      	ldr	r3, [r2, #0]
 800d57e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d584:	f7fd f858 	bl	800a638 <HAL_GetTick>
 800d588:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d58a:	4b38      	ldr	r3, [pc, #224]	; (800d66c <RCCEx_PLL3_Config+0x104>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800d592:	d006      	beq.n	800d5a2 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d594:	f7fd f850 	bl	800a638 <HAL_GetTick>
 800d598:	1b03      	subs	r3, r0, r4
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d9f5      	bls.n	800d58a <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800d59e:	2003      	movs	r0, #3

  }


  return status;
}
 800d5a0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d5a2:	4b32      	ldr	r3, [pc, #200]	; (800d66c <RCCEx_PLL3_Config+0x104>)
 800d5a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5a6:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800d5aa:	6829      	ldr	r1, [r5, #0]
 800d5ac:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800d5b0:	629a      	str	r2, [r3, #40]	; 0x28
 800d5b2:	686a      	ldr	r2, [r5, #4]
 800d5b4:	3a01      	subs	r2, #1
 800d5b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5ba:	68a9      	ldr	r1, [r5, #8]
 800d5bc:	3901      	subs	r1, #1
 800d5be:	0249      	lsls	r1, r1, #9
 800d5c0:	b289      	uxth	r1, r1
 800d5c2:	430a      	orrs	r2, r1
 800d5c4:	68e9      	ldr	r1, [r5, #12]
 800d5c6:	3901      	subs	r1, #1
 800d5c8:	0409      	lsls	r1, r1, #16
 800d5ca:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800d5ce:	430a      	orrs	r2, r1
 800d5d0:	6929      	ldr	r1, [r5, #16]
 800d5d2:	3901      	subs	r1, #1
 800d5d4:	0609      	lsls	r1, r1, #24
 800d5d6:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800d5da:	430a      	orrs	r2, r1
 800d5dc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d5e4:	6969      	ldr	r1, [r5, #20]
 800d5e6:	430a      	orrs	r2, r1
 800d5e8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d5f0:	69a9      	ldr	r1, [r5, #24]
 800d5f2:	430a      	orrs	r2, r1
 800d5f4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d5fc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d5fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d600:	4a1b      	ldr	r2, [pc, #108]	; (800d670 <RCCEx_PLL3_Config+0x108>)
 800d602:	400a      	ands	r2, r1
 800d604:	69e9      	ldr	r1, [r5, #28]
 800d606:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800d60a:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d60e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d612:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800d614:	b9c6      	cbnz	r6, 800d648 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d616:	461a      	mov	r2, r3
 800d618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d61e:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 800d620:	4a12      	ldr	r2, [pc, #72]	; (800d66c <RCCEx_PLL3_Config+0x104>)
 800d622:	6813      	ldr	r3, [r2, #0]
 800d624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d628:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800d62a:	f7fd f805 	bl	800a638 <HAL_GetTick>
 800d62e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d630:	4b0e      	ldr	r3, [pc, #56]	; (800d66c <RCCEx_PLL3_Config+0x104>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800d638:	d114      	bne.n	800d664 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d63a:	f7fc fffd 	bl	800a638 <HAL_GetTick>
 800d63e:	1b00      	subs	r0, r0, r4
 800d640:	2802      	cmp	r0, #2
 800d642:	d9f5      	bls.n	800d630 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800d644:	2003      	movs	r0, #3
 800d646:	e7ab      	b.n	800d5a0 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800d648:	2e01      	cmp	r6, #1
 800d64a:	d005      	beq.n	800d658 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d64c:	4a07      	ldr	r2, [pc, #28]	; (800d66c <RCCEx_PLL3_Config+0x104>)
 800d64e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d650:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d654:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d656:	e7e3      	b.n	800d620 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d658:	4a04      	ldr	r2, [pc, #16]	; (800d66c <RCCEx_PLL3_Config+0x104>)
 800d65a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d65c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d660:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d662:	e7dd      	b.n	800d620 <RCCEx_PLL3_Config+0xb8>
  return status;
 800d664:	2000      	movs	r0, #0
 800d666:	e79b      	b.n	800d5a0 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 800d668:	2001      	movs	r0, #1
}
 800d66a:	4770      	bx	lr
 800d66c:	58024400 	.word	0x58024400
 800d670:	ffff0007 	.word	0xffff0007

0800d674 <HAL_RCCEx_PeriphCLKConfig>:
{
 800d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d676:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d678:	6803      	ldr	r3, [r0, #0]
 800d67a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800d67e:	d030      	beq.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800d680:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d686:	d026      	beq.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d688:	d80e      	bhi.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800d68a:	b1eb      	cbz	r3, 800d6c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d68c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d690:	d107      	bne.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d692:	2102      	movs	r1, #2
 800d694:	3004      	adds	r0, #4
 800d696:	f7ff fee1 	bl	800d45c <RCCEx_PLL2_Config>
 800d69a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d69c:	b145      	cbz	r5, 800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800d69e:	462e      	mov	r6, r5
 800d6a0:	e021      	b.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800d6a2:	2601      	movs	r6, #1
 800d6a4:	4635      	mov	r5, r6
 800d6a6:	e01e      	b.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800d6a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d6ac:	d109      	bne.n	800d6c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800d6ae:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d6b0:	4a99      	ldr	r2, [pc, #612]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d6b2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d6b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d6b8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800d6ba:	430b      	orrs	r3, r1
 800d6bc:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d6be:	2600      	movs	r6, #0
 800d6c0:	e011      	b.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800d6c2:	2601      	movs	r6, #1
 800d6c4:	4635      	mov	r5, r6
 800d6c6:	e00e      	b.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6c8:	4a93      	ldr	r2, [pc, #588]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d6ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d6cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d6d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d6d2:	2500      	movs	r5, #0
 800d6d4:	e7ec      	b.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d6d6:	2102      	movs	r1, #2
 800d6d8:	3024      	adds	r0, #36	; 0x24
 800d6da:	f7ff ff45 	bl	800d568 <RCCEx_PLL3_Config>
 800d6de:	4605      	mov	r5, r0
      break;
 800d6e0:	e7dc      	b.n	800d69c <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d6e2:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d6e4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d6ec:	d026      	beq.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800d6ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d6f0:	2b04      	cmp	r3, #4
 800d6f2:	d81f      	bhi.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800d6f4:	e8df f003 	tbb	[pc, r3]
 800d6f8:	08171103 	.word	0x08171103
 800d6fc:	08          	.byte	0x08
 800d6fd:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6fe:	4a86      	ldr	r2, [pc, #536]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d700:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d706:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800d708:	b9bd      	cbnz	r5, 800d73a <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d70a:	4a83      	ldr	r2, [pc, #524]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d70c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d70e:	f023 0307 	bic.w	r3, r3, #7
 800d712:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d714:	430b      	orrs	r3, r1
 800d716:	6513      	str	r3, [r2, #80]	; 0x50
 800d718:	e010      	b.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d71a:	2100      	movs	r1, #0
 800d71c:	1d20      	adds	r0, r4, #4
 800d71e:	f7ff fe9d 	bl	800d45c <RCCEx_PLL2_Config>
 800d722:	4605      	mov	r5, r0
      break;
 800d724:	e7f0      	b.n	800d708 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d726:	2100      	movs	r1, #0
 800d728:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d72c:	f7ff ff1c 	bl	800d568 <RCCEx_PLL3_Config>
 800d730:	4605      	mov	r5, r0
      break;
 800d732:	e7e9      	b.n	800d708 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 800d734:	2601      	movs	r6, #1
 800d736:	4635      	mov	r5, r6
 800d738:	e000      	b.n	800d73c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800d73a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800d73c:	6823      	ldr	r3, [r4, #0]
 800d73e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d742:	d01d      	beq.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 800d744:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d746:	2b80      	cmp	r3, #128	; 0x80
 800d748:	d039      	beq.n	800d7be <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800d74a:	d80b      	bhi.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800d74c:	b38b      	cbz	r3, 800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800d74e:	2b40      	cmp	r3, #64	; 0x40
 800d750:	d105      	bne.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d752:	2100      	movs	r1, #0
 800d754:	1d20      	adds	r0, r4, #4
 800d756:	f7ff fe81 	bl	800d45c <RCCEx_PLL2_Config>
 800d75a:	4605      	mov	r5, r0
      break;
 800d75c:	e008      	b.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 800d75e:	2601      	movs	r6, #1
 800d760:	4635      	mov	r5, r6
 800d762:	e00d      	b.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d768:	d002      	beq.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800d76a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d76e:	d11b      	bne.n	800d7a8 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 800d770:	bb65      	cbnz	r5, 800d7cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800d772:	4a69      	ldr	r2, [pc, #420]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d774:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d776:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800d77a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d77c:	430b      	orrs	r3, r1
 800d77e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800d780:	6823      	ldr	r3, [r4, #0]
 800d782:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800d786:	d035      	beq.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 800d788:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d78a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d78e:	d057      	beq.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d790:	d821      	bhi.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800d792:	2b00      	cmp	r3, #0
 800d794:	d04e      	beq.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800d796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d79a:	d119      	bne.n	800d7d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d79c:	2100      	movs	r1, #0
 800d79e:	1d20      	adds	r0, r4, #4
 800d7a0:	f7ff fe5c 	bl	800d45c <RCCEx_PLL2_Config>
 800d7a4:	4605      	mov	r5, r0
      break;
 800d7a6:	e01c      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 800d7a8:	2bc0      	cmp	r3, #192	; 0xc0
 800d7aa:	d0e1      	beq.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800d7ac:	2601      	movs	r6, #1
 800d7ae:	4635      	mov	r5, r6
 800d7b0:	e7e6      	b.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7b2:	4a59      	ldr	r2, [pc, #356]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d7b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d7b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7ba:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800d7bc:	e7d8      	b.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d7be:	2100      	movs	r1, #0
 800d7c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d7c4:	f7ff fed0 	bl	800d568 <RCCEx_PLL3_Config>
 800d7c8:	4605      	mov	r5, r0
      break;
 800d7ca:	e7d1      	b.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800d7cc:	462e      	mov	r6, r5
 800d7ce:	e7d7      	b.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 800d7d0:	2601      	movs	r6, #1
 800d7d2:	4635      	mov	r5, r6
 800d7d4:	e00e      	b.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800d7d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7da:	d002      	beq.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800d7dc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d7e0:	d122      	bne.n	800d828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 800d7e2:	2d00      	cmp	r5, #0
 800d7e4:	d133      	bne.n	800d84e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800d7e6:	4a4c      	ldr	r2, [pc, #304]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d7e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d7ea:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800d7ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d7f0:	430b      	orrs	r3, r1
 800d7f2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d7f4:	6823      	ldr	r3, [r4, #0]
 800d7f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800d7fa:	d031      	beq.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 800d7fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d7fe:	2b20      	cmp	r3, #32
 800d800:	d041      	beq.n	800d886 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800d802:	d829      	bhi.n	800d858 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800d804:	b133      	cbz	r3, 800d814 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800d806:	2b10      	cmp	r3, #16
 800d808:	d123      	bne.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d80a:	4a43      	ldr	r2, [pc, #268]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d80c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d80e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d812:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800d814:	2d00      	cmp	r5, #0
 800d816:	d13c      	bne.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800d818:	4a3f      	ldr	r2, [pc, #252]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d81a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d81c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d820:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d822:	430b      	orrs	r3, r1
 800d824:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d826:	e01b      	b.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 800d828:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d82c:	d0d9      	beq.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800d82e:	2601      	movs	r6, #1
 800d830:	4635      	mov	r5, r6
 800d832:	e7df      	b.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d834:	4a38      	ldr	r2, [pc, #224]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d836:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d83c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800d83e:	e7d0      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d840:	2100      	movs	r1, #0
 800d842:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d846:	f7ff fe8f 	bl	800d568 <RCCEx_PLL3_Config>
 800d84a:	4605      	mov	r5, r0
      break;
 800d84c:	e7c9      	b.n	800d7e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800d84e:	462e      	mov	r6, r5
 800d850:	e7d0      	b.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 800d852:	2601      	movs	r6, #1
 800d854:	4635      	mov	r5, r6
 800d856:	e003      	b.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800d858:	2b30      	cmp	r3, #48	; 0x30
 800d85a:	d0db      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800d85c:	2601      	movs	r6, #1
 800d85e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d860:	6823      	ldr	r3, [r4, #0]
 800d862:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800d866:	d039      	beq.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 800d868:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d86a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d86e:	d02d      	beq.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x258>
 800d870:	d814      	bhi.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x228>
 800d872:	b32b      	cbz	r3, 800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800d874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d878:	d10d      	bne.n	800d896 <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d87a:	2100      	movs	r1, #0
 800d87c:	1d20      	adds	r0, r4, #4
 800d87e:	f7ff fded 	bl	800d45c <RCCEx_PLL2_Config>
 800d882:	4605      	mov	r5, r0
      break;
 800d884:	e010      	b.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d886:	2102      	movs	r1, #2
 800d888:	1d20      	adds	r0, r4, #4
 800d88a:	f7ff fde7 	bl	800d45c <RCCEx_PLL2_Config>
 800d88e:	4605      	mov	r5, r0
      break;
 800d890:	e7c0      	b.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800d892:	462e      	mov	r6, r5
 800d894:	e7e4      	b.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 800d896:	2601      	movs	r6, #1
 800d898:	4635      	mov	r5, r6
 800d89a:	e01f      	b.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x268>
 800d89c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d8a0:	d002      	beq.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800d8a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d8a6:	d108      	bne.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 800d8a8:	b9bd      	cbnz	r5, 800d8da <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d8aa:	4a1b      	ldr	r2, [pc, #108]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d8ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d8ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8b2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800d8b4:	430b      	orrs	r3, r1
 800d8b6:	6513      	str	r3, [r2, #80]	; 0x50
 800d8b8:	e010      	b.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 800d8ba:	2601      	movs	r6, #1
 800d8bc:	4635      	mov	r5, r6
 800d8be:	e00d      	b.n	800d8dc <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8c0:	4a15      	ldr	r2, [pc, #84]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d8c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d8c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8c8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800d8ca:	e7ed      	b.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d8d2:	f7ff fe49 	bl	800d568 <RCCEx_PLL3_Config>
 800d8d6:	4605      	mov	r5, r0
      break;
 800d8d8:	e7e6      	b.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800d8da:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d8dc:	6823      	ldr	r3, [r4, #0]
 800d8de:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d8e2:	d026      	beq.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 800d8e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d8ea:	d037      	beq.n	800d95c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800d8ec:	d816      	bhi.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d8ee:	b13b      	cbz	r3, 800d900 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d8f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8f4:	d10d      	bne.n	800d912 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d8f6:	2101      	movs	r1, #1
 800d8f8:	1d20      	adds	r0, r4, #4
 800d8fa:	f7ff fdaf 	bl	800d45c <RCCEx_PLL2_Config>
 800d8fe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d900:	bb9d      	cbnz	r5, 800d96a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d902:	4a05      	ldr	r2, [pc, #20]	; (800d918 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d904:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d906:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800d90a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d90c:	430b      	orrs	r3, r1
 800d90e:	6513      	str	r3, [r2, #80]	; 0x50
 800d910:	e00f      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 800d912:	2601      	movs	r6, #1
 800d914:	4635      	mov	r5, r6
 800d916:	e00c      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800d918:	58024400 	.word	0x58024400
 800d91c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d920:	d0ee      	beq.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d922:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d926:	d0eb      	beq.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d928:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d92c:	d0e8      	beq.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d92e:	2601      	movs	r6, #1
 800d930:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800d938:	d025      	beq.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800d93a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800d93e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d942:	d04c      	beq.n	800d9de <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800d944:	d816      	bhi.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800d946:	2b00      	cmp	r3, #0
 800d948:	d03c      	beq.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d94a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d94e:	d10e      	bne.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d950:	2101      	movs	r1, #1
 800d952:	1d20      	adds	r0, r4, #4
 800d954:	f7ff fd82 	bl	800d45c <RCCEx_PLL2_Config>
 800d958:	4605      	mov	r5, r0
      break;
 800d95a:	e033      	b.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d95c:	2101      	movs	r1, #1
 800d95e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d962:	f7ff fe01 	bl	800d568 <RCCEx_PLL3_Config>
 800d966:	4605      	mov	r5, r0
      break;
 800d968:	e7ca      	b.n	800d900 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d96a:	462e      	mov	r6, r5
 800d96c:	e7e1      	b.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 800d96e:	2601      	movs	r6, #1
 800d970:	4635      	mov	r5, r6
 800d972:	e008      	b.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800d974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d978:	d024      	beq.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d97a:	d91d      	bls.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800d97c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800d980:	d020      	beq.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d982:	2601      	movs	r6, #1
 800d984:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800d98c:	d009      	beq.n	800d9a2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 800d98e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d994:	d02c      	beq.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800d996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d99a:	d037      	beq.n	800da0c <HAL_RCCEx_PeriphCLKConfig+0x398>
 800d99c:	b36b      	cbz	r3, 800d9fa <HAL_RCCEx_PeriphCLKConfig+0x386>
 800d99e:	2601      	movs	r6, #1
 800d9a0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d9a2:	6823      	ldr	r3, [r4, #0]
 800d9a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800d9a8:	d045      	beq.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 800d9aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	d86d      	bhi.n	800da8c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d9b0:	e8df f003 	tbb	[pc, r3]
 800d9b4:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 800d9b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d9bc:	d002      	beq.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d9be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9c2:	d109      	bne.n	800d9d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 800d9c4:	b995      	cbnz	r5, 800d9ec <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d9c6:	4a8c      	ldr	r2, [pc, #560]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d9c8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d9ca:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800d9ce:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800d9d2:	430b      	orrs	r3, r1
 800d9d4:	6593      	str	r3, [r2, #88]	; 0x58
 800d9d6:	e7d6      	b.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800d9d8:	2601      	movs	r6, #1
 800d9da:	4635      	mov	r5, r6
 800d9dc:	e7d3      	b.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d9de:	2101      	movs	r1, #1
 800d9e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d9e4:	f7ff fdc0 	bl	800d568 <RCCEx_PLL3_Config>
 800d9e8:	4605      	mov	r5, r0
      break;
 800d9ea:	e7eb      	b.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d9ec:	462e      	mov	r6, r5
 800d9ee:	e7ca      	b.n	800d986 <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9f0:	4a81      	ldr	r2, [pc, #516]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d9f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d9f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d9f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800d9fa:	b96d      	cbnz	r5, 800da18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d9fc:	4a7e      	ldr	r2, [pc, #504]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d9fe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800da00:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800da04:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800da06:	430b      	orrs	r3, r1
 800da08:	6513      	str	r3, [r2, #80]	; 0x50
 800da0a:	e7ca      	b.n	800d9a2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800da0c:	2101      	movs	r1, #1
 800da0e:	1d20      	adds	r0, r4, #4
 800da10:	f7ff fd24 	bl	800d45c <RCCEx_PLL2_Config>
 800da14:	4605      	mov	r5, r0
      break;
 800da16:	e7f0      	b.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x386>
 800da18:	462e      	mov	r6, r5
 800da1a:	e7c2      	b.n	800d9a2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da1c:	4a76      	ldr	r2, [pc, #472]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800da1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800da20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da24:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800da26:	bba5      	cbnz	r5, 800da92 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800da28:	4a73      	ldr	r2, [pc, #460]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800da2a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800da2c:	f023 0303 	bic.w	r3, r3, #3
 800da30:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800da32:	430b      	orrs	r3, r1
 800da34:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800da36:	6823      	ldr	r3, [r4, #0]
 800da38:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800da3c:	d12b      	bne.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	f013 0f01 	tst.w	r3, #1
 800da44:	f000 80a3 	beq.w	800db8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800da48:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800da4c:	2b28      	cmp	r3, #40	; 0x28
 800da4e:	f200 809c 	bhi.w	800db8a <HAL_RCCEx_PeriphCLKConfig+0x516>
 800da52:	e8df f003 	tbb	[pc, r3]
 800da56:	9a89      	.short	0x9a89
 800da58:	9a9a9a9a 	.word	0x9a9a9a9a
 800da5c:	9a849a9a 	.word	0x9a849a9a
 800da60:	9a9a9a9a 	.word	0x9a9a9a9a
 800da64:	9a939a9a 	.word	0x9a939a9a
 800da68:	9a9a9a9a 	.word	0x9a9a9a9a
 800da6c:	9a899a9a 	.word	0x9a899a9a
 800da70:	9a9a9a9a 	.word	0x9a9a9a9a
 800da74:	9a899a9a 	.word	0x9a899a9a
 800da78:	9a9a9a9a 	.word	0x9a9a9a9a
 800da7c:	9a9a      	.short	0x9a9a
 800da7e:	89          	.byte	0x89
 800da7f:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800da80:	2102      	movs	r1, #2
 800da82:	1d20      	adds	r0, r4, #4
 800da84:	f7ff fcea 	bl	800d45c <RCCEx_PLL2_Config>
 800da88:	4605      	mov	r5, r0
      break;
 800da8a:	e7cc      	b.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 800da8c:	2601      	movs	r6, #1
 800da8e:	4635      	mov	r5, r6
 800da90:	e7d1      	b.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800da92:	462e      	mov	r6, r5
 800da94:	e7cf      	b.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800da96:	4a59      	ldr	r2, [pc, #356]	; (800dbfc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800da98:	6813      	ldr	r3, [r2, #0]
 800da9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da9e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800daa0:	f7fc fdca 	bl	800a638 <HAL_GetTick>
 800daa4:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800daa6:	4b55      	ldr	r3, [pc, #340]	; (800dbfc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f413 7f80 	tst.w	r3, #256	; 0x100
 800daae:	d105      	bne.n	800dabc <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dab0:	f7fc fdc2 	bl	800a638 <HAL_GetTick>
 800dab4:	1bc0      	subs	r0, r0, r7
 800dab6:	2864      	cmp	r0, #100	; 0x64
 800dab8:	d9f5      	bls.n	800daa6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 800daba:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	d14a      	bne.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800dac0:	4b4d      	ldr	r3, [pc, #308]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800dac8:	4053      	eors	r3, r2
 800daca:	f413 7f40 	tst.w	r3, #768	; 0x300
 800dace:	d00c      	beq.n	800daea <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dad0:	4b49      	ldr	r3, [pc, #292]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dad2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800dad4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800dad8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dada:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800dade:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dae0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dae2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800dae6:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800dae8:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800daea:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800daee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daf2:	d015      	beq.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 800daf4:	bb8d      	cbnz	r5, 800db5a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800daf6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800dafa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800dafe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800db02:	d01e      	beq.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800db04:	4a3c      	ldr	r2, [pc, #240]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800db06:	6913      	ldr	r3, [r2, #16]
 800db08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800db0c:	6113      	str	r3, [r2, #16]
 800db0e:	493a      	ldr	r1, [pc, #232]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800db10:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800db12:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800db16:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800db1a:	4313      	orrs	r3, r2
 800db1c:	670b      	str	r3, [r1, #112]	; 0x70
 800db1e:	e78e      	b.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 800db20:	f7fc fd8a 	bl	800a638 <HAL_GetTick>
 800db24:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800db26:	4b34      	ldr	r3, [pc, #208]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800db28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db2a:	f013 0f02 	tst.w	r3, #2
 800db2e:	d1e1      	bne.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800db30:	f7fc fd82 	bl	800a638 <HAL_GetTick>
 800db34:	1bc0      	subs	r0, r0, r7
 800db36:	f241 3388 	movw	r3, #5000	; 0x1388
 800db3a:	4298      	cmp	r0, r3
 800db3c:	d9f3      	bls.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 800db3e:	2503      	movs	r5, #3
 800db40:	e7d8      	b.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800db42:	482d      	ldr	r0, [pc, #180]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800db44:	6902      	ldr	r2, [r0, #16]
 800db46:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800db4a:	492d      	ldr	r1, [pc, #180]	; (800dc00 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800db4c:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800db50:	4313      	orrs	r3, r2
 800db52:	6103      	str	r3, [r0, #16]
 800db54:	e7db      	b.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 800db56:	462e      	mov	r6, r5
 800db58:	e771      	b.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 800db5a:	462e      	mov	r6, r5
 800db5c:	e76f      	b.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800db5e:	2101      	movs	r1, #1
 800db60:	1d20      	adds	r0, r4, #4
 800db62:	f7ff fc7b 	bl	800d45c <RCCEx_PLL2_Config>
 800db66:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800db68:	b9ed      	cbnz	r5, 800dba6 <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800db6a:	4a23      	ldr	r2, [pc, #140]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800db6c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800db6e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800db72:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800db76:	430b      	orrs	r3, r1
 800db78:	6553      	str	r3, [r2, #84]	; 0x54
 800db7a:	e008      	b.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800db7c:	2101      	movs	r1, #1
 800db7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800db82:	f7ff fcf1 	bl	800d568 <RCCEx_PLL3_Config>
 800db86:	4605      	mov	r5, r0
      break;
 800db88:	e7ee      	b.n	800db68 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 800db8a:	2601      	movs	r6, #1
 800db8c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800db8e:	6823      	ldr	r3, [r4, #0]
 800db90:	f013 0f02 	tst.w	r3, #2
 800db94:	d016      	beq.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800db96:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800db98:	2b05      	cmp	r3, #5
 800db9a:	d827      	bhi.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x578>
 800db9c:	e8df f003 	tbb	[pc, r3]
 800dba0:	0a1f050a 	.word	0x0a1f050a
 800dba4:	0a0a      	.short	0x0a0a
 800dba6:	462e      	mov	r6, r5
 800dba8:	e7f1      	b.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dbaa:	2101      	movs	r1, #1
 800dbac:	1d20      	adds	r0, r4, #4
 800dbae:	f7ff fc55 	bl	800d45c <RCCEx_PLL2_Config>
 800dbb2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dbb4:	b9ed      	cbnz	r5, 800dbf2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800dbb6:	4a10      	ldr	r2, [pc, #64]	; (800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800dbb8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dbba:	f023 0307 	bic.w	r3, r3, #7
 800dbbe:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800dbc0:	430b      	orrs	r3, r1
 800dbc2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dbc4:	6823      	ldr	r3, [r4, #0]
 800dbc6:	f013 0f04 	tst.w	r3, #4
 800dbca:	d029      	beq.n	800dc20 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800dbcc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800dbd0:	2b05      	cmp	r3, #5
 800dbd2:	d84a      	bhi.n	800dc6a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800dbd4:	e8df f003 	tbb	[pc, r3]
 800dbd8:	1b42161b 	.word	0x1b42161b
 800dbdc:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dbde:	2101      	movs	r1, #1
 800dbe0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dbe4:	f7ff fcc0 	bl	800d568 <RCCEx_PLL3_Config>
 800dbe8:	4605      	mov	r5, r0
      break;
 800dbea:	e7e3      	b.n	800dbb4 <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800dbec:	2601      	movs	r6, #1
 800dbee:	4635      	mov	r5, r6
 800dbf0:	e7e8      	b.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800dbf2:	462e      	mov	r6, r5
 800dbf4:	e7e6      	b.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800dbf6:	bf00      	nop
 800dbf8:	58024400 	.word	0x58024400
 800dbfc:	58024800 	.word	0x58024800
 800dc00:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dc04:	2101      	movs	r1, #1
 800dc06:	1d20      	adds	r0, r4, #4
 800dc08:	f7ff fc28 	bl	800d45c <RCCEx_PLL2_Config>
 800dc0c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dc0e:	bb7d      	cbnz	r5, 800dc70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dc10:	4aa9      	ldr	r2, [pc, #676]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dc12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800dc14:	f023 0307 	bic.w	r3, r3, #7
 800dc18:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800dc1c:	430b      	orrs	r3, r1
 800dc1e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	f013 0f20 	tst.w	r3, #32
 800dc26:	d033      	beq.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800dc28:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800dc2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc30:	d04c      	beq.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x658>
 800dc32:	d822      	bhi.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x606>
 800dc34:	b13b      	cbz	r3, 800dc46 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800dc36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc3a:	d11b      	bne.n	800dc74 <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	1d20      	adds	r0, r4, #4
 800dc40:	f7ff fc0c 	bl	800d45c <RCCEx_PLL2_Config>
 800dc44:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dc46:	2d00      	cmp	r5, #0
 800dc48:	d147      	bne.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dc4a:	4a9b      	ldr	r2, [pc, #620]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dc4c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dc4e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800dc52:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800dc56:	430b      	orrs	r3, r1
 800dc58:	6553      	str	r3, [r2, #84]	; 0x54
 800dc5a:	e019      	b.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dc5c:	2101      	movs	r1, #1
 800dc5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dc62:	f7ff fc81 	bl	800d568 <RCCEx_PLL3_Config>
 800dc66:	4605      	mov	r5, r0
      break;
 800dc68:	e7d1      	b.n	800dc0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800dc6a:	2601      	movs	r6, #1
 800dc6c:	4635      	mov	r5, r6
 800dc6e:	e7d7      	b.n	800dc20 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800dc70:	462e      	mov	r6, r5
 800dc72:	e7d5      	b.n	800dc20 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800dc74:	2601      	movs	r6, #1
 800dc76:	4635      	mov	r5, r6
 800dc78:	e00a      	b.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800dc7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc7e:	d0e2      	beq.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800dc80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc84:	d0df      	beq.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800dc86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dc8a:	d0dc      	beq.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800dc8c:	2601      	movs	r6, #1
 800dc8e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800dc90:	6823      	ldr	r3, [r4, #0]
 800dc92:	f013 0f40 	tst.w	r3, #64	; 0x40
 800dc96:	d030      	beq.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800dc98:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800dc9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dca0:	d04b      	beq.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800dca2:	d81f      	bhi.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800dca4:	b13b      	cbz	r3, 800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800dca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dcaa:	d118      	bne.n	800dcde <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dcac:	2100      	movs	r1, #0
 800dcae:	1d20      	adds	r0, r4, #4
 800dcb0:	f7ff fbd4 	bl	800d45c <RCCEx_PLL2_Config>
 800dcb4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dcb6:	2d00      	cmp	r5, #0
 800dcb8:	d146      	bne.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800dcba:	4a7f      	ldr	r2, [pc, #508]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dcbc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800dcbe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800dcc2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800dcc6:	430b      	orrs	r3, r1
 800dcc8:	6593      	str	r3, [r2, #88]	; 0x58
 800dcca:	e016      	b.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800dccc:	2102      	movs	r1, #2
 800dcce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dcd2:	f7ff fc49 	bl	800d568 <RCCEx_PLL3_Config>
 800dcd6:	4605      	mov	r5, r0
      break;
 800dcd8:	e7b5      	b.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800dcda:	462e      	mov	r6, r5
 800dcdc:	e7d8      	b.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800dcde:	2601      	movs	r6, #1
 800dce0:	4635      	mov	r5, r6
 800dce2:	e00a      	b.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x686>
 800dce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dce8:	d0e5      	beq.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800dcea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dcee:	d0e2      	beq.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800dcf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dcf4:	d0df      	beq.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800dcf6:	2601      	movs	r6, #1
 800dcf8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800dcfa:	6823      	ldr	r3, [r4, #0]
 800dcfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd00:	d032      	beq.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800dd02:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800dd06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd0a:	f000 80a2 	beq.w	800de52 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800dd0e:	d820      	bhi.n	800dd52 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800dd10:	b13b      	cbz	r3, 800dd22 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800dd12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd16:	d119      	bne.n	800dd4c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dd18:	2100      	movs	r1, #0
 800dd1a:	1d20      	adds	r0, r4, #4
 800dd1c:	f7ff fb9e 	bl	800d45c <RCCEx_PLL2_Config>
 800dd20:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800dd22:	2d00      	cmp	r5, #0
 800dd24:	f040 809c 	bne.w	800de60 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800dd28:	4a63      	ldr	r2, [pc, #396]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dd2a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800dd2c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800dd30:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800dd34:	430b      	orrs	r3, r1
 800dd36:	6593      	str	r3, [r2, #88]	; 0x58
 800dd38:	e016      	b.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800dd3a:	2102      	movs	r1, #2
 800dd3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dd40:	f7ff fc12 	bl	800d568 <RCCEx_PLL3_Config>
 800dd44:	4605      	mov	r5, r0
      break;
 800dd46:	e7b6      	b.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800dd48:	462e      	mov	r6, r5
 800dd4a:	e7d6      	b.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800dd4c:	2601      	movs	r6, #1
 800dd4e:	4635      	mov	r5, r6
 800dd50:	e00a      	b.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800dd52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd56:	d0e4      	beq.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800dd58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800dd5c:	d0e1      	beq.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800dd5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800dd62:	d0de      	beq.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800dd64:	2601      	movs	r6, #1
 800dd66:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	f013 0f08 	tst.w	r3, #8
 800dd6e:	d00c      	beq.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800dd70:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800dd74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd78:	d074      	beq.n	800de64 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800dd7a:	4a4f      	ldr	r2, [pc, #316]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dd7c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dd7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800dd82:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800dd86:	430b      	orrs	r3, r1
 800dd88:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	f013 0f10 	tst.w	r3, #16
 800dd90:	d00c      	beq.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800dd92:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800dd96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd9a:	d06c      	beq.n	800de76 <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dd9c:	4a46      	ldr	r2, [pc, #280]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dd9e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800dda0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dda4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800dda8:	430b      	orrs	r3, r1
 800ddaa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ddac:	6823      	ldr	r3, [r4, #0]
 800ddae:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800ddb2:	d00b      	beq.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 800ddb4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800ddb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddbc:	d073      	beq.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800ddbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ddc2:	d066      	beq.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d05f      	beq.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800ddc8:	2601      	movs	r6, #1
 800ddca:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ddcc:	6823      	ldr	r3, [r4, #0]
 800ddce:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800ddd2:	d00c      	beq.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 800ddd4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800ddd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dddc:	d07d      	beq.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x866>
 800ddde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dde2:	d070      	beq.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800dde4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dde8:	d068      	beq.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x848>
 800ddea:	2601      	movs	r6, #1
 800ddec:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ddf4:	d008      	beq.n	800de08 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 800ddf6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d077      	beq.n	800deec <HAL_RCCEx_PeriphCLKConfig+0x878>
 800ddfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de00:	f000 8082 	beq.w	800df08 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800de04:	2601      	movs	r6, #1
 800de06:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800de08:	6823      	ldr	r3, [r4, #0]
 800de0a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800de0e:	f040 8083 	bne.w	800df18 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800de12:	6823      	ldr	r3, [r4, #0]
 800de14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800de18:	f000 808b 	beq.w	800df32 <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 800de1c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800de20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de24:	f000 80c9 	beq.w	800dfba <HAL_RCCEx_PeriphCLKConfig+0x946>
 800de28:	f240 8080 	bls.w	800df2c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800de2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de30:	d003      	beq.n	800de3a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800de32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de36:	f040 80be 	bne.w	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 800de3a:	2d00      	cmp	r5, #0
 800de3c:	f040 80c3 	bne.w	800dfc6 <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800de40:	4a1d      	ldr	r2, [pc, #116]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800de42:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800de44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de48:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800de4c:	430b      	orrs	r3, r1
 800de4e:	6553      	str	r3, [r2, #84]	; 0x54
 800de50:	e06f      	b.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800de52:	2102      	movs	r1, #2
 800de54:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800de58:	f7ff fb86 	bl	800d568 <RCCEx_PLL3_Config>
 800de5c:	4605      	mov	r5, r0
      break;
 800de5e:	e760      	b.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800de60:	462e      	mov	r6, r5
 800de62:	e781      	b.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800de64:	2102      	movs	r1, #2
 800de66:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800de6a:	f7ff fb7d 	bl	800d568 <RCCEx_PLL3_Config>
 800de6e:	2800      	cmp	r0, #0
 800de70:	d083      	beq.n	800dd7a <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 800de72:	2601      	movs	r6, #1
 800de74:	e781      	b.n	800dd7a <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800de76:	2102      	movs	r1, #2
 800de78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800de7c:	f7ff fb74 	bl	800d568 <RCCEx_PLL3_Config>
 800de80:	2800      	cmp	r0, #0
 800de82:	d08b      	beq.n	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 800de84:	2601      	movs	r6, #1
 800de86:	e789      	b.n	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800de88:	2100      	movs	r1, #0
 800de8a:	1d20      	adds	r0, r4, #4
 800de8c:	f7ff fae6 	bl	800d45c <RCCEx_PLL2_Config>
 800de90:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800de92:	b97d      	cbnz	r5, 800deb4 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800de94:	4a08      	ldr	r2, [pc, #32]	; (800deb8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800de96:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800de98:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800de9c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800dea0:	430b      	orrs	r3, r1
 800dea2:	6593      	str	r3, [r2, #88]	; 0x58
 800dea4:	e792      	b.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800dea6:	2102      	movs	r1, #2
 800dea8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800deac:	f7ff fb5c 	bl	800d568 <RCCEx_PLL3_Config>
 800deb0:	4605      	mov	r5, r0
      break;
 800deb2:	e7ee      	b.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800deb4:	462e      	mov	r6, r5
 800deb6:	e789      	b.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0x758>
 800deb8:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800debc:	4a47      	ldr	r2, [pc, #284]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800debe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800dec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dec4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800dec6:	b97d      	cbnz	r5, 800dee8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dec8:	4a44      	ldr	r2, [pc, #272]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800deca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800decc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ded0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800ded4:	430b      	orrs	r3, r1
 800ded6:	6553      	str	r3, [r2, #84]	; 0x54
 800ded8:	e789      	b.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800deda:	2101      	movs	r1, #1
 800dedc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dee0:	f7ff fb42 	bl	800d568 <RCCEx_PLL3_Config>
 800dee4:	4605      	mov	r5, r0
      break;
 800dee6:	e7ee      	b.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800dee8:	462e      	mov	r6, r5
 800deea:	e780      	b.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800deec:	4a3b      	ldr	r2, [pc, #236]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800deee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800def0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800def4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800def6:	b96d      	cbnz	r5, 800df14 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800def8:	4a38      	ldr	r2, [pc, #224]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800defa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800defc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df00:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800df02:	430b      	orrs	r3, r1
 800df04:	64d3      	str	r3, [r2, #76]	; 0x4c
 800df06:	e77f      	b.n	800de08 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800df08:	2102      	movs	r1, #2
 800df0a:	1d20      	adds	r0, r4, #4
 800df0c:	f7ff faa6 	bl	800d45c <RCCEx_PLL2_Config>
 800df10:	4605      	mov	r5, r0
      break;
 800df12:	e7f0      	b.n	800def6 <HAL_RCCEx_PeriphCLKConfig+0x882>
 800df14:	462e      	mov	r6, r5
 800df16:	e777      	b.n	800de08 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800df18:	2102      	movs	r1, #2
 800df1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800df1e:	f7ff fb23 	bl	800d568 <RCCEx_PLL3_Config>
 800df22:	2800      	cmp	r0, #0
 800df24:	f43f af75 	beq.w	800de12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 800df28:	2601      	movs	r6, #1
 800df2a:	e772      	b.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d084      	beq.n	800de3a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800df30:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800df38:	d006      	beq.n	800df48 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800df3a:	4a28      	ldr	r2, [pc, #160]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800df3c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800df3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df42:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800df44:	430b      	orrs	r3, r1
 800df46:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800df48:	6823      	ldr	r3, [r4, #0]
 800df4a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800df4e:	d006      	beq.n	800df5e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800df50:	4a22      	ldr	r2, [pc, #136]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800df52:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800df54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df58:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800df5a:	430b      	orrs	r3, r1
 800df5c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800df64:	d006      	beq.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800df66:	4a1d      	ldr	r2, [pc, #116]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800df68:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800df6a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800df6e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800df70:	430b      	orrs	r3, r1
 800df72:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800df74:	6823      	ldr	r3, [r4, #0]
 800df76:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800df7a:	d009      	beq.n	800df90 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800df7c:	4b17      	ldr	r3, [pc, #92]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800df7e:	691a      	ldr	r2, [r3, #16]
 800df80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800df84:	611a      	str	r2, [r3, #16]
 800df86:	691a      	ldr	r2, [r3, #16]
 800df88:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800df8c:	430a      	orrs	r2, r1
 800df8e:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800df90:	6823      	ldr	r3, [r4, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	db19      	blt.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800df96:	6823      	ldr	r3, [r4, #0]
 800df98:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800df9c:	d007      	beq.n	800dfae <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800df9e:	4a0f      	ldr	r2, [pc, #60]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dfa0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dfa2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800dfa6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800dfaa:	430b      	orrs	r3, r1
 800dfac:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800dfae:	b106      	cbz	r6, 800dfb2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 800dfb0:	2601      	movs	r6, #1
}
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800dfb6:	2601      	movs	r6, #1
 800dfb8:	e7bb      	b.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfba:	4a08      	ldr	r2, [pc, #32]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dfbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800dfbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfc2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800dfc4:	e739      	b.n	800de3a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800dfc6:	462e      	mov	r6, r5
 800dfc8:	e7b3      	b.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dfca:	4a04      	ldr	r2, [pc, #16]	; (800dfdc <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dfcc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800dfce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800dfd2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800dfd4:	430b      	orrs	r3, r1
 800dfd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dfd8:	e7dd      	b.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x922>
 800dfda:	bf00      	nop
 800dfdc:	58024400 	.word	0x58024400

0800dfe0 <SPI_RxISR_8BIT>:
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800dfe0:	6802      	ldr	r2, [r0, #0]
 800dfe2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800dfe4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800dfe8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800dfea:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800dfec:	3301      	adds	r3, #1
 800dfee:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800dff0:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	3b01      	subs	r3, #1
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800dffe:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e002:	b29b      	uxth	r3, r3
 800e004:	b923      	cbnz	r3, 800e010 <SPI_RxISR_8BIT+0x30>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800e006:	6802      	ldr	r2, [r0, #0]
 800e008:	6913      	ldr	r3, [r2, #16]
 800e00a:	f023 0301 	bic.w	r3, r3, #1
 800e00e:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e010:	4770      	bx	lr

0800e012 <SPI_RxISR_16BIT>:
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e012:	6802      	ldr	r2, [r0, #0]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e014:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e016:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800e018:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800e01a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e01c:	3302      	adds	r3, #2
 800e01e:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800e020:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e024:	b29b      	uxth	r3, r3
 800e026:	3b01      	subs	r3, #1
 800e028:	b29b      	uxth	r3, r3
 800e02a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800e02e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e032:	b29b      	uxth	r3, r3
 800e034:	b923      	cbnz	r3, 800e040 <SPI_RxISR_16BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800e036:	6802      	ldr	r2, [r0, #0]
 800e038:	6913      	ldr	r3, [r2, #16]
 800e03a:	f023 0301 	bic.w	r3, r3, #1
 800e03e:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e040:	4770      	bx	lr

0800e042 <SPI_RxISR_32BIT>:
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800e042:	6802      	ldr	r2, [r0, #0]
 800e044:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e046:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e048:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800e04a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800e04c:	3304      	adds	r3, #4
 800e04e:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800e050:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e054:	b29b      	uxth	r3, r3
 800e056:	3b01      	subs	r3, #1
 800e058:	b29b      	uxth	r3, r3
 800e05a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800e05e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800e062:	b29b      	uxth	r3, r3
 800e064:	b923      	cbnz	r3, 800e070 <SPI_RxISR_32BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800e066:	6802      	ldr	r2, [r0, #0]
 800e068:	6913      	ldr	r3, [r2, #16]
 800e06a:	f023 0301 	bic.w	r3, r3, #1
 800e06e:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e070:	4770      	bx	lr

0800e072 <SPI_TxISR_8BIT>:
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 800e072:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e074:	6803      	ldr	r3, [r0, #0]
 800e076:	7812      	ldrb	r2, [r2, #0]
 800e078:	f883 2020 	strb.w	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800e07c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e07e:	3301      	adds	r3, #1
 800e080:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800e082:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e086:	b29b      	uxth	r3, r3
 800e088:	3b01      	subs	r3, #1
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800e090:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e094:	b29b      	uxth	r3, r3
 800e096:	b923      	cbnz	r3, 800e0a2 <SPI_TxISR_8BIT+0x30>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800e098:	6802      	ldr	r2, [r0, #0]
 800e09a:	6913      	ldr	r3, [r2, #16]
 800e09c:	f023 0302 	bic.w	r3, r3, #2
 800e0a0:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e0a2:	4770      	bx	lr

0800e0a4 <SPI_TxISR_16BIT>:
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e0a4:	6803      	ldr	r3, [r0, #0]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e0a6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e0a8:	8812      	ldrh	r2, [r2, #0]
 800e0aa:	841a      	strh	r2, [r3, #32]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0ac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e0ae:	3302      	adds	r3, #2
 800e0b0:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800e0b2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800e0c0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	b923      	cbnz	r3, 800e0d2 <SPI_TxISR_16BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800e0c8:	6802      	ldr	r2, [r0, #0]
 800e0ca:	6913      	ldr	r3, [r2, #16]
 800e0cc:	f023 0302 	bic.w	r3, r3, #2
 800e0d0:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e0d2:	4770      	bx	lr

0800e0d4 <SPI_TxISR_32BIT>:
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e0d4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e0d6:	6803      	ldr	r3, [r0, #0]
 800e0d8:	6812      	ldr	r2, [r2, #0]
 800e0da:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800e0dc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e0de:	3304      	adds	r3, #4
 800e0e0:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800e0e2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800e0f0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	b923      	cbnz	r3, 800e102 <SPI_TxISR_32BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800e0f8:	6802      	ldr	r2, [r0, #0]
 800e0fa:	6913      	ldr	r3, [r2, #16]
 800e0fc:	f023 0302 	bic.w	r3, r3, #2
 800e100:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800e102:	4770      	bx	lr

0800e104 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e104:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800e106:	6802      	ldr	r2, [r0, #0]
 800e108:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e10a:	6991      	ldr	r1, [r2, #24]
 800e10c:	f041 0108 	orr.w	r1, r1, #8
 800e110:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e112:	6801      	ldr	r1, [r0, #0]
 800e114:	698a      	ldr	r2, [r1, #24]
 800e116:	f042 0210 	orr.w	r2, r2, #16
 800e11a:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e11c:	6801      	ldr	r1, [r0, #0]
 800e11e:	680a      	ldr	r2, [r1, #0]
 800e120:	f022 0201 	bic.w	r2, r2, #1
 800e124:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e126:	6801      	ldr	r1, [r0, #0]
 800e128:	690c      	ldr	r4, [r1, #16]
 800e12a:	4a29      	ldr	r2, [pc, #164]	; (800e1d0 <SPI_CloseTransfer+0xcc>)
 800e12c:	4022      	ands	r2, r4
 800e12e:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e130:	6801      	ldr	r1, [r0, #0]
 800e132:	688a      	ldr	r2, [r1, #8]
 800e134:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e138:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e13a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800e13e:	b2d2      	uxtb	r2, r2
 800e140:	2a04      	cmp	r2, #4
 800e142:	d00d      	beq.n	800e160 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e144:	f013 0f20 	tst.w	r3, #32
 800e148:	d00a      	beq.n	800e160 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e14a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800e14e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e152:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e156:	6801      	ldr	r1, [r0, #0]
 800e158:	698a      	ldr	r2, [r1, #24]
 800e15a:	f042 0220 	orr.w	r2, r2, #32
 800e15e:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e160:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800e164:	b2d2      	uxtb	r2, r2
 800e166:	2a03      	cmp	r2, #3
 800e168:	d00d      	beq.n	800e186 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e16a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e16e:	d00a      	beq.n	800e186 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e170:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800e174:	f042 0204 	orr.w	r2, r2, #4
 800e178:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e17c:	6801      	ldr	r1, [r0, #0]
 800e17e:	698a      	ldr	r2, [r1, #24]
 800e180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e184:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e186:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e18a:	d00a      	beq.n	800e1a2 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e18c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800e190:	f042 0201 	orr.w	r2, r2, #1
 800e194:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e198:	6801      	ldr	r1, [r0, #0]
 800e19a:	698a      	ldr	r2, [r1, #24]
 800e19c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1a0:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e1a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e1a6:	d00a      	beq.n	800e1be <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e1a8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800e1ac:	f043 0308 	orr.w	r3, r3, #8
 800e1b0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e1b4:	6802      	ldr	r2, [r0, #0]
 800e1b6:	6993      	ldr	r3, [r2, #24]
 800e1b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e1bc:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e1c4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800e1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	fffffc90 	.word	0xfffffc90

0800e1d4 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e1d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e1d6:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e1d8:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e1da:	3008      	adds	r0, #8
 800e1dc:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800e1de:	fb03 0000 	mla	r0, r3, r0, r0
 800e1e2:	4770      	bx	lr

0800e1e4 <SPI_WaitOnFlagUntilTimeout>:
{
 800e1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e8:	4607      	mov	r7, r0
 800e1ea:	460e      	mov	r6, r1
 800e1ec:	4615      	mov	r5, r2
 800e1ee:	4698      	mov	r8, r3
 800e1f0:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e1f2:	e000      	b.n	800e1f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1f4:	b1c4      	cbz	r4, 800e228 <SPI_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	695b      	ldr	r3, [r3, #20]
 800e1fa:	ea36 0303 	bics.w	r3, r6, r3
 800e1fe:	bf0c      	ite	eq
 800e200:	f04f 0c01 	moveq.w	ip, #1
 800e204:	f04f 0c00 	movne.w	ip, #0
 800e208:	45ac      	cmp	ip, r5
 800e20a:	d10a      	bne.n	800e222 <SPI_WaitOnFlagUntilTimeout+0x3e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e20c:	f7fc fa14 	bl	800a638 <HAL_GetTick>
 800e210:	eba0 0008 	sub.w	r0, r0, r8
 800e214:	42a0      	cmp	r0, r4
 800e216:	d3ed      	bcc.n	800e1f4 <SPI_WaitOnFlagUntilTimeout+0x10>
 800e218:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e21c:	d0ea      	beq.n	800e1f4 <SPI_WaitOnFlagUntilTimeout+0x10>
      return HAL_TIMEOUT;
 800e21e:	2003      	movs	r0, #3
 800e220:	e000      	b.n	800e224 <SPI_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 800e222:	2000      	movs	r0, #0
}
 800e224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_TIMEOUT;
 800e228:	2003      	movs	r0, #3
 800e22a:	e7fb      	b.n	800e224 <SPI_WaitOnFlagUntilTimeout+0x40>

0800e22c <HAL_SPI_Init>:
  if (hspi == NULL)
 800e22c:	2800      	cmp	r0, #0
 800e22e:	f000 80a3 	beq.w	800e378 <HAL_SPI_Init+0x14c>
{
 800e232:	b570      	push	{r4, r5, r6, lr}
 800e234:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e236:	2300      	movs	r3, #0
 800e238:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e23a:	6805      	ldr	r5, [r0, #0]
 800e23c:	4b52      	ldr	r3, [pc, #328]	; (800e388 <HAL_SPI_Init+0x15c>)
 800e23e:	4e53      	ldr	r6, [pc, #332]	; (800e38c <HAL_SPI_Init+0x160>)
 800e240:	429d      	cmp	r5, r3
 800e242:	bf18      	it	ne
 800e244:	42b5      	cmpne	r5, r6
 800e246:	bf14      	ite	ne
 800e248:	2601      	movne	r6, #1
 800e24a:	2600      	moveq	r6, #0
 800e24c:	d007      	beq.n	800e25e <HAL_SPI_Init+0x32>
 800e24e:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800e252:	429d      	cmp	r5, r3
 800e254:	d003      	beq.n	800e25e <HAL_SPI_Init+0x32>
 800e256:	68c3      	ldr	r3, [r0, #12]
 800e258:	2b0f      	cmp	r3, #15
 800e25a:	f200 808f 	bhi.w	800e37c <HAL_SPI_Init+0x150>
  packet_length = SPI_GetPacketSize(hspi);
 800e25e:	4620      	mov	r0, r4
 800e260:	f7ff ffb8 	bl	800e1d4 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e264:	b12e      	cbz	r6, 800e272 <HAL_SPI_Init+0x46>
 800e266:	4b4a      	ldr	r3, [pc, #296]	; (800e390 <HAL_SPI_Init+0x164>)
 800e268:	429d      	cmp	r5, r3
 800e26a:	d002      	beq.n	800e272 <HAL_SPI_Init+0x46>
 800e26c:	2808      	cmp	r0, #8
 800e26e:	f200 8087 	bhi.w	800e380 <HAL_SPI_Init+0x154>
 800e272:	4a45      	ldr	r2, [pc, #276]	; (800e388 <HAL_SPI_Init+0x15c>)
 800e274:	4b45      	ldr	r3, [pc, #276]	; (800e38c <HAL_SPI_Init+0x160>)
 800e276:	429d      	cmp	r5, r3
 800e278:	bf18      	it	ne
 800e27a:	4295      	cmpne	r5, r2
 800e27c:	d003      	beq.n	800e286 <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e27e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e282:	429d      	cmp	r5, r3
 800e284:	d101      	bne.n	800e28a <HAL_SPI_Init+0x5e>
 800e286:	2810      	cmp	r0, #16
 800e288:	d87c      	bhi.n	800e384 <HAL_SPI_Init+0x158>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800e28a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d059      	beq.n	800e346 <HAL_SPI_Init+0x11a>
  hspi->State = HAL_SPI_STATE_BUSY;
 800e292:	2302      	movs	r3, #2
 800e294:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800e298:	6822      	ldr	r2, [r4, #0]
 800e29a:	6813      	ldr	r3, [r2, #0]
 800e29c:	f023 0301 	bic.w	r3, r3, #1
 800e2a0:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e2a2:	6821      	ldr	r1, [r4, #0]
 800e2a4:	688a      	ldr	r2, [r1, #8]
 800e2a6:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e2aa:	69a3      	ldr	r3, [r4, #24]
 800e2ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e2b0:	d04f      	beq.n	800e352 <HAL_SPI_Init+0x126>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e2b2:	69e3      	ldr	r3, [r4, #28]
 800e2b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e2b6:	430b      	orrs	r3, r1
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	68e1      	ldr	r1, [r4, #12]
 800e2c0:	6822      	ldr	r2, [r4, #0]
 800e2c2:	430b      	orrs	r3, r1
 800e2c4:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e2c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	69a2      	ldr	r2, [r4, #24]
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	6922      	ldr	r2, [r4, #16]
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	6962      	ldr	r2, [r4, #20]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	6a22      	ldr	r2, [r4, #32]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	6862      	ldr	r2, [r4, #4]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	68a2      	ldr	r2, [r4, #8]
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e2f2:	6822      	ldr	r2, [r4, #0]
 800e2f4:	430b      	orrs	r3, r1
 800e2f6:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e2f8:	6863      	ldr	r3, [r4, #4]
 800e2fa:	b96b      	cbnz	r3, 800e318 <HAL_SPI_Init+0xec>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e2fc:	6822      	ldr	r2, [r4, #0]
 800e2fe:	6893      	ldr	r3, [r2, #8]
 800e300:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800e304:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e308:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e30a:	6822      	ldr	r2, [r4, #0]
 800e30c:	6893      	ldr	r3, [r2, #8]
 800e30e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e316:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e318:	6822      	ldr	r2, [r4, #0]
 800e31a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e31c:	f023 0301 	bic.w	r3, r3, #1
 800e320:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e322:	6863      	ldr	r3, [r4, #4]
 800e324:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800e328:	d006      	beq.n	800e338 <HAL_SPI_Init+0x10c>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e32a:	6822      	ldr	r2, [r4, #0]
 800e32c:	68d3      	ldr	r3, [r2, #12]
 800e32e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e332:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e334:	430b      	orrs	r3, r1
 800e336:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e338:	2000      	movs	r0, #0
 800e33a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e33e:	2301      	movs	r3, #1
 800e340:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800e344:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800e346:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800e34a:	4620      	mov	r0, r4
 800e34c:	f7f4 fef2 	bl	8003134 <HAL_SPI_MspInit>
 800e350:	e79f      	b.n	800e292 <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e352:	6863      	ldr	r3, [r4, #4]
 800e354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e358:	d006      	beq.n	800e368 <HAL_SPI_Init+0x13c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1a9      	bne.n	800e2b2 <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e35e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e364:	d1a5      	bne.n	800e2b2 <HAL_SPI_Init+0x86>
 800e366:	e002      	b.n	800e36e <HAL_SPI_Init+0x142>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e368:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d1f5      	bne.n	800e35a <HAL_SPI_Init+0x12e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e36e:	680b      	ldr	r3, [r1, #0]
 800e370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e374:	600b      	str	r3, [r1, #0]
 800e376:	e79c      	b.n	800e2b2 <HAL_SPI_Init+0x86>
    return HAL_ERROR;
 800e378:	2001      	movs	r0, #1
}
 800e37a:	4770      	bx	lr
    return HAL_ERROR;
 800e37c:	2001      	movs	r0, #1
 800e37e:	e7e1      	b.n	800e344 <HAL_SPI_Init+0x118>
    return HAL_ERROR;
 800e380:	2001      	movs	r0, #1
 800e382:	e7df      	b.n	800e344 <HAL_SPI_Init+0x118>
 800e384:	2001      	movs	r0, #1
 800e386:	e7dd      	b.n	800e344 <HAL_SPI_Init+0x118>
 800e388:	40013000 	.word	0x40013000
 800e38c:	40003800 	.word	0x40003800
 800e390:	40003c00 	.word	0x40003c00

0800e394 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800e394:	b198      	cbz	r0, 800e3be <HAL_SPI_DeInit+0x2a>
{
 800e396:	b510      	push	{r4, lr}
 800e398:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800e39a:	2302      	movs	r3, #2
 800e39c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800e3a0:	6802      	ldr	r2, [r0, #0]
 800e3a2:	6813      	ldr	r3, [r2, #0]
 800e3a4:	f023 0301 	bic.w	r3, r3, #1
 800e3a8:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800e3aa:	f7f4 ff2f 	bl	800320c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 800e3b4:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  __HAL_UNLOCK(hspi);
 800e3b8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800e3bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e3be:	2001      	movs	r0, #1
}
 800e3c0:	4770      	bx	lr

0800e3c2 <HAL_SPI_TransmitReceive>:
{
 800e3c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	461d      	mov	r5, r3
 800e3ca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e3cc:	f8d0 a000 	ldr.w	sl, [r0]
  __HAL_LOCK(hspi);
 800e3d0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	f000 8179 	beq.w	800e6cc <HAL_SPI_TransmitReceive+0x30a>
 800e3da:	4604      	mov	r4, r0
 800e3dc:	4688      	mov	r8, r1
 800e3de:	4691      	mov	r9, r2
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800e3e6:	f7fc f927 	bl	800a638 <HAL_GetTick>
 800e3ea:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 800e3ec:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800e3f0:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800e3f2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d007      	beq.n	800e408 <HAL_SPI_TransmitReceive+0x46>
 800e3f8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800e3fc:	d13d      	bne.n	800e47a <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e3fe:	68a2      	ldr	r2, [r4, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800e400:	2a00      	cmp	r2, #0
 800e402:	d13a      	bne.n	800e47a <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e404:	2b04      	cmp	r3, #4
 800e406:	d138      	bne.n	800e47a <HAL_SPI_TransmitReceive+0xb8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e408:	f1b9 0f00 	cmp.w	r9, #0
 800e40c:	bf18      	it	ne
 800e40e:	f1b8 0f00 	cmpne.w	r8, #0
 800e412:	d039      	beq.n	800e488 <HAL_SPI_TransmitReceive+0xc6>
 800e414:	2d00      	cmp	r5, #0
 800e416:	d037      	beq.n	800e488 <HAL_SPI_TransmitReceive+0xc6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e418:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	2b04      	cmp	r3, #4
 800e420:	d002      	beq.n	800e428 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e422:	2305      	movs	r3, #5
 800e424:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e428:	2300      	movs	r3, #0
 800e42a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e42e:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e432:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e436:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e43a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e43e:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e442:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800e446:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e448:	6763      	str	r3, [r4, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e44a:	6822      	ldr	r2, [r4, #0]
 800e44c:	6851      	ldr	r1, [r2, #4]
 800e44e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800e452:	400b      	ands	r3, r1
 800e454:	432b      	orrs	r3, r5
 800e456:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800e458:	6822      	ldr	r2, [r4, #0]
 800e45a:	6813      	ldr	r3, [r2, #0]
 800e45c:	f043 0301 	orr.w	r3, r3, #1
 800e460:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e462:	6863      	ldr	r3, [r4, #4]
 800e464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e468:	d013      	beq.n	800e492 <HAL_SPI_TransmitReceive+0xd0>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e46a:	68e3      	ldr	r3, [r4, #12]
 800e46c:	2b0f      	cmp	r3, #15
 800e46e:	d868      	bhi.n	800e542 <HAL_SPI_TransmitReceive+0x180>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e470:	2b07      	cmp	r3, #7
 800e472:	f200 80bb 	bhi.w	800e5ec <HAL_SPI_TransmitReceive+0x22a>
  initial_RxXferCount = Size;
 800e476:	46a8      	mov	r8, r5
 800e478:	e0c4      	b.n	800e604 <HAL_SPI_TransmitReceive+0x242>
    __HAL_UNLOCK(hspi);
 800e47a:	2300      	movs	r3, #0
 800e47c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e480:	2002      	movs	r0, #2
}
 800e482:	b002      	add	sp, #8
 800e484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800e488:	2300      	movs	r3, #0
 800e48a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e48e:	2001      	movs	r0, #1
 800e490:	e7f7      	b.n	800e482 <HAL_SPI_TransmitReceive+0xc0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e492:	6822      	ldr	r2, [r4, #0]
 800e494:	6813      	ldr	r3, [r2, #0]
 800e496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e49a:	6013      	str	r3, [r2, #0]
 800e49c:	e7e5      	b.n	800e46a <HAL_SPI_TransmitReceive+0xa8>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	6959      	ldr	r1, [r3, #20]
 800e4a2:	f248 0208 	movw	r2, #32776	; 0x8008
 800e4a6:	4211      	tst	r1, r2
 800e4a8:	d013      	beq.n	800e4d2 <HAL_SPI_TransmitReceive+0x110>
 800e4aa:	f1b8 0f00 	cmp.w	r8, #0
 800e4ae:	d010      	beq.n	800e4d2 <HAL_SPI_TransmitReceive+0x110>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b4:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4b8:	3304      	adds	r3, #4
 800e4ba:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800e4bc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e4ca:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800e4ce:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4d2:	f7fc f8b1 	bl	800a638 <HAL_GetTick>
 800e4d6:	1bc0      	subs	r0, r0, r7
 800e4d8:	42b0      	cmp	r0, r6
 800e4da:	d302      	bcc.n	800e4e2 <HAL_SPI_TransmitReceive+0x120>
 800e4dc:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e4e0:	d11e      	bne.n	800e520 <HAL_SPI_TransmitReceive+0x15e>
 800e4e2:	b1ee      	cbz	r6, 800e520 <HAL_SPI_TransmitReceive+0x15e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e4e4:	ea45 0308 	orr.w	r3, r5, r8
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	f000 80d2 	beq.w	800e694 <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	695a      	ldr	r2, [r3, #20]
 800e4f4:	f012 0f02 	tst.w	r2, #2
 800e4f8:	d0d1      	beq.n	800e49e <HAL_SPI_TransmitReceive+0xdc>
 800e4fa:	2d00      	cmp	r5, #0
 800e4fc:	d0cf      	beq.n	800e49e <HAL_SPI_TransmitReceive+0xdc>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e4fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e500:	6812      	ldr	r2, [r2, #0]
 800e502:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e504:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e506:	3304      	adds	r3, #4
 800e508:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800e50a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e50e:	b29b      	uxth	r3, r3
 800e510:	3b01      	subs	r3, #1
 800e512:	b29b      	uxth	r3, r3
 800e514:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e518:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800e51c:	b2ad      	uxth	r5, r5
 800e51e:	e7be      	b.n	800e49e <HAL_SPI_TransmitReceive+0xdc>
        SPI_CloseTransfer(hspi);
 800e520:	4620      	mov	r0, r4
 800e522:	f7ff fdef 	bl	800e104 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800e526:	2300      	movs	r3, #0
 800e528:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e52c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e534:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e538:	2301      	movs	r3, #1
 800e53a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800e53e:	2003      	movs	r0, #3
 800e540:	e79f      	b.n	800e482 <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800e542:	46a8      	mov	r8, r5
 800e544:	e7ce      	b.n	800e4e4 <HAL_SPI_TransmitReceive+0x122>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e546:	f7fc f877 	bl	800a638 <HAL_GetTick>
 800e54a:	1bc0      	subs	r0, r0, r7
 800e54c:	42b0      	cmp	r0, r6
 800e54e:	d302      	bcc.n	800e556 <HAL_SPI_TransmitReceive+0x194>
 800e550:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e554:	d139      	bne.n	800e5ca <HAL_SPI_TransmitReceive+0x208>
 800e556:	2e00      	cmp	r6, #0
 800e558:	d037      	beq.n	800e5ca <HAL_SPI_TransmitReceive+0x208>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e55a:	ea45 0308 	orr.w	r3, r5, r8
 800e55e:	b29b      	uxth	r3, r3
 800e560:	2b00      	cmp	r3, #0
 800e562:	f000 8097 	beq.w	800e694 <HAL_SPI_TransmitReceive+0x2d2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e566:	6823      	ldr	r3, [r4, #0]
 800e568:	695b      	ldr	r3, [r3, #20]
 800e56a:	f013 0f02 	tst.w	r3, #2
 800e56e:	d011      	beq.n	800e594 <HAL_SPI_TransmitReceive+0x1d2>
 800e570:	b185      	cbz	r5, 800e594 <HAL_SPI_TransmitReceive+0x1d2>
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e572:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e574:	881b      	ldrh	r3, [r3, #0]
 800e576:	f8aa 3020 	strh.w	r3, [sl, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e57a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e57c:	3302      	adds	r3, #2
 800e57e:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800e580:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e584:	b29b      	uxth	r3, r3
 800e586:	3b01      	subs	r3, #1
 800e588:	b29b      	uxth	r3, r3
 800e58a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e58e:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800e592:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800e594:	6823      	ldr	r3, [r4, #0]
 800e596:	695b      	ldr	r3, [r3, #20]
 800e598:	f013 0f01 	tst.w	r3, #1
 800e59c:	d0d3      	beq.n	800e546 <HAL_SPI_TransmitReceive+0x184>
 800e59e:	f1b8 0f00 	cmp.w	r8, #0
 800e5a2:	d0d0      	beq.n	800e546 <HAL_SPI_TransmitReceive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5a6:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 800e5aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5ae:	3302      	adds	r3, #2
 800e5b0:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e5b2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e5c0:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800e5c4:	fa1f f888 	uxth.w	r8, r8
 800e5c8:	e7bd      	b.n	800e546 <HAL_SPI_TransmitReceive+0x184>
        SPI_CloseTransfer(hspi);
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	f7ff fd9a 	bl	800e104 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e5d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e5da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5de:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800e5e8:	2003      	movs	r0, #3
 800e5ea:	e74a      	b.n	800e482 <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800e5ec:	46a8      	mov	r8, r5
 800e5ee:	e7b4      	b.n	800e55a <HAL_SPI_TransmitReceive+0x198>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5f0:	f7fc f822 	bl	800a638 <HAL_GetTick>
 800e5f4:	1bc0      	subs	r0, r0, r7
 800e5f6:	42b0      	cmp	r0, r6
 800e5f8:	d302      	bcc.n	800e600 <HAL_SPI_TransmitReceive+0x23e>
 800e5fa:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e5fe:	d138      	bne.n	800e672 <HAL_SPI_TransmitReceive+0x2b0>
 800e600:	2e00      	cmp	r6, #0
 800e602:	d036      	beq.n	800e672 <HAL_SPI_TransmitReceive+0x2b0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e604:	ea45 0308 	orr.w	r3, r5, r8
 800e608:	b29b      	uxth	r3, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d042      	beq.n	800e694 <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e60e:	6823      	ldr	r3, [r4, #0]
 800e610:	695a      	ldr	r2, [r3, #20]
 800e612:	f012 0f02 	tst.w	r2, #2
 800e616:	d011      	beq.n	800e63c <HAL_SPI_TransmitReceive+0x27a>
 800e618:	b185      	cbz	r5, 800e63c <HAL_SPI_TransmitReceive+0x27a>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e61a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e61c:	7812      	ldrb	r2, [r2, #0]
 800e61e:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e622:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e624:	3301      	adds	r3, #1
 800e626:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800e628:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	3b01      	subs	r3, #1
 800e630:	b29b      	uxth	r3, r3
 800e632:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e636:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800e63a:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800e63c:	6823      	ldr	r3, [r4, #0]
 800e63e:	695a      	ldr	r2, [r3, #20]
 800e640:	f012 0f01 	tst.w	r2, #1
 800e644:	d0d4      	beq.n	800e5f0 <HAL_SPI_TransmitReceive+0x22e>
 800e646:	f1b8 0f00 	cmp.w	r8, #0
 800e64a:	d0d1      	beq.n	800e5f0 <HAL_SPI_TransmitReceive+0x22e>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e64c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e64e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e652:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e656:	3301      	adds	r3, #1
 800e658:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e65a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e65e:	b29b      	uxth	r3, r3
 800e660:	3b01      	subs	r3, #1
 800e662:	b29b      	uxth	r3, r3
 800e664:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e668:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800e66c:	fa1f f888 	uxth.w	r8, r8
 800e670:	e7be      	b.n	800e5f0 <HAL_SPI_TransmitReceive+0x22e>
        SPI_CloseTransfer(hspi);
 800e672:	4620      	mov	r0, r4
 800e674:	f7ff fd46 	bl	800e104 <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800e678:	2300      	movs	r3, #0
 800e67a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e67e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e686:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e68a:	2301      	movs	r3, #1
 800e68c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800e690:	2003      	movs	r0, #3
 800e692:	e6f6      	b.n	800e482 <HAL_SPI_TransmitReceive+0xc0>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e694:	9600      	str	r6, [sp, #0]
 800e696:	463b      	mov	r3, r7
 800e698:	2200      	movs	r2, #0
 800e69a:	2108      	movs	r1, #8
 800e69c:	4620      	mov	r0, r4
 800e69e:	f7ff fda1 	bl	800e1e4 <SPI_WaitOnFlagUntilTimeout>
 800e6a2:	b128      	cbz	r0, 800e6b0 <HAL_SPI_TransmitReceive+0x2ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e6a4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e6a8:	f043 0320 	orr.w	r3, r3, #32
 800e6ac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f7ff fd27 	bl	800e104 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6c2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e6c6:	b91b      	cbnz	r3, 800e6d0 <HAL_SPI_TransmitReceive+0x30e>
  return errorcode;
 800e6c8:	2000      	movs	r0, #0
 800e6ca:	e6da      	b.n	800e482 <HAL_SPI_TransmitReceive+0xc0>
  __HAL_LOCK(hspi);
 800e6cc:	2002      	movs	r0, #2
 800e6ce:	e6d8      	b.n	800e482 <HAL_SPI_TransmitReceive+0xc0>
    return HAL_ERROR;
 800e6d0:	2001      	movs	r0, #1
 800e6d2:	e6d6      	b.n	800e482 <HAL_SPI_TransmitReceive+0xc0>

0800e6d4 <HAL_SPI_Receive>:
{
 800e6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6d8:	b082      	sub	sp, #8
 800e6da:	4604      	mov	r4, r0
 800e6dc:	468a      	mov	sl, r1
 800e6de:	4691      	mov	r9, r2
 800e6e0:	461d      	mov	r5, r3
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e6e2:	f8d0 8000 	ldr.w	r8, [r0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e6e6:	6843      	ldr	r3, [r0, #4]
 800e6e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e6ec:	d042      	beq.n	800e774 <HAL_SPI_Receive+0xa0>
  __HAL_LOCK(hspi);
 800e6ee:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	f000 810c 	beq.w	800e910 <HAL_SPI_Receive+0x23c>
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800e6fe:	f7fb ff9b 	bl	800a638 <HAL_GetTick>
 800e702:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800e704:	f894 6081 	ldrb.w	r6, [r4, #129]	; 0x81
 800e708:	b2f6      	uxtb	r6, r6
 800e70a:	2e01      	cmp	r6, #1
 800e70c:	d13f      	bne.n	800e78e <HAL_SPI_Receive+0xba>
  if ((pData == NULL) || (Size == 0UL))
 800e70e:	f1b9 0f00 	cmp.w	r9, #0
 800e712:	bf18      	it	ne
 800e714:	f1ba 0f00 	cmpne.w	sl, #0
 800e718:	d041      	beq.n	800e79e <HAL_SPI_Receive+0xca>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e71a:	2304      	movs	r3, #4
 800e71c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e720:	2300      	movs	r3, #0
 800e722:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e726:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e72a:	f8a4 9068 	strh.w	r9, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e72e:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800e732:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e734:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e738:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e73c:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e73e:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e740:	68a3      	ldr	r3, [r4, #8]
 800e742:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e746:	d02e      	beq.n	800e7a6 <HAL_SPI_Receive+0xd2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e748:	6823      	ldr	r3, [r4, #0]
 800e74a:	6859      	ldr	r1, [r3, #4]
 800e74c:	4a71      	ldr	r2, [pc, #452]	; (800e914 <HAL_SPI_Receive+0x240>)
 800e74e:	400a      	ands	r2, r1
 800e750:	ea49 0202 	orr.w	r2, r9, r2
 800e754:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800e756:	6822      	ldr	r2, [r4, #0]
 800e758:	6813      	ldr	r3, [r2, #0]
 800e75a:	f043 0301 	orr.w	r3, r3, #1
 800e75e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e760:	6863      	ldr	r3, [r4, #4]
 800e762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e766:	d024      	beq.n	800e7b2 <HAL_SPI_Receive+0xde>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e768:	68e3      	ldr	r3, [r4, #12]
 800e76a:	2b0f      	cmp	r3, #15
 800e76c:	d830      	bhi.n	800e7d0 <HAL_SPI_Receive+0xfc>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e76e:	2b07      	cmp	r3, #7
 800e770:	d862      	bhi.n	800e838 <HAL_SPI_Receive+0x164>
 800e772:	e094      	b.n	800e89e <HAL_SPI_Receive+0x1ca>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e774:	6883      	ldr	r3, [r0, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d1b9      	bne.n	800e6ee <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e77a:	2304      	movs	r3, #4
 800e77c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e780:	9500      	str	r5, [sp, #0]
 800e782:	4613      	mov	r3, r2
 800e784:	460a      	mov	r2, r1
 800e786:	f7ff fe1c 	bl	800e3c2 <HAL_SPI_TransmitReceive>
 800e78a:	4606      	mov	r6, r0
 800e78c:	e003      	b.n	800e796 <HAL_SPI_Receive+0xc2>
    __HAL_UNLOCK(hspi);
 800e78e:	2300      	movs	r3, #0
 800e790:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e794:	2602      	movs	r6, #2
}
 800e796:	4630      	mov	r0, r6
 800e798:	b002      	add	sp, #8
 800e79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800e79e:	2300      	movs	r3, #0
 800e7a0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e7a4:	e7f7      	b.n	800e796 <HAL_SPI_Receive+0xc2>
    SPI_1LINE_RX(hspi);
 800e7a6:	6822      	ldr	r2, [r4, #0]
 800e7a8:	6813      	ldr	r3, [r2, #0]
 800e7aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	e7ca      	b.n	800e748 <HAL_SPI_Receive+0x74>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e7b2:	6822      	ldr	r2, [r4, #0]
 800e7b4:	6813      	ldr	r3, [r2, #0]
 800e7b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	e7d4      	b.n	800e768 <HAL_SPI_Receive+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7be:	f7fb ff3b 	bl	800a638 <HAL_GetTick>
 800e7c2:	1bc0      	subs	r0, r0, r7
 800e7c4:	42a8      	cmp	r0, r5
 800e7c6:	d302      	bcc.n	800e7ce <HAL_SPI_Receive+0xfa>
 800e7c8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e7cc:	d11a      	bne.n	800e804 <HAL_SPI_Receive+0x130>
 800e7ce:	b1cd      	cbz	r5, 800e804 <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0UL)
 800e7d0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	f000 808a 	beq.w	800e8f0 <HAL_SPI_Receive+0x21c>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e7dc:	6823      	ldr	r3, [r4, #0]
 800e7de:	6959      	ldr	r1, [r3, #20]
 800e7e0:	f248 0208 	movw	r2, #32776	; 0x8008
 800e7e4:	4211      	tst	r1, r2
 800e7e6:	d0ea      	beq.n	800e7be <HAL_SPI_Receive+0xea>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e7e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ec:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e7ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7f0:	3304      	adds	r3, #4
 800e7f2:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e7f4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800e7f8:	b292      	uxth	r2, r2
 800e7fa:	3a01      	subs	r2, #1
 800e7fc:	b292      	uxth	r2, r2
 800e7fe:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800e802:	e7e5      	b.n	800e7d0 <HAL_SPI_Receive+0xfc>
          SPI_CloseTransfer(hspi);
 800e804:	4620      	mov	r0, r4
 800e806:	f7ff fc7d 	bl	800e104 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800e80a:	2300      	movs	r3, #0
 800e80c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e81c:	2301      	movs	r3, #1
 800e81e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800e822:	2603      	movs	r6, #3
 800e824:	e7b7      	b.n	800e796 <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e826:	f7fb ff07 	bl	800a638 <HAL_GetTick>
 800e82a:	1bc0      	subs	r0, r0, r7
 800e82c:	42a8      	cmp	r0, r5
 800e82e:	d302      	bcc.n	800e836 <HAL_SPI_Receive+0x162>
 800e830:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e834:	d119      	bne.n	800e86a <HAL_SPI_Receive+0x196>
 800e836:	b1c5      	cbz	r5, 800e86a <HAL_SPI_Receive+0x196>
    while (hspi->RxXferCount > 0UL)
 800e838:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d056      	beq.n	800e8f0 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e842:	6823      	ldr	r3, [r4, #0]
 800e844:	695b      	ldr	r3, [r3, #20]
 800e846:	f013 0f01 	tst.w	r3, #1
 800e84a:	d0ec      	beq.n	800e826 <HAL_SPI_Receive+0x152>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e84c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e84e:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 800e852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e856:	3302      	adds	r3, #2
 800e858:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e85a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e85e:	b29b      	uxth	r3, r3
 800e860:	3b01      	subs	r3, #1
 800e862:	b29b      	uxth	r3, r3
 800e864:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800e868:	e7e6      	b.n	800e838 <HAL_SPI_Receive+0x164>
          SPI_CloseTransfer(hspi);
 800e86a:	4620      	mov	r0, r4
 800e86c:	f7ff fc4a 	bl	800e104 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800e870:	2300      	movs	r3, #0
 800e872:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e876:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e87a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e87e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e882:	2301      	movs	r3, #1
 800e884:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800e888:	2603      	movs	r6, #3
 800e88a:	e784      	b.n	800e796 <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e88c:	f7fb fed4 	bl	800a638 <HAL_GetTick>
 800e890:	1bc0      	subs	r0, r0, r7
 800e892:	42a8      	cmp	r0, r5
 800e894:	d302      	bcc.n	800e89c <HAL_SPI_Receive+0x1c8>
 800e896:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e89a:	d118      	bne.n	800e8ce <HAL_SPI_Receive+0x1fa>
 800e89c:	b1bd      	cbz	r5, 800e8ce <HAL_SPI_Receive+0x1fa>
    while (hspi->RxXferCount > 0UL)
 800e89e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	b323      	cbz	r3, 800e8f0 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e8a6:	6823      	ldr	r3, [r4, #0]
 800e8a8:	695a      	ldr	r2, [r3, #20]
 800e8aa:	f012 0f01 	tst.w	r2, #1
 800e8ae:	d0ed      	beq.n	800e88c <HAL_SPI_Receive+0x1b8>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e8b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e8b6:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e8b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e8be:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e8c2:	b29b      	uxth	r3, r3
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800e8cc:	e7e7      	b.n	800e89e <HAL_SPI_Receive+0x1ca>
          SPI_CloseTransfer(hspi);
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f7ff fc18 	bl	800e104 <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e8da:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e8de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800e8ec:	2603      	movs	r6, #3
 800e8ee:	e752      	b.n	800e796 <HAL_SPI_Receive+0xc2>
  SPI_CloseTransfer(hspi);
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	f7ff fc07 	bl	800e104 <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e902:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e906:	2b00      	cmp	r3, #0
 800e908:	f47f af45 	bne.w	800e796 <HAL_SPI_Receive+0xc2>
  return errorcode;
 800e90c:	2600      	movs	r6, #0
 800e90e:	e742      	b.n	800e796 <HAL_SPI_Receive+0xc2>
  __HAL_LOCK(hspi);
 800e910:	2602      	movs	r6, #2
 800e912:	e740      	b.n	800e796 <HAL_SPI_Receive+0xc2>
 800e914:	ffff0000 	.word	0xffff0000

0800e918 <HAL_SPI_Transmit_IT>:
  __HAL_LOCK(hspi);
 800e918:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	d060      	beq.n	800e9e2 <HAL_SPI_Transmit_IT+0xca>
 800e920:	2301      	movs	r3, #1
 800e922:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if ((pData == NULL) || (Size == 0UL))
 800e926:	2a00      	cmp	r2, #0
 800e928:	bf18      	it	ne
 800e92a:	2900      	cmpne	r1, #0
 800e92c:	d03b      	beq.n	800e9a6 <HAL_SPI_Transmit_IT+0x8e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800e92e:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800e932:	b2db      	uxtb	r3, r3
 800e934:	2b01      	cmp	r3, #1
 800e936:	d13b      	bne.n	800e9b0 <HAL_SPI_Transmit_IT+0x98>
{
 800e938:	b410      	push	{r4}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e93a:	2303      	movs	r3, #3
 800e93c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e940:	2300      	movs	r3, #0
 800e942:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e946:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e948:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e94c:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 800e950:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e952:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e956:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800e95a:	6703      	str	r3, [r0, #112]	; 0x70
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e95c:	68c3      	ldr	r3, [r0, #12]
 800e95e:	2b0f      	cmp	r3, #15
 800e960:	d92b      	bls.n	800e9ba <HAL_SPI_Transmit_IT+0xa2>
    hspi->TxISR = SPI_TxISR_32BIT;
 800e962:	4b21      	ldr	r3, [pc, #132]	; (800e9e8 <HAL_SPI_Transmit_IT+0xd0>)
 800e964:	6743      	str	r3, [r0, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e966:	6883      	ldr	r3, [r0, #8]
 800e968:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e96c:	d02d      	beq.n	800e9ca <HAL_SPI_Transmit_IT+0xb2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e96e:	6801      	ldr	r1, [r0, #0]
 800e970:	684c      	ldr	r4, [r1, #4]
 800e972:	4b1e      	ldr	r3, [pc, #120]	; (800e9ec <HAL_SPI_Transmit_IT+0xd4>)
 800e974:	4023      	ands	r3, r4
 800e976:	431a      	orrs	r2, r3
 800e978:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800e97a:	6802      	ldr	r2, [r0, #0]
 800e97c:	6813      	ldr	r3, [r2, #0]
 800e97e:	f043 0301 	orr.w	r3, r3, #1
 800e982:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800e984:	6802      	ldr	r2, [r0, #0]
 800e986:	6911      	ldr	r1, [r2, #16]
 800e988:	f240 732a 	movw	r3, #1834	; 0x72a
 800e98c:	430b      	orrs	r3, r1
 800e98e:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e990:	6843      	ldr	r3, [r0, #4]
 800e992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e996:	d01e      	beq.n	800e9d6 <HAL_SPI_Transmit_IT+0xbe>
  __HAL_UNLOCK(hspi);
 800e998:	2300      	movs	r3, #0
 800e99a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800e99e:	4618      	mov	r0, r3
}
 800e9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9a4:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800e9ac:	2001      	movs	r0, #1
 800e9ae:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800e9b6:	2002      	movs	r0, #2
 800e9b8:	4770      	bx	lr
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e9ba:	2b07      	cmp	r3, #7
 800e9bc:	d902      	bls.n	800e9c4 <HAL_SPI_Transmit_IT+0xac>
    hspi->TxISR = SPI_TxISR_16BIT;
 800e9be:	4b0c      	ldr	r3, [pc, #48]	; (800e9f0 <HAL_SPI_Transmit_IT+0xd8>)
 800e9c0:	6743      	str	r3, [r0, #116]	; 0x74
 800e9c2:	e7d0      	b.n	800e966 <HAL_SPI_Transmit_IT+0x4e>
    hspi->TxISR = SPI_TxISR_8BIT;
 800e9c4:	4b0b      	ldr	r3, [pc, #44]	; (800e9f4 <HAL_SPI_Transmit_IT+0xdc>)
 800e9c6:	6743      	str	r3, [r0, #116]	; 0x74
 800e9c8:	e7cd      	b.n	800e966 <HAL_SPI_Transmit_IT+0x4e>
    SPI_1LINE_TX(hspi);
 800e9ca:	6801      	ldr	r1, [r0, #0]
 800e9cc:	680b      	ldr	r3, [r1, #0]
 800e9ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e9d2:	600b      	str	r3, [r1, #0]
 800e9d4:	e7cb      	b.n	800e96e <HAL_SPI_Transmit_IT+0x56>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e9d6:	6802      	ldr	r2, [r0, #0]
 800e9d8:	6813      	ldr	r3, [r2, #0]
 800e9da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	e7da      	b.n	800e998 <HAL_SPI_Transmit_IT+0x80>
  __HAL_LOCK(hspi);
 800e9e2:	2002      	movs	r0, #2
}
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	0800e0d5 	.word	0x0800e0d5
 800e9ec:	ffff0000 	.word	0xffff0000
 800e9f0:	0800e0a5 	.word	0x0800e0a5
 800e9f4:	0800e073 	.word	0x0800e073

0800e9f8 <HAL_SPI_TransmitReceive_IT>:
{
 800e9f8:	b430      	push	{r4, r5}
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e9fa:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hspi);
 800e9fc:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 800ea00:	f1bc 0f01 	cmp.w	ip, #1
 800ea04:	f000 8101 	beq.w	800ec0a <HAL_SPI_TransmitReceive_IT+0x212>
 800ea08:	f04f 0c01 	mov.w	ip, #1
 800ea0c:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80
  tmp_state  = hspi->State;
 800ea10:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
 800ea14:	fa5f fc8c 	uxtb.w	ip, ip
  tmp_mode   = hspi->Init.Mode;
 800ea18:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ea1a:	f1bc 0f01 	cmp.w	ip, #1
 800ea1e:	d008      	beq.n	800ea32 <HAL_SPI_TransmitReceive_IT+0x3a>
 800ea20:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 800ea24:	d136      	bne.n	800ea94 <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ea26:	6885      	ldr	r5, [r0, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800ea28:	2d00      	cmp	r5, #0
 800ea2a:	d133      	bne.n	800ea94 <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800ea2c:	f1bc 0f04 	cmp.w	ip, #4
 800ea30:	d130      	bne.n	800ea94 <HAL_SPI_TransmitReceive_IT+0x9c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ea32:	2a00      	cmp	r2, #0
 800ea34:	bf18      	it	ne
 800ea36:	2900      	cmpne	r1, #0
 800ea38:	d032      	beq.n	800eaa0 <HAL_SPI_TransmitReceive_IT+0xa8>
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d030      	beq.n	800eaa0 <HAL_SPI_TransmitReceive_IT+0xa8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ea3e:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800ea42:	b2ed      	uxtb	r5, r5
 800ea44:	2d04      	cmp	r5, #4
 800ea46:	d002      	beq.n	800ea4e <HAL_SPI_TransmitReceive_IT+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ea48:	2505      	movs	r5, #5
 800ea4a:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea4e:	2500      	movs	r5, #0
 800ea50:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ea54:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ea56:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ea5a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ea5e:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ea60:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ea64:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 800ea68:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800ea6c:	b292      	uxth	r2, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea6e:	68c1      	ldr	r1, [r0, #12]
 800ea70:	290f      	cmp	r1, #15
 800ea72:	d91a      	bls.n	800eaaa <HAL_SPI_TransmitReceive_IT+0xb2>
    hspi->TxISR     = SPI_TxISR_32BIT;
 800ea74:	4966      	ldr	r1, [pc, #408]	; (800ec10 <HAL_SPI_TransmitReceive_IT+0x218>)
 800ea76:	6741      	str	r1, [r0, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 800ea78:	4966      	ldr	r1, [pc, #408]	; (800ec14 <HAL_SPI_TransmitReceive_IT+0x21c>)
 800ea7a:	6701      	str	r1, [r0, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ea7c:	6865      	ldr	r5, [r4, #4]
 800ea7e:	4966      	ldr	r1, [pc, #408]	; (800ec18 <HAL_SPI_TransmitReceive_IT+0x220>)
 800ea80:	4029      	ands	r1, r5
 800ea82:	430b      	orrs	r3, r1
 800ea84:	6063      	str	r3, [r4, #4]
  __HAL_SPI_ENABLE(hspi);
 800ea86:	6801      	ldr	r1, [r0, #0]
 800ea88:	680b      	ldr	r3, [r1, #0]
 800ea8a:	f043 0301 	orr.w	r3, r3, #1
 800ea8e:	600b      	str	r3, [r1, #0]
  uint32_t max_fifo_length = 0UL;
 800ea90:	2100      	movs	r1, #0
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800ea92:	e041      	b.n	800eb18 <HAL_SPI_TransmitReceive_IT+0x120>
    __HAL_UNLOCK(hspi);
 800ea94:	2300      	movs	r3, #0
 800ea96:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800ea9a:	2002      	movs	r0, #2
}
 800ea9c:	bc30      	pop	{r4, r5}
 800ea9e:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800eaa6:	2001      	movs	r0, #1
 800eaa8:	e7f8      	b.n	800ea9c <HAL_SPI_TransmitReceive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eaaa:	2907      	cmp	r1, #7
 800eaac:	d904      	bls.n	800eab8 <HAL_SPI_TransmitReceive_IT+0xc0>
    hspi->RxISR     = SPI_RxISR_16BIT;
 800eaae:	495b      	ldr	r1, [pc, #364]	; (800ec1c <HAL_SPI_TransmitReceive_IT+0x224>)
 800eab0:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 800eab2:	495b      	ldr	r1, [pc, #364]	; (800ec20 <HAL_SPI_TransmitReceive_IT+0x228>)
 800eab4:	6741      	str	r1, [r0, #116]	; 0x74
 800eab6:	e7e1      	b.n	800ea7c <HAL_SPI_TransmitReceive_IT+0x84>
    hspi->RxISR     = SPI_RxISR_8BIT;
 800eab8:	495a      	ldr	r1, [pc, #360]	; (800ec24 <HAL_SPI_TransmitReceive_IT+0x22c>)
 800eaba:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 800eabc:	495a      	ldr	r1, [pc, #360]	; (800ec28 <HAL_SPI_TransmitReceive_IT+0x230>)
 800eabe:	6741      	str	r1, [r0, #116]	; 0x74
 800eac0:	e7dc      	b.n	800ea7c <HAL_SPI_TransmitReceive_IT+0x84>
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eac2:	2b07      	cmp	r3, #7
 800eac4:	d945      	bls.n	800eb52 <HAL_SPI_TransmitReceive_IT+0x15a>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eac6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d912      	bls.n	800eaf6 <HAL_SPI_TransmitReceive_IT+0xfe>
 800ead0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ead2:	b183      	cbz	r3, 800eaf6 <HAL_SPI_TransmitReceive_IT+0xfe>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ead4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eada:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eadc:	3304      	adds	r3, #4
 800eade:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eae0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	3b02      	subs	r3, #2
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800eaee:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800eaf2:	b292      	uxth	r2, r2
 800eaf4:	e00f      	b.n	800eb16 <HAL_SPI_TransmitReceive_IT+0x11e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800eaf6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eaf8:	881b      	ldrh	r3, [r3, #0]
 800eafa:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eafc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eafe:	3302      	adds	r3, #2
 800eb00:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800eb02:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800eb10:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800eb14:	b292      	uxth	r2, r2
      max_fifo_length++;
 800eb16:	3101      	adds	r1, #1
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800eb18:	6805      	ldr	r5, [r0, #0]
 800eb1a:	696b      	ldr	r3, [r5, #20]
 800eb1c:	f013 0f02 	tst.w	r3, #2
 800eb20:	d05f      	beq.n	800ebe2 <HAL_SPI_TransmitReceive_IT+0x1ea>
 800eb22:	2a00      	cmp	r2, #0
 800eb24:	d05d      	beq.n	800ebe2 <HAL_SPI_TransmitReceive_IT+0x1ea>
    if (max_fifo_length < MAX_FIFO_LENGTH)
 800eb26:	290f      	cmp	r1, #15
 800eb28:	d856      	bhi.n	800ebd8 <HAL_SPI_TransmitReceive_IT+0x1e0>
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eb2a:	68c3      	ldr	r3, [r0, #12]
 800eb2c:	2b0f      	cmp	r3, #15
 800eb2e:	d9c8      	bls.n	800eac2 <HAL_SPI_TransmitReceive_IT+0xca>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800eb30:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	622b      	str	r3, [r5, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb36:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eb38:	3304      	adds	r3, #4
 800eb3a:	65c3      	str	r3, [r0, #92]	; 0x5c
        hspi->TxXferCount--;
 800eb3c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	3b01      	subs	r3, #1
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 800eb4a:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800eb4e:	b292      	uxth	r2, r2
 800eb50:	e7e1      	b.n	800eb16 <HAL_SPI_TransmitReceive_IT+0x11e>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800eb52:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	2b03      	cmp	r3, #3
 800eb5a:	d913      	bls.n	800eb84 <HAL_SPI_TransmitReceive_IT+0x18c>
 800eb5c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800eb5e:	2b40      	cmp	r3, #64	; 0x40
 800eb60:	d910      	bls.n	800eb84 <HAL_SPI_TransmitReceive_IT+0x18c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800eb62:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb68:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800eb6e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	3b04      	subs	r3, #4
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800eb7c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800eb80:	b292      	uxth	r2, r2
 800eb82:	e7c8      	b.n	800eb16 <HAL_SPI_TransmitReceive_IT+0x11e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800eb84:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d912      	bls.n	800ebb4 <HAL_SPI_TransmitReceive_IT+0x1bc>
 800eb8e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800eb90:	b183      	cbz	r3, 800ebb4 <HAL_SPI_TransmitReceive_IT+0x1bc>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800eb92:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb98:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800eb9a:	3302      	adds	r3, #2
 800eb9c:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800eb9e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	3b02      	subs	r3, #2
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800ebac:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800ebb0:	b292      	uxth	r2, r2
 800ebb2:	e7b0      	b.n	800eb16 <HAL_SPI_TransmitReceive_IT+0x11e>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ebb4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	f885 3020 	strb.w	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ebbc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800ebc2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	3b01      	subs	r3, #1
 800ebca:	b29b      	uxth	r3, r3
 800ebcc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800ebd0:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800ebd4:	b292      	uxth	r2, r2
 800ebd6:	e79e      	b.n	800eb16 <HAL_SPI_TransmitReceive_IT+0x11e>
      __HAL_UNLOCK(hspi);
 800ebd8:	2300      	movs	r3, #0
 800ebda:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      return errorcode;
 800ebde:	2002      	movs	r0, #2
 800ebe0:	e75c      	b.n	800ea9c <HAL_SPI_TransmitReceive_IT+0xa4>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 800ebe2:	692a      	ldr	r2, [r5, #16]
 800ebe4:	f240 736c 	movw	r3, #1900	; 0x76c
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	612b      	str	r3, [r5, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebec:	6843      	ldr	r3, [r0, #4]
 800ebee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebf2:	d004      	beq.n	800ebfe <HAL_SPI_TransmitReceive_IT+0x206>
  __HAL_UNLOCK(hspi);
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	e74e      	b.n	800ea9c <HAL_SPI_TransmitReceive_IT+0xa4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ebfe:	6802      	ldr	r2, [r0, #0]
 800ec00:	6813      	ldr	r3, [r2, #0]
 800ec02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec06:	6013      	str	r3, [r2, #0]
 800ec08:	e7f4      	b.n	800ebf4 <HAL_SPI_TransmitReceive_IT+0x1fc>
  __HAL_LOCK(hspi);
 800ec0a:	2002      	movs	r0, #2
 800ec0c:	e746      	b.n	800ea9c <HAL_SPI_TransmitReceive_IT+0xa4>
 800ec0e:	bf00      	nop
 800ec10:	0800e0d5 	.word	0x0800e0d5
 800ec14:	0800e043 	.word	0x0800e043
 800ec18:	ffff0000 	.word	0xffff0000
 800ec1c:	0800e013 	.word	0x0800e013
 800ec20:	0800e0a5 	.word	0x0800e0a5
 800ec24:	0800dfe1 	.word	0x0800dfe1
 800ec28:	0800e073 	.word	0x0800e073

0800ec2c <HAL_SPI_Receive_IT>:
{
 800ec2c:	b510      	push	{r4, lr}
 800ec2e:	4684      	mov	ip, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ec30:	6884      	ldr	r4, [r0, #8]
 800ec32:	b91c      	cbnz	r4, 800ec3c <HAL_SPI_Receive_IT+0x10>
 800ec34:	6843      	ldr	r3, [r0, #4]
 800ec36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec3a:	d04a      	beq.n	800ecd2 <HAL_SPI_Receive_IT+0xa6>
  __HAL_LOCK(hspi);
 800ec3c:	f89c 3080 	ldrb.w	r3, [ip, #128]	; 0x80
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d06f      	beq.n	800ed24 <HAL_SPI_Receive_IT+0xf8>
 800ec44:	2301      	movs	r3, #1
 800ec46:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800ec4a:	f89c 0081 	ldrb.w	r0, [ip, #129]	; 0x81
 800ec4e:	b2c0      	uxtb	r0, r0
 800ec50:	4298      	cmp	r0, r3
 800ec52:	d146      	bne.n	800ece2 <HAL_SPI_Receive_IT+0xb6>
  if ((pData == NULL) || (Size == 0UL))
 800ec54:	2a00      	cmp	r2, #0
 800ec56:	bf18      	it	ne
 800ec58:	2900      	cmpne	r1, #0
 800ec5a:	d047      	beq.n	800ecec <HAL_SPI_Receive_IT+0xc0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ec5c:	2304      	movs	r3, #4
 800ec5e:	f88c 3081 	strb.w	r3, [ip, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec62:	2300      	movs	r3, #0
 800ec64:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ec68:	f8cc 1064 	str.w	r1, [ip, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ec6c:	f8ac 2068 	strh.w	r2, [ip, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ec70:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800ec74:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ec78:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ec7c:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  hspi->TxISR       = NULL;
 800ec80:	f8cc 3074 	str.w	r3, [ip, #116]	; 0x74
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec84:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800ec88:	2b0f      	cmp	r3, #15
 800ec8a:	d933      	bls.n	800ecf4 <HAL_SPI_Receive_IT+0xc8>
    hspi->RxISR = SPI_RxISR_32BIT;
 800ec8c:	4b26      	ldr	r3, [pc, #152]	; (800ed28 <HAL_SPI_Receive_IT+0xfc>)
 800ec8e:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec92:	f5b4 2fc0 	cmp.w	r4, #393216	; 0x60000
 800ec96:	d037      	beq.n	800ed08 <HAL_SPI_Receive_IT+0xdc>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec98:	f8dc 1000 	ldr.w	r1, [ip]
 800ec9c:	6848      	ldr	r0, [r1, #4]
 800ec9e:	4b23      	ldr	r3, [pc, #140]	; (800ed2c <HAL_SPI_Receive_IT+0x100>)
 800eca0:	4003      	ands	r3, r0
 800eca2:	431a      	orrs	r2, r3
 800eca4:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800eca6:	f8dc 2000 	ldr.w	r2, [ip]
 800ecaa:	6813      	ldr	r3, [r2, #0]
 800ecac:	f043 0301 	orr.w	r3, r3, #1
 800ecb0:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800ecb2:	f8dc 2000 	ldr.w	r2, [ip]
 800ecb6:	6911      	ldr	r1, [r2, #16]
 800ecb8:	f240 7349 	movw	r3, #1865	; 0x749
 800ecbc:	430b      	orrs	r3, r1
 800ecbe:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ecc0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800ecc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ecc8:	d025      	beq.n	800ed16 <HAL_SPI_Receive_IT+0xea>
  __HAL_UNLOCK(hspi);
 800ecca:	2000      	movs	r0, #0
 800eccc:	f88c 0080 	strb.w	r0, [ip, #128]	; 0x80
}
 800ecd0:	bd10      	pop	{r4, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ecd2:	2304      	movs	r3, #4
 800ecd4:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800ecd8:	4613      	mov	r3, r2
 800ecda:	460a      	mov	r2, r1
 800ecdc:	f7ff fe8c 	bl	800e9f8 <HAL_SPI_TransmitReceive_IT>
 800ece0:	e7f6      	b.n	800ecd0 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800ece2:	2300      	movs	r3, #0
 800ece4:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800ece8:	2002      	movs	r0, #2
 800ecea:	e7f1      	b.n	800ecd0 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800ecec:	2300      	movs	r3, #0
 800ecee:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800ecf2:	e7ed      	b.n	800ecd0 <HAL_SPI_Receive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecf4:	2b07      	cmp	r3, #7
 800ecf6:	d903      	bls.n	800ed00 <HAL_SPI_Receive_IT+0xd4>
    hspi->RxISR = SPI_RxISR_16BIT;
 800ecf8:	4b0d      	ldr	r3, [pc, #52]	; (800ed30 <HAL_SPI_Receive_IT+0x104>)
 800ecfa:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800ecfe:	e7c8      	b.n	800ec92 <HAL_SPI_Receive_IT+0x66>
    hspi->RxISR = SPI_RxISR_8BIT;
 800ed00:	4b0c      	ldr	r3, [pc, #48]	; (800ed34 <HAL_SPI_Receive_IT+0x108>)
 800ed02:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800ed06:	e7c4      	b.n	800ec92 <HAL_SPI_Receive_IT+0x66>
    SPI_1LINE_RX(hspi);
 800ed08:	f8dc 1000 	ldr.w	r1, [ip]
 800ed0c:	680b      	ldr	r3, [r1, #0]
 800ed0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ed12:	600b      	str	r3, [r1, #0]
 800ed14:	e7c0      	b.n	800ec98 <HAL_SPI_Receive_IT+0x6c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ed16:	f8dc 2000 	ldr.w	r2, [ip]
 800ed1a:	6813      	ldr	r3, [r2, #0]
 800ed1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ed20:	6013      	str	r3, [r2, #0]
 800ed22:	e7d2      	b.n	800ecca <HAL_SPI_Receive_IT+0x9e>
  __HAL_LOCK(hspi);
 800ed24:	2002      	movs	r0, #2
 800ed26:	e7d3      	b.n	800ecd0 <HAL_SPI_Receive_IT+0xa4>
 800ed28:	0800e043 	.word	0x0800e043
 800ed2c:	ffff0000 	.word	0xffff0000
 800ed30:	0800e013 	.word	0x0800e013
 800ed34:	0800dfe1 	.word	0x0800dfe1

0800ed38 <HAL_SPI_TxRxCpltCallback>:
}
 800ed38:	4770      	bx	lr

0800ed3a <HAL_SPI_ErrorCallback>:
}
 800ed3a:	4770      	bx	lr

0800ed3c <HAL_SPI_IRQHandler>:
{
 800ed3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed40:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800ed42:	6806      	ldr	r6, [r0, #0]
 800ed44:	f8d6 a010 	ldr.w	sl, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800ed48:	f8d6 9014 	ldr.w	r9, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800ed4c:	ea0a 0509 	and.w	r5, sl, r9
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ed50:	f8d6 b008 	ldr.w	fp, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800ed54:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 800ed58:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ed5a:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	d03b      	beq.n	800edda <HAL_SPI_IRQHandler+0x9e>
  uint32_t handled  = 0UL;
 800ed62:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ed64:	f005 0845 	and.w	r8, r5, #69	; 0x45
 800ed68:	f1b8 0f01 	cmp.w	r8, #1
 800ed6c:	d03c      	beq.n	800ede8 <HAL_SPI_IRQHandler+0xac>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ed6e:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800ed72:	2a02      	cmp	r2, #2
 800ed74:	d03d      	beq.n	800edf2 <HAL_SPI_IRQHandler+0xb6>
  if (handled != 0UL)
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d13e      	bne.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ed7a:	f015 0f08 	tst.w	r5, #8
 800ed7e:	d071      	beq.n	800ee64 <HAL_SPI_IRQHandler+0x128>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ed80:	6822      	ldr	r2, [r4, #0]
 800ed82:	6993      	ldr	r3, [r2, #24]
 800ed84:	f043 0308 	orr.w	r3, r3, #8
 800ed88:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ed8a:	6822      	ldr	r2, [r4, #0]
 800ed8c:	6993      	ldr	r3, [r2, #24]
 800ed8e:	f043 0310 	orr.w	r3, r3, #16
 800ed92:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ed94:	6822      	ldr	r2, [r4, #0]
 800ed96:	6993      	ldr	r3, [r2, #24]
 800ed98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ed9c:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ed9e:	6822      	ldr	r2, [r4, #0]
 800eda0:	6913      	ldr	r3, [r2, #16]
 800eda2:	f023 0308 	bic.w	r3, r3, #8
 800eda6:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800eda8:	6823      	ldr	r3, [r4, #0]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800edb0:	d033      	beq.n	800ee1a <HAL_SPI_IRQHandler+0xde>
    SPI_CloseTransfer(hspi);
 800edb2:	4620      	mov	r0, r4
 800edb4:	f7ff f9a6 	bl	800e104 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800edb8:	2301      	movs	r3, #1
 800edba:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800edbe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d142      	bne.n	800ee4c <HAL_SPI_IRQHandler+0x110>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800edc6:	2f05      	cmp	r7, #5
 800edc8:	d044      	beq.n	800ee54 <HAL_SPI_IRQHandler+0x118>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800edca:	2f04      	cmp	r7, #4
 800edcc:	d046      	beq.n	800ee5c <HAL_SPI_IRQHandler+0x120>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800edce:	2f03      	cmp	r7, #3
 800edd0:	d112      	bne.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxCpltCallback(hspi);
 800edd2:	4620      	mov	r0, r4
 800edd4:	f7f3 ff36 	bl	8002c44 <HAL_SPI_TxCpltCallback>
    return;
 800edd8:	e00e      	b.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
    hspi->TxISR(hspi);
 800edda:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800eddc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800edde:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ede0:	4620      	mov	r0, r4
 800ede2:	4798      	blx	r3
    handled = 1UL;
 800ede4:	2301      	movs	r3, #1
 800ede6:	e7bd      	b.n	800ed64 <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800ede8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800edea:	4620      	mov	r0, r4
 800edec:	4798      	blx	r3
    handled = 1UL;
 800edee:	4643      	mov	r3, r8
 800edf0:	e7bd      	b.n	800ed6e <HAL_SPI_IRQHandler+0x32>
    hspi->TxISR(hspi);
 800edf2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800edf4:	4620      	mov	r0, r4
 800edf6:	4798      	blx	r3
}
 800edf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800edfc:	2b07      	cmp	r3, #7
 800edfe:	d91c      	bls.n	800ee3a <HAL_SPI_IRQHandler+0xfe>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ee00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee02:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800ee04:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ee06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee08:	3302      	adds	r3, #2
 800ee0a:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800ee0c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	3b01      	subs	r3, #1
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800ee1a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d0c6      	beq.n	800edb2 <HAL_SPI_IRQHandler+0x76>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ee24:	68e3      	ldr	r3, [r4, #12]
 800ee26:	2b0f      	cmp	r3, #15
 800ee28:	d9e8      	bls.n	800edfc <HAL_SPI_IRQHandler+0xc0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ee2a:	6822      	ldr	r2, [r4, #0]
 800ee2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ee30:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ee32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee34:	3304      	adds	r3, #4
 800ee36:	6663      	str	r3, [r4, #100]	; 0x64
 800ee38:	e7e8      	b.n	800ee0c <HAL_SPI_IRQHandler+0xd0>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ee3a:	6822      	ldr	r2, [r4, #0]
 800ee3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee3e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800ee42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ee44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee46:	3301      	adds	r3, #1
 800ee48:	6663      	str	r3, [r4, #100]	; 0x64
 800ee4a:	e7df      	b.n	800ee0c <HAL_SPI_IRQHandler+0xd0>
      HAL_SPI_ErrorCallback(hspi);
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f7ff ff74 	bl	800ed3a <HAL_SPI_ErrorCallback>
      return;
 800ee52:	e7d1      	b.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxRxCpltCallback(hspi);
 800ee54:	4620      	mov	r0, r4
 800ee56:	f7ff ff6f 	bl	800ed38 <HAL_SPI_TxRxCpltCallback>
 800ee5a:	e7cd      	b.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_RxCpltCallback(hspi);
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f7f3 fee7 	bl	8002c30 <HAL_SPI_RxCpltCallback>
 800ee62:	e7c9      	b.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ee64:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800ee68:	d002      	beq.n	800ee70 <HAL_SPI_IRQHandler+0x134>
 800ee6a:	f01a 0f08 	tst.w	sl, #8
 800ee6e:	d173      	bne.n	800ef58 <HAL_SPI_IRQHandler+0x21c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ee70:	f415 7f58 	tst.w	r5, #864	; 0x360
 800ee74:	d0c0      	beq.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ee76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ee7a:	d00a      	beq.n	800ee92 <HAL_SPI_IRQHandler+0x156>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ee7c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ee80:	f043 0304 	orr.w	r3, r3, #4
 800ee84:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee88:	6822      	ldr	r2, [r4, #0]
 800ee8a:	6993      	ldr	r3, [r2, #24]
 800ee8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee90:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ee92:	f415 7f00 	tst.w	r5, #512	; 0x200
 800ee96:	d00a      	beq.n	800eeae <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ee98:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ee9c:	f043 0301 	orr.w	r3, r3, #1
 800eea0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eea4:	6822      	ldr	r2, [r4, #0]
 800eea6:	6993      	ldr	r3, [r2, #24]
 800eea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eeac:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800eeae:	f415 7f80 	tst.w	r5, #256	; 0x100
 800eeb2:	d00a      	beq.n	800eeca <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eeb4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800eeb8:	f043 0308 	orr.w	r3, r3, #8
 800eebc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eec0:	6822      	ldr	r2, [r4, #0]
 800eec2:	6993      	ldr	r3, [r2, #24]
 800eec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eec8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800eeca:	f015 0f20 	tst.w	r5, #32
 800eece:	d00a      	beq.n	800eee6 <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800eed0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800eed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eed8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800eedc:	6822      	ldr	r2, [r4, #0]
 800eede:	6993      	ldr	r3, [r2, #24]
 800eee0:	f043 0320 	orr.w	r3, r3, #32
 800eee4:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eee6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d084      	beq.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
      __HAL_SPI_DISABLE(hspi);
 800eeee:	6822      	ldr	r2, [r4, #0]
 800eef0:	6813      	ldr	r3, [r2, #0]
 800eef2:	f023 0301 	bic.w	r3, r3, #1
 800eef6:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800eef8:	6822      	ldr	r2, [r4, #0]
 800eefa:	6911      	ldr	r1, [r2, #16]
 800eefc:	4b1d      	ldr	r3, [pc, #116]	; (800ef74 <HAL_SPI_IRQHandler+0x238>)
 800eefe:	400b      	ands	r3, r1
 800ef00:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ef02:	f40b 4b40 	and.w	fp, fp, #49152	; 0xc000
 800ef06:	f5bb 4f40 	cmp.w	fp, #49152	; 0xc000
 800ef0a:	d12b      	bne.n	800ef64 <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ef0c:	6822      	ldr	r2, [r4, #0]
 800ef0e:	6893      	ldr	r3, [r2, #8]
 800ef10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ef14:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800ef16:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ef18:	b15b      	cbz	r3, 800ef32 <HAL_SPI_IRQHandler+0x1f6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ef1a:	4a17      	ldr	r2, [pc, #92]	; (800ef78 <HAL_SPI_IRQHandler+0x23c>)
 800ef1c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ef1e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ef20:	f7fb fcd2 	bl	800a8c8 <HAL_DMA_Abort_IT>
 800ef24:	b128      	cbz	r0, 800ef32 <HAL_SPI_IRQHandler+0x1f6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ef26:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ef2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef2e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800ef32:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	f43f af5f 	beq.w	800edf8 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ef3a:	4a0f      	ldr	r2, [pc, #60]	; (800ef78 <HAL_SPI_IRQHandler+0x23c>)
 800ef3c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ef3e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ef40:	f7fb fcc2 	bl	800a8c8 <HAL_DMA_Abort_IT>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	f43f af57 	beq.w	800edf8 <HAL_SPI_IRQHandler+0xbc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ef4a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ef4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef52:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ef56:	e74f      	b.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ef58:	6822      	ldr	r2, [r4, #0]
 800ef5a:	6993      	ldr	r3, [r2, #24]
 800ef5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ef60:	6193      	str	r3, [r2, #24]
    return;
 800ef62:	e749      	b.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 800ef64:	2301      	movs	r3, #1
 800ef66:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f7ff fee5 	bl	800ed3a <HAL_SPI_ErrorCallback>
    return;
 800ef70:	e742      	b.n	800edf8 <HAL_SPI_IRQHandler+0xbc>
 800ef72:	bf00      	nop
 800ef74:	fffffc94 	.word	0xfffffc94
 800ef78:	0800ef7d 	.word	0x0800ef7d

0800ef7c <SPI_DMAAbortOnError>:
{
 800ef7c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef7e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800ef80:	2300      	movs	r3, #0
 800ef82:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ef86:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800ef90:	f7ff fed3 	bl	800ed3a <HAL_SPI_ErrorCallback>
}
 800ef94:	bd08      	pop	{r3, pc}

0800ef96 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ef96:	4770      	bx	lr

0800ef98 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef98:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d13a      	bne.n	800f018 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efa2:	2302      	movs	r3, #2
 800efa4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800efa8:	6802      	ldr	r2, [r0, #0]
 800efaa:	68d3      	ldr	r3, [r2, #12]
 800efac:	f043 0301 	orr.w	r3, r3, #1
 800efb0:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efb2:	6803      	ldr	r3, [r0, #0]
 800efb4:	4a1a      	ldr	r2, [pc, #104]	; (800f020 <HAL_TIM_Base_Start_IT+0x88>)
 800efb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efba:	bf18      	it	ne
 800efbc:	4293      	cmpne	r3, r2
 800efbe:	d01d      	beq.n	800effc <HAL_TIM_Base_Start_IT+0x64>
 800efc0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d019      	beq.n	800effc <HAL_TIM_Base_Start_IT+0x64>
 800efc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800efcc:	4293      	cmp	r3, r2
 800efce:	d015      	beq.n	800effc <HAL_TIM_Base_Start_IT+0x64>
 800efd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d011      	beq.n	800effc <HAL_TIM_Base_Start_IT+0x64>
 800efd8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800efdc:	4293      	cmp	r3, r2
 800efde:	d00d      	beq.n	800effc <HAL_TIM_Base_Start_IT+0x64>
 800efe0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d009      	beq.n	800effc <HAL_TIM_Base_Start_IT+0x64>
 800efe8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800efec:	4293      	cmp	r3, r2
 800efee:	d005      	beq.n	800effc <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	f042 0201 	orr.w	r2, r2, #1
 800eff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eff8:	2000      	movs	r0, #0
 800effa:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800effc:	6899      	ldr	r1, [r3, #8]
 800effe:	4a09      	ldr	r2, [pc, #36]	; (800f024 <HAL_TIM_Base_Start_IT+0x8c>)
 800f000:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f002:	2a06      	cmp	r2, #6
 800f004:	bf18      	it	ne
 800f006:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800f00a:	d007      	beq.n	800f01c <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	f042 0201 	orr.w	r2, r2, #1
 800f012:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f014:	2000      	movs	r0, #0
 800f016:	4770      	bx	lr
    return HAL_ERROR;
 800f018:	2001      	movs	r0, #1
 800f01a:	4770      	bx	lr
  return HAL_OK;
 800f01c:	2000      	movs	r0, #0
}
 800f01e:	4770      	bx	lr
 800f020:	40010000 	.word	0x40010000
 800f024:	00010007 	.word	0x00010007

0800f028 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f028:	4770      	bx	lr

0800f02a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f02a:	4770      	bx	lr

0800f02c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f02c:	4770      	bx	lr

0800f02e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f02e:	4770      	bx	lr

0800f030 <HAL_TIM_IRQHandler>:
{
 800f030:	b510      	push	{r4, lr}
 800f032:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f034:	6803      	ldr	r3, [r0, #0]
 800f036:	691a      	ldr	r2, [r3, #16]
 800f038:	f012 0f02 	tst.w	r2, #2
 800f03c:	d011      	beq.n	800f062 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f03e:	68da      	ldr	r2, [r3, #12]
 800f040:	f012 0f02 	tst.w	r2, #2
 800f044:	d00d      	beq.n	800f062 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f046:	f06f 0202 	mvn.w	r2, #2
 800f04a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f04c:	2301      	movs	r3, #1
 800f04e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f050:	6803      	ldr	r3, [r0, #0]
 800f052:	699b      	ldr	r3, [r3, #24]
 800f054:	f013 0f03 	tst.w	r3, #3
 800f058:	d079      	beq.n	800f14e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800f05a:	f7ff ffe6 	bl	800f02a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f05e:	2300      	movs	r3, #0
 800f060:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	691a      	ldr	r2, [r3, #16]
 800f066:	f012 0f04 	tst.w	r2, #4
 800f06a:	d012      	beq.n	800f092 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f06c:	68da      	ldr	r2, [r3, #12]
 800f06e:	f012 0f04 	tst.w	r2, #4
 800f072:	d00e      	beq.n	800f092 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f074:	f06f 0204 	mvn.w	r2, #4
 800f078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f07a:	2302      	movs	r3, #2
 800f07c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	699b      	ldr	r3, [r3, #24]
 800f082:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f086:	d068      	beq.n	800f15a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800f088:	4620      	mov	r0, r4
 800f08a:	f7ff ffce 	bl	800f02a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f08e:	2300      	movs	r3, #0
 800f090:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f092:	6823      	ldr	r3, [r4, #0]
 800f094:	691a      	ldr	r2, [r3, #16]
 800f096:	f012 0f08 	tst.w	r2, #8
 800f09a:	d012      	beq.n	800f0c2 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f09c:	68da      	ldr	r2, [r3, #12]
 800f09e:	f012 0f08 	tst.w	r2, #8
 800f0a2:	d00e      	beq.n	800f0c2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f0a4:	f06f 0208 	mvn.w	r2, #8
 800f0a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f0aa:	2304      	movs	r3, #4
 800f0ac:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f0ae:	6823      	ldr	r3, [r4, #0]
 800f0b0:	69db      	ldr	r3, [r3, #28]
 800f0b2:	f013 0f03 	tst.w	r3, #3
 800f0b6:	d057      	beq.n	800f168 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f7ff ffb6 	bl	800f02a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f0c2:	6823      	ldr	r3, [r4, #0]
 800f0c4:	691a      	ldr	r2, [r3, #16]
 800f0c6:	f012 0f10 	tst.w	r2, #16
 800f0ca:	d012      	beq.n	800f0f2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f0cc:	68da      	ldr	r2, [r3, #12]
 800f0ce:	f012 0f10 	tst.w	r2, #16
 800f0d2:	d00e      	beq.n	800f0f2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f0d4:	f06f 0210 	mvn.w	r2, #16
 800f0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0da:	2308      	movs	r3, #8
 800f0dc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0de:	6823      	ldr	r3, [r4, #0]
 800f0e0:	69db      	ldr	r3, [r3, #28]
 800f0e2:	f413 7f40 	tst.w	r3, #768	; 0x300
 800f0e6:	d046      	beq.n	800f176 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f7ff ff9e 	bl	800f02a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f0f2:	6823      	ldr	r3, [r4, #0]
 800f0f4:	691a      	ldr	r2, [r3, #16]
 800f0f6:	f012 0f01 	tst.w	r2, #1
 800f0fa:	d003      	beq.n	800f104 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f0fc:	68da      	ldr	r2, [r3, #12]
 800f0fe:	f012 0f01 	tst.w	r2, #1
 800f102:	d13f      	bne.n	800f184 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f104:	6823      	ldr	r3, [r4, #0]
 800f106:	691a      	ldr	r2, [r3, #16]
 800f108:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f10c:	d003      	beq.n	800f116 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f10e:	68da      	ldr	r2, [r3, #12]
 800f110:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f114:	d13d      	bne.n	800f192 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	691a      	ldr	r2, [r3, #16]
 800f11a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800f11e:	d003      	beq.n	800f128 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f120:	68da      	ldr	r2, [r3, #12]
 800f122:	f012 0f80 	tst.w	r2, #128	; 0x80
 800f126:	d13b      	bne.n	800f1a0 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f128:	6823      	ldr	r3, [r4, #0]
 800f12a:	691a      	ldr	r2, [r3, #16]
 800f12c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f130:	d003      	beq.n	800f13a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f132:	68da      	ldr	r2, [r3, #12]
 800f134:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f138:	d139      	bne.n	800f1ae <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f13a:	6823      	ldr	r3, [r4, #0]
 800f13c:	691a      	ldr	r2, [r3, #16]
 800f13e:	f012 0f20 	tst.w	r2, #32
 800f142:	d003      	beq.n	800f14c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f144:	68da      	ldr	r2, [r3, #12]
 800f146:	f012 0f20 	tst.w	r2, #32
 800f14a:	d137      	bne.n	800f1bc <HAL_TIM_IRQHandler+0x18c>
}
 800f14c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f14e:	f7ff ff6b 	bl	800f028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f152:	4620      	mov	r0, r4
 800f154:	f7ff ff6a 	bl	800f02c <HAL_TIM_PWM_PulseFinishedCallback>
 800f158:	e781      	b.n	800f05e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f15a:	4620      	mov	r0, r4
 800f15c:	f7ff ff64 	bl	800f028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f160:	4620      	mov	r0, r4
 800f162:	f7ff ff63 	bl	800f02c <HAL_TIM_PWM_PulseFinishedCallback>
 800f166:	e792      	b.n	800f08e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f168:	4620      	mov	r0, r4
 800f16a:	f7ff ff5d 	bl	800f028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f16e:	4620      	mov	r0, r4
 800f170:	f7ff ff5c 	bl	800f02c <HAL_TIM_PWM_PulseFinishedCallback>
 800f174:	e7a3      	b.n	800f0be <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f176:	4620      	mov	r0, r4
 800f178:	f7ff ff56 	bl	800f028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f17c:	4620      	mov	r0, r4
 800f17e:	f7ff ff55 	bl	800f02c <HAL_TIM_PWM_PulseFinishedCallback>
 800f182:	e7b4      	b.n	800f0ee <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f184:	f06f 0201 	mvn.w	r2, #1
 800f188:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f18a:	4620      	mov	r0, r4
 800f18c:	f7f3 faf2 	bl	8002774 <HAL_TIM_PeriodElapsedCallback>
 800f190:	e7b8      	b.n	800f104 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f192:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f196:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800f198:	4620      	mov	r0, r4
 800f19a:	f000 f8ca 	bl	800f332 <HAL_TIMEx_BreakCallback>
 800f19e:	e7ba      	b.n	800f116 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f1a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f1a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	f000 f8c4 	bl	800f334 <HAL_TIMEx_Break2Callback>
 800f1ac:	e7bc      	b.n	800f128 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f1ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f1b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f7ff ff3a 	bl	800f02e <HAL_TIM_TriggerCallback>
 800f1ba:	e7be      	b.n	800f13a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f1bc:	f06f 0220 	mvn.w	r2, #32
 800f1c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f000 f8b4 	bl	800f330 <HAL_TIMEx_CommutCallback>
}
 800f1c8:	e7c0      	b.n	800f14c <HAL_TIM_IRQHandler+0x11c>
	...

0800f1cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f1cc:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f1ce:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1d0:	4a39      	ldr	r2, [pc, #228]	; (800f2b8 <TIM_Base_SetConfig+0xec>)
 800f1d2:	4290      	cmp	r0, r2
 800f1d4:	bf14      	ite	ne
 800f1d6:	f04f 0e00 	movne.w	lr, #0
 800f1da:	f04f 0e01 	moveq.w	lr, #1
 800f1de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800f1e2:	bf14      	ite	ne
 800f1e4:	4672      	movne	r2, lr
 800f1e6:	f04e 0201 	orreq.w	r2, lr, #1
 800f1ea:	b9aa      	cbnz	r2, 800f218 <TIM_Base_SetConfig+0x4c>
 800f1ec:	4c33      	ldr	r4, [pc, #204]	; (800f2bc <TIM_Base_SetConfig+0xf0>)
 800f1ee:	42a0      	cmp	r0, r4
 800f1f0:	bf14      	ite	ne
 800f1f2:	2400      	movne	r4, #0
 800f1f4:	2401      	moveq	r4, #1
 800f1f6:	4d32      	ldr	r5, [pc, #200]	; (800f2c0 <TIM_Base_SetConfig+0xf4>)
 800f1f8:	42a8      	cmp	r0, r5
 800f1fa:	d00d      	beq.n	800f218 <TIM_Base_SetConfig+0x4c>
 800f1fc:	b964      	cbnz	r4, 800f218 <TIM_Base_SetConfig+0x4c>
 800f1fe:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800f202:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800f206:	42a0      	cmp	r0, r4
 800f208:	bf14      	ite	ne
 800f20a:	2400      	movne	r4, #0
 800f20c:	2401      	moveq	r4, #1
 800f20e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800f212:	42a8      	cmp	r0, r5
 800f214:	d000      	beq.n	800f218 <TIM_Base_SetConfig+0x4c>
 800f216:	b11c      	cbz	r4, 800f220 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800f21c:	684c      	ldr	r4, [r1, #4]
 800f21e:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f220:	bb12      	cbnz	r2, 800f268 <TIM_Base_SetConfig+0x9c>
 800f222:	4a26      	ldr	r2, [pc, #152]	; (800f2bc <TIM_Base_SetConfig+0xf0>)
 800f224:	4290      	cmp	r0, r2
 800f226:	bf14      	ite	ne
 800f228:	2200      	movne	r2, #0
 800f22a:	2201      	moveq	r2, #1
 800f22c:	4c24      	ldr	r4, [pc, #144]	; (800f2c0 <TIM_Base_SetConfig+0xf4>)
 800f22e:	42a0      	cmp	r0, r4
 800f230:	d01a      	beq.n	800f268 <TIM_Base_SetConfig+0x9c>
 800f232:	b9ca      	cbnz	r2, 800f268 <TIM_Base_SetConfig+0x9c>
 800f234:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f238:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800f23c:	4290      	cmp	r0, r2
 800f23e:	bf14      	ite	ne
 800f240:	2200      	movne	r2, #0
 800f242:	2201      	moveq	r2, #1
 800f244:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800f248:	42a0      	cmp	r0, r4
 800f24a:	d00d      	beq.n	800f268 <TIM_Base_SetConfig+0x9c>
 800f24c:	b962      	cbnz	r2, 800f268 <TIM_Base_SetConfig+0x9c>
 800f24e:	4a1d      	ldr	r2, [pc, #116]	; (800f2c4 <TIM_Base_SetConfig+0xf8>)
 800f250:	4290      	cmp	r0, r2
 800f252:	bf14      	ite	ne
 800f254:	2200      	movne	r2, #0
 800f256:	2201      	moveq	r2, #1
 800f258:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800f25c:	42a0      	cmp	r0, r4
 800f25e:	d003      	beq.n	800f268 <TIM_Base_SetConfig+0x9c>
 800f260:	b912      	cbnz	r2, 800f268 <TIM_Base_SetConfig+0x9c>
 800f262:	4a19      	ldr	r2, [pc, #100]	; (800f2c8 <TIM_Base_SetConfig+0xfc>)
 800f264:	4290      	cmp	r0, r2
 800f266:	d104      	bne.n	800f272 <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f268:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f26c:	68cb      	ldr	r3, [r1, #12]
 800f26e:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f276:	694a      	ldr	r2, [r1, #20]
 800f278:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800f27a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f27c:	688a      	ldr	r2, [r1, #8]
 800f27e:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f280:	680a      	ldr	r2, [r1, #0]
 800f282:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f284:	4a11      	ldr	r2, [pc, #68]	; (800f2cc <TIM_Base_SetConfig+0x100>)
 800f286:	4290      	cmp	r0, r2
 800f288:	bf14      	ite	ne
 800f28a:	4673      	movne	r3, lr
 800f28c:	f04e 0301 	orreq.w	r3, lr, #1
 800f290:	b963      	cbnz	r3, 800f2ac <TIM_Base_SetConfig+0xe0>
 800f292:	4b0c      	ldr	r3, [pc, #48]	; (800f2c4 <TIM_Base_SetConfig+0xf8>)
 800f294:	4298      	cmp	r0, r3
 800f296:	bf14      	ite	ne
 800f298:	2300      	movne	r3, #0
 800f29a:	2301      	moveq	r3, #1
 800f29c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800f2a0:	4290      	cmp	r0, r2
 800f2a2:	d003      	beq.n	800f2ac <TIM_Base_SetConfig+0xe0>
 800f2a4:	b913      	cbnz	r3, 800f2ac <TIM_Base_SetConfig+0xe0>
 800f2a6:	4b08      	ldr	r3, [pc, #32]	; (800f2c8 <TIM_Base_SetConfig+0xfc>)
 800f2a8:	4298      	cmp	r0, r3
 800f2aa:	d101      	bne.n	800f2b0 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f2ac:	690b      	ldr	r3, [r1, #16]
 800f2ae:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	6143      	str	r3, [r0, #20]
}
 800f2b4:	bd30      	pop	{r4, r5, pc}
 800f2b6:	bf00      	nop
 800f2b8:	40010000 	.word	0x40010000
 800f2bc:	40000800 	.word	0x40000800
 800f2c0:	40000400 	.word	0x40000400
 800f2c4:	40014400 	.word	0x40014400
 800f2c8:	40014800 	.word	0x40014800
 800f2cc:	40010400 	.word	0x40010400

0800f2d0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800f2d0:	b360      	cbz	r0, 800f32c <HAL_TIM_Base_Init+0x5c>
{
 800f2d2:	b510      	push	{r4, lr}
 800f2d4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800f2d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800f2da:	b313      	cbz	r3, 800f322 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800f2dc:	2302      	movs	r3, #2
 800f2de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	f851 0b04 	ldr.w	r0, [r1], #4
 800f2e8:	f7ff ff70 	bl	800f1cc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800f2f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800f2fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f2fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800f302:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f30a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f30e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f312:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800f316:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f31a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800f31e:	2000      	movs	r0, #0
}
 800f320:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800f322:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800f326:	f7ff fe36 	bl	800ef96 <HAL_TIM_Base_MspInit>
 800f32a:	e7d7      	b.n	800f2dc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800f32c:	2001      	movs	r0, #1
}
 800f32e:	4770      	bx	lr

0800f330 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f330:	4770      	bx	lr

0800f332 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f332:	4770      	bx	lr

0800f334 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f334:	4770      	bx	lr

0800f336 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f336:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800f338:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f33c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f33e:	f001 ff99 	bl	8011274 <xTaskGetSchedulerState>
 800f342:	2801      	cmp	r0, #1
 800f344:	d100      	bne.n	800f348 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800f346:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800f348:	f000 fc7c 	bl	800fc44 <xPortSysTickHandler>
}
 800f34c:	e7fb      	b.n	800f346 <SysTick_Handler+0x10>
	...

0800f350 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f350:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f354:	b92b      	cbnz	r3, 800f362 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800f356:	4b06      	ldr	r3, [pc, #24]	; (800f370 <osKernelInitialize+0x20>)
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	b928      	cbnz	r0, 800f368 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f35c:	2201      	movs	r2, #1
 800f35e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f360:	4770      	bx	lr
    stat = osErrorISR;
 800f362:	f06f 0005 	mvn.w	r0, #5
 800f366:	4770      	bx	lr
    } else {
      stat = osError;
 800f368:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	240072e0 	.word	0x240072e0

0800f374 <osKernelStart>:
 800f374:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f378:	b973      	cbnz	r3, 800f398 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800f37a:	4b0a      	ldr	r3, [pc, #40]	; (800f3a4 <osKernelStart+0x30>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d10d      	bne.n	800f39e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800f382:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f384:	2400      	movs	r4, #0
 800f386:	4b08      	ldr	r3, [pc, #32]	; (800f3a8 <osKernelStart+0x34>)
 800f388:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f38a:	4b06      	ldr	r3, [pc, #24]	; (800f3a4 <osKernelStart+0x30>)
 800f38c:	2202      	movs	r2, #2
 800f38e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f390:	f001 fce6 	bl	8010d60 <vTaskStartScheduler>
      stat = osOK;
 800f394:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800f396:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800f398:	f06f 0005 	mvn.w	r0, #5
 800f39c:	4770      	bx	lr
      stat = osError;
 800f39e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f3a2:	4770      	bx	lr
 800f3a4:	240072e0 	.word	0x240072e0
 800f3a8:	e000ed00 	.word	0xe000ed00

0800f3ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ae:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f3b0:	2400      	movs	r4, #0
 800f3b2:	9405      	str	r4, [sp, #20]
 800f3b4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800f3b8:	bb74      	cbnz	r4, 800f418 <osThreadNew+0x6c>
 800f3ba:	b368      	cbz	r0, 800f418 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800f3bc:	b322      	cbz	r2, 800f408 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800f3be:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800f3c0:	6993      	ldr	r3, [r2, #24]
 800f3c2:	b903      	cbnz	r3, 800f3c6 <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800f3c4:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f3c6:	1e5c      	subs	r4, r3, #1
 800f3c8:	2c37      	cmp	r4, #55	; 0x37
 800f3ca:	d849      	bhi.n	800f460 <osThreadNew+0xb4>
 800f3cc:	6854      	ldr	r4, [r2, #4]
 800f3ce:	f014 0f01 	tst.w	r4, #1
 800f3d2:	d147      	bne.n	800f464 <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800f3d4:	6956      	ldr	r6, [r2, #20]
 800f3d6:	b16e      	cbz	r6, 800f3f4 <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f3d8:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f3dc:	6894      	ldr	r4, [r2, #8]
 800f3de:	b12c      	cbz	r4, 800f3ec <osThreadNew+0x40>
 800f3e0:	68d7      	ldr	r7, [r2, #12]
 800f3e2:	2fbb      	cmp	r7, #187	; 0xbb
 800f3e4:	d902      	bls.n	800f3ec <osThreadNew+0x40>
 800f3e6:	6917      	ldr	r7, [r2, #16]
 800f3e8:	b107      	cbz	r7, 800f3ec <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f3ea:	b9c6      	cbnz	r6, 800f41e <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f3ec:	b12c      	cbz	r4, 800f3fa <osThreadNew+0x4e>
    mem  = -1;
 800f3ee:	f04f 34ff 	mov.w	r4, #4294967295
 800f3f2:	e00e      	b.n	800f412 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800f3f4:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800f3f8:	e7f0      	b.n	800f3dc <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f3fa:	68d4      	ldr	r4, [r2, #12]
 800f3fc:	b98c      	cbnz	r4, 800f422 <osThreadNew+0x76>
 800f3fe:	6914      	ldr	r4, [r2, #16]
 800f400:	b194      	cbz	r4, 800f428 <osThreadNew+0x7c>
    mem  = -1;
 800f402:	f04f 34ff 	mov.w	r4, #4294967295
 800f406:	e004      	b.n	800f412 <osThreadNew+0x66>
    name = NULL;
 800f408:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800f40a:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800f40c:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800f40e:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800f412:	2c01      	cmp	r4, #1
 800f414:	d00a      	beq.n	800f42c <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800f416:	b1ac      	cbz	r4, 800f444 <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f418:	9805      	ldr	r0, [sp, #20]
}
 800f41a:	b007      	add	sp, #28
 800f41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800f41e:	2401      	movs	r4, #1
 800f420:	e7f7      	b.n	800f412 <osThreadNew+0x66>
    mem  = -1;
 800f422:	f04f 34ff 	mov.w	r4, #4294967295
 800f426:	e7f4      	b.n	800f412 <osThreadNew+0x66>
          mem = 0;
 800f428:	2400      	movs	r4, #0
 800f42a:	e7f2      	b.n	800f412 <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f42c:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f42e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f430:	9202      	str	r2, [sp, #8]
 800f432:	9401      	str	r4, [sp, #4]
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	460b      	mov	r3, r1
 800f438:	4662      	mov	r2, ip
 800f43a:	4629      	mov	r1, r5
 800f43c:	f001 fc20 	bl	8010c80 <xTaskCreateStatic>
 800f440:	9005      	str	r0, [sp, #20]
 800f442:	e7e9      	b.n	800f418 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f444:	aa05      	add	r2, sp, #20
 800f446:	9201      	str	r2, [sp, #4]
 800f448:	9300      	str	r3, [sp, #0]
 800f44a:	460b      	mov	r3, r1
 800f44c:	fa1f f28c 	uxth.w	r2, ip
 800f450:	4629      	mov	r1, r5
 800f452:	f001 fc50 	bl	8010cf6 <xTaskCreate>
 800f456:	2801      	cmp	r0, #1
 800f458:	d0de      	beq.n	800f418 <osThreadNew+0x6c>
            hTask = NULL;
 800f45a:	2300      	movs	r3, #0
 800f45c:	9305      	str	r3, [sp, #20]
 800f45e:	e7db      	b.n	800f418 <osThreadNew+0x6c>
        return (NULL);
 800f460:	2000      	movs	r0, #0
 800f462:	e7da      	b.n	800f41a <osThreadNew+0x6e>
 800f464:	2000      	movs	r0, #0
 800f466:	e7d8      	b.n	800f41a <osThreadNew+0x6e>

0800f468 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f468:	b570      	push	{r4, r5, r6, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f470:	2b00      	cmp	r3, #0
 800f472:	d14d      	bne.n	800f510 <osSemaphoreNew+0xa8>
 800f474:	460e      	mov	r6, r1
 800f476:	4614      	mov	r4, r2
 800f478:	4288      	cmp	r0, r1
 800f47a:	bf34      	ite	cc
 800f47c:	2300      	movcc	r3, #0
 800f47e:	2301      	movcs	r3, #1
 800f480:	2800      	cmp	r0, #0
 800f482:	d049      	beq.n	800f518 <osSemaphoreNew+0xb0>
 800f484:	2b00      	cmp	r3, #0
 800f486:	d047      	beq.n	800f518 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800f488:	b14a      	cbz	r2, 800f49e <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f48a:	6895      	ldr	r5, [r2, #8]
 800f48c:	b115      	cbz	r5, 800f494 <osSemaphoreNew+0x2c>
 800f48e:	68d3      	ldr	r3, [r2, #12]
 800f490:	2b4f      	cmp	r3, #79	; 0x4f
 800f492:	d814      	bhi.n	800f4be <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f494:	2d00      	cmp	r5, #0
 800f496:	d141      	bne.n	800f51c <osSemaphoreNew+0xb4>
 800f498:	68e3      	ldr	r3, [r4, #12]
 800f49a:	b10b      	cbz	r3, 800f4a0 <osSemaphoreNew+0x38>
 800f49c:	e039      	b.n	800f512 <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800f49e:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800f4a0:	2801      	cmp	r0, #1
 800f4a2:	d00e      	beq.n	800f4c2 <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800f4a4:	bb73      	cbnz	r3, 800f504 <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f4a6:	4631      	mov	r1, r6
 800f4a8:	f000 fe45 	bl	8010136 <xQueueCreateCountingSemaphore>
 800f4ac:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f4ae:	b385      	cbz	r5, 800f512 <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800f4b0:	b104      	cbz	r4, 800f4b4 <osSemaphoreNew+0x4c>
          name = attr->name;
 800f4b2:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f4b4:	4621      	mov	r1, r4
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f001 f9d4 	bl	8010864 <vQueueAddToRegistry>
 800f4bc:	e029      	b.n	800f512 <osSemaphoreNew+0xaa>
        mem = 1;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	e7ee      	b.n	800f4a0 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800f4c2:	b9b3      	cbnz	r3, 800f4f2 <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800f4c4:	2203      	movs	r2, #3
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	2001      	movs	r0, #1
 800f4ca:	f000 fded 	bl	80100a8 <xQueueGenericCreate>
 800f4ce:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f4d0:	2d00      	cmp	r5, #0
 800f4d2:	bf18      	it	ne
 800f4d4:	2e00      	cmpne	r6, #0
 800f4d6:	d0ea      	beq.n	800f4ae <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f4d8:	2300      	movs	r3, #0
 800f4da:	461a      	mov	r2, r3
 800f4dc:	4619      	mov	r1, r3
 800f4de:	4628      	mov	r0, r5
 800f4e0:	f000 fe47 	bl	8010172 <xQueueGenericSend>
 800f4e4:	2801      	cmp	r0, #1
 800f4e6:	d0e2      	beq.n	800f4ae <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	f001 f9e5 	bl	80108b8 <vQueueDelete>
            hSemaphore = NULL;
 800f4ee:	2500      	movs	r5, #0
 800f4f0:	e00f      	b.n	800f512 <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f4f2:	68a3      	ldr	r3, [r4, #8]
 800f4f4:	2203      	movs	r2, #3
 800f4f6:	9200      	str	r2, [sp, #0]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	4611      	mov	r1, r2
 800f4fc:	f000 fd81 	bl	8010002 <xQueueGenericCreateStatic>
 800f500:	4605      	mov	r5, r0
 800f502:	e7e5      	b.n	800f4d0 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f504:	68a2      	ldr	r2, [r4, #8]
 800f506:	4631      	mov	r1, r6
 800f508:	f000 fdf2 	bl	80100f0 <xQueueCreateCountingSemaphoreStatic>
 800f50c:	4605      	mov	r5, r0
 800f50e:	e7ce      	b.n	800f4ae <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800f510:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800f512:	4628      	mov	r0, r5
 800f514:	b002      	add	sp, #8
 800f516:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800f518:	2500      	movs	r5, #0
 800f51a:	e7fa      	b.n	800f512 <osSemaphoreNew+0xaa>
 800f51c:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800f51e:	e7f8      	b.n	800f512 <osSemaphoreNew+0xaa>

0800f520 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f520:	b320      	cbz	r0, 800f56c <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f522:	b510      	push	{r4, lr}
 800f524:	b082      	sub	sp, #8
 800f526:	460c      	mov	r4, r1
 800f528:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f52c:	b1b3      	cbz	r3, 800f55c <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800f52e:	bb01      	cbnz	r1, 800f572 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800f530:	2100      	movs	r1, #0
 800f532:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f534:	aa01      	add	r2, sp, #4
 800f536:	f001 f922 	bl	801077e <xQueueReceiveFromISR>
 800f53a:	2801      	cmp	r0, #1
 800f53c:	d11c      	bne.n	800f578 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f53e:	9801      	ldr	r0, [sp, #4]
 800f540:	b150      	cbz	r0, 800f558 <osSemaphoreAcquire+0x38>
 800f542:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f54a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f54e:	f3bf 8f4f 	dsb	sy
 800f552:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f556:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f558:	b002      	add	sp, #8
 800f55a:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f55c:	f001 f83c 	bl	80105d8 <xQueueSemaphoreTake>
 800f560:	2801      	cmp	r0, #1
 800f562:	d00c      	beq.n	800f57e <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800f564:	b16c      	cbz	r4, 800f582 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800f566:	f06f 0001 	mvn.w	r0, #1
 800f56a:	e7f5      	b.n	800f558 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800f56c:	f06f 0003 	mvn.w	r0, #3
}
 800f570:	4770      	bx	lr
      stat = osErrorParameter;
 800f572:	f06f 0003 	mvn.w	r0, #3
 800f576:	e7ef      	b.n	800f558 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800f578:	f06f 0002 	mvn.w	r0, #2
 800f57c:	e7ec      	b.n	800f558 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800f57e:	2000      	movs	r0, #0
 800f580:	e7ea      	b.n	800f558 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800f582:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f586:	e7e7      	b.n	800f558 <osSemaphoreAcquire+0x38>

0800f588 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f588:	b320      	cbz	r0, 800f5d4 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f58a:	b500      	push	{lr}
 800f58c:	b083      	sub	sp, #12
 800f58e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f592:	b1a3      	cbz	r3, 800f5be <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800f594:	2300      	movs	r3, #0
 800f596:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f598:	a901      	add	r1, sp, #4
 800f59a:	f000 ff15 	bl	80103c8 <xQueueGiveFromISR>
 800f59e:	2801      	cmp	r0, #1
 800f5a0:	d11b      	bne.n	800f5da <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800f5a2:	9801      	ldr	r0, [sp, #4]
 800f5a4:	b198      	cbz	r0, 800f5ce <osSemaphoreRelease+0x46>
 800f5a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f5aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f5b2:	f3bf 8f4f 	dsb	sy
 800f5b6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	e007      	b.n	800f5ce <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f5be:	2300      	movs	r3, #0
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	f000 fdd5 	bl	8010172 <xQueueGenericSend>
 800f5c8:	2801      	cmp	r0, #1
 800f5ca:	d109      	bne.n	800f5e0 <osSemaphoreRelease+0x58>
  stat = osOK;
 800f5cc:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800f5ce:	b003      	add	sp, #12
 800f5d0:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800f5d4:	f06f 0003 	mvn.w	r0, #3
}
 800f5d8:	4770      	bx	lr
      stat = osErrorResource;
 800f5da:	f06f 0002 	mvn.w	r0, #2
 800f5de:	e7f6      	b.n	800f5ce <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800f5e0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f5e4:	e7f3      	b.n	800f5ce <osSemaphoreRelease+0x46>

0800f5e6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f5e6:	b570      	push	{r4, r5, r6, lr}
 800f5e8:	b082      	sub	sp, #8
 800f5ea:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d13d      	bne.n	800f66e <osMessageQueueNew+0x88>
 800f5f2:	4614      	mov	r4, r2
 800f5f4:	1e0b      	subs	r3, r1, #0
 800f5f6:	bf18      	it	ne
 800f5f8:	2301      	movne	r3, #1
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	d03b      	beq.n	800f676 <osMessageQueueNew+0x90>
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d039      	beq.n	800f676 <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 800f602:	b36a      	cbz	r2, 800f660 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f604:	6893      	ldr	r3, [r2, #8]
 800f606:	b14b      	cbz	r3, 800f61c <osMessageQueueNew+0x36>
 800f608:	68d2      	ldr	r2, [r2, #12]
 800f60a:	2a4f      	cmp	r2, #79	; 0x4f
 800f60c:	d906      	bls.n	800f61c <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f60e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f610:	b122      	cbz	r2, 800f61c <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f612:	fb01 f500 	mul.w	r5, r1, r0
 800f616:	6966      	ldr	r6, [r4, #20]
 800f618:	42ae      	cmp	r6, r5
 800f61a:	d21b      	bcs.n	800f654 <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f61c:	b173      	cbz	r3, 800f63c <osMessageQueueNew+0x56>
    mem = -1;
 800f61e:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800f622:	bb53      	cbnz	r3, 800f67a <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f624:	2200      	movs	r2, #0
 800f626:	f000 fd3f 	bl	80100a8 <xQueueGenericCreate>
 800f62a:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f62c:	b305      	cbz	r5, 800f670 <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 800f62e:	b104      	cbz	r4, 800f632 <osMessageQueueNew+0x4c>
        name = attr->name;
 800f630:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800f632:	4621      	mov	r1, r4
 800f634:	4628      	mov	r0, r5
 800f636:	f001 f915 	bl	8010864 <vQueueAddToRegistry>
 800f63a:	e019      	b.n	800f670 <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f63c:	68e3      	ldr	r3, [r4, #12]
 800f63e:	b98b      	cbnz	r3, 800f664 <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f640:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f642:	b113      	cbz	r3, 800f64a <osMessageQueueNew+0x64>
    mem = -1;
 800f644:	f04f 33ff 	mov.w	r3, #4294967295
 800f648:	e7eb      	b.n	800f622 <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f64a:	6963      	ldr	r3, [r4, #20]
 800f64c:	b16b      	cbz	r3, 800f66a <osMessageQueueNew+0x84>
    mem = -1;
 800f64e:	f04f 33ff 	mov.w	r3, #4294967295
 800f652:	e7e6      	b.n	800f622 <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f654:	2500      	movs	r5, #0
 800f656:	9500      	str	r5, [sp, #0]
 800f658:	f000 fcd3 	bl	8010002 <xQueueGenericCreateStatic>
 800f65c:	4605      	mov	r5, r0
 800f65e:	e7e5      	b.n	800f62c <osMessageQueueNew+0x46>
      mem = 0;
 800f660:	2300      	movs	r3, #0
 800f662:	e7de      	b.n	800f622 <osMessageQueueNew+0x3c>
    mem = -1;
 800f664:	f04f 33ff 	mov.w	r3, #4294967295
 800f668:	e7db      	b.n	800f622 <osMessageQueueNew+0x3c>
          mem = 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	e7d9      	b.n	800f622 <osMessageQueueNew+0x3c>
  hQueue = NULL;
 800f66e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800f670:	4628      	mov	r0, r5
 800f672:	b002      	add	sp, #8
 800f674:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800f676:	2500      	movs	r5, #0
 800f678:	e7fa      	b.n	800f670 <osMessageQueueNew+0x8a>
 800f67a:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800f67c:	e7f8      	b.n	800f670 <osMessageQueueNew+0x8a>

0800f67e <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f67e:	b510      	push	{r4, lr}
 800f680:	b082      	sub	sp, #8
 800f682:	461c      	mov	r4, r3
 800f684:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f688:	b1d3      	cbz	r3, 800f6c0 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f68a:	2900      	cmp	r1, #0
 800f68c:	bf18      	it	ne
 800f68e:	2800      	cmpne	r0, #0
 800f690:	d024      	beq.n	800f6dc <osMessageQueuePut+0x5e>
 800f692:	bb34      	cbnz	r4, 800f6e2 <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800f694:	2300      	movs	r3, #0
 800f696:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f698:	aa01      	add	r2, sp, #4
 800f69a:	f000 fe2e 	bl	80102fa <xQueueGenericSendFromISR>
 800f69e:	2801      	cmp	r0, #1
 800f6a0:	d122      	bne.n	800f6e8 <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f6a2:	9801      	ldr	r0, [sp, #4]
 800f6a4:	b150      	cbz	r0, 800f6bc <osMessageQueuePut+0x3e>
 800f6a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f6b2:	f3bf 8f4f 	dsb	sy
 800f6b6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f6ba:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f6bc:	b002      	add	sp, #8
 800f6be:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f6c0:	2900      	cmp	r1, #0
 800f6c2:	bf18      	it	ne
 800f6c4:	2800      	cmpne	r0, #0
 800f6c6:	d012      	beq.n	800f6ee <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	4622      	mov	r2, r4
 800f6cc:	f000 fd51 	bl	8010172 <xQueueGenericSend>
 800f6d0:	2801      	cmp	r0, #1
 800f6d2:	d00f      	beq.n	800f6f4 <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 800f6d4:	b184      	cbz	r4, 800f6f8 <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 800f6d6:	f06f 0001 	mvn.w	r0, #1
 800f6da:	e7ef      	b.n	800f6bc <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f6dc:	f06f 0003 	mvn.w	r0, #3
 800f6e0:	e7ec      	b.n	800f6bc <osMessageQueuePut+0x3e>
 800f6e2:	f06f 0003 	mvn.w	r0, #3
 800f6e6:	e7e9      	b.n	800f6bc <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 800f6e8:	f06f 0002 	mvn.w	r0, #2
 800f6ec:	e7e6      	b.n	800f6bc <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f6ee:	f06f 0003 	mvn.w	r0, #3
 800f6f2:	e7e3      	b.n	800f6bc <osMessageQueuePut+0x3e>
  stat = osOK;
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	e7e1      	b.n	800f6bc <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 800f6f8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f6fc:	e7de      	b.n	800f6bc <osMessageQueuePut+0x3e>

0800f6fe <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f6fe:	b510      	push	{r4, lr}
 800f700:	b082      	sub	sp, #8
 800f702:	461c      	mov	r4, r3
 800f704:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f708:	b1d3      	cbz	r3, 800f740 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f70a:	2900      	cmp	r1, #0
 800f70c:	bf18      	it	ne
 800f70e:	2800      	cmpne	r0, #0
 800f710:	d023      	beq.n	800f75a <osMessageQueueGet+0x5c>
 800f712:	bb2c      	cbnz	r4, 800f760 <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800f714:	2300      	movs	r3, #0
 800f716:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f718:	aa01      	add	r2, sp, #4
 800f71a:	f001 f830 	bl	801077e <xQueueReceiveFromISR>
 800f71e:	2801      	cmp	r0, #1
 800f720:	d121      	bne.n	800f766 <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f722:	9801      	ldr	r0, [sp, #4]
 800f724:	b150      	cbz	r0, 800f73c <osMessageQueueGet+0x3e>
 800f726:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f72e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f732:	f3bf 8f4f 	dsb	sy
 800f736:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f73a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f73c:	b002      	add	sp, #8
 800f73e:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f740:	2900      	cmp	r1, #0
 800f742:	bf18      	it	ne
 800f744:	2800      	cmpne	r0, #0
 800f746:	d011      	beq.n	800f76c <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f748:	4622      	mov	r2, r4
 800f74a:	f000 fe96 	bl	801047a <xQueueReceive>
 800f74e:	2801      	cmp	r0, #1
 800f750:	d00f      	beq.n	800f772 <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 800f752:	b184      	cbz	r4, 800f776 <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 800f754:	f06f 0001 	mvn.w	r0, #1
 800f758:	e7f0      	b.n	800f73c <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800f75a:	f06f 0003 	mvn.w	r0, #3
 800f75e:	e7ed      	b.n	800f73c <osMessageQueueGet+0x3e>
 800f760:	f06f 0003 	mvn.w	r0, #3
 800f764:	e7ea      	b.n	800f73c <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 800f766:	f06f 0002 	mvn.w	r0, #2
 800f76a:	e7e7      	b.n	800f73c <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800f76c:	f06f 0003 	mvn.w	r0, #3
 800f770:	e7e4      	b.n	800f73c <osMessageQueueGet+0x3e>
  stat = osOK;
 800f772:	2000      	movs	r0, #0
 800f774:	e7e2      	b.n	800f73c <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 800f776:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f77a:	e7df      	b.n	800f73c <osMessageQueueGet+0x3e>

0800f77c <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 800f77c:	b148      	cbz	r0, 800f792 <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800f77e:	b508      	push	{r3, lr}
 800f780:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 800f784:	b112      	cbz	r2, 800f78c <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800f786:	f001 f861 	bl	801084c <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 800f78a:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 800f78c:	f001 f84b 	bl	8010826 <uxQueueMessagesWaiting>
 800f790:	e7fb      	b.n	800f78a <osMessageQueueGetCount+0xe>
    count = 0U;
 800f792:	2000      	movs	r0, #0
}
 800f794:	4770      	bx	lr
	...

0800f798 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f798:	4b03      	ldr	r3, [pc, #12]	; (800f7a8 <vApplicationGetIdleTaskMemory+0x10>)
 800f79a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f79c:	4b03      	ldr	r3, [pc, #12]	; (800f7ac <vApplicationGetIdleTaskMemory+0x14>)
 800f79e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f7a0:	2380      	movs	r3, #128	; 0x80
 800f7a2:	6013      	str	r3, [r2, #0]
}
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop
 800f7a8:	24007224 	.word	0x24007224
 800f7ac:	24007024 	.word	0x24007024

0800f7b0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f7b0:	4b03      	ldr	r3, [pc, #12]	; (800f7c0 <vApplicationGetTimerTaskMemory+0x10>)
 800f7b2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f7b4:	4b03      	ldr	r3, [pc, #12]	; (800f7c4 <vApplicationGetTimerTaskMemory+0x14>)
 800f7b6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f7b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f7bc:	6013      	str	r3, [r2, #0]
}
 800f7be:	4770      	bx	lr
 800f7c0:	240076e4 	.word	0x240076e4
 800f7c4:	240072e4 	.word	0x240072e4

0800f7c8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f7c8:	4a12      	ldr	r2, [pc, #72]	; (800f814 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f7ca:	f012 0f07 	tst.w	r2, #7
 800f7ce:	d01e      	beq.n	800f80e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f7d0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7d2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f7d6:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 800f7da:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7dc:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f7de:	480e      	ldr	r0, [pc, #56]	; (800f818 <prvHeapInit+0x50>)
 800f7e0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f7e6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800f7e8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f7ea:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800f7ee:	480b      	ldr	r0, [pc, #44]	; (800f81c <prvHeapInit+0x54>)
 800f7f0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800f7f2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f7f4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f7f6:	1a99      	subs	r1, r3, r2
 800f7f8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7fa:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7fc:	4b08      	ldr	r3, [pc, #32]	; (800f820 <prvHeapInit+0x58>)
 800f7fe:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f800:	4b08      	ldr	r3, [pc, #32]	; (800f824 <prvHeapInit+0x5c>)
 800f802:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f804:	4b08      	ldr	r3, [pc, #32]	; (800f828 <prvHeapInit+0x60>)
 800f806:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f80a:	601a      	str	r2, [r3, #0]
}
 800f80c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f80e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f812:	e7e4      	b.n	800f7de <prvHeapInit+0x16>
 800f814:	240077a4 	.word	0x240077a4
 800f818:	2400f7b8 	.word	0x2400f7b8
 800f81c:	240077a0 	.word	0x240077a0
 800f820:	2400f7ac 	.word	0x2400f7ac
 800f824:	2400f7a8 	.word	0x2400f7a8
 800f828:	2400f7a4 	.word	0x2400f7a4

0800f82c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f82c:	4b16      	ldr	r3, [pc, #88]	; (800f888 <prvInsertBlockIntoFreeList+0x5c>)
 800f82e:	461a      	mov	r2, r3
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	4283      	cmp	r3, r0
 800f834:	d3fb      	bcc.n	800f82e <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f836:	6851      	ldr	r1, [r2, #4]
 800f838:	eb02 0c01 	add.w	ip, r2, r1
 800f83c:	4584      	cmp	ip, r0
 800f83e:	d009      	beq.n	800f854 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f840:	6841      	ldr	r1, [r0, #4]
 800f842:	eb00 0c01 	add.w	ip, r0, r1
 800f846:	4563      	cmp	r3, ip
 800f848:	d009      	beq.n	800f85e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f84a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f84c:	4290      	cmp	r0, r2
 800f84e:	d019      	beq.n	800f884 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f850:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800f852:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f854:	6840      	ldr	r0, [r0, #4]
 800f856:	4401      	add	r1, r0
 800f858:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800f85a:	4610      	mov	r0, r2
 800f85c:	e7f0      	b.n	800f840 <prvInsertBlockIntoFreeList+0x14>
{
 800f85e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f860:	4c0a      	ldr	r4, [pc, #40]	; (800f88c <prvInsertBlockIntoFreeList+0x60>)
 800f862:	6824      	ldr	r4, [r4, #0]
 800f864:	42a3      	cmp	r3, r4
 800f866:	d00b      	beq.n	800f880 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	4419      	add	r1, r3
 800f86c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f86e:	6813      	ldr	r3, [r2, #0]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800f874:	4290      	cmp	r0, r2
 800f876:	d000      	beq.n	800f87a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f878:	6010      	str	r0, [r2, #0]
	}
}
 800f87a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f87e:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f880:	6004      	str	r4, [r0, #0]
 800f882:	e7f7      	b.n	800f874 <prvInsertBlockIntoFreeList+0x48>
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop
 800f888:	2400f7b8 	.word	0x2400f7b8
 800f88c:	240077a0 	.word	0x240077a0

0800f890 <pvPortMalloc>:
{
 800f890:	b570      	push	{r4, r5, r6, lr}
 800f892:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800f894:	f001 faba 	bl	8010e0c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f898:	4b36      	ldr	r3, [pc, #216]	; (800f974 <pvPortMalloc+0xe4>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	b1a3      	cbz	r3, 800f8c8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f89e:	4b36      	ldr	r3, [pc, #216]	; (800f978 <pvPortMalloc+0xe8>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	421d      	tst	r5, r3
 800f8a4:	d14e      	bne.n	800f944 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800f8a6:	b135      	cbz	r5, 800f8b6 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800f8a8:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f8aa:	f015 0f07 	tst.w	r5, #7
 800f8ae:	d002      	beq.n	800f8b6 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f8b0:	f025 0507 	bic.w	r5, r5, #7
 800f8b4:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f8b6:	2d00      	cmp	r5, #0
 800f8b8:	d046      	beq.n	800f948 <pvPortMalloc+0xb8>
 800f8ba:	4b30      	ldr	r3, [pc, #192]	; (800f97c <pvPortMalloc+0xec>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	42ab      	cmp	r3, r5
 800f8c0:	d351      	bcc.n	800f966 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800f8c2:	4a2f      	ldr	r2, [pc, #188]	; (800f980 <pvPortMalloc+0xf0>)
 800f8c4:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8c6:	e004      	b.n	800f8d2 <pvPortMalloc+0x42>
			prvHeapInit();
 800f8c8:	f7ff ff7e 	bl	800f7c8 <prvHeapInit>
 800f8cc:	e7e7      	b.n	800f89e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800f8ce:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800f8d0:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f8d2:	6863      	ldr	r3, [r4, #4]
 800f8d4:	42ab      	cmp	r3, r5
 800f8d6:	d202      	bcs.n	800f8de <pvPortMalloc+0x4e>
 800f8d8:	6823      	ldr	r3, [r4, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1f7      	bne.n	800f8ce <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800f8de:	4b25      	ldr	r3, [pc, #148]	; (800f974 <pvPortMalloc+0xe4>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	42a3      	cmp	r3, r4
 800f8e4:	d041      	beq.n	800f96a <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f8e6:	6816      	ldr	r6, [r2, #0]
 800f8e8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f8ea:	6823      	ldr	r3, [r4, #0]
 800f8ec:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f8ee:	6863      	ldr	r3, [r4, #4]
 800f8f0:	1b5b      	subs	r3, r3, r5
 800f8f2:	2b10      	cmp	r3, #16
 800f8f4:	d910      	bls.n	800f918 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f8f6:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8f8:	f010 0f07 	tst.w	r0, #7
 800f8fc:	d008      	beq.n	800f910 <pvPortMalloc+0x80>
 800f8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f902:	f383 8811 	msr	BASEPRI, r3
 800f906:	f3bf 8f6f 	isb	sy
 800f90a:	f3bf 8f4f 	dsb	sy
 800f90e:	e7fe      	b.n	800f90e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f910:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f912:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f914:	f7ff ff8a 	bl	800f82c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f918:	6862      	ldr	r2, [r4, #4]
 800f91a:	4918      	ldr	r1, [pc, #96]	; (800f97c <pvPortMalloc+0xec>)
 800f91c:	680b      	ldr	r3, [r1, #0]
 800f91e:	1a9b      	subs	r3, r3, r2
 800f920:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f922:	4918      	ldr	r1, [pc, #96]	; (800f984 <pvPortMalloc+0xf4>)
 800f924:	6809      	ldr	r1, [r1, #0]
 800f926:	428b      	cmp	r3, r1
 800f928:	d201      	bcs.n	800f92e <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f92a:	4916      	ldr	r1, [pc, #88]	; (800f984 <pvPortMalloc+0xf4>)
 800f92c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f92e:	4b12      	ldr	r3, [pc, #72]	; (800f978 <pvPortMalloc+0xe8>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	4313      	orrs	r3, r2
 800f934:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f936:	2300      	movs	r3, #0
 800f938:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800f93a:	4a13      	ldr	r2, [pc, #76]	; (800f988 <pvPortMalloc+0xf8>)
 800f93c:	6813      	ldr	r3, [r2, #0]
 800f93e:	3301      	adds	r3, #1
 800f940:	6013      	str	r3, [r2, #0]
 800f942:	e002      	b.n	800f94a <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800f944:	2600      	movs	r6, #0
 800f946:	e000      	b.n	800f94a <pvPortMalloc+0xba>
 800f948:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800f94a:	f001 faf9 	bl	8010f40 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f94e:	f016 0f07 	tst.w	r6, #7
 800f952:	d00c      	beq.n	800f96e <pvPortMalloc+0xde>
 800f954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f958:	f383 8811 	msr	BASEPRI, r3
 800f95c:	f3bf 8f6f 	isb	sy
 800f960:	f3bf 8f4f 	dsb	sy
 800f964:	e7fe      	b.n	800f964 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800f966:	2600      	movs	r6, #0
 800f968:	e7ef      	b.n	800f94a <pvPortMalloc+0xba>
 800f96a:	2600      	movs	r6, #0
 800f96c:	e7ed      	b.n	800f94a <pvPortMalloc+0xba>
}
 800f96e:	4630      	mov	r0, r6
 800f970:	bd70      	pop	{r4, r5, r6, pc}
 800f972:	bf00      	nop
 800f974:	240077a0 	.word	0x240077a0
 800f978:	2400f7a4 	.word	0x2400f7a4
 800f97c:	2400f7a8 	.word	0x2400f7a8
 800f980:	2400f7b8 	.word	0x2400f7b8
 800f984:	2400f7ac 	.word	0x2400f7ac
 800f988:	2400f7b0 	.word	0x2400f7b0

0800f98c <vPortFree>:
	if( pv != NULL )
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d034      	beq.n	800f9fa <vPortFree+0x6e>
{
 800f990:	b538      	push	{r3, r4, r5, lr}
 800f992:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800f994:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f998:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f99c:	4a17      	ldr	r2, [pc, #92]	; (800f9fc <vPortFree+0x70>)
 800f99e:	6812      	ldr	r2, [r2, #0]
 800f9a0:	4213      	tst	r3, r2
 800f9a2:	d108      	bne.n	800f9b6 <vPortFree+0x2a>
 800f9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a8:	f383 8811 	msr	BASEPRI, r3
 800f9ac:	f3bf 8f6f 	isb	sy
 800f9b0:	f3bf 8f4f 	dsb	sy
 800f9b4:	e7fe      	b.n	800f9b4 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f9b6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800f9ba:	b141      	cbz	r1, 800f9ce <vPortFree+0x42>
 800f9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c0:	f383 8811 	msr	BASEPRI, r3
 800f9c4:	f3bf 8f6f 	isb	sy
 800f9c8:	f3bf 8f4f 	dsb	sy
 800f9cc:	e7fe      	b.n	800f9cc <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f9ce:	ea23 0302 	bic.w	r3, r3, r2
 800f9d2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800f9d6:	f001 fa19 	bl	8010e0c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f9da:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800f9de:	4a08      	ldr	r2, [pc, #32]	; (800fa00 <vPortFree+0x74>)
 800f9e0:	6813      	ldr	r3, [r2, #0]
 800f9e2:	440b      	add	r3, r1
 800f9e4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	f7ff ff20 	bl	800f82c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f9ec:	4a05      	ldr	r2, [pc, #20]	; (800fa04 <vPortFree+0x78>)
 800f9ee:	6813      	ldr	r3, [r2, #0]
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800f9f4:	f001 faa4 	bl	8010f40 <xTaskResumeAll>
}
 800f9f8:	bd38      	pop	{r3, r4, r5, pc}
 800f9fa:	4770      	bx	lr
 800f9fc:	2400f7a4 	.word	0x2400f7a4
 800fa00:	2400f7a8 	.word	0x2400f7a8
 800fa04:	2400f7b4 	.word	0x2400f7b4

0800fa08 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa08:	f100 0308 	add.w	r3, r0, #8
 800fa0c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fa0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa12:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa14:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa16:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fa1c:	4770      	bx	lr

0800fa1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fa22:	4770      	bx	lr

0800fa24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800fa24:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fa26:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa28:	689a      	ldr	r2, [r3, #8]
 800fa2a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fa2c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fa2e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fa30:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800fa32:	6803      	ldr	r3, [r0, #0]
 800fa34:	3301      	adds	r3, #1
 800fa36:	6003      	str	r3, [r0, #0]
}
 800fa38:	4770      	bx	lr

0800fa3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa3a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fa3c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fa3e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800fa42:	d011      	beq.n	800fa68 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fa44:	f100 0308 	add.w	r3, r0, #8
 800fa48:	461c      	mov	r4, r3
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	42aa      	cmp	r2, r5
 800fa50:	d9fa      	bls.n	800fa48 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fa52:	6863      	ldr	r3, [r4, #4]
 800fa54:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fa56:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fa58:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800fa5a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fa5c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800fa5e:	6803      	ldr	r3, [r0, #0]
 800fa60:	3301      	adds	r3, #1
 800fa62:	6003      	str	r3, [r0, #0]
}
 800fa64:	bc30      	pop	{r4, r5}
 800fa66:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800fa68:	6904      	ldr	r4, [r0, #16]
 800fa6a:	e7f2      	b.n	800fa52 <vListInsert+0x18>

0800fa6c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fa6c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fa6e:	6841      	ldr	r1, [r0, #4]
 800fa70:	6882      	ldr	r2, [r0, #8]
 800fa72:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fa74:	6841      	ldr	r1, [r0, #4]
 800fa76:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fa78:	685a      	ldr	r2, [r3, #4]
 800fa7a:	4282      	cmp	r2, r0
 800fa7c:	d006      	beq.n	800fa8c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fa7e:	2200      	movs	r2, #0
 800fa80:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	3a01      	subs	r2, #1
 800fa86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fa88:	6818      	ldr	r0, [r3, #0]
}
 800fa8a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fa8c:	6882      	ldr	r2, [r0, #8]
 800fa8e:	605a      	str	r2, [r3, #4]
 800fa90:	e7f5      	b.n	800fa7e <uxListRemove+0x12>
	...

0800fa94 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fa94:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800fa96:	2300      	movs	r3, #0
 800fa98:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fa9a:	4b0d      	ldr	r3, [pc, #52]	; (800fad0 <prvTaskExitError+0x3c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa2:	d008      	beq.n	800fab6 <prvTaskExitError+0x22>
 800faa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa8:	f383 8811 	msr	BASEPRI, r3
 800faac:	f3bf 8f6f 	isb	sy
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	e7fe      	b.n	800fab4 <prvTaskExitError+0x20>
 800fab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faba:	f383 8811 	msr	BASEPRI, r3
 800fabe:	f3bf 8f6f 	isb	sy
 800fac2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fac6:	9b01      	ldr	r3, [sp, #4]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d0fc      	beq.n	800fac6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800facc:	b002      	add	sp, #8
 800face:	4770      	bx	lr
 800fad0:	24000080 	.word	0x24000080

0800fad4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fad4:	4808      	ldr	r0, [pc, #32]	; (800faf8 <prvPortStartFirstTask+0x24>)
 800fad6:	6800      	ldr	r0, [r0, #0]
 800fad8:	6800      	ldr	r0, [r0, #0]
 800fada:	f380 8808 	msr	MSP, r0
 800fade:	f04f 0000 	mov.w	r0, #0
 800fae2:	f380 8814 	msr	CONTROL, r0
 800fae6:	b662      	cpsie	i
 800fae8:	b661      	cpsie	f
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	f3bf 8f6f 	isb	sy
 800faf2:	df00      	svc	0
 800faf4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800faf6:	0000      	.short	0x0000
 800faf8:	e000ed08 	.word	0xe000ed08

0800fafc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fafc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fb0c <vPortEnableVFP+0x10>
 800fb00:	6801      	ldr	r1, [r0, #0]
 800fb02:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fb06:	6001      	str	r1, [r0, #0]
 800fb08:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb0a:	0000      	.short	0x0000
 800fb0c:	e000ed88 	.word	0xe000ed88

0800fb10 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fb14:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb18:	f021 0101 	bic.w	r1, r1, #1
 800fb1c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb20:	4b05      	ldr	r3, [pc, #20]	; (800fb38 <pxPortInitialiseStack+0x28>)
 800fb22:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb26:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb2a:	f06f 0302 	mvn.w	r3, #2
 800fb2e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800fb32:	3844      	subs	r0, #68	; 0x44
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop
 800fb38:	0800fa95 	.word	0x0800fa95
 800fb3c:	00000000 	.word	0x00000000

0800fb40 <SVC_Handler>:
	__asm volatile (
 800fb40:	4b07      	ldr	r3, [pc, #28]	; (800fb60 <pxCurrentTCBConst2>)
 800fb42:	6819      	ldr	r1, [r3, #0]
 800fb44:	6808      	ldr	r0, [r1, #0]
 800fb46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb4a:	f380 8809 	msr	PSP, r0
 800fb4e:	f3bf 8f6f 	isb	sy
 800fb52:	f04f 0000 	mov.w	r0, #0
 800fb56:	f380 8811 	msr	BASEPRI, r0
 800fb5a:	4770      	bx	lr
 800fb5c:	f3af 8000 	nop.w

0800fb60 <pxCurrentTCBConst2>:
 800fb60:	2400f808 	.word	0x2400f808

0800fb64 <vPortEnterCritical>:
 800fb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb68:	f383 8811 	msr	BASEPRI, r3
 800fb6c:	f3bf 8f6f 	isb	sy
 800fb70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800fb74:	4a0b      	ldr	r2, [pc, #44]	; (800fba4 <vPortEnterCritical+0x40>)
 800fb76:	6813      	ldr	r3, [r2, #0]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d000      	beq.n	800fb82 <vPortEnterCritical+0x1e>
}
 800fb80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fb86:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800fb8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fb8e:	d0f7      	beq.n	800fb80 <vPortEnterCritical+0x1c>
 800fb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb94:	f383 8811 	msr	BASEPRI, r3
 800fb98:	f3bf 8f6f 	isb	sy
 800fb9c:	f3bf 8f4f 	dsb	sy
 800fba0:	e7fe      	b.n	800fba0 <vPortEnterCritical+0x3c>
 800fba2:	bf00      	nop
 800fba4:	24000080 	.word	0x24000080

0800fba8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800fba8:	4b09      	ldr	r3, [pc, #36]	; (800fbd0 <vPortExitCritical+0x28>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	b943      	cbnz	r3, 800fbc0 <vPortExitCritical+0x18>
 800fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb2:	f383 8811 	msr	BASEPRI, r3
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	e7fe      	b.n	800fbbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800fbc0:	3b01      	subs	r3, #1
 800fbc2:	4a03      	ldr	r2, [pc, #12]	; (800fbd0 <vPortExitCritical+0x28>)
 800fbc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fbc6:	b90b      	cbnz	r3, 800fbcc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fbc8:	f383 8811 	msr	BASEPRI, r3
}
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop
 800fbd0:	24000080 	.word	0x24000080
	...

0800fbe0 <PendSV_Handler>:
	__asm volatile
 800fbe0:	f3ef 8009 	mrs	r0, PSP
 800fbe4:	f3bf 8f6f 	isb	sy
 800fbe8:	4b15      	ldr	r3, [pc, #84]	; (800fc40 <pxCurrentTCBConst>)
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	f01e 0f10 	tst.w	lr, #16
 800fbf0:	bf08      	it	eq
 800fbf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fbf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfa:	6010      	str	r0, [r2, #0]
 800fbfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fc04:	f380 8811 	msr	BASEPRI, r0
 800fc08:	f3bf 8f4f 	dsb	sy
 800fc0c:	f3bf 8f6f 	isb	sy
 800fc10:	f001 fa12 	bl	8011038 <vTaskSwitchContext>
 800fc14:	f04f 0000 	mov.w	r0, #0
 800fc18:	f380 8811 	msr	BASEPRI, r0
 800fc1c:	bc09      	pop	{r0, r3}
 800fc1e:	6819      	ldr	r1, [r3, #0]
 800fc20:	6808      	ldr	r0, [r1, #0]
 800fc22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc26:	f01e 0f10 	tst.w	lr, #16
 800fc2a:	bf08      	it	eq
 800fc2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fc30:	f380 8809 	msr	PSP, r0
 800fc34:	f3bf 8f6f 	isb	sy
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	f3af 8000 	nop.w

0800fc40 <pxCurrentTCBConst>:
 800fc40:	2400f808 	.word	0x2400f808

0800fc44 <xPortSysTickHandler>:
{
 800fc44:	b508      	push	{r3, lr}
	__asm volatile
 800fc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800fc56:	f001 f8e7 	bl	8010e28 <xTaskIncrementTick>
 800fc5a:	b128      	cbz	r0, 800fc68 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fc60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc64:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800fc68:	2300      	movs	r3, #0
 800fc6a:	f383 8811 	msr	BASEPRI, r3
}
 800fc6e:	bd08      	pop	{r3, pc}

0800fc70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc70:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800fc74:	2300      	movs	r3, #0
 800fc76:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc78:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc7a:	4b05      	ldr	r3, [pc, #20]	; (800fc90 <vPortSetupTimerInterrupt+0x20>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4905      	ldr	r1, [pc, #20]	; (800fc94 <vPortSetupTimerInterrupt+0x24>)
 800fc80:	fba1 1303 	umull	r1, r3, r1, r3
 800fc84:	099b      	lsrs	r3, r3, #6
 800fc86:	3b01      	subs	r3, #1
 800fc88:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc8a:	2307      	movs	r3, #7
 800fc8c:	6113      	str	r3, [r2, #16]
}
 800fc8e:	4770      	bx	lr
 800fc90:	24000070 	.word	0x24000070
 800fc94:	10624dd3 	.word	0x10624dd3

0800fc98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fc98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fc9c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800fca0:	4b3d      	ldr	r3, [pc, #244]	; (800fd98 <xPortStartScheduler+0x100>)
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d01c      	beq.n	800fce0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fca6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fcaa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800fcae:	4b3b      	ldr	r3, [pc, #236]	; (800fd9c <xPortStartScheduler+0x104>)
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d01e      	beq.n	800fcf2 <xPortStartScheduler+0x5a>
{
 800fcb4:	b530      	push	{r4, r5, lr}
 800fcb6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fcb8:	4b39      	ldr	r3, [pc, #228]	; (800fda0 <xPortStartScheduler+0x108>)
 800fcba:	781a      	ldrb	r2, [r3, #0]
 800fcbc:	b2d2      	uxtb	r2, r2
 800fcbe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fcc0:	22ff      	movs	r2, #255	; 0xff
 800fcc2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fccc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fcd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fcd4:	4a33      	ldr	r2, [pc, #204]	; (800fda4 <xPortStartScheduler+0x10c>)
 800fcd6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fcd8:	4b33      	ldr	r3, [pc, #204]	; (800fda8 <xPortStartScheduler+0x110>)
 800fcda:	2207      	movs	r2, #7
 800fcdc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcde:	e01b      	b.n	800fd18 <xPortStartScheduler+0x80>
	__asm volatile
 800fce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce4:	f383 8811 	msr	BASEPRI, r3
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fcf0:	e7fe      	b.n	800fcf0 <xPortStartScheduler+0x58>
 800fcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf6:	f383 8811 	msr	BASEPRI, r3
 800fcfa:	f3bf 8f6f 	isb	sy
 800fcfe:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fd02:	e7fe      	b.n	800fd02 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800fd04:	4a28      	ldr	r2, [pc, #160]	; (800fda8 <xPortStartScheduler+0x110>)
 800fd06:	6813      	ldr	r3, [r2, #0]
 800fd08:	3b01      	subs	r3, #1
 800fd0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fd0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fd10:	005b      	lsls	r3, r3, #1
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fd1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fd20:	d1f0      	bne.n	800fd04 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fd22:	4b21      	ldr	r3, [pc, #132]	; (800fda8 <xPortStartScheduler+0x110>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	d008      	beq.n	800fd3c <xPortStartScheduler+0xa4>
 800fd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd2e:	f383 8811 	msr	BASEPRI, r3
 800fd32:	f3bf 8f6f 	isb	sy
 800fd36:	f3bf 8f4f 	dsb	sy
 800fd3a:	e7fe      	b.n	800fd3a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fd3c:	021b      	lsls	r3, r3, #8
 800fd3e:	4a1a      	ldr	r2, [pc, #104]	; (800fda8 <xPortStartScheduler+0x110>)
 800fd40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fd46:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd48:	9b01      	ldr	r3, [sp, #4]
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	4a14      	ldr	r2, [pc, #80]	; (800fda0 <xPortStartScheduler+0x108>)
 800fd4e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd50:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800fd54:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800fd58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fd5c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd60:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800fd64:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fd68:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800fd6c:	f7ff ff80 	bl	800fc70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800fd70:	2500      	movs	r5, #0
 800fd72:	4b0e      	ldr	r3, [pc, #56]	; (800fdac <xPortStartScheduler+0x114>)
 800fd74:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800fd76:	f7ff fec1 	bl	800fafc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd7a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800fd7e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fd82:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800fd86:	f7ff fea5 	bl	800fad4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800fd8a:	f001 f955 	bl	8011038 <vTaskSwitchContext>
	prvTaskExitError();
 800fd8e:	f7ff fe81 	bl	800fa94 <prvTaskExitError>
}
 800fd92:	4628      	mov	r0, r5
 800fd94:	b003      	add	sp, #12
 800fd96:	bd30      	pop	{r4, r5, pc}
 800fd98:	410fc271 	.word	0x410fc271
 800fd9c:	410fc270 	.word	0x410fc270
 800fda0:	e000e400 	.word	0xe000e400
 800fda4:	2400f7c0 	.word	0x2400f7c0
 800fda8:	2400f7c4 	.word	0x2400f7c4
 800fdac:	24000080 	.word	0x24000080

0800fdb0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fdb0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fdb4:	2b0f      	cmp	r3, #15
 800fdb6:	d90f      	bls.n	800fdd8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fdb8:	4a11      	ldr	r2, [pc, #68]	; (800fe00 <vPortValidateInterruptPriority+0x50>)
 800fdba:	5c9b      	ldrb	r3, [r3, r2]
 800fdbc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fdbe:	4a11      	ldr	r2, [pc, #68]	; (800fe04 <vPortValidateInterruptPriority+0x54>)
 800fdc0:	7812      	ldrb	r2, [r2, #0]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d908      	bls.n	800fdd8 <vPortValidateInterruptPriority+0x28>
 800fdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdca:	f383 8811 	msr	BASEPRI, r3
 800fdce:	f3bf 8f6f 	isb	sy
 800fdd2:	f3bf 8f4f 	dsb	sy
 800fdd6:	e7fe      	b.n	800fdd6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fdd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fddc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800fde0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fde4:	4a08      	ldr	r2, [pc, #32]	; (800fe08 <vPortValidateInterruptPriority+0x58>)
 800fde6:	6812      	ldr	r2, [r2, #0]
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d908      	bls.n	800fdfe <vPortValidateInterruptPriority+0x4e>
 800fdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf0:	f383 8811 	msr	BASEPRI, r3
 800fdf4:	f3bf 8f6f 	isb	sy
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	e7fe      	b.n	800fdfc <vPortValidateInterruptPriority+0x4c>
	}
 800fdfe:	4770      	bx	lr
 800fe00:	e000e3f0 	.word	0xe000e3f0
 800fe04:	2400f7c0 	.word	0x2400f7c0
 800fe08:	2400f7c4 	.word	0x2400f7c4

0800fe0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fe0c:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fe0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fe10:	b118      	cbz	r0, 800fe1a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fe12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe14:	6818      	ldr	r0, [r3, #0]
 800fe16:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800fe1a:	4770      	bx	lr

0800fe1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fe1c:	b510      	push	{r4, lr}
 800fe1e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fe20:	f7ff fea0 	bl	800fb64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fe24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fe26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d004      	beq.n	800fe36 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800fe2c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800fe2e:	f7ff febb 	bl	800fba8 <vPortExitCritical>

	return xReturn;
}
 800fe32:	4620      	mov	r0, r4
 800fe34:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800fe36:	2401      	movs	r4, #1
 800fe38:	e7f9      	b.n	800fe2e <prvIsQueueFull+0x12>

0800fe3a <prvIsQueueEmpty>:
{
 800fe3a:	b510      	push	{r4, lr}
 800fe3c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800fe3e:	f7ff fe91 	bl	800fb64 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fe42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fe44:	b923      	cbnz	r3, 800fe50 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800fe46:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800fe48:	f7ff feae 	bl	800fba8 <vPortExitCritical>
}
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800fe50:	2400      	movs	r4, #0
 800fe52:	e7f9      	b.n	800fe48 <prvIsQueueEmpty+0xe>

0800fe54 <prvCopyDataToQueue>:
{
 800fe54:	b570      	push	{r4, r5, r6, lr}
 800fe56:	4604      	mov	r4, r0
 800fe58:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe5a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fe5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fe5e:	b95a      	cbnz	r2, 800fe78 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe60:	6803      	ldr	r3, [r0, #0]
 800fe62:	b11b      	cbz	r3, 800fe6c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800fe64:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe66:	3601      	adds	r6, #1
 800fe68:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800fe6a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe6c:	6880      	ldr	r0, [r0, #8]
 800fe6e:	f001 fa5d 	bl	801132c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fe72:	2300      	movs	r3, #0
 800fe74:	60a3      	str	r3, [r4, #8]
 800fe76:	e7f6      	b.n	800fe66 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800fe78:	b96d      	cbnz	r5, 800fe96 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe7a:	6840      	ldr	r0, [r0, #4]
 800fe7c:	f013 fb92 	bl	80235a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fe82:	6863      	ldr	r3, [r4, #4]
 800fe84:	4413      	add	r3, r2
 800fe86:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe88:	68a2      	ldr	r2, [r4, #8]
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d319      	bcc.n	800fec2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800fe92:	4628      	mov	r0, r5
 800fe94:	e7e7      	b.n	800fe66 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe96:	68c0      	ldr	r0, [r0, #12]
 800fe98:	f013 fb84 	bl	80235a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fe9e:	4251      	negs	r1, r2
 800fea0:	68e3      	ldr	r3, [r4, #12]
 800fea2:	1a9b      	subs	r3, r3, r2
 800fea4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fea6:	6822      	ldr	r2, [r4, #0]
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d202      	bcs.n	800feb2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800feac:	68a3      	ldr	r3, [r4, #8]
 800feae:	440b      	add	r3, r1
 800feb0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800feb2:	2d02      	cmp	r5, #2
 800feb4:	d001      	beq.n	800feba <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800feb6:	2000      	movs	r0, #0
 800feb8:	e7d5      	b.n	800fe66 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800feba:	b126      	cbz	r6, 800fec6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800febc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800febe:	2000      	movs	r0, #0
 800fec0:	e7d1      	b.n	800fe66 <prvCopyDataToQueue+0x12>
 800fec2:	4628      	mov	r0, r5
 800fec4:	e7cf      	b.n	800fe66 <prvCopyDataToQueue+0x12>
 800fec6:	2000      	movs	r0, #0
 800fec8:	e7cd      	b.n	800fe66 <prvCopyDataToQueue+0x12>

0800feca <prvCopyDataFromQueue>:
{
 800feca:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fecc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fece:	b16a      	cbz	r2, 800feec <prvCopyDataFromQueue+0x22>
{
 800fed0:	b510      	push	{r4, lr}
 800fed2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fed4:	68d9      	ldr	r1, [r3, #12]
 800fed6:	4411      	add	r1, r2
 800fed8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800feda:	689c      	ldr	r4, [r3, #8]
 800fedc:	42a1      	cmp	r1, r4
 800fede:	d301      	bcc.n	800fee4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fee0:	6819      	ldr	r1, [r3, #0]
 800fee2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fee4:	68d9      	ldr	r1, [r3, #12]
 800fee6:	f013 fb5d 	bl	80235a4 <memcpy>
}
 800feea:	bd10      	pop	{r4, pc}
 800feec:	4770      	bx	lr

0800feee <prvUnlockQueue>:
{
 800feee:	b538      	push	{r3, r4, r5, lr}
 800fef0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800fef2:	f7ff fe37 	bl	800fb64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800fef6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800fefa:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fefc:	e001      	b.n	800ff02 <prvUnlockQueue+0x14>
			--cTxLock;
 800fefe:	3c01      	subs	r4, #1
 800ff00:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff02:	2c00      	cmp	r4, #0
 800ff04:	dd0a      	ble.n	800ff1c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff08:	b143      	cbz	r3, 800ff1c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff0a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800ff0e:	f001 f917 	bl	8011140 <xTaskRemoveFromEventList>
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d0f3      	beq.n	800fefe <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800ff16:	f001 f9a7 	bl	8011268 <vTaskMissedYield>
 800ff1a:	e7f0      	b.n	800fefe <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800ff1c:	23ff      	movs	r3, #255	; 0xff
 800ff1e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ff22:	f7ff fe41 	bl	800fba8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ff26:	f7ff fe1d 	bl	800fb64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ff2a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800ff2e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff30:	e001      	b.n	800ff36 <prvUnlockQueue+0x48>
				--cRxLock;
 800ff32:	3c01      	subs	r4, #1
 800ff34:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff36:	2c00      	cmp	r4, #0
 800ff38:	dd0a      	ble.n	800ff50 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff3a:	692b      	ldr	r3, [r5, #16]
 800ff3c:	b143      	cbz	r3, 800ff50 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff3e:	f105 0010 	add.w	r0, r5, #16
 800ff42:	f001 f8fd 	bl	8011140 <xTaskRemoveFromEventList>
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d0f3      	beq.n	800ff32 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800ff4a:	f001 f98d 	bl	8011268 <vTaskMissedYield>
 800ff4e:	e7f0      	b.n	800ff32 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800ff50:	23ff      	movs	r3, #255	; 0xff
 800ff52:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ff56:	f7ff fe27 	bl	800fba8 <vPortExitCritical>
}
 800ff5a:	bd38      	pop	{r3, r4, r5, pc}

0800ff5c <xQueueGenericReset>:
{
 800ff5c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800ff5e:	b1e0      	cbz	r0, 800ff9a <xQueueGenericReset+0x3e>
 800ff60:	460d      	mov	r5, r1
 800ff62:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ff64:	f7ff fdfe 	bl	800fb64 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff68:	6823      	ldr	r3, [r4, #0]
 800ff6a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ff6c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ff6e:	fb01 3002 	mla	r0, r1, r2, r3
 800ff72:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ff74:	2000      	movs	r0, #0
 800ff76:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff78:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff7a:	3a01      	subs	r2, #1
 800ff7c:	fb02 3301 	mla	r3, r2, r1, r3
 800ff80:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ff82:	23ff      	movs	r3, #255	; 0xff
 800ff84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ff88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800ff8c:	b9fd      	cbnz	r5, 800ffce <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff8e:	6923      	ldr	r3, [r4, #16]
 800ff90:	b963      	cbnz	r3, 800ffac <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800ff92:	f7ff fe09 	bl	800fba8 <vPortExitCritical>
}
 800ff96:	2001      	movs	r0, #1
 800ff98:	bd38      	pop	{r3, r4, r5, pc}
 800ff9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9e:	f383 8811 	msr	BASEPRI, r3
 800ffa2:	f3bf 8f6f 	isb	sy
 800ffa6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ffaa:	e7fe      	b.n	800ffaa <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffac:	f104 0010 	add.w	r0, r4, #16
 800ffb0:	f001 f8c6 	bl	8011140 <xTaskRemoveFromEventList>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	d0ec      	beq.n	800ff92 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800ffb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ffbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ffc4:	f3bf 8f4f 	dsb	sy
 800ffc8:	f3bf 8f6f 	isb	sy
 800ffcc:	e7e1      	b.n	800ff92 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ffce:	f104 0010 	add.w	r0, r4, #16
 800ffd2:	f7ff fd19 	bl	800fa08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ffd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ffda:	f7ff fd15 	bl	800fa08 <vListInitialise>
 800ffde:	e7d8      	b.n	800ff92 <xQueueGenericReset+0x36>

0800ffe0 <prvInitialiseNewQueue>:
{
 800ffe0:	b538      	push	{r3, r4, r5, lr}
 800ffe2:	461d      	mov	r5, r3
 800ffe4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ffe6:	460b      	mov	r3, r1
 800ffe8:	b949      	cbnz	r1, 800fffe <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ffea:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800ffec:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ffee:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fff0:	2101      	movs	r1, #1
 800fff2:	4620      	mov	r0, r4
 800fff4:	f7ff ffb2 	bl	800ff5c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800fff8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800fffc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fffe:	6022      	str	r2, [r4, #0]
 8010000:	e7f4      	b.n	800ffec <prvInitialiseNewQueue+0xc>

08010002 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010002:	b940      	cbnz	r0, 8010016 <xQueueGenericCreateStatic+0x14>
 8010004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010008:	f383 8811 	msr	BASEPRI, r3
 801000c:	f3bf 8f6f 	isb	sy
 8010010:	f3bf 8f4f 	dsb	sy
 8010014:	e7fe      	b.n	8010014 <xQueueGenericCreateStatic+0x12>
	{
 8010016:	b510      	push	{r4, lr}
 8010018:	b084      	sub	sp, #16
 801001a:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 801001c:	b183      	cbz	r3, 8010040 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801001e:	1e0b      	subs	r3, r1, #0
 8010020:	bf18      	it	ne
 8010022:	2301      	movne	r3, #1
 8010024:	2a00      	cmp	r2, #0
 8010026:	bf08      	it	eq
 8010028:	f043 0301 	orreq.w	r3, r3, #1
 801002c:	b98b      	cbnz	r3, 8010052 <xQueueGenericCreateStatic+0x50>
 801002e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010032:	f383 8811 	msr	BASEPRI, r3
 8010036:	f3bf 8f6f 	isb	sy
 801003a:	f3bf 8f4f 	dsb	sy
 801003e:	e7fe      	b.n	801003e <xQueueGenericCreateStatic+0x3c>
 8010040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010044:	f383 8811 	msr	BASEPRI, r3
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8010050:	e7fe      	b.n	8010050 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010052:	fab1 f381 	clz	r3, r1
 8010056:	095b      	lsrs	r3, r3, #5
 8010058:	2a00      	cmp	r2, #0
 801005a:	bf18      	it	ne
 801005c:	f043 0301 	orrne.w	r3, r3, #1
 8010060:	b943      	cbnz	r3, 8010074 <xQueueGenericCreateStatic+0x72>
 8010062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010066:	f383 8811 	msr	BASEPRI, r3
 801006a:	f3bf 8f6f 	isb	sy
 801006e:	f3bf 8f4f 	dsb	sy
 8010072:	e7fe      	b.n	8010072 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010074:	2350      	movs	r3, #80	; 0x50
 8010076:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010078:	9b03      	ldr	r3, [sp, #12]
 801007a:	2b50      	cmp	r3, #80	; 0x50
 801007c:	d008      	beq.n	8010090 <xQueueGenericCreateStatic+0x8e>
 801007e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	e7fe      	b.n	801008e <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010090:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010092:	2301      	movs	r3, #1
 8010094:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010098:	9400      	str	r4, [sp, #0]
 801009a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801009e:	f7ff ff9f 	bl	800ffe0 <prvInitialiseNewQueue>
	}
 80100a2:	4620      	mov	r0, r4
 80100a4:	b004      	add	sp, #16
 80100a6:	bd10      	pop	{r4, pc}

080100a8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80100a8:	b940      	cbnz	r0, 80100bc <xQueueGenericCreate+0x14>
 80100aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ae:	f383 8811 	msr	BASEPRI, r3
 80100b2:	f3bf 8f6f 	isb	sy
 80100b6:	f3bf 8f4f 	dsb	sy
 80100ba:	e7fe      	b.n	80100ba <xQueueGenericCreate+0x12>
	{
 80100bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100be:	b083      	sub	sp, #12
 80100c0:	460d      	mov	r5, r1
 80100c2:	4614      	mov	r4, r2
 80100c4:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100c6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80100ca:	3050      	adds	r0, #80	; 0x50
 80100cc:	f7ff fbe0 	bl	800f890 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80100d0:	4607      	mov	r7, r0
 80100d2:	b150      	cbz	r0, 80100ea <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80100d4:	2300      	movs	r3, #0
 80100d6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80100da:	9000      	str	r0, [sp, #0]
 80100dc:	4623      	mov	r3, r4
 80100de:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80100e2:	4629      	mov	r1, r5
 80100e4:	4630      	mov	r0, r6
 80100e6:	f7ff ff7b 	bl	800ffe0 <prvInitialiseNewQueue>
	}
 80100ea:	4638      	mov	r0, r7
 80100ec:	b003      	add	sp, #12
 80100ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080100f0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80100f0:	b940      	cbnz	r0, 8010104 <xQueueCreateCountingSemaphoreStatic+0x14>
 80100f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f6:	f383 8811 	msr	BASEPRI, r3
 80100fa:	f3bf 8f6f 	isb	sy
 80100fe:	f3bf 8f4f 	dsb	sy
 8010102:	e7fe      	b.n	8010102 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8010104:	b510      	push	{r4, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 801010a:	4288      	cmp	r0, r1
 801010c:	d208      	bcs.n	8010120 <xQueueCreateCountingSemaphoreStatic+0x30>
 801010e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010112:	f383 8811 	msr	BASEPRI, r3
 8010116:	f3bf 8f6f 	isb	sy
 801011a:	f3bf 8f4f 	dsb	sy
 801011e:	e7fe      	b.n	801011e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010120:	2302      	movs	r3, #2
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	4613      	mov	r3, r2
 8010126:	2200      	movs	r2, #0
 8010128:	4611      	mov	r1, r2
 801012a:	f7ff ff6a 	bl	8010002 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 801012e:	b100      	cbz	r0, 8010132 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010130:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8010132:	b002      	add	sp, #8
 8010134:	bd10      	pop	{r4, pc}

08010136 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8010136:	b940      	cbnz	r0, 801014a <xQueueCreateCountingSemaphore+0x14>
 8010138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013c:	f383 8811 	msr	BASEPRI, r3
 8010140:	f3bf 8f6f 	isb	sy
 8010144:	f3bf 8f4f 	dsb	sy
 8010148:	e7fe      	b.n	8010148 <xQueueCreateCountingSemaphore+0x12>
	{
 801014a:	b510      	push	{r4, lr}
 801014c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 801014e:	4288      	cmp	r0, r1
 8010150:	d208      	bcs.n	8010164 <xQueueCreateCountingSemaphore+0x2e>
 8010152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010156:	f383 8811 	msr	BASEPRI, r3
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	e7fe      	b.n	8010162 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010164:	2202      	movs	r2, #2
 8010166:	2100      	movs	r1, #0
 8010168:	f7ff ff9e 	bl	80100a8 <xQueueGenericCreate>
		if( xHandle != NULL )
 801016c:	b100      	cbz	r0, 8010170 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801016e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8010170:	bd10      	pop	{r4, pc}

08010172 <xQueueGenericSend>:
{
 8010172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010174:	b085      	sub	sp, #20
 8010176:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010178:	b188      	cbz	r0, 801019e <xQueueGenericSend+0x2c>
 801017a:	460f      	mov	r7, r1
 801017c:	461d      	mov	r5, r3
 801017e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010180:	b1b1      	cbz	r1, 80101b0 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010182:	2d02      	cmp	r5, #2
 8010184:	d120      	bne.n	80101c8 <xQueueGenericSend+0x56>
 8010186:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010188:	2b01      	cmp	r3, #1
 801018a:	d01d      	beq.n	80101c8 <xQueueGenericSend+0x56>
 801018c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010190:	f383 8811 	msr	BASEPRI, r3
 8010194:	f3bf 8f6f 	isb	sy
 8010198:	f3bf 8f4f 	dsb	sy
 801019c:	e7fe      	b.n	801019c <xQueueGenericSend+0x2a>
 801019e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a2:	f383 8811 	msr	BASEPRI, r3
 80101a6:	f3bf 8f6f 	isb	sy
 80101aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80101ae:	e7fe      	b.n	80101ae <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d0e5      	beq.n	8010182 <xQueueGenericSend+0x10>
 80101b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ba:	f383 8811 	msr	BASEPRI, r3
 80101be:	f3bf 8f6f 	isb	sy
 80101c2:	f3bf 8f4f 	dsb	sy
 80101c6:	e7fe      	b.n	80101c6 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80101c8:	f001 f854 	bl	8011274 <xTaskGetSchedulerState>
 80101cc:	4606      	mov	r6, r0
 80101ce:	b958      	cbnz	r0, 80101e8 <xQueueGenericSend+0x76>
 80101d0:	9b01      	ldr	r3, [sp, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d048      	beq.n	8010268 <xQueueGenericSend+0xf6>
 80101d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101da:	f383 8811 	msr	BASEPRI, r3
 80101de:	f3bf 8f6f 	isb	sy
 80101e2:	f3bf 8f4f 	dsb	sy
 80101e6:	e7fe      	b.n	80101e6 <xQueueGenericSend+0x74>
 80101e8:	2600      	movs	r6, #0
 80101ea:	e03d      	b.n	8010268 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101ec:	462a      	mov	r2, r5
 80101ee:	4639      	mov	r1, r7
 80101f0:	4620      	mov	r0, r4
 80101f2:	f7ff fe2f 	bl	800fe54 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101f8:	b97b      	cbnz	r3, 801021a <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 80101fa:	b148      	cbz	r0, 8010210 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80101fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010204:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010208:	f3bf 8f4f 	dsb	sy
 801020c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8010210:	f7ff fcca 	bl	800fba8 <vPortExitCritical>
				return pdPASS;
 8010214:	2001      	movs	r0, #1
}
 8010216:	b005      	add	sp, #20
 8010218:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801021a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801021e:	f000 ff8f 	bl	8011140 <xTaskRemoveFromEventList>
 8010222:	2800      	cmp	r0, #0
 8010224:	d0f4      	beq.n	8010210 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8010226:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801022a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801022e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010232:	f3bf 8f4f 	dsb	sy
 8010236:	f3bf 8f6f 	isb	sy
 801023a:	e7e9      	b.n	8010210 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 801023c:	f7ff fcb4 	bl	800fba8 <vPortExitCritical>
					return errQUEUE_FULL;
 8010240:	2000      	movs	r0, #0
 8010242:	e7e8      	b.n	8010216 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010244:	a802      	add	r0, sp, #8
 8010246:	f000 ffc1 	bl	80111cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801024a:	2601      	movs	r6, #1
 801024c:	e019      	b.n	8010282 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 801024e:	2300      	movs	r3, #0
 8010250:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010254:	e021      	b.n	801029a <xQueueGenericSend+0x128>
 8010256:	2300      	movs	r3, #0
 8010258:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801025c:	e023      	b.n	80102a6 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 801025e:	4620      	mov	r0, r4
 8010260:	f7ff fe45 	bl	800feee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010264:	f000 fe6c 	bl	8010f40 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8010268:	f7ff fc7c 	bl	800fb64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801026c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801026e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010270:	429a      	cmp	r2, r3
 8010272:	d3bb      	bcc.n	80101ec <xQueueGenericSend+0x7a>
 8010274:	2d02      	cmp	r5, #2
 8010276:	d0b9      	beq.n	80101ec <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8010278:	9b01      	ldr	r3, [sp, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d0de      	beq.n	801023c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 801027e:	2e00      	cmp	r6, #0
 8010280:	d0e0      	beq.n	8010244 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8010282:	f7ff fc91 	bl	800fba8 <vPortExitCritical>
		vTaskSuspendAll();
 8010286:	f000 fdc1 	bl	8010e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801028a:	f7ff fc6b 	bl	800fb64 <vPortEnterCritical>
 801028e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8010292:	b252      	sxtb	r2, r2
 8010294:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010298:	d0d9      	beq.n	801024e <xQueueGenericSend+0xdc>
 801029a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 801029e:	b252      	sxtb	r2, r2
 80102a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80102a4:	d0d7      	beq.n	8010256 <xQueueGenericSend+0xe4>
 80102a6:	f7ff fc7f 	bl	800fba8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80102aa:	a901      	add	r1, sp, #4
 80102ac:	a802      	add	r0, sp, #8
 80102ae:	f000 ff99 	bl	80111e4 <xTaskCheckForTimeOut>
 80102b2:	b9d8      	cbnz	r0, 80102ec <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80102b4:	4620      	mov	r0, r4
 80102b6:	f7ff fdb1 	bl	800fe1c <prvIsQueueFull>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	d0cf      	beq.n	801025e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80102be:	9901      	ldr	r1, [sp, #4]
 80102c0:	f104 0010 	add.w	r0, r4, #16
 80102c4:	f000 ff08 	bl	80110d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80102c8:	4620      	mov	r0, r4
 80102ca:	f7ff fe10 	bl	800feee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80102ce:	f000 fe37 	bl	8010f40 <xTaskResumeAll>
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d1c8      	bne.n	8010268 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80102d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80102da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80102e2:	f3bf 8f4f 	dsb	sy
 80102e6:	f3bf 8f6f 	isb	sy
 80102ea:	e7bd      	b.n	8010268 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 80102ec:	4620      	mov	r0, r4
 80102ee:	f7ff fdfe 	bl	800feee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80102f2:	f000 fe25 	bl	8010f40 <xTaskResumeAll>
			return errQUEUE_FULL;
 80102f6:	2000      	movs	r0, #0
 80102f8:	e78d      	b.n	8010216 <xQueueGenericSend+0xa4>

080102fa <xQueueGenericSendFromISR>:
{
 80102fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80102fe:	b190      	cbz	r0, 8010326 <xQueueGenericSendFromISR+0x2c>
 8010300:	460f      	mov	r7, r1
 8010302:	4616      	mov	r6, r2
 8010304:	461c      	mov	r4, r3
 8010306:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010308:	b1b1      	cbz	r1, 8010338 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801030a:	2c02      	cmp	r4, #2
 801030c:	d120      	bne.n	8010350 <xQueueGenericSendFromISR+0x56>
 801030e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010310:	2b01      	cmp	r3, #1
 8010312:	d01d      	beq.n	8010350 <xQueueGenericSendFromISR+0x56>
 8010314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010318:	f383 8811 	msr	BASEPRI, r3
 801031c:	f3bf 8f6f 	isb	sy
 8010320:	f3bf 8f4f 	dsb	sy
 8010324:	e7fe      	b.n	8010324 <xQueueGenericSendFromISR+0x2a>
 8010326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032a:	f383 8811 	msr	BASEPRI, r3
 801032e:	f3bf 8f6f 	isb	sy
 8010332:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010336:	e7fe      	b.n	8010336 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010338:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801033a:	2b00      	cmp	r3, #0
 801033c:	d0e5      	beq.n	801030a <xQueueGenericSendFromISR+0x10>
 801033e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010342:	f383 8811 	msr	BASEPRI, r3
 8010346:	f3bf 8f6f 	isb	sy
 801034a:	f3bf 8f4f 	dsb	sy
 801034e:	e7fe      	b.n	801034e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010350:	f7ff fd2e 	bl	800fdb0 <vPortValidateInterruptPriority>
	__asm volatile
 8010354:	f3ef 8911 	mrs	r9, BASEPRI
 8010358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035c:	f383 8811 	msr	BASEPRI, r3
 8010360:	f3bf 8f6f 	isb	sy
 8010364:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010368:	6baa      	ldr	r2, [r5, #56]	; 0x38
 801036a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801036c:	429a      	cmp	r2, r3
 801036e:	d306      	bcc.n	801037e <xQueueGenericSendFromISR+0x84>
 8010370:	2c02      	cmp	r4, #2
 8010372:	d004      	beq.n	801037e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8010374:	2000      	movs	r0, #0
	__asm volatile
 8010376:	f389 8811 	msr	BASEPRI, r9
}
 801037a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 801037e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8010382:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010386:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010388:	4622      	mov	r2, r4
 801038a:	4639      	mov	r1, r7
 801038c:	4628      	mov	r0, r5
 801038e:	f7ff fd61 	bl	800fe54 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8010392:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010396:	d006      	beq.n	80103a6 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010398:	f108 0301 	add.w	r3, r8, #1
 801039c:	b25b      	sxtb	r3, r3
 801039e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80103a2:	2001      	movs	r0, #1
 80103a4:	e7e7      	b.n	8010376 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80103a8:	b90b      	cbnz	r3, 80103ae <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80103aa:	2001      	movs	r0, #1
 80103ac:	e7e3      	b.n	8010376 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103ae:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80103b2:	f000 fec5 	bl	8011140 <xTaskRemoveFromEventList>
 80103b6:	b118      	cbz	r0, 80103c0 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80103b8:	b126      	cbz	r6, 80103c4 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80103ba:	2001      	movs	r0, #1
 80103bc:	6030      	str	r0, [r6, #0]
 80103be:	e7da      	b.n	8010376 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80103c0:	2001      	movs	r0, #1
 80103c2:	e7d8      	b.n	8010376 <xQueueGenericSendFromISR+0x7c>
 80103c4:	2001      	movs	r0, #1
 80103c6:	e7d6      	b.n	8010376 <xQueueGenericSendFromISR+0x7c>

080103c8 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80103c8:	b168      	cbz	r0, 80103e6 <xQueueGiveFromISR+0x1e>
{
 80103ca:	b570      	push	{r4, r5, r6, lr}
 80103cc:	460c      	mov	r4, r1
 80103ce:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80103d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80103d2:	b18b      	cbz	r3, 80103f8 <xQueueGiveFromISR+0x30>
	__asm volatile
 80103d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d8:	f383 8811 	msr	BASEPRI, r3
 80103dc:	f3bf 8f6f 	isb	sy
 80103e0:	f3bf 8f4f 	dsb	sy
 80103e4:	e7fe      	b.n	80103e4 <xQueueGiveFromISR+0x1c>
 80103e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ea:	f383 8811 	msr	BASEPRI, r3
 80103ee:	f3bf 8f6f 	isb	sy
 80103f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80103f6:	e7fe      	b.n	80103f6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80103f8:	6803      	ldr	r3, [r0, #0]
 80103fa:	b1eb      	cbz	r3, 8010438 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80103fc:	f7ff fcd8 	bl	800fdb0 <vPortValidateInterruptPriority>
	__asm volatile
 8010400:	f3ef 8611 	mrs	r6, BASEPRI
 8010404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010408:	f383 8811 	msr	BASEPRI, r3
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010414:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010416:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010418:	4293      	cmp	r3, r2
 801041a:	d926      	bls.n	801046a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 801041c:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8010420:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010422:	3201      	adds	r2, #1
 8010424:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8010426:	f1b3 3fff 	cmp.w	r3, #4294967295
 801042a:	d011      	beq.n	8010450 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801042c:	3301      	adds	r3, #1
 801042e:	b25b      	sxtb	r3, r3
 8010430:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8010434:	2001      	movs	r0, #1
 8010436:	e019      	b.n	801046c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010438:	6883      	ldr	r3, [r0, #8]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d0de      	beq.n	80103fc <xQueueGiveFromISR+0x34>
	__asm volatile
 801043e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010442:	f383 8811 	msr	BASEPRI, r3
 8010446:	f3bf 8f6f 	isb	sy
 801044a:	f3bf 8f4f 	dsb	sy
 801044e:	e7fe      	b.n	801044e <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010450:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010452:	b90b      	cbnz	r3, 8010458 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8010454:	2001      	movs	r0, #1
 8010456:	e009      	b.n	801046c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010458:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801045c:	f000 fe70 	bl	8011140 <xTaskRemoveFromEventList>
 8010460:	b138      	cbz	r0, 8010472 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8010462:	b144      	cbz	r4, 8010476 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010464:	2001      	movs	r0, #1
 8010466:	6020      	str	r0, [r4, #0]
 8010468:	e000      	b.n	801046c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 801046a:	2000      	movs	r0, #0
	__asm volatile
 801046c:	f386 8811 	msr	BASEPRI, r6
}
 8010470:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8010472:	2001      	movs	r0, #1
 8010474:	e7fa      	b.n	801046c <xQueueGiveFromISR+0xa4>
 8010476:	2001      	movs	r0, #1
 8010478:	e7f8      	b.n	801046c <xQueueGiveFromISR+0xa4>

0801047a <xQueueReceive>:
{
 801047a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801047c:	b085      	sub	sp, #20
 801047e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010480:	b190      	cbz	r0, 80104a8 <xQueueReceive+0x2e>
 8010482:	460f      	mov	r7, r1
 8010484:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010486:	b1c1      	cbz	r1, 80104ba <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010488:	f000 fef4 	bl	8011274 <xTaskGetSchedulerState>
 801048c:	4606      	mov	r6, r0
 801048e:	bb00      	cbnz	r0, 80104d2 <xQueueReceive+0x58>
 8010490:	9b01      	ldr	r3, [sp, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d05e      	beq.n	8010554 <xQueueReceive+0xda>
	__asm volatile
 8010496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049a:	f383 8811 	msr	BASEPRI, r3
 801049e:	f3bf 8f6f 	isb	sy
 80104a2:	f3bf 8f4f 	dsb	sy
 80104a6:	e7fe      	b.n	80104a6 <xQueueReceive+0x2c>
 80104a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ac:	f383 8811 	msr	BASEPRI, r3
 80104b0:	f3bf 8f6f 	isb	sy
 80104b4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80104b8:	e7fe      	b.n	80104b8 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d0e3      	beq.n	8010488 <xQueueReceive+0xe>
 80104c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c4:	f383 8811 	msr	BASEPRI, r3
 80104c8:	f3bf 8f6f 	isb	sy
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	e7fe      	b.n	80104d0 <xQueueReceive+0x56>
 80104d2:	2600      	movs	r6, #0
 80104d4:	e03e      	b.n	8010554 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80104d6:	4639      	mov	r1, r7
 80104d8:	4620      	mov	r0, r4
 80104da:	f7ff fcf6 	bl	800feca <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80104de:	3d01      	subs	r5, #1
 80104e0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104e2:	6923      	ldr	r3, [r4, #16]
 80104e4:	b923      	cbnz	r3, 80104f0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80104e6:	f7ff fb5f 	bl	800fba8 <vPortExitCritical>
				return pdPASS;
 80104ea:	2001      	movs	r0, #1
}
 80104ec:	b005      	add	sp, #20
 80104ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104f0:	f104 0010 	add.w	r0, r4, #16
 80104f4:	f000 fe24 	bl	8011140 <xTaskRemoveFromEventList>
 80104f8:	2800      	cmp	r0, #0
 80104fa:	d0f4      	beq.n	80104e6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80104fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010504:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010508:	f3bf 8f4f 	dsb	sy
 801050c:	f3bf 8f6f 	isb	sy
 8010510:	e7e9      	b.n	80104e6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8010512:	f7ff fb49 	bl	800fba8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8010516:	2000      	movs	r0, #0
 8010518:	e7e8      	b.n	80104ec <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801051a:	a802      	add	r0, sp, #8
 801051c:	f000 fe56 	bl	80111cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010520:	2601      	movs	r6, #1
 8010522:	e021      	b.n	8010568 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8010524:	2300      	movs	r3, #0
 8010526:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801052a:	e029      	b.n	8010580 <xQueueReceive+0x106>
 801052c:	2300      	movs	r3, #0
 801052e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010532:	e02b      	b.n	801058c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8010534:	4620      	mov	r0, r4
 8010536:	f7ff fcda 	bl	800feee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801053a:	f000 fd01 	bl	8010f40 <xTaskResumeAll>
 801053e:	e009      	b.n	8010554 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8010540:	4620      	mov	r0, r4
 8010542:	f7ff fcd4 	bl	800feee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010546:	f000 fcfb 	bl	8010f40 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801054a:	4620      	mov	r0, r4
 801054c:	f7ff fc75 	bl	800fe3a <prvIsQueueEmpty>
 8010550:	2800      	cmp	r0, #0
 8010552:	d13f      	bne.n	80105d4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8010554:	f7ff fb06 	bl	800fb64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010558:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801055a:	2d00      	cmp	r5, #0
 801055c:	d1bb      	bne.n	80104d6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801055e:	9b01      	ldr	r3, [sp, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d0d6      	beq.n	8010512 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8010564:	2e00      	cmp	r6, #0
 8010566:	d0d8      	beq.n	801051a <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8010568:	f7ff fb1e 	bl	800fba8 <vPortExitCritical>
		vTaskSuspendAll();
 801056c:	f000 fc4e 	bl	8010e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010570:	f7ff faf8 	bl	800fb64 <vPortEnterCritical>
 8010574:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010578:	b25b      	sxtb	r3, r3
 801057a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801057e:	d0d1      	beq.n	8010524 <xQueueReceive+0xaa>
 8010580:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010584:	b25b      	sxtb	r3, r3
 8010586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801058a:	d0cf      	beq.n	801052c <xQueueReceive+0xb2>
 801058c:	f7ff fb0c 	bl	800fba8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010590:	a901      	add	r1, sp, #4
 8010592:	a802      	add	r0, sp, #8
 8010594:	f000 fe26 	bl	80111e4 <xTaskCheckForTimeOut>
 8010598:	2800      	cmp	r0, #0
 801059a:	d1d1      	bne.n	8010540 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801059c:	4620      	mov	r0, r4
 801059e:	f7ff fc4c 	bl	800fe3a <prvIsQueueEmpty>
 80105a2:	2800      	cmp	r0, #0
 80105a4:	d0c6      	beq.n	8010534 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80105a6:	9901      	ldr	r1, [sp, #4]
 80105a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80105ac:	f000 fd94 	bl	80110d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80105b0:	4620      	mov	r0, r4
 80105b2:	f7ff fc9c 	bl	800feee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80105b6:	f000 fcc3 	bl	8010f40 <xTaskResumeAll>
 80105ba:	2800      	cmp	r0, #0
 80105bc:	d1ca      	bne.n	8010554 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80105be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80105c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80105ca:	f3bf 8f4f 	dsb	sy
 80105ce:	f3bf 8f6f 	isb	sy
 80105d2:	e7bf      	b.n	8010554 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80105d4:	2000      	movs	r0, #0
 80105d6:	e789      	b.n	80104ec <xQueueReceive+0x72>

080105d8 <xQueueSemaphoreTake>:
{
 80105d8:	b570      	push	{r4, r5, r6, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80105de:	b158      	cbz	r0, 80105f8 <xQueueSemaphoreTake+0x20>
 80105e0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80105e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80105e4:	b18b      	cbz	r3, 801060a <xQueueSemaphoreTake+0x32>
 80105e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ea:	f383 8811 	msr	BASEPRI, r3
 80105ee:	f3bf 8f6f 	isb	sy
 80105f2:	f3bf 8f4f 	dsb	sy
 80105f6:	e7fe      	b.n	80105f6 <xQueueSemaphoreTake+0x1e>
 80105f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fc:	f383 8811 	msr	BASEPRI, r3
 8010600:	f3bf 8f6f 	isb	sy
 8010604:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8010608:	e7fe      	b.n	8010608 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801060a:	f000 fe33 	bl	8011274 <xTaskGetSchedulerState>
 801060e:	4605      	mov	r5, r0
 8010610:	b950      	cbnz	r0, 8010628 <xQueueSemaphoreTake+0x50>
 8010612:	9b01      	ldr	r3, [sp, #4]
 8010614:	b15b      	cbz	r3, 801062e <xQueueSemaphoreTake+0x56>
 8010616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061a:	f383 8811 	msr	BASEPRI, r3
 801061e:	f3bf 8f6f 	isb	sy
 8010622:	f3bf 8f4f 	dsb	sy
 8010626:	e7fe      	b.n	8010626 <xQueueSemaphoreTake+0x4e>
 8010628:	2600      	movs	r6, #0
 801062a:	4635      	mov	r5, r6
 801062c:	e055      	b.n	80106da <xQueueSemaphoreTake+0x102>
 801062e:	4606      	mov	r6, r0
 8010630:	e053      	b.n	80106da <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010632:	3b01      	subs	r3, #1
 8010634:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010636:	6823      	ldr	r3, [r4, #0]
 8010638:	b13b      	cbz	r3, 801064a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801063a:	6923      	ldr	r3, [r4, #16]
 801063c:	b94b      	cbnz	r3, 8010652 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 801063e:	f7ff fab3 	bl	800fba8 <vPortExitCritical>
				return pdPASS;
 8010642:	2601      	movs	r6, #1
}
 8010644:	4630      	mov	r0, r6
 8010646:	b004      	add	sp, #16
 8010648:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801064a:	f000 ff07 	bl	801145c <pvTaskIncrementMutexHeldCount>
 801064e:	60a0      	str	r0, [r4, #8]
 8010650:	e7f3      	b.n	801063a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010652:	f104 0010 	add.w	r0, r4, #16
 8010656:	f000 fd73 	bl	8011140 <xTaskRemoveFromEventList>
 801065a:	2800      	cmp	r0, #0
 801065c:	d0ef      	beq.n	801063e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 801065e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010666:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801066a:	f3bf 8f4f 	dsb	sy
 801066e:	f3bf 8f6f 	isb	sy
 8010672:	e7e4      	b.n	801063e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010674:	b146      	cbz	r6, 8010688 <xQueueSemaphoreTake+0xb0>
 8010676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067a:	f383 8811 	msr	BASEPRI, r3
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	f3bf 8f4f 	dsb	sy
 8010686:	e7fe      	b.n	8010686 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8010688:	f7ff fa8e 	bl	800fba8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801068c:	e7da      	b.n	8010644 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801068e:	a802      	add	r0, sp, #8
 8010690:	f000 fd9c 	bl	80111cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010694:	2501      	movs	r5, #1
 8010696:	e02a      	b.n	80106ee <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8010698:	2300      	movs	r3, #0
 801069a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801069e:	e032      	b.n	8010706 <xQueueSemaphoreTake+0x12e>
 80106a0:	2300      	movs	r3, #0
 80106a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80106a6:	e034      	b.n	8010712 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 80106a8:	f7ff fa5c 	bl	800fb64 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80106ac:	68a0      	ldr	r0, [r4, #8]
 80106ae:	f000 fdf1 	bl	8011294 <xTaskPriorityInherit>
 80106b2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80106b4:	f7ff fa78 	bl	800fba8 <vPortExitCritical>
 80106b8:	e03b      	b.n	8010732 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80106ba:	4620      	mov	r0, r4
 80106bc:	f7ff fc17 	bl	800feee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106c0:	f000 fc3e 	bl	8010f40 <xTaskResumeAll>
 80106c4:	e009      	b.n	80106da <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80106c6:	4620      	mov	r0, r4
 80106c8:	f7ff fc11 	bl	800feee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106cc:	f000 fc38 	bl	8010f40 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106d0:	4620      	mov	r0, r4
 80106d2:	f7ff fbb2 	bl	800fe3a <prvIsQueueEmpty>
 80106d6:	2800      	cmp	r0, #0
 80106d8:	d142      	bne.n	8010760 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80106da:	f7ff fa43 	bl	800fb64 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80106de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d1a6      	bne.n	8010632 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80106e4:	9b01      	ldr	r3, [sp, #4]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d0c4      	beq.n	8010674 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80106ea:	2d00      	cmp	r5, #0
 80106ec:	d0cf      	beq.n	801068e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80106ee:	f7ff fa5b 	bl	800fba8 <vPortExitCritical>
		vTaskSuspendAll();
 80106f2:	f000 fb8b 	bl	8010e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106f6:	f7ff fa35 	bl	800fb64 <vPortEnterCritical>
 80106fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80106fe:	b25b      	sxtb	r3, r3
 8010700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010704:	d0c8      	beq.n	8010698 <xQueueSemaphoreTake+0xc0>
 8010706:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801070a:	b25b      	sxtb	r3, r3
 801070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010710:	d0c6      	beq.n	80106a0 <xQueueSemaphoreTake+0xc8>
 8010712:	f7ff fa49 	bl	800fba8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010716:	a901      	add	r1, sp, #4
 8010718:	a802      	add	r0, sp, #8
 801071a:	f000 fd63 	bl	80111e4 <xTaskCheckForTimeOut>
 801071e:	2800      	cmp	r0, #0
 8010720:	d1d1      	bne.n	80106c6 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010722:	4620      	mov	r0, r4
 8010724:	f7ff fb89 	bl	800fe3a <prvIsQueueEmpty>
 8010728:	2800      	cmp	r0, #0
 801072a:	d0c6      	beq.n	80106ba <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801072c:	6823      	ldr	r3, [r4, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d0ba      	beq.n	80106a8 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010732:	9901      	ldr	r1, [sp, #4]
 8010734:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010738:	f000 fcce 	bl	80110d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801073c:	4620      	mov	r0, r4
 801073e:	f7ff fbd6 	bl	800feee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010742:	f000 fbfd 	bl	8010f40 <xTaskResumeAll>
 8010746:	2800      	cmp	r0, #0
 8010748:	d1c7      	bne.n	80106da <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 801074a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801074e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010752:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010756:	f3bf 8f4f 	dsb	sy
 801075a:	f3bf 8f6f 	isb	sy
 801075e:	e7bc      	b.n	80106da <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8010760:	b90e      	cbnz	r6, 8010766 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8010762:	2600      	movs	r6, #0
 8010764:	e76e      	b.n	8010644 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8010766:	f7ff f9fd 	bl	800fb64 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801076a:	4620      	mov	r0, r4
 801076c:	f7ff fb4e 	bl	800fe0c <prvGetDisinheritPriorityAfterTimeout>
 8010770:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010772:	68a0      	ldr	r0, [r4, #8]
 8010774:	f000 fe22 	bl	80113bc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8010778:	f7ff fa16 	bl	800fba8 <vPortExitCritical>
 801077c:	e7f1      	b.n	8010762 <xQueueSemaphoreTake+0x18a>

0801077e <xQueueReceiveFromISR>:
{
 801077e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8010782:	b1b0      	cbz	r0, 80107b2 <xQueueReceiveFromISR+0x34>
 8010784:	460d      	mov	r5, r1
 8010786:	4616      	mov	r6, r2
 8010788:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801078a:	b1d9      	cbz	r1, 80107c4 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801078c:	f7ff fb10 	bl	800fdb0 <vPortValidateInterruptPriority>
	__asm volatile
 8010790:	f3ef 8811 	mrs	r8, BASEPRI
 8010794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010798:	f383 8811 	msr	BASEPRI, r3
 801079c:	f3bf 8f6f 	isb	sy
 80107a0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107a4:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107a6:	b9cf      	cbnz	r7, 80107dc <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80107a8:	2000      	movs	r0, #0
	__asm volatile
 80107aa:	f388 8811 	msr	BASEPRI, r8
}
 80107ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80107b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b6:	f383 8811 	msr	BASEPRI, r3
 80107ba:	f3bf 8f6f 	isb	sy
 80107be:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80107c2:	e7fe      	b.n	80107c2 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d0e0      	beq.n	801078c <xQueueReceiveFromISR+0xe>
 80107ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ce:	f383 8811 	msr	BASEPRI, r3
 80107d2:	f3bf 8f6f 	isb	sy
 80107d6:	f3bf 8f4f 	dsb	sy
 80107da:	e7fe      	b.n	80107da <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80107dc:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 80107e0:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107e4:	4629      	mov	r1, r5
 80107e6:	4620      	mov	r0, r4
 80107e8:	f7ff fb6f 	bl	800feca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107ec:	3f01      	subs	r7, #1
 80107ee:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80107f0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80107f4:	d006      	beq.n	8010804 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80107f6:	f109 0301 	add.w	r3, r9, #1
 80107fa:	b25b      	sxtb	r3, r3
 80107fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8010800:	2001      	movs	r0, #1
 8010802:	e7d2      	b.n	80107aa <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010804:	6923      	ldr	r3, [r4, #16]
 8010806:	b90b      	cbnz	r3, 801080c <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8010808:	2001      	movs	r0, #1
 801080a:	e7ce      	b.n	80107aa <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801080c:	f104 0010 	add.w	r0, r4, #16
 8010810:	f000 fc96 	bl	8011140 <xTaskRemoveFromEventList>
 8010814:	b118      	cbz	r0, 801081e <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 8010816:	b126      	cbz	r6, 8010822 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010818:	2001      	movs	r0, #1
 801081a:	6030      	str	r0, [r6, #0]
 801081c:	e7c5      	b.n	80107aa <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 801081e:	2001      	movs	r0, #1
 8010820:	e7c3      	b.n	80107aa <xQueueReceiveFromISR+0x2c>
 8010822:	2001      	movs	r0, #1
 8010824:	e7c1      	b.n	80107aa <xQueueReceiveFromISR+0x2c>

08010826 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8010826:	b140      	cbz	r0, 801083a <uxQueueMessagesWaiting+0x14>
{
 8010828:	b510      	push	{r4, lr}
 801082a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801082c:	f7ff f99a 	bl	800fb64 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010830:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8010832:	f7ff f9b9 	bl	800fba8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010836:	4620      	mov	r0, r4
 8010838:	bd10      	pop	{r4, pc}
 801083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801083e:	f383 8811 	msr	BASEPRI, r3
 8010842:	f3bf 8f6f 	isb	sy
 8010846:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 801084a:	e7fe      	b.n	801084a <uxQueueMessagesWaiting+0x24>

0801084c <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 801084c:	b108      	cbz	r0, 8010852 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 801084e:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010850:	4770      	bx	lr
 8010852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010856:	f383 8811 	msr	BASEPRI, r3
 801085a:	f3bf 8f6f 	isb	sy
 801085e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010862:	e7fe      	b.n	8010862 <uxQueueMessagesWaitingFromISR+0x16>

08010864 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010864:	2300      	movs	r3, #0
 8010866:	2b07      	cmp	r3, #7
 8010868:	d80c      	bhi.n	8010884 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801086a:	4a07      	ldr	r2, [pc, #28]	; (8010888 <vQueueAddToRegistry+0x24>)
 801086c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010870:	b10a      	cbz	r2, 8010876 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010872:	3301      	adds	r3, #1
 8010874:	e7f7      	b.n	8010866 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010876:	4a04      	ldr	r2, [pc, #16]	; (8010888 <vQueueAddToRegistry+0x24>)
 8010878:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801087c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010880:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010882:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010884:	4770      	bx	lr
 8010886:	bf00      	nop
 8010888:	2400f7c8 	.word	0x2400f7c8

0801088c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801088c:	2300      	movs	r3, #0
 801088e:	2b07      	cmp	r3, #7
 8010890:	d80f      	bhi.n	80108b2 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010892:	4a08      	ldr	r2, [pc, #32]	; (80108b4 <vQueueUnregisterQueue+0x28>)
 8010894:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010898:	6852      	ldr	r2, [r2, #4]
 801089a:	4282      	cmp	r2, r0
 801089c:	d001      	beq.n	80108a2 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801089e:	3301      	adds	r3, #1
 80108a0:	e7f5      	b.n	801088e <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80108a2:	4a04      	ldr	r2, [pc, #16]	; (80108b4 <vQueueUnregisterQueue+0x28>)
 80108a4:	2100      	movs	r1, #0
 80108a6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80108aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80108ae:	6059      	str	r1, [r3, #4]
				break;
 80108b0:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80108b2:	4770      	bx	lr
 80108b4:	2400f7c8 	.word	0x2400f7c8

080108b8 <vQueueDelete>:
	configASSERT( pxQueue );
 80108b8:	b138      	cbz	r0, 80108ca <vQueueDelete+0x12>
{
 80108ba:	b510      	push	{r4, lr}
 80108bc:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 80108be:	f7ff ffe5 	bl	801088c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80108c2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80108c6:	b14b      	cbz	r3, 80108dc <vQueueDelete+0x24>
}
 80108c8:	bd10      	pop	{r4, pc}
 80108ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ce:	f383 8811 	msr	BASEPRI, r3
 80108d2:	f3bf 8f6f 	isb	sy
 80108d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80108da:	e7fe      	b.n	80108da <vQueueDelete+0x22>
			vPortFree( pxQueue );
 80108dc:	4620      	mov	r0, r4
 80108de:	f7ff f855 	bl	800f98c <vPortFree>
}
 80108e2:	e7f1      	b.n	80108c8 <vQueueDelete+0x10>

080108e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80108e4:	b570      	push	{r4, r5, r6, lr}
 80108e6:	4604      	mov	r4, r0
 80108e8:	460d      	mov	r5, r1
 80108ea:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80108ec:	f7ff f93a 	bl	800fb64 <vPortEnterCritical>
 80108f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80108f4:	b25b      	sxtb	r3, r3
 80108f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108fa:	d00d      	beq.n	8010918 <vQueueWaitForMessageRestricted+0x34>
 80108fc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010900:	b25b      	sxtb	r3, r3
 8010902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010906:	d00b      	beq.n	8010920 <vQueueWaitForMessageRestricted+0x3c>
 8010908:	f7ff f94e 	bl	800fba8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801090c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801090e:	b15b      	cbz	r3, 8010928 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010910:	4620      	mov	r0, r4
 8010912:	f7ff faec 	bl	800feee <prvUnlockQueue>
	}
 8010916:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8010918:	2300      	movs	r3, #0
 801091a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801091e:	e7ed      	b.n	80108fc <vQueueWaitForMessageRestricted+0x18>
 8010920:	2300      	movs	r3, #0
 8010922:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010926:	e7ef      	b.n	8010908 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010928:	4632      	mov	r2, r6
 801092a:	4629      	mov	r1, r5
 801092c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010930:	f000 fbea 	bl	8011108 <vTaskPlaceOnEventListRestricted>
 8010934:	e7ec      	b.n	8010910 <vQueueWaitForMessageRestricted+0x2c>
	...

08010938 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010938:	4b08      	ldr	r3, [pc, #32]	; (801095c <prvResetNextTaskUnblockTime+0x24>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	b923      	cbnz	r3, 801094a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010940:	4b07      	ldr	r3, [pc, #28]	; (8010960 <prvResetNextTaskUnblockTime+0x28>)
 8010942:	f04f 32ff 	mov.w	r2, #4294967295
 8010946:	601a      	str	r2, [r3, #0]
 8010948:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801094a:	4b04      	ldr	r3, [pc, #16]	; (801095c <prvResetNextTaskUnblockTime+0x24>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010952:	685a      	ldr	r2, [r3, #4]
 8010954:	4b02      	ldr	r3, [pc, #8]	; (8010960 <prvResetNextTaskUnblockTime+0x28>)
 8010956:	601a      	str	r2, [r3, #0]
	}
}
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop
 801095c:	2400f80c 	.word	0x2400f80c
 8010960:	2400fcb4 	.word	0x2400fcb4

08010964 <prvInitialiseNewTask>:
{
 8010964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010968:	4680      	mov	r8, r0
 801096a:	460d      	mov	r5, r1
 801096c:	4617      	mov	r7, r2
 801096e:	4699      	mov	r9, r3
 8010970:	9e08      	ldr	r6, [sp, #32]
 8010972:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010976:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010978:	0092      	lsls	r2, r2, #2
 801097a:	21a5      	movs	r1, #165	; 0xa5
 801097c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801097e:	f012 fe1f 	bl	80235c0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010982:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010984:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8010988:	443a      	add	r2, r7
 801098a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801098e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8010992:	2d00      	cmp	r5, #0
 8010994:	d043      	beq.n	8010a1e <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010996:	f04f 0c00 	mov.w	ip, #0
 801099a:	f1bc 0f0f 	cmp.w	ip, #15
 801099e:	d80b      	bhi.n	80109b8 <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109a0:	f815 200c 	ldrb.w	r2, [r5, ip]
 80109a4:	eb04 030c 	add.w	r3, r4, ip
 80109a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80109ac:	f815 300c 	ldrb.w	r3, [r5, ip]
 80109b0:	b113      	cbz	r3, 80109b8 <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80109b2:	f10c 0c01 	add.w	ip, ip, #1
 80109b6:	e7f0      	b.n	801099a <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80109b8:	2300      	movs	r3, #0
 80109ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80109be:	2e37      	cmp	r6, #55	; 0x37
 80109c0:	d900      	bls.n	80109c4 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80109c2:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80109c4:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80109c6:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80109c8:	2500      	movs	r5, #0
 80109ca:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80109cc:	1d20      	adds	r0, r4, #4
 80109ce:	f7ff f826 	bl	800fa1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80109d2:	f104 0018 	add.w	r0, r4, #24
 80109d6:	f7ff f822 	bl	800fa1e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80109da:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109dc:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 80109e0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80109e2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80109e4:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80109e8:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80109ec:	2260      	movs	r2, #96	; 0x60
 80109ee:	4629      	mov	r1, r5
 80109f0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80109f4:	f012 fde4 	bl	80235c0 <memset>
 80109f8:	4b0b      	ldr	r3, [pc, #44]	; (8010a28 <prvInitialiseNewTask+0xc4>)
 80109fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80109fc:	4b0b      	ldr	r3, [pc, #44]	; (8010a2c <prvInitialiseNewTask+0xc8>)
 80109fe:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010a00:	4b0b      	ldr	r3, [pc, #44]	; (8010a30 <prvInitialiseNewTask+0xcc>)
 8010a02:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010a04:	464a      	mov	r2, r9
 8010a06:	4641      	mov	r1, r8
 8010a08:	4638      	mov	r0, r7
 8010a0a:	f7ff f881 	bl	800fb10 <pxPortInitialiseStack>
 8010a0e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8010a10:	f1ba 0f00 	cmp.w	sl, #0
 8010a14:	d001      	beq.n	8010a1a <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010a16:	f8ca 4000 	str.w	r4, [sl]
}
 8010a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8010a24:	e7cb      	b.n	80109be <prvInitialiseNewTask+0x5a>
 8010a26:	bf00      	nop
 8010a28:	08027328 	.word	0x08027328
 8010a2c:	08027348 	.word	0x08027348
 8010a30:	08027308 	.word	0x08027308

08010a34 <prvInitialiseTaskLists>:
{
 8010a34:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a36:	2400      	movs	r4, #0
 8010a38:	e007      	b.n	8010a4a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010a3a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8010a3e:	0093      	lsls	r3, r2, #2
 8010a40:	480e      	ldr	r0, [pc, #56]	; (8010a7c <prvInitialiseTaskLists+0x48>)
 8010a42:	4418      	add	r0, r3
 8010a44:	f7fe ffe0 	bl	800fa08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a48:	3401      	adds	r4, #1
 8010a4a:	2c37      	cmp	r4, #55	; 0x37
 8010a4c:	d9f5      	bls.n	8010a3a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8010a4e:	4d0c      	ldr	r5, [pc, #48]	; (8010a80 <prvInitialiseTaskLists+0x4c>)
 8010a50:	4628      	mov	r0, r5
 8010a52:	f7fe ffd9 	bl	800fa08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010a56:	4c0b      	ldr	r4, [pc, #44]	; (8010a84 <prvInitialiseTaskLists+0x50>)
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f7fe ffd5 	bl	800fa08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010a5e:	480a      	ldr	r0, [pc, #40]	; (8010a88 <prvInitialiseTaskLists+0x54>)
 8010a60:	f7fe ffd2 	bl	800fa08 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8010a64:	4809      	ldr	r0, [pc, #36]	; (8010a8c <prvInitialiseTaskLists+0x58>)
 8010a66:	f7fe ffcf 	bl	800fa08 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8010a6a:	4809      	ldr	r0, [pc, #36]	; (8010a90 <prvInitialiseTaskLists+0x5c>)
 8010a6c:	f7fe ffcc 	bl	800fa08 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8010a70:	4b08      	ldr	r3, [pc, #32]	; (8010a94 <prvInitialiseTaskLists+0x60>)
 8010a72:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010a74:	4b08      	ldr	r3, [pc, #32]	; (8010a98 <prvInitialiseTaskLists+0x64>)
 8010a76:	601c      	str	r4, [r3, #0]
}
 8010a78:	bd38      	pop	{r3, r4, r5, pc}
 8010a7a:	bf00      	nop
 8010a7c:	2400f814 	.word	0x2400f814
 8010a80:	2400fc88 	.word	0x2400fc88
 8010a84:	2400fc9c 	.word	0x2400fc9c
 8010a88:	2400fcc0 	.word	0x2400fcc0
 8010a8c:	2400fcec 	.word	0x2400fcec
 8010a90:	2400fcd8 	.word	0x2400fcd8
 8010a94:	2400f80c 	.word	0x2400f80c
 8010a98:	2400f810 	.word	0x2400f810

08010a9c <prvAddNewTaskToReadyList>:
{
 8010a9c:	b510      	push	{r4, lr}
 8010a9e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010aa0:	f7ff f860 	bl	800fb64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8010aa4:	4a22      	ldr	r2, [pc, #136]	; (8010b30 <prvAddNewTaskToReadyList+0x94>)
 8010aa6:	6813      	ldr	r3, [r2, #0]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010aac:	4b21      	ldr	r3, [pc, #132]	; (8010b34 <prvAddNewTaskToReadyList+0x98>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	b15b      	cbz	r3, 8010aca <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8010ab2:	4b21      	ldr	r3, [pc, #132]	; (8010b38 <prvAddNewTaskToReadyList+0x9c>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	b96b      	cbnz	r3, 8010ad4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010ab8:	4b1e      	ldr	r3, [pc, #120]	; (8010b34 <prvAddNewTaskToReadyList+0x98>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010abe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d807      	bhi.n	8010ad4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8010ac4:	4b1b      	ldr	r3, [pc, #108]	; (8010b34 <prvAddNewTaskToReadyList+0x98>)
 8010ac6:	601c      	str	r4, [r3, #0]
 8010ac8:	e004      	b.n	8010ad4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8010aca:	4b1a      	ldr	r3, [pc, #104]	; (8010b34 <prvAddNewTaskToReadyList+0x98>)
 8010acc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ace:	6813      	ldr	r3, [r2, #0]
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	d029      	beq.n	8010b28 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8010ad4:	4a19      	ldr	r2, [pc, #100]	; (8010b3c <prvAddNewTaskToReadyList+0xa0>)
 8010ad6:	6813      	ldr	r3, [r2, #0]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010adc:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8010ade:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010ae0:	4b17      	ldr	r3, [pc, #92]	; (8010b40 <prvAddNewTaskToReadyList+0xa4>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	4298      	cmp	r0, r3
 8010ae6:	d901      	bls.n	8010aec <prvAddNewTaskToReadyList+0x50>
 8010ae8:	4b15      	ldr	r3, [pc, #84]	; (8010b40 <prvAddNewTaskToReadyList+0xa4>)
 8010aea:	6018      	str	r0, [r3, #0]
 8010aec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010af0:	1d21      	adds	r1, r4, #4
 8010af2:	4b14      	ldr	r3, [pc, #80]	; (8010b44 <prvAddNewTaskToReadyList+0xa8>)
 8010af4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010af8:	f7fe ff94 	bl	800fa24 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8010afc:	f7ff f854 	bl	800fba8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8010b00:	4b0d      	ldr	r3, [pc, #52]	; (8010b38 <prvAddNewTaskToReadyList+0x9c>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	b17b      	cbz	r3, 8010b26 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010b06:	4b0b      	ldr	r3, [pc, #44]	; (8010b34 <prvAddNewTaskToReadyList+0x98>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d209      	bcs.n	8010b26 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8010b12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010b1e:	f3bf 8f4f 	dsb	sy
 8010b22:	f3bf 8f6f 	isb	sy
}
 8010b26:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8010b28:	f7ff ff84 	bl	8010a34 <prvInitialiseTaskLists>
 8010b2c:	e7d2      	b.n	8010ad4 <prvAddNewTaskToReadyList+0x38>
 8010b2e:	bf00      	nop
 8010b30:	2400fc74 	.word	0x2400fc74
 8010b34:	2400f808 	.word	0x2400f808
 8010b38:	2400fcd4 	.word	0x2400fcd4
 8010b3c:	2400fc80 	.word	0x2400fc80
 8010b40:	2400fc84 	.word	0x2400fc84
 8010b44:	2400f814 	.word	0x2400f814

08010b48 <prvDeleteTCB>:
	{
 8010b48:	b510      	push	{r4, lr}
 8010b4a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010b4c:	3054      	adds	r0, #84	; 0x54
 8010b4e:	f013 f91b 	bl	8023d88 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010b52:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8010b56:	b163      	cbz	r3, 8010b72 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d011      	beq.n	8010b80 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010b5c:	2b02      	cmp	r3, #2
 8010b5e:	d00e      	beq.n	8010b7e <prvDeleteTCB+0x36>
 8010b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b64:	f383 8811 	msr	BASEPRI, r3
 8010b68:	f3bf 8f6f 	isb	sy
 8010b6c:	f3bf 8f4f 	dsb	sy
 8010b70:	e7fe      	b.n	8010b70 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8010b72:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010b74:	f7fe ff0a 	bl	800f98c <vPortFree>
				vPortFree( pxTCB );
 8010b78:	4620      	mov	r0, r4
 8010b7a:	f7fe ff07 	bl	800f98c <vPortFree>
	}
 8010b7e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8010b80:	4620      	mov	r0, r4
 8010b82:	f7fe ff03 	bl	800f98c <vPortFree>
 8010b86:	e7fa      	b.n	8010b7e <prvDeleteTCB+0x36>

08010b88 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010b88:	4b0f      	ldr	r3, [pc, #60]	; (8010bc8 <prvCheckTasksWaitingTermination+0x40>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	b1d3      	cbz	r3, 8010bc4 <prvCheckTasksWaitingTermination+0x3c>
{
 8010b8e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8010b90:	f7fe ffe8 	bl	800fb64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b94:	4b0d      	ldr	r3, [pc, #52]	; (8010bcc <prvCheckTasksWaitingTermination+0x44>)
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b9a:	1d20      	adds	r0, r4, #4
 8010b9c:	f7fe ff66 	bl	800fa6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010ba0:	4a0b      	ldr	r2, [pc, #44]	; (8010bd0 <prvCheckTasksWaitingTermination+0x48>)
 8010ba2:	6813      	ldr	r3, [r2, #0]
 8010ba4:	3b01      	subs	r3, #1
 8010ba6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010ba8:	4a07      	ldr	r2, [pc, #28]	; (8010bc8 <prvCheckTasksWaitingTermination+0x40>)
 8010baa:	6813      	ldr	r3, [r2, #0]
 8010bac:	3b01      	subs	r3, #1
 8010bae:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8010bb0:	f7fe fffa 	bl	800fba8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f7ff ffc7 	bl	8010b48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010bba:	4b03      	ldr	r3, [pc, #12]	; (8010bc8 <prvCheckTasksWaitingTermination+0x40>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1e6      	bne.n	8010b90 <prvCheckTasksWaitingTermination+0x8>
}
 8010bc2:	bd10      	pop	{r4, pc}
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	2400fc78 	.word	0x2400fc78
 8010bcc:	2400fcec 	.word	0x2400fcec
 8010bd0:	2400fc74 	.word	0x2400fc74

08010bd4 <prvIdleTask>:
{
 8010bd4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8010bd6:	f7ff ffd7 	bl	8010b88 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010bda:	4b07      	ldr	r3, [pc, #28]	; (8010bf8 <prvIdleTask+0x24>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d9f9      	bls.n	8010bd6 <prvIdleTask+0x2>
				taskYIELD();
 8010be2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010bee:	f3bf 8f4f 	dsb	sy
 8010bf2:	f3bf 8f6f 	isb	sy
 8010bf6:	e7ee      	b.n	8010bd6 <prvIdleTask+0x2>
 8010bf8:	2400f814 	.word	0x2400f814

08010bfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010bfc:	b570      	push	{r4, r5, r6, lr}
 8010bfe:	4604      	mov	r4, r0
 8010c00:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010c02:	4b19      	ldr	r3, [pc, #100]	; (8010c68 <prvAddCurrentTaskToDelayedList+0x6c>)
 8010c04:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c06:	4b19      	ldr	r3, [pc, #100]	; (8010c6c <prvAddCurrentTaskToDelayedList+0x70>)
 8010c08:	6818      	ldr	r0, [r3, #0]
 8010c0a:	3004      	adds	r0, #4
 8010c0c:	f7fe ff2e 	bl	800fa6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010c10:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010c14:	bf14      	ite	ne
 8010c16:	2300      	movne	r3, #0
 8010c18:	2301      	moveq	r3, #1
 8010c1a:	2d00      	cmp	r5, #0
 8010c1c:	bf08      	it	eq
 8010c1e:	2300      	moveq	r3, #0
 8010c20:	b96b      	cbnz	r3, 8010c3e <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010c22:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010c24:	4b11      	ldr	r3, [pc, #68]	; (8010c6c <prvAddCurrentTaskToDelayedList+0x70>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8010c2a:	42a6      	cmp	r6, r4
 8010c2c:	d90e      	bls.n	8010c4c <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c2e:	4b10      	ldr	r3, [pc, #64]	; (8010c70 <prvAddCurrentTaskToDelayedList+0x74>)
 8010c30:	6818      	ldr	r0, [r3, #0]
 8010c32:	4b0e      	ldr	r3, [pc, #56]	; (8010c6c <prvAddCurrentTaskToDelayedList+0x70>)
 8010c34:	6819      	ldr	r1, [r3, #0]
 8010c36:	3104      	adds	r1, #4
 8010c38:	f7fe feff 	bl	800fa3a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010c3c:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c3e:	4b0b      	ldr	r3, [pc, #44]	; (8010c6c <prvAddCurrentTaskToDelayedList+0x70>)
 8010c40:	6819      	ldr	r1, [r3, #0]
 8010c42:	3104      	adds	r1, #4
 8010c44:	480b      	ldr	r0, [pc, #44]	; (8010c74 <prvAddCurrentTaskToDelayedList+0x78>)
 8010c46:	f7fe feed 	bl	800fa24 <vListInsertEnd>
 8010c4a:	e7f7      	b.n	8010c3c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010c4c:	4b0a      	ldr	r3, [pc, #40]	; (8010c78 <prvAddCurrentTaskToDelayedList+0x7c>)
 8010c4e:	6818      	ldr	r0, [r3, #0]
 8010c50:	4b06      	ldr	r3, [pc, #24]	; (8010c6c <prvAddCurrentTaskToDelayedList+0x70>)
 8010c52:	6819      	ldr	r1, [r3, #0]
 8010c54:	3104      	adds	r1, #4
 8010c56:	f7fe fef0 	bl	800fa3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010c5a:	4b08      	ldr	r3, [pc, #32]	; (8010c7c <prvAddCurrentTaskToDelayedList+0x80>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	42a3      	cmp	r3, r4
 8010c60:	d9ec      	bls.n	8010c3c <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 8010c62:	4b06      	ldr	r3, [pc, #24]	; (8010c7c <prvAddCurrentTaskToDelayedList+0x80>)
 8010c64:	601c      	str	r4, [r3, #0]
}
 8010c66:	e7e9      	b.n	8010c3c <prvAddCurrentTaskToDelayedList+0x40>
 8010c68:	2400fd00 	.word	0x2400fd00
 8010c6c:	2400f808 	.word	0x2400f808
 8010c70:	2400f810 	.word	0x2400f810
 8010c74:	2400fcd8 	.word	0x2400fcd8
 8010c78:	2400f80c 	.word	0x2400f80c
 8010c7c:	2400fcb4 	.word	0x2400fcb4

08010c80 <xTaskCreateStatic>:
	{
 8010c80:	b530      	push	{r4, r5, lr}
 8010c82:	b087      	sub	sp, #28
 8010c84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010c86:	b17c      	cbz	r4, 8010ca8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010c88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010c8a:	b1b5      	cbz	r5, 8010cba <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c8c:	25bc      	movs	r5, #188	; 0xbc
 8010c8e:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c90:	9d04      	ldr	r5, [sp, #16]
 8010c92:	2dbc      	cmp	r5, #188	; 0xbc
 8010c94:	d01a      	beq.n	8010ccc <xTaskCreateStatic+0x4c>
 8010c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c9a:	f383 8811 	msr	BASEPRI, r3
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	f3bf 8f4f 	dsb	sy
 8010ca6:	e7fe      	b.n	8010ca6 <xTaskCreateStatic+0x26>
 8010ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cac:	f383 8811 	msr	BASEPRI, r3
 8010cb0:	f3bf 8f6f 	isb	sy
 8010cb4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8010cb8:	e7fe      	b.n	8010cb8 <xTaskCreateStatic+0x38>
 8010cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbe:	f383 8811 	msr	BASEPRI, r3
 8010cc2:	f3bf 8f6f 	isb	sy
 8010cc6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8010cca:	e7fe      	b.n	8010cca <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010ccc:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010cce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010cd0:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010cd2:	2402      	movs	r4, #2
 8010cd4:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010cd8:	2400      	movs	r4, #0
 8010cda:	9403      	str	r4, [sp, #12]
 8010cdc:	9502      	str	r5, [sp, #8]
 8010cde:	ac05      	add	r4, sp, #20
 8010ce0:	9401      	str	r4, [sp, #4]
 8010ce2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010ce4:	9400      	str	r4, [sp, #0]
 8010ce6:	f7ff fe3d 	bl	8010964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010cea:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010cec:	f7ff fed6 	bl	8010a9c <prvAddNewTaskToReadyList>
	}
 8010cf0:	9805      	ldr	r0, [sp, #20]
 8010cf2:	b007      	add	sp, #28
 8010cf4:	bd30      	pop	{r4, r5, pc}

08010cf6 <xTaskCreate>:
	{
 8010cf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cfa:	b085      	sub	sp, #20
 8010cfc:	4607      	mov	r7, r0
 8010cfe:	4688      	mov	r8, r1
 8010d00:	4614      	mov	r4, r2
 8010d02:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d04:	0090      	lsls	r0, r2, #2
 8010d06:	f7fe fdc3 	bl	800f890 <pvPortMalloc>
			if( pxStack != NULL )
 8010d0a:	b300      	cbz	r0, 8010d4e <xTaskCreate+0x58>
 8010d0c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d0e:	20bc      	movs	r0, #188	; 0xbc
 8010d10:	f7fe fdbe 	bl	800f890 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8010d14:	4605      	mov	r5, r0
 8010d16:	b1b0      	cbz	r0, 8010d46 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8010d18:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8010d1c:	b1e5      	cbz	r5, 8010d58 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010d24:	9303      	str	r3, [sp, #12]
 8010d26:	9502      	str	r5, [sp, #8]
 8010d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d2a:	9301      	str	r3, [sp, #4]
 8010d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	4633      	mov	r3, r6
 8010d32:	4622      	mov	r2, r4
 8010d34:	4641      	mov	r1, r8
 8010d36:	4638      	mov	r0, r7
 8010d38:	f7ff fe14 	bl	8010964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	f7ff fead 	bl	8010a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d42:	2001      	movs	r0, #1
 8010d44:	e005      	b.n	8010d52 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8010d46:	4648      	mov	r0, r9
 8010d48:	f7fe fe20 	bl	800f98c <vPortFree>
 8010d4c:	e7e6      	b.n	8010d1c <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d4e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8010d52:	b005      	add	sp, #20
 8010d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d58:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8010d5c:	e7f9      	b.n	8010d52 <xTaskCreate+0x5c>
	...

08010d60 <vTaskStartScheduler>:
{
 8010d60:	b510      	push	{r4, lr}
 8010d62:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010d64:	2400      	movs	r4, #0
 8010d66:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010d68:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010d6a:	aa07      	add	r2, sp, #28
 8010d6c:	a906      	add	r1, sp, #24
 8010d6e:	a805      	add	r0, sp, #20
 8010d70:	f7fe fd12 	bl	800f798 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010d74:	9b05      	ldr	r3, [sp, #20]
 8010d76:	9302      	str	r3, [sp, #8]
 8010d78:	9b06      	ldr	r3, [sp, #24]
 8010d7a:	9301      	str	r3, [sp, #4]
 8010d7c:	9400      	str	r4, [sp, #0]
 8010d7e:	4623      	mov	r3, r4
 8010d80:	9a07      	ldr	r2, [sp, #28]
 8010d82:	491a      	ldr	r1, [pc, #104]	; (8010dec <vTaskStartScheduler+0x8c>)
 8010d84:	481a      	ldr	r0, [pc, #104]	; (8010df0 <vTaskStartScheduler+0x90>)
 8010d86:	f7ff ff7b 	bl	8010c80 <xTaskCreateStatic>
 8010d8a:	4b1a      	ldr	r3, [pc, #104]	; (8010df4 <vTaskStartScheduler+0x94>)
 8010d8c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8010d8e:	b140      	cbz	r0, 8010da2 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8010d90:	f000 fbe2 	bl	8011558 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8010d94:	2801      	cmp	r0, #1
 8010d96:	d006      	beq.n	8010da6 <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010d98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010d9c:	d01d      	beq.n	8010dda <vTaskStartScheduler+0x7a>
}
 8010d9e:	b008      	add	sp, #32
 8010da0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8010da2:	2000      	movs	r0, #0
 8010da4:	e7f6      	b.n	8010d94 <vTaskStartScheduler+0x34>
 8010da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010daa:	f383 8811 	msr	BASEPRI, r3
 8010dae:	f3bf 8f6f 	isb	sy
 8010db2:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010db6:	4b10      	ldr	r3, [pc, #64]	; (8010df8 <vTaskStartScheduler+0x98>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	3354      	adds	r3, #84	; 0x54
 8010dbc:	4a0f      	ldr	r2, [pc, #60]	; (8010dfc <vTaskStartScheduler+0x9c>)
 8010dbe:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8010dc0:	4b0f      	ldr	r3, [pc, #60]	; (8010e00 <vTaskStartScheduler+0xa0>)
 8010dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010dc8:	4b0e      	ldr	r3, [pc, #56]	; (8010e04 <vTaskStartScheduler+0xa4>)
 8010dca:	2201      	movs	r2, #1
 8010dcc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010dce:	4b0e      	ldr	r3, [pc, #56]	; (8010e08 <vTaskStartScheduler+0xa8>)
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8010dd4:	f7fe ff60 	bl	800fc98 <xPortStartScheduler>
 8010dd8:	e7e1      	b.n	8010d9e <vTaskStartScheduler+0x3e>
 8010dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dde:	f383 8811 	msr	BASEPRI, r3
 8010de2:	f3bf 8f6f 	isb	sy
 8010de6:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010dea:	e7fe      	b.n	8010dea <vTaskStartScheduler+0x8a>
 8010dec:	0802677c 	.word	0x0802677c
 8010df0:	08010bd5 	.word	0x08010bd5
 8010df4:	2400fcb0 	.word	0x2400fcb0
 8010df8:	2400f808 	.word	0x2400f808
 8010dfc:	240000dc 	.word	0x240000dc
 8010e00:	2400fcb4 	.word	0x2400fcb4
 8010e04:	2400fcd4 	.word	0x2400fcd4
 8010e08:	2400fd00 	.word	0x2400fd00

08010e0c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010e0c:	4a02      	ldr	r2, [pc, #8]	; (8010e18 <vTaskSuspendAll+0xc>)
 8010e0e:	6813      	ldr	r3, [r2, #0]
 8010e10:	3301      	adds	r3, #1
 8010e12:	6013      	str	r3, [r2, #0]
}
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	2400fc7c 	.word	0x2400fc7c

08010e1c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010e1c:	4b01      	ldr	r3, [pc, #4]	; (8010e24 <xTaskGetTickCount+0x8>)
 8010e1e:	6818      	ldr	r0, [r3, #0]
}
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop
 8010e24:	2400fd00 	.word	0x2400fd00

08010e28 <xTaskIncrementTick>:
{
 8010e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e2a:	4b3a      	ldr	r3, [pc, #232]	; (8010f14 <xTaskIncrementTick+0xec>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d169      	bne.n	8010f06 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010e32:	4b39      	ldr	r3, [pc, #228]	; (8010f18 <xTaskIncrementTick+0xf0>)
 8010e34:	681d      	ldr	r5, [r3, #0]
 8010e36:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8010e38:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010e3a:	b9c5      	cbnz	r5, 8010e6e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8010e3c:	4b37      	ldr	r3, [pc, #220]	; (8010f1c <xTaskIncrementTick+0xf4>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	b143      	cbz	r3, 8010e56 <xTaskIncrementTick+0x2e>
 8010e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e48:	f383 8811 	msr	BASEPRI, r3
 8010e4c:	f3bf 8f6f 	isb	sy
 8010e50:	f3bf 8f4f 	dsb	sy
 8010e54:	e7fe      	b.n	8010e54 <xTaskIncrementTick+0x2c>
 8010e56:	4a31      	ldr	r2, [pc, #196]	; (8010f1c <xTaskIncrementTick+0xf4>)
 8010e58:	6811      	ldr	r1, [r2, #0]
 8010e5a:	4b31      	ldr	r3, [pc, #196]	; (8010f20 <xTaskIncrementTick+0xf8>)
 8010e5c:	6818      	ldr	r0, [r3, #0]
 8010e5e:	6010      	str	r0, [r2, #0]
 8010e60:	6019      	str	r1, [r3, #0]
 8010e62:	4a30      	ldr	r2, [pc, #192]	; (8010f24 <xTaskIncrementTick+0xfc>)
 8010e64:	6813      	ldr	r3, [r2, #0]
 8010e66:	3301      	adds	r3, #1
 8010e68:	6013      	str	r3, [r2, #0]
 8010e6a:	f7ff fd65 	bl	8010938 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e6e:	4b2e      	ldr	r3, [pc, #184]	; (8010f28 <xTaskIncrementTick+0x100>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	42ab      	cmp	r3, r5
 8010e74:	d93d      	bls.n	8010ef2 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8010e76:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010e78:	4b2c      	ldr	r3, [pc, #176]	; (8010f2c <xTaskIncrementTick+0x104>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010e82:	009a      	lsls	r2, r3, #2
 8010e84:	4b2a      	ldr	r3, [pc, #168]	; (8010f30 <xTaskIncrementTick+0x108>)
 8010e86:	589b      	ldr	r3, [r3, r2]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d900      	bls.n	8010e8e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8010e8c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8010e8e:	4b29      	ldr	r3, [pc, #164]	; (8010f34 <xTaskIncrementTick+0x10c>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d03c      	beq.n	8010f10 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8010e96:	2701      	movs	r7, #1
	return xSwitchRequired;
 8010e98:	e03a      	b.n	8010f10 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8010e9a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e9c:	4b1f      	ldr	r3, [pc, #124]	; (8010f1c <xTaskIncrementTick+0xf4>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	b343      	cbz	r3, 8010ef6 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ea4:	4b1d      	ldr	r3, [pc, #116]	; (8010f1c <xTaskIncrementTick+0xf4>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010eac:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8010eae:	429d      	cmp	r5, r3
 8010eb0:	d326      	bcc.n	8010f00 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010eb2:	1d26      	adds	r6, r4, #4
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	f7fe fdd9 	bl	800fa6c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010ebc:	b11b      	cbz	r3, 8010ec6 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ebe:	f104 0018 	add.w	r0, r4, #24
 8010ec2:	f7fe fdd3 	bl	800fa6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ec6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010ec8:	4a1b      	ldr	r2, [pc, #108]	; (8010f38 <xTaskIncrementTick+0x110>)
 8010eca:	6812      	ldr	r2, [r2, #0]
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d901      	bls.n	8010ed4 <xTaskIncrementTick+0xac>
 8010ed0:	4a19      	ldr	r2, [pc, #100]	; (8010f38 <xTaskIncrementTick+0x110>)
 8010ed2:	6013      	str	r3, [r2, #0]
 8010ed4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010ed8:	009a      	lsls	r2, r3, #2
 8010eda:	4631      	mov	r1, r6
 8010edc:	4814      	ldr	r0, [pc, #80]	; (8010f30 <xTaskIncrementTick+0x108>)
 8010ede:	4410      	add	r0, r2
 8010ee0:	f7fe fda0 	bl	800fa24 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ee4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010ee6:	4b11      	ldr	r3, [pc, #68]	; (8010f2c <xTaskIncrementTick+0x104>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d2d4      	bcs.n	8010e9a <xTaskIncrementTick+0x72>
 8010ef0:	e7d4      	b.n	8010e9c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8010ef2:	2700      	movs	r7, #0
 8010ef4:	e7d2      	b.n	8010e9c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ef6:	4b0c      	ldr	r3, [pc, #48]	; (8010f28 <xTaskIncrementTick+0x100>)
 8010ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8010efc:	601a      	str	r2, [r3, #0]
					break;
 8010efe:	e7bb      	b.n	8010e78 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8010f00:	4a09      	ldr	r2, [pc, #36]	; (8010f28 <xTaskIncrementTick+0x100>)
 8010f02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010f04:	e7b8      	b.n	8010e78 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8010f06:	4a0d      	ldr	r2, [pc, #52]	; (8010f3c <xTaskIncrementTick+0x114>)
 8010f08:	6813      	ldr	r3, [r2, #0]
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8010f0e:	2700      	movs	r7, #0
}
 8010f10:	4638      	mov	r0, r7
 8010f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f14:	2400fc7c 	.word	0x2400fc7c
 8010f18:	2400fd00 	.word	0x2400fd00
 8010f1c:	2400f80c 	.word	0x2400f80c
 8010f20:	2400f810 	.word	0x2400f810
 8010f24:	2400fcb8 	.word	0x2400fcb8
 8010f28:	2400fcb4 	.word	0x2400fcb4
 8010f2c:	2400f808 	.word	0x2400f808
 8010f30:	2400f814 	.word	0x2400f814
 8010f34:	2400fd04 	.word	0x2400fd04
 8010f38:	2400fc84 	.word	0x2400fc84
 8010f3c:	2400fcbc 	.word	0x2400fcbc

08010f40 <xTaskResumeAll>:
{
 8010f40:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8010f42:	4b35      	ldr	r3, [pc, #212]	; (8011018 <xTaskResumeAll+0xd8>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	b943      	cbnz	r3, 8010f5a <xTaskResumeAll+0x1a>
 8010f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f4c:	f383 8811 	msr	BASEPRI, r3
 8010f50:	f3bf 8f6f 	isb	sy
 8010f54:	f3bf 8f4f 	dsb	sy
 8010f58:	e7fe      	b.n	8010f58 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8010f5a:	f7fe fe03 	bl	800fb64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010f5e:	4b2e      	ldr	r3, [pc, #184]	; (8011018 <xTaskResumeAll+0xd8>)
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	3a01      	subs	r2, #1
 8010f64:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d14f      	bne.n	801100c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010f6c:	4b2b      	ldr	r3, [pc, #172]	; (801101c <xTaskResumeAll+0xdc>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	b90b      	cbnz	r3, 8010f76 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8010f72:	2400      	movs	r4, #0
 8010f74:	e04b      	b.n	801100e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8010f76:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f78:	4b29      	ldr	r3, [pc, #164]	; (8011020 <xTaskResumeAll+0xe0>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	b31b      	cbz	r3, 8010fc6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f7e:	4b28      	ldr	r3, [pc, #160]	; (8011020 <xTaskResumeAll+0xe0>)
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f84:	f104 0018 	add.w	r0, r4, #24
 8010f88:	f7fe fd70 	bl	800fa6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f8c:	1d25      	adds	r5, r4, #4
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f7fe fd6c 	bl	800fa6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010f96:	4b23      	ldr	r3, [pc, #140]	; (8011024 <xTaskResumeAll+0xe4>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4298      	cmp	r0, r3
 8010f9c:	d901      	bls.n	8010fa2 <xTaskResumeAll+0x62>
 8010f9e:	4b21      	ldr	r3, [pc, #132]	; (8011024 <xTaskResumeAll+0xe4>)
 8010fa0:	6018      	str	r0, [r3, #0]
 8010fa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010fa6:	4629      	mov	r1, r5
 8010fa8:	4b1f      	ldr	r3, [pc, #124]	; (8011028 <xTaskResumeAll+0xe8>)
 8010faa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010fae:	f7fe fd39 	bl	800fa24 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010fb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010fb4:	4b1d      	ldr	r3, [pc, #116]	; (801102c <xTaskResumeAll+0xec>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d3dc      	bcc.n	8010f78 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8010fbe:	4b1c      	ldr	r3, [pc, #112]	; (8011030 <xTaskResumeAll+0xf0>)
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	e7d8      	b.n	8010f78 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8010fc6:	b10c      	cbz	r4, 8010fcc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8010fc8:	f7ff fcb6 	bl	8010938 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010fcc:	4b19      	ldr	r3, [pc, #100]	; (8011034 <xTaskResumeAll+0xf4>)
 8010fce:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8010fd0:	b984      	cbnz	r4, 8010ff4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8010fd2:	4b17      	ldr	r3, [pc, #92]	; (8011030 <xTaskResumeAll+0xf0>)
 8010fd4:	681c      	ldr	r4, [r3, #0]
 8010fd6:	b1d4      	cbz	r4, 801100e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8010fd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fe0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010fe4:	f3bf 8f4f 	dsb	sy
 8010fe8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8010fec:	2401      	movs	r4, #1
 8010fee:	e00e      	b.n	801100e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010ff0:	3c01      	subs	r4, #1
 8010ff2:	d007      	beq.n	8011004 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8010ff4:	f7ff ff18 	bl	8010e28 <xTaskIncrementTick>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	d0f9      	beq.n	8010ff0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8010ffc:	4b0c      	ldr	r3, [pc, #48]	; (8011030 <xTaskResumeAll+0xf0>)
 8010ffe:	2201      	movs	r2, #1
 8011000:	601a      	str	r2, [r3, #0]
 8011002:	e7f5      	b.n	8010ff0 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8011004:	4b0b      	ldr	r3, [pc, #44]	; (8011034 <xTaskResumeAll+0xf4>)
 8011006:	2200      	movs	r2, #0
 8011008:	601a      	str	r2, [r3, #0]
 801100a:	e7e2      	b.n	8010fd2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 801100c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801100e:	f7fe fdcb 	bl	800fba8 <vPortExitCritical>
}
 8011012:	4620      	mov	r0, r4
 8011014:	bd38      	pop	{r3, r4, r5, pc}
 8011016:	bf00      	nop
 8011018:	2400fc7c 	.word	0x2400fc7c
 801101c:	2400fc74 	.word	0x2400fc74
 8011020:	2400fcc0 	.word	0x2400fcc0
 8011024:	2400fc84 	.word	0x2400fc84
 8011028:	2400f814 	.word	0x2400f814
 801102c:	2400f808 	.word	0x2400f808
 8011030:	2400fd04 	.word	0x2400fd04
 8011034:	2400fcbc 	.word	0x2400fcbc

08011038 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011038:	4b21      	ldr	r3, [pc, #132]	; (80110c0 <vTaskSwitchContext+0x88>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	b11b      	cbz	r3, 8011046 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 801103e:	4b21      	ldr	r3, [pc, #132]	; (80110c4 <vTaskSwitchContext+0x8c>)
 8011040:	2201      	movs	r2, #1
 8011042:	601a      	str	r2, [r3, #0]
 8011044:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8011046:	4b1f      	ldr	r3, [pc, #124]	; (80110c4 <vTaskSwitchContext+0x8c>)
 8011048:	2200      	movs	r2, #0
 801104a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801104c:	4b1e      	ldr	r3, [pc, #120]	; (80110c8 <vTaskSwitchContext+0x90>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8011054:	008a      	lsls	r2, r1, #2
 8011056:	491d      	ldr	r1, [pc, #116]	; (80110cc <vTaskSwitchContext+0x94>)
 8011058:	588a      	ldr	r2, [r1, r2]
 801105a:	b95a      	cbnz	r2, 8011074 <vTaskSwitchContext+0x3c>
 801105c:	b10b      	cbz	r3, 8011062 <vTaskSwitchContext+0x2a>
 801105e:	3b01      	subs	r3, #1
 8011060:	e7f6      	b.n	8011050 <vTaskSwitchContext+0x18>
 8011062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011066:	f383 8811 	msr	BASEPRI, r3
 801106a:	f3bf 8f6f 	isb	sy
 801106e:	f3bf 8f4f 	dsb	sy
 8011072:	e7fe      	b.n	8011072 <vTaskSwitchContext+0x3a>
 8011074:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8011078:	0082      	lsls	r2, r0, #2
 801107a:	440a      	add	r2, r1
 801107c:	6850      	ldr	r0, [r2, #4]
 801107e:	6840      	ldr	r0, [r0, #4]
 8011080:	6050      	str	r0, [r2, #4]
 8011082:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8011086:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801108a:	3208      	adds	r2, #8
 801108c:	4411      	add	r1, r2
 801108e:	4288      	cmp	r0, r1
 8011090:	d00f      	beq.n	80110b2 <vTaskSwitchContext+0x7a>
 8011092:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8011096:	0091      	lsls	r1, r2, #2
 8011098:	4a0c      	ldr	r2, [pc, #48]	; (80110cc <vTaskSwitchContext+0x94>)
 801109a:	440a      	add	r2, r1
 801109c:	6852      	ldr	r2, [r2, #4]
 801109e:	68d1      	ldr	r1, [r2, #12]
 80110a0:	4a0b      	ldr	r2, [pc, #44]	; (80110d0 <vTaskSwitchContext+0x98>)
 80110a2:	6011      	str	r1, [r2, #0]
 80110a4:	4908      	ldr	r1, [pc, #32]	; (80110c8 <vTaskSwitchContext+0x90>)
 80110a6:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80110a8:	6813      	ldr	r3, [r2, #0]
 80110aa:	3354      	adds	r3, #84	; 0x54
 80110ac:	4a09      	ldr	r2, [pc, #36]	; (80110d4 <vTaskSwitchContext+0x9c>)
 80110ae:	6013      	str	r3, [r2, #0]
}
 80110b0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110b2:	6840      	ldr	r0, [r0, #4]
 80110b4:	4662      	mov	r2, ip
 80110b6:	0091      	lsls	r1, r2, #2
 80110b8:	4a04      	ldr	r2, [pc, #16]	; (80110cc <vTaskSwitchContext+0x94>)
 80110ba:	440a      	add	r2, r1
 80110bc:	6050      	str	r0, [r2, #4]
 80110be:	e7e8      	b.n	8011092 <vTaskSwitchContext+0x5a>
 80110c0:	2400fc7c 	.word	0x2400fc7c
 80110c4:	2400fd04 	.word	0x2400fd04
 80110c8:	2400fc84 	.word	0x2400fc84
 80110cc:	2400f814 	.word	0x2400f814
 80110d0:	2400f808 	.word	0x2400f808
 80110d4:	240000dc 	.word	0x240000dc

080110d8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80110d8:	b158      	cbz	r0, 80110f2 <vTaskPlaceOnEventList+0x1a>
{
 80110da:	b510      	push	{r4, lr}
 80110dc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110de:	4a09      	ldr	r2, [pc, #36]	; (8011104 <vTaskPlaceOnEventList+0x2c>)
 80110e0:	6811      	ldr	r1, [r2, #0]
 80110e2:	3118      	adds	r1, #24
 80110e4:	f7fe fca9 	bl	800fa3a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80110e8:	2101      	movs	r1, #1
 80110ea:	4620      	mov	r0, r4
 80110ec:	f7ff fd86 	bl	8010bfc <prvAddCurrentTaskToDelayedList>
}
 80110f0:	bd10      	pop	{r4, pc}
 80110f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f6:	f383 8811 	msr	BASEPRI, r3
 80110fa:	f3bf 8f6f 	isb	sy
 80110fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8011102:	e7fe      	b.n	8011102 <vTaskPlaceOnEventList+0x2a>
 8011104:	2400f808 	.word	0x2400f808

08011108 <vTaskPlaceOnEventListRestricted>:
	{
 8011108:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 801110a:	b170      	cbz	r0, 801112a <vTaskPlaceOnEventListRestricted+0x22>
 801110c:	460d      	mov	r5, r1
 801110e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011110:	4a0a      	ldr	r2, [pc, #40]	; (801113c <vTaskPlaceOnEventListRestricted+0x34>)
 8011112:	6811      	ldr	r1, [r2, #0]
 8011114:	3118      	adds	r1, #24
 8011116:	f7fe fc85 	bl	800fa24 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 801111a:	b10c      	cbz	r4, 8011120 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 801111c:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011120:	4621      	mov	r1, r4
 8011122:	4628      	mov	r0, r5
 8011124:	f7ff fd6a 	bl	8010bfc <prvAddCurrentTaskToDelayedList>
	}
 8011128:	bd38      	pop	{r3, r4, r5, pc}
 801112a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112e:	f383 8811 	msr	BASEPRI, r3
 8011132:	f3bf 8f6f 	isb	sy
 8011136:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 801113a:	e7fe      	b.n	801113a <vTaskPlaceOnEventListRestricted+0x32>
 801113c:	2400f808 	.word	0x2400f808

08011140 <xTaskRemoveFromEventList>:
{
 8011140:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011142:	68c3      	ldr	r3, [r0, #12]
 8011144:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8011146:	b324      	cbz	r4, 8011192 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011148:	f104 0518 	add.w	r5, r4, #24
 801114c:	4628      	mov	r0, r5
 801114e:	f7fe fc8d 	bl	800fa6c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011152:	4b18      	ldr	r3, [pc, #96]	; (80111b4 <xTaskRemoveFromEventList+0x74>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	bb2b      	cbnz	r3, 80111a4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011158:	1d25      	adds	r5, r4, #4
 801115a:	4628      	mov	r0, r5
 801115c:	f7fe fc86 	bl	800fa6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011160:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011162:	4b15      	ldr	r3, [pc, #84]	; (80111b8 <xTaskRemoveFromEventList+0x78>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4298      	cmp	r0, r3
 8011168:	d901      	bls.n	801116e <xTaskRemoveFromEventList+0x2e>
 801116a:	4b13      	ldr	r3, [pc, #76]	; (80111b8 <xTaskRemoveFromEventList+0x78>)
 801116c:	6018      	str	r0, [r3, #0]
 801116e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011172:	4629      	mov	r1, r5
 8011174:	4b11      	ldr	r3, [pc, #68]	; (80111bc <xTaskRemoveFromEventList+0x7c>)
 8011176:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801117a:	f7fe fc53 	bl	800fa24 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801117e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011180:	4b0f      	ldr	r3, [pc, #60]	; (80111c0 <xTaskRemoveFromEventList+0x80>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011186:	429a      	cmp	r2, r3
 8011188:	d911      	bls.n	80111ae <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 801118a:	2001      	movs	r0, #1
 801118c:	4b0d      	ldr	r3, [pc, #52]	; (80111c4 <xTaskRemoveFromEventList+0x84>)
 801118e:	6018      	str	r0, [r3, #0]
}
 8011190:	bd38      	pop	{r3, r4, r5, pc}
 8011192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011196:	f383 8811 	msr	BASEPRI, r3
 801119a:	f3bf 8f6f 	isb	sy
 801119e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80111a2:	e7fe      	b.n	80111a2 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80111a4:	4629      	mov	r1, r5
 80111a6:	4808      	ldr	r0, [pc, #32]	; (80111c8 <xTaskRemoveFromEventList+0x88>)
 80111a8:	f7fe fc3c 	bl	800fa24 <vListInsertEnd>
 80111ac:	e7e7      	b.n	801117e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80111ae:	2000      	movs	r0, #0
	return xReturn;
 80111b0:	e7ee      	b.n	8011190 <xTaskRemoveFromEventList+0x50>
 80111b2:	bf00      	nop
 80111b4:	2400fc7c 	.word	0x2400fc7c
 80111b8:	2400fc84 	.word	0x2400fc84
 80111bc:	2400f814 	.word	0x2400f814
 80111c0:	2400f808 	.word	0x2400f808
 80111c4:	2400fd04 	.word	0x2400fd04
 80111c8:	2400fcc0 	.word	0x2400fcc0

080111cc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80111cc:	4b03      	ldr	r3, [pc, #12]	; (80111dc <vTaskInternalSetTimeOutState+0x10>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80111d2:	4b03      	ldr	r3, [pc, #12]	; (80111e0 <vTaskInternalSetTimeOutState+0x14>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	6043      	str	r3, [r0, #4]
}
 80111d8:	4770      	bx	lr
 80111da:	bf00      	nop
 80111dc:	2400fcb8 	.word	0x2400fcb8
 80111e0:	2400fd00 	.word	0x2400fd00

080111e4 <xTaskCheckForTimeOut>:
{
 80111e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80111e6:	b1c8      	cbz	r0, 801121c <xTaskCheckForTimeOut+0x38>
 80111e8:	460c      	mov	r4, r1
 80111ea:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80111ec:	b1f9      	cbz	r1, 801122e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80111ee:	f7fe fcb9 	bl	800fb64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80111f2:	4b1b      	ldr	r3, [pc, #108]	; (8011260 <xTaskCheckForTimeOut+0x7c>)
 80111f4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80111f6:	686b      	ldr	r3, [r5, #4]
 80111f8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80111fa:	6822      	ldr	r2, [r4, #0]
 80111fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011200:	d026      	beq.n	8011250 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011202:	4e18      	ldr	r6, [pc, #96]	; (8011264 <xTaskCheckForTimeOut+0x80>)
 8011204:	6836      	ldr	r6, [r6, #0]
 8011206:	682f      	ldr	r7, [r5, #0]
 8011208:	42b7      	cmp	r7, r6
 801120a:	d001      	beq.n	8011210 <xTaskCheckForTimeOut+0x2c>
 801120c:	428b      	cmp	r3, r1
 801120e:	d924      	bls.n	801125a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011210:	4282      	cmp	r2, r0
 8011212:	d815      	bhi.n	8011240 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8011214:	2300      	movs	r3, #0
 8011216:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8011218:	2401      	movs	r4, #1
 801121a:	e01a      	b.n	8011252 <xTaskCheckForTimeOut+0x6e>
 801121c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011220:	f383 8811 	msr	BASEPRI, r3
 8011224:	f3bf 8f6f 	isb	sy
 8011228:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 801122c:	e7fe      	b.n	801122c <xTaskCheckForTimeOut+0x48>
 801122e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011232:	f383 8811 	msr	BASEPRI, r3
 8011236:	f3bf 8f6f 	isb	sy
 801123a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 801123e:	e7fe      	b.n	801123e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8011240:	1a5b      	subs	r3, r3, r1
 8011242:	4413      	add	r3, r2
 8011244:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011246:	4628      	mov	r0, r5
 8011248:	f7ff ffc0 	bl	80111cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801124c:	2400      	movs	r4, #0
 801124e:	e000      	b.n	8011252 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8011250:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011252:	f7fe fca9 	bl	800fba8 <vPortExitCritical>
}
 8011256:	4620      	mov	r0, r4
 8011258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801125a:	2401      	movs	r4, #1
 801125c:	e7f9      	b.n	8011252 <xTaskCheckForTimeOut+0x6e>
 801125e:	bf00      	nop
 8011260:	2400fd00 	.word	0x2400fd00
 8011264:	2400fcb8 	.word	0x2400fcb8

08011268 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8011268:	4b01      	ldr	r3, [pc, #4]	; (8011270 <vTaskMissedYield+0x8>)
 801126a:	2201      	movs	r2, #1
 801126c:	601a      	str	r2, [r3, #0]
}
 801126e:	4770      	bx	lr
 8011270:	2400fd04 	.word	0x2400fd04

08011274 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8011274:	4b05      	ldr	r3, [pc, #20]	; (801128c <xTaskGetSchedulerState+0x18>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	b133      	cbz	r3, 8011288 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801127a:	4b05      	ldr	r3, [pc, #20]	; (8011290 <xTaskGetSchedulerState+0x1c>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	b10b      	cbz	r3, 8011284 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8011280:	2000      	movs	r0, #0
	}
 8011282:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8011284:	2002      	movs	r0, #2
 8011286:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011288:	2001      	movs	r0, #1
 801128a:	4770      	bx	lr
 801128c:	2400fcd4 	.word	0x2400fcd4
 8011290:	2400fc7c 	.word	0x2400fc7c

08011294 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8011294:	2800      	cmp	r0, #0
 8011296:	d03e      	beq.n	8011316 <xTaskPriorityInherit+0x82>
	{
 8011298:	b538      	push	{r3, r4, r5, lr}
 801129a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801129c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801129e:	4a20      	ldr	r2, [pc, #128]	; (8011320 <xTaskPriorityInherit+0x8c>)
 80112a0:	6812      	ldr	r2, [r2, #0]
 80112a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80112a4:	4293      	cmp	r3, r2
 80112a6:	d22e      	bcs.n	8011306 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80112a8:	6982      	ldr	r2, [r0, #24]
 80112aa:	2a00      	cmp	r2, #0
 80112ac:	db05      	blt.n	80112ba <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112ae:	4a1c      	ldr	r2, [pc, #112]	; (8011320 <xTaskPriorityInherit+0x8c>)
 80112b0:	6812      	ldr	r2, [r2, #0]
 80112b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80112b4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80112b8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80112ba:	6961      	ldr	r1, [r4, #20]
 80112bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80112c0:	4a18      	ldr	r2, [pc, #96]	; (8011324 <xTaskPriorityInherit+0x90>)
 80112c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80112c6:	4299      	cmp	r1, r3
 80112c8:	d005      	beq.n	80112d6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112ca:	4b15      	ldr	r3, [pc, #84]	; (8011320 <xTaskPriorityInherit+0x8c>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d0:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80112d2:	2001      	movs	r0, #1
	}
 80112d4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112d6:	1d25      	adds	r5, r4, #4
 80112d8:	4628      	mov	r0, r5
 80112da:	f7fe fbc7 	bl	800fa6c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112de:	4b10      	ldr	r3, [pc, #64]	; (8011320 <xTaskPriorityInherit+0x8c>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80112e4:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80112e6:	4b10      	ldr	r3, [pc, #64]	; (8011328 <xTaskPriorityInherit+0x94>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4298      	cmp	r0, r3
 80112ec:	d901      	bls.n	80112f2 <xTaskPriorityInherit+0x5e>
 80112ee:	4b0e      	ldr	r3, [pc, #56]	; (8011328 <xTaskPriorityInherit+0x94>)
 80112f0:	6018      	str	r0, [r3, #0]
 80112f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80112f6:	4629      	mov	r1, r5
 80112f8:	4b0a      	ldr	r3, [pc, #40]	; (8011324 <xTaskPriorityInherit+0x90>)
 80112fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80112fe:	f7fe fb91 	bl	800fa24 <vListInsertEnd>
				xReturn = pdTRUE;
 8011302:	2001      	movs	r0, #1
 8011304:	e7e6      	b.n	80112d4 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011306:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8011308:	4b05      	ldr	r3, [pc, #20]	; (8011320 <xTaskPriorityInherit+0x8c>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801130e:	429a      	cmp	r2, r3
 8011310:	d303      	bcc.n	801131a <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 8011312:	2000      	movs	r0, #0
 8011314:	e7de      	b.n	80112d4 <xTaskPriorityInherit+0x40>
 8011316:	2000      	movs	r0, #0
	}
 8011318:	4770      	bx	lr
					xReturn = pdTRUE;
 801131a:	2001      	movs	r0, #1
		return xReturn;
 801131c:	e7da      	b.n	80112d4 <xTaskPriorityInherit+0x40>
 801131e:	bf00      	nop
 8011320:	2400f808 	.word	0x2400f808
 8011324:	2400f814 	.word	0x2400f814
 8011328:	2400fc84 	.word	0x2400fc84

0801132c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801132c:	2800      	cmp	r0, #0
 801132e:	d03b      	beq.n	80113a8 <xTaskPriorityDisinherit+0x7c>
	{
 8011330:	b538      	push	{r3, r4, r5, lr}
 8011332:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8011334:	4b1e      	ldr	r3, [pc, #120]	; (80113b0 <xTaskPriorityDisinherit+0x84>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	4283      	cmp	r3, r0
 801133a:	d008      	beq.n	801134e <xTaskPriorityDisinherit+0x22>
 801133c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011340:	f383 8811 	msr	BASEPRI, r3
 8011344:	f3bf 8f6f 	isb	sy
 8011348:	f3bf 8f4f 	dsb	sy
 801134c:	e7fe      	b.n	801134c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801134e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011350:	b943      	cbnz	r3, 8011364 <xTaskPriorityDisinherit+0x38>
 8011352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011356:	f383 8811 	msr	BASEPRI, r3
 801135a:	f3bf 8f6f 	isb	sy
 801135e:	f3bf 8f4f 	dsb	sy
 8011362:	e7fe      	b.n	8011362 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8011364:	3b01      	subs	r3, #1
 8011366:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011368:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801136a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801136c:	4291      	cmp	r1, r2
 801136e:	d01d      	beq.n	80113ac <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011370:	b10b      	cbz	r3, 8011376 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8011372:	2000      	movs	r0, #0
	}
 8011374:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011376:	1d05      	adds	r5, r0, #4
 8011378:	4628      	mov	r0, r5
 801137a:	f7fe fb77 	bl	800fa6c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801137e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011380:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011382:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8011386:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8011388:	4b0a      	ldr	r3, [pc, #40]	; (80113b4 <xTaskPriorityDisinherit+0x88>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4298      	cmp	r0, r3
 801138e:	d901      	bls.n	8011394 <xTaskPriorityDisinherit+0x68>
 8011390:	4b08      	ldr	r3, [pc, #32]	; (80113b4 <xTaskPriorityDisinherit+0x88>)
 8011392:	6018      	str	r0, [r3, #0]
 8011394:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011398:	4629      	mov	r1, r5
 801139a:	4b07      	ldr	r3, [pc, #28]	; (80113b8 <xTaskPriorityDisinherit+0x8c>)
 801139c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80113a0:	f7fe fb40 	bl	800fa24 <vListInsertEnd>
					xReturn = pdTRUE;
 80113a4:	2001      	movs	r0, #1
 80113a6:	e7e5      	b.n	8011374 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80113a8:	2000      	movs	r0, #0
	}
 80113aa:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80113ac:	2000      	movs	r0, #0
 80113ae:	e7e1      	b.n	8011374 <xTaskPriorityDisinherit+0x48>
 80113b0:	2400f808 	.word	0x2400f808
 80113b4:	2400fc84 	.word	0x2400fc84
 80113b8:	2400f814 	.word	0x2400f814

080113bc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80113bc:	2800      	cmp	r0, #0
 80113be:	d046      	beq.n	801144e <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 80113c0:	b538      	push	{r3, r4, r5, lr}
 80113c2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80113c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80113c6:	b943      	cbnz	r3, 80113da <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80113c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113cc:	f383 8811 	msr	BASEPRI, r3
 80113d0:	f3bf 8f6f 	isb	sy
 80113d4:	f3bf 8f4f 	dsb	sy
 80113d8:	e7fe      	b.n	80113d8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80113da:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80113dc:	428a      	cmp	r2, r1
 80113de:	d200      	bcs.n	80113e2 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80113e0:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80113e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80113e4:	4291      	cmp	r1, r2
 80113e6:	d001      	beq.n	80113ec <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d000      	beq.n	80113ee <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80113ec:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80113ee:	4b18      	ldr	r3, [pc, #96]	; (8011450 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	42a3      	cmp	r3, r4
 80113f4:	d022      	beq.n	801143c <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80113f6:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80113f8:	69a3      	ldr	r3, [r4, #24]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	db02      	blt.n	8011404 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113fe:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011402:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011404:	6962      	ldr	r2, [r4, #20]
 8011406:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801140a:	4b12      	ldr	r3, [pc, #72]	; (8011454 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 801140c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8011410:	428a      	cmp	r2, r1
 8011412:	d1eb      	bne.n	80113ec <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011414:	1d25      	adds	r5, r4, #4
 8011416:	4628      	mov	r0, r5
 8011418:	f7fe fb28 	bl	800fa6c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801141c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801141e:	4b0e      	ldr	r3, [pc, #56]	; (8011458 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	4298      	cmp	r0, r3
 8011424:	d901      	bls.n	801142a <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8011426:	4b0c      	ldr	r3, [pc, #48]	; (8011458 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8011428:	6018      	str	r0, [r3, #0]
 801142a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801142e:	4629      	mov	r1, r5
 8011430:	4b08      	ldr	r3, [pc, #32]	; (8011454 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8011432:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011436:	f7fe faf5 	bl	800fa24 <vListInsertEnd>
	}
 801143a:	e7d7      	b.n	80113ec <vTaskPriorityDisinheritAfterTimeout+0x30>
 801143c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011440:	f383 8811 	msr	BASEPRI, r3
 8011444:	f3bf 8f6f 	isb	sy
 8011448:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801144c:	e7fe      	b.n	801144c <vTaskPriorityDisinheritAfterTimeout+0x90>
 801144e:	4770      	bx	lr
 8011450:	2400f808 	.word	0x2400f808
 8011454:	2400f814 	.word	0x2400f814
 8011458:	2400fc84 	.word	0x2400fc84

0801145c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 801145c:	4b05      	ldr	r3, [pc, #20]	; (8011474 <pvTaskIncrementMutexHeldCount+0x18>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	b123      	cbz	r3, 801146c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8011462:	4b04      	ldr	r3, [pc, #16]	; (8011474 <pvTaskIncrementMutexHeldCount+0x18>)
 8011464:	681a      	ldr	r2, [r3, #0]
 8011466:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8011468:	3301      	adds	r3, #1
 801146a:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 801146c:	4b01      	ldr	r3, [pc, #4]	; (8011474 <pvTaskIncrementMutexHeldCount+0x18>)
 801146e:	6818      	ldr	r0, [r3, #0]
	}
 8011470:	4770      	bx	lr
 8011472:	bf00      	nop
 8011474:	2400f808 	.word	0x2400f808

08011478 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011478:	4b06      	ldr	r3, [pc, #24]	; (8011494 <prvGetNextExpireTime+0x1c>)
 801147a:	681a      	ldr	r2, [r3, #0]
 801147c:	6813      	ldr	r3, [r2, #0]
 801147e:	b92b      	cbnz	r3, 801148c <prvGetNextExpireTime+0x14>
 8011480:	2301      	movs	r3, #1
 8011482:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011484:	b923      	cbnz	r3, 8011490 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011486:	68d3      	ldr	r3, [r2, #12]
 8011488:	6818      	ldr	r0, [r3, #0]
 801148a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801148c:	2300      	movs	r3, #0
 801148e:	e7f8      	b.n	8011482 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011490:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8011492:	4770      	bx	lr
 8011494:	2400fd08 	.word	0x2400fd08

08011498 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011498:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801149a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801149c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801149e:	4291      	cmp	r1, r2
 80114a0:	d80c      	bhi.n	80114bc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114a2:	1ad2      	subs	r2, r2, r3
 80114a4:	6983      	ldr	r3, [r0, #24]
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d301      	bcc.n	80114ae <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80114aa:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80114ac:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80114ae:	1d01      	adds	r1, r0, #4
 80114b0:	4b0b      	ldr	r3, [pc, #44]	; (80114e0 <prvInsertTimerInActiveList+0x48>)
 80114b2:	6818      	ldr	r0, [r3, #0]
 80114b4:	f7fe fac1 	bl	800fa3a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80114b8:	2000      	movs	r0, #0
 80114ba:	e7f7      	b.n	80114ac <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80114bc:	429a      	cmp	r2, r3
 80114be:	bf2c      	ite	cs
 80114c0:	2200      	movcs	r2, #0
 80114c2:	2201      	movcc	r2, #1
 80114c4:	4299      	cmp	r1, r3
 80114c6:	bf38      	it	cc
 80114c8:	2200      	movcc	r2, #0
 80114ca:	b10a      	cbz	r2, 80114d0 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 80114cc:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80114ce:	e7ed      	b.n	80114ac <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80114d0:	1d01      	adds	r1, r0, #4
 80114d2:	4b04      	ldr	r3, [pc, #16]	; (80114e4 <prvInsertTimerInActiveList+0x4c>)
 80114d4:	6818      	ldr	r0, [r3, #0]
 80114d6:	f7fe fab0 	bl	800fa3a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80114da:	2000      	movs	r0, #0
 80114dc:	e7e6      	b.n	80114ac <prvInsertTimerInActiveList+0x14>
 80114de:	bf00      	nop
 80114e0:	2400fd0c 	.word	0x2400fd0c
 80114e4:	2400fd08 	.word	0x2400fd08

080114e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80114e8:	b530      	push	{r4, r5, lr}
 80114ea:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80114ec:	f7fe fb3a 	bl	800fb64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80114f0:	4b11      	ldr	r3, [pc, #68]	; (8011538 <prvCheckForValidListAndQueue+0x50>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	b11b      	cbz	r3, 80114fe <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80114f6:	f7fe fb57 	bl	800fba8 <vPortExitCritical>
}
 80114fa:	b003      	add	sp, #12
 80114fc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80114fe:	4d0f      	ldr	r5, [pc, #60]	; (801153c <prvCheckForValidListAndQueue+0x54>)
 8011500:	4628      	mov	r0, r5
 8011502:	f7fe fa81 	bl	800fa08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011506:	4c0e      	ldr	r4, [pc, #56]	; (8011540 <prvCheckForValidListAndQueue+0x58>)
 8011508:	4620      	mov	r0, r4
 801150a:	f7fe fa7d 	bl	800fa08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801150e:	4b0d      	ldr	r3, [pc, #52]	; (8011544 <prvCheckForValidListAndQueue+0x5c>)
 8011510:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011512:	4b0d      	ldr	r3, [pc, #52]	; (8011548 <prvCheckForValidListAndQueue+0x60>)
 8011514:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011516:	2300      	movs	r3, #0
 8011518:	9300      	str	r3, [sp, #0]
 801151a:	4b0c      	ldr	r3, [pc, #48]	; (801154c <prvCheckForValidListAndQueue+0x64>)
 801151c:	4a0c      	ldr	r2, [pc, #48]	; (8011550 <prvCheckForValidListAndQueue+0x68>)
 801151e:	2110      	movs	r1, #16
 8011520:	200a      	movs	r0, #10
 8011522:	f7fe fd6e 	bl	8010002 <xQueueGenericCreateStatic>
 8011526:	4b04      	ldr	r3, [pc, #16]	; (8011538 <prvCheckForValidListAndQueue+0x50>)
 8011528:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801152a:	2800      	cmp	r0, #0
 801152c:	d0e3      	beq.n	80114f6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801152e:	4909      	ldr	r1, [pc, #36]	; (8011554 <prvCheckForValidListAndQueue+0x6c>)
 8011530:	f7ff f998 	bl	8010864 <vQueueAddToRegistry>
 8011534:	e7df      	b.n	80114f6 <prvCheckForValidListAndQueue+0xe>
 8011536:	bf00      	nop
 8011538:	2400fe2c 	.word	0x2400fe2c
 801153c:	2400fdb0 	.word	0x2400fdb0
 8011540:	2400fdc4 	.word	0x2400fdc4
 8011544:	2400fd08 	.word	0x2400fd08
 8011548:	2400fd0c 	.word	0x2400fd0c
 801154c:	2400fddc 	.word	0x2400fddc
 8011550:	2400fd10 	.word	0x2400fd10
 8011554:	08026784 	.word	0x08026784

08011558 <xTimerCreateTimerTask>:
{
 8011558:	b510      	push	{r4, lr}
 801155a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801155c:	f7ff ffc4 	bl	80114e8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8011560:	4b12      	ldr	r3, [pc, #72]	; (80115ac <xTimerCreateTimerTask+0x54>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	b1cb      	cbz	r3, 801159a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011566:	2400      	movs	r4, #0
 8011568:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801156a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801156c:	aa07      	add	r2, sp, #28
 801156e:	a906      	add	r1, sp, #24
 8011570:	a805      	add	r0, sp, #20
 8011572:	f7fe f91d 	bl	800f7b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011576:	9b05      	ldr	r3, [sp, #20]
 8011578:	9302      	str	r3, [sp, #8]
 801157a:	9b06      	ldr	r3, [sp, #24]
 801157c:	9301      	str	r3, [sp, #4]
 801157e:	2302      	movs	r3, #2
 8011580:	9300      	str	r3, [sp, #0]
 8011582:	4623      	mov	r3, r4
 8011584:	9a07      	ldr	r2, [sp, #28]
 8011586:	490a      	ldr	r1, [pc, #40]	; (80115b0 <xTimerCreateTimerTask+0x58>)
 8011588:	480a      	ldr	r0, [pc, #40]	; (80115b4 <xTimerCreateTimerTask+0x5c>)
 801158a:	f7ff fb79 	bl	8010c80 <xTaskCreateStatic>
 801158e:	4b0a      	ldr	r3, [pc, #40]	; (80115b8 <xTimerCreateTimerTask+0x60>)
 8011590:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8011592:	b110      	cbz	r0, 801159a <xTimerCreateTimerTask+0x42>
}
 8011594:	2001      	movs	r0, #1
 8011596:	b008      	add	sp, #32
 8011598:	bd10      	pop	{r4, pc}
 801159a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159e:	f383 8811 	msr	BASEPRI, r3
 80115a2:	f3bf 8f6f 	isb	sy
 80115a6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80115aa:	e7fe      	b.n	80115aa <xTimerCreateTimerTask+0x52>
 80115ac:	2400fe2c 	.word	0x2400fe2c
 80115b0:	0802678c 	.word	0x0802678c
 80115b4:	080118c1 	.word	0x080118c1
 80115b8:	2400fe30 	.word	0x2400fe30

080115bc <xTimerGenericCommand>:
	configASSERT( xTimer );
 80115bc:	b1b8      	cbz	r0, 80115ee <xTimerGenericCommand+0x32>
 80115be:	469c      	mov	ip, r3
 80115c0:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80115c2:	4818      	ldr	r0, [pc, #96]	; (8011624 <xTimerGenericCommand+0x68>)
 80115c4:	6800      	ldr	r0, [r0, #0]
 80115c6:	b358      	cbz	r0, 8011620 <xTimerGenericCommand+0x64>
{
 80115c8:	b500      	push	{lr}
 80115ca:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80115cc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80115ce:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80115d0:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80115d2:	2905      	cmp	r1, #5
 80115d4:	dc1c      	bgt.n	8011610 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80115d6:	f7ff fe4d 	bl	8011274 <xTaskGetSchedulerState>
 80115da:	2802      	cmp	r0, #2
 80115dc:	d010      	beq.n	8011600 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80115de:	2300      	movs	r3, #0
 80115e0:	461a      	mov	r2, r3
 80115e2:	4669      	mov	r1, sp
 80115e4:	480f      	ldr	r0, [pc, #60]	; (8011624 <xTimerGenericCommand+0x68>)
 80115e6:	6800      	ldr	r0, [r0, #0]
 80115e8:	f7fe fdc3 	bl	8010172 <xQueueGenericSend>
 80115ec:	e015      	b.n	801161a <xTimerGenericCommand+0x5e>
 80115ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f2:	f383 8811 	msr	BASEPRI, r3
 80115f6:	f3bf 8f6f 	isb	sy
 80115fa:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80115fe:	e7fe      	b.n	80115fe <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011600:	2300      	movs	r3, #0
 8011602:	9a06      	ldr	r2, [sp, #24]
 8011604:	4669      	mov	r1, sp
 8011606:	4807      	ldr	r0, [pc, #28]	; (8011624 <xTimerGenericCommand+0x68>)
 8011608:	6800      	ldr	r0, [r0, #0]
 801160a:	f7fe fdb2 	bl	8010172 <xQueueGenericSend>
 801160e:	e004      	b.n	801161a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011610:	2300      	movs	r3, #0
 8011612:	4662      	mov	r2, ip
 8011614:	4669      	mov	r1, sp
 8011616:	f7fe fe70 	bl	80102fa <xQueueGenericSendFromISR>
}
 801161a:	b005      	add	sp, #20
 801161c:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8011620:	2000      	movs	r0, #0
}
 8011622:	4770      	bx	lr
 8011624:	2400fe2c 	.word	0x2400fe2c

08011628 <prvSwitchTimerLists>:
{
 8011628:	b570      	push	{r4, r5, r6, lr}
 801162a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801162c:	4b1b      	ldr	r3, [pc, #108]	; (801169c <prvSwitchTimerLists+0x74>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	b362      	cbz	r2, 801168e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011638:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801163a:	1d25      	adds	r5, r4, #4
 801163c:	4628      	mov	r0, r5
 801163e:	f7fe fa15 	bl	800fa6c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011642:	6a23      	ldr	r3, [r4, #32]
 8011644:	4620      	mov	r0, r4
 8011646:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011648:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801164c:	f013 0f04 	tst.w	r3, #4
 8011650:	d0ec      	beq.n	801162c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011652:	69a3      	ldr	r3, [r4, #24]
 8011654:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8011656:	429e      	cmp	r6, r3
 8011658:	d207      	bcs.n	801166a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801165a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801165c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801165e:	4629      	mov	r1, r5
 8011660:	4b0e      	ldr	r3, [pc, #56]	; (801169c <prvSwitchTimerLists+0x74>)
 8011662:	6818      	ldr	r0, [r3, #0]
 8011664:	f7fe f9e9 	bl	800fa3a <vListInsert>
 8011668:	e7e0      	b.n	801162c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801166a:	2100      	movs	r1, #0
 801166c:	9100      	str	r1, [sp, #0]
 801166e:	460b      	mov	r3, r1
 8011670:	4632      	mov	r2, r6
 8011672:	4620      	mov	r0, r4
 8011674:	f7ff ffa2 	bl	80115bc <xTimerGenericCommand>
				configASSERT( xResult );
 8011678:	2800      	cmp	r0, #0
 801167a:	d1d7      	bne.n	801162c <prvSwitchTimerLists+0x4>
 801167c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011680:	f383 8811 	msr	BASEPRI, r3
 8011684:	f3bf 8f6f 	isb	sy
 8011688:	f3bf 8f4f 	dsb	sy
 801168c:	e7fe      	b.n	801168c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801168e:	4a04      	ldr	r2, [pc, #16]	; (80116a0 <prvSwitchTimerLists+0x78>)
 8011690:	6810      	ldr	r0, [r2, #0]
 8011692:	4902      	ldr	r1, [pc, #8]	; (801169c <prvSwitchTimerLists+0x74>)
 8011694:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8011696:	6013      	str	r3, [r2, #0]
}
 8011698:	b002      	add	sp, #8
 801169a:	bd70      	pop	{r4, r5, r6, pc}
 801169c:	2400fd08 	.word	0x2400fd08
 80116a0:	2400fd0c 	.word	0x2400fd0c

080116a4 <prvSampleTimeNow>:
{
 80116a4:	b538      	push	{r3, r4, r5, lr}
 80116a6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80116a8:	f7ff fbb8 	bl	8010e1c <xTaskGetTickCount>
 80116ac:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80116ae:	4b07      	ldr	r3, [pc, #28]	; (80116cc <prvSampleTimeNow+0x28>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	4283      	cmp	r3, r0
 80116b4:	d805      	bhi.n	80116c2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 80116b6:	2300      	movs	r3, #0
 80116b8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80116ba:	4b04      	ldr	r3, [pc, #16]	; (80116cc <prvSampleTimeNow+0x28>)
 80116bc:	601c      	str	r4, [r3, #0]
}
 80116be:	4620      	mov	r0, r4
 80116c0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 80116c2:	f7ff ffb1 	bl	8011628 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80116c6:	2301      	movs	r3, #1
 80116c8:	602b      	str	r3, [r5, #0]
 80116ca:	e7f6      	b.n	80116ba <prvSampleTimeNow+0x16>
 80116cc:	2400fdd8 	.word	0x2400fdd8

080116d0 <prvProcessExpiredTimer>:
{
 80116d0:	b570      	push	{r4, r5, r6, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	4606      	mov	r6, r0
 80116d6:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116d8:	4917      	ldr	r1, [pc, #92]	; (8011738 <prvProcessExpiredTimer+0x68>)
 80116da:	6809      	ldr	r1, [r1, #0]
 80116dc:	68c9      	ldr	r1, [r1, #12]
 80116de:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80116e0:	1d20      	adds	r0, r4, #4
 80116e2:	f7fe f9c3 	bl	800fa6c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80116e6:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 80116ea:	f01c 0f04 	tst.w	ip, #4
 80116ee:	d108      	bne.n	8011702 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80116f0:	f02c 0c01 	bic.w	ip, ip, #1
 80116f4:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80116f8:	6a23      	ldr	r3, [r4, #32]
 80116fa:	4620      	mov	r0, r4
 80116fc:	4798      	blx	r3
}
 80116fe:	b002      	add	sp, #8
 8011700:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011702:	69a1      	ldr	r1, [r4, #24]
 8011704:	4633      	mov	r3, r6
 8011706:	462a      	mov	r2, r5
 8011708:	4431      	add	r1, r6
 801170a:	4620      	mov	r0, r4
 801170c:	f7ff fec4 	bl	8011498 <prvInsertTimerInActiveList>
 8011710:	2800      	cmp	r0, #0
 8011712:	d0f1      	beq.n	80116f8 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011714:	2100      	movs	r1, #0
 8011716:	9100      	str	r1, [sp, #0]
 8011718:	460b      	mov	r3, r1
 801171a:	4632      	mov	r2, r6
 801171c:	4620      	mov	r0, r4
 801171e:	f7ff ff4d 	bl	80115bc <xTimerGenericCommand>
			configASSERT( xResult );
 8011722:	2800      	cmp	r0, #0
 8011724:	d1e8      	bne.n	80116f8 <prvProcessExpiredTimer+0x28>
 8011726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172a:	f383 8811 	msr	BASEPRI, r3
 801172e:	f3bf 8f6f 	isb	sy
 8011732:	f3bf 8f4f 	dsb	sy
 8011736:	e7fe      	b.n	8011736 <prvProcessExpiredTimer+0x66>
 8011738:	2400fd08 	.word	0x2400fd08

0801173c <prvProcessTimerOrBlockTask>:
{
 801173c:	b570      	push	{r4, r5, r6, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	4606      	mov	r6, r0
 8011742:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8011744:	f7ff fb62 	bl	8010e0c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011748:	a801      	add	r0, sp, #4
 801174a:	f7ff ffab 	bl	80116a4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801174e:	9b01      	ldr	r3, [sp, #4]
 8011750:	bb3b      	cbnz	r3, 80117a2 <prvProcessTimerOrBlockTask+0x66>
 8011752:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011754:	42b0      	cmp	r0, r6
 8011756:	bf28      	it	cs
 8011758:	2c00      	cmpcs	r4, #0
 801175a:	d019      	beq.n	8011790 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 801175c:	b124      	cbz	r4, 8011768 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801175e:	4a13      	ldr	r2, [pc, #76]	; (80117ac <prvProcessTimerOrBlockTask+0x70>)
 8011760:	6812      	ldr	r2, [r2, #0]
 8011762:	6812      	ldr	r2, [r2, #0]
 8011764:	b9da      	cbnz	r2, 801179e <prvProcessTimerOrBlockTask+0x62>
 8011766:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011768:	4622      	mov	r2, r4
 801176a:	1b71      	subs	r1, r6, r5
 801176c:	4b10      	ldr	r3, [pc, #64]	; (80117b0 <prvProcessTimerOrBlockTask+0x74>)
 801176e:	6818      	ldr	r0, [r3, #0]
 8011770:	f7ff f8b8 	bl	80108e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011774:	f7ff fbe4 	bl	8010f40 <xTaskResumeAll>
 8011778:	b9a8      	cbnz	r0, 80117a6 <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 801177a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801177e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011782:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8011786:	f3bf 8f4f 	dsb	sy
 801178a:	f3bf 8f6f 	isb	sy
 801178e:	e00a      	b.n	80117a6 <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 8011790:	f7ff fbd6 	bl	8010f40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011794:	4629      	mov	r1, r5
 8011796:	4630      	mov	r0, r6
 8011798:	f7ff ff9a 	bl	80116d0 <prvProcessExpiredTimer>
 801179c:	e003      	b.n	80117a6 <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801179e:	461c      	mov	r4, r3
 80117a0:	e7e2      	b.n	8011768 <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 80117a2:	f7ff fbcd 	bl	8010f40 <xTaskResumeAll>
}
 80117a6:	b002      	add	sp, #8
 80117a8:	bd70      	pop	{r4, r5, r6, pc}
 80117aa:	bf00      	nop
 80117ac:	2400fd0c 	.word	0x2400fd0c
 80117b0:	2400fe2c 	.word	0x2400fe2c

080117b4 <prvProcessReceivedCommands>:
{
 80117b4:	b510      	push	{r4, lr}
 80117b6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80117b8:	e002      	b.n	80117c0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80117ba:	9b04      	ldr	r3, [sp, #16]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	da0f      	bge.n	80117e0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80117c0:	2200      	movs	r2, #0
 80117c2:	a904      	add	r1, sp, #16
 80117c4:	4b3d      	ldr	r3, [pc, #244]	; (80118bc <prvProcessReceivedCommands+0x108>)
 80117c6:	6818      	ldr	r0, [r3, #0]
 80117c8:	f7fe fe57 	bl	801047a <xQueueReceive>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d073      	beq.n	80118b8 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80117d0:	9b04      	ldr	r3, [sp, #16]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	daf1      	bge.n	80117ba <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80117d6:	9907      	ldr	r1, [sp, #28]
 80117d8:	9806      	ldr	r0, [sp, #24]
 80117da:	9b05      	ldr	r3, [sp, #20]
 80117dc:	4798      	blx	r3
 80117de:	e7ec      	b.n	80117ba <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80117e0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80117e2:	6963      	ldr	r3, [r4, #20]
 80117e4:	b113      	cbz	r3, 80117ec <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80117e6:	1d20      	adds	r0, r4, #4
 80117e8:	f7fe f940 	bl	800fa6c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80117ec:	a803      	add	r0, sp, #12
 80117ee:	f7ff ff59 	bl	80116a4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80117f2:	9b04      	ldr	r3, [sp, #16]
 80117f4:	2b09      	cmp	r3, #9
 80117f6:	d8e3      	bhi.n	80117c0 <prvProcessReceivedCommands+0xc>
 80117f8:	e8df f003 	tbb	[pc, r3]
 80117fc:	30050505 	.word	0x30050505
 8011800:	05055037 	.word	0x05055037
 8011804:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011806:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801180a:	f043 0301 	orr.w	r3, r3, #1
 801180e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011812:	9b05      	ldr	r3, [sp, #20]
 8011814:	69a1      	ldr	r1, [r4, #24]
 8011816:	4602      	mov	r2, r0
 8011818:	4419      	add	r1, r3
 801181a:	4620      	mov	r0, r4
 801181c:	f7ff fe3c 	bl	8011498 <prvInsertTimerInActiveList>
 8011820:	2800      	cmp	r0, #0
 8011822:	d0cd      	beq.n	80117c0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011824:	6a23      	ldr	r3, [r4, #32]
 8011826:	4620      	mov	r0, r4
 8011828:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801182a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801182e:	f013 0f04 	tst.w	r3, #4
 8011832:	d0c5      	beq.n	80117c0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011834:	69a2      	ldr	r2, [r4, #24]
 8011836:	2100      	movs	r1, #0
 8011838:	9100      	str	r1, [sp, #0]
 801183a:	460b      	mov	r3, r1
 801183c:	9805      	ldr	r0, [sp, #20]
 801183e:	4402      	add	r2, r0
 8011840:	4620      	mov	r0, r4
 8011842:	f7ff febb 	bl	80115bc <xTimerGenericCommand>
							configASSERT( xResult );
 8011846:	2800      	cmp	r0, #0
 8011848:	d1ba      	bne.n	80117c0 <prvProcessReceivedCommands+0xc>
 801184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801184e:	f383 8811 	msr	BASEPRI, r3
 8011852:	f3bf 8f6f 	isb	sy
 8011856:	f3bf 8f4f 	dsb	sy
 801185a:	e7fe      	b.n	801185a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801185c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011860:	f023 0301 	bic.w	r3, r3, #1
 8011864:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8011868:	e7aa      	b.n	80117c0 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801186a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801186e:	f043 0301 	orr.w	r3, r3, #1
 8011872:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011876:	9905      	ldr	r1, [sp, #20]
 8011878:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801187a:	b131      	cbz	r1, 801188a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801187c:	4603      	mov	r3, r0
 801187e:	4602      	mov	r2, r0
 8011880:	4401      	add	r1, r0
 8011882:	4620      	mov	r0, r4
 8011884:	f7ff fe08 	bl	8011498 <prvInsertTimerInActiveList>
					break;
 8011888:	e79a      	b.n	80117c0 <prvProcessReceivedCommands+0xc>
 801188a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801188e:	f383 8811 	msr	BASEPRI, r3
 8011892:	f3bf 8f6f 	isb	sy
 8011896:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801189a:	e7fe      	b.n	801189a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801189c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80118a0:	f013 0f02 	tst.w	r3, #2
 80118a4:	d004      	beq.n	80118b0 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80118a6:	f023 0301 	bic.w	r3, r3, #1
 80118aa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80118ae:	e787      	b.n	80117c0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 80118b0:	4620      	mov	r0, r4
 80118b2:	f7fe f86b 	bl	800f98c <vPortFree>
 80118b6:	e783      	b.n	80117c0 <prvProcessReceivedCommands+0xc>
}
 80118b8:	b008      	add	sp, #32
 80118ba:	bd10      	pop	{r4, pc}
 80118bc:	2400fe2c 	.word	0x2400fe2c

080118c0 <prvTimerTask>:
{
 80118c0:	b500      	push	{lr}
 80118c2:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80118c4:	a801      	add	r0, sp, #4
 80118c6:	f7ff fdd7 	bl	8011478 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80118ca:	9901      	ldr	r1, [sp, #4]
 80118cc:	f7ff ff36 	bl	801173c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80118d0:	f7ff ff70 	bl	80117b4 <prvProcessReceivedCommands>
	for( ;; )
 80118d4:	e7f6      	b.n	80118c4 <prvTimerTask+0x4>

080118d6 <net_aton>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
int32_t net_aton(const char_t *ptr, net_ip_addr_t *addr)
{
 80118d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118d8:	b085      	sub	sp, #20
 80118da:	4684      	mov	ip, r0
 80118dc:	460e      	mov	r6, r1
  uint32_t parts[4];
  uint32_t *pp = parts;
  int32_t ret = 1;
  int32_t done;

  c0 = *cp;
 80118de:	7803      	ldrb	r3, [r0, #0]
  done = 0;
 80118e0:	2000      	movs	r0, #0
  int32_t ret = 1;
 80118e2:	2501      	movs	r5, #1
  uint32_t *pp = parts;
 80118e4:	466c      	mov	r4, sp
  uint32_t val = 0;
 80118e6:	4601      	mov	r1, r0
 80118e8:	e03e      	b.n	8011968 <net_aton+0x92>
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
        {
          ret = 0;
 80118ea:	4605      	mov	r5, r0
          done = 1;
 80118ec:	2001      	movs	r0, #1
 80118ee:	e03b      	b.n	8011968 <net_aton+0x92>
      ret = 0;
 80118f0:	4605      	mov	r5, r0
      done = 1;
 80118f2:	2001      	movs	r0, #1
 80118f4:	e038      	b.n	8011968 <net_aton+0x92>
        ++cp;
 80118f6:	f10c 0201 	add.w	r2, ip, #1
        c0 = (char_t) * cp;
 80118fa:	f89c 3001 	ldrb.w	r3, [ip, #1]
        if ((c0 == (char_t) 'x') || (c0 == (char_t) 'X'))
 80118fe:	2b58      	cmp	r3, #88	; 0x58
 8011900:	bf18      	it	ne
 8011902:	2b78      	cmpne	r3, #120	; 0x78
 8011904:	d106      	bne.n	8011914 <net_aton+0x3e>
          c0 = (char_t) * cp;
 8011906:	f89c 3002 	ldrb.w	r3, [ip, #2]
          ++cp;
 801190a:	f10c 0c02 	add.w	ip, ip, #2
          base = 16;
 801190e:	f04f 0e10 	mov.w	lr, #16
 8011912:	e033      	b.n	801197c <net_aton+0xa6>
        ++cp;
 8011914:	4694      	mov	ip, r2
          base = 8;
 8011916:	f04f 0e08 	mov.w	lr, #8
 801191a:	e02f      	b.n	801197c <net_aton+0xa6>
          val = (val * base) + (uint32_t)c0 - (uint32_t) '0';
 801191c:	fb0e 3101 	mla	r1, lr, r1, r3
 8011920:	3930      	subs	r1, #48	; 0x30
          c0 = (char_t) * cp;
 8011922:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
        if (NET_ISDIGIT(c0))
 8011926:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801192a:	b2d2      	uxtb	r2, r2
 801192c:	2a09      	cmp	r2, #9
 801192e:	d9f5      	bls.n	801191c <net_aton+0x46>
        else if ((base == 16U) && NET_ISXDIGIT(c0))
 8011930:	f1be 0f10 	cmp.w	lr, #16
 8011934:	d115      	bne.n	8011962 <net_aton+0x8c>
 8011936:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801193a:	b2d2      	uxtb	r2, r2
 801193c:	2a05      	cmp	r2, #5
 801193e:	d904      	bls.n	801194a <net_aton+0x74>
 8011940:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 8011944:	b2ff      	uxtb	r7, r7
 8011946:	2f05      	cmp	r7, #5
 8011948:	d80b      	bhi.n	8011962 <net_aton+0x8c>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 801194a:	0109      	lsls	r1, r1, #4
 801194c:	2a19      	cmp	r2, #25
 801194e:	d806      	bhi.n	801195e <net_aton+0x88>
 8011950:	2261      	movs	r2, #97	; 0x61
 8011952:	1a9b      	subs	r3, r3, r2
 8011954:	330a      	adds	r3, #10
 8011956:	4319      	orrs	r1, r3
          c0 = (char_t) * cp;
 8011958:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 801195c:	e7e3      	b.n	8011926 <net_aton+0x50>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 801195e:	2241      	movs	r2, #65	; 0x41
 8011960:	e7f7      	b.n	8011952 <net_aton+0x7c>
      if (c0 == '.')
 8011962:	2b2e      	cmp	r3, #46	; 0x2e
 8011964:	d00c      	beq.n	8011980 <net_aton+0xaa>
          c0 = (char_t) * cp;
        }
      }
      else
      {
        done = 1;
 8011966:	2001      	movs	r0, #1
    if (done == 1)
 8011968:	b9a0      	cbnz	r0, 8011994 <net_aton+0xbe>
    if (!NET_ISDIGIT(c0))
 801196a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801196e:	b2d2      	uxtb	r2, r2
 8011970:	2a09      	cmp	r2, #9
 8011972:	d8bd      	bhi.n	80118f0 <net_aton+0x1a>
      if (c0 == '0')
 8011974:	2b30      	cmp	r3, #48	; 0x30
 8011976:	d0be      	beq.n	80118f6 <net_aton+0x20>
      base = 10;
 8011978:	f04f 0e0a 	mov.w	lr, #10
          base = 8;
 801197c:	2100      	movs	r1, #0
 801197e:	e7d2      	b.n	8011926 <net_aton+0x50>
        if (pp >= (parts + 3))
 8011980:	aa03      	add	r2, sp, #12
 8011982:	4294      	cmp	r4, r2
 8011984:	d2b1      	bcs.n	80118ea <net_aton+0x14>
          *pp = val;
 8011986:	f844 1b04 	str.w	r1, [r4], #4
          c0 = (char_t) * cp;
 801198a:	f89c 3001 	ldrb.w	r3, [ip, #1]
          ++cp;
 801198e:	f10c 0c01 	add.w	ip, ip, #1
 8011992:	e7e9      	b.n	8011968 <net_aton+0x92>
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (char_t)'\0') && (NET_ISSPACE((c0)) == false))
 8011994:	b19b      	cbz	r3, 80119be <net_aton+0xe8>
 8011996:	2b0c      	cmp	r3, #12
 8011998:	bf18      	it	ne
 801199a:	2b20      	cmpne	r3, #32
 801199c:	d00f      	beq.n	80119be <net_aton+0xe8>
 801199e:	2b0d      	cmp	r3, #13
 80119a0:	bf14      	ite	ne
 80119a2:	2200      	movne	r2, #0
 80119a4:	2201      	moveq	r2, #1
 80119a6:	2b0a      	cmp	r3, #10
 80119a8:	d009      	beq.n	80119be <net_aton+0xe8>
 80119aa:	b942      	cbnz	r2, 80119be <net_aton+0xe8>
 80119ac:	2b0b      	cmp	r3, #11
 80119ae:	bf14      	ite	ne
 80119b0:	2200      	movne	r2, #0
 80119b2:	2201      	moveq	r2, #1
 80119b4:	2b09      	cmp	r3, #9
 80119b6:	d002      	beq.n	80119be <net_aton+0xe8>
 80119b8:	b90a      	cbnz	r2, 80119be <net_aton+0xe8>
  {
    ret = 0;
 80119ba:	2500      	movs	r5, #0
 80119bc:	e011      	b.n	80119e2 <net_aton+0x10c>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 80119be:	466b      	mov	r3, sp
 80119c0:	1ae3      	subs	r3, r4, r3
 80119c2:	109b      	asrs	r3, r3, #2
 80119c4:	2b03      	cmp	r3, #3
 80119c6:	d834      	bhi.n	8011a32 <net_aton+0x15c>
 80119c8:	e8df f003 	tbb	[pc, r3]
 80119cc:	180e0209 	.word	0x180e0209

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 80119d0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80119d4:	d300      	bcc.n	80119d8 <net_aton+0x102>
        {
          ret = 0;
 80119d6:	2500      	movs	r5, #0
        }
        val |= parts[0] << 24;
 80119d8:	9b00      	ldr	r3, [sp, #0]
 80119da:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        ret = 0;
        break;
    }
  }

  if (ret == 1)
 80119de:	2d01      	cmp	r5, #1
 80119e0:	d018      	beq.n	8011a14 <net_aton+0x13e>
    {
      addr->addr = NET_HTONL(val);
    }
  }
  return ret;
}
 80119e2:	4628      	mov	r0, r5
 80119e4:	b005      	add	sp, #20
 80119e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (val > 0xffffU)
 80119e8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80119ec:	d223      	bcs.n	8011a36 <net_aton+0x160>
        val |= (parts[0] << 24) | (parts[1] << 16);
 80119ee:	9b01      	ldr	r3, [sp, #4]
 80119f0:	041b      	lsls	r3, r3, #16
 80119f2:	9a00      	ldr	r2, [sp, #0]
 80119f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80119f8:	4319      	orrs	r1, r3
        break;
 80119fa:	e7f0      	b.n	80119de <net_aton+0x108>
        if (val > 0xffU)
 80119fc:	29ff      	cmp	r1, #255	; 0xff
 80119fe:	d81c      	bhi.n	8011a3a <net_aton+0x164>
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8011a00:	9b01      	ldr	r3, [sp, #4]
 8011a02:	041b      	lsls	r3, r3, #16
 8011a04:	9a00      	ldr	r2, [sp, #0]
 8011a06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011a0a:	9a02      	ldr	r2, [sp, #8]
 8011a0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011a10:	4319      	orrs	r1, r3
        break;
 8011a12:	e7e4      	b.n	80119de <net_aton+0x108>
    if (addr != NULL)
 8011a14:	2e00      	cmp	r6, #0
 8011a16:	d0e4      	beq.n	80119e2 <net_aton+0x10c>
      addr->addr = NET_HTONL(val);
 8011a18:	0a0b      	lsrs	r3, r1, #8
 8011a1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011a1e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8011a22:	020a      	lsls	r2, r1, #8
 8011a24:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8011a28:	4313      	orrs	r3, r2
 8011a2a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8011a2e:	6031      	str	r1, [r6, #0]
 8011a30:	e7d7      	b.n	80119e2 <net_aton+0x10c>
    switch (pp - parts + 1)
 8011a32:	2500      	movs	r5, #0
 8011a34:	e7d5      	b.n	80119e2 <net_aton+0x10c>
          ret = 0;
 8011a36:	2500      	movs	r5, #0
 8011a38:	e7d3      	b.n	80119e2 <net_aton+0x10c>
          ret = 0;
 8011a3a:	2500      	movs	r5, #0
  return ret;
 8011a3c:	e7d1      	b.n	80119e2 <net_aton+0x10c>

08011a3e <net_get_ip_addr>:
  /*cstat -MISRAC2012-Rule-11.3 Cast */
  addrv = ((net_sockaddr_in_t *)addr)->sin_addr.s_addr;
  /*cstat +MISRAC2012-Rule-11.3 Cast */
  NET_COPY(ipaddr, addrv);
  return ipaddr;
}
 8011a3e:	6840      	ldr	r0, [r0, #4]
 8011a40:	4770      	bx	lr
	...

08011a44 <net_wifi_security_to_string>:
  * @retval a constant string , for instance "Open" or "WPA2-AES"
  */
const char_t *net_wifi_security_to_string(uint32_t sec)
{
  const char_t *s;
  if (sec == NET_WIFI_SM_OPEN)
 8011a44:	2800      	cmp	r0, #0
 8011a46:	d041      	beq.n	8011acc <net_wifi_security_to_string+0x88>
  {
    s =  "Open";
  }
  else if (sec == NET_WIFI_SM_WEP_SHARED)
 8011a48:	f248 0201 	movw	r2, #32769	; 0x8001
 8011a4c:	4290      	cmp	r0, r2
 8011a4e:	d03f      	beq.n	8011ad0 <net_wifi_security_to_string+0x8c>
  {
    s = "WEP-shared";
  }
  else if (sec == NET_WIFI_SM_WPA_TKIP_PSK)
 8011a50:	4a30      	ldr	r2, [pc, #192]	; (8011b14 <net_wifi_security_to_string+0xd0>)
 8011a52:	4290      	cmp	r0, r2
 8011a54:	d03e      	beq.n	8011ad4 <net_wifi_security_to_string+0x90>
  {
    s = "WPA-TKIP";
  }
  else if (sec == NET_WIFI_SM_WPA_MIXED_PSK)
 8011a56:	3204      	adds	r2, #4
 8011a58:	4290      	cmp	r0, r2
 8011a5a:	d03d      	beq.n	8011ad8 <net_wifi_security_to_string+0x94>
  {
    s = "WPA-Mixed";
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_PSK)
 8011a5c:	4a2e      	ldr	r2, [pc, #184]	; (8011b18 <net_wifi_security_to_string+0xd4>)
 8011a5e:	4290      	cmp	r0, r2
 8011a60:	d03c      	beq.n	8011adc <net_wifi_security_to_string+0x98>
  {
    s = "WPA2-AES";
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_PSK)
 8011a62:	3a02      	subs	r2, #2
 8011a64:	4290      	cmp	r0, r2
 8011a66:	d03b      	beq.n	8011ae0 <net_wifi_security_to_string+0x9c>
  {
    s = "WPA2-TKIP";
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_PSK)
 8011a68:	3204      	adds	r2, #4
 8011a6a:	4290      	cmp	r0, r2
 8011a6c:	d03a      	beq.n	8011ae4 <net_wifi_security_to_string+0xa0>
  {
    s = "WPA2_Mixed";
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_PSK)
 8011a6e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011a72:	3a02      	subs	r2, #2
 8011a74:	4290      	cmp	r0, r2
 8011a76:	d037      	beq.n	8011ae8 <net_wifi_security_to_string+0xa4>
  {
    s = "WPA2-FBT";
  }
  else if (sec == NET_WIFI_SM_WPA3_SAE)
 8011a78:	f1a2 527d 	sub.w	r2, r2, #1061158912	; 0x3f400000
 8011a7c:	4290      	cmp	r0, r2
 8011a7e:	d035      	beq.n	8011aec <net_wifi_security_to_string+0xa8>
  {
    s = "WPA3";
  }
  else if (sec == NET_WIFI_SM_WPA3_WPA2_PSK)
 8011a80:	f502 0280 	add.w	r2, r2, #4194304	; 0x400000
 8011a84:	4290      	cmp	r0, r2
 8011a86:	d033      	beq.n	8011af0 <net_wifi_security_to_string+0xac>
  {
    s = "WPA3-WPA2";
  }

  else if (sec == NET_WIFI_SM_WPA_TKIP_ENT)
 8011a88:	4a24      	ldr	r2, [pc, #144]	; (8011b1c <net_wifi_security_to_string+0xd8>)
 8011a8a:	4290      	cmp	r0, r2
 8011a8c:	d032      	beq.n	8011af4 <net_wifi_security_to_string+0xb0>
  {
    s = "WPA-TKIP-Ent";
  }
  else if (sec == NET_WIFI_SM_WPA_AES_ENT)
 8011a8e:	3202      	adds	r2, #2
 8011a90:	4290      	cmp	r0, r2
 8011a92:	d031      	beq.n	8011af8 <net_wifi_security_to_string+0xb4>
  {
    s = "WPA-AES-Ent";
  }
  else if (sec == NET_WIFI_SM_WPA2_TKIP_ENT)
 8011a94:	4a22      	ldr	r2, [pc, #136]	; (8011b20 <net_wifi_security_to_string+0xdc>)
 8011a96:	4290      	cmp	r0, r2
 8011a98:	d030      	beq.n	8011afc <net_wifi_security_to_string+0xb8>
  {
    s = "WPA2-TKIP-Ent";
  }
  else if (sec == NET_WIFI_SM_WPA2_AES_ENT)
 8011a9a:	3202      	adds	r2, #2
 8011a9c:	4290      	cmp	r0, r2
 8011a9e:	d02f      	beq.n	8011b00 <net_wifi_security_to_string+0xbc>
  {
    s = "WPA2-AES-Ent";
  }
  else if (sec == NET_WIFI_SM_WPA2_MIXED_ENT)
 8011aa0:	3202      	adds	r2, #2
 8011aa2:	4290      	cmp	r0, r2
 8011aa4:	d02e      	beq.n	8011b04 <net_wifi_security_to_string+0xc0>
  {
    s = "WPA2-Mixed-Ent";
  }
  else if (sec == NET_WIFI_SM_WPA2_FBT_ENT)
 8011aa6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011aaa:	3a02      	subs	r2, #2
 8011aac:	4290      	cmp	r0, r2
 8011aae:	d02b      	beq.n	8011b08 <net_wifi_security_to_string+0xc4>
  {
    s = "WPA-FBT-Ent";
  }

  else if (sec == NET_WIFI_SM_IBSS_OPEN)
 8011ab0:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8011ab4:	d02a      	beq.n	8011b0c <net_wifi_security_to_string+0xc8>
  {
    s = "IBS";
  }
  else if (sec == NET_WIFI_SM_WPS_OPEN)
 8011ab6:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8011aba:	d029      	beq.n	8011b10 <net_wifi_security_to_string+0xcc>
  {
    s = "WPS";
  }
  else if (sec == NET_WIFI_SM_WPS_SECURE)
 8011abc:	f1a2 5249 	sub.w	r2, r2, #843055104	; 0x32400000
 8011ac0:	4290      	cmp	r0, r2
 8011ac2:	d001      	beq.n	8011ac8 <net_wifi_security_to_string+0x84>
  {
    s = "WPS-AES";
  }
  else
  {
    s = "unknown";
 8011ac4:	4817      	ldr	r0, [pc, #92]	; (8011b24 <net_wifi_security_to_string+0xe0>)
  }
  return s;
}
 8011ac6:	4770      	bx	lr
    s = "WPS-AES";
 8011ac8:	4817      	ldr	r0, [pc, #92]	; (8011b28 <net_wifi_security_to_string+0xe4>)
 8011aca:	4770      	bx	lr
    s =  "Open";
 8011acc:	4817      	ldr	r0, [pc, #92]	; (8011b2c <net_wifi_security_to_string+0xe8>)
 8011ace:	4770      	bx	lr
    s = "WEP-shared";
 8011ad0:	4817      	ldr	r0, [pc, #92]	; (8011b30 <net_wifi_security_to_string+0xec>)
 8011ad2:	4770      	bx	lr
    s = "WPA-TKIP";
 8011ad4:	4817      	ldr	r0, [pc, #92]	; (8011b34 <net_wifi_security_to_string+0xf0>)
 8011ad6:	4770      	bx	lr
    s = "WPA-Mixed";
 8011ad8:	4817      	ldr	r0, [pc, #92]	; (8011b38 <net_wifi_security_to_string+0xf4>)
 8011ada:	4770      	bx	lr
    s = "WPA2-AES";
 8011adc:	4817      	ldr	r0, [pc, #92]	; (8011b3c <net_wifi_security_to_string+0xf8>)
 8011ade:	4770      	bx	lr
    s = "WPA2-TKIP";
 8011ae0:	4817      	ldr	r0, [pc, #92]	; (8011b40 <net_wifi_security_to_string+0xfc>)
 8011ae2:	4770      	bx	lr
    s = "WPA2_Mixed";
 8011ae4:	4817      	ldr	r0, [pc, #92]	; (8011b44 <net_wifi_security_to_string+0x100>)
 8011ae6:	4770      	bx	lr
    s = "WPA2-FBT";
 8011ae8:	4817      	ldr	r0, [pc, #92]	; (8011b48 <net_wifi_security_to_string+0x104>)
 8011aea:	4770      	bx	lr
    s = "WPA3";
 8011aec:	4817      	ldr	r0, [pc, #92]	; (8011b4c <net_wifi_security_to_string+0x108>)
 8011aee:	4770      	bx	lr
    s = "WPA3-WPA2";
 8011af0:	4817      	ldr	r0, [pc, #92]	; (8011b50 <net_wifi_security_to_string+0x10c>)
 8011af2:	4770      	bx	lr
    s = "WPA-TKIP-Ent";
 8011af4:	4817      	ldr	r0, [pc, #92]	; (8011b54 <net_wifi_security_to_string+0x110>)
 8011af6:	4770      	bx	lr
    s = "WPA-AES-Ent";
 8011af8:	4817      	ldr	r0, [pc, #92]	; (8011b58 <net_wifi_security_to_string+0x114>)
 8011afa:	4770      	bx	lr
    s = "WPA2-TKIP-Ent";
 8011afc:	4817      	ldr	r0, [pc, #92]	; (8011b5c <net_wifi_security_to_string+0x118>)
 8011afe:	4770      	bx	lr
    s = "WPA2-AES-Ent";
 8011b00:	4817      	ldr	r0, [pc, #92]	; (8011b60 <net_wifi_security_to_string+0x11c>)
 8011b02:	4770      	bx	lr
    s = "WPA2-Mixed-Ent";
 8011b04:	4817      	ldr	r0, [pc, #92]	; (8011b64 <net_wifi_security_to_string+0x120>)
 8011b06:	4770      	bx	lr
    s = "WPA-FBT-Ent";
 8011b08:	4817      	ldr	r0, [pc, #92]	; (8011b68 <net_wifi_security_to_string+0x124>)
 8011b0a:	4770      	bx	lr
    s = "IBS";
 8011b0c:	4817      	ldr	r0, [pc, #92]	; (8011b6c <net_wifi_security_to_string+0x128>)
 8011b0e:	4770      	bx	lr
    s = "WPS";
 8011b10:	4817      	ldr	r0, [pc, #92]	; (8011b70 <net_wifi_security_to_string+0x12c>)
 8011b12:	4770      	bx	lr
 8011b14:	00200002 	.word	0x00200002
 8011b18:	00400004 	.word	0x00400004
 8011b1c:	02200002 	.word	0x02200002
 8011b20:	02400002 	.word	0x02400002
 8011b24:	08026794 	.word	0x08026794
 8011b28:	08026864 	.word	0x08026864
 8011b2c:	08026510 	.word	0x08026510
 8011b30:	0802679c 	.word	0x0802679c
 8011b34:	080267a8 	.word	0x080267a8
 8011b38:	080267b4 	.word	0x080267b4
 8011b3c:	080267c0 	.word	0x080267c0
 8011b40:	080267cc 	.word	0x080267cc
 8011b44:	080267d8 	.word	0x080267d8
 8011b48:	080267e4 	.word	0x080267e4
 8011b4c:	080267f0 	.word	0x080267f0
 8011b50:	080267f8 	.word	0x080267f8
 8011b54:	08026804 	.word	0x08026804
 8011b58:	08026814 	.word	0x08026814
 8011b5c:	08026820 	.word	0x08026820
 8011b60:	08026830 	.word	0x08026830
 8011b64:	08026840 	.word	0x08026840
 8011b68:	08026850 	.word	0x08026850
 8011b6c:	0802685c 	.word	0x0802685c
 8011b70:	08026860 	.word	0x08026860

08011b74 <net_wifi_string_to_security>:
/**
  * @brief  Convert a string to a security enum value
  * @param  sec is a pointer to a string
  */
uint32_t net_wifi_string_to_security(char_t *sec)
{
 8011b74:	b538      	push	{r3, r4, r5, lr}
 8011b76:	4604      	mov	r4, r0
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
  if (strcmp(sec, "Open") == 0)
 8011b78:	493d      	ldr	r1, [pc, #244]	; (8011c70 <net_wifi_string_to_security+0xfc>)
 8011b7a:	f7ee fbb9 	bl	80002f0 <strcmp>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d071      	beq.n	8011c66 <net_wifi_string_to_security+0xf2>
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
 8011b82:	f04f 35ff 	mov.w	r5, #4294967295
  {
    ret = NET_WIFI_SM_OPEN;
  }
  if (strcmp(sec, "WEP-shared") == 0)
 8011b86:	493b      	ldr	r1, [pc, #236]	; (8011c74 <net_wifi_string_to_security+0x100>)
 8011b88:	4620      	mov	r0, r4
 8011b8a:	f7ee fbb1 	bl	80002f0 <strcmp>
 8011b8e:	b908      	cbnz	r0, 8011b94 <net_wifi_string_to_security+0x20>
  {
    ret = NET_WIFI_SM_WEP_SHARED;
 8011b90:	f248 0501 	movw	r5, #32769	; 0x8001
  }
  if (strcmp(sec, "WPA-TKIP") == 0)
 8011b94:	4938      	ldr	r1, [pc, #224]	; (8011c78 <net_wifi_string_to_security+0x104>)
 8011b96:	4620      	mov	r0, r4
 8011b98:	f7ee fbaa 	bl	80002f0 <strcmp>
 8011b9c:	b900      	cbnz	r0, 8011ba0 <net_wifi_string_to_security+0x2c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_PSK;
 8011b9e:	4d37      	ldr	r5, [pc, #220]	; (8011c7c <net_wifi_string_to_security+0x108>)
  }
  if (strcmp(sec, "WPA-Mixed") == 0)
 8011ba0:	4937      	ldr	r1, [pc, #220]	; (8011c80 <net_wifi_string_to_security+0x10c>)
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	f7ee fba4 	bl	80002f0 <strcmp>
 8011ba8:	b900      	cbnz	r0, 8011bac <net_wifi_string_to_security+0x38>
  {
    ret = NET_WIFI_SM_WPA_MIXED_PSK;
 8011baa:	4d36      	ldr	r5, [pc, #216]	; (8011c84 <net_wifi_string_to_security+0x110>)
  }
  if (strcmp(sec, "WPA2-AES") == 0)
 8011bac:	4936      	ldr	r1, [pc, #216]	; (8011c88 <net_wifi_string_to_security+0x114>)
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f7ee fb9e 	bl	80002f0 <strcmp>
 8011bb4:	b900      	cbnz	r0, 8011bb8 <net_wifi_string_to_security+0x44>
  {
    ret = NET_WIFI_SM_WPA2_AES_PSK;
 8011bb6:	4d35      	ldr	r5, [pc, #212]	; (8011c8c <net_wifi_string_to_security+0x118>)
  }
  if (strcmp(sec, "WPA2-TKIP") == 0)
 8011bb8:	4935      	ldr	r1, [pc, #212]	; (8011c90 <net_wifi_string_to_security+0x11c>)
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f7ee fb98 	bl	80002f0 <strcmp>
 8011bc0:	b900      	cbnz	r0, 8011bc4 <net_wifi_string_to_security+0x50>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 8011bc2:	4d34      	ldr	r5, [pc, #208]	; (8011c94 <net_wifi_string_to_security+0x120>)
  }
  if (strcmp(sec, "WPA2-Mixed") == 0)
 8011bc4:	4934      	ldr	r1, [pc, #208]	; (8011c98 <net_wifi_string_to_security+0x124>)
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f7ee fb92 	bl	80002f0 <strcmp>
 8011bcc:	b900      	cbnz	r0, 8011bd0 <net_wifi_string_to_security+0x5c>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 8011bce:	4d33      	ldr	r5, [pc, #204]	; (8011c9c <net_wifi_string_to_security+0x128>)
  }
  if (strcmp(sec, "WPA2-DBT") == 0)
 8011bd0:	4933      	ldr	r1, [pc, #204]	; (8011ca0 <net_wifi_string_to_security+0x12c>)
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f7ee fb8c 	bl	80002f0 <strcmp>
 8011bd8:	b900      	cbnz	r0, 8011bdc <net_wifi_string_to_security+0x68>
  {
    ret = NET_WIFI_SM_WPA2_FBT_PSK;
 8011bda:	4d32      	ldr	r5, [pc, #200]	; (8011ca4 <net_wifi_string_to_security+0x130>)
  }
  if (strcmp(sec, "WPA3") == 0)
 8011bdc:	4932      	ldr	r1, [pc, #200]	; (8011ca8 <net_wifi_string_to_security+0x134>)
 8011bde:	4620      	mov	r0, r4
 8011be0:	f7ee fb86 	bl	80002f0 <strcmp>
 8011be4:	b900      	cbnz	r0, 8011be8 <net_wifi_string_to_security+0x74>
  {
    ret = NET_WIFI_SM_WPA3_SAE;
 8011be6:	4d31      	ldr	r5, [pc, #196]	; (8011cac <net_wifi_string_to_security+0x138>)
  }
  if (strcmp(sec, "WPA3-WPA2") == 0)
 8011be8:	4931      	ldr	r1, [pc, #196]	; (8011cb0 <net_wifi_string_to_security+0x13c>)
 8011bea:	4620      	mov	r0, r4
 8011bec:	f7ee fb80 	bl	80002f0 <strcmp>
 8011bf0:	b900      	cbnz	r0, 8011bf4 <net_wifi_string_to_security+0x80>
  {
    ret = NET_WIFI_SM_WPA3_WPA2_PSK;
 8011bf2:	4d30      	ldr	r5, [pc, #192]	; (8011cb4 <net_wifi_string_to_security+0x140>)
  }

  if (strcmp(sec, "WPA-TKIP-Ent") == 0)
 8011bf4:	4930      	ldr	r1, [pc, #192]	; (8011cb8 <net_wifi_string_to_security+0x144>)
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f7ee fb7a 	bl	80002f0 <strcmp>
 8011bfc:	b900      	cbnz	r0, 8011c00 <net_wifi_string_to_security+0x8c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_ENT;
 8011bfe:	4d2f      	ldr	r5, [pc, #188]	; (8011cbc <net_wifi_string_to_security+0x148>)
  }
  if (strcmp(sec, "WPA-AES-Ent") == 0)
 8011c00:	492f      	ldr	r1, [pc, #188]	; (8011cc0 <net_wifi_string_to_security+0x14c>)
 8011c02:	4620      	mov	r0, r4
 8011c04:	f7ee fb74 	bl	80002f0 <strcmp>
 8011c08:	b900      	cbnz	r0, 8011c0c <net_wifi_string_to_security+0x98>
  {
    ret = NET_WIFI_SM_WPA_AES_ENT;
 8011c0a:	4d2e      	ldr	r5, [pc, #184]	; (8011cc4 <net_wifi_string_to_security+0x150>)
  }
  if (strcmp(sec, "WPA2-TKIP-Ent") == 0)
 8011c0c:	492e      	ldr	r1, [pc, #184]	; (8011cc8 <net_wifi_string_to_security+0x154>)
 8011c0e:	4620      	mov	r0, r4
 8011c10:	f7ee fb6e 	bl	80002f0 <strcmp>
 8011c14:	b900      	cbnz	r0, 8011c18 <net_wifi_string_to_security+0xa4>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_ENT;
 8011c16:	4d2d      	ldr	r5, [pc, #180]	; (8011ccc <net_wifi_string_to_security+0x158>)
  }
  if (strcmp(sec, "WPA2-AES-Ent") == 0)
 8011c18:	492d      	ldr	r1, [pc, #180]	; (8011cd0 <net_wifi_string_to_security+0x15c>)
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f7ee fb68 	bl	80002f0 <strcmp>
 8011c20:	b900      	cbnz	r0, 8011c24 <net_wifi_string_to_security+0xb0>
  {
    ret = NET_WIFI_SM_WPA2_AES_ENT;
 8011c22:	4d2c      	ldr	r5, [pc, #176]	; (8011cd4 <net_wifi_string_to_security+0x160>)
  }
  if (strcmp(sec, "WPA2-Mixed-Ent") == 0)
 8011c24:	492c      	ldr	r1, [pc, #176]	; (8011cd8 <net_wifi_string_to_security+0x164>)
 8011c26:	4620      	mov	r0, r4
 8011c28:	f7ee fb62 	bl	80002f0 <strcmp>
 8011c2c:	b900      	cbnz	r0, 8011c30 <net_wifi_string_to_security+0xbc>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_ENT;
 8011c2e:	4d2b      	ldr	r5, [pc, #172]	; (8011cdc <net_wifi_string_to_security+0x168>)
  }
  if (strcmp(sec, "WPA-FBT-Ent") == 0)
 8011c30:	492b      	ldr	r1, [pc, #172]	; (8011ce0 <net_wifi_string_to_security+0x16c>)
 8011c32:	4620      	mov	r0, r4
 8011c34:	f7ee fb5c 	bl	80002f0 <strcmp>
 8011c38:	b900      	cbnz	r0, 8011c3c <net_wifi_string_to_security+0xc8>
  {
    ret = NET_WIFI_SM_WPA2_FBT_ENT;
 8011c3a:	4d2a      	ldr	r5, [pc, #168]	; (8011ce4 <net_wifi_string_to_security+0x170>)
  }
  if (strcmp(sec, "IBS") == 0)
 8011c3c:	492a      	ldr	r1, [pc, #168]	; (8011ce8 <net_wifi_string_to_security+0x174>)
 8011c3e:	4620      	mov	r0, r4
 8011c40:	f7ee fb56 	bl	80002f0 <strcmp>
 8011c44:	b908      	cbnz	r0, 8011c4a <net_wifi_string_to_security+0xd6>
  {
    ret = NET_WIFI_SM_IBSS_OPEN;
 8011c46:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  }
  if (strcmp(sec, "WPS") == 0)
 8011c4a:	4928      	ldr	r1, [pc, #160]	; (8011cec <net_wifi_string_to_security+0x178>)
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f7ee fb4f 	bl	80002f0 <strcmp>
 8011c52:	b908      	cbnz	r0, 8011c58 <net_wifi_string_to_security+0xe4>
  {
    ret = NET_WIFI_SM_WPS_OPEN;
 8011c54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  }
  if (strcmp(sec, "WPS-AES") == 0)
 8011c58:	4925      	ldr	r1, [pc, #148]	; (8011cf0 <net_wifi_string_to_security+0x17c>)
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	f7ee fb48 	bl	80002f0 <strcmp>
 8011c60:	b118      	cbz	r0, 8011c6a <net_wifi_string_to_security+0xf6>
  {
    ret = NET_WIFI_SM_WPS_SECURE;
  }

  return ret;
}
 8011c62:	4628      	mov	r0, r5
 8011c64:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_WIFI_SM_OPEN;
 8011c66:	2500      	movs	r5, #0
 8011c68:	e78d      	b.n	8011b86 <net_wifi_string_to_security+0x12>
    ret = NET_WIFI_SM_WPS_SECURE;
 8011c6a:	4d22      	ldr	r5, [pc, #136]	; (8011cf4 <net_wifi_string_to_security+0x180>)
  return ret;
 8011c6c:	e7f9      	b.n	8011c62 <net_wifi_string_to_security+0xee>
 8011c6e:	bf00      	nop
 8011c70:	08026510 	.word	0x08026510
 8011c74:	0802679c 	.word	0x0802679c
 8011c78:	080267a8 	.word	0x080267a8
 8011c7c:	00200002 	.word	0x00200002
 8011c80:	080267b4 	.word	0x080267b4
 8011c84:	00200006 	.word	0x00200006
 8011c88:	080267c0 	.word	0x080267c0
 8011c8c:	00400004 	.word	0x00400004
 8011c90:	080267cc 	.word	0x080267cc
 8011c94:	00400002 	.word	0x00400002
 8011c98:	0802686c 	.word	0x0802686c
 8011c9c:	00400006 	.word	0x00400006
 8011ca0:	08026878 	.word	0x08026878
 8011ca4:	40400004 	.word	0x40400004
 8011ca8:	080267f0 	.word	0x080267f0
 8011cac:	01000004 	.word	0x01000004
 8011cb0:	080267f8 	.word	0x080267f8
 8011cb4:	01400004 	.word	0x01400004
 8011cb8:	08026804 	.word	0x08026804
 8011cbc:	02200002 	.word	0x02200002
 8011cc0:	08026814 	.word	0x08026814
 8011cc4:	02200004 	.word	0x02200004
 8011cc8:	08026820 	.word	0x08026820
 8011ccc:	02400002 	.word	0x02400002
 8011cd0:	08026830 	.word	0x08026830
 8011cd4:	02400004 	.word	0x02400004
 8011cd8:	08026840 	.word	0x08026840
 8011cdc:	02400006 	.word	0x02400006
 8011ce0:	08026850 	.word	0x08026850
 8011ce4:	42400004 	.word	0x42400004
 8011ce8:	0802685c 	.word	0x0802685c
 8011cec:	08026860 	.word	0x08026860
 8011cf0:	08026864 	.word	0x08026864
 8011cf4:	10000004 	.word	0x10000004

08011cf8 <net_wifi_scan>:
  * @retval return the number of found access point , max value is "number".
   * This function is a synchronous function.
  */

int32_t net_wifi_scan(net_if_handle_t *pnetif_in, net_wifi_scan_mode_t mode, char_t *ssid)
{
 8011cf8:	b570      	push	{r4, r5, r6, lr}
 8011cfa:	460d      	mov	r5, r1
 8011cfc:	4614      	mov	r4, r2
  int32_t ret = NET_OK;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011cfe:	f000 f861 	bl	8011dc4 <netif_check>
  if (pnetif == NULL)
 8011d02:	b150      	cbz	r0, 8011d1a <net_wifi_scan+0x22>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8011d04:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 8011d08:	7811      	ldrb	r1, [r2, #0]
 8011d0a:	b949      	cbnz	r1, 8011d20 <net_wifi_scan+0x28>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    if (pnetif->pdrv->extension.wifi->scan(pnetif, mode, ssid) != NET_OK)
 8011d0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8011d0e:	6816      	ldr	r6, [r2, #0]
 8011d10:	4622      	mov	r2, r4
 8011d12:	4629      	mov	r1, r5
 8011d14:	47b0      	blx	r6
 8011d16:	b930      	cbnz	r0, 8011d26 <net_wifi_scan+0x2e>
      ret = NET_ERROR_GENERIC;
    }
  }

  return ret;
}
 8011d18:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 8011d1a:	f06f 0003 	mvn.w	r0, #3
 8011d1e:	e7fb      	b.n	8011d18 <net_wifi_scan+0x20>
    ret = NET_ERROR_PARAMETER;
 8011d20:	f06f 0003 	mvn.w	r0, #3
 8011d24:	e7f8      	b.n	8011d18 <net_wifi_scan+0x20>
      ret = NET_ERROR_GENERIC;
 8011d26:	f06f 001c 	mvn.w	r0, #28
  return ret;
 8011d2a:	e7f5      	b.n	8011d18 <net_wifi_scan+0x20>

08011d2c <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer , size of the array 'results'
  * @retval return the number of found access point , max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif_in, net_wifi_scan_results_t *results, uint8_t number)
{
 8011d2c:	b570      	push	{r4, r5, r6, lr}
 8011d2e:	460d      	mov	r5, r1
 8011d30:	4614      	mov	r4, r2
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011d32:	f000 f847 	bl	8011dc4 <netif_check>
  if (pnetif == NULL)
 8011d36:	b148      	cbz	r0, 8011d4c <net_wifi_get_scan_results+0x20>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8011d38:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 8011d3c:	7811      	ldrb	r1, [r2, #0]
 8011d3e:	b941      	cbnz	r1, 8011d52 <net_wifi_get_scan_results+0x26>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    ret = pnetif->pdrv->extension.wifi->get_scan_results(pnetif, results, number);
 8011d40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8011d42:	6856      	ldr	r6, [r2, #4]
 8011d44:	4622      	mov	r2, r4
 8011d46:	4629      	mov	r1, r5
 8011d48:	47b0      	blx	r6
  }
  return ret;
}
 8011d4a:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 8011d4c:	f06f 0003 	mvn.w	r0, #3
 8011d50:	e7fb      	b.n	8011d4a <net_wifi_get_scan_results+0x1e>
    ret = NET_ERROR_PARAMETER;
 8011d52:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8011d56:	e7f8      	b.n	8011d4a <net_wifi_get_scan_results+0x1e>

08011d58 <net_wifi_set_credentials>:
  * @param  credentials a pointer to a const allocated structure which contain credentials values (ssid , passwd)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
  pnetif->pdrv->extension.wifi->credentials = credentials;
 8011d58:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d5e:	6159      	str	r1, [r3, #20]
  return NET_OK;
}
 8011d60:	2000      	movs	r0, #0
 8011d62:	4770      	bx	lr

08011d64 <netif_add_to_list>:
#endif /* IO */

static void netif_add_to_list(net_if_handle_t *pnetif)
{
  LOCK_NETIF_LIST();
  if (net_if_list == NULL)
 8011d64:	4b05      	ldr	r3, [pc, #20]	; (8011d7c <netif_add_to_list+0x18>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	b12b      	cbz	r3, 8011d76 <netif_add_to_list+0x12>
  else
  {
    /*add it to end of the list*/
    net_if_handle_t *plastnetif;
    plastnetif = net_if_list;
    while (plastnetif->next != NULL)
 8011d6a:	461a      	mov	r2, r3
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d1fb      	bne.n	8011d6a <netif_add_to_list+0x6>
    {
      plastnetif = plastnetif->next;
    }
    plastnetif->next = pnetif;
 8011d72:	6010      	str	r0, [r2, #0]
  }
  UNLOCK_NETIF_LIST();
}
 8011d74:	4770      	bx	lr
    net_if_list = pnetif;
 8011d76:	4b01      	ldr	r3, [pc, #4]	; (8011d7c <netif_add_to_list+0x18>)
 8011d78:	6018      	str	r0, [r3, #0]
 8011d7a:	4770      	bx	lr
 8011d7c:	2400fe34 	.word	0x2400fe34

08011d80 <net_if_find>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 8011d80:	b510      	push	{r4, lr}
 8011d82:	b082      	sub	sp, #8
  net_if_handle_t *ptr;
  net_ip_addr_t ipaddr;
  net_ip_addr_t ipaddr_zero;

  NET_ZERO(ipaddr_zero);
 8011d84:	2300      	movs	r3, #0
 8011d86:	9300      	str	r3, [sp, #0]
  NET_ZERO(ipaddr);
 8011d88:	9301      	str	r3, [sp, #4]
  if (addr != NULL)
 8011d8a:	b110      	cbz	r0, 8011d92 <net_if_find+0x12>
  {
    ipaddr = net_get_ip_addr(addr);
 8011d8c:	f7ff fe57 	bl	8011a3e <net_get_ip_addr>
 8011d90:	9001      	str	r0, [sp, #4]

  }
  LOCK_NETIF_LIST();

  ptr = net_if_list;
 8011d92:	4b0b      	ldr	r3, [pc, #44]	; (8011dc0 <net_if_find+0x40>)
 8011d94:	681c      	ldr	r4, [r3, #0]

  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 8011d96:	2204      	movs	r2, #4
 8011d98:	4669      	mov	r1, sp
 8011d9a:	eb0d 0002 	add.w	r0, sp, r2
 8011d9e:	f011 fbf1 	bl	8023584 <memcmp>
 8011da2:	b148      	cbz	r0, 8011db8 <net_if_find+0x38>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 8011da4:	2204      	movs	r2, #4
 8011da6:	eb0d 0102 	add.w	r1, sp, r2
 8011daa:	18a0      	adds	r0, r4, r2
 8011dac:	f011 fbea 	bl	8023584 <memcmp>
 8011db0:	b110      	cbz	r0, 8011db8 <net_if_find+0x38>
      {
        break;
      }
      ptr = ptr->next;
 8011db2:	6824      	ldr	r4, [r4, #0]
    } while (ptr != NULL);
 8011db4:	2c00      	cmp	r4, #0
 8011db6:	d1f5      	bne.n	8011da4 <net_if_find+0x24>
  }
  UNLOCK_NETIF_LIST();
  return ptr;
}
 8011db8:	4620      	mov	r0, r4
 8011dba:	b002      	add	sp, #8
 8011dbc:	bd10      	pop	{r4, pc}
 8011dbe:	bf00      	nop
 8011dc0:	2400fe34 	.word	0x2400fe34

08011dc4 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif_in)
{
 8011dc4:	b508      	push	{r3, lr}
  net_if_handle_t *pnetif = pnetif_in;
  if (pnetif == NULL)
 8011dc6:	b100      	cbz	r0, 8011dca <netif_check+0x6>
    {
      NET_DBG_ERROR("No network interface defined");
    }
  }
  return pnetif;
}
 8011dc8:	bd08      	pop	{r3, pc}
    pnetif = net_if_find(NULL);
 8011dca:	2000      	movs	r0, #0
 8011dcc:	f7ff ffd8 	bl	8011d80 <net_if_find>
    if (pnetif == NULL)
 8011dd0:	e7fa      	b.n	8011dc8 <netif_check+0x4>

08011dd2 <net_if_wait_state>:
  * @retval 0 in case of success, an error code otherwise
  */
extern uint32_t HAL_GetTick(void);

int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 8011dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dd4:	4604      	mov	r4, r0
 8011dd6:	460d      	mov	r5, r1
 8011dd8:	4617      	mov	r7, r2
  int32_t  ret = NET_OK;
  __IO net_state_t      *p;
  p = &pnetif->state;

  uint32_t start_time = HAL_GetTick();
 8011dda:	f7f8 fc2d 	bl	800a638 <HAL_GetTick>
 8011dde:	4606      	mov	r6, r0
  while (*p != state)
 8011de0:	e005      	b.n	8011dee <net_if_wait_state+0x1c>
    if (HAL_GetTick() >= (start_time + timeout))
    {
      ret = NET_TIMEOUT;
      break;
    }
    WAIT_STATE_CHANGE(timeout);
 8011de2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011de6:	695b      	ldr	r3, [r3, #20]
 8011de8:	210a      	movs	r1, #10
 8011dea:	4620      	mov	r0, r4
 8011dec:	4798      	blx	r3
  while (*p != state)
 8011dee:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	42ab      	cmp	r3, r5
 8011df6:	d007      	beq.n	8011e08 <net_if_wait_state+0x36>
    if (HAL_GetTick() >= (start_time + timeout))
 8011df8:	f7f8 fc1e 	bl	800a638 <HAL_GetTick>
 8011dfc:	19f3      	adds	r3, r6, r7
 8011dfe:	4298      	cmp	r0, r3
 8011e00:	d3ef      	bcc.n	8011de2 <net_if_wait_state+0x10>
      ret = NET_TIMEOUT;
 8011e02:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return ret;
 8011e06:	e000      	b.n	8011e0a <net_if_wait_state+0x38>
  int32_t  ret = NET_OK;
 8011e08:	2000      	movs	r0, #0

}
 8011e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e0c <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void  *event_data)
{
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8011e0c:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8011e10:	b128      	cbz	r0, 8011e1e <net_if_notify+0x12>
{
 8011e12:	b510      	push	{r4, lr}
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8011e14:	6804      	ldr	r4, [r0, #0]
 8011e16:	b10c      	cbz	r4, 8011e1c <net_if_notify+0x10>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 8011e18:	6840      	ldr	r0, [r0, #4]
 8011e1a:	47a0      	blx	r4
  }
}
 8011e1c:	bd10      	pop	{r4, pc}
 8011e1e:	4770      	bx	lr

08011e20 <net_if_init>:
    net_init_locks();
    net_initialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (pnetif != NULL)
 8011e20:	b168      	cbz	r0, 8011e3e <net_if_init+0x1e>
{
 8011e22:	b538      	push	{r3, r4, r5, lr}
 8011e24:	460d      	mov	r5, r1
 8011e26:	4604      	mov	r4, r0
  {
    pnetif->event_handler = event_handler;
 8011e28:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    pnetif->state = NET_STATE_INITIALIZED;
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	f880 30ea 	strb.w	r3, [r0, #234]	; 0xea
    netif_add_to_list(pnetif);
 8011e32:	f7ff ff97 	bl	8011d64 <netif_add_to_list>
    ret = (*driver_init)(pnetif);
 8011e36:	4620      	mov	r0, r4
 8011e38:	47a8      	blx	r5
    if (NET_OK != ret)
 8011e3a:	b918      	cbnz	r0, 8011e44 <net_if_init+0x24>
  {
    NET_DBG_ERROR("Invalid interface.");
    ret = NET_ERROR_PARAMETER;
  }
  return ret;
}
 8011e3c:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 8011e3e:	f06f 0003 	mvn.w	r0, #3
}
 8011e42:	4770      	bx	lr
      ret = NET_ERROR_INTERFACE_FAILURE;
 8011e44:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8011e48:	e7f8      	b.n	8011e3c <net_if_init+0x1c>

08011e4a <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 8011e4a:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 8011e4c:	2101      	movs	r1, #1
 8011e4e:	f000 f8ab 	bl	8011fa8 <net_state_manage_event>
}
 8011e52:	bd08      	pop	{r3, pc}

08011e54 <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 8011e54:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 8011e56:	2102      	movs	r1, #2
 8011e58:	f000 f8a6 	bl	8011fa8 <net_state_manage_event>
}
 8011e5c:	bd08      	pop	{r3, pc}

08011e5e <net_if_disconnect>:
  * @brief  Disconnect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_disconnect(net_if_handle_t *pnetif)
{
 8011e5e:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_DISCONNECT);
 8011e60:	2103      	movs	r1, #3
 8011e62:	f000 f8a1 	bl	8011fa8 <net_state_manage_event>
}
 8011e66:	bd08      	pop	{r3, pc}

08011e68 <set_state>:
  "NET_STATE_CONNECTION_LOST",
};
#endif /* DEBUGSTATE */

static void   set_state(net_if_handle_t *pnetif, net_state_t state)
{
 8011e68:	b508      	push	{r3, lr}
 8011e6a:	460a      	mov	r2, r1
  pnetif->state = state;
 8011e6c:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 8011e70:	2300      	movs	r3, #0
 8011e72:	4619      	mov	r1, r3
 8011e74:	f7ff ffca 	bl	8011e0c <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 8011e78:	bd08      	pop	{r3, pc}

08011e7a <net_state_initialized>:


static  int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 8011e7a:	b538      	push	{r3, r4, r5, lr}
 8011e7c:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8011e7e:	2901      	cmp	r1, #1
 8011e80:	d004      	beq.n	8011e8c <net_state_initialized+0x12>
 8011e82:	2905      	cmp	r1, #5
 8011e84:	d010      	beq.n	8011ea8 <net_state_initialized+0x2e>
 8011e86:	2500      	movs	r5, #0

    default:
      break;
  }
  return ret;
}
 8011e88:	4628      	mov	r0, r5
 8011e8a:	bd38      	pop	{r3, r4, r5, pc}
      set_state(pnetif, NET_STATE_STARTING);
 8011e8c:	2102      	movs	r1, #2
 8011e8e:	f7ff ffeb 	bl	8011e68 <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 8011e92:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011e96:	68db      	ldr	r3, [r3, #12]
 8011e98:	4620      	mov	r0, r4
 8011e9a:	4798      	blx	r3
      if (NET_OK != ret)
 8011e9c:	4605      	mov	r5, r0
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	d0f2      	beq.n	8011e88 <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011ea2:	f06f 0510 	mvn.w	r5, #16
 8011ea6:	e7ef      	b.n	8011e88 <net_state_initialized+0xe>
      ret = pnetif->pdrv->if_deinit(pnetif);
 8011ea8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011eac:	689b      	ldr	r3, [r3, #8]
 8011eae:	4798      	blx	r3
 8011eb0:	4605      	mov	r5, r0
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	f7ff ffd7 	bl	8011e68 <set_state>
      if (NET_OK != ret)
 8011eba:	2d00      	cmp	r5, #0
 8011ebc:	d0e4      	beq.n	8011e88 <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011ebe:	f06f 0510 	mvn.w	r5, #16
  return ret;
 8011ec2:	e7e1      	b.n	8011e88 <net_state_initialized+0xe>

08011ec4 <net_state_starting>:

static  int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t  event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8011ec4:	2907      	cmp	r1, #7
 8011ec6:	d001      	beq.n	8011ecc <net_state_starting+0x8>

    default:
      break;
  }
  return ret;
}
 8011ec8:	2000      	movs	r0, #0
 8011eca:	4770      	bx	lr
{
 8011ecc:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 8011ece:	2103      	movs	r1, #3
 8011ed0:	f7ff ffca 	bl	8011e68 <set_state>
}
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	bd08      	pop	{r3, pc}

08011ed8 <net_state_ready>:

static  int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 8011ed8:	b510      	push	{r4, lr}
 8011eda:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8011edc:	2902      	cmp	r1, #2
 8011ede:	d003      	beq.n	8011ee8 <net_state_ready+0x10>
 8011ee0:	2904      	cmp	r1, #4
 8011ee2:	d00e      	beq.n	8011f02 <net_state_ready+0x2a>
 8011ee4:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 8011ee6:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_CONNECTING);
 8011ee8:	2104      	movs	r1, #4
 8011eea:	f7ff ffbd 	bl	8011e68 <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 8011eee:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011ef2:	699b      	ldr	r3, [r3, #24]
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	4798      	blx	r3
      if (NET_OK != ret)
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	d0f4      	beq.n	8011ee6 <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011efc:	f06f 0010 	mvn.w	r0, #16
 8011f00:	e7f1      	b.n	8011ee6 <net_state_ready+0xe>
      set_state(pnetif, NET_STATE_STOPPING);
 8011f02:	2106      	movs	r1, #6
 8011f04:	f7ff ffb0 	bl	8011e68 <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 8011f08:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011f0c:	691b      	ldr	r3, [r3, #16]
 8011f0e:	4620      	mov	r0, r4
 8011f10:	4798      	blx	r3
      if (NET_OK != ret)
 8011f12:	2800      	cmp	r0, #0
 8011f14:	d0e7      	beq.n	8011ee6 <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011f16:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8011f1a:	e7e4      	b.n	8011ee6 <net_state_ready+0xe>

08011f1c <net_state_connecting>:

static  int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t  event)
{
 8011f1c:	b508      	push	{r3, lr}
  int32_t       ret = NET_OK;
  switch (event)
 8011f1e:	2903      	cmp	r1, #3
 8011f20:	d006      	beq.n	8011f30 <net_state_connecting+0x14>
 8011f22:	290a      	cmp	r1, #10
 8011f24:	d102      	bne.n	8011f2c <net_state_connecting+0x10>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 8011f26:	2105      	movs	r1, #5
 8011f28:	f7ff ff9e 	bl	8011e68 <set_state>

    default:
      break;
  }
  return ret;
}
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	bd08      	pop	{r3, pc}
      set_state(pnetif, NET_STATE_READY);
 8011f30:	2103      	movs	r1, #3
 8011f32:	f7ff ff99 	bl	8011e68 <set_state>
      break;
 8011f36:	e7f9      	b.n	8011f2c <net_state_connecting+0x10>

08011f38 <net_state_connected>:

static  int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 8011f38:	b510      	push	{r4, lr}
 8011f3a:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8011f3c:	2903      	cmp	r1, #3
 8011f3e:	d003      	beq.n	8011f48 <net_state_connected+0x10>
 8011f40:	2909      	cmp	r1, #9
 8011f42:	d00e      	beq.n	8011f62 <net_state_connected+0x2a>
 8011f44:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 8011f46:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_DISCONNECTING);
 8011f48:	2107      	movs	r1, #7
 8011f4a:	f7ff ff8d 	bl	8011e68 <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 8011f4e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011f52:	69db      	ldr	r3, [r3, #28]
 8011f54:	4620      	mov	r0, r4
 8011f56:	4798      	blx	r3
      if (NET_OK != ret)
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d0f4      	beq.n	8011f46 <net_state_connected+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011f5c:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8011f60:	e7f1      	b.n	8011f46 <net_state_connected+0xe>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 8011f62:	2108      	movs	r1, #8
 8011f64:	f7ff ff80 	bl	8011e68 <set_state>
  int32_t       ret = NET_OK;
 8011f68:	2000      	movs	r0, #0
      break;
 8011f6a:	e7ec      	b.n	8011f46 <net_state_connected+0xe>

08011f6c <net_state_disconnecting>:

static  int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8011f6c:	2907      	cmp	r1, #7
 8011f6e:	d001      	beq.n	8011f74 <net_state_disconnecting+0x8>

    default:
      break;
  }
  return ret;
}
 8011f70:	2000      	movs	r0, #0
 8011f72:	4770      	bx	lr
{
 8011f74:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 8011f76:	2103      	movs	r1, #3
 8011f78:	f7ff ff76 	bl	8011e68 <set_state>
}
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	bd08      	pop	{r3, pc}

08011f80 <net_state_connection_lost>:
}

static  int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8011f80:	2908      	cmp	r1, #8
 8011f82:	d001      	beq.n	8011f88 <net_state_connection_lost+0x8>

    default:
      break;
  }
  return ret;
}
 8011f84:	2000      	movs	r0, #0
 8011f86:	4770      	bx	lr
{
 8011f88:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_CONNECTED);
 8011f8a:	2105      	movs	r1, #5
 8011f8c:	f7ff ff6c 	bl	8011e68 <set_state>
}
 8011f90:	2000      	movs	r0, #0
 8011f92:	bd08      	pop	{r3, pc}

08011f94 <net_state_stopping>:
  switch (event)
 8011f94:	2906      	cmp	r1, #6
 8011f96:	d001      	beq.n	8011f9c <net_state_stopping+0x8>
}
 8011f98:	2000      	movs	r0, #0
 8011f9a:	4770      	bx	lr
{
 8011f9c:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_INITIALIZED);
 8011f9e:	2101      	movs	r1, #1
 8011fa0:	f7ff ff62 	bl	8011e68 <set_state>
}
 8011fa4:	2000      	movs	r0, #0
 8011fa6:	bd08      	pop	{r3, pc}

08011fa8 <net_state_manage_event>:




int32_t net_state_manage_event(net_if_handle_t *pnetif_in, net_state_event_t event)
{
 8011fa8:	b510      	push	{r4, lr}
 8011faa:	460c      	mov	r4, r1
  int32_t       ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011fac:	f7ff ff0a 	bl	8011dc4 <netif_check>
  if (pnetif == NULL)
 8011fb0:	b350      	cbz	r0, 8012008 <net_state_manage_event+0x60>
  else
  {
#ifdef DEBUGSTATE
    printf("In state %s , received event %s\n", statestr[pnetif->state], eventstr[event]);
#endif /* DEBUGSTATE */
    switch (pnetif->state)
 8011fb2:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 8011fb6:	3b01      	subs	r3, #1
 8011fb8:	2b07      	cmp	r3, #7
 8011fba:	d828      	bhi.n	801200e <net_state_manage_event+0x66>
 8011fbc:	e8df f003 	tbb	[pc, r3]
 8011fc0:	100c0804 	.word	0x100c0804
 8011fc4:	1c182014 	.word	0x1c182014
    {
      case  NET_STATE_INITIALIZED:
        ret = net_state_initialized(pnetif, event);
 8011fc8:	4621      	mov	r1, r4
 8011fca:	f7ff ff56 	bl	8011e7a <net_state_initialized>
        ret = NET_ERROR_INVALID_STATE;
        break;
    }
  }
  return ret;
}
 8011fce:	bd10      	pop	{r4, pc}
        ret = net_state_starting(pnetif, event);
 8011fd0:	4621      	mov	r1, r4
 8011fd2:	f7ff ff77 	bl	8011ec4 <net_state_starting>
        break;
 8011fd6:	e7fa      	b.n	8011fce <net_state_manage_event+0x26>
        ret = net_state_ready(pnetif, event);
 8011fd8:	4621      	mov	r1, r4
 8011fda:	f7ff ff7d 	bl	8011ed8 <net_state_ready>
        break;
 8011fde:	e7f6      	b.n	8011fce <net_state_manage_event+0x26>
        ret = net_state_connecting(pnetif, event);
 8011fe0:	4621      	mov	r1, r4
 8011fe2:	f7ff ff9b 	bl	8011f1c <net_state_connecting>
        break;
 8011fe6:	e7f2      	b.n	8011fce <net_state_manage_event+0x26>
        ret = net_state_connected(pnetif, event);
 8011fe8:	4621      	mov	r1, r4
 8011fea:	f7ff ffa5 	bl	8011f38 <net_state_connected>
        break;
 8011fee:	e7ee      	b.n	8011fce <net_state_manage_event+0x26>
        ret = net_state_disconnecting(pnetif, event);
 8011ff0:	4621      	mov	r1, r4
 8011ff2:	f7ff ffbb 	bl	8011f6c <net_state_disconnecting>
        break;
 8011ff6:	e7ea      	b.n	8011fce <net_state_manage_event+0x26>
        ret = net_state_connection_lost(pnetif, event);
 8011ff8:	4621      	mov	r1, r4
 8011ffa:	f7ff ffc1 	bl	8011f80 <net_state_connection_lost>
        break;
 8011ffe:	e7e6      	b.n	8011fce <net_state_manage_event+0x26>
        ret = net_state_stopping(pnetif, event);
 8012000:	4621      	mov	r1, r4
 8012002:	f7ff ffc7 	bl	8011f94 <net_state_stopping>
        break;
 8012006:	e7e2      	b.n	8011fce <net_state_manage_event+0x26>
    ret = NET_ERROR_PARAMETER;
 8012008:	f06f 0003 	mvn.w	r0, #3
 801200c:	e7df      	b.n	8011fce <net_state_manage_event+0x26>
    switch (pnetif->state)
 801200e:	f06f 001b 	mvn.w	r0, #27
  return ret;
 8012012:	e7dc      	b.n	8011fce <net_state_manage_event+0x26>

08012014 <castcontext>:
{
  /*cstat -MISRAC2012-Rule-11.5 */
  return (ES_WIFIObject_t *)context;
  /*cstat +MISRAC2012-Rule-11.5 */

}
 8012014:	4770      	bx	lr

08012016 <cast2sockaddr_in>:
{
  /*cstat -MISRAC2012-Rule-11.3 -MISRAC2012-Rule-11.8 */
  return (sockaddr_in_t *) addr;
  /*cstat +MISRAC2012-Rule-11.3 +MISRAC2012-Rule-11.8 */

}
 8012016:	4770      	bx	lr

08012018 <es_wifi_socket>:
static int32_t es_wifi_socket(int32_t domain, int32_t type, int32_t protocol_in)
{
  int32_t ret = NET_OK;
  int32_t protocol = protocol_in;

  if (domain != NET_AF_INET)
 8012018:	2802      	cmp	r0, #2
 801201a:	d13b      	bne.n	8012094 <es_wifi_socket+0x7c>
    ret = NET_ERROR_UNSUPPORTED;
  }
  else
  {
    /* currently only SOCK_DGRAM and SOCK_STREAM are supported */
    if ((type != (int32_t) NET_SOCK_STREAM) && (type != (int32_t) NET_SOCK_DGRAM))
 801201c:	1e4b      	subs	r3, r1, #1
 801201e:	2b01      	cmp	r3, #1
 8012020:	d83b      	bhi.n	801209a <es_wifi_socket+0x82>
      ret = NET_ERROR_UNSUPPORTED;
    }
    else
    {
      /* Only support PROT_IP/TCP/UDP/IPV4 are supported */
      if ((protocol != NET_IPPROTO_TCP) && (protocol != NET_IPPROTO_UDP))
 8012022:	2a06      	cmp	r2, #6
 8012024:	bf18      	it	ne
 8012026:	2a11      	cmpne	r2, #17
 8012028:	d004      	beq.n	8012034 <es_wifi_socket+0x1c>
      {
        if (type == (int32_t) NET_SOCK_STREAM)
 801202a:	2901      	cmp	r1, #1
 801202c:	d030      	beq.n	8012090 <es_wifi_socket+0x78>
        {
          protocol = NET_IPPROTO_TCP;
        }
        /*cstat -MISRAC2012-Rule-14.3_a */
        else if (type == (int32_t) NET_SOCK_DGRAM)
 801202e:	2902      	cmp	r1, #2
 8012030:	d113      	bne.n	801205a <es_wifi_socket+0x42>
          /*cstat +MISRAC2012-Rule-14.3_a */
        {
          protocol = NET_IPPROTO_UDP;
 8012032:	2211      	movs	r2, #17
 8012034:	2000      	movs	r0, #0

  if (ret == NET_OK)
  {
    ret = NET_ERROR_INVALID_SOCKET;

    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8012036:	2803      	cmp	r0, #3
 8012038:	dc32      	bgt.n	80120a0 <es_wifi_socket+0x88>
{
 801203a:	b410      	push	{r4}
    {
      if (WifiChannel[i].status == WIFI_FREE_SOCKET)
 801203c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012040:	4c19      	ldr	r4, [pc, #100]	; (80120a8 <es_wifi_socket+0x90>)
 8012042:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8012046:	785b      	ldrb	r3, [r3, #1]
 8012048:	b153      	cbz	r3, 8012060 <es_wifi_socket+0x48>
    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 801204a:	3001      	adds	r0, #1
 801204c:	2803      	cmp	r0, #3
 801204e:	ddf5      	ble.n	801203c <es_wifi_socket+0x24>
    ret = NET_ERROR_INVALID_SOCKET;
 8012050:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return ret;
}
 8012054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012058:	4770      	bx	lr
          ret = NET_ERROR_UNSUPPORTED;
 801205a:	f06f 0002 	mvn.w	r0, #2
 801205e:	4770      	bx	lr
        WifiChannel[i].status = WIFI_ALLOCATED_SOCKET;
 8012060:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012064:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8012068:	2401      	movs	r4, #1
 801206a:	705c      	strb	r4, [r3, #1]
        if (type == (int32_t) NET_SOCK_DGRAM)
 801206c:	2902      	cmp	r1, #2
 801206e:	d007      	beq.n	8012080 <es_wifi_socket+0x68>
        WifiChannel[i].protocol        = (uint8_t) protocol;
 8012070:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012074:	4c0c      	ldr	r4, [pc, #48]	; (80120a8 <es_wifi_socket+0x90>)
 8012076:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 801207a:	709a      	strb	r2, [r3, #2]
        WifiChannel[i].type            = (uint8_t) type;
 801207c:	70d9      	strb	r1, [r3, #3]
        break;
 801207e:	e7e9      	b.n	8012054 <es_wifi_socket+0x3c>
          WifiChannel[i].status |= WIFI_SEND_OK | WIFI_RECV_OK;
 8012080:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012084:	4c08      	ldr	r4, [pc, #32]	; (80120a8 <es_wifi_socket+0x90>)
 8012086:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 801208a:	240d      	movs	r4, #13
 801208c:	705c      	strb	r4, [r3, #1]
 801208e:	e7ef      	b.n	8012070 <es_wifi_socket+0x58>
          protocol = NET_IPPROTO_TCP;
 8012090:	2206      	movs	r2, #6
 8012092:	e7cf      	b.n	8012034 <es_wifi_socket+0x1c>
    ret = NET_ERROR_UNSUPPORTED;
 8012094:	f06f 0002 	mvn.w	r0, #2
 8012098:	4770      	bx	lr
      ret = NET_ERROR_UNSUPPORTED;
 801209a:	f06f 0002 	mvn.w	r0, #2
  return ret;
 801209e:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 80120a0:	f06f 0005 	mvn.w	r0, #5
}
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop
 80120a8:	2400fe38 	.word	0x2400fe38

080120ac <es_wifi_bind>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
static int32_t es_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 80120ac:	b570      	push	{r4, r5, r6, lr}
 80120ae:	4604      	mov	r4, r0
  int32_t ret;
  sockaddr_in_t *source;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80120b0:	2803      	cmp	r0, #3
 80120b2:	d826      	bhi.n	8012102 <es_wifi_bind+0x56>
 80120b4:	4608      	mov	r0, r1
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    /* STREAM sockets cannot be bound after connection. */
    if ((WifiChannel [sock].status == WIFI_ALLOCATED_SOCKET)
 80120b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80120ba:	4d18      	ldr	r5, [pc, #96]	; (801211c <es_wifi_bind+0x70>)
 80120bc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80120c0:	785d      	ldrb	r5, [r3, #1]
 80120c2:	2d01      	cmp	r5, #1
 80120c4:	d00a      	beq.n	80120dc <es_wifi_bind+0x30>
        || (((WifiChannel [sock].status & WIFI_ALLOCATED_SOCKET) != 0U)
 80120c6:	f015 0f01 	tst.w	r5, #1
 80120ca:	d01d      	beq.n	8012108 <es_wifi_bind+0x5c>
            && ((uint8_t) WifiChannel [sock].type == (uint8_t) NET_SOCK_DGRAM)))
 80120cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80120d0:	4e12      	ldr	r6, [pc, #72]	; (801211c <es_wifi_bind+0x70>)
 80120d2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80120d6:	78db      	ldrb	r3, [r3, #3]
 80120d8:	2b02      	cmp	r3, #2
 80120da:	d118      	bne.n	801210e <es_wifi_bind+0x62>
    {
      if (addrlen == sizeof(sockaddr_in_t))
 80120dc:	2a10      	cmp	r2, #16
 80120de:	d119      	bne.n	8012114 <es_wifi_bind+0x68>
      {
        source = cast2sockaddr_in(addr);
 80120e0:	f7ff ff99 	bl	8012016 <cast2sockaddr_in>
        WifiChannel [sock].localport = NET_NTOHS(source->sin_port);
 80120e4:	8841      	ldrh	r1, [r0, #2]
 80120e6:	ba49      	rev16	r1, r1
 80120e8:	4b0c      	ldr	r3, [pc, #48]	; (801211c <es_wifi_bind+0x70>)
 80120ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80120ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80120f2:	8091      	strh	r1, [r2, #4]
        WifiChannel [sock].localaddress = source->sin_addr.s_addr;
 80120f4:	6841      	ldr	r1, [r0, #4]
 80120f6:	6091      	str	r1, [r2, #8]
        WifiChannel [sock].status |= WIFI_BIND_SOCKET;
 80120f8:	f045 0502 	orr.w	r5, r5, #2
 80120fc:	7055      	strb	r5, [r2, #1]
        ret = NET_OK;
 80120fe:	2000      	movs	r0, #0
    {
      ret = NET_ERROR_INVALID_SOCKET;
    }
  }
  return ret;
}
 8012100:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 8012102:	f06f 0005 	mvn.w	r0, #5
 8012106:	e7fb      	b.n	8012100 <es_wifi_bind+0x54>
      ret = NET_ERROR_INVALID_SOCKET;
 8012108:	f06f 0005 	mvn.w	r0, #5
 801210c:	e7f8      	b.n	8012100 <es_wifi_bind+0x54>
 801210e:	f06f 0005 	mvn.w	r0, #5
 8012112:	e7f5      	b.n	8012100 <es_wifi_bind+0x54>
        ret = NET_ERROR_PARAMETER;
 8012114:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8012118:	e7f2      	b.n	8012100 <es_wifi_bind+0x54>
 801211a:	bf00      	nop
 801211c:	2400fe38 	.word	0x2400fe38

08012120 <es_wifi_shutdown>:
  * @retval socket status
  */
static int32_t es_wifi_shutdown(int32_t sock, int32_t mode)
{
  int32_t       ret;
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012120:	2803      	cmp	r0, #3
 8012122:	d82f      	bhi.n	8012184 <es_wifi_shutdown+0x64>
  {
    ret =  NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    if ((WifiChannel[sock].status &  WIFI_CONNECTED_SOCKET) != 0U)
 8012124:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012128:	4a19      	ldr	r2, [pc, #100]	; (8012190 <es_wifi_shutdown+0x70>)
 801212a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801212e:	785b      	ldrb	r3, [r3, #1]
 8012130:	f013 0f10 	tst.w	r3, #16
 8012134:	d029      	beq.n	801218a <es_wifi_shutdown+0x6a>
{
 8012136:	b410      	push	{r4}
    {
      if (mode == NET_SHUTDOWN_R)
 8012138:	b939      	cbnz	r1, 801214a <es_wifi_shutdown+0x2a>
      {
        WifiChannel[sock].status &=  ~WIFI_RECV_OK;
 801213a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801213e:	4c14      	ldr	r4, [pc, #80]	; (8012190 <es_wifi_shutdown+0x70>)
 8012140:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8012144:	f023 0308 	bic.w	r3, r3, #8
 8012148:	7053      	strb	r3, [r2, #1]
      }
      if (mode == NET_SHUTDOWN_W)
 801214a:	2901      	cmp	r1, #1
 801214c:	d005      	beq.n	801215a <es_wifi_shutdown+0x3a>
      {
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
      }
      if (mode == NET_SHUTDOWN_RW)
 801214e:	2902      	cmp	r1, #2
 8012150:	d00d      	beq.n	801216e <es_wifi_shutdown+0x4e>
      {
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
      }
    }
    ret = NET_OK;
 8012152:	2000      	movs	r0, #0
  }
  return ret;
}
 8012154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012158:	4770      	bx	lr
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
 801215a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801215e:	4a0c      	ldr	r2, [pc, #48]	; (8012190 <es_wifi_shutdown+0x70>)
 8012160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012164:	785a      	ldrb	r2, [r3, #1]
 8012166:	f022 0204 	bic.w	r2, r2, #4
 801216a:	705a      	strb	r2, [r3, #1]
 801216c:	e7ef      	b.n	801214e <es_wifi_shutdown+0x2e>
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
 801216e:	4b08      	ldr	r3, [pc, #32]	; (8012190 <es_wifi_shutdown+0x70>)
 8012170:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012174:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012178:	7853      	ldrb	r3, [r2, #1]
 801217a:	f023 030c 	bic.w	r3, r3, #12
 801217e:	7053      	strb	r3, [r2, #1]
    ret = NET_OK;
 8012180:	2000      	movs	r0, #0
 8012182:	e7e7      	b.n	8012154 <es_wifi_shutdown+0x34>
    ret =  NET_ERROR_INVALID_SOCKET;
 8012184:	f06f 0005 	mvn.w	r0, #5
 8012188:	4770      	bx	lr
    ret = NET_OK;
 801218a:	2000      	movs	r0, #0
}
 801218c:	4770      	bx	lr
 801218e:	bf00      	nop
 8012190:	2400fe38 	.word	0x2400fe38

08012194 <conv_to_net_security>:


static uint32_t conv_to_net_security(ES_WIFI_SecurityType_t     sec)
{
  uint32_t ret;
  switch (sec)
 8012194:	2805      	cmp	r0, #5
 8012196:	d80e      	bhi.n	80121b6 <conv_to_net_security+0x22>
 8012198:	e8df f000 	tbb	[pc, r0]
 801219c:	07051003 	.word	0x07051003
 80121a0:	0b09      	.short	0x0b09
 80121a2:	2000      	movs	r0, #0
 80121a4:	4770      	bx	lr
      break;
    case ES_WIFI_SEC_WEP:
      ret = NET_WIFI_SM_WEP_PSK;
      break;
    case ES_WIFI_SEC_WPA:
      ret = NET_WIFI_SM_WPA_MIXED_PSK;
 80121a6:	4806      	ldr	r0, [pc, #24]	; (80121c0 <conv_to_net_security+0x2c>)
      break;
 80121a8:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 80121aa:	4806      	ldr	r0, [pc, #24]	; (80121c4 <conv_to_net_security+0x30>)
      break;
 80121ac:	4770      	bx	lr
    case ES_WIFI_SEC_WPA_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 80121ae:	4805      	ldr	r0, [pc, #20]	; (80121c4 <conv_to_net_security+0x30>)
      break;
 80121b0:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2_TKIP:
      ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 80121b2:	4805      	ldr	r0, [pc, #20]	; (80121c8 <conv_to_net_security+0x34>)
      break;
 80121b4:	4770      	bx	lr
    default :
      ret = NET_WIFI_SM_UNKNOWN;
 80121b6:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 80121ba:	4770      	bx	lr
      ret = NET_WIFI_SM_WEP_PSK;
 80121bc:	2001      	movs	r0, #1

  }
  return ret;
}
 80121be:	4770      	bx	lr
 80121c0:	00200006 	.word	0x00200006
 80121c4:	00400006 	.word	0x00400006
 80121c8:	00400002 	.word	0x00400002

080121cc <es_wifi_setsockopt>:
  bool          *optbool = (bool *)optvalue;
  /*cstat +MISRAC2012-Rule-11.8 +MISRAC2012-Rule-11.5  */

  (void) level;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80121cc:	2803      	cmp	r0, #3
 80121ce:	d83e      	bhi.n	801224e <es_wifi_setsockopt+0x82>
  {
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    switch (optname)
 80121d0:	f241 0105 	movw	r1, #4101	; 0x1005
 80121d4:	428a      	cmp	r2, r1
 80121d6:	d013      	beq.n	8012200 <es_wifi_setsockopt+0x34>
 80121d8:	dc05      	bgt.n	80121e6 <es_wifi_setsockopt+0x1a>
 80121da:	2a04      	cmp	r2, #4
 80121dc:	d028      	beq.n	8012230 <es_wifi_setsockopt+0x64>
 80121de:	2a0e      	cmp	r2, #14
 80121e0:	d138      	bne.n	8012254 <es_wifi_setsockopt+0x88>
        }
        break;

      case  NET_SO_TLS_CERT_PROF:
        NET_DBG_ERROR("Ignore this option because it embedded inside Inventek Wifi module and can not be changed\n");
        ret =  NET_OK;
 80121e2:	2000      	movs	r0, #0
 80121e4:	4770      	bx	lr
    switch (optname)
 80121e6:	f241 0106 	movw	r1, #4102	; 0x1006
 80121ea:	428a      	cmp	r2, r1
 80121ec:	d135      	bne.n	801225a <es_wifi_setsockopt+0x8e>
        WifiChannel[sock].recvtimeout = * optint32;
 80121ee:	681a      	ldr	r2, [r3, #0]
 80121f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80121f4:	4b1e      	ldr	r3, [pc, #120]	; (8012270 <es_wifi_setsockopt+0xa4>)
 80121f6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80121fa:	6182      	str	r2, [r0, #24]
        ret = NET_OK;
 80121fc:	2000      	movs	r0, #0
        break;
 80121fe:	4770      	bx	lr
        WifiChannel[sock].sendtimeout = *optint32;
 8012200:	6819      	ldr	r1, [r3, #0]
 8012202:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012206:	4a1a      	ldr	r2, [pc, #104]	; (8012270 <es_wifi_setsockopt+0xa4>)
 8012208:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801220c:	6159      	str	r1, [r3, #20]
        if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_UDP)
 801220e:	789b      	ldrb	r3, [r3, #2]
 8012210:	2b11      	cmp	r3, #17
 8012212:	d001      	beq.n	8012218 <es_wifi_setsockopt+0x4c>
        ret = NET_OK;
 8012214:	2000      	movs	r0, #0
 8012216:	4770      	bx	lr
          if (WifiChannel[sock].sendtimeout > NET_UDP_MAX_SEND_BLOCK_TO)
 8012218:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801221c:	dd20      	ble.n	8012260 <es_wifi_setsockopt+0x94>
            WifiChannel[sock].sendtimeout = NET_UDP_MAX_SEND_BLOCK_TO;
 801221e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012222:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8012226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801222a:	6143      	str	r3, [r0, #20]
        ret = NET_OK;
 801222c:	2000      	movs	r0, #0
 801222e:	4770      	bx	lr
        if (sizeof(bool) != optlen)
 8012230:	9a00      	ldr	r2, [sp, #0]
 8012232:	2a01      	cmp	r2, #1
 8012234:	d116      	bne.n	8012264 <es_wifi_setsockopt+0x98>
          if (*optbool == false)
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	b9bb      	cbnz	r3, 801226a <es_wifi_setsockopt+0x9e>
            WifiChannel[sock].sendtimeout = 1;
 801223a:	4b0d      	ldr	r3, [pc, #52]	; (8012270 <es_wifi_setsockopt+0xa4>)
 801223c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012240:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012244:	2101      	movs	r1, #1
 8012246:	6151      	str	r1, [r2, #20]
            WifiChannel[sock].recvtimeout = 1;
 8012248:	6191      	str	r1, [r2, #24]
          ret =  NET_OK;
 801224a:	2000      	movs	r0, #0
 801224c:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 801224e:	f06f 0005 	mvn.w	r0, #5
 8012252:	4770      	bx	lr
    switch (optname)
 8012254:	f06f 0003 	mvn.w	r0, #3
 8012258:	4770      	bx	lr
 801225a:	f06f 0003 	mvn.w	r0, #3
 801225e:	4770      	bx	lr
        ret = NET_OK;
 8012260:	2000      	movs	r0, #0
 8012262:	4770      	bx	lr
          ret = NET_ERROR_PARAMETER;
 8012264:	f06f 0003 	mvn.w	r0, #3
 8012268:	4770      	bx	lr
          ret =  NET_OK;
 801226a:	2000      	movs	r0, #0
      default :
        break;
    }
  }
  return ret;
}
 801226c:	4770      	bx	lr
 801226e:	bf00      	nop
 8012270:	2400fe38 	.word	0x2400fe38

08012274 <es_wifi_getsockopt>:
  (void) optname;
  (void) optvalue;
  (void) optlen;

  return NET_ERROR_UNSUPPORTED;
}
 8012274:	f06f 0002 	mvn.w	r0, #2
 8012278:	4770      	bx	lr

0801227a <es_wifi_scan>:
{
  (void) mode;
  (void) pnetif;
  (void) ssid;
  return 0;
}
 801227a:	2000      	movs	r0, #0
 801227c:	4770      	bx	lr

0801227e <es_wifi_if_deinit>:
{
 801227e:	b538      	push	{r3, r4, r5, lr}
 8012280:	4604      	mov	r4, r0
  NET_FREE(pnetif->pdrv->extension.wifi);
 8012282:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012286:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8012288:	f011 f974 	bl	8023574 <free>
  pnetif->pdrv->extension.wifi = NULL;
 801228c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8012290:	2500      	movs	r5, #0
 8012292:	675d      	str	r5, [r3, #116]	; 0x74
  NET_FREE(pnetif->pdrv);
 8012294:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8012298:	f011 f96c 	bl	8023574 <free>
  pnetif->pdrv = NULL;
 801229c:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
 80122a0:	4628      	mov	r0, r5
 80122a2:	bd38      	pop	{r3, r4, r5, pc}

080122a4 <es_wifi_if_init>:
{
 80122a4:	b570      	push	{r4, r5, r6, lr}
 80122a6:	4605      	mov	r5, r0
  net_if_drv_t *p = NET_MALLOC(sizeof(net_if_drv_t));
 80122a8:	2084      	movs	r0, #132	; 0x84
 80122aa:	f011 f95b 	bl	8023564 <malloc>
  if (p != NULL)
 80122ae:	2800      	cmp	r0, #0
 80122b0:	d04c      	beq.n	801234c <es_wifi_if_init+0xa8>
 80122b2:	4604      	mov	r4, r0
    p->if_class = NET_INTERFACE_CLASS_WIFI;
 80122b4:	2300      	movs	r3, #0
 80122b6:	7003      	strb	r3, [r0, #0]
    p->if_init = es_wifi_if_init;
 80122b8:	4b26      	ldr	r3, [pc, #152]	; (8012354 <es_wifi_if_init+0xb0>)
 80122ba:	6043      	str	r3, [r0, #4]
    p->if_deinit = es_wifi_if_deinit;
 80122bc:	4b26      	ldr	r3, [pc, #152]	; (8012358 <es_wifi_if_init+0xb4>)
 80122be:	6083      	str	r3, [r0, #8]
    p->if_start = es_wifi_if_start;
 80122c0:	4b26      	ldr	r3, [pc, #152]	; (801235c <es_wifi_if_init+0xb8>)
 80122c2:	60c3      	str	r3, [r0, #12]
    p->if_stop = es_wifi_if_stop;
 80122c4:	4b26      	ldr	r3, [pc, #152]	; (8012360 <es_wifi_if_init+0xbc>)
 80122c6:	6103      	str	r3, [r0, #16]
    p->if_connect = es_wifi_if_connect;
 80122c8:	4b26      	ldr	r3, [pc, #152]	; (8012364 <es_wifi_if_init+0xc0>)
 80122ca:	6183      	str	r3, [r0, #24]
    p->if_disconnect = es_wifi_if_disconnect;
 80122cc:	4b26      	ldr	r3, [pc, #152]	; (8012368 <es_wifi_if_init+0xc4>)
 80122ce:	61c3      	str	r3, [r0, #28]
    p->psocket = es_wifi_socket;
 80122d0:	4b26      	ldr	r3, [pc, #152]	; (801236c <es_wifi_if_init+0xc8>)
 80122d2:	6303      	str	r3, [r0, #48]	; 0x30
    p->pbind = es_wifi_bind;
 80122d4:	4b26      	ldr	r3, [pc, #152]	; (8012370 <es_wifi_if_init+0xcc>)
 80122d6:	6343      	str	r3, [r0, #52]	; 0x34
    p->plisten = es_wifi_listen;
 80122d8:	4b26      	ldr	r3, [pc, #152]	; (8012374 <es_wifi_if_init+0xd0>)
 80122da:	6383      	str	r3, [r0, #56]	; 0x38
    p->paccept = es_wifi_accept;
 80122dc:	4b26      	ldr	r3, [pc, #152]	; (8012378 <es_wifi_if_init+0xd4>)
 80122de:	63c3      	str	r3, [r0, #60]	; 0x3c
    p->pconnect = es_wifi_connect;
 80122e0:	4b26      	ldr	r3, [pc, #152]	; (801237c <es_wifi_if_init+0xd8>)
 80122e2:	6403      	str	r3, [r0, #64]	; 0x40
    p->psend = es_wifi_send;
 80122e4:	4b26      	ldr	r3, [pc, #152]	; (8012380 <es_wifi_if_init+0xdc>)
 80122e6:	6443      	str	r3, [r0, #68]	; 0x44
    p->precv = es_wifi_recv;
 80122e8:	4b26      	ldr	r3, [pc, #152]	; (8012384 <es_wifi_if_init+0xe0>)
 80122ea:	6483      	str	r3, [r0, #72]	; 0x48
    p->psendto = es_wifi_sendto;
 80122ec:	4b26      	ldr	r3, [pc, #152]	; (8012388 <es_wifi_if_init+0xe4>)
 80122ee:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->precvfrom = es_wifi_recvfrom;
 80122f0:	4b26      	ldr	r3, [pc, #152]	; (801238c <es_wifi_if_init+0xe8>)
 80122f2:	6503      	str	r3, [r0, #80]	; 0x50
    p->psetsockopt = es_wifi_setsockopt;
 80122f4:	4b26      	ldr	r3, [pc, #152]	; (8012390 <es_wifi_if_init+0xec>)
 80122f6:	6543      	str	r3, [r0, #84]	; 0x54
    p->pgetsockopt = es_wifi_getsockopt;
 80122f8:	4b26      	ldr	r3, [pc, #152]	; (8012394 <es_wifi_if_init+0xf0>)
 80122fa:	6583      	str	r3, [r0, #88]	; 0x58
    p->pgetsockname = es_wifi_getsockname;
 80122fc:	4b26      	ldr	r3, [pc, #152]	; (8012398 <es_wifi_if_init+0xf4>)
 80122fe:	65c3      	str	r3, [r0, #92]	; 0x5c
    p->pgetpeername = es_wifi_getpeername;
 8012300:	4b26      	ldr	r3, [pc, #152]	; (801239c <es_wifi_if_init+0xf8>)
 8012302:	6603      	str	r3, [r0, #96]	; 0x60
    p->pclose = es_wifi_close;
 8012304:	4b26      	ldr	r3, [pc, #152]	; (80123a0 <es_wifi_if_init+0xfc>)
 8012306:	6643      	str	r3, [r0, #100]	; 0x64
    p->pshutdown = es_wifi_shutdown;
 8012308:	4b26      	ldr	r3, [pc, #152]	; (80123a4 <es_wifi_if_init+0x100>)
 801230a:	6683      	str	r3, [r0, #104]	; 0x68
    p->pgethostbyname = es_wifi_gethostbyname;
 801230c:	4b26      	ldr	r3, [pc, #152]	; (80123a8 <es_wifi_if_init+0x104>)
 801230e:	66c3      	str	r3, [r0, #108]	; 0x6c
    p->pping = es_wifi_ping;
 8012310:	4b26      	ldr	r3, [pc, #152]	; (80123ac <es_wifi_if_init+0x108>)
 8012312:	6703      	str	r3, [r0, #112]	; 0x70
    pextwifi = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 8012314:	2024      	movs	r0, #36	; 0x24
 8012316:	f011 f925 	bl	8023564 <malloc>
    if (NULL == pextwifi)
 801231a:	4606      	mov	r6, r0
 801231c:	b180      	cbz	r0, 8012340 <es_wifi_if_init+0x9c>
      (void) memset(pextwifi, 0, sizeof(net_if_wifi_class_extension_t));
 801231e:	2224      	movs	r2, #36	; 0x24
 8012320:	2100      	movs	r1, #0
 8012322:	f011 f94d 	bl	80235c0 <memset>
      pnetif->pdrv = p;
 8012326:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
      p->extension.wifi = pextwifi;
 801232a:	6766      	str	r6, [r4, #116]	; 0x74
      p->extension.wifi->scan = es_wifi_scan;
 801232c:	4b20      	ldr	r3, [pc, #128]	; (80123b0 <es_wifi_if_init+0x10c>)
 801232e:	6033      	str	r3, [r6, #0]
      p->extension.wifi->get_scan_results = es_wifi_get_scan_results;
 8012330:	4b20      	ldr	r3, [pc, #128]	; (80123b4 <es_wifi_if_init+0x110>)
 8012332:	6073      	str	r3, [r6, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8012334:	2106      	movs	r1, #6
 8012336:	4628      	mov	r0, r5
 8012338:	f7ff fe36 	bl	8011fa8 <net_state_manage_event>
      ret = NET_OK;
 801233c:	2000      	movs	r0, #0
}
 801233e:	bd70      	pop	{r4, r5, r6, pc}
      NET_FREE(p);
 8012340:	4620      	mov	r0, r4
 8012342:	f011 f917 	bl	8023574 <free>
      ret = NET_ERROR_NO_MEMORY;
 8012346:	f06f 0007 	mvn.w	r0, #7
 801234a:	e7f8      	b.n	801233e <es_wifi_if_init+0x9a>
    ret = NET_ERROR_NO_MEMORY;
 801234c:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8012350:	e7f5      	b.n	801233e <es_wifi_if_init+0x9a>
 8012352:	bf00      	nop
 8012354:	080122a5 	.word	0x080122a5
 8012358:	0801227f 	.word	0x0801227f
 801235c:	08012d59 	.word	0x08012d59
 8012360:	080123b9 	.word	0x080123b9
 8012364:	08012f69 	.word	0x08012f69
 8012368:	08012d39 	.word	0x08012d39
 801236c:	08012019 	.word	0x08012019
 8012370:	080120ad 	.word	0x080120ad
 8012374:	08012cdd 	.word	0x08012cdd
 8012378:	08012c59 	.word	0x08012c59
 801237c:	0801279d 	.word	0x0801279d
 8012380:	08012bc5 	.word	0x08012bc5
 8012384:	08012b2d 	.word	0x08012b2d
 8012388:	08012855 	.word	0x08012855
 801238c:	080129d9 	.word	0x080129d9
 8012390:	080121cd 	.word	0x080121cd
 8012394:	08012275 	.word	0x08012275
 8012398:	080126b1 	.word	0x080126b1
 801239c:	0801260d 	.word	0x0801260d
 80123a0:	08012519 	.word	0x08012519
 80123a4:	08012121 	.word	0x08012121
 80123a8:	080124c9 	.word	0x080124c9
 80123ac:	08012491 	.word	0x08012491
 80123b0:	0801227b 	.word	0x0801227b
 80123b4:	080123c5 	.word	0x080123c5

080123b8 <es_wifi_if_stop>:
{
 80123b8:	b508      	push	{r3, lr}
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 80123ba:	2106      	movs	r1, #6
 80123bc:	f7ff fdf4 	bl	8011fa8 <net_state_manage_event>
}
 80123c0:	2000      	movs	r0, #0
 80123c2:	bd08      	pop	{r3, pc}

080123c4 <es_wifi_get_scan_results>:

static  int32_t es_wifi_get_scan_results(net_if_handle_t *pnetif, net_wifi_scan_results_t *results, uint8_t number)
{
 80123c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123c8:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 80123cc:	4688      	mov	r8, r1
 80123ce:	4614      	mov	r4, r2
  int32_t ret;
  ES_WIFI_APs_t APs;
  ES_WIFI_AP_t *AP = &APs.AP[0];

  if (ES_WIFI_STATUS_OK == ES_WIFI_ListAccessPoints(castcontext(pnetif->pdrv->context), &APs))
 80123d0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80123d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80123d6:	f7ff fe1d 	bl	8012014 <castcontext>
 80123da:	a901      	add	r1, sp, #4
 80123dc:	f7f5 fd4a 	bl	8007e74 <ES_WIFI_ListAccessPoints>
 80123e0:	2800      	cmp	r0, #0
 80123e2:	d14f      	bne.n	8012484 <es_wifi_get_scan_results+0xc0>
  {
    if (APs.nbr > number)
 80123e4:	f89d 3374 	ldrb.w	r3, [sp, #884]	; 0x374
 80123e8:	42a3      	cmp	r3, r4
 80123ea:	d901      	bls.n	80123f0 <es_wifi_get_scan_results+0x2c>
    {
      APs.nbr = number;
 80123ec:	f88d 4374 	strb.w	r4, [sp, #884]	; 0x374
{
 80123f0:	2600      	movs	r6, #0
 80123f2:	ac01      	add	r4, sp, #4
 80123f4:	e03e      	b.n	8012474 <es_wifi_get_scan_results+0xb0>
    }
    for (uint32_t i = 0; i < APs.nbr ; i++)
    {
      (void) memset((void *) &results[i], 0, sizeof(net_wifi_scan_bss_t));
 80123f6:	2234      	movs	r2, #52	; 0x34
 80123f8:	fb02 f706 	mul.w	r7, r2, r6
 80123fc:	eb08 0507 	add.w	r5, r8, r7
 8012400:	2100      	movs	r1, #0
 8012402:	4628      	mov	r0, r5
 8012404:	f011 f8dc 	bl	80235c0 <memset>
      (void) memcpy(results[i].ssid.value, AP->SSID, NET_WIFI_MAX_SSID_SIZE);
 8012408:	6821      	ldr	r1, [r4, #0]
 801240a:	6860      	ldr	r0, [r4, #4]
 801240c:	68a2      	ldr	r2, [r4, #8]
 801240e:	68e3      	ldr	r3, [r4, #12]
 8012410:	f8c5 1001 	str.w	r1, [r5, #1]
 8012414:	f8c5 0005 	str.w	r0, [r5, #5]
 8012418:	f8c5 2009 	str.w	r2, [r5, #9]
 801241c:	f8c5 300d 	str.w	r3, [r5, #13]
 8012420:	6921      	ldr	r1, [r4, #16]
 8012422:	6960      	ldr	r0, [r4, #20]
 8012424:	69a2      	ldr	r2, [r4, #24]
 8012426:	69e3      	ldr	r3, [r4, #28]
 8012428:	f8c5 1011 	str.w	r1, [r5, #17]
 801242c:	f8c5 0015 	str.w	r0, [r5, #21]
 8012430:	f8c5 2019 	str.w	r2, [r5, #25]
 8012434:	f8c5 301d 	str.w	r3, [r5, #29]
      results[i].ssid.length = (uint8_t) strlen((char_t *) AP->SSID);
 8012438:	4620      	mov	r0, r4
 801243a:	f7ed ff63 	bl	8000304 <strlen>
 801243e:	f808 0007 	strb.w	r0, [r8, r7]
      results[i].security = conv_to_net_security(AP->Security);
 8012442:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8012446:	f7ff fea5 	bl	8012194 <conv_to_net_security>
 801244a:	62a8      	str	r0, [r5, #40]	; 0x28
      (void)  memcpy(&results[i].bssid, AP->MAC, NET_WIFI_MAC_ADDRESS_SIZE);
 801244c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801244e:	f8c5 3021 	str.w	r3, [r5, #33]	; 0x21
 8012452:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8012454:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
      results[i].rssi = (int8_t)AP->RSSI;
 8012458:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 801245c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      results[i].channel = AP->Channel;
 8012460:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8012464:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      (void) memcpy(results[i].country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 8012468:	4b08      	ldr	r3, [pc, #32]	; (801248c <es_wifi_get_scan_results+0xc8>)
 801246a:	6818      	ldr	r0, [r3, #0]
 801246c:	f8c5 002d 	str.w	r0, [r5, #45]	; 0x2d
      AP++;
 8012470:	342c      	adds	r4, #44	; 0x2c
    for (uint32_t i = 0; i < APs.nbr ; i++)
 8012472:	3601      	adds	r6, #1
 8012474:	f89d 0374 	ldrb.w	r0, [sp, #884]	; 0x374
 8012478:	42b0      	cmp	r0, r6
 801247a:	d8bc      	bhi.n	80123f6 <es_wifi_get_scan_results+0x32>
  else
  {
    ret = NET_ERROR_NO_CONNECTION;
  }
  return ret;
}
 801247c:	f50d 7d5e 	add.w	sp, sp, #888	; 0x378
 8012480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_NO_CONNECTION;
 8012484:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8012488:	e7f8      	b.n	801247c <es_wifi_get_scan_results+0xb8>
 801248a:	bf00      	nop
 801248c:	08026884 	.word	0x08026884

08012490 <es_wifi_ping>:
{
 8012490:	b530      	push	{r4, r5, lr}
 8012492:	b085      	sub	sp, #20
 8012494:	4684      	mov	ip, r0
 8012496:	4614      	mov	r4, r2
 8012498:	461d      	mov	r5, r3
  (void) memcpy(ipaddr, &addr->sa_data[2], 6);
 801249a:	6848      	ldr	r0, [r1, #4]
 801249c:	9002      	str	r0, [sp, #8]
 801249e:	890b      	ldrh	r3, [r1, #8]
 80124a0:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (ES_WIFI_STATUS_OK == ES_WIFI_Ping(castcontext(pnetif->pdrv->context), ipaddr, (uint16_t) count, (uint16_t) delay,
 80124a4:	f8dc 30ec 	ldr.w	r3, [ip, #236]	; 0xec
 80124a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80124aa:	f7ff fdb3 	bl	8012014 <castcontext>
 80124ae:	9b08      	ldr	r3, [sp, #32]
 80124b0:	9300      	str	r3, [sp, #0]
 80124b2:	b2ab      	uxth	r3, r5
 80124b4:	b2a2      	uxth	r2, r4
 80124b6:	a902      	add	r1, sp, #8
 80124b8:	f7f5 fe86 	bl	80081c8 <ES_WIFI_Ping>
 80124bc:	b908      	cbnz	r0, 80124c2 <es_wifi_ping+0x32>
}
 80124be:	b005      	add	sp, #20
 80124c0:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_NO_CONNECTION;
 80124c2:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80124c6:	e7fa      	b.n	80124be <es_wifi_ping+0x2e>

080124c8 <es_wifi_gethostbyname>:
  if (addr->sa_len < sizeof(sockaddr_in_t))
 80124c8:	780b      	ldrb	r3, [r1, #0]
 80124ca:	2b0f      	cmp	r3, #15
 80124cc:	d91e      	bls.n	801250c <es_wifi_gethostbyname+0x44>
{
 80124ce:	b530      	push	{r4, r5, lr}
 80124d0:	b083      	sub	sp, #12
 80124d2:	460c      	mov	r4, r1
 80124d4:	4615      	mov	r5, r2
    if (ES_WIFI_STATUS_OK == ES_WIFI_DNS_LookUp(castcontext(pnetif->pdrv->context), (char_t *)name, ipaddr))
 80124d6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80124da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80124dc:	f7ff fd9a 	bl	8012014 <castcontext>
 80124e0:	466a      	mov	r2, sp
 80124e2:	4629      	mov	r1, r5
 80124e4:	f7f5 fecc 	bl	8008280 <ES_WIFI_DNS_LookUp>
 80124e8:	b998      	cbnz	r0, 8012512 <es_wifi_gethostbyname+0x4a>
      uint8_t len = addr->sa_len;
 80124ea:	7825      	ldrb	r5, [r4, #0]
      sockaddr_in_t *saddr = cast2sockaddr_in(addr);
 80124ec:	4620      	mov	r0, r4
 80124ee:	f7ff fd92 	bl	8012016 <cast2sockaddr_in>
 80124f2:	4604      	mov	r4, r0
      (void)  memset(saddr, 0, len);
 80124f4:	462a      	mov	r2, r5
 80124f6:	2100      	movs	r1, #0
 80124f8:	f011 f862 	bl	80235c0 <memset>
      saddr->sin_len = len;
 80124fc:	7025      	strb	r5, [r4, #0]
      saddr->sin_family = NET_AF_INET;
 80124fe:	2302      	movs	r3, #2
 8012500:	7063      	strb	r3, [r4, #1]
      (void) memcpy(&(saddr->sin_addr), ipaddr, 4);
 8012502:	9b00      	ldr	r3, [sp, #0]
 8012504:	6063      	str	r3, [r4, #4]
      ret = NET_OK;
 8012506:	2000      	movs	r0, #0
}
 8012508:	b003      	add	sp, #12
 801250a:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 801250c:	f06f 0003 	mvn.w	r0, #3
}
 8012510:	4770      	bx	lr
      ret = NET_ERROR_DNS_FAILURE;
 8012512:	f06f 0009 	mvn.w	r0, #9
  return ret;
 8012516:	e7f7      	b.n	8012508 <es_wifi_gethostbyname+0x40>

08012518 <es_wifi_close>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012518:	2803      	cmp	r0, #3
 801251a:	d871      	bhi.n	8012600 <es_wifi_close+0xe8>
{
 801251c:	b510      	push	{r4, lr}
 801251e:	b086      	sub	sp, #24
 8012520:	4604      	mov	r4, r0
    if ((WifiChannel [sock].status & WIFI_STARTED_SERVER_SOCKET) != 0U)
 8012522:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012526:	4a38      	ldr	r2, [pc, #224]	; (8012608 <es_wifi_close+0xf0>)
 8012528:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801252c:	785b      	ldrb	r3, [r3, #1]
 801252e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012532:	d042      	beq.n	80125ba <es_wifi_close+0xa2>
      if (isaclone)
 8012534:	b301      	cbz	r1, 8012578 <es_wifi_close+0x60>
        if (ES_WIFI_CloseServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 8012536:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801253a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012540:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012544:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012546:	f7ff fd65 	bl	8012014 <castcontext>
 801254a:	4621      	mov	r1, r4
 801254c:	f7f6 f890 	bl	8008670 <ES_WIFI_CloseServerConnection>
 8012550:	b940      	cbnz	r0, 8012564 <es_wifi_close+0x4c>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8012552:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012556:	4b2c      	ldr	r3, [pc, #176]	; (8012608 <es_wifi_close+0xf0>)
 8012558:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801255c:	2000      	movs	r0, #0
 801255e:	7060      	strb	r0, [r4, #1]
}
 8012560:	b006      	add	sp, #24
 8012562:	bd10      	pop	{r4, pc}
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8012564:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012568:	4b27      	ldr	r3, [pc, #156]	; (8012608 <es_wifi_close+0xf0>)
 801256a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801256e:	2200      	movs	r2, #0
 8012570:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 8012572:	f06f 0012 	mvn.w	r0, #18
 8012576:	e7f3      	b.n	8012560 <es_wifi_close+0x48>
        if (ES_WIFI_StopServerSingleConn(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 8012578:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801257c:	4a22      	ldr	r2, [pc, #136]	; (8012608 <es_wifi_close+0xf0>)
 801257e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012584:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012588:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801258a:	f7ff fd43 	bl	8012014 <castcontext>
 801258e:	4621      	mov	r1, r4
 8012590:	f7f6 f892 	bl	80086b8 <ES_WIFI_StopServerSingleConn>
 8012594:	b938      	cbnz	r0, 80125a6 <es_wifi_close+0x8e>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8012596:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801259a:	4b1b      	ldr	r3, [pc, #108]	; (8012608 <es_wifi_close+0xf0>)
 801259c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80125a0:	2000      	movs	r0, #0
 80125a2:	7060      	strb	r0, [r4, #1]
          ret = NET_OK;
 80125a4:	e7dc      	b.n	8012560 <es_wifi_close+0x48>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 80125a6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80125aa:	4b17      	ldr	r3, [pc, #92]	; (8012608 <es_wifi_close+0xf0>)
 80125ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80125b0:	2200      	movs	r2, #0
 80125b2:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 80125b4:	f06f 0012 	mvn.w	r0, #18
 80125b8:	e7d2      	b.n	8012560 <es_wifi_close+0x48>
      conn.Number = (uint8_t) sock;
 80125ba:	f88d 0006 	strb.w	r0, [sp, #6]
      if (ES_WIFI_StopClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn)
 80125be:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80125c2:	4a11      	ldr	r2, [pc, #68]	; (8012608 <es_wifi_close+0xf0>)
 80125c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80125c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80125ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80125d0:	f7ff fd20 	bl	8012014 <castcontext>
 80125d4:	a901      	add	r1, sp, #4
 80125d6:	f7f5 ff0f 	bl	80083f8 <ES_WIFI_StopClientConnection>
 80125da:	b148      	cbz	r0, 80125f0 <es_wifi_close+0xd8>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 80125dc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80125e0:	4b09      	ldr	r3, [pc, #36]	; (8012608 <es_wifi_close+0xf0>)
 80125e2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80125e6:	2300      	movs	r3, #0
 80125e8:	7063      	strb	r3, [r4, #1]
        ret = NET_ERROR_SOCKET_FAILURE;
 80125ea:	f06f 0012 	mvn.w	r0, #18
 80125ee:	e7b7      	b.n	8012560 <es_wifi_close+0x48>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 80125f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80125f4:	4b04      	ldr	r3, [pc, #16]	; (8012608 <es_wifi_close+0xf0>)
 80125f6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80125fa:	2000      	movs	r0, #0
 80125fc:	7060      	strb	r0, [r4, #1]
        ret = NET_OK;
 80125fe:	e7af      	b.n	8012560 <es_wifi_close+0x48>
    ret = NET_ERROR_INVALID_SOCKET;
 8012600:	f06f 0005 	mvn.w	r0, #5
}
 8012604:	4770      	bx	lr
 8012606:	bf00      	nop
 8012608:	2400fe38 	.word	0x2400fe38

0801260c <es_wifi_getpeername>:
  if (*namelen < sizeof(sockaddr_in_t))
 801260c:	6813      	ldr	r3, [r2, #0]
 801260e:	2b0f      	cmp	r3, #15
 8012610:	d943      	bls.n	801269a <es_wifi_getpeername+0x8e>
{
 8012612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012616:	b086      	sub	sp, #24
 8012618:	4604      	mov	r4, r0
 801261a:	460e      	mov	r6, r1
 801261c:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= (int32_t) ESWIFI_MAX_CHANNEL_NBR))
 801261e:	2803      	cmp	r0, #3
 8012620:	d83e      	bhi.n	80126a0 <es_wifi_getpeername+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_PeerInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012622:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80126ac <es_wifi_getpeername+0xa0>
 8012626:	0087      	lsls	r7, r0, #2
 8012628:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801262c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8012630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012632:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012636:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012638:	f7ff fcec 	bl	8012014 <castcontext>
 801263c:	443c      	add	r4, r7
 801263e:	f10d 0312 	add.w	r3, sp, #18
 8012642:	aa05      	add	r2, sp, #20
 8012644:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 8012648:	f7f6 fa62 	bl	8008b10 <ES_WIFI_PeerInfo>
 801264c:	bb58      	cbnz	r0, 80126a6 <es_wifi_getpeername+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 801264e:	2400      	movs	r4, #0
 8012650:	9400      	str	r4, [sp, #0]
 8012652:	9401      	str	r4, [sp, #4]
 8012654:	9402      	str	r4, [sp, #8]
 8012656:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 8012658:	2302      	movs	r3, #2
 801265a:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 801265e:	9b05      	ldr	r3, [sp, #20]
 8012660:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 8012662:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012666:	ba5b      	rev16	r3, r3
 8012668:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 801266c:	2710      	movs	r7, #16
 801266e:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 8012672:	682a      	ldr	r2, [r5, #0]
 8012674:	4621      	mov	r1, r4
 8012676:	4630      	mov	r0, r6
 8012678:	f010 ffa2 	bl	80235c0 <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 801267c:	f89d 2000 	ldrb.w	r2, [sp]
 8012680:	682b      	ldr	r3, [r5, #0]
 8012682:	429a      	cmp	r2, r3
 8012684:	bf28      	it	cs
 8012686:	461a      	movcs	r2, r3
 8012688:	4669      	mov	r1, sp
 801268a:	4630      	mov	r0, r6
 801268c:	f010 ff8a 	bl	80235a4 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 8012690:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 8012692:	4620      	mov	r0, r4
}
 8012694:	b006      	add	sp, #24
 8012696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 801269a:	f06f 0003 	mvn.w	r0, #3
}
 801269e:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 80126a0:	f06f 0005 	mvn.w	r0, #5
 80126a4:	e7f6      	b.n	8012694 <es_wifi_getpeername+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 80126a6:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80126aa:	e7f3      	b.n	8012694 <es_wifi_getpeername+0x88>
 80126ac:	2400fe38 	.word	0x2400fe38

080126b0 <es_wifi_getsockname>:
  if (*namelen < sizeof(sockaddr_in_t))
 80126b0:	6813      	ldr	r3, [r2, #0]
 80126b2:	2b0f      	cmp	r3, #15
 80126b4:	d943      	bls.n	801273e <es_wifi_getsockname+0x8e>
{
 80126b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126ba:	b086      	sub	sp, #24
 80126bc:	4604      	mov	r4, r0
 80126be:	460e      	mov	r6, r1
 80126c0:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80126c2:	2803      	cmp	r0, #3
 80126c4:	d83e      	bhi.n	8012744 <es_wifi_getsockname+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_SockInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 80126c6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8012750 <es_wifi_getsockname+0xa0>
 80126ca:	0087      	lsls	r7, r0, #2
 80126cc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80126d0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80126d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80126da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80126dc:	f7ff fc9a 	bl	8012014 <castcontext>
 80126e0:	443c      	add	r4, r7
 80126e2:	f10d 0312 	add.w	r3, sp, #18
 80126e6:	aa05      	add	r2, sp, #20
 80126e8:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 80126ec:	f7f6 f9d6 	bl	8008a9c <ES_WIFI_SockInfo>
 80126f0:	bb58      	cbnz	r0, 801274a <es_wifi_getsockname+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 80126f2:	2400      	movs	r4, #0
 80126f4:	9400      	str	r4, [sp, #0]
 80126f6:	9401      	str	r4, [sp, #4]
 80126f8:	9402      	str	r4, [sp, #8]
 80126fa:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 80126fc:	2302      	movs	r3, #2
 80126fe:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 8012702:	9b05      	ldr	r3, [sp, #20]
 8012704:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 8012706:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801270a:	ba5b      	rev16	r3, r3
 801270c:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 8012710:	2710      	movs	r7, #16
 8012712:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 8012716:	682a      	ldr	r2, [r5, #0]
 8012718:	4621      	mov	r1, r4
 801271a:	4630      	mov	r0, r6
 801271c:	f010 ff50 	bl	80235c0 <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 8012720:	f89d 2000 	ldrb.w	r2, [sp]
 8012724:	682b      	ldr	r3, [r5, #0]
 8012726:	429a      	cmp	r2, r3
 8012728:	bf28      	it	cs
 801272a:	461a      	movcs	r2, r3
 801272c:	4669      	mov	r1, sp
 801272e:	4630      	mov	r0, r6
 8012730:	f010 ff38 	bl	80235a4 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 8012734:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 8012736:	4620      	mov	r0, r4
}
 8012738:	b006      	add	sp, #24
 801273a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 801273e:	f06f 0003 	mvn.w	r0, #3
}
 8012742:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 8012744:	f06f 0005 	mvn.w	r0, #5
 8012748:	e7f6      	b.n	8012738 <es_wifi_getsockname+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 801274a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 801274e:	e7f3      	b.n	8012738 <es_wifi_getsockname+0x88>
 8012750:	2400fe38 	.word	0x2400fe38

08012754 <check_connection_lost>:
{
 8012754:	b510      	push	{r4, lr}
 8012756:	4604      	mov	r4, r0
  if (n <= 0)
 8012758:	2900      	cmp	r1, #0
 801275a:	dd04      	ble.n	8012766 <check_connection_lost+0x12>
    if (NET_STATE_CONNECTION_LOST == pnetif->state)
 801275c:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 8012760:	2b08      	cmp	r3, #8
 8012762:	d014      	beq.n	801278e <check_connection_lost+0x3a>
}
 8012764:	bd10      	pop	{r4, pc}
    if (NET_STATE_CONNECTED == pnetif->state)
 8012766:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 801276a:	2b05      	cmp	r3, #5
 801276c:	d1fa      	bne.n	8012764 <check_connection_lost+0x10>
      if (ES_WIFI_IsConnected(castcontext(pnetif->pdrv->context)) == 0u)
 801276e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012772:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012774:	f7ff fc4e 	bl	8012014 <castcontext>
 8012778:	f7f5 fc54 	bl	8008024 <ES_WIFI_IsConnected>
 801277c:	2800      	cmp	r0, #0
 801277e:	d1f1      	bne.n	8012764 <check_connection_lost+0x10>
        (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTION_LOST, NULL);
 8012780:	2300      	movs	r3, #0
 8012782:	2208      	movs	r2, #8
 8012784:	4619      	mov	r1, r3
 8012786:	4620      	mov	r0, r4
 8012788:	f7ff fb40 	bl	8011e0c <net_if_notify>
 801278c:	e7ea      	b.n	8012764 <check_connection_lost+0x10>
      (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTED, NULL);
 801278e:	2300      	movs	r3, #0
 8012790:	2205      	movs	r2, #5
 8012792:	4619      	mov	r1, r3
 8012794:	f7ff fb3a 	bl	8011e0c <net_if_notify>
}
 8012798:	e7e4      	b.n	8012764 <check_connection_lost+0x10>
	...

0801279c <es_wifi_connect>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 801279c:	2803      	cmp	r0, #3
 801279e:	d854      	bhi.n	801284a <es_wifi_connect+0xae>
{
 80127a0:	b510      	push	{r4, lr}
 80127a2:	b086      	sub	sp, #24
 80127a4:	4604      	mov	r4, r0
    if (addrlen == sizeof(sockaddr_in_t))
 80127a6:	2a10      	cmp	r2, #16
 80127a8:	d003      	beq.n	80127b2 <es_wifi_connect+0x16>
      ret = NET_ERROR_PARAMETER;
 80127aa:	f06f 0003 	mvn.w	r0, #3
}
 80127ae:	b006      	add	sp, #24
 80127b0:	bd10      	pop	{r4, pc}
      dest = cast2sockaddr_in(addr);
 80127b2:	4608      	mov	r0, r1
 80127b4:	f7ff fc2f 	bl	8012016 <cast2sockaddr_in>
      conn.Number = (uint8_t) sock;
 80127b8:	f88d 4006 	strb.w	r4, [sp, #6]
      conn.LocalPort = WifiChannel[sock].localport;
 80127bc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80127c0:	4a23      	ldr	r2, [pc, #140]	; (8012850 <es_wifi_connect+0xb4>)
 80127c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80127c6:	889a      	ldrh	r2, [r3, #4]
 80127c8:	f8ad 200a 	strh.w	r2, [sp, #10]
      conn.RemotePort = NET_NTOHS(dest->sin_port);
 80127cc:	8842      	ldrh	r2, [r0, #2]
 80127ce:	ba52      	rev16	r2, r2
 80127d0:	f8ad 2008 	strh.w	r2, [sp, #8]
      NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 80127d4:	79c2      	ldrb	r2, [r0, #7]
 80127d6:	f88d 200f 	strb.w	r2, [sp, #15]
 80127da:	7982      	ldrb	r2, [r0, #6]
 80127dc:	f88d 200e 	strb.w	r2, [sp, #14]
 80127e0:	7942      	ldrb	r2, [r0, #5]
 80127e2:	f88d 200d 	strb.w	r2, [sp, #13]
 80127e6:	7902      	ldrb	r2, [r0, #4]
 80127e8:	f88d 200c 	strb.w	r2, [sp, #12]
      switch (WifiChannel[sock].protocol)
 80127ec:	789b      	ldrb	r3, [r3, #2]
 80127ee:	2b11      	cmp	r3, #17
 80127f0:	d022      	beq.n	8012838 <es_wifi_connect+0x9c>
 80127f2:	2b24      	cmp	r3, #36	; 0x24
 80127f4:	d023      	beq.n	801283e <es_wifi_connect+0xa2>
 80127f6:	2b06      	cmp	r3, #6
 80127f8:	d002      	beq.n	8012800 <es_wifi_connect+0x64>
          ret = NET_ERROR_PARAMETER;
 80127fa:	f06f 0003 	mvn.w	r0, #3
 80127fe:	e7d6      	b.n	80127ae <es_wifi_connect+0x12>
          conn.Type = ES_WIFI_TCP_CONNECTION;
 8012800:	2300      	movs	r3, #0
 8012802:	f88d 3004 	strb.w	r3, [sp, #4]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 8012806:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801280a:	4a11      	ldr	r2, [pc, #68]	; (8012850 <es_wifi_connect+0xb4>)
 801280c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012812:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012816:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012818:	f7ff fbfc 	bl	8012014 <castcontext>
 801281c:	a901      	add	r1, sp, #4
 801281e:	f7f5 fd53 	bl	80082c8 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 8012822:	b978      	cbnz	r0, 8012844 <es_wifi_connect+0xa8>
          WifiChannel[sock].status |= WIFI_CONNECTED_SOCKET_RW;
 8012824:	4b0a      	ldr	r3, [pc, #40]	; (8012850 <es_wifi_connect+0xb4>)
 8012826:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801282a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801282e:	7853      	ldrb	r3, [r2, #1]
 8012830:	f043 031c 	orr.w	r3, r3, #28
 8012834:	7053      	strb	r3, [r2, #1]
 8012836:	e7ba      	b.n	80127ae <es_wifi_connect+0x12>
      switch (WifiChannel[sock].protocol)
 8012838:	f06f 0002 	mvn.w	r0, #2
 801283c:	e7b7      	b.n	80127ae <es_wifi_connect+0x12>
 801283e:	f06f 0002 	mvn.w	r0, #2
 8012842:	e7b4      	b.n	80127ae <es_wifi_connect+0x12>
          ret = NET_ERROR_SOCKET_FAILURE;
 8012844:	f06f 0012 	mvn.w	r0, #18
 8012848:	e7b1      	b.n	80127ae <es_wifi_connect+0x12>
    ret = NET_ERROR_INVALID_SOCKET;
 801284a:	f06f 0005 	mvn.w	r0, #5
}
 801284e:	4770      	bx	lr
 8012850:	2400fe38 	.word	0x2400fe38

08012854 <es_wifi_sendto>:
{
 8012854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012858:	b08a      	sub	sp, #40	; 0x28
 801285a:	9f10      	ldr	r7, [sp, #64]	; 0x40
  if ((flags != 0) || (to->sa_family != (uint8_t) NET_AF_INET))
 801285c:	2b00      	cmp	r3, #0
 801285e:	f040 80aa 	bne.w	80129b6 <es_wifi_sendto+0x162>
 8012862:	4604      	mov	r4, r0
 8012864:	460e      	mov	r6, r1
 8012866:	4615      	mov	r5, r2
 8012868:	787b      	ldrb	r3, [r7, #1]
 801286a:	2b02      	cmp	r3, #2
 801286c:	f040 80a6 	bne.w	80129bc <es_wifi_sendto+0x168>
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012870:	2803      	cmp	r0, #3
 8012872:	f200 80a6 	bhi.w	80129c2 <es_wifi_sendto+0x16e>
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 8012876:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801287a:	4a56      	ldr	r2, [pc, #344]	; (80129d4 <es_wifi_sendto+0x180>)
 801287c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012880:	789b      	ldrb	r3, [r3, #2]
 8012882:	2b11      	cmp	r3, #17
 8012884:	f040 80a0 	bne.w	80129c8 <es_wifi_sendto+0x174>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 8012888:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801288c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012890:	785b      	ldrb	r3, [r3, #1]
 8012892:	f013 0f04 	tst.w	r3, #4
 8012896:	f000 809a 	beq.w	80129ce <es_wifi_sendto+0x17a>
    if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 801289a:	f013 0f20 	tst.w	r3, #32
 801289e:	d102      	bne.n	80128a6 <es_wifi_sendto+0x52>
      if (tolen == sizeof(sockaddr_in_t))
 80128a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80128a2:	2b10      	cmp	r3, #16
 80128a4:	d04d      	beq.n	8012942 <es_wifi_sendto+0xee>
      if (len > ES_WIFI_PAYLOAD_SIZE)
 80128a6:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80128aa:	dd01      	ble.n	80128b0 <es_wifi_sendto+0x5c>
        len = ES_WIFI_PAYLOAD_SIZE;
 80128ac:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
      sockaddr_in_t *saddr = cast2sockaddr_in(to);
 80128b0:	4638      	mov	r0, r7
 80128b2:	f7ff fbb0 	bl	8012016 <cast2sockaddr_in>
      remoteaddr = NET_NTOHL(saddr->sin_addr.s_addr);
 80128b6:	6843      	ldr	r3, [r0, #4]
 80128b8:	0a1a      	lsrs	r2, r3, #8
 80128ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80128be:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 80128c2:	0219      	lsls	r1, r3, #8
 80128c4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80128c8:	430a      	orrs	r2, r1
 80128ca:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
      uint32_t IPaddr = NET_NTOHL(remoteaddr);
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	0a11      	lsrs	r1, r2, #8
 80128d2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80128d6:	430b      	orrs	r3, r1
 80128d8:	0211      	lsls	r1, r2, #8
 80128da:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80128de:	430b      	orrs	r3, r1
 80128e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80128e4:	9305      	str	r3, [sp, #20]
      uint16_t Port = NET_NTOHS(saddr->sin_port);
 80128e6:	8847      	ldrh	r7, [r0, #2]
 80128e8:	ba7f      	rev16	r7, r7
 80128ea:	b2bf      	uxth	r7, r7
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 80128ec:	eb04 0884 	add.w	r8, r4, r4, lsl #2
 80128f0:	4b38      	ldr	r3, [pc, #224]	; (80129d4 <es_wifi_sendto+0x180>)
 80128f2:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80128f6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80128fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80128fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012900:	f7ff fb88 	bl	8012014 <castcontext>
                                                  (uint32_t) WifiChannel[sock].sendtimeout,
 8012904:	f8d8 3014 	ldr.w	r3, [r8, #20]
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012908:	9703      	str	r7, [sp, #12]
 801290a:	aa05      	add	r2, sp, #20
 801290c:	9202      	str	r2, [sp, #8]
 801290e:	9301      	str	r3, [sp, #4]
 8012910:	f10d 0312 	add.w	r3, sp, #18
 8012914:	9300      	str	r3, [sp, #0]
 8012916:	b2ab      	uxth	r3, r5
 8012918:	4632      	mov	r2, r6
 801291a:	b2e1      	uxtb	r1, r4
 801291c:	f7f5 ff48 	bl	80087b0 <ES_WIFI_SendDataTo>
 8012920:	2800      	cmp	r0, #0
 8012922:	d145      	bne.n	80129b0 <es_wifi_sendto+0x15c>
        ret = (int32_t) SentDatalen;
 8012924:	f8bd 5012 	ldrh.w	r5, [sp, #18]
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 8012928:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801292c:	4829      	ldr	r0, [pc, #164]	; (80129d4 <es_wifi_sendto+0x180>)
 801292e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8012932:	4629      	mov	r1, r5
 8012934:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012936:	f7ff ff0d 	bl	8012754 <check_connection_lost>
}
 801293a:	4628      	mov	r0, r5
 801293c:	b00a      	add	sp, #40	; 0x28
 801293e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dest = cast2sockaddr_in(to);
 8012942:	4638      	mov	r0, r7
 8012944:	f7ff fb67 	bl	8012016 <cast2sockaddr_in>
        conn.Number = (uint8_t) sock;
 8012948:	f88d 4016 	strb.w	r4, [sp, #22]
        conn.LocalPort = WifiChannel[sock].localport;
 801294c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012950:	4a20      	ldr	r2, [pc, #128]	; (80129d4 <es_wifi_sendto+0x180>)
 8012952:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012956:	889a      	ldrh	r2, [r3, #4]
 8012958:	f8ad 201a 	strh.w	r2, [sp, #26]
        conn.RemotePort = NET_NTOHS(dest->sin_port);
 801295c:	8842      	ldrh	r2, [r0, #2]
 801295e:	ba52      	rev16	r2, r2
 8012960:	f8ad 2018 	strh.w	r2, [sp, #24]
        NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 8012964:	79c2      	ldrb	r2, [r0, #7]
 8012966:	f88d 201f 	strb.w	r2, [sp, #31]
 801296a:	7982      	ldrb	r2, [r0, #6]
 801296c:	f88d 201e 	strb.w	r2, [sp, #30]
 8012970:	7942      	ldrb	r2, [r0, #5]
 8012972:	f88d 201d 	strb.w	r2, [sp, #29]
 8012976:	7902      	ldrb	r2, [r0, #4]
 8012978:	f88d 201c 	strb.w	r2, [sp, #28]
        conn.Type = ES_WIFI_UDP_CONNECTION;
 801297c:	2201      	movs	r2, #1
 801297e:	f88d 2014 	strb.w	r2, [sp, #20]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 8012982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012984:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012988:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801298a:	f7ff fb43 	bl	8012014 <castcontext>
 801298e:	a905      	add	r1, sp, #20
 8012990:	f7f5 fc9a 	bl	80082c8 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 8012994:	b948      	cbnz	r0, 80129aa <es_wifi_sendto+0x156>
          WifiChannel[sock].status |= WIFI_STARTED_CLIENT_SOCKET;
 8012996:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801299a:	4a0e      	ldr	r2, [pc, #56]	; (80129d4 <es_wifi_sendto+0x180>)
 801299c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80129a0:	785a      	ldrb	r2, [r3, #1]
 80129a2:	f042 0220 	orr.w	r2, r2, #32
 80129a6:	705a      	strb	r2, [r3, #1]
    if (ret == NET_OK)
 80129a8:	e77d      	b.n	80128a6 <es_wifi_sendto+0x52>
          ret = NET_ERROR_SOCKET_FAILURE;
 80129aa:	f06f 0512 	mvn.w	r5, #18
 80129ae:	e7c4      	b.n	801293a <es_wifi_sendto+0xe6>
        ret = NET_ERROR_SOCKET_FAILURE;
 80129b0:	f06f 0512 	mvn.w	r5, #18
 80129b4:	e7b8      	b.n	8012928 <es_wifi_sendto+0xd4>
    ret = NET_ERROR_UNSUPPORTED;
 80129b6:	f06f 0502 	mvn.w	r5, #2
 80129ba:	e7be      	b.n	801293a <es_wifi_sendto+0xe6>
 80129bc:	f06f 0502 	mvn.w	r5, #2
 80129c0:	e7bb      	b.n	801293a <es_wifi_sendto+0xe6>
    ret = NET_ERROR_INVALID_SOCKET;
 80129c2:	f06f 0505 	mvn.w	r5, #5
 80129c6:	e7b8      	b.n	801293a <es_wifi_sendto+0xe6>
    ret = NET_ERROR_SOCKET_FAILURE;
 80129c8:	f06f 0512 	mvn.w	r5, #18
 80129cc:	e7b5      	b.n	801293a <es_wifi_sendto+0xe6>
    ret =  NET_ERROR_SOCKET_FAILURE;
 80129ce:	f06f 0512 	mvn.w	r5, #18
  return ret;
 80129d2:	e7b2      	b.n	801293a <es_wifi_sendto+0xe6>
 80129d4:	2400fe38 	.word	0x2400fe38

080129d8 <es_wifi_recvfrom>:
{
 80129d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129dc:	b08a      	sub	sp, #40	; 0x28
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80129de:	2803      	cmp	r0, #3
 80129e0:	f200 8097 	bhi.w	8012b12 <es_wifi_recvfrom+0x13a>
 80129e4:	4604      	mov	r4, r0
 80129e6:	4688      	mov	r8, r1
 80129e8:	4615      	mov	r5, r2
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 80129ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80129ee:	4f4d      	ldr	r7, [pc, #308]	; (8012b24 <es_wifi_recvfrom+0x14c>)
 80129f0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 80129f4:	7882      	ldrb	r2, [r0, #2]
 80129f6:	2a11      	cmp	r2, #17
 80129f8:	f040 808e 	bne.w	8012b18 <es_wifi_recvfrom+0x140>
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 80129fc:	7842      	ldrb	r2, [r0, #1]
 80129fe:	f012 0f08 	tst.w	r2, #8
 8012a02:	f000 808c 	beq.w	8012b1e <es_wifi_recvfrom+0x146>
    if (((uint8_t) flags & (uint8_t) NET_MSG_DONTWAIT) == 0U)
 8012a06:	f013 0f08 	tst.w	r3, #8
 8012a0a:	d107      	bne.n	8012a1c <es_wifi_recvfrom+0x44>
      timeout = (uint32_t) WifiChannel[sock].recvtimeout;
 8012a0c:	6986      	ldr	r6, [r0, #24]
    if (timeout > (uint32_t) ES_WIFI_MAX_SO_TIMEOUT)
 8012a0e:	f247 5330 	movw	r3, #30000	; 0x7530
 8012a12:	429e      	cmp	r6, r3
 8012a14:	d903      	bls.n	8012a1e <es_wifi_recvfrom+0x46>
      ret = NET_ERROR_UNSUPPORTED;
 8012a16:	f06f 0702 	mvn.w	r7, #2
  return ret;
 8012a1a:	e030      	b.n	8012a7e <es_wifi_recvfrom+0xa6>
  uint32_t timeout = 0;
 8012a1c:	2600      	movs	r6, #0
      if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 8012a1e:	f012 0f20 	tst.w	r2, #32
 8012a22:	d030      	beq.n	8012a86 <es_wifi_recvfrom+0xae>
        uint32_t IPaddr = 0;
 8012a24:	2300      	movs	r3, #0
 8012a26:	9305      	str	r3, [sp, #20]
        uint16_t port = 0;
 8012a28:	f8ad 3012 	strh.w	r3, [sp, #18]
        if (len > ES_WIFI_PAYLOAD_SIZE)
 8012a2c:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8012a30:	dd01      	ble.n	8012a36 <es_wifi_recvfrom+0x5e>
          len = ES_WIFI_PAYLOAD_SIZE;
 8012a32:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
        if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveDataFrom(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012a36:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012a3a:	4a3a      	ldr	r2, [pc, #232]	; (8012b24 <es_wifi_recvfrom+0x14c>)
 8012a3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012a46:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012a48:	f7ff fae4 	bl	8012014 <castcontext>
 8012a4c:	f10d 0312 	add.w	r3, sp, #18
 8012a50:	9303      	str	r3, [sp, #12]
 8012a52:	ab05      	add	r3, sp, #20
 8012a54:	9302      	str	r3, [sp, #8]
 8012a56:	9601      	str	r6, [sp, #4]
 8012a58:	ab04      	add	r3, sp, #16
 8012a5a:	9300      	str	r3, [sp, #0]
 8012a5c:	b2ab      	uxth	r3, r5
 8012a5e:	4642      	mov	r2, r8
 8012a60:	b2e1      	uxtb	r1, r4
 8012a62:	f7f5 ff95 	bl	8008990 <ES_WIFI_ReceiveDataFrom>
 8012a66:	b368      	cbz	r0, 8012ac4 <es_wifi_recvfrom+0xec>
          ret = NET_ERROR_SOCKET_FAILURE;
 8012a68:	f06f 0712 	mvn.w	r7, #18
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 8012a6c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012a70:	482c      	ldr	r0, [pc, #176]	; (8012b24 <es_wifi_recvfrom+0x14c>)
 8012a72:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8012a76:	4639      	mov	r1, r7
 8012a78:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012a7a:	f7ff fe6b 	bl	8012754 <check_connection_lost>
}
 8012a7e:	4638      	mov	r0, r7
 8012a80:	b00a      	add	sp, #40	; 0x28
 8012a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (void) NET_ATON((const char_t *)"224.0.0.251", &ipaddr);
 8012a86:	a905      	add	r1, sp, #20
 8012a88:	4827      	ldr	r0, [pc, #156]	; (8012b28 <es_wifi_recvfrom+0x150>)
 8012a8a:	f7fe ff24 	bl	80118d6 <net_aton>
        NET_IPADDR_PORT_TO_SOCKADDR(&saddr, &ipaddr, 5353);
 8012a8e:	2310      	movs	r3, #16
 8012a90:	f88d 3018 	strb.w	r3, [sp, #24]
 8012a94:	2202      	movs	r2, #2
 8012a96:	f88d 2019 	strb.w	r2, [sp, #25]
 8012a9a:	f64e 1214 	movw	r2, #59668	; 0xe914
 8012a9e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012aa2:	9a05      	ldr	r2, [sp, #20]
 8012aa4:	9207      	str	r2, [sp, #28]
 8012aa6:	2100      	movs	r1, #0
 8012aa8:	9108      	str	r1, [sp, #32]
 8012aaa:	9109      	str	r1, [sp, #36]	; 0x24
        ret = es_wifi_sendto(sock, NULL, 0, flags, &saddr, sizeof(sockaddr_in_t));
 8012aac:	9301      	str	r3, [sp, #4]
 8012aae:	ab06      	add	r3, sp, #24
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	460b      	mov	r3, r1
 8012ab4:	460a      	mov	r2, r1
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	f7ff fecc 	bl	8012854 <es_wifi_sendto>
      if (ret == NET_OK)
 8012abc:	4607      	mov	r7, r0
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d1d4      	bne.n	8012a6c <es_wifi_recvfrom+0x94>
 8012ac2:	e7af      	b.n	8012a24 <es_wifi_recvfrom+0x4c>
          (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 8012ac4:	2100      	movs	r1, #0
 8012ac6:	9106      	str	r1, [sp, #24]
 8012ac8:	9107      	str	r1, [sp, #28]
 8012aca:	9108      	str	r1, [sp, #32]
 8012acc:	9109      	str	r1, [sp, #36]	; 0x24
          saddr.sin_family = NET_AF_INET;
 8012ace:	2302      	movs	r3, #2
 8012ad0:	f88d 3019 	strb.w	r3, [sp, #25]
          saddr.sin_addr.s_addr = IPaddr;
 8012ad4:	9b05      	ldr	r3, [sp, #20]
 8012ad6:	9307      	str	r3, [sp, #28]
          saddr.sin_port = NET_HTONS(port);
 8012ad8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012adc:	ba5b      	rev16	r3, r3
 8012ade:	f8ad 301a 	strh.w	r3, [sp, #26]
          saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 8012ae2:	2510      	movs	r5, #16
 8012ae4:	f88d 5018 	strb.w	r5, [sp, #24]
          (void)  memset(from, 0, *fromlen);
 8012ae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012aea:	681a      	ldr	r2, [r3, #0]
 8012aec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012aee:	f010 fd67 	bl	80235c0 <memset>
          (void)  memcpy(from, &saddr, MIN((*fromlen), (saddr.sin_len)));
 8012af2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8012af6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	bf28      	it	cs
 8012afe:	461a      	movcs	r2, r3
 8012b00:	a906      	add	r1, sp, #24
 8012b02:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012b04:	f010 fd4e 	bl	80235a4 <memcpy>
          *fromlen = sizeof(sockaddr_in_t);
 8012b08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b0a:	601d      	str	r5, [r3, #0]
          ret = (int32_t) ReceivedDatalen;
 8012b0c:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 8012b10:	e7ac      	b.n	8012a6c <es_wifi_recvfrom+0x94>
    ret = NET_ERROR_INVALID_SOCKET;
 8012b12:	f06f 0705 	mvn.w	r7, #5
 8012b16:	e7b2      	b.n	8012a7e <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 8012b18:	f06f 0712 	mvn.w	r7, #18
 8012b1c:	e7af      	b.n	8012a7e <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 8012b1e:	f06f 0712 	mvn.w	r7, #18
 8012b22:	e7ac      	b.n	8012a7e <es_wifi_recvfrom+0xa6>
 8012b24:	2400fe38 	.word	0x2400fe38
 8012b28:	08026888 	.word	0x08026888

08012b2c <es_wifi_recv>:
{
 8012b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b2e:	b085      	sub	sp, #20
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012b30:	2803      	cmp	r0, #3
 8012b32:	d83f      	bhi.n	8012bb4 <es_wifi_recv+0x88>
 8012b34:	4604      	mov	r4, r0
 8012b36:	460e      	mov	r6, r1
 8012b38:	4615      	mov	r5, r2
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 8012b3a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8012b3e:	4920      	ldr	r1, [pc, #128]	; (8012bc0 <es_wifi_recv+0x94>)
 8012b40:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012b44:	7852      	ldrb	r2, [r2, #1]
 8012b46:	f012 0f08 	tst.w	r2, #8
 8012b4a:	d036      	beq.n	8012bba <es_wifi_recv+0x8e>
    if (flags == (int32_t) NET_MSG_DONTWAIT)
 8012b4c:	2b08      	cmp	r3, #8
 8012b4e:	d02c      	beq.n	8012baa <es_wifi_recv+0x7e>
      timeout = (uint16_t) WifiChannel[sock].recvtimeout;
 8012b50:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012b54:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8012b58:	8b1f      	ldrh	r7, [r3, #24]
    if (len > ES_WIFI_PAYLOAD_SIZE)
 8012b5a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8012b5e:	dd01      	ble.n	8012b64 <es_wifi_recv+0x38>
      len = ES_WIFI_PAYLOAD_SIZE;
 8012b60:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012b64:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012b68:	4a15      	ldr	r2, [pc, #84]	; (8012bc0 <es_wifi_recv+0x94>)
 8012b6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b70:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012b74:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012b76:	f7ff fa4d 	bl	8012014 <castcontext>
 8012b7a:	9701      	str	r7, [sp, #4]
 8012b7c:	f10d 030e 	add.w	r3, sp, #14
 8012b80:	9300      	str	r3, [sp, #0]
 8012b82:	b2ab      	uxth	r3, r5
 8012b84:	4632      	mov	r2, r6
 8012b86:	b2e1      	uxtb	r1, r4
 8012b88:	f7f5 feae 	bl	80088e8 <ES_WIFI_ReceiveData>
 8012b8c:	b978      	cbnz	r0, 8012bae <es_wifi_recv+0x82>
      ret = (int32_t) ReceivedDatalen;
 8012b8e:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 8012b92:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012b96:	480a      	ldr	r0, [pc, #40]	; (8012bc0 <es_wifi_recv+0x94>)
 8012b98:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8012b9c:	4629      	mov	r1, r5
 8012b9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012ba0:	f7ff fdd8 	bl	8012754 <check_connection_lost>
}
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	b005      	add	sp, #20
 8012ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      timeout = 0;
 8012baa:	2700      	movs	r7, #0
 8012bac:	e7d5      	b.n	8012b5a <es_wifi_recv+0x2e>
      ret = NET_ERROR_SOCKET_FAILURE;
 8012bae:	f06f 0512 	mvn.w	r5, #18
 8012bb2:	e7ee      	b.n	8012b92 <es_wifi_recv+0x66>
    ret = NET_ERROR_INVALID_SOCKET;
 8012bb4:	f06f 0505 	mvn.w	r5, #5
 8012bb8:	e7f4      	b.n	8012ba4 <es_wifi_recv+0x78>
    ret = NET_ERROR_SOCKET_FAILURE;
 8012bba:	f06f 0512 	mvn.w	r5, #18
  return ret;
 8012bbe:	e7f1      	b.n	8012ba4 <es_wifi_recv+0x78>
 8012bc0:	2400fe38 	.word	0x2400fe38

08012bc4 <es_wifi_send>:
{
 8012bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bc6:	b085      	sub	sp, #20
  if (flags != 0)
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d139      	bne.n	8012c40 <es_wifi_send+0x7c>
 8012bcc:	4604      	mov	r4, r0
 8012bce:	460f      	mov	r7, r1
 8012bd0:	4615      	mov	r5, r2
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012bd2:	2803      	cmp	r0, #3
 8012bd4:	d837      	bhi.n	8012c46 <es_wifi_send+0x82>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 8012bd6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012bda:	4a1e      	ldr	r2, [pc, #120]	; (8012c54 <es_wifi_send+0x90>)
 8012bdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012be0:	785b      	ldrb	r3, [r3, #1]
 8012be2:	f013 0f04 	tst.w	r3, #4
 8012be6:	d031      	beq.n	8012c4c <es_wifi_send+0x88>
    if (len > ES_WIFI_PAYLOAD_SIZE)
 8012be8:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8012bec:	dd01      	ble.n	8012bf2 <es_wifi_send+0x2e>
      len = ES_WIFI_PAYLOAD_SIZE;
 8012bee:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012bf2:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8012bf6:	4b17      	ldr	r3, [pc, #92]	; (8012c54 <es_wifi_send+0x90>)
 8012bf8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8012bfc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012bfe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012c02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012c04:	f7ff fa06 	bl	8012014 <castcontext>
                                              (uint32_t) WifiChannel[sock].sendtimeout))
 8012c08:	6973      	ldr	r3, [r6, #20]
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012c0a:	9301      	str	r3, [sp, #4]
 8012c0c:	f10d 030e 	add.w	r3, sp, #14
 8012c10:	9300      	str	r3, [sp, #0]
 8012c12:	b2ab      	uxth	r3, r5
 8012c14:	463a      	mov	r2, r7
 8012c16:	b2e1      	uxtb	r1, r4
 8012c18:	f7f5 fd70 	bl	80086fc <ES_WIFI_SendData>
 8012c1c:	b968      	cbnz	r0, 8012c3a <es_wifi_send+0x76>
      ret = (int32_t) SentDatalen;
 8012c1e:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 8012c22:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012c26:	480b      	ldr	r0, [pc, #44]	; (8012c54 <es_wifi_send+0x90>)
 8012c28:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012c30:	f7ff fd90 	bl	8012754 <check_connection_lost>
}
 8012c34:	4628      	mov	r0, r5
 8012c36:	b005      	add	sp, #20
 8012c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = NET_ERROR_SOCKET_FAILURE;
 8012c3a:	f06f 0512 	mvn.w	r5, #18
 8012c3e:	e7f0      	b.n	8012c22 <es_wifi_send+0x5e>
    ret = NET_ERROR_UNSUPPORTED;
 8012c40:	f06f 0502 	mvn.w	r5, #2
 8012c44:	e7f6      	b.n	8012c34 <es_wifi_send+0x70>
    ret = NET_ERROR_INVALID_SOCKET;
 8012c46:	f06f 0505 	mvn.w	r5, #5
 8012c4a:	e7f3      	b.n	8012c34 <es_wifi_send+0x70>
    ret = NET_ERROR_SOCKET_FAILURE;
 8012c4c:	f06f 0512 	mvn.w	r5, #18
  return ret;
 8012c50:	e7f0      	b.n	8012c34 <es_wifi_send+0x70>
 8012c52:	bf00      	nop
 8012c54:	2400fe38 	.word	0x2400fe38

08012c58 <es_wifi_accept>:
{
 8012c58:	b530      	push	{r4, r5, lr}
 8012c5a:	b087      	sub	sp, #28
 8012c5c:	4604      	mov	r4, r0
  sockaddr_in_t *addrin = cast2sockaddr_in(addr);
 8012c5e:	4608      	mov	r0, r1
 8012c60:	f7ff f9d9 	bl	8012016 <cast2sockaddr_in>
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012c64:	2c03      	cmp	r4, #3
 8012c66:	d834      	bhi.n	8012cd2 <es_wifi_accept+0x7a>
 8012c68:	4605      	mov	r5, r0
    conn.Number = (uint8_t) sock;
 8012c6a:	f88d 4006 	strb.w	r4, [sp, #6]
    status = ES_WIFI_WaitServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), 0, &conn);
 8012c6e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012c72:	4a19      	ldr	r2, [pc, #100]	; (8012cd8 <es_wifi_accept+0x80>)
 8012c74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c7a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012c7e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012c80:	f7ff f9c8 	bl	8012014 <castcontext>
 8012c84:	aa01      	add	r2, sp, #4
 8012c86:	2100      	movs	r1, #0
 8012c88:	f7f5 fc44 	bl	8008514 <ES_WIFI_WaitServerConnection>
    if (ES_WIFI_STATUS_OK == status)
 8012c8c:	b9e8      	cbnz	r0, 8012cca <es_wifi_accept+0x72>
      addrin->sin_port = NET_NTOHS(conn.RemotePort);
 8012c8e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012c92:	ba5b      	rev16	r3, r3
 8012c94:	806b      	strh	r3, [r5, #2]
      addrin->sin_addr.s_addr = NET_ARTON(conn.RemoteIP);
 8012c96:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012c9a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8012c9e:	041b      	lsls	r3, r3, #16
 8012ca0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012ca4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012ca8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012cac:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012cb0:	4313      	orrs	r3, r2
 8012cb2:	606b      	str	r3, [r5, #4]
      WifiChannel [sock].status |= WIFI_CONNECTED_SOCKET_RW | WIFI_STARTED_SERVER_SOCKET ;
 8012cb4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8012cb8:	4b07      	ldr	r3, [pc, #28]	; (8012cd8 <es_wifi_accept+0x80>)
 8012cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012cbe:	785a      	ldrb	r2, [r3, #1]
 8012cc0:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 8012cc4:	705a      	strb	r2, [r3, #1]
      ret = sock;
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	e001      	b.n	8012cce <es_wifi_accept+0x76>
      ret =  NET_ERROR_SOCKET_FAILURE;
 8012cca:	f06f 0012 	mvn.w	r0, #18
}
 8012cce:	b007      	add	sp, #28
 8012cd0:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 8012cd2:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8012cd6:	e7fa      	b.n	8012cce <es_wifi_accept+0x76>
 8012cd8:	2400fe38 	.word	0x2400fe38

08012cdc <es_wifi_listen>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012cdc:	2803      	cmp	r0, #3
 8012cde:	d826      	bhi.n	8012d2e <es_wifi_listen+0x52>
{
 8012ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ce4:	b086      	sub	sp, #24
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	460f      	mov	r7, r1
    ES_WIFIObject_t  *pEsWifiObj = castcontext(WifiChannel[sock].pnetif->pdrv->context);
 8012cea:	4d12      	ldr	r5, [pc, #72]	; (8012d34 <es_wifi_listen+0x58>)
 8012cec:	eb00 0680 	add.w	r6, r0, r0, lsl #2
 8012cf0:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8012cf4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012cf6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012cfa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012cfc:	f7ff f98a 	bl	8012014 <castcontext>
    conn.Number = (uint8_t) sock;
 8012d00:	f88d 4006 	strb.w	r4, [sp, #6]
    conn.LocalPort = WifiChannel[sock].localport;
 8012d04:	88b3      	ldrh	r3, [r6, #4]
 8012d06:	f8ad 300a 	strh.w	r3, [sp, #10]
    conn.Type = ES_WIFI_UDP_CONNECTION;
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_TCP)
 8012d10:	78b3      	ldrb	r3, [r6, #2]
 8012d12:	2b06      	cmp	r3, #6
 8012d14:	d007      	beq.n	8012d26 <es_wifi_listen+0x4a>
    conn.Backlog = (uint8_t) backlog;
 8012d16:	f88d 7014 	strb.w	r7, [sp, #20]
    ret = (int32_t) ES_WIFI_StartServerSingleConn(pEsWifiObj, &conn);
 8012d1a:	a901      	add	r1, sp, #4
 8012d1c:	f7f5 fb8e 	bl	800843c <ES_WIFI_StartServerSingleConn>
}
 8012d20:	b006      	add	sp, #24
 8012d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      conn.Type = ES_WIFI_TCP_CONNECTION;
 8012d26:	2300      	movs	r3, #0
 8012d28:	f88d 3004 	strb.w	r3, [sp, #4]
 8012d2c:	e7f3      	b.n	8012d16 <es_wifi_listen+0x3a>
    ret = NET_ERROR_INVALID_SOCKET;
 8012d2e:	f06f 0005 	mvn.w	r0, #5
}
 8012d32:	4770      	bx	lr
 8012d34:	2400fe38 	.word	0x2400fe38

08012d38 <es_wifi_if_disconnect>:
{
 8012d38:	b510      	push	{r4, lr}
 8012d3a:	4604      	mov	r4, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 8012d3c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012d40:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012d42:	f7ff f967 	bl	8012014 <castcontext>
  (void) ES_WIFI_Disconnect(pEsWifiObj);
 8012d46:	f7f5 f987 	bl	8008058 <ES_WIFI_Disconnect>
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8012d4a:	2107      	movs	r1, #7
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	f7ff f92b 	bl	8011fa8 <net_state_manage_event>
}
 8012d52:	2000      	movs	r0, #0
 8012d54:	bd10      	pop	{r4, pc}
	...

08012d58 <es_wifi_if_start>:
{
 8012d58:	b570      	push	{r4, r5, r6, lr}
 8012d5a:	4604      	mov	r4, r0
  if (wifi_probe(&pnetif->pdrv->context) == NET_OK)
 8012d5c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012d60:	302c      	adds	r0, #44	; 0x2c
 8012d62:	f7ef fffd 	bl	8002d60 <wifi_probe>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	d13f      	bne.n	8012dea <es_wifi_if_start+0x92>
 8012d6a:	4605      	mov	r5, r0
    pEsWifiObj = castcontext(pnetif->pdrv->context);
 8012d6c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8012d70:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012d72:	f7ff f94f 	bl	8012014 <castcontext>
 8012d76:	4606      	mov	r6, r0
    if (ES_WIFI_STATUS_OK != ES_WIFI_Init(pEsWifiObj))
 8012d78:	f7f5 f83a 	bl	8007df0 <ES_WIFI_Init>
 8012d7c:	bbc0      	cbnz	r0, 8012df0 <es_wifi_if_start+0x98>
      (void)strncpy(pnetif->DeviceName, (char_t *)pEsWifiObj->Product_Name, NET_DEVICE_NAME_LEN);
 8012d7e:	2240      	movs	r2, #64	; 0x40
 8012d80:	f106 0168 	add.w	r1, r6, #104	; 0x68
 8012d84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012d88:	f011 f925 	bl	8023fd6 <strncpy>
      (void) strncpy(pnetif->DeviceID, (char_t *)pEsWifiObj->Product_ID, NET_DEVICE_ID_LEN);
 8012d8c:	2240      	movs	r2, #64	; 0x40
 8012d8e:	4631      	mov	r1, r6
 8012d90:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8012d94:	f011 f91f 	bl	8023fd6 <strncpy>
      (void) strncpy(pnetif->DeviceVer, (char_t *)pEsWifiObj->FW_Rev, NET_DEVICE_VER_LEN);
 8012d98:	2240      	movs	r2, #64	; 0x40
 8012d9a:	f106 0120 	add.w	r1, r6, #32
 8012d9e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8012da2:	f011 f918 	bl	8023fd6 <strncpy>
      (void) ES_WIFI_GetMACAddress(pEsWifiObj, pnetif->macaddr.mac);
 8012da6:	f104 01e4 	add.w	r1, r4, #228	; 0xe4
 8012daa:	4630      	mov	r0, r6
 8012dac:	f7f5 f9ea 	bl	8008184 <ES_WIFI_GetMACAddress>
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8012db0:	462b      	mov	r3, r5
 8012db2:	e012      	b.n	8012dda <es_wifi_if_start+0x82>
        WifiChannel[i].status          = WIFI_FREE_SOCKET;
 8012db4:	4910      	ldr	r1, [pc, #64]	; (8012df8 <es_wifi_if_start+0xa0>)
 8012db6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8012dba:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 8012dbe:	f04f 0c00 	mov.w	ip, #0
 8012dc2:	f882 c001 	strb.w	ip, [r2, #1]
        WifiChannel[i].Number          = (uint8_t) i;
 8012dc6:	f801 3030 	strb.w	r3, [r1, r0, lsl #3]
        WifiChannel[i].recvtimeout     = MIN((NET_SOCK_DEFAULT_RECEIVE_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 8012dca:	f247 5130 	movw	r1, #30000	; 0x7530
 8012dce:	6191      	str	r1, [r2, #24]
        WifiChannel[i].sendtimeout     = MIN((NET_SOCK_DEFAULT_SEND_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 8012dd0:	6151      	str	r1, [r2, #20]
        WifiChannel[i].blocking        = 1; /* default blocking */
 8012dd2:	2101      	movs	r1, #1
 8012dd4:	6111      	str	r1, [r2, #16]
        WifiChannel[i].pnetif          = pnetif;
 8012dd6:	6254      	str	r4, [r2, #36]	; 0x24
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8012dd8:	440b      	add	r3, r1
 8012dda:	2b03      	cmp	r3, #3
 8012ddc:	ddea      	ble.n	8012db4 <es_wifi_if_start+0x5c>
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8012dde:	2107      	movs	r1, #7
 8012de0:	4620      	mov	r0, r4
 8012de2:	f7ff f8e1 	bl	8011fa8 <net_state_manage_event>
}
 8012de6:	4628      	mov	r0, r5
 8012de8:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_DEVICE_ERROR;
 8012dea:	f06f 050c 	mvn.w	r5, #12
 8012dee:	e7fa      	b.n	8012de6 <es_wifi_if_start+0x8e>
      ret = NET_ERROR_INTERFACE_FAILURE;
 8012df0:	f06f 0510 	mvn.w	r5, #16
  return ret;
 8012df4:	e7f7      	b.n	8012de6 <es_wifi_if_start+0x8e>
 8012df6:	bf00      	nop
 8012df8:	2400fe38 	.word	0x2400fe38

08012dfc <es_wifi_driver>:
{
 8012dfc:	b508      	push	{r3, lr}
  return es_wifi_if_init(pnetif);
 8012dfe:	f7ff fa51 	bl	80122a4 <es_wifi_if_init>
}
 8012e02:	bd08      	pop	{r3, pc}

08012e04 <GetESWifiSecurityType>:
  if (security == NET_WIFI_SM_OPEN)
 8012e04:	4603      	mov	r3, r0
 8012e06:	b1e8      	cbz	r0, 8012e44 <GetESWifiSecurityType+0x40>
  ES_WIFI_SecurityType_t        ret = ES_WIFI_SEC_UNKNOWN;
 8012e08:	20ff      	movs	r0, #255	; 0xff
  if (MATCH(security, NET_WEP_ENABLED))
 8012e0a:	f013 0f01 	tst.w	r3, #1
 8012e0e:	d000      	beq.n	8012e12 <GetESWifiSecurityType+0xe>
    ret = ES_WIFI_SEC_WEP;
 8012e10:	2001      	movs	r0, #1
  if (MATCH(security, NET_WIFI_SM_WPA_MIXED_PSK))
 8012e12:	4a14      	ldr	r2, [pc, #80]	; (8012e64 <GetESWifiSecurityType+0x60>)
 8012e14:	439a      	bics	r2, r3
 8012e16:	d017      	beq.n	8012e48 <GetESWifiSecurityType+0x44>
  if (MATCH(security, NET_WIFI_SM_WPA_TKIP_PSK))
 8012e18:	4a13      	ldr	r2, [pc, #76]	; (8012e68 <GetESWifiSecurityType+0x64>)
 8012e1a:	439a      	bics	r2, r3
 8012e1c:	d016      	beq.n	8012e4c <GetESWifiSecurityType+0x48>
  if (MATCH(security, NET_WIFI_SM_WPA_AES_PSK))
 8012e1e:	4a13      	ldr	r2, [pc, #76]	; (8012e6c <GetESWifiSecurityType+0x68>)
 8012e20:	439a      	bics	r2, r3
 8012e22:	d015      	beq.n	8012e50 <GetESWifiSecurityType+0x4c>
  if (MATCH(security, NET_WIFI_SM_WPA2_WPA_PSK))
 8012e24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8012e28:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8012e2c:	d012      	beq.n	8012e54 <GetESWifiSecurityType+0x50>
  if (MATCH(security, NET_WIFI_SM_WPA2_TKIP_PSK))
 8012e2e:	4a10      	ldr	r2, [pc, #64]	; (8012e70 <GetESWifiSecurityType+0x6c>)
 8012e30:	439a      	bics	r2, r3
 8012e32:	d011      	beq.n	8012e58 <GetESWifiSecurityType+0x54>
  if (MATCH(security, NET_WIFI_SM_WPA2_AES_PSK))
 8012e34:	4a0f      	ldr	r2, [pc, #60]	; (8012e74 <GetESWifiSecurityType+0x70>)
 8012e36:	439a      	bics	r2, r3
 8012e38:	d010      	beq.n	8012e5c <GetESWifiSecurityType+0x58>
  if (MATCH(security, NET_WIFI_SM_WPA2_MIXED_PSK))
 8012e3a:	4a0f      	ldr	r2, [pc, #60]	; (8012e78 <GetESWifiSecurityType+0x74>)
 8012e3c:	ea32 0303 	bics.w	r3, r2, r3
 8012e40:	d00e      	beq.n	8012e60 <GetESWifiSecurityType+0x5c>
}
 8012e42:	4770      	bx	lr
    ret = ES_WIFI_SEC_OPEN;
 8012e44:	2000      	movs	r0, #0
 8012e46:	e7e0      	b.n	8012e0a <GetESWifiSecurityType+0x6>
    ret = ES_WIFI_SEC_WPA;
 8012e48:	2002      	movs	r0, #2
 8012e4a:	e7e5      	b.n	8012e18 <GetESWifiSecurityType+0x14>
    ret = ES_WIFI_SEC_WPA;
 8012e4c:	2002      	movs	r0, #2
 8012e4e:	e7e6      	b.n	8012e1e <GetESWifiSecurityType+0x1a>
    ret = ES_WIFI_SEC_WPA;
 8012e50:	2002      	movs	r0, #2
 8012e52:	e7e7      	b.n	8012e24 <GetESWifiSecurityType+0x20>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8012e54:	2004      	movs	r0, #4
 8012e56:	e7ea      	b.n	8012e2e <GetESWifiSecurityType+0x2a>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8012e58:	2004      	movs	r0, #4
 8012e5a:	e7eb      	b.n	8012e34 <GetESWifiSecurityType+0x30>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8012e5c:	2004      	movs	r0, #4
 8012e5e:	e7ec      	b.n	8012e3a <GetESWifiSecurityType+0x36>
    ret = ES_WIFI_SEC_WPA_WPA2;
 8012e60:	2004      	movs	r0, #4
 8012e62:	e7ee      	b.n	8012e42 <GetESWifiSecurityType+0x3e>
 8012e64:	00200006 	.word	0x00200006
 8012e68:	00200002 	.word	0x00200002
 8012e6c:	00200004 	.word	0x00200004
 8012e70:	00400002 	.word	0x00400002
 8012e74:	00400004 	.word	0x00400004
 8012e78:	00400006 	.word	0x00400006

08012e7c <es_wifi_if_connect_sta>:
{
 8012e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 8012e82:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
 8012e86:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8012e88:	f7ff f8c4 	bl	8012014 <castcontext>
 8012e8c:	4604      	mov	r4, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 8012e8e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8012e90:	695b      	ldr	r3, [r3, #20]
  ret = ES_WIFI_Connect(pEsWifiObj, credentials->ssid, credentials->psk,
 8012e92:	681e      	ldr	r6, [r3, #0]
 8012e94:	685f      	ldr	r7, [r3, #4]
 8012e96:	6898      	ldr	r0, [r3, #8]
 8012e98:	f7ff ffb4 	bl	8012e04 <GetESWifiSecurityType>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	463a      	mov	r2, r7
 8012ea0:	4631      	mov	r1, r6
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	f7f5 f874 	bl	8007f90 <ES_WIFI_Connect>
  if (ret == ES_WIFI_STATUS_OK)
 8012ea8:	4606      	mov	r6, r0
 8012eaa:	b138      	cbz	r0, 8012ebc <es_wifi_if_connect_sta+0x40>
  if (ES_WIFI_STATUS_OK == ret)
 8012eac:	b91e      	cbnz	r6, 8012eb6 <es_wifi_if_connect_sta+0x3a>
    if (pEsWifiObj->NetSettings.IsConnected != 0U)
 8012eae:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 8012eb2:	b943      	cbnz	r3, 8012ec6 <es_wifi_if_connect_sta+0x4a>
      ret = ES_WIFI_STATUS_ERROR;
 8012eb4:	2602      	movs	r6, #2
}
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	b003      	add	sp, #12
 8012eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = ES_WIFI_GetNetworkSettings(pEsWifiObj);
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	f7f5 f8db 	bl	8008078 <ES_WIFI_GetNetworkSettings>
 8012ec2:	4606      	mov	r6, r0
 8012ec4:	e7f2      	b.n	8012eac <es_wifi_if_connect_sta+0x30>
      (void) memcpy(addr, pEsWifiObj->NetSettings.IP_Addr, 4);
 8012ec6:	f8d4 20d5 	ldr.w	r2, [r4, #213]	; 0xd5
 8012eca:	9201      	str	r2, [sp, #4]
      pnetif->ipaddr.addr = NET_ARTON(addr);
 8012ecc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8012ed0:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
 8012ed4:	430b      	orrs	r3, r1
 8012ed6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8012eda:	430b      	orrs	r3, r1
 8012edc:	b2d2      	uxtb	r2, r2
 8012ede:	4313      	orrs	r3, r2
 8012ee0:	606b      	str	r3, [r5, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8012ee2:	210a      	movs	r1, #10
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	f7ff f85f 	bl	8011fa8 <net_state_manage_event>
      ret = ES_WIFI_STATUS_OK;
 8012eea:	e7e4      	b.n	8012eb6 <es_wifi_if_connect_sta+0x3a>

08012eec <es_wifi_if_connect_ap>:
{
 8012eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eee:	b093      	sub	sp, #76	; 0x4c
 8012ef0:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 8012ef2:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
 8012ef6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012ef8:	f7ff f88c 	bl	8012014 <castcontext>
 8012efc:	4606      	mov	r6, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 8012efe:	6f64      	ldr	r4, [r4, #116]	; 0x74
 8012f00:	6967      	ldr	r7, [r4, #20]
  (void) strncpy((char_t *) ApConfig.SSID, credentials->ssid, sizeof(ApConfig.SSID));
 8012f02:	2221      	movs	r2, #33	; 0x21
 8012f04:	6839      	ldr	r1, [r7, #0]
 8012f06:	4668      	mov	r0, sp
 8012f08:	f011 f865 	bl	8023fd6 <strncpy>
  (void) strncpy((char_t *) ApConfig.Pass, credentials->psk, sizeof(ApConfig.SSID));
 8012f0c:	2221      	movs	r2, #33	; 0x21
 8012f0e:	6879      	ldr	r1, [r7, #4]
 8012f10:	eb0d 0002 	add.w	r0, sp, r2
 8012f14:	f011 f85f 	bl	8023fd6 <strncpy>
  ApConfig.Security = GetESWifiSecurityType(credentials->security_mode);
 8012f18:	68b8      	ldr	r0, [r7, #8]
 8012f1a:	f7ff ff73 	bl	8012e04 <GetESWifiSecurityType>
 8012f1e:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
  ApConfig.Channel = pnetif->pdrv->extension.wifi->access_channel;
 8012f22:	7e63      	ldrb	r3, [r4, #25]
 8012f24:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  ApConfig.MaxConnections = pnetif->pdrv->extension.wifi->max_connections;
 8012f28:	7ea3      	ldrb	r3, [r4, #26]
 8012f2a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (pnetif->pdrv->extension.wifi->AP_hidden)
 8012f2e:	7ee3      	ldrb	r3, [r4, #27]
 8012f30:	b15b      	cbz	r3, 8012f4a <es_wifi_if_connect_ap+0x5e>
    ApConfig.Hidden = 1;
 8012f32:	2301      	movs	r3, #1
 8012f34:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  ret = ES_WIFI_ActivateAP(pEsWifiObj, &ApConfig);
 8012f38:	4669      	mov	r1, sp
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	f7f5 f8b6 	bl	80080ac <ES_WIFI_ActivateAP>
  if (ret == ES_WIFI_STATUS_OK)
 8012f40:	4604      	mov	r4, r0
 8012f42:	b130      	cbz	r0, 8012f52 <es_wifi_if_connect_ap+0x66>
}
 8012f44:	4620      	mov	r0, r4
 8012f46:	b013      	add	sp, #76	; 0x4c
 8012f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ApConfig.Hidden = 0;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8012f50:	e7f2      	b.n	8012f38 <es_wifi_if_connect_ap+0x4c>
    (void) NET_ATON("192.168.10.1", &(pnetif->ipaddr));
 8012f52:	1d29      	adds	r1, r5, #4
 8012f54:	4803      	ldr	r0, [pc, #12]	; (8012f64 <es_wifi_if_connect_ap+0x78>)
 8012f56:	f7fe fcbe 	bl	80118d6 <net_aton>
    (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8012f5a:	210a      	movs	r1, #10
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	f7ff f823 	bl	8011fa8 <net_state_manage_event>
    ret = ES_WIFI_STATUS_OK;
 8012f62:	e7ef      	b.n	8012f44 <es_wifi_if_connect_ap+0x58>
 8012f64:	08026894 	.word	0x08026894

08012f68 <es_wifi_if_connect>:
{
 8012f68:	b508      	push	{r3, lr}
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 8012f6a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f70:	7e1b      	ldrb	r3, [r3, #24]
 8012f72:	b913      	cbnz	r3, 8012f7a <es_wifi_if_connect+0x12>
    ret =  es_wifi_if_connect_sta(pnetif);
 8012f74:	f7ff ff82 	bl	8012e7c <es_wifi_if_connect_sta>
}
 8012f78:	bd08      	pop	{r3, pc}
    ret =  es_wifi_if_connect_ap(pnetif);
 8012f7a:	f7ff ffb7 	bl	8012eec <es_wifi_if_connect_ap>
  return ret;
 8012f7e:	e7fb      	b.n	8012f78 <es_wifi_if_connect+0x10>

08012f80 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012f80:	8880      	ldrh	r0, [r0, #4]
 8012f82:	4770      	bx	lr

08012f84 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012f84:	b570      	push	{r4, r5, r6, lr}
 8012f86:	6803      	ldr	r3, [r0, #0]
 8012f88:	460c      	mov	r4, r1
 8012f8a:	2100      	movs	r1, #0
 8012f8c:	4605      	mov	r5, r0
 8012f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f90:	4798      	blx	r3
 8012f92:	4606      	mov	r6, r0
 8012f94:	682b      	ldr	r3, [r5, #0]
 8012f96:	4628      	mov	r0, r5
 8012f98:	1ba4      	subs	r4, r4, r6
 8012f9a:	6a1b      	ldr	r3, [r3, #32]
 8012f9c:	b2a4      	uxth	r4, r4
 8012f9e:	4798      	blx	r3
 8012fa0:	fbb4 f0f0 	udiv	r0, r4, r0
 8012fa4:	bd70      	pop	{r4, r5, r6, pc}

08012fa6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	8083      	strh	r3, [r0, #4]
 8012faa:	4770      	bx	lr

08012fac <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012fac:	b510      	push	{r4, lr}
 8012fae:	6803      	ldr	r3, [r0, #0]
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	8881      	ldrh	r1, [r0, #4]
 8012fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fb6:	4798      	blx	r3
 8012fb8:	88a3      	ldrh	r3, [r4, #4]
 8012fba:	3301      	adds	r3, #1
 8012fbc:	80a3      	strh	r3, [r4, #4]
 8012fbe:	bd10      	pop	{r4, pc}

08012fc0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012fc0:	6803      	ldr	r3, [r0, #0]
 8012fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc4:	4718      	bx	r3

08012fc6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012fc6:	4770      	bx	lr

08012fc8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012fc8:	4a02      	ldr	r2, [pc, #8]	; (8012fd4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012fca:	6002      	str	r2, [r0, #0]
 8012fcc:	2200      	movs	r2, #0
 8012fce:	8082      	strh	r2, [r0, #4]
 8012fd0:	4770      	bx	lr
 8012fd2:	bf00      	nop
 8012fd4:	080268ac 	.word	0x080268ac

08012fd8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012fd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012fda:	2000      	movs	r0, #0
 8012fdc:	b12b      	cbz	r3, 8012fea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012fde:	b920      	cbnz	r0, 8012fea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012fe0:	1a5a      	subs	r2, r3, r1
 8012fe2:	699b      	ldr	r3, [r3, #24]
 8012fe4:	4250      	negs	r0, r2
 8012fe6:	4150      	adcs	r0, r2
 8012fe8:	e7f8      	b.n	8012fdc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012fea:	4770      	bx	lr

08012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012fec:	2300      	movs	r3, #0
 8012fee:	6148      	str	r0, [r1, #20]
 8012ff0:	618b      	str	r3, [r1, #24]
 8012ff2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012ff4:	b913      	cbnz	r3, 8012ffc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012ff6:	6281      	str	r1, [r0, #40]	; 0x28
 8012ff8:	4770      	bx	lr
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	699a      	ldr	r2, [r3, #24]
 8012ffe:	2a00      	cmp	r2, #0
 8013000:	d1fb      	bne.n	8012ffa <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013002:	6199      	str	r1, [r3, #24]
 8013004:	4770      	bx	lr

08013006 <_ZN8touchgfx9Container9removeAllEv>:
 8013006:	2200      	movs	r2, #0
 8013008:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801300a:	b123      	cbz	r3, 8013016 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801300c:	6999      	ldr	r1, [r3, #24]
 801300e:	6281      	str	r1, [r0, #40]	; 0x28
 8013010:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013014:	e7f8      	b.n	8013008 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013016:	4770      	bx	lr

08013018 <_ZN8touchgfx9Container6unlinkEv>:
 8013018:	2300      	movs	r3, #0
 801301a:	6283      	str	r3, [r0, #40]	; 0x28
 801301c:	4770      	bx	lr

0801301e <_ZNK8touchgfx9Container12getSolidRectEv>:
 801301e:	2200      	movs	r2, #0
 8013020:	8002      	strh	r2, [r0, #0]
 8013022:	8042      	strh	r2, [r0, #2]
 8013024:	8082      	strh	r2, [r0, #4]
 8013026:	80c2      	strh	r2, [r0, #6]
 8013028:	4770      	bx	lr

0801302a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801302a:	b570      	push	{r4, r5, r6, lr}
 801302c:	460d      	mov	r5, r1
 801302e:	4616      	mov	r6, r2
 8013030:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013032:	b13c      	cbz	r4, 8013044 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013034:	6823      	ldr	r3, [r4, #0]
 8013036:	4620      	mov	r0, r4
 8013038:	4632      	mov	r2, r6
 801303a:	4629      	mov	r1, r5
 801303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801303e:	4798      	blx	r3
 8013040:	69a4      	ldr	r4, [r4, #24]
 8013042:	e7f6      	b.n	8013032 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013044:	bd70      	pop	{r4, r5, r6, pc}

08013046 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013046:	b538      	push	{r3, r4, r5, lr}
 8013048:	460d      	mov	r5, r1
 801304a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801304c:	b134      	cbz	r4, 801305c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801304e:	682b      	ldr	r3, [r5, #0]
 8013050:	4621      	mov	r1, r4
 8013052:	4628      	mov	r0, r5
 8013054:	689b      	ldr	r3, [r3, #8]
 8013056:	4798      	blx	r3
 8013058:	69a4      	ldr	r4, [r4, #24]
 801305a:	e7f7      	b.n	801304c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801305c:	bd38      	pop	{r3, r4, r5, pc}

0801305e <_ZNK8touchgfx9Container17invalidateContentEv>:
 801305e:	b510      	push	{r4, lr}
 8013060:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013062:	b12c      	cbz	r4, 8013070 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8013064:	6823      	ldr	r3, [r4, #0]
 8013066:	4620      	mov	r0, r4
 8013068:	699b      	ldr	r3, [r3, #24]
 801306a:	4798      	blx	r3
 801306c:	69a4      	ldr	r4, [r4, #24]
 801306e:	e7f8      	b.n	8013062 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8013070:	bd10      	pop	{r4, pc}

08013072 <_ZN8touchgfx9ContainerD1Ev>:
 8013072:	4770      	bx	lr

08013074 <_ZN8touchgfx9ContainerD0Ev>:
 8013074:	b510      	push	{r4, lr}
 8013076:	4604      	mov	r4, r0
 8013078:	212c      	movs	r1, #44	; 0x2c
 801307a:	f010 f8dc 	bl	8023236 <_ZdlPvj>
 801307e:	4620      	mov	r0, r4
 8013080:	bd10      	pop	{r4, pc}

08013082 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013082:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013084:	b19b      	cbz	r3, 80130ae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013086:	428b      	cmp	r3, r1
 8013088:	d109      	bne.n	801309e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801308a:	699a      	ldr	r2, [r3, #24]
 801308c:	2100      	movs	r1, #0
 801308e:	6159      	str	r1, [r3, #20]
 8013090:	6282      	str	r2, [r0, #40]	; 0x28
 8013092:	b902      	cbnz	r2, 8013096 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013094:	4770      	bx	lr
 8013096:	6199      	str	r1, [r3, #24]
 8013098:	4770      	bx	lr
 801309a:	4613      	mov	r3, r2
 801309c:	b13a      	cbz	r2, 80130ae <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801309e:	699a      	ldr	r2, [r3, #24]
 80130a0:	428a      	cmp	r2, r1
 80130a2:	d1fa      	bne.n	801309a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80130a4:	698a      	ldr	r2, [r1, #24]
 80130a6:	619a      	str	r2, [r3, #24]
 80130a8:	2300      	movs	r3, #0
 80130aa:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80130ae:	4770      	bx	lr

080130b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80130b0:	b410      	push	{r4}
 80130b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80130b4:	4604      	mov	r4, r0
 80130b6:	b92b      	cbnz	r3, 80130c4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80130b8:	6803      	ldr	r3, [r0, #0]
 80130ba:	4611      	mov	r1, r2
 80130bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80130c2:	4718      	bx	r3
 80130c4:	b941      	cbnz	r1, 80130d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80130c6:	6193      	str	r3, [r2, #24]
 80130c8:	6282      	str	r2, [r0, #40]	; 0x28
 80130ca:	6154      	str	r4, [r2, #20]
 80130cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130d0:	4770      	bx	lr
 80130d2:	4603      	mov	r3, r0
 80130d4:	2800      	cmp	r0, #0
 80130d6:	d0f9      	beq.n	80130cc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80130d8:	4299      	cmp	r1, r3
 80130da:	6998      	ldr	r0, [r3, #24]
 80130dc:	d1f9      	bne.n	80130d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80130de:	6190      	str	r0, [r2, #24]
 80130e0:	618a      	str	r2, [r1, #24]
 80130e2:	e7f2      	b.n	80130ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080130e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80130e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e8:	461f      	mov	r7, r3
 80130ea:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80130ee:	460d      	mov	r5, r1
 80130f0:	4616      	mov	r6, r2
 80130f2:	b103      	cbz	r3, 80130f6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80130f4:	6038      	str	r0, [r7, #0]
 80130f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80130f8:	b314      	cbz	r4, 8013140 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80130fa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80130fe:	b1eb      	cbz	r3, 801313c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013100:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013104:	428d      	cmp	r5, r1
 8013106:	db19      	blt.n	801313c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013108:	b289      	uxth	r1, r1
 801310a:	8923      	ldrh	r3, [r4, #8]
 801310c:	440b      	add	r3, r1
 801310e:	b21b      	sxth	r3, r3
 8013110:	429d      	cmp	r5, r3
 8013112:	da13      	bge.n	801313c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013114:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013118:	4296      	cmp	r6, r2
 801311a:	db0f      	blt.n	801313c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801311c:	b292      	uxth	r2, r2
 801311e:	8963      	ldrh	r3, [r4, #10]
 8013120:	4413      	add	r3, r2
 8013122:	b21b      	sxth	r3, r3
 8013124:	429e      	cmp	r6, r3
 8013126:	da09      	bge.n	801313c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013128:	6823      	ldr	r3, [r4, #0]
 801312a:	1ab2      	subs	r2, r6, r2
 801312c:	1a69      	subs	r1, r5, r1
 801312e:	4620      	mov	r0, r4
 8013130:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8013134:	b212      	sxth	r2, r2
 8013136:	463b      	mov	r3, r7
 8013138:	b209      	sxth	r1, r1
 801313a:	47c0      	blx	r8
 801313c:	69a4      	ldr	r4, [r4, #24]
 801313e:	e7db      	b.n	80130f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013144 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013148:	4c6d      	ldr	r4, [pc, #436]	; (8013300 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801314a:	b0a1      	sub	sp, #132	; 0x84
 801314c:	4606      	mov	r6, r0
 801314e:	6824      	ldr	r4, [r4, #0]
 8013150:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013152:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8013156:	2400      	movs	r4, #0
 8013158:	9303      	str	r3, [sp, #12]
 801315a:	802c      	strh	r4, [r5, #0]
 801315c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801315e:	802c      	strh	r4, [r5, #0]
 8013160:	601c      	str	r4, [r3, #0]
 8013162:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013166:	f7ff ffbd 	bl	80130e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801316a:	f1b9 0f03 	cmp.w	r9, #3
 801316e:	f340 80c1 	ble.w	80132f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8013172:	4631      	mov	r1, r6
 8013174:	a80c      	add	r0, sp, #48	; 0x30
 8013176:	f005 ff4d 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801317a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801317e:	9306      	str	r3, [sp, #24]
 8013180:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013184:	9307      	str	r3, [sp, #28]
 8013186:	9b03      	ldr	r3, [sp, #12]
 8013188:	f8d3 a000 	ldr.w	sl, [r3]
 801318c:	f1ba 0f00 	cmp.w	sl, #0
 8013190:	f000 80b3 	beq.w	80132fa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8013194:	4651      	mov	r1, sl
 8013196:	a810      	add	r0, sp, #64	; 0x40
 8013198:	f005 ff3c 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801319c:	2002      	movs	r0, #2
 801319e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80131a2:	9b01      	ldr	r3, [sp, #4]
 80131a4:	9a06      	ldr	r2, [sp, #24]
 80131a6:	fb91 f1f0 	sdiv	r1, r1, r0
 80131aa:	189d      	adds	r5, r3, r2
 80131ac:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80131b0:	9a07      	ldr	r2, [sp, #28]
 80131b2:	4419      	add	r1, r3
 80131b4:	9b02      	ldr	r3, [sp, #8]
 80131b6:	4413      	add	r3, r2
 80131b8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80131bc:	1a6d      	subs	r5, r5, r1
 80131be:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80131c2:	fb92 f2f0 	sdiv	r2, r2, r0
 80131c6:	440a      	add	r2, r1
 80131c8:	1a9b      	subs	r3, r3, r2
 80131ca:	435b      	muls	r3, r3
 80131cc:	fb05 3505 	mla	r5, r5, r5, r3
 80131d0:	4f4c      	ldr	r7, [pc, #304]	; (8013304 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80131d2:	ac10      	add	r4, sp, #64	; 0x40
 80131d4:	f1b9 0f0c 	cmp.w	r9, #12
 80131d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80131da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80131de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80131e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131e4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80131e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80131ec:	f04f 0303 	mov.w	r3, #3
 80131f0:	bfd8      	it	le
 80131f2:	f109 32ff 	addle.w	r2, r9, #4294967295
 80131f6:	f04f 0400 	mov.w	r4, #0
 80131fa:	f8cd 9000 	str.w	r9, [sp]
 80131fe:	bfcc      	ite	gt
 8013200:	4698      	movgt	r8, r3
 8013202:	fb92 f8f3 	sdivle	r8, r2, r3
 8013206:	1c63      	adds	r3, r4, #1
 8013208:	aa10      	add	r2, sp, #64	; 0x40
 801320a:	f004 0401 	and.w	r4, r4, #1
 801320e:	f04f 0b00 	mov.w	fp, #0
 8013212:	9308      	str	r3, [sp, #32]
 8013214:	9b00      	ldr	r3, [sp, #0]
 8013216:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801321a:	fb93 f3f8 	sdiv	r3, r3, r8
 801321e:	3404      	adds	r4, #4
 8013220:	b29b      	uxth	r3, r3
 8013222:	9304      	str	r3, [sp, #16]
 8013224:	9a04      	ldr	r2, [sp, #16]
 8013226:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801322a:	fb13 f302 	smulbb	r3, r3, r2
 801322e:	9a01      	ldr	r2, [sp, #4]
 8013230:	b29b      	uxth	r3, r3
 8013232:	1899      	adds	r1, r3, r2
 8013234:	9305      	str	r3, [sp, #20]
 8013236:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801323a:	b209      	sxth	r1, r1
 801323c:	4299      	cmp	r1, r3
 801323e:	db4d      	blt.n	80132dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013240:	8932      	ldrh	r2, [r6, #8]
 8013242:	4413      	add	r3, r2
 8013244:	b21b      	sxth	r3, r3
 8013246:	4299      	cmp	r1, r3
 8013248:	da48      	bge.n	80132dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801324a:	9b04      	ldr	r3, [sp, #16]
 801324c:	6827      	ldr	r7, [r4, #0]
 801324e:	fb17 f703 	smulbb	r7, r7, r3
 8013252:	9b02      	ldr	r3, [sp, #8]
 8013254:	b2bf      	uxth	r7, r7
 8013256:	18fa      	adds	r2, r7, r3
 8013258:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801325c:	b212      	sxth	r2, r2
 801325e:	429a      	cmp	r2, r3
 8013260:	db3c      	blt.n	80132dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013262:	8970      	ldrh	r0, [r6, #10]
 8013264:	4403      	add	r3, r0
 8013266:	b21b      	sxth	r3, r3
 8013268:	429a      	cmp	r2, r3
 801326a:	da37      	bge.n	80132dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801326c:	2300      	movs	r3, #0
 801326e:	4630      	mov	r0, r6
 8013270:	930b      	str	r3, [sp, #44]	; 0x2c
 8013272:	ab0b      	add	r3, sp, #44	; 0x2c
 8013274:	f7ff ff36 	bl	80130e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801327a:	b37a      	cbz	r2, 80132dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801327c:	4552      	cmp	r2, sl
 801327e:	d02d      	beq.n	80132dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013280:	4611      	mov	r1, r2
 8013282:	a80e      	add	r0, sp, #56	; 0x38
 8013284:	9209      	str	r2, [sp, #36]	; 0x24
 8013286:	f005 fec5 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801328a:	f04f 0e02 	mov.w	lr, #2
 801328e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8013292:	9a06      	ldr	r2, [sp, #24]
 8013294:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8013298:	9b01      	ldr	r3, [sp, #4]
 801329a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801329e:	4413      	add	r3, r2
 80132a0:	9a07      	ldr	r2, [sp, #28]
 80132a2:	fb91 f1fe 	sdiv	r1, r1, lr
 80132a6:	fb9c fcfe 	sdiv	ip, ip, lr
 80132aa:	4401      	add	r1, r0
 80132ac:	1a58      	subs	r0, r3, r1
 80132ae:	9b02      	ldr	r3, [sp, #8]
 80132b0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80132b4:	4413      	add	r3, r2
 80132b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132b8:	448c      	add	ip, r1
 80132ba:	eba3 030c 	sub.w	r3, r3, ip
 80132be:	435b      	muls	r3, r3
 80132c0:	fb00 3300 	mla	r3, r0, r0, r3
 80132c4:	42ab      	cmp	r3, r5
 80132c6:	d208      	bcs.n	80132da <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80132c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80132ca:	461d      	mov	r5, r3
 80132cc:	9803      	ldr	r0, [sp, #12]
 80132ce:	6001      	str	r1, [r0, #0]
 80132d0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80132d2:	9805      	ldr	r0, [sp, #20]
 80132d4:	8008      	strh	r0, [r1, #0]
 80132d6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80132d8:	800f      	strh	r7, [r1, #0]
 80132da:	4692      	mov	sl, r2
 80132dc:	f10b 0b01 	add.w	fp, fp, #1
 80132e0:	3408      	adds	r4, #8
 80132e2:	f1bb 0f04 	cmp.w	fp, #4
 80132e6:	d19d      	bne.n	8013224 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80132e8:	9b00      	ldr	r3, [sp, #0]
 80132ea:	9c08      	ldr	r4, [sp, #32]
 80132ec:	444b      	add	r3, r9
 80132ee:	4544      	cmp	r4, r8
 80132f0:	9300      	str	r3, [sp, #0]
 80132f2:	d188      	bne.n	8013206 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80132f4:	b021      	add	sp, #132	; 0x84
 80132f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132fa:	f04f 35ff 	mov.w	r5, #4294967295
 80132fe:	e767      	b.n	80131d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8013300:	2400fee4 	.word	0x2400fee4
 8013304:	0802496c 	.word	0x0802496c

08013308 <_ZN8touchgfx4RectaNERKS0_>:
 8013308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801330c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8013310:	888c      	ldrh	r4, [r1, #4]
 8013312:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013316:	443c      	add	r4, r7
 8013318:	b2a4      	uxth	r4, r4
 801331a:	fa0f f884 	sxth.w	r8, r4
 801331e:	45c1      	cmp	r9, r8
 8013320:	da2f      	bge.n	8013382 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013322:	8882      	ldrh	r2, [r0, #4]
 8013324:	444a      	add	r2, r9
 8013326:	b292      	uxth	r2, r2
 8013328:	fa0f fe82 	sxth.w	lr, r2
 801332c:	4577      	cmp	r7, lr
 801332e:	da28      	bge.n	8013382 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013330:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013334:	88cb      	ldrh	r3, [r1, #6]
 8013336:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801333a:	442b      	add	r3, r5
 801333c:	b21b      	sxth	r3, r3
 801333e:	429e      	cmp	r6, r3
 8013340:	da1f      	bge.n	8013382 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013342:	88c3      	ldrh	r3, [r0, #6]
 8013344:	4433      	add	r3, r6
 8013346:	b29b      	uxth	r3, r3
 8013348:	fa0f fc83 	sxth.w	ip, r3
 801334c:	4565      	cmp	r5, ip
 801334e:	da18      	bge.n	8013382 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8013350:	454f      	cmp	r7, r9
 8013352:	bfb8      	it	lt
 8013354:	464f      	movlt	r7, r9
 8013356:	42b5      	cmp	r5, r6
 8013358:	bfb8      	it	lt
 801335a:	4635      	movlt	r5, r6
 801335c:	45f0      	cmp	r8, lr
 801335e:	bfd8      	it	le
 8013360:	4622      	movle	r2, r4
 8013362:	1bd2      	subs	r2, r2, r7
 8013364:	8082      	strh	r2, [r0, #4]
 8013366:	884a      	ldrh	r2, [r1, #2]
 8013368:	88c9      	ldrh	r1, [r1, #6]
 801336a:	8007      	strh	r7, [r0, #0]
 801336c:	440a      	add	r2, r1
 801336e:	8045      	strh	r5, [r0, #2]
 8013370:	b292      	uxth	r2, r2
 8013372:	b211      	sxth	r1, r2
 8013374:	458c      	cmp	ip, r1
 8013376:	bfa8      	it	ge
 8013378:	4613      	movge	r3, r2
 801337a:	1b5b      	subs	r3, r3, r5
 801337c:	80c3      	strh	r3, [r0, #6]
 801337e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013382:	2300      	movs	r3, #0
 8013384:	8003      	strh	r3, [r0, #0]
 8013386:	8043      	strh	r3, [r0, #2]
 8013388:	8083      	strh	r3, [r0, #4]
 801338a:	80c3      	strh	r3, [r0, #6]
 801338c:	e7f7      	b.n	801337e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801338e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801338e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013392:	2b00      	cmp	r3, #0
 8013394:	dd06      	ble.n	80133a4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8013396:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801339a:	2800      	cmp	r0, #0
 801339c:	bfcc      	ite	gt
 801339e:	2000      	movgt	r0, #0
 80133a0:	2001      	movle	r0, #1
 80133a2:	4770      	bx	lr
 80133a4:	2001      	movs	r0, #1
 80133a6:	4770      	bx	lr

080133a8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80133a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ac:	2300      	movs	r3, #0
 80133ae:	4604      	mov	r4, r0
 80133b0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80133b2:	8003      	strh	r3, [r0, #0]
 80133b4:	8043      	strh	r3, [r0, #2]
 80133b6:	8083      	strh	r3, [r0, #4]
 80133b8:	80c3      	strh	r3, [r0, #6]
 80133ba:	2d00      	cmp	r5, #0
 80133bc:	d040      	beq.n	8013440 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80133be:	1d28      	adds	r0, r5, #4
 80133c0:	f7ff ffe5 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 80133c4:	b988      	cbnz	r0, 80133ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80133c6:	4620      	mov	r0, r4
 80133c8:	f7ff ffe1 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 80133cc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80133d0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80133d4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80133d8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80133dc:	b138      	cbz	r0, 80133ee <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80133de:	8022      	strh	r2, [r4, #0]
 80133e0:	8063      	strh	r3, [r4, #2]
 80133e2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80133e6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80133ea:	69ad      	ldr	r5, [r5, #24]
 80133ec:	e7e5      	b.n	80133ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80133ee:	f9b4 0000 	ldrsh.w	r0, [r4]
 80133f2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80133f6:	4290      	cmp	r0, r2
 80133f8:	4607      	mov	r7, r0
 80133fa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80133fe:	460e      	mov	r6, r1
 8013400:	bfa8      	it	ge
 8013402:	4617      	movge	r7, r2
 8013404:	4299      	cmp	r1, r3
 8013406:	4472      	add	r2, lr
 8013408:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801340c:	bfa8      	it	ge
 801340e:	461e      	movge	r6, r3
 8013410:	4440      	add	r0, r8
 8013412:	4471      	add	r1, lr
 8013414:	4463      	add	r3, ip
 8013416:	b200      	sxth	r0, r0
 8013418:	8027      	strh	r7, [r4, #0]
 801341a:	b212      	sxth	r2, r2
 801341c:	8066      	strh	r6, [r4, #2]
 801341e:	b209      	sxth	r1, r1
 8013420:	b21b      	sxth	r3, r3
 8013422:	4290      	cmp	r0, r2
 8013424:	bfac      	ite	ge
 8013426:	ebc7 0200 	rsbge	r2, r7, r0
 801342a:	ebc7 0202 	rsblt	r2, r7, r2
 801342e:	4299      	cmp	r1, r3
 8013430:	bfac      	ite	ge
 8013432:	ebc6 0301 	rsbge	r3, r6, r1
 8013436:	ebc6 0303 	rsblt	r3, r6, r3
 801343a:	80a2      	strh	r2, [r4, #4]
 801343c:	80e3      	strh	r3, [r4, #6]
 801343e:	e7d4      	b.n	80133ea <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013440:	4620      	mov	r0, r4
 8013442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013446 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8013446:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801344a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801344e:	b383      	cbz	r3, 80134b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013450:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013452:	b374      	cbz	r4, 80134b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8013454:	f9b1 5000 	ldrsh.w	r5, [r1]
 8013458:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801345c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8013460:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013464:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013468:	b303      	cbz	r3, 80134ac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801346a:	4668      	mov	r0, sp
 801346c:	1d21      	adds	r1, r4, #4
 801346e:	f8ad 5000 	strh.w	r5, [sp]
 8013472:	f8ad 6002 	strh.w	r6, [sp, #2]
 8013476:	f8ad 7004 	strh.w	r7, [sp, #4]
 801347a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801347e:	f7ff ff43 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 8013482:	4668      	mov	r0, sp
 8013484:	f7ff ff83 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013488:	b980      	cbnz	r0, 80134ac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801348a:	f8bd 3000 	ldrh.w	r3, [sp]
 801348e:	4669      	mov	r1, sp
 8013490:	88a2      	ldrh	r2, [r4, #4]
 8013492:	4620      	mov	r0, r4
 8013494:	1a9b      	subs	r3, r3, r2
 8013496:	88e2      	ldrh	r2, [r4, #6]
 8013498:	f8ad 3000 	strh.w	r3, [sp]
 801349c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80134a0:	1a9b      	subs	r3, r3, r2
 80134a2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	689b      	ldr	r3, [r3, #8]
 80134aa:	4798      	blx	r3
 80134ac:	69a4      	ldr	r4, [r4, #24]
 80134ae:	2c00      	cmp	r4, #0
 80134b0:	d1d8      	bne.n	8013464 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80134b2:	b002      	add	sp, #8
 80134b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80134b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134ba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80134be:	460d      	mov	r5, r1
 80134c0:	4616      	mov	r6, r2
 80134c2:	b323      	cbz	r3, 801350e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80134c4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80134c6:	b314      	cbz	r4, 801350e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80134c8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80134cc:	b1eb      	cbz	r3, 801350a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80134ce:	6828      	ldr	r0, [r5, #0]
 80134d0:	466b      	mov	r3, sp
 80134d2:	6869      	ldr	r1, [r5, #4]
 80134d4:	c303      	stmia	r3!, {r0, r1}
 80134d6:	4668      	mov	r0, sp
 80134d8:	1d21      	adds	r1, r4, #4
 80134da:	f7ff ff15 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 80134de:	4668      	mov	r0, sp
 80134e0:	f7ff ff55 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 80134e4:	b988      	cbnz	r0, 801350a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80134e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80134ea:	4669      	mov	r1, sp
 80134ec:	88a2      	ldrh	r2, [r4, #4]
 80134ee:	4620      	mov	r0, r4
 80134f0:	1a9b      	subs	r3, r3, r2
 80134f2:	88e2      	ldrh	r2, [r4, #6]
 80134f4:	f8ad 3000 	strh.w	r3, [sp]
 80134f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80134fc:	1a9b      	subs	r3, r3, r2
 80134fe:	4632      	mov	r2, r6
 8013500:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013504:	6823      	ldr	r3, [r4, #0]
 8013506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013508:	4798      	blx	r3
 801350a:	69a4      	ldr	r4, [r4, #24]
 801350c:	e7db      	b.n	80134c6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801350e:	b002      	add	sp, #8
 8013510:	bd70      	pop	{r4, r5, r6, pc}

08013512 <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 8013512:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8013516:	4770      	bx	lr

08013518 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 8013518:	b538      	push	{r3, r4, r5, lr}
 801351a:	7882      	ldrb	r2, [r0, #2]
 801351c:	4604      	mov	r4, r0
 801351e:	460d      	mov	r5, r1
 8013520:	6843      	ldr	r3, [r0, #4]
 8013522:	b98a      	cbnz	r2, 8013548 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 8013524:	4299      	cmp	r1, r3
 8013526:	d101      	bne.n	801352c <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8013528:	2301      	movs	r3, #1
 801352a:	7083      	strb	r3, [r0, #2]
 801352c:	6863      	ldr	r3, [r4, #4]
 801352e:	42ab      	cmp	r3, r5
 8013530:	d009      	beq.n	8013546 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8013532:	7a23      	ldrb	r3, [r4, #8]
 8013534:	2b01      	cmp	r3, #1
 8013536:	d11b      	bne.n	8013570 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 8013538:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801353c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8013540:	429a      	cmp	r2, r3
 8013542:	bfb8      	it	lt
 8013544:	8023      	strhlt	r3, [r4, #0]
 8013546:	bd38      	pop	{r3, r4, r5, pc}
 8013548:	7a02      	ldrb	r2, [r0, #8]
 801354a:	2a01      	cmp	r2, #1
 801354c:	d108      	bne.n	8013560 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 801354e:	895b      	ldrh	r3, [r3, #10]
 8013550:	88c9      	ldrh	r1, [r1, #6]
 8013552:	1ac9      	subs	r1, r1, r3
 8013554:	682b      	ldr	r3, [r5, #0]
 8013556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013558:	b209      	sxth	r1, r1
 801355a:	4628      	mov	r0, r5
 801355c:	4798      	blx	r3
 801355e:	e7e5      	b.n	801352c <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8013560:	2a02      	cmp	r2, #2
 8013562:	d1e3      	bne.n	801352c <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8013564:	891b      	ldrh	r3, [r3, #8]
 8013566:	8889      	ldrh	r1, [r1, #4]
 8013568:	1ac9      	subs	r1, r1, r3
 801356a:	682b      	ldr	r3, [r5, #0]
 801356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801356e:	e7f3      	b.n	8013558 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 8013570:	2b02      	cmp	r3, #2
 8013572:	d1e8      	bne.n	8013546 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8013574:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8013578:	e7e0      	b.n	801353c <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

0801357a <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 801357a:	4770      	bx	lr

0801357c <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 801357c:	4770      	bx	lr

0801357e <_ZN8touchgfx10ListLayoutD1Ev>:
 801357e:	4770      	bx	lr

08013580 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 8013580:	b430      	push	{r4, r5}
 8013582:	68c5      	ldr	r5, [r0, #12]
 8013584:	4603      	mov	r3, r0
 8013586:	6844      	ldr	r4, [r0, #4]
 8013588:	106a      	asrs	r2, r5, #1
 801358a:	07ed      	lsls	r5, r5, #31
 801358c:	689b      	ldr	r3, [r3, #8]
 801358e:	eb04 0002 	add.w	r0, r4, r2
 8013592:	bf48      	it	mi
 8013594:	58a2      	ldrmi	r2, [r4, r2]
 8013596:	bc30      	pop	{r4, r5}
 8013598:	bf48      	it	mi
 801359a:	58d3      	ldrmi	r3, [r2, r3]
 801359c:	4718      	bx	r3

0801359e <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 801359e:	6843      	ldr	r3, [r0, #4]
 80135a0:	b12b      	cbz	r3, 80135ae <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 80135a2:	6883      	ldr	r3, [r0, #8]
 80135a4:	b92b      	cbnz	r3, 80135b2 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 80135a6:	68c0      	ldr	r0, [r0, #12]
 80135a8:	f000 0001 	and.w	r0, r0, #1
 80135ac:	4770      	bx	lr
 80135ae:	4618      	mov	r0, r3
 80135b0:	4770      	bx	lr
 80135b2:	2001      	movs	r0, #1
 80135b4:	4770      	bx	lr

080135b6 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 80135b6:	b430      	push	{r4, r5}
 80135b8:	68c5      	ldr	r5, [r0, #12]
 80135ba:	4603      	mov	r3, r0
 80135bc:	6844      	ldr	r4, [r0, #4]
 80135be:	106a      	asrs	r2, r5, #1
 80135c0:	07ed      	lsls	r5, r5, #31
 80135c2:	689b      	ldr	r3, [r3, #8]
 80135c4:	eb04 0002 	add.w	r0, r4, r2
 80135c8:	bf48      	it	mi
 80135ca:	58a2      	ldrmi	r2, [r4, r2]
 80135cc:	bc30      	pop	{r4, r5}
 80135ce:	bf48      	it	mi
 80135d0:	58d3      	ldrmi	r3, [r2, r3]
 80135d2:	4718      	bx	r3

080135d4 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 80135d4:	6843      	ldr	r3, [r0, #4]
 80135d6:	b12b      	cbz	r3, 80135e4 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 80135d8:	6883      	ldr	r3, [r0, #8]
 80135da:	b92b      	cbnz	r3, 80135e8 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 80135dc:	68c0      	ldr	r0, [r0, #12]
 80135de:	f000 0001 	and.w	r0, r0, #1
 80135e2:	4770      	bx	lr
 80135e4:	4618      	mov	r0, r3
 80135e6:	4770      	bx	lr
 80135e8:	2001      	movs	r0, #1
 80135ea:	4770      	bx	lr

080135ec <_ZN8touchgfx10ListLayoutD0Ev>:
 80135ec:	b510      	push	{r4, lr}
 80135ee:	4604      	mov	r4, r0
 80135f0:	2130      	movs	r1, #48	; 0x30
 80135f2:	f00f fe20 	bl	8023236 <_ZdlPvj>
 80135f6:	4620      	mov	r0, r4
 80135f8:	bd10      	pop	{r4, pc}

080135fa <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 80135fa:	b510      	push	{r4, lr}
 80135fc:	4604      	mov	r4, r0
 80135fe:	2110      	movs	r1, #16
 8013600:	f00f fe19 	bl	8023236 <_ZdlPvj>
 8013604:	4620      	mov	r0, r4
 8013606:	bd10      	pop	{r4, pc}

08013608 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 8013608:	b510      	push	{r4, lr}
 801360a:	4604      	mov	r4, r0
 801360c:	2110      	movs	r1, #16
 801360e:	f00f fe12 	bl	8023236 <_ZdlPvj>
 8013612:	4620      	mov	r0, r4
 8013614:	bd10      	pop	{r4, pc}

08013616 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 8013616:	4603      	mov	r3, r0
 8013618:	4608      	mov	r0, r1
 801361a:	789a      	ldrb	r2, [r3, #2]
 801361c:	b992      	cbnz	r2, 8013644 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 801361e:	685a      	ldr	r2, [r3, #4]
 8013620:	428a      	cmp	r2, r1
 8013622:	d102      	bne.n	801362a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 8013624:	2201      	movs	r2, #1
 8013626:	709a      	strb	r2, [r3, #2]
 8013628:	4770      	bx	lr
 801362a:	7a1a      	ldrb	r2, [r3, #8]
 801362c:	2a01      	cmp	r2, #1
 801362e:	d104      	bne.n	801363a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 8013630:	88ca      	ldrh	r2, [r1, #6]
 8013632:	8949      	ldrh	r1, [r1, #10]
 8013634:	440a      	add	r2, r1
 8013636:	801a      	strh	r2, [r3, #0]
 8013638:	4770      	bx	lr
 801363a:	2a02      	cmp	r2, #2
 801363c:	d116      	bne.n	801366c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 801363e:	888a      	ldrh	r2, [r1, #4]
 8013640:	8909      	ldrh	r1, [r1, #8]
 8013642:	e7f7      	b.n	8013634 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 8013644:	7a1a      	ldrb	r2, [r3, #8]
 8013646:	2a01      	cmp	r2, #1
 8013648:	d107      	bne.n	801365a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	8959      	ldrh	r1, [r3, #10]
 801364e:	88c3      	ldrh	r3, [r0, #6]
 8013650:	4419      	add	r1, r3
 8013652:	6803      	ldr	r3, [r0, #0]
 8013654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013656:	b209      	sxth	r1, r1
 8013658:	4718      	bx	r3
 801365a:	2a02      	cmp	r2, #2
 801365c:	d106      	bne.n	801366c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 801365e:	685b      	ldr	r3, [r3, #4]
 8013660:	8919      	ldrh	r1, [r3, #8]
 8013662:	8883      	ldrh	r3, [r0, #4]
 8013664:	4419      	add	r1, r3
 8013666:	6803      	ldr	r3, [r0, #0]
 8013668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801366a:	e7f4      	b.n	8013656 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 801366c:	4770      	bx	lr

0801366e <_ZN8touchgfx8Drawable5setXYEss>:
 801366e:	b570      	push	{r4, r5, r6, lr}
 8013670:	6803      	ldr	r3, [r0, #0]
 8013672:	4604      	mov	r4, r0
 8013674:	4615      	mov	r5, r2
 8013676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013678:	4798      	blx	r3
 801367a:	6823      	ldr	r3, [r4, #0]
 801367c:	4629      	mov	r1, r5
 801367e:	4620      	mov	r0, r4
 8013680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013686:	4718      	bx	r3

08013688 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8013688:	b570      	push	{r4, r5, r6, lr}
 801368a:	6803      	ldr	r3, [r0, #0]
 801368c:	4604      	mov	r4, r0
 801368e:	4615      	mov	r5, r2
 8013690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013692:	4798      	blx	r3
 8013694:	6823      	ldr	r3, [r4, #0]
 8013696:	4629      	mov	r1, r5
 8013698:	4620      	mov	r0, r4
 801369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801369c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136a0:	4718      	bx	r3

080136a2 <_ZN8touchgfx10ListLayout9removeAllEv>:
 80136a2:	2200      	movs	r2, #0
 80136a4:	b510      	push	{r4, lr}
 80136a6:	4604      	mov	r4, r0
 80136a8:	85c2      	strh	r2, [r0, #46]	; 0x2e
 80136aa:	4611      	mov	r1, r2
 80136ac:	f7ff ffec 	bl	8013688 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80136b0:	4620      	mov	r0, r4
 80136b2:	f7ff fca8 	bl	8013006 <_ZN8touchgfx9Container9removeAllEv>
 80136b6:	6960      	ldr	r0, [r4, #20]
 80136b8:	b120      	cbz	r0, 80136c4 <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 80136ba:	6803      	ldr	r3, [r0, #0]
 80136bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136c2:	4718      	bx	r3
 80136c4:	bd10      	pop	{r4, pc}
	...

080136c8 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 80136c8:	b530      	push	{r4, r5, lr}
 80136ca:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80136ce:	b085      	sub	sp, #20
 80136d0:	4604      	mov	r4, r0
 80136d2:	428b      	cmp	r3, r1
 80136d4:	d017      	beq.n	8013706 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 80136d6:	2500      	movs	r5, #0
 80136d8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 80136dc:	85c5      	strh	r5, [r0, #46]	; 0x2e
 80136de:	462a      	mov	r2, r5
 80136e0:	4629      	mov	r1, r5
 80136e2:	f7ff ffd1 	bl	8013688 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80136e6:	4b09      	ldr	r3, [pc, #36]	; (801370c <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 80136e8:	4620      	mov	r0, r4
 80136ea:	4669      	mov	r1, sp
 80136ec:	e9cd 3400 	strd	r3, r4, [sp]
 80136f0:	4b07      	ldr	r3, [pc, #28]	; (8013710 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 80136f2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80136f6:	6823      	ldr	r3, [r4, #0]
 80136f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136fa:	4798      	blx	r3
 80136fc:	6960      	ldr	r0, [r4, #20]
 80136fe:	b110      	cbz	r0, 8013706 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8013700:	6803      	ldr	r3, [r0, #0]
 8013702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013704:	4798      	blx	r3
 8013706:	b005      	add	sp, #20
 8013708:	bd30      	pop	{r4, r5, pc}
 801370a:	bf00      	nop
 801370c:	08026970 	.word	0x08026970
 8013710:	08013779 	.word	0x08013779

08013714 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 8013714:	b538      	push	{r3, r4, r5, lr}
 8013716:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801371a:	460d      	mov	r5, r1
 801371c:	4604      	mov	r4, r0
 801371e:	4611      	mov	r1, r2
 8013720:	2b01      	cmp	r3, #1
 8013722:	d002      	beq.n	801372a <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 8013724:	2b02      	cmp	r3, #2
 8013726:	d015      	beq.n	8013754 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 8013728:	bd38      	pop	{r3, r4, r5, pc}
 801372a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801372e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8013732:	429a      	cmp	r2, r3
 8013734:	bfb8      	it	lt
 8013736:	8103      	strhlt	r3, [r0, #8]
 8013738:	8943      	ldrh	r3, [r0, #10]
 801373a:	896a      	ldrh	r2, [r5, #10]
 801373c:	4413      	add	r3, r2
 801373e:	460a      	mov	r2, r1
 8013740:	2100      	movs	r1, #0
 8013742:	8143      	strh	r3, [r0, #10]
 8013744:	4628      	mov	r0, r5
 8013746:	f7ff ff92 	bl	801366e <_ZN8touchgfx8Drawable5setXYEss>
 801374a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801374c:	896a      	ldrh	r2, [r5, #10]
 801374e:	4413      	add	r3, r2
 8013750:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8013752:	e7e9      	b.n	8013728 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8013754:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8013758:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801375c:	429a      	cmp	r2, r3
 801375e:	bfb8      	it	lt
 8013760:	8143      	strhlt	r3, [r0, #10]
 8013762:	8903      	ldrh	r3, [r0, #8]
 8013764:	892a      	ldrh	r2, [r5, #8]
 8013766:	4413      	add	r3, r2
 8013768:	2200      	movs	r2, #0
 801376a:	8103      	strh	r3, [r0, #8]
 801376c:	4628      	mov	r0, r5
 801376e:	f7ff ff7e 	bl	801366e <_ZN8touchgfx8Drawable5setXYEss>
 8013772:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8013774:	892a      	ldrh	r2, [r5, #8]
 8013776:	e7ea      	b.n	801374e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

08013778 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 8013778:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 801377c:	f7ff bfca 	b.w	8013714 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08013780 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8013780:	b570      	push	{r4, r5, r6, lr}
 8013782:	4604      	mov	r4, r0
 8013784:	460d      	mov	r5, r1
 8013786:	f7ff fff7 	bl	8013778 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 801378a:	4620      	mov	r0, r4
 801378c:	4629      	mov	r1, r5
 801378e:	f7ff fc2d 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013792:	6960      	ldr	r0, [r4, #20]
 8013794:	b120      	cbz	r0, 80137a0 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 8013796:	6803      	ldr	r3, [r0, #0]
 8013798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801379e:	4718      	bx	r3
 80137a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080137a4 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 80137a4:	b530      	push	{r4, r5, lr}
 80137a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80137a8:	b089      	sub	sp, #36	; 0x24
 80137aa:	4604      	mov	r4, r0
 80137ac:	4615      	mov	r5, r2
 80137ae:	b92b      	cbnz	r3, 80137bc <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 80137b0:	6803      	ldr	r3, [r0, #0]
 80137b2:	4611      	mov	r1, r2
 80137b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80137b6:	4798      	blx	r3
 80137b8:	b009      	add	sp, #36	; 0x24
 80137ba:	bd30      	pop	{r4, r5, pc}
 80137bc:	f7ff fc78 	bl	80130b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 80137c0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80137c4:	2300      	movs	r3, #0
 80137c6:	a904      	add	r1, sp, #16
 80137c8:	f88d 200c 	strb.w	r2, [sp, #12]
 80137cc:	4620      	mov	r0, r4
 80137ce:	4a0e      	ldr	r2, [pc, #56]	; (8013808 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 80137d0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80137d4:	9204      	str	r2, [sp, #16]
 80137d6:	aa01      	add	r2, sp, #4
 80137d8:	f88d 3006 	strb.w	r3, [sp, #6]
 80137dc:	9205      	str	r2, [sp, #20]
 80137de:	4a0b      	ldr	r2, [pc, #44]	; (801380c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 80137e0:	9502      	str	r5, [sp, #8]
 80137e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80137e6:	6823      	ldr	r3, [r4, #0]
 80137e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137ea:	4798      	blx	r3
 80137ec:	4620      	mov	r0, r4
 80137ee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80137f2:	4629      	mov	r1, r5
 80137f4:	f7ff ff8e 	bl	8013714 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 80137f8:	6960      	ldr	r0, [r4, #20]
 80137fa:	2800      	cmp	r0, #0
 80137fc:	d0dc      	beq.n	80137b8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 80137fe:	6803      	ldr	r3, [r0, #0]
 8013800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013802:	4798      	blx	r3
 8013804:	e7d8      	b.n	80137b8 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8013806:	bf00      	nop
 8013808:	08026988 	.word	0x08026988
 801380c:	08013617 	.word	0x08013617

08013810 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8013810:	b538      	push	{r3, r4, r5, lr}
 8013812:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013816:	4604      	mov	r4, r0
 8013818:	460d      	mov	r5, r1
 801381a:	2b01      	cmp	r3, #1
 801381c:	d002      	beq.n	8013824 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 801381e:	2b02      	cmp	r3, #2
 8013820:	d018      	beq.n	8013854 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8013822:	bd38      	pop	{r3, r4, r5, pc}
 8013824:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013828:	4293      	cmp	r3, r2
 801382a:	8943      	ldrh	r3, [r0, #10]
 801382c:	bfc8      	it	gt
 801382e:	8102      	strhgt	r2, [r0, #8]
 8013830:	894a      	ldrh	r2, [r1, #10]
 8013832:	1a9b      	subs	r3, r3, r2
 8013834:	8143      	strh	r3, [r0, #10]
 8013836:	4628      	mov	r0, r5
 8013838:	680b      	ldr	r3, [r1, #0]
 801383a:	2100      	movs	r1, #0
 801383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801383e:	4798      	blx	r3
 8013840:	682b      	ldr	r3, [r5, #0]
 8013842:	2100      	movs	r1, #0
 8013844:	4628      	mov	r0, r5
 8013846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013848:	4798      	blx	r3
 801384a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801384c:	896a      	ldrh	r2, [r5, #10]
 801384e:	1a9b      	subs	r3, r3, r2
 8013850:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8013852:	e7e6      	b.n	8013822 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8013854:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013858:	4293      	cmp	r3, r2
 801385a:	8903      	ldrh	r3, [r0, #8]
 801385c:	bfc8      	it	gt
 801385e:	8142      	strhgt	r2, [r0, #10]
 8013860:	890a      	ldrh	r2, [r1, #8]
 8013862:	1a9b      	subs	r3, r3, r2
 8013864:	8103      	strh	r3, [r0, #8]
 8013866:	4628      	mov	r0, r5
 8013868:	680b      	ldr	r3, [r1, #0]
 801386a:	2100      	movs	r1, #0
 801386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801386e:	4798      	blx	r3
 8013870:	682b      	ldr	r3, [r5, #0]
 8013872:	2100      	movs	r1, #0
 8013874:	4628      	mov	r0, r5
 8013876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013878:	4798      	blx	r3
 801387a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801387c:	892a      	ldrh	r2, [r5, #8]
 801387e:	e7e6      	b.n	801384e <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08013880 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8013880:	b530      	push	{r4, r5, lr}
 8013882:	b089      	sub	sp, #36	; 0x24
 8013884:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8013888:	2300      	movs	r3, #0
 801388a:	460d      	mov	r5, r1
 801388c:	f88d 200c 	strb.w	r2, [sp, #12]
 8013890:	4604      	mov	r4, r0
 8013892:	4a12      	ldr	r2, [pc, #72]	; (80138dc <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8013894:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013898:	9204      	str	r2, [sp, #16]
 801389a:	aa01      	add	r2, sp, #4
 801389c:	f88d 3006 	strb.w	r3, [sp, #6]
 80138a0:	9205      	str	r2, [sp, #20]
 80138a2:	4a0f      	ldr	r2, [pc, #60]	; (80138e0 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 80138a4:	9102      	str	r1, [sp, #8]
 80138a6:	a904      	add	r1, sp, #16
 80138a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138ac:	6803      	ldr	r3, [r0, #0]
 80138ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138b0:	4798      	blx	r3
 80138b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80138b6:	b14b      	cbz	r3, 80138cc <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 80138b8:	4629      	mov	r1, r5
 80138ba:	4620      	mov	r0, r4
 80138bc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80138c0:	f7ff ffa6 	bl	8013810 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 80138c4:	4629      	mov	r1, r5
 80138c6:	4620      	mov	r0, r4
 80138c8:	f7ff fbdb 	bl	8013082 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 80138cc:	6960      	ldr	r0, [r4, #20]
 80138ce:	b110      	cbz	r0, 80138d6 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 80138d0:	6803      	ldr	r3, [r0, #0]
 80138d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138d4:	4798      	blx	r3
 80138d6:	b009      	add	sp, #36	; 0x24
 80138d8:	bd30      	pop	{r4, r5, pc}
 80138da:	bf00      	nop
 80138dc:	08026988 	.word	0x08026988
 80138e0:	08013519 	.word	0x08013519

080138e4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80138e4:	2000      	movs	r0, #0
 80138e6:	4770      	bx	lr

080138e8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80138e8:	2001      	movs	r0, #1
 80138ea:	4770      	bx	lr

080138ec <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 80138ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80138ee:	6803      	ldr	r3, [r0, #0]
 80138f0:	4604      	mov	r4, r0
 80138f2:	460e      	mov	r6, r1
 80138f4:	4601      	mov	r1, r0
 80138f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80138fa:	4668      	mov	r0, sp
 80138fc:	4615      	mov	r5, r2
 80138fe:	4798      	blx	r3
 8013900:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8013904:	b13b      	cbz	r3, 8013916 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x2a>
 8013906:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801390a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801390e:	4293      	cmp	r3, r2
 8013910:	bfac      	ite	ge
 8013912:	2300      	movge	r3, #0
 8013914:	2301      	movlt	r3, #1
 8013916:	7033      	strb	r3, [r6, #0]
 8013918:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 801391c:	b13b      	cbz	r3, 801392e <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x42>
 801391e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013922:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013926:	4293      	cmp	r3, r2
 8013928:	bfac      	ite	ge
 801392a:	2300      	movge	r3, #0
 801392c:	2301      	movlt	r3, #1
 801392e:	702b      	strb	r3, [r5, #0]
 8013930:	b002      	add	sp, #8
 8013932:	bd70      	pop	{r4, r5, r6, pc}

08013934 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 8013934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013938:	4604      	mov	r4, r0
 801393a:	460f      	mov	r7, r1
 801393c:	4616      	mov	r6, r2
 801393e:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8013940:	f100 0838 	add.w	r8, r0, #56	; 0x38
 8013944:	f100 0964 	add.w	r9, r0, #100	; 0x64
 8013948:	b15d      	cbz	r5, 8013962 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 801394a:	4545      	cmp	r5, r8
 801394c:	d007      	beq.n	801395e <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 801394e:	454d      	cmp	r5, r9
 8013950:	d005      	beq.n	801395e <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 8013952:	682b      	ldr	r3, [r5, #0]
 8013954:	4632      	mov	r2, r6
 8013956:	4639      	mov	r1, r7
 8013958:	4628      	mov	r0, r5
 801395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801395c:	4798      	blx	r3
 801395e:	69ad      	ldr	r5, [r5, #24]
 8013960:	e7f2      	b.n	8013948 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 8013962:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8013966:	441f      	add	r7, r3
 8013968:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 801396c:	441e      	add	r6, r3
 801396e:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
 8013972:	f8a4 609a 	strh.w	r6, [r4, #154]	; 0x9a
 8013976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801397a <_ZN8touchgfx19ScrollableContainerD1Ev>:
 801397a:	4770      	bx	lr

0801397c <_ZN8touchgfx9DragEventD1Ev>:
 801397c:	4770      	bx	lr

0801397e <_ZN8touchgfx10ClickEventD1Ev>:
 801397e:	4770      	bx	lr

08013980 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 8013980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013982:	4605      	mov	r5, r0
 8013984:	f100 0638 	add.w	r6, r0, #56	; 0x38
 8013988:	4604      	mov	r4, r0
 801398a:	460f      	mov	r7, r1
 801398c:	f855 3b64 	ldr.w	r3, [r5], #100
 8013990:	4631      	mov	r1, r6
 8013992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013994:	4798      	blx	r3
 8013996:	6823      	ldr	r3, [r4, #0]
 8013998:	4629      	mov	r1, r5
 801399a:	4620      	mov	r0, r4
 801399c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801399e:	4798      	blx	r3
 80139a0:	4639      	mov	r1, r7
 80139a2:	4620      	mov	r0, r4
 80139a4:	f7ff fb22 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80139a8:	4631      	mov	r1, r6
 80139aa:	4620      	mov	r0, r4
 80139ac:	f7ff fb1e 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80139b0:	4629      	mov	r1, r5
 80139b2:	4620      	mov	r0, r4
 80139b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80139b8:	f7ff bb18 	b.w	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>

080139bc <_ZN8touchgfx10ClickEventD0Ev>:
 80139bc:	b510      	push	{r4, lr}
 80139be:	4604      	mov	r4, r0
 80139c0:	210c      	movs	r1, #12
 80139c2:	f00f fc38 	bl	8023236 <_ZdlPvj>
 80139c6:	4620      	mov	r0, r4
 80139c8:	bd10      	pop	{r4, pc}

080139ca <_ZN8touchgfx9DragEventD0Ev>:
 80139ca:	b510      	push	{r4, lr}
 80139cc:	4604      	mov	r4, r0
 80139ce:	2110      	movs	r1, #16
 80139d0:	f00f fc31 	bl	8023236 <_ZdlPvj>
 80139d4:	4620      	mov	r0, r4
 80139d6:	bd10      	pop	{r4, pc}

080139d8 <_ZN8touchgfx19ScrollableContainerD0Ev>:
 80139d8:	b510      	push	{r4, lr}
 80139da:	4604      	mov	r4, r0
 80139dc:	21bc      	movs	r1, #188	; 0xbc
 80139de:	f00f fc2a 	bl	8023236 <_ZdlPvj>
 80139e2:	4620      	mov	r0, r4
 80139e4:	bd10      	pop	{r4, pc}
	...

080139e8 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 80139e8:	b570      	push	{r4, r5, r6, lr}
 80139ea:	b086      	sub	sp, #24
 80139ec:	2300      	movs	r3, #0
 80139ee:	460c      	mov	r4, r1
 80139f0:	4605      	mov	r5, r0
 80139f2:	aa06      	add	r2, sp, #24
 80139f4:	f88d 3002 	strb.w	r3, [sp, #2]
 80139f8:	f10d 0102 	add.w	r1, sp, #2
 80139fc:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8013a00:	6803      	ldr	r3, [r0, #0]
 8013a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a06:	4798      	blx	r3
 8013a08:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013a0c:	b10b      	cbz	r3, 8013a12 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 8013a0e:	7923      	ldrb	r3, [r4, #4]
 8013a10:	b133      	cbz	r3, 8013a20 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 8013a12:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d067      	beq.n	8013aea <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013a1a:	7923      	ldrb	r3, [r4, #4]
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	d164      	bne.n	8013aea <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013a20:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013a24:	2a00      	cmp	r2, #0
 8013a26:	bfb8      	it	lt
 8013a28:	4252      	neglt	r2, r2
 8013a2a:	b213      	sxth	r3, r2
 8013a2c:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	; 0x9c
 8013a30:	429a      	cmp	r2, r3
 8013a32:	dc5a      	bgt.n	8013aea <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013a34:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 8013a36:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	bfa8      	it	ge
 8013a3e:	461a      	movge	r2, r3
 8013a40:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	; 0xba
 8013a44:	b212      	sxth	r2, r2
 8013a46:	2a05      	cmp	r2, #5
 8013a48:	bfb8      	it	lt
 8013a4a:	2205      	movlt	r2, #5
 8013a4c:	4351      	muls	r1, r2
 8013a4e:	3a04      	subs	r2, #4
 8013a50:	fb91 f1f3 	sdiv	r1, r1, r3
 8013a54:	f8a5 10a8 	strh.w	r1, [r5, #168]	; 0xa8
 8013a58:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8013a5c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013a60:	b289      	uxth	r1, r1
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a68:	bfcc      	ite	gt
 8013a6a:	2001      	movgt	r0, #1
 8013a6c:	4618      	movle	r0, r3
 8013a6e:	00d3      	lsls	r3, r2, #3
 8013a70:	fb13 f300 	smulbb	r3, r3, r0
 8013a74:	b21b      	sxth	r3, r3
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
 8013a7c:	bfb8      	it	lt
 8013a7e:	425b      	neglt	r3, r3
 8013a80:	b21b      	sxth	r3, r3
 8013a82:	428b      	cmp	r3, r1
 8013a84:	bfa8      	it	ge
 8013a86:	460b      	movge	r3, r1
 8013a88:	4629      	mov	r1, r5
 8013a8a:	f8a5 30a8 	strh.w	r3, [r5, #168]	; 0xa8
 8013a8e:	7922      	ldrb	r2, [r4, #4]
 8013a90:	682b      	ldr	r3, [r5, #0]
 8013a92:	2a01      	cmp	r2, #1
 8013a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a98:	d129      	bne.n	8013aee <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x106>
 8013a9a:	a801      	add	r0, sp, #4
 8013a9c:	4798      	blx	r3
 8013a9e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013aa2:	2601      	movs	r6, #1
 8013aa4:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
 8013aa8:	f885 60b0 	strb.w	r6, [r5, #176]	; 0xb0
 8013aac:	f004 fa42 	bl	8017f34 <_ZN8touchgfx11Application11getInstanceEv>
 8013ab0:	4629      	mov	r1, r5
 8013ab2:	f004 fa45 	bl	8017f40 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8013ab6:	7923      	ldrb	r3, [r4, #4]
 8013ab8:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8013abc:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8013ac0:	b198      	cbz	r0, 8013aea <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013ac2:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 8013ac6:	b983      	cbnz	r3, 8013aea <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013ac8:	4a0b      	ldr	r2, [pc, #44]	; (8013af8 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x110>)
 8013aca:	a903      	add	r1, sp, #12
 8013acc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013ad0:	9203      	str	r2, [sp, #12]
 8013ad2:	2202      	movs	r2, #2
 8013ad4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013ad8:	f88d 2010 	strb.w	r2, [sp, #16]
 8013adc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013ae0:	6803      	ldr	r3, [r0, #0]
 8013ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ae4:	4798      	blx	r3
 8013ae6:	f885 60b6 	strb.w	r6, [r5, #182]	; 0xb6
 8013aea:	b006      	add	sp, #24
 8013aec:	bd70      	pop	{r4, r5, r6, pc}
 8013aee:	a803      	add	r0, sp, #12
 8013af0:	4798      	blx	r3
 8013af2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013af6:	e7d4      	b.n	8013aa2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 8013af8:	08026a38 	.word	0x08026a38

08013afc <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 8013afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013afe:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8013b02:	4604      	mov	r4, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d048      	beq.n	8013b9a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 8013b08:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
 8013b0c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8013b10:	3001      	adds	r0, #1
 8013b12:	b280      	uxth	r0, r0
 8013b14:	4298      	cmp	r0, r3
 8013b16:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 8013b1a:	d842      	bhi.n	8013ba2 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa6>
 8013b1c:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8013b20:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8013b24:	f005 fe1a 	bl	801975c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8013b28:	4605      	mov	r5, r0
 8013b2a:	b282      	uxth	r2, r0
 8013b2c:	f012 0301 	ands.w	r3, r2, #1
 8013b30:	d006      	beq.n	8013b40 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 8013b32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013b36:	2800      	cmp	r0, #0
 8013b38:	bfd8      	it	le
 8013b3a:	460b      	movle	r3, r1
 8013b3c:	18d5      	adds	r5, r2, r3
 8013b3e:	b22d      	sxth	r5, r5
 8013b40:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8013b44:	2b01      	cmp	r3, #1
 8013b46:	d02a      	beq.n	8013b9e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 8013b48:	6823      	ldr	r3, [r4, #0]
 8013b4a:	4621      	mov	r1, r4
 8013b4c:	4668      	mov	r0, sp
 8013b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b52:	4798      	blx	r3
 8013b54:	f8bd 6000 	ldrh.w	r6, [sp]
 8013b58:	1bae      	subs	r6, r5, r6
 8013b5a:	b236      	sxth	r6, r6
 8013b5c:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8013b60:	b14a      	cbz	r2, 8013b76 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x7a>
 8013b62:	6823      	ldr	r3, [r4, #0]
 8013b64:	4621      	mov	r1, r4
 8013b66:	4668      	mov	r0, sp
 8013b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b6c:	4798      	blx	r3
 8013b6e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013b72:	1aad      	subs	r5, r5, r2
 8013b74:	b22a      	sxth	r2, r5
 8013b76:	6823      	ldr	r3, [r4, #0]
 8013b78:	4631      	mov	r1, r6
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b80:	4798      	blx	r3
 8013b82:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
 8013b86:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
 8013b8a:	b935      	cbnz	r5, 8013b9a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 8013b8c:	f004 f9d2 	bl	8017f34 <_ZN8touchgfx11Application11getInstanceEv>
 8013b90:	4621      	mov	r1, r4
 8013b92:	f004 f9fa 	bl	8017f8a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8013b96:	f8a4 50ae 	strh.w	r5, [r4, #174]	; 0xae
 8013b9a:	b002      	add	sp, #8
 8013b9c:	bd70      	pop	{r4, r5, r6, pc}
 8013b9e:	2600      	movs	r6, #0
 8013ba0:	e7dc      	b.n	8013b5c <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x60>
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 8013ba8:	e7ed      	b.n	8013b86 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x8a>

08013baa <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8013baa:	b470      	push	{r4, r5, r6}
 8013bac:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 8013bb0:	461d      	mov	r5, r3
 8013bb2:	b11e      	cbz	r6, 8013bbc <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 8013bb4:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 8013bb8:	b116      	cbz	r6, 8013bc0 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8013bba:	6028      	str	r0, [r5, #0]
 8013bbc:	bc70      	pop	{r4, r5, r6}
 8013bbe:	4770      	bx	lr
 8013bc0:	bc70      	pop	{r4, r5, r6}
 8013bc2:	f7ff ba8f 	b.w	80130e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
	...

08013bc8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 8013bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bcc:	b08b      	sub	sp, #44	; 0x2c
 8013bce:	2300      	movs	r3, #0
 8013bd0:	4604      	mov	r4, r0
 8013bd2:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013bd6:	aa0a      	add	r2, sp, #40	; 0x28
 8013bd8:	f88d 3006 	strb.w	r3, [sp, #6]
 8013bdc:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8013be0:	460f      	mov	r7, r1
 8013be2:	f802 3d21 	strb.w	r3, [r2, #-33]!
 8013be6:	6803      	ldr	r3, [r0, #0]
 8013be8:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 8013bec:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 8013bf0:	f10d 0106 	add.w	r1, sp, #6
 8013bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013bf8:	4798      	blx	r3
 8013bfa:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8013bfe:	2900      	cmp	r1, #0
 8013c00:	d03d      	beq.n	8013c7e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013c02:	42a1      	cmp	r1, r4
 8013c04:	d03b      	beq.n	8013c7e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013c06:	a802      	add	r0, sp, #8
 8013c08:	f005 fa04 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c0c:	4621      	mov	r1, r4
 8013c0e:	a804      	add	r0, sp, #16
 8013c10:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 8013c14:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8013c18:	f005 f9fc 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c1c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8013c20:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 8013c24:	eba3 030b 	sub.w	r3, r3, fp
 8013c28:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8013c2c:	88f9      	ldrh	r1, [r7, #6]
 8013c2e:	4413      	add	r3, r2
 8013c30:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013c34:	f89d c006 	ldrb.w	ip, [sp, #6]
 8013c38:	eba2 020a 	sub.w	r2, r2, sl
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	4402      	add	r2, r0
 8013c40:	8938      	ldrh	r0, [r7, #8]
 8013c42:	4419      	add	r1, r3
 8013c44:	b292      	uxth	r2, r2
 8013c46:	b209      	sxth	r1, r1
 8013c48:	4410      	add	r0, r2
 8013c4a:	b200      	sxth	r0, r0
 8013c4c:	f1bc 0f00 	cmp.w	ip, #0
 8013c50:	f040 808d 	bne.w	8013d6e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a6>
 8013c54:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
 8013c58:	4473      	add	r3, lr
 8013c5a:	b21b      	sxth	r3, r3
 8013c5c:	f89d e007 	ldrb.w	lr, [sp, #7]
 8013c60:	f1be 0f00 	cmp.w	lr, #0
 8013c64:	f040 80b1 	bne.w	8013dca <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 8013c68:	f8b7 e00c 	ldrh.w	lr, [r7, #12]
 8013c6c:	4472      	add	r2, lr
 8013c6e:	b212      	sxth	r2, r2
 8013c70:	f1bc 0f00 	cmp.w	ip, #0
 8013c74:	f000 80c8 	beq.w	8013e08 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 8013c78:	4290      	cmp	r0, r2
 8013c7a:	f040 80ae 	bne.w	8013dda <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8013c7e:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8013c82:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	f040 8099 	bne.w	8013dbe <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 8013c8c:	897d      	ldrh	r5, [r7, #10]
 8013c8e:	89be      	ldrh	r6, [r7, #12]
 8013c90:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 8013c94:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
 8013c98:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
 8013c9c:	f8b4 c0a0 	ldrh.w	ip, [r4, #160]	; 0xa0
 8013ca0:	4411      	add	r1, r2
 8013ca2:	442a      	add	r2, r5
 8013ca4:	449c      	add	ip, r3
 8013ca6:	4433      	add	r3, r6
 8013ca8:	b292      	uxth	r2, r2
 8013caa:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	b289      	uxth	r1, r1
 8013cb2:	fa1f fc8c 	uxth.w	ip, ip
 8013cb6:	b215      	sxth	r5, r2
 8013cb8:	b21e      	sxth	r6, r3
 8013cba:	b15f      	cbz	r7, 8013cd4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10c>
 8013cbc:	1a52      	subs	r2, r2, r1
 8013cbe:	f9b4 709c 	ldrsh.w	r7, [r4, #156]	; 0x9c
 8013cc2:	b212      	sxth	r2, r2
 8013cc4:	2a00      	cmp	r2, #0
 8013cc6:	bfb8      	it	lt
 8013cc8:	4252      	neglt	r2, r2
 8013cca:	b212      	sxth	r2, r2
 8013ccc:	4297      	cmp	r7, r2
 8013cce:	bfac      	ite	ge
 8013cd0:	2700      	movge	r7, #0
 8013cd2:	2701      	movlt	r7, #1
 8013cd4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013cd8:	b152      	cbz	r2, 8013cf0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x128>
 8013cda:	eba3 030c 	sub.w	r3, r3, ip
 8013cde:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
 8013ce2:	b21b      	sxth	r3, r3
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	bfb8      	it	lt
 8013ce8:	425b      	neglt	r3, r3
 8013cea:	b21b      	sxth	r3, r3
 8013cec:	429a      	cmp	r2, r3
 8013cee:	db01      	blt.n	8013cf4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 8013cf0:	2f00      	cmp	r7, #0
 8013cf2:	d03e      	beq.n	8013d72 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 8013cf4:	2701      	movs	r7, #1
 8013cf6:	fa0f f881 	sxth.w	r8, r1
 8013cfa:	fa0f f98c 	sxth.w	r9, ip
 8013cfe:	f884 70a3 	strb.w	r7, [r4, #163]	; 0xa3
 8013d02:	b1a0      	cbz	r0, 8013d2e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8013d04:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8013d08:	b98b      	cbnz	r3, 8013d2e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8013d0a:	4a41      	ldr	r2, [pc, #260]	; (8013e10 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 8013d0c:	a906      	add	r1, sp, #24
 8013d0e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013d12:	9206      	str	r2, [sp, #24]
 8013d14:	2202      	movs	r2, #2
 8013d16:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013d1a:	f88d 201c 	strb.w	r2, [sp, #28]
 8013d1e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013d22:	6803      	ldr	r3, [r0, #0]
 8013d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d26:	4798      	blx	r3
 8013d28:	2301      	movs	r3, #1
 8013d2a:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8013d2e:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 8013d32:	b149      	cbz	r1, 8013d48 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013d34:	eba5 0108 	sub.w	r1, r5, r8
 8013d38:	b209      	sxth	r1, r1
 8013d3a:	b12f      	cbz	r7, 8013d48 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013d3c:	2900      	cmp	r1, #0
 8013d3e:	dc40      	bgt.n	8013dc2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 8013d40:	bf14      	ite	ne
 8013d42:	f04f 31ff 	movne.w	r1, #4294967295
 8013d46:	2100      	moveq	r1, #0
 8013d48:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8013d4c:	b14a      	cbz	r2, 8013d62 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8013d4e:	eba6 0609 	sub.w	r6, r6, r9
 8013d52:	b232      	sxth	r2, r6
 8013d54:	b12f      	cbz	r7, 8013d62 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8013d56:	2a00      	cmp	r2, #0
 8013d58:	dc35      	bgt.n	8013dc6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 8013d5a:	bf14      	ite	ne
 8013d5c:	f04f 32ff 	movne.w	r2, #4294967295
 8013d60:	2200      	moveq	r2, #0
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	4620      	mov	r0, r4
 8013d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d6a:	4798      	blx	r3
 8013d6c:	e024      	b.n	8013db8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013d6e:	460b      	mov	r3, r1
 8013d70:	e774      	b.n	8013c5c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 8013d72:	b308      	cbz	r0, 8013db8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013d74:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8013d78:	b9f3      	cbnz	r3, 8013db8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013d7a:	ab0a      	add	r3, sp, #40	; 0x28
 8013d7c:	4620      	mov	r0, r4
 8013d7e:	4632      	mov	r2, r6
 8013d80:	4629      	mov	r1, r5
 8013d82:	f843 7d18 	str.w	r7, [r3, #-24]!
 8013d86:	f7ff f9ad 	bl	80130e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013d8a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013d8e:	9b04      	ldr	r3, [sp, #16]
 8013d90:	4298      	cmp	r0, r3
 8013d92:	d011      	beq.n	8013db8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8013d94:	4b1e      	ldr	r3, [pc, #120]	; (8013e10 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 8013d96:	a906      	add	r1, sp, #24
 8013d98:	f8ad 701e 	strh.w	r7, [sp, #30]
 8013d9c:	9306      	str	r3, [sp, #24]
 8013d9e:	2302      	movs	r3, #2
 8013da0:	f8ad 7020 	strh.w	r7, [sp, #32]
 8013da4:	f88d 301c 	strb.w	r3, [sp, #28]
 8013da8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013dac:	6803      	ldr	r3, [r0, #0]
 8013dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013db0:	4798      	blx	r3
 8013db2:	2301      	movs	r3, #1
 8013db4:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8013db8:	b00b      	add	sp, #44	; 0x2c
 8013dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dbe:	2700      	movs	r7, #0
 8013dc0:	e79f      	b.n	8013d02 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13a>
 8013dc2:	2101      	movs	r1, #1
 8013dc4:	e7c0      	b.n	8013d48 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013dc6:	2201      	movs	r2, #1
 8013dc8:	e7cb      	b.n	8013d62 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8013dca:	f1bc 0f00 	cmp.w	ip, #0
 8013dce:	f47f af56 	bne.w	8013c7e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013dd2:	428b      	cmp	r3, r1
 8013dd4:	f43f af53 	beq.w	8013c7e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	f8df c038 	ldr.w	ip, [pc, #56]	; 8013e14 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>
 8013dde:	f8ad 0020 	strh.w	r0, [sp, #32]
 8013de2:	f8cd c018 	str.w	ip, [sp, #24]
 8013de6:	f04f 0c00 	mov.w	ip, #0
 8013dea:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013dee:	f8ad 101e 	strh.w	r1, [sp, #30]
 8013df2:	a906      	add	r1, sp, #24
 8013df4:	f88d c01c 	strb.w	ip, [sp, #28]
 8013df8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013dfc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8013e00:	6803      	ldr	r3, [r0, #0]
 8013e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e04:	4798      	blx	r3
 8013e06:	e73a      	b.n	8013c7e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013e08:	428b      	cmp	r3, r1
 8013e0a:	f43f af35 	beq.w	8013c78 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 8013e0e:	e7e4      	b.n	8013dda <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8013e10:	08026a38 	.word	0x08026a38
 8013e14:	08026a4c 	.word	0x08026a4c

08013e18 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	4608      	mov	r0, r1
 8013e1e:	460d      	mov	r5, r1
 8013e20:	f7ff fab5 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013e24:	b978      	cbnz	r0, 8013e46 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013e26:	4620      	mov	r0, r4
 8013e28:	f7ff fab1 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 8013e2c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013e30:	b150      	cbz	r0, 8013e48 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013e32:	8026      	strh	r6, [r4, #0]
 8013e34:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013e38:	8063      	strh	r3, [r4, #2]
 8013e3a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8013e3e:	80a3      	strh	r3, [r4, #4]
 8013e40:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013e44:	80e3      	strh	r3, [r4, #6]
 8013e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e48:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013e4c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013e50:	42b1      	cmp	r1, r6
 8013e52:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013e56:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8013e5a:	460f      	mov	r7, r1
 8013e5c:	88ed      	ldrh	r5, [r5, #6]
 8013e5e:	bfa8      	it	ge
 8013e60:	4637      	movge	r7, r6
 8013e62:	4293      	cmp	r3, r2
 8013e64:	4618      	mov	r0, r3
 8013e66:	4466      	add	r6, ip
 8013e68:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013e6c:	bfa8      	it	ge
 8013e6e:	4610      	movge	r0, r2
 8013e70:	442a      	add	r2, r5
 8013e72:	88e5      	ldrh	r5, [r4, #6]
 8013e74:	4461      	add	r1, ip
 8013e76:	b236      	sxth	r6, r6
 8013e78:	8027      	strh	r7, [r4, #0]
 8013e7a:	442b      	add	r3, r5
 8013e7c:	b209      	sxth	r1, r1
 8013e7e:	b212      	sxth	r2, r2
 8013e80:	8060      	strh	r0, [r4, #2]
 8013e82:	b21b      	sxth	r3, r3
 8013e84:	428e      	cmp	r6, r1
 8013e86:	bfac      	ite	ge
 8013e88:	ebc7 0106 	rsbge	r1, r7, r6
 8013e8c:	ebc7 0101 	rsblt	r1, r7, r1
 8013e90:	429a      	cmp	r2, r3
 8013e92:	bfac      	ite	ge
 8013e94:	ebc0 0202 	rsbge	r2, r0, r2
 8013e98:	ebc0 0203 	rsblt	r2, r0, r3
 8013e9c:	80a1      	strh	r1, [r4, #4]
 8013e9e:	80e2      	strh	r2, [r4, #6]
 8013ea0:	e7d1      	b.n	8013e46 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08013ea2 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 8013ea2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ea4:	4604      	mov	r4, r0
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8013eac:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8013eb0:	680b      	ldr	r3, [r1, #0]
 8013eb2:	8022      	strh	r2, [r4, #0]
 8013eb4:	8062      	strh	r2, [r4, #2]
 8013eb6:	80e0      	strh	r0, [r4, #6]
 8013eb8:	4668      	mov	r0, sp
 8013eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ebe:	80a5      	strh	r5, [r4, #4]
 8013ec0:	4798      	blx	r3
 8013ec2:	4620      	mov	r0, r4
 8013ec4:	4669      	mov	r1, sp
 8013ec6:	f7ff ffa7 	bl	8013e18 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013eca:	4620      	mov	r0, r4
 8013ecc:	b003      	add	sp, #12
 8013ece:	bd30      	pop	{r4, r5, pc}

08013ed0 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 8013ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	4605      	mov	r5, r0
 8013ed6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013ed8:	f101 0738 	add.w	r7, r1, #56	; 0x38
 8013edc:	f101 0664 	add.w	r6, r1, #100	; 0x64
 8013ee0:	8003      	strh	r3, [r0, #0]
 8013ee2:	8043      	strh	r3, [r0, #2]
 8013ee4:	8083      	strh	r3, [r0, #4]
 8013ee6:	80c3      	strh	r3, [r0, #6]
 8013ee8:	b164      	cbz	r4, 8013f04 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 8013eea:	42bc      	cmp	r4, r7
 8013eec:	d008      	beq.n	8013f00 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013eee:	42b4      	cmp	r4, r6
 8013ef0:	d006      	beq.n	8013f00 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013ef2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013ef6:	b11b      	cbz	r3, 8013f00 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013ef8:	1d21      	adds	r1, r4, #4
 8013efa:	4628      	mov	r0, r5
 8013efc:	f7ff ff8c 	bl	8013e18 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013f00:	69a4      	ldr	r4, [r4, #24]
 8013f02:	e7f1      	b.n	8013ee8 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 8013f04:	4628      	mov	r0, r5
 8013f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013f08 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 8013f08:	b530      	push	{r4, r5, lr}
 8013f0a:	2500      	movs	r5, #0
 8013f0c:	6283      	str	r3, [r0, #40]	; 0x28
 8013f0e:	8101      	strh	r1, [r0, #8]
 8013f10:	8085      	strh	r5, [r0, #4]
 8013f12:	80c5      	strh	r5, [r0, #6]
 8013f14:	8185      	strh	r5, [r0, #12]
 8013f16:	81c5      	strh	r5, [r0, #14]
 8013f18:	8205      	strh	r5, [r0, #16]
 8013f1a:	8245      	strh	r5, [r0, #18]
 8013f1c:	61c5      	str	r5, [r0, #28]
 8013f1e:	8405      	strh	r5, [r0, #32]
 8013f20:	8445      	strh	r5, [r0, #34]	; 0x22
 8013f22:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8013f26:	8142      	strh	r2, [r0, #10]
 8013f28:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013f2c:	2501      	movs	r5, #1
 8013f2e:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8013f32:	4d03      	ldr	r5, [pc, #12]	; (8013f40 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 8013f34:	6005      	str	r5, [r0, #0]
 8013f36:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8013f3a:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 8013f3e:	bd30      	pop	{r4, r5, pc}
 8013f40:	08026ce4 	.word	0x08026ce4

08013f44 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8013f44:	4b2f      	ldr	r3, [pc, #188]	; (8014004 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 8013f46:	2278      	movs	r2, #120	; 0x78
 8013f48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f4a:	6003      	str	r3, [r0, #0]
 8013f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f50:	2500      	movs	r5, #0
 8013f52:	2601      	movs	r6, #1
 8013f54:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013f56:	2111      	movs	r1, #17
 8013f58:	f04f 33ff 	mov.w	r3, #4294967295
 8013f5c:	4604      	mov	r4, r0
 8013f5e:	8085      	strh	r5, [r0, #4]
 8013f60:	80c5      	strh	r5, [r0, #6]
 8013f62:	8105      	strh	r5, [r0, #8]
 8013f64:	8145      	strh	r5, [r0, #10]
 8013f66:	8185      	strh	r5, [r0, #12]
 8013f68:	81c5      	strh	r5, [r0, #14]
 8013f6a:	8205      	strh	r5, [r0, #16]
 8013f6c:	8245      	strh	r5, [r0, #18]
 8013f6e:	61c5      	str	r5, [r0, #28]
 8013f70:	8405      	strh	r5, [r0, #32]
 8013f72:	8445      	strh	r5, [r0, #34]	; 0x22
 8013f74:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8013f78:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
 8013f7c:	6285      	str	r5, [r0, #40]	; 0x28
 8013f7e:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8013f82:	6303      	str	r3, [r0, #48]	; 0x30
 8013f84:	8681      	strh	r1, [r0, #52]	; 0x34
 8013f86:	4629      	mov	r1, r5
 8013f88:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
 8013f8c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013f90:	9200      	str	r2, [sp, #0]
 8013f92:	3038      	adds	r0, #56	; 0x38
 8013f94:	462a      	mov	r2, r5
 8013f96:	f7ff ffb7 	bl	8013f08 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8013f9a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013f9e:	462a      	mov	r2, r5
 8013fa0:	4629      	mov	r1, r5
 8013fa2:	9300      	str	r3, [sp, #0]
 8013fa4:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8013fa8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013faa:	f7ff ffad 	bl	8013f08 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8013fae:	2305      	movs	r3, #5
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 8013fb6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8013fba:	4b13      	ldr	r3, [pc, #76]	; (8014008 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 8013fbc:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8013fc0:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 8013fc4:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 8013fc8:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8013fcc:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 8013fd0:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8013fd4:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 8013fd8:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8013fdc:	f8a4 50b2 	strh.w	r5, [r4, #178]	; 0xb2
 8013fe0:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
 8013fe4:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 8013fe8:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013fec:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 8013ff0:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 8013ff4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8013ff8:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 8013ffc:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 8014000:	b002      	add	sp, #8
 8014002:	bd70      	pop	{r4, r5, r6, pc}
 8014004:	08026a60 	.word	0x08026a60
 8014008:	00010007 	.word	0x00010007

0801400c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 801400c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801400e:	2600      	movs	r6, #0
 8014010:	f891 30a4 	ldrb.w	r3, [r1, #164]	; 0xa4
 8014014:	4605      	mov	r5, r0
 8014016:	460c      	mov	r4, r1
 8014018:	8006      	strh	r6, [r0, #0]
 801401a:	8046      	strh	r6, [r0, #2]
 801401c:	8086      	strh	r6, [r0, #4]
 801401e:	80c6      	strh	r6, [r0, #6]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d041      	beq.n	80140a8 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8014024:	680b      	ldr	r3, [r1, #0]
 8014026:	4668      	mov	r0, sp
 8014028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801402c:	4798      	blx	r3
 801402e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8014032:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d039      	beq.n	80140ae <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 801403a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801403e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014042:	429a      	cmp	r2, r3
 8014044:	dd05      	ble.n	8014052 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>
 8014046:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801404a:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801404e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8014052:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014056:	42bb      	cmp	r3, r7
 8014058:	da26      	bge.n	80140a8 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801405a:	f9bd 0000 	ldrsh.w	r0, [sp]
 801405e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014062:	4242      	negs	r2, r0
 8014064:	4438      	add	r0, r7
 8014066:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 801406a:	b200      	sxth	r0, r0
 801406c:	435a      	muls	r2, r3
 801406e:	1b9e      	subs	r6, r3, r6
 8014070:	1ac0      	subs	r0, r0, r3
 8014072:	4343      	muls	r3, r0
 8014074:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8014078:	fb92 f2f7 	sdiv	r2, r2, r7
 801407c:	fb93 f3f7 	sdiv	r3, r3, r7
 8014080:	4413      	add	r3, r2
 8014082:	0047      	lsls	r7, r0, #1
 8014084:	1af3      	subs	r3, r6, r3
 8014086:	429f      	cmp	r7, r3
 8014088:	dd05      	ble.n	8014096 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 801408a:	1afb      	subs	r3, r7, r3
 801408c:	4353      	muls	r3, r2
 801408e:	fb93 f3f6 	sdiv	r3, r3, r6
 8014092:	1ad2      	subs	r2, r2, r3
 8014094:	463b      	mov	r3, r7
 8014096:	b289      	uxth	r1, r1
 8014098:	8964      	ldrh	r4, [r4, #10]
 801409a:	80ab      	strh	r3, [r5, #4]
 801409c:	180e      	adds	r6, r1, r0
 801409e:	4411      	add	r1, r2
 80140a0:	80e8      	strh	r0, [r5, #6]
 80140a2:	1ba4      	subs	r4, r4, r6
 80140a4:	8029      	strh	r1, [r5, #0]
 80140a6:	806c      	strh	r4, [r5, #2]
 80140a8:	4628      	mov	r0, r5
 80140aa:	b003      	add	sp, #12
 80140ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140ae:	461e      	mov	r6, r3
 80140b0:	e7cf      	b.n	8014052 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>

080140b2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 80140b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80140b4:	2600      	movs	r6, #0
 80140b6:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
 80140ba:	4605      	mov	r5, r0
 80140bc:	460c      	mov	r4, r1
 80140be:	8006      	strh	r6, [r0, #0]
 80140c0:	8046      	strh	r6, [r0, #2]
 80140c2:	8086      	strh	r6, [r0, #4]
 80140c4:	80c6      	strh	r6, [r0, #6]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d041      	beq.n	801414e <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 80140ca:	680b      	ldr	r3, [r1, #0]
 80140cc:	4668      	mov	r0, sp
 80140ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140d2:	4798      	blx	r3
 80140d4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80140d8:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d039      	beq.n	8014154 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 80140e0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80140e4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80140e8:	429a      	cmp	r2, r3
 80140ea:	dd05      	ble.n	80140f8 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>
 80140ec:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80140f0:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80140f4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80140f8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80140fc:	42bb      	cmp	r3, r7
 80140fe:	da26      	bge.n	801414e <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8014100:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8014104:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014108:	4242      	negs	r2, r0
 801410a:	4438      	add	r0, r7
 801410c:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 8014110:	b200      	sxth	r0, r0
 8014112:	435a      	muls	r2, r3
 8014114:	1b9e      	subs	r6, r3, r6
 8014116:	1ac0      	subs	r0, r0, r3
 8014118:	4343      	muls	r3, r0
 801411a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 801411e:	fb92 f2f7 	sdiv	r2, r2, r7
 8014122:	fb93 f3f7 	sdiv	r3, r3, r7
 8014126:	4413      	add	r3, r2
 8014128:	0047      	lsls	r7, r0, #1
 801412a:	1af3      	subs	r3, r6, r3
 801412c:	429f      	cmp	r7, r3
 801412e:	dd05      	ble.n	801413c <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 8014130:	1afb      	subs	r3, r7, r3
 8014132:	4353      	muls	r3, r2
 8014134:	fb93 f3f6 	sdiv	r3, r3, r6
 8014138:	1ad2      	subs	r2, r2, r3
 801413a:	463b      	mov	r3, r7
 801413c:	b289      	uxth	r1, r1
 801413e:	8924      	ldrh	r4, [r4, #8]
 8014140:	80a8      	strh	r0, [r5, #4]
 8014142:	180e      	adds	r6, r1, r0
 8014144:	4411      	add	r1, r2
 8014146:	80eb      	strh	r3, [r5, #6]
 8014148:	1ba4      	subs	r4, r4, r6
 801414a:	8069      	strh	r1, [r5, #2]
 801414c:	802c      	strh	r4, [r5, #0]
 801414e:	4628      	mov	r0, r5
 8014150:	b003      	add	sp, #12
 8014152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014154:	461e      	mov	r6, r3
 8014156:	e7cf      	b.n	80140f8 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>

08014158 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8014158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801415c:	4617      	mov	r7, r2
 801415e:	2200      	movs	r2, #0
 8014160:	4604      	mov	r4, r0
 8014162:	460e      	mov	r6, r1
 8014164:	8002      	strh	r2, [r0, #0]
 8014166:	4698      	mov	r8, r3
 8014168:	8042      	strh	r2, [r0, #2]
 801416a:	8082      	strh	r2, [r0, #4]
 801416c:	80c2      	strh	r2, [r0, #6]
 801416e:	4638      	mov	r0, r7
 8014170:	f7ff f90d 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014174:	4605      	mov	r5, r0
 8014176:	b998      	cbnz	r0, 80141a0 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 8014178:	4640      	mov	r0, r8
 801417a:	f7ff f908 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 801417e:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8014182:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 8014186:	b908      	cbnz	r0, 801418c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 8014188:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 801418c:	8933      	ldrh	r3, [r6, #8]
 801418e:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8014192:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014196:	8022      	strh	r2, [r4, #0]
 8014198:	8067      	strh	r7, [r4, #2]
 801419a:	1b58      	subs	r0, r3, r5
 801419c:	80e1      	strh	r1, [r4, #6]
 801419e:	80a0      	strh	r0, [r4, #4]
 80141a0:	4620      	mov	r0, r4
 80141a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141a6 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 80141a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141aa:	4604      	mov	r4, r0
 80141ac:	2000      	movs	r0, #0
 80141ae:	460f      	mov	r7, r1
 80141b0:	4616      	mov	r6, r2
 80141b2:	8020      	strh	r0, [r4, #0]
 80141b4:	4698      	mov	r8, r3
 80141b6:	8060      	strh	r0, [r4, #2]
 80141b8:	80a0      	strh	r0, [r4, #4]
 80141ba:	80e0      	strh	r0, [r4, #6]
 80141bc:	4618      	mov	r0, r3
 80141be:	f7ff f8e6 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 80141c2:	4605      	mov	r5, r0
 80141c4:	b998      	cbnz	r0, 80141ee <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 80141c6:	4630      	mov	r0, r6
 80141c8:	f7ff f8e1 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 80141cc:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 80141d0:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80141d4:	b908      	cbnz	r0, 80141da <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 80141d6:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 80141da:	897a      	ldrh	r2, [r7, #10]
 80141dc:	f8b8 3000 	ldrh.w	r3, [r8]
 80141e0:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 80141e4:	8066      	strh	r6, [r4, #2]
 80141e6:	8023      	strh	r3, [r4, #0]
 80141e8:	1b50      	subs	r0, r2, r5
 80141ea:	80a1      	strh	r1, [r4, #4]
 80141ec:	80e0      	strh	r0, [r4, #6]
 80141ee:	4620      	mov	r0, r4
 80141f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141f4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 80141f4:	b570      	push	{r4, r5, r6, lr}
 80141f6:	b088      	sub	sp, #32
 80141f8:	4604      	mov	r4, r0
 80141fa:	4601      	mov	r1, r0
 80141fc:	4668      	mov	r0, sp
 80141fe:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8014202:	f7ff ff03 	bl	801400c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 8014206:	4621      	mov	r1, r4
 8014208:	a802      	add	r0, sp, #8
 801420a:	f7ff ff52 	bl	80140b2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 801420e:	ab02      	add	r3, sp, #8
 8014210:	466a      	mov	r2, sp
 8014212:	4621      	mov	r1, r4
 8014214:	a804      	add	r0, sp, #16
 8014216:	f7ff ff9f 	bl	8014158 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 801421a:	ab02      	add	r3, sp, #8
 801421c:	466a      	mov	r2, sp
 801421e:	4621      	mov	r1, r4
 8014220:	a806      	add	r0, sp, #24
 8014222:	f7ff ffc0 	bl	80141a6 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 8014226:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801422a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801422e:	429a      	cmp	r2, r3
 8014230:	da02      	bge.n	8014238 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8014232:	4630      	mov	r0, r6
 8014234:	f004 fe52 	bl	8018edc <_ZNK8touchgfx8Drawable10invalidateEv>
 8014238:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801423c:	f104 0564 	add.w	r5, r4, #100	; 0x64
 8014240:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8014244:	429a      	cmp	r2, r3
 8014246:	da02      	bge.n	801424e <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 8014248:	4628      	mov	r0, r5
 801424a:	f004 fe47 	bl	8018edc <_ZNK8touchgfx8Drawable10invalidateEv>
 801424e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8014252:	f8bd 0000 	ldrh.w	r0, [sp]
 8014256:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801425a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801425e:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8014260:	4630      	mov	r0, r6
 8014262:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8014264:	f7ff fa10 	bl	8013688 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014268:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801426c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8014270:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8014274:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8014278:	4628      	mov	r0, r5
 801427a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 801427e:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8014282:	f7ff fa01 	bl	8013688 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014286:	8922      	ldrh	r2, [r4, #8]
 8014288:	2300      	movs	r3, #0
 801428a:	a804      	add	r0, sp, #16
 801428c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014290:	8962      	ldrh	r2, [r4, #10]
 8014292:	f8ad 3010 	strh.w	r3, [sp, #16]
 8014296:	f8ad 201e 	strh.w	r2, [sp, #30]
 801429a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801429e:	f7ff f876 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 80142a2:	b920      	cbnz	r0, 80142ae <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 80142a4:	6823      	ldr	r3, [r4, #0]
 80142a6:	a904      	add	r1, sp, #16
 80142a8:	4620      	mov	r0, r4
 80142aa:	691b      	ldr	r3, [r3, #16]
 80142ac:	4798      	blx	r3
 80142ae:	a806      	add	r0, sp, #24
 80142b0:	f7ff f86d 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 80142b4:	b920      	cbnz	r0, 80142c0 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 80142b6:	6823      	ldr	r3, [r4, #0]
 80142b8:	a906      	add	r1, sp, #24
 80142ba:	4620      	mov	r0, r4
 80142bc:	691b      	ldr	r3, [r3, #16]
 80142be:	4798      	blx	r3
 80142c0:	b008      	add	sp, #32
 80142c2:	bd70      	pop	{r4, r5, r6, pc}

080142c4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 80142c4:	b570      	push	{r4, r5, r6, lr}
 80142c6:	790b      	ldrb	r3, [r1, #4]
 80142c8:	b08a      	sub	sp, #40	; 0x28
 80142ca:	4604      	mov	r4, r0
 80142cc:	460d      	mov	r5, r1
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d17e      	bne.n	80143d0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10c>
 80142d2:	2201      	movs	r2, #1
 80142d4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80142d8:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 80142dc:	b142      	cbz	r2, 80142f0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2c>
 80142de:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 80142e2:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
 80142e6:	f003 fe25 	bl	8017f34 <_ZN8touchgfx11Application11getInstanceEv>
 80142ea:	4621      	mov	r1, r4
 80142ec:	f003 fe4d 	bl	8017f8a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80142f0:	4623      	mov	r3, r4
 80142f2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80142f6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80142fa:	f853 0bb4 	ldr.w	r0, [r3], #180
 80142fe:	9301      	str	r3, [sp, #4]
 8014300:	f104 03b2 	add.w	r3, r4, #178	; 0xb2
 8014304:	9300      	str	r3, [sp, #0]
 8014306:	f104 0390 	add.w	r3, r4, #144	; 0x90
 801430a:	6f86      	ldr	r6, [r0, #120]	; 0x78
 801430c:	4620      	mov	r0, r4
 801430e:	47b0      	blx	r6
 8014310:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8014314:	42a3      	cmp	r3, r4
 8014316:	bf04      	itt	eq
 8014318:	2300      	moveq	r3, #0
 801431a:	f8c4 3090 	streq.w	r3, [r4, #144]	; 0x90
 801431e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8014322:	2900      	cmp	r1, #0
 8014324:	d03a      	beq.n	801439c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 8014326:	2600      	movs	r6, #0
 8014328:	a803      	add	r0, sp, #12
 801432a:	f884 60b6 	strb.w	r6, [r4, #182]	; 0xb6
 801432e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014332:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8014336:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801433a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 801433e:	f004 fe69 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014342:	4621      	mov	r1, r4
 8014344:	a805      	add	r0, sp, #20
 8014346:	f004 fe65 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801434a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801434e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014352:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8014356:	1ad2      	subs	r2, r2, r3
 8014358:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801435c:	7929      	ldrb	r1, [r5, #4]
 801435e:	441a      	add	r2, r3
 8014360:	88eb      	ldrh	r3, [r5, #6]
 8014362:	f88d 1020 	strb.w	r1, [sp, #32]
 8014366:	a907      	add	r1, sp, #28
 8014368:	441a      	add	r2, r3
 801436a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801436e:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8014372:	1a1b      	subs	r3, r3, r0
 8014374:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8014378:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 801437c:	4403      	add	r3, r0
 801437e:	8928      	ldrh	r0, [r5, #8]
 8014380:	4403      	add	r3, r0
 8014382:	482f      	ldr	r0, [pc, #188]	; (8014440 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8014384:	9007      	str	r0, [sp, #28]
 8014386:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801438a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801438e:	6803      	ldr	r3, [r0, #0]
 8014390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014392:	4798      	blx	r3
 8014394:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8014398:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 801439c:	2300      	movs	r3, #0
 801439e:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 80143a2:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80143a6:	b112      	cbz	r2, 80143ae <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xea>
 80143a8:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 80143ac:	b90b      	cbnz	r3, 80143b2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xee>
 80143ae:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 80143b2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 80143b6:	b112      	cbz	r2, 80143be <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfa>
 80143b8:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 80143bc:	b90b      	cbnz	r3, 80143c2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfe>
 80143be:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 80143c2:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 80143c6:	4620      	mov	r0, r4
 80143c8:	f7ff ff14 	bl	80141f4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80143cc:	b00a      	add	sp, #40	; 0x28
 80143ce:	bd70      	pop	{r4, r5, r6, pc}
 80143d0:	2b02      	cmp	r3, #2
 80143d2:	d0fb      	beq.n	80143cc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x108>
 80143d4:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 80143d8:	b361      	cbz	r1, 8014434 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x170>
 80143da:	a803      	add	r0, sp, #12
 80143dc:	f004 fe1a 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80143e0:	4621      	mov	r1, r4
 80143e2:	a805      	add	r0, sp, #20
 80143e4:	f004 fe16 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80143e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80143ec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80143f0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80143f4:	1ad2      	subs	r2, r2, r3
 80143f6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80143fa:	7929      	ldrb	r1, [r5, #4]
 80143fc:	441a      	add	r2, r3
 80143fe:	88eb      	ldrh	r3, [r5, #6]
 8014400:	f88d 1020 	strb.w	r1, [sp, #32]
 8014404:	a907      	add	r1, sp, #28
 8014406:	441a      	add	r2, r3
 8014408:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801440c:	1a1b      	subs	r3, r3, r0
 801440e:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8014412:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8014416:	4403      	add	r3, r0
 8014418:	8928      	ldrh	r0, [r5, #8]
 801441a:	4403      	add	r3, r0
 801441c:	4808      	ldr	r0, [pc, #32]	; (8014440 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 801441e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014422:	2300      	movs	r3, #0
 8014424:	9007      	str	r0, [sp, #28]
 8014426:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801442a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801442e:	6803      	ldr	r3, [r0, #0]
 8014430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014432:	4798      	blx	r3
 8014434:	2300      	movs	r3, #0
 8014436:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
 801443a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 801443e:	e7ad      	b.n	801439c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 8014440:	08026a38 	.word	0x08026a38

08014444 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8014444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014446:	4606      	mov	r6, r0
 8014448:	4615      	mov	r5, r2
 801444a:	460c      	mov	r4, r1
 801444c:	b919      	cbnz	r1, 8014456 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 801444e:	b912      	cbnz	r2, 8014456 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8014450:	2000      	movs	r0, #0
 8014452:	b003      	add	sp, #12
 8014454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014456:	6833      	ldr	r3, [r6, #0]
 8014458:	4631      	mov	r1, r6
 801445a:	4668      	mov	r0, sp
 801445c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014460:	4798      	blx	r3
 8014462:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8014466:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 801446a:	f9bd 2000 	ldrsh.w	r2, [sp]
 801446e:	4288      	cmp	r0, r1
 8014470:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8014474:	da2c      	bge.n	80144d0 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8c>
 8014476:	2c00      	cmp	r4, #0
 8014478:	dd20      	ble.n	80144bc <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x78>
 801447a:	1913      	adds	r3, r2, r4
 801447c:	2b00      	cmp	r3, #0
 801447e:	dd01      	ble.n	8014484 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8014480:	4252      	negs	r2, r2
 8014482:	b214      	sxth	r4, r2
 8014484:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8014488:	4297      	cmp	r7, r2
 801448a:	dd2c      	ble.n	80144e6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 801448c:	2d00      	cmp	r5, #0
 801448e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8014492:	dd1f      	ble.n	80144d4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x90>
 8014494:	195a      	adds	r2, r3, r5
 8014496:	2a00      	cmp	r2, #0
 8014498:	dd04      	ble.n	80144a4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 801449a:	425b      	negs	r3, r3
 801449c:	b21d      	sxth	r5, r3
 801449e:	b90c      	cbnz	r4, 80144a4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 80144a0:	2d00      	cmp	r5, #0
 80144a2:	d0d5      	beq.n	8014450 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 80144a4:	6833      	ldr	r3, [r6, #0]
 80144a6:	462a      	mov	r2, r5
 80144a8:	4621      	mov	r1, r4
 80144aa:	4630      	mov	r0, r6
 80144ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80144b0:	4798      	blx	r3
 80144b2:	4630      	mov	r0, r6
 80144b4:	f7ff fe9e 	bl	80141f4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80144b8:	2001      	movs	r0, #1
 80144ba:	e7ca      	b.n	8014452 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 80144bc:	d0e2      	beq.n	8014484 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80144be:	440a      	add	r2, r1
 80144c0:	b292      	uxth	r2, r2
 80144c2:	fa04 f382 	sxtah	r3, r4, r2
 80144c6:	4283      	cmp	r3, r0
 80144c8:	dadc      	bge.n	8014484 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80144ca:	1a84      	subs	r4, r0, r2
 80144cc:	b224      	sxth	r4, r4
 80144ce:	e7d9      	b.n	8014484 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80144d0:	2400      	movs	r4, #0
 80144d2:	e7d7      	b.n	8014484 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80144d4:	d007      	beq.n	80144e6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 80144d6:	443b      	add	r3, r7
 80144d8:	b29b      	uxth	r3, r3
 80144da:	fa05 f183 	sxtah	r1, r5, r3
 80144de:	4291      	cmp	r1, r2
 80144e0:	dae0      	bge.n	80144a4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 80144e2:	1ad3      	subs	r3, r2, r3
 80144e4:	e7da      	b.n	801449c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x58>
 80144e6:	2c00      	cmp	r4, #0
 80144e8:	d0b2      	beq.n	8014450 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 80144ea:	2500      	movs	r5, #0
 80144ec:	e7da      	b.n	80144a4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>

080144ee <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 80144ee:	b513      	push	{r0, r1, r4, lr}
 80144f0:	6803      	ldr	r3, [r0, #0]
 80144f2:	4601      	mov	r1, r0
 80144f4:	4604      	mov	r4, r0
 80144f6:	4668      	mov	r0, sp
 80144f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80144fc:	4798      	blx	r3
 80144fe:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8014502:	f9bd 1000 	ldrsh.w	r1, [sp]
 8014506:	2800      	cmp	r0, #0
 8014508:	dd20      	ble.n	801454c <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 801450a:	4602      	mov	r2, r0
 801450c:	2900      	cmp	r1, #0
 801450e:	dc0e      	bgt.n	801452e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8014510:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014514:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8014518:	440b      	add	r3, r1
 801451a:	b21b      	sxth	r3, r3
 801451c:	4298      	cmp	r0, r3
 801451e:	dd04      	ble.n	801452a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 8014520:	1a1b      	subs	r3, r3, r0
 8014522:	4299      	cmp	r1, r3
 8014524:	bfb8      	it	lt
 8014526:	4619      	movlt	r1, r3
 8014528:	b909      	cbnz	r1, 801452e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 801452a:	b1f2      	cbz	r2, 801456a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 801452c:	2100      	movs	r1, #0
 801452e:	6823      	ldr	r3, [r4, #0]
 8014530:	4252      	negs	r2, r2
 8014532:	4249      	negs	r1, r1
 8014534:	4620      	mov	r0, r4
 8014536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801453a:	b212      	sxth	r2, r2
 801453c:	b209      	sxth	r1, r1
 801453e:	4798      	blx	r3
 8014540:	4620      	mov	r0, r4
 8014542:	b002      	add	sp, #8
 8014544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014548:	f7ff be54 	b.w	80141f4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 801454c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014550:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8014554:	4403      	add	r3, r0
 8014556:	b21b      	sxth	r3, r3
 8014558:	429a      	cmp	r2, r3
 801455a:	dd04      	ble.n	8014566 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 801455c:	1a9a      	subs	r2, r3, r2
 801455e:	4282      	cmp	r2, r0
 8014560:	bfb8      	it	lt
 8014562:	4602      	movlt	r2, r0
 8014564:	e7d2      	b.n	801450c <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 8014566:	2200      	movs	r2, #0
 8014568:	e7d0      	b.n	801450c <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 801456a:	b002      	add	sp, #8
 801456c:	bd10      	pop	{r4, pc}

0801456e <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 801456e:	6301      	str	r1, [r0, #48]	; 0x30
 8014570:	6601      	str	r1, [r0, #96]	; 0x60
 8014572:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8014576:	4770      	bx	lr

08014578 <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>:
 8014578:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 801457c:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
 8014580:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
 8014584:	4770      	bx	lr

08014586 <_ZN8touchgfx19ScrollableContainer19setScrollbarPaddingEh>:
 8014586:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 801458a:	4770      	bx	lr

0801458c <_ZN8touchgfx19ScrollableContainer17setScrollbarWidthEh>:
 801458c:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8014590:	4770      	bx	lr

08014592 <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>:
 8014592:	2201      	movs	r2, #1
 8014594:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
 8014598:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
 801459c:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 80145a0:	f7ff be28 	b.w	80141f4 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

080145a4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80145a4:	4770      	bx	lr

080145a6 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80145a6:	4770      	bx	lr

080145a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80145a8:	6803      	ldr	r3, [r0, #0]
 80145aa:	b513      	push	{r0, r1, r4, lr}
 80145ac:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80145b0:	2300      	movs	r3, #0
 80145b2:	e9cd 3300 	strd	r3, r3, [sp]
 80145b6:	466b      	mov	r3, sp
 80145b8:	47a0      	blx	r4
 80145ba:	b002      	add	sp, #8
 80145bc:	bd10      	pop	{r4, pc}

080145be <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80145be:	2301      	movs	r3, #1
 80145c0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80145c4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80145c8:	4770      	bx	lr

080145ca <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80145ca:	2301      	movs	r3, #1
 80145cc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80145d0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80145d4:	4770      	bx	lr

080145d6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80145d6:	6843      	ldr	r3, [r0, #4]
 80145d8:	2201      	movs	r2, #1
 80145da:	725a      	strb	r2, [r3, #9]
 80145dc:	6840      	ldr	r0, [r0, #4]
 80145de:	6803      	ldr	r3, [r0, #0]
 80145e0:	691b      	ldr	r3, [r3, #16]
 80145e2:	4718      	bx	r3

080145e4 <_ZN8touchgfx3HAL8flushDMAEv>:
 80145e4:	6840      	ldr	r0, [r0, #4]
 80145e6:	6803      	ldr	r3, [r0, #0]
 80145e8:	689b      	ldr	r3, [r3, #8]
 80145ea:	4718      	bx	r3

080145ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80145ec:	b530      	push	{r4, r5, lr}
 80145ee:	b08b      	sub	sp, #44	; 0x2c
 80145f0:	6804      	ldr	r4, [r0, #0]
 80145f2:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80145f6:	9509      	str	r5, [sp, #36]	; 0x24
 80145f8:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80145fc:	9508      	str	r5, [sp, #32]
 80145fe:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8014602:	9507      	str	r5, [sp, #28]
 8014604:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8014608:	9506      	str	r5, [sp, #24]
 801460a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801460e:	9505      	str	r5, [sp, #20]
 8014610:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8014614:	9504      	str	r5, [sp, #16]
 8014616:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801461a:	9503      	str	r5, [sp, #12]
 801461c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014620:	9502      	str	r5, [sp, #8]
 8014622:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8014626:	e9cd 3500 	strd	r3, r5, [sp]
 801462a:	4613      	mov	r3, r2
 801462c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801462e:	2200      	movs	r2, #0
 8014630:	47a0      	blx	r4
 8014632:	b00b      	add	sp, #44	; 0x2c
 8014634:	bd30      	pop	{r4, r5, pc}
	...

08014638 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014638:	4b04      	ldr	r3, [pc, #16]	; (801464c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	b123      	cbz	r3, 8014648 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801463e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8014642:	f080 0001 	eor.w	r0, r0, #1
 8014646:	4770      	bx	lr
 8014648:	2001      	movs	r0, #1
 801464a:	4770      	bx	lr
 801464c:	2400fee2 	.word	0x2400fee2

08014650 <_ZN8touchgfx3HAL8endFrameEv>:
 8014650:	b510      	push	{r4, lr}
 8014652:	4604      	mov	r4, r0
 8014654:	6840      	ldr	r0, [r0, #4]
 8014656:	6803      	ldr	r3, [r0, #0]
 8014658:	689b      	ldr	r3, [r3, #8]
 801465a:	4798      	blx	r3
 801465c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8014660:	b113      	cbz	r3, 8014668 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014662:	2301      	movs	r3, #1
 8014664:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014668:	bd10      	pop	{r4, pc}

0801466a <_ZN8touchgfx3HAL10initializeEv>:
 801466a:	b510      	push	{r4, lr}
 801466c:	4604      	mov	r4, r0
 801466e:	f7ec f903 	bl	8000878 <_ZN8touchgfx10OSWrappers10initializeEv>
 8014672:	6860      	ldr	r0, [r4, #4]
 8014674:	6803      	ldr	r3, [r0, #0]
 8014676:	68db      	ldr	r3, [r3, #12]
 8014678:	4798      	blx	r3
 801467a:	68e0      	ldr	r0, [r4, #12]
 801467c:	6803      	ldr	r3, [r0, #0]
 801467e:	689b      	ldr	r3, [r3, #8]
 8014680:	4798      	blx	r3
 8014682:	6823      	ldr	r3, [r4, #0]
 8014684:	4620      	mov	r0, r4
 8014686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801468c:	4718      	bx	r3

0801468e <_ZN8touchgfx3HAL9taskEntryEv>:
 801468e:	b508      	push	{r3, lr}
 8014690:	6803      	ldr	r3, [r0, #0]
 8014692:	4604      	mov	r4, r0
 8014694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014698:	4798      	blx	r3
 801469a:	6823      	ldr	r3, [r4, #0]
 801469c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801469e:	4620      	mov	r0, r4
 80146a0:	4798      	blx	r3
 80146a2:	f7ec f945 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80146a6:	6823      	ldr	r3, [r4, #0]
 80146a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146aa:	e7f8      	b.n	801469e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080146ac <_ZN8touchgfx3HAL4tickEv>:
 80146ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80146ae:	6803      	ldr	r3, [r0, #0]
 80146b0:	4604      	mov	r4, r0
 80146b2:	4d5b      	ldr	r5, [pc, #364]	; (8014820 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80146b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80146b8:	4798      	blx	r3
 80146ba:	2800      	cmp	r0, #0
 80146bc:	f000 8095 	beq.w	80147ea <_ZN8touchgfx3HAL4tickEv+0x13e>
 80146c0:	2001      	movs	r0, #1
 80146c2:	2600      	movs	r6, #0
 80146c4:	f7eb fefe 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80146c8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80146cc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80146d0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80146d4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80146d8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80146dc:	b133      	cbz	r3, 80146ec <_ZN8touchgfx3HAL4tickEv+0x40>
 80146de:	6823      	ldr	r3, [r4, #0]
 80146e0:	4620      	mov	r0, r4
 80146e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80146e6:	4798      	blx	r3
 80146e8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80146ec:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80146f0:	2601      	movs	r6, #1
 80146f2:	6862      	ldr	r2, [r4, #4]
 80146f4:	f083 0301 	eor.w	r3, r3, #1
 80146f8:	702e      	strb	r6, [r5, #0]
 80146fa:	7253      	strb	r3, [r2, #9]
 80146fc:	f003 fc1a 	bl	8017f34 <_ZN8touchgfx11Application11getInstanceEv>
 8014700:	6803      	ldr	r3, [r0, #0]
 8014702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014704:	4798      	blx	r3
 8014706:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801470a:	b90b      	cbnz	r3, 8014710 <_ZN8touchgfx3HAL4tickEv+0x64>
 801470c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014710:	f003 fc10 	bl	8017f34 <_ZN8touchgfx11Application11getInstanceEv>
 8014714:	6803      	ldr	r3, [r0, #0]
 8014716:	695b      	ldr	r3, [r3, #20]
 8014718:	4798      	blx	r3
 801471a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801471c:	6803      	ldr	r3, [r0, #0]
 801471e:	691b      	ldr	r3, [r3, #16]
 8014720:	4798      	blx	r3
 8014722:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014726:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801472a:	3b01      	subs	r3, #1
 801472c:	b2db      	uxtb	r3, r3
 801472e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014732:	b10a      	cbz	r2, 8014738 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8014734:	2b00      	cmp	r3, #0
 8014736:	d1eb      	bne.n	8014710 <_ZN8touchgfx3HAL4tickEv+0x64>
 8014738:	4a3a      	ldr	r2, [pc, #232]	; (8014824 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801473a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801473e:	7813      	ldrb	r3, [r2, #0]
 8014740:	3301      	adds	r3, #1
 8014742:	b25b      	sxtb	r3, r3
 8014744:	4299      	cmp	r1, r3
 8014746:	7013      	strb	r3, [r2, #0]
 8014748:	dc10      	bgt.n	801476c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801474a:	2300      	movs	r3, #0
 801474c:	68e0      	ldr	r0, [r4, #12]
 801474e:	a902      	add	r1, sp, #8
 8014750:	7013      	strb	r3, [r2, #0]
 8014752:	aa03      	add	r2, sp, #12
 8014754:	6803      	ldr	r3, [r0, #0]
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	4798      	blx	r3
 801475a:	6823      	ldr	r3, [r4, #0]
 801475c:	2800      	cmp	r0, #0
 801475e:	d050      	beq.n	8014802 <_ZN8touchgfx3HAL4tickEv+0x156>
 8014760:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014764:	4620      	mov	r0, r4
 8014766:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801476a:	4798      	blx	r3
 801476c:	2300      	movs	r3, #0
 801476e:	6960      	ldr	r0, [r4, #20]
 8014770:	f88d 3007 	strb.w	r3, [sp, #7]
 8014774:	b158      	cbz	r0, 801478e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8014776:	6803      	ldr	r3, [r0, #0]
 8014778:	f10d 0107 	add.w	r1, sp, #7
 801477c:	68db      	ldr	r3, [r3, #12]
 801477e:	4798      	blx	r3
 8014780:	b128      	cbz	r0, 801478e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8014782:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014784:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014788:	6803      	ldr	r3, [r0, #0]
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	4798      	blx	r3
 801478e:	f104 001c 	add.w	r0, r4, #28
 8014792:	f00e fc9b 	bl	80230cc <_ZN8touchgfx8Gestures4tickEv>
 8014796:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801479a:	b30b      	cbz	r3, 80147e0 <_ZN8touchgfx3HAL4tickEv+0x134>
 801479c:	6920      	ldr	r0, [r4, #16]
 801479e:	6803      	ldr	r3, [r0, #0]
 80147a0:	691b      	ldr	r3, [r3, #16]
 80147a2:	4798      	blx	r3
 80147a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80147a6:	4606      	mov	r6, r0
 80147a8:	b903      	cbnz	r3, 80147ac <_ZN8touchgfx3HAL4tickEv+0x100>
 80147aa:	6720      	str	r0, [r4, #112]	; 0x70
 80147ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80147ae:	4a1e      	ldr	r2, [pc, #120]	; (8014828 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80147b0:	1af3      	subs	r3, r6, r3
 80147b2:	4293      	cmp	r3, r2
 80147b4:	d914      	bls.n	80147e0 <_ZN8touchgfx3HAL4tickEv+0x134>
 80147b6:	6920      	ldr	r0, [r4, #16]
 80147b8:	6803      	ldr	r3, [r0, #0]
 80147ba:	699b      	ldr	r3, [r3, #24]
 80147bc:	4798      	blx	r3
 80147be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80147c0:	2264      	movs	r2, #100	; 0x64
 80147c2:	1af3      	subs	r3, r6, r3
 80147c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80147c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80147cc:	2800      	cmp	r0, #0
 80147ce:	dc1d      	bgt.n	801480c <_ZN8touchgfx3HAL4tickEv+0x160>
 80147d0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80147d4:	6920      	ldr	r0, [r4, #16]
 80147d6:	2100      	movs	r1, #0
 80147d8:	6803      	ldr	r3, [r0, #0]
 80147da:	69db      	ldr	r3, [r3, #28]
 80147dc:	4798      	blx	r3
 80147de:	6726      	str	r6, [r4, #112]	; 0x70
 80147e0:	f003 fba8 	bl	8017f34 <_ZN8touchgfx11Application11getInstanceEv>
 80147e4:	6803      	ldr	r3, [r0, #0]
 80147e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147e8:	4798      	blx	r3
 80147ea:	6823      	ldr	r3, [r4, #0]
 80147ec:	4620      	mov	r0, r4
 80147ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80147f2:	4798      	blx	r3
 80147f4:	2001      	movs	r0, #1
 80147f6:	f7eb fea3 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80147fa:	2300      	movs	r3, #0
 80147fc:	702b      	strb	r3, [r5, #0]
 80147fe:	b004      	add	sp, #16
 8014800:	bd70      	pop	{r4, r5, r6, pc}
 8014802:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8014806:	4620      	mov	r0, r4
 8014808:	4798      	blx	r3
 801480a:	e7af      	b.n	801476c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801480c:	2863      	cmp	r0, #99	; 0x63
 801480e:	bfcb      	itete	gt
 8014810:	2300      	movgt	r3, #0
 8014812:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8014816:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801481a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801481e:	e7d9      	b.n	80147d4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8014820:	2400fee8 	.word	0x2400fee8
 8014824:	2400fee9 	.word	0x2400fee9
 8014828:	05f5e100 	.word	0x05f5e100

0801482c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801482c:	f7ec b858 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014830 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014830:	6581      	str	r1, [r0, #88]	; 0x58
 8014832:	301c      	adds	r0, #28
 8014834:	f00e bc48 	b.w	80230c8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014838 <_ZN8touchgfx3HAL5touchEll>:
 8014838:	b530      	push	{r4, r5, lr}
 801483a:	b087      	sub	sp, #28
 801483c:	4604      	mov	r4, r0
 801483e:	a804      	add	r0, sp, #16
 8014840:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014844:	f003 f95a 	bl	8017afc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014848:	9b04      	ldr	r3, [sp, #16]
 801484a:	a906      	add	r1, sp, #24
 801484c:	a803      	add	r0, sp, #12
 801484e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014852:	9b05      	ldr	r3, [sp, #20]
 8014854:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014858:	f003 f9a2 	bl	8017ba0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801485c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8014860:	f104 001c 	add.w	r0, r4, #28
 8014864:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014868:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801486c:	b189      	cbz	r1, 8014892 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801486e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8014872:	9300      	str	r3, [sp, #0]
 8014874:	4613      	mov	r3, r2
 8014876:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801487a:	462a      	mov	r2, r5
 801487c:	f00e fc34 	bl	80230e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014880:	b128      	cbz	r0, 801488e <_ZN8touchgfx3HAL5touchEll+0x56>
 8014882:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014886:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014888:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801488c:	6623      	str	r3, [r4, #96]	; 0x60
 801488e:	b007      	add	sp, #28
 8014890:	bd30      	pop	{r4, r5, pc}
 8014892:	f00e fc69 	bl	8023168 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014896:	2301      	movs	r3, #1
 8014898:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801489c:	e7f1      	b.n	8014882 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801489e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801489e:	b510      	push	{r4, lr}
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d046      	beq.n	8014932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80148a4:	ea81 0002 	eor.w	r0, r1, r2
 80148a8:	07c4      	lsls	r4, r0, #31
 80148aa:	d508      	bpl.n	80148be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80148ac:	440b      	add	r3, r1
 80148ae:	3a01      	subs	r2, #1
 80148b0:	428b      	cmp	r3, r1
 80148b2:	d93e      	bls.n	8014932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80148b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80148b8:	f801 0b01 	strb.w	r0, [r1], #1
 80148bc:	e7f8      	b.n	80148b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80148be:	07d0      	lsls	r0, r2, #31
 80148c0:	bf42      	ittt	mi
 80148c2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80148c6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80148ca:	f801 0b01 	strbmi.w	r0, [r1], #1
 80148ce:	2b01      	cmp	r3, #1
 80148d0:	d911      	bls.n	80148f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80148d2:	ea81 0402 	eor.w	r4, r1, r2
 80148d6:	4610      	mov	r0, r2
 80148d8:	07a4      	lsls	r4, r4, #30
 80148da:	d022      	beq.n	8014922 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80148dc:	f023 0401 	bic.w	r4, r3, #1
 80148e0:	440c      	add	r4, r1
 80148e2:	428c      	cmp	r4, r1
 80148e4:	4602      	mov	r2, r0
 80148e6:	d904      	bls.n	80148f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80148e8:	8812      	ldrh	r2, [r2, #0]
 80148ea:	3002      	adds	r0, #2
 80148ec:	f821 2b02 	strh.w	r2, [r1], #2
 80148f0:	e7f7      	b.n	80148e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80148f2:	f003 0301 	and.w	r3, r3, #1
 80148f6:	f023 0003 	bic.w	r0, r3, #3
 80148fa:	4408      	add	r0, r1
 80148fc:	4288      	cmp	r0, r1
 80148fe:	4614      	mov	r4, r2
 8014900:	d904      	bls.n	801490c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014902:	6824      	ldr	r4, [r4, #0]
 8014904:	3204      	adds	r2, #4
 8014906:	f841 4b04 	str.w	r4, [r1], #4
 801490a:	e7f7      	b.n	80148fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801490c:	f003 0303 	and.w	r3, r3, #3
 8014910:	3a01      	subs	r2, #1
 8014912:	440b      	add	r3, r1
 8014914:	428b      	cmp	r3, r1
 8014916:	d90c      	bls.n	8014932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014918:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801491c:	f801 0b01 	strb.w	r0, [r1], #1
 8014920:	e7f8      	b.n	8014914 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014922:	0790      	lsls	r0, r2, #30
 8014924:	d0e7      	beq.n	80148f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014926:	f832 0b02 	ldrh.w	r0, [r2], #2
 801492a:	3b02      	subs	r3, #2
 801492c:	f821 0b02 	strh.w	r0, [r1], #2
 8014930:	e7e1      	b.n	80148f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014932:	2001      	movs	r0, #1
 8014934:	bd10      	pop	{r4, pc}

08014936 <_ZN8touchgfx3HAL7noTouchEv>:
 8014936:	b510      	push	{r4, lr}
 8014938:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801493c:	4604      	mov	r4, r0
 801493e:	b153      	cbz	r3, 8014956 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014940:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8014944:	2101      	movs	r1, #1
 8014946:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801494a:	301c      	adds	r0, #28
 801494c:	f00e fc0c 	bl	8023168 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014950:	2300      	movs	r3, #0
 8014952:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014956:	bd10      	pop	{r4, pc}

08014958 <_ZN8touchgfx3HAL3lcdEv>:
 8014958:	4b04      	ldr	r3, [pc, #16]	; (801496c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014960:	b10a      	cbz	r2, 8014966 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8014962:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014964:	b900      	cbnz	r0, 8014968 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8014966:	6898      	ldr	r0, [r3, #8]
 8014968:	4770      	bx	lr
 801496a:	bf00      	nop
 801496c:	2400fee4 	.word	0x2400fee4

08014970 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014974:	b085      	sub	sp, #20
 8014976:	4604      	mov	r4, r0
 8014978:	2000      	movs	r0, #0
 801497a:	4699      	mov	r9, r3
 801497c:	ad04      	add	r5, sp, #16
 801497e:	460f      	mov	r7, r1
 8014980:	4690      	mov	r8, r2
 8014982:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014986:	69a0      	ldr	r0, [r4, #24]
 8014988:	6806      	ldr	r6, [r0, #0]
 801498a:	9501      	str	r5, [sp, #4]
 801498c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8014990:	9500      	str	r5, [sp, #0]
 8014992:	6835      	ldr	r5, [r6, #0]
 8014994:	47a8      	blx	r5
 8014996:	4d10      	ldr	r5, [pc, #64]	; (80149d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8014998:	4606      	mov	r6, r0
 801499a:	f8a5 9000 	strh.w	r9, [r5]
 801499e:	f7ff ffdb 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 80149a2:	6803      	ldr	r3, [r0, #0]
 80149a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149a6:	4798      	blx	r3
 80149a8:	b128      	cbz	r0, 80149b6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80149aa:	2801      	cmp	r0, #1
 80149ac:	d00b      	beq.n	80149c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80149ae:	4630      	mov	r0, r6
 80149b0:	b005      	add	sp, #20
 80149b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149b6:	882b      	ldrh	r3, [r5, #0]
 80149b8:	fb08 7203 	mla	r2, r8, r3, r7
 80149bc:	9b03      	ldr	r3, [sp, #12]
 80149be:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80149c2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80149c4:	e7f3      	b.n	80149ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80149c6:	882a      	ldrh	r2, [r5, #0]
 80149c8:	9b03      	ldr	r3, [sp, #12]
 80149ca:	fb08 7202 	mla	r2, r8, r2, r7
 80149ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80149d2:	1a9a      	subs	r2, r3, r2
 80149d4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80149d6:	e7ea      	b.n	80149ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80149d8:	2400fede 	.word	0x2400fede

080149dc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80149dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149de:	b08b      	sub	sp, #44	; 0x2c
 80149e0:	4617      	mov	r7, r2
 80149e2:	4604      	mov	r4, r0
 80149e4:	460e      	mov	r6, r1
 80149e6:	461d      	mov	r5, r3
 80149e8:	f7ff ffb6 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 80149ec:	6803      	ldr	r3, [r0, #0]
 80149ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149f0:	4798      	blx	r3
 80149f2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80149f6:	9007      	str	r0, [sp, #28]
 80149f8:	4631      	mov	r1, r6
 80149fa:	6822      	ldr	r2, [r4, #0]
 80149fc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014a00:	4b0c      	ldr	r3, [pc, #48]	; (8014a34 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014a02:	4620      	mov	r0, r4
 8014a04:	881b      	ldrh	r3, [r3, #0]
 8014a06:	9306      	str	r3, [sp, #24]
 8014a08:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014a0c:	9305      	str	r3, [sp, #20]
 8014a0e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014a12:	9304      	str	r3, [sp, #16]
 8014a14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014a18:	9303      	str	r3, [sp, #12]
 8014a1a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014a1e:	9302      	str	r3, [sp, #8]
 8014a20:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014a24:	e9cd 5300 	strd	r5, r3, [sp]
 8014a28:	463b      	mov	r3, r7
 8014a2a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	47a8      	blx	r5
 8014a30:	b00b      	add	sp, #44	; 0x2c
 8014a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a34:	2400fede 	.word	0x2400fede

08014a38 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8014a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a3c:	4698      	mov	r8, r3
 8014a3e:	6803      	ldr	r3, [r0, #0]
 8014a40:	b08b      	sub	sp, #44	; 0x2c
 8014a42:	4617      	mov	r7, r2
 8014a44:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8014a46:	460e      	mov	r6, r1
 8014a48:	4b13      	ldr	r3, [pc, #76]	; (8014a98 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8014a4a:	4604      	mov	r4, r0
 8014a4c:	f8b3 9000 	ldrh.w	r9, [r3]
 8014a50:	f7ff ff82 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 8014a54:	6803      	ldr	r3, [r0, #0]
 8014a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a58:	4798      	blx	r3
 8014a5a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014a5e:	2200      	movs	r2, #0
 8014a60:	4631      	mov	r1, r6
 8014a62:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014a66:	2302      	movs	r3, #2
 8014a68:	4620      	mov	r0, r4
 8014a6a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8014a6e:	2301      	movs	r3, #1
 8014a70:	9305      	str	r3, [sp, #20]
 8014a72:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8014a76:	9304      	str	r3, [sp, #16]
 8014a78:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014a7c:	9303      	str	r3, [sp, #12]
 8014a7e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014a82:	9302      	str	r3, [sp, #8]
 8014a84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014a88:	e9cd 8300 	strd	r8, r3, [sp]
 8014a8c:	463b      	mov	r3, r7
 8014a8e:	47a8      	blx	r5
 8014a90:	b00b      	add	sp, #44	; 0x2c
 8014a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a96:	bf00      	nop
 8014a98:	2400fede 	.word	0x2400fede

08014a9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8014a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014aa0:	4698      	mov	r8, r3
 8014aa2:	6803      	ldr	r3, [r0, #0]
 8014aa4:	b087      	sub	sp, #28
 8014aa6:	460e      	mov	r6, r1
 8014aa8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8014aaa:	4617      	mov	r7, r2
 8014aac:	4b0f      	ldr	r3, [pc, #60]	; (8014aec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8014aae:	4604      	mov	r4, r0
 8014ab0:	f8b3 9000 	ldrh.w	r9, [r3]
 8014ab4:	f7ff ff50 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 8014ab8:	6803      	ldr	r3, [r0, #0]
 8014aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014abc:	4798      	blx	r3
 8014abe:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8014ac2:	463a      	mov	r2, r7
 8014ac4:	4631      	mov	r1, r6
 8014ac6:	f8cd 900c 	str.w	r9, [sp, #12]
 8014aca:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014ace:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8014ad2:	4620      	mov	r0, r4
 8014ad4:	9302      	str	r3, [sp, #8]
 8014ad6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014ada:	9301      	str	r3, [sp, #4]
 8014adc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014ae0:	9300      	str	r3, [sp, #0]
 8014ae2:	4643      	mov	r3, r8
 8014ae4:	47a8      	blx	r5
 8014ae6:	b007      	add	sp, #28
 8014ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014aec:	2400fede 	.word	0x2400fede

08014af0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af4:	4604      	mov	r4, r0
 8014af6:	b08f      	sub	sp, #60	; 0x3c
 8014af8:	4610      	mov	r0, r2
 8014afa:	460d      	mov	r5, r1
 8014afc:	4691      	mov	r9, r2
 8014afe:	461e      	mov	r6, r3
 8014b00:	f006 f97a 	bl	801adf8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014b04:	2800      	cmp	r0, #0
 8014b06:	f000 809d 	beq.w	8014c44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8014b0a:	6823      	ldr	r3, [r4, #0]
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	f8df b198 	ldr.w	fp, [pc, #408]	; 8014ca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014b12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8014b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b18:	4798      	blx	r3
 8014b1a:	6823      	ldr	r3, [r4, #0]
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8014cac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8014b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b24:	4798      	blx	r3
 8014b26:	f8bb 3000 	ldrh.w	r3, [fp]
 8014b2a:	4f5c      	ldr	r7, [pc, #368]	; (8014c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014b2c:	9301      	str	r3, [sp, #4]
 8014b2e:	f8ba 3000 	ldrh.w	r3, [sl]
 8014b32:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8014b36:	4640      	mov	r0, r8
 8014b38:	9302      	str	r3, [sp, #8]
 8014b3a:	883b      	ldrh	r3, [r7, #0]
 8014b3c:	9303      	str	r3, [sp, #12]
 8014b3e:	4b58      	ldr	r3, [pc, #352]	; (8014ca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014b40:	881a      	ldrh	r2, [r3, #0]
 8014b42:	9305      	str	r3, [sp, #20]
 8014b44:	9204      	str	r2, [sp, #16]
 8014b46:	f006 fa9b 	bl	801b080 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014b4a:	8038      	strh	r0, [r7, #0]
 8014b4c:	4640      	mov	r0, r8
 8014b4e:	f006 facb 	bl	801b0e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014b52:	9b05      	ldr	r3, [sp, #20]
 8014b54:	b280      	uxth	r0, r0
 8014b56:	8018      	strh	r0, [r3, #0]
 8014b58:	4b52      	ldr	r3, [pc, #328]	; (8014ca4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d174      	bne.n	8014c4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8014b60:	883b      	ldrh	r3, [r7, #0]
 8014b62:	f8aa 0000 	strh.w	r0, [sl]
 8014b66:	f8ab 3000 	strh.w	r3, [fp]
 8014b6a:	4648      	mov	r0, r9
 8014b6c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8014b70:	f006 f942 	bl	801adf8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014b74:	2200      	movs	r2, #0
 8014b76:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8014b7a:	4611      	mov	r1, r2
 8014b7c:	4628      	mov	r0, r5
 8014b7e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014b82:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014b86:	f7fe fd72 	bl	801366e <_ZN8touchgfx8Drawable5setXYEss>
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8014b90:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8014b94:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	dd5c      	ble.n	8014c56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014b9c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	dd58      	ble.n	8014c56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014ba4:	462a      	mov	r2, r5
 8014ba6:	ab0a      	add	r3, sp, #40	; 0x28
 8014ba8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014bac:	6851      	ldr	r1, [r2, #4]
 8014bae:	c303      	stmia	r3!, {r0, r1}
 8014bb0:	4631      	mov	r1, r6
 8014bb2:	a80a      	add	r0, sp, #40	; 0x28
 8014bb4:	f7fe fba8 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 8014bb8:	4b38      	ldr	r3, [pc, #224]	; (8014c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014bba:	2100      	movs	r1, #0
 8014bbc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014bc0:	4b37      	ldr	r3, [pc, #220]	; (8014ca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014bc2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8014bc6:	aa0a      	add	r2, sp, #40	; 0x28
 8014bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bcc:	910c      	str	r1, [sp, #48]	; 0x30
 8014bce:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014bd2:	ab08      	add	r3, sp, #32
 8014bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014bd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8014bdc:	4618      	mov	r0, r3
 8014bde:	a90c      	add	r1, sp, #48	; 0x30
 8014be0:	f7fe fb92 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 8014be4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d13c      	bne.n	8014c64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8014bea:	2000      	movs	r0, #0
 8014bec:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014bf0:	2600      	movs	r6, #0
 8014bf2:	696b      	ldr	r3, [r5, #20]
 8014bf4:	a908      	add	r1, sp, #32
 8014bf6:	682a      	ldr	r2, [r5, #0]
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	9305      	str	r3, [sp, #20]
 8014bfc:	616e      	str	r6, [r5, #20]
 8014bfe:	6892      	ldr	r2, [r2, #8]
 8014c00:	4790      	blx	r2
 8014c02:	9b05      	ldr	r3, [sp, #20]
 8014c04:	4652      	mov	r2, sl
 8014c06:	4649      	mov	r1, r9
 8014c08:	616b      	str	r3, [r5, #20]
 8014c0a:	4628      	mov	r0, r5
 8014c0c:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8014c10:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014c14:	f7fe fd2b 	bl	801366e <_ZN8touchgfx8Drawable5setXYEss>
 8014c18:	9a01      	ldr	r2, [sp, #4]
 8014c1a:	4b23      	ldr	r3, [pc, #140]	; (8014ca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	801a      	strh	r2, [r3, #0]
 8014c20:	9a02      	ldr	r2, [sp, #8]
 8014c22:	4b22      	ldr	r3, [pc, #136]	; (8014cac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014c24:	801a      	strh	r2, [r3, #0]
 8014c26:	9a03      	ldr	r2, [sp, #12]
 8014c28:	4b1c      	ldr	r3, [pc, #112]	; (8014c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014c2a:	801a      	strh	r2, [r3, #0]
 8014c2c:	4b1c      	ldr	r3, [pc, #112]	; (8014ca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014c2e:	9a04      	ldr	r2, [sp, #16]
 8014c30:	801a      	strh	r2, [r3, #0]
 8014c32:	6823      	ldr	r3, [r4, #0]
 8014c34:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8014c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c3a:	4798      	blx	r3
 8014c3c:	6823      	ldr	r3, [r4, #0]
 8014c3e:	4620      	mov	r0, r4
 8014c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c42:	4798      	blx	r3
 8014c44:	b00f      	add	sp, #60	; 0x3c
 8014c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c4a:	883b      	ldrh	r3, [r7, #0]
 8014c4c:	f8ab 0000 	strh.w	r0, [fp]
 8014c50:	f8aa 3000 	strh.w	r3, [sl]
 8014c54:	e789      	b.n	8014b6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8014c56:	462a      	mov	r2, r5
 8014c58:	ab0a      	add	r3, sp, #40	; 0x28
 8014c5a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014c5e:	6851      	ldr	r1, [r2, #4]
 8014c60:	c303      	stmia	r3!, {r0, r1}
 8014c62:	e7a9      	b.n	8014bb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8014c64:	a807      	add	r0, sp, #28
 8014c66:	f006 fb43 	bl	801b2f0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014c6a:	4606      	mov	r6, r0
 8014c6c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014c6e:	6803      	ldr	r3, [r0, #0]
 8014c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c72:	4798      	blx	r3
 8014c74:	4286      	cmp	r6, r0
 8014c76:	d1b8      	bne.n	8014bea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8014c78:	f7ff fe6e 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 8014c7c:	6803      	ldr	r3, [r0, #0]
 8014c7e:	4606      	mov	r6, r0
 8014c80:	a807      	add	r0, sp, #28
 8014c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c84:	9305      	str	r3, [sp, #20]
 8014c86:	f006 fb33 	bl	801b2f0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014c8a:	9b05      	ldr	r3, [sp, #20]
 8014c8c:	4601      	mov	r1, r0
 8014c8e:	4630      	mov	r0, r6
 8014c90:	4798      	blx	r3
 8014c92:	f080 0001 	eor.w	r0, r0, #1
 8014c96:	b2c0      	uxtb	r0, r0
 8014c98:	e7a8      	b.n	8014bec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8014c9a:	bf00      	nop
 8014c9c:	2400fed8 	.word	0x2400fed8
 8014ca0:	2400feda 	.word	0x2400feda
 8014ca4:	2400fedc 	.word	0x2400fedc
 8014ca8:	2400fede 	.word	0x2400fede
 8014cac:	2400fee0 	.word	0x2400fee0

08014cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8014cb0:	4b07      	ldr	r3, [pc, #28]	; (8014cd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8014cb2:	b510      	push	{r4, lr}
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	b13b      	cbz	r3, 8014cca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014cba:	6803      	ldr	r3, [r0, #0]
 8014cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cbe:	4798      	blx	r3
 8014cc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014cc2:	4283      	cmp	r3, r0
 8014cc4:	d101      	bne.n	8014cca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8014cc6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8014cc8:	bd10      	pop	{r4, pc}
 8014cca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014ccc:	e7fc      	b.n	8014cc8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8014cce:	bf00      	nop
 8014cd0:	2400fee2 	.word	0x2400fee2

08014cd4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8014cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd8:	461d      	mov	r5, r3
 8014cda:	b08a      	sub	sp, #40	; 0x28
 8014cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ce0:	4690      	mov	r8, r2
 8014ce2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8014ce6:	2400      	movs	r4, #0
 8014ce8:	4607      	mov	r7, r0
 8014cea:	fb06 8505 	mla	r5, r6, r5, r8
 8014cee:	9404      	str	r4, [sp, #16]
 8014cf0:	f88d 4020 	strb.w	r4, [sp, #32]
 8014cf4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014cf8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014cfc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014d00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014d04:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014d08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014d0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014d10:	f7ff ffce 	bl	8014cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014d14:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014d1e:	a901      	add	r1, sp, #4
 8014d20:	9505      	str	r5, [sp, #20]
 8014d22:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014d26:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8014d2a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014d2e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8014d32:	6803      	ldr	r3, [r0, #0]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	4798      	blx	r3
 8014d38:	b00a      	add	sp, #40	; 0x28
 8014d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d3e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014d3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d42:	b08b      	sub	sp, #44	; 0x2c
 8014d44:	2400      	movs	r4, #0
 8014d46:	4691      	mov	r9, r2
 8014d48:	461d      	mov	r5, r3
 8014d4a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8014d4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d52:	4688      	mov	r8, r1
 8014d54:	4607      	mov	r7, r0
 8014d56:	9404      	str	r4, [sp, #16]
 8014d58:	fb06 9505 	mla	r5, r6, r5, r9
 8014d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d60:	f7ff ffa6 	bl	8014cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014d64:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014d68:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014d72:	a901      	add	r1, sp, #4
 8014d74:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014d78:	9505      	str	r5, [sp, #20]
 8014d7a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014d7e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014d82:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014d86:	f8cd 8010 	str.w	r8, [sp, #16]
 8014d8a:	f8ad 4020 	strh.w	r4, [sp, #32]
 8014d8e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014d92:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014d96:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8014d9a:	6803      	ldr	r3, [r0, #0]
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	4798      	blx	r3
 8014da0:	b00b      	add	sp, #44	; 0x2c
 8014da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08014da8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dac:	b08a      	sub	sp, #40	; 0x28
 8014dae:	4698      	mov	r8, r3
 8014db0:	2300      	movs	r3, #0
 8014db2:	4606      	mov	r6, r0
 8014db4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8014db8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8014dbc:	2d0b      	cmp	r5, #11
 8014dbe:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8014dc2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8014dc6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8014dca:	9304      	str	r3, [sp, #16]
 8014dcc:	d137      	bne.n	8014e3e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8014dce:	2380      	movs	r3, #128	; 0x80
 8014dd0:	f88d 0020 	strb.w	r0, [sp, #32]
 8014dd4:	4630      	mov	r0, r6
 8014dd6:	9203      	str	r2, [sp, #12]
 8014dd8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014ddc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014de0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014de4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014de8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014dec:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014df0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014df4:	f7ff ff5c 	bl	8014cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014df8:	2c0b      	cmp	r4, #11
 8014dfa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8014dfe:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014e02:	bf94      	ite	ls
 8014e04:	4b19      	ldrls	r3, [pc, #100]	; (8014e6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8014e06:	2100      	movhi	r1, #0
 8014e08:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8014e0c:	bf98      	it	ls
 8014e0e:	5d19      	ldrbls	r1, [r3, r4]
 8014e10:	fb02 8307 	mla	r3, r2, r7, r8
 8014e14:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8014e18:	10c9      	asrs	r1, r1, #3
 8014e1a:	fb01 0003 	mla	r0, r1, r3, r0
 8014e1e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014e22:	a901      	add	r1, sp, #4
 8014e24:	9005      	str	r0, [sp, #20]
 8014e26:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	6870      	ldr	r0, [r6, #4]
 8014e2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014e32:	6803      	ldr	r3, [r0, #0]
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	4798      	blx	r3
 8014e38:	b00a      	add	sp, #40	; 0x28
 8014e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e3e:	2d02      	cmp	r5, #2
 8014e40:	d109      	bne.n	8014e56 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8014e42:	28ff      	cmp	r0, #255	; 0xff
 8014e44:	d105      	bne.n	8014e52 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8014e46:	f1bc 0f00 	cmp.w	ip, #0
 8014e4a:	bf14      	ite	ne
 8014e4c:	2340      	movne	r3, #64	; 0x40
 8014e4e:	2320      	moveq	r3, #32
 8014e50:	e7be      	b.n	8014dd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014e52:	2340      	movs	r3, #64	; 0x40
 8014e54:	e7bc      	b.n	8014dd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014e56:	28ff      	cmp	r0, #255	; 0xff
 8014e58:	d105      	bne.n	8014e66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8014e5a:	f1bc 0f00 	cmp.w	ip, #0
 8014e5e:	bf14      	ite	ne
 8014e60:	2304      	movne	r3, #4
 8014e62:	2301      	moveq	r3, #1
 8014e64:	e7b4      	b.n	8014dd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014e66:	2304      	movs	r3, #4
 8014e68:	e7b2      	b.n	8014dd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8014e6a:	bf00      	nop
 8014e6c:	08026af4 	.word	0x08026af4

08014e70 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e74:	b08b      	sub	sp, #44	; 0x2c
 8014e76:	461d      	mov	r5, r3
 8014e78:	2400      	movs	r4, #0
 8014e7a:	4688      	mov	r8, r1
 8014e7c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8014e80:	4693      	mov	fp, r2
 8014e82:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8014e86:	4607      	mov	r7, r0
 8014e88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014e8c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8014e90:	9404      	str	r4, [sp, #16]
 8014e92:	bf14      	ite	ne
 8014e94:	2308      	movne	r3, #8
 8014e96:	2302      	moveq	r3, #2
 8014e98:	fb05 b50a 	mla	r5, r5, sl, fp
 8014e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014ea0:	f7ff ff06 	bl	8014cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ea4:	2e0b      	cmp	r6, #11
 8014ea6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014eaa:	a901      	add	r1, sp, #4
 8014eac:	bf98      	it	ls
 8014eae:	4b13      	ldrls	r3, [pc, #76]	; (8014efc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014eb0:	f8ad a01e 	strh.w	sl, [sp, #30]
 8014eb4:	bf98      	it	ls
 8014eb6:	5d9c      	ldrbls	r4, [r3, r6]
 8014eb8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014ebc:	10e4      	asrs	r4, r4, #3
 8014ebe:	f8cd 8010 	str.w	r8, [sp, #16]
 8014ec2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014ec6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014eca:	fb04 0405 	mla	r4, r4, r5, r0
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	9405      	str	r4, [sp, #20]
 8014ed8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014edc:	f88d 9020 	strb.w	r9, [sp, #32]
 8014ee0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8014ee4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014ee8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8014eec:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8014ef0:	6803      	ldr	r3, [r0, #0]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	4798      	blx	r3
 8014ef6:	b00b      	add	sp, #44	; 0x2c
 8014ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014efc:	08026af4 	.word	0x08026af4

08014f00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f04:	461e      	mov	r6, r3
 8014f06:	4b0a      	ldr	r3, [pc, #40]	; (8014f30 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8014f08:	460f      	mov	r7, r1
 8014f0a:	4690      	mov	r8, r2
 8014f0c:	881d      	ldrh	r5, [r3, #0]
 8014f0e:	f7ff fd23 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 8014f12:	6803      	ldr	r3, [r0, #0]
 8014f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f16:	4798      	blx	r3
 8014f18:	280b      	cmp	r0, #11
 8014f1a:	bf96      	itet	ls
 8014f1c:	4b05      	ldrls	r3, [pc, #20]	; (8014f34 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014f1e:	2400      	movhi	r4, #0
 8014f20:	5c1c      	ldrbls	r4, [r3, r0]
 8014f22:	fb08 7005 	mla	r0, r8, r5, r7
 8014f26:	10e4      	asrs	r4, r4, #3
 8014f28:	fb04 6000 	mla	r0, r4, r0, r6
 8014f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f30:	2400fede 	.word	0x2400fede
 8014f34:	08026af4 	.word	0x08026af4

08014f38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f3a:	b08b      	sub	sp, #44	; 0x2c
 8014f3c:	461f      	mov	r7, r3
 8014f3e:	4604      	mov	r4, r0
 8014f40:	4616      	mov	r6, r2
 8014f42:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014f46:	2500      	movs	r5, #0
 8014f48:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014f4c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014f50:	9504      	str	r5, [sp, #16]
 8014f52:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014f56:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014f5a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014f5e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014f62:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014f66:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014f6a:	f88d 3020 	strb.w	r3, [sp, #32]
 8014f6e:	f7ff fe9f 	bl	8014cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014f72:	463a      	mov	r2, r7
 8014f74:	4631      	mov	r1, r6
 8014f76:	4603      	mov	r3, r0
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f7ff ffc1 	bl	8014f00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014f7e:	4b0e      	ldr	r3, [pc, #56]	; (8014fb8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8014f80:	9005      	str	r0, [sp, #20]
 8014f82:	881b      	ldrh	r3, [r3, #0]
 8014f84:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014f88:	f7ff fce6 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 8014f8c:	6803      	ldr	r3, [r0, #0]
 8014f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f90:	4798      	blx	r3
 8014f92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f94:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8014f98:	a901      	add	r1, sp, #4
 8014f9a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8014f9e:	9304      	str	r3, [sp, #16]
 8014fa0:	6860      	ldr	r0, [r4, #4]
 8014fa2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014fa6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8014faa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014fae:	6803      	ldr	r3, [r0, #0]
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	4798      	blx	r3
 8014fb4:	b00b      	add	sp, #44	; 0x2c
 8014fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fb8:	2400fede 	.word	0x2400fede

08014fbc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fbe:	b08d      	sub	sp, #52	; 0x34
 8014fc0:	2501      	movs	r5, #1
 8014fc2:	4604      	mov	r4, r0
 8014fc4:	466b      	mov	r3, sp
 8014fc6:	9503      	str	r5, [sp, #12]
 8014fc8:	e883 0006 	stmia.w	r3, {r1, r2}
 8014fcc:	2300      	movs	r3, #0
 8014fce:	f8bd 6000 	ldrh.w	r6, [sp]
 8014fd2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014fd6:	9306      	str	r3, [sp, #24]
 8014fd8:	6803      	ldr	r3, [r0, #0]
 8014fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fdc:	4798      	blx	r3
 8014fde:	463a      	mov	r2, r7
 8014fe0:	4631      	mov	r1, r6
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	f7ff ff8b 	bl	8014f00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014fea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014fec:	9004      	str	r0, [sp, #16]
 8014fee:	9307      	str	r3, [sp, #28]
 8014ff0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014ff4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014ff8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014ffc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015000:	4b0e      	ldr	r3, [pc, #56]	; (801503c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8015002:	881b      	ldrh	r3, [r3, #0]
 8015004:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015008:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801500c:	f7ff fca4 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 8015010:	6803      	ldr	r3, [r0, #0]
 8015012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015014:	4798      	blx	r3
 8015016:	23ff      	movs	r3, #255	; 0xff
 8015018:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801501c:	a903      	add	r1, sp, #12
 801501e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8015022:	6860      	ldr	r0, [r4, #4]
 8015024:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8015028:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801502c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8015030:	6803      	ldr	r3, [r0, #0]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	4798      	blx	r3
 8015036:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015038:	b00d      	add	sp, #52	; 0x34
 801503a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801503c:	2400fede 	.word	0x2400fede

08015040 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015044:	b08c      	sub	sp, #48	; 0x30
 8015046:	461e      	mov	r6, r3
 8015048:	2300      	movs	r3, #0
 801504a:	4604      	mov	r4, r0
 801504c:	466d      	mov	r5, sp
 801504e:	9306      	str	r3, [sp, #24]
 8015050:	6803      	ldr	r3, [r0, #0]
 8015052:	e885 0006 	stmia.w	r5, {r1, r2}
 8015056:	2501      	movs	r5, #1
 8015058:	f8bd 7000 	ldrh.w	r7, [sp]
 801505c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8015060:	9503      	str	r5, [sp, #12]
 8015062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015064:	4798      	blx	r3
 8015066:	4642      	mov	r2, r8
 8015068:	4639      	mov	r1, r7
 801506a:	4603      	mov	r3, r0
 801506c:	4620      	mov	r0, r4
 801506e:	f7ff ff47 	bl	8014f00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015072:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015076:	9004      	str	r0, [sp, #16]
 8015078:	f8ad 3020 	strh.w	r3, [sp, #32]
 801507c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015080:	9607      	str	r6, [sp, #28]
 8015082:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015086:	4b10      	ldr	r3, [pc, #64]	; (80150c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8015088:	881b      	ldrh	r3, [r3, #0]
 801508a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801508e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015090:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015094:	f7ff fc60 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 8015098:	6803      	ldr	r3, [r0, #0]
 801509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801509c:	4798      	blx	r3
 801509e:	23ff      	movs	r3, #255	; 0xff
 80150a0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80150a4:	a903      	add	r1, sp, #12
 80150a6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80150aa:	6860      	ldr	r0, [r4, #4]
 80150ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80150b0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80150b4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80150b8:	6803      	ldr	r3, [r0, #0]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	4798      	blx	r3
 80150be:	4630      	mov	r0, r6
 80150c0:	b00c      	add	sp, #48	; 0x30
 80150c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150c6:	bf00      	nop
 80150c8:	2400fede 	.word	0x2400fede

080150cc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80150cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ce:	b085      	sub	sp, #20
 80150d0:	4605      	mov	r5, r0
 80150d2:	ac02      	add	r4, sp, #8
 80150d4:	e884 0006 	stmia.w	r4, {r1, r2}
 80150d8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80150dc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80150e0:	f7ff fde6 	bl	8014cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80150e4:	4631      	mov	r1, r6
 80150e6:	4603      	mov	r3, r0
 80150e8:	463a      	mov	r2, r7
 80150ea:	4628      	mov	r0, r5
 80150ec:	f7ff ff08 	bl	8014f00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80150f0:	4a05      	ldr	r2, [pc, #20]	; (8015108 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80150f2:	682b      	ldr	r3, [r5, #0]
 80150f4:	8812      	ldrh	r2, [r2, #0]
 80150f6:	9200      	str	r2, [sp, #0]
 80150f8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80150fa:	4603      	mov	r3, r0
 80150fc:	4628      	mov	r0, r5
 80150fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015102:	47b0      	blx	r6
 8015104:	b005      	add	sp, #20
 8015106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015108:	2400fede 	.word	0x2400fede

0801510c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801510c:	b570      	push	{r4, r5, r6, lr}
 801510e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8015112:	4604      	mov	r4, r0
 8015114:	b19b      	cbz	r3, 801513e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8015116:	2002      	movs	r0, #2
 8015118:	f7eb fa52 	bl	80005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801511c:	2300      	movs	r3, #0
 801511e:	4620      	mov	r0, r4
 8015120:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015124:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8015128:	6823      	ldr	r3, [r4, #0]
 801512a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801512e:	f7ff fdbf 	bl	8014cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015132:	4601      	mov	r1, r0
 8015134:	4620      	mov	r0, r4
 8015136:	462b      	mov	r3, r5
 8015138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801513c:	4718      	bx	r3
 801513e:	bd70      	pop	{r4, r5, r6, pc}

08015140 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8015140:	b538      	push	{r3, r4, r5, lr}
 8015142:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8015146:	4604      	mov	r4, r0
 8015148:	460d      	mov	r5, r1
 801514a:	428b      	cmp	r3, r1
 801514c:	d006      	beq.n	801515c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801514e:	6803      	ldr	r3, [r0, #0]
 8015150:	b929      	cbnz	r1, 801515e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8015152:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8015156:	4798      	blx	r3
 8015158:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801515c:	bd38      	pop	{r3, r4, r5, pc}
 801515e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8015162:	e7f8      	b.n	8015156 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08015164 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015164:	4b0d      	ldr	r3, [pc, #52]	; (801519c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8015166:	b510      	push	{r4, lr}
 8015168:	781b      	ldrb	r3, [r3, #0]
 801516a:	4604      	mov	r4, r0
 801516c:	b95b      	cbnz	r3, 8015186 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801516e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015172:	2b02      	cmp	r3, #2
 8015174:	d007      	beq.n	8015186 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015176:	6840      	ldr	r0, [r0, #4]
 8015178:	f000 f916 	bl	80153a8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801517c:	b118      	cbz	r0, 8015186 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801517e:	6862      	ldr	r2, [r4, #4]
 8015180:	7a53      	ldrb	r3, [r2, #9]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d0fc      	beq.n	8015180 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015186:	f7eb fba1 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801518a:	4620      	mov	r0, r4
 801518c:	2100      	movs	r1, #0
 801518e:	f7ff ffd7 	bl	8015140 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015192:	4620      	mov	r0, r4
 8015194:	f7ff fd8c 	bl	8014cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015198:	bd10      	pop	{r4, pc}
 801519a:	bf00      	nop
 801519c:	2400fee2 	.word	0x2400fee2

080151a0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80151a0:	4770      	bx	lr

080151a2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80151a2:	2000      	movs	r0, #0
 80151a4:	4770      	bx	lr

080151a6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80151a6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80151aa:	1a13      	subs	r3, r2, r0
 80151ac:	4258      	negs	r0, r3
 80151ae:	4158      	adcs	r0, r3
 80151b0:	4770      	bx	lr

080151b2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80151b2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80151b6:	1a9b      	subs	r3, r3, r2
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	bfdc      	itt	le
 80151bc:	6882      	ldrle	r2, [r0, #8]
 80151be:	189b      	addle	r3, r3, r2
 80151c0:	2b01      	cmp	r3, #1
 80151c2:	bfcc      	ite	gt
 80151c4:	2000      	movgt	r0, #0
 80151c6:	2001      	movle	r0, #1
 80151c8:	4770      	bx	lr

080151ca <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80151ca:	6902      	ldr	r2, [r0, #16]
 80151cc:	6843      	ldr	r3, [r0, #4]
 80151ce:	2024      	movs	r0, #36	; 0x24
 80151d0:	fb00 3002 	mla	r0, r0, r2, r3
 80151d4:	4770      	bx	lr

080151d6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80151d6:	6803      	ldr	r3, [r0, #0]
 80151d8:	691b      	ldr	r3, [r3, #16]
 80151da:	4718      	bx	r3

080151dc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80151dc:	2301      	movs	r3, #1
 80151de:	b570      	push	{r4, r5, r6, lr}
 80151e0:	7203      	strb	r3, [r0, #8]
 80151e2:	4604      	mov	r4, r0
 80151e4:	6840      	ldr	r0, [r0, #4]
 80151e6:	6803      	ldr	r3, [r0, #0]
 80151e8:	699b      	ldr	r3, [r3, #24]
 80151ea:	4798      	blx	r3
 80151ec:	6803      	ldr	r3, [r0, #0]
 80151ee:	4605      	mov	r5, r0
 80151f0:	2b40      	cmp	r3, #64	; 0x40
 80151f2:	d00c      	beq.n	801520e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80151f4:	d810      	bhi.n	8015218 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80151f6:	2b04      	cmp	r3, #4
 80151f8:	d01d      	beq.n	8015236 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80151fa:	d804      	bhi.n	8015206 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80151fc:	2b01      	cmp	r3, #1
 80151fe:	d006      	beq.n	801520e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015200:	2b02      	cmp	r3, #2
 8015202:	d02c      	beq.n	801525e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8015204:	bd70      	pop	{r4, r5, r6, pc}
 8015206:	2b08      	cmp	r3, #8
 8015208:	d01d      	beq.n	8015246 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801520a:	2b20      	cmp	r3, #32
 801520c:	d1fa      	bne.n	8015204 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801520e:	6823      	ldr	r3, [r4, #0]
 8015210:	4620      	mov	r0, r4
 8015212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015214:	4798      	blx	r3
 8015216:	e013      	b.n	8015240 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801521c:	d0f7      	beq.n	801520e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801521e:	d804      	bhi.n	801522a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8015220:	2b80      	cmp	r3, #128	; 0x80
 8015222:	d0f4      	beq.n	801520e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015228:	e7f0      	b.n	801520c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801522a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801522e:	d0ee      	beq.n	801520e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015234:	e7e5      	b.n	8015202 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8015236:	6823      	ldr	r3, [r4, #0]
 8015238:	7f01      	ldrb	r1, [r0, #28]
 801523a:	4620      	mov	r0, r4
 801523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801523e:	4798      	blx	r3
 8015240:	6823      	ldr	r3, [r4, #0]
 8015242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015244:	e006      	b.n	8015254 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015246:	6823      	ldr	r3, [r4, #0]
 8015248:	7f01      	ldrb	r1, [r0, #28]
 801524a:	4620      	mov	r0, r4
 801524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801524e:	4798      	blx	r3
 8015250:	6823      	ldr	r3, [r4, #0]
 8015252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015254:	4629      	mov	r1, r5
 8015256:	4620      	mov	r0, r4
 8015258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801525c:	4718      	bx	r3
 801525e:	6823      	ldr	r3, [r4, #0]
 8015260:	4620      	mov	r0, r4
 8015262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015264:	4798      	blx	r3
 8015266:	e7f3      	b.n	8015250 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08015268 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015268:	4770      	bx	lr

0801526a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801526a:	4770      	bx	lr

0801526c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 801526c:	4770      	bx	lr

0801526e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801526e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015272:	b510      	push	{r4, lr}
 8015274:	1ad2      	subs	r2, r2, r3
 8015276:	2a00      	cmp	r2, #0
 8015278:	bfdc      	itt	le
 801527a:	6884      	ldrle	r4, [r0, #8]
 801527c:	1912      	addle	r2, r2, r4
 801527e:	2a01      	cmp	r2, #1
 8015280:	dd16      	ble.n	80152b0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015282:	6842      	ldr	r2, [r0, #4]
 8015284:	2424      	movs	r4, #36	; 0x24
 8015286:	fb04 2303 	mla	r3, r4, r3, r2
 801528a:	f101 0220 	add.w	r2, r1, #32
 801528e:	f851 4b04 	ldr.w	r4, [r1], #4
 8015292:	4291      	cmp	r1, r2
 8015294:	f843 4b04 	str.w	r4, [r3], #4
 8015298:	d1f9      	bne.n	801528e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801529a:	780a      	ldrb	r2, [r1, #0]
 801529c:	701a      	strb	r2, [r3, #0]
 801529e:	68c3      	ldr	r3, [r0, #12]
 80152a0:	6882      	ldr	r2, [r0, #8]
 80152a2:	f3bf 8f5b 	dmb	ish
 80152a6:	3301      	adds	r3, #1
 80152a8:	429a      	cmp	r2, r3
 80152aa:	bfd8      	it	le
 80152ac:	1a9b      	suble	r3, r3, r2
 80152ae:	60c3      	str	r3, [r0, #12]
 80152b0:	bd10      	pop	{r4, pc}

080152b2 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80152b2:	6903      	ldr	r3, [r0, #16]
 80152b4:	6882      	ldr	r2, [r0, #8]
 80152b6:	f3bf 8f5b 	dmb	ish
 80152ba:	3301      	adds	r3, #1
 80152bc:	429a      	cmp	r2, r3
 80152be:	bfd8      	it	le
 80152c0:	1a9b      	suble	r3, r3, r2
 80152c2:	6103      	str	r3, [r0, #16]
 80152c4:	4770      	bx	lr
	...

080152c8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80152c8:	b570      	push	{r4, r5, r6, lr}
 80152ca:	4604      	mov	r4, r0
 80152cc:	460e      	mov	r6, r1
 80152ce:	6860      	ldr	r0, [r4, #4]
 80152d0:	6803      	ldr	r3, [r0, #0]
 80152d2:	685b      	ldr	r3, [r3, #4]
 80152d4:	4798      	blx	r3
 80152d6:	2800      	cmp	r0, #0
 80152d8:	d1f9      	bne.n	80152ce <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80152da:	4d0d      	ldr	r5, [pc, #52]	; (8015310 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80152dc:	6828      	ldr	r0, [r5, #0]
 80152de:	6803      	ldr	r3, [r0, #0]
 80152e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80152e2:	4798      	blx	r3
 80152e4:	f7eb fb04 	bl	80008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80152e8:	6828      	ldr	r0, [r5, #0]
 80152ea:	2101      	movs	r1, #1
 80152ec:	f7ff ff28 	bl	8015140 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80152f0:	6860      	ldr	r0, [r4, #4]
 80152f2:	4631      	mov	r1, r6
 80152f4:	6803      	ldr	r3, [r0, #0]
 80152f6:	689b      	ldr	r3, [r3, #8]
 80152f8:	4798      	blx	r3
 80152fa:	6823      	ldr	r3, [r4, #0]
 80152fc:	4620      	mov	r0, r4
 80152fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015300:	4798      	blx	r3
 8015302:	6828      	ldr	r0, [r5, #0]
 8015304:	6803      	ldr	r3, [r0, #0]
 8015306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801530a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801530c:	4718      	bx	r3
 801530e:	bf00      	nop
 8015310:	2400fee4 	.word	0x2400fee4

08015314 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015314:	b508      	push	{r3, lr}
 8015316:	f7eb fad9 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801531a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801531e:	f7eb badf 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015322 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8015322:	b510      	push	{r4, lr}
 8015324:	4604      	mov	r4, r0
 8015326:	2114      	movs	r1, #20
 8015328:	f00d ff85 	bl	8023236 <_ZdlPvj>
 801532c:	4620      	mov	r0, r4
 801532e:	bd10      	pop	{r4, pc}

08015330 <_ZN8touchgfx13DMA_Interface5startEv>:
 8015330:	b510      	push	{r4, lr}
 8015332:	4604      	mov	r4, r0
 8015334:	6840      	ldr	r0, [r0, #4]
 8015336:	6803      	ldr	r3, [r0, #0]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	4798      	blx	r3
 801533c:	b948      	cbnz	r0, 8015352 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801533e:	7a63      	ldrb	r3, [r4, #9]
 8015340:	b13b      	cbz	r3, 8015352 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015342:	7a23      	ldrb	r3, [r4, #8]
 8015344:	b92b      	cbnz	r3, 8015352 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015346:	6823      	ldr	r3, [r4, #0]
 8015348:	4620      	mov	r0, r4
 801534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801534c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015350:	4718      	bx	r3
 8015352:	bd10      	pop	{r4, pc}

08015354 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015354:	b570      	push	{r4, r5, r6, lr}
 8015356:	4604      	mov	r4, r0
 8015358:	6840      	ldr	r0, [r0, #4]
 801535a:	6803      	ldr	r3, [r0, #0]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	4798      	blx	r3
 8015360:	4605      	mov	r5, r0
 8015362:	b930      	cbnz	r0, 8015372 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015364:	7a23      	ldrb	r3, [r4, #8]
 8015366:	b123      	cbz	r3, 8015372 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015368:	6860      	ldr	r0, [r4, #4]
 801536a:	6803      	ldr	r3, [r0, #0]
 801536c:	695b      	ldr	r3, [r3, #20]
 801536e:	4798      	blx	r3
 8015370:	7225      	strb	r5, [r4, #8]
 8015372:	6860      	ldr	r0, [r4, #4]
 8015374:	6803      	ldr	r3, [r0, #0]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	4798      	blx	r3
 801537a:	b928      	cbnz	r0, 8015388 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801537c:	6823      	ldr	r3, [r4, #0]
 801537e:	4620      	mov	r0, r4
 8015380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015386:	4718      	bx	r3
 8015388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801538c:	f7eb baba 	b.w	8000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08015390 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015390:	b510      	push	{r4, lr}
 8015392:	6082      	str	r2, [r0, #8]
 8015394:	2200      	movs	r2, #0
 8015396:	4c03      	ldr	r4, [pc, #12]	; (80153a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015398:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801539c:	e9c0 4100 	strd	r4, r1, [r0]
 80153a0:	bd10      	pop	{r4, pc}
 80153a2:	bf00      	nop
 80153a4:	08026c30 	.word	0x08026c30

080153a8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80153a8:	6840      	ldr	r0, [r0, #4]
 80153aa:	6803      	ldr	r3, [r0, #0]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	4718      	bx	r3

080153b0 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80153b0:	2000      	movs	r0, #0
 80153b2:	4770      	bx	lr

080153b4 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80153b4:	4b07      	ldr	r3, [pc, #28]	; (80153d4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80153b6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80153b8:	881b      	ldrh	r3, [r3, #0]
 80153ba:	4293      	cmp	r3, r2
 80153bc:	bf81      	itttt	hi
 80153be:	4b06      	ldrhi	r3, [pc, #24]	; (80153d8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80153c0:	681b      	ldrhi	r3, [r3, #0]
 80153c2:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80153c6:	7858      	ldrbhi	r0, [r3, #1]
 80153c8:	bf8c      	ite	hi
 80153ca:	f000 0003 	andhi.w	r0, r0, #3
 80153ce:	2000      	movls	r0, #0
 80153d0:	4770      	bx	lr
 80153d2:	bf00      	nop
 80153d4:	2400ff38 	.word	0x2400ff38
 80153d8:	2400ff34 	.word	0x2400ff34

080153dc <_ZN8touchgfx8TextAreaD1Ev>:
 80153dc:	4770      	bx	lr
	...

080153e0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80153e0:	4b11      	ldr	r3, [pc, #68]	; (8015428 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80153e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153e6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80153e8:	4604      	mov	r4, r0
 80153ea:	881b      	ldrh	r3, [r3, #0]
 80153ec:	428b      	cmp	r3, r1
 80153ee:	d918      	bls.n	8015422 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 80153f0:	6803      	ldr	r3, [r0, #0]
 80153f2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 80153f4:	4b0d      	ldr	r3, [pc, #52]	; (801542c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 80153f6:	6818      	ldr	r0, [r3, #0]
 80153f8:	f7ef f85e 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 80153fc:	6823      	ldr	r3, [r4, #0]
 80153fe:	4606      	mov	r6, r0
 8015400:	4620      	mov	r0, r4
 8015402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015404:	4798      	blx	r3
 8015406:	6823      	ldr	r3, [r4, #0]
 8015408:	4607      	mov	r7, r0
 801540a:	4620      	mov	r0, r4
 801540c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015410:	4798      	blx	r3
 8015412:	463a      	mov	r2, r7
 8015414:	4603      	mov	r3, r0
 8015416:	4631      	mov	r1, r6
 8015418:	4620      	mov	r0, r4
 801541a:	46ac      	mov	ip, r5
 801541c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015420:	4760      	bx	ip
 8015422:	2000      	movs	r0, #0
 8015424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015428:	2400ff38 	.word	0x2400ff38
 801542c:	2400ff40 	.word	0x2400ff40

08015430 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015430:	4b18      	ldr	r3, [pc, #96]	; (8015494 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8015432:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015436:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015438:	4604      	mov	r4, r0
 801543a:	881b      	ldrh	r3, [r3, #0]
 801543c:	428b      	cmp	r3, r1
 801543e:	d926      	bls.n	801548e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8015440:	4b15      	ldr	r3, [pc, #84]	; (8015498 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8015448:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801544c:	4b13      	ldr	r3, [pc, #76]	; (801549c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801544e:	7855      	ldrb	r5, [r2, #1]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8015456:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801545a:	6833      	ldr	r3, [r6, #0]
 801545c:	69df      	ldr	r7, [r3, #28]
 801545e:	4b10      	ldr	r3, [pc, #64]	; (80154a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8015460:	6818      	ldr	r0, [r3, #0]
 8015462:	f7ef f829 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 8015466:	6823      	ldr	r3, [r4, #0]
 8015468:	4680      	mov	r8, r0
 801546a:	4620      	mov	r0, r4
 801546c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801546e:	4798      	blx	r3
 8015470:	6823      	ldr	r3, [r4, #0]
 8015472:	4681      	mov	r9, r0
 8015474:	4620      	mov	r0, r4
 8015476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801547a:	4798      	blx	r3
 801547c:	464b      	mov	r3, r9
 801547e:	9000      	str	r0, [sp, #0]
 8015480:	4642      	mov	r2, r8
 8015482:	4629      	mov	r1, r5
 8015484:	4630      	mov	r0, r6
 8015486:	47b8      	blx	r7
 8015488:	b003      	add	sp, #12
 801548a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801548e:	2000      	movs	r0, #0
 8015490:	e7fa      	b.n	8015488 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8015492:	bf00      	nop
 8015494:	2400ff38 	.word	0x2400ff38
 8015498:	2400ff34 	.word	0x2400ff34
 801549c:	2400ff3c 	.word	0x2400ff3c
 80154a0:	2400ff40 	.word	0x2400ff40

080154a4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80154a4:	b40e      	push	{r1, r2, r3}
 80154a6:	4b30      	ldr	r3, [pc, #192]	; (8015568 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80154a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154ac:	881a      	ldrh	r2, [r3, #0]
 80154ae:	b09d      	sub	sp, #116	; 0x74
 80154b0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80154b2:	4604      	mov	r4, r0
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d954      	bls.n	8015562 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80154b8:	aa26      	add	r2, sp, #152	; 0x98
 80154ba:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801556c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80154be:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8015570 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80154c2:	9202      	str	r2, [sp, #8]
 80154c4:	f8d9 2000 	ldr.w	r2, [r9]
 80154c8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80154cc:	f8d8 3000 	ldr.w	r3, [r8]
 80154d0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80154d4:	682b      	ldr	r3, [r5, #0]
 80154d6:	4628      	mov	r0, r5
 80154d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154da:	4798      	blx	r3
 80154dc:	4606      	mov	r6, r0
 80154de:	b207      	sxth	r7, r0
 80154e0:	a803      	add	r0, sp, #12
 80154e2:	f004 f96e 	bl	80197c2 <_ZN8touchgfx12TextProviderC1Ev>
 80154e6:	682b      	ldr	r3, [r5, #0]
 80154e8:	4628      	mov	r0, r5
 80154ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154ec:	4798      	blx	r3
 80154ee:	682b      	ldr	r3, [r5, #0]
 80154f0:	4682      	mov	sl, r0
 80154f2:	4628      	mov	r0, r5
 80154f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80154f6:	4798      	blx	r3
 80154f8:	4653      	mov	r3, sl
 80154fa:	9000      	str	r0, [sp, #0]
 80154fc:	a803      	add	r0, sp, #12
 80154fe:	9a02      	ldr	r2, [sp, #8]
 8015500:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015502:	f004 f9b9 	bl	8019878 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015506:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015508:	f8d9 3000 	ldr.w	r3, [r9]
 801550c:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8015510:	8925      	ldrh	r5, [r4, #8]
 8015512:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8015516:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801551a:	eba5 050c 	sub.w	r5, r5, ip
 801551e:	784a      	ldrb	r2, [r1, #1]
 8015520:	f8d8 3000 	ldr.w	r3, [r8]
 8015524:	b22d      	sxth	r5, r5
 8015526:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801552a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801552e:	9500      	str	r5, [sp, #0]
 8015530:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015534:	a803      	add	r0, sp, #12
 8015536:	f002 f876 	bl	8017626 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801553a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801553e:	b203      	sxth	r3, r0
 8015540:	18b9      	adds	r1, r7, r2
 8015542:	2900      	cmp	r1, #0
 8015544:	dd0b      	ble.n	801555e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8015546:	3b01      	subs	r3, #1
 8015548:	fb13 f302 	smulbb	r3, r3, r2
 801554c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015550:	b21f      	sxth	r7, r3
 8015552:	4638      	mov	r0, r7
 8015554:	b01d      	add	sp, #116	; 0x74
 8015556:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801555a:	b003      	add	sp, #12
 801555c:	4770      	bx	lr
 801555e:	2b00      	cmp	r3, #0
 8015560:	dcf7      	bgt.n	8015552 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8015562:	2700      	movs	r7, #0
 8015564:	e7f5      	b.n	8015552 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8015566:	bf00      	nop
 8015568:	2400ff38 	.word	0x2400ff38
 801556c:	2400ff34 	.word	0x2400ff34
 8015570:	2400ff3c 	.word	0x2400ff3c

08015574 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8015574:	4bbc      	ldr	r3, [pc, #752]	; (8015868 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8015576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801557a:	460c      	mov	r4, r1
 801557c:	881b      	ldrh	r3, [r3, #0]
 801557e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8015580:	b0a9      	sub	sp, #164	; 0xa4
 8015582:	4681      	mov	r9, r0
 8015584:	428b      	cmp	r3, r1
 8015586:	d809      	bhi.n	801559c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8015588:	2300      	movs	r3, #0
 801558a:	f04f 32ff 	mov.w	r2, #4294967295
 801558e:	6083      	str	r3, [r0, #8]
 8015590:	e9c0 3200 	strd	r3, r2, [r0]
 8015594:	4648      	mov	r0, r9
 8015596:	b029      	add	sp, #164	; 0xa4
 8015598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801559c:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8015870 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80155a0:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 80155a4:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8015874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 80155a8:	f8db 3000 	ldr.w	r3, [fp]
 80155ac:	f8d8 0000 	ldr.w	r0, [r8]
 80155b0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80155b4:	4bad      	ldr	r3, [pc, #692]	; (801586c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80155bc:	f7ee ff7c 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 80155c0:	4607      	mov	r7, r0
 80155c2:	682b      	ldr	r3, [r5, #0]
 80155c4:	4628      	mov	r0, r5
 80155c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155c8:	4798      	blx	r3
 80155ca:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 80155cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80155d0:	4430      	add	r0, r6
 80155d2:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 80155d6:	b283      	uxth	r3, r0
 80155d8:	4650      	mov	r0, sl
 80155da:	9302      	str	r3, [sp, #8]
 80155dc:	2e00      	cmp	r6, #0
 80155de:	f040 8090 	bne.w	8015702 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80155e2:	f004 f8ee 	bl	80197c2 <_ZN8touchgfx12TextProviderC1Ev>
 80155e6:	682b      	ldr	r3, [r5, #0]
 80155e8:	4628      	mov	r0, r5
 80155ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155ec:	4798      	blx	r3
 80155ee:	682b      	ldr	r3, [r5, #0]
 80155f0:	9005      	str	r0, [sp, #20]
 80155f2:	4628      	mov	r0, r5
 80155f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80155f6:	4798      	blx	r3
 80155f8:	6823      	ldr	r3, [r4, #0]
 80155fa:	4680      	mov	r8, r0
 80155fc:	4620      	mov	r0, r4
 80155fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015600:	4798      	blx	r3
 8015602:	6822      	ldr	r2, [r4, #0]
 8015604:	9004      	str	r0, [sp, #16]
 8015606:	4620      	mov	r0, r4
 8015608:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801560c:	4790      	blx	r2
 801560e:	9905      	ldr	r1, [sp, #20]
 8015610:	9b04      	ldr	r3, [sp, #16]
 8015612:	460a      	mov	r2, r1
 8015614:	4639      	mov	r1, r7
 8015616:	4637      	mov	r7, r6
 8015618:	9001      	str	r0, [sp, #4]
 801561a:	9300      	str	r3, [sp, #0]
 801561c:	4650      	mov	r0, sl
 801561e:	4643      	mov	r3, r8
 8015620:	f004 f93f 	bl	80198a2 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015624:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015626:	4629      	mov	r1, r5
 8015628:	f8db 3000 	ldr.w	r3, [fp]
 801562c:	4650      	mov	r0, sl
 801562e:	3601      	adds	r6, #1
 8015630:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015634:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015638:	b2b6      	uxth	r6, r6
 801563a:	785b      	ldrb	r3, [r3, #1]
 801563c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015640:	f001 fd42 	bl	80170c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015644:	4287      	cmp	r7, r0
 8015646:	bfb8      	it	lt
 8015648:	b207      	sxthlt	r7, r0
 801564a:	4650      	mov	r0, sl
 801564c:	f004 f8e0 	bl	8019810 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8015650:	2800      	cmp	r0, #0
 8015652:	d0e7      	beq.n	8015624 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 8015654:	9b02      	ldr	r3, [sp, #8]
 8015656:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 801565a:	fb13 f606 	smulbb	r6, r3, r6
 801565e:	eba6 0608 	sub.w	r6, r6, r8
 8015662:	b2b6      	uxth	r6, r6
 8015664:	fa0f f886 	sxth.w	r8, r6
 8015668:	f1b8 0f00 	cmp.w	r8, #0
 801566c:	dd06      	ble.n	801567c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 801566e:	682b      	ldr	r3, [r5, #0]
 8015670:	4628      	mov	r0, r5
 8015672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015674:	4798      	blx	r3
 8015676:	4430      	add	r0, r6
 8015678:	fa0f f880 	sxth.w	r8, r0
 801567c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015680:	4620      	mov	r0, r4
 8015682:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015686:	6823      	ldr	r3, [r4, #0]
 8015688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801568a:	bf0c      	ite	eq
 801568c:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8015690:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 8015694:	4798      	blx	r3
 8015696:	2801      	cmp	r0, #1
 8015698:	b2ba      	uxth	r2, r7
 801569a:	f000 80d2 	beq.w	8015842 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 801569e:	2802      	cmp	r0, #2
 80156a0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80156a4:	f000 80d3 	beq.w	801584e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 80156a8:	b21e      	sxth	r6, r3
 80156aa:	7a29      	ldrb	r1, [r5, #8]
 80156ac:	7a6d      	ldrb	r5, [r5, #9]
 80156ae:	1a76      	subs	r6, r6, r1
 80156b0:	4429      	add	r1, r5
 80156b2:	b2b3      	uxth	r3, r6
 80156b4:	440a      	add	r2, r1
 80156b6:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80156ba:	b21f      	sxth	r7, r3
 80156bc:	b292      	uxth	r2, r2
 80156be:	2902      	cmp	r1, #2
 80156c0:	b216      	sxth	r6, r2
 80156c2:	f000 80c7 	beq.w	8015854 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 80156c6:	2903      	cmp	r1, #3
 80156c8:	f000 80d6 	beq.w	8015878 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 80156cc:	2901      	cmp	r1, #1
 80156ce:	f040 80dc 	bne.w	801588a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 80156d2:	8923      	ldrh	r3, [r4, #8]
 80156d4:	4632      	mov	r2, r6
 80156d6:	463d      	mov	r5, r7
 80156d8:	4646      	mov	r6, r8
 80156da:	eba3 0308 	sub.w	r3, r3, r8
 80156de:	4690      	mov	r8, r2
 80156e0:	b21f      	sxth	r7, r3
 80156e2:	9b03      	ldr	r3, [sp, #12]
 80156e4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80156e6:	6818      	ldr	r0, [r3, #0]
 80156e8:	f7ee fee6 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 80156ec:	f8a9 7000 	strh.w	r7, [r9]
 80156f0:	f8a9 5002 	strh.w	r5, [r9, #2]
 80156f4:	f8a9 6004 	strh.w	r6, [r9, #4]
 80156f8:	f8a9 8006 	strh.w	r8, [r9, #6]
 80156fc:	f8c9 0008 	str.w	r0, [r9, #8]
 8015700:	e748      	b.n	8015594 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8015702:	f004 f85e 	bl	80197c2 <_ZN8touchgfx12TextProviderC1Ev>
 8015706:	682b      	ldr	r3, [r5, #0]
 8015708:	4628      	mov	r0, r5
 801570a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801570c:	4798      	blx	r3
 801570e:	682b      	ldr	r3, [r5, #0]
 8015710:	4606      	mov	r6, r0
 8015712:	4628      	mov	r0, r5
 8015714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015716:	4798      	blx	r3
 8015718:	6823      	ldr	r3, [r4, #0]
 801571a:	4680      	mov	r8, r0
 801571c:	4620      	mov	r0, r4
 801571e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015720:	4798      	blx	r3
 8015722:	6822      	ldr	r2, [r4, #0]
 8015724:	9004      	str	r0, [sp, #16]
 8015726:	4620      	mov	r0, r4
 8015728:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801572c:	4790      	blx	r2
 801572e:	9b04      	ldr	r3, [sp, #16]
 8015730:	4632      	mov	r2, r6
 8015732:	9001      	str	r0, [sp, #4]
 8015734:	9300      	str	r3, [sp, #0]
 8015736:	4639      	mov	r1, r7
 8015738:	4643      	mov	r3, r8
 801573a:	4650      	mov	r0, sl
 801573c:	f004 f8b1 	bl	80198a2 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015740:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015744:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8015748:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801574c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015750:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015752:	bf0a      	itet	eq
 8015754:	4642      	moveq	r2, r8
 8015756:	461a      	movne	r2, r3
 8015758:	4698      	moveq	r8, r3
 801575a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801575e:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8015762:	1ad2      	subs	r2, r2, r3
 8015764:	f8db 3000 	ldr.w	r3, [fp]
 8015768:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801576c:	7859      	ldrb	r1, [r3, #1]
 801576e:	2300      	movs	r3, #0
 8015770:	f8cd a020 	str.w	sl, [sp, #32]
 8015774:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8015778:	f8ad 301c 	strh.w	r3, [sp, #28]
 801577c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015780:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8015784:	950a      	str	r5, [sp, #40]	; 0x28
 8015786:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801578a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801578e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8015792:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015796:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801579a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801579e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80157a2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80157a6:	b350      	cbz	r0, 80157fe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80157a8:	682b      	ldr	r3, [r5, #0]
 80157aa:	4628      	mov	r0, r5
 80157ac:	695b      	ldr	r3, [r3, #20]
 80157ae:	4798      	blx	r3
 80157b0:	4607      	mov	r7, r0
 80157b2:	b320      	cbz	r0, 80157fe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80157b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157b6:	4639      	mov	r1, r7
 80157b8:	6803      	ldr	r3, [r0, #0]
 80157ba:	68db      	ldr	r3, [r3, #12]
 80157bc:	4798      	blx	r3
 80157be:	4606      	mov	r6, r0
 80157c0:	b1e8      	cbz	r0, 80157fe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80157c2:	7b43      	ldrb	r3, [r0, #13]
 80157c4:	7a82      	ldrb	r2, [r0, #10]
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80157cc:	4313      	orrs	r3, r2
 80157ce:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80157d2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80157d6:	2b04      	cmp	r3, #4
 80157d8:	d111      	bne.n	80157fe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80157da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157dc:	4632      	mov	r2, r6
 80157de:	4639      	mov	r1, r7
 80157e0:	6803      	ldr	r3, [r0, #0]
 80157e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157e4:	4798      	blx	r3
 80157e6:	7b73      	ldrb	r3, [r6, #13]
 80157e8:	005b      	lsls	r3, r3, #1
 80157ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80157ee:	7ab3      	ldrb	r3, [r6, #10]
 80157f0:	4313      	orrs	r3, r2
 80157f2:	4418      	add	r0, r3
 80157f4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80157f8:	4418      	add	r0, r3
 80157fa:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80157fe:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8015802:	2600      	movs	r6, #0
 8015804:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8015808:	4637      	mov	r7, r6
 801580a:	45c3      	cmp	fp, r8
 801580c:	a807      	add	r0, sp, #28
 801580e:	f106 0601 	add.w	r6, r6, #1
 8015812:	bfd4      	ite	le
 8015814:	2100      	movle	r1, #0
 8015816:	2101      	movgt	r1, #1
 8015818:	f001 fe36 	bl	8017488 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801581c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8015820:	b2b6      	uxth	r6, r6
 8015822:	429f      	cmp	r7, r3
 8015824:	bfb8      	it	lt
 8015826:	b21f      	sxthlt	r7, r3
 8015828:	9b02      	ldr	r3, [sp, #8]
 801582a:	eba8 0803 	sub.w	r8, r8, r3
 801582e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015832:	fa0f f888 	sxth.w	r8, r8
 8015836:	2b00      	cmp	r3, #0
 8015838:	f43f af0c 	beq.w	8015654 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801583c:	45c2      	cmp	sl, r8
 801583e:	dbe4      	blt.n	801580a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 8015840:	e708      	b.n	8015654 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8015842:	1bf6      	subs	r6, r6, r7
 8015844:	2702      	movs	r7, #2
 8015846:	fb96 f6f7 	sdiv	r6, r6, r7
 801584a:	b236      	sxth	r6, r6
 801584c:	e72d      	b.n	80156aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 801584e:	4413      	add	r3, r2
 8015850:	1af6      	subs	r6, r6, r3
 8015852:	e7fa      	b.n	801584a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 8015854:	8925      	ldrh	r5, [r4, #8]
 8015856:	1aad      	subs	r5, r5, r2
 8015858:	1aed      	subs	r5, r5, r3
 801585a:	b22f      	sxth	r7, r5
 801585c:	8965      	ldrh	r5, [r4, #10]
 801585e:	eba5 0508 	sub.w	r5, r5, r8
 8015862:	b22d      	sxth	r5, r5
 8015864:	e73d      	b.n	80156e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8015866:	bf00      	nop
 8015868:	2400ff38 	.word	0x2400ff38
 801586c:	2400ff3c 	.word	0x2400ff3c
 8015870:	2400ff34 	.word	0x2400ff34
 8015874:	2400ff40 	.word	0x2400ff40
 8015878:	8965      	ldrh	r5, [r4, #10]
 801587a:	2700      	movs	r7, #0
 801587c:	1aad      	subs	r5, r5, r2
 801587e:	1aed      	subs	r5, r5, r3
 8015880:	4633      	mov	r3, r6
 8015882:	4646      	mov	r6, r8
 8015884:	b22d      	sxth	r5, r5
 8015886:	4698      	mov	r8, r3
 8015888:	e72b      	b.n	80156e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801588a:	2500      	movs	r5, #0
 801588c:	e729      	b.n	80156e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801588e:	bf00      	nop

08015890 <_ZN8touchgfx8TextAreaD0Ev>:
 8015890:	b510      	push	{r4, lr}
 8015892:	4604      	mov	r4, r0
 8015894:	2148      	movs	r1, #72	; 0x48
 8015896:	f00d fcce 	bl	8023236 <_ZdlPvj>
 801589a:	4620      	mov	r0, r4
 801589c:	bd10      	pop	{r4, pc}
	...

080158a0 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80158a0:	b513      	push	{r0, r1, r4, lr}
 80158a2:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80158a6:	4604      	mov	r4, r0
 80158a8:	b1fb      	cbz	r3, 80158ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80158aa:	4b16      	ldr	r3, [pc, #88]	; (8015904 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80158ac:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80158ae:	881b      	ldrh	r3, [r3, #0]
 80158b0:	428b      	cmp	r3, r1
 80158b2:	d91a      	bls.n	80158ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80158b4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	dd16      	ble.n	80158ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80158bc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	dd12      	ble.n	80158ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80158c4:	4b10      	ldr	r3, [pc, #64]	; (8015908 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80158c6:	6818      	ldr	r0, [r3, #0]
 80158c8:	f7ee fdf6 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 80158cc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80158d0:	6822      	ldr	r2, [r4, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	db06      	blt.n	80158e4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80158d6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80158da:	2b00      	cmp	r3, #0
 80158dc:	db02      	blt.n	80158e4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80158de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80158e0:	4298      	cmp	r0, r3
 80158e2:	d004      	beq.n	80158ee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80158e4:	6953      	ldr	r3, [r2, #20]
 80158e6:	4620      	mov	r0, r4
 80158e8:	4798      	blx	r3
 80158ea:	b002      	add	sp, #8
 80158ec:	bd10      	pop	{r4, pc}
 80158ee:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80158f2:	466b      	mov	r3, sp
 80158f4:	6912      	ldr	r2, [r2, #16]
 80158f6:	c903      	ldmia	r1, {r0, r1}
 80158f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80158fc:	4619      	mov	r1, r3
 80158fe:	4620      	mov	r0, r4
 8015900:	4790      	blx	r2
 8015902:	e7f2      	b.n	80158ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015904:	2400ff38 	.word	0x2400ff38
 8015908:	2400ff40 	.word	0x2400ff40

0801590c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801590c:	4b45      	ldr	r3, [pc, #276]	; (8015a24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801590e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015912:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015914:	b08e      	sub	sp, #56	; 0x38
 8015916:	881b      	ldrh	r3, [r3, #0]
 8015918:	4604      	mov	r4, r0
 801591a:	4293      	cmp	r3, r2
 801591c:	d97e      	bls.n	8015a1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801591e:	6808      	ldr	r0, [r1, #0]
 8015920:	ab05      	add	r3, sp, #20
 8015922:	6849      	ldr	r1, [r1, #4]
 8015924:	4d40      	ldr	r5, [pc, #256]	; (8015a28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8015926:	c303      	stmia	r3!, {r0, r1}
 8015928:	4611      	mov	r1, r2
 801592a:	6828      	ldr	r0, [r5, #0]
 801592c:	f7ee fdc4 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 8015930:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8015934:	2b00      	cmp	r3, #0
 8015936:	db11      	blt.n	801595c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015938:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801593c:	2b00      	cmp	r3, #0
 801593e:	db0d      	blt.n	801595c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015940:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015942:	4298      	cmp	r0, r3
 8015944:	d10a      	bne.n	801595c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015946:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801594a:	ab09      	add	r3, sp, #36	; 0x24
 801594c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015950:	e883 0003 	stmia.w	r3, {r0, r1}
 8015954:	4619      	mov	r1, r3
 8015956:	a805      	add	r0, sp, #20
 8015958:	f7fd fcd6 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 801595c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015960:	2b00      	cmp	r3, #0
 8015962:	dd5b      	ble.n	8015a1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015964:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8015968:	2b00      	cmp	r3, #0
 801596a:	dd57      	ble.n	8015a1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801596c:	4f2f      	ldr	r7, [pc, #188]	; (8015a2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801596e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8015976:	4b2e      	ldr	r3, [pc, #184]	; (8015a30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801597e:	2e00      	cmp	r6, #0
 8015980:	d04c      	beq.n	8015a1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015982:	6823      	ldr	r3, [r4, #0]
 8015984:	4620      	mov	r0, r4
 8015986:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801598a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801598c:	4798      	blx	r3
 801598e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015990:	683b      	ldr	r3, [r7, #0]
 8015992:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8015996:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801599a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801599e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80159a2:	785b      	ldrb	r3, [r3, #1]
 80159a4:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 80159a8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80159ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80159ae:	9609      	str	r6, [sp, #36]	; 0x24
 80159b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80159b4:	4b1f      	ldr	r3, [pc, #124]	; (8015a34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80159b6:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 80159c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80159c2:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 80159c6:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80159ca:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 80159ce:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80159d2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80159d6:	b10a      	cbz	r2, 80159dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80159d8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80159da:	b906      	cbnz	r6, 80159de <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80159dc:	689e      	ldr	r6, [r3, #8]
 80159de:	af07      	add	r7, sp, #28
 80159e0:	4621      	mov	r1, r4
 80159e2:	4638      	mov	r0, r7
 80159e4:	f003 fb16 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80159e8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80159ea:	6828      	ldr	r0, [r5, #0]
 80159ec:	f7ee fd64 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 80159f0:	6823      	ldr	r3, [r4, #0]
 80159f2:	4605      	mov	r5, r0
 80159f4:	4620      	mov	r0, r4
 80159f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80159f8:	4798      	blx	r3
 80159fa:	6823      	ldr	r3, [r4, #0]
 80159fc:	4680      	mov	r8, r0
 80159fe:	4620      	mov	r0, r4
 8015a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015a04:	4798      	blx	r3
 8015a06:	ab09      	add	r3, sp, #36	; 0x24
 8015a08:	9501      	str	r5, [sp, #4]
 8015a0a:	9300      	str	r3, [sp, #0]
 8015a0c:	ab05      	add	r3, sp, #20
 8015a0e:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8015a12:	4630      	mov	r0, r6
 8015a14:	e897 0006 	ldmia.w	r7, {r1, r2}
 8015a18:	f7ee fcfa 	bl	8004410 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015a1c:	b00e      	add	sp, #56	; 0x38
 8015a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a22:	bf00      	nop
 8015a24:	2400ff38 	.word	0x2400ff38
 8015a28:	2400ff40 	.word	0x2400ff40
 8015a2c:	2400ff34 	.word	0x2400ff34
 8015a30:	2400ff3c 	.word	0x2400ff3c
 8015a34:	2400fee4 	.word	0x2400fee4

08015a38 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015a38:	b538      	push	{r3, r4, r5, lr}
 8015a3a:	4b0e      	ldr	r3, [pc, #56]	; (8015a74 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8015a3c:	4604      	mov	r4, r0
 8015a3e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015a40:	881b      	ldrh	r3, [r3, #0]
 8015a42:	429a      	cmp	r2, r3
 8015a44:	d214      	bcs.n	8015a70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8015a46:	6803      	ldr	r3, [r0, #0]
 8015a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a4a:	4798      	blx	r3
 8015a4c:	6823      	ldr	r3, [r4, #0]
 8015a4e:	4605      	mov	r5, r0
 8015a50:	4620      	mov	r0, r4
 8015a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a54:	4798      	blx	r3
 8015a56:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015a5a:	b22d      	sxth	r5, r5
 8015a5c:	4601      	mov	r1, r0
 8015a5e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015a62:	bf06      	itte	eq
 8015a64:	4602      	moveq	r2, r0
 8015a66:	4629      	moveq	r1, r5
 8015a68:	462a      	movne	r2, r5
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	f7fd fe0c 	bl	8013688 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015a70:	bd38      	pop	{r3, r4, r5, pc}
 8015a72:	bf00      	nop
 8015a74:	2400ff38 	.word	0x2400ff38

08015a78 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8015a78:	b530      	push	{r4, r5, lr}
 8015a7a:	888b      	ldrh	r3, [r1, #4]
 8015a7c:	b085      	sub	sp, #20
 8015a7e:	4604      	mov	r4, r0
 8015a80:	8583      	strh	r3, [r0, #44]	; 0x2c
 8015a82:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015a86:	b923      	cbnz	r3, 8015a92 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8015a88:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015a8c:	b90b      	cbnz	r3, 8015a92 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8015a8e:	f7ff ffd3 	bl	8015a38 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8015a92:	6823      	ldr	r3, [r4, #0]
 8015a94:	466d      	mov	r5, sp
 8015a96:	4621      	mov	r1, r4
 8015a98:	343c      	adds	r4, #60	; 0x3c
 8015a9a:	4628      	mov	r0, r5
 8015a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015aa0:	4798      	blx	r3
 8015aa2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015aa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015aaa:	b005      	add	sp, #20
 8015aac:	bd30      	pop	{r4, r5, pc}

08015aae <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015aae:	2300      	movs	r3, #0
 8015ab0:	8083      	strh	r3, [r0, #4]
 8015ab2:	80c3      	strh	r3, [r0, #6]
 8015ab4:	8003      	strh	r3, [r0, #0]
 8015ab6:	8043      	strh	r3, [r0, #2]
 8015ab8:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8015abc:	2bff      	cmp	r3, #255	; 0xff
 8015abe:	bf01      	itttt	eq
 8015ac0:	890b      	ldrheq	r3, [r1, #8]
 8015ac2:	8083      	strheq	r3, [r0, #4]
 8015ac4:	894b      	ldrheq	r3, [r1, #10]
 8015ac6:	80c3      	strheq	r3, [r0, #6]
 8015ac8:	4770      	bx	lr
	...

08015acc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ace:	4604      	mov	r4, r0
 8015ad0:	466b      	mov	r3, sp
 8015ad2:	6808      	ldr	r0, [r1, #0]
 8015ad4:	6849      	ldr	r1, [r1, #4]
 8015ad6:	c303      	stmia	r3!, {r0, r1}
 8015ad8:	6823      	ldr	r3, [r4, #0]
 8015ada:	4669      	mov	r1, sp
 8015adc:	4620      	mov	r0, r4
 8015ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ae0:	4798      	blx	r3
 8015ae2:	4b08      	ldr	r3, [pc, #32]	; (8015b04 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015aea:	b10a      	cbz	r2, 8015af0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015aec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015aee:	b900      	cbnz	r0, 8015af2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8015af0:	6898      	ldr	r0, [r3, #8]
 8015af2:	6803      	ldr	r3, [r0, #0]
 8015af4:	4669      	mov	r1, sp
 8015af6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015af8:	6a1d      	ldr	r5, [r3, #32]
 8015afa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015afe:	47a8      	blx	r5
 8015b00:	b003      	add	sp, #12
 8015b02:	bd30      	pop	{r4, r5, pc}
 8015b04:	2400fee4 	.word	0x2400fee4

08015b08 <_ZN8touchgfx3BoxD1Ev>:
 8015b08:	4770      	bx	lr

08015b0a <_ZN8touchgfx3BoxD0Ev>:
 8015b0a:	b510      	push	{r4, lr}
 8015b0c:	4604      	mov	r4, r0
 8015b0e:	212c      	movs	r1, #44	; 0x2c
 8015b10:	f00d fb91 	bl	8023236 <_ZdlPvj>
 8015b14:	4620      	mov	r0, r4
 8015b16:	bd10      	pop	{r4, pc}

08015b18 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8015b18:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8015b1c:	b12a      	cbz	r2, 8015b2a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015b1e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8015b22:	b112      	cbz	r2, 8015b2a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015b24:	6803      	ldr	r3, [r0, #0]
 8015b26:	695b      	ldr	r3, [r3, #20]
 8015b28:	4718      	bx	r3
 8015b2a:	4770      	bx	lr

08015b2c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
 8015b2c:	4770      	bx	lr
	...

08015b30 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8015b30:	4b30      	ldr	r3, [pc, #192]	; (8015bf4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8015b32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b36:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015b38:	b08d      	sub	sp, #52	; 0x34
 8015b3a:	881b      	ldrh	r3, [r3, #0]
 8015b3c:	4604      	mov	r4, r0
 8015b3e:	460f      	mov	r7, r1
 8015b40:	4293      	cmp	r3, r2
 8015b42:	d954      	bls.n	8015bee <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8015b44:	4b2c      	ldr	r3, [pc, #176]	; (8015bf8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8015b46:	6819      	ldr	r1, [r3, #0]
 8015b48:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8015b4c:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8015b50:	4a2a      	ldr	r2, [pc, #168]	; (8015bfc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8015b52:	6812      	ldr	r2, [r2, #0]
 8015b54:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8015b58:	2900      	cmp	r1, #0
 8015b5a:	d048      	beq.n	8015bee <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8015b5c:	785a      	ldrb	r2, [r3, #1]
 8015b5e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8015b62:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8015b66:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015b6a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8015b6e:	4b24      	ldr	r3, [pc, #144]	; (8015c00 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8015b70:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8015b74:	681a      	ldr	r2, [r3, #0]
 8015b76:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8015b7a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8015b7e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8015b82:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8015b84:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8015b88:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8015b8c:	9107      	str	r1, [sp, #28]
 8015b8e:	f88d 8020 	strb.w	r8, [sp, #32]
 8015b92:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8015b96:	9609      	str	r6, [sp, #36]	; 0x24
 8015b98:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8015b9c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8015ba0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8015ba4:	b10b      	cbz	r3, 8015baa <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8015ba6:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8015ba8:	b905      	cbnz	r5, 8015bac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8015baa:	6895      	ldr	r5, [r2, #8]
 8015bac:	ae05      	add	r6, sp, #20
 8015bae:	4621      	mov	r1, r4
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	f003 fa2f 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015bb6:	4b13      	ldr	r3, [pc, #76]	; (8015c04 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8015bb8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015bba:	6818      	ldr	r0, [r3, #0]
 8015bbc:	f7ee fc7c 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 8015bc0:	6823      	ldr	r3, [r4, #0]
 8015bc2:	4680      	mov	r8, r0
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015bc8:	4798      	blx	r3
 8015bca:	6823      	ldr	r3, [r4, #0]
 8015bcc:	4681      	mov	r9, r0
 8015bce:	4620      	mov	r0, r4
 8015bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015bd4:	4798      	blx	r3
 8015bd6:	ab07      	add	r3, sp, #28
 8015bd8:	f8cd 8004 	str.w	r8, [sp, #4]
 8015bdc:	9300      	str	r3, [sp, #0]
 8015bde:	463b      	mov	r3, r7
 8015be0:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8015be4:	4628      	mov	r0, r5
 8015be6:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015bea:	f7ee fc11 	bl	8004410 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015bee:	b00d      	add	sp, #52	; 0x34
 8015bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bf4:	2400ff38 	.word	0x2400ff38
 8015bf8:	2400ff34 	.word	0x2400ff34
 8015bfc:	2400ff3c 	.word	0x2400ff3c
 8015c00:	2400fee4 	.word	0x2400fee4
 8015c04:	2400ff40 	.word	0x2400ff40

08015c08 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 8015c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c0c:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8015c10:	b0a0      	sub	sp, #128	; 0x80
 8015c12:	4604      	mov	r4, r0
 8015c14:	b193      	cbz	r3, 8015c3c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015c16:	4b30      	ldr	r3, [pc, #192]	; (8015cd8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 8015c18:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015c1a:	881b      	ldrh	r3, [r3, #0]
 8015c1c:	428b      	cmp	r3, r1
 8015c1e:	d90d      	bls.n	8015c3c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015c20:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	dd09      	ble.n	8015c3c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015c28:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	dd05      	ble.n	8015c3c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015c30:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8015c34:	b12b      	cbz	r3, 8015c42 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 8015c36:	6803      	ldr	r3, [r0, #0]
 8015c38:	695b      	ldr	r3, [r3, #20]
 8015c3a:	4798      	blx	r3
 8015c3c:	b020      	add	sp, #128	; 0x80
 8015c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c42:	4b26      	ldr	r3, [pc, #152]	; (8015cdc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8015c4a:	4b25      	ldr	r3, [pc, #148]	; (8015ce0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015c52:	4b24      	ldr	r3, [pc, #144]	; (8015ce4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 8015c54:	6818      	ldr	r0, [r3, #0]
 8015c56:	f7ee fc2f 	bl	80044b8 <_ZNK8touchgfx5Texts7getTextEt>
 8015c5a:	4606      	mov	r6, r0
 8015c5c:	a807      	add	r0, sp, #28
 8015c5e:	f003 fdb0 	bl	80197c2 <_ZN8touchgfx12TextProviderC1Ev>
 8015c62:	682b      	ldr	r3, [r5, #0]
 8015c64:	4628      	mov	r0, r5
 8015c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c68:	4798      	blx	r3
 8015c6a:	682b      	ldr	r3, [r5, #0]
 8015c6c:	4607      	mov	r7, r0
 8015c6e:	4628      	mov	r0, r5
 8015c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015c72:	4798      	blx	r3
 8015c74:	6823      	ldr	r3, [r4, #0]
 8015c76:	4605      	mov	r5, r0
 8015c78:	4620      	mov	r0, r4
 8015c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015c7c:	4798      	blx	r3
 8015c7e:	6823      	ldr	r3, [r4, #0]
 8015c80:	4680      	mov	r8, r0
 8015c82:	4620      	mov	r0, r4
 8015c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c88:	4798      	blx	r3
 8015c8a:	462b      	mov	r3, r5
 8015c8c:	463a      	mov	r2, r7
 8015c8e:	4631      	mov	r1, r6
 8015c90:	e9cd 8000 	strd	r8, r0, [sp]
 8015c94:	a807      	add	r0, sp, #28
 8015c96:	f003 fe04 	bl	80198a2 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015c9a:	a807      	add	r0, sp, #28
 8015c9c:	f004 f9be 	bl	801a01c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015ca0:	280a      	cmp	r0, #10
 8015ca2:	d103      	bne.n	8015cac <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8015ca4:	6823      	ldr	r3, [r4, #0]
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	695b      	ldr	r3, [r3, #20]
 8015caa:	e7c6      	b.n	8015c3a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8015cac:	a807      	add	r0, sp, #28
 8015cae:	f004 f9b5 	bl	801a01c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015cb2:	2800      	cmp	r0, #0
 8015cb4:	d1f4      	bne.n	8015ca0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 8015cb6:	ad04      	add	r5, sp, #16
 8015cb8:	4621      	mov	r1, r4
 8015cba:	4628      	mov	r0, r5
 8015cbc:	f7ff fc5a 	bl	8015574 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8015cc0:	ab02      	add	r3, sp, #8
 8015cc2:	6822      	ldr	r2, [r4, #0]
 8015cc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015cc8:	6912      	ldr	r2, [r2, #16]
 8015cca:	e883 0003 	stmia.w	r3, {r0, r1}
 8015cce:	4619      	mov	r1, r3
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	4790      	blx	r2
 8015cd4:	e7b2      	b.n	8015c3c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015cd6:	bf00      	nop
 8015cd8:	2400ff38 	.word	0x2400ff38
 8015cdc:	2400ff34 	.word	0x2400ff34
 8015ce0:	2400ff3c 	.word	0x2400ff3c
 8015ce4:	2400ff40 	.word	0x2400ff40

08015ce8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8015ce8:	b510      	push	{r4, lr}
 8015cea:	4604      	mov	r4, r0
 8015cec:	2148      	movs	r1, #72	; 0x48
 8015cee:	f00d faa2 	bl	8023236 <_ZdlPvj>
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	bd10      	pop	{r4, pc}

08015cf6 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 8015cf6:	4770      	bx	lr

08015cf8 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8015cf8:	b510      	push	{r4, lr}
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	2134      	movs	r1, #52	; 0x34
 8015cfe:	f00d fa9a 	bl	8023236 <_ZdlPvj>
 8015d02:	4620      	mov	r0, r4
 8015d04:	bd10      	pop	{r4, pc}

08015d06 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8015d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d0a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8015d0c:	4604      	mov	r4, r0
 8015d0e:	460e      	mov	r6, r1
 8015d10:	b08e      	sub	sp, #56	; 0x38
 8015d12:	b218      	sxth	r0, r3
 8015d14:	8921      	ldrh	r1, [r4, #8]
 8015d16:	005b      	lsls	r3, r3, #1
 8015d18:	8962      	ldrh	r2, [r4, #10]
 8015d1a:	f8ad 0000 	strh.w	r0, [sp]
 8015d1e:	b29b      	uxth	r3, r3
 8015d20:	f8ad 0002 	strh.w	r0, [sp, #2]
 8015d24:	1ac9      	subs	r1, r1, r3
 8015d26:	1ad3      	subs	r3, r2, r3
 8015d28:	b209      	sxth	r1, r1
 8015d2a:	b21b      	sxth	r3, r3
 8015d2c:	2900      	cmp	r1, #0
 8015d2e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015d32:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015d36:	dd5e      	ble.n	8015df6 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	dd5c      	ble.n	8015df6 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8015d3c:	6830      	ldr	r0, [r6, #0]
 8015d3e:	ab02      	add	r3, sp, #8
 8015d40:	6871      	ldr	r1, [r6, #4]
 8015d42:	c303      	stmia	r3!, {r0, r1}
 8015d44:	4669      	mov	r1, sp
 8015d46:	a802      	add	r0, sp, #8
 8015d48:	f7fd fade 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	a902      	add	r1, sp, #8
 8015d50:	f7ff febc 	bl	8015acc <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8015d54:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015d56:	2800      	cmp	r0, #0
 8015d58:	d05f      	beq.n	8015e1a <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8015d5a:	8963      	ldrh	r3, [r4, #10]
 8015d5c:	b202      	sxth	r2, r0
 8015d5e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8015d62:	2500      	movs	r5, #0
 8015d64:	1a1f      	subs	r7, r3, r0
 8015d66:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8015d6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015d6e:	b21b      	sxth	r3, r3
 8015d70:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8015d74:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8015d78:	af04      	add	r7, sp, #16
 8015d7a:	1a09      	subs	r1, r1, r0
 8015d7c:	9506      	str	r5, [sp, #24]
 8015d7e:	f8ad 201e 	strh.w	r2, [sp, #30]
 8015d82:	f8ad 5020 	strh.w	r5, [sp, #32]
 8015d86:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8015d8a:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8015d8e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8015d92:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8015d96:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015d9a:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8015d9e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8015da2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015da6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015daa:	ab06      	add	r3, sp, #24
 8015dac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015db0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015db4:	e887 0003 	stmia.w	r7, {r0, r1}
 8015db8:	4631      	mov	r1, r6
 8015dba:	4638      	mov	r0, r7
 8015dbc:	f7fd faa4 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 8015dc0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	dd12      	ble.n	8015dee <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8015dc8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	dd0e      	ble.n	8015dee <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8015dd0:	6823      	ldr	r3, [r4, #0]
 8015dd2:	4639      	mov	r1, r7
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dd8:	4798      	blx	r3
 8015dda:	f7fe fdbd 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 8015dde:	6803      	ldr	r3, [r0, #0]
 8015de0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015de2:	4639      	mov	r1, r7
 8015de4:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8015de8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015dec:	47c0      	blx	r8
 8015dee:	3501      	adds	r5, #1
 8015df0:	2d04      	cmp	r5, #4
 8015df2:	d1da      	bne.n	8015daa <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8015df4:	e011      	b.n	8015e1a <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8015df6:	6830      	ldr	r0, [r6, #0]
 8015df8:	ab06      	add	r3, sp, #24
 8015dfa:	6871      	ldr	r1, [r6, #4]
 8015dfc:	c303      	stmia	r3!, {r0, r1}
 8015dfe:	6823      	ldr	r3, [r4, #0]
 8015e00:	a906      	add	r1, sp, #24
 8015e02:	4620      	mov	r0, r4
 8015e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e06:	4798      	blx	r3
 8015e08:	f7fe fda6 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 8015e0c:	6803      	ldr	r3, [r0, #0]
 8015e0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015e10:	a906      	add	r1, sp, #24
 8015e12:	6a1d      	ldr	r5, [r3, #32]
 8015e14:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015e18:	47a8      	blx	r5
 8015e1a:	b00e      	add	sp, #56	; 0x38
 8015e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e20 <_ZN8touchgfx5ImageD1Ev>:
 8015e20:	4770      	bx	lr

08015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8015e22:	b570      	push	{r4, r5, r6, lr}
 8015e24:	880b      	ldrh	r3, [r1, #0]
 8015e26:	460d      	mov	r5, r1
 8015e28:	4604      	mov	r4, r0
 8015e2a:	84c3      	strh	r3, [r0, #38]	; 0x26
 8015e2c:	4608      	mov	r0, r1
 8015e2e:	f005 f927 	bl	801b080 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015e32:	4606      	mov	r6, r0
 8015e34:	4628      	mov	r0, r5
 8015e36:	f005 f957 	bl	801b0e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015e3a:	6823      	ldr	r3, [r4, #0]
 8015e3c:	4605      	mov	r5, r0
 8015e3e:	4631      	mov	r1, r6
 8015e40:	4620      	mov	r0, r4
 8015e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e44:	4798      	blx	r3
 8015e46:	6823      	ldr	r3, [r4, #0]
 8015e48:	4629      	mov	r1, r5
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e52:	4718      	bx	r3

08015e54 <_ZN8touchgfx5ImageD0Ev>:
 8015e54:	b510      	push	{r4, lr}
 8015e56:	4604      	mov	r4, r0
 8015e58:	212c      	movs	r1, #44	; 0x2c
 8015e5a:	f00d f9ec 	bl	8023236 <_ZdlPvj>
 8015e5e:	4620      	mov	r0, r4
 8015e60:	bd10      	pop	{r4, pc}

08015e62 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8015e62:	b510      	push	{r4, lr}
 8015e64:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8015e68:	4604      	mov	r4, r0
 8015e6a:	2bff      	cmp	r3, #255	; 0xff
 8015e6c:	d006      	beq.n	8015e7c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8015e6e:	2300      	movs	r3, #0
 8015e70:	8003      	strh	r3, [r0, #0]
 8015e72:	8043      	strh	r3, [r0, #2]
 8015e74:	8083      	strh	r3, [r0, #4]
 8015e76:	80c3      	strh	r3, [r0, #6]
 8015e78:	4620      	mov	r0, r4
 8015e7a:	bd10      	pop	{r4, pc}
 8015e7c:	3126      	adds	r1, #38	; 0x26
 8015e7e:	f005 f967 	bl	801b150 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015e82:	e7f9      	b.n	8015e78 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08015e84 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8015e84:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8015e88:	b12a      	cbz	r2, 8015e96 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015e8a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8015e8e:	b112      	cbz	r2, 8015e96 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8015e90:	6803      	ldr	r3, [r0, #0]
 8015e92:	695b      	ldr	r3, [r3, #20]
 8015e94:	4718      	bx	r3
 8015e96:	4770      	bx	lr

08015e98 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8015e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e9c:	4604      	mov	r4, r0
 8015e9e:	b088      	sub	sp, #32
 8015ea0:	2500      	movs	r5, #0
 8015ea2:	460f      	mov	r7, r1
 8015ea4:	f854 3b26 	ldr.w	r3, [r4], #38
 8015ea8:	a904      	add	r1, sp, #16
 8015eaa:	4606      	mov	r6, r0
 8015eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015eae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015eb2:	4798      	blx	r3
 8015eb4:	4620      	mov	r0, r4
 8015eb6:	f005 f8e3 	bl	801b080 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015eba:	4680      	mov	r8, r0
 8015ebc:	4620      	mov	r0, r4
 8015ebe:	f005 f913 	bl	801b0e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015ec2:	9506      	str	r5, [sp, #24]
 8015ec4:	ad06      	add	r5, sp, #24
 8015ec6:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015eca:	4639      	mov	r1, r7
 8015ecc:	f8ad 801c 	strh.w	r8, [sp, #28]
 8015ed0:	4628      	mov	r0, r5
 8015ed2:	f7fd fa19 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 8015ed6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	dd19      	ble.n	8015f12 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015ede:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	dd15      	ble.n	8015f12 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015ee6:	4b0c      	ldr	r3, [pc, #48]	; (8015f18 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015eee:	b10a      	cbz	r2, 8015ef4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8015ef0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015ef2:	b900      	cbnz	r0, 8015ef6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8015ef4:	6898      	ldr	r0, [r3, #8]
 8015ef6:	2701      	movs	r7, #1
 8015ef8:	6801      	ldr	r1, [r0, #0]
 8015efa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015efe:	9702      	str	r7, [sp, #8]
 8015f00:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8015f04:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015f08:	e9cd 5600 	strd	r5, r6, [sp]
 8015f0c:	688d      	ldr	r5, [r1, #8]
 8015f0e:	4621      	mov	r1, r4
 8015f10:	47a8      	blx	r5
 8015f12:	b008      	add	sp, #32
 8015f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f18:	2400fee4 	.word	0x2400fee4

08015f1c <_ZN8touchgfx8KeyboardD1Ev>:
 8015f1c:	4770      	bx	lr

08015f1e <_ZN8touchgfx8Keyboard14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015f1e:	b538      	push	{r3, r4, r5, lr}
 8015f20:	4604      	mov	r4, r0
 8015f22:	4615      	mov	r5, r2
 8015f24:	f7fd fac8 	bl	80134b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8015f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f2c:	81a3      	strh	r3, [r4, #12]
 8015f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8015f32:	6223      	str	r3, [r4, #32]
 8015f34:	682b      	ldr	r3, [r5, #0]
 8015f36:	61e3      	str	r3, [r4, #28]
 8015f38:	602c      	str	r4, [r5, #0]
 8015f3a:	bd38      	pop	{r3, r4, r5, pc}

08015f3c <_ZN8touchgfx8KeyboardD0Ev>:
 8015f3c:	b510      	push	{r4, lr}
 8015f3e:	4604      	mov	r4, r0
 8015f40:	21e8      	movs	r1, #232	; 0xe8
 8015f42:	f00d f978 	bl	8023236 <_ZdlPvj>
 8015f46:	4620      	mov	r0, r4
 8015f48:	bd10      	pop	{r4, pc}

08015f4a <_ZNK8touchgfx4Rect9intersectEss>:
 8015f4a:	b510      	push	{r4, lr}
 8015f4c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015f50:	428b      	cmp	r3, r1
 8015f52:	dc10      	bgt.n	8015f76 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8015f54:	8884      	ldrh	r4, [r0, #4]
 8015f56:	4423      	add	r3, r4
 8015f58:	b21b      	sxth	r3, r3
 8015f5a:	4299      	cmp	r1, r3
 8015f5c:	da0b      	bge.n	8015f76 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8015f5e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015f62:	4293      	cmp	r3, r2
 8015f64:	dc07      	bgt.n	8015f76 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8015f66:	88c0      	ldrh	r0, [r0, #6]
 8015f68:	4418      	add	r0, r3
 8015f6a:	b200      	sxth	r0, r0
 8015f6c:	4282      	cmp	r2, r0
 8015f6e:	bfac      	ite	ge
 8015f70:	2000      	movge	r0, #0
 8015f72:	2001      	movlt	r0, #1
 8015f74:	bd10      	pop	{r4, pc}
 8015f76:	2000      	movs	r0, #0
 8015f78:	e7fc      	b.n	8015f74 <_ZNK8touchgfx4Rect9intersectEss+0x2a>
	...

08015f7c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE>:
 8015f7c:	b530      	push	{r4, r5, lr}
 8015f7e:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8015f82:	b085      	sub	sp, #20
 8015f84:	4604      	mov	r4, r0
 8015f86:	460d      	mov	r5, r1
 8015f88:	b1f3      	cbz	r3, 8015fc8 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8015f8a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015f8e:	30bc      	adds	r0, #188	; 0xbc
 8015f90:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8015f94:	f7ff ffd9 	bl	8015f4a <_ZNK8touchgfx4Rect9intersectEss>
 8015f98:	b9b0      	cbnz	r0, 8015fc8 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8015f9a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8015f9e:	b99b      	cbnz	r3, 8015fc8 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8015fa0:	480a      	ldr	r0, [pc, #40]	; (8015fcc <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x50>)
 8015fa2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015fa6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8015faa:	9001      	str	r0, [sp, #4]
 8015fac:	2002      	movs	r0, #2
 8015fae:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015fb2:	6823      	ldr	r3, [r4, #0]
 8015fb4:	f88d 0008 	strb.w	r0, [sp, #8]
 8015fb8:	4620      	mov	r0, r4
 8015fba:	f8ad 100a 	strh.w	r1, [sp, #10]
 8015fbe:	a901      	add	r1, sp, #4
 8015fc0:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015fc6:	4798      	blx	r3
 8015fc8:	b005      	add	sp, #20
 8015fca:	bd30      	pop	{r4, r5, pc}
 8015fcc:	08026a38 	.word	0x08026a38

08015fd0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8015fd0:	b510      	push	{r4, lr}
 8015fd2:	f9b1 4000 	ldrsh.w	r4, [r1]
 8015fd6:	888a      	ldrh	r2, [r1, #4]
 8015fd8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015fdc:	4422      	add	r2, r4
 8015fde:	b212      	sxth	r2, r2
 8015fe0:	4293      	cmp	r3, r2
 8015fe2:	da15      	bge.n	8016010 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015fe4:	8882      	ldrh	r2, [r0, #4]
 8015fe6:	4413      	add	r3, r2
 8015fe8:	b21b      	sxth	r3, r3
 8015fea:	429c      	cmp	r4, r3
 8015fec:	da10      	bge.n	8016010 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015fee:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015ff2:	88c9      	ldrh	r1, [r1, #6]
 8015ff4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015ff8:	4419      	add	r1, r3
 8015ffa:	b209      	sxth	r1, r1
 8015ffc:	428a      	cmp	r2, r1
 8015ffe:	da07      	bge.n	8016010 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016000:	88c0      	ldrh	r0, [r0, #6]
 8016002:	4410      	add	r0, r2
 8016004:	b200      	sxth	r0, r0
 8016006:	4283      	cmp	r3, r0
 8016008:	bfac      	ite	ge
 801600a:	2000      	movge	r0, #0
 801600c:	2001      	movlt	r0, #1
 801600e:	bd10      	pop	{r4, pc}
 8016010:	2000      	movs	r0, #0
 8016012:	e7fc      	b.n	801600e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016014 <_ZN8touchgfx8DrawableC1Ev>:
 8016014:	4a0a      	ldr	r2, [pc, #40]	; (8016040 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 8016016:	6002      	str	r2, [r0, #0]
 8016018:	2200      	movs	r2, #0
 801601a:	8082      	strh	r2, [r0, #4]
 801601c:	80c2      	strh	r2, [r0, #6]
 801601e:	8102      	strh	r2, [r0, #8]
 8016020:	8142      	strh	r2, [r0, #10]
 8016022:	8182      	strh	r2, [r0, #12]
 8016024:	81c2      	strh	r2, [r0, #14]
 8016026:	8202      	strh	r2, [r0, #16]
 8016028:	8242      	strh	r2, [r0, #18]
 801602a:	61c2      	str	r2, [r0, #28]
 801602c:	8402      	strh	r2, [r0, #32]
 801602e:	8442      	strh	r2, [r0, #34]	; 0x22
 8016030:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016034:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016038:	2201      	movs	r2, #1
 801603a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801603e:	4770      	bx	lr
 8016040:	08026fe4 	.word	0x08026fe4

08016044 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8016044:	b538      	push	{r3, r4, r5, lr}
 8016046:	4604      	mov	r4, r0
 8016048:	460d      	mov	r5, r1
 801604a:	2226      	movs	r2, #38	; 0x26
 801604c:	2100      	movs	r1, #0
 801604e:	f00d fab7 	bl	80235c0 <memset>
 8016052:	4620      	mov	r0, r4
 8016054:	f7ff ffde 	bl	8016014 <_ZN8touchgfx8DrawableC1Ev>
 8016058:	4b06      	ldr	r3, [pc, #24]	; (8016074 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 801605a:	4620      	mov	r0, r4
 801605c:	4629      	mov	r1, r5
 801605e:	6023      	str	r3, [r4, #0]
 8016060:	882b      	ldrh	r3, [r5, #0]
 8016062:	84e3      	strh	r3, [r4, #38]	; 0x26
 8016064:	23ff      	movs	r3, #255	; 0xff
 8016066:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 801606a:	f7ff feda 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801606e:	4620      	mov	r0, r4
 8016070:	bd38      	pop	{r3, r4, r5, pc}
 8016072:	bf00      	nop
 8016074:	08026e44 	.word	0x08026e44

08016078 <_ZN8touchgfx8KeyboardC1Ev>:
 8016078:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801607c:	4604      	mov	r4, r0
 801607e:	2500      	movs	r5, #0
 8016080:	f7ff ffc8 	bl	8016014 <_ZN8touchgfx8DrawableC1Ev>
 8016084:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8016088:	4b2f      	ldr	r3, [pc, #188]	; (8016148 <_ZN8touchgfx8KeyboardC1Ev+0xd0>)
 801608a:	f104 0938 	add.w	r9, r4, #56	; 0x38
 801608e:	af02      	add	r7, sp, #8
 8016090:	f104 0864 	add.w	r8, r4, #100	; 0x64
 8016094:	6023      	str	r3, [r4, #0]
 8016096:	4648      	mov	r0, r9
 8016098:	f827 6d04 	strh.w	r6, [r7, #-4]!
 801609c:	4639      	mov	r1, r7
 801609e:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
 80160a2:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 80160a6:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 80160aa:	f7ff ffcb 	bl	8016044 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80160ae:	2226      	movs	r2, #38	; 0x26
 80160b0:	4629      	mov	r1, r5
 80160b2:	4640      	mov	r0, r8
 80160b4:	f00d fa84 	bl	80235c0 <memset>
 80160b8:	4640      	mov	r0, r8
 80160ba:	f7ff ffab 	bl	8016014 <_ZN8touchgfx8DrawableC1Ev>
 80160be:	4b23      	ldr	r3, [pc, #140]	; (801614c <_ZN8touchgfx8KeyboardC1Ev+0xd4>)
 80160c0:	4639      	mov	r1, r7
 80160c2:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 80160c6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80160ca:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80160ce:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 80160d2:	4650      	mov	r0, sl
 80160d4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80160d8:	4b1d      	ldr	r3, [pc, #116]	; (8016150 <_ZN8touchgfx8KeyboardC1Ev+0xd8>)
 80160da:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 80160de:	6663      	str	r3, [r4, #100]	; 0x64
 80160e0:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
 80160e4:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 80160e8:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 80160ec:	f8a4 60a4 	strh.w	r6, [r4, #164]	; 0xa4
 80160f0:	f8a4 60a6 	strh.w	r6, [r4, #166]	; 0xa6
 80160f4:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 80160f8:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 80160fc:	f8ad 6004 	strh.w	r6, [sp, #4]
 8016100:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8016104:	f7ff ff9e 	bl	8016044 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8016108:	2301      	movs	r3, #1
 801610a:	462a      	mov	r2, r5
 801610c:	4629      	mov	r1, r5
 801610e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8016112:	4648      	mov	r0, r9
 8016114:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
 8016118:	f7fd faa9 	bl	801366e <_ZN8touchgfx8Drawable5setXYEss>
 801611c:	4649      	mov	r1, r9
 801611e:	4620      	mov	r0, r4
 8016120:	f7fc ff64 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016124:	4651      	mov	r1, sl
 8016126:	4620      	mov	r0, r4
 8016128:	f884 50dd 	strb.w	r5, [r4, #221]	; 0xdd
 801612c:	f7fc ff5e 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016130:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8016134:	4620      	mov	r0, r4
 8016136:	4641      	mov	r1, r8
 8016138:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 801613c:	f7fc ff56 	bl	8012fec <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016140:	4620      	mov	r0, r4
 8016142:	b002      	add	sp, #8
 8016144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016148:	08026eb0 	.word	0x08026eb0
 801614c:	08024f38 	.word	0x08024f38
 8016150:	08025c50 	.word	0x08025c50

08016154 <_ZN8touchgfx8Keyboard9setBufferEPtt>:
 8016154:	b510      	push	{r4, lr}
 8016156:	4604      	mov	r4, r0
 8016158:	6301      	str	r1, [r0, #48]	; 0x30
 801615a:	8682      	strh	r2, [r0, #52]	; 0x34
 801615c:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
 8016160:	4608      	mov	r0, r1
 8016162:	f004 fa95 	bl	801a690 <_ZN8touchgfx7Unicode6strlenEPKt>
 8016166:	86e0      	strh	r0, [r4, #54]	; 0x36
 8016168:	bd10      	pop	{r4, pc}

0801616a <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>:
 801616a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801616e:	4605      	mov	r5, r0
 8016170:	460c      	mov	r4, r1
 8016172:	f8c5 10b0 	str.w	r1, [r5, #176]	; 0xb0
 8016176:	b309      	cbz	r1, 80161bc <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE+0x52>
 8016178:	460f      	mov	r7, r1
 801617a:	a902      	add	r1, sp, #8
 801617c:	f105 0664 	add.w	r6, r5, #100	; 0x64
 8016180:	3038      	adds	r0, #56	; 0x38
 8016182:	f837 3b1c 	ldrh.w	r3, [r7], #28
 8016186:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801618a:	f7ff fe4a 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801618e:	4639      	mov	r1, r7
 8016190:	4630      	mov	r0, r6
 8016192:	f7ff fc71 	bl	8015a78 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8016196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016198:	4630      	mov	r0, r6
 801619a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 801619e:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
 80161a2:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
 80161a6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80161aa:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80161ae:	f7fd fa5e 	bl	801366e <_ZN8touchgfx8Drawable5setXYEss>
 80161b2:	4642      	mov	r2, r8
 80161b4:	4639      	mov	r1, r7
 80161b6:	4630      	mov	r0, r6
 80161b8:	f7fd fa66 	bl	8013688 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80161bc:	682b      	ldr	r3, [r5, #0]
 80161be:	4628      	mov	r0, r5
 80161c0:	695b      	ldr	r3, [r3, #20]
 80161c2:	4798      	blx	r3
 80161c4:	b002      	add	sp, #8
 80161c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080161cc <_ZN8touchgfx8Keyboard18setTextIndentationEv>:
 80161cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161d0:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 80161d4:	4604      	mov	r4, r0
 80161d6:	b343      	cbz	r3, 801622a <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x5e>
 80161d8:	4a15      	ldr	r2, [pc, #84]	; (8016230 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x64>)
 80161da:	f100 0764 	add.w	r7, r0, #100	; 0x64
 80161de:	8c19      	ldrh	r1, [r3, #32]
 80161e0:	6812      	ldr	r2, [r2, #0]
 80161e2:	4638      	mov	r0, r7
 80161e4:	8add      	ldrh	r5, [r3, #22]
 80161e6:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 80161ea:	4a12      	ldr	r2, [pc, #72]	; (8016234 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x68>)
 80161ec:	f9b3 8018 	ldrsh.w	r8, [r3, #24]
 80161f0:	6812      	ldr	r2, [r2, #0]
 80161f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80161f6:	8a59      	ldrh	r1, [r3, #18]
 80161f8:	7a16      	ldrb	r6, [r2, #8]
 80161fa:	b2b2      	uxth	r2, r6
 80161fc:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 8016200:	1a89      	subs	r1, r1, r2
 8016202:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8016206:	b22d      	sxth	r5, r5
 8016208:	b209      	sxth	r1, r1
 801620a:	f7fd fa30 	bl	801366e <_ZN8touchgfx8Drawable5setXYEss>
 801620e:	4642      	mov	r2, r8
 8016210:	4629      	mov	r1, r5
 8016212:	4638      	mov	r0, r7
 8016214:	f7fd fa38 	bl	8013688 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016218:	2300      	movs	r3, #0
 801621a:	f04f 32ff 	mov.w	r2, #4294967295
 801621e:	f884 609b 	strb.w	r6, [r4, #155]	; 0x9b
 8016222:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8016226:	e9c4 3228 	strd	r3, r2, [r4, #160]	; 0xa0
 801622a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801622e:	bf00      	nop
 8016230:	2400ff34 	.word	0x2400ff34
 8016234:	2400ff3c 	.word	0x2400ff3c

08016238 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>:
 8016238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801623c:	4690      	mov	r8, r2
 801623e:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8016242:	2200      	movs	r2, #0
 8016244:	4606      	mov	r6, r0
 8016246:	4699      	mov	r9, r3
 8016248:	8042      	strh	r2, [r0, #2]
 801624a:	8082      	strh	r2, [r0, #4]
 801624c:	80c2      	strh	r2, [r0, #6]
 801624e:	8102      	strh	r2, [r0, #8]
 8016250:	7002      	strb	r2, [r0, #0]
 8016252:	b1c7      	cbz	r7, 8016286 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8016254:	f897 a008 	ldrb.w	sl, [r7, #8]
 8016258:	4615      	mov	r5, r2
 801625a:	f04f 0b0c 	mov.w	fp, #12
 801625e:	b2eb      	uxtb	r3, r5
 8016260:	459a      	cmp	sl, r3
 8016262:	d910      	bls.n	8016286 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8016264:	687c      	ldr	r4, [r7, #4]
 8016266:	464a      	mov	r2, r9
 8016268:	4641      	mov	r1, r8
 801626a:	fb0b 4405 	mla	r4, fp, r5, r4
 801626e:	3501      	adds	r5, #1
 8016270:	1ca0      	adds	r0, r4, #2
 8016272:	f7ff fe6a 	bl	8015f4a <_ZNK8touchgfx4Rect9intersectEss>
 8016276:	2800      	cmp	r0, #0
 8016278:	d0f1      	beq.n	801625e <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x26>
 801627a:	6823      	ldr	r3, [r4, #0]
 801627c:	6033      	str	r3, [r6, #0]
 801627e:	6863      	ldr	r3, [r4, #4]
 8016280:	6073      	str	r3, [r6, #4]
 8016282:	68a3      	ldr	r3, [r4, #8]
 8016284:	60b3      	str	r3, [r6, #8]
 8016286:	4630      	mov	r0, r6
 8016288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801628c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>:
 801628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016290:	2500      	movs	r5, #0
 8016292:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8016296:	4606      	mov	r6, r0
 8016298:	4690      	mov	r8, r2
 801629a:	4699      	mov	r9, r3
 801629c:	6085      	str	r5, [r0, #8]
 801629e:	e9c0 5500 	strd	r5, r5, [r0]
 80162a2:	b307      	cbz	r7, 80162e6 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 80162a4:	f897 a010 	ldrb.w	sl, [r7, #16]
 80162a8:	b2eb      	uxtb	r3, r5
 80162aa:	459a      	cmp	sl, r3
 80162ac:	d91b      	bls.n	80162e6 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 80162ae:	68fc      	ldr	r4, [r7, #12]
 80162b0:	464a      	mov	r2, r9
 80162b2:	4641      	mov	r1, r8
 80162b4:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80162b8:	3501      	adds	r5, #1
 80162ba:	4620      	mov	r0, r4
 80162bc:	f7ff fe45 	bl	8015f4a <_ZNK8touchgfx4Rect9intersectEss>
 80162c0:	2800      	cmp	r0, #0
 80162c2:	d0f1      	beq.n	80162a8 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x1c>
 80162c4:	4623      	mov	r3, r4
 80162c6:	4632      	mov	r2, r6
 80162c8:	f104 0508 	add.w	r5, r4, #8
 80162cc:	6818      	ldr	r0, [r3, #0]
 80162ce:	3308      	adds	r3, #8
 80162d0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80162d4:	4614      	mov	r4, r2
 80162d6:	42ab      	cmp	r3, r5
 80162d8:	c403      	stmia	r4!, {r0, r1}
 80162da:	4622      	mov	r2, r4
 80162dc:	d1f6      	bne.n	80162cc <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x40>
 80162de:	6818      	ldr	r0, [r3, #0]
 80162e0:	6020      	str	r0, [r4, #0]
 80162e2:	889b      	ldrh	r3, [r3, #4]
 80162e4:	80a3      	strh	r3, [r4, #4]
 80162e6:	4630      	mov	r0, r6
 80162e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080162ec <_ZNK8touchgfx8Keyboard13getCharForKeyEh>:
 80162ec:	b570      	push	{r4, r5, r6, lr}
 80162ee:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 80162f2:	b160      	cbz	r0, 801630e <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>
 80162f4:	7906      	ldrb	r6, [r0, #4]
 80162f6:	2300      	movs	r3, #0
 80162f8:	b2da      	uxtb	r2, r3
 80162fa:	4296      	cmp	r6, r2
 80162fc:	d908      	bls.n	8016310 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x24>
 80162fe:	009a      	lsls	r2, r3, #2
 8016300:	6804      	ldr	r4, [r0, #0]
 8016302:	3301      	adds	r3, #1
 8016304:	18a5      	adds	r5, r4, r2
 8016306:	5ca2      	ldrb	r2, [r4, r2]
 8016308:	428a      	cmp	r2, r1
 801630a:	d1f5      	bne.n	80162f8 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0xc>
 801630c:	8868      	ldrh	r0, [r5, #2]
 801630e:	bd70      	pop	{r4, r5, r6, pc}
 8016310:	2000      	movs	r0, #0
 8016312:	e7fc      	b.n	801630e <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>

08016314 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE>:
 8016314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016318:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 801631c:	b08d      	sub	sp, #52	; 0x34
 801631e:	4605      	mov	r5, r0
 8016320:	460e      	mov	r6, r1
 8016322:	2b00      	cmp	r3, #0
 8016324:	f000 80c4 	beq.w	80164b0 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8016328:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 801632a:	f004 fd49 	bl	801adc0 <_ZN8touchgfx11FontManager7getFontEt>
 801632e:	2800      	cmp	r0, #0
 8016330:	f000 80be 	beq.w	80164b0 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8016334:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8016338:	2400      	movs	r4, #0
 801633a:	9007      	str	r0, [sp, #28]
 801633c:	920a      	str	r2, [sp, #40]	; 0x28
 801633e:	2201      	movs	r2, #1
 8016340:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8016344:	f88d 2020 	strb.w	r2, [sp, #32]
 8016348:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 801634c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016350:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016352:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
 8016356:	9209      	str	r2, [sp, #36]	; 0x24
 8016358:	9402      	str	r4, [sp, #8]
 801635a:	6803      	ldr	r3, [r0, #0]
 801635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801635e:	4798      	blx	r3
 8016360:	4607      	mov	r7, r0
 8016362:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8016366:	fa5f f884 	uxtb.w	r8, r4
 801636a:	7a1a      	ldrb	r2, [r3, #8]
 801636c:	4542      	cmp	r2, r8
 801636e:	f240 809f 	bls.w	80164b0 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8016372:	220c      	movs	r2, #12
 8016374:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8016378:	4631      	mov	r1, r6
 801637a:	fb02 f808 	mul.w	r8, r2, r8
 801637e:	eb09 0a08 	add.w	sl, r9, r8
 8016382:	f10a 0a02 	add.w	sl, sl, #2
 8016386:	4650      	mov	r0, sl
 8016388:	f7ff fe22 	bl	8015fd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801638c:	2800      	cmp	r0, #0
 801638e:	f000 808a 	beq.w	80164a6 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 8016392:	f819 1008 	ldrb.w	r1, [r9, r8]
 8016396:	4628      	mov	r0, r5
 8016398:	f7ff ffa8 	bl	80162ec <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 801639c:	4681      	mov	r9, r0
 801639e:	2800      	cmp	r0, #0
 80163a0:	f000 8081 	beq.w	80164a6 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 80163a4:	f8da 0000 	ldr.w	r0, [sl]
 80163a8:	ab03      	add	r3, sp, #12
 80163aa:	f8da 1004 	ldr.w	r1, [sl, #4]
 80163ae:	c303      	stmia	r3!, {r0, r1}
 80163b0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80163b4:	2102      	movs	r1, #2
 80163b6:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 80163ba:	1bd3      	subs	r3, r2, r7
 80163bc:	fb93 f3f1 	sdiv	r3, r3, r1
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	4498      	add	r8, r3
 80163c4:	1ad3      	subs	r3, r2, r3
 80163c6:	fa1f f888 	uxth.w	r8, r8
 80163ca:	f8ad 3012 	strh.w	r3, [sp, #18]
 80163ce:	ab05      	add	r3, sp, #20
 80163d0:	f8da 1004 	ldr.w	r1, [sl, #4]
 80163d4:	f8ad 800e 	strh.w	r8, [sp, #14]
 80163d8:	f8da 0000 	ldr.w	r0, [sl]
 80163dc:	c303      	stmia	r3!, {r0, r1}
 80163de:	4631      	mov	r1, r6
 80163e0:	a805      	add	r0, sp, #20
 80163e2:	f7ff fdf5 	bl	8015fd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80163e6:	2800      	cmp	r0, #0
 80163e8:	d05f      	beq.n	80164aa <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x196>
 80163ea:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80163ee:	f9b6 2000 	ldrsh.w	r2, [r6]
 80163f2:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80163f6:	4686      	mov	lr, r0
 80163f8:	4290      	cmp	r0, r2
 80163fa:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80163fe:	4450      	add	r0, sl
 8016400:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 8016404:	bfb8      	it	lt
 8016406:	4696      	movlt	lr, r2
 8016408:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801640c:	4452      	add	r2, sl
 801640e:	b280      	uxth	r0, r0
 8016410:	4299      	cmp	r1, r3
 8016412:	468c      	mov	ip, r1
 8016414:	b292      	uxth	r2, r2
 8016416:	f8ad e014 	strh.w	lr, [sp, #20]
 801641a:	fa0f fb80 	sxth.w	fp, r0
 801641e:	bfb8      	it	lt
 8016420:	469c      	movlt	ip, r3
 8016422:	fa0f fa82 	sxth.w	sl, r2
 8016426:	f8ad c016 	strh.w	ip, [sp, #22]
 801642a:	45d3      	cmp	fp, sl
 801642c:	bfb8      	it	lt
 801642e:	4602      	movlt	r2, r0
 8016430:	eba2 020e 	sub.w	r2, r2, lr
 8016434:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016438:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801643c:	4411      	add	r1, r2
 801643e:	88f2      	ldrh	r2, [r6, #6]
 8016440:	4413      	add	r3, r2
 8016442:	b289      	uxth	r1, r1
 8016444:	b29b      	uxth	r3, r3
 8016446:	b208      	sxth	r0, r1
 8016448:	b21a      	sxth	r2, r3
 801644a:	4290      	cmp	r0, r2
 801644c:	bfb8      	it	lt
 801644e:	460b      	movlt	r3, r1
 8016450:	eba3 030c 	sub.w	r3, r3, ip
 8016454:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016458:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801645c:	4628      	mov	r0, r5
 801645e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016462:	f8ad 9008 	strh.w	r9, [sp, #8]
 8016466:	1a9b      	subs	r3, r3, r2
 8016468:	f8ad 3014 	strh.w	r3, [sp, #20]
 801646c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016470:	eba3 0808 	sub.w	r8, r3, r8
 8016474:	682b      	ldr	r3, [r5, #0]
 8016476:	f8ad 8016 	strh.w	r8, [sp, #22]
 801647a:	f10d 080c 	add.w	r8, sp, #12
 801647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016480:	4641      	mov	r1, r8
 8016482:	4798      	blx	r3
 8016484:	4b0c      	ldr	r3, [pc, #48]	; (80164b8 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1a4>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801648c:	b10a      	cbz	r2, 8016492 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x17e>
 801648e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016490:	b900      	cbnz	r0, 8016494 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x180>
 8016492:	6898      	ldr	r0, [r3, #8]
 8016494:	ab02      	add	r3, sp, #8
 8016496:	9301      	str	r3, [sp, #4]
 8016498:	ab07      	add	r3, sp, #28
 801649a:	9300      	str	r3, [sp, #0]
 801649c:	ab05      	add	r3, sp, #20
 801649e:	e898 0006 	ldmia.w	r8, {r1, r2}
 80164a2:	f7ed ffb5 	bl	8004410 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80164a6:	3401      	adds	r4, #1
 80164a8:	e75b      	b.n	8016362 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x4e>
 80164aa:	e9cd 0005 	strd	r0, r0, [sp, #20]
 80164ae:	e7d3      	b.n	8016458 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x144>
 80164b0:	b00d      	add	sp, #52	; 0x34
 80164b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b6:	bf00      	nop
 80164b8:	2400fee4 	.word	0x2400fee4

080164bc <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE>:
 80164bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164c0:	790d      	ldrb	r5, [r1, #4]
 80164c2:	b08b      	sub	sp, #44	; 0x2c
 80164c4:	4604      	mov	r4, r0
 80164c6:	2d01      	cmp	r5, #1
 80164c8:	d108      	bne.n	80164dc <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 80164ca:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
 80164ce:	b12b      	cbz	r3, 80164dc <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 80164d0:	2300      	movs	r3, #0
 80164d2:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 80164d6:	b00b      	add	sp, #44	; 0x2c
 80164d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164dc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80164e0:	2700      	movs	r7, #0
 80164e2:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 80164e6:	a806      	add	r0, sp, #24
 80164e8:	4642      	mov	r2, r8
 80164ea:	4621      	mov	r1, r4
 80164ec:	464b      	mov	r3, r9
 80164ee:	e9cd 7701 	strd	r7, r7, [sp, #4]
 80164f2:	f7ff fecb 	bl	801628c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>
 80164f6:	9e08      	ldr	r6, [sp, #32]
 80164f8:	2e00      	cmp	r6, #0
 80164fa:	d049      	beq.n	8016590 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xd4>
 80164fc:	2d00      	cmp	r5, #0
 80164fe:	d133      	bne.n	8016568 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xac>
 8016500:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 8016504:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8016508:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801650c:	4630      	mov	r0, r6
 801650e:	f7fd f8ae 	bl	801366e <_ZN8touchgfx8Drawable5setXYEss>
 8016512:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8016516:	a90a      	add	r1, sp, #40	; 0x28
 8016518:	f821 3d1c 	strh.w	r3, [r1, #-28]!
 801651c:	4630      	mov	r0, r6
 801651e:	f7ff fc80 	bl	8015e22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016522:	2301      	movs	r3, #1
 8016524:	4622      	mov	r2, r4
 8016526:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801652a:	ab01      	add	r3, sp, #4
 801652c:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 8016530:	6851      	ldr	r1, [r2, #4]
 8016532:	c303      	stmia	r3!, {r0, r1}
 8016534:	6823      	ldr	r3, [r4, #0]
 8016536:	a901      	add	r1, sp, #4
 8016538:	4620      	mov	r0, r4
 801653a:	691b      	ldr	r3, [r3, #16]
 801653c:	4798      	blx	r3
 801653e:	1e6b      	subs	r3, r5, #1
 8016540:	2b01      	cmp	r3, #1
 8016542:	d8c8      	bhi.n	80164d6 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 8016544:	4622      	mov	r2, r4
 8016546:	ab01      	add	r3, sp, #4
 8016548:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 801654c:	6851      	ldr	r1, [r2, #4]
 801654e:	c303      	stmia	r3!, {r0, r1}
 8016550:	2300      	movs	r3, #0
 8016552:	a901      	add	r1, sp, #4
 8016554:	4620      	mov	r0, r4
 8016556:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801655a:	6823      	ldr	r3, [r4, #0]
 801655c:	691b      	ldr	r3, [r3, #16]
 801655e:	4798      	blx	r3
 8016560:	2d02      	cmp	r5, #2
 8016562:	d1b8      	bne.n	80164d6 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 8016564:	2301      	movs	r3, #1
 8016566:	e7b4      	b.n	80164d2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x16>
 8016568:	2d01      	cmp	r5, #1
 801656a:	d1e8      	bne.n	801653e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801656c:	6833      	ldr	r3, [r6, #0]
 801656e:	4630      	mov	r0, r6
 8016570:	68db      	ldr	r3, [r3, #12]
 8016572:	4798      	blx	r3
 8016574:	2800      	cmp	r0, #0
 8016576:	d0e5      	beq.n	8016544 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 8016578:	6833      	ldr	r3, [r6, #0]
 801657a:	4630      	mov	r0, r6
 801657c:	689b      	ldr	r3, [r3, #8]
 801657e:	4798      	blx	r3
 8016580:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016582:	2800      	cmp	r0, #0
 8016584:	d0de      	beq.n	8016544 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 8016586:	6803      	ldr	r3, [r0, #0]
 8016588:	4639      	mov	r1, r7
 801658a:	689b      	ldr	r3, [r3, #8]
 801658c:	4798      	blx	r3
 801658e:	e7d6      	b.n	801653e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8016590:	4621      	mov	r1, r4
 8016592:	464b      	mov	r3, r9
 8016594:	4642      	mov	r2, r8
 8016596:	a803      	add	r0, sp, #12
 8016598:	f7ff fe4e 	bl	8016238 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>
 801659c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80165a0:	b985      	cbnz	r5, 80165c4 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x108>
 80165a2:	2900      	cmp	r1, #0
 80165a4:	d0cb      	beq.n	801653e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80165a6:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 80165aa:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80165ae:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80165b2:	4630      	mov	r0, r6
 80165b4:	f7fd f85b 	bl	801366e <_ZN8touchgfx8Drawable5setXYEss>
 80165b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80165bc:	a90a      	add	r1, sp, #40	; 0x28
 80165be:	f821 3d28 	strh.w	r3, [r1, #-40]!
 80165c2:	e7ab      	b.n	801651c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x60>
 80165c4:	2d01      	cmp	r5, #1
 80165c6:	d1ba      	bne.n	801653e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80165c8:	2900      	cmp	r1, #0
 80165ca:	d0b8      	beq.n	801653e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80165cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d0b5      	beq.n	801653e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80165d2:	4620      	mov	r0, r4
 80165d4:	f7ff fe8a 	bl	80162ec <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 80165d8:	4607      	mov	r7, r0
 80165da:	2800      	cmp	r0, #0
 80165dc:	d0af      	beq.n	801653e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80165de:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80165e0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80165e2:	3b01      	subs	r3, #1
 80165e4:	429a      	cmp	r2, r3
 80165e6:	daaa      	bge.n	801653e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80165e8:	f104 0864 	add.w	r8, r4, #100	; 0x64
 80165ec:	4640      	mov	r0, r8
 80165ee:	f7ff fb0b 	bl	8015c08 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 80165f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80165f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80165f6:	4640      	mov	r0, r8
 80165f8:	1c59      	adds	r1, r3, #1
 80165fa:	86e1      	strh	r1, [r4, #54]	; 0x36
 80165fc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8016600:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016602:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016604:	f823 6012 	strh.w	r6, [r3, r2, lsl #1]
 8016608:	f7ff fafe 	bl	8015c08 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 801660c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801660e:	2800      	cmp	r0, #0
 8016610:	d1b9      	bne.n	8016586 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xca>
 8016612:	e794      	b.n	801653e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>

08016614 <_ZN8touchgfx8Keyboard17setBufferPositionEt>:
 8016614:	86c1      	strh	r1, [r0, #54]	; 0x36
 8016616:	3064      	adds	r0, #100	; 0x64
 8016618:	f002 bc60 	b.w	8018edc <_ZNK8touchgfx8Drawable10invalidateEv>

0801661c <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>:
 801661c:	6803      	ldr	r3, [r0, #0]
 801661e:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
 8016622:	695b      	ldr	r3, [r3, #20]
 8016624:	4718      	bx	r3

08016626 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016626:	b510      	push	{r4, lr}
 8016628:	6803      	ldr	r3, [r0, #0]
 801662a:	460c      	mov	r4, r1
 801662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801662e:	4798      	blx	r3
 8016630:	1b03      	subs	r3, r0, r4
 8016632:	4258      	negs	r0, r3
 8016634:	4158      	adcs	r0, r3
 8016636:	bd10      	pop	{r4, pc}

08016638 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8016638:	4b01      	ldr	r3, [pc, #4]	; (8016640 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801663a:	6019      	str	r1, [r3, #0]
 801663c:	4770      	bx	lr
 801663e:	bf00      	nop
 8016640:	2400feec 	.word	0x2400feec

08016644 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016648:	4696      	mov	lr, r2
 801664a:	b097      	sub	sp, #92	; 0x5c
 801664c:	4605      	mov	r5, r0
 801664e:	4614      	mov	r4, r2
 8016650:	460e      	mov	r6, r1
 8016652:	461f      	mov	r7, r3
 8016654:	f10d 0c1c 	add.w	ip, sp, #28
 8016658:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801665c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8016660:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8016664:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016668:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801666c:	f8de 3000 	ldr.w	r3, [lr]
 8016670:	f104 0e14 	add.w	lr, r4, #20
 8016674:	f8cc 3000 	str.w	r3, [ip]
 8016678:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801667c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016680:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016684:	f8de 3000 	ldr.w	r3, [lr]
 8016688:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801668c:	f8cc 3000 	str.w	r3, [ip]
 8016690:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8016694:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016698:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801669c:	f8de 3000 	ldr.w	r3, [lr]
 80166a0:	4631      	mov	r1, r6
 80166a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80166a4:	4628      	mov	r0, r5
 80166a6:	f8cc 3000 	str.w	r3, [ip]
 80166aa:	682b      	ldr	r3, [r5, #0]
 80166ac:	9201      	str	r2, [sp, #4]
 80166ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80166b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80166b4:	9200      	str	r2, [sp, #0]
 80166b6:	aa07      	add	r2, sp, #28
 80166b8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80166bc:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80166c0:	463b      	mov	r3, r7
 80166c2:	47d8      	blx	fp
 80166c4:	46a6      	mov	lr, r4
 80166c6:	f10d 0c1c 	add.w	ip, sp, #28
 80166ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80166ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166d2:	f8de 3000 	ldr.w	r3, [lr]
 80166d6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80166da:	343c      	adds	r4, #60	; 0x3c
 80166dc:	f8cc 3000 	str.w	r3, [ip]
 80166e0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80166e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80166e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166ec:	f8de 3000 	ldr.w	r3, [lr]
 80166f0:	f8cc 3000 	str.w	r3, [ip]
 80166f4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80166f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166fe:	6823      	ldr	r3, [r4, #0]
 8016700:	4631      	mov	r1, r6
 8016702:	4628      	mov	r0, r5
 8016704:	f8cc 3000 	str.w	r3, [ip]
 8016708:	682b      	ldr	r3, [r5, #0]
 801670a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801670e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016710:	f8cd 8008 	str.w	r8, [sp, #8]
 8016714:	9201      	str	r2, [sp, #4]
 8016716:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016718:	9200      	str	r2, [sp, #0]
 801671a:	aa07      	add	r2, sp, #28
 801671c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801671e:	463b      	mov	r3, r7
 8016720:	47a0      	blx	r4
 8016722:	b017      	add	sp, #92	; 0x5c
 8016724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016728 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016728:	2000      	movs	r0, #0
 801672a:	4770      	bx	lr

0801672c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016730:	b08d      	sub	sp, #52	; 0x34
 8016732:	4688      	mov	r8, r1
 8016734:	f8d3 c000 	ldr.w	ip, [r3]
 8016738:	9916      	ldr	r1, [sp, #88]	; 0x58
 801673a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801673e:	680f      	ldr	r7, [r1, #0]
 8016740:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8016744:	eba7 070c 	sub.w	r7, r7, ip
 8016748:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801674c:	edd3 6a07 	vldr	s13, [r3, #28]
 8016750:	42bc      	cmp	r4, r7
 8016752:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016754:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8016758:	bfa8      	it	ge
 801675a:	463c      	movge	r4, r7
 801675c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016760:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016764:	ee07 4a90 	vmov	s15, r4
 8016768:	eb09 0e0c 	add.w	lr, r9, ip
 801676c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8016770:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016774:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8016778:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801677c:	4571      	cmp	r1, lr
 801677e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016782:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016786:	ee25 5a27 	vmul.f32	s10, s10, s15
 801678a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801678e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016792:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016796:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801679a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801679e:	ee61 1a87 	vmul.f32	s3, s3, s14
 80167a2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80167a6:	f340 808c 	ble.w	80168c2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80167aa:	eba1 060e 	sub.w	r6, r1, lr
 80167ae:	fb96 f5f4 	sdiv	r5, r6, r4
 80167b2:	ee07 5a10 	vmov	s14, r5
 80167b6:	2d00      	cmp	r5, #0
 80167b8:	fb04 6615 	mls	r6, r4, r5, r6
 80167bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80167c0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80167c4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80167c8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80167cc:	dd12      	ble.n	80167f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80167ce:	ee70 6a44 	vsub.f32	s13, s0, s8
 80167d2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80167d6:	ee31 2a45 	vsub.f32	s4, s2, s10
 80167da:	eef5 6a40 	vcmp.f32	s13, #0.0
 80167de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167e2:	bf14      	ite	ne
 80167e4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80167e8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80167ec:	ee61 1a87 	vmul.f32	s3, s3, s14
 80167f0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80167f4:	fb05 f204 	mul.w	r2, r5, r4
 80167f8:	1abf      	subs	r7, r7, r2
 80167fa:	4494      	add	ip, r2
 80167fc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016800:	4411      	add	r1, r2
 8016802:	eb09 020c 	add.w	r2, r9, ip
 8016806:	b209      	sxth	r1, r1
 8016808:	443a      	add	r2, r7
 801680a:	428a      	cmp	r2, r1
 801680c:	bfc4      	itt	gt
 801680e:	eba1 0209 	subgt.w	r2, r1, r9
 8016812:	eba2 070c 	subgt.w	r7, r2, ip
 8016816:	2f00      	cmp	r7, #0
 8016818:	dd50      	ble.n	80168bc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801681a:	fb97 f1f4 	sdiv	r1, r7, r4
 801681e:	fb04 7211 	mls	r2, r4, r1, r7
 8016822:	b90a      	cbnz	r2, 8016828 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016824:	3901      	subs	r1, #1
 8016826:	4622      	mov	r2, r4
 8016828:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801682c:	6840      	ldr	r0, [r0, #4]
 801682e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016832:	44b6      	add	lr, r6
 8016834:	f8d0 a000 	ldr.w	sl, [r0]
 8016838:	2900      	cmp	r1, #0
 801683a:	bfcc      	ite	gt
 801683c:	46a1      	movgt	r9, r4
 801683e:	4691      	movle	r9, r2
 8016840:	900b      	str	r0, [sp, #44]	; 0x2c
 8016842:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016844:	fb04 e505 	mla	r5, r4, r5, lr
 8016848:	eef0 6a42 	vmov.f32	s13, s4
 801684c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8016850:	9008      	str	r0, [sp, #32]
 8016852:	eeb0 7a61 	vmov.f32	s14, s3
 8016856:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016858:	695b      	ldr	r3, [r3, #20]
 801685a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801685e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016862:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016866:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016868:	445b      	add	r3, fp
 801686a:	9307      	str	r3, [sp, #28]
 801686c:	ee16 3a90 	vmov	r3, s13
 8016870:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016874:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016878:	ee21 3a23 	vmul.f32	s6, s2, s7
 801687c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016880:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016884:	ee17 7a90 	vmov	r7, s15
 8016888:	ee73 7a42 	vsub.f32	s15, s6, s4
 801688c:	fb97 f7f4 	sdiv	r7, r7, r4
 8016890:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016894:	ee17 ca90 	vmov	ip, s15
 8016898:	fb9c fcf4 	sdiv	ip, ip, r4
 801689c:	fb0c 3306 	mla	r3, ip, r6, r3
 80168a0:	9302      	str	r3, [sp, #8]
 80168a2:	ee17 3a10 	vmov	r3, s14
 80168a6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80168aa:	fb07 3706 	mla	r7, r7, r6, r3
 80168ae:	eba9 0306 	sub.w	r3, r9, r6
 80168b2:	e9cd 4700 	strd	r4, r7, [sp]
 80168b6:	f8da 4008 	ldr.w	r4, [sl, #8]
 80168ba:	47a0      	blx	r4
 80168bc:	b00d      	add	sp, #52	; 0x34
 80168be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168c2:	2500      	movs	r5, #0
 80168c4:	462e      	mov	r6, r5
 80168c6:	e799      	b.n	80167fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080168c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80168c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168cc:	b0db      	sub	sp, #364	; 0x16c
 80168ce:	461d      	mov	r5, r3
 80168d0:	4614      	mov	r4, r2
 80168d2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80168d6:	910f      	str	r1, [sp, #60]	; 0x3c
 80168d8:	4629      	mov	r1, r5
 80168da:	930a      	str	r3, [sp, #40]	; 0x28
 80168dc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80168e0:	9009      	str	r0, [sp, #36]	; 0x24
 80168e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80168e4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80168e8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80168ec:	9310      	str	r3, [sp, #64]	; 0x40
 80168ee:	6803      	ldr	r3, [r0, #0]
 80168f0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80168f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80168f6:	47b8      	blx	r7
 80168f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168fa:	6058      	str	r0, [r3, #4]
 80168fc:	2800      	cmp	r0, #0
 80168fe:	f000 83a1 	beq.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016902:	682b      	ldr	r3, [r5, #0]
 8016904:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016908:	ed94 7a02 	vldr	s14, [r4, #8]
 801690c:	9314      	str	r3, [sp, #80]	; 0x50
 801690e:	686b      	ldr	r3, [r5, #4]
 8016910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016914:	9315      	str	r3, [sp, #84]	; 0x54
 8016916:	4bc1      	ldr	r3, [pc, #772]	; (8016c1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016918:	7819      	ldrb	r1, [r3, #0]
 801691a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801691e:	2900      	cmp	r1, #0
 8016920:	bf16      	itet	ne
 8016922:	4619      	movne	r1, r3
 8016924:	4611      	moveq	r1, r2
 8016926:	4613      	movne	r3, r2
 8016928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801692c:	9116      	str	r1, [sp, #88]	; 0x58
 801692e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8016932:	f240 8387 	bls.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016936:	ed94 7a07 	vldr	s14, [r4, #28]
 801693a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801693e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016942:	f240 837f 	bls.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016946:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801694a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801694e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016952:	f240 8377 	bls.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016956:	6822      	ldr	r2, [r4, #0]
 8016958:	4bb1      	ldr	r3, [pc, #708]	; (8016c20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801695a:	429a      	cmp	r2, r3
 801695c:	f2c0 8372 	blt.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016960:	49b0      	ldr	r1, [pc, #704]	; (8016c24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016962:	6963      	ldr	r3, [r4, #20]
 8016964:	428a      	cmp	r2, r1
 8016966:	f300 836d 	bgt.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801696a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801696e:	48ae      	ldr	r0, [pc, #696]	; (8016c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016970:	33ff      	adds	r3, #255	; 0xff
 8016972:	4283      	cmp	r3, r0
 8016974:	f200 8366 	bhi.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016978:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801697a:	4dac      	ldr	r5, [pc, #688]	; (8016c2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801697c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8016980:	33ff      	adds	r3, #255	; 0xff
 8016982:	42ab      	cmp	r3, r5
 8016984:	f200 835e 	bhi.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016988:	6862      	ldr	r2, [r4, #4]
 801698a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801698e:	33ff      	adds	r3, #255	; 0xff
 8016990:	4283      	cmp	r3, r0
 8016992:	f200 8357 	bhi.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016996:	69a1      	ldr	r1, [r4, #24]
 8016998:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801699c:	33ff      	adds	r3, #255	; 0xff
 801699e:	4283      	cmp	r3, r0
 80169a0:	f200 8350 	bhi.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80169a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80169a6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80169aa:	30ff      	adds	r0, #255	; 0xff
 80169ac:	42a8      	cmp	r0, r5
 80169ae:	f200 8349 	bhi.w	8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80169b2:	428a      	cmp	r2, r1
 80169b4:	f280 8110 	bge.w	8016bd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80169b8:	429a      	cmp	r2, r3
 80169ba:	f300 8119 	bgt.w	8016bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80169be:	4299      	cmp	r1, r3
 80169c0:	f280 811d 	bge.w	8016bfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80169c4:	2502      	movs	r5, #2
 80169c6:	2701      	movs	r7, #1
 80169c8:	46a9      	mov	r9, r5
 80169ca:	46b8      	mov	r8, r7
 80169cc:	f04f 0a00 	mov.w	sl, #0
 80169d0:	4621      	mov	r1, r4
 80169d2:	a849      	add	r0, sp, #292	; 0x124
 80169d4:	f003 fc40 	bl	801a258 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80169d8:	4622      	mov	r2, r4
 80169da:	4653      	mov	r3, sl
 80169dc:	a949      	add	r1, sp, #292	; 0x124
 80169de:	f8cd 9000 	str.w	r9, [sp]
 80169e2:	a819      	add	r0, sp, #100	; 0x64
 80169e4:	f003 fd68 	bl	801a4b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80169e8:	4622      	mov	r2, r4
 80169ea:	4653      	mov	r3, sl
 80169ec:	a949      	add	r1, sp, #292	; 0x124
 80169ee:	f8cd 8000 	str.w	r8, [sp]
 80169f2:	a829      	add	r0, sp, #164	; 0xa4
 80169f4:	f003 fd60 	bl	801a4b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80169f8:	4643      	mov	r3, r8
 80169fa:	4622      	mov	r2, r4
 80169fc:	a949      	add	r1, sp, #292	; 0x124
 80169fe:	f8cd 9000 	str.w	r9, [sp]
 8016a02:	a839      	add	r0, sp, #228	; 0xe4
 8016a04:	f003 fd58 	bl	801a4b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016a08:	42af      	cmp	r7, r5
 8016a0a:	af12      	add	r7, sp, #72	; 0x48
 8016a0c:	bfb7      	itett	lt
 8016a0e:	2300      	movlt	r3, #0
 8016a10:	2301      	movge	r3, #1
 8016a12:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016a14:	ac19      	addlt	r4, sp, #100	; 0x64
 8016a16:	bfb1      	iteee	lt
 8016a18:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016a1a:	ad19      	addge	r5, sp, #100	; 0x64
 8016a1c:	930e      	strge	r3, [sp, #56]	; 0x38
 8016a1e:	ac29      	addge	r4, sp, #164	; 0xa4
 8016a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016a26:	e887 0003 	stmia.w	r7, {r0, r1}
 8016a2a:	b928      	cbnz	r0, 8016a38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016a2c:	4b80      	ldr	r3, [pc, #512]	; (8016c30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016a2e:	6818      	ldr	r0, [r3, #0]
 8016a30:	6803      	ldr	r3, [r0, #0]
 8016a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a34:	4798      	blx	r3
 8016a36:	6038      	str	r0, [r7, #0]
 8016a38:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016a3a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016a3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016a42:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8016a44:	930c      	str	r3, [sp, #48]	; 0x30
 8016a46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016a48:	6963      	ldr	r3, [r4, #20]
 8016a4a:	440b      	add	r3, r1
 8016a4c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016a50:	4408      	add	r0, r1
 8016a52:	b200      	sxth	r0, r0
 8016a54:	4283      	cmp	r3, r0
 8016a56:	900d      	str	r0, [sp, #52]	; 0x34
 8016a58:	f280 80dd 	bge.w	8016c16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016a5c:	428b      	cmp	r3, r1
 8016a5e:	da08      	bge.n	8016a72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016a60:	2a00      	cmp	r2, #0
 8016a62:	dd06      	ble.n	8016a72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016a64:	1acb      	subs	r3, r1, r3
 8016a66:	429a      	cmp	r2, r3
 8016a68:	f2c0 80e4 	blt.w	8016c34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	f300 80e2 	bgt.w	8016c36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016a72:	6967      	ldr	r7, [r4, #20]
 8016a74:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a7a:	443b      	add	r3, r7
 8016a7c:	461f      	mov	r7, r3
 8016a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a80:	1bdf      	subs	r7, r3, r7
 8016a82:	4297      	cmp	r7, r2
 8016a84:	bfa8      	it	ge
 8016a86:	4617      	movge	r7, r2
 8016a88:	2f00      	cmp	r7, #0
 8016a8a:	f340 8166 	ble.w	8016d5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016a8e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016a90:	6829      	ldr	r1, [r5, #0]
 8016a92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016a96:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016a9a:	4411      	add	r1, r2
 8016a9c:	6820      	ldr	r0, [r4, #0]
 8016a9e:	4299      	cmp	r1, r3
 8016aa0:	dd1a      	ble.n	8016ad8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016aa2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016aa6:	4402      	add	r2, r0
 8016aa8:	440b      	add	r3, r1
 8016aaa:	b21b      	sxth	r3, r3
 8016aac:	429a      	cmp	r2, r3
 8016aae:	dc13      	bgt.n	8016ad8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016ab0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016ab2:	a912      	add	r1, sp, #72	; 0x48
 8016ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	9206      	str	r2, [sp, #24]
 8016abc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016abe:	9500      	str	r5, [sp, #0]
 8016ac0:	9205      	str	r2, [sp, #20]
 8016ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ac4:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016ac8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016aca:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016ace:	aa49      	add	r2, sp, #292	; 0x124
 8016ad0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016ad4:	4623      	mov	r3, r4
 8016ad6:	47c8      	blx	r9
 8016ad8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016adc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016ae0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ae8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016aec:	68a1      	ldr	r1, [r4, #8]
 8016aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016af2:	ed94 6a08 	vldr	s12, [r4, #32]
 8016af6:	edd4 6a07 	vldr	s13, [r4, #28]
 8016afa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016afe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016b02:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016b06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016b0a:	edc4 6a07 	vstr	s13, [r4, #28]
 8016b0e:	441a      	add	r2, r3
 8016b10:	6963      	ldr	r3, [r4, #20]
 8016b12:	3301      	adds	r3, #1
 8016b14:	6022      	str	r2, [r4, #0]
 8016b16:	6163      	str	r3, [r4, #20]
 8016b18:	69a3      	ldr	r3, [r4, #24]
 8016b1a:	3b01      	subs	r3, #1
 8016b1c:	61a3      	str	r3, [r4, #24]
 8016b1e:	6923      	ldr	r3, [r4, #16]
 8016b20:	440b      	add	r3, r1
 8016b22:	68e1      	ldr	r1, [r4, #12]
 8016b24:	428b      	cmp	r3, r1
 8016b26:	6123      	str	r3, [r4, #16]
 8016b28:	db15      	blt.n	8016b56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016b2a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016b2e:	3201      	adds	r2, #1
 8016b30:	1a5b      	subs	r3, r3, r1
 8016b32:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016b36:	6022      	str	r2, [r4, #0]
 8016b38:	6123      	str	r3, [r4, #16]
 8016b3a:	edc4 6a07 	vstr	s13, [r4, #28]
 8016b3e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016b42:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016b46:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016b4a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016b52:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016b56:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016b5a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016b5e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016b66:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016b6a:	68a9      	ldr	r1, [r5, #8]
 8016b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b70:	ed95 6a08 	vldr	s12, [r5, #32]
 8016b74:	edd5 6a07 	vldr	s13, [r5, #28]
 8016b78:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016b7c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016b80:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016b84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016b88:	edc5 6a07 	vstr	s13, [r5, #28]
 8016b8c:	441a      	add	r2, r3
 8016b8e:	696b      	ldr	r3, [r5, #20]
 8016b90:	3301      	adds	r3, #1
 8016b92:	602a      	str	r2, [r5, #0]
 8016b94:	616b      	str	r3, [r5, #20]
 8016b96:	69ab      	ldr	r3, [r5, #24]
 8016b98:	3b01      	subs	r3, #1
 8016b9a:	61ab      	str	r3, [r5, #24]
 8016b9c:	692b      	ldr	r3, [r5, #16]
 8016b9e:	440b      	add	r3, r1
 8016ba0:	68e9      	ldr	r1, [r5, #12]
 8016ba2:	428b      	cmp	r3, r1
 8016ba4:	612b      	str	r3, [r5, #16]
 8016ba6:	db15      	blt.n	8016bd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8016ba8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016bac:	3201      	adds	r2, #1
 8016bae:	1a5b      	subs	r3, r3, r1
 8016bb0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016bb4:	602a      	str	r2, [r5, #0]
 8016bb6:	612b      	str	r3, [r5, #16]
 8016bb8:	edc5 6a07 	vstr	s13, [r5, #28]
 8016bbc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016bc0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016bc4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016bc8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016bd0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016bd4:	3f01      	subs	r7, #1
 8016bd6:	e757      	b.n	8016a88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8016bd8:	4299      	cmp	r1, r3
 8016bda:	dc13      	bgt.n	8016c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	da14      	bge.n	8016c0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016be0:	2502      	movs	r5, #2
 8016be2:	2703      	movs	r7, #3
 8016be4:	f04f 0800 	mov.w	r8, #0
 8016be8:	46a9      	mov	r9, r5
 8016bea:	f04f 0a01 	mov.w	sl, #1
 8016bee:	e6ef      	b.n	80169d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016bf0:	2501      	movs	r5, #1
 8016bf2:	2700      	movs	r7, #0
 8016bf4:	46a9      	mov	r9, r5
 8016bf6:	46b8      	mov	r8, r7
 8016bf8:	f04f 0a02 	mov.w	sl, #2
 8016bfc:	e6e8      	b.n	80169d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016bfe:	2501      	movs	r5, #1
 8016c00:	2702      	movs	r7, #2
 8016c02:	e6e1      	b.n	80169c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016c04:	2500      	movs	r5, #0
 8016c06:	2701      	movs	r7, #1
 8016c08:	e7f4      	b.n	8016bf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8016c0a:	2702      	movs	r7, #2
 8016c0c:	2503      	movs	r5, #3
 8016c0e:	f04f 0900 	mov.w	r9, #0
 8016c12:	46b8      	mov	r8, r7
 8016c14:	e7e9      	b.n	8016bea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8016c16:	4613      	mov	r3, r2
 8016c18:	e728      	b.n	8016a6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8016c1a:	bf00      	nop
 8016c1c:	2400fedc 	.word	0x2400fedc
 8016c20:	fffd8f01 	.word	0xfffd8f01
 8016c24:	00027100 	.word	0x00027100
 8016c28:	0004e1ff 	.word	0x0004e1ff
 8016c2c:	0004e1fe 	.word	0x0004e1fe
 8016c30:	2400fee4 	.word	0x2400fee4
 8016c34:	4613      	mov	r3, r2
 8016c36:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016c38:	469e      	mov	lr, r3
 8016c3a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8016c3c:	469c      	mov	ip, r3
 8016c3e:	9111      	str	r1, [sp, #68]	; 0x44
 8016c40:	f04f 0900 	mov.w	r9, #0
 8016c44:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8016c48:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8016c4c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8016c50:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8016c54:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8016c58:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8016c5c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8016c60:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8016c64:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8016c68:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8016c6c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8016c70:	f1bc 0f00 	cmp.w	ip, #0
 8016c74:	d147      	bne.n	8016d06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8016c76:	eb03 0c07 	add.w	ip, r3, r7
 8016c7a:	1ad7      	subs	r7, r2, r3
 8016c7c:	f1b9 0f00 	cmp.w	r9, #0
 8016c80:	d009      	beq.n	8016c96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8016c82:	9029      	str	r0, [sp, #164]	; 0xa4
 8016c84:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8016c88:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8016c8c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8016c90:	912d      	str	r1, [sp, #180]	; 0xb4
 8016c92:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8016c96:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016c98:	f04f 0800 	mov.w	r8, #0
 8016c9c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016ca0:	9111      	str	r1, [sp, #68]	; 0x44
 8016ca2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016ca6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016caa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016cae:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016cb2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016cb6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016cba:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016cbe:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016cc2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016cc6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016cca:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016cce:	f1be 0f00 	cmp.w	lr, #0
 8016cd2:	d031      	beq.n	8016d38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016cd4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016cd6:	4450      	add	r0, sl
 8016cd8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016cdc:	4431      	add	r1, r6
 8016cde:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016ce2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016ce6:	4549      	cmp	r1, r9
 8016ce8:	db08      	blt.n	8016cfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8016cea:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016cee:	3001      	adds	r0, #1
 8016cf0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016cf4:	eba1 0109 	sub.w	r1, r1, r9
 8016cf8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016cfc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016d00:	f04f 0801 	mov.w	r8, #1
 8016d04:	e7e3      	b.n	8016cce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8016d06:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016d08:	4450      	add	r0, sl
 8016d0a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016d0e:	4431      	add	r1, r6
 8016d10:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016d14:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016d18:	4541      	cmp	r1, r8
 8016d1a:	db08      	blt.n	8016d2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016d1c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016d20:	3001      	adds	r0, #1
 8016d22:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016d26:	eba1 0108 	sub.w	r1, r1, r8
 8016d2a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016d2e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016d32:	f04f 0901 	mov.w	r9, #1
 8016d36:	e79b      	b.n	8016c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8016d38:	449c      	add	ip, r3
 8016d3a:	1aff      	subs	r7, r7, r3
 8016d3c:	f1b8 0f00 	cmp.w	r8, #0
 8016d40:	d009      	beq.n	8016d56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8016d42:	9019      	str	r0, [sp, #100]	; 0x64
 8016d44:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016d48:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016d4c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016d50:	911d      	str	r1, [sp, #116]	; 0x74
 8016d52:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016d56:	1ad2      	subs	r2, r2, r3
 8016d58:	e68b      	b.n	8016a72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d5c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	f000 80d1 	beq.w	8016f06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8016d64:	ad19      	add	r5, sp, #100	; 0x64
 8016d66:	ac39      	add	r4, sp, #228	; 0xe4
 8016d68:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016d6a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016d6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d72:	930c      	str	r3, [sp, #48]	; 0x30
 8016d74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d76:	6963      	ldr	r3, [r4, #20]
 8016d78:	440b      	add	r3, r1
 8016d7a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016d7e:	4408      	add	r0, r1
 8016d80:	b200      	sxth	r0, r0
 8016d82:	4283      	cmp	r3, r0
 8016d84:	900d      	str	r0, [sp, #52]	; 0x34
 8016d86:	f280 80c1 	bge.w	8016f0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8016d8a:	428b      	cmp	r3, r1
 8016d8c:	da08      	bge.n	8016da0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016d8e:	2a00      	cmp	r2, #0
 8016d90:	dd06      	ble.n	8016da0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016d92:	1acb      	subs	r3, r1, r3
 8016d94:	429a      	cmp	r2, r3
 8016d96:	f2c0 80bb 	blt.w	8016f10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f300 80b9 	bgt.w	8016f12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016da0:	6967      	ldr	r7, [r4, #20]
 8016da2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8016da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016da8:	443b      	add	r3, r7
 8016daa:	461f      	mov	r7, r3
 8016dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016dae:	1bdf      	subs	r7, r3, r7
 8016db0:	4297      	cmp	r7, r2
 8016db2:	bfa8      	it	ge
 8016db4:	4617      	movge	r7, r2
 8016db6:	2f00      	cmp	r7, #0
 8016db8:	f340 813c 	ble.w	8017034 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016dbc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016dbe:	6829      	ldr	r1, [r5, #0]
 8016dc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016dc4:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016dc8:	4411      	add	r1, r2
 8016dca:	6820      	ldr	r0, [r4, #0]
 8016dcc:	4299      	cmp	r1, r3
 8016dce:	dd1a      	ble.n	8016e06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016dd0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016dd4:	4402      	add	r2, r0
 8016dd6:	440b      	add	r3, r1
 8016dd8:	b21b      	sxth	r3, r3
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	dc13      	bgt.n	8016e06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016dde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016de0:	a912      	add	r1, sp, #72	; 0x48
 8016de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	9206      	str	r2, [sp, #24]
 8016dea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016dec:	9500      	str	r5, [sp, #0]
 8016dee:	9205      	str	r2, [sp, #20]
 8016df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016df2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016df6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016df8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016dfc:	aa49      	add	r2, sp, #292	; 0x124
 8016dfe:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016e02:	4623      	mov	r3, r4
 8016e04:	47c8      	blx	r9
 8016e06:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016e0a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016e0e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016e12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e16:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016e1a:	68a1      	ldr	r1, [r4, #8]
 8016e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e20:	ed94 6a08 	vldr	s12, [r4, #32]
 8016e24:	edd4 6a07 	vldr	s13, [r4, #28]
 8016e28:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016e2c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016e30:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016e34:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016e38:	edc4 6a07 	vstr	s13, [r4, #28]
 8016e3c:	441a      	add	r2, r3
 8016e3e:	6963      	ldr	r3, [r4, #20]
 8016e40:	3301      	adds	r3, #1
 8016e42:	6022      	str	r2, [r4, #0]
 8016e44:	6163      	str	r3, [r4, #20]
 8016e46:	69a3      	ldr	r3, [r4, #24]
 8016e48:	3b01      	subs	r3, #1
 8016e4a:	61a3      	str	r3, [r4, #24]
 8016e4c:	6923      	ldr	r3, [r4, #16]
 8016e4e:	440b      	add	r3, r1
 8016e50:	68e1      	ldr	r1, [r4, #12]
 8016e52:	428b      	cmp	r3, r1
 8016e54:	6123      	str	r3, [r4, #16]
 8016e56:	db15      	blt.n	8016e84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016e58:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016e5c:	3201      	adds	r2, #1
 8016e5e:	1a5b      	subs	r3, r3, r1
 8016e60:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016e64:	6022      	str	r2, [r4, #0]
 8016e66:	6123      	str	r3, [r4, #16]
 8016e68:	edc4 6a07 	vstr	s13, [r4, #28]
 8016e6c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016e70:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016e74:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016e78:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e80:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016e84:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8016e88:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8016e8c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8016e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e94:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8016e98:	68a9      	ldr	r1, [r5, #8]
 8016e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e9e:	ed95 6a08 	vldr	s12, [r5, #32]
 8016ea2:	edd5 6a07 	vldr	s13, [r5, #28]
 8016ea6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016eaa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016eae:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016eb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016eb6:	edc5 6a07 	vstr	s13, [r5, #28]
 8016eba:	441a      	add	r2, r3
 8016ebc:	696b      	ldr	r3, [r5, #20]
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	602a      	str	r2, [r5, #0]
 8016ec2:	616b      	str	r3, [r5, #20]
 8016ec4:	69ab      	ldr	r3, [r5, #24]
 8016ec6:	3b01      	subs	r3, #1
 8016ec8:	61ab      	str	r3, [r5, #24]
 8016eca:	692b      	ldr	r3, [r5, #16]
 8016ecc:	440b      	add	r3, r1
 8016ece:	68e9      	ldr	r1, [r5, #12]
 8016ed0:	428b      	cmp	r3, r1
 8016ed2:	612b      	str	r3, [r5, #16]
 8016ed4:	db15      	blt.n	8016f02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016ed6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016eda:	3201      	adds	r2, #1
 8016edc:	1a5b      	subs	r3, r3, r1
 8016ede:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016ee2:	602a      	str	r2, [r5, #0]
 8016ee4:	612b      	str	r3, [r5, #16]
 8016ee6:	edc5 6a07 	vstr	s13, [r5, #28]
 8016eea:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016eee:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016ef2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016ef6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016efe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016f02:	3f01      	subs	r7, #1
 8016f04:	e757      	b.n	8016db6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016f06:	ad39      	add	r5, sp, #228	; 0xe4
 8016f08:	ac19      	add	r4, sp, #100	; 0x64
 8016f0a:	e72d      	b.n	8016d68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016f0c:	4613      	mov	r3, r2
 8016f0e:	e744      	b.n	8016d9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016f10:	4613      	mov	r3, r2
 8016f12:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016f14:	469e      	mov	lr, r3
 8016f16:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8016f1a:	461f      	mov	r7, r3
 8016f1c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016f20:	f04f 0900 	mov.w	r9, #0
 8016f24:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8016f28:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8016f2c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016f30:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016f34:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8016f38:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016f3a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8016f3e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016f42:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016f46:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8016f4a:	960e      	str	r6, [sp, #56]	; 0x38
 8016f4c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8016f50:	2f00      	cmp	r7, #0
 8016f52:	d146      	bne.n	8016fe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016f54:	449c      	add	ip, r3
 8016f56:	1ad7      	subs	r7, r2, r3
 8016f58:	f1b9 0f00 	cmp.w	r9, #0
 8016f5c:	d009      	beq.n	8016f72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016f5e:	9039      	str	r0, [sp, #228]	; 0xe4
 8016f60:	913d      	str	r1, [sp, #244]	; 0xf4
 8016f62:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8016f66:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8016f6a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8016f6e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8016f72:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016f74:	f04f 0800 	mov.w	r8, #0
 8016f78:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016f7c:	910e      	str	r1, [sp, #56]	; 0x38
 8016f7e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016f82:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016f86:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016f8a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016f8e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016f92:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016f96:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016f9a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016f9e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016fa2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016fa6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016faa:	f1be 0f00 	cmp.w	lr, #0
 8016fae:	d030      	beq.n	8017012 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016fb0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016fb2:	4450      	add	r0, sl
 8016fb4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016fb8:	4431      	add	r1, r6
 8016fba:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016fbe:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016fc2:	4549      	cmp	r1, r9
 8016fc4:	db08      	blt.n	8016fd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016fc6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016fca:	3001      	adds	r0, #1
 8016fcc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016fd0:	eba1 0109 	sub.w	r1, r1, r9
 8016fd4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016fd8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016fdc:	f04f 0801 	mov.w	r8, #1
 8016fe0:	e7e3      	b.n	8016faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016fe2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016fe4:	4450      	add	r0, sl
 8016fe6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016fea:	4431      	add	r1, r6
 8016fec:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016ff0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016ff4:	4541      	cmp	r1, r8
 8016ff6:	db08      	blt.n	801700a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016ff8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016ffc:	3001      	adds	r0, #1
 8016ffe:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017002:	eba1 0108 	sub.w	r1, r1, r8
 8017006:	ee77 7a86 	vadd.f32	s15, s15, s12
 801700a:	3f01      	subs	r7, #1
 801700c:	f04f 0901 	mov.w	r9, #1
 8017010:	e79e      	b.n	8016f50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017012:	449c      	add	ip, r3
 8017014:	1aff      	subs	r7, r7, r3
 8017016:	f1b8 0f00 	cmp.w	r8, #0
 801701a:	d009      	beq.n	8017030 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801701c:	9019      	str	r0, [sp, #100]	; 0x64
 801701e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017022:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017026:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801702a:	911d      	str	r1, [sp, #116]	; 0x74
 801702c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017030:	1ad2      	subs	r2, r2, r3
 8017032:	e6b5      	b.n	8016da0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	b923      	cbnz	r3, 8017044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801703a:	4b04      	ldr	r3, [pc, #16]	; (801704c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801703c:	6818      	ldr	r0, [r3, #0]
 801703e:	6803      	ldr	r3, [r0, #0]
 8017040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017042:	4798      	blx	r3
 8017044:	b05b      	add	sp, #364	; 0x16c
 8017046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801704a:	bf00      	nop
 801704c:	2400fee4 	.word	0x2400fee4

08017050 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017050:	b570      	push	{r4, r5, r6, lr}
 8017052:	4604      	mov	r4, r0
 8017054:	2500      	movs	r5, #0
 8017056:	9804      	ldr	r0, [sp, #16]
 8017058:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801705c:	8025      	strh	r5, [r4, #0]
 801705e:	6061      	str	r1, [r4, #4]
 8017060:	7223      	strb	r3, [r4, #8]
 8017062:	7266      	strb	r6, [r4, #9]
 8017064:	60e0      	str	r0, [r4, #12]
 8017066:	8222      	strh	r2, [r4, #16]
 8017068:	8265      	strh	r5, [r4, #18]
 801706a:	82a5      	strh	r5, [r4, #20]
 801706c:	82e5      	strh	r5, [r4, #22]
 801706e:	8325      	strh	r5, [r4, #24]
 8017070:	8365      	strh	r5, [r4, #26]
 8017072:	83a5      	strh	r5, [r4, #28]
 8017074:	77a5      	strb	r5, [r4, #30]
 8017076:	b32e      	cbz	r6, 80170c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8017078:	6803      	ldr	r3, [r0, #0]
 801707a:	695b      	ldr	r3, [r3, #20]
 801707c:	4798      	blx	r3
 801707e:	4606      	mov	r6, r0
 8017080:	b300      	cbz	r0, 80170c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8017082:	68e0      	ldr	r0, [r4, #12]
 8017084:	4631      	mov	r1, r6
 8017086:	6803      	ldr	r3, [r0, #0]
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	4798      	blx	r3
 801708c:	4605      	mov	r5, r0
 801708e:	b1c8      	cbz	r0, 80170c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8017090:	7b43      	ldrb	r3, [r0, #13]
 8017092:	7a82      	ldrb	r2, [r0, #10]
 8017094:	005b      	lsls	r3, r3, #1
 8017096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801709a:	4313      	orrs	r3, r2
 801709c:	83a3      	strh	r3, [r4, #28]
 801709e:	7a63      	ldrb	r3, [r4, #9]
 80170a0:	2b04      	cmp	r3, #4
 80170a2:	d10f      	bne.n	80170c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 80170a4:	68e0      	ldr	r0, [r4, #12]
 80170a6:	462a      	mov	r2, r5
 80170a8:	4631      	mov	r1, r6
 80170aa:	6803      	ldr	r3, [r0, #0]
 80170ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170ae:	4798      	blx	r3
 80170b0:	7b6b      	ldrb	r3, [r5, #13]
 80170b2:	005b      	lsls	r3, r3, #1
 80170b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80170b8:	7aab      	ldrb	r3, [r5, #10]
 80170ba:	4313      	orrs	r3, r2
 80170bc:	4418      	add	r0, r3
 80170be:	8ba3      	ldrh	r3, [r4, #28]
 80170c0:	4418      	add	r0, r3
 80170c2:	83a0      	strh	r0, [r4, #28]
 80170c4:	4620      	mov	r0, r4
 80170c6:	bd70      	pop	{r4, r5, r6, pc}

080170c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80170c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170cc:	2400      	movs	r4, #0
 80170ce:	b085      	sub	sp, #20
 80170d0:	4681      	mov	r9, r0
 80170d2:	4688      	mov	r8, r1
 80170d4:	4692      	mov	sl, r2
 80170d6:	469b      	mov	fp, r3
 80170d8:	4627      	mov	r7, r4
 80170da:	4625      	mov	r5, r4
 80170dc:	4626      	mov	r6, r4
 80170de:	4554      	cmp	r4, sl
 80170e0:	da2a      	bge.n	8017138 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80170e2:	2300      	movs	r3, #0
 80170e4:	9303      	str	r3, [sp, #12]
 80170e6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80170ea:	429d      	cmp	r5, r3
 80170ec:	d004      	beq.n	80170f8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80170ee:	f242 030b 	movw	r3, #8203	; 0x200b
 80170f2:	429d      	cmp	r5, r3
 80170f4:	bf18      	it	ne
 80170f6:	462f      	movne	r7, r5
 80170f8:	ab03      	add	r3, sp, #12
 80170fa:	4642      	mov	r2, r8
 80170fc:	4659      	mov	r1, fp
 80170fe:	4648      	mov	r0, r9
 8017100:	f002 fec0 	bl	8019e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017104:	4605      	mov	r5, r0
 8017106:	b1b8      	cbz	r0, 8017138 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017108:	280a      	cmp	r0, #10
 801710a:	d015      	beq.n	8017138 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801710c:	9a03      	ldr	r2, [sp, #12]
 801710e:	b18a      	cbz	r2, 8017134 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8017110:	7b50      	ldrb	r0, [r2, #13]
 8017112:	4639      	mov	r1, r7
 8017114:	7a93      	ldrb	r3, [r2, #10]
 8017116:	0040      	lsls	r0, r0, #1
 8017118:	8895      	ldrh	r5, [r2, #4]
 801711a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801711e:	4303      	orrs	r3, r0
 8017120:	4640      	mov	r0, r8
 8017122:	9301      	str	r3, [sp, #4]
 8017124:	f8d8 3000 	ldr.w	r3, [r8]
 8017128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801712a:	4798      	blx	r3
 801712c:	9b01      	ldr	r3, [sp, #4]
 801712e:	4418      	add	r0, r3
 8017130:	4406      	add	r6, r0
 8017132:	b2b6      	uxth	r6, r6
 8017134:	3401      	adds	r4, #1
 8017136:	e7d2      	b.n	80170de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8017138:	4630      	mov	r0, r6
 801713a:	b005      	add	sp, #20
 801713c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017140 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017140:	2a02      	cmp	r2, #2
 8017142:	b530      	push	{r4, r5, lr}
 8017144:	d011      	beq.n	801716a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017146:	2a03      	cmp	r2, #3
 8017148:	d01c      	beq.n	8017184 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801714a:	2a01      	cmp	r2, #1
 801714c:	d10c      	bne.n	8017168 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801714e:	888b      	ldrh	r3, [r1, #4]
 8017150:	8801      	ldrh	r1, [r0, #0]
 8017152:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017156:	1a5b      	subs	r3, r3, r1
 8017158:	8844      	ldrh	r4, [r0, #2]
 801715a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801715e:	1a9b      	subs	r3, r3, r2
 8017160:	8004      	strh	r4, [r0, #0]
 8017162:	8081      	strh	r1, [r0, #4]
 8017164:	8043      	strh	r3, [r0, #2]
 8017166:	80c2      	strh	r2, [r0, #6]
 8017168:	bd30      	pop	{r4, r5, pc}
 801716a:	88cb      	ldrh	r3, [r1, #6]
 801716c:	8842      	ldrh	r2, [r0, #2]
 801716e:	1a9b      	subs	r3, r3, r2
 8017170:	88c2      	ldrh	r2, [r0, #6]
 8017172:	1a9b      	subs	r3, r3, r2
 8017174:	888a      	ldrh	r2, [r1, #4]
 8017176:	8801      	ldrh	r1, [r0, #0]
 8017178:	8043      	strh	r3, [r0, #2]
 801717a:	1a52      	subs	r2, r2, r1
 801717c:	8881      	ldrh	r1, [r0, #4]
 801717e:	1a52      	subs	r2, r2, r1
 8017180:	8002      	strh	r2, [r0, #0]
 8017182:	e7f1      	b.n	8017168 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017184:	88cb      	ldrh	r3, [r1, #6]
 8017186:	8841      	ldrh	r1, [r0, #2]
 8017188:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801718c:	1a5b      	subs	r3, r3, r1
 801718e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017192:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017196:	1a9b      	subs	r3, r3, r2
 8017198:	8045      	strh	r5, [r0, #2]
 801719a:	8082      	strh	r2, [r0, #4]
 801719c:	8003      	strh	r3, [r0, #0]
 801719e:	80c4      	strh	r4, [r0, #6]
 80171a0:	e7e2      	b.n	8017168 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080171a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80171a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171a6:	b09f      	sub	sp, #124	; 0x7c
 80171a8:	9116      	str	r1, [sp, #88]	; 0x58
 80171aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80171ac:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80171ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80171b0:	8809      	ldrh	r1, [r1, #0]
 80171b2:	889b      	ldrh	r3, [r3, #4]
 80171b4:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80171b8:	440b      	add	r3, r1
 80171ba:	9212      	str	r2, [sp, #72]	; 0x48
 80171bc:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80171c0:	b21b      	sxth	r3, r3
 80171c2:	9011      	str	r0, [sp, #68]	; 0x44
 80171c4:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80171c8:	9310      	str	r3, [sp, #64]	; 0x40
 80171ca:	f8d8 3000 	ldr.w	r3, [r8]
 80171ce:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 80171d2:	7a59      	ldrb	r1, [r3, #9]
 80171d4:	7a1b      	ldrb	r3, [r3, #8]
 80171d6:	9114      	str	r1, [sp, #80]	; 0x50
 80171d8:	9315      	str	r3, [sp, #84]	; 0x54
 80171da:	2a00      	cmp	r2, #0
 80171dc:	d06a      	beq.n	80172b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80171de:	f898 3010 	ldrb.w	r3, [r8, #16]
 80171e2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80171e4:	2b04      	cmp	r3, #4
 80171e6:	bf14      	ite	ne
 80171e8:	2301      	movne	r3, #1
 80171ea:	2302      	moveq	r3, #2
 80171ec:	4413      	add	r3, r2
 80171ee:	f04f 0900 	mov.w	r9, #0
 80171f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80171f4:	464c      	mov	r4, r9
 80171f6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80171fa:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80171fe:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8017202:	4293      	cmp	r3, r2
 8017204:	f280 808f 	bge.w	8017326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8017208:	2300      	movs	r3, #0
 801720a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801720e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8017212:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017216:	429c      	cmp	r4, r3
 8017218:	d006      	beq.n	8017228 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801721a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801721c:	f242 020b 	movw	r2, #8203	; 0x200b
 8017220:	4294      	cmp	r4, r2
 8017222:	bf18      	it	ne
 8017224:	4623      	movne	r3, r4
 8017226:	930d      	str	r3, [sp, #52]	; 0x34
 8017228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801722a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801722c:	f8d8 2000 	ldr.w	r2, [r8]
 8017230:	428b      	cmp	r3, r1
 8017232:	db41      	blt.n	80172b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8017234:	6813      	ldr	r3, [r2, #0]
 8017236:	4610      	mov	r0, r2
 8017238:	695b      	ldr	r3, [r3, #20]
 801723a:	4798      	blx	r3
 801723c:	4604      	mov	r4, r0
 801723e:	f8d8 0000 	ldr.w	r0, [r8]
 8017242:	aa1d      	add	r2, sp, #116	; 0x74
 8017244:	4621      	mov	r1, r4
 8017246:	6803      	ldr	r3, [r0, #0]
 8017248:	689e      	ldr	r6, [r3, #8]
 801724a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801724e:	47b0      	blx	r6
 8017250:	901c      	str	r0, [sp, #112]	; 0x70
 8017252:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017256:	429c      	cmp	r4, r3
 8017258:	f000 80ea 	beq.w	8017430 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801725c:	f242 030b 	movw	r3, #8203	; 0x200b
 8017260:	429c      	cmp	r4, r3
 8017262:	f000 80e5 	beq.w	8017430 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017266:	2c00      	cmp	r4, #0
 8017268:	f000 80f7 	beq.w	801745a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801726c:	2c0a      	cmp	r4, #10
 801726e:	d060      	beq.n	8017332 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8017270:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017272:	b36a      	cbz	r2, 80172d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8017274:	8894      	ldrh	r4, [r2, #4]
 8017276:	f1bb 0f00 	cmp.w	fp, #0
 801727a:	d03b      	beq.n	80172f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801727c:	f892 900d 	ldrb.w	r9, [r2, #13]
 8017280:	f1bb 0f01 	cmp.w	fp, #1
 8017284:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017288:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801728c:	f892 900a 	ldrb.w	r9, [r2, #10]
 8017290:	ea49 0903 	orr.w	r9, r9, r3
 8017294:	d134      	bne.n	8017300 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8017296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017298:	eba5 0509 	sub.w	r5, r5, r9
 801729c:	2b00      	cmp	r3, #0
 801729e:	d14f      	bne.n	8017340 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80172a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80172a2:	eb09 0305 	add.w	r3, r9, r5
 80172a6:	4413      	add	r3, r2
 80172a8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80172aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80172ae:	4293      	cmp	r3, r2
 80172b0:	da51      	bge.n	8017356 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80172b2:	e038      	b.n	8017326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80172b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80172b6:	e79a      	b.n	80171ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80172b8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80172bc:	4659      	mov	r1, fp
 80172be:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80172c0:	9301      	str	r3, [sp, #4]
 80172c2:	ab1d      	add	r3, sp, #116	; 0x74
 80172c4:	9300      	str	r3, [sp, #0]
 80172c6:	ab1c      	add	r3, sp, #112	; 0x70
 80172c8:	f002 fe25 	bl	8019f16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80172cc:	4604      	mov	r4, r0
 80172ce:	e7c0      	b.n	8017252 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80172d0:	f8d8 0000 	ldr.w	r0, [r8]
 80172d4:	6803      	ldr	r3, [r0, #0]
 80172d6:	691b      	ldr	r3, [r3, #16]
 80172d8:	4798      	blx	r3
 80172da:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80172de:	4298      	cmp	r0, r3
 80172e0:	f000 80a6 	beq.w	8017430 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80172e4:	f242 030b 	movw	r3, #8203	; 0x200b
 80172e8:	4298      	cmp	r0, r3
 80172ea:	f000 80a1 	beq.w	8017430 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80172ee:	f1bb 0f00 	cmp.w	fp, #0
 80172f2:	d100      	bne.n	80172f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80172f4:	444d      	add	r5, r9
 80172f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80172f8:	2a00      	cmp	r2, #0
 80172fa:	d1bf      	bne.n	801727c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80172fc:	4691      	mov	r9, r2
 80172fe:	e097      	b.n	8017430 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017302:	2b00      	cmp	r3, #0
 8017304:	f000 80ab 	beq.w	801745e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8017308:	f1bb 0f00 	cmp.w	fp, #0
 801730c:	d118      	bne.n	8017340 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801730e:	f8d8 0000 	ldr.w	r0, [r8]
 8017312:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017314:	6803      	ldr	r3, [r0, #0]
 8017316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017318:	4798      	blx	r3
 801731a:	4405      	add	r5, r0
 801731c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801731e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017320:	1aeb      	subs	r3, r5, r3
 8017322:	4293      	cmp	r3, r2
 8017324:	dd17      	ble.n	8017356 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8017326:	2c00      	cmp	r4, #0
 8017328:	f000 8097 	beq.w	801745a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801732c:	2c0a      	cmp	r4, #10
 801732e:	f040 8085 	bne.w	801743c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8017332:	240a      	movs	r4, #10
 8017334:	fab4 f084 	clz	r0, r4
 8017338:	0940      	lsrs	r0, r0, #5
 801733a:	b01f      	add	sp, #124	; 0x7c
 801733c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017340:	f8d8 0000 	ldr.w	r0, [r8]
 8017344:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017346:	6803      	ldr	r3, [r0, #0]
 8017348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801734a:	4798      	blx	r3
 801734c:	f1bb 0f01 	cmp.w	fp, #1
 8017350:	eba5 0500 	sub.w	r5, r5, r0
 8017354:	d0a4      	beq.n	80172a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8017356:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017358:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801735a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801735e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017362:	7b43      	ldrb	r3, [r0, #13]
 8017364:	4429      	add	r1, r5
 8017366:	015b      	lsls	r3, r3, #5
 8017368:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801736c:	7983      	ldrb	r3, [r0, #6]
 801736e:	4313      	orrs	r3, r2
 8017370:	440b      	add	r3, r1
 8017372:	42b3      	cmp	r3, r6
 8017374:	db5c      	blt.n	8017430 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8017376:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017378:	4299      	cmp	r1, r3
 801737a:	da59      	bge.n	8017430 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801737c:	f8d8 0000 	ldr.w	r0, [r8]
 8017380:	42ae      	cmp	r6, r5
 8017382:	6803      	ldr	r3, [r0, #0]
 8017384:	bfcc      	ite	gt
 8017386:	1b76      	subgt	r6, r6, r5
 8017388:	2600      	movle	r6, #0
 801738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801738c:	bfc8      	it	gt
 801738e:	b2b6      	uxthgt	r6, r6
 8017390:	4798      	blx	r3
 8017392:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017394:	7b5a      	ldrb	r2, [r3, #13]
 8017396:	00d1      	lsls	r1, r2, #3
 8017398:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801739c:	7a19      	ldrb	r1, [r3, #8]
 801739e:	4339      	orrs	r1, r7
 80173a0:	0657      	lsls	r7, r2, #25
 80173a2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80173a4:	bf48      	it	mi
 80173a6:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80173aa:	4407      	add	r7, r0
 80173ac:	bf48      	it	mi
 80173ae:	b209      	sxthmi	r1, r1
 80173b0:	1a7f      	subs	r7, r7, r1
 80173b2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80173b4:	b2bf      	uxth	r7, r7
 80173b6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80173ba:	fa0f fa87 	sxth.w	sl, r7
 80173be:	4551      	cmp	r1, sl
 80173c0:	dd3a      	ble.n	8017438 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80173c2:	0112      	lsls	r2, r2, #4
 80173c4:	79d8      	ldrb	r0, [r3, #7]
 80173c6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80173ca:	4302      	orrs	r2, r0
 80173cc:	4492      	add	sl, r2
 80173ce:	4551      	cmp	r1, sl
 80173d0:	dc2e      	bgt.n	8017430 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80173d2:	1bcf      	subs	r7, r1, r7
 80173d4:	468a      	mov	sl, r1
 80173d6:	b2bf      	uxth	r7, r7
 80173d8:	9319      	str	r3, [sp, #100]	; 0x64
 80173da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80173dc:	f8d8 0000 	ldr.w	r0, [r8]
 80173e0:	681a      	ldr	r2, [r3, #0]
 80173e2:	6801      	ldr	r1, [r0, #0]
 80173e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80173e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80173e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80173ea:	9218      	str	r2, [sp, #96]	; 0x60
 80173ec:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80173ee:	4788      	blx	r1
 80173f0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80173f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80173f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80173f8:	f898 100e 	ldrb.w	r1, [r8, #14]
 80173fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80173fe:	910a      	str	r1, [sp, #40]	; 0x28
 8017400:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8017404:	9109      	str	r1, [sp, #36]	; 0x24
 8017406:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801740a:	9305      	str	r3, [sp, #20]
 801740c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801740e:	9206      	str	r2, [sp, #24]
 8017410:	e9cd a601 	strd	sl, r6, [sp, #4]
 8017414:	442e      	add	r6, r5
 8017416:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801741a:	b236      	sxth	r6, r6
 801741c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801741e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8017422:	9600      	str	r6, [sp, #0]
 8017424:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017426:	681a      	ldr	r2, [r3, #0]
 8017428:	9811      	ldr	r0, [sp, #68]	; 0x44
 801742a:	685b      	ldr	r3, [r3, #4]
 801742c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801742e:	47b0      	blx	r6
 8017430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017432:	3301      	adds	r3, #1
 8017434:	930e      	str	r3, [sp, #56]	; 0x38
 8017436:	e6e2      	b.n	80171fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8017438:	2700      	movs	r7, #0
 801743a:	e7cd      	b.n	80173d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801743c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801743e:	3501      	adds	r5, #1
 8017440:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017442:	429d      	cmp	r5, r3
 8017444:	f6bf af76 	bge.w	8017334 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8017448:	4659      	mov	r1, fp
 801744a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801744c:	f7ec ff8a 	bl	8004364 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017450:	4604      	mov	r4, r0
 8017452:	b110      	cbz	r0, 801745a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8017454:	280a      	cmp	r0, #10
 8017456:	d1f2      	bne.n	801743e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8017458:	e76b      	b.n	8017332 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801745a:	2400      	movs	r4, #0
 801745c:	e76a      	b.n	8017334 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801745e:	f1bb 0f00 	cmp.w	fp, #0
 8017462:	f43f af5b 	beq.w	801731c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8017466:	e776      	b.n	8017356 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08017468 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017468:	b530      	push	{r4, r5, lr}
 801746a:	8a44      	ldrh	r4, [r0, #18]
 801746c:	8ac5      	ldrh	r5, [r0, #22]
 801746e:	82c3      	strh	r3, [r0, #22]
 8017470:	442c      	add	r4, r5
 8017472:	1ae4      	subs	r4, r4, r3
 8017474:	8b03      	ldrh	r3, [r0, #24]
 8017476:	8244      	strh	r4, [r0, #18]
 8017478:	8a84      	ldrh	r4, [r0, #20]
 801747a:	4422      	add	r2, r4
 801747c:	440c      	add	r4, r1
 801747e:	1a59      	subs	r1, r3, r1
 8017480:	8342      	strh	r2, [r0, #26]
 8017482:	8284      	strh	r4, [r0, #20]
 8017484:	8301      	strh	r1, [r0, #24]
 8017486:	bd30      	pop	{r4, r5, pc}

08017488 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8017488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801748c:	7a43      	ldrb	r3, [r0, #9]
 801748e:	b087      	sub	sp, #28
 8017490:	4604      	mov	r4, r0
 8017492:	460f      	mov	r7, r1
 8017494:	1eda      	subs	r2, r3, #3
 8017496:	b2d2      	uxtb	r2, r2
 8017498:	2900      	cmp	r1, #0
 801749a:	d036      	beq.n	801750a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801749c:	2a01      	cmp	r2, #1
 801749e:	d932      	bls.n	8017506 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 80174a0:	1e58      	subs	r0, r3, #1
 80174a2:	f1d0 0b00 	rsbs	fp, r0, #0
 80174a6:	eb4b 0b00 	adc.w	fp, fp, r0
 80174aa:	1e99      	subs	r1, r3, #2
 80174ac:	424b      	negs	r3, r1
 80174ae:	414b      	adcs	r3, r1
 80174b0:	9303      	str	r3, [sp, #12]
 80174b2:	2300      	movs	r3, #0
 80174b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80174b8:	2500      	movs	r5, #0
 80174ba:	f242 0a0b 	movw	sl, #8203	; 0x200b
 80174be:	46a9      	mov	r9, r5
 80174c0:	8265      	strh	r5, [r4, #18]
 80174c2:	82a5      	strh	r5, [r4, #20]
 80174c4:	2300      	movs	r3, #0
 80174c6:	9305      	str	r3, [sp, #20]
 80174c8:	8823      	ldrh	r3, [r4, #0]
 80174ca:	2b20      	cmp	r3, #32
 80174cc:	d02b      	beq.n	8017526 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 80174ce:	eba3 020a 	sub.w	r2, r3, sl
 80174d2:	4256      	negs	r6, r2
 80174d4:	4156      	adcs	r6, r2
 80174d6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80174da:	4293      	cmp	r3, r2
 80174dc:	d004      	beq.n	80174e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80174de:	4553      	cmp	r3, sl
 80174e0:	bf16      	itet	ne
 80174e2:	4699      	movne	r9, r3
 80174e4:	2601      	moveq	r6, #1
 80174e6:	2600      	movne	r6, #0
 80174e8:	ab05      	add	r3, sp, #20
 80174ea:	68e2      	ldr	r2, [r4, #12]
 80174ec:	7a21      	ldrb	r1, [r4, #8]
 80174ee:	6860      	ldr	r0, [r4, #4]
 80174f0:	f002 fcc8 	bl	8019e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80174f4:	8020      	strh	r0, [r4, #0]
 80174f6:	b9c8      	cbnz	r0, 801752c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80174f8:	8b22      	ldrh	r2, [r4, #24]
 80174fa:	2300      	movs	r3, #0
 80174fc:	4611      	mov	r1, r2
 80174fe:	4620      	mov	r0, r4
 8017500:	f7ff ffb2 	bl	8017468 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017504:	e066      	b.n	80175d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8017506:	468b      	mov	fp, r1
 8017508:	e7cf      	b.n	80174aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801750a:	3b01      	subs	r3, #1
 801750c:	2a01      	cmp	r2, #1
 801750e:	9103      	str	r1, [sp, #12]
 8017510:	468b      	mov	fp, r1
 8017512:	bf8c      	ite	hi
 8017514:	2200      	movhi	r2, #0
 8017516:	2201      	movls	r2, #1
 8017518:	2b01      	cmp	r3, #1
 801751a:	9202      	str	r2, [sp, #8]
 801751c:	bf8c      	ite	hi
 801751e:	2300      	movhi	r3, #0
 8017520:	2301      	movls	r3, #1
 8017522:	9301      	str	r3, [sp, #4]
 8017524:	e7c8      	b.n	80174b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8017526:	4699      	mov	r9, r3
 8017528:	2601      	movs	r6, #1
 801752a:	e7dd      	b.n	80174e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801752c:	8ae3      	ldrh	r3, [r4, #22]
 801752e:	280a      	cmp	r0, #10
 8017530:	f103 0301 	add.w	r3, r3, #1
 8017534:	82e3      	strh	r3, [r4, #22]
 8017536:	d0df      	beq.n	80174f8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8017538:	9a05      	ldr	r2, [sp, #20]
 801753a:	bb42      	cbnz	r2, 801758e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801753c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017540:	4298      	cmp	r0, r3
 8017542:	d001      	beq.n	8017548 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8017544:	4550      	cmp	r0, sl
 8017546:	d1bd      	bne.n	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017548:	8823      	ldrh	r3, [r4, #0]
 801754a:	8b21      	ldrh	r1, [r4, #24]
 801754c:	2b20      	cmp	r3, #32
 801754e:	d001      	beq.n	8017554 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8017550:	4553      	cmp	r3, sl
 8017552:	d131      	bne.n	80175b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8017554:	2e00      	cmp	r6, #0
 8017556:	bf0a      	itet	eq
 8017558:	460d      	moveq	r5, r1
 801755a:	4630      	movne	r0, r6
 801755c:	2001      	moveq	r0, #1
 801755e:	440a      	add	r2, r1
 8017560:	8aa3      	ldrh	r3, [r4, #20]
 8017562:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017566:	b292      	uxth	r2, r2
 8017568:	8322      	strh	r2, [r4, #24]
 801756a:	4413      	add	r3, r2
 801756c:	2f00      	cmp	r7, #0
 801756e:	d03a      	beq.n	80175e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8017570:	f1bb 0f00 	cmp.w	fp, #0
 8017574:	d102      	bne.n	801757c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8017576:	9903      	ldr	r1, [sp, #12]
 8017578:	b301      	cbz	r1, 80175bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801757a:	b1f8      	cbz	r0, 80175bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801757c:	8ba1      	ldrh	r1, [r4, #28]
 801757e:	4419      	add	r1, r3
 8017580:	458c      	cmp	ip, r1
 8017582:	da2a      	bge.n	80175da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8017584:	8a61      	ldrh	r1, [r4, #18]
 8017586:	b341      	cbz	r1, 80175da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8017588:	4563      	cmp	r3, ip
 801758a:	dd9b      	ble.n	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801758c:	e01c      	b.n	80175c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801758e:	8893      	ldrh	r3, [r2, #4]
 8017590:	4649      	mov	r1, r9
 8017592:	8023      	strh	r3, [r4, #0]
 8017594:	f892 800d 	ldrb.w	r8, [r2, #13]
 8017598:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801759c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 80175a0:	f892 800a 	ldrb.w	r8, [r2, #10]
 80175a4:	ea48 0800 	orr.w	r8, r8, r0
 80175a8:	68e0      	ldr	r0, [r4, #12]
 80175aa:	6803      	ldr	r3, [r0, #0]
 80175ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175ae:	4798      	blx	r3
 80175b0:	eb08 0200 	add.w	r2, r8, r0
 80175b4:	b292      	uxth	r2, r2
 80175b6:	e7c7      	b.n	8017548 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80175b8:	2000      	movs	r0, #0
 80175ba:	e7d0      	b.n	801755e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80175bc:	4563      	cmp	r3, ip
 80175be:	dd81      	ble.n	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80175c0:	8a63      	ldrh	r3, [r4, #18]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	f43f af7e 	beq.w	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80175c8:	2301      	movs	r3, #1
 80175ca:	8ba2      	ldrh	r2, [r4, #28]
 80175cc:	77a3      	strb	r3, [r4, #30]
 80175ce:	8b63      	ldrh	r3, [r4, #26]
 80175d0:	4413      	add	r3, r2
 80175d2:	8363      	strh	r3, [r4, #26]
 80175d4:	b007      	add	sp, #28
 80175d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175da:	2300      	movs	r3, #0
 80175dc:	4611      	mov	r1, r2
 80175de:	4620      	mov	r0, r4
 80175e0:	f7ff ff42 	bl	8017468 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80175e4:	e76e      	b.n	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80175e6:	4563      	cmp	r3, ip
 80175e8:	dd14      	ble.n	8017614 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 80175ea:	9b02      	ldr	r3, [sp, #8]
 80175ec:	b113      	cbz	r3, 80175f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 80175ee:	2301      	movs	r3, #1
 80175f0:	460a      	mov	r2, r1
 80175f2:	e783      	b.n	80174fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80175f4:	9b01      	ldr	r3, [sp, #4]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	f43f af64 	beq.w	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80175fc:	2800      	cmp	r0, #0
 80175fe:	f47f af61 	bne.w	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017602:	b116      	cbz	r6, 801760a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8017604:	2301      	movs	r3, #1
 8017606:	462a      	mov	r2, r5
 8017608:	e779      	b.n	80174fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801760a:	8a63      	ldrh	r3, [r4, #18]
 801760c:	2b00      	cmp	r3, #0
 801760e:	f43f af59 	beq.w	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017612:	e7df      	b.n	80175d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8017614:	2800      	cmp	r0, #0
 8017616:	f47f af55 	bne.w	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801761a:	2e00      	cmp	r6, #0
 801761c:	f43f af52 	beq.w	80174c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017620:	2301      	movs	r3, #1
 8017622:	462a      	mov	r2, r5
 8017624:	e7db      	b.n	80175de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08017626 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8017626:	b530      	push	{r4, r5, lr}
 8017628:	4605      	mov	r5, r0
 801762a:	b08b      	sub	sp, #44	; 0x2c
 801762c:	b191      	cbz	r1, 8017654 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801762e:	2401      	movs	r4, #1
 8017630:	e9cd 3100 	strd	r3, r1, [sp]
 8017634:	4613      	mov	r3, r2
 8017636:	4601      	mov	r1, r0
 8017638:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801763c:	a802      	add	r0, sp, #8
 801763e:	f7ff fd07 	bl	8017050 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8017642:	2100      	movs	r1, #0
 8017644:	a802      	add	r0, sp, #8
 8017646:	f7ff ff1f 	bl	8017488 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801764a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801764e:	b163      	cbz	r3, 801766a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8017650:	3401      	adds	r4, #1
 8017652:	e7f6      	b.n	8017642 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8017654:	2401      	movs	r4, #1
 8017656:	f002 fce1 	bl	801a01c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801765a:	280a      	cmp	r0, #10
 801765c:	4628      	mov	r0, r5
 801765e:	bf08      	it	eq
 8017660:	3401      	addeq	r4, #1
 8017662:	f002 fcdb 	bl	801a01c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017666:	2800      	cmp	r0, #0
 8017668:	d1f7      	bne.n	801765a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801766a:	b2a0      	uxth	r0, r4
 801766c:	b00b      	add	sp, #44	; 0x2c
 801766e:	bd30      	pop	{r4, r5, pc}

08017670 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017674:	b0e5      	sub	sp, #404	; 0x194
 8017676:	4689      	mov	r9, r1
 8017678:	461c      	mov	r4, r3
 801767a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801767e:	900a      	str	r0, [sp, #40]	; 0x28
 8017680:	f1ba 0f00 	cmp.w	sl, #0
 8017684:	f000 80b4 	beq.w	80177f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	2b00      	cmp	r3, #0
 801768c:	f000 80b0 	beq.w	80177f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017690:	7ba3      	ldrb	r3, [r4, #14]
 8017692:	2b00      	cmp	r3, #0
 8017694:	f000 80ac 	beq.w	80177f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017698:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801769c:	6810      	ldr	r0, [r2, #0]
 801769e:	6851      	ldr	r1, [r2, #4]
 80176a0:	2500      	movs	r5, #0
 80176a2:	4643      	mov	r3, r8
 80176a4:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80176a8:	950f      	str	r5, [sp, #60]	; 0x3c
 80176aa:	af19      	add	r7, sp, #100	; 0x64
 80176ac:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80176b0:	79a2      	ldrb	r2, [r4, #6]
 80176b2:	c303      	stmia	r3!, {r0, r1}
 80176b4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80176b8:	a90f      	add	r1, sp, #60	; 0x3c
 80176ba:	4640      	mov	r0, r8
 80176bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80176c0:	f7ff fd3e 	bl	8017140 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80176c4:	a90f      	add	r1, sp, #60	; 0x3c
 80176c6:	79a2      	ldrb	r2, [r4, #6]
 80176c8:	4608      	mov	r0, r1
 80176ca:	f7ff fd39 	bl	8017140 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80176ce:	4638      	mov	r0, r7
 80176d0:	f002 f877 	bl	80197c2 <_ZN8touchgfx12TextProviderC1Ev>
 80176d4:	6820      	ldr	r0, [r4, #0]
 80176d6:	6803      	ldr	r3, [r0, #0]
 80176d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176da:	4798      	blx	r3
 80176dc:	4606      	mov	r6, r0
 80176de:	6820      	ldr	r0, [r4, #0]
 80176e0:	6803      	ldr	r3, [r0, #0]
 80176e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80176e4:	4798      	blx	r3
 80176e6:	4633      	mov	r3, r6
 80176e8:	9000      	str	r0, [sp, #0]
 80176ea:	4651      	mov	r1, sl
 80176ec:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80176ee:	4638      	mov	r0, r7
 80176f0:	f002 f8c2 	bl	8019878 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80176f4:	7923      	ldrb	r3, [r4, #4]
 80176f6:	6820      	ldr	r0, [r4, #0]
 80176f8:	9308      	str	r3, [sp, #32]
 80176fa:	6803      	ldr	r3, [r0, #0]
 80176fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176fe:	4798      	blx	r3
 8017700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017704:	181e      	adds	r6, r3, r0
 8017706:	42ae      	cmp	r6, r5
 8017708:	dd06      	ble.n	8017718 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801770a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801770e:	4282      	cmp	r2, r0
 8017710:	bfa4      	itt	ge
 8017712:	189d      	addge	r5, r3, r2
 8017714:	fb95 f5f6 	sdivge	r5, r5, r6
 8017718:	a832      	add	r0, sp, #200	; 0xc8
 801771a:	f002 f852 	bl	80197c2 <_ZN8touchgfx12TextProviderC1Ev>
 801771e:	7c23      	ldrb	r3, [r4, #16]
 8017720:	b17b      	cbz	r3, 8017742 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8017722:	6820      	ldr	r0, [r4, #0]
 8017724:	6803      	ldr	r3, [r0, #0]
 8017726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017728:	4798      	blx	r3
 801772a:	4683      	mov	fp, r0
 801772c:	6820      	ldr	r0, [r4, #0]
 801772e:	6803      	ldr	r3, [r0, #0]
 8017730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017732:	4798      	blx	r3
 8017734:	465b      	mov	r3, fp
 8017736:	9000      	str	r0, [sp, #0]
 8017738:	4651      	mov	r1, sl
 801773a:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801773c:	a832      	add	r0, sp, #200	; 0xc8
 801773e:	f002 f89b 	bl	8019878 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017742:	7be1      	ldrb	r1, [r4, #15]
 8017744:	a811      	add	r0, sp, #68	; 0x44
 8017746:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801774a:	7963      	ldrb	r3, [r4, #5]
 801774c:	1a52      	subs	r2, r2, r1
 801774e:	7c21      	ldrb	r1, [r4, #16]
 8017750:	9101      	str	r1, [sp, #4]
 8017752:	b292      	uxth	r2, r2
 8017754:	6821      	ldr	r1, [r4, #0]
 8017756:	9100      	str	r1, [sp, #0]
 8017758:	a932      	add	r1, sp, #200	; 0xc8
 801775a:	f7ff fc79 	bl	8017050 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801775e:	7c23      	ldrb	r3, [r4, #16]
 8017760:	b9bb      	cbnz	r3, 8017792 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8017762:	fa1f fa86 	uxth.w	sl, r6
 8017766:	2d00      	cmp	r5, #0
 8017768:	dd45      	ble.n	80177f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801776a:	4638      	mov	r0, r7
 801776c:	f002 fc56 	bl	801a01c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017770:	2800      	cmp	r0, #0
 8017772:	d03d      	beq.n	80177f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017774:	280a      	cmp	r0, #10
 8017776:	d1f6      	bne.n	8017766 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8017778:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801777c:	3d01      	subs	r5, #1
 801777e:	4453      	add	r3, sl
 8017780:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017784:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8017788:	eba3 030a 	sub.w	r3, r3, sl
 801778c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017790:	e7e9      	b.n	8017766 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8017792:	0073      	lsls	r3, r6, #1
 8017794:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8017798:	fa1f fa86 	uxth.w	sl, r6
 801779c:	9309      	str	r3, [sp, #36]	; 0x24
 801779e:	2d00      	cmp	r5, #0
 80177a0:	dd29      	ble.n	80177f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 80177a2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80177a6:	a811      	add	r0, sp, #68	; 0x44
 80177a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177aa:	428b      	cmp	r3, r1
 80177ac:	bfd4      	ite	le
 80177ae:	2100      	movle	r1, #0
 80177b0:	2101      	movgt	r1, #1
 80177b2:	f7ff fe69 	bl	8017488 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80177b6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80177ba:	3b01      	subs	r3, #1
 80177bc:	b29b      	uxth	r3, r3
 80177be:	455b      	cmp	r3, fp
 80177c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80177c2:	d005      	beq.n	80177d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 80177c4:	7961      	ldrb	r1, [r4, #5]
 80177c6:	4638      	mov	r0, r7
 80177c8:	f7ec fdcc 	bl	8004364 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80177cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177ce:	e7f4      	b.n	80177ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 80177d0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80177d4:	3d01      	subs	r5, #1
 80177d6:	4453      	add	r3, sl
 80177d8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80177dc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80177e0:	eba3 030a 	sub.w	r3, r3, sl
 80177e4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80177e8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d1d6      	bne.n	801779e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80177f0:	b065      	add	sp, #404	; 0x194
 80177f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f6:	0075      	lsls	r5, r6, #1
 80177f8:	f04f 0a00 	mov.w	sl, #0
 80177fc:	7c23      	ldrb	r3, [r4, #16]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d066      	beq.n	80178d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8017802:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017806:	a811      	add	r0, sp, #68	; 0x44
 8017808:	428d      	cmp	r5, r1
 801780a:	bfd4      	ite	le
 801780c:	2100      	movle	r1, #0
 801780e:	2101      	movgt	r1, #1
 8017810:	f7ff fe3a 	bl	8017488 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017814:	9b08      	ldr	r3, [sp, #32]
 8017816:	2b00      	cmp	r3, #0
 8017818:	d055      	beq.n	80178c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801781a:	f894 b010 	ldrb.w	fp, [r4, #16]
 801781e:	2264      	movs	r2, #100	; 0x64
 8017820:	4639      	mov	r1, r7
 8017822:	a84b      	add	r0, sp, #300	; 0x12c
 8017824:	f00b febe 	bl	80235a4 <memcpy>
 8017828:	f1bb 0f00 	cmp.w	fp, #0
 801782c:	d058      	beq.n	80178e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801782e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8017832:	7922      	ldrb	r2, [r4, #4]
 8017834:	2a01      	cmp	r2, #1
 8017836:	d13c      	bne.n	80178b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8017838:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801783c:	1ac0      	subs	r0, r0, r3
 801783e:	2302      	movs	r3, #2
 8017840:	fb90 f0f3 	sdiv	r0, r0, r3
 8017844:	b200      	sxth	r0, r0
 8017846:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801784a:	4418      	add	r0, r3
 801784c:	7c23      	ldrb	r3, [r4, #16]
 801784e:	b200      	sxth	r0, r0
 8017850:	2b00      	cmp	r3, #0
 8017852:	d03a      	beq.n	80178ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8017854:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8017858:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801785c:	9000      	str	r0, [sp, #0]
 801785e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8017862:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017864:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017868:	e9cd a703 	strd	sl, r7, [sp, #12]
 801786c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8017870:	464a      	mov	r2, r9
 8017872:	2100      	movs	r1, #0
 8017874:	f7ff fc95 	bl	80171a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017878:	2800      	cmp	r0, #0
 801787a:	d1b9      	bne.n	80177f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801787c:	b2b2      	uxth	r2, r6
 801787e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017882:	4611      	mov	r1, r2
 8017884:	4413      	add	r3, r2
 8017886:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801788a:	b21b      	sxth	r3, r3
 801788c:	1a52      	subs	r2, r2, r1
 801788e:	7c21      	ldrb	r1, [r4, #16]
 8017890:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017894:	b212      	sxth	r2, r2
 8017896:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801789a:	b109      	cbz	r1, 80178a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801789c:	42b2      	cmp	r2, r6
 801789e:	dba7      	blt.n	80177f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80178a0:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80178a4:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80178a8:	440a      	add	r2, r1
 80178aa:	b212      	sxth	r2, r2
 80178ac:	4293      	cmp	r3, r2
 80178ae:	dda5      	ble.n	80177fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 80178b0:	e79e      	b.n	80177f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80178b2:	2a02      	cmp	r2, #2
 80178b4:	d105      	bne.n	80178c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80178b6:	7be2      	ldrb	r2, [r4, #15]
 80178b8:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 80178bc:	1a80      	subs	r0, r0, r2
 80178be:	1ac0      	subs	r0, r0, r3
 80178c0:	e7c0      	b.n	8017844 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 80178c2:	2000      	movs	r0, #0
 80178c4:	e7bf      	b.n	8017846 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 80178c6:	7be0      	ldrb	r0, [r4, #15]
 80178c8:	e7bd      	b.n	8017846 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 80178ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80178ce:	e7c3      	b.n	8017858 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 80178d0:	9b08      	ldr	r3, [sp, #32]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d0f7      	beq.n	80178c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80178d6:	2264      	movs	r2, #100	; 0x64
 80178d8:	4639      	mov	r1, r7
 80178da:	a84b      	add	r0, sp, #300	; 0x12c
 80178dc:	f00b fe62 	bl	80235a4 <memcpy>
 80178e0:	2300      	movs	r3, #0
 80178e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80178e6:	6821      	ldr	r1, [r4, #0]
 80178e8:	a84b      	add	r0, sp, #300	; 0x12c
 80178ea:	f7ff fbed 	bl	80170c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80178ee:	b203      	sxth	r3, r0
 80178f0:	e79f      	b.n	8017832 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

080178f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80178f2:	2b03      	cmp	r3, #3
 80178f4:	d818      	bhi.n	8017928 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80178f6:	e8df f003 	tbb	[pc, r3]
 80178fa:	0602      	.short	0x0602
 80178fc:	130d      	.short	0x130d
 80178fe:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017902:	1850      	adds	r0, r2, r1
 8017904:	4770      	bx	lr
 8017906:	8803      	ldrh	r3, [r0, #0]
 8017908:	8880      	ldrh	r0, [r0, #4]
 801790a:	4418      	add	r0, r3
 801790c:	b200      	sxth	r0, r0
 801790e:	1a80      	subs	r0, r0, r2
 8017910:	3801      	subs	r0, #1
 8017912:	4770      	bx	lr
 8017914:	8803      	ldrh	r3, [r0, #0]
 8017916:	8880      	ldrh	r0, [r0, #4]
 8017918:	4418      	add	r0, r3
 801791a:	b200      	sxth	r0, r0
 801791c:	1a40      	subs	r0, r0, r1
 801791e:	e7f7      	b.n	8017910 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017920:	f9b0 0000 	ldrsh.w	r0, [r0]
 8017924:	4410      	add	r0, r2
 8017926:	4770      	bx	lr
 8017928:	2000      	movs	r0, #0
 801792a:	4770      	bx	lr

0801792c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801792c:	2b03      	cmp	r3, #3
 801792e:	d817      	bhi.n	8017960 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017930:	e8df f003 	tbb	[pc, r3]
 8017934:	10090602 	.word	0x10090602
 8017938:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801793c:	1850      	adds	r0, r2, r1
 801793e:	4770      	bx	lr
 8017940:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017944:	e7fa      	b.n	801793c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8017946:	8843      	ldrh	r3, [r0, #2]
 8017948:	88c0      	ldrh	r0, [r0, #6]
 801794a:	4418      	add	r0, r3
 801794c:	b200      	sxth	r0, r0
 801794e:	1a80      	subs	r0, r0, r2
 8017950:	3801      	subs	r0, #1
 8017952:	4770      	bx	lr
 8017954:	8843      	ldrh	r3, [r0, #2]
 8017956:	88c0      	ldrh	r0, [r0, #6]
 8017958:	4418      	add	r0, r3
 801795a:	b200      	sxth	r0, r0
 801795c:	1a40      	subs	r0, r0, r1
 801795e:	e7f7      	b.n	8017950 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017960:	2000      	movs	r0, #0
 8017962:	4770      	bx	lr

08017964 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017964:	4b01      	ldr	r3, [pc, #4]	; (801796c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017966:	2200      	movs	r2, #0
 8017968:	601a      	str	r2, [r3, #0]
 801796a:	4770      	bx	lr
 801796c:	2400feec 	.word	0x2400feec

08017970 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017970:	4603      	mov	r3, r0
 8017972:	b1c8      	cbz	r0, 80179a8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017974:	0c02      	lsrs	r2, r0, #16
 8017976:	0412      	lsls	r2, r2, #16
 8017978:	b9a2      	cbnz	r2, 80179a4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801797a:	0403      	lsls	r3, r0, #16
 801797c:	2010      	movs	r0, #16
 801797e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017982:	bf04      	itt	eq
 8017984:	021b      	lsleq	r3, r3, #8
 8017986:	3008      	addeq	r0, #8
 8017988:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801798c:	bf04      	itt	eq
 801798e:	011b      	lsleq	r3, r3, #4
 8017990:	3004      	addeq	r0, #4
 8017992:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017996:	bf04      	itt	eq
 8017998:	009b      	lsleq	r3, r3, #2
 801799a:	3002      	addeq	r0, #2
 801799c:	2b00      	cmp	r3, #0
 801799e:	db04      	blt.n	80179aa <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80179a0:	3001      	adds	r0, #1
 80179a2:	4770      	bx	lr
 80179a4:	2000      	movs	r0, #0
 80179a6:	e7ea      	b.n	801797e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80179a8:	2020      	movs	r0, #32
 80179aa:	4770      	bx	lr

080179ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80179ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179b0:	b087      	sub	sp, #28
 80179b2:	4681      	mov	r9, r0
 80179b4:	4698      	mov	r8, r3
 80179b6:	4610      	mov	r0, r2
 80179b8:	460d      	mov	r5, r1
 80179ba:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80179be:	b981      	cbnz	r1, 80179e2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80179c0:	b14b      	cbz	r3, 80179d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80179c2:	460b      	mov	r3, r1
 80179c4:	464a      	mov	r2, r9
 80179c6:	4641      	mov	r1, r8
 80179c8:	e9cd 4700 	strd	r4, r7, [sp]
 80179cc:	f7ff ffee 	bl	80179ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80179d0:	b007      	add	sp, #28
 80179d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179d6:	f04f 33ff 	mov.w	r3, #4294967295
 80179da:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80179de:	603b      	str	r3, [r7, #0]
 80179e0:	e7f6      	b.n	80179d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80179e2:	fa32 fa01 	lsrs.w	sl, r2, r1
 80179e6:	d107      	bne.n	80179f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80179e8:	fb09 f602 	mul.w	r6, r9, r2
 80179ec:	fbb6 f0f4 	udiv	r0, r6, r4
 80179f0:	fb04 6610 	mls	r6, r4, r0, r6
 80179f4:	603e      	str	r6, [r7, #0]
 80179f6:	e7eb      	b.n	80179d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80179f8:	2601      	movs	r6, #1
 80179fa:	fa09 fb01 	lsl.w	fp, r9, r1
 80179fe:	408e      	lsls	r6, r1
 8017a00:	fbbb f3f4 	udiv	r3, fp, r4
 8017a04:	3e01      	subs	r6, #1
 8017a06:	9302      	str	r3, [sp, #8]
 8017a08:	fb0a f303 	mul.w	r3, sl, r3
 8017a0c:	4016      	ands	r6, r2
 8017a0e:	9303      	str	r3, [sp, #12]
 8017a10:	4630      	mov	r0, r6
 8017a12:	f7ff ffad 	bl	8017970 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017a16:	464a      	mov	r2, r9
 8017a18:	460b      	mov	r3, r1
 8017a1a:	4601      	mov	r1, r0
 8017a1c:	4630      	mov	r0, r6
 8017a1e:	e9cd 4700 	strd	r4, r7, [sp]
 8017a22:	f7ff ffc3 	bl	80179ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017a26:	9b02      	ldr	r3, [sp, #8]
 8017a28:	4606      	mov	r6, r0
 8017a2a:	eb05 0108 	add.w	r1, r5, r8
 8017a2e:	fb04 bb13 	mls	fp, r4, r3, fp
 8017a32:	4658      	mov	r0, fp
 8017a34:	f7ff ff9c 	bl	8017970 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017a38:	ab05      	add	r3, sp, #20
 8017a3a:	465a      	mov	r2, fp
 8017a3c:	e9cd 4300 	strd	r4, r3, [sp]
 8017a40:	4603      	mov	r3, r0
 8017a42:	4650      	mov	r0, sl
 8017a44:	f7ff ffb2 	bl	80179ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017a48:	6839      	ldr	r1, [r7, #0]
 8017a4a:	9a05      	ldr	r2, [sp, #20]
 8017a4c:	9b03      	ldr	r3, [sp, #12]
 8017a4e:	4411      	add	r1, r2
 8017a50:	fbb1 f2f4 	udiv	r2, r1, r4
 8017a54:	18d3      	adds	r3, r2, r3
 8017a56:	fb04 1412 	mls	r4, r4, r2, r1
 8017a5a:	441e      	add	r6, r3
 8017a5c:	603c      	str	r4, [r7, #0]
 8017a5e:	4430      	add	r0, r6
 8017a60:	e7b6      	b.n	80179d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08017a62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017a62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a66:	b085      	sub	sp, #20
 8017a68:	f1b0 0900 	subs.w	r9, r0, #0
 8017a6c:	461d      	mov	r5, r3
 8017a6e:	4617      	mov	r7, r2
 8017a70:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017a72:	bfbb      	ittet	lt
 8017a74:	f1c9 0900 	rsblt	r9, r9, #0
 8017a78:	f04f 36ff 	movlt.w	r6, #4294967295
 8017a7c:	2601      	movge	r6, #1
 8017a7e:	6823      	ldrlt	r3, [r4, #0]
 8017a80:	bfbc      	itt	lt
 8017a82:	425b      	neglt	r3, r3
 8017a84:	6023      	strlt	r3, [r4, #0]
 8017a86:	2a00      	cmp	r2, #0
 8017a88:	da04      	bge.n	8017a94 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8017a8a:	6823      	ldr	r3, [r4, #0]
 8017a8c:	4257      	negs	r7, r2
 8017a8e:	4276      	negs	r6, r6
 8017a90:	425b      	negs	r3, r3
 8017a92:	6023      	str	r3, [r4, #0]
 8017a94:	2d00      	cmp	r5, #0
 8017a96:	4638      	mov	r0, r7
 8017a98:	bfba      	itte	lt
 8017a9a:	426d      	neglt	r5, r5
 8017a9c:	f04f 38ff 	movlt.w	r8, #4294967295
 8017aa0:	f04f 0801 	movge.w	r8, #1
 8017aa4:	f7ff ff64 	bl	8017970 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017aa8:	ab03      	add	r3, sp, #12
 8017aaa:	463a      	mov	r2, r7
 8017aac:	e9cd 5300 	strd	r5, r3, [sp]
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	4648      	mov	r0, r9
 8017ab4:	f7ff ff7a 	bl	80179ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017ab8:	6823      	ldr	r3, [r4, #0]
 8017aba:	9a03      	ldr	r2, [sp, #12]
 8017abc:	4546      	cmp	r6, r8
 8017abe:	441a      	add	r2, r3
 8017ac0:	fb92 f3f5 	sdiv	r3, r2, r5
 8017ac4:	4418      	add	r0, r3
 8017ac6:	fb05 2313 	mls	r3, r5, r3, r2
 8017aca:	bf18      	it	ne
 8017acc:	4240      	negne	r0, r0
 8017ace:	1c72      	adds	r2, r6, #1
 8017ad0:	6023      	str	r3, [r4, #0]
 8017ad2:	d105      	bne.n	8017ae0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	f1c3 0200 	rsb	r2, r3, #0
 8017ada:	db0b      	blt.n	8017af4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017adc:	6022      	str	r2, [r4, #0]
 8017ade:	e006      	b.n	8017aee <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017ae0:	2e01      	cmp	r6, #1
 8017ae2:	d104      	bne.n	8017aee <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	da02      	bge.n	8017aee <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017ae8:	442b      	add	r3, r5
 8017aea:	3801      	subs	r0, #1
 8017aec:	6023      	str	r3, [r4, #0]
 8017aee:	b005      	add	sp, #20
 8017af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017af4:	3801      	subs	r0, #1
 8017af6:	1b52      	subs	r2, r2, r5
 8017af8:	e7f0      	b.n	8017adc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017afc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017afc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017b00:	4c1c      	ldr	r4, [pc, #112]	; (8017b74 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017b02:	4605      	mov	r5, r0
 8017b04:	6807      	ldr	r7, [r0, #0]
 8017b06:	69a3      	ldr	r3, [r4, #24]
 8017b08:	b92b      	cbnz	r3, 8017b16 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8017b0a:	6840      	ldr	r0, [r0, #4]
 8017b0c:	e9c5 7000 	strd	r7, r0, [r5]
 8017b10:	b004      	add	sp, #16
 8017b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b16:	f04f 0802 	mov.w	r8, #2
 8017b1a:	68a2      	ldr	r2, [r4, #8]
 8017b1c:	ae04      	add	r6, sp, #16
 8017b1e:	6820      	ldr	r0, [r4, #0]
 8017b20:	fb93 f1f8 	sdiv	r1, r3, r8
 8017b24:	440a      	add	r2, r1
 8017b26:	69e1      	ldr	r1, [r4, #28]
 8017b28:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017b2c:	463a      	mov	r2, r7
 8017b2e:	9600      	str	r6, [sp, #0]
 8017b30:	f7ff ff97 	bl	8017a62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017b34:	69a3      	ldr	r3, [r4, #24]
 8017b36:	4607      	mov	r7, r0
 8017b38:	686a      	ldr	r2, [r5, #4]
 8017b3a:	6a21      	ldr	r1, [r4, #32]
 8017b3c:	9600      	str	r6, [sp, #0]
 8017b3e:	6860      	ldr	r0, [r4, #4]
 8017b40:	f7ff ff8f 	bl	8017a62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017b44:	69a3      	ldr	r3, [r4, #24]
 8017b46:	6962      	ldr	r2, [r4, #20]
 8017b48:	4407      	add	r7, r0
 8017b4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017b4c:	9600      	str	r6, [sp, #0]
 8017b4e:	68e0      	ldr	r0, [r4, #12]
 8017b50:	fb93 f8f8 	sdiv	r8, r3, r8
 8017b54:	4442      	add	r2, r8
 8017b56:	9203      	str	r2, [sp, #12]
 8017b58:	682a      	ldr	r2, [r5, #0]
 8017b5a:	f7ff ff82 	bl	8017a62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017b5e:	4680      	mov	r8, r0
 8017b60:	9600      	str	r6, [sp, #0]
 8017b62:	69a3      	ldr	r3, [r4, #24]
 8017b64:	686a      	ldr	r2, [r5, #4]
 8017b66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8017b68:	6920      	ldr	r0, [r4, #16]
 8017b6a:	f7ff ff7a 	bl	8017a62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017b6e:	4440      	add	r0, r8
 8017b70:	e7cc      	b.n	8017b0c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8017b72:	bf00      	nop
 8017b74:	2400fef0 	.word	0x2400fef0

08017b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8017b78:	4b07      	ldr	r3, [pc, #28]	; (8017b98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8017b7a:	781b      	ldrb	r3, [r3, #0]
 8017b7c:	2b01      	cmp	r3, #1
 8017b7e:	d109      	bne.n	8017b94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8017b80:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017b84:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017b88:	8003      	strh	r3, [r0, #0]
 8017b8a:	4b04      	ldr	r3, [pc, #16]	; (8017b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8017b8c:	881b      	ldrh	r3, [r3, #0]
 8017b8e:	3b01      	subs	r3, #1
 8017b90:	1a9b      	subs	r3, r3, r2
 8017b92:	800b      	strh	r3, [r1, #0]
 8017b94:	4770      	bx	lr
 8017b96:	bf00      	nop
 8017b98:	2400fedc 	.word	0x2400fedc
 8017b9c:	2400fed8 	.word	0x2400fed8

08017ba0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017ba0:	4b07      	ldr	r3, [pc, #28]	; (8017bc0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017ba2:	b510      	push	{r4, lr}
 8017ba4:	781b      	ldrb	r3, [r3, #0]
 8017ba6:	2b01      	cmp	r3, #1
 8017ba8:	d108      	bne.n	8017bbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8017baa:	4b06      	ldr	r3, [pc, #24]	; (8017bc4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017bac:	880c      	ldrh	r4, [r1, #0]
 8017bae:	881b      	ldrh	r3, [r3, #0]
 8017bb0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017bb4:	3b01      	subs	r3, #1
 8017bb6:	1b1b      	subs	r3, r3, r4
 8017bb8:	8003      	strh	r3, [r0, #0]
 8017bba:	800a      	strh	r2, [r1, #0]
 8017bbc:	bd10      	pop	{r4, pc}
 8017bbe:	bf00      	nop
 8017bc0:	2400fedc 	.word	0x2400fedc
 8017bc4:	2400fed8 	.word	0x2400fed8

08017bc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8017bc8:	4b0a      	ldr	r3, [pc, #40]	; (8017bf4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8017bca:	b510      	push	{r4, lr}
 8017bcc:	781b      	ldrb	r3, [r3, #0]
 8017bce:	2b01      	cmp	r3, #1
 8017bd0:	d10e      	bne.n	8017bf0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017bd2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017bd6:	8843      	ldrh	r3, [r0, #2]
 8017bd8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017bdc:	18ca      	adds	r2, r1, r3
 8017bde:	4b06      	ldr	r3, [pc, #24]	; (8017bf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017be0:	8044      	strh	r4, [r0, #2]
 8017be2:	881b      	ldrh	r3, [r3, #0]
 8017be4:	1a9b      	subs	r3, r3, r2
 8017be6:	8003      	strh	r3, [r0, #0]
 8017be8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017bec:	8081      	strh	r1, [r0, #4]
 8017bee:	80c3      	strh	r3, [r0, #6]
 8017bf0:	bd10      	pop	{r4, pc}
 8017bf2:	bf00      	nop
 8017bf4:	2400fedc 	.word	0x2400fedc
 8017bf8:	2400fed8 	.word	0x2400fed8

08017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017bfc:	4b08      	ldr	r3, [pc, #32]	; (8017c20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	2b01      	cmp	r3, #1
 8017c02:	d10c      	bne.n	8017c1e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017c04:	8803      	ldrh	r3, [r0, #0]
 8017c06:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8017c0a:	8842      	ldrh	r2, [r0, #2]
 8017c0c:	8002      	strh	r2, [r0, #0]
 8017c0e:	185a      	adds	r2, r3, r1
 8017c10:	4b04      	ldr	r3, [pc, #16]	; (8017c24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017c12:	881b      	ldrh	r3, [r3, #0]
 8017c14:	1a9b      	subs	r3, r3, r2
 8017c16:	8043      	strh	r3, [r0, #2]
 8017c18:	88c3      	ldrh	r3, [r0, #6]
 8017c1a:	80c1      	strh	r1, [r0, #6]
 8017c1c:	8083      	strh	r3, [r0, #4]
 8017c1e:	4770      	bx	lr
 8017c20:	2400fedc 	.word	0x2400fedc
 8017c24:	2400fed8 	.word	0x2400fed8

08017c28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8017c28:	4b07      	ldr	r3, [pc, #28]	; (8017c48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8017c2a:	b510      	push	{r4, lr}
 8017c2c:	781b      	ldrb	r3, [r3, #0]
 8017c2e:	2b01      	cmp	r3, #1
 8017c30:	d108      	bne.n	8017c44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017c32:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017c36:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017c3a:	8003      	strh	r3, [r0, #0]
 8017c3c:	8893      	ldrh	r3, [r2, #4]
 8017c3e:	3b01      	subs	r3, #1
 8017c40:	1b1b      	subs	r3, r3, r4
 8017c42:	800b      	strh	r3, [r1, #0]
 8017c44:	bd10      	pop	{r4, pc}
 8017c46:	bf00      	nop
 8017c48:	2400fedc 	.word	0x2400fedc

08017c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8017c4c:	4b0a      	ldr	r3, [pc, #40]	; (8017c78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8017c4e:	460a      	mov	r2, r1
 8017c50:	b510      	push	{r4, lr}
 8017c52:	781b      	ldrb	r3, [r3, #0]
 8017c54:	2b01      	cmp	r3, #1
 8017c56:	d10d      	bne.n	8017c74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8017c58:	8881      	ldrh	r1, [r0, #4]
 8017c5a:	8803      	ldrh	r3, [r0, #0]
 8017c5c:	440b      	add	r3, r1
 8017c5e:	4601      	mov	r1, r0
 8017c60:	3b01      	subs	r3, #1
 8017c62:	f821 3b02 	strh.w	r3, [r1], #2
 8017c66:	f7ff ffdf 	bl	8017c28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8017c6a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017c6e:	88c2      	ldrh	r2, [r0, #6]
 8017c70:	80c3      	strh	r3, [r0, #6]
 8017c72:	8082      	strh	r2, [r0, #4]
 8017c74:	bd10      	pop	{r4, pc}
 8017c76:	bf00      	nop
 8017c78:	2400fedc 	.word	0x2400fedc

08017c7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017c7c:	b570      	push	{r4, r5, r6, lr}
 8017c7e:	2300      	movs	r3, #0
 8017c80:	4c0a      	ldr	r4, [pc, #40]	; (8017cac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8017c82:	4605      	mov	r5, r0
 8017c84:	460e      	mov	r6, r1
 8017c86:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8017c8a:	6820      	ldr	r0, [r4, #0]
 8017c8c:	b110      	cbz	r0, 8017c94 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8017c8e:	6803      	ldr	r3, [r0, #0]
 8017c90:	695b      	ldr	r3, [r3, #20]
 8017c92:	4798      	blx	r3
 8017c94:	6026      	str	r6, [r4, #0]
 8017c96:	4630      	mov	r0, r6
 8017c98:	6833      	ldr	r3, [r6, #0]
 8017c9a:	68db      	ldr	r3, [r3, #12]
 8017c9c:	4798      	blx	r3
 8017c9e:	682b      	ldr	r3, [r5, #0]
 8017ca0:	4628      	mov	r0, r5
 8017ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ca8:	4718      	bx	r3
 8017caa:	bf00      	nop
 8017cac:	2400ff20 	.word	0x2400ff20

08017cb0 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017cb0:	4b06      	ldr	r3, [pc, #24]	; (8017ccc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017cb2:	2100      	movs	r1, #0
 8017cb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017cb8:	4b05      	ldr	r3, [pc, #20]	; (8017cd0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8017cba:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8017cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017cc2:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8017cc6:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8017cca:	4770      	bx	lr
 8017ccc:	2400fed8 	.word	0x2400fed8
 8017cd0:	2400feda 	.word	0x2400feda

08017cd4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017cd4:	4b03      	ldr	r3, [pc, #12]	; (8017ce4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8017cd6:	6818      	ldr	r0, [r3, #0]
 8017cd8:	b110      	cbz	r0, 8017ce0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8017cda:	6803      	ldr	r3, [r0, #0]
 8017cdc:	699b      	ldr	r3, [r3, #24]
 8017cde:	4718      	bx	r3
 8017ce0:	4770      	bx	lr
 8017ce2:	bf00      	nop
 8017ce4:	2400ff20 	.word	0x2400ff20

08017ce8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8017ce8:	4770      	bx	lr
	...

08017cec <_ZN8touchgfx11Application4drawEv>:
 8017cec:	4b09      	ldr	r3, [pc, #36]	; (8017d14 <_ZN8touchgfx11Application4drawEv+0x28>)
 8017cee:	b507      	push	{r0, r1, r2, lr}
 8017cf0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017cf4:	2100      	movs	r1, #0
 8017cf6:	4b08      	ldr	r3, [pc, #32]	; (8017d18 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8017cf8:	9100      	str	r1, [sp, #0]
 8017cfa:	4669      	mov	r1, sp
 8017cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d00:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017d04:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017d08:	6803      	ldr	r3, [r0, #0]
 8017d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017d0c:	4798      	blx	r3
 8017d0e:	b003      	add	sp, #12
 8017d10:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d14:	2400fed8 	.word	0x2400fed8
 8017d18:	2400feda 	.word	0x2400feda

08017d1c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017d1c:	4b03      	ldr	r3, [pc, #12]	; (8017d2c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017d1e:	6818      	ldr	r0, [r3, #0]
 8017d20:	b110      	cbz	r0, 8017d28 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017d22:	6803      	ldr	r3, [r0, #0]
 8017d24:	69db      	ldr	r3, [r3, #28]
 8017d26:	4718      	bx	r3
 8017d28:	4770      	bx	lr
 8017d2a:	bf00      	nop
 8017d2c:	2400ff20 	.word	0x2400ff20

08017d30 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017d30:	4b03      	ldr	r3, [pc, #12]	; (8017d40 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017d32:	6818      	ldr	r0, [r3, #0]
 8017d34:	b110      	cbz	r0, 8017d3c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8017d36:	6803      	ldr	r3, [r0, #0]
 8017d38:	6a1b      	ldr	r3, [r3, #32]
 8017d3a:	4718      	bx	r3
 8017d3c:	4770      	bx	lr
 8017d3e:	bf00      	nop
 8017d40:	2400ff20 	.word	0x2400ff20

08017d44 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8017d44:	2300      	movs	r3, #0
 8017d46:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8017d4a:	4770      	bx	lr

08017d4c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8017d4c:	4b03      	ldr	r3, [pc, #12]	; (8017d5c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8017d4e:	6818      	ldr	r0, [r3, #0]
 8017d50:	b110      	cbz	r0, 8017d58 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8017d52:	6803      	ldr	r3, [r0, #0]
 8017d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d56:	4718      	bx	r3
 8017d58:	4770      	bx	lr
 8017d5a:	bf00      	nop
 8017d5c:	2400ff20 	.word	0x2400ff20

08017d60 <_ZN8touchgfx11Application15handleTickEventEv>:
 8017d60:	b570      	push	{r4, r5, r6, lr}
 8017d62:	4d32      	ldr	r5, [pc, #200]	; (8017e2c <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8017d64:	4604      	mov	r4, r0
 8017d66:	6828      	ldr	r0, [r5, #0]
 8017d68:	b140      	cbz	r0, 8017d7c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017d6a:	7a03      	ldrb	r3, [r0, #8]
 8017d6c:	b933      	cbnz	r3, 8017d7c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017d6e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8017d72:	6803      	ldr	r3, [r0, #0]
 8017d74:	689b      	ldr	r3, [r3, #8]
 8017d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d7a:	4718      	bx	r3
 8017d7c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8017d80:	b97b      	cbnz	r3, 8017da2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017d82:	b170      	cbz	r0, 8017da2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017d84:	7a03      	ldrb	r3, [r0, #8]
 8017d86:	b163      	cbz	r3, 8017da2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017d88:	4b29      	ldr	r3, [pc, #164]	; (8017e30 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8017d8a:	6818      	ldr	r0, [r3, #0]
 8017d8c:	b110      	cbz	r0, 8017d94 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8017d8e:	6803      	ldr	r3, [r0, #0]
 8017d90:	691b      	ldr	r3, [r3, #16]
 8017d92:	4798      	blx	r3
 8017d94:	6828      	ldr	r0, [r5, #0]
 8017d96:	6803      	ldr	r3, [r0, #0]
 8017d98:	68db      	ldr	r3, [r3, #12]
 8017d9a:	4798      	blx	r3
 8017d9c:	2301      	movs	r3, #1
 8017d9e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8017da2:	2500      	movs	r5, #0
 8017da4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8017da8:	42a8      	cmp	r0, r5
 8017daa:	dd0c      	ble.n	8017dc6 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8017dac:	1963      	adds	r3, r4, r5
 8017dae:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017db2:	b132      	cbz	r2, 8017dc2 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8017db4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8017db8:	4413      	add	r3, r2
 8017dba:	6858      	ldr	r0, [r3, #4]
 8017dbc:	6803      	ldr	r3, [r0, #0]
 8017dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017dc0:	4798      	blx	r3
 8017dc2:	3501      	adds	r5, #1
 8017dc4:	e7ee      	b.n	8017da4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	461a      	mov	r2, r3
 8017dca:	4298      	cmp	r0, r3
 8017dcc:	d015      	beq.n	8017dfa <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8017dce:	18e1      	adds	r1, r4, r3
 8017dd0:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8017dd4:	b16d      	cbz	r5, 8017df2 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8017dd6:	429a      	cmp	r2, r3
 8017dd8:	d00a      	beq.n	8017df0 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8017dda:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8017dde:	4431      	add	r1, r6
 8017de0:	684e      	ldr	r6, [r1, #4]
 8017de2:	b291      	uxth	r1, r2
 8017de4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8017de8:	604e      	str	r6, [r1, #4]
 8017dea:	18a1      	adds	r1, r4, r2
 8017dec:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017df0:	3201      	adds	r2, #1
 8017df2:	3301      	adds	r3, #1
 8017df4:	e7e9      	b.n	8017dca <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8017df6:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8017dfa:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8017dfe:	4295      	cmp	r5, r2
 8017e00:	dd0d      	ble.n	8017e1e <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8017e02:	1e6b      	subs	r3, r5, #1
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3104      	adds	r1, #4
 8017e0e:	4285      	cmp	r5, r0
 8017e10:	ddf1      	ble.n	8017df6 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8017e12:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8017e16:	3001      	adds	r0, #1
 8017e18:	f841 6c04 	str.w	r6, [r1, #-4]
 8017e1c:	e7f7      	b.n	8017e0e <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8017e1e:	4b04      	ldr	r3, [pc, #16]	; (8017e30 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8017e20:	6818      	ldr	r0, [r3, #0]
 8017e22:	b110      	cbz	r0, 8017e2a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8017e24:	6803      	ldr	r3, [r0, #0]
 8017e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e28:	e7a5      	b.n	8017d76 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017e2a:	bd70      	pop	{r4, r5, r6, pc}
 8017e2c:	2400ff24 	.word	0x2400ff24
 8017e30:	2400ff20 	.word	0x2400ff20

08017e34 <_ZN8touchgfx11ApplicationD1Ev>:
 8017e34:	4770      	bx	lr

08017e36 <_ZN8touchgfx11ApplicationD0Ev>:
 8017e36:	b510      	push	{r4, lr}
 8017e38:	4604      	mov	r4, r0
 8017e3a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8017e3e:	f00b f9fa 	bl	8023236 <_ZdlPvj>
 8017e42:	4620      	mov	r0, r4
 8017e44:	bd10      	pop	{r4, pc}

08017e46 <_ZN8touchgfx4Rect10restrictToEss>:
 8017e46:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	b510      	push	{r4, lr}
 8017e4e:	da04      	bge.n	8017e5a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8017e50:	8884      	ldrh	r4, [r0, #4]
 8017e52:	4423      	add	r3, r4
 8017e54:	8083      	strh	r3, [r0, #4]
 8017e56:	2300      	movs	r3, #0
 8017e58:	8003      	strh	r3, [r0, #0]
 8017e5a:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017e5e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017e62:	1b09      	subs	r1, r1, r4
 8017e64:	428b      	cmp	r3, r1
 8017e66:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017e6a:	bfc8      	it	gt
 8017e6c:	8081      	strhgt	r1, [r0, #4]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	da04      	bge.n	8017e7c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8017e72:	88c1      	ldrh	r1, [r0, #6]
 8017e74:	440b      	add	r3, r1
 8017e76:	80c3      	strh	r3, [r0, #6]
 8017e78:	2300      	movs	r3, #0
 8017e7a:	8043      	strh	r3, [r0, #2]
 8017e7c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017e80:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017e84:	1a52      	subs	r2, r2, r1
 8017e86:	4293      	cmp	r3, r2
 8017e88:	bfc8      	it	gt
 8017e8a:	80c2      	strhgt	r2, [r0, #6]
 8017e8c:	bd10      	pop	{r4, pc}
	...

08017e90 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017e90:	4b10      	ldr	r3, [pc, #64]	; (8017ed4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8017e92:	b510      	push	{r4, lr}
 8017e94:	460c      	mov	r4, r1
 8017e96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017e9a:	4b0f      	ldr	r3, [pc, #60]	; (8017ed8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8017e9c:	4620      	mov	r0, r4
 8017e9e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017ea2:	f7ff ffd0 	bl	8017e46 <_ZN8touchgfx4Rect10restrictToEss>
 8017ea6:	4b0d      	ldr	r3, [pc, #52]	; (8017edc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8017ea8:	6818      	ldr	r0, [r3, #0]
 8017eaa:	b190      	cbz	r0, 8017ed2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017eac:	6803      	ldr	r3, [r0, #0]
 8017eae:	4621      	mov	r1, r4
 8017eb0:	689b      	ldr	r3, [r3, #8]
 8017eb2:	4798      	blx	r3
 8017eb4:	4b0a      	ldr	r3, [pc, #40]	; (8017ee0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8017eb6:	6818      	ldr	r0, [r3, #0]
 8017eb8:	b118      	cbz	r0, 8017ec2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8017eba:	6803      	ldr	r3, [r0, #0]
 8017ebc:	4621      	mov	r1, r4
 8017ebe:	689b      	ldr	r3, [r3, #8]
 8017ec0:	4798      	blx	r3
 8017ec2:	4b08      	ldr	r3, [pc, #32]	; (8017ee4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8017ec4:	4621      	mov	r1, r4
 8017ec6:	6818      	ldr	r0, [r3, #0]
 8017ec8:	6803      	ldr	r3, [r0, #0]
 8017eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ece:	69db      	ldr	r3, [r3, #28]
 8017ed0:	4718      	bx	r3
 8017ed2:	bd10      	pop	{r4, pc}
 8017ed4:	2400feda 	.word	0x2400feda
 8017ed8:	2400fed8 	.word	0x2400fed8
 8017edc:	2400ff20 	.word	0x2400ff20
 8017ee0:	2400ff1c 	.word	0x2400ff1c
 8017ee4:	2400fee4 	.word	0x2400fee4

08017ee8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eea:	4606      	mov	r6, r0
 8017eec:	4608      	mov	r0, r1
 8017eee:	460f      	mov	r7, r1
 8017ef0:	f7fb fa4d 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017ef4:	b9e8      	cbnz	r0, 8017f32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017ef6:	f9b7 5000 	ldrsh.w	r5, [r7]
 8017efa:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017efe:	42a5      	cmp	r5, r4
 8017f00:	db17      	blt.n	8017f32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017f02:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017f06:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	db11      	blt.n	8017f32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017f0e:	88b9      	ldrh	r1, [r7, #4]
 8017f10:	440d      	add	r5, r1
 8017f12:	88b1      	ldrh	r1, [r6, #4]
 8017f14:	440c      	add	r4, r1
 8017f16:	b22d      	sxth	r5, r5
 8017f18:	b224      	sxth	r4, r4
 8017f1a:	42a5      	cmp	r5, r4
 8017f1c:	dc09      	bgt.n	8017f32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017f1e:	88f8      	ldrh	r0, [r7, #6]
 8017f20:	4410      	add	r0, r2
 8017f22:	88f2      	ldrh	r2, [r6, #6]
 8017f24:	4413      	add	r3, r2
 8017f26:	b200      	sxth	r0, r0
 8017f28:	b21b      	sxth	r3, r3
 8017f2a:	4298      	cmp	r0, r3
 8017f2c:	bfcc      	ite	gt
 8017f2e:	2000      	movgt	r0, #0
 8017f30:	2001      	movle	r0, #1
 8017f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017f34 <_ZN8touchgfx11Application11getInstanceEv>:
 8017f34:	4b01      	ldr	r3, [pc, #4]	; (8017f3c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017f36:	6818      	ldr	r0, [r3, #0]
 8017f38:	4770      	bx	lr
 8017f3a:	bf00      	nop
 8017f3c:	2400ff30 	.word	0x2400ff30

08017f40 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8017f40:	b570      	push	{r4, r5, r6, lr}
 8017f42:	2200      	movs	r2, #0
 8017f44:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8017f48:	1d04      	adds	r4, r0, #4
 8017f4a:	b295      	uxth	r5, r2
 8017f4c:	429d      	cmp	r5, r3
 8017f4e:	d20e      	bcs.n	8017f6e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8017f50:	f854 6b04 	ldr.w	r6, [r4], #4
 8017f54:	4615      	mov	r5, r2
 8017f56:	3201      	adds	r2, #1
 8017f58:	428e      	cmp	r6, r1
 8017f5a:	d1f6      	bne.n	8017f4a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8017f5c:	4428      	add	r0, r5
 8017f5e:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8017f62:	2bff      	cmp	r3, #255	; 0xff
 8017f64:	d002      	beq.n	8017f6c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8017f66:	3301      	adds	r3, #1
 8017f68:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8017f6c:	bd70      	pop	{r4, r5, r6, pc}
 8017f6e:	18c2      	adds	r2, r0, r3
 8017f70:	2b20      	cmp	r3, #32
 8017f72:	f04f 0401 	mov.w	r4, #1
 8017f76:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8017f7a:	bf1f      	itttt	ne
 8017f7c:	191a      	addne	r2, r3, r4
 8017f7e:	f8a0 2084 	strhne.w	r2, [r0, #132]	; 0x84
 8017f82:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
 8017f86:	6041      	strne	r1, [r0, #4]
 8017f88:	e7f0      	b.n	8017f6c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>

08017f8a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8017f8a:	b570      	push	{r4, r5, r6, lr}
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8017f92:	1d04      	adds	r4, r0, #4
 8017f94:	b29a      	uxth	r2, r3
 8017f96:	4296      	cmp	r6, r2
 8017f98:	d90a      	bls.n	8017fb0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8017f9a:	f854 2b04 	ldr.w	r2, [r4], #4
 8017f9e:	428a      	cmp	r2, r1
 8017fa0:	d107      	bne.n	8017fb2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8017fa2:	18c5      	adds	r5, r0, r3
 8017fa4:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8017fa8:	b11a      	cbz	r2, 8017fb2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8017faa:	3a01      	subs	r2, #1
 8017fac:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8017fb0:	bd70      	pop	{r4, r5, r6, pc}
 8017fb2:	3301      	adds	r3, #1
 8017fb4:	e7ee      	b.n	8017f94 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08017fb6 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8017fbc:	30a8      	adds	r0, #168	; 0xa8
 8017fbe:	f820 3c24 	strh.w	r3, [r0, #-36]
 8017fc2:	f802 3b01 	strb.w	r3, [r2], #1
 8017fc6:	4282      	cmp	r2, r0
 8017fc8:	d1fb      	bne.n	8017fc2 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8017fca:	4770      	bx	lr

08017fcc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017fcc:	4603      	mov	r3, r0
 8017fce:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	801a      	strh	r2, [r3, #0]
 8017fd6:	3308      	adds	r3, #8
 8017fd8:	f823 2c06 	strh.w	r2, [r3, #-6]
 8017fdc:	f823 2c04 	strh.w	r2, [r3, #-4]
 8017fe0:	f823 2c02 	strh.w	r2, [r3, #-2]
 8017fe4:	428b      	cmp	r3, r1
 8017fe6:	d1f5      	bne.n	8017fd4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017fe8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017fec:	4770      	bx	lr
	...

08017ff0 <_ZN8touchgfx11ApplicationC1Ev>:
 8017ff0:	b570      	push	{r4, r5, r6, lr}
 8017ff2:	4b19      	ldr	r3, [pc, #100]	; (8018058 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8017ff4:	2500      	movs	r5, #0
 8017ff6:	4604      	mov	r4, r0
 8017ff8:	30a8      	adds	r0, #168	; 0xa8
 8017ffa:	f840 3ca8 	str.w	r3, [r0, #-168]
 8017ffe:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018002:	f7ff ffe3 	bl	8017fcc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018006:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801800a:	f7ff ffdf 	bl	8017fcc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801800e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8018012:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8018016:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801801a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801801e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8018022:	490e      	ldr	r1, [pc, #56]	; (801805c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018024:	480e      	ldr	r0, [pc, #56]	; (8018060 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018026:	f00a fffd 	bl	8023024 <CRC_Lock>
 801802a:	4e0e      	ldr	r6, [pc, #56]	; (8018064 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801802c:	4b0e      	ldr	r3, [pc, #56]	; (8018068 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801802e:	b158      	cbz	r0, 8018048 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 8018030:	801d      	strh	r5, [r3, #0]
 8018032:	2300      	movs	r3, #0
 8018034:	4a0d      	ldr	r2, [pc, #52]	; (801806c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018036:	4620      	mov	r0, r4
 8018038:	6013      	str	r3, [r2, #0]
 801803a:	4a0d      	ldr	r2, [pc, #52]	; (8018070 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801803c:	6033      	str	r3, [r6, #0]
 801803e:	6013      	str	r3, [r2, #0]
 8018040:	f7ff ffb9 	bl	8017fb6 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018044:	4620      	mov	r0, r4
 8018046:	bd70      	pop	{r4, r5, r6, pc}
 8018048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801804c:	2002      	movs	r0, #2
 801804e:	801a      	strh	r2, [r3, #0]
 8018050:	6030      	str	r0, [r6, #0]
 8018052:	f001 fa09 	bl	8019468 <_ZN8touchgfx6Screen4drawEv>
 8018056:	e7ec      	b.n	8018032 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8018058:	08026f98 	.word	0x08026f98
 801805c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018060:	f407a5c2 	.word	0xf407a5c2
 8018064:	2400ff20 	.word	0x2400ff20
 8018068:	24000084 	.word	0x24000084
 801806c:	2400ff30 	.word	0x2400ff30
 8018070:	2400ff24 	.word	0x2400ff24

08018074 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018074:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018078:	3b01      	subs	r3, #1
 801807a:	b29b      	uxth	r3, r3
 801807c:	428b      	cmp	r3, r1
 801807e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018082:	b510      	push	{r4, lr}
 8018084:	d908      	bls.n	8018098 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8018086:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801808a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801808e:	681a      	ldr	r2, [r3, #0]
 8018090:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018094:	685a      	ldr	r2, [r3, #4]
 8018096:	6062      	str	r2, [r4, #4]
 8018098:	bd10      	pop	{r4, pc}
	...

0801809c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180a0:	b08f      	sub	sp, #60	; 0x3c
 80180a2:	4b94      	ldr	r3, [pc, #592]	; (80182f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 80180a4:	4683      	mov	fp, r0
 80180a6:	ac0a      	add	r4, sp, #40	; 0x28
 80180a8:	e884 0006 	stmia.w	r4, {r1, r2}
 80180ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80180b0:	4620      	mov	r0, r4
 80180b2:	4b91      	ldr	r3, [pc, #580]	; (80182f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 80180b4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80180b8:	f7ff fec5 	bl	8017e46 <_ZN8touchgfx4Rect10restrictToEss>
 80180bc:	4620      	mov	r0, r4
 80180be:	f7fb f966 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 80180c2:	2800      	cmp	r0, #0
 80180c4:	d16a      	bne.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80180c6:	9403      	str	r4, [sp, #12]
 80180c8:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80180cc:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80180d0:	2400      	movs	r4, #0
 80180d2:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80180d6:	9301      	str	r3, [sp, #4]
 80180d8:	36a0      	adds	r6, #160	; 0xa0
 80180da:	42a5      	cmp	r5, r4
 80180dc:	d00d      	beq.n	80180fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80180de:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80180e2:	9803      	ldr	r0, [sp, #12]
 80180e4:	f7ff ff00 	bl	8017ee8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80180e8:	b128      	cbz	r0, 80180f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80180ea:	1e69      	subs	r1, r5, #1
 80180ec:	9801      	ldr	r0, [sp, #4]
 80180ee:	1b09      	subs	r1, r1, r4
 80180f0:	b289      	uxth	r1, r1
 80180f2:	f7ff ffbf 	bl	8018074 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80180f6:	3401      	adds	r4, #1
 80180f8:	e7ef      	b.n	80180da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 80180fa:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80180fe:	1e7b      	subs	r3, r7, #1
 8018100:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8018104:	9704      	str	r7, [sp, #16]
 8018106:	9302      	str	r3, [sp, #8]
 8018108:	2400      	movs	r4, #0
 801810a:	4655      	mov	r5, sl
 801810c:	9705      	str	r7, [sp, #20]
 801810e:	4626      	mov	r6, r4
 8018110:	9b05      	ldr	r3, [sp, #20]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d078      	beq.n	8018208 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8018116:	9903      	ldr	r1, [sp, #12]
 8018118:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801811c:	f7fd ff58 	bl	8015fd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018120:	b360      	cbz	r0, 801817c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018122:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8018126:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801812a:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801812e:	45e6      	cmp	lr, ip
 8018130:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8018134:	db35      	blt.n	80181a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018136:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801813a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801813e:	4472      	add	r2, lr
 8018140:	4463      	add	r3, ip
 8018142:	b212      	sxth	r2, r2
 8018144:	b21b      	sxth	r3, r3
 8018146:	429a      	cmp	r2, r3
 8018148:	dc2b      	bgt.n	80181a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801814a:	fa1f f288 	uxth.w	r2, r8
 801814e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018152:	45c1      	cmp	r9, r8
 8018154:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018158:	4413      	add	r3, r2
 801815a:	fa1f fc89 	uxth.w	ip, r9
 801815e:	b29b      	uxth	r3, r3
 8018160:	fa0f fe83 	sxth.w	lr, r3
 8018164:	db0f      	blt.n	8018186 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018166:	eba3 030c 	sub.w	r3, r3, ip
 801816a:	1ac9      	subs	r1, r1, r3
 801816c:	b209      	sxth	r1, r1
 801816e:	2900      	cmp	r1, #0
 8018170:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018174:	dd12      	ble.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018176:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801817a:	4604      	mov	r4, r0
 801817c:	9b05      	ldr	r3, [sp, #20]
 801817e:	3d08      	subs	r5, #8
 8018180:	3b01      	subs	r3, #1
 8018182:	9305      	str	r3, [sp, #20]
 8018184:	e7c4      	b.n	8018110 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8018186:	4461      	add	r1, ip
 8018188:	b209      	sxth	r1, r1
 801818a:	4571      	cmp	r1, lr
 801818c:	dc3a      	bgt.n	8018204 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801818e:	eba2 020c 	sub.w	r2, r2, ip
 8018192:	b212      	sxth	r2, r2
 8018194:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8018198:	2a00      	cmp	r2, #0
 801819a:	dcee      	bgt.n	801817a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801819c:	b00f      	add	sp, #60	; 0x3c
 801819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181a2:	45c1      	cmp	r9, r8
 80181a4:	db2e      	blt.n	8018204 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80181a6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80181aa:	4499      	add	r9, r3
 80181ac:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80181b0:	4498      	add	r8, r3
 80181b2:	fa0f f989 	sxth.w	r9, r9
 80181b6:	fa0f f888 	sxth.w	r8, r8
 80181ba:	45c1      	cmp	r9, r8
 80181bc:	dc22      	bgt.n	8018204 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80181be:	fa1f f28c 	uxth.w	r2, ip
 80181c2:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80181c6:	45e6      	cmp	lr, ip
 80181c8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80181cc:	4413      	add	r3, r2
 80181ce:	fa1f f88e 	uxth.w	r8, lr
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	fa0f f983 	sxth.w	r9, r3
 80181d8:	db0a      	blt.n	80181f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 80181da:	eba3 0308 	sub.w	r3, r3, r8
 80181de:	1ac9      	subs	r1, r1, r3
 80181e0:	b209      	sxth	r1, r1
 80181e2:	2900      	cmp	r1, #0
 80181e4:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80181e8:	ddd8      	ble.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80181ea:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80181ee:	e7c4      	b.n	801817a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80181f0:	4441      	add	r1, r8
 80181f2:	b209      	sxth	r1, r1
 80181f4:	4549      	cmp	r1, r9
 80181f6:	dc05      	bgt.n	8018204 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80181f8:	eba2 0208 	sub.w	r2, r2, r8
 80181fc:	b212      	sxth	r2, r2
 80181fe:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8018202:	e7c9      	b.n	8018198 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8018204:	4606      	mov	r6, r0
 8018206:	e7b9      	b.n	801817c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018208:	2c00      	cmp	r4, #0
 801820a:	f47f af7d 	bne.w	8018108 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801820e:	2e00      	cmp	r6, #0
 8018210:	f000 81e1 	beq.w	80185d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8018214:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8018218:	4655      	mov	r5, sl
 801821a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801821e:	b2b9      	uxth	r1, r7
 8018220:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8018224:	b2b3      	uxth	r3, r6
 8018226:	9105      	str	r1, [sp, #20]
 8018228:	9805      	ldr	r0, [sp, #20]
 801822a:	441a      	add	r2, r3
 801822c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018230:	b292      	uxth	r2, r2
 8018232:	4401      	add	r1, r0
 8018234:	fa0f f882 	sxth.w	r8, r2
 8018238:	b289      	uxth	r1, r1
 801823a:	9106      	str	r1, [sp, #24]
 801823c:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8018240:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018244:	9b04      	ldr	r3, [sp, #16]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d058      	beq.n	80182fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801824a:	9903      	ldr	r1, [sp, #12]
 801824c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018250:	f7fd febe 	bl	8015fd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018254:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018258:	b1d8      	cbz	r0, 8018292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801825a:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801825e:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8018262:	4576      	cmp	r6, lr
 8018264:	dc26      	bgt.n	80182b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8018266:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801826a:	44f4      	add	ip, lr
 801826c:	fa0f fc8c 	sxth.w	ip, ip
 8018270:	45e0      	cmp	r8, ip
 8018272:	db1f      	blt.n	80182b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8018274:	428f      	cmp	r7, r1
 8018276:	fa1f fc81 	uxth.w	ip, r1
 801827a:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801827e:	dc0f      	bgt.n	80182a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8018280:	9806      	ldr	r0, [sp, #24]
 8018282:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8018286:	eba0 0c0c 	sub.w	ip, r0, ip
 801828a:	eba1 010c 	sub.w	r1, r1, ip
 801828e:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8018292:	4620      	mov	r0, r4
 8018294:	9904      	ldr	r1, [sp, #16]
 8018296:	3d08      	subs	r5, #8
 8018298:	4604      	mov	r4, r0
 801829a:	3901      	subs	r1, #1
 801829c:	9104      	str	r1, [sp, #16]
 801829e:	e7cf      	b.n	8018240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 80182a0:	4461      	add	r1, ip
 80182a2:	b209      	sxth	r1, r1
 80182a4:	4549      	cmp	r1, r9
 80182a6:	dcf5      	bgt.n	8018294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80182a8:	9905      	ldr	r1, [sp, #20]
 80182aa:	eba1 0c0c 	sub.w	ip, r1, ip
 80182ae:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80182b2:	e7ee      	b.n	8018292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80182b4:	428f      	cmp	r7, r1
 80182b6:	dced      	bgt.n	8018294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80182b8:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80182bc:	4461      	add	r1, ip
 80182be:	b209      	sxth	r1, r1
 80182c0:	4589      	cmp	r9, r1
 80182c2:	dbe7      	blt.n	8018294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80182c4:	4576      	cmp	r6, lr
 80182c6:	fa1f fc8e 	uxth.w	ip, lr
 80182ca:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 80182ce:	dc08      	bgt.n	80182e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80182d0:	eba2 0c0c 	sub.w	ip, r2, ip
 80182d4:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 80182d8:	eba1 010c 	sub.w	r1, r1, ip
 80182dc:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80182e0:	e7d7      	b.n	8018292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80182e2:	4461      	add	r1, ip
 80182e4:	b209      	sxth	r1, r1
 80182e6:	4588      	cmp	r8, r1
 80182e8:	dbd4      	blt.n	8018294 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80182ea:	eba3 0c0c 	sub.w	ip, r3, ip
 80182ee:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80182f2:	e7ce      	b.n	8018292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80182f4:	2400feda 	.word	0x2400feda
 80182f8:	2400fed8 	.word	0x2400fed8
 80182fc:	2c00      	cmp	r4, #0
 80182fe:	f000 816a 	beq.w	80185d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8018302:	9b02      	ldr	r3, [sp, #8]
 8018304:	3301      	adds	r3, #1
 8018306:	f000 8166 	beq.w	80185d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801830a:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801830e:	9803      	ldr	r0, [sp, #12]
 8018310:	4621      	mov	r1, r4
 8018312:	f7ff fde9 	bl	8017ee8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018316:	b120      	cbz	r0, 8018322 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8018318:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801831c:	9801      	ldr	r0, [sp, #4]
 801831e:	f7ff fea9 	bl	8018074 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018322:	9903      	ldr	r1, [sp, #12]
 8018324:	4620      	mov	r0, r4
 8018326:	f7fd fe53 	bl	8015fd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801832a:	2800      	cmp	r0, #0
 801832c:	f000 809b 	beq.w	8018466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8018330:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8018334:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8018338:	b281      	uxth	r1, r0
 801833a:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801833e:	9309      	str	r3, [sp, #36]	; 0x24
 8018340:	eb01 0c03 	add.w	ip, r1, r3
 8018344:	b2ab      	uxth	r3, r5
 8018346:	4285      	cmp	r5, r0
 8018348:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801834c:	fa1f f98c 	uxth.w	r9, ip
 8018350:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8018354:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8018358:	eb03 040c 	add.w	r4, r3, ip
 801835c:	b2a4      	uxth	r4, r4
 801835e:	9405      	str	r4, [sp, #20]
 8018360:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8018364:	9404      	str	r4, [sp, #16]
 8018366:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801836a:	f340 809a 	ble.w	80184a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801836e:	1a5b      	subs	r3, r3, r1
 8018370:	4596      	cmp	lr, r2
 8018372:	fa0f f589 	sxth.w	r5, r9
 8018376:	b29b      	uxth	r3, r3
 8018378:	b21e      	sxth	r6, r3
 801837a:	dd2e      	ble.n	80183da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801837c:	9f02      	ldr	r7, [sp, #8]
 801837e:	fa1f fe8e 	uxth.w	lr, lr
 8018382:	b292      	uxth	r2, r2
 8018384:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8018388:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801838c:	9f04      	ldr	r7, [sp, #16]
 801838e:	ebae 0102 	sub.w	r1, lr, r2
 8018392:	4486      	add	lr, r0
 8018394:	1b7f      	subs	r7, r7, r5
 8018396:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801839a:	b289      	uxth	r1, r1
 801839c:	442a      	add	r2, r5
 801839e:	fa0f fe8e 	sxth.w	lr, lr
 80183a2:	b20c      	sxth	r4, r1
 80183a4:	b212      	sxth	r2, r2
 80183a6:	4367      	muls	r7, r4
 80183a8:	ebae 0202 	sub.w	r2, lr, r2
 80183ac:	4372      	muls	r2, r6
 80183ae:	4297      	cmp	r7, r2
 80183b0:	db09      	blt.n	80183c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 80183b2:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 80183b6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80183ba:	449c      	add	ip, r3
 80183bc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80183c0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80183c4:	e680      	b.n	80180c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80183c6:	4401      	add	r1, r0
 80183c8:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80183cc:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 80183d0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80183d4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80183d8:	e676      	b.n	80180c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80183da:	9f04      	ldr	r7, [sp, #16]
 80183dc:	42bd      	cmp	r5, r7
 80183de:	da27      	bge.n	8018430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 80183e0:	9902      	ldr	r1, [sp, #8]
 80183e2:	1b7f      	subs	r7, r7, r5
 80183e4:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80183e8:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 80183ec:	eb04 010e 	add.w	r1, r4, lr
 80183f0:	fa1f f881 	uxth.w	r8, r1
 80183f4:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 80183f8:	4411      	add	r1, r2
 80183fa:	fa0f f988 	sxth.w	r9, r8
 80183fe:	eba2 020e 	sub.w	r2, r2, lr
 8018402:	eba1 0108 	sub.w	r1, r1, r8
 8018406:	4372      	muls	r2, r6
 8018408:	b289      	uxth	r1, r1
 801840a:	fa0f f881 	sxth.w	r8, r1
 801840e:	fb08 f707 	mul.w	r7, r8, r7
 8018412:	42ba      	cmp	r2, r7
 8018414:	dc06      	bgt.n	8018424 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8018416:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801841a:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801841e:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8018422:	e7ca      	b.n	80183ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8018424:	4421      	add	r1, r4
 8018426:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801842a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801842e:	e64b      	b.n	80180c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018430:	9d05      	ldr	r5, [sp, #20]
 8018432:	2c06      	cmp	r4, #6
 8018434:	eba9 0505 	sub.w	r5, r9, r5
 8018438:	b2ad      	uxth	r5, r5
 801843a:	fa0f fe85 	sxth.w	lr, r5
 801843e:	d818      	bhi.n	8018472 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8018440:	9b04      	ldr	r3, [sp, #16]
 8018442:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8018446:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801844a:	1c63      	adds	r3, r4, #1
 801844c:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8018450:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8018454:	9b01      	ldr	r3, [sp, #4]
 8018456:	9d01      	ldr	r5, [sp, #4]
 8018458:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801845c:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8018460:	805a      	strh	r2, [r3, #2]
 8018462:	809e      	strh	r6, [r3, #4]
 8018464:	80d9      	strh	r1, [r3, #6]
 8018466:	9b02      	ldr	r3, [sp, #8]
 8018468:	f1aa 0a08 	sub.w	sl, sl, #8
 801846c:	3b01      	subs	r3, #1
 801846e:	9302      	str	r3, [sp, #8]
 8018470:	e747      	b.n	8018302 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8018472:	9a02      	ldr	r2, [sp, #8]
 8018474:	45b6      	cmp	lr, r6
 8018476:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801847a:	db0d      	blt.n	8018498 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801847c:	449c      	add	ip, r3
 801847e:	445a      	add	r2, fp
 8018480:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8018484:	fa1f fc8c 	uxth.w	ip, ip
 8018488:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801848c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8018490:	448c      	add	ip, r1
 8018492:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8018496:	e617      	b.n	80180c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018498:	445a      	add	r2, fp
 801849a:	44ac      	add	ip, r5
 801849c:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 80184a0:	e78e      	b.n	80183c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80184a2:	fa1f f18e 	uxth.w	r1, lr
 80184a6:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80184aa:	b293      	uxth	r3, r2
 80184ac:	4596      	cmp	lr, r2
 80184ae:	eb01 0806 	add.w	r8, r1, r6
 80184b2:	9306      	str	r3, [sp, #24]
 80184b4:	fa1f f888 	uxth.w	r8, r8
 80184b8:	9f06      	ldr	r7, [sp, #24]
 80184ba:	fa0f f388 	sxth.w	r3, r8
 80184be:	9307      	str	r3, [sp, #28]
 80184c0:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 80184c4:	443b      	add	r3, r7
 80184c6:	b29b      	uxth	r3, r3
 80184c8:	9308      	str	r3, [sp, #32]
 80184ca:	da25      	bge.n	8018518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 80184cc:	9905      	ldr	r1, [sp, #20]
 80184ce:	eba3 0308 	sub.w	r3, r3, r8
 80184d2:	eba2 020e 	sub.w	r2, r2, lr
 80184d6:	1b40      	subs	r0, r0, r5
 80184d8:	eba9 0401 	sub.w	r4, r9, r1
 80184dc:	b29b      	uxth	r3, r3
 80184de:	b2a4      	uxth	r4, r4
 80184e0:	b219      	sxth	r1, r3
 80184e2:	fa0f f984 	sxth.w	r9, r4
 80184e6:	4348      	muls	r0, r1
 80184e8:	fb09 f202 	mul.w	r2, r9, r2
 80184ec:	4282      	cmp	r2, r0
 80184ee:	9a02      	ldr	r2, [sp, #8]
 80184f0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80184f4:	445a      	add	r2, fp
 80184f6:	dc06      	bgt.n	8018506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 80184f8:	9b07      	ldr	r3, [sp, #28]
 80184fa:	44a4      	add	ip, r4
 80184fc:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8018500:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8018504:	e75c      	b.n	80183c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8018506:	9904      	ldr	r1, [sp, #16]
 8018508:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801850c:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8018510:	4433      	add	r3, r6
 8018512:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8018516:	e5d7      	b.n	80180c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018518:	9f06      	ldr	r7, [sp, #24]
 801851a:	9b04      	ldr	r3, [sp, #16]
 801851c:	1bc9      	subs	r1, r1, r7
 801851e:	fa0f f789 	sxth.w	r7, r9
 8018522:	b289      	uxth	r1, r1
 8018524:	429f      	cmp	r7, r3
 8018526:	fa0f fe81 	sxth.w	lr, r1
 801852a:	dd22      	ble.n	8018572 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801852c:	9a05      	ldr	r2, [sp, #20]
 801852e:	1b40      	subs	r0, r0, r5
 8018530:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018534:	eba9 0202 	sub.w	r2, r9, r2
 8018538:	9d07      	ldr	r5, [sp, #28]
 801853a:	fb0e f000 	mul.w	r0, lr, r0
 801853e:	b292      	uxth	r2, r2
 8018540:	eba5 0a03 	sub.w	sl, r5, r3
 8018544:	9b02      	ldr	r3, [sp, #8]
 8018546:	b214      	sxth	r4, r2
 8018548:	00db      	lsls	r3, r3, #3
 801854a:	fb04 fa0a 	mul.w	sl, r4, sl
 801854e:	445b      	add	r3, fp
 8018550:	4550      	cmp	r0, sl
 8018552:	db03      	blt.n	801855c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8018554:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8018558:	4494      	add	ip, r2
 801855a:	e731      	b.n	80183c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801855c:	9a04      	ldr	r2, [sp, #16]
 801855e:	4431      	add	r1, r6
 8018560:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8018564:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8018568:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801856c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018570:	e75b      	b.n	801842a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8018572:	9b08      	ldr	r3, [sp, #32]
 8018574:	2c06      	cmp	r4, #6
 8018576:	eba3 0308 	sub.w	r3, r3, r8
 801857a:	b29b      	uxth	r3, r3
 801857c:	b21d      	sxth	r5, r3
 801857e:	d813      	bhi.n	80185a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8018580:	9b07      	ldr	r3, [sp, #28]
 8018582:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8018586:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801858a:	1c63      	adds	r3, r4, #1
 801858c:	9901      	ldr	r1, [sp, #4]
 801858e:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8018592:	9b01      	ldr	r3, [sp, #4]
 8018594:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8018598:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801859c:	805a      	strh	r2, [r3, #2]
 801859e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80185a0:	f8a3 e006 	strh.w	lr, [r3, #6]
 80185a4:	809a      	strh	r2, [r3, #4]
 80185a6:	e75e      	b.n	8018466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 80185a8:	9802      	ldr	r0, [sp, #8]
 80185aa:	4575      	cmp	r5, lr
 80185ac:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80185b0:	db0d      	blt.n	80185ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 80185b2:	4431      	add	r1, r6
 80185b4:	9b06      	ldr	r3, [sp, #24]
 80185b6:	4458      	add	r0, fp
 80185b8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80185bc:	b289      	uxth	r1, r1
 80185be:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 80185c2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80185c6:	4419      	add	r1, r3
 80185c8:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 80185cc:	e57c      	b.n	80180c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80185ce:	4458      	add	r0, fp
 80185d0:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 80185d4:	e79c      	b.n	8018510 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 80185d6:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 80185da:	2e07      	cmp	r6, #7
 80185dc:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80185e0:	d812      	bhi.n	8018608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 80185e2:	1c75      	adds	r5, r6, #1
 80185e4:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80185e8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80185ec:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 80185f0:	9d01      	ldr	r5, [sp, #4]
 80185f2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80185f6:	442c      	add	r4, r5
 80185f8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80185fc:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8018600:	8061      	strh	r1, [r4, #2]
 8018602:	80a2      	strh	r2, [r4, #4]
 8018604:	80e3      	strh	r3, [r4, #6]
 8018606:	e5c9      	b.n	801819c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018608:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801860c:	3e01      	subs	r6, #1
 801860e:	445c      	add	r4, fp
 8018610:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8018614:	f04f 37ff 	mov.w	r7, #4294967295
 8018618:	2500      	movs	r5, #0
 801861a:	9305      	str	r3, [sp, #20]
 801861c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8018620:	1e72      	subs	r2, r6, #1
 8018622:	9302      	str	r3, [sp, #8]
 8018624:	4691      	mov	r9, r2
 8018626:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801862a:	9304      	str	r3, [sp, #16]
 801862c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8018630:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018634:	6818      	ldr	r0, [r3, #0]
 8018636:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801863a:	9207      	str	r2, [sp, #28]
 801863c:	bf16      	itet	ne
 801863e:	9905      	ldrne	r1, [sp, #20]
 8018640:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8018644:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8018648:	9306      	str	r3, [sp, #24]
 801864a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801864e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8018652:	fb18 f801 	smulbb	r8, r8, r1
 8018656:	6859      	ldr	r1, [r3, #4]
 8018658:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801865c:	4671      	mov	r1, lr
 801865e:	a80c      	add	r0, sp, #48	; 0x30
 8018660:	f7fb fbda 	bl	8013e18 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018664:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018668:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801866c:	f04f 0c08 	mov.w	ip, #8
 8018670:	9b04      	ldr	r3, [sp, #16]
 8018672:	9a02      	ldr	r2, [sp, #8]
 8018674:	fb10 f001 	smulbb	r0, r0, r1
 8018678:	fb02 8803 	mla	r8, r2, r3, r8
 801867c:	eba0 0108 	sub.w	r1, r0, r8
 8018680:	fb90 f0fc 	sdiv	r0, r0, ip
 8018684:	4288      	cmp	r0, r1
 8018686:	dc20      	bgt.n	80186ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8018688:	4551      	cmp	r1, sl
 801868a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801868e:	da03      	bge.n	8018698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8018690:	b1d9      	cbz	r1, 80186ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8018692:	468a      	mov	sl, r1
 8018694:	464f      	mov	r7, r9
 8018696:	4635      	mov	r5, r6
 8018698:	f109 39ff 	add.w	r9, r9, #4294967295
 801869c:	f119 0f02 	cmn.w	r9, #2
 80186a0:	d1c6      	bne.n	8018630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80186a2:	4616      	mov	r6, r2
 80186a4:	3201      	adds	r2, #1
 80186a6:	f1a4 0408 	sub.w	r4, r4, #8
 80186aa:	d1b7      	bne.n	801861c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 80186ac:	9b01      	ldr	r3, [sp, #4]
 80186ae:	b2ac      	uxth	r4, r5
 80186b0:	00ed      	lsls	r5, r5, #3
 80186b2:	1958      	adds	r0, r3, r5
 80186b4:	1c7b      	adds	r3, r7, #1
 80186b6:	d10b      	bne.n	80186d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 80186b8:	4601      	mov	r1, r0
 80186ba:	9803      	ldr	r0, [sp, #12]
 80186bc:	f7fb fbac 	bl	8013e18 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80186c0:	4621      	mov	r1, r4
 80186c2:	9801      	ldr	r0, [sp, #4]
 80186c4:	f7ff fcd6 	bl	8018074 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80186c8:	e4fe      	b.n	80180c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80186ca:	464f      	mov	r7, r9
 80186cc:	4635      	mov	r5, r6
 80186ce:	e7ed      	b.n	80186ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80186d0:	9b01      	ldr	r3, [sp, #4]
 80186d2:	00ff      	lsls	r7, r7, #3
 80186d4:	445d      	add	r5, fp
 80186d6:	19d9      	adds	r1, r3, r7
 80186d8:	445f      	add	r7, fp
 80186da:	f7fb fb9d 	bl	8013e18 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80186de:	9b03      	ldr	r3, [sp, #12]
 80186e0:	cb03      	ldmia	r3!, {r0, r1}
 80186e2:	9b03      	ldr	r3, [sp, #12]
 80186e4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80186e8:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80186ec:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 80186f0:	6869      	ldr	r1, [r5, #4]
 80186f2:	c303      	stmia	r3!, {r0, r1}
 80186f4:	e7e4      	b.n	80186c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80186f6:	bf00      	nop

080186f8 <_ZN8touchgfx11Application10invalidateEv>:
 80186f8:	4b09      	ldr	r3, [pc, #36]	; (8018720 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80186fa:	b082      	sub	sp, #8
 80186fc:	2100      	movs	r1, #0
 80186fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018702:	4b08      	ldr	r3, [pc, #32]	; (8018724 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8018704:	9100      	str	r1, [sp, #0]
 8018706:	f9b3 3000 	ldrsh.w	r3, [r3]
 801870a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801870e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018712:	ab02      	add	r3, sp, #8
 8018714:	e913 0006 	ldmdb	r3, {r1, r2}
 8018718:	b002      	add	sp, #8
 801871a:	f7ff bcbf 	b.w	801809c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801871e:	bf00      	nop
 8018720:	2400fed8 	.word	0x2400fed8
 8018724:	2400feda 	.word	0x2400feda

08018728 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8018728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801872c:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8018730:	b09b      	sub	sp, #108	; 0x6c
 8018732:	4604      	mov	r4, r0
 8018734:	4630      	mov	r0, r6
 8018736:	f7fa fe2a 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 801873a:	4605      	mov	r5, r0
 801873c:	b940      	cbnz	r0, 8018750 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801873e:	4620      	mov	r0, r4
 8018740:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018744:	f7ff fcaa 	bl	801809c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018748:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801874c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8018750:	4bc8      	ldr	r3, [pc, #800]	; (8018a74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d03e      	beq.n	80187d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8018758:	4dc7      	ldr	r5, [pc, #796]	; (8018a78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801875a:	4628      	mov	r0, r5
 801875c:	f7fa fe17 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018760:	4606      	mov	r6, r0
 8018762:	2800      	cmp	r0, #0
 8018764:	d137      	bne.n	80187d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8018766:	4628      	mov	r0, r5
 8018768:	f7ff fa2e 	bl	8017bc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801876c:	6829      	ldr	r1, [r5, #0]
 801876e:	686a      	ldr	r2, [r5, #4]
 8018770:	4620      	mov	r0, r4
 8018772:	f7ff fc93 	bl	801809c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018776:	802e      	strh	r6, [r5, #0]
 8018778:	806e      	strh	r6, [r5, #2]
 801877a:	80ae      	strh	r6, [r5, #4]
 801877c:	80ee      	strh	r6, [r5, #6]
 801877e:	ae09      	add	r6, sp, #36	; 0x24
 8018780:	4630      	mov	r0, r6
 8018782:	f7ff fc23 	bl	8017fcc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018786:	4abd      	ldr	r2, [pc, #756]	; (8018a7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8018788:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801878c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8018790:	8815      	ldrh	r5, [r2, #0]
 8018792:	9202      	str	r2, [sp, #8]
 8018794:	462b      	mov	r3, r5
 8018796:	429f      	cmp	r7, r3
 8018798:	d924      	bls.n	80187e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801879a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801879e:	2907      	cmp	r1, #7
 80187a0:	d816      	bhi.n	80187d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 80187a2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80187a6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 80187aa:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 80187ae:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80187b2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80187b6:	1c4a      	adds	r2, r1, #1
 80187b8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80187bc:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 80187c0:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 80187c4:	f8a2 9002 	strh.w	r9, [r2, #2]
 80187c8:	f8a2 e004 	strh.w	lr, [r2, #4]
 80187cc:	f8a2 c006 	strh.w	ip, [r2, #6]
 80187d0:	3301      	adds	r3, #1
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	e7df      	b.n	8018796 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 80187d6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d1cf      	bne.n	801877e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80187de:	b01b      	add	sp, #108	; 0x6c
 80187e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187e4:	462f      	mov	r7, r5
 80187e6:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80187ea:	42bb      	cmp	r3, r7
 80187ec:	d90b      	bls.n	8018806 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80187ee:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80187f2:	3701      	adds	r7, #1
 80187f4:	4620      	mov	r0, r4
 80187f6:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80187fa:	b2bf      	uxth	r7, r7
 80187fc:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8018800:	f7ff fc4c 	bl	801809c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018804:	e7ef      	b.n	80187e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8018806:	4a9e      	ldr	r2, [pc, #632]	; (8018a80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8018808:	6813      	ldr	r3, [r2, #0]
 801880a:	4690      	mov	r8, r2
 801880c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018810:	2b01      	cmp	r3, #1
 8018812:	f040 80e4 	bne.w	80189de <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8018816:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801881a:	4629      	mov	r1, r5
 801881c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8018820:	2500      	movs	r5, #0
 8018822:	33aa      	adds	r3, #170	; 0xaa
 8018824:	428f      	cmp	r7, r1
 8018826:	f103 0308 	add.w	r3, r3, #8
 801882a:	dd0a      	ble.n	8018842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801882c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018830:	3101      	adds	r1, #1
 8018832:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8018836:	4402      	add	r2, r0
 8018838:	b212      	sxth	r2, r2
 801883a:	4295      	cmp	r5, r2
 801883c:	bfb8      	it	lt
 801883e:	4615      	movlt	r5, r2
 8018840:	e7f0      	b.n	8018824 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8018842:	4b90      	ldr	r3, [pc, #576]	; (8018a84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8018844:	f8df b238 	ldr.w	fp, [pc, #568]	; 8018a80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8018848:	881b      	ldrh	r3, [r3, #0]
 801884a:	46d8      	mov	r8, fp
 801884c:	2b0f      	cmp	r3, #15
 801884e:	bf8c      	ite	hi
 8018850:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8018854:	f04f 0a01 	movls.w	sl, #1
 8018858:	2300      	movs	r3, #0
 801885a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801885e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8018862:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8018866:	4438      	add	r0, r7
 8018868:	b207      	sxth	r7, r0
 801886a:	f8db 0000 	ldr.w	r0, [fp]
 801886e:	42bd      	cmp	r5, r7
 8018870:	6803      	ldr	r3, [r0, #0]
 8018872:	f340 8084 	ble.w	801897e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8018876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801887a:	4798      	blx	r3
 801887c:	eb07 030a 	add.w	r3, r7, sl
 8018880:	4298      	cmp	r0, r3
 8018882:	da07      	bge.n	8018894 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018884:	4285      	cmp	r5, r0
 8018886:	dd05      	ble.n	8018894 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8018888:	4287      	cmp	r7, r0
 801888a:	dd6d      	ble.n	8018968 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801888c:	2f00      	cmp	r7, #0
 801888e:	dd6b      	ble.n	8018968 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018890:	4628      	mov	r0, r5
 8018892:	e004      	b.n	801889e <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8018894:	4287      	cmp	r7, r0
 8018896:	dcfb      	bgt.n	8018890 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8018898:	42a8      	cmp	r0, r5
 801889a:	bfa8      	it	ge
 801889c:	4628      	movge	r0, r5
 801889e:	4b7a      	ldr	r3, [pc, #488]	; (8018a88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80188a0:	1bc0      	subs	r0, r0, r7
 80188a2:	2200      	movs	r2, #0
 80188a4:	f8ad 7016 	strh.w	r7, [sp, #22]
 80188a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80188b0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80188b4:	9b02      	ldr	r3, [sp, #8]
 80188b6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80188ba:	881f      	ldrh	r7, [r3, #0]
 80188bc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80188c0:	42bb      	cmp	r3, r7
 80188c2:	d9cc      	bls.n	801885e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 80188c4:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80188c8:	ab07      	add	r3, sp, #28
 80188ca:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80188ce:	6851      	ldr	r1, [r2, #4]
 80188d0:	c303      	stmia	r3!, {r0, r1}
 80188d2:	a905      	add	r1, sp, #20
 80188d4:	a807      	add	r0, sp, #28
 80188d6:	f7fd fb7b 	bl	8015fd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80188da:	2800      	cmp	r0, #0
 80188dc:	d04c      	beq.n	8018978 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80188de:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80188e2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80188e6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80188ea:	4686      	mov	lr, r0
 80188ec:	4290      	cmp	r0, r2
 80188ee:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80188f2:	4448      	add	r0, r9
 80188f4:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80188f8:	bfb8      	it	lt
 80188fa:	4696      	movlt	lr, r2
 80188fc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018900:	444a      	add	r2, r9
 8018902:	b280      	uxth	r0, r0
 8018904:	4299      	cmp	r1, r3
 8018906:	468c      	mov	ip, r1
 8018908:	b292      	uxth	r2, r2
 801890a:	9303      	str	r3, [sp, #12]
 801890c:	bfb8      	it	lt
 801890e:	469c      	movlt	ip, r3
 8018910:	b203      	sxth	r3, r0
 8018912:	fa0f f982 	sxth.w	r9, r2
 8018916:	f8ad e01c 	strh.w	lr, [sp, #28]
 801891a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801891e:	454b      	cmp	r3, r9
 8018920:	bfb8      	it	lt
 8018922:	4602      	movlt	r2, r0
 8018924:	9b03      	ldr	r3, [sp, #12]
 8018926:	eba2 020e 	sub.w	r2, r2, lr
 801892a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801892e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8018932:	4411      	add	r1, r2
 8018934:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018938:	4413      	add	r3, r2
 801893a:	b289      	uxth	r1, r1
 801893c:	b29b      	uxth	r3, r3
 801893e:	b208      	sxth	r0, r1
 8018940:	b21a      	sxth	r2, r3
 8018942:	4290      	cmp	r0, r2
 8018944:	bfb8      	it	lt
 8018946:	460b      	movlt	r3, r1
 8018948:	eba3 030c 	sub.w	r3, r3, ip
 801894c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018950:	a807      	add	r0, sp, #28
 8018952:	f7fa fd1c 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018956:	b920      	cbnz	r0, 8018962 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8018958:	6823      	ldr	r3, [r4, #0]
 801895a:	a907      	add	r1, sp, #28
 801895c:	4620      	mov	r0, r4
 801895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018960:	4798      	blx	r3
 8018962:	3701      	adds	r7, #1
 8018964:	b2bf      	uxth	r7, r7
 8018966:	e7a9      	b.n	80188bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8018968:	f8d8 0000 	ldr.w	r0, [r8]
 801896c:	2101      	movs	r1, #1
 801896e:	6803      	ldr	r3, [r0, #0]
 8018970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018974:	4798      	blx	r3
 8018976:	e772      	b.n	801885e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8018978:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801897c:	e7e8      	b.n	8018950 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018980:	4798      	blx	r3
 8018982:	4b42      	ldr	r3, [pc, #264]	; (8018a8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8018984:	781b      	ldrb	r3, [r3, #0]
 8018986:	2b00      	cmp	r3, #0
 8018988:	f43f af29 	beq.w	80187de <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801898c:	2300      	movs	r3, #0
 801898e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8018992:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018996:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801899a:	9b02      	ldr	r3, [sp, #8]
 801899c:	881b      	ldrh	r3, [r3, #0]
 801899e:	429d      	cmp	r5, r3
 80189a0:	f67f af1d 	bls.w	80187de <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80189a4:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 80189a8:	2907      	cmp	r1, #7
 80189aa:	d815      	bhi.n	80189d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 80189ac:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80189b0:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 80189b4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80189b8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80189bc:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80189c0:	1c4a      	adds	r2, r1, #1
 80189c2:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 80189c6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80189ca:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 80189ce:	f8a2 e002 	strh.w	lr, [r2, #2]
 80189d2:	f8a2 c004 	strh.w	ip, [r2, #4]
 80189d6:	80d7      	strh	r7, [r2, #6]
 80189d8:	3301      	adds	r3, #1
 80189da:	b29b      	uxth	r3, r3
 80189dc:	e7df      	b.n	801899e <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 80189de:	2b02      	cmp	r3, #2
 80189e0:	f040 8135 	bne.w	8018c4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80189e4:	4b2a      	ldr	r3, [pc, #168]	; (8018a90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 80189e6:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80189ea:	781b      	ldrb	r3, [r3, #0]
 80189ec:	2b01      	cmp	r3, #1
 80189ee:	f000 809c 	beq.w	8018b2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80189f2:	9b02      	ldr	r3, [sp, #8]
 80189f4:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 80189f8:	f8b3 b000 	ldrh.w	fp, [r3]
 80189fc:	f10b 0b01 	add.w	fp, fp, #1
 8018a00:	fa1f fb8b 	uxth.w	fp, fp
 8018a04:	2a00      	cmp	r2, #0
 8018a06:	d0bc      	beq.n	8018982 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018a08:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8018a0c:	4659      	mov	r1, fp
 8018a0e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8018a12:	f04f 0800 	mov.w	r8, #0
 8018a16:	441d      	add	r5, r3
 8018a18:	b22d      	sxth	r5, r5
 8018a1a:	b28b      	uxth	r3, r1
 8018a1c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8018a20:	429a      	cmp	r2, r3
 8018a22:	f240 80c0 	bls.w	8018ba6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8018a26:	4427      	add	r7, r4
 8018a28:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8018a2c:	4608      	mov	r0, r1
 8018a2e:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8018a32:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8018a36:	4563      	cmp	r3, ip
 8018a38:	f340 80a2 	ble.w	8018b80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8018a3c:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8018a40:	4465      	add	r5, ip
 8018a42:	b22d      	sxth	r5, r5
 8018a44:	429d      	cmp	r5, r3
 8018a46:	bfa8      	it	ge
 8018a48:	461d      	movge	r5, r3
 8018a4a:	3101      	adds	r1, #1
 8018a4c:	4680      	mov	r8, r0
 8018a4e:	e7e4      	b.n	8018a1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8018a50:	d10b      	bne.n	8018a6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8018a52:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8018a56:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8018a5a:	458c      	cmp	ip, r1
 8018a5c:	bfb4      	ite	lt
 8018a5e:	469c      	movlt	ip, r3
 8018a60:	46bc      	movge	ip, r7
 8018a62:	4572      	cmp	r2, lr
 8018a64:	bfb8      	it	lt
 8018a66:	4672      	movlt	r2, lr
 8018a68:	e087      	b.n	8018b7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8018a6a:	428a      	cmp	r2, r1
 8018a6c:	46bc      	mov	ip, r7
 8018a6e:	bfb8      	it	lt
 8018a70:	460a      	movlt	r2, r1
 8018a72:	e082      	b.n	8018b7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8018a74:	2400ff1c 	.word	0x2400ff1c
 8018a78:	2400ff28 	.word	0x2400ff28
 8018a7c:	24000084 	.word	0x24000084
 8018a80:	2400fee4 	.word	0x2400fee4
 8018a84:	2400feda 	.word	0x2400feda
 8018a88:	2400fed8 	.word	0x2400fed8
 8018a8c:	2400fee2 	.word	0x2400fee2
 8018a90:	2400fedc 	.word	0x2400fedc
 8018a94:	1961      	adds	r1, r4, r5
 8018a96:	ab07      	add	r3, sp, #28
 8018a98:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8018a9c:	6849      	ldr	r1, [r1, #4]
 8018a9e:	c303      	stmia	r3!, {r0, r1}
 8018aa0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018aa4:	a807      	add	r0, sp, #28
 8018aa6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018aaa:	2b13      	cmp	r3, #19
 8018aac:	440b      	add	r3, r1
 8018aae:	bfd8      	it	le
 8018ab0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018ab4:	1a9b      	subs	r3, r3, r2
 8018ab6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018aba:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018abe:	f7ff f89d 	bl	8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018ac2:	a807      	add	r0, sp, #28
 8018ac4:	f7fa fc63 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ac8:	bb78      	cbnz	r0, 8018b2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8018aca:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018ace:	4425      	add	r5, r4
 8018ad0:	f8d8 0000 	ldr.w	r0, [r8]
 8018ad4:	f1bc 0f14 	cmp.w	ip, #20
 8018ad8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018adc:	f8d0 e000 	ldr.w	lr, [r0]
 8018ae0:	bfa8      	it	ge
 8018ae2:	f04f 0c14 	movge.w	ip, #20
 8018ae6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018aea:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018aee:	fa1f fc8c 	uxth.w	ip, ip
 8018af2:	f8cd c000 	str.w	ip, [sp]
 8018af6:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8018afa:	47d0      	blx	sl
 8018afc:	4682      	mov	sl, r0
 8018afe:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018b02:	a807      	add	r0, sp, #28
 8018b04:	f7ff f860 	bl	8017bc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018b08:	6823      	ldr	r3, [r4, #0]
 8018b0a:	4620      	mov	r0, r4
 8018b0c:	a907      	add	r1, sp, #28
 8018b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b10:	4798      	blx	r3
 8018b12:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8018b16:	eba0 000a 	sub.w	r0, r0, sl
 8018b1a:	b200      	sxth	r0, r0
 8018b1c:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8018b20:	b918      	cbnz	r0, 8018b2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8018b22:	b2b9      	uxth	r1, r7
 8018b24:	4648      	mov	r0, r9
 8018b26:	f7ff faa5 	bl	8018074 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018b2a:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8018b2e:	f1bb 0f00 	cmp.w	fp, #0
 8018b32:	f43f af26 	beq.w	8018982 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018b36:	9b02      	ldr	r3, [sp, #8]
 8018b38:	2700      	movs	r7, #0
 8018b3a:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8018b3e:	881b      	ldrh	r3, [r3, #0]
 8018b40:	3301      	adds	r3, #1
 8018b42:	b29b      	uxth	r3, r3
 8018b44:	b299      	uxth	r1, r3
 8018b46:	00fd      	lsls	r5, r7, #3
 8018b48:	458b      	cmp	fp, r1
 8018b4a:	d9a3      	bls.n	8018a94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8018b4c:	4425      	add	r5, r4
 8018b4e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8018b52:	469c      	mov	ip, r3
 8018b54:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8018b58:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8018b5c:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8018b60:	4408      	add	r0, r1
 8018b62:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8018b66:	4471      	add	r1, lr
 8018b68:	b200      	sxth	r0, r0
 8018b6a:	b209      	sxth	r1, r1
 8018b6c:	4288      	cmp	r0, r1
 8018b6e:	f6bf af6f 	bge.w	8018a50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8018b72:	4586      	cmp	lr, r0
 8018b74:	4672      	mov	r2, lr
 8018b76:	bfb8      	it	lt
 8018b78:	4602      	movlt	r2, r0
 8018b7a:	3301      	adds	r3, #1
 8018b7c:	4667      	mov	r7, ip
 8018b7e:	e7e1      	b.n	8018b44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8018b80:	d10c      	bne.n	8018b9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8018b82:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8018b86:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8018b8a:	4287      	cmp	r7, r0
 8018b8c:	bfb4      	ite	lt
 8018b8e:	4608      	movlt	r0, r1
 8018b90:	4640      	movge	r0, r8
 8018b92:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8018b96:	443b      	add	r3, r7
 8018b98:	b21b      	sxth	r3, r3
 8018b9a:	e753      	b.n	8018a44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8018b9c:	4565      	cmp	r5, ip
 8018b9e:	4640      	mov	r0, r8
 8018ba0:	bfa8      	it	ge
 8018ba2:	4665      	movge	r5, ip
 8018ba4:	e751      	b.n	8018a4a <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8018ba6:	eb09 0007 	add.w	r0, r9, r7
 8018baa:	4427      	add	r7, r4
 8018bac:	9203      	str	r2, [sp, #12]
 8018bae:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8018bb2:	f1ba 0f13 	cmp.w	sl, #19
 8018bb6:	bfde      	ittt	le
 8018bb8:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8018bbc:	4455      	addle	r5, sl
 8018bbe:	b22d      	sxthle	r5, r5
 8018bc0:	f7fa fbe5 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018bc4:	9a03      	ldr	r2, [sp, #12]
 8018bc6:	2800      	cmp	r0, #0
 8018bc8:	f47f af1c 	bne.w	8018a04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8018bcc:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8018bd0:	fa1f fa8a 	uxth.w	sl, sl
 8018bd4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018bd8:	1aad      	subs	r5, r5, r2
 8018bda:	4829      	ldr	r0, [pc, #164]	; (8018c80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8018bdc:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8018be0:	2d14      	cmp	r5, #20
 8018be2:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8018be6:	6800      	ldr	r0, [r0, #0]
 8018be8:	bfa8      	it	ge
 8018bea:	2514      	movge	r5, #20
 8018bec:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018bf0:	f8ad 201e 	strh.w	r2, [sp, #30]
 8018bf4:	b289      	uxth	r1, r1
 8018bf6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018bfa:	b2ad      	uxth	r5, r5
 8018bfc:	f8d0 c000 	ldr.w	ip, [r0]
 8018c00:	b292      	uxth	r2, r2
 8018c02:	4555      	cmp	r5, sl
 8018c04:	bf94      	ite	ls
 8018c06:	9500      	strls	r5, [sp, #0]
 8018c08:	f8cd a000 	strhi.w	sl, [sp]
 8018c0c:	b29b      	uxth	r3, r3
 8018c0e:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8018c12:	47a8      	blx	r5
 8018c14:	6823      	ldr	r3, [r4, #0]
 8018c16:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018c1a:	a907      	add	r1, sp, #28
 8018c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c1e:	4620      	mov	r0, r4
 8018c20:	4798      	blx	r3
 8018c22:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8018c26:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8018c2a:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8018c2e:	1a5b      	subs	r3, r3, r1
 8018c30:	440a      	add	r2, r1
 8018c32:	b21b      	sxth	r3, r3
 8018c34:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8018c38:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	f47f aed8 	bne.w	80189f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8018c42:	fa1f f188 	uxth.w	r1, r8
 8018c46:	4648      	mov	r0, r9
 8018c48:	f7ff fa14 	bl	8018074 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018c4c:	e6d1      	b.n	80189f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8018c4e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018c52:	42ab      	cmp	r3, r5
 8018c54:	f67f ae95 	bls.w	8018982 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8018c58:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8018c5c:	ab07      	add	r3, sp, #28
 8018c5e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018c62:	6851      	ldr	r1, [r2, #4]
 8018c64:	c303      	stmia	r3!, {r0, r1}
 8018c66:	a807      	add	r0, sp, #28
 8018c68:	f7fa fb91 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018c6c:	b920      	cbnz	r0, 8018c78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8018c6e:	6823      	ldr	r3, [r4, #0]
 8018c70:	a907      	add	r1, sp, #28
 8018c72:	4620      	mov	r0, r4
 8018c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c76:	4798      	blx	r3
 8018c78:	3501      	adds	r5, #1
 8018c7a:	b2ad      	uxth	r5, r5
 8018c7c:	e7e7      	b.n	8018c4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8018c7e:	bf00      	nop
 8018c80:	2400fee4 	.word	0x2400fee4

08018c84 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8018c84:	4b03      	ldr	r3, [pc, #12]	; (8018c94 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8018c86:	2200      	movs	r2, #0
 8018c88:	801a      	strh	r2, [r3, #0]
 8018c8a:	805a      	strh	r2, [r3, #2]
 8018c8c:	809a      	strh	r2, [r3, #4]
 8018c8e:	80da      	strh	r2, [r3, #6]
 8018c90:	4770      	bx	lr
 8018c92:	bf00      	nop
 8018c94:	2400ff28 	.word	0x2400ff28

08018c98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8018c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c9c:	b09d      	sub	sp, #116	; 0x74
 8018c9e:	4606      	mov	r6, r0
 8018ca0:	4614      	mov	r4, r2
 8018ca2:	468a      	mov	sl, r1
 8018ca4:	a803      	add	r0, sp, #12
 8018ca6:	461d      	mov	r5, r3
 8018ca8:	f000 fd8b 	bl	80197c2 <_ZN8touchgfx12TextProviderC1Ev>
 8018cac:	6833      	ldr	r3, [r6, #0]
 8018cae:	4630      	mov	r0, r6
 8018cb0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018cb6:	4798      	blx	r3
 8018cb8:	6833      	ldr	r3, [r6, #0]
 8018cba:	4607      	mov	r7, r0
 8018cbc:	4630      	mov	r0, r6
 8018cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018cc0:	4798      	blx	r3
 8018cc2:	462a      	mov	r2, r5
 8018cc4:	2500      	movs	r5, #0
 8018cc6:	4621      	mov	r1, r4
 8018cc8:	9000      	str	r0, [sp, #0]
 8018cca:	463b      	mov	r3, r7
 8018ccc:	462c      	mov	r4, r5
 8018cce:	46a9      	mov	r9, r5
 8018cd0:	46a8      	mov	r8, r5
 8018cd2:	a803      	add	r0, sp, #12
 8018cd4:	f000 fdd0 	bl	8019878 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018cd8:	2300      	movs	r3, #0
 8018cda:	9302      	str	r3, [sp, #8]
 8018cdc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018ce0:	429c      	cmp	r4, r3
 8018ce2:	d002      	beq.n	8018cea <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018ce4:	455c      	cmp	r4, fp
 8018ce6:	bf18      	it	ne
 8018ce8:	4625      	movne	r5, r4
 8018cea:	ab02      	add	r3, sp, #8
 8018cec:	4632      	mov	r2, r6
 8018cee:	4651      	mov	r1, sl
 8018cf0:	a803      	add	r0, sp, #12
 8018cf2:	f001 f8c7 	bl	8019e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018cf6:	4604      	mov	r4, r0
 8018cf8:	b108      	cbz	r0, 8018cfe <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8018cfa:	280a      	cmp	r0, #10
 8018cfc:	d10a      	bne.n	8018d14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018cfe:	45c1      	cmp	r9, r8
 8018d00:	bf38      	it	cc
 8018d02:	46c1      	movcc	r9, r8
 8018d04:	f04f 0800 	mov.w	r8, #0
 8018d08:	2c00      	cmp	r4, #0
 8018d0a:	d1e5      	bne.n	8018cd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018d0c:	4648      	mov	r0, r9
 8018d0e:	b01d      	add	sp, #116	; 0x74
 8018d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d14:	9a02      	ldr	r2, [sp, #8]
 8018d16:	2a00      	cmp	r2, #0
 8018d18:	d0de      	beq.n	8018cd8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018d1a:	7b57      	ldrb	r7, [r2, #13]
 8018d1c:	4629      	mov	r1, r5
 8018d1e:	6833      	ldr	r3, [r6, #0]
 8018d20:	007f      	lsls	r7, r7, #1
 8018d22:	8894      	ldrh	r4, [r2, #4]
 8018d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d26:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8018d2a:	7a97      	ldrb	r7, [r2, #10]
 8018d2c:	4307      	orrs	r7, r0
 8018d2e:	4630      	mov	r0, r6
 8018d30:	4798      	blx	r3
 8018d32:	4438      	add	r0, r7
 8018d34:	4480      	add	r8, r0
 8018d36:	fa1f f888 	uxth.w	r8, r8
 8018d3a:	e7e5      	b.n	8018d08 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018d3c <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018d3c:	b508      	push	{r3, lr}
 8018d3e:	6803      	ldr	r3, [r0, #0]
 8018d40:	68db      	ldr	r3, [r3, #12]
 8018d42:	4798      	blx	r3
 8018d44:	b128      	cbz	r0, 8018d52 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8018d46:	7b43      	ldrb	r3, [r0, #13]
 8018d48:	7a80      	ldrb	r0, [r0, #10]
 8018d4a:	005b      	lsls	r3, r3, #1
 8018d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018d50:	4318      	orrs	r0, r3
 8018d52:	bd08      	pop	{r3, pc}

08018d54 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018d54:	b40e      	push	{r1, r2, r3}
 8018d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d58:	b09e      	sub	sp, #120	; 0x78
 8018d5a:	4605      	mov	r5, r0
 8018d5c:	ab23      	add	r3, sp, #140	; 0x8c
 8018d5e:	a805      	add	r0, sp, #20
 8018d60:	f853 4b04 	ldr.w	r4, [r3], #4
 8018d64:	9303      	str	r3, [sp, #12]
 8018d66:	f000 fd2c 	bl	80197c2 <_ZN8touchgfx12TextProviderC1Ev>
 8018d6a:	682b      	ldr	r3, [r5, #0]
 8018d6c:	4628      	mov	r0, r5
 8018d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d70:	4798      	blx	r3
 8018d72:	682b      	ldr	r3, [r5, #0]
 8018d74:	4606      	mov	r6, r0
 8018d76:	4628      	mov	r0, r5
 8018d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018d7a:	4798      	blx	r3
 8018d7c:	4633      	mov	r3, r6
 8018d7e:	4621      	mov	r1, r4
 8018d80:	ae1e      	add	r6, sp, #120	; 0x78
 8018d82:	2400      	movs	r4, #0
 8018d84:	9000      	str	r0, [sp, #0]
 8018d86:	9a03      	ldr	r2, [sp, #12]
 8018d88:	a805      	add	r0, sp, #20
 8018d8a:	f000 fd75 	bl	8019878 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018d8e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8018d92:	462a      	mov	r2, r5
 8018d94:	4633      	mov	r3, r6
 8018d96:	4621      	mov	r1, r4
 8018d98:	a805      	add	r0, sp, #20
 8018d9a:	f001 f873 	bl	8019e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018d9e:	b300      	cbz	r0, 8018de2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8018da0:	280a      	cmp	r0, #10
 8018da2:	d01a      	beq.n	8018dda <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018da4:	9f04      	ldr	r7, [sp, #16]
 8018da6:	b1c7      	cbz	r7, 8018dda <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018da8:	7b78      	ldrb	r0, [r7, #13]
 8018daa:	7a3b      	ldrb	r3, [r7, #8]
 8018dac:	00c1      	lsls	r1, r0, #3
 8018dae:	88aa      	ldrh	r2, [r5, #4]
 8018db0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018db4:	4319      	orrs	r1, r3
 8018db6:	0643      	lsls	r3, r0, #25
 8018db8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018dbc:	bf48      	it	mi
 8018dbe:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018dc2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018dc6:	bf48      	it	mi
 8018dc8:	b219      	sxthmi	r1, r3
 8018dca:	79fb      	ldrb	r3, [r7, #7]
 8018dcc:	4303      	orrs	r3, r0
 8018dce:	4413      	add	r3, r2
 8018dd0:	1a5b      	subs	r3, r3, r1
 8018dd2:	b29b      	uxth	r3, r3
 8018dd4:	42a3      	cmp	r3, r4
 8018dd6:	bfc8      	it	gt
 8018dd8:	b21c      	sxthgt	r4, r3
 8018dda:	4633      	mov	r3, r6
 8018ddc:	462a      	mov	r2, r5
 8018dde:	2100      	movs	r1, #0
 8018de0:	e7da      	b.n	8018d98 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8018de2:	b2a0      	uxth	r0, r4
 8018de4:	b01e      	add	sp, #120	; 0x78
 8018de6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018dea:	b003      	add	sp, #12
 8018dec:	4770      	bx	lr

08018dee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018dee:	b40e      	push	{r1, r2, r3}
 8018df0:	b570      	push	{r4, r5, r6, lr}
 8018df2:	b09d      	sub	sp, #116	; 0x74
 8018df4:	4604      	mov	r4, r0
 8018df6:	ab21      	add	r3, sp, #132	; 0x84
 8018df8:	a803      	add	r0, sp, #12
 8018dfa:	f853 5b04 	ldr.w	r5, [r3], #4
 8018dfe:	9302      	str	r3, [sp, #8]
 8018e00:	f000 fcdf 	bl	80197c2 <_ZN8touchgfx12TextProviderC1Ev>
 8018e04:	6823      	ldr	r3, [r4, #0]
 8018e06:	4620      	mov	r0, r4
 8018e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e0a:	4798      	blx	r3
 8018e0c:	6823      	ldr	r3, [r4, #0]
 8018e0e:	4606      	mov	r6, r0
 8018e10:	4620      	mov	r0, r4
 8018e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e14:	2401      	movs	r4, #1
 8018e16:	4798      	blx	r3
 8018e18:	4633      	mov	r3, r6
 8018e1a:	9000      	str	r0, [sp, #0]
 8018e1c:	4629      	mov	r1, r5
 8018e1e:	9a02      	ldr	r2, [sp, #8]
 8018e20:	a803      	add	r0, sp, #12
 8018e22:	f000 fd29 	bl	8019878 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018e26:	a803      	add	r0, sp, #12
 8018e28:	f001 f8f8 	bl	801a01c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018e2c:	b2a3      	uxth	r3, r4
 8018e2e:	b138      	cbz	r0, 8018e40 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018e30:	280a      	cmp	r0, #10
 8018e32:	a803      	add	r0, sp, #12
 8018e34:	bf04      	itt	eq
 8018e36:	3301      	addeq	r3, #1
 8018e38:	b21c      	sxtheq	r4, r3
 8018e3a:	f001 f8ef 	bl	801a01c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018e3e:	e7f5      	b.n	8018e2c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018e40:	4618      	mov	r0, r3
 8018e42:	b01d      	add	sp, #116	; 0x74
 8018e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e48:	b003      	add	sp, #12
 8018e4a:	4770      	bx	lr

08018e4c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018e4c:	b40e      	push	{r1, r2, r3}
 8018e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e50:	b09e      	sub	sp, #120	; 0x78
 8018e52:	4604      	mov	r4, r0
 8018e54:	ab23      	add	r3, sp, #140	; 0x8c
 8018e56:	a805      	add	r0, sp, #20
 8018e58:	f853 5b04 	ldr.w	r5, [r3], #4
 8018e5c:	9303      	str	r3, [sp, #12]
 8018e5e:	f000 fcb0 	bl	80197c2 <_ZN8touchgfx12TextProviderC1Ev>
 8018e62:	6823      	ldr	r3, [r4, #0]
 8018e64:	4620      	mov	r0, r4
 8018e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e68:	4798      	blx	r3
 8018e6a:	6823      	ldr	r3, [r4, #0]
 8018e6c:	4606      	mov	r6, r0
 8018e6e:	4620      	mov	r0, r4
 8018e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018e72:	4798      	blx	r3
 8018e74:	4633      	mov	r3, r6
 8018e76:	4629      	mov	r1, r5
 8018e78:	9000      	str	r0, [sp, #0]
 8018e7a:	9a03      	ldr	r2, [sp, #12]
 8018e7c:	a805      	add	r0, sp, #20
 8018e7e:	f000 fcfb 	bl	8019878 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018e82:	ad1e      	add	r5, sp, #120	; 0x78
 8018e84:	2100      	movs	r1, #0
 8018e86:	26ff      	movs	r6, #255	; 0xff
 8018e88:	4622      	mov	r2, r4
 8018e8a:	a805      	add	r0, sp, #20
 8018e8c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018e90:	462b      	mov	r3, r5
 8018e92:	f000 fff7 	bl	8019e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018e96:	b1d8      	cbz	r0, 8018ed0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8018e98:	280a      	cmp	r0, #10
 8018e9a:	d012      	beq.n	8018ec2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018e9c:	9804      	ldr	r0, [sp, #16]
 8018e9e:	b180      	cbz	r0, 8018ec2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018ea0:	7b47      	ldrb	r7, [r0, #13]
 8018ea2:	7922      	ldrb	r2, [r4, #4]
 8018ea4:	00fb      	lsls	r3, r7, #3
 8018ea6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018eaa:	7a03      	ldrb	r3, [r0, #8]
 8018eac:	430b      	orrs	r3, r1
 8018eae:	0679      	lsls	r1, r7, #25
 8018eb0:	bf44      	itt	mi
 8018eb2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018eb6:	b21b      	sxthmi	r3, r3
 8018eb8:	1ad3      	subs	r3, r2, r3
 8018eba:	b2db      	uxtb	r3, r3
 8018ebc:	429e      	cmp	r6, r3
 8018ebe:	bf28      	it	cs
 8018ec0:	461e      	movcs	r6, r3
 8018ec2:	462b      	mov	r3, r5
 8018ec4:	4622      	mov	r2, r4
 8018ec6:	2100      	movs	r1, #0
 8018ec8:	a805      	add	r0, sp, #20
 8018eca:	f000 ffdb 	bl	8019e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018ece:	e7e2      	b.n	8018e96 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8018ed0:	4630      	mov	r0, r6
 8018ed2:	b01e      	add	sp, #120	; 0x78
 8018ed4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018ed8:	b003      	add	sp, #12
 8018eda:	4770      	bx	lr

08018edc <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018edc:	b513      	push	{r0, r1, r4, lr}
 8018ede:	6803      	ldr	r3, [r0, #0]
 8018ee0:	2400      	movs	r4, #0
 8018ee2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018ee6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018eea:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018eee:	4669      	mov	r1, sp
 8018ef0:	691b      	ldr	r3, [r3, #16]
 8018ef2:	9400      	str	r4, [sp, #0]
 8018ef4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018ef8:	4798      	blx	r3
 8018efa:	b002      	add	sp, #8
 8018efc:	bd10      	pop	{r4, pc}

08018efe <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018efe:	b538      	push	{r3, r4, r5, lr}
 8018f00:	680b      	ldr	r3, [r1, #0]
 8018f02:	460c      	mov	r4, r1
 8018f04:	4605      	mov	r5, r0
 8018f06:	68db      	ldr	r3, [r3, #12]
 8018f08:	4798      	blx	r3
 8018f0a:	6823      	ldr	r3, [r4, #0]
 8018f0c:	4620      	mov	r0, r4
 8018f0e:	4629      	mov	r1, r5
 8018f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f12:	4798      	blx	r3
 8018f14:	4628      	mov	r0, r5
 8018f16:	bd38      	pop	{r3, r4, r5, pc}

08018f18 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018f18:	b410      	push	{r4}
 8018f1a:	880a      	ldrh	r2, [r1, #0]
 8018f1c:	8884      	ldrh	r4, [r0, #4]
 8018f1e:	4422      	add	r2, r4
 8018f20:	800a      	strh	r2, [r1, #0]
 8018f22:	884a      	ldrh	r2, [r1, #2]
 8018f24:	88c4      	ldrh	r4, [r0, #6]
 8018f26:	4422      	add	r2, r4
 8018f28:	804a      	strh	r2, [r1, #2]
 8018f2a:	6940      	ldr	r0, [r0, #20]
 8018f2c:	b120      	cbz	r0, 8018f38 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018f2e:	6803      	ldr	r3, [r0, #0]
 8018f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f36:	4718      	bx	r3
 8018f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f3c:	4770      	bx	lr

08018f3e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018f3e:	b570      	push	{r4, r5, r6, lr}
 8018f40:	8882      	ldrh	r2, [r0, #4]
 8018f42:	460c      	mov	r4, r1
 8018f44:	880b      	ldrh	r3, [r1, #0]
 8018f46:	4605      	mov	r5, r0
 8018f48:	4413      	add	r3, r2
 8018f4a:	800b      	strh	r3, [r1, #0]
 8018f4c:	884b      	ldrh	r3, [r1, #2]
 8018f4e:	88c2      	ldrh	r2, [r0, #6]
 8018f50:	4413      	add	r3, r2
 8018f52:	804b      	strh	r3, [r1, #2]
 8018f54:	1d01      	adds	r1, r0, #4
 8018f56:	4620      	mov	r0, r4
 8018f58:	f7fa f9d6 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 8018f5c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	dd0b      	ble.n	8018f7c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018f64:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	dd07      	ble.n	8018f7c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018f6c:	6968      	ldr	r0, [r5, #20]
 8018f6e:	b128      	cbz	r0, 8018f7c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018f70:	6803      	ldr	r3, [r0, #0]
 8018f72:	4621      	mov	r1, r4
 8018f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018f7a:	4718      	bx	r3
 8018f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018f80 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018f80:	b570      	push	{r4, r5, r6, lr}
 8018f82:	8882      	ldrh	r2, [r0, #4]
 8018f84:	460c      	mov	r4, r1
 8018f86:	880b      	ldrh	r3, [r1, #0]
 8018f88:	4605      	mov	r5, r0
 8018f8a:	4413      	add	r3, r2
 8018f8c:	800b      	strh	r3, [r1, #0]
 8018f8e:	884b      	ldrh	r3, [r1, #2]
 8018f90:	88c2      	ldrh	r2, [r0, #6]
 8018f92:	4413      	add	r3, r2
 8018f94:	804b      	strh	r3, [r1, #2]
 8018f96:	1d01      	adds	r1, r0, #4
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f7fa f9b5 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 8018f9e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	dd18      	ble.n	8018fd8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018fa6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	dd14      	ble.n	8018fd8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018fae:	6968      	ldr	r0, [r5, #20]
 8018fb0:	b128      	cbz	r0, 8018fbe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8018fb2:	6803      	ldr	r3, [r0, #0]
 8018fb4:	4621      	mov	r1, r4
 8018fb6:	691b      	ldr	r3, [r3, #16]
 8018fb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fbc:	4718      	bx	r3
 8018fbe:	4b07      	ldr	r3, [pc, #28]	; (8018fdc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	3304      	adds	r3, #4
 8018fc4:	429d      	cmp	r5, r3
 8018fc6:	d107      	bne.n	8018fd8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018fc8:	f7fe ffb4 	bl	8017f34 <_ZN8touchgfx11Application11getInstanceEv>
 8018fcc:	6821      	ldr	r1, [r4, #0]
 8018fce:	6862      	ldr	r2, [r4, #4]
 8018fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fd4:	f7ff b862 	b.w	801809c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018fd8:	bd70      	pop	{r4, r5, r6, pc}
 8018fda:	bf00      	nop
 8018fdc:	2400ff20 	.word	0x2400ff20

08018fe0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018fe0:	b570      	push	{r4, r5, r6, lr}
 8018fe2:	4604      	mov	r4, r0
 8018fe4:	4616      	mov	r6, r2
 8018fe6:	460d      	mov	r5, r1
 8018fe8:	b901      	cbnz	r1, 8018fec <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018fea:	b192      	cbz	r2, 8019012 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8018fec:	6823      	ldr	r3, [r4, #0]
 8018fee:	4620      	mov	r0, r4
 8018ff0:	699b      	ldr	r3, [r3, #24]
 8018ff2:	4798      	blx	r3
 8018ff4:	88e2      	ldrh	r2, [r4, #6]
 8018ff6:	88a1      	ldrh	r1, [r4, #4]
 8018ff8:	4620      	mov	r0, r4
 8018ffa:	4432      	add	r2, r6
 8018ffc:	4429      	add	r1, r5
 8018ffe:	b212      	sxth	r2, r2
 8019000:	b209      	sxth	r1, r1
 8019002:	f7fa fb34 	bl	801366e <_ZN8touchgfx8Drawable5setXYEss>
 8019006:	6823      	ldr	r3, [r4, #0]
 8019008:	4620      	mov	r0, r4
 801900a:	699b      	ldr	r3, [r3, #24]
 801900c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019010:	4718      	bx	r3
 8019012:	bd70      	pop	{r4, r5, r6, pc}

08019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019014:	b510      	push	{r4, lr}
 8019016:	2300      	movs	r3, #0
 8019018:	4604      	mov	r4, r0
 801901a:	4608      	mov	r0, r1
 801901c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019020:	8023      	strh	r3, [r4, #0]
 8019022:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019026:	8063      	strh	r3, [r4, #2]
 8019028:	6803      	ldr	r3, [r0, #0]
 801902a:	80a1      	strh	r1, [r4, #4]
 801902c:	4621      	mov	r1, r4
 801902e:	80e2      	strh	r2, [r4, #6]
 8019030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019032:	4798      	blx	r3
 8019034:	4620      	mov	r0, r4
 8019036:	bd10      	pop	{r4, pc}

08019038 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019038:	b530      	push	{r4, r5, lr}
 801903a:	8083      	strh	r3, [r0, #4]
 801903c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019040:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019044:	7183      	strb	r3, [r0, #6]
 8019046:	79c3      	ldrb	r3, [r0, #7]
 8019048:	6101      	str	r1, [r0, #16]
 801904a:	f365 0306 	bfi	r3, r5, #0, #7
 801904e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019052:	8282      	strh	r2, [r0, #20]
 8019054:	f365 13c7 	bfi	r3, r5, #7, #1
 8019058:	71c3      	strb	r3, [r0, #7]
 801905a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801905e:	7203      	strb	r3, [r0, #8]
 8019060:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019064:	7243      	strb	r3, [r0, #9]
 8019066:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801906a:	8143      	strh	r3, [r0, #10]
 801906c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019070:	8183      	strh	r3, [r0, #12]
 8019072:	4b01      	ldr	r3, [pc, #4]	; (8019078 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019074:	6003      	str	r3, [r0, #0]
 8019076:	bd30      	pop	{r4, r5, pc}
 8019078:	0802704c 	.word	0x0802704c

0801907c <_ZNK8touchgfx9ConstFont4findEt>:
 801907c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801907e:	6904      	ldr	r4, [r0, #16]
 8019080:	b3bc      	cbz	r4, 80190f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019082:	88a3      	ldrh	r3, [r4, #4]
 8019084:	8a82      	ldrh	r2, [r0, #20]
 8019086:	1acb      	subs	r3, r1, r3
 8019088:	f102 32ff 	add.w	r2, r2, #4294967295
 801908c:	d431      	bmi.n	80190f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801908e:	4293      	cmp	r3, r2
 8019090:	dd0c      	ble.n	80190ac <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019092:	230e      	movs	r3, #14
 8019094:	fb03 4302 	mla	r3, r3, r2, r4
 8019098:	889b      	ldrh	r3, [r3, #4]
 801909a:	1a5b      	subs	r3, r3, r1
 801909c:	1ad3      	subs	r3, r2, r3
 801909e:	429a      	cmp	r2, r3
 80190a0:	db27      	blt.n	80190f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	bfbc      	itt	lt
 80190a6:	2302      	movlt	r3, #2
 80190a8:	fb92 f3f3 	sdivlt	r3, r2, r3
 80190ac:	2500      	movs	r5, #0
 80190ae:	260e      	movs	r6, #14
 80190b0:	4295      	cmp	r5, r2
 80190b2:	dc1e      	bgt.n	80190f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80190b4:	fb06 4003 	mla	r0, r6, r3, r4
 80190b8:	8887      	ldrh	r7, [r0, #4]
 80190ba:	42b9      	cmp	r1, r7
 80190bc:	d01a      	beq.n	80190f4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80190be:	d20d      	bcs.n	80190dc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80190c0:	1e5a      	subs	r2, r3, #1
 80190c2:	4295      	cmp	r5, r2
 80190c4:	dc15      	bgt.n	80190f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80190c6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80190ca:	1a5b      	subs	r3, r3, r1
 80190cc:	1ad3      	subs	r3, r2, r3
 80190ce:	429a      	cmp	r2, r3
 80190d0:	db0f      	blt.n	80190f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80190d2:	429d      	cmp	r5, r3
 80190d4:	ddec      	ble.n	80190b0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80190d6:	1953      	adds	r3, r2, r5
 80190d8:	105b      	asrs	r3, r3, #1
 80190da:	e7e9      	b.n	80190b0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80190dc:	1c5d      	adds	r5, r3, #1
 80190de:	42aa      	cmp	r2, r5
 80190e0:	db07      	blt.n	80190f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80190e2:	8a43      	ldrh	r3, [r0, #18]
 80190e4:	1acb      	subs	r3, r1, r3
 80190e6:	442b      	add	r3, r5
 80190e8:	429d      	cmp	r5, r3
 80190ea:	dc02      	bgt.n	80190f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80190ec:	429a      	cmp	r2, r3
 80190ee:	dadf      	bge.n	80190b0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80190f0:	e7f1      	b.n	80190d6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80190f2:	2000      	movs	r0, #0
 80190f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080190f6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80190f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190f8:	4604      	mov	r4, r0
 80190fa:	4617      	mov	r7, r2
 80190fc:	461e      	mov	r6, r3
 80190fe:	b911      	cbnz	r1, 8019106 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019100:	2500      	movs	r5, #0
 8019102:	4628      	mov	r0, r5
 8019104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019106:	290a      	cmp	r1, #10
 8019108:	d0fa      	beq.n	8019100 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801910a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801910e:	4291      	cmp	r1, r2
 8019110:	d0f6      	beq.n	8019100 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019112:	f242 020b 	movw	r2, #8203	; 0x200b
 8019116:	4291      	cmp	r1, r2
 8019118:	d0f2      	beq.n	8019100 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801911a:	f7ff ffaf 	bl	801907c <_ZNK8touchgfx9ConstFont4findEt>
 801911e:	4605      	mov	r5, r0
 8019120:	b950      	cbnz	r0, 8019138 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019122:	6823      	ldr	r3, [r4, #0]
 8019124:	4620      	mov	r0, r4
 8019126:	691b      	ldr	r3, [r3, #16]
 8019128:	4798      	blx	r3
 801912a:	4601      	mov	r1, r0
 801912c:	4620      	mov	r0, r4
 801912e:	f7ff ffa5 	bl	801907c <_ZNK8touchgfx9ConstFont4findEt>
 8019132:	4605      	mov	r5, r0
 8019134:	2800      	cmp	r0, #0
 8019136:	d0e3      	beq.n	8019100 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019138:	6823      	ldr	r3, [r4, #0]
 801913a:	4629      	mov	r1, r5
 801913c:	4620      	mov	r0, r4
 801913e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019140:	4798      	blx	r3
 8019142:	6038      	str	r0, [r7, #0]
 8019144:	6823      	ldr	r3, [r4, #0]
 8019146:	4620      	mov	r0, r4
 8019148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801914a:	4798      	blx	r3
 801914c:	7030      	strb	r0, [r6, #0]
 801914e:	e7d8      	b.n	8019102 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019150 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8019150:	2002      	movs	r0, #2
 8019152:	4770      	bx	lr

08019154 <_ZN8touchgfx6ScreenD1Ev>:
 8019154:	4770      	bx	lr

08019156 <_ZN8touchgfx12GestureEventD1Ev>:
 8019156:	4770      	bx	lr

08019158 <_ZN8touchgfx12GestureEventD0Ev>:
 8019158:	b510      	push	{r4, lr}
 801915a:	4604      	mov	r4, r0
 801915c:	210c      	movs	r1, #12
 801915e:	f00a f86a 	bl	8023236 <_ZdlPvj>
 8019162:	4620      	mov	r0, r4
 8019164:	bd10      	pop	{r4, pc}

08019166 <_ZN8touchgfx6ScreenD0Ev>:
 8019166:	b510      	push	{r4, lr}
 8019168:	4604      	mov	r4, r0
 801916a:	213c      	movs	r1, #60	; 0x3c
 801916c:	f00a f863 	bl	8023236 <_ZdlPvj>
 8019170:	4620      	mov	r0, r4
 8019172:	bd10      	pop	{r4, pc}

08019174 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019174:	b530      	push	{r4, r5, lr}
 8019176:	460d      	mov	r5, r1
 8019178:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801917a:	b087      	sub	sp, #28
 801917c:	4604      	mov	r4, r0
 801917e:	b301      	cbz	r1, 80191c2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019180:	a801      	add	r0, sp, #4
 8019182:	f7ff ff47 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019186:	892a      	ldrh	r2, [r5, #8]
 8019188:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801918c:	7928      	ldrb	r0, [r5, #4]
 801918e:	1ad2      	subs	r2, r2, r3
 8019190:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019192:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019196:	441a      	add	r2, r3
 8019198:	896b      	ldrh	r3, [r5, #10]
 801919a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801919e:	f88d 0010 	strb.w	r0, [sp, #16]
 80191a2:	1b5b      	subs	r3, r3, r5
 80191a4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80191a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80191a8:	442b      	add	r3, r5
 80191aa:	4d07      	ldr	r5, [pc, #28]	; (80191c8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80191ac:	f8ad 1012 	strh.w	r1, [sp, #18]
 80191b0:	a903      	add	r1, sp, #12
 80191b2:	9503      	str	r5, [sp, #12]
 80191b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80191b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80191bc:	6803      	ldr	r3, [r0, #0]
 80191be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80191c0:	4798      	blx	r3
 80191c2:	b007      	add	sp, #28
 80191c4:	bd30      	pop	{r4, r5, pc}
 80191c6:	bf00      	nop
 80191c8:	080270a4 	.word	0x080270a4

080191cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80191cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80191d2:	b08a      	sub	sp, #40	; 0x28
 80191d4:	4604      	mov	r4, r0
 80191d6:	460d      	mov	r5, r1
 80191d8:	b113      	cbz	r3, 80191e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80191da:	790b      	ldrb	r3, [r1, #4]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d044      	beq.n	801926a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80191e0:	f104 0804 	add.w	r8, r4, #4
 80191e4:	a803      	add	r0, sp, #12
 80191e6:	4641      	mov	r1, r8
 80191e8:	f7ff ff14 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80191ec:	792b      	ldrb	r3, [r5, #4]
 80191ee:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80191f2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80191f6:	b983      	cbnz	r3, 801921a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80191f8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80191fc:	892a      	ldrh	r2, [r5, #8]
 80191fe:	88e9      	ldrh	r1, [r5, #6]
 8019200:	4640      	mov	r0, r8
 8019202:	1b92      	subs	r2, r2, r6
 8019204:	9301      	str	r3, [sp, #4]
 8019206:	1bc9      	subs	r1, r1, r7
 8019208:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801920c:	b212      	sxth	r2, r2
 801920e:	9300      	str	r3, [sp, #0]
 8019210:	b209      	sxth	r1, r1
 8019212:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019216:	f7f9 ff95 	bl	8013144 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801921a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801921c:	b329      	cbz	r1, 801926a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801921e:	a805      	add	r0, sp, #20
 8019220:	f7ff fef8 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019224:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019228:	792b      	ldrb	r3, [r5, #4]
 801922a:	a907      	add	r1, sp, #28
 801922c:	1abf      	subs	r7, r7, r2
 801922e:	88ea      	ldrh	r2, [r5, #6]
 8019230:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019232:	4417      	add	r7, r2
 8019234:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8019236:	f88d 3020 	strb.w	r3, [sp, #32]
 801923a:	4417      	add	r7, r2
 801923c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019240:	1ab6      	subs	r6, r6, r2
 8019242:	892a      	ldrh	r2, [r5, #8]
 8019244:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8019248:	4416      	add	r6, r2
 801924a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801924c:	4416      	add	r6, r2
 801924e:	4a08      	ldr	r2, [pc, #32]	; (8019270 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019250:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8019254:	2600      	movs	r6, #0
 8019256:	9207      	str	r2, [sp, #28]
 8019258:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801925c:	6803      	ldr	r3, [r0, #0]
 801925e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019260:	4798      	blx	r3
 8019262:	792b      	ldrb	r3, [r5, #4]
 8019264:	b10b      	cbz	r3, 801926a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019266:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801926a:	b00a      	add	sp, #40	; 0x28
 801926c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019270:	08026a38 	.word	0x08026a38

08019274 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019278:	460c      	mov	r4, r1
 801927a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801927c:	b088      	sub	sp, #32
 801927e:	4605      	mov	r5, r0
 8019280:	2900      	cmp	r1, #0
 8019282:	d06d      	beq.n	8019360 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8019284:	4668      	mov	r0, sp
 8019286:	f7ff fec5 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801928a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801928c:	88e3      	ldrh	r3, [r4, #6]
 801928e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8019292:	440b      	add	r3, r1
 8019294:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8019298:	b21b      	sxth	r3, r3
 801929a:	4543      	cmp	r3, r8
 801929c:	db31      	blt.n	8019302 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801929e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80192a2:	44c4      	add	ip, r8
 80192a4:	fa0f fc8c 	sxth.w	ip, ip
 80192a8:	4563      	cmp	r3, ip
 80192aa:	da2a      	bge.n	8019302 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80192ac:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80192ae:	8926      	ldrh	r6, [r4, #8]
 80192b0:	4416      	add	r6, r2
 80192b2:	b236      	sxth	r6, r6
 80192b4:	42be      	cmp	r6, r7
 80192b6:	db24      	blt.n	8019302 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80192b8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80192bc:	4438      	add	r0, r7
 80192be:	b200      	sxth	r0, r0
 80192c0:	4286      	cmp	r6, r0
 80192c2:	da1e      	bge.n	8019302 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80192c4:	8963      	ldrh	r3, [r4, #10]
 80192c6:	4419      	add	r1, r3
 80192c8:	b209      	sxth	r1, r1
 80192ca:	4541      	cmp	r1, r8
 80192cc:	db08      	blt.n	80192e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80192ce:	4561      	cmp	r1, ip
 80192d0:	da06      	bge.n	80192e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80192d2:	89a3      	ldrh	r3, [r4, #12]
 80192d4:	441a      	add	r2, r3
 80192d6:	b212      	sxth	r2, r2
 80192d8:	42ba      	cmp	r2, r7
 80192da:	db01      	blt.n	80192e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80192dc:	4282      	cmp	r2, r0
 80192de:	db10      	blt.n	8019302 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80192e0:	4b21      	ldr	r3, [pc, #132]	; (8019368 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80192e2:	a904      	add	r1, sp, #16
 80192e4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80192e6:	9304      	str	r3, [sp, #16]
 80192e8:	2302      	movs	r3, #2
 80192ea:	f88d 3014 	strb.w	r3, [sp, #20]
 80192ee:	2300      	movs	r3, #0
 80192f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80192f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80192f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80192fc:	6803      	ldr	r3, [r0, #0]
 80192fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019300:	4798      	blx	r3
 8019302:	1d29      	adds	r1, r5, #4
 8019304:	a802      	add	r0, sp, #8
 8019306:	f7ff fe85 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801930a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801930e:	88e0      	ldrh	r0, [r4, #6]
 8019310:	eba3 0808 	sub.w	r8, r3, r8
 8019314:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019318:	7921      	ldrb	r1, [r4, #4]
 801931a:	fa1f f888 	uxth.w	r8, r8
 801931e:	1bdf      	subs	r7, r3, r7
 8019320:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019324:	b2bb      	uxth	r3, r7
 8019326:	4440      	add	r0, r8
 8019328:	8922      	ldrh	r2, [r4, #8]
 801932a:	8967      	ldrh	r7, [r4, #10]
 801932c:	4460      	add	r0, ip
 801932e:	89a4      	ldrh	r4, [r4, #12]
 8019330:	441a      	add	r2, r3
 8019332:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019334:	44b8      	add	r8, r7
 8019336:	4423      	add	r3, r4
 8019338:	f8ad 0016 	strh.w	r0, [sp, #22]
 801933c:	4432      	add	r2, r6
 801933e:	44e0      	add	r8, ip
 8019340:	4433      	add	r3, r6
 8019342:	4c0a      	ldr	r4, [pc, #40]	; (801936c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8019344:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019346:	f88d 1014 	strb.w	r1, [sp, #20]
 801934a:	a904      	add	r1, sp, #16
 801934c:	9404      	str	r4, [sp, #16]
 801934e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019352:	f8ad 801a 	strh.w	r8, [sp, #26]
 8019356:	f8ad 301c 	strh.w	r3, [sp, #28]
 801935a:	6803      	ldr	r3, [r0, #0]
 801935c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801935e:	4798      	blx	r3
 8019360:	b008      	add	sp, #32
 8019362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019366:	bf00      	nop
 8019368:	08026a38 	.word	0x08026a38
 801936c:	08026a4c 	.word	0x08026a4c

08019370 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019372:	4604      	mov	r4, r0
 8019374:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019378:	3201      	adds	r2, #1
 801937a:	d112      	bne.n	80193a2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801937c:	2500      	movs	r5, #0
 801937e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019382:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019386:	6803      	ldr	r3, [r0, #0]
 8019388:	9500      	str	r5, [sp, #0]
 801938a:	466d      	mov	r5, sp
 801938c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019390:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019394:	4629      	mov	r1, r5
 8019396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019398:	4798      	blx	r3
 801939a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801939e:	e884 0003 	stmia.w	r4, {r0, r1}
 80193a2:	4620      	mov	r0, r4
 80193a4:	b003      	add	sp, #12
 80193a6:	bd30      	pop	{r4, r5, pc}

080193a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80193a8:	b513      	push	{r0, r1, r4, lr}
 80193aa:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80193ae:	4604      	mov	r4, r0
 80193b0:	3301      	adds	r3, #1
 80193b2:	d109      	bne.n	80193c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80193b4:	4601      	mov	r1, r0
 80193b6:	4668      	mov	r0, sp
 80193b8:	f7ff fe2c 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80193bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80193c0:	8423      	strh	r3, [r4, #32]
 80193c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80193c6:	8463      	strh	r3, [r4, #34]	; 0x22
 80193c8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80193cc:	b002      	add	sp, #8
 80193ce:	bd10      	pop	{r4, pc}

080193d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80193d0:	b513      	push	{r0, r1, r4, lr}
 80193d2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80193d6:	4604      	mov	r4, r0
 80193d8:	3301      	adds	r3, #1
 80193da:	d109      	bne.n	80193f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80193dc:	4601      	mov	r1, r0
 80193de:	4668      	mov	r0, sp
 80193e0:	f7ff fe18 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80193e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80193e8:	8423      	strh	r3, [r4, #32]
 80193ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80193ee:	8463      	strh	r3, [r4, #34]	; 0x22
 80193f0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80193f4:	b002      	add	sp, #8
 80193f6:	bd10      	pop	{r4, pc}

080193f8 <_ZN8touchgfx6ScreenC1Ev>:
 80193f8:	b570      	push	{r4, r5, r6, lr}
 80193fa:	4b17      	ldr	r3, [pc, #92]	; (8019458 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80193fc:	4605      	mov	r5, r0
 80193fe:	4a17      	ldr	r2, [pc, #92]	; (801945c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019400:	2101      	movs	r1, #1
 8019402:	f845 3b04 	str.w	r3, [r5], #4
 8019406:	2300      	movs	r3, #0
 8019408:	6042      	str	r2, [r0, #4]
 801940a:	4604      	mov	r4, r0
 801940c:	8103      	strh	r3, [r0, #8]
 801940e:	8143      	strh	r3, [r0, #10]
 8019410:	8183      	strh	r3, [r0, #12]
 8019412:	81c3      	strh	r3, [r0, #14]
 8019414:	8203      	strh	r3, [r0, #16]
 8019416:	8243      	strh	r3, [r0, #18]
 8019418:	8283      	strh	r3, [r0, #20]
 801941a:	82c3      	strh	r3, [r0, #22]
 801941c:	6203      	str	r3, [r0, #32]
 801941e:	8483      	strh	r3, [r0, #36]	; 0x24
 8019420:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019422:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8019426:	6343      	str	r3, [r0, #52]	; 0x34
 8019428:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801942c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019430:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019434:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8019438:	4b09      	ldr	r3, [pc, #36]	; (8019460 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801943a:	4628      	mov	r0, r5
 801943c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019440:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8019442:	4a08      	ldr	r2, [pc, #32]	; (8019464 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019444:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019448:	4798      	blx	r3
 801944a:	6863      	ldr	r3, [r4, #4]
 801944c:	4628      	mov	r0, r5
 801944e:	4631      	mov	r1, r6
 8019450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019452:	4798      	blx	r3
 8019454:	4620      	mov	r0, r4
 8019456:	bd70      	pop	{r4, r5, r6, pc}
 8019458:	080270b8 	.word	0x080270b8
 801945c:	080268e0 	.word	0x080268e0
 8019460:	2400feda 	.word	0x2400feda
 8019464:	2400fed8 	.word	0x2400fed8

08019468 <_ZN8touchgfx6Screen4drawEv>:
 8019468:	4b09      	ldr	r3, [pc, #36]	; (8019490 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801946a:	b507      	push	{r0, r1, r2, lr}
 801946c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019470:	2100      	movs	r1, #0
 8019472:	4b08      	ldr	r3, [pc, #32]	; (8019494 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019474:	9100      	str	r1, [sp, #0]
 8019476:	4669      	mov	r1, sp
 8019478:	f9b3 3000 	ldrsh.w	r3, [r3]
 801947c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019480:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019484:	6803      	ldr	r3, [r0, #0]
 8019486:	689b      	ldr	r3, [r3, #8]
 8019488:	4798      	blx	r3
 801948a:	b003      	add	sp, #12
 801948c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019490:	2400fed8 	.word	0x2400fed8
 8019494:	2400feda 	.word	0x2400feda

08019498 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801949c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80194a0:	b089      	sub	sp, #36	; 0x24
 80194a2:	4680      	mov	r8, r0
 80194a4:	460c      	mov	r4, r1
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	4615      	mov	r5, r2
 80194aa:	dd0e      	ble.n	80194ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80194ac:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	dd0a      	ble.n	80194ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80194b4:	4628      	mov	r0, r5
 80194b6:	f7ff ff5b 	bl	8019370 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80194ba:	4621      	mov	r1, r4
 80194bc:	f7fc fd88 	bl	8015fd0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80194c0:	69eb      	ldr	r3, [r5, #28]
 80194c2:	b928      	cbnz	r0, 80194d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80194c4:	461d      	mov	r5, r3
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d1f4      	bne.n	80194b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80194ca:	b009      	add	sp, #36	; 0x24
 80194cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d0:	ae04      	add	r6, sp, #16
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	f000 80b5 	beq.w	8019642 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80194d8:	682b      	ldr	r3, [r5, #0]
 80194da:	4629      	mov	r1, r5
 80194dc:	a802      	add	r0, sp, #8
 80194de:	68db      	ldr	r3, [r3, #12]
 80194e0:	4798      	blx	r3
 80194e2:	4628      	mov	r0, r5
 80194e4:	f7ff ff60 	bl	80193a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80194e8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80194ec:	4407      	add	r7, r0
 80194ee:	4628      	mov	r0, r5
 80194f0:	f7ff ff6e 	bl	80193d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80194f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80194f8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80194fc:	b23f      	sxth	r7, r7
 80194fe:	4418      	add	r0, r3
 8019500:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019504:	4621      	mov	r1, r4
 8019506:	f8ad 2014 	strh.w	r2, [sp, #20]
 801950a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801950e:	4630      	mov	r0, r6
 8019510:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019514:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019518:	f7f9 fef6 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 801951c:	4628      	mov	r0, r5
 801951e:	f7ff ff27 	bl	8019370 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019522:	ab06      	add	r3, sp, #24
 8019524:	4602      	mov	r2, r0
 8019526:	e896 0003 	ldmia.w	r6, {r0, r1}
 801952a:	e883 0003 	stmia.w	r3, {r0, r1}
 801952e:	4611      	mov	r1, r2
 8019530:	4618      	mov	r0, r3
 8019532:	f7f9 fee9 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 8019536:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801953a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801953e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019542:	4299      	cmp	r1, r3
 8019544:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019548:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801954c:	d10b      	bne.n	8019566 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801954e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019552:	4552      	cmp	r2, sl
 8019554:	d107      	bne.n	8019566 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019556:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801955a:	455a      	cmp	r2, fp
 801955c:	d103      	bne.n	8019566 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801955e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019562:	454a      	cmp	r2, r9
 8019564:	d06d      	beq.n	8019642 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019566:	f1bb 0f00 	cmp.w	fp, #0
 801956a:	dd65      	ble.n	8019638 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801956c:	f1b9 0f00 	cmp.w	r9, #0
 8019570:	dd62      	ble.n	8019638 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019572:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019576:	fa1f f08a 	uxth.w	r0, sl
 801957a:	4552      	cmp	r2, sl
 801957c:	9000      	str	r0, [sp, #0]
 801957e:	da12      	bge.n	80195a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8019580:	9301      	str	r3, [sp, #4]
 8019582:	9b00      	ldr	r3, [sp, #0]
 8019584:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019588:	f8ad 2012 	strh.w	r2, [sp, #18]
 801958c:	1a9a      	subs	r2, r3, r2
 801958e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019592:	4631      	mov	r1, r6
 8019594:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019598:	4640      	mov	r0, r8
 801959a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801959e:	69ea      	ldr	r2, [r5, #28]
 80195a0:	f7ff ff7a 	bl	8019498 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80195a4:	9b01      	ldr	r3, [sp, #4]
 80195a6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80195aa:	b29f      	uxth	r7, r3
 80195ac:	429a      	cmp	r2, r3
 80195ae:	da0d      	bge.n	80195cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80195b0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80195b4:	1aba      	subs	r2, r7, r2
 80195b6:	f8ad a012 	strh.w	sl, [sp, #18]
 80195ba:	4631      	mov	r1, r6
 80195bc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80195c0:	4640      	mov	r0, r8
 80195c2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80195c6:	69ea      	ldr	r2, [r5, #28]
 80195c8:	f7ff ff66 	bl	8019498 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80195cc:	8822      	ldrh	r2, [r4, #0]
 80195ce:	445f      	add	r7, fp
 80195d0:	88a3      	ldrh	r3, [r4, #4]
 80195d2:	b2bf      	uxth	r7, r7
 80195d4:	4413      	add	r3, r2
 80195d6:	b23a      	sxth	r2, r7
 80195d8:	b29b      	uxth	r3, r3
 80195da:	b219      	sxth	r1, r3
 80195dc:	4291      	cmp	r1, r2
 80195de:	dd0d      	ble.n	80195fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80195e0:	1bdb      	subs	r3, r3, r7
 80195e2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80195e6:	f8ad a012 	strh.w	sl, [sp, #18]
 80195ea:	4631      	mov	r1, r6
 80195ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80195f0:	4640      	mov	r0, r8
 80195f2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80195f6:	69ea      	ldr	r2, [r5, #28]
 80195f8:	f7ff ff4e 	bl	8019498 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80195fc:	88e2      	ldrh	r2, [r4, #6]
 80195fe:	8863      	ldrh	r3, [r4, #2]
 8019600:	4413      	add	r3, r2
 8019602:	9a00      	ldr	r2, [sp, #0]
 8019604:	444a      	add	r2, r9
 8019606:	b29b      	uxth	r3, r3
 8019608:	fa1f f982 	uxth.w	r9, r2
 801960c:	b219      	sxth	r1, r3
 801960e:	fa0f f289 	sxth.w	r2, r9
 8019612:	428a      	cmp	r2, r1
 8019614:	da15      	bge.n	8019642 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019616:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801961a:	eba3 0309 	sub.w	r3, r3, r9
 801961e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019622:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019626:	4631      	mov	r1, r6
 8019628:	f8ad 0010 	strh.w	r0, [sp, #16]
 801962c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019630:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019634:	69ea      	ldr	r2, [r5, #28]
 8019636:	e001      	b.n	801963c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019638:	69ea      	ldr	r2, [r5, #28]
 801963a:	4621      	mov	r1, r4
 801963c:	4640      	mov	r0, r8
 801963e:	f7ff ff2b 	bl	8019498 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019642:	4628      	mov	r0, r5
 8019644:	f7ff fe94 	bl	8019370 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019648:	6861      	ldr	r1, [r4, #4]
 801964a:	4602      	mov	r2, r0
 801964c:	4633      	mov	r3, r6
 801964e:	6820      	ldr	r0, [r4, #0]
 8019650:	c303      	stmia	r3!, {r0, r1}
 8019652:	4611      	mov	r1, r2
 8019654:	4630      	mov	r0, r6
 8019656:	f7f9 fe57 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 801965a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801965e:	2b00      	cmp	r3, #0
 8019660:	f77f af33 	ble.w	80194ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019664:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019668:	2b00      	cmp	r3, #0
 801966a:	f77f af2e 	ble.w	80194ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801966e:	4628      	mov	r0, r5
 8019670:	f7ff fe9a 	bl	80193a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019674:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019678:	1a18      	subs	r0, r3, r0
 801967a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801967e:	4628      	mov	r0, r5
 8019680:	f7ff fea6 	bl	80193d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019684:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019688:	4631      	mov	r1, r6
 801968a:	1a18      	subs	r0, r3, r0
 801968c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019690:	4628      	mov	r0, r5
 8019692:	682b      	ldr	r3, [r5, #0]
 8019694:	689b      	ldr	r3, [r3, #8]
 8019696:	4798      	blx	r3
 8019698:	e717      	b.n	80194ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801969a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801969a:	b570      	push	{r4, r5, r6, lr}
 801969c:	1d06      	adds	r6, r0, #4
 801969e:	b086      	sub	sp, #24
 80196a0:	460c      	mov	r4, r1
 80196a2:	2300      	movs	r3, #0
 80196a4:	4631      	mov	r1, r6
 80196a6:	4605      	mov	r5, r0
 80196a8:	a802      	add	r0, sp, #8
 80196aa:	9301      	str	r3, [sp, #4]
 80196ac:	f7ff fcb2 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80196b0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80196b4:	8822      	ldrh	r2, [r4, #0]
 80196b6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80196ba:	1ad2      	subs	r2, r2, r3
 80196bc:	8863      	ldrh	r3, [r4, #2]
 80196be:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80196c2:	1a5b      	subs	r3, r3, r1
 80196c4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80196c8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80196cc:	aa01      	add	r2, sp, #4
 80196ce:	f8ad 0014 	strh.w	r0, [sp, #20]
 80196d2:	4630      	mov	r0, r6
 80196d4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80196d8:	a904      	add	r1, sp, #16
 80196da:	f8ad 3012 	strh.w	r3, [sp, #18]
 80196de:	f7f9 feeb 	bl	80134b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80196e2:	9a01      	ldr	r2, [sp, #4]
 80196e4:	b11a      	cbz	r2, 80196ee <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80196e6:	4621      	mov	r1, r4
 80196e8:	4628      	mov	r0, r5
 80196ea:	f7ff fed5 	bl	8019498 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80196ee:	b006      	add	sp, #24
 80196f0:	bd70      	pop	{r4, r5, r6, pc}

080196f2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80196f2:	4602      	mov	r2, r0
 80196f4:	b530      	push	{r4, r5, lr}
 80196f6:	4604      	mov	r4, r0
 80196f8:	b085      	sub	sp, #20
 80196fa:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80196fe:	460d      	mov	r5, r1
 8019700:	466b      	mov	r3, sp
 8019702:	6851      	ldr	r1, [r2, #4]
 8019704:	c303      	stmia	r3!, {r0, r1}
 8019706:	4629      	mov	r1, r5
 8019708:	4668      	mov	r0, sp
 801970a:	f7f9 fdfd 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 801970e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019712:	b12b      	cbz	r3, 8019720 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8019714:	4669      	mov	r1, sp
 8019716:	4620      	mov	r0, r4
 8019718:	f7ff ffbf 	bl	801969a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801971c:	b005      	add	sp, #20
 801971e:	bd30      	pop	{r4, r5, pc}
 8019720:	3404      	adds	r4, #4
 8019722:	a802      	add	r0, sp, #8
 8019724:	4621      	mov	r1, r4
 8019726:	f7ff fc75 	bl	8019014 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801972a:	f8bd 3000 	ldrh.w	r3, [sp]
 801972e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019732:	4669      	mov	r1, sp
 8019734:	4620      	mov	r0, r4
 8019736:	1a9b      	subs	r3, r3, r2
 8019738:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801973c:	f8ad 3000 	strh.w	r3, [sp]
 8019740:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019744:	1a9b      	subs	r3, r3, r2
 8019746:	f8ad 3002 	strh.w	r3, [sp, #2]
 801974a:	f7f9 fe7c 	bl	8013446 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801974e:	e7e5      	b.n	801971c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08019750 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8019750:	460b      	mov	r3, r1
 8019752:	680a      	ldr	r2, [r1, #0]
 8019754:	1d01      	adds	r1, r0, #4
 8019756:	6992      	ldr	r2, [r2, #24]
 8019758:	4618      	mov	r0, r3
 801975a:	4710      	bx	r2

0801975c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801975c:	4298      	cmp	r0, r3
 801975e:	d200      	bcs.n	8019762 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8019760:	b913      	cbnz	r3, 8019768 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8019762:	440a      	add	r2, r1
 8019764:	b210      	sxth	r0, r2
 8019766:	4770      	bx	lr
 8019768:	ee07 0a90 	vmov	s15, r0
 801976c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8019770:	ee07 3a90 	vmov	s15, r3
 8019774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801977c:	ee07 2a90 	vmov	s15, r2
 8019780:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019784:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8019788:	ee07 1a90 	vmov	s15, r1
 801978c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019790:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019794:	ee67 5a07 	vmul.f32	s11, s14, s14
 8019798:	eee5 6a87 	vfma.f32	s13, s11, s14
 801979c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80197a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80197a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80197a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197ac:	bfcc      	ite	gt
 80197ae:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80197b2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80197b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197ba:	ee17 3a90 	vmov	r3, s15
 80197be:	b218      	sxth	r0, r3
 80197c0:	4770      	bx	lr

080197c2 <_ZN8touchgfx12TextProviderC1Ev>:
 80197c2:	b538      	push	{r3, r4, r5, lr}
 80197c4:	2500      	movs	r5, #0
 80197c6:	2302      	movs	r3, #2
 80197c8:	4604      	mov	r4, r0
 80197ca:	220e      	movs	r2, #14
 80197cc:	7403      	strb	r3, [r0, #16]
 80197ce:	4629      	mov	r1, r5
 80197d0:	6145      	str	r5, [r0, #20]
 80197d2:	7605      	strb	r5, [r0, #24]
 80197d4:	83c5      	strh	r5, [r0, #30]
 80197d6:	8405      	strh	r5, [r0, #32]
 80197d8:	86c5      	strh	r5, [r0, #54]	; 0x36
 80197da:	8705      	strh	r5, [r0, #56]	; 0x38
 80197dc:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80197de:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80197e2:	e9c0 5500 	strd	r5, r5, [r0]
 80197e6:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80197ea:	304c      	adds	r0, #76	; 0x4c
 80197ec:	f009 fee8 	bl	80235c0 <memset>
 80197f0:	2301      	movs	r3, #1
 80197f2:	4620      	mov	r0, r4
 80197f4:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80197f8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80197fc:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8019800:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8019804:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8019808:	f7ea fdfe 	bl	8004408 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801980c:	4620      	mov	r0, r4
 801980e:	bd38      	pop	{r3, r4, r5, pc}

08019810 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8019810:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019812:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019816:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8019818:	fab0 f080 	clz	r0, r0
 801981c:	0940      	lsrs	r0, r0, #5
 801981e:	4770      	bx	lr

08019820 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019820:	b530      	push	{r4, r5, lr}
 8019822:	2500      	movs	r5, #0
 8019824:	2401      	movs	r4, #1
 8019826:	6843      	ldr	r3, [r0, #4]
 8019828:	b913      	cbnz	r3, 8019830 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801982a:	6803      	ldr	r3, [r0, #0]
 801982c:	b313      	cbz	r3, 8019874 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801982e:	6043      	str	r3, [r0, #4]
 8019830:	7e03      	ldrb	r3, [r0, #24]
 8019832:	b143      	cbz	r3, 8019846 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019834:	6943      	ldr	r3, [r0, #20]
 8019836:	b12b      	cbz	r3, 8019844 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8019838:	881a      	ldrh	r2, [r3, #0]
 801983a:	b11a      	cbz	r2, 8019844 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801983c:	1c9a      	adds	r2, r3, #2
 801983e:	6142      	str	r2, [r0, #20]
 8019840:	8818      	ldrh	r0, [r3, #0]
 8019842:	bd30      	pop	{r4, r5, pc}
 8019844:	7605      	strb	r5, [r0, #24]
 8019846:	6843      	ldr	r3, [r0, #4]
 8019848:	8819      	ldrh	r1, [r3, #0]
 801984a:	b199      	cbz	r1, 8019874 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801984c:	1c9a      	adds	r2, r3, #2
 801984e:	2902      	cmp	r1, #2
 8019850:	6042      	str	r2, [r0, #4]
 8019852:	d1f5      	bne.n	8019840 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8019854:	7c03      	ldrb	r3, [r0, #16]
 8019856:	2b01      	cmp	r3, #1
 8019858:	d8e5      	bhi.n	8019826 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801985a:	1c5a      	adds	r2, r3, #1
 801985c:	3302      	adds	r3, #2
 801985e:	7402      	strb	r2, [r0, #16]
 8019860:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8019864:	6143      	str	r3, [r0, #20]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d0dd      	beq.n	8019826 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801986a:	881b      	ldrh	r3, [r3, #0]
 801986c:	2b00      	cmp	r3, #0
 801986e:	d0da      	beq.n	8019826 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019870:	7604      	strb	r4, [r0, #24]
 8019872:	e7d8      	b.n	8019826 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8019874:	2000      	movs	r0, #0
 8019876:	e7e4      	b.n	8019842 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08019878 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8019878:	6001      	str	r1, [r0, #0]
 801987a:	2100      	movs	r1, #0
 801987c:	b430      	push	{r4, r5}
 801987e:	6041      	str	r1, [r0, #4]
 8019880:	6815      	ldr	r5, [r2, #0]
 8019882:	6085      	str	r5, [r0, #8]
 8019884:	6852      	ldr	r2, [r2, #4]
 8019886:	6443      	str	r3, [r0, #68]	; 0x44
 8019888:	9b02      	ldr	r3, [sp, #8]
 801988a:	60c2      	str	r2, [r0, #12]
 801988c:	7401      	strb	r1, [r0, #16]
 801988e:	6141      	str	r1, [r0, #20]
 8019890:	7601      	strb	r1, [r0, #24]
 8019892:	8701      	strh	r1, [r0, #56]	; 0x38
 8019894:	8401      	strh	r1, [r0, #32]
 8019896:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801989a:	6483      	str	r3, [r0, #72]	; 0x48
 801989c:	bc30      	pop	{r4, r5}
 801989e:	f7ea bdb3 	b.w	8004408 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080198a2 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 80198a2:	b408      	push	{r3}
 80198a4:	b510      	push	{r4, lr}
 80198a6:	b085      	sub	sp, #20
 80198a8:	ac07      	add	r4, sp, #28
 80198aa:	f854 3b04 	ldr.w	r3, [r4], #4
 80198ae:	9300      	str	r3, [sp, #0]
 80198b0:	4613      	mov	r3, r2
 80198b2:	4622      	mov	r2, r4
 80198b4:	9403      	str	r4, [sp, #12]
 80198b6:	f7ff ffdf 	bl	8019878 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80198ba:	b005      	add	sp, #20
 80198bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198c0:	b001      	add	sp, #4
 80198c2:	4770      	bx	lr

080198c4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80198c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198c6:	4605      	mov	r5, r0
 80198c8:	4608      	mov	r0, r1
 80198ca:	b1f1      	cbz	r1, 801990a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80198cc:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80198d0:	460b      	mov	r3, r1
 80198d2:	f101 0708 	add.w	r7, r1, #8
 80198d6:	4622      	mov	r2, r4
 80198d8:	6818      	ldr	r0, [r3, #0]
 80198da:	3308      	adds	r3, #8
 80198dc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80198e0:	4626      	mov	r6, r4
 80198e2:	42bb      	cmp	r3, r7
 80198e4:	c603      	stmia	r6!, {r0, r1}
 80198e6:	4634      	mov	r4, r6
 80198e8:	d1f6      	bne.n	80198d8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80198ea:	6818      	ldr	r0, [r3, #0]
 80198ec:	6030      	str	r0, [r6, #0]
 80198ee:	4610      	mov	r0, r2
 80198f0:	889b      	ldrh	r3, [r3, #4]
 80198f2:	80b3      	strh	r3, [r6, #4]
 80198f4:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80198f8:	015b      	lsls	r3, r3, #5
 80198fa:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80198fe:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8019902:	430b      	orrs	r3, r1
 8019904:	425b      	negs	r3, r3
 8019906:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801990a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801990c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801990c:	b538      	push	{r3, r4, r5, lr}
 801990e:	460c      	mov	r4, r1
 8019910:	6811      	ldr	r1, [r2, #0]
 8019912:	4610      	mov	r0, r2
 8019914:	68cd      	ldr	r5, [r1, #12]
 8019916:	4619      	mov	r1, r3
 8019918:	47a8      	blx	r5
 801991a:	2800      	cmp	r0, #0
 801991c:	bf08      	it	eq
 801991e:	4620      	moveq	r0, r4
 8019920:	bd38      	pop	{r3, r4, r5, pc}
	...

08019924 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019926:	4604      	mov	r4, r0
 8019928:	4615      	mov	r5, r2
 801992a:	4608      	mov	r0, r1
 801992c:	b93a      	cbnz	r2, 801993e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801992e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019932:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8019936:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801993a:	4628      	mov	r0, r5
 801993c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801993e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8019942:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8019946:	8893      	ldrh	r3, [r2, #4]
 8019948:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801994c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019950:	79ee      	ldrb	r6, [r5, #7]
 8019952:	4316      	orrs	r6, r2
 8019954:	19da      	adds	r2, r3, r7
 8019956:	b291      	uxth	r1, r2
 8019958:	b2b7      	uxth	r7, r6
 801995a:	291d      	cmp	r1, #29
 801995c:	d87b      	bhi.n	8019a56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801995e:	2201      	movs	r2, #1
 8019960:	10f6      	asrs	r6, r6, #3
 8019962:	408a      	lsls	r2, r1
 8019964:	4974      	ldr	r1, [pc, #464]	; (8019b38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8019966:	420a      	tst	r2, r1
 8019968:	d12e      	bne.n	80199c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801996a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801996e:	d072      	beq.n	8019a56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8019970:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8019974:	462b      	mov	r3, r5
 8019976:	f105 0e08 	add.w	lr, r5, #8
 801997a:	4615      	mov	r5, r2
 801997c:	6818      	ldr	r0, [r3, #0]
 801997e:	3308      	adds	r3, #8
 8019980:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019984:	4694      	mov	ip, r2
 8019986:	4573      	cmp	r3, lr
 8019988:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801998c:	4662      	mov	r2, ip
 801998e:	d1f5      	bne.n	801997c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8019990:	6818      	ldr	r0, [r3, #0]
 8019992:	f8cc 0000 	str.w	r0, [ip]
 8019996:	889b      	ldrh	r3, [r3, #4]
 8019998:	f8ac 3004 	strh.w	r3, [ip, #4]
 801999c:	b2b3      	uxth	r3, r6
 801999e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80199a2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80199a6:	1aca      	subs	r2, r1, r3
 80199a8:	1bcf      	subs	r7, r1, r7
 80199aa:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80199ae:	b292      	uxth	r2, r2
 80199b0:	1afb      	subs	r3, r7, r3
 80199b2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80199b6:	10d2      	asrs	r2, r2, #3
 80199b8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80199bc:	4302      	orrs	r2, r0
 80199be:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80199c2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80199c6:	e7b8      	b.n	801993a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80199c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80199ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80199ce:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80199d0:	f640 6333 	movw	r3, #3635	; 0xe33
 80199d4:	4299      	cmp	r1, r3
 80199d6:	d110      	bne.n	80199fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 80199d8:	6803      	ldr	r3, [r0, #0]
 80199da:	68db      	ldr	r3, [r3, #12]
 80199dc:	4798      	blx	r3
 80199de:	7b41      	ldrb	r1, [r0, #13]
 80199e0:	00cb      	lsls	r3, r1, #3
 80199e2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80199e6:	7a03      	ldrb	r3, [r0, #8]
 80199e8:	0648      	lsls	r0, r1, #25
 80199ea:	ea43 0302 	orr.w	r3, r3, r2
 80199ee:	bf44      	itt	mi
 80199f0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80199f4:	b21b      	sxthmi	r3, r3
 80199f6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80199fa:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80199fe:	462a      	mov	r2, r5
 8019a00:	f105 0c08 	add.w	ip, r5, #8
 8019a04:	443b      	add	r3, r7
 8019a06:	4433      	add	r3, r6
 8019a08:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8019a0c:	b29b      	uxth	r3, r3
 8019a0e:	4635      	mov	r5, r6
 8019a10:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019a14:	6810      	ldr	r0, [r2, #0]
 8019a16:	3208      	adds	r2, #8
 8019a18:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8019a1c:	4637      	mov	r7, r6
 8019a1e:	4562      	cmp	r2, ip
 8019a20:	c703      	stmia	r7!, {r0, r1}
 8019a22:	463e      	mov	r6, r7
 8019a24:	d1f6      	bne.n	8019a14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8019a26:	6810      	ldr	r0, [r2, #0]
 8019a28:	6038      	str	r0, [r7, #0]
 8019a2a:	8892      	ldrh	r2, [r2, #4]
 8019a2c:	80ba      	strh	r2, [r7, #4]
 8019a2e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019a32:	10db      	asrs	r3, r3, #3
 8019a34:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019a38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019a3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019a40:	4313      	orrs	r3, r2
 8019a42:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8019a46:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019a4a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8019a4e:	1a9b      	subs	r3, r3, r2
 8019a50:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019a54:	e771      	b.n	801993a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8019a56:	f023 0204 	bic.w	r2, r3, #4
 8019a5a:	f640 611b 	movw	r1, #3611	; 0xe1b
 8019a5e:	428a      	cmp	r2, r1
 8019a60:	d003      	beq.n	8019a6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8019a62:	f640 621d 	movw	r2, #3613	; 0xe1d
 8019a66:	4293      	cmp	r3, r2
 8019a68:	d120      	bne.n	8019aac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8019a6a:	3b01      	subs	r3, #1
 8019a6c:	4602      	mov	r2, r0
 8019a6e:	4629      	mov	r1, r5
 8019a70:	4620      	mov	r0, r4
 8019a72:	b29b      	uxth	r3, r3
 8019a74:	f7ff ff4a 	bl	801990c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019a78:	7b41      	ldrb	r1, [r0, #13]
 8019a7a:	00cb      	lsls	r3, r1, #3
 8019a7c:	0649      	lsls	r1, r1, #25
 8019a7e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019a82:	7a03      	ldrb	r3, [r0, #8]
 8019a84:	ea43 0302 	orr.w	r3, r3, r2
 8019a88:	bf44      	itt	mi
 8019a8a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019a8e:	b21b      	sxthmi	r3, r3
 8019a90:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019a94:	7b6b      	ldrb	r3, [r5, #13]
 8019a96:	7aaa      	ldrb	r2, [r5, #10]
 8019a98:	005b      	lsls	r3, r3, #1
 8019a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019a9e:	4313      	orrs	r3, r2
 8019aa0:	115a      	asrs	r2, r3, #5
 8019aa2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8019aa6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019aaa:	e035      	b.n	8019b18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8019aac:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019ab0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8019ab4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8019ab8:	7a2a      	ldrb	r2, [r5, #8]
 8019aba:	ea42 0201 	orr.w	r2, r2, r1
 8019abe:	f640 6109 	movw	r1, #3593	; 0xe09
 8019ac2:	bf1c      	itt	ne
 8019ac4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8019ac8:	b212      	sxthne	r2, r2
 8019aca:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019ace:	f023 0210 	bic.w	r2, r3, #16
 8019ad2:	428a      	cmp	r2, r1
 8019ad4:	d003      	beq.n	8019ade <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8019ad6:	f640 6213 	movw	r2, #3603	; 0xe13
 8019ada:	4293      	cmp	r3, r2
 8019adc:	d129      	bne.n	8019b32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8019ade:	7b6e      	ldrb	r6, [r5, #13]
 8019ae0:	4629      	mov	r1, r5
 8019ae2:	0076      	lsls	r6, r6, #1
 8019ae4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8019ae8:	7aae      	ldrb	r6, [r5, #10]
 8019aea:	4316      	orrs	r6, r2
 8019aec:	f640 6213 	movw	r2, #3603	; 0xe13
 8019af0:	4293      	cmp	r3, r2
 8019af2:	4602      	mov	r2, r0
 8019af4:	4620      	mov	r0, r4
 8019af6:	bf16      	itet	ne
 8019af8:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019afc:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019b00:	b29b      	uxthne	r3, r3
 8019b02:	f7ff ff03 	bl	801990c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8019b06:	7b43      	ldrb	r3, [r0, #13]
 8019b08:	7a82      	ldrb	r2, [r0, #10]
 8019b0a:	005b      	lsls	r3, r3, #1
 8019b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b10:	4313      	orrs	r3, r2
 8019b12:	1af6      	subs	r6, r6, r3
 8019b14:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8019b18:	7b69      	ldrb	r1, [r5, #13]
 8019b1a:	00cb      	lsls	r3, r1, #3
 8019b1c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019b20:	7a2b      	ldrb	r3, [r5, #8]
 8019b22:	4313      	orrs	r3, r2
 8019b24:	064a      	lsls	r2, r1, #25
 8019b26:	bf44      	itt	mi
 8019b28:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019b2c:	b21b      	sxthmi	r3, r3
 8019b2e:	1bdb      	subs	r3, r3, r7
 8019b30:	e747      	b.n	80199c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8019b32:	2300      	movs	r3, #0
 8019b34:	e7b7      	b.n	8019aa6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8019b36:	bf00      	nop
 8019b38:	3fc00079 	.word	0x3fc00079

08019b3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8019b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b40:	4604      	mov	r4, r0
 8019b42:	b942      	cbnz	r2, 8019b56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019b48:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8019b4c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8019b50:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8019b54:	e047      	b.n	8019be6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019b56:	7b51      	ldrb	r1, [r2, #13]
 8019b58:	8893      	ldrh	r3, [r2, #4]
 8019b5a:	010d      	lsls	r5, r1, #4
 8019b5c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8019b60:	79d5      	ldrb	r5, [r2, #7]
 8019b62:	4305      	orrs	r5, r0
 8019b64:	2d04      	cmp	r5, #4
 8019b66:	bfcc      	ite	gt
 8019b68:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8019b6c:	f04f 0e01 	movle.w	lr, #1
 8019b70:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8019b74:	f200 80ab 	bhi.w	8019cce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8019b78:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8019b7c:	4283      	cmp	r3, r0
 8019b7e:	d216      	bcs.n	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019b80:	f240 605b 	movw	r0, #1627	; 0x65b
 8019b84:	4283      	cmp	r3, r0
 8019b86:	d859      	bhi.n	8019c3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8019b88:	f240 6057 	movw	r0, #1623	; 0x657
 8019b8c:	4283      	cmp	r3, r0
 8019b8e:	d20e      	bcs.n	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019b90:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019b94:	d24a      	bcs.n	8019c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8019b96:	f240 604e 	movw	r0, #1614	; 0x64e
 8019b9a:	4283      	cmp	r3, r0
 8019b9c:	d207      	bcs.n	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019b9e:	f240 601a 	movw	r0, #1562	; 0x61a
 8019ba2:	4283      	cmp	r3, r0
 8019ba4:	d02a      	beq.n	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019ba6:	d821      	bhi.n	8019bec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019ba8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019bac:	d35b      	bcc.n	8019c66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019bae:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8019bb2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019bb6:	f040 80d0 	bne.w	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019bba:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8019bbe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019bc2:	f040 80ca 	bne.w	8019d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019bc6:	00cb      	lsls	r3, r1, #3
 8019bc8:	0649      	lsls	r1, r1, #25
 8019bca:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019bce:	7a13      	ldrb	r3, [r2, #8]
 8019bd0:	ea43 0300 	orr.w	r3, r3, r0
 8019bd4:	bf44      	itt	mi
 8019bd6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019bda:	b21b      	sxthmi	r3, r3
 8019bdc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019be0:	1b5d      	subs	r5, r3, r5
 8019be2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019be6:	4610      	mov	r0, r2
 8019be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bec:	f240 604b 	movw	r0, #1611	; 0x64b
 8019bf0:	4283      	cmp	r3, r0
 8019bf2:	d338      	bcc.n	8019c66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019bf4:	f240 604c 	movw	r0, #1612	; 0x64c
 8019bf8:	4283      	cmp	r3, r0
 8019bfa:	d9d8      	bls.n	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019bfc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8019c00:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8019c04:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019c08:	f040 80f3 	bne.w	8019df2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019c0c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019c10:	f040 80ef 	bne.w	8019df2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019c14:	00cb      	lsls	r3, r1, #3
 8019c16:	064e      	lsls	r6, r1, #25
 8019c18:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019c1c:	7a13      	ldrb	r3, [r2, #8]
 8019c1e:	ea43 0300 	orr.w	r3, r3, r0
 8019c22:	bf44      	itt	mi
 8019c24:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019c28:	b21b      	sxthmi	r3, r3
 8019c2a:	e7d9      	b.n	8019be0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8019c2c:	f240 6054 	movw	r0, #1620	; 0x654
 8019c30:	4283      	cmp	r3, r0
 8019c32:	d8e3      	bhi.n	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019c34:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8019c38:	d9e0      	bls.n	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019c3a:	e7b8      	b.n	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019c3c:	f240 6074 	movw	r0, #1652	; 0x674
 8019c40:	4283      	cmp	r3, r0
 8019c42:	d0b4      	beq.n	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019c44:	d82d      	bhi.n	8019ca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8019c46:	f240 605e 	movw	r0, #1630	; 0x65e
 8019c4a:	4283      	cmp	r3, r0
 8019c4c:	d804      	bhi.n	8019c58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8019c4e:	f240 605d 	movw	r0, #1629	; 0x65d
 8019c52:	4283      	cmp	r3, r0
 8019c54:	d3d2      	bcc.n	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019c56:	e7aa      	b.n	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019c58:	f240 605f 	movw	r0, #1631	; 0x65f
 8019c5c:	4283      	cmp	r3, r0
 8019c5e:	d0cd      	beq.n	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019c60:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8019c64:	d0a3      	beq.n	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019c66:	00cb      	lsls	r3, r1, #3
 8019c68:	0649      	lsls	r1, r1, #25
 8019c6a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019c6e:	7a13      	ldrb	r3, [r2, #8]
 8019c70:	ea43 0300 	orr.w	r3, r3, r0
 8019c74:	bf44      	itt	mi
 8019c76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019c7a:	b21b      	sxthmi	r3, r3
 8019c7c:	1b5d      	subs	r5, r3, r5
 8019c7e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019c82:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019c86:	7b53      	ldrb	r3, [r2, #13]
 8019c88:	015b      	lsls	r3, r3, #5
 8019c8a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019c8e:	7993      	ldrb	r3, [r2, #6]
 8019c90:	430b      	orrs	r3, r1
 8019c92:	2105      	movs	r1, #5
 8019c94:	005b      	lsls	r3, r3, #1
 8019c96:	fb93 f3f1 	sdiv	r3, r3, r1
 8019c9a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019c9e:	440b      	add	r3, r1
 8019ca0:	e756      	b.n	8019b50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8019ca2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8019ca6:	4283      	cmp	r3, r0
 8019ca8:	d809      	bhi.n	8019cbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8019caa:	f240 60df 	movw	r0, #1759	; 0x6df
 8019cae:	4283      	cmp	r3, r0
 8019cb0:	f4bf af7d 	bcs.w	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019cb4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8019cb8:	2b05      	cmp	r3, #5
 8019cba:	d8d4      	bhi.n	8019c66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019cbc:	e777      	b.n	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019cbe:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8019cc2:	4283      	cmp	r3, r0
 8019cc4:	d09a      	beq.n	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019cc6:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8019cca:	4283      	cmp	r3, r0
 8019ccc:	e7ca      	b.n	8019c64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019cce:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8019cd2:	d22b      	bcs.n	8019d2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019cd4:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8019cd8:	4283      	cmp	r3, r0
 8019cda:	d28f      	bcs.n	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019cdc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019ce0:	4283      	cmp	r3, r0
 8019ce2:	d816      	bhi.n	8019d12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019ce4:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8019ce8:	4283      	cmp	r3, r0
 8019cea:	f4bf af60 	bcs.w	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019cee:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8019cf2:	4283      	cmp	r3, r0
 8019cf4:	d80a      	bhi.n	8019d0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8019cf6:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8019cfa:	4283      	cmp	r3, r0
 8019cfc:	f4bf af57 	bcs.w	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d00:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8019d04:	4283      	cmp	r3, r0
 8019d06:	f43f af79 	beq.w	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019d0a:	e7ac      	b.n	8019c66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019d0c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8019d10:	e7f8      	b.n	8019d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8019d12:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8019d16:	4283      	cmp	r3, r0
 8019d18:	d802      	bhi.n	8019d20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8019d1a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019d1e:	e798      	b.n	8019c52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019d20:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8019d24:	4283      	cmp	r3, r0
 8019d26:	f47f af42 	bne.w	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d2a:	e767      	b.n	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019d2c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8019d30:	4283      	cmp	r3, r0
 8019d32:	f43f af63 	beq.w	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019d36:	d802      	bhi.n	8019d3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8019d38:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8019d3c:	e7f2      	b.n	8019d24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8019d3e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8019d42:	4283      	cmp	r3, r0
 8019d44:	d805      	bhi.n	8019d52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8019d46:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8019d4a:	4283      	cmp	r3, r0
 8019d4c:	f4ff af2f 	bcc.w	8019bae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019d50:	e754      	b.n	8019bfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019d52:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8019d56:	4283      	cmp	r3, r0
 8019d58:	e7af      	b.n	8019cba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8019d5a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8019d5e:	4617      	mov	r7, r2
 8019d60:	f102 0808 	add.w	r8, r2, #8
 8019d64:	4666      	mov	r6, ip
 8019d66:	6838      	ldr	r0, [r7, #0]
 8019d68:	3708      	adds	r7, #8
 8019d6a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019d6e:	46e6      	mov	lr, ip
 8019d70:	4547      	cmp	r7, r8
 8019d72:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019d76:	46f4      	mov	ip, lr
 8019d78:	d1f5      	bne.n	8019d66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8019d7a:	6838      	ldr	r0, [r7, #0]
 8019d7c:	f8ce 0000 	str.w	r0, [lr]
 8019d80:	88b9      	ldrh	r1, [r7, #4]
 8019d82:	f8ae 1004 	strh.w	r1, [lr, #4]
 8019d86:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019d8a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019d8e:	d009      	beq.n	8019da4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8019d90:	7b51      	ldrb	r1, [r2, #13]
 8019d92:	7992      	ldrb	r2, [r2, #6]
 8019d94:	0149      	lsls	r1, r1, #5
 8019d96:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019d9a:	4311      	orrs	r1, r2
 8019d9c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019da0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019da4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019da8:	b2ad      	uxth	r5, r5
 8019daa:	d00d      	beq.n	8019dc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8019dac:	442b      	add	r3, r5
 8019dae:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019db8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019dbc:	10db      	asrs	r3, r3, #3
 8019dbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019dc2:	4313      	orrs	r3, r2
 8019dc4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019dc8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019dcc:	00cb      	lsls	r3, r1, #3
 8019dce:	064f      	lsls	r7, r1, #25
 8019dd0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019dd4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8019dd8:	ea43 0302 	orr.w	r3, r3, r2
 8019ddc:	bf44      	itt	mi
 8019dde:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019de2:	b21b      	sxthmi	r3, r3
 8019de4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019de8:	1b5b      	subs	r3, r3, r5
 8019dea:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019dee:	4632      	mov	r2, r6
 8019df0:	e6f9      	b.n	8019be6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019df2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8019df6:	4617      	mov	r7, r2
 8019df8:	f102 0908 	add.w	r9, r2, #8
 8019dfc:	4666      	mov	r6, ip
 8019dfe:	6838      	ldr	r0, [r7, #0]
 8019e00:	3708      	adds	r7, #8
 8019e02:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8019e06:	46e0      	mov	r8, ip
 8019e08:	454f      	cmp	r7, r9
 8019e0a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019e0e:	46c4      	mov	ip, r8
 8019e10:	d1f5      	bne.n	8019dfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8019e12:	6838      	ldr	r0, [r7, #0]
 8019e14:	f8c8 0000 	str.w	r0, [r8]
 8019e18:	88b9      	ldrh	r1, [r7, #4]
 8019e1a:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019e1e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019e22:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019e26:	d009      	beq.n	8019e3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8019e28:	7b51      	ldrb	r1, [r2, #13]
 8019e2a:	7992      	ldrb	r2, [r2, #6]
 8019e2c:	0149      	lsls	r1, r1, #5
 8019e2e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019e32:	4311      	orrs	r1, r2
 8019e34:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019e38:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019e3c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019e40:	d00e      	beq.n	8019e60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8019e42:	eba3 030e 	sub.w	r3, r3, lr
 8019e46:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019e4a:	b29b      	uxth	r3, r3
 8019e4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019e50:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019e54:	10db      	asrs	r3, r3, #3
 8019e56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019e5a:	4313      	orrs	r3, r2
 8019e5c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8019e60:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019e64:	00cb      	lsls	r3, r1, #3
 8019e66:	0648      	lsls	r0, r1, #25
 8019e68:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019e6c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8019e70:	ea43 0302 	orr.w	r3, r3, r2
 8019e74:	bf44      	itt	mi
 8019e76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019e7a:	b21b      	sxthmi	r3, r3
 8019e7c:	1b5d      	subs	r5, r3, r5
 8019e7e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019e82:	e7b4      	b.n	8019dee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08019e84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e88:	461e      	mov	r6, r3
 8019e8a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019e8c:	4604      	mov	r4, r0
 8019e8e:	4617      	mov	r7, r2
 8019e90:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019e94:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019e98:	f7ea fa64 	bl	8004364 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019e9c:	4605      	mov	r5, r0
 8019e9e:	b918      	cbnz	r0, 8019ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8019ea0:	6030      	str	r0, [r6, #0]
 8019ea2:	4628      	mov	r0, r5
 8019ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ea8:	683b      	ldr	r3, [r7, #0]
 8019eaa:	4601      	mov	r1, r0
 8019eac:	4638      	mov	r0, r7
 8019eae:	68db      	ldr	r3, [r3, #12]
 8019eb0:	4798      	blx	r3
 8019eb2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019eb6:	4602      	mov	r2, r0
 8019eb8:	6030      	str	r0, [r6, #0]
 8019eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019ebe:	d213      	bcs.n	8019ee8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8019ec0:	4643      	mov	r3, r8
 8019ec2:	4639      	mov	r1, r7
 8019ec4:	4620      	mov	r0, r4
 8019ec6:	f7ff fe39 	bl	8019b3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019eca:	6030      	str	r0, [r6, #0]
 8019ecc:	6833      	ldr	r3, [r6, #0]
 8019ece:	b143      	cbz	r3, 8019ee2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019ed0:	7b5a      	ldrb	r2, [r3, #13]
 8019ed2:	7a9b      	ldrb	r3, [r3, #10]
 8019ed4:	0052      	lsls	r2, r2, #1
 8019ed6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019eda:	4313      	orrs	r3, r2
 8019edc:	bf0c      	ite	eq
 8019ede:	2301      	moveq	r3, #1
 8019ee0:	2300      	movne	r3, #0
 8019ee2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8019ee6:	e7dc      	b.n	8019ea2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8019ee8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019eec:	b29b      	uxth	r3, r3
 8019eee:	2b7f      	cmp	r3, #127	; 0x7f
 8019ef0:	d804      	bhi.n	8019efc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019ef2:	4639      	mov	r1, r7
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	f7ff fd15 	bl	8019924 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019efa:	e7e6      	b.n	8019eca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019efc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d0e3      	beq.n	8019ecc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019f04:	f640 1302 	movw	r3, #2306	; 0x902
 8019f08:	429d      	cmp	r5, r3
 8019f0a:	d1df      	bne.n	8019ecc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019f0c:	4601      	mov	r1, r0
 8019f0e:	4620      	mov	r0, r4
 8019f10:	f7ff fcd8 	bl	80198c4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019f14:	e7d9      	b.n	8019eca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08019f16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8019f16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f1a:	461e      	mov	r6, r3
 8019f1c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019f1e:	4604      	mov	r4, r0
 8019f20:	4617      	mov	r7, r2
 8019f22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019f26:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019f2a:	f7ea fa1b 	bl	8004364 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019f2e:	4605      	mov	r5, r0
 8019f30:	b918      	cbnz	r0, 8019f3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8019f32:	6030      	str	r0, [r6, #0]
 8019f34:	4628      	mov	r0, r5
 8019f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f3a:	683b      	ldr	r3, [r7, #0]
 8019f3c:	4601      	mov	r1, r0
 8019f3e:	4638      	mov	r0, r7
 8019f40:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019f44:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019f48:	47c8      	blx	r9
 8019f4a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019f4e:	4602      	mov	r2, r0
 8019f50:	6030      	str	r0, [r6, #0]
 8019f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019f56:	d213      	bcs.n	8019f80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8019f58:	4643      	mov	r3, r8
 8019f5a:	4639      	mov	r1, r7
 8019f5c:	4620      	mov	r0, r4
 8019f5e:	f7ff fded 	bl	8019b3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019f62:	6030      	str	r0, [r6, #0]
 8019f64:	6833      	ldr	r3, [r6, #0]
 8019f66:	b143      	cbz	r3, 8019f7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8019f68:	7b5a      	ldrb	r2, [r3, #13]
 8019f6a:	7a9b      	ldrb	r3, [r3, #10]
 8019f6c:	0052      	lsls	r2, r2, #1
 8019f6e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019f72:	4313      	orrs	r3, r2
 8019f74:	bf0c      	ite	eq
 8019f76:	2301      	moveq	r3, #1
 8019f78:	2300      	movne	r3, #0
 8019f7a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8019f7e:	e7d9      	b.n	8019f34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8019f80:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019f84:	b29b      	uxth	r3, r3
 8019f86:	2b7f      	cmp	r3, #127	; 0x7f
 8019f88:	d804      	bhi.n	8019f94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8019f8a:	4639      	mov	r1, r7
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	f7ff fcc9 	bl	8019924 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019f92:	e7e6      	b.n	8019f62 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8019f94:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d0e3      	beq.n	8019f64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019f9c:	f640 1302 	movw	r3, #2306	; 0x902
 8019fa0:	429d      	cmp	r5, r3
 8019fa2:	d1df      	bne.n	8019f64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019fa4:	4601      	mov	r1, r0
 8019fa6:	4620      	mov	r0, r4
 8019fa8:	f7ff fc8c 	bl	80198c4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019fac:	e7d9      	b.n	8019f62 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08019fae <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019fae:	b510      	push	{r4, lr}
 8019fb0:	4604      	mov	r4, r0
 8019fb2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8019fb6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019fb8:	b1e1      	cbz	r1, 8019ff4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8019fba:	2b0a      	cmp	r3, #10
 8019fbc:	d02d      	beq.n	801a01a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8019fbe:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019fc0:	3901      	subs	r1, #1
 8019fc2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019fc6:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8019fc8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8019fcc:	1c51      	adds	r1, r2, #1
 8019fce:	b289      	uxth	r1, r1
 8019fd0:	2901      	cmp	r1, #1
 8019fd2:	bf8a      	itet	hi
 8019fd4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019fd8:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8019fda:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8019fdc:	1c5a      	adds	r2, r3, #1
 8019fde:	8722      	strh	r2, [r4, #56]	; 0x38
 8019fe0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019fe2:	4413      	add	r3, r2
 8019fe4:	b29b      	uxth	r3, r3
 8019fe6:	2b09      	cmp	r3, #9
 8019fe8:	bf88      	it	hi
 8019fea:	3b0a      	subhi	r3, #10
 8019fec:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019ff0:	8458      	strh	r0, [r3, #34]	; 0x22
 8019ff2:	e7de      	b.n	8019fb2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019ff4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019ff6:	2b0a      	cmp	r3, #10
 8019ff8:	d00f      	beq.n	801a01a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8019ffa:	4620      	mov	r0, r4
 8019ffc:	f7ff fc10 	bl	8019820 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a000:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a002:	1c5a      	adds	r2, r3, #1
 801a004:	8722      	strh	r2, [r4, #56]	; 0x38
 801a006:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a008:	4413      	add	r3, r2
 801a00a:	b29b      	uxth	r3, r3
 801a00c:	2b09      	cmp	r3, #9
 801a00e:	bf88      	it	hi
 801a010:	3b0a      	subhi	r3, #10
 801a012:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a016:	8458      	strh	r0, [r3, #34]	; 0x22
 801a018:	e7ec      	b.n	8019ff4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a01a:	bd10      	pop	{r4, pc}

0801a01c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a01c:	b538      	push	{r3, r4, r5, lr}
 801a01e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a020:	4604      	mov	r4, r0
 801a022:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801a026:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801a028:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801a02a:	3a01      	subs	r2, #1
 801a02c:	8702      	strh	r2, [r0, #56]	; 0x38
 801a02e:	1c5a      	adds	r2, r3, #1
 801a030:	b292      	uxth	r2, r2
 801a032:	2a09      	cmp	r2, #9
 801a034:	bf8a      	itet	hi
 801a036:	3b09      	subhi	r3, #9
 801a038:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801a03a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801a03c:	f7ff ffb7 	bl	8019fae <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a040:	8c23      	ldrh	r3, [r4, #32]
 801a042:	2b01      	cmp	r3, #1
 801a044:	bf9c      	itt	ls
 801a046:	3301      	addls	r3, #1
 801a048:	8423      	strhls	r3, [r4, #32]
 801a04a:	8be3      	ldrh	r3, [r4, #30]
 801a04c:	b90b      	cbnz	r3, 801a052 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801a04e:	2302      	movs	r3, #2
 801a050:	83e3      	strh	r3, [r4, #30]
 801a052:	8be3      	ldrh	r3, [r4, #30]
 801a054:	4628      	mov	r0, r5
 801a056:	3b01      	subs	r3, #1
 801a058:	b29b      	uxth	r3, r3
 801a05a:	83e3      	strh	r3, [r4, #30]
 801a05c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a060:	8365      	strh	r5, [r4, #26]
 801a062:	bd38      	pop	{r3, r4, r5, pc}

0801a064 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a064:	428a      	cmp	r2, r1
 801a066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a06a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801a06c:	d932      	bls.n	801a0d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801a06e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801a070:	1a54      	subs	r4, r2, r1
 801a072:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801a076:	19ee      	adds	r6, r5, r7
 801a078:	fa1f fe84 	uxth.w	lr, r4
 801a07c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801a080:	3e01      	subs	r6, #1
 801a082:	b2b4      	uxth	r4, r6
 801a084:	eba4 090e 	sub.w	r9, r4, lr
 801a088:	fa1f f989 	uxth.w	r9, r9
 801a08c:	2c09      	cmp	r4, #9
 801a08e:	4626      	mov	r6, r4
 801a090:	bf88      	it	hi
 801a092:	f1a4 060a 	subhi.w	r6, r4, #10
 801a096:	f1bc 0f00 	cmp.w	ip, #0
 801a09a:	f104 34ff 	add.w	r4, r4, #4294967295
 801a09e:	bf08      	it	eq
 801a0a0:	f04f 0c02 	moveq.w	ip, #2
 801a0a4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a0a8:	b2a4      	uxth	r4, r4
 801a0aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a0ae:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801a0b2:	454c      	cmp	r4, r9
 801a0b4:	fa1f fc8c 	uxth.w	ip, ip
 801a0b8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801a0bc:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801a0c0:	d1e4      	bne.n	801a08c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801a0c2:	eba5 050e 	sub.w	r5, r5, lr
 801a0c6:	eb0e 0408 	add.w	r4, lr, r8
 801a0ca:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801a0ce:	8705      	strh	r5, [r0, #56]	; 0x38
 801a0d0:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801a0d4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801a0d6:	250a      	movs	r5, #10
 801a0d8:	1a64      	subs	r4, r4, r1
 801a0da:	4439      	add	r1, r7
 801a0dc:	b289      	uxth	r1, r1
 801a0de:	8704      	strh	r4, [r0, #56]	; 0x38
 801a0e0:	2909      	cmp	r1, #9
 801a0e2:	bf88      	it	hi
 801a0e4:	390a      	subhi	r1, #10
 801a0e6:	86c1      	strh	r1, [r0, #54]	; 0x36
 801a0e8:	b18a      	cbz	r2, 801a10e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a0ea:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801a0ec:	3a01      	subs	r2, #1
 801a0ee:	3101      	adds	r1, #1
 801a0f0:	b292      	uxth	r2, r2
 801a0f2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801a0f6:	8701      	strh	r1, [r0, #56]	; 0x38
 801a0f8:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801a0fa:	b901      	cbnz	r1, 801a0fe <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801a0fc:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a0fe:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801a100:	3901      	subs	r1, #1
 801a102:	b289      	uxth	r1, r1
 801a104:	86c1      	strh	r1, [r0, #54]	; 0x36
 801a106:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a10a:	844c      	strh	r4, [r1, #34]	; 0x22
 801a10c:	e7ec      	b.n	801a0e8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801a10e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a112:	f7ff bf4c 	b.w	8019fae <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801a116 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a116:	b570      	push	{r4, r5, r6, lr}
 801a118:	2500      	movs	r5, #0
 801a11a:	4295      	cmp	r5, r2
 801a11c:	d011      	beq.n	801a142 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801a11e:	8bc4      	ldrh	r4, [r0, #30]
 801a120:	f831 6b02 	ldrh.w	r6, [r1], #2
 801a124:	4414      	add	r4, r2
 801a126:	3c01      	subs	r4, #1
 801a128:	1b64      	subs	r4, r4, r5
 801a12a:	b2a4      	uxth	r4, r4
 801a12c:	2c01      	cmp	r4, #1
 801a12e:	bf88      	it	hi
 801a130:	3c02      	subhi	r4, #2
 801a132:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a136:	8b64      	ldrh	r4, [r4, #26]
 801a138:	42b4      	cmp	r4, r6
 801a13a:	d117      	bne.n	801a16c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801a13c:	3501      	adds	r5, #1
 801a13e:	b2ad      	uxth	r5, r5
 801a140:	e7eb      	b.n	801a11a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801a142:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a146:	2400      	movs	r4, #0
 801a148:	4413      	add	r3, r2
 801a14a:	b2a2      	uxth	r2, r4
 801a14c:	429a      	cmp	r2, r3
 801a14e:	da0f      	bge.n	801a170 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801a150:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801a152:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801a156:	3401      	adds	r4, #1
 801a158:	4432      	add	r2, r6
 801a15a:	b292      	uxth	r2, r2
 801a15c:	2a09      	cmp	r2, #9
 801a15e:	bf88      	it	hi
 801a160:	3a0a      	subhi	r2, #10
 801a162:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a166:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801a168:	42aa      	cmp	r2, r5
 801a16a:	d0ee      	beq.n	801a14a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801a16c:	2000      	movs	r0, #0
 801a16e:	bd70      	pop	{r4, r5, r6, pc}
 801a170:	2001      	movs	r0, #1
 801a172:	e7fc      	b.n	801a16e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801a174 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a178:	4605      	mov	r5, r0
 801a17a:	4616      	mov	r6, r2
 801a17c:	1c8c      	adds	r4, r1, #2
 801a17e:	8809      	ldrh	r1, [r1, #0]
 801a180:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a184:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a188:	42b3      	cmp	r3, r6
 801a18a:	d124      	bne.n	801a1d6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a18c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a190:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a194:	f001 070f 	and.w	r7, r1, #15
 801a198:	4652      	mov	r2, sl
 801a19a:	f8cd 8000 	str.w	r8, [sp]
 801a19e:	464b      	mov	r3, r9
 801a1a0:	4621      	mov	r1, r4
 801a1a2:	4628      	mov	r0, r5
 801a1a4:	f7ff ffb7 	bl	801a116 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a1a8:	4683      	mov	fp, r0
 801a1aa:	b168      	cbz	r0, 801a1c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a1ac:	eb0a 0109 	add.w	r1, sl, r9
 801a1b0:	463a      	mov	r2, r7
 801a1b2:	4628      	mov	r0, r5
 801a1b4:	4441      	add	r1, r8
 801a1b6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a1ba:	4649      	mov	r1, r9
 801a1bc:	f7ff ff52 	bl	801a064 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a1c0:	4658      	mov	r0, fp
 801a1c2:	b003      	add	sp, #12
 801a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1c8:	eb07 010a 	add.w	r1, r7, sl
 801a1cc:	4449      	add	r1, r9
 801a1ce:	4441      	add	r1, r8
 801a1d0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a1d4:	e7d2      	b.n	801a17c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a1d6:	f04f 0b00 	mov.w	fp, #0
 801a1da:	e7f1      	b.n	801a1c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a1dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a1dc:	b570      	push	{r4, r5, r6, lr}
 801a1de:	8810      	ldrh	r0, [r2, #0]
 801a1e0:	4298      	cmp	r0, r3
 801a1e2:	d817      	bhi.n	801a214 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a1e4:	1e48      	subs	r0, r1, #1
 801a1e6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a1ea:	4298      	cmp	r0, r3
 801a1ec:	d312      	bcc.n	801a214 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a1ee:	2400      	movs	r4, #0
 801a1f0:	428c      	cmp	r4, r1
 801a1f2:	d20f      	bcs.n	801a214 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a1f4:	1860      	adds	r0, r4, r1
 801a1f6:	1040      	asrs	r0, r0, #1
 801a1f8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a1fc:	0085      	lsls	r5, r0, #2
 801a1fe:	42b3      	cmp	r3, r6
 801a200:	d902      	bls.n	801a208 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a202:	3001      	adds	r0, #1
 801a204:	b284      	uxth	r4, r0
 801a206:	e7f3      	b.n	801a1f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a208:	d201      	bcs.n	801a20e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801a20a:	b281      	uxth	r1, r0
 801a20c:	e7f0      	b.n	801a1f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a20e:	442a      	add	r2, r5
 801a210:	8850      	ldrh	r0, [r2, #2]
 801a212:	bd70      	pop	{r4, r5, r6, pc}
 801a214:	2000      	movs	r0, #0
 801a216:	e7fc      	b.n	801a212 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801a218 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a21c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801a21e:	4604      	mov	r4, r0
 801a220:	260b      	movs	r6, #11
 801a222:	886f      	ldrh	r7, [r5, #2]
 801a224:	087f      	lsrs	r7, r7, #1
 801a226:	3e01      	subs	r6, #1
 801a228:	d013      	beq.n	801a252 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a22a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a22c:	462a      	mov	r2, r5
 801a22e:	4639      	mov	r1, r7
 801a230:	4620      	mov	r0, r4
 801a232:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a236:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801a23a:	4643      	mov	r3, r8
 801a23c:	f7ff ffce 	bl	801a1dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a240:	b138      	cbz	r0, 801a252 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801a242:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a246:	4642      	mov	r2, r8
 801a248:	4620      	mov	r0, r4
 801a24a:	f7ff ff93 	bl	801a174 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a24e:	2800      	cmp	r0, #0
 801a250:	d1e9      	bne.n	801a226 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801a252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801a258 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801a258:	b570      	push	{r4, r5, r6, lr}
 801a25a:	694a      	ldr	r2, [r1, #20]
 801a25c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801a25e:	684b      	ldr	r3, [r1, #4]
 801a260:	1b54      	subs	r4, r2, r5
 801a262:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801a264:	f000 8106 	beq.w	801a474 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801a268:	1b9b      	subs	r3, r3, r6
 801a26a:	d003      	beq.n	801a274 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a26c:	4363      	muls	r3, r4
 801a26e:	2210      	movs	r2, #16
 801a270:	fb93 f3f2 	sdiv	r3, r3, r2
 801a274:	680c      	ldr	r4, [r1, #0]
 801a276:	698a      	ldr	r2, [r1, #24]
 801a278:	1b65      	subs	r5, r4, r5
 801a27a:	f000 80fd 	beq.w	801a478 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801a27e:	1b92      	subs	r2, r2, r6
 801a280:	d003      	beq.n	801a28a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a282:	436a      	muls	r2, r5
 801a284:	2410      	movs	r4, #16
 801a286:	fb92 f2f4 	sdiv	r2, r2, r4
 801a28a:	1a9b      	subs	r3, r3, r2
 801a28c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801a4b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801a290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a294:	460a      	mov	r2, r1
 801a296:	ee07 3a90 	vmov	s15, r3
 801a29a:	f100 040c 	add.w	r4, r0, #12
 801a29e:	4603      	mov	r3, r0
 801a2a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a2a4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a2a8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801a2ac:	eeb1 6a43 	vneg.f32	s12, s6
 801a2b0:	edd2 7a02 	vldr	s15, [r2, #8]
 801a2b4:	3214      	adds	r2, #20
 801a2b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801a2ba:	ece3 6a01 	vstmia	r3!, {s13}
 801a2be:	429c      	cmp	r4, r3
 801a2c0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801a2c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a2c8:	edc3 7a02 	vstr	s15, [r3, #8]
 801a2cc:	ed52 7a01 	vldr	s15, [r2, #-4]
 801a2d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a2d4:	edc3 7a05 	vstr	s15, [r3, #20]
 801a2d8:	d1ea      	bne.n	801a2b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801a2da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a2dc:	698b      	ldr	r3, [r1, #24]
 801a2de:	edd0 4a02 	vldr	s9, [r0, #8]
 801a2e2:	1a9b      	subs	r3, r3, r2
 801a2e4:	edd0 3a00 	vldr	s7, [r0]
 801a2e8:	edd0 6a01 	vldr	s13, [r0, #4]
 801a2ec:	ee07 3a90 	vmov	s15, r3
 801a2f0:	684b      	ldr	r3, [r1, #4]
 801a2f2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801a2f6:	ed90 5a05 	vldr	s10, [r0, #20]
 801a2fa:	1a9b      	subs	r3, r3, r2
 801a2fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a300:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801a304:	ed90 2a03 	vldr	s4, [r0, #12]
 801a308:	ee07 3a10 	vmov	s14, r3
 801a30c:	edd0 5a04 	vldr	s11, [r0, #16]
 801a310:	ee67 7a84 	vmul.f32	s15, s15, s8
 801a314:	ed90 1a07 	vldr	s2, [r0, #28]
 801a318:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a31c:	edd0 2a06 	vldr	s5, [r0, #24]
 801a320:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801a324:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801a328:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a32c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801a330:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a334:	ee67 7a83 	vmul.f32	s15, s15, s6
 801a338:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801a33c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a33e:	694a      	ldr	r2, [r1, #20]
 801a340:	1b13      	subs	r3, r2, r4
 801a342:	ee07 3a10 	vmov	s14, r3
 801a346:	680b      	ldr	r3, [r1, #0]
 801a348:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a34c:	1b1b      	subs	r3, r3, r4
 801a34e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a352:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801a356:	ee07 3a10 	vmov	s14, r3
 801a35a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a35e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a362:	eee6 4a87 	vfma.f32	s9, s13, s14
 801a366:	ee64 4a86 	vmul.f32	s9, s9, s12
 801a36a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801a36e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a370:	698b      	ldr	r3, [r1, #24]
 801a372:	1a9b      	subs	r3, r3, r2
 801a374:	ee06 3a90 	vmov	s13, r3
 801a378:	684b      	ldr	r3, [r1, #4]
 801a37a:	1a9b      	subs	r3, r3, r2
 801a37c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a380:	ee07 3a10 	vmov	s14, r3
 801a384:	ee66 6a84 	vmul.f32	s13, s13, s8
 801a388:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a38c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801a390:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a394:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a398:	ee66 6a83 	vmul.f32	s13, s13, s6
 801a39c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801a3a0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a3a2:	694a      	ldr	r2, [r1, #20]
 801a3a4:	1b13      	subs	r3, r2, r4
 801a3a6:	ee07 3a10 	vmov	s14, r3
 801a3aa:	680b      	ldr	r3, [r1, #0]
 801a3ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3b0:	1b1b      	subs	r3, r3, r4
 801a3b2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a3b6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801a3ba:	ee07 3a10 	vmov	s14, r3
 801a3be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3c2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a3c6:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a3ca:	edd0 5a08 	vldr	s11, [r0, #32]
 801a3ce:	ee31 1a65 	vsub.f32	s2, s2, s11
 801a3d2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801a3d6:	ee25 5a06 	vmul.f32	s10, s10, s12
 801a3da:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801a3de:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a3e0:	698b      	ldr	r3, [r1, #24]
 801a3e2:	1a9b      	subs	r3, r3, r2
 801a3e4:	ee07 3a10 	vmov	s14, r3
 801a3e8:	684b      	ldr	r3, [r1, #4]
 801a3ea:	1a9b      	subs	r3, r3, r2
 801a3ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a3f0:	ee01 3a90 	vmov	s3, r3
 801a3f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801a3f8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801a3fc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801a400:	ee61 1a84 	vmul.f32	s3, s3, s8
 801a404:	eea1 7a21 	vfma.f32	s14, s2, s3
 801a408:	ee27 7a03 	vmul.f32	s14, s14, s6
 801a40c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a410:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801a412:	694a      	ldr	r2, [r1, #20]
 801a414:	1b13      	subs	r3, r2, r4
 801a416:	ee03 3a10 	vmov	s6, r3
 801a41a:	680b      	ldr	r3, [r1, #0]
 801a41c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a420:	1b1b      	subs	r3, r3, r4
 801a422:	ee23 3a04 	vmul.f32	s6, s6, s8
 801a426:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801a42a:	ee03 3a10 	vmov	s6, r3
 801a42e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801a432:	ee23 4a04 	vmul.f32	s8, s6, s8
 801a436:	eee1 5a04 	vfma.f32	s11, s2, s8
 801a43a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801a43e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801a442:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801a446:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801a44a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801a44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a452:	dd13      	ble.n	801a47c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801a454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a458:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801a45c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a45e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801a462:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a46a:	dd15      	ble.n	801a498 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801a46c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a470:	6403      	str	r3, [r0, #64]	; 0x40
 801a472:	bd70      	pop	{r4, r5, r6, pc}
 801a474:	4623      	mov	r3, r4
 801a476:	e6fd      	b.n	801a274 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801a478:	462a      	mov	r2, r5
 801a47a:	e706      	b.n	801a28a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801a47c:	d502      	bpl.n	801a484 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801a47e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a482:	e7e9      	b.n	801a458 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801a484:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801a488:	eea3 2a85 	vfma.f32	s4, s7, s10
 801a48c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801a490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a494:	dade      	bge.n	801a454 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801a496:	e7f2      	b.n	801a47e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801a498:	d502      	bpl.n	801a4a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801a49a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a49e:	e7e7      	b.n	801a470 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801a4a0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a4a4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a4a8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4b0:	dadc      	bge.n	801a46c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801a4b2:	e7f2      	b.n	801a49a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a4b4:	3d800000 	.word	0x3d800000

0801a4b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4bc:	2714      	movs	r7, #20
 801a4be:	435f      	muls	r7, r3
 801a4c0:	eb02 0c07 	add.w	ip, r2, r7
 801a4c4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801a4c8:	f115 0e0f 	adds.w	lr, r5, #15
 801a4cc:	f100 80a2 	bmi.w	801a614 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a4d0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801a4d4:	9c08      	ldr	r4, [sp, #32]
 801a4d6:	2614      	movs	r6, #20
 801a4d8:	f8c0 e014 	str.w	lr, [r0, #20]
 801a4dc:	4366      	muls	r6, r4
 801a4de:	eb02 0806 	add.w	r8, r2, r6
 801a4e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a4e6:	f115 040f 	adds.w	r4, r5, #15
 801a4ea:	f100 809f 	bmi.w	801a62c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801a4ee:	1124      	asrs	r4, r4, #4
 801a4f0:	eba4 040e 	sub.w	r4, r4, lr
 801a4f4:	6184      	str	r4, [r0, #24]
 801a4f6:	2c00      	cmp	r4, #0
 801a4f8:	f000 808a 	beq.w	801a610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801a4fc:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801a500:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801a504:	5995      	ldr	r5, [r2, r6]
 801a506:	eba4 0809 	sub.w	r8, r4, r9
 801a50a:	59d4      	ldr	r4, [r2, r7]
 801a50c:	eba5 0a04 	sub.w	sl, r5, r4
 801a510:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801a514:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801a518:	fb0e fe05 	mul.w	lr, lr, r5
 801a51c:	fb0a ee19 	mls	lr, sl, r9, lr
 801a520:	fb08 e404 	mla	r4, r8, r4, lr
 801a524:	3c01      	subs	r4, #1
 801a526:	19a4      	adds	r4, r4, r6
 801a528:	f100 808c 	bmi.w	801a644 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801a52c:	fb94 fef6 	sdiv	lr, r4, r6
 801a530:	fb06 441e 	mls	r4, r6, lr, r4
 801a534:	f8c0 e000 	str.w	lr, [r0]
 801a538:	6104      	str	r4, [r0, #16]
 801a53a:	2d00      	cmp	r5, #0
 801a53c:	f2c0 8095 	blt.w	801a66a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a540:	fb95 f4f6 	sdiv	r4, r5, r6
 801a544:	fb06 5514 	mls	r5, r6, r4, r5
 801a548:	6044      	str	r4, [r0, #4]
 801a54a:	6085      	str	r5, [r0, #8]
 801a54c:	60c6      	str	r6, [r0, #12]
 801a54e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a552:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a556:	6945      	ldr	r5, [r0, #20]
 801a558:	59d2      	ldr	r2, [r2, r7]
 801a55a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a55e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801a68c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a562:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a566:	ee07 4a10 	vmov	s14, r4
 801a56a:	6804      	ldr	r4, [r0, #0]
 801a56c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a570:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a574:	ee07 2a90 	vmov	s15, r2
 801a578:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a57c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a580:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a584:	edd3 6a00 	vldr	s13, [r3]
 801a588:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a58c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801a590:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a594:	edc0 6a07 	vstr	s13, [r0, #28]
 801a598:	edd0 6a01 	vldr	s13, [r0, #4]
 801a59c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801a5a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a5a4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a5a8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a5ac:	ed80 6a08 	vstr	s12, [r0, #32]
 801a5b0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801a5b2:	6242      	str	r2, [r0, #36]	; 0x24
 801a5b4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801a5b8:	ed93 6a03 	vldr	s12, [r3, #12]
 801a5bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a5c0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a5c4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a5c8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801a5cc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a5d0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801a5d4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a5d8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801a5dc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a5de:	6302      	str	r2, [r0, #48]	; 0x30
 801a5e0:	ed93 6a06 	vldr	s12, [r3, #24]
 801a5e4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801a5e8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a5ec:	eeb0 7a46 	vmov.f32	s14, s12
 801a5f0:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801a5f4:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a5f8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a5fc:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801a600:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801a604:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a608:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801a60c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801a60e:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a614:	2410      	movs	r4, #16
 801a616:	f1c5 0501 	rsb	r5, r5, #1
 801a61a:	fb9e fef4 	sdiv	lr, lr, r4
 801a61e:	f015 050f 	ands.w	r5, r5, #15
 801a622:	bf18      	it	ne
 801a624:	2501      	movne	r5, #1
 801a626:	ebae 0e05 	sub.w	lr, lr, r5
 801a62a:	e753      	b.n	801a4d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a62c:	f04f 0910 	mov.w	r9, #16
 801a630:	f1c5 0501 	rsb	r5, r5, #1
 801a634:	fb94 f4f9 	sdiv	r4, r4, r9
 801a638:	f015 050f 	ands.w	r5, r5, #15
 801a63c:	bf18      	it	ne
 801a63e:	2501      	movne	r5, #1
 801a640:	1b64      	subs	r4, r4, r5
 801a642:	e755      	b.n	801a4f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a644:	4264      	negs	r4, r4
 801a646:	fb94 fef6 	sdiv	lr, r4, r6
 801a64a:	f1ce 0800 	rsb	r8, lr, #0
 801a64e:	fb06 441e 	mls	r4, r6, lr, r4
 801a652:	f8c0 8000 	str.w	r8, [r0]
 801a656:	6104      	str	r4, [r0, #16]
 801a658:	2c00      	cmp	r4, #0
 801a65a:	f43f af6e 	beq.w	801a53a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a65e:	ea6f 0e0e 	mvn.w	lr, lr
 801a662:	1b34      	subs	r4, r6, r4
 801a664:	f8c0 e000 	str.w	lr, [r0]
 801a668:	e766      	b.n	801a538 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a66a:	426d      	negs	r5, r5
 801a66c:	fb95 f4f6 	sdiv	r4, r5, r6
 801a670:	f1c4 0e00 	rsb	lr, r4, #0
 801a674:	fb06 5514 	mls	r5, r6, r4, r5
 801a678:	f8c0 e004 	str.w	lr, [r0, #4]
 801a67c:	6085      	str	r5, [r0, #8]
 801a67e:	2d00      	cmp	r5, #0
 801a680:	f43f af64 	beq.w	801a54c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a684:	43e4      	mvns	r4, r4
 801a686:	1b75      	subs	r5, r6, r5
 801a688:	6044      	str	r4, [r0, #4]
 801a68a:	e75e      	b.n	801a54a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a68c:	3d800000 	.word	0x3d800000

0801a690 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a690:	4602      	mov	r2, r0
 801a692:	b148      	cbz	r0, 801a6a8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a694:	2300      	movs	r3, #0
 801a696:	b298      	uxth	r0, r3
 801a698:	3301      	adds	r3, #1
 801a69a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a69e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a6a2:	2900      	cmp	r1, #0
 801a6a4:	d1f7      	bne.n	801a696 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a6a6:	4770      	bx	lr
 801a6a8:	4770      	bx	lr

0801a6aa <_ZN8touchgfx7Unicode7strncpyEPtPKtt>:
 801a6aa:	b530      	push	{r4, r5, lr}
 801a6ac:	4604      	mov	r4, r0
 801a6ae:	b161      	cbz	r1, 801a6ca <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x20>
 801a6b0:	b150      	cbz	r0, 801a6c8 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	b298      	uxth	r0, r3
 801a6b6:	4290      	cmp	r0, r2
 801a6b8:	d206      	bcs.n	801a6c8 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 801a6ba:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 801a6be:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a6c2:	3301      	adds	r3, #1
 801a6c4:	2d00      	cmp	r5, #0
 801a6c6:	d1f5      	bne.n	801a6b4 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0xa>
 801a6c8:	bd30      	pop	{r4, r5, pc}
 801a6ca:	4608      	mov	r0, r1
 801a6cc:	e7fc      	b.n	801a6c8 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>

0801a6ce <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a6ce:	b530      	push	{r4, r5, lr}
 801a6d0:	4604      	mov	r4, r0
 801a6d2:	b159      	cbz	r1, 801a6ec <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a6d4:	b148      	cbz	r0, 801a6ea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	b298      	uxth	r0, r3
 801a6da:	4282      	cmp	r2, r0
 801a6dc:	d905      	bls.n	801a6ea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a6de:	5ccd      	ldrb	r5, [r1, r3]
 801a6e0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a6e4:	3301      	adds	r3, #1
 801a6e6:	2d00      	cmp	r5, #0
 801a6e8:	d1f6      	bne.n	801a6d8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a6ea:	bd30      	pop	{r4, r5, pc}
 801a6ec:	4608      	mov	r0, r1
 801a6ee:	e7fc      	b.n	801a6ea <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a6f0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801a6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6f2:	468c      	mov	ip, r1
 801a6f4:	b08b      	sub	sp, #44	; 0x2c
 801a6f6:	2100      	movs	r1, #0
 801a6f8:	ae01      	add	r6, sp, #4
 801a6fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a6fe:	211f      	movs	r1, #31
 801a700:	fbb0 f7f3 	udiv	r7, r0, r3
 801a704:	fb03 0517 	mls	r5, r3, r7, r0
 801a708:	4638      	mov	r0, r7
 801a70a:	b2ec      	uxtb	r4, r5
 801a70c:	2d09      	cmp	r5, #9
 801a70e:	bfd4      	ite	le
 801a710:	3430      	addle	r4, #48	; 0x30
 801a712:	3457      	addgt	r4, #87	; 0x57
 801a714:	b2e4      	uxtb	r4, r4
 801a716:	558c      	strb	r4, [r1, r6]
 801a718:	1e4c      	subs	r4, r1, #1
 801a71a:	b92f      	cbnz	r7, 801a728 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801a71c:	4431      	add	r1, r6
 801a71e:	4660      	mov	r0, ip
 801a720:	f7ff ffd5 	bl	801a6ce <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a724:	b00b      	add	sp, #44	; 0x2c
 801a726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a728:	4621      	mov	r1, r4
 801a72a:	e7e9      	b.n	801a700 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801a72c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a72e:	4607      	mov	r7, r0
 801a730:	b08b      	sub	sp, #44	; 0x2c
 801a732:	4608      	mov	r0, r1
 801a734:	b341      	cbz	r1, 801a788 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a736:	1e99      	subs	r1, r3, #2
 801a738:	2922      	cmp	r1, #34	; 0x22
 801a73a:	d825      	bhi.n	801a788 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a73c:	2100      	movs	r1, #0
 801a73e:	463c      	mov	r4, r7
 801a740:	261f      	movs	r6, #31
 801a742:	f10d 0c04 	add.w	ip, sp, #4
 801a746:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a74a:	1e71      	subs	r1, r6, #1
 801a74c:	fb94 fef3 	sdiv	lr, r4, r3
 801a750:	fb03 441e 	mls	r4, r3, lr, r4
 801a754:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a758:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a75c:	b2ec      	uxtb	r4, r5
 801a75e:	2d09      	cmp	r5, #9
 801a760:	bfd4      	ite	le
 801a762:	3430      	addle	r4, #48	; 0x30
 801a764:	3457      	addgt	r4, #87	; 0x57
 801a766:	b2e4      	uxtb	r4, r4
 801a768:	f80c 4006 	strb.w	r4, [ip, r6]
 801a76c:	4674      	mov	r4, lr
 801a76e:	b96c      	cbnz	r4, 801a78c <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a770:	2f00      	cmp	r7, #0
 801a772:	da05      	bge.n	801a780 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a774:	ab0a      	add	r3, sp, #40	; 0x28
 801a776:	4419      	add	r1, r3
 801a778:	232d      	movs	r3, #45	; 0x2d
 801a77a:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a77e:	1eb1      	subs	r1, r6, #2
 801a780:	3101      	adds	r1, #1
 801a782:	4461      	add	r1, ip
 801a784:	f7ff ffa3 	bl	801a6ce <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a788:	b00b      	add	sp, #44	; 0x2c
 801a78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a78c:	460e      	mov	r6, r1
 801a78e:	e7dc      	b.n	801a74a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a790 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a794:	b085      	sub	sp, #20
 801a796:	4691      	mov	r9, r2
 801a798:	6802      	ldr	r2, [r0, #0]
 801a79a:	4688      	mov	r8, r1
 801a79c:	461c      	mov	r4, r3
 801a79e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a7a2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a7a6:	4683      	mov	fp, r0
 801a7a8:	4610      	mov	r0, r2
 801a7aa:	9103      	str	r1, [sp, #12]
 801a7ac:	9302      	str	r3, [sp, #8]
 801a7ae:	9201      	str	r2, [sp, #4]
 801a7b0:	f7ff ff6e 	bl	801a690 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a7b4:	f1b8 0f00 	cmp.w	r8, #0
 801a7b8:	bf0c      	ite	eq
 801a7ba:	4684      	moveq	ip, r0
 801a7bc:	f100 0c01 	addne.w	ip, r0, #1
 801a7c0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801a7c4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801a7c8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a7ca:	fa1f fc8c 	uxth.w	ip, ip
 801a7ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a7d0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801a7d4:	9903      	ldr	r1, [sp, #12]
 801a7d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a7da:	d041      	beq.n	801a860 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a7dc:	d834      	bhi.n	801a848 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801a7de:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801a7e2:	d059      	beq.n	801a898 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801a7e4:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801a7e8:	d03a      	beq.n	801a860 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a7ea:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801a7ee:	d034      	beq.n	801a85a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a7f0:	2400      	movs	r4, #0
 801a7f2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a7f6:	3a01      	subs	r2, #1
 801a7f8:	b169      	cbz	r1, 801a816 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a7fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a7fc:	458c      	cmp	ip, r1
 801a7fe:	da09      	bge.n	801a814 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a800:	eba1 010c 	sub.w	r1, r1, ip
 801a804:	b289      	uxth	r1, r1
 801a806:	b933      	cbnz	r3, 801a816 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a808:	2e00      	cmp	r6, #0
 801a80a:	d051      	beq.n	801a8b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a80c:	2800      	cmp	r0, #0
 801a80e:	d04f      	beq.n	801a8b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a810:	440c      	add	r4, r1
 801a812:	b2a4      	uxth	r4, r4
 801a814:	2100      	movs	r1, #0
 801a816:	682b      	ldr	r3, [r5, #0]
 801a818:	4293      	cmp	r3, r2
 801a81a:	da07      	bge.n	801a82c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a81c:	f1b8 0f00 	cmp.w	r8, #0
 801a820:	d004      	beq.n	801a82c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a822:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801a826:	682b      	ldr	r3, [r5, #0]
 801a828:	3301      	adds	r3, #1
 801a82a:	602b      	str	r3, [r5, #0]
 801a82c:	2730      	movs	r7, #48	; 0x30
 801a82e:	2c00      	cmp	r4, #0
 801a830:	d04e      	beq.n	801a8d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a832:	682e      	ldr	r6, [r5, #0]
 801a834:	3c01      	subs	r4, #1
 801a836:	42b2      	cmp	r2, r6
 801a838:	b2a4      	uxth	r4, r4
 801a83a:	dd49      	ble.n	801a8d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a83c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a840:	682b      	ldr	r3, [r5, #0]
 801a842:	3301      	adds	r3, #1
 801a844:	602b      	str	r3, [r5, #0]
 801a846:	e7f2      	b.n	801a82e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801a848:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801a84c:	d01d      	beq.n	801a88a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801a84e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801a852:	d002      	beq.n	801a85a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a854:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801a858:	e7c9      	b.n	801a7ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801a85a:	4684      	mov	ip, r0
 801a85c:	f04f 0800 	mov.w	r8, #0
 801a860:	2c00      	cmp	r4, #0
 801a862:	d0c6      	beq.n	801a7f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a864:	b947      	cbnz	r7, 801a878 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a866:	2801      	cmp	r0, #1
 801a868:	d106      	bne.n	801a878 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a86a:	8814      	ldrh	r4, [r2, #0]
 801a86c:	2c30      	cmp	r4, #48	; 0x30
 801a86e:	bf02      	ittt	eq
 801a870:	3202      	addeq	r2, #2
 801a872:	4638      	moveq	r0, r7
 801a874:	f8cb 2000 	streq.w	r2, [fp]
 801a878:	45bc      	cmp	ip, r7
 801a87a:	da14      	bge.n	801a8a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801a87c:	b2bf      	uxth	r7, r7
 801a87e:	eba7 040c 	sub.w	r4, r7, ip
 801a882:	46bc      	mov	ip, r7
 801a884:	b2a4      	uxth	r4, r4
 801a886:	2600      	movs	r6, #0
 801a888:	e7b3      	b.n	801a7f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a88a:	4684      	mov	ip, r0
 801a88c:	b16c      	cbz	r4, 801a8aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801a88e:	42b8      	cmp	r0, r7
 801a890:	dd00      	ble.n	801a894 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801a892:	b2b8      	uxth	r0, r7
 801a894:	2400      	movs	r4, #0
 801a896:	e003      	b.n	801a8a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801a898:	f04f 0c01 	mov.w	ip, #1
 801a89c:	2400      	movs	r4, #0
 801a89e:	4660      	mov	r0, ip
 801a8a0:	4626      	mov	r6, r4
 801a8a2:	46a0      	mov	r8, r4
 801a8a4:	e7a5      	b.n	801a7f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a8a6:	2400      	movs	r4, #0
 801a8a8:	e7ed      	b.n	801a886 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801a8aa:	4626      	mov	r6, r4
 801a8ac:	46a0      	mov	r8, r4
 801a8ae:	e7a0      	b.n	801a7f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a8b0:	2900      	cmp	r1, #0
 801a8b2:	d0b0      	beq.n	801a816 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a8b4:	2720      	movs	r7, #32
 801a8b6:	682e      	ldr	r6, [r5, #0]
 801a8b8:	2900      	cmp	r1, #0
 801a8ba:	d0ac      	beq.n	801a816 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a8bc:	3901      	subs	r1, #1
 801a8be:	4296      	cmp	r6, r2
 801a8c0:	b289      	uxth	r1, r1
 801a8c2:	daa7      	bge.n	801a814 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a8c4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a8c8:	682b      	ldr	r3, [r5, #0]
 801a8ca:	3301      	adds	r3, #1
 801a8cc:	602b      	str	r3, [r5, #0]
 801a8ce:	e7f2      	b.n	801a8b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801a8d0:	b188      	cbz	r0, 801a8f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a8d2:	682b      	ldr	r3, [r5, #0]
 801a8d4:	3801      	subs	r0, #1
 801a8d6:	429a      	cmp	r2, r3
 801a8d8:	b280      	uxth	r0, r0
 801a8da:	dd0c      	ble.n	801a8f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a8dc:	f8db 3000 	ldr.w	r3, [fp]
 801a8e0:	1c9c      	adds	r4, r3, #2
 801a8e2:	f8cb 4000 	str.w	r4, [fp]
 801a8e6:	881c      	ldrh	r4, [r3, #0]
 801a8e8:	682b      	ldr	r3, [r5, #0]
 801a8ea:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801a8ee:	682b      	ldr	r3, [r5, #0]
 801a8f0:	3301      	adds	r3, #1
 801a8f2:	602b      	str	r3, [r5, #0]
 801a8f4:	e7ec      	b.n	801a8d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a8f6:	2620      	movs	r6, #32
 801a8f8:	b151      	cbz	r1, 801a910 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a8fa:	6828      	ldr	r0, [r5, #0]
 801a8fc:	3901      	subs	r1, #1
 801a8fe:	4282      	cmp	r2, r0
 801a900:	b289      	uxth	r1, r1
 801a902:	dd05      	ble.n	801a910 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a904:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801a908:	682b      	ldr	r3, [r5, #0]
 801a90a:	3301      	adds	r3, #1
 801a90c:	602b      	str	r3, [r5, #0]
 801a90e:	e7f3      	b.n	801a8f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801a910:	b005      	add	sp, #20
 801a912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801a916:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a91a:	2400      	movs	r4, #0
 801a91c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801a920:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801a924:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801a928:	8014      	strh	r4, [r2, #0]
 801a92a:	701c      	strb	r4, [r3, #0]
 801a92c:	f888 4000 	strb.w	r4, [r8]
 801a930:	f88c 4000 	strb.w	r4, [ip]
 801a934:	f88e 4000 	strb.w	r4, [lr]
 801a938:	703c      	strb	r4, [r7, #0]
 801a93a:	6804      	ldr	r4, [r0, #0]
 801a93c:	b1a4      	cbz	r4, 801a968 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801a93e:	8824      	ldrh	r4, [r4, #0]
 801a940:	f04f 0901 	mov.w	r9, #1
 801a944:	b314      	cbz	r4, 801a98c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a946:	2c2b      	cmp	r4, #43	; 0x2b
 801a948:	d001      	beq.n	801a94e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801a94a:	2c20      	cmp	r4, #32
 801a94c:	d110      	bne.n	801a970 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801a94e:	8014      	strh	r4, [r2, #0]
 801a950:	6804      	ldr	r4, [r0, #0]
 801a952:	b10c      	cbz	r4, 801a958 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801a954:	3402      	adds	r4, #2
 801a956:	6004      	str	r4, [r0, #0]
 801a958:	680c      	ldr	r4, [r1, #0]
 801a95a:	b10c      	cbz	r4, 801a960 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801a95c:	3401      	adds	r4, #1
 801a95e:	600c      	str	r4, [r1, #0]
 801a960:	6804      	ldr	r4, [r0, #0]
 801a962:	b17c      	cbz	r4, 801a984 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801a964:	8824      	ldrh	r4, [r4, #0]
 801a966:	e7ed      	b.n	801a944 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a968:	680c      	ldr	r4, [r1, #0]
 801a96a:	b17c      	cbz	r4, 801a98c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a96c:	7824      	ldrb	r4, [r4, #0]
 801a96e:	e7e7      	b.n	801a940 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801a970:	2c2d      	cmp	r4, #45	; 0x2d
 801a972:	d102      	bne.n	801a97a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801a974:	f883 9000 	strb.w	r9, [r3]
 801a978:	e7ea      	b.n	801a950 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a97a:	2c23      	cmp	r4, #35	; 0x23
 801a97c:	d107      	bne.n	801a98e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801a97e:	f888 9000 	strb.w	r9, [r8]
 801a982:	e7e5      	b.n	801a950 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a984:	680c      	ldr	r4, [r1, #0]
 801a986:	b10c      	cbz	r4, 801a98c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a988:	7824      	ldrb	r4, [r4, #0]
 801a98a:	e7db      	b.n	801a944 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a98c:	2400      	movs	r4, #0
 801a98e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801a992:	2b09      	cmp	r3, #9
 801a994:	d901      	bls.n	801a99a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801a996:	2c2a      	cmp	r4, #42	; 0x2a
 801a998:	d122      	bne.n	801a9e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a99a:	2301      	movs	r3, #1
 801a99c:	2c30      	cmp	r4, #48	; 0x30
 801a99e:	f88e 3000 	strb.w	r3, [lr]
 801a9a2:	d10d      	bne.n	801a9c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a9a4:	f88c 3000 	strb.w	r3, [ip]
 801a9a8:	6803      	ldr	r3, [r0, #0]
 801a9aa:	b10b      	cbz	r3, 801a9b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801a9ac:	3302      	adds	r3, #2
 801a9ae:	6003      	str	r3, [r0, #0]
 801a9b0:	680b      	ldr	r3, [r1, #0]
 801a9b2:	b10b      	cbz	r3, 801a9b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801a9b4:	3301      	adds	r3, #1
 801a9b6:	600b      	str	r3, [r1, #0]
 801a9b8:	6803      	ldr	r3, [r0, #0]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d02f      	beq.n	801aa1e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801a9be:	881c      	ldrh	r4, [r3, #0]
 801a9c0:	2c2a      	cmp	r4, #42	; 0x2a
 801a9c2:	d135      	bne.n	801aa30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a9c4:	f04f 33ff 	mov.w	r3, #4294967295
 801a9c8:	6033      	str	r3, [r6, #0]
 801a9ca:	6803      	ldr	r3, [r0, #0]
 801a9cc:	b10b      	cbz	r3, 801a9d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801a9ce:	3302      	adds	r3, #2
 801a9d0:	6003      	str	r3, [r0, #0]
 801a9d2:	680b      	ldr	r3, [r1, #0]
 801a9d4:	b10b      	cbz	r3, 801a9da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801a9d6:	3301      	adds	r3, #1
 801a9d8:	600b      	str	r3, [r1, #0]
 801a9da:	6803      	ldr	r3, [r0, #0]
 801a9dc:	b31b      	cbz	r3, 801aa26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801a9de:	881c      	ldrh	r4, [r3, #0]
 801a9e0:	2c2e      	cmp	r4, #46	; 0x2e
 801a9e2:	d11a      	bne.n	801aa1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a9e4:	2301      	movs	r3, #1
 801a9e6:	703b      	strb	r3, [r7, #0]
 801a9e8:	6803      	ldr	r3, [r0, #0]
 801a9ea:	b10b      	cbz	r3, 801a9f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801a9ec:	3302      	adds	r3, #2
 801a9ee:	6003      	str	r3, [r0, #0]
 801a9f0:	680b      	ldr	r3, [r1, #0]
 801a9f2:	b10b      	cbz	r3, 801a9f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801a9f4:	3301      	adds	r3, #1
 801a9f6:	600b      	str	r3, [r1, #0]
 801a9f8:	6803      	ldr	r3, [r0, #0]
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d036      	beq.n	801aa6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801a9fe:	881b      	ldrh	r3, [r3, #0]
 801aa00:	2b2a      	cmp	r3, #42	; 0x2a
 801aa02:	d137      	bne.n	801aa74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801aa04:	f04f 33ff 	mov.w	r3, #4294967295
 801aa08:	602b      	str	r3, [r5, #0]
 801aa0a:	6803      	ldr	r3, [r0, #0]
 801aa0c:	b10b      	cbz	r3, 801aa12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801aa0e:	3302      	adds	r3, #2
 801aa10:	6003      	str	r3, [r0, #0]
 801aa12:	680b      	ldr	r3, [r1, #0]
 801aa14:	b10b      	cbz	r3, 801aa1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801aa16:	3301      	adds	r3, #1
 801aa18:	600b      	str	r3, [r1, #0]
 801aa1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa1e:	680c      	ldr	r4, [r1, #0]
 801aa20:	b134      	cbz	r4, 801aa30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801aa22:	7824      	ldrb	r4, [r4, #0]
 801aa24:	e7cc      	b.n	801a9c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801aa26:	680b      	ldr	r3, [r1, #0]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d0f6      	beq.n	801aa1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801aa2c:	781c      	ldrb	r4, [r3, #0]
 801aa2e:	e7d7      	b.n	801a9e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801aa30:	2300      	movs	r3, #0
 801aa32:	220a      	movs	r2, #10
 801aa34:	6033      	str	r3, [r6, #0]
 801aa36:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801aa3a:	fa1f f38c 	uxth.w	r3, ip
 801aa3e:	2b09      	cmp	r3, #9
 801aa40:	d8ce      	bhi.n	801a9e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801aa42:	6833      	ldr	r3, [r6, #0]
 801aa44:	fb02 c303 	mla	r3, r2, r3, ip
 801aa48:	6033      	str	r3, [r6, #0]
 801aa4a:	6803      	ldr	r3, [r0, #0]
 801aa4c:	b10b      	cbz	r3, 801aa52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801aa4e:	3302      	adds	r3, #2
 801aa50:	6003      	str	r3, [r0, #0]
 801aa52:	680b      	ldr	r3, [r1, #0]
 801aa54:	b10b      	cbz	r3, 801aa5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801aa56:	3301      	adds	r3, #1
 801aa58:	600b      	str	r3, [r1, #0]
 801aa5a:	6803      	ldr	r3, [r0, #0]
 801aa5c:	b10b      	cbz	r3, 801aa62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801aa5e:	881c      	ldrh	r4, [r3, #0]
 801aa60:	e7e9      	b.n	801aa36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801aa62:	680c      	ldr	r4, [r1, #0]
 801aa64:	2c00      	cmp	r4, #0
 801aa66:	d0e6      	beq.n	801aa36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801aa68:	7824      	ldrb	r4, [r4, #0]
 801aa6a:	e7e4      	b.n	801aa36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801aa6c:	680b      	ldr	r3, [r1, #0]
 801aa6e:	b10b      	cbz	r3, 801aa74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801aa70:	781b      	ldrb	r3, [r3, #0]
 801aa72:	e7c5      	b.n	801aa00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801aa74:	2200      	movs	r2, #0
 801aa76:	240a      	movs	r4, #10
 801aa78:	602a      	str	r2, [r5, #0]
 801aa7a:	3b30      	subs	r3, #48	; 0x30
 801aa7c:	682a      	ldr	r2, [r5, #0]
 801aa7e:	b29e      	uxth	r6, r3
 801aa80:	2e09      	cmp	r6, #9
 801aa82:	d813      	bhi.n	801aaac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801aa84:	fb04 3302 	mla	r3, r4, r2, r3
 801aa88:	602b      	str	r3, [r5, #0]
 801aa8a:	6803      	ldr	r3, [r0, #0]
 801aa8c:	b10b      	cbz	r3, 801aa92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801aa8e:	3302      	adds	r3, #2
 801aa90:	6003      	str	r3, [r0, #0]
 801aa92:	680b      	ldr	r3, [r1, #0]
 801aa94:	b10b      	cbz	r3, 801aa9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801aa96:	3301      	adds	r3, #1
 801aa98:	600b      	str	r3, [r1, #0]
 801aa9a:	6803      	ldr	r3, [r0, #0]
 801aa9c:	b10b      	cbz	r3, 801aaa2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801aa9e:	881b      	ldrh	r3, [r3, #0]
 801aaa0:	e7eb      	b.n	801aa7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801aaa2:	680b      	ldr	r3, [r1, #0]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d0e8      	beq.n	801aa7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801aaa8:	781b      	ldrb	r3, [r3, #0]
 801aaaa:	e7e6      	b.n	801aa7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801aaac:	2a06      	cmp	r2, #6
 801aaae:	bfa8      	it	ge
 801aab0:	2206      	movge	r2, #6
 801aab2:	602a      	str	r2, [r5, #0]
 801aab4:	e7b1      	b.n	801aa1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801aab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801aab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaba:	b0a3      	sub	sp, #140	; 0x8c
 801aabc:	2600      	movs	r6, #0
 801aabe:	4607      	mov	r7, r0
 801aac0:	4688      	mov	r8, r1
 801aac2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801aac6:	4631      	mov	r1, r6
 801aac8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801aaca:	4648      	mov	r0, r9
 801aacc:	960d      	str	r6, [sp, #52]	; 0x34
 801aace:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801aad2:	2242      	movs	r2, #66	; 0x42
 801aad4:	f008 fd74 	bl	80235c0 <memset>
 801aad8:	b15f      	cbz	r7, 801aaf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801aada:	f108 3aff 	add.w	sl, r8, #4294967295
 801aade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aae2:	b152      	cbz	r2, 801aafa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801aae4:	8812      	ldrh	r2, [r2, #0]
 801aae6:	b10a      	cbz	r2, 801aaec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801aae8:	459a      	cmp	sl, r3
 801aaea:	dc2e      	bgt.n	801ab4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801aaec:	2200      	movs	r2, #0
 801aaee:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801aaf2:	4638      	mov	r0, r7
 801aaf4:	b023      	add	sp, #140	; 0x8c
 801aaf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aafa:	9a08      	ldr	r2, [sp, #32]
 801aafc:	2a00      	cmp	r2, #0
 801aafe:	d0f5      	beq.n	801aaec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ab00:	7812      	ldrb	r2, [r2, #0]
 801ab02:	e7f0      	b.n	801aae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801ab04:	2d00      	cmp	r5, #0
 801ab06:	d0ea      	beq.n	801aade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ab08:	782a      	ldrb	r2, [r5, #0]
 801ab0a:	b142      	cbz	r2, 801ab1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801ab0c:	2a25      	cmp	r2, #37	; 0x25
 801ab0e:	d001      	beq.n	801ab14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801ab10:	459a      	cmp	sl, r3
 801ab12:	dc08      	bgt.n	801ab26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801ab14:	f1bb 0f00 	cmp.w	fp, #0
 801ab18:	d121      	bne.n	801ab5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801ab1a:	2d00      	cmp	r5, #0
 801ab1c:	d0df      	beq.n	801aade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ab1e:	782a      	ldrb	r2, [r5, #0]
 801ab20:	f04f 0b00 	mov.w	fp, #0
 801ab24:	e01d      	b.n	801ab62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801ab26:	f1bb 0f00 	cmp.w	fp, #0
 801ab2a:	d077      	beq.n	801ac1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801ab2c:	f8bb 2000 	ldrh.w	r2, [fp]
 801ab30:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ab34:	f1bb 0f00 	cmp.w	fp, #0
 801ab38:	d002      	beq.n	801ab40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801ab3a:	f10b 0202 	add.w	r2, fp, #2
 801ab3e:	9209      	str	r2, [sp, #36]	; 0x24
 801ab40:	b10d      	cbz	r5, 801ab46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801ab42:	3501      	adds	r5, #1
 801ab44:	9508      	str	r5, [sp, #32]
 801ab46:	3301      	adds	r3, #1
 801ab48:	930d      	str	r3, [sp, #52]	; 0x34
 801ab4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab4c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801ab50:	f1bb 0f00 	cmp.w	fp, #0
 801ab54:	d0d6      	beq.n	801ab04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801ab56:	f8bb 2000 	ldrh.w	r2, [fp]
 801ab5a:	2a00      	cmp	r2, #0
 801ab5c:	d1d6      	bne.n	801ab0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801ab5e:	f8bb 2000 	ldrh.w	r2, [fp]
 801ab62:	2a00      	cmp	r2, #0
 801ab64:	d0bb      	beq.n	801aade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ab66:	459a      	cmp	sl, r3
 801ab68:	ddb9      	ble.n	801aade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ab6a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801ab6e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801ab72:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801ab76:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801ab7a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801ab7e:	960e      	str	r6, [sp, #56]	; 0x38
 801ab80:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801ab84:	960f      	str	r6, [sp, #60]	; 0x3c
 801ab86:	f1bb 0f00 	cmp.w	fp, #0
 801ab8a:	d002      	beq.n	801ab92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801ab8c:	f10b 0302 	add.w	r3, fp, #2
 801ab90:	9309      	str	r3, [sp, #36]	; 0x24
 801ab92:	b10d      	cbz	r5, 801ab98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801ab94:	1c6b      	adds	r3, r5, #1
 801ab96:	9308      	str	r3, [sp, #32]
 801ab98:	ab0f      	add	r3, sp, #60	; 0x3c
 801ab9a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801ab9e:	a908      	add	r1, sp, #32
 801aba0:	a809      	add	r0, sp, #36	; 0x24
 801aba2:	9305      	str	r3, [sp, #20]
 801aba4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801aba8:	9304      	str	r3, [sp, #16]
 801abaa:	ab0e      	add	r3, sp, #56	; 0x38
 801abac:	9303      	str	r3, [sp, #12]
 801abae:	ab0c      	add	r3, sp, #48	; 0x30
 801abb0:	9302      	str	r3, [sp, #8]
 801abb2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801abb6:	9301      	str	r3, [sp, #4]
 801abb8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801abbc:	9300      	str	r3, [sp, #0]
 801abbe:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801abc2:	f7ff fea8 	bl	801a916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801abc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abc8:	2b00      	cmp	r3, #0
 801abca:	bfbf      	itttt	lt
 801abcc:	6823      	ldrlt	r3, [r4, #0]
 801abce:	3404      	addlt	r4, #4
 801abd0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801abd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 801abd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801abd8:	2b00      	cmp	r3, #0
 801abda:	bfbe      	ittt	lt
 801abdc:	6823      	ldrlt	r3, [r4, #0]
 801abde:	3404      	addlt	r4, #4
 801abe0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801abe4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801abe8:	bfb8      	it	lt
 801abea:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801abec:	b1d9      	cbz	r1, 801ac26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801abee:	880b      	ldrh	r3, [r1, #0]
 801abf0:	2b69      	cmp	r3, #105	; 0x69
 801abf2:	d01f      	beq.n	801ac34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801abf4:	d82f      	bhi.n	801ac56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801abf6:	2b58      	cmp	r3, #88	; 0x58
 801abf8:	d01c      	beq.n	801ac34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801abfa:	d818      	bhi.n	801ac2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801abfc:	2b25      	cmp	r3, #37	; 0x25
 801abfe:	d034      	beq.n	801ac6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801ac00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac02:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801ac06:	f1bb 0f00 	cmp.w	fp, #0
 801ac0a:	f000 80b7 	beq.w	801ad7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801ac0e:	f8bb 5000 	ldrh.w	r5, [fp]
 801ac12:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801ac16:	3301      	adds	r3, #1
 801ac18:	930d      	str	r3, [sp, #52]	; 0x34
 801ac1a:	e029      	b.n	801ac70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ac1c:	b10d      	cbz	r5, 801ac22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801ac1e:	782a      	ldrb	r2, [r5, #0]
 801ac20:	e786      	b.n	801ab30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ac22:	462a      	mov	r2, r5
 801ac24:	e784      	b.n	801ab30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ac26:	2a00      	cmp	r2, #0
 801ac28:	d0ea      	beq.n	801ac00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ac2a:	7813      	ldrb	r3, [r2, #0]
 801ac2c:	e7e0      	b.n	801abf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801ac2e:	3b63      	subs	r3, #99	; 0x63
 801ac30:	2b01      	cmp	r3, #1
 801ac32:	d8e5      	bhi.n	801ac00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ac34:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801ac38:	b329      	cbz	r1, 801ac86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801ac3a:	880b      	ldrh	r3, [r1, #0]
 801ac3c:	2b69      	cmp	r3, #105	; 0x69
 801ac3e:	d063      	beq.n	801ad08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ac40:	d825      	bhi.n	801ac8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801ac42:	2b63      	cmp	r3, #99	; 0x63
 801ac44:	d038      	beq.n	801acb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801ac46:	2b64      	cmp	r3, #100	; 0x64
 801ac48:	d05e      	beq.n	801ad08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ac4a:	2b58      	cmp	r3, #88	; 0x58
 801ac4c:	d07a      	beq.n	801ad44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801ac4e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801ac52:	4625      	mov	r5, r4
 801ac54:	e036      	b.n	801acc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ac56:	2b73      	cmp	r3, #115	; 0x73
 801ac58:	d0ec      	beq.n	801ac34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ac5a:	d802      	bhi.n	801ac62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801ac5c:	2b6f      	cmp	r3, #111	; 0x6f
 801ac5e:	d1cf      	bne.n	801ac00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ac60:	e7e8      	b.n	801ac34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ac62:	2b75      	cmp	r3, #117	; 0x75
 801ac64:	d0e6      	beq.n	801ac34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ac66:	2b78      	cmp	r3, #120	; 0x78
 801ac68:	e7f9      	b.n	801ac5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801ac6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac6c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801ac70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac72:	b10b      	cbz	r3, 801ac78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801ac74:	3302      	adds	r3, #2
 801ac76:	9309      	str	r3, [sp, #36]	; 0x24
 801ac78:	9b08      	ldr	r3, [sp, #32]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	f43f af2f 	beq.w	801aade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ac80:	3301      	adds	r3, #1
 801ac82:	9308      	str	r3, [sp, #32]
 801ac84:	e72b      	b.n	801aade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ac86:	2a00      	cmp	r2, #0
 801ac88:	d0e1      	beq.n	801ac4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ac8a:	7813      	ldrb	r3, [r2, #0]
 801ac8c:	e7d6      	b.n	801ac3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801ac8e:	2b73      	cmp	r3, #115	; 0x73
 801ac90:	d036      	beq.n	801ad00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801ac92:	d807      	bhi.n	801aca4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801ac94:	2b6f      	cmp	r3, #111	; 0x6f
 801ac96:	d1da      	bne.n	801ac4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ac98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac9a:	1d25      	adds	r5, r4, #4
 801ac9c:	2308      	movs	r3, #8
 801ac9e:	eba8 0202 	sub.w	r2, r8, r2
 801aca2:	e049      	b.n	801ad38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801aca4:	2b75      	cmp	r3, #117	; 0x75
 801aca6:	d042      	beq.n	801ad2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801aca8:	2b78      	cmp	r3, #120	; 0x78
 801acaa:	d1d0      	bne.n	801ac4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801acac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801acae:	1d25      	adds	r5, r4, #4
 801acb0:	2310      	movs	r3, #16
 801acb2:	eba8 0202 	sub.w	r2, r8, r2
 801acb6:	e03f      	b.n	801ad38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801acb8:	6823      	ldr	r3, [r4, #0]
 801acba:	1d25      	adds	r5, r4, #4
 801acbc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801acc0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801acc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acc6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801acca:	2b00      	cmp	r3, #0
 801accc:	d051      	beq.n	801ad72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801acce:	881a      	ldrh	r2, [r3, #0]
 801acd0:	a80d      	add	r0, sp, #52	; 0x34
 801acd2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801acd6:	462c      	mov	r4, r5
 801acd8:	9005      	str	r0, [sp, #20]
 801acda:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801acde:	9004      	str	r0, [sp, #16]
 801ace0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ace2:	9003      	str	r0, [sp, #12]
 801ace4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801ace8:	9002      	str	r0, [sp, #8]
 801acea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801acec:	9001      	str	r0, [sp, #4]
 801acee:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801acf2:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801acf6:	9000      	str	r0, [sp, #0]
 801acf8:	a810      	add	r0, sp, #64	; 0x40
 801acfa:	f7ff fd49 	bl	801a790 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801acfe:	e7b7      	b.n	801ac70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ad00:	1d25      	adds	r5, r4, #4
 801ad02:	6823      	ldr	r3, [r4, #0]
 801ad04:	9310      	str	r3, [sp, #64]	; 0x40
 801ad06:	e7dd      	b.n	801acc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ad08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad0a:	230a      	movs	r3, #10
 801ad0c:	4649      	mov	r1, r9
 801ad0e:	6820      	ldr	r0, [r4, #0]
 801ad10:	eba8 0202 	sub.w	r2, r8, r2
 801ad14:	1d25      	adds	r5, r4, #4
 801ad16:	b292      	uxth	r2, r2
 801ad18:	f7ff fd08 	bl	801a72c <_ZN8touchgfx7Unicode4itoaElPtti>
 801ad1c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ad20:	2b2d      	cmp	r3, #45	; 0x2d
 801ad22:	d1cf      	bne.n	801acc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ad24:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ad28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ad2a:	3302      	adds	r3, #2
 801ad2c:	e7ea      	b.n	801ad04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801ad2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad30:	1d25      	adds	r5, r4, #4
 801ad32:	230a      	movs	r3, #10
 801ad34:	eba8 0202 	sub.w	r2, r8, r2
 801ad38:	b292      	uxth	r2, r2
 801ad3a:	4649      	mov	r1, r9
 801ad3c:	6820      	ldr	r0, [r4, #0]
 801ad3e:	f7ff fcd7 	bl	801a6f0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ad42:	e7bf      	b.n	801acc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ad44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ad46:	2310      	movs	r3, #16
 801ad48:	4649      	mov	r1, r9
 801ad4a:	6820      	ldr	r0, [r4, #0]
 801ad4c:	eba8 0202 	sub.w	r2, r8, r2
 801ad50:	1d25      	adds	r5, r4, #4
 801ad52:	b292      	uxth	r2, r2
 801ad54:	f7ff fccc 	bl	801a6f0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ad58:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ad5c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	d0af      	beq.n	801acc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ad64:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ad68:	2919      	cmp	r1, #25
 801ad6a:	d8f7      	bhi.n	801ad5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ad6c:	3b20      	subs	r3, #32
 801ad6e:	8013      	strh	r3, [r2, #0]
 801ad70:	e7f4      	b.n	801ad5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ad72:	9a08      	ldr	r2, [sp, #32]
 801ad74:	2a00      	cmp	r2, #0
 801ad76:	d0ab      	beq.n	801acd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ad78:	7812      	ldrb	r2, [r2, #0]
 801ad7a:	e7a9      	b.n	801acd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ad7c:	2d00      	cmp	r5, #0
 801ad7e:	f43f af48 	beq.w	801ac12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801ad82:	782d      	ldrb	r5, [r5, #0]
 801ad84:	e745      	b.n	801ac12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801ad86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ad86:	b507      	push	{r0, r1, r2, lr}
 801ad88:	9300      	str	r3, [sp, #0]
 801ad8a:	4613      	mov	r3, r2
 801ad8c:	2200      	movs	r2, #0
 801ad8e:	f7ff fe92 	bl	801aab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801ad92:	b003      	add	sp, #12
 801ad94:	f85d fb04 	ldr.w	pc, [sp], #4

0801ad98 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ad98:	b40c      	push	{r2, r3}
 801ad9a:	b507      	push	{r0, r1, r2, lr}
 801ad9c:	ab04      	add	r3, sp, #16
 801ad9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ada2:	9301      	str	r3, [sp, #4]
 801ada4:	f7ff ffef 	bl	801ad86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ada8:	b003      	add	sp, #12
 801adaa:	f85d eb04 	ldr.w	lr, [sp], #4
 801adae:	b002      	add	sp, #8
 801adb0:	4770      	bx	lr
	...

0801adb4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801adb4:	4b01      	ldr	r3, [pc, #4]	; (801adbc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801adb6:	6018      	str	r0, [r3, #0]
 801adb8:	4770      	bx	lr
 801adba:	bf00      	nop
 801adbc:	2400ff44 	.word	0x2400ff44

0801adc0 <_ZN8touchgfx11FontManager7getFontEt>:
 801adc0:	4b03      	ldr	r3, [pc, #12]	; (801add0 <_ZN8touchgfx11FontManager7getFontEt+0x10>)
 801adc2:	4601      	mov	r1, r0
 801adc4:	6818      	ldr	r0, [r3, #0]
 801adc6:	b110      	cbz	r0, 801adce <_ZN8touchgfx11FontManager7getFontEt+0xe>
 801adc8:	6803      	ldr	r3, [r0, #0]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	4718      	bx	r3
 801adce:	4770      	bx	lr
 801add0:	2400ff44 	.word	0x2400ff44

0801add4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801add4:	4b06      	ldr	r3, [pc, #24]	; (801adf0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801add6:	881a      	ldrh	r2, [r3, #0]
 801add8:	4282      	cmp	r2, r0
 801adda:	d807      	bhi.n	801adec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801addc:	4b05      	ldr	r3, [pc, #20]	; (801adf4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801adde:	881b      	ldrh	r3, [r3, #0]
 801ade0:	4413      	add	r3, r2
 801ade2:	4298      	cmp	r0, r3
 801ade4:	bfac      	ite	ge
 801ade6:	2000      	movge	r0, #0
 801ade8:	2001      	movlt	r0, #1
 801adea:	4770      	bx	lr
 801adec:	2000      	movs	r0, #0
 801adee:	4770      	bx	lr
 801adf0:	2400ff64 	.word	0x2400ff64
 801adf4:	2400ff68 	.word	0x2400ff68

0801adf8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801adf8:	b508      	push	{r3, lr}
 801adfa:	4601      	mov	r1, r0
 801adfc:	f7ff ffea 	bl	801add4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801ae00:	b118      	cbz	r0, 801ae0a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801ae02:	4b02      	ldr	r3, [pc, #8]	; (801ae0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801ae0a:	bd08      	pop	{r3, pc}
 801ae0c:	2400ff48 	.word	0x2400ff48

0801ae10 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801ae10:	b538      	push	{r3, r4, r5, lr}
 801ae12:	4604      	mov	r4, r0
 801ae14:	f7ff ffde 	bl	801add4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801ae18:	b188      	cbz	r0, 801ae3e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801ae1a:	4b09      	ldr	r3, [pc, #36]	; (801ae40 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801ae1c:	881a      	ldrh	r2, [r3, #0]
 801ae1e:	4b09      	ldr	r3, [pc, #36]	; (801ae44 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801ae20:	1aa4      	subs	r4, r4, r2
 801ae22:	220e      	movs	r2, #14
 801ae24:	681d      	ldr	r5, [r3, #0]
 801ae26:	4362      	muls	r2, r4
 801ae28:	18ac      	adds	r4, r5, r2
 801ae2a:	7b23      	ldrb	r3, [r4, #12]
 801ae2c:	f013 0320 	ands.w	r3, r3, #32
 801ae30:	bf17      	itett	ne
 801ae32:	680b      	ldrne	r3, [r1, #0]
 801ae34:	4618      	moveq	r0, r3
 801ae36:	50ab      	strne	r3, [r5, r2]
 801ae38:	684b      	ldrne	r3, [r1, #4]
 801ae3a:	bf18      	it	ne
 801ae3c:	6063      	strne	r3, [r4, #4]
 801ae3e:	bd38      	pop	{r3, r4, r5, pc}
 801ae40:	2400ff64 	.word	0x2400ff64
 801ae44:	2400ff4c 	.word	0x2400ff4c

0801ae48 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801ae48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae4c:	4606      	mov	r6, r0
 801ae4e:	460c      	mov	r4, r1
 801ae50:	f7ff ffc0 	bl	801add4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801ae54:	b918      	cbnz	r0, 801ae5e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801ae56:	2000      	movs	r0, #0
 801ae58:	b002      	add	sp, #8
 801ae5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae5e:	4608      	mov	r0, r1
 801ae60:	f7f8 fa95 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ae64:	2800      	cmp	r0, #0
 801ae66:	d1f6      	bne.n	801ae56 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801ae68:	4b3f      	ldr	r3, [pc, #252]	; (801af68 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801ae6a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801af6c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801ae6e:	881d      	ldrh	r5, [r3, #0]
 801ae70:	f8d9 a000 	ldr.w	sl, [r9]
 801ae74:	46c8      	mov	r8, r9
 801ae76:	1b73      	subs	r3, r6, r5
 801ae78:	250e      	movs	r5, #14
 801ae7a:	435d      	muls	r5, r3
 801ae7c:	eb0a 0705 	add.w	r7, sl, r5
 801ae80:	7b3b      	ldrb	r3, [r7, #12]
 801ae82:	f013 0f20 	tst.w	r3, #32
 801ae86:	d0e6      	beq.n	801ae56 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801ae88:	4621      	mov	r1, r4
 801ae8a:	4638      	mov	r0, r7
 801ae8c:	f7fd f82c 	bl	8017ee8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ae90:	2800      	cmp	r0, #0
 801ae92:	d1e1      	bne.n	801ae58 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801ae94:	4639      	mov	r1, r7
 801ae96:	4620      	mov	r0, r4
 801ae98:	f7fd f826 	bl	8017ee8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ae9c:	b108      	cbz	r0, 801aea2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801ae9e:	4621      	mov	r1, r4
 801aea0:	e020      	b.n	801aee4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801aea2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801aea6:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801aeaa:	429a      	cmp	r2, r3
 801aeac:	d11e      	bne.n	801aeec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801aeae:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801aeb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801aeb6:	429a      	cmp	r2, r3
 801aeb8:	d118      	bne.n	801aeec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801aeba:	6820      	ldr	r0, [r4, #0]
 801aebc:	466b      	mov	r3, sp
 801aebe:	6861      	ldr	r1, [r4, #4]
 801aec0:	c303      	stmia	r3!, {r0, r1}
 801aec2:	4639      	mov	r1, r7
 801aec4:	4668      	mov	r0, sp
 801aec6:	f7f8 ffa7 	bl	8013e18 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801aeca:	f8d9 3000 	ldr.w	r3, [r9]
 801aece:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801aed2:	442b      	add	r3, r5
 801aed4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aed8:	4413      	add	r3, r2
 801aeda:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801aede:	4293      	cmp	r3, r2
 801aee0:	dc04      	bgt.n	801aeec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801aee2:	4669      	mov	r1, sp
 801aee4:	4630      	mov	r0, r6
 801aee6:	f7ff ff93 	bl	801ae10 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801aeea:	e7b5      	b.n	801ae58 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801aeec:	f8d8 3000 	ldr.w	r3, [r8]
 801aef0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801aef4:	442b      	add	r3, r5
 801aef6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801aefa:	4291      	cmp	r1, r2
 801aefc:	d119      	bne.n	801af32 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801aefe:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801af02:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801af06:	4291      	cmp	r1, r2
 801af08:	d113      	bne.n	801af32 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801af0a:	6820      	ldr	r0, [r4, #0]
 801af0c:	466a      	mov	r2, sp
 801af0e:	6861      	ldr	r1, [r4, #4]
 801af10:	c203      	stmia	r2!, {r0, r1}
 801af12:	4619      	mov	r1, r3
 801af14:	4668      	mov	r0, sp
 801af16:	f7f8 ff7f 	bl	8013e18 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801af1a:	f8d8 3000 	ldr.w	r3, [r8]
 801af1e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801af22:	442b      	add	r3, r5
 801af24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801af28:	4413      	add	r3, r2
 801af2a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801af2e:	4293      	cmp	r3, r2
 801af30:	ddd7      	ble.n	801aee2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801af32:	4620      	mov	r0, r4
 801af34:	f7f8 fa2b 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 801af38:	b990      	cbnz	r0, 801af60 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801af3a:	88a7      	ldrh	r7, [r4, #4]
 801af3c:	88e3      	ldrh	r3, [r4, #6]
 801af3e:	fb17 f703 	smulbb	r7, r7, r3
 801af42:	f8d8 3000 	ldr.w	r3, [r8]
 801af46:	441d      	add	r5, r3
 801af48:	4628      	mov	r0, r5
 801af4a:	f7f8 fa20 	bl	801338e <_ZNK8touchgfx4Rect7isEmptyEv>
 801af4e:	b948      	cbnz	r0, 801af64 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801af50:	88ab      	ldrh	r3, [r5, #4]
 801af52:	88ea      	ldrh	r2, [r5, #6]
 801af54:	fb13 f302 	smulbb	r3, r3, r2
 801af58:	42bb      	cmp	r3, r7
 801af5a:	f6bf af7c 	bge.w	801ae56 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801af5e:	e79e      	b.n	801ae9e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801af60:	2700      	movs	r7, #0
 801af62:	e7ee      	b.n	801af42 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801af64:	2300      	movs	r3, #0
 801af66:	e7f7      	b.n	801af58 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801af68:	2400ff64 	.word	0x2400ff64
 801af6c:	2400ff4c 	.word	0x2400ff4c

0801af70 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801af70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af72:	4c24      	ldr	r4, [pc, #144]	; (801b004 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801af74:	6823      	ldr	r3, [r4, #0]
 801af76:	2b00      	cmp	r3, #0
 801af78:	d042      	beq.n	801b000 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801af7a:	4a23      	ldr	r2, [pc, #140]	; (801b008 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801af7c:	4d23      	ldr	r5, [pc, #140]	; (801b00c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801af7e:	8811      	ldrh	r1, [r2, #0]
 801af80:	f8b5 c000 	ldrh.w	ip, [r5]
 801af84:	4822      	ldr	r0, [pc, #136]	; (801b010 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801af86:	4461      	add	r1, ip
 801af88:	1c4a      	adds	r2, r1, #1
 801af8a:	008f      	lsls	r7, r1, #2
 801af8c:	f022 0201 	bic.w	r2, r2, #1
 801af90:	19de      	adds	r6, r3, r7
 801af92:	0412      	lsls	r2, r2, #16
 801af94:	6006      	str	r6, [r0, #0]
 801af96:	4e1f      	ldr	r6, [pc, #124]	; (801b014 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801af98:	0c12      	lsrs	r2, r2, #16
 801af9a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801af9e:	19da      	adds	r2, r3, r7
 801afa0:	6032      	str	r2, [r6, #0]
 801afa2:	220e      	movs	r2, #14
 801afa4:	fb02 f20c 	mul.w	r2, r2, ip
 801afa8:	3203      	adds	r2, #3
 801afaa:	f022 0203 	bic.w	r2, r2, #3
 801afae:	443a      	add	r2, r7
 801afb0:	4f19      	ldr	r7, [pc, #100]	; (801b018 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801afb2:	4413      	add	r3, r2
 801afb4:	603b      	str	r3, [r7, #0]
 801afb6:	2300      	movs	r3, #0
 801afb8:	4f18      	ldr	r7, [pc, #96]	; (801b01c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801afba:	469c      	mov	ip, r3
 801afbc:	803b      	strh	r3, [r7, #0]
 801afbe:	4f18      	ldr	r7, [pc, #96]	; (801b020 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801afc0:	683f      	ldr	r7, [r7, #0]
 801afc2:	1aba      	subs	r2, r7, r2
 801afc4:	4f17      	ldr	r7, [pc, #92]	; (801b024 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801afc6:	603a      	str	r2, [r7, #0]
 801afc8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801afcc:	4a16      	ldr	r2, [pc, #88]	; (801b028 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801afce:	8013      	strh	r3, [r2, #0]
 801afd0:	428b      	cmp	r3, r1
 801afd2:	d10d      	bne.n	801aff0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801afd4:	882d      	ldrh	r5, [r5, #0]
 801afd6:	2300      	movs	r3, #0
 801afd8:	6830      	ldr	r0, [r6, #0]
 801afda:	240e      	movs	r4, #14
 801afdc:	429d      	cmp	r5, r3
 801afde:	d90f      	bls.n	801b000 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801afe0:	fb04 0203 	mla	r2, r4, r3, r0
 801afe4:	3301      	adds	r3, #1
 801afe6:	7b11      	ldrb	r1, [r2, #12]
 801afe8:	f36f 1145 	bfc	r1, #5, #1
 801afec:	7311      	strb	r1, [r2, #12]
 801afee:	e7f5      	b.n	801afdc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801aff0:	6822      	ldr	r2, [r4, #0]
 801aff2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801aff6:	6802      	ldr	r2, [r0, #0]
 801aff8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801affc:	3301      	adds	r3, #1
 801affe:	e7e7      	b.n	801afd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801b000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b002:	bf00      	nop
 801b004:	2400ff48 	.word	0x2400ff48
 801b008:	2400ff64 	.word	0x2400ff64
 801b00c:	2400ff68 	.word	0x2400ff68
 801b010:	2400ff5c 	.word	0x2400ff5c
 801b014:	2400ff4c 	.word	0x2400ff4c
 801b018:	2400ff54 	.word	0x2400ff54
 801b01c:	2400ff66 	.word	0x2400ff66
 801b020:	2400ff50 	.word	0x2400ff50
 801b024:	2400ff60 	.word	0x2400ff60
 801b028:	2400ff58 	.word	0x2400ff58

0801b02c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b02c:	4b06      	ldr	r3, [pc, #24]	; (801b048 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	b943      	cbnz	r3, 801b044 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b032:	b139      	cbz	r1, 801b044 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b034:	4b05      	ldr	r3, [pc, #20]	; (801b04c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801b036:	801a      	strh	r2, [r3, #0]
 801b038:	4b05      	ldr	r3, [pc, #20]	; (801b050 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801b03a:	6019      	str	r1, [r3, #0]
 801b03c:	4b05      	ldr	r3, [pc, #20]	; (801b054 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801b03e:	6018      	str	r0, [r3, #0]
 801b040:	f7ff bf96 	b.w	801af70 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b044:	4770      	bx	lr
 801b046:	bf00      	nop
 801b048:	2400ff54 	.word	0x2400ff54
 801b04c:	2400ff68 	.word	0x2400ff68
 801b050:	2400ff50 	.word	0x2400ff50
 801b054:	2400ff48 	.word	0x2400ff48

0801b058 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b058:	b470      	push	{r4, r5, r6}
 801b05a:	4c07      	ldr	r4, [pc, #28]	; (801b078 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b05c:	4605      	mov	r5, r0
 801b05e:	4610      	mov	r0, r2
 801b060:	9a03      	ldr	r2, [sp, #12]
 801b062:	6826      	ldr	r6, [r4, #0]
 801b064:	b936      	cbnz	r6, 801b074 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b066:	6025      	str	r5, [r4, #0]
 801b068:	4c04      	ldr	r4, [pc, #16]	; (801b07c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b06a:	8021      	strh	r1, [r4, #0]
 801b06c:	4619      	mov	r1, r3
 801b06e:	bc70      	pop	{r4, r5, r6}
 801b070:	f7ff bfdc 	b.w	801b02c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b074:	bc70      	pop	{r4, r5, r6}
 801b076:	4770      	bx	lr
 801b078:	2400ff6c 	.word	0x2400ff6c
 801b07c:	2400ff64 	.word	0x2400ff64

0801b080 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b080:	4a12      	ldr	r2, [pc, #72]	; (801b0cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801b082:	8803      	ldrh	r3, [r0, #0]
 801b084:	8812      	ldrh	r2, [r2, #0]
 801b086:	4293      	cmp	r3, r2
 801b088:	d207      	bcs.n	801b09a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801b08a:	4a11      	ldr	r2, [pc, #68]	; (801b0d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801b08c:	2114      	movs	r1, #20
 801b08e:	6812      	ldr	r2, [r2, #0]
 801b090:	fb01 2303 	mla	r3, r1, r3, r2
 801b094:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801b098:	4770      	bx	lr
 801b09a:	490e      	ldr	r1, [pc, #56]	; (801b0d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b09c:	8809      	ldrh	r1, [r1, #0]
 801b09e:	4411      	add	r1, r2
 801b0a0:	428b      	cmp	r3, r1
 801b0a2:	da04      	bge.n	801b0ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801b0a4:	1a9b      	subs	r3, r3, r2
 801b0a6:	4a0c      	ldr	r2, [pc, #48]	; (801b0d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b0a8:	210e      	movs	r1, #14
 801b0aa:	6812      	ldr	r2, [r2, #0]
 801b0ac:	e7f0      	b.n	801b090 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801b0ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b0b2:	4293      	cmp	r3, r2
 801b0b4:	d108      	bne.n	801b0c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801b0b6:	4b09      	ldr	r3, [pc, #36]	; (801b0dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b0b8:	781b      	ldrb	r3, [r3, #0]
 801b0ba:	b91b      	cbnz	r3, 801b0c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801b0bc:	4b08      	ldr	r3, [pc, #32]	; (801b0e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b0be:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b0c2:	4770      	bx	lr
 801b0c4:	4b07      	ldr	r3, [pc, #28]	; (801b0e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b0c6:	e7fa      	b.n	801b0be <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801b0c8:	2000      	movs	r0, #0
 801b0ca:	4770      	bx	lr
 801b0cc:	2400ff64 	.word	0x2400ff64
 801b0d0:	2400ff6c 	.word	0x2400ff6c
 801b0d4:	2400ff68 	.word	0x2400ff68
 801b0d8:	2400ff4c 	.word	0x2400ff4c
 801b0dc:	2400fedc 	.word	0x2400fedc
 801b0e0:	2400fede 	.word	0x2400fede
 801b0e4:	2400fee0 	.word	0x2400fee0

0801b0e8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b0e8:	4a12      	ldr	r2, [pc, #72]	; (801b134 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801b0ea:	8803      	ldrh	r3, [r0, #0]
 801b0ec:	8812      	ldrh	r2, [r2, #0]
 801b0ee:	4293      	cmp	r3, r2
 801b0f0:	d207      	bcs.n	801b102 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801b0f2:	4a11      	ldr	r2, [pc, #68]	; (801b138 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801b0f4:	2114      	movs	r1, #20
 801b0f6:	6812      	ldr	r2, [r2, #0]
 801b0f8:	fb01 2303 	mla	r3, r1, r3, r2
 801b0fc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801b100:	4770      	bx	lr
 801b102:	490e      	ldr	r1, [pc, #56]	; (801b13c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b104:	8809      	ldrh	r1, [r1, #0]
 801b106:	4411      	add	r1, r2
 801b108:	428b      	cmp	r3, r1
 801b10a:	da04      	bge.n	801b116 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801b10c:	1a9b      	subs	r3, r3, r2
 801b10e:	4a0c      	ldr	r2, [pc, #48]	; (801b140 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b110:	210e      	movs	r1, #14
 801b112:	6812      	ldr	r2, [r2, #0]
 801b114:	e7f0      	b.n	801b0f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801b116:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b11a:	4293      	cmp	r3, r2
 801b11c:	d108      	bne.n	801b130 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801b11e:	4b09      	ldr	r3, [pc, #36]	; (801b144 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b120:	781b      	ldrb	r3, [r3, #0]
 801b122:	b91b      	cbnz	r3, 801b12c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801b124:	4b08      	ldr	r3, [pc, #32]	; (801b148 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b126:	f9b3 0000 	ldrsh.w	r0, [r3]
 801b12a:	4770      	bx	lr
 801b12c:	4b07      	ldr	r3, [pc, #28]	; (801b14c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b12e:	e7fa      	b.n	801b126 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801b130:	2000      	movs	r0, #0
 801b132:	4770      	bx	lr
 801b134:	2400ff64 	.word	0x2400ff64
 801b138:	2400ff6c 	.word	0x2400ff6c
 801b13c:	2400ff68 	.word	0x2400ff68
 801b140:	2400ff4c 	.word	0x2400ff4c
 801b144:	2400fedc 	.word	0x2400fedc
 801b148:	2400fee0 	.word	0x2400fee0
 801b14c:	2400fede 	.word	0x2400fede

0801b150 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b150:	4a1f      	ldr	r2, [pc, #124]	; (801b1d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801b152:	b510      	push	{r4, lr}
 801b154:	880b      	ldrh	r3, [r1, #0]
 801b156:	8812      	ldrh	r2, [r2, #0]
 801b158:	4293      	cmp	r3, r2
 801b15a:	d213      	bcs.n	801b184 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801b15c:	4a1d      	ldr	r2, [pc, #116]	; (801b1d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801b15e:	2114      	movs	r1, #20
 801b160:	6812      	ldr	r2, [r2, #0]
 801b162:	fb01 2303 	mla	r3, r1, r3, r2
 801b166:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b16a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b16e:	8a1a      	ldrh	r2, [r3, #16]
 801b170:	8a5b      	ldrh	r3, [r3, #18]
 801b172:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b176:	8004      	strh	r4, [r0, #0]
 801b178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b17c:	8041      	strh	r1, [r0, #2]
 801b17e:	8082      	strh	r2, [r0, #4]
 801b180:	80c3      	strh	r3, [r0, #6]
 801b182:	e00e      	b.n	801b1a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801b184:	4914      	ldr	r1, [pc, #80]	; (801b1d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801b186:	8809      	ldrh	r1, [r1, #0]
 801b188:	4411      	add	r1, r2
 801b18a:	428b      	cmp	r3, r1
 801b18c:	da0a      	bge.n	801b1a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801b18e:	1a9b      	subs	r3, r3, r2
 801b190:	4a12      	ldr	r2, [pc, #72]	; (801b1dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801b192:	210e      	movs	r1, #14
 801b194:	6812      	ldr	r2, [r2, #0]
 801b196:	fb01 2303 	mla	r3, r1, r3, r2
 801b19a:	681a      	ldr	r2, [r3, #0]
 801b19c:	6002      	str	r2, [r0, #0]
 801b19e:	685a      	ldr	r2, [r3, #4]
 801b1a0:	6042      	str	r2, [r0, #4]
 801b1a2:	bd10      	pop	{r4, pc}
 801b1a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b1a8:	4293      	cmp	r3, r2
 801b1aa:	d10b      	bne.n	801b1c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801b1ac:	4b0c      	ldr	r3, [pc, #48]	; (801b1e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b1ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b1b2:	4b0c      	ldr	r3, [pc, #48]	; (801b1e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b1b4:	8081      	strh	r1, [r0, #4]
 801b1b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b1ba:	2300      	movs	r3, #0
 801b1bc:	80c2      	strh	r2, [r0, #6]
 801b1be:	8003      	strh	r3, [r0, #0]
 801b1c0:	8043      	strh	r3, [r0, #2]
 801b1c2:	e7ee      	b.n	801b1a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801b1c4:	2300      	movs	r3, #0
 801b1c6:	8003      	strh	r3, [r0, #0]
 801b1c8:	8043      	strh	r3, [r0, #2]
 801b1ca:	8083      	strh	r3, [r0, #4]
 801b1cc:	e7d8      	b.n	801b180 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801b1ce:	bf00      	nop
 801b1d0:	2400ff64 	.word	0x2400ff64
 801b1d4:	2400ff6c 	.word	0x2400ff6c
 801b1d8:	2400ff68 	.word	0x2400ff68
 801b1dc:	2400ff4c 	.word	0x2400ff4c
 801b1e0:	2400fed8 	.word	0x2400fed8
 801b1e4:	2400feda 	.word	0x2400feda

0801b1e8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b1e8:	4a12      	ldr	r2, [pc, #72]	; (801b234 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b1ea:	8803      	ldrh	r3, [r0, #0]
 801b1ec:	8811      	ldrh	r1, [r2, #0]
 801b1ee:	428b      	cmp	r3, r1
 801b1f0:	d20b      	bcs.n	801b20a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801b1f2:	4a11      	ldr	r2, [pc, #68]	; (801b238 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b1f4:	6812      	ldr	r2, [r2, #0]
 801b1f6:	b112      	cbz	r2, 801b1fe <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b1f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b1fc:	b9c0      	cbnz	r0, 801b230 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801b1fe:	4a0f      	ldr	r2, [pc, #60]	; (801b23c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b200:	6811      	ldr	r1, [r2, #0]
 801b202:	2214      	movs	r2, #20
 801b204:	4353      	muls	r3, r2
 801b206:	58c8      	ldr	r0, [r1, r3]
 801b208:	4770      	bx	lr
 801b20a:	4a0d      	ldr	r2, [pc, #52]	; (801b240 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b20c:	8812      	ldrh	r2, [r2, #0]
 801b20e:	440a      	add	r2, r1
 801b210:	4293      	cmp	r3, r2
 801b212:	da04      	bge.n	801b21e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801b214:	4a08      	ldr	r2, [pc, #32]	; (801b238 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b216:	6812      	ldr	r2, [r2, #0]
 801b218:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b21c:	4770      	bx	lr
 801b21e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b222:	4293      	cmp	r3, r2
 801b224:	d103      	bne.n	801b22e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b226:	4b07      	ldr	r3, [pc, #28]	; (801b244 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b22c:	4770      	bx	lr
 801b22e:	2000      	movs	r0, #0
 801b230:	4770      	bx	lr
 801b232:	bf00      	nop
 801b234:	2400ff64 	.word	0x2400ff64
 801b238:	2400ff48 	.word	0x2400ff48
 801b23c:	2400ff6c 	.word	0x2400ff6c
 801b240:	2400ff68 	.word	0x2400ff68
 801b244:	2400fee4 	.word	0x2400fee4

0801b248 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b248:	4b24      	ldr	r3, [pc, #144]	; (801b2dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b24a:	8802      	ldrh	r2, [r0, #0]
 801b24c:	8818      	ldrh	r0, [r3, #0]
 801b24e:	4282      	cmp	r2, r0
 801b250:	d221      	bcs.n	801b296 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801b252:	4b23      	ldr	r3, [pc, #140]	; (801b2e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b254:	6819      	ldr	r1, [r3, #0]
 801b256:	2314      	movs	r3, #20
 801b258:	fb03 1302 	mla	r3, r3, r2, r1
 801b25c:	6858      	ldr	r0, [r3, #4]
 801b25e:	2800      	cmp	r0, #0
 801b260:	d03a      	beq.n	801b2d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b262:	4920      	ldr	r1, [pc, #128]	; (801b2e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b264:	6809      	ldr	r1, [r1, #0]
 801b266:	2900      	cmp	r1, #0
 801b268:	d036      	beq.n	801b2d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b26a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b26e:	2900      	cmp	r1, #0
 801b270:	d032      	beq.n	801b2d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801b272:	891a      	ldrh	r2, [r3, #8]
 801b274:	8958      	ldrh	r0, [r3, #10]
 801b276:	4350      	muls	r0, r2
 801b278:	7c5a      	ldrb	r2, [r3, #17]
 801b27a:	7cdb      	ldrb	r3, [r3, #19]
 801b27c:	0952      	lsrs	r2, r2, #5
 801b27e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b282:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b286:	2b0b      	cmp	r3, #11
 801b288:	bf18      	it	ne
 801b28a:	0040      	lslne	r0, r0, #1
 801b28c:	3003      	adds	r0, #3
 801b28e:	f020 0003 	bic.w	r0, r0, #3
 801b292:	4408      	add	r0, r1
 801b294:	4770      	bx	lr
 801b296:	4b14      	ldr	r3, [pc, #80]	; (801b2e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b298:	881b      	ldrh	r3, [r3, #0]
 801b29a:	4403      	add	r3, r0
 801b29c:	429a      	cmp	r2, r3
 801b29e:	da1a      	bge.n	801b2d6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b2a0:	4b12      	ldr	r3, [pc, #72]	; (801b2ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801b2a2:	1a10      	subs	r0, r2, r0
 801b2a4:	210e      	movs	r1, #14
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	fb01 3000 	mla	r0, r1, r0, r3
 801b2ac:	7b03      	ldrb	r3, [r0, #12]
 801b2ae:	f003 031f 	and.w	r3, r3, #31
 801b2b2:	2b0b      	cmp	r3, #11
 801b2b4:	d10b      	bne.n	801b2ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801b2b6:	8903      	ldrh	r3, [r0, #8]
 801b2b8:	8940      	ldrh	r0, [r0, #10]
 801b2ba:	4358      	muls	r0, r3
 801b2bc:	4b09      	ldr	r3, [pc, #36]	; (801b2e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b2be:	3003      	adds	r0, #3
 801b2c0:	6819      	ldr	r1, [r3, #0]
 801b2c2:	f020 0303 	bic.w	r3, r0, #3
 801b2c6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b2ca:	4418      	add	r0, r3
 801b2cc:	4770      	bx	lr
 801b2ce:	2b0d      	cmp	r3, #13
 801b2d0:	d101      	bne.n	801b2d6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b2d2:	300d      	adds	r0, #13
 801b2d4:	4770      	bx	lr
 801b2d6:	2000      	movs	r0, #0
 801b2d8:	4770      	bx	lr
 801b2da:	bf00      	nop
 801b2dc:	2400ff64 	.word	0x2400ff64
 801b2e0:	2400ff6c 	.word	0x2400ff6c
 801b2e4:	2400ff48 	.word	0x2400ff48
 801b2e8:	2400ff68 	.word	0x2400ff68
 801b2ec:	2400ff4c 	.word	0x2400ff4c

0801b2f0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b2f0:	4a17      	ldr	r2, [pc, #92]	; (801b350 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801b2f2:	b510      	push	{r4, lr}
 801b2f4:	8803      	ldrh	r3, [r0, #0]
 801b2f6:	8812      	ldrh	r2, [r2, #0]
 801b2f8:	4293      	cmp	r3, r2
 801b2fa:	d20c      	bcs.n	801b316 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b2fc:	4a15      	ldr	r2, [pc, #84]	; (801b354 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801b2fe:	2114      	movs	r1, #20
 801b300:	6812      	ldr	r2, [r2, #0]
 801b302:	fb01 2303 	mla	r3, r1, r3, r2
 801b306:	7c58      	ldrb	r0, [r3, #17]
 801b308:	0942      	lsrs	r2, r0, #5
 801b30a:	7cd8      	ldrb	r0, [r3, #19]
 801b30c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b310:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b314:	bd10      	pop	{r4, pc}
 801b316:	4910      	ldr	r1, [pc, #64]	; (801b358 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b318:	8809      	ldrh	r1, [r1, #0]
 801b31a:	4411      	add	r1, r2
 801b31c:	428b      	cmp	r3, r1
 801b31e:	da09      	bge.n	801b334 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b320:	1a9b      	subs	r3, r3, r2
 801b322:	4a0e      	ldr	r2, [pc, #56]	; (801b35c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b324:	210e      	movs	r1, #14
 801b326:	6812      	ldr	r2, [r2, #0]
 801b328:	fb01 2303 	mla	r3, r1, r3, r2
 801b32c:	7b18      	ldrb	r0, [r3, #12]
 801b32e:	f000 001f 	and.w	r0, r0, #31
 801b332:	e7ef      	b.n	801b314 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b334:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b338:	4293      	cmp	r3, r2
 801b33a:	d106      	bne.n	801b34a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b33c:	f7f9 fb0c 	bl	8014958 <_ZN8touchgfx3HAL3lcdEv>
 801b340:	6803      	ldr	r3, [r0, #0]
 801b342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b348:	4718      	bx	r3
 801b34a:	2000      	movs	r0, #0
 801b34c:	e7e2      	b.n	801b314 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801b34e:	bf00      	nop
 801b350:	2400ff64 	.word	0x2400ff64
 801b354:	2400ff6c 	.word	0x2400ff6c
 801b358:	2400ff68 	.word	0x2400ff68
 801b35c:	2400ff4c 	.word	0x2400ff4c

0801b360 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b360:	2018      	movs	r0, #24
 801b362:	4770      	bx	lr

0801b364 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b364:	2001      	movs	r0, #1
 801b366:	4770      	bx	lr

0801b368 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801b368:	4b02      	ldr	r3, [pc, #8]	; (801b374 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801b36a:	8818      	ldrh	r0, [r3, #0]
 801b36c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b370:	b280      	uxth	r0, r0
 801b372:	4770      	bx	lr
 801b374:	2400fede 	.word	0x2400fede

0801b378 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b378:	2bff      	cmp	r3, #255	; 0xff
 801b37a:	d040      	beq.n	801b3fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801b37c:	2a2c      	cmp	r2, #44	; 0x2c
 801b37e:	d02a      	beq.n	801b3d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801b380:	d80f      	bhi.n	801b3a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801b382:	2a08      	cmp	r2, #8
 801b384:	d037      	beq.n	801b3f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801b386:	d805      	bhi.n	801b394 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801b388:	2a04      	cmp	r2, #4
 801b38a:	d032      	beq.n	801b3f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801b38c:	2a05      	cmp	r2, #5
 801b38e:	d02e      	beq.n	801b3ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801b390:	2000      	movs	r0, #0
 801b392:	4770      	bx	lr
 801b394:	2a0a      	cmp	r2, #10
 801b396:	d02e      	beq.n	801b3f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801b398:	d301      	bcc.n	801b39e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801b39a:	2a0b      	cmp	r2, #11
 801b39c:	d1f8      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b39e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801b3a0:	4770      	bx	lr
 801b3a2:	2a30      	cmp	r2, #48	; 0x30
 801b3a4:	d029      	beq.n	801b3fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801b3a6:	d808      	bhi.n	801b3ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801b3a8:	2a2e      	cmp	r2, #46	; 0x2e
 801b3aa:	684b      	ldr	r3, [r1, #4]
 801b3ac:	d01a      	beq.n	801b3e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801b3ae:	d90b      	bls.n	801b3c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801b3b0:	781b      	ldrb	r3, [r3, #0]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d1ec      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b3b6:	6a00      	ldr	r0, [r0, #32]
 801b3b8:	4770      	bx	lr
 801b3ba:	2a32      	cmp	r2, #50	; 0x32
 801b3bc:	d01d      	beq.n	801b3fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801b3be:	d301      	bcc.n	801b3c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801b3c0:	2a33      	cmp	r2, #51	; 0x33
 801b3c2:	d1e5      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b3c4:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801b3c6:	4770      	bx	lr
 801b3c8:	781b      	ldrb	r3, [r3, #0]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d0f3      	beq.n	801b3b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801b3ce:	2b01      	cmp	r3, #1
 801b3d0:	d1de      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b3d2:	6900      	ldr	r0, [r0, #16]
 801b3d4:	4770      	bx	lr
 801b3d6:	684b      	ldr	r3, [r1, #4]
 801b3d8:	781b      	ldrb	r3, [r3, #0]
 801b3da:	b133      	cbz	r3, 801b3ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801b3dc:	2b01      	cmp	r3, #1
 801b3de:	d1d7      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b3e0:	6880      	ldr	r0, [r0, #8]
 801b3e2:	4770      	bx	lr
 801b3e4:	781b      	ldrb	r3, [r3, #0]
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d1d2      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b3ea:	6980      	ldr	r0, [r0, #24]
 801b3ec:	4770      	bx	lr
 801b3ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b3f0:	4770      	bx	lr
 801b3f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b3f4:	4770      	bx	lr
 801b3f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b3f8:	4770      	bx	lr
 801b3fa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801b3fc:	4770      	bx	lr
 801b3fe:	2a2c      	cmp	r2, #44	; 0x2c
 801b400:	d02a      	beq.n	801b458 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801b402:	d80f      	bhi.n	801b424 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801b404:	2a08      	cmp	r2, #8
 801b406:	d035      	beq.n	801b474 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801b408:	d805      	bhi.n	801b416 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b40a:	2a04      	cmp	r2, #4
 801b40c:	d030      	beq.n	801b470 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801b40e:	2a05      	cmp	r2, #5
 801b410:	d1be      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b412:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b414:	4770      	bx	lr
 801b416:	2a0a      	cmp	r2, #10
 801b418:	d02c      	beq.n	801b474 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801b41a:	d301      	bcc.n	801b420 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801b41c:	2a0b      	cmp	r2, #11
 801b41e:	d1b7      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b420:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b422:	4770      	bx	lr
 801b424:	2a30      	cmp	r2, #48	; 0x30
 801b426:	d027      	beq.n	801b478 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801b428:	d808      	bhi.n	801b43c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801b42a:	2a2e      	cmp	r2, #46	; 0x2e
 801b42c:	684b      	ldr	r3, [r1, #4]
 801b42e:	d01a      	beq.n	801b466 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801b430:	d90b      	bls.n	801b44a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801b432:	781b      	ldrb	r3, [r3, #0]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d1ab      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b438:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b43a:	4770      	bx	lr
 801b43c:	2a32      	cmp	r2, #50	; 0x32
 801b43e:	d01b      	beq.n	801b478 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801b440:	d301      	bcc.n	801b446 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801b442:	2a33      	cmp	r2, #51	; 0x33
 801b444:	d1a4      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b446:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b448:	4770      	bx	lr
 801b44a:	781b      	ldrb	r3, [r3, #0]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d0f3      	beq.n	801b438 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801b450:	2b01      	cmp	r3, #1
 801b452:	d19d      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b454:	6940      	ldr	r0, [r0, #20]
 801b456:	4770      	bx	lr
 801b458:	684b      	ldr	r3, [r1, #4]
 801b45a:	781b      	ldrb	r3, [r3, #0]
 801b45c:	b133      	cbz	r3, 801b46c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801b45e:	2b01      	cmp	r3, #1
 801b460:	d196      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b462:	68c0      	ldr	r0, [r0, #12]
 801b464:	4770      	bx	lr
 801b466:	781b      	ldrb	r3, [r3, #0]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d191      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801b46c:	69c0      	ldr	r0, [r0, #28]
 801b46e:	4770      	bx	lr
 801b470:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b472:	4770      	bx	lr
 801b474:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801b476:	4770      	bx	lr
 801b478:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801b47a:	4770      	bx	lr

0801b47c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b480:	b085      	sub	sp, #20
 801b482:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b484:	9203      	str	r2, [sp, #12]
 801b486:	6870      	ldr	r0, [r6, #4]
 801b488:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b48c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801b490:	9101      	str	r1, [sp, #4]
 801b492:	fa1f f885 	uxth.w	r8, r5
 801b496:	43ed      	mvns	r5, r5
 801b498:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b49c:	b2ed      	uxtb	r5, r5
 801b49e:	fb00 2404 	mla	r4, r0, r4, r2
 801b4a2:	6832      	ldr	r2, [r6, #0]
 801b4a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b4a8:	4414      	add	r4, r2
 801b4aa:	f8dc 2000 	ldr.w	r2, [ip]
 801b4ae:	9202      	str	r2, [sp, #8]
 801b4b0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b4b4:	f102 0e04 	add.w	lr, r2, #4
 801b4b8:	9a01      	ldr	r2, [sp, #4]
 801b4ba:	2a00      	cmp	r2, #0
 801b4bc:	dc03      	bgt.n	801b4c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b4be:	9a03      	ldr	r2, [sp, #12]
 801b4c0:	2a00      	cmp	r2, #0
 801b4c2:	f340 8116 	ble.w	801b6f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b4c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b4c8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801b4cc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b4d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b4d2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801b4d6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	dd0e      	ble.n	801b4fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b4de:	1406      	asrs	r6, r0, #16
 801b4e0:	d405      	bmi.n	801b4ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b4e2:	4556      	cmp	r6, sl
 801b4e4:	da03      	bge.n	801b4ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b4e6:	1416      	asrs	r6, r2, #16
 801b4e8:	d401      	bmi.n	801b4ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b4ea:	454e      	cmp	r6, r9
 801b4ec:	db07      	blt.n	801b4fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b4ee:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b4f0:	3b01      	subs	r3, #1
 801b4f2:	3403      	adds	r4, #3
 801b4f4:	4430      	add	r0, r6
 801b4f6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b4f8:	4432      	add	r2, r6
 801b4fa:	e7ee      	b.n	801b4da <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b4fc:	d063      	beq.n	801b5c6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b4fe:	1e5e      	subs	r6, r3, #1
 801b500:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801b502:	fb07 0706 	mla	r7, r7, r6, r0
 801b506:	143f      	asrs	r7, r7, #16
 801b508:	d454      	bmi.n	801b5b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b50a:	4557      	cmp	r7, sl
 801b50c:	da52      	bge.n	801b5b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b50e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801b510:	fb07 2606 	mla	r6, r7, r6, r2
 801b514:	1436      	asrs	r6, r6, #16
 801b516:	d44d      	bmi.n	801b5b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b518:	454e      	cmp	r6, r9
 801b51a:	da4b      	bge.n	801b5b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b51c:	1ce6      	adds	r6, r4, #3
 801b51e:	4699      	mov	r9, r3
 801b520:	f1b9 0f00 	cmp.w	r9, #0
 801b524:	f106 0603 	add.w	r6, r6, #3
 801b528:	dd48      	ble.n	801b5bc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801b52a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801b52e:	1417      	asrs	r7, r2, #16
 801b530:	9902      	ldr	r1, [sp, #8]
 801b532:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b536:	f109 39ff 	add.w	r9, r9, #4294967295
 801b53a:	fb0b 1707 	mla	r7, fp, r7, r1
 801b53e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b542:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b544:	f817 700a 	ldrb.w	r7, [r7, sl]
 801b548:	fb1b fb05 	smulbb	fp, fp, r5
 801b54c:	4408      	add	r0, r1
 801b54e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b550:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b554:	440a      	add	r2, r1
 801b556:	eb0e 0a07 	add.w	sl, lr, r7
 801b55a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801b55e:	fb07 b708 	mla	r7, r7, r8, fp
 801b562:	b2bf      	uxth	r7, r7
 801b564:	f107 0b01 	add.w	fp, r7, #1
 801b568:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b56c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b570:	fb1b fb05 	smulbb	fp, fp, r5
 801b574:	123f      	asrs	r7, r7, #8
 801b576:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b57a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b57e:	fb07 b708 	mla	r7, r7, r8, fp
 801b582:	b2bf      	uxth	r7, r7
 801b584:	f107 0b01 	add.w	fp, r7, #1
 801b588:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b58c:	123f      	asrs	r7, r7, #8
 801b58e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b592:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b596:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b59a:	fb1a fa05 	smulbb	sl, sl, r5
 801b59e:	fb07 a708 	mla	r7, r7, r8, sl
 801b5a2:	b2bf      	uxth	r7, r7
 801b5a4:	f107 0a01 	add.w	sl, r7, #1
 801b5a8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b5ac:	123f      	asrs	r7, r7, #8
 801b5ae:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b5b2:	e7b5      	b.n	801b520 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801b5b4:	2700      	movs	r7, #0
 801b5b6:	1bde      	subs	r6, r3, r7
 801b5b8:	2e00      	cmp	r6, #0
 801b5ba:	dc42      	bgt.n	801b642 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801b5bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b5c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b5c4:	441c      	add	r4, r3
 801b5c6:	9b01      	ldr	r3, [sp, #4]
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	f340 8092 	ble.w	801b6f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b5ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b5d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b5d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b5d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b5dc:	eef0 6a62 	vmov.f32	s13, s5
 801b5e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b5e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b5e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b5ec:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b5f0:	eef0 6a43 	vmov.f32	s13, s6
 801b5f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b5f8:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b5fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b600:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b604:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b608:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b60c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b610:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b614:	ee12 2a90 	vmov	r2, s5
 801b618:	eef0 2a47 	vmov.f32	s5, s14
 801b61c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b620:	ee13 2a10 	vmov	r2, s6
 801b624:	9311      	str	r3, [sp, #68]	; 0x44
 801b626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b628:	eeb0 3a67 	vmov.f32	s6, s15
 801b62c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b630:	9312      	str	r3, [sp, #72]	; 0x48
 801b632:	9b01      	ldr	r3, [sp, #4]
 801b634:	9a03      	ldr	r2, [sp, #12]
 801b636:	3b01      	subs	r3, #1
 801b638:	9301      	str	r3, [sp, #4]
 801b63a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b63c:	bf08      	it	eq
 801b63e:	4613      	moveq	r3, r2
 801b640:	e73a      	b.n	801b4b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b642:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b646:	d44e      	bmi.n	801b6e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b648:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b64c:	4556      	cmp	r6, sl
 801b64e:	dd4a      	ble.n	801b6e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b650:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801b654:	d447      	bmi.n	801b6e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b656:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801b65a:	4559      	cmp	r1, fp
 801b65c:	dd43      	ble.n	801b6e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b65e:	fa0f f986 	sxth.w	r9, r6
 801b662:	9902      	ldr	r1, [sp, #8]
 801b664:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b668:	fb0b 1909 	mla	r9, fp, r9, r1
 801b66c:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b670:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b674:	fb1b fb05 	smulbb	fp, fp, r5
 801b678:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b67c:	eb0e 0a09 	add.w	sl, lr, r9
 801b680:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801b684:	fb09 b908 	mla	r9, r9, r8, fp
 801b688:	fa1f f989 	uxth.w	r9, r9
 801b68c:	f109 0b01 	add.w	fp, r9, #1
 801b690:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b694:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b698:	f804 9006 	strb.w	r9, [r4, r6]
 801b69c:	4426      	add	r6, r4
 801b69e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b6a2:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b6a6:	fb1b fb05 	smulbb	fp, fp, r5
 801b6aa:	fb09 b908 	mla	r9, r9, r8, fp
 801b6ae:	fa1f f989 	uxth.w	r9, r9
 801b6b2:	f109 0b01 	add.w	fp, r9, #1
 801b6b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b6ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6be:	f886 9001 	strb.w	r9, [r6, #1]
 801b6c2:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b6c6:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b6ca:	fb1a fa05 	smulbb	sl, sl, r5
 801b6ce:	fb09 a908 	mla	r9, r9, r8, sl
 801b6d2:	fa1f f989 	uxth.w	r9, r9
 801b6d6:	f109 0a01 	add.w	sl, r9, #1
 801b6da:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b6de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6e2:	f886 9002 	strb.w	r9, [r6, #2]
 801b6e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b6e8:	3701      	adds	r7, #1
 801b6ea:	4408      	add	r0, r1
 801b6ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b6ee:	440a      	add	r2, r1
 801b6f0:	e761      	b.n	801b5b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b6f2:	b005      	add	sp, #20
 801b6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b6f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6fc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b6fe:	4693      	mov	fp, r2
 801b700:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b706:	6868      	ldr	r0, [r5, #4]
 801b708:	6877      	ldr	r7, [r6, #4]
 801b70a:	9100      	str	r1, [sp, #0]
 801b70c:	3704      	adds	r7, #4
 801b70e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b712:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801b716:	fb00 2404 	mla	r4, r0, r4, r2
 801b71a:	682a      	ldr	r2, [r5, #0]
 801b71c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b720:	4414      	add	r4, r2
 801b722:	6832      	ldr	r2, [r6, #0]
 801b724:	9201      	str	r2, [sp, #4]
 801b726:	9a00      	ldr	r2, [sp, #0]
 801b728:	2a00      	cmp	r2, #0
 801b72a:	dc03      	bgt.n	801b734 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b72c:	f1bb 0f00 	cmp.w	fp, #0
 801b730:	f340 80bc 	ble.w	801b8ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b736:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801b73a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b73e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b740:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801b744:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b748:	2b00      	cmp	r3, #0
 801b74a:	dd0c      	ble.n	801b766 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b74c:	1405      	asrs	r5, r0, #16
 801b74e:	d405      	bmi.n	801b75c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b750:	4555      	cmp	r5, sl
 801b752:	da03      	bge.n	801b75c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b754:	1415      	asrs	r5, r2, #16
 801b756:	d401      	bmi.n	801b75c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b758:	454d      	cmp	r5, r9
 801b75a:	db05      	blt.n	801b768 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b75c:	4440      	add	r0, r8
 801b75e:	4472      	add	r2, lr
 801b760:	3b01      	subs	r3, #1
 801b762:	3403      	adds	r4, #3
 801b764:	e7f0      	b.n	801b748 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b766:	d03f      	beq.n	801b7e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801b768:	1e5d      	subs	r5, r3, #1
 801b76a:	fb08 0c05 	mla	ip, r8, r5, r0
 801b76e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801b772:	d42e      	bmi.n	801b7d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b774:	45d4      	cmp	ip, sl
 801b776:	da2c      	bge.n	801b7d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b778:	fb0e 2505 	mla	r5, lr, r5, r2
 801b77c:	142d      	asrs	r5, r5, #16
 801b77e:	d428      	bmi.n	801b7d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b780:	454d      	cmp	r5, r9
 801b782:	da26      	bge.n	801b7d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b784:	1ce5      	adds	r5, r4, #3
 801b786:	469c      	mov	ip, r3
 801b788:	f1bc 0f00 	cmp.w	ip, #0
 801b78c:	f105 0503 	add.w	r5, r5, #3
 801b790:	dd25      	ble.n	801b7de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801b792:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b796:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b79a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b79e:	4472      	add	r2, lr
 801b7a0:	468a      	mov	sl, r1
 801b7a2:	9901      	ldr	r1, [sp, #4]
 801b7a4:	fb0a 1909 	mla	r9, sl, r9, r1
 801b7a8:	1401      	asrs	r1, r0, #16
 801b7aa:	4440      	add	r0, r8
 801b7ac:	f819 9001 	ldrb.w	r9, [r9, r1]
 801b7b0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b7b4:	eb07 0a09 	add.w	sl, r7, r9
 801b7b8:	f817 9009 	ldrb.w	r9, [r7, r9]
 801b7bc:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b7c0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b7c4:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b7c8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b7cc:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b7d0:	e7da      	b.n	801b788 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b7d2:	2500      	movs	r5, #0
 801b7d4:	eba3 0c05 	sub.w	ip, r3, r5
 801b7d8:	f1bc 0f00 	cmp.w	ip, #0
 801b7dc:	dc3b      	bgt.n	801b856 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b7de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b7e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b7e6:	441c      	add	r4, r3
 801b7e8:	9b00      	ldr	r3, [sp, #0]
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	dd5e      	ble.n	801b8ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b7ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b7f8:	eeb0 6a62 	vmov.f32	s12, s5
 801b7fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b800:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b804:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b808:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b80c:	eeb0 6a43 	vmov.f32	s12, s6
 801b810:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b814:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801b818:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b81c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b820:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b824:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b828:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b82c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b830:	ee12 2a90 	vmov	r2, s5
 801b834:	eef0 2a47 	vmov.f32	s5, s14
 801b838:	fb92 f8f3 	sdiv	r8, r2, r3
 801b83c:	ee13 2a10 	vmov	r2, s6
 801b840:	eeb0 3a67 	vmov.f32	s6, s15
 801b844:	fb92 fef3 	sdiv	lr, r2, r3
 801b848:	9b00      	ldr	r3, [sp, #0]
 801b84a:	3b01      	subs	r3, #1
 801b84c:	9300      	str	r3, [sp, #0]
 801b84e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b850:	bf08      	it	eq
 801b852:	465b      	moveq	r3, fp
 801b854:	e767      	b.n	801b726 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b856:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b85a:	d423      	bmi.n	801b8a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b85c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801b860:	45cc      	cmp	ip, r9
 801b862:	dd1f      	ble.n	801b8a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b864:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b868:	d41c      	bmi.n	801b8a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b86a:	68f1      	ldr	r1, [r6, #12]
 801b86c:	4551      	cmp	r1, sl
 801b86e:	dd19      	ble.n	801b8a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b870:	fa0f fc8c 	sxth.w	ip, ip
 801b874:	9901      	ldr	r1, [sp, #4]
 801b876:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801b87a:	f81c c009 	ldrb.w	ip, [ip, r9]
 801b87e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b882:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801b886:	eb07 090c 	add.w	r9, r7, ip
 801b88a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801b88e:	f804 a00c 	strb.w	sl, [r4, ip]
 801b892:	44a4      	add	ip, r4
 801b894:	f899 a001 	ldrb.w	sl, [r9, #1]
 801b898:	f88c a001 	strb.w	sl, [ip, #1]
 801b89c:	f899 9002 	ldrb.w	r9, [r9, #2]
 801b8a0:	f88c 9002 	strb.w	r9, [ip, #2]
 801b8a4:	4440      	add	r0, r8
 801b8a6:	4472      	add	r2, lr
 801b8a8:	3501      	adds	r5, #1
 801b8aa:	e793      	b.n	801b7d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801b8ac:	b003      	add	sp, #12
 801b8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b8b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b8b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8b6:	b085      	sub	sp, #20
 801b8b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b8bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b8be:	9202      	str	r2, [sp, #8]
 801b8c0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b8c4:	6860      	ldr	r0, [r4, #4]
 801b8c6:	9203      	str	r2, [sp, #12]
 801b8c8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b8cc:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801b8d0:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b8d4:	fb00 2505 	mla	r5, r0, r5, r2
 801b8d8:	6822      	ldr	r2, [r4, #0]
 801b8da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b8de:	4415      	add	r5, r2
 801b8e0:	f8dc 2000 	ldr.w	r2, [ip]
 801b8e4:	9200      	str	r2, [sp, #0]
 801b8e6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b8ea:	3204      	adds	r2, #4
 801b8ec:	9201      	str	r2, [sp, #4]
 801b8ee:	2900      	cmp	r1, #0
 801b8f0:	dc03      	bgt.n	801b8fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b8f2:	9a02      	ldr	r2, [sp, #8]
 801b8f4:	2a00      	cmp	r2, #0
 801b8f6:	f340 8127 	ble.w	801bb48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801b8fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b8fc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b900:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b904:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b906:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b90a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b90e:	2b00      	cmp	r3, #0
 801b910:	dd0d      	ble.n	801b92e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b912:	1422      	asrs	r2, r4, #16
 801b914:	d405      	bmi.n	801b922 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b916:	4542      	cmp	r2, r8
 801b918:	da03      	bge.n	801b922 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b91a:	1402      	asrs	r2, r0, #16
 801b91c:	d401      	bmi.n	801b922 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b91e:	42ba      	cmp	r2, r7
 801b920:	db06      	blt.n	801b930 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b924:	4474      	add	r4, lr
 801b926:	3b01      	subs	r3, #1
 801b928:	3503      	adds	r5, #3
 801b92a:	4410      	add	r0, r2
 801b92c:	e7ef      	b.n	801b90e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b92e:	d075      	beq.n	801ba1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801b930:	1e5a      	subs	r2, r3, #1
 801b932:	fb0e 4602 	mla	r6, lr, r2, r4
 801b936:	1436      	asrs	r6, r6, #16
 801b938:	d465      	bmi.n	801ba06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b93a:	4546      	cmp	r6, r8
 801b93c:	da63      	bge.n	801ba06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b93e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b940:	fb06 0202 	mla	r2, r6, r2, r0
 801b944:	1412      	asrs	r2, r2, #16
 801b946:	d45e      	bmi.n	801ba06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b948:	42ba      	cmp	r2, r7
 801b94a:	da5c      	bge.n	801ba06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b94c:	1cef      	adds	r7, r5, #3
 801b94e:	4699      	mov	r9, r3
 801b950:	f1b9 0f00 	cmp.w	r9, #0
 801b954:	dd5d      	ble.n	801ba12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801b956:	1402      	asrs	r2, r0, #16
 801b958:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b95c:	1426      	asrs	r6, r4, #16
 801b95e:	4692      	mov	sl, r2
 801b960:	9a00      	ldr	r2, [sp, #0]
 801b962:	fb08 220a 	mla	r2, r8, sl, r2
 801b966:	5d92      	ldrb	r2, [r2, r6]
 801b968:	9e01      	ldr	r6, [sp, #4]
 801b96a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801b96e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801b972:	d041      	beq.n	801b9f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b974:	9a03      	ldr	r2, [sp, #12]
 801b976:	fa5f fb86 	uxtb.w	fp, r6
 801b97a:	fb02 f808 	mul.w	r8, r2, r8
 801b97e:	f108 0201 	add.w	r2, r8, #1
 801b982:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801b986:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801b98a:	1212      	asrs	r2, r2, #8
 801b98c:	fa1f fa82 	uxth.w	sl, r2
 801b990:	43d2      	mvns	r2, r2
 801b992:	fb1b fb0a 	smulbb	fp, fp, sl
 801b996:	b2d2      	uxtb	r2, r2
 801b998:	fb08 b802 	mla	r8, r8, r2, fp
 801b99c:	fa1f f888 	uxth.w	r8, r8
 801b9a0:	f108 0b01 	add.w	fp, r8, #1
 801b9a4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b9a8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b9ac:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b9b0:	fb1b fb0a 	smulbb	fp, fp, sl
 801b9b4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b9b8:	fb16 fa0a 	smulbb	sl, r6, sl
 801b9bc:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b9c0:	f807 8c03 	strb.w	r8, [r7, #-3]
 801b9c4:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801b9c8:	fb06 aa02 	mla	sl, r6, r2, sl
 801b9cc:	fb08 b802 	mla	r8, r8, r2, fp
 801b9d0:	fa1f fa8a 	uxth.w	sl, sl
 801b9d4:	fa1f f888 	uxth.w	r8, r8
 801b9d8:	f10a 0601 	add.w	r6, sl, #1
 801b9dc:	f108 0b01 	add.w	fp, r8, #1
 801b9e0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b9e4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b9e8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b9ec:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b9f0:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b9f4:	f807 8c02 	strb.w	r8, [r7, #-2]
 801b9f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9fa:	4474      	add	r4, lr
 801b9fc:	3703      	adds	r7, #3
 801b9fe:	f109 39ff 	add.w	r9, r9, #4294967295
 801ba02:	4410      	add	r0, r2
 801ba04:	e7a4      	b.n	801b950 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ba06:	f04f 0800 	mov.w	r8, #0
 801ba0a:	eba3 0208 	sub.w	r2, r3, r8
 801ba0e:	2a00      	cmp	r2, #0
 801ba10:	dc3b      	bgt.n	801ba8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801ba12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba1a:	441d      	add	r5, r3
 801ba1c:	2900      	cmp	r1, #0
 801ba1e:	f340 8093 	ble.w	801bb48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ba22:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba28:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba2c:	3901      	subs	r1, #1
 801ba2e:	eeb0 6a62 	vmov.f32	s12, s5
 801ba32:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba36:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba3e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ba42:	eeb0 6a43 	vmov.f32	s12, s6
 801ba46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba4a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ba4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba52:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba56:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba66:	ee12 2a90 	vmov	r2, s5
 801ba6a:	eef0 2a47 	vmov.f32	s5, s14
 801ba6e:	fb92 fef3 	sdiv	lr, r2, r3
 801ba72:	ee13 2a10 	vmov	r2, s6
 801ba76:	eeb0 3a67 	vmov.f32	s6, s15
 801ba7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba7e:	9a02      	ldr	r2, [sp, #8]
 801ba80:	9312      	str	r3, [sp, #72]	; 0x48
 801ba82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba84:	bf08      	it	eq
 801ba86:	4613      	moveq	r3, r2
 801ba88:	e731      	b.n	801b8ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ba8a:	1427      	asrs	r7, r4, #16
 801ba8c:	d456      	bmi.n	801bb3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ba8e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ba92:	42be      	cmp	r6, r7
 801ba94:	dd52      	ble.n	801bb3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ba96:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ba9a:	d44f      	bmi.n	801bb3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ba9c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801baa0:	454a      	cmp	r2, r9
 801baa2:	dd4b      	ble.n	801bb3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801baa4:	9a00      	ldr	r2, [sp, #0]
 801baa6:	b236      	sxth	r6, r6
 801baa8:	fb09 2606 	mla	r6, r9, r6, r2
 801baac:	5df2      	ldrb	r2, [r6, r7]
 801baae:	9e01      	ldr	r6, [sp, #4]
 801bab0:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801bab4:	0e3a      	lsrs	r2, r7, #24
 801bab6:	d041      	beq.n	801bb3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bab8:	9e03      	ldr	r6, [sp, #12]
 801baba:	fa5f fb87 	uxtb.w	fp, r7
 801babe:	4372      	muls	r2, r6
 801bac0:	1c56      	adds	r6, r2, #1
 801bac2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bac6:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801baca:	1212      	asrs	r2, r2, #8
 801bacc:	f815 9006 	ldrb.w	r9, [r5, r6]
 801bad0:	fa1f fa82 	uxth.w	sl, r2
 801bad4:	43d2      	mvns	r2, r2
 801bad6:	fb1b fb0a 	smulbb	fp, fp, sl
 801bada:	b2d2      	uxtb	r2, r2
 801badc:	fb09 b902 	mla	r9, r9, r2, fp
 801bae0:	fa1f f989 	uxth.w	r9, r9
 801bae4:	f109 0b01 	add.w	fp, r9, #1
 801bae8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801baec:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801baf0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801baf4:	fb1b fb0a 	smulbb	fp, fp, sl
 801baf8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bafc:	fb17 fa0a 	smulbb	sl, r7, sl
 801bb00:	f805 9006 	strb.w	r9, [r5, r6]
 801bb04:	442e      	add	r6, r5
 801bb06:	78b7      	ldrb	r7, [r6, #2]
 801bb08:	f896 9001 	ldrb.w	r9, [r6, #1]
 801bb0c:	fb07 aa02 	mla	sl, r7, r2, sl
 801bb10:	fb09 b902 	mla	r9, r9, r2, fp
 801bb14:	fa1f fa8a 	uxth.w	sl, sl
 801bb18:	fa1f f989 	uxth.w	r9, r9
 801bb1c:	f10a 0701 	add.w	r7, sl, #1
 801bb20:	f109 0b01 	add.w	fp, r9, #1
 801bb24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bb28:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bb2c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bb30:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bb34:	f886 a002 	strb.w	sl, [r6, #2]
 801bb38:	f886 9001 	strb.w	r9, [r6, #1]
 801bb3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bb3e:	4474      	add	r4, lr
 801bb40:	f108 0801 	add.w	r8, r8, #1
 801bb44:	4410      	add	r0, r2
 801bb46:	e760      	b.n	801ba0a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801bb48:	b005      	add	sp, #20
 801bb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bb4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb52:	b085      	sub	sp, #20
 801bb54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb58:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801bb5a:	9203      	str	r2, [sp, #12]
 801bb5c:	6868      	ldr	r0, [r5, #4]
 801bb5e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801bb62:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801bb66:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bb6a:	fb00 2404 	mla	r4, r0, r4, r2
 801bb6e:	682a      	ldr	r2, [r5, #0]
 801bb70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bb74:	4414      	add	r4, r2
 801bb76:	f8dc 2000 	ldr.w	r2, [ip]
 801bb7a:	9201      	str	r2, [sp, #4]
 801bb7c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801bb80:	3204      	adds	r2, #4
 801bb82:	9202      	str	r2, [sp, #8]
 801bb84:	2900      	cmp	r1, #0
 801bb86:	dc03      	bgt.n	801bb90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801bb88:	9a03      	ldr	r2, [sp, #12]
 801bb8a:	2a00      	cmp	r2, #0
 801bb8c:	f340 8137 	ble.w	801bdfe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bb90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bb92:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bb96:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bb9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bb9c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bba0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	dd0d      	ble.n	801bbc4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bba8:	1405      	asrs	r5, r0, #16
 801bbaa:	d405      	bmi.n	801bbb8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bbac:	4545      	cmp	r5, r8
 801bbae:	da03      	bge.n	801bbb8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bbb0:	1415      	asrs	r5, r2, #16
 801bbb2:	d401      	bmi.n	801bbb8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bbb4:	42bd      	cmp	r5, r7
 801bbb6:	db06      	blt.n	801bbc6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bbb8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bbba:	4470      	add	r0, lr
 801bbbc:	3b01      	subs	r3, #1
 801bbbe:	3403      	adds	r4, #3
 801bbc0:	442a      	add	r2, r5
 801bbc2:	e7ef      	b.n	801bba4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801bbc4:	d070      	beq.n	801bca8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801bbc6:	1e5d      	subs	r5, r3, #1
 801bbc8:	fb0e 0605 	mla	r6, lr, r5, r0
 801bbcc:	1436      	asrs	r6, r6, #16
 801bbce:	d462      	bmi.n	801bc96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bbd0:	4546      	cmp	r6, r8
 801bbd2:	da60      	bge.n	801bc96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bbd4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bbd6:	fb06 2505 	mla	r5, r6, r5, r2
 801bbda:	142d      	asrs	r5, r5, #16
 801bbdc:	d45b      	bmi.n	801bc96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bbde:	42bd      	cmp	r5, r7
 801bbe0:	da59      	bge.n	801bc96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801bbe2:	1ce5      	adds	r5, r4, #3
 801bbe4:	469a      	mov	sl, r3
 801bbe6:	f1ba 0f00 	cmp.w	sl, #0
 801bbea:	dd58      	ble.n	801bc9e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801bbec:	1416      	asrs	r6, r2, #16
 801bbee:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bbf2:	1407      	asrs	r7, r0, #16
 801bbf4:	46b1      	mov	r9, r6
 801bbf6:	9e01      	ldr	r6, [sp, #4]
 801bbf8:	fb08 6609 	mla	r6, r8, r9, r6
 801bbfc:	5df6      	ldrb	r6, [r6, r7]
 801bbfe:	9f02      	ldr	r7, [sp, #8]
 801bc00:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801bc04:	0e37      	lsrs	r7, r6, #24
 801bc06:	2fff      	cmp	r7, #255	; 0xff
 801bc08:	f000 80f0 	beq.w	801bdec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801bc0c:	fa5f f887 	uxtb.w	r8, r7
 801bc10:	b3d7      	cbz	r7, 801bc88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801bc12:	fa1f f788 	uxth.w	r7, r8
 801bc16:	ea6f 0808 	mvn.w	r8, r8
 801bc1a:	fa5f fb86 	uxtb.w	fp, r6
 801bc1e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801bc22:	fa5f f888 	uxtb.w	r8, r8
 801bc26:	fb1b fb07 	smulbb	fp, fp, r7
 801bc2a:	fb09 b908 	mla	r9, r9, r8, fp
 801bc2e:	fa1f f989 	uxth.w	r9, r9
 801bc32:	f109 0b01 	add.w	fp, r9, #1
 801bc36:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bc3a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801bc3e:	fb1b fb08 	smulbb	fp, fp, r8
 801bc42:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bc46:	f805 9c03 	strb.w	r9, [r5, #-3]
 801bc4a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801bc4e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bc52:	fb09 b907 	mla	r9, r9, r7, fp
 801bc56:	fa1f f989 	uxth.w	r9, r9
 801bc5a:	f109 0b01 	add.w	fp, r9, #1
 801bc5e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bc62:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bc66:	f805 9c02 	strb.w	r9, [r5, #-2]
 801bc6a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801bc6e:	fb19 f808 	smulbb	r8, r9, r8
 801bc72:	fb06 8607 	mla	r6, r6, r7, r8
 801bc76:	b2b6      	uxth	r6, r6
 801bc78:	f106 0801 	add.w	r8, r6, #1
 801bc7c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801bc80:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bc84:	f805 8c01 	strb.w	r8, [r5, #-1]
 801bc88:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bc8a:	4470      	add	r0, lr
 801bc8c:	3503      	adds	r5, #3
 801bc8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bc92:	4432      	add	r2, r6
 801bc94:	e7a7      	b.n	801bbe6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bc96:	2600      	movs	r6, #0
 801bc98:	1b9d      	subs	r5, r3, r6
 801bc9a:	2d00      	cmp	r5, #0
 801bc9c:	dc3b      	bgt.n	801bd16 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801bc9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bca2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bca6:	441c      	add	r4, r3
 801bca8:	2900      	cmp	r1, #0
 801bcaa:	f340 80a8 	ble.w	801bdfe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bcae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bcb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bcb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bcb8:	3901      	subs	r1, #1
 801bcba:	eeb0 6a62 	vmov.f32	s12, s5
 801bcbe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bcc2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bcc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcca:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bcce:	eeb0 6a43 	vmov.f32	s12, s6
 801bcd2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcd6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bcda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bcde:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bce2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bce6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bcea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bcee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bcf2:	ee12 2a90 	vmov	r2, s5
 801bcf6:	eef0 2a47 	vmov.f32	s5, s14
 801bcfa:	fb92 fef3 	sdiv	lr, r2, r3
 801bcfe:	ee13 2a10 	vmov	r2, s6
 801bd02:	eeb0 3a67 	vmov.f32	s6, s15
 801bd06:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd0a:	9a03      	ldr	r2, [sp, #12]
 801bd0c:	9312      	str	r3, [sp, #72]	; 0x48
 801bd0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd10:	bf08      	it	eq
 801bd12:	4613      	moveq	r3, r2
 801bd14:	e736      	b.n	801bb84 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801bd16:	ea5f 4820 	movs.w	r8, r0, asr #16
 801bd1a:	d457      	bmi.n	801bdcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bd1c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801bd20:	4547      	cmp	r7, r8
 801bd22:	dd53      	ble.n	801bdcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bd24:	ea5f 4922 	movs.w	r9, r2, asr #16
 801bd28:	d450      	bmi.n	801bdcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bd2a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801bd2e:	454d      	cmp	r5, r9
 801bd30:	dd4c      	ble.n	801bdcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bd32:	9d01      	ldr	r5, [sp, #4]
 801bd34:	b23f      	sxth	r7, r7
 801bd36:	fb09 5707 	mla	r7, r9, r7, r5
 801bd3a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801bd3e:	9f02      	ldr	r7, [sp, #8]
 801bd40:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801bd44:	0e2f      	lsrs	r7, r5, #24
 801bd46:	2fff      	cmp	r7, #255	; 0xff
 801bd48:	d045      	beq.n	801bdd6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801bd4a:	fa5f f987 	uxtb.w	r9, r7
 801bd4e:	b3ef      	cbz	r7, 801bdcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bd50:	fa1f f889 	uxth.w	r8, r9
 801bd54:	ea6f 0909 	mvn.w	r9, r9
 801bd58:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801bd5c:	fa5f fb85 	uxtb.w	fp, r5
 801bd60:	f814 a007 	ldrb.w	sl, [r4, r7]
 801bd64:	fa5f f989 	uxtb.w	r9, r9
 801bd68:	fb1b fb08 	smulbb	fp, fp, r8
 801bd6c:	fb0a ba09 	mla	sl, sl, r9, fp
 801bd70:	fa1f fa8a 	uxth.w	sl, sl
 801bd74:	f10a 0b01 	add.w	fp, sl, #1
 801bd78:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bd7c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bd80:	f804 a007 	strb.w	sl, [r4, r7]
 801bd84:	4427      	add	r7, r4
 801bd86:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801bd8a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801bd8e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801bd92:	fb1b fb09 	smulbb	fp, fp, r9
 801bd96:	fb0a ba08 	mla	sl, sl, r8, fp
 801bd9a:	fa1f fa8a 	uxth.w	sl, sl
 801bd9e:	f10a 0b01 	add.w	fp, sl, #1
 801bda2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801bda6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bdaa:	f887 a001 	strb.w	sl, [r7, #1]
 801bdae:	f897 a002 	ldrb.w	sl, [r7, #2]
 801bdb2:	fb1a f909 	smulbb	r9, sl, r9
 801bdb6:	fb05 9508 	mla	r5, r5, r8, r9
 801bdba:	b2ad      	uxth	r5, r5
 801bdbc:	f105 0901 	add.w	r9, r5, #1
 801bdc0:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801bdc4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bdc8:	f887 9002 	strb.w	r9, [r7, #2]
 801bdcc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bdce:	4470      	add	r0, lr
 801bdd0:	3601      	adds	r6, #1
 801bdd2:	442a      	add	r2, r5
 801bdd4:	e760      	b.n	801bc98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801bdd6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801bdda:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801bdde:	55e5      	strb	r5, [r4, r7]
 801bde0:	4427      	add	r7, r4
 801bde2:	0c2d      	lsrs	r5, r5, #16
 801bde4:	f887 8001 	strb.w	r8, [r7, #1]
 801bde8:	70bd      	strb	r5, [r7, #2]
 801bdea:	e7ef      	b.n	801bdcc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801bdec:	0a37      	lsrs	r7, r6, #8
 801bdee:	f805 6c03 	strb.w	r6, [r5, #-3]
 801bdf2:	0c36      	lsrs	r6, r6, #16
 801bdf4:	f805 7c02 	strb.w	r7, [r5, #-2]
 801bdf8:	f805 6c01 	strb.w	r6, [r5, #-1]
 801bdfc:	e744      	b.n	801bc88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801bdfe:	b005      	add	sp, #20
 801be00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be04 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be08:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801be0a:	9201      	str	r2, [sp, #4]
 801be0c:	6870      	ldr	r0, [r6, #4]
 801be0e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801be12:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801be16:	fa1f fe85 	uxth.w	lr, r5
 801be1a:	43ed      	mvns	r5, r5
 801be1c:	f8dc 8000 	ldr.w	r8, [ip]
 801be20:	b2ed      	uxtb	r5, r5
 801be22:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801be26:	fb00 2404 	mla	r4, r0, r4, r2
 801be2a:	6832      	ldr	r2, [r6, #0]
 801be2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801be30:	4414      	add	r4, r2
 801be32:	2900      	cmp	r1, #0
 801be34:	dc03      	bgt.n	801be3e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801be36:	9a01      	ldr	r2, [sp, #4]
 801be38:	2a00      	cmp	r2, #0
 801be3a:	f340 810d 	ble.w	801c058 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801be3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801be40:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801be44:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801be48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801be4a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801be4e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801be52:	2b00      	cmp	r3, #0
 801be54:	dd0e      	ble.n	801be74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801be56:	1406      	asrs	r6, r0, #16
 801be58:	d405      	bmi.n	801be66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801be5a:	4556      	cmp	r6, sl
 801be5c:	da03      	bge.n	801be66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801be5e:	1416      	asrs	r6, r2, #16
 801be60:	d401      	bmi.n	801be66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801be62:	454e      	cmp	r6, r9
 801be64:	db07      	blt.n	801be76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801be66:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801be68:	3b01      	subs	r3, #1
 801be6a:	3403      	adds	r4, #3
 801be6c:	4430      	add	r0, r6
 801be6e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801be70:	4432      	add	r2, r6
 801be72:	e7ee      	b.n	801be52 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801be74:	d060      	beq.n	801bf38 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801be76:	1e5e      	subs	r6, r3, #1
 801be78:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801be7a:	fb07 0706 	mla	r7, r7, r6, r0
 801be7e:	143f      	asrs	r7, r7, #16
 801be80:	d451      	bmi.n	801bf26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801be82:	4557      	cmp	r7, sl
 801be84:	da4f      	bge.n	801bf26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801be86:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801be88:	fb07 2606 	mla	r6, r7, r6, r2
 801be8c:	1436      	asrs	r6, r6, #16
 801be8e:	d44a      	bmi.n	801bf26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801be90:	454e      	cmp	r6, r9
 801be92:	da48      	bge.n	801bf26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801be94:	1ce6      	adds	r6, r4, #3
 801be96:	4699      	mov	r9, r3
 801be98:	f1b9 0f00 	cmp.w	r9, #0
 801be9c:	f106 0603 	add.w	r6, r6, #3
 801bea0:	dd45      	ble.n	801bf2e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801bea2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801bea6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801beaa:	1417      	asrs	r7, r2, #16
 801beac:	f109 39ff 	add.w	r9, r9, #4294967295
 801beb0:	fb0b a707 	mla	r7, fp, r7, sl
 801beb4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801beb8:	fb1b fb05 	smulbb	fp, fp, r5
 801bebc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bec0:	eb08 0a07 	add.w	sl, r8, r7
 801bec4:	f818 7007 	ldrb.w	r7, [r8, r7]
 801bec8:	fb07 b70e 	mla	r7, r7, lr, fp
 801becc:	b2bf      	uxth	r7, r7
 801bece:	f107 0b01 	add.w	fp, r7, #1
 801bed2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bed6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801beda:	fb1b fb05 	smulbb	fp, fp, r5
 801bede:	123f      	asrs	r7, r7, #8
 801bee0:	f806 7c06 	strb.w	r7, [r6, #-6]
 801bee4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801bee8:	fb07 b70e 	mla	r7, r7, lr, fp
 801beec:	b2bf      	uxth	r7, r7
 801beee:	f107 0b01 	add.w	fp, r7, #1
 801bef2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bef6:	123f      	asrs	r7, r7, #8
 801bef8:	f806 7c05 	strb.w	r7, [r6, #-5]
 801befc:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801bf00:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801bf04:	fb1a fa05 	smulbb	sl, sl, r5
 801bf08:	fb07 a70e 	mla	r7, r7, lr, sl
 801bf0c:	b2bf      	uxth	r7, r7
 801bf0e:	f107 0a01 	add.w	sl, r7, #1
 801bf12:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801bf16:	123f      	asrs	r7, r7, #8
 801bf18:	f806 7c04 	strb.w	r7, [r6, #-4]
 801bf1c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bf1e:	4438      	add	r0, r7
 801bf20:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bf22:	443a      	add	r2, r7
 801bf24:	e7b8      	b.n	801be98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bf26:	2700      	movs	r7, #0
 801bf28:	1bde      	subs	r6, r3, r7
 801bf2a:	2e00      	cmp	r6, #0
 801bf2c:	dc3f      	bgt.n	801bfae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801bf2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf36:	441c      	add	r4, r3
 801bf38:	2900      	cmp	r1, #0
 801bf3a:	f340 808d 	ble.w	801c058 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801bf3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bf42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf44:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf48:	3901      	subs	r1, #1
 801bf4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf4e:	eef0 6a62 	vmov.f32	s13, s5
 801bf52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bf56:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bf5e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801bf62:	eef0 6a43 	vmov.f32	s13, s6
 801bf66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bf6a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801bf6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf72:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf76:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf86:	ee12 2a90 	vmov	r2, s5
 801bf8a:	eef0 2a47 	vmov.f32	s5, s14
 801bf8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf92:	ee13 2a10 	vmov	r2, s6
 801bf96:	930f      	str	r3, [sp, #60]	; 0x3c
 801bf98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf9a:	eeb0 3a67 	vmov.f32	s6, s15
 801bf9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfa2:	9a01      	ldr	r2, [sp, #4]
 801bfa4:	9310      	str	r3, [sp, #64]	; 0x40
 801bfa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bfa8:	bf08      	it	eq
 801bfaa:	4613      	moveq	r3, r2
 801bfac:	e741      	b.n	801be32 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801bfae:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bfb2:	d44b      	bmi.n	801c04c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bfb4:	f8dc b008 	ldr.w	fp, [ip, #8]
 801bfb8:	45cb      	cmp	fp, r9
 801bfba:	dd47      	ble.n	801c04c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bfbc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bfc0:	d444      	bmi.n	801c04c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bfc2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801bfc6:	4556      	cmp	r6, sl
 801bfc8:	dd40      	ble.n	801c04c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bfca:	fa0f f68b 	sxth.w	r6, fp
 801bfce:	fb0a 9906 	mla	r9, sl, r6, r9
 801bfd2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801bfd6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801bfda:	f814 b006 	ldrb.w	fp, [r4, r6]
 801bfde:	fb1b fb05 	smulbb	fp, fp, r5
 801bfe2:	eb08 0a09 	add.w	sl, r8, r9
 801bfe6:	f818 9009 	ldrb.w	r9, [r8, r9]
 801bfea:	fb09 b90e 	mla	r9, r9, lr, fp
 801bfee:	fa1f f989 	uxth.w	r9, r9
 801bff2:	f109 0b01 	add.w	fp, r9, #1
 801bff6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bffa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bffe:	f804 9006 	strb.w	r9, [r4, r6]
 801c002:	4426      	add	r6, r4
 801c004:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c008:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c00c:	fb1b fb05 	smulbb	fp, fp, r5
 801c010:	fb09 b90e 	mla	r9, r9, lr, fp
 801c014:	fa1f f989 	uxth.w	r9, r9
 801c018:	f109 0b01 	add.w	fp, r9, #1
 801c01c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c020:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c024:	f886 9001 	strb.w	r9, [r6, #1]
 801c028:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c02c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c030:	fb1a fa05 	smulbb	sl, sl, r5
 801c034:	fb09 a90e 	mla	r9, r9, lr, sl
 801c038:	fa1f f989 	uxth.w	r9, r9
 801c03c:	f109 0a01 	add.w	sl, r9, #1
 801c040:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c044:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c048:	f886 9002 	strb.w	r9, [r6, #2]
 801c04c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c04e:	3701      	adds	r7, #1
 801c050:	4430      	add	r0, r6
 801c052:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c054:	4432      	add	r2, r6
 801c056:	e767      	b.n	801bf28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801c058:	b003      	add	sp, #12
 801c05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c05e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c05e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c062:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c068:	9201      	str	r2, [sp, #4]
 801c06a:	6868      	ldr	r0, [r5, #4]
 801c06c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801c06e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c072:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801c076:	fb00 2404 	mla	r4, r0, r4, r2
 801c07a:	682a      	ldr	r2, [r5, #0]
 801c07c:	f8d7 8000 	ldr.w	r8, [r7]
 801c080:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c084:	4414      	add	r4, r2
 801c086:	2900      	cmp	r1, #0
 801c088:	dc03      	bgt.n	801c092 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c08a:	9a01      	ldr	r2, [sp, #4]
 801c08c:	2a00      	cmp	r2, #0
 801c08e:	f340 80af 	ble.w	801c1f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c092:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c094:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801c098:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c09c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c09e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801c0a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	dd0c      	ble.n	801c0c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801c0aa:	1405      	asrs	r5, r0, #16
 801c0ac:	d405      	bmi.n	801c0ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c0ae:	4555      	cmp	r5, sl
 801c0b0:	da03      	bge.n	801c0ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c0b2:	1415      	asrs	r5, r2, #16
 801c0b4:	d401      	bmi.n	801c0ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c0b6:	454d      	cmp	r5, r9
 801c0b8:	db05      	blt.n	801c0c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c0ba:	4470      	add	r0, lr
 801c0bc:	4462      	add	r2, ip
 801c0be:	3b01      	subs	r3, #1
 801c0c0:	3403      	adds	r4, #3
 801c0c2:	e7f0      	b.n	801c0a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c0c4:	d038      	beq.n	801c138 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c0c6:	1e5d      	subs	r5, r3, #1
 801c0c8:	fb0e 0605 	mla	r6, lr, r5, r0
 801c0cc:	1436      	asrs	r6, r6, #16
 801c0ce:	d42a      	bmi.n	801c126 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c0d0:	4556      	cmp	r6, sl
 801c0d2:	da28      	bge.n	801c126 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c0d4:	fb0c 2505 	mla	r5, ip, r5, r2
 801c0d8:	142d      	asrs	r5, r5, #16
 801c0da:	d424      	bmi.n	801c126 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c0dc:	454d      	cmp	r5, r9
 801c0de:	da22      	bge.n	801c126 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801c0e0:	1ce6      	adds	r6, r4, #3
 801c0e2:	4699      	mov	r9, r3
 801c0e4:	f1b9 0f00 	cmp.w	r9, #0
 801c0e8:	f106 0603 	add.w	r6, r6, #3
 801c0ec:	dd1f      	ble.n	801c12e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801c0ee:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801c0f2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c0f6:	1415      	asrs	r5, r2, #16
 801c0f8:	4470      	add	r0, lr
 801c0fa:	4462      	add	r2, ip
 801c0fc:	f109 39ff 	add.w	r9, r9, #4294967295
 801c100:	fb0b a505 	mla	r5, fp, r5, sl
 801c104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c108:	eb08 0a05 	add.w	sl, r8, r5
 801c10c:	f818 5005 	ldrb.w	r5, [r8, r5]
 801c110:	f806 5c06 	strb.w	r5, [r6, #-6]
 801c114:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801c118:	f806 5c05 	strb.w	r5, [r6, #-5]
 801c11c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801c120:	f806 5c04 	strb.w	r5, [r6, #-4]
 801c124:	e7de      	b.n	801c0e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c126:	2600      	movs	r6, #0
 801c128:	1b9d      	subs	r5, r3, r6
 801c12a:	2d00      	cmp	r5, #0
 801c12c:	dc38      	bgt.n	801c1a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c12e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c132:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c136:	441c      	add	r4, r3
 801c138:	2900      	cmp	r1, #0
 801c13a:	dd59      	ble.n	801c1f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801c13c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c142:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c146:	3901      	subs	r1, #1
 801c148:	eeb0 6a62 	vmov.f32	s12, s5
 801c14c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c150:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c154:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c158:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c15c:	eeb0 6a43 	vmov.f32	s12, s6
 801c160:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c164:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c168:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c16c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c170:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c174:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c178:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c17c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c180:	ee12 2a90 	vmov	r2, s5
 801c184:	eef0 2a47 	vmov.f32	s5, s14
 801c188:	fb92 fef3 	sdiv	lr, r2, r3
 801c18c:	ee13 2a10 	vmov	r2, s6
 801c190:	eeb0 3a67 	vmov.f32	s6, s15
 801c194:	fb92 fcf3 	sdiv	ip, r2, r3
 801c198:	9a01      	ldr	r2, [sp, #4]
 801c19a:	bf08      	it	eq
 801c19c:	4613      	moveq	r3, r2
 801c19e:	e772      	b.n	801c086 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801c1a0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c1a4:	d420      	bmi.n	801c1e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c1a6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801c1aa:	45cb      	cmp	fp, r9
 801c1ac:	dd1c      	ble.n	801c1e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c1ae:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c1b2:	d419      	bmi.n	801c1e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c1b4:	68fd      	ldr	r5, [r7, #12]
 801c1b6:	4555      	cmp	r5, sl
 801c1b8:	dd16      	ble.n	801c1e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801c1ba:	fa0f f58b 	sxth.w	r5, fp
 801c1be:	fb0a 9505 	mla	r5, sl, r5, r9
 801c1c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1c6:	f818 9005 	ldrb.w	r9, [r8, r5]
 801c1ca:	eb08 0b05 	add.w	fp, r8, r5
 801c1ce:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801c1d2:	f804 9005 	strb.w	r9, [r4, r5]
 801c1d6:	4425      	add	r5, r4
 801c1d8:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801c1dc:	f885 9001 	strb.w	r9, [r5, #1]
 801c1e0:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801c1e4:	f885 9002 	strb.w	r9, [r5, #2]
 801c1e8:	4470      	add	r0, lr
 801c1ea:	4462      	add	r2, ip
 801c1ec:	3601      	adds	r6, #1
 801c1ee:	e79b      	b.n	801c128 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801c1f0:	b003      	add	sp, #12
 801c1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c1f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c1f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1fa:	b085      	sub	sp, #20
 801c1fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c200:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c202:	9202      	str	r2, [sp, #8]
 801c204:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801c208:	6860      	ldr	r0, [r4, #4]
 801c20a:	9203      	str	r2, [sp, #12]
 801c20c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c210:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c214:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c218:	fb00 2505 	mla	r5, r0, r5, r2
 801c21c:	6822      	ldr	r2, [r4, #0]
 801c21e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c222:	4415      	add	r5, r2
 801c224:	f8dc 2000 	ldr.w	r2, [ip]
 801c228:	9201      	str	r2, [sp, #4]
 801c22a:	2900      	cmp	r1, #0
 801c22c:	dc03      	bgt.n	801c236 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c22e:	9a02      	ldr	r2, [sp, #8]
 801c230:	2a00      	cmp	r2, #0
 801c232:	f340 8122 	ble.w	801c47a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c238:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c23c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c240:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c242:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c246:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	dd0d      	ble.n	801c26a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c24e:	1422      	asrs	r2, r4, #16
 801c250:	d405      	bmi.n	801c25e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c252:	4542      	cmp	r2, r8
 801c254:	da03      	bge.n	801c25e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c256:	1402      	asrs	r2, r0, #16
 801c258:	d401      	bmi.n	801c25e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801c25a:	42ba      	cmp	r2, r7
 801c25c:	db06      	blt.n	801c26c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c25e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c260:	4474      	add	r4, lr
 801c262:	3b01      	subs	r3, #1
 801c264:	3503      	adds	r5, #3
 801c266:	4410      	add	r0, r2
 801c268:	e7ef      	b.n	801c24a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801c26a:	d072      	beq.n	801c352 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801c26c:	1e5a      	subs	r2, r3, #1
 801c26e:	fb0e 4602 	mla	r6, lr, r2, r4
 801c272:	1436      	asrs	r6, r6, #16
 801c274:	d462      	bmi.n	801c33c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c276:	4546      	cmp	r6, r8
 801c278:	da60      	bge.n	801c33c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c27a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c27c:	fb06 0202 	mla	r2, r6, r2, r0
 801c280:	1412      	asrs	r2, r2, #16
 801c282:	d45b      	bmi.n	801c33c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c284:	42ba      	cmp	r2, r7
 801c286:	da59      	bge.n	801c33c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c288:	1cef      	adds	r7, r5, #3
 801c28a:	4699      	mov	r9, r3
 801c28c:	f1b9 0f00 	cmp.w	r9, #0
 801c290:	dd5a      	ble.n	801c348 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c292:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c296:	1426      	asrs	r6, r4, #16
 801c298:	1402      	asrs	r2, r0, #16
 801c29a:	fb08 6202 	mla	r2, r8, r2, r6
 801c29e:	9e01      	ldr	r6, [sp, #4]
 801c2a0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c2a4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c2a8:	d041      	beq.n	801c32e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c2aa:	9a03      	ldr	r2, [sp, #12]
 801c2ac:	fa5f fb86 	uxtb.w	fp, r6
 801c2b0:	fb02 f808 	mul.w	r8, r2, r8
 801c2b4:	f108 0201 	add.w	r2, r8, #1
 801c2b8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c2bc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c2c0:	1212      	asrs	r2, r2, #8
 801c2c2:	fa1f fa82 	uxth.w	sl, r2
 801c2c6:	43d2      	mvns	r2, r2
 801c2c8:	fb1b fb0a 	smulbb	fp, fp, sl
 801c2cc:	b2d2      	uxtb	r2, r2
 801c2ce:	fb08 b802 	mla	r8, r8, r2, fp
 801c2d2:	fa1f f888 	uxth.w	r8, r8
 801c2d6:	f108 0b01 	add.w	fp, r8, #1
 801c2da:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c2de:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c2e2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c2e6:	fb1b fb0a 	smulbb	fp, fp, sl
 801c2ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c2ee:	fb16 fa0a 	smulbb	sl, r6, sl
 801c2f2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c2f6:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c2fa:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c2fe:	fb06 aa02 	mla	sl, r6, r2, sl
 801c302:	fb08 b802 	mla	r8, r8, r2, fp
 801c306:	fa1f fa8a 	uxth.w	sl, sl
 801c30a:	fa1f f888 	uxth.w	r8, r8
 801c30e:	f10a 0601 	add.w	r6, sl, #1
 801c312:	f108 0b01 	add.w	fp, r8, #1
 801c316:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c31a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c31e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c322:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c326:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c32a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c32e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c330:	4474      	add	r4, lr
 801c332:	3703      	adds	r7, #3
 801c334:	f109 39ff 	add.w	r9, r9, #4294967295
 801c338:	4410      	add	r0, r2
 801c33a:	e7a7      	b.n	801c28c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c33c:	f04f 0800 	mov.w	r8, #0
 801c340:	eba3 0208 	sub.w	r2, r3, r8
 801c344:	2a00      	cmp	r2, #0
 801c346:	dc3b      	bgt.n	801c3c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801c348:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c34c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c350:	441d      	add	r5, r3
 801c352:	2900      	cmp	r1, #0
 801c354:	f340 8091 	ble.w	801c47a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801c358:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c35c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c35e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c362:	3901      	subs	r1, #1
 801c364:	eeb0 6a62 	vmov.f32	s12, s5
 801c368:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c36c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c370:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c374:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c378:	eeb0 6a43 	vmov.f32	s12, s6
 801c37c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c380:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c384:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c388:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c38c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c390:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c394:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c398:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c39c:	ee12 2a90 	vmov	r2, s5
 801c3a0:	eef0 2a47 	vmov.f32	s5, s14
 801c3a4:	fb92 fef3 	sdiv	lr, r2, r3
 801c3a8:	ee13 2a10 	vmov	r2, s6
 801c3ac:	eeb0 3a67 	vmov.f32	s6, s15
 801c3b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3b4:	9a02      	ldr	r2, [sp, #8]
 801c3b6:	9312      	str	r3, [sp, #72]	; 0x48
 801c3b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3ba:	bf08      	it	eq
 801c3bc:	4613      	moveq	r3, r2
 801c3be:	e734      	b.n	801c22a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c3c0:	1427      	asrs	r7, r4, #16
 801c3c2:	d454      	bmi.n	801c46e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c3c4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c3c8:	42be      	cmp	r6, r7
 801c3ca:	dd50      	ble.n	801c46e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c3cc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c3d0:	d44d      	bmi.n	801c46e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c3d2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c3d6:	454a      	cmp	r2, r9
 801c3d8:	dd49      	ble.n	801c46e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c3da:	b236      	sxth	r6, r6
 801c3dc:	9a01      	ldr	r2, [sp, #4]
 801c3de:	fb09 7606 	mla	r6, r9, r6, r7
 801c3e2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c3e6:	0e3a      	lsrs	r2, r7, #24
 801c3e8:	d041      	beq.n	801c46e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801c3ea:	9e03      	ldr	r6, [sp, #12]
 801c3ec:	fa5f fb87 	uxtb.w	fp, r7
 801c3f0:	4372      	muls	r2, r6
 801c3f2:	1c56      	adds	r6, r2, #1
 801c3f4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c3f8:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c3fc:	1212      	asrs	r2, r2, #8
 801c3fe:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c402:	fa1f fa82 	uxth.w	sl, r2
 801c406:	43d2      	mvns	r2, r2
 801c408:	fb1b fb0a 	smulbb	fp, fp, sl
 801c40c:	b2d2      	uxtb	r2, r2
 801c40e:	fb09 b902 	mla	r9, r9, r2, fp
 801c412:	fa1f f989 	uxth.w	r9, r9
 801c416:	f109 0b01 	add.w	fp, r9, #1
 801c41a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c41e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c422:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c426:	fb1b fb0a 	smulbb	fp, fp, sl
 801c42a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c42e:	fb17 fa0a 	smulbb	sl, r7, sl
 801c432:	f805 9006 	strb.w	r9, [r5, r6]
 801c436:	442e      	add	r6, r5
 801c438:	78b7      	ldrb	r7, [r6, #2]
 801c43a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c43e:	fb07 aa02 	mla	sl, r7, r2, sl
 801c442:	fb09 b902 	mla	r9, r9, r2, fp
 801c446:	fa1f fa8a 	uxth.w	sl, sl
 801c44a:	fa1f f989 	uxth.w	r9, r9
 801c44e:	f10a 0701 	add.w	r7, sl, #1
 801c452:	f109 0b01 	add.w	fp, r9, #1
 801c456:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c45a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c45e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c462:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c466:	f886 a002 	strb.w	sl, [r6, #2]
 801c46a:	f886 9001 	strb.w	r9, [r6, #1]
 801c46e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c470:	4474      	add	r4, lr
 801c472:	f108 0801 	add.w	r8, r8, #1
 801c476:	4410      	add	r0, r2
 801c478:	e762      	b.n	801c340 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c47a:	b005      	add	sp, #20
 801c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c480 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c484:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c48a:	9201      	str	r2, [sp, #4]
 801c48c:	6860      	ldr	r0, [r4, #4]
 801c48e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801c492:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801c496:	fb00 2505 	mla	r5, r0, r5, r2
 801c49a:	6822      	ldr	r2, [r4, #0]
 801c49c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c4a0:	4415      	add	r5, r2
 801c4a2:	f8dc 2000 	ldr.w	r2, [ip]
 801c4a6:	9200      	str	r2, [sp, #0]
 801c4a8:	2900      	cmp	r1, #0
 801c4aa:	dc03      	bgt.n	801c4b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801c4ac:	9a01      	ldr	r2, [sp, #4]
 801c4ae:	2a00      	cmp	r2, #0
 801c4b0:	f340 812b 	ble.w	801c70a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c4b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c4b6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c4ba:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c4be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c4c0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c4c4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	dd0e      	ble.n	801c4ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c4cc:	1422      	asrs	r2, r4, #16
 801c4ce:	d405      	bmi.n	801c4dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c4d0:	4572      	cmp	r2, lr
 801c4d2:	da03      	bge.n	801c4dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c4d4:	1402      	asrs	r2, r0, #16
 801c4d6:	d401      	bmi.n	801c4dc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c4d8:	42ba      	cmp	r2, r7
 801c4da:	db07      	blt.n	801c4ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c4dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c4de:	3b01      	subs	r3, #1
 801c4e0:	3503      	adds	r5, #3
 801c4e2:	4414      	add	r4, r2
 801c4e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c4e6:	4410      	add	r0, r2
 801c4e8:	e7ee      	b.n	801c4c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c4ea:	d06f      	beq.n	801c5cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c4ec:	1e5a      	subs	r2, r3, #1
 801c4ee:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c4f0:	fb06 4602 	mla	r6, r6, r2, r4
 801c4f4:	1436      	asrs	r6, r6, #16
 801c4f6:	d45e      	bmi.n	801c5b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c4f8:	4576      	cmp	r6, lr
 801c4fa:	da5c      	bge.n	801c5b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c4fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c4fe:	fb06 0202 	mla	r2, r6, r2, r0
 801c502:	1412      	asrs	r2, r2, #16
 801c504:	d457      	bmi.n	801c5b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c506:	42ba      	cmp	r2, r7
 801c508:	da55      	bge.n	801c5b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c50a:	1cee      	adds	r6, r5, #3
 801c50c:	469a      	mov	sl, r3
 801c50e:	f1ba 0f00 	cmp.w	sl, #0
 801c512:	dd56      	ble.n	801c5c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c514:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c518:	1427      	asrs	r7, r4, #16
 801c51a:	1402      	asrs	r2, r0, #16
 801c51c:	fb0e 7202 	mla	r2, lr, r2, r7
 801c520:	9f00      	ldr	r7, [sp, #0]
 801c522:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c526:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801c52a:	d03c      	beq.n	801c5a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c52c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c530:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c534:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c538:	fa5f f28e 	uxtb.w	r2, lr
 801c53c:	b2ff      	uxtb	r7, r7
 801c53e:	f000 80dd 	beq.w	801c6fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c542:	fa1f f882 	uxth.w	r8, r2
 801c546:	43d2      	mvns	r2, r2
 801c548:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801c54c:	fb17 f708 	smulbb	r7, r7, r8
 801c550:	b2d2      	uxtb	r2, r2
 801c552:	fb19 f908 	smulbb	r9, r9, r8
 801c556:	fb0e 7702 	mla	r7, lr, r2, r7
 801c55a:	fb1b f808 	smulbb	r8, fp, r8
 801c55e:	b2bf      	uxth	r7, r7
 801c560:	f107 0e01 	add.w	lr, r7, #1
 801c564:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c568:	123f      	asrs	r7, r7, #8
 801c56a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c56e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c572:	fb07 9902 	mla	r9, r7, r2, r9
 801c576:	fa1f f989 	uxth.w	r9, r9
 801c57a:	f109 0701 	add.w	r7, r9, #1
 801c57e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c582:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c586:	fb07 8802 	mla	r8, r7, r2, r8
 801c58a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c58e:	fa1f f888 	uxth.w	r8, r8
 801c592:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c596:	f108 0201 	add.w	r2, r8, #1
 801c59a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c59e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c5a2:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c5a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c5a8:	3603      	adds	r6, #3
 801c5aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c5ae:	4414      	add	r4, r2
 801c5b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c5b2:	4410      	add	r0, r2
 801c5b4:	e7ab      	b.n	801c50e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c5b6:	f04f 0e00 	mov.w	lr, #0
 801c5ba:	eba3 020e 	sub.w	r2, r3, lr
 801c5be:	2a00      	cmp	r2, #0
 801c5c0:	dc3d      	bgt.n	801c63e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801c5c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5ca:	441d      	add	r5, r3
 801c5cc:	2900      	cmp	r1, #0
 801c5ce:	f340 809c 	ble.w	801c70a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c5d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c5d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5dc:	3901      	subs	r1, #1
 801c5de:	eeb0 6a62 	vmov.f32	s12, s5
 801c5e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5ee:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c5f2:	eeb0 6a43 	vmov.f32	s12, s6
 801c5f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5fa:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c5fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c602:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c606:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c60a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c60e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c612:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c616:	ee12 2a90 	vmov	r2, s5
 801c61a:	eef0 2a47 	vmov.f32	s5, s14
 801c61e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c622:	ee13 2a10 	vmov	r2, s6
 801c626:	930f      	str	r3, [sp, #60]	; 0x3c
 801c628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c62a:	eeb0 3a67 	vmov.f32	s6, s15
 801c62e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c632:	9a01      	ldr	r2, [sp, #4]
 801c634:	9310      	str	r3, [sp, #64]	; 0x40
 801c636:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c638:	bf08      	it	eq
 801c63a:	4613      	moveq	r3, r2
 801c63c:	e734      	b.n	801c4a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801c63e:	1427      	asrs	r7, r4, #16
 801c640:	d44d      	bmi.n	801c6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c642:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c646:	42be      	cmp	r6, r7
 801c648:	dd49      	ble.n	801c6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c64a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c64e:	d446      	bmi.n	801c6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c650:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c654:	4542      	cmp	r2, r8
 801c656:	dd42      	ble.n	801c6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c658:	b236      	sxth	r6, r6
 801c65a:	9a00      	ldr	r2, [sp, #0]
 801c65c:	fb08 7606 	mla	r6, r8, r6, r7
 801c660:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c664:	0e3a      	lsrs	r2, r7, #24
 801c666:	d03a      	beq.n	801c6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c668:	2aff      	cmp	r2, #255	; 0xff
 801c66a:	b2d6      	uxtb	r6, r2
 801c66c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c670:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c674:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801c678:	b2ff      	uxtb	r7, r7
 801c67a:	d037      	beq.n	801c6ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801c67c:	fa1f f986 	uxth.w	r9, r6
 801c680:	4472      	add	r2, lr
 801c682:	43f6      	mvns	r6, r6
 801c684:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c688:	fb17 f709 	smulbb	r7, r7, r9
 801c68c:	fb1a fa09 	smulbb	sl, sl, r9
 801c690:	b2f6      	uxtb	r6, r6
 801c692:	fb1b f909 	smulbb	r9, fp, r9
 801c696:	fb08 7706 	mla	r7, r8, r6, r7
 801c69a:	b2bf      	uxth	r7, r7
 801c69c:	f107 0801 	add.w	r8, r7, #1
 801c6a0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c6a4:	123f      	asrs	r7, r7, #8
 801c6a6:	54af      	strb	r7, [r5, r2]
 801c6a8:	442a      	add	r2, r5
 801c6aa:	7857      	ldrb	r7, [r2, #1]
 801c6ac:	fb07 aa06 	mla	sl, r7, r6, sl
 801c6b0:	fa1f fa8a 	uxth.w	sl, sl
 801c6b4:	f10a 0701 	add.w	r7, sl, #1
 801c6b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c6bc:	7897      	ldrb	r7, [r2, #2]
 801c6be:	fb07 9906 	mla	r9, r7, r6, r9
 801c6c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c6c6:	fa1f f989 	uxth.w	r9, r9
 801c6ca:	f882 a001 	strb.w	sl, [r2, #1]
 801c6ce:	f109 0601 	add.w	r6, r9, #1
 801c6d2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c6d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c6da:	f882 9002 	strb.w	r9, [r2, #2]
 801c6de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c6e0:	f10e 0e01 	add.w	lr, lr, #1
 801c6e4:	4414      	add	r4, r2
 801c6e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c6e8:	4410      	add	r0, r2
 801c6ea:	e766      	b.n	801c5ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c6ec:	4472      	add	r2, lr
 801c6ee:	54af      	strb	r7, [r5, r2]
 801c6f0:	442a      	add	r2, r5
 801c6f2:	f882 a001 	strb.w	sl, [r2, #1]
 801c6f6:	f882 b002 	strb.w	fp, [r2, #2]
 801c6fa:	e7f0      	b.n	801c6de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c6fc:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c700:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c704:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c708:	e74d      	b.n	801c5a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c70a:	b003      	add	sp, #12
 801c70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c710 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c714:	b087      	sub	sp, #28
 801c716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c71a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c71c:	9204      	str	r2, [sp, #16]
 801c71e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c722:	6860      	ldr	r0, [r4, #4]
 801c724:	9205      	str	r2, [sp, #20]
 801c726:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c72a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801c72e:	9101      	str	r1, [sp, #4]
 801c730:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c734:	fb00 2505 	mla	r5, r0, r5, r2
 801c738:	6822      	ldr	r2, [r4, #0]
 801c73a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c73e:	4415      	add	r5, r2
 801c740:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c744:	3201      	adds	r2, #1
 801c746:	f022 0201 	bic.w	r2, r2, #1
 801c74a:	9202      	str	r2, [sp, #8]
 801c74c:	f8dc 2000 	ldr.w	r2, [ip]
 801c750:	9203      	str	r2, [sp, #12]
 801c752:	9a01      	ldr	r2, [sp, #4]
 801c754:	2a00      	cmp	r2, #0
 801c756:	dc03      	bgt.n	801c760 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c758:	9a04      	ldr	r2, [sp, #16]
 801c75a:	2a00      	cmp	r2, #0
 801c75c:	f340 8135 	ble.w	801c9ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c760:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c762:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c766:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c76a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c76c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c770:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c774:	2b00      	cmp	r3, #0
 801c776:	dd0d      	ble.n	801c794 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c778:	1422      	asrs	r2, r4, #16
 801c77a:	d405      	bmi.n	801c788 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c77c:	4542      	cmp	r2, r8
 801c77e:	da03      	bge.n	801c788 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c780:	1402      	asrs	r2, r0, #16
 801c782:	d401      	bmi.n	801c788 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c784:	42ba      	cmp	r2, r7
 801c786:	db06      	blt.n	801c796 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c788:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c78a:	4474      	add	r4, lr
 801c78c:	3b01      	subs	r3, #1
 801c78e:	3503      	adds	r5, #3
 801c790:	4410      	add	r0, r2
 801c792:	e7ef      	b.n	801c774 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c794:	d077      	beq.n	801c886 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801c796:	1e5a      	subs	r2, r3, #1
 801c798:	fb0e 4602 	mla	r6, lr, r2, r4
 801c79c:	1436      	asrs	r6, r6, #16
 801c79e:	d469      	bmi.n	801c874 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c7a0:	4546      	cmp	r6, r8
 801c7a2:	da67      	bge.n	801c874 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c7a4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c7a6:	fb06 0202 	mla	r2, r6, r2, r0
 801c7aa:	1412      	asrs	r2, r2, #16
 801c7ac:	d462      	bmi.n	801c874 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c7ae:	42ba      	cmp	r2, r7
 801c7b0:	da60      	bge.n	801c874 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c7b2:	1cee      	adds	r6, r5, #3
 801c7b4:	4699      	mov	r9, r3
 801c7b6:	f1b9 0f00 	cmp.w	r9, #0
 801c7ba:	dd5f      	ble.n	801c87c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c7bc:	1422      	asrs	r2, r4, #16
 801c7be:	9902      	ldr	r1, [sp, #8]
 801c7c0:	1407      	asrs	r7, r0, #16
 801c7c2:	fb01 2707 	mla	r7, r1, r7, r2
 801c7c6:	9903      	ldr	r1, [sp, #12]
 801c7c8:	087a      	lsrs	r2, r7, #1
 801c7ca:	5c8a      	ldrb	r2, [r1, r2]
 801c7cc:	07f9      	lsls	r1, r7, #31
 801c7ce:	bf54      	ite	pl
 801c7d0:	f002 020f 	andpl.w	r2, r2, #15
 801c7d4:	1112      	asrmi	r2, r2, #4
 801c7d6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c7da:	b2d2      	uxtb	r2, r2
 801c7dc:	2a00      	cmp	r2, #0
 801c7de:	d042      	beq.n	801c866 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c7e0:	497b      	ldr	r1, [pc, #492]	; (801c9d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c7e2:	680f      	ldr	r7, [r1, #0]
 801c7e4:	9905      	ldr	r1, [sp, #20]
 801c7e6:	fa5f fb87 	uxtb.w	fp, r7
 801c7ea:	434a      	muls	r2, r1
 801c7ec:	f102 0801 	add.w	r8, r2, #1
 801c7f0:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801c7f4:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801c7f8:	1212      	asrs	r2, r2, #8
 801c7fa:	fa1f fa82 	uxth.w	sl, r2
 801c7fe:	43d2      	mvns	r2, r2
 801c800:	fb1b fb0a 	smulbb	fp, fp, sl
 801c804:	b2d2      	uxtb	r2, r2
 801c806:	fb08 b802 	mla	r8, r8, r2, fp
 801c80a:	fa1f f888 	uxth.w	r8, r8
 801c80e:	f108 0b01 	add.w	fp, r8, #1
 801c812:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c816:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c81a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c81e:	fb1b fb0a 	smulbb	fp, fp, sl
 801c822:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c826:	fb17 fa0a 	smulbb	sl, r7, sl
 801c82a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c82e:	f806 8c03 	strb.w	r8, [r6, #-3]
 801c832:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801c836:	fb07 aa02 	mla	sl, r7, r2, sl
 801c83a:	fb08 b802 	mla	r8, r8, r2, fp
 801c83e:	fa1f fa8a 	uxth.w	sl, sl
 801c842:	fa1f f888 	uxth.w	r8, r8
 801c846:	f10a 0701 	add.w	r7, sl, #1
 801c84a:	f108 0b01 	add.w	fp, r8, #1
 801c84e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c852:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c856:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c85a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c85e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c862:	f806 8c02 	strb.w	r8, [r6, #-2]
 801c866:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c868:	4474      	add	r4, lr
 801c86a:	3603      	adds	r6, #3
 801c86c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c870:	4410      	add	r0, r2
 801c872:	e7a0      	b.n	801c7b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c874:	2700      	movs	r7, #0
 801c876:	1bda      	subs	r2, r3, r7
 801c878:	2a00      	cmp	r2, #0
 801c87a:	dc3e      	bgt.n	801c8fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801c87c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c880:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c884:	441d      	add	r5, r3
 801c886:	9b01      	ldr	r3, [sp, #4]
 801c888:	2b00      	cmp	r3, #0
 801c88a:	f340 809e 	ble.w	801c9ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c88e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c892:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c894:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c898:	eeb0 6a62 	vmov.f32	s12, s5
 801c89c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c8a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c8a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c8a8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c8ac:	eeb0 6a43 	vmov.f32	s12, s6
 801c8b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c8b4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c8b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c8bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c8c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c8c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c8c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c8cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c8d0:	ee12 2a90 	vmov	r2, s5
 801c8d4:	eef0 2a47 	vmov.f32	s5, s14
 801c8d8:	fb92 fef3 	sdiv	lr, r2, r3
 801c8dc:	ee13 2a10 	vmov	r2, s6
 801c8e0:	eeb0 3a67 	vmov.f32	s6, s15
 801c8e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8e8:	9314      	str	r3, [sp, #80]	; 0x50
 801c8ea:	9b01      	ldr	r3, [sp, #4]
 801c8ec:	9a04      	ldr	r2, [sp, #16]
 801c8ee:	3b01      	subs	r3, #1
 801c8f0:	9301      	str	r3, [sp, #4]
 801c8f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c8f4:	bf08      	it	eq
 801c8f6:	4613      	moveq	r3, r2
 801c8f8:	e72b      	b.n	801c752 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c8fa:	1426      	asrs	r6, r4, #16
 801c8fc:	d460      	bmi.n	801c9c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c8fe:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c902:	42b2      	cmp	r2, r6
 801c904:	dd5c      	ble.n	801c9c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c906:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c90a:	d459      	bmi.n	801c9c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c90c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c910:	4542      	cmp	r2, r8
 801c912:	dd55      	ble.n	801c9c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c914:	9a02      	ldr	r2, [sp, #8]
 801c916:	9903      	ldr	r1, [sp, #12]
 801c918:	fb08 6602 	mla	r6, r8, r2, r6
 801c91c:	0872      	lsrs	r2, r6, #1
 801c91e:	07f6      	lsls	r6, r6, #31
 801c920:	5c8a      	ldrb	r2, [r1, r2]
 801c922:	bf54      	ite	pl
 801c924:	f002 020f 	andpl.w	r2, r2, #15
 801c928:	1112      	asrmi	r2, r2, #4
 801c92a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c92e:	b2d2      	uxtb	r2, r2
 801c930:	2a00      	cmp	r2, #0
 801c932:	d045      	beq.n	801c9c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c934:	4926      	ldr	r1, [pc, #152]	; (801c9d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c936:	f8d1 8000 	ldr.w	r8, [r1]
 801c93a:	9905      	ldr	r1, [sp, #20]
 801c93c:	fa5f fb88 	uxtb.w	fp, r8
 801c940:	434a      	muls	r2, r1
 801c942:	1c56      	adds	r6, r2, #1
 801c944:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c948:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c94c:	1212      	asrs	r2, r2, #8
 801c94e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c952:	fa1f fa82 	uxth.w	sl, r2
 801c956:	43d2      	mvns	r2, r2
 801c958:	fb1b fb0a 	smulbb	fp, fp, sl
 801c95c:	b2d2      	uxtb	r2, r2
 801c95e:	fb09 b902 	mla	r9, r9, r2, fp
 801c962:	fa1f f989 	uxth.w	r9, r9
 801c966:	f109 0b01 	add.w	fp, r9, #1
 801c96a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c96e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801c972:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801c976:	fb1b fb0a 	smulbb	fp, fp, sl
 801c97a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c97e:	fb18 fa0a 	smulbb	sl, r8, sl
 801c982:	f805 9006 	strb.w	r9, [r5, r6]
 801c986:	442e      	add	r6, r5
 801c988:	f896 8002 	ldrb.w	r8, [r6, #2]
 801c98c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c990:	fb08 aa02 	mla	sl, r8, r2, sl
 801c994:	fb09 b902 	mla	r9, r9, r2, fp
 801c998:	fa1f fa8a 	uxth.w	sl, sl
 801c99c:	fa1f f989 	uxth.w	r9, r9
 801c9a0:	f10a 0801 	add.w	r8, sl, #1
 801c9a4:	f109 0b01 	add.w	fp, r9, #1
 801c9a8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801c9ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c9b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c9b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9b8:	f886 a002 	strb.w	sl, [r6, #2]
 801c9bc:	f886 9001 	strb.w	r9, [r6, #1]
 801c9c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c9c2:	4474      	add	r4, lr
 801c9c4:	3701      	adds	r7, #1
 801c9c6:	4410      	add	r0, r2
 801c9c8:	e755      	b.n	801c876 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801c9ca:	b007      	add	sp, #28
 801c9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9d0:	2400feec 	.word	0x2400feec

0801c9d4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9d8:	b085      	sub	sp, #20
 801c9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c9de:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c9e0:	9203      	str	r2, [sp, #12]
 801c9e2:	6860      	ldr	r0, [r4, #4]
 801c9e4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c9e8:	9100      	str	r1, [sp, #0]
 801c9ea:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801c9ee:	fb00 2606 	mla	r6, r0, r6, r2
 801c9f2:	6822      	ldr	r2, [r4, #0]
 801c9f4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c9f8:	4416      	add	r6, r2
 801c9fa:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c9fe:	3201      	adds	r2, #1
 801ca00:	f022 0201 	bic.w	r2, r2, #1
 801ca04:	9201      	str	r2, [sp, #4]
 801ca06:	f8dc 2000 	ldr.w	r2, [ip]
 801ca0a:	9202      	str	r2, [sp, #8]
 801ca0c:	9a00      	ldr	r2, [sp, #0]
 801ca0e:	2a00      	cmp	r2, #0
 801ca10:	dc03      	bgt.n	801ca1a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ca12:	9a03      	ldr	r2, [sp, #12]
 801ca14:	2a00      	cmp	r2, #0
 801ca16:	f340 8140 	ble.w	801cc9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801ca1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ca1c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ca20:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801ca24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ca26:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ca2a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	dd0e      	ble.n	801ca50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ca32:	142a      	asrs	r2, r5, #16
 801ca34:	d405      	bmi.n	801ca42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ca36:	4572      	cmp	r2, lr
 801ca38:	da03      	bge.n	801ca42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ca3a:	1422      	asrs	r2, r4, #16
 801ca3c:	d401      	bmi.n	801ca42 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ca3e:	42ba      	cmp	r2, r7
 801ca40:	db07      	blt.n	801ca52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ca42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ca44:	3b01      	subs	r3, #1
 801ca46:	3603      	adds	r6, #3
 801ca48:	4415      	add	r5, r2
 801ca4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ca4c:	4414      	add	r4, r2
 801ca4e:	e7ee      	b.n	801ca2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ca50:	d072      	beq.n	801cb38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ca52:	1e5a      	subs	r2, r3, #1
 801ca54:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ca56:	fb00 5002 	mla	r0, r0, r2, r5
 801ca5a:	1400      	asrs	r0, r0, #16
 801ca5c:	d463      	bmi.n	801cb26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca5e:	4570      	cmp	r0, lr
 801ca60:	da61      	bge.n	801cb26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca62:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ca64:	fb00 4202 	mla	r2, r0, r2, r4
 801ca68:	1412      	asrs	r2, r2, #16
 801ca6a:	d45c      	bmi.n	801cb26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca6c:	42ba      	cmp	r2, r7
 801ca6e:	da5a      	bge.n	801cb26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ca70:	1cf0      	adds	r0, r6, #3
 801ca72:	469a      	mov	sl, r3
 801ca74:	f1ba 0f00 	cmp.w	sl, #0
 801ca78:	dd59      	ble.n	801cb2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801ca7a:	142a      	asrs	r2, r5, #16
 801ca7c:	9901      	ldr	r1, [sp, #4]
 801ca7e:	1427      	asrs	r7, r4, #16
 801ca80:	fb01 2707 	mla	r7, r1, r7, r2
 801ca84:	9902      	ldr	r1, [sp, #8]
 801ca86:	087a      	lsrs	r2, r7, #1
 801ca88:	5c8a      	ldrb	r2, [r1, r2]
 801ca8a:	07f9      	lsls	r1, r7, #31
 801ca8c:	bf54      	ite	pl
 801ca8e:	f002 020f 	andpl.w	r2, r2, #15
 801ca92:	1112      	asrmi	r2, r2, #4
 801ca94:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ca98:	b2d2      	uxtb	r2, r2
 801ca9a:	2a00      	cmp	r2, #0
 801ca9c:	d03b      	beq.n	801cb16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ca9e:	4980      	ldr	r1, [pc, #512]	; (801cca0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801caa0:	2aff      	cmp	r2, #255	; 0xff
 801caa2:	680f      	ldr	r7, [r1, #0]
 801caa4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801caa8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801caac:	b2ff      	uxtb	r7, r7
 801caae:	f000 80ed 	beq.w	801cc8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801cab2:	fa1f f882 	uxth.w	r8, r2
 801cab6:	43d2      	mvns	r2, r2
 801cab8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801cabc:	fb17 f708 	smulbb	r7, r7, r8
 801cac0:	b2d2      	uxtb	r2, r2
 801cac2:	fb19 f908 	smulbb	r9, r9, r8
 801cac6:	fb0e 7702 	mla	r7, lr, r2, r7
 801caca:	fb1b f808 	smulbb	r8, fp, r8
 801cace:	b2bf      	uxth	r7, r7
 801cad0:	f107 0e01 	add.w	lr, r7, #1
 801cad4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801cad8:	123f      	asrs	r7, r7, #8
 801cada:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cade:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801cae2:	fb07 9902 	mla	r9, r7, r2, r9
 801cae6:	fa1f f989 	uxth.w	r9, r9
 801caea:	f109 0701 	add.w	r7, r9, #1
 801caee:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801caf2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801caf6:	fb07 8802 	mla	r8, r7, r2, r8
 801cafa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cafe:	fa1f f888 	uxth.w	r8, r8
 801cb02:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cb06:	f108 0201 	add.w	r2, r8, #1
 801cb0a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801cb0e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cb12:	f800 8c01 	strb.w	r8, [r0, #-1]
 801cb16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb18:	3003      	adds	r0, #3
 801cb1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cb1e:	4415      	add	r5, r2
 801cb20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cb22:	4414      	add	r4, r2
 801cb24:	e7a6      	b.n	801ca74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cb26:	2700      	movs	r7, #0
 801cb28:	1bda      	subs	r2, r3, r7
 801cb2a:	2a00      	cmp	r2, #0
 801cb2c:	dc40      	bgt.n	801cbb0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801cb2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb36:	441e      	add	r6, r3
 801cb38:	9b00      	ldr	r3, [sp, #0]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	f340 80ad 	ble.w	801cc9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801cb40:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb4a:	eeb0 6a62 	vmov.f32	s12, s5
 801cb4e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cb52:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb5a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cb5e:	eeb0 6a43 	vmov.f32	s12, s6
 801cb62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cb66:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cb6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb72:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb82:	ee12 2a90 	vmov	r2, s5
 801cb86:	eef0 2a47 	vmov.f32	s5, s14
 801cb8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb8e:	ee13 2a10 	vmov	r2, s6
 801cb92:	9311      	str	r3, [sp, #68]	; 0x44
 801cb94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb96:	eeb0 3a67 	vmov.f32	s6, s15
 801cb9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb9e:	9312      	str	r3, [sp, #72]	; 0x48
 801cba0:	9b00      	ldr	r3, [sp, #0]
 801cba2:	9a03      	ldr	r2, [sp, #12]
 801cba4:	3b01      	subs	r3, #1
 801cba6:	9300      	str	r3, [sp, #0]
 801cba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cbaa:	bf08      	it	eq
 801cbac:	4613      	moveq	r3, r2
 801cbae:	e72d      	b.n	801ca0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801cbb0:	1428      	asrs	r0, r5, #16
 801cbb2:	d45c      	bmi.n	801cc6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cbb4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801cbb8:	4282      	cmp	r2, r0
 801cbba:	dd58      	ble.n	801cc6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cbbc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801cbc0:	d455      	bmi.n	801cc6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cbc2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801cbc6:	4572      	cmp	r2, lr
 801cbc8:	dd51      	ble.n	801cc6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cbca:	9a01      	ldr	r2, [sp, #4]
 801cbcc:	9902      	ldr	r1, [sp, #8]
 801cbce:	fb0e 0002 	mla	r0, lr, r2, r0
 801cbd2:	0842      	lsrs	r2, r0, #1
 801cbd4:	07c0      	lsls	r0, r0, #31
 801cbd6:	5c8a      	ldrb	r2, [r1, r2]
 801cbd8:	bf54      	ite	pl
 801cbda:	f002 020f 	andpl.w	r2, r2, #15
 801cbde:	1112      	asrmi	r2, r2, #4
 801cbe0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cbe4:	b2d2      	uxtb	r2, r2
 801cbe6:	2a00      	cmp	r2, #0
 801cbe8:	d041      	beq.n	801cc6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cbea:	492d      	ldr	r1, [pc, #180]	; (801cca0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801cbec:	2aff      	cmp	r2, #255	; 0xff
 801cbee:	6808      	ldr	r0, [r1, #0]
 801cbf0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801cbf4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801cbf8:	fa5f fe80 	uxtb.w	lr, r0
 801cbfc:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801cc00:	d03b      	beq.n	801cc7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801cc02:	fa1f f982 	uxth.w	r9, r2
 801cc06:	4438      	add	r0, r7
 801cc08:	43d2      	mvns	r2, r2
 801cc0a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801cc0e:	fb1e fe09 	smulbb	lr, lr, r9
 801cc12:	fb1a fa09 	smulbb	sl, sl, r9
 801cc16:	b2d2      	uxtb	r2, r2
 801cc18:	fb1b f909 	smulbb	r9, fp, r9
 801cc1c:	fb08 ee02 	mla	lr, r8, r2, lr
 801cc20:	fa1f fe8e 	uxth.w	lr, lr
 801cc24:	f10e 0801 	add.w	r8, lr, #1
 801cc28:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801cc2c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cc30:	f806 e000 	strb.w	lr, [r6, r0]
 801cc34:	4430      	add	r0, r6
 801cc36:	f890 e001 	ldrb.w	lr, [r0, #1]
 801cc3a:	fb0e aa02 	mla	sl, lr, r2, sl
 801cc3e:	fa1f fa8a 	uxth.w	sl, sl
 801cc42:	f10a 0e01 	add.w	lr, sl, #1
 801cc46:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801cc4a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801cc4e:	fb0e 9902 	mla	r9, lr, r2, r9
 801cc52:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cc56:	fa1f f989 	uxth.w	r9, r9
 801cc5a:	f880 a001 	strb.w	sl, [r0, #1]
 801cc5e:	f109 0201 	add.w	r2, r9, #1
 801cc62:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801cc66:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc6a:	f880 9002 	strb.w	r9, [r0, #2]
 801cc6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc70:	3701      	adds	r7, #1
 801cc72:	4415      	add	r5, r2
 801cc74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cc76:	4414      	add	r4, r2
 801cc78:	e756      	b.n	801cb28 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cc7a:	4438      	add	r0, r7
 801cc7c:	f806 e000 	strb.w	lr, [r6, r0]
 801cc80:	4430      	add	r0, r6
 801cc82:	f880 a001 	strb.w	sl, [r0, #1]
 801cc86:	f880 b002 	strb.w	fp, [r0, #2]
 801cc8a:	e7f0      	b.n	801cc6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cc8c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cc90:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cc94:	f800 bc01 	strb.w	fp, [r0, #-1]
 801cc98:	e73d      	b.n	801cb16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cc9a:	b005      	add	sp, #20
 801cc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cca0:	2400feec 	.word	0x2400feec

0801cca4 <_ZN8touchgfx8LCD24bppD1Ev>:
 801cca4:	4770      	bx	lr

0801cca6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801cca6:	4770      	bx	lr

0801cca8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801cca8:	4770      	bx	lr

0801ccaa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801ccaa:	4770      	bx	lr

0801ccac <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801ccac:	4770      	bx	lr

0801ccae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ccae:	4770      	bx	lr

0801ccb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ccb0:	4770      	bx	lr

0801ccb2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ccb2:	4770      	bx	lr

0801ccb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ccb4:	4770      	bx	lr

0801ccb6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ccb6:	4770      	bx	lr

0801ccb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ccb8:	4770      	bx	lr

0801ccba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ccba:	4770      	bx	lr

0801ccbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ccbc:	4770      	bx	lr

0801ccbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ccbe:	4770      	bx	lr

0801ccc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ccc0:	4770      	bx	lr

0801ccc2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ccc2:	4770      	bx	lr

0801ccc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ccc4:	4770      	bx	lr

0801ccc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ccc6:	4770      	bx	lr

0801ccc8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ccc8:	4770      	bx	lr

0801ccca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ccca:	4770      	bx	lr

0801cccc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cccc:	4770      	bx	lr
	...

0801ccd0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ccd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccd2:	4606      	mov	r6, r0
 801ccd4:	b087      	sub	sp, #28
 801ccd6:	4615      	mov	r5, r2
 801ccd8:	461f      	mov	r7, r3
 801ccda:	b353      	cbz	r3, 801cd32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801ccdc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	dd26      	ble.n	801cd32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cce4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	dd22      	ble.n	801cd32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801ccec:	6808      	ldr	r0, [r1, #0]
 801ccee:	aa04      	add	r2, sp, #16
 801ccf0:	6849      	ldr	r1, [r1, #4]
 801ccf2:	4c1b      	ldr	r4, [pc, #108]	; (801cd60 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801ccf4:	c203      	stmia	r2!, {r0, r1}
 801ccf6:	a804      	add	r0, sp, #16
 801ccf8:	f7fa ff80 	bl	8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ccfc:	6820      	ldr	r0, [r4, #0]
 801ccfe:	6803      	ldr	r3, [r0, #0]
 801cd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cd02:	4798      	blx	r3
 801cd04:	2fff      	cmp	r7, #255	; 0xff
 801cd06:	d016      	beq.n	801cd36 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801cd08:	f010 0f08 	tst.w	r0, #8
 801cd0c:	6820      	ldr	r0, [r4, #0]
 801cd0e:	d015      	beq.n	801cd3c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801cd10:	2400      	movs	r4, #0
 801cd12:	6801      	ldr	r1, [r0, #0]
 801cd14:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cd18:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cd1c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801cd20:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801cd24:	9401      	str	r4, [sp, #4]
 801cd26:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cd2a:	9400      	str	r4, [sp, #0]
 801cd2c:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801cd2e:	4629      	mov	r1, r5
 801cd30:	47a0      	blx	r4
 801cd32:	b007      	add	sp, #28
 801cd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd36:	f010 0f02 	tst.w	r0, #2
 801cd3a:	e7e7      	b.n	801cd0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801cd3c:	6803      	ldr	r3, [r0, #0]
 801cd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd40:	4798      	blx	r3
 801cd42:	4b08      	ldr	r3, [pc, #32]	; (801cd64 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801cd44:	4601      	mov	r1, r0
 801cd46:	4630      	mov	r0, r6
 801cd48:	881a      	ldrh	r2, [r3, #0]
 801cd4a:	6833      	ldr	r3, [r6, #0]
 801cd4c:	e9cd 5700 	strd	r5, r7, [sp]
 801cd50:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801cd52:	ab04      	add	r3, sp, #16
 801cd54:	47a8      	blx	r5
 801cd56:	6820      	ldr	r0, [r4, #0]
 801cd58:	6803      	ldr	r3, [r0, #0]
 801cd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd5c:	4798      	blx	r3
 801cd5e:	e7e8      	b.n	801cd32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cd60:	2400fee4 	.word	0x2400fee4
 801cd64:	2400fede 	.word	0x2400fede

0801cd68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801cd68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cd6c:	b08b      	sub	sp, #44	; 0x2c
 801cd6e:	460d      	mov	r5, r1
 801cd70:	4616      	mov	r6, r2
 801cd72:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801cd76:	f1b8 0f00 	cmp.w	r8, #0
 801cd7a:	d047      	beq.n	801ce0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801cd7c:	6810      	ldr	r0, [r2, #0]
 801cd7e:	ac06      	add	r4, sp, #24
 801cd80:	6851      	ldr	r1, [r2, #4]
 801cd82:	4f51      	ldr	r7, [pc, #324]	; (801cec8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801cd84:	c403      	stmia	r4!, {r0, r1}
 801cd86:	6818      	ldr	r0, [r3, #0]
 801cd88:	ac08      	add	r4, sp, #32
 801cd8a:	6859      	ldr	r1, [r3, #4]
 801cd8c:	c403      	stmia	r4!, {r0, r1}
 801cd8e:	a806      	add	r0, sp, #24
 801cd90:	f7fa ff34 	bl	8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cd94:	4631      	mov	r1, r6
 801cd96:	a808      	add	r0, sp, #32
 801cd98:	f7fa ff58 	bl	8017c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cd9c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801cda0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801cda4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801cda8:	6838      	ldr	r0, [r7, #0]
 801cdaa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cdae:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801cdb2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801cdb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cdba:	440d      	add	r5, r1
 801cdbc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801cdc0:	440a      	add	r2, r1
 801cdc2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801cdc6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801cdca:	4413      	add	r3, r2
 801cdcc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801cdd0:	6803      	ldr	r3, [r0, #0]
 801cdd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cdd4:	4798      	blx	r3
 801cdd6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801cdda:	d01a      	beq.n	801ce12 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801cddc:	f010 0f04 	tst.w	r0, #4
 801cde0:	6838      	ldr	r0, [r7, #0]
 801cde2:	d019      	beq.n	801ce18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801cde4:	2100      	movs	r1, #0
 801cde6:	6807      	ldr	r7, [r0, #0]
 801cde8:	b2a4      	uxth	r4, r4
 801cdea:	f8cd 800c 	str.w	r8, [sp, #12]
 801cdee:	b2b6      	uxth	r6, r6
 801cdf0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801cdf4:	9401      	str	r4, [sp, #4]
 801cdf6:	9600      	str	r6, [sp, #0]
 801cdf8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cdfc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801ce00:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ce04:	9102      	str	r1, [sp, #8]
 801ce06:	4629      	mov	r1, r5
 801ce08:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801ce0a:	47a0      	blx	r4
 801ce0c:	b00b      	add	sp, #44	; 0x2c
 801ce0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce12:	f010 0f01 	tst.w	r0, #1
 801ce16:	e7e3      	b.n	801cde0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801ce18:	6803      	ldr	r3, [r0, #0]
 801ce1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce1c:	4798      	blx	r3
 801ce1e:	4a2b      	ldr	r2, [pc, #172]	; (801cecc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801ce20:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ce24:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ce28:	8813      	ldrh	r3, [r2, #0]
 801ce2a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801ce2e:	fb03 f404 	mul.w	r4, r3, r4
 801ce32:	fb03 c101 	mla	r1, r3, r1, ip
 801ce36:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ce3e:	4408      	add	r0, r1
 801ce40:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801ce44:	4404      	add	r4, r0
 801ce46:	d02e      	beq.n	801cea6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801ce48:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801ce4c:	1b9b      	subs	r3, r3, r6
 801ce4e:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801ce52:	1b96      	subs	r6, r2, r6
 801ce54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce58:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ce5c:	42a0      	cmp	r0, r4
 801ce5e:	d22d      	bcs.n	801cebc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801ce60:	eb00 0e01 	add.w	lr, r0, r1
 801ce64:	4570      	cmp	r0, lr
 801ce66:	d210      	bcs.n	801ce8a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801ce68:	f890 9000 	ldrb.w	r9, [r0]
 801ce6c:	f815 2b01 	ldrb.w	r2, [r5], #1
 801ce70:	fb19 f90c 	smulbb	r9, r9, ip
 801ce74:	fb02 9208 	mla	r2, r2, r8, r9
 801ce78:	b292      	uxth	r2, r2
 801ce7a:	f102 0901 	add.w	r9, r2, #1
 801ce7e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801ce82:	1212      	asrs	r2, r2, #8
 801ce84:	f800 2b01 	strb.w	r2, [r0], #1
 801ce88:	e7ec      	b.n	801ce64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801ce8a:	4418      	add	r0, r3
 801ce8c:	4435      	add	r5, r6
 801ce8e:	e7e5      	b.n	801ce5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801ce90:	8813      	ldrh	r3, [r2, #0]
 801ce92:	1b9b      	subs	r3, r3, r6
 801ce94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce98:	4418      	add	r0, r3
 801ce9a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ce9e:	1b9b      	subs	r3, r3, r6
 801cea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cea4:	441d      	add	r5, r3
 801cea6:	42a0      	cmp	r0, r4
 801cea8:	d208      	bcs.n	801cebc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801ceaa:	eb00 0c01 	add.w	ip, r0, r1
 801ceae:	4560      	cmp	r0, ip
 801ceb0:	d2ee      	bcs.n	801ce90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801ceb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ceb6:	f800 3b01 	strb.w	r3, [r0], #1
 801ceba:	e7f8      	b.n	801ceae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801cebc:	6838      	ldr	r0, [r7, #0]
 801cebe:	6803      	ldr	r3, [r0, #0]
 801cec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cec2:	4798      	blx	r3
 801cec4:	e7a2      	b.n	801ce0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801cec6:	bf00      	nop
 801cec8:	2400fee4 	.word	0x2400fee4
 801cecc:	2400fede 	.word	0x2400fede

0801ced0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801ced0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ced2:	2300      	movs	r3, #0
 801ced4:	b085      	sub	sp, #20
 801ced6:	9300      	str	r3, [sp, #0]
 801ced8:	4b41      	ldr	r3, [pc, #260]	; (801cfe0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801ceda:	781b      	ldrb	r3, [r3, #0]
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d136      	bne.n	801cf4e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801cee0:	4a40      	ldr	r2, [pc, #256]	; (801cfe4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801cee2:	f9b2 2000 	ldrsh.w	r2, [r2]
 801cee6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d131      	bne.n	801cf52 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801ceee:	4b3e      	ldr	r3, [pc, #248]	; (801cfe8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801cef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cef4:	ac02      	add	r4, sp, #8
 801cef6:	6808      	ldr	r0, [r1, #0]
 801cef8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cefc:	ab02      	add	r3, sp, #8
 801cefe:	6849      	ldr	r1, [r1, #4]
 801cf00:	4d3a      	ldr	r5, [pc, #232]	; (801cfec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801cf02:	c303      	stmia	r3!, {r0, r1}
 801cf04:	4669      	mov	r1, sp
 801cf06:	4620      	mov	r0, r4
 801cf08:	f7fa fea0 	bl	8017c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cf0c:	4668      	mov	r0, sp
 801cf0e:	f7fa fe75 	bl	8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf12:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cf16:	f8bd 2000 	ldrh.w	r2, [sp]
 801cf1a:	462e      	mov	r6, r5
 801cf1c:	6828      	ldr	r0, [r5, #0]
 801cf1e:	4413      	add	r3, r2
 801cf20:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801cf24:	f8ad 3008 	strh.w	r3, [sp, #8]
 801cf28:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cf2c:	4413      	add	r3, r2
 801cf2e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cf32:	6803      	ldr	r3, [r0, #0]
 801cf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf36:	4798      	blx	r3
 801cf38:	f010 0f01 	tst.w	r0, #1
 801cf3c:	d00b      	beq.n	801cf56 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801cf3e:	6828      	ldr	r0, [r5, #0]
 801cf40:	6803      	ldr	r3, [r0, #0]
 801cf42:	e894 0006 	ldmia.w	r4, {r1, r2}
 801cf46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cf48:	4798      	blx	r3
 801cf4a:	b005      	add	sp, #20
 801cf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf4e:	4a26      	ldr	r2, [pc, #152]	; (801cfe8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801cf50:	e7c7      	b.n	801cee2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801cf52:	4b24      	ldr	r3, [pc, #144]	; (801cfe4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801cf54:	e7cc      	b.n	801cef0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801cf56:	6830      	ldr	r0, [r6, #0]
 801cf58:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801cf5c:	6803      	ldr	r3, [r0, #0]
 801cf5e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801cf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf64:	4798      	blx	r3
 801cf66:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801cf6a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cf6e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801cf72:	fb14 3402 	smlabb	r4, r4, r2, r3
 801cf76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cf7a:	4404      	add	r4, r0
 801cf7c:	6830      	ldr	r0, [r6, #0]
 801cf7e:	6803      	ldr	r3, [r0, #0]
 801cf80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf82:	4798      	blx	r3
 801cf84:	4917      	ldr	r1, [pc, #92]	; (801cfe4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801cf86:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801cf8a:	880b      	ldrh	r3, [r1, #0]
 801cf8c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801cf90:	fb03 c202 	mla	r2, r3, r2, ip
 801cf94:	437b      	muls	r3, r7
 801cf96:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801cf9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfa2:	4410      	add	r0, r2
 801cfa4:	18c2      	adds	r2, r0, r3
 801cfa6:	4290      	cmp	r0, r2
 801cfa8:	d214      	bcs.n	801cfd4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801cfaa:	eb00 0c07 	add.w	ip, r0, r7
 801cfae:	4560      	cmp	r0, ip
 801cfb0:	d204      	bcs.n	801cfbc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801cfb2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cfb6:	f800 3b01 	strb.w	r3, [r0], #1
 801cfba:	e7f8      	b.n	801cfae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801cfbc:	880b      	ldrh	r3, [r1, #0]
 801cfbe:	1b5b      	subs	r3, r3, r5
 801cfc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfc4:	4418      	add	r0, r3
 801cfc6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801cfca:	1b5b      	subs	r3, r3, r5
 801cfcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfd0:	441c      	add	r4, r3
 801cfd2:	e7e8      	b.n	801cfa6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801cfd4:	6830      	ldr	r0, [r6, #0]
 801cfd6:	6803      	ldr	r3, [r0, #0]
 801cfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfda:	4798      	blx	r3
 801cfdc:	e7b5      	b.n	801cf4a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801cfde:	bf00      	nop
 801cfe0:	2400fedc 	.word	0x2400fedc
 801cfe4:	2400fede 	.word	0x2400fede
 801cfe8:	2400fee0 	.word	0x2400fee0
 801cfec:	2400fee4 	.word	0x2400fee4

0801cff0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801cff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cff4:	b089      	sub	sp, #36	; 0x24
 801cff6:	4607      	mov	r7, r0
 801cff8:	4689      	mov	r9, r1
 801cffa:	4692      	mov	sl, r2
 801cffc:	ac08      	add	r4, sp, #32
 801cffe:	461e      	mov	r6, r3
 801d000:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801d004:	4620      	mov	r0, r4
 801d006:	f7fe f8ef 	bl	801b1e8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d00a:	683b      	ldr	r3, [r7, #0]
 801d00c:	4605      	mov	r5, r0
 801d00e:	4620      	mov	r0, r4
 801d010:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801d014:	f7fe f834 	bl	801b080 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d018:	4683      	mov	fp, r0
 801d01a:	4620      	mov	r0, r4
 801d01c:	f7fe f864 	bl	801b0e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d020:	4653      	mov	r3, sl
 801d022:	464a      	mov	r2, r9
 801d024:	4639      	mov	r1, r7
 801d026:	9500      	str	r5, [sp, #0]
 801d028:	e9cd b001 	strd	fp, r0, [sp, #4]
 801d02c:	a806      	add	r0, sp, #24
 801d02e:	47c0      	blx	r8
 801d030:	a906      	add	r1, sp, #24
 801d032:	4630      	mov	r0, r6
 801d034:	f7fd ff08 	bl	801ae48 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801d038:	4628      	mov	r0, r5
 801d03a:	b009      	add	sp, #36	; 0x24
 801d03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d040 <_ZN8touchgfx8LCD24bppD0Ev>:
 801d040:	b510      	push	{r4, lr}
 801d042:	4604      	mov	r4, r0
 801d044:	2158      	movs	r1, #88	; 0x58
 801d046:	f006 f8f6 	bl	8023236 <_ZdlPvj>
 801d04a:	4620      	mov	r0, r4
 801d04c:	bd10      	pop	{r4, pc}

0801d04e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d04e:	b510      	push	{r4, lr}
 801d050:	4604      	mov	r4, r0
 801d052:	2104      	movs	r1, #4
 801d054:	f006 f8ef 	bl	8023236 <_ZdlPvj>
 801d058:	4620      	mov	r0, r4
 801d05a:	bd10      	pop	{r4, pc}

0801d05c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d05c:	b510      	push	{r4, lr}
 801d05e:	4604      	mov	r4, r0
 801d060:	2104      	movs	r1, #4
 801d062:	f006 f8e8 	bl	8023236 <_ZdlPvj>
 801d066:	4620      	mov	r0, r4
 801d068:	bd10      	pop	{r4, pc}

0801d06a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d06a:	b510      	push	{r4, lr}
 801d06c:	4604      	mov	r4, r0
 801d06e:	2104      	movs	r1, #4
 801d070:	f006 f8e1 	bl	8023236 <_ZdlPvj>
 801d074:	4620      	mov	r0, r4
 801d076:	bd10      	pop	{r4, pc}

0801d078 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d078:	b510      	push	{r4, lr}
 801d07a:	4604      	mov	r4, r0
 801d07c:	2104      	movs	r1, #4
 801d07e:	f006 f8da 	bl	8023236 <_ZdlPvj>
 801d082:	4620      	mov	r0, r4
 801d084:	bd10      	pop	{r4, pc}

0801d086 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d086:	b510      	push	{r4, lr}
 801d088:	4604      	mov	r4, r0
 801d08a:	2104      	movs	r1, #4
 801d08c:	f006 f8d3 	bl	8023236 <_ZdlPvj>
 801d090:	4620      	mov	r0, r4
 801d092:	bd10      	pop	{r4, pc}

0801d094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d094:	b510      	push	{r4, lr}
 801d096:	4604      	mov	r4, r0
 801d098:	2104      	movs	r1, #4
 801d09a:	f006 f8cc 	bl	8023236 <_ZdlPvj>
 801d09e:	4620      	mov	r0, r4
 801d0a0:	bd10      	pop	{r4, pc}

0801d0a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d0a2:	b510      	push	{r4, lr}
 801d0a4:	4604      	mov	r4, r0
 801d0a6:	2104      	movs	r1, #4
 801d0a8:	f006 f8c5 	bl	8023236 <_ZdlPvj>
 801d0ac:	4620      	mov	r0, r4
 801d0ae:	bd10      	pop	{r4, pc}

0801d0b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d0b0:	b510      	push	{r4, lr}
 801d0b2:	4604      	mov	r4, r0
 801d0b4:	2104      	movs	r1, #4
 801d0b6:	f006 f8be 	bl	8023236 <_ZdlPvj>
 801d0ba:	4620      	mov	r0, r4
 801d0bc:	bd10      	pop	{r4, pc}

0801d0be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d0be:	b510      	push	{r4, lr}
 801d0c0:	4604      	mov	r4, r0
 801d0c2:	2104      	movs	r1, #4
 801d0c4:	f006 f8b7 	bl	8023236 <_ZdlPvj>
 801d0c8:	4620      	mov	r0, r4
 801d0ca:	bd10      	pop	{r4, pc}

0801d0cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d0cc:	b510      	push	{r4, lr}
 801d0ce:	4604      	mov	r4, r0
 801d0d0:	2104      	movs	r1, #4
 801d0d2:	f006 f8b0 	bl	8023236 <_ZdlPvj>
 801d0d6:	4620      	mov	r0, r4
 801d0d8:	bd10      	pop	{r4, pc}

0801d0da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d0da:	b510      	push	{r4, lr}
 801d0dc:	4604      	mov	r4, r0
 801d0de:	2104      	movs	r1, #4
 801d0e0:	f006 f8a9 	bl	8023236 <_ZdlPvj>
 801d0e4:	4620      	mov	r0, r4
 801d0e6:	bd10      	pop	{r4, pc}

0801d0e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d0e8:	b510      	push	{r4, lr}
 801d0ea:	4604      	mov	r4, r0
 801d0ec:	2104      	movs	r1, #4
 801d0ee:	f006 f8a2 	bl	8023236 <_ZdlPvj>
 801d0f2:	4620      	mov	r0, r4
 801d0f4:	bd10      	pop	{r4, pc}

0801d0f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d0f6:	b510      	push	{r4, lr}
 801d0f8:	4604      	mov	r4, r0
 801d0fa:	2104      	movs	r1, #4
 801d0fc:	f006 f89b 	bl	8023236 <_ZdlPvj>
 801d100:	4620      	mov	r0, r4
 801d102:	bd10      	pop	{r4, pc}

0801d104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d104:	b510      	push	{r4, lr}
 801d106:	4604      	mov	r4, r0
 801d108:	2104      	movs	r1, #4
 801d10a:	f006 f894 	bl	8023236 <_ZdlPvj>
 801d10e:	4620      	mov	r0, r4
 801d110:	bd10      	pop	{r4, pc}

0801d112 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d112:	b510      	push	{r4, lr}
 801d114:	4604      	mov	r4, r0
 801d116:	2104      	movs	r1, #4
 801d118:	f006 f88d 	bl	8023236 <_ZdlPvj>
 801d11c:	4620      	mov	r0, r4
 801d11e:	bd10      	pop	{r4, pc}

0801d120 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d120:	b510      	push	{r4, lr}
 801d122:	4604      	mov	r4, r0
 801d124:	2104      	movs	r1, #4
 801d126:	f006 f886 	bl	8023236 <_ZdlPvj>
 801d12a:	4620      	mov	r0, r4
 801d12c:	bd10      	pop	{r4, pc}

0801d12e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d12e:	b510      	push	{r4, lr}
 801d130:	4604      	mov	r4, r0
 801d132:	2104      	movs	r1, #4
 801d134:	f006 f87f 	bl	8023236 <_ZdlPvj>
 801d138:	4620      	mov	r0, r4
 801d13a:	bd10      	pop	{r4, pc}

0801d13c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d13c:	b510      	push	{r4, lr}
 801d13e:	4604      	mov	r4, r0
 801d140:	2104      	movs	r1, #4
 801d142:	f006 f878 	bl	8023236 <_ZdlPvj>
 801d146:	4620      	mov	r0, r4
 801d148:	bd10      	pop	{r4, pc}

0801d14a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d14a:	b510      	push	{r4, lr}
 801d14c:	4604      	mov	r4, r0
 801d14e:	2104      	movs	r1, #4
 801d150:	f006 f871 	bl	8023236 <_ZdlPvj>
 801d154:	4620      	mov	r0, r4
 801d156:	bd10      	pop	{r4, pc}

0801d158 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d158:	b510      	push	{r4, lr}
 801d15a:	4604      	mov	r4, r0
 801d15c:	2104      	movs	r1, #4
 801d15e:	f006 f86a 	bl	8023236 <_ZdlPvj>
 801d162:	4620      	mov	r0, r4
 801d164:	bd10      	pop	{r4, pc}

0801d166 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d16a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801d16e:	9c06      	ldr	r4, [sp, #24]
 801d170:	2800      	cmp	r0, #0
 801d172:	d06e      	beq.n	801d252 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d174:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801d178:	2d00      	cmp	r5, #0
 801d17a:	dd6a      	ble.n	801d252 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d17c:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801d180:	f1bc 0f00 	cmp.w	ip, #0
 801d184:	dd65      	ble.n	801d252 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d186:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801d18a:	28ff      	cmp	r0, #255	; 0xff
 801d18c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d190:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801d194:	fb02 3306 	mla	r3, r2, r6, r3
 801d198:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801d19c:	b2e4      	uxtb	r4, r4
 801d19e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1a2:	4419      	add	r1, r3
 801d1a4:	fb02 f30c 	mul.w	r3, r2, ip
 801d1a8:	eba2 0205 	sub.w	r2, r2, r5
 801d1ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d1b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d1b8:	440b      	add	r3, r1
 801d1ba:	d03e      	beq.n	801d23a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801d1bc:	fa1f fc80 	uxth.w	ip, r0
 801d1c0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801d1c4:	fb06 f60c 	mul.w	r6, r6, ip
 801d1c8:	b280      	uxth	r0, r0
 801d1ca:	fb07 f70c 	mul.w	r7, r7, ip
 801d1ce:	fb04 f40c 	mul.w	r4, r4, ip
 801d1d2:	4299      	cmp	r1, r3
 801d1d4:	d23d      	bcs.n	801d252 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d1d6:	eb01 0c05 	add.w	ip, r1, r5
 801d1da:	458c      	cmp	ip, r1
 801d1dc:	f101 0e03 	add.w	lr, r1, #3
 801d1e0:	d928      	bls.n	801d234 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801d1e2:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d1e6:	fb11 f100 	smulbb	r1, r1, r0
 801d1ea:	4421      	add	r1, r4
 801d1ec:	b289      	uxth	r1, r1
 801d1ee:	f101 0801 	add.w	r8, r1, #1
 801d1f2:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d1f6:	1209      	asrs	r1, r1, #8
 801d1f8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d1fc:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801d200:	fb11 f100 	smulbb	r1, r1, r0
 801d204:	4439      	add	r1, r7
 801d206:	b289      	uxth	r1, r1
 801d208:	f101 0801 	add.w	r8, r1, #1
 801d20c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d210:	1209      	asrs	r1, r1, #8
 801d212:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d216:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d21a:	fb11 f100 	smulbb	r1, r1, r0
 801d21e:	4431      	add	r1, r6
 801d220:	b289      	uxth	r1, r1
 801d222:	f101 0801 	add.w	r8, r1, #1
 801d226:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d22a:	1209      	asrs	r1, r1, #8
 801d22c:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801d230:	4671      	mov	r1, lr
 801d232:	e7d2      	b.n	801d1da <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801d234:	4411      	add	r1, r2
 801d236:	e7cc      	b.n	801d1d2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801d238:	4411      	add	r1, r2
 801d23a:	4299      	cmp	r1, r3
 801d23c:	d209      	bcs.n	801d252 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d23e:	1948      	adds	r0, r1, r5
 801d240:	4281      	cmp	r1, r0
 801d242:	d2f9      	bcs.n	801d238 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801d244:	700c      	strb	r4, [r1, #0]
 801d246:	3103      	adds	r1, #3
 801d248:	f801 7c02 	strb.w	r7, [r1, #-2]
 801d24c:	f801 6c01 	strb.w	r6, [r1, #-1]
 801d250:	e7f6      	b.n	801d240 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801d252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801d258 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d25c:	b093      	sub	sp, #76	; 0x4c
 801d25e:	4699      	mov	r9, r3
 801d260:	4617      	mov	r7, r2
 801d262:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d266:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801d26a:	4604      	mov	r4, r0
 801d26c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d270:	a80c      	add	r0, sp, #48	; 0x30
 801d272:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801d276:	460d      	mov	r5, r1
 801d278:	4649      	mov	r1, r9
 801d27a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d27e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d282:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801d286:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801d28a:	f7f6 f83d 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 801d28e:	4639      	mov	r1, r7
 801d290:	a80c      	add	r0, sp, #48	; 0x30
 801d292:	f7f6 f839 	bl	8013308 <_ZN8touchgfx4RectaNERKS0_>
 801d296:	4b78      	ldr	r3, [pc, #480]	; (801d478 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801d298:	8818      	ldrh	r0, [r3, #0]
 801d29a:	4b78      	ldr	r3, [pc, #480]	; (801d47c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801d29c:	b202      	sxth	r2, r0
 801d29e:	8819      	ldrh	r1, [r3, #0]
 801d2a0:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d2a4:	b20f      	sxth	r7, r1
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	da07      	bge.n	801d2ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801d2aa:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801d2ae:	4463      	add	r3, ip
 801d2b0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801d2ba:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801d2be:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801d2c2:	1ad2      	subs	r2, r2, r3
 801d2c4:	4594      	cmp	ip, r2
 801d2c6:	bfc4      	itt	gt
 801d2c8:	1ac2      	subgt	r2, r0, r3
 801d2ca:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801d2ce:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d2d2:	2a00      	cmp	r2, #0
 801d2d4:	da07      	bge.n	801d2e6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801d2d6:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801d2da:	4462      	add	r2, ip
 801d2dc:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801d2e0:	2200      	movs	r2, #0
 801d2e2:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801d2e6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801d2ea:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801d2ee:	1abf      	subs	r7, r7, r2
 801d2f0:	45bc      	cmp	ip, r7
 801d2f2:	f8df c190 	ldr.w	ip, [pc, #400]	; 801d484 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801d2f6:	bfc8      	it	gt
 801d2f8:	1a8f      	subgt	r7, r1, r2
 801d2fa:	f89c c000 	ldrb.w	ip, [ip]
 801d2fe:	bfc8      	it	gt
 801d300:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801d304:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801d308:	f1bc 0f00 	cmp.w	ip, #0
 801d30c:	d176      	bne.n	801d3fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801d30e:	4287      	cmp	r7, r0
 801d310:	bf14      	ite	ne
 801d312:	2100      	movne	r1, #0
 801d314:	2101      	moveq	r1, #1
 801d316:	2f00      	cmp	r7, #0
 801d318:	9107      	str	r1, [sp, #28]
 801d31a:	dd73      	ble.n	801d404 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801d31c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801d320:	2900      	cmp	r1, #0
 801d322:	9104      	str	r1, [sp, #16]
 801d324:	dd6e      	ble.n	801d404 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801d326:	f8b9 1000 	ldrh.w	r1, [r9]
 801d32a:	a80e      	add	r0, sp, #56	; 0x38
 801d32c:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801d330:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801d334:	1a5b      	subs	r3, r3, r1
 801d336:	a910      	add	r1, sp, #64	; 0x40
 801d338:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801d33c:	b21b      	sxth	r3, r3
 801d33e:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801d342:	f8df a144 	ldr.w	sl, [pc, #324]	; 801d488 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801d346:	9305      	str	r3, [sp, #20]
 801d348:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801d34c:	1ad2      	subs	r2, r2, r3
 801d34e:	b213      	sxth	r3, r2
 801d350:	9306      	str	r3, [sp, #24]
 801d352:	9b05      	ldr	r3, [sp, #20]
 801d354:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801d358:	9b06      	ldr	r3, [sp, #24]
 801d35a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d35e:	9b04      	ldr	r3, [sp, #16]
 801d360:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801d364:	2300      	movs	r3, #0
 801d366:	9310      	str	r3, [sp, #64]	; 0x40
 801d368:	f7fa fc70 	bl	8017c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d36c:	4640      	mov	r0, r8
 801d36e:	f7fa fc45 	bl	8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d372:	a810      	add	r0, sp, #64	; 0x40
 801d374:	f7fa fc42 	bl	8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d378:	4b41      	ldr	r3, [pc, #260]	; (801d480 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801d37a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801d37e:	4628      	mov	r0, r5
 801d380:	881b      	ldrh	r3, [r3, #0]
 801d382:	9308      	str	r3, [sp, #32]
 801d384:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d388:	b21b      	sxth	r3, r3
 801d38a:	9303      	str	r3, [sp, #12]
 801d38c:	682b      	ldr	r3, [r5, #0]
 801d38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d390:	4798      	blx	r3
 801d392:	9a03      	ldr	r2, [sp, #12]
 801d394:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801d398:	4681      	mov	r9, r0
 801d39a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801d39e:	fb13 f302 	smulbb	r3, r3, r2
 801d3a2:	2203      	movs	r2, #3
 801d3a4:	f8da 0000 	ldr.w	r0, [sl]
 801d3a8:	fb15 3302 	smlabb	r3, r5, r2, r3
 801d3ac:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801d3ae:	920b      	str	r2, [sp, #44]	; 0x2c
 801d3b0:	441d      	add	r5, r3
 801d3b2:	6803      	ldr	r3, [r0, #0]
 801d3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d3b6:	4798      	blx	r3
 801d3b8:	9009      	str	r0, [sp, #36]	; 0x24
 801d3ba:	f8da 0000 	ldr.w	r0, [sl]
 801d3be:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d3c2:	6803      	ldr	r3, [r0, #0]
 801d3c4:	910a      	str	r1, [sp, #40]	; 0x28
 801d3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3c8:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801d3cc:	4798      	blx	r3
 801d3ce:	f010 0f01 	tst.w	r0, #1
 801d3d2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801d3d6:	d01e      	beq.n	801d416 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801d3d8:	f8da 0000 	ldr.w	r0, [sl]
 801d3dc:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801d3e0:	6803      	ldr	r3, [r0, #0]
 801d3e2:	9200      	str	r2, [sp, #0]
 801d3e4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801d3e6:	462b      	mov	r3, r5
 801d3e8:	e898 0006 	ldmia.w	r8, {r1, r2}
 801d3ec:	47b0      	blx	r6
 801d3ee:	9b05      	ldr	r3, [sp, #20]
 801d3f0:	80a7      	strh	r7, [r4, #4]
 801d3f2:	8023      	strh	r3, [r4, #0]
 801d3f4:	9b06      	ldr	r3, [sp, #24]
 801d3f6:	8063      	strh	r3, [r4, #2]
 801d3f8:	9b04      	ldr	r3, [sp, #16]
 801d3fa:	e007      	b.n	801d40c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801d3fc:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801d400:	4288      	cmp	r0, r1
 801d402:	e785      	b.n	801d310 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801d404:	2300      	movs	r3, #0
 801d406:	8023      	strh	r3, [r4, #0]
 801d408:	8063      	strh	r3, [r4, #2]
 801d40a:	80a3      	strh	r3, [r4, #4]
 801d40c:	4620      	mov	r0, r4
 801d40e:	80e3      	strh	r3, [r4, #6]
 801d410:	b013      	add	sp, #76	; 0x4c
 801d412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d416:	fb09 f606 	mul.w	r6, r9, r6
 801d41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d41c:	fb11 6602 	smlabb	r6, r1, r2, r6
 801d420:	9a07      	ldr	r2, [sp, #28]
 801d422:	4433      	add	r3, r6
 801d424:	461e      	mov	r6, r3
 801d426:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801d42a:	b16a      	cbz	r2, 801d448 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801d42c:	9a08      	ldr	r2, [sp, #32]
 801d42e:	4593      	cmp	fp, r2
 801d430:	d10a      	bne.n	801d448 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801d432:	f8da 0000 	ldr.w	r0, [sl]
 801d436:	fb09 f303 	mul.w	r3, r9, r3
 801d43a:	4629      	mov	r1, r5
 801d43c:	6802      	ldr	r2, [r0, #0]
 801d43e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801d442:	4632      	mov	r2, r6
 801d444:	47d0      	blx	sl
 801d446:	e7d2      	b.n	801d3ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801d448:	9a03      	ldr	r2, [sp, #12]
 801d44a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801d488 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801d44e:	fb02 5803 	mla	r8, r2, r3, r5
 801d452:	4545      	cmp	r5, r8
 801d454:	d2cb      	bcs.n	801d3ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801d456:	f8db 0000 	ldr.w	r0, [fp]
 801d45a:	4629      	mov	r1, r5
 801d45c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801d460:	6802      	ldr	r2, [r0, #0]
 801d462:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d466:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801d46a:	4632      	mov	r2, r6
 801d46c:	47d0      	blx	sl
 801d46e:	9b03      	ldr	r3, [sp, #12]
 801d470:	444e      	add	r6, r9
 801d472:	441d      	add	r5, r3
 801d474:	e7ed      	b.n	801d452 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801d476:	bf00      	nop
 801d478:	2400fed8 	.word	0x2400fed8
 801d47c:	2400feda 	.word	0x2400feda
 801d480:	2400fede 	.word	0x2400fede
 801d484:	2400fedc 	.word	0x2400fedc
 801d488:	2400fee4 	.word	0x2400fee4

0801d48c <_ZN8touchgfx8LCD24bppC1Ev>:
 801d48c:	2200      	movs	r2, #0
 801d48e:	490c      	ldr	r1, [pc, #48]	; (801d4c0 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801d490:	6042      	str	r2, [r0, #4]
 801d492:	6001      	str	r1, [r0, #0]
 801d494:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d498:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d49c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d4a0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d4a4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d4a8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d4ac:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d4b0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d4b4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d4b8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d4bc:	4770      	bx	lr
 801d4be:	bf00      	nop
 801d4c0:	0802727c 	.word	0x0802727c

0801d4c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4c8:	b091      	sub	sp, #68	; 0x44
 801d4ca:	4607      	mov	r7, r0
 801d4cc:	4688      	mov	r8, r1
 801d4ce:	6810      	ldr	r0, [r2, #0]
 801d4d0:	6851      	ldr	r1, [r2, #4]
 801d4d2:	ac0c      	add	r4, sp, #48	; 0x30
 801d4d4:	4616      	mov	r6, r2
 801d4d6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801d4da:	4d64      	ldr	r5, [pc, #400]	; (801d66c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d4dc:	f8df a190 	ldr.w	sl, [pc, #400]	; 801d670 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d4e0:	c403      	stmia	r4!, {r0, r1}
 801d4e2:	6818      	ldr	r0, [r3, #0]
 801d4e4:	ac0e      	add	r4, sp, #56	; 0x38
 801d4e6:	6859      	ldr	r1, [r3, #4]
 801d4e8:	c403      	stmia	r4!, {r0, r1}
 801d4ea:	a80c      	add	r0, sp, #48	; 0x30
 801d4ec:	f7fa fb86 	bl	8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d4f0:	4631      	mov	r1, r6
 801d4f2:	a80e      	add	r0, sp, #56	; 0x38
 801d4f4:	f7fa fbaa 	bl	8017c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d4f8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d4fc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d500:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d504:	6828      	ldr	r0, [r5, #0]
 801d506:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d50a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801d50e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801d512:	440f      	add	r7, r1
 801d514:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d518:	440a      	add	r2, r1
 801d51a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d51e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d522:	4413      	add	r3, r2
 801d524:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d528:	6803      	ldr	r3, [r0, #0]
 801d52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d52c:	4798      	blx	r3
 801d52e:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d532:	6828      	ldr	r0, [r5, #0]
 801d534:	d01f      	beq.n	801d576 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801d536:	2201      	movs	r2, #1
 801d538:	2500      	movs	r5, #0
 801d53a:	6801      	ldr	r1, [r0, #0]
 801d53c:	b2a4      	uxth	r4, r4
 801d53e:	b2b6      	uxth	r6, r6
 801d540:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d544:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801d548:	250b      	movs	r5, #11
 801d54a:	9507      	str	r5, [sp, #28]
 801d54c:	f8ba 5000 	ldrh.w	r5, [sl]
 801d550:	f8cd 9010 	str.w	r9, [sp, #16]
 801d554:	9602      	str	r6, [sp, #8]
 801d556:	9401      	str	r4, [sp, #4]
 801d558:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801d55c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d560:	9203      	str	r2, [sp, #12]
 801d562:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d566:	9200      	str	r2, [sp, #0]
 801d568:	4642      	mov	r2, r8
 801d56a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d56c:	4639      	mov	r1, r7
 801d56e:	47a0      	blx	r4
 801d570:	b011      	add	sp, #68	; 0x44
 801d572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d576:	6803      	ldr	r3, [r0, #0]
 801d578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d57a:	4798      	blx	r3
 801d57c:	f8ba 5000 	ldrh.w	r5, [sl]
 801d580:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d584:	f04f 0e04 	mov.w	lr, #4
 801d588:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d58c:	436e      	muls	r6, r5
 801d58e:	fb05 2303 	mla	r3, r5, r3, r2
 801d592:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d596:	1b2d      	subs	r5, r5, r4
 801d598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d59c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d5a0:	4418      	add	r0, r3
 801d5a2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d5a6:	1982      	adds	r2, r0, r6
 801d5a8:	1b1b      	subs	r3, r3, r4
 801d5aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d5ae:	930b      	str	r3, [sp, #44]	; 0x2c
 801d5b0:	4290      	cmp	r0, r2
 801d5b2:	d254      	bcs.n	801d65e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801d5b4:	eb00 0a04 	add.w	sl, r0, r4
 801d5b8:	4550      	cmp	r0, sl
 801d5ba:	d24c      	bcs.n	801d656 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801d5bc:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d5c0:	fb1e e101 	smlabb	r1, lr, r1, lr
 801d5c4:	eb08 0c01 	add.w	ip, r8, r1
 801d5c8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801d5cc:	b173      	cbz	r3, 801d5ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d5ce:	2bff      	cmp	r3, #255	; 0xff
 801d5d0:	f818 b001 	ldrb.w	fp, [r8, r1]
 801d5d4:	d10c      	bne.n	801d5f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d5d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d5da:	d109      	bne.n	801d5f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d5dc:	f880 b000 	strb.w	fp, [r0]
 801d5e0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801d5e4:	7043      	strb	r3, [r0, #1]
 801d5e6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801d5ea:	7083      	strb	r3, [r0, #2]
 801d5ec:	3003      	adds	r0, #3
 801d5ee:	e7e3      	b.n	801d5b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d5f0:	fb09 f103 	mul.w	r1, r9, r3
 801d5f4:	1c4b      	adds	r3, r1, #1
 801d5f6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d5fa:	7801      	ldrb	r1, [r0, #0]
 801d5fc:	121b      	asrs	r3, r3, #8
 801d5fe:	b29e      	uxth	r6, r3
 801d600:	43db      	mvns	r3, r3
 801d602:	fb1b fb06 	smulbb	fp, fp, r6
 801d606:	b2db      	uxtb	r3, r3
 801d608:	fb01 b103 	mla	r1, r1, r3, fp
 801d60c:	b289      	uxth	r1, r1
 801d60e:	f101 0b01 	add.w	fp, r1, #1
 801d612:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d616:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d61a:	fb1b fb03 	smulbb	fp, fp, r3
 801d61e:	1209      	asrs	r1, r1, #8
 801d620:	7001      	strb	r1, [r0, #0]
 801d622:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d626:	fb01 b106 	mla	r1, r1, r6, fp
 801d62a:	b289      	uxth	r1, r1
 801d62c:	f101 0b01 	add.w	fp, r1, #1
 801d630:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d634:	1209      	asrs	r1, r1, #8
 801d636:	7041      	strb	r1, [r0, #1]
 801d638:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801d63c:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d640:	fb1c f303 	smulbb	r3, ip, r3
 801d644:	fb01 3606 	mla	r6, r1, r6, r3
 801d648:	b2b6      	uxth	r6, r6
 801d64a:	1c73      	adds	r3, r6, #1
 801d64c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d650:	1236      	asrs	r6, r6, #8
 801d652:	7086      	strb	r6, [r0, #2]
 801d654:	e7ca      	b.n	801d5ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d658:	4428      	add	r0, r5
 801d65a:	441f      	add	r7, r3
 801d65c:	e7a8      	b.n	801d5b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801d65e:	4b03      	ldr	r3, [pc, #12]	; (801d66c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d660:	6818      	ldr	r0, [r3, #0]
 801d662:	6803      	ldr	r3, [r0, #0]
 801d664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d666:	4798      	blx	r3
 801d668:	e782      	b.n	801d570 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d66a:	bf00      	nop
 801d66c:	2400fee4 	.word	0x2400fee4
 801d670:	2400fede 	.word	0x2400fede

0801d674 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d678:	b091      	sub	sp, #68	; 0x44
 801d67a:	4680      	mov	r8, r0
 801d67c:	460e      	mov	r6, r1
 801d67e:	6810      	ldr	r0, [r2, #0]
 801d680:	6851      	ldr	r1, [r2, #4]
 801d682:	ad0c      	add	r5, sp, #48	; 0x30
 801d684:	4614      	mov	r4, r2
 801d686:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d68a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801d824 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801d68e:	f8df a198 	ldr.w	sl, [pc, #408]	; 801d828 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d692:	c503      	stmia	r5!, {r0, r1}
 801d694:	6818      	ldr	r0, [r3, #0]
 801d696:	ad0e      	add	r5, sp, #56	; 0x38
 801d698:	6859      	ldr	r1, [r3, #4]
 801d69a:	c503      	stmia	r5!, {r0, r1}
 801d69c:	a80c      	add	r0, sp, #48	; 0x30
 801d69e:	f7fa faad 	bl	8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d6a2:	4621      	mov	r1, r4
 801d6a4:	a80e      	add	r0, sp, #56	; 0x38
 801d6a6:	f7fa fad1 	bl	8017c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d6aa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d6ae:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d6b2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d6b6:	f8d9 0000 	ldr.w	r0, [r9]
 801d6ba:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d6be:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801d6c2:	eb08 0401 	add.w	r4, r8, r1
 801d6c6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d6ca:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801d6ce:	440a      	add	r2, r1
 801d6d0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d6d4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d6d8:	4413      	add	r3, r2
 801d6da:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d6de:	6803      	ldr	r3, [r0, #0]
 801d6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6e2:	4798      	blx	r3
 801d6e4:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d6e8:	f8d9 0000 	ldr.w	r0, [r9]
 801d6ec:	d022      	beq.n	801d734 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801d6ee:	2200      	movs	r2, #0
 801d6f0:	f04f 0c01 	mov.w	ip, #1
 801d6f4:	6801      	ldr	r1, [r0, #0]
 801d6f6:	b2ad      	uxth	r5, r5
 801d6f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d6fc:	e9cd c208 	strd	ip, r2, [sp, #32]
 801d700:	f04f 0c0b 	mov.w	ip, #11
 801d704:	f8cd c01c 	str.w	ip, [sp, #28]
 801d708:	f8ba c000 	ldrh.w	ip, [sl]
 801d70c:	9704      	str	r7, [sp, #16]
 801d70e:	9502      	str	r5, [sp, #8]
 801d710:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801d714:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d718:	9203      	str	r2, [sp, #12]
 801d71a:	fa1f f288 	uxth.w	r2, r8
 801d71e:	9201      	str	r2, [sp, #4]
 801d720:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d724:	9200      	str	r2, [sp, #0]
 801d726:	4632      	mov	r2, r6
 801d728:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d72a:	4621      	mov	r1, r4
 801d72c:	47a8      	blx	r5
 801d72e:	b011      	add	sp, #68	; 0x44
 801d730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d734:	6803      	ldr	r3, [r0, #0]
 801d736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d738:	4798      	blx	r3
 801d73a:	f8ba 2000 	ldrh.w	r2, [sl]
 801d73e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d742:	f04f 0e03 	mov.w	lr, #3
 801d746:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d74a:	4355      	muls	r5, r2
 801d74c:	fa1f fc87 	uxth.w	ip, r7
 801d750:	fb02 1303 	mla	r3, r2, r3, r1
 801d754:	eba2 0208 	sub.w	r2, r2, r8
 801d758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d75c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d760:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d764:	4418      	add	r0, r3
 801d766:	920b      	str	r2, [sp, #44]	; 0x2c
 801d768:	1943      	adds	r3, r0, r5
 801d76a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d76e:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801d772:	eba2 0208 	sub.w	r2, r2, r8
 801d776:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d77a:	b2ad      	uxth	r5, r5
 801d77c:	4298      	cmp	r0, r3
 801d77e:	d24a      	bcs.n	801d816 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801d780:	eb00 0908 	add.w	r9, r0, r8
 801d784:	4621      	mov	r1, r4
 801d786:	4548      	cmp	r0, r9
 801d788:	460c      	mov	r4, r1
 801d78a:	d240      	bcs.n	801d80e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801d78c:	f04f 0a04 	mov.w	sl, #4
 801d790:	7824      	ldrb	r4, [r4, #0]
 801d792:	2fff      	cmp	r7, #255	; 0xff
 801d794:	f101 0101 	add.w	r1, r1, #1
 801d798:	fb1e a404 	smlabb	r4, lr, r4, sl
 801d79c:	eb06 0a04 	add.w	sl, r6, r4
 801d7a0:	f816 b004 	ldrb.w	fp, [r6, r4]
 801d7a4:	d02b      	beq.n	801d7fe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801d7a6:	7804      	ldrb	r4, [r0, #0]
 801d7a8:	fb14 f405 	smulbb	r4, r4, r5
 801d7ac:	fb0b 440c 	mla	r4, fp, ip, r4
 801d7b0:	b2a4      	uxth	r4, r4
 801d7b2:	f104 0b01 	add.w	fp, r4, #1
 801d7b6:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d7ba:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d7be:	fb1b fb05 	smulbb	fp, fp, r5
 801d7c2:	1224      	asrs	r4, r4, #8
 801d7c4:	7004      	strb	r4, [r0, #0]
 801d7c6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801d7ca:	fb04 b40c 	mla	r4, r4, ip, fp
 801d7ce:	b2a4      	uxth	r4, r4
 801d7d0:	f104 0b01 	add.w	fp, r4, #1
 801d7d4:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d7d8:	1224      	asrs	r4, r4, #8
 801d7da:	7044      	strb	r4, [r0, #1]
 801d7dc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801d7e0:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d7e4:	fb1a fa05 	smulbb	sl, sl, r5
 801d7e8:	fb04 a40c 	mla	r4, r4, ip, sl
 801d7ec:	b2a4      	uxth	r4, r4
 801d7ee:	f104 0a01 	add.w	sl, r4, #1
 801d7f2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d7f6:	1224      	asrs	r4, r4, #8
 801d7f8:	7084      	strb	r4, [r0, #2]
 801d7fa:	3003      	adds	r0, #3
 801d7fc:	e7c3      	b.n	801d786 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801d7fe:	f880 b000 	strb.w	fp, [r0]
 801d802:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801d806:	7044      	strb	r4, [r0, #1]
 801d808:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801d80c:	e7f4      	b.n	801d7f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801d80e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d810:	4420      	add	r0, r4
 801d812:	188c      	adds	r4, r1, r2
 801d814:	e7b2      	b.n	801d77c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801d816:	4b03      	ldr	r3, [pc, #12]	; (801d824 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801d818:	6818      	ldr	r0, [r3, #0]
 801d81a:	6803      	ldr	r3, [r0, #0]
 801d81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d81e:	4798      	blx	r3
 801d820:	e785      	b.n	801d72e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801d822:	bf00      	nop
 801d824:	2400fee4 	.word	0x2400fee4
 801d828:	2400fede 	.word	0x2400fede

0801d82c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d82c:	b430      	push	{r4, r5}
 801d82e:	780d      	ldrb	r5, [r1, #0]
 801d830:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d834:	b11d      	cbz	r5, 801d83e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801d836:	2d01      	cmp	r5, #1
 801d838:	d005      	beq.n	801d846 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d83a:	bc30      	pop	{r4, r5}
 801d83c:	4770      	bx	lr
 801d83e:	9402      	str	r4, [sp, #8]
 801d840:	bc30      	pop	{r4, r5}
 801d842:	f7ff be3f 	b.w	801d4c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d846:	9402      	str	r4, [sp, #8]
 801d848:	bc30      	pop	{r4, r5}
 801d84a:	f7ff bf13 	b.w	801d674 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801d850 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801d850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d854:	4605      	mov	r5, r0
 801d856:	b08f      	sub	sp, #60	; 0x3c
 801d858:	460c      	mov	r4, r1
 801d85a:	461f      	mov	r7, r3
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d052      	beq.n	801d906 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801d860:	6808      	ldr	r0, [r1, #0]
 801d862:	ab0a      	add	r3, sp, #40	; 0x28
 801d864:	6849      	ldr	r1, [r1, #4]
 801d866:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801da30 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801d86a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801da34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801d86e:	c303      	stmia	r3!, {r0, r1}
 801d870:	6810      	ldr	r0, [r2, #0]
 801d872:	ab0c      	add	r3, sp, #48	; 0x30
 801d874:	6851      	ldr	r1, [r2, #4]
 801d876:	c303      	stmia	r3!, {r0, r1}
 801d878:	a80a      	add	r0, sp, #40	; 0x28
 801d87a:	f7fa f9bf 	bl	8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d87e:	4621      	mov	r1, r4
 801d880:	a80c      	add	r0, sp, #48	; 0x30
 801d882:	f7fa f9e3 	bl	8017c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d886:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d88a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d88e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d892:	f8d8 0000 	ldr.w	r0, [r8]
 801d896:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d89a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801d89e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801d8a2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801d8a6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d8aa:	440a      	add	r2, r1
 801d8ac:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d8b0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d8b4:	4413      	add	r3, r2
 801d8b6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d8ba:	6803      	ldr	r3, [r0, #0]
 801d8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8be:	4798      	blx	r3
 801d8c0:	2fff      	cmp	r7, #255	; 0xff
 801d8c2:	d023      	beq.n	801d90c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801d8c4:	f010 0f04 	tst.w	r0, #4
 801d8c8:	f8d8 0000 	ldr.w	r0, [r8]
 801d8cc:	d021      	beq.n	801d912 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801d8ce:	2100      	movs	r1, #0
 801d8d0:	f04f 0e01 	mov.w	lr, #1
 801d8d4:	f8d0 c000 	ldr.w	ip, [r0]
 801d8d8:	b2a4      	uxth	r4, r4
 801d8da:	9106      	str	r1, [sp, #24]
 801d8dc:	b2b6      	uxth	r6, r6
 801d8de:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d8e2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d8e6:	e9cd e107 	strd	lr, r1, [sp, #28]
 801d8ea:	f8b9 e000 	ldrh.w	lr, [r9]
 801d8ee:	9703      	str	r7, [sp, #12]
 801d8f0:	9401      	str	r4, [sp, #4]
 801d8f2:	9600      	str	r6, [sp, #0]
 801d8f4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d8f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d8fc:	9102      	str	r1, [sp, #8]
 801d8fe:	4629      	mov	r1, r5
 801d900:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801d904:	47a0      	blx	r4
 801d906:	b00f      	add	sp, #60	; 0x3c
 801d908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d90c:	f010 0f01 	tst.w	r0, #1
 801d910:	e7da      	b.n	801d8c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801d912:	6803      	ldr	r3, [r0, #0]
 801d914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d916:	4798      	blx	r3
 801d918:	f8b9 1000 	ldrh.w	r1, [r9]
 801d91c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d920:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801d924:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d928:	434c      	muls	r4, r1
 801d92a:	2fff      	cmp	r7, #255	; 0xff
 801d92c:	fb01 2303 	mla	r3, r1, r3, r2
 801d930:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d934:	eba1 0106 	sub.w	r1, r1, r6
 801d938:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d93c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d940:	4418      	add	r0, r3
 801d942:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801d946:	eba3 0606 	sub.w	r6, r3, r6
 801d94a:	4404      	add	r4, r0
 801d94c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801d950:	d04a      	beq.n	801d9e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801d952:	43fa      	mvns	r2, r7
 801d954:	b2bb      	uxth	r3, r7
 801d956:	b2d7      	uxtb	r7, r2
 801d958:	42a0      	cmp	r0, r4
 801d95a:	d263      	bcs.n	801da24 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801d95c:	eb00 0e0c 	add.w	lr, r0, ip
 801d960:	4586      	cmp	lr, r0
 801d962:	f100 0803 	add.w	r8, r0, #3
 801d966:	d93a      	bls.n	801d9de <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801d968:	f835 2b02 	ldrh.w	r2, [r5], #2
 801d96c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801d970:	00d0      	lsls	r0, r2, #3
 801d972:	fb19 f907 	smulbb	r9, r9, r7
 801d976:	b2c0      	uxtb	r0, r0
 801d978:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801d97c:	fb00 9003 	mla	r0, r0, r3, r9
 801d980:	b280      	uxth	r0, r0
 801d982:	f100 0901 	add.w	r9, r0, #1
 801d986:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801d98a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801d98e:	fb19 f907 	smulbb	r9, r9, r7
 801d992:	1200      	asrs	r0, r0, #8
 801d994:	f808 0c03 	strb.w	r0, [r8, #-3]
 801d998:	10d0      	asrs	r0, r2, #3
 801d99a:	1212      	asrs	r2, r2, #8
 801d99c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d9a0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d9a4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801d9a8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d9ac:	fb00 9003 	mla	r0, r0, r3, r9
 801d9b0:	b280      	uxth	r0, r0
 801d9b2:	f100 0901 	add.w	r9, r0, #1
 801d9b6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801d9ba:	1200      	asrs	r0, r0, #8
 801d9bc:	f808 0c02 	strb.w	r0, [r8, #-2]
 801d9c0:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801d9c4:	fb10 f007 	smulbb	r0, r0, r7
 801d9c8:	fb02 0203 	mla	r2, r2, r3, r0
 801d9cc:	b292      	uxth	r2, r2
 801d9ce:	1c50      	adds	r0, r2, #1
 801d9d0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d9d4:	4640      	mov	r0, r8
 801d9d6:	1212      	asrs	r2, r2, #8
 801d9d8:	f808 2c01 	strb.w	r2, [r8, #-1]
 801d9dc:	e7c0      	b.n	801d960 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801d9de:	4408      	add	r0, r1
 801d9e0:	4435      	add	r5, r6
 801d9e2:	e7b9      	b.n	801d958 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801d9e4:	4408      	add	r0, r1
 801d9e6:	4435      	add	r5, r6
 801d9e8:	42a0      	cmp	r0, r4
 801d9ea:	d21b      	bcs.n	801da24 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801d9ec:	eb00 070c 	add.w	r7, r0, ip
 801d9f0:	42b8      	cmp	r0, r7
 801d9f2:	d2f7      	bcs.n	801d9e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801d9f4:	f835 3b02 	ldrh.w	r3, [r5], #2
 801d9f8:	3003      	adds	r0, #3
 801d9fa:	00da      	lsls	r2, r3, #3
 801d9fc:	b2d2      	uxtb	r2, r2
 801d9fe:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801da02:	f800 2c03 	strb.w	r2, [r0, #-3]
 801da06:	10da      	asrs	r2, r3, #3
 801da08:	121b      	asrs	r3, r3, #8
 801da0a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801da0e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801da12:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801da16:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801da1a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801da1e:	f800 3c01 	strb.w	r3, [r0, #-1]
 801da22:	e7e5      	b.n	801d9f0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801da24:	4b02      	ldr	r3, [pc, #8]	; (801da30 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801da26:	6818      	ldr	r0, [r3, #0]
 801da28:	6803      	ldr	r3, [r0, #0]
 801da2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da2c:	4798      	blx	r3
 801da2e:	e76a      	b.n	801d906 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801da30:	2400fee4 	.word	0x2400fee4
 801da34:	2400fede 	.word	0x2400fede

0801da38 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801da38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da3c:	b08a      	sub	sp, #40	; 0x28
 801da3e:	460d      	mov	r5, r1
 801da40:	4604      	mov	r4, r0
 801da42:	461e      	mov	r6, r3
 801da44:	6808      	ldr	r0, [r1, #0]
 801da46:	ab06      	add	r3, sp, #24
 801da48:	6849      	ldr	r1, [r1, #4]
 801da4a:	4f5d      	ldr	r7, [pc, #372]	; (801dbc0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801da4c:	c303      	stmia	r3!, {r0, r1}
 801da4e:	6810      	ldr	r0, [r2, #0]
 801da50:	ab08      	add	r3, sp, #32
 801da52:	6851      	ldr	r1, [r2, #4]
 801da54:	c303      	stmia	r3!, {r0, r1}
 801da56:	a806      	add	r0, sp, #24
 801da58:	f7fa f8d0 	bl	8017bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da5c:	4629      	mov	r1, r5
 801da5e:	a808      	add	r0, sp, #32
 801da60:	f7fa f8f4 	bl	8017c4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da64:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801da68:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801da6c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801da70:	6838      	ldr	r0, [r7, #0]
 801da72:	fb11 2103 	smlabb	r1, r1, r3, r2
 801da76:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801da7a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801da7e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801da82:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801da86:	440a      	add	r2, r1
 801da88:	f8ad 2020 	strh.w	r2, [sp, #32]
 801da8c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801da90:	4413      	add	r3, r2
 801da92:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801da96:	6803      	ldr	r3, [r0, #0]
 801da98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da9a:	4798      	blx	r3
 801da9c:	2eff      	cmp	r6, #255	; 0xff
 801da9e:	d119      	bne.n	801dad4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801daa0:	f010 0f20 	tst.w	r0, #32
 801daa4:	6838      	ldr	r0, [r7, #0]
 801daa6:	d018      	beq.n	801dada <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801daa8:	b2ad      	uxth	r5, r5
 801daaa:	2700      	movs	r7, #0
 801daac:	6801      	ldr	r1, [r0, #0]
 801daae:	9501      	str	r5, [sp, #4]
 801dab0:	fa1f f588 	uxth.w	r5, r8
 801dab4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dab8:	9500      	str	r5, [sp, #0]
 801daba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dabe:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801dac2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801dac6:	9602      	str	r6, [sp, #8]
 801dac8:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801daca:	4621      	mov	r1, r4
 801dacc:	47a8      	blx	r5
 801dace:	b00a      	add	sp, #40	; 0x28
 801dad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dad4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dad8:	e7e4      	b.n	801daa4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801dada:	6803      	ldr	r3, [r0, #0]
 801dadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dade:	4798      	blx	r3
 801dae0:	4b38      	ldr	r3, [pc, #224]	; (801dbc4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801dae2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dae6:	f8b3 c000 	ldrh.w	ip, [r3]
 801daea:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801daee:	fb0c f505 	mul.w	r5, ip, r5
 801daf2:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801daf6:	fb0c 2303 	mla	r3, ip, r3, r2
 801dafa:	ebac 0c08 	sub.w	ip, ip, r8
 801dafe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801db02:	ebae 0e08 	sub.w	lr, lr, r8
 801db06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db0a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801db0e:	4418      	add	r0, r3
 801db10:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801db14:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801db18:	4405      	add	r5, r0
 801db1a:	42a8      	cmp	r0, r5
 801db1c:	d24a      	bcs.n	801dbb4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801db1e:	eb00 0803 	add.w	r8, r0, r3
 801db22:	4540      	cmp	r0, r8
 801db24:	d243      	bcs.n	801dbae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801db26:	78e2      	ldrb	r2, [r4, #3]
 801db28:	b15a      	cbz	r2, 801db42 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801db2a:	2aff      	cmp	r2, #255	; 0xff
 801db2c:	f894 9000 	ldrb.w	r9, [r4]
 801db30:	d10a      	bne.n	801db48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801db32:	2eff      	cmp	r6, #255	; 0xff
 801db34:	d108      	bne.n	801db48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801db36:	f880 9000 	strb.w	r9, [r0]
 801db3a:	7862      	ldrb	r2, [r4, #1]
 801db3c:	7042      	strb	r2, [r0, #1]
 801db3e:	78a2      	ldrb	r2, [r4, #2]
 801db40:	7082      	strb	r2, [r0, #2]
 801db42:	3003      	adds	r0, #3
 801db44:	3404      	adds	r4, #4
 801db46:	e7ec      	b.n	801db22 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801db48:	4372      	muls	r2, r6
 801db4a:	1c51      	adds	r1, r2, #1
 801db4c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801db50:	1209      	asrs	r1, r1, #8
 801db52:	fa1f fa81 	uxth.w	sl, r1
 801db56:	43c9      	mvns	r1, r1
 801db58:	fb19 f90a 	smulbb	r9, r9, sl
 801db5c:	b2ca      	uxtb	r2, r1
 801db5e:	7801      	ldrb	r1, [r0, #0]
 801db60:	fb01 9902 	mla	r9, r1, r2, r9
 801db64:	fa1f f989 	uxth.w	r9, r9
 801db68:	f109 0101 	add.w	r1, r9, #1
 801db6c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801db70:	ea4f 2929 	mov.w	r9, r9, asr #8
 801db74:	f880 9000 	strb.w	r9, [r0]
 801db78:	f890 9001 	ldrb.w	r9, [r0, #1]
 801db7c:	7861      	ldrb	r1, [r4, #1]
 801db7e:	fb19 f902 	smulbb	r9, r9, r2
 801db82:	fb01 910a 	mla	r1, r1, sl, r9
 801db86:	b289      	uxth	r1, r1
 801db88:	f101 0901 	add.w	r9, r1, #1
 801db8c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801db90:	1209      	asrs	r1, r1, #8
 801db92:	7041      	strb	r1, [r0, #1]
 801db94:	7881      	ldrb	r1, [r0, #2]
 801db96:	f894 9002 	ldrb.w	r9, [r4, #2]
 801db9a:	fb11 f202 	smulbb	r2, r1, r2
 801db9e:	fb09 220a 	mla	r2, r9, sl, r2
 801dba2:	b292      	uxth	r2, r2
 801dba4:	1c51      	adds	r1, r2, #1
 801dba6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801dbaa:	1212      	asrs	r2, r2, #8
 801dbac:	e7c8      	b.n	801db40 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801dbae:	4460      	add	r0, ip
 801dbb0:	4474      	add	r4, lr
 801dbb2:	e7b2      	b.n	801db1a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801dbb4:	6838      	ldr	r0, [r7, #0]
 801dbb6:	6803      	ldr	r3, [r0, #0]
 801dbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbba:	4798      	blx	r3
 801dbbc:	e787      	b.n	801dace <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801dbbe:	bf00      	nop
 801dbc0:	2400fee4 	.word	0x2400fee4
 801dbc4:	2400fede 	.word	0x2400fede

0801dbc8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dbc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dbcc:	b085      	sub	sp, #20
 801dbce:	4606      	mov	r6, r0
 801dbd0:	460c      	mov	r4, r1
 801dbd2:	4691      	mov	r9, r2
 801dbd4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801dbd8:	4698      	mov	r8, r3
 801dbda:	b31d      	cbz	r5, 801dc24 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dbdc:	4608      	mov	r0, r1
 801dbde:	f7fd fa4f 	bl	801b080 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dbe2:	4607      	mov	r7, r0
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f7fd fa7f 	bl	801b0e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dbea:	f8ad 000e 	strh.w	r0, [sp, #14]
 801dbee:	4620      	mov	r0, r4
 801dbf0:	f8ad 9008 	strh.w	r9, [sp, #8]
 801dbf4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801dbf8:	f8ad 700c 	strh.w	r7, [sp, #12]
 801dbfc:	f7fd fb78 	bl	801b2f0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc00:	280b      	cmp	r0, #11
 801dc02:	d80f      	bhi.n	801dc24 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dc04:	e8df f000 	tbb	[pc, r0]
 801dc08:	0e062920 	.word	0x0e062920
 801dc0c:	0e0e0e0e 	.word	0x0e0e0e0e
 801dc10:	110e0e0e 	.word	0x110e0e0e
 801dc14:	4620      	mov	r0, r4
 801dc16:	f7fd fae7 	bl	801b1e8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc1a:	462b      	mov	r3, r5
 801dc1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dc1e:	a902      	add	r1, sp, #8
 801dc20:	f7ff ff0a 	bl	801da38 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dc24:	b005      	add	sp, #20
 801dc26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc2a:	4620      	mov	r0, r4
 801dc2c:	f7fd fadc 	bl	801b1e8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc30:	4606      	mov	r6, r0
 801dc32:	4620      	mov	r0, r4
 801dc34:	f7fd fb08 	bl	801b248 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dc38:	9500      	str	r5, [sp, #0]
 801dc3a:	4601      	mov	r1, r0
 801dc3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc3e:	aa02      	add	r2, sp, #8
 801dc40:	4630      	mov	r0, r6
 801dc42:	f7ff fdf3 	bl	801d82c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801dc46:	e7ed      	b.n	801dc24 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dc48:	4620      	mov	r0, r4
 801dc4a:	f7fd facd 	bl	801b1e8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc4e:	462b      	mov	r3, r5
 801dc50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dc52:	a902      	add	r1, sp, #8
 801dc54:	f7ff fdfc 	bl	801d850 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801dc58:	e7e4      	b.n	801dc24 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dc5a:	6833      	ldr	r3, [r6, #0]
 801dc5c:	4620      	mov	r0, r4
 801dc5e:	68df      	ldr	r7, [r3, #12]
 801dc60:	f7fd fac2 	bl	801b1e8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc64:	2300      	movs	r3, #0
 801dc66:	4601      	mov	r1, r0
 801dc68:	aa02      	add	r2, sp, #8
 801dc6a:	4630      	mov	r0, r6
 801dc6c:	e9cd 5300 	strd	r5, r3, [sp]
 801dc70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc72:	47b8      	blx	r7
 801dc74:	e7d6      	b.n	801dc24 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801dc76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801dc76:	b4f0      	push	{r4, r5, r6, r7}
 801dc78:	4616      	mov	r6, r2
 801dc7a:	461c      	mov	r4, r3
 801dc7c:	460d      	mov	r5, r1
 801dc7e:	9a04      	ldr	r2, [sp, #16]
 801dc80:	2e01      	cmp	r6, #1
 801dc82:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dc86:	d00e      	beq.n	801dca6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801dc88:	d303      	bcc.n	801dc92 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801dc8a:	2e02      	cmp	r6, #2
 801dc8c:	d006      	beq.n	801dc9c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801dc8e:	bcf0      	pop	{r4, r5, r6, r7}
 801dc90:	4770      	bx	lr
 801dc92:	4621      	mov	r1, r4
 801dc94:	4628      	mov	r0, r5
 801dc96:	bcf0      	pop	{r4, r5, r6, r7}
 801dc98:	f7ff bdda 	b.w	801d850 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801dc9c:	4621      	mov	r1, r4
 801dc9e:	4628      	mov	r0, r5
 801dca0:	bcf0      	pop	{r4, r5, r6, r7}
 801dca2:	f7ff bec9 	b.w	801da38 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dca6:	6805      	ldr	r5, [r0, #0]
 801dca8:	2600      	movs	r6, #0
 801dcaa:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801dcae:	68ed      	ldr	r5, [r5, #12]
 801dcb0:	4613      	mov	r3, r2
 801dcb2:	4622      	mov	r2, r4
 801dcb4:	46ac      	mov	ip, r5
 801dcb6:	bcf0      	pop	{r4, r5, r6, r7}
 801dcb8:	4760      	bx	ip
	...

0801dcbc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801dcbc:	b160      	cbz	r0, 801dcd8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801dcbe:	2903      	cmp	r1, #3
 801dcc0:	d818      	bhi.n	801dcf4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801dcc2:	e8df f001 	tbb	[pc, r1]
 801dcc6:	1902      	.short	0x1902
 801dcc8:	1b06      	.short	0x1b06
 801dcca:	4b0e      	ldr	r3, [pc, #56]	; (801dd04 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801dccc:	8818      	ldrh	r0, [r3, #0]
 801dcce:	4240      	negs	r0, r0
 801dcd0:	4770      	bx	lr
 801dcd2:	4b0c      	ldr	r3, [pc, #48]	; (801dd04 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801dcd4:	8818      	ldrh	r0, [r3, #0]
 801dcd6:	4770      	bx	lr
 801dcd8:	2903      	cmp	r1, #3
 801dcda:	d80b      	bhi.n	801dcf4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801dcdc:	a301      	add	r3, pc, #4	; (adr r3, 801dce4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801dcde:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801dce2:	bf00      	nop
 801dce4:	0801dcf9 	.word	0x0801dcf9
 801dce8:	0801dcd3 	.word	0x0801dcd3
 801dcec:	0801dcfd 	.word	0x0801dcfd
 801dcf0:	0801dccb 	.word	0x0801dccb
 801dcf4:	2000      	movs	r0, #0
 801dcf6:	4770      	bx	lr
 801dcf8:	2001      	movs	r0, #1
 801dcfa:	4770      	bx	lr
 801dcfc:	f04f 30ff 	mov.w	r0, #4294967295
 801dd00:	4770      	bx	lr
 801dd02:	bf00      	nop
 801dd04:	2400fede 	.word	0x2400fede

0801dd08 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801dd08:	b160      	cbz	r0, 801dd24 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801dd0a:	2903      	cmp	r1, #3
 801dd0c:	d818      	bhi.n	801dd40 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801dd0e:	e8df f001 	tbb	[pc, r1]
 801dd12:	0219      	.short	0x0219
 801dd14:	051b      	.short	0x051b
 801dd16:	4b0e      	ldr	r3, [pc, #56]	; (801dd50 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801dd18:	8818      	ldrh	r0, [r3, #0]
 801dd1a:	4770      	bx	lr
 801dd1c:	4b0c      	ldr	r3, [pc, #48]	; (801dd50 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801dd1e:	8818      	ldrh	r0, [r3, #0]
 801dd20:	4240      	negs	r0, r0
 801dd22:	4770      	bx	lr
 801dd24:	2903      	cmp	r1, #3
 801dd26:	d80b      	bhi.n	801dd40 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801dd28:	a301      	add	r3, pc, #4	; (adr r3, 801dd30 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801dd2a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801dd2e:	bf00      	nop
 801dd30:	0801dd17 	.word	0x0801dd17
 801dd34:	0801dd49 	.word	0x0801dd49
 801dd38:	0801dd1d 	.word	0x0801dd1d
 801dd3c:	0801dd45 	.word	0x0801dd45
 801dd40:	2000      	movs	r0, #0
 801dd42:	4770      	bx	lr
 801dd44:	2001      	movs	r0, #1
 801dd46:	4770      	bx	lr
 801dd48:	f04f 30ff 	mov.w	r0, #4294967295
 801dd4c:	4770      	bx	lr
 801dd4e:	bf00      	nop
 801dd50:	2400fede 	.word	0x2400fede

0801dd54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801dd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd58:	b097      	sub	sp, #92	; 0x5c
 801dd5a:	910b      	str	r1, [sp, #44]	; 0x2c
 801dd5c:	a912      	add	r1, sp, #72	; 0x48
 801dd5e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801dd62:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801dd66:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801dd6a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801dd6e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801dd72:	e881 000c 	stmia.w	r1, {r2, r3}
 801dd76:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801dd7a:	930a      	str	r3, [sp, #40]	; 0x28
 801dd7c:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801dd80:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801dd84:	9311      	str	r3, [sp, #68]	; 0x44
 801dd86:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801dd8a:	798d      	ldrb	r5, [r1, #6]
 801dd8c:	930c      	str	r3, [sp, #48]	; 0x30
 801dd8e:	7b4b      	ldrb	r3, [r1, #13]
 801dd90:	0158      	lsls	r0, r3, #5
 801dd92:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801dd96:	4328      	orrs	r0, r5
 801dd98:	9009      	str	r0, [sp, #36]	; 0x24
 801dd9a:	f000 817c 	beq.w	801e096 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801dd9e:	011b      	lsls	r3, r3, #4
 801dda0:	79c8      	ldrb	r0, [r1, #7]
 801dda2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801dda6:	4303      	orrs	r3, r0
 801dda8:	930e      	str	r3, [sp, #56]	; 0x38
 801ddaa:	f000 8174 	beq.w	801e096 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ddae:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ddb2:	b29b      	uxth	r3, r3
 801ddb4:	2f00      	cmp	r7, #0
 801ddb6:	f000 8116 	beq.w	801dfe6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801ddba:	1aff      	subs	r7, r7, r3
 801ddbc:	b2bf      	uxth	r7, r7
 801ddbe:	043b      	lsls	r3, r7, #16
 801ddc0:	d502      	bpl.n	801ddc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ddc2:	1bf6      	subs	r6, r6, r7
 801ddc4:	2700      	movs	r7, #0
 801ddc6:	b236      	sxth	r6, r6
 801ddc8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ddcc:	a812      	add	r0, sp, #72	; 0x48
 801ddce:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ddd2:	428e      	cmp	r6, r1
 801ddd4:	b28b      	uxth	r3, r1
 801ddd6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801ddda:	bfbf      	itttt	lt
 801dddc:	18ff      	addlt	r7, r7, r3
 801ddde:	1bbe      	sublt	r6, r7, r6
 801dde0:	b2b7      	uxthlt	r7, r6
 801dde2:	460e      	movlt	r6, r1
 801dde4:	8891      	ldrh	r1, [r2, #4]
 801dde6:	440b      	add	r3, r1
 801dde8:	4631      	mov	r1, r6
 801ddea:	b21b      	sxth	r3, r3
 801ddec:	9310      	str	r3, [sp, #64]	; 0x40
 801ddee:	88d3      	ldrh	r3, [r2, #6]
 801ddf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ddf2:	449a      	add	sl, r3
 801ddf4:	fa0f f38a 	sxth.w	r3, sl
 801ddf8:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801ddfc:	930f      	str	r3, [sp, #60]	; 0x3c
 801ddfe:	4bb5      	ldr	r3, [pc, #724]	; (801e0d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801de00:	f893 b000 	ldrb.w	fp, [r3]
 801de04:	f10b 3cff 	add.w	ip, fp, #4294967295
 801de08:	f1dc 0300 	rsbs	r3, ip, #0
 801de0c:	eb43 030c 	adc.w	r3, r3, ip
 801de10:	930d      	str	r3, [sp, #52]	; 0x34
 801de12:	464b      	mov	r3, r9
 801de14:	f7f9 fd6d 	bl	80178f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801de18:	4631      	mov	r1, r6
 801de1a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801de1e:	464b      	mov	r3, r9
 801de20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801de22:	a812      	add	r0, sp, #72	; 0x48
 801de24:	f7f9 fd82 	bl	801792c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801de28:	a916      	add	r1, sp, #88	; 0x58
 801de2a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801de2e:	a815      	add	r0, sp, #84	; 0x54
 801de30:	f7f9 fea2 	bl	8017b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801de34:	f1b9 0f00 	cmp.w	r9, #0
 801de38:	f040 80d8 	bne.w	801dfec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801de3c:	f1bb 0f01 	cmp.w	fp, #1
 801de40:	f040 80dc 	bne.w	801dffc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801de44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801de46:	b153      	cbz	r3, 801de5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801de48:	2508      	movs	r5, #8
 801de4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de4c:	fb95 f3f8 	sdiv	r3, r5, r8
 801de50:	1e5d      	subs	r5, r3, #1
 801de52:	4415      	add	r5, r2
 801de54:	fb95 f5f3 	sdiv	r5, r5, r3
 801de58:	fb15 f503 	smulbb	r5, r5, r3
 801de5c:	b2ad      	uxth	r5, r5
 801de5e:	b907      	cbnz	r7, 801de62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801de60:	b16c      	cbz	r4, 801de7e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801de62:	fb04 7305 	mla	r3, r4, r5, r7
 801de66:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801de68:	ebaa 0a04 	sub.w	sl, sl, r4
 801de6c:	fb08 f303 	mul.w	r3, r8, r3
 801de70:	fa1f fa8a 	uxth.w	sl, sl
 801de74:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801de78:	f003 0407 	and.w	r4, r3, #7
 801de7c:	9226      	str	r2, [sp, #152]	; 0x98
 801de7e:	4649      	mov	r1, r9
 801de80:	980d      	ldr	r0, [sp, #52]	; 0x34
 801de82:	f7ff ff1b 	bl	801dcbc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801de86:	4683      	mov	fp, r0
 801de88:	980d      	ldr	r0, [sp, #52]	; 0x34
 801de8a:	f7ff ff3d 	bl	801dd08 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801de8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801de90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801de92:	4681      	mov	r9, r0
 801de94:	1a9b      	subs	r3, r3, r2
 801de96:	459a      	cmp	sl, r3
 801de98:	bfa8      	it	ge
 801de9a:	469a      	movge	sl, r3
 801de9c:	f1ba 0f00 	cmp.w	sl, #0
 801dea0:	f340 80f9 	ble.w	801e096 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801dea4:	1bf6      	subs	r6, r6, r7
 801dea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dea8:	1b9e      	subs	r6, r3, r6
 801deaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801deac:	429e      	cmp	r6, r3
 801deae:	bfd4      	ite	le
 801deb0:	ebc7 0706 	rsble	r7, r7, r6
 801deb4:	ebc7 0703 	rsbgt	r7, r7, r3
 801deb8:	2f00      	cmp	r7, #0
 801deba:	f340 80ec 	ble.w	801e096 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801debe:	1bed      	subs	r5, r5, r7
 801dec0:	fb08 f305 	mul.w	r3, r8, r5
 801dec4:	930d      	str	r3, [sp, #52]	; 0x34
 801dec6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dec8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801decc:	930e      	str	r3, [sp, #56]	; 0x38
 801dece:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ded0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ded4:	930f      	str	r3, [sp, #60]	; 0x3c
 801ded6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ded8:	b2db      	uxtb	r3, r3
 801deda:	9310      	str	r3, [sp, #64]	; 0x40
 801dedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dede:	2b00      	cmp	r3, #0
 801dee0:	f040 80de 	bne.w	801e0a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801dee4:	4b7c      	ldr	r3, [pc, #496]	; (801e0d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801dee6:	6818      	ldr	r0, [r3, #0]
 801dee8:	6803      	ldr	r3, [r0, #0]
 801deea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801deec:	4798      	blx	r3
 801deee:	2301      	movs	r3, #1
 801def0:	4a7a      	ldr	r2, [pc, #488]	; (801e0dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801def2:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801def6:	fb07 9b1b 	mls	fp, r7, fp, r9
 801defa:	fa03 f308 	lsl.w	r3, r3, r8
 801defe:	8811      	ldrh	r1, [r2, #0]
 801df00:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801df04:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801df08:	3b01      	subs	r3, #1
 801df0a:	fb06 bb07 	mla	fp, r6, r7, fp
 801df0e:	b2db      	uxtb	r3, r3
 801df10:	930a      	str	r3, [sp, #40]	; 0x28
 801df12:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801df16:	fb01 2303 	mla	r3, r1, r3, r2
 801df1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df1e:	18c3      	adds	r3, r0, r3
 801df20:	9309      	str	r3, [sp, #36]	; 0x24
 801df22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801df24:	781a      	ldrb	r2, [r3, #0]
 801df26:	4122      	asrs	r2, r4
 801df28:	b2d2      	uxtb	r2, r2
 801df2a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801df2e:	f0c0 80d7 	bcc.w	801e0e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801df32:	46be      	mov	lr, r7
 801df34:	9909      	ldr	r1, [sp, #36]	; 0x24
 801df36:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801df3a:	f0c0 80ba 	bcc.w	801e0b2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801df3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df40:	4013      	ands	r3, r2
 801df42:	d041      	beq.n	801dfc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801df44:	20ff      	movs	r0, #255	; 0xff
 801df46:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801df48:	fb90 f5f5 	sdiv	r5, r0, r5
 801df4c:	436b      	muls	r3, r5
 801df4e:	2bfe      	cmp	r3, #254	; 0xfe
 801df50:	dd03      	ble.n	801df5a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801df52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801df54:	4285      	cmp	r5, r0
 801df56:	f000 80a5 	beq.w	801e0a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801df5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801df5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801df5e:	fb15 f303 	smulbb	r3, r5, r3
 801df62:	b29b      	uxth	r3, r3
 801df64:	1c5d      	adds	r5, r3, #1
 801df66:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801df6a:	780d      	ldrb	r5, [r1, #0]
 801df6c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801df70:	fa1f fc83 	uxth.w	ip, r3
 801df74:	43db      	mvns	r3, r3
 801df76:	fb10 f90c 	smulbb	r9, r0, ip
 801df7a:	b2db      	uxtb	r3, r3
 801df7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801df7e:	fb05 9503 	mla	r5, r5, r3, r9
 801df82:	b2ad      	uxth	r5, r5
 801df84:	f105 0901 	add.w	r9, r5, #1
 801df88:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801df8c:	fb10 f90c 	smulbb	r9, r0, ip
 801df90:	980e      	ldr	r0, [sp, #56]	; 0x38
 801df92:	122d      	asrs	r5, r5, #8
 801df94:	fb10 fc0c 	smulbb	ip, r0, ip
 801df98:	700d      	strb	r5, [r1, #0]
 801df9a:	784d      	ldrb	r5, [r1, #1]
 801df9c:	fb05 9503 	mla	r5, r5, r3, r9
 801dfa0:	b2ad      	uxth	r5, r5
 801dfa2:	f105 0901 	add.w	r9, r5, #1
 801dfa6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801dfaa:	122d      	asrs	r5, r5, #8
 801dfac:	704d      	strb	r5, [r1, #1]
 801dfae:	788d      	ldrb	r5, [r1, #2]
 801dfb0:	fb05 cc03 	mla	ip, r5, r3, ip
 801dfb4:	fa1f fc8c 	uxth.w	ip, ip
 801dfb8:	f10c 0301 	add.w	r3, ip, #1
 801dfbc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801dfc0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dfc4:	f881 c002 	strb.w	ip, [r1, #2]
 801dfc8:	4444      	add	r4, r8
 801dfca:	4431      	add	r1, r6
 801dfcc:	b2a4      	uxth	r4, r4
 801dfce:	2c07      	cmp	r4, #7
 801dfd0:	bf89      	itett	hi
 801dfd2:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801dfd4:	fa42 f208 	asrls.w	r2, r2, r8
 801dfd8:	2400      	movhi	r4, #0
 801dfda:	785a      	ldrbhi	r2, [r3, #1]
 801dfdc:	bf8a      	itet	hi
 801dfde:	3301      	addhi	r3, #1
 801dfe0:	b2d2      	uxtbls	r2, r2
 801dfe2:	9326      	strhi	r3, [sp, #152]	; 0x98
 801dfe4:	e7a7      	b.n	801df36 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801dfe6:	441e      	add	r6, r3
 801dfe8:	b236      	sxth	r6, r6
 801dfea:	e6ed      	b.n	801ddc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801dfec:	f1b9 0f01 	cmp.w	r9, #1
 801dff0:	f47f af28 	bne.w	801de44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dff4:	f1bb 0f01 	cmp.w	fp, #1
 801dff8:	f47f af24 	bne.w	801de44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dffc:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801e0d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801e000:	f8db 0000 	ldr.w	r0, [fp]
 801e004:	6803      	ldr	r3, [r0, #0]
 801e006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e008:	4798      	blx	r3
 801e00a:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801e00e:	465a      	mov	r2, fp
 801e010:	d006      	beq.n	801e020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801e012:	f1b8 0f04 	cmp.w	r8, #4
 801e016:	d141      	bne.n	801e09c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801e018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e01a:	3300      	adds	r3, #0
 801e01c:	bf18      	it	ne
 801e01e:	2301      	movne	r3, #1
 801e020:	0580      	lsls	r0, r0, #22
 801e022:	d566      	bpl.n	801e0f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e024:	f1b8 0f08 	cmp.w	r8, #8
 801e028:	d163      	bne.n	801e0f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	bf0c      	ite	eq
 801e02e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801e032:	f44f 7180 	movne.w	r1, #256	; 0x100
 801e036:	2f00      	cmp	r7, #0
 801e038:	f47f af04 	bne.w	801de44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e03c:	2c00      	cmp	r4, #0
 801e03e:	f47f af01 	bne.w	801de44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e044:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e046:	18f3      	adds	r3, r6, r3
 801e048:	4283      	cmp	r3, r0
 801e04a:	f73f aefb 	bgt.w	801de44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e04e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e052:	4403      	add	r3, r0
 801e054:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e056:	4283      	cmp	r3, r0
 801e058:	f73f aef4 	bgt.w	801de44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e05c:	f1b8 0f08 	cmp.w	r8, #8
 801e060:	6810      	ldr	r0, [r2, #0]
 801e062:	f04f 0600 	mov.w	r6, #0
 801e066:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801e06a:	bf18      	it	ne
 801e06c:	3501      	addne	r5, #1
 801e06e:	6804      	ldr	r4, [r0, #0]
 801e070:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801e074:	bf18      	it	ne
 801e076:	f025 0501 	bicne.w	r5, r5, #1
 801e07a:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801e07e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e080:	bf18      	it	ne
 801e082:	b2ad      	uxthne	r5, r5
 801e084:	9104      	str	r1, [sp, #16]
 801e086:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e088:	e9cd 5a00 	strd	r5, sl, [sp]
 801e08c:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801e090:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e092:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801e094:	47a0      	blx	r4
 801e096:	b017      	add	sp, #92	; 0x5c
 801e098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e09c:	2300      	movs	r3, #0
 801e09e:	e7bf      	b.n	801e020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801e0a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e0a2:	e724      	b.n	801deee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801e0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e0a6:	700b      	strb	r3, [r1, #0]
 801e0a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e0aa:	704b      	strb	r3, [r1, #1]
 801e0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0ae:	708b      	strb	r3, [r1, #2]
 801e0b0:	e78a      	b.n	801dfc8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801e0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0b4:	b153      	cbz	r3, 801e0cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801e0b6:	441c      	add	r4, r3
 801e0b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801e0ba:	b2a4      	uxth	r4, r4
 801e0bc:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e0c0:	f004 0407 	and.w	r4, r4, #7
 801e0c4:	781a      	ldrb	r2, [r3, #0]
 801e0c6:	9326      	str	r3, [sp, #152]	; 0x98
 801e0c8:	4122      	asrs	r2, r4
 801e0ca:	b2d2      	uxtb	r2, r2
 801e0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0ce:	445b      	add	r3, fp
 801e0d0:	9309      	str	r3, [sp, #36]	; 0x24
 801e0d2:	e72a      	b.n	801df2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801e0d4:	2400fedc 	.word	0x2400fedc
 801e0d8:	2400fee4 	.word	0x2400fee4
 801e0dc:	2400fede 	.word	0x2400fede
 801e0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d1d7      	bne.n	801e096 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e0e6:	4b06      	ldr	r3, [pc, #24]	; (801e100 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801e0e8:	6818      	ldr	r0, [r3, #0]
 801e0ea:	6803      	ldr	r3, [r0, #0]
 801e0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0ee:	4798      	blx	r3
 801e0f0:	e7d1      	b.n	801e096 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e0f2:	2b00      	cmp	r3, #0
 801e0f4:	f43f aea6 	beq.w	801de44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e0f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e0fc:	e79b      	b.n	801e036 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801e0fe:	bf00      	nop
 801e100:	2400fee4 	.word	0x2400fee4

0801e104 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e104:	b538      	push	{r3, r4, r5, lr}
 801e106:	4c15      	ldr	r4, [pc, #84]	; (801e15c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e108:	4605      	mov	r5, r0
 801e10a:	7823      	ldrb	r3, [r4, #0]
 801e10c:	f3bf 8f5b 	dmb	ish
 801e110:	07da      	lsls	r2, r3, #31
 801e112:	d40b      	bmi.n	801e12c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e114:	4620      	mov	r0, r4
 801e116:	f005 f890 	bl	802323a <__cxa_guard_acquire>
 801e11a:	b138      	cbz	r0, 801e12c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e11c:	4620      	mov	r0, r4
 801e11e:	f005 f898 	bl	8023252 <__cxa_guard_release>
 801e122:	4a0f      	ldr	r2, [pc, #60]	; (801e160 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e124:	490f      	ldr	r1, [pc, #60]	; (801e164 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e126:	4810      	ldr	r0, [pc, #64]	; (801e168 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e128:	f005 f880 	bl	802322c <__aeabi_atexit>
 801e12c:	4c0f      	ldr	r4, [pc, #60]	; (801e16c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e12e:	7823      	ldrb	r3, [r4, #0]
 801e130:	f3bf 8f5b 	dmb	ish
 801e134:	07db      	lsls	r3, r3, #31
 801e136:	d40b      	bmi.n	801e150 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e138:	4620      	mov	r0, r4
 801e13a:	f005 f87e 	bl	802323a <__cxa_guard_acquire>
 801e13e:	b138      	cbz	r0, 801e150 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e140:	4620      	mov	r0, r4
 801e142:	f005 f886 	bl	8023252 <__cxa_guard_release>
 801e146:	4a06      	ldr	r2, [pc, #24]	; (801e160 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e148:	4909      	ldr	r1, [pc, #36]	; (801e170 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e14a:	480a      	ldr	r0, [pc, #40]	; (801e174 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e14c:	f005 f86e 	bl	802322c <__aeabi_atexit>
 801e150:	4b05      	ldr	r3, [pc, #20]	; (801e168 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e152:	612b      	str	r3, [r5, #16]
 801e154:	4b07      	ldr	r3, [pc, #28]	; (801e174 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e156:	616b      	str	r3, [r5, #20]
 801e158:	bd38      	pop	{r3, r4, r5, pc}
 801e15a:	bf00      	nop
 801e15c:	2400ffb0 	.word	0x2400ffb0
 801e160:	24000000 	.word	0x24000000
 801e164:	0801ccc9 	.word	0x0801ccc9
 801e168:	240000c8 	.word	0x240000c8
 801e16c:	2400ffb4 	.word	0x2400ffb4
 801e170:	0801ccc7 	.word	0x0801ccc7
 801e174:	240000cc 	.word	0x240000cc

0801e178 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e178:	b538      	push	{r3, r4, r5, lr}
 801e17a:	4c15      	ldr	r4, [pc, #84]	; (801e1d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e17c:	4605      	mov	r5, r0
 801e17e:	7823      	ldrb	r3, [r4, #0]
 801e180:	f3bf 8f5b 	dmb	ish
 801e184:	07da      	lsls	r2, r3, #31
 801e186:	d40b      	bmi.n	801e1a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e188:	4620      	mov	r0, r4
 801e18a:	f005 f856 	bl	802323a <__cxa_guard_acquire>
 801e18e:	b138      	cbz	r0, 801e1a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e190:	4620      	mov	r0, r4
 801e192:	f005 f85e 	bl	8023252 <__cxa_guard_release>
 801e196:	4a0f      	ldr	r2, [pc, #60]	; (801e1d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e198:	490f      	ldr	r1, [pc, #60]	; (801e1d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e19a:	4810      	ldr	r0, [pc, #64]	; (801e1dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e19c:	f005 f846 	bl	802322c <__aeabi_atexit>
 801e1a0:	4c0f      	ldr	r4, [pc, #60]	; (801e1e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e1a2:	7823      	ldrb	r3, [r4, #0]
 801e1a4:	f3bf 8f5b 	dmb	ish
 801e1a8:	07db      	lsls	r3, r3, #31
 801e1aa:	d40b      	bmi.n	801e1c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e1ac:	4620      	mov	r0, r4
 801e1ae:	f005 f844 	bl	802323a <__cxa_guard_acquire>
 801e1b2:	b138      	cbz	r0, 801e1c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e1b4:	4620      	mov	r0, r4
 801e1b6:	f005 f84c 	bl	8023252 <__cxa_guard_release>
 801e1ba:	4a06      	ldr	r2, [pc, #24]	; (801e1d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e1bc:	4909      	ldr	r1, [pc, #36]	; (801e1e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e1be:	480a      	ldr	r0, [pc, #40]	; (801e1e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e1c0:	f005 f834 	bl	802322c <__aeabi_atexit>
 801e1c4:	4b05      	ldr	r3, [pc, #20]	; (801e1dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e1c6:	60ab      	str	r3, [r5, #8]
 801e1c8:	4b07      	ldr	r3, [pc, #28]	; (801e1e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e1ca:	60eb      	str	r3, [r5, #12]
 801e1cc:	bd38      	pop	{r3, r4, r5, pc}
 801e1ce:	bf00      	nop
 801e1d0:	2400ff90 	.word	0x2400ff90
 801e1d4:	24000000 	.word	0x24000000
 801e1d8:	0801cccd 	.word	0x0801cccd
 801e1dc:	240000a8 	.word	0x240000a8
 801e1e0:	2400ff94 	.word	0x2400ff94
 801e1e4:	0801cccb 	.word	0x0801cccb
 801e1e8:	240000ac 	.word	0x240000ac

0801e1ec <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e1ec:	b510      	push	{r4, lr}
 801e1ee:	4604      	mov	r4, r0
 801e1f0:	f7ff ff88 	bl	801e104 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e1f4:	4620      	mov	r0, r4
 801e1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1fa:	f7ff bfbd 	b.w	801e178 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e200 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e200:	b538      	push	{r3, r4, r5, lr}
 801e202:	4c15      	ldr	r4, [pc, #84]	; (801e258 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e204:	4605      	mov	r5, r0
 801e206:	7823      	ldrb	r3, [r4, #0]
 801e208:	f3bf 8f5b 	dmb	ish
 801e20c:	07da      	lsls	r2, r3, #31
 801e20e:	d40b      	bmi.n	801e228 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e210:	4620      	mov	r0, r4
 801e212:	f005 f812 	bl	802323a <__cxa_guard_acquire>
 801e216:	b138      	cbz	r0, 801e228 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e218:	4620      	mov	r0, r4
 801e21a:	f005 f81a 	bl	8023252 <__cxa_guard_release>
 801e21e:	4a0f      	ldr	r2, [pc, #60]	; (801e25c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e220:	490f      	ldr	r1, [pc, #60]	; (801e260 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e222:	4810      	ldr	r0, [pc, #64]	; (801e264 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e224:	f005 f802 	bl	802322c <__aeabi_atexit>
 801e228:	4c0f      	ldr	r4, [pc, #60]	; (801e268 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e22a:	7823      	ldrb	r3, [r4, #0]
 801e22c:	f3bf 8f5b 	dmb	ish
 801e230:	07db      	lsls	r3, r3, #31
 801e232:	d40b      	bmi.n	801e24c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e234:	4620      	mov	r0, r4
 801e236:	f005 f800 	bl	802323a <__cxa_guard_acquire>
 801e23a:	b138      	cbz	r0, 801e24c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e23c:	4620      	mov	r0, r4
 801e23e:	f005 f808 	bl	8023252 <__cxa_guard_release>
 801e242:	4a06      	ldr	r2, [pc, #24]	; (801e25c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e244:	4909      	ldr	r1, [pc, #36]	; (801e26c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e246:	480a      	ldr	r0, [pc, #40]	; (801e270 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e248:	f004 fff0 	bl	802322c <__aeabi_atexit>
 801e24c:	4b05      	ldr	r3, [pc, #20]	; (801e264 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e24e:	622b      	str	r3, [r5, #32]
 801e250:	4b07      	ldr	r3, [pc, #28]	; (801e270 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e252:	626b      	str	r3, [r5, #36]	; 0x24
 801e254:	bd38      	pop	{r3, r4, r5, pc}
 801e256:	bf00      	nop
 801e258:	2400ffb8 	.word	0x2400ffb8
 801e25c:	24000000 	.word	0x24000000
 801e260:	0801ccc1 	.word	0x0801ccc1
 801e264:	240000d0 	.word	0x240000d0
 801e268:	2400ffbc 	.word	0x2400ffbc
 801e26c:	0801ccbf 	.word	0x0801ccbf
 801e270:	240000d4 	.word	0x240000d4

0801e274 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e274:	b538      	push	{r3, r4, r5, lr}
 801e276:	4c15      	ldr	r4, [pc, #84]	; (801e2cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e278:	4605      	mov	r5, r0
 801e27a:	7823      	ldrb	r3, [r4, #0]
 801e27c:	f3bf 8f5b 	dmb	ish
 801e280:	07da      	lsls	r2, r3, #31
 801e282:	d40b      	bmi.n	801e29c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e284:	4620      	mov	r0, r4
 801e286:	f004 ffd8 	bl	802323a <__cxa_guard_acquire>
 801e28a:	b138      	cbz	r0, 801e29c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e28c:	4620      	mov	r0, r4
 801e28e:	f004 ffe0 	bl	8023252 <__cxa_guard_release>
 801e292:	4a0f      	ldr	r2, [pc, #60]	; (801e2d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e294:	490f      	ldr	r1, [pc, #60]	; (801e2d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e296:	4810      	ldr	r0, [pc, #64]	; (801e2d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e298:	f004 ffc8 	bl	802322c <__aeabi_atexit>
 801e29c:	4c0f      	ldr	r4, [pc, #60]	; (801e2dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e29e:	7823      	ldrb	r3, [r4, #0]
 801e2a0:	f3bf 8f5b 	dmb	ish
 801e2a4:	07db      	lsls	r3, r3, #31
 801e2a6:	d40b      	bmi.n	801e2c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e2a8:	4620      	mov	r0, r4
 801e2aa:	f004 ffc6 	bl	802323a <__cxa_guard_acquire>
 801e2ae:	b138      	cbz	r0, 801e2c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e2b0:	4620      	mov	r0, r4
 801e2b2:	f004 ffce 	bl	8023252 <__cxa_guard_release>
 801e2b6:	4a06      	ldr	r2, [pc, #24]	; (801e2d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e2b8:	4909      	ldr	r1, [pc, #36]	; (801e2e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e2ba:	480a      	ldr	r0, [pc, #40]	; (801e2e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e2bc:	f004 ffb6 	bl	802322c <__aeabi_atexit>
 801e2c0:	4b05      	ldr	r3, [pc, #20]	; (801e2d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e2c2:	61ab      	str	r3, [r5, #24]
 801e2c4:	4b07      	ldr	r3, [pc, #28]	; (801e2e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e2c6:	61eb      	str	r3, [r5, #28]
 801e2c8:	bd38      	pop	{r3, r4, r5, pc}
 801e2ca:	bf00      	nop
 801e2cc:	2400ff98 	.word	0x2400ff98
 801e2d0:	24000000 	.word	0x24000000
 801e2d4:	0801ccc5 	.word	0x0801ccc5
 801e2d8:	240000b0 	.word	0x240000b0
 801e2dc:	2400ff9c 	.word	0x2400ff9c
 801e2e0:	0801ccc3 	.word	0x0801ccc3
 801e2e4:	240000b4 	.word	0x240000b4

0801e2e8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e2e8:	b510      	push	{r4, lr}
 801e2ea:	4604      	mov	r4, r0
 801e2ec:	f7ff ff88 	bl	801e200 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e2f0:	4620      	mov	r0, r4
 801e2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2f6:	f7ff bfbd 	b.w	801e274 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e2fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e2fc:	b538      	push	{r3, r4, r5, lr}
 801e2fe:	4c15      	ldr	r4, [pc, #84]	; (801e354 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e300:	4605      	mov	r5, r0
 801e302:	7823      	ldrb	r3, [r4, #0]
 801e304:	f3bf 8f5b 	dmb	ish
 801e308:	07da      	lsls	r2, r3, #31
 801e30a:	d40b      	bmi.n	801e324 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e30c:	4620      	mov	r0, r4
 801e30e:	f004 ff94 	bl	802323a <__cxa_guard_acquire>
 801e312:	b138      	cbz	r0, 801e324 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e314:	4620      	mov	r0, r4
 801e316:	f004 ff9c 	bl	8023252 <__cxa_guard_release>
 801e31a:	4a0f      	ldr	r2, [pc, #60]	; (801e358 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e31c:	490f      	ldr	r1, [pc, #60]	; (801e35c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e31e:	4810      	ldr	r0, [pc, #64]	; (801e360 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e320:	f004 ff84 	bl	802322c <__aeabi_atexit>
 801e324:	4c0f      	ldr	r4, [pc, #60]	; (801e364 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e326:	7823      	ldrb	r3, [r4, #0]
 801e328:	f3bf 8f5b 	dmb	ish
 801e32c:	07db      	lsls	r3, r3, #31
 801e32e:	d40b      	bmi.n	801e348 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e330:	4620      	mov	r0, r4
 801e332:	f004 ff82 	bl	802323a <__cxa_guard_acquire>
 801e336:	b138      	cbz	r0, 801e348 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e338:	4620      	mov	r0, r4
 801e33a:	f004 ff8a 	bl	8023252 <__cxa_guard_release>
 801e33e:	4a06      	ldr	r2, [pc, #24]	; (801e358 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e340:	4909      	ldr	r1, [pc, #36]	; (801e368 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e342:	480a      	ldr	r0, [pc, #40]	; (801e36c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e344:	f004 ff72 	bl	802322c <__aeabi_atexit>
 801e348:	4b05      	ldr	r3, [pc, #20]	; (801e360 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e34a:	632b      	str	r3, [r5, #48]	; 0x30
 801e34c:	4b07      	ldr	r3, [pc, #28]	; (801e36c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e34e:	636b      	str	r3, [r5, #52]	; 0x34
 801e350:	bd38      	pop	{r3, r4, r5, pc}
 801e352:	bf00      	nop
 801e354:	2400ffa0 	.word	0x2400ffa0
 801e358:	24000000 	.word	0x24000000
 801e35c:	0801ccb9 	.word	0x0801ccb9
 801e360:	240000b8 	.word	0x240000b8
 801e364:	2400ffa4 	.word	0x2400ffa4
 801e368:	0801ccb7 	.word	0x0801ccb7
 801e36c:	240000bc 	.word	0x240000bc

0801e370 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e370:	b538      	push	{r3, r4, r5, lr}
 801e372:	4c15      	ldr	r4, [pc, #84]	; (801e3c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e374:	4605      	mov	r5, r0
 801e376:	7823      	ldrb	r3, [r4, #0]
 801e378:	f3bf 8f5b 	dmb	ish
 801e37c:	07da      	lsls	r2, r3, #31
 801e37e:	d40b      	bmi.n	801e398 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e380:	4620      	mov	r0, r4
 801e382:	f004 ff5a 	bl	802323a <__cxa_guard_acquire>
 801e386:	b138      	cbz	r0, 801e398 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e388:	4620      	mov	r0, r4
 801e38a:	f004 ff62 	bl	8023252 <__cxa_guard_release>
 801e38e:	4a0f      	ldr	r2, [pc, #60]	; (801e3cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e390:	490f      	ldr	r1, [pc, #60]	; (801e3d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e392:	4810      	ldr	r0, [pc, #64]	; (801e3d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e394:	f004 ff4a 	bl	802322c <__aeabi_atexit>
 801e398:	4c0f      	ldr	r4, [pc, #60]	; (801e3d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e39a:	7823      	ldrb	r3, [r4, #0]
 801e39c:	f3bf 8f5b 	dmb	ish
 801e3a0:	07db      	lsls	r3, r3, #31
 801e3a2:	d40b      	bmi.n	801e3bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e3a4:	4620      	mov	r0, r4
 801e3a6:	f004 ff48 	bl	802323a <__cxa_guard_acquire>
 801e3aa:	b138      	cbz	r0, 801e3bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e3ac:	4620      	mov	r0, r4
 801e3ae:	f004 ff50 	bl	8023252 <__cxa_guard_release>
 801e3b2:	4a06      	ldr	r2, [pc, #24]	; (801e3cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e3b4:	4909      	ldr	r1, [pc, #36]	; (801e3dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e3b6:	480a      	ldr	r0, [pc, #40]	; (801e3e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e3b8:	f004 ff38 	bl	802322c <__aeabi_atexit>
 801e3bc:	4b05      	ldr	r3, [pc, #20]	; (801e3d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e3be:	62ab      	str	r3, [r5, #40]	; 0x28
 801e3c0:	4b07      	ldr	r3, [pc, #28]	; (801e3e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e3c2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e3c4:	bd38      	pop	{r3, r4, r5, pc}
 801e3c6:	bf00      	nop
 801e3c8:	2400ff78 	.word	0x2400ff78
 801e3cc:	24000000 	.word	0x24000000
 801e3d0:	0801ccbd 	.word	0x0801ccbd
 801e3d4:	24000090 	.word	0x24000090
 801e3d8:	2400ff7c 	.word	0x2400ff7c
 801e3dc:	0801ccbb 	.word	0x0801ccbb
 801e3e0:	24000094 	.word	0x24000094

0801e3e4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e3e4:	b510      	push	{r4, lr}
 801e3e6:	4604      	mov	r4, r0
 801e3e8:	f7ff ff88 	bl	801e2fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e3ec:	4620      	mov	r0, r4
 801e3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e3f2:	f7ff bfbd 	b.w	801e370 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e3f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e3f8:	b538      	push	{r3, r4, r5, lr}
 801e3fa:	4c15      	ldr	r4, [pc, #84]	; (801e450 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e3fc:	4605      	mov	r5, r0
 801e3fe:	7823      	ldrb	r3, [r4, #0]
 801e400:	f3bf 8f5b 	dmb	ish
 801e404:	07da      	lsls	r2, r3, #31
 801e406:	d40b      	bmi.n	801e420 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e408:	4620      	mov	r0, r4
 801e40a:	f004 ff16 	bl	802323a <__cxa_guard_acquire>
 801e40e:	b138      	cbz	r0, 801e420 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e410:	4620      	mov	r0, r4
 801e412:	f004 ff1e 	bl	8023252 <__cxa_guard_release>
 801e416:	4a0f      	ldr	r2, [pc, #60]	; (801e454 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e418:	490f      	ldr	r1, [pc, #60]	; (801e458 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e41a:	4810      	ldr	r0, [pc, #64]	; (801e45c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e41c:	f004 ff06 	bl	802322c <__aeabi_atexit>
 801e420:	4c0f      	ldr	r4, [pc, #60]	; (801e460 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e422:	7823      	ldrb	r3, [r4, #0]
 801e424:	f3bf 8f5b 	dmb	ish
 801e428:	07db      	lsls	r3, r3, #31
 801e42a:	d40b      	bmi.n	801e444 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e42c:	4620      	mov	r0, r4
 801e42e:	f004 ff04 	bl	802323a <__cxa_guard_acquire>
 801e432:	b138      	cbz	r0, 801e444 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e434:	4620      	mov	r0, r4
 801e436:	f004 ff0c 	bl	8023252 <__cxa_guard_release>
 801e43a:	4a06      	ldr	r2, [pc, #24]	; (801e454 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e43c:	4909      	ldr	r1, [pc, #36]	; (801e464 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e43e:	480a      	ldr	r0, [pc, #40]	; (801e468 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e440:	f004 fef4 	bl	802322c <__aeabi_atexit>
 801e444:	4b05      	ldr	r3, [pc, #20]	; (801e45c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e446:	642b      	str	r3, [r5, #64]	; 0x40
 801e448:	4b07      	ldr	r3, [pc, #28]	; (801e468 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e44a:	646b      	str	r3, [r5, #68]	; 0x44
 801e44c:	bd38      	pop	{r3, r4, r5, pc}
 801e44e:	bf00      	nop
 801e450:	2400ffa8 	.word	0x2400ffa8
 801e454:	24000000 	.word	0x24000000
 801e458:	0801ccb1 	.word	0x0801ccb1
 801e45c:	240000c0 	.word	0x240000c0
 801e460:	2400ffac 	.word	0x2400ffac
 801e464:	0801ccaf 	.word	0x0801ccaf
 801e468:	240000c4 	.word	0x240000c4

0801e46c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e46c:	b538      	push	{r3, r4, r5, lr}
 801e46e:	4c15      	ldr	r4, [pc, #84]	; (801e4c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e470:	4605      	mov	r5, r0
 801e472:	7823      	ldrb	r3, [r4, #0]
 801e474:	f3bf 8f5b 	dmb	ish
 801e478:	07da      	lsls	r2, r3, #31
 801e47a:	d40b      	bmi.n	801e494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e47c:	4620      	mov	r0, r4
 801e47e:	f004 fedc 	bl	802323a <__cxa_guard_acquire>
 801e482:	b138      	cbz	r0, 801e494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e484:	4620      	mov	r0, r4
 801e486:	f004 fee4 	bl	8023252 <__cxa_guard_release>
 801e48a:	4a0f      	ldr	r2, [pc, #60]	; (801e4c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e48c:	490f      	ldr	r1, [pc, #60]	; (801e4cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e48e:	4810      	ldr	r0, [pc, #64]	; (801e4d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e490:	f004 fecc 	bl	802322c <__aeabi_atexit>
 801e494:	4c0f      	ldr	r4, [pc, #60]	; (801e4d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e496:	7823      	ldrb	r3, [r4, #0]
 801e498:	f3bf 8f5b 	dmb	ish
 801e49c:	07db      	lsls	r3, r3, #31
 801e49e:	d40b      	bmi.n	801e4b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e4a0:	4620      	mov	r0, r4
 801e4a2:	f004 feca 	bl	802323a <__cxa_guard_acquire>
 801e4a6:	b138      	cbz	r0, 801e4b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e4a8:	4620      	mov	r0, r4
 801e4aa:	f004 fed2 	bl	8023252 <__cxa_guard_release>
 801e4ae:	4a06      	ldr	r2, [pc, #24]	; (801e4c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e4b0:	4909      	ldr	r1, [pc, #36]	; (801e4d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e4b2:	480a      	ldr	r0, [pc, #40]	; (801e4dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e4b4:	f004 feba 	bl	802322c <__aeabi_atexit>
 801e4b8:	4b05      	ldr	r3, [pc, #20]	; (801e4d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e4ba:	63ab      	str	r3, [r5, #56]	; 0x38
 801e4bc:	4b07      	ldr	r3, [pc, #28]	; (801e4dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e4be:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e4c0:	bd38      	pop	{r3, r4, r5, pc}
 801e4c2:	bf00      	nop
 801e4c4:	2400ff88 	.word	0x2400ff88
 801e4c8:	24000000 	.word	0x24000000
 801e4cc:	0801ccb5 	.word	0x0801ccb5
 801e4d0:	240000a0 	.word	0x240000a0
 801e4d4:	2400ff8c 	.word	0x2400ff8c
 801e4d8:	0801ccb3 	.word	0x0801ccb3
 801e4dc:	240000a4 	.word	0x240000a4

0801e4e0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e4e0:	b510      	push	{r4, lr}
 801e4e2:	4604      	mov	r4, r0
 801e4e4:	f7ff ff88 	bl	801e3f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e4e8:	4620      	mov	r0, r4
 801e4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4ee:	f7ff bfbd 	b.w	801e46c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e4f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e4f4:	b538      	push	{r3, r4, r5, lr}
 801e4f6:	4c15      	ldr	r4, [pc, #84]	; (801e54c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e4f8:	4605      	mov	r5, r0
 801e4fa:	7823      	ldrb	r3, [r4, #0]
 801e4fc:	f3bf 8f5b 	dmb	ish
 801e500:	07da      	lsls	r2, r3, #31
 801e502:	d40b      	bmi.n	801e51c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e504:	4620      	mov	r0, r4
 801e506:	f004 fe98 	bl	802323a <__cxa_guard_acquire>
 801e50a:	b138      	cbz	r0, 801e51c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e50c:	4620      	mov	r0, r4
 801e50e:	f004 fea0 	bl	8023252 <__cxa_guard_release>
 801e512:	4a0f      	ldr	r2, [pc, #60]	; (801e550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e514:	490f      	ldr	r1, [pc, #60]	; (801e554 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e516:	4810      	ldr	r0, [pc, #64]	; (801e558 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e518:	f004 fe88 	bl	802322c <__aeabi_atexit>
 801e51c:	4c0f      	ldr	r4, [pc, #60]	; (801e55c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e51e:	7823      	ldrb	r3, [r4, #0]
 801e520:	f3bf 8f5b 	dmb	ish
 801e524:	07db      	lsls	r3, r3, #31
 801e526:	d40b      	bmi.n	801e540 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e528:	4620      	mov	r0, r4
 801e52a:	f004 fe86 	bl	802323a <__cxa_guard_acquire>
 801e52e:	b138      	cbz	r0, 801e540 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e530:	4620      	mov	r0, r4
 801e532:	f004 fe8e 	bl	8023252 <__cxa_guard_release>
 801e536:	4a06      	ldr	r2, [pc, #24]	; (801e550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e538:	4909      	ldr	r1, [pc, #36]	; (801e560 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e53a:	480a      	ldr	r0, [pc, #40]	; (801e564 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e53c:	f004 fe76 	bl	802322c <__aeabi_atexit>
 801e540:	4b05      	ldr	r3, [pc, #20]	; (801e558 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e542:	652b      	str	r3, [r5, #80]	; 0x50
 801e544:	4b07      	ldr	r3, [pc, #28]	; (801e564 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e546:	656b      	str	r3, [r5, #84]	; 0x54
 801e548:	bd38      	pop	{r3, r4, r5, pc}
 801e54a:	bf00      	nop
 801e54c:	2400ff80 	.word	0x2400ff80
 801e550:	24000000 	.word	0x24000000
 801e554:	0801cca9 	.word	0x0801cca9
 801e558:	24000098 	.word	0x24000098
 801e55c:	2400ff84 	.word	0x2400ff84
 801e560:	0801cca7 	.word	0x0801cca7
 801e564:	2400009c 	.word	0x2400009c

0801e568 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e568:	b538      	push	{r3, r4, r5, lr}
 801e56a:	4c15      	ldr	r4, [pc, #84]	; (801e5c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e56c:	4605      	mov	r5, r0
 801e56e:	7823      	ldrb	r3, [r4, #0]
 801e570:	f3bf 8f5b 	dmb	ish
 801e574:	07da      	lsls	r2, r3, #31
 801e576:	d40b      	bmi.n	801e590 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e578:	4620      	mov	r0, r4
 801e57a:	f004 fe5e 	bl	802323a <__cxa_guard_acquire>
 801e57e:	b138      	cbz	r0, 801e590 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e580:	4620      	mov	r0, r4
 801e582:	f004 fe66 	bl	8023252 <__cxa_guard_release>
 801e586:	4a0f      	ldr	r2, [pc, #60]	; (801e5c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e588:	490f      	ldr	r1, [pc, #60]	; (801e5c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e58a:	4810      	ldr	r0, [pc, #64]	; (801e5cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e58c:	f004 fe4e 	bl	802322c <__aeabi_atexit>
 801e590:	4c0f      	ldr	r4, [pc, #60]	; (801e5d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e592:	7823      	ldrb	r3, [r4, #0]
 801e594:	f3bf 8f5b 	dmb	ish
 801e598:	07db      	lsls	r3, r3, #31
 801e59a:	d40b      	bmi.n	801e5b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e59c:	4620      	mov	r0, r4
 801e59e:	f004 fe4c 	bl	802323a <__cxa_guard_acquire>
 801e5a2:	b138      	cbz	r0, 801e5b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e5a4:	4620      	mov	r0, r4
 801e5a6:	f004 fe54 	bl	8023252 <__cxa_guard_release>
 801e5aa:	4a06      	ldr	r2, [pc, #24]	; (801e5c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e5ac:	4909      	ldr	r1, [pc, #36]	; (801e5d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e5ae:	480a      	ldr	r0, [pc, #40]	; (801e5d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e5b0:	f004 fe3c 	bl	802322c <__aeabi_atexit>
 801e5b4:	4b05      	ldr	r3, [pc, #20]	; (801e5cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e5b6:	64ab      	str	r3, [r5, #72]	; 0x48
 801e5b8:	4b07      	ldr	r3, [pc, #28]	; (801e5d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e5ba:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e5bc:	bd38      	pop	{r3, r4, r5, pc}
 801e5be:	bf00      	nop
 801e5c0:	2400ff70 	.word	0x2400ff70
 801e5c4:	24000000 	.word	0x24000000
 801e5c8:	0801ccad 	.word	0x0801ccad
 801e5cc:	24000088 	.word	0x24000088
 801e5d0:	2400ff74 	.word	0x2400ff74
 801e5d4:	0801ccab 	.word	0x0801ccab
 801e5d8:	2400008c 	.word	0x2400008c

0801e5dc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e5dc:	b510      	push	{r4, lr}
 801e5de:	4604      	mov	r4, r0
 801e5e0:	f7ff ff88 	bl	801e4f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e5e4:	4620      	mov	r0, r4
 801e5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5ea:	f7ff bfbd 	b.w	801e568 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e5ee <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e5ee:	b510      	push	{r4, lr}
 801e5f0:	4604      	mov	r4, r0
 801e5f2:	f7ff fff3 	bl	801e5dc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e5f6:	4620      	mov	r0, r4
 801e5f8:	f7ff ff72 	bl	801e4e0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e5fc:	4620      	mov	r0, r4
 801e5fe:	f7ff fe73 	bl	801e2e8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e602:	4620      	mov	r0, r4
 801e604:	f7ff fdf2 	bl	801e1ec <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e608:	4620      	mov	r0, r4
 801e60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e60e:	f7ff bee9 	b.w	801e3e4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801e612 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e612:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e616:	b087      	sub	sp, #28
 801e618:	788d      	ldrb	r5, [r1, #2]
 801e61a:	f891 9000 	ldrb.w	r9, [r1]
 801e61e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801e622:	9501      	str	r5, [sp, #4]
 801e624:	784d      	ldrb	r5, [r1, #1]
 801e626:	9203      	str	r2, [sp, #12]
 801e628:	9502      	str	r5, [sp, #8]
 801e62a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801e62e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801e632:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801e636:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801e63a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801e63e:	fb06 0708 	mla	r7, r6, r8, r0
 801e642:	2e00      	cmp	r6, #0
 801e644:	eb02 0a07 	add.w	sl, r2, r7
 801e648:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801e64c:	9d01      	ldr	r5, [sp, #4]
 801e64e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801e652:	ea45 0509 	orr.w	r5, r5, r9
 801e656:	9505      	str	r5, [sp, #20]
 801e658:	f2c0 80b2 	blt.w	801e7c0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801e65c:	45b3      	cmp	fp, r6
 801e65e:	f340 80af 	ble.w	801e7c0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801e662:	2800      	cmp	r0, #0
 801e664:	f2c0 80aa 	blt.w	801e7bc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801e668:	4580      	cmp	r8, r0
 801e66a:	f340 80a7 	ble.w	801e7bc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801e66e:	9a03      	ldr	r2, [sp, #12]
 801e670:	5dd7      	ldrb	r7, [r2, r7]
 801e672:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e676:	441f      	add	r7, r3
 801e678:	1c42      	adds	r2, r0, #1
 801e67a:	f100 80a4 	bmi.w	801e7c6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e67e:	4590      	cmp	r8, r2
 801e680:	f340 80a1 	ble.w	801e7c6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e684:	2c00      	cmp	r4, #0
 801e686:	f000 809e 	beq.w	801e7c6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e68a:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801e68e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e692:	441d      	add	r5, r3
 801e694:	3601      	adds	r6, #1
 801e696:	f100 809a 	bmi.w	801e7ce <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e69a:	45b3      	cmp	fp, r6
 801e69c:	f340 8097 	ble.w	801e7ce <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e6a0:	f1bc 0f00 	cmp.w	ip, #0
 801e6a4:	f000 8093 	beq.w	801e7ce <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e6a8:	2800      	cmp	r0, #0
 801e6aa:	f2c0 808e 	blt.w	801e7ca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801e6ae:	4580      	cmp	r8, r0
 801e6b0:	f340 808b 	ble.w	801e7ca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801e6b4:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801e6b8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e6bc:	441e      	add	r6, r3
 801e6be:	3001      	adds	r0, #1
 801e6c0:	f100 8088 	bmi.w	801e7d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e6c4:	4580      	cmp	r8, r0
 801e6c6:	f340 8085 	ble.w	801e7d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e6ca:	2c00      	cmp	r4, #0
 801e6cc:	f000 8082 	beq.w	801e7d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e6d0:	44d0      	add	r8, sl
 801e6d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e6d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e6da:	4413      	add	r3, r2
 801e6dc:	b2a4      	uxth	r4, r4
 801e6de:	f895 a000 	ldrb.w	sl, [r5]
 801e6e2:	fa1f fc8c 	uxth.w	ip, ip
 801e6e6:	fb04 fb0c 	mul.w	fp, r4, ip
 801e6ea:	0124      	lsls	r4, r4, #4
 801e6ec:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801e6f0:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801e6f4:	eba4 040b 	sub.w	r4, r4, fp
 801e6f8:	fa1f f08c 	uxth.w	r0, ip
 801e6fc:	b2a2      	uxth	r2, r4
 801e6fe:	783c      	ldrb	r4, [r7, #0]
 801e700:	eba8 0800 	sub.w	r8, r8, r0
 801e704:	fa1f fc8e 	uxth.w	ip, lr
 801e708:	fb02 fa0a 	mul.w	sl, r2, sl
 801e70c:	ea6f 0e0e 	mvn.w	lr, lr
 801e710:	fa1f f888 	uxth.w	r8, r8
 801e714:	fa5f fe8e 	uxtb.w	lr, lr
 801e718:	fb08 aa04 	mla	sl, r8, r4, sl
 801e71c:	7834      	ldrb	r4, [r6, #0]
 801e71e:	fb19 f90e 	smulbb	r9, r9, lr
 801e722:	fb00 aa04 	mla	sl, r0, r4, sl
 801e726:	781c      	ldrb	r4, [r3, #0]
 801e728:	fb0b a404 	mla	r4, fp, r4, sl
 801e72c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e730:	fb04 990c 	mla	r9, r4, ip, r9
 801e734:	fa1f f989 	uxth.w	r9, r9
 801e738:	f109 0401 	add.w	r4, r9, #1
 801e73c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801e740:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e744:	f881 9000 	strb.w	r9, [r1]
 801e748:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e74c:	787c      	ldrb	r4, [r7, #1]
 801e74e:	fb02 f909 	mul.w	r9, r2, r9
 801e752:	fb08 9904 	mla	r9, r8, r4, r9
 801e756:	7874      	ldrb	r4, [r6, #1]
 801e758:	fb00 9904 	mla	r9, r0, r4, r9
 801e75c:	785c      	ldrb	r4, [r3, #1]
 801e75e:	fb0b 9404 	mla	r4, fp, r4, r9
 801e762:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801e766:	9c02      	ldr	r4, [sp, #8]
 801e768:	fb14 f90e 	smulbb	r9, r4, lr
 801e76c:	fb0a 940c 	mla	r4, sl, ip, r9
 801e770:	b2a4      	uxth	r4, r4
 801e772:	f104 0901 	add.w	r9, r4, #1
 801e776:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801e77a:	1224      	asrs	r4, r4, #8
 801e77c:	704c      	strb	r4, [r1, #1]
 801e77e:	78ad      	ldrb	r5, [r5, #2]
 801e780:	78bc      	ldrb	r4, [r7, #2]
 801e782:	436a      	muls	r2, r5
 801e784:	789b      	ldrb	r3, [r3, #2]
 801e786:	fb08 2204 	mla	r2, r8, r4, r2
 801e78a:	78b4      	ldrb	r4, [r6, #2]
 801e78c:	fb00 2004 	mla	r0, r0, r4, r2
 801e790:	fb0b 0b03 	mla	fp, fp, r3, r0
 801e794:	9b01      	ldr	r3, [sp, #4]
 801e796:	fb13 fe0e 	smulbb	lr, r3, lr
 801e79a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801e79e:	fb0b ec0c 	mla	ip, fp, ip, lr
 801e7a2:	fa1f fc8c 	uxth.w	ip, ip
 801e7a6:	f10c 0e01 	add.w	lr, ip, #1
 801e7aa:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801e7ae:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e7b2:	f881 c002 	strb.w	ip, [r1, #2]
 801e7b6:	b007      	add	sp, #28
 801e7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7bc:	af05      	add	r7, sp, #20
 801e7be:	e75b      	b.n	801e678 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801e7c0:	ad05      	add	r5, sp, #20
 801e7c2:	462f      	mov	r7, r5
 801e7c4:	e766      	b.n	801e694 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801e7c6:	ad05      	add	r5, sp, #20
 801e7c8:	e764      	b.n	801e694 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801e7ca:	ae05      	add	r6, sp, #20
 801e7cc:	e777      	b.n	801e6be <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801e7ce:	ab05      	add	r3, sp, #20
 801e7d0:	461e      	mov	r6, r3
 801e7d2:	e783      	b.n	801e6dc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801e7d4:	ab05      	add	r3, sp, #20
 801e7d6:	e781      	b.n	801e6dc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801e7d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7dc:	b093      	sub	sp, #76	; 0x4c
 801e7de:	9210      	str	r2, [sp, #64]	; 0x40
 801e7e0:	9309      	str	r3, [sp, #36]	; 0x24
 801e7e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e7e4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801e7e8:	9011      	str	r0, [sp, #68]	; 0x44
 801e7ea:	930e      	str	r3, [sp, #56]	; 0x38
 801e7ec:	6850      	ldr	r0, [r2, #4]
 801e7ee:	910d      	str	r1, [sp, #52]	; 0x34
 801e7f0:	6812      	ldr	r2, [r2, #0]
 801e7f2:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801e7f6:	fb00 1303 	mla	r3, r0, r3, r1
 801e7fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e7fe:	18d3      	adds	r3, r2, r3
 801e800:	930a      	str	r3, [sp, #40]	; 0x28
 801e802:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	930c      	str	r3, [sp, #48]	; 0x30
 801e808:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e80a:	685c      	ldr	r4, [r3, #4]
 801e80c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e80e:	3404      	adds	r4, #4
 801e810:	43db      	mvns	r3, r3
 801e812:	b2db      	uxtb	r3, r3
 801e814:	930b      	str	r3, [sp, #44]	; 0x2c
 801e816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e818:	2b00      	cmp	r3, #0
 801e81a:	dc03      	bgt.n	801e824 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e81c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e81e:	2b00      	cmp	r3, #0
 801e820:	f340 8250 	ble.w	801ecc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801e824:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e826:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e82a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e82e:	1e48      	subs	r0, r1, #1
 801e830:	1e55      	subs	r5, r2, #1
 801e832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e834:	2b00      	cmp	r3, #0
 801e836:	f340 80ee 	ble.w	801ea16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801e83a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801e83c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e83e:	1436      	asrs	r6, r6, #16
 801e840:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e844:	d406      	bmi.n	801e854 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e846:	4286      	cmp	r6, r0
 801e848:	da04      	bge.n	801e854 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	db02      	blt.n	801e854 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e84e:	42ab      	cmp	r3, r5
 801e850:	f2c0 80e2 	blt.w	801ea18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e854:	3601      	adds	r6, #1
 801e856:	f100 80cf 	bmi.w	801e9f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e85a:	42b1      	cmp	r1, r6
 801e85c:	f2c0 80cc 	blt.w	801e9f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e860:	3301      	adds	r3, #1
 801e862:	f100 80c9 	bmi.w	801e9f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e866:	429a      	cmp	r2, r3
 801e868:	f2c0 80c6 	blt.w	801e9f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e86c:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801e870:	f1bb 0f00 	cmp.w	fp, #0
 801e874:	f340 80f1 	ble.w	801ea5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801e878:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e87a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e87c:	9824      	ldr	r0, [sp, #144]	; 0x90
 801e87e:	141d      	asrs	r5, r3, #16
 801e880:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e882:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e886:	68c7      	ldr	r7, [r0, #12]
 801e888:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e88a:	1418      	asrs	r0, r3, #16
 801e88c:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801e890:	6892      	ldr	r2, [r2, #8]
 801e892:	f100 8137 	bmi.w	801eb04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e896:	f102 3cff 	add.w	ip, r2, #4294967295
 801e89a:	4560      	cmp	r0, ip
 801e89c:	f280 8132 	bge.w	801eb04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e8a0:	2d00      	cmp	r5, #0
 801e8a2:	f2c0 812f 	blt.w	801eb04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e8a6:	f107 3cff 	add.w	ip, r7, #4294967295
 801e8aa:	4565      	cmp	r5, ip
 801e8ac:	f280 812a 	bge.w	801eb04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e8b0:	b212      	sxth	r2, r2
 801e8b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e8b4:	fb05 0002 	mla	r0, r5, r2, r0
 801e8b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e8ba:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e8be:	4405      	add	r5, r0
 801e8c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e8c4:	eb04 0e0c 	add.w	lr, r4, ip
 801e8c8:	f1b8 0f00 	cmp.w	r8, #0
 801e8cc:	f000 810c 	beq.w	801eae8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801e8d0:	786f      	ldrb	r7, [r5, #1]
 801e8d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e8d6:	4427      	add	r7, r4
 801e8d8:	2900      	cmp	r1, #0
 801e8da:	f000 810d 	beq.w	801eaf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801e8de:	18a8      	adds	r0, r5, r2
 801e8e0:	5caa      	ldrb	r2, [r5, r2]
 801e8e2:	7840      	ldrb	r0, [r0, #1]
 801e8e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e8e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e8ec:	4422      	add	r2, r4
 801e8ee:	4420      	add	r0, r4
 801e8f0:	fa1f f388 	uxth.w	r3, r8
 801e8f4:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801e8f8:	b289      	uxth	r1, r1
 801e8fa:	f897 c000 	ldrb.w	ip, [r7]
 801e8fe:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801e902:	fb03 f901 	mul.w	r9, r3, r1
 801e906:	011b      	lsls	r3, r3, #4
 801e908:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e90c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801e910:	eba3 0309 	sub.w	r3, r3, r9
 801e914:	b289      	uxth	r1, r1
 801e916:	b29b      	uxth	r3, r3
 801e918:	eba8 0801 	sub.w	r8, r8, r1
 801e91c:	fb03 fc0c 	mul.w	ip, r3, ip
 801e920:	fa1f f888 	uxth.w	r8, r8
 801e924:	930f      	str	r3, [sp, #60]	; 0x3c
 801e926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e928:	fb08 cc0a 	mla	ip, r8, sl, ip
 801e92c:	f892 a000 	ldrb.w	sl, [r2]
 801e930:	fb01 cc0a 	mla	ip, r1, sl, ip
 801e934:	f890 a000 	ldrb.w	sl, [r0]
 801e938:	fb09 cc0a 	mla	ip, r9, sl, ip
 801e93c:	f896 a000 	ldrb.w	sl, [r6]
 801e940:	fb1a fa03 	smulbb	sl, sl, r3
 801e944:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e94a:	fb0c ac05 	mla	ip, ip, r5, sl
 801e94e:	fa1f fc8c 	uxth.w	ip, ip
 801e952:	f10c 0a01 	add.w	sl, ip, #1
 801e956:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801e95a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e95e:	f886 a000 	strb.w	sl, [r6]
 801e962:	f897 c001 	ldrb.w	ip, [r7, #1]
 801e966:	f89e a001 	ldrb.w	sl, [lr, #1]
 801e96a:	fb03 fc0c 	mul.w	ip, r3, ip
 801e96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e970:	fb08 cc0a 	mla	ip, r8, sl, ip
 801e974:	f892 a001 	ldrb.w	sl, [r2, #1]
 801e978:	fb01 cc0a 	mla	ip, r1, sl, ip
 801e97c:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e980:	fb09 cc0a 	mla	ip, r9, sl, ip
 801e984:	f896 a001 	ldrb.w	sl, [r6, #1]
 801e988:	fb1a fa03 	smulbb	sl, sl, r3
 801e98c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e992:	fb0c ac05 	mla	ip, ip, r5, sl
 801e996:	fa1f fc8c 	uxth.w	ip, ip
 801e99a:	f10c 0a01 	add.w	sl, ip, #1
 801e99e:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801e9a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e9a6:	f886 c001 	strb.w	ip, [r6, #1]
 801e9aa:	78bf      	ldrb	r7, [r7, #2]
 801e9ac:	f89e c002 	ldrb.w	ip, [lr, #2]
 801e9b0:	437b      	muls	r3, r7
 801e9b2:	fb08 330c 	mla	r3, r8, ip, r3
 801e9b6:	f892 c002 	ldrb.w	ip, [r2, #2]
 801e9ba:	7882      	ldrb	r2, [r0, #2]
 801e9bc:	fb01 310c 	mla	r1, r1, ip, r3
 801e9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e9c2:	fb09 1902 	mla	r9, r9, r2, r1
 801e9c6:	78b1      	ldrb	r1, [r6, #2]
 801e9c8:	fb11 f103 	smulbb	r1, r1, r3
 801e9cc:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e9d0:	fb09 1505 	mla	r5, r9, r5, r1
 801e9d4:	b2ad      	uxth	r5, r5
 801e9d6:	1c6b      	adds	r3, r5, #1
 801e9d8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e9dc:	122d      	asrs	r5, r5, #8
 801e9de:	70b5      	strb	r5, [r6, #2]
 801e9e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e9e2:	3603      	adds	r6, #3
 801e9e4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e9e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e9ea:	4413      	add	r3, r2
 801e9ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e9ee:	931d      	str	r3, [sp, #116]	; 0x74
 801e9f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e9f2:	4413      	add	r3, r2
 801e9f4:	931e      	str	r3, [sp, #120]	; 0x78
 801e9f6:	e73b      	b.n	801e870 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e9f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e9fa:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801e9fc:	4433      	add	r3, r6
 801e9fe:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801ea00:	931d      	str	r3, [sp, #116]	; 0x74
 801ea02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ea04:	4433      	add	r3, r6
 801ea06:	931e      	str	r3, [sp, #120]	; 0x78
 801ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea0a:	3b01      	subs	r3, #1
 801ea0c:	9309      	str	r3, [sp, #36]	; 0x24
 801ea0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea10:	3303      	adds	r3, #3
 801ea12:	930a      	str	r3, [sp, #40]	; 0x28
 801ea14:	e70d      	b.n	801e832 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ea16:	d028      	beq.n	801ea6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801ea18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea1a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ea1c:	3b01      	subs	r3, #1
 801ea1e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801ea20:	fb00 5003 	mla	r0, r0, r3, r5
 801ea24:	1400      	asrs	r0, r0, #16
 801ea26:	f53f af21 	bmi.w	801e86c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ea2a:	3901      	subs	r1, #1
 801ea2c:	4288      	cmp	r0, r1
 801ea2e:	f6bf af1d 	bge.w	801e86c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ea32:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ea34:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ea36:	fb01 0303 	mla	r3, r1, r3, r0
 801ea3a:	141b      	asrs	r3, r3, #16
 801ea3c:	f53f af16 	bmi.w	801e86c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ea40:	3a01      	subs	r2, #1
 801ea42:	4293      	cmp	r3, r2
 801ea44:	f6bf af12 	bge.w	801e86c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ea48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea4a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ea4e:	1cdf      	adds	r7, r3, #3
 801ea50:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801ea54:	f1b9 0f00 	cmp.w	r9, #0
 801ea58:	dc73      	bgt.n	801eb42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801ea5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ea5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea66:	441a      	add	r2, r3
 801ea68:	920a      	str	r2, [sp, #40]	; 0x28
 801ea6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	f340 8129 	ble.w	801ecc4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801ea72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ea76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ea78:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea80:	eef0 6a62 	vmov.f32	s13, s5
 801ea84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ea88:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea90:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801ea94:	eef0 6a43 	vmov.f32	s13, s6
 801ea98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ea9c:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801eaa0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eaa4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eaa8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eaac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eab0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eab4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eab8:	ee12 2a90 	vmov	r2, s5
 801eabc:	eef0 2a47 	vmov.f32	s5, s14
 801eac0:	fb92 f3f3 	sdiv	r3, r2, r3
 801eac4:	ee13 2a10 	vmov	r2, s6
 801eac8:	931f      	str	r3, [sp, #124]	; 0x7c
 801eaca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eacc:	eeb0 3a67 	vmov.f32	s6, s15
 801ead0:	fb92 f3f3 	sdiv	r3, r2, r3
 801ead4:	9320      	str	r3, [sp, #128]	; 0x80
 801ead6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ead8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eada:	3b01      	subs	r3, #1
 801eadc:	930d      	str	r3, [sp, #52]	; 0x34
 801eade:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801eae0:	bf08      	it	eq
 801eae2:	4613      	moveq	r3, r2
 801eae4:	9309      	str	r3, [sp, #36]	; 0x24
 801eae6:	e696      	b.n	801e816 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801eae8:	b149      	cbz	r1, 801eafe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801eaea:	5caa      	ldrb	r2, [r5, r2]
 801eaec:	4670      	mov	r0, lr
 801eaee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eaf2:	4422      	add	r2, r4
 801eaf4:	4677      	mov	r7, lr
 801eaf6:	e6fb      	b.n	801e8f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801eaf8:	4670      	mov	r0, lr
 801eafa:	4672      	mov	r2, lr
 801eafc:	e6f8      	b.n	801e8f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801eafe:	4670      	mov	r0, lr
 801eb00:	4672      	mov	r2, lr
 801eb02:	e7f7      	b.n	801eaf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801eb04:	f110 0c01 	adds.w	ip, r0, #1
 801eb08:	f53f af6a 	bmi.w	801e9e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801eb0c:	4562      	cmp	r2, ip
 801eb0e:	f6ff af67 	blt.w	801e9e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801eb12:	f115 0c01 	adds.w	ip, r5, #1
 801eb16:	f53f af63 	bmi.w	801e9e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801eb1a:	4567      	cmp	r7, ip
 801eb1c:	f6ff af60 	blt.w	801e9e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801eb20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb22:	b23f      	sxth	r7, r7
 801eb24:	b212      	sxth	r2, r2
 801eb26:	9002      	str	r0, [sp, #8]
 801eb28:	9701      	str	r7, [sp, #4]
 801eb2a:	9200      	str	r2, [sp, #0]
 801eb2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801eb2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eb30:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801eb34:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801eb38:	4623      	mov	r3, r4
 801eb3a:	4631      	mov	r1, r6
 801eb3c:	f7ff fd69 	bl	801e612 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801eb40:	e74e      	b.n	801e9e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801eb42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801eb44:	981e      	ldr	r0, [sp, #120]	; 0x78
 801eb46:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801eb4a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801eb4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801eb4e:	1400      	asrs	r0, r0, #16
 801eb50:	142d      	asrs	r5, r5, #16
 801eb52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801eb54:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801eb58:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801eb5c:	fb02 5000 	mla	r0, r2, r0, r5
 801eb60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801eb62:	f815 e000 	ldrb.w	lr, [r5, r0]
 801eb66:	eb05 0c00 	add.w	ip, r5, r0
 801eb6a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801eb6e:	eb04 060e 	add.w	r6, r4, lr
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	f000 8097 	beq.w	801eca6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801eb78:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801eb7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb80:	4425      	add	r5, r4
 801eb82:	2900      	cmp	r1, #0
 801eb84:	f000 8098 	beq.w	801ecb8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801eb88:	eb0c 0002 	add.w	r0, ip, r2
 801eb8c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801eb90:	7840      	ldrb	r0, [r0, #1]
 801eb92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb9a:	4422      	add	r2, r4
 801eb9c:	4420      	add	r0, r4
 801eb9e:	b29b      	uxth	r3, r3
 801eba0:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801eba4:	b289      	uxth	r1, r1
 801eba6:	f895 e000 	ldrb.w	lr, [r5]
 801ebaa:	3703      	adds	r7, #3
 801ebac:	f109 39ff 	add.w	r9, r9, #4294967295
 801ebb0:	fb03 f801 	mul.w	r8, r3, r1
 801ebb4:	011b      	lsls	r3, r3, #4
 801ebb6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801ebba:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ebbe:	eba3 0308 	sub.w	r3, r3, r8
 801ebc2:	b289      	uxth	r1, r1
 801ebc4:	b29b      	uxth	r3, r3
 801ebc6:	ebac 0c01 	sub.w	ip, ip, r1
 801ebca:	fb03 fe0e 	mul.w	lr, r3, lr
 801ebce:	fa1f fc8c 	uxth.w	ip, ip
 801ebd2:	930f      	str	r3, [sp, #60]	; 0x3c
 801ebd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ebd6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ebda:	f892 b000 	ldrb.w	fp, [r2]
 801ebde:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ebe2:	f890 b000 	ldrb.w	fp, [r0]
 801ebe6:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ebea:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801ebee:	fb1b fb03 	smulbb	fp, fp, r3
 801ebf2:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ebf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ebf8:	fb0e be0a 	mla	lr, lr, sl, fp
 801ebfc:	fa1f fe8e 	uxth.w	lr, lr
 801ec00:	f10e 0b01 	add.w	fp, lr, #1
 801ec04:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ec08:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ec0c:	f807 ec06 	strb.w	lr, [r7, #-6]
 801ec10:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ec14:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ec18:	fb03 fe0e 	mul.w	lr, r3, lr
 801ec1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec1e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ec22:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ec26:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ec2a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ec2e:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ec32:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801ec36:	fb1b fb03 	smulbb	fp, fp, r3
 801ec3a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ec3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ec40:	fb0e be0a 	mla	lr, lr, sl, fp
 801ec44:	fa1f fe8e 	uxth.w	lr, lr
 801ec48:	f10e 0b01 	add.w	fp, lr, #1
 801ec4c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ec50:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ec54:	f807 ec05 	strb.w	lr, [r7, #-5]
 801ec58:	78ad      	ldrb	r5, [r5, #2]
 801ec5a:	78b6      	ldrb	r6, [r6, #2]
 801ec5c:	436b      	muls	r3, r5
 801ec5e:	7895      	ldrb	r5, [r2, #2]
 801ec60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ec62:	fb0c 3306 	mla	r3, ip, r6, r3
 801ec66:	fb01 3305 	mla	r3, r1, r5, r3
 801ec6a:	7885      	ldrb	r5, [r0, #2]
 801ec6c:	fb08 3805 	mla	r8, r8, r5, r3
 801ec70:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801ec74:	fb13 f302 	smulbb	r3, r3, r2
 801ec78:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ec7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ec7e:	fb08 380a 	mla	r8, r8, sl, r3
 801ec82:	fa1f f888 	uxth.w	r8, r8
 801ec86:	f108 0301 	add.w	r3, r8, #1
 801ec8a:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801ec8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ec90:	4413      	add	r3, r2
 801ec92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ec94:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ec98:	931d      	str	r3, [sp, #116]	; 0x74
 801ec9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ec9c:	f807 8c04 	strb.w	r8, [r7, #-4]
 801eca0:	4413      	add	r3, r2
 801eca2:	931e      	str	r3, [sp, #120]	; 0x78
 801eca4:	e6d6      	b.n	801ea54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801eca6:	b151      	cbz	r1, 801ecbe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801eca8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ecac:	4630      	mov	r0, r6
 801ecae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ecb2:	4422      	add	r2, r4
 801ecb4:	4635      	mov	r5, r6
 801ecb6:	e772      	b.n	801eb9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ecb8:	4630      	mov	r0, r6
 801ecba:	4632      	mov	r2, r6
 801ecbc:	e76f      	b.n	801eb9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ecbe:	4630      	mov	r0, r6
 801ecc0:	4632      	mov	r2, r6
 801ecc2:	e7f7      	b.n	801ecb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ecc4:	b013      	add	sp, #76	; 0x4c
 801ecc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ecca <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801ecca:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ecce:	784c      	ldrb	r4, [r1, #1]
 801ecd0:	f891 a002 	ldrb.w	sl, [r1, #2]
 801ecd4:	0224      	lsls	r4, r4, #8
 801ecd6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801ecda:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801ecde:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801ece2:	f891 a000 	ldrb.w	sl, [r1]
 801ece6:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801ecea:	ea44 040a 	orr.w	r4, r4, sl
 801ecee:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801ecf2:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801ecf6:	9401      	str	r4, [sp, #4]
 801ecf8:	fb05 c70e 	mla	r7, r5, lr, ip
 801ecfc:	2d00      	cmp	r5, #0
 801ecfe:	eb02 0807 	add.w	r8, r2, r7
 801ed02:	db72      	blt.n	801edea <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801ed04:	45a9      	cmp	r9, r5
 801ed06:	dd70      	ble.n	801edea <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801ed08:	f1bc 0f00 	cmp.w	ip, #0
 801ed0c:	db6b      	blt.n	801ede6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801ed0e:	45e6      	cmp	lr, ip
 801ed10:	dd69      	ble.n	801ede6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801ed12:	5dd7      	ldrb	r7, [r2, r7]
 801ed14:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ed18:	441f      	add	r7, r3
 801ed1a:	f11c 0201 	adds.w	r2, ip, #1
 801ed1e:	d467      	bmi.n	801edf0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ed20:	4596      	cmp	lr, r2
 801ed22:	dd65      	ble.n	801edf0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ed24:	2800      	cmp	r0, #0
 801ed26:	d063      	beq.n	801edf0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ed28:	f898 4001 	ldrb.w	r4, [r8, #1]
 801ed2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ed30:	441c      	add	r4, r3
 801ed32:	3501      	adds	r5, #1
 801ed34:	d460      	bmi.n	801edf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ed36:	45a9      	cmp	r9, r5
 801ed38:	dd5e      	ble.n	801edf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ed3a:	2e00      	cmp	r6, #0
 801ed3c:	d05c      	beq.n	801edf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ed3e:	f1bc 0f00 	cmp.w	ip, #0
 801ed42:	db57      	blt.n	801edf4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801ed44:	45e6      	cmp	lr, ip
 801ed46:	dd55      	ble.n	801edf4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801ed48:	f818 500e 	ldrb.w	r5, [r8, lr]
 801ed4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed50:	441d      	add	r5, r3
 801ed52:	f11c 0201 	adds.w	r2, ip, #1
 801ed56:	d452      	bmi.n	801edfe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801ed58:	4596      	cmp	lr, r2
 801ed5a:	dd50      	ble.n	801edfe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801ed5c:	2800      	cmp	r0, #0
 801ed5e:	d04e      	beq.n	801edfe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801ed60:	44c6      	add	lr, r8
 801ed62:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ed66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed6a:	4413      	add	r3, r2
 801ed6c:	b280      	uxth	r0, r0
 801ed6e:	f897 8000 	ldrb.w	r8, [r7]
 801ed72:	b2b2      	uxth	r2, r6
 801ed74:	fb00 f602 	mul.w	r6, r0, r2
 801ed78:	0100      	lsls	r0, r0, #4
 801ed7a:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801ed7e:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801ed82:	1b80      	subs	r0, r0, r6
 801ed84:	fa1f fc82 	uxth.w	ip, r2
 801ed88:	b282      	uxth	r2, r0
 801ed8a:	7820      	ldrb	r0, [r4, #0]
 801ed8c:	ebae 0e0c 	sub.w	lr, lr, ip
 801ed90:	4350      	muls	r0, r2
 801ed92:	fa1f fe8e 	uxth.w	lr, lr
 801ed96:	fb0e 0808 	mla	r8, lr, r8, r0
 801ed9a:	7828      	ldrb	r0, [r5, #0]
 801ed9c:	fb0c 8800 	mla	r8, ip, r0, r8
 801eda0:	7818      	ldrb	r0, [r3, #0]
 801eda2:	fb06 8000 	mla	r0, r6, r0, r8
 801eda6:	1200      	asrs	r0, r0, #8
 801eda8:	7008      	strb	r0, [r1, #0]
 801edaa:	7860      	ldrb	r0, [r4, #1]
 801edac:	f897 8001 	ldrb.w	r8, [r7, #1]
 801edb0:	4350      	muls	r0, r2
 801edb2:	fb0e 0808 	mla	r8, lr, r8, r0
 801edb6:	7868      	ldrb	r0, [r5, #1]
 801edb8:	fb0c 8800 	mla	r8, ip, r0, r8
 801edbc:	7858      	ldrb	r0, [r3, #1]
 801edbe:	fb06 8000 	mla	r0, r6, r0, r8
 801edc2:	1200      	asrs	r0, r0, #8
 801edc4:	7048      	strb	r0, [r1, #1]
 801edc6:	78a0      	ldrb	r0, [r4, #2]
 801edc8:	78bf      	ldrb	r7, [r7, #2]
 801edca:	4350      	muls	r0, r2
 801edcc:	78aa      	ldrb	r2, [r5, #2]
 801edce:	fb0e 0007 	mla	r0, lr, r7, r0
 801edd2:	fb0c 0c02 	mla	ip, ip, r2, r0
 801edd6:	789a      	ldrb	r2, [r3, #2]
 801edd8:	fb06 c202 	mla	r2, r6, r2, ip
 801eddc:	1212      	asrs	r2, r2, #8
 801edde:	708a      	strb	r2, [r1, #2]
 801ede0:	b002      	add	sp, #8
 801ede2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ede6:	af01      	add	r7, sp, #4
 801ede8:	e797      	b.n	801ed1a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801edea:	ac01      	add	r4, sp, #4
 801edec:	4627      	mov	r7, r4
 801edee:	e7a0      	b.n	801ed32 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801edf0:	ac01      	add	r4, sp, #4
 801edf2:	e79e      	b.n	801ed32 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801edf4:	ad01      	add	r5, sp, #4
 801edf6:	e7ac      	b.n	801ed52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801edf8:	ab01      	add	r3, sp, #4
 801edfa:	461d      	mov	r5, r3
 801edfc:	e7b6      	b.n	801ed6c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801edfe:	ab01      	add	r3, sp, #4
 801ee00:	e7b4      	b.n	801ed6c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801ee02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee06:	b08d      	sub	sp, #52	; 0x34
 801ee08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ee0c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801ee10:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ee12:	900b      	str	r0, [sp, #44]	; 0x2c
 801ee14:	9306      	str	r3, [sp, #24]
 801ee16:	6850      	ldr	r0, [r2, #4]
 801ee18:	6812      	ldr	r2, [r2, #0]
 801ee1a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ee1c:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801ee20:	fb00 1303 	mla	r3, r0, r3, r1
 801ee24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee28:	18d3      	adds	r3, r2, r3
 801ee2a:	9307      	str	r3, [sp, #28]
 801ee2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	9308      	str	r3, [sp, #32]
 801ee32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ee34:	685d      	ldr	r5, [r3, #4]
 801ee36:	3504      	adds	r5, #4
 801ee38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	dc03      	bgt.n	801ee46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ee3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	f340 81e6 	ble.w	801f212 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801ee46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ee48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ee4c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ee50:	1e48      	subs	r0, r1, #1
 801ee52:	1e56      	subs	r6, r2, #1
 801ee54:	9b06      	ldr	r3, [sp, #24]
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	f340 80bd 	ble.w	801efd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801ee5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ee5e:	1427      	asrs	r7, r4, #16
 801ee60:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ee64:	d406      	bmi.n	801ee74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ee66:	4287      	cmp	r7, r0
 801ee68:	da04      	bge.n	801ee74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	db02      	blt.n	801ee74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ee6e:	42b3      	cmp	r3, r6
 801ee70:	f2c0 80b2 	blt.w	801efd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801ee74:	3701      	adds	r7, #1
 801ee76:	f100 80a1 	bmi.w	801efbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ee7a:	42b9      	cmp	r1, r7
 801ee7c:	f2c0 809e 	blt.w	801efbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ee80:	3301      	adds	r3, #1
 801ee82:	f100 809b 	bmi.w	801efbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ee86:	429a      	cmp	r2, r3
 801ee88:	f2c0 8098 	blt.w	801efbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ee8c:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801ee90:	f1bb 0f00 	cmp.w	fp, #0
 801ee94:	f340 80bf 	ble.w	801f016 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ee98:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ee9a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ee9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ee9e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801eea2:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801eea6:	1420      	asrs	r0, r4, #16
 801eea8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801eeaa:	ea4f 4723 	mov.w	r7, r3, asr #16
 801eeae:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801eeb2:	6892      	ldr	r2, [r2, #8]
 801eeb4:	f100 8103 	bmi.w	801f0be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801eeb8:	f102 3eff 	add.w	lr, r2, #4294967295
 801eebc:	4570      	cmp	r0, lr
 801eebe:	f280 80fe 	bge.w	801f0be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801eec2:	2f00      	cmp	r7, #0
 801eec4:	f2c0 80fb 	blt.w	801f0be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801eec8:	f10c 3eff 	add.w	lr, ip, #4294967295
 801eecc:	4577      	cmp	r7, lr
 801eece:	f280 80f6 	bge.w	801f0be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801eed2:	b212      	sxth	r2, r2
 801eed4:	fb07 0002 	mla	r0, r7, r2, r0
 801eed8:	9f08      	ldr	r7, [sp, #32]
 801eeda:	f817 8000 	ldrb.w	r8, [r7, r0]
 801eede:	eb07 0e00 	add.w	lr, r7, r0
 801eee2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801eee6:	eb05 0c08 	add.w	ip, r5, r8
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	f000 80d8 	beq.w	801f0a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801eef0:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801eef4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801eef8:	442f      	add	r7, r5
 801eefa:	2900      	cmp	r1, #0
 801eefc:	f000 80d9 	beq.w	801f0b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ef00:	eb0e 0002 	add.w	r0, lr, r2
 801ef04:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801ef08:	7840      	ldrb	r0, [r0, #1]
 801ef0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ef0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ef12:	442a      	add	r2, r5
 801ef14:	4428      	add	r0, r5
 801ef16:	b29b      	uxth	r3, r3
 801ef18:	f815 a008 	ldrb.w	sl, [r5, r8]
 801ef1c:	b289      	uxth	r1, r1
 801ef1e:	f897 8000 	ldrb.w	r8, [r7]
 801ef22:	fb03 f901 	mul.w	r9, r3, r1
 801ef26:	011b      	lsls	r3, r3, #4
 801ef28:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ef2c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ef30:	eba3 0309 	sub.w	r3, r3, r9
 801ef34:	b289      	uxth	r1, r1
 801ef36:	b29b      	uxth	r3, r3
 801ef38:	ebae 0e01 	sub.w	lr, lr, r1
 801ef3c:	fb03 f808 	mul.w	r8, r3, r8
 801ef40:	fa1f fe8e 	uxth.w	lr, lr
 801ef44:	fb0e 880a 	mla	r8, lr, sl, r8
 801ef48:	f892 a000 	ldrb.w	sl, [r2]
 801ef4c:	fb01 880a 	mla	r8, r1, sl, r8
 801ef50:	f890 a000 	ldrb.w	sl, [r0]
 801ef54:	fb09 880a 	mla	r8, r9, sl, r8
 801ef58:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ef5c:	f886 8000 	strb.w	r8, [r6]
 801ef60:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ef64:	f89c a001 	ldrb.w	sl, [ip, #1]
 801ef68:	fb03 f808 	mul.w	r8, r3, r8
 801ef6c:	fb0e 880a 	mla	r8, lr, sl, r8
 801ef70:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ef74:	fb01 880a 	mla	r8, r1, sl, r8
 801ef78:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ef7c:	fb09 880a 	mla	r8, r9, sl, r8
 801ef80:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ef84:	f886 8001 	strb.w	r8, [r6, #1]
 801ef88:	78bf      	ldrb	r7, [r7, #2]
 801ef8a:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ef8e:	437b      	muls	r3, r7
 801ef90:	7892      	ldrb	r2, [r2, #2]
 801ef92:	fb0e 330c 	mla	r3, lr, ip, r3
 801ef96:	fb01 3102 	mla	r1, r1, r2, r3
 801ef9a:	7882      	ldrb	r2, [r0, #2]
 801ef9c:	fb09 1902 	mla	r9, r9, r2, r1
 801efa0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801efa4:	f886 9002 	strb.w	r9, [r6, #2]
 801efa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801efaa:	3603      	adds	r6, #3
 801efac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801efae:	f10b 3bff 	add.w	fp, fp, #4294967295
 801efb2:	441c      	add	r4, r3
 801efb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801efb6:	4413      	add	r3, r2
 801efb8:	9318      	str	r3, [sp, #96]	; 0x60
 801efba:	e769      	b.n	801ee90 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801efbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801efbe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801efc0:	441c      	add	r4, r3
 801efc2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801efc4:	443b      	add	r3, r7
 801efc6:	9318      	str	r3, [sp, #96]	; 0x60
 801efc8:	9b06      	ldr	r3, [sp, #24]
 801efca:	3b01      	subs	r3, #1
 801efcc:	9306      	str	r3, [sp, #24]
 801efce:	9b07      	ldr	r3, [sp, #28]
 801efd0:	3303      	adds	r3, #3
 801efd2:	9307      	str	r3, [sp, #28]
 801efd4:	e73e      	b.n	801ee54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801efd6:	d026      	beq.n	801f026 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801efd8:	9b06      	ldr	r3, [sp, #24]
 801efda:	9819      	ldr	r0, [sp, #100]	; 0x64
 801efdc:	3b01      	subs	r3, #1
 801efde:	fb00 4003 	mla	r0, r0, r3, r4
 801efe2:	1400      	asrs	r0, r0, #16
 801efe4:	f53f af52 	bmi.w	801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801efe8:	3901      	subs	r1, #1
 801efea:	4288      	cmp	r0, r1
 801efec:	f6bf af4e 	bge.w	801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eff0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801eff2:	9818      	ldr	r0, [sp, #96]	; 0x60
 801eff4:	fb01 0303 	mla	r3, r1, r3, r0
 801eff8:	141b      	asrs	r3, r3, #16
 801effa:	f53f af47 	bmi.w	801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801effe:	3a01      	subs	r2, #1
 801f000:	4293      	cmp	r3, r2
 801f002:	f6bf af43 	bge.w	801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f006:	9b07      	ldr	r3, [sp, #28]
 801f008:	f8dd a018 	ldr.w	sl, [sp, #24]
 801f00c:	f103 0803 	add.w	r8, r3, #3
 801f010:	f1ba 0f00 	cmp.w	sl, #0
 801f014:	dc71      	bgt.n	801f0fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801f016:	9b06      	ldr	r3, [sp, #24]
 801f018:	9a07      	ldr	r2, [sp, #28]
 801f01a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f01e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f022:	441a      	add	r2, r3
 801f024:	9207      	str	r2, [sp, #28]
 801f026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f028:	2b00      	cmp	r3, #0
 801f02a:	f340 80f2 	ble.w	801f212 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801f02e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f032:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f034:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f038:	eeb0 6a62 	vmov.f32	s12, s5
 801f03c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f040:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f044:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f048:	ee16 4a10 	vmov	r4, s12
 801f04c:	eeb0 6a43 	vmov.f32	s12, s6
 801f050:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f054:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801f058:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f05c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f060:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f064:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f068:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f06c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f070:	ee12 2a90 	vmov	r2, s5
 801f074:	eef0 2a47 	vmov.f32	s5, s14
 801f078:	fb92 f3f3 	sdiv	r3, r2, r3
 801f07c:	ee13 2a10 	vmov	r2, s6
 801f080:	9319      	str	r3, [sp, #100]	; 0x64
 801f082:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f084:	eeb0 3a67 	vmov.f32	s6, s15
 801f088:	fb92 f3f3 	sdiv	r3, r2, r3
 801f08c:	931a      	str	r3, [sp, #104]	; 0x68
 801f08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f092:	3b01      	subs	r3, #1
 801f094:	9309      	str	r3, [sp, #36]	; 0x24
 801f096:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f098:	bf08      	it	eq
 801f09a:	4613      	moveq	r3, r2
 801f09c:	9306      	str	r3, [sp, #24]
 801f09e:	e6cb      	b.n	801ee38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f0a0:	b151      	cbz	r1, 801f0b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f0a2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f0a6:	4660      	mov	r0, ip
 801f0a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f0ac:	442a      	add	r2, r5
 801f0ae:	4667      	mov	r7, ip
 801f0b0:	e731      	b.n	801ef16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f0b2:	4660      	mov	r0, ip
 801f0b4:	4662      	mov	r2, ip
 801f0b6:	e72e      	b.n	801ef16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f0b8:	4660      	mov	r0, ip
 801f0ba:	4662      	mov	r2, ip
 801f0bc:	e7f7      	b.n	801f0ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f0be:	f110 0e01 	adds.w	lr, r0, #1
 801f0c2:	f53f af71 	bmi.w	801efa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f0c6:	4572      	cmp	r2, lr
 801f0c8:	f6ff af6e 	blt.w	801efa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f0cc:	f117 0e01 	adds.w	lr, r7, #1
 801f0d0:	f53f af6a 	bmi.w	801efa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f0d4:	45f4      	cmp	ip, lr
 801f0d6:	f6ff af67 	blt.w	801efa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f0da:	b212      	sxth	r2, r2
 801f0dc:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f0e0:	fa0f f38c 	sxth.w	r3, ip
 801f0e4:	9200      	str	r2, [sp, #0]
 801f0e6:	4631      	mov	r1, r6
 801f0e8:	9a08      	ldr	r2, [sp, #32]
 801f0ea:	9301      	str	r3, [sp, #4]
 801f0ec:	462b      	mov	r3, r5
 801f0ee:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801f0f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f0f4:	f7ff fde9 	bl	801ecca <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f0f8:	e756      	b.n	801efa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f0fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f0fc:	1426      	asrs	r6, r4, #16
 801f0fe:	9818      	ldr	r0, [sp, #96]	; 0x60
 801f100:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801f104:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f108:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f10a:	1400      	asrs	r0, r0, #16
 801f10c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f110:	fb02 6000 	mla	r0, r2, r0, r6
 801f114:	9e08      	ldr	r6, [sp, #32]
 801f116:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f11a:	eb06 0c00 	add.w	ip, r6, r0
 801f11e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f122:	eb05 070e 	add.w	r7, r5, lr
 801f126:	2b00      	cmp	r3, #0
 801f128:	d064      	beq.n	801f1f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801f12a:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801f12e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f132:	442e      	add	r6, r5
 801f134:	2900      	cmp	r1, #0
 801f136:	d066      	beq.n	801f206 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801f138:	eb0c 0002 	add.w	r0, ip, r2
 801f13c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f140:	7840      	ldrb	r0, [r0, #1]
 801f142:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f146:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f14a:	442a      	add	r2, r5
 801f14c:	4428      	add	r0, r5
 801f14e:	b29b      	uxth	r3, r3
 801f150:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801f154:	b289      	uxth	r1, r1
 801f156:	f896 e000 	ldrb.w	lr, [r6]
 801f15a:	f108 0803 	add.w	r8, r8, #3
 801f15e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f162:	fb03 f901 	mul.w	r9, r3, r1
 801f166:	011b      	lsls	r3, r3, #4
 801f168:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f16c:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f170:	eba3 0309 	sub.w	r3, r3, r9
 801f174:	b289      	uxth	r1, r1
 801f176:	b29b      	uxth	r3, r3
 801f178:	ebac 0c01 	sub.w	ip, ip, r1
 801f17c:	fb03 fe0e 	mul.w	lr, r3, lr
 801f180:	fa1f fc8c 	uxth.w	ip, ip
 801f184:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f188:	f892 b000 	ldrb.w	fp, [r2]
 801f18c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f190:	f890 b000 	ldrb.w	fp, [r0]
 801f194:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f198:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f19c:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f1a0:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f1a4:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f1a8:	fb03 fe0e 	mul.w	lr, r3, lr
 801f1ac:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f1b0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f1b4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f1b8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f1bc:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f1c0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f1c4:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f1c8:	78b6      	ldrb	r6, [r6, #2]
 801f1ca:	78bf      	ldrb	r7, [r7, #2]
 801f1cc:	4373      	muls	r3, r6
 801f1ce:	7896      	ldrb	r6, [r2, #2]
 801f1d0:	7882      	ldrb	r2, [r0, #2]
 801f1d2:	fb0c 3307 	mla	r3, ip, r7, r3
 801f1d6:	fb01 3306 	mla	r3, r1, r6, r3
 801f1da:	fb09 3902 	mla	r9, r9, r2, r3
 801f1de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f1e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801f1e2:	441c      	add	r4, r3
 801f1e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f1e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f1ea:	4413      	add	r3, r2
 801f1ec:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f1f0:	9318      	str	r3, [sp, #96]	; 0x60
 801f1f2:	e70d      	b.n	801f010 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801f1f4:	b151      	cbz	r1, 801f20c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801f1f6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f1fa:	4638      	mov	r0, r7
 801f1fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f200:	442a      	add	r2, r5
 801f202:	463e      	mov	r6, r7
 801f204:	e7a3      	b.n	801f14e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f206:	4638      	mov	r0, r7
 801f208:	463a      	mov	r2, r7
 801f20a:	e7a0      	b.n	801f14e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f20c:	4638      	mov	r0, r7
 801f20e:	463a      	mov	r2, r7
 801f210:	e7f7      	b.n	801f202 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801f212:	b00d      	add	sp, #52	; 0x34
 801f214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f218 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f21c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801f220:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801f224:	2d00      	cmp	r5, #0
 801f226:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f22a:	fb05 700c 	mla	r0, r5, ip, r7
 801f22e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801f232:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801f236:	eb02 0800 	add.w	r8, r2, r0
 801f23a:	f2c0 8118 	blt.w	801f46e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801f23e:	45a9      	cmp	r9, r5
 801f240:	f340 8115 	ble.w	801f46e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801f244:	2f00      	cmp	r7, #0
 801f246:	f2c0 8110 	blt.w	801f46a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801f24a:	45bc      	cmp	ip, r7
 801f24c:	f340 810d 	ble.w	801f46a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801f250:	5c12      	ldrb	r2, [r2, r0]
 801f252:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f256:	1c7a      	adds	r2, r7, #1
 801f258:	f100 810c 	bmi.w	801f474 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801f25c:	4594      	cmp	ip, r2
 801f25e:	f340 8109 	ble.w	801f474 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801f262:	2c00      	cmp	r4, #0
 801f264:	f000 8108 	beq.w	801f478 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801f268:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f26c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f270:	3501      	adds	r5, #1
 801f272:	f100 8105 	bmi.w	801f480 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801f276:	45a9      	cmp	r9, r5
 801f278:	f340 8102 	ble.w	801f480 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801f27c:	f1be 0f00 	cmp.w	lr, #0
 801f280:	f000 8101 	beq.w	801f486 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801f284:	2f00      	cmp	r7, #0
 801f286:	f2c0 80f9 	blt.w	801f47c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801f28a:	45bc      	cmp	ip, r7
 801f28c:	f340 80f6 	ble.w	801f47c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801f290:	f818 200c 	ldrb.w	r2, [r8, ip]
 801f294:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f298:	3701      	adds	r7, #1
 801f29a:	f100 80f7 	bmi.w	801f48c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801f29e:	45bc      	cmp	ip, r7
 801f2a0:	f340 80f4 	ble.w	801f48c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801f2a4:	2c00      	cmp	r4, #0
 801f2a6:	f000 80f3 	beq.w	801f490 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801f2aa:	44c4      	add	ip, r8
 801f2ac:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f2b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f2b4:	fa1f fc84 	uxth.w	ip, r4
 801f2b8:	fa1f f48e 	uxth.w	r4, lr
 801f2bc:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801f2c0:	fb04 fe0c 	mul.w	lr, r4, ip
 801f2c4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f2c8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f2cc:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801f2d0:	ebac 070e 	sub.w	r7, ip, lr
 801f2d4:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f2d8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f2dc:	b2a4      	uxth	r4, r4
 801f2de:	b2bf      	uxth	r7, r7
 801f2e0:	1b1b      	subs	r3, r3, r4
 801f2e2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f2e6:	fb07 fc0a 	mul.w	ip, r7, sl
 801f2ea:	b29b      	uxth	r3, r3
 801f2ec:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f2f0:	9300      	str	r3, [sp, #0]
 801f2f2:	fb04 cc09 	mla	ip, r4, r9, ip
 801f2f6:	fb0e cc08 	mla	ip, lr, r8, ip
 801f2fa:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f2fe:	9301      	str	r3, [sp, #4]
 801f300:	2b00      	cmp	r3, #0
 801f302:	f000 80af 	beq.w	801f464 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801f306:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f30a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f30e:	fb0b fc0c 	mul.w	ip, fp, ip
 801f312:	fb0b f606 	mul.w	r6, fp, r6
 801f316:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f31a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f31e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f322:	44dc      	add	ip, fp
 801f324:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801f328:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f32c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f330:	fb0a fb0b 	mul.w	fp, sl, fp
 801f334:	fb0a fa00 	mul.w	sl, sl, r0
 801f338:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f33c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f340:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801f344:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f348:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f34c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f350:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801f354:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f358:	0a36      	lsrs	r6, r6, #8
 801f35a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f35e:	44dc      	add	ip, fp
 801f360:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f364:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f368:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f36c:	fb09 fb0b 	mul.w	fp, r9, fp
 801f370:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f374:	fb09 f905 	mul.w	r9, r9, r5
 801f378:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801f37c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f380:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801f384:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f388:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f38c:	fb0c fc07 	mul.w	ip, ip, r7
 801f390:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801f394:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801f398:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f39c:	4458      	add	r0, fp
 801f39e:	fb08 f505 	mul.w	r5, r8, r5
 801f3a2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f3a6:	fb08 f802 	mul.w	r8, r8, r2
 801f3aa:	0a00      	lsrs	r0, r0, #8
 801f3ac:	0a2a      	lsrs	r2, r5, #8
 801f3ae:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801f3b2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f3b6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f3ba:	4415      	add	r5, r2
 801f3bc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f3c0:	0a2d      	lsrs	r5, r5, #8
 801f3c2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f3c6:	9a00      	ldr	r2, [sp, #0]
 801f3c8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f3cc:	fb03 cc02 	mla	ip, r3, r2, ip
 801f3d0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f3d4:	9b01      	ldr	r3, [sp, #4]
 801f3d6:	fb05 c50e 	mla	r5, r5, lr, ip
 801f3da:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f3de:	fb00 5004 	mla	r0, r0, r4, r5
 801f3e2:	0a00      	lsrs	r0, r0, #8
 801f3e4:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801f3e8:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801f3ec:	4378      	muls	r0, r7
 801f3ee:	fb02 0006 	mla	r0, r2, r6, r0
 801f3f2:	fb0e 0e08 	mla	lr, lr, r8, r0
 801f3f6:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801f3fa:	fb04 e000 	mla	r0, r4, r0, lr
 801f3fe:	0a00      	lsrs	r0, r0, #8
 801f400:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f404:	4328      	orrs	r0, r5
 801f406:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801f40a:	b2ad      	uxth	r5, r5
 801f40c:	b2c4      	uxtb	r4, r0
 801f40e:	436b      	muls	r3, r5
 801f410:	fb14 f405 	smulbb	r4, r4, r5
 801f414:	1c5a      	adds	r2, r3, #1
 801f416:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f41a:	780b      	ldrb	r3, [r1, #0]
 801f41c:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801f420:	b2d2      	uxtb	r2, r2
 801f422:	fb03 4302 	mla	r3, r3, r2, r4
 801f426:	b29b      	uxth	r3, r3
 801f428:	1c5c      	adds	r4, r3, #1
 801f42a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f42e:	784c      	ldrb	r4, [r1, #1]
 801f430:	fb14 f402 	smulbb	r4, r4, r2
 801f434:	121b      	asrs	r3, r3, #8
 801f436:	700b      	strb	r3, [r1, #0]
 801f438:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801f43c:	fb03 4305 	mla	r3, r3, r5, r4
 801f440:	b29b      	uxth	r3, r3
 801f442:	1c5c      	adds	r4, r3, #1
 801f444:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f448:	0c04      	lsrs	r4, r0, #16
 801f44a:	7888      	ldrb	r0, [r1, #2]
 801f44c:	121b      	asrs	r3, r3, #8
 801f44e:	fb10 f002 	smulbb	r0, r0, r2
 801f452:	704b      	strb	r3, [r1, #1]
 801f454:	fb04 0005 	mla	r0, r4, r5, r0
 801f458:	b280      	uxth	r0, r0
 801f45a:	1c43      	adds	r3, r0, #1
 801f45c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f460:	1200      	asrs	r0, r0, #8
 801f462:	7088      	strb	r0, [r1, #2]
 801f464:	b003      	add	sp, #12
 801f466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f46a:	2600      	movs	r6, #0
 801f46c:	e6f3      	b.n	801f256 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801f46e:	2000      	movs	r0, #0
 801f470:	4606      	mov	r6, r0
 801f472:	e6fd      	b.n	801f270 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f474:	2000      	movs	r0, #0
 801f476:	e6fb      	b.n	801f270 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f478:	4620      	mov	r0, r4
 801f47a:	e6f9      	b.n	801f270 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f47c:	2500      	movs	r5, #0
 801f47e:	e70b      	b.n	801f298 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801f480:	2200      	movs	r2, #0
 801f482:	4615      	mov	r5, r2
 801f484:	e716      	b.n	801f2b4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f486:	4672      	mov	r2, lr
 801f488:	4675      	mov	r5, lr
 801f48a:	e713      	b.n	801f2b4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f48c:	2200      	movs	r2, #0
 801f48e:	e711      	b.n	801f2b4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f490:	4622      	mov	r2, r4
 801f492:	e70f      	b.n	801f2b4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801f494 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f498:	b09f      	sub	sp, #124	; 0x7c
 801f49a:	921b      	str	r2, [sp, #108]	; 0x6c
 801f49c:	9309      	str	r3, [sp, #36]	; 0x24
 801f49e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f4a0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801f4a4:	901d      	str	r0, [sp, #116]	; 0x74
 801f4a6:	931c      	str	r3, [sp, #112]	; 0x70
 801f4a8:	6850      	ldr	r0, [r2, #4]
 801f4aa:	9119      	str	r1, [sp, #100]	; 0x64
 801f4ac:	6812      	ldr	r2, [r2, #0]
 801f4ae:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801f4b0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801f4b4:	fb00 1303 	mla	r3, r0, r3, r1
 801f4b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4bc:	18d3      	adds	r3, r2, r3
 801f4be:	930c      	str	r3, [sp, #48]	; 0x30
 801f4c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	9312      	str	r3, [sp, #72]	; 0x48
 801f4c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f4c8:	685e      	ldr	r6, [r3, #4]
 801f4ca:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801f4ce:	3604      	adds	r6, #4
 801f4d0:	930d      	str	r3, [sp, #52]	; 0x34
 801f4d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	dc03      	bgt.n	801f4e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f4d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	f340 8378 	ble.w	801fbd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f4e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f4e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f4e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f4ea:	1e48      	subs	r0, r1, #1
 801f4ec:	1e57      	subs	r7, r2, #1
 801f4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	f340 818c 	ble.w	801f80e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801f4f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f4f8:	142b      	asrs	r3, r5, #16
 801f4fa:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f4fe:	d406      	bmi.n	801f50e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f500:	4584      	cmp	ip, r0
 801f502:	da04      	bge.n	801f50e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f504:	2b00      	cmp	r3, #0
 801f506:	db02      	blt.n	801f50e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f508:	42bb      	cmp	r3, r7
 801f50a:	f2c0 8181 	blt.w	801f810 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f50e:	f11c 0c01 	adds.w	ip, ip, #1
 801f512:	f100 816f 	bmi.w	801f7f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f516:	4561      	cmp	r1, ip
 801f518:	f2c0 816c 	blt.w	801f7f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f51c:	3301      	adds	r3, #1
 801f51e:	f100 8169 	bmi.w	801f7f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f522:	429a      	cmp	r2, r3
 801f524:	f2c0 8166 	blt.w	801f7f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f52a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f52c:	931a      	str	r3, [sp, #104]	; 0x68
 801f52e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f530:	2b00      	cmp	r3, #0
 801f532:	f340 818c 	ble.w	801f84e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f536:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f538:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f53c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f540:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f544:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f546:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801f54a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f54c:	141b      	asrs	r3, r3, #16
 801f54e:	f100 81d0 	bmi.w	801f8f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f552:	f100 38ff 	add.w	r8, r0, #4294967295
 801f556:	4543      	cmp	r3, r8
 801f558:	f280 81cb 	bge.w	801f8f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f55c:	f1bc 0f00 	cmp.w	ip, #0
 801f560:	f2c0 81c7 	blt.w	801f8f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f564:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f568:	45c4      	cmp	ip, r8
 801f56a:	f280 81c2 	bge.w	801f8f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f56e:	b200      	sxth	r0, r0
 801f570:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f572:	fb0c 3300 	mla	r3, ip, r0, r3
 801f576:	eb04 0803 	add.w	r8, r4, r3
 801f57a:	5ce3      	ldrb	r3, [r4, r3]
 801f57c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f580:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f584:	2a00      	cmp	r2, #0
 801f586:	f000 81a9 	beq.w	801f8dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801f58a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f58e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f592:	940e      	str	r4, [sp, #56]	; 0x38
 801f594:	0e24      	lsrs	r4, r4, #24
 801f596:	9415      	str	r4, [sp, #84]	; 0x54
 801f598:	b179      	cbz	r1, 801f5ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f59a:	eb08 0c00 	add.w	ip, r8, r0
 801f59e:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f5a2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f5a6:	900a      	str	r0, [sp, #40]	; 0x28
 801f5a8:	0e00      	lsrs	r0, r0, #24
 801f5aa:	9013      	str	r0, [sp, #76]	; 0x4c
 801f5ac:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f5b0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f5b4:	900f      	str	r0, [sp, #60]	; 0x3c
 801f5b6:	0e00      	lsrs	r0, r0, #24
 801f5b8:	9016      	str	r0, [sp, #88]	; 0x58
 801f5ba:	b292      	uxth	r2, r2
 801f5bc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f5be:	b289      	uxth	r1, r1
 801f5c0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f5c2:	fb02 f901 	mul.w	r9, r2, r1
 801f5c6:	0112      	lsls	r2, r2, #4
 801f5c8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f5cc:	eba2 0809 	sub.w	r8, r2, r9
 801f5d0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f5d4:	b289      	uxth	r1, r1
 801f5d6:	fa1f f888 	uxth.w	r8, r8
 801f5da:	1a52      	subs	r2, r2, r1
 801f5dc:	fb08 f000 	mul.w	r0, r8, r0
 801f5e0:	b292      	uxth	r2, r2
 801f5e2:	fb02 000e 	mla	r0, r2, lr, r0
 801f5e6:	fb01 0004 	mla	r0, r1, r4, r0
 801f5ea:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f5ec:	fb09 0004 	mla	r0, r9, r4, r0
 801f5f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f5f4:	2800      	cmp	r0, #0
 801f5f6:	f000 80f2 	beq.w	801f7de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f5fa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f5fe:	d01b      	beq.n	801f638 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f600:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f604:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f608:	fb0e fa0a 	mul.w	sl, lr, sl
 801f60c:	fb0e fe03 	mul.w	lr, lr, r3
 801f610:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f614:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f618:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f61c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f620:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f624:	4453      	add	r3, sl
 801f626:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f62a:	0a1b      	lsrs	r3, r3, #8
 801f62c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f630:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f634:	ea43 030c 	orr.w	r3, r3, ip
 801f638:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f63a:	2cff      	cmp	r4, #255	; 0xff
 801f63c:	d021      	beq.n	801f682 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f63e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f640:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f644:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f646:	fb04 fb0b 	mul.w	fp, r4, fp
 801f64a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f64c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f650:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f652:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f656:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f65a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f65e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f662:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f666:	44de      	add	lr, fp
 801f668:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f66c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f670:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f674:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f678:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f67c:	ea4e 040a 	orr.w	r4, lr, sl
 801f680:	940e      	str	r4, [sp, #56]	; 0x38
 801f682:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f684:	2cff      	cmp	r4, #255	; 0xff
 801f686:	d021      	beq.n	801f6cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801f688:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f68a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f68e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f690:	fb04 fb0b 	mul.w	fp, r4, fp
 801f694:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f696:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f69a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f69c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f6a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f6a4:	fb04 fa0a 	mul.w	sl, r4, sl
 801f6a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f6ac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f6b0:	44de      	add	lr, fp
 801f6b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f6b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f6ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f6be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f6c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f6c6:	ea4e 040a 	orr.w	r4, lr, sl
 801f6ca:	940a      	str	r4, [sp, #40]	; 0x28
 801f6cc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f6ce:	2cff      	cmp	r4, #255	; 0xff
 801f6d0:	d021      	beq.n	801f716 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801f6d2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f6d4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f6d8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f6da:	fb04 fb0b 	mul.w	fp, r4, fp
 801f6de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f6e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f6e4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f6e6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f6ea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f6ee:	fb04 fa0a 	mul.w	sl, r4, sl
 801f6f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f6f6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f6fa:	44de      	add	lr, fp
 801f6fc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f700:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f704:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f708:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f70c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f710:	ea4e 040a 	orr.w	r4, lr, sl
 801f714:	940f      	str	r4, [sp, #60]	; 0x3c
 801f716:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f718:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f71c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f720:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f724:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f726:	fb08 fc0c 	mul.w	ip, r8, ip
 801f72a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f72e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f732:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f734:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f738:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f73c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f73e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f742:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f746:	fb08 f80e 	mul.w	r8, r8, lr
 801f74a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f74e:	fb02 8303 	mla	r3, r2, r3, r8
 801f752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f754:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f758:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f75c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f75e:	fb01 330a 	mla	r3, r1, sl, r3
 801f762:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f766:	fb09 3901 	mla	r9, r9, r1, r3
 801f76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f76c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f76e:	4343      	muls	r3, r0
 801f770:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f774:	1c58      	adds	r0, r3, #1
 801f776:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f77a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f77e:	ea4c 0c09 	orr.w	ip, ip, r9
 801f782:	783b      	ldrb	r3, [r7, #0]
 801f784:	fa5f f28c 	uxtb.w	r2, ip
 801f788:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f78c:	fb12 f201 	smulbb	r2, r2, r1
 801f790:	b2c0      	uxtb	r0, r0
 801f792:	fb03 2300 	mla	r3, r3, r0, r2
 801f796:	b29b      	uxth	r3, r3
 801f798:	1c5a      	adds	r2, r3, #1
 801f79a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f79e:	787a      	ldrb	r2, [r7, #1]
 801f7a0:	fb12 f200 	smulbb	r2, r2, r0
 801f7a4:	121b      	asrs	r3, r3, #8
 801f7a6:	703b      	strb	r3, [r7, #0]
 801f7a8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f7ac:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f7b0:	fb03 2301 	mla	r3, r3, r1, r2
 801f7b4:	b29b      	uxth	r3, r3
 801f7b6:	1c5a      	adds	r2, r3, #1
 801f7b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f7bc:	121b      	asrs	r3, r3, #8
 801f7be:	707b      	strb	r3, [r7, #1]
 801f7c0:	78bb      	ldrb	r3, [r7, #2]
 801f7c2:	fb13 f000 	smulbb	r0, r3, r0
 801f7c6:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f7ca:	fa1f fc8c 	uxth.w	ip, ip
 801f7ce:	f10c 0301 	add.w	r3, ip, #1
 801f7d2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f7d6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f7da:	f887 c002 	strb.w	ip, [r7, #2]
 801f7de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f7e0:	3703      	adds	r7, #3
 801f7e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f7e4:	441a      	add	r2, r3
 801f7e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f7e8:	441d      	add	r5, r3
 801f7ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f7ec:	9229      	str	r2, [sp, #164]	; 0xa4
 801f7ee:	3b01      	subs	r3, #1
 801f7f0:	931a      	str	r3, [sp, #104]	; 0x68
 801f7f2:	e69c      	b.n	801f52e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f7f4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f7f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f7f8:	441c      	add	r4, r3
 801f7fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f7fc:	441d      	add	r5, r3
 801f7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f800:	9429      	str	r4, [sp, #164]	; 0xa4
 801f802:	3b01      	subs	r3, #1
 801f804:	9309      	str	r3, [sp, #36]	; 0x24
 801f806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f808:	3303      	adds	r3, #3
 801f80a:	930c      	str	r3, [sp, #48]	; 0x30
 801f80c:	e66f      	b.n	801f4ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f80e:	d026      	beq.n	801f85e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801f810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f812:	982b      	ldr	r0, [sp, #172]	; 0xac
 801f814:	3b01      	subs	r3, #1
 801f816:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f818:	fb00 4003 	mla	r0, r0, r3, r4
 801f81c:	1400      	asrs	r0, r0, #16
 801f81e:	f53f ae83 	bmi.w	801f528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f822:	3901      	subs	r1, #1
 801f824:	4288      	cmp	r0, r1
 801f826:	f6bf ae7f 	bge.w	801f528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f82a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f82c:	fb01 5303 	mla	r3, r1, r3, r5
 801f830:	141b      	asrs	r3, r3, #16
 801f832:	f53f ae79 	bmi.w	801f528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f836:	3a01      	subs	r2, #1
 801f838:	4293      	cmp	r3, r2
 801f83a:	f6bf ae75 	bge.w	801f528 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f83e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f840:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f844:	f103 0e03 	add.w	lr, r3, #3
 801f848:	f1bb 0f00 	cmp.w	fp, #0
 801f84c:	dc71      	bgt.n	801f932 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801f84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f850:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f856:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f85a:	4423      	add	r3, r4
 801f85c:	930c      	str	r3, [sp, #48]	; 0x30
 801f85e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f860:	2b00      	cmp	r3, #0
 801f862:	f340 81b5 	ble.w	801fbd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f86a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f86c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f870:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f874:	eef0 6a62 	vmov.f32	s13, s5
 801f878:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f87c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f880:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f884:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801f888:	eef0 6a43 	vmov.f32	s13, s6
 801f88c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f890:	ee16 5a90 	vmov	r5, s13
 801f894:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f898:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f89c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f8a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f8a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f8a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f8ac:	ee12 2a90 	vmov	r2, s5
 801f8b0:	eef0 2a47 	vmov.f32	s5, s14
 801f8b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8b8:	ee13 2a10 	vmov	r2, s6
 801f8bc:	932b      	str	r3, [sp, #172]	; 0xac
 801f8be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f8c0:	eeb0 3a67 	vmov.f32	s6, s15
 801f8c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8c8:	932c      	str	r3, [sp, #176]	; 0xb0
 801f8ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f8cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f8ce:	3b01      	subs	r3, #1
 801f8d0:	9319      	str	r3, [sp, #100]	; 0x64
 801f8d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f8d4:	bf08      	it	eq
 801f8d6:	4613      	moveq	r3, r2
 801f8d8:	9309      	str	r3, [sp, #36]	; 0x24
 801f8da:	e5fa      	b.n	801f4d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f8dc:	2900      	cmp	r1, #0
 801f8de:	f43f ae6c 	beq.w	801f5ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f8e2:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f8e6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f8ea:	900a      	str	r0, [sp, #40]	; 0x28
 801f8ec:	0e00      	lsrs	r0, r0, #24
 801f8ee:	9013      	str	r0, [sp, #76]	; 0x4c
 801f8f0:	e663      	b.n	801f5ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f8f2:	f113 0801 	adds.w	r8, r3, #1
 801f8f6:	f53f af72 	bmi.w	801f7de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f8fa:	4540      	cmp	r0, r8
 801f8fc:	f6ff af6f 	blt.w	801f7de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f900:	f11c 0801 	adds.w	r8, ip, #1
 801f904:	f53f af6b 	bmi.w	801f7de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f908:	45c6      	cmp	lr, r8
 801f90a:	f6ff af68 	blt.w	801f7de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f90e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801f910:	b200      	sxth	r0, r0
 801f912:	9302      	str	r3, [sp, #8]
 801f914:	fa0f f38e 	sxth.w	r3, lr
 801f918:	9000      	str	r0, [sp, #0]
 801f91a:	9301      	str	r3, [sp, #4]
 801f91c:	4633      	mov	r3, r6
 801f91e:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f920:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f924:	e9cd c203 	strd	ip, r2, [sp, #12]
 801f928:	4639      	mov	r1, r7
 801f92a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f92c:	f7ff fc74 	bl	801f218 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801f930:	e755      	b.n	801f7de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f932:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f934:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f938:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f93a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f93e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f940:	1427      	asrs	r7, r4, #16
 801f942:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f944:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f948:	142b      	asrs	r3, r5, #16
 801f94a:	fb01 7303 	mla	r3, r1, r3, r7
 801f94e:	18e7      	adds	r7, r4, r3
 801f950:	5ce3      	ldrb	r3, [r4, r3]
 801f952:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f956:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f95a:	2a00      	cmp	r2, #0
 801f95c:	f000 812e 	beq.w	801fbbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801f960:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f964:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801f968:	9410      	str	r4, [sp, #64]	; 0x40
 801f96a:	0e24      	lsrs	r4, r4, #24
 801f96c:	9417      	str	r4, [sp, #92]	; 0x5c
 801f96e:	b170      	cbz	r0, 801f98e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801f970:	eb07 0801 	add.w	r8, r7, r1
 801f974:	5c79      	ldrb	r1, [r7, r1]
 801f976:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f97a:	910b      	str	r1, [sp, #44]	; 0x2c
 801f97c:	0e09      	lsrs	r1, r1, #24
 801f97e:	9114      	str	r1, [sp, #80]	; 0x50
 801f980:	f898 1001 	ldrb.w	r1, [r8, #1]
 801f984:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f988:	9111      	str	r1, [sp, #68]	; 0x44
 801f98a:	0e09      	lsrs	r1, r1, #24
 801f98c:	9118      	str	r1, [sp, #96]	; 0x60
 801f98e:	b292      	uxth	r2, r2
 801f990:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f992:	b280      	uxth	r0, r0
 801f994:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f996:	fb02 f900 	mul.w	r9, r2, r0
 801f99a:	0112      	lsls	r2, r2, #4
 801f99c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f9a0:	eba2 0809 	sub.w	r8, r2, r9
 801f9a4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f9a8:	b280      	uxth	r0, r0
 801f9aa:	fa1f f888 	uxth.w	r8, r8
 801f9ae:	1a12      	subs	r2, r2, r0
 801f9b0:	fb08 f101 	mul.w	r1, r8, r1
 801f9b4:	b292      	uxth	r2, r2
 801f9b6:	fb02 110c 	mla	r1, r2, ip, r1
 801f9ba:	fb00 1104 	mla	r1, r0, r4, r1
 801f9be:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f9c0:	fb09 1104 	mla	r1, r9, r4, r1
 801f9c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f9c8:	2900      	cmp	r1, #0
 801f9ca:	f000 80ec 	beq.w	801fba6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801f9ce:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f9d2:	d019      	beq.n	801fa08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801f9d4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f9d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f9dc:	fb0c fa0a 	mul.w	sl, ip, sl
 801f9e0:	fb0c fc03 	mul.w	ip, ip, r3
 801f9e4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f9e8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f9ec:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801f9f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f9f4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f9f8:	4453      	add	r3, sl
 801f9fa:	0a3f      	lsrs	r7, r7, #8
 801f9fc:	0a1b      	lsrs	r3, r3, #8
 801f9fe:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fa02:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa06:	433b      	orrs	r3, r7
 801fa08:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fa0a:	2cff      	cmp	r4, #255	; 0xff
 801fa0c:	d020      	beq.n	801fa50 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801fa0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fa10:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fa14:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fa16:	4367      	muls	r7, r4
 801fa18:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fa1a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fa1e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fa22:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fa24:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fa28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa2c:	fb04 fa0a 	mul.w	sl, r4, sl
 801fa30:	44bc      	add	ip, r7
 801fa32:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fa36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa3a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fa3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fa46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fa4a:	ea4c 040a 	orr.w	r4, ip, sl
 801fa4e:	9410      	str	r4, [sp, #64]	; 0x40
 801fa50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fa52:	2cff      	cmp	r4, #255	; 0xff
 801fa54:	d020      	beq.n	801fa98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801fa56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fa58:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fa5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fa5e:	4367      	muls	r7, r4
 801fa60:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fa62:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fa66:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fa6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fa6c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fa70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa74:	fb04 fa0a 	mul.w	sl, r4, sl
 801fa78:	44bc      	add	ip, r7
 801fa7a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fa7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa82:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fa86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fa8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fa8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fa92:	ea4c 040a 	orr.w	r4, ip, sl
 801fa96:	940b      	str	r4, [sp, #44]	; 0x2c
 801fa98:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fa9a:	2cff      	cmp	r4, #255	; 0xff
 801fa9c:	d020      	beq.n	801fae0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801fa9e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801faa0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801faa4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801faa6:	4367      	muls	r7, r4
 801faa8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801faaa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801faae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fab2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801fab4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fab8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fabc:	fb04 fa0a 	mul.w	sl, r4, sl
 801fac0:	44bc      	add	ip, r7
 801fac2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fac6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801faca:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801face:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fad2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fad6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fada:	ea4c 040a 	orr.w	r4, ip, sl
 801fade:	9411      	str	r4, [sp, #68]	; 0x44
 801fae0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fae2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fae6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801faea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801faee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801faf0:	fb08 f707 	mul.w	r7, r8, r7
 801faf4:	fb02 770c 	mla	r7, r2, ip, r7
 801faf8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fafc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fafe:	fb00 770c 	mla	r7, r0, ip, r7
 801fb02:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fb06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fb08:	fb09 770c 	mla	r7, r9, ip, r7
 801fb0c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801fb10:	fb08 f80c 	mul.w	r8, r8, ip
 801fb14:	0a3f      	lsrs	r7, r7, #8
 801fb16:	fb02 8303 	mla	r3, r2, r3, r8
 801fb1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fb1c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fb20:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fb24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fb26:	fb00 330a 	mla	r3, r0, sl, r3
 801fb2a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fb2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fb30:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fb34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fb36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb3a:	434b      	muls	r3, r1
 801fb3c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fb40:	1c59      	adds	r1, r3, #1
 801fb42:	ea47 070c 	orr.w	r7, r7, ip
 801fb46:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fb4a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fb4e:	b2fa      	uxtb	r2, r7
 801fb50:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fb54:	fb12 f200 	smulbb	r2, r2, r0
 801fb58:	b2c9      	uxtb	r1, r1
 801fb5a:	fb03 2301 	mla	r3, r3, r1, r2
 801fb5e:	b29b      	uxth	r3, r3
 801fb60:	1c5a      	adds	r2, r3, #1
 801fb62:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fb66:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fb6a:	fb12 f201 	smulbb	r2, r2, r1
 801fb6e:	121b      	asrs	r3, r3, #8
 801fb70:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fb74:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801fb78:	0c3f      	lsrs	r7, r7, #16
 801fb7a:	fb03 2300 	mla	r3, r3, r0, r2
 801fb7e:	b29b      	uxth	r3, r3
 801fb80:	1c5a      	adds	r2, r3, #1
 801fb82:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fb86:	121b      	asrs	r3, r3, #8
 801fb88:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fb8c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fb90:	fb13 f101 	smulbb	r1, r3, r1
 801fb94:	fb07 1700 	mla	r7, r7, r0, r1
 801fb98:	b2bf      	uxth	r7, r7
 801fb9a:	1c7b      	adds	r3, r7, #1
 801fb9c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801fba0:	123f      	asrs	r7, r7, #8
 801fba2:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801fba6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fba8:	f10e 0e03 	add.w	lr, lr, #3
 801fbac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fbae:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fbb2:	441a      	add	r2, r3
 801fbb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fbb6:	9229      	str	r2, [sp, #164]	; 0xa4
 801fbb8:	441d      	add	r5, r3
 801fbba:	e645      	b.n	801f848 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801fbbc:	2800      	cmp	r0, #0
 801fbbe:	f43f aee6 	beq.w	801f98e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801fbc2:	5c79      	ldrb	r1, [r7, r1]
 801fbc4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fbc8:	910b      	str	r1, [sp, #44]	; 0x2c
 801fbca:	0e09      	lsrs	r1, r1, #24
 801fbcc:	9114      	str	r1, [sp, #80]	; 0x50
 801fbce:	e6de      	b.n	801f98e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801fbd0:	b01f      	add	sp, #124	; 0x7c
 801fbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fbd6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801fbd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbda:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801fbde:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801fbe2:	2d00      	cmp	r5, #0
 801fbe4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801fbe8:	fb05 700e 	mla	r0, r5, lr, r7
 801fbec:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801fbf0:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801fbf4:	eb02 0800 	add.w	r8, r2, r0
 801fbf8:	f2c0 8105 	blt.w	801fe06 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801fbfc:	45a9      	cmp	r9, r5
 801fbfe:	f340 8102 	ble.w	801fe06 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801fc02:	2f00      	cmp	r7, #0
 801fc04:	f2c0 80fd 	blt.w	801fe02 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801fc08:	45be      	cmp	lr, r7
 801fc0a:	f340 80fa 	ble.w	801fe02 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801fc0e:	5c12      	ldrb	r2, [r2, r0]
 801fc10:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fc14:	1c7a      	adds	r2, r7, #1
 801fc16:	f100 80f9 	bmi.w	801fe0c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801fc1a:	4596      	cmp	lr, r2
 801fc1c:	f340 80f6 	ble.w	801fe0c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801fc20:	2c00      	cmp	r4, #0
 801fc22:	f000 80f5 	beq.w	801fe10 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801fc26:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fc2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801fc2e:	3501      	adds	r5, #1
 801fc30:	f100 80f2 	bmi.w	801fe18 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801fc34:	45a9      	cmp	r9, r5
 801fc36:	f340 80ef 	ble.w	801fe18 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801fc3a:	f1bc 0f00 	cmp.w	ip, #0
 801fc3e:	f000 80ee 	beq.w	801fe1e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801fc42:	2f00      	cmp	r7, #0
 801fc44:	f2c0 80e6 	blt.w	801fe14 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801fc48:	45be      	cmp	lr, r7
 801fc4a:	f340 80e3 	ble.w	801fe14 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801fc4e:	f818 200e 	ldrb.w	r2, [r8, lr]
 801fc52:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fc56:	3701      	adds	r7, #1
 801fc58:	f100 80e4 	bmi.w	801fe24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801fc5c:	45be      	cmp	lr, r7
 801fc5e:	f340 80e1 	ble.w	801fe24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801fc62:	2c00      	cmp	r4, #0
 801fc64:	f000 80e0 	beq.w	801fe28 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801fc68:	44c6      	add	lr, r8
 801fc6a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fc6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fc72:	b2a3      	uxth	r3, r4
 801fc74:	fa1f fc8c 	uxth.w	ip, ip
 801fc78:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801fc7c:	fb0c fe03 	mul.w	lr, ip, r3
 801fc80:	011b      	lsls	r3, r3, #4
 801fc82:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801fc86:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801fc8a:	eba3 070e 	sub.w	r7, r3, lr
 801fc8e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801fc92:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fc96:	fa1f f48c 	uxth.w	r4, ip
 801fc9a:	b2bf      	uxth	r7, r7
 801fc9c:	1b1b      	subs	r3, r3, r4
 801fc9e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fca2:	fb07 fc0a 	mul.w	ip, r7, sl
 801fca6:	b29b      	uxth	r3, r3
 801fca8:	fb03 cc0b 	mla	ip, r3, fp, ip
 801fcac:	9300      	str	r3, [sp, #0]
 801fcae:	fb04 cc09 	mla	ip, r4, r9, ip
 801fcb2:	fb0e cc08 	mla	ip, lr, r8, ip
 801fcb6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fcba:	9301      	str	r3, [sp, #4]
 801fcbc:	2b00      	cmp	r3, #0
 801fcbe:	f000 809d 	beq.w	801fdfc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801fcc2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fcc6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fcca:	fb0b fc0c 	mul.w	ip, fp, ip
 801fcce:	fb0b f606 	mul.w	r6, fp, r6
 801fcd2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fcd6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fcda:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801fcde:	44dc      	add	ip, fp
 801fce0:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801fce4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fce8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fcec:	fb0a fb0b 	mul.w	fp, sl, fp
 801fcf0:	fb0a fa00 	mul.w	sl, sl, r0
 801fcf4:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801fcf8:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801fcfc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801fd00:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fd04:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fd08:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fd0c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801fd10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd14:	0a36      	lsrs	r6, r6, #8
 801fd16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd1a:	44dc      	add	ip, fp
 801fd1c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fd20:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fd24:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fd28:	fb09 fb0b 	mul.w	fp, r9, fp
 801fd2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd30:	fb09 f905 	mul.w	r9, r9, r5
 801fd34:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801fd38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd3c:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801fd40:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fd44:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fd48:	fb0c fc07 	mul.w	ip, ip, r7
 801fd4c:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801fd50:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801fd54:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fd58:	4458      	add	r0, fp
 801fd5a:	fb08 f505 	mul.w	r5, r8, r5
 801fd5e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fd62:	fb08 f802 	mul.w	r8, r8, r2
 801fd66:	0a00      	lsrs	r0, r0, #8
 801fd68:	0a2a      	lsrs	r2, r5, #8
 801fd6a:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801fd6e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fd72:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fd76:	4415      	add	r5, r2
 801fd78:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801fd7c:	0a2d      	lsrs	r5, r5, #8
 801fd7e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fd82:	9a00      	ldr	r2, [sp, #0]
 801fd84:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fd88:	fb03 cc02 	mla	ip, r3, r2, ip
 801fd8c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fd90:	9b01      	ldr	r3, [sp, #4]
 801fd92:	fb05 c50e 	mla	r5, r5, lr, ip
 801fd96:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fd9a:	43db      	mvns	r3, r3
 801fd9c:	fb00 5004 	mla	r0, r0, r4, r5
 801fda0:	b2db      	uxtb	r3, r3
 801fda2:	0a00      	lsrs	r0, r0, #8
 801fda4:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801fda8:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801fdac:	4378      	muls	r0, r7
 801fdae:	fb02 0006 	mla	r0, r2, r6, r0
 801fdb2:	780a      	ldrb	r2, [r1, #0]
 801fdb4:	fb0e 0e08 	mla	lr, lr, r8, r0
 801fdb8:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801fdbc:	fb04 e000 	mla	r0, r4, r0, lr
 801fdc0:	fb02 f403 	mul.w	r4, r2, r3
 801fdc4:	0a00      	lsrs	r0, r0, #8
 801fdc6:	1c62      	adds	r2, r4, #1
 801fdc8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fdcc:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fdd0:	4328      	orrs	r0, r5
 801fdd2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801fdd6:	700a      	strb	r2, [r1, #0]
 801fdd8:	784a      	ldrb	r2, [r1, #1]
 801fdda:	435a      	muls	r2, r3
 801fddc:	1c54      	adds	r4, r2, #1
 801fdde:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801fde2:	0a02      	lsrs	r2, r0, #8
 801fde4:	0c00      	lsrs	r0, r0, #16
 801fde6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fdea:	704a      	strb	r2, [r1, #1]
 801fdec:	788a      	ldrb	r2, [r1, #2]
 801fdee:	4353      	muls	r3, r2
 801fdf0:	1c5a      	adds	r2, r3, #1
 801fdf2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fdf6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fdfa:	7088      	strb	r0, [r1, #2]
 801fdfc:	b003      	add	sp, #12
 801fdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe02:	2600      	movs	r6, #0
 801fe04:	e706      	b.n	801fc14 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801fe06:	2000      	movs	r0, #0
 801fe08:	4606      	mov	r6, r0
 801fe0a:	e710      	b.n	801fc2e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801fe0c:	2000      	movs	r0, #0
 801fe0e:	e70e      	b.n	801fc2e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801fe10:	4620      	mov	r0, r4
 801fe12:	e70c      	b.n	801fc2e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801fe14:	2500      	movs	r5, #0
 801fe16:	e71e      	b.n	801fc56 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801fe18:	2200      	movs	r2, #0
 801fe1a:	4615      	mov	r5, r2
 801fe1c:	e729      	b.n	801fc72 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fe1e:	4662      	mov	r2, ip
 801fe20:	4665      	mov	r5, ip
 801fe22:	e726      	b.n	801fc72 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fe24:	2200      	movs	r2, #0
 801fe26:	e724      	b.n	801fc72 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fe28:	4622      	mov	r2, r4
 801fe2a:	e722      	b.n	801fc72 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801fe2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe30:	b09b      	sub	sp, #108	; 0x6c
 801fe32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fe36:	9218      	str	r2, [sp, #96]	; 0x60
 801fe38:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fe3a:	9019      	str	r0, [sp, #100]	; 0x64
 801fe3c:	9116      	str	r1, [sp, #88]	; 0x58
 801fe3e:	6850      	ldr	r0, [r2, #4]
 801fe40:	9307      	str	r3, [sp, #28]
 801fe42:	6812      	ldr	r2, [r2, #0]
 801fe44:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801fe46:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801fe4a:	fb00 1303 	mla	r3, r0, r3, r1
 801fe4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe52:	18d3      	adds	r3, r2, r3
 801fe54:	930a      	str	r3, [sp, #40]	; 0x28
 801fe56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	930f      	str	r3, [sp, #60]	; 0x3c
 801fe5c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fe5e:	685e      	ldr	r6, [r3, #4]
 801fe60:	3604      	adds	r6, #4
 801fe62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	dc03      	bgt.n	801fe70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801fe68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	f340 834f 	ble.w	802050e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801fe70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fe72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe76:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fe7a:	1e48      	subs	r0, r1, #1
 801fe7c:	1e57      	subs	r7, r2, #1
 801fe7e:	9b07      	ldr	r3, [sp, #28]
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	f340 8178 	ble.w	8020176 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801fe86:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801fe88:	142b      	asrs	r3, r5, #16
 801fe8a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801fe8e:	d406      	bmi.n	801fe9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe90:	4584      	cmp	ip, r0
 801fe92:	da04      	bge.n	801fe9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	db02      	blt.n	801fe9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe98:	42bb      	cmp	r3, r7
 801fe9a:	f2c0 816d 	blt.w	8020178 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801fe9e:	f11c 0c01 	adds.w	ip, ip, #1
 801fea2:	f100 815b 	bmi.w	802015c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801fea6:	4561      	cmp	r1, ip
 801fea8:	f2c0 8158 	blt.w	802015c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801feac:	3301      	adds	r3, #1
 801feae:	f100 8155 	bmi.w	802015c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801feb2:	429a      	cmp	r2, r3
 801feb4:	f2c0 8152 	blt.w	802015c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801feb8:	9b07      	ldr	r3, [sp, #28]
 801feba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801febc:	9317      	str	r3, [sp, #92]	; 0x5c
 801febe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	f340 8178 	ble.w	80201b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fec6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fec8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fecc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fed0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fed4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fed6:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801feda:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fedc:	141b      	asrs	r3, r3, #16
 801fede:	f100 81ba 	bmi.w	8020256 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801fee2:	f101 38ff 	add.w	r8, r1, #4294967295
 801fee6:	4543      	cmp	r3, r8
 801fee8:	f280 81b5 	bge.w	8020256 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801feec:	f1bc 0f00 	cmp.w	ip, #0
 801fef0:	f2c0 81b1 	blt.w	8020256 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801fef4:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fef8:	45c4      	cmp	ip, r8
 801fefa:	f280 81ac 	bge.w	8020256 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801fefe:	b209      	sxth	r1, r1
 801ff00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ff02:	fb0c 3301 	mla	r3, ip, r1, r3
 801ff06:	eb04 0803 	add.w	r8, r4, r3
 801ff0a:	5ce3      	ldrb	r3, [r4, r3]
 801ff0c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ff10:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ff14:	2a00      	cmp	r2, #0
 801ff16:	f000 8193 	beq.w	8020240 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801ff1a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ff1e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ff22:	940b      	str	r4, [sp, #44]	; 0x2c
 801ff24:	0e24      	lsrs	r4, r4, #24
 801ff26:	9412      	str	r4, [sp, #72]	; 0x48
 801ff28:	b178      	cbz	r0, 801ff4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ff2a:	eb08 0c01 	add.w	ip, r8, r1
 801ff2e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ff32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ff36:	9108      	str	r1, [sp, #32]
 801ff38:	0e09      	lsrs	r1, r1, #24
 801ff3a:	9110      	str	r1, [sp, #64]	; 0x40
 801ff3c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ff40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ff44:	910c      	str	r1, [sp, #48]	; 0x30
 801ff46:	0e09      	lsrs	r1, r1, #24
 801ff48:	9113      	str	r1, [sp, #76]	; 0x4c
 801ff4a:	b292      	uxth	r2, r2
 801ff4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ff4e:	b280      	uxth	r0, r0
 801ff50:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ff52:	fb02 f900 	mul.w	r9, r2, r0
 801ff56:	0112      	lsls	r2, r2, #4
 801ff58:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ff5c:	eba2 0809 	sub.w	r8, r2, r9
 801ff60:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ff64:	b280      	uxth	r0, r0
 801ff66:	fa1f f888 	uxth.w	r8, r8
 801ff6a:	1a12      	subs	r2, r2, r0
 801ff6c:	fb08 f101 	mul.w	r1, r8, r1
 801ff70:	b292      	uxth	r2, r2
 801ff72:	fb02 110e 	mla	r1, r2, lr, r1
 801ff76:	fb00 1104 	mla	r1, r0, r4, r1
 801ff7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ff7c:	fb09 1104 	mla	r1, r9, r4, r1
 801ff80:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ff84:	2900      	cmp	r1, #0
 801ff86:	f000 80de 	beq.w	8020146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ff8a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ff8e:	d01b      	beq.n	801ffc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801ff90:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ff94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff98:	fb0e fa0a 	mul.w	sl, lr, sl
 801ff9c:	fb0e fe03 	mul.w	lr, lr, r3
 801ffa0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ffa4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ffa8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ffac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ffb0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ffb4:	4453      	add	r3, sl
 801ffb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffba:	0a1b      	lsrs	r3, r3, #8
 801ffbc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ffc0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ffc4:	ea43 030c 	orr.w	r3, r3, ip
 801ffc8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ffca:	2cff      	cmp	r4, #255	; 0xff
 801ffcc:	d021      	beq.n	8020012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ffce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ffd0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ffd4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ffd6:	fb04 fb0b 	mul.w	fp, r4, fp
 801ffda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ffdc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ffe0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ffe2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ffe6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ffea:	fb04 fa0a 	mul.w	sl, r4, sl
 801ffee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fff2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fff6:	44de      	add	lr, fp
 801fff8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fffc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020000:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020004:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020008:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802000c:	ea4e 040a 	orr.w	r4, lr, sl
 8020010:	940b      	str	r4, [sp, #44]	; 0x2c
 8020012:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020014:	2cff      	cmp	r4, #255	; 0xff
 8020016:	d021      	beq.n	802005c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020018:	9c08      	ldr	r4, [sp, #32]
 802001a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802001e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020020:	fb04 fb0b 	mul.w	fp, r4, fp
 8020024:	9c08      	ldr	r4, [sp, #32]
 8020026:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802002a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802002c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020030:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020034:	fb04 fa0a 	mul.w	sl, r4, sl
 8020038:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802003c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020040:	44de      	add	lr, fp
 8020042:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020046:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802004a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802004e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020052:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020056:	ea4e 040a 	orr.w	r4, lr, sl
 802005a:	9408      	str	r4, [sp, #32]
 802005c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802005e:	2cff      	cmp	r4, #255	; 0xff
 8020060:	d021      	beq.n	80200a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020062:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020064:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020068:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802006a:	fb04 fb0b 	mul.w	fp, r4, fp
 802006e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020070:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020074:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020076:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802007a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802007e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020082:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020086:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802008a:	44de      	add	lr, fp
 802008c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020090:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020094:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020098:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802009c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80200a0:	ea4e 040a 	orr.w	r4, lr, sl
 80200a4:	940c      	str	r4, [sp, #48]	; 0x30
 80200a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80200a8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80200ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200b0:	43c9      	mvns	r1, r1
 80200b2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80200b6:	9c08      	ldr	r4, [sp, #32]
 80200b8:	b2c9      	uxtb	r1, r1
 80200ba:	fb08 fc0c 	mul.w	ip, r8, ip
 80200be:	fb02 cc0e 	mla	ip, r2, lr, ip
 80200c2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80200c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80200c8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80200cc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80200d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80200d2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80200d6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80200da:	fb08 f80e 	mul.w	r8, r8, lr
 80200de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80200e2:	fb02 8303 	mla	r3, r2, r3, r8
 80200e6:	9a08      	ldr	r2, [sp, #32]
 80200e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80200ec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80200f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80200f2:	fb00 330a 	mla	r3, r0, sl, r3
 80200f6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80200fa:	fb09 3900 	mla	r9, r9, r0, r3
 80200fe:	783b      	ldrb	r3, [r7, #0]
 8020100:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020104:	fb03 f201 	mul.w	r2, r3, r1
 8020108:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802010c:	1c53      	adds	r3, r2, #1
 802010e:	ea4c 0c09 	orr.w	ip, ip, r9
 8020112:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020116:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802011a:	703b      	strb	r3, [r7, #0]
 802011c:	787b      	ldrb	r3, [r7, #1]
 802011e:	434b      	muls	r3, r1
 8020120:	1c5a      	adds	r2, r3, #1
 8020122:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020126:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802012a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802012e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020132:	707b      	strb	r3, [r7, #1]
 8020134:	78bb      	ldrb	r3, [r7, #2]
 8020136:	4359      	muls	r1, r3
 8020138:	1c4b      	adds	r3, r1, #1
 802013a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802013e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020142:	f887 c002 	strb.w	ip, [r7, #2]
 8020146:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020148:	3703      	adds	r7, #3
 802014a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802014c:	441a      	add	r2, r3
 802014e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020150:	441d      	add	r5, r3
 8020152:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020154:	9225      	str	r2, [sp, #148]	; 0x94
 8020156:	3b01      	subs	r3, #1
 8020158:	9317      	str	r3, [sp, #92]	; 0x5c
 802015a:	e6b0      	b.n	801febe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802015c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802015e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020160:	441c      	add	r4, r3
 8020162:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020164:	441d      	add	r5, r3
 8020166:	9b07      	ldr	r3, [sp, #28]
 8020168:	9425      	str	r4, [sp, #148]	; 0x94
 802016a:	3b01      	subs	r3, #1
 802016c:	9307      	str	r3, [sp, #28]
 802016e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020170:	3303      	adds	r3, #3
 8020172:	930a      	str	r3, [sp, #40]	; 0x28
 8020174:	e683      	b.n	801fe7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020176:	d026      	beq.n	80201c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8020178:	9b07      	ldr	r3, [sp, #28]
 802017a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802017c:	3b01      	subs	r3, #1
 802017e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020180:	fb00 4003 	mla	r0, r0, r3, r4
 8020184:	1400      	asrs	r0, r0, #16
 8020186:	f53f ae97 	bmi.w	801feb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802018a:	3901      	subs	r1, #1
 802018c:	4288      	cmp	r0, r1
 802018e:	f6bf ae93 	bge.w	801feb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020192:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020194:	fb01 5303 	mla	r3, r1, r3, r5
 8020198:	141b      	asrs	r3, r3, #16
 802019a:	f53f ae8d 	bmi.w	801feb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802019e:	3a01      	subs	r2, #1
 80201a0:	4293      	cmp	r3, r2
 80201a2:	f6bf ae89 	bge.w	801feb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80201a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201a8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80201ac:	f103 0e03 	add.w	lr, r3, #3
 80201b0:	f1bb 0f00 	cmp.w	fp, #0
 80201b4:	dc6d      	bgt.n	8020292 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80201b6:	9b07      	ldr	r3, [sp, #28]
 80201b8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80201bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80201be:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80201c2:	4423      	add	r3, r4
 80201c4:	930a      	str	r3, [sp, #40]	; 0x28
 80201c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80201c8:	2b00      	cmp	r3, #0
 80201ca:	f340 81a0 	ble.w	802050e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80201ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80201d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201d8:	eeb0 6a62 	vmov.f32	s12, s5
 80201dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80201e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201e8:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80201ec:	eeb0 6a43 	vmov.f32	s12, s6
 80201f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201f4:	ee16 5a10 	vmov	r5, s12
 80201f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020200:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020204:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020208:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802020c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020210:	ee12 2a90 	vmov	r2, s5
 8020214:	eef0 2a47 	vmov.f32	s5, s14
 8020218:	fb92 f3f3 	sdiv	r3, r2, r3
 802021c:	ee13 2a10 	vmov	r2, s6
 8020220:	9327      	str	r3, [sp, #156]	; 0x9c
 8020222:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020224:	eeb0 3a67 	vmov.f32	s6, s15
 8020228:	fb92 f3f3 	sdiv	r3, r2, r3
 802022c:	9328      	str	r3, [sp, #160]	; 0xa0
 802022e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020230:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020232:	3b01      	subs	r3, #1
 8020234:	9316      	str	r3, [sp, #88]	; 0x58
 8020236:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020238:	bf08      	it	eq
 802023a:	4613      	moveq	r3, r2
 802023c:	9307      	str	r3, [sp, #28]
 802023e:	e610      	b.n	801fe62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020240:	2800      	cmp	r0, #0
 8020242:	f43f ae82 	beq.w	801ff4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020246:	f818 1001 	ldrb.w	r1, [r8, r1]
 802024a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802024e:	9108      	str	r1, [sp, #32]
 8020250:	0e09      	lsrs	r1, r1, #24
 8020252:	9110      	str	r1, [sp, #64]	; 0x40
 8020254:	e679      	b.n	801ff4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020256:	f113 0801 	adds.w	r8, r3, #1
 802025a:	f53f af74 	bmi.w	8020146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802025e:	4541      	cmp	r1, r8
 8020260:	f6ff af71 	blt.w	8020146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020264:	f11c 0801 	adds.w	r8, ip, #1
 8020268:	f53f af6d 	bmi.w	8020146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802026c:	45c6      	cmp	lr, r8
 802026e:	f6ff af6a 	blt.w	8020146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020272:	b209      	sxth	r1, r1
 8020274:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8020278:	fa0f f38e 	sxth.w	r3, lr
 802027c:	9100      	str	r1, [sp, #0]
 802027e:	4639      	mov	r1, r7
 8020280:	9301      	str	r3, [sp, #4]
 8020282:	4633      	mov	r3, r6
 8020284:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8020288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802028a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802028c:	f7ff fca3 	bl	801fbd6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020290:	e759      	b.n	8020146 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020292:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020294:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020298:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802029a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802029e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80202a0:	1427      	asrs	r7, r4, #16
 80202a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80202a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80202a8:	142b      	asrs	r3, r5, #16
 80202aa:	fb01 7303 	mla	r3, r1, r3, r7
 80202ae:	18e7      	adds	r7, r4, r3
 80202b0:	5ce3      	ldrb	r3, [r4, r3]
 80202b2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80202b6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80202ba:	2a00      	cmp	r2, #0
 80202bc:	f000 811d 	beq.w	80204fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 80202c0:	f897 8001 	ldrb.w	r8, [r7, #1]
 80202c4:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80202c8:	940d      	str	r4, [sp, #52]	; 0x34
 80202ca:	0e24      	lsrs	r4, r4, #24
 80202cc:	9414      	str	r4, [sp, #80]	; 0x50
 80202ce:	b170      	cbz	r0, 80202ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80202d0:	eb07 0801 	add.w	r8, r7, r1
 80202d4:	5c79      	ldrb	r1, [r7, r1]
 80202d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202da:	9109      	str	r1, [sp, #36]	; 0x24
 80202dc:	0e09      	lsrs	r1, r1, #24
 80202de:	9111      	str	r1, [sp, #68]	; 0x44
 80202e0:	f898 1001 	ldrb.w	r1, [r8, #1]
 80202e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202e8:	910e      	str	r1, [sp, #56]	; 0x38
 80202ea:	0e09      	lsrs	r1, r1, #24
 80202ec:	9115      	str	r1, [sp, #84]	; 0x54
 80202ee:	b292      	uxth	r2, r2
 80202f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80202f2:	b280      	uxth	r0, r0
 80202f4:	fb02 f900 	mul.w	r9, r2, r0
 80202f8:	0112      	lsls	r2, r2, #4
 80202fa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80202fe:	eba2 0809 	sub.w	r8, r2, r9
 8020302:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020306:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020308:	b280      	uxth	r0, r0
 802030a:	fa1f f888 	uxth.w	r8, r8
 802030e:	1a09      	subs	r1, r1, r0
 8020310:	fb08 f202 	mul.w	r2, r8, r2
 8020314:	b289      	uxth	r1, r1
 8020316:	fb01 220c 	mla	r2, r1, ip, r2
 802031a:	fb00 2204 	mla	r2, r0, r4, r2
 802031e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020320:	fb09 2204 	mla	r2, r9, r4, r2
 8020324:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020328:	2a00      	cmp	r2, #0
 802032a:	f000 80db 	beq.w	80204e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802032e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020332:	d019      	beq.n	8020368 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8020334:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020338:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802033c:	fb0c fa0a 	mul.w	sl, ip, sl
 8020340:	fb0c fc03 	mul.w	ip, ip, r3
 8020344:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020348:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802034c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020350:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020354:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020358:	4453      	add	r3, sl
 802035a:	0a3f      	lsrs	r7, r7, #8
 802035c:	0a1b      	lsrs	r3, r3, #8
 802035e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020362:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020366:	433b      	orrs	r3, r7
 8020368:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802036a:	2cff      	cmp	r4, #255	; 0xff
 802036c:	d020      	beq.n	80203b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 802036e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020370:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020374:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020376:	4367      	muls	r7, r4
 8020378:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802037a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802037e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020382:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020384:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020388:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802038c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020390:	44bc      	add	ip, r7
 8020392:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020396:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802039a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802039e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80203aa:	ea4c 040a 	orr.w	r4, ip, sl
 80203ae:	940d      	str	r4, [sp, #52]	; 0x34
 80203b0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203b2:	2cff      	cmp	r4, #255	; 0xff
 80203b4:	d020      	beq.n	80203f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 80203b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80203b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80203bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203be:	4367      	muls	r7, r4
 80203c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80203c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80203c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80203ca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80203d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80203d8:	44bc      	add	ip, r7
 80203da:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80203de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80203e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80203e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80203ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80203ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80203f2:	ea4c 040a 	orr.w	r4, ip, sl
 80203f6:	9409      	str	r4, [sp, #36]	; 0x24
 80203f8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80203fa:	2cff      	cmp	r4, #255	; 0xff
 80203fc:	d020      	beq.n	8020440 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80203fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020400:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020404:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020406:	4367      	muls	r7, r4
 8020408:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802040a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802040e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020412:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020414:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020418:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802041c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020420:	44bc      	add	ip, r7
 8020422:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020426:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802042a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802042e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020432:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020436:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802043a:	ea4c 040a 	orr.w	r4, ip, sl
 802043e:	940e      	str	r4, [sp, #56]	; 0x38
 8020440:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020442:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020446:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802044a:	43d2      	mvns	r2, r2
 802044c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020450:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020452:	b2d2      	uxtb	r2, r2
 8020454:	fb08 f707 	mul.w	r7, r8, r7
 8020458:	fb01 770c 	mla	r7, r1, ip, r7
 802045c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020460:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020462:	fb00 770c 	mla	r7, r0, ip, r7
 8020466:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802046a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802046c:	fb09 770c 	mla	r7, r9, ip, r7
 8020470:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020474:	fb08 f80c 	mul.w	r8, r8, ip
 8020478:	0a3f      	lsrs	r7, r7, #8
 802047a:	fb01 8303 	mla	r3, r1, r3, r8
 802047e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020480:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020484:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020488:	990e      	ldr	r1, [sp, #56]	; 0x38
 802048a:	fb00 330a 	mla	r3, r0, sl, r3
 802048e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020492:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020496:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802049a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802049e:	fb03 f102 	mul.w	r1, r3, r2
 80204a2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80204a6:	1c4b      	adds	r3, r1, #1
 80204a8:	ea47 070c 	orr.w	r7, r7, ip
 80204ac:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80204b0:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80204b4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80204b8:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80204bc:	4353      	muls	r3, r2
 80204be:	1c59      	adds	r1, r3, #1
 80204c0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80204c4:	0a3b      	lsrs	r3, r7, #8
 80204c6:	0c3f      	lsrs	r7, r7, #16
 80204c8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80204cc:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80204d0:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80204d4:	435a      	muls	r2, r3
 80204d6:	1c53      	adds	r3, r2, #1
 80204d8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80204dc:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80204e0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80204e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80204e6:	f10e 0e03 	add.w	lr, lr, #3
 80204ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80204ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80204f0:	441a      	add	r2, r3
 80204f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80204f4:	9225      	str	r2, [sp, #148]	; 0x94
 80204f6:	441d      	add	r5, r3
 80204f8:	e65a      	b.n	80201b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80204fa:	2800      	cmp	r0, #0
 80204fc:	f43f aef7 	beq.w	80202ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020500:	5c79      	ldrb	r1, [r7, r1]
 8020502:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020506:	9109      	str	r1, [sp, #36]	; 0x24
 8020508:	0e09      	lsrs	r1, r1, #24
 802050a:	9111      	str	r1, [sp, #68]	; 0x44
 802050c:	e6ef      	b.n	80202ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802050e:	b01b      	add	sp, #108	; 0x6c
 8020510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020514 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020518:	b08d      	sub	sp, #52	; 0x34
 802051a:	468b      	mov	fp, r1
 802051c:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8020520:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8020524:	fb0c 5703 	mla	r7, ip, r3, r5
 8020528:	f1bc 0f00 	cmp.w	ip, #0
 802052c:	910b      	str	r1, [sp, #44]	; 0x2c
 802052e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020532:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8020536:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 802053a:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 802053e:	eb02 0607 	add.w	r6, r2, r7
 8020542:	f89b 4000 	ldrb.w	r4, [fp]
 8020546:	f89b 0001 	ldrb.w	r0, [fp, #1]
 802054a:	f89b 1002 	ldrb.w	r1, [fp, #2]
 802054e:	f2c0 80c1 	blt.w	80206d4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8020552:	45e6      	cmp	lr, ip
 8020554:	f340 80be 	ble.w	80206d4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8020558:	2d00      	cmp	r5, #0
 802055a:	f2c0 80b7 	blt.w	80206cc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802055e:	42ab      	cmp	r3, r5
 8020560:	f340 80b4 	ble.w	80206cc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8020564:	5dd2      	ldrb	r2, [r2, r7]
 8020566:	9205      	str	r2, [sp, #20]
 8020568:	7872      	ldrb	r2, [r6, #1]
 802056a:	9206      	str	r2, [sp, #24]
 802056c:	78b2      	ldrb	r2, [r6, #2]
 802056e:	9207      	str	r2, [sp, #28]
 8020570:	1c6a      	adds	r2, r5, #1
 8020572:	f100 80b6 	bmi.w	80206e2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8020576:	4293      	cmp	r3, r2
 8020578:	f340 80b3 	ble.w	80206e2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802057c:	f1b8 0f00 	cmp.w	r8, #0
 8020580:	f000 80af 	beq.w	80206e2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8020584:	78f2      	ldrb	r2, [r6, #3]
 8020586:	9201      	str	r2, [sp, #4]
 8020588:	7932      	ldrb	r2, [r6, #4]
 802058a:	9202      	str	r2, [sp, #8]
 802058c:	7972      	ldrb	r2, [r6, #5]
 802058e:	9203      	str	r2, [sp, #12]
 8020590:	f11c 0c01 	adds.w	ip, ip, #1
 8020594:	f100 80ad 	bmi.w	80206f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020598:	45e6      	cmp	lr, ip
 802059a:	f340 80aa 	ble.w	80206f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802059e:	f1ba 0f00 	cmp.w	sl, #0
 80205a2:	f000 80a6 	beq.w	80206f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80205a6:	2d00      	cmp	r5, #0
 80205a8:	f2c0 809f 	blt.w	80206ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80205ac:	42ab      	cmp	r3, r5
 80205ae:	f340 809c 	ble.w	80206ea <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80205b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80205b6:	f816 9002 	ldrb.w	r9, [r6, r2]
 80205ba:	2203      	movs	r2, #3
 80205bc:	fb03 6c02 	mla	ip, r3, r2, r6
 80205c0:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80205c4:	f89c e002 	ldrb.w	lr, [ip, #2]
 80205c8:	9704      	str	r7, [sp, #16]
 80205ca:	3501      	adds	r5, #1
 80205cc:	f100 8098 	bmi.w	8020700 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80205d0:	42ab      	cmp	r3, r5
 80205d2:	f340 8095 	ble.w	8020700 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80205d6:	f1b8 0f00 	cmp.w	r8, #0
 80205da:	f000 8091 	beq.w	8020700 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80205de:	f04f 0c03 	mov.w	ip, #3
 80205e2:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80205e6:	5cb5      	ldrb	r5, [r6, r2]
 80205e8:	fb03 620c 	mla	r2, r3, ip, r6
 80205ec:	fb03 630c 	mla	r3, r3, ip, r6
 80205f0:	7912      	ldrb	r2, [r2, #4]
 80205f2:	795e      	ldrb	r6, [r3, #5]
 80205f4:	fa1f f388 	uxth.w	r3, r8
 80205f8:	fa1f fc8a 	uxth.w	ip, sl
 80205fc:	fb03 f70c 	mul.w	r7, r3, ip
 8020600:	011b      	lsls	r3, r3, #4
 8020602:	9708      	str	r7, [sp, #32]
 8020604:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020608:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 802060c:	1bdb      	subs	r3, r3, r7
 802060e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8020612:	fa1f fc8c 	uxth.w	ip, ip
 8020616:	b29b      	uxth	r3, r3
 8020618:	9709      	str	r7, [sp, #36]	; 0x24
 802061a:	ebaa 0a0c 	sub.w	sl, sl, ip
 802061e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020620:	930a      	str	r3, [sp, #40]	; 0x28
 8020622:	fa1f fa8a 	uxth.w	sl, sl
 8020626:	ea6f 0807 	mvn.w	r8, r7
 802062a:	9f01      	ldr	r7, [sp, #4]
 802062c:	435f      	muls	r7, r3
 802062e:	9b05      	ldr	r3, [sp, #20]
 8020630:	fa5f f888 	uxtb.w	r8, r8
 8020634:	fb0a 7703 	mla	r7, sl, r3, r7
 8020638:	9b08      	ldr	r3, [sp, #32]
 802063a:	fb14 f408 	smulbb	r4, r4, r8
 802063e:	fb0c 7709 	mla	r7, ip, r9, r7
 8020642:	fb10 f008 	smulbb	r0, r0, r8
 8020646:	fb11 f108 	smulbb	r1, r1, r8
 802064a:	fb03 7705 	mla	r7, r3, r5, r7
 802064e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020650:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020654:	fb07 4703 	mla	r7, r7, r3, r4
 8020658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802065a:	b2bf      	uxth	r7, r7
 802065c:	1c7c      	adds	r4, r7, #1
 802065e:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8020662:	1224      	asrs	r4, r4, #8
 8020664:	f88b 4000 	strb.w	r4, [fp]
 8020668:	9c02      	ldr	r4, [sp, #8]
 802066a:	435c      	muls	r4, r3
 802066c:	9b06      	ldr	r3, [sp, #24]
 802066e:	fb0a 4403 	mla	r4, sl, r3, r4
 8020672:	9b04      	ldr	r3, [sp, #16]
 8020674:	fb0c 4403 	mla	r4, ip, r3, r4
 8020678:	9b08      	ldr	r3, [sp, #32]
 802067a:	fb03 4402 	mla	r4, r3, r2, r4
 802067e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020682:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020686:	fb04 0403 	mla	r4, r4, r3, r0
 802068a:	9b03      	ldr	r3, [sp, #12]
 802068c:	435a      	muls	r2, r3
 802068e:	b2a4      	uxth	r4, r4
 8020690:	4613      	mov	r3, r2
 8020692:	9a07      	ldr	r2, [sp, #28]
 8020694:	1c60      	adds	r0, r4, #1
 8020696:	fb0a 3a02 	mla	sl, sl, r2, r3
 802069a:	9b08      	ldr	r3, [sp, #32]
 802069c:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80206a0:	fb0c ac0e 	mla	ip, ip, lr, sl
 80206a4:	1224      	asrs	r4, r4, #8
 80206a6:	fb03 c606 	mla	r6, r3, r6, ip
 80206aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206ac:	f88b 4001 	strb.w	r4, [fp, #1]
 80206b0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80206b4:	fb06 1103 	mla	r1, r6, r3, r1
 80206b8:	b289      	uxth	r1, r1
 80206ba:	1c4e      	adds	r6, r1, #1
 80206bc:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 80206c0:	1209      	asrs	r1, r1, #8
 80206c2:	f88b 1002 	strb.w	r1, [fp, #2]
 80206c6:	b00d      	add	sp, #52	; 0x34
 80206c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80206d0:	9405      	str	r4, [sp, #20]
 80206d2:	e74d      	b.n	8020570 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 80206d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80206d8:	9401      	str	r4, [sp, #4]
 80206da:	9405      	str	r4, [sp, #20]
 80206dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80206e0:	e756      	b.n	8020590 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80206e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80206e6:	9401      	str	r4, [sp, #4]
 80206e8:	e752      	b.n	8020590 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80206ea:	468e      	mov	lr, r1
 80206ec:	9004      	str	r0, [sp, #16]
 80206ee:	46a1      	mov	r9, r4
 80206f0:	e76b      	b.n	80205ca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 80206f2:	460e      	mov	r6, r1
 80206f4:	4602      	mov	r2, r0
 80206f6:	4625      	mov	r5, r4
 80206f8:	468e      	mov	lr, r1
 80206fa:	9004      	str	r0, [sp, #16]
 80206fc:	46a1      	mov	r9, r4
 80206fe:	e779      	b.n	80205f4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8020700:	460e      	mov	r6, r1
 8020702:	4602      	mov	r2, r0
 8020704:	4625      	mov	r5, r4
 8020706:	e775      	b.n	80205f4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08020708 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802070c:	b09f      	sub	sp, #124	; 0x7c
 802070e:	920e      	str	r2, [sp, #56]	; 0x38
 8020710:	9307      	str	r3, [sp, #28]
 8020712:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020714:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020718:	901d      	str	r0, [sp, #116]	; 0x74
 802071a:	930c      	str	r3, [sp, #48]	; 0x30
 802071c:	6850      	ldr	r0, [r2, #4]
 802071e:	910b      	str	r1, [sp, #44]	; 0x2c
 8020720:	6812      	ldr	r2, [r2, #0]
 8020722:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020726:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 802072a:	fb00 1303 	mla	r3, r0, r3, r1
 802072e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020732:	18d3      	adds	r3, r2, r3
 8020734:	9308      	str	r3, [sp, #32]
 8020736:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020738:	681b      	ldr	r3, [r3, #0]
 802073a:	930a      	str	r3, [sp, #40]	; 0x28
 802073c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802073e:	43db      	mvns	r3, r3
 8020740:	b2db      	uxtb	r3, r3
 8020742:	9309      	str	r3, [sp, #36]	; 0x24
 8020744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020746:	2b00      	cmp	r3, #0
 8020748:	dc03      	bgt.n	8020752 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802074a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802074c:	2b00      	cmp	r3, #0
 802074e:	f340 81f5 	ble.w	8020b3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8020752:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020754:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020758:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802075c:	1e48      	subs	r0, r1, #1
 802075e:	1e54      	subs	r4, r2, #1
 8020760:	9b07      	ldr	r3, [sp, #28]
 8020762:	2b00      	cmp	r3, #0
 8020764:	f340 80d5 	ble.w	8020912 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020768:	ea5f 452a 	movs.w	r5, sl, asr #16
 802076c:	ea4f 4328 	mov.w	r3, r8, asr #16
 8020770:	d406      	bmi.n	8020780 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020772:	4285      	cmp	r5, r0
 8020774:	da04      	bge.n	8020780 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020776:	2b00      	cmp	r3, #0
 8020778:	db02      	blt.n	8020780 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802077a:	42a3      	cmp	r3, r4
 802077c:	f2c0 80ca 	blt.w	8020914 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8020780:	3501      	adds	r5, #1
 8020782:	f100 80bb 	bmi.w	80208fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020786:	42a9      	cmp	r1, r5
 8020788:	f2c0 80b8 	blt.w	80208fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802078c:	3301      	adds	r3, #1
 802078e:	f100 80b5 	bmi.w	80208fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020792:	429a      	cmp	r2, r3
 8020794:	f2c0 80b2 	blt.w	80208fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020798:	9b07      	ldr	r3, [sp, #28]
 802079a:	9d08      	ldr	r5, [sp, #32]
 802079c:	930d      	str	r3, [sp, #52]	; 0x34
 802079e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	f340 80d6 	ble.w	8020952 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80207a6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80207a8:	ea4f 4428 	mov.w	r4, r8, asr #16
 80207ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80207ae:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80207b2:	68c6      	ldr	r6, [r0, #12]
 80207b4:	ea5f 402a 	movs.w	r0, sl, asr #16
 80207b8:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80207bc:	689b      	ldr	r3, [r3, #8]
 80207be:	f100 810f 	bmi.w	80209e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80207c2:	1e5f      	subs	r7, r3, #1
 80207c4:	42b8      	cmp	r0, r7
 80207c6:	f280 810b 	bge.w	80209e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80207ca:	2c00      	cmp	r4, #0
 80207cc:	f2c0 8108 	blt.w	80209e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80207d0:	1e77      	subs	r7, r6, #1
 80207d2:	42bc      	cmp	r4, r7
 80207d4:	f280 8104 	bge.w	80209e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80207d8:	b21b      	sxth	r3, r3
 80207da:	fb04 0003 	mla	r0, r4, r3, r0
 80207de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80207e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80207e4:	1826      	adds	r6, r4, r0
 80207e6:	5c24      	ldrb	r4, [r4, r0]
 80207e8:	78b7      	ldrb	r7, [r6, #2]
 80207ea:	7870      	ldrb	r0, [r6, #1]
 80207ec:	970f      	str	r7, [sp, #60]	; 0x3c
 80207ee:	7977      	ldrb	r7, [r6, #5]
 80207f0:	f896 e003 	ldrb.w	lr, [r6, #3]
 80207f4:	f896 c004 	ldrb.w	ip, [r6, #4]
 80207f8:	9710      	str	r7, [sp, #64]	; 0x40
 80207fa:	b1c9      	cbz	r1, 8020830 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80207fc:	f04f 0b03 	mov.w	fp, #3
 8020800:	f06f 0904 	mvn.w	r9, #4
 8020804:	3605      	adds	r6, #5
 8020806:	fb13 930b 	smlabb	r3, r3, fp, r9
 802080a:	eb06 0b03 	add.w	fp, r6, r3
 802080e:	5cf3      	ldrb	r3, [r6, r3]
 8020810:	9311      	str	r3, [sp, #68]	; 0x44
 8020812:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8020816:	9313      	str	r3, [sp, #76]	; 0x4c
 8020818:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802081c:	9315      	str	r3, [sp, #84]	; 0x54
 802081e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8020822:	9312      	str	r3, [sp, #72]	; 0x48
 8020824:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8020828:	9314      	str	r3, [sp, #80]	; 0x50
 802082a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 802082e:	9316      	str	r3, [sp, #88]	; 0x58
 8020830:	b292      	uxth	r2, r2
 8020832:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8020834:	b289      	uxth	r1, r1
 8020836:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802083a:	fb02 f601 	mul.w	r6, r2, r1
 802083e:	0112      	lsls	r2, r2, #4
 8020840:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8020844:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8020848:	1b92      	subs	r2, r2, r6
 802084a:	b289      	uxth	r1, r1
 802084c:	b292      	uxth	r2, r2
 802084e:	eba9 0901 	sub.w	r9, r9, r1
 8020852:	fb02 fe0e 	mul.w	lr, r2, lr
 8020856:	fa1f f989 	uxth.w	r9, r9
 802085a:	fb02 fc0c 	mul.w	ip, r2, ip
 802085e:	fb09 e404 	mla	r4, r9, r4, lr
 8020862:	f895 e000 	ldrb.w	lr, [r5]
 8020866:	fb09 c000 	mla	r0, r9, r0, ip
 802086a:	fb01 4407 	mla	r4, r1, r7, r4
 802086e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8020870:	fb06 4407 	mla	r4, r6, r7, r4
 8020874:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020876:	fb1e fe07 	smulbb	lr, lr, r7
 802087a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802087e:	fb04 e403 	mla	r4, r4, r3, lr
 8020882:	b2a4      	uxth	r4, r4
 8020884:	f104 0e01 	add.w	lr, r4, #1
 8020888:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 802088c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802088e:	fb01 0004 	mla	r0, r1, r4, r0
 8020892:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020894:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020898:	fb06 0004 	mla	r0, r6, r4, r0
 802089c:	786c      	ldrb	r4, [r5, #1]
 802089e:	f885 e000 	strb.w	lr, [r5]
 80208a2:	fb14 f407 	smulbb	r4, r4, r7
 80208a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80208aa:	fb00 4003 	mla	r0, r0, r3, r4
 80208ae:	b280      	uxth	r0, r0
 80208b0:	1c44      	adds	r4, r0, #1
 80208b2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80208b6:	1200      	asrs	r0, r0, #8
 80208b8:	7068      	strb	r0, [r5, #1]
 80208ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80208bc:	4342      	muls	r2, r0
 80208be:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80208c0:	fb09 2200 	mla	r2, r9, r0, r2
 80208c4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80208c6:	fb01 2100 	mla	r1, r1, r0, r2
 80208ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80208cc:	fb06 1602 	mla	r6, r6, r2, r1
 80208d0:	78a9      	ldrb	r1, [r5, #2]
 80208d2:	fb11 f107 	smulbb	r1, r1, r7
 80208d6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80208da:	fb06 1303 	mla	r3, r6, r3, r1
 80208de:	b29b      	uxth	r3, r3
 80208e0:	1c5e      	adds	r6, r3, #1
 80208e2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80208e6:	121b      	asrs	r3, r3, #8
 80208e8:	70ab      	strb	r3, [r5, #2]
 80208ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80208ec:	3503      	adds	r5, #3
 80208ee:	449a      	add	sl, r3
 80208f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80208f2:	4498      	add	r8, r3
 80208f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80208f6:	3b01      	subs	r3, #1
 80208f8:	930d      	str	r3, [sp, #52]	; 0x34
 80208fa:	e750      	b.n	802079e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80208fc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80208fe:	449a      	add	sl, r3
 8020900:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020902:	4498      	add	r8, r3
 8020904:	9b07      	ldr	r3, [sp, #28]
 8020906:	3b01      	subs	r3, #1
 8020908:	9307      	str	r3, [sp, #28]
 802090a:	9b08      	ldr	r3, [sp, #32]
 802090c:	3303      	adds	r3, #3
 802090e:	9308      	str	r3, [sp, #32]
 8020910:	e726      	b.n	8020760 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020912:	d026      	beq.n	8020962 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8020914:	9b07      	ldr	r3, [sp, #28]
 8020916:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020918:	3b01      	subs	r3, #1
 802091a:	fb00 a003 	mla	r0, r0, r3, sl
 802091e:	1400      	asrs	r0, r0, #16
 8020920:	f53f af3a 	bmi.w	8020798 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020924:	3901      	subs	r1, #1
 8020926:	4288      	cmp	r0, r1
 8020928:	f6bf af36 	bge.w	8020798 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802092c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802092e:	fb01 8303 	mla	r3, r1, r3, r8
 8020932:	141b      	asrs	r3, r3, #16
 8020934:	f53f af30 	bmi.w	8020798 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020938:	3a01      	subs	r2, #1
 802093a:	4293      	cmp	r3, r2
 802093c:	f6bf af2c 	bge.w	8020798 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020940:	9b08      	ldr	r3, [sp, #32]
 8020942:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020946:	1cdd      	adds	r5, r3, #3
 8020948:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 802094c:	f1bc 0f00 	cmp.w	ip, #0
 8020950:	dc5f      	bgt.n	8020a12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8020952:	9b07      	ldr	r3, [sp, #28]
 8020954:	9a08      	ldr	r2, [sp, #32]
 8020956:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802095a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802095e:	441a      	add	r2, r3
 8020960:	9208      	str	r2, [sp, #32]
 8020962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020964:	2b00      	cmp	r3, #0
 8020966:	f340 80e9 	ble.w	8020b3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802096a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802096e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020970:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020974:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020978:	eef0 6a62 	vmov.f32	s13, s5
 802097c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020980:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020984:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020988:	ee16 aa90 	vmov	sl, s13
 802098c:	eef0 6a43 	vmov.f32	s13, s6
 8020990:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020994:	ee16 8a90 	vmov	r8, s13
 8020998:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802099c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80209a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80209a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80209a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80209ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80209b0:	ee12 2a90 	vmov	r2, s5
 80209b4:	eef0 2a47 	vmov.f32	s5, s14
 80209b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80209bc:	ee13 2a10 	vmov	r2, s6
 80209c0:	932b      	str	r3, [sp, #172]	; 0xac
 80209c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80209c4:	eeb0 3a67 	vmov.f32	s6, s15
 80209c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80209cc:	932c      	str	r3, [sp, #176]	; 0xb0
 80209ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80209d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80209d2:	3b01      	subs	r3, #1
 80209d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80209d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80209d8:	bf08      	it	eq
 80209da:	4613      	moveq	r3, r2
 80209dc:	9307      	str	r3, [sp, #28]
 80209de:	e6b1      	b.n	8020744 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80209e0:	1c47      	adds	r7, r0, #1
 80209e2:	d482      	bmi.n	80208ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80209e4:	42bb      	cmp	r3, r7
 80209e6:	db80      	blt.n	80208ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80209e8:	1c67      	adds	r7, r4, #1
 80209ea:	f53f af7e 	bmi.w	80208ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80209ee:	42be      	cmp	r6, r7
 80209f0:	f6ff af7b 	blt.w	80208ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80209f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80209f6:	b236      	sxth	r6, r6
 80209f8:	9001      	str	r0, [sp, #4]
 80209fa:	b21b      	sxth	r3, r3
 80209fc:	9600      	str	r6, [sp, #0]
 80209fe:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020a00:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8020a04:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8020a08:	4629      	mov	r1, r5
 8020a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020a0c:	f7ff fd82 	bl	8020514 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020a10:	e76b      	b.n	80208ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020a12:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8020a14:	ea4f 402a 	mov.w	r0, sl, asr #16
 8020a18:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8020a1c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8020a20:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8020a24:	ea4f 4128 	mov.w	r1, r8, asr #16
 8020a28:	fb07 0101 	mla	r1, r7, r1, r0
 8020a2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020a2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020a32:	1844      	adds	r4, r0, r1
 8020a34:	5c40      	ldrb	r0, [r0, r1]
 8020a36:	78a6      	ldrb	r6, [r4, #2]
 8020a38:	7861      	ldrb	r1, [r4, #1]
 8020a3a:	960f      	str	r6, [sp, #60]	; 0x3c
 8020a3c:	78e6      	ldrb	r6, [r4, #3]
 8020a3e:	910d      	str	r1, [sp, #52]	; 0x34
 8020a40:	9610      	str	r6, [sp, #64]	; 0x40
 8020a42:	f894 9004 	ldrb.w	r9, [r4, #4]
 8020a46:	f894 b005 	ldrb.w	fp, [r4, #5]
 8020a4a:	b192      	cbz	r2, 8020a72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8020a4c:	f06f 0604 	mvn.w	r6, #4
 8020a50:	2103      	movs	r1, #3
 8020a52:	3405      	adds	r4, #5
 8020a54:	fb17 6701 	smlabb	r7, r7, r1, r6
 8020a58:	19e6      	adds	r6, r4, r7
 8020a5a:	5de4      	ldrb	r4, [r4, r7]
 8020a5c:	9417      	str	r4, [sp, #92]	; 0x5c
 8020a5e:	7874      	ldrb	r4, [r6, #1]
 8020a60:	9419      	str	r4, [sp, #100]	; 0x64
 8020a62:	78b4      	ldrb	r4, [r6, #2]
 8020a64:	941b      	str	r4, [sp, #108]	; 0x6c
 8020a66:	78f4      	ldrb	r4, [r6, #3]
 8020a68:	9418      	str	r4, [sp, #96]	; 0x60
 8020a6a:	7934      	ldrb	r4, [r6, #4]
 8020a6c:	941a      	str	r4, [sp, #104]	; 0x68
 8020a6e:	7974      	ldrb	r4, [r6, #5]
 8020a70:	941c      	str	r4, [sp, #112]	; 0x70
 8020a72:	b29b      	uxth	r3, r3
 8020a74:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020a76:	b292      	uxth	r2, r2
 8020a78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020a7a:	3503      	adds	r5, #3
 8020a7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020a80:	fb03 f402 	mul.w	r4, r3, r2
 8020a84:	011b      	lsls	r3, r3, #4
 8020a86:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8020a8a:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8020a8e:	1b1b      	subs	r3, r3, r4
 8020a90:	b292      	uxth	r2, r2
 8020a92:	b29b      	uxth	r3, r3
 8020a94:	1ab6      	subs	r6, r6, r2
 8020a96:	435f      	muls	r7, r3
 8020a98:	b2b6      	uxth	r6, r6
 8020a9a:	fb03 f909 	mul.w	r9, r3, r9
 8020a9e:	fb03 fb0b 	mul.w	fp, r3, fp
 8020aa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020aa4:	fb06 7000 	mla	r0, r6, r0, r7
 8020aa8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8020aaa:	fb06 bb03 	mla	fp, r6, r3, fp
 8020aae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020ab0:	fb02 0007 	mla	r0, r2, r7, r0
 8020ab4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8020ab6:	fb02 bb03 	mla	fp, r2, r3, fp
 8020aba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020abc:	fb04 0007 	mla	r0, r4, r7, r0
 8020ac0:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8020ac4:	fb17 f701 	smulbb	r7, r7, r1
 8020ac8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020acc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020ace:	fb00 700e 	mla	r0, r0, lr, r7
 8020ad2:	fb06 9101 	mla	r1, r6, r1, r9
 8020ad6:	b280      	uxth	r0, r0
 8020ad8:	1c47      	adds	r7, r0, #1
 8020ada:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8020ade:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020ae0:	1200      	asrs	r0, r0, #8
 8020ae2:	f805 0c06 	strb.w	r0, [r5, #-6]
 8020ae6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020ae8:	fb02 1100 	mla	r1, r2, r0, r1
 8020aec:	981a      	ldr	r0, [sp, #104]	; 0x68
 8020aee:	fb04 1100 	mla	r1, r4, r0, r1
 8020af2:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8020af6:	fb04 b403 	mla	r4, r4, r3, fp
 8020afa:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8020afe:	fb10 f007 	smulbb	r0, r0, r7
 8020b02:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020b06:	fb13 f307 	smulbb	r3, r3, r7
 8020b0a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020b0e:	fb01 010e 	mla	r1, r1, lr, r0
 8020b12:	fb04 340e 	mla	r4, r4, lr, r3
 8020b16:	b289      	uxth	r1, r1
 8020b18:	b2a4      	uxth	r4, r4
 8020b1a:	1c48      	adds	r0, r1, #1
 8020b1c:	1c63      	adds	r3, r4, #1
 8020b1e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020b22:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020b26:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020b28:	1209      	asrs	r1, r1, #8
 8020b2a:	1224      	asrs	r4, r4, #8
 8020b2c:	449a      	add	sl, r3
 8020b2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020b30:	f805 1c05 	strb.w	r1, [r5, #-5]
 8020b34:	f805 4c04 	strb.w	r4, [r5, #-4]
 8020b38:	4498      	add	r8, r3
 8020b3a:	e707      	b.n	802094c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8020b3c:	b01f      	add	sp, #124	; 0x7c
 8020b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020b42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b46:	b087      	sub	sp, #28
 8020b48:	780d      	ldrb	r5, [r1, #0]
 8020b4a:	784c      	ldrb	r4, [r1, #1]
 8020b4c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8020b50:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8020b54:	9004      	str	r0, [sp, #16]
 8020b56:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8020b5a:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8020b5e:	9005      	str	r0, [sp, #20]
 8020b60:	fb06 bc03 	mla	ip, r6, r3, fp
 8020b64:	2e00      	cmp	r6, #0
 8020b66:	7888      	ldrb	r0, [r1, #2]
 8020b68:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020b6c:	eb02 090c 	add.w	r9, r2, ip
 8020b70:	f2c0 8084 	blt.w	8020c7c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8020b74:	42b7      	cmp	r7, r6
 8020b76:	f340 8081 	ble.w	8020c7c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8020b7a:	f1bb 0f00 	cmp.w	fp, #0
 8020b7e:	db79      	blt.n	8020c74 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8020b80:	455b      	cmp	r3, fp
 8020b82:	dd77      	ble.n	8020c74 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8020b84:	f812 200c 	ldrb.w	r2, [r2, ip]
 8020b88:	9201      	str	r2, [sp, #4]
 8020b8a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020b8e:	9202      	str	r2, [sp, #8]
 8020b90:	f899 2002 	ldrb.w	r2, [r9, #2]
 8020b94:	9203      	str	r2, [sp, #12]
 8020b96:	f11b 0201 	adds.w	r2, fp, #1
 8020b9a:	d476      	bmi.n	8020c8a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020b9c:	4293      	cmp	r3, r2
 8020b9e:	dd74      	ble.n	8020c8a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020ba0:	9a04      	ldr	r2, [sp, #16]
 8020ba2:	2a00      	cmp	r2, #0
 8020ba4:	d071      	beq.n	8020c8a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020ba6:	f899 8003 	ldrb.w	r8, [r9, #3]
 8020baa:	f899 c004 	ldrb.w	ip, [r9, #4]
 8020bae:	f899 a005 	ldrb.w	sl, [r9, #5]
 8020bb2:	3601      	adds	r6, #1
 8020bb4:	d471      	bmi.n	8020c9a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8020bb6:	42b7      	cmp	r7, r6
 8020bb8:	dd6f      	ble.n	8020c9a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8020bba:	9a05      	ldr	r2, [sp, #20]
 8020bbc:	2a00      	cmp	r2, #0
 8020bbe:	d06c      	beq.n	8020c9a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8020bc0:	f1bb 0f00 	cmp.w	fp, #0
 8020bc4:	db65      	blt.n	8020c92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8020bc6:	455b      	cmp	r3, fp
 8020bc8:	dd63      	ble.n	8020c92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8020bca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020bce:	f819 e002 	ldrb.w	lr, [r9, r2]
 8020bd2:	2203      	movs	r2, #3
 8020bd4:	fb03 9602 	mla	r6, r3, r2, r9
 8020bd8:	7877      	ldrb	r7, [r6, #1]
 8020bda:	78b6      	ldrb	r6, [r6, #2]
 8020bdc:	f11b 0b01 	adds.w	fp, fp, #1
 8020be0:	d40c      	bmi.n	8020bfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020be2:	455b      	cmp	r3, fp
 8020be4:	dd0a      	ble.n	8020bfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020be6:	9a04      	ldr	r2, [sp, #16]
 8020be8:	b142      	cbz	r2, 8020bfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020bea:	2203      	movs	r2, #3
 8020bec:	fb13 2002 	smlabb	r0, r3, r2, r2
 8020bf0:	f819 5000 	ldrb.w	r5, [r9, r0]
 8020bf4:	fb03 9002 	mla	r0, r3, r2, r9
 8020bf8:	7904      	ldrb	r4, [r0, #4]
 8020bfa:	7940      	ldrb	r0, [r0, #5]
 8020bfc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020c00:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8020c04:	fb03 fb02 	mul.w	fp, r3, r2
 8020c08:	011b      	lsls	r3, r3, #4
 8020c0a:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8020c0e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8020c12:	eba3 030b 	sub.w	r3, r3, fp
 8020c16:	b292      	uxth	r2, r2
 8020c18:	b29b      	uxth	r3, r3
 8020c1a:	eba9 0902 	sub.w	r9, r9, r2
 8020c1e:	9304      	str	r3, [sp, #16]
 8020c20:	fa1f f989 	uxth.w	r9, r9
 8020c24:	fb03 f808 	mul.w	r8, r3, r8
 8020c28:	9b01      	ldr	r3, [sp, #4]
 8020c2a:	fb09 8803 	mla	r8, r9, r3, r8
 8020c2e:	9b04      	ldr	r3, [sp, #16]
 8020c30:	fb03 fc0c 	mul.w	ip, r3, ip
 8020c34:	9b02      	ldr	r3, [sp, #8]
 8020c36:	fb02 880e 	mla	r8, r2, lr, r8
 8020c3a:	fb09 cc03 	mla	ip, r9, r3, ip
 8020c3e:	9b04      	ldr	r3, [sp, #16]
 8020c40:	fb0b 8805 	mla	r8, fp, r5, r8
 8020c44:	fb02 c707 	mla	r7, r2, r7, ip
 8020c48:	fb03 f30a 	mul.w	r3, r3, sl
 8020c4c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020c50:	fb0b 7404 	mla	r4, fp, r4, r7
 8020c54:	f881 8000 	strb.w	r8, [r1]
 8020c58:	1224      	asrs	r4, r4, #8
 8020c5a:	704c      	strb	r4, [r1, #1]
 8020c5c:	9c03      	ldr	r4, [sp, #12]
 8020c5e:	fb09 3904 	mla	r9, r9, r4, r3
 8020c62:	fb02 9206 	mla	r2, r2, r6, r9
 8020c66:	fb0b 2000 	mla	r0, fp, r0, r2
 8020c6a:	1200      	asrs	r0, r0, #8
 8020c6c:	7088      	strb	r0, [r1, #2]
 8020c6e:	b007      	add	sp, #28
 8020c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c74:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8020c78:	9501      	str	r5, [sp, #4]
 8020c7a:	e78c      	b.n	8020b96 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8020c7c:	4682      	mov	sl, r0
 8020c7e:	46a4      	mov	ip, r4
 8020c80:	46a8      	mov	r8, r5
 8020c82:	9501      	str	r5, [sp, #4]
 8020c84:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8020c88:	e793      	b.n	8020bb2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8020c8a:	4682      	mov	sl, r0
 8020c8c:	46a4      	mov	ip, r4
 8020c8e:	46a8      	mov	r8, r5
 8020c90:	e78f      	b.n	8020bb2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8020c92:	4606      	mov	r6, r0
 8020c94:	4627      	mov	r7, r4
 8020c96:	46ae      	mov	lr, r5
 8020c98:	e7a0      	b.n	8020bdc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020c9a:	4606      	mov	r6, r0
 8020c9c:	4627      	mov	r7, r4
 8020c9e:	46ae      	mov	lr, r5
 8020ca0:	e7ac      	b.n	8020bfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08020ca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ca6:	b09b      	sub	sp, #108	; 0x6c
 8020ca8:	920b      	str	r2, [sp, #44]	; 0x2c
 8020caa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020cac:	9019      	str	r0, [sp, #100]	; 0x64
 8020cae:	9109      	str	r1, [sp, #36]	; 0x24
 8020cb0:	6850      	ldr	r0, [r2, #4]
 8020cb2:	9306      	str	r3, [sp, #24]
 8020cb4:	6812      	ldr	r2, [r2, #0]
 8020cb6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8020cba:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 8020cbe:	fb00 1303 	mla	r3, r0, r3, r1
 8020cc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020cc6:	18d3      	adds	r3, r2, r3
 8020cc8:	9307      	str	r3, [sp, #28]
 8020cca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	9308      	str	r3, [sp, #32]
 8020cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cd2:	2b00      	cmp	r3, #0
 8020cd4:	dc03      	bgt.n	8020cde <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020cd8:	2b00      	cmp	r3, #0
 8020cda:	f340 81ab 	ble.w	8021034 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8020cde:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ce0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020ce4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020ce8:	1e48      	subs	r0, r1, #1
 8020cea:	1e55      	subs	r5, r2, #1
 8020cec:	9b06      	ldr	r3, [sp, #24]
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	f340 80b1 	ble.w	8020e56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020cf4:	ea5f 462b 	movs.w	r6, fp, asr #16
 8020cf8:	ea4f 4324 	mov.w	r3, r4, asr #16
 8020cfc:	d406      	bmi.n	8020d0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020cfe:	4286      	cmp	r6, r0
 8020d00:	da04      	bge.n	8020d0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	db02      	blt.n	8020d0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020d06:	42ab      	cmp	r3, r5
 8020d08:	f2c0 80a6 	blt.w	8020e58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8020d0c:	3601      	adds	r6, #1
 8020d0e:	f100 8097 	bmi.w	8020e40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020d12:	42b1      	cmp	r1, r6
 8020d14:	f2c0 8094 	blt.w	8020e40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020d18:	3301      	adds	r3, #1
 8020d1a:	f100 8091 	bmi.w	8020e40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020d1e:	429a      	cmp	r2, r3
 8020d20:	f2c0 808e 	blt.w	8020e40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020d24:	9b06      	ldr	r3, [sp, #24]
 8020d26:	9e07      	ldr	r6, [sp, #28]
 8020d28:	930a      	str	r3, [sp, #40]	; 0x28
 8020d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	f340 80b0 	ble.w	8020e92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020d32:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8020d34:	1425      	asrs	r5, r4, #16
 8020d36:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d38:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020d3c:	68c7      	ldr	r7, [r0, #12]
 8020d3e:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020d42:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020d46:	689b      	ldr	r3, [r3, #8]
 8020d48:	f100 80ea 	bmi.w	8020f20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020d4c:	f103 3cff 	add.w	ip, r3, #4294967295
 8020d50:	4560      	cmp	r0, ip
 8020d52:	f280 80e5 	bge.w	8020f20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020d56:	2d00      	cmp	r5, #0
 8020d58:	f2c0 80e2 	blt.w	8020f20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020d5c:	f107 3cff 	add.w	ip, r7, #4294967295
 8020d60:	4565      	cmp	r5, ip
 8020d62:	f280 80dd 	bge.w	8020f20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020d66:	b21b      	sxth	r3, r3
 8020d68:	fb05 0003 	mla	r0, r5, r3, r0
 8020d6c:	9d08      	ldr	r5, [sp, #32]
 8020d6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020d72:	182f      	adds	r7, r5, r0
 8020d74:	5c2d      	ldrb	r5, [r5, r0]
 8020d76:	7878      	ldrb	r0, [r7, #1]
 8020d78:	f897 e002 	ldrb.w	lr, [r7, #2]
 8020d7c:	900c      	str	r0, [sp, #48]	; 0x30
 8020d7e:	f897 9003 	ldrb.w	r9, [r7, #3]
 8020d82:	f897 8004 	ldrb.w	r8, [r7, #4]
 8020d86:	f897 a005 	ldrb.w	sl, [r7, #5]
 8020d8a:	b1c9      	cbz	r1, 8020dc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020d8c:	f04f 0c03 	mov.w	ip, #3
 8020d90:	f06f 0004 	mvn.w	r0, #4
 8020d94:	3705      	adds	r7, #5
 8020d96:	fb13 030c 	smlabb	r3, r3, ip, r0
 8020d9a:	eb07 0c03 	add.w	ip, r7, r3
 8020d9e:	5cfb      	ldrb	r3, [r7, r3]
 8020da0:	930d      	str	r3, [sp, #52]	; 0x34
 8020da2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020da6:	930f      	str	r3, [sp, #60]	; 0x3c
 8020da8:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8020dac:	9311      	str	r3, [sp, #68]	; 0x44
 8020dae:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8020db2:	930e      	str	r3, [sp, #56]	; 0x38
 8020db4:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8020db8:	9310      	str	r3, [sp, #64]	; 0x40
 8020dba:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8020dbe:	9312      	str	r3, [sp, #72]	; 0x48
 8020dc0:	b292      	uxth	r2, r2
 8020dc2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020dc4:	b289      	uxth	r1, r1
 8020dc6:	fb02 f301 	mul.w	r3, r2, r1
 8020dca:	0112      	lsls	r2, r2, #4
 8020dcc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020dd0:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8020dd4:	1ad2      	subs	r2, r2, r3
 8020dd6:	b289      	uxth	r1, r1
 8020dd8:	b292      	uxth	r2, r2
 8020dda:	1a7f      	subs	r7, r7, r1
 8020ddc:	fb02 f909 	mul.w	r9, r2, r9
 8020de0:	b2bf      	uxth	r7, r7
 8020de2:	fb02 f808 	mul.w	r8, r2, r8
 8020de6:	fb02 fa0a 	mul.w	sl, r2, sl
 8020dea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020dec:	fb07 9905 	mla	r9, r7, r5, r9
 8020df0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020df2:	fb07 8800 	mla	r8, r7, r0, r8
 8020df6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020df8:	fb07 aa0e 	mla	sl, r7, lr, sl
 8020dfc:	fb01 9905 	mla	r9, r1, r5, r9
 8020e00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020e02:	fb01 8800 	mla	r8, r1, r0, r8
 8020e06:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020e08:	fb01 a102 	mla	r1, r1, r2, sl
 8020e0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020e0e:	fb03 9905 	mla	r9, r3, r5, r9
 8020e12:	fb03 8800 	mla	r8, r3, r0, r8
 8020e16:	fb03 1302 	mla	r3, r3, r2, r1
 8020e1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020e1e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020e22:	121b      	asrs	r3, r3, #8
 8020e24:	f886 9000 	strb.w	r9, [r6]
 8020e28:	f886 8001 	strb.w	r8, [r6, #1]
 8020e2c:	70b3      	strb	r3, [r6, #2]
 8020e2e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020e30:	3603      	adds	r6, #3
 8020e32:	449b      	add	fp, r3
 8020e34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e36:	441c      	add	r4, r3
 8020e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e3a:	3b01      	subs	r3, #1
 8020e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8020e3e:	e774      	b.n	8020d2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8020e40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020e42:	449b      	add	fp, r3
 8020e44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020e46:	441c      	add	r4, r3
 8020e48:	9b06      	ldr	r3, [sp, #24]
 8020e4a:	3b01      	subs	r3, #1
 8020e4c:	9306      	str	r3, [sp, #24]
 8020e4e:	9b07      	ldr	r3, [sp, #28]
 8020e50:	3303      	adds	r3, #3
 8020e52:	9307      	str	r3, [sp, #28]
 8020e54:	e74a      	b.n	8020cec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020e56:	d024      	beq.n	8020ea2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020e58:	9b06      	ldr	r3, [sp, #24]
 8020e5a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020e5c:	3b01      	subs	r3, #1
 8020e5e:	fb00 b003 	mla	r0, r0, r3, fp
 8020e62:	1400      	asrs	r0, r0, #16
 8020e64:	f53f af5e 	bmi.w	8020d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020e68:	3901      	subs	r1, #1
 8020e6a:	4288      	cmp	r0, r1
 8020e6c:	f6bf af5a 	bge.w	8020d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020e70:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020e72:	fb01 4303 	mla	r3, r1, r3, r4
 8020e76:	141b      	asrs	r3, r3, #16
 8020e78:	f53f af54 	bmi.w	8020d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020e7c:	3a01      	subs	r2, #1
 8020e7e:	4293      	cmp	r3, r2
 8020e80:	f6bf af50 	bge.w	8020d24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020e84:	9b07      	ldr	r3, [sp, #28]
 8020e86:	f8dd e018 	ldr.w	lr, [sp, #24]
 8020e8a:	1cde      	adds	r6, r3, #3
 8020e8c:	f1be 0f00 	cmp.w	lr, #0
 8020e90:	dc5f      	bgt.n	8020f52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020e92:	9b06      	ldr	r3, [sp, #24]
 8020e94:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020e98:	9b07      	ldr	r3, [sp, #28]
 8020e9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020e9e:	4423      	add	r3, r4
 8020ea0:	9307      	str	r3, [sp, #28]
 8020ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	f340 80c5 	ble.w	8021034 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8020eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020eae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020eb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020eb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020eb8:	eef0 6a62 	vmov.f32	s13, s5
 8020ebc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020ec0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020ec4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ec8:	ee16 ba90 	vmov	fp, s13
 8020ecc:	eef0 6a43 	vmov.f32	s13, s6
 8020ed0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ed4:	ee16 4a90 	vmov	r4, s13
 8020ed8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020edc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020ee0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020ee4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020ee8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020eec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020ef0:	ee12 2a90 	vmov	r2, s5
 8020ef4:	eef0 2a47 	vmov.f32	s5, s14
 8020ef8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020efc:	ee13 2a10 	vmov	r2, s6
 8020f00:	9327      	str	r3, [sp, #156]	; 0x9c
 8020f02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020f04:	eeb0 3a67 	vmov.f32	s6, s15
 8020f08:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f0c:	9328      	str	r3, [sp, #160]	; 0xa0
 8020f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020f12:	3b01      	subs	r3, #1
 8020f14:	9309      	str	r3, [sp, #36]	; 0x24
 8020f16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020f18:	bf08      	it	eq
 8020f1a:	4613      	moveq	r3, r2
 8020f1c:	9306      	str	r3, [sp, #24]
 8020f1e:	e6d7      	b.n	8020cd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020f20:	f110 0c01 	adds.w	ip, r0, #1
 8020f24:	d483      	bmi.n	8020e2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020f26:	4563      	cmp	r3, ip
 8020f28:	db81      	blt.n	8020e2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020f2a:	f115 0c01 	adds.w	ip, r5, #1
 8020f2e:	f53f af7e 	bmi.w	8020e2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020f32:	4567      	cmp	r7, ip
 8020f34:	f6ff af7b 	blt.w	8020e2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020f38:	b23f      	sxth	r7, r7
 8020f3a:	b21b      	sxth	r3, r3
 8020f3c:	9700      	str	r7, [sp, #0]
 8020f3e:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8020f42:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8020f46:	9a08      	ldr	r2, [sp, #32]
 8020f48:	4631      	mov	r1, r6
 8020f4a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020f4c:	f7ff fdf9 	bl	8020b42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8020f50:	e76d      	b.n	8020e2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020f52:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020f54:	ea4f 402b 	mov.w	r0, fp, asr #16
 8020f58:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020f5c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020f60:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8020f64:	1421      	asrs	r1, r4, #16
 8020f66:	930a      	str	r3, [sp, #40]	; 0x28
 8020f68:	fb0c 0101 	mla	r1, ip, r1, r0
 8020f6c:	9808      	ldr	r0, [sp, #32]
 8020f6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020f72:	1845      	adds	r5, r0, r1
 8020f74:	5c40      	ldrb	r0, [r0, r1]
 8020f76:	796f      	ldrb	r7, [r5, #5]
 8020f78:	7869      	ldrb	r1, [r5, #1]
 8020f7a:	f895 8002 	ldrb.w	r8, [r5, #2]
 8020f7e:	f895 a003 	ldrb.w	sl, [r5, #3]
 8020f82:	f895 9004 	ldrb.w	r9, [r5, #4]
 8020f86:	970c      	str	r7, [sp, #48]	; 0x30
 8020f88:	b1a2      	cbz	r2, 8020fb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8020f8a:	2703      	movs	r7, #3
 8020f8c:	f06f 0304 	mvn.w	r3, #4
 8020f90:	3505      	adds	r5, #5
 8020f92:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8020f96:	eb05 070c 	add.w	r7, r5, ip
 8020f9a:	f815 500c 	ldrb.w	r5, [r5, ip]
 8020f9e:	9513      	str	r5, [sp, #76]	; 0x4c
 8020fa0:	787d      	ldrb	r5, [r7, #1]
 8020fa2:	9515      	str	r5, [sp, #84]	; 0x54
 8020fa4:	78bd      	ldrb	r5, [r7, #2]
 8020fa6:	9517      	str	r5, [sp, #92]	; 0x5c
 8020fa8:	78fd      	ldrb	r5, [r7, #3]
 8020faa:	9514      	str	r5, [sp, #80]	; 0x50
 8020fac:	793d      	ldrb	r5, [r7, #4]
 8020fae:	9516      	str	r5, [sp, #88]	; 0x58
 8020fb0:	797d      	ldrb	r5, [r7, #5]
 8020fb2:	9518      	str	r5, [sp, #96]	; 0x60
 8020fb4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8020fb8:	b292      	uxth	r2, r2
 8020fba:	3603      	adds	r6, #3
 8020fbc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020fc0:	fb03 f502 	mul.w	r5, r3, r2
 8020fc4:	011b      	lsls	r3, r3, #4
 8020fc6:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8020fca:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020fce:	1b5b      	subs	r3, r3, r5
 8020fd0:	b292      	uxth	r2, r2
 8020fd2:	b29b      	uxth	r3, r3
 8020fd4:	1abf      	subs	r7, r7, r2
 8020fd6:	fb03 f909 	mul.w	r9, r3, r9
 8020fda:	b2bf      	uxth	r7, r7
 8020fdc:	fb03 fa0a 	mul.w	sl, r3, sl
 8020fe0:	fb07 9901 	mla	r9, r7, r1, r9
 8020fe4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020fe6:	fb07 aa00 	mla	sl, r7, r0, sl
 8020fea:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020fec:	fb02 9901 	mla	r9, r2, r1, r9
 8020ff0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8020ff2:	fb02 aa00 	mla	sl, r2, r0, sl
 8020ff6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020ff8:	fb05 9901 	mla	r9, r5, r1, r9
 8020ffc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020ffe:	fb05 aa00 	mla	sl, r5, r0, sl
 8021002:	434b      	muls	r3, r1
 8021004:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021006:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802100a:	fb07 3308 	mla	r3, r7, r8, r3
 802100e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021012:	f806 ac06 	strb.w	sl, [r6, #-6]
 8021016:	fb02 3201 	mla	r2, r2, r1, r3
 802101a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802101c:	f806 9c05 	strb.w	r9, [r6, #-5]
 8021020:	fb05 2503 	mla	r5, r5, r3, r2
 8021024:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021026:	122d      	asrs	r5, r5, #8
 8021028:	449b      	add	fp, r3
 802102a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802102c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8021030:	441c      	add	r4, r3
 8021032:	e72b      	b.n	8020e8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021034:	b01b      	add	sp, #108	; 0x6c
 8021036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802103a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 802103a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802103e:	b087      	sub	sp, #28
 8021040:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8021044:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8021048:	fb05 7003 	mla	r0, r5, r3, r7
 802104c:	2d00      	cmp	r5, #0
 802104e:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8021052:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8021056:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802105a:	f2c0 811f 	blt.w	802129c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802105e:	45a8      	cmp	r8, r5
 8021060:	f340 811c 	ble.w	802129c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8021064:	2f00      	cmp	r7, #0
 8021066:	f2c0 8117 	blt.w	8021298 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802106a:	42bb      	cmp	r3, r7
 802106c:	f340 8114 	ble.w	8021298 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8021070:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8021074:	1c7a      	adds	r2, r7, #1
 8021076:	f100 8114 	bmi.w	80212a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802107a:	4293      	cmp	r3, r2
 802107c:	f340 8111 	ble.w	80212a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8021080:	2c00      	cmp	r4, #0
 8021082:	f000 8110 	beq.w	80212a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8021086:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802108a:	3501      	adds	r5, #1
 802108c:	f100 810f 	bmi.w	80212ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8021090:	45a8      	cmp	r8, r5
 8021092:	f340 810c 	ble.w	80212ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8021096:	f1be 0f00 	cmp.w	lr, #0
 802109a:	f000 810b 	beq.w	80212b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 802109e:	2f00      	cmp	r7, #0
 80210a0:	f2c0 8103 	blt.w	80212aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80210a4:	42bb      	cmp	r3, r7
 80210a6:	f340 8100 	ble.w	80212aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80210aa:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80210ae:	3701      	adds	r7, #1
 80210b0:	f100 8103 	bmi.w	80212ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80210b4:	42bb      	cmp	r3, r7
 80210b6:	f340 8100 	ble.w	80212ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80210ba:	2c00      	cmp	r4, #0
 80210bc:	f000 80ff 	beq.w	80212be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80210c0:	3301      	adds	r3, #1
 80210c2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80210c6:	fa1f fc84 	uxth.w	ip, r4
 80210ca:	fa1f fe8e 	uxth.w	lr, lr
 80210ce:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80210d2:	fb0c f90e 	mul.w	r9, ip, lr
 80210d6:	0e13      	lsrs	r3, r2, #24
 80210d8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80210dc:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80210e0:	9302      	str	r3, [sp, #8]
 80210e2:	ebac 0709 	sub.w	r7, ip, r9
 80210e6:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80210ea:	fa1f f48e 	uxth.w	r4, lr
 80210ee:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80210f2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80210f6:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80210fa:	fb0a fe0e 	mul.w	lr, sl, lr
 80210fe:	1b1b      	subs	r3, r3, r4
 8021100:	fb0a f606 	mul.w	r6, sl, r6
 8021104:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021108:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802110c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021110:	b29b      	uxth	r3, r3
 8021112:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021116:	b2bf      	uxth	r7, r7
 8021118:	9301      	str	r3, [sp, #4]
 802111a:	44e6      	add	lr, ip
 802111c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021120:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021124:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021128:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 802112c:	9303      	str	r3, [sp, #12]
 802112e:	0a33      	lsrs	r3, r6, #8
 8021130:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8021134:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021138:	9304      	str	r3, [sp, #16]
 802113a:	fb0b f606 	mul.w	r6, fp, r6
 802113e:	fb0b f000 	mul.w	r0, fp, r0
 8021142:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8021146:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802114a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802114e:	44b6      	add	lr, r6
 8021150:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8021154:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8021158:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 802115c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021160:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021164:	fb08 f606 	mul.w	r6, r8, r6
 8021168:	0a03      	lsrs	r3, r0, #8
 802116a:	fb08 f505 	mul.w	r5, r8, r5
 802116e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021172:	0a30      	lsrs	r0, r6, #8
 8021174:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021178:	9305      	str	r3, [sp, #20]
 802117a:	0e13      	lsrs	r3, r2, #24
 802117c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021180:	fb0e fe07 	mul.w	lr, lr, r7
 8021184:	4430      	add	r0, r6
 8021186:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802118a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802118e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8021192:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021196:	0a00      	lsrs	r0, r0, #8
 8021198:	435e      	muls	r6, r3
 802119a:	0a2d      	lsrs	r5, r5, #8
 802119c:	435a      	muls	r2, r3
 802119e:	9b03      	ldr	r3, [sp, #12]
 80211a0:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80211a4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80211a8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80211ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211b0:	44b4      	add	ip, r6
 80211b2:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80211b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80211ba:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80211be:	9e01      	ldr	r6, [sp, #4]
 80211c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211c4:	fb03 ee06 	mla	lr, r3, r6, lr
 80211c8:	9b04      	ldr	r3, [sp, #16]
 80211ca:	0a12      	lsrs	r2, r2, #8
 80211cc:	fb0c ee09 	mla	lr, ip, r9, lr
 80211d0:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80211d4:	9b05      	ldr	r3, [sp, #20]
 80211d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80211da:	fb00 ee04 	mla	lr, r0, r4, lr
 80211de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80211e2:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80211e6:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80211ea:	9b01      	ldr	r3, [sp, #4]
 80211ec:	fb07 fe0e 	mul.w	lr, r7, lr
 80211f0:	fb07 f70b 	mul.w	r7, r7, fp
 80211f4:	fb03 ee06 	mla	lr, r3, r6, lr
 80211f8:	fb03 730a 	mla	r3, r3, sl, r7
 80211fc:	fb09 e202 	mla	r2, r9, r2, lr
 8021200:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021204:	fb04 2e0e 	mla	lr, r4, lr, r2
 8021208:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 802120c:	fb04 3408 	mla	r4, r4, r8, r3
 8021210:	9b02      	ldr	r3, [sp, #8]
 8021212:	b292      	uxth	r2, r2
 8021214:	fb09 4903 	mla	r9, r9, r3, r4
 8021218:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802121c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8021220:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021224:	fb09 f902 	mul.w	r9, r9, r2
 8021228:	ea40 0e0e 	orr.w	lr, r0, lr
 802122c:	f109 0301 	add.w	r3, r9, #1
 8021230:	fa5f f08e 	uxtb.w	r0, lr
 8021234:	fb10 f002 	smulbb	r0, r0, r2
 8021238:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 802123c:	780b      	ldrb	r3, [r1, #0]
 802123e:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8021242:	fa5f f989 	uxtb.w	r9, r9
 8021246:	fb03 0309 	mla	r3, r3, r9, r0
 802124a:	b29b      	uxth	r3, r3
 802124c:	1c58      	adds	r0, r3, #1
 802124e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021252:	7848      	ldrb	r0, [r1, #1]
 8021254:	fb10 f009 	smulbb	r0, r0, r9
 8021258:	121b      	asrs	r3, r3, #8
 802125a:	700b      	strb	r3, [r1, #0]
 802125c:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8021260:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021264:	fb03 0302 	mla	r3, r3, r2, r0
 8021268:	b29b      	uxth	r3, r3
 802126a:	1c58      	adds	r0, r3, #1
 802126c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021270:	121b      	asrs	r3, r3, #8
 8021272:	704b      	strb	r3, [r1, #1]
 8021274:	788b      	ldrb	r3, [r1, #2]
 8021276:	fb13 f909 	smulbb	r9, r3, r9
 802127a:	fb0e 9e02 	mla	lr, lr, r2, r9
 802127e:	fa1f fe8e 	uxth.w	lr, lr
 8021282:	f10e 0301 	add.w	r3, lr, #1
 8021286:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802128a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802128e:	f881 e002 	strb.w	lr, [r1, #2]
 8021292:	b007      	add	sp, #28
 8021294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021298:	2600      	movs	r6, #0
 802129a:	e6eb      	b.n	8021074 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 802129c:	2000      	movs	r0, #0
 802129e:	4606      	mov	r6, r0
 80212a0:	e6f3      	b.n	802108a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80212a2:	2000      	movs	r0, #0
 80212a4:	e6f1      	b.n	802108a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80212a6:	4620      	mov	r0, r4
 80212a8:	e6ef      	b.n	802108a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80212aa:	2500      	movs	r5, #0
 80212ac:	e6ff      	b.n	80210ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 80212ae:	2200      	movs	r2, #0
 80212b0:	4615      	mov	r5, r2
 80212b2:	e708      	b.n	80210c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80212b4:	4672      	mov	r2, lr
 80212b6:	4675      	mov	r5, lr
 80212b8:	e705      	b.n	80210c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80212ba:	2200      	movs	r2, #0
 80212bc:	e703      	b.n	80210c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80212be:	4622      	mov	r2, r4
 80212c0:	e701      	b.n	80210c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080212c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80212c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212c6:	b09d      	sub	sp, #116	; 0x74
 80212c8:	9219      	str	r2, [sp, #100]	; 0x64
 80212ca:	9307      	str	r3, [sp, #28]
 80212cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80212ce:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80212d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80212d4:	931a      	str	r3, [sp, #104]	; 0x68
 80212d6:	6850      	ldr	r0, [r2, #4]
 80212d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80212da:	6812      	ldr	r2, [r2, #0]
 80212dc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80212e0:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80212e4:	fb00 1303 	mla	r3, r0, r3, r1
 80212e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80212ec:	18d3      	adds	r3, r2, r3
 80212ee:	930a      	str	r3, [sp, #40]	; 0x28
 80212f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80212f2:	681b      	ldr	r3, [r3, #0]
 80212f4:	9310      	str	r3, [sp, #64]	; 0x40
 80212f6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80212fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80212fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80212fe:	2b00      	cmp	r3, #0
 8021300:	dc03      	bgt.n	802130a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021302:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021304:	2b00      	cmp	r3, #0
 8021306:	f340 8368 	ble.w	80219da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802130a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802130c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021310:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021314:	1e48      	subs	r0, r1, #1
 8021316:	1e57      	subs	r7, r2, #1
 8021318:	9b07      	ldr	r3, [sp, #28]
 802131a:	2b00      	cmp	r3, #0
 802131c:	f340 8187 	ble.w	802162e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8021320:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021324:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021328:	d406      	bmi.n	8021338 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802132a:	4584      	cmp	ip, r0
 802132c:	da04      	bge.n	8021338 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802132e:	2b00      	cmp	r3, #0
 8021330:	db02      	blt.n	8021338 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021332:	42bb      	cmp	r3, r7
 8021334:	f2c0 817c 	blt.w	8021630 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8021338:	f11c 0c01 	adds.w	ip, ip, #1
 802133c:	f100 816c 	bmi.w	8021618 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021340:	4561      	cmp	r1, ip
 8021342:	f2c0 8169 	blt.w	8021618 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021346:	3301      	adds	r3, #1
 8021348:	f100 8166 	bmi.w	8021618 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802134c:	429a      	cmp	r2, r3
 802134e:	f2c0 8163 	blt.w	8021618 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8021352:	9b07      	ldr	r3, [sp, #28]
 8021354:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021356:	9318      	str	r3, [sp, #96]	; 0x60
 8021358:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802135a:	2b00      	cmp	r3, #0
 802135c:	f340 8186 	ble.w	802166c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8021360:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021362:	142a      	asrs	r2, r5, #16
 8021364:	ea4f 4026 	mov.w	r0, r6, asr #16
 8021368:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802136c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021370:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8021374:	f100 81cb 	bmi.w	802170e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021378:	f10e 38ff 	add.w	r8, lr, #4294967295
 802137c:	4542      	cmp	r2, r8
 802137e:	f280 81c6 	bge.w	802170e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021382:	2800      	cmp	r0, #0
 8021384:	f2c0 81c3 	blt.w	802170e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021388:	f103 38ff 	add.w	r8, r3, #4294967295
 802138c:	4540      	cmp	r0, r8
 802138e:	f280 81be 	bge.w	802170e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021392:	fa0f f38e 	sxth.w	r3, lr
 8021396:	fb00 2203 	mla	r2, r0, r3, r2
 802139a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802139c:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80213a0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80213a4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80213a8:	2900      	cmp	r1, #0
 80213aa:	f000 81a6 	beq.w	80216fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80213ae:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80213b2:	900c      	str	r0, [sp, #48]	; 0x30
 80213b4:	0e00      	lsrs	r0, r0, #24
 80213b6:	9013      	str	r0, [sp, #76]	; 0x4c
 80213b8:	f1bc 0f00 	cmp.w	ip, #0
 80213bc:	d00f      	beq.n	80213de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80213be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80213c2:	3b01      	subs	r3, #1
 80213c4:	009b      	lsls	r3, r3, #2
 80213c6:	3304      	adds	r3, #4
 80213c8:	eb08 0003 	add.w	r0, r8, r3
 80213cc:	f858 3003 	ldr.w	r3, [r8, r3]
 80213d0:	9308      	str	r3, [sp, #32]
 80213d2:	0e1b      	lsrs	r3, r3, #24
 80213d4:	9311      	str	r3, [sp, #68]	; 0x44
 80213d6:	6843      	ldr	r3, [r0, #4]
 80213d8:	930d      	str	r3, [sp, #52]	; 0x34
 80213da:	0e1b      	lsrs	r3, r3, #24
 80213dc:	9314      	str	r3, [sp, #80]	; 0x50
 80213de:	b289      	uxth	r1, r1
 80213e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80213e2:	fa1f fc8c 	uxth.w	ip, ip
 80213e6:	0108      	lsls	r0, r1, #4
 80213e8:	fb01 f90c 	mul.w	r9, r1, ip
 80213ec:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80213f0:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80213f4:	eba0 0809 	sub.w	r8, r0, r9
 80213f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80213fa:	fa1f f18c 	uxth.w	r1, ip
 80213fe:	fa1f f888 	uxth.w	r8, r8
 8021402:	1a5b      	subs	r3, r3, r1
 8021404:	fb08 f000 	mul.w	r0, r8, r0
 8021408:	b29b      	uxth	r3, r3
 802140a:	fb03 000e 	mla	r0, r3, lr, r0
 802140e:	fb01 0004 	mla	r0, r1, r4, r0
 8021412:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021414:	fb09 0004 	mla	r0, r9, r4, r0
 8021418:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802141c:	2800      	cmp	r0, #0
 802141e:	f000 80f2 	beq.w	8021606 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021422:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021426:	d01b      	beq.n	8021460 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021428:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802142c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021430:	fb0e fa0a 	mul.w	sl, lr, sl
 8021434:	fb0e fe02 	mul.w	lr, lr, r2
 8021438:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802143c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021440:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021444:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021448:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802144c:	4452      	add	r2, sl
 802144e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021452:	0a12      	lsrs	r2, r2, #8
 8021454:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021458:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802145c:	ea42 020c 	orr.w	r2, r2, ip
 8021460:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021462:	2cff      	cmp	r4, #255	; 0xff
 8021464:	d021      	beq.n	80214aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8021466:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021468:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802146c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802146e:	fb04 fb0b 	mul.w	fp, r4, fp
 8021472:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021474:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021478:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802147a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802147e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021482:	fb04 fa0a 	mul.w	sl, r4, sl
 8021486:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802148a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802148e:	44de      	add	lr, fp
 8021490:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021494:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021498:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802149c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214a4:	ea4e 040a 	orr.w	r4, lr, sl
 80214a8:	940c      	str	r4, [sp, #48]	; 0x30
 80214aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80214ac:	2cff      	cmp	r4, #255	; 0xff
 80214ae:	d021      	beq.n	80214f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80214b0:	9c08      	ldr	r4, [sp, #32]
 80214b2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80214b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80214b8:	fb04 fb0b 	mul.w	fp, r4, fp
 80214bc:	9c08      	ldr	r4, [sp, #32]
 80214be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80214c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80214c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80214c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80214cc:	fb04 fa0a 	mul.w	sl, r4, sl
 80214d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80214d8:	44de      	add	lr, fp
 80214da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80214de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80214e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214ee:	ea4e 040a 	orr.w	r4, lr, sl
 80214f2:	9408      	str	r4, [sp, #32]
 80214f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80214f6:	2cff      	cmp	r4, #255	; 0xff
 80214f8:	d021      	beq.n	802153e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80214fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80214fc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021500:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021502:	fb04 fb0b 	mul.w	fp, r4, fp
 8021506:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021508:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802150c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802150e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021512:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021516:	fb04 fa0a 	mul.w	sl, r4, sl
 802151a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802151e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021522:	44de      	add	lr, fp
 8021524:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021528:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802152c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021530:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021534:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021538:	ea4e 040a 	orr.w	r4, lr, sl
 802153c:	940d      	str	r4, [sp, #52]	; 0x34
 802153e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021540:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021544:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021548:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802154c:	9c08      	ldr	r4, [sp, #32]
 802154e:	fb08 fc0c 	mul.w	ip, r8, ip
 8021552:	fb03 cc0e 	mla	ip, r3, lr, ip
 8021556:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802155a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802155c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021560:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021564:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021566:	fb09 cc0e 	mla	ip, r9, lr, ip
 802156a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802156e:	fb08 f80e 	mul.w	r8, r8, lr
 8021572:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021576:	fb03 8202 	mla	r2, r3, r2, r8
 802157a:	9b08      	ldr	r3, [sp, #32]
 802157c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021580:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8021584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021586:	fb01 220a 	mla	r2, r1, sl, r2
 802158a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802158e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021590:	fb09 2901 	mla	r9, r9, r1, r2
 8021594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021596:	4343      	muls	r3, r0
 8021598:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802159c:	1c58      	adds	r0, r3, #1
 802159e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80215a2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80215a6:	783b      	ldrb	r3, [r7, #0]
 80215a8:	ea4c 0c09 	orr.w	ip, ip, r9
 80215ac:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80215b0:	fa5f f28c 	uxtb.w	r2, ip
 80215b4:	b2c0      	uxtb	r0, r0
 80215b6:	fb12 f201 	smulbb	r2, r2, r1
 80215ba:	fb03 2300 	mla	r3, r3, r0, r2
 80215be:	b29b      	uxth	r3, r3
 80215c0:	1c5a      	adds	r2, r3, #1
 80215c2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80215c6:	787a      	ldrb	r2, [r7, #1]
 80215c8:	fb12 f200 	smulbb	r2, r2, r0
 80215cc:	121b      	asrs	r3, r3, #8
 80215ce:	703b      	strb	r3, [r7, #0]
 80215d0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80215d4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80215d8:	fb03 2301 	mla	r3, r3, r1, r2
 80215dc:	b29b      	uxth	r3, r3
 80215de:	1c5a      	adds	r2, r3, #1
 80215e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80215e4:	121b      	asrs	r3, r3, #8
 80215e6:	707b      	strb	r3, [r7, #1]
 80215e8:	78bb      	ldrb	r3, [r7, #2]
 80215ea:	fb13 f000 	smulbb	r0, r3, r0
 80215ee:	fb0c 0c01 	mla	ip, ip, r1, r0
 80215f2:	fa1f fc8c 	uxth.w	ip, ip
 80215f6:	f10c 0301 	add.w	r3, ip, #1
 80215fa:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80215fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021602:	f887 c002 	strb.w	ip, [r7, #2]
 8021606:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021608:	3703      	adds	r7, #3
 802160a:	441d      	add	r5, r3
 802160c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802160e:	441e      	add	r6, r3
 8021610:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021612:	3b01      	subs	r3, #1
 8021614:	9318      	str	r3, [sp, #96]	; 0x60
 8021616:	e69f      	b.n	8021358 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021618:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802161a:	441d      	add	r5, r3
 802161c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802161e:	441e      	add	r6, r3
 8021620:	9b07      	ldr	r3, [sp, #28]
 8021622:	3b01      	subs	r3, #1
 8021624:	9307      	str	r3, [sp, #28]
 8021626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021628:	3303      	adds	r3, #3
 802162a:	930a      	str	r3, [sp, #40]	; 0x28
 802162c:	e674      	b.n	8021318 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802162e:	d025      	beq.n	802167c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8021630:	9b07      	ldr	r3, [sp, #28]
 8021632:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8021634:	3b01      	subs	r3, #1
 8021636:	fb00 5003 	mla	r0, r0, r3, r5
 802163a:	1400      	asrs	r0, r0, #16
 802163c:	f53f ae89 	bmi.w	8021352 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021640:	3901      	subs	r1, #1
 8021642:	4288      	cmp	r0, r1
 8021644:	f6bf ae85 	bge.w	8021352 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021648:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802164a:	fb01 6303 	mla	r3, r1, r3, r6
 802164e:	141b      	asrs	r3, r3, #16
 8021650:	f53f ae7f 	bmi.w	8021352 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021654:	3a01      	subs	r2, #1
 8021656:	4293      	cmp	r3, r2
 8021658:	f6bf ae7b 	bge.w	8021352 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802165c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802165e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021662:	f103 0e03 	add.w	lr, r3, #3
 8021666:	f1bb 0f00 	cmp.w	fp, #0
 802166a:	dc6e      	bgt.n	802174a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802166c:	9b07      	ldr	r3, [sp, #28]
 802166e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021674:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021678:	4423      	add	r3, r4
 802167a:	930a      	str	r3, [sp, #40]	; 0x28
 802167c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802167e:	2b00      	cmp	r3, #0
 8021680:	f340 81ab 	ble.w	80219da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8021684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021688:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802168a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802168e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021692:	eef0 6a62 	vmov.f32	s13, s5
 8021696:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802169a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802169e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80216a2:	ee16 5a90 	vmov	r5, s13
 80216a6:	eef0 6a43 	vmov.f32	s13, s6
 80216aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80216ae:	ee16 6a90 	vmov	r6, s13
 80216b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80216b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80216ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80216be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80216c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80216c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80216ca:	ee12 2a90 	vmov	r2, s5
 80216ce:	eef0 2a47 	vmov.f32	s5, s14
 80216d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80216d6:	ee13 2a10 	vmov	r2, s6
 80216da:	9329      	str	r3, [sp, #164]	; 0xa4
 80216dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80216de:	eeb0 3a67 	vmov.f32	s6, s15
 80216e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80216e6:	932a      	str	r3, [sp, #168]	; 0xa8
 80216e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80216ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80216ec:	3b01      	subs	r3, #1
 80216ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80216f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80216f2:	bf08      	it	eq
 80216f4:	4613      	moveq	r3, r2
 80216f6:	9307      	str	r3, [sp, #28]
 80216f8:	e600      	b.n	80212fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80216fa:	f1bc 0f00 	cmp.w	ip, #0
 80216fe:	f43f ae6e 	beq.w	80213de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021702:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021706:	9308      	str	r3, [sp, #32]
 8021708:	0e1b      	lsrs	r3, r3, #24
 802170a:	9311      	str	r3, [sp, #68]	; 0x44
 802170c:	e667      	b.n	80213de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802170e:	f112 0801 	adds.w	r8, r2, #1
 8021712:	f53f af78 	bmi.w	8021606 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021716:	45c6      	cmp	lr, r8
 8021718:	f6ff af75 	blt.w	8021606 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802171c:	f110 0801 	adds.w	r8, r0, #1
 8021720:	f53f af71 	bmi.w	8021606 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021724:	4543      	cmp	r3, r8
 8021726:	f6ff af6e 	blt.w	8021606 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802172a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802172c:	b21b      	sxth	r3, r3
 802172e:	9201      	str	r2, [sp, #4]
 8021730:	9300      	str	r3, [sp, #0]
 8021732:	fa0f f38e 	sxth.w	r3, lr
 8021736:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802173c:	e9cd c404 	strd	ip, r4, [sp, #16]
 8021740:	4639      	mov	r1, r7
 8021742:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021744:	f7ff fc79 	bl	802103a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021748:	e75d      	b.n	8021606 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802174a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802174c:	142f      	asrs	r7, r5, #16
 802174e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021750:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021754:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8021758:	1433      	asrs	r3, r6, #16
 802175a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802175e:	fb02 7303 	mla	r3, r2, r3, r7
 8021762:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8021766:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802176a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802176e:	2900      	cmp	r1, #0
 8021770:	f000 812a 	beq.w	80219c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8021774:	687c      	ldr	r4, [r7, #4]
 8021776:	940e      	str	r4, [sp, #56]	; 0x38
 8021778:	0e24      	lsrs	r4, r4, #24
 802177a:	9415      	str	r4, [sp, #84]	; 0x54
 802177c:	b178      	cbz	r0, 802179e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802177e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8021782:	3a01      	subs	r2, #1
 8021784:	0092      	lsls	r2, r2, #2
 8021786:	3204      	adds	r2, #4
 8021788:	eb07 0802 	add.w	r8, r7, r2
 802178c:	58ba      	ldr	r2, [r7, r2]
 802178e:	9209      	str	r2, [sp, #36]	; 0x24
 8021790:	0e12      	lsrs	r2, r2, #24
 8021792:	9212      	str	r2, [sp, #72]	; 0x48
 8021794:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8021798:	920f      	str	r2, [sp, #60]	; 0x3c
 802179a:	0e12      	lsrs	r2, r2, #24
 802179c:	9216      	str	r2, [sp, #88]	; 0x58
 802179e:	b289      	uxth	r1, r1
 80217a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80217a2:	b280      	uxth	r0, r0
 80217a4:	fb01 f900 	mul.w	r9, r1, r0
 80217a8:	0109      	lsls	r1, r1, #4
 80217aa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80217ae:	eba1 0809 	sub.w	r8, r1, r9
 80217b2:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80217b6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80217b8:	b280      	uxth	r0, r0
 80217ba:	fa1f f888 	uxth.w	r8, r8
 80217be:	1a12      	subs	r2, r2, r0
 80217c0:	fb08 f101 	mul.w	r1, r8, r1
 80217c4:	b292      	uxth	r2, r2
 80217c6:	fb02 110c 	mla	r1, r2, ip, r1
 80217ca:	fb00 1104 	mla	r1, r0, r4, r1
 80217ce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80217d0:	fb09 1104 	mla	r1, r9, r4, r1
 80217d4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80217d8:	2900      	cmp	r1, #0
 80217da:	f000 80ec 	beq.w	80219b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80217de:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80217e2:	d019      	beq.n	8021818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80217e4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80217e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80217ec:	fb0c fa0a 	mul.w	sl, ip, sl
 80217f0:	fb0c fc03 	mul.w	ip, ip, r3
 80217f4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80217f8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80217fc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021800:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021804:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021808:	4453      	add	r3, sl
 802180a:	0a3f      	lsrs	r7, r7, #8
 802180c:	0a1b      	lsrs	r3, r3, #8
 802180e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021812:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021816:	433b      	orrs	r3, r7
 8021818:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802181a:	2cff      	cmp	r4, #255	; 0xff
 802181c:	d020      	beq.n	8021860 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 802181e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021820:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021824:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021826:	4367      	muls	r7, r4
 8021828:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802182a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802182e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021832:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021834:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021838:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802183c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021840:	44bc      	add	ip, r7
 8021842:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021846:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802184a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802184e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021852:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021856:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802185a:	ea4c 040a 	orr.w	r4, ip, sl
 802185e:	940e      	str	r4, [sp, #56]	; 0x38
 8021860:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021862:	2cff      	cmp	r4, #255	; 0xff
 8021864:	d020      	beq.n	80218a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8021866:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021868:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802186c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802186e:	4367      	muls	r7, r4
 8021870:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021872:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021876:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802187a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802187c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021880:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021884:	fb04 fa0a 	mul.w	sl, r4, sl
 8021888:	44bc      	add	ip, r7
 802188a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802188e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021892:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021896:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802189a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802189e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80218a2:	ea4c 040a 	orr.w	r4, ip, sl
 80218a6:	9409      	str	r4, [sp, #36]	; 0x24
 80218a8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80218aa:	2cff      	cmp	r4, #255	; 0xff
 80218ac:	d020      	beq.n	80218f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80218ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80218b0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80218b4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80218b6:	4367      	muls	r7, r4
 80218b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80218ba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80218be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80218c2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80218c4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80218c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218cc:	fb04 fa0a 	mul.w	sl, r4, sl
 80218d0:	44bc      	add	ip, r7
 80218d2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80218d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218da:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80218de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80218e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80218e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80218ea:	ea4c 040a 	orr.w	r4, ip, sl
 80218ee:	940f      	str	r4, [sp, #60]	; 0x3c
 80218f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80218f2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80218f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80218fa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80218fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021900:	fb08 f707 	mul.w	r7, r8, r7
 8021904:	fb02 770c 	mla	r7, r2, ip, r7
 8021908:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802190c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802190e:	fb00 770c 	mla	r7, r0, ip, r7
 8021912:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021916:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021918:	fb09 770c 	mla	r7, r9, ip, r7
 802191c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021920:	fb08 f80c 	mul.w	r8, r8, ip
 8021924:	0a3f      	lsrs	r7, r7, #8
 8021926:	fb02 8303 	mla	r3, r2, r3, r8
 802192a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802192c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021930:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021934:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021936:	fb00 330a 	mla	r3, r0, sl, r3
 802193a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802193e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021940:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021946:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802194a:	434b      	muls	r3, r1
 802194c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021950:	1c59      	adds	r1, r3, #1
 8021952:	ea47 070c 	orr.w	r7, r7, ip
 8021956:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802195a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802195e:	b2fa      	uxtb	r2, r7
 8021960:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021964:	fb12 f200 	smulbb	r2, r2, r0
 8021968:	b2c9      	uxtb	r1, r1
 802196a:	fb03 2301 	mla	r3, r3, r1, r2
 802196e:	b29b      	uxth	r3, r3
 8021970:	1c5a      	adds	r2, r3, #1
 8021972:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021976:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802197a:	fb12 f201 	smulbb	r2, r2, r1
 802197e:	121b      	asrs	r3, r3, #8
 8021980:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021984:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021988:	0c3f      	lsrs	r7, r7, #16
 802198a:	fb03 2300 	mla	r3, r3, r0, r2
 802198e:	b29b      	uxth	r3, r3
 8021990:	1c5a      	adds	r2, r3, #1
 8021992:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021996:	121b      	asrs	r3, r3, #8
 8021998:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802199c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80219a0:	fb13 f101 	smulbb	r1, r3, r1
 80219a4:	fb07 1700 	mla	r7, r7, r0, r1
 80219a8:	b2bf      	uxth	r7, r7
 80219aa:	1c79      	adds	r1, r7, #1
 80219ac:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80219b0:	123f      	asrs	r7, r7, #8
 80219b2:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80219b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80219b8:	f10e 0e03 	add.w	lr, lr, #3
 80219bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80219c0:	441d      	add	r5, r3
 80219c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80219c4:	441e      	add	r6, r3
 80219c6:	e64e      	b.n	8021666 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80219c8:	2800      	cmp	r0, #0
 80219ca:	f43f aee8 	beq.w	802179e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80219ce:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80219d2:	9209      	str	r2, [sp, #36]	; 0x24
 80219d4:	0e12      	lsrs	r2, r2, #24
 80219d6:	9212      	str	r2, [sp, #72]	; 0x48
 80219d8:	e6e1      	b.n	802179e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80219da:	b01d      	add	sp, #116	; 0x74
 80219dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080219e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80219e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219e4:	b087      	sub	sp, #28
 80219e6:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80219ea:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80219ee:	fb05 7003 	mla	r0, r5, r3, r7
 80219f2:	2d00      	cmp	r5, #0
 80219f4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80219f8:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 80219fc:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8021a00:	f2c0 810a 	blt.w	8021c18 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8021a04:	45a8      	cmp	r8, r5
 8021a06:	f340 8107 	ble.w	8021c18 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8021a0a:	2f00      	cmp	r7, #0
 8021a0c:	f2c0 8102 	blt.w	8021c14 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021a10:	42bb      	cmp	r3, r7
 8021a12:	f340 80ff 	ble.w	8021c14 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021a16:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8021a1a:	1c7a      	adds	r2, r7, #1
 8021a1c:	f100 80ff 	bmi.w	8021c1e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021a20:	4293      	cmp	r3, r2
 8021a22:	f340 80fc 	ble.w	8021c1e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021a26:	2c00      	cmp	r4, #0
 8021a28:	f000 80fb 	beq.w	8021c22 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8021a2c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8021a30:	3501      	adds	r5, #1
 8021a32:	f100 80fa 	bmi.w	8021c2a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8021a36:	45a8      	cmp	r8, r5
 8021a38:	f340 80f7 	ble.w	8021c2a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8021a3c:	f1be 0f00 	cmp.w	lr, #0
 8021a40:	f000 80f6 	beq.w	8021c30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8021a44:	2f00      	cmp	r7, #0
 8021a46:	f2c0 80ee 	blt.w	8021c26 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021a4a:	42bb      	cmp	r3, r7
 8021a4c:	f340 80eb 	ble.w	8021c26 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021a50:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8021a54:	3701      	adds	r7, #1
 8021a56:	f100 80ee 	bmi.w	8021c36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8021a5a:	42bb      	cmp	r3, r7
 8021a5c:	f340 80eb 	ble.w	8021c36 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8021a60:	2c00      	cmp	r4, #0
 8021a62:	f000 80ea 	beq.w	8021c3a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8021a66:	3301      	adds	r3, #1
 8021a68:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021a6c:	fa1f fc84 	uxth.w	ip, r4
 8021a70:	fa1f fe8e 	uxth.w	lr, lr
 8021a74:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021a78:	fb0c f90e 	mul.w	r9, ip, lr
 8021a7c:	0e13      	lsrs	r3, r2, #24
 8021a7e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021a82:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8021a86:	9302      	str	r3, [sp, #8]
 8021a88:	ebac 0709 	sub.w	r7, ip, r9
 8021a8c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8021a90:	fa1f f48e 	uxth.w	r4, lr
 8021a94:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8021a98:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a9c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8021aa0:	fb0a fe0e 	mul.w	lr, sl, lr
 8021aa4:	1b1b      	subs	r3, r3, r4
 8021aa6:	fb0a f606 	mul.w	r6, sl, r6
 8021aaa:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021aae:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021ab2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021ab6:	b29b      	uxth	r3, r3
 8021ab8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021abc:	b2bf      	uxth	r7, r7
 8021abe:	9301      	str	r3, [sp, #4]
 8021ac0:	44e6      	add	lr, ip
 8021ac2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021ac6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021aca:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021ace:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8021ad2:	9303      	str	r3, [sp, #12]
 8021ad4:	0a33      	lsrs	r3, r6, #8
 8021ad6:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8021ada:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021ade:	9304      	str	r3, [sp, #16]
 8021ae0:	fb0b f606 	mul.w	r6, fp, r6
 8021ae4:	fb0b f000 	mul.w	r0, fp, r0
 8021ae8:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8021aec:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021af0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021af4:	44b6      	add	lr, r6
 8021af6:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8021afa:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8021afe:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8021b02:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021b06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b0a:	fb08 f606 	mul.w	r6, r8, r6
 8021b0e:	0a03      	lsrs	r3, r0, #8
 8021b10:	fb08 f505 	mul.w	r5, r8, r5
 8021b14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021b18:	0a30      	lsrs	r0, r6, #8
 8021b1a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021b1e:	9305      	str	r3, [sp, #20]
 8021b20:	0e13      	lsrs	r3, r2, #24
 8021b22:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021b26:	fb0e fe07 	mul.w	lr, lr, r7
 8021b2a:	4430      	add	r0, r6
 8021b2c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021b30:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021b34:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8021b38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021b3c:	0a00      	lsrs	r0, r0, #8
 8021b3e:	435e      	muls	r6, r3
 8021b40:	0a2d      	lsrs	r5, r5, #8
 8021b42:	435a      	muls	r2, r3
 8021b44:	9b03      	ldr	r3, [sp, #12]
 8021b46:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8021b4a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021b4e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021b52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021b56:	44b4      	add	ip, r6
 8021b58:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8021b5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021b60:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8021b64:	9e01      	ldr	r6, [sp, #4]
 8021b66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021b6a:	fb03 ee06 	mla	lr, r3, r6, lr
 8021b6e:	9b04      	ldr	r3, [sp, #16]
 8021b70:	0a12      	lsrs	r2, r2, #8
 8021b72:	fb0c ee09 	mla	lr, ip, r9, lr
 8021b76:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8021b7a:	9b05      	ldr	r3, [sp, #20]
 8021b7c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021b80:	fb00 ee04 	mla	lr, r0, r4, lr
 8021b84:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b88:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8021b8c:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8021b90:	9b01      	ldr	r3, [sp, #4]
 8021b92:	fb07 fe0e 	mul.w	lr, r7, lr
 8021b96:	fb07 f70b 	mul.w	r7, r7, fp
 8021b9a:	fb03 ee06 	mla	lr, r3, r6, lr
 8021b9e:	fb03 730a 	mla	r3, r3, sl, r7
 8021ba2:	fb09 e202 	mla	r2, r9, r2, lr
 8021ba6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021baa:	fb04 2e0e 	mla	lr, r4, lr, r2
 8021bae:	fb04 3408 	mla	r4, r4, r8, r3
 8021bb2:	9b02      	ldr	r3, [sp, #8]
 8021bb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bb8:	fb09 4903 	mla	r9, r9, r3, r4
 8021bbc:	780b      	ldrb	r3, [r1, #0]
 8021bbe:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021bc2:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8021bc6:	ea40 0e0e 	orr.w	lr, r0, lr
 8021bca:	fa5f f989 	uxtb.w	r9, r9
 8021bce:	fb03 f209 	mul.w	r2, r3, r9
 8021bd2:	1c53      	adds	r3, r2, #1
 8021bd4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021bd8:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8021bdc:	700b      	strb	r3, [r1, #0]
 8021bde:	784b      	ldrb	r3, [r1, #1]
 8021be0:	fb03 f309 	mul.w	r3, r3, r9
 8021be4:	1c5a      	adds	r2, r3, #1
 8021be6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021bea:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021bee:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021bf2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021bf6:	704b      	strb	r3, [r1, #1]
 8021bf8:	788b      	ldrb	r3, [r1, #2]
 8021bfa:	fb03 f909 	mul.w	r9, r3, r9
 8021bfe:	f109 0301 	add.w	r3, r9, #1
 8021c02:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8021c06:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8021c0a:	f881 e002 	strb.w	lr, [r1, #2]
 8021c0e:	b007      	add	sp, #28
 8021c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c14:	2600      	movs	r6, #0
 8021c16:	e700      	b.n	8021a1a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8021c18:	2000      	movs	r0, #0
 8021c1a:	4606      	mov	r6, r0
 8021c1c:	e708      	b.n	8021a30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021c1e:	2000      	movs	r0, #0
 8021c20:	e706      	b.n	8021a30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021c22:	4620      	mov	r0, r4
 8021c24:	e704      	b.n	8021a30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021c26:	2500      	movs	r5, #0
 8021c28:	e714      	b.n	8021a54 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8021c2a:	2200      	movs	r2, #0
 8021c2c:	4615      	mov	r5, r2
 8021c2e:	e71d      	b.n	8021a6c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021c30:	4672      	mov	r2, lr
 8021c32:	4675      	mov	r5, lr
 8021c34:	e71a      	b.n	8021a6c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021c36:	2200      	movs	r2, #0
 8021c38:	e718      	b.n	8021a6c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021c3a:	4622      	mov	r2, r4
 8021c3c:	e716      	b.n	8021a6c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08021c3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021c3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c42:	b099      	sub	sp, #100	; 0x64
 8021c44:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8021c48:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021c4a:	9017      	str	r0, [sp, #92]	; 0x5c
 8021c4c:	9306      	str	r3, [sp, #24]
 8021c4e:	6850      	ldr	r0, [r2, #4]
 8021c50:	6812      	ldr	r2, [r2, #0]
 8021c52:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8021c56:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8021c5a:	fb00 1303 	mla	r3, r0, r3, r1
 8021c5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021c62:	18d3      	adds	r3, r2, r3
 8021c64:	9309      	str	r3, [sp, #36]	; 0x24
 8021c66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021c68:	681b      	ldr	r3, [r3, #0]
 8021c6a:	930e      	str	r3, [sp, #56]	; 0x38
 8021c6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021c6e:	2b00      	cmp	r3, #0
 8021c70:	dc03      	bgt.n	8021c7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021c72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	f340 8360 	ble.w	802233a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8021c7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021c7c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c80:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c84:	1e48      	subs	r0, r1, #1
 8021c86:	1e57      	subs	r7, r2, #1
 8021c88:	9b06      	ldr	r3, [sp, #24]
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	f340 817b 	ble.w	8021f86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8021c90:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021c94:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021c98:	d406      	bmi.n	8021ca8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021c9a:	4584      	cmp	ip, r0
 8021c9c:	da04      	bge.n	8021ca8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021c9e:	2b00      	cmp	r3, #0
 8021ca0:	db02      	blt.n	8021ca8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021ca2:	42bb      	cmp	r3, r7
 8021ca4:	f2c0 8170 	blt.w	8021f88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021ca8:	f11c 0c01 	adds.w	ip, ip, #1
 8021cac:	f100 8160 	bmi.w	8021f70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021cb0:	4561      	cmp	r1, ip
 8021cb2:	f2c0 815d 	blt.w	8021f70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021cb6:	3301      	adds	r3, #1
 8021cb8:	f100 815a 	bmi.w	8021f70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021cbc:	429a      	cmp	r2, r3
 8021cbe:	f2c0 8157 	blt.w	8021f70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021cc2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8021cc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021cc8:	f1b8 0f00 	cmp.w	r8, #0
 8021ccc:	f340 8179 	ble.w	8021fc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8021cd0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021cd2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021cd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021cd8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021cdc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021ce0:	142a      	asrs	r2, r5, #16
 8021ce2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021ce6:	689b      	ldr	r3, [r3, #8]
 8021ce8:	f100 81be 	bmi.w	8022068 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021cec:	f103 39ff 	add.w	r9, r3, #4294967295
 8021cf0:	454a      	cmp	r2, r9
 8021cf2:	f280 81b9 	bge.w	8022068 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021cf6:	f1bc 0f00 	cmp.w	ip, #0
 8021cfa:	f2c0 81b5 	blt.w	8022068 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021cfe:	f10e 39ff 	add.w	r9, lr, #4294967295
 8021d02:	45cc      	cmp	ip, r9
 8021d04:	f280 81b0 	bge.w	8022068 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021d08:	b21b      	sxth	r3, r3
 8021d0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021d0c:	fb0c 2203 	mla	r2, ip, r3, r2
 8021d10:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8021d14:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021d18:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021d1c:	2900      	cmp	r1, #0
 8021d1e:	f000 8197 	beq.w	8022050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8021d22:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8021d26:	940a      	str	r4, [sp, #40]	; 0x28
 8021d28:	0e24      	lsrs	r4, r4, #24
 8021d2a:	9411      	str	r4, [sp, #68]	; 0x44
 8021d2c:	b180      	cbz	r0, 8021d50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021d2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021d32:	3b01      	subs	r3, #1
 8021d34:	009b      	lsls	r3, r3, #2
 8021d36:	3304      	adds	r3, #4
 8021d38:	eb09 0c03 	add.w	ip, r9, r3
 8021d3c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021d40:	9307      	str	r3, [sp, #28]
 8021d42:	0e1b      	lsrs	r3, r3, #24
 8021d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8021d46:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021d4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8021d4c:	0e1b      	lsrs	r3, r3, #24
 8021d4e:	9312      	str	r3, [sp, #72]	; 0x48
 8021d50:	b289      	uxth	r1, r1
 8021d52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021d54:	b280      	uxth	r0, r0
 8021d56:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021d58:	fb01 fa00 	mul.w	sl, r1, r0
 8021d5c:	0109      	lsls	r1, r1, #4
 8021d5e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021d62:	eba1 090a 	sub.w	r9, r1, sl
 8021d66:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021d6a:	b280      	uxth	r0, r0
 8021d6c:	fa1f f989 	uxth.w	r9, r9
 8021d70:	1a09      	subs	r1, r1, r0
 8021d72:	fb09 f303 	mul.w	r3, r9, r3
 8021d76:	b289      	uxth	r1, r1
 8021d78:	fb01 330e 	mla	r3, r1, lr, r3
 8021d7c:	fb00 3304 	mla	r3, r0, r4, r3
 8021d80:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021d82:	fb0a 3304 	mla	r3, sl, r4, r3
 8021d86:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021d8a:	2b00      	cmp	r3, #0
 8021d8c:	f000 80e8 	beq.w	8021f60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021d90:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021d94:	d01b      	beq.n	8021dce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8021d96:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8021d9a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021d9e:	fb0e fb0b 	mul.w	fp, lr, fp
 8021da2:	fb0e fe02 	mul.w	lr, lr, r2
 8021da6:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8021daa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021dae:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021db2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021db6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021dba:	445a      	add	r2, fp
 8021dbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021dc0:	0a12      	lsrs	r2, r2, #8
 8021dc2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021dc6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021dca:	ea42 020c 	orr.w	r2, r2, ip
 8021dce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021dd0:	2cff      	cmp	r4, #255	; 0xff
 8021dd2:	d021      	beq.n	8021e18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8021dd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021dd6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021dda:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021ddc:	fb04 fc0c 	mul.w	ip, r4, ip
 8021de0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021de2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021de6:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8021dea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021dec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021df0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021df4:	fb04 fb0b 	mul.w	fp, r4, fp
 8021df8:	44e6      	add	lr, ip
 8021dfa:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8021dfe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e02:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021e06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e0a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021e0e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021e12:	ea4e 040b 	orr.w	r4, lr, fp
 8021e16:	940a      	str	r4, [sp, #40]	; 0x28
 8021e18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021e1a:	2cff      	cmp	r4, #255	; 0xff
 8021e1c:	d021      	beq.n	8021e62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021e1e:	9c07      	ldr	r4, [sp, #28]
 8021e20:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021e24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021e26:	fb04 fc0c 	mul.w	ip, r4, ip
 8021e2a:	9c07      	ldr	r4, [sp, #28]
 8021e2c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021e30:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8021e34:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021e36:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021e3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e3e:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e42:	44e6      	add	lr, ip
 8021e44:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8021e48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e4c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021e50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e54:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021e58:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021e5c:	ea4e 040b 	orr.w	r4, lr, fp
 8021e60:	9407      	str	r4, [sp, #28]
 8021e62:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e64:	2cff      	cmp	r4, #255	; 0xff
 8021e66:	d021      	beq.n	8021eac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8021e68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021e6a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021e6e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e70:	fb04 fc0c 	mul.w	ip, r4, ip
 8021e74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021e76:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021e7a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8021e7e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e80:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021e84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e88:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e8c:	44e6      	add	lr, ip
 8021e8e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8021e92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e96:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021e9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e9e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021ea2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021ea6:	ea4e 040b 	orr.w	r4, lr, fp
 8021eaa:	940b      	str	r4, [sp, #44]	; 0x2c
 8021eac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021eae:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021eb2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021eb6:	2bff      	cmp	r3, #255	; 0xff
 8021eb8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021ebc:	9c07      	ldr	r4, [sp, #28]
 8021ebe:	fb09 fc0c 	mul.w	ip, r9, ip
 8021ec2:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021ec6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021eca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021ecc:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021ed0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021ed4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021ed6:	fb0a cc0e 	mla	ip, sl, lr, ip
 8021eda:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021ede:	fb09 f90e 	mul.w	r9, r9, lr
 8021ee2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ee6:	fb01 9202 	mla	r2, r1, r2, r9
 8021eea:	9907      	ldr	r1, [sp, #28]
 8021eec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ef0:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8021ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021ef6:	fb00 220b 	mla	r2, r0, fp, r2
 8021efa:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8021efe:	fb0a 2a00 	mla	sl, sl, r0, r2
 8021f02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f06:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021f0a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021f0e:	fa5f f08c 	uxtb.w	r0, ip
 8021f12:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8021f16:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021f1a:	f000 80a2 	beq.w	8022062 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8021f1e:	43db      	mvns	r3, r3
 8021f20:	783a      	ldrb	r2, [r7, #0]
 8021f22:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021f26:	b2db      	uxtb	r3, r3
 8021f28:	fb02 fe03 	mul.w	lr, r2, r3
 8021f2c:	fb0a fa03 	mul.w	sl, sl, r3
 8021f30:	f10e 0201 	add.w	r2, lr, #1
 8021f34:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8021f38:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021f3c:	703a      	strb	r2, [r7, #0]
 8021f3e:	787a      	ldrb	r2, [r7, #1]
 8021f40:	fb02 f003 	mul.w	r0, r2, r3
 8021f44:	f10a 0301 	add.w	r3, sl, #1
 8021f48:	1c42      	adds	r2, r0, #1
 8021f4a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021f4e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021f52:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021f56:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021f5a:	707a      	strb	r2, [r7, #1]
 8021f5c:	f887 c002 	strb.w	ip, [r7, #2]
 8021f60:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021f62:	3703      	adds	r7, #3
 8021f64:	f108 38ff 	add.w	r8, r8, #4294967295
 8021f68:	441d      	add	r5, r3
 8021f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021f6c:	441e      	add	r6, r3
 8021f6e:	e6ab      	b.n	8021cc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021f70:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021f72:	441d      	add	r5, r3
 8021f74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021f76:	441e      	add	r6, r3
 8021f78:	9b06      	ldr	r3, [sp, #24]
 8021f7a:	3b01      	subs	r3, #1
 8021f7c:	9306      	str	r3, [sp, #24]
 8021f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f80:	3303      	adds	r3, #3
 8021f82:	9309      	str	r3, [sp, #36]	; 0x24
 8021f84:	e680      	b.n	8021c88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021f86:	d024      	beq.n	8021fd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021f88:	9b06      	ldr	r3, [sp, #24]
 8021f8a:	9825      	ldr	r0, [sp, #148]	; 0x94
 8021f8c:	3b01      	subs	r3, #1
 8021f8e:	fb00 5003 	mla	r0, r0, r3, r5
 8021f92:	1400      	asrs	r0, r0, #16
 8021f94:	f53f ae95 	bmi.w	8021cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021f98:	3901      	subs	r1, #1
 8021f9a:	4288      	cmp	r0, r1
 8021f9c:	f6bf ae91 	bge.w	8021cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021fa0:	9926      	ldr	r1, [sp, #152]	; 0x98
 8021fa2:	fb01 6303 	mla	r3, r1, r3, r6
 8021fa6:	141b      	asrs	r3, r3, #16
 8021fa8:	f53f ae8b 	bmi.w	8021cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021fac:	3a01      	subs	r2, #1
 8021fae:	4293      	cmp	r3, r2
 8021fb0:	f6bf ae87 	bge.w	8021cc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021fb6:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021fba:	1cdf      	adds	r7, r3, #3
 8021fbc:	f1bb 0f00 	cmp.w	fp, #0
 8021fc0:	dc6e      	bgt.n	80220a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8021fc2:	9b06      	ldr	r3, [sp, #24]
 8021fc4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021fca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021fce:	4423      	add	r3, r4
 8021fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8021fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	f340 81b0 	ble.w	802233a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8021fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021fde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021fe0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021fe4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021fe8:	eef0 6a62 	vmov.f32	s13, s5
 8021fec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021ff0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ff4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ff8:	ee16 5a90 	vmov	r5, s13
 8021ffc:	eef0 6a43 	vmov.f32	s13, s6
 8022000:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022004:	ee16 6a90 	vmov	r6, s13
 8022008:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802200c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022010:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022014:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022018:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802201c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022020:	ee12 2a90 	vmov	r2, s5
 8022024:	eef0 2a47 	vmov.f32	s5, s14
 8022028:	fb92 f3f3 	sdiv	r3, r2, r3
 802202c:	ee13 2a10 	vmov	r2, s6
 8022030:	9325      	str	r3, [sp, #148]	; 0x94
 8022032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022034:	eeb0 3a67 	vmov.f32	s6, s15
 8022038:	fb92 f3f3 	sdiv	r3, r2, r3
 802203c:	9326      	str	r3, [sp, #152]	; 0x98
 802203e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022040:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022042:	3b01      	subs	r3, #1
 8022044:	9315      	str	r3, [sp, #84]	; 0x54
 8022046:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022048:	bf08      	it	eq
 802204a:	4613      	moveq	r3, r2
 802204c:	9306      	str	r3, [sp, #24]
 802204e:	e60d      	b.n	8021c6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022050:	2800      	cmp	r0, #0
 8022052:	f43f ae7d 	beq.w	8021d50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022056:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802205a:	9307      	str	r3, [sp, #28]
 802205c:	0e1b      	lsrs	r3, r3, #24
 802205e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022060:	e676      	b.n	8021d50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022062:	7038      	strb	r0, [r7, #0]
 8022064:	7079      	strb	r1, [r7, #1]
 8022066:	e779      	b.n	8021f5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8022068:	f112 0901 	adds.w	r9, r2, #1
 802206c:	f53f af78 	bmi.w	8021f60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022070:	454b      	cmp	r3, r9
 8022072:	f6ff af75 	blt.w	8021f60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022076:	f11c 0901 	adds.w	r9, ip, #1
 802207a:	f53f af71 	bmi.w	8021f60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802207e:	45ce      	cmp	lr, r9
 8022080:	f6ff af6e 	blt.w	8021f60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022084:	b21b      	sxth	r3, r3
 8022086:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802208a:	fa0f f28e 	sxth.w	r2, lr
 802208e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8022092:	9200      	str	r2, [sp, #0]
 8022094:	4639      	mov	r1, r7
 8022096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022098:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802209a:	f7ff fca1 	bl	80219e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802209e:	e75f      	b.n	8021f60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80220a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80220a2:	1429      	asrs	r1, r5, #16
 80220a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80220a6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80220aa:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80220ae:	1433      	asrs	r3, r6, #16
 80220b0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80220b4:	fb0c 1303 	mla	r3, ip, r3, r1
 80220b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80220ba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80220be:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80220c2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80220c6:	2a00      	cmp	r2, #0
 80220c8:	f000 8129 	beq.w	802231e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80220cc:	684c      	ldr	r4, [r1, #4]
 80220ce:	940c      	str	r4, [sp, #48]	; 0x30
 80220d0:	0e24      	lsrs	r4, r4, #24
 80220d2:	9413      	str	r4, [sp, #76]	; 0x4c
 80220d4:	b198      	cbz	r0, 80220fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80220d6:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80220da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80220de:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80220e2:	f10c 0c04 	add.w	ip, ip, #4
 80220e6:	eb01 080c 	add.w	r8, r1, ip
 80220ea:	f851 100c 	ldr.w	r1, [r1, ip]
 80220ee:	9108      	str	r1, [sp, #32]
 80220f0:	0e09      	lsrs	r1, r1, #24
 80220f2:	9110      	str	r1, [sp, #64]	; 0x40
 80220f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80220f8:	910d      	str	r1, [sp, #52]	; 0x34
 80220fa:	0e09      	lsrs	r1, r1, #24
 80220fc:	9114      	str	r1, [sp, #80]	; 0x50
 80220fe:	b292      	uxth	r2, r2
 8022100:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022102:	b280      	uxth	r0, r0
 8022104:	fb02 f900 	mul.w	r9, r2, r0
 8022108:	0112      	lsls	r2, r2, #4
 802210a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802210e:	eba2 0809 	sub.w	r8, r2, r9
 8022112:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022116:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022118:	b280      	uxth	r0, r0
 802211a:	fa1f f888 	uxth.w	r8, r8
 802211e:	1a09      	subs	r1, r1, r0
 8022120:	fb08 f202 	mul.w	r2, r8, r2
 8022124:	b289      	uxth	r1, r1
 8022126:	fb01 220e 	mla	r2, r1, lr, r2
 802212a:	fb00 2204 	mla	r2, r0, r4, r2
 802212e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022130:	fb09 2204 	mla	r2, r9, r4, r2
 8022134:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022138:	2a00      	cmp	r2, #0
 802213a:	f000 80e8 	beq.w	802230e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 802213e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022142:	d01b      	beq.n	802217c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8022144:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022148:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802214c:	fb0e fa0a 	mul.w	sl, lr, sl
 8022150:	fb0e fe03 	mul.w	lr, lr, r3
 8022154:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022158:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802215c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022160:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022164:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022168:	4453      	add	r3, sl
 802216a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802216e:	0a1b      	lsrs	r3, r3, #8
 8022170:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022174:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022178:	ea43 030c 	orr.w	r3, r3, ip
 802217c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802217e:	2cff      	cmp	r4, #255	; 0xff
 8022180:	d021      	beq.n	80221c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8022182:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022184:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022188:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802218a:	fb04 fc0c 	mul.w	ip, r4, ip
 802218e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022190:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022194:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022198:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802219a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802219e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80221a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80221a6:	44e6      	add	lr, ip
 80221a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80221ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80221b0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80221b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80221b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80221bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80221c0:	ea4e 040a 	orr.w	r4, lr, sl
 80221c4:	940c      	str	r4, [sp, #48]	; 0x30
 80221c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80221c8:	2cff      	cmp	r4, #255	; 0xff
 80221ca:	d021      	beq.n	8022210 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80221cc:	9c08      	ldr	r4, [sp, #32]
 80221ce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80221d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80221d4:	fb04 fc0c 	mul.w	ip, r4, ip
 80221d8:	9c08      	ldr	r4, [sp, #32]
 80221da:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80221de:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80221e0:	fb04 fa0e 	mul.w	sl, r4, lr
 80221e4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80221e8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80221ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80221f0:	44e6      	add	lr, ip
 80221f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80221f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80221fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80221fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022202:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022206:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802220a:	ea4e 040a 	orr.w	r4, lr, sl
 802220e:	9408      	str	r4, [sp, #32]
 8022210:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022212:	2cff      	cmp	r4, #255	; 0xff
 8022214:	d021      	beq.n	802225a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8022216:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022218:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802221c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802221e:	fb04 fc0c 	mul.w	ip, r4, ip
 8022222:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022224:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022228:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802222c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802222e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022232:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022236:	fb04 fa0a 	mul.w	sl, r4, sl
 802223a:	44e6      	add	lr, ip
 802223c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022240:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022244:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022248:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802224c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022250:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022254:	ea4e 040a 	orr.w	r4, lr, sl
 8022258:	940d      	str	r4, [sp, #52]	; 0x34
 802225a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802225c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8022260:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022264:	2aff      	cmp	r2, #255	; 0xff
 8022266:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802226a:	9c08      	ldr	r4, [sp, #32]
 802226c:	fb08 fc0c 	mul.w	ip, r8, ip
 8022270:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022274:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022278:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802227a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802227e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022282:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022284:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022288:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802228c:	fb08 f80e 	mul.w	r8, r8, lr
 8022290:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022294:	fb01 8303 	mla	r3, r1, r3, r8
 8022298:	9908      	ldr	r1, [sp, #32]
 802229a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802229e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80222a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80222a4:	fb00 330a 	mla	r3, r0, sl, r3
 80222a8:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80222ac:	fb09 3e0e 	mla	lr, r9, lr, r3
 80222b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80222b4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80222b8:	ea4c 0c0e 	orr.w	ip, ip, lr
 80222bc:	fa5f f08c 	uxtb.w	r0, ip
 80222c0:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80222c4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80222c8:	d032      	beq.n	8022330 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80222ca:	43d2      	mvns	r2, r2
 80222cc:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80222d0:	b2d2      	uxtb	r2, r2
 80222d2:	fb0e fe02 	mul.w	lr, lr, r2
 80222d6:	f10e 0301 	add.w	r3, lr, #1
 80222da:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80222de:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80222e2:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80222e6:	4350      	muls	r0, r2
 80222e8:	f807 3c03 	strb.w	r3, [r7, #-3]
 80222ec:	1c43      	adds	r3, r0, #1
 80222ee:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80222f2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80222f6:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80222fa:	4353      	muls	r3, r2
 80222fc:	f807 1c02 	strb.w	r1, [r7, #-2]
 8022300:	1c5a      	adds	r2, r3, #1
 8022302:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022306:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 802230a:	f807 cc01 	strb.w	ip, [r7, #-1]
 802230e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022310:	3703      	adds	r7, #3
 8022312:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022316:	441d      	add	r5, r3
 8022318:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802231a:	441e      	add	r6, r3
 802231c:	e64e      	b.n	8021fbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802231e:	2800      	cmp	r0, #0
 8022320:	f43f aeed 	beq.w	80220fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022324:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8022328:	9108      	str	r1, [sp, #32]
 802232a:	0e09      	lsrs	r1, r1, #24
 802232c:	9110      	str	r1, [sp, #64]	; 0x40
 802232e:	e6e6      	b.n	80220fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022330:	f807 0c03 	strb.w	r0, [r7, #-3]
 8022334:	f807 1c02 	strb.w	r1, [r7, #-2]
 8022338:	e7e7      	b.n	802230a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 802233a:	b019      	add	sp, #100	; 0x64
 802233c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022340 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8022340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022344:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8022348:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802234c:	2c00      	cmp	r4, #0
 802234e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022352:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8022356:	fb00 4e03 	mla	lr, r0, r3, r4
 802235a:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 802235e:	f2c0 80b8 	blt.w	80224d2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022362:	45a1      	cmp	r9, r4
 8022364:	f340 80b5 	ble.w	80224d2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022368:	2800      	cmp	r0, #0
 802236a:	f2c0 80b2 	blt.w	80224d2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802236e:	4580      	cmp	r8, r0
 8022370:	f340 80af 	ble.w	80224d2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8022374:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8022378:	f01e 0f01 	tst.w	lr, #1
 802237c:	5d56      	ldrb	r6, [r2, r5]
 802237e:	bf0c      	ite	eq
 8022380:	f006 060f 	andeq.w	r6, r6, #15
 8022384:	1136      	asrne	r6, r6, #4
 8022386:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802238a:	b2f6      	uxtb	r6, r6
 802238c:	f114 0a01 	adds.w	sl, r4, #1
 8022390:	f100 80a1 	bmi.w	80224d6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022394:	45d1      	cmp	r9, sl
 8022396:	f340 809e 	ble.w	80224d6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802239a:	2800      	cmp	r0, #0
 802239c:	f2c0 809b 	blt.w	80224d6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80223a0:	4580      	cmp	r8, r0
 80223a2:	f340 8098 	ble.w	80224d6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80223a6:	2f00      	cmp	r7, #0
 80223a8:	f000 8097 	beq.w	80224da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80223ac:	f10e 0b01 	add.w	fp, lr, #1
 80223b0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80223b4:	f01b 0f01 	tst.w	fp, #1
 80223b8:	5d55      	ldrb	r5, [r2, r5]
 80223ba:	bf0c      	ite	eq
 80223bc:	f005 050f 	andeq.w	r5, r5, #15
 80223c0:	112d      	asrne	r5, r5, #4
 80223c2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80223c6:	b2ed      	uxtb	r5, r5
 80223c8:	f1bc 0f00 	cmp.w	ip, #0
 80223cc:	f000 8089 	beq.w	80224e2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80223d0:	2c00      	cmp	r4, #0
 80223d2:	f100 0001 	add.w	r0, r0, #1
 80223d6:	f2c0 8082 	blt.w	80224de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80223da:	45a1      	cmp	r9, r4
 80223dc:	dd7f      	ble.n	80224de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80223de:	2800      	cmp	r0, #0
 80223e0:	db7d      	blt.n	80224de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80223e2:	4580      	cmp	r8, r0
 80223e4:	dd7b      	ble.n	80224de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80223e6:	eb03 0b0e 	add.w	fp, r3, lr
 80223ea:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80223ee:	f01b 0f01 	tst.w	fp, #1
 80223f2:	5d14      	ldrb	r4, [r2, r4]
 80223f4:	bf0c      	ite	eq
 80223f6:	f004 040f 	andeq.w	r4, r4, #15
 80223fa:	1124      	asrne	r4, r4, #4
 80223fc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022400:	b2e4      	uxtb	r4, r4
 8022402:	f1ba 0f00 	cmp.w	sl, #0
 8022406:	db6f      	blt.n	80224e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022408:	45d1      	cmp	r9, sl
 802240a:	dd6d      	ble.n	80224e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802240c:	2800      	cmp	r0, #0
 802240e:	db6b      	blt.n	80224e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022410:	4580      	cmp	r8, r0
 8022412:	dd69      	ble.n	80224e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022414:	2f00      	cmp	r7, #0
 8022416:	d069      	beq.n	80224ec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8022418:	3301      	adds	r3, #1
 802241a:	449e      	add	lr, r3
 802241c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022420:	f01e 0f01 	tst.w	lr, #1
 8022424:	5cd0      	ldrb	r0, [r2, r3]
 8022426:	bf0c      	ite	eq
 8022428:	f000 000f 	andeq.w	r0, r0, #15
 802242c:	1100      	asrne	r0, r0, #4
 802242e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022432:	b2c3      	uxtb	r3, r0
 8022434:	b2ba      	uxth	r2, r7
 8022436:	fa1f fc8c 	uxth.w	ip, ip
 802243a:	fb02 f00c 	mul.w	r0, r2, ip
 802243e:	0112      	lsls	r2, r2, #4
 8022440:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8022444:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8022448:	1a12      	subs	r2, r2, r0
 802244a:	fa1f fc8c 	uxth.w	ip, ip
 802244e:	b292      	uxth	r2, r2
 8022450:	eba7 070c 	sub.w	r7, r7, ip
 8022454:	436a      	muls	r2, r5
 8022456:	b2bf      	uxth	r7, r7
 8022458:	fb06 2207 	mla	r2, r6, r7, r2
 802245c:	fb0c 2404 	mla	r4, ip, r4, r2
 8022460:	fb00 4303 	mla	r3, r0, r3, r4
 8022464:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022468:	b38b      	cbz	r3, 80224ce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802246a:	4a21      	ldr	r2, [pc, #132]	; (80224f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 802246c:	6814      	ldr	r4, [r2, #0]
 802246e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8022472:	b2e5      	uxtb	r5, r4
 8022474:	4353      	muls	r3, r2
 8022476:	1c5a      	adds	r2, r3, #1
 8022478:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802247c:	1212      	asrs	r2, r2, #8
 802247e:	b290      	uxth	r0, r2
 8022480:	43d2      	mvns	r2, r2
 8022482:	fb15 f500 	smulbb	r5, r5, r0
 8022486:	b2d3      	uxtb	r3, r2
 8022488:	780a      	ldrb	r2, [r1, #0]
 802248a:	fb02 5203 	mla	r2, r2, r3, r5
 802248e:	b292      	uxth	r2, r2
 8022490:	1c55      	adds	r5, r2, #1
 8022492:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022496:	784d      	ldrb	r5, [r1, #1]
 8022498:	fb15 f503 	smulbb	r5, r5, r3
 802249c:	1212      	asrs	r2, r2, #8
 802249e:	700a      	strb	r2, [r1, #0]
 80224a0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80224a4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80224a8:	fb02 5200 	mla	r2, r2, r0, r5
 80224ac:	b292      	uxth	r2, r2
 80224ae:	1c55      	adds	r5, r2, #1
 80224b0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80224b4:	1212      	asrs	r2, r2, #8
 80224b6:	704a      	strb	r2, [r1, #1]
 80224b8:	788a      	ldrb	r2, [r1, #2]
 80224ba:	fb12 f303 	smulbb	r3, r2, r3
 80224be:	fb04 3300 	mla	r3, r4, r0, r3
 80224c2:	b29b      	uxth	r3, r3
 80224c4:	1c5a      	adds	r2, r3, #1
 80224c6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80224ca:	121b      	asrs	r3, r3, #8
 80224cc:	708b      	strb	r3, [r1, #2]
 80224ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224d2:	2600      	movs	r6, #0
 80224d4:	e75a      	b.n	802238c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80224d6:	2500      	movs	r5, #0
 80224d8:	e776      	b.n	80223c8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80224da:	463d      	mov	r5, r7
 80224dc:	e774      	b.n	80223c8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80224de:	2400      	movs	r4, #0
 80224e0:	e78f      	b.n	8022402 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80224e2:	4663      	mov	r3, ip
 80224e4:	4664      	mov	r4, ip
 80224e6:	e7a5      	b.n	8022434 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80224e8:	2300      	movs	r3, #0
 80224ea:	e7a3      	b.n	8022434 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80224ec:	463b      	mov	r3, r7
 80224ee:	e7a1      	b.n	8022434 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80224f0:	2400feec 	.word	0x2400feec

080224f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224f8:	b097      	sub	sp, #92	; 0x5c
 80224fa:	9214      	str	r2, [sp, #80]	; 0x50
 80224fc:	9309      	str	r3, [sp, #36]	; 0x24
 80224fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022500:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8022504:	9015      	str	r0, [sp, #84]	; 0x54
 8022506:	910c      	str	r1, [sp, #48]	; 0x30
 8022508:	6850      	ldr	r0, [r2, #4]
 802250a:	930e      	str	r3, [sp, #56]	; 0x38
 802250c:	6812      	ldr	r2, [r2, #0]
 802250e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8022512:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8022516:	fb00 1303 	mla	r3, r0, r3, r1
 802251a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802251e:	eb02 0a03 	add.w	sl, r2, r3
 8022522:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022524:	689b      	ldr	r3, [r3, #8]
 8022526:	3301      	adds	r3, #1
 8022528:	f023 0301 	bic.w	r3, r3, #1
 802252c:	930f      	str	r3, [sp, #60]	; 0x3c
 802252e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022530:	681f      	ldr	r7, [r3, #0]
 8022532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022534:	2b00      	cmp	r3, #0
 8022536:	dc03      	bgt.n	8022540 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022538:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802253a:	2b00      	cmp	r3, #0
 802253c:	f340 8247 	ble.w	80229ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8022540:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022542:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022546:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802254a:	1e48      	subs	r0, r1, #1
 802254c:	f102 3cff 	add.w	ip, r2, #4294967295
 8022550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022552:	2b00      	cmp	r3, #0
 8022554:	f340 80e5 	ble.w	8022722 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8022558:	ea5f 4e25 	movs.w	lr, r5, asr #16
 802255c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022560:	d406      	bmi.n	8022570 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022562:	4586      	cmp	lr, r0
 8022564:	da04      	bge.n	8022570 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022566:	2b00      	cmp	r3, #0
 8022568:	db02      	blt.n	8022570 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802256a:	4563      	cmp	r3, ip
 802256c:	f2c0 80da 	blt.w	8022724 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8022570:	f11e 0e01 	adds.w	lr, lr, #1
 8022574:	f100 80cb 	bmi.w	802270e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8022578:	4571      	cmp	r1, lr
 802257a:	f2c0 80c8 	blt.w	802270e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802257e:	3301      	adds	r3, #1
 8022580:	f100 80c5 	bmi.w	802270e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8022584:	429a      	cmp	r2, r3
 8022586:	f2c0 80c2 	blt.w	802270e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802258a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802258c:	46d0      	mov	r8, sl
 802258e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8022592:	930d      	str	r3, [sp, #52]	; 0x34
 8022594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022596:	2b00      	cmp	r3, #0
 8022598:	f340 80e3 	ble.w	8022762 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802259c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802259e:	1430      	asrs	r0, r6, #16
 80225a0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80225a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80225a8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80225ac:	142b      	asrs	r3, r5, #16
 80225ae:	f100 812e 	bmi.w	802280e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80225b2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80225b6:	455b      	cmp	r3, fp
 80225b8:	f280 8129 	bge.w	802280e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80225bc:	2800      	cmp	r0, #0
 80225be:	f2c0 8126 	blt.w	802280e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80225c2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80225c6:	4558      	cmp	r0, fp
 80225c8:	f280 8121 	bge.w	802280e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80225cc:	fb00 3309 	mla	r3, r0, r9, r3
 80225d0:	0858      	lsrs	r0, r3, #1
 80225d2:	07dc      	lsls	r4, r3, #31
 80225d4:	f817 c000 	ldrb.w	ip, [r7, r0]
 80225d8:	bf54      	ite	pl
 80225da:	f00c 0c0f 	andpl.w	ip, ip, #15
 80225de:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80225e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80225e6:	fa5f fc8c 	uxtb.w	ip, ip
 80225ea:	2a00      	cmp	r2, #0
 80225ec:	f000 80fe 	beq.w	80227ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80225f0:	1c58      	adds	r0, r3, #1
 80225f2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80225f6:	07c0      	lsls	r0, r0, #31
 80225f8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80225fc:	bf54      	ite	pl
 80225fe:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022602:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022606:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802260a:	fa5f f08e 	uxtb.w	r0, lr
 802260e:	9010      	str	r0, [sp, #64]	; 0x40
 8022610:	b1d9      	cbz	r1, 802264a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022612:	444b      	add	r3, r9
 8022614:	0858      	lsrs	r0, r3, #1
 8022616:	07dc      	lsls	r4, r3, #31
 8022618:	f103 0301 	add.w	r3, r3, #1
 802261c:	5c38      	ldrb	r0, [r7, r0]
 802261e:	bf54      	ite	pl
 8022620:	f000 000f 	andpl.w	r0, r0, #15
 8022624:	1100      	asrmi	r0, r0, #4
 8022626:	07dc      	lsls	r4, r3, #31
 8022628:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802262c:	b2c0      	uxtb	r0, r0
 802262e:	900a      	str	r0, [sp, #40]	; 0x28
 8022630:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8022634:	f817 e000 	ldrb.w	lr, [r7, r0]
 8022638:	bf54      	ite	pl
 802263a:	f00e 030f 	andpl.w	r3, lr, #15
 802263e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8022642:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022646:	b2db      	uxtb	r3, r3
 8022648:	9311      	str	r3, [sp, #68]	; 0x44
 802264a:	b292      	uxth	r2, r2
 802264c:	b289      	uxth	r1, r1
 802264e:	0113      	lsls	r3, r2, #4
 8022650:	fb02 f001 	mul.w	r0, r2, r1
 8022654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022656:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802265a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802265e:	1a1b      	subs	r3, r3, r0
 8022660:	b289      	uxth	r1, r1
 8022662:	b29b      	uxth	r3, r3
 8022664:	ebae 0e01 	sub.w	lr, lr, r1
 8022668:	4353      	muls	r3, r2
 802266a:	fa1f fe8e 	uxth.w	lr, lr
 802266e:	fb0c 320e 	mla	r2, ip, lr, r3
 8022672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022674:	fb01 2203 	mla	r2, r1, r3, r2
 8022678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802267a:	fb00 2203 	mla	r2, r0, r3, r2
 802267e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022682:	2a00      	cmp	r2, #0
 8022684:	d039      	beq.n	80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022686:	4bc7      	ldr	r3, [pc, #796]	; (80229a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8022688:	6819      	ldr	r1, [r3, #0]
 802268a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802268c:	fa5f fc81 	uxtb.w	ip, r1
 8022690:	435a      	muls	r2, r3
 8022692:	1c53      	adds	r3, r2, #1
 8022694:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022698:	1212      	asrs	r2, r2, #8
 802269a:	b290      	uxth	r0, r2
 802269c:	43d2      	mvns	r2, r2
 802269e:	fb1c fc00 	smulbb	ip, ip, r0
 80226a2:	b2d3      	uxtb	r3, r2
 80226a4:	f898 2000 	ldrb.w	r2, [r8]
 80226a8:	fb02 c203 	mla	r2, r2, r3, ip
 80226ac:	b292      	uxth	r2, r2
 80226ae:	f102 0c01 	add.w	ip, r2, #1
 80226b2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80226b6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80226ba:	fb1c fc03 	smulbb	ip, ip, r3
 80226be:	1212      	asrs	r2, r2, #8
 80226c0:	f888 2000 	strb.w	r2, [r8]
 80226c4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80226c8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80226cc:	fb02 c200 	mla	r2, r2, r0, ip
 80226d0:	b292      	uxth	r2, r2
 80226d2:	f102 0c01 	add.w	ip, r2, #1
 80226d6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80226da:	1212      	asrs	r2, r2, #8
 80226dc:	f888 2001 	strb.w	r2, [r8, #1]
 80226e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80226e4:	fb12 f303 	smulbb	r3, r2, r3
 80226e8:	fb01 3300 	mla	r3, r1, r0, r3
 80226ec:	b29b      	uxth	r3, r3
 80226ee:	1c5a      	adds	r2, r3, #1
 80226f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80226f4:	121b      	asrs	r3, r3, #8
 80226f6:	f888 3002 	strb.w	r3, [r8, #2]
 80226fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80226fc:	f108 0803 	add.w	r8, r8, #3
 8022700:	441d      	add	r5, r3
 8022702:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022704:	441e      	add	r6, r3
 8022706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022708:	3b01      	subs	r3, #1
 802270a:	930d      	str	r3, [sp, #52]	; 0x34
 802270c:	e742      	b.n	8022594 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802270e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022710:	f10a 0a03 	add.w	sl, sl, #3
 8022714:	441d      	add	r5, r3
 8022716:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022718:	441e      	add	r6, r3
 802271a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802271c:	3b01      	subs	r3, #1
 802271e:	9309      	str	r3, [sp, #36]	; 0x24
 8022720:	e716      	b.n	8022550 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8022722:	d024      	beq.n	802276e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8022724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022726:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022728:	3b01      	subs	r3, #1
 802272a:	fb00 5003 	mla	r0, r0, r3, r5
 802272e:	1400      	asrs	r0, r0, #16
 8022730:	f53f af2b 	bmi.w	802258a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022734:	3901      	subs	r1, #1
 8022736:	4288      	cmp	r0, r1
 8022738:	f6bf af27 	bge.w	802258a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802273c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802273e:	fb01 6303 	mla	r3, r1, r3, r6
 8022742:	141b      	asrs	r3, r3, #16
 8022744:	f53f af21 	bmi.w	802258a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022748:	3a01      	subs	r2, #1
 802274a:	4293      	cmp	r3, r2
 802274c:	f6bf af1d 	bge.w	802258a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022750:	f10a 0e03 	add.w	lr, sl, #3
 8022754:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8022758:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802275c:	f1b8 0f00 	cmp.w	r8, #0
 8022760:	dc76      	bgt.n	8022850 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8022762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022764:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022768:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802276c:	44a2      	add	sl, r4
 802276e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022770:	2b00      	cmp	r3, #0
 8022772:	f340 812c 	ble.w	80229ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8022776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802277a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802277c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022780:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022784:	eef0 6a62 	vmov.f32	s13, s5
 8022788:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802278c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022790:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022794:	ee16 5a90 	vmov	r5, s13
 8022798:	eef0 6a43 	vmov.f32	s13, s6
 802279c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80227a0:	ee16 6a90 	vmov	r6, s13
 80227a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80227a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80227ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 80227b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80227b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80227b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80227bc:	ee12 2a90 	vmov	r2, s5
 80227c0:	eef0 2a47 	vmov.f32	s5, s14
 80227c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80227c8:	ee13 2a10 	vmov	r2, s6
 80227cc:	9323      	str	r3, [sp, #140]	; 0x8c
 80227ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80227d0:	eeb0 3a67 	vmov.f32	s6, s15
 80227d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80227d8:	9324      	str	r3, [sp, #144]	; 0x90
 80227da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80227dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80227de:	3b01      	subs	r3, #1
 80227e0:	930c      	str	r3, [sp, #48]	; 0x30
 80227e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80227e4:	bf08      	it	eq
 80227e6:	4613      	moveq	r3, r2
 80227e8:	9309      	str	r3, [sp, #36]	; 0x24
 80227ea:	e6a2      	b.n	8022532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80227ec:	2900      	cmp	r1, #0
 80227ee:	f43f af2c 	beq.w	802264a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80227f2:	eb09 0003 	add.w	r0, r9, r3
 80227f6:	0843      	lsrs	r3, r0, #1
 80227f8:	07c0      	lsls	r0, r0, #31
 80227fa:	5cfb      	ldrb	r3, [r7, r3]
 80227fc:	bf54      	ite	pl
 80227fe:	f003 030f 	andpl.w	r3, r3, #15
 8022802:	111b      	asrmi	r3, r3, #4
 8022804:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022808:	b2db      	uxtb	r3, r3
 802280a:	930a      	str	r3, [sp, #40]	; 0x28
 802280c:	e71d      	b.n	802264a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802280e:	f113 0b01 	adds.w	fp, r3, #1
 8022812:	f53f af72 	bmi.w	80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022816:	45dc      	cmp	ip, fp
 8022818:	f6ff af6f 	blt.w	80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802281c:	f110 0b01 	adds.w	fp, r0, #1
 8022820:	f53f af6b 	bmi.w	80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022824:	45de      	cmp	lr, fp
 8022826:	f6ff af68 	blt.w	80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802282a:	9302      	str	r3, [sp, #8]
 802282c:	fa0f f38e 	sxth.w	r3, lr
 8022830:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022832:	9301      	str	r3, [sp, #4]
 8022834:	fa0f f38c 	sxth.w	r3, ip
 8022838:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802283c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022840:	9300      	str	r3, [sp, #0]
 8022842:	463a      	mov	r2, r7
 8022844:	464b      	mov	r3, r9
 8022846:	4641      	mov	r1, r8
 8022848:	9815      	ldr	r0, [sp, #84]	; 0x54
 802284a:	f7ff fd79 	bl	8022340 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802284e:	e754      	b.n	80226fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022850:	142a      	asrs	r2, r5, #16
 8022852:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022856:	1433      	asrs	r3, r6, #16
 8022858:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802285c:	fb09 2303 	mla	r3, r9, r3, r2
 8022860:	085a      	lsrs	r2, r3, #1
 8022862:	07dc      	lsls	r4, r3, #31
 8022864:	5cba      	ldrb	r2, [r7, r2]
 8022866:	bf54      	ite	pl
 8022868:	f002 020f 	andpl.w	r2, r2, #15
 802286c:	1112      	asrmi	r2, r2, #4
 802286e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022872:	b2d2      	uxtb	r2, r2
 8022874:	2900      	cmp	r1, #0
 8022876:	f000 8097 	beq.w	80229a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802287a:	f103 0b01 	add.w	fp, r3, #1
 802287e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8022882:	f01b 0f01 	tst.w	fp, #1
 8022886:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802288a:	bf0c      	ite	eq
 802288c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022890:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022894:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022898:	fa5f f48c 	uxtb.w	r4, ip
 802289c:	9412      	str	r4, [sp, #72]	; 0x48
 802289e:	b300      	cbz	r0, 80228e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80228a0:	444b      	add	r3, r9
 80228a2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80228a6:	07dc      	lsls	r4, r3, #31
 80228a8:	f103 0301 	add.w	r3, r3, #1
 80228ac:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80228b0:	bf54      	ite	pl
 80228b2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80228b6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80228ba:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80228be:	fa5f f48c 	uxtb.w	r4, ip
 80228c2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80228c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80228c8:	07dc      	lsls	r4, r3, #31
 80228ca:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80228ce:	bf54      	ite	pl
 80228d0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80228d4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80228d8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80228dc:	fa5f f38c 	uxtb.w	r3, ip
 80228e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80228e2:	b289      	uxth	r1, r1
 80228e4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80228e6:	b280      	uxth	r0, r0
 80228e8:	fb01 f300 	mul.w	r3, r1, r0
 80228ec:	0109      	lsls	r1, r1, #4
 80228ee:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80228f2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80228f6:	1ac9      	subs	r1, r1, r3
 80228f8:	b280      	uxth	r0, r0
 80228fa:	b289      	uxth	r1, r1
 80228fc:	ebac 0c00 	sub.w	ip, ip, r0
 8022900:	4361      	muls	r1, r4
 8022902:	fa1f fc8c 	uxth.w	ip, ip
 8022906:	fb02 120c 	mla	r2, r2, ip, r1
 802290a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802290c:	fb00 2001 	mla	r0, r0, r1, r2
 8022910:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022912:	fb03 0302 	mla	r3, r3, r2, r0
 8022916:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802291a:	2b00      	cmp	r3, #0
 802291c:	d039      	beq.n	8022992 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802291e:	4a21      	ldr	r2, [pc, #132]	; (80229a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8022920:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022924:	6810      	ldr	r0, [r2, #0]
 8022926:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022928:	fa5f fc80 	uxtb.w	ip, r0
 802292c:	4353      	muls	r3, r2
 802292e:	1c5a      	adds	r2, r3, #1
 8022930:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022934:	121b      	asrs	r3, r3, #8
 8022936:	b29a      	uxth	r2, r3
 8022938:	43db      	mvns	r3, r3
 802293a:	fb1c fc02 	smulbb	ip, ip, r2
 802293e:	b2db      	uxtb	r3, r3
 8022940:	fb01 c103 	mla	r1, r1, r3, ip
 8022944:	b289      	uxth	r1, r1
 8022946:	f101 0c01 	add.w	ip, r1, #1
 802294a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802294e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022952:	fb1c fc03 	smulbb	ip, ip, r3
 8022956:	1209      	asrs	r1, r1, #8
 8022958:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802295c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022960:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022964:	fb01 c102 	mla	r1, r1, r2, ip
 8022968:	b289      	uxth	r1, r1
 802296a:	f101 0c01 	add.w	ip, r1, #1
 802296e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022972:	1209      	asrs	r1, r1, #8
 8022974:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022978:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802297c:	fb11 f303 	smulbb	r3, r1, r3
 8022980:	fb00 3002 	mla	r0, r0, r2, r3
 8022984:	b280      	uxth	r0, r0
 8022986:	1c42      	adds	r2, r0, #1
 8022988:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802298c:	1200      	asrs	r0, r0, #8
 802298e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8022992:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022994:	f10e 0e03 	add.w	lr, lr, #3
 8022998:	f108 38ff 	add.w	r8, r8, #4294967295
 802299c:	441d      	add	r5, r3
 802299e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229a0:	441e      	add	r6, r3
 80229a2:	e6db      	b.n	802275c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80229a4:	2400feec 	.word	0x2400feec
 80229a8:	2800      	cmp	r0, #0
 80229aa:	d09a      	beq.n	80228e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80229ac:	444b      	add	r3, r9
 80229ae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80229b2:	07db      	lsls	r3, r3, #31
 80229b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80229b8:	bf54      	ite	pl
 80229ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 80229be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80229c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80229c6:	fa5f f38c 	uxtb.w	r3, ip
 80229ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80229cc:	e789      	b.n	80228e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80229ce:	b017      	add	sp, #92	; 0x5c
 80229d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080229d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80229d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229d8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 80229dc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80229e0:	2d00      	cmp	r5, #0
 80229e2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80229e6:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80229ea:	fb04 5e03 	mla	lr, r4, r3, r5
 80229ee:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80229f2:	f2c0 80b1 	blt.w	8022b58 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80229f6:	45a9      	cmp	r9, r5
 80229f8:	f340 80ae 	ble.w	8022b58 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80229fc:	2c00      	cmp	r4, #0
 80229fe:	f2c0 80ab 	blt.w	8022b58 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022a02:	45a0      	cmp	r8, r4
 8022a04:	f340 80a8 	ble.w	8022b58 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022a08:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8022a0c:	f01e 0f01 	tst.w	lr, #1
 8022a10:	5d97      	ldrb	r7, [r2, r6]
 8022a12:	bf0c      	ite	eq
 8022a14:	f007 070f 	andeq.w	r7, r7, #15
 8022a18:	113f      	asrne	r7, r7, #4
 8022a1a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8022a1e:	b2ff      	uxtb	r7, r7
 8022a20:	f115 0a01 	adds.w	sl, r5, #1
 8022a24:	f100 809a 	bmi.w	8022b5c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022a28:	45d1      	cmp	r9, sl
 8022a2a:	f340 8097 	ble.w	8022b5c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022a2e:	2c00      	cmp	r4, #0
 8022a30:	f2c0 8094 	blt.w	8022b5c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022a34:	45a0      	cmp	r8, r4
 8022a36:	f340 8091 	ble.w	8022b5c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022a3a:	2800      	cmp	r0, #0
 8022a3c:	f000 8090 	beq.w	8022b60 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8022a40:	f10e 0b01 	add.w	fp, lr, #1
 8022a44:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8022a48:	f01b 0f01 	tst.w	fp, #1
 8022a4c:	5d96      	ldrb	r6, [r2, r6]
 8022a4e:	bf0c      	ite	eq
 8022a50:	f006 060f 	andeq.w	r6, r6, #15
 8022a54:	1136      	asrne	r6, r6, #4
 8022a56:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022a5a:	b2f6      	uxtb	r6, r6
 8022a5c:	f1bc 0f00 	cmp.w	ip, #0
 8022a60:	f000 8082 	beq.w	8022b68 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8022a64:	2d00      	cmp	r5, #0
 8022a66:	f104 0401 	add.w	r4, r4, #1
 8022a6a:	db7b      	blt.n	8022b64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022a6c:	45a9      	cmp	r9, r5
 8022a6e:	dd79      	ble.n	8022b64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022a70:	2c00      	cmp	r4, #0
 8022a72:	db77      	blt.n	8022b64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022a74:	45a0      	cmp	r8, r4
 8022a76:	dd75      	ble.n	8022b64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022a78:	eb03 0b0e 	add.w	fp, r3, lr
 8022a7c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8022a80:	f01b 0f01 	tst.w	fp, #1
 8022a84:	5d55      	ldrb	r5, [r2, r5]
 8022a86:	bf0c      	ite	eq
 8022a88:	f005 050f 	andeq.w	r5, r5, #15
 8022a8c:	112d      	asrne	r5, r5, #4
 8022a8e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022a92:	b2ed      	uxtb	r5, r5
 8022a94:	f1ba 0f00 	cmp.w	sl, #0
 8022a98:	db69      	blt.n	8022b6e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022a9a:	45d1      	cmp	r9, sl
 8022a9c:	dd67      	ble.n	8022b6e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022a9e:	2c00      	cmp	r4, #0
 8022aa0:	db65      	blt.n	8022b6e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022aa2:	45a0      	cmp	r8, r4
 8022aa4:	dd63      	ble.n	8022b6e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022aa6:	2800      	cmp	r0, #0
 8022aa8:	d063      	beq.n	8022b72 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8022aaa:	3301      	adds	r3, #1
 8022aac:	449e      	add	lr, r3
 8022aae:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022ab2:	f01e 0f01 	tst.w	lr, #1
 8022ab6:	5cd4      	ldrb	r4, [r2, r3]
 8022ab8:	bf0c      	ite	eq
 8022aba:	f004 040f 	andeq.w	r4, r4, #15
 8022abe:	1124      	asrne	r4, r4, #4
 8022ac0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022ac4:	b2e3      	uxtb	r3, r4
 8022ac6:	b282      	uxth	r2, r0
 8022ac8:	fa1f fc8c 	uxth.w	ip, ip
 8022acc:	fb02 f40c 	mul.w	r4, r2, ip
 8022ad0:	0112      	lsls	r2, r2, #4
 8022ad2:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8022ad6:	fa1f f08c 	uxth.w	r0, ip
 8022ada:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022ade:	1b12      	subs	r2, r2, r4
 8022ae0:	ebac 0c00 	sub.w	ip, ip, r0
 8022ae4:	b292      	uxth	r2, r2
 8022ae6:	fa1f fc8c 	uxth.w	ip, ip
 8022aea:	4372      	muls	r2, r6
 8022aec:	fb07 220c 	mla	r2, r7, ip, r2
 8022af0:	fb00 2005 	mla	r0, r0, r5, r2
 8022af4:	fb04 0303 	mla	r3, r4, r3, r0
 8022af8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022afc:	b353      	cbz	r3, 8022b54 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8022afe:	4a1e      	ldr	r2, [pc, #120]	; (8022b78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8022b00:	7808      	ldrb	r0, [r1, #0]
 8022b02:	6814      	ldr	r4, [r2, #0]
 8022b04:	b29a      	uxth	r2, r3
 8022b06:	43db      	mvns	r3, r3
 8022b08:	b2e5      	uxtb	r5, r4
 8022b0a:	b2db      	uxtb	r3, r3
 8022b0c:	fb15 f502 	smulbb	r5, r5, r2
 8022b10:	fb00 5003 	mla	r0, r0, r3, r5
 8022b14:	b280      	uxth	r0, r0
 8022b16:	1c45      	adds	r5, r0, #1
 8022b18:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022b1c:	784d      	ldrb	r5, [r1, #1]
 8022b1e:	fb15 f503 	smulbb	r5, r5, r3
 8022b22:	1200      	asrs	r0, r0, #8
 8022b24:	7008      	strb	r0, [r1, #0]
 8022b26:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022b2a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022b2e:	fb00 5002 	mla	r0, r0, r2, r5
 8022b32:	b280      	uxth	r0, r0
 8022b34:	1c45      	adds	r5, r0, #1
 8022b36:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022b3a:	1200      	asrs	r0, r0, #8
 8022b3c:	7048      	strb	r0, [r1, #1]
 8022b3e:	7888      	ldrb	r0, [r1, #2]
 8022b40:	fb10 f303 	smulbb	r3, r0, r3
 8022b44:	fb04 3202 	mla	r2, r4, r2, r3
 8022b48:	b292      	uxth	r2, r2
 8022b4a:	1c53      	adds	r3, r2, #1
 8022b4c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022b50:	1212      	asrs	r2, r2, #8
 8022b52:	708a      	strb	r2, [r1, #2]
 8022b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b58:	2700      	movs	r7, #0
 8022b5a:	e761      	b.n	8022a20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8022b5c:	2600      	movs	r6, #0
 8022b5e:	e77d      	b.n	8022a5c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8022b60:	4606      	mov	r6, r0
 8022b62:	e77b      	b.n	8022a5c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8022b64:	2500      	movs	r5, #0
 8022b66:	e795      	b.n	8022a94 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8022b68:	4663      	mov	r3, ip
 8022b6a:	4665      	mov	r5, ip
 8022b6c:	e7ab      	b.n	8022ac6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022b6e:	2300      	movs	r3, #0
 8022b70:	e7a9      	b.n	8022ac6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022b72:	4603      	mov	r3, r0
 8022b74:	e7a7      	b.n	8022ac6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022b76:	bf00      	nop
 8022b78:	2400feec 	.word	0x2400feec

08022b7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b80:	b093      	sub	sp, #76	; 0x4c
 8022b82:	461c      	mov	r4, r3
 8022b84:	920c      	str	r2, [sp, #48]	; 0x30
 8022b86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022b88:	9011      	str	r0, [sp, #68]	; 0x44
 8022b8a:	9107      	str	r1, [sp, #28]
 8022b8c:	6850      	ldr	r0, [r2, #4]
 8022b8e:	6812      	ldr	r2, [r2, #0]
 8022b90:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022b94:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8022b98:	fb00 1303 	mla	r3, r0, r3, r1
 8022b9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ba0:	eb02 0b03 	add.w	fp, r2, r3
 8022ba4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022ba6:	689b      	ldr	r3, [r3, #8]
 8022ba8:	3301      	adds	r3, #1
 8022baa:	f023 0301 	bic.w	r3, r3, #1
 8022bae:	9309      	str	r3, [sp, #36]	; 0x24
 8022bb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022bb2:	f8d3 8000 	ldr.w	r8, [r3]
 8022bb6:	9b07      	ldr	r3, [sp, #28]
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	dc03      	bgt.n	8022bc4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	f340 822b 	ble.w	802301a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022bc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022bc6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022bca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022bce:	1e48      	subs	r0, r1, #1
 8022bd0:	1e57      	subs	r7, r2, #1
 8022bd2:	2c00      	cmp	r4, #0
 8022bd4:	f340 80d7 	ble.w	8022d86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8022bd8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022bdc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022be0:	d406      	bmi.n	8022bf0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022be2:	4584      	cmp	ip, r0
 8022be4:	da04      	bge.n	8022bf0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022be6:	2b00      	cmp	r3, #0
 8022be8:	db02      	blt.n	8022bf0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022bea:	42bb      	cmp	r3, r7
 8022bec:	f2c0 80cc 	blt.w	8022d88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022bf0:	f11c 0c01 	adds.w	ip, ip, #1
 8022bf4:	f100 80bf 	bmi.w	8022d76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022bf8:	4561      	cmp	r1, ip
 8022bfa:	f2c0 80bc 	blt.w	8022d76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022bfe:	3301      	adds	r3, #1
 8022c00:	f100 80b9 	bmi.w	8022d76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022c04:	429a      	cmp	r2, r3
 8022c06:	f2c0 80b6 	blt.w	8022d76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022c0a:	46a2      	mov	sl, r4
 8022c0c:	465f      	mov	r7, fp
 8022c0e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022c12:	f1ba 0f00 	cmp.w	sl, #0
 8022c16:	f340 80d4 	ble.w	8022dc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8022c1a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8022c1e:	1430      	asrs	r0, r6, #16
 8022c20:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022c24:	9308      	str	r3, [sp, #32]
 8022c26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c28:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022c2c:	142b      	asrs	r3, r5, #16
 8022c2e:	f100 8124 	bmi.w	8022e7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022c32:	f10c 32ff 	add.w	r2, ip, #4294967295
 8022c36:	4293      	cmp	r3, r2
 8022c38:	f280 811f 	bge.w	8022e7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022c3c:	2800      	cmp	r0, #0
 8022c3e:	f2c0 811c 	blt.w	8022e7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022c42:	f10e 32ff 	add.w	r2, lr, #4294967295
 8022c46:	4290      	cmp	r0, r2
 8022c48:	f280 8117 	bge.w	8022e7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022c4c:	fb00 3309 	mla	r3, r0, r9, r3
 8022c50:	0858      	lsrs	r0, r3, #1
 8022c52:	07da      	lsls	r2, r3, #31
 8022c54:	9a08      	ldr	r2, [sp, #32]
 8022c56:	f818 c000 	ldrb.w	ip, [r8, r0]
 8022c5a:	bf54      	ite	pl
 8022c5c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022c60:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022c64:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022c68:	fa5f fc8c 	uxtb.w	ip, ip
 8022c6c:	2a00      	cmp	r2, #0
 8022c6e:	f000 80ed 	beq.w	8022e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8022c72:	1c58      	adds	r0, r3, #1
 8022c74:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022c78:	07c0      	lsls	r0, r0, #31
 8022c7a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8022c7e:	bf54      	ite	pl
 8022c80:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022c84:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022c88:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022c8c:	fa5f fe8e 	uxtb.w	lr, lr
 8022c90:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8022c94:	b1c9      	cbz	r1, 8022cca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022c96:	444b      	add	r3, r9
 8022c98:	0858      	lsrs	r0, r3, #1
 8022c9a:	07da      	lsls	r2, r3, #31
 8022c9c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8022ca0:	bf54      	ite	pl
 8022ca2:	f000 000f 	andpl.w	r0, r0, #15
 8022ca6:	1100      	asrmi	r0, r0, #4
 8022ca8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022cac:	b2c0      	uxtb	r0, r0
 8022cae:	900a      	str	r0, [sp, #40]	; 0x28
 8022cb0:	1c58      	adds	r0, r3, #1
 8022cb2:	0843      	lsrs	r3, r0, #1
 8022cb4:	07c2      	lsls	r2, r0, #31
 8022cb6:	f818 3003 	ldrb.w	r3, [r8, r3]
 8022cba:	bf54      	ite	pl
 8022cbc:	f003 030f 	andpl.w	r3, r3, #15
 8022cc0:	111b      	asrmi	r3, r3, #4
 8022cc2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022cc6:	b2db      	uxtb	r3, r3
 8022cc8:	930e      	str	r3, [sp, #56]	; 0x38
 8022cca:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022cce:	b289      	uxth	r1, r1
 8022cd0:	fb02 f301 	mul.w	r3, r2, r1
 8022cd4:	0112      	lsls	r2, r2, #4
 8022cd6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022cda:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022cde:	1ad2      	subs	r2, r2, r3
 8022ce0:	b289      	uxth	r1, r1
 8022ce2:	b292      	uxth	r2, r2
 8022ce4:	1a40      	subs	r0, r0, r1
 8022ce6:	fa1f fe80 	uxth.w	lr, r0
 8022cea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022cec:	4342      	muls	r2, r0
 8022cee:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022cf4:	fb01 c102 	mla	r1, r1, r2, ip
 8022cf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022cfa:	fb03 1302 	mla	r3, r3, r2, r1
 8022cfe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d02:	b383      	cbz	r3, 8022d66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022d04:	4ac6      	ldr	r2, [pc, #792]	; (8023020 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8022d06:	2bff      	cmp	r3, #255	; 0xff
 8022d08:	6812      	ldr	r2, [r2, #0]
 8022d0a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8022d0e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8022d12:	b2d2      	uxtb	r2, r2
 8022d14:	f000 80ac 	beq.w	8022e70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022d18:	b299      	uxth	r1, r3
 8022d1a:	43db      	mvns	r3, r3
 8022d1c:	f897 c000 	ldrb.w	ip, [r7]
 8022d20:	fb12 f201 	smulbb	r2, r2, r1
 8022d24:	b2db      	uxtb	r3, r3
 8022d26:	fb10 f001 	smulbb	r0, r0, r1
 8022d2a:	fb0c 2203 	mla	r2, ip, r3, r2
 8022d2e:	fb1e f101 	smulbb	r1, lr, r1
 8022d32:	b292      	uxth	r2, r2
 8022d34:	f102 0c01 	add.w	ip, r2, #1
 8022d38:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022d3c:	1212      	asrs	r2, r2, #8
 8022d3e:	703a      	strb	r2, [r7, #0]
 8022d40:	787a      	ldrb	r2, [r7, #1]
 8022d42:	fb02 0003 	mla	r0, r2, r3, r0
 8022d46:	b280      	uxth	r0, r0
 8022d48:	1c42      	adds	r2, r0, #1
 8022d4a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022d4e:	78ba      	ldrb	r2, [r7, #2]
 8022d50:	fb02 1303 	mla	r3, r2, r3, r1
 8022d54:	1200      	asrs	r0, r0, #8
 8022d56:	b29b      	uxth	r3, r3
 8022d58:	7078      	strb	r0, [r7, #1]
 8022d5a:	f103 0e01 	add.w	lr, r3, #1
 8022d5e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022d62:	121b      	asrs	r3, r3, #8
 8022d64:	70bb      	strb	r3, [r7, #2]
 8022d66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022d68:	3703      	adds	r7, #3
 8022d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022d6e:	441d      	add	r5, r3
 8022d70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d72:	441e      	add	r6, r3
 8022d74:	e74d      	b.n	8022c12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022d76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022d78:	3c01      	subs	r4, #1
 8022d7a:	f10b 0b03 	add.w	fp, fp, #3
 8022d7e:	441d      	add	r5, r3
 8022d80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022d82:	441e      	add	r6, r3
 8022d84:	e725      	b.n	8022bd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022d86:	d021      	beq.n	8022dcc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8022d88:	1e63      	subs	r3, r4, #1
 8022d8a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022d8c:	fb00 5003 	mla	r0, r0, r3, r5
 8022d90:	1400      	asrs	r0, r0, #16
 8022d92:	f53f af3a 	bmi.w	8022c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022d96:	3901      	subs	r1, #1
 8022d98:	4288      	cmp	r0, r1
 8022d9a:	f6bf af36 	bge.w	8022c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022d9e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022da0:	fb01 6303 	mla	r3, r1, r3, r6
 8022da4:	141b      	asrs	r3, r3, #16
 8022da6:	f53f af30 	bmi.w	8022c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022daa:	3a01      	subs	r2, #1
 8022dac:	4293      	cmp	r3, r2
 8022dae:	f6bf af2c 	bge.w	8022c0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022db2:	f10b 0c03 	add.w	ip, fp, #3
 8022db6:	46a6      	mov	lr, r4
 8022db8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022dbc:	f1be 0f00 	cmp.w	lr, #0
 8022dc0:	dc79      	bgt.n	8022eb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8022dc2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022dc6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022dca:	44a3      	add	fp, r4
 8022dcc:	9b07      	ldr	r3, [sp, #28]
 8022dce:	2b00      	cmp	r3, #0
 8022dd0:	f340 8123 	ble.w	802301a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022dd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022dda:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022dde:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022de2:	eef0 6a62 	vmov.f32	s13, s5
 8022de6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022dea:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022dee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022df2:	ee16 5a90 	vmov	r5, s13
 8022df6:	eef0 6a43 	vmov.f32	s13, s6
 8022dfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022dfe:	ee16 6a90 	vmov	r6, s13
 8022e02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022e06:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022e0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022e0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022e12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022e16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022e1a:	ee12 2a90 	vmov	r2, s5
 8022e1e:	eef0 2a47 	vmov.f32	s5, s14
 8022e22:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e26:	ee13 2a10 	vmov	r2, s6
 8022e2a:	931f      	str	r3, [sp, #124]	; 0x7c
 8022e2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e2e:	eeb0 3a67 	vmov.f32	s6, s15
 8022e32:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e36:	9320      	str	r3, [sp, #128]	; 0x80
 8022e38:	9b07      	ldr	r3, [sp, #28]
 8022e3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022e3c:	3b01      	subs	r3, #1
 8022e3e:	9307      	str	r3, [sp, #28]
 8022e40:	bf08      	it	eq
 8022e42:	4614      	moveq	r4, r2
 8022e44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e46:	bf18      	it	ne
 8022e48:	461c      	movne	r4, r3
 8022e4a:	e6b4      	b.n	8022bb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022e4c:	2900      	cmp	r1, #0
 8022e4e:	f43f af3c 	beq.w	8022cca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022e52:	eb09 0003 	add.w	r0, r9, r3
 8022e56:	0843      	lsrs	r3, r0, #1
 8022e58:	07c0      	lsls	r0, r0, #31
 8022e5a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8022e5e:	bf54      	ite	pl
 8022e60:	f003 030f 	andpl.w	r3, r3, #15
 8022e64:	111b      	asrmi	r3, r3, #4
 8022e66:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022e6a:	b2db      	uxtb	r3, r3
 8022e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8022e6e:	e72c      	b.n	8022cca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022e70:	703a      	strb	r2, [r7, #0]
 8022e72:	7078      	strb	r0, [r7, #1]
 8022e74:	f887 e002 	strb.w	lr, [r7, #2]
 8022e78:	e775      	b.n	8022d66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022e7a:	1c5a      	adds	r2, r3, #1
 8022e7c:	f53f af73 	bmi.w	8022d66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022e80:	4594      	cmp	ip, r2
 8022e82:	f6ff af70 	blt.w	8022d66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022e86:	1c42      	adds	r2, r0, #1
 8022e88:	f53f af6d 	bmi.w	8022d66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022e8c:	4596      	cmp	lr, r2
 8022e8e:	f6ff af6a 	blt.w	8022d66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022e92:	9302      	str	r3, [sp, #8]
 8022e94:	fa0f f38e 	sxth.w	r3, lr
 8022e98:	9a08      	ldr	r2, [sp, #32]
 8022e9a:	9301      	str	r3, [sp, #4]
 8022e9c:	fa0f f38c 	sxth.w	r3, ip
 8022ea0:	9105      	str	r1, [sp, #20]
 8022ea2:	4639      	mov	r1, r7
 8022ea4:	9300      	str	r3, [sp, #0]
 8022ea6:	464b      	mov	r3, r9
 8022ea8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022eac:	4642      	mov	r2, r8
 8022eae:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022eb0:	f7ff fd90 	bl	80229d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8022eb4:	e757      	b.n	8022d66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022eb6:	142a      	asrs	r2, r5, #16
 8022eb8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022ebc:	1433      	asrs	r3, r6, #16
 8022ebe:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8022ec2:	fb09 2303 	mla	r3, r9, r3, r2
 8022ec6:	085a      	lsrs	r2, r3, #1
 8022ec8:	07d9      	lsls	r1, r3, #31
 8022eca:	f818 2002 	ldrb.w	r2, [r8, r2]
 8022ece:	bf54      	ite	pl
 8022ed0:	f002 020f 	andpl.w	r2, r2, #15
 8022ed4:	1112      	asrmi	r2, r2, #4
 8022ed6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022eda:	b2d2      	uxtb	r2, r2
 8022edc:	2800      	cmp	r0, #0
 8022ede:	f000 8085 	beq.w	8022fec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022ee2:	f103 0a01 	add.w	sl, r3, #1
 8022ee6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022eea:	f01a 0f01 	tst.w	sl, #1
 8022eee:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022ef2:	bf0c      	ite	eq
 8022ef4:	f001 010f 	andeq.w	r1, r1, #15
 8022ef8:	1109      	asrne	r1, r1, #4
 8022efa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022efe:	b2c9      	uxtb	r1, r1
 8022f00:	910f      	str	r1, [sp, #60]	; 0x3c
 8022f02:	b1df      	cbz	r7, 8022f3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022f04:	444b      	add	r3, r9
 8022f06:	0859      	lsrs	r1, r3, #1
 8022f08:	f013 0f01 	tst.w	r3, #1
 8022f0c:	f103 0301 	add.w	r3, r3, #1
 8022f10:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022f14:	bf0c      	ite	eq
 8022f16:	f001 010f 	andeq.w	r1, r1, #15
 8022f1a:	1109      	asrne	r1, r1, #4
 8022f1c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022f20:	b2c9      	uxtb	r1, r1
 8022f22:	910b      	str	r1, [sp, #44]	; 0x2c
 8022f24:	0859      	lsrs	r1, r3, #1
 8022f26:	07db      	lsls	r3, r3, #31
 8022f28:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022f2c:	bf54      	ite	pl
 8022f2e:	f001 010f 	andpl.w	r1, r1, #15
 8022f32:	1109      	asrmi	r1, r1, #4
 8022f34:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022f38:	b2c9      	uxtb	r1, r1
 8022f3a:	9110      	str	r1, [sp, #64]	; 0x40
 8022f3c:	b280      	uxth	r0, r0
 8022f3e:	b2bf      	uxth	r7, r7
 8022f40:	fb00 f307 	mul.w	r3, r0, r7
 8022f44:	0100      	lsls	r0, r0, #4
 8022f46:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8022f4a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022f4e:	1ac0      	subs	r0, r0, r3
 8022f50:	b2bf      	uxth	r7, r7
 8022f52:	b280      	uxth	r0, r0
 8022f54:	1bc9      	subs	r1, r1, r7
 8022f56:	fa1f fa81 	uxth.w	sl, r1
 8022f5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022f5c:	4348      	muls	r0, r1
 8022f5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022f60:	fb02 020a 	mla	r2, r2, sl, r0
 8022f64:	fb07 2701 	mla	r7, r7, r1, r2
 8022f68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022f6a:	fb03 7302 	mla	r3, r3, r2, r7
 8022f6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022f72:	b393      	cbz	r3, 8022fda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022f74:	4a2a      	ldr	r2, [pc, #168]	; (8023020 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8022f76:	2bff      	cmp	r3, #255	; 0xff
 8022f78:	6811      	ldr	r1, [r2, #0]
 8022f7a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8022f7e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8022f82:	b2c9      	uxtb	r1, r1
 8022f84:	d042      	beq.n	802300c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022f86:	b298      	uxth	r0, r3
 8022f88:	43db      	mvns	r3, r3
 8022f8a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8022f8e:	fb11 f100 	smulbb	r1, r1, r0
 8022f92:	b2db      	uxtb	r3, r3
 8022f94:	fb17 f700 	smulbb	r7, r7, r0
 8022f98:	fb02 1103 	mla	r1, r2, r3, r1
 8022f9c:	fb1a f000 	smulbb	r0, sl, r0
 8022fa0:	b289      	uxth	r1, r1
 8022fa2:	1c4a      	adds	r2, r1, #1
 8022fa4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022fa8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8022fac:	fb02 7703 	mla	r7, r2, r3, r7
 8022fb0:	1209      	asrs	r1, r1, #8
 8022fb2:	b2bf      	uxth	r7, r7
 8022fb4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8022fb8:	1c7a      	adds	r2, r7, #1
 8022fba:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022fbe:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8022fc2:	fb02 0303 	mla	r3, r2, r3, r0
 8022fc6:	123f      	asrs	r7, r7, #8
 8022fc8:	b29b      	uxth	r3, r3
 8022fca:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8022fce:	1c5a      	adds	r2, r3, #1
 8022fd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022fd4:	121b      	asrs	r3, r3, #8
 8022fd6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8022fda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022fdc:	f10c 0c03 	add.w	ip, ip, #3
 8022fe0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022fe4:	441d      	add	r5, r3
 8022fe6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022fe8:	441e      	add	r6, r3
 8022fea:	e6e7      	b.n	8022dbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022fec:	2f00      	cmp	r7, #0
 8022fee:	d0a5      	beq.n	8022f3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022ff0:	444b      	add	r3, r9
 8022ff2:	0859      	lsrs	r1, r3, #1
 8022ff4:	07db      	lsls	r3, r3, #31
 8022ff6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022ffa:	bf54      	ite	pl
 8022ffc:	f001 010f 	andpl.w	r1, r1, #15
 8023000:	1109      	asrmi	r1, r1, #4
 8023002:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023006:	b2c9      	uxtb	r1, r1
 8023008:	910b      	str	r1, [sp, #44]	; 0x2c
 802300a:	e797      	b.n	8022f3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802300c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023010:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023014:	f80c ac01 	strb.w	sl, [ip, #-1]
 8023018:	e7df      	b.n	8022fda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802301a:	b013      	add	sp, #76	; 0x4c
 802301c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023020:	2400feec 	.word	0x2400feec

08023024 <CRC_Lock>:
 8023024:	4a20      	ldr	r2, [pc, #128]	; (80230a8 <CRC_Lock+0x84>)
 8023026:	b530      	push	{r4, r5, lr}
 8023028:	6813      	ldr	r3, [r2, #0]
 802302a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802302e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023032:	f023 0301 	bic.w	r3, r3, #1
 8023036:	6013      	str	r3, [r2, #0]
 8023038:	4b1c      	ldr	r3, [pc, #112]	; (80230ac <CRC_Lock+0x88>)
 802303a:	681a      	ldr	r2, [r3, #0]
 802303c:	4022      	ands	r2, r4
 802303e:	42aa      	cmp	r2, r5
 8023040:	d005      	beq.n	802304e <CRC_Lock+0x2a>
 8023042:	681b      	ldr	r3, [r3, #0]
 8023044:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023048:	4023      	ands	r3, r4
 802304a:	4293      	cmp	r3, r2
 802304c:	d124      	bne.n	8023098 <CRC_Lock+0x74>
 802304e:	4b18      	ldr	r3, [pc, #96]	; (80230b0 <CRC_Lock+0x8c>)
 8023050:	681b      	ldr	r3, [r3, #0]
 8023052:	bb0b      	cbnz	r3, 8023098 <CRC_Lock+0x74>
 8023054:	4b17      	ldr	r3, [pc, #92]	; (80230b4 <CRC_Lock+0x90>)
 8023056:	681a      	ldr	r2, [r3, #0]
 8023058:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802305c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8023060:	d00d      	beq.n	802307e <CRC_Lock+0x5a>
 8023062:	681a      	ldr	r2, [r3, #0]
 8023064:	f240 4483 	movw	r4, #1155	; 0x483
 8023068:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802306c:	42a2      	cmp	r2, r4
 802306e:	d006      	beq.n	802307e <CRC_Lock+0x5a>
 8023070:	681b      	ldr	r3, [r3, #0]
 8023072:	f240 4285 	movw	r2, #1157	; 0x485
 8023076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802307a:	4293      	cmp	r3, r2
 802307c:	d10c      	bne.n	8023098 <CRC_Lock+0x74>
 802307e:	4b0e      	ldr	r3, [pc, #56]	; (80230b8 <CRC_Lock+0x94>)
 8023080:	2201      	movs	r2, #1
 8023082:	601a      	str	r2, [r3, #0]
 8023084:	681a      	ldr	r2, [r3, #0]
 8023086:	2a00      	cmp	r2, #0
 8023088:	d1fc      	bne.n	8023084 <CRC_Lock+0x60>
 802308a:	4b0c      	ldr	r3, [pc, #48]	; (80230bc <CRC_Lock+0x98>)
 802308c:	6018      	str	r0, [r3, #0]
 802308e:	6818      	ldr	r0, [r3, #0]
 8023090:	1a43      	subs	r3, r0, r1
 8023092:	4258      	negs	r0, r3
 8023094:	4158      	adcs	r0, r3
 8023096:	bd30      	pop	{r4, r5, pc}
 8023098:	4b09      	ldr	r3, [pc, #36]	; (80230c0 <CRC_Lock+0x9c>)
 802309a:	2201      	movs	r2, #1
 802309c:	601a      	str	r2, [r3, #0]
 802309e:	681a      	ldr	r2, [r3, #0]
 80230a0:	2a00      	cmp	r2, #0
 80230a2:	d1fc      	bne.n	802309e <CRC_Lock+0x7a>
 80230a4:	4b07      	ldr	r3, [pc, #28]	; (80230c4 <CRC_Lock+0xa0>)
 80230a6:	e7f1      	b.n	802308c <CRC_Lock+0x68>
 80230a8:	e0002000 	.word	0xe0002000
 80230ac:	e000ed00 	.word	0xe000ed00
 80230b0:	e0042000 	.word	0xe0042000
 80230b4:	5c001000 	.word	0x5c001000
 80230b8:	58024c08 	.word	0x58024c08
 80230bc:	58024c00 	.word	0x58024c00
 80230c0:	40023008 	.word	0x40023008
 80230c4:	40023000 	.word	0x40023000

080230c8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80230c8:	6101      	str	r1, [r0, #16]
 80230ca:	4770      	bx	lr

080230cc <_ZN8touchgfx8Gestures4tickEv>:
 80230cc:	7b83      	ldrb	r3, [r0, #14]
 80230ce:	b14b      	cbz	r3, 80230e4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80230d0:	8903      	ldrh	r3, [r0, #8]
 80230d2:	3301      	adds	r3, #1
 80230d4:	b29b      	uxth	r3, r3
 80230d6:	2b07      	cmp	r3, #7
 80230d8:	8103      	strh	r3, [r0, #8]
 80230da:	bf81      	itttt	hi
 80230dc:	2300      	movhi	r3, #0
 80230de:	8143      	strhhi	r3, [r0, #10]
 80230e0:	8183      	strhhi	r3, [r0, #12]
 80230e2:	7383      	strbhi	r3, [r0, #14]
 80230e4:	4770      	bx	lr
	...

080230e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80230e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80230ec:	4698      	mov	r8, r3
 80230ee:	8883      	ldrh	r3, [r0, #4]
 80230f0:	4604      	mov	r4, r0
 80230f2:	4617      	mov	r7, r2
 80230f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80230f8:	eba8 0303 	sub.w	r3, r8, r3
 80230fc:	4a19      	ldr	r2, [pc, #100]	; (8023164 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80230fe:	460e      	mov	r6, r1
 8023100:	b21b      	sxth	r3, r3
 8023102:	88c1      	ldrh	r1, [r0, #6]
 8023104:	9200      	str	r2, [sp, #0]
 8023106:	2000      	movs	r0, #0
 8023108:	2b00      	cmp	r3, #0
 802310a:	8aa2      	ldrh	r2, [r4, #20]
 802310c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023110:	bfb8      	it	lt
 8023112:	425b      	neglt	r3, r3
 8023114:	f88d 0004 	strb.w	r0, [sp, #4]
 8023118:	f8ad 1008 	strh.w	r1, [sp, #8]
 802311c:	b21b      	sxth	r3, r3
 802311e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023122:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023126:	4293      	cmp	r3, r2
 8023128:	dc07      	bgt.n	802313a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802312a:	1a69      	subs	r1, r5, r1
 802312c:	b209      	sxth	r1, r1
 802312e:	2900      	cmp	r1, #0
 8023130:	bfb8      	it	lt
 8023132:	4249      	neglt	r1, r1
 8023134:	b209      	sxth	r1, r1
 8023136:	428a      	cmp	r2, r1
 8023138:	da10      	bge.n	802315c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802313a:	6920      	ldr	r0, [r4, #16]
 802313c:	4669      	mov	r1, sp
 802313e:	eba8 0606 	sub.w	r6, r8, r6
 8023142:	1bef      	subs	r7, r5, r7
 8023144:	6803      	ldr	r3, [r0, #0]
 8023146:	685b      	ldr	r3, [r3, #4]
 8023148:	4798      	blx	r3
 802314a:	2300      	movs	r3, #0
 802314c:	2001      	movs	r0, #1
 802314e:	8166      	strh	r6, [r4, #10]
 8023150:	8123      	strh	r3, [r4, #8]
 8023152:	81a7      	strh	r7, [r4, #12]
 8023154:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023158:	80e5      	strh	r5, [r4, #6]
 802315a:	73a0      	strb	r0, [r4, #14]
 802315c:	b004      	add	sp, #16
 802315e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023162:	bf00      	nop
 8023164:	08026a4c 	.word	0x08026a4c

08023168 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023168:	b5f0      	push	{r4, r5, r6, r7, lr}
 802316a:	461e      	mov	r6, r3
 802316c:	1e4b      	subs	r3, r1, #1
 802316e:	b085      	sub	sp, #20
 8023170:	4604      	mov	r4, r0
 8023172:	2b01      	cmp	r3, #1
 8023174:	460d      	mov	r5, r1
 8023176:	4617      	mov	r7, r2
 8023178:	d84b      	bhi.n	8023212 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802317a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802317e:	1cd3      	adds	r3, r2, #3
 8023180:	b29b      	uxth	r3, r3
 8023182:	2b06      	cmp	r3, #6
 8023184:	d916      	bls.n	80231b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023186:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8023228 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802318a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802318e:	f8cd c004 	str.w	ip, [sp, #4]
 8023192:	f04f 0c00 	mov.w	ip, #0
 8023196:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802319a:	6900      	ldr	r0, [r0, #16]
 802319c:	f8ad 100c 	strh.w	r1, [sp, #12]
 80231a0:	a901      	add	r1, sp, #4
 80231a2:	f88d c008 	strb.w	ip, [sp, #8]
 80231a6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80231aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80231ae:	6803      	ldr	r3, [r0, #0]
 80231b0:	689b      	ldr	r3, [r3, #8]
 80231b2:	4798      	blx	r3
 80231b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80231b8:	1cd3      	adds	r3, r2, #3
 80231ba:	b29b      	uxth	r3, r3
 80231bc:	2b06      	cmp	r3, #6
 80231be:	d916      	bls.n	80231ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80231c0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8023228 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80231c4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80231c8:	f8cd c004 	str.w	ip, [sp, #4]
 80231cc:	f04f 0c01 	mov.w	ip, #1
 80231d0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80231d4:	6920      	ldr	r0, [r4, #16]
 80231d6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80231da:	a901      	add	r1, sp, #4
 80231dc:	f88d c008 	strb.w	ip, [sp, #8]
 80231e0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80231e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80231e8:	6803      	ldr	r3, [r0, #0]
 80231ea:	689b      	ldr	r3, [r3, #8]
 80231ec:	4798      	blx	r3
 80231ee:	4b0d      	ldr	r3, [pc, #52]	; (8023224 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80231f0:	a901      	add	r1, sp, #4
 80231f2:	6920      	ldr	r0, [r4, #16]
 80231f4:	9301      	str	r3, [sp, #4]
 80231f6:	2300      	movs	r3, #0
 80231f8:	f88d 5008 	strb.w	r5, [sp, #8]
 80231fc:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023200:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023204:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023208:	6803      	ldr	r3, [r0, #0]
 802320a:	681b      	ldr	r3, [r3, #0]
 802320c:	4798      	blx	r3
 802320e:	b005      	add	sp, #20
 8023210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023212:	2900      	cmp	r1, #0
 8023214:	d1eb      	bne.n	80231ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023216:	80a2      	strh	r2, [r4, #4]
 8023218:	80c6      	strh	r6, [r0, #6]
 802321a:	60a1      	str	r1, [r4, #8]
 802321c:	81a1      	strh	r1, [r4, #12]
 802321e:	73a1      	strb	r1, [r4, #14]
 8023220:	e7e5      	b.n	80231ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023222:	bf00      	nop
 8023224:	08026a38 	.word	0x08026a38
 8023228:	080270a4 	.word	0x080270a4

0802322c <__aeabi_atexit>:
 802322c:	460b      	mov	r3, r1
 802322e:	4601      	mov	r1, r0
 8023230:	4618      	mov	r0, r3
 8023232:	f000 b853 	b.w	80232dc <__cxa_atexit>

08023236 <_ZdlPvj>:
 8023236:	f000 b812 	b.w	802325e <_ZdlPv>

0802323a <__cxa_guard_acquire>:
 802323a:	6803      	ldr	r3, [r0, #0]
 802323c:	07db      	lsls	r3, r3, #31
 802323e:	d406      	bmi.n	802324e <__cxa_guard_acquire+0x14>
 8023240:	7843      	ldrb	r3, [r0, #1]
 8023242:	b103      	cbz	r3, 8023246 <__cxa_guard_acquire+0xc>
 8023244:	deff      	udf	#255	; 0xff
 8023246:	2301      	movs	r3, #1
 8023248:	7043      	strb	r3, [r0, #1]
 802324a:	4618      	mov	r0, r3
 802324c:	4770      	bx	lr
 802324e:	2000      	movs	r0, #0
 8023250:	4770      	bx	lr

08023252 <__cxa_guard_release>:
 8023252:	2301      	movs	r3, #1
 8023254:	6003      	str	r3, [r0, #0]
 8023256:	4770      	bx	lr

08023258 <__cxa_pure_virtual>:
 8023258:	b508      	push	{r3, lr}
 802325a:	f000 f80f 	bl	802327c <_ZSt9terminatev>

0802325e <_ZdlPv>:
 802325e:	f000 b989 	b.w	8023574 <free>

08023262 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8023262:	b508      	push	{r3, lr}
 8023264:	4780      	blx	r0
 8023266:	f000 f80e 	bl	8023286 <abort>
	...

0802326c <_ZSt13get_terminatev>:
 802326c:	4b02      	ldr	r3, [pc, #8]	; (8023278 <_ZSt13get_terminatev+0xc>)
 802326e:	6818      	ldr	r0, [r3, #0]
 8023270:	f3bf 8f5b 	dmb	ish
 8023274:	4770      	bx	lr
 8023276:	bf00      	nop
 8023278:	240000d8 	.word	0x240000d8

0802327c <_ZSt9terminatev>:
 802327c:	b508      	push	{r3, lr}
 802327e:	f7ff fff5 	bl	802326c <_ZSt13get_terminatev>
 8023282:	f7ff ffee 	bl	8023262 <_ZN10__cxxabiv111__terminateEPFvvE>

08023286 <abort>:
 8023286:	b508      	push	{r3, lr}
 8023288:	2006      	movs	r0, #6
 802328a:	f000 fe11 	bl	8023eb0 <raise>
 802328e:	2001      	movs	r0, #1
 8023290:	f7e0 f870 	bl	8003374 <_exit>

08023294 <__assert_func>:
 8023294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023296:	4614      	mov	r4, r2
 8023298:	461a      	mov	r2, r3
 802329a:	4b09      	ldr	r3, [pc, #36]	; (80232c0 <__assert_func+0x2c>)
 802329c:	681b      	ldr	r3, [r3, #0]
 802329e:	4605      	mov	r5, r0
 80232a0:	68d8      	ldr	r0, [r3, #12]
 80232a2:	b14c      	cbz	r4, 80232b8 <__assert_func+0x24>
 80232a4:	4b07      	ldr	r3, [pc, #28]	; (80232c4 <__assert_func+0x30>)
 80232a6:	9100      	str	r1, [sp, #0]
 80232a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80232ac:	4906      	ldr	r1, [pc, #24]	; (80232c8 <__assert_func+0x34>)
 80232ae:	462b      	mov	r3, r5
 80232b0:	f000 f8fe 	bl	80234b0 <fiprintf>
 80232b4:	f7ff ffe7 	bl	8023286 <abort>
 80232b8:	4b04      	ldr	r3, [pc, #16]	; (80232cc <__assert_func+0x38>)
 80232ba:	461c      	mov	r4, r3
 80232bc:	e7f3      	b.n	80232a6 <__assert_func+0x12>
 80232be:	bf00      	nop
 80232c0:	240000dc 	.word	0x240000dc
 80232c4:	080272cc 	.word	0x080272cc
 80232c8:	080272d9 	.word	0x080272d9
 80232cc:	08027307 	.word	0x08027307

080232d0 <atexit>:
 80232d0:	2300      	movs	r3, #0
 80232d2:	4601      	mov	r1, r0
 80232d4:	461a      	mov	r2, r3
 80232d6:	4618      	mov	r0, r3
 80232d8:	f000 bfa4 	b.w	8024224 <__register_exitproc>

080232dc <__cxa_atexit>:
 80232dc:	b510      	push	{r4, lr}
 80232de:	4c05      	ldr	r4, [pc, #20]	; (80232f4 <__cxa_atexit+0x18>)
 80232e0:	4613      	mov	r3, r2
 80232e2:	b12c      	cbz	r4, 80232f0 <__cxa_atexit+0x14>
 80232e4:	460a      	mov	r2, r1
 80232e6:	4601      	mov	r1, r0
 80232e8:	2002      	movs	r0, #2
 80232ea:	f000 ff9b 	bl	8024224 <__register_exitproc>
 80232ee:	bd10      	pop	{r4, pc}
 80232f0:	4620      	mov	r0, r4
 80232f2:	e7fc      	b.n	80232ee <__cxa_atexit+0x12>
 80232f4:	08024225 	.word	0x08024225

080232f8 <__errno>:
 80232f8:	4b01      	ldr	r3, [pc, #4]	; (8023300 <__errno+0x8>)
 80232fa:	6818      	ldr	r0, [r3, #0]
 80232fc:	4770      	bx	lr
 80232fe:	bf00      	nop
 8023300:	240000dc 	.word	0x240000dc

08023304 <std>:
 8023304:	2300      	movs	r3, #0
 8023306:	b510      	push	{r4, lr}
 8023308:	4604      	mov	r4, r0
 802330a:	e9c0 3300 	strd	r3, r3, [r0]
 802330e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023312:	6083      	str	r3, [r0, #8]
 8023314:	8181      	strh	r1, [r0, #12]
 8023316:	6643      	str	r3, [r0, #100]	; 0x64
 8023318:	81c2      	strh	r2, [r0, #14]
 802331a:	6183      	str	r3, [r0, #24]
 802331c:	4619      	mov	r1, r3
 802331e:	2208      	movs	r2, #8
 8023320:	305c      	adds	r0, #92	; 0x5c
 8023322:	f000 f94d 	bl	80235c0 <memset>
 8023326:	4b05      	ldr	r3, [pc, #20]	; (802333c <std+0x38>)
 8023328:	6263      	str	r3, [r4, #36]	; 0x24
 802332a:	4b05      	ldr	r3, [pc, #20]	; (8023340 <std+0x3c>)
 802332c:	62a3      	str	r3, [r4, #40]	; 0x28
 802332e:	4b05      	ldr	r3, [pc, #20]	; (8023344 <std+0x40>)
 8023330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023332:	4b05      	ldr	r3, [pc, #20]	; (8023348 <std+0x44>)
 8023334:	6224      	str	r4, [r4, #32]
 8023336:	6323      	str	r3, [r4, #48]	; 0x30
 8023338:	bd10      	pop	{r4, pc}
 802333a:	bf00      	nop
 802333c:	08023f29 	.word	0x08023f29
 8023340:	08023f4b 	.word	0x08023f4b
 8023344:	08023f83 	.word	0x08023f83
 8023348:	08023fa7 	.word	0x08023fa7

0802334c <_cleanup_r>:
 802334c:	4901      	ldr	r1, [pc, #4]	; (8023354 <_cleanup_r+0x8>)
 802334e:	f000 b8c1 	b.w	80234d4 <_fwalk_reent>
 8023352:	bf00      	nop
 8023354:	08024415 	.word	0x08024415

08023358 <__sfmoreglue>:
 8023358:	b570      	push	{r4, r5, r6, lr}
 802335a:	2268      	movs	r2, #104	; 0x68
 802335c:	1e4d      	subs	r5, r1, #1
 802335e:	4355      	muls	r5, r2
 8023360:	460e      	mov	r6, r1
 8023362:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023366:	f000 f99f 	bl	80236a8 <_malloc_r>
 802336a:	4604      	mov	r4, r0
 802336c:	b140      	cbz	r0, 8023380 <__sfmoreglue+0x28>
 802336e:	2100      	movs	r1, #0
 8023370:	e9c0 1600 	strd	r1, r6, [r0]
 8023374:	300c      	adds	r0, #12
 8023376:	60a0      	str	r0, [r4, #8]
 8023378:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802337c:	f000 f920 	bl	80235c0 <memset>
 8023380:	4620      	mov	r0, r4
 8023382:	bd70      	pop	{r4, r5, r6, pc}

08023384 <__sfp_lock_acquire>:
 8023384:	4801      	ldr	r0, [pc, #4]	; (802338c <__sfp_lock_acquire+0x8>)
 8023386:	f000 b8ea 	b.w	802355e <__retarget_lock_acquire_recursive>
 802338a:	bf00      	nop
 802338c:	2400ffc2 	.word	0x2400ffc2

08023390 <__sfp_lock_release>:
 8023390:	4801      	ldr	r0, [pc, #4]	; (8023398 <__sfp_lock_release+0x8>)
 8023392:	f000 b8e6 	b.w	8023562 <__retarget_lock_release_recursive>
 8023396:	bf00      	nop
 8023398:	2400ffc2 	.word	0x2400ffc2

0802339c <__sinit_lock_acquire>:
 802339c:	4801      	ldr	r0, [pc, #4]	; (80233a4 <__sinit_lock_acquire+0x8>)
 802339e:	f000 b8de 	b.w	802355e <__retarget_lock_acquire_recursive>
 80233a2:	bf00      	nop
 80233a4:	2400ffc3 	.word	0x2400ffc3

080233a8 <__sinit_lock_release>:
 80233a8:	4801      	ldr	r0, [pc, #4]	; (80233b0 <__sinit_lock_release+0x8>)
 80233aa:	f000 b8da 	b.w	8023562 <__retarget_lock_release_recursive>
 80233ae:	bf00      	nop
 80233b0:	2400ffc3 	.word	0x2400ffc3

080233b4 <__sinit>:
 80233b4:	b510      	push	{r4, lr}
 80233b6:	4604      	mov	r4, r0
 80233b8:	f7ff fff0 	bl	802339c <__sinit_lock_acquire>
 80233bc:	69a3      	ldr	r3, [r4, #24]
 80233be:	b11b      	cbz	r3, 80233c8 <__sinit+0x14>
 80233c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233c4:	f7ff bff0 	b.w	80233a8 <__sinit_lock_release>
 80233c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80233cc:	6523      	str	r3, [r4, #80]	; 0x50
 80233ce:	4b13      	ldr	r3, [pc, #76]	; (802341c <__sinit+0x68>)
 80233d0:	4a13      	ldr	r2, [pc, #76]	; (8023420 <__sinit+0x6c>)
 80233d2:	681b      	ldr	r3, [r3, #0]
 80233d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80233d6:	42a3      	cmp	r3, r4
 80233d8:	bf04      	itt	eq
 80233da:	2301      	moveq	r3, #1
 80233dc:	61a3      	streq	r3, [r4, #24]
 80233de:	4620      	mov	r0, r4
 80233e0:	f000 f820 	bl	8023424 <__sfp>
 80233e4:	6060      	str	r0, [r4, #4]
 80233e6:	4620      	mov	r0, r4
 80233e8:	f000 f81c 	bl	8023424 <__sfp>
 80233ec:	60a0      	str	r0, [r4, #8]
 80233ee:	4620      	mov	r0, r4
 80233f0:	f000 f818 	bl	8023424 <__sfp>
 80233f4:	2200      	movs	r2, #0
 80233f6:	60e0      	str	r0, [r4, #12]
 80233f8:	2104      	movs	r1, #4
 80233fa:	6860      	ldr	r0, [r4, #4]
 80233fc:	f7ff ff82 	bl	8023304 <std>
 8023400:	68a0      	ldr	r0, [r4, #8]
 8023402:	2201      	movs	r2, #1
 8023404:	2109      	movs	r1, #9
 8023406:	f7ff ff7d 	bl	8023304 <std>
 802340a:	68e0      	ldr	r0, [r4, #12]
 802340c:	2202      	movs	r2, #2
 802340e:	2112      	movs	r1, #18
 8023410:	f7ff ff78 	bl	8023304 <std>
 8023414:	2301      	movs	r3, #1
 8023416:	61a3      	str	r3, [r4, #24]
 8023418:	e7d2      	b.n	80233c0 <__sinit+0xc>
 802341a:	bf00      	nop
 802341c:	08027368 	.word	0x08027368
 8023420:	0802334d 	.word	0x0802334d

08023424 <__sfp>:
 8023424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023426:	4607      	mov	r7, r0
 8023428:	f7ff ffac 	bl	8023384 <__sfp_lock_acquire>
 802342c:	4b1e      	ldr	r3, [pc, #120]	; (80234a8 <__sfp+0x84>)
 802342e:	681e      	ldr	r6, [r3, #0]
 8023430:	69b3      	ldr	r3, [r6, #24]
 8023432:	b913      	cbnz	r3, 802343a <__sfp+0x16>
 8023434:	4630      	mov	r0, r6
 8023436:	f7ff ffbd 	bl	80233b4 <__sinit>
 802343a:	3648      	adds	r6, #72	; 0x48
 802343c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023440:	3b01      	subs	r3, #1
 8023442:	d503      	bpl.n	802344c <__sfp+0x28>
 8023444:	6833      	ldr	r3, [r6, #0]
 8023446:	b30b      	cbz	r3, 802348c <__sfp+0x68>
 8023448:	6836      	ldr	r6, [r6, #0]
 802344a:	e7f7      	b.n	802343c <__sfp+0x18>
 802344c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023450:	b9d5      	cbnz	r5, 8023488 <__sfp+0x64>
 8023452:	4b16      	ldr	r3, [pc, #88]	; (80234ac <__sfp+0x88>)
 8023454:	60e3      	str	r3, [r4, #12]
 8023456:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802345a:	6665      	str	r5, [r4, #100]	; 0x64
 802345c:	f000 f87e 	bl	802355c <__retarget_lock_init_recursive>
 8023460:	f7ff ff96 	bl	8023390 <__sfp_lock_release>
 8023464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802346c:	6025      	str	r5, [r4, #0]
 802346e:	61a5      	str	r5, [r4, #24]
 8023470:	2208      	movs	r2, #8
 8023472:	4629      	mov	r1, r5
 8023474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023478:	f000 f8a2 	bl	80235c0 <memset>
 802347c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023484:	4620      	mov	r0, r4
 8023486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023488:	3468      	adds	r4, #104	; 0x68
 802348a:	e7d9      	b.n	8023440 <__sfp+0x1c>
 802348c:	2104      	movs	r1, #4
 802348e:	4638      	mov	r0, r7
 8023490:	f7ff ff62 	bl	8023358 <__sfmoreglue>
 8023494:	4604      	mov	r4, r0
 8023496:	6030      	str	r0, [r6, #0]
 8023498:	2800      	cmp	r0, #0
 802349a:	d1d5      	bne.n	8023448 <__sfp+0x24>
 802349c:	f7ff ff78 	bl	8023390 <__sfp_lock_release>
 80234a0:	230c      	movs	r3, #12
 80234a2:	603b      	str	r3, [r7, #0]
 80234a4:	e7ee      	b.n	8023484 <__sfp+0x60>
 80234a6:	bf00      	nop
 80234a8:	08027368 	.word	0x08027368
 80234ac:	ffff0001 	.word	0xffff0001

080234b0 <fiprintf>:
 80234b0:	b40e      	push	{r1, r2, r3}
 80234b2:	b503      	push	{r0, r1, lr}
 80234b4:	4601      	mov	r1, r0
 80234b6:	ab03      	add	r3, sp, #12
 80234b8:	4805      	ldr	r0, [pc, #20]	; (80234d0 <fiprintf+0x20>)
 80234ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80234be:	6800      	ldr	r0, [r0, #0]
 80234c0:	9301      	str	r3, [sp, #4]
 80234c2:	f000 f98f 	bl	80237e4 <_vfiprintf_r>
 80234c6:	b002      	add	sp, #8
 80234c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80234cc:	b003      	add	sp, #12
 80234ce:	4770      	bx	lr
 80234d0:	240000dc 	.word	0x240000dc

080234d4 <_fwalk_reent>:
 80234d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80234d8:	4606      	mov	r6, r0
 80234da:	4688      	mov	r8, r1
 80234dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80234e0:	2700      	movs	r7, #0
 80234e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80234e6:	f1b9 0901 	subs.w	r9, r9, #1
 80234ea:	d505      	bpl.n	80234f8 <_fwalk_reent+0x24>
 80234ec:	6824      	ldr	r4, [r4, #0]
 80234ee:	2c00      	cmp	r4, #0
 80234f0:	d1f7      	bne.n	80234e2 <_fwalk_reent+0xe>
 80234f2:	4638      	mov	r0, r7
 80234f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80234f8:	89ab      	ldrh	r3, [r5, #12]
 80234fa:	2b01      	cmp	r3, #1
 80234fc:	d907      	bls.n	802350e <_fwalk_reent+0x3a>
 80234fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023502:	3301      	adds	r3, #1
 8023504:	d003      	beq.n	802350e <_fwalk_reent+0x3a>
 8023506:	4629      	mov	r1, r5
 8023508:	4630      	mov	r0, r6
 802350a:	47c0      	blx	r8
 802350c:	4307      	orrs	r7, r0
 802350e:	3568      	adds	r5, #104	; 0x68
 8023510:	e7e9      	b.n	80234e6 <_fwalk_reent+0x12>
	...

08023514 <__libc_init_array>:
 8023514:	b570      	push	{r4, r5, r6, lr}
 8023516:	4d0d      	ldr	r5, [pc, #52]	; (802354c <__libc_init_array+0x38>)
 8023518:	4c0d      	ldr	r4, [pc, #52]	; (8023550 <__libc_init_array+0x3c>)
 802351a:	1b64      	subs	r4, r4, r5
 802351c:	10a4      	asrs	r4, r4, #2
 802351e:	2600      	movs	r6, #0
 8023520:	42a6      	cmp	r6, r4
 8023522:	d109      	bne.n	8023538 <__libc_init_array+0x24>
 8023524:	4d0b      	ldr	r5, [pc, #44]	; (8023554 <__libc_init_array+0x40>)
 8023526:	4c0c      	ldr	r4, [pc, #48]	; (8023558 <__libc_init_array+0x44>)
 8023528:	f001 fa14 	bl	8024954 <_init>
 802352c:	1b64      	subs	r4, r4, r5
 802352e:	10a4      	asrs	r4, r4, #2
 8023530:	2600      	movs	r6, #0
 8023532:	42a6      	cmp	r6, r4
 8023534:	d105      	bne.n	8023542 <__libc_init_array+0x2e>
 8023536:	bd70      	pop	{r4, r5, r6, pc}
 8023538:	f855 3b04 	ldr.w	r3, [r5], #4
 802353c:	4798      	blx	r3
 802353e:	3601      	adds	r6, #1
 8023540:	e7ee      	b.n	8023520 <__libc_init_array+0xc>
 8023542:	f855 3b04 	ldr.w	r3, [r5], #4
 8023546:	4798      	blx	r3
 8023548:	3601      	adds	r6, #1
 802354a:	e7f2      	b.n	8023532 <__libc_init_array+0x1e>
 802354c:	08027b30 	.word	0x08027b30
 8023550:	08027b30 	.word	0x08027b30
 8023554:	08027b30 	.word	0x08027b30
 8023558:	08027b58 	.word	0x08027b58

0802355c <__retarget_lock_init_recursive>:
 802355c:	4770      	bx	lr

0802355e <__retarget_lock_acquire_recursive>:
 802355e:	4770      	bx	lr

08023560 <__retarget_lock_release>:
 8023560:	4770      	bx	lr

08023562 <__retarget_lock_release_recursive>:
 8023562:	4770      	bx	lr

08023564 <malloc>:
 8023564:	4b02      	ldr	r3, [pc, #8]	; (8023570 <malloc+0xc>)
 8023566:	4601      	mov	r1, r0
 8023568:	6818      	ldr	r0, [r3, #0]
 802356a:	f000 b89d 	b.w	80236a8 <_malloc_r>
 802356e:	bf00      	nop
 8023570:	240000dc 	.word	0x240000dc

08023574 <free>:
 8023574:	4b02      	ldr	r3, [pc, #8]	; (8023580 <free+0xc>)
 8023576:	4601      	mov	r1, r0
 8023578:	6818      	ldr	r0, [r3, #0]
 802357a:	f000 b829 	b.w	80235d0 <_free_r>
 802357e:	bf00      	nop
 8023580:	240000dc 	.word	0x240000dc

08023584 <memcmp>:
 8023584:	b510      	push	{r4, lr}
 8023586:	3901      	subs	r1, #1
 8023588:	4402      	add	r2, r0
 802358a:	4290      	cmp	r0, r2
 802358c:	d101      	bne.n	8023592 <memcmp+0xe>
 802358e:	2000      	movs	r0, #0
 8023590:	e005      	b.n	802359e <memcmp+0x1a>
 8023592:	7803      	ldrb	r3, [r0, #0]
 8023594:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023598:	42a3      	cmp	r3, r4
 802359a:	d001      	beq.n	80235a0 <memcmp+0x1c>
 802359c:	1b18      	subs	r0, r3, r4
 802359e:	bd10      	pop	{r4, pc}
 80235a0:	3001      	adds	r0, #1
 80235a2:	e7f2      	b.n	802358a <memcmp+0x6>

080235a4 <memcpy>:
 80235a4:	440a      	add	r2, r1
 80235a6:	4291      	cmp	r1, r2
 80235a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80235ac:	d100      	bne.n	80235b0 <memcpy+0xc>
 80235ae:	4770      	bx	lr
 80235b0:	b510      	push	{r4, lr}
 80235b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80235b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80235ba:	4291      	cmp	r1, r2
 80235bc:	d1f9      	bne.n	80235b2 <memcpy+0xe>
 80235be:	bd10      	pop	{r4, pc}

080235c0 <memset>:
 80235c0:	4402      	add	r2, r0
 80235c2:	4603      	mov	r3, r0
 80235c4:	4293      	cmp	r3, r2
 80235c6:	d100      	bne.n	80235ca <memset+0xa>
 80235c8:	4770      	bx	lr
 80235ca:	f803 1b01 	strb.w	r1, [r3], #1
 80235ce:	e7f9      	b.n	80235c4 <memset+0x4>

080235d0 <_free_r>:
 80235d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80235d2:	2900      	cmp	r1, #0
 80235d4:	d044      	beq.n	8023660 <_free_r+0x90>
 80235d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80235da:	9001      	str	r0, [sp, #4]
 80235dc:	2b00      	cmp	r3, #0
 80235de:	f1a1 0404 	sub.w	r4, r1, #4
 80235e2:	bfb8      	it	lt
 80235e4:	18e4      	addlt	r4, r4, r3
 80235e6:	f000 ffe3 	bl	80245b0 <__malloc_lock>
 80235ea:	4a1e      	ldr	r2, [pc, #120]	; (8023664 <_free_r+0x94>)
 80235ec:	9801      	ldr	r0, [sp, #4]
 80235ee:	6813      	ldr	r3, [r2, #0]
 80235f0:	b933      	cbnz	r3, 8023600 <_free_r+0x30>
 80235f2:	6063      	str	r3, [r4, #4]
 80235f4:	6014      	str	r4, [r2, #0]
 80235f6:	b003      	add	sp, #12
 80235f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80235fc:	f000 bfde 	b.w	80245bc <__malloc_unlock>
 8023600:	42a3      	cmp	r3, r4
 8023602:	d908      	bls.n	8023616 <_free_r+0x46>
 8023604:	6825      	ldr	r5, [r4, #0]
 8023606:	1961      	adds	r1, r4, r5
 8023608:	428b      	cmp	r3, r1
 802360a:	bf01      	itttt	eq
 802360c:	6819      	ldreq	r1, [r3, #0]
 802360e:	685b      	ldreq	r3, [r3, #4]
 8023610:	1949      	addeq	r1, r1, r5
 8023612:	6021      	streq	r1, [r4, #0]
 8023614:	e7ed      	b.n	80235f2 <_free_r+0x22>
 8023616:	461a      	mov	r2, r3
 8023618:	685b      	ldr	r3, [r3, #4]
 802361a:	b10b      	cbz	r3, 8023620 <_free_r+0x50>
 802361c:	42a3      	cmp	r3, r4
 802361e:	d9fa      	bls.n	8023616 <_free_r+0x46>
 8023620:	6811      	ldr	r1, [r2, #0]
 8023622:	1855      	adds	r5, r2, r1
 8023624:	42a5      	cmp	r5, r4
 8023626:	d10b      	bne.n	8023640 <_free_r+0x70>
 8023628:	6824      	ldr	r4, [r4, #0]
 802362a:	4421      	add	r1, r4
 802362c:	1854      	adds	r4, r2, r1
 802362e:	42a3      	cmp	r3, r4
 8023630:	6011      	str	r1, [r2, #0]
 8023632:	d1e0      	bne.n	80235f6 <_free_r+0x26>
 8023634:	681c      	ldr	r4, [r3, #0]
 8023636:	685b      	ldr	r3, [r3, #4]
 8023638:	6053      	str	r3, [r2, #4]
 802363a:	4421      	add	r1, r4
 802363c:	6011      	str	r1, [r2, #0]
 802363e:	e7da      	b.n	80235f6 <_free_r+0x26>
 8023640:	d902      	bls.n	8023648 <_free_r+0x78>
 8023642:	230c      	movs	r3, #12
 8023644:	6003      	str	r3, [r0, #0]
 8023646:	e7d6      	b.n	80235f6 <_free_r+0x26>
 8023648:	6825      	ldr	r5, [r4, #0]
 802364a:	1961      	adds	r1, r4, r5
 802364c:	428b      	cmp	r3, r1
 802364e:	bf04      	itt	eq
 8023650:	6819      	ldreq	r1, [r3, #0]
 8023652:	685b      	ldreq	r3, [r3, #4]
 8023654:	6063      	str	r3, [r4, #4]
 8023656:	bf04      	itt	eq
 8023658:	1949      	addeq	r1, r1, r5
 802365a:	6021      	streq	r1, [r4, #0]
 802365c:	6054      	str	r4, [r2, #4]
 802365e:	e7ca      	b.n	80235f6 <_free_r+0x26>
 8023660:	b003      	add	sp, #12
 8023662:	bd30      	pop	{r4, r5, pc}
 8023664:	2400ffc4 	.word	0x2400ffc4

08023668 <sbrk_aligned>:
 8023668:	b570      	push	{r4, r5, r6, lr}
 802366a:	4e0e      	ldr	r6, [pc, #56]	; (80236a4 <sbrk_aligned+0x3c>)
 802366c:	460c      	mov	r4, r1
 802366e:	6831      	ldr	r1, [r6, #0]
 8023670:	4605      	mov	r5, r0
 8023672:	b911      	cbnz	r1, 802367a <sbrk_aligned+0x12>
 8023674:	f000 fbe4 	bl	8023e40 <_sbrk_r>
 8023678:	6030      	str	r0, [r6, #0]
 802367a:	4621      	mov	r1, r4
 802367c:	4628      	mov	r0, r5
 802367e:	f000 fbdf 	bl	8023e40 <_sbrk_r>
 8023682:	1c43      	adds	r3, r0, #1
 8023684:	d00a      	beq.n	802369c <sbrk_aligned+0x34>
 8023686:	1cc4      	adds	r4, r0, #3
 8023688:	f024 0403 	bic.w	r4, r4, #3
 802368c:	42a0      	cmp	r0, r4
 802368e:	d007      	beq.n	80236a0 <sbrk_aligned+0x38>
 8023690:	1a21      	subs	r1, r4, r0
 8023692:	4628      	mov	r0, r5
 8023694:	f000 fbd4 	bl	8023e40 <_sbrk_r>
 8023698:	3001      	adds	r0, #1
 802369a:	d101      	bne.n	80236a0 <sbrk_aligned+0x38>
 802369c:	f04f 34ff 	mov.w	r4, #4294967295
 80236a0:	4620      	mov	r0, r4
 80236a2:	bd70      	pop	{r4, r5, r6, pc}
 80236a4:	2400ffc8 	.word	0x2400ffc8

080236a8 <_malloc_r>:
 80236a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236ac:	1ccd      	adds	r5, r1, #3
 80236ae:	f025 0503 	bic.w	r5, r5, #3
 80236b2:	3508      	adds	r5, #8
 80236b4:	2d0c      	cmp	r5, #12
 80236b6:	bf38      	it	cc
 80236b8:	250c      	movcc	r5, #12
 80236ba:	2d00      	cmp	r5, #0
 80236bc:	4607      	mov	r7, r0
 80236be:	db01      	blt.n	80236c4 <_malloc_r+0x1c>
 80236c0:	42a9      	cmp	r1, r5
 80236c2:	d905      	bls.n	80236d0 <_malloc_r+0x28>
 80236c4:	230c      	movs	r3, #12
 80236c6:	603b      	str	r3, [r7, #0]
 80236c8:	2600      	movs	r6, #0
 80236ca:	4630      	mov	r0, r6
 80236cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80236d0:	4e2e      	ldr	r6, [pc, #184]	; (802378c <_malloc_r+0xe4>)
 80236d2:	f000 ff6d 	bl	80245b0 <__malloc_lock>
 80236d6:	6833      	ldr	r3, [r6, #0]
 80236d8:	461c      	mov	r4, r3
 80236da:	bb34      	cbnz	r4, 802372a <_malloc_r+0x82>
 80236dc:	4629      	mov	r1, r5
 80236de:	4638      	mov	r0, r7
 80236e0:	f7ff ffc2 	bl	8023668 <sbrk_aligned>
 80236e4:	1c43      	adds	r3, r0, #1
 80236e6:	4604      	mov	r4, r0
 80236e8:	d14d      	bne.n	8023786 <_malloc_r+0xde>
 80236ea:	6834      	ldr	r4, [r6, #0]
 80236ec:	4626      	mov	r6, r4
 80236ee:	2e00      	cmp	r6, #0
 80236f0:	d140      	bne.n	8023774 <_malloc_r+0xcc>
 80236f2:	6823      	ldr	r3, [r4, #0]
 80236f4:	4631      	mov	r1, r6
 80236f6:	4638      	mov	r0, r7
 80236f8:	eb04 0803 	add.w	r8, r4, r3
 80236fc:	f000 fba0 	bl	8023e40 <_sbrk_r>
 8023700:	4580      	cmp	r8, r0
 8023702:	d13a      	bne.n	802377a <_malloc_r+0xd2>
 8023704:	6821      	ldr	r1, [r4, #0]
 8023706:	3503      	adds	r5, #3
 8023708:	1a6d      	subs	r5, r5, r1
 802370a:	f025 0503 	bic.w	r5, r5, #3
 802370e:	3508      	adds	r5, #8
 8023710:	2d0c      	cmp	r5, #12
 8023712:	bf38      	it	cc
 8023714:	250c      	movcc	r5, #12
 8023716:	4629      	mov	r1, r5
 8023718:	4638      	mov	r0, r7
 802371a:	f7ff ffa5 	bl	8023668 <sbrk_aligned>
 802371e:	3001      	adds	r0, #1
 8023720:	d02b      	beq.n	802377a <_malloc_r+0xd2>
 8023722:	6823      	ldr	r3, [r4, #0]
 8023724:	442b      	add	r3, r5
 8023726:	6023      	str	r3, [r4, #0]
 8023728:	e00e      	b.n	8023748 <_malloc_r+0xa0>
 802372a:	6822      	ldr	r2, [r4, #0]
 802372c:	1b52      	subs	r2, r2, r5
 802372e:	d41e      	bmi.n	802376e <_malloc_r+0xc6>
 8023730:	2a0b      	cmp	r2, #11
 8023732:	d916      	bls.n	8023762 <_malloc_r+0xba>
 8023734:	1961      	adds	r1, r4, r5
 8023736:	42a3      	cmp	r3, r4
 8023738:	6025      	str	r5, [r4, #0]
 802373a:	bf18      	it	ne
 802373c:	6059      	strne	r1, [r3, #4]
 802373e:	6863      	ldr	r3, [r4, #4]
 8023740:	bf08      	it	eq
 8023742:	6031      	streq	r1, [r6, #0]
 8023744:	5162      	str	r2, [r4, r5]
 8023746:	604b      	str	r3, [r1, #4]
 8023748:	4638      	mov	r0, r7
 802374a:	f104 060b 	add.w	r6, r4, #11
 802374e:	f000 ff35 	bl	80245bc <__malloc_unlock>
 8023752:	f026 0607 	bic.w	r6, r6, #7
 8023756:	1d23      	adds	r3, r4, #4
 8023758:	1af2      	subs	r2, r6, r3
 802375a:	d0b6      	beq.n	80236ca <_malloc_r+0x22>
 802375c:	1b9b      	subs	r3, r3, r6
 802375e:	50a3      	str	r3, [r4, r2]
 8023760:	e7b3      	b.n	80236ca <_malloc_r+0x22>
 8023762:	6862      	ldr	r2, [r4, #4]
 8023764:	42a3      	cmp	r3, r4
 8023766:	bf0c      	ite	eq
 8023768:	6032      	streq	r2, [r6, #0]
 802376a:	605a      	strne	r2, [r3, #4]
 802376c:	e7ec      	b.n	8023748 <_malloc_r+0xa0>
 802376e:	4623      	mov	r3, r4
 8023770:	6864      	ldr	r4, [r4, #4]
 8023772:	e7b2      	b.n	80236da <_malloc_r+0x32>
 8023774:	4634      	mov	r4, r6
 8023776:	6876      	ldr	r6, [r6, #4]
 8023778:	e7b9      	b.n	80236ee <_malloc_r+0x46>
 802377a:	230c      	movs	r3, #12
 802377c:	603b      	str	r3, [r7, #0]
 802377e:	4638      	mov	r0, r7
 8023780:	f000 ff1c 	bl	80245bc <__malloc_unlock>
 8023784:	e7a1      	b.n	80236ca <_malloc_r+0x22>
 8023786:	6025      	str	r5, [r4, #0]
 8023788:	e7de      	b.n	8023748 <_malloc_r+0xa0>
 802378a:	bf00      	nop
 802378c:	2400ffc4 	.word	0x2400ffc4

08023790 <__sfputc_r>:
 8023790:	6893      	ldr	r3, [r2, #8]
 8023792:	3b01      	subs	r3, #1
 8023794:	2b00      	cmp	r3, #0
 8023796:	b410      	push	{r4}
 8023798:	6093      	str	r3, [r2, #8]
 802379a:	da08      	bge.n	80237ae <__sfputc_r+0x1e>
 802379c:	6994      	ldr	r4, [r2, #24]
 802379e:	42a3      	cmp	r3, r4
 80237a0:	db01      	blt.n	80237a6 <__sfputc_r+0x16>
 80237a2:	290a      	cmp	r1, #10
 80237a4:	d103      	bne.n	80237ae <__sfputc_r+0x1e>
 80237a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237aa:	f000 bc69 	b.w	8024080 <__swbuf_r>
 80237ae:	6813      	ldr	r3, [r2, #0]
 80237b0:	1c58      	adds	r0, r3, #1
 80237b2:	6010      	str	r0, [r2, #0]
 80237b4:	7019      	strb	r1, [r3, #0]
 80237b6:	4608      	mov	r0, r1
 80237b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237bc:	4770      	bx	lr

080237be <__sfputs_r>:
 80237be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237c0:	4606      	mov	r6, r0
 80237c2:	460f      	mov	r7, r1
 80237c4:	4614      	mov	r4, r2
 80237c6:	18d5      	adds	r5, r2, r3
 80237c8:	42ac      	cmp	r4, r5
 80237ca:	d101      	bne.n	80237d0 <__sfputs_r+0x12>
 80237cc:	2000      	movs	r0, #0
 80237ce:	e007      	b.n	80237e0 <__sfputs_r+0x22>
 80237d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80237d4:	463a      	mov	r2, r7
 80237d6:	4630      	mov	r0, r6
 80237d8:	f7ff ffda 	bl	8023790 <__sfputc_r>
 80237dc:	1c43      	adds	r3, r0, #1
 80237de:	d1f3      	bne.n	80237c8 <__sfputs_r+0xa>
 80237e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080237e4 <_vfiprintf_r>:
 80237e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237e8:	460d      	mov	r5, r1
 80237ea:	b09d      	sub	sp, #116	; 0x74
 80237ec:	4614      	mov	r4, r2
 80237ee:	4698      	mov	r8, r3
 80237f0:	4606      	mov	r6, r0
 80237f2:	b118      	cbz	r0, 80237fc <_vfiprintf_r+0x18>
 80237f4:	6983      	ldr	r3, [r0, #24]
 80237f6:	b90b      	cbnz	r3, 80237fc <_vfiprintf_r+0x18>
 80237f8:	f7ff fddc 	bl	80233b4 <__sinit>
 80237fc:	4b89      	ldr	r3, [pc, #548]	; (8023a24 <_vfiprintf_r+0x240>)
 80237fe:	429d      	cmp	r5, r3
 8023800:	d11b      	bne.n	802383a <_vfiprintf_r+0x56>
 8023802:	6875      	ldr	r5, [r6, #4]
 8023804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023806:	07d9      	lsls	r1, r3, #31
 8023808:	d405      	bmi.n	8023816 <_vfiprintf_r+0x32>
 802380a:	89ab      	ldrh	r3, [r5, #12]
 802380c:	059a      	lsls	r2, r3, #22
 802380e:	d402      	bmi.n	8023816 <_vfiprintf_r+0x32>
 8023810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023812:	f7ff fea4 	bl	802355e <__retarget_lock_acquire_recursive>
 8023816:	89ab      	ldrh	r3, [r5, #12]
 8023818:	071b      	lsls	r3, r3, #28
 802381a:	d501      	bpl.n	8023820 <_vfiprintf_r+0x3c>
 802381c:	692b      	ldr	r3, [r5, #16]
 802381e:	b9eb      	cbnz	r3, 802385c <_vfiprintf_r+0x78>
 8023820:	4629      	mov	r1, r5
 8023822:	4630      	mov	r0, r6
 8023824:	f000 fc90 	bl	8024148 <__swsetup_r>
 8023828:	b1c0      	cbz	r0, 802385c <_vfiprintf_r+0x78>
 802382a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802382c:	07dc      	lsls	r4, r3, #31
 802382e:	d50e      	bpl.n	802384e <_vfiprintf_r+0x6a>
 8023830:	f04f 30ff 	mov.w	r0, #4294967295
 8023834:	b01d      	add	sp, #116	; 0x74
 8023836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802383a:	4b7b      	ldr	r3, [pc, #492]	; (8023a28 <_vfiprintf_r+0x244>)
 802383c:	429d      	cmp	r5, r3
 802383e:	d101      	bne.n	8023844 <_vfiprintf_r+0x60>
 8023840:	68b5      	ldr	r5, [r6, #8]
 8023842:	e7df      	b.n	8023804 <_vfiprintf_r+0x20>
 8023844:	4b79      	ldr	r3, [pc, #484]	; (8023a2c <_vfiprintf_r+0x248>)
 8023846:	429d      	cmp	r5, r3
 8023848:	bf08      	it	eq
 802384a:	68f5      	ldreq	r5, [r6, #12]
 802384c:	e7da      	b.n	8023804 <_vfiprintf_r+0x20>
 802384e:	89ab      	ldrh	r3, [r5, #12]
 8023850:	0598      	lsls	r0, r3, #22
 8023852:	d4ed      	bmi.n	8023830 <_vfiprintf_r+0x4c>
 8023854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023856:	f7ff fe84 	bl	8023562 <__retarget_lock_release_recursive>
 802385a:	e7e9      	b.n	8023830 <_vfiprintf_r+0x4c>
 802385c:	2300      	movs	r3, #0
 802385e:	9309      	str	r3, [sp, #36]	; 0x24
 8023860:	2320      	movs	r3, #32
 8023862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023866:	f8cd 800c 	str.w	r8, [sp, #12]
 802386a:	2330      	movs	r3, #48	; 0x30
 802386c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023a30 <_vfiprintf_r+0x24c>
 8023870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023874:	f04f 0901 	mov.w	r9, #1
 8023878:	4623      	mov	r3, r4
 802387a:	469a      	mov	sl, r3
 802387c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023880:	b10a      	cbz	r2, 8023886 <_vfiprintf_r+0xa2>
 8023882:	2a25      	cmp	r2, #37	; 0x25
 8023884:	d1f9      	bne.n	802387a <_vfiprintf_r+0x96>
 8023886:	ebba 0b04 	subs.w	fp, sl, r4
 802388a:	d00b      	beq.n	80238a4 <_vfiprintf_r+0xc0>
 802388c:	465b      	mov	r3, fp
 802388e:	4622      	mov	r2, r4
 8023890:	4629      	mov	r1, r5
 8023892:	4630      	mov	r0, r6
 8023894:	f7ff ff93 	bl	80237be <__sfputs_r>
 8023898:	3001      	adds	r0, #1
 802389a:	f000 80aa 	beq.w	80239f2 <_vfiprintf_r+0x20e>
 802389e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80238a0:	445a      	add	r2, fp
 80238a2:	9209      	str	r2, [sp, #36]	; 0x24
 80238a4:	f89a 3000 	ldrb.w	r3, [sl]
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	f000 80a2 	beq.w	80239f2 <_vfiprintf_r+0x20e>
 80238ae:	2300      	movs	r3, #0
 80238b0:	f04f 32ff 	mov.w	r2, #4294967295
 80238b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80238b8:	f10a 0a01 	add.w	sl, sl, #1
 80238bc:	9304      	str	r3, [sp, #16]
 80238be:	9307      	str	r3, [sp, #28]
 80238c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80238c4:	931a      	str	r3, [sp, #104]	; 0x68
 80238c6:	4654      	mov	r4, sl
 80238c8:	2205      	movs	r2, #5
 80238ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238ce:	4858      	ldr	r0, [pc, #352]	; (8023a30 <_vfiprintf_r+0x24c>)
 80238d0:	f7dc fd26 	bl	8000320 <memchr>
 80238d4:	9a04      	ldr	r2, [sp, #16]
 80238d6:	b9d8      	cbnz	r0, 8023910 <_vfiprintf_r+0x12c>
 80238d8:	06d1      	lsls	r1, r2, #27
 80238da:	bf44      	itt	mi
 80238dc:	2320      	movmi	r3, #32
 80238de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80238e2:	0713      	lsls	r3, r2, #28
 80238e4:	bf44      	itt	mi
 80238e6:	232b      	movmi	r3, #43	; 0x2b
 80238e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80238ec:	f89a 3000 	ldrb.w	r3, [sl]
 80238f0:	2b2a      	cmp	r3, #42	; 0x2a
 80238f2:	d015      	beq.n	8023920 <_vfiprintf_r+0x13c>
 80238f4:	9a07      	ldr	r2, [sp, #28]
 80238f6:	4654      	mov	r4, sl
 80238f8:	2000      	movs	r0, #0
 80238fa:	f04f 0c0a 	mov.w	ip, #10
 80238fe:	4621      	mov	r1, r4
 8023900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023904:	3b30      	subs	r3, #48	; 0x30
 8023906:	2b09      	cmp	r3, #9
 8023908:	d94e      	bls.n	80239a8 <_vfiprintf_r+0x1c4>
 802390a:	b1b0      	cbz	r0, 802393a <_vfiprintf_r+0x156>
 802390c:	9207      	str	r2, [sp, #28]
 802390e:	e014      	b.n	802393a <_vfiprintf_r+0x156>
 8023910:	eba0 0308 	sub.w	r3, r0, r8
 8023914:	fa09 f303 	lsl.w	r3, r9, r3
 8023918:	4313      	orrs	r3, r2
 802391a:	9304      	str	r3, [sp, #16]
 802391c:	46a2      	mov	sl, r4
 802391e:	e7d2      	b.n	80238c6 <_vfiprintf_r+0xe2>
 8023920:	9b03      	ldr	r3, [sp, #12]
 8023922:	1d19      	adds	r1, r3, #4
 8023924:	681b      	ldr	r3, [r3, #0]
 8023926:	9103      	str	r1, [sp, #12]
 8023928:	2b00      	cmp	r3, #0
 802392a:	bfbb      	ittet	lt
 802392c:	425b      	neglt	r3, r3
 802392e:	f042 0202 	orrlt.w	r2, r2, #2
 8023932:	9307      	strge	r3, [sp, #28]
 8023934:	9307      	strlt	r3, [sp, #28]
 8023936:	bfb8      	it	lt
 8023938:	9204      	strlt	r2, [sp, #16]
 802393a:	7823      	ldrb	r3, [r4, #0]
 802393c:	2b2e      	cmp	r3, #46	; 0x2e
 802393e:	d10c      	bne.n	802395a <_vfiprintf_r+0x176>
 8023940:	7863      	ldrb	r3, [r4, #1]
 8023942:	2b2a      	cmp	r3, #42	; 0x2a
 8023944:	d135      	bne.n	80239b2 <_vfiprintf_r+0x1ce>
 8023946:	9b03      	ldr	r3, [sp, #12]
 8023948:	1d1a      	adds	r2, r3, #4
 802394a:	681b      	ldr	r3, [r3, #0]
 802394c:	9203      	str	r2, [sp, #12]
 802394e:	2b00      	cmp	r3, #0
 8023950:	bfb8      	it	lt
 8023952:	f04f 33ff 	movlt.w	r3, #4294967295
 8023956:	3402      	adds	r4, #2
 8023958:	9305      	str	r3, [sp, #20]
 802395a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023a40 <_vfiprintf_r+0x25c>
 802395e:	7821      	ldrb	r1, [r4, #0]
 8023960:	2203      	movs	r2, #3
 8023962:	4650      	mov	r0, sl
 8023964:	f7dc fcdc 	bl	8000320 <memchr>
 8023968:	b140      	cbz	r0, 802397c <_vfiprintf_r+0x198>
 802396a:	2340      	movs	r3, #64	; 0x40
 802396c:	eba0 000a 	sub.w	r0, r0, sl
 8023970:	fa03 f000 	lsl.w	r0, r3, r0
 8023974:	9b04      	ldr	r3, [sp, #16]
 8023976:	4303      	orrs	r3, r0
 8023978:	3401      	adds	r4, #1
 802397a:	9304      	str	r3, [sp, #16]
 802397c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023980:	482c      	ldr	r0, [pc, #176]	; (8023a34 <_vfiprintf_r+0x250>)
 8023982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023986:	2206      	movs	r2, #6
 8023988:	f7dc fcca 	bl	8000320 <memchr>
 802398c:	2800      	cmp	r0, #0
 802398e:	d03f      	beq.n	8023a10 <_vfiprintf_r+0x22c>
 8023990:	4b29      	ldr	r3, [pc, #164]	; (8023a38 <_vfiprintf_r+0x254>)
 8023992:	bb1b      	cbnz	r3, 80239dc <_vfiprintf_r+0x1f8>
 8023994:	9b03      	ldr	r3, [sp, #12]
 8023996:	3307      	adds	r3, #7
 8023998:	f023 0307 	bic.w	r3, r3, #7
 802399c:	3308      	adds	r3, #8
 802399e:	9303      	str	r3, [sp, #12]
 80239a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239a2:	443b      	add	r3, r7
 80239a4:	9309      	str	r3, [sp, #36]	; 0x24
 80239a6:	e767      	b.n	8023878 <_vfiprintf_r+0x94>
 80239a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80239ac:	460c      	mov	r4, r1
 80239ae:	2001      	movs	r0, #1
 80239b0:	e7a5      	b.n	80238fe <_vfiprintf_r+0x11a>
 80239b2:	2300      	movs	r3, #0
 80239b4:	3401      	adds	r4, #1
 80239b6:	9305      	str	r3, [sp, #20]
 80239b8:	4619      	mov	r1, r3
 80239ba:	f04f 0c0a 	mov.w	ip, #10
 80239be:	4620      	mov	r0, r4
 80239c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80239c4:	3a30      	subs	r2, #48	; 0x30
 80239c6:	2a09      	cmp	r2, #9
 80239c8:	d903      	bls.n	80239d2 <_vfiprintf_r+0x1ee>
 80239ca:	2b00      	cmp	r3, #0
 80239cc:	d0c5      	beq.n	802395a <_vfiprintf_r+0x176>
 80239ce:	9105      	str	r1, [sp, #20]
 80239d0:	e7c3      	b.n	802395a <_vfiprintf_r+0x176>
 80239d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80239d6:	4604      	mov	r4, r0
 80239d8:	2301      	movs	r3, #1
 80239da:	e7f0      	b.n	80239be <_vfiprintf_r+0x1da>
 80239dc:	ab03      	add	r3, sp, #12
 80239de:	9300      	str	r3, [sp, #0]
 80239e0:	462a      	mov	r2, r5
 80239e2:	4b16      	ldr	r3, [pc, #88]	; (8023a3c <_vfiprintf_r+0x258>)
 80239e4:	a904      	add	r1, sp, #16
 80239e6:	4630      	mov	r0, r6
 80239e8:	f3af 8000 	nop.w
 80239ec:	4607      	mov	r7, r0
 80239ee:	1c78      	adds	r0, r7, #1
 80239f0:	d1d6      	bne.n	80239a0 <_vfiprintf_r+0x1bc>
 80239f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80239f4:	07d9      	lsls	r1, r3, #31
 80239f6:	d405      	bmi.n	8023a04 <_vfiprintf_r+0x220>
 80239f8:	89ab      	ldrh	r3, [r5, #12]
 80239fa:	059a      	lsls	r2, r3, #22
 80239fc:	d402      	bmi.n	8023a04 <_vfiprintf_r+0x220>
 80239fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023a00:	f7ff fdaf 	bl	8023562 <__retarget_lock_release_recursive>
 8023a04:	89ab      	ldrh	r3, [r5, #12]
 8023a06:	065b      	lsls	r3, r3, #25
 8023a08:	f53f af12 	bmi.w	8023830 <_vfiprintf_r+0x4c>
 8023a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023a0e:	e711      	b.n	8023834 <_vfiprintf_r+0x50>
 8023a10:	ab03      	add	r3, sp, #12
 8023a12:	9300      	str	r3, [sp, #0]
 8023a14:	462a      	mov	r2, r5
 8023a16:	4b09      	ldr	r3, [pc, #36]	; (8023a3c <_vfiprintf_r+0x258>)
 8023a18:	a904      	add	r1, sp, #16
 8023a1a:	4630      	mov	r0, r6
 8023a1c:	f000 f880 	bl	8023b20 <_printf_i>
 8023a20:	e7e4      	b.n	80239ec <_vfiprintf_r+0x208>
 8023a22:	bf00      	nop
 8023a24:	08027328 	.word	0x08027328
 8023a28:	08027348 	.word	0x08027348
 8023a2c:	08027308 	.word	0x08027308
 8023a30:	0802736c 	.word	0x0802736c
 8023a34:	08027376 	.word	0x08027376
 8023a38:	00000000 	.word	0x00000000
 8023a3c:	080237bf 	.word	0x080237bf
 8023a40:	08027372 	.word	0x08027372

08023a44 <_printf_common>:
 8023a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a48:	4616      	mov	r6, r2
 8023a4a:	4699      	mov	r9, r3
 8023a4c:	688a      	ldr	r2, [r1, #8]
 8023a4e:	690b      	ldr	r3, [r1, #16]
 8023a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023a54:	4293      	cmp	r3, r2
 8023a56:	bfb8      	it	lt
 8023a58:	4613      	movlt	r3, r2
 8023a5a:	6033      	str	r3, [r6, #0]
 8023a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023a60:	4607      	mov	r7, r0
 8023a62:	460c      	mov	r4, r1
 8023a64:	b10a      	cbz	r2, 8023a6a <_printf_common+0x26>
 8023a66:	3301      	adds	r3, #1
 8023a68:	6033      	str	r3, [r6, #0]
 8023a6a:	6823      	ldr	r3, [r4, #0]
 8023a6c:	0699      	lsls	r1, r3, #26
 8023a6e:	bf42      	ittt	mi
 8023a70:	6833      	ldrmi	r3, [r6, #0]
 8023a72:	3302      	addmi	r3, #2
 8023a74:	6033      	strmi	r3, [r6, #0]
 8023a76:	6825      	ldr	r5, [r4, #0]
 8023a78:	f015 0506 	ands.w	r5, r5, #6
 8023a7c:	d106      	bne.n	8023a8c <_printf_common+0x48>
 8023a7e:	f104 0a19 	add.w	sl, r4, #25
 8023a82:	68e3      	ldr	r3, [r4, #12]
 8023a84:	6832      	ldr	r2, [r6, #0]
 8023a86:	1a9b      	subs	r3, r3, r2
 8023a88:	42ab      	cmp	r3, r5
 8023a8a:	dc26      	bgt.n	8023ada <_printf_common+0x96>
 8023a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023a90:	1e13      	subs	r3, r2, #0
 8023a92:	6822      	ldr	r2, [r4, #0]
 8023a94:	bf18      	it	ne
 8023a96:	2301      	movne	r3, #1
 8023a98:	0692      	lsls	r2, r2, #26
 8023a9a:	d42b      	bmi.n	8023af4 <_printf_common+0xb0>
 8023a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023aa0:	4649      	mov	r1, r9
 8023aa2:	4638      	mov	r0, r7
 8023aa4:	47c0      	blx	r8
 8023aa6:	3001      	adds	r0, #1
 8023aa8:	d01e      	beq.n	8023ae8 <_printf_common+0xa4>
 8023aaa:	6823      	ldr	r3, [r4, #0]
 8023aac:	68e5      	ldr	r5, [r4, #12]
 8023aae:	6832      	ldr	r2, [r6, #0]
 8023ab0:	f003 0306 	and.w	r3, r3, #6
 8023ab4:	2b04      	cmp	r3, #4
 8023ab6:	bf08      	it	eq
 8023ab8:	1aad      	subeq	r5, r5, r2
 8023aba:	68a3      	ldr	r3, [r4, #8]
 8023abc:	6922      	ldr	r2, [r4, #16]
 8023abe:	bf0c      	ite	eq
 8023ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023ac4:	2500      	movne	r5, #0
 8023ac6:	4293      	cmp	r3, r2
 8023ac8:	bfc4      	itt	gt
 8023aca:	1a9b      	subgt	r3, r3, r2
 8023acc:	18ed      	addgt	r5, r5, r3
 8023ace:	2600      	movs	r6, #0
 8023ad0:	341a      	adds	r4, #26
 8023ad2:	42b5      	cmp	r5, r6
 8023ad4:	d11a      	bne.n	8023b0c <_printf_common+0xc8>
 8023ad6:	2000      	movs	r0, #0
 8023ad8:	e008      	b.n	8023aec <_printf_common+0xa8>
 8023ada:	2301      	movs	r3, #1
 8023adc:	4652      	mov	r2, sl
 8023ade:	4649      	mov	r1, r9
 8023ae0:	4638      	mov	r0, r7
 8023ae2:	47c0      	blx	r8
 8023ae4:	3001      	adds	r0, #1
 8023ae6:	d103      	bne.n	8023af0 <_printf_common+0xac>
 8023ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8023aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023af0:	3501      	adds	r5, #1
 8023af2:	e7c6      	b.n	8023a82 <_printf_common+0x3e>
 8023af4:	18e1      	adds	r1, r4, r3
 8023af6:	1c5a      	adds	r2, r3, #1
 8023af8:	2030      	movs	r0, #48	; 0x30
 8023afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023afe:	4422      	add	r2, r4
 8023b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023b08:	3302      	adds	r3, #2
 8023b0a:	e7c7      	b.n	8023a9c <_printf_common+0x58>
 8023b0c:	2301      	movs	r3, #1
 8023b0e:	4622      	mov	r2, r4
 8023b10:	4649      	mov	r1, r9
 8023b12:	4638      	mov	r0, r7
 8023b14:	47c0      	blx	r8
 8023b16:	3001      	adds	r0, #1
 8023b18:	d0e6      	beq.n	8023ae8 <_printf_common+0xa4>
 8023b1a:	3601      	adds	r6, #1
 8023b1c:	e7d9      	b.n	8023ad2 <_printf_common+0x8e>
	...

08023b20 <_printf_i>:
 8023b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023b24:	7e0f      	ldrb	r7, [r1, #24]
 8023b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023b28:	2f78      	cmp	r7, #120	; 0x78
 8023b2a:	4691      	mov	r9, r2
 8023b2c:	4680      	mov	r8, r0
 8023b2e:	460c      	mov	r4, r1
 8023b30:	469a      	mov	sl, r3
 8023b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023b36:	d807      	bhi.n	8023b48 <_printf_i+0x28>
 8023b38:	2f62      	cmp	r7, #98	; 0x62
 8023b3a:	d80a      	bhi.n	8023b52 <_printf_i+0x32>
 8023b3c:	2f00      	cmp	r7, #0
 8023b3e:	f000 80d8 	beq.w	8023cf2 <_printf_i+0x1d2>
 8023b42:	2f58      	cmp	r7, #88	; 0x58
 8023b44:	f000 80a3 	beq.w	8023c8e <_printf_i+0x16e>
 8023b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023b50:	e03a      	b.n	8023bc8 <_printf_i+0xa8>
 8023b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023b56:	2b15      	cmp	r3, #21
 8023b58:	d8f6      	bhi.n	8023b48 <_printf_i+0x28>
 8023b5a:	a101      	add	r1, pc, #4	; (adr r1, 8023b60 <_printf_i+0x40>)
 8023b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023b60:	08023bb9 	.word	0x08023bb9
 8023b64:	08023bcd 	.word	0x08023bcd
 8023b68:	08023b49 	.word	0x08023b49
 8023b6c:	08023b49 	.word	0x08023b49
 8023b70:	08023b49 	.word	0x08023b49
 8023b74:	08023b49 	.word	0x08023b49
 8023b78:	08023bcd 	.word	0x08023bcd
 8023b7c:	08023b49 	.word	0x08023b49
 8023b80:	08023b49 	.word	0x08023b49
 8023b84:	08023b49 	.word	0x08023b49
 8023b88:	08023b49 	.word	0x08023b49
 8023b8c:	08023cd9 	.word	0x08023cd9
 8023b90:	08023bfd 	.word	0x08023bfd
 8023b94:	08023cbb 	.word	0x08023cbb
 8023b98:	08023b49 	.word	0x08023b49
 8023b9c:	08023b49 	.word	0x08023b49
 8023ba0:	08023cfb 	.word	0x08023cfb
 8023ba4:	08023b49 	.word	0x08023b49
 8023ba8:	08023bfd 	.word	0x08023bfd
 8023bac:	08023b49 	.word	0x08023b49
 8023bb0:	08023b49 	.word	0x08023b49
 8023bb4:	08023cc3 	.word	0x08023cc3
 8023bb8:	682b      	ldr	r3, [r5, #0]
 8023bba:	1d1a      	adds	r2, r3, #4
 8023bbc:	681b      	ldr	r3, [r3, #0]
 8023bbe:	602a      	str	r2, [r5, #0]
 8023bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023bc8:	2301      	movs	r3, #1
 8023bca:	e0a3      	b.n	8023d14 <_printf_i+0x1f4>
 8023bcc:	6820      	ldr	r0, [r4, #0]
 8023bce:	6829      	ldr	r1, [r5, #0]
 8023bd0:	0606      	lsls	r6, r0, #24
 8023bd2:	f101 0304 	add.w	r3, r1, #4
 8023bd6:	d50a      	bpl.n	8023bee <_printf_i+0xce>
 8023bd8:	680e      	ldr	r6, [r1, #0]
 8023bda:	602b      	str	r3, [r5, #0]
 8023bdc:	2e00      	cmp	r6, #0
 8023bde:	da03      	bge.n	8023be8 <_printf_i+0xc8>
 8023be0:	232d      	movs	r3, #45	; 0x2d
 8023be2:	4276      	negs	r6, r6
 8023be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023be8:	485e      	ldr	r0, [pc, #376]	; (8023d64 <_printf_i+0x244>)
 8023bea:	230a      	movs	r3, #10
 8023bec:	e019      	b.n	8023c22 <_printf_i+0x102>
 8023bee:	680e      	ldr	r6, [r1, #0]
 8023bf0:	602b      	str	r3, [r5, #0]
 8023bf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023bf6:	bf18      	it	ne
 8023bf8:	b236      	sxthne	r6, r6
 8023bfa:	e7ef      	b.n	8023bdc <_printf_i+0xbc>
 8023bfc:	682b      	ldr	r3, [r5, #0]
 8023bfe:	6820      	ldr	r0, [r4, #0]
 8023c00:	1d19      	adds	r1, r3, #4
 8023c02:	6029      	str	r1, [r5, #0]
 8023c04:	0601      	lsls	r1, r0, #24
 8023c06:	d501      	bpl.n	8023c0c <_printf_i+0xec>
 8023c08:	681e      	ldr	r6, [r3, #0]
 8023c0a:	e002      	b.n	8023c12 <_printf_i+0xf2>
 8023c0c:	0646      	lsls	r6, r0, #25
 8023c0e:	d5fb      	bpl.n	8023c08 <_printf_i+0xe8>
 8023c10:	881e      	ldrh	r6, [r3, #0]
 8023c12:	4854      	ldr	r0, [pc, #336]	; (8023d64 <_printf_i+0x244>)
 8023c14:	2f6f      	cmp	r7, #111	; 0x6f
 8023c16:	bf0c      	ite	eq
 8023c18:	2308      	moveq	r3, #8
 8023c1a:	230a      	movne	r3, #10
 8023c1c:	2100      	movs	r1, #0
 8023c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023c22:	6865      	ldr	r5, [r4, #4]
 8023c24:	60a5      	str	r5, [r4, #8]
 8023c26:	2d00      	cmp	r5, #0
 8023c28:	bfa2      	ittt	ge
 8023c2a:	6821      	ldrge	r1, [r4, #0]
 8023c2c:	f021 0104 	bicge.w	r1, r1, #4
 8023c30:	6021      	strge	r1, [r4, #0]
 8023c32:	b90e      	cbnz	r6, 8023c38 <_printf_i+0x118>
 8023c34:	2d00      	cmp	r5, #0
 8023c36:	d04d      	beq.n	8023cd4 <_printf_i+0x1b4>
 8023c38:	4615      	mov	r5, r2
 8023c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8023c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8023c42:	5dc7      	ldrb	r7, [r0, r7]
 8023c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023c48:	4637      	mov	r7, r6
 8023c4a:	42bb      	cmp	r3, r7
 8023c4c:	460e      	mov	r6, r1
 8023c4e:	d9f4      	bls.n	8023c3a <_printf_i+0x11a>
 8023c50:	2b08      	cmp	r3, #8
 8023c52:	d10b      	bne.n	8023c6c <_printf_i+0x14c>
 8023c54:	6823      	ldr	r3, [r4, #0]
 8023c56:	07de      	lsls	r6, r3, #31
 8023c58:	d508      	bpl.n	8023c6c <_printf_i+0x14c>
 8023c5a:	6923      	ldr	r3, [r4, #16]
 8023c5c:	6861      	ldr	r1, [r4, #4]
 8023c5e:	4299      	cmp	r1, r3
 8023c60:	bfde      	ittt	le
 8023c62:	2330      	movle	r3, #48	; 0x30
 8023c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023c6c:	1b52      	subs	r2, r2, r5
 8023c6e:	6122      	str	r2, [r4, #16]
 8023c70:	f8cd a000 	str.w	sl, [sp]
 8023c74:	464b      	mov	r3, r9
 8023c76:	aa03      	add	r2, sp, #12
 8023c78:	4621      	mov	r1, r4
 8023c7a:	4640      	mov	r0, r8
 8023c7c:	f7ff fee2 	bl	8023a44 <_printf_common>
 8023c80:	3001      	adds	r0, #1
 8023c82:	d14c      	bne.n	8023d1e <_printf_i+0x1fe>
 8023c84:	f04f 30ff 	mov.w	r0, #4294967295
 8023c88:	b004      	add	sp, #16
 8023c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c8e:	4835      	ldr	r0, [pc, #212]	; (8023d64 <_printf_i+0x244>)
 8023c90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023c94:	6829      	ldr	r1, [r5, #0]
 8023c96:	6823      	ldr	r3, [r4, #0]
 8023c98:	f851 6b04 	ldr.w	r6, [r1], #4
 8023c9c:	6029      	str	r1, [r5, #0]
 8023c9e:	061d      	lsls	r5, r3, #24
 8023ca0:	d514      	bpl.n	8023ccc <_printf_i+0x1ac>
 8023ca2:	07df      	lsls	r7, r3, #31
 8023ca4:	bf44      	itt	mi
 8023ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8023caa:	6023      	strmi	r3, [r4, #0]
 8023cac:	b91e      	cbnz	r6, 8023cb6 <_printf_i+0x196>
 8023cae:	6823      	ldr	r3, [r4, #0]
 8023cb0:	f023 0320 	bic.w	r3, r3, #32
 8023cb4:	6023      	str	r3, [r4, #0]
 8023cb6:	2310      	movs	r3, #16
 8023cb8:	e7b0      	b.n	8023c1c <_printf_i+0xfc>
 8023cba:	6823      	ldr	r3, [r4, #0]
 8023cbc:	f043 0320 	orr.w	r3, r3, #32
 8023cc0:	6023      	str	r3, [r4, #0]
 8023cc2:	2378      	movs	r3, #120	; 0x78
 8023cc4:	4828      	ldr	r0, [pc, #160]	; (8023d68 <_printf_i+0x248>)
 8023cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023cca:	e7e3      	b.n	8023c94 <_printf_i+0x174>
 8023ccc:	0659      	lsls	r1, r3, #25
 8023cce:	bf48      	it	mi
 8023cd0:	b2b6      	uxthmi	r6, r6
 8023cd2:	e7e6      	b.n	8023ca2 <_printf_i+0x182>
 8023cd4:	4615      	mov	r5, r2
 8023cd6:	e7bb      	b.n	8023c50 <_printf_i+0x130>
 8023cd8:	682b      	ldr	r3, [r5, #0]
 8023cda:	6826      	ldr	r6, [r4, #0]
 8023cdc:	6961      	ldr	r1, [r4, #20]
 8023cde:	1d18      	adds	r0, r3, #4
 8023ce0:	6028      	str	r0, [r5, #0]
 8023ce2:	0635      	lsls	r5, r6, #24
 8023ce4:	681b      	ldr	r3, [r3, #0]
 8023ce6:	d501      	bpl.n	8023cec <_printf_i+0x1cc>
 8023ce8:	6019      	str	r1, [r3, #0]
 8023cea:	e002      	b.n	8023cf2 <_printf_i+0x1d2>
 8023cec:	0670      	lsls	r0, r6, #25
 8023cee:	d5fb      	bpl.n	8023ce8 <_printf_i+0x1c8>
 8023cf0:	8019      	strh	r1, [r3, #0]
 8023cf2:	2300      	movs	r3, #0
 8023cf4:	6123      	str	r3, [r4, #16]
 8023cf6:	4615      	mov	r5, r2
 8023cf8:	e7ba      	b.n	8023c70 <_printf_i+0x150>
 8023cfa:	682b      	ldr	r3, [r5, #0]
 8023cfc:	1d1a      	adds	r2, r3, #4
 8023cfe:	602a      	str	r2, [r5, #0]
 8023d00:	681d      	ldr	r5, [r3, #0]
 8023d02:	6862      	ldr	r2, [r4, #4]
 8023d04:	2100      	movs	r1, #0
 8023d06:	4628      	mov	r0, r5
 8023d08:	f7dc fb0a 	bl	8000320 <memchr>
 8023d0c:	b108      	cbz	r0, 8023d12 <_printf_i+0x1f2>
 8023d0e:	1b40      	subs	r0, r0, r5
 8023d10:	6060      	str	r0, [r4, #4]
 8023d12:	6863      	ldr	r3, [r4, #4]
 8023d14:	6123      	str	r3, [r4, #16]
 8023d16:	2300      	movs	r3, #0
 8023d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023d1c:	e7a8      	b.n	8023c70 <_printf_i+0x150>
 8023d1e:	6923      	ldr	r3, [r4, #16]
 8023d20:	462a      	mov	r2, r5
 8023d22:	4649      	mov	r1, r9
 8023d24:	4640      	mov	r0, r8
 8023d26:	47d0      	blx	sl
 8023d28:	3001      	adds	r0, #1
 8023d2a:	d0ab      	beq.n	8023c84 <_printf_i+0x164>
 8023d2c:	6823      	ldr	r3, [r4, #0]
 8023d2e:	079b      	lsls	r3, r3, #30
 8023d30:	d413      	bmi.n	8023d5a <_printf_i+0x23a>
 8023d32:	68e0      	ldr	r0, [r4, #12]
 8023d34:	9b03      	ldr	r3, [sp, #12]
 8023d36:	4298      	cmp	r0, r3
 8023d38:	bfb8      	it	lt
 8023d3a:	4618      	movlt	r0, r3
 8023d3c:	e7a4      	b.n	8023c88 <_printf_i+0x168>
 8023d3e:	2301      	movs	r3, #1
 8023d40:	4632      	mov	r2, r6
 8023d42:	4649      	mov	r1, r9
 8023d44:	4640      	mov	r0, r8
 8023d46:	47d0      	blx	sl
 8023d48:	3001      	adds	r0, #1
 8023d4a:	d09b      	beq.n	8023c84 <_printf_i+0x164>
 8023d4c:	3501      	adds	r5, #1
 8023d4e:	68e3      	ldr	r3, [r4, #12]
 8023d50:	9903      	ldr	r1, [sp, #12]
 8023d52:	1a5b      	subs	r3, r3, r1
 8023d54:	42ab      	cmp	r3, r5
 8023d56:	dcf2      	bgt.n	8023d3e <_printf_i+0x21e>
 8023d58:	e7eb      	b.n	8023d32 <_printf_i+0x212>
 8023d5a:	2500      	movs	r5, #0
 8023d5c:	f104 0619 	add.w	r6, r4, #25
 8023d60:	e7f5      	b.n	8023d4e <_printf_i+0x22e>
 8023d62:	bf00      	nop
 8023d64:	0802737d 	.word	0x0802737d
 8023d68:	0802738e 	.word	0x0802738e

08023d6c <cleanup_glue>:
 8023d6c:	b538      	push	{r3, r4, r5, lr}
 8023d6e:	460c      	mov	r4, r1
 8023d70:	6809      	ldr	r1, [r1, #0]
 8023d72:	4605      	mov	r5, r0
 8023d74:	b109      	cbz	r1, 8023d7a <cleanup_glue+0xe>
 8023d76:	f7ff fff9 	bl	8023d6c <cleanup_glue>
 8023d7a:	4621      	mov	r1, r4
 8023d7c:	4628      	mov	r0, r5
 8023d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023d82:	f7ff bc25 	b.w	80235d0 <_free_r>
	...

08023d88 <_reclaim_reent>:
 8023d88:	4b2c      	ldr	r3, [pc, #176]	; (8023e3c <_reclaim_reent+0xb4>)
 8023d8a:	681b      	ldr	r3, [r3, #0]
 8023d8c:	4283      	cmp	r3, r0
 8023d8e:	b570      	push	{r4, r5, r6, lr}
 8023d90:	4604      	mov	r4, r0
 8023d92:	d051      	beq.n	8023e38 <_reclaim_reent+0xb0>
 8023d94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023d96:	b143      	cbz	r3, 8023daa <_reclaim_reent+0x22>
 8023d98:	68db      	ldr	r3, [r3, #12]
 8023d9a:	2b00      	cmp	r3, #0
 8023d9c:	d14a      	bne.n	8023e34 <_reclaim_reent+0xac>
 8023d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023da0:	6819      	ldr	r1, [r3, #0]
 8023da2:	b111      	cbz	r1, 8023daa <_reclaim_reent+0x22>
 8023da4:	4620      	mov	r0, r4
 8023da6:	f7ff fc13 	bl	80235d0 <_free_r>
 8023daa:	6961      	ldr	r1, [r4, #20]
 8023dac:	b111      	cbz	r1, 8023db4 <_reclaim_reent+0x2c>
 8023dae:	4620      	mov	r0, r4
 8023db0:	f7ff fc0e 	bl	80235d0 <_free_r>
 8023db4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023db6:	b111      	cbz	r1, 8023dbe <_reclaim_reent+0x36>
 8023db8:	4620      	mov	r0, r4
 8023dba:	f7ff fc09 	bl	80235d0 <_free_r>
 8023dbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023dc0:	b111      	cbz	r1, 8023dc8 <_reclaim_reent+0x40>
 8023dc2:	4620      	mov	r0, r4
 8023dc4:	f7ff fc04 	bl	80235d0 <_free_r>
 8023dc8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8023dca:	b111      	cbz	r1, 8023dd2 <_reclaim_reent+0x4a>
 8023dcc:	4620      	mov	r0, r4
 8023dce:	f7ff fbff 	bl	80235d0 <_free_r>
 8023dd2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023dd4:	b111      	cbz	r1, 8023ddc <_reclaim_reent+0x54>
 8023dd6:	4620      	mov	r0, r4
 8023dd8:	f7ff fbfa 	bl	80235d0 <_free_r>
 8023ddc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8023dde:	b111      	cbz	r1, 8023de6 <_reclaim_reent+0x5e>
 8023de0:	4620      	mov	r0, r4
 8023de2:	f7ff fbf5 	bl	80235d0 <_free_r>
 8023de6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023de8:	b111      	cbz	r1, 8023df0 <_reclaim_reent+0x68>
 8023dea:	4620      	mov	r0, r4
 8023dec:	f7ff fbf0 	bl	80235d0 <_free_r>
 8023df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023df2:	b111      	cbz	r1, 8023dfa <_reclaim_reent+0x72>
 8023df4:	4620      	mov	r0, r4
 8023df6:	f7ff fbeb 	bl	80235d0 <_free_r>
 8023dfa:	69a3      	ldr	r3, [r4, #24]
 8023dfc:	b1e3      	cbz	r3, 8023e38 <_reclaim_reent+0xb0>
 8023dfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8023e00:	4620      	mov	r0, r4
 8023e02:	4798      	blx	r3
 8023e04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8023e06:	b1b9      	cbz	r1, 8023e38 <_reclaim_reent+0xb0>
 8023e08:	4620      	mov	r0, r4
 8023e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023e0e:	f7ff bfad 	b.w	8023d6c <cleanup_glue>
 8023e12:	5949      	ldr	r1, [r1, r5]
 8023e14:	b941      	cbnz	r1, 8023e28 <_reclaim_reent+0xa0>
 8023e16:	3504      	adds	r5, #4
 8023e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023e1a:	2d80      	cmp	r5, #128	; 0x80
 8023e1c:	68d9      	ldr	r1, [r3, #12]
 8023e1e:	d1f8      	bne.n	8023e12 <_reclaim_reent+0x8a>
 8023e20:	4620      	mov	r0, r4
 8023e22:	f7ff fbd5 	bl	80235d0 <_free_r>
 8023e26:	e7ba      	b.n	8023d9e <_reclaim_reent+0x16>
 8023e28:	680e      	ldr	r6, [r1, #0]
 8023e2a:	4620      	mov	r0, r4
 8023e2c:	f7ff fbd0 	bl	80235d0 <_free_r>
 8023e30:	4631      	mov	r1, r6
 8023e32:	e7ef      	b.n	8023e14 <_reclaim_reent+0x8c>
 8023e34:	2500      	movs	r5, #0
 8023e36:	e7ef      	b.n	8023e18 <_reclaim_reent+0x90>
 8023e38:	bd70      	pop	{r4, r5, r6, pc}
 8023e3a:	bf00      	nop
 8023e3c:	240000dc 	.word	0x240000dc

08023e40 <_sbrk_r>:
 8023e40:	b538      	push	{r3, r4, r5, lr}
 8023e42:	4d06      	ldr	r5, [pc, #24]	; (8023e5c <_sbrk_r+0x1c>)
 8023e44:	2300      	movs	r3, #0
 8023e46:	4604      	mov	r4, r0
 8023e48:	4608      	mov	r0, r1
 8023e4a:	602b      	str	r3, [r5, #0]
 8023e4c:	f7df fac2 	bl	80033d4 <_sbrk>
 8023e50:	1c43      	adds	r3, r0, #1
 8023e52:	d102      	bne.n	8023e5a <_sbrk_r+0x1a>
 8023e54:	682b      	ldr	r3, [r5, #0]
 8023e56:	b103      	cbz	r3, 8023e5a <_sbrk_r+0x1a>
 8023e58:	6023      	str	r3, [r4, #0]
 8023e5a:	bd38      	pop	{r3, r4, r5, pc}
 8023e5c:	240100d4 	.word	0x240100d4

08023e60 <_raise_r>:
 8023e60:	291f      	cmp	r1, #31
 8023e62:	b538      	push	{r3, r4, r5, lr}
 8023e64:	4604      	mov	r4, r0
 8023e66:	460d      	mov	r5, r1
 8023e68:	d904      	bls.n	8023e74 <_raise_r+0x14>
 8023e6a:	2316      	movs	r3, #22
 8023e6c:	6003      	str	r3, [r0, #0]
 8023e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8023e72:	bd38      	pop	{r3, r4, r5, pc}
 8023e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023e76:	b112      	cbz	r2, 8023e7e <_raise_r+0x1e>
 8023e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023e7c:	b94b      	cbnz	r3, 8023e92 <_raise_r+0x32>
 8023e7e:	4620      	mov	r0, r4
 8023e80:	f000 f830 	bl	8023ee4 <_getpid_r>
 8023e84:	462a      	mov	r2, r5
 8023e86:	4601      	mov	r1, r0
 8023e88:	4620      	mov	r0, r4
 8023e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023e8e:	f000 b817 	b.w	8023ec0 <_kill_r>
 8023e92:	2b01      	cmp	r3, #1
 8023e94:	d00a      	beq.n	8023eac <_raise_r+0x4c>
 8023e96:	1c59      	adds	r1, r3, #1
 8023e98:	d103      	bne.n	8023ea2 <_raise_r+0x42>
 8023e9a:	2316      	movs	r3, #22
 8023e9c:	6003      	str	r3, [r0, #0]
 8023e9e:	2001      	movs	r0, #1
 8023ea0:	e7e7      	b.n	8023e72 <_raise_r+0x12>
 8023ea2:	2400      	movs	r4, #0
 8023ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023ea8:	4628      	mov	r0, r5
 8023eaa:	4798      	blx	r3
 8023eac:	2000      	movs	r0, #0
 8023eae:	e7e0      	b.n	8023e72 <_raise_r+0x12>

08023eb0 <raise>:
 8023eb0:	4b02      	ldr	r3, [pc, #8]	; (8023ebc <raise+0xc>)
 8023eb2:	4601      	mov	r1, r0
 8023eb4:	6818      	ldr	r0, [r3, #0]
 8023eb6:	f7ff bfd3 	b.w	8023e60 <_raise_r>
 8023eba:	bf00      	nop
 8023ebc:	240000dc 	.word	0x240000dc

08023ec0 <_kill_r>:
 8023ec0:	b538      	push	{r3, r4, r5, lr}
 8023ec2:	4d07      	ldr	r5, [pc, #28]	; (8023ee0 <_kill_r+0x20>)
 8023ec4:	2300      	movs	r3, #0
 8023ec6:	4604      	mov	r4, r0
 8023ec8:	4608      	mov	r0, r1
 8023eca:	4611      	mov	r1, r2
 8023ecc:	602b      	str	r3, [r5, #0]
 8023ece:	f7df fa49 	bl	8003364 <_kill>
 8023ed2:	1c43      	adds	r3, r0, #1
 8023ed4:	d102      	bne.n	8023edc <_kill_r+0x1c>
 8023ed6:	682b      	ldr	r3, [r5, #0]
 8023ed8:	b103      	cbz	r3, 8023edc <_kill_r+0x1c>
 8023eda:	6023      	str	r3, [r4, #0]
 8023edc:	bd38      	pop	{r3, r4, r5, pc}
 8023ede:	bf00      	nop
 8023ee0:	240100d4 	.word	0x240100d4

08023ee4 <_getpid_r>:
 8023ee4:	f7df ba3c 	b.w	8003360 <_getpid>

08023ee8 <siprintf>:
 8023ee8:	b40e      	push	{r1, r2, r3}
 8023eea:	b500      	push	{lr}
 8023eec:	b09c      	sub	sp, #112	; 0x70
 8023eee:	ab1d      	add	r3, sp, #116	; 0x74
 8023ef0:	9002      	str	r0, [sp, #8]
 8023ef2:	9006      	str	r0, [sp, #24]
 8023ef4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023ef8:	4809      	ldr	r0, [pc, #36]	; (8023f20 <siprintf+0x38>)
 8023efa:	9107      	str	r1, [sp, #28]
 8023efc:	9104      	str	r1, [sp, #16]
 8023efe:	4909      	ldr	r1, [pc, #36]	; (8023f24 <siprintf+0x3c>)
 8023f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8023f04:	9105      	str	r1, [sp, #20]
 8023f06:	6800      	ldr	r0, [r0, #0]
 8023f08:	9301      	str	r3, [sp, #4]
 8023f0a:	a902      	add	r1, sp, #8
 8023f0c:	f000 fbe6 	bl	80246dc <_svfiprintf_r>
 8023f10:	9b02      	ldr	r3, [sp, #8]
 8023f12:	2200      	movs	r2, #0
 8023f14:	701a      	strb	r2, [r3, #0]
 8023f16:	b01c      	add	sp, #112	; 0x70
 8023f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8023f1c:	b003      	add	sp, #12
 8023f1e:	4770      	bx	lr
 8023f20:	240000dc 	.word	0x240000dc
 8023f24:	ffff0208 	.word	0xffff0208

08023f28 <__sread>:
 8023f28:	b510      	push	{r4, lr}
 8023f2a:	460c      	mov	r4, r1
 8023f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f30:	f000 fcd4 	bl	80248dc <_read_r>
 8023f34:	2800      	cmp	r0, #0
 8023f36:	bfab      	itete	ge
 8023f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8023f3c:	181b      	addge	r3, r3, r0
 8023f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023f42:	bfac      	ite	ge
 8023f44:	6563      	strge	r3, [r4, #84]	; 0x54
 8023f46:	81a3      	strhlt	r3, [r4, #12]
 8023f48:	bd10      	pop	{r4, pc}

08023f4a <__swrite>:
 8023f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f4e:	461f      	mov	r7, r3
 8023f50:	898b      	ldrh	r3, [r1, #12]
 8023f52:	05db      	lsls	r3, r3, #23
 8023f54:	4605      	mov	r5, r0
 8023f56:	460c      	mov	r4, r1
 8023f58:	4616      	mov	r6, r2
 8023f5a:	d505      	bpl.n	8023f68 <__swrite+0x1e>
 8023f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f60:	2302      	movs	r3, #2
 8023f62:	2200      	movs	r2, #0
 8023f64:	f000 fa92 	bl	802448c <_lseek_r>
 8023f68:	89a3      	ldrh	r3, [r4, #12]
 8023f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023f72:	81a3      	strh	r3, [r4, #12]
 8023f74:	4632      	mov	r2, r6
 8023f76:	463b      	mov	r3, r7
 8023f78:	4628      	mov	r0, r5
 8023f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023f7e:	f000 b8d1 	b.w	8024124 <_write_r>

08023f82 <__sseek>:
 8023f82:	b510      	push	{r4, lr}
 8023f84:	460c      	mov	r4, r1
 8023f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f8a:	f000 fa7f 	bl	802448c <_lseek_r>
 8023f8e:	1c43      	adds	r3, r0, #1
 8023f90:	89a3      	ldrh	r3, [r4, #12]
 8023f92:	bf15      	itete	ne
 8023f94:	6560      	strne	r0, [r4, #84]	; 0x54
 8023f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023f9e:	81a3      	strheq	r3, [r4, #12]
 8023fa0:	bf18      	it	ne
 8023fa2:	81a3      	strhne	r3, [r4, #12]
 8023fa4:	bd10      	pop	{r4, pc}

08023fa6 <__sclose>:
 8023fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023faa:	f000 b99d 	b.w	80242e8 <_close_r>

08023fae <strncmp>:
 8023fae:	b510      	push	{r4, lr}
 8023fb0:	b17a      	cbz	r2, 8023fd2 <strncmp+0x24>
 8023fb2:	4603      	mov	r3, r0
 8023fb4:	3901      	subs	r1, #1
 8023fb6:	1884      	adds	r4, r0, r2
 8023fb8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8023fbc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023fc0:	4290      	cmp	r0, r2
 8023fc2:	d101      	bne.n	8023fc8 <strncmp+0x1a>
 8023fc4:	42a3      	cmp	r3, r4
 8023fc6:	d101      	bne.n	8023fcc <strncmp+0x1e>
 8023fc8:	1a80      	subs	r0, r0, r2
 8023fca:	bd10      	pop	{r4, pc}
 8023fcc:	2800      	cmp	r0, #0
 8023fce:	d1f3      	bne.n	8023fb8 <strncmp+0xa>
 8023fd0:	e7fa      	b.n	8023fc8 <strncmp+0x1a>
 8023fd2:	4610      	mov	r0, r2
 8023fd4:	e7f9      	b.n	8023fca <strncmp+0x1c>

08023fd6 <strncpy>:
 8023fd6:	b510      	push	{r4, lr}
 8023fd8:	3901      	subs	r1, #1
 8023fda:	4603      	mov	r3, r0
 8023fdc:	b132      	cbz	r2, 8023fec <strncpy+0x16>
 8023fde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023fe2:	f803 4b01 	strb.w	r4, [r3], #1
 8023fe6:	3a01      	subs	r2, #1
 8023fe8:	2c00      	cmp	r4, #0
 8023fea:	d1f7      	bne.n	8023fdc <strncpy+0x6>
 8023fec:	441a      	add	r2, r3
 8023fee:	2100      	movs	r1, #0
 8023ff0:	4293      	cmp	r3, r2
 8023ff2:	d100      	bne.n	8023ff6 <strncpy+0x20>
 8023ff4:	bd10      	pop	{r4, pc}
 8023ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8023ffa:	e7f9      	b.n	8023ff0 <strncpy+0x1a>

08023ffc <strstr>:
 8023ffc:	780a      	ldrb	r2, [r1, #0]
 8023ffe:	b570      	push	{r4, r5, r6, lr}
 8024000:	b96a      	cbnz	r2, 802401e <strstr+0x22>
 8024002:	bd70      	pop	{r4, r5, r6, pc}
 8024004:	429a      	cmp	r2, r3
 8024006:	d109      	bne.n	802401c <strstr+0x20>
 8024008:	460c      	mov	r4, r1
 802400a:	4605      	mov	r5, r0
 802400c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8024010:	2b00      	cmp	r3, #0
 8024012:	d0f6      	beq.n	8024002 <strstr+0x6>
 8024014:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8024018:	429e      	cmp	r6, r3
 802401a:	d0f7      	beq.n	802400c <strstr+0x10>
 802401c:	3001      	adds	r0, #1
 802401e:	7803      	ldrb	r3, [r0, #0]
 8024020:	2b00      	cmp	r3, #0
 8024022:	d1ef      	bne.n	8024004 <strstr+0x8>
 8024024:	4618      	mov	r0, r3
 8024026:	e7ec      	b.n	8024002 <strstr+0x6>

08024028 <__strtok_r>:
 8024028:	b5f0      	push	{r4, r5, r6, r7, lr}
 802402a:	b908      	cbnz	r0, 8024030 <__strtok_r+0x8>
 802402c:	6810      	ldr	r0, [r2, #0]
 802402e:	b188      	cbz	r0, 8024054 <__strtok_r+0x2c>
 8024030:	4604      	mov	r4, r0
 8024032:	4620      	mov	r0, r4
 8024034:	f814 5b01 	ldrb.w	r5, [r4], #1
 8024038:	460f      	mov	r7, r1
 802403a:	f817 6b01 	ldrb.w	r6, [r7], #1
 802403e:	b91e      	cbnz	r6, 8024048 <__strtok_r+0x20>
 8024040:	b965      	cbnz	r5, 802405c <__strtok_r+0x34>
 8024042:	6015      	str	r5, [r2, #0]
 8024044:	4628      	mov	r0, r5
 8024046:	e005      	b.n	8024054 <__strtok_r+0x2c>
 8024048:	42b5      	cmp	r5, r6
 802404a:	d1f6      	bne.n	802403a <__strtok_r+0x12>
 802404c:	2b00      	cmp	r3, #0
 802404e:	d1f0      	bne.n	8024032 <__strtok_r+0xa>
 8024050:	6014      	str	r4, [r2, #0]
 8024052:	7003      	strb	r3, [r0, #0]
 8024054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024056:	461c      	mov	r4, r3
 8024058:	e00c      	b.n	8024074 <__strtok_r+0x4c>
 802405a:	b915      	cbnz	r5, 8024062 <__strtok_r+0x3a>
 802405c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024060:	460e      	mov	r6, r1
 8024062:	f816 5b01 	ldrb.w	r5, [r6], #1
 8024066:	42ab      	cmp	r3, r5
 8024068:	d1f7      	bne.n	802405a <__strtok_r+0x32>
 802406a:	2b00      	cmp	r3, #0
 802406c:	d0f3      	beq.n	8024056 <__strtok_r+0x2e>
 802406e:	2300      	movs	r3, #0
 8024070:	f804 3c01 	strb.w	r3, [r4, #-1]
 8024074:	6014      	str	r4, [r2, #0]
 8024076:	e7ed      	b.n	8024054 <__strtok_r+0x2c>

08024078 <strtok_r>:
 8024078:	2301      	movs	r3, #1
 802407a:	f7ff bfd5 	b.w	8024028 <__strtok_r>
	...

08024080 <__swbuf_r>:
 8024080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024082:	460e      	mov	r6, r1
 8024084:	4614      	mov	r4, r2
 8024086:	4605      	mov	r5, r0
 8024088:	b118      	cbz	r0, 8024092 <__swbuf_r+0x12>
 802408a:	6983      	ldr	r3, [r0, #24]
 802408c:	b90b      	cbnz	r3, 8024092 <__swbuf_r+0x12>
 802408e:	f7ff f991 	bl	80233b4 <__sinit>
 8024092:	4b21      	ldr	r3, [pc, #132]	; (8024118 <__swbuf_r+0x98>)
 8024094:	429c      	cmp	r4, r3
 8024096:	d12b      	bne.n	80240f0 <__swbuf_r+0x70>
 8024098:	686c      	ldr	r4, [r5, #4]
 802409a:	69a3      	ldr	r3, [r4, #24]
 802409c:	60a3      	str	r3, [r4, #8]
 802409e:	89a3      	ldrh	r3, [r4, #12]
 80240a0:	071a      	lsls	r2, r3, #28
 80240a2:	d52f      	bpl.n	8024104 <__swbuf_r+0x84>
 80240a4:	6923      	ldr	r3, [r4, #16]
 80240a6:	b36b      	cbz	r3, 8024104 <__swbuf_r+0x84>
 80240a8:	6923      	ldr	r3, [r4, #16]
 80240aa:	6820      	ldr	r0, [r4, #0]
 80240ac:	1ac0      	subs	r0, r0, r3
 80240ae:	6963      	ldr	r3, [r4, #20]
 80240b0:	b2f6      	uxtb	r6, r6
 80240b2:	4283      	cmp	r3, r0
 80240b4:	4637      	mov	r7, r6
 80240b6:	dc04      	bgt.n	80240c2 <__swbuf_r+0x42>
 80240b8:	4621      	mov	r1, r4
 80240ba:	4628      	mov	r0, r5
 80240bc:	f000 f9aa 	bl	8024414 <_fflush_r>
 80240c0:	bb30      	cbnz	r0, 8024110 <__swbuf_r+0x90>
 80240c2:	68a3      	ldr	r3, [r4, #8]
 80240c4:	3b01      	subs	r3, #1
 80240c6:	60a3      	str	r3, [r4, #8]
 80240c8:	6823      	ldr	r3, [r4, #0]
 80240ca:	1c5a      	adds	r2, r3, #1
 80240cc:	6022      	str	r2, [r4, #0]
 80240ce:	701e      	strb	r6, [r3, #0]
 80240d0:	6963      	ldr	r3, [r4, #20]
 80240d2:	3001      	adds	r0, #1
 80240d4:	4283      	cmp	r3, r0
 80240d6:	d004      	beq.n	80240e2 <__swbuf_r+0x62>
 80240d8:	89a3      	ldrh	r3, [r4, #12]
 80240da:	07db      	lsls	r3, r3, #31
 80240dc:	d506      	bpl.n	80240ec <__swbuf_r+0x6c>
 80240de:	2e0a      	cmp	r6, #10
 80240e0:	d104      	bne.n	80240ec <__swbuf_r+0x6c>
 80240e2:	4621      	mov	r1, r4
 80240e4:	4628      	mov	r0, r5
 80240e6:	f000 f995 	bl	8024414 <_fflush_r>
 80240ea:	b988      	cbnz	r0, 8024110 <__swbuf_r+0x90>
 80240ec:	4638      	mov	r0, r7
 80240ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80240f0:	4b0a      	ldr	r3, [pc, #40]	; (802411c <__swbuf_r+0x9c>)
 80240f2:	429c      	cmp	r4, r3
 80240f4:	d101      	bne.n	80240fa <__swbuf_r+0x7a>
 80240f6:	68ac      	ldr	r4, [r5, #8]
 80240f8:	e7cf      	b.n	802409a <__swbuf_r+0x1a>
 80240fa:	4b09      	ldr	r3, [pc, #36]	; (8024120 <__swbuf_r+0xa0>)
 80240fc:	429c      	cmp	r4, r3
 80240fe:	bf08      	it	eq
 8024100:	68ec      	ldreq	r4, [r5, #12]
 8024102:	e7ca      	b.n	802409a <__swbuf_r+0x1a>
 8024104:	4621      	mov	r1, r4
 8024106:	4628      	mov	r0, r5
 8024108:	f000 f81e 	bl	8024148 <__swsetup_r>
 802410c:	2800      	cmp	r0, #0
 802410e:	d0cb      	beq.n	80240a8 <__swbuf_r+0x28>
 8024110:	f04f 37ff 	mov.w	r7, #4294967295
 8024114:	e7ea      	b.n	80240ec <__swbuf_r+0x6c>
 8024116:	bf00      	nop
 8024118:	08027328 	.word	0x08027328
 802411c:	08027348 	.word	0x08027348
 8024120:	08027308 	.word	0x08027308

08024124 <_write_r>:
 8024124:	b538      	push	{r3, r4, r5, lr}
 8024126:	4d07      	ldr	r5, [pc, #28]	; (8024144 <_write_r+0x20>)
 8024128:	4604      	mov	r4, r0
 802412a:	4608      	mov	r0, r1
 802412c:	4611      	mov	r1, r2
 802412e:	2200      	movs	r2, #0
 8024130:	602a      	str	r2, [r5, #0]
 8024132:	461a      	mov	r2, r3
 8024134:	f7df f934 	bl	80033a0 <_write>
 8024138:	1c43      	adds	r3, r0, #1
 802413a:	d102      	bne.n	8024142 <_write_r+0x1e>
 802413c:	682b      	ldr	r3, [r5, #0]
 802413e:	b103      	cbz	r3, 8024142 <_write_r+0x1e>
 8024140:	6023      	str	r3, [r4, #0]
 8024142:	bd38      	pop	{r3, r4, r5, pc}
 8024144:	240100d4 	.word	0x240100d4

08024148 <__swsetup_r>:
 8024148:	4b32      	ldr	r3, [pc, #200]	; (8024214 <__swsetup_r+0xcc>)
 802414a:	b570      	push	{r4, r5, r6, lr}
 802414c:	681d      	ldr	r5, [r3, #0]
 802414e:	4606      	mov	r6, r0
 8024150:	460c      	mov	r4, r1
 8024152:	b125      	cbz	r5, 802415e <__swsetup_r+0x16>
 8024154:	69ab      	ldr	r3, [r5, #24]
 8024156:	b913      	cbnz	r3, 802415e <__swsetup_r+0x16>
 8024158:	4628      	mov	r0, r5
 802415a:	f7ff f92b 	bl	80233b4 <__sinit>
 802415e:	4b2e      	ldr	r3, [pc, #184]	; (8024218 <__swsetup_r+0xd0>)
 8024160:	429c      	cmp	r4, r3
 8024162:	d10f      	bne.n	8024184 <__swsetup_r+0x3c>
 8024164:	686c      	ldr	r4, [r5, #4]
 8024166:	89a3      	ldrh	r3, [r4, #12]
 8024168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802416c:	0719      	lsls	r1, r3, #28
 802416e:	d42c      	bmi.n	80241ca <__swsetup_r+0x82>
 8024170:	06dd      	lsls	r5, r3, #27
 8024172:	d411      	bmi.n	8024198 <__swsetup_r+0x50>
 8024174:	2309      	movs	r3, #9
 8024176:	6033      	str	r3, [r6, #0]
 8024178:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802417c:	81a3      	strh	r3, [r4, #12]
 802417e:	f04f 30ff 	mov.w	r0, #4294967295
 8024182:	e03e      	b.n	8024202 <__swsetup_r+0xba>
 8024184:	4b25      	ldr	r3, [pc, #148]	; (802421c <__swsetup_r+0xd4>)
 8024186:	429c      	cmp	r4, r3
 8024188:	d101      	bne.n	802418e <__swsetup_r+0x46>
 802418a:	68ac      	ldr	r4, [r5, #8]
 802418c:	e7eb      	b.n	8024166 <__swsetup_r+0x1e>
 802418e:	4b24      	ldr	r3, [pc, #144]	; (8024220 <__swsetup_r+0xd8>)
 8024190:	429c      	cmp	r4, r3
 8024192:	bf08      	it	eq
 8024194:	68ec      	ldreq	r4, [r5, #12]
 8024196:	e7e6      	b.n	8024166 <__swsetup_r+0x1e>
 8024198:	0758      	lsls	r0, r3, #29
 802419a:	d512      	bpl.n	80241c2 <__swsetup_r+0x7a>
 802419c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802419e:	b141      	cbz	r1, 80241b2 <__swsetup_r+0x6a>
 80241a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80241a4:	4299      	cmp	r1, r3
 80241a6:	d002      	beq.n	80241ae <__swsetup_r+0x66>
 80241a8:	4630      	mov	r0, r6
 80241aa:	f7ff fa11 	bl	80235d0 <_free_r>
 80241ae:	2300      	movs	r3, #0
 80241b0:	6363      	str	r3, [r4, #52]	; 0x34
 80241b2:	89a3      	ldrh	r3, [r4, #12]
 80241b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80241b8:	81a3      	strh	r3, [r4, #12]
 80241ba:	2300      	movs	r3, #0
 80241bc:	6063      	str	r3, [r4, #4]
 80241be:	6923      	ldr	r3, [r4, #16]
 80241c0:	6023      	str	r3, [r4, #0]
 80241c2:	89a3      	ldrh	r3, [r4, #12]
 80241c4:	f043 0308 	orr.w	r3, r3, #8
 80241c8:	81a3      	strh	r3, [r4, #12]
 80241ca:	6923      	ldr	r3, [r4, #16]
 80241cc:	b94b      	cbnz	r3, 80241e2 <__swsetup_r+0x9a>
 80241ce:	89a3      	ldrh	r3, [r4, #12]
 80241d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80241d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80241d8:	d003      	beq.n	80241e2 <__swsetup_r+0x9a>
 80241da:	4621      	mov	r1, r4
 80241dc:	4630      	mov	r0, r6
 80241de:	f000 f98d 	bl	80244fc <__smakebuf_r>
 80241e2:	89a0      	ldrh	r0, [r4, #12]
 80241e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80241e8:	f010 0301 	ands.w	r3, r0, #1
 80241ec:	d00a      	beq.n	8024204 <__swsetup_r+0xbc>
 80241ee:	2300      	movs	r3, #0
 80241f0:	60a3      	str	r3, [r4, #8]
 80241f2:	6963      	ldr	r3, [r4, #20]
 80241f4:	425b      	negs	r3, r3
 80241f6:	61a3      	str	r3, [r4, #24]
 80241f8:	6923      	ldr	r3, [r4, #16]
 80241fa:	b943      	cbnz	r3, 802420e <__swsetup_r+0xc6>
 80241fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024200:	d1ba      	bne.n	8024178 <__swsetup_r+0x30>
 8024202:	bd70      	pop	{r4, r5, r6, pc}
 8024204:	0781      	lsls	r1, r0, #30
 8024206:	bf58      	it	pl
 8024208:	6963      	ldrpl	r3, [r4, #20]
 802420a:	60a3      	str	r3, [r4, #8]
 802420c:	e7f4      	b.n	80241f8 <__swsetup_r+0xb0>
 802420e:	2000      	movs	r0, #0
 8024210:	e7f7      	b.n	8024202 <__swsetup_r+0xba>
 8024212:	bf00      	nop
 8024214:	240000dc 	.word	0x240000dc
 8024218:	08027328 	.word	0x08027328
 802421c:	08027348 	.word	0x08027348
 8024220:	08027308 	.word	0x08027308

08024224 <__register_exitproc>:
 8024224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024228:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80242e4 <__register_exitproc+0xc0>
 802422c:	4606      	mov	r6, r0
 802422e:	f8d8 0000 	ldr.w	r0, [r8]
 8024232:	461f      	mov	r7, r3
 8024234:	460d      	mov	r5, r1
 8024236:	4691      	mov	r9, r2
 8024238:	f7ff f991 	bl	802355e <__retarget_lock_acquire_recursive>
 802423c:	4b25      	ldr	r3, [pc, #148]	; (80242d4 <__register_exitproc+0xb0>)
 802423e:	681c      	ldr	r4, [r3, #0]
 8024240:	b934      	cbnz	r4, 8024250 <__register_exitproc+0x2c>
 8024242:	4c25      	ldr	r4, [pc, #148]	; (80242d8 <__register_exitproc+0xb4>)
 8024244:	601c      	str	r4, [r3, #0]
 8024246:	4b25      	ldr	r3, [pc, #148]	; (80242dc <__register_exitproc+0xb8>)
 8024248:	b113      	cbz	r3, 8024250 <__register_exitproc+0x2c>
 802424a:	681b      	ldr	r3, [r3, #0]
 802424c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8024250:	6863      	ldr	r3, [r4, #4]
 8024252:	2b1f      	cmp	r3, #31
 8024254:	dd07      	ble.n	8024266 <__register_exitproc+0x42>
 8024256:	f8d8 0000 	ldr.w	r0, [r8]
 802425a:	f7ff f982 	bl	8023562 <__retarget_lock_release_recursive>
 802425e:	f04f 30ff 	mov.w	r0, #4294967295
 8024262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024266:	b34e      	cbz	r6, 80242bc <__register_exitproc+0x98>
 8024268:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802426c:	b988      	cbnz	r0, 8024292 <__register_exitproc+0x6e>
 802426e:	4b1c      	ldr	r3, [pc, #112]	; (80242e0 <__register_exitproc+0xbc>)
 8024270:	b923      	cbnz	r3, 802427c <__register_exitproc+0x58>
 8024272:	f8d8 0000 	ldr.w	r0, [r8]
 8024276:	f7ff f973 	bl	8023560 <__retarget_lock_release>
 802427a:	e7f0      	b.n	802425e <__register_exitproc+0x3a>
 802427c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8024280:	f7ff f970 	bl	8023564 <malloc>
 8024284:	2800      	cmp	r0, #0
 8024286:	d0f4      	beq.n	8024272 <__register_exitproc+0x4e>
 8024288:	2300      	movs	r3, #0
 802428a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802428e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8024292:	6863      	ldr	r3, [r4, #4]
 8024294:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8024298:	2201      	movs	r2, #1
 802429a:	409a      	lsls	r2, r3
 802429c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80242a0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80242a4:	4313      	orrs	r3, r2
 80242a6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80242aa:	2e02      	cmp	r6, #2
 80242ac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80242b0:	bf02      	ittt	eq
 80242b2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80242b6:	4313      	orreq	r3, r2
 80242b8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80242bc:	6863      	ldr	r3, [r4, #4]
 80242be:	f8d8 0000 	ldr.w	r0, [r8]
 80242c2:	1c5a      	adds	r2, r3, #1
 80242c4:	3302      	adds	r3, #2
 80242c6:	6062      	str	r2, [r4, #4]
 80242c8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80242cc:	f7ff f949 	bl	8023562 <__retarget_lock_release_recursive>
 80242d0:	2000      	movs	r0, #0
 80242d2:	e7c6      	b.n	8024262 <__register_exitproc+0x3e>
 80242d4:	24010164 	.word	0x24010164
 80242d8:	240100d8 	.word	0x240100d8
 80242dc:	080273a0 	.word	0x080273a0
 80242e0:	08023565 	.word	0x08023565
 80242e4:	24000140 	.word	0x24000140

080242e8 <_close_r>:
 80242e8:	b538      	push	{r3, r4, r5, lr}
 80242ea:	4d06      	ldr	r5, [pc, #24]	; (8024304 <_close_r+0x1c>)
 80242ec:	2300      	movs	r3, #0
 80242ee:	4604      	mov	r4, r0
 80242f0:	4608      	mov	r0, r1
 80242f2:	602b      	str	r3, [r5, #0]
 80242f4:	f7df f862 	bl	80033bc <_close>
 80242f8:	1c43      	adds	r3, r0, #1
 80242fa:	d102      	bne.n	8024302 <_close_r+0x1a>
 80242fc:	682b      	ldr	r3, [r5, #0]
 80242fe:	b103      	cbz	r3, 8024302 <_close_r+0x1a>
 8024300:	6023      	str	r3, [r4, #0]
 8024302:	bd38      	pop	{r3, r4, r5, pc}
 8024304:	240100d4 	.word	0x240100d4

08024308 <__sflush_r>:
 8024308:	898a      	ldrh	r2, [r1, #12]
 802430a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802430e:	4605      	mov	r5, r0
 8024310:	0710      	lsls	r0, r2, #28
 8024312:	460c      	mov	r4, r1
 8024314:	d458      	bmi.n	80243c8 <__sflush_r+0xc0>
 8024316:	684b      	ldr	r3, [r1, #4]
 8024318:	2b00      	cmp	r3, #0
 802431a:	dc05      	bgt.n	8024328 <__sflush_r+0x20>
 802431c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802431e:	2b00      	cmp	r3, #0
 8024320:	dc02      	bgt.n	8024328 <__sflush_r+0x20>
 8024322:	2000      	movs	r0, #0
 8024324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802432a:	2e00      	cmp	r6, #0
 802432c:	d0f9      	beq.n	8024322 <__sflush_r+0x1a>
 802432e:	2300      	movs	r3, #0
 8024330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024334:	682f      	ldr	r7, [r5, #0]
 8024336:	602b      	str	r3, [r5, #0]
 8024338:	d032      	beq.n	80243a0 <__sflush_r+0x98>
 802433a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802433c:	89a3      	ldrh	r3, [r4, #12]
 802433e:	075a      	lsls	r2, r3, #29
 8024340:	d505      	bpl.n	802434e <__sflush_r+0x46>
 8024342:	6863      	ldr	r3, [r4, #4]
 8024344:	1ac0      	subs	r0, r0, r3
 8024346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024348:	b10b      	cbz	r3, 802434e <__sflush_r+0x46>
 802434a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802434c:	1ac0      	subs	r0, r0, r3
 802434e:	2300      	movs	r3, #0
 8024350:	4602      	mov	r2, r0
 8024352:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024354:	6a21      	ldr	r1, [r4, #32]
 8024356:	4628      	mov	r0, r5
 8024358:	47b0      	blx	r6
 802435a:	1c43      	adds	r3, r0, #1
 802435c:	89a3      	ldrh	r3, [r4, #12]
 802435e:	d106      	bne.n	802436e <__sflush_r+0x66>
 8024360:	6829      	ldr	r1, [r5, #0]
 8024362:	291d      	cmp	r1, #29
 8024364:	d82c      	bhi.n	80243c0 <__sflush_r+0xb8>
 8024366:	4a2a      	ldr	r2, [pc, #168]	; (8024410 <__sflush_r+0x108>)
 8024368:	40ca      	lsrs	r2, r1
 802436a:	07d6      	lsls	r6, r2, #31
 802436c:	d528      	bpl.n	80243c0 <__sflush_r+0xb8>
 802436e:	2200      	movs	r2, #0
 8024370:	6062      	str	r2, [r4, #4]
 8024372:	04d9      	lsls	r1, r3, #19
 8024374:	6922      	ldr	r2, [r4, #16]
 8024376:	6022      	str	r2, [r4, #0]
 8024378:	d504      	bpl.n	8024384 <__sflush_r+0x7c>
 802437a:	1c42      	adds	r2, r0, #1
 802437c:	d101      	bne.n	8024382 <__sflush_r+0x7a>
 802437e:	682b      	ldr	r3, [r5, #0]
 8024380:	b903      	cbnz	r3, 8024384 <__sflush_r+0x7c>
 8024382:	6560      	str	r0, [r4, #84]	; 0x54
 8024384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024386:	602f      	str	r7, [r5, #0]
 8024388:	2900      	cmp	r1, #0
 802438a:	d0ca      	beq.n	8024322 <__sflush_r+0x1a>
 802438c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024390:	4299      	cmp	r1, r3
 8024392:	d002      	beq.n	802439a <__sflush_r+0x92>
 8024394:	4628      	mov	r0, r5
 8024396:	f7ff f91b 	bl	80235d0 <_free_r>
 802439a:	2000      	movs	r0, #0
 802439c:	6360      	str	r0, [r4, #52]	; 0x34
 802439e:	e7c1      	b.n	8024324 <__sflush_r+0x1c>
 80243a0:	6a21      	ldr	r1, [r4, #32]
 80243a2:	2301      	movs	r3, #1
 80243a4:	4628      	mov	r0, r5
 80243a6:	47b0      	blx	r6
 80243a8:	1c41      	adds	r1, r0, #1
 80243aa:	d1c7      	bne.n	802433c <__sflush_r+0x34>
 80243ac:	682b      	ldr	r3, [r5, #0]
 80243ae:	2b00      	cmp	r3, #0
 80243b0:	d0c4      	beq.n	802433c <__sflush_r+0x34>
 80243b2:	2b1d      	cmp	r3, #29
 80243b4:	d001      	beq.n	80243ba <__sflush_r+0xb2>
 80243b6:	2b16      	cmp	r3, #22
 80243b8:	d101      	bne.n	80243be <__sflush_r+0xb6>
 80243ba:	602f      	str	r7, [r5, #0]
 80243bc:	e7b1      	b.n	8024322 <__sflush_r+0x1a>
 80243be:	89a3      	ldrh	r3, [r4, #12]
 80243c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80243c4:	81a3      	strh	r3, [r4, #12]
 80243c6:	e7ad      	b.n	8024324 <__sflush_r+0x1c>
 80243c8:	690f      	ldr	r7, [r1, #16]
 80243ca:	2f00      	cmp	r7, #0
 80243cc:	d0a9      	beq.n	8024322 <__sflush_r+0x1a>
 80243ce:	0793      	lsls	r3, r2, #30
 80243d0:	680e      	ldr	r6, [r1, #0]
 80243d2:	bf08      	it	eq
 80243d4:	694b      	ldreq	r3, [r1, #20]
 80243d6:	600f      	str	r7, [r1, #0]
 80243d8:	bf18      	it	ne
 80243da:	2300      	movne	r3, #0
 80243dc:	eba6 0807 	sub.w	r8, r6, r7
 80243e0:	608b      	str	r3, [r1, #8]
 80243e2:	f1b8 0f00 	cmp.w	r8, #0
 80243e6:	dd9c      	ble.n	8024322 <__sflush_r+0x1a>
 80243e8:	6a21      	ldr	r1, [r4, #32]
 80243ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80243ec:	4643      	mov	r3, r8
 80243ee:	463a      	mov	r2, r7
 80243f0:	4628      	mov	r0, r5
 80243f2:	47b0      	blx	r6
 80243f4:	2800      	cmp	r0, #0
 80243f6:	dc06      	bgt.n	8024406 <__sflush_r+0xfe>
 80243f8:	89a3      	ldrh	r3, [r4, #12]
 80243fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80243fe:	81a3      	strh	r3, [r4, #12]
 8024400:	f04f 30ff 	mov.w	r0, #4294967295
 8024404:	e78e      	b.n	8024324 <__sflush_r+0x1c>
 8024406:	4407      	add	r7, r0
 8024408:	eba8 0800 	sub.w	r8, r8, r0
 802440c:	e7e9      	b.n	80243e2 <__sflush_r+0xda>
 802440e:	bf00      	nop
 8024410:	20400001 	.word	0x20400001

08024414 <_fflush_r>:
 8024414:	b538      	push	{r3, r4, r5, lr}
 8024416:	690b      	ldr	r3, [r1, #16]
 8024418:	4605      	mov	r5, r0
 802441a:	460c      	mov	r4, r1
 802441c:	b913      	cbnz	r3, 8024424 <_fflush_r+0x10>
 802441e:	2500      	movs	r5, #0
 8024420:	4628      	mov	r0, r5
 8024422:	bd38      	pop	{r3, r4, r5, pc}
 8024424:	b118      	cbz	r0, 802442e <_fflush_r+0x1a>
 8024426:	6983      	ldr	r3, [r0, #24]
 8024428:	b90b      	cbnz	r3, 802442e <_fflush_r+0x1a>
 802442a:	f7fe ffc3 	bl	80233b4 <__sinit>
 802442e:	4b14      	ldr	r3, [pc, #80]	; (8024480 <_fflush_r+0x6c>)
 8024430:	429c      	cmp	r4, r3
 8024432:	d11b      	bne.n	802446c <_fflush_r+0x58>
 8024434:	686c      	ldr	r4, [r5, #4]
 8024436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802443a:	2b00      	cmp	r3, #0
 802443c:	d0ef      	beq.n	802441e <_fflush_r+0xa>
 802443e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024440:	07d0      	lsls	r0, r2, #31
 8024442:	d404      	bmi.n	802444e <_fflush_r+0x3a>
 8024444:	0599      	lsls	r1, r3, #22
 8024446:	d402      	bmi.n	802444e <_fflush_r+0x3a>
 8024448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802444a:	f7ff f888 	bl	802355e <__retarget_lock_acquire_recursive>
 802444e:	4628      	mov	r0, r5
 8024450:	4621      	mov	r1, r4
 8024452:	f7ff ff59 	bl	8024308 <__sflush_r>
 8024456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024458:	07da      	lsls	r2, r3, #31
 802445a:	4605      	mov	r5, r0
 802445c:	d4e0      	bmi.n	8024420 <_fflush_r+0xc>
 802445e:	89a3      	ldrh	r3, [r4, #12]
 8024460:	059b      	lsls	r3, r3, #22
 8024462:	d4dd      	bmi.n	8024420 <_fflush_r+0xc>
 8024464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024466:	f7ff f87c 	bl	8023562 <__retarget_lock_release_recursive>
 802446a:	e7d9      	b.n	8024420 <_fflush_r+0xc>
 802446c:	4b05      	ldr	r3, [pc, #20]	; (8024484 <_fflush_r+0x70>)
 802446e:	429c      	cmp	r4, r3
 8024470:	d101      	bne.n	8024476 <_fflush_r+0x62>
 8024472:	68ac      	ldr	r4, [r5, #8]
 8024474:	e7df      	b.n	8024436 <_fflush_r+0x22>
 8024476:	4b04      	ldr	r3, [pc, #16]	; (8024488 <_fflush_r+0x74>)
 8024478:	429c      	cmp	r4, r3
 802447a:	bf08      	it	eq
 802447c:	68ec      	ldreq	r4, [r5, #12]
 802447e:	e7da      	b.n	8024436 <_fflush_r+0x22>
 8024480:	08027328 	.word	0x08027328
 8024484:	08027348 	.word	0x08027348
 8024488:	08027308 	.word	0x08027308

0802448c <_lseek_r>:
 802448c:	b538      	push	{r3, r4, r5, lr}
 802448e:	4d07      	ldr	r5, [pc, #28]	; (80244ac <_lseek_r+0x20>)
 8024490:	4604      	mov	r4, r0
 8024492:	4608      	mov	r0, r1
 8024494:	4611      	mov	r1, r2
 8024496:	2200      	movs	r2, #0
 8024498:	602a      	str	r2, [r5, #0]
 802449a:	461a      	mov	r2, r3
 802449c:	f7de ff98 	bl	80033d0 <_lseek>
 80244a0:	1c43      	adds	r3, r0, #1
 80244a2:	d102      	bne.n	80244aa <_lseek_r+0x1e>
 80244a4:	682b      	ldr	r3, [r5, #0]
 80244a6:	b103      	cbz	r3, 80244aa <_lseek_r+0x1e>
 80244a8:	6023      	str	r3, [r4, #0]
 80244aa:	bd38      	pop	{r3, r4, r5, pc}
 80244ac:	240100d4 	.word	0x240100d4

080244b0 <__swhatbuf_r>:
 80244b0:	b570      	push	{r4, r5, r6, lr}
 80244b2:	460e      	mov	r6, r1
 80244b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80244b8:	2900      	cmp	r1, #0
 80244ba:	b096      	sub	sp, #88	; 0x58
 80244bc:	4614      	mov	r4, r2
 80244be:	461d      	mov	r5, r3
 80244c0:	da08      	bge.n	80244d4 <__swhatbuf_r+0x24>
 80244c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80244c6:	2200      	movs	r2, #0
 80244c8:	602a      	str	r2, [r5, #0]
 80244ca:	061a      	lsls	r2, r3, #24
 80244cc:	d410      	bmi.n	80244f0 <__swhatbuf_r+0x40>
 80244ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80244d2:	e00e      	b.n	80244f2 <__swhatbuf_r+0x42>
 80244d4:	466a      	mov	r2, sp
 80244d6:	f000 fa13 	bl	8024900 <_fstat_r>
 80244da:	2800      	cmp	r0, #0
 80244dc:	dbf1      	blt.n	80244c2 <__swhatbuf_r+0x12>
 80244de:	9a01      	ldr	r2, [sp, #4]
 80244e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80244e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80244e8:	425a      	negs	r2, r3
 80244ea:	415a      	adcs	r2, r3
 80244ec:	602a      	str	r2, [r5, #0]
 80244ee:	e7ee      	b.n	80244ce <__swhatbuf_r+0x1e>
 80244f0:	2340      	movs	r3, #64	; 0x40
 80244f2:	2000      	movs	r0, #0
 80244f4:	6023      	str	r3, [r4, #0]
 80244f6:	b016      	add	sp, #88	; 0x58
 80244f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080244fc <__smakebuf_r>:
 80244fc:	898b      	ldrh	r3, [r1, #12]
 80244fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024500:	079d      	lsls	r5, r3, #30
 8024502:	4606      	mov	r6, r0
 8024504:	460c      	mov	r4, r1
 8024506:	d507      	bpl.n	8024518 <__smakebuf_r+0x1c>
 8024508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802450c:	6023      	str	r3, [r4, #0]
 802450e:	6123      	str	r3, [r4, #16]
 8024510:	2301      	movs	r3, #1
 8024512:	6163      	str	r3, [r4, #20]
 8024514:	b002      	add	sp, #8
 8024516:	bd70      	pop	{r4, r5, r6, pc}
 8024518:	ab01      	add	r3, sp, #4
 802451a:	466a      	mov	r2, sp
 802451c:	f7ff ffc8 	bl	80244b0 <__swhatbuf_r>
 8024520:	9900      	ldr	r1, [sp, #0]
 8024522:	4605      	mov	r5, r0
 8024524:	4630      	mov	r0, r6
 8024526:	f7ff f8bf 	bl	80236a8 <_malloc_r>
 802452a:	b948      	cbnz	r0, 8024540 <__smakebuf_r+0x44>
 802452c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024530:	059a      	lsls	r2, r3, #22
 8024532:	d4ef      	bmi.n	8024514 <__smakebuf_r+0x18>
 8024534:	f023 0303 	bic.w	r3, r3, #3
 8024538:	f043 0302 	orr.w	r3, r3, #2
 802453c:	81a3      	strh	r3, [r4, #12]
 802453e:	e7e3      	b.n	8024508 <__smakebuf_r+0xc>
 8024540:	4b0d      	ldr	r3, [pc, #52]	; (8024578 <__smakebuf_r+0x7c>)
 8024542:	62b3      	str	r3, [r6, #40]	; 0x28
 8024544:	89a3      	ldrh	r3, [r4, #12]
 8024546:	6020      	str	r0, [r4, #0]
 8024548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802454c:	81a3      	strh	r3, [r4, #12]
 802454e:	9b00      	ldr	r3, [sp, #0]
 8024550:	6163      	str	r3, [r4, #20]
 8024552:	9b01      	ldr	r3, [sp, #4]
 8024554:	6120      	str	r0, [r4, #16]
 8024556:	b15b      	cbz	r3, 8024570 <__smakebuf_r+0x74>
 8024558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802455c:	4630      	mov	r0, r6
 802455e:	f000 f9e1 	bl	8024924 <_isatty_r>
 8024562:	b128      	cbz	r0, 8024570 <__smakebuf_r+0x74>
 8024564:	89a3      	ldrh	r3, [r4, #12]
 8024566:	f023 0303 	bic.w	r3, r3, #3
 802456a:	f043 0301 	orr.w	r3, r3, #1
 802456e:	81a3      	strh	r3, [r4, #12]
 8024570:	89a0      	ldrh	r0, [r4, #12]
 8024572:	4305      	orrs	r5, r0
 8024574:	81a5      	strh	r5, [r4, #12]
 8024576:	e7cd      	b.n	8024514 <__smakebuf_r+0x18>
 8024578:	0802334d 	.word	0x0802334d

0802457c <memmove>:
 802457c:	4288      	cmp	r0, r1
 802457e:	b510      	push	{r4, lr}
 8024580:	eb01 0402 	add.w	r4, r1, r2
 8024584:	d902      	bls.n	802458c <memmove+0x10>
 8024586:	4284      	cmp	r4, r0
 8024588:	4623      	mov	r3, r4
 802458a:	d807      	bhi.n	802459c <memmove+0x20>
 802458c:	1e43      	subs	r3, r0, #1
 802458e:	42a1      	cmp	r1, r4
 8024590:	d008      	beq.n	80245a4 <memmove+0x28>
 8024592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024596:	f803 2f01 	strb.w	r2, [r3, #1]!
 802459a:	e7f8      	b.n	802458e <memmove+0x12>
 802459c:	4402      	add	r2, r0
 802459e:	4601      	mov	r1, r0
 80245a0:	428a      	cmp	r2, r1
 80245a2:	d100      	bne.n	80245a6 <memmove+0x2a>
 80245a4:	bd10      	pop	{r4, pc}
 80245a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80245aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80245ae:	e7f7      	b.n	80245a0 <memmove+0x24>

080245b0 <__malloc_lock>:
 80245b0:	4801      	ldr	r0, [pc, #4]	; (80245b8 <__malloc_lock+0x8>)
 80245b2:	f7fe bfd4 	b.w	802355e <__retarget_lock_acquire_recursive>
 80245b6:	bf00      	nop
 80245b8:	2400ffc1 	.word	0x2400ffc1

080245bc <__malloc_unlock>:
 80245bc:	4801      	ldr	r0, [pc, #4]	; (80245c4 <__malloc_unlock+0x8>)
 80245be:	f7fe bfd0 	b.w	8023562 <__retarget_lock_release_recursive>
 80245c2:	bf00      	nop
 80245c4:	2400ffc1 	.word	0x2400ffc1

080245c8 <_realloc_r>:
 80245c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80245cc:	4680      	mov	r8, r0
 80245ce:	4614      	mov	r4, r2
 80245d0:	460e      	mov	r6, r1
 80245d2:	b921      	cbnz	r1, 80245de <_realloc_r+0x16>
 80245d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80245d8:	4611      	mov	r1, r2
 80245da:	f7ff b865 	b.w	80236a8 <_malloc_r>
 80245de:	b92a      	cbnz	r2, 80245ec <_realloc_r+0x24>
 80245e0:	f7fe fff6 	bl	80235d0 <_free_r>
 80245e4:	4625      	mov	r5, r4
 80245e6:	4628      	mov	r0, r5
 80245e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80245ec:	f000 f9aa 	bl	8024944 <_malloc_usable_size_r>
 80245f0:	4284      	cmp	r4, r0
 80245f2:	4607      	mov	r7, r0
 80245f4:	d802      	bhi.n	80245fc <_realloc_r+0x34>
 80245f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80245fa:	d812      	bhi.n	8024622 <_realloc_r+0x5a>
 80245fc:	4621      	mov	r1, r4
 80245fe:	4640      	mov	r0, r8
 8024600:	f7ff f852 	bl	80236a8 <_malloc_r>
 8024604:	4605      	mov	r5, r0
 8024606:	2800      	cmp	r0, #0
 8024608:	d0ed      	beq.n	80245e6 <_realloc_r+0x1e>
 802460a:	42bc      	cmp	r4, r7
 802460c:	4622      	mov	r2, r4
 802460e:	4631      	mov	r1, r6
 8024610:	bf28      	it	cs
 8024612:	463a      	movcs	r2, r7
 8024614:	f7fe ffc6 	bl	80235a4 <memcpy>
 8024618:	4631      	mov	r1, r6
 802461a:	4640      	mov	r0, r8
 802461c:	f7fe ffd8 	bl	80235d0 <_free_r>
 8024620:	e7e1      	b.n	80245e6 <_realloc_r+0x1e>
 8024622:	4635      	mov	r5, r6
 8024624:	e7df      	b.n	80245e6 <_realloc_r+0x1e>

08024626 <__ssputs_r>:
 8024626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802462a:	688e      	ldr	r6, [r1, #8]
 802462c:	429e      	cmp	r6, r3
 802462e:	4682      	mov	sl, r0
 8024630:	460c      	mov	r4, r1
 8024632:	4690      	mov	r8, r2
 8024634:	461f      	mov	r7, r3
 8024636:	d838      	bhi.n	80246aa <__ssputs_r+0x84>
 8024638:	898a      	ldrh	r2, [r1, #12]
 802463a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802463e:	d032      	beq.n	80246a6 <__ssputs_r+0x80>
 8024640:	6825      	ldr	r5, [r4, #0]
 8024642:	6909      	ldr	r1, [r1, #16]
 8024644:	eba5 0901 	sub.w	r9, r5, r1
 8024648:	6965      	ldr	r5, [r4, #20]
 802464a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802464e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024652:	3301      	adds	r3, #1
 8024654:	444b      	add	r3, r9
 8024656:	106d      	asrs	r5, r5, #1
 8024658:	429d      	cmp	r5, r3
 802465a:	bf38      	it	cc
 802465c:	461d      	movcc	r5, r3
 802465e:	0553      	lsls	r3, r2, #21
 8024660:	d531      	bpl.n	80246c6 <__ssputs_r+0xa0>
 8024662:	4629      	mov	r1, r5
 8024664:	f7ff f820 	bl	80236a8 <_malloc_r>
 8024668:	4606      	mov	r6, r0
 802466a:	b950      	cbnz	r0, 8024682 <__ssputs_r+0x5c>
 802466c:	230c      	movs	r3, #12
 802466e:	f8ca 3000 	str.w	r3, [sl]
 8024672:	89a3      	ldrh	r3, [r4, #12]
 8024674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024678:	81a3      	strh	r3, [r4, #12]
 802467a:	f04f 30ff 	mov.w	r0, #4294967295
 802467e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024682:	6921      	ldr	r1, [r4, #16]
 8024684:	464a      	mov	r2, r9
 8024686:	f7fe ff8d 	bl	80235a4 <memcpy>
 802468a:	89a3      	ldrh	r3, [r4, #12]
 802468c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8024690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024694:	81a3      	strh	r3, [r4, #12]
 8024696:	6126      	str	r6, [r4, #16]
 8024698:	6165      	str	r5, [r4, #20]
 802469a:	444e      	add	r6, r9
 802469c:	eba5 0509 	sub.w	r5, r5, r9
 80246a0:	6026      	str	r6, [r4, #0]
 80246a2:	60a5      	str	r5, [r4, #8]
 80246a4:	463e      	mov	r6, r7
 80246a6:	42be      	cmp	r6, r7
 80246a8:	d900      	bls.n	80246ac <__ssputs_r+0x86>
 80246aa:	463e      	mov	r6, r7
 80246ac:	6820      	ldr	r0, [r4, #0]
 80246ae:	4632      	mov	r2, r6
 80246b0:	4641      	mov	r1, r8
 80246b2:	f7ff ff63 	bl	802457c <memmove>
 80246b6:	68a3      	ldr	r3, [r4, #8]
 80246b8:	1b9b      	subs	r3, r3, r6
 80246ba:	60a3      	str	r3, [r4, #8]
 80246bc:	6823      	ldr	r3, [r4, #0]
 80246be:	4433      	add	r3, r6
 80246c0:	6023      	str	r3, [r4, #0]
 80246c2:	2000      	movs	r0, #0
 80246c4:	e7db      	b.n	802467e <__ssputs_r+0x58>
 80246c6:	462a      	mov	r2, r5
 80246c8:	f7ff ff7e 	bl	80245c8 <_realloc_r>
 80246cc:	4606      	mov	r6, r0
 80246ce:	2800      	cmp	r0, #0
 80246d0:	d1e1      	bne.n	8024696 <__ssputs_r+0x70>
 80246d2:	6921      	ldr	r1, [r4, #16]
 80246d4:	4650      	mov	r0, sl
 80246d6:	f7fe ff7b 	bl	80235d0 <_free_r>
 80246da:	e7c7      	b.n	802466c <__ssputs_r+0x46>

080246dc <_svfiprintf_r>:
 80246dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246e0:	4698      	mov	r8, r3
 80246e2:	898b      	ldrh	r3, [r1, #12]
 80246e4:	061b      	lsls	r3, r3, #24
 80246e6:	b09d      	sub	sp, #116	; 0x74
 80246e8:	4607      	mov	r7, r0
 80246ea:	460d      	mov	r5, r1
 80246ec:	4614      	mov	r4, r2
 80246ee:	d50e      	bpl.n	802470e <_svfiprintf_r+0x32>
 80246f0:	690b      	ldr	r3, [r1, #16]
 80246f2:	b963      	cbnz	r3, 802470e <_svfiprintf_r+0x32>
 80246f4:	2140      	movs	r1, #64	; 0x40
 80246f6:	f7fe ffd7 	bl	80236a8 <_malloc_r>
 80246fa:	6028      	str	r0, [r5, #0]
 80246fc:	6128      	str	r0, [r5, #16]
 80246fe:	b920      	cbnz	r0, 802470a <_svfiprintf_r+0x2e>
 8024700:	230c      	movs	r3, #12
 8024702:	603b      	str	r3, [r7, #0]
 8024704:	f04f 30ff 	mov.w	r0, #4294967295
 8024708:	e0d1      	b.n	80248ae <_svfiprintf_r+0x1d2>
 802470a:	2340      	movs	r3, #64	; 0x40
 802470c:	616b      	str	r3, [r5, #20]
 802470e:	2300      	movs	r3, #0
 8024710:	9309      	str	r3, [sp, #36]	; 0x24
 8024712:	2320      	movs	r3, #32
 8024714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024718:	f8cd 800c 	str.w	r8, [sp, #12]
 802471c:	2330      	movs	r3, #48	; 0x30
 802471e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80248c8 <_svfiprintf_r+0x1ec>
 8024722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024726:	f04f 0901 	mov.w	r9, #1
 802472a:	4623      	mov	r3, r4
 802472c:	469a      	mov	sl, r3
 802472e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024732:	b10a      	cbz	r2, 8024738 <_svfiprintf_r+0x5c>
 8024734:	2a25      	cmp	r2, #37	; 0x25
 8024736:	d1f9      	bne.n	802472c <_svfiprintf_r+0x50>
 8024738:	ebba 0b04 	subs.w	fp, sl, r4
 802473c:	d00b      	beq.n	8024756 <_svfiprintf_r+0x7a>
 802473e:	465b      	mov	r3, fp
 8024740:	4622      	mov	r2, r4
 8024742:	4629      	mov	r1, r5
 8024744:	4638      	mov	r0, r7
 8024746:	f7ff ff6e 	bl	8024626 <__ssputs_r>
 802474a:	3001      	adds	r0, #1
 802474c:	f000 80aa 	beq.w	80248a4 <_svfiprintf_r+0x1c8>
 8024750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024752:	445a      	add	r2, fp
 8024754:	9209      	str	r2, [sp, #36]	; 0x24
 8024756:	f89a 3000 	ldrb.w	r3, [sl]
 802475a:	2b00      	cmp	r3, #0
 802475c:	f000 80a2 	beq.w	80248a4 <_svfiprintf_r+0x1c8>
 8024760:	2300      	movs	r3, #0
 8024762:	f04f 32ff 	mov.w	r2, #4294967295
 8024766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802476a:	f10a 0a01 	add.w	sl, sl, #1
 802476e:	9304      	str	r3, [sp, #16]
 8024770:	9307      	str	r3, [sp, #28]
 8024772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024776:	931a      	str	r3, [sp, #104]	; 0x68
 8024778:	4654      	mov	r4, sl
 802477a:	2205      	movs	r2, #5
 802477c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024780:	4851      	ldr	r0, [pc, #324]	; (80248c8 <_svfiprintf_r+0x1ec>)
 8024782:	f7db fdcd 	bl	8000320 <memchr>
 8024786:	9a04      	ldr	r2, [sp, #16]
 8024788:	b9d8      	cbnz	r0, 80247c2 <_svfiprintf_r+0xe6>
 802478a:	06d0      	lsls	r0, r2, #27
 802478c:	bf44      	itt	mi
 802478e:	2320      	movmi	r3, #32
 8024790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024794:	0711      	lsls	r1, r2, #28
 8024796:	bf44      	itt	mi
 8024798:	232b      	movmi	r3, #43	; 0x2b
 802479a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802479e:	f89a 3000 	ldrb.w	r3, [sl]
 80247a2:	2b2a      	cmp	r3, #42	; 0x2a
 80247a4:	d015      	beq.n	80247d2 <_svfiprintf_r+0xf6>
 80247a6:	9a07      	ldr	r2, [sp, #28]
 80247a8:	4654      	mov	r4, sl
 80247aa:	2000      	movs	r0, #0
 80247ac:	f04f 0c0a 	mov.w	ip, #10
 80247b0:	4621      	mov	r1, r4
 80247b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80247b6:	3b30      	subs	r3, #48	; 0x30
 80247b8:	2b09      	cmp	r3, #9
 80247ba:	d94e      	bls.n	802485a <_svfiprintf_r+0x17e>
 80247bc:	b1b0      	cbz	r0, 80247ec <_svfiprintf_r+0x110>
 80247be:	9207      	str	r2, [sp, #28]
 80247c0:	e014      	b.n	80247ec <_svfiprintf_r+0x110>
 80247c2:	eba0 0308 	sub.w	r3, r0, r8
 80247c6:	fa09 f303 	lsl.w	r3, r9, r3
 80247ca:	4313      	orrs	r3, r2
 80247cc:	9304      	str	r3, [sp, #16]
 80247ce:	46a2      	mov	sl, r4
 80247d0:	e7d2      	b.n	8024778 <_svfiprintf_r+0x9c>
 80247d2:	9b03      	ldr	r3, [sp, #12]
 80247d4:	1d19      	adds	r1, r3, #4
 80247d6:	681b      	ldr	r3, [r3, #0]
 80247d8:	9103      	str	r1, [sp, #12]
 80247da:	2b00      	cmp	r3, #0
 80247dc:	bfbb      	ittet	lt
 80247de:	425b      	neglt	r3, r3
 80247e0:	f042 0202 	orrlt.w	r2, r2, #2
 80247e4:	9307      	strge	r3, [sp, #28]
 80247e6:	9307      	strlt	r3, [sp, #28]
 80247e8:	bfb8      	it	lt
 80247ea:	9204      	strlt	r2, [sp, #16]
 80247ec:	7823      	ldrb	r3, [r4, #0]
 80247ee:	2b2e      	cmp	r3, #46	; 0x2e
 80247f0:	d10c      	bne.n	802480c <_svfiprintf_r+0x130>
 80247f2:	7863      	ldrb	r3, [r4, #1]
 80247f4:	2b2a      	cmp	r3, #42	; 0x2a
 80247f6:	d135      	bne.n	8024864 <_svfiprintf_r+0x188>
 80247f8:	9b03      	ldr	r3, [sp, #12]
 80247fa:	1d1a      	adds	r2, r3, #4
 80247fc:	681b      	ldr	r3, [r3, #0]
 80247fe:	9203      	str	r2, [sp, #12]
 8024800:	2b00      	cmp	r3, #0
 8024802:	bfb8      	it	lt
 8024804:	f04f 33ff 	movlt.w	r3, #4294967295
 8024808:	3402      	adds	r4, #2
 802480a:	9305      	str	r3, [sp, #20]
 802480c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80248d8 <_svfiprintf_r+0x1fc>
 8024810:	7821      	ldrb	r1, [r4, #0]
 8024812:	2203      	movs	r2, #3
 8024814:	4650      	mov	r0, sl
 8024816:	f7db fd83 	bl	8000320 <memchr>
 802481a:	b140      	cbz	r0, 802482e <_svfiprintf_r+0x152>
 802481c:	2340      	movs	r3, #64	; 0x40
 802481e:	eba0 000a 	sub.w	r0, r0, sl
 8024822:	fa03 f000 	lsl.w	r0, r3, r0
 8024826:	9b04      	ldr	r3, [sp, #16]
 8024828:	4303      	orrs	r3, r0
 802482a:	3401      	adds	r4, #1
 802482c:	9304      	str	r3, [sp, #16]
 802482e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024832:	4826      	ldr	r0, [pc, #152]	; (80248cc <_svfiprintf_r+0x1f0>)
 8024834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024838:	2206      	movs	r2, #6
 802483a:	f7db fd71 	bl	8000320 <memchr>
 802483e:	2800      	cmp	r0, #0
 8024840:	d038      	beq.n	80248b4 <_svfiprintf_r+0x1d8>
 8024842:	4b23      	ldr	r3, [pc, #140]	; (80248d0 <_svfiprintf_r+0x1f4>)
 8024844:	bb1b      	cbnz	r3, 802488e <_svfiprintf_r+0x1b2>
 8024846:	9b03      	ldr	r3, [sp, #12]
 8024848:	3307      	adds	r3, #7
 802484a:	f023 0307 	bic.w	r3, r3, #7
 802484e:	3308      	adds	r3, #8
 8024850:	9303      	str	r3, [sp, #12]
 8024852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024854:	4433      	add	r3, r6
 8024856:	9309      	str	r3, [sp, #36]	; 0x24
 8024858:	e767      	b.n	802472a <_svfiprintf_r+0x4e>
 802485a:	fb0c 3202 	mla	r2, ip, r2, r3
 802485e:	460c      	mov	r4, r1
 8024860:	2001      	movs	r0, #1
 8024862:	e7a5      	b.n	80247b0 <_svfiprintf_r+0xd4>
 8024864:	2300      	movs	r3, #0
 8024866:	3401      	adds	r4, #1
 8024868:	9305      	str	r3, [sp, #20]
 802486a:	4619      	mov	r1, r3
 802486c:	f04f 0c0a 	mov.w	ip, #10
 8024870:	4620      	mov	r0, r4
 8024872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024876:	3a30      	subs	r2, #48	; 0x30
 8024878:	2a09      	cmp	r2, #9
 802487a:	d903      	bls.n	8024884 <_svfiprintf_r+0x1a8>
 802487c:	2b00      	cmp	r3, #0
 802487e:	d0c5      	beq.n	802480c <_svfiprintf_r+0x130>
 8024880:	9105      	str	r1, [sp, #20]
 8024882:	e7c3      	b.n	802480c <_svfiprintf_r+0x130>
 8024884:	fb0c 2101 	mla	r1, ip, r1, r2
 8024888:	4604      	mov	r4, r0
 802488a:	2301      	movs	r3, #1
 802488c:	e7f0      	b.n	8024870 <_svfiprintf_r+0x194>
 802488e:	ab03      	add	r3, sp, #12
 8024890:	9300      	str	r3, [sp, #0]
 8024892:	462a      	mov	r2, r5
 8024894:	4b0f      	ldr	r3, [pc, #60]	; (80248d4 <_svfiprintf_r+0x1f8>)
 8024896:	a904      	add	r1, sp, #16
 8024898:	4638      	mov	r0, r7
 802489a:	f3af 8000 	nop.w
 802489e:	1c42      	adds	r2, r0, #1
 80248a0:	4606      	mov	r6, r0
 80248a2:	d1d6      	bne.n	8024852 <_svfiprintf_r+0x176>
 80248a4:	89ab      	ldrh	r3, [r5, #12]
 80248a6:	065b      	lsls	r3, r3, #25
 80248a8:	f53f af2c 	bmi.w	8024704 <_svfiprintf_r+0x28>
 80248ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80248ae:	b01d      	add	sp, #116	; 0x74
 80248b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248b4:	ab03      	add	r3, sp, #12
 80248b6:	9300      	str	r3, [sp, #0]
 80248b8:	462a      	mov	r2, r5
 80248ba:	4b06      	ldr	r3, [pc, #24]	; (80248d4 <_svfiprintf_r+0x1f8>)
 80248bc:	a904      	add	r1, sp, #16
 80248be:	4638      	mov	r0, r7
 80248c0:	f7ff f92e 	bl	8023b20 <_printf_i>
 80248c4:	e7eb      	b.n	802489e <_svfiprintf_r+0x1c2>
 80248c6:	bf00      	nop
 80248c8:	0802736c 	.word	0x0802736c
 80248cc:	08027376 	.word	0x08027376
 80248d0:	00000000 	.word	0x00000000
 80248d4:	08024627 	.word	0x08024627
 80248d8:	08027372 	.word	0x08027372

080248dc <_read_r>:
 80248dc:	b538      	push	{r3, r4, r5, lr}
 80248de:	4d07      	ldr	r5, [pc, #28]	; (80248fc <_read_r+0x20>)
 80248e0:	4604      	mov	r4, r0
 80248e2:	4608      	mov	r0, r1
 80248e4:	4611      	mov	r1, r2
 80248e6:	2200      	movs	r2, #0
 80248e8:	602a      	str	r2, [r5, #0]
 80248ea:	461a      	mov	r2, r3
 80248ec:	f7de fd48 	bl	8003380 <_read>
 80248f0:	1c43      	adds	r3, r0, #1
 80248f2:	d102      	bne.n	80248fa <_read_r+0x1e>
 80248f4:	682b      	ldr	r3, [r5, #0]
 80248f6:	b103      	cbz	r3, 80248fa <_read_r+0x1e>
 80248f8:	6023      	str	r3, [r4, #0]
 80248fa:	bd38      	pop	{r3, r4, r5, pc}
 80248fc:	240100d4 	.word	0x240100d4

08024900 <_fstat_r>:
 8024900:	b538      	push	{r3, r4, r5, lr}
 8024902:	4d07      	ldr	r5, [pc, #28]	; (8024920 <_fstat_r+0x20>)
 8024904:	2300      	movs	r3, #0
 8024906:	4604      	mov	r4, r0
 8024908:	4608      	mov	r0, r1
 802490a:	4611      	mov	r1, r2
 802490c:	602b      	str	r3, [r5, #0]
 802490e:	f7de fd58 	bl	80033c2 <_fstat>
 8024912:	1c43      	adds	r3, r0, #1
 8024914:	d102      	bne.n	802491c <_fstat_r+0x1c>
 8024916:	682b      	ldr	r3, [r5, #0]
 8024918:	b103      	cbz	r3, 802491c <_fstat_r+0x1c>
 802491a:	6023      	str	r3, [r4, #0]
 802491c:	bd38      	pop	{r3, r4, r5, pc}
 802491e:	bf00      	nop
 8024920:	240100d4 	.word	0x240100d4

08024924 <_isatty_r>:
 8024924:	b538      	push	{r3, r4, r5, lr}
 8024926:	4d06      	ldr	r5, [pc, #24]	; (8024940 <_isatty_r+0x1c>)
 8024928:	2300      	movs	r3, #0
 802492a:	4604      	mov	r4, r0
 802492c:	4608      	mov	r0, r1
 802492e:	602b      	str	r3, [r5, #0]
 8024930:	f7de fd4c 	bl	80033cc <_isatty>
 8024934:	1c43      	adds	r3, r0, #1
 8024936:	d102      	bne.n	802493e <_isatty_r+0x1a>
 8024938:	682b      	ldr	r3, [r5, #0]
 802493a:	b103      	cbz	r3, 802493e <_isatty_r+0x1a>
 802493c:	6023      	str	r3, [r4, #0]
 802493e:	bd38      	pop	{r3, r4, r5, pc}
 8024940:	240100d4 	.word	0x240100d4

08024944 <_malloc_usable_size_r>:
 8024944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024948:	1f18      	subs	r0, r3, #4
 802494a:	2b00      	cmp	r3, #0
 802494c:	bfbc      	itt	lt
 802494e:	580b      	ldrlt	r3, [r1, r0]
 8024950:	18c0      	addlt	r0, r0, r3
 8024952:	4770      	bx	lr

08024954 <_init>:
 8024954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024956:	bf00      	nop
 8024958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802495a:	bc08      	pop	{r3}
 802495c:	469e      	mov	lr, r3
 802495e:	4770      	bx	lr

08024960 <_fini>:
 8024960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024962:	bf00      	nop
 8024964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024966:	bc08      	pop	{r3}
 8024968:	469e      	mov	lr, r3
 802496a:	4770      	bx	lr
