
AW_TouchGFX_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000241fc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a2c  080244ac  080244ac  000344ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000078c  08026ed8  08026ed8  00036ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08027664  08027664  0018d0c8  2**0
                  CONTENTS
  5 .ARM          00000000  08027664  08027664  0018d0c8  2**0
                  CONTENTS
  6 .preinit_array 00000000  08027664  08027664  0018d0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000028  08027664  08027664  00037664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   0000001c  0802768c  0802768c  0003768c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000144  24000000  080276a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000f580  24000144  080277ec  00040144  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2400f6c4  080277ec  0004f6c4  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0018d0c8  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  ALLOC
 14 FontFlashSection 0000bf60  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000088  9000bf60  9000bf60  0005bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 001310e0  9000bfe8  9000bfe8  0005bfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   0006f5fd  00000000  00000000  0018d0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000f951e  00000000  00000000  001fc6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00019289  00000000  00000000  002f5c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000043e0  00000000  00000000  0030eea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0017e17b  00000000  00000000  00313280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00004550  00000000  00000000  00491400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00043741  00000000  00000000  00495950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00043a15  00000000  00000000  004d9091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000cf  00000000  00000000  0051caa6  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000c3ec  00000000  00000000  0051cb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000144 	.word	0x24000144
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08024494 	.word	0x08024494

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000148 	.word	0x24000148
 80002ec:	08024494 	.word	0x08024494

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003c6:	e003      	b.n	80003d0 <LoopCopyDataInit>

080003c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ce:	3104      	adds	r1, #4

080003d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003d8:	d3f6      	bcc.n	80003c8 <CopyDataInit>
  ldr  r2, =_sbss
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003dc:	e002      	b.n	80003e4 <LoopFillZerobss>

080003de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003e0:	f842 3b04 	str.w	r3, [r2], #4

080003e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003e8:	d3f9      	bcc.n	80003de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ea:	f009 ff21 	bl	800a230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f022 fe31 	bl	8023054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f2:	f002 f921 	bl	8002638 <main>
  bx  lr
 80003f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003f8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003fc:	080276a8 	.word	0x080276a8
  ldr  r0, =_sdata
 8000400:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000404:	24000144 	.word	0x24000144
  ldr  r2, =_sbss
 8000408:	24000144 	.word	0x24000144
  ldr  r3, = _ebss
 800040c:	2400f6c4 	.word	0x2400f6c4

08000410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>

08000412 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8000412:	4770      	bx	lr

08000414 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8000414:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8000416:	f000 ff75 	bl	8001304 <touchgfx_init>
}
 800041a:	bd08      	pop	{r3, pc}

0800041c <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800041c:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800041e:	f000 ffed 	bl	80013fc <touchgfx_taskEntry>
}
 8000422:	bd08      	pop	{r3, pc}

08000424 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000424:	4a02      	ldr	r2, [pc, #8]	; (8000430 <_ZN20STM32TouchControllerD1Ev+0xc>)
 8000426:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 8000428:	4a02      	ldr	r2, [pc, #8]	; (8000434 <_ZN20STM32TouchControllerD1Ev+0x10>)
 800042a:	6002      	str	r2, [r0, #0]
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	0802450c 	.word	0x0802450c
 8000434:	080244f4 	.word	0x080244f4

08000438 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000438:	b500      	push	{lr}
 800043a:	b085      	sub	sp, #20
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800043c:	2308      	movs	r3, #8
 800043e:	9302      	str	r3, [sp, #8]
    hTS.Accuracy = 0;
 8000440:	2000      	movs	r0, #0
 8000442:	9003      	str	r0, [sp, #12]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <_ZN20STM32TouchController4initEv+0x24>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <_ZN20STM32TouchController4initEv+0x28>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8000450:	4669      	mov	r1, sp
 8000452:	f009 fdf9 	bl	800a048 <BSP_TS_Init>
}
 8000456:	b005      	add	sp, #20
 8000458:	f85d fb04 	ldr.w	pc, [sp], #4
 800045c:	2400f43a 	.word	0x2400f43a
 8000460:	2400f43c 	.word	0x2400f43c

08000464 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	b085      	sub	sp, #20
 8000468:	460d      	mov	r5, r1
 800046a:	4614      	mov	r4, r2
    TS_State_t TS_State = { 0 };
 800046c:	2000      	movs	r0, #0
 800046e:	9001      	str	r0, [sp, #4]
 8000470:	9002      	str	r0, [sp, #8]
 8000472:	9003      	str	r0, [sp, #12]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000474:	a901      	add	r1, sp, #4
 8000476:	f009 fe57 	bl	800a128 <BSP_TS_GetState>
 800047a:	b140      	cbz	r0, 800048e <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000480:	f383 8811 	msr	BASEPRI, r3
 8000484:	f3bf 8f6f 	isb	sy
 8000488:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800048c:	e7fe      	b.n	800048c <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 800048e:	9b01      	ldr	r3, [sp, #4]
 8000490:	b913      	cbnz	r3, 8000498 <_ZN20STM32TouchController11sampleTouchERlS0_+0x34>
        y = TS_State.TouchY;

        return true;
    }

    return false;
 8000492:	2000      	movs	r0, #0
}
 8000494:	b005      	add	sp, #20
 8000496:	bd30      	pop	{r4, r5, pc}
        x = TS_State.TouchX;
 8000498:	9b02      	ldr	r3, [sp, #8]
 800049a:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 800049c:	9b03      	ldr	r3, [sp, #12]
 800049e:	6023      	str	r3, [r4, #0]
        return true;
 80004a0:	2001      	movs	r0, #1
 80004a2:	e7f7      	b.n	8000494 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>

080004a4 <_ZN20STM32TouchControllerD0Ev>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	4604      	mov	r4, r0
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <_ZN20STM32TouchControllerD0Ev+0x18>)
 80004aa:	6003      	str	r3, [r0, #0]
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 80004ae:	6003      	str	r3, [r0, #0]
 80004b0:	2104      	movs	r1, #4
 80004b2:	f022 fc60 	bl	8022d76 <_ZdlPvj>
 80004b6:	4620      	mov	r0, r4
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop
 80004bc:	0802450c 	.word	0x0802450c
 80004c0:	080244f4 	.word	0x080244f4

080004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80004c4:	b508      	push	{r3, lr}
    switch (id)
 80004c6:	2803      	cmp	r0, #3
 80004c8:	d80e      	bhi.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 80004ca:	e8df f000 	tbb	[pc, r0]
 80004ce:	0e02      	.short	0x0e02
 80004d0:	261a      	.short	0x261a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004d4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004d8:	fab2 f282 	clz	r2, r2
 80004dc:	0952      	lsrs	r2, r2, #5
 80004de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e2:	4815      	ldr	r0, [pc, #84]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004e4:	f00a fcbf 	bl	800ae66 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80004e8:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 80004ec:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	0952      	lsrs	r2, r2, #5
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 80004fc:	f00a fcb3 	bl	800ae66 <HAL_GPIO_WritePin>
        break;
 8000500:	e7f2      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 8000504:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000508:	fab2 f282 	clz	r2, r2
 800050c:	0952      	lsrs	r2, r2, #5
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x78>)
 8000514:	f00a fca7 	bl	800ae66 <HAL_GPIO_WritePin>
        break;
 8000518:	e7e6      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x70>)
 800051c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8000520:	fab2 f282 	clz	r2, r2
 8000524:	0952      	lsrs	r2, r2, #5
 8000526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>)
 800052c:	f00a fc9b 	bl	800ae66 <HAL_GPIO_WritePin>
}
 8000530:	e7da      	b.n	80004e8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x24>
 8000532:	bf00      	nop
 8000534:	24000160 	.word	0x24000160
 8000538:	58021c00 	.word	0x58021c00
 800053c:	58022000 	.word	0x58022000

08000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000540:	b508      	push	{r3, lr}
    switch (id)
 8000542:	2803      	cmp	r0, #3
 8000544:	d80e      	bhi.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
 8000546:	e8df f000 	tbb	[pc, r0]
 800054a:	0e02      	.short	0x0e02
 800054c:	271a      	.short	0x271a
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000554:	b103      	cbz	r3, 8000558 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
 8000556:	2001      	movs	r0, #1
 8000558:	4602      	mov	r2, r0
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000560:	f00a fc81 	bl	800ae66 <HAL_GPIO_WritePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8000564:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000568:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800056c:	b903      	cbnz	r3, 8000570 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
 800056e:	2000      	movs	r0, #0
 8000570:	4602      	mov	r2, r0
 8000572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 8000578:	f00a fc75 	bl	800ae66 <HAL_GPIO_WritePin>
        break;
 800057c:	e7f2      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 8000580:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000584:	b133      	cbz	r3, 8000594 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058c:	480b      	ldr	r0, [pc, #44]	; (80005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800058e:	f00a fc6a 	bl	800ae66 <HAL_GPIO_WritePin>
        break;
 8000592:	e7e7      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000594:	2200      	movs	r2, #0
 8000596:	e7f7      	b.n	8000588 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>)
 800059a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800059e:	b133      	cbz	r3, 80005ae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6e>
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x78>)
 80005a8:	f00a fc5d 	bl	800ae66 <HAL_GPIO_WritePin>
}
 80005ac:	e7da      	b.n	8000564 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x24>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80005ae:	2200      	movs	r2, #0
 80005b0:	e7f7      	b.n	80005a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x62>
 80005b2:	bf00      	nop
 80005b4:	24000160 	.word	0x24000160
 80005b8:	58021c00 	.word	0x58021c00
 80005bc:	58022000 	.word	0x58022000

080005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80005c0:	b508      	push	{r3, lr}
    switch (id)
 80005c2:	2803      	cmp	r0, #3
 80005c4:	d808      	bhi.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005c6:	e8df f000 	tbb	[pc, r0]
 80005ca:	0802      	.short	0x0802
 80005cc:	140e      	.short	0x140e
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005d4:	f00a fc4d 	bl	800ae72 <HAL_GPIO_TogglePin>
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80005d8:	bd08      	pop	{r3, pc}
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80005da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005e0:	f00a fc47 	bl	800ae72 <HAL_GPIO_TogglePin>
        break;
 80005e4:	e7f8      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x44>)
 80005ec:	f00a fc41 	bl	800ae72 <HAL_GPIO_TogglePin>
        break;
 80005f0:	e7f2      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80005f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x40>)
 80005f8:	f00a fc3b 	bl	800ae72 <HAL_GPIO_TogglePin>
}
 80005fc:	e7ec      	b.n	80005d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>
 80005fe:	bf00      	nop
 8000600:	58021c00 	.word	0x58021c00
 8000604:	58022000 	.word	0x58022000

08000608 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 8000608:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800060c:	2301      	movs	r3, #1
 800060e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8000612:	4770      	bx	lr

08000614 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000614:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8000616:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 800061a:	b123      	cbz	r3, 8000626 <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 800061c:	6840      	ldr	r0, [r0, #4]
 800061e:	6803      	ldr	r3, [r0, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4798      	blx	r3
        }
        return static_cast<BlitOperations>(0);
    }
 8000624:	bd08      	pop	{r3, pc}
        return static_cast<BlitOperations>(0);
 8000626:	2000      	movs	r0, #0
 8000628:	e7fc      	b.n	8000624 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

0800062a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800062a:	2000      	movs	r0, #0
 800062c:	4770      	bx	lr
	...

08000630 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000630:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000632:	3900      	subs	r1, #0
 8000634:	bf18      	it	ne
 8000636:	2101      	movne	r1, #1
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 800063a:	7019      	strb	r1, [r3, #0]
    }
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2400f43f 	.word	0x2400f43f

08000644 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000644:	2000      	movs	r0, #0
 8000646:	4770      	bx	lr

08000648 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000648:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 800064a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800064c:	b10b      	cbz	r3, 8000652 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 800064e:	4608      	mov	r0, r1
 8000650:	4798      	blx	r3
        }
    }
 8000652:	bd08      	pop	{r3, pc}

08000654 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8000654:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000658:	4770      	bx	lr

0800065a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800065a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 800065c:	6840      	ldr	r0, [r0, #4]
 800065e:	6803      	ldr	r3, [r0, #0]
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4798      	blx	r3
    }
 8000664:	bd08      	pop	{r3, pc}
	...

08000668 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000668:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 800066c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8000670:	429a      	cmp	r2, r3
 8000672:	d00c      	beq.n	800068e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b9ab      	cbnz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 800067c:	8811      	ldrh	r1, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 8000680:	8818      	ldrh	r0, [r3, #0]
 8000682:	8010      	strh	r0, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8000684:	8019      	strh	r1, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000688:	2201      	movs	r2, #1
 800068a:	701a      	strb	r2, [r3, #0]
 800068c:	4770      	bx	lr
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b143      	cbz	r3, 80006a6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3e>
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
 8000696:	8811      	ldrh	r1, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>)
 800069a:	8818      	ldrh	r0, [r3, #0]
 800069c:	8010      	strh	r0, [r2, #0]
            DISPLAY_WIDTH = tmp;
 800069e:	8019      	strh	r1, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80006a0:	4b01      	ldr	r3, [pc, #4]	; (80006a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
        }
    }
 80006a6:	4770      	bx	lr
 80006a8:	2400f438 	.word	0x2400f438
 80006ac:	2400f436 	.word	0x2400f436
 80006b0:	2400f434 	.word	0x2400f434

080006b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <_ZN11TouchGFXHALD1Ev+0x10>)
 80006b6:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <_ZN11TouchGFXHALD1Ev+0x14>)
 80006ba:	6002      	str	r2, [r0, #0]
    {
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <_ZN11TouchGFXHALD1Ev+0x18>)
 80006be:	6002      	str	r2, [r0, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	0802469c 	.word	0x0802469c
 80006c8:	08024cac 	.word	0x08024cac
 80006cc:	0802663c 	.word	0x0802663c

080006d0 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80006d0:	b508      	push	{r3, lr}
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80006d2:	f001 fc5f 	bl	8001f94 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80006d6:	bd08      	pop	{r3, pc}

080006d8 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80006d8:	b508      	push	{r3, lr}
 80006da:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80006dc:	6803      	ldr	r3, [r0, #0]
 80006de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006e2:	4798      	blx	r3
    enableInterrupts();
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80006e8:	4620      	mov	r0, r4
 80006ea:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80006ec:	f000 f920 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006f4:	4620      	mov	r0, r4
 80006f6:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <_ZN11TouchGFXHAL9taskEntryEv+0x54>)
 80006fe:	f00a fbb2 	bl	800ae66 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000702:	4d0b      	ldr	r5, [pc, #44]	; (8000730 <_ZN11TouchGFXHAL9taskEntryEv+0x58>)
 8000704:	2201      	movs	r2, #1
 8000706:	2104      	movs	r1, #4
 8000708:	4628      	mov	r0, r5
 800070a:	f00a fbac 	bl	800ae66 <HAL_GPIO_WritePin>

    /* Wait to avoid seeing garbage on start up */
    HAL_Delay(200);
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f009 fe0c 	bl	800a32c <HAL_Delay>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2102      	movs	r1, #2
 8000718:	4628      	mov	r0, r5
 800071a:	f00a fba4 	bl	800ae66 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800071e:	f000 f907 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000726:	4620      	mov	r0, r4
 8000728:	4798      	blx	r3
    for (;;)
 800072a:	e7f8      	b.n	800071e <_ZN11TouchGFXHAL9taskEntryEv+0x46>
 800072c:	58022800 	.word	0x58022800
 8000730:	58020000 	.word	0x58020000

08000734 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000734:	b508      	push	{r3, lr}
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000736:	f001 f987 	bl	8001a48 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 800073a:	bd08      	pop	{r3, pc}

0800073c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800073c:	b508      	push	{r3, lr}
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800073e:	f001 f989 	bl	8001a54 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000742:	bd08      	pop	{r3, pc}

08000744 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000744:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000746:	f001 fc4d 	bl	8001fe4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000756:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800075a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800075e:	e000      	b.n	8000762 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000760:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000762:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000766:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800076a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800076e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000772:	4907      	ldr	r1, [pc, #28]	; (8000790 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8000774:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8000778:	4613      	mov	r3, r2
 800077a:	3a01      	subs	r2, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f2      	bne.n	8000766 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8000780:	1e43      	subs	r3, r0, #1
 8000782:	2800      	cmp	r0, #0
 8000784:	d1ec      	bne.n	8000760 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8000786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800078a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000794:	b508      	push	{r3, lr}
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000796:	f001 f915 	bl	80019c4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800079a:	bd08      	pop	{r3, pc}

0800079c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800079c:	b508      	push	{r3, lr}
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800079e:	f001 f91b 	bl	80019d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80007a2:	bd08      	pop	{r3, pc}

080007a4 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80007a4:	b508      	push	{r3, lr}
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80007a6:	f001 f921 	bl	80019ec <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80007aa:	bd08      	pop	{r3, pc}

080007ac <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80007ac:	b508      	push	{r3, lr}
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80007ae:	f001 f931 	bl	8001a14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80007b2:	bd08      	pop	{r3, pc}

080007b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80007b4:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007b6:	b161      	cbz	r1, 80007d2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x1e>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80007b8:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80007ba:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80007bc:	3a00      	subs	r2, #0
 80007be:	bf18      	it	ne
 80007c0:	2201      	movne	r2, #1
 80007c2:	4907      	ldr	r1, [pc, #28]	; (80007e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2c>)
 80007c4:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
 80007c6:	6802      	ldr	r2, [r0, #0]
 80007c8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80007cc:	4619      	mov	r1, r3
 80007ce:	4790      	blx	r2
    }
 80007d0:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80007d6:	f240 21d2 	movw	r1, #722	; 0x2d2
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80007dc:	f022 fafa 	bl	8022dd4 <__assert_func>
 80007e0:	2400f43e 	.word	0x2400f43e
 80007e4:	0802451c 	.word	0x0802451c
 80007e8:	08024554 	.word	0x08024554
 80007ec:	080245a4 	.word	0x080245a4

080007f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80007f0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	428b      	cmp	r3, r1
 80007f8:	d808      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	4293      	cmp	r3, r2
 8000800:	d804      	bhi.n	800080c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000804:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000808:	801a      	strh	r2, [r3, #0]
    }
 800080a:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000810:	219e      	movs	r1, #158	; 0x9e
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000814:	f022 fade 	bl	8022dd4 <__assert_func>
 8000818:	2400f434 	.word	0x2400f434
 800081c:	2400f436 	.word	0x2400f436
 8000820:	2400f43a 	.word	0x2400f43a
 8000824:	2400f43c 	.word	0x2400f43c
 8000828:	080245ec 	.word	0x080245ec
 800082c:	08024650 	.word	0x08024650
 8000830:	080245a4 	.word	0x080245a4

08000834 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000834:	b510      	push	{r4, lr}
 8000836:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000838:	f014 fa1a 	bl	8014c70 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000842:	4620      	mov	r0, r4
 8000844:	4798      	blx	r3
    }
 8000846:	bd10      	pop	{r4, pc}

08000848 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000848:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800084a:	f013 fc6a 	bl	8014122 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 800084e:	bd08      	pop	{r3, pc}

08000850 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000850:	b510      	push	{r4, lr}
 8000852:	4604      	mov	r4, r0
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <_ZN11TouchGFXHALD0Ev+0x1c>)
 8000856:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <_ZN11TouchGFXHALD0Ev+0x20>)
 800085a:	6003      	str	r3, [r0, #0]
    {
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <_ZN11TouchGFXHALD0Ev+0x24>)
 800085e:	6003      	str	r3, [r0, #0]
 8000860:	217c      	movs	r1, #124	; 0x7c
 8000862:	f022 fa88 	bl	8022d76 <_ZdlPvj>
 8000866:	4620      	mov	r0, r4
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	0802469c 	.word	0x0802469c
 8000870:	08024cac 	.word	0x08024cac
 8000874:	0802663c 	.word	0x0802663c

08000878 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000878:	b508      	push	{r3, lr}
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800087a:	2200      	movs	r2, #0
 800087c:	2101      	movs	r1, #1
 800087e:	4608      	mov	r0, r1
 8000880:	f00e fc66 	bl	800f150 <osSemaphoreNew>
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000886:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000888:	b140      	cbz	r0, 800089c <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	2001      	movs	r0, #1
 8000890:	f00e fd1d 	bl	800f2ce <osMessageQueueNew>
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000896:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000898:	b130      	cbz	r0, 80008a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
 800089a:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008a0:	2128      	movs	r1, #40	; 0x28
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008a4:	f022 fa96 	bl	8022dd4 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80008ac:	212c      	movs	r1, #44	; 0x2c
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80008b0:	f022 fa90 	bl	8022dd4 <__assert_func>
 80008b4:	24000174 	.word	0x24000174
 80008b8:	24000170 	.word	0x24000170
 80008bc:	0802476c 	.word	0x0802476c
 80008c0:	080247b8 	.word	0x080247b8
 80008c4:	080247e8 	.word	0x080247e8
 80008c8:	08024848 	.word	0x08024848

080008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80008cc:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80008ce:	f04f 31ff 	mov.w	r1, #4294967295
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	f00e fc97 	bl	800f208 <osSemaphoreAcquire>
}
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	24000174 	.word	0x24000174

080008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80008e0:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 80008e2:	4b02      	ldr	r3, [pc, #8]	; (80008ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0xc>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f00e fcc3 	bl	800f270 <osSemaphoreRelease>
}
 80008ea:	bd08      	pop	{r3, pc}
 80008ec:	24000174 	.word	0x24000174

080008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80008f0:	b508      	push	{r3, lr}
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x10>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	f00e fc86 	bl	800f208 <osSemaphoreAcquire>
}
 80008fc:	bd08      	pop	{r3, pc}
 80008fe:	bf00      	nop
 8000900:	24000174 	.word	0x24000174

08000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8000904:	b508      	push	{r3, lr}
    osSemaphoreRelease(frame_buffer_sem);
 8000906:	4b02      	ldr	r3, [pc, #8]	; (8000910 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0xc>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f00e fcb1 	bl	800f270 <osSemaphoreRelease>
}
 800090e:	bd08      	pop	{r3, pc}
 8000910:	24000174 	.word	0x24000174

08000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000914:	b508      	push	{r3, lr}
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000916:	2300      	movs	r3, #0
 8000918:	461a      	mov	r2, r3
 800091a:	4903      	ldr	r1, [pc, #12]	; (8000928 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800091e:	6800      	ldr	r0, [r0, #0]
 8000920:	f00e fd21 	bl	800f366 <osMessageQueuePut>
}
 8000924:	bd08      	pop	{r3, pc}
 8000926:	bf00      	nop
 8000928:	24000004 	.word	0x24000004
 800092c:	24000170 	.word	0x24000170

08000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000930:	b510      	push	{r4, lr}
 8000932:	b082      	sub	sp, #8
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000934:	4c07      	ldr	r4, [pc, #28]	; (8000954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000936:	2300      	movs	r3, #0
 8000938:	461a      	mov	r2, r3
 800093a:	a901      	add	r1, sp, #4
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	f00e fd52 	bl	800f3e6 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2200      	movs	r2, #0
 8000948:	a901      	add	r1, sp, #4
 800094a:	6820      	ldr	r0, [r4, #0]
 800094c:	f00e fd4b 	bl	800f3e6 <osMessageQueueGet>
}
 8000950:	b002      	add	sp, #8
 8000952:	bd10      	pop	{r4, pc}
 8000954:	24000170 	.word	0x24000170

08000958 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000958:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 800095a:	6803      	ldr	r3, [r0, #0]
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4798      	blx	r3
    }
 8000960:	bd08      	pop	{r3, pc}

08000962 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000962:	2001      	movs	r0, #1
 8000964:	4770      	bx	lr

08000966 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000966:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	4798      	blx	r3
    }
 800096e:	bd08      	pop	{r3, pc}

08000970 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8000970:	b508      	push	{r3, lr}
        return instance;
 8000972:	4b03      	ldr	r3, [pc, #12]	; (8000980 <DMA2D_XferCpltCallback+0x10>)
 8000974:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8000976:	6858      	ldr	r0, [r3, #4]
 8000978:	6803      	ldr	r3, [r0, #0]
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 800097e:	bd08      	pop	{r3, pc}
 8000980:	2400f440 	.word	0x2400f440

08000984 <_ZN8STM32DMAD1Ev>:
STM32DMA::STM32DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32DMA::~STM32DMA()
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <_ZN8STM32DMAD1Ev+0x24>)
 8000986:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	4a08      	ldr	r2, [pc, #32]	; (80009ac <_ZN8STM32DMAD1Ev+0x28>)
 800098a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800098e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8000992:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000996:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_ZN8STM32DMAD1Ev+0x2c>)
 800099c:	60c2      	str	r2, [r0, #12]
    {
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_ZN8STM32DMAD1Ev+0x30>)
 80009a0:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_ZN8STM32DMAD1Ev+0x34>)
 80009a4:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 80009a6:	4770      	bx	lr
 80009a8:	08024a28 	.word	0x08024a28
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	08026764 	.word	0x08026764
 80009b4:	08024a04 	.word	0x08024a04
 80009b8:	08026714 	.word	0x08026714

080009bc <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80009bc:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <_ZN8STM32DMA10initializeEv+0x40>)
 80009c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009c4:	f042 0210 	orr.w	r2, r2, #16
 80009c8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80009cc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80009d0:	f002 0210 	and.w	r2, r2, #16
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80009d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009da:	f042 0210 	orr.w	r2, r2, #16
 80009de:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80009e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80009e2:	f022 0210 	bic.w	r2, r2, #16
 80009e6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_ZN8STM32DMA10initializeEv+0x44>)
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <_ZN8STM32DMA10initializeEv+0x48>)
 80009ec:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <_ZN8STM32DMA10initializeEv+0x4c>)
 80009f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009f4:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 80009f6:	b002      	add	sp, #8
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	58024400 	.word	0x58024400
 8000a00:	24004490 	.word	0x24004490
 8000a04:	08000971 	.word	0x08000971
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000a0c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000a10:	4770      	bx	lr

08000a12 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000a12:	b510      	push	{r4, lr}
 8000a14:	4604      	mov	r4, r0
}
 8000a16:	f7ff ffb5 	bl	8000984 <_ZN8STM32DMAD1Ev>
 8000a1a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f022 f9a9 	bl	8022d76 <_ZdlPvj>
 8000a24:	4620      	mov	r0, r4
 8000a26:	bd10      	pop	{r4, pc}

08000a28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000a28:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000a2a:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000a2c:	2b0a      	cmp	r3, #10
 8000a2e:	d809      	bhi.n	8000a44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8000a30:	e8df f003 	tbb	[pc, r3]
 8000a34:	080e1006 	.word	0x080e1006
 8000a38:	10080808 	.word	0x10080808
 8000a3c:	1010      	.short	0x1010
 8000a3e:	10          	.byte	0x10
 8000a3f:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000a40:	2002      	movs	r0, #2
        break;
 8000a42:	e008      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8000a44:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
 8000a48:	2187      	movs	r1, #135	; 0x87
 8000a4a:	4820      	ldr	r0, [pc, #128]	; (8000acc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
 8000a4c:	f022 f9c2 	bl	8022dd4 <__assert_func>
    switch (format)
 8000a50:	2000      	movs	r0, #0
 8000a52:	e000      	b.n	8000a56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000a54:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a58:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000a5a:	8aca      	ldrh	r2, [r1, #22]
 8000a5c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a60:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000a66:	690a      	ldr	r2, [r1, #16]
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a6a:	8b4a      	ldrh	r2, [r1, #26]
 8000a6c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a70:	eba2 020c 	sub.w	r2, r2, ip
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000a76:	680b      	ldr	r3, [r1, #0]
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d008      	beq.n	8000a8e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x66>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a7e:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000a84:	68ca      	ldr	r2, [r1, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
 8000a8a:	601a      	str	r2, [r3, #0]
    }
}
 8000a8c:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a8e:	8b4a      	ldrh	r2, [r1, #26]
 8000a90:	8a8b      	ldrh	r3, [r1, #20]
 8000a92:	1ad2      	subs	r2, r2, r3
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
 8000a96:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000a98:	8b4a      	ldrh	r2, [r1, #26]
 8000a9a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000a9e:	eba2 020c 	sub.w	r2, r2, ip
 8000aa2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000aa4:	6258      	str	r0, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000aa6:	7f08      	ldrb	r0, [r1, #28]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>)
 8000aaa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000aae:	61da      	str	r2, [r3, #28]
 8000ab0:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000ab2:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab4:	690a      	ldr	r2, [r1, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000ab8:	690a      	ldr	r2, [r1, #16]
 8000aba:	60da      	str	r2, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb4>)
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e7e4      	b.n	8000a8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
 8000ac2:	bf00      	nop
 8000ac4:	0802488c 	.word	0x0802488c
 8000ac8:	080248a8 	.word	0x080248a8
 8000acc:	080248f4 	.word	0x080248f4
 8000ad0:	52001000 	.word	0x52001000
 8000ad4:	00030201 	.word	0x00030201
 8000ad8:	00010009 	.word	0x00010009
 8000adc:	00020201 	.word	0x00020201

08000ae0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000ae0:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ae2:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8000ae4:	2b0b      	cmp	r3, #11
 8000ae6:	d815      	bhi.n	8000b14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8000ae8:	e8df f003 	tbb	[pc, r3]
 8000aec:	141a1c06 	.word	0x141a1c06
 8000af0:	12141414 	.word	0x12141414
 8000af4:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000af8:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000afa:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8000afc:	2b0b      	cmp	r3, #11
 8000afe:	d820      	bhi.n	8000b42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8000b00:	e8df f003 	tbb	[pc, r3]
 8000b04:	1f252712 	.word	0x1f252712
 8000b08:	1d1f1f1f 	.word	0x1d1f1f1f
 8000b0c:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b10:	2005      	movs	r0, #5
        break;
 8000b12:	e7f2      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8000b14:	4b75      	ldr	r3, [pc, #468]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b16:	4a76      	ldr	r2, [pc, #472]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b18:	2166      	movs	r1, #102	; 0x66
 8000b1a:	4876      	ldr	r0, [pc, #472]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b1c:	f022 f95a 	bl	8022dd4 <__assert_func>
    switch (format)
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7ea      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b24:	2001      	movs	r0, #1
 8000b26:	e7e8      	b.n	8000afa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000b28:	2402      	movs	r4, #2
    switch (format)
 8000b2a:	2b0a      	cmp	r3, #10
 8000b2c:	d815      	bhi.n	8000b5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 8000b2e:	e8df f003 	tbb	[pc, r3]
 8000b32:	1c12      	.short	0x1c12
 8000b34:	1414141a 	.word	0x1414141a
 8000b38:	1c1c1c14 	.word	0x1c1c1c14
 8000b3c:	1c          	.byte	0x1c
 8000b3d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 8000b3e:	2405      	movs	r4, #5
        break;
 8000b40:	e7f3      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b44:	4a6a      	ldr	r2, [pc, #424]	; (8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>)
 8000b46:	2166      	movs	r1, #102	; 0x66
 8000b48:	486a      	ldr	r0, [pc, #424]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b4a:	f022 f943 	bl	8022dd4 <__assert_func>
    switch (format)
 8000b4e:	2400      	movs	r4, #0
 8000b50:	e7eb      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8000b52:	2401      	movs	r4, #1
 8000b54:	e7e9      	b.n	8000b2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000b56:	2502      	movs	r5, #2
        break;
 8000b58:	e008      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20c>)
 8000b5c:	4a66      	ldr	r2, [pc, #408]	; (8000cf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x218>)
 8000b5e:	2187      	movs	r1, #135	; 0x87
 8000b60:	4864      	ldr	r0, [pc, #400]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000b62:	f022 f937 	bl	8022dd4 <__assert_func>
    switch (format)
 8000b66:	2500      	movs	r5, #0
 8000b68:	e000      	b.n	8000b6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8000b6a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b6c:	8b4a      	ldrh	r2, [r1, #26]
 8000b6e:	8a8b      	ldrh	r3, [r1, #20]
 8000b70:	1ad2      	subs	r2, r2, r3
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000b76:	8b4a      	ldrh	r2, [r1, #26]
 8000b78:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b7c:	eba2 020c 	sub.w	r2, r2, ip
 8000b80:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000b82:	8b0a      	ldrh	r2, [r1, #24]
 8000b84:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b88:	eba2 020c 	sub.w	r2, r2, ip
 8000b8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000b8e:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000b90:	8aca      	ldrh	r2, [r1, #22]
 8000b92:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8000b96:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000b9a:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000b9c:	690a      	ldr	r2, [r1, #16]
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000ba0:	684a      	ldr	r2, [r1, #4]
 8000ba2:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	2b80      	cmp	r3, #128	; 0x80
 8000ba8:	d036      	beq.n	8000c18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8000baa:	d813      	bhi.n	8000bd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8000bac:	2b20      	cmp	r3, #32
 8000bae:	d07c      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb0:	2b40      	cmp	r3, #64	; 0x40
 8000bb2:	d07a      	beq.n	8000caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	f040 8085 	bne.w	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bba:	7f0b      	ldrb	r3, [r1, #28]
 8000bbc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bc0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000bc4:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bc6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bc8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bca:	690a      	ldr	r2, [r1, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bce:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bd0:	601a      	str	r2, [r3, #0]
        break;
 8000bd2:	e020      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
    switch (blitOp.operation)
 8000bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd8:	d010      	beq.n	8000bfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8000bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bde:	d171      	bne.n	8000cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000be0:	7f0b      	ldrb	r3, [r1, #28]
 8000be2:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>)
 8000be4:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000bea:	61da      	str	r2, [r3, #28]
 8000bec:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000bee:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bf2:	690a      	ldr	r2, [r1, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000bf6:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000bf8:	601a      	str	r2, [r3, #0]
        break;
 8000bfa:	e00c      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000bfc:	7f0b      	ldrb	r3, [r1, #28]
 8000bfe:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>)
 8000c00:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c06:	61da      	str	r2, [r3, #28]
 8000c08:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c0a:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c0c:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0e:	690a      	ldr	r2, [r1, #16]
 8000c10:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c12:	4a3b      	ldr	r2, [pc, #236]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000c18:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000c1a:	7f0b      	ldrb	r3, [r1, #28]
 8000c1c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c20:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c26:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c28:	625c      	str	r4, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c2a:	6908      	ldr	r0, [r1, #16]
 8000c2c:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000c2e:	1d10      	adds	r0, r2, #4
 8000c30:	62d8      	str	r0, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8000c32:	7813      	ldrb	r3, [r2, #0]
 8000c34:	b18b      	cbz	r3, 8000c5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d12c      	bne.n	8000c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                if(blitOp.alpha == 255)
 8000c3a:	7f0b      	ldrb	r3, [r1, #28]
 8000c3c:	2bff      	cmp	r3, #255	; 0xff
 8000c3e:	d027      	beq.n	8000c90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b0>
            bool blend = true;
 8000c40:	2101      	movs	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c44:	69c4      	ldr	r4, [r0, #28]
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c48:	4023      	ands	r3, r4
 8000c4a:	8852      	ldrh	r2, [r2, #2]
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	61c3      	str	r3, [r0, #28]
                break;
 8000c58:	e009      	b.n	8000c6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18e>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000c5a:	4928      	ldr	r1, [pc, #160]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c5c:	69c8      	ldr	r0, [r1, #28]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>)
 8000c60:	4003      	ands	r3, r0
 8000c62:	8852      	ldrh	r2, [r2, #2]
 8000c64:	3a01      	subs	r2, #1
 8000c66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c6a:	61cb      	str	r3, [r1, #28]
            bool blend = true;
 8000c6c:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c70:	69d3      	ldr	r3, [r2, #28]
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f013 0f20 	tst.w	r3, #32
 8000c80:	d1fa      	bne.n	8000c78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	609a      	str	r2, [r3, #8]
            if(blend)
 8000c88:	b159      	cbz	r1, 8000ca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e7c2      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
                    blend = false;
 8000c90:	2100      	movs	r1, #0
 8000c92:	e7d6      	b.n	8000c42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
                assert(0 && "Unsupported format");
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>)
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x234>)
 8000c98:	f240 1101 	movw	r1, #257	; 0x101
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x214>)
 8000c9e:	f022 f899 	bl	8022dd4 <__assert_func>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e7b5      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000caa:	7f0b      	ldrb	r3, [r1, #28]
 8000cac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cb0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cb6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000cb8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cba:	690a      	ldr	r2, [r1, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x220>)
 8000cc0:	601a      	str	r2, [r3, #0]
        break;
 8000cc2:	e7a8      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cc4:	7f0b      	ldrb	r3, [r1, #28]
 8000cc6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cca:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cd0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cd2:	7f4a      	ldrb	r2, [r1, #29]
 8000cd4:	7f8b      	ldrb	r3, [r1, #30]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d003      	beq.n	8000ce2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>)
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e799      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>)
 8000ce4:	f240 2201 	movw	r2, #513	; 0x201
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	e794      	b.n	8000c16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 8000cec:	0802488c 	.word	0x0802488c
 8000cf0:	08024954 	.word	0x08024954
 8000cf4:	080248f4 	.word	0x080248f4
 8000cf8:	080248a8 	.word	0x080248a8
 8000cfc:	52001000 	.word	0x52001000
 8000d00:	00020201 	.word	0x00020201
 8000d04:	00020009 	.word	0x00020009
 8000d08:	0002000a 	.word	0x0002000a
 8000d0c:	ffff00ef 	.word	0xffff00ef
 8000d10:	080249a0 	.word	0x080249a0
 8000d14:	080249bc 	.word	0x080249bc
 8000d18:	00010201 	.word	0x00010201

08000d1c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <_ZN8STM32DMAC1Ev+0x38>)
 8000d22:	f840 3b0c 	str.w	r3, [r0], #12
 8000d26:	6068      	str	r0, [r5, #4]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	722b      	strb	r3, [r5, #8]
 8000d2c:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000d2e:	462c      	mov	r4, r5
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <_ZN8STM32DMAC1Ev+0x3c>)
 8000d32:	f844 3b20 	str.w	r3, [r4], #32
 8000d36:	2260      	movs	r2, #96	; 0x60
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f014 f8db 	bl	8014ef4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000d3e:	235f      	movs	r3, #95	; 0x5f
 8000d40:	e003      	b.n	8000d4a <_ZN8STM32DMAC1Ev+0x2e>
        : color(0)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60e2      	str	r2, [r4, #12]
 8000d46:	3424      	adds	r4, #36	; 0x24
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	daf9      	bge.n	8000d42 <_ZN8STM32DMAC1Ev+0x26>
}
 8000d4e:	4628      	mov	r0, r5
 8000d50:	bd38      	pop	{r3, r4, r5, pc}
 8000d52:	bf00      	nop
 8000d54:	08026714 	.word	0x08026714
 8000d58:	08024a28 	.word	0x08024a28

08000d5c <_ZN8touchgfx9TypedTextD1Ev>:
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
    {
 8000d5c:	4b01      	ldr	r3, [pc, #4]	; (8000d64 <_ZN8touchgfx9TypedTextD1Ev+0x8>)
 8000d5e:	6003      	str	r3, [r0, #0]
    }
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	08024a78 	.word	0x08024a78

08000d68 <_ZN8touchgfx7MVPHeapD1Ev>:
    {
    }

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
    {
 8000d68:	4b01      	ldr	r3, [pc, #4]	; (8000d70 <_ZN8touchgfx7MVPHeapD1Ev+0x8>)
 8000d6a:	6003      	str	r3, [r0, #0]
    }
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	08024a9c 	.word	0x08024a9c

08000d74 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d74:	4770      	bx	lr

08000d76 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d76:	4770      	bx	lr

08000d78 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000d78:	4770      	bx	lr

08000d7a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
    {
        (void)c; // Unused variable
    }
 8000d7a:	4770      	bx	lr

08000d7c <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
    {
    }
 8000d7c:	4770      	bx	lr

08000d7e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
    {
    }
 8000d7e:	4770      	bx	lr

08000d80 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
    {
 8000d80:	4b01      	ldr	r3, [pc, #4]	; (8000d88 <_ZN8touchgfx15UIEventListenerD1Ev+0x8>)
 8000d82:	6003      	str	r3, [r0, #0]
    }
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	08024aac 	.word	0x08024aac

08000d8c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8000d8c:	4770      	bx	lr

08000d8e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8000d8e:	4770      	bx	lr

08000d90 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8000d90:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8000d94:	6808      	ldr	r0, [r1, #0]
 8000d96:	6849      	ldr	r1, [r1, #4]
 8000d98:	c303      	stmia	r3!, {r0, r1}
    }
 8000d9a:	4770      	bx	lr

08000d9c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8000da0:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8000da4:	b158      	cbz	r0, 8000dbe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8000da6:	6803      	ldr	r3, [r0, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4798      	blx	r3
 8000dac:	b138      	cbz	r0, 8000dbe <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8000dae:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8000db2:	6803      	ldr	r3, [r0, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8000dbe:	bd10      	pop	{r4, pc}

08000dc0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <_ZN8touchgfx14MVPApplicationD1Ev+0x10>)
 8000dc2:	6002      	str	r2, [r0, #0]
class Application : public UIEventListener
 8000dc4:	4a03      	ldr	r2, [pc, #12]	; (8000dd4 <_ZN8touchgfx14MVPApplicationD1Ev+0x14>)
 8000dc6:	6002      	str	r2, [r0, #0]
    {
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <_ZN8touchgfx14MVPApplicationD1Ev+0x18>)
 8000dca:	6002      	str	r2, [r0, #0]
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	08024aec 	.word	0x08024aec
 8000dd4:	08026acc 	.word	0x08026acc
 8000dd8:	08024aac 	.word	0x08024aac

08000ddc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <_ZN23FrontendApplicationBaseD1Ev+0x20>)
 8000dde:	6002      	str	r2, [r0, #0]
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <_ZN23FrontendApplicationBaseD1Ev+0x24>)
 8000de2:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <_ZN23FrontendApplicationBaseD1Ev+0x28>)
 8000de8:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8000dee:	6002      	str	r2, [r0, #0]
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <_ZN23FrontendApplicationBaseD1Ev+0x30>)
 8000df2:	6002      	str	r2, [r0, #0]
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <_ZN23FrontendApplicationBaseD1Ev+0x34>)
 8000df6:	6002      	str	r2, [r0, #0]
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	08024b50 	.word	0x08024b50
 8000e00:	08024b38 	.word	0x08024b38
 8000e04:	08024ad4 	.word	0x08024ad4
 8000e08:	08024aec 	.word	0x08024aec
 8000e0c:	08026acc 	.word	0x08026acc
 8000e10:	08024aac 	.word	0x08024aac

08000e14 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8000e14:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <_ZN19FrontendApplicationD1Ev+0x24>)
 8000e16:	6002      	str	r2, [r0, #0]
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <_ZN19FrontendApplicationD1Ev+0x28>)
 8000e1a:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <_ZN19FrontendApplicationD1Ev+0x2c>)
 8000e1e:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
    {
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <_ZN19FrontendApplicationD1Ev+0x30>)
 8000e24:	f8c0 2140 	str.w	r2, [r0, #320]	; 0x140
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <_ZN19FrontendApplicationD1Ev+0x34>)
 8000e2a:	6002      	str	r2, [r0, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <_ZN19FrontendApplicationD1Ev+0x38>)
 8000e2e:	6002      	str	r2, [r0, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <_ZN19FrontendApplicationD1Ev+0x3c>)
 8000e32:	6002      	str	r2, [r0, #0]
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	08024b9c 	.word	0x08024b9c
 8000e3c:	08024b50 	.word	0x08024b50
 8000e40:	08024b38 	.word	0x08024b38
 8000e44:	08024ad4 	.word	0x08024ad4
 8000e48:	08024aec 	.word	0x08024aec
 8000e4c:	08026acc 	.word	0x08026acc
 8000e50:	08024aac 	.word	0x08024aac

08000e54 <_ZN16FrontendHeapBaseD1Ev>:
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
 8000e54:	4a02      	ldr	r2, [pc, #8]	; (8000e60 <_ZN16FrontendHeapBaseD1Ev+0xc>)
 8000e56:	6002      	str	r2, [r0, #0]
    {
 8000e58:	4a02      	ldr	r2, [pc, #8]	; (8000e64 <_ZN16FrontendHeapBaseD1Ev+0x10>)
 8000e5a:	6002      	str	r2, [r0, #0]
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	08024be8 	.word	0x08024be8
 8000e64:	08024a9c 	.word	0x08024a9c

08000e68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e68:	4a02      	ldr	r2, [pc, #8]	; (8000e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0xc>)
 8000e6a:	6002      	str	r2, [r0, #0]
    {
 8000e6c:	4a02      	ldr	r2, [pc, #8]	; (8000e78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x10>)
 8000e6e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	08024b38 	.word	0x08024b38
 8000e78:	08024ad4 	.word	0x08024ad4

08000e7c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	4770      	bx	lr

08000e80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e80:	200c      	movs	r0, #12
 8000e82:	4770      	bx	lr

08000e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e88:	0089      	lsls	r1, r1, #2
 8000e8a:	3108      	adds	r1, #8
    }
 8000e8c:	4408      	add	r0, r1
 8000e8e:	4770      	bx	lr

08000e90 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000e94:	0089      	lsls	r1, r1, #2
 8000e96:	3108      	adds	r1, #8
    }
 8000e98:	4408      	add	r0, r1
 8000e9a:	4770      	bx	lr

08000e9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	4770      	bx	lr

08000ea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ea0:	f642 60c8 	movw	r0, #11976	; 0x2ec8
 8000ea4:	4770      	bx	lr

08000ea6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ea6:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 8000eaa:	fb03 f101 	mul.w	r1, r3, r1
 8000eae:	3108      	adds	r1, #8
    }
 8000eb0:	4408      	add	r0, r1
 8000eb2:	4770      	bx	lr

08000eb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb4:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 8000eb8:	fb03 f101 	mul.w	r1, r3, r1
 8000ebc:	3108      	adds	r1, #8
    }
 8000ebe:	4408      	add	r0, r1
 8000ec0:	4770      	bx	lr

08000ec2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	4770      	bx	lr

08000ec6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ec6:	2010      	movs	r0, #16
 8000ec8:	4770      	bx	lr

08000eca <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eca:	0109      	lsls	r1, r1, #4
 8000ecc:	3108      	adds	r1, #8
    }
 8000ece:	4408      	add	r0, r1
 8000ed0:	4770      	bx	lr

08000ed2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000ed2:	0109      	lsls	r1, r1, #4
 8000ed4:	3108      	adds	r1, #8
    }
 8000ed6:	4408      	add	r0, r1
 8000ed8:	4770      	bx	lr

08000eda <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8000eda:	b508      	push	{r3, lr}
 8000edc:	4603      	mov	r3, r0
    {
        (pobject->*pmemfun)();
 8000ede:	6841      	ldr	r1, [r0, #4]
 8000ee0:	68c2      	ldr	r2, [r0, #12]
 8000ee2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8000ee6:	f012 0f01 	tst.w	r2, #1
 8000eea:	d102      	bne.n	8000ef2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x18>
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	4798      	blx	r3
    }
 8000ef0:	bd08      	pop	{r3, pc}
 8000ef2:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8000ef6:	f851 200c 	ldr.w	r2, [r1, ip]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	58d3      	ldr	r3, [r2, r3]
 8000efe:	e7f6      	b.n	8000eee <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x14>

08000f00 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8000f00:	6843      	ldr	r3, [r0, #4]
 8000f02:	b14b      	cbz	r3, 8000f18 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x18>
 8000f04:	6883      	ldr	r3, [r0, #8]
 8000f06:	b10b      	cbz	r3, 8000f0c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	4770      	bx	lr
 8000f0c:	68c3      	ldr	r3, [r0, #12]
 8000f0e:	f013 0f01 	tst.w	r3, #1
 8000f12:	d003      	beq.n	8000f1c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x1c>
 8000f14:	2001      	movs	r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	2000      	movs	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	2000      	movs	r0, #0
    }
 8000f1e:	4770      	bx	lr

08000f20 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8000f20:	b510      	push	{r4, lr}
 8000f22:	4604      	mov	r4, r0
    {
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <_ZN8touchgfx15UIEventListenerD0Ev+0x14>)
 8000f26:	6003      	str	r3, [r0, #0]
    }
 8000f28:	2104      	movs	r1, #4
 8000f2a:	f021 ff24 	bl	8022d76 <_ZdlPvj>
 8000f2e:	4620      	mov	r0, r4
 8000f30:	bd10      	pop	{r4, pc}
 8000f32:	bf00      	nop
 8000f34:	08024aac 	.word	0x08024aac

08000f38 <_ZN16FrontendHeapBaseD0Ev>:
 8000f38:	b510      	push	{r4, lr}
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <_ZN16FrontendHeapBaseD0Ev+0x18>)
 8000f3e:	6003      	str	r3, [r0, #0]
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <_ZN16FrontendHeapBaseD0Ev+0x1c>)
 8000f42:	6003      	str	r3, [r0, #0]
 8000f44:	2114      	movs	r1, #20
 8000f46:	f021 ff16 	bl	8022d76 <_ZdlPvj>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	bd10      	pop	{r4, pc}
 8000f4e:	bf00      	nop
 8000f50:	08024be8 	.word	0x08024be8
 8000f54:	08024a9c 	.word	0x08024a9c

08000f58 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8000f58:	b510      	push	{r4, lr}
 8000f5a:	4604      	mov	r4, r0
    {
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <_ZN8touchgfx7MVPHeapD0Ev+0x14>)
 8000f5e:	6003      	str	r3, [r0, #0]
    }
 8000f60:	2114      	movs	r1, #20
 8000f62:	f021 ff08 	bl	8022d76 <_ZdlPvj>
 8000f66:	4620      	mov	r0, r4
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	bf00      	nop
 8000f6c:	08024a9c 	.word	0x08024a9c

08000f70 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4604      	mov	r4, r0
    {
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <_ZN8touchgfx9TypedTextD0Ev+0x14>)
 8000f76:	6003      	str	r3, [r0, #0]
    }
 8000f78:	2108      	movs	r1, #8
 8000f7a:	f021 fefc 	bl	8022d76 <_ZdlPvj>
 8000f7e:	4620      	mov	r0, r4
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	bf00      	nop
 8000f84:	08024a78 	.word	0x08024a78

08000f88 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x18>)
 8000f8e:	6003      	str	r3, [r0, #0]
    {
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev+0x1c>)
 8000f92:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8000f94:	2110      	movs	r1, #16
 8000f96:	f021 feee 	bl	8022d76 <_ZdlPvj>
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08024b38 	.word	0x08024b38
 8000fa4:	08024ad4 	.word	0x08024ad4

08000fa8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	4604      	mov	r4, r0
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <_ZN8touchgfx14MVPApplicationD0Ev+0x1c>)
 8000fae:	6003      	str	r3, [r0, #0]
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <_ZN8touchgfx14MVPApplicationD0Ev+0x20>)
 8000fb2:	6003      	str	r3, [r0, #0]
    {
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <_ZN8touchgfx14MVPApplicationD0Ev+0x24>)
 8000fb6:	6003      	str	r3, [r0, #0]
 8000fb8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000fbc:	f021 fedb 	bl	8022d76 <_ZdlPvj>
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	08024aec 	.word	0x08024aec
 8000fc8:	08026acc 	.word	0x08026acc
 8000fcc:	08024aac 	.word	0x08024aac

08000fd0 <_ZN23FrontendApplicationBaseD0Ev>:
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <_ZN23FrontendApplicationBaseD0Ev+0x2c>)
 8000fd6:	6003      	str	r3, [r0, #0]
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <_ZN23FrontendApplicationBaseD0Ev+0x30>)
 8000fda:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <_ZN23FrontendApplicationBaseD0Ev+0x34>)
 8000fe0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_ZN23FrontendApplicationBaseD0Ev+0x38>)
 8000fe6:	6003      	str	r3, [r0, #0]
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_ZN23FrontendApplicationBaseD0Ev+0x3c>)
 8000fea:	6003      	str	r3, [r0, #0]
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_ZN23FrontendApplicationBaseD0Ev+0x40>)
 8000fee:	6003      	str	r3, [r0, #0]
 8000ff0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8000ff4:	f021 febf 	bl	8022d76 <_ZdlPvj>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	08024b50 	.word	0x08024b50
 8001000:	08024b38 	.word	0x08024b38
 8001004:	08024ad4 	.word	0x08024ad4
 8001008:	08024aec 	.word	0x08024aec
 800100c:	08026acc 	.word	0x08026acc
 8001010:	08024aac 	.word	0x08024aac

08001014 <_ZN19FrontendApplicationD0Ev>:
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <_ZN19FrontendApplicationD0Ev+0x30>)
 800101a:	6003      	str	r3, [r0, #0]
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_ZN19FrontendApplicationD0Ev+0x34>)
 800101e:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <_ZN19FrontendApplicationD0Ev+0x38>)
 8001022:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
    {
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <_ZN19FrontendApplicationD0Ev+0x3c>)
 8001028:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <_ZN19FrontendApplicationD0Ev+0x40>)
 800102e:	6003      	str	r3, [r0, #0]
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <_ZN19FrontendApplicationD0Ev+0x44>)
 8001032:	6003      	str	r3, [r0, #0]
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <_ZN19FrontendApplicationD0Ev+0x48>)
 8001036:	6003      	str	r3, [r0, #0]
 8001038:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800103c:	f021 fe9b 	bl	8022d76 <_ZdlPvj>
 8001040:	4620      	mov	r0, r4
 8001042:	bd10      	pop	{r4, pc}
 8001044:	08024b9c 	.word	0x08024b9c
 8001048:	08024b50 	.word	0x08024b50
 800104c:	08024b38 	.word	0x08024b38
 8001050:	08024ad4 	.word	0x08024ad4
 8001054:	08024aec 	.word	0x08024aec
 8001058:	08026acc 	.word	0x08026acc
 800105c:	08024aac 	.word	0x08024aac

08001060 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001060:	b508      	push	{r3, lr}
    {
        app.gotomainScreenScreenNoTransition();
 8001062:	4608      	mov	r0, r1
 8001064:	f002 fdb6 	bl	8003bd4 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001068:	bd08      	pop	{r3, pc}

0800106a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800106a:	b508      	push	{r3, lr}
    {
        gotomainScreenScreenNoTransition();
 800106c:	f002 fdb2 	bl	8003bd4 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 8001070:	bd08      	pop	{r3, pc}

08001072 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8001072:	b510      	push	{r4, lr}
 8001074:	4604      	mov	r4, r0
    {
        model.tick();
 8001076:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800107a:	f005 f83a 	bl	80060f2 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800107e:	4620      	mov	r0, r4
 8001080:	f016 fc20 	bl	80178c4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8001084:	bd10      	pop	{r4, pc}
	...

08001088 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001088:	b510      	push	{r4, lr}
 800108a:	4604      	mov	r4, r0
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800108e:	6003      	str	r3, [r0, #0]
 8001090:	f011 fd4b 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001094:	4620      	mov	r0, r4
 8001096:	bd10      	pop	{r4, pc}
 8001098:	08024c64 	.word	0x08024c64

0800109c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800109c:	b510      	push	{r4, lr}
 800109e:	4604      	mov	r4, r0
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 80010a2:	6003      	str	r3, [r0, #0]
 80010a4:	f011 fd41 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010a8:	2114      	movs	r1, #20
 80010aa:	4620      	mov	r0, r4
 80010ac:	f021 fe63 	bl	8022d76 <_ZdlPvj>
 80010b0:	4620      	mov	r0, r4
 80010b2:	bd10      	pop	{r4, pc}
 80010b4:	08024c64 	.word	0x08024c64

080010b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010b8:	b510      	push	{r4, lr}
 80010ba:	4604      	mov	r4, r0
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010be:	6003      	str	r3, [r0, #0]
 80010c0:	f011 fd33 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010c4:	4620      	mov	r0, r4
 80010c6:	bd10      	pop	{r4, pc}
 80010c8:	08024c30 	.word	0x08024c30

080010cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80010cc:	b510      	push	{r4, lr}
 80010ce:	4604      	mov	r4, r0
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
 80010d2:	6003      	str	r3, [r0, #0]
 80010d4:	f011 fd29 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010d8:	f642 61d0 	movw	r1, #11984	; 0x2ed0
 80010dc:	4620      	mov	r0, r4
 80010de:	f021 fe4a 	bl	8022d76 <_ZdlPvj>
 80010e2:	4620      	mov	r0, r4
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop
 80010e8:	08024c30 	.word	0x08024c30

080010ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80010ec:	b510      	push	{r4, lr}
 80010ee:	4604      	mov	r4, r0
 80010f0:	4b02      	ldr	r3, [pc, #8]	; (80010fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80010f2:	6003      	str	r3, [r0, #0]
 80010f4:	f011 fd19 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80010f8:	4620      	mov	r0, r4
 80010fa:	bd10      	pop	{r4, pc}
 80010fc:	08024bfc 	.word	0x08024bfc

08001100 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
 8001106:	6003      	str	r3, [r0, #0]
 8001108:	f011 fd0f 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800110c:	2118      	movs	r1, #24
 800110e:	4620      	mov	r0, r4
 8001110:	f021 fe31 	bl	8022d76 <_ZdlPvj>
 8001114:	4620      	mov	r0, r4
 8001116:	bd10      	pop	{r4, pc}
 8001118:	08024bfc 	.word	0x08024bfc

0800111c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800111c:	b510      	push	{r4, lr}
 800111e:	4604      	mov	r4, r0
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <_ZN12FrontendHeapD1Ev+0x6c>)
 8001122:	6003      	str	r3, [r0, #0]
    virtual ~FrontendApplication() { }
 8001124:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8001128:	4a18      	ldr	r2, [pc, #96]	; (800118c <_ZN12FrontendHeapD1Ev+0x70>)
 800112a:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
    virtual ~FrontendApplicationBase() { }
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <_ZN12FrontendHeapD1Ev+0x74>)
 8001130:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001134:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 8001138:	4916      	ldr	r1, [pc, #88]	; (8001194 <_ZN12FrontendHeapD1Ev+0x78>)
 800113a:	6551      	str	r1, [r2, #84]	; 0x54
    {
 800113c:	4916      	ldr	r1, [pc, #88]	; (8001198 <_ZN12FrontendHeapD1Ev+0x7c>)
 800113e:	6551      	str	r1, [r2, #84]	; 0x54
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <_ZN12FrontendHeapD1Ev+0x80>)
 8001142:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <_ZN12FrontendHeapD1Ev+0x84>)
 8001148:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 800114c:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <_ZN12FrontendHeapD1Ev+0x88>)
 800114e:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 8001152:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <_ZN12FrontendHeapD1Ev+0x8c>)
 8001154:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 8001158:	f642 60fc 	movw	r0, #12028	; 0x2efc
 800115c:	4420      	add	r0, r4
 800115e:	f011 fce4 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001162:	4620      	mov	r0, r4
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <_ZN12FrontendHeapD1Ev+0x90>)
 8001166:	f840 3f2c 	str.w	r3, [r0, #44]!
 800116a:	f011 fcde 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800116e:	4620      	mov	r0, r4
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <_ZN12FrontendHeapD1Ev+0x94>)
 8001172:	f840 3f14 	str.w	r3, [r0, #20]!
 8001176:	f011 fcd8 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
class FrontendHeapBase : public touchgfx::MVPHeap
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <_ZN12FrontendHeapD1Ev+0x98>)
 800117c:	6023      	str	r3, [r4, #0]
    {
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <_ZN12FrontendHeapD1Ev+0x9c>)
 8001180:	6023      	str	r3, [r4, #0]
 8001182:	4620      	mov	r0, r4
 8001184:	bd10      	pop	{r4, pc}
 8001186:	bf00      	nop
 8001188:	08024c98 	.word	0x08024c98
 800118c:	08024b9c 	.word	0x08024b9c
 8001190:	08024b50 	.word	0x08024b50
 8001194:	08024b38 	.word	0x08024b38
 8001198:	08024ad4 	.word	0x08024ad4
 800119c:	08024aec 	.word	0x08024aec
 80011a0:	08026acc 	.word	0x08026acc
 80011a4:	08024aac 	.word	0x08024aac
 80011a8:	08024c64 	.word	0x08024c64
 80011ac:	08024c30 	.word	0x08024c30
 80011b0:	08024bfc 	.word	0x08024bfc
 80011b4:	08024be8 	.word	0x08024be8
 80011b8:	08024a9c 	.word	0x08024a9c

080011bc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80011bc:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
 80011be:	4c19      	ldr	r4, [pc, #100]	; (8001224 <__tcf_0+0x68>)
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <__tcf_0+0x6c>)
 80011c2:	6023      	str	r3, [r4, #0]
 80011c4:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 80011c8:	4a18      	ldr	r2, [pc, #96]	; (800122c <__tcf_0+0x70>)
 80011ca:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <__tcf_0+0x74>)
 80011d0:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80011d4:	f504 5240 	add.w	r2, r4, #12288	; 0x3000
 80011d8:	4916      	ldr	r1, [pc, #88]	; (8001234 <__tcf_0+0x78>)
 80011da:	6551      	str	r1, [r2, #84]	; 0x54
    {
 80011dc:	4916      	ldr	r1, [pc, #88]	; (8001238 <__tcf_0+0x7c>)
 80011de:	6551      	str	r1, [r2, #84]	; 0x54
 80011e0:	4a16      	ldr	r2, [pc, #88]	; (800123c <__tcf_0+0x80>)
 80011e2:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 80011e6:	4a16      	ldr	r2, [pc, #88]	; (8001240 <__tcf_0+0x84>)
 80011e8:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 80011ec:	4a15      	ldr	r2, [pc, #84]	; (8001244 <__tcf_0+0x88>)
 80011ee:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <__tcf_0+0x8c>)
 80011f4:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 80011f8:	f603 60fc 	addw	r0, r3, #3836	; 0xefc
 80011fc:	f011 fc95 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001200:	4620      	mov	r0, r4
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <__tcf_0+0x90>)
 8001204:	f840 3f2c 	str.w	r3, [r0, #44]!
 8001208:	f011 fc8f 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800120c:	4620      	mov	r0, r4
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <__tcf_0+0x94>)
 8001210:	f840 3f14 	str.w	r3, [r0, #20]!
 8001214:	f011 fc89 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <__tcf_0+0x98>)
 800121a:	6023      	str	r3, [r4, #0]
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <__tcf_0+0x9c>)
 800121e:	6023      	str	r3, [r4, #0]
        static FrontendHeap instance;
 8001220:	bd10      	pop	{r4, pc}
 8001222:	bf00      	nop
 8001224:	2400017c 	.word	0x2400017c
 8001228:	08024c98 	.word	0x08024c98
 800122c:	08024b9c 	.word	0x08024b9c
 8001230:	08024b50 	.word	0x08024b50
 8001234:	08024b38 	.word	0x08024b38
 8001238:	08024ad4 	.word	0x08024ad4
 800123c:	08024aec 	.word	0x08024aec
 8001240:	08026acc 	.word	0x08026acc
 8001244:	08024aac 	.word	0x08024aac
 8001248:	08024c64 	.word	0x08024c64
 800124c:	08024c30 	.word	0x08024c30
 8001250:	08024bfc 	.word	0x08024bfc
 8001254:	08024be8 	.word	0x08024be8
 8001258:	08024a9c 	.word	0x08024a9c

0800125c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800125c:	b510      	push	{r4, lr}
 800125e:	4604      	mov	r4, r0
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <_ZN12FrontendHeapD0Ev+0x74>)
 8001262:	6003      	str	r3, [r0, #0]
 8001264:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8001268:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <_ZN12FrontendHeapD0Ev+0x78>)
 800126a:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <_ZN12FrontendHeapD0Ev+0x7c>)
 8001270:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8001274:	f500 5240 	add.w	r2, r0, #12288	; 0x3000
 8001278:	4918      	ldr	r1, [pc, #96]	; (80012dc <_ZN12FrontendHeapD0Ev+0x80>)
 800127a:	6551      	str	r1, [r2, #84]	; 0x54
    {
 800127c:	4918      	ldr	r1, [pc, #96]	; (80012e0 <_ZN12FrontendHeapD0Ev+0x84>)
 800127e:	6551      	str	r1, [r2, #84]	; 0x54
 8001280:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <_ZN12FrontendHeapD0Ev+0x88>)
 8001282:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 8001286:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <_ZN12FrontendHeapD0Ev+0x8c>)
 8001288:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 800128c:	4a17      	ldr	r2, [pc, #92]	; (80012ec <_ZN12FrontendHeapD0Ev+0x90>)
 800128e:	f8c3 2f14 	str.w	r2, [r3, #3860]	; 0xf14
 8001292:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <_ZN12FrontendHeapD0Ev+0x94>)
 8001294:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 8001298:	f642 60fc 	movw	r0, #12028	; 0x2efc
 800129c:	4420      	add	r0, r4
 800129e:	f011 fc44 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012a2:	4620      	mov	r0, r4
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_ZN12FrontendHeapD0Ev+0x98>)
 80012a6:	f840 3f2c 	str.w	r3, [r0, #44]!
 80012aa:	f011 fc3e 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012ae:	4620      	mov	r0, r4
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <_ZN12FrontendHeapD0Ev+0x9c>)
 80012b2:	f840 3f14 	str.w	r3, [r0, #20]!
 80012b6:	f011 fc38 	bl	8012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_ZN12FrontendHeapD0Ev+0xa0>)
 80012bc:	6023      	str	r3, [r4, #0]
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_ZN12FrontendHeapD0Ev+0xa4>)
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	f243 016c 	movw	r1, #12396	; 0x306c
 80012c6:	4620      	mov	r0, r4
 80012c8:	f021 fd55 	bl	8022d76 <_ZdlPvj>
 80012cc:	4620      	mov	r0, r4
 80012ce:	bd10      	pop	{r4, pc}
 80012d0:	08024c98 	.word	0x08024c98
 80012d4:	08024b9c 	.word	0x08024b9c
 80012d8:	08024b50 	.word	0x08024b50
 80012dc:	08024b38 	.word	0x08024b38
 80012e0:	08024ad4 	.word	0x08024ad4
 80012e4:	08024aec 	.word	0x08024aec
 80012e8:	08026acc 	.word	0x08026acc
 80012ec:	08024aac 	.word	0x08024aac
 80012f0:	08024c64 	.word	0x08024c64
 80012f4:	08024c30 	.word	0x08024c30
 80012f8:	08024bfc 	.word	0x08024bfc
 80012fc:	08024be8 	.word	0x08024be8
 8001300:	08024a9c 	.word	0x08024a9c

08001304 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	b083      	sub	sp, #12
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001308:	f002 f98c 	bl	8003624 <_ZN14BitmapDatabase11getInstanceEv>
 800130c:	4605      	mov	r5, r0
 800130e:	f002 f98d 	bl	800362c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001312:	4601      	mov	r1, r0
 8001314:	2400      	movs	r4, #0
 8001316:	9400      	str	r4, [sp, #0]
 8001318:	4623      	mov	r3, r4
 800131a:	4622      	mov	r2, r4
 800131c:	4628      	mov	r0, r5
 800131e:	f019 fc3b 	bl	801ab98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <touchgfx_init+0xc0>)
 8001324:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <touchgfx_init+0xc4>)
 8001326:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001328:	4620      	mov	r0, r4
 800132a:	f003 f873 	bl	8004414 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800132e:	4827      	ldr	r0, [pc, #156]	; (80013cc <touchgfx_init+0xc8>)
 8001330:	f019 fae0 	bl	801a8f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
        static FrontendHeap instance;
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <touchgfx_init+0xcc>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f3bf 8f5b 	dmb	ish
 800133c:	f013 0f01 	tst.w	r3, #1
 8001340:	d004      	beq.n	800134c <touchgfx_init+0x48>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001342:	4824      	ldr	r0, [pc, #144]	; (80013d4 <touchgfx_init+0xd0>)
 8001344:	f7ff f9c4 	bl	80006d0 <_ZN11TouchGFXHAL10initializeEv>
}
 8001348:	b003      	add	sp, #12
 800134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134c:	4820      	ldr	r0, [pc, #128]	; (80013d0 <touchgfx_init+0xcc>)
 800134e:	f021 fd14 	bl	8022d7a <__cxa_guard_acquire>
 8001352:	2800      	cmp	r0, #0
 8001354:	d0f5      	beq.n	8001342 <touchgfx_init+0x3e>
          frontendApplication(app)
 8001356:	4c20      	ldr	r4, [pc, #128]	; (80013d8 <touchgfx_init+0xd4>)
 8001358:	4620      	mov	r0, r4
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <touchgfx_init+0xd8>)
 800135c:	f840 3b14 	str.w	r3, [r0], #20
 8001360:	6060      	str	r0, [r4, #4]
 8001362:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8001366:	60a7      	str	r7, [r4, #8]
 8001368:	4e1d      	ldr	r6, [pc, #116]	; (80013e0 <touchgfx_init+0xdc>)
 800136a:	60e6      	str	r6, [r4, #12]
 800136c:	f106 0518 	add.w	r5, r6, #24
 8001370:	6125      	str	r5, [r4, #16]
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <touchgfx_init+0xe0>)
 8001374:	6023      	str	r3, [r4, #0]
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <touchgfx_init+0xe4>)
 8001378:	6023      	str	r3, [r4, #0]
 800137a:	f011 fbd7 	bl	8012b2c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <touchgfx_init+0xe8>)
 8001380:	6163      	str	r3, [r4, #20]
 8001382:	4638      	mov	r0, r7
 8001384:	f011 fbd2 	bl	8012b2c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <touchgfx_init+0xec>)
 800138a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800138c:	4630      	mov	r0, r6
 800138e:	f011 fbcd 	bl	8012b2c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001392:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <touchgfx_init+0xf0>)
 8001398:	f8c3 2efc 	str.w	r2, [r3, #3836]	; 0xefc
 800139c:	3614      	adds	r6, #20
 800139e:	4630      	mov	r0, r6
 80013a0:	f004 fea4 	bl	80060ec <_ZN5ModelC1Ev>
 80013a4:	4622      	mov	r2, r4
 80013a6:	4631      	mov	r1, r6
 80013a8:	4628      	mov	r0, r5
 80013aa:	f004 fe95 	bl	80060d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
        app.gotomainScreenScreenNoTransition();
 80013ae:	4628      	mov	r0, r5
 80013b0:	f002 fc10 	bl	8003bd4 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 80013b4:	4810      	ldr	r0, [pc, #64]	; (80013f8 <touchgfx_init+0xf4>)
 80013b6:	f021 fd2b 	bl	8022e10 <atexit>
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <touchgfx_init+0xcc>)
 80013bc:	f021 fce9 	bl	8022d92 <__cxa_guard_release>
 80013c0:	e7bf      	b.n	8001342 <touchgfx_init+0x3e>
 80013c2:	bf00      	nop
 80013c4:	2400f49c 	.word	0x2400f49c
 80013c8:	24004068 	.word	0x24004068
 80013cc:	24000008 	.word	0x24000008
 80013d0:	24000178 	.word	0x24000178
 80013d4:	24003fec 	.word	0x24003fec
 80013d8:	2400017c 	.word	0x2400017c
 80013dc:	08024a9c 	.word	0x08024a9c
 80013e0:	24003078 	.word	0x24003078
 80013e4:	08024be8 	.word	0x08024be8
 80013e8:	08024c98 	.word	0x08024c98
 80013ec:	08024bfc 	.word	0x08024bfc
 80013f0:	08024c30 	.word	0x08024c30
 80013f4:	08024c64 	.word	0x08024c64
 80013f8:	080011bd 	.word	0x080011bd

080013fc <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 80013fc:	b508      	push	{r3, lr}
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80013fe:	4802      	ldr	r0, [pc, #8]	; (8001408 <touchgfx_taskEntry+0xc>)
 8001400:	f7ff f96a 	bl	80006d8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8001404:	bd08      	pop	{r3, pc}
 8001406:	bf00      	nop
 8001408:	24003fec 	.word	0x24003fec

0800140c <_Z41__static_initialization_and_destruction_0ii>:
 800140c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001410:	4604      	mov	r4, r0
 8001412:	460d      	mov	r5, r1
 8001414:	2801      	cmp	r0, #1
 8001416:	d007      	beq.n	8001428 <_Z41__static_initialization_and_destruction_0ii+0x1c>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8001418:	b924      	cbnz	r4, 8001424 <_Z41__static_initialization_and_destruction_0ii+0x18>
 800141a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141e:	429d      	cmp	r5, r3
 8001420:	f000 8279 	beq.w	8001916 <_Z41__static_initialization_and_destruction_0ii+0x50a>
}
 8001424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142c:	4299      	cmp	r1, r3
 800142e:	d1f3      	bne.n	8001418 <_Z41__static_initialization_and_destruction_0ii+0xc>
    {27, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 4,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},
    {28, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 5,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},
    {29, Rect(KEY_ROW_3_X + KEY_ROW_3_X_KEY_DISTANCE * 6,   KEY_ROW_3_Y, KEY_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_KEY_ID},

    {30, Rect(SPACE_X, KEY_ROW_4_Y, SPACE_WIDTH, KEY_HEIGHT), BITMAP_KEYBOARD_PRESSED_SPACE_ID}
};
 8001430:	4be9      	ldr	r3, [pc, #932]	; (80017d8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001436:	f04f 0c0c 	mov.w	ip, #12
 800143a:	f8a3 c002 	strh.w	ip, [r3, #2]
 800143e:	2064      	movs	r0, #100	; 0x64
 8001440:	8098      	strh	r0, [r3, #4]
 8001442:	2224      	movs	r2, #36	; 0x24
 8001444:	80da      	strh	r2, [r3, #6]
 8001446:	811a      	strh	r2, [r3, #8]
 8001448:	2106      	movs	r1, #6
 800144a:	8159      	strh	r1, [r3, #10]
 800144c:	2602      	movs	r6, #2
 800144e:	731e      	strb	r6, [r3, #12]
 8001450:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8001454:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8001458:	8218      	strh	r0, [r3, #16]
 800145a:	825a      	strh	r2, [r3, #18]
 800145c:	829a      	strh	r2, [r3, #20]
 800145e:	82d9      	strh	r1, [r3, #22]
 8001460:	f04f 0603 	mov.w	r6, #3
 8001464:	761e      	strb	r6, [r3, #24]
 8001466:	f04f 0660 	mov.w	r6, #96	; 0x60
 800146a:	835e      	strh	r6, [r3, #26]
 800146c:	8398      	strh	r0, [r3, #28]
 800146e:	83da      	strh	r2, [r3, #30]
 8001470:	841a      	strh	r2, [r3, #32]
 8001472:	8459      	strh	r1, [r3, #34]	; 0x22
 8001474:	f04f 0704 	mov.w	r7, #4
 8001478:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
 800147c:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8001480:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8001484:	8518      	strh	r0, [r3, #40]	; 0x28
 8001486:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001488:	859a      	strh	r2, [r3, #44]	; 0x2c
 800148a:	85d9      	strh	r1, [r3, #46]	; 0x2e
 800148c:	f04f 0705 	mov.w	r7, #5
 8001490:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
 8001494:	27b4      	movs	r7, #180	; 0xb4
 8001496:	865f      	strh	r7, [r3, #50]	; 0x32
 8001498:	8698      	strh	r0, [r3, #52]	; 0x34
 800149a:	86da      	strh	r2, [r3, #54]	; 0x36
 800149c:	871a      	strh	r2, [r3, #56]	; 0x38
 800149e:	8759      	strh	r1, [r3, #58]	; 0x3a
 80014a0:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 80014a4:	f04f 0ede 	mov.w	lr, #222	; 0xde
 80014a8:	f8a3 e03e 	strh.w	lr, [r3, #62]	; 0x3e
 80014ac:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
 80014b0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80014b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80014b8:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
 80014bc:	f04f 0907 	mov.w	r9, #7
 80014c0:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 80014c4:	f44f 7984 	mov.w	r9, #264	; 0x108
 80014c8:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80014cc:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
 80014d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80014d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80014d8:	f8a3 1052 	strh.w	r1, [r3, #82]	; 0x52
 80014dc:	f04f 0b08 	mov.w	fp, #8
 80014e0:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80014e4:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80014e8:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80014ec:	f8a3 0058 	strh.w	r0, [r3, #88]	; 0x58
 80014f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80014f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80014f8:	f8a3 105e 	strh.w	r1, [r3, #94]	; 0x5e
 80014fc:	f04f 0e09 	mov.w	lr, #9
 8001500:	f883 e060 	strb.w	lr, [r3, #96]	; 0x60
 8001504:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8001508:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 800150c:	f8a3 0064 	strh.w	r0, [r3, #100]	; 0x64
 8001510:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001514:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001518:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
 800151c:	f04f 0e0a 	mov.w	lr, #10
 8001520:	f883 e06c 	strb.w	lr, [r3, #108]	; 0x6c
 8001524:	f44f 7ec3 	mov.w	lr, #390	; 0x186
 8001528:	f8a3 e06e 	strh.w	lr, [r3, #110]	; 0x6e
 800152c:	f8a3 0070 	strh.w	r0, [r3, #112]	; 0x70
 8001530:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8001534:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001538:	f8a3 1076 	strh.w	r1, [r3, #118]	; 0x76
 800153c:	f04f 090b 	mov.w	r9, #11
 8001540:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8001544:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8001548:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 800154c:	f8a3 007c 	strh.w	r0, [r3, #124]	; 0x7c
 8001550:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001554:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001558:	f8a3 1082 	strh.w	r1, [r3, #130]	; 0x82
 800155c:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
 8001560:	f8a3 c086 	strh.w	ip, [r3, #134]	; 0x86
 8001564:	208e      	movs	r0, #142	; 0x8e
 8001566:	f8a3 0088 	strh.w	r0, [r3, #136]	; 0x88
 800156a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800156e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8001572:	f8a3 108e 	strh.w	r1, [r3, #142]	; 0x8e
 8001576:	f04f 060d 	mov.w	r6, #13
 800157a:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 800157e:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8001582:	f8a3 0094 	strh.w	r0, [r3, #148]	; 0x94
 8001586:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800158a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800158e:	f8a3 109a 	strh.w	r1, [r3, #154]	; 0x9a
 8001592:	f04f 0a0e 	mov.w	sl, #14
 8001596:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 800159a:	f04f 0660 	mov.w	r6, #96	; 0x60
 800159e:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 80015a2:	f8a3 00a0 	strh.w	r0, [r3, #160]	; 0xa0
 80015a6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80015aa:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80015ae:	f8a3 10a6 	strh.w	r1, [r3, #166]	; 0xa6
 80015b2:	f04f 0a0f 	mov.w	sl, #15
 80015b6:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 80015ba:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 80015be:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 80015c2:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80015c6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80015ca:	f8a3 10b2 	strh.w	r1, [r3, #178]	; 0xb2
 80015ce:	f04f 0a10 	mov.w	sl, #16
 80015d2:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 80015d6:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 80015da:	f8a3 00b8 	strh.w	r0, [r3, #184]	; 0xb8
 80015de:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80015e2:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80015e6:	f8a3 10be 	strh.w	r1, [r3, #190]	; 0xbe
 80015ea:	f04f 0a11 	mov.w	sl, #17
 80015ee:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80015f2:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80015f6:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80015fa:	f8a3 00c4 	strh.w	r0, [r3, #196]	; 0xc4
 80015fe:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8001602:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8001606:	f8a3 10ca 	strh.w	r1, [r3, #202]	; 0xca
 800160a:	f04f 0a12 	mov.w	sl, #18
 800160e:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8001612:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001616:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 800161a:	f8a3 00d0 	strh.w	r0, [r3, #208]	; 0xd0
 800161e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8001622:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001626:	f8a3 10d6 	strh.w	r1, [r3, #214]	; 0xd6
 800162a:	f04f 0a13 	mov.w	sl, #19
 800162e:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8001632:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8001636:	4656      	mov	r6, sl
 8001638:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 800163c:	f8a3 00dc 	strh.w	r0, [r3, #220]	; 0xdc
 8001640:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001644:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001648:	f8a3 10e2 	strh.w	r1, [r3, #226]	; 0xe2
 800164c:	f04f 0a14 	mov.w	sl, #20
 8001650:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8001654:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8001658:	f8a3 00e8 	strh.w	r0, [r3, #232]	; 0xe8
 800165c:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8001660:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8001664:	f8a3 10ee 	strh.w	r1, [r3, #238]	; 0xee
 8001668:	f04f 0a15 	mov.w	sl, #21
 800166c:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8001670:	f8a3 e0f2 	strh.w	lr, [r3, #242]	; 0xf2
 8001674:	f8a3 00f4 	strh.w	r0, [r3, #244]	; 0xf4
 8001678:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 800167c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8001680:	f8a3 10fa 	strh.w	r1, [r3, #250]	; 0xfa
 8001684:	f04f 0a16 	mov.w	sl, #22
 8001688:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 800168c:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8001690:	f8a3 0100 	strh.w	r0, [r3, #256]	; 0x100
 8001694:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8001698:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800169c:	f8a3 1106 	strh.w	r1, [r3, #262]	; 0x106
 80016a0:	2017      	movs	r0, #23
 80016a2:	f883 0108 	strb.w	r0, [r3, #264]	; 0x108
 80016a6:	f04f 0060 	mov.w	r0, #96	; 0x60
 80016aa:	f8a3 010a 	strh.w	r0, [r3, #266]	; 0x10a
 80016ae:	20b8      	movs	r0, #184	; 0xb8
 80016b0:	f8a3 010c 	strh.w	r0, [r3, #268]	; 0x10c
 80016b4:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 80016b8:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 80016bc:	f8a3 1112 	strh.w	r1, [r3, #274]	; 0x112
 80016c0:	f04f 0918 	mov.w	r9, #24
 80016c4:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 80016c8:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 80016cc:	f8a3 0118 	strh.w	r0, [r3, #280]	; 0x118
 80016d0:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 80016d4:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80016d8:	f8a3 111e 	strh.w	r1, [r3, #286]	; 0x11e
 80016dc:	f04f 0819 	mov.w	r8, #25
 80016e0:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80016e4:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80016e8:	f8a3 0124 	strh.w	r0, [r3, #292]	; 0x124
 80016ec:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80016f0:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80016f4:	f8a3 112a 	strh.w	r1, [r3, #298]	; 0x12a
 80016f8:	271a      	movs	r7, #26
 80016fa:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80016fe:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001702:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8001706:	f8a3 0130 	strh.w	r0, [r3, #304]	; 0x130
 800170a:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 800170e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8001712:	f8a3 1136 	strh.w	r1, [r3, #310]	; 0x136
 8001716:	271b      	movs	r7, #27
 8001718:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 800171c:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001720:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8001724:	f8a3 013c 	strh.w	r0, [r3, #316]	; 0x13c
 8001728:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 800172c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8001730:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
 8001734:	271c      	movs	r7, #28
 8001736:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 800173a:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 800173e:	f8a3 0148 	strh.w	r0, [r3, #328]	; 0x148
 8001742:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001746:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 800174a:	f8a3 114e 	strh.w	r1, [r3, #334]	; 0x14e
 800174e:	271d      	movs	r7, #29
 8001750:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8001754:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8001758:	f8a3 0154 	strh.w	r0, [r3, #340]	; 0x154
 800175c:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8001760:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001764:	f8a3 115a 	strh.w	r1, [r3, #346]	; 0x15a
 8001768:	211e      	movs	r1, #30
 800176a:	f883 115c 	strb.w	r1, [r3, #348]	; 0x15c
 800176e:	f04f 0160 	mov.w	r1, #96	; 0x60
 8001772:	f8a3 115e 	strh.w	r1, [r3, #350]	; 0x15e
 8001776:	21e2      	movs	r1, #226	; 0xe2
 8001778:	f8a3 1160 	strh.w	r1, [r3, #352]	; 0x160
 800177c:	f44f 7690 	mov.w	r6, #288	; 0x120
 8001780:	f8a3 6162 	strh.w	r6, [r3, #354]	; 0x162
 8001784:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001788:	f04f 0608 	mov.w	r6, #8
 800178c:	f8a3 6166 	strh.w	r6, [r3, #358]	; 0x166
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8001792:	f8a3 c000 	strh.w	ip, [r3]
 8001796:	8058      	strh	r0, [r3, #2]
 8001798:	274e      	movs	r7, #78	; 0x4e
 800179a:	809f      	strh	r7, [r3, #4]
 800179c:	80da      	strh	r2, [r3, #6]
{
    {Rect(CAPS_LOCK_X,  KEY_ROW_3_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_CAPSLOCK_ID},    // caps-lock
    {Rect(BACKSPACE_X,  KEY_ROW_3_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_BACKSPACE_ID},   // backspace    
    {Rect(MODE_X,       KEY_ROW_4_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_MODE_ID},        // mode
    {Rect(DONE_X,       KEY_ROW_4_Y, SPECIAL_BUTTONS_WIDTH, KEY_HEIGHT), 0, BITMAP_KEYBOARD_PRESSED_DONE_ID}         // done
};
 800179e:	2600      	movs	r6, #0
 80017a0:	609e      	str	r6, [r3, #8]
 80017a2:	f04f 0804 	mov.w	r8, #4
 80017a6:	f8a3 800c 	strh.w	r8, [r3, #12]
 80017aa:	f8a3 e010 	strh.w	lr, [r3, #16]
 80017ae:	8258      	strh	r0, [r3, #18]
 80017b0:	829f      	strh	r7, [r3, #20]
 80017b2:	82da      	strh	r2, [r3, #22]
 80017b4:	619e      	str	r6, [r3, #24]
 80017b6:	f04f 0003 	mov.w	r0, #3
 80017ba:	8398      	strh	r0, [r3, #28]
 80017bc:	f8a3 c020 	strh.w	ip, [r3, #32]
 80017c0:	8459      	strh	r1, [r3, #34]	; 0x22
 80017c2:	849f      	strh	r7, [r3, #36]	; 0x24
 80017c4:	84da      	strh	r2, [r3, #38]	; 0x26
 80017c6:	629e      	str	r6, [r3, #40]	; 0x28
 80017c8:	f04f 0007 	mov.w	r0, #7
 80017cc:	8598      	strh	r0, [r3, #44]	; 0x2c
 80017ce:	f8a3 e030 	strh.w	lr, [r3, #48]	; 0x30
 80017d2:	8659      	strh	r1, [r3, #50]	; 0x32
 80017d4:	869f      	strh	r7, [r3, #52]	; 0x34
 80017d6:	e003      	b.n	80017e0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>
 80017d8:	240040f4 	.word	0x240040f4
 80017dc:	240031e8 	.word	0x240031e8
 80017e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80017e2:	639e      	str	r6, [r3, #56]	; 0x38
 80017e4:	f04f 0205 	mov.w	r2, #5
 80017e8:	879a      	strh	r2, [r3, #60]	; 0x3c
 80017ea:	4621      	mov	r1, r4
 80017ec:	3340      	adds	r3, #64	; 0x40
 80017ee:	2900      	cmp	r1, #0
 80017f0:	db0b      	blt.n	800180a <_Z41__static_initialization_and_destruction_0ii+0x3fe>
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	805a      	strh	r2, [r3, #2]
 8001800:	809a      	strh	r2, [r3, #4]
 8001802:	80da      	strh	r2, [r3, #6]
 8001804:	3310      	adds	r3, #16
 8001806:	3901      	subs	r1, #1
 8001808:	e7f1      	b.n	80017ee <_Z41__static_initialization_and_destruction_0ii+0x3e2>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800180a:	4b51      	ldr	r3, [pc, #324]	; (8001950 <_Z41__static_initialization_and_destruction_0ii+0x544>)
 800180c:	2205      	movs	r2, #5
 800180e:	825a      	strh	r2, [r3, #18]
 8001810:	222d      	movs	r2, #45	; 0x2d
 8001812:	829a      	strh	r2, [r3, #20]
 8001814:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001818:	82da      	strh	r2, [r3, #22]
 800181a:	2246      	movs	r2, #70	; 0x46
 800181c:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 800181e:	4a4d      	ldr	r2, [pc, #308]	; (8001954 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 8001820:	61da      	str	r2, [r3, #28]
 8001822:	2600      	movs	r6, #0
 8001824:	841e      	strh	r6, [r3, #32]
        : color(col)
 8001826:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
 800182c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001830:	62da      	str	r2, [r3, #44]	; 0x2c
class TouchController
 8001832:	4f49      	ldr	r7, [pc, #292]	; (8001958 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 8001834:	4b49      	ldr	r3, [pc, #292]	; (800195c <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8001836:	603b      	str	r3, [r7, #0]
{
public:

    STM32TouchController() {}
 8001838:	4b49      	ldr	r3, [pc, #292]	; (8001960 <_Z41__static_initialization_and_destruction_0ii+0x554>)
 800183a:	603b      	str	r3, [r7, #0]
static STM32DMA dma;
 800183c:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80019a4 <_Z41__static_initialization_and_destruction_0ii+0x598>
 8001840:	4648      	mov	r0, r9
 8001842:	f7ff fa6b 	bl	8000d1c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8001846:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8001998 <_Z41__static_initialization_and_destruction_0ii+0x58c>
 800184a:	4640      	mov	r0, r8
 800184c:	f01b fbbe 	bl	801cfcc <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 8001850:	4b44      	ldr	r3, [pc, #272]	; (8001964 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8001852:	4a45      	ldr	r2, [pc, #276]	; (8001968 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f8c3 9004 	str.w	r9, [r3, #4]
 800185a:	f8c3 8008 	str.w	r8, [r3, #8]
 800185e:	60df      	str	r7, [r3, #12]
 8001860:	611e      	str	r6, [r3, #16]
 8001862:	615e      	str	r6, [r3, #20]
 8001864:	619e      	str	r6, [r3, #24]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001866:	839e      	strh	r6, [r3, #28]
 8001868:	83de      	strh	r6, [r3, #30]
 800186a:	841e      	strh	r6, [r3, #32]
 800186c:	845e      	strh	r6, [r3, #34]	; 0x22
 800186e:	849e      	strh	r6, [r3, #36]	; 0x24
 8001870:	84de      	strh	r6, [r3, #38]	; 0x26
 8001872:	851e      	strh	r6, [r3, #40]	; 0x28
 8001874:	f883 602a 	strb.w	r6, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001878:	62de      	str	r6, [r3, #44]	; 0x2c
 800187a:	861e      	strh	r6, [r3, #48]	; 0x30
 800187c:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
 8001880:	639e      	str	r6, [r3, #56]	; 0x38
 8001882:	63de      	str	r6, [r3, #60]	; 0x3c
 8001884:	641e      	str	r6, [r3, #64]	; 0x40
 8001886:	645e      	str	r6, [r3, #68]	; 0x44
 8001888:	f883 6048 	strb.w	r6, [r3, #72]	; 0x48
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8001892:	f883 604a 	strb.w	r6, [r3, #74]	; 0x4a
 8001896:	f883 604b 	strb.w	r6, [r3, #75]	; 0x4b
 800189a:	64de      	str	r6, [r3, #76]	; 0x4c
        : x(0), y(0), width(0), height(0)
 800189c:	f8a3 6050 	strh.w	r6, [r3, #80]	; 0x50
 80018a0:	f8a3 6052 	strh.w	r6, [r3, #82]	; 0x52
 80018a4:	f8a3 6054 	strh.w	r6, [r3, #84]	; 0x54
 80018a8:	f8a3 6056 	strh.w	r6, [r3, #86]	; 0x56
 80018ac:	659e      	str	r6, [r3, #88]	; 0x58
 80018ae:	65de      	str	r6, [r3, #92]	; 0x5c
 80018b0:	661e      	str	r6, [r3, #96]	; 0x60
 80018b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80018b6:	f883 6065 	strb.w	r6, [r3, #101]	; 0x65
 80018ba:	f883 6066 	strb.w	r6, [r3, #102]	; 0x66
 80018be:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80018c2:	f883 6068 	strb.w	r6, [r3, #104]	; 0x68
 80018c6:	f883 6069 	strb.w	r6, [r3, #105]	; 0x69
 80018ca:	f883 606a 	strb.w	r6, [r3, #106]	; 0x6a
 80018ce:	f883 606b 	strb.w	r6, [r3, #107]	; 0x6b
 80018d2:	f883 606c 	strb.w	r6, [r3, #108]	; 0x6c
 80018d6:	671e      	str	r6, [r3, #112]	; 0x70
 80018d8:	f883 6074 	strb.w	r6, [r3, #116]	; 0x74
 80018dc:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 80018e0:	f883 6076 	strb.w	r6, [r3, #118]	; 0x76
 80018e4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80018e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80018ec:	4a1f      	ldr	r2, [pc, #124]	; (800196c <_Z41__static_initialization_and_destruction_0ii+0x560>)
 80018ee:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80018f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018f4:	491e      	ldr	r1, [pc, #120]	; (8001970 <_Z41__static_initialization_and_destruction_0ii+0x564>)
 80018f6:	800a      	strh	r2, [r1, #0]
 80018f8:	491e      	ldr	r1, [pc, #120]	; (8001974 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 80018fa:	800a      	strh	r2, [r1, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80018fc:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001900:	491d      	ldr	r1, [pc, #116]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x56c>)
 8001902:	800a      	strh	r2, [r1, #0]
 8001904:	491d      	ldr	r1, [pc, #116]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x570>)
 8001906:	800a      	strh	r2, [r1, #0]
        DISPLAY_ROTATION = rotate0;
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x574>)
 800190a:	7016      	strb	r6, [r2, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800190c:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 800190e:	601a      	str	r2, [r3, #0]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8001910:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 8001912:	601a      	str	r2, [r3, #0]
    }
 8001914:	e580      	b.n	8001418 <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 800191a:	601a      	str	r2, [r3, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800191c:	4a19      	ldr	r2, [pc, #100]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 800191e:	601a      	str	r2, [r3, #0]
    {
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8001922:	601a      	str	r2, [r3, #0]
    static const touchgfx::FontId WIFIERRORSMALL = 5; // Saira_Medium_22_4bpp
    static const touchgfx::FontId WIFIBUTTON = 6;     // SairaSemiCondensed_Medium_18_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <_Z41__static_initialization_and_destruction_0ii+0x580>)
 8001926:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <_Z41__static_initialization_and_destruction_0ii+0x584>)
 8001928:	601a      	str	r2, [r3, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 800192a:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <_Z41__static_initialization_and_destruction_0ii+0x588>)
 800192c:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <_Z41__static_initialization_and_destruction_0ii+0x590>)
 8001932:	601a      	str	r2, [r3, #0]
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <_Z41__static_initialization_and_destruction_0ii+0x594>)
 8001936:	601a      	str	r2, [r3, #0]
static STM32DMA dma;
 8001938:	481a      	ldr	r0, [pc, #104]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 800193a:	f7ff f823 	bl	8000984 <_ZN8STM32DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8001942:	601a      	str	r2, [r3, #0]
    {
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8001946:	601a      	str	r2, [r3, #0]
    {
 8001948:	4b01      	ldr	r3, [pc, #4]	; (8001950 <_Z41__static_initialization_and_destruction_0ii+0x544>)
 800194a:	4a02      	ldr	r2, [pc, #8]	; (8001954 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 800194c:	61da      	str	r2, [r3, #28]
}
 800194e:	e569      	b.n	8001424 <_Z41__static_initialization_and_destruction_0ii+0x18>
 8001950:	2400406c 	.word	0x2400406c
 8001954:	08024a78 	.word	0x08024a78
 8001958:	24003248 	.word	0x24003248
 800195c:	080244f4 	.word	0x080244f4
 8001960:	0802450c 	.word	0x0802450c
 8001964:	24003fec 	.word	0x24003fec
 8001968:	0802663c 	.word	0x0802663c
 800196c:	2400f440 	.word	0x2400f440
 8001970:	2400f434 	.word	0x2400f434
 8001974:	2400f43a 	.word	0x2400f43a
 8001978:	2400f436 	.word	0x2400f436
 800197c:	2400f43c 	.word	0x2400f43c
 8001980:	2400f438 	.word	0x2400f438
 8001984:	08024cac 	.word	0x08024cac
 8001988:	0802469c 	.word	0x0802469c
 800198c:	24000008 	.word	0x24000008
 8001990:	08024e2c 	.word	0x08024e2c
 8001994:	08024a88 	.word	0x08024a88
 8001998:	2400409c 	.word	0x2400409c
 800199c:	08026db0 	.word	0x08026db0
 80019a0:	08026a74 	.word	0x08026a74
 80019a4:	2400324c 	.word	0x2400324c

080019a8 <_GLOBAL__sub_I_touchgfx_init>:
 80019a8:	b508      	push	{r3, lr}
 80019aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7ff fd2c 	bl	800140c <_Z41__static_initialization_and_destruction_0ii>
 80019b4:	bd08      	pop	{r3, pc}

080019b6 <_GLOBAL__sub_D_touchgfx_init>:
 80019b6:	b508      	push	{r3, lr}
 80019b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fd25 	bl	800140c <_Z41__static_initialization_and_destruction_0ii>
 80019c2:	bd08      	pop	{r3, pc}

080019c4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 80019c6:	2290      	movs	r2, #144	; 0x90
 80019c8:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 80019cc:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80019da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019e4:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100

080019ec <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80019ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80019f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80019fa:	f3bf 8f6f 	isb	sy
 80019fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001a06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a0a:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001a14:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8001a16:	68d3      	ldr	r3, [r2, #12]
 8001a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8001a22:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001a24:	6911      	ldr	r1, [r2, #16]
 8001a26:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001a2a:	3901      	subs	r1, #1
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
 8001a2e:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001a32:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001a3a:	4770      	bx	lr
 8001a3c:	50001000 	.word	0x50001000
 8001a40:	24004458 	.word	0x24004458
 8001a44:	24004456 	.word	0x24004456

08001a48 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8001a48:	4b01      	ldr	r3, [pc, #4]	; (8001a50 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8001a4a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8001a4e:	4770      	bx	lr
 8001a50:	50001000 	.word	0x50001000

08001a54 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 8001a56:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a5e:	4770      	bx	lr
 8001a60:	50001000 	.word	0x50001000

08001a64 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a6c:	d025      	beq.n	8001aba <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x56>
{
 8001a6e:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001a78:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001a7c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001a80:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001a84:	e000      	b.n	8001a88 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x24>
    } while(sets-- != 0U);
 8001a86:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001a88:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001a8c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001a90:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001a94:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001a98:	4908      	ldr	r1, [pc, #32]	; (8001abc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x58>)
 8001a9a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f2      	bne.n	8001a8c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x28>
    } while(sets-- != 0U);
 8001aa6:	1e43      	subs	r3, r0, #1
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d1ec      	bne.n	8001a86 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
 8001aac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ab0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ac8:	d025      	beq.n	8001b16 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x56>
{
 8001aca:	b410      	push	{r4}
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ad4:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001ad8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001adc:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8001ae0:	e000      	b.n	8001ae4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x24>
    } while(sets-- != 0U);
 8001ae2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ae4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ae8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001aec:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8001af0:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8001af4:	4908      	ldr	r1, [pc, #32]	; (8001b18 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x58>)
 8001af6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001afa:	4613      	mov	r3, r2
 8001afc:	3a01      	subs	r2, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f2      	bne.n	8001ae8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
    } while(sets-- != 0U);
 8001b02:	1e43      	subs	r3, r0, #1
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d1ec      	bne.n	8001ae2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
 8001b08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b0c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8001b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <_ZN20TouchGFXGeneratedHALD1Ev>:
 8001b1c:	4a02      	ldr	r2, [pc, #8]	; (8001b28 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 8001b1e:	6002      	str	r2, [r0, #0]
 8001b20:	4a02      	ldr	r2, [pc, #8]	; (8001b2c <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 8001b22:	6002      	str	r2, [r0, #0]
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	08024cac 	.word	0x08024cac
 8001b2c:	0802663c 	.word	0x0802663c

08001b30 <_Z41__static_initialization_and_destruction_0ii>:
            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
}
 8001b30:	2801      	cmp	r0, #1
 8001b32:	d006      	beq.n	8001b42 <_Z41__static_initialization_and_destruction_0ii+0x12>

/**
 * The layout for the CustomKeyboard.
 */
static const Keyboard::Layout layout =
 8001b34:	b920      	cbnz	r0, 8001b40 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8001b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3a:	4299      	cmp	r1, r3
 8001b3c:	f000 8222 	beq.w	8001f84 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8001b40:	4770      	bx	lr
 8001b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b46:	4299      	cmp	r1, r3
 8001b48:	d1f4      	bne.n	8001b34 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8001b4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8001b4e:	4bf0      	ldr	r3, [pc, #960]	; (8001f10 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001b54:	240c      	movs	r4, #12
 8001b56:	805c      	strh	r4, [r3, #2]
 8001b58:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8001b5c:	f8a3 e004 	strh.w	lr, [r3, #4]
 8001b60:	2224      	movs	r2, #36	; 0x24
 8001b62:	80da      	strh	r2, [r3, #6]
 8001b64:	811a      	strh	r2, [r3, #8]
 8001b66:	f04f 0c06 	mov.w	ip, #6
 8001b6a:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8001b6e:	2502      	movs	r5, #2
 8001b70:	731d      	strb	r5, [r3, #12]
 8001b72:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8001b76:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8001b7a:	f8a3 e010 	strh.w	lr, [r3, #16]
 8001b7e:	825a      	strh	r2, [r3, #18]
 8001b80:	829a      	strh	r2, [r3, #20]
 8001b82:	f8a3 c016 	strh.w	ip, [r3, #22]
 8001b86:	f04f 0503 	mov.w	r5, #3
 8001b8a:	761d      	strb	r5, [r3, #24]
 8001b8c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001b90:	835e      	strh	r6, [r3, #26]
 8001b92:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8001b96:	83da      	strh	r2, [r3, #30]
 8001b98:	841a      	strh	r2, [r3, #32]
 8001b9a:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8001b9e:	f04f 0504 	mov.w	r5, #4
 8001ba2:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8001ba6:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8001baa:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8001bae:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bb4:	859a      	strh	r2, [r3, #44]	; 0x2c
 8001bb6:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8001bba:	f04f 0505 	mov.w	r5, #5
 8001bbe:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8001bc2:	27b4      	movs	r7, #180	; 0xb4
 8001bc4:	865f      	strh	r7, [r3, #50]	; 0x32
 8001bc6:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8001bca:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bcc:	871a      	strh	r2, [r3, #56]	; 0x38
 8001bce:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8001bd2:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 8001bd6:	f04f 05de 	mov.w	r5, #222	; 0xde
 8001bda:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8001bdc:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8001be0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8001be4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001be8:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8001bec:	f04f 0907 	mov.w	r9, #7
 8001bf0:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8001bf4:	f44f 7984 	mov.w	r9, #264	; 0x108
 8001bf8:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8001bfc:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8001c00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8001c04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8001c08:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8001c0c:	f04f 0b08 	mov.w	fp, #8
 8001c10:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8001c14:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8001c18:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8001c1c:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8001c20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8001c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001c28:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8001c2c:	2509      	movs	r5, #9
 8001c2e:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8001c32:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 8001c36:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 8001c3a:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8001c3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001c42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001c46:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 8001c4a:	250a      	movs	r5, #10
 8001c4c:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8001c50:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8001c54:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8001c58:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8001c5c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8001c60:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001c64:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8001c68:	f04f 090b 	mov.w	r9, #11
 8001c6c:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8001c70:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8001c74:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8001c78:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8001c7c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001c80:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001c84:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8001c88:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8001c8c:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8001c90:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8001c94:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8001c98:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8001c9c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8001ca0:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8001ca4:	f04f 060d 	mov.w	r6, #13
 8001ca8:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8001cac:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8001cb0:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8001cb4:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8001cb8:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8001cbc:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8001cc0:	f04f 0a0e 	mov.w	sl, #14
 8001cc4:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8001cc8:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001ccc:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8001cd0:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8001cd4:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8001cd8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8001cdc:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8001ce0:	f04f 0a0f 	mov.w	sl, #15
 8001ce4:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8001ce8:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8001cec:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8001cf0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8001cf4:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8001cf8:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8001cfc:	f04f 0a10 	mov.w	sl, #16
 8001d00:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8001d04:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8001d08:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8001d0c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8001d10:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8001d14:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8001d18:	f04f 0a11 	mov.w	sl, #17
 8001d1c:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8001d20:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001d24:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 8001d28:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8001d2c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8001d30:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8001d34:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 8001d38:	f04f 0a12 	mov.w	sl, #18
 8001d3c:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8001d40:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001d44:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 8001d48:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8001d4c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8001d50:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8001d54:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8001d58:	f04f 0a13 	mov.w	sl, #19
 8001d5c:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8001d60:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8001d64:	4656      	mov	r6, sl
 8001d66:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8001d6a:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8001d6e:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001d72:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001d76:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8001d7a:	f04f 0a14 	mov.w	sl, #20
 8001d7e:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8001d82:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8001d86:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8001d8a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8001d8e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8001d92:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8001d96:	f04f 0a15 	mov.w	sl, #21
 8001d9a:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8001d9e:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8001da2:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8001da6:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001daa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8001dae:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8001db2:	f04f 0a16 	mov.w	sl, #22
 8001db6:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8001dba:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8001dbe:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8001dc2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8001dc6:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8001dca:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8001dce:	f04f 0e17 	mov.w	lr, #23
 8001dd2:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8001dd6:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8001dda:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8001dde:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8001de2:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8001de6:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8001dea:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8001dee:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8001df2:	f04f 0918 	mov.w	r9, #24
 8001df6:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8001dfa:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8001dfe:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8001e02:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8001e06:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8001e0a:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8001e0e:	f04f 0819 	mov.w	r8, #25
 8001e12:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 8001e16:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8001e1a:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8001e1e:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8001e22:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 8001e26:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 8001e2a:	271a      	movs	r7, #26
 8001e2c:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8001e30:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8001e34:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 8001e38:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8001e3c:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8001e40:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8001e44:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 8001e48:	271b      	movs	r7, #27
 8001e4a:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8001e4e:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8001e52:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 8001e56:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8001e5a:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8001e5e:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8001e62:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8001e66:	271c      	movs	r7, #28
 8001e68:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8001e6c:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8001e70:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8001e74:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8001e78:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8001e7c:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8001e80:	271d      	movs	r7, #29
 8001e82:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8001e86:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8001e8a:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8001e8e:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8001e92:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8001e96:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8001e9a:	271e      	movs	r7, #30
 8001e9c:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8001ea0:	f04f 0660 	mov.w	r6, #96	; 0x60
 8001ea4:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8001ea8:	26e2      	movs	r6, #226	; 0xe2
 8001eaa:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8001eae:	f44f 7790 	mov.w	r7, #288	; 0x120
 8001eb2:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8001eb6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8001eba:	f04f 0708 	mov.w	r7, #8
 8001ebe:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8001ec4:	801c      	strh	r4, [r3, #0]
 8001ec6:	f8a3 e002 	strh.w	lr, [r3, #2]
 8001eca:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8001ece:	f8a3 c004 	strh.w	ip, [r3, #4]
 8001ed2:	80da      	strh	r2, [r3, #6]
};
 8001ed4:	2700      	movs	r7, #0
 8001ed6:	609f      	str	r7, [r3, #8]
 8001ed8:	f04f 0804 	mov.w	r8, #4
 8001edc:	f8a3 800c 	strh.w	r8, [r3, #12]
 8001ee0:	821d      	strh	r5, [r3, #16]
 8001ee2:	f8a3 e012 	strh.w	lr, [r3, #18]
 8001ee6:	f8a3 c014 	strh.w	ip, [r3, #20]
 8001eea:	82da      	strh	r2, [r3, #22]
 8001eec:	619f      	str	r7, [r3, #24]
 8001eee:	f04f 0e03 	mov.w	lr, #3
 8001ef2:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8001ef6:	841c      	strh	r4, [r3, #32]
 8001ef8:	845e      	strh	r6, [r3, #34]	; 0x22
 8001efa:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8001efe:	84da      	strh	r2, [r3, #38]	; 0x26
 8001f00:	629f      	str	r7, [r3, #40]	; 0x28
 8001f02:	f04f 0407 	mov.w	r4, #7
 8001f06:	859c      	strh	r4, [r3, #44]	; 0x2c
 8001f08:	861d      	strh	r5, [r3, #48]	; 0x30
 8001f0a:	865e      	strh	r6, [r3, #50]	; 0x32
 8001f0c:	e004      	b.n	8001f18 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8001f0e:	bf00      	nop
 8001f10:	240042ec 	.word	0x240042ec
 8001f14:	2400425c 	.word	0x2400425c
 8001f18:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8001f1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f1e:	639f      	str	r7, [r3, #56]	; 0x38
 8001f20:	f04f 0205 	mov.w	r2, #5
 8001f24:	879a      	strh	r2, [r3, #60]	; 0x3c
 8001f26:	4604      	mov	r4, r0
 8001f28:	3340      	adds	r3, #64	; 0x40
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	db0b      	blt.n	8001f46 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8001f38:	801a      	strh	r2, [r3, #0]
 8001f3a:	805a      	strh	r2, [r3, #2]
 8001f3c:	809a      	strh	r2, [r3, #4]
 8001f3e:	80da      	strh	r2, [r3, #6]
 8001f40:	3310      	adds	r3, #16
 8001f42:	3c01      	subs	r4, #1
 8001f44:	e7f1      	b.n	8001f2a <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f48:	2205      	movs	r2, #5
 8001f4a:	825a      	strh	r2, [r3, #18]
 8001f4c:	222d      	movs	r2, #45	; 0x2d
 8001f4e:	829a      	strh	r2, [r3, #20]
 8001f50:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8001f54:	82da      	strh	r2, [r3, #22]
 8001f56:	2246      	movs	r2, #70	; 0x46
 8001f58:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f5c:	61da      	str	r2, [r3, #28]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	841a      	strh	r2, [r3, #32]
        : color(col)
 8001f62:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
 8001f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8001f6e:	b918      	cbnz	r0, 8001f78 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8001f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f74:	4299      	cmp	r1, r3
 8001f76:	d001      	beq.n	8001f7c <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8001f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f7e:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f80:	61da      	str	r2, [r3, #28]
 8001f82:	e7f9      	b.n	8001f78 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8001f84:	4b01      	ldr	r3, [pc, #4]	; (8001f8c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8001f86:	4a02      	ldr	r2, [pc, #8]	; (8001f90 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8001f88:	61da      	str	r2, [r3, #28]
 8001f8a:	4770      	bx	lr
 8001f8c:	240042bc 	.word	0x240042bc
 8001f90:	08024a78 	.word	0x08024a78

08001f94 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	4604      	mov	r4, r0
    HAL::initialize();
 8001f98:	f012 f919 	bl	80141ce <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8001fa0:	f015 fd7a 	bl	8017a98 <_ZN8touchgfx11Application11getInstanceEv>
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	4a02      	ldr	r2, [pc, #8]	; (8001fbc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x28>)
 8001fb4:	4902      	ldr	r1, [pc, #8]	; (8001fc0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x2c>)
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	47a8      	blx	r5
}
 8001fba:	bd38      	pop	{r3, r4, r5, pc}
 8001fbc:	2409fa00 	.word	0x2409fa00
 8001fc0:	24040000 	.word	0x24040000

08001fc4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
{
 8001fc4:	b508      	push	{r3, lr}
    return HAL::beginFrame();
 8001fc6:	f012 f8e9 	bl	801419c <_ZN8touchgfx3HAL10beginFrameEv>
}
 8001fca:	bd08      	pop	{r3, pc}

08001fcc <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8001fcc:	b508      	push	{r3, lr}
    if (frameBufferUpdatedThisFrame)
 8001fce:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8001fd2:	b113      	cbz	r3, 8001fda <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
 8001fd4:	4b02      	ldr	r3, [pc, #8]	; (8001fe0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x14>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8001fda:	f012 f8eb 	bl	80141b4 <_ZN8touchgfx3HAL8endFrameEv>
}
 8001fde:	bd08      	pop	{r3, pc}
 8001fe0:	24004454 	.word	0x24004454

08001fe4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8001fe4:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 8001fe6:	f012 f8a2 	bl	801412e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ff2:	d021      	beq.n	8002038 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ffc:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002000:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002004:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8002008:	e000      	b.n	800200c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x28>
    } while(sets-- != 0U);
 800200a:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800200c:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002010:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002014:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8002018:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x58>)
 800201e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002022:	4613      	mov	r3, r2
 8002024:	3a01      	subs	r2, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f2      	bne.n	8002010 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
 800202a:	1e43      	subs	r3, r0, #1
 800202c:	2800      	cmp	r0, #0
 800202e:	d1ec      	bne.n	800200a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
 8002030:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002034:	f3bf 8f6f 	isb	sy
}
 8002038:	bd10      	pop	{r4, pc}
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
{
 8002040:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 8002042:	f012 f9de 	bl	8014402 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8002046:	bd08      	pop	{r3, pc}

08002048 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8002048:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 800204a:	f012 f86a 	bl	8014122 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800204e:	bd08      	pop	{r3, pc}

08002050 <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8002050:	b510      	push	{r4, lr}
 8002052:	4604      	mov	r4, r0
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 8002056:	6003      	str	r3, [r0, #0]
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 800205a:	6003      	str	r3, [r0, #0]
 800205c:	217c      	movs	r1, #124	; 0x7c
 800205e:	f020 fe8a 	bl	8022d76 <_ZdlPvj>
 8002062:	4620      	mov	r0, r4
 8002064:	bd10      	pop	{r4, pc}
 8002066:	bf00      	nop
 8002068:	08024cac 	.word	0x08024cac
 800206c:	0802663c 	.word	0x0802663c

08002070 <HAL_LTDC_LineEventCallback>:
        return instance;
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_LTDC_LineEventCallback+0x54>)
 8002072:	681b      	ldr	r3, [r3, #0]
        if (!HAL::getInstance())
 8002074:	b32b      	cbz	r3, 80020c2 <HAL_LTDC_LineEventCallback+0x52>
    {
 8002076:	b510      	push	{r4, lr}
        if (LTDC->LIPCR == lcd_int_active_line)
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_LTDC_LineEventCallback+0x58>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <HAL_LTDC_LineEventCallback+0x5c>)
 800207e:	8811      	ldrh	r1, [r2, #0]
 8002080:	428b      	cmp	r3, r1
 8002082:	d00a      	beq.n	800209a <HAL_LTDC_LineEventCallback+0x2a>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002084:	f009 fd4c 	bl	800bb20 <HAL_LTDC_ProgramLineEvent>
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_LTDC_LineEventCallback+0x54>)
 800208a:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 800208c:	6803      	ldr	r3, [r0, #0]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002092:	2000      	movs	r0, #0
 8002094:	f7fe fa54 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8002098:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_LTDC_LineEventCallback+0x60>)
 800209c:	8819      	ldrh	r1, [r3, #0]
 800209e:	f009 fd3f 	bl	800bb20 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80020a2:	4c08      	ldr	r4, [pc, #32]	; (80020c4 <HAL_LTDC_LineEventCallback+0x54>)
 80020a4:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80020a6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80020aa:	3301      	adds	r3, #1
 80020ac:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 80020b0:	f7fe fc30 	bl	8000914 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 80020b4:	6820      	ldr	r0, [r4, #0]
 80020b6:	f012 fddb 	bl	8014c70 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7fe fa02 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80020c0:	e7ea      	b.n	8002098 <HAL_LTDC_LineEventCallback+0x28>
 80020c2:	4770      	bx	lr
 80020c4:	2400f440 	.word	0x2400f440
 80020c8:	50001000 	.word	0x50001000
 80020cc:	24004458 	.word	0x24004458
 80020d0:	24004456 	.word	0x24004456

080020d4 <_GLOBAL__sub_I__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
}
 80020d4:	b508      	push	{r3, lr}
 80020d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020da:	2001      	movs	r0, #1
 80020dc:	f7ff fd28 	bl	8001b30 <_Z41__static_initialization_and_destruction_0ii>
 80020e0:	bd08      	pop	{r3, pc}

080020e2 <_GLOBAL__sub_D__ZN8touchgfx5paint6rgb56511blendL8CLUTE>:
 80020e2:	b508      	push	{r3, lr}
 80020e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff fd21 	bl	8001b30 <_Z41__static_initialization_and_destruction_0ii>
 80020ee:	bd08      	pop	{r3, pc}

080020f0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80020f0:	b530      	push	{r4, r5, lr}
 80020f2:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020f4:	2400      	movs	r4, #0
 80020f6:	9400      	str	r4, [sp, #0]
 80020f8:	9401      	str	r4, [sp, #4]
 80020fa:	9402      	str	r4, [sp, #8]
 80020fc:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80020fe:	f008 f991 	bl	800a424 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002102:	2501      	movs	r5, #1
 8002104:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002108:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800210c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8002110:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8002112:	231b      	movs	r3, #27
 8002114:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002118:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800211c:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002120:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002124:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002128:	f88d 400d 	strb.w	r4, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800212c:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002130:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002134:	4668      	mov	r0, sp
 8002136:	f008 f993 	bl	800a460 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800213a:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800213e:	2319      	movs	r3, #25
 8002140:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002144:	2403      	movs	r4, #3
 8002146:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800214a:	f88d 500e 	strb.w	r5, [sp, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800214e:	4668      	mov	r0, sp
 8002150:	f008 f986 	bl	800a460 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002154:	2302      	movs	r3, #2
 8002156:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800215a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800215e:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8002160:	2313      	movs	r3, #19
 8002162:	f88d 3008 	strb.w	r3, [sp, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002166:	4668      	mov	r0, sp
 8002168:	f008 f97a 	bl	800a460 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800216c:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002170:	2311      	movs	r3, #17
 8002172:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002176:	f88d 500f 	strb.w	r5, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800217a:	4668      	mov	r0, sp
 800217c:	f008 f970 	bl	800a460 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002180:	2004      	movs	r0, #4
 8002182:	f008 f95d 	bl	800a440 <HAL_MPU_Enable>

}
 8002186:	b005      	add	sp, #20
 8002188:	bd30      	pop	{r4, r5, pc}
	...

0800218c <MX_CRC_Init>:
{
 800218c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800218e:	4806      	ldr	r0, [pc, #24]	; (80021a8 <MX_CRC_Init+0x1c>)
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_CRC_Init+0x20>)
 8002192:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002198:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800219a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800219c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800219e:	2301      	movs	r3, #1
 80021a0:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80021a2:	f008 f98d 	bl	800a4c0 <HAL_CRC_Init>
}
 80021a6:	bd08      	pop	{r3, pc}
 80021a8:	2400446c 	.word	0x2400446c
 80021ac:	40023000 	.word	0x40023000

080021b0 <MX_GPIO_Init>:
{
 80021b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021b4:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b6:	2400      	movs	r4, #0
 80021b8:	9409      	str	r4, [sp, #36]	; 0x24
 80021ba:	940a      	str	r4, [sp, #40]	; 0x28
 80021bc:	940b      	str	r4, [sp, #44]	; 0x2c
 80021be:	940c      	str	r4, [sp, #48]	; 0x30
 80021c0:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021c2:	4b76      	ldr	r3, [pc, #472]	; (800239c <MX_GPIO_Init+0x1ec>)
 80021c4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021cc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021d0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021d4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80021d8:	9201      	str	r2, [sp, #4]
 80021da:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80021dc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021e4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80021e8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021ec:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80021f0:	9202      	str	r2, [sp, #8]
 80021f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021f4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80021f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021fc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002200:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002204:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002208:	9203      	str	r2, [sp, #12]
 800220a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800220c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002214:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002218:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800221c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002220:	9204      	str	r2, [sp, #16]
 8002222:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002224:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002228:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800222c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002230:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002234:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002238:	9205      	str	r2, [sp, #20]
 800223a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002248:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800224c:	f002 0201 	and.w	r2, r2, #1
 8002250:	9206      	str	r2, [sp, #24]
 8002252:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002254:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002258:	f042 0204 	orr.w	r2, r2, #4
 800225c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002260:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002264:	f002 0204 	and.w	r2, r2, #4
 8002268:	9207      	str	r2, [sp, #28]
 800226a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800226c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002270:	f042 0208 	orr.w	r2, r2, #8
 8002274:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002278:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	9308      	str	r3, [sp, #32]
 8002282:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|FRAME_RATE_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8002284:	4e46      	ldr	r6, [pc, #280]	; (80023a0 <MX_GPIO_Init+0x1f0>)
 8002286:	4622      	mov	r2, r4
 8002288:	f240 210e 	movw	r1, #526	; 0x20e
 800228c:	4630      	mov	r0, r6
 800228e:	f008 fdea 	bl	800ae66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002292:	f8df a118 	ldr.w	sl, [pc, #280]	; 80023ac <MX_GPIO_Init+0x1fc>
 8002296:	4622      	mov	r2, r4
 8002298:	f640 0104 	movw	r1, #2052	; 0x804
 800229c:	4650      	mov	r0, sl
 800229e:	f008 fde2 	bl	800ae66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80022a2:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80023b0 <MX_GPIO_Init+0x200>
 80022a6:	4622      	mov	r2, r4
 80022a8:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 80022ac:	4640      	mov	r0, r8
 80022ae:	f008 fdda 	bl	800ae66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80022b2:	4f3c      	ldr	r7, [pc, #240]	; (80023a4 <MX_GPIO_Init+0x1f4>)
 80022b4:	4622      	mov	r2, r4
 80022b6:	2106      	movs	r1, #6
 80022b8:	4638      	mov	r0, r7
 80022ba:	f008 fdd4 	bl	800ae66 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 80022be:	2330      	movs	r3, #48	; 0x30
 80022c0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022c2:	f44f 1988 	mov.w	r9, #1114112	; 0x110000
 80022c6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022cc:	a909      	add	r1, sp, #36	; 0x24
 80022ce:	4630      	mov	r0, r6
 80022d0:	f008 fc0a 	bl	800aae8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 80022d4:	230e      	movs	r3, #14
 80022d6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2501      	movs	r5, #1
 80022da:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022e0:	a909      	add	r1, sp, #36	; 0x24
 80022e2:	4630      	mov	r0, r6
 80022e4:	f008 fc00 	bl	800aae8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80022e8:	f640 0304 	movw	r3, #2052	; 0x804
 80022ec:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022f4:	a909      	add	r1, sp, #36	; 0x24
 80022f6:	4650      	mov	r0, sl
 80022f8:	f008 fbf6 	bl	800aae8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 80022fc:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8002300:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002306:	f04f 0a03 	mov.w	sl, #3
 800230a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800230e:	a909      	add	r1, sp, #36	; 0x24
 8002310:	4640      	mov	r0, r8
 8002312:	f008 fbe9 	bl	800aae8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8002316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8002324:	a909      	add	r1, sp, #36	; 0x24
 8002326:	4630      	mov	r0, r6
 8002328:	f008 fbde 	bl	800aae8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 800232c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002330:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002332:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002338:	a909      	add	r1, sp, #36	; 0x24
 800233a:	481b      	ldr	r0, [pc, #108]	; (80023a8 <MX_GPIO_Init+0x1f8>)
 800233c:	f008 fbd4 	bl	800aae8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002340:	2604      	movs	r6, #4
 8002342:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002344:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002348:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800234a:	a909      	add	r1, sp, #36	; 0x24
 800234c:	4640      	mov	r0, r8
 800234e:	f008 fbcb 	bl	800aae8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002352:	2302      	movs	r3, #2
 8002354:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002356:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800235c:	a909      	add	r1, sp, #36	; 0x24
 800235e:	4638      	mov	r0, r7
 8002360:	f008 fbc2 	bl	800aae8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8002364:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002366:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002368:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 800236c:	a909      	add	r1, sp, #36	; 0x24
 800236e:	4638      	mov	r0, r7
 8002370:	f008 fbba 	bl	800aae8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002374:	4622      	mov	r2, r4
 8002376:	2105      	movs	r1, #5
 8002378:	2017      	movs	r0, #23
 800237a:	f007 fffd 	bl	800a378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800237e:	2017      	movs	r0, #23
 8002380:	f008 f830 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002384:	4622      	mov	r2, r4
 8002386:	2105      	movs	r1, #5
 8002388:	2028      	movs	r0, #40	; 0x28
 800238a:	f007 fff5 	bl	800a378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800238e:	2028      	movs	r0, #40	; 0x28
 8002390:	f008 f828 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
}
 8002394:	b00e      	add	sp, #56	; 0x38
 8002396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800239a:	bf00      	nop
 800239c:	58024400 	.word	0x58024400
 80023a0:	58022000 	.word	0x58022000
 80023a4:	58020000 	.word	0x58020000
 80023a8:	58020800 	.word	0x58020800
 80023ac:	58021800 	.word	0x58021800
 80023b0:	58021c00 	.word	0x58021c00

080023b4 <MX_DMA2D_Init>:
{
 80023b4:	b510      	push	{r4, lr}
  hdma2d.Instance = DMA2D;
 80023b6:	4c0b      	ldr	r4, [pc, #44]	; (80023e4 <MX_DMA2D_Init+0x30>)
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_DMA2D_Init+0x34>)
 80023ba:	6023      	str	r3, [r4, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80023bc:	2300      	movs	r3, #0
 80023be:	6063      	str	r3, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80023c0:	2202      	movs	r2, #2
 80023c2:	60a2      	str	r2, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 80023c4:	60e3      	str	r3, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80023c6:	6463      	str	r3, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80023c8:	64a2      	str	r2, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80023ca:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80023cc:	6523      	str	r3, [r4, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80023ce:	6563      	str	r3, [r4, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80023d0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80023d2:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80023d4:	4620      	mov	r0, r4
 80023d6:	f008 fa23 	bl	800a820 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80023da:	2101      	movs	r1, #1
 80023dc:	4620      	mov	r0, r4
 80023de:	f008 fb01 	bl	800a9e4 <HAL_DMA2D_ConfigLayer>
}
 80023e2:	bd10      	pop	{r4, pc}
 80023e4:	24004490 	.word	0x24004490
 80023e8:	52001000 	.word	0x52001000

080023ec <MX_LTDC_Init>:
{
 80023ec:	b530      	push	{r4, r5, lr}
 80023ee:	b08f      	sub	sp, #60	; 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80023f0:	2234      	movs	r2, #52	; 0x34
 80023f2:	2100      	movs	r1, #0
 80023f4:	a801      	add	r0, sp, #4
 80023f6:	f020 fe83 	bl	8023100 <memset>
  hltdc.Instance = LTDC;
 80023fa:	4c23      	ldr	r4, [pc, #140]	; (8002488 <MX_LTDC_Init+0x9c>)
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <MX_LTDC_Init+0xa0>)
 80023fe:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002400:	2500      	movs	r5, #0
 8002402:	6065      	str	r5, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002404:	60a5      	str	r5, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002406:	60e5      	str	r5, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002408:	6125      	str	r5, [r4, #16]
  hltdc.Init.HorizontalSync = 40;
 800240a:	2328      	movs	r3, #40	; 0x28
 800240c:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 800240e:	2309      	movs	r3, #9
 8002410:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8002412:	232a      	movs	r3, #42	; 0x2a
 8002414:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002416:	230b      	movs	r3, #11
 8002418:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 800241a:	f240 230a 	movw	r3, #522	; 0x20a
 800241e:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002420:	f240 131b 	movw	r3, #283	; 0x11b
 8002424:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8002426:	f240 232a 	movw	r3, #554	; 0x22a
 800242a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800242c:	f240 131d 	movw	r3, #285	; 0x11d
 8002430:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002432:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002436:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800243a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800243e:	4620      	mov	r0, r4
 8002440:	f009 fa50 	bl	800b8e4 <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 8002444:	9501      	str	r5, [sp, #4]
  pLayerCfg.WindowX1 = 480;
 8002446:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800244a:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 800244c:	9503      	str	r5, [sp, #12]
  pLayerCfg.WindowY1 = 272;
 800244e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002452:	9204      	str	r2, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002454:	2301      	movs	r3, #1
 8002456:	9305      	str	r3, [sp, #20]
  pLayerCfg.Alpha = 255;
 8002458:	23ff      	movs	r3, #255	; 0xff
 800245a:	9306      	str	r3, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 800245c:	9507      	str	r5, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800245e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002462:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002464:	2005      	movs	r0, #5
 8002466:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002468:	950a      	str	r5, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800246a:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800246c:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 800246e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002472:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002476:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800247a:	462a      	mov	r2, r5
 800247c:	a901      	add	r1, sp, #4
 800247e:	4620      	mov	r0, r4
 8002480:	f009 fb19 	bl	800bab6 <HAL_LTDC_ConfigLayer>
}
 8002484:	b00f      	add	sp, #60	; 0x3c
 8002486:	bd30      	pop	{r4, r5, pc}
 8002488:	24004544 	.word	0x24004544
 800248c:	50001000 	.word	0x50001000

08002490 <MX_I2C4_Init>:
{
 8002490:	b538      	push	{r3, r4, r5, lr}
  hi2c4.Instance = I2C4;
 8002492:	4c0d      	ldr	r4, [pc, #52]	; (80024c8 <MX_I2C4_Init+0x38>)
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <MX_I2C4_Init+0x3c>)
 8002496:	6023      	str	r3, [r4, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <MX_I2C4_Init+0x40>)
 800249a:	6063      	str	r3, [r4, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800249c:	2500      	movs	r5, #0
 800249e:	60a5      	str	r5, [r4, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a0:	2301      	movs	r3, #1
 80024a2:	60e3      	str	r3, [r4, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a4:	6125      	str	r5, [r4, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80024a6:	6165      	str	r5, [r4, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024a8:	61a5      	str	r5, [r4, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024aa:	61e5      	str	r5, [r4, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024ac:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80024ae:	4620      	mov	r0, r4
 80024b0:	f008 feb8 	bl	800b224 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80024b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024b8:	4620      	mov	r0, r4
 80024ba:	f009 f8dc 	bl	800b676 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80024be:	4629      	mov	r1, r5
 80024c0:	4620      	mov	r0, r4
 80024c2:	f009 f906 	bl	800b6d2 <HAL_I2CEx_ConfigDigitalFilter>
}
 80024c6:	bd38      	pop	{r3, r4, r5, pc}
 80024c8:	240044f8 	.word	0x240044f8
 80024cc:	58001c00 	.word	0x58001c00
 80024d0:	30808bd0 	.word	0x30808bd0

080024d4 <MX_OCTOSPI1_Init>:
{
 80024d4:	b530      	push	{r4, r5, lr}
 80024d6:	b083      	sub	sp, #12
  hospi1.Instance = OCTOSPI1;
 80024d8:	4814      	ldr	r0, [pc, #80]	; (800252c <MX_OCTOSPI1_Init+0x58>)
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <MX_OCTOSPI1_Init+0x5c>)
 80024dc:	6003      	str	r3, [r0, #0]
  hospi1.Init.FifoThreshold = 1;
 80024de:	2501      	movs	r5, #1
 80024e0:	6045      	str	r5, [r0, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80024e2:	2400      	movs	r4, #0
 80024e4:	6084      	str	r4, [r0, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80024e6:	60c4      	str	r4, [r0, #12]
  hospi1.Init.DeviceSize = 26;
 80024e8:	231a      	movs	r3, #26
 80024ea:	6103      	str	r3, [r0, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80024ec:	2302      	movs	r3, #2
 80024ee:	6143      	str	r3, [r0, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80024f0:	6184      	str	r4, [r0, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80024f2:	61c4      	str	r4, [r0, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80024f4:	6204      	str	r4, [r0, #32]
  hospi1.Init.ClockPrescaler = 3;
 80024f6:	2303      	movs	r3, #3
 80024f8:	6243      	str	r3, [r0, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80024fa:	6284      	str	r4, [r0, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80024fc:	62c4      	str	r4, [r0, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80024fe:	6304      	str	r4, [r0, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002500:	2308      	movs	r3, #8
 8002502:	6343      	str	r3, [r0, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8002504:	6384      	str	r4, [r0, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8002506:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002508:	f009 ff88 	bl	800c41c <HAL_OSPI_Init>
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 800250c:	f88d 5004 	strb.w	r5, [sp, #4]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8002510:	f88d 5005 	strb.w	r5, [sp, #5]
  BSP_OSPI_NOR_DeInit(0);
 8002514:	4620      	mov	r0, r4
 8002516:	f007 fc81 	bl	8009e1c <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 800251a:	a901      	add	r1, sp, #4
 800251c:	4620      	mov	r0, r4
 800251e:	f007 fcf7 	bl	8009f10 <BSP_OSPI_NOR_Init>
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8002522:	4620      	mov	r0, r4
 8002524:	f007 fc22 	bl	8009d6c <BSP_OSPI_NOR_EnableMemoryMappedMode>
}
 8002528:	b003      	add	sp, #12
 800252a:	bd30      	pop	{r4, r5, pc}
 800252c:	240045ec 	.word	0x240045ec
 8002530:	52005000 	.word	0x52005000

08002534 <MX_SPI2_Init>:
{
 8002534:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8002536:	4812      	ldr	r0, [pc, #72]	; (8002580 <MX_SPI2_Init+0x4c>)
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <MX_SPI2_Init+0x50>)
 800253a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800253c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002540:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002542:	2300      	movs	r3, #0
 8002544:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002546:	220f      	movs	r2, #15
 8002548:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800254a:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800254c:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800254e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002552:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002554:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002558:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800255a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800255c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800255e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002560:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002562:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002566:	6342      	str	r2, [r0, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002568:	6383      	str	r3, [r0, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800256a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800256c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800256e:	6443      	str	r3, [r0, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002570:	6483      	str	r3, [r0, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002572:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002574:	6503      	str	r3, [r0, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002576:	6543      	str	r3, [r0, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002578:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800257a:	f00b fccb 	bl	800df14 <HAL_SPI_Init>
}
 800257e:	bd08      	pop	{r3, pc}
 8002580:	24004648 	.word	0x24004648
 8002584:	40003800 	.word	0x40003800

08002588 <SystemClock_Config>:
{
 8002588:	b510      	push	{r4, lr}
 800258a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800258c:	224c      	movs	r2, #76	; 0x4c
 800258e:	2100      	movs	r1, #0
 8002590:	a809      	add	r0, sp, #36	; 0x24
 8002592:	f020 fdb5 	bl	8023100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002596:	2220      	movs	r2, #32
 8002598:	2100      	movs	r1, #0
 800259a:	a801      	add	r0, sp, #4
 800259c:	f020 fdb0 	bl	8023100 <memset>
  RCC->CKGAENR = 0xFFFFFFFF;
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <SystemClock_Config+0xa8>)
 80025a2:	f04f 32ff 	mov.w	r2, #4294967295
 80025a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80025aa:	2004      	movs	r0, #4
 80025ac:	f009 ffba 	bl	800c524 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025b0:	2300      	movs	r3, #0
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <SystemClock_Config+0xac>)
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80025bc:	619a      	str	r2, [r3, #24]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <SystemClock_Config+0xac>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80025d0:	d0fa      	beq.n	80025c8 <SystemClock_Config+0x40>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <SystemClock_Config+0xa8>)
 80025d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	f043 0302 	orr.w	r3, r3, #2
 80025de:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025e0:	2301      	movs	r3, #1
 80025e2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ea:	2302      	movs	r3, #2
 80025ec:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ee:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80025f0:	220c      	movs	r2, #12
 80025f2:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 80025f4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80025f8:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80025fa:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025fc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025fe:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002600:	2304      	movs	r3, #4
 8002602:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002604:	2400      	movs	r4, #0
 8002606:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002608:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800260a:	a809      	add	r0, sp, #36	; 0x24
 800260c:	f009 ffd4 	bl	800c5b8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002610:	233f      	movs	r3, #63	; 0x3f
 8002612:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002614:	2103      	movs	r1, #3
 8002616:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002618:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800261a:	2308      	movs	r3, #8
 800261c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800261e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002620:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002622:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002624:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002626:	a801      	add	r0, sp, #4
 8002628:	f00a fbd2 	bl	800cdd0 <HAL_RCC_ClockConfig>
}
 800262c:	b01c      	add	sp, #112	; 0x70
 800262e:	bd10      	pop	{r4, pc}
 8002630:	58024400 	.word	0x58024400
 8002634:	58024800 	.word	0x58024800

08002638 <main>:
{
 8002638:	b508      	push	{r3, lr}
  MPU_Config();
 800263a:	f7ff fd59 	bl	80020f0 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800263e:	4b3f      	ldr	r3, [pc, #252]	; (800273c <main+0x104>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002646:	d113      	bne.n	8002670 <main+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8002648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800264c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <main+0x104>)
 8002652:	2200      	movs	r2, #0
 8002654:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002658:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800265c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002666:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002668:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800266c:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002670:	4b32      	ldr	r3, [pc, #200]	; (800273c <main+0x104>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002678:	d127      	bne.n	80026ca <main+0x92>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <main+0x104>)
 800267c:	2200      	movs	r2, #0
 800267e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002682:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002686:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800268a:	f3c4 304e 	ubfx	r0, r4, #13, #15
 800268e:	e000      	b.n	8002692 <main+0x5a>
    } while(sets-- != 0U);
 8002690:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002692:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002696:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800269a:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 800269e:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80026a2:	4926      	ldr	r1, [pc, #152]	; (800273c <main+0x104>)
 80026a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80026a8:	4613      	mov	r3, r2
 80026aa:	3a01      	subs	r2, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f2      	bne.n	8002696 <main+0x5e>
    } while(sets-- != 0U);
 80026b0:	1e43      	subs	r3, r0, #1
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d1ec      	bne.n	8002690 <main+0x58>
 80026b6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80026ba:	694b      	ldr	r3, [r1, #20]
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	614b      	str	r3, [r1, #20]
 80026c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026c6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80026ca:	f007 fdef 	bl	800a2ac <HAL_Init>
  SystemClock_Config();
 80026ce:	f7ff ff5b 	bl	8002588 <SystemClock_Config>
  MX_CRC_Init();
 80026d2:	f7ff fd5b 	bl	800218c <MX_CRC_Init>
  MX_GPIO_Init();
 80026d6:	f7ff fd6b 	bl	80021b0 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80026da:	f7ff fe6b 	bl	80023b4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80026de:	f7ff fe85 	bl	80023ec <MX_LTDC_Init>
  MX_I2C4_Init();
 80026e2:	f7ff fed5 	bl	8002490 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 80026e6:	f7ff fef5 	bl	80024d4 <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 80026ea:	f7ff ff23 	bl	8002534 <MX_SPI2_Init>
  MX_TouchGFX_Init();
 80026ee:	f7fd fe91 	bl	8000414 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80026f2:	f7fd fe8e 	bl	8000412 <MX_TouchGFX_PreOSInit>
  wifi_initialise();
 80026f6:	f000 fead 	bl	8003454 <wifi_initialise>
  osKernelInitialize();
 80026fa:	f00c fc9d 	bl	800f038 <osKernelInitialize>
  GUI_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &GUI_Queue_attributes);
 80026fe:	4a10      	ldr	r2, [pc, #64]	; (8002740 <main+0x108>)
 8002700:	2101      	movs	r1, #1
 8002702:	200a      	movs	r0, #10
 8002704:	f00c fde3 	bl	800f2ce <osMessageQueueNew>
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <main+0x10c>)
 800270a:	6018      	str	r0, [r3, #0]
  WiFi_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &WiFi_Queue_attributes);
 800270c:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <main+0x110>)
 800270e:	2101      	movs	r1, #1
 8002710:	200a      	movs	r0, #10
 8002712:	f00c fddc 	bl	800f2ce <osMessageQueueNew>
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <main+0x114>)
 8002718:	6018      	str	r0, [r3, #0]
  WiFi_TaskHandle = osThreadNew(esWiFi_Task, NULL, &WiFi_Task_attributes);
 800271a:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <main+0x118>)
 800271c:	2100      	movs	r1, #0
 800271e:	480d      	ldr	r0, [pc, #52]	; (8002754 <main+0x11c>)
 8002720:	f00c fcb8 	bl	800f094 <osThreadNew>
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <main+0x120>)
 8002726:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8002728:	4a0c      	ldr	r2, [pc, #48]	; (800275c <main+0x124>)
 800272a:	2100      	movs	r1, #0
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <main+0x128>)
 800272e:	f00c fcb1 	bl	800f094 <osThreadNew>
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <main+0x12c>)
 8002734:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002736:	f00c fc91 	bl	800f05c <osKernelStart>
  while (1)
 800273a:	e7fe      	b.n	800273a <main+0x102>
 800273c:	e000ed00 	.word	0xe000ed00
 8002740:	08024dac 	.word	0x08024dac
 8002744:	2400445c 	.word	0x2400445c
 8002748:	08024de8 	.word	0x08024de8
 800274c:	24004464 	.word	0x24004464
 8002750:	08024e00 	.word	0x08024e00
 8002754:	080034e9 	.word	0x080034e9
 8002758:	24004468 	.word	0x24004468
 800275c:	08024dc4 	.word	0x08024dc4
 8002760:	0800041d 	.word	0x0800041d
 8002764:	24004460 	.word	0x24004460

08002768 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800276a:	6802      	ldr	r2, [r0, #0]
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800276e:	429a      	cmp	r2, r3
 8002770:	d000      	beq.n	8002774 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002772:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002774:	f007 fdc8 	bl	800a308 <HAL_IncTick>
}
 8002778:	e7fb      	b.n	8002772 <HAL_TIM_PeriodElapsedCallback+0xa>
 800277a:	bf00      	nop
 800277c:	40001000 	.word	0x40001000

08002780 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002780:	4770      	bx	lr
	...

08002784 <wait_cmddata_rdy_rising_event>:
}



int32_t wait_cmddata_rdy_rising_event(int32_t timeout)
{
 8002784:	b538      	push	{r3, r4, r5, lr}
 8002786:	4605      	mov	r5, r0
#ifdef SEM_WAIT
    return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
    int32_t tickstart = HAL_GetTick();
 8002788:	f007 fdca 	bl	800a320 <HAL_GetTick>
 800278c:	4604      	mov	r4, r0
    while (cmddata_rdy_rising_event == 1)
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <wait_cmddata_rdy_rising_event+0x28>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d107      	bne.n	80027a6 <wait_cmddata_rdy_rising_event+0x22>
    {
        if ((HAL_GetTick() - tickstart) > timeout)
 8002796:	f007 fdc3 	bl	800a320 <HAL_GetTick>
 800279a:	1b00      	subs	r0, r0, r4
 800279c:	42a8      	cmp	r0, r5
 800279e:	d9f6      	bls.n	800278e <wait_cmddata_rdy_rising_event+0xa>
        {
            return -1;
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	e000      	b.n	80027a8 <wait_cmddata_rdy_rising_event+0x24>
        }
    }
    return 0;
 80027a6:	2000      	movs	r0, #0
#endif /* SEM_WAIT */
}
 80027a8:	bd38      	pop	{r3, r4, r5, pc}
 80027aa:	bf00      	nop
 80027ac:	24004d78 	.word	0x24004d78

080027b0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80027b0:	b530      	push	{r4, r5, lr}
 80027b2:	b083      	sub	sp, #12
 80027b4:	4604      	mov	r4, r0
    volatile        uint32_t ct = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	9301      	str	r3, [sp, #4]
    uint32_t        loop_per_us = 0;
    static uint32_t cycle_per_loop = 0;

    /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
    /* 10 cycle for STM32L4 */
    if (cycle_per_loop == 0)
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <SPI_WIFI_DelayUs+0x74>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b16b      	cbz	r3, 80027dc <SPI_WIFI_DelayUs+0x2c>
        {
            cycle_per_loop = 1;
        }
    }

    loop_per_us = SystemCoreClock / 1000000UL / cycle_per_loop;
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <SPI_WIFI_DelayUs+0x78>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4819      	ldr	r0, [pc, #100]	; (800282c <SPI_WIFI_DelayUs+0x7c>)
 80027c6:	fba0 2303 	umull	r2, r3, r0, r3
 80027ca:	0c9b      	lsrs	r3, r3, #18
 80027cc:	4a15      	ldr	r2, [pc, #84]	; (8002824 <SPI_WIFI_DelayUs+0x74>)
 80027ce:	6810      	ldr	r0, [r2, #0]
 80027d0:	fbb3 f3f0 	udiv	r3, r3, r0
    ct = n * loop_per_us;
 80027d4:	fb04 f303 	mul.w	r3, r4, r3
 80027d8:	9301      	str	r3, [sp, #4]
    while (ct)
 80027da:	e01d      	b.n	8002818 <SPI_WIFI_DelayUs+0x68>
        uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <SPI_WIFI_DelayUs+0x78>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a13      	ldr	r2, [pc, #76]	; (8002830 <SPI_WIFI_DelayUs+0x80>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	099b      	lsrs	r3, r3, #6
        ct = cycle_per_ms;
 80027e8:	9301      	str	r3, [sp, #4]
        tick = HAL_GetTick();
 80027ea:	f007 fd99 	bl	800a320 <HAL_GetTick>
 80027ee:	4605      	mov	r5, r0
        while (ct)
 80027f0:	e002      	b.n	80027f8 <SPI_WIFI_DelayUs+0x48>
            ct--;
 80027f2:	9b01      	ldr	r3, [sp, #4]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	9301      	str	r3, [sp, #4]
        while (ct)
 80027f8:	9b01      	ldr	r3, [sp, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f9      	bne.n	80027f2 <SPI_WIFI_DelayUs+0x42>
        cycle_per_loop = HAL_GetTick() - tick;
 80027fe:	f007 fd8f 	bl	800a320 <HAL_GetTick>
 8002802:	1b40      	subs	r0, r0, r5
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <SPI_WIFI_DelayUs+0x74>)
 8002806:	6018      	str	r0, [r3, #0]
        if (cycle_per_loop == 0)
 8002808:	2800      	cmp	r0, #0
 800280a:	d1d9      	bne.n	80027c0 <SPI_WIFI_DelayUs+0x10>
            cycle_per_loop = 1;
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	e7d6      	b.n	80027c0 <SPI_WIFI_DelayUs+0x10>
    {
        ct--;
 8002812:	9b01      	ldr	r3, [sp, #4]
 8002814:	3b01      	subs	r3, #1
 8002816:	9301      	str	r3, [sp, #4]
    while (ct)
 8002818:	9b01      	ldr	r3, [sp, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f9      	bne.n	8002812 <SPI_WIFI_DelayUs+0x62>
    }
    return;
}
 800281e:	b003      	add	sp, #12
 8002820:	bd30      	pop	{r4, r5, pc}
 8002822:	bf00      	nop
 8002824:	24004d7c 	.word	0x24004d7c
 8002828:	24000070 	.word	0x24000070
 800282c:	431bde83 	.word	0x431bde83
 8002830:	10624dd3 	.word	0x10624dd3

08002834 <wait_spi_rx_event>:
{
 8002834:	b538      	push	{r3, r4, r5, lr}
 8002836:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002838:	f007 fd72 	bl	800a320 <HAL_GetTick>
 800283c:	4604      	mov	r4, r0
    while (spi_rx_event == 1)
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <wait_spi_rx_event+0x28>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d107      	bne.n	8002856 <wait_spi_rx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002846:	f007 fd6b 	bl	800a320 <HAL_GetTick>
 800284a:	1b00      	subs	r0, r0, r4
 800284c:	42a8      	cmp	r0, r5
 800284e:	d9f6      	bls.n	800283e <wait_spi_rx_event+0xa>
            return -1;
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	e000      	b.n	8002858 <wait_spi_rx_event+0x24>
    return 0;
 8002856:	2000      	movs	r0, #0
}
 8002858:	bd38      	pop	{r3, r4, r5, pc}
 800285a:	bf00      	nop
 800285c:	24004d80 	.word	0x24004d80

08002860 <wait_spi_tx_event>:
{
 8002860:	b538      	push	{r3, r4, r5, lr}
 8002862:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002864:	f007 fd5c 	bl	800a320 <HAL_GetTick>
 8002868:	4604      	mov	r4, r0
    while (spi_tx_event == 1)
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <wait_spi_tx_event+0x28>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <wait_spi_tx_event+0x22>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002872:	f007 fd55 	bl	800a320 <HAL_GetTick>
 8002876:	1b00      	subs	r0, r0, r4
 8002878:	42a8      	cmp	r0, r5
 800287a:	d9f6      	bls.n	800286a <wait_spi_tx_event+0xa>
            return -1;
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	e000      	b.n	8002884 <wait_spi_tx_event+0x24>
    return 0;
 8002882:	2000      	movs	r0, #0
}
 8002884:	bd38      	pop	{r3, r4, r5, pc}
 8002886:	bf00      	nop
 8002888:	24004d84 	.word	0x24004d84

0800288c <SPI_WIFI_ResetModule>:
{
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	b082      	sub	sp, #8
    uint32_t tickstart = HAL_GetTick();
 8002890:	f007 fd46 	bl	800a320 <HAL_GetTick>
 8002894:	4606      	mov	r6, r0
    WIFI_RESET_MODULE();
 8002896:	4c38      	ldr	r4, [pc, #224]	; (8002978 <SPI_WIFI_ResetModule+0xec>)
 8002898:	2200      	movs	r2, #0
 800289a:	2102      	movs	r1, #2
 800289c:	4620      	mov	r0, r4
 800289e:	f008 fae2 	bl	800ae66 <HAL_GPIO_WritePin>
 80028a2:	200a      	movs	r0, #10
 80028a4:	f007 fd42 	bl	800a32c <HAL_Delay>
 80028a8:	2201      	movs	r2, #1
 80028aa:	2102      	movs	r1, #2
 80028ac:	4620      	mov	r0, r4
 80028ae:	f008 fada 	bl	800ae66 <HAL_GPIO_WritePin>
 80028b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028b6:	f007 fd39 	bl	800a32c <HAL_Delay>
    WIFI_ENABLE_NSS();
 80028ba:	2200      	movs	r2, #0
 80028bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028c0:	482e      	ldr	r0, [pc, #184]	; (800297c <SPI_WIFI_ResetModule+0xf0>)
 80028c2:	f008 fad0 	bl	800ae66 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 80028c6:	200a      	movs	r0, #10
 80028c8:	f7ff ff72 	bl	80027b0 <SPI_WIFI_DelayUs>
    uint8_t count = 0;
 80028cc:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80028ce:	2120      	movs	r1, #32
 80028d0:	4829      	ldr	r0, [pc, #164]	; (8002978 <SPI_WIFI_ResetModule+0xec>)
 80028d2:	f008 fac1 	bl	800ae58 <HAL_GPIO_ReadPin>
 80028d6:	2801      	cmp	r0, #1
 80028d8:	d11c      	bne.n	8002914 <SPI_WIFI_ResetModule+0x88>
        Status = HAL_SPI_Receive(&hspi2, &Prompt[count], 1, 0xFFFF);
 80028da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028de:	2201      	movs	r2, #1
 80028e0:	eb0d 0104 	add.w	r1, sp, r4
 80028e4:	4826      	ldr	r0, [pc, #152]	; (8002980 <SPI_WIFI_ResetModule+0xf4>)
 80028e6:	f00b fd69 	bl	800e3bc <HAL_SPI_Receive>
 80028ea:	4605      	mov	r5, r0
        count += 2;
 80028ec:	3402      	adds	r4, #2
 80028ee:	b2e4      	uxtb	r4, r4
        if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80028f0:	f007 fd16 	bl	800a320 <HAL_GetTick>
 80028f4:	1b83      	subs	r3, r0, r6
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fa:	d201      	bcs.n	8002900 <SPI_WIFI_ResetModule+0x74>
 80028fc:	2d00      	cmp	r5, #0
 80028fe:	d0e6      	beq.n	80028ce <SPI_WIFI_ResetModule+0x42>
            WIFI_DISABLE_NSS();
 8002900:	2201      	movs	r2, #1
 8002902:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002906:	481d      	ldr	r0, [pc, #116]	; (800297c <SPI_WIFI_ResetModule+0xf0>)
 8002908:	f008 faad 	bl	800ae66 <HAL_GPIO_WritePin>
            return -1;
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002910:	b002      	add	sp, #8
 8002912:	bd70      	pop	{r4, r5, r6, pc}
    WIFI_DISABLE_NSS();
 8002914:	2201      	movs	r2, #1
 8002916:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800291a:	4818      	ldr	r0, [pc, #96]	; (800297c <SPI_WIFI_ResetModule+0xf0>)
 800291c:	f008 faa3 	bl	800ae66 <HAL_GPIO_WritePin>
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002920:	f89d 3000 	ldrb.w	r3, [sp]
 8002924:	2b15      	cmp	r3, #21
 8002926:	d115      	bne.n	8002954 <SPI_WIFI_ResetModule+0xc8>
 8002928:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800292c:	2b15      	cmp	r3, #21
 800292e:	d114      	bne.n	800295a <SPI_WIFI_ResetModule+0xce>
 8002930:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002934:	2b0d      	cmp	r3, #13
 8002936:	d113      	bne.n	8002960 <SPI_WIFI_ResetModule+0xd4>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002938:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800293c:	2b0a      	cmp	r3, #10
 800293e:	d112      	bne.n	8002966 <SPI_WIFI_ResetModule+0xda>
            (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002940:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002944:	2b3e      	cmp	r3, #62	; 0x3e
 8002946:	d111      	bne.n	800296c <SPI_WIFI_ResetModule+0xe0>
 8002948:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800294c:	2b20      	cmp	r3, #32
 800294e:	d110      	bne.n	8002972 <SPI_WIFI_ResetModule+0xe6>
    return 0;
 8002950:	2000      	movs	r0, #0
 8002952:	e7dd      	b.n	8002910 <SPI_WIFI_ResetModule+0x84>
        return -1;
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	e7da      	b.n	8002910 <SPI_WIFI_ResetModule+0x84>
 800295a:	f04f 30ff 	mov.w	r0, #4294967295
 800295e:	e7d7      	b.n	8002910 <SPI_WIFI_ResetModule+0x84>
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	e7d4      	b.n	8002910 <SPI_WIFI_ResetModule+0x84>
 8002966:	f04f 30ff 	mov.w	r0, #4294967295
 800296a:	e7d1      	b.n	8002910 <SPI_WIFI_ResetModule+0x84>
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	e7ce      	b.n	8002910 <SPI_WIFI_ResetModule+0x84>
 8002972:	f04f 30ff 	mov.w	r0, #4294967295
 8002976:	e7cb      	b.n	8002910 <SPI_WIFI_ResetModule+0x84>
 8002978:	58022000 	.word	0x58022000
 800297c:	58020000 	.word	0x58020000
 8002980:	24004648 	.word	0x24004648

08002984 <SPI_WIFI_ReceiveData>:
{
 8002984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002986:	b083      	sub	sp, #12
 8002988:	4605      	mov	r5, r0
 800298a:	460e      	mov	r6, r1
 800298c:	4617      	mov	r7, r2
    WIFI_DISABLE_NSS();
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002994:	482b      	ldr	r0, [pc, #172]	; (8002a44 <SPI_WIFI_ReceiveData+0xc0>)
 8002996:	f008 fa66 	bl	800ae66 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 800299a:	200a      	movs	r0, #10
 800299c:	f7ff ff08 	bl	80027b0 <SPI_WIFI_DelayUs>
    if (wait_cmddata_rdy_rising_event(timeout) < 0)
 80029a0:	4638      	mov	r0, r7
 80029a2:	f7ff feef 	bl	8002784 <wait_cmddata_rdy_rising_event>
 80029a6:	2800      	cmp	r0, #0
 80029a8:	db48      	blt.n	8002a3c <SPI_WIFI_ReceiveData+0xb8>
    WIFI_ENABLE_NSS();
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029b0:	4824      	ldr	r0, [pc, #144]	; (8002a44 <SPI_WIFI_ReceiveData+0xc0>)
 80029b2:	f008 fa58 	bl	800ae66 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(30);
 80029b6:	201e      	movs	r0, #30
 80029b8:	f7ff fefa 	bl	80027b0 <SPI_WIFI_DelayUs>
    int16_t length = 0;
 80029bc:	2400      	movs	r4, #0
    while (WIFI_IS_CMDDATA_READY())
 80029be:	e016      	b.n	80029ee <SPI_WIFI_ReceiveData+0x6a>
            spi_rx_event = 1;
 80029c0:	2201      	movs	r2, #1
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <SPI_WIFI_ReceiveData+0xc4>)
 80029c4:	601a      	str	r2, [r3, #0]
            if (HAL_SPI_Receive_IT(&hspi2, tmp, 1) != HAL_OK)
 80029c6:	a901      	add	r1, sp, #4
 80029c8:	4820      	ldr	r0, [pc, #128]	; (8002a4c <SPI_WIFI_ReceiveData+0xc8>)
 80029ca:	f00b ffa3 	bl	800e914 <HAL_SPI_Receive_IT>
 80029ce:	bb08      	cbnz	r0, 8002a14 <SPI_WIFI_ReceiveData+0x90>
            wait_spi_rx_event(timeout);
 80029d0:	4638      	mov	r0, r7
 80029d2:	f7ff ff2f 	bl	8002834 <wait_spi_rx_event>
            pData[0] = tmp[0];
 80029d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80029da:	702b      	strb	r3, [r5, #0]
            pData[1] = tmp[1];
 80029dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80029e0:	706b      	strb	r3, [r5, #1]
            length += 2;
 80029e2:	3402      	adds	r4, #2
 80029e4:	b224      	sxth	r4, r4
            pData  += 2;
 80029e6:	3502      	adds	r5, #2
            if (length >= ES_WIFI_DATA_SIZE)
 80029e8:	f5b4 6faf 	cmp.w	r4, #1400	; 0x578
 80029ec:	da1b      	bge.n	8002a26 <SPI_WIFI_ReceiveData+0xa2>
    while (WIFI_IS_CMDDATA_READY())
 80029ee:	2120      	movs	r1, #32
 80029f0:	4817      	ldr	r0, [pc, #92]	; (8002a50 <SPI_WIFI_ReceiveData+0xcc>)
 80029f2:	f008 fa31 	bl	800ae58 <HAL_GPIO_ReadPin>
 80029f6:	2801      	cmp	r0, #1
 80029f8:	d103      	bne.n	8002a02 <SPI_WIFI_ReceiveData+0x7e>
        if ((length < len) || (!len))
 80029fa:	42b4      	cmp	r4, r6
 80029fc:	dbe0      	blt.n	80029c0 <SPI_WIFI_ReceiveData+0x3c>
 80029fe:	2e00      	cmp	r6, #0
 8002a00:	d0de      	beq.n	80029c0 <SPI_WIFI_ReceiveData+0x3c>
    WIFI_DISABLE_NSS();
 8002a02:	2201      	movs	r2, #1
 8002a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a08:	480e      	ldr	r0, [pc, #56]	; (8002a44 <SPI_WIFI_ReceiveData+0xc0>)
 8002a0a:	f008 fa2c 	bl	800ae66 <HAL_GPIO_WritePin>
}
 8002a0e:	4620      	mov	r0, r4
 8002a10:	b003      	add	sp, #12
 8002a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
                WIFI_DISABLE_NSS();
 8002a14:	2201      	movs	r2, #1
 8002a16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a1a:	480a      	ldr	r0, [pc, #40]	; (8002a44 <SPI_WIFI_ReceiveData+0xc0>)
 8002a1c:	f008 fa23 	bl	800ae66 <HAL_GPIO_WritePin>
                return ES_WIFI_ERROR_SPI_FAILED;
 8002a20:	f04f 34ff 	mov.w	r4, #4294967295
 8002a24:	e7f3      	b.n	8002a0e <SPI_WIFI_ReceiveData+0x8a>
                WIFI_DISABLE_NSS();
 8002a26:	2201      	movs	r2, #1
 8002a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a2c:	4805      	ldr	r0, [pc, #20]	; (8002a44 <SPI_WIFI_ReceiveData+0xc0>)
 8002a2e:	f008 fa1a 	bl	800ae66 <HAL_GPIO_WritePin>
                SPI_WIFI_ResetModule();
 8002a32:	f7ff ff2b 	bl	800288c <SPI_WIFI_ResetModule>
                return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002a36:	f06f 0403 	mvn.w	r4, #3
 8002a3a:	e7e8      	b.n	8002a0e <SPI_WIFI_ReceiveData+0x8a>
        return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002a3c:	f06f 0402 	mvn.w	r4, #2
 8002a40:	e7e5      	b.n	8002a0e <SPI_WIFI_ReceiveData+0x8a>
 8002a42:	bf00      	nop
 8002a44:	58020000 	.word	0x58020000
 8002a48:	24004d80 	.word	0x24004d80
 8002a4c:	24004648 	.word	0x24004648
 8002a50:	58022000 	.word	0x58022000

08002a54 <SPI_WIFI_DeInit>:
{
 8002a54:	b508      	push	{r3, lr}
    HAL_SPI_DeInit(&hspi2);
 8002a56:	4802      	ldr	r0, [pc, #8]	; (8002a60 <SPI_WIFI_DeInit+0xc>)
 8002a58:	f00b fb10 	bl	800e07c <HAL_SPI_DeInit>
}
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	bd08      	pop	{r3, pc}
 8002a60:	24004648 	.word	0x24004648

08002a64 <SPI_WIFI_MspInit>:
{
 8002a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a68:	b08b      	sub	sp, #44	; 0x2c
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ba4 <SPI_WIFI_MspInit+0x140>)
 8002a6c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a74:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8002a78:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8002a7c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a80:	9201      	str	r2, [sp, #4]
 8002a82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_SPI2_FORCE_RESET();
 8002a84:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_SPI2_RELEASE_RESET();
 8002a90:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002aa8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002aac:	f002 0201 	and.w	r2, r2, #1
 8002ab0:	9202      	str	r2, [sp, #8]
 8002ab2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ab8:	f042 0204 	orr.w	r2, r2, #4
 8002abc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002ac0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ac4:	f002 0204 	and.w	r2, r2, #4
 8002ac8:	9203      	str	r2, [sp, #12]
 8002aca:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002acc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002ad8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	9304      	str	r3, [sp, #16]
 8002ae2:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 8002ae4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002ba8 <SPI_WIFI_MspInit+0x144>
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2104      	movs	r1, #4
 8002aec:	4640      	mov	r0, r8
 8002aee:	f008 f9ba 	bl	800ae66 <HAL_GPIO_WritePin>
    GPIO_Init.Pin       = GPIO_PIN_2;
 8002af2:	f04f 0904 	mov.w	r9, #4
 8002af6:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002afa:	2501      	movs	r5, #1
 8002afc:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002afe:	2400      	movs	r4, #0
 8002b00:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b02:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b04:	a905      	add	r1, sp, #20
 8002b06:	4640      	mov	r0, r8
 8002b08:	f007 ffee 	bl	800aae8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_5;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002b10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b14:	9306      	str	r3, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b16:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b18:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b1a:	a905      	add	r1, sp, #20
 8002b1c:	4640      	mov	r0, r8
 8002b1e:	f007 ffe3 	bl	800aae8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_1;
 8002b22:	2702      	movs	r7, #2
 8002b24:	9705      	str	r7, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b26:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b28:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b2a:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b2c:	2605      	movs	r6, #5
 8002b2e:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_Init);
 8002b30:	a905      	add	r1, sp, #20
 8002b32:	4640      	mov	r0, r8
 8002b34:	f007 ffd8 	bl	800aae8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002b38:	f5a8 5800 	sub.w	r8, r8, #8192	; 0x2000
 8002b3c:	462a      	mov	r2, r5
 8002b3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b42:	4640      	mov	r0, r8
 8002b44:	f008 f98f 	bl	800ae66 <HAL_GPIO_WritePin>
    GPIO_Init.Pin       =  GPIO_PIN_11;
 8002b48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b4c:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b4e:	9506      	str	r5, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b50:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b52:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002b54:	a905      	add	r1, sp, #20
 8002b56:	4640      	mov	r0, r8
 8002b58:	f007 ffc6 	bl	800aae8 <HAL_GPIO_Init>
    GPIO_Init.Pin       =  GPIO_PIN_12;
 8002b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b60:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b62:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b64:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002b66:	9508      	str	r5, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b68:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8002b6a:	a905      	add	r1, sp, #20
 8002b6c:	4640      	mov	r0, r8
 8002b6e:	f007 ffbb 	bl	800aae8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_3;
 8002b72:	2308      	movs	r3, #8
 8002b74:	9305      	str	r3, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b76:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_NOPULL;
 8002b78:	9407      	str	r4, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b7a:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b7c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8002b7e:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 8002b82:	a905      	add	r1, sp, #20
 8002b84:	4640      	mov	r0, r8
 8002b86:	f007 ffaf 	bl	800aae8 <HAL_GPIO_Init>
    GPIO_Init.Pin       = GPIO_PIN_2;
 8002b8a:	f8cd 9014 	str.w	r9, [sp, #20]
    GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002b8e:	9706      	str	r7, [sp, #24]
    GPIO_Init.Pull      = GPIO_PULLUP;
 8002b90:	9507      	str	r5, [sp, #28]
    GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002b92:	9408      	str	r4, [sp, #32]
    GPIO_Init.Alternate = GPIO_AF5_SPI2;
 8002b94:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_Init);
 8002b96:	a905      	add	r1, sp, #20
 8002b98:	4640      	mov	r0, r8
 8002b9a:	f007 ffa5 	bl	800aae8 <HAL_GPIO_Init>
}
 8002b9e:	b00b      	add	sp, #44	; 0x2c
 8002ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	58022000 	.word	0x58022000

08002bac <SPI_WIFI_Init>:
{
 8002bac:	b510      	push	{r4, lr}
    if (mode == ES_WIFI_INIT)
 8002bae:	bb78      	cbnz	r0, 8002c10 <SPI_WIFI_Init+0x64>
        hspi2.Instance               = SPI2;
 8002bb0:	4c1a      	ldr	r4, [pc, #104]	; (8002c1c <SPI_WIFI_Init+0x70>)
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <SPI_WIFI_Init+0x74>)
 8002bb4:	6023      	str	r3, [r4, #0]
        SPI_WIFI_MspInit(&hspi2);
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f7ff ff54 	bl	8002a64 <SPI_WIFI_MspInit>
        hspi2.Init.Mode              = SPI_MODE_MASTER;
 8002bbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bc0:	6063      	str	r3, [r4, #4]
        hspi2.Init.Direction         = SPI_DIRECTION_2LINES;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60a3      	str	r3, [r4, #8]
        hspi2.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	60e2      	str	r2, [r4, #12]
        hspi2.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002bca:	6123      	str	r3, [r4, #16]
        hspi2.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002bcc:	6163      	str	r3, [r4, #20]
        hspi2.Init.NSS               = SPI_NSS_SOFT;
 8002bce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bd2:	61a2      	str	r2, [r4, #24]
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; /* 280/16 = 17.5MHz (Inventek WIFI module supports up to 20MHz)*/
 8002bd4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002bd8:	61e2      	str	r2, [r4, #28]
        hspi2.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002bda:	6223      	str	r3, [r4, #32]
        hspi2.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002bdc:	6263      	str	r3, [r4, #36]	; 0x24
        hspi2.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002bde:	62a3      	str	r3, [r4, #40]	; 0x28
        hspi2.Init.CRCPolynomial     = 0;
 8002be0:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002be2:	4620      	mov	r0, r4
 8002be4:	f00b f996 	bl	800df14 <HAL_SPI_Init>
 8002be8:	b9a8      	cbnz	r0, 8002c16 <SPI_WIFI_Init+0x6a>
        HAL_NVIC_SetPriority((IRQn_Type)DATA_READY_IRQ, SPI_INTERFACE_PRIO, 0x00);
 8002bea:	2200      	movs	r2, #0
 8002bec:	4611      	mov	r1, r2
 8002bee:	2017      	movs	r0, #23
 8002bf0:	f007 fbc2 	bl	800a378 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)DATA_READY_IRQ);
 8002bf4:	2017      	movs	r0, #23
 8002bf6:	f007 fbf5 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority((IRQn_Type)SPI2_IRQn, SPI_INTERFACE_PRIO, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	2024      	movs	r0, #36	; 0x24
 8002c00:	f007 fbba 	bl	800a378 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)SPI2_IRQn);
 8002c04:	2024      	movs	r0, #36	; 0x24
 8002c06:	f007 fbed 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
        SPI_WIFI_DelayUs(10);
 8002c0a:	200a      	movs	r0, #10
 8002c0c:	f7ff fdd0 	bl	80027b0 <SPI_WIFI_DelayUs>
    rc = SPI_WIFI_ResetModule();
 8002c10:	f7ff fe3c 	bl	800288c <SPI_WIFI_ResetModule>
}
 8002c14:	bd10      	pop	{r4, pc}
            return -1;
 8002c16:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1a:	e7fb      	b.n	8002c14 <SPI_WIFI_Init+0x68>
 8002c1c:	24004648 	.word	0x24004648
 8002c20:	40003800 	.word	0x40003800

08002c24 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_rx_event)
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_SPI_RxCpltCallback+0x10>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b113      	cbz	r3, 8002c30 <HAL_SPI_RxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_rx_sem);
        spi_rx_event = 0;
 8002c2a:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <HAL_SPI_RxCpltCallback+0x10>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
    }
}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	24004d80 	.word	0x24004d80

08002c38 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (spi_tx_event)
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_SPI_TxCpltCallback+0x10>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b113      	cbz	r3, 8002c44 <HAL_SPI_TxCpltCallback+0xc>
    {
        SEM_SIGNAL(spi_tx_sem);
        spi_tx_event = 0;
 8002c3e:	4b02      	ldr	r3, [pc, #8]	; (8002c48 <HAL_SPI_TxCpltCallback+0x10>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
    }
}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	24004d84 	.word	0x24004d84

08002c4c <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
    if (cmddata_rdy_rising_event == 1)
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <SPI_WIFI_ISR+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d000      	beq.n	8002c56 <SPI_WIFI_ISR+0xa>
    {
        SEM_SIGNAL(cmddata_rdy_rising_sem);
        cmddata_rdy_rising_event = 0;
    }
}
 8002c54:	4770      	bx	lr
        cmddata_rdy_rising_event = 0;
 8002c56:	4b02      	ldr	r3, [pc, #8]	; (8002c60 <SPI_WIFI_ISR+0x14>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
}
 8002c5c:	e7fa      	b.n	8002c54 <SPI_WIFI_ISR+0x8>
 8002c5e:	bf00      	nop
 8002c60:	24004d78 	.word	0x24004d78

08002c64 <wait_cmddata_rdy_high>:
{
 8002c64:	b538      	push	{r3, r4, r5, lr}
 8002c66:	4605      	mov	r5, r0
    int32_t tickstart = HAL_GetTick();
 8002c68:	f007 fb5a 	bl	800a320 <HAL_GetTick>
 8002c6c:	4604      	mov	r4, r0
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002c6e:	e001      	b.n	8002c74 <wait_cmddata_rdy_high+0x10>
        SPI_WIFI_ISR();
 8002c70:	f7ff ffec 	bl	8002c4c <SPI_WIFI_ISR>
    while (WIFI_IS_CMDDATA_READY() == 0)
 8002c74:	2120      	movs	r1, #32
 8002c76:	4807      	ldr	r0, [pc, #28]	; (8002c94 <wait_cmddata_rdy_high+0x30>)
 8002c78:	f008 f8ee 	bl	800ae58 <HAL_GPIO_ReadPin>
 8002c7c:	2801      	cmp	r0, #1
 8002c7e:	d007      	beq.n	8002c90 <wait_cmddata_rdy_high+0x2c>
        if ((HAL_GetTick() - tickstart) > timeout)
 8002c80:	f007 fb4e 	bl	800a320 <HAL_GetTick>
 8002c84:	1b00      	subs	r0, r0, r4
 8002c86:	42a8      	cmp	r0, r5
 8002c88:	d9f2      	bls.n	8002c70 <wait_cmddata_rdy_high+0xc>
            return -1;
 8002c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8e:	e000      	b.n	8002c92 <wait_cmddata_rdy_high+0x2e>
    return 0;
 8002c90:	2000      	movs	r0, #0
}
 8002c92:	bd38      	pop	{r3, r4, r5, pc}
 8002c94:	58022000 	.word	0x58022000

08002c98 <SPI_WIFI_SendData>:
{
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	4606      	mov	r6, r0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	4615      	mov	r5, r2
    if (wait_cmddata_rdy_high(timeout) < 0)
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f7ff ffde 	bl	8002c64 <wait_cmddata_rdy_high>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	db47      	blt.n	8002d3c <SPI_WIFI_SendData+0xa4>
    cmddata_rdy_rising_event = 1;
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <SPI_WIFI_SendData+0xac>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
    WIFI_ENABLE_NSS();
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cb8:	4823      	ldr	r0, [pc, #140]	; (8002d48 <SPI_WIFI_SendData+0xb0>)
 8002cba:	f008 f8d4 	bl	800ae66 <HAL_GPIO_WritePin>
    SPI_WIFI_DelayUs(10);
 8002cbe:	200a      	movs	r0, #10
 8002cc0:	f7ff fd76 	bl	80027b0 <SPI_WIFI_DelayUs>
    if (len > 1)
 8002cc4:	2c01      	cmp	r4, #1
 8002cc6:	d805      	bhi.n	8002cd4 <SPI_WIFI_SendData+0x3c>
    if (len & 1)
 8002cc8:	f014 0f01 	tst.w	r4, #1
 8002ccc:	d119      	bne.n	8002d02 <SPI_WIFI_SendData+0x6a>
    return len;
 8002cce:	b220      	sxth	r0, r4
}
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
        spi_tx_event = 1;
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <SPI_WIFI_SendData+0xb4>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)pdata, len / 2) != HAL_OK)
 8002cda:	fa24 f202 	lsr.w	r2, r4, r2
 8002cde:	4631      	mov	r1, r6
 8002ce0:	481b      	ldr	r0, [pc, #108]	; (8002d50 <SPI_WIFI_SendData+0xb8>)
 8002ce2:	f00b fc8d 	bl	800e600 <HAL_SPI_Transmit_IT>
 8002ce6:	b918      	cbnz	r0, 8002cf0 <SPI_WIFI_SendData+0x58>
        wait_spi_tx_event(timeout);
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f7ff fdb9 	bl	8002860 <wait_spi_tx_event>
 8002cee:	e7eb      	b.n	8002cc8 <SPI_WIFI_SendData+0x30>
            WIFI_DISABLE_NSS();
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cf6:	4814      	ldr	r0, [pc, #80]	; (8002d48 <SPI_WIFI_SendData+0xb0>)
 8002cf8:	f008 f8b5 	bl	800ae66 <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	e7e6      	b.n	8002cd0 <SPI_WIFI_SendData+0x38>
        Padding[0] = pdata[len - 1];
 8002d02:	1930      	adds	r0, r6, r4
 8002d04:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8002d08:	f88d 3004 	strb.w	r3, [sp, #4]
        Padding[1] = '\n';
 8002d0c:	230a      	movs	r3, #10
 8002d0e:	f88d 3005 	strb.w	r3, [sp, #5]
        spi_tx_event = 1;
 8002d12:	2201      	movs	r2, #1
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <SPI_WIFI_SendData+0xb4>)
 8002d16:	601a      	str	r2, [r3, #0]
        if (HAL_SPI_Transmit_IT(&hspi2, Padding, 1) != HAL_OK)
 8002d18:	a901      	add	r1, sp, #4
 8002d1a:	480d      	ldr	r0, [pc, #52]	; (8002d50 <SPI_WIFI_SendData+0xb8>)
 8002d1c:	f00b fc70 	bl	800e600 <HAL_SPI_Transmit_IT>
 8002d20:	b918      	cbnz	r0, 8002d2a <SPI_WIFI_SendData+0x92>
        wait_spi_tx_event(timeout);
 8002d22:	4628      	mov	r0, r5
 8002d24:	f7ff fd9c 	bl	8002860 <wait_spi_tx_event>
 8002d28:	e7d1      	b.n	8002cce <SPI_WIFI_SendData+0x36>
            WIFI_DISABLE_NSS();
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d30:	4805      	ldr	r0, [pc, #20]	; (8002d48 <SPI_WIFI_SendData+0xb0>)
 8002d32:	f008 f898 	bl	800ae66 <HAL_GPIO_WritePin>
            return ES_WIFI_ERROR_SPI_FAILED;
 8002d36:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3a:	e7c9      	b.n	8002cd0 <SPI_WIFI_SendData+0x38>
        return ES_WIFI_ERROR_SPI_FAILED;
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	e7c6      	b.n	8002cd0 <SPI_WIFI_SendData+0x38>
 8002d42:	bf00      	nop
 8002d44:	24004d78 	.word	0x24004d78
 8002d48:	58020000 	.word	0x58020000
 8002d4c:	24004d84 	.word	0x24004d84
 8002d50:	24004648 	.word	0x24004648

08002d54 <wifi_probe>:
  * @brief  probe function to register wifi to connectivity framwotk
  * @param  None
  * @retval None
  */
int32_t wifi_probe(void **ll_drv_context)
{
 8002d54:	b510      	push	{r4, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	4604      	mov	r4, r0
    if (ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <wifi_probe+0x2c>)
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <wifi_probe+0x30>)
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <wifi_probe+0x34>)
 8002d64:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <wifi_probe+0x38>)
 8002d66:	490a      	ldr	r1, [pc, #40]	; (8002d90 <wifi_probe+0x3c>)
 8002d68:	480a      	ldr	r0, [pc, #40]	; (8002d94 <wifi_probe+0x40>)
 8002d6a:	f004 fed5 	bl	8007b18 <ES_WIFI_RegisterBusIO>
 8002d6e:	b918      	cbnz	r0, 8002d78 <wifi_probe+0x24>
                              SPI_WIFI_DeInit,
                              HAL_Delay,
                              SPI_WIFI_SendData,
                              SPI_WIFI_ReceiveData) == 0)
    {
        *ll_drv_context = &EsWifiObj;
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <wifi_probe+0x40>)
 8002d72:	6023      	str	r3, [r4, #0]
        return 0;
    }
    return -1;
}
 8002d74:	b002      	add	sp, #8
 8002d76:	bd10      	pop	{r4, pc}
    return -1;
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	e7fa      	b.n	8002d74 <wifi_probe+0x20>
 8002d7e:	bf00      	nop
 8002d80:	08002985 	.word	0x08002985
 8002d84:	08002c99 	.word	0x08002c99
 8002d88:	0800a32d 	.word	0x0800a32d
 8002d8c:	08002a55 	.word	0x08002a55
 8002d90:	08002bad 	.word	0x08002bad
 8002d94:	240046d0 	.word	0x240046d0

08002d98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_5)
 8002d98:	2820      	cmp	r0, #32
 8002d9a:	d000      	beq.n	8002d9e <HAL_GPIO_EXTI_Callback+0x6>
  {
    cmddata_rdy_rising_event = 0;
  }
}
 8002d9c:	4770      	bx	lr
    cmddata_rdy_rising_event = 0;
 8002d9e:	4b02      	ldr	r3, [pc, #8]	; (8002da8 <HAL_GPIO_EXTI_Callback+0x10>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
}
 8002da4:	e7fa      	b.n	8002d9c <HAL_GPIO_EXTI_Callback+0x4>
 8002da6:	bf00      	nop
 8002da8:	24004d78 	.word	0x24004d78

08002dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dac:	b500      	push	{lr}
 8002dae:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db0:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_MspInit+0x30>)
 8002db2:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8002db6:	f042 0202 	orr.w	r2, r2, #2
 8002dba:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8002dbe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	210f      	movs	r1, #15
 8002dce:	f06f 0001 	mvn.w	r0, #1
 8002dd2:	f007 fad1 	bl	800a378 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd6:	b003      	add	sp, #12
 8002dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ddc:	58024400 	.word	0x58024400

08002de0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002de0:	6802      	ldr	r2, [r0, #0]
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_CRC_MspInit+0x2c>)
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d000      	beq.n	8002dea <HAL_CRC_MspInit+0xa>
 8002de8:	4770      	bx	lr
{
 8002dea:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_CRC_MspInit+0x30>)
 8002dee:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 8002df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8002dfa:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e06:	b002      	add	sp, #8
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40023000 	.word	0x40023000
 8002e10:	58024400 	.word	0x58024400

08002e14 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8002e14:	6802      	ldr	r2, [r0, #0]
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <HAL_DMA2D_MspInit+0x40>)
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d000      	beq.n	8002e1e <HAL_DMA2D_MspInit+0xa>
 8002e1c:	4770      	bx	lr
{
 8002e1e:	b500      	push	{lr}
 8002e20:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_DMA2D_MspInit+0x44>)
 8002e24:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8002e28:	f042 0210 	orr.w	r2, r2, #16
 8002e2c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8002e30:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	9b01      	ldr	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2105      	movs	r1, #5
 8002e40:	205a      	movs	r0, #90	; 0x5a
 8002e42:	f007 fa99 	bl	800a378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002e46:	205a      	movs	r0, #90	; 0x5a
 8002e48:	f007 facc 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002e4c:	b003      	add	sp, #12
 8002e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e52:	bf00      	nop
 8002e54:	52001000 	.word	0x52001000
 8002e58:	58024400 	.word	0x58024400

08002e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	b0b6      	sub	sp, #216	; 0xd8
 8002e60:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e62:	2100      	movs	r1, #0
 8002e64:	9131      	str	r1, [sp, #196]	; 0xc4
 8002e66:	9132      	str	r1, [sp, #200]	; 0xc8
 8002e68:	9133      	str	r1, [sp, #204]	; 0xcc
 8002e6a:	9134      	str	r1, [sp, #208]	; 0xd0
 8002e6c:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e6e:	22b8      	movs	r2, #184	; 0xb8
 8002e70:	a803      	add	r0, sp, #12
 8002e72:	f020 f945 	bl	8023100 <memset>
  if(hi2c->Instance==I2C4)
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_I2C_MspInit+0x8c>)
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002e7e:	b036      	add	sp, #216	; 0xd8
 8002e80:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002e82:	2310      	movs	r3, #16
 8002e84:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e86:	a803      	add	r0, sp, #12
 8002e88:	f00a fa68 	bl	800d35c <HAL_RCCEx_PeriphCLKConfig>
 8002e8c:	bb40      	cbnz	r0, 8002ee0 <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e8e:	4c17      	ldr	r4, [pc, #92]	; (8002eec <HAL_I2C_MspInit+0x90>)
 8002e90:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002e9c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8002ea8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002eac:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eae:	2312      	movs	r3, #18
 8002eb0:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002eba:	2304      	movs	r3, #4
 8002ebc:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ebe:	a931      	add	r1, sp, #196	; 0xc4
 8002ec0:	480b      	ldr	r0, [pc, #44]	; (8002ef0 <HAL_I2C_MspInit+0x94>)
 8002ec2:	f007 fe11 	bl	800aae8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002ec6:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ece:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 8002ed2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	9302      	str	r3, [sp, #8]
 8002edc:	9b02      	ldr	r3, [sp, #8]
}
 8002ede:	e7ce      	b.n	8002e7e <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8002ee0:	f7ff fc4e 	bl	8002780 <Error_Handler>
 8002ee4:	e7d3      	b.n	8002e8e <HAL_I2C_MspInit+0x32>
 8002ee6:	bf00      	nop
 8002ee8:	58001c00 	.word	0x58001c00
 8002eec:	58024400 	.word	0x58024400
 8002ef0:	58020c00 	.word	0x58020c00

08002ef4 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C4)
 8002ef4:	6802      	ldr	r2, [r0, #0]
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HAL_I2C_MspDeInit+0x34>)
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d000      	beq.n	8002efe <HAL_I2C_MspDeInit+0xa>
 8002efc:	4770      	bx	lr
{
 8002efe:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_I2C_MspDeInit+0x38>)
 8002f02:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 8002f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f0a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8002f0e:	4c08      	ldr	r4, [pc, #32]	; (8002f30 <HAL_I2C_MspDeInit+0x3c>)
 8002f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f14:	4620      	mov	r0, r4
 8002f16:	f007 fef7 	bl	800ad08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8002f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f007 fef2 	bl	800ad08 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8002f24:	bd10      	pop	{r4, pc}
 8002f26:	bf00      	nop
 8002f28:	58001c00 	.word	0x58001c00
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	58020c00 	.word	0x58020c00

08002f34 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	b0b8      	sub	sp, #224	; 0xe0
 8002f38:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	9133      	str	r1, [sp, #204]	; 0xcc
 8002f3e:	9134      	str	r1, [sp, #208]	; 0xd0
 8002f40:	9135      	str	r1, [sp, #212]	; 0xd4
 8002f42:	9136      	str	r1, [sp, #216]	; 0xd8
 8002f44:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f46:	22b8      	movs	r2, #184	; 0xb8
 8002f48:	a805      	add	r0, sp, #20
 8002f4a:	f020 f8d9 	bl	8023100 <memset>
  if(hltdc->Instance==LTDC)
 8002f4e:	6822      	ldr	r2, [r4, #0]
 8002f50:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_LTDC_MspInit+0x114>)
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d001      	beq.n	8002f5a <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f56:	b038      	add	sp, #224	; 0xe0
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002f5a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f5e:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8002f60:	2318      	movs	r3, #24
 8002f62:	930e      	str	r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8002f64:	23c9      	movs	r3, #201	; 0xc9
 8002f66:	930f      	str	r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002f6c:	9311      	str	r3, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8002f6e:	2315      	movs	r3, #21
 8002f70:	9312      	str	r3, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8002f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f76:	9314      	str	r3, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8002f78:	f241 5356 	movw	r3, #5462	; 0x1556
 8002f7c:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f7e:	a805      	add	r0, sp, #20
 8002f80:	f00a f9ec 	bl	800d35c <HAL_RCCEx_PeriphCLKConfig>
 8002f84:	2800      	cmp	r0, #0
 8002f86:	d15c      	bne.n	8003042 <HAL_LTDC_MspInit+0x10e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002f88:	4b30      	ldr	r3, [pc, #192]	; (800304c <HAL_LTDC_MspInit+0x118>)
 8002f8a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002f8e:	f042 0208 	orr.w	r2, r2, #8
 8002f92:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8002f96:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8002f9a:	f002 0208 	and.w	r2, r2, #8
 8002f9e:	9201      	str	r2, [sp, #4]
 8002fa0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002fa2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002faa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fae:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fb2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002fb6:	9202      	str	r2, [sp, #8]
 8002fb8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002fba:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fc6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fca:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002fce:	9203      	str	r2, [sp, #12]
 8002fd0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fd2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fda:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8002fde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	9304      	str	r3, [sp, #16]
 8002fe8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8002fea:	23ff      	movs	r3, #255	; 0xff
 8002fec:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2602      	movs	r6, #2
 8002ff0:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2400      	movs	r4, #0
 8002ff4:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ff8:	250e      	movs	r5, #14
 8002ffa:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ffc:	a933      	add	r1, sp, #204	; 0xcc
 8002ffe:	4814      	ldr	r0, [pc, #80]	; (8003050 <HAL_LTDC_MspInit+0x11c>)
 8003000:	f007 fd72 	bl	800aae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8003004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003008:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300e:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003010:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003012:	a933      	add	r1, sp, #204	; 0xcc
 8003014:	480f      	ldr	r0, [pc, #60]	; (8003054 <HAL_LTDC_MspInit+0x120>)
 8003016:	f007 fd67 	bl	800aae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 800301a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800301e:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	9634      	str	r6, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	9435      	str	r4, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	9436      	str	r4, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003026:	9537      	str	r5, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003028:	a933      	add	r1, sp, #204	; 0xcc
 800302a:	480b      	ldr	r0, [pc, #44]	; (8003058 <HAL_LTDC_MspInit+0x124>)
 800302c:	f007 fd5c 	bl	800aae8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003030:	4622      	mov	r2, r4
 8003032:	2105      	movs	r1, #5
 8003034:	2058      	movs	r0, #88	; 0x58
 8003036:	f007 f99f 	bl	800a378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800303a:	2058      	movs	r0, #88	; 0x58
 800303c:	f007 f9d2 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
}
 8003040:	e789      	b.n	8002f56 <HAL_LTDC_MspInit+0x22>
      Error_Handler();
 8003042:	f7ff fb9d 	bl	8002780 <Error_Handler>
 8003046:	e79f      	b.n	8002f88 <HAL_LTDC_MspInit+0x54>
 8003048:	50001000 	.word	0x50001000
 800304c:	58024400 	.word	0x58024400
 8003050:	58022800 	.word	0x58022800
 8003054:	58022400 	.word	0x58022400
 8003058:	58022000 	.word	0x58022000

0800305c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800305c:	b510      	push	{r4, lr}
 800305e:	b0b0      	sub	sp, #192	; 0xc0
 8003060:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003062:	22b8      	movs	r2, #184	; 0xb8
 8003064:	2100      	movs	r1, #0
 8003066:	a802      	add	r0, sp, #8
 8003068:	f020 f84a 	bl	8023100 <memset>
  if(hospi->Instance==OCTOSPI1)
 800306c:	6822      	ldr	r2, [r4, #0]
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <HAL_OSPI_MspInit+0x8c>)
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_OSPI_MspInit+0x1c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003074:	b030      	add	sp, #192	; 0xc0
 8003076:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800307c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 800307e:	2318      	movs	r3, #24
 8003080:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 8003082:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003086:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003088:	2302      	movs	r3, #2
 800308a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800308c:	9306      	str	r3, [sp, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800308e:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003090:	2320      	movs	r3, #32
 8003092:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003094:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003096:	a802      	add	r0, sp, #8
 8003098:	f00a f960 	bl	800d35c <HAL_RCCEx_PeriphCLKConfig>
 800309c:	bb08      	cbnz	r0, 80030e2 <HAL_OSPI_MspInit+0x86>
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <HAL_OSPI_MspInit+0x90>)
 80030a0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030a4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80030a8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80030ac:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030b4:	9200      	str	r2, [sp, #0]
 80030b6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80030b8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80030bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80030c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80030c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	2105      	movs	r1, #5
 80030d4:	205c      	movs	r0, #92	; 0x5c
 80030d6:	f007 f94f 	bl	800a378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80030da:	205c      	movs	r0, #92	; 0x5c
 80030dc:	f007 f982 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
}
 80030e0:	e7c8      	b.n	8003074 <HAL_OSPI_MspInit+0x18>
      Error_Handler();
 80030e2:	f7ff fb4d 	bl	8002780 <Error_Handler>
 80030e6:	e7da      	b.n	800309e <HAL_OSPI_MspInit+0x42>
 80030e8:	52005000 	.word	0x52005000
 80030ec:	58024400 	.word	0x58024400

080030f0 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80030f0:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 80030f2:	6802      	ldr	r2, [r0, #0]
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_OSPI_MspDeInit+0x30>)
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d000      	beq.n	80030fc <HAL_OSPI_MspDeInit+0xc>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80030fa:	bd08      	pop	{r3, pc}
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_OSPI_MspDeInit+0x34>)
 80030fe:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8003102:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003106:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800310a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800310e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003112:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8003116:	205c      	movs	r0, #92	; 0x5c
 8003118:	f007 f972 	bl	800a400 <HAL_NVIC_DisableIRQ>
}
 800311c:	e7ed      	b.n	80030fa <HAL_OSPI_MspDeInit+0xa>
 800311e:	bf00      	nop
 8003120:	52005000 	.word	0x52005000
 8003124:	58024400 	.word	0x58024400

08003128 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	b0b6      	sub	sp, #216	; 0xd8
 800312c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312e:	2100      	movs	r1, #0
 8003130:	9131      	str	r1, [sp, #196]	; 0xc4
 8003132:	9132      	str	r1, [sp, #200]	; 0xc8
 8003134:	9133      	str	r1, [sp, #204]	; 0xcc
 8003136:	9134      	str	r1, [sp, #208]	; 0xd0
 8003138:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800313a:	22b8      	movs	r2, #184	; 0xb8
 800313c:	a803      	add	r0, sp, #12
 800313e:	f01f ffdf 	bl	8023100 <memset>
  if(hspi->Instance==SPI2)
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_SPI_MspInit+0xc8>)
 8003146:	429a      	cmp	r2, r3
 8003148:	d001      	beq.n	800314e <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800314a:	b036      	add	sp, #216	; 0xd8
 800314c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800314e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003152:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003154:	a803      	add	r0, sp, #12
 8003156:	f00a f901 	bl	800d35c <HAL_RCCEx_PeriphCLKConfig>
 800315a:	2800      	cmp	r0, #0
 800315c:	d145      	bne.n	80031ea <HAL_SPI_MspInit+0xc2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800315e:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_SPI_MspInit+0xcc>)
 8003160:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003164:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003168:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800316c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003170:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003174:	9200      	str	r2, [sp, #0]
 8003176:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003178:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8003184:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003188:	f002 0201 	and.w	r2, r2, #1
 800318c:	9201      	str	r2, [sp, #4]
 800318e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003190:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8003194:	f042 0204 	orr.w	r2, r2, #4
 8003198:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800319c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	9302      	str	r3, [sp, #8]
 80031a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ac:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2602      	movs	r6, #2
 80031b0:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2400      	movs	r4, #0
 80031b4:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031b8:	2505      	movs	r5, #5
 80031ba:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	a931      	add	r1, sp, #196	; 0xc4
 80031be:	480e      	ldr	r0, [pc, #56]	; (80031f8 <HAL_SPI_MspInit+0xd0>)
 80031c0:	f007 fc92 	bl	800aae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031c4:	230c      	movs	r3, #12
 80031c6:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	9632      	str	r6, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	9433      	str	r4, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	9434      	str	r4, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031ce:	9535      	str	r5, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d0:	a931      	add	r1, sp, #196	; 0xc4
 80031d2:	480a      	ldr	r0, [pc, #40]	; (80031fc <HAL_SPI_MspInit+0xd4>)
 80031d4:	f007 fc88 	bl	800aae8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80031d8:	4622      	mov	r2, r4
 80031da:	4621      	mov	r1, r4
 80031dc:	2024      	movs	r0, #36	; 0x24
 80031de:	f007 f8cb 	bl	800a378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80031e2:	2024      	movs	r0, #36	; 0x24
 80031e4:	f007 f8fe 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
}
 80031e8:	e7af      	b.n	800314a <HAL_SPI_MspInit+0x22>
      Error_Handler();
 80031ea:	f7ff fac9 	bl	8002780 <Error_Handler>
 80031ee:	e7b6      	b.n	800315e <HAL_SPI_MspInit+0x36>
 80031f0:	40003800 	.word	0x40003800
 80031f4:	58024400 	.word	0x58024400
 80031f8:	58020000 	.word	0x58020000
 80031fc:	58020800 	.word	0x58020800

08003200 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003200:	b508      	push	{r3, lr}
  if(hspi->Instance==SPI2)
 8003202:	6802      	ldr	r2, [r0, #0]
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_SPI_MspDeInit+0x34>)
 8003206:	429a      	cmp	r2, r3
 8003208:	d000      	beq.n	800320c <HAL_SPI_MspDeInit+0xc>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800320a:	bd08      	pop	{r3, pc}
    __HAL_RCC_SPI2_CLK_DISABLE();
 800320c:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_SPI_MspDeInit+0x38>)
 800320e:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 8003212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003216:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 800321a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800321e:	4807      	ldr	r0, [pc, #28]	; (800323c <HAL_SPI_MspDeInit+0x3c>)
 8003220:	f007 fd72 	bl	800ad08 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 8003224:	210c      	movs	r1, #12
 8003226:	4806      	ldr	r0, [pc, #24]	; (8003240 <HAL_SPI_MspDeInit+0x40>)
 8003228:	f007 fd6e 	bl	800ad08 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 800322c:	2024      	movs	r0, #36	; 0x24
 800322e:	f007 f8e7 	bl	800a400 <HAL_NVIC_DisableIRQ>
}
 8003232:	e7ea      	b.n	800320a <HAL_SPI_MspDeInit+0xa>
 8003234:	40003800 	.word	0x40003800
 8003238:	58024400 	.word	0x58024400
 800323c:	58020000 	.word	0x58020000
 8003240:	58020800 	.word	0x58020800

08003244 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003244:	280f      	cmp	r0, #15
 8003246:	d901      	bls.n	800324c <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8003248:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800324a:	4770      	bx	lr
{
 800324c:	b510      	push	{r4, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003252:	2200      	movs	r2, #0
 8003254:	4601      	mov	r1, r0
 8003256:	2036      	movs	r0, #54	; 0x36
 8003258:	f007 f88e 	bl	800a378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800325c:	2036      	movs	r0, #54	; 0x36
 800325e:	f007 f8c1 	bl	800a3e4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_InitTick+0x88>)
 8003264:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_InitTick+0x8c>)
 8003268:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800326c:	f042 0210 	orr.w	r2, r2, #16
 8003270:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8003274:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	9b00      	ldr	r3, [sp, #0]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003280:	a901      	add	r1, sp, #4
 8003282:	a802      	add	r0, sp, #8
 8003284:	f009 ff34 	bl	800d0f0 <HAL_RCC_GetClockConfig>
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003288:	9b07      	ldr	r3, [sp, #28]
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800328a:	b9bb      	cbnz	r3, 80032bc <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800328c:	f009 ff0c 	bl	800d0a8 <HAL_RCC_GetPCLK1Freq>
 8003290:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003292:	4810      	ldr	r0, [pc, #64]	; (80032d4 <HAL_InitTick+0x90>)
 8003294:	fba0 2303 	umull	r2, r3, r0, r3
 8003298:	0c9b      	lsrs	r3, r3, #18
 800329a:	3b01      	subs	r3, #1
  htim6.Instance = TIM6;
 800329c:	480e      	ldr	r0, [pc, #56]	; (80032d8 <HAL_InitTick+0x94>)
 800329e:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <HAL_InitTick+0x98>)
 80032a0:	6002      	str	r2, [r0, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032a6:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032a8:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ae:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80032b0:	f00b fe82 	bl	800efb8 <HAL_TIM_Base_Init>
 80032b4:	b130      	cbz	r0, 80032c4 <HAL_InitTick+0x80>
  return HAL_ERROR;
 80032b6:	2001      	movs	r0, #1
}
 80032b8:	b00a      	add	sp, #40	; 0x28
 80032ba:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032bc:	f009 fef4 	bl	800d0a8 <HAL_RCC_GetPCLK1Freq>
 80032c0:	0043      	lsls	r3, r0, #1
 80032c2:	e7e6      	b.n	8003292 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 80032c4:	4804      	ldr	r0, [pc, #16]	; (80032d8 <HAL_InitTick+0x94>)
 80032c6:	f00b fcdb 	bl	800ec80 <HAL_TIM_Base_Start_IT>
 80032ca:	e7f5      	b.n	80032b8 <HAL_InitTick+0x74>
 80032cc:	2400007c 	.word	0x2400007c
 80032d0:	58024400 	.word	0x58024400
 80032d4:	431bde83 	.word	0x431bde83
 80032d8:	24004d88 	.word	0x24004d88
 80032dc:	40001000 	.word	0x40001000

080032e0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032e0:	4770      	bx	lr

080032e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032e2:	e7fe      	b.n	80032e2 <HardFault_Handler>

080032e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e4:	e7fe      	b.n	80032e4 <MemManage_Handler>

080032e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e6:	e7fe      	b.n	80032e6 <BusFault_Handler>

080032e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <UsageFault_Handler>

080032ea <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ea:	4770      	bx	lr

080032ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_DATRDY_Pin);
 80032ee:	2020      	movs	r0, #32
 80032f0:	f007 fdc8 	bl	800ae84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032f4:	bd08      	pop	{r3, pc}
	...

080032f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80032f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80032fa:	4802      	ldr	r0, [pc, #8]	; (8003304 <SPI2_IRQHandler+0xc>)
 80032fc:	f00b fb92 	bl	800ea24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003300:	bd08      	pop	{r3, pc}
 8003302:	bf00      	nop
 8003304:	24004648 	.word	0x24004648

08003308 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003308:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_Pin);
 800330a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800330e:	f007 fdb9 	bl	800ae84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003312:	bd08      	pop	{r3, pc}

08003314 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003316:	4802      	ldr	r0, [pc, #8]	; (8003320 <TIM6_DAC_IRQHandler+0xc>)
 8003318:	f00b fcfe 	bl	800ed18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800331c:	bd08      	pop	{r3, pc}
 800331e:	bf00      	nop
 8003320:	24004d88 	.word	0x24004d88

08003324 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003324:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003326:	4802      	ldr	r0, [pc, #8]	; (8003330 <LTDC_IRQHandler+0xc>)
 8003328:	f008 fb58 	bl	800b9dc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800332c:	bd08      	pop	{r3, pc}
 800332e:	bf00      	nop
 8003330:	24004544 	.word	0x24004544

08003334 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003334:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003336:	4802      	ldr	r0, [pc, #8]	; (8003340 <DMA2D_IRQHandler+0xc>)
 8003338:	f007 fab6 	bl	800a8a8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800333c:	bd08      	pop	{r3, pc}
 800333e:	bf00      	nop
 8003340:	24004490 	.word	0x24004490

08003344 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003346:	4802      	ldr	r0, [pc, #8]	; (8003350 <OCTOSPI1_IRQHandler+0xc>)
 8003348:	f008 ff52 	bl	800c1f0 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800334c:	bd08      	pop	{r3, pc}
 800334e:	bf00      	nop
 8003350:	240045ec 	.word	0x240045ec

08003354 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003354:	2001      	movs	r0, #1
 8003356:	4770      	bx	lr

08003358 <_kill>:

int _kill(int pid, int sig)
{
 8003358:	b508      	push	{r3, lr}
	errno = EINVAL;
 800335a:	f01f fd6d 	bl	8022e38 <__errno>
 800335e:	2316      	movs	r3, #22
 8003360:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003362:	f04f 30ff 	mov.w	r0, #4294967295
 8003366:	bd08      	pop	{r3, pc}

08003368 <_exit>:

void _exit (int status)
{
 8003368:	b508      	push	{r3, lr}
	_kill(status, -1);
 800336a:	f04f 31ff 	mov.w	r1, #4294967295
 800336e:	f7ff fff3 	bl	8003358 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003372:	e7fe      	b.n	8003372 <_exit+0xa>

08003374 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	460c      	mov	r4, r1
 8003378:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337a:	2500      	movs	r5, #0
 800337c:	e006      	b.n	800338c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800337e:	f3af 8000 	nop.w
 8003382:	4621      	mov	r1, r4
 8003384:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003388:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800338a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338c:	42b5      	cmp	r5, r6
 800338e:	dbf6      	blt.n	800337e <_read+0xa>
	}

return len;
}
 8003390:	4630      	mov	r0, r6
 8003392:	bd70      	pop	{r4, r5, r6, pc}

08003394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	460c      	mov	r4, r1
 8003398:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339a:	2500      	movs	r5, #0
 800339c:	e004      	b.n	80033a8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800339e:	f814 0b01 	ldrb.w	r0, [r4], #1
 80033a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a6:	3501      	adds	r5, #1
 80033a8:	42b5      	cmp	r5, r6
 80033aa:	dbf8      	blt.n	800339e <_write+0xa>
	}
	return len;
}
 80033ac:	4630      	mov	r0, r6
 80033ae:	bd70      	pop	{r4, r5, r6, pc}

080033b0 <_close>:

int _close(int file)
{
	return -1;
}
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	4770      	bx	lr

080033b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80033b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ba:	604b      	str	r3, [r1, #4]
	return 0;
}
 80033bc:	2000      	movs	r0, #0
 80033be:	4770      	bx	lr

080033c0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80033c0:	2001      	movs	r0, #1
 80033c2:	4770      	bx	lr

080033c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80033c4:	2000      	movs	r0, #0
 80033c6:	4770      	bx	lr

080033c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80033c8:	b508      	push	{r3, lr}
 80033ca:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80033cc:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <_sbrk+0x34>)
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	b142      	cbz	r2, 80033e4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <_sbrk+0x34>)
 80033d4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80033d6:	4403      	add	r3, r0
 80033d8:	466a      	mov	r2, sp
 80033da:	4293      	cmp	r3, r2
 80033dc:	d806      	bhi.n	80033ec <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80033de:	4a07      	ldr	r2, [pc, #28]	; (80033fc <_sbrk+0x34>)
 80033e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80033e2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80033e4:	4a05      	ldr	r2, [pc, #20]	; (80033fc <_sbrk+0x34>)
 80033e6:	4906      	ldr	r1, [pc, #24]	; (8003400 <_sbrk+0x38>)
 80033e8:	6011      	str	r1, [r2, #0]
 80033ea:	e7f2      	b.n	80033d2 <_sbrk+0xa>
		errno = ENOMEM;
 80033ec:	f01f fd24 	bl	8022e38 <__errno>
 80033f0:	230c      	movs	r3, #12
 80033f2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	e7f3      	b.n	80033e2 <_sbrk+0x1a>
 80033fa:	bf00      	nop
 80033fc:	24004dd4 	.word	0x24004dd4
 8003400:	2400f6c8 	.word	0x2400f6c8

08003404 <wifi_networkInit>:
  * @brief  Network interface initialization
  * @param  none
  * @retval 0 in case of success, an error code otherwise
  */
static int wifi_networkInit(void)
{
 8003404:	b510      	push	{r4, lr}
  if (net_if_init(&netif, es_wifi_driver_ptr, &net_handler) != NET_OK)
 8003406:	4a10      	ldr	r2, [pc, #64]	; (8003448 <wifi_networkInit+0x44>)
 8003408:	4b10      	ldr	r3, [pc, #64]	; (800344c <wifi_networkInit+0x48>)
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	4810      	ldr	r0, [pc, #64]	; (8003450 <wifi_networkInit+0x4c>)
 800340e:	f00e fab9 	bl	8011984 <net_if_init>
 8003412:	b998      	cbnz	r0, 800343c <wifi_networkInit+0x38>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_INITIALIZED,STATE_TRANSITION_TIMEOUT);
 8003414:	4c0e      	ldr	r4, [pc, #56]	; (8003450 <wifi_networkInit+0x4c>)
 8003416:	f242 7210 	movw	r2, #10000	; 0x2710
 800341a:	2101      	movs	r1, #1
 800341c:	4620      	mov	r0, r4
 800341e:	f00e fa8a 	bl	8011936 <net_if_wait_state>
  if ( net_if_start (&netif) != NET_OK )
 8003422:	4620      	mov	r0, r4
 8003424:	f00e fac3 	bl	80119ae <net_if_start>
 8003428:	4604      	mov	r4, r0
 800342a:	b950      	cbnz	r0, 8003442 <wifi_networkInit+0x3e>
  {
    return -1;
  }

  net_if_wait_state(&netif,NET_STATE_READY,STATE_TRANSITION_TIMEOUT);
 800342c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003430:	2103      	movs	r1, #3
 8003432:	4807      	ldr	r0, [pc, #28]	; (8003450 <wifi_networkInit+0x4c>)
 8003434:	f00e fa7f 	bl	8011936 <net_if_wait_state>

  return 0;
}
 8003438:	4620      	mov	r0, r4
 800343a:	bd10      	pop	{r4, pc}
    return -1;
 800343c:	f04f 34ff 	mov.w	r4, #4294967295
 8003440:	e7fa      	b.n	8003438 <wifi_networkInit+0x34>
    return -1;
 8003442:	f04f 34ff 	mov.w	r4, #4294967295
 8003446:	e7f7      	b.n	8003438 <wifi_networkInit+0x34>
 8003448:	24004fe0 	.word	0x24004fe0
 800344c:	2400000c 	.word	0x2400000c
 8003450:	24004fe8 	.word	0x24004fe8

08003454 <wifi_initialise>:
  * @brief  Initializes module wifi network interface
  * @param  none
  * @retval none
  */
void wifi_initialise(void)
{
 8003454:	b508      	push	{r3, lr}
    wifi_networkInit();
 8003456:	f7ff ffd5 	bl	8003404 <wifi_networkInit>
}
 800345a:	bd08      	pop	{r3, pc}

0800345c <wifi_scan>:
  * @brief  Get available access points
  * @param  APs: pointer Access points structure
  * @retval ES Wifi status
  */
int32_t wifi_scan(net_wifi_scan_results_t *APs)
{
 800345c:	b538      	push	{r3, r4, r5, lr}
 800345e:	4604      	mov	r4, r0
  int32_t ret;
  ret = net_wifi_scan(&netif,NET_WIFI_SCAN_PASSIVE,NULL);
 8003460:	2200      	movs	r2, #0
 8003462:	4611      	mov	r1, r2
 8003464:	4807      	ldr	r0, [pc, #28]	; (8003484 <wifi_scan+0x28>)
 8003466:	f00e f9f9 	bl	801185c <net_wifi_scan>
  if (ret == NET_OK)
 800346a:	4605      	mov	r5, r0
 800346c:	b108      	cbz	r0, 8003472 <wifi_scan+0x16>
  {
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
    if (ret > 0) ret= NET_OK;
  }
  return ret;
}
 800346e:	4628      	mov	r0, r5
 8003470:	bd38      	pop	{r3, r4, r5, pc}
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 8003472:	220a      	movs	r2, #10
 8003474:	4621      	mov	r1, r4
 8003476:	4803      	ldr	r0, [pc, #12]	; (8003484 <wifi_scan+0x28>)
 8003478:	f00e fa0a 	bl	8011890 <net_wifi_get_scan_results>
    if (ret > 0) ret= NET_OK;
 800347c:	2800      	cmp	r0, #0
 800347e:	dcf6      	bgt.n	800346e <wifi_scan+0x12>
    ret = net_wifi_get_scan_results(&netif,APs,MAX_LISTED_AP);
 8003480:	4605      	mov	r5, r0
  return ret;
 8003482:	e7f4      	b.n	800346e <wifi_scan+0x12>
 8003484:	24004fe8 	.word	0x24004fe8

08003488 <wifi_connect>:
  * @param  password:  access point password
  * @param  encryption : security mode
  * @retval 0 in case of success, an error code otherwise
  */
int8_t wifi_connect(char *ssid, uint8_t *password, int32_t encryption )
{  
 8003488:	b500      	push	{lr}
 800348a:	b085      	sub	sp, #20
  net_wifi_credentials_t  Credentials = 
 800348c:	9001      	str	r0, [sp, #4]
 800348e:	9102      	str	r1, [sp, #8]
 8003490:	9203      	str	r2, [sp, #12]
    (char const*) ssid,
    (char const*)password,
    encryption
  };
  
  if (net_wifi_set_credentials(&netif, &Credentials) != NET_OK)
 8003492:	a901      	add	r1, sp, #4
 8003494:	4813      	ldr	r0, [pc, #76]	; (80034e4 <wifi_connect+0x5c>)
 8003496:	f00e fa11 	bl	80118bc <net_wifi_set_credentials>
 800349a:	b9e8      	cbnz	r0, 80034d8 <wifi_connect+0x50>
  {
    return -1;
  }
  
  if (netif.state == NET_STATE_CONNECTING )
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <wifi_connect+0x5c>)
 800349e:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d00b      	beq.n	80034be <wifi_connect+0x36>
  {
    netif.state = NET_STATE_CONNECTED ; 
  }
    
  if (netif.state == NET_STATE_CONNECTED ) 
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <wifi_connect+0x5c>)
 80034a8:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 80034ac:	2b05      	cmp	r3, #5
 80034ae:	d00b      	beq.n	80034c8 <wifi_connect+0x40>
    {
      return  -1;
    }
  }
  
  if(net_if_connect (&netif) != NET_OK)
 80034b0:	480c      	ldr	r0, [pc, #48]	; (80034e4 <wifi_connect+0x5c>)
 80034b2:	f00e fa81 	bl	80119b8 <net_if_connect>
 80034b6:	b990      	cbnz	r0, 80034de <wifi_connect+0x56>
  {
    return -1;
  }

  return NET_OK;
}
 80034b8:	b005      	add	sp, #20
 80034ba:	f85d fb04 	ldr.w	pc, [sp], #4
    netif.state = NET_STATE_CONNECTED ; 
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <wifi_connect+0x5c>)
 80034c0:	2205      	movs	r2, #5
 80034c2:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80034c6:	e7ee      	b.n	80034a6 <wifi_connect+0x1e>
    if(net_if_disconnect(&netif)!= NET_OK)
 80034c8:	4806      	ldr	r0, [pc, #24]	; (80034e4 <wifi_connect+0x5c>)
 80034ca:	f00e fa7a 	bl	80119c2 <net_if_disconnect>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d0ee      	beq.n	80034b0 <wifi_connect+0x28>
      return  -1;
 80034d2:	f04f 30ff 	mov.w	r0, #4294967295
 80034d6:	e7ef      	b.n	80034b8 <wifi_connect+0x30>
    return -1;
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	e7ec      	b.n	80034b8 <wifi_connect+0x30>
    return -1;
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
 80034e2:	e7e9      	b.n	80034b8 <wifi_connect+0x30>
 80034e4:	24004fe8 	.word	0x24004fe8

080034e8 <esWiFi_Task>:
 * WiFi Task
 * - Handle requests from GUI task
 * - Return status to GUI task
 */
void esWiFi_Task(void *argument)
{
 80034e8:	b500      	push	{lr}
 80034ea:	b083      	sub	sp, #12
    uint8_t msg;
    uint8_t retvalue;

    wifi_scan(&APs[0]);
 80034ec:	4824      	ldr	r0, [pc, #144]	; (8003580 <esWiFi_Task+0x98>)
 80034ee:	f7ff ffb5 	bl	800345c <wifi_scan>
 80034f2:	e015      	b.n	8003520 <esWiFi_Task+0x38>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);

        switch(msg)
        {
            case UPDATE_WIFI_AP:
                memset(&APs, 0, sizeof(APs));
 80034f4:	4c22      	ldr	r4, [pc, #136]	; (8003580 <esWiFi_Task+0x98>)
 80034f6:	f44f 7202 	mov.w	r2, #520	; 0x208
 80034fa:	2100      	movs	r1, #0
 80034fc:	4620      	mov	r0, r4
 80034fe:	f01f fdff 	bl	8023100 <memset>

                if(wifi_scan(&APs[0]) == NET_OK)
 8003502:	4620      	mov	r0, r4
 8003504:	f7ff ffaa 	bl	800345c <wifi_scan>
 8003508:	b950      	cbnz	r0, 8003520 <esWiFi_Task+0x38>
                {
                    retvalue = UPDATE_WIFI_AP_DONE;
 800350a:	2301      	movs	r3, #1
 800350c:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue, 0, 0);
 8003510:	2300      	movs	r3, #0
 8003512:	461a      	mov	r2, r3
 8003514:	f10d 0106 	add.w	r1, sp, #6
 8003518:	481a      	ldr	r0, [pc, #104]	; (8003584 <esWiFi_Task+0x9c>)
 800351a:	6800      	ldr	r0, [r0, #0]
 800351c:	f00b ff23 	bl	800f366 <osMessageQueuePut>
        osMessageQueueGet(WiFi_QueueHandle, &msg, 0, osWaitForever);
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
 8003524:	2200      	movs	r2, #0
 8003526:	f10d 0107 	add.w	r1, sp, #7
 800352a:	4817      	ldr	r0, [pc, #92]	; (8003588 <esWiFi_Task+0xa0>)
 800352c:	6800      	ldr	r0, [r0, #0]
 800352e:	f00b ff5a 	bl	800f3e6 <osMessageQueueGet>
        switch(msg)
 8003532:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0dc      	beq.n	80034f4 <esWiFi_Task+0xc>
 800353a:	2b02      	cmp	r3, #2
 800353c:	d1f0      	bne.n	8003520 <esWiFi_Task+0x38>
                }
            break;

            case CONNECTING_TO_WIFI:
                if(wifi_connect((char*)ssid_ascii, password_ascii, net_wifi_string_to_security((char*)encryption_ascii)) != NET_OK)
 800353e:	4813      	ldr	r0, [pc, #76]	; (800358c <esWiFi_Task+0xa4>)
 8003540:	f00e f8ca 	bl	80116d8 <net_wifi_string_to_security>
 8003544:	4602      	mov	r2, r0
 8003546:	4912      	ldr	r1, [pc, #72]	; (8003590 <esWiFi_Task+0xa8>)
 8003548:	4812      	ldr	r0, [pc, #72]	; (8003594 <esWiFi_Task+0xac>)
 800354a:	f7ff ff9d 	bl	8003488 <wifi_connect>
 800354e:	b158      	cbz	r0, 8003568 <esWiFi_Task+0x80>
                {
                    retvalue = CONNECTING_TO_WIFI_ERROR;
 8003550:	2304      	movs	r3, #4
 8003552:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 8003556:	2300      	movs	r3, #0
 8003558:	461a      	mov	r2, r3
 800355a:	f10d 0106 	add.w	r1, sp, #6
 800355e:	4809      	ldr	r0, [pc, #36]	; (8003584 <esWiFi_Task+0x9c>)
 8003560:	6800      	ldr	r0, [r0, #0]
 8003562:	f00b ff00 	bl	800f366 <osMessageQueuePut>
 8003566:	e7db      	b.n	8003520 <esWiFi_Task+0x38>
                }
                else
                {
                    retvalue = CONNECTING_TO_WIFI_OK;
 8003568:	2303      	movs	r3, #3
 800356a:	f88d 3006 	strb.w	r3, [sp, #6]
                    osMessageQueuePut(GUI_QueueHandle, &retvalue , 0, 0);
 800356e:	2300      	movs	r3, #0
 8003570:	461a      	mov	r2, r3
 8003572:	f10d 0106 	add.w	r1, sp, #6
 8003576:	4803      	ldr	r0, [pc, #12]	; (8003584 <esWiFi_Task+0x9c>)
 8003578:	6800      	ldr	r0, [r0, #0]
 800357a:	f00b fef4 	bl	800f366 <osMessageQueuePut>
 800357e:	e7cf      	b.n	8003520 <esWiFi_Task+0x38>
 8003580:	24004dd8 	.word	0x24004dd8
 8003584:	2400445c 	.word	0x2400445c
 8003588:	24004464 	.word	0x24004464
 800358c:	24005600 	.word	0x24005600
 8003590:	24005620 	.word	0x24005620
 8003594:	24005660 	.word	0x24005660

08003598 <_ZN23ApplicationFontProviderD1Ev>:
 8003598:	4a02      	ldr	r2, [pc, #8]	; (80035a4 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 800359a:	6002      	str	r2, [r0, #0]
 800359c:	4a02      	ldr	r2, [pc, #8]	; (80035a8 <_ZN23ApplicationFontProviderD1Ev+0x10>)
 800359e:	6002      	str	r2, [r0, #0]
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	08024e2c 	.word	0x08024e2c
 80035a8:	08024a88 	.word	0x08024a88

080035ac <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80035ac:	b508      	push	{r3, lr}
    switch (typography)
 80035ae:	2907      	cmp	r1, #7
 80035b0:	d825      	bhi.n	80035fe <_ZN23ApplicationFontProvider7getFontEt+0x52>
 80035b2:	e8df f001 	tbb	[pc, r1]
 80035b6:	0804      	.short	0x0804
 80035b8:	1814100c 	.word	0x1814100c
 80035bc:	201c      	.short	0x201c
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80035be:	f000 ff9b 	bl	80044f8 <_ZN17TypedTextDatabase8getFontsEv>
 80035c2:	6800      	ldr	r0, [r0, #0]
        // SairaSemiCondensed_Medium_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
    default:
        return 0;
    }
}
 80035c4:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80035c6:	f000 ff97 	bl	80044f8 <_ZN17TypedTextDatabase8getFontsEv>
 80035ca:	6840      	ldr	r0, [r0, #4]
 80035cc:	e7fa      	b.n	80035c4 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80035ce:	f000 ff93 	bl	80044f8 <_ZN17TypedTextDatabase8getFontsEv>
 80035d2:	6880      	ldr	r0, [r0, #8]
 80035d4:	e7f6      	b.n	80035c4 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80035d6:	f000 ff8f 	bl	80044f8 <_ZN17TypedTextDatabase8getFontsEv>
 80035da:	68c0      	ldr	r0, [r0, #12]
 80035dc:	e7f2      	b.n	80035c4 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80035de:	f000 ff8b 	bl	80044f8 <_ZN17TypedTextDatabase8getFontsEv>
 80035e2:	6900      	ldr	r0, [r0, #16]
 80035e4:	e7ee      	b.n	80035c4 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80035e6:	f000 ff87 	bl	80044f8 <_ZN17TypedTextDatabase8getFontsEv>
 80035ea:	6900      	ldr	r0, [r0, #16]
 80035ec:	e7ea      	b.n	80035c4 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80035ee:	f000 ff83 	bl	80044f8 <_ZN17TypedTextDatabase8getFontsEv>
 80035f2:	6940      	ldr	r0, [r0, #20]
 80035f4:	e7e6      	b.n	80035c4 <_ZN23ApplicationFontProvider7getFontEt+0x18>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 80035f6:	f000 ff7f 	bl	80044f8 <_ZN17TypedTextDatabase8getFontsEv>
 80035fa:	6980      	ldr	r0, [r0, #24]
 80035fc:	e7e2      	b.n	80035c4 <_ZN23ApplicationFontProvider7getFontEt+0x18>
    switch (typography)
 80035fe:	2000      	movs	r0, #0
 8003600:	e7e0      	b.n	80035c4 <_ZN23ApplicationFontProvider7getFontEt+0x18>
	...

08003604 <_ZN23ApplicationFontProviderD0Ev>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <_ZN23ApplicationFontProviderD0Ev+0x18>)
 800360a:	6003      	str	r3, [r0, #0]
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 800360e:	6003      	str	r3, [r0, #0]
 8003610:	2104      	movs	r1, #4
 8003612:	f01f fbb0 	bl	8022d76 <_ZdlPvj>
 8003616:	4620      	mov	r0, r4
 8003618:	bd10      	pop	{r4, pc}
 800361a:	bf00      	nop
 800361c:	08024e2c 	.word	0x08024e2c
 8003620:	08024a88 	.word	0x08024a88

08003624 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003624:	4800      	ldr	r0, [pc, #0]	; (8003628 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003626:	4770      	bx	lr
 8003628:	08024e38 	.word	0x08024e38

0800362c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800362c:	200d      	movs	r0, #13
 800362e:	4770      	bx	lr

08003630 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 8003630:	b169      	cbz	r1, 800364e <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003632:	b510      	push	{r4, lr}
 8003634:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800363a:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800363e:	6803      	ldr	r3, [r0, #0]
 8003640:	689c      	ldr	r4, [r3, #8]
 8003642:	f10d 0303 	add.w	r3, sp, #3
 8003646:	aa01      	add	r2, sp, #4
 8003648:	47a0      	blx	r4
        return glyph;
    }
 800364a:	b002      	add	sp, #8
 800364c:	bd10      	pop	{r4, pc}
            return 0;
 800364e:	2000      	movs	r0, #0
    }
 8003650:	4770      	bx	lr

08003652 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003652:	8940      	ldrh	r0, [r0, #10]
 8003654:	4770      	bx	lr

08003656 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003656:	8980      	ldrh	r0, [r0, #12]
 8003658:	4770      	bx	lr

0800365a <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 800365a:	8880      	ldrh	r0, [r0, #4]
 800365c:	4770      	bx	lr

0800365e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800365e:	8883      	ldrh	r3, [r0, #4]
 8003660:	7980      	ldrb	r0, [r0, #6]
 8003662:	4418      	add	r0, r3
    }
 8003664:	b280      	uxth	r0, r0
 8003666:	4770      	bx	lr

08003668 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003668:	79c0      	ldrb	r0, [r0, #7]
    }
 800366a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800366e:	4770      	bx	lr

08003670 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003670:	79c0      	ldrb	r0, [r0, #7]
    }
 8003672:	09c0      	lsrs	r0, r0, #7
 8003674:	4770      	bx	lr
	...

08003678 <_ZN8touchgfx10TransitionD1Ev>:
    {
    }

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
    {
 8003678:	4b01      	ldr	r3, [pc, #4]	; (8003680 <_ZN8touchgfx10TransitionD1Ev+0x8>)
 800367a:	6003      	str	r3, [r0, #0]
    }
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	08025270 	.word	0x08025270

08003684 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
    {
    }
 8003684:	4770      	bx	lr

08003686 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003686:	4770      	bx	lr

08003688 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003688:	4770      	bx	lr

0800368a <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800368a:	6041      	str	r1, [r0, #4]
    }
 800368c:	4770      	bx	lr

0800368e <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800368e:	2301      	movs	r3, #1
 8003690:	7203      	strb	r3, [r0, #8]
    }
 8003692:	4770      	bx	lr

08003694 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003694:	4a02      	ldr	r2, [pc, #8]	; (80036a0 <_ZN8touchgfx12NoTransitionD1Ev+0xc>)
 8003696:	6002      	str	r2, [r0, #0]
    {
 8003698:	4a02      	ldr	r2, [pc, #8]	; (80036a4 <_ZN8touchgfx12NoTransitionD1Ev+0x10>)
 800369a:	6002      	str	r2, [r0, #0]
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	08025294 	.word	0x08025294
 80036a4:	08025270 	.word	0x08025270

080036a8 <_Z41__static_initialization_and_destruction_0ii>:
}

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
 80036a8:	2801      	cmp	r0, #1
 80036aa:	d006      	beq.n	80036ba <_Z41__static_initialization_and_destruction_0ii+0x12>
 80036ac:	b920      	cbnz	r0, 80036b8 <_Z41__static_initialization_and_destruction_0ii+0x10>
 80036ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036b2:	4299      	cmp	r1, r3
 80036b4:	f000 8222 	beq.w	8003afc <_Z41__static_initialization_and_destruction_0ii+0x454>
 80036b8:	4770      	bx	lr
 80036ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036be:	4299      	cmp	r1, r3
 80036c0:	d1f4      	bne.n	80036ac <_Z41__static_initialization_and_destruction_0ii+0x4>
 80036c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80036c6:	4bf0      	ldr	r3, [pc, #960]	; (8003a88 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80036cc:	240c      	movs	r4, #12
 80036ce:	805c      	strh	r4, [r3, #2]
 80036d0:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80036d4:	f8a3 e004 	strh.w	lr, [r3, #4]
 80036d8:	2224      	movs	r2, #36	; 0x24
 80036da:	80da      	strh	r2, [r3, #6]
 80036dc:	811a      	strh	r2, [r3, #8]
 80036de:	f04f 0c06 	mov.w	ip, #6
 80036e2:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80036e6:	2502      	movs	r5, #2
 80036e8:	731d      	strb	r5, [r3, #12]
 80036ea:	f04f 0a36 	mov.w	sl, #54	; 0x36
 80036ee:	f8a3 a00e 	strh.w	sl, [r3, #14]
 80036f2:	f8a3 e010 	strh.w	lr, [r3, #16]
 80036f6:	825a      	strh	r2, [r3, #18]
 80036f8:	829a      	strh	r2, [r3, #20]
 80036fa:	f8a3 c016 	strh.w	ip, [r3, #22]
 80036fe:	f04f 0503 	mov.w	r5, #3
 8003702:	761d      	strb	r5, [r3, #24]
 8003704:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003708:	835e      	strh	r6, [r3, #26]
 800370a:	f8a3 e01c 	strh.w	lr, [r3, #28]
 800370e:	83da      	strh	r2, [r3, #30]
 8003710:	841a      	strh	r2, [r3, #32]
 8003712:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8003716:	f04f 0504 	mov.w	r5, #4
 800371a:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 800371e:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8003722:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8003726:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800372c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800372e:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8003732:	f04f 0505 	mov.w	r5, #5
 8003736:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 800373a:	27b4      	movs	r7, #180	; 0xb4
 800373c:	865f      	strh	r7, [r3, #50]	; 0x32
 800373e:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8003742:	86da      	strh	r2, [r3, #54]	; 0x36
 8003744:	871a      	strh	r2, [r3, #56]	; 0x38
 8003746:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 800374a:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 800374e:	f04f 05de 	mov.w	r5, #222	; 0xde
 8003752:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8003754:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8003758:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800375c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8003760:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8003764:	f04f 0907 	mov.w	r9, #7
 8003768:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 800376c:	f44f 7984 	mov.w	r9, #264	; 0x108
 8003770:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8003774:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8003778:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800377c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8003780:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8003784:	f04f 0b08 	mov.w	fp, #8
 8003788:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 800378c:	f44f 7b99 	mov.w	fp, #306	; 0x132
 8003790:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8003794:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8003798:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800379c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037a0:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 80037a4:	2509      	movs	r5, #9
 80037a6:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 80037aa:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80037ae:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80037b2:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 80037b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80037ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80037be:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 80037c2:	250a      	movs	r5, #10
 80037c4:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80037c8:	f44f 75c3 	mov.w	r5, #390	; 0x186
 80037cc:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 80037d0:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 80037d4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80037d8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80037dc:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 80037e0:	f04f 090b 	mov.w	r9, #11
 80037e4:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 80037e8:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 80037ec:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 80037f0:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 80037f4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80037f8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80037fc:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8003800:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8003804:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8003808:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 800380c:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8003810:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8003814:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8003818:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 800381c:	f04f 060d 	mov.w	r6, #13
 8003820:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8003824:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8003828:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 800382c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8003830:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8003834:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8003838:	f04f 0a0e 	mov.w	sl, #14
 800383c:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8003840:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003844:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8003848:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 800384c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8003850:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8003854:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8003858:	f04f 0a0f 	mov.w	sl, #15
 800385c:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8003860:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8003864:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8003868:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 800386c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8003870:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8003874:	f04f 0a10 	mov.w	sl, #16
 8003878:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 800387c:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8003880:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8003884:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8003888:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 800388c:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 8003890:	f04f 0a11 	mov.w	sl, #17
 8003894:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8003898:	f04f 0ade 	mov.w	sl, #222	; 0xde
 800389c:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80038a0:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 80038a4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80038a8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80038ac:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 80038b0:	f04f 0a12 	mov.w	sl, #18
 80038b4:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80038b8:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80038bc:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 80038c0:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80038c4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80038c8:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80038cc:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 80038d0:	f04f 0a13 	mov.w	sl, #19
 80038d4:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 80038d8:	f44f 7a99 	mov.w	sl, #306	; 0x132
 80038dc:	4656      	mov	r6, sl
 80038de:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 80038e2:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 80038e6:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 80038ea:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 80038ee:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 80038f2:	f04f 0a14 	mov.w	sl, #20
 80038f6:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 80038fa:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 80038fe:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8003902:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8003906:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800390a:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 800390e:	f04f 0a15 	mov.w	sl, #21
 8003912:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8003916:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 800391a:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 800391e:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8003922:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8003926:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 800392a:	f04f 0a16 	mov.w	sl, #22
 800392e:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8003932:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8003936:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 800393a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800393e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8003942:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8003946:	f04f 0e17 	mov.w	lr, #23
 800394a:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 800394e:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8003952:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8003956:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 800395a:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 800395e:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8003962:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8003966:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 800396a:	f04f 0918 	mov.w	r9, #24
 800396e:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 8003972:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8003976:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 800397a:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 800397e:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 8003982:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8003986:	f04f 0819 	mov.w	r8, #25
 800398a:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 800398e:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 8003992:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8003996:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 800399a:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 800399e:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 80039a2:	271a      	movs	r7, #26
 80039a4:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80039a8:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80039ac:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 80039b0:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 80039b4:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80039b8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 80039bc:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 80039c0:	271b      	movs	r7, #27
 80039c2:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 80039c6:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80039ca:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 80039ce:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 80039d2:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 80039d6:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 80039da:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 80039de:	271c      	movs	r7, #28
 80039e0:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 80039e4:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 80039e8:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 80039ec:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 80039f0:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 80039f4:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 80039f8:	271d      	movs	r7, #29
 80039fa:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 80039fe:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8003a02:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8003a06:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8003a0a:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8003a0e:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8003a12:	271e      	movs	r7, #30
 8003a14:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8003a18:	f04f 0660 	mov.w	r6, #96	; 0x60
 8003a1c:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8003a20:	26e2      	movs	r6, #226	; 0xe2
 8003a22:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8003a26:	f44f 7790 	mov.w	r7, #288	; 0x120
 8003a2a:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8003a2e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8003a32:	f04f 0708 	mov.w	r7, #8
 8003a36:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8003a3a:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8003a3c:	801c      	strh	r4, [r3, #0]
 8003a3e:	f8a3 e002 	strh.w	lr, [r3, #2]
 8003a42:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8003a46:	f8a3 c004 	strh.w	ip, [r3, #4]
 8003a4a:	80da      	strh	r2, [r3, #6]
};
 8003a4c:	2700      	movs	r7, #0
 8003a4e:	609f      	str	r7, [r3, #8]
 8003a50:	f04f 0804 	mov.w	r8, #4
 8003a54:	f8a3 800c 	strh.w	r8, [r3, #12]
 8003a58:	821d      	strh	r5, [r3, #16]
 8003a5a:	f8a3 e012 	strh.w	lr, [r3, #18]
 8003a5e:	f8a3 c014 	strh.w	ip, [r3, #20]
 8003a62:	82da      	strh	r2, [r3, #22]
 8003a64:	619f      	str	r7, [r3, #24]
 8003a66:	f04f 0e03 	mov.w	lr, #3
 8003a6a:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8003a6e:	841c      	strh	r4, [r3, #32]
 8003a70:	845e      	strh	r6, [r3, #34]	; 0x22
 8003a72:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8003a76:	84da      	strh	r2, [r3, #38]	; 0x26
 8003a78:	629f      	str	r7, [r3, #40]	; 0x28
 8003a7a:	f04f 0407 	mov.w	r4, #7
 8003a7e:	859c      	strh	r4, [r3, #44]	; 0x2c
 8003a80:	861d      	strh	r5, [r3, #48]	; 0x30
 8003a82:	865e      	strh	r6, [r3, #50]	; 0x32
 8003a84:	e004      	b.n	8003a90 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8003a86:	bf00      	nop
 8003a88:	24005170 	.word	0x24005170
 8003a8c:	240050e0 	.word	0x240050e0
 8003a90:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8003a94:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a96:	639f      	str	r7, [r3, #56]	; 0x38
 8003a98:	f04f 0205 	mov.w	r2, #5
 8003a9c:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	3340      	adds	r3, #64	; 0x40
 8003aa2:	2c00      	cmp	r4, #0
 8003aa4:	db0b      	blt.n	8003abe <_Z41__static_initialization_and_destruction_0ii+0x416>
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8003ab0:	801a      	strh	r2, [r3, #0]
 8003ab2:	805a      	strh	r2, [r3, #2]
 8003ab4:	809a      	strh	r2, [r3, #4]
 8003ab6:	80da      	strh	r2, [r3, #6]
 8003ab8:	3310      	adds	r3, #16
 8003aba:	3c01      	subs	r4, #1
 8003abc:	e7f1      	b.n	8003aa2 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003ac0:	2205      	movs	r2, #5
 8003ac2:	825a      	strh	r2, [r3, #18]
 8003ac4:	222d      	movs	r2, #45	; 0x2d
 8003ac6:	829a      	strh	r2, [r3, #20]
 8003ac8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003acc:	82da      	strh	r2, [r3, #22]
 8003ace:	2246      	movs	r2, #70	; 0x46
 8003ad0:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8003ad2:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003ad4:	61da      	str	r2, [r3, #28]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	841a      	strh	r2, [r3, #32]
        : color(col)
 8003ada:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24
 8003ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ae4:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8003ae6:	b918      	cbnz	r0, 8003af0 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8003ae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aec:	4299      	cmp	r1, r3
 8003aee:	d001      	beq.n	8003af4 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8003af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003af6:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003af8:	61da      	str	r2, [r3, #28]
 8003afa:	e7f9      	b.n	8003af0 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8003afc:	4b01      	ldr	r3, [pc, #4]	; (8003b04 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8003afe:	4a02      	ldr	r2, [pc, #8]	; (8003b08 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8003b00:	61da      	str	r2, [r3, #28]
 8003b02:	4770      	bx	lr
 8003b04:	24005140 	.word	0x24005140
 8003b08:	08024a78 	.word	0x08024a78

08003b0c <_ZN8touchgfx12NoTransitionD0Ev>:
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <_ZN8touchgfx12NoTransitionD0Ev+0x18>)
 8003b12:	6003      	str	r3, [r0, #0]
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <_ZN8touchgfx12NoTransitionD0Ev+0x1c>)
 8003b16:	6003      	str	r3, [r0, #0]
 8003b18:	210c      	movs	r1, #12
 8003b1a:	f01f f92c 	bl	8022d76 <_ZdlPvj>
 8003b1e:	4620      	mov	r0, r4
 8003b20:	bd10      	pop	{r4, pc}
 8003b22:	bf00      	nop
 8003b24:	08025294 	.word	0x08025294
 8003b28:	08025270 	.word	0x08025270

08003b2c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	4604      	mov	r4, r0
    {
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <_ZN8touchgfx10TransitionD0Ev+0x14>)
 8003b32:	6003      	str	r3, [r0, #0]
    }
 8003b34:	210c      	movs	r1, #12
 8003b36:	f01f f91e 	bl	8022d76 <_ZdlPvj>
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	bd10      	pop	{r4, pc}
 8003b3e:	bf00      	nop
 8003b40:	08025270 	.word	0x08025270

08003b44 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003b44:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8003b46:	f013 ffa7 	bl	8017a98 <_ZN8touchgfx11Application11getInstanceEv>
 8003b4a:	f014 fb87 	bl	801825c <_ZN8touchgfx11Application10invalidateEv>
    }
 8003b4e:	bd08      	pop	{r3, pc}

08003b50 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	4604      	mov	r4, r0
 8003b54:	460e      	mov	r6, r1
 8003b56:	4617      	mov	r7, r2
          pendingScreenTransitionCallback(0)
 8003b58:	f013 fffc 	bl	8017b54 <_ZN8touchgfx11ApplicationC1Ev>
 8003b5c:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8003b5e:	6023      	str	r3, [r4, #0]
 8003b60:	2500      	movs	r5, #0
 8003b62:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8003b66:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
        instance = this;
 8003b6a:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8003b6c:	601c      	str	r4, [r3, #0]
      model(m)
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
 8003b70:	6023      	str	r3, [r4, #0]
class GenericCallback<void>
 8003b72:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
 8003b74:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
        : pobject(0), pmemfun(0)
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 8003b7a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003b7e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 8003b82:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 8003b86:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 8003b8a:	f8c4 7150 	str.w	r7, [r4, #336]	; 0x150
 8003b8e:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        return instance;
 8003b92:	4e0f      	ldr	r6, [pc, #60]	; (8003bd0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
 8003b94:	6830      	ldr	r0, [r6, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003b96:	6803      	ldr	r3, [r0, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f000 fc38 	bl	8004414 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003ba4:	6833      	ldr	r3, [r6, #0]
 8003ba6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8003baa:	b10a      	cbz	r2, 8003bb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
 8003bac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003bae:	b900      	cbnz	r0, 8003bb2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x62>
        return instance->lcdRef;
 8003bb0:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003bb2:	f01a fabc 	bl	801e12e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	08024aec 	.word	0x08024aec
 8003bc0:	2400f48c 	.word	0x2400f48c
 8003bc4:	08024b50 	.word	0x08024b50
 8003bc8:	08024ad4 	.word	0x08024ad4
 8003bcc:	08024b38 	.word	0x08024b38
 8003bd0:	2400f440 	.word	0x2400f440

08003bd4 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
{
 8003bd4:	b410      	push	{r4}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	4603      	mov	r3, r0
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotomainScreenScreenNoTransitionImpl);
 8003bda:	4a10      	ldr	r2, [pc, #64]	; (8003c1c <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x48>)
 8003bdc:	9206      	str	r2, [sp, #24]
 8003bde:	2200      	movs	r2, #0
 8003be0:	9207      	str	r2, [sp, #28]
 8003be2:	46ec      	mov	ip, sp
 8003be4:	aa08      	add	r2, sp, #32
 8003be6:	e912 0003 	ldmdb	r2, {r0, r1}
 8003bea:	e88c 0003 	stmia.w	ip, {r0, r1}
class GenericCallback<void>
 8003bee:	4c0c      	ldr	r4, [pc, #48]	; (8003c20 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x4c>)
 8003bf0:	9402      	str	r4, [sp, #8]
        : pobject(pObject), pmemfun(pmemfun_0)
 8003bf2:	4a0c      	ldr	r2, [pc, #48]	; (8003c24 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 8003bf4:	9202      	str	r2, [sp, #8]
 8003bf6:	9303      	str	r3, [sp, #12]
 8003bf8:	aa04      	add	r2, sp, #16
 8003bfa:	e882 0003 	stmia.w	r2, {r0, r1}
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003bfe:	f8c3 3144 	str.w	r3, [r3, #324]	; 0x144
 8003c02:	f503 7ca4 	add.w	ip, r3, #328	; 0x148
 8003c06:	e88c 0003 	stmia.w	ip, {r0, r1}
    {
 8003c0a:	9402      	str	r4, [sp, #8]
    pendingScreenTransitionCallback = &transitionCallback;
 8003c0c:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8003c10:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8003c14:	b009      	add	sp, #36	; 0x24
 8003c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	08003d7d 	.word	0x08003d7d
 8003c20:	08024ad4 	.word	0x08024ad4
 8003c24:	08024b38 	.word	0x08024b38

08003c28 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003c28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2c:	4607      	mov	r7, r0
 8003c2e:	4688      	mov	r8, r1
 8003c30:	4615      	mov	r5, r2
 8003c32:	4699      	mov	r9, r3
 8003c34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003c38:	6890      	ldr	r0, [r2, #8]
 8003c3a:	6803      	ldr	r3, [r0, #0]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4798      	blx	r3
 8003c40:	f642 63c7 	movw	r3, #11975	; 0x2ec7
 8003c44:	4298      	cmp	r0, r3
 8003c46:	d976      	bls.n	8003d36 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003c48:	6868      	ldr	r0, [r5, #4]
 8003c4a:	6803      	ldr	r3, [r0, #0]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4798      	blx	r3
 8003c50:	280f      	cmp	r0, #15
 8003c52:	d976      	bls.n	8003d42 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003c54:	68e8      	ldr	r0, [r5, #12]
 8003c56:	6803      	ldr	r3, [r0, #0]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4798      	blx	r3
 8003c5c:	280b      	cmp	r0, #11
 8003c5e:	d976      	bls.n	8003d4e <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x126>
    Application::getInstance()->clearAllTimerWidgets();
 8003c60:	f013 ff1a 	bl	8017a98 <_ZN8touchgfx11Application11getInstanceEv>
 8003c64:	f013 ff59 	bl	8017b1a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003c68:	f8d9 0000 	ldr.w	r0, [r9]
 8003c6c:	b110      	cbz	r0, 8003c74 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x4c>
        (*currentTrans)->tearDown();
 8003c6e:	6803      	ldr	r3, [r0, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4798      	blx	r3
    if (*currentTrans)
 8003c74:	f8d9 0000 	ldr.w	r0, [r9]
 8003c78:	b110      	cbz	r0, 8003c80 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
        (*currentTrans)->~Transition();
 8003c7a:	6803      	ldr	r3, [r0, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4798      	blx	r3
    if (*currentScreen)
 8003c80:	6838      	ldr	r0, [r7, #0]
 8003c82:	b110      	cbz	r0, 8003c8a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x62>
        (*currentScreen)->tearDownScreen();
 8003c84:	6803      	ldr	r3, [r0, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	4798      	blx	r3
    if (*currentPresenter)
 8003c8a:	f8d8 0000 	ldr.w	r0, [r8]
 8003c8e:	b110      	cbz	r0, 8003c96 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x6e>
        (*currentPresenter)->deactivate();
 8003c90:	6803      	ldr	r3, [r0, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4798      	blx	r3
    if (*currentScreen)
 8003c96:	6838      	ldr	r0, [r7, #0]
 8003c98:	b110      	cbz	r0, 8003ca0 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x78>
        (*currentScreen)->~Screen();
 8003c9a:	6803      	ldr	r3, [r0, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4798      	blx	r3
    if (*currentPresenter)
 8003ca0:	f8d8 0000 	ldr.w	r0, [r8]
 8003ca4:	b110      	cbz	r0, 8003cac <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x84>
        (*currentPresenter)->~Presenter();
 8003ca6:	6803      	ldr	r3, [r0, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003cac:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003cae:	6803      	ldr	r3, [r0, #0]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4798      	blx	r3
 8003cb6:	4604      	mov	r4, r0
        : screenContainer(0), done(false)
 8003cb8:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 8003cba:	6003      	str	r3, [r0, #0]
 8003cbc:	f04f 0b00 	mov.w	fp, #0
 8003cc0:	f8c0 b004 	str.w	fp, [r0, #4]
 8003cc4:	f880 b008 	strb.w	fp, [r0, #8]
 8003cc8:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8003cca:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003ccc:	68a8      	ldr	r0, [r5, #8]
 8003cce:	6803      	ldr	r3, [r0, #0]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	4659      	mov	r1, fp
 8003cd4:	4798      	blx	r3
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	f003 f958 	bl	8006f8c <_ZN14mainScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003cdc:	6868      	ldr	r0, [r5, #4]
 8003cde:	6803      	ldr	r3, [r0, #0]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	4659      	mov	r1, fp
 8003ce4:	4798      	blx	r3
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	4631      	mov	r1, r6
 8003cea:	f002 fcb9 	bl	8006660 <_ZN19mainScreenPresenterC1ER14mainScreenView>
    *currentTrans = newTransition;
 8003cee:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003cf2:	f8c8 5000 	str.w	r5, [r8]
    *currentScreen = newScreen;
 8003cf6:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8003cf8:	2d00      	cmp	r5, #0
 8003cfa:	d02e      	beq.n	8003d5a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 8003cfc:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003cfe:	f8ca 3000 	str.w	r3, [sl]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003d02:	f8c5 a008 	str.w	sl, [r5, #8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003d06:	63f5      	str	r5, [r6, #60]	; 0x3c
    newScreen->setupScreen();
 8003d08:	6833      	ldr	r3, [r6, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	4798      	blx	r3
    newPresenter->activate();
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4628      	mov	r0, r5
 8003d16:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003d18:	4621      	mov	r1, r4
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f015 faca 	bl	80192b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	4620      	mov	r0, r4
 8003d26:	4798      	blx	r3
    newTransition->invalidate();
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 8003d30:	4628      	mov	r0, r5
 8003d32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x140>)
 8003d38:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d3a:	21a3      	movs	r1, #163	; 0xa3
 8003d3c:	480c      	ldr	r0, [pc, #48]	; (8003d70 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d3e:	f01f f849 	bl	8022dd4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 8003d44:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d46:	21a4      	movs	r1, #164	; 0xa4
 8003d48:	4809      	ldr	r0, [pc, #36]	; (8003d70 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d4a:	f01f f843 	bl	8022dd4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 8003d50:	4a06      	ldr	r2, [pc, #24]	; (8003d6c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 8003d52:	21a5      	movs	r1, #165	; 0xa5
 8003d54:	4806      	ldr	r0, [pc, #24]	; (8003d70 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 8003d56:	f01f f83d 	bl	8022dd4 <__assert_func>
    model->bind(newPresenter);
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	e7cf      	b.n	8003cfe <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xd6>
 8003d5e:	bf00      	nop
 8003d60:	08025270 	.word	0x08025270
 8003d64:	08025294 	.word	0x08025294
 8003d68:	08024f3c 	.word	0x08024f3c
 8003d6c:	08024fcc 	.word	0x08024fcc
 8003d70:	080250d8 	.word	0x080250d8
 8003d74:	08025120 	.word	0x08025120
 8003d78:	080251c4 	.word	0x080251c4

08003d7c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:
{
 8003d7c:	b500      	push	{lr}
 8003d7e:	b083      	sub	sp, #12
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003d80:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x20>)
 8003d88:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003d8c:	f500 719c 	add.w	r1, r0, #312	; 0x138
 8003d90:	4803      	ldr	r0, [pc, #12]	; (8003da0 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x24>)
 8003d92:	f7ff ff49 	bl	8003c28 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003d96:	b003      	add	sp, #12
 8003d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d9c:	2400f480 	.word	0x2400f480
 8003da0:	2400f47c 	.word	0x2400f47c

08003da4 <_GLOBAL__sub_I__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8003da4:	b508      	push	{r3, lr}
 8003da6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003daa:	2001      	movs	r0, #1
 8003dac:	f7ff fc7c 	bl	80036a8 <_Z41__static_initialization_and_destruction_0ii>
 8003db0:	bd08      	pop	{r3, pc}

08003db2 <_GLOBAL__sub_D__ZN23FrontendApplicationBaseC2ER5ModelR12FrontendHeap>:
 8003db2:	b508      	push	{r3, lr}
 8003db4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7ff fc75 	bl	80036a8 <_Z41__static_initialization_and_destruction_0ii>
 8003dbe:	bd08      	pop	{r3, pc}

08003dc0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003dc0:	6a00      	ldr	r0, [r0, #32]
 8003dc2:	4770      	bx	lr

08003dc4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003dc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003dc6:	4770      	bx	lr

08003dc8 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003dc8:	4a03      	ldr	r2, [pc, #12]	; (8003dd8 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 8003dca:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003dcc:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 8003dce:	6002      	str	r2, [r0, #0]
    {
 8003dd0:	4a03      	ldr	r2, [pc, #12]	; (8003de0 <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 8003dd2:	6002      	str	r2, [r0, #0]
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	080252b8 	.word	0x080252b8
 8003ddc:	08026b80 	.word	0x08026b80
 8003de0:	080254f8 	.word	0x080254f8

08003de4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8003de4:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003de6:	888b      	ldrh	r3, [r1, #4]
 8003de8:	0adb      	lsrs	r3, r3, #11
 8003dea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003dee:	680b      	ldr	r3, [r1, #0]
}
 8003df0:	4418      	add	r0, r3
 8003df2:	4770      	bx	lr

08003df4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8003df4:	4694      	mov	ip, r2
 8003df6:	b1da      	cbz	r2, 8003e30 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8003df8:	7b13      	ldrb	r3, [r2, #12]
 8003dfa:	b1db      	cbz	r3, 8003e34 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003dfc:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003dfe:	f89c 000d 	ldrb.w	r0, [ip, #13]
 8003e02:	0200      	lsls	r0, r0, #8
 8003e04:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003e08:	f89c c00b 	ldrb.w	ip, [ip, #11]
 8003e0c:	ea40 000c 	orr.w	r0, r0, ip
 8003e10:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	b17b      	cbz	r3, 8003e38 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003e18:	8810      	ldrh	r0, [r2, #0]
 8003e1a:	4288      	cmp	r0, r1
 8003e1c:	d005      	beq.n	8003e2a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 8003e1e:	4288      	cmp	r0, r1
 8003e20:	d80c      	bhi.n	8003e3c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3204      	adds	r2, #4
 8003e28:	e7f5      	b.n	8003e16 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 8003e2a:	f992 0002 	ldrsb.w	r0, [r2, #2]
 8003e2e:	4770      	bx	lr
        return 0;
 8003e30:	2000      	movs	r0, #0
 8003e32:	4770      	bx	lr
 8003e34:	2000      	movs	r0, #0
 8003e36:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 8003e38:	2000      	movs	r0, #0
 8003e3a:	4770      	bx	lr
 8003e3c:	2000      	movs	r0, #0
}
 8003e3e:	4770      	bx	lr

08003e40 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003e40:	b510      	push	{r4, lr}
 8003e42:	4604      	mov	r4, r0
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 8003e46:	6003      	str	r3, [r0, #0]
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 8003e4a:	6003      	str	r3, [r0, #0]
    {
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 8003e4e:	6003      	str	r3, [r0, #0]
 8003e50:	2128      	movs	r1, #40	; 0x28
 8003e52:	f01e ff90 	bl	8022d76 <_ZdlPvj>
 8003e56:	4620      	mov	r0, r4
 8003e58:	bd10      	pop	{r4, pc}
 8003e5a:	bf00      	nop
 8003e5c:	080252b8 	.word	0x080252b8
 8003e60:	08026b80 	.word	0x08026b80
 8003e64:	080254f8 	.word	0x080254f8

08003e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003e68:	b530      	push	{r4, r5, lr}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003e6e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8003e72:	9506      	str	r5, [sp, #24]
 8003e74:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003e78:	9505      	str	r5, [sp, #20]
 8003e7a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003e7e:	9504      	str	r5, [sp, #16]
 8003e80:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003e84:	9503      	str	r5, [sp, #12]
 8003e86:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003e8a:	9502      	str	r5, [sp, #8]
 8003e8c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003e90:	9501      	str	r5, [sp, #4]
 8003e92:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8003e96:	9500      	str	r5, [sp, #0]
 8003e98:	f014 fe80 	bl	8018b9c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003e9c:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
 8003e9e:	6023      	str	r3, [r4, #0]
 8003ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ea2:	61a3      	str	r3, [r4, #24]
 8003ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003ea6:	61e3      	str	r3, [r4, #28]
 8003ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003eaa:	6223      	str	r3, [r4, #32]
 8003eac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003eae:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	b009      	add	sp, #36	; 0x24
 8003eb4:	bd30      	pop	{r4, r5, pc}
 8003eb6:	bf00      	nop
 8003eb8:	080252b8 	.word	0x080252b8

08003ebc <__tcf_0>:
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <__tcf_0+0x10>)
 8003ebe:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <__tcf_0+0x14>)
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <__tcf_0+0x18>)
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <__tcf_0+0x1c>)
 8003ec8:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_SairaSemiCondensed_Medium_18_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_SairaSemiCondensed_Medium_18_4bpp();

touchgfx::GeneratedFont& getFont_SairaSemiCondensed_Medium_18_4bpp()
{
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003eca:	4770      	bx	lr
 8003ecc:	240052dc 	.word	0x240052dc
 8003ed0:	080252b8 	.word	0x080252b8
 8003ed4:	08026b80 	.word	0x08026b80
 8003ed8:	080254f8 	.word	0x080254f8

08003edc <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv>:
 8003edc:	4b18      	ldr	r3, [pc, #96]	; (8003f40 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	f3bf 8f5b 	dmb	ish
 8003ee4:	f013 0f01 	tst.w	r3, #1
 8003ee8:	d001      	beq.n	8003eee <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x12>
    return SairaSemiCondensed_Medium_18_4bpp;
}
 8003eea:	4816      	ldr	r0, [pc, #88]	; (8003f44 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003eec:	4770      	bx	lr
{
 8003eee:	b500      	push	{lr}
 8003ef0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003ef2:	4813      	ldr	r0, [pc, #76]	; (8003f40 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003ef4:	f01e ff41 	bl	8022d7a <__cxa_guard_acquire>
 8003ef8:	b918      	cbnz	r0, 8003f02 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x26>
}
 8003efa:	4812      	ldr	r0, [pc, #72]	; (8003f44 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003efc:	b00d      	add	sp, #52	; 0x34
 8003efe:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont SairaSemiCondensed_Medium_18_4bpp(glyphs_SairaSemiCondensed_Medium_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_SairaSemiCondensed_Medium_18_4bpp, kerning_SairaSemiCondensed_Medium_18_4bpp, 63, 0, 0, 0);
 8003f02:	2300      	movs	r3, #0
 8003f04:	930a      	str	r3, [sp, #40]	; 0x28
 8003f06:	9309      	str	r3, [sp, #36]	; 0x24
 8003f08:	9308      	str	r3, [sp, #32]
 8003f0a:	233f      	movs	r3, #63	; 0x3f
 8003f0c:	9307      	str	r3, [sp, #28]
 8003f0e:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x6c>)
 8003f10:	9306      	str	r3, [sp, #24]
 8003f12:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x70>)
 8003f14:	9305      	str	r3, [sp, #20]
 8003f16:	2301      	movs	r3, #1
 8003f18:	9304      	str	r3, [sp, #16]
 8003f1a:	9303      	str	r3, [sp, #12]
 8003f1c:	9302      	str	r3, [sp, #8]
 8003f1e:	2304      	movs	r3, #4
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2312      	movs	r3, #18
 8003f26:	226e      	movs	r2, #110	; 0x6e
 8003f28:	4909      	ldr	r1, [pc, #36]	; (8003f50 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x74>)
 8003f2a:	4806      	ldr	r0, [pc, #24]	; (8003f44 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x68>)
 8003f2c:	f7ff ff9c 	bl	8003e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f30:	4808      	ldr	r0, [pc, #32]	; (8003f54 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x78>)
 8003f32:	f01e ff6d 	bl	8022e10 <atexit>
 8003f36:	4802      	ldr	r0, [pc, #8]	; (8003f40 <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x64>)
 8003f38:	f01e ff2b 	bl	8022d92 <__cxa_guard_release>
 8003f3c:	e7dd      	b.n	8003efa <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv+0x1e>
 8003f3e:	bf00      	nop
 8003f40:	240052d8 	.word	0x240052d8
 8003f44:	240052dc 	.word	0x240052dc
 8003f48:	08026ed8 	.word	0x08026ed8
 8003f4c:	08027608 	.word	0x08027608
 8003f50:	9000a720 	.word	0x9000a720
 8003f54:	08003ebd 	.word	0x08003ebd

08003f58 <__tcf_0>:
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <__tcf_0+0x10>)
 8003f5a:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <__tcf_0+0x14>)
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <__tcf_0+0x18>)
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <__tcf_0+0x1c>)
 8003f64:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_Saira_Medium_22_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Saira_Medium_22_4bpp();

touchgfx::GeneratedFont& getFont_Saira_Medium_22_4bpp()
{
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8003f66:	4770      	bx	lr
 8003f68:	24005308 	.word	0x24005308
 8003f6c:	080252b8 	.word	0x080252b8
 8003f70:	08026b80 	.word	0x08026b80
 8003f74:	080254f8 	.word	0x080254f8

08003f78 <_Z28getFont_Saira_Medium_22_4bppv>:
 8003f78:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f3bf 8f5b 	dmb	ish
 8003f80:	f013 0f01 	tst.w	r3, #1
 8003f84:	d001      	beq.n	8003f8a <_Z28getFont_Saira_Medium_22_4bppv+0x12>
    return Saira_Medium_22_4bpp;
}
 8003f86:	4816      	ldr	r0, [pc, #88]	; (8003fe0 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8003f88:	4770      	bx	lr
{
 8003f8a:	b500      	push	{lr}
 8003f8c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8003f8e:	4813      	ldr	r0, [pc, #76]	; (8003fdc <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8003f90:	f01e fef3 	bl	8022d7a <__cxa_guard_acquire>
 8003f94:	b918      	cbnz	r0, 8003f9e <_Z28getFont_Saira_Medium_22_4bppv+0x26>
}
 8003f96:	4812      	ldr	r0, [pc, #72]	; (8003fe0 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8003f98:	b00d      	add	sp, #52	; 0x34
 8003f9a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont Saira_Medium_22_4bpp(glyphs_Saira_Medium_22_4bpp, 110, 22, 5, 4, 1, 1, 1, unicodes_Saira_Medium_22_4bpp, kerning_Saira_Medium_22_4bpp, 63, 0, 0, 0);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8003fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa4:	9308      	str	r3, [sp, #32]
 8003fa6:	233f      	movs	r3, #63	; 0x3f
 8003fa8:	9307      	str	r3, [sp, #28]
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <_Z28getFont_Saira_Medium_22_4bppv+0x6c>)
 8003fac:	9306      	str	r3, [sp, #24]
 8003fae:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <_Z28getFont_Saira_Medium_22_4bppv+0x70>)
 8003fb0:	9305      	str	r3, [sp, #20]
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	9304      	str	r3, [sp, #16]
 8003fb6:	9303      	str	r3, [sp, #12]
 8003fb8:	9302      	str	r3, [sp, #8]
 8003fba:	2304      	movs	r3, #4
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	2316      	movs	r3, #22
 8003fc4:	226e      	movs	r2, #110	; 0x6e
 8003fc6:	4909      	ldr	r1, [pc, #36]	; (8003fec <_Z28getFont_Saira_Medium_22_4bppv+0x74>)
 8003fc8:	4805      	ldr	r0, [pc, #20]	; (8003fe0 <_Z28getFont_Saira_Medium_22_4bppv+0x68>)
 8003fca:	f7ff ff4d 	bl	8003e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003fce:	4808      	ldr	r0, [pc, #32]	; (8003ff0 <_Z28getFont_Saira_Medium_22_4bppv+0x78>)
 8003fd0:	f01e ff1e 	bl	8022e10 <atexit>
 8003fd4:	4801      	ldr	r0, [pc, #4]	; (8003fdc <_Z28getFont_Saira_Medium_22_4bppv+0x64>)
 8003fd6:	f01e fedc 	bl	8022d92 <__cxa_guard_release>
 8003fda:	e7dc      	b.n	8003f96 <_Z28getFont_Saira_Medium_22_4bppv+0x1e>
 8003fdc:	24005304 	.word	0x24005304
 8003fe0:	24005308 	.word	0x24005308
 8003fe4:	0802703c 	.word	0x0802703c
 8003fe8:	0802761c 	.word	0x0802761c
 8003fec:	9000ad24 	.word	0x9000ad24
 8003ff0:	08003f59 	.word	0x08003f59

08003ff4 <__tcf_0>:
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <__tcf_0+0x10>)
 8003ff6:	4a04      	ldr	r2, [pc, #16]	; (8004008 <__tcf_0+0x14>)
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <__tcf_0+0x18>)
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	4a04      	ldr	r2, [pc, #16]	; (8004010 <__tcf_0+0x1c>)
 8004000:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004002:	4770      	bx	lr
 8004004:	24005334 	.word	0x24005334
 8004008:	080252b8 	.word	0x080252b8
 800400c:	08026b80 	.word	0x08026b80
 8004010:	080254f8 	.word	0x080254f8

08004014 <_Z23getFont_verdana_10_4bppv>:
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	f3bf 8f5b 	dmb	ish
 800401c:	f013 0f01 	tst.w	r3, #1
 8004020:	d001      	beq.n	8004026 <_Z23getFont_verdana_10_4bppv+0x12>
    return verdana_10_4bpp;
}
 8004022:	4815      	ldr	r0, [pc, #84]	; (8004078 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004024:	4770      	bx	lr
{
 8004026:	b500      	push	{lr}
 8004028:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800402a:	4812      	ldr	r0, [pc, #72]	; (8004074 <_Z23getFont_verdana_10_4bppv+0x60>)
 800402c:	f01e fea5 	bl	8022d7a <__cxa_guard_acquire>
 8004030:	b918      	cbnz	r0, 800403a <_Z23getFont_verdana_10_4bppv+0x26>
}
 8004032:	4811      	ldr	r0, [pc, #68]	; (8004078 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004034:	b00d      	add	sp, #52	; 0x34
 8004036:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800403a:	2300      	movs	r3, #0
 800403c:	930a      	str	r3, [sp, #40]	; 0x28
 800403e:	9309      	str	r3, [sp, #36]	; 0x24
 8004040:	9308      	str	r3, [sp, #32]
 8004042:	223f      	movs	r2, #63	; 0x3f
 8004044:	9207      	str	r2, [sp, #28]
 8004046:	4a0d      	ldr	r2, [pc, #52]	; (800407c <_Z23getFont_verdana_10_4bppv+0x68>)
 8004048:	9206      	str	r2, [sp, #24]
 800404a:	4a0d      	ldr	r2, [pc, #52]	; (8004080 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800404c:	9205      	str	r2, [sp, #20]
 800404e:	9304      	str	r3, [sp, #16]
 8004050:	9303      	str	r3, [sp, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	9202      	str	r2, [sp, #8]
 8004056:	2104      	movs	r1, #4
 8004058:	9101      	str	r1, [sp, #4]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	230a      	movs	r3, #10
 800405e:	4909      	ldr	r1, [pc, #36]	; (8004084 <_Z23getFont_verdana_10_4bppv+0x70>)
 8004060:	4805      	ldr	r0, [pc, #20]	; (8004078 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004062:	f7ff ff01 	bl	8003e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004066:	4808      	ldr	r0, [pc, #32]	; (8004088 <_Z23getFont_verdana_10_4bppv+0x74>)
 8004068:	f01e fed2 	bl	8022e10 <atexit>
 800406c:	4801      	ldr	r0, [pc, #4]	; (8004074 <_Z23getFont_verdana_10_4bppv+0x60>)
 800406e:	f01e fe90 	bl	8022d92 <__cxa_guard_release>
 8004072:	e7de      	b.n	8004032 <_Z23getFont_verdana_10_4bppv+0x1e>
 8004074:	24005330 	.word	0x24005330
 8004078:	24005334 	.word	0x24005334
 800407c:	0802718c 	.word	0x0802718c
 8004080:	08027630 	.word	0x08027630
 8004084:	9000b328 	.word	0x9000b328
 8004088:	08003ff5 	.word	0x08003ff5

0800408c <__tcf_0>:
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <__tcf_0+0x10>)
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <__tcf_0+0x14>)
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <__tcf_0+0x18>)
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	4a04      	ldr	r2, [pc, #16]	; (80040a8 <__tcf_0+0x1c>)
 8004098:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_18_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_18_4bpp();

touchgfx::GeneratedFont& getFont_verdana_18_4bpp()
{
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 800409a:	4770      	bx	lr
 800409c:	24005360 	.word	0x24005360
 80040a0:	080252b8 	.word	0x080252b8
 80040a4:	08026b80 	.word	0x08026b80
 80040a8:	080254f8 	.word	0x080254f8

080040ac <_Z23getFont_verdana_18_4bppv>:
 80040ac:	4b18      	ldr	r3, [pc, #96]	; (8004110 <_Z23getFont_verdana_18_4bppv+0x64>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f3bf 8f5b 	dmb	ish
 80040b4:	f013 0f01 	tst.w	r3, #1
 80040b8:	d001      	beq.n	80040be <_Z23getFont_verdana_18_4bppv+0x12>
    return verdana_18_4bpp;
}
 80040ba:	4816      	ldr	r0, [pc, #88]	; (8004114 <_Z23getFont_verdana_18_4bppv+0x68>)
 80040bc:	4770      	bx	lr
{
 80040be:	b500      	push	{lr}
 80040c0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 80040c2:	4813      	ldr	r0, [pc, #76]	; (8004110 <_Z23getFont_verdana_18_4bppv+0x64>)
 80040c4:	f01e fe59 	bl	8022d7a <__cxa_guard_acquire>
 80040c8:	b918      	cbnz	r0, 80040d2 <_Z23getFont_verdana_18_4bppv+0x26>
}
 80040ca:	4812      	ldr	r0, [pc, #72]	; (8004114 <_Z23getFont_verdana_18_4bppv+0x68>)
 80040cc:	b00d      	add	sp, #52	; 0x34
 80040ce:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_18_4bpp(glyphs_verdana_18_4bpp, 110, 18, 4, 4, 1, 1, 1, unicodes_verdana_18_4bpp, kerning_verdana_18_4bpp, 63, 0, 0, 0);
 80040d2:	2300      	movs	r3, #0
 80040d4:	930a      	str	r3, [sp, #40]	; 0x28
 80040d6:	9309      	str	r3, [sp, #36]	; 0x24
 80040d8:	9308      	str	r3, [sp, #32]
 80040da:	233f      	movs	r3, #63	; 0x3f
 80040dc:	9307      	str	r3, [sp, #28]
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <_Z23getFont_verdana_18_4bppv+0x6c>)
 80040e0:	9306      	str	r3, [sp, #24]
 80040e2:	4b0e      	ldr	r3, [pc, #56]	; (800411c <_Z23getFont_verdana_18_4bppv+0x70>)
 80040e4:	9305      	str	r3, [sp, #20]
 80040e6:	2301      	movs	r3, #1
 80040e8:	9304      	str	r3, [sp, #16]
 80040ea:	9303      	str	r3, [sp, #12]
 80040ec:	9302      	str	r3, [sp, #8]
 80040ee:	2304      	movs	r3, #4
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2312      	movs	r3, #18
 80040f6:	226e      	movs	r2, #110	; 0x6e
 80040f8:	4909      	ldr	r1, [pc, #36]	; (8004120 <_Z23getFont_verdana_18_4bppv+0x74>)
 80040fa:	4806      	ldr	r0, [pc, #24]	; (8004114 <_Z23getFont_verdana_18_4bppv+0x68>)
 80040fc:	f7ff feb4 	bl	8003e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004100:	4808      	ldr	r0, [pc, #32]	; (8004124 <_Z23getFont_verdana_18_4bppv+0x78>)
 8004102:	f01e fe85 	bl	8022e10 <atexit>
 8004106:	4802      	ldr	r0, [pc, #8]	; (8004110 <_Z23getFont_verdana_18_4bppv+0x64>)
 8004108:	f01e fe43 	bl	8022d92 <__cxa_guard_release>
 800410c:	e7dd      	b.n	80040ca <_Z23getFont_verdana_18_4bppv+0x1e>
 800410e:	bf00      	nop
 8004110:	2400535c 	.word	0x2400535c
 8004114:	24005360 	.word	0x24005360
 8004118:	08027190 	.word	0x08027190
 800411c:	08027634 	.word	0x08027634
 8004120:	9000b338 	.word	0x9000b338
 8004124:	0800408d 	.word	0x0800408d

08004128 <__tcf_0>:
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <__tcf_0+0x10>)
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <__tcf_0+0x14>)
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	4a04      	ldr	r2, [pc, #16]	; (8004140 <__tcf_0+0x18>)
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	4a04      	ldr	r2, [pc, #16]	; (8004144 <__tcf_0+0x1c>)
 8004134:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004136:	4770      	bx	lr
 8004138:	2400538c 	.word	0x2400538c
 800413c:	080252b8 	.word	0x080252b8
 8004140:	08026b80 	.word	0x08026b80
 8004144:	080254f8 	.word	0x080254f8

08004148 <_Z23getFont_verdana_20_4bppv>:
 8004148:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <_Z23getFont_verdana_20_4bppv+0x60>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	f3bf 8f5b 	dmb	ish
 8004150:	f013 0f01 	tst.w	r3, #1
 8004154:	d001      	beq.n	800415a <_Z23getFont_verdana_20_4bppv+0x12>
    return verdana_20_4bpp;
}
 8004156:	4815      	ldr	r0, [pc, #84]	; (80041ac <_Z23getFont_verdana_20_4bppv+0x64>)
 8004158:	4770      	bx	lr
{
 800415a:	b500      	push	{lr}
 800415c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800415e:	4812      	ldr	r0, [pc, #72]	; (80041a8 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004160:	f01e fe0b 	bl	8022d7a <__cxa_guard_acquire>
 8004164:	b918      	cbnz	r0, 800416e <_Z23getFont_verdana_20_4bppv+0x26>
}
 8004166:	4811      	ldr	r0, [pc, #68]	; (80041ac <_Z23getFont_verdana_20_4bppv+0x64>)
 8004168:	b00d      	add	sp, #52	; 0x34
 800416a:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800416e:	2300      	movs	r3, #0
 8004170:	930a      	str	r3, [sp, #40]	; 0x28
 8004172:	9309      	str	r3, [sp, #36]	; 0x24
 8004174:	9308      	str	r3, [sp, #32]
 8004176:	223f      	movs	r2, #63	; 0x3f
 8004178:	9207      	str	r2, [sp, #28]
 800417a:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800417c:	9206      	str	r2, [sp, #24]
 800417e:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004180:	9205      	str	r2, [sp, #20]
 8004182:	9304      	str	r3, [sp, #16]
 8004184:	9303      	str	r3, [sp, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	9202      	str	r2, [sp, #8]
 800418a:	2104      	movs	r1, #4
 800418c:	9101      	str	r1, [sp, #4]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2314      	movs	r3, #20
 8004192:	4909      	ldr	r1, [pc, #36]	; (80041b8 <_Z23getFont_verdana_20_4bppv+0x70>)
 8004194:	4805      	ldr	r0, [pc, #20]	; (80041ac <_Z23getFont_verdana_20_4bppv+0x64>)
 8004196:	f7ff fe67 	bl	8003e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800419a:	4808      	ldr	r0, [pc, #32]	; (80041bc <_Z23getFont_verdana_20_4bppv+0x74>)
 800419c:	f01e fe38 	bl	8022e10 <atexit>
 80041a0:	4801      	ldr	r0, [pc, #4]	; (80041a8 <_Z23getFont_verdana_20_4bppv+0x60>)
 80041a2:	f01e fdf6 	bl	8022d92 <__cxa_guard_release>
 80041a6:	e7de      	b.n	8004166 <_Z23getFont_verdana_20_4bppv+0x1e>
 80041a8:	24005388 	.word	0x24005388
 80041ac:	2400538c 	.word	0x2400538c
 80041b0:	08027310 	.word	0x08027310
 80041b4:	08027648 	.word	0x08027648
 80041b8:	9000b93c 	.word	0x9000b93c
 80041bc:	08004129 	.word	0x08004129

080041c0 <__tcf_0>:
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <__tcf_0+0x10>)
 80041c2:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <__tcf_0+0x14>)
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <__tcf_0+0x18>)
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	4a04      	ldr	r2, [pc, #16]	; (80041dc <__tcf_0+0x1c>)
 80041cc:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_34_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_34_4bpp();

touchgfx::GeneratedFont& getFont_verdana_34_4bpp()
{
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 80041ce:	4770      	bx	lr
 80041d0:	240053b8 	.word	0x240053b8
 80041d4:	080252b8 	.word	0x080252b8
 80041d8:	08026b80 	.word	0x08026b80
 80041dc:	080254f8 	.word	0x080254f8

080041e0 <_Z23getFont_verdana_34_4bppv>:
 80041e0:	4b19      	ldr	r3, [pc, #100]	; (8004248 <_Z23getFont_verdana_34_4bppv+0x68>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	f3bf 8f5b 	dmb	ish
 80041e8:	f013 0f01 	tst.w	r3, #1
 80041ec:	d001      	beq.n	80041f2 <_Z23getFont_verdana_34_4bppv+0x12>
    return verdana_34_4bpp;
}
 80041ee:	4817      	ldr	r0, [pc, #92]	; (800424c <_Z23getFont_verdana_34_4bppv+0x6c>)
 80041f0:	4770      	bx	lr
{
 80041f2:	b500      	push	{lr}
 80041f4:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 80041f6:	4814      	ldr	r0, [pc, #80]	; (8004248 <_Z23getFont_verdana_34_4bppv+0x68>)
 80041f8:	f01e fdbf 	bl	8022d7a <__cxa_guard_acquire>
 80041fc:	b918      	cbnz	r0, 8004206 <_Z23getFont_verdana_34_4bppv+0x26>
}
 80041fe:	4813      	ldr	r0, [pc, #76]	; (800424c <_Z23getFont_verdana_34_4bppv+0x6c>)
 8004200:	b00d      	add	sp, #52	; 0x34
 8004202:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_34_4bpp(glyphs_verdana_34_4bpp, 110, 34, 7, 4, 1, 1, 2, unicodes_verdana_34_4bpp, kerning_verdana_34_4bpp, 63, 0, 0, 0);
 8004206:	2300      	movs	r3, #0
 8004208:	930a      	str	r3, [sp, #40]	; 0x28
 800420a:	9309      	str	r3, [sp, #36]	; 0x24
 800420c:	9308      	str	r3, [sp, #32]
 800420e:	233f      	movs	r3, #63	; 0x3f
 8004210:	9307      	str	r3, [sp, #28]
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <_Z23getFont_verdana_34_4bppv+0x70>)
 8004214:	9306      	str	r3, [sp, #24]
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <_Z23getFont_verdana_34_4bppv+0x74>)
 8004218:	9305      	str	r3, [sp, #20]
 800421a:	2302      	movs	r3, #2
 800421c:	9304      	str	r3, [sp, #16]
 800421e:	2301      	movs	r3, #1
 8004220:	9303      	str	r3, [sp, #12]
 8004222:	9302      	str	r3, [sp, #8]
 8004224:	2304      	movs	r3, #4
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	2307      	movs	r3, #7
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	2322      	movs	r3, #34	; 0x22
 800422e:	226e      	movs	r2, #110	; 0x6e
 8004230:	4909      	ldr	r1, [pc, #36]	; (8004258 <_Z23getFont_verdana_34_4bppv+0x78>)
 8004232:	4806      	ldr	r0, [pc, #24]	; (800424c <_Z23getFont_verdana_34_4bppv+0x6c>)
 8004234:	f7ff fe18 	bl	8003e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004238:	4808      	ldr	r0, [pc, #32]	; (800425c <_Z23getFont_verdana_34_4bppv+0x7c>)
 800423a:	f01e fde9 	bl	8022e10 <atexit>
 800423e:	4802      	ldr	r0, [pc, #8]	; (8004248 <_Z23getFont_verdana_34_4bppv+0x68>)
 8004240:	f01e fda7 	bl	8022d92 <__cxa_guard_release>
 8004244:	e7db      	b.n	80041fe <_Z23getFont_verdana_34_4bppv+0x1e>
 8004246:	bf00      	nop
 8004248:	240053b4 	.word	0x240053b4
 800424c:	240053b8 	.word	0x240053b8
 8004250:	08027314 	.word	0x08027314
 8004254:	0802764c 	.word	0x0802764c
 8004258:	9000b94c 	.word	0x9000b94c
 800425c:	080041c1 	.word	0x080041c1

08004260 <__tcf_0>:
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <__tcf_0+0x10>)
 8004262:	4a04      	ldr	r2, [pc, #16]	; (8004274 <__tcf_0+0x14>)
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	4a04      	ldr	r2, [pc, #16]	; (8004278 <__tcf_0+0x18>)
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	4a04      	ldr	r2, [pc, #16]	; (800427c <__tcf_0+0x1c>)
 800426c:	601a      	str	r2, [r3, #0]
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800426e:	4770      	bx	lr
 8004270:	240053e4 	.word	0x240053e4
 8004274:	080252b8 	.word	0x080252b8
 8004278:	08026b80 	.word	0x08026b80
 800427c:	080254f8 	.word	0x080254f8

08004280 <_Z23getFont_verdana_40_4bppv>:
 8004280:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	f3bf 8f5b 	dmb	ish
 8004288:	f013 0f01 	tst.w	r3, #1
 800428c:	d001      	beq.n	8004292 <_Z23getFont_verdana_40_4bppv+0x12>
    return verdana_40_4bpp;
}
 800428e:	4815      	ldr	r0, [pc, #84]	; (80042e4 <_Z23getFont_verdana_40_4bppv+0x64>)
 8004290:	4770      	bx	lr
{
 8004292:	b500      	push	{lr}
 8004294:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004296:	4812      	ldr	r0, [pc, #72]	; (80042e0 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004298:	f01e fd6f 	bl	8022d7a <__cxa_guard_acquire>
 800429c:	b918      	cbnz	r0, 80042a6 <_Z23getFont_verdana_40_4bppv+0x26>
}
 800429e:	4811      	ldr	r0, [pc, #68]	; (80042e4 <_Z23getFont_verdana_40_4bppv+0x64>)
 80042a0:	b00d      	add	sp, #52	; 0x34
 80042a2:	f85d fb04 	ldr.w	pc, [sp], #4
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042a6:	2300      	movs	r3, #0
 80042a8:	930a      	str	r3, [sp, #40]	; 0x28
 80042aa:	9309      	str	r3, [sp, #36]	; 0x24
 80042ac:	9308      	str	r3, [sp, #32]
 80042ae:	223f      	movs	r2, #63	; 0x3f
 80042b0:	9207      	str	r2, [sp, #28]
 80042b2:	4a0d      	ldr	r2, [pc, #52]	; (80042e8 <_Z23getFont_verdana_40_4bppv+0x68>)
 80042b4:	9206      	str	r2, [sp, #24]
 80042b6:	4a0d      	ldr	r2, [pc, #52]	; (80042ec <_Z23getFont_verdana_40_4bppv+0x6c>)
 80042b8:	9205      	str	r2, [sp, #20]
 80042ba:	9304      	str	r3, [sp, #16]
 80042bc:	9303      	str	r3, [sp, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	9202      	str	r2, [sp, #8]
 80042c2:	2104      	movs	r1, #4
 80042c4:	9101      	str	r1, [sp, #4]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2328      	movs	r3, #40	; 0x28
 80042ca:	4909      	ldr	r1, [pc, #36]	; (80042f0 <_Z23getFont_verdana_40_4bppv+0x70>)
 80042cc:	4805      	ldr	r0, [pc, #20]	; (80042e4 <_Z23getFont_verdana_40_4bppv+0x64>)
 80042ce:	f7ff fdcb 	bl	8003e68 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80042d2:	4808      	ldr	r0, [pc, #32]	; (80042f4 <_Z23getFont_verdana_40_4bppv+0x74>)
 80042d4:	f01e fd9c 	bl	8022e10 <atexit>
 80042d8:	4801      	ldr	r0, [pc, #4]	; (80042e0 <_Z23getFont_verdana_40_4bppv+0x60>)
 80042da:	f01e fd5a 	bl	8022d92 <__cxa_guard_release>
 80042de:	e7de      	b.n	800429e <_Z23getFont_verdana_40_4bppv+0x1e>
 80042e0:	240053e0 	.word	0x240053e0
 80042e4:	240053e4 	.word	0x240053e4
 80042e8:	08027604 	.word	0x08027604
 80042ec:	08027660 	.word	0x08027660
 80042f0:	9000bf50 	.word	0x9000bf50
 80042f4:	08004261 	.word	0x08004261

080042f8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
    }
 80042f8:	2000      	movs	r0, #0
 80042fa:	4770      	bx	lr

080042fc <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80042fc:	2000      	movs	r0, #0
 80042fe:	4770      	bx	lr

08004300 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8004300:	2000      	movs	r0, #0
 8004302:	4770      	bx	lr

08004304 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004304:	b40e      	push	{r1, r2, r3}
 8004306:	b500      	push	{lr}
 8004308:	b082      	sub	sp, #8
 800430a:	ab03      	add	r3, sp, #12
 800430c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004310:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004312:	2100      	movs	r1, #0
 8004314:	f014 fa72 	bl	80187fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004318:	b002      	add	sp, #8
 800431a:	f85d eb04 	ldr.w	lr, [sp], #4
 800431e:	b003      	add	sp, #12
 8004320:	4770      	bx	lr

08004322 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004322:	b40c      	push	{r2, r3}
 8004324:	b500      	push	{lr}
 8004326:	b083      	sub	sp, #12
 8004328:	ab04      	add	r3, sp, #16
 800432a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800432e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004330:	f014 fa64 	bl	80187fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004334:	b003      	add	sp, #12
 8004336:	f85d eb04 	ldr.w	lr, [sp], #4
 800433a:	b002      	add	sp, #8
 800433c:	4770      	bx	lr
	...

08004340 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8004340:	b510      	push	{r4, lr}
 8004342:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004344:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004346:	b133      	cbz	r3, 8004356 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004348:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800434a:	b143      	cbz	r3, 800435e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 800434c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800434e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004352:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004354:	b94b      	cbnz	r3, 800436a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8004356:	4620      	mov	r0, r4
 8004358:	f015 fc12 	bl	8019b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 800435c:	bd10      	pop	{r4, pc}
            assert(used > 0);
 800435e:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8004360:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8004362:	21c0      	movs	r1, #192	; 0xc0
 8004364:	481c      	ldr	r0, [pc, #112]	; (80043d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8004366:	f01e fd35 	bl	8022dd4 <__assert_func>
        substituteGlyphs();
 800436a:	f015 fd07 	bl	8019d7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800436e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8004370:	2801      	cmp	r0, #1
 8004372:	d91d      	bls.n	80043b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 8004374:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8004376:	1c4b      	adds	r3, r1, #1
 8004378:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800437a:	2b09      	cmp	r3, #9
 800437c:	d81e      	bhi.n	80043bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 800437e:	461a      	mov	r2, r3
 8004380:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004384:	f8b2 c022 	ldrh.w	ip, [r2, #34]	; 0x22
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004388:	f640 123f 	movw	r2, #2367	; 0x93f
 800438c:	4594      	cmp	ip, r2
 800438e:	d1e2      	bne.n	8004356 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 8004390:	b1b8      	cbz	r0, 80043c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 8004392:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 8004396:	8c52      	ldrh	r2, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004398:	2b09      	cmp	r3, #9
 800439a:	d900      	bls.n	800439e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 800439c:	2300      	movs	r3, #0
 800439e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80043a2:	845a      	strh	r2, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80043a4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80043a8:	f640 133f 	movw	r3, #2367	; 0x93f
 80043ac:	844b      	strh	r3, [r1, #34]	; 0x22
        }
 80043ae:	e7d2      	b.n	8004356 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 80043b2:	4a0b      	ldr	r2, [pc, #44]	; (80043e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 80043b4:	21c5      	movs	r1, #197	; 0xc5
 80043b6:	4808      	ldr	r0, [pc, #32]	; (80043d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80043b8:	f01e fd0c 	bl	8022dd4 <__assert_func>
            return buffer[index < size ? index : index - size];
 80043bc:	f1a3 020a 	sub.w	r2, r3, #10
 80043c0:	e7de      	b.n	8004380 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 80043c2:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80043c4:	4a03      	ldr	r2, [pc, #12]	; (80043d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80043c6:	21c0      	movs	r1, #192	; 0xc0
 80043c8:	4803      	ldr	r0, [pc, #12]	; (80043d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80043ca:	f01e fd03 	bl	8022dd4 <__assert_func>
 80043ce:	bf00      	nop
 80043d0:	08025308 	.word	0x08025308
 80043d4:	08025314 	.word	0x08025314
 80043d8:	080253c0 	.word	0x080253c0
 80043dc:	0802540c 	.word	0x0802540c
 80043e0:	0802541c 	.word	0x0802541c

080043e4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80043e4:	b508      	push	{r3, lr}
    fillInputBuffer();
 80043e6:	f015 fb94 	bl	8019b12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80043ea:	bd08      	pop	{r3, pc}

080043ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80043ec:	b500      	push	{lr}
 80043ee:	b087      	sub	sp, #28
 80043f0:	f10d 0c08 	add.w	ip, sp, #8
 80043f4:	e88c 0006 	stmia.w	ip, {r1, r2}
 80043f8:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80043fa:	ab0a      	add	r3, sp, #40	; 0x28
 80043fc:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	9b08      	ldr	r3, [sp, #32]
 8004406:	4661      	mov	r1, ip
 8004408:	f012 fee4 	bl	80171d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800440c:	b007      	add	sp, #28
 800440e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004414 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8004414:	bb40      	cbnz	r0, 8004468 <_ZN8touchgfx5Texts11setLanguageEt+0x54>
{
 8004416:	b538      	push	{r3, r4, r5, lr}
 8004418:	4602      	mov	r2, r0
    {
        if (languagesArray[id] != 0)
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800441c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004420:	b1c3      	cbz	r3, 8004454 <_ZN8touchgfx5Texts11setLanguageEt+0x40>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	4419      	add	r1, r3
 8004426:	4812      	ldr	r0, [pc, #72]	; (8004470 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004428:	6001      	str	r1, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	4419      	add	r1, r3
 800442e:	4811      	ldr	r0, [pc, #68]	; (8004474 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004430:	6001      	str	r1, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004432:	689c      	ldr	r4, [r3, #8]
 8004434:	441c      	add	r4, r3
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
 8004436:	b164      	cbz	r4, 8004452 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
    {
        currentLanguage = id;
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800443a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800443c:	f000 f85c 	bl	80044f8 <_ZN17TypedTextDatabase8getFontsEv>
 8004440:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004442:	f000 f857 	bl	80044f4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004448:	601c      	str	r4, [r3, #0]
        fonts = f;
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800444c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004450:	8018      	strh	r0, [r3, #0]
    }
}
 8004452:	bd38      	pop	{r3, r4, r5, pc}
            currentLanguagePtr = texts_all_languages;
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004456:	490c      	ldr	r1, [pc, #48]	; (8004488 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004458:	6019      	str	r1, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 800445c:	490b      	ldr	r1, [pc, #44]	; (800448c <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
 800445e:	6019      	str	r1, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <_ZN8touchgfx5Texts11setLanguageEt+0x7c>)
 8004462:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004466:	e7e6      	b.n	8004436 <_ZN8touchgfx5Texts11setLanguageEt+0x22>
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	2400540c 	.word	0x2400540c
 8004470:	24005410 	.word	0x24005410
 8004474:	24005414 	.word	0x24005414
 8004478:	24005418 	.word	0x24005418
 800447c:	2400f490 	.word	0x2400f490
 8004480:	2400f498 	.word	0x2400f498
 8004484:	2400f494 	.word	0x2400f494
 8004488:	9000bf7c 	.word	0x9000bf7c
 800448c:	9000bf60 	.word	0x9000bf60
 8004490:	9000bfe4 	.word	0x9000bfe4

08004494 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
 80044a0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	24005410 	.word	0x24005410
 80044ac:	24005414 	.word	0x24005414

080044b0 <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        touchgfx_fonts[6] = &(getFont_SairaSemiCondensed_Medium_18_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80044b0:	2801      	cmp	r0, #1
 80044b2:	d000      	beq.n	80044b6 <_Z41__static_initialization_and_destruction_0ii+0x6>
 80044b4:	4770      	bx	lr
 80044b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ba:	4299      	cmp	r1, r3
 80044bc:	d1fa      	bne.n	80044b4 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80044be:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 80044c0:	f7ff fe42 	bl	8004148 <_Z23getFont_verdana_20_4bppv>
};
 80044c4:	4c0a      	ldr	r4, [pc, #40]	; (80044f0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80044c6:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80044c8:	f7ff feda 	bl	8004280 <_Z23getFont_verdana_40_4bppv>
};
 80044cc:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 80044ce:	f7ff fda1 	bl	8004014 <_Z23getFont_verdana_10_4bppv>
};
 80044d2:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_34_4bpp()),
 80044d4:	f7ff fe84 	bl	80041e0 <_Z23getFont_verdana_34_4bppv>
};
 80044d8:	60e0      	str	r0, [r4, #12]
    &(getFont_verdana_18_4bpp()),
 80044da:	f7ff fde7 	bl	80040ac <_Z23getFont_verdana_18_4bppv>
};
 80044de:	6120      	str	r0, [r4, #16]
    &(getFont_Saira_Medium_22_4bpp()),
 80044e0:	f7ff fd4a 	bl	8003f78 <_Z28getFont_Saira_Medium_22_4bppv>
};
 80044e4:	6160      	str	r0, [r4, #20]
    &(getFont_SairaSemiCondensed_Medium_18_4bpp())
 80044e6:	f7ff fcf9 	bl	8003edc <_Z41getFont_SairaSemiCondensed_Medium_18_4bppv>
};
 80044ea:	61a0      	str	r0, [r4, #24]
} // namespace TypedTextDatabase
 80044ec:	bd10      	pop	{r4, pc}
 80044ee:	bf00      	nop
 80044f0:	2400541c 	.word	0x2400541c

080044f4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}
 80044f4:	2007      	movs	r0, #7
 80044f6:	4770      	bx	lr

080044f8 <_ZN17TypedTextDatabase8getFontsEv>:
}
 80044f8:	4800      	ldr	r0, [pc, #0]	; (80044fc <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80044fa:	4770      	bx	lr
 80044fc:	2400541c 	.word	0x2400541c

08004500 <_GLOBAL__sub_I_touchgfx_fonts>:
} // namespace TypedTextDatabase
 8004500:	b508      	push	{r3, lr}
 8004502:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004506:	2001      	movs	r0, #1
 8004508:	f7ff ffd2 	bl	80044b0 <_Z41__static_initialization_and_destruction_0ii>
 800450c:	bd08      	pop	{r3, pc}

0800450e <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800450e:	b508      	push	{r3, lr}
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8004510:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004514:	b113      	cbz	r3, 800451c <_ZNK8touchgfx8Drawable17invalidateContentEv+0xe>
        {
            invalidate();
 8004516:	6803      	ldr	r3, [r0, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4798      	blx	r3
        }
    }
 800451c:	bd08      	pop	{r3, pc}

0800451e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800451e:	2000      	movs	r0, #0
 8004520:	4770      	bx	lr

08004522 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8004522:	8081      	strh	r1, [r0, #4]
    }
 8004524:	4770      	bx	lr

08004526 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8004526:	80c1      	strh	r1, [r0, #6]
    }
 8004528:	4770      	bx	lr

0800452a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800452a:	8101      	strh	r1, [r0, #8]
    }
 800452c:	4770      	bx	lr

0800452e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800452e:	8141      	strh	r1, [r0, #10]
    }
 8004530:	4770      	bx	lr

08004532 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8004532:	4770      	bx	lr

08004534 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8004534:	4770      	bx	lr

08004536 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8004536:	4770      	bx	lr

08004538 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8004538:	4770      	bx	lr

0800453a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800453a:	4770      	bx	lr

0800453c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800453c:	b510      	push	{r4, lr}
    {
        moveRelative(x - rect.x, y - rect.y);
 800453e:	6804      	ldr	r4, [r0, #0]
 8004540:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8004542:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8004546:	eba1 010c 	sub.w	r1, r1, ip
 800454a:	88c3      	ldrh	r3, [r0, #6]
 800454c:	1ad2      	subs	r2, r2, r3
 800454e:	b212      	sxth	r2, r2
 8004550:	b209      	sxth	r1, r1
 8004552:	47a0      	blx	r4
    }
 8004554:	bd10      	pop	{r4, pc}

08004556 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800455a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800455c:	8403      	strh	r3, [r0, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800455e:	8443      	strh	r3, [r0, #34]	; 0x22
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8004560:	6813      	ldr	r3, [r2, #0]
 8004562:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8004564:	6010      	str	r0, [r2, #0]
    }
 8004566:	4770      	bx	lr

08004568 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8004568:	4770      	bx	lr

0800456a <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800456a:	4770      	bx	lr

0800456c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800456c:	4770      	bx	lr

0800456e <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800456e:	4770      	bx	lr

08004570 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004570:	4770      	bx	lr

08004572 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
        return visible;
 8004572:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8004576:	b11a      	cbz	r2, 8004580 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        return touchable;
 8004578:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800457c:	b102      	cbz	r2, 8004580 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800457e:	6018      	str	r0, [r3, #0]
        }
    }
 8004580:	4770      	bx	lr
	...

08004584 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 8004584:	4a04      	ldr	r2, [pc, #16]	; (8004598 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x14>)
 8004586:	6002      	str	r2, [r0, #0]
    {
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x18>)
 800458a:	6002      	str	r2, [r0, #0]
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x1c>)
 800458e:	6042      	str	r2, [r0, #4]
    {
 8004590:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 8004592:	6042      	str	r2, [r0, #4]
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	080255e4 	.word	0x080255e4
 800459c:	08026bec 	.word	0x08026bec
 80045a0:	08026414 	.word	0x08026414
 80045a4:	08026b18 	.word	0x08026b18

080045a8 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80045a8:	4a02      	ldr	r2, [pc, #8]	; (80045b4 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED1Ev+0xc>)
 80045aa:	6002      	str	r2, [r0, #0]
    }
 80045ac:	4a02      	ldr	r2, [pc, #8]	; (80045b8 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED1Ev+0x10>)
 80045ae:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	080255cc 	.word	0x080255cc
 80045b8:	080255b4 	.word	0x080255b4

080045bc <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7executeES3_>:
    virtual void execute(T1 t1)
 80045bc:	b510      	push	{r4, lr}
 80045be:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80045c0:	6844      	ldr	r4, [r0, #4]
 80045c2:	68c2      	ldr	r2, [r0, #12]
 80045c4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80045c8:	f012 0f01 	tst.w	r2, #1
 80045cc:	d102      	bne.n	80045d4 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7executeES3_+0x18>
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4798      	blx	r3
    }
 80045d2:	bd10      	pop	{r4, pc}
 80045d4:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 80045d8:	f854 200c 	ldr.w	r2, [r4, ip]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	58d3      	ldr	r3, [r2, r3]
 80045e0:	e7f6      	b.n	80045d0 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7executeES3_+0x14>

080045e2 <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80045e2:	6843      	ldr	r3, [r0, #4]
 80045e4:	b14b      	cbz	r3, 80045fa <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv+0x18>
 80045e6:	6883      	ldr	r3, [r0, #8]
 80045e8:	b10b      	cbz	r3, 80045ee <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv+0xc>
 80045ea:	2001      	movs	r0, #1
 80045ec:	4770      	bx	lr
 80045ee:	68c3      	ldr	r3, [r0, #12]
 80045f0:	f013 0f01 	tst.w	r3, #1
 80045f4:	d003      	beq.n	80045fe <_ZNK8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvE7isValidEv+0x1c>
 80045f6:	2001      	movs	r0, #1
 80045f8:	4770      	bx	lr
 80045fa:	2000      	movs	r0, #0
 80045fc:	4770      	bx	lr
 80045fe:	2000      	movs	r0, #0
    }
 8004600:	4770      	bx	lr
	...

08004604 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 8004604:	b510      	push	{r4, lr}
 8004606:	4604      	mov	r4, r0
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x20>)
 800460a:	6003      	str	r3, [r0, #0]
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x24>)
 800460e:	6003      	str	r3, [r0, #0]
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x28>)
 8004612:	6043      	str	r3, [r0, #4]
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev+0x2c>)
 8004616:	6043      	str	r3, [r0, #4]
 8004618:	2140      	movs	r1, #64	; 0x40
 800461a:	f01e fbac 	bl	8022d76 <_ZdlPvj>
 800461e:	4620      	mov	r0, r4
 8004620:	bd10      	pop	{r4, pc}
 8004622:	bf00      	nop
 8004624:	080255e4 	.word	0x080255e4
 8004628:	08026bec 	.word	0x08026bec
 800462c:	08026414 	.word	0x08026414
 8004630:	08026b18 	.word	0x08026b18

08004634 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004634:	b510      	push	{r4, lr}
 8004636:	4604      	mov	r4, r0
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED0Ev+0x18>)
 800463a:	6003      	str	r3, [r0, #0]
    }
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <_ZN8touchgfx8CallbackI17wifiMenuContainerR22wifiInfoLargeContainervvED0Ev+0x1c>)
 800463e:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004640:	2110      	movs	r1, #16
 8004642:	f01e fb98 	bl	8022d76 <_ZdlPvj>
 8004646:	4620      	mov	r0, r4
 8004648:	bd10      	pop	{r4, pc}
 800464a:	bf00      	nop
 800464c:	080255cc 	.word	0x080255cc
 8004650:	080255b4 	.word	0x080255b4

08004654 <_ZN18mainScreenViewBase11setupScreenEv>:
    add(bg1);
    add(wifiMenu);
}

void mainScreenViewBase::setupScreen()
{
 8004654:	b508      	push	{r3, lr}
    wifiMenu.initialize();
 8004656:	3098      	adds	r0, #152	; 0x98
 8004658:	f002 fdd1 	bl	80071fe <_ZN17wifiMenuContainer10initializeEv>
}
 800465c:	bd08      	pop	{r3, pc}
	...

08004660 <_ZN18mainScreenViewBaseD1Ev>:

class mainScreenViewBase : public touchgfx::View<mainScreenPresenter>
{
public:
    mainScreenViewBase();
    virtual ~mainScreenViewBase() {}
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	4605      	mov	r5, r0
 8004664:	4607      	mov	r7, r0
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <_ZN18mainScreenViewBaseD1Ev+0x6c>)
 8004668:	f847 3b98 	str.w	r3, [r7], #152

class wifiMenuContainer : public wifiMenuContainerBase
{
public:
    wifiMenuContainer();
    virtual ~wifiMenuContainer() {}
 800466c:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <_ZN18mainScreenViewBaseD1Ev+0x70>)
 800466e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 8004672:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 8004676:	443c      	add	r4, r7
 8004678:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800467c:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <_ZN18mainScreenViewBaseD1Ev+0x74>)
 800467e:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 8004682:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <_ZN18mainScreenViewBaseD1Ev+0x78>)
 8004684:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 8004688:	f510 76f0 	adds.w	r6, r0, #480	; 0x1e0
 800468c:	d008      	beq.n	80046a0 <_ZN18mainScreenViewBaseD1Ev+0x40>
 800468e:	42a6      	cmp	r6, r4
 8004690:	d006      	beq.n	80046a0 <_ZN18mainScreenViewBaseD1Ev+0x40>
 8004692:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4620      	mov	r0, r4
 800469c:	4798      	blx	r3
 800469e:	e7f6      	b.n	800468e <_ZN18mainScreenViewBaseD1Ev+0x2e>
 80046a0:	4638      	mov	r0, r7
 80046a2:	f000 fe61 	bl	8005368 <_ZN21wifiMenuContainerBaseD1Ev>
 * is handled by the Image Converter as part of compiling the project. Each image is
 * assigned a unique BITMAP identifier which.
 *
 * @see Bitmap
 */
class Image : public Widget
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <_ZN18mainScreenViewBaseD1Ev+0x7c>)
 80046a8:	66eb      	str	r3, [r5, #108]	; 0x6c
class Widget : public Drawable
 80046aa:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <_ZN18mainScreenViewBaseD1Ev+0x80>)
 80046ac:	66ea      	str	r2, [r5, #108]	; 0x6c
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <_ZN18mainScreenViewBaseD1Ev+0x84>)
 80046b0:	66eb      	str	r3, [r5, #108]	; 0x6c
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 80046b2:	490d      	ldr	r1, [pc, #52]	; (80046e8 <_ZN18mainScreenViewBaseD1Ev+0x88>)
 80046b4:	6429      	str	r1, [r5, #64]	; 0x40
 80046b6:	642a      	str	r2, [r5, #64]	; 0x40
 80046b8:	642b      	str	r3, [r5, #64]	; 0x40
 80046ba:	4a0c      	ldr	r2, [pc, #48]	; (80046ec <_ZN18mainScreenViewBaseD1Ev+0x8c>)
 80046bc:	602a      	str	r2, [r5, #0]
 80046be:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <_ZN18mainScreenViewBaseD1Ev+0x90>)
 80046c0:	602a      	str	r2, [r5, #0]
 80046c2:	4a0c      	ldr	r2, [pc, #48]	; (80046f4 <_ZN18mainScreenViewBaseD1Ev+0x94>)
 80046c4:	606a      	str	r2, [r5, #4]
 80046c6:	606b      	str	r3, [r5, #4]
 80046c8:	4628      	mov	r0, r5
 80046ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046cc:	08025618 	.word	0x08025618
 80046d0:	08025fa4 	.word	0x08025fa4
 80046d4:	080255cc 	.word	0x080255cc
 80046d8:	080255b4 	.word	0x080255b4
 80046dc:	08026978 	.word	0x08026978
 80046e0:	0802554c 	.word	0x0802554c
 80046e4:	08026b18 	.word	0x08026b18
 80046e8:	08026818 	.word	0x08026818
 80046ec:	080255e4 	.word	0x080255e4
 80046f0:	08026bec 	.word	0x08026bec
 80046f4:	08026414 	.word	0x08026414

080046f8 <_ZN18mainScreenViewBaseD0Ev>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	4605      	mov	r5, r0
 80046fc:	4607      	mov	r7, r0
 80046fe:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <_ZN18mainScreenViewBaseD0Ev+0x78>)
 8004700:	f847 3b98 	str.w	r3, [r7], #152
 8004704:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <_ZN18mainScreenViewBaseD0Ev+0x7c>)
 8004706:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 800470a:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 800470e:	443c      	add	r4, r7
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004710:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004714:	4a18      	ldr	r2, [pc, #96]	; (8004778 <_ZN18mainScreenViewBaseD0Ev+0x80>)
 8004716:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 800471a:	4a18      	ldr	r2, [pc, #96]	; (800477c <_ZN18mainScreenViewBaseD0Ev+0x84>)
 800471c:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 8004720:	f510 76f0 	adds.w	r6, r0, #480	; 0x1e0
 8004724:	d008      	beq.n	8004738 <_ZN18mainScreenViewBaseD0Ev+0x40>
 8004726:	42a6      	cmp	r6, r4
 8004728:	d006      	beq.n	8004738 <_ZN18mainScreenViewBaseD0Ev+0x40>
 800472a:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4620      	mov	r0, r4
 8004734:	4798      	blx	r3
 8004736:	e7f6      	b.n	8004726 <_ZN18mainScreenViewBaseD0Ev+0x2e>
 8004738:	4638      	mov	r0, r7
 800473a:	f000 fe15 	bl	8005368 <_ZN21wifiMenuContainerBaseD1Ev>
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <_ZN18mainScreenViewBaseD0Ev+0x88>)
 8004740:	66eb      	str	r3, [r5, #108]	; 0x6c
 8004742:	4a10      	ldr	r2, [pc, #64]	; (8004784 <_ZN18mainScreenViewBaseD0Ev+0x8c>)
 8004744:	66ea      	str	r2, [r5, #108]	; 0x6c
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <_ZN18mainScreenViewBaseD0Ev+0x90>)
 8004748:	66eb      	str	r3, [r5, #108]	; 0x6c
 800474a:	4910      	ldr	r1, [pc, #64]	; (800478c <_ZN18mainScreenViewBaseD0Ev+0x94>)
 800474c:	6429      	str	r1, [r5, #64]	; 0x40
 800474e:	642a      	str	r2, [r5, #64]	; 0x40
 8004750:	642b      	str	r3, [r5, #64]	; 0x40
 8004752:	4a0f      	ldr	r2, [pc, #60]	; (8004790 <_ZN18mainScreenViewBaseD0Ev+0x98>)
 8004754:	602a      	str	r2, [r5, #0]
 8004756:	4a0f      	ldr	r2, [pc, #60]	; (8004794 <_ZN18mainScreenViewBaseD0Ev+0x9c>)
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <_ZN18mainScreenViewBaseD0Ev+0xa0>)
 800475c:	606a      	str	r2, [r5, #4]
 800475e:	606b      	str	r3, [r5, #4]
 8004760:	f642 4170 	movw	r1, #11376	; 0x2c70
 8004764:	4628      	mov	r0, r5
 8004766:	f01e fb06 	bl	8022d76 <_ZdlPvj>
 800476a:	4628      	mov	r0, r5
 800476c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800476e:	bf00      	nop
 8004770:	08025618 	.word	0x08025618
 8004774:	08025fa4 	.word	0x08025fa4
 8004778:	080255cc 	.word	0x080255cc
 800477c:	080255b4 	.word	0x080255b4
 8004780:	08026978 	.word	0x08026978
 8004784:	0802554c 	.word	0x0802554c
 8004788:	08026b18 	.word	0x08026b18
 800478c:	08026818 	.word	0x08026818
 8004790:	080255e4 	.word	0x080255e4
 8004794:	08026bec 	.word	0x08026bec
 8004798:	08026414 	.word	0x08026414

0800479c <_ZN18mainScreenViewBaseC1Ev>:
mainScreenViewBase::mainScreenViewBase()
 800479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a0:	b083      	sub	sp, #12
 80047a2:	4605      	mov	r5, r0
        : presenter(0)
 80047a4:	f014 fbda 	bl	8018f5c <_ZN8touchgfx6ScreenC1Ev>
 80047a8:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <_ZN18mainScreenViewBaseC1Ev+0x15c>)
 80047aa:	602b      	str	r3, [r5, #0]
 80047ac:	2400      	movs	r4, #0
 80047ae:	63ec      	str	r4, [r5, #60]	; 0x3c
 80047b0:	462e      	mov	r6, r5
 80047b2:	4b52      	ldr	r3, [pc, #328]	; (80048fc <_ZN18mainScreenViewBaseC1Ev+0x160>)
 80047b4:	f846 3b40 	str.w	r3, [r6], #64
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80047b8:	f04f 0926 	mov.w	r9, #38	; 0x26
 80047bc:	464a      	mov	r2, r9
 80047be:	4621      	mov	r1, r4
 80047c0:	4630      	mov	r0, r6
 80047c2:	f01e fc9d 	bl	8023100 <memset>
          visible(true)
 80047c6:	f8df b144 	ldr.w	fp, [pc, #324]	; 800490c <_ZN18mainScreenViewBaseC1Ev+0x170>
 80047ca:	f8c5 b040 	str.w	fp, [r5, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 80047ce:	80b4      	strh	r4, [r6, #4]
 80047d0:	80f4      	strh	r4, [r6, #6]
 80047d2:	8134      	strh	r4, [r6, #8]
 80047d4:	8174      	strh	r4, [r6, #10]
 80047d6:	81b4      	strh	r4, [r6, #12]
 80047d8:	81f4      	strh	r4, [r6, #14]
 80047da:	8234      	strh	r4, [r6, #16]
 80047dc:	8274      	strh	r4, [r6, #18]
 80047de:	6174      	str	r4, [r6, #20]
 80047e0:	61b4      	str	r4, [r6, #24]
 80047e2:	61f4      	str	r4, [r6, #28]
 80047e4:	8434      	strh	r4, [r6, #32]
 80047e6:	8474      	strh	r4, [r6, #34]	; 0x22
 80047e8:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 80047ec:	f04f 0a01 	mov.w	sl, #1
 80047f0:	f886 a025 	strb.w	sl, [r6, #37]	; 0x25
 80047f4:	4b42      	ldr	r3, [pc, #264]	; (8004900 <_ZN18mainScreenViewBaseC1Ev+0x164>)
 80047f6:	642b      	str	r3, [r5, #64]	; 0x40
 80047f8:	4b42      	ldr	r3, [pc, #264]	; (8004904 <_ZN18mainScreenViewBaseC1Ev+0x168>)
 80047fa:	642b      	str	r3, [r5, #64]	; 0x40
 80047fc:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8004800:	f886 8026 	strb.w	r8, [r6, #38]	; 0x26
        : color(col)
 8004804:	62b4      	str	r4, [r6, #40]	; 0x28
 8004806:	f105 076c 	add.w	r7, r5, #108	; 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 800480a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800480e:	f8ad 3000 	strh.w	r3, [sp]
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8004812:	464a      	mov	r2, r9
 8004814:	4621      	mov	r1, r4
 8004816:	4638      	mov	r0, r7
 8004818:	f01e fc72 	bl	8023100 <memset>
 800481c:	f8c5 b06c 	str.w	fp, [r5, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 8004820:	80bc      	strh	r4, [r7, #4]
 8004822:	80fc      	strh	r4, [r7, #6]
 8004824:	813c      	strh	r4, [r7, #8]
 8004826:	817c      	strh	r4, [r7, #10]
 8004828:	81bc      	strh	r4, [r7, #12]
 800482a:	81fc      	strh	r4, [r7, #14]
 800482c:	823c      	strh	r4, [r7, #16]
 800482e:	827c      	strh	r4, [r7, #18]
 8004830:	617c      	str	r4, [r7, #20]
 8004832:	61bc      	str	r4, [r7, #24]
 8004834:	61fc      	str	r4, [r7, #28]
 8004836:	843c      	strh	r4, [r7, #32]
 8004838:	847c      	strh	r4, [r7, #34]	; 0x22
 800483a:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 800483e:	f887 a025 	strb.w	sl, [r7, #37]	; 0x25
 8004842:	4b2f      	ldr	r3, [pc, #188]	; (8004900 <_ZN18mainScreenViewBaseC1Ev+0x164>)
 8004844:	66eb      	str	r3, [r5, #108]	; 0x6c
 8004846:	4b30      	ldr	r3, [pc, #192]	; (8004908 <_ZN18mainScreenViewBaseC1Ev+0x16c>)
 8004848:	66eb      	str	r3, [r5, #108]	; 0x6c
 800484a:	f8bd 3000 	ldrh.w	r3, [sp]
 800484e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004850:	f887 8028 	strb.w	r8, [r7, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8004854:	4669      	mov	r1, sp
 8004856:	4638      	mov	r0, r7
 8004858:	f011 f895 	bl	8015986 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800485c:	f105 0898 	add.w	r8, r5, #152	; 0x98
 8004860:	4640      	mov	r0, r8
 8004862:	f002 fc91 	bl	8007188 <_ZN17wifiMenuContainerC1Ev>
        setX(x);
 8004866:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	4621      	mov	r1, r4
 800486c:	4630      	mov	r0, r6
 800486e:	4798      	blx	r3
        setY(y);
 8004870:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004874:	4621      	mov	r1, r4
 8004876:	4630      	mov	r0, r6
 8004878:	4798      	blx	r3
        setWidth(width);
 800487a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004882:	4630      	mov	r0, r6
 8004884:	4798      	blx	r3
        setHeight(height);
 8004886:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800488e:	4630      	mov	r0, r6
 8004890:	4798      	blx	r3
        : color(col)
 8004892:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004896:	66ab      	str	r3, [r5, #104]	; 0x68
        setX(x);
 8004898:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	4621      	mov	r1, r4
 800489e:	4638      	mov	r0, r7
 80048a0:	4798      	blx	r3
        setY(y);
 80048a2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80048a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a6:	4621      	mov	r1, r4
 80048a8:	4638      	mov	r0, r7
 80048aa:	4798      	blx	r3
 80048ac:	f8ad 4004 	strh.w	r4, [sp, #4]
    bg1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));
 80048b0:	a901      	add	r1, sp, #4
 80048b2:	4638      	mov	r0, r7
 80048b4:	f011 f867 	bl	8015986 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 80048b8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	4621      	mov	r1, r4
 80048c0:	4640      	mov	r0, r8
 80048c2:	4798      	blx	r3
        setY(y);
 80048c4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80048c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ca:	4621      	mov	r1, r4
 80048cc:	4640      	mov	r0, r8
 80048ce:	4798      	blx	r3
        visible = vis;
 80048d0:	f885 40bd 	strb.w	r4, [r5, #189]	; 0xbd
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80048d4:	1d2c      	adds	r4, r5, #4
 80048d6:	4631      	mov	r1, r6
 80048d8:	4620      	mov	r0, r4
 80048da:	f00e f939 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80048de:	4639      	mov	r1, r7
 80048e0:	4620      	mov	r0, r4
 80048e2:	f00e f935 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80048e6:	4641      	mov	r1, r8
 80048e8:	4620      	mov	r0, r4
 80048ea:	f00e f931 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80048ee:	4628      	mov	r0, r5
 80048f0:	b003      	add	sp, #12
 80048f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f6:	bf00      	nop
 80048f8:	080255e4 	.word	0x080255e4
 80048fc:	08025618 	.word	0x08025618
 8004900:	0802554c 	.word	0x0802554c
 8004904:	08026818 	.word	0x08026818
 8004908:	08026978 	.word	0x08026978
 800490c:	08026b18 	.word	0x08026b18

08004910 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8004910:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004912:	4770      	bx	lr

08004914 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8004914:	b530      	push	{r4, r5, lr}
 8004916:	b085      	sub	sp, #20
 8004918:	4604      	mov	r4, r0
        rect.width = width;
 800491a:	8101      	strh	r1, [r0, #8]
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 800491c:	466d      	mov	r5, sp
 800491e:	6803      	ldr	r3, [r0, #0]
 8004920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004924:	4601      	mov	r1, r0
 8004926:	4628      	mov	r0, r5
 8004928:	4798      	blx	r3
 800492a:	343c      	adds	r4, #60	; 0x3c
 800492c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004930:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004934:	b005      	add	sp, #20
 8004936:	bd30      	pop	{r4, r5, pc}

08004938 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8004938:	b530      	push	{r4, r5, lr}
 800493a:	b085      	sub	sp, #20
 800493c:	4604      	mov	r4, r0
        rect.height = height;
 800493e:	8141      	strh	r1, [r0, #10]
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8004940:	466d      	mov	r5, sp
 8004942:	6803      	ldr	r3, [r0, #0]
 8004944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004948:	4601      	mov	r1, r0
 800494a:	4628      	mov	r0, r5
 800494c:	4798      	blx	r3
 800494e:	343c      	adds	r4, #60	; 0x3c
 8004950:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004958:	b005      	add	sp, #20
 800495a:	bd30      	pop	{r4, r5, pc}

0800495c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800495c:	2200      	movs	r2, #0
 800495e:	8002      	strh	r2, [r0, #0]
 8004960:	8042      	strh	r2, [r0, #2]
 8004962:	8082      	strh	r2, [r0, #4]
 8004964:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8004966:	4770      	bx	lr

08004968 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004968:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 800496c:	4770      	bx	lr

0800496e <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800496e:	b538      	push	{r3, r4, r5, lr}
 8004970:	4604      	mov	r4, r0
 8004972:	4615      	mov	r5, r2
    {
        setX(x);
 8004974:	6803      	ldr	r3, [r0, #0]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	4798      	blx	r3
        setBaselineY(baselineY);
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497e:	4629      	mov	r1, r5
 8004980:	4620      	mov	r0, r4
 8004982:	4798      	blx	r3
    }
 8004984:	bd38      	pop	{r3, r4, r5, pc}

08004986 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8004986:	2000      	movs	r0, #0
 8004988:	4770      	bx	lr

0800498a <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800498a:	2200      	movs	r2, #0
 800498c:	8002      	strh	r2, [r0, #0]
 800498e:	8042      	strh	r2, [r0, #2]
 8004990:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004994:	8081      	strh	r1, [r0, #4]
 8004996:	80c1      	strh	r1, [r0, #6]
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8004998:	6082      	str	r2, [r0, #8]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 800499a:	4770      	bx	lr

0800499c <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 800499c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800499e:	4770      	bx	lr

080049a0 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 80049a0:	b510      	push	{r4, lr}
 80049a2:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 80049a4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80049a6:	b140      	cbz	r0, 80049ba <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
 80049a8:	6803      	ldr	r3, [r0, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4798      	blx	r3
 80049ae:	b120      	cbz	r0, 80049ba <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
        {
            action->execute(*this);
 80049b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80049b2:	6803      	ldr	r3, [r0, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	4621      	mov	r1, r4
 80049b8:	4798      	blx	r3
        }
    }
 80049ba:	bd10      	pop	{r4, pc}

080049bc <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
    {
    }
 80049bc:	4770      	bx	lr

080049be <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
    {
    }
 80049be:	4770      	bx	lr

080049c0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4604      	mov	r4, r0
 80049c4:	460d      	mov	r5, r1
        return pressed;
 80049c6:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 80049ca:	790b      	ldrb	r3, [r1, #4]
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0d      	iteet	eq
 80049d0:	2201      	moveq	r2, #1
 80049d2:	2200      	movne	r2, #0
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	42b3      	cmp	r3, r6
 80049da:	d004      	beq.n	80049e6 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x26>
        {
            setPressed(newPressedValue);
            invalidate();
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 80049dc:	b116      	cbz	r6, 80049e4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x24>
 80049de:	792b      	ldrb	r3, [r5, #4]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d00b      	beq.n	80049fc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
        {
            executeAction();
        }
    }
 80049e4:	bd70      	pop	{r4, r5, r6, pc}
        pressed = isPressed;
 80049e6:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
        handlePressedUpdated();
 80049ea:	6803      	ldr	r3, [r0, #0]
 80049ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f0:	4798      	blx	r3
            invalidate();
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	4620      	mov	r0, r4
 80049f8:	4798      	blx	r3
 80049fa:	e7ef      	b.n	80049dc <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1c>
            executeAction();
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	4620      	mov	r0, r4
 8004a04:	4798      	blx	r3
    }
 8004a06:	e7ed      	b.n	80049e4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x24>

08004a08 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 8004a08:	4a03      	ldr	r2, [pc, #12]	; (8004a18 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x10>)
 8004a0a:	6002      	str	r2, [r0, #0]
class Container : public Drawable
 8004a0c:	4a03      	ldr	r2, [pc, #12]	; (8004a1c <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x14>)
 8004a0e:	6002      	str	r2, [r0, #0]
    {
 8004a10:	4a03      	ldr	r2, [pc, #12]	; (8004a20 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x18>)
 8004a12:	6002      	str	r2, [r0, #0]
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	08025820 	.word	0x08025820
 8004a1c:	08026414 	.word	0x08026414
 8004a20:	08026b18 	.word	0x08026b18

08004a24 <_ZN26wifiInfoLargeContainerBase15elementSelectedEv>:
     * Virtual Action Handlers
     */
    virtual void elementSelected()
    {
        // Override and implement this function in wifiInfoLargeContainer
    }
 8004a24:	4770      	bx	lr
	...

08004a28 <_ZN26wifiInfoLargeContainerBaseD1Ev>:
    add(encryption);
    add(signalStrengthIcon);
    add(listButtonOverlay);
}

wifiInfoLargeContainerBase::~wifiInfoLargeContainerBase()
 8004a28:	b4f0      	push	{r4, r5, r6, r7}
 8004a2a:	4a20      	ldr	r2, [pc, #128]	; (8004aac <_ZN26wifiInfoLargeContainerBaseD1Ev+0x84>)
 8004a2c:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004a2e:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x88>)
 8004a30:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
    }
 8004a34:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x8c>)
 8004a36:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 8004a3a:	4a1f      	ldr	r2, [pc, #124]	; (8004ab8 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x90>)
 8004a3c:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
/**
 * The BoxWithBorder class is used to create objects that can draw a box with a border on the
 * display. The width of the border can be specified. If the border width is 0 the
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
 8004a40:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <_ZN26wifiInfoLargeContainerBaseD1Ev+0x94>)
 8004a42:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
class Box : public Widget
 8004a46:	4a1e      	ldr	r2, [pc, #120]	; (8004ac0 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x98>)
 8004a48:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8004a4c:	491d      	ldr	r1, [pc, #116]	; (8004ac4 <_ZN26wifiInfoLargeContainerBaseD1Ev+0x9c>)
 8004a4e:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
 8004a52:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xa0>)
 8004a54:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
class ClickButtonTrigger : public AbstractButtonContainer
 8004a58:	4c1c      	ldr	r4, [pc, #112]	; (8004acc <_ZN26wifiInfoLargeContainerBaseD1Ev+0xa4>)
 8004a5a:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
 8004a5e:	4c1c      	ldr	r4, [pc, #112]	; (8004ad0 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xa8>)
 8004a60:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
 8004a64:	4c1b      	ldr	r4, [pc, #108]	; (8004ad4 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xac>)
 8004a66:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
 8004a6a:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
class Image : public Widget
 8004a6e:	4d1a      	ldr	r5, [pc, #104]	; (8004ad8 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xb0>)
 8004a70:	f8c0 50c4 	str.w	r5, [r0, #196]	; 0xc4
 8004a74:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 8004a78:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004a7c:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004ae8 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xc0>
 8004a80:	f8c0 c078 	str.w	ip, [r0, #120]	; 0x78
class TextAreaWithWildcardBase : public TextArea
 8004a84:	4f15      	ldr	r7, [pc, #84]	; (8004adc <_ZN26wifiInfoLargeContainerBaseD1Ev+0xb4>)
 8004a86:	6787      	str	r7, [r0, #120]	; 0x78
class TextArea : public Widget
 8004a88:	4e15      	ldr	r6, [pc, #84]	; (8004ae0 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xb8>)
 8004a8a:	6786      	str	r6, [r0, #120]	; 0x78
    {
 8004a8c:	4d15      	ldr	r5, [pc, #84]	; (8004ae4 <_ZN26wifiInfoLargeContainerBaseD1Ev+0xbc>)
 8004a8e:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
 8004a92:	6781      	str	r1, [r0, #120]	; 0x78
 8004a94:	6782      	str	r2, [r0, #120]	; 0x78
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004a96:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
class TextAreaWithWildcardBase : public TextArea
 8004a9a:	62c7      	str	r7, [r0, #44]	; 0x2c
 8004a9c:	62c6      	str	r6, [r0, #44]	; 0x2c
 8004a9e:	6545      	str	r5, [r0, #84]	; 0x54
 8004aa0:	62c1      	str	r1, [r0, #44]	; 0x2c
 8004aa2:	62c2      	str	r2, [r0, #44]	; 0x2c
 8004aa4:	6004      	str	r4, [r0, #0]
 8004aa6:	6002      	str	r2, [r0, #0]
{

}
 8004aa8:	bcf0      	pop	{r4, r5, r6, r7}
 8004aaa:	4770      	bx	lr
 8004aac:	08025a24 	.word	0x08025a24
 8004ab0:	08025a0c 	.word	0x08025a0c
 8004ab4:	080258bc 	.word	0x080258bc
 8004ab8:	08025970 	.word	0x08025970
 8004abc:	08026910 	.word	0x08026910
 8004ac0:	08026818 	.word	0x08026818
 8004ac4:	0802554c 	.word	0x0802554c
 8004ac8:	08026b18 	.word	0x08026b18
 8004acc:	080258d4 	.word	0x080258d4
 8004ad0:	08025820 	.word	0x08025820
 8004ad4:	08026414 	.word	0x08026414
 8004ad8:	08026978 	.word	0x08026978
 8004adc:	08026880 	.word	0x08026880
 8004ae0:	08026788 	.word	0x08026788
 8004ae4:	08024a78 	.word	0x08024a78
 8004ae8:	08025790 	.word	0x08025790

08004aec <_ZN26wifiInfoLargeContainerBase10initializeEv>:

void wifiInfoLargeContainerBase::initialize()
{

}
 8004aec:	4770      	bx	lr

08004aee <_ZN26wifiInfoLargeContainerBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void wifiInfoLargeContainerBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8004aee:	b508      	push	{r3, lr}
    if (&src == &listButtonOverlay)
 8004af0:	f100 03f0 	add.w	r3, r0, #240	; 0xf0
 8004af4:	428b      	cmp	r3, r1
 8004af6:	d000      	beq.n	8004afa <_ZN26wifiInfoLargeContainerBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc>
        //Interaction1
        //When listButtonOverlay clicked call virtual function
        //Call elementSelected
        elementSelected();
    }
}
 8004af8:	bd08      	pop	{r3, pc}
        elementSelected();
 8004afa:	6803      	ldr	r3, [r0, #0]
 8004afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b00:	4798      	blx	r3
}
 8004b02:	e7f9      	b.n	8004af8 <_ZN26wifiInfoLargeContainerBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa>

08004b04 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
 8004b04:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x14>)
 8004b06:	6002      	str	r2, [r0, #0]
 8004b08:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x18>)
 8004b0a:	6002      	str	r2, [r0, #0]
 8004b0c:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x1c>)
 8004b0e:	6002      	str	r2, [r0, #0]
 8004b10:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 8004b12:	6002      	str	r2, [r0, #0]
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	080258d4 	.word	0x080258d4
 8004b1c:	08025820 	.word	0x08025820
 8004b20:	08026414 	.word	0x08026414
 8004b24:	08026b18 	.word	0x08026b18

08004b28 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
        return pressed;
 8004b28:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8004b2c:	b14b      	cbz	r3, 8004b42 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x1a>
 8004b2e:	f100 026c 	add.w	r2, r0, #108	; 0x6c
 8004b32:	6812      	ldr	r2, [r2, #0]
        color = newColor;
 8004b34:	65c2      	str	r2, [r0, #92]	; 0x5c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004b36:	b13b      	cbz	r3, 8004b48 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x20>
 8004b38:	f100 0374 	add.w	r3, r0, #116	; 0x74
 8004b3c:	681b      	ldr	r3, [r3, #0]
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 8004b3e:	6603      	str	r3, [r0, #96]	; 0x60
        T::handlePressedUpdated();
    }
 8004b40:	4770      	bx	lr
        borderBox.setColor(T::getPressed() ? down : up);
 8004b42:	f100 0268 	add.w	r2, r0, #104	; 0x68
 8004b46:	e7f4      	b.n	8004b32 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xa>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004b48:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8004b4c:	e7f6      	b.n	8004b3c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x14>
	...

08004b50 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004b50:	4a02      	ldr	r2, [pc, #8]	; (8004b5c <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED1Ev+0xc>)
 8004b52:	6002      	str	r2, [r0, #0]
    }
 8004b54:	4a02      	ldr	r2, [pc, #8]	; (8004b60 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x10>)
 8004b56:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	08025a0c 	.word	0x08025a0c
 8004b60:	080258bc 	.word	0x080258bc

08004b64 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x24>)
 8004b66:	6002      	str	r2, [r0, #0]
class BoxWithBorder : public Box
 8004b68:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x28>)
 8004b6a:	6342      	str	r2, [r0, #52]	; 0x34
class Box : public Widget
 8004b6c:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 8004b6e:	6342      	str	r2, [r0, #52]	; 0x34
 8004b70:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x30>)
 8004b72:	6342      	str	r2, [r0, #52]	; 0x34
 8004b74:	4a08      	ldr	r2, [pc, #32]	; (8004b98 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x34>)
 8004b76:	6342      	str	r2, [r0, #52]	; 0x34
 8004b78:	4908      	ldr	r1, [pc, #32]	; (8004b9c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x38>)
 8004b7a:	6001      	str	r1, [r0, #0]
class AbstractButtonContainer : public Container
 8004b7c:	4908      	ldr	r1, [pc, #32]	; (8004ba0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x3c>)
 8004b7e:	6001      	str	r1, [r0, #0]
 8004b80:	4908      	ldr	r1, [pc, #32]	; (8004ba4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x40>)
 8004b82:	6001      	str	r1, [r0, #0]
 8004b84:	6002      	str	r2, [r0, #0]
 8004b86:	4770      	bx	lr
 8004b88:	08025970 	.word	0x08025970
 8004b8c:	08026910 	.word	0x08026910
 8004b90:	08026818 	.word	0x08026818
 8004b94:	0802554c 	.word	0x0802554c
 8004b98:	08026b18 	.word	0x08026b18
 8004b9c:	080258d4 	.word	0x080258d4
 8004ba0:	08025820 	.word	0x08025820
 8004ba4:	08026414 	.word	0x08026414

08004ba8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004ba8:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x1c>)
 8004baa:	6002      	str	r2, [r0, #0]
class TextAreaWithWildcardBase : public TextArea
 8004bac:	4a06      	ldr	r2, [pc, #24]	; (8004bc8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8004bae:	6002      	str	r2, [r0, #0]
 8004bb0:	4a06      	ldr	r2, [pc, #24]	; (8004bcc <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x24>)
 8004bb2:	6002      	str	r2, [r0, #0]
 8004bb4:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x28>)
 8004bb6:	6282      	str	r2, [r0, #40]	; 0x28
 8004bb8:	4a06      	ldr	r2, [pc, #24]	; (8004bd4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x2c>)
 8004bba:	6002      	str	r2, [r0, #0]
 8004bbc:	4a06      	ldr	r2, [pc, #24]	; (8004bd8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x30>)
 8004bbe:	6002      	str	r2, [r0, #0]
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	08025790 	.word	0x08025790
 8004bc8:	08026880 	.word	0x08026880
 8004bcc:	08026788 	.word	0x08026788
 8004bd0:	08024a78 	.word	0x08024a78
 8004bd4:	0802554c 	.word	0x0802554c
 8004bd8:	08026b18 	.word	0x08026b18

08004bdc <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004be0:	6844      	ldr	r4, [r0, #4]
 8004be2:	68c2      	ldr	r2, [r0, #12]
 8004be4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004be8:	f012 0f01 	tst.w	r2, #1
 8004bec:	d102      	bne.n	8004bf4 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x18>
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4798      	blx	r3
    }
 8004bf2:	bd10      	pop	{r4, pc}
 8004bf4:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8004bf8:	f854 200c 	ldr.w	r2, [r4, ip]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	58d3      	ldr	r3, [r2, r3]
 8004c00:	e7f6      	b.n	8004bf0 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x14>

08004c02 <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8004c02:	6843      	ldr	r3, [r0, #4]
 8004c04:	b14b      	cbz	r3, 8004c1a <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x18>
 8004c06:	6883      	ldr	r3, [r0, #8]
 8004c08:	b10b      	cbz	r3, 8004c0e <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	4770      	bx	lr
 8004c0e:	68c3      	ldr	r3, [r0, #12]
 8004c10:	f013 0f01 	tst.w	r3, #1
 8004c14:	d003      	beq.n	8004c1e <_ZNK8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x1c>
 8004c16:	2001      	movs	r0, #1
 8004c18:	4770      	bx	lr
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	4770      	bx	lr
 8004c1e:	2000      	movs	r0, #0
    }
 8004c20:	4770      	bx	lr

08004c22 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
        return alpha;
 8004c22:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004c26:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        borderBox.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8004c2a:	4770      	bx	lr

08004c2c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x28>)
 8004c32:	6003      	str	r3, [r0, #0]
class TextAreaWithWildcardBase : public TextArea
 8004c34:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x2c>)
 8004c36:	6003      	str	r3, [r0, #0]
 8004c38:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x30>)
 8004c3a:	6003      	str	r3, [r0, #0]
 8004c3c:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x34>)
 8004c3e:	6283      	str	r3, [r0, #40]	; 0x28
 8004c40:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x38>)
 8004c42:	6003      	str	r3, [r0, #0]
 8004c44:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev+0x3c>)
 8004c46:	6003      	str	r3, [r0, #0]
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8004c48:	214c      	movs	r1, #76	; 0x4c
 8004c4a:	f01e f894 	bl	8022d76 <_ZdlPvj>
 8004c4e:	4620      	mov	r0, r4
 8004c50:	bd10      	pop	{r4, pc}
 8004c52:	bf00      	nop
 8004c54:	08025790 	.word	0x08025790
 8004c58:	08026880 	.word	0x08026880
 8004c5c:	08026788 	.word	0x08026788
 8004c60:	08024a78 	.word	0x08024a78
 8004c64:	0802554c 	.word	0x0802554c
 8004c68:	08026b18 	.word	0x08026b18

08004c6c <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
class AbstractButtonContainer : public Container
 8004c6c:	b510      	push	{r4, lr}
 8004c6e:	4604      	mov	r4, r0
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <_ZN8touchgfx23AbstractButtonContainerD0Ev+0x1c>)
 8004c72:	6003      	str	r3, [r0, #0]
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <_ZN8touchgfx23AbstractButtonContainerD0Ev+0x20>)
 8004c76:	6003      	str	r3, [r0, #0]
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <_ZN8touchgfx23AbstractButtonContainerD0Ev+0x24>)
 8004c7a:	6003      	str	r3, [r0, #0]
 8004c7c:	2134      	movs	r1, #52	; 0x34
 8004c7e:	f01e f87a 	bl	8022d76 <_ZdlPvj>
 8004c82:	4620      	mov	r0, r4
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	bf00      	nop
 8004c88:	08025820 	.word	0x08025820
 8004c8c:	08026414 	.word	0x08026414
 8004c90:	08026b18 	.word	0x08026b18

08004c94 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 8004c94:	b510      	push	{r4, lr}
 8004c96:	4604      	mov	r4, r0
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x20>)
 8004c9a:	6003      	str	r3, [r0, #0]
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x24>)
 8004c9e:	6003      	str	r3, [r0, #0]
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x28>)
 8004ca2:	6003      	str	r3, [r0, #0]
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <_ZN8touchgfx18ClickButtonTriggerD0Ev+0x2c>)
 8004ca6:	6003      	str	r3, [r0, #0]
 8004ca8:	2134      	movs	r1, #52	; 0x34
 8004caa:	f01e f864 	bl	8022d76 <_ZdlPvj>
 8004cae:	4620      	mov	r0, r4
 8004cb0:	bd10      	pop	{r4, pc}
 8004cb2:	bf00      	nop
 8004cb4:	080258d4 	.word	0x080258d4
 8004cb8:	08025820 	.word	0x08025820
 8004cbc:	08026414 	.word	0x08026414
 8004cc0:	08026b18 	.word	0x08026b18

08004cc4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class BoxWithBorderButtonStyle : public T
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x30>)
 8004cca:	6003      	str	r3, [r0, #0]
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x34>)
 8004cce:	6343      	str	r3, [r0, #52]	; 0x34
class Box : public Widget
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x38>)
 8004cd2:	6343      	str	r3, [r0, #52]	; 0x34
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x3c>)
 8004cd6:	6343      	str	r3, [r0, #52]	; 0x34
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x40>)
 8004cda:	6343      	str	r3, [r0, #52]	; 0x34
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x44>)
 8004cde:	6002      	str	r2, [r0, #0]
 8004ce0:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x48>)
 8004ce2:	6002      	str	r2, [r0, #0]
 8004ce4:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev+0x4c>)
 8004ce6:	6002      	str	r2, [r0, #0]
 8004ce8:	6003      	str	r3, [r0, #0]
 8004cea:	2178      	movs	r1, #120	; 0x78
 8004cec:	f01e f843 	bl	8022d76 <_ZdlPvj>
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	bd10      	pop	{r4, pc}
 8004cf4:	08025970 	.word	0x08025970
 8004cf8:	08026910 	.word	0x08026910
 8004cfc:	08026818 	.word	0x08026818
 8004d00:	0802554c 	.word	0x0802554c
 8004d04:	08026b18 	.word	0x08026b18
 8004d08:	080258d4 	.word	0x080258d4
 8004d0c:	08025820 	.word	0x08025820
 8004d10:	08026414 	.word	0x08026414

08004d14 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004d14:	b510      	push	{r4, lr}
 8004d16:	4604      	mov	r4, r0
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED0Ev+0x18>)
 8004d1a:	6003      	str	r3, [r0, #0]
    }
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <_ZN8touchgfx8CallbackI26wifiInfoLargeContainerBaseRKNS_23AbstractButtonContainerEvvED0Ev+0x1c>)
 8004d1e:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004d20:	2110      	movs	r1, #16
 8004d22:	f01e f828 	bl	8022d76 <_ZdlPvj>
 8004d26:	4620      	mov	r0, r4
 8004d28:	bd10      	pop	{r4, pc}
 8004d2a:	bf00      	nop
 8004d2c:	08025a0c 	.word	0x08025a0c
 8004d30:	080258bc 	.word	0x080258bc

08004d34 <_ZN26wifiInfoLargeContainerBaseD0Ev>:
wifiInfoLargeContainerBase::~wifiInfoLargeContainerBase()
 8004d34:	b510      	push	{r4, lr}
 8004d36:	4604      	mov	r4, r0
}
 8004d38:	f7ff fe76 	bl	8004a28 <_ZN26wifiInfoLargeContainerBaseD1Ev>
 8004d3c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004d40:	4620      	mov	r0, r4
 8004d42:	f01e f818 	bl	8022d76 <_ZdlPvj>
 8004d46:	4620      	mov	r0, r4
 8004d48:	bd10      	pop	{r4, pc}
	...

08004d4c <_ZN8touchgfx8TextArea12setBaselineYEs>:
    virtual void setBaselineY(int16_t baselineY)
 8004d4c:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8004d4e:	6803      	ldr	r3, [r0, #0]
 8004d50:	6b5d      	ldr	r5, [r3, #52]	; 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	b1a3      	cbz	r3, 8004d82 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 8004d58:	4604      	mov	r4, r0
 8004d5a:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
 8004d5c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8004d5e:	4910      	ldr	r1, [pc, #64]	; (8004da0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8004d60:	8809      	ldrh	r1, [r1, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004d62:	428a      	cmp	r2, r1
 8004d64:	d213      	bcs.n	8004d8e <_ZN8touchgfx8TextArea12setBaselineYEs+0x42>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004d66:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004d72:	6803      	ldr	r3, [r0, #0]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	4798      	blx	r3
 8004d78:	1a31      	subs	r1, r6, r0
 8004d7a:	b209      	sxth	r1, r1
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	47a8      	blx	r5
    }
 8004d80:	bd70      	pop	{r4, r5, r6, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004d82:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004d84:	4a09      	ldr	r2, [pc, #36]	; (8004dac <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004d86:	216c      	movs	r1, #108	; 0x6c
 8004d88:	4809      	ldr	r0, [pc, #36]	; (8004db0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004d8a:	f01e f823 	bl	8022dd4 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004d8e:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004d90:	4a06      	ldr	r2, [pc, #24]	; (8004dac <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8004d92:	216d      	movs	r1, #109	; 0x6d
 8004d94:	4806      	ldr	r0, [pc, #24]	; (8004db0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004d96:	f01e f81d 	bl	8022dd4 <__assert_func>
 8004d9a:	bf00      	nop
 8004d9c:	2400f490 	.word	0x2400f490
 8004da0:	2400f494 	.word	0x2400f494
 8004da4:	2400f498 	.word	0x2400f498
 8004da8:	08025644 	.word	0x08025644
 8004dac:	08025688 	.word	0x08025688
 8004db0:	080256c4 	.word	0x080256c4
 8004db4:	0802570c 	.word	0x0802570c

08004db8 <_ZN26wifiInfoLargeContainerBaseC1Ev>:
wifiInfoLargeContainerBase::wifiInfoLargeContainerBase() :
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	b093      	sub	sp, #76	; 0x4c
 8004dbe:	4605      	mov	r5, r0
          visible(true)
 8004dc0:	4fbc      	ldr	r7, [pc, #752]	; (80050b4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004dc2:	6007      	str	r7, [r0, #0]
        : x(0), y(0), width(0), height(0)
 8004dc4:	2400      	movs	r4, #0
 8004dc6:	8084      	strh	r4, [r0, #4]
 8004dc8:	80c4      	strh	r4, [r0, #6]
 8004dca:	8104      	strh	r4, [r0, #8]
 8004dcc:	8144      	strh	r4, [r0, #10]
 8004dce:	8184      	strh	r4, [r0, #12]
 8004dd0:	81c4      	strh	r4, [r0, #14]
 8004dd2:	8204      	strh	r4, [r0, #16]
 8004dd4:	8244      	strh	r4, [r0, #18]
 8004dd6:	6144      	str	r4, [r0, #20]
 8004dd8:	6184      	str	r4, [r0, #24]
 8004dda:	61c4      	str	r4, [r0, #28]
 8004ddc:	8404      	strh	r4, [r0, #32]
 8004dde:	8444      	strh	r4, [r0, #34]	; 0x22
 8004de0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8004de4:	f04f 0b01 	mov.w	fp, #1
 8004de8:	f880 b025 	strb.w	fp, [r0, #37]	; 0x25
          firstChild(0)
 8004dec:	4bb2      	ldr	r3, [pc, #712]	; (80050b8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x300>)
 8004dee:	6003      	str	r3, [r0, #0]
 8004df0:	6284      	str	r4, [r0, #40]	; 0x28
    flexButtonCallback(this, &wifiInfoLargeContainerBase::flexButtonCallbackHandler)
 8004df2:	4606      	mov	r6, r0
 8004df4:	4bb1      	ldr	r3, [pc, #708]	; (80050bc <_ZN26wifiInfoLargeContainerBaseC1Ev+0x304>)
 8004df6:	f846 3b2c 	str.w	r3, [r6], #44
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004dfa:	2226      	movs	r2, #38	; 0x26
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f01e f97e 	bl	8023100 <memset>
 8004e04:	62ef      	str	r7, [r5, #44]	; 0x2c
 8004e06:	80b4      	strh	r4, [r6, #4]
 8004e08:	80f4      	strh	r4, [r6, #6]
 8004e0a:	8134      	strh	r4, [r6, #8]
 8004e0c:	8174      	strh	r4, [r6, #10]
 8004e0e:	81b4      	strh	r4, [r6, #12]
 8004e10:	81f4      	strh	r4, [r6, #14]
 8004e12:	8234      	strh	r4, [r6, #16]
 8004e14:	8274      	strh	r4, [r6, #18]
 8004e16:	6174      	str	r4, [r6, #20]
 8004e18:	61b4      	str	r4, [r6, #24]
 8004e1a:	61f4      	str	r4, [r6, #28]
 8004e1c:	8434      	strh	r4, [r6, #32]
 8004e1e:	8474      	strh	r4, [r6, #34]	; 0x22
 8004e20:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 8004e24:	f886 b025 	strb.w	fp, [r6, #37]	; 0x25
 8004e28:	4aa5      	ldr	r2, [pc, #660]	; (80050c0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 8004e2a:	62ea      	str	r2, [r5, #44]	; 0x2c
 8004e2c:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 80050f4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x33c>
 8004e30:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
        : typedTextId(id)
 8004e34:	49a3      	ldr	r1, [pc, #652]	; (80050c4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x30c>)
 8004e36:	62b1      	str	r1, [r6, #40]	; 0x28
 8004e38:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8004e3c:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
        : color(col)
 8004e40:	6334      	str	r4, [r6, #48]	; 0x30
 8004e42:	86b4      	strh	r4, [r6, #52]	; 0x34
 8004e44:	f886 a036 	strb.w	sl, [r6, #54]	; 0x36
 8004e48:	f886 4037 	strb.w	r4, [r6, #55]	; 0x37
 8004e4c:	f886 4038 	strb.w	r4, [r6, #56]	; 0x38
 8004e50:	f886 4039 	strb.w	r4, [r6, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004e54:	87b4      	strh	r4, [r6, #60]	; 0x3c
 8004e56:	87f4      	strh	r4, [r6, #62]	; 0x3e
 8004e58:	f8a6 a040 	strh.w	sl, [r6, #64]	; 0x40
 8004e5c:	f8a6 a042 	strh.w	sl, [r6, #66]	; 0x42
              text(0)
 8004e60:	6474      	str	r4, [r6, #68]	; 0x44
        : TextArea()
 8004e62:	f8df 9294 	ldr.w	r9, [pc, #660]	; 80050f8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x340>
 8004e66:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
        : TextAreaWithWildcardBase(), wc1(0)
 8004e6a:	4897      	ldr	r0, [pc, #604]	; (80050c8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x310>)
 8004e6c:	62e8      	str	r0, [r5, #44]	; 0x2c
 8004e6e:	676c      	str	r4, [r5, #116]	; 0x74
        : TextArea()
 8004e70:	f105 0778 	add.w	r7, r5, #120	; 0x78
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004e74:	2226      	movs	r2, #38	; 0x26
 8004e76:	4621      	mov	r1, r4
 8004e78:	4638      	mov	r0, r7
 8004e7a:	f01e f941 	bl	8023100 <memset>
 8004e7e:	4b8d      	ldr	r3, [pc, #564]	; (80050b4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004e80:	67ab      	str	r3, [r5, #120]	; 0x78
        : x(0), y(0), width(0), height(0)
 8004e82:	80bc      	strh	r4, [r7, #4]
 8004e84:	80fc      	strh	r4, [r7, #6]
 8004e86:	813c      	strh	r4, [r7, #8]
 8004e88:	817c      	strh	r4, [r7, #10]
 8004e8a:	81bc      	strh	r4, [r7, #12]
 8004e8c:	81fc      	strh	r4, [r7, #14]
 8004e8e:	823c      	strh	r4, [r7, #16]
 8004e90:	827c      	strh	r4, [r7, #18]
 8004e92:	617c      	str	r4, [r7, #20]
 8004e94:	61bc      	str	r4, [r7, #24]
 8004e96:	61fc      	str	r4, [r7, #28]
 8004e98:	843c      	strh	r4, [r7, #32]
 8004e9a:	847c      	strh	r4, [r7, #34]	; 0x22
 8004e9c:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 8004ea0:	f887 b025 	strb.w	fp, [r7, #37]	; 0x25
 8004ea4:	4a86      	ldr	r2, [pc, #536]	; (80050c0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 8004ea6:	67aa      	str	r2, [r5, #120]	; 0x78
 8004ea8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
 8004eac:	4985      	ldr	r1, [pc, #532]	; (80050c4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x30c>)
 8004eae:	62b9      	str	r1, [r7, #40]	; 0x28
 8004eb0:	f8a7 a02c 	strh.w	sl, [r7, #44]	; 0x2c
        : color(col)
 8004eb4:	633c      	str	r4, [r7, #48]	; 0x30
 8004eb6:	86bc      	strh	r4, [r7, #52]	; 0x34
 8004eb8:	f887 a036 	strb.w	sl, [r7, #54]	; 0x36
 8004ebc:	f887 4037 	strb.w	r4, [r7, #55]	; 0x37
 8004ec0:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
 8004ec4:	f887 4039 	strb.w	r4, [r7, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004ec8:	87bc      	strh	r4, [r7, #60]	; 0x3c
 8004eca:	87fc      	strh	r4, [r7, #62]	; 0x3e
 8004ecc:	f8a7 a040 	strh.w	sl, [r7, #64]	; 0x40
 8004ed0:	f8a7 a042 	strh.w	sl, [r7, #66]	; 0x42
              text(0)
 8004ed4:	647c      	str	r4, [r7, #68]	; 0x44
 8004ed6:	f8c5 9078 	str.w	r9, [r5, #120]	; 0x78
        : TextAreaWithWildcardBase(), wc1(0)
 8004eda:	4f7b      	ldr	r7, [pc, #492]	; (80050c8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x310>)
 8004edc:	67af      	str	r7, [r5, #120]	; 0x78
 8004ede:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
 8004ee2:	f105 09c4 	add.w	r9, r5, #196	; 0xc4
 8004ee6:	f8ad a018 	strh.w	sl, [sp, #24]
        : Widget(), bitmap(bmp), alpha(255)
 8004eea:	2226      	movs	r2, #38	; 0x26
 8004eec:	4621      	mov	r1, r4
 8004eee:	4648      	mov	r0, r9
 8004ef0:	f01e f906 	bl	8023100 <memset>
 8004ef4:	4b6f      	ldr	r3, [pc, #444]	; (80050b4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004ef6:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
        : x(0), y(0), width(0), height(0)
 8004efa:	f8a9 4004 	strh.w	r4, [r9, #4]
 8004efe:	f8a9 4006 	strh.w	r4, [r9, #6]
 8004f02:	f8a9 4008 	strh.w	r4, [r9, #8]
 8004f06:	f8a9 400a 	strh.w	r4, [r9, #10]
 8004f0a:	f8a9 400c 	strh.w	r4, [r9, #12]
 8004f0e:	f8a9 400e 	strh.w	r4, [r9, #14]
 8004f12:	f8a9 4010 	strh.w	r4, [r9, #16]
 8004f16:	f8a9 4012 	strh.w	r4, [r9, #18]
 8004f1a:	f8c9 4014 	str.w	r4, [r9, #20]
 8004f1e:	f8c9 4018 	str.w	r4, [r9, #24]
 8004f22:	f8c9 401c 	str.w	r4, [r9, #28]
 8004f26:	f8a9 4020 	strh.w	r4, [r9, #32]
 8004f2a:	f8a9 4022 	strh.w	r4, [r9, #34]	; 0x22
 8004f2e:	f889 4024 	strb.w	r4, [r9, #36]	; 0x24
 8004f32:	f889 b025 	strb.w	fp, [r9, #37]	; 0x25
 8004f36:	4a62      	ldr	r2, [pc, #392]	; (80050c0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 8004f38:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8004f3c:	4b63      	ldr	r3, [pc, #396]	; (80050cc <_ZN26wifiInfoLargeContainerBaseC1Ev+0x314>)
 8004f3e:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
 8004f42:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8004f46:	f8a9 3026 	strh.w	r3, [r9, #38]	; 0x26
 8004f4a:	f889 a028 	strb.w	sl, [r9, #40]	; 0x28
        Image::setBitmap(bmp);
 8004f4e:	a906      	add	r1, sp, #24
 8004f50:	4648      	mov	r0, r9
 8004f52:	f010 fd18 	bl	8015986 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004f56:	f105 07f0 	add.w	r7, r5, #240	; 0xf0
        : T(), up(), down()
 8004f5a:	2234      	movs	r2, #52	; 0x34
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	4638      	mov	r0, r7
 8004f60:	f01e f8ce 	bl	8023100 <memset>
 8004f64:	4b53      	ldr	r3, [pc, #332]	; (80050b4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004f66:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8004f6a:	80bc      	strh	r4, [r7, #4]
 8004f6c:	80fc      	strh	r4, [r7, #6]
 8004f6e:	813c      	strh	r4, [r7, #8]
 8004f70:	817c      	strh	r4, [r7, #10]
 8004f72:	81bc      	strh	r4, [r7, #12]
 8004f74:	81fc      	strh	r4, [r7, #14]
 8004f76:	823c      	strh	r4, [r7, #16]
 8004f78:	827c      	strh	r4, [r7, #18]
 8004f7a:	617c      	str	r4, [r7, #20]
 8004f7c:	61bc      	str	r4, [r7, #24]
 8004f7e:	61fc      	str	r4, [r7, #28]
 8004f80:	843c      	strh	r4, [r7, #32]
 8004f82:	847c      	strh	r4, [r7, #34]	; 0x22
 8004f84:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 8004f88:	f887 b025 	strb.w	fp, [r7, #37]	; 0x25
 8004f8c:	484a      	ldr	r0, [pc, #296]	; (80050b8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x300>)
 8004f8e:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
 8004f92:	62bc      	str	r4, [r7, #40]	; 0x28
        : pressed(false), alpha(255), action(0)
 8004f94:	4b4e      	ldr	r3, [pc, #312]	; (80050d0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x318>)
 8004f96:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8004f9a:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
 8004f9e:	f887 a02d 	strb.w	sl, [r7, #45]	; 0x2d
 8004fa2:	633c      	str	r4, [r7, #48]	; 0x30
        touchable = touch;
 8004fa4:	f887 b024 	strb.w	fp, [r7, #36]	; 0x24
 8004fa8:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x31c>)
 8004faa:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 8004fae:	4b4a      	ldr	r3, [pc, #296]	; (80050d8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x320>)
 8004fb0:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
        : Box(), borderColor(0), borderSize(0)
 8004fb4:	f505 7892 	add.w	r8, r5, #292	; 0x124
        : Widget(), alpha(255), color(0)
 8004fb8:	2226      	movs	r2, #38	; 0x26
 8004fba:	4621      	mov	r1, r4
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	f01e f89f 	bl	8023100 <memset>
          visible(true)
 8004fc2:	4b3c      	ldr	r3, [pc, #240]	; (80050b4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x2fc>)
 8004fc4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8004fc8:	f8a8 4004 	strh.w	r4, [r8, #4]
 8004fcc:	f8a8 4006 	strh.w	r4, [r8, #6]
 8004fd0:	f8a8 4008 	strh.w	r4, [r8, #8]
 8004fd4:	f8a8 400a 	strh.w	r4, [r8, #10]
 8004fd8:	f8a8 400c 	strh.w	r4, [r8, #12]
 8004fdc:	f8a8 400e 	strh.w	r4, [r8, #14]
 8004fe0:	f8a8 4010 	strh.w	r4, [r8, #16]
 8004fe4:	f8a8 4012 	strh.w	r4, [r8, #18]
 8004fe8:	f8c8 4014 	str.w	r4, [r8, #20]
 8004fec:	f8c8 4018 	str.w	r4, [r8, #24]
 8004ff0:	f8c8 401c 	str.w	r4, [r8, #28]
 8004ff4:	f8a8 4020 	strh.w	r4, [r8, #32]
 8004ff8:	f8a8 4022 	strh.w	r4, [r8, #34]	; 0x22
 8004ffc:	f888 4024 	strb.w	r4, [r8, #36]	; 0x24
 8005000:	f888 b025 	strb.w	fp, [r8, #37]	; 0x25
 8005004:	4a2e      	ldr	r2, [pc, #184]	; (80050c0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x308>)
 8005006:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 800500a:	4b34      	ldr	r3, [pc, #208]	; (80050dc <_ZN26wifiInfoLargeContainerBaseC1Ev+0x324>)
 800500c:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005010:	f888 a026 	strb.w	sl, [r8, #38]	; 0x26
        : color(col)
 8005014:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 8005018:	4b31      	ldr	r3, [pc, #196]	; (80050e0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x328>)
 800501a:	637b      	str	r3, [r7, #52]	; 0x34
 800501c:	663c      	str	r4, [r7, #96]	; 0x60
 800501e:	f8a7 4064 	strh.w	r4, [r7, #100]	; 0x64
        : color(0)
 8005022:	66bc      	str	r4, [r7, #104]	; 0x68
 8005024:	66fc      	str	r4, [r7, #108]	; 0x6c
 8005026:	673c      	str	r4, [r7, #112]	; 0x70
 8005028:	677c      	str	r4, [r7, #116]	; 0x74
        setX(x);
 800502a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	4621      	mov	r1, r4
 8005032:	4640      	mov	r0, r8
 8005034:	4798      	blx	r3
        setY(y);
 8005036:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	4621      	mov	r1, r4
 800503e:	4640      	mov	r0, r8
 8005040:	4798      	blx	r3
        T::add(borderBox);
 8005042:	4641      	mov	r1, r8
 8005044:	4638      	mov	r0, r7
 8005046:	f00d fd83 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800504a:	4b26      	ldr	r3, [pc, #152]	; (80050e4 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x32c>)
 800504c:	9307      	str	r3, [sp, #28]
 800504e:	9408      	str	r4, [sp, #32]
 8005050:	ab04      	add	r3, sp, #16
 8005052:	aa07      	add	r2, sp, #28
 8005054:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005058:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<T1, void, void>
 800505c:	4a22      	ldr	r2, [pc, #136]	; (80050e8 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x330>)
 800505e:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
        : pobject(pObject), pmemfun(pmemfun_1)
 8005062:	4a22      	ldr	r2, [pc, #136]	; (80050ec <_ZN26wifiInfoLargeContainerBaseC1Ev+0x334>)
 8005064:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
 8005068:	f8c5 520c 	str.w	r5, [r5, #524]	; 0x20c
 800506c:	f505 7204 	add.w	r2, r5, #528	; 0x210
 8005070:	e882 0003 	stmia.w	r2, {r0, r1}
        rect.width = width;
 8005074:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005078:	812b      	strh	r3, [r5, #8]
        rect.height = height;
 800507a:	233e      	movs	r3, #62	; 0x3e
 800507c:	816b      	strh	r3, [r5, #10]
        setX(x);
 800507e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	2110      	movs	r1, #16
 8005084:	4630      	mov	r0, r6
 8005086:	4798      	blx	r3
        setY(y);
 8005088:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	2105      	movs	r1, #5
 800508e:	4630      	mov	r0, r6
 8005090:	4798      	blx	r3
        setWidth(width);
 8005092:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	21da      	movs	r1, #218	; 0xda
 8005098:	4630      	mov	r0, r6
 800509a:	4798      	blx	r3
        setHeight(height);
 800509c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	211e      	movs	r1, #30
 80050a2:	4630      	mov	r0, r6
 80050a4:	4798      	blx	r3
        : color(col)
 80050a6:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x338>)
        color = newColor;
 80050a8:	65eb      	str	r3, [r5, #92]	; 0x5c
        linespace = space;
 80050aa:	f8a5 4060 	strh.w	r4, [r5, #96]	; 0x60
        boundingArea = calculateBoundingArea();
 80050ae:	466c      	mov	r4, sp
 80050b0:	e024      	b.n	80050fc <_ZN26wifiInfoLargeContainerBaseC1Ev+0x344>
 80050b2:	bf00      	nop
 80050b4:	08026b18 	.word	0x08026b18
 80050b8:	08026414 	.word	0x08026414
 80050bc:	08025a24 	.word	0x08025a24
 80050c0:	0802554c 	.word	0x0802554c
 80050c4:	08024a78 	.word	0x08024a78
 80050c8:	08025790 	.word	0x08025790
 80050cc:	08026978 	.word	0x08026978
 80050d0:	08025820 	.word	0x08025820
 80050d4:	080258d4 	.word	0x080258d4
 80050d8:	08025970 	.word	0x08025970
 80050dc:	08026818 	.word	0x08026818
 80050e0:	08026910 	.word	0x08026910
 80050e4:	08004aef 	.word	0x08004aef
 80050e8:	080258bc 	.word	0x080258bc
 80050ec:	08025a0c 	.word	0x08025a0c
 80050f0:	ffebebeb 	.word	0xffebebeb
 80050f4:	08026788 	.word	0x08026788
 80050f8:	08026880 	.word	0x08026880
 80050fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80050fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005102:	4631      	mov	r1, r6
 8005104:	4620      	mov	r0, r4
 8005106:	4798      	blx	r3
 8005108:	f105 0368 	add.w	r3, r5, #104	; 0x68
 800510c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005110:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005114:	4989      	ldr	r1, [pc, #548]	; (800533c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x584>)
 8005116:	9109      	str	r1, [sp, #36]	; 0x24
 8005118:	2303      	movs	r3, #3
 800511a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800511e:	4b88      	ldr	r3, [pc, #544]	; (8005340 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x588>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 80f2 	beq.w	800530c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x554>
 8005128:	f505 74b4 	add.w	r4, r5, #360	; 0x168
        return typedTextId < numberOfTypedTexts;
 800512c:	4b85      	ldr	r3, [pc, #532]	; (8005344 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x58c>)
 800512e:	881b      	ldrh	r3, [r3, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005130:	2b03      	cmp	r3, #3
 8005132:	f240 80f1 	bls.w	8005318 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x560>
        return texts->getText(typedTextId);
 8005136:	2103      	movs	r1, #3
 8005138:	4b83      	ldr	r3, [pc, #524]	; (8005348 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x590>)
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	f7ff f9aa 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 8005140:	4603      	mov	r3, r0
    Unicode::snprintf(wifiSSIDBuffer, WIFISSID_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NRXH).getText());
 8005142:	4a82      	ldr	r2, [pc, #520]	; (800534c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x594>)
 8005144:	2128      	movs	r1, #40	; 0x28
 8005146:	4620      	mov	r0, r4
 8005148:	f015 fbc6 	bl	801a8d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 800514c:	676c      	str	r4, [r5, #116]	; 0x74
        : typedTextId(id)
 800514e:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 800533c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x584>
 8005152:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8005156:	2304      	movs	r3, #4
 8005158:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    wifiSSID.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4CY4));
 800515c:	a90b      	add	r1, sp, #44	; 0x2c
 800515e:	4630      	mov	r0, r6
 8005160:	f010 fa3c 	bl	80155dc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005164:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    encryption.setPosition(16, 31, 218, 25);
 8005168:	f105 0478 	add.w	r4, r5, #120	; 0x78
        setX(x);
 800516c:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	2110      	movs	r1, #16
 8005172:	4620      	mov	r0, r4
 8005174:	4798      	blx	r3
        setY(y);
 8005176:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	211f      	movs	r1, #31
 800517c:	4620      	mov	r0, r4
 800517e:	4798      	blx	r3
        setWidth(width);
 8005180:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	21da      	movs	r1, #218	; 0xda
 8005186:	4620      	mov	r0, r4
 8005188:	4798      	blx	r3
        setHeight(height);
 800518a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	2119      	movs	r1, #25
 8005190:	4620      	mov	r0, r4
 8005192:	4798      	blx	r3
 8005194:	4b6e      	ldr	r3, [pc, #440]	; (8005350 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x598>)
        color = newColor;
 8005196:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
        linespace = space;
 800519a:	2300      	movs	r3, #0
 800519c:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
        boundingArea = calculateBoundingArea();
 80051a0:	46ea      	mov	sl, sp
 80051a2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80051a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a8:	4621      	mov	r1, r4
 80051aa:	4650      	mov	r0, sl
 80051ac:	4798      	blx	r3
 80051ae:	f105 03b4 	add.w	r3, r5, #180	; 0xb4
 80051b2:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 80051b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(encryptionBuffer, ENCRYPTION_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_47B1).getText());
 80051ba:	f505 7adc 	add.w	sl, r5, #440	; 0x1b8
        : typedTextId(id)
 80051be:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80051c2:	2305      	movs	r3, #5
 80051c4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80051c8:	4b5d      	ldr	r3, [pc, #372]	; (8005340 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x588>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80a9 	beq.w	8005324 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x56c>
        return typedTextId < numberOfTypedTexts;
 80051d2:	4b5c      	ldr	r3, [pc, #368]	; (8005344 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x58c>)
 80051d4:	881b      	ldrh	r3, [r3, #0]
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	f240 80aa 	bls.w	8005330 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x578>
        return texts->getText(typedTextId);
 80051dc:	2105      	movs	r1, #5
 80051de:	4b5a      	ldr	r3, [pc, #360]	; (8005348 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x590>)
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	f7ff f957 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 80051e6:	4603      	mov	r3, r0
 80051e8:	4a58      	ldr	r2, [pc, #352]	; (800534c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x594>)
 80051ea:	2128      	movs	r1, #40	; 0x28
 80051ec:	4650      	mov	r0, sl
 80051ee:	f015 fb73 	bl	801a8d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80051f2:	f8c5 a0c0 	str.w	sl, [r5, #192]	; 0xc0
        : typedTextId(id)
 80051f6:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800533c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x584>
 80051fa:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80051fe:	2306      	movs	r3, #6
 8005200:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    encryption.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X5OV));
 8005204:	a90f      	add	r1, sp, #60	; 0x3c
 8005206:	4620      	mov	r0, r4
 8005208:	f010 f9e8 	bl	80155dc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 800520c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    signalStrengthIcon.setXY(240, 11);
 8005210:	f105 0ac4 	add.w	sl, r5, #196	; 0xc4
        setX(x);
 8005214:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	21f0      	movs	r1, #240	; 0xf0
 800521c:	4650      	mov	r0, sl
 800521e:	4798      	blx	r3
        setY(y);
 8005220:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8005224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005226:	210b      	movs	r1, #11
 8005228:	4650      	mov	r0, sl
 800522a:	4798      	blx	r3
 800522c:	230b      	movs	r3, #11
 800522e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    signalStrengthIcon.setBitmap(touchgfx::Bitmap(BITMAP_WIFI_LOW_SETTINGS_ID));
 8005232:	a911      	add	r1, sp, #68	; 0x44
 8005234:	4648      	mov	r0, r9
 8005236:	f010 fba6 	bl	8015986 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        borderBox.setPosition(x, y, width, height);
 800523a:	f105 08f0 	add.w	r8, r5, #240	; 0xf0
 800523e:	f505 7992 	add.w	r9, r5, #292	; 0x124
        setX(x);
 8005242:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	2100      	movs	r1, #0
 800524a:	4648      	mov	r0, r9
 800524c:	4798      	blx	r3
        setY(y);
 800524e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005254:	2100      	movs	r1, #0
 8005256:	4648      	mov	r0, r9
 8005258:	4798      	blx	r3
        setWidth(width);
 800525a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	2100      	movs	r1, #0
 8005262:	4648      	mov	r0, r9
 8005264:	4798      	blx	r3
        setHeight(height);
 8005266:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	2100      	movs	r1, #0
 800526e:	4648      	mov	r0, r9
 8005270:	4798      	blx	r3
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8005272:	2305      	movs	r3, #5
 8005274:	f8a5 3154 	strh.w	r3, [r5, #340]	; 0x154
        up = colorReleased;
 8005278:	4b36      	ldr	r3, [pc, #216]	; (8005354 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x59c>)
 800527a:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
        down = colorPressed;
 800527e:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 8005282:	3333      	adds	r3, #51	; 0x33
 8005284:	f8c5 315c 	str.w	r3, [r5, #348]	; 0x15c
        borderUp = borderColorReleased;
 8005288:	f5a3 43cc 	sub.w	r3, r3, #26112	; 0x6600
 800528c:	3b66      	subs	r3, #102	; 0x66
 800528e:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
        borderDown = borderColorPressed;
 8005292:	f103 1333 	add.w	r3, r3, #3342387	; 0x330033
 8005296:	f503 534c 	add.w	r3, r3, #13056	; 0x3300
 800529a:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handlePressedUpdated();
 800529e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80052a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a6:	4638      	mov	r0, r7
 80052a8:	4798      	blx	r3
        setX(x);
 80052aa:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	2100      	movs	r1, #0
 80052b2:	4640      	mov	r0, r8
 80052b4:	4798      	blx	r3
        setY(y);
 80052b6:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	2100      	movs	r1, #0
 80052be:	4640      	mov	r0, r8
 80052c0:	4798      	blx	r3
        setWidth(width);
 80052c2:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80052cc:	4640      	mov	r0, r8
 80052ce:	4798      	blx	r3
        setHeight(height);
 80052d0:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 80052d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d6:	213e      	movs	r1, #62	; 0x3e
 80052d8:	4640      	mov	r0, r8
 80052da:	4798      	blx	r3
    listButtonOverlay.setAction(flexButtonCallback);
 80052dc:	f505 7302 	add.w	r3, r5, #520	; 0x208
        action = &callback;
 80052e0:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    add(wifiSSID);
 80052e4:	4631      	mov	r1, r6
 80052e6:	4628      	mov	r0, r5
 80052e8:	f00d fc32 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(encryption);
 80052ec:	4621      	mov	r1, r4
 80052ee:	4628      	mov	r0, r5
 80052f0:	f00d fc2e 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(signalStrengthIcon);
 80052f4:	4651      	mov	r1, sl
 80052f6:	4628      	mov	r0, r5
 80052f8:	f00d fc2a 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(listButtonOverlay);
 80052fc:	4641      	mov	r1, r8
 80052fe:	4628      	mov	r0, r5
 8005300:	f00d fc26 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005304:	4628      	mov	r0, r5
 8005306:	b013      	add	sp, #76	; 0x4c
 8005308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800530c:	4b12      	ldr	r3, [pc, #72]	; (8005358 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a0>)
 800530e:	4a13      	ldr	r2, [pc, #76]	; (800535c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 8005310:	2160      	movs	r1, #96	; 0x60
 8005312:	4813      	ldr	r0, [pc, #76]	; (8005360 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 8005314:	f01d fd5e 	bl	8022dd4 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005318:	4b12      	ldr	r3, [pc, #72]	; (8005364 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5ac>)
 800531a:	4a10      	ldr	r2, [pc, #64]	; (800535c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 800531c:	2161      	movs	r1, #97	; 0x61
 800531e:	4810      	ldr	r0, [pc, #64]	; (8005360 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 8005320:	f01d fd58 	bl	8022dd4 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005324:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a0>)
 8005326:	4a0d      	ldr	r2, [pc, #52]	; (800535c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 8005328:	2160      	movs	r1, #96	; 0x60
 800532a:	480d      	ldr	r0, [pc, #52]	; (8005360 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 800532c:	f01d fd52 	bl	8022dd4 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5ac>)
 8005332:	4a0a      	ldr	r2, [pc, #40]	; (800535c <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a4>)
 8005334:	2161      	movs	r1, #97	; 0x61
 8005336:	480a      	ldr	r0, [pc, #40]	; (8005360 <_ZN26wifiInfoLargeContainerBaseC1Ev+0x5a8>)
 8005338:	f01d fd4c 	bl	8022dd4 <__assert_func>
 800533c:	08024a78 	.word	0x08024a78
 8005340:	2400f490 	.word	0x2400f490
 8005344:	2400f494 	.word	0x2400f494
 8005348:	2400f49c 	.word	0x2400f49c
 800534c:	08025784 	.word	0x08025784
 8005350:	ffebebeb 	.word	0xffebebeb
 8005354:	ff006699 	.word	0xff006699
 8005358:	08025644 	.word	0x08025644
 800535c:	0802574c 	.word	0x0802574c
 8005360:	080256c4 	.word	0x080256c4
 8005364:	0802570c 	.word	0x0802570c

08005368 <_ZN21wifiMenuContainerBaseD1Ev>:

    add(backgroundBox);
    add(wifiListContainer);
}

wifiMenuContainerBase::~wifiMenuContainerBase()
 8005368:	b430      	push	{r4, r5}
 800536a:	4a12      	ldr	r2, [pc, #72]	; (80053b4 <_ZN21wifiMenuContainerBaseD1Ev+0x4c>)
 800536c:	6002      	str	r2, [r0, #0]
 * dimensions of the physical screen. Place the ListLayout inside e.g. a
 * ScrollableContainer to allow all the children to be viewed.
 *
 * @see ScrollableContainer
 */
class ListLayout : public Container
 800536e:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <_ZN21wifiMenuContainerBaseD1Ev+0x50>)
 8005370:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
class Container : public Drawable
 8005374:	4911      	ldr	r1, [pc, #68]	; (80053bc <_ZN21wifiMenuContainerBaseD1Ev+0x54>)
 8005376:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    {
 800537a:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <_ZN21wifiMenuContainerBaseD1Ev+0x58>)
 800537c:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 * @see Container
 *
 * @note The ScrollableContainer will consume all DragEvents in the area covered by the
 *       container.
 */
class ScrollableContainer : public Container
 8005380:	4c10      	ldr	r4, [pc, #64]	; (80053c4 <_ZN21wifiMenuContainerBaseD1Ev+0x5c>)
 8005382:	6584      	str	r4, [r0, #88]	; 0x58
class Box : public Widget
 8005384:	4d10      	ldr	r5, [pc, #64]	; (80053c8 <_ZN21wifiMenuContainerBaseD1Ev+0x60>)
 8005386:	f8c0 50bc 	str.w	r5, [r0, #188]	; 0xbc
 800538a:	4c10      	ldr	r4, [pc, #64]	; (80053cc <_ZN21wifiMenuContainerBaseD1Ev+0x64>)
 800538c:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
 8005390:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
 8005394:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
 8005398:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
 800539c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 80053a0:	6581      	str	r1, [r0, #88]	; 0x58
 80053a2:	6582      	str	r2, [r0, #88]	; 0x58
class Image : public Widget
 80053a4:	4d0a      	ldr	r5, [pc, #40]	; (80053d0 <_ZN21wifiMenuContainerBaseD1Ev+0x68>)
 80053a6:	62c5      	str	r5, [r0, #44]	; 0x2c
 80053a8:	62c4      	str	r4, [r0, #44]	; 0x2c
 80053aa:	62c2      	str	r2, [r0, #44]	; 0x2c
 80053ac:	6001      	str	r1, [r0, #0]
 80053ae:	6002      	str	r2, [r0, #0]
{

}
 80053b0:	bc30      	pop	{r4, r5}
 80053b2:	4770      	bx	lr
 80053b4:	08025abc 	.word	0x08025abc
 80053b8:	080264d4 	.word	0x080264d4
 80053bc:	08026414 	.word	0x08026414
 80053c0:	08026b18 	.word	0x08026b18
 80053c4:	08026594 	.word	0x08026594
 80053c8:	08026818 	.word	0x08026818
 80053cc:	0802554c 	.word	0x0802554c
 80053d0:	08026978 	.word	0x08026978

080053d4 <_ZN21wifiMenuContainerBase10initializeEv>:

void wifiMenuContainerBase::initialize()
{

}
 80053d4:	4770      	bx	lr

080053d6 <_ZN21wifiMenuContainerBaseD0Ev>:
wifiMenuContainerBase::~wifiMenuContainerBase()
 80053d6:	b510      	push	{r4, lr}
 80053d8:	4604      	mov	r4, r0
}
 80053da:	f7ff ffc5 	bl	8005368 <_ZN21wifiMenuContainerBaseD1Ev>
 80053de:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80053e2:	4620      	mov	r0, r4
 80053e4:	f01d fcc7 	bl	8022d76 <_ZdlPvj>
 80053e8:	4620      	mov	r0, r4
 80053ea:	bd10      	pop	{r4, pc}

080053ec <_ZN21wifiMenuContainerBaseC1Ev>:
wifiMenuContainerBase::wifiMenuContainerBase()
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	b083      	sub	sp, #12
 80053f2:	4605      	mov	r5, r0
          visible(true)
 80053f4:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80055a4 <_ZN21wifiMenuContainerBaseC1Ev+0x1b8>
 80053f8:	f8c0 a000 	str.w	sl, [r0]
        : x(0), y(0), width(0), height(0)
 80053fc:	2400      	movs	r4, #0
 80053fe:	8084      	strh	r4, [r0, #4]
 8005400:	80c4      	strh	r4, [r0, #6]
 8005402:	8104      	strh	r4, [r0, #8]
 8005404:	8144      	strh	r4, [r0, #10]
 8005406:	8184      	strh	r4, [r0, #12]
 8005408:	81c4      	strh	r4, [r0, #14]
 800540a:	8204      	strh	r4, [r0, #16]
 800540c:	8244      	strh	r4, [r0, #18]
 800540e:	6144      	str	r4, [r0, #20]
 8005410:	6184      	str	r4, [r0, #24]
 8005412:	61c4      	str	r4, [r0, #28]
 8005414:	8404      	strh	r4, [r0, #32]
 8005416:	8444      	strh	r4, [r0, #34]	; 0x22
 8005418:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800541c:	f04f 0901 	mov.w	r9, #1
 8005420:	f880 9025 	strb.w	r9, [r0, #37]	; 0x25
          firstChild(0)
 8005424:	f8df b180 	ldr.w	fp, [pc, #384]	; 80055a8 <_ZN21wifiMenuContainerBaseC1Ev+0x1bc>
 8005428:	f8c0 b000 	str.w	fp, [r0]
 800542c:	6284      	str	r4, [r0, #40]	; 0x28
 800542e:	4606      	mov	r6, r0
 8005430:	4b58      	ldr	r3, [pc, #352]	; (8005594 <_ZN21wifiMenuContainerBaseC1Ev+0x1a8>)
 8005432:	f846 3b2c 	str.w	r3, [r6], #44
 8005436:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800543a:	f8ad 7000 	strh.w	r7, [sp]
        : Widget(), bitmap(bmp), alpha(255)
 800543e:	2226      	movs	r2, #38	; 0x26
 8005440:	4621      	mov	r1, r4
 8005442:	4630      	mov	r0, r6
 8005444:	f01d fe5c 	bl	8023100 <memset>
 8005448:	f8c5 a02c 	str.w	sl, [r5, #44]	; 0x2c
 800544c:	80b4      	strh	r4, [r6, #4]
 800544e:	80f4      	strh	r4, [r6, #6]
 8005450:	8134      	strh	r4, [r6, #8]
 8005452:	8174      	strh	r4, [r6, #10]
 8005454:	81b4      	strh	r4, [r6, #12]
 8005456:	81f4      	strh	r4, [r6, #14]
 8005458:	8234      	strh	r4, [r6, #16]
 800545a:	8274      	strh	r4, [r6, #18]
 800545c:	6174      	str	r4, [r6, #20]
 800545e:	61b4      	str	r4, [r6, #24]
 8005460:	61f4      	str	r4, [r6, #28]
 8005462:	8434      	strh	r4, [r6, #32]
 8005464:	8474      	strh	r4, [r6, #34]	; 0x22
 8005466:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
 800546a:	f886 9025 	strb.w	r9, [r6, #37]	; 0x25
 800546e:	4b4a      	ldr	r3, [pc, #296]	; (8005598 <_ZN21wifiMenuContainerBaseC1Ev+0x1ac>)
 8005470:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005472:	4b4a      	ldr	r3, [pc, #296]	; (800559c <_ZN21wifiMenuContainerBaseC1Ev+0x1b0>)
 8005474:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005476:	f8bd 3000 	ldrh.w	r3, [sp]
 800547a:	84f3      	strh	r3, [r6, #38]	; 0x26
 800547c:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
        Image::setBitmap(bmp);
 8005480:	4669      	mov	r1, sp
 8005482:	4630      	mov	r0, r6
 8005484:	f010 fa7f 	bl	8015986 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8005488:	f105 0858 	add.w	r8, r5, #88	; 0x58
 800548c:	4640      	mov	r0, r8
 800548e:	f00e fb0b 	bl	8013aa8 <_ZN8touchgfx19ScrollableContainerC1Ev>
 8005492:	f505 778a 	add.w	r7, r5, #276	; 0x114
 8005496:	f8c5 a114 	str.w	sl, [r5, #276]	; 0x114
 800549a:	80bc      	strh	r4, [r7, #4]
 800549c:	80fc      	strh	r4, [r7, #6]
 800549e:	813c      	strh	r4, [r7, #8]
 80054a0:	817c      	strh	r4, [r7, #10]
 80054a2:	81bc      	strh	r4, [r7, #12]
 80054a4:	81fc      	strh	r4, [r7, #14]
 80054a6:	823c      	strh	r4, [r7, #16]
 80054a8:	827c      	strh	r4, [r7, #18]
 80054aa:	617c      	str	r4, [r7, #20]
 80054ac:	61bc      	str	r4, [r7, #24]
 80054ae:	61fc      	str	r4, [r7, #28]
 80054b0:	843c      	strh	r4, [r7, #32]
 80054b2:	847c      	strh	r4, [r7, #34]	; 0x22
 80054b4:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
 80054b8:	f887 9025 	strb.w	r9, [r7, #37]	; 0x25
 80054bc:	f8c5 b114 	str.w	fp, [r5, #276]	; 0x114
 80054c0:	62bc      	str	r4, [r7, #40]	; 0x28
     *           places the elements vertically, ::EAST places the elements horizontally.
     *
     * @see setDirection
     */
    ListLayout(const Direction d = SOUTH)
        : Container(), direction(d), offset(0)
 80054c2:	4b37      	ldr	r3, [pc, #220]	; (80055a0 <_ZN21wifiMenuContainerBaseC1Ev+0x1b4>)
 80054c4:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
 80054c8:	f885 9140 	strb.w	r9, [r5, #320]	; 0x140
 80054cc:	f8a5 4142 	strh.w	r4, [r5, #322]	; 0x142
        rect.width = width;
 80054d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80054d4:	812b      	strh	r3, [r5, #8]
        rect.height = height;
 80054d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80054da:	816b      	strh	r3, [r5, #10]
        setX(x);
 80054dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	215a      	movs	r1, #90	; 0x5a
 80054e2:	4630      	mov	r0, r6
 80054e4:	4798      	blx	r3
        setY(y);
 80054e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	2136      	movs	r1, #54	; 0x36
 80054ec:	4630      	mov	r0, r6
 80054ee:	4798      	blx	r3
 80054f0:	f8ad 9004 	strh.w	r9, [sp, #4]
    backgroundBox.setBitmap(touchgfx::Bitmap(BITMAP_ERROR_BOX_ID));
 80054f4:	a901      	add	r1, sp, #4
 80054f6:	4630      	mov	r0, r6
 80054f8:	f010 fa45 	bl	8015986 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setX(x);
 80054fc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	215a      	movs	r1, #90	; 0x5a
 8005502:	4640      	mov	r0, r8
 8005504:	4798      	blx	r3
        setY(y);
 8005506:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	2136      	movs	r1, #54	; 0x36
 800550c:	4640      	mov	r0, r8
 800550e:	4798      	blx	r3
        setWidth(width);
 8005510:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005518:	4640      	mov	r0, r8
 800551a:	4798      	blx	r3
        setHeight(height);
 800551c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	21c6      	movs	r1, #198	; 0xc6
 8005522:	4640      	mov	r0, r8
 8005524:	4798      	blx	r3
    wifiListContainer.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005526:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 800552a:	4640      	mov	r0, r8
 800552c:	f00e fdd1 	bl	80140d2 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>
    wifiList.setDirection(touchgfx::SOUTH);
 8005530:	4649      	mov	r1, r9
 8005532:	4638      	mov	r0, r7
 8005534:	f00d fe7a 	bl	801322c <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>
        setX(x);
 8005538:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	4621      	mov	r1, r4
 8005540:	4638      	mov	r0, r7
 8005542:	4798      	blx	r3
        setY(y);
 8005544:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8005548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554a:	4621      	mov	r1, r4
 800554c:	4638      	mov	r0, r7
 800554e:	4798      	blx	r3
        setWidth(width);
 8005550:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	f44f 7110 	mov.w	r1, #576	; 0x240
 800555a:	4638      	mov	r0, r7
 800555c:	4798      	blx	r3
        setHeight(height);
 800555e:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	213d      	movs	r1, #61	; 0x3d
 8005566:	4638      	mov	r0, r7
 8005568:	4798      	blx	r3
    wifiListContainer.add(wifiList);
 800556a:	4639      	mov	r1, r7
 800556c:	4640      	mov	r0, r8
 800556e:	f00d ffb9 	bl	80134e4 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    wifiListContainer.setScrollbarsPermanentlyVisible();
 8005572:	4649      	mov	r1, r9
 8005574:	4640      	mov	r0, r8
 8005576:	f00e fdbe 	bl	80140f6 <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>
    add(backgroundBox);
 800557a:	4631      	mov	r1, r6
 800557c:	4628      	mov	r0, r5
 800557e:	f00d fae7 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(wifiListContainer);
 8005582:	4641      	mov	r1, r8
 8005584:	4628      	mov	r0, r5
 8005586:	f00d fae3 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800558a:	4628      	mov	r0, r5
 800558c:	b003      	add	sp, #12
 800558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005592:	bf00      	nop
 8005594:	08025abc 	.word	0x08025abc
 8005598:	0802554c 	.word	0x0802554c
 800559c:	08026978 	.word	0x08026978
 80055a0:	080264d4 	.word	0x080264d4
 80055a4:	08026b18 	.word	0x08026b18
 80055a8:	08026414 	.word	0x08026414

080055ac <_ZN14CustomKeyboardD1Ev>:
 */
class CustomKeyboard : public Container
{
public:
    CustomKeyboard();
    virtual ~CustomKeyboard() { }
 80055ac:	b4f0      	push	{r4, r5, r6, r7}
 80055ae:	4a23      	ldr	r2, [pc, #140]	; (800563c <_ZN14CustomKeyboardD1Ev+0x90>)
 80055b0:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80055b2:	4a23      	ldr	r2, [pc, #140]	; (8005640 <_ZN14CustomKeyboardD1Ev+0x94>)
 80055b4:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    }
 80055b8:	4a22      	ldr	r2, [pc, #136]	; (8005644 <_ZN14CustomKeyboardD1Ev+0x98>)
 80055ba:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80055be:	4922      	ldr	r1, [pc, #136]	; (8005648 <_ZN14CustomKeyboardD1Ev+0x9c>)
 80055c0:	f8c0 120c 	str.w	r1, [r0, #524]	; 0x20c
    {
 80055c4:	4a21      	ldr	r2, [pc, #132]	; (800564c <_ZN14CustomKeyboardD1Ev+0xa0>)
 80055c6:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80055ca:	f8c0 11fc 	str.w	r1, [r0, #508]	; 0x1fc
    {
 80055ce:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80055d2:	f8c0 11ec 	str.w	r1, [r0, #492]	; 0x1ec
    {
 80055d6:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80055da:	f8c0 11dc 	str.w	r1, [r0, #476]	; 0x1dc
    {
 80055de:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
class TextArea : public Widget
 80055e2:	4e1b      	ldr	r6, [pc, #108]	; (8005650 <_ZN14CustomKeyboardD1Ev+0xa4>)
 80055e4:	f8c0 6194 	str.w	r6, [r0, #404]	; 0x194
    {
 80055e8:	4d1a      	ldr	r5, [pc, #104]	; (8005654 <_ZN14CustomKeyboardD1Ev+0xa8>)
 80055ea:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
 80055ee:	491a      	ldr	r1, [pc, #104]	; (8005658 <_ZN14CustomKeyboardD1Ev+0xac>)
 80055f0:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
    {
 80055f4:	4a19      	ldr	r2, [pc, #100]	; (800565c <_ZN14CustomKeyboardD1Ev+0xb0>)
 80055f6:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 * A keyboard with multiple key mappings e.g. lower case alpha, upper case alpha and
 * numeric mappings can be created by implementing callback methods for shift and mode
 * areas in the provided bitmap and then changing the KeyMappingList when those areas
 * are pressed.
 */
class Keyboard : public Container
 80055fa:	4c19      	ldr	r4, [pc, #100]	; (8005660 <_ZN14CustomKeyboardD1Ev+0xb4>)
 80055fc:	62c4      	str	r4, [r0, #44]	; 0x2c
class Image : public Widget
 80055fe:	4c19      	ldr	r4, [pc, #100]	; (8005664 <_ZN14CustomKeyboardD1Ev+0xb8>)
 8005600:	f8c0 40e4 	str.w	r4, [r0, #228]	; 0xe4
 8005604:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 8005608:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800560c:	4f16      	ldr	r7, [pc, #88]	; (8005668 <_ZN14CustomKeyboardD1Ev+0xbc>)
 800560e:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8005612:	4f16      	ldr	r7, [pc, #88]	; (800566c <_ZN14CustomKeyboardD1Ev+0xc0>)
 8005614:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
 8005618:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 800561c:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
 8005620:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 8005624:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8005628:	6644      	str	r4, [r0, #100]	; 0x64
 800562a:	6641      	str	r1, [r0, #100]	; 0x64
 800562c:	6642      	str	r2, [r0, #100]	; 0x64
class Container : public Drawable
 800562e:	4910      	ldr	r1, [pc, #64]	; (8005670 <_ZN14CustomKeyboardD1Ev+0xc4>)
 8005630:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005632:	62c2      	str	r2, [r0, #44]	; 0x2c
 8005634:	6001      	str	r1, [r0, #0]
 8005636:	6002      	str	r2, [r0, #0]
 8005638:	bcf0      	pop	{r4, r5, r6, r7}
 800563a:	4770      	bx	lr
 800563c:	08025b98 	.word	0x08025b98
 8005640:	08025b80 	.word	0x08025b80
 8005644:	08025b50 	.word	0x08025b50
 8005648:	08025b68 	.word	0x08025b68
 800564c:	08024ad4 	.word	0x08024ad4
 8005650:	08026788 	.word	0x08026788
 8005654:	08024a78 	.word	0x08024a78
 8005658:	0802554c 	.word	0x0802554c
 800565c:	08026b18 	.word	0x08026b18
 8005660:	080269e4 	.word	0x080269e4
 8005664:	08026978 	.word	0x08026978
 8005668:	08025790 	.word	0x08025790
 800566c:	08026880 	.word	0x08026880
 8005670:	08026414 	.word	0x08026414

08005674 <_ZN14CustomKeyboard18donePressedHandlerEv>:
    uppercaseKeys = !uppercaseKeys;
    setKeyMappingList();
}

void CustomKeyboard::donePressedHandler()
{
 8005674:	b510      	push	{r4, lr}
 8005676:	4604      	mov	r4, r0
    if (doneReturnCallback && doneReturnCallback->isValid())
 8005678:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
 800567c:	b150      	cbz	r0, 8005694 <_ZN14CustomKeyboard18donePressedHandlerEv+0x20>
 800567e:	6803      	ldr	r3, [r0, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	4798      	blx	r3
 8005684:	b130      	cbz	r0, 8005694 <_ZN14CustomKeyboard18donePressedHandlerEv+0x20>
    {
        doneReturnCallback->execute(buffer);
 8005686:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
 800568a:	6803      	ldr	r3, [r0, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8005692:	4798      	blx	r3
    }
}
 8005694:	bd10      	pop	{r4, pc}
	...

08005698 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005698:	4a02      	ldr	r2, [pc, #8]	; (80056a4 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev+0xc>)
 800569a:	6002      	str	r2, [r0, #0]
    }
 800569c:	4a02      	ldr	r2, [pc, #8]	; (80056a8 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev+0x10>)
 800569e:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	08025b80 	.word	0x08025b80
 80056a8:	08025b50 	.word	0x08025b50

080056ac <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80056ac:	4a02      	ldr	r2, [pc, #8]	; (80056b8 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev+0xc>)
 80056ae:	6002      	str	r2, [r0, #0]
    {
 80056b0:	4a02      	ldr	r2, [pc, #8]	; (80056bc <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev+0x10>)
 80056b2:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	08025b68 	.word	0x08025b68
 80056bc:	08024ad4 	.word	0x08024ad4

080056c0 <_Z41__static_initialization_and_destruction_0ii>:

    uppercaseKeys = true;
    firstCharacterEntry = true;
    alphaKeys = true;
    setKeyMappingList();
}
 80056c0:	2801      	cmp	r0, #1
 80056c2:	d006      	beq.n	80056d2 <_Z41__static_initialization_and_destruction_0ii+0x12>
 80056c4:	b920      	cbnz	r0, 80056d0 <_Z41__static_initialization_and_destruction_0ii+0x10>
 80056c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056ca:	4299      	cmp	r1, r3
 80056cc:	f000 8222 	beq.w	8005b14 <_Z41__static_initialization_and_destruction_0ii+0x454>
 80056d0:	4770      	bx	lr
 80056d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056d6:	4299      	cmp	r1, r3
 80056d8:	d1f4      	bne.n	80056c4 <_Z41__static_initialization_and_destruction_0ii+0x4>
 80056da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80056de:	4bf0      	ldr	r3, [pc, #960]	; (8005aa0 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80056e4:	240c      	movs	r4, #12
 80056e6:	805c      	strh	r4, [r3, #2]
 80056e8:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80056ec:	f8a3 e004 	strh.w	lr, [r3, #4]
 80056f0:	2224      	movs	r2, #36	; 0x24
 80056f2:	80da      	strh	r2, [r3, #6]
 80056f4:	811a      	strh	r2, [r3, #8]
 80056f6:	f04f 0c06 	mov.w	ip, #6
 80056fa:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80056fe:	2502      	movs	r5, #2
 8005700:	731d      	strb	r5, [r3, #12]
 8005702:	f04f 0a36 	mov.w	sl, #54	; 0x36
 8005706:	f8a3 a00e 	strh.w	sl, [r3, #14]
 800570a:	f8a3 e010 	strh.w	lr, [r3, #16]
 800570e:	825a      	strh	r2, [r3, #18]
 8005710:	829a      	strh	r2, [r3, #20]
 8005712:	f8a3 c016 	strh.w	ip, [r3, #22]
 8005716:	f04f 0503 	mov.w	r5, #3
 800571a:	761d      	strb	r5, [r3, #24]
 800571c:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005720:	835e      	strh	r6, [r3, #26]
 8005722:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8005726:	83da      	strh	r2, [r3, #30]
 8005728:	841a      	strh	r2, [r3, #32]
 800572a:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 800572e:	f04f 0504 	mov.w	r5, #4
 8005732:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 8005736:	f04f 088a 	mov.w	r8, #138	; 0x8a
 800573a:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 800573e:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 8005742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005744:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005746:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 800574a:	f04f 0505 	mov.w	r5, #5
 800574e:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 8005752:	27b4      	movs	r7, #180	; 0xb4
 8005754:	865f      	strh	r7, [r3, #50]	; 0x32
 8005756:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 800575a:	86da      	strh	r2, [r3, #54]	; 0x36
 800575c:	871a      	strh	r2, [r3, #56]	; 0x38
 800575e:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8005762:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 8005766:	f04f 05de 	mov.w	r5, #222	; 0xde
 800576a:	87dd      	strh	r5, [r3, #62]	; 0x3e
 800576c:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8005770:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005774:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005778:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 800577c:	f04f 0907 	mov.w	r9, #7
 8005780:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8005784:	f44f 7984 	mov.w	r9, #264	; 0x108
 8005788:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 800578c:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8005790:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005794:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005798:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 800579c:	f04f 0b08 	mov.w	fp, #8
 80057a0:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80057a4:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80057a8:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80057ac:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 80057b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80057b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057b8:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 80057bc:	2509      	movs	r5, #9
 80057be:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 80057c2:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80057c6:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80057ca:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 80057ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80057d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80057d6:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 80057da:	250a      	movs	r5, #10
 80057dc:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80057e0:	f44f 75c3 	mov.w	r5, #390	; 0x186
 80057e4:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 80057e8:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 80057ec:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80057f0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80057f4:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 80057f8:	f04f 090b 	mov.w	r9, #11
 80057fc:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8005800:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 8005804:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8005808:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 800580c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005810:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005814:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8005818:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 800581c:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8005820:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 8005824:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8005828:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800582c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005830:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 8005834:	f04f 060d 	mov.w	r6, #13
 8005838:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 800583c:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8005840:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 8005844:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005848:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800584c:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8005850:	f04f 0a0e 	mov.w	sl, #14
 8005854:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8005858:	f04f 0660 	mov.w	r6, #96	; 0x60
 800585c:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8005860:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8005864:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005868:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800586c:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8005870:	f04f 0a0f 	mov.w	sl, #15
 8005874:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8005878:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 800587c:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8005880:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005884:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005888:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 800588c:	f04f 0a10 	mov.w	sl, #16
 8005890:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8005894:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 8005898:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 800589c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80058a0:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80058a4:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 80058a8:	f04f 0a11 	mov.w	sl, #17
 80058ac:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80058b0:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80058b4:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80058b8:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 80058bc:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80058c0:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80058c4:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 80058c8:	f04f 0a12 	mov.w	sl, #18
 80058cc:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80058d0:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80058d4:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 80058d8:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80058dc:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80058e0:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80058e4:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 80058e8:	f04f 0a13 	mov.w	sl, #19
 80058ec:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 80058f0:	f44f 7a99 	mov.w	sl, #306	; 0x132
 80058f4:	4656      	mov	r6, sl
 80058f6:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 80058fa:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 80058fe:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8005902:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8005906:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 800590a:	f04f 0a14 	mov.w	sl, #20
 800590e:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 8005912:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 8005916:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 800591a:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 800591e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 8005922:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 8005926:	f04f 0a15 	mov.w	sl, #21
 800592a:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 800592e:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 8005932:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 8005936:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 800593a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 800593e:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 8005942:	f04f 0a16 	mov.w	sl, #22
 8005946:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 800594a:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 800594e:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 8005952:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8005956:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800595a:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 800595e:	f04f 0e17 	mov.w	lr, #23
 8005962:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 8005966:	f04f 0e60 	mov.w	lr, #96	; 0x60
 800596a:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 800596e:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8005972:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 8005976:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 800597a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 800597e:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8005982:	f04f 0918 	mov.w	r9, #24
 8005986:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 800598a:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 800598e:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8005992:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 8005996:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800599a:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 800599e:	f04f 0819 	mov.w	r8, #25
 80059a2:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80059a6:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80059aa:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 80059ae:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80059b2:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80059b6:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 80059ba:	271a      	movs	r7, #26
 80059bc:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80059c0:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80059c4:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 80059c8:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 80059cc:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80059d0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 80059d4:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 80059d8:	271b      	movs	r7, #27
 80059da:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 80059de:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80059e2:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 80059e6:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 80059ea:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 80059ee:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 80059f2:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 80059f6:	271c      	movs	r7, #28
 80059f8:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 80059fc:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8005a00:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8005a04:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8005a08:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8005a0c:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8005a10:	271d      	movs	r7, #29
 8005a12:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8005a16:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8005a1a:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8005a1e:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8005a22:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8005a26:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8005a2a:	271e      	movs	r7, #30
 8005a2c:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8005a30:	f04f 0660 	mov.w	r6, #96	; 0x60
 8005a34:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8005a38:	26e2      	movs	r6, #226	; 0xe2
 8005a3a:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8005a3e:	f44f 7790 	mov.w	r7, #288	; 0x120
 8005a42:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8005a46:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8005a4a:	f04f 0708 	mov.w	r7, #8
 8005a4e:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8005a52:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8005a54:	801c      	strh	r4, [r3, #0]
 8005a56:	f8a3 e002 	strh.w	lr, [r3, #2]
 8005a5a:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8005a5e:	f8a3 c004 	strh.w	ip, [r3, #4]
 8005a62:	80da      	strh	r2, [r3, #6]
};
 8005a64:	2700      	movs	r7, #0
 8005a66:	609f      	str	r7, [r3, #8]
 8005a68:	f04f 0804 	mov.w	r8, #4
 8005a6c:	f8a3 800c 	strh.w	r8, [r3, #12]
 8005a70:	821d      	strh	r5, [r3, #16]
 8005a72:	f8a3 e012 	strh.w	lr, [r3, #18]
 8005a76:	f8a3 c014 	strh.w	ip, [r3, #20]
 8005a7a:	82da      	strh	r2, [r3, #22]
 8005a7c:	619f      	str	r7, [r3, #24]
 8005a7e:	f04f 0e03 	mov.w	lr, #3
 8005a82:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8005a86:	841c      	strh	r4, [r3, #32]
 8005a88:	845e      	strh	r6, [r3, #34]	; 0x22
 8005a8a:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8005a8e:	84da      	strh	r2, [r3, #38]	; 0x26
 8005a90:	629f      	str	r7, [r3, #40]	; 0x28
 8005a92:	f04f 0407 	mov.w	r4, #7
 8005a96:	859c      	strh	r4, [r3, #44]	; 0x2c
 8005a98:	861d      	strh	r5, [r3, #48]	; 0x30
 8005a9a:	865e      	strh	r6, [r3, #50]	; 0x32
 8005a9c:	e004      	b.n	8005aa8 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8005a9e:	bf00      	nop
 8005aa0:	24005498 	.word	0x24005498
 8005aa4:	24005438 	.word	0x24005438
 8005aa8:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8005aac:	86da      	strh	r2, [r3, #54]	; 0x36
 8005aae:	639f      	str	r7, [r3, #56]	; 0x38
 8005ab0:	f04f 0205 	mov.w	r2, #5
 8005ab4:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	3340      	adds	r3, #64	; 0x40
 8005aba:	2c00      	cmp	r4, #0
 8005abc:	db0b      	blt.n	8005ad6 <_Z41__static_initialization_and_destruction_0ii+0x416>
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	609a      	str	r2, [r3, #8]
 8005ac6:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	805a      	strh	r2, [r3, #2]
 8005acc:	809a      	strh	r2, [r3, #4]
 8005ace:	80da      	strh	r2, [r3, #6]
 8005ad0:	3310      	adds	r3, #16
 8005ad2:	3c01      	subs	r4, #1
 8005ad4:	e7f1      	b.n	8005aba <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005ad8:	2205      	movs	r2, #5
 8005ada:	825a      	strh	r2, [r3, #18]
 8005adc:	222d      	movs	r2, #45	; 0x2d
 8005ade:	829a      	strh	r2, [r3, #20]
 8005ae0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8005ae4:	82da      	strh	r2, [r3, #22]
 8005ae6:	2246      	movs	r2, #70	; 0x46
 8005ae8:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8005aea:	4a0d      	ldr	r2, [pc, #52]	; (8005b20 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005aec:	61da      	str	r2, [r3, #28]
 8005aee:	2200      	movs	r2, #0
 8005af0:	841a      	strh	r2, [r3, #32]
        : color(col)
 8005af2:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24
 8005af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005afc:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8005afe:	b918      	cbnz	r0, 8005b08 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b04:	4299      	cmp	r1, r3
 8005b06:	d001      	beq.n	8005b0c <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8005b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8005b0c:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005b0e:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005b10:	61da      	str	r2, [r3, #28]
 8005b12:	e7f9      	b.n	8005b08 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8005b14:	4b01      	ldr	r3, [pc, #4]	; (8005b1c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8005b16:	4a02      	ldr	r2, [pc, #8]	; (8005b20 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8005b18:	61da      	str	r2, [r3, #28]
 8005b1a:	4770      	bx	lr
 8005b1c:	24000010 	.word	0x24000010
 8005b20:	08024a78 	.word	0x08024a78

08005b24 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt>:
    virtual void execute(T1 t1)
 8005b24:	b510      	push	{r4, lr}
 8005b26:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8005b28:	6844      	ldr	r4, [r0, #4]
 8005b2a:	68c2      	ldr	r2, [r0, #12]
 8005b2c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8005b30:	f012 0f01 	tst.w	r2, #1
 8005b34:	d102      	bne.n	8005b3c <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt+0x18>
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4798      	blx	r3
    }
 8005b3a:	bd10      	pop	{r4, pc}
 8005b3c:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8005b40:	f854 200c 	ldr.w	r2, [r4, ip]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	58d3      	ldr	r3, [r2, r3]
 8005b48:	e7f6      	b.n	8005b38 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt+0x14>

08005b4a <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005b4a:	6843      	ldr	r3, [r0, #4]
 8005b4c:	b14b      	cbz	r3, 8005b62 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x18>
 8005b4e:	6883      	ldr	r3, [r0, #8]
 8005b50:	b10b      	cbz	r3, 8005b56 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0xc>
 8005b52:	2001      	movs	r0, #1
 8005b54:	4770      	bx	lr
 8005b56:	68c3      	ldr	r3, [r0, #12]
 8005b58:	f013 0f01 	tst.w	r3, #1
 8005b5c:	d003      	beq.n	8005b66 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x1c>
 8005b5e:	2001      	movs	r0, #1
 8005b60:	4770      	bx	lr
 8005b62:	2000      	movs	r0, #0
 8005b64:	4770      	bx	lr
 8005b66:	2000      	movs	r0, #0
    }
 8005b68:	4770      	bx	lr

08005b6a <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv>:
    virtual void execute()
 8005b6a:	b508      	push	{r3, lr}
 8005b6c:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8005b6e:	6841      	ldr	r1, [r0, #4]
 8005b70:	68c2      	ldr	r2, [r0, #12]
 8005b72:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8005b76:	f012 0f01 	tst.w	r2, #1
 8005b7a:	d102      	bne.n	8005b82 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv+0x18>
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	4798      	blx	r3
    }
 8005b80:	bd08      	pop	{r3, pc}
 8005b82:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)();
 8005b86:	f851 200c 	ldr.w	r2, [r1, ip]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	58d3      	ldr	r3, [r2, r3]
 8005b8e:	e7f6      	b.n	8005b7e <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv+0x14>

08005b90 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8005b90:	6843      	ldr	r3, [r0, #4]
 8005b92:	b14b      	cbz	r3, 8005ba8 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x18>
 8005b94:	6883      	ldr	r3, [r0, #8]
 8005b96:	b10b      	cbz	r3, 8005b9c <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0xc>
 8005b98:	2001      	movs	r0, #1
 8005b9a:	4770      	bx	lr
 8005b9c:	68c3      	ldr	r3, [r0, #12]
 8005b9e:	f013 0f01 	tst.w	r3, #1
 8005ba2:	d003      	beq.n	8005bac <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x1c>
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	4770      	bx	lr
 8005ba8:	2000      	movs	r0, #0
 8005baa:	4770      	bx	lr
 8005bac:	2000      	movs	r0, #0
    }
 8005bae:	4770      	bx	lr

08005bb0 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev+0x18>)
 8005bb6:	6003      	str	r3, [r0, #0]
    {
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev+0x1c>)
 8005bba:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005bbc:	2110      	movs	r1, #16
 8005bbe:	f01d f8da 	bl	8022d76 <_ZdlPvj>
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08025b68 	.word	0x08025b68
 8005bcc:	08024ad4 	.word	0x08024ad4

08005bd0 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev+0x18>)
 8005bd6:	6003      	str	r3, [r0, #0]
    }
 8005bd8:	4b04      	ldr	r3, [pc, #16]	; (8005bec <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev+0x1c>)
 8005bda:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005bdc:	2110      	movs	r1, #16
 8005bde:	f01d f8ca 	bl	8022d76 <_ZdlPvj>
 8005be2:	4620      	mov	r0, r4
 8005be4:	bd10      	pop	{r4, pc}
 8005be6:	bf00      	nop
 8005be8:	08025b80 	.word	0x08025b80
 8005bec:	08025b50 	.word	0x08025b50

08005bf0 <_ZN14CustomKeyboardD0Ev>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <_ZN14CustomKeyboardD0Ev+0x9c>)
 8005bf6:	6003      	str	r3, [r0, #0]
 8005bf8:	4b25      	ldr	r3, [pc, #148]	; (8005c90 <_ZN14CustomKeyboardD0Ev+0xa0>)
 8005bfa:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    }
 8005bfe:	4b25      	ldr	r3, [pc, #148]	; (8005c94 <_ZN14CustomKeyboardD0Ev+0xa4>)
 8005c00:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c04:	4a24      	ldr	r2, [pc, #144]	; (8005c98 <_ZN14CustomKeyboardD0Ev+0xa8>)
 8005c06:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
    {
 8005c0a:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <_ZN14CustomKeyboardD0Ev+0xac>)
 8005c0c:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c10:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
    {
 8005c14:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c18:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
    {
 8005c1c:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005c20:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
    {
 8005c24:	f8c0 31dc 	str.w	r3, [r0, #476]	; 0x1dc
 8005c28:	4e1d      	ldr	r6, [pc, #116]	; (8005ca0 <_ZN14CustomKeyboardD0Ev+0xb0>)
 8005c2a:	f8c0 6194 	str.w	r6, [r0, #404]	; 0x194
 8005c2e:	4d1d      	ldr	r5, [pc, #116]	; (8005ca4 <_ZN14CustomKeyboardD0Ev+0xb4>)
 8005c30:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
 8005c34:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <_ZN14CustomKeyboardD0Ev+0xb8>)
 8005c36:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
 8005c3a:	4b1c      	ldr	r3, [pc, #112]	; (8005cac <_ZN14CustomKeyboardD0Ev+0xbc>)
 8005c3c:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
 8005c40:	491b      	ldr	r1, [pc, #108]	; (8005cb0 <_ZN14CustomKeyboardD0Ev+0xc0>)
 8005c42:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005c44:	491b      	ldr	r1, [pc, #108]	; (8005cb4 <_ZN14CustomKeyboardD0Ev+0xc4>)
 8005c46:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 8005c4a:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 8005c4e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8005c52:	4f19      	ldr	r7, [pc, #100]	; (8005cb8 <_ZN14CustomKeyboardD0Ev+0xc8>)
 8005c54:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8005c58:	4f18      	ldr	r7, [pc, #96]	; (8005cbc <_ZN14CustomKeyboardD0Ev+0xcc>)
 8005c5a:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
 8005c5e:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
 8005c62:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
 8005c66:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 8005c6a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8005c6e:	6641      	str	r1, [r0, #100]	; 0x64
 8005c70:	6642      	str	r2, [r0, #100]	; 0x64
 8005c72:	6643      	str	r3, [r0, #100]	; 0x64
 8005c74:	4a12      	ldr	r2, [pc, #72]	; (8005cc0 <_ZN14CustomKeyboardD0Ev+0xd0>)
 8005c76:	62c2      	str	r2, [r0, #44]	; 0x2c
 8005c78:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005c7a:	6002      	str	r2, [r0, #0]
 8005c7c:	6003      	str	r3, [r0, #0]
 8005c7e:	f44f 710d 	mov.w	r1, #564	; 0x234
 8005c82:	f01d f878 	bl	8022d76 <_ZdlPvj>
 8005c86:	4620      	mov	r0, r4
 8005c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	08025b98 	.word	0x08025b98
 8005c90:	08025b80 	.word	0x08025b80
 8005c94:	08025b50 	.word	0x08025b50
 8005c98:	08025b68 	.word	0x08025b68
 8005c9c:	08024ad4 	.word	0x08024ad4
 8005ca0:	08026788 	.word	0x08026788
 8005ca4:	08024a78 	.word	0x08024a78
 8005ca8:	0802554c 	.word	0x0802554c
 8005cac:	08026b18 	.word	0x08026b18
 8005cb0:	080269e4 	.word	0x080269e4
 8005cb4:	08026978 	.word	0x08026978
 8005cb8:	08025790 	.word	0x08025790
 8005cbc:	08026880 	.word	0x08026880
 8005cc0:	08026414 	.word	0x08026414

08005cc4 <_ZN14CustomKeyboard17setKeyMappingListEv>:
{
 8005cc4:	b530      	push	{r4, r5, lr}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	4604      	mov	r4, r0
    if (alphaKeys)
 8005cca:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
 8005cce:	b1d3      	cbz	r3, 8005d06 <_ZN14CustomKeyboard17setKeyMappingListEv+0x42>
        : typedTextId(id)
 8005cd0:	4d1a      	ldr	r5, [pc, #104]	; (8005d3c <_ZN14CustomKeyboard17setKeyMappingListEv+0x78>)
 8005cd2:	9500      	str	r5, [sp, #0]
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	f8ad 3004 	strh.w	r3, [sp, #4]
        modeBtnTextArea.setTypedText(TypedText(T_ALPHAMODE));
 8005cda:	4669      	mov	r1, sp
 8005cdc:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 8005ce0:	f00f fc7c 	bl	80155dc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005ce4:	9500      	str	r5, [sp, #0]
        if (uppercaseKeys)
 8005ce6:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8005cea:	b133      	cbz	r3, 8005cfa <_ZN14CustomKeyboard17setKeyMappingListEv+0x36>
            keyboard.setKeymappingList(&keyMappingListAlphaUpper);
 8005cec:	4914      	ldr	r1, [pc, #80]	; (8005d40 <_ZN14CustomKeyboard17setKeyMappingListEv+0x7c>)
 8005cee:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005cf2:	f010 fa45 	bl	8016180 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
}
 8005cf6:	b005      	add	sp, #20
 8005cf8:	bd30      	pop	{r4, r5, pc}
            keyboard.setKeymappingList(&keyMappingListAlphaLower);
 8005cfa:	4912      	ldr	r1, [pc, #72]	; (8005d44 <_ZN14CustomKeyboard17setKeyMappingListEv+0x80>)
 8005cfc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005d00:	f010 fa3e 	bl	8016180 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
 8005d04:	e7f7      	b.n	8005cf6 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
        : typedTextId(id)
 8005d06:	4d0d      	ldr	r5, [pc, #52]	; (8005d3c <_ZN14CustomKeyboard17setKeyMappingListEv+0x78>)
 8005d08:	9502      	str	r5, [sp, #8]
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f8ad 300c 	strh.w	r3, [sp, #12]
        modeBtnTextArea.setTypedText(TypedText(T_NUMMODE));
 8005d10:	a902      	add	r1, sp, #8
 8005d12:	f500 70ca 	add.w	r0, r0, #404	; 0x194
 8005d16:	f00f fc61 	bl	80155dc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    {
 8005d1a:	9502      	str	r5, [sp, #8]
        if (uppercaseKeys)
 8005d1c:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8005d20:	b12b      	cbz	r3, 8005d2e <_ZN14CustomKeyboard17setKeyMappingListEv+0x6a>
            keyboard.setKeymappingList(&keyMappingListNumUpper);
 8005d22:	4909      	ldr	r1, [pc, #36]	; (8005d48 <_ZN14CustomKeyboard17setKeyMappingListEv+0x84>)
 8005d24:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005d28:	f010 fa2a 	bl	8016180 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
 8005d2c:	e7e3      	b.n	8005cf6 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8005d2e:	4907      	ldr	r1, [pc, #28]	; (8005d4c <_ZN14CustomKeyboard17setKeyMappingListEv+0x88>)
 8005d30:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8005d34:	f010 fa24 	bl	8016180 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
}
 8005d38:	e7dd      	b.n	8005cf6 <_ZN14CustomKeyboard17setKeyMappingListEv+0x32>
 8005d3a:	bf00      	nop
 8005d3c:	08024a78 	.word	0x08024a78
 8005d40:	08025e18 	.word	0x08025e18
 8005d44:	08025e10 	.word	0x08025e10
 8005d48:	08025e08 	.word	0x08025e08
 8005d4c:	08025e00 	.word	0x08025e00

08005d50 <_ZN14CustomKeyboard23backspacePressedHandlerEv>:
{
 8005d50:	b538      	push	{r3, r4, r5, lr}
     *
     * @see setBufferPosition
     */
    uint16_t getBufferPosition()
    {
        return bufferPosition;
 8005d52:	f8b0 5062 	ldrh.w	r5, [r0, #98]	; 0x62
    if (pos > 0)
 8005d56:	b905      	cbnz	r5, 8005d5a <_ZN14CustomKeyboard23backspacePressedHandlerEv+0xa>
}
 8005d58:	bd38      	pop	{r3, r4, r5, pc}
 8005d5a:	4604      	mov	r4, r0
        buffer[pos - 1] = 0;
 8005d5c:	1e69      	subs	r1, r5, #1
 8005d5e:	f105 0387 	add.w	r3, r5, #135	; 0x87
 8005d62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005d66:	2200      	movs	r2, #0
 8005d68:	809a      	strh	r2, [r3, #4]
        keyboard.setBufferPosition(pos - 1);
 8005d6a:	b289      	uxth	r1, r1
 8005d6c:	302c      	adds	r0, #44	; 0x2c
 8005d6e:	f010 fa03 	bl	8016178 <_ZN8touchgfx8Keyboard17setBufferPositionEt>
        if (1 == pos)
 8005d72:	2d01      	cmp	r5, #1
 8005d74:	d1f0      	bne.n	8005d58 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x8>
            firstCharacterEntry = true;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
            uppercaseKeys = true;
 8005d7c:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
            setKeyMappingList();
 8005d80:	4620      	mov	r0, r4
 8005d82:	f7ff ff9f 	bl	8005cc4 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005d86:	e7e7      	b.n	8005d58 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x8>

08005d88 <_ZN14CustomKeyboard22capslockPressedHandlerEv>:
{
 8005d88:	b508      	push	{r3, lr}
    uppercaseKeys = !uppercaseKeys;
 8005d8a:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
 8005d8e:	f082 0201 	eor.w	r2, r2, #1
 8005d92:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    setKeyMappingList();
 8005d96:	f7ff ff95 	bl	8005cc4 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005d9a:	bd08      	pop	{r3, pc}

08005d9c <_ZN14CustomKeyboard18modePressedHandlerEv>:
{
 8005d9c:	b508      	push	{r3, lr}
    alphaKeys = !alphaKeys;
 8005d9e:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
 8005da2:	f083 0301 	eor.w	r3, r3, #1
 8005da6:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    if (firstCharacterEntry && alphaKeys)
 8005daa:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
 8005dae:	b122      	cbz	r2, 8005dba <_ZN14CustomKeyboard18modePressedHandlerEv+0x1e>
 8005db0:	b11b      	cbz	r3, 8005dba <_ZN14CustomKeyboard18modePressedHandlerEv+0x1e>
        uppercaseKeys = true;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
 8005db8:	e002      	b.n	8005dc0 <_ZN14CustomKeyboard18modePressedHandlerEv+0x24>
        uppercaseKeys = false;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    setKeyMappingList();
 8005dc0:	f7ff ff80 	bl	8005cc4 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005dc4:	bd08      	pop	{r3, pc}

08005dc6 <_ZN14CustomKeyboard17keyPressedhandlerEt>:
{
 8005dc6:	b508      	push	{r3, lr}
    if (firstCharacterEntry && keyChar != 0)
 8005dc8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
 8005dcc:	b103      	cbz	r3, 8005dd0 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xa>
 8005dce:	b901      	cbnz	r1, 8005dd2 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xc>
}
 8005dd0:	bd08      	pop	{r3, pc}
        firstCharacterEntry = false;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f880 322e 	strb.w	r3, [r0, #558]	; 0x22e
        uppercaseKeys = false;
 8005dd8:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
        setKeyMappingList();
 8005ddc:	f7ff ff72 	bl	8005cc4 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8005de0:	e7f6      	b.n	8005dd0 <_ZN14CustomKeyboard17keyPressedhandlerEt+0xa>
	...

08005de4 <_ZN14CustomKeyboardC1Ev>:
CustomKeyboard::CustomKeyboard() : keyboard(),
 8005de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005de8:	b08d      	sub	sp, #52	; 0x34
 8005dea:	4604      	mov	r4, r0
          visible(true)
 8005dec:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8006080 <_ZN14CustomKeyboardC1Ev+0x29c>
 8005df0:	f8c0 9000 	str.w	r9, [r0]
        : x(0), y(0), width(0), height(0)
 8005df4:	2500      	movs	r5, #0
 8005df6:	8085      	strh	r5, [r0, #4]
 8005df8:	80c5      	strh	r5, [r0, #6]
 8005dfa:	8105      	strh	r5, [r0, #8]
 8005dfc:	8145      	strh	r5, [r0, #10]
 8005dfe:	8185      	strh	r5, [r0, #12]
 8005e00:	81c5      	strh	r5, [r0, #14]
 8005e02:	8205      	strh	r5, [r0, #16]
 8005e04:	8245      	strh	r5, [r0, #18]
 8005e06:	6145      	str	r5, [r0, #20]
 8005e08:	6185      	str	r5, [r0, #24]
 8005e0a:	61c5      	str	r5, [r0, #28]
 8005e0c:	8405      	strh	r5, [r0, #32]
 8005e0e:	8445      	strh	r5, [r0, #34]	; 0x22
 8005e10:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8005e14:	f04f 0801 	mov.w	r8, #1
 8005e18:	f880 8025 	strb.w	r8, [r0, #37]	; 0x25
          firstChild(0)
 8005e1c:	4b8a      	ldr	r3, [pc, #552]	; (8006048 <_ZN14CustomKeyboardC1Ev+0x264>)
 8005e1e:	6003      	str	r3, [r0, #0]
 8005e20:	6285      	str	r5, [r0, #40]	; 0x28
    firstCharacterEntry(false)
 8005e22:	4607      	mov	r7, r0
 8005e24:	4b89      	ldr	r3, [pc, #548]	; (800604c <_ZN14CustomKeyboardC1Ev+0x268>)
 8005e26:	f847 3b2c 	str.w	r3, [r7], #44
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	f00f fed6 	bl	8015bdc <_ZN8touchgfx8KeyboardC1Ev>
 8005e30:	f504 76ca 	add.w	r6, r4, #404	; 0x194
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005e34:	2226      	movs	r2, #38	; 0x26
 8005e36:	4629      	mov	r1, r5
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f01d f961 	bl	8023100 <memset>
 8005e3e:	f8c4 9194 	str.w	r9, [r4, #404]	; 0x194
 8005e42:	80b5      	strh	r5, [r6, #4]
 8005e44:	80f5      	strh	r5, [r6, #6]
 8005e46:	8135      	strh	r5, [r6, #8]
 8005e48:	8175      	strh	r5, [r6, #10]
 8005e4a:	81b5      	strh	r5, [r6, #12]
 8005e4c:	81f5      	strh	r5, [r6, #14]
 8005e4e:	8235      	strh	r5, [r6, #16]
 8005e50:	8275      	strh	r5, [r6, #18]
 8005e52:	6175      	str	r5, [r6, #20]
 8005e54:	61b5      	str	r5, [r6, #24]
 8005e56:	61f5      	str	r5, [r6, #28]
 8005e58:	8435      	strh	r5, [r6, #32]
 8005e5a:	8475      	strh	r5, [r6, #34]	; 0x22
 8005e5c:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
 8005e60:	f886 8025 	strb.w	r8, [r6, #37]	; 0x25
 8005e64:	4b7a      	ldr	r3, [pc, #488]	; (8006050 <_ZN14CustomKeyboardC1Ev+0x26c>)
 8005e66:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8005e6a:	4b7a      	ldr	r3, [pc, #488]	; (8006054 <_ZN14CustomKeyboardC1Ev+0x270>)
 8005e6c:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
        : typedTextId(id)
 8005e70:	4b79      	ldr	r3, [pc, #484]	; (8006058 <_ZN14CustomKeyboardC1Ev+0x274>)
 8005e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e78:	85b3      	strh	r3, [r6, #44]	; 0x2c
        : color(col)
 8005e7a:	6335      	str	r5, [r6, #48]	; 0x30
 8005e7c:	86b5      	strh	r5, [r6, #52]	; 0x34
 8005e7e:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
 8005e82:	f886 5037 	strb.w	r5, [r6, #55]	; 0x37
 8005e86:	f886 5038 	strb.w	r5, [r6, #56]	; 0x38
 8005e8a:	f886 5039 	strb.w	r5, [r6, #57]	; 0x39
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005e8e:	87b5      	strh	r5, [r6, #60]	; 0x3c
 8005e90:	87f5      	strh	r5, [r6, #62]	; 0x3e
 8005e92:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
 8005e96:	f8a6 3042 	strh.w	r3, [r6, #66]	; 0x42
              text(0)
 8005e9a:	6475      	str	r5, [r6, #68]	; 0x44
 8005e9c:	4b6f      	ldr	r3, [pc, #444]	; (800605c <_ZN14CustomKeyboardC1Ev+0x278>)
 8005e9e:	9302      	str	r3, [sp, #8]
 8005ea0:	9503      	str	r5, [sp, #12]
 8005ea2:	466b      	mov	r3, sp
 8005ea4:	aa02      	add	r2, sp, #8
 8005ea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005eaa:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005eae:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8006084 <_ZN14CustomKeyboardC1Ev+0x2a0>
 8005eb2:	f8c4 c1dc 	str.w	ip, [r4, #476]	; 0x1dc
        : pobject(pObject), pmemfun(pmemfun_0)
 8005eb6:	4a6a      	ldr	r2, [pc, #424]	; (8006060 <_ZN14CustomKeyboardC1Ev+0x27c>)
 8005eb8:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
 8005ebc:	f8c4 41e0 	str.w	r4, [r4, #480]	; 0x1e0
 8005ec0:	f504 7ef2 	add.w	lr, r4, #484	; 0x1e4
 8005ec4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005ec8:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005ecc:	4965      	ldr	r1, [pc, #404]	; (8006064 <_ZN14CustomKeyboardC1Ev+0x280>)
 8005ece:	9104      	str	r1, [sp, #16]
 8005ed0:	9505      	str	r5, [sp, #20]
 8005ed2:	a904      	add	r1, sp, #16
 8005ed4:	c903      	ldmia	r1, {r0, r1}
 8005ed6:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005eda:	f8c4 c1ec 	str.w	ip, [r4, #492]	; 0x1ec
        : pobject(pObject), pmemfun(pmemfun_0)
 8005ede:	f8c4 21ec 	str.w	r2, [r4, #492]	; 0x1ec
 8005ee2:	f8c4 41f0 	str.w	r4, [r4, #496]	; 0x1f0
 8005ee6:	f504 7efa 	add.w	lr, r4, #500	; 0x1f4
 8005eea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005eee:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005ef2:	495d      	ldr	r1, [pc, #372]	; (8006068 <_ZN14CustomKeyboardC1Ev+0x284>)
 8005ef4:	9106      	str	r1, [sp, #24]
 8005ef6:	9507      	str	r5, [sp, #28]
 8005ef8:	a906      	add	r1, sp, #24
 8005efa:	c903      	ldmia	r1, {r0, r1}
 8005efc:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005f00:	f8c4 c1fc 	str.w	ip, [r4, #508]	; 0x1fc
        : pobject(pObject), pmemfun(pmemfun_0)
 8005f04:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
 8005f08:	f8c4 4200 	str.w	r4, [r4, #512]	; 0x200
 8005f0c:	f504 7e01 	add.w	lr, r4, #516	; 0x204
 8005f10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f14:	e88e 0003 	stmia.w	lr, {r0, r1}
 8005f18:	4954      	ldr	r1, [pc, #336]	; (800606c <_ZN14CustomKeyboardC1Ev+0x288>)
 8005f1a:	9108      	str	r1, [sp, #32]
 8005f1c:	9509      	str	r5, [sp, #36]	; 0x24
 8005f1e:	a908      	add	r1, sp, #32
 8005f20:	c903      	ldmia	r1, {r0, r1}
 8005f22:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<void>
 8005f26:	f8c4 c20c 	str.w	ip, [r4, #524]	; 0x20c
        : pobject(pObject), pmemfun(pmemfun_0)
 8005f2a:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 8005f2e:	f8c4 4210 	str.w	r4, [r4, #528]	; 0x210
 8005f32:	f504 7205 	add.w	r2, r4, #532	; 0x214
 8005f36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f3a:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f3e:	4a4c      	ldr	r2, [pc, #304]	; (8006070 <_ZN14CustomKeyboardC1Ev+0x28c>)
 8005f40:	920a      	str	r2, [sp, #40]	; 0x28
 8005f42:	950b      	str	r5, [sp, #44]	; 0x2c
 8005f44:	aa0c      	add	r2, sp, #48	; 0x30
 8005f46:	e912 0003 	ldmdb	r2, {r0, r1}
 8005f4a:	e883 0003 	stmia.w	r3, {r0, r1}
class GenericCallback<T1, void, void>
 8005f4e:	4a49      	ldr	r2, [pc, #292]	; (8006074 <_ZN14CustomKeyboardC1Ev+0x290>)
 8005f50:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
        : pobject(pObject), pmemfun(pmemfun_1)
 8005f54:	4a48      	ldr	r2, [pc, #288]	; (8006078 <_ZN14CustomKeyboardC1Ev+0x294>)
 8005f56:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
 8005f5a:	f8c4 4220 	str.w	r4, [r4, #544]	; 0x220
 8005f5e:	f504 7209 	add.w	r2, r4, #548	; 0x224
 8005f62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f66:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f6a:	f884 822c 	strb.w	r8, [r4, #556]	; 0x22c
 8005f6e:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
 8005f72:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
    layout.callbackAreaArray[0].callback = &capslockPressed;
 8005f76:	4941      	ldr	r1, [pc, #260]	; (800607c <_ZN14CustomKeyboardC1Ev+0x298>)
 8005f78:	68cb      	ldr	r3, [r1, #12]
 8005f7a:	f504 72ee 	add.w	r2, r4, #476	; 0x1dc
 8005f7e:	609a      	str	r2, [r3, #8]
    layout.callbackAreaArray[1].callback = &backspacePressed;
 8005f80:	68cb      	ldr	r3, [r1, #12]
 8005f82:	f504 72f6 	add.w	r2, r4, #492	; 0x1ec
 8005f86:	619a      	str	r2, [r3, #24]
    layout.callbackAreaArray[2].callback = &modePressed;
 8005f88:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
 8005f8c:	629a      	str	r2, [r3, #40]	; 0x28
    layout.callbackAreaArray[3].callback = &donePressed;
 8005f8e:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38
    keyboard.setLayout(&layout);
 8005f94:	4638      	mov	r0, r7
 8005f96:	f00f fe9a 	bl	8015cce <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>
    keyboard.setKeyListener(keyPressed);
 8005f9a:	f504 7307 	add.w	r3, r4, #540	; 0x21c
     *
     * @note Backspace, shift and mode keys report a 0 as value.
     */
    void setKeyListener(GenericCallback<Unicode::UnicodeChar>& callback)
    {
        keyListener = &callback;
 8005f9e:	65a3      	str	r3, [r4, #88]	; 0x58
        setX(x);
 8005fa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	4798      	blx	r3
        setY(y);
 8005faa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	4798      	blx	r3
        setWidth(width);
 8005fb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	4798      	blx	r3
        setHeight(height);
 8005fc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005fc8:	4638      	mov	r0, r7
 8005fca:	4798      	blx	r3
    keyboard.setTextIndentation();
 8005fcc:	4638      	mov	r0, r7
 8005fce:	f00f feaf 	bl	8015d30 <_ZN8touchgfx8Keyboard18setTextIndentationEv>
    memset(buffer, 0, sizeof(buffer));
 8005fd2:	f504 798a 	add.w	r9, r4, #276	; 0x114
 8005fd6:	227e      	movs	r2, #126	; 0x7e
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4648      	mov	r0, r9
 8005fdc:	f01d f890 	bl	8023100 <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 8005fe0:	223f      	movs	r2, #63	; 0x3f
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	f00f fe67 	bl	8015cb8 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    uppercaseKeys = true;
 8005fea:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
    firstCharacterEntry = true;
 8005fee:	f884 822e 	strb.w	r8, [r4, #558]	; 0x22e
        setX(x);
 8005ff2:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	210c      	movs	r1, #12
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	4798      	blx	r3
        setY(y);
 8005ffe:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 8006002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006004:	21e9      	movs	r1, #233	; 0xe9
 8006006:	4630      	mov	r0, r6
 8006008:	4798      	blx	r3
        setWidth(width);
 800600a:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	214e      	movs	r1, #78	; 0x4e
 8006012:	4630      	mov	r0, r6
 8006014:	4798      	blx	r3
        setHeight(height);
 8006016:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
 800601a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601c:	2124      	movs	r1, #36	; 0x24
 800601e:	4630      	mov	r0, r6
 8006020:	4798      	blx	r3
        : color(col)
 8006022:	f04f 33ff 	mov.w	r3, #4294967295
        color = newColor;
 8006026:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
    setKeyMappingList();
 800602a:	4620      	mov	r0, r4
 800602c:	f7ff fe4a 	bl	8005cc4 <_ZN14CustomKeyboard17setKeyMappingListEv>
    add(keyboard);
 8006030:	4639      	mov	r1, r7
 8006032:	4620      	mov	r0, r4
 8006034:	f00c fd8c 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(modeBtnTextArea);
 8006038:	4631      	mov	r1, r6
 800603a:	4620      	mov	r0, r4
 800603c:	f00c fd88 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006040:	4620      	mov	r0, r4
 8006042:	b00d      	add	sp, #52	; 0x34
 8006044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006048:	08026414 	.word	0x08026414
 800604c:	08025b98 	.word	0x08025b98
 8006050:	0802554c 	.word	0x0802554c
 8006054:	08026788 	.word	0x08026788
 8006058:	08024a78 	.word	0x08024a78
 800605c:	08005d89 	.word	0x08005d89
 8006060:	08025b68 	.word	0x08025b68
 8006064:	08005d51 	.word	0x08005d51
 8006068:	08005d9d 	.word	0x08005d9d
 800606c:	08005675 	.word	0x08005675
 8006070:	08005dc7 	.word	0x08005dc7
 8006074:	08025b50 	.word	0x08025b50
 8006078:	08025b80 	.word	0x08025b80
 800607c:	24000010 	.word	0x24000010
 8006080:	08026b18 	.word	0x08026b18
 8006084:	08024ad4 	.word	0x08024ad4

08006088 <_ZN14CustomKeyboard11clearBufferEv>:
{
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
 800608c:	f500 758a 	add.w	r5, r0, #276	; 0x114
 8006090:	227e      	movs	r2, #126	; 0x7e
 8006092:	2100      	movs	r1, #0
 8006094:	4628      	mov	r0, r5
 8006096:	f01d f833 	bl	8023100 <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 800609a:	223f      	movs	r2, #63	; 0x3f
 800609c:	4629      	mov	r1, r5
 800609e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80060a2:	f00f fe09 	bl	8015cb8 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    uppercaseKeys = true;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
    firstCharacterEntry = true;
 80060ac:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    alphaKeys = true;
 80060b0:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c
    setKeyMappingList();
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7ff fe05 	bl	8005cc4 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 80060ba:	bd38      	pop	{r3, r4, r5, pc}

080060bc <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
 80060bc:	b508      	push	{r3, lr}
 80060be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060c2:	2001      	movs	r0, #1
 80060c4:	f7ff fafc 	bl	80056c0 <_Z41__static_initialization_and_destruction_0ii>
 80060c8:	bd08      	pop	{r3, pc}

080060ca <_GLOBAL__sub_D__ZN14CustomKeyboardC2Ev>:
 80060ca:	b508      	push	{r3, lr}
 80060cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060d0:	2000      	movs	r0, #0
 80060d2:	f7ff faf5 	bl	80056c0 <_Z41__static_initialization_and_destruction_0ii>
 80060d6:	bd08      	pop	{r3, pc}

080060d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80060d8:	b510      	push	{r4, lr}
 80060da:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80060dc:	f7fd fd38 	bl	8003b50 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80060e0:	4b01      	ldr	r3, [pc, #4]	; (80060e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 80060e2:	6023      	str	r3, [r4, #0]
{

}
 80060e4:	4620      	mov	r0, r4
 80060e6:	bd10      	pop	{r4, pc}
 80060e8:	08024b9c 	.word	0x08024b9c

080060ec <_ZN5ModelC1Ev>:

uint8_t password_ascii[64];
uint8_t ssid_ascii[32];
uint8_t encryption_ascii[30];

Model::Model() : modelListener(0)
 80060ec:	2200      	movs	r2, #0
 80060ee:	6002      	str	r2, [r0, #0]
{

}
 80060f0:	4770      	bx	lr

080060f2 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80060f2:	4770      	bx	lr

080060f4 <_ZN8touchgfx9Presenter8activateEv>:
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
    {
    }
 80060f4:	4770      	bx	lr

080060f6 <_ZN8touchgfx9Presenter10deactivateEv>:
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
    {
    }
 80060f6:	4770      	bx	lr

080060f8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
    {
 80060f8:	4b01      	ldr	r3, [pc, #4]	; (8006100 <_ZN8touchgfx9PresenterD1Ev+0x8>)
 80060fa:	6003      	str	r3, [r0, #0]
    }
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	08025e28 	.word	0x08025e28

08006104 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8006104:	4b01      	ldr	r3, [pc, #4]	; (800610c <_ZN13ModelListenerD1Ev+0x8>)
 8006106:	6003      	str	r3, [r0, #0]
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	08025e40 	.word	0x08025e40

08006110 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {};
 8006110:	4a05      	ldr	r2, [pc, #20]	; (8006128 <_ZN19mainScreenPresenterD1Ev+0x18>)
 8006112:	f102 0108 	add.w	r1, r2, #8
 8006116:	6001      	str	r1, [r0, #0]
 8006118:	3220      	adds	r2, #32
 800611a:	6042      	str	r2, [r0, #4]
 800611c:	4a03      	ldr	r2, [pc, #12]	; (800612c <_ZN19mainScreenPresenterD1Ev+0x1c>)
 800611e:	6042      	str	r2, [r0, #4]
    {
 8006120:	4a03      	ldr	r2, [pc, #12]	; (8006130 <_ZN19mainScreenPresenterD1Ev+0x20>)
 8006122:	6002      	str	r2, [r0, #0]
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	08025e48 	.word	0x08025e48
 800612c:	08025e40 	.word	0x08025e40
 8006130:	08025e28 	.word	0x08025e28

08006134 <_ZThn4_N19mainScreenPresenterD1Ev>:
 8006134:	4603      	mov	r3, r0
 8006136:	4a07      	ldr	r2, [pc, #28]	; (8006154 <_ZThn4_N19mainScreenPresenterD1Ev+0x20>)
 8006138:	f102 0108 	add.w	r1, r2, #8
 800613c:	f840 1c04 	str.w	r1, [r0, #-4]
 8006140:	3220      	adds	r2, #32
 8006142:	f840 2904 	str.w	r2, [r0], #-4
 8006146:	4a04      	ldr	r2, [pc, #16]	; (8006158 <_ZThn4_N19mainScreenPresenterD1Ev+0x24>)
 8006148:	6042      	str	r2, [r0, #4]
 800614a:	4a04      	ldr	r2, [pc, #16]	; (800615c <_ZThn4_N19mainScreenPresenterD1Ev+0x28>)
 800614c:	f843 2c04 	str.w	r2, [r3, #-4]
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	08025e48 	.word	0x08025e48
 8006158:	08025e40 	.word	0x08025e40
 800615c:	08025e28 	.word	0x08025e28

08006160 <_ZN19mainScreenPresenter8activateEv>:
}

void mainScreenPresenter::activate()
{

}
 8006160:	4770      	bx	lr

08006162 <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{

}
 8006162:	4770      	bx	lr

08006164 <_Z41__static_initialization_and_destruction_0ii>:
 8006164:	2801      	cmp	r0, #1
 8006166:	d006      	beq.n	8006176 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8006168:	b920      	cbnz	r0, 8006174 <_Z41__static_initialization_and_destruction_0ii+0x10>
 800616a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800616e:	4299      	cmp	r1, r3
 8006170:	f000 8222 	beq.w	80065b8 <_Z41__static_initialization_and_destruction_0ii+0x454>
 8006174:	4770      	bx	lr
 8006176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800617a:	4299      	cmp	r1, r3
 800617c:	d1f4      	bne.n	8006168 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800617e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 8006182:	4bf0      	ldr	r3, [pc, #960]	; (8006544 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8006184:	2201      	movs	r2, #1
 8006186:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006188:	240c      	movs	r4, #12
 800618a:	805c      	strh	r4, [r3, #2]
 800618c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8006190:	f8a3 e004 	strh.w	lr, [r3, #4]
 8006194:	2224      	movs	r2, #36	; 0x24
 8006196:	80da      	strh	r2, [r3, #6]
 8006198:	811a      	strh	r2, [r3, #8]
 800619a:	f04f 0c06 	mov.w	ip, #6
 800619e:	f8a3 c00a 	strh.w	ip, [r3, #10]
 80061a2:	2502      	movs	r5, #2
 80061a4:	731d      	strb	r5, [r3, #12]
 80061a6:	f04f 0a36 	mov.w	sl, #54	; 0x36
 80061aa:	f8a3 a00e 	strh.w	sl, [r3, #14]
 80061ae:	f8a3 e010 	strh.w	lr, [r3, #16]
 80061b2:	825a      	strh	r2, [r3, #18]
 80061b4:	829a      	strh	r2, [r3, #20]
 80061b6:	f8a3 c016 	strh.w	ip, [r3, #22]
 80061ba:	f04f 0503 	mov.w	r5, #3
 80061be:	761d      	strb	r5, [r3, #24]
 80061c0:	f04f 0660 	mov.w	r6, #96	; 0x60
 80061c4:	835e      	strh	r6, [r3, #26]
 80061c6:	f8a3 e01c 	strh.w	lr, [r3, #28]
 80061ca:	83da      	strh	r2, [r3, #30]
 80061cc:	841a      	strh	r2, [r3, #32]
 80061ce:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 80061d2:	f04f 0504 	mov.w	r5, #4
 80061d6:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 80061da:	f04f 088a 	mov.w	r8, #138	; 0x8a
 80061de:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 80061e2:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 80061e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061e8:	859a      	strh	r2, [r3, #44]	; 0x2c
 80061ea:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 80061ee:	f04f 0505 	mov.w	r5, #5
 80061f2:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 80061f6:	27b4      	movs	r7, #180	; 0xb4
 80061f8:	865f      	strh	r7, [r3, #50]	; 0x32
 80061fa:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 80061fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8006200:	871a      	strh	r2, [r3, #56]	; 0x38
 8006202:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 8006206:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 800620a:	f04f 05de 	mov.w	r5, #222	; 0xde
 800620e:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8006210:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8006214:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8006218:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800621c:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8006220:	f04f 0907 	mov.w	r9, #7
 8006224:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 8006228:	f44f 7984 	mov.w	r9, #264	; 0x108
 800622c:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 8006230:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 8006234:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006238:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800623c:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 8006240:	f04f 0b08 	mov.w	fp, #8
 8006244:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 8006248:	f44f 7b99 	mov.w	fp, #306	; 0x132
 800624c:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 8006250:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 8006254:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8006258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800625c:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 8006260:	2509      	movs	r5, #9
 8006262:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 8006266:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 800626a:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 800626e:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 8006272:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8006276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800627a:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 800627e:	250a      	movs	r5, #10
 8006280:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 8006284:	f44f 75c3 	mov.w	r5, #390	; 0x186
 8006288:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 800628c:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8006290:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8006294:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8006298:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 800629c:	f04f 090b 	mov.w	r9, #11
 80062a0:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 80062a4:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 80062a8:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 80062ac:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 80062b0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80062b4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80062b8:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 80062bc:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 80062c0:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 80062c4:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 80062c8:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 80062cc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80062d0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80062d4:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 80062d8:	f04f 060d 	mov.w	r6, #13
 80062dc:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 80062e0:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 80062e4:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 80062e8:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80062ec:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80062f0:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 80062f4:	f04f 0a0e 	mov.w	sl, #14
 80062f8:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 80062fc:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006300:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8006304:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 8006308:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800630c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8006310:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8006314:	f04f 0a0f 	mov.w	sl, #15
 8006318:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 800631c:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8006320:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8006324:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8006328:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800632c:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 8006330:	f04f 0a10 	mov.w	sl, #16
 8006334:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 8006338:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 800633c:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 8006340:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8006344:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8006348:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 800634c:	f04f 0a11 	mov.w	sl, #17
 8006350:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 8006354:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8006358:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 800635c:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 8006360:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8006364:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8006368:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 800636c:	f04f 0a12 	mov.w	sl, #18
 8006370:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 8006374:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8006378:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 800637c:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 8006380:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 8006384:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8006388:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 800638c:	f04f 0a13 	mov.w	sl, #19
 8006390:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8006394:	f44f 7a99 	mov.w	sl, #306	; 0x132
 8006398:	4656      	mov	r6, sl
 800639a:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 800639e:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 80063a2:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 80063a6:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 80063aa:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 80063ae:	f04f 0a14 	mov.w	sl, #20
 80063b2:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 80063b6:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 80063ba:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 80063be:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 80063c2:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 80063c6:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 80063ca:	f04f 0a15 	mov.w	sl, #21
 80063ce:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 80063d2:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 80063d6:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 80063da:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 80063de:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80063e2:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 80063e6:	f04f 0a16 	mov.w	sl, #22
 80063ea:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 80063ee:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 80063f2:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 80063f6:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 80063fa:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80063fe:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8006402:	f04f 0e17 	mov.w	lr, #23
 8006406:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 800640a:	f04f 0e60 	mov.w	lr, #96	; 0x60
 800640e:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8006412:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 8006416:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 800641a:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 800641e:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8006422:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 8006426:	f04f 0918 	mov.w	r9, #24
 800642a:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 800642e:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 8006432:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 8006436:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 800643a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 800643e:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 8006442:	f04f 0819 	mov.w	r8, #25
 8006446:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 800644a:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 800644e:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 8006452:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 8006456:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 800645a:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 800645e:	271a      	movs	r7, #26
 8006460:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 8006464:	f04f 0ade 	mov.w	sl, #222	; 0xde
 8006468:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 800646c:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 8006470:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 8006474:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8006478:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 800647c:	271b      	movs	r7, #27
 800647e:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 8006482:	f44f 7a84 	mov.w	sl, #264	; 0x108
 8006486:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 800648a:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 800648e:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8006492:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8006496:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 800649a:	271c      	movs	r7, #28
 800649c:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 80064a0:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 80064a4:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 80064a8:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 80064ac:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 80064b0:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 80064b4:	271d      	movs	r7, #29
 80064b6:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 80064ba:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 80064be:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 80064c2:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 80064c6:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 80064ca:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 80064ce:	271e      	movs	r7, #30
 80064d0:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 80064d4:	f04f 0660 	mov.w	r6, #96	; 0x60
 80064d8:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 80064dc:	26e2      	movs	r6, #226	; 0xe2
 80064de:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 80064e2:	f44f 7790 	mov.w	r7, #288	; 0x120
 80064e6:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 80064ea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 80064ee:	f04f 0708 	mov.w	r7, #8
 80064f2:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80064f8:	801c      	strh	r4, [r3, #0]
 80064fa:	f8a3 e002 	strh.w	lr, [r3, #2]
 80064fe:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8006502:	f8a3 c004 	strh.w	ip, [r3, #4]
 8006506:	80da      	strh	r2, [r3, #6]
};
 8006508:	2700      	movs	r7, #0
 800650a:	609f      	str	r7, [r3, #8]
 800650c:	f04f 0804 	mov.w	r8, #4
 8006510:	f8a3 800c 	strh.w	r8, [r3, #12]
 8006514:	821d      	strh	r5, [r3, #16]
 8006516:	f8a3 e012 	strh.w	lr, [r3, #18]
 800651a:	f8a3 c014 	strh.w	ip, [r3, #20]
 800651e:	82da      	strh	r2, [r3, #22]
 8006520:	619f      	str	r7, [r3, #24]
 8006522:	f04f 0e03 	mov.w	lr, #3
 8006526:	f8a3 e01c 	strh.w	lr, [r3, #28]
 800652a:	841c      	strh	r4, [r3, #32]
 800652c:	845e      	strh	r6, [r3, #34]	; 0x22
 800652e:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8006532:	84da      	strh	r2, [r3, #38]	; 0x26
 8006534:	629f      	str	r7, [r3, #40]	; 0x28
 8006536:	f04f 0407 	mov.w	r4, #7
 800653a:	859c      	strh	r4, [r3, #44]	; 0x2c
 800653c:	861d      	strh	r5, [r3, #48]	; 0x30
 800653e:	865e      	strh	r6, [r3, #50]	; 0x32
 8006540:	e004      	b.n	800654c <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8006542:	bf00      	nop
 8006544:	24005710 	.word	0x24005710
 8006548:	24005680 	.word	0x24005680
 800654c:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8006550:	86da      	strh	r2, [r3, #54]	; 0x36
 8006552:	639f      	str	r7, [r3, #56]	; 0x38
 8006554:	f04f 0205 	mov.w	r2, #5
 8006558:	879a      	strh	r2, [r3, #60]	; 0x3c
 800655a:	4604      	mov	r4, r0
 800655c:	3340      	adds	r3, #64	; 0x40
 800655e:	2c00      	cmp	r4, #0
 8006560:	db0b      	blt.n	800657a <_Z41__static_initialization_and_destruction_0ii+0x416>
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	605a      	str	r2, [r3, #4]
 8006568:	609a      	str	r2, [r3, #8]
 800656a:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 800656c:	801a      	strh	r2, [r3, #0]
 800656e:	805a      	strh	r2, [r3, #2]
 8006570:	809a      	strh	r2, [r3, #4]
 8006572:	80da      	strh	r2, [r3, #6]
 8006574:	3310      	adds	r3, #16
 8006576:	3c01      	subs	r4, #1
 8006578:	e7f1      	b.n	800655e <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800657a:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 800657c:	2205      	movs	r2, #5
 800657e:	825a      	strh	r2, [r3, #18]
 8006580:	222d      	movs	r2, #45	; 0x2d
 8006582:	829a      	strh	r2, [r3, #20]
 8006584:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8006588:	82da      	strh	r2, [r3, #22]
 800658a:	2246      	movs	r2, #70	; 0x46
 800658c:	831a      	strh	r2, [r3, #24]
 800658e:	4a0d      	ldr	r2, [pc, #52]	; (80065c4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006590:	61da      	str	r2, [r3, #28]
 8006592:	2200      	movs	r2, #0
 8006594:	841a      	strh	r2, [r3, #32]
        : color(col)
 8006596:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 800659a:	625a      	str	r2, [r3, #36]	; 0x24
 800659c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065a0:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 80065a2:	b918      	cbnz	r0, 80065ac <_Z41__static_initialization_and_destruction_0ii+0x448>
 80065a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065a8:	4299      	cmp	r1, r3
 80065aa:	d001      	beq.n	80065b0 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 80065ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 80065b2:	4a04      	ldr	r2, [pc, #16]	; (80065c4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 80065b4:	61da      	str	r2, [r3, #28]
 80065b6:	e7f9      	b.n	80065ac <_Z41__static_initialization_and_destruction_0ii+0x448>
 80065b8:	4b01      	ldr	r3, [pc, #4]	; (80065c0 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 80065ba:	4a02      	ldr	r2, [pc, #8]	; (80065c4 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 80065bc:	61da      	str	r2, [r3, #28]
 80065be:	4770      	bx	lr
 80065c0:	240056e0 	.word	0x240056e0
 80065c4:	08024a78 	.word	0x08024a78

080065c8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80065c8:	b510      	push	{r4, lr}
 80065ca:	4604      	mov	r4, r0
    {
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <_ZN8touchgfx9PresenterD0Ev+0x14>)
 80065ce:	6003      	str	r3, [r0, #0]
    }
 80065d0:	2104      	movs	r1, #4
 80065d2:	f01c fbd0 	bl	8022d76 <_ZdlPvj>
 80065d6:	4620      	mov	r0, r4
 80065d8:	bd10      	pop	{r4, pc}
 80065da:	bf00      	nop
 80065dc:	08025e28 	.word	0x08025e28

080065e0 <_ZN13ModelListenerD0Ev>:
 80065e0:	b510      	push	{r4, lr}
 80065e2:	4604      	mov	r4, r0
 80065e4:	4b03      	ldr	r3, [pc, #12]	; (80065f4 <_ZN13ModelListenerD0Ev+0x14>)
 80065e6:	6003      	str	r3, [r0, #0]
 80065e8:	2108      	movs	r1, #8
 80065ea:	f01c fbc4 	bl	8022d76 <_ZdlPvj>
 80065ee:	4620      	mov	r0, r4
 80065f0:	bd10      	pop	{r4, pc}
 80065f2:	bf00      	nop
 80065f4:	08025e40 	.word	0x08025e40

080065f8 <_ZN19mainScreenPresenterD0Ev>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	4604      	mov	r4, r0
 80065fc:	4b07      	ldr	r3, [pc, #28]	; (800661c <_ZN19mainScreenPresenterD0Ev+0x24>)
 80065fe:	f103 0208 	add.w	r2, r3, #8
 8006602:	6002      	str	r2, [r0, #0]
 8006604:	3320      	adds	r3, #32
 8006606:	6043      	str	r3, [r0, #4]
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <_ZN19mainScreenPresenterD0Ev+0x28>)
 800660a:	6043      	str	r3, [r0, #4]
    {
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <_ZN19mainScreenPresenterD0Ev+0x2c>)
 800660e:	6003      	str	r3, [r0, #0]
 8006610:	2110      	movs	r1, #16
 8006612:	f01c fbb0 	bl	8022d76 <_ZdlPvj>
 8006616:	4620      	mov	r0, r4
 8006618:	bd10      	pop	{r4, pc}
 800661a:	bf00      	nop
 800661c:	08025e48 	.word	0x08025e48
 8006620:	08025e40 	.word	0x08025e40
 8006624:	08025e28 	.word	0x08025e28

08006628 <_ZThn4_N19mainScreenPresenterD0Ev>:
 8006628:	b510      	push	{r4, lr}
 800662a:	4604      	mov	r4, r0
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <_ZThn4_N19mainScreenPresenterD0Ev+0x2c>)
 800662e:	f103 0208 	add.w	r2, r3, #8
 8006632:	f840 2c04 	str.w	r2, [r0, #-4]
 8006636:	3320      	adds	r3, #32
 8006638:	f844 3904 	str.w	r3, [r4], #-4
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <_ZThn4_N19mainScreenPresenterD0Ev+0x30>)
 800663e:	6063      	str	r3, [r4, #4]
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <_ZThn4_N19mainScreenPresenterD0Ev+0x34>)
 8006642:	f840 3c04 	str.w	r3, [r0, #-4]
 8006646:	2110      	movs	r1, #16
 8006648:	4620      	mov	r0, r4
 800664a:	f01c fb94 	bl	8022d76 <_ZdlPvj>
 800664e:	4620      	mov	r0, r4
 8006650:	bd10      	pop	{r4, pc}
 8006652:	bf00      	nop
 8006654:	08025e48 	.word	0x08025e48
 8006658:	08025e40 	.word	0x08025e40
 800665c:	08025e28 	.word	0x08025e28

08006660 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 8006660:	b410      	push	{r4}

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
    {
 8006662:	4a08      	ldr	r2, [pc, #32]	; (8006684 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x24>)
 8006664:	6002      	str	r2, [r0, #0]
    ModelListener() : model(0) {}
 8006666:	4a08      	ldr	r2, [pc, #32]	; (8006688 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x28>)
 8006668:	6042      	str	r2, [r0, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	6082      	str	r2, [r0, #8]
    : view(v)
 800666e:	4a07      	ldr	r2, [pc, #28]	; (800668c <_ZN19mainScreenPresenterC1ER14mainScreenView+0x2c>)
 8006670:	f102 0408 	add.w	r4, r2, #8
 8006674:	6004      	str	r4, [r0, #0]
 8006676:	3220      	adds	r2, #32
 8006678:	6042      	str	r2, [r0, #4]
 800667a:	60c1      	str	r1, [r0, #12]
}
 800667c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	08025e28 	.word	0x08025e28
 8006688:	08025e40 	.word	0x08025e40
 800668c:	08025e48 	.word	0x08025e48

08006690 <_GLOBAL__sub_I__ZN19mainScreenPresenterC2ER14mainScreenView>:
}
 8006690:	b508      	push	{r3, lr}
 8006692:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006696:	2001      	movs	r0, #1
 8006698:	f7ff fd64 	bl	8006164 <_Z41__static_initialization_and_destruction_0ii>
 800669c:	bd08      	pop	{r3, pc}

0800669e <_GLOBAL__sub_D__ZN19mainScreenPresenterC2ER14mainScreenView>:
 800669e:	b508      	push	{r3, lr}
 80066a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80066a4:	2000      	movs	r0, #0
 80066a6:	f7ff fd5d 	bl	8006164 <_Z41__static_initialization_and_destruction_0ii>
 80066aa:	bd08      	pop	{r3, pc}

080066ac <_ZN14mainScreenView14tearDownScreenEv>:
}

void mainScreenView::tearDownScreen()
{
    mainScreenViewBase::tearDownScreen();
}
 80066ac:	4770      	bx	lr
	...

080066b0 <_ZN8touchgfx8CallbackI14mainScreenViewivvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80066b0:	4a02      	ldr	r2, [pc, #8]	; (80066bc <_ZN8touchgfx8CallbackI14mainScreenViewivvED1Ev+0xc>)
 80066b2:	6002      	str	r2, [r0, #0]
    }
 80066b4:	4a02      	ldr	r2, [pc, #8]	; (80066c0 <_ZN8touchgfx8CallbackI14mainScreenViewivvED1Ev+0x10>)
 80066b6:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	08025ec0 	.word	0x08025ec0
 80066c0:	08025ea8 	.word	0x08025ea8

080066c4 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev>:
 80066c4:	4a02      	ldr	r2, [pc, #8]	; (80066d0 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev+0xc>)
 80066c6:	6002      	str	r2, [r0, #0]
    }
 80066c8:	4a02      	ldr	r2, [pc, #8]	; (80066d4 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED1Ev+0x10>)
 80066ca:	6002      	str	r2, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	08025e90 	.word	0x08025e90
 80066d4:	08025e78 	.word	0x08025e78

080066d8 <_Z41__static_initialization_and_destruction_0ii>:

void mainScreenView::updateWiFiInformaion(struct  wifiData data[], uint16_t numberOfPoints)
{
    wifiMenu.updateWifiList(data, numberOfPoints);
    //settingsMenu.updateWifiList(data, numberOfPoints);
}
 80066d8:	2801      	cmp	r0, #1
 80066da:	d006      	beq.n	80066ea <_Z41__static_initialization_and_destruction_0ii+0x12>
 80066dc:	b920      	cbnz	r0, 80066e8 <_Z41__static_initialization_and_destruction_0ii+0x10>
 80066de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066e2:	4299      	cmp	r1, r3
 80066e4:	f000 8222 	beq.w	8006b2c <_Z41__static_initialization_and_destruction_0ii+0x454>
 80066e8:	4770      	bx	lr
 80066ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066ee:	4299      	cmp	r1, r3
 80066f0:	d1f4      	bne.n	80066dc <_Z41__static_initialization_and_destruction_0ii+0x4>
 80066f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
};
 80066f6:	4bf0      	ldr	r3, [pc, #960]	; (8006ab8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	701a      	strb	r2, [r3, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80066fc:	240c      	movs	r4, #12
 80066fe:	805c      	strh	r4, [r3, #2]
 8006700:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8006704:	f8a3 e004 	strh.w	lr, [r3, #4]
 8006708:	2224      	movs	r2, #36	; 0x24
 800670a:	80da      	strh	r2, [r3, #6]
 800670c:	811a      	strh	r2, [r3, #8]
 800670e:	f04f 0c06 	mov.w	ip, #6
 8006712:	f8a3 c00a 	strh.w	ip, [r3, #10]
 8006716:	2502      	movs	r5, #2
 8006718:	731d      	strb	r5, [r3, #12]
 800671a:	f04f 0a36 	mov.w	sl, #54	; 0x36
 800671e:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8006722:	f8a3 e010 	strh.w	lr, [r3, #16]
 8006726:	825a      	strh	r2, [r3, #18]
 8006728:	829a      	strh	r2, [r3, #20]
 800672a:	f8a3 c016 	strh.w	ip, [r3, #22]
 800672e:	f04f 0503 	mov.w	r5, #3
 8006732:	761d      	strb	r5, [r3, #24]
 8006734:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006738:	835e      	strh	r6, [r3, #26]
 800673a:	f8a3 e01c 	strh.w	lr, [r3, #28]
 800673e:	83da      	strh	r2, [r3, #30]
 8006740:	841a      	strh	r2, [r3, #32]
 8006742:	f8a3 c022 	strh.w	ip, [r3, #34]	; 0x22
 8006746:	f04f 0504 	mov.w	r5, #4
 800674a:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
 800674e:	f04f 088a 	mov.w	r8, #138	; 0x8a
 8006752:	f8a3 8026 	strh.w	r8, [r3, #38]	; 0x26
 8006756:	f8a3 e028 	strh.w	lr, [r3, #40]	; 0x28
 800675a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800675c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800675e:	f8a3 c02e 	strh.w	ip, [r3, #46]	; 0x2e
 8006762:	f04f 0505 	mov.w	r5, #5
 8006766:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30
 800676a:	27b4      	movs	r7, #180	; 0xb4
 800676c:	865f      	strh	r7, [r3, #50]	; 0x32
 800676e:	f8a3 e034 	strh.w	lr, [r3, #52]	; 0x34
 8006772:	86da      	strh	r2, [r3, #54]	; 0x36
 8006774:	871a      	strh	r2, [r3, #56]	; 0x38
 8006776:	f8a3 c03a 	strh.w	ip, [r3, #58]	; 0x3a
 800677a:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c
 800677e:	f04f 05de 	mov.w	r5, #222	; 0xde
 8006782:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8006784:	f8a3 e040 	strh.w	lr, [r3, #64]	; 0x40
 8006788:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800678c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006790:	f8a3 c046 	strh.w	ip, [r3, #70]	; 0x46
 8006794:	f04f 0907 	mov.w	r9, #7
 8006798:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
 800679c:	f44f 7984 	mov.w	r9, #264	; 0x108
 80067a0:	f8a3 904a 	strh.w	r9, [r3, #74]	; 0x4a
 80067a4:	f8a3 e04c 	strh.w	lr, [r3, #76]	; 0x4c
 80067a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80067ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80067b0:	f8a3 c052 	strh.w	ip, [r3, #82]	; 0x52
 80067b4:	f04f 0b08 	mov.w	fp, #8
 80067b8:	f883 b054 	strb.w	fp, [r3, #84]	; 0x54
 80067bc:	f44f 7b99 	mov.w	fp, #306	; 0x132
 80067c0:	f8a3 b056 	strh.w	fp, [r3, #86]	; 0x56
 80067c4:	f8a3 e058 	strh.w	lr, [r3, #88]	; 0x58
 80067c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80067cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067d0:	f8a3 c05e 	strh.w	ip, [r3, #94]	; 0x5e
 80067d4:	2509      	movs	r5, #9
 80067d6:	f883 5060 	strb.w	r5, [r3, #96]	; 0x60
 80067da:	f44f 7bae 	mov.w	fp, #348	; 0x15c
 80067de:	f8a3 b062 	strh.w	fp, [r3, #98]	; 0x62
 80067e2:	f8a3 e064 	strh.w	lr, [r3, #100]	; 0x64
 80067e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80067ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80067ee:	f8a3 c06a 	strh.w	ip, [r3, #106]	; 0x6a
 80067f2:	250a      	movs	r5, #10
 80067f4:	f883 506c 	strb.w	r5, [r3, #108]	; 0x6c
 80067f8:	f44f 75c3 	mov.w	r5, #390	; 0x186
 80067fc:	f8a3 506e 	strh.w	r5, [r3, #110]	; 0x6e
 8006800:	f8a3 e070 	strh.w	lr, [r3, #112]	; 0x70
 8006804:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8006808:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800680c:	f8a3 c076 	strh.w	ip, [r3, #118]	; 0x76
 8006810:	f04f 090b 	mov.w	r9, #11
 8006814:	f883 9078 	strb.w	r9, [r3, #120]	; 0x78
 8006818:	f44f 79d8 	mov.w	r9, #432	; 0x1b0
 800681c:	f8a3 907a 	strh.w	r9, [r3, #122]	; 0x7a
 8006820:	f8a3 e07c 	strh.w	lr, [r3, #124]	; 0x7c
 8006824:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8006828:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800682c:	f8a3 c082 	strh.w	ip, [r3, #130]	; 0x82
 8006830:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
 8006834:	f8a3 4086 	strh.w	r4, [r3, #134]	; 0x86
 8006838:	f04f 0e8e 	mov.w	lr, #142	; 0x8e
 800683c:	f8a3 e088 	strh.w	lr, [r3, #136]	; 0x88
 8006840:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8006844:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8006848:	f8a3 c08e 	strh.w	ip, [r3, #142]	; 0x8e
 800684c:	f04f 060d 	mov.w	r6, #13
 8006850:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
 8006854:	f8a3 a092 	strh.w	sl, [r3, #146]	; 0x92
 8006858:	f8a3 e094 	strh.w	lr, [r3, #148]	; 0x94
 800685c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8006860:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8006864:	f8a3 c09a 	strh.w	ip, [r3, #154]	; 0x9a
 8006868:	f04f 0a0e 	mov.w	sl, #14
 800686c:	f883 a09c 	strb.w	sl, [r3, #156]	; 0x9c
 8006870:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006874:	f8a3 609e 	strh.w	r6, [r3, #158]	; 0x9e
 8006878:	f8a3 e0a0 	strh.w	lr, [r3, #160]	; 0xa0
 800687c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8006880:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8006884:	f8a3 c0a6 	strh.w	ip, [r3, #166]	; 0xa6
 8006888:	f04f 0a0f 	mov.w	sl, #15
 800688c:	f883 a0a8 	strb.w	sl, [r3, #168]	; 0xa8
 8006890:	f8a3 80aa 	strh.w	r8, [r3, #170]	; 0xaa
 8006894:	f8a3 e0ac 	strh.w	lr, [r3, #172]	; 0xac
 8006898:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 800689c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80068a0:	f8a3 c0b2 	strh.w	ip, [r3, #178]	; 0xb2
 80068a4:	f04f 0a10 	mov.w	sl, #16
 80068a8:	f883 a0b4 	strb.w	sl, [r3, #180]	; 0xb4
 80068ac:	f8a3 70b6 	strh.w	r7, [r3, #182]	; 0xb6
 80068b0:	f8a3 e0b8 	strh.w	lr, [r3, #184]	; 0xb8
 80068b4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80068b8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80068bc:	f8a3 c0be 	strh.w	ip, [r3, #190]	; 0xbe
 80068c0:	f04f 0a11 	mov.w	sl, #17
 80068c4:	f883 a0c0 	strb.w	sl, [r3, #192]	; 0xc0
 80068c8:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80068cc:	f8a3 a0c2 	strh.w	sl, [r3, #194]	; 0xc2
 80068d0:	f8a3 e0c4 	strh.w	lr, [r3, #196]	; 0xc4
 80068d4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80068d8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80068dc:	f8a3 c0ca 	strh.w	ip, [r3, #202]	; 0xca
 80068e0:	f04f 0a12 	mov.w	sl, #18
 80068e4:	f883 a0cc 	strb.w	sl, [r3, #204]	; 0xcc
 80068e8:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80068ec:	f8a3 a0ce 	strh.w	sl, [r3, #206]	; 0xce
 80068f0:	f8a3 e0d0 	strh.w	lr, [r3, #208]	; 0xd0
 80068f4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 80068f8:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80068fc:	f8a3 c0d6 	strh.w	ip, [r3, #214]	; 0xd6
 8006900:	f04f 0a13 	mov.w	sl, #19
 8006904:	f883 a0d8 	strb.w	sl, [r3, #216]	; 0xd8
 8006908:	f44f 7a99 	mov.w	sl, #306	; 0x132
 800690c:	4656      	mov	r6, sl
 800690e:	f8a3 a0da 	strh.w	sl, [r3, #218]	; 0xda
 8006912:	f8a3 e0dc 	strh.w	lr, [r3, #220]	; 0xdc
 8006916:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 800691a:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 800691e:	f8a3 c0e2 	strh.w	ip, [r3, #226]	; 0xe2
 8006922:	f04f 0a14 	mov.w	sl, #20
 8006926:	f883 a0e4 	strb.w	sl, [r3, #228]	; 0xe4
 800692a:	f8a3 b0e6 	strh.w	fp, [r3, #230]	; 0xe6
 800692e:	f8a3 e0e8 	strh.w	lr, [r3, #232]	; 0xe8
 8006932:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8006936:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800693a:	f8a3 c0ee 	strh.w	ip, [r3, #238]	; 0xee
 800693e:	f04f 0a15 	mov.w	sl, #21
 8006942:	f883 a0f0 	strb.w	sl, [r3, #240]	; 0xf0
 8006946:	f8a3 50f2 	strh.w	r5, [r3, #242]	; 0xf2
 800694a:	f8a3 e0f4 	strh.w	lr, [r3, #244]	; 0xf4
 800694e:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8006952:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8006956:	f8a3 c0fa 	strh.w	ip, [r3, #250]	; 0xfa
 800695a:	f04f 0a16 	mov.w	sl, #22
 800695e:	f883 a0fc 	strb.w	sl, [r3, #252]	; 0xfc
 8006962:	f8a3 90fe 	strh.w	r9, [r3, #254]	; 0xfe
 8006966:	f8a3 e100 	strh.w	lr, [r3, #256]	; 0x100
 800696a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800696e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8006972:	f8a3 c106 	strh.w	ip, [r3, #262]	; 0x106
 8006976:	f04f 0e17 	mov.w	lr, #23
 800697a:	f883 e108 	strb.w	lr, [r3, #264]	; 0x108
 800697e:	f04f 0e60 	mov.w	lr, #96	; 0x60
 8006982:	f8a3 e10a 	strh.w	lr, [r3, #266]	; 0x10a
 8006986:	f04f 0eb8 	mov.w	lr, #184	; 0xb8
 800698a:	f8a3 e10c 	strh.w	lr, [r3, #268]	; 0x10c
 800698e:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
 8006992:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
 8006996:	f8a3 c112 	strh.w	ip, [r3, #274]	; 0x112
 800699a:	f04f 0918 	mov.w	r9, #24
 800699e:	f883 9114 	strb.w	r9, [r3, #276]	; 0x114
 80069a2:	f8a3 8116 	strh.w	r8, [r3, #278]	; 0x116
 80069a6:	f8a3 e118 	strh.w	lr, [r3, #280]	; 0x118
 80069aa:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
 80069ae:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
 80069b2:	f8a3 c11e 	strh.w	ip, [r3, #286]	; 0x11e
 80069b6:	f04f 0819 	mov.w	r8, #25
 80069ba:	f883 8120 	strb.w	r8, [r3, #288]	; 0x120
 80069be:	f8a3 7122 	strh.w	r7, [r3, #290]	; 0x122
 80069c2:	f8a3 e124 	strh.w	lr, [r3, #292]	; 0x124
 80069c6:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
 80069ca:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
 80069ce:	f8a3 c12a 	strh.w	ip, [r3, #298]	; 0x12a
 80069d2:	271a      	movs	r7, #26
 80069d4:	f883 712c 	strb.w	r7, [r3, #300]	; 0x12c
 80069d8:	f04f 0ade 	mov.w	sl, #222	; 0xde
 80069dc:	f8a3 a12e 	strh.w	sl, [r3, #302]	; 0x12e
 80069e0:	f8a3 e130 	strh.w	lr, [r3, #304]	; 0x130
 80069e4:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
 80069e8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 80069ec:	f8a3 c136 	strh.w	ip, [r3, #310]	; 0x136
 80069f0:	271b      	movs	r7, #27
 80069f2:	f883 7138 	strb.w	r7, [r3, #312]	; 0x138
 80069f6:	f44f 7a84 	mov.w	sl, #264	; 0x108
 80069fa:	f8a3 a13a 	strh.w	sl, [r3, #314]	; 0x13a
 80069fe:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
 8006a02:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8006a06:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
 8006a0a:	f8a3 c142 	strh.w	ip, [r3, #322]	; 0x142
 8006a0e:	271c      	movs	r7, #28
 8006a10:	f883 7144 	strb.w	r7, [r3, #324]	; 0x144
 8006a14:	f8a3 6146 	strh.w	r6, [r3, #326]	; 0x146
 8006a18:	f8a3 e148 	strh.w	lr, [r3, #328]	; 0x148
 8006a1c:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
 8006a20:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 8006a24:	f8a3 c14e 	strh.w	ip, [r3, #334]	; 0x14e
 8006a28:	271d      	movs	r7, #29
 8006a2a:	f883 7150 	strb.w	r7, [r3, #336]	; 0x150
 8006a2e:	f8a3 b152 	strh.w	fp, [r3, #338]	; 0x152
 8006a32:	f8a3 e154 	strh.w	lr, [r3, #340]	; 0x154
 8006a36:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
 8006a3a:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
 8006a3e:	f8a3 c15a 	strh.w	ip, [r3, #346]	; 0x15a
 8006a42:	271e      	movs	r7, #30
 8006a44:	f883 715c 	strb.w	r7, [r3, #348]	; 0x15c
 8006a48:	f04f 0660 	mov.w	r6, #96	; 0x60
 8006a4c:	f8a3 615e 	strh.w	r6, [r3, #350]	; 0x15e
 8006a50:	26e2      	movs	r6, #226	; 0xe2
 8006a52:	f8a3 6160 	strh.w	r6, [r3, #352]	; 0x160
 8006a56:	f44f 7790 	mov.w	r7, #288	; 0x120
 8006a5a:	f8a3 7162 	strh.w	r7, [r3, #354]	; 0x162
 8006a5e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8006a62:	f04f 0708 	mov.w	r7, #8
 8006a66:	f8a3 7166 	strh.w	r7, [r3, #358]	; 0x166
 8006a6a:	4b14      	ldr	r3, [pc, #80]	; (8006abc <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8006a6c:	801c      	strh	r4, [r3, #0]
 8006a6e:	f8a3 e002 	strh.w	lr, [r3, #2]
 8006a72:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 8006a76:	f8a3 c004 	strh.w	ip, [r3, #4]
 8006a7a:	80da      	strh	r2, [r3, #6]
};
 8006a7c:	2700      	movs	r7, #0
 8006a7e:	609f      	str	r7, [r3, #8]
 8006a80:	f04f 0804 	mov.w	r8, #4
 8006a84:	f8a3 800c 	strh.w	r8, [r3, #12]
 8006a88:	821d      	strh	r5, [r3, #16]
 8006a8a:	f8a3 e012 	strh.w	lr, [r3, #18]
 8006a8e:	f8a3 c014 	strh.w	ip, [r3, #20]
 8006a92:	82da      	strh	r2, [r3, #22]
 8006a94:	619f      	str	r7, [r3, #24]
 8006a96:	f04f 0e03 	mov.w	lr, #3
 8006a9a:	f8a3 e01c 	strh.w	lr, [r3, #28]
 8006a9e:	841c      	strh	r4, [r3, #32]
 8006aa0:	845e      	strh	r6, [r3, #34]	; 0x22
 8006aa2:	f8a3 c024 	strh.w	ip, [r3, #36]	; 0x24
 8006aa6:	84da      	strh	r2, [r3, #38]	; 0x26
 8006aa8:	629f      	str	r7, [r3, #40]	; 0x28
 8006aaa:	f04f 0407 	mov.w	r4, #7
 8006aae:	859c      	strh	r4, [r3, #44]	; 0x2c
 8006ab0:	861d      	strh	r5, [r3, #48]	; 0x30
 8006ab2:	865e      	strh	r6, [r3, #50]	; 0x32
 8006ab4:	e004      	b.n	8006ac0 <_Z41__static_initialization_and_destruction_0ii+0x3e8>
 8006ab6:	bf00      	nop
 8006ab8:	24005908 	.word	0x24005908
 8006abc:	24005878 	.word	0x24005878
 8006ac0:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8006ac4:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ac6:	639f      	str	r7, [r3, #56]	; 0x38
 8006ac8:	f04f 0205 	mov.w	r2, #5
 8006acc:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006ace:	4604      	mov	r4, r0
 8006ad0:	3340      	adds	r3, #64	; 0x40
 8006ad2:	2c00      	cmp	r4, #0
 8006ad4:	db0b      	blt.n	8006aee <_Z41__static_initialization_and_destruction_0ii+0x416>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	605a      	str	r2, [r3, #4]
 8006adc:	609a      	str	r2, [r3, #8]
 8006ade:	60da      	str	r2, [r3, #12]
        : x(0), y(0), width(0), height(0)
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	805a      	strh	r2, [r3, #2]
 8006ae4:	809a      	strh	r2, [r3, #4]
 8006ae6:	80da      	strh	r2, [r3, #6]
 8006ae8:	3310      	adds	r3, #16
 8006aea:	3c01      	subs	r4, #1
 8006aec:	e7f1      	b.n	8006ad2 <_Z41__static_initialization_and_destruction_0ii+0x3fa>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8006aee:	4b11      	ldr	r3, [pc, #68]	; (8006b34 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8006af0:	2205      	movs	r2, #5
 8006af2:	825a      	strh	r2, [r3, #18]
 8006af4:	222d      	movs	r2, #45	; 0x2d
 8006af6:	829a      	strh	r2, [r3, #20]
 8006af8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8006afc:	82da      	strh	r2, [r3, #22]
 8006afe:	2246      	movs	r2, #70	; 0x46
 8006b00:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 8006b02:	4a0d      	ldr	r2, [pc, #52]	; (8006b38 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006b04:	61da      	str	r2, [r3, #28]
 8006b06:	2200      	movs	r2, #0
 8006b08:	841a      	strh	r2, [r3, #32]
        : color(col)
 8006b0a:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
 8006b0e:	625a      	str	r2, [r3, #36]	; 0x24
 8006b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b14:	62da      	str	r2, [r3, #44]	; 0x2c
static const Keyboard::Layout layout =
 8006b16:	b918      	cbnz	r0, 8006b20 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8006b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b1c:	4299      	cmp	r1, r3
 8006b1e:	d001      	beq.n	8006b24 <_Z41__static_initialization_and_destruction_0ii+0x44c>
 8006b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
 8006b24:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8006b26:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006b28:	61da      	str	r2, [r3, #28]
 8006b2a:	e7f9      	b.n	8006b20 <_Z41__static_initialization_and_destruction_0ii+0x448>
 8006b2c:	4b01      	ldr	r3, [pc, #4]	; (8006b34 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8006b2e:	4a02      	ldr	r2, [pc, #8]	; (8006b38 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8006b30:	61da      	str	r2, [r3, #28]
 8006b32:	4770      	bx	lr
 8006b34:	240058d8 	.word	0x240058d8
 8006b38:	08024a78 	.word	0x08024a78

08006b3c <_ZN8touchgfx8CallbackI14mainScreenViewivvE7executeEi>:
    virtual void execute(T1 t1)
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006b40:	6844      	ldr	r4, [r0, #4]
 8006b42:	68c2      	ldr	r2, [r0, #12]
 8006b44:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006b48:	f012 0f01 	tst.w	r2, #1
 8006b4c:	d102      	bne.n	8006b54 <_ZN8touchgfx8CallbackI14mainScreenViewivvE7executeEi+0x18>
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	4798      	blx	r3
    }
 8006b52:	bd10      	pop	{r4, pc}
 8006b54:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8006b58:	f854 200c 	ldr.w	r2, [r4, ip]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	58d3      	ldr	r3, [r2, r3]
 8006b60:	e7f6      	b.n	8006b50 <_ZN8touchgfx8CallbackI14mainScreenViewivvE7executeEi+0x14>

08006b62 <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006b62:	6843      	ldr	r3, [r0, #4]
 8006b64:	b14b      	cbz	r3, 8006b7a <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv+0x18>
 8006b66:	6883      	ldr	r3, [r0, #8]
 8006b68:	b10b      	cbz	r3, 8006b6e <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv+0xc>
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	4770      	bx	lr
 8006b6e:	68c3      	ldr	r3, [r0, #12]
 8006b70:	f013 0f01 	tst.w	r3, #1
 8006b74:	d003      	beq.n	8006b7e <_ZNK8touchgfx8CallbackI14mainScreenViewivvE7isValidEv+0x1c>
 8006b76:	2001      	movs	r0, #1
 8006b78:	4770      	bx	lr
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	4770      	bx	lr
 8006b7e:	2000      	movs	r0, #0
    }
 8006b80:	4770      	bx	lr

08006b82 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt>:
    virtual void execute(T1 t1)
 8006b82:	b510      	push	{r4, lr}
 8006b84:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8006b86:	6844      	ldr	r4, [r0, #4]
 8006b88:	68c2      	ldr	r2, [r0, #12]
 8006b8a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8006b8e:	f012 0f01 	tst.w	r2, #1
 8006b92:	d102      	bne.n	8006b9a <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt+0x18>
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	4798      	blx	r3
    }
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	ea4f 0c62 	mov.w	ip, r2, asr #1
        (pobject->*pmemfun)(t1);
 8006b9e:	f854 200c 	ldr.w	r2, [r4, ip]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	58d3      	ldr	r3, [r2, r3]
 8006ba6:	e7f6      	b.n	8006b96 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvE7executeEPt+0x14>

08006ba8 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8006ba8:	6843      	ldr	r3, [r0, #4]
 8006baa:	b14b      	cbz	r3, 8006bc0 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0x18>
 8006bac:	6883      	ldr	r3, [r0, #8]
 8006bae:	b10b      	cbz	r3, 8006bb4 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0xc>
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	4770      	bx	lr
 8006bb4:	68c3      	ldr	r3, [r0, #12]
 8006bb6:	f013 0f01 	tst.w	r3, #1
 8006bba:	d003      	beq.n	8006bc4 <_ZNK8touchgfx8CallbackI14mainScreenViewA_tvvE7isValidEv+0x1c>
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	4770      	bx	lr
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	4770      	bx	lr
 8006bc4:	2000      	movs	r0, #0
    }
 8006bc6:	4770      	bx	lr

08006bc8 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	4604      	mov	r4, r0
 8006bcc:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev+0x18>)
 8006bce:	6003      	str	r3, [r0, #0]
    }
 8006bd0:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <_ZN8touchgfx8CallbackI14mainScreenViewA_tvvED0Ev+0x1c>)
 8006bd2:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006bd4:	2110      	movs	r1, #16
 8006bd6:	f01c f8ce 	bl	8022d76 <_ZdlPvj>
 8006bda:	4620      	mov	r0, r4
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	bf00      	nop
 8006be0:	08025e90 	.word	0x08025e90
 8006be4:	08025e78 	.word	0x08025e78

08006be8 <_ZN8touchgfx8CallbackI14mainScreenViewivvED0Ev>:
 8006be8:	b510      	push	{r4, lr}
 8006bea:	4604      	mov	r4, r0
 8006bec:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <_ZN8touchgfx8CallbackI14mainScreenViewivvED0Ev+0x18>)
 8006bee:	6003      	str	r3, [r0, #0]
    }
 8006bf0:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <_ZN8touchgfx8CallbackI14mainScreenViewivvED0Ev+0x1c>)
 8006bf2:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006bf4:	2110      	movs	r1, #16
 8006bf6:	f01c f8be 	bl	8022d76 <_ZdlPvj>
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	bf00      	nop
 8006c00:	08025ec0 	.word	0x08025ec0
 8006c04:	08025ea8 	.word	0x08025ea8

08006c08 <_ZN14mainScreenView11setupScreenEv>:
{
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4604      	mov	r4, r0
    mainScreenViewBase::setupScreen();
 8006c0c:	f7fd fd22 	bl	8004654 <_ZN18mainScreenViewBase11setupScreenEv>
    wifiMenu.setAction(wifiAccessPointSelectedCallback);
 8006c10:	f104 0598 	add.w	r5, r4, #152	; 0x98
 8006c14:	f642 61b4 	movw	r1, #11956	; 0x2eb4
 8006c18:	4421      	add	r1, r4
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 faec 	bl	80071f8 <_ZN17wifiMenuContainer9setActionERN8touchgfx15GenericCallbackIivvEE>
     *
     * @param [in] d The Drawable to remove.
     */
    void remove(Drawable& d)
    {
        container.remove(d);
 8006c20:	3404      	adds	r4, #4
 8006c22:	4629      	mov	r1, r5
 8006c24:	4620      	mov	r0, r4
 8006c26:	f00b ffde 	bl	8012be6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
        container.add(d);
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f00b ff8f 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006c32:	bd38      	pop	{r3, r4, r5, pc}

08006c34 <_ZN14mainScreenView19keyboardDonePressedEPt>:
{
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4604      	mov	r4, r0
    wifiKeyboard.clearBuffer();
 8006c38:	f642 4570 	movw	r5, #11376	; 0x2c70
 8006c3c:	4405      	add	r5, r0
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7ff fa22 	bl	8006088 <_ZN14CustomKeyboard11clearBufferEv>
        visible = vis;
 8006c44:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f884 3c95 	strb.w	r3, [r4, #3221]	; 0xc95
    wifiKeyboard.invalidate();
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f011 fef6 	bl	8018a40 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8006c54:	bd38      	pop	{r3, r4, r5, pc}

08006c56 <_ZN14mainScreenView23wifiAccessPointSelectedEi>:
{
 8006c56:	b508      	push	{r3, lr}
    selectedWiFiID = id;
 8006c58:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8006c5c:	f8c3 1ec4 	str.w	r1, [r3, #3780]	; 0xec4
 8006c60:	2300      	movs	r3, #0
 8006c62:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
    wifiMenu.invalidate();
 8006c66:	3098      	adds	r0, #152	; 0x98
 8006c68:	f011 feea 	bl	8018a40 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8006c6c:	bd08      	pop	{r3, pc}
	...

08006c70 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	4605      	mov	r5, r0
 8006c74:	4b46      	ldr	r3, [pc, #280]	; (8006d90 <_ZN14mainScreenViewD1Ev+0x120>)
 8006c76:	6003      	str	r3, [r0, #0]
 8006c78:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8006c7c:	4a45      	ldr	r2, [pc, #276]	; (8006d94 <_ZN14mainScreenViewD1Ev+0x124>)
 8006c7e:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
    }
 8006c82:	4a45      	ldr	r2, [pc, #276]	; (8006d98 <_ZN14mainScreenViewD1Ev+0x128>)
 8006c84:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006c88:	4a44      	ldr	r2, [pc, #272]	; (8006d9c <_ZN14mainScreenViewD1Ev+0x12c>)
 8006c8a:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
    }
 8006c8e:	4a44      	ldr	r2, [pc, #272]	; (8006da0 <_ZN14mainScreenViewD1Ev+0x130>)
 8006c90:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
 8006c94:	f642 4170 	movw	r1, #11376	; 0x2c70
 8006c98:	1843      	adds	r3, r0, r1
 8006c9a:	4a42      	ldr	r2, [pc, #264]	; (8006da4 <_ZN14mainScreenViewD1Ev+0x134>)
 8006c9c:	5042      	str	r2, [r0, r1]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006c9e:	4a42      	ldr	r2, [pc, #264]	; (8006da8 <_ZN14mainScreenViewD1Ev+0x138>)
 8006ca0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }
 8006ca4:	4a41      	ldr	r2, [pc, #260]	; (8006dac <_ZN14mainScreenViewD1Ev+0x13c>)
 8006ca6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006caa:	4841      	ldr	r0, [pc, #260]	; (8006db0 <_ZN14mainScreenViewD1Ev+0x140>)
 8006cac:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
    {
 8006cb0:	4a40      	ldr	r2, [pc, #256]	; (8006db4 <_ZN14mainScreenViewD1Ev+0x144>)
 8006cb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006cb6:	f8c3 01fc 	str.w	r0, [r3, #508]	; 0x1fc
    {
 8006cba:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006cbe:	f8c3 01ec 	str.w	r0, [r3, #492]	; 0x1ec
    {
 8006cc2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006cc6:	f8c3 01dc 	str.w	r0, [r3, #476]	; 0x1dc
    {
 8006cca:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
class TextArea : public Widget
 8006cce:	4f3a      	ldr	r7, [pc, #232]	; (8006db8 <_ZN14mainScreenViewD1Ev+0x148>)
 8006cd0:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 8006cd4:	4e39      	ldr	r6, [pc, #228]	; (8006dbc <_ZN14mainScreenViewD1Ev+0x14c>)
 8006cd6:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
 8006cda:	4839      	ldr	r0, [pc, #228]	; (8006dc0 <_ZN14mainScreenViewD1Ev+0x150>)
 8006cdc:	f8c3 0194 	str.w	r0, [r3, #404]	; 0x194
    {
 8006ce0:	4a38      	ldr	r2, [pc, #224]	; (8006dc4 <_ZN14mainScreenViewD1Ev+0x154>)
 8006ce2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
class Keyboard : public Container
 8006ce6:	4c38      	ldr	r4, [pc, #224]	; (8006dc8 <_ZN14mainScreenViewD1Ev+0x158>)
 8006ce8:	62dc      	str	r4, [r3, #44]	; 0x2c
 8006cea:	4c38      	ldr	r4, [pc, #224]	; (8006dcc <_ZN14mainScreenViewD1Ev+0x15c>)
 8006cec:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8006cf0:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
 8006cf4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8006cf8:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8006df0 <_ZN14mainScreenViewD1Ev+0x180>
 8006cfc:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8006d00:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8006df4 <_ZN14mainScreenViewD1Ev+0x184>
 8006d04:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8006d08:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
 8006d0c:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
 8006d10:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
 8006d14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006d18:	665c      	str	r4, [r3, #100]	; 0x64
 8006d1a:	6658      	str	r0, [r3, #100]	; 0x64
 8006d1c:	665a      	str	r2, [r3, #100]	; 0x64
class Container : public Drawable
 8006d1e:	482c      	ldr	r0, [pc, #176]	; (8006dd0 <_ZN14mainScreenViewD1Ev+0x160>)
 8006d20:	62d8      	str	r0, [r3, #44]	; 0x2c
 8006d22:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d24:	5068      	str	r0, [r5, r1]
 8006d26:	506a      	str	r2, [r5, r1]
 8006d28:	462f      	mov	r7, r5
 8006d2a:	4b2a      	ldr	r3, [pc, #168]	; (8006dd4 <_ZN14mainScreenViewD1Ev+0x164>)
 8006d2c:	f847 3b98 	str.w	r3, [r7], #152
 8006d30:	4b29      	ldr	r3, [pc, #164]	; (8006dd8 <_ZN14mainScreenViewD1Ev+0x168>)
 8006d32:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8006d36:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 8006d3a:	443c      	add	r4, r7
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006d3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8006d40:	4a26      	ldr	r2, [pc, #152]	; (8006ddc <_ZN14mainScreenViewD1Ev+0x16c>)
 8006d42:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 8006d46:	4a26      	ldr	r2, [pc, #152]	; (8006de0 <_ZN14mainScreenViewD1Ev+0x170>)
 8006d48:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 8006d4c:	f515 76f0 	adds.w	r6, r5, #480	; 0x1e0
 8006d50:	d008      	beq.n	8006d64 <_ZN14mainScreenViewD1Ev+0xf4>
 8006d52:	42a6      	cmp	r6, r4
 8006d54:	d006      	beq.n	8006d64 <_ZN14mainScreenViewD1Ev+0xf4>
 8006d56:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4620      	mov	r0, r4
 8006d60:	4798      	blx	r3
 8006d62:	e7f6      	b.n	8006d52 <_ZN14mainScreenViewD1Ev+0xe2>
 8006d64:	4638      	mov	r0, r7
 8006d66:	f7fe faff 	bl	8005368 <_ZN21wifiMenuContainerBaseD1Ev>
 8006d6a:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <_ZN14mainScreenViewD1Ev+0x15c>)
 8006d6c:	66eb      	str	r3, [r5, #108]	; 0x6c
 8006d6e:	4a14      	ldr	r2, [pc, #80]	; (8006dc0 <_ZN14mainScreenViewD1Ev+0x150>)
 8006d70:	66ea      	str	r2, [r5, #108]	; 0x6c
 8006d72:	4b14      	ldr	r3, [pc, #80]	; (8006dc4 <_ZN14mainScreenViewD1Ev+0x154>)
 8006d74:	66eb      	str	r3, [r5, #108]	; 0x6c
 8006d76:	491b      	ldr	r1, [pc, #108]	; (8006de4 <_ZN14mainScreenViewD1Ev+0x174>)
 8006d78:	6429      	str	r1, [r5, #64]	; 0x40
 8006d7a:	642a      	str	r2, [r5, #64]	; 0x40
 8006d7c:	642b      	str	r3, [r5, #64]	; 0x40
class View : public Screen
 8006d7e:	4a1a      	ldr	r2, [pc, #104]	; (8006de8 <_ZN14mainScreenViewD1Ev+0x178>)
 8006d80:	602a      	str	r2, [r5, #0]
    {
 8006d82:	4a1a      	ldr	r2, [pc, #104]	; (8006dec <_ZN14mainScreenViewD1Ev+0x17c>)
 8006d84:	602a      	str	r2, [r5, #0]
 8006d86:	4a12      	ldr	r2, [pc, #72]	; (8006dd0 <_ZN14mainScreenViewD1Ev+0x160>)
 8006d88:	606a      	str	r2, [r5, #4]
 8006d8a:	606b      	str	r3, [r5, #4]
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d90:	08025ed8 	.word	0x08025ed8
 8006d94:	08025ec0 	.word	0x08025ec0
 8006d98:	08025ea8 	.word	0x08025ea8
 8006d9c:	08025e90 	.word	0x08025e90
 8006da0:	08025e78 	.word	0x08025e78
 8006da4:	08025b98 	.word	0x08025b98
 8006da8:	08025b80 	.word	0x08025b80
 8006dac:	08025b50 	.word	0x08025b50
 8006db0:	08025b68 	.word	0x08025b68
 8006db4:	08024ad4 	.word	0x08024ad4
 8006db8:	08026788 	.word	0x08026788
 8006dbc:	08024a78 	.word	0x08024a78
 8006dc0:	0802554c 	.word	0x0802554c
 8006dc4:	08026b18 	.word	0x08026b18
 8006dc8:	080269e4 	.word	0x080269e4
 8006dcc:	08026978 	.word	0x08026978
 8006dd0:	08026414 	.word	0x08026414
 8006dd4:	08025618 	.word	0x08025618
 8006dd8:	08025fa4 	.word	0x08025fa4
 8006ddc:	080255cc 	.word	0x080255cc
 8006de0:	080255b4 	.word	0x080255b4
 8006de4:	08026818 	.word	0x08026818
 8006de8:	080255e4 	.word	0x080255e4
 8006dec:	08026bec 	.word	0x08026bec
 8006df0:	08025790 	.word	0x08025790
 8006df4:	08026880 	.word	0x08026880

08006df8 <_ZN14mainScreenViewD0Ev>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	4b49      	ldr	r3, [pc, #292]	; (8006f24 <_ZN14mainScreenViewD0Ev+0x12c>)
 8006dfe:	6003      	str	r3, [r0, #0]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e00:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8006e04:	4a48      	ldr	r2, [pc, #288]	; (8006f28 <_ZN14mainScreenViewD0Ev+0x130>)
 8006e06:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
    }
 8006e0a:	4a48      	ldr	r2, [pc, #288]	; (8006f2c <_ZN14mainScreenViewD0Ev+0x134>)
 8006e0c:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e10:	4a47      	ldr	r2, [pc, #284]	; (8006f30 <_ZN14mainScreenViewD0Ev+0x138>)
 8006e12:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
    }
 8006e16:	4a47      	ldr	r2, [pc, #284]	; (8006f34 <_ZN14mainScreenViewD0Ev+0x13c>)
 8006e18:	f8c3 2ea4 	str.w	r2, [r3, #3748]	; 0xea4
 8006e1c:	f642 4170 	movw	r1, #11376	; 0x2c70
 8006e20:	1843      	adds	r3, r0, r1
 8006e22:	4a45      	ldr	r2, [pc, #276]	; (8006f38 <_ZN14mainScreenViewD0Ev+0x140>)
 8006e24:	5042      	str	r2, [r0, r1]
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006e26:	4a45      	ldr	r2, [pc, #276]	; (8006f3c <_ZN14mainScreenViewD0Ev+0x144>)
 8006e28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }
 8006e2c:	4a44      	ldr	r2, [pc, #272]	; (8006f40 <_ZN14mainScreenViewD0Ev+0x148>)
 8006e2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006e32:	4844      	ldr	r0, [pc, #272]	; (8006f44 <_ZN14mainScreenViewD0Ev+0x14c>)
 8006e34:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
    {
 8006e38:	4a43      	ldr	r2, [pc, #268]	; (8006f48 <_ZN14mainScreenViewD0Ev+0x150>)
 8006e3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006e3e:	f8c3 01fc 	str.w	r0, [r3, #508]	; 0x1fc
    {
 8006e42:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006e46:	f8c3 01ec 	str.w	r0, [r3, #492]	; 0x1ec
    {
 8006e4a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8006e4e:	f8c3 01dc 	str.w	r0, [r3, #476]	; 0x1dc
    {
 8006e52:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 8006e56:	4f3d      	ldr	r7, [pc, #244]	; (8006f4c <_ZN14mainScreenViewD0Ev+0x154>)
 8006e58:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
 8006e5c:	4e3c      	ldr	r6, [pc, #240]	; (8006f50 <_ZN14mainScreenViewD0Ev+0x158>)
 8006e5e:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
 8006e62:	483c      	ldr	r0, [pc, #240]	; (8006f54 <_ZN14mainScreenViewD0Ev+0x15c>)
 8006e64:	f8c3 0194 	str.w	r0, [r3, #404]	; 0x194
 8006e68:	4a3b      	ldr	r2, [pc, #236]	; (8006f58 <_ZN14mainScreenViewD0Ev+0x160>)
 8006e6a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8006e6e:	4c3b      	ldr	r4, [pc, #236]	; (8006f5c <_ZN14mainScreenViewD0Ev+0x164>)
 8006e70:	62dc      	str	r4, [r3, #44]	; 0x2c
 8006e72:	4c3b      	ldr	r4, [pc, #236]	; (8006f60 <_ZN14mainScreenViewD0Ev+0x168>)
 8006e74:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8006e78:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
 8006e7c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8006e80:	f8df c100 	ldr.w	ip, [pc, #256]	; 8006f84 <_ZN14mainScreenViewD0Ev+0x18c>
 8006e84:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
class TextAreaWithWildcardBase : public TextArea
 8006e88:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8006f88 <_ZN14mainScreenViewD0Ev+0x190>
 8006e8c:	f8c3 c090 	str.w	ip, [r3, #144]	; 0x90
 8006e90:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
 8006e94:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
 8006e98:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
 8006e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006ea0:	665c      	str	r4, [r3, #100]	; 0x64
 8006ea2:	6658      	str	r0, [r3, #100]	; 0x64
 8006ea4:	665a      	str	r2, [r3, #100]	; 0x64
 8006ea6:	482f      	ldr	r0, [pc, #188]	; (8006f64 <_ZN14mainScreenViewD0Ev+0x16c>)
 8006ea8:	62d8      	str	r0, [r3, #44]	; 0x2c
 8006eaa:	62da      	str	r2, [r3, #44]	; 0x2c
 8006eac:	5068      	str	r0, [r5, r1]
 8006eae:	506a      	str	r2, [r5, r1]
 8006eb0:	462f      	mov	r7, r5
 8006eb2:	4b2d      	ldr	r3, [pc, #180]	; (8006f68 <_ZN14mainScreenViewD0Ev+0x170>)
 8006eb4:	f847 3b98 	str.w	r3, [r7], #152
 8006eb8:	4b2c      	ldr	r3, [pc, #176]	; (8006f6c <_ZN14mainScreenViewD0Ev+0x174>)
 8006eba:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8006ebe:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 8006ec2:	443c      	add	r4, r7
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006ec4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8006ec8:	4a29      	ldr	r2, [pc, #164]	; (8006f70 <_ZN14mainScreenViewD0Ev+0x178>)
 8006eca:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 8006ece:	4a29      	ldr	r2, [pc, #164]	; (8006f74 <_ZN14mainScreenViewD0Ev+0x17c>)
 8006ed0:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 8006ed4:	f515 76f0 	adds.w	r6, r5, #480	; 0x1e0
 8006ed8:	d008      	beq.n	8006eec <_ZN14mainScreenViewD0Ev+0xf4>
 8006eda:	42a6      	cmp	r6, r4
 8006edc:	d006      	beq.n	8006eec <_ZN14mainScreenViewD0Ev+0xf4>
 8006ede:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4798      	blx	r3
 8006eea:	e7f6      	b.n	8006eda <_ZN14mainScreenViewD0Ev+0xe2>
 8006eec:	4638      	mov	r0, r7
 8006eee:	f7fe fa3b 	bl	8005368 <_ZN21wifiMenuContainerBaseD1Ev>
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <_ZN14mainScreenViewD0Ev+0x168>)
 8006ef4:	66eb      	str	r3, [r5, #108]	; 0x6c
 8006ef6:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <_ZN14mainScreenViewD0Ev+0x15c>)
 8006ef8:	66ea      	str	r2, [r5, #108]	; 0x6c
 8006efa:	4b17      	ldr	r3, [pc, #92]	; (8006f58 <_ZN14mainScreenViewD0Ev+0x160>)
 8006efc:	66eb      	str	r3, [r5, #108]	; 0x6c
 8006efe:	491e      	ldr	r1, [pc, #120]	; (8006f78 <_ZN14mainScreenViewD0Ev+0x180>)
 8006f00:	6429      	str	r1, [r5, #64]	; 0x40
 8006f02:	642a      	str	r2, [r5, #64]	; 0x40
 8006f04:	642b      	str	r3, [r5, #64]	; 0x40
 8006f06:	4a1d      	ldr	r2, [pc, #116]	; (8006f7c <_ZN14mainScreenViewD0Ev+0x184>)
 8006f08:	602a      	str	r2, [r5, #0]
 8006f0a:	4a1d      	ldr	r2, [pc, #116]	; (8006f80 <_ZN14mainScreenViewD0Ev+0x188>)
 8006f0c:	602a      	str	r2, [r5, #0]
 8006f0e:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <_ZN14mainScreenViewD0Ev+0x16c>)
 8006f10:	606a      	str	r2, [r5, #4]
 8006f12:	606b      	str	r3, [r5, #4]
 8006f14:	f642 61c8 	movw	r1, #11976	; 0x2ec8
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f01b ff2c 	bl	8022d76 <_ZdlPvj>
 8006f1e:	4628      	mov	r0, r5
 8006f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f22:	bf00      	nop
 8006f24:	08025ed8 	.word	0x08025ed8
 8006f28:	08025ec0 	.word	0x08025ec0
 8006f2c:	08025ea8 	.word	0x08025ea8
 8006f30:	08025e90 	.word	0x08025e90
 8006f34:	08025e78 	.word	0x08025e78
 8006f38:	08025b98 	.word	0x08025b98
 8006f3c:	08025b80 	.word	0x08025b80
 8006f40:	08025b50 	.word	0x08025b50
 8006f44:	08025b68 	.word	0x08025b68
 8006f48:	08024ad4 	.word	0x08024ad4
 8006f4c:	08026788 	.word	0x08026788
 8006f50:	08024a78 	.word	0x08024a78
 8006f54:	0802554c 	.word	0x0802554c
 8006f58:	08026b18 	.word	0x08026b18
 8006f5c:	080269e4 	.word	0x080269e4
 8006f60:	08026978 	.word	0x08026978
 8006f64:	08026414 	.word	0x08026414
 8006f68:	08025618 	.word	0x08025618
 8006f6c:	08025fa4 	.word	0x08025fa4
 8006f70:	080255cc 	.word	0x080255cc
 8006f74:	080255b4 	.word	0x080255b4
 8006f78:	08026818 	.word	0x08026818
 8006f7c:	080255e4 	.word	0x080255e4
 8006f80:	08026bec 	.word	0x08026bec
 8006f84:	08025790 	.word	0x08025790
 8006f88:	08026880 	.word	0x08026880

08006f8c <_ZN14mainScreenViewC1Ev>:
mainScreenView::mainScreenView() :
 8006f8c:	b530      	push	{r4, r5, lr}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	4604      	mov	r4, r0
    wifiAccessPointSelectedCallback(this, &mainScreenView::wifiAccessPointSelected)
 8006f92:	f7fd fc03 	bl	800479c <_ZN18mainScreenViewBaseC1Ev>
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <_ZN14mainScreenViewC1Ev+0x80>)
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	f642 4070 	movw	r0, #11376	; 0x2c70
 8006f9e:	4420      	add	r0, r4
 8006fa0:	f7fe ff20 	bl	8005de4 <_ZN14CustomKeyboardC1Ev>
 8006fa4:	4b1a      	ldr	r3, [pc, #104]	; (8007010 <_ZN14mainScreenViewC1Ev+0x84>)
 8006fa6:	9302      	str	r3, [sp, #8]
 8006fa8:	2500      	movs	r5, #0
 8006faa:	9503      	str	r5, [sp, #12]
 8006fac:	466a      	mov	r2, sp
 8006fae:	ab02      	add	r3, sp, #8
 8006fb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006fb4:	e882 0003 	stmia.w	r2, {r0, r1}
class GenericCallback<T1, void, void>
 8006fb8:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8006fbc:	4915      	ldr	r1, [pc, #84]	; (8007014 <_ZN14mainScreenViewC1Ev+0x88>)
 8006fbe:	f8c3 1ea4 	str.w	r1, [r3, #3748]	; 0xea4
        : pobject(pObject), pmemfun(pmemfun_1)
 8006fc2:	4915      	ldr	r1, [pc, #84]	; (8007018 <_ZN14mainScreenViewC1Ev+0x8c>)
 8006fc4:	f8c3 1ea4 	str.w	r1, [r3, #3748]	; 0xea4
 8006fc8:	f8c3 4ea8 	str.w	r4, [r3, #3752]	; 0xea8
 8006fcc:	f603 6cac 	addw	ip, r3, #3756	; 0xeac
 8006fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fd4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006fd8:	4910      	ldr	r1, [pc, #64]	; (800701c <_ZN14mainScreenViewC1Ev+0x90>)
 8006fda:	9104      	str	r1, [sp, #16]
 8006fdc:	9505      	str	r5, [sp, #20]
 8006fde:	a906      	add	r1, sp, #24
 8006fe0:	e911 0003 	ldmdb	r1, {r0, r1}
 8006fe4:	e882 0003 	stmia.w	r2, {r0, r1}
class GenericCallback<T1, void, void>
 8006fe8:	490d      	ldr	r1, [pc, #52]	; (8007020 <_ZN14mainScreenViewC1Ev+0x94>)
 8006fea:	f8c3 1eb4 	str.w	r1, [r3, #3764]	; 0xeb4
        : pobject(pObject), pmemfun(pmemfun_1)
 8006fee:	490d      	ldr	r1, [pc, #52]	; (8007024 <_ZN14mainScreenViewC1Ev+0x98>)
 8006ff0:	f8c3 1eb4 	str.w	r1, [r3, #3764]	; 0xeb4
 8006ff4:	f8c3 4eb8 	str.w	r4, [r3, #3768]	; 0xeb8
 8006ff8:	f603 63bc 	addw	r3, r3, #3772	; 0xebc
 8006ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007000:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8007004:	4620      	mov	r0, r4
 8007006:	b007      	add	sp, #28
 8007008:	bd30      	pop	{r4, r5, pc}
 800700a:	bf00      	nop
 800700c:	08025ed8 	.word	0x08025ed8
 8007010:	08006c35 	.word	0x08006c35
 8007014:	08025e78 	.word	0x08025e78
 8007018:	08025e90 	.word	0x08025e90
 800701c:	08006c57 	.word	0x08006c57
 8007020:	08025ea8 	.word	0x08025ea8
 8007024:	08025ec0 	.word	0x08025ec0

08007028 <_GLOBAL__sub_I__ZN14mainScreenViewC2Ev>:
}
 8007028:	b508      	push	{r3, lr}
 800702a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800702e:	2001      	movs	r0, #1
 8007030:	f7ff fb52 	bl	80066d8 <_Z41__static_initialization_and_destruction_0ii>
 8007034:	bd08      	pop	{r3, pc}

08007036 <_GLOBAL__sub_D__ZN14mainScreenViewC2Ev>:
 8007036:	b508      	push	{r3, lr}
 8007038:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800703c:	2000      	movs	r0, #0
 800703e:	f7ff fb4b 	bl	80066d8 <_Z41__static_initialization_and_destruction_0ii>
 8007042:	bd08      	pop	{r3, pc}

08007044 <_ZN22wifiInfoLargeContainer15elementSelectedEv>:
    }
    signalStrengthIcon.invalidate();
}

void wifiInfoLargeContainer::elementSelected()
{
 8007044:	b510      	push	{r4, lr}
 8007046:	4604      	mov	r4, r0
    // Inform the view of the event
    if (viewCallback->isValid())
 8007048:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
 800704c:	6803      	ldr	r3, [r0, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	4798      	blx	r3
 8007052:	b128      	cbz	r0, 8007060 <_ZN22wifiInfoLargeContainer15elementSelectedEv+0x1c>
    {
        viewCallback->execute(*this);
 8007054:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8007058:	6803      	ldr	r3, [r0, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	4621      	mov	r1, r4
 800705e:	4798      	blx	r3
    }
}
 8007060:	bd10      	pop	{r4, pc}
	...

08007064 <_ZN22wifiInfoLargeContainerD1Ev>:

class wifiInfoLargeContainer : public wifiInfoLargeContainerBase
{
public:
    wifiInfoLargeContainer();
    virtual ~wifiInfoLargeContainer() {}
 8007064:	b510      	push	{r4, lr}
 8007066:	4604      	mov	r4, r0
 8007068:	4b02      	ldr	r3, [pc, #8]	; (8007074 <_ZN22wifiInfoLargeContainerD1Ev+0x10>)
 800706a:	6003      	str	r3, [r0, #0]
 800706c:	f7fd fcdc 	bl	8004a28 <_ZN26wifiInfoLargeContainerBaseD1Ev>
 8007070:	4620      	mov	r0, r4
 8007072:	bd10      	pop	{r4, pc}
 8007074:	08025f0c 	.word	0x08025f0c

08007078 <_ZN22wifiInfoLargeContainerD0Ev>:
 8007078:	b510      	push	{r4, lr}
 800707a:	4604      	mov	r4, r0
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <_ZN22wifiInfoLargeContainerD0Ev+0x1c>)
 800707e:	6003      	str	r3, [r0, #0]
 8007080:	f7fd fcd2 	bl	8004a28 <_ZN26wifiInfoLargeContainerBaseD1Ev>
 8007084:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007088:	4620      	mov	r0, r4
 800708a:	f01b fe74 	bl	8022d76 <_ZdlPvj>
 800708e:	4620      	mov	r0, r4
 8007090:	bd10      	pop	{r4, pc}
 8007092:	bf00      	nop
 8007094:	08025f0c 	.word	0x08025f0c

08007098 <_ZN22wifiInfoLargeContainerC1Ev>:
wifiInfoLargeContainer::wifiInfoLargeContainer()
 8007098:	b510      	push	{r4, lr}
 800709a:	4604      	mov	r4, r0
 800709c:	f7fd fe8c 	bl	8004db8 <_ZN26wifiInfoLargeContainerBaseC1Ev>
 80070a0:	4b01      	ldr	r3, [pc, #4]	; (80070a8 <_ZN22wifiInfoLargeContainerC1Ev+0x10>)
 80070a2:	6023      	str	r3, [r4, #0]
}
 80070a4:	4620      	mov	r0, r4
 80070a6:	bd10      	pop	{r4, pc}
 80070a8:	08025f0c 	.word	0x08025f0c

080070ac <_ZN22wifiInfoLargeContainer5getIdEv>:
}

int wifiInfoLargeContainer::getId()
{
    return id;
}
 80070ac:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80070b0:	4770      	bx	lr

080070b2 <_ZN22wifiInfoLargeContainer10initializeEv>:
{
 80070b2:	b508      	push	{r3, lr}
    wifiInfoLargeContainerBase::initialize();
 80070b4:	f7fd fd1a 	bl	8004aec <_ZN26wifiInfoLargeContainerBase10initializeEv>
}
 80070b8:	bd08      	pop	{r3, pc}

080070ba <_ZN17wifiMenuContainer22wifiListElementClickedER22wifiInfoLargeContainer>:

    wifiListContainer.invalidate();
}

void wifiMenuContainer::wifiListElementClicked(wifiInfoLargeContainer& element)
{
 80070ba:	b570      	push	{r4, r5, r6, lr}
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
    if (viewCallback->isValid())
 80070c0:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 80070c4:	6803      	ldr	r3, [r0, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	4798      	blx	r3
 80070ca:	b900      	cbnz	r0, 80070ce <_ZN17wifiMenuContainer22wifiListElementClickedER22wifiInfoLargeContainer+0x14>
    {
        viewCallback->execute(element.getId());
    }
}
 80070cc:	bd70      	pop	{r4, r5, r6, pc}
        viewCallback->execute(element.getId());
 80070ce:	f8d4 4144 	ldr.w	r4, [r4, #324]	; 0x144
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	689e      	ldr	r6, [r3, #8]
 80070d6:	4628      	mov	r0, r5
 80070d8:	f7ff ffe8 	bl	80070ac <_ZN22wifiInfoLargeContainer5getIdEv>
 80070dc:	4601      	mov	r1, r0
 80070de:	4620      	mov	r0, r4
 80070e0:	47b0      	blx	r6
}
 80070e2:	e7f3      	b.n	80070cc <_ZN17wifiMenuContainer22wifiListElementClickedER22wifiInfoLargeContainer+0x12>

080070e4 <_ZN17wifiMenuContainerD1Ev>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4606      	mov	r6, r0
 80070e8:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <_ZN17wifiMenuContainerD1Ev+0x40>)
 80070ea:	6003      	str	r3, [r0, #0]
 80070ec:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 80070f0:	4404      	add	r4, r0
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80070f2:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 80070f6:	4a0c      	ldr	r2, [pc, #48]	; (8007128 <_ZN17wifiMenuContainerD1Ev+0x44>)
 80070f8:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 80070fc:	4a0b      	ldr	r2, [pc, #44]	; (800712c <_ZN17wifiMenuContainerD1Ev+0x48>)
 80070fe:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 8007102:	f510 75a4 	adds.w	r5, r0, #328	; 0x148
 8007106:	d008      	beq.n	800711a <_ZN17wifiMenuContainerD1Ev+0x36>
 8007108:	42a5      	cmp	r5, r4
 800710a:	d006      	beq.n	800711a <_ZN17wifiMenuContainerD1Ev+0x36>
 800710c:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4620      	mov	r0, r4
 8007116:	4798      	blx	r3
 8007118:	e7f6      	b.n	8007108 <_ZN17wifiMenuContainerD1Ev+0x24>
 800711a:	4630      	mov	r0, r6
 800711c:	f7fe f924 	bl	8005368 <_ZN21wifiMenuContainerBaseD1Ev>
 8007120:	4630      	mov	r0, r6
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	08025fa4 	.word	0x08025fa4
 8007128:	080255cc 	.word	0x080255cc
 800712c:	080255b4 	.word	0x080255b4

08007130 <_ZN17wifiMenuContainerD0Ev>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4606      	mov	r6, r0
 8007134:	4b11      	ldr	r3, [pc, #68]	; (800717c <_ZN17wifiMenuContainerD0Ev+0x4c>)
 8007136:	6003      	str	r3, [r0, #0]
 8007138:	f642 34c8 	movw	r4, #11208	; 0x2bc8
 800713c:	4404      	add	r4, r0
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800713e:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 8007142:	4a0f      	ldr	r2, [pc, #60]	; (8007180 <_ZN17wifiMenuContainerD0Ev+0x50>)
 8007144:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
    }
 8007148:	4a0e      	ldr	r2, [pc, #56]	; (8007184 <_ZN17wifiMenuContainerD0Ev+0x54>)
 800714a:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
 800714e:	f510 75a4 	adds.w	r5, r0, #328	; 0x148
 8007152:	d008      	beq.n	8007166 <_ZN17wifiMenuContainerD0Ev+0x36>
 8007154:	42a5      	cmp	r5, r4
 8007156:	d006      	beq.n	8007166 <_ZN17wifiMenuContainerD0Ev+0x36>
 8007158:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4620      	mov	r0, r4
 8007162:	4798      	blx	r3
 8007164:	e7f6      	b.n	8007154 <_ZN17wifiMenuContainerD0Ev+0x24>
 8007166:	4630      	mov	r0, r6
 8007168:	f7fe f8fe 	bl	8005368 <_ZN21wifiMenuContainerBaseD1Ev>
 800716c:	f642 31d8 	movw	r1, #11224	; 0x2bd8
 8007170:	4630      	mov	r0, r6
 8007172:	f01b fe00 	bl	8022d76 <_ZdlPvj>
 8007176:	4630      	mov	r0, r6
 8007178:	bd70      	pop	{r4, r5, r6, pc}
 800717a:	bf00      	nop
 800717c:	08025fa4 	.word	0x08025fa4
 8007180:	080255cc 	.word	0x080255cc
 8007184:	080255b4 	.word	0x080255b4

08007188 <_ZN17wifiMenuContainerC1Ev>:
wifiMenuContainer::wifiMenuContainer() :
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	4606      	mov	r6, r0
    wifiListElementClickedCallback(this, &wifiMenuContainer::wifiListElementClicked)
 800718e:	f7fe f92d 	bl	80053ec <_ZN21wifiMenuContainerBaseC1Ev>
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <_ZN17wifiMenuContainerC1Ev+0x60>)
 8007194:	6033      	str	r3, [r6, #0]
 8007196:	f506 75a4 	add.w	r5, r6, #328	; 0x148
 800719a:	2413      	movs	r4, #19
 800719c:	e005      	b.n	80071aa <_ZN17wifiMenuContainerC1Ev+0x22>
 800719e:	4628      	mov	r0, r5
 80071a0:	f7ff ff7a 	bl	8007098 <_ZN22wifiInfoLargeContainerC1Ev>
 80071a4:	f505 7508 	add.w	r5, r5, #544	; 0x220
 80071a8:	3c01      	subs	r4, #1
 80071aa:	2c00      	cmp	r4, #0
 80071ac:	daf7      	bge.n	800719e <_ZN17wifiMenuContainerC1Ev+0x16>
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <_ZN17wifiMenuContainerC1Ev+0x64>)
 80071b0:	9302      	str	r3, [sp, #8]
 80071b2:	2300      	movs	r3, #0
 80071b4:	9303      	str	r3, [sp, #12]
 80071b6:	466a      	mov	r2, sp
 80071b8:	ab04      	add	r3, sp, #16
 80071ba:	e913 0003 	ldmdb	r3, {r0, r1}
 80071be:	e882 0003 	stmia.w	r2, {r0, r1}
class GenericCallback<T1, void, void>
 80071c2:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
 80071c6:	490a      	ldr	r1, [pc, #40]	; (80071f0 <_ZN17wifiMenuContainerC1Ev+0x68>)
 80071c8:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
        : pobject(pObject), pmemfun(pmemfun_1)
 80071cc:	4909      	ldr	r1, [pc, #36]	; (80071f4 <_ZN17wifiMenuContainerC1Ev+0x6c>)
 80071ce:	f8c3 1bc8 	str.w	r1, [r3, #3016]	; 0xbc8
 80071d2:	f8c3 6bcc 	str.w	r6, [r3, #3020]	; 0xbcc
 80071d6:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 80071da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071de:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80071e2:	4630      	mov	r0, r6
 80071e4:	b004      	add	sp, #16
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	08025fa4 	.word	0x08025fa4
 80071ec:	080070bb 	.word	0x080070bb
 80071f0:	080255b4 	.word	0x080255b4
 80071f4:	080255cc 	.word	0x080255cc

080071f8 <_ZN17wifiMenuContainer9setActionERN8touchgfx15GenericCallbackIivvEE>:

void wifiMenuContainer::setAction(GenericCallback< int >& callback)
{
    viewCallback = &callback;
 80071f8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
}
 80071fc:	4770      	bx	lr

080071fe <_ZN17wifiMenuContainer10initializeEv>:
{
 80071fe:	b510      	push	{r4, lr}
 8007200:	4604      	mov	r4, r0
    wifiMenuContainerBase::initialize();
 8007202:	f7fe f8e7 	bl	80053d4 <_ZN21wifiMenuContainerBase10initializeEv>
        return rect.width;
 8007206:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
        rect.width = width;
 800720a:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
    wifiListContainer.setScrollbarPadding(4);
 800720e:	3458      	adds	r4, #88	; 0x58
 8007210:	2104      	movs	r1, #4
 8007212:	4620      	mov	r0, r4
 8007214:	f00c ff69 	bl	80140ea <_ZN8touchgfx19ScrollableContainer19setScrollbarPaddingEh>
    wifiListContainer.setScrollbarsAlpha(100);
 8007218:	2164      	movs	r1, #100	; 0x64
 800721a:	4620      	mov	r0, r4
 800721c:	f00c ff5e 	bl	80140dc <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>
    wifiListContainer.setScrollbarWidth(5);
 8007220:	2105      	movs	r1, #5
 8007222:	4620      	mov	r0, r4
 8007224:	f00c ff64 	bl	80140f0 <_ZN8touchgfx19ScrollableContainer17setScrollbarWidthEh>
}
 8007228:	bd10      	pop	{r4, pc}

0800722a <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 800722a:	4603      	mov	r3, r0
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800722c:	3830      	subs	r0, #48	; 0x30
 800722e:	b2c0      	uxtb	r0, r0
 8007230:	2809      	cmp	r0, #9
 8007232:	d90a      	bls.n	800724a <Hex2Num+0x20>
        return a - '0';
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8007234:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	2a05      	cmp	r2, #5
 800723c:	d906      	bls.n	800724c <Hex2Num+0x22>
        return (a - 'a') + 10;
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800723e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007242:	b2d2      	uxtb	r2, r2
 8007244:	2a05      	cmp	r2, #5
 8007246:	d904      	bls.n	8007252 <Hex2Num+0x28>
        return (a - 'A') + 10;
    }

    return 0;
 8007248:	2000      	movs	r0, #0
}
 800724a:	4770      	bx	lr
        return (a - 'a') + 10;
 800724c:	3b57      	subs	r3, #87	; 0x57
 800724e:	b2d8      	uxtb	r0, r3
 8007250:	4770      	bx	lr
        return (a - 'A') + 10;
 8007252:	3b37      	subs	r3, #55	; 0x37
 8007254:	b2d8      	uxtb	r0, r3
 8007256:	4770      	bx	lr

08007258 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	4605      	mov	r5, r0
 800725c:	460e      	mov	r6, r1
    uint32_t sum = 0;
    uint8_t i = 0;
 800725e:	2400      	movs	r4, #0
    uint32_t sum = 0;
 8007260:	4627      	mov	r7, r4

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8007262:	e006      	b.n	8007272 <ParseHexNumber+0x1a>
        sum <<= 4;
 8007264:	013f      	lsls	r7, r7, #4
        sum += Hex2Num(*ptr);
 8007266:	f7ff ffe0 	bl	800722a <Hex2Num>
 800726a:	4407      	add	r7, r0
        ptr++;
 800726c:	3501      	adds	r5, #1
        i++;
 800726e:	3401      	adds	r4, #1
 8007270:	b2e4      	uxtb	r4, r4
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8007272:	7828      	ldrb	r0, [r5, #0]
 8007274:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b05      	cmp	r3, #5
 8007282:	bf88      	it	hi
 8007284:	2a09      	cmphi	r2, #9
 8007286:	d9ed      	bls.n	8007264 <ParseHexNumber+0xc>
 8007288:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b05      	cmp	r3, #5
 8007290:	d9e8      	bls.n	8007264 <ParseHexNumber+0xc>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8007292:	b106      	cbz	r6, 8007296 <ParseHexNumber+0x3e>
        *cnt = i;
 8007294:	7034      	strb	r4, [r6, #0]
    }
    return sum;                                        		/* Return number */
}
 8007296:	4638      	mov	r0, r7
 8007298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800729a <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800729a:	b510      	push	{r4, lr}
 800729c:	4686      	mov	lr, r0
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 800729e:	7803      	ldrb	r3, [r0, #0]
 80072a0:	2b2d      	cmp	r3, #45	; 0x2d
 80072a2:	d003      	beq.n	80072ac <ParseNumber+0x12>
    uint8_t minus = 0, i = 0;
 80072a4:	2400      	movs	r4, #0
 80072a6:	46a4      	mov	ip, r4
 80072a8:	2000      	movs	r0, #0
 80072aa:	e00e      	b.n	80072ca <ParseNumber+0x30>
        minus = 1;
        ptr++;
 80072ac:	f100 0e01 	add.w	lr, r0, #1
        minus = 1;
 80072b0:	2401      	movs	r4, #1
 80072b2:	e7f8      	b.n	80072a6 <ParseNumber+0xc>
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 80072b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80072b8:	3b30      	subs	r3, #48	; 0x30
 80072ba:	eb03 0040 	add.w	r0, r3, r0, lsl #1
        ptr++;
 80072be:	f10e 0e01 	add.w	lr, lr, #1
        i++;
 80072c2:	f10c 0c01 	add.w	ip, ip, #1
 80072c6:	fa5f fc8c 	uxtb.w	ip, ip
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80072ca:	f89e 3000 	ldrb.w	r3, [lr]
 80072ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	2a09      	cmp	r2, #9
 80072d6:	d9ed      	bls.n	80072b4 <ParseNumber+0x1a>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80072d8:	b109      	cbz	r1, 80072de <ParseNumber+0x44>
        *cnt = i;
 80072da:	f881 c000 	strb.w	ip, [r1]
    }
    if (minus) {                                    		/* Minus detected */
 80072de:	b904      	cbnz	r4, 80072e2 <ParseNumber+0x48>
        return 0 - sum;
    }
    return sum;                                       		/* Return number */
}
 80072e0:	bd10      	pop	{r4, pc}
        return 0 - sum;
 80072e2:	4240      	negs	r0, r0
 80072e4:	e7fc      	b.n	80072e0 <ParseNumber+0x46>

080072e6 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80072e6:	b570      	push	{r4, r5, r6, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	4604      	mov	r4, r0
 80072ec:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 80072ee:	2500      	movs	r5, #0

  while(* ptr) {
 80072f0:	e002      	b.n	80072f8 <ParseMAC+0x12>
    hexcnt = 1;
    if(*ptr != ':')
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 80072f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80072f6:	441c      	add	r4, r3
  while(* ptr) {
 80072f8:	7823      	ldrb	r3, [r4, #0]
 80072fa:	b173      	cbz	r3, 800731a <ParseMAC+0x34>
    hexcnt = 1;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != ':')
 8007302:	7823      	ldrb	r3, [r4, #0]
 8007304:	2b3a      	cmp	r3, #58	; 0x3a
 8007306:	d0f4      	beq.n	80072f2 <ParseMAC+0xc>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8007308:	f10d 0107 	add.w	r1, sp, #7
 800730c:	4620      	mov	r0, r4
 800730e:	f7ff ffa3 	bl	8007258 <ParseHexNumber>
 8007312:	1c6b      	adds	r3, r5, #1
 8007314:	5570      	strb	r0, [r6, r5]
 8007316:	b2dd      	uxtb	r5, r3
 8007318:	e7eb      	b.n	80072f2 <ParseMAC+0xc>
  }
}
 800731a:	b002      	add	sp, #8
 800731c:	bd70      	pop	{r4, r5, r6, pc}

0800731e <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800731e:	b570      	push	{r4, r5, r6, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	4604      	mov	r4, r0
 8007324:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8007326:	2500      	movs	r5, #0

  while(* ptr) {
 8007328:	e002      	b.n	8007330 <ParseIP+0x12>
    hexcnt = 1;
    if(*ptr != '.')
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
 800732a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800732e:	441c      	add	r4, r3
  while(* ptr) {
 8007330:	7823      	ldrb	r3, [r4, #0]
 8007332:	b173      	cbz	r3, 8007352 <ParseIP+0x34>
    hexcnt = 1;
 8007334:	2301      	movs	r3, #1
 8007336:	f88d 3007 	strb.w	r3, [sp, #7]
    if(*ptr != '.')
 800733a:	7823      	ldrb	r3, [r4, #0]
 800733c:	2b2e      	cmp	r3, #46	; 0x2e
 800733e:	d0f4      	beq.n	800732a <ParseIP+0xc>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007340:	f10d 0107 	add.w	r1, sp, #7
 8007344:	4620      	mov	r0, r4
 8007346:	f7ff ffa8 	bl	800729a <ParseNumber>
 800734a:	1c6b      	adds	r3, r5, #1
 800734c:	5570      	strb	r0, [r6, r5]
 800734e:	b2dd      	uxtb	r5, r3
 8007350:	e7eb      	b.n	800732a <ParseIP+0xc>
  }
}
 8007352:	b002      	add	sp, #8
 8007354:	bd70      	pop	{r4, r5, r6, pc}

08007356 <ArrayTo32bit>:
  }
}

static uint32_t ArrayTo32bit(uint8_t * buf)
{
	return ((buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | (buf[3] << 0));
 8007356:	7802      	ldrb	r2, [r0, #0]
 8007358:	7843      	ldrb	r3, [r0, #1]
 800735a:	041b      	lsls	r3, r3, #16
 800735c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007360:	7882      	ldrb	r2, [r0, #2]
 8007362:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007366:	78c0      	ldrb	r0, [r0, #3]
}
 8007368:	4318      	orrs	r0, r3
 800736a:	4770      	bx	lr

0800736c <AT_ParseIsConnected>:
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800736c:	7883      	ldrb	r3, [r0, #2]
 800736e:	2b31      	cmp	r3, #49	; 0x31
 8007370:	bf14      	ite	ne
 8007372:	2300      	movne	r3, #0
 8007374:	2301      	moveq	r3, #1
 8007376:	700b      	strb	r3, [r1, #0]
}
 8007378:	4770      	bx	lr
	...

0800737c <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
 8007382:	4616      	mov	r6, r2
  int ret = 0;
  int16_t recv_len = 0;

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8007384:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8007388:	4608      	mov	r0, r1
 800738a:	f7f8 ffbb 	bl	8000304 <strlen>
 800738e:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007392:	b281      	uxth	r1, r0
 8007394:	4628      	mov	r0, r5
 8007396:	47b8      	blx	r7

  if( ret > 0)
 8007398:	2800      	cmp	r0, #0
 800739a:	dd25      	ble.n	80073e8 <AT_ExecuteCommand+0x6c>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800739c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80073a0:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80073a4:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80073a8:	4630      	mov	r0, r6
 80073aa:	4798      	blx	r3
 80073ac:	4604      	mov	r4, r0
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 80073ae:	1e43      	subs	r3, r0, #1
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80073b6:	d212      	bcs.n	80073de <AT_ExecuteCommand+0x62>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 80073b8:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
 80073bc:	d008      	beq.n	80073d0 <AT_ExecuteCommand+0x54>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
      }
      *(pdata + recv_len) = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	5533      	strb	r3, [r6, r4]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 80073c2:	490c      	ldr	r1, [pc, #48]	; (80073f4 <AT_ExecuteCommand+0x78>)
 80073c4:	4630      	mov	r0, r6
 80073c6:	f01c fbb9 	bl	8023b3c <strstr>
 80073ca:	b118      	cbz	r0, 80073d4 <AT_ExecuteCommand+0x58>
      {
        return ES_WIFI_STATUS_OK;
 80073cc:	2000      	movs	r0, #0
 80073ce:	e00a      	b.n	80073e6 <AT_ExecuteCommand+0x6a>
        recv_len--;
 80073d0:	b21c      	sxth	r4, r3
 80073d2:	e7f4      	b.n	80073be <AT_ExecuteCommand+0x42>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80073d4:	4908      	ldr	r1, [pc, #32]	; (80073f8 <AT_ExecuteCommand+0x7c>)
 80073d6:	4630      	mov	r0, r6
 80073d8:	f01c fbb0 	bl	8023b3c <strstr>
 80073dc:	b930      	cbnz	r0, 80073ec <AT_ExecuteCommand+0x70>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80073de:	f114 0f04 	cmn.w	r4, #4
 80073e2:	d005      	beq.n	80073f0 <AT_ExecuteCommand+0x74>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80073e4:	2004      	movs	r0, #4
}
 80073e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return ES_WIFI_STATUS_IO_ERROR;
 80073e8:	2004      	movs	r0, #4
 80073ea:	e7fc      	b.n	80073e6 <AT_ExecuteCommand+0x6a>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80073ec:	2005      	movs	r0, #5
 80073ee:	e7fa      	b.n	80073e6 <AT_ExecuteCommand+0x6a>
      return ES_WIFI_STATUS_MODULE_CRASH;
 80073f0:	2006      	movs	r0, #6
 80073f2:	e7f8      	b.n	80073e6 <AT_ExecuteCommand+0x6a>
 80073f4:	08026030 	.word	0x08026030
 80073f8:	0802603c 	.word	0x0802603c

080073fc <ParseSecurity>:
{
 80073fc:	b510      	push	{r4, lr}
 80073fe:	4604      	mov	r4, r0
  if(strstr(ptr,"Open")) return ES_WIFI_SEC_OPEN;
 8007400:	4915      	ldr	r1, [pc, #84]	; (8007458 <ParseSecurity+0x5c>)
 8007402:	f01c fb9b 	bl	8023b3c <strstr>
 8007406:	b108      	cbz	r0, 800740c <ParseSecurity+0x10>
 8007408:	2000      	movs	r0, #0
}
 800740a:	bd10      	pop	{r4, pc}
  else if(strstr(ptr,"WEP")) return ES_WIFI_SEC_WEP;
 800740c:	4913      	ldr	r1, [pc, #76]	; (800745c <ParseSecurity+0x60>)
 800740e:	4620      	mov	r0, r4
 8007410:	f01c fb94 	bl	8023b3c <strstr>
 8007414:	b108      	cbz	r0, 800741a <ParseSecurity+0x1e>
 8007416:	2001      	movs	r0, #1
 8007418:	e7f7      	b.n	800740a <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 800741a:	4911      	ldr	r1, [pc, #68]	; (8007460 <ParseSecurity+0x64>)
 800741c:	4620      	mov	r0, r4
 800741e:	f01c fb8d 	bl	8023b3c <strstr>
 8007422:	b980      	cbnz	r0, 8007446 <ParseSecurity+0x4a>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 8007424:	490f      	ldr	r1, [pc, #60]	; (8007464 <ParseSecurity+0x68>)
 8007426:	4620      	mov	r0, r4
 8007428:	f01c fb88 	bl	8023b3c <strstr>
 800742c:	b968      	cbnz	r0, 800744a <ParseSecurity+0x4e>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 800742e:	490e      	ldr	r1, [pc, #56]	; (8007468 <ParseSecurity+0x6c>)
 8007430:	4620      	mov	r0, r4
 8007432:	f01c fb83 	bl	8023b3c <strstr>
 8007436:	b950      	cbnz	r0, 800744e <ParseSecurity+0x52>
  else if(strstr(ptr,"WPA")) return ES_WIFI_SEC_WPA;
 8007438:	490c      	ldr	r1, [pc, #48]	; (800746c <ParseSecurity+0x70>)
 800743a:	4620      	mov	r0, r4
 800743c:	f01c fb7e 	bl	8023b3c <strstr>
 8007440:	b138      	cbz	r0, 8007452 <ParseSecurity+0x56>
 8007442:	2002      	movs	r0, #2
 8007444:	e7e1      	b.n	800740a <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA WPA2")) return ES_WIFI_SEC_WPA_WPA2;
 8007446:	2004      	movs	r0, #4
 8007448:	e7df      	b.n	800740a <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2 TKIP")) return ES_WIFI_SEC_WPA2_TKIP;
 800744a:	2005      	movs	r0, #5
 800744c:	e7dd      	b.n	800740a <ParseSecurity+0xe>
  else if(strstr(ptr,"WPA2")) return ES_WIFI_SEC_WPA2;
 800744e:	2003      	movs	r0, #3
 8007450:	e7db      	b.n	800740a <ParseSecurity+0xe>
  else return ES_WIFI_SEC_UNKNOWN;
 8007452:	20ff      	movs	r0, #255	; 0xff
 8007454:	e7d9      	b.n	800740a <ParseSecurity+0xe>
 8007456:	bf00      	nop
 8007458:	08026044 	.word	0x08026044
 800745c:	0802604c 	.word	0x0802604c
 8007460:	08026050 	.word	0x08026050
 8007464:	0802605c 	.word	0x0802605c
 8007468:	08026054 	.word	0x08026054
 800746c:	08026068 	.word	0x08026068

08007470 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8007470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007474:	4604      	mov	r4, r0
 8007476:	460d      	mov	r5, r1
 8007478:	4617      	mov	r7, r2
 800747a:	461e      	mov	r6, r3
  int16_t send_len = 0;
  int16_t recv_len = 0;
  uint16_t cmd_len = 0;
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 800747c:	4608      	mov	r0, r1
 800747e:	f7f8 ff41 	bl	8000304 <strlen>

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8007482:	f010 0f01 	tst.w	r0, #1
 8007486:	d138      	bne.n	80074fa <AT_RequestSendData+0x8a>
 8007488:	fa1f f880 	uxth.w	r8, r0
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800748c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007490:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007494:	4641      	mov	r1, r8
 8007496:	4628      	mov	r0, r5
 8007498:	4798      	blx	r3
 800749a:	b280      	uxth	r0, r0
  if (n == cmd_len)
 800749c:	4580      	cmp	r8, r0
 800749e:	d002      	beq.n	80074a6 <AT_RequestSendData+0x36>
    else
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80074a0:	2004      	movs	r0, #4
}
 80074a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80074a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80074aa:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80074ae:	4631      	mov	r1, r6
 80074b0:	4638      	mov	r0, r7
 80074b2:	4798      	blx	r3
    if (send_len == len)
 80074b4:	42b0      	cmp	r0, r6
 80074b6:	d122      	bne.n	80074fe <AT_RequestSendData+0x8e>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80074b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80074bc:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 80074c0:	2100      	movs	r1, #0
 80074c2:	9806      	ldr	r0, [sp, #24]
 80074c4:	4798      	blx	r3
      if (recv_len > 0)
 80074c6:	2800      	cmp	r0, #0
 80074c8:	dd10      	ble.n	80074ec <AT_RequestSendData+0x7c>
        *(pdata+recv_len) = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	9a06      	ldr	r2, [sp, #24]
 80074ce:	5413      	strb	r3, [r2, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80074d0:	490d      	ldr	r1, [pc, #52]	; (8007508 <AT_RequestSendData+0x98>)
 80074d2:	4610      	mov	r0, r2
 80074d4:	f01c fb32 	bl	8023b3c <strstr>
 80074d8:	b108      	cbz	r0, 80074de <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 80074da:	2000      	movs	r0, #0
 80074dc:	e7e1      	b.n	80074a2 <AT_RequestSendData+0x32>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80074de:	490b      	ldr	r1, [pc, #44]	; (800750c <AT_RequestSendData+0x9c>)
 80074e0:	9806      	ldr	r0, [sp, #24]
 80074e2:	f01c fb2b 	bl	8023b3c <strstr>
 80074e6:	b160      	cbz	r0, 8007502 <AT_RequestSendData+0x92>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80074e8:	2005      	movs	r0, #5
 80074ea:	e7da      	b.n	80074a2 <AT_RequestSendData+0x32>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80074ec:	f110 0f04 	cmn.w	r0, #4
 80074f0:	d001      	beq.n	80074f6 <AT_RequestSendData+0x86>
      return ES_WIFI_STATUS_ERROR;
 80074f2:	2002      	movs	r0, #2
 80074f4:	e7d5      	b.n	80074a2 <AT_RequestSendData+0x32>
        return ES_WIFI_STATUS_MODULE_CRASH;
 80074f6:	2006      	movs	r0, #6
 80074f8:	e7d3      	b.n	80074a2 <AT_RequestSendData+0x32>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80074fa:	2002      	movs	r0, #2
 80074fc:	e7d1      	b.n	80074a2 <AT_RequestSendData+0x32>
      return ES_WIFI_STATUS_ERROR;
 80074fe:	2002      	movs	r0, #2
 8007500:	e7cf      	b.n	80074a2 <AT_RequestSendData+0x32>
          return ES_WIFI_STATUS_ERROR;
 8007502:	2002      	movs	r0, #2
 8007504:	e7cd      	b.n	80074a2 <AT_RequestSendData+0x32>
 8007506:	bf00      	nop
 8007508:	08026030 	.word	0x08026030
 800750c:	0802603c 	.word	0x0802603c

08007510 <AT_ParseFWRev>:
{
 8007510:	b530      	push	{r4, r5, lr}
 8007512:	b083      	sub	sp, #12
 8007514:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 1, ".",&saveptr);
 8007516:	aa01      	add	r2, sp, #4
 8007518:	490e      	ldr	r1, [pc, #56]	; (8007554 <AT_ParseFWRev+0x44>)
 800751a:	3001      	adds	r0, #1
 800751c:	f01c fb4c 	bl	8023bb8 <strtok_r>
  uint8_t num = 0;
 8007520:	2400      	movs	r4, #0
  while ((ptr != NULL) && (num < 4)) {
 8007522:	e006      	b.n	8007532 <AT_ParseFWRev+0x22>
    num++;
 8007524:	3401      	adds	r4, #1
 8007526:	b2e4      	uxtb	r4, r4
    ptr = strtok_r(NULL, ".",&saveptr);
 8007528:	aa01      	add	r2, sp, #4
 800752a:	490a      	ldr	r1, [pc, #40]	; (8007554 <AT_ParseFWRev+0x44>)
 800752c:	2000      	movs	r0, #0
 800752e:	f01c fb43 	bl	8023bb8 <strtok_r>
  while ((ptr != NULL) && (num < 4)) {
 8007532:	1e03      	subs	r3, r0, #0
 8007534:	bf18      	it	ne
 8007536:	2301      	movne	r3, #1
 8007538:	2c03      	cmp	r4, #3
 800753a:	bf88      	it	hi
 800753c:	2300      	movhi	r3, #0
 800753e:	b133      	cbz	r3, 800754e <AT_ParseFWRev+0x3e>
    switch (num) {
 8007540:	2c03      	cmp	r4, #3
 8007542:	d8ef      	bhi.n	8007524 <AT_ParseFWRev+0x14>
      ver[num] =  ParseNumber(ptr,0);
 8007544:	2100      	movs	r1, #0
 8007546:	f7ff fea8 	bl	800729a <ParseNumber>
 800754a:	5528      	strb	r0, [r5, r4]
      break;
 800754c:	e7ea      	b.n	8007524 <AT_ParseFWRev+0x14>
}
 800754e:	b003      	add	sp, #12
 8007550:	bd30      	pop	{r4, r5, pc}
 8007552:	bf00      	nop
 8007554:	0802606c 	.word	0x0802606c

08007558 <AT_ParsePing>:
{
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	b083      	sub	sp, #12
 800755c:	4605      	mov	r5, r0
 800755e:	460c      	mov	r4, r1
 8007560:	4610      	mov	r0, r2
  ptr= strtok_r(pdata,",\n\r",&saveptr);
 8007562:	aa01      	add	r2, sp, #4
 8007564:	490f      	ldr	r1, [pc, #60]	; (80075a4 <AT_ParsePing+0x4c>)
 8007566:	f01c fb27 	bl	8023bb8 <strtok_r>
 800756a:	4603      	mov	r3, r0
  int i=0;
 800756c:	2600      	movs	r6, #0
  while(ptr)
 800756e:	b1bb      	cbz	r3, 80075a0 <AT_ParsePing+0x48>
    ptr = strtok_r(0,"\n\r",&saveptr);
 8007570:	aa01      	add	r2, sp, #4
 8007572:	490d      	ldr	r1, [pc, #52]	; (80075a8 <AT_ParsePing+0x50>)
 8007574:	2000      	movs	r0, #0
 8007576:	f01c fb1f 	bl	8023bb8 <strtok_r>
    if (ptr)
 800757a:	4603      	mov	r3, r0
 800757c:	2800      	cmp	r0, #0
 800757e:	d0f6      	beq.n	800756e <AT_ParsePing+0x16>
      res[i++]=ParseNumber(ptr,0);
 8007580:	1c77      	adds	r7, r6, #1
 8007582:	2100      	movs	r1, #0
 8007584:	f7ff fe89 	bl	800729a <ParseNumber>
 8007588:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
      if (i==count) return;
 800758c:	42bc      	cmp	r4, r7
 800758e:	d007      	beq.n	80075a0 <AT_ParsePing+0x48>
      ptr = strtok_r(0,",\n\r",&saveptr);
 8007590:	aa01      	add	r2, sp, #4
 8007592:	4904      	ldr	r1, [pc, #16]	; (80075a4 <AT_ParsePing+0x4c>)
 8007594:	2000      	movs	r0, #0
 8007596:	f01c fb0f 	bl	8023bb8 <strtok_r>
 800759a:	4603      	mov	r3, r0
      res[i++]=ParseNumber(ptr,0);
 800759c:	463e      	mov	r6, r7
 800759e:	e7e6      	b.n	800756e <AT_ParsePing+0x16>
}
 80075a0:	b003      	add	sp, #12
 80075a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a4:	08026074 	.word	0x08026074
 80075a8:	08026078 	.word	0x08026078

080075ac <AT_ParseTransportSettings>:
{
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 80075b2:	aa01      	add	r2, sp, #4
 80075b4:	4937      	ldr	r1, [pc, #220]	; (8007694 <AT_ParseTransportSettings+0xe8>)
 80075b6:	3002      	adds	r0, #2
 80075b8:	f01c fafe 	bl	8023bb8 <strtok_r>
 80075bc:	4603      	mov	r3, r0
  uint8_t num = 0;
 80075be:	2600      	movs	r6, #0
  while (ptr != NULL) {
 80075c0:	e010      	b.n	80075e4 <AT_ParseTransportSettings+0x38>
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 80075c2:	2100      	movs	r1, #0
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7ff fe68 	bl	800729a <ParseNumber>
 80075ca:	7028      	strb	r0, [r5, #0]
    ptr = strtok_r(NULL, ",",&saveptr);
 80075cc:	aa01      	add	r2, sp, #4
 80075ce:	4931      	ldr	r1, [pc, #196]	; (8007694 <AT_ParseTransportSettings+0xe8>)
 80075d0:	2000      	movs	r0, #0
 80075d2:	f01c faf1 	bl	8023bb8 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 80075d6:	4603      	mov	r3, r0
 80075d8:	b118      	cbz	r0, 80075e2 <AT_ParseTransportSettings+0x36>
 80075da:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80075de:	2a2c      	cmp	r2, #44	; 0x2c
 80075e0:	d053      	beq.n	800768a <AT_ParseTransportSettings+0xde>
{
 80075e2:	4626      	mov	r6, r4
  while (ptr != NULL) {
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d053      	beq.n	8007690 <AT_ParseTransportSettings+0xe4>
    switch (num++) {
 80075e8:	1c74      	adds	r4, r6, #1
 80075ea:	b2e4      	uxtb	r4, r4
 80075ec:	2e09      	cmp	r6, #9
 80075ee:	d8ed      	bhi.n	80075cc <AT_ParseTransportSettings+0x20>
 80075f0:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <AT_ParseTransportSettings+0x4c>)
 80075f2:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	080075c3 	.word	0x080075c3
 80075fc:	08007621 	.word	0x08007621
 8007600:	0800762b 	.word	0x0800762b
 8007604:	08007637 	.word	0x08007637
 8007608:	08007643 	.word	0x08007643
 800760c:	0800764f 	.word	0x0800764f
 8007610:	0800765b 	.word	0x0800765b
 8007614:	08007667 	.word	0x08007667
 8007618:	08007673 	.word	0x08007673
 800761c:	0800767f 	.word	0x0800767f
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 8007620:	1c69      	adds	r1, r5, #1
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff fe7b 	bl	800731e <ParseIP>
      break;
 8007628:	e7d0      	b.n	80075cc <AT_ParseTransportSettings+0x20>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff fe34 	bl	800729a <ParseNumber>
 8007632:	80e8      	strh	r0, [r5, #6]
      break;
 8007634:	e7ca      	b.n	80075cc <AT_ParseTransportSettings+0x20>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8007636:	f105 0108 	add.w	r1, r5, #8
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fe6f 	bl	800731e <ParseIP>
      break;
 8007640:	e7c4      	b.n	80075cc <AT_ParseTransportSettings+0x20>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fe28 	bl	800729a <ParseNumber>
 800764a:	81a8      	strh	r0, [r5, #12]
      break;
 800764c:	e7be      	b.n	80075cc <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 800764e:	2100      	movs	r1, #0
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fe22 	bl	800729a <ParseNumber>
 8007656:	73a8      	strb	r0, [r5, #14]
      break;
 8007658:	e7b8      	b.n	80075cc <AT_ParseTransportSettings+0x20>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 800765a:	2100      	movs	r1, #0
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff fe1c 	bl	800729a <ParseNumber>
 8007662:	73e8      	strb	r0, [r5, #15]
      break;
 8007664:	e7b2      	b.n	80075cc <AT_ParseTransportSettings+0x20>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff fe16 	bl	800729a <ParseNumber>
 800766e:	7428      	strb	r0, [r5, #16]
      break;
 8007670:	e7ac      	b.n	80075cc <AT_ParseTransportSettings+0x20>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 8007672:	2100      	movs	r1, #0
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff fe10 	bl	800729a <ParseNumber>
 800767a:	7468      	strb	r0, [r5, #17]
      break;
 800767c:	e7a6      	b.n	80075cc <AT_ParseTransportSettings+0x20>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 800767e:	2100      	movs	r1, #0
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff fe0a 	bl	800729a <ParseNumber>
 8007686:	74a8      	strb	r0, [r5, #18]
      break;
 8007688:	e7a0      	b.n	80075cc <AT_ParseTransportSettings+0x20>
      num++;
 800768a:	1cb4      	adds	r4, r6, #2
 800768c:	b2e4      	uxtb	r4, r4
 800768e:	e7a8      	b.n	80075e2 <AT_ParseTransportSettings+0x36>
}
 8007690:	b002      	add	sp, #8
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	08026070 	.word	0x08026070

08007698 <AT_ParseInfo>:
{
 8007698:	b530      	push	{r4, r5, lr}
 800769a:	b083      	sub	sp, #12
 800769c:	4605      	mov	r5, r0
 800769e:	4608      	mov	r0, r1
  ptr = strtok_r((char *)pdata + 2, ",", &saveptr);
 80076a0:	aa01      	add	r2, sp, #4
 80076a2:	492c      	ldr	r1, [pc, #176]	; (8007754 <AT_ParseInfo+0xbc>)
 80076a4:	3002      	adds	r0, #2
 80076a6:	f01c fa87 	bl	8023bb8 <strtok_r>
  uint8_t num = 0;
 80076aa:	2300      	movs	r3, #0
  while (ptr != NULL){
 80076ac:	e00a      	b.n	80076c4 <AT_ParseInfo+0x2c>
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80076ae:	2220      	movs	r2, #32
 80076b0:	4601      	mov	r1, r0
 80076b2:	4628      	mov	r0, r5
 80076b4:	f01c fa2f 	bl	8023b16 <strncpy>
    ptr = strtok_r(NULL, ",", &saveptr);
 80076b8:	aa01      	add	r2, sp, #4
 80076ba:	4926      	ldr	r1, [pc, #152]	; (8007754 <AT_ParseInfo+0xbc>)
 80076bc:	2000      	movs	r0, #0
 80076be:	f01c fa7b 	bl	8023bb8 <strtok_r>
    switch (num++) {
 80076c2:	4623      	mov	r3, r4
  while (ptr != NULL){
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d042      	beq.n	800774e <AT_ParseInfo+0xb6>
    switch (num++) {
 80076c8:	1c5c      	adds	r4, r3, #1
 80076ca:	b2e4      	uxtb	r4, r4
 80076cc:	2b06      	cmp	r3, #6
 80076ce:	d8f3      	bhi.n	80076b8 <AT_ParseInfo+0x20>
 80076d0:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <AT_ParseInfo+0x40>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	080076af 	.word	0x080076af
 80076dc:	080076f5 	.word	0x080076f5
 80076e0:	08007703 	.word	0x08007703
 80076e4:	08007711 	.word	0x08007711
 80076e8:	0800771f 	.word	0x0800771f
 80076ec:	0800772d 	.word	0x0800772d
 80076f0:	08007739 	.word	0x08007739
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80076f4:	2218      	movs	r2, #24
 80076f6:	4601      	mov	r1, r0
 80076f8:	f105 0020 	add.w	r0, r5, #32
 80076fc:	f01c fa0b 	bl	8023b16 <strncpy>
      break;
 8007700:	e7da      	b.n	80076b8 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8007702:	2210      	movs	r2, #16
 8007704:	4601      	mov	r1, r0
 8007706:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800770a:	f01c fa04 	bl	8023b16 <strncpy>
      break;
 800770e:	e7d3      	b.n	80076b8 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8007710:	2210      	movs	r2, #16
 8007712:	4601      	mov	r1, r0
 8007714:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8007718:	f01c f9fd 	bl	8023b16 <strncpy>
      break;
 800771c:	e7cc      	b.n	80076b8 <AT_ParseInfo+0x20>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 800771e:	2210      	movs	r2, #16
 8007720:	4601      	mov	r1, r0
 8007722:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8007726:	f01c f9f6 	bl	8023b16 <strncpy>
      break;
 800772a:	e7c5      	b.n	80076b8 <AT_ParseInfo+0x20>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800772c:	2100      	movs	r1, #0
 800772e:	f7ff fdb4 	bl	800729a <ParseNumber>
 8007732:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
      break;
 8007736:	e7bf      	b.n	80076b8 <AT_ParseInfo+0x20>
      ptr = strtok_r(ptr, "\r", &saveptr);
 8007738:	aa01      	add	r2, sp, #4
 800773a:	4907      	ldr	r1, [pc, #28]	; (8007758 <AT_ParseInfo+0xc0>)
 800773c:	f01c fa3c 	bl	8023bb8 <strtok_r>
 8007740:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007742:	2220      	movs	r2, #32
 8007744:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8007748:	f01c f9e5 	bl	8023b16 <strncpy>
      break;
 800774c:	e7b4      	b.n	80076b8 <AT_ParseInfo+0x20>
}
 800774e:	b003      	add	sp, #12
 8007750:	bd30      	pop	{r4, r5, pc}
 8007752:	bf00      	nop
 8007754:	08026070 	.word	0x08026070
 8007758:	080261e8 	.word	0x080261e8

0800775c <AT_ParseSingleAP>:
{
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	460e      	mov	r6, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 8007762:	aa01      	add	r2, sp, #4
 8007764:	4926      	ldr	r1, [pc, #152]	; (8007800 <AT_ParseSingleAP+0xa4>)
 8007766:	3002      	adds	r0, #2
 8007768:	f01c fa26 	bl	8023bb8 <strtok_r>
 800776c:	4604      	mov	r4, r0
  uint8_t num = 0;
 800776e:	2300      	movs	r3, #0
  while (ptr != NULL) {
 8007770:	e011      	b.n	8007796 <AT_ParseSingleAP+0x3a>
      ptr[strlen(ptr) - 1] = 0;
 8007772:	4620      	mov	r0, r4
 8007774:	f7f8 fdc6 	bl	8000304 <strlen>
 8007778:	3801      	subs	r0, #1
 800777a:	2300      	movs	r3, #0
 800777c:	5423      	strb	r3, [r4, r0]
      strncpy((char *)AP->SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800777e:	2221      	movs	r2, #33	; 0x21
 8007780:	1c61      	adds	r1, r4, #1
 8007782:	4630      	mov	r0, r6
 8007784:	f01c f9c7 	bl	8023b16 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 8007788:	aa01      	add	r2, sp, #4
 800778a:	491d      	ldr	r1, [pc, #116]	; (8007800 <AT_ParseSingleAP+0xa4>)
 800778c:	2000      	movs	r0, #0
 800778e:	f01c fa13 	bl	8023bb8 <strtok_r>
 8007792:	4604      	mov	r4, r0
 8007794:	462b      	mov	r3, r5
  while (ptr != NULL) {
 8007796:	b38c      	cbz	r4, 80077fc <AT_ParseSingleAP+0xa0>
    switch (num++) {
 8007798:	1c5d      	adds	r5, r3, #1
 800779a:	b2ed      	uxtb	r5, r5
 800779c:	3b01      	subs	r3, #1
 800779e:	2b07      	cmp	r3, #7
 80077a0:	d8f2      	bhi.n	8007788 <AT_ParseSingleAP+0x2c>
 80077a2:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <AT_ParseSingleAP+0x4c>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	08007773 	.word	0x08007773
 80077ac:	080077c9 	.word	0x080077c9
 80077b0:	080077d5 	.word	0x080077d5
 80077b4:	08007789 	.word	0x08007789
 80077b8:	08007789 	.word	0x08007789
 80077bc:	080077e1 	.word	0x080077e1
 80077c0:	08007789 	.word	0x08007789
 80077c4:	080077ed 	.word	0x080077ed
      ParseMAC(ptr, AP->MAC);
 80077c8:	f106 0124 	add.w	r1, r6, #36	; 0x24
 80077cc:	4620      	mov	r0, r4
 80077ce:	f7ff fd8a 	bl	80072e6 <ParseMAC>
      break;
 80077d2:	e7d9      	b.n	8007788 <AT_ParseSingleAP+0x2c>
      AP->RSSI = ParseNumber(ptr, NULL);
 80077d4:	2100      	movs	r1, #0
 80077d6:	4620      	mov	r0, r4
 80077d8:	f7ff fd5f 	bl	800729a <ParseNumber>
 80077dc:	8470      	strh	r0, [r6, #34]	; 0x22
      break;
 80077de:	e7d3      	b.n	8007788 <AT_ParseSingleAP+0x2c>
      AP->Security = ParseSecurity(ptr);
 80077e0:	4620      	mov	r0, r4
 80077e2:	f7ff fe0b 	bl	80073fc <ParseSecurity>
 80077e6:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 80077ea:	e7cd      	b.n	8007788 <AT_ParseSingleAP+0x2c>
      AP->Channel = ParseNumber(ptr, NULL);
 80077ec:	2100      	movs	r1, #0
 80077ee:	4620      	mov	r0, r4
 80077f0:	f7ff fd53 	bl	800729a <ParseNumber>
 80077f4:	f886 002a 	strb.w	r0, [r6, #42]	; 0x2a
      num = 1;
 80077f8:	2501      	movs	r5, #1
      break;
 80077fa:	e7c5      	b.n	8007788 <AT_ParseSingleAP+0x2c>
}
 80077fc:	b002      	add	sp, #8
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	08026070 	.word	0x08026070

08007804 <AT_ParseAP>:
{
 8007804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007806:	b083      	sub	sp, #12
 8007808:	460f      	mov	r7, r1
  APs->nbr = 0;
 800780a:	2400      	movs	r4, #0
 800780c:	f881 4370 	strb.w	r4, [r1, #880]	; 0x370
  ptr = strtok_r(pdata + 2, "," ,&saveptr);
 8007810:	aa01      	add	r2, sp, #4
 8007812:	4935      	ldr	r1, [pc, #212]	; (80078e8 <AT_ParseAP+0xe4>)
 8007814:	3002      	adds	r0, #2
 8007816:	f01c f9cf 	bl	8023bb8 <strtok_r>
 800781a:	4605      	mov	r5, r0
  uint8_t num = 0;
 800781c:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 800781e:	e015      	b.n	800784c <AT_ParseAP+0x48>
      ptr[strlen(ptr) - 1] = 0;
 8007820:	4628      	mov	r0, r5
 8007822:	f7f8 fd6f 	bl	8000304 <strlen>
 8007826:	3801      	subs	r0, #1
 8007828:	2300      	movs	r3, #0
 800782a:	542b      	strb	r3, [r5, r0]
      strncpy((char *)APs->AP[APs->nbr].SSID,  ptr+ 1, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 800782c:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007830:	2221      	movs	r2, #33	; 0x21
 8007832:	1c69      	adds	r1, r5, #1
 8007834:	202c      	movs	r0, #44	; 0x2c
 8007836:	fb00 7003 	mla	r0, r0, r3, r7
 800783a:	f01c f96c 	bl	8023b16 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 800783e:	aa01      	add	r2, sp, #4
 8007840:	4929      	ldr	r1, [pc, #164]	; (80078e8 <AT_ParseAP+0xe4>)
 8007842:	2000      	movs	r0, #0
 8007844:	f01c f9b8 	bl	8023bb8 <strtok_r>
 8007848:	4605      	mov	r5, r0
 800784a:	4623      	mov	r3, r4
  while ((ptr != NULL) && (APs->nbr < ES_WIFI_MAX_DETECTED_AP)) {
 800784c:	2d00      	cmp	r5, #0
 800784e:	d049      	beq.n	80078e4 <AT_ParseAP+0xe0>
 8007850:	f897 6370 	ldrb.w	r6, [r7, #880]	; 0x370
 8007854:	2e13      	cmp	r6, #19
 8007856:	d845      	bhi.n	80078e4 <AT_ParseAP+0xe0>
    switch (num++) {
 8007858:	1c5c      	adds	r4, r3, #1
 800785a:	b2e4      	uxtb	r4, r4
 800785c:	3b01      	subs	r3, #1
 800785e:	2b07      	cmp	r3, #7
 8007860:	d8ed      	bhi.n	800783e <AT_ParseAP+0x3a>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <AT_ParseAP+0x64>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007821 	.word	0x08007821
 800786c:	08007889 	.word	0x08007889
 8007870:	0800789d 	.word	0x0800789d
 8007874:	0800783f 	.word	0x0800783f
 8007878:	0800783f 	.word	0x0800783f
 800787c:	080078b3 	.word	0x080078b3
 8007880:	0800783f 	.word	0x0800783f
 8007884:	080078c5 	.word	0x080078c5
      ParseMAC(ptr, APs->AP[APs->nbr].MAC);
 8007888:	212c      	movs	r1, #44	; 0x2c
 800788a:	fb06 f101 	mul.w	r1, r6, r1
 800788e:	3120      	adds	r1, #32
 8007890:	4439      	add	r1, r7
 8007892:	3104      	adds	r1, #4
 8007894:	4628      	mov	r0, r5
 8007896:	f7ff fd26 	bl	80072e6 <ParseMAC>
      break;
 800789a:	e7d0      	b.n	800783e <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].RSSI = ParseNumber(ptr, NULL);
 800789c:	2100      	movs	r1, #0
 800789e:	4628      	mov	r0, r5
 80078a0:	f7ff fcfb 	bl	800729a <ParseNumber>
 80078a4:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 80078a8:	222c      	movs	r2, #44	; 0x2c
 80078aa:	fb02 7303 	mla	r3, r2, r3, r7
 80078ae:	8458      	strh	r0, [r3, #34]	; 0x22
      break;
 80078b0:	e7c5      	b.n	800783e <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Security = ParseSecurity(ptr);
 80078b2:	4628      	mov	r0, r5
 80078b4:	f7ff fda2 	bl	80073fc <ParseSecurity>
 80078b8:	232c      	movs	r3, #44	; 0x2c
 80078ba:	fb03 7606 	mla	r6, r3, r6, r7
 80078be:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
      break;
 80078c2:	e7bc      	b.n	800783e <AT_ParseAP+0x3a>
      APs->AP[APs->nbr].Channel = ParseNumber(ptr, NULL);
 80078c4:	2100      	movs	r1, #0
 80078c6:	4628      	mov	r0, r5
 80078c8:	f7ff fce7 	bl	800729a <ParseNumber>
 80078cc:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 80078d0:	222c      	movs	r2, #44	; 0x2c
 80078d2:	fb02 7203 	mla	r2, r2, r3, r7
 80078d6:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
      APs->nbr++;
 80078da:	3301      	adds	r3, #1
 80078dc:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
      num = 1;
 80078e0:	2401      	movs	r4, #1
      break;
 80078e2:	e7ac      	b.n	800783e <AT_ParseAP+0x3a>
}
 80078e4:	b003      	add	sp, #12
 80078e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e8:	08026070 	.word	0x08026070

080078ec <AT_ParseConnSettings>:
{
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	460d      	mov	r5, r1
  ptr = strtok_r(pdata + 2, ",",&saveptr);
 80078f2:	aa01      	add	r2, sp, #4
 80078f4:	4942      	ldr	r1, [pc, #264]	; (8007a00 <AT_ParseConnSettings+0x114>)
 80078f6:	3002      	adds	r0, #2
 80078f8:	f01c f95e 	bl	8023bb8 <strtok_r>
 80078fc:	4603      	mov	r3, r0
  uint8_t num = 0;
 80078fe:	2600      	movs	r6, #0
  while (ptr != NULL) {
 8007900:	e010      	b.n	8007924 <AT_ParseConnSettings+0x38>
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8007902:	2221      	movs	r2, #33	; 0x21
 8007904:	4619      	mov	r1, r3
 8007906:	4628      	mov	r0, r5
 8007908:	f01c f905 	bl	8023b16 <strncpy>
    ptr = strtok_r(NULL, ",",&saveptr);
 800790c:	aa01      	add	r2, sp, #4
 800790e:	493c      	ldr	r1, [pc, #240]	; (8007a00 <AT_ParseConnSettings+0x114>)
 8007910:	2000      	movs	r0, #0
 8007912:	f01c f951 	bl	8023bb8 <strtok_r>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8007916:	4603      	mov	r3, r0
 8007918:	b118      	cbz	r0, 8007922 <AT_ParseConnSettings+0x36>
 800791a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800791e:	2a2c      	cmp	r2, #44	; 0x2c
 8007920:	d069      	beq.n	80079f6 <AT_ParseConnSettings+0x10a>
{
 8007922:	4626      	mov	r6, r4
  while (ptr != NULL) {
 8007924:	2b00      	cmp	r3, #0
 8007926:	d069      	beq.n	80079fc <AT_ParseConnSettings+0x110>
    switch (num++) {
 8007928:	1c74      	adds	r4, r6, #1
 800792a:	b2e4      	uxtb	r4, r4
 800792c:	2e0b      	cmp	r6, #11
 800792e:	d8ed      	bhi.n	800790c <AT_ParseConnSettings+0x20>
 8007930:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <AT_ParseConnSettings+0x4c>)
 8007932:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 8007936:	bf00      	nop
 8007938:	08007903 	.word	0x08007903
 800793c:	08007969 	.word	0x08007969
 8007940:	08007975 	.word	0x08007975
 8007944:	08007983 	.word	0x08007983
 8007948:	08007991 	.word	0x08007991
 800794c:	0800799f 	.word	0x0800799f
 8007950:	080079ab 	.word	0x080079ab
 8007954:	080079b7 	.word	0x080079b7
 8007958:	080079c3 	.word	0x080079c3
 800795c:	080079cf 	.word	0x080079cf
 8007960:	080079db 	.word	0x080079db
 8007964:	080079e9 	.word	0x080079e9
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8007968:	2221      	movs	r2, #33	; 0x21
 800796a:	4619      	mov	r1, r3
 800796c:	18a8      	adds	r0, r5, r2
 800796e:	f01c f8d2 	bl	8023b16 <strncpy>
      break;
 8007972:	e7cb      	b.n	800790c <AT_ParseConnSettings+0x20>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8007974:	2100      	movs	r1, #0
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff fc8f 	bl	800729a <ParseNumber>
 800797c:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
        break;
 8007980:	e7c4      	b.n	800790c <AT_ParseConnSettings+0x20>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007982:	2100      	movs	r1, #0
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fc88 	bl	800729a <ParseNumber>
 800798a:	f885 0043 	strb.w	r0, [r5, #67]	; 0x43
      break;
 800798e:	e7bd      	b.n	800790c <AT_ParseConnSettings+0x20>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8007990:	2100      	movs	r1, #0
 8007992:	4618      	mov	r0, r3
 8007994:	f7ff fc81 	bl	800729a <ParseNumber>
 8007998:	f885 0047 	strb.w	r0, [r5, #71]	; 0x47
      break;
 800799c:	e7b6      	b.n	800790c <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Addr);
 800799e:	f105 0148 	add.w	r1, r5, #72	; 0x48
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7ff fcbb 	bl	800731e <ParseIP>
      break;
 80079a8:	e7b0      	b.n	800790c <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->IP_Mask);
 80079aa:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff fcb5 	bl	800731e <ParseIP>
      break;
 80079b4:	e7aa      	b.n	800790c <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80079b6:	f105 0150 	add.w	r1, r5, #80	; 0x50
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7ff fcaf 	bl	800731e <ParseIP>
      break;
 80079c0:	e7a4      	b.n	800790c <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS1);
 80079c2:	f105 0154 	add.w	r1, r5, #84	; 0x54
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fca9 	bl	800731e <ParseIP>
      break;
 80079cc:	e79e      	b.n	800790c <AT_ParseConnSettings+0x20>
      ParseIP(ptr, NetSettings->DNS2);
 80079ce:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fca3 	bl	800731e <ParseIP>
      break;
 80079d8:	e798      	b.n	800790c <AT_ParseConnSettings+0x20>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff fc5c 	bl	800729a <ParseNumber>
 80079e2:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
      break;
 80079e6:	e791      	b.n	800790c <AT_ParseConnSettings+0x20>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80079e8:	2100      	movs	r1, #0
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff fc55 	bl	800729a <ParseNumber>
 80079f0:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
      break;
 80079f4:	e78a      	b.n	800790c <AT_ParseConnSettings+0x20>
      num++;
 80079f6:	1cb4      	adds	r4, r6, #2
 80079f8:	b2e4      	uxtb	r4, r4
 80079fa:	e792      	b.n	8007922 <AT_ParseConnSettings+0x36>
}
 80079fc:	b002      	add	sp, #8
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	08026070 	.word	0x08026070

08007a04 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8007a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a08:	4604      	mov	r4, r0
 8007a0a:	460d      	mov	r5, r1
 8007a0c:	4690      	mov	r8, r2
 8007a0e:	461e      	mov	r6, r3
  int len;
  uint8_t *p=Obj->CmdData;
 8007a10:	f500 7994 	add.w	r9, r0, #296	; 0x128

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007a14:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 8007a18:	4608      	mov	r0, r1
 8007a1a:	f7f8 fc73 	bl	8000304 <strlen>
 8007a1e:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007a22:	b281      	uxth	r1, r0
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b8      	blx	r7
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	dd48      	ble.n	8007abe <AT_RequestReceiveData+0xba>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8007a2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8007a30:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007a34:	2100      	movs	r1, #0
 8007a36:	4648      	mov	r0, r9
 8007a38:	4798      	blx	r3
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8007a3a:	f110 0f04 	cmn.w	r0, #4
 8007a3e:	d041      	beq.n	8007ac4 <AT_RequestReceiveData+0xc0>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8007a40:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8007a44:	2b0d      	cmp	r3, #13
 8007a46:	d13f      	bne.n	8007ac8 <AT_RequestReceiveData+0xc4>
 8007a48:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8007a4c:	2b0a      	cmp	r3, #10
 8007a4e:	d13d      	bne.n	8007acc <AT_RequestReceiveData+0xc8>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
    }
    len-=2;
 8007a50:	1e85      	subs	r5, r0, #2
    p+=2;
 8007a52:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    if (len >= AT_OK_STRING_LEN)
 8007a56:	2d07      	cmp	r5, #7
 8007a58:	d802      	bhi.n	8007a60 <AT_RequestReceiveData+0x5c>

     *ReadData = 0;
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8007a5a:	2004      	movs	r0, #4
 8007a5c:	e030      	b.n	8007ac0 <AT_RequestReceiveData+0xbc>
     while(len && (p[len-1]==0x15)) len--;
 8007a5e:	3d01      	subs	r5, #1
 8007a60:	b125      	cbz	r5, 8007a6c <AT_RequestReceiveData+0x68>
 8007a62:	1963      	adds	r3, r4, r5
 8007a64:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007a68:	2b15      	cmp	r3, #21
 8007a6a:	d0f8      	beq.n	8007a5e <AT_RequestReceiveData+0x5a>
     p[len] = '\0';
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	5563      	strb	r3, [r4, r5]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8007a70:	f1a5 0008 	sub.w	r0, r5, #8
 8007a74:	4916      	ldr	r1, [pc, #88]	; (8007ad0 <AT_RequestReceiveData+0xcc>)
 8007a76:	4420      	add	r0, r4
 8007a78:	f01c f860 	bl	8023b3c <strstr>
 8007a7c:	b170      	cbz	r0, 8007a9c <AT_RequestReceiveData+0x98>
       *ReadData = len - AT_OK_STRING_LEN;
 8007a7e:	3d08      	subs	r5, #8
 8007a80:	b2ad      	uxth	r5, r5
 8007a82:	9b08      	ldr	r3, [sp, #32]
 8007a84:	801d      	strh	r5, [r3, #0]
	   if (*ReadData > Reqlen)
 8007a86:	42b5      	cmp	r5, r6
 8007a88:	d900      	bls.n	8007a8c <AT_RequestReceiveData+0x88>
         *ReadData = Reqlen;
 8007a8a:	801e      	strh	r6, [r3, #0]
       memcpy(pdata, p, *ReadData);
 8007a8c:	9b08      	ldr	r3, [sp, #32]
 8007a8e:	881a      	ldrh	r2, [r3, #0]
 8007a90:	4621      	mov	r1, r4
 8007a92:	4640      	mov	r0, r8
 8007a94:	f01b fb26 	bl	80230e4 <memcpy>
       return ES_WIFI_STATUS_OK;
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e011      	b.n	8007ac0 <AT_RequestReceiveData+0xbc>
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8007a9c:	1f28      	subs	r0, r5, #4
 8007a9e:	2204      	movs	r2, #4
 8007aa0:	490c      	ldr	r1, [pc, #48]	; (8007ad4 <AT_RequestReceiveData+0xd0>)
 8007aa2:	4420      	add	r0, r4
 8007aa4:	f01b fb0e 	bl	80230c4 <memcmp>
 8007aa8:	b920      	cbnz	r0, 8007ab4 <AT_RequestReceiveData+0xb0>
       *ReadData = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9a08      	ldr	r2, [sp, #32]
 8007aae:	8013      	strh	r3, [r2, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007ab0:	2005      	movs	r0, #5
 8007ab2:	e005      	b.n	8007ac0 <AT_RequestReceiveData+0xbc>
     *ReadData = 0;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9a08      	ldr	r2, [sp, #32]
 8007ab8:	8013      	strh	r3, [r2, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007aba:	2005      	movs	r0, #5
 8007abc:	e000      	b.n	8007ac0 <AT_RequestReceiveData+0xbc>
  return ES_WIFI_STATUS_IO_ERROR;
 8007abe:	2004      	movs	r0, #4
}
 8007ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return ES_WIFI_STATUS_MODULE_CRASH;
 8007ac4:	2006      	movs	r0, #6
 8007ac6:	e7fb      	b.n	8007ac0 <AT_RequestReceiveData+0xbc>
     return  ES_WIFI_STATUS_IO_ERROR;
 8007ac8:	2004      	movs	r0, #4
 8007aca:	e7f9      	b.n	8007ac0 <AT_RequestReceiveData+0xbc>
 8007acc:	2004      	movs	r0, #4
 8007ace:	e7f7      	b.n	8007ac0 <AT_RequestReceiveData+0xbc>
 8007ad0:	08026030 	.word	0x08026030
 8007ad4:	08026034 	.word	0x08026034

08007ad8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8007adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ae0:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8007ae4:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8007ae8:	2000      	movs	r0, #0
 8007aea:	4798      	blx	r3
 8007aec:	b110      	cbz	r0, 8007af4 <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8007aee:	2502      	movs	r5, #2
    {
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  return ret;
}
 8007af0:	4628      	mov	r0, r5
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8007af4:	f504 7694 	add.w	r6, r4, #296	; 0x128
 8007af8:	4632      	mov	r2, r6
 8007afa:	4906      	ldr	r1, [pc, #24]	; (8007b14 <ES_WIFI_Init+0x3c>)
 8007afc:	4620      	mov	r0, r4
 8007afe:	f7ff fc3d 	bl	800737c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007b02:	4605      	mov	r5, r0
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d1f3      	bne.n	8007af0 <ES_WIFI_Init+0x18>
      AT_ParseInfo (Obj, Obj->CmdData);
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f7ff fdc4 	bl	8007698 <AT_ParseInfo>
 8007b10:	e7ee      	b.n	8007af0 <ES_WIFI_Init+0x18>
 8007b12:	bf00      	nop
 8007b14:	0802607c 	.word	0x0802607c

08007b18 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8007b18:	b470      	push	{r4, r5, r6}
 8007b1a:	9c03      	ldr	r4, [sp, #12]
 8007b1c:	9d04      	ldr	r5, [sp, #16]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8007b1e:	2900      	cmp	r1, #0
 8007b20:	bf18      	it	ne
 8007b22:	2800      	cmpne	r0, #0
 8007b24:	d013      	beq.n	8007b4e <ES_WIFI_RegisterBusIO+0x36>
 8007b26:	460e      	mov	r6, r1
 8007b28:	fab4 f184 	clz	r1, r4
 8007b2c:	0949      	lsrs	r1, r1, #5
 8007b2e:	b182      	cbz	r2, 8007b52 <ES_WIFI_RegisterBusIO+0x3a>
 8007b30:	b979      	cbnz	r1, 8007b52 <ES_WIFI_RegisterBusIO+0x3a>
 8007b32:	b185      	cbz	r5, 8007b56 <ES_WIFI_RegisterBusIO+0x3e>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
 8007b34:	f8c0 6114 	str.w	r6, [r0, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8007b38:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8007b3c:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8007b40:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8007b44:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8007b48:	2000      	movs	r0, #0
}
 8007b4a:	bc70      	pop	{r4, r5, r6}
 8007b4c:	4770      	bx	lr
    return ES_WIFI_STATUS_ERROR;
 8007b4e:	2002      	movs	r0, #2
 8007b50:	e7fb      	b.n	8007b4a <ES_WIFI_RegisterBusIO+0x32>
 8007b52:	2002      	movs	r0, #2
 8007b54:	e7f9      	b.n	8007b4a <ES_WIFI_RegisterBusIO+0x32>
 8007b56:	2002      	movs	r0, #2
 8007b58:	e7f7      	b.n	8007b4a <ES_WIFI_RegisterBusIO+0x32>
	...

08007b5c <ES_WIFI_ListAccessPoints>:
  * @param  Obj: pointer to module handle
  * @param  APs: pointer Access points structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_ListAccessPoints(ES_WIFIObject_t *Obj, ES_WIFI_APs_t *APs)
{
 8007b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	4606      	mov	r6, r0
 8007b62:	460f      	mov	r7, r1
  ES_WIFI_Status_t ret;
  int send_len;
  int16_t recv_len = 0;
  uint8_t version[4] = { 0 };
 8007b64:	2300      	movs	r3, #0
 8007b66:	9301      	str	r3, [sp, #4]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, (char*)Obj->FW_Rev);
 8007b68:	f500 7494 	add.w	r4, r0, #296	; 0x128
 8007b6c:	f100 0120 	add.w	r1, r0, #32
 8007b70:	4620      	mov	r0, r4
 8007b72:	f01b ff59 	bl	8023a28 <siprintf>

  AT_ParseFWRev((char*)Obj->CmdData, version);
 8007b76:	a901      	add	r1, sp, #4
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f7ff fcc9 	bl	8007510 <AT_ParseFWRev>

  if (ArrayTo32bit(version) >= UPDATED_SCAN_PARAMETERS_FW_REV)
 8007b7e:	a801      	add	r0, sp, #4
 8007b80:	f7ff fbe9 	bl	8007356 <ArrayTo32bit>
 8007b84:	4b36      	ldr	r3, [pc, #216]	; (8007c60 <ES_WIFI_ListAccessPoints+0x104>)
 8007b86:	4298      	cmp	r0, r3
 8007b88:	d958      	bls.n	8007c3c <ES_WIFI_ListAccessPoints+0xe0>
  {
    APs->nbr = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370

    sprintf((char*)Obj->CmdData,"F0=2\r");
 8007b90:	4b34      	ldr	r3, [pc, #208]	; (8007c64 <ES_WIFI_ListAccessPoints+0x108>)
 8007b92:	6818      	ldr	r0, [r3, #0]
 8007b94:	f8c6 0128 	str.w	r0, [r6, #296]	; 0x128
 8007b98:	889b      	ldrh	r3, [r3, #4]
 8007b9a:	80a3      	strh	r3, [r4, #4]

    send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8007b9c:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7f8 fbaf 	bl	8000304 <strlen>
 8007ba6:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8007baa:	b281      	uxth	r1, r0
 8007bac:	4620      	mov	r0, r4
 8007bae:	47a8      	blx	r5

    if (send_len == 5)
 8007bb0:	2805      	cmp	r0, #5
 8007bb2:	d019      	beq.n	8007be8 <ES_WIFI_ListAccessPoints+0x8c>
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
	  } while (send_len == 3);
    }

    UNLOCK_WIFI();
    return ES_WIFI_STATUS_IO_ERROR;
 8007bb4:	2504      	movs	r5, #4
      AT_ParseAP((char *)Obj->CmdData, APs);
    }
    UNLOCK_WIFI();
    return ret;
  }
}
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	b003      	add	sp, #12
 8007bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8007bbc:	f115 0f04 	cmn.w	r5, #4
 8007bc0:	d04b      	beq.n	8007c5a <ES_WIFI_ListAccessPoints+0xfe>
        if (APs->nbr < ES_WIFI_MAX_DETECTED_AP)
 8007bc2:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007bc6:	2b13      	cmp	r3, #19
 8007bc8:	d92c      	bls.n	8007c24 <ES_WIFI_ListAccessPoints+0xc8>
        sprintf((char*)Obj->CmdData,"MR\r");
 8007bca:	4b27      	ldr	r3, [pc, #156]	; (8007c68 <ES_WIFI_ListAccessPoints+0x10c>)
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	6020      	str	r0, [r4, #0]
        send_len = Obj->fops.IO_Send(Obj->CmdData, strlen((char*)Obj->CmdData), Obj->Timeout);
 8007bd0:	f8d6 5120 	ldr.w	r5, [r6, #288]	; 0x120
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f7f8 fb95 	bl	8000304 <strlen>
 8007bda:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8007bde:	b281      	uxth	r1, r0
 8007be0:	4620      	mov	r0, r4
 8007be2:	47a8      	blx	r5
	  } while (send_len == 3);
 8007be4:	2803      	cmp	r0, #3
 8007be6:	d1e5      	bne.n	8007bb4 <ES_WIFI_ListAccessPoints+0x58>
	    recv_len = Obj->fops.IO_Receive(Obj->CmdData, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007be8:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 8007bec:	f8d6 26a0 	ldr.w	r2, [r6, #1696]	; 0x6a0
 8007bf0:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	4798      	blx	r3
 8007bf8:	4605      	mov	r5, r0
        if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8007bfa:	1e43      	subs	r3, r0, #1
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	f240 5276 	movw	r2, #1398	; 0x576
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d8da      	bhi.n	8007bbc <ES_WIFI_ListAccessPoints+0x60>
          *(Obj->CmdData + recv_len) = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	5423      	strb	r3, [r4, r0]
	      if(strstr((char *)Obj->CmdData, AT_OK_STRING))
 8007c0a:	4918      	ldr	r1, [pc, #96]	; (8007c6c <ES_WIFI_ListAccessPoints+0x110>)
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f01b ff95 	bl	8023b3c <strstr>
 8007c12:	bb00      	cbnz	r0, 8007c56 <ES_WIFI_ListAccessPoints+0xfa>
	      else if(strstr((char *)Obj->CmdData, AT_ERROR_STRING))
 8007c14:	4916      	ldr	r1, [pc, #88]	; (8007c70 <ES_WIFI_ListAccessPoints+0x114>)
 8007c16:	4620      	mov	r0, r4
 8007c18:	f01b ff90 	bl	8023b3c <strstr>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d0cd      	beq.n	8007bbc <ES_WIFI_ListAccessPoints+0x60>
            return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007c20:	2505      	movs	r5, #5
 8007c22:	e7c8      	b.n	8007bb6 <ES_WIFI_ListAccessPoints+0x5a>
          AT_ParseSingleAP((char *)Obj->CmdData, &(APs->AP[APs->nbr]));
 8007c24:	212c      	movs	r1, #44	; 0x2c
 8007c26:	fb01 7103 	mla	r1, r1, r3, r7
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f7ff fd96 	bl	800775c <AT_ParseSingleAP>
          APs->nbr++;
 8007c30:	f897 3370 	ldrb.w	r3, [r7, #880]	; 0x370
 8007c34:	3301      	adds	r3, #1
 8007c36:	f887 3370 	strb.w	r3, [r7, #880]	; 0x370
 8007c3a:	e7c6      	b.n	8007bca <ES_WIFI_ListAccessPoints+0x6e>
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"F0\r", Obj->CmdData);
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	490d      	ldr	r1, [pc, #52]	; (8007c74 <ES_WIFI_ListAccessPoints+0x118>)
 8007c40:	4630      	mov	r0, r6
 8007c42:	f7ff fb9b 	bl	800737c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007c46:	4605      	mov	r5, r0
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d1b4      	bne.n	8007bb6 <ES_WIFI_ListAccessPoints+0x5a>
      AT_ParseAP((char *)Obj->CmdData, APs);
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f7ff fdd8 	bl	8007804 <AT_ParseAP>
    return ret;
 8007c54:	e7af      	b.n	8007bb6 <ES_WIFI_ListAccessPoints+0x5a>
		    return ES_WIFI_STATUS_OK;
 8007c56:	2500      	movs	r5, #0
 8007c58:	e7ad      	b.n	8007bb6 <ES_WIFI_ListAccessPoints+0x5a>
	      return ES_WIFI_STATUS_MODULE_CRASH;
 8007c5a:	2506      	movs	r5, #6
 8007c5c:	e7ab      	b.n	8007bb6 <ES_WIFI_ListAccessPoints+0x5a>
 8007c5e:	bf00      	nop
 8007c60:	03050204 	.word	0x03050204
 8007c64:	08026084 	.word	0x08026084
 8007c68:	0802608c 	.word	0x0802608c
 8007c6c:	08026030 	.word	0x08026030
 8007c70:	0802603c 	.word	0x0802603c
 8007c74:	08026090 	.word	0x08026090

08007c78 <ES_WIFI_Connect>:
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	bf18      	it	ne
 8007c7c:	2900      	cmpne	r1, #0
 8007c7e:	d101      	bne.n	8007c84 <ES_WIFI_Connect+0xc>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8007c80:	2002      	movs	r0, #2
    }

    UNLOCK_WIFI();
  }
  return ret;
}
 8007c82:	4770      	bx	lr
{
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	4604      	mov	r4, r0
 8007c88:	461e      	mov	r6, r3
 8007c8a:	4617      	mov	r7, r2
    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8007c8c:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8007c90:	460a      	mov	r2, r1
 8007c92:	491a      	ldr	r1, [pc, #104]	; (8007cfc <ES_WIFI_Connect+0x84>)
 8007c94:	4628      	mov	r0, r5
 8007c96:	f01b fec7 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f7ff fb6c 	bl	800737c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007ca4:	b100      	cbz	r0, 8007ca8 <ES_WIFI_Connect+0x30>
}
 8007ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8007ca8:	463a      	mov	r2, r7
 8007caa:	4915      	ldr	r1, [pc, #84]	; (8007d00 <ES_WIFI_Connect+0x88>)
 8007cac:	4628      	mov	r0, r5
 8007cae:	f01b febb 	bl	8023a28 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007cb2:	462a      	mov	r2, r5
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff fb60 	bl	800737c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d1f2      	bne.n	8007ca6 <ES_WIFI_Connect+0x2e>
        Obj->Security = SecType;
 8007cc0:	f884 608c 	strb.w	r6, [r4, #140]	; 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	490f      	ldr	r1, [pc, #60]	; (8007d04 <ES_WIFI_Connect+0x8c>)
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f01b fead 	bl	8023a28 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007cce:	462a      	mov	r2, r5
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff fb52 	bl	800737c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d1e4      	bne.n	8007ca6 <ES_WIFI_Connect+0x2e>
          sprintf((char*)Obj->CmdData,"C0\r");
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <ES_WIFI_Connect+0x90>)
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007ce4:	462a      	mov	r2, r5
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f7ff fb47 	bl	800737c <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d1d9      	bne.n	8007ca6 <ES_WIFI_Connect+0x2e>
            Obj->NetSettings.IsConnected = 1;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
 8007cf8:	e7d5      	b.n	8007ca6 <ES_WIFI_Connect+0x2e>
 8007cfa:	bf00      	nop
 8007cfc:	08026094 	.word	0x08026094
 8007d00:	0802609c 	.word	0x0802609c
 8007d04:	080260a4 	.word	0x080260a4
 8007d08:	080260ac 	.word	0x080260ac

08007d0c <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8007d10:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8007d14:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <ES_WIFI_IsConnected+0x30>)
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007d1c:	462a      	mov	r2, r5
 8007d1e:	4629      	mov	r1, r5
 8007d20:	4620      	mov	r0, r4
 8007d22:	f7ff fb2b 	bl	800737c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8007d26:	b110      	cbz	r0, 8007d2e <ES_WIFI_IsConnected+0x22>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8007d28:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8007d2c:	bd38      	pop	{r3, r4, r5, pc}
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8007d2e:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
 8007d32:	4628      	mov	r0, r5
 8007d34:	f7ff fb1a 	bl	800736c <AT_ParseIsConnected>
 8007d38:	e7f6      	b.n	8007d28 <ES_WIFI_IsConnected+0x1c>
 8007d3a:	bf00      	nop
 8007d3c:	080260b0 	.word	0x080260b0

08007d40 <ES_WIFI_Disconnect>:
  * @brief  Disconnect from a network.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Disconnect(ES_WIFIObject_t *Obj)
{
 8007d40:	b508      	push	{r3, lr}
 8007d42:	4603      	mov	r3, r0
   ES_WIFI_Status_t ret;
   LOCK_WIFI();
   sprintf((char*)Obj->CmdData,"CD\r");
 8007d44:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8007d48:	4a04      	ldr	r2, [pc, #16]	; (8007d5c <ES_WIFI_Disconnect+0x1c>)
 8007d4a:	6810      	ldr	r0, [r2, #0]
 8007d4c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
   ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007d50:	460a      	mov	r2, r1
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fb12 	bl	800737c <AT_ExecuteCommand>
   UNLOCK_WIFI();
   return  ret;
}
 8007d58:	bd08      	pop	{r3, pc}
 8007d5a:	bf00      	nop
 8007d5c:	080260b4 	.word	0x080260b4

08007d60 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8007d64:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8007d68:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <ES_WIFI_GetNetworkSettings+0x30>)
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007d70:	462a      	mov	r2, r5
 8007d72:	4629      	mov	r1, r5
 8007d74:	4620      	mov	r0, r4
 8007d76:	f7ff fb01 	bl	800737c <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	b108      	cbz	r0, 8007d82 <ES_WIFI_GetNetworkSettings+0x22>
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
  }

  UNLOCK_WIFI();
  return ret;
}
 8007d7e:	4630      	mov	r0, r6
 8007d80:	bd70      	pop	{r4, r5, r6, pc}
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8007d82:	f104 018d 	add.w	r1, r4, #141	; 0x8d
 8007d86:	4628      	mov	r0, r5
 8007d88:	f7ff fdb0 	bl	80078ec <AT_ParseConnSettings>
 8007d8c:	e7f7      	b.n	8007d7e <ES_WIFI_GetNetworkSettings+0x1e>
 8007d8e:	bf00      	nop
 8007d90:	080260b8 	.word	0x080260b8

08007d94 <ES_WIFI_ActivateAP>:
  * @param  ip : AP IP address
  * @param  mac : AP MAC address
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ActivateAP(ES_WIFIObject_t *Obj, ES_WIFI_APConfig_t *ApConfig)
{
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	4604      	mov	r4, r0
 8007d98:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"AS=0,%s\r", ApConfig->SSID);
 8007d9a:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8007d9e:	460a      	mov	r2, r1
 8007da0:	492b      	ldr	r1, [pc, #172]	; (8007e50 <ES_WIFI_ActivateAP+0xbc>)
 8007da2:	4628      	mov	r0, r5
 8007da4:	f01b fe40 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007da8:	462a      	mov	r2, r5
 8007daa:	4629      	mov	r1, r5
 8007dac:	4620      	mov	r0, r4
 8007dae:	f7ff fae5 	bl	800737c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8007db2:	4607      	mov	r7, r0
 8007db4:	b108      	cbz	r0, 8007dba <ES_WIFI_ActivateAP+0x26>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8007db6:	4638      	mov	r0, r7
 8007db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sprintf((char*)Obj->CmdData,"A1=%c\r", (int)ApConfig->Security + '0');
 8007dba:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
 8007dbe:	3230      	adds	r2, #48	; 0x30
 8007dc0:	4924      	ldr	r1, [pc, #144]	; (8007e54 <ES_WIFI_ActivateAP+0xc0>)
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f01b fe30 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007dc8:	462a      	mov	r2, r5
 8007dca:	4629      	mov	r1, r5
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f7ff fad5 	bl	800737c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d1ee      	bne.n	8007db6 <ES_WIFI_ActivateAP+0x22>
      sprintf((char*)Obj->CmdData,"A2=%s\r", ApConfig->Pass);
 8007dd8:	f106 0221 	add.w	r2, r6, #33	; 0x21
 8007ddc:	491e      	ldr	r1, [pc, #120]	; (8007e58 <ES_WIFI_ActivateAP+0xc4>)
 8007dde:	4628      	mov	r0, r5
 8007de0:	f01b fe22 	bl	8023a28 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007de4:	462a      	mov	r2, r5
 8007de6:	4629      	mov	r1, r5
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7ff fac7 	bl	800737c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8007dee:	4607      	mov	r7, r0
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d1e0      	bne.n	8007db6 <ES_WIFI_ActivateAP+0x22>
        sprintf((char*)Obj->CmdData,"AC=%d\r", ApConfig->Channel);
 8007df4:	f896 2043 	ldrb.w	r2, [r6, #67]	; 0x43
 8007df8:	4918      	ldr	r1, [pc, #96]	; (8007e5c <ES_WIFI_ActivateAP+0xc8>)
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f01b fe14 	bl	8023a28 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007e00:	462a      	mov	r2, r5
 8007e02:	4629      	mov	r1, r5
 8007e04:	4620      	mov	r0, r4
 8007e06:	f7ff fab9 	bl	800737c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d1d2      	bne.n	8007db6 <ES_WIFI_ActivateAP+0x22>
          sprintf((char*)Obj->CmdData,"AT=%d\r", ApConfig->MaxConnections);
 8007e10:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
 8007e14:	4912      	ldr	r1, [pc, #72]	; (8007e60 <ES_WIFI_ActivateAP+0xcc>)
 8007e16:	4628      	mov	r0, r5
 8007e18:	f01b fe06 	bl	8023a28 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007e1c:	462a      	mov	r2, r5
 8007e1e:	4629      	mov	r1, r5
 8007e20:	4620      	mov	r0, r4
 8007e22:	f7ff faab 	bl	800737c <AT_ExecuteCommand>
          if(ret == ES_WIFI_STATUS_OK)
 8007e26:	4607      	mov	r7, r0
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d1c4      	bne.n	8007db6 <ES_WIFI_ActivateAP+0x22>
            sprintf((char*)Obj->CmdData,"A0\r");
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <ES_WIFI_ActivateAP+0xd0>)
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007e34:	462a      	mov	r2, r5
 8007e36:	4629      	mov	r1, r5
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7ff fa9f 	bl	800737c <AT_ExecuteCommand>
            if(ret == ES_WIFI_STATUS_OK)
 8007e3e:	4607      	mov	r7, r0
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d1b8      	bne.n	8007db6 <ES_WIFI_ActivateAP+0x22>
              if(strstr((char *)Obj->CmdData, "[AP     ]"))
 8007e44:	4908      	ldr	r1, [pc, #32]	; (8007e68 <ES_WIFI_ActivateAP+0xd4>)
 8007e46:	4628      	mov	r0, r5
 8007e48:	f01b fe78 	bl	8023b3c <strstr>
 8007e4c:	e7b3      	b.n	8007db6 <ES_WIFI_ActivateAP+0x22>
 8007e4e:	bf00      	nop
 8007e50:	080260bc 	.word	0x080260bc
 8007e54:	080260c8 	.word	0x080260c8
 8007e58:	080260d0 	.word	0x080260d0
 8007e5c:	080260d8 	.word	0x080260d8
 8007e60:	080260e0 	.word	0x080260e0
 8007e64:	080260e8 	.word	0x080260e8
 8007e68:	080260ec 	.word	0x080260ec

08007e6c <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	4604      	mov	r4, r0
 8007e72:	460d      	mov	r5, r1
  ES_WIFI_Status_t ret ;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8007e74:	f500 7194 	add.w	r1, r0, #296	; 0x128
 8007e78:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <ES_WIFI_GetMACAddress+0x3c>)
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007e80:	460a      	mov	r2, r1
 8007e82:	4620      	mov	r0, r4
 8007e84:	f7ff fa7a 	bl	800737c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8007e88:	4606      	mov	r6, r0
 8007e8a:	b110      	cbz	r0, 8007e92 <ES_WIFI_GetMACAddress+0x26>
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
    ParseMAC(ptr, mac) ;
  }
  UNLOCK_WIFI();
  return ret;
}
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	b002      	add	sp, #8
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)(Obj->CmdData + 2), "\r\n",&saveptr);
 8007e92:	aa01      	add	r2, sp, #4
 8007e94:	4905      	ldr	r1, [pc, #20]	; (8007eac <ES_WIFI_GetMACAddress+0x40>)
 8007e96:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8007e9a:	f01b fe8d 	bl	8023bb8 <strtok_r>
    ParseMAC(ptr, mac) ;
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	f7ff fa21 	bl	80072e6 <ParseMAC>
 8007ea4:	e7f2      	b.n	8007e8c <ES_WIFI_GetMACAddress+0x20>
 8007ea6:	bf00      	nop
 8007ea8:	080260f8 	.word	0x080260f8
 8007eac:	080260fc 	.word	0x080260fc

08007eb0 <ES_WIFI_Ping>:
  * @param  Obj: pointer to module handle
  * @param  Ping: ping structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Ping(ES_WIFIObject_t *Obj, uint8_t *address, uint16_t count, uint16_t interval_ms, int32_t result[])
{
 8007eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	460c      	mov	r4, r1
 8007eba:	4617      	mov	r7, r2
 8007ebc:	4698      	mov	r8, r3
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  memset(result,-1,sizeof(int)*count);
 8007ebe:	0092      	lsls	r2, r2, #2
 8007ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ec4:	9808      	ldr	r0, [sp, #32]
 8007ec6:	f01b f91b 	bl	8023100 <memset>
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 8007eca:	f505 7694 	add.w	r6, r5, #296	; 0x128
          address[2],address[3]);
 8007ece:	78a3      	ldrb	r3, [r4, #2]
 8007ed0:	78e2      	ldrb	r2, [r4, #3]
  sprintf((char*)Obj->CmdData,"T1=%d.%d.%d.%d\r", address[0],address[1],
 8007ed2:	9201      	str	r2, [sp, #4]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	7863      	ldrb	r3, [r4, #1]
 8007ed8:	7822      	ldrb	r2, [r4, #0]
 8007eda:	491f      	ldr	r1, [pc, #124]	; (8007f58 <ES_WIFI_Ping+0xa8>)
 8007edc:	4630      	mov	r0, r6
 8007ede:	f01b fda3 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f7ff fa48 	bl	800737c <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8007eec:	4604      	mov	r4, r0
 8007eee:	b118      	cbz	r0, 8007ef8 <ES_WIFI_Ping+0x48>
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	b002      	add	sp, #8
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"T2=%d\r", count);
 8007ef8:	463a      	mov	r2, r7
 8007efa:	4918      	ldr	r1, [pc, #96]	; (8007f5c <ES_WIFI_Ping+0xac>)
 8007efc:	4630      	mov	r0, r6
 8007efe:	f01b fd93 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007f02:	4632      	mov	r2, r6
 8007f04:	4631      	mov	r1, r6
 8007f06:	4628      	mov	r0, r5
 8007f08:	f7ff fa38 	bl	800737c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d1ee      	bne.n	8007ef0 <ES_WIFI_Ping+0x40>
      sprintf((char*)Obj->CmdData,"T3=%d\r", interval_ms);
 8007f12:	4642      	mov	r2, r8
 8007f14:	4912      	ldr	r1, [pc, #72]	; (8007f60 <ES_WIFI_Ping+0xb0>)
 8007f16:	4630      	mov	r0, r6
 8007f18:	f01b fd86 	bl	8023a28 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4631      	mov	r1, r6
 8007f20:	4628      	mov	r0, r5
 8007f22:	f7ff fa2b 	bl	800737c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8007f26:	4604      	mov	r4, r0
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d1e1      	bne.n	8007ef0 <ES_WIFI_Ping+0x40>
        sprintf((char*)Obj->CmdData,"T0=\r");
 8007f2c:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <ES_WIFI_Ping+0xb4>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8007f34:	791b      	ldrb	r3, [r3, #4]
 8007f36:	f885 312c 	strb.w	r3, [r5, #300]	; 0x12c
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007f3a:	4632      	mov	r2, r6
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f7ff fa1c 	bl	800737c <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8007f44:	4604      	mov	r4, r0
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d1d2      	bne.n	8007ef0 <ES_WIFI_Ping+0x40>
         AT_ParsePing(result,count,(char*)Obj->CmdData);
 8007f4a:	4632      	mov	r2, r6
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	9808      	ldr	r0, [sp, #32]
 8007f50:	f7ff fb02 	bl	8007558 <AT_ParsePing>
 8007f54:	e7cc      	b.n	8007ef0 <ES_WIFI_Ping+0x40>
 8007f56:	bf00      	nop
 8007f58:	08026100 	.word	0x08026100
 8007f5c:	08026110 	.word	0x08026110
 8007f60:	08026118 	.word	0x08026118
 8007f64:	08026120 	.word	0x08026120

08007f68 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	4616      	mov	r6, r2
  ES_WIFI_Status_t ret;
  char *ptr;
  char *saveptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8007f70:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8007f74:	460a      	mov	r2, r1
 8007f76:	490c      	ldr	r1, [pc, #48]	; (8007fa8 <ES_WIFI_DNS_LookUp+0x40>)
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f01b fd55 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007f7e:	462a      	mov	r2, r5
 8007f80:	4629      	mov	r1, r5
 8007f82:	4620      	mov	r0, r4
 8007f84:	f7ff f9fa 	bl	800737c <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8007f88:	4605      	mov	r5, r0
 8007f8a:	b110      	cbz	r0, 8007f92 <ES_WIFI_DNS_LookUp+0x2a>
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
    ParseIP(ptr, ipaddress);
  }
  UNLOCK_WIFI();
  return ret;
}
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	b002      	add	sp, #8
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
    ptr = strtok_r((char *)Obj->CmdData + 2, "\r",&saveptr);
 8007f92:	aa01      	add	r2, sp, #4
 8007f94:	4905      	ldr	r1, [pc, #20]	; (8007fac <ES_WIFI_DNS_LookUp+0x44>)
 8007f96:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8007f9a:	f01b fe0d 	bl	8023bb8 <strtok_r>
    ParseIP(ptr, ipaddress);
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	f7ff f9bd 	bl	800731e <ParseIP>
 8007fa4:	e7f2      	b.n	8007f8c <ES_WIFI_DNS_LookUp+0x24>
 8007fa6:	bf00      	nop
 8007fa8:	08026128 	.word	0x08026128
 8007fac:	080261e8 	.word	0x080261e8

08007fb0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460e      	mov	r6, r1
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8007fb8:	780b      	ldrb	r3, [r1, #0]
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	bf18      	it	ne
 8007fbe:	2b00      	cmpne	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <ES_WIFI_StartClientConnection+0x18>
 8007fc2:	888b      	ldrh	r3, [r1, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d079      	beq.n	80080bc <ES_WIFI_StartClientConnection+0x10c>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8007fc8:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8007fcc:	78b2      	ldrb	r2, [r6, #2]
 8007fce:	493c      	ldr	r1, [pc, #240]	; (80080c0 <ES_WIFI_StartClientConnection+0x110>)
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f01b fd29 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f7ff f9ce 	bl	800737c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8007fe0:	b1c0      	cbz	r0, 8008014 <ES_WIFI_StartClientConnection+0x64>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 8007fe2:	b310      	cbz	r0, 800802a <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8007fe4:	b920      	cbnz	r0, 8007ff0 <ES_WIFI_StartClientConnection+0x40>
 8007fe6:	7833      	ldrb	r3, [r6, #0]
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	bf18      	it	ne
 8007fec:	2b00      	cmpne	r3, #0
 8007fee:	d027      	beq.n	8008040 <ES_WIFI_StartClientConnection+0x90>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8007ff0:	b920      	cbnz	r0, 8007ffc <ES_WIFI_StartClientConnection+0x4c>
 8007ff2:	7833      	ldrb	r3, [r6, #0]
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	bf18      	it	ne
 8007ff8:	2b00      	cmpne	r3, #0
 8007ffa:	d02c      	beq.n	8008056 <ES_WIFI_StartClientConnection+0xa6>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8007ffc:	b910      	cbnz	r0, 8008004 <ES_WIFI_StartClientConnection+0x54>
 8007ffe:	7833      	ldrb	r3, [r6, #0]
 8008000:	2b03      	cmp	r3, #3
 8008002:	d038      	beq.n	8008076 <ES_WIFI_StartClientConnection+0xc6>
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8008004:	b910      	cbnz	r0, 800800c <ES_WIFI_StartClientConnection+0x5c>
 8008006:	7833      	ldrb	r3, [r6, #0]
 8008008:	2b03      	cmp	r3, #3
 800800a:	d03f      	beq.n	800808c <ES_WIFI_StartClientConnection+0xdc>
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 800800c:	2800      	cmp	r0, #0
 800800e:	d049      	beq.n	80080a4 <ES_WIFI_StartClientConnection+0xf4>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8008010:	b002      	add	sp, #8
 8008012:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8008014:	7832      	ldrb	r2, [r6, #0]
 8008016:	492b      	ldr	r1, [pc, #172]	; (80080c4 <ES_WIFI_StartClientConnection+0x114>)
 8008018:	4620      	mov	r0, r4
 800801a:	f01b fd05 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800801e:	4622      	mov	r2, r4
 8008020:	4621      	mov	r1, r4
 8008022:	4628      	mov	r0, r5
 8008024:	f7ff f9aa 	bl	800737c <AT_ExecuteCommand>
 8008028:	e7db      	b.n	8007fe2 <ES_WIFI_StartClientConnection+0x32>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800802a:	88f2      	ldrh	r2, [r6, #6]
 800802c:	4926      	ldr	r1, [pc, #152]	; (80080c8 <ES_WIFI_StartClientConnection+0x118>)
 800802e:	4620      	mov	r0, r4
 8008030:	f01b fcfa 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008034:	4622      	mov	r2, r4
 8008036:	4621      	mov	r1, r4
 8008038:	4628      	mov	r0, r5
 800803a:	f7ff f99f 	bl	800737c <AT_ExecuteCommand>
 800803e:	e7d1      	b.n	8007fe4 <ES_WIFI_StartClientConnection+0x34>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8008040:	88b2      	ldrh	r2, [r6, #4]
 8008042:	4922      	ldr	r1, [pc, #136]	; (80080cc <ES_WIFI_StartClientConnection+0x11c>)
 8008044:	4620      	mov	r0, r4
 8008046:	f01b fcef 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800804a:	4622      	mov	r2, r4
 800804c:	4621      	mov	r1, r4
 800804e:	4628      	mov	r0, r5
 8008050:	f7ff f994 	bl	800737c <AT_ExecuteCommand>
 8008054:	e7cc      	b.n	8007ff0 <ES_WIFI_StartClientConnection+0x40>
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8008056:	7ab3      	ldrb	r3, [r6, #10]
 8008058:	7af2      	ldrb	r2, [r6, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800805a:	9201      	str	r2, [sp, #4]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	7a73      	ldrb	r3, [r6, #9]
 8008060:	7a32      	ldrb	r2, [r6, #8]
 8008062:	491b      	ldr	r1, [pc, #108]	; (80080d0 <ES_WIFI_StartClientConnection+0x120>)
 8008064:	4620      	mov	r0, r4
 8008066:	f01b fcdf 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800806a:	4622      	mov	r2, r4
 800806c:	4621      	mov	r1, r4
 800806e:	4628      	mov	r0, r5
 8008070:	f7ff f984 	bl	800737c <AT_ExecuteCommand>
 8008074:	e7c2      	b.n	8007ffc <ES_WIFI_StartClientConnection+0x4c>
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 8008076:	7872      	ldrb	r2, [r6, #1]
 8008078:	4916      	ldr	r1, [pc, #88]	; (80080d4 <ES_WIFI_StartClientConnection+0x124>)
 800807a:	4620      	mov	r0, r4
 800807c:	f01b fcd4 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008080:	4622      	mov	r2, r4
 8008082:	4621      	mov	r1, r4
 8008084:	4628      	mov	r0, r5
 8008086:	f7ff f979 	bl	800737c <AT_ExecuteCommand>
 800808a:	e7bb      	b.n	8008004 <ES_WIFI_StartClientConnection+0x54>
    sprintf((char*)Obj->CmdData,"PB=0\r");
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <ES_WIFI_StartClientConnection+0x128>)
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 8008094:	889b      	ldrh	r3, [r3, #4]
 8008096:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008098:	4622      	mov	r2, r4
 800809a:	4621      	mov	r1, r4
 800809c:	4628      	mov	r0, r5
 800809e:	f7ff f96d 	bl	800737c <AT_ExecuteCommand>
 80080a2:	e7b3      	b.n	800800c <ES_WIFI_StartClientConnection+0x5c>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80080a4:	4b0d      	ldr	r3, [pc, #52]	; (80080dc <ES_WIFI_StartClientConnection+0x12c>)
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80080ac:	889b      	ldrh	r3, [r3, #4]
 80080ae:	80a3      	strh	r3, [r4, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080b0:	4622      	mov	r2, r4
 80080b2:	4621      	mov	r1, r4
 80080b4:	4628      	mov	r0, r5
 80080b6:	f7ff f961 	bl	800737c <AT_ExecuteCommand>
 80080ba:	e7a9      	b.n	8008010 <ES_WIFI_StartClientConnection+0x60>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80080bc:	2002      	movs	r0, #2
 80080be:	e7a7      	b.n	8008010 <ES_WIFI_StartClientConnection+0x60>
 80080c0:	08026130 	.word	0x08026130
 80080c4:	08026138 	.word	0x08026138
 80080c8:	08026140 	.word	0x08026140
 80080cc:	08026148 	.word	0x08026148
 80080d0:	08026150 	.word	0x08026150
 80080d4:	08026160 	.word	0x08026160
 80080d8:	08026168 	.word	0x08026168
 80080dc:	08026170 	.word	0x08026170

080080e0 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4604      	mov	r4, r0
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80080e4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80080e8:	788a      	ldrb	r2, [r1, #2]
 80080ea:	490c      	ldr	r1, [pc, #48]	; (800811c <ES_WIFI_StopClientConnection+0x3c>)
 80080ec:	4628      	mov	r0, r5
 80080ee:	f01b fc9b 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080f2:	462a      	mov	r2, r5
 80080f4:	4629      	mov	r1, r5
 80080f6:	4620      	mov	r0, r4
 80080f8:	f7ff f940 	bl	800737c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80080fc:	b100      	cbz	r0, 8008100 <ES_WIFI_StopClientConnection+0x20>
    sprintf((char*)Obj->CmdData,"P6=0\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  UNLOCK_WIFI();
  return ret;
}
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8008100:	4b07      	ldr	r3, [pc, #28]	; (8008120 <ES_WIFI_StopClientConnection+0x40>)
 8008102:	6818      	ldr	r0, [r3, #0]
 8008104:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8008108:	889b      	ldrh	r3, [r3, #4]
 800810a:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800810e:	462a      	mov	r2, r5
 8008110:	4629      	mov	r1, r5
 8008112:	4620      	mov	r0, r4
 8008114:	f7ff f932 	bl	800737c <AT_ExecuteCommand>
 8008118:	e7f1      	b.n	80080fe <ES_WIFI_StopClientConnection+0x1e>
 800811a:	bf00      	nop
 800811c:	08026130 	.word	0x08026130
 8008120:	08026178 	.word	0x08026178

08008124 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	4605      	mov	r5, r0
 8008128:	460e      	mov	r6, r1
#if (ES_WIFI_USE_UART == 1)
  char *saveptr;
#endif
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800812a:	f500 7494 	add.w	r4, r0, #296	; 0x128
 800812e:	788a      	ldrb	r2, [r1, #2]
 8008130:	492c      	ldr	r1, [pc, #176]	; (80081e4 <ES_WIFI_StartServerSingleConn+0xc0>)
 8008132:	4620      	mov	r0, r4
 8008134:	f01b fc78 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008138:	4622      	mov	r2, r4
 800813a:	4621      	mov	r1, r4
 800813c:	4628      	mov	r0, r5
 800813e:	f7ff f91d 	bl	800737c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8008142:	4602      	mov	r2, r0
 8008144:	b928      	cbnz	r0, 8008152 <ES_WIFI_StartServerSingleConn+0x2e>
  {
    UNLOCK_WIFI();
    return ret;
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8008146:	7833      	ldrb	r3, [r6, #0]
 8008148:	3b01      	subs	r3, #1
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b01      	cmp	r3, #1
 800814e:	d802      	bhi.n	8008156 <ES_WIFI_StartServerSingleConn+0x32>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008150:	b18a      	cbz	r2, 8008176 <ES_WIFI_StartServerSingleConn+0x52>
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
}
 8008152:	4610      	mov	r0, r2
 8008154:	bd70      	pop	{r4, r5, r6, pc}
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8008156:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <ES_WIFI_StartServerSingleConn+0xc4>)
 8008158:	cb03      	ldmia	r3!, {r0, r1}
 800815a:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 800815e:	6061      	str	r1, [r4, #4]
 8008160:	881a      	ldrh	r2, [r3, #0]
 8008162:	789b      	ldrb	r3, [r3, #2]
 8008164:	8122      	strh	r2, [r4, #8]
 8008166:	72a3      	strb	r3, [r4, #10]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008168:	4622      	mov	r2, r4
 800816a:	4621      	mov	r1, r4
 800816c:	4628      	mov	r0, r5
 800816e:	f7ff f905 	bl	800737c <AT_ExecuteCommand>
 8008172:	4602      	mov	r2, r0
 8008174:	e7ec      	b.n	8008150 <ES_WIFI_StartServerSingleConn+0x2c>
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8008176:	7832      	ldrb	r2, [r6, #0]
 8008178:	491c      	ldr	r1, [pc, #112]	; (80081ec <ES_WIFI_StartServerSingleConn+0xc8>)
 800817a:	4620      	mov	r0, r4
 800817c:	f01b fc54 	bl	8023a28 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008180:	4622      	mov	r2, r4
 8008182:	4621      	mov	r1, r4
 8008184:	4628      	mov	r0, r5
 8008186:	f7ff f8f9 	bl	800737c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 800818a:	4602      	mov	r2, r0
 800818c:	2800      	cmp	r0, #0
 800818e:	d1e0      	bne.n	8008152 <ES_WIFI_StartServerSingleConn+0x2e>
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8008190:	7c32      	ldrb	r2, [r6, #16]
 8008192:	4917      	ldr	r1, [pc, #92]	; (80081f0 <ES_WIFI_StartServerSingleConn+0xcc>)
 8008194:	4620      	mov	r0, r4
 8008196:	f01b fc47 	bl	8023a28 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800819a:	4622      	mov	r2, r4
 800819c:	4621      	mov	r1, r4
 800819e:	4628      	mov	r0, r5
 80081a0:	f7ff f8ec 	bl	800737c <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 80081a4:	4602      	mov	r2, r0
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d1d3      	bne.n	8008152 <ES_WIFI_StartServerSingleConn+0x2e>
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80081aa:	88f2      	ldrh	r2, [r6, #6]
 80081ac:	4911      	ldr	r1, [pc, #68]	; (80081f4 <ES_WIFI_StartServerSingleConn+0xd0>)
 80081ae:	4620      	mov	r0, r4
 80081b0:	f01b fc3a 	bl	8023a28 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081b4:	4622      	mov	r2, r4
 80081b6:	4621      	mov	r1, r4
 80081b8:	4628      	mov	r0, r5
 80081ba:	f7ff f8df 	bl	800737c <AT_ExecuteCommand>
          if (ret == ES_WIFI_STATUS_OK)
 80081be:	4602      	mov	r2, r0
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d1c6      	bne.n	8008152 <ES_WIFI_StartServerSingleConn+0x2e>
            sprintf((char*)Obj->CmdData,"P5=11\r");
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <ES_WIFI_StartServerSingleConn+0xd4>)
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
 80081cc:	889a      	ldrh	r2, [r3, #4]
 80081ce:	799b      	ldrb	r3, [r3, #6]
 80081d0:	80a2      	strh	r2, [r4, #4]
 80081d2:	71a3      	strb	r3, [r4, #6]
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081d4:	4622      	mov	r2, r4
 80081d6:	4621      	mov	r1, r4
 80081d8:	4628      	mov	r0, r5
 80081da:	f7ff f8cf 	bl	800737c <AT_ExecuteCommand>
 80081de:	4602      	mov	r2, r0
 80081e0:	e7b7      	b.n	8008152 <ES_WIFI_StartServerSingleConn+0x2e>
 80081e2:	bf00      	nop
 80081e4:	08026130 	.word	0x08026130
 80081e8:	08026180 	.word	0x08026180
 80081ec:	08026138 	.word	0x08026138
 80081f0:	0802618c 	.word	0x0802618c
 80081f4:	08026140 	.word	0x08026140
 80081f8:	08026194 	.word	0x08026194

080081fc <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	b083      	sub	sp, #12
 8008202:	4605      	mov	r5, r0
 8008204:	460f      	mov	r7, r1
 8008206:	4692      	mov	sl, r2
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;
  char          *saveptr;

  tstart=HAL_GetTick();
 8008208:	f002 f88a 	bl	800a320 <HAL_GetTick>
 800820c:	4680      	mov	r8, r0
  tlast=tstart+timeout;
  if (tlast < tstart )
 800820e:	eb10 0907 	adds.w	r9, r0, r7
 8008212:	d301      	bcc.n	8008218 <ES_WIFI_WaitServerConnection+0x1c>
  {
	   tstart=0;
 8008214:	f04f 0800 	mov.w	r8, #0
 8008218:	2600      	movs	r6, #0
 800821a:	e02d      	b.n	8008278 <ES_WIFI_WaitServerConnection+0x7c>
        if(strstr((char *)Obj->CmdData, "Accepted"))
        {
         //printf("SOMA Accepted\n");
         accepted=true;// flushing out the MR messages
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 800821c:	4946      	ldr	r1, [pc, #280]	; (8008338 <ES_WIFI_WaitServerConnection+0x13c>)
 800821e:	4620      	mov	r0, r4
 8008220:	f01b fc8c 	bl	8023b3c <strstr>
 8008224:	2800      	cmp	r0, #0
 8008226:	f000 8081 	beq.w	800832c <ES_WIFI_WaitServerConnection+0x130>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 800822a:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800822e:	2100      	movs	r1, #0
 8008230:	4620      	mov	r0, r4
 8008232:	f01a ff65 	bl	8023100 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 8008236:	4b41      	ldr	r3, [pc, #260]	; (800833c <ES_WIFI_WaitServerConnection+0x140>)
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800823e:	4622      	mov	r2, r4
 8008240:	4621      	mov	r1, r4
 8008242:	4628      	mov	r0, r5
 8008244:	f7ff f89a 	bl	800737c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8008248:	4683      	mov	fp, r0
 800824a:	2800      	cmp	r0, #0
 800824c:	d171      	bne.n	8008332 <ES_WIFI_WaitServerConnection+0x136>
    {
      if(accepted && (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0))
 800824e:	b136      	cbz	r6, 800825e <ES_WIFI_WaitServerConnection+0x62>
 8008250:	220c      	movs	r2, #12
 8008252:	493b      	ldr	r1, [pc, #236]	; (8008340 <ES_WIFI_WaitServerConnection+0x144>)
 8008254:	4620      	mov	r0, r4
 8008256:	f01b fc4a 	bl	8023aee <strncmp>
 800825a:	2800      	cmp	r0, #0
 800825c:	d133      	bne.n	80082c6 <ES_WIFI_WaitServerConnection+0xca>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 800825e:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
 8008262:	2064      	movs	r0, #100	; 0x64
 8008264:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 8008266:	f002 f85b 	bl	800a320 <HAL_GetTick>
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 800826a:	b12f      	cbz	r7, 8008278 <ES_WIFI_WaitServerConnection+0x7c>
 800826c:	464b      	mov	r3, r9
 800826e:	45c1      	cmp	r9, r8
 8008270:	bf38      	it	cc
 8008272:	4643      	movcc	r3, r8
 8008274:	4283      	cmp	r3, r0
 8008276:	d950      	bls.n	800831a <ES_WIFI_WaitServerConnection+0x11e>
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8008278:	f505 7494 	add.w	r4, r5, #296	; 0x128
 800827c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8008280:	2100      	movs	r1, #0
 8008282:	4620      	mov	r0, r4
 8008284:	f01a ff3c 	bl	8023100 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8008288:	4b2e      	ldr	r3, [pc, #184]	; (8008344 <ES_WIFI_WaitServerConnection+0x148>)
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008290:	4622      	mov	r2, r4
 8008292:	4621      	mov	r1, r4
 8008294:	4628      	mov	r0, r5
 8008296:	f7ff f871 	bl	800737c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800829a:	2800      	cmp	r0, #0
 800829c:	d140      	bne.n	8008320 <ES_WIFI_WaitServerConnection+0x124>
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 800829e:	492a      	ldr	r1, [pc, #168]	; (8008348 <ES_WIFI_WaitServerConnection+0x14c>)
 80082a0:	4620      	mov	r0, r4
 80082a2:	f01b fc4b 	bl	8023b3c <strstr>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d0bf      	beq.n	800822a <ES_WIFI_WaitServerConnection+0x2e>
 80082aa:	4928      	ldr	r1, [pc, #160]	; (800834c <ES_WIFI_WaitServerConnection+0x150>)
 80082ac:	4620      	mov	r0, r4
 80082ae:	f01b fc45 	bl	8023b3c <strstr>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d0b9      	beq.n	800822a <ES_WIFI_WaitServerConnection+0x2e>
        if(strstr((char *)Obj->CmdData, "Accepted"))
 80082b6:	4926      	ldr	r1, [pc, #152]	; (8008350 <ES_WIFI_WaitServerConnection+0x154>)
 80082b8:	4620      	mov	r0, r4
 80082ba:	f01b fc3f 	bl	8023b3c <strstr>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d0ac      	beq.n	800821c <ES_WIFI_WaitServerConnection+0x20>
         accepted=true;// flushing out the MR messages
 80082c2:	2601      	movs	r6, #1
 80082c4:	e7b1      	b.n	800822a <ES_WIFI_WaitServerConnection+0x2e>
        ptr = strtok_r((char *)Obj->CmdData + 2, ",",&saveptr);
 80082c6:	4c23      	ldr	r4, [pc, #140]	; (8008354 <ES_WIFI_WaitServerConnection+0x158>)
 80082c8:	aa01      	add	r2, sp, #4
 80082ca:	4621      	mov	r1, r4
 80082cc:	f505 7095 	add.w	r0, r5, #298	; 0x12a
 80082d0:	f01b fc72 	bl	8023bb8 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //port
 80082d4:	aa01      	add	r2, sp, #4
 80082d6:	4621      	mov	r1, r4
 80082d8:	2000      	movs	r0, #0
 80082da:	f01b fc6d 	bl	8023bb8 <strtok_r>
        ParseIP((char *)ptr, conn->RemoteIP);
 80082de:	f10a 0108 	add.w	r1, sl, #8
 80082e2:	f7ff f81c 	bl	800731e <ParseIP>
        ptr = strtok_r(0, ",",&saveptr); //port
 80082e6:	aa01      	add	r2, sp, #4
 80082e8:	4621      	mov	r1, r4
 80082ea:	2000      	movs	r0, #0
 80082ec:	f01b fc64 	bl	8023bb8 <strtok_r>
        conn->LocalPort=ParseNumber(ptr,0);
 80082f0:	2100      	movs	r1, #0
 80082f2:	f7fe ffd2 	bl	800729a <ParseNumber>
 80082f6:	f8aa 0006 	strh.w	r0, [sl, #6]
        ptr = strtok_r(0, ",",&saveptr); //ip
 80082fa:	aa01      	add	r2, sp, #4
 80082fc:	4621      	mov	r1, r4
 80082fe:	2000      	movs	r0, #0
 8008300:	f01b fc5a 	bl	8023bb8 <strtok_r>
        ptr = strtok_r(0, ",",&saveptr); //remote port
 8008304:	aa01      	add	r2, sp, #4
 8008306:	4621      	mov	r1, r4
 8008308:	2000      	movs	r0, #0
 800830a:	f01b fc55 	bl	8023bb8 <strtok_r>
        conn->RemotePort=ParseNumber(ptr,0);
 800830e:	2100      	movs	r1, #0
 8008310:	f7fe ffc3 	bl	800729a <ParseNumber>
 8008314:	f8aa 0004 	strh.w	r0, [sl, #4]
        return ES_WIFI_STATUS_OK;
 8008318:	e004      	b.n	8008324 <ES_WIFI_WaitServerConnection+0x128>
  return ES_WIFI_STATUS_TIMEOUT;
 800831a:	f04f 0b03 	mov.w	fp, #3
 800831e:	e001      	b.n	8008324 <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 8008320:	f04f 0b02 	mov.w	fp, #2
}
 8008324:	4658      	mov	r0, fp
 8008326:	b003      	add	sp, #12
 8008328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          return ES_WIFI_STATUS_ERROR;
 800832c:	f04f 0b02 	mov.w	fp, #2
 8008330:	e7f8      	b.n	8008324 <ES_WIFI_WaitServerConnection+0x128>
      return ES_WIFI_STATUS_ERROR;
 8008332:	f04f 0b02 	mov.w	fp, #2
 8008336:	e7f5      	b.n	8008324 <ES_WIFI_WaitServerConnection+0x128>
 8008338:	080261b8 	.word	0x080261b8
 800833c:	080261c8 	.word	0x080261c8
 8008340:	080261cc 	.word	0x080261cc
 8008344:	0802608c 	.word	0x0802608c
 8008348:	0802619c 	.word	0x0802619c
 800834c:	080261a4 	.word	0x080261a4
 8008350:	080261ac 	.word	0x080261ac
 8008354:	08026070 	.word	0x08026070

08008358 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4604      	mov	r4, r0
 800835c:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800835e:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008362:	490d      	ldr	r1, [pc, #52]	; (8008398 <ES_WIFI_CloseServerConnection+0x40>)
 8008364:	4628      	mov	r0, r5
 8008366:	f01b fb5f 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800836a:	462a      	mov	r2, r5
 800836c:	4629      	mov	r1, r5
 800836e:	4620      	mov	r0, r4
 8008370:	f7ff f804 	bl	800737c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 8008374:	b100      	cbz	r0, 8008378 <ES_WIFI_CloseServerConnection+0x20>
    DEBUGW(" Open next failed %s\n", Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8008376:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=10\r");
 8008378:	4b08      	ldr	r3, [pc, #32]	; (800839c <ES_WIFI_CloseServerConnection+0x44>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8008380:	889a      	ldrh	r2, [r3, #4]
 8008382:	799b      	ldrb	r3, [r3, #6]
 8008384:	f8a4 212c 	strh.w	r2, [r4, #300]	; 0x12c
 8008388:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800838c:	462a      	mov	r2, r5
 800838e:	4629      	mov	r1, r5
 8008390:	4620      	mov	r0, r4
 8008392:	f7fe fff3 	bl	800737c <AT_ExecuteCommand>
  return ret;
 8008396:	e7ee      	b.n	8008376 <ES_WIFI_CloseServerConnection+0x1e>
 8008398:	08026130 	.word	0x08026130
 800839c:	080261dc 	.word	0x080261dc

080083a0 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4604      	mov	r4, r0
 80083a4:	460a      	mov	r2, r1
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 80083a6:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80083aa:	490c      	ldr	r1, [pc, #48]	; (80083dc <ES_WIFI_StopServerSingleConn+0x3c>)
 80083ac:	4628      	mov	r0, r5
 80083ae:	f01b fb3b 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083b2:	462a      	mov	r2, r5
 80083b4:	4629      	mov	r1, r5
 80083b6:	4620      	mov	r0, r4
 80083b8:	f7fe ffe0 	bl	800737c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 80083bc:	b100      	cbz	r0, 80083c0 <ES_WIFI_StopServerSingleConn+0x20>
    return ret;
  }

  UNLOCK_WIFI();
  return ret;
}
 80083be:	bd38      	pop	{r3, r4, r5, pc}
  sprintf((char*)Obj->CmdData,"P5=0\r");
 80083c0:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <ES_WIFI_StopServerSingleConn+0x40>)
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 80083c8:	889b      	ldrh	r3, [r3, #4]
 80083ca:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083ce:	462a      	mov	r2, r5
 80083d0:	4629      	mov	r1, r5
 80083d2:	4620      	mov	r0, r4
 80083d4:	f7fe ffd2 	bl	800737c <AT_ExecuteCommand>
  if(ret != ES_WIFI_STATUS_OK)
 80083d8:	e7f1      	b.n	80083be <ES_WIFI_StopServerSingleConn+0x1e>
 80083da:	bf00      	nop
 80083dc:	08026130 	.word	0x08026130
 80083e0:	080261e4 	.word	0x080261e4

080083e4 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80083e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	4605      	mov	r5, r0
 80083ec:	4690      	mov	r8, r2
 80083ee:	461c      	mov	r4, r3
 80083f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80083f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 80083f8:	f1b9 0f00 	cmp.w	r9, #0
 80083fc:	d101      	bne.n	8008402 <ES_WIFI_SendData+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80083fe:	f04f 0901 	mov.w	r9, #1
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8008402:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 8008406:	d301      	bcc.n	800840c <ES_WIFI_SendData+0x28>
 8008408:	f44f 6496 	mov.w	r4, #1200	; 0x4b0

  *SentLen = Reqlen;
 800840c:	f8aa 4000 	strh.w	r4, [sl]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008410:	f505 7694 	add.w	r6, r5, #296	; 0x128
 8008414:	460a      	mov	r2, r1
 8008416:	491c      	ldr	r1, [pc, #112]	; (8008488 <ES_WIFI_SendData+0xa4>)
 8008418:	4630      	mov	r0, r6
 800841a:	f01b fb05 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800841e:	4632      	mov	r2, r6
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	f7fe ffaa 	bl	800737c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008428:	4607      	mov	r7, r0
 800842a:	b128      	cbz	r0, 8008438 <ES_WIFI_SendData+0x54>
  else
  {
   DEBUGW("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800842c:	2f02      	cmp	r7, #2
 800842e:	d026      	beq.n	800847e <ES_WIFI_SendData+0x9a>
  {
    *SentLen = 0;
  }
  UNLOCK_WIFI();
  return ret;
}
 8008430:	4638      	mov	r0, r7
 8008432:	b002      	add	sp, #8
 8008434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8008438:	464a      	mov	r2, r9
 800843a:	4914      	ldr	r1, [pc, #80]	; (800848c <ES_WIFI_SendData+0xa8>)
 800843c:	4630      	mov	r0, r6
 800843e:	f01b faf3 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008442:	4632      	mov	r2, r6
 8008444:	4631      	mov	r1, r6
 8008446:	4628      	mov	r0, r5
 8008448:	f7fe ff98 	bl	800737c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 800844c:	4607      	mov	r7, r0
 800844e:	2800      	cmp	r0, #0
 8008450:	d1ec      	bne.n	800842c <ES_WIFI_SendData+0x48>
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8008452:	4622      	mov	r2, r4
 8008454:	490e      	ldr	r1, [pc, #56]	; (8008490 <ES_WIFI_SendData+0xac>)
 8008456:	4630      	mov	r0, r6
 8008458:	f01b fae6 	bl	8023a28 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800845c:	9600      	str	r6, [sp, #0]
 800845e:	4623      	mov	r3, r4
 8008460:	4642      	mov	r2, r8
 8008462:	4631      	mov	r1, r6
 8008464:	4628      	mov	r0, r5
 8008466:	f7ff f803 	bl	8007470 <AT_RequestSendData>
      if(ret == ES_WIFI_STATUS_OK)
 800846a:	4607      	mov	r7, r0
 800846c:	2800      	cmp	r0, #0
 800846e:	d1dd      	bne.n	800842c <ES_WIFI_SendData+0x48>
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8008470:	4908      	ldr	r1, [pc, #32]	; (8008494 <ES_WIFI_SendData+0xb0>)
 8008472:	4630      	mov	r0, r6
 8008474:	f01b fb62 	bl	8023b3c <strstr>
 8008478:	2800      	cmp	r0, #0
 800847a:	d0d7      	beq.n	800842c <ES_WIFI_SendData+0x48>
          ret = ES_WIFI_STATUS_ERROR;
 800847c:	2702      	movs	r7, #2
    *SentLen = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	f8aa 3000 	strh.w	r3, [sl]
 8008484:	e7d4      	b.n	8008430 <ES_WIFI_SendData+0x4c>
 8008486:	bf00      	nop
 8008488:	08026130 	.word	0x08026130
 800848c:	080261ec 	.word	0x080261ec
 8008490:	080261f4 	.word	0x080261f4
 8008494:	08026200 	.word	0x08026200

08008498 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 8008498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	4606      	mov	r6, r0
 80084a0:	4690      	mov	r8, r2
 80084a2:	461f      	mov	r7, r3
 80084a4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80084a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 80084ac:	f1b9 0f00 	cmp.w	r9, #0
 80084b0:	d101      	bne.n	80084b6 <ES_WIFI_SendDataTo+0x1e>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80084b2:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80084b6:	f506 7594 	add.w	r5, r6, #296	; 0x128
 80084ba:	460a      	mov	r2, r1
 80084bc:	493d      	ldr	r1, [pc, #244]	; (80085b4 <ES_WIFI_SendDataTo+0x11c>)
 80084be:	4628      	mov	r0, r5
 80084c0:	f01b fab2 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084c4:	462a      	mov	r2, r5
 80084c6:	4629      	mov	r1, r5
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7fe ff57 	bl	800737c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80084ce:	4604      	mov	r4, r0
 80084d0:	b300      	cbz	r0, 8008514 <ES_WIFI_SendDataTo+0x7c>
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 80084d2:	b364      	cbz	r4, 800852e <ES_WIFI_SendDataTo+0x96>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 80084d4:	2c00      	cmp	r4, #0
 80084d6:	d037      	beq.n	8008548 <ES_WIFI_SendDataTo+0xb0>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if (ret == ES_WIFI_STATUS_OK)
 80084d8:	b924      	cbnz	r4, 80084e4 <ES_WIFI_SendDataTo+0x4c>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 80084da:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
 80084de:	d301      	bcc.n	80084e4 <ES_WIFI_SendDataTo+0x4c>
    {
      Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80084e0:	f44f 6796 	mov.w	r7, #1200	; 0x4b0
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
 80084e4:	2c00      	cmp	r4, #0
 80084e6:	d044      	beq.n	8008572 <ES_WIFI_SendDataTo+0xda>
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 80084e8:	2c00      	cmp	r4, #0
 80084ea:	d04e      	beq.n	800858a <ES_WIFI_SendDataTo+0xf2>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
  }

  if(ret == ES_WIFI_STATUS_OK)
 80084ec:	2c00      	cmp	r4, #0
 80084ee:	d15a      	bne.n	80085a6 <ES_WIFI_SendDataTo+0x10e>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 80084f0:	4931      	ldr	r1, [pc, #196]	; (80085b8 <ES_WIFI_SendDataTo+0x120>)
 80084f2:	4628      	mov	r0, r5
 80084f4:	f01b fb22 	bl	8023b3c <strstr>
    if(ptr != NULL)
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d054      	beq.n	80085a6 <ES_WIFI_SendDataTo+0x10e>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 80084fc:	f506 66d4 	add.w	r6, r6, #1696	; 0x6a0
 8008500:	4286      	cmp	r6, r0
 8008502:	d855      	bhi.n	80085b0 <ES_WIFI_SendDataTo+0x118>
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 8008504:	2404      	movs	r4, #4
    *SentLen = Reqlen;
  }
  else
  {
    DEBUGW("Send error:\n%s\n", Obj->CmdData);
    *SentLen = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800850a:	8013      	strh	r3, [r2, #0]
  }

  UNLOCK_WIFI();
  return ret;
}
 800850c:	4620      	mov	r0, r4
 800850e:	b002      	add	sp, #8
 8008510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 8008514:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 8008518:	4928      	ldr	r1, [pc, #160]	; (80085bc <ES_WIFI_SendDataTo+0x124>)
 800851a:	4628      	mov	r0, r5
 800851c:	f01b fa84 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008520:	462a      	mov	r2, r5
 8008522:	4629      	mov	r1, r5
 8008524:	4630      	mov	r0, r6
 8008526:	f7fe ff29 	bl	800737c <AT_ExecuteCommand>
 800852a:	4604      	mov	r4, r0
 800852c:	e7d1      	b.n	80084d2 <ES_WIFI_SendDataTo+0x3a>
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 800852e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8008532:	4923      	ldr	r1, [pc, #140]	; (80085c0 <ES_WIFI_SendDataTo+0x128>)
 8008534:	4628      	mov	r0, r5
 8008536:	f01b fa77 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800853a:	462a      	mov	r2, r5
 800853c:	4629      	mov	r1, r5
 800853e:	4630      	mov	r0, r6
 8008540:	f7fe ff1c 	bl	800737c <AT_ExecuteCommand>
 8008544:	4604      	mov	r4, r0
 8008546:	e7c5      	b.n	80084d4 <ES_WIFI_SendDataTo+0x3c>
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 8008548:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800854c:	f89a 2003 	ldrb.w	r2, [sl, #3]
 8008550:	9201      	str	r2, [sp, #4]
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008558:	f89a 2000 	ldrb.w	r2, [sl]
 800855c:	4919      	ldr	r1, [pc, #100]	; (80085c4 <ES_WIFI_SendDataTo+0x12c>)
 800855e:	4628      	mov	r0, r5
 8008560:	f01b fa62 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008564:	462a      	mov	r2, r5
 8008566:	4629      	mov	r1, r5
 8008568:	4630      	mov	r0, r6
 800856a:	f7fe ff07 	bl	800737c <AT_ExecuteCommand>
 800856e:	4604      	mov	r4, r0
 8008570:	e7b2      	b.n	80084d8 <ES_WIFI_SendDataTo+0x40>
    sprintf((char*)Obj->CmdData, "S2=%lu\r", wkgTimeOut);
 8008572:	464a      	mov	r2, r9
 8008574:	4914      	ldr	r1, [pc, #80]	; (80085c8 <ES_WIFI_SendDataTo+0x130>)
 8008576:	4628      	mov	r0, r5
 8008578:	f01b fa56 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800857c:	462a      	mov	r2, r5
 800857e:	4629      	mov	r1, r5
 8008580:	4630      	mov	r0, r6
 8008582:	f7fe fefb 	bl	800737c <AT_ExecuteCommand>
 8008586:	4604      	mov	r4, r0
 8008588:	e7ae      	b.n	80084e8 <ES_WIFI_SendDataTo+0x50>
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 800858a:	463a      	mov	r2, r7
 800858c:	490f      	ldr	r1, [pc, #60]	; (80085cc <ES_WIFI_SendDataTo+0x134>)
 800858e:	4628      	mov	r0, r5
 8008590:	f01b fa4a 	bl	8023a28 <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8008594:	9500      	str	r5, [sp, #0]
 8008596:	463b      	mov	r3, r7
 8008598:	4642      	mov	r2, r8
 800859a:	4629      	mov	r1, r5
 800859c:	4630      	mov	r0, r6
 800859e:	f7fe ff67 	bl	8007470 <AT_RequestSendData>
 80085a2:	4604      	mov	r4, r0
 80085a4:	e7a2      	b.n	80084ec <ES_WIFI_SendDataTo+0x54>
  if (ret == ES_WIFI_STATUS_OK)
 80085a6:	2c00      	cmp	r4, #0
 80085a8:	d1ad      	bne.n	8008506 <ES_WIFI_SendDataTo+0x6e>
    *SentLen = Reqlen;
 80085aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ac:	801f      	strh	r7, [r3, #0]
 80085ae:	e7ad      	b.n	800850c <ES_WIFI_SendDataTo+0x74>
        ret = ES_WIFI_STATUS_ERROR;
 80085b0:	2402      	movs	r4, #2
 80085b2:	e7a8      	b.n	8008506 <ES_WIFI_SendDataTo+0x6e>
 80085b4:	08026130 	.word	0x08026130
 80085b8:	08026200 	.word	0x08026200
 80085bc:	08026140 	.word	0x08026140
 80085c0:	08026148 	.word	0x08026148
 80085c4:	08026150 	.word	0x08026150
 80085c8:	080261ec 	.word	0x080261ec
 80085cc:	080261f4 	.word	0x080261f4

080085d0 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80085d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	4604      	mov	r4, r0
 80085d8:	4690      	mov	r8, r2
 80085da:	461d      	mov	r5, r3
 80085dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  if (Timeout == 0)
 80085de:	b906      	cbnz	r6, 80085e2 <ES_WIFI_ReceiveData+0x12>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80085e0:	2601      	movs	r6, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80085e2:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80085e6:	d903      	bls.n	80085f0 <ES_WIFI_ReceiveData+0x20>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80085e8:	2002      	movs	r0, #2
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80085ea:	b002      	add	sp, #8
 80085ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80085f0:	f504 7794 	add.w	r7, r4, #296	; 0x128
 80085f4:	460a      	mov	r2, r1
 80085f6:	491b      	ldr	r1, [pc, #108]	; (8008664 <ES_WIFI_ReceiveData+0x94>)
 80085f8:	4638      	mov	r0, r7
 80085fa:	f01b fa15 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085fe:	463a      	mov	r2, r7
 8008600:	4639      	mov	r1, r7
 8008602:	4620      	mov	r0, r4
 8008604:	f7fe feba 	bl	800737c <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8008608:	b120      	cbz	r0, 8008614 <ES_WIFI_ReceiveData+0x44>
      issue15++;
 800860a:	4a17      	ldr	r2, [pc, #92]	; (8008668 <ES_WIFI_ReceiveData+0x98>)
 800860c:	6813      	ldr	r3, [r2, #0]
 800860e:	3301      	adds	r3, #1
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	e7ea      	b.n	80085ea <ES_WIFI_ReceiveData+0x1a>
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8008614:	462a      	mov	r2, r5
 8008616:	4915      	ldr	r1, [pc, #84]	; (800866c <ES_WIFI_ReceiveData+0x9c>)
 8008618:	4638      	mov	r0, r7
 800861a:	f01b fa05 	bl	8023a28 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800861e:	463a      	mov	r2, r7
 8008620:	4639      	mov	r1, r7
 8008622:	4620      	mov	r0, r4
 8008624:	f7fe feaa 	bl	800737c <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8008628:	b118      	cbz	r0, 8008632 <ES_WIFI_ReceiveData+0x62>
        *Receivedlen = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	9a08      	ldr	r2, [sp, #32]
 800862e:	8013      	strh	r3, [r2, #0]
 8008630:	e7db      	b.n	80085ea <ES_WIFI_ReceiveData+0x1a>
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8008632:	4632      	mov	r2, r6
 8008634:	490e      	ldr	r1, [pc, #56]	; (8008670 <ES_WIFI_ReceiveData+0xa0>)
 8008636:	4638      	mov	r0, r7
 8008638:	f01b f9f6 	bl	8023a28 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800863c:	463a      	mov	r2, r7
 800863e:	4639      	mov	r1, r7
 8008640:	4620      	mov	r0, r4
 8008642:	f7fe fe9b 	bl	800737c <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8008646:	2800      	cmp	r0, #0
 8008648:	d1cf      	bne.n	80085ea <ES_WIFI_ReceiveData+0x1a>
          sprintf((char*)Obj->CmdData,"R0\r");
 800864a:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <ES_WIFI_ReceiveData+0xa4>)
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008652:	9b08      	ldr	r3, [sp, #32]
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	462b      	mov	r3, r5
 8008658:	4642      	mov	r2, r8
 800865a:	4639      	mov	r1, r7
 800865c:	4620      	mov	r0, r4
 800865e:	f7ff f9d1 	bl	8007a04 <AT_RequestReceiveData>
            DEBUGW("AT_RequestReceiveData  failed\n");
 8008662:	e7c2      	b.n	80085ea <ES_WIFI_ReceiveData+0x1a>
 8008664:	08026130 	.word	0x08026130
 8008668:	24005a70 	.word	0x24005a70
 800866c:	08026208 	.word	0x08026208
 8008670:	08026210 	.word	0x08026210
 8008674:	08026218 	.word	0x08026218

08008678 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 8008678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800867c:	b088      	sub	sp, #32
 800867e:	4605      	mov	r5, r0
 8008680:	4690      	mov	r8, r2
 8008682:	461e      	mov	r6, r3
 8008684:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008686:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	803b      	strh	r3, [r7, #0]


  if (Timeout == 0)
 800868e:	f1b9 0f00 	cmp.w	r9, #0
 8008692:	d101      	bne.n	8008698 <ES_WIFI_ReceiveDataFrom+0x20>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8008694:	f04f 0901 	mov.w	r9, #1
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8008698:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 800869c:	d90f      	bls.n	80086be <ES_WIFI_ReceiveDataFrom+0x46>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800869e:	2402      	movs	r4, #2
  else
  {
    DEBUGW("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 80086a0:	b344      	cbz	r4, 80086f4 <ES_WIFI_ReceiveDataFrom+0x7c>
  else
  {
    DEBUGW("R1 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 80086a2:	b3ac      	cbz	r4, 8008710 <ES_WIFI_ReceiveDataFrom+0x98>
  else
  {
    DEBUGW("R2 failed.\n");
  }

  if (ret == ES_WIFI_STATUS_OK)
 80086a4:	b924      	cbnz	r4, 80086b0 <ES_WIFI_ReceiveDataFrom+0x38>
  {
    if (*Receivedlen > Reqlen)
 80086a6:	883b      	ldrh	r3, [r7, #0]
 80086a8:	42b3      	cmp	r3, r6
 80086aa:	d85f      	bhi.n	800876c <ES_WIFI_ReceiveDataFrom+0xf4>
      DEBUGW("AT_RequestReceiveData overflow\n.");
      ret = ES_WIFI_STATUS_ERROR;
    }
    else
    {
      if (*Receivedlen > 0)
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d13d      	bne.n	800872c <ES_WIFI_ReceiveDataFrom+0xb4>
        }
      }
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
 80086b0:	b10c      	cbz	r4, 80086b6 <ES_WIFI_ReceiveDataFrom+0x3e>
  {
    DEBUGW("Read error:\n%s\n", Obj->CmdData);
    *Receivedlen = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	803b      	strh	r3, [r7, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 80086b6:	4620      	mov	r0, r4
 80086b8:	b008      	add	sp, #32
 80086ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 80086be:	f505 7a94 	add.w	sl, r5, #296	; 0x128
 80086c2:	460a      	mov	r2, r1
 80086c4:	492a      	ldr	r1, [pc, #168]	; (8008770 <ES_WIFI_ReceiveDataFrom+0xf8>)
 80086c6:	4650      	mov	r0, sl
 80086c8:	f01b f9ae 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086cc:	4652      	mov	r2, sl
 80086ce:	4651      	mov	r1, sl
 80086d0:	4628      	mov	r0, r5
 80086d2:	f7fe fe53 	bl	800737c <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80086d6:	4604      	mov	r4, r0
 80086d8:	2800      	cmp	r0, #0
 80086da:	d1e1      	bne.n	80086a0 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80086dc:	4632      	mov	r2, r6
 80086de:	4925      	ldr	r1, [pc, #148]	; (8008774 <ES_WIFI_ReceiveDataFrom+0xfc>)
 80086e0:	4650      	mov	r0, sl
 80086e2:	f01b f9a1 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086e6:	4652      	mov	r2, sl
 80086e8:	4651      	mov	r1, sl
 80086ea:	4628      	mov	r0, r5
 80086ec:	f7fe fe46 	bl	800737c <AT_ExecuteCommand>
 80086f0:	4604      	mov	r4, r0
 80086f2:	e7d5      	b.n	80086a0 <ES_WIFI_ReceiveDataFrom+0x28>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80086f4:	f505 7494 	add.w	r4, r5, #296	; 0x128
 80086f8:	464a      	mov	r2, r9
 80086fa:	491f      	ldr	r1, [pc, #124]	; (8008778 <ES_WIFI_ReceiveDataFrom+0x100>)
 80086fc:	4620      	mov	r0, r4
 80086fe:	f01b f993 	bl	8023a28 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008702:	4622      	mov	r2, r4
 8008704:	4621      	mov	r1, r4
 8008706:	4628      	mov	r0, r5
 8008708:	f7fe fe38 	bl	800737c <AT_ExecuteCommand>
 800870c:	4604      	mov	r4, r0
 800870e:	e7c8      	b.n	80086a2 <ES_WIFI_ReceiveDataFrom+0x2a>
    sprintf((char*)Obj->CmdData,"R0\r");
 8008710:	4b1a      	ldr	r3, [pc, #104]	; (800877c <ES_WIFI_ReceiveDataFrom+0x104>)
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008718:	9700      	str	r7, [sp, #0]
 800871a:	4633      	mov	r3, r6
 800871c:	4642      	mov	r2, r8
 800871e:	f505 7194 	add.w	r1, r5, #296	; 0x128
 8008722:	4628      	mov	r0, r5
 8008724:	f7ff f96e 	bl	8007a04 <AT_RequestReceiveData>
 8008728:	4604      	mov	r4, r0
 800872a:	e7bb      	b.n	80086a4 <ES_WIFI_ReceiveDataFrom+0x2c>
        sprintf((char*)Obj->CmdData,"P?\r");
 800872c:	f505 7694 	add.w	r6, r5, #296	; 0x128
 8008730:	4b13      	ldr	r3, [pc, #76]	; (8008780 <ES_WIFI_ReceiveDataFrom+0x108>)
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	f8c5 0128 	str.w	r0, [r5, #296]	; 0x128
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008738:	4632      	mov	r2, r6
 800873a:	4631      	mov	r1, r6
 800873c:	4628      	mov	r0, r5
 800873e:	f7fe fe1d 	bl	800737c <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8008742:	4604      	mov	r4, r0
 8008744:	2800      	cmp	r0, #0
 8008746:	d1b3      	bne.n	80086b0 <ES_WIFI_ReceiveDataFrom+0x38>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 8008748:	2300      	movs	r3, #0
 800874a:	9303      	str	r3, [sp, #12]
 800874c:	9304      	str	r3, [sp, #16]
 800874e:	9305      	str	r3, [sp, #20]
 8008750:	9306      	str	r3, [sp, #24]
 8008752:	9307      	str	r3, [sp, #28]
          AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 8008754:	a903      	add	r1, sp, #12
 8008756:	4630      	mov	r0, r6
 8008758:	f7fe ff28 	bl	80075ac <AT_ParseTransportSettings>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 800875c:	9a05      	ldr	r2, [sp, #20]
 800875e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008760:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8008762:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8008766:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008768:	801a      	strh	r2, [r3, #0]
 800876a:	e7a1      	b.n	80086b0 <ES_WIFI_ReceiveDataFrom+0x38>
      ret = ES_WIFI_STATUS_ERROR;
 800876c:	2402      	movs	r4, #2
 800876e:	e7a0      	b.n	80086b2 <ES_WIFI_ReceiveDataFrom+0x3a>
 8008770:	08026130 	.word	0x08026130
 8008774:	08026208 	.word	0x08026208
 8008778:	08026210 	.word	0x08026210
 800877c:	08026218 	.word	0x08026218
 8008780:	080261c8 	.word	0x080261c8

08008784 <ES_WIFI_SockInfo>:

ES_WIFI_Status_t  ES_WIFI_SockInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 8008784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008788:	b086      	sub	sp, #24
 800878a:	4604      	mov	r4, r0
 800878c:	4690      	mov	r8, r2
 800878e:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8008790:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008794:	460a      	mov	r2, r1
 8008796:	4916      	ldr	r1, [pc, #88]	; (80087f0 <ES_WIFI_SockInfo+0x6c>)
 8008798:	4628      	mov	r0, r5
 800879a:	f01b f945 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800879e:	462a      	mov	r2, r5
 80087a0:	4629      	mov	r1, r5
 80087a2:	4620      	mov	r0, r4
 80087a4:	f7fe fdea 	bl	800737c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80087a8:	4606      	mov	r6, r0
 80087aa:	b118      	cbz	r0, 80087b4 <ES_WIFI_SockInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 80087ac:	4630      	mov	r0, r6
 80087ae:	b006      	add	sp, #24
 80087b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 80087b4:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <ES_WIFI_SockInfo+0x70>)
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087bc:	462a      	mov	r2, r5
 80087be:	4629      	mov	r1, r5
 80087c0:	4620      	mov	r0, r4
 80087c2:	f7fe fddb 	bl	800737c <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 80087c6:	4606      	mov	r6, r0
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d1ef      	bne.n	80087ac <ES_WIFI_SockInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 80087cc:	2300      	movs	r3, #0
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	9302      	str	r3, [sp, #8]
 80087d2:	9303      	str	r3, [sp, #12]
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 80087d8:	a901      	add	r1, sp, #4
 80087da:	4628      	mov	r0, r5
 80087dc:	f7fe fee6 	bl	80075ac <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Local_IP_Addr, 4);
 80087e0:	f8dd 3005 	ldr.w	r3, [sp, #5]
 80087e4:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Local_Port;
 80087e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80087ec:	803b      	strh	r3, [r7, #0]
 80087ee:	e7dd      	b.n	80087ac <ES_WIFI_SockInfo+0x28>
 80087f0:	08026130 	.word	0x08026130
 80087f4:	080261c8 	.word	0x080261c8

080087f8 <ES_WIFI_PeerInfo>:


ES_WIFI_Status_t  ES_WIFI_PeerInfo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *IPaddr, uint16_t *pPort)
{
 80087f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087fc:	b086      	sub	sp, #24
 80087fe:	4604      	mov	r4, r0
 8008800:	4690      	mov	r8, r2
 8008802:	461f      	mov	r7, r3

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8008804:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008808:	460a      	mov	r2, r1
 800880a:	4916      	ldr	r1, [pc, #88]	; (8008864 <ES_WIFI_PeerInfo+0x6c>)
 800880c:	4628      	mov	r0, r5
 800880e:	f01b f90b 	bl	8023a28 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008812:	462a      	mov	r2, r5
 8008814:	4629      	mov	r1, r5
 8008816:	4620      	mov	r0, r4
 8008818:	f7fe fdb0 	bl	800737c <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 800881c:	4606      	mov	r6, r0
 800881e:	b118      	cbz	r0, 8008828 <ES_WIFI_PeerInfo+0x30>
    }
  }

  UNLOCK_WIFI();
  return ret;
}
 8008820:	4630      	mov	r0, r6
 8008822:	b006      	add	sp, #24
 8008824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf((char*)Obj->CmdData,"P?\r");
 8008828:	4b0f      	ldr	r3, [pc, #60]	; (8008868 <ES_WIFI_PeerInfo+0x70>)
 800882a:	6818      	ldr	r0, [r3, #0]
 800882c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008830:	462a      	mov	r2, r5
 8008832:	4629      	mov	r1, r5
 8008834:	4620      	mov	r0, r4
 8008836:	f7fe fda1 	bl	800737c <AT_ExecuteCommand>
    if (ret == ES_WIFI_STATUS_OK)
 800883a:	4606      	mov	r6, r0
 800883c:	2800      	cmp	r0, #0
 800883e:	d1ef      	bne.n	8008820 <ES_WIFI_PeerInfo+0x28>
      memset(&TransportSettings, 0, sizeof(TransportSettings));
 8008840:	2300      	movs	r3, #0
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	9302      	str	r3, [sp, #8]
 8008846:	9303      	str	r3, [sp, #12]
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	9305      	str	r3, [sp, #20]
      AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 800884c:	a901      	add	r1, sp, #4
 800884e:	4628      	mov	r0, r5
 8008850:	f7fe feac 	bl	80075ac <AT_ParseTransportSettings>
      memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8008854:	9b03      	ldr	r3, [sp, #12]
 8008856:	f8c8 3000 	str.w	r3, [r8]
      *pPort = TransportSettings.Remote_Port;
 800885a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800885e:	803b      	strh	r3, [r7, #0]
 8008860:	e7de      	b.n	8008820 <ES_WIFI_PeerInfo+0x28>
 8008862:	bf00      	nop
 8008864:	08026130 	.word	0x08026130
 8008868:	080261c8 	.word	0x080261c8

0800886c <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800886c:	2301      	movs	r3, #1
 800886e:	700b      	strb	r3, [r1, #0]
  Capabilities->Gesture    = 1;
 8008870:	704b      	strb	r3, [r1, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8008872:	2305      	movs	r3, #5
 8008874:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8008876:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800887a:	604b      	str	r3, [r1, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800887c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008880:	608b      	str	r3, [r1, #8]

  return FT5336_OK;
}
 8008882:	2000      	movs	r0, #0
 8008884:	4770      	bx	lr

08008886 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8008886:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800888a:	2b01      	cmp	r3, #1
 800888c:	d001      	beq.n	8008892 <FT5336_DeInit+0xc>
  {
    pObj->IsInitialized = 0;
  }

  return ret;
}
 800888e:	2000      	movs	r0, #0
 8008890:	4770      	bx	lr
    pObj->IsInitialized = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8008898:	e7f9      	b.n	800888e <FT5336_DeInit+0x8>

0800889a <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 800889a:	2000      	movs	r0, #0
 800889c:	4770      	bx	lr

0800889e <FT5336_ClearIT>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 800889e:	2000      	movs	r0, #0
 80088a0:	4770      	bx	lr

080088a2 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80088a2:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80088a4:	6904      	ldr	r4, [r0, #16]
 80088a6:	8900      	ldrh	r0, [r0, #8]
 80088a8:	47a0      	blx	r4
}
 80088aa:	bd10      	pop	{r4, pc}

080088ac <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80088ac:	b510      	push	{r4, lr}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80088ae:	68c4      	ldr	r4, [r0, #12]
 80088b0:	8900      	ldrh	r0, [r0, #8]
 80088b2:	47a0      	blx	r4
}
 80088b4:	bd10      	pop	{r4, pc}

080088b6 <FT5336_GestureConfig>:
{
 80088b6:	b570      	push	{r4, r5, r6, lr}
 80088b8:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80088ba:	f100 0518 	add.w	r5, r0, #24
 80088be:	7809      	ldrb	r1, [r1, #0]
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 f91d 	bl	8008b00 <ft5336_radian_value>
 80088c6:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80088c8:	7931      	ldrb	r1, [r6, #4]
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 f925 	bl	8008b1a <ft5336_offset_left_right>
 80088d0:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80088d2:	7a31      	ldrb	r1, [r6, #8]
 80088d4:	4628      	mov	r0, r5
 80088d6:	f000 f92d 	bl	8008b34 <ft5336_offset_up_down>
 80088da:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80088dc:	7b31      	ldrb	r1, [r6, #12]
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 f935 	bl	8008b4e <ft5336_disatnce_left_right>
 80088e4:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80088e6:	7c31      	ldrb	r1, [r6, #16]
 80088e8:	4628      	mov	r0, r5
 80088ea:	f000 f93d 	bl	8008b68 <ft5336_distance_up_down>
 80088ee:	4404      	add	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80088f0:	7d31      	ldrb	r1, [r6, #20]
 80088f2:	4628      	mov	r0, r5
 80088f4:	f000 f945 	bl	8008b82 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 80088f8:	1820      	adds	r0, r4, r0
 80088fa:	d100      	bne.n	80088fe <FT5336_GestureConfig+0x48>
}
 80088fc:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 80088fe:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008902:	e7fb      	b.n	80088fc <FT5336_GestureConfig+0x46>

08008904 <FT5336_ReadID>:
{
 8008904:	b508      	push	{r3, lr}
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8008906:	3018      	adds	r0, #24
 8008908:	f000 f955 	bl	8008bb6 <ft5336_chip_id>
}
 800890c:	bd08      	pop	{r3, pc}

0800890e <FT5336_DetectTouch>:
{
 800890e:	b500      	push	{lr}
 8008910:	b083      	sub	sp, #12
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8008912:	f10d 0107 	add.w	r1, sp, #7
 8008916:	3018      	adds	r0, #24
 8008918:	f000 f8e5 	bl	8008ae6 <ft5336_td_status>
 800891c:	b938      	cbnz	r0, 800892e <FT5336_DetectTouch+0x20>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800891e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008922:	2b05      	cmp	r3, #5
 8008924:	d800      	bhi.n	8008928 <FT5336_DetectTouch+0x1a>
      ret = (int32_t)nb_touch;
 8008926:	4618      	mov	r0, r3
}
 8008928:	b003      	add	sp, #12
 800892a:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = FT5336_ERROR;
 800892e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008932:	e7f9      	b.n	8008928 <FT5336_DetectTouch+0x1a>

08008934 <FT5336_GetState>:
{
 8008934:	b530      	push	{r4, r5, lr}
 8008936:	b083      	sub	sp, #12
 8008938:	4605      	mov	r5, r0
 800893a:	460c      	mov	r4, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800893c:	f7ff ffe7 	bl	800890e <FT5336_DetectTouch>
 8008940:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008942:	2304      	movs	r3, #4
 8008944:	eb0d 0203 	add.w	r2, sp, r3
 8008948:	2103      	movs	r1, #3
 800894a:	f105 0018 	add.w	r0, r5, #24
 800894e:	f000 f8b9 	bl	8008ac4 <ft5336_read_reg>
 8008952:	b998      	cbnz	r0, 800897c <FT5336_GetState+0x48>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8008954:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008958:	021b      	lsls	r3, r3, #8
 800895a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800895e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008962:	4313      	orrs	r3, r2
 8008964:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8008966:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008970:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008974:	4313      	orrs	r3, r2
 8008976:	60a3      	str	r3, [r4, #8]
}
 8008978:	b003      	add	sp, #12
 800897a:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008980:	e7fa      	b.n	8008978 <FT5336_GetState+0x44>

08008982 <FT5336_GetMultiTouchState>:
{
 8008982:	b530      	push	{r4, r5, lr}
 8008984:	b089      	sub	sp, #36	; 0x24
 8008986:	4604      	mov	r4, r0
 8008988:	460d      	mov	r5, r1
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800898a:	f7ff ffc0 	bl	800890e <FT5336_DetectTouch>
 800898e:	6028      	str	r0, [r5, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008990:	231e      	movs	r3, #30
 8008992:	466a      	mov	r2, sp
 8008994:	2103      	movs	r1, #3
 8008996:	f104 0018 	add.w	r0, r4, #24
 800899a:	f000 f893 	bl	8008ac4 <ft5336_read_reg>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d146      	bne.n	8008a30 <FT5336_GetMultiTouchState+0xae>
 80089a2:	4603      	mov	r3, r0
 80089a4:	e040      	b.n	8008a28 <FT5336_GetMultiTouchState+0xa6>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80089a6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80089aa:	004a      	lsls	r2, r1, #1
 80089ac:	ac08      	add	r4, sp, #32
 80089ae:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80089b2:	f811 cc20 	ldrb.w	ip, [r1, #-32]
 80089b6:	ea4f 210c 	mov.w	r1, ip, lsl #8
 80089ba:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80089be:	f102 0421 	add.w	r4, r2, #33	; 0x21
 80089c2:	446c      	add	r4, sp
 80089c4:	f814 4c20 	ldrb.w	r4, [r4, #-32]
 80089c8:	4321      	orrs	r1, r4
 80089ca:	eb05 0483 	add.w	r4, r5, r3, lsl #2
 80089ce:	6061      	str	r1, [r4, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80089d0:	f102 0122 	add.w	r1, r2, #34	; 0x22
 80089d4:	4469      	add	r1, sp
 80089d6:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 80089da:	0224      	lsls	r4, r4, #8
 80089dc:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
 80089e0:	f102 0123 	add.w	r1, r2, #35	; 0x23
 80089e4:	4469      	add	r1, sp
 80089e6:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80089ea:	430c      	orrs	r4, r1
 80089ec:	1d99      	adds	r1, r3, #6
 80089ee:	f845 4021 	str.w	r4, [r5, r1, lsl #2]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80089f2:	ea4f 119c 	mov.w	r1, ip, lsr #6
 80089f6:	f103 0410 	add.w	r4, r3, #16
 80089fa:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80089fe:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8008a02:	4469      	add	r1, sp
 8008a04:	f811 4c20 	ldrb.w	r4, [r1, #-32]
 8008a08:	f103 010a 	add.w	r1, r3, #10
 8008a0c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8008a10:	604c      	str	r4, [r1, #4]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8008a12:	3225      	adds	r2, #37	; 0x25
 8008a14:	446a      	add	r2, sp
 8008a16:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8008a1a:	0909      	lsrs	r1, r1, #4
 8008a1c:	f103 0214 	add.w	r2, r3, #20
 8008a20:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8008a24:	6051      	str	r1, [r2, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8008a26:	3301      	adds	r3, #1
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d9bc      	bls.n	80089a6 <FT5336_GetMultiTouchState+0x24>
}
 8008a2c:	b009      	add	sp, #36	; 0x24
 8008a2e:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008a34:	e7fa      	b.n	8008a2c <FT5336_GetMultiTouchState+0xaa>

08008a36 <FT5336_GetGesture>:
{
 8008a36:	b508      	push	{r3, lr}
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8008a38:	3018      	adds	r0, #24
 8008a3a:	f000 f84d 	bl	8008ad8 <ft5336_gest_id>
}
 8008a3e:	bd08      	pop	{r3, pc}

08008a40 <FT5336_EnableIT>:
{
 8008a40:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8008a42:	2101      	movs	r1, #1
 8008a44:	3018      	adds	r0, #24
 8008a46:	f000 f8a9 	bl	8008b9c <ft5336_g_mode>
}
 8008a4a:	bd08      	pop	{r3, pc}

08008a4c <FT5336_DisableIT>:
{
 8008a4c:	b508      	push	{r3, lr}
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8008a4e:	2100      	movs	r1, #0
 8008a50:	3018      	adds	r0, #24
 8008a52:	f000 f8a3 	bl	8008b9c <ft5336_g_mode>
}
 8008a56:	bd08      	pop	{r3, pc}

08008a58 <FT5336_Init>:
  if(pObj->IsInitialized == 0U)
 8008a58:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008a5c:	b95b      	cbnz	r3, 8008a76 <FT5336_Init+0x1e>
{
 8008a5e:	b510      	push	{r4, lr}
 8008a60:	4604      	mov	r4, r0
    pObj->IO.Init();
 8008a62:	6803      	ldr	r3, [r0, #0]
 8008a64:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7ff fff0 	bl	8008a4c <FT5336_DisableIT>
    pObj->IsInitialized = 1;
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 8008a72:	b910      	cbnz	r0, 8008a7a <FT5336_Init+0x22>
}
 8008a74:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 8008a76:	2000      	movs	r0, #0
}
 8008a78:	4770      	bx	lr
    ret = FT5336_ERROR;
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008a7e:	e7f9      	b.n	8008a74 <FT5336_Init+0x1c>

08008a80 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8008a80:	b1a8      	cbz	r0, 8008aae <FT5336_RegisterBusIO+0x2e>
{
 8008a82:	b508      	push	{r3, lr}
 8008a84:	4603      	mov	r3, r0
    pObj->IO.Init      = pIO->Init;
 8008a86:	680a      	ldr	r2, [r1, #0]
 8008a88:	6002      	str	r2, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008a8a:	6848      	ldr	r0, [r1, #4]
 8008a8c:	6058      	str	r0, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8008a8e:	8908      	ldrh	r0, [r1, #8]
 8008a90:	8118      	strh	r0, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008a92:	68c8      	ldr	r0, [r1, #12]
 8008a94:	60d8      	str	r0, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008a96:	6908      	ldr	r0, [r1, #16]
 8008a98:	6118      	str	r0, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8008a9a:	6949      	ldr	r1, [r1, #20]
 8008a9c:	6159      	str	r1, [r3, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8008a9e:	4907      	ldr	r1, [pc, #28]	; (8008abc <FT5336_RegisterBusIO+0x3c>)
 8008aa0:	61d9      	str	r1, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8008aa2:	4907      	ldr	r1, [pc, #28]	; (8008ac0 <FT5336_RegisterBusIO+0x40>)
 8008aa4:	6199      	str	r1, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8008aa6:	621b      	str	r3, [r3, #32]
    if(pObj->IO.Init != NULL)
 8008aa8:	b122      	cbz	r2, 8008ab4 <FT5336_RegisterBusIO+0x34>
      ret = pObj->IO.Init();
 8008aaa:	4790      	blx	r2
}
 8008aac:	bd08      	pop	{r3, pc}
    ret = FT5336_ERROR;
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ab2:	4770      	bx	lr
      ret = FT5336_ERROR;
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008ab8:	e7f8      	b.n	8008aac <FT5336_RegisterBusIO+0x2c>
 8008aba:	bf00      	nop
 8008abc:	080088a3 	.word	0x080088a3
 8008ac0:	080088ad 	.word	0x080088ad

08008ac4 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8008ac4:	b510      	push	{r4, lr}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008ac6:	6844      	ldr	r4, [r0, #4]
 8008ac8:	6880      	ldr	r0, [r0, #8]
 8008aca:	47a0      	blx	r4
}
 8008acc:	bd10      	pop	{r4, pc}

08008ace <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8008ace:	b510      	push	{r4, lr}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8008ad0:	6804      	ldr	r4, [r0, #0]
 8008ad2:	6880      	ldr	r0, [r0, #8]
 8008ad4:	47a0      	blx	r4
}
 8008ad6:	bd10      	pop	{r4, pc}

08008ad8 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008ad8:	b508      	push	{r3, lr}
 8008ada:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8008adc:	2301      	movs	r3, #1
 8008ade:	4619      	mov	r1, r3
 8008ae0:	f7ff fff0 	bl	8008ac4 <ft5336_read_reg>
}
 8008ae4:	bd08      	pop	{r3, pc}

08008ae6 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008ae6:	b510      	push	{r4, lr}
 8008ae8:	460c      	mov	r4, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8008aea:	2301      	movs	r3, #1
 8008aec:	460a      	mov	r2, r1
 8008aee:	2102      	movs	r1, #2
 8008af0:	f7ff ffe8 	bl	8008ac4 <ft5336_read_reg>
  
  if(ret == 0)
 8008af4:	b918      	cbnz	r0, 8008afe <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8008af6:	7823      	ldrb	r3, [r4, #0]
 8008af8:	f003 030f 	and.w	r3, r3, #15
 8008afc:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8008afe:	bd10      	pop	{r4, pc}

08008b00 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8008b00:	b500      	push	{lr}
 8008b02:	b083      	sub	sp, #12
 8008b04:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f10d 0207 	add.w	r2, sp, #7
 8008b0e:	2191      	movs	r1, #145	; 0x91
 8008b10:	f7ff ffdd 	bl	8008ace <ft5336_write_reg>
}
 8008b14:	b003      	add	sp, #12
 8008b16:	f85d fb04 	ldr.w	pc, [sp], #4

08008b1a <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008b1a:	b500      	push	{lr}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8008b22:	2301      	movs	r3, #1
 8008b24:	f10d 0207 	add.w	r2, sp, #7
 8008b28:	2192      	movs	r1, #146	; 0x92
 8008b2a:	f7ff ffd0 	bl	8008ace <ft5336_write_reg>
}
 8008b2e:	b003      	add	sp, #12
 8008b30:	f85d fb04 	ldr.w	pc, [sp], #4

08008b34 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008b34:	b500      	push	{lr}
 8008b36:	b083      	sub	sp, #12
 8008b38:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	f10d 0207 	add.w	r2, sp, #7
 8008b42:	2193      	movs	r1, #147	; 0x93
 8008b44:	f7ff ffc3 	bl	8008ace <ft5336_write_reg>
}
 8008b48:	b003      	add	sp, #12
 8008b4a:	f85d fb04 	ldr.w	pc, [sp], #4

08008b4e <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008b4e:	b500      	push	{lr}
 8008b50:	b083      	sub	sp, #12
 8008b52:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8008b56:	2301      	movs	r3, #1
 8008b58:	f10d 0207 	add.w	r2, sp, #7
 8008b5c:	2194      	movs	r1, #148	; 0x94
 8008b5e:	f7ff ffb6 	bl	8008ace <ft5336_write_reg>
}
 8008b62:	b003      	add	sp, #12
 8008b64:	f85d fb04 	ldr.w	pc, [sp], #4

08008b68 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008b68:	b500      	push	{lr}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8008b70:	2301      	movs	r3, #1
 8008b72:	f10d 0207 	add.w	r2, sp, #7
 8008b76:	2195      	movs	r1, #149	; 0x95
 8008b78:	f7ff ffa9 	bl	8008ace <ft5336_write_reg>
}
 8008b7c:	b003      	add	sp, #12
 8008b7e:	f85d fb04 	ldr.w	pc, [sp], #4

08008b82 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8008b82:	b500      	push	{lr}
 8008b84:	b083      	sub	sp, #12
 8008b86:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f10d 0207 	add.w	r2, sp, #7
 8008b90:	2196      	movs	r1, #150	; 0x96
 8008b92:	f7ff ff9c 	bl	8008ace <ft5336_write_reg>
}
 8008b96:	b003      	add	sp, #12
 8008b98:	f85d fb04 	ldr.w	pc, [sp], #4

08008b9c <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8008b9c:	b500      	push	{lr}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	f10d 0207 	add.w	r2, sp, #7
 8008baa:	21a4      	movs	r1, #164	; 0xa4
 8008bac:	f7ff ff8f 	bl	8008ace <ft5336_write_reg>
}
 8008bb0:	b003      	add	sp, #12
 8008bb2:	f85d fb04 	ldr.w	pc, [sp], #4

08008bb6 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008bb6:	b508      	push	{r3, lr}
 8008bb8:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8008bba:	2301      	movs	r3, #1
 8008bbc:	21a8      	movs	r1, #168	; 0xa8
 8008bbe:	f7ff ff81 	bl	8008ac4 <ft5336_read_reg>
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
 8008bc2:	bd08      	pop	{r3, pc}

08008bc4 <MX25LM51245G_GetFlashInfo>:
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8008bc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008bc8:	6003      	str	r3, [r0, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8008bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bce:	6043      	str	r3, [r0, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8008bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bd4:	6083      	str	r3, [r0, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8008bd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008bda:	60c2      	str	r2, [r0, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8008bdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008be0:	6103      	str	r3, [r0, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8008be2:	6142      	str	r2, [r0, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8008be4:	6183      	str	r3, [r0, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8008be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bea:	61c3      	str	r3, [r0, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8008bec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008bf0:	6203      	str	r3, [r0, #32]

  return MX25LM51245G_OK;
};
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	4770      	bx	lr

08008bf6 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008bf6:	b570      	push	{r4, r5, r6, lr}
 8008bf8:	b09a      	sub	sp, #104	; 0x68
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 8008c00:	2250      	movs	r2, #80	; 0x50
 8008c02:	2100      	movs	r1, #0
 8008c04:	a806      	add	r0, sp, #24
 8008c06:	f01a fa7b 	bl	8023100 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	9302      	str	r3, [sp, #8]
 8008c10:	9303      	str	r3, [sp, #12]
 8008c12:	9304      	str	r3, [sp, #16]
 8008c14:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008c16:	429c      	cmp	r4, r3
 8008c18:	bf08      	it	eq
 8008c1a:	2d01      	cmpeq	r5, #1
 8008c1c:	d061      	beq.n	8008ce2 <MX25LM51245G_AutoPollingMemReady+0xec>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008c1e:	2c00      	cmp	r4, #0
 8008c20:	d143      	bne.n	8008caa <MX25LM51245G_AutoPollingMemReady+0xb4>
 8008c22:	2301      	movs	r3, #1
 8008c24:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008c26:	2d01      	cmp	r5, #1
 8008c28:	d041      	beq.n	8008cae <MX25LM51245G_AutoPollingMemReady+0xb8>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008c2e:	2c00      	cmp	r4, #0
 8008c30:	d13f      	bne.n	8008cb2 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8008c32:	2300      	movs	r3, #0
 8008c34:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8008c36:	2c00      	cmp	r4, #0
 8008c38:	d13d      	bne.n	8008cb6 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8008c3a:	2305      	movs	r3, #5
 8008c3c:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8008c3e:	2c00      	cmp	r4, #0
 8008c40:	d13c      	bne.n	8008cbc <MX25LM51245G_AutoPollingMemReady+0xc6>
 8008c42:	2300      	movs	r3, #0
 8008c44:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008c46:	2d01      	cmp	r5, #1
 8008c48:	d03b      	beq.n	8008cc2 <MX25LM51245G_AutoPollingMemReady+0xcc>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8008c4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008c52:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address            = 0U;
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008c54:	2c00      	cmp	r4, #0
 8008c56:	d137      	bne.n	8008cc8 <MX25LM51245G_AutoPollingMemReady+0xd2>
 8008c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c5c:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008c5e:	2d01      	cmp	r5, #1
 8008c60:	d035      	beq.n	8008cce <MX25LM51245G_AutoPollingMemReady+0xd8>
 8008c62:	2300      	movs	r3, #0
 8008c64:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008c66:	bbac      	cbnz	r4, 8008cd4 <MX25LM51245G_AutoPollingMemReady+0xde>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8008c6c:	2d01      	cmp	r5, #1
 8008c6e:	d033      	beq.n	8008cd8 <MX25LM51245G_AutoPollingMemReady+0xe2>
 8008c70:	2301      	movs	r3, #1
 8008c72:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8008c74:	2d01      	cmp	r5, #1
 8008c76:	d031      	beq.n	8008cdc <MX25LM51245G_AutoPollingMemReady+0xe6>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9318      	str	r3, [sp, #96]	; 0x60
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  s_config.Match         = 0U;
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	9302      	str	r3, [sp, #8]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8008c80:	2310      	movs	r3, #16
 8008c82:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8008c84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c88:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c8e:	a906      	add	r1, sp, #24
 8008c90:	4630      	mov	r0, r6
 8008c92:	f003 f8dd 	bl	800be50 <HAL_OSPI_Command>
 8008c96:	bb38      	cbnz	r0, 8008ce8 <MX25LM51245G_AutoPollingMemReady+0xf2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c9c:	a901      	add	r1, sp, #4
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f003 f9e7 	bl	800c072 <HAL_OSPI_AutoPolling>
 8008ca4:	bb18      	cbnz	r0, 8008cee <MX25LM51245G_AutoPollingMemReady+0xf8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8008ca6:	b01a      	add	sp, #104	; 0x68
 8008ca8:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008caa:	2304      	movs	r3, #4
 8008cac:	e7ba      	b.n	8008c24 <MX25LM51245G_AutoPollingMemReady+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008cae:	2308      	movs	r3, #8
 8008cb0:	e7bc      	b.n	8008c2c <MX25LM51245G_AutoPollingMemReady+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008cb2:	2310      	movs	r3, #16
 8008cb4:	e7be      	b.n	8008c34 <MX25LM51245G_AutoPollingMemReady+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8008cb6:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8008cba:	e7bf      	b.n	8008c3c <MX25LM51245G_AutoPollingMemReady+0x46>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8008cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc0:	e7c0      	b.n	8008c44 <MX25LM51245G_AutoPollingMemReady+0x4e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cc6:	e7c1      	b.n	8008c4c <MX25LM51245G_AutoPollingMemReady+0x56>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008cc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ccc:	e7c6      	b.n	8008c5c <MX25LM51245G_AutoPollingMemReady+0x66>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cd2:	e7c7      	b.n	8008c64 <MX25LM51245G_AutoPollingMemReady+0x6e>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008cd4:	2305      	movs	r3, #5
 8008cd6:	e7c8      	b.n	8008c6a <MX25LM51245G_AutoPollingMemReady+0x74>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e7ca      	b.n	8008c72 <MX25LM51245G_AutoPollingMemReady+0x7c>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8008cdc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008ce0:	e7cb      	b.n	8008c7a <MX25LM51245G_AutoPollingMemReady+0x84>
    return MX25LM51245G_ERROR;
 8008ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce6:	e7de      	b.n	8008ca6 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	e7db      	b.n	8008ca6 <MX25LM51245G_AutoPollingMemReady+0xb0>
    return MX25LM51245G_ERROR;
 8008cee:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf2:	e7d8      	b.n	8008ca6 <MX25LM51245G_AutoPollingMemReady+0xb0>

08008cf4 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	b096      	sub	sp, #88	; 0x58
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 8008cfe:	2250      	movs	r2, #80	; 0x50
 8008d00:	2100      	movs	r1, #0
 8008d02:	a802      	add	r0, sp, #8
 8008d04:	f01a f9fc 	bl	8023100 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8008d08:	2300      	movs	r3, #0
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	9301      	str	r3, [sp, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8008d0e:	2c01      	cmp	r4, #1
 8008d10:	bf08      	it	eq
 8008d12:	429d      	cmpeq	r5, r3
 8008d14:	d04e      	beq.n	8008db4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc0>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8008d16:	2301      	movs	r3, #1
 8008d18:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008d1a:	b104      	cbz	r4, 8008d1e <MX25LM51245G_EnableMemoryMappedModeSTR+0x2a>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008d20:	b92c      	cbnz	r4, 8008d2e <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8008d22:	2300      	movs	r3, #0
 8008d24:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8008d26:	b924      	cbnz	r4, 8008d32 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3e>
 8008d28:	bb15      	cbnz	r5, 8008d70 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7c>
 8008d2a:	230b      	movs	r3, #11
 8008d2c:	e003      	b.n	8008d36 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008d2e:	2310      	movs	r3, #16
 8008d30:	e7f8      	b.n	8008d24 <MX25LM51245G_EnableMemoryMappedModeSTR+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8008d32:	f64e 4313 	movw	r3, #60435	; 0xec13
 8008d36:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8008d38:	b9e4      	cbnz	r4, 8008d74 <MX25LM51245G_EnableMemoryMappedModeSTR+0x80>
 8008d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d3e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8008d40:	b9dd      	cbnz	r5, 8008d7a <MX25LM51245G_EnableMemoryMappedModeSTR+0x86>
 8008d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d46:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008d48:	b9d4      	cbnz	r4, 8008d80 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8008d4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d4e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8008d50:	b9cc      	cbnz	r4, 8008d86 <MX25LM51245G_EnableMemoryMappedModeSTR+0x92>
 8008d52:	2308      	movs	r3, #8
 8008d54:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d5a:	a902      	add	r1, sp, #8
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f003 f877 	bl	800be50 <HAL_OSPI_Command>
 8008d62:	bb50      	cbnz	r0, 8008dba <MX25LM51245G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8008d64:	2302      	movs	r3, #2
 8008d66:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8008d68:	b97c      	cbnz	r4, 8008d8a <MX25LM51245G_EnableMemoryMappedModeSTR+0x96>
 8008d6a:	b185      	cbz	r5, 8008d8e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
 8008d6c:	2312      	movs	r3, #18
 8008d6e:	e00e      	b.n	8008d8e <MX25LM51245G_EnableMemoryMappedModeSTR+0x9a>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8008d70:	230c      	movs	r3, #12
 8008d72:	e7e0      	b.n	8008d36 <MX25LM51245G_EnableMemoryMappedModeSTR+0x42>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8008d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d78:	e7e1      	b.n	8008d3e <MX25LM51245G_EnableMemoryMappedModeSTR+0x4a>
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8008d7a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008d7e:	e7e2      	b.n	8008d46 <MX25LM51245G_EnableMemoryMappedModeSTR+0x52>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008d80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d84:	e7e3      	b.n	8008d4e <MX25LM51245G_EnableMemoryMappedModeSTR+0x5a>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8008d86:	2306      	movs	r3, #6
 8008d88:	e7e4      	b.n	8008d54 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8008d8a:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8008d8e:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	9313      	str	r3, [sp, #76]	; 0x4c

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d98:	a902      	add	r1, sp, #8
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f003 f858 	bl	800be50 <HAL_OSPI_Command>
 8008da0:	b970      	cbnz	r0, 8008dc0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xcc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8008da6:	4669      	mov	r1, sp
 8008da8:	4630      	mov	r0, r6
 8008daa:	f003 f9bf 	bl	800c12c <HAL_OSPI_MemoryMapped>
 8008dae:	b950      	cbnz	r0, 8008dc6 <MX25LM51245G_EnableMemoryMappedModeSTR+0xd2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8008db0:	b016      	add	sp, #88	; 0x58
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
    return MX25LM51245G_ERROR;
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295
 8008db8:	e7fa      	b.n	8008db0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8008dba:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbe:	e7f7      	b.n	8008db0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	e7f4      	b.n	8008db0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>
    return MX25LM51245G_ERROR;
 8008dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dca:	e7f1      	b.n	8008db0 <MX25LM51245G_EnableMemoryMappedModeSTR+0xbc>

08008dcc <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	b096      	sub	sp, #88	; 0x58
 8008dd0:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8008dd2:	2250      	movs	r2, #80	; 0x50
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	a802      	add	r0, sp, #8
 8008dd8:	f01a f992 	bl	8023100 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8008ddc:	2300      	movs	r3, #0
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	9301      	str	r3, [sp, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8008de2:	2301      	movs	r3, #1
 8008de4:	9302      	str	r3, [sp, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8008de6:	2304      	movs	r3, #4
 8008de8:	9305      	str	r3, [sp, #20]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8008dea:	2308      	movs	r3, #8
 8008dec:	9307      	str	r3, [sp, #28]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8008dee:	2310      	movs	r3, #16
 8008df0:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8008df2:	f64e 6311 	movw	r3, #60945	; 0xee11
 8008df6:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8008df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dfc:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8008dfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e02:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8008e04:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008e08:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8008e0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e0e:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8008e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e14:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8008e16:	2306      	movs	r3, #6
 8008e18:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8008e1a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008e1e:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e24:	a902      	add	r1, sp, #8
 8008e26:	4620      	mov	r0, r4
 8008e28:	f003 f812 	bl	800be50 <HAL_OSPI_Command>
 8008e2c:	b9b8      	cbnz	r0, 8008e5e <MX25LM51245G_EnableMemoryMappedModeDTR+0x92>
  {
    return MX25LM51245G_ERROR;
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8008e2e:	2302      	movs	r3, #2
 8008e30:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8008e32:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8008e36:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles   = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8008e3c:	9314      	str	r3, [sp, #80]	; 0x50

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e42:	a902      	add	r1, sp, #8
 8008e44:	4620      	mov	r0, r4
 8008e46:	f003 f803 	bl	800be50 <HAL_OSPI_Command>
 8008e4a:	b958      	cbnz	r0, 8008e64 <MX25LM51245G_EnableMemoryMappedModeDTR+0x98>
  {
    return MX25LM51245G_ERROR;
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9300      	str	r3, [sp, #0]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8008e50:	4669      	mov	r1, sp
 8008e52:	4620      	mov	r0, r4
 8008e54:	f003 f96a 	bl	800c12c <HAL_OSPI_MemoryMapped>
 8008e58:	b938      	cbnz	r0, 8008e6a <MX25LM51245G_EnableMemoryMappedModeDTR+0x9e>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8008e5a:	b016      	add	sp, #88	; 0x58
 8008e5c:	bd10      	pop	{r4, pc}
    return MX25LM51245G_ERROR;
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	e7fa      	b.n	8008e5a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8008e64:	f04f 30ff 	mov.w	r0, #4294967295
 8008e68:	e7f7      	b.n	8008e5a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>
    return MX25LM51245G_ERROR;
 8008e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6e:	e7f4      	b.n	8008e5a <MX25LM51245G_EnableMemoryMappedModeDTR+0x8e>

08008e70 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	b09a      	sub	sp, #104	; 0x68
 8008e74:	4606      	mov	r6, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 8008e7a:	2250      	movs	r2, #80	; 0x50
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	a806      	add	r0, sp, #24
 8008e80:	f01a f93e 	bl	8023100 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8008e84:	2300      	movs	r3, #0
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	9302      	str	r3, [sp, #8]
 8008e8a:	9303      	str	r3, [sp, #12]
 8008e8c:	9304      	str	r3, [sp, #16]
 8008e8e:	9305      	str	r3, [sp, #20]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008e90:	429c      	cmp	r4, r3
 8008e92:	bf08      	it	eq
 8008e94:	2d01      	cmpeq	r5, #1
 8008e96:	d076      	beq.n	8008f86 <MX25LM51245G_WriteEnable+0x116>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008e98:	2c00      	cmp	r4, #0
 8008e9a:	d155      	bne.n	8008f48 <MX25LM51245G_WriteEnable+0xd8>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008ea0:	2d01      	cmp	r5, #1
 8008ea2:	d053      	beq.n	8008f4c <MX25LM51245G_WriteEnable+0xdc>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008ea8:	2c00      	cmp	r4, #0
 8008eaa:	d151      	bne.n	8008f50 <MX25LM51245G_WriteEnable+0xe0>
 8008eac:	2300      	movs	r3, #0
 8008eae:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8008eb0:	2c00      	cmp	r4, #0
 8008eb2:	d14f      	bne.n	8008f54 <MX25LM51245G_WriteEnable+0xe4>
 8008eb4:	2306      	movs	r3, #6
 8008eb6:	9308      	str	r3, [sp, #32]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ebc:	a906      	add	r1, sp, #24
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f002 ffc6 	bl	800be50 <HAL_OSPI_Command>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d161      	bne.n	8008f8c <MX25LM51245G_WriteEnable+0x11c>
  {
    return MX25LM51245G_ERROR;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8008ec8:	2c00      	cmp	r4, #0
 8008eca:	d146      	bne.n	8008f5a <MX25LM51245G_WriteEnable+0xea>
 8008ecc:	2305      	movs	r3, #5
 8008ece:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8008ed0:	2c00      	cmp	r4, #0
 8008ed2:	d145      	bne.n	8008f60 <MX25LM51245G_WriteEnable+0xf0>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008ed8:	2d01      	cmp	r5, #1
 8008eda:	d044      	beq.n	8008f66 <MX25LM51245G_WriteEnable+0xf6>
 8008edc:	2300      	movs	r3, #0
 8008ede:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8008ee0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008ee4:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.Address        = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008eea:	2c00      	cmp	r4, #0
 8008eec:	d13e      	bne.n	8008f6c <MX25LM51245G_WriteEnable+0xfc>
 8008eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ef2:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008ef4:	2d01      	cmp	r5, #1
 8008ef6:	d03c      	beq.n	8008f72 <MX25LM51245G_WriteEnable+0x102>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008efc:	2c00      	cmp	r4, #0
 8008efe:	d13b      	bne.n	8008f78 <MX25LM51245G_WriteEnable+0x108>
 8008f00:	2300      	movs	r3, #0
 8008f02:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8008f04:	2d01      	cmp	r5, #1
 8008f06:	d039      	beq.n	8008f7c <MX25LM51245G_WriteEnable+0x10c>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8008f0c:	2d01      	cmp	r5, #1
 8008f0e:	d037      	beq.n	8008f80 <MX25LM51245G_WriteEnable+0x110>
 8008f10:	2300      	movs	r3, #0
 8008f12:	9318      	str	r3, [sp, #96]	; 0x60

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f18:	a906      	add	r1, sp, #24
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f002 ff98 	bl	800be50 <HAL_OSPI_Command>
 8008f20:	bbb8      	cbnz	r0, 8008f92 <MX25LM51245G_WriteEnable+0x122>
  {
    return MX25LM51245G_ERROR;
  }

  s_config.Match           = 2U;
 8008f22:	2302      	movs	r3, #2
 8008f24:	9301      	str	r3, [sp, #4]
  s_config.Mask            = 2U;
 8008f26:	9302      	str	r3, [sp, #8]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9303      	str	r3, [sp, #12]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8008f2c:	2310      	movs	r3, #16
 8008f2e:	9305      	str	r3, [sp, #20]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8008f30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008f34:	9304      	str	r3, [sp, #16]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f3a:	a901      	add	r1, sp, #4
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f003 f898 	bl	800c072 <HAL_OSPI_AutoPolling>
 8008f42:	bb48      	cbnz	r0, 8008f98 <MX25LM51245G_WriteEnable+0x128>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8008f44:	b01a      	add	sp, #104	; 0x68
 8008f46:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008f48:	2304      	movs	r3, #4
 8008f4a:	e7a8      	b.n	8008e9e <MX25LM51245G_WriteEnable+0x2e>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	e7aa      	b.n	8008ea6 <MX25LM51245G_WriteEnable+0x36>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008f50:	2310      	movs	r3, #16
 8008f52:	e7ac      	b.n	8008eae <MX25LM51245G_WriteEnable+0x3e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8008f54:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8008f58:	e7ad      	b.n	8008eb6 <MX25LM51245G_WriteEnable+0x46>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8008f5a:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8008f5e:	e7b6      	b.n	8008ece <MX25LM51245G_WriteEnable+0x5e>
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8008f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f64:	e7b7      	b.n	8008ed6 <MX25LM51245G_WriteEnable+0x66>
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f6a:	e7b8      	b.n	8008ede <MX25LM51245G_WriteEnable+0x6e>
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008f6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f70:	e7bf      	b.n	8008ef2 <MX25LM51245G_WriteEnable+0x82>
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008f72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f76:	e7c0      	b.n	8008efa <MX25LM51245G_WriteEnable+0x8a>
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008f78:	2305      	movs	r3, #5
 8008f7a:	e7c2      	b.n	8008f02 <MX25LM51245G_WriteEnable+0x92>
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e7c4      	b.n	8008f0a <MX25LM51245G_WriteEnable+0x9a>
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8008f80:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008f84:	e7c5      	b.n	8008f12 <MX25LM51245G_WriteEnable+0xa2>
    return MX25LM51245G_ERROR;
 8008f86:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8a:	e7db      	b.n	8008f44 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	e7d8      	b.n	8008f44 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8008f92:	f04f 30ff 	mov.w	r0, #4294967295
 8008f96:	e7d5      	b.n	8008f44 <MX25LM51245G_WriteEnable+0xd4>
    return MX25LM51245G_ERROR;
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9c:	e7d2      	b.n	8008f44 <MX25LM51245G_WriteEnable+0xd4>

08008f9e <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8008f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fa0:	b095      	sub	sp, #84	; 0x54
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	4615      	mov	r5, r2
 8008fa8:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8008faa:	2250      	movs	r2, #80	; 0x50
 8008fac:	2100      	movs	r1, #0
 8008fae:	4668      	mov	r0, sp
 8008fb0:	f01a f8a6 	bl	8023100 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008fb4:	2c00      	cmp	r4, #0
 8008fb6:	bf08      	it	eq
 8008fb8:	2d01      	cmpeq	r5, #1
 8008fba:	d04e      	beq.n	800905a <MX25LM51245G_WriteCfg2Register+0xbc>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008fbc:	bb24      	cbnz	r4, 8009008 <MX25LM51245G_WriteCfg2Register+0x6a>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008fc2:	2d01      	cmp	r5, #1
 8008fc4:	d022      	beq.n	800900c <MX25LM51245G_WriteCfg2Register+0x6e>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008fca:	bb0c      	cbnz	r4, 8009010 <MX25LM51245G_WriteCfg2Register+0x72>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8008fd0:	bb04      	cbnz	r4, 8009014 <MX25LM51245G_WriteCfg2Register+0x76>
 8008fd2:	2372      	movs	r3, #114	; 0x72
 8008fd4:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8008fd6:	bb04      	cbnz	r4, 800901a <MX25LM51245G_WriteCfg2Register+0x7c>
 8008fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fdc:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008fde:	2d01      	cmp	r5, #1
 8008fe0:	d01e      	beq.n	8009020 <MX25LM51245G_WriteCfg2Register+0x82>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8008fe6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008fea:	9308      	str	r3, [sp, #32]
  s_command.Address            = WriteAddr;
 8008fec:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008fee:	b9d4      	cbnz	r4, 8009026 <MX25LM51245G_WriteCfg2Register+0x88>
 8008ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ff4:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008ff6:	2d01      	cmp	r5, #1
 8008ff8:	d018      	beq.n	800902c <MX25LM51245G_WriteCfg2Register+0x8e>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = 0U;
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8008ffe:	b1d4      	cbz	r4, 8009036 <MX25LM51245G_WriteCfg2Register+0x98>
 8009000:	2d01      	cmp	r5, #1
 8009002:	d016      	beq.n	8009032 <MX25LM51245G_WriteCfg2Register+0x94>
 8009004:	2301      	movs	r3, #1
 8009006:	e017      	b.n	8009038 <MX25LM51245G_WriteCfg2Register+0x9a>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009008:	2304      	movs	r3, #4
 800900a:	e7d9      	b.n	8008fc0 <MX25LM51245G_WriteCfg2Register+0x22>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800900c:	2308      	movs	r3, #8
 800900e:	e7db      	b.n	8008fc8 <MX25LM51245G_WriteCfg2Register+0x2a>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009010:	2310      	movs	r3, #16
 8009012:	e7dc      	b.n	8008fce <MX25LM51245G_WriteCfg2Register+0x30>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8009014:	f247 238d 	movw	r3, #29325	; 0x728d
 8009018:	e7dc      	b.n	8008fd4 <MX25LM51245G_WriteCfg2Register+0x36>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800901a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800901e:	e7dd      	b.n	8008fdc <MX25LM51245G_WriteCfg2Register+0x3e>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009024:	e7de      	b.n	8008fe4 <MX25LM51245G_WriteCfg2Register+0x46>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009026:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800902a:	e7e3      	b.n	8008ff4 <MX25LM51245G_WriteCfg2Register+0x56>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800902c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009030:	e7e4      	b.n	8008ffc <MX25LM51245G_WriteCfg2Register+0x5e>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8009032:	2302      	movs	r3, #2
 8009034:	e000      	b.n	8009038 <MX25LM51245G_WriteCfg2Register+0x9a>
 8009036:	2301      	movs	r3, #1
 8009038:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800903a:	f241 3288 	movw	r2, #5000	; 0x1388
 800903e:	4669      	mov	r1, sp
 8009040:	4638      	mov	r0, r7
 8009042:	f002 ff05 	bl	800be50 <HAL_OSPI_Command>
 8009046:	b958      	cbnz	r0, 8009060 <MX25LM51245G_WriteCfg2Register+0xc2>
  {
    return MX25LM51245G_ERROR;
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009048:	f241 3288 	movw	r2, #5000	; 0x1388
 800904c:	a91a      	add	r1, sp, #104	; 0x68
 800904e:	4638      	mov	r0, r7
 8009050:	f002 ff5f 	bl	800bf12 <HAL_OSPI_Transmit>
 8009054:	b938      	cbnz	r0, 8009066 <MX25LM51245G_WriteCfg2Register+0xc8>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8009056:	b015      	add	sp, #84	; 0x54
 8009058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MX25LM51245G_ERROR;
 800905a:	f04f 30ff 	mov.w	r0, #4294967295
 800905e:	e7fa      	b.n	8009056 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e7f7      	b.n	8009056 <MX25LM51245G_WriteCfg2Register+0xb8>
    return MX25LM51245G_ERROR;
 8009066:	f04f 30ff 	mov.w	r0, #4294967295
 800906a:	e7f4      	b.n	8009056 <MX25LM51245G_WriteCfg2Register+0xb8>

0800906c <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 800906c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800906e:	b095      	sub	sp, #84	; 0x54
 8009070:	4607      	mov	r7, r0
 8009072:	460c      	mov	r4, r1
 8009074:	4615      	mov	r5, r2
 8009076:	461e      	mov	r6, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8009078:	2250      	movs	r2, #80	; 0x50
 800907a:	2100      	movs	r1, #0
 800907c:	4668      	mov	r0, sp
 800907e:	f01a f83f 	bl	8023100 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009082:	2c00      	cmp	r4, #0
 8009084:	bf08      	it	eq
 8009086:	2d01      	cmpeq	r5, #1
 8009088:	d05b      	beq.n	8009142 <MX25LM51245G_ReadCfg2Register+0xd6>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800908a:	2c00      	cmp	r4, #0
 800908c:	d13d      	bne.n	800910a <MX25LM51245G_ReadCfg2Register+0x9e>
 800908e:	2301      	movs	r3, #1
 8009090:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009092:	2d01      	cmp	r5, #1
 8009094:	d03b      	beq.n	800910e <MX25LM51245G_ReadCfg2Register+0xa2>
 8009096:	2300      	movs	r3, #0
 8009098:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800909a:	2c00      	cmp	r4, #0
 800909c:	d139      	bne.n	8009112 <MX25LM51245G_ReadCfg2Register+0xa6>
 800909e:	2300      	movs	r3, #0
 80090a0:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80090a2:	2c00      	cmp	r4, #0
 80090a4:	d137      	bne.n	8009116 <MX25LM51245G_ReadCfg2Register+0xaa>
 80090a6:	2371      	movs	r3, #113	; 0x71
 80090a8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80090aa:	2c00      	cmp	r4, #0
 80090ac:	d136      	bne.n	800911c <MX25LM51245G_ReadCfg2Register+0xb0>
 80090ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090b2:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80090b4:	2d01      	cmp	r5, #1
 80090b6:	d034      	beq.n	8009122 <MX25LM51245G_ReadCfg2Register+0xb6>
 80090b8:	2300      	movs	r3, #0
 80090ba:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80090bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80090c0:	9308      	str	r3, [sp, #32]
  s_command.Address            = ReadAddr;
 80090c2:	9606      	str	r6, [sp, #24]
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80090c4:	bb84      	cbnz	r4, 8009128 <MX25LM51245G_ReadCfg2Register+0xbc>
 80090c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090ca:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80090cc:	2d01      	cmp	r5, #1
 80090ce:	d02e      	beq.n	800912e <MX25LM51245G_ReadCfg2Register+0xc2>
 80090d0:	2300      	movs	r3, #0
 80090d2:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80090d4:	bb74      	cbnz	r4, 8009134 <MX25LM51245G_ReadCfg2Register+0xc8>
 80090d6:	2300      	movs	r3, #0
 80090d8:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80090da:	2d01      	cmp	r5, #1
 80090dc:	d02c      	beq.n	8009138 <MX25LM51245G_ReadCfg2Register+0xcc>
 80090de:	2301      	movs	r3, #1
 80090e0:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80090e2:	2d01      	cmp	r5, #1
 80090e4:	d02a      	beq.n	800913c <MX25LM51245G_ReadCfg2Register+0xd0>
 80090e6:	2300      	movs	r3, #0
 80090e8:	9312      	str	r3, [sp, #72]	; 0x48
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80090ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ee:	4669      	mov	r1, sp
 80090f0:	4638      	mov	r0, r7
 80090f2:	f002 fead 	bl	800be50 <HAL_OSPI_Command>
 80090f6:	bb38      	cbnz	r0, 8009148 <MX25LM51245G_ReadCfg2Register+0xdc>
  {
    return MX25LM51245G_ERROR;
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80090f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80090fe:	4638      	mov	r0, r7
 8009100:	f002 ff54 	bl	800bfac <HAL_OSPI_Receive>
 8009104:	bb18      	cbnz	r0, 800914e <MX25LM51245G_ReadCfg2Register+0xe2>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8009106:	b015      	add	sp, #84	; 0x54
 8009108:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800910a:	2304      	movs	r3, #4
 800910c:	e7c0      	b.n	8009090 <MX25LM51245G_ReadCfg2Register+0x24>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800910e:	2308      	movs	r3, #8
 8009110:	e7c2      	b.n	8009098 <MX25LM51245G_ReadCfg2Register+0x2c>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009112:	2310      	movs	r3, #16
 8009114:	e7c4      	b.n	80090a0 <MX25LM51245G_ReadCfg2Register+0x34>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8009116:	f247 138e 	movw	r3, #29070	; 0x718e
 800911a:	e7c5      	b.n	80090a8 <MX25LM51245G_ReadCfg2Register+0x3c>
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800911c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009120:	e7c7      	b.n	80090b2 <MX25LM51245G_ReadCfg2Register+0x46>
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009126:	e7c8      	b.n	80090ba <MX25LM51245G_ReadCfg2Register+0x4e>
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009128:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800912c:	e7cd      	b.n	80090ca <MX25LM51245G_ReadCfg2Register+0x5e>
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800912e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009132:	e7ce      	b.n	80090d2 <MX25LM51245G_ReadCfg2Register+0x66>
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009134:	2305      	movs	r3, #5
 8009136:	e7cf      	b.n	80090d8 <MX25LM51245G_ReadCfg2Register+0x6c>
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009138:	2302      	movs	r3, #2
 800913a:	e7d1      	b.n	80090e0 <MX25LM51245G_ReadCfg2Register+0x74>
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800913c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009140:	e7d2      	b.n	80090e8 <MX25LM51245G_ReadCfg2Register+0x7c>
    return MX25LM51245G_ERROR;
 8009142:	f04f 30ff 	mov.w	r0, #4294967295
 8009146:	e7de      	b.n	8009106 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 8009148:	f04f 30ff 	mov.w	r0, #4294967295
 800914c:	e7db      	b.n	8009106 <MX25LM51245G_ReadCfg2Register+0x9a>
    return MX25LM51245G_ERROR;
 800914e:	f04f 30ff 	mov.w	r0, #4294967295
 8009152:	e7d8      	b.n	8009106 <MX25LM51245G_ReadCfg2Register+0x9a>

08009154 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009154:	b570      	push	{r4, r5, r6, lr}
 8009156:	b094      	sub	sp, #80	; 0x50
 8009158:	4606      	mov	r6, r0
 800915a:	460c      	mov	r4, r1
 800915c:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 800915e:	2250      	movs	r2, #80	; 0x50
 8009160:	2100      	movs	r1, #0
 8009162:	4668      	mov	r0, sp
 8009164:	f019 ffcc 	bl	8023100 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8009168:	2c00      	cmp	r4, #0
 800916a:	bf08      	it	eq
 800916c:	2d01      	cmpeq	r5, #1
 800916e:	d01e      	beq.n	80091ae <MX25LM51245G_ResetEnable+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009170:	b9a4      	cbnz	r4, 800919c <MX25LM51245G_ResetEnable+0x48>
 8009172:	2301      	movs	r3, #1
 8009174:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009176:	2d01      	cmp	r5, #1
 8009178:	d012      	beq.n	80091a0 <MX25LM51245G_ResetEnable+0x4c>
 800917a:	2300      	movs	r3, #0
 800917c:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800917e:	b98c      	cbnz	r4, 80091a4 <MX25LM51245G_ResetEnable+0x50>
 8009180:	2300      	movs	r3, #0
 8009182:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8009184:	b984      	cbnz	r4, 80091a8 <MX25LM51245G_ResetEnable+0x54>
 8009186:	2366      	movs	r3, #102	; 0x66
 8009188:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800918a:	f241 3288 	movw	r2, #5000	; 0x1388
 800918e:	4669      	mov	r1, sp
 8009190:	4630      	mov	r0, r6
 8009192:	f002 fe5d 	bl	800be50 <HAL_OSPI_Command>
 8009196:	b968      	cbnz	r0, 80091b4 <MX25LM51245G_ResetEnable+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8009198:	b014      	add	sp, #80	; 0x50
 800919a:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800919c:	2304      	movs	r3, #4
 800919e:	e7e9      	b.n	8009174 <MX25LM51245G_ResetEnable+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80091a0:	2308      	movs	r3, #8
 80091a2:	e7eb      	b.n	800917c <MX25LM51245G_ResetEnable+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80091a4:	2310      	movs	r3, #16
 80091a6:	e7ec      	b.n	8009182 <MX25LM51245G_ResetEnable+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80091a8:	f246 6399 	movw	r3, #26265	; 0x6699
 80091ac:	e7ec      	b.n	8009188 <MX25LM51245G_ResetEnable+0x34>
    return MX25LM51245G_ERROR;
 80091ae:	f04f 30ff 	mov.w	r0, #4294967295
 80091b2:	e7f1      	b.n	8009198 <MX25LM51245G_ResetEnable+0x44>
    return MX25LM51245G_ERROR;
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295
 80091b8:	e7ee      	b.n	8009198 <MX25LM51245G_ResetEnable+0x44>

080091ba <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80091ba:	b570      	push	{r4, r5, r6, lr}
 80091bc:	b094      	sub	sp, #80	; 0x50
 80091be:	4606      	mov	r6, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80091c4:	2250      	movs	r2, #80	; 0x50
 80091c6:	2100      	movs	r1, #0
 80091c8:	4668      	mov	r0, sp
 80091ca:	f019 ff99 	bl	8023100 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80091ce:	2c00      	cmp	r4, #0
 80091d0:	bf08      	it	eq
 80091d2:	2d01      	cmpeq	r5, #1
 80091d4:	d01e      	beq.n	8009214 <MX25LM51245G_ResetMemory+0x5a>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80091d6:	b9a4      	cbnz	r4, 8009202 <MX25LM51245G_ResetMemory+0x48>
 80091d8:	2301      	movs	r3, #1
 80091da:	9303      	str	r3, [sp, #12]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80091dc:	2d01      	cmp	r5, #1
 80091de:	d012      	beq.n	8009206 <MX25LM51245G_ResetMemory+0x4c>
 80091e0:	2300      	movs	r3, #0
 80091e2:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80091e4:	b98c      	cbnz	r4, 800920a <MX25LM51245G_ResetMemory+0x50>
 80091e6:	2300      	movs	r3, #0
 80091e8:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80091ea:	b984      	cbnz	r4, 800920e <MX25LM51245G_ResetMemory+0x54>
 80091ec:	2399      	movs	r3, #153	; 0x99
 80091ee:	9302      	str	r3, [sp, #8]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80091f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f4:	4669      	mov	r1, sp
 80091f6:	4630      	mov	r0, r6
 80091f8:	f002 fe2a 	bl	800be50 <HAL_OSPI_Command>
 80091fc:	b968      	cbnz	r0, 800921a <MX25LM51245G_ResetMemory+0x60>
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80091fe:	b014      	add	sp, #80	; 0x50
 8009200:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009202:	2304      	movs	r3, #4
 8009204:	e7e9      	b.n	80091da <MX25LM51245G_ResetMemory+0x20>
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009206:	2308      	movs	r3, #8
 8009208:	e7eb      	b.n	80091e2 <MX25LM51245G_ResetMemory+0x28>
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800920a:	2310      	movs	r3, #16
 800920c:	e7ec      	b.n	80091e8 <MX25LM51245G_ResetMemory+0x2e>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 800920e:	f649 1366 	movw	r3, #39270	; 0x9966
 8009212:	e7ec      	b.n	80091ee <MX25LM51245G_ResetMemory+0x34>
    return MX25LM51245G_ERROR;
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	e7f1      	b.n	80091fe <MX25LM51245G_ResetMemory+0x44>
    return MX25LM51245G_ERROR;
 800921a:	f04f 30ff 	mov.w	r0, #4294967295
 800921e:	e7ee      	b.n	80091fe <MX25LM51245G_ResetMemory+0x44>

08009220 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009224:	4b32      	ldr	r3, [pc, #200]	; (80092f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>)
 8009226:	eb03 0c50 	add.w	ip, r3, r0, lsr #1
 800922a:	fbbc fcf0 	udiv	ip, ip, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800922e:	4b31      	ldr	r3, [pc, #196]	; (80092f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>)
 8009230:	222c      	movs	r2, #44	; 0x2c
 8009232:	fb02 3101 	mla	r1, r2, r1, r3
 8009236:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8009238:	68ca      	ldr	r2, [r1, #12]
 800923a:	eb03 0e02 	add.w	lr, r3, r2
 800923e:	f1ae 0e32 	sub.w	lr, lr, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009242:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8009244:	1cd3      	adds	r3, r2, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009246:	fb0c ee13 	mls	lr, ip, r3, lr

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800924a:	690b      	ldr	r3, [r1, #16]
 800924c:	6a08      	ldr	r0, [r1, #32]
 800924e:	1a1e      	subs	r6, r3, r0
 8009250:	f5a6 7682 	sub.w	r6, r6, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009254:	3204      	adds	r2, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009256:	fb02 661c 	mls	r6, r2, ip, r6


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800925a:	694b      	ldr	r3, [r1, #20]
 800925c:	eb00 0803 	add.w	r8, r0, r3

  if (tsdadel_min <= 0)
 8009260:	f1be 0f00 	cmp.w	lr, #0
 8009264:	dd08      	ble.n	8009278 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x58>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 8009266:	2e00      	cmp	r6, #0
 8009268:	dd09      	ble.n	800927e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x5e>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800926a:	2500      	movs	r5, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 800926c:	f04f 0910 	mov.w	r9, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009270:	2d0f      	cmp	r5, #15
 8009272:	d83b      	bhi.n	80092ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009274:	2400      	movs	r4, #0
 8009276:	e02b      	b.n	80092d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb0>
    tsdadel_min = 0;
 8009278:	f04f 0e00 	mov.w	lr, #0
 800927c:	e7f3      	b.n	8009266 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x46>
    tsdadel_max = 0;
 800927e:	2600      	movs	r6, #0
 8009280:	e7f3      	b.n	800926a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4a>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009282:	3201      	adds	r2, #1
 8009284:	2a0f      	cmp	r2, #15
 8009286:	d822      	bhi.n	80092ce <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8009288:	fb02 f300 	mul.w	r3, r2, r0
 800928c:	fb0c f303 	mul.w	r3, ip, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009290:	459e      	cmp	lr, r3
 8009292:	bf8c      	ite	hi
 8009294:	2100      	movhi	r1, #0
 8009296:	2101      	movls	r1, #1
 8009298:	429e      	cmp	r6, r3
 800929a:	bf38      	it	cc
 800929c:	2100      	movcc	r1, #0
 800929e:	2900      	cmp	r1, #0
 80092a0:	d0ef      	beq.n	8009282 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
          {
            if(presc != prev_presc)
 80092a2:	45a9      	cmp	r9, r5
 80092a4:	d0ed      	beq.n	8009282 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80092a6:	4914      	ldr	r1, [pc, #80]	; (80092f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd8>)
 80092a8:	680b      	ldr	r3, [r1, #0]
 80092aa:	f8df a050 	ldr.w	sl, [pc, #80]	; 80092fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xdc>
 80092ae:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 80092b2:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 80092b6:	f84a 502b 	str.w	r5, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80092ba:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80092be:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 80092c2:	3301      	adds	r3, #1
 80092c4:	600b      	str	r3, [r1, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80092c6:	2b7f      	cmp	r3, #127	; 0x7f
 80092c8:	d810      	bhi.n	80092ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>
              prev_presc = presc;
 80092ca:	46a9      	mov	r9, r5
 80092cc:	e7d9      	b.n	8009282 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x62>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80092ce:	463c      	mov	r4, r7
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80092d0:	2c0f      	cmp	r4, #15
 80092d2:	d809      	bhi.n	80092e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80092d4:	1c67      	adds	r7, r4, #1
 80092d6:	1c68      	adds	r0, r5, #1
 80092d8:	fb04 0300 	mla	r3, r4, r0, r0
 80092dc:	fb0c f303 	mul.w	r3, ip, r3
      if (tscldel >= (uint32_t)tscldel_min)
 80092e0:	4598      	cmp	r8, r3
 80092e2:	d8f4      	bhi.n	80092ce <I2C_Compute_PRESC_SCLDEL_SDADEL+0xae>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80092e4:	2200      	movs	r2, #0
 80092e6:	e7cd      	b.n	8009284 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x64>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80092e8:	3501      	adds	r5, #1
 80092ea:	e7c1      	b.n	8009270 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
          }
        }
      }
    }
  }
}
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	3b9aca00 	.word	0x3b9aca00
 80092f4:	0802621c 	.word	0x0802621c
 80092f8:	24006478 	.word	0x24006478
 80092fc:	24005a78 	.word	0x24005a78

08009300 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	b089      	sub	sp, #36	; 0x24
 8009306:	460c      	mov	r4, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009308:	4f4b      	ldr	r7, [pc, #300]	; (8009438 <I2C_Compute_SCLL_SCLH+0x138>)
 800930a:	eb07 0250 	add.w	r2, r7, r0, lsr #1
 800930e:	fbb2 f8f0 	udiv	r8, r2, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8009312:	494a      	ldr	r1, [pc, #296]	; (800943c <I2C_Compute_SCLL_SCLH+0x13c>)
 8009314:	232c      	movs	r3, #44	; 0x2c
 8009316:	fb04 f303 	mul.w	r3, r4, r3
 800931a:	18ca      	adds	r2, r1, r3
 800931c:	58cb      	ldr	r3, [r1, r3]
 800931e:	eb07 0153 	add.w	r1, r7, r3, lsr #1
 8009322:	fbb1 f1f3 	udiv	r1, r1, r3
 8009326:	9105      	str	r1, [sp, #20]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8009328:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800932a:	fb08 f303 	mul.w	r3, r8, r3
 800932e:	9306      	str	r3, [sp, #24]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8009330:	6853      	ldr	r3, [r2, #4]
 8009332:	fbb7 f9f3 	udiv	r9, r7, r3
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8009336:	6893      	ldr	r3, [r2, #8]
 8009338:	fbb7 f7f3 	udiv	r7, r7, r3

  prev_error = ti2cspeed;
 800933c:	9102      	str	r1, [sp, #8]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800933e:	2300      	movs	r3, #0
 8009340:	9304      	str	r3, [sp, #16]
 uint32_t ret = 0xFFFFFFFFU;
 8009342:	f04f 33ff 	mov.w	r3, #4294967295
 8009346:	9307      	str	r3, [sp, #28]
 8009348:	46c2      	mov	sl, r8
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800934a:	e060      	b.n	800940e <I2C_Compute_SCLL_SCLH+0x10e>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 800934c:	1af2      	subs	r2, r6, r3
 800934e:	e02a      	b.n	80093a6 <I2C_Compute_SCLL_SCLH+0xa6>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8009350:	4629      	mov	r1, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009352:	29ff      	cmp	r1, #255	; 0xff
 8009354:	d837      	bhi.n	80093c6 <I2C_Compute_SCLL_SCLH+0xc6>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8009356:	1c4d      	adds	r5, r1, #1
 8009358:	fb01 0200 	mla	r2, r1, r0, r0
 800935c:	4442      	add	r2, r8
 800935e:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8009360:	eb0c 0302 	add.w	r3, ip, r2
 8009364:	4e35      	ldr	r6, [pc, #212]	; (800943c <I2C_Compute_SCLL_SCLH+0x13c>)
 8009366:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800936a:	fb0b 6b04 	mla	fp, fp, r4, r6
 800936e:	f8db 6020 	ldr.w	r6, [fp, #32]
 8009372:	4433      	add	r3, r6
 8009374:	f8db 6024 	ldr.w	r6, [fp, #36]	; 0x24
 8009378:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800937a:	429f      	cmp	r7, r3
 800937c:	bf8c      	ite	hi
 800937e:	2600      	movhi	r6, #0
 8009380:	2601      	movls	r6, #1
 8009382:	4599      	cmp	r9, r3
 8009384:	bf38      	it	cc
 8009386:	2600      	movcc	r6, #0
 8009388:	2e00      	cmp	r6, #0
 800938a:	d0e1      	beq.n	8009350 <I2C_Compute_SCLL_SCLH+0x50>
 800938c:	4e2b      	ldr	r6, [pc, #172]	; (800943c <I2C_Compute_SCLL_SCLH+0x13c>)
 800938e:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8009392:	fb0b 6604 	mla	r6, fp, r4, r6
 8009396:	69f6      	ldr	r6, [r6, #28]
 8009398:	4296      	cmp	r6, r2
 800939a:	d8d9      	bhi.n	8009350 <I2C_Compute_SCLL_SCLH+0x50>
 800939c:	4592      	cmp	sl, r2
 800939e:	d2d7      	bcs.n	8009350 <I2C_Compute_SCLL_SCLH+0x50>
            if (error < 0)
 80093a0:	9e05      	ldr	r6, [sp, #20]
 80093a2:	1b9a      	subs	r2, r3, r6
 80093a4:	d4d2      	bmi.n	800934c <I2C_Compute_SCLL_SCLH+0x4c>
            if ((uint32_t)error < prev_error)
 80093a6:	9b02      	ldr	r3, [sp, #8]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d2d1      	bcs.n	8009350 <I2C_Compute_SCLL_SCLH+0x50>
              I2c_valid_timing[count].scll = scll;
 80093ac:	9b04      	ldr	r3, [sp, #16]
 80093ae:	eb03 0683 	add.w	r6, r3, r3, lsl #2
 80093b2:	4b23      	ldr	r3, [pc, #140]	; (8009440 <I2C_Compute_SCLL_SCLH+0x140>)
 80093b4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80093b8:	9e01      	ldr	r6, [sp, #4]
 80093ba:	611e      	str	r6, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 80093bc:	60d9      	str	r1, [r3, #12]
              prev_error = (uint32_t)error;
 80093be:	9202      	str	r2, [sp, #8]
              ret = count;
 80093c0:	9b04      	ldr	r3, [sp, #16]
 80093c2:	9307      	str	r3, [sp, #28]
 80093c4:	e7c4      	b.n	8009350 <I2C_Compute_SCLL_SCLH+0x50>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	2bff      	cmp	r3, #255	; 0xff
 80093ce:	d81b      	bhi.n	8009408 <I2C_Compute_SCLL_SCLH+0x108>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80093d0:	9906      	ldr	r1, [sp, #24]
 80093d2:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	9203      	str	r2, [sp, #12]
 80093dc:	fb03 0c00 	mla	ip, r3, r0, r0
 80093e0:	ea4f 084a 	mov.w	r8, sl, lsl #1
 80093e4:	eb0c 0c4a 	add.w	ip, ip, sl, lsl #1
 80093e8:	44f4      	add	ip, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80093ea:	4b14      	ldr	r3, [pc, #80]	; (800943c <I2C_Compute_SCLL_SCLH+0x13c>)
 80093ec:	222c      	movs	r2, #44	; 0x2c
 80093ee:	fb02 3304 	mla	r3, r2, r4, r3
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	4563      	cmp	r3, ip
 80093f6:	d2e6      	bcs.n	80093c6 <I2C_Compute_SCLL_SCLH+0xc6>
 80093f8:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
 80093fc:	1a5b      	subs	r3, r3, r1
 80093fe:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 8009402:	d2e0      	bcs.n	80093c6 <I2C_Compute_SCLL_SCLH+0xc6>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009404:	2100      	movs	r1, #0
 8009406:	e7a4      	b.n	8009352 <I2C_Compute_SCLL_SCLH+0x52>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009408:	9b04      	ldr	r3, [sp, #16]
 800940a:	3301      	adds	r3, #1
 800940c:	9304      	str	r3, [sp, #16]
 800940e:	4b0d      	ldr	r3, [pc, #52]	; (8009444 <I2C_Compute_SCLL_SCLH+0x144>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	9a04      	ldr	r2, [sp, #16]
 8009414:	4293      	cmp	r3, r2
 8009416:	d90a      	bls.n	800942e <I2C_Compute_SCLL_SCLH+0x12e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009418:	9b04      	ldr	r3, [sp, #16]
 800941a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800941e:	4a08      	ldr	r2, [pc, #32]	; (8009440 <I2C_Compute_SCLL_SCLH+0x140>)
 8009420:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009424:	fb00 a00a 	mla	r0, r0, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009428:	2300      	movs	r3, #0
 800942a:	9301      	str	r3, [sp, #4]
 800942c:	e7cd      	b.n	80093ca <I2C_Compute_SCLL_SCLH+0xca>
      }
    }
  }

  return ret;
}
 800942e:	9807      	ldr	r0, [sp, #28]
 8009430:	b009      	add	sp, #36	; 0x24
 8009432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009436:	bf00      	nop
 8009438:	3b9aca00 	.word	0x3b9aca00
 800943c:	0802621c 	.word	0x0802621c
 8009440:	24005a78 	.word	0x24005a78
 8009444:	24006478 	.word	0x24006478

08009448 <I2C_GetTiming>:
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8009448:	2800      	cmp	r0, #0
 800944a:	bf18      	it	ne
 800944c:	2900      	cmpne	r1, #0
 800944e:	d134      	bne.n	80094ba <I2C_GetTiming+0x72>
  uint32_t ret = 0;
 8009450:	2000      	movs	r0, #0
}
 8009452:	4770      	bx	lr
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8009454:	3401      	adds	r4, #1
 8009456:	2c02      	cmp	r4, #2
 8009458:	d834      	bhi.n	80094c4 <I2C_GetTiming+0x7c>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800945a:	4b1c      	ldr	r3, [pc, #112]	; (80094cc <I2C_GetTiming+0x84>)
 800945c:	212c      	movs	r1, #44	; 0x2c
 800945e:	fb01 3304 	mla	r3, r1, r4, r3
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	4293      	cmp	r3, r2
 8009466:	d8f5      	bhi.n	8009454 <I2C_GetTiming+0xc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8009468:	4b18      	ldr	r3, [pc, #96]	; (80094cc <I2C_GetTiming+0x84>)
 800946a:	fb01 3304 	mla	r3, r1, r4, r3
 800946e:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8009470:	4293      	cmp	r3, r2
 8009472:	d3ef      	bcc.n	8009454 <I2C_GetTiming+0xc>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8009474:	4621      	mov	r1, r4
 8009476:	4628      	mov	r0, r5
 8009478:	f7ff fed2 	bl	8009220 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800947c:	4621      	mov	r1, r4
 800947e:	4628      	mov	r0, r5
 8009480:	f7ff ff3e 	bl	8009300 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8009484:	287f      	cmp	r0, #127	; 0x7f
 8009486:	d81f      	bhi.n	80094c8 <I2C_GetTiming+0x80>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009488:	4a11      	ldr	r2, [pc, #68]	; (80094d0 <I2C_GetTiming+0x88>)
 800948a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800948e:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8009492:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009496:	6863      	ldr	r3, [r4, #4]
 8009498:	051b      	lsls	r3, r3, #20
 800949a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800949e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80094a2:	68a1      	ldr	r1, [r4, #8]
 80094a4:	0409      	lsls	r1, r1, #16
 80094a6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80094aa:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80094ac:	68e1      	ldr	r1, [r4, #12]
 80094ae:	0209      	lsls	r1, r1, #8
 80094b0:	b289      	uxth	r1, r1
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80094b2:	430b      	orrs	r3, r1
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80094b4:	7c20      	ldrb	r0, [r4, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80094b6:	4318      	orrs	r0, r3
 80094b8:	e005      	b.n	80094c6 <I2C_GetTiming+0x7e>
{
 80094ba:	b538      	push	{r3, r4, r5, lr}
 80094bc:	4605      	mov	r5, r0
 80094be:	460a      	mov	r2, r1
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80094c0:	2400      	movs	r4, #0
 80094c2:	e7c8      	b.n	8009456 <I2C_GetTiming+0xe>
  uint32_t ret = 0;
 80094c4:	2000      	movs	r0, #0
}
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t ret = 0;
 80094c8:	2000      	movs	r0, #0
  return ret;
 80094ca:	e7fc      	b.n	80094c6 <I2C_GetTiming+0x7e>
 80094cc:	0802621c 	.word	0x0802621c
 80094d0:	24005a78 	.word	0x24005a78

080094d4 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80094d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094d8:	b089      	sub	sp, #36	; 0x24
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80094da:	4c2a      	ldr	r4, [pc, #168]	; (8009584 <I2C4_MspInit+0xb0>)
 80094dc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80094e0:	f043 0308 	orr.w	r3, r3, #8
 80094e4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80094e8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80094ec:	f003 0308 	and.w	r3, r3, #8
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	9b00      	ldr	r3, [sp, #0]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80094f4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 80094f8:	f043 0308 	orr.w	r3, r3, #8
 80094fc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8009500:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8009504:	f003 0308 	and.w	r3, r3, #8
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800950c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009510:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009512:	f04f 0912 	mov.w	r9, #18
 8009516:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800951a:	f04f 0800 	mov.w	r8, #0
 800951e:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8009522:	2702      	movs	r7, #2
 8009524:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8009526:	2604      	movs	r6, #4
 8009528:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800952a:	4d17      	ldr	r5, [pc, #92]	; (8009588 <I2C4_MspInit+0xb4>)
 800952c:	a903      	add	r1, sp, #12
 800952e:	4628      	mov	r0, r5
 8009530:	f001 fada 	bl	800aae8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8009534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009538:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800953a:	f8cd 9010 	str.w	r9, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800953e:	f8cd 8014 	str.w	r8, [sp, #20]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8009542:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8009544:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009546:	a903      	add	r1, sp, #12
 8009548:	4628      	mov	r0, r5
 800954a:	f001 facd 	bl	800aae8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800954e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 8009552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009556:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 800955a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
 800955e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009562:	9302      	str	r3, [sp, #8]
 8009564:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8009566:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800956a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800956e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8009572:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800957a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800957e:	b009      	add	sp, #36	; 0x24
 8009580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009584:	58024400 	.word	0x58024400
 8009588:	58020c00 	.word	0x58020c00

0800958c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800958c:	b510      	push	{r4, lr}
 800958e:	b086      	sub	sp, #24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8009590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009594:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8009596:	4c09      	ldr	r4, [pc, #36]	; (80095bc <I2C4_MspDeInit+0x30>)
 8009598:	4620      	mov	r0, r4
 800959a:	f001 fbb5 	bl	800ad08 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800959e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80095a2:	9101      	str	r1, [sp, #4]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80095a4:	4620      	mov	r0, r4
 80095a6:	f001 fbaf 	bl	800ad08 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80095aa:	4a05      	ldr	r2, [pc, #20]	; (80095c0 <I2C4_MspDeInit+0x34>)
 80095ac:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
 80095b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095b4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 80095b8:	b006      	add	sp, #24
 80095ba:	bd10      	pop	{r4, pc}
 80095bc:	58020c00 	.word	0x58020c00
 80095c0:	58024400 	.word	0x58024400

080095c4 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80095c4:	b510      	push	{r4, lr}
 80095c6:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80095c8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80095cc:	9402      	str	r4, [sp, #8]
 80095ce:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80095d2:	9401      	str	r4, [sp, #4]
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	4613      	mov	r3, r2
 80095d8:	460a      	mov	r2, r1
 80095da:	4601      	mov	r1, r0
 80095dc:	4804      	ldr	r0, [pc, #16]	; (80095f0 <I2C4_WriteReg+0x2c>)
 80095de:	f001 fe98 	bl	800b312 <HAL_I2C_Mem_Write>
 80095e2:	b910      	cbnz	r0, 80095ea <I2C4_WriteReg+0x26>
  {
    return BSP_ERROR_NONE;
 80095e4:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 80095e6:	b004      	add	sp, #16
 80095e8:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 80095ea:	f06f 0007 	mvn.w	r0, #7
 80095ee:	e7fa      	b.n	80095e6 <I2C4_WriteReg+0x22>
 80095f0:	2400647c 	.word	0x2400647c

080095f4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80095f4:	b510      	push	{r4, lr}
 80095f6:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80095f8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80095fc:	9402      	str	r4, [sp, #8]
 80095fe:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8009602:	9401      	str	r4, [sp, #4]
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4613      	mov	r3, r2
 8009608:	460a      	mov	r2, r1
 800960a:	4601      	mov	r1, r0
 800960c:	4804      	ldr	r0, [pc, #16]	; (8009620 <I2C4_ReadReg+0x2c>)
 800960e:	f001 ff55 	bl	800b4bc <HAL_I2C_Mem_Read>
 8009612:	b910      	cbnz	r0, 800961a <I2C4_ReadReg+0x26>
  {
    return BSP_ERROR_NONE;
 8009614:	2000      	movs	r0, #0
  }

  return BSP_ERROR_BUS_FAILURE;
}
 8009616:	b004      	add	sp, #16
 8009618:	bd10      	pop	{r4, pc}
  return BSP_ERROR_BUS_FAILURE;
 800961a:	f06f 0007 	mvn.w	r0, #7
 800961e:	e7fa      	b.n	8009616 <I2C4_ReadReg+0x22>
 8009620:	2400647c 	.word	0x2400647c

08009624 <BSP_I2C4_DeInit>:
  I2c4InitCounter--;
 8009624:	4a09      	ldr	r2, [pc, #36]	; (800964c <BSP_I2C4_DeInit+0x28>)
 8009626:	6813      	ldr	r3, [r2, #0]
 8009628:	3b01      	subs	r3, #1
 800962a:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800962c:	b10b      	cbz	r3, 8009632 <BSP_I2C4_DeInit+0xe>
  int32_t ret  = BSP_ERROR_NONE;
 800962e:	2000      	movs	r0, #0
}
 8009630:	4770      	bx	lr
{
 8009632:	b510      	push	{r4, lr}
    I2C4_MspDeInit(&hbus_i2c4);
 8009634:	4c06      	ldr	r4, [pc, #24]	; (8009650 <BSP_I2C4_DeInit+0x2c>)
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff ffa8 	bl	800958c <I2C4_MspDeInit>
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800963c:	4620      	mov	r0, r4
 800963e:	f001 fe4f 	bl	800b2e0 <HAL_I2C_DeInit>
 8009642:	b900      	cbnz	r0, 8009646 <BSP_I2C4_DeInit+0x22>
}
 8009644:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_BUS_FAILURE;
 8009646:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800964a:	e7fb      	b.n	8009644 <BSP_I2C4_DeInit+0x20>
 800964c:	24005a74 	.word	0x24005a74
 8009650:	2400647c 	.word	0x2400647c

08009654 <MX_I2C4_Init>:
{
 8009654:	b510      	push	{r4, lr}
 8009656:	4604      	mov	r4, r0
  hI2c->Init.Timing           = timing;
 8009658:	6041      	str	r1, [r0, #4]
  hI2c->Init.OwnAddress1      = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	6083      	str	r3, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800965e:	2201      	movs	r2, #1
 8009660:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009662:	6103      	str	r3, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
 8009664:	6143      	str	r3, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009666:	6183      	str	r3, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009668:	61c3      	str	r3, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800966a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800966c:	f001 fdda 	bl	800b224 <HAL_I2C_Init>
 8009670:	b108      	cbz	r0, 8009676 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8009672:	2001      	movs	r0, #1
}
 8009674:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8009676:	2100      	movs	r1, #0
 8009678:	4620      	mov	r0, r4
 800967a:	f001 fffc 	bl	800b676 <HAL_I2CEx_ConfigAnalogFilter>
 800967e:	b108      	cbz	r0, 8009684 <MX_I2C4_Init+0x30>
      status = HAL_ERROR;
 8009680:	2001      	movs	r0, #1
 8009682:	e7f7      	b.n	8009674 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8009684:	2100      	movs	r1, #0
 8009686:	4620      	mov	r0, r4
 8009688:	f002 f823 	bl	800b6d2 <HAL_I2CEx_ConfigDigitalFilter>
 800968c:	2800      	cmp	r0, #0
 800968e:	d0f1      	beq.n	8009674 <MX_I2C4_Init+0x20>
        status = HAL_ERROR;
 8009690:	2001      	movs	r0, #1
 8009692:	e7ef      	b.n	8009674 <MX_I2C4_Init+0x20>

08009694 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8009694:	4b11      	ldr	r3, [pc, #68]	; (80096dc <BSP_I2C4_Init+0x48>)
 8009696:	4a12      	ldr	r2, [pc, #72]	; (80096e0 <BSP_I2C4_Init+0x4c>)
 8009698:	601a      	str	r2, [r3, #0]
  if (I2c4InitCounter == 0U)
 800969a:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <BSP_I2C4_Init+0x50>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	b10b      	cbz	r3, 80096a4 <BSP_I2C4_Init+0x10>
  int32_t ret = BSP_ERROR_NONE;
 80096a0:	2000      	movs	r0, #0
}
 80096a2:	4770      	bx	lr
{
 80096a4:	b510      	push	{r4, lr}
    I2c4InitCounter++;
 80096a6:	3301      	adds	r3, #1
 80096a8:	4a0e      	ldr	r2, [pc, #56]	; (80096e4 <BSP_I2C4_Init+0x50>)
 80096aa:	6013      	str	r3, [r2, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80096ac:	480b      	ldr	r0, [pc, #44]	; (80096dc <BSP_I2C4_Init+0x48>)
 80096ae:	f001 ffdd 	bl	800b66c <HAL_I2C_GetState>
 80096b2:	b108      	cbz	r0, 80096b8 <BSP_I2C4_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 80096b4:	2000      	movs	r0, #0
}
 80096b6:	bd10      	pop	{r4, pc}
      I2C4_MspInit(&hbus_i2c4);
 80096b8:	4c08      	ldr	r4, [pc, #32]	; (80096dc <BSP_I2C4_Init+0x48>)
 80096ba:	4620      	mov	r0, r4
 80096bc:	f7ff ff0a 	bl	80094d4 <I2C4_MspInit>
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80096c0:	f003 fd04 	bl	800d0cc <HAL_RCC_GetPCLK2Freq>
 80096c4:	4908      	ldr	r1, [pc, #32]	; (80096e8 <BSP_I2C4_Init+0x54>)
 80096c6:	f7ff febf 	bl	8009448 <I2C_GetTiming>
 80096ca:	4601      	mov	r1, r0
 80096cc:	4620      	mov	r0, r4
 80096ce:	f7ff ffc1 	bl	8009654 <MX_I2C4_Init>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d0ef      	beq.n	80096b6 <BSP_I2C4_Init+0x22>
          ret = BSP_ERROR_BUS_FAILURE;
 80096d6:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80096da:	e7ec      	b.n	80096b6 <BSP_I2C4_Init+0x22>
 80096dc:	2400647c 	.word	0x2400647c
 80096e0:	58001c00 	.word	0x58001c00
 80096e4:	24005a74 	.word	0x24005a74
 80096e8:	000186a0 	.word	0x000186a0

080096ec <BSP_I2C4_WriteReg>:
{
 80096ec:	b500      	push	{lr}
 80096ee:	b083      	sub	sp, #12
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	4613      	mov	r3, r2
 80096f4:	2201      	movs	r2, #1
 80096f6:	f7ff ff65 	bl	80095c4 <I2C4_WriteReg>
 80096fa:	b910      	cbnz	r0, 8009702 <BSP_I2C4_WriteReg+0x16>
}
 80096fc:	b003      	add	sp, #12
 80096fe:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009702:	4805      	ldr	r0, [pc, #20]	; (8009718 <BSP_I2C4_WriteReg+0x2c>)
 8009704:	f001 ffb5 	bl	800b672 <HAL_I2C_GetError>
 8009708:	2804      	cmp	r0, #4
 800970a:	d002      	beq.n	8009712 <BSP_I2C4_WriteReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800970c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009710:	e7f4      	b.n	80096fc <BSP_I2C4_WriteReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009712:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009716:	e7f1      	b.n	80096fc <BSP_I2C4_WriteReg+0x10>
 8009718:	2400647c 	.word	0x2400647c

0800971c <BSP_I2C4_ReadReg>:
{
 800971c:	b500      	push	{lr}
 800971e:	b083      	sub	sp, #12
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4613      	mov	r3, r2
 8009724:	2201      	movs	r2, #1
 8009726:	f7ff ff65 	bl	80095f4 <I2C4_ReadReg>
 800972a:	b910      	cbnz	r0, 8009732 <BSP_I2C4_ReadReg+0x16>
}
 800972c:	b003      	add	sp, #12
 800972e:	f85d fb04 	ldr.w	pc, [sp], #4
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009732:	4805      	ldr	r0, [pc, #20]	; (8009748 <BSP_I2C4_ReadReg+0x2c>)
 8009734:	f001 ff9d 	bl	800b672 <HAL_I2C_GetError>
 8009738:	2804      	cmp	r0, #4
 800973a:	d002      	beq.n	8009742 <BSP_I2C4_ReadReg+0x26>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800973c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009740:	e7f4      	b.n	800972c <BSP_I2C4_ReadReg+0x10>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009742:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8009746:	e7f1      	b.n	800972c <BSP_I2C4_ReadReg+0x10>
 8009748:	2400647c 	.word	0x2400647c

0800974c <BSP_GetTick>:
{
 800974c:	b508      	push	{r3, lr}
  return (int32_t)HAL_GetTick();
 800974e:	f000 fde7 	bl	800a320 <HAL_GetTick>
}
 8009752:	bd08      	pop	{r3, pc}

08009754 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8009754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009758:	b093      	sub	sp, #76	; 0x4c

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800975a:	4b7e      	ldr	r3, [pc, #504]	; (8009954 <OSPI_NOR_MspInit+0x200>)
 800975c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009764:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8009768:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800976c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009770:	9201      	str	r2, [sp, #4]
 8009772:	9a01      	ldr	r2, [sp, #4]

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8009774:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800977a:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800977c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800977e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009782:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8009784:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009788:	f042 0202 	orr.w	r2, r2, #2
 800978c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009790:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009794:	f002 0202 	and.w	r2, r2, #2
 8009798:	9202      	str	r2, [sp, #8]
 800979a:	9a02      	ldr	r2, [sp, #8]
  OSPI_DQS_GPIO_CLK_ENABLE();
 800979c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80097a0:	f042 0204 	orr.w	r2, r2, #4
 80097a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80097a8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80097ac:	f002 0204 	and.w	r2, r2, #4
 80097b0:	9203      	str	r2, [sp, #12]
 80097b2:	9a03      	ldr	r2, [sp, #12]
  OSPI_CS_GPIO_CLK_ENABLE();
 80097b4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80097b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097bc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80097c0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80097c4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80097c8:	9204      	str	r2, [sp, #16]
 80097ca:	9a04      	ldr	r2, [sp, #16]
  OSPI_D0_GPIO_CLK_ENABLE();
 80097cc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80097d0:	f042 0208 	orr.w	r2, r2, #8
 80097d4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80097d8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80097dc:	f002 0208 	and.w	r2, r2, #8
 80097e0:	9205      	str	r2, [sp, #20]
 80097e2:	9a05      	ldr	r2, [sp, #20]
  OSPI_D1_GPIO_CLK_ENABLE();
 80097e4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80097e8:	f042 0220 	orr.w	r2, r2, #32
 80097ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 80097f0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80097f4:	f002 0220 	and.w	r2, r2, #32
 80097f8:	9206      	str	r2, [sp, #24]
 80097fa:	9a06      	ldr	r2, [sp, #24]
  OSPI_D2_GPIO_CLK_ENABLE();
 80097fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009800:	f042 0220 	orr.w	r2, r2, #32
 8009804:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009808:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800980c:	f002 0220 	and.w	r2, r2, #32
 8009810:	9207      	str	r2, [sp, #28]
 8009812:	9a07      	ldr	r2, [sp, #28]
  OSPI_D3_GPIO_CLK_ENABLE();
 8009814:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009818:	f042 0220 	orr.w	r2, r2, #32
 800981c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009820:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009824:	f002 0220 	and.w	r2, r2, #32
 8009828:	9208      	str	r2, [sp, #32]
 800982a:	9a08      	ldr	r2, [sp, #32]
  OSPI_D4_GPIO_CLK_ENABLE();
 800982c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009830:	f042 0204 	orr.w	r2, r2, #4
 8009834:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009838:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800983c:	f002 0204 	and.w	r2, r2, #4
 8009840:	9209      	str	r2, [sp, #36]	; 0x24
 8009842:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_D5_GPIO_CLK_ENABLE();
 8009844:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009848:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800984c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009850:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009854:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009858:	920a      	str	r2, [sp, #40]	; 0x28
 800985a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_D6_GPIO_CLK_ENABLE();
 800985c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009864:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009868:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800986c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009870:	920b      	str	r2, [sp, #44]	; 0x2c
 8009872:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_D7_GPIO_CLK_ENABLE();
 8009874:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800987c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8009880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009888:	930c      	str	r3, [sp, #48]	; 0x30
 800988a:	9b0c      	ldr	r3, [sp, #48]	; 0x30

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800988c:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8009890:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009894:	f04f 0a02 	mov.w	sl, #2
 8009898:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800989c:	2301      	movs	r3, #1
 800989e:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80098a0:	2303      	movs	r3, #3
 80098a2:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 80098a4:	240a      	movs	r4, #10
 80098a6:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 80098a8:	a90d      	add	r1, sp, #52	; 0x34
 80098aa:	482b      	ldr	r0, [pc, #172]	; (8009958 <OSPI_NOR_MspInit+0x204>)
 80098ac:	f001 f91c 	bl	800aae8 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 80098b0:	2320      	movs	r3, #32
 80098b2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 80098b4:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 80098b6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800996c <OSPI_NOR_MspInit+0x218>
 80098ba:	a90d      	add	r1, sp, #52	; 0x34
 80098bc:	4648      	mov	r0, r9
 80098be:	f001 f913 	bl	800aae8 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 80098c2:	2304      	movs	r3, #4
 80098c4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 80098ca:	2509      	movs	r5, #9
 80098cc:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80098ce:	a90d      	add	r1, sp, #52	; 0x34
 80098d0:	4822      	ldr	r0, [pc, #136]	; (800995c <OSPI_NOR_MspInit+0x208>)
 80098d2:	f001 f909 	bl	800aae8 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 80098d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098da:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 80098dc:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 80098de:	a90d      	add	r1, sp, #52	; 0x34
 80098e0:	481f      	ldr	r0, [pc, #124]	; (8009960 <OSPI_NOR_MspInit+0x20c>)
 80098e2:	f001 f901 	bl	800aae8 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 80098e6:	f44f 7800 	mov.w	r8, #512	; 0x200
 80098ea:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 80098ee:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 80098f0:	4e1c      	ldr	r6, [pc, #112]	; (8009964 <OSPI_NOR_MspInit+0x210>)
 80098f2:	a90d      	add	r1, sp, #52	; 0x34
 80098f4:	4630      	mov	r0, r6
 80098f6:	f001 f8f7 	bl	800aae8 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 80098fa:	2780      	movs	r7, #128	; 0x80
 80098fc:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 80098fe:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8009900:	a90d      	add	r1, sp, #52	; 0x34
 8009902:	4630      	mov	r0, r6
 8009904:	f001 f8f0 	bl	800aae8 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8009908:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800990c:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800990e:	a90d      	add	r1, sp, #52	; 0x34
 8009910:	4630      	mov	r0, r6
 8009912:	f001 f8e9 	bl	800aae8 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8009916:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800991a:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800991c:	a90d      	add	r1, sp, #52	; 0x34
 800991e:	4648      	mov	r0, r9
 8009920:	f001 f8e2 	bl	800aae8 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8009924:	2308      	movs	r3, #8
 8009926:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8009928:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800992a:	a90d      	add	r1, sp, #52	; 0x34
 800992c:	480e      	ldr	r0, [pc, #56]	; (8009968 <OSPI_NOR_MspInit+0x214>)
 800992e:	f001 f8db 	bl	800aae8 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8009932:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8009936:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8009938:	a90d      	add	r1, sp, #52	; 0x34
 800993a:	4807      	ldr	r0, [pc, #28]	; (8009958 <OSPI_NOR_MspInit+0x204>)
 800993c:	f001 f8d4 	bl	800aae8 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8009940:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8009942:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8009944:	a90d      	add	r1, sp, #52	; 0x34
 8009946:	4806      	ldr	r0, [pc, #24]	; (8009960 <OSPI_NOR_MspInit+0x20c>)
 8009948:	f001 f8ce 	bl	800aae8 <HAL_GPIO_Init>
}
 800994c:	b013      	add	sp, #76	; 0x4c
 800994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009952:	bf00      	nop
 8009954:	58024400 	.word	0x58024400
 8009958:	58021800 	.word	0x58021800
 800995c:	58020400 	.word	0x58020400
 8009960:	58020c00 	.word	0x58020c00
 8009964:	58021400 	.word	0x58021400
 8009968:	58021c00 	.word	0x58021c00
 800996c:	58020800 	.word	0x58020800

08009970 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_NONE;

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009974:	4c24      	ldr	r4, [pc, #144]	; (8009a08 <OSPI_NOR_ResetMemory+0x98>)
 8009976:	235c      	movs	r3, #92	; 0x5c
 8009978:	fb03 4400 	mla	r4, r3, r0, r4
 800997c:	2200      	movs	r2, #0
 800997e:	4611      	mov	r1, r2
 8009980:	4620      	mov	r0, r4
 8009982:	f7ff fbe7 	bl	8009154 <MX25LM51245G_ResetEnable>
 8009986:	bb60      	cbnz	r0, 80099e2 <OSPI_NOR_ResetMemory+0x72>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009988:	2200      	movs	r2, #0
 800998a:	4611      	mov	r1, r2
 800998c:	4620      	mov	r0, r4
 800998e:	f7ff fc14 	bl	80091ba <MX25LM51245G_ResetMemory>
 8009992:	bb48      	cbnz	r0, 80099e8 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009994:	2200      	movs	r2, #0
 8009996:	2101      	movs	r1, #1
 8009998:	4620      	mov	r0, r4
 800999a:	f7ff fbdb 	bl	8009154 <MX25LM51245G_ResetEnable>
 800999e:	bb30      	cbnz	r0, 80099ee <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80099a0:	2200      	movs	r2, #0
 80099a2:	2101      	movs	r1, #1
 80099a4:	4620      	mov	r0, r4
 80099a6:	f7ff fc08 	bl	80091ba <MX25LM51245G_ResetMemory>
 80099aa:	bb18      	cbnz	r0, 80099f4 <OSPI_NOR_ResetMemory+0x84>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80099ac:	2201      	movs	r2, #1
 80099ae:	4611      	mov	r1, r2
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7ff fbcf 	bl	8009154 <MX25LM51245G_ResetEnable>
 80099b6:	bb00      	cbnz	r0, 80099fa <OSPI_NOR_ResetMemory+0x8a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80099b8:	2201      	movs	r2, #1
 80099ba:	4611      	mov	r1, r2
 80099bc:	4620      	mov	r0, r4
 80099be:	f7ff fbfc 	bl	80091ba <MX25LM51245G_ResetMemory>
 80099c2:	4604      	mov	r4, r0
 80099c4:	b9e0      	cbnz	r0, 8009a00 <OSPI_NOR_ResetMemory+0x90>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 80099c6:	4811      	ldr	r0, [pc, #68]	; (8009a0c <OSPI_NOR_ResetMemory+0x9c>)
 80099c8:	2301      	movs	r3, #1
 80099ca:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 80099ce:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80099d2:	2300      	movs	r3, #0
 80099d4:	706b      	strb	r3, [r5, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 80099d6:	70ab      	strb	r3, [r5, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80099d8:	2064      	movs	r0, #100	; 0x64
 80099da:	f000 fca7 	bl	800a32c <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
}
 80099de:	4620      	mov	r0, r4
 80099e0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80099e2:	f06f 0404 	mvn.w	r4, #4
 80099e6:	e7fa      	b.n	80099de <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80099e8:	f06f 0404 	mvn.w	r4, #4
 80099ec:	e7f7      	b.n	80099de <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80099ee:	f06f 0404 	mvn.w	r4, #4
 80099f2:	e7f4      	b.n	80099de <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80099f4:	f06f 0404 	mvn.w	r4, #4
 80099f8:	e7f1      	b.n	80099de <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80099fa:	f06f 0404 	mvn.w	r4, #4
 80099fe:	e7ee      	b.n	80099de <OSPI_NOR_ResetMemory+0x6e>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a00:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8009a04:	e7eb      	b.n	80099de <OSPI_NOR_ResetMemory+0x6e>
 8009a06:	bf00      	nop
 8009a08:	240064d0 	.word	0x240064d0
 8009a0c:	240064c8 	.word	0x240064c8

08009a10 <OSPI_NOR_MspDeInit>:
{
 8009a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8009a12:	2104      	movs	r1, #4
 8009a14:	4820      	ldr	r0, [pc, #128]	; (8009a98 <OSPI_NOR_MspDeInit+0x88>)
 8009a16:	f001 f977 	bl	800ad08 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8009a1a:	4f20      	ldr	r7, [pc, #128]	; (8009a9c <OSPI_NOR_MspDeInit+0x8c>)
 8009a1c:	2120      	movs	r1, #32
 8009a1e:	4638      	mov	r0, r7
 8009a20:	f001 f972 	bl	800ad08 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8009a24:	4e1e      	ldr	r6, [pc, #120]	; (8009aa0 <OSPI_NOR_MspDeInit+0x90>)
 8009a26:	2140      	movs	r1, #64	; 0x40
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f001 f96d 	bl	800ad08 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8009a2e:	4d1d      	ldr	r5, [pc, #116]	; (8009aa4 <OSPI_NOR_MspDeInit+0x94>)
 8009a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a34:	4628      	mov	r0, r5
 8009a36:	f001 f967 	bl	800ad08 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8009a3a:	4c1b      	ldr	r4, [pc, #108]	; (8009aa8 <OSPI_NOR_MspDeInit+0x98>)
 8009a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a40:	4620      	mov	r0, r4
 8009a42:	f001 f961 	bl	800ad08 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8009a46:	2180      	movs	r1, #128	; 0x80
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f001 f95d 	bl	800ad08 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8009a4e:	2140      	movs	r1, #64	; 0x40
 8009a50:	4620      	mov	r0, r4
 8009a52:	f001 f959 	bl	800ad08 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8009a56:	2102      	movs	r1, #2
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f001 f955 	bl	800ad08 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8009a5e:	2108      	movs	r1, #8
 8009a60:	4812      	ldr	r0, [pc, #72]	; (8009aac <OSPI_NOR_MspDeInit+0x9c>)
 8009a62:	f001 f951 	bl	800ad08 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8009a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f001 f94c 	bl	800ad08 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8009a70:	2180      	movs	r1, #128	; 0x80
 8009a72:	4628      	mov	r0, r5
 8009a74:	f001 f948 	bl	800ad08 <HAL_GPIO_DeInit>
  OSPI_FORCE_RESET();
 8009a78:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <OSPI_NOR_MspDeInit+0xa0>)
 8009a7a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a80:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8009a82:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009a84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a88:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_CLK_DISABLE();
 8009a8a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009a8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a92:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8009a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a98:	58020400 	.word	0x58020400
 8009a9c:	58020800 	.word	0x58020800
 8009aa0:	58021800 	.word	0x58021800
 8009aa4:	58020c00 	.word	0x58020c00
 8009aa8:	58021400 	.word	0x58021400
 8009aac:	58021c00 	.word	0x58021c00
 8009ab0:	58024400 	.word	0x58024400

08009ab4 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	4604      	mov	r4, r0
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009aba:	4d2b      	ldr	r5, [pc, #172]	; (8009b68 <OSPI_NOR_ExitOPIMode+0xb4>)
 8009abc:	235c      	movs	r3, #92	; 0x5c
 8009abe:	fb03 5500 	mla	r5, r3, r0, r5
 8009ac2:	4b2a      	ldr	r3, [pc, #168]	; (8009b6c <OSPI_NOR_ExitOPIMode+0xb8>)
 8009ac4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009ac8:	789a      	ldrb	r2, [r3, #2]
 8009aca:	7859      	ldrb	r1, [r3, #1]
 8009acc:	4628      	mov	r0, r5
 8009ace:	f7ff f9cf 	bl	8008e70 <MX25LM51245G_WriteEnable>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d138      	bne.n	8009b48 <OSPI_NOR_ExitOPIMode+0x94>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f88d 300c 	strb.w	r3, [sp, #12]
    reg[1] = 0;
 8009adc:	f88d 300d 	strb.w	r3, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8009ae0:	4922      	ldr	r1, [pc, #136]	; (8009b6c <OSPI_NOR_ExitOPIMode+0xb8>)
 8009ae2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	788a      	ldrb	r2, [r1, #2]
 8009aea:	7849      	ldrb	r1, [r1, #1]
 8009aec:	4628      	mov	r0, r5
 8009aee:	f7ff fa56 	bl	8008f9e <MX25LM51245G_WriteCfg2Register>
 8009af2:	4606      	mov	r6, r0
 8009af4:	bb58      	cbnz	r0, 8009b4e <OSPI_NOR_ExitOPIMode+0x9a>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8009af6:	2028      	movs	r0, #40	; 0x28
 8009af8:	f000 fc18 	bl	800a32c <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8009afc:	4b1b      	ldr	r3, [pc, #108]	; (8009b6c <OSPI_NOR_ExitOPIMode+0xb8>)
 8009afe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b02:	789b      	ldrb	r3, [r3, #2]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d014      	beq.n	8009b32 <OSPI_NOR_ExitOPIMode+0x7e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f7ff f872 	bl	8008bf6 <MX25LM51245G_AutoPollingMemReady>
 8009b12:	b9f8      	cbnz	r0, 8009b54 <OSPI_NOR_ExitOPIMode+0xa0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8009b14:	ab03      	add	r3, sp, #12
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f7ff faa4 	bl	800906c <MX25LM51245G_ReadCfg2Register>
 8009b24:	b9c8      	cbnz	r0, 8009b5a <OSPI_NOR_ExitOPIMode+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else
      {
        if (reg[0] != 0U)
 8009b26:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009b2a:	b9cb      	cbnz	r3, 8009b60 <OSPI_NOR_ExitOPIMode+0xac>
    }
  }

  /* Return BSP status */
  return ret;
}
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	b004      	add	sp, #16
 8009b30:	bd70      	pop	{r4, r5, r6, pc}
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8009b32:	2300      	movs	r3, #0
 8009b34:	60eb      	str	r3, [r5, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8009b36:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f002 fc6f 	bl	800c41c <HAL_OSPI_Init>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d0e2      	beq.n	8009b08 <OSPI_NOR_ExitOPIMode+0x54>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8009b42:	f06f 0603 	mvn.w	r6, #3
 8009b46:	e7df      	b.n	8009b08 <OSPI_NOR_ExitOPIMode+0x54>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b48:	f06f 0604 	mvn.w	r6, #4
 8009b4c:	e7ee      	b.n	8009b2c <OSPI_NOR_ExitOPIMode+0x78>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b4e:	f06f 0604 	mvn.w	r6, #4
 8009b52:	e7eb      	b.n	8009b2c <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b54:	f06f 0604 	mvn.w	r6, #4
 8009b58:	e7e8      	b.n	8009b2c <OSPI_NOR_ExitOPIMode+0x78>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b5a:	f06f 0604 	mvn.w	r6, #4
 8009b5e:	e7e5      	b.n	8009b2c <OSPI_NOR_ExitOPIMode+0x78>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b60:	f06f 0604 	mvn.w	r6, #4
  return ret;
 8009b64:	e7e2      	b.n	8009b2c <OSPI_NOR_ExitOPIMode+0x78>
 8009b66:	bf00      	nop
 8009b68:	240064d0 	.word	0x240064d0
 8009b6c:	240064c8 	.word	0x240064c8

08009b70 <OSPI_NOR_EnterSOPIMode>:
{
 8009b70:	b530      	push	{r4, r5, lr}
 8009b72:	b085      	sub	sp, #20
 8009b74:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009b76:	4c2e      	ldr	r4, [pc, #184]	; (8009c30 <OSPI_NOR_EnterSOPIMode+0xc0>)
 8009b78:	235c      	movs	r3, #92	; 0x5c
 8009b7a:	fb03 4400 	mla	r4, r3, r0, r4
 8009b7e:	4b2d      	ldr	r3, [pc, #180]	; (8009c34 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009b80:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009b84:	789a      	ldrb	r2, [r3, #2]
 8009b86:	7859      	ldrb	r1, [r3, #1]
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f7ff f971 	bl	8008e70 <MX25LM51245G_WriteEnable>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d139      	bne.n	8009c06 <OSPI_NOR_EnterSOPIMode+0x96>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8009b92:	4928      	ldr	r1, [pc, #160]	; (8009c34 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009b94:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009b98:	2307      	movs	r3, #7
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009ba0:	788a      	ldrb	r2, [r1, #2]
 8009ba2:	7849      	ldrb	r1, [r1, #1]
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f7ff f9fa 	bl	8008f9e <MX25LM51245G_WriteCfg2Register>
 8009baa:	bb78      	cbnz	r0, 8009c0c <OSPI_NOR_EnterSOPIMode+0x9c>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009bac:	4b21      	ldr	r3, [pc, #132]	; (8009c34 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009bae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009bb2:	789a      	ldrb	r2, [r3, #2]
 8009bb4:	7859      	ldrb	r1, [r3, #1]
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f7ff f95a 	bl	8008e70 <MX25LM51245G_WriteEnable>
 8009bbc:	bb48      	cbnz	r0, 8009c12 <OSPI_NOR_EnterSOPIMode+0xa2>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8009bbe:	481d      	ldr	r0, [pc, #116]	; (8009c34 <OSPI_NOR_EnterSOPIMode+0xc4>)
 8009bc0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	78aa      	ldrb	r2, [r5, #2]
 8009bcc:	7869      	ldrb	r1, [r5, #1]
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f7ff f9e5 	bl	8008f9e <MX25LM51245G_WriteCfg2Register>
 8009bd4:	bb00      	cbnz	r0, 8009c18 <OSPI_NOR_EnterSOPIMode+0xa8>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8009bd6:	2028      	movs	r0, #40	; 0x28
 8009bd8:	f000 fba8 	bl	800a32c <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2101      	movs	r1, #1
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7ff f808 	bl	8008bf6 <MX25LM51245G_AutoPollingMemReady>
 8009be6:	b9d0      	cbnz	r0, 8009c1e <OSPI_NOR_EnterSOPIMode+0xae>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8009be8:	ab03      	add	r3, sp, #12
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	2300      	movs	r3, #0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f7ff fa3a 	bl	800906c <MX25LM51245G_ReadCfg2Register>
 8009bf8:	b9a0      	cbnz	r0, 8009c24 <OSPI_NOR_EnterSOPIMode+0xb4>
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 8009bfa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d113      	bne.n	8009c2a <OSPI_NOR_EnterSOPIMode+0xba>
}
 8009c02:	b005      	add	sp, #20
 8009c04:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c06:	f06f 0004 	mvn.w	r0, #4
 8009c0a:	e7fa      	b.n	8009c02 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c0c:	f06f 0004 	mvn.w	r0, #4
 8009c10:	e7f7      	b.n	8009c02 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c12:	f06f 0004 	mvn.w	r0, #4
 8009c16:	e7f4      	b.n	8009c02 <OSPI_NOR_EnterSOPIMode+0x92>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c18:	f06f 0004 	mvn.w	r0, #4
 8009c1c:	e7f1      	b.n	8009c02 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c1e:	f06f 0004 	mvn.w	r0, #4
 8009c22:	e7ee      	b.n	8009c02 <OSPI_NOR_EnterSOPIMode+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c24:	f06f 0004 	mvn.w	r0, #4
 8009c28:	e7eb      	b.n	8009c02 <OSPI_NOR_EnterSOPIMode+0x92>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c2a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8009c2e:	e7e8      	b.n	8009c02 <OSPI_NOR_EnterSOPIMode+0x92>
 8009c30:	240064d0 	.word	0x240064d0
 8009c34:	240064c8 	.word	0x240064c8

08009c38 <OSPI_NOR_EnterDOPIMode>:
{
 8009c38:	b530      	push	{r4, r5, lr}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	4605      	mov	r5, r0
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009c3e:	4c35      	ldr	r4, [pc, #212]	; (8009d14 <OSPI_NOR_EnterDOPIMode+0xdc>)
 8009c40:	235c      	movs	r3, #92	; 0x5c
 8009c42:	fb03 4400 	mla	r4, r3, r0, r4
 8009c46:	4b34      	ldr	r3, [pc, #208]	; (8009d18 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8009c48:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009c4c:	789a      	ldrb	r2, [r3, #2]
 8009c4e:	7859      	ldrb	r1, [r3, #1]
 8009c50:	4620      	mov	r0, r4
 8009c52:	f7ff f90d 	bl	8008e70 <MX25LM51245G_WriteEnable>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d144      	bne.n	8009ce4 <OSPI_NOR_EnterDOPIMode+0xac>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8009c5a:	492f      	ldr	r1, [pc, #188]	; (8009d18 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8009c5c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009c60:	2307      	movs	r3, #7
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009c68:	788a      	ldrb	r2, [r1, #2]
 8009c6a:	7849      	ldrb	r1, [r1, #1]
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f7ff f996 	bl	8008f9e <MX25LM51245G_WriteCfg2Register>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d139      	bne.n	8009cea <OSPI_NOR_EnterDOPIMode+0xb2>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009c76:	4b28      	ldr	r3, [pc, #160]	; (8009d18 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8009c78:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009c7c:	789a      	ldrb	r2, [r3, #2]
 8009c7e:	7859      	ldrb	r1, [r3, #1]
 8009c80:	4620      	mov	r0, r4
 8009c82:	f7ff f8f5 	bl	8008e70 <MX25LM51245G_WriteEnable>
 8009c86:	bb98      	cbnz	r0, 8009cf0 <OSPI_NOR_EnterDOPIMode+0xb8>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8009c88:	4923      	ldr	r1, [pc, #140]	; (8009d18 <OSPI_NOR_EnterDOPIMode+0xe0>)
 8009c8a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009c8e:	2302      	movs	r3, #2
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	2300      	movs	r3, #0
 8009c94:	788a      	ldrb	r2, [r1, #2]
 8009c96:	7849      	ldrb	r1, [r1, #1]
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f7ff f980 	bl	8008f9e <MX25LM51245G_WriteCfg2Register>
 8009c9e:	bb50      	cbnz	r0, 8009cf6 <OSPI_NOR_EnterDOPIMode+0xbe>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8009ca0:	2028      	movs	r0, #40	; 0x28
 8009ca2:	f000 fb43 	bl	800a32c <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8009ca6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009caa:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8009cac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f002 fbb2 	bl	800c41c <HAL_OSPI_Init>
 8009cb8:	bb00      	cbnz	r0, 8009cfc <OSPI_NOR_EnterDOPIMode+0xc4>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f7fe ff99 	bl	8008bf6 <MX25LM51245G_AutoPollingMemReady>
 8009cc4:	b9e8      	cbnz	r0, 8009d02 <OSPI_NOR_EnterDOPIMode+0xca>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8009cc6:	ab03      	add	r3, sp, #12
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2201      	movs	r2, #1
 8009cce:	4611      	mov	r1, r2
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f7ff f9cb 	bl	800906c <MX25LM51245G_ReadCfg2Register>
 8009cd6:	b9b8      	cbnz	r0, 8009d08 <OSPI_NOR_EnterDOPIMode+0xd0>
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 8009cd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d116      	bne.n	8009d0e <OSPI_NOR_EnterDOPIMode+0xd6>
}
 8009ce0:	b005      	add	sp, #20
 8009ce2:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ce4:	f06f 0004 	mvn.w	r0, #4
 8009ce8:	e7fa      	b.n	8009ce0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cea:	f06f 0004 	mvn.w	r0, #4
 8009cee:	e7f7      	b.n	8009ce0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cf0:	f06f 0004 	mvn.w	r0, #4
 8009cf4:	e7f4      	b.n	8009ce0 <OSPI_NOR_EnterDOPIMode+0xa8>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009cf6:	f06f 0004 	mvn.w	r0, #4
 8009cfa:	e7f1      	b.n	8009ce0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009cfc:	f06f 0003 	mvn.w	r0, #3
 8009d00:	e7ee      	b.n	8009ce0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d02:	f06f 0004 	mvn.w	r0, #4
 8009d06:	e7eb      	b.n	8009ce0 <OSPI_NOR_EnterDOPIMode+0xa8>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d08:	f06f 0004 	mvn.w	r0, #4
 8009d0c:	e7e8      	b.n	8009ce0 <OSPI_NOR_EnterDOPIMode+0xa8>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d0e:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8009d12:	e7e5      	b.n	8009ce0 <OSPI_NOR_EnterDOPIMode+0xa8>
 8009d14:	240064d0 	.word	0x240064d0
 8009d18:	240064c8 	.word	0x240064c8

08009d1c <MX_OSPI_NOR_Init>:
{
 8009d1c:	b508      	push	{r3, lr}
  hospi->Instance = OCTOSPI1;
 8009d1e:	4b12      	ldr	r3, [pc, #72]	; (8009d68 <MX_OSPI_NOR_Init+0x4c>)
 8009d20:	6003      	str	r3, [r0, #0]
  hospi->Init.FifoThreshold      = 4;
 8009d22:	2304      	movs	r3, #4
 8009d24:	6043      	str	r3, [r0, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8009d26:	2300      	movs	r3, #0
 8009d28:	6083      	str	r3, [r0, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8009d2a:	680a      	ldr	r2, [r1, #0]
 8009d2c:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8009d2e:	2202      	movs	r2, #2
 8009d30:	6142      	str	r2, [r0, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8009d32:	6183      	str	r3, [r0, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8009d34:	61c3      	str	r3, [r0, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8009d36:	6203      	str	r3, [r0, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8009d38:	684a      	ldr	r2, [r1, #4]
 8009d3a:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8009d3c:	688a      	ldr	r2, [r1, #8]
 8009d3e:	6282      	str	r2, [r0, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8009d40:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8009d42:	2308      	movs	r3, #8
 8009d44:	6343      	str	r3, [r0, #52]	; 0x34
  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8009d46:	68cb      	ldr	r3, [r1, #12]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d005      	beq.n	8009d58 <MX_OSPI_NOR_Init+0x3c>
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8009d50:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8009d52:	f002 fb63 	bl	800c41c <HAL_OSPI_Init>
}
 8009d56:	bd08      	pop	{r3, pc}
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8009d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d5c:	60c3      	str	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8009d5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d62:	62c3      	str	r3, [r0, #44]	; 0x2c
 8009d64:	e7f5      	b.n	8009d52 <MX_OSPI_NOR_Init+0x36>
 8009d66:	bf00      	nop
 8009d68:	52005000 	.word	0x52005000

08009d6c <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009d6c:	bb38      	cbnz	r0, 8009dbe <BSP_OSPI_NOR_EnableMemoryMappedMode+0x52>
{
 8009d6e:	b510      	push	{r4, lr}
 8009d70:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8009d72:	4b17      	ldr	r3, [pc, #92]	; (8009dd0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8009d74:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009d78:	789b      	ldrb	r3, [r3, #2]
 8009d7a:	b983      	cbnz	r3, 8009d9e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x32>
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8009d7c:	4b14      	ldr	r3, [pc, #80]	; (8009dd0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8009d7e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009d82:	2201      	movs	r2, #1
 8009d84:	7859      	ldrb	r1, [r3, #1]
 8009d86:	4b13      	ldr	r3, [pc, #76]	; (8009dd4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 8009d88:	205c      	movs	r0, #92	; 0x5c
 8009d8a:	fb00 3004 	mla	r0, r0, r4, r3
 8009d8e:	f7fe ffb1 	bl	8008cf4 <MX25LM51245G_EnableMemoryMappedModeSTR>
 8009d92:	b9b8      	cbnz	r0, 8009dc4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x58>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8009d94:	4b0e      	ldr	r3, [pc, #56]	; (8009dd0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8009d96:	2202      	movs	r2, #2
 8009d98:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 8009d9c:	bd10      	pop	{r4, pc}
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8009d9e:	4b0c      	ldr	r3, [pc, #48]	; (8009dd0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8009da0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009da4:	7859      	ldrb	r1, [r3, #1]
 8009da6:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x68>)
 8009da8:	205c      	movs	r0, #92	; 0x5c
 8009daa:	fb00 3004 	mla	r0, r0, r4, r3
 8009dae:	f7ff f80d 	bl	8008dcc <MX25LM51245G_EnableMemoryMappedModeDTR>
 8009db2:	b950      	cbnz	r0, 8009dca <BSP_OSPI_NOR_EnableMemoryMappedMode+0x5e>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8009db4:	4b06      	ldr	r3, [pc, #24]	; (8009dd0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x64>)
 8009db6:	2202      	movs	r2, #2
 8009db8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 8009dbc:	e7ee      	b.n	8009d9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
    ret = BSP_ERROR_WRONG_PARAM;
 8009dbe:	f06f 0001 	mvn.w	r0, #1
}
 8009dc2:	4770      	bx	lr
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009dc4:	f06f 0004 	mvn.w	r0, #4
 8009dc8:	e7e8      	b.n	8009d9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009dca:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8009dce:	e7e5      	b.n	8009d9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x30>
 8009dd0:	240064c8 	.word	0x240064c8
 8009dd4:	240064d0 	.word	0x240064d0

08009dd8 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009dd8:	b990      	cbnz	r0, 8009e00 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x28>
{
 8009dda:	b510      	push	{r4, lr}
 8009ddc:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8009dde:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8009de0:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d10e      	bne.n	8009e06 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8009de8:	4b0b      	ldr	r3, [pc, #44]	; (8009e18 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x40>)
 8009dea:	205c      	movs	r0, #92	; 0x5c
 8009dec:	fb00 3004 	mla	r0, r0, r4, r3
 8009df0:	f002 facc 	bl	800c38c <HAL_OSPI_Abort>
 8009df4:	b950      	cbnz	r0, 8009e0c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x34>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8009df6:	4b07      	ldr	r3, [pc, #28]	; (8009e14 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x3c>)
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
}
 8009dfe:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009e00:	f06f 0001 	mvn.w	r0, #1
}
 8009e04:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8009e06:	f06f 001a 	mvn.w	r0, #26
 8009e0a:	e7f8      	b.n	8009dfe <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
    ret = BSP_ERROR_PERIPH_FAILURE;
 8009e0c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009e10:	e7f5      	b.n	8009dfe <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
 8009e12:	bf00      	nop
 8009e14:	240064c8 	.word	0x240064c8
 8009e18:	240064d0 	.word	0x240064d0

08009e1c <BSP_OSPI_NOR_DeInit>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009e1c:	bb08      	cbnz	r0, 8009e62 <BSP_OSPI_NOR_DeInit+0x46>
{
 8009e1e:	b510      	push	{r4, lr}
 8009e20:	4604      	mov	r4, r0
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8009e22:	4b13      	ldr	r3, [pc, #76]	; (8009e70 <BSP_OSPI_NOR_DeInit+0x54>)
 8009e24:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d013      	beq.n	8009e54 <BSP_OSPI_NOR_DeInit+0x38>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8009e2c:	4b10      	ldr	r3, [pc, #64]	; (8009e70 <BSP_OSPI_NOR_DeInit+0x54>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8009e34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e38:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8009e3a:	709a      	strb	r2, [r3, #2]
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8009e3c:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <BSP_OSPI_NOR_DeInit+0x58>)
 8009e3e:	225c      	movs	r2, #92	; 0x5c
 8009e40:	fb02 3404 	mla	r4, r2, r4, r3
 8009e44:	4620      	mov	r0, r4
 8009e46:	f7ff fde3 	bl	8009a10 <OSPI_NOR_MspDeInit>
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f001 ffec 	bl	800be28 <HAL_OSPI_DeInit>
 8009e50:	b950      	cbnz	r0, 8009e68 <BSP_OSPI_NOR_DeInit+0x4c>
}
 8009e52:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8009e54:	f7ff ffc0 	bl	8009dd8 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d0e7      	beq.n	8009e2c <BSP_OSPI_NOR_DeInit+0x10>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009e5c:	f06f 0004 	mvn.w	r0, #4
 8009e60:	e7f7      	b.n	8009e52 <BSP_OSPI_NOR_DeInit+0x36>
    ret = BSP_ERROR_WRONG_PARAM;
 8009e62:	f06f 0001 	mvn.w	r0, #1
}
 8009e66:	4770      	bx	lr
        ret = BSP_ERROR_PERIPH_FAILURE;
 8009e68:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009e6c:	e7f1      	b.n	8009e52 <BSP_OSPI_NOR_DeInit+0x36>
 8009e6e:	bf00      	nop
 8009e70:	240064c8 	.word	0x240064c8
 8009e74:	240064d0 	.word	0x240064d0

08009e78 <BSP_OSPI_NOR_ConfigFlash>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d141      	bne.n	8009f00 <BSP_OSPI_NOR_ConfigFlash+0x88>
{
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	460d      	mov	r5, r1
 8009e80:	4616      	mov	r6, r2
 8009e82:	4604      	mov	r4, r0
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8009e84:	4b21      	ldr	r3, [pc, #132]	; (8009f0c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8009e86:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d03b      	beq.n	8009f06 <BSP_OSPI_NOR_ConfigFlash+0x8e>
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8009e8e:	4b1f      	ldr	r3, [pc, #124]	; (8009f0c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8009e90:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d00b      	beq.n	8009eb2 <BSP_OSPI_NOR_ConfigFlash+0x3a>
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8009e9a:	2901      	cmp	r1, #1
 8009e9c:	d025      	beq.n	8009eea <BSP_OSPI_NOR_ConfigFlash+0x72>
  int32_t ret = BSP_ERROR_NONE;
 8009e9e:	2000      	movs	r0, #0
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8009ea0:	4b1a      	ldr	r3, [pc, #104]	; (8009f0c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8009ea8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009eac:	7065      	strb	r5, [r4, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8009eae:	70a6      	strb	r6, [r4, #2]
}
 8009eb0:	bd70      	pop	{r4, r5, r6, pc}
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8009eb2:	2901      	cmp	r1, #1
 8009eb4:	d105      	bne.n	8009ec2 <BSP_OSPI_NOR_ConfigFlash+0x4a>
 8009eb6:	4b15      	ldr	r3, [pc, #84]	; (8009f0c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8009eb8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009ebc:	789b      	ldrb	r3, [r3, #2]
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d01c      	beq.n	8009efc <BSP_OSPI_NOR_ConfigFlash+0x84>
        ret = OSPI_NOR_ExitOPIMode(Instance);
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f7ff fdf6 	bl	8009ab4 <OSPI_NOR_ExitOPIMode>
        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	bf08      	it	eq
 8009ecc:	2d01      	cmpeq	r5, #1
 8009ece:	d10f      	bne.n	8009ef0 <BSP_OSPI_NOR_ConfigFlash+0x78>
          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8009ed0:	4b0e      	ldr	r3, [pc, #56]	; (8009f0c <BSP_OSPI_NOR_ConfigFlash+0x94>)
 8009ed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ed6:	789b      	ldrb	r3, [r3, #2]
 8009ed8:	b91b      	cbnz	r3, 8009ee2 <BSP_OSPI_NOR_ConfigFlash+0x6a>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8009eda:	4620      	mov	r0, r4
 8009edc:	f7ff feac 	bl	8009c38 <OSPI_NOR_EnterDOPIMode>
 8009ee0:	e006      	b.n	8009ef0 <BSP_OSPI_NOR_ConfigFlash+0x78>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f7ff fe44 	bl	8009b70 <OSPI_NOR_EnterSOPIMode>
 8009ee8:	e002      	b.n	8009ef0 <BSP_OSPI_NOR_ConfigFlash+0x78>
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8009eea:	b922      	cbnz	r2, 8009ef6 <BSP_OSPI_NOR_ConfigFlash+0x7e>
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 8009eec:	f7ff fe40 	bl	8009b70 <OSPI_NOR_EnterSOPIMode>
    if(ret == BSP_ERROR_NONE)
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d1dd      	bne.n	8009eb0 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8009ef4:	e7d4      	b.n	8009ea0 <BSP_OSPI_NOR_ConfigFlash+0x28>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8009ef6:	f7ff fe9f 	bl	8009c38 <OSPI_NOR_EnterDOPIMode>
 8009efa:	e7f9      	b.n	8009ef0 <BSP_OSPI_NOR_ConfigFlash+0x78>
  int32_t ret = BSP_ERROR_NONE;
 8009efc:	2000      	movs	r0, #0
 8009efe:	e7cf      	b.n	8009ea0 <BSP_OSPI_NOR_ConfigFlash+0x28>
    ret = BSP_ERROR_WRONG_PARAM;
 8009f00:	f06f 0001 	mvn.w	r0, #1
}
 8009f04:	4770      	bx	lr
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8009f06:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8009f0a:	e7d1      	b.n	8009eb0 <BSP_OSPI_NOR_ConfigFlash+0x38>
 8009f0c:	240064c8 	.word	0x240064c8

08009f10 <BSP_OSPI_NOR_Init>:
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d13f      	bne.n	8009f94 <BSP_OSPI_NOR_Init+0x84>
{
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	b08e      	sub	sp, #56	; 0x38
 8009f18:	460d      	mov	r5, r1
 8009f1a:	4604      	mov	r4, r0
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8009f1c:	4b23      	ldr	r3, [pc, #140]	; (8009fac <BSP_OSPI_NOR_Init+0x9c>)
 8009f1e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 8009f22:	b113      	cbz	r3, 8009f2a <BSP_OSPI_NOR_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8009f24:	2000      	movs	r0, #0
}
 8009f26:	b00e      	add	sp, #56	; 0x38
 8009f28:	bd70      	pop	{r4, r5, r6, pc}
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8009f2a:	4e21      	ldr	r6, [pc, #132]	; (8009fb0 <BSP_OSPI_NOR_Init+0xa0>)
 8009f2c:	235c      	movs	r3, #92	; 0x5c
 8009f2e:	fb03 6600 	mla	r6, r3, r0, r6
 8009f32:	4630      	mov	r0, r6
 8009f34:	f7ff fc0e 	bl	8009754 <OSPI_NOR_MspInit>
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8009f38:	a805      	add	r0, sp, #20
 8009f3a:	f7fe fe43 	bl	8008bc4 <MX25LM51245G_GetFlashInfo>
        ospi_config.ClockPrescaler = 3U;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	9302      	str	r3, [sp, #8]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8009f42:	9b05      	ldr	r3, [sp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f44:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009f48:	b313      	cbz	r3, 8009f90 <BSP_OSPI_NOR_Init+0x80>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8009f4a:	fab3 f383 	clz	r3, r3
 8009f4e:	9301      	str	r3, [sp, #4]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8009f50:	2300      	movs	r3, #0
 8009f52:	9303      	str	r3, [sp, #12]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8009f54:	786b      	ldrb	r3, [r5, #1]
 8009f56:	9304      	str	r3, [sp, #16]
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8009f58:	a901      	add	r1, sp, #4
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7ff fede 	bl	8009d1c <MX_OSPI_NOR_Init>
 8009f60:	b9d8      	cbnz	r0, 8009f9a <BSP_OSPI_NOR_Init+0x8a>
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8009f62:	4620      	mov	r0, r4
 8009f64:	f7ff fd04 	bl	8009970 <OSPI_NOR_ResetMemory>
 8009f68:	b9d0      	cbnz	r0, 8009fa0 <BSP_OSPI_NOR_Init+0x90>
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009f6a:	4b10      	ldr	r3, [pc, #64]	; (8009fac <BSP_OSPI_NOR_Init+0x9c>)
 8009f6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f70:	789a      	ldrb	r2, [r3, #2]
 8009f72:	7859      	ldrb	r1, [r3, #1]
 8009f74:	4630      	mov	r0, r6
 8009f76:	f7fe fe3e 	bl	8008bf6 <MX25LM51245G_AutoPollingMemReady>
 8009f7a:	b9a0      	cbnz	r0, 8009fa6 <BSP_OSPI_NOR_Init+0x96>
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8009f7c:	786a      	ldrb	r2, [r5, #1]
 8009f7e:	7829      	ldrb	r1, [r5, #0]
 8009f80:	4620      	mov	r0, r4
 8009f82:	f7ff ff79 	bl	8009e78 <BSP_OSPI_NOR_ConfigFlash>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d0cd      	beq.n	8009f26 <BSP_OSPI_NOR_Init+0x16>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f8a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8009f8e:	e7ca      	b.n	8009f26 <BSP_OSPI_NOR_Init+0x16>
    return 32U;
 8009f90:	2320      	movs	r3, #32
 8009f92:	e7dc      	b.n	8009f4e <BSP_OSPI_NOR_Init+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 8009f94:	f06f 0001 	mvn.w	r0, #1
}
 8009f98:	4770      	bx	lr
          ret = BSP_ERROR_PERIPH_FAILURE;
 8009f9a:	f06f 0003 	mvn.w	r0, #3
 8009f9e:	e7c2      	b.n	8009f26 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fa0:	f06f 0004 	mvn.w	r0, #4
 8009fa4:	e7bf      	b.n	8009f26 <BSP_OSPI_NOR_Init+0x16>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fa6:	f06f 0004 	mvn.w	r0, #4
 8009faa:	e7bc      	b.n	8009f26 <BSP_OSPI_NOR_Init+0x16>
 8009fac:	240064c8 	.word	0x240064c8
 8009fb0:	240064d0 	.word	0x240064d0

08009fb4 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	4604      	mov	r4, r0
  int32_t ret              = BSP_ERROR_NONE;
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	9301      	str	r3, [sp, #4]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8009fbe:	2370      	movs	r3, #112	; 0x70
 8009fc0:	f8ad 3010 	strh.w	r3, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 8009fc4:	4b17      	ldr	r3, [pc, #92]	; (800a024 <FT5336_Probe+0x70>)
 8009fc6:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8009fc8:	4b17      	ldr	r3, [pc, #92]	; (800a028 <FT5336_Probe+0x74>)
 8009fca:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8009fcc:	4b17      	ldr	r3, [pc, #92]	; (800a02c <FT5336_Probe+0x78>)
 8009fce:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8009fd0:	4b17      	ldr	r3, [pc, #92]	; (800a030 <FT5336_Probe+0x7c>)
 8009fd2:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8009fd4:	4b17      	ldr	r3, [pc, #92]	; (800a034 <FT5336_Probe+0x80>)
 8009fd6:	9307      	str	r3, [sp, #28]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8009fd8:	a902      	add	r1, sp, #8
 8009fda:	4817      	ldr	r0, [pc, #92]	; (800a038 <FT5336_Probe+0x84>)
 8009fdc:	f7fe fd50 	bl	8008a80 <FT5336_RegisterBusIO>
 8009fe0:	b998      	cbnz	r0, 800a00a <FT5336_Probe+0x56>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8009fe2:	a901      	add	r1, sp, #4
 8009fe4:	4814      	ldr	r0, [pc, #80]	; (800a038 <FT5336_Probe+0x84>)
 8009fe6:	f7fe fc8d 	bl	8008904 <FT5336_ReadID>
 8009fea:	b988      	cbnz	r0, 800a010 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 8009fec:	9b01      	ldr	r3, [sp, #4]
 8009fee:	2b51      	cmp	r3, #81	; 0x51
 8009ff0:	d111      	bne.n	800a016 <FT5336_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8009ff2:	4811      	ldr	r0, [pc, #68]	; (800a038 <FT5336_Probe+0x84>)
 8009ff4:	4b11      	ldr	r3, [pc, #68]	; (800a03c <FT5336_Probe+0x88>)
 8009ff6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8009ffa:	4b11      	ldr	r3, [pc, #68]	; (800a040 <FT5336_Probe+0x8c>)
 8009ffc:	4a11      	ldr	r2, [pc, #68]	; (800a044 <FT5336_Probe+0x90>)
 8009ffe:	6013      	str	r3, [r2, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4798      	blx	r3
 800a004:	b950      	cbnz	r0, 800a01c <FT5336_Probe+0x68>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }

  return ret;
}
 800a006:	b008      	add	sp, #32
 800a008:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUS_FAILURE;
 800a00a:	f06f 0007 	mvn.w	r0, #7
 800a00e:	e7fa      	b.n	800a006 <FT5336_Probe+0x52>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a010:	f06f 0004 	mvn.w	r0, #4
 800a014:	e7f7      	b.n	800a006 <FT5336_Probe+0x52>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a016:	f06f 0006 	mvn.w	r0, #6
 800a01a:	e7f4      	b.n	800a006 <FT5336_Probe+0x52>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a01c:	f06f 0004 	mvn.w	r0, #4
  return ret;
 800a020:	e7f1      	b.n	800a006 <FT5336_Probe+0x52>
 800a022:	bf00      	nop
 800a024:	08009695 	.word	0x08009695
 800a028:	08009625 	.word	0x08009625
 800a02c:	0800971d 	.word	0x0800971d
 800a030:	080096ed 	.word	0x080096ed
 800a034:	0800974d 	.word	0x0800974d
 800a038:	2400652c 	.word	0x2400652c
 800a03c:	24006554 	.word	0x24006554
 800a040:	24000040 	.word	0x24000040
 800a044:	24006578 	.word	0x24006578

0800a048 <BSP_TS_Init>:
{
 800a048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a04a:	b085      	sub	sp, #20
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d150      	bne.n	800a0f2 <BSP_TS_Init+0xaa>
 800a050:	460c      	mov	r4, r1
 800a052:	4605      	mov	r5, r0
 800a054:	680b      	ldr	r3, [r1, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d04e      	beq.n	800a0f8 <BSP_TS_Init+0xb0>
 800a05a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800a05e:	d84e      	bhi.n	800a0fe <BSP_TS_Init+0xb6>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a060:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a062:	2a00      	cmp	r2, #0
 800a064:	d04e      	beq.n	800a104 <BSP_TS_Init+0xbc>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a066:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 800a06a:	d84e      	bhi.n	800a10a <BSP_TS_Init+0xc2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800a06c:	68c9      	ldr	r1, [r1, #12]
 800a06e:	4293      	cmp	r3, r2
 800a070:	bf28      	it	cs
 800a072:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a074:	4299      	cmp	r1, r3
 800a076:	d84b      	bhi.n	800a110 <BSP_TS_Init+0xc8>
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800a078:	f7ff ff9c 	bl	8009fb4 <FT5336_Probe>
 800a07c:	4606      	mov	r6, r0
 800a07e:	2800      	cmp	r0, #0
 800a080:	d149      	bne.n	800a116 <BSP_TS_Init+0xce>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800a082:	6820      	ldr	r0, [r4, #0]
 800a084:	4925      	ldr	r1, [pc, #148]	; (800a11c <BSP_TS_Init+0xd4>)
 800a086:	016a      	lsls	r2, r5, #5
 800a088:	eb01 1345 	add.w	r3, r1, r5, lsl #5
 800a08c:	5088      	str	r0, [r1, r2]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800a08e:	6862      	ldr	r2, [r4, #4]
 800a090:	605a      	str	r2, [r3, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800a092:	68a2      	ldr	r2, [r4, #8]
 800a094:	609a      	str	r2, [r3, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800a096:	68e2      	ldr	r2, [r4, #12]
 800a098:	60da      	str	r2, [r3, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a09a:	4b21      	ldr	r3, [pc, #132]	; (800a120 <BSP_TS_Init+0xd8>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	a901      	add	r1, sp, #4
 800a0a2:	4a20      	ldr	r2, [pc, #128]	; (800a124 <BSP_TS_Init+0xdc>)
 800a0a4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800a0a8:	4798      	blx	r3
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	db1e      	blt.n	800a0ec <BSP_TS_Init+0xa4>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a0ae:	4b1b      	ldr	r3, [pc, #108]	; (800a11c <BSP_TS_Init+0xd4>)
 800a0b0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800a0b4:	9a02      	ldr	r2, [sp, #8]
 800a0b6:	611a      	str	r2, [r3, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a0b8:	9a03      	ldr	r2, [sp, #12]
 800a0ba:	615a      	str	r2, [r3, #20]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800a0bc:	462b      	mov	r3, r5
 800a0be:	b113      	cbz	r3, 800a0c6 <BSP_TS_Init+0x7e>
}
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	b005      	add	sp, #20
 800a0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a0c6:	6822      	ldr	r2, [r4, #0]
 800a0c8:	68e1      	ldr	r1, [r4, #12]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	3201      	adds	r2, #1
 800a0ce:	4913      	ldr	r1, [pc, #76]	; (800a11c <BSP_TS_Init+0xd4>)
 800a0d0:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
 800a0d4:	3006      	adds	r0, #6
 800a0d6:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a0da:	6862      	ldr	r2, [r4, #4]
 800a0dc:	68e7      	ldr	r7, [r4, #12]
 800a0de:	443a      	add	r2, r7
 800a0e0:	3201      	adds	r2, #1
 800a0e2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800a0e6:	604a      	str	r2, [r1, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	e7e8      	b.n	800a0be <BSP_TS_Init+0x76>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0ec:	f06f 0604 	mvn.w	r6, #4
 800a0f0:	e7e6      	b.n	800a0c0 <BSP_TS_Init+0x78>
    ret = BSP_ERROR_WRONG_PARAM;
 800a0f2:	f06f 0601 	mvn.w	r6, #1
 800a0f6:	e7e3      	b.n	800a0c0 <BSP_TS_Init+0x78>
 800a0f8:	f06f 0601 	mvn.w	r6, #1
 800a0fc:	e7e0      	b.n	800a0c0 <BSP_TS_Init+0x78>
 800a0fe:	f06f 0601 	mvn.w	r6, #1
 800a102:	e7dd      	b.n	800a0c0 <BSP_TS_Init+0x78>
 800a104:	f06f 0601 	mvn.w	r6, #1
 800a108:	e7da      	b.n	800a0c0 <BSP_TS_Init+0x78>
 800a10a:	f06f 0601 	mvn.w	r6, #1
 800a10e:	e7d7      	b.n	800a0c0 <BSP_TS_Init+0x78>
 800a110:	f06f 0601 	mvn.w	r6, #1
 800a114:	e7d4      	b.n	800a0c0 <BSP_TS_Init+0x78>
      ret = BSP_ERROR_NO_INIT;
 800a116:	f04f 36ff 	mov.w	r6, #4294967295
  return ret;
 800a11a:	e7d1      	b.n	800a0c0 <BSP_TS_Init+0x78>
 800a11c:	24006558 	.word	0x24006558
 800a120:	24006578 	.word	0x24006578
 800a124:	24006554 	.word	0x24006554

0800a128 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
 800a128:	2800      	cmp	r0, #0
 800a12a:	d178      	bne.n	800a21e <BSP_TS_GetState+0xf6>
{
 800a12c:	b570      	push	{r4, r5, r6, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	460c      	mov	r4, r1
 800a132:	4605      	mov	r5, r0
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800a134:	4b3b      	ldr	r3, [pc, #236]	; (800a224 <BSP_TS_GetState+0xfc>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	a901      	add	r1, sp, #4
 800a13c:	4a3a      	ldr	r2, [pc, #232]	; (800a228 <BSP_TS_GetState+0x100>)
 800a13e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800a142:	4798      	blx	r3
 800a144:	2800      	cmp	r0, #0
 800a146:	db66      	blt.n	800a216 <BSP_TS_GetState+0xee>
    else if(state.TouchDetected != 0U)
 800a148:	9e01      	ldr	r6, [sp, #4]
 800a14a:	2e00      	cmp	r6, #0
 800a14c:	d059      	beq.n	800a202 <BSP_TS_GetState+0xda>
      x_oriented = state.TouchX;
 800a14e:	9a02      	ldr	r2, [sp, #8]
      y_oriented = state.TouchY;
 800a150:	9803      	ldr	r0, [sp, #12]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a152:	4b36      	ldr	r3, [pc, #216]	; (800a22c <BSP_TS_GetState+0x104>)
 800a154:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800a158:	6899      	ldr	r1, [r3, #8]
 800a15a:	f011 0f08 	tst.w	r1, #8
 800a15e:	d141      	bne.n	800a1e4 <BSP_TS_GetState+0xbc>
      y_oriented = state.TouchY;
 800a160:	4684      	mov	ip, r0
      x_oriented = state.TouchX;
 800a162:	4613      	mov	r3, r2
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800a164:	f011 0f02 	tst.w	r1, #2
 800a168:	d005      	beq.n	800a176 <BSP_TS_GetState+0x4e>
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800a16a:	4b30      	ldr	r3, [pc, #192]	; (800a22c <BSP_TS_GetState+0x104>)
 800a16c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	1a9b      	subs	r3, r3, r2
 800a174:	3b01      	subs	r3, #1
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800a176:	f011 0f04 	tst.w	r1, #4
 800a17a:	d005      	beq.n	800a188 <BSP_TS_GetState+0x60>
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800a17c:	4a2b      	ldr	r2, [pc, #172]	; (800a22c <BSP_TS_GetState+0x104>)
 800a17e:	eb02 1245 	add.w	r2, r2, r5, lsl #5
 800a182:	6952      	ldr	r2, [r2, #20]
 800a184:	eba2 0c00 	sub.w	ip, r2, r0
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a188:	4a28      	ldr	r2, [pc, #160]	; (800a22c <BSP_TS_GetState+0x104>)
 800a18a:	0168      	lsls	r0, r5, #5
 800a18c:	eb02 1145 	add.w	r1, r2, r5, lsl #5
 800a190:	5810      	ldr	r0, [r2, r0]
 800a192:	fb00 f303 	mul.w	r3, r0, r3
 800a196:	690a      	ldr	r2, [r1, #16]
 800a198:	fbb3 f3f2 	udiv	r3, r3, r2
 800a19c:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a19e:	684a      	ldr	r2, [r1, #4]
 800a1a0:	fb0c f202 	mul.w	r2, ip, r2
 800a1a4:	6948      	ldr	r0, [r1, #20]
 800a1a6:	fbb2 f2f0 	udiv	r2, r2, r0
 800a1aa:	60a2      	str	r2, [r4, #8]
      TS_State->TouchDetected = state.TouchDetected;
 800a1ac:	6026      	str	r6, [r4, #0]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a1ae:	6988      	ldr	r0, [r1, #24]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a1b0:	4283      	cmp	r3, r0
 800a1b2:	d91a      	bls.n	800a1ea <BSP_TS_GetState+0xc2>
 800a1b4:	1a1e      	subs	r6, r3, r0
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800a1b6:	491d      	ldr	r1, [pc, #116]	; (800a22c <BSP_TS_GetState+0x104>)
 800a1b8:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800a1bc:	69c9      	ldr	r1, [r1, #28]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a1be:	428a      	cmp	r2, r1
 800a1c0:	d915      	bls.n	800a1ee <BSP_TS_GetState+0xc6>
 800a1c2:	1a52      	subs	r2, r2, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a1c4:	4919      	ldr	r1, [pc, #100]	; (800a22c <BSP_TS_GetState+0x104>)
 800a1c6:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800a1ca:	68c9      	ldr	r1, [r1, #12]
 800a1cc:	42b1      	cmp	r1, r6
 800a1ce:	d301      	bcc.n	800a1d4 <BSP_TS_GetState+0xac>
 800a1d0:	4291      	cmp	r1, r2
 800a1d2:	d20e      	bcs.n	800a1f2 <BSP_TS_GetState+0xca>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800a1d4:	4a15      	ldr	r2, [pc, #84]	; (800a22c <BSP_TS_GetState+0x104>)
 800a1d6:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 800a1da:	61ab      	str	r3, [r5, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a1dc:	68a3      	ldr	r3, [r4, #8]
 800a1de:	61eb      	str	r3, [r5, #28]
  int32_t ret = BSP_ERROR_NONE;
 800a1e0:	2000      	movs	r0, #0
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a1e2:	e01a      	b.n	800a21a <BSP_TS_GetState+0xf2>
        y_oriented = state.TouchX;
 800a1e4:	4694      	mov	ip, r2
        x_oriented = state.TouchY;
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	e7bc      	b.n	800a164 <BSP_TS_GetState+0x3c>
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a1ea:	1ac6      	subs	r6, r0, r3
 800a1ec:	e7e3      	b.n	800a1b6 <BSP_TS_GetState+0x8e>
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a1ee:	1a8a      	subs	r2, r1, r2
 800a1f0:	e7e8      	b.n	800a1c4 <BSP_TS_GetState+0x9c>
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800a1f2:	6060      	str	r0, [r4, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a1f4:	4b0d      	ldr	r3, [pc, #52]	; (800a22c <BSP_TS_GetState+0x104>)
 800a1f6:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800a1fa:	69eb      	ldr	r3, [r5, #28]
 800a1fc:	60a3      	str	r3, [r4, #8]
  int32_t ret = BSP_ERROR_NONE;
 800a1fe:	2000      	movs	r0, #0
 800a200:	e00b      	b.n	800a21a <BSP_TS_GetState+0xf2>
      TS_State->TouchDetected = 0U;
 800a202:	2000      	movs	r0, #0
 800a204:	6020      	str	r0, [r4, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800a206:	4b09      	ldr	r3, [pc, #36]	; (800a22c <BSP_TS_GetState+0x104>)
 800a208:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 800a20c:	69ab      	ldr	r3, [r5, #24]
 800a20e:	6063      	str	r3, [r4, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a210:	69eb      	ldr	r3, [r5, #28]
 800a212:	60a3      	str	r3, [r4, #8]
 800a214:	e001      	b.n	800a21a <BSP_TS_GetState+0xf2>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a216:	f06f 0004 	mvn.w	r0, #4
}
 800a21a:	b004      	add	sp, #16
 800a21c:	bd70      	pop	{r4, r5, r6, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a21e:	f06f 0001 	mvn.w	r0, #1
}
 800a222:	4770      	bx	lr
 800a224:	24006578 	.word	0x24006578
 800a228:	24006554 	.word	0x24006554
 800a22c:	24006558 	.word	0x24006558

0800a230 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a230:	4a18      	ldr	r2, [pc, #96]	; (800a294 <SystemInit+0x64>)
 800a232:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a236:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a23a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a23e:	4b16      	ldr	r3, [pc, #88]	; (800a298 <SystemInit+0x68>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	f042 0201 	orr.w	r2, r2, #1
 800a246:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a248:	2200      	movs	r2, #0
 800a24a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	4913      	ldr	r1, [pc, #76]	; (800a29c <SystemInit+0x6c>)
 800a250:	4001      	ands	r1, r0
 800a252:	6019      	str	r1, [r3, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800a254:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800a256:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800a258:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800a25a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800a25c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800a25e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800a262:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a264:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800a266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a268:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a26a:	6819      	ldr	r1, [r3, #0]
 800a26c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800a270:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a272:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a274:	4b0a      	ldr	r3, [pc, #40]	; (800a2a0 <SystemInit+0x70>)
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <SystemInit+0x74>)
 800a27a:	4013      	ands	r3, r2
 800a27c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a280:	d203      	bcs.n	800a28a <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a282:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <SystemInit+0x78>)
 800a284:	2201      	movs	r2, #1
 800a286:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a28a:	4b02      	ldr	r3, [pc, #8]	; (800a294 <SystemInit+0x64>)
 800a28c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a290:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800a292:	4770      	bx	lr
 800a294:	e000ed00 	.word	0xe000ed00
 800a298:	58024400 	.word	0x58024400
 800a29c:	eaf6ed7f 	.word	0xeaf6ed7f
 800a2a0:	5c001000 	.word	0x5c001000
 800a2a4:	ffff0000 	.word	0xffff0000
 800a2a8:	51008000 	.word	0x51008000

0800a2ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a2ac:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a2ae:	2003      	movs	r0, #3
 800a2b0:	f000 f850 	bl	800a354 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a2b4:	f002 fc92 	bl	800cbdc <HAL_RCC_GetSysClockFreq>
 800a2b8:	490f      	ldr	r1, [pc, #60]	; (800a2f8 <HAL_Init+0x4c>)
 800a2ba:	698b      	ldr	r3, [r1, #24]
 800a2bc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a2c0:	4a0e      	ldr	r2, [pc, #56]	; (800a2fc <HAL_Init+0x50>)
 800a2c2:	5cd3      	ldrb	r3, [r2, r3]
 800a2c4:	f003 031f 	and.w	r3, r3, #31
 800a2c8:	40d8      	lsrs	r0, r3

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a2ca:	698b      	ldr	r3, [r1, #24]
 800a2cc:	f003 030f 	and.w	r3, r3, #15
 800a2d0:	5cd3      	ldrb	r3, [r2, r3]
 800a2d2:	f003 031f 	and.w	r3, r3, #31
 800a2d6:	fa20 f303 	lsr.w	r3, r0, r3
 800a2da:	4a09      	ldr	r2, [pc, #36]	; (800a300 <HAL_Init+0x54>)
 800a2dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2de:	4b09      	ldr	r3, [pc, #36]	; (800a304 <HAL_Init+0x58>)
 800a2e0:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	f7f8 ffae 	bl	8003244 <HAL_InitTick>
 800a2e8:	b110      	cbz	r0, 800a2f0 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800a2ea:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	bd10      	pop	{r4, pc}
 800a2f0:	4604      	mov	r4, r0
  HAL_MspInit();
 800a2f2:	f7f8 fd5b 	bl	8002dac <HAL_MspInit>
  return HAL_OK;
 800a2f6:	e7f9      	b.n	800a2ec <HAL_Init+0x40>
 800a2f8:	58024400 	.word	0x58024400
 800a2fc:	080262a0 	.word	0x080262a0
 800a300:	24000074 	.word	0x24000074
 800a304:	24000070 	.word	0x24000070

0800a308 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a308:	4b03      	ldr	r3, [pc, #12]	; (800a318 <HAL_IncTick+0x10>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	4a03      	ldr	r2, [pc, #12]	; (800a31c <HAL_IncTick+0x14>)
 800a30e:	6811      	ldr	r1, [r2, #0]
 800a310:	440b      	add	r3, r1
 800a312:	6013      	str	r3, [r2, #0]
}
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	24000078 	.word	0x24000078
 800a31c:	2400657c 	.word	0x2400657c

0800a320 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a320:	4b01      	ldr	r3, [pc, #4]	; (800a328 <HAL_GetTick+0x8>)
 800a322:	6818      	ldr	r0, [r3, #0]
}
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	2400657c 	.word	0x2400657c

0800a32c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a330:	f7ff fff6 	bl	800a320 <HAL_GetTick>
 800a334:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a336:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a33a:	d002      	beq.n	800a342 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800a33c:	4b04      	ldr	r3, [pc, #16]	; (800a350 <HAL_Delay+0x24>)
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a342:	f7ff ffed 	bl	800a320 <HAL_GetTick>
 800a346:	1b40      	subs	r0, r0, r5
 800a348:	42a0      	cmp	r0, r4
 800a34a:	d3fa      	bcc.n	800a342 <HAL_Delay+0x16>
  {
  }
}
 800a34c:	bd38      	pop	{r3, r4, r5, pc}
 800a34e:	bf00      	nop
 800a350:	24000078 	.word	0x24000078

0800a354 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a354:	4906      	ldr	r1, [pc, #24]	; (800a370 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800a356:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a358:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a35c:	041b      	lsls	r3, r3, #16
 800a35e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a360:	0200      	lsls	r0, r0, #8
 800a362:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a366:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800a368:	4a02      	ldr	r2, [pc, #8]	; (800a374 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800a36a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800a36c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a36e:	4770      	bx	lr
 800a370:	e000ed00 	.word	0xe000ed00
 800a374:	05fa0000 	.word	0x05fa0000

0800a378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a378:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a37a:	4b17      	ldr	r3, [pc, #92]	; (800a3d8 <HAL_NVIC_SetPriority+0x60>)
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a382:	f1c3 0c07 	rsb	ip, r3, #7
 800a386:	f1bc 0f04 	cmp.w	ip, #4
 800a38a:	bf28      	it	cs
 800a38c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a390:	f103 0e04 	add.w	lr, r3, #4
 800a394:	f1be 0f06 	cmp.w	lr, #6
 800a398:	d914      	bls.n	800a3c4 <HAL_NVIC_SetPriority+0x4c>
 800a39a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a39c:	f04f 3eff 	mov.w	lr, #4294967295
 800a3a0:	fa0e fc0c 	lsl.w	ip, lr, ip
 800a3a4:	ea21 010c 	bic.w	r1, r1, ip
 800a3a8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a3aa:	fa0e f303 	lsl.w	r3, lr, r3
 800a3ae:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a3b2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	db07      	blt.n	800a3c8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3b8:	0109      	lsls	r1, r1, #4
 800a3ba:	b2c9      	uxtb	r1, r1
 800a3bc:	4b07      	ldr	r3, [pc, #28]	; (800a3dc <HAL_NVIC_SetPriority+0x64>)
 800a3be:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a3c0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	e7e9      	b.n	800a39c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3c8:	f000 000f 	and.w	r0, r0, #15
 800a3cc:	0109      	lsls	r1, r1, #4
 800a3ce:	b2c9      	uxtb	r1, r1
 800a3d0:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <HAL_NVIC_SetPriority+0x68>)
 800a3d2:	5419      	strb	r1, [r3, r0]
 800a3d4:	e7f4      	b.n	800a3c0 <HAL_NVIC_SetPriority+0x48>
 800a3d6:	bf00      	nop
 800a3d8:	e000ed00 	.word	0xe000ed00
 800a3dc:	e000e400 	.word	0xe000e400
 800a3e0:	e000ed14 	.word	0xe000ed14

0800a3e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	db07      	blt.n	800a3f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a3e8:	f000 021f 	and.w	r2, r0, #31
 800a3ec:	0940      	lsrs	r0, r0, #5
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	4093      	lsls	r3, r2
 800a3f2:	4a02      	ldr	r2, [pc, #8]	; (800a3fc <HAL_NVIC_EnableIRQ+0x18>)
 800a3f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	e000e100 	.word	0xe000e100

0800a400 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a400:	2800      	cmp	r0, #0
 800a402:	db0c      	blt.n	800a41e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a404:	f000 021f 	and.w	r2, r0, #31
 800a408:	0940      	lsrs	r0, r0, #5
 800a40a:	2301      	movs	r3, #1
 800a40c:	4093      	lsls	r3, r2
 800a40e:	3020      	adds	r0, #32
 800a410:	4a03      	ldr	r2, [pc, #12]	; (800a420 <HAL_NVIC_DisableIRQ+0x20>)
 800a412:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a416:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a41a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800a41e:	4770      	bx	lr
 800a420:	e000e100 	.word	0xe000e100

0800a424 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800a424:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a428:	4b04      	ldr	r3, [pc, #16]	; (800a43c <HAL_MPU_Disable+0x18>)
 800a42a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a42c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a430:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	e000ed00 	.word	0xe000ed00

0800a440 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a440:	f040 0001 	orr.w	r0, r0, #1
 800a444:	4b05      	ldr	r3, [pc, #20]	; (800a45c <HAL_MPU_Enable+0x1c>)
 800a446:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a44a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a44c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a450:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a452:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a456:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a45a:	4770      	bx	lr
 800a45c:	e000ed00 	.word	0xe000ed00

0800a460 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a460:	7842      	ldrb	r2, [r0, #1]
 800a462:	4b16      	ldr	r3, [pc, #88]	; (800a4bc <HAL_MPU_ConfigRegion+0x5c>)
 800a464:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800a468:	7803      	ldrb	r3, [r0, #0]
 800a46a:	b1fb      	cbz	r3, 800a4ac <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800a46c:	6843      	ldr	r3, [r0, #4]
 800a46e:	4a13      	ldr	r2, [pc, #76]	; (800a4bc <HAL_MPU_ConfigRegion+0x5c>)
 800a470:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a474:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a476:	7ac3      	ldrb	r3, [r0, #11]
 800a478:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a47a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a47e:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a480:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a484:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a486:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a48a:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a48c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a490:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a492:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a496:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a498:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a49c:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a49e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800a4a2:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a4a4:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a4a6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800a4aa:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 800a4ac:	4b03      	ldr	r3, [pc, #12]	; (800a4bc <HAL_MPU_ConfigRegion+0x5c>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 800a4b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	e000ed00 	.word	0xe000ed00

0800a4c0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d038      	beq.n	800a536 <HAL_CRC_Init+0x76>
{
 800a4c4:	b510      	push	{r4, lr}
 800a4c6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a4c8:	7f43      	ldrb	r3, [r0, #29]
 800a4ca:	b31b      	cbz	r3, 800a514 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a4cc:	2302      	movs	r3, #2
 800a4ce:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a4d0:	7923      	ldrb	r3, [r4, #4]
 800a4d2:	bb1b      	cbnz	r3, 800a51c <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	4a19      	ldr	r2, [pc, #100]	; (800a53c <HAL_CRC_Init+0x7c>)
 800a4d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a4da:	6822      	ldr	r2, [r4, #0]
 800a4dc:	6893      	ldr	r3, [r2, #8]
 800a4de:	f023 0318 	bic.w	r3, r3, #24
 800a4e2:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a4e4:	7963      	ldrb	r3, [r4, #5]
 800a4e6:	bb13      	cbnz	r3, 800a52e <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a4f0:	6822      	ldr	r2, [r4, #0]
 800a4f2:	6893      	ldr	r3, [r2, #8]
 800a4f4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a4f8:	6961      	ldr	r1, [r4, #20]
 800a4fa:	430b      	orrs	r3, r1
 800a4fc:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a4fe:	6822      	ldr	r2, [r4, #0]
 800a500:	6893      	ldr	r3, [r2, #8]
 800a502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a506:	69a1      	ldr	r1, [r4, #24]
 800a508:	430b      	orrs	r3, r1
 800a50a:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a50c:	2301      	movs	r3, #1
 800a50e:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800a510:	2000      	movs	r0, #0
}
 800a512:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800a514:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a516:	f7f8 fc63 	bl	8002de0 <HAL_CRC_MspInit>
 800a51a:	e7d7      	b.n	800a4cc <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a51c:	68e2      	ldr	r2, [r4, #12]
 800a51e:	68a1      	ldr	r1, [r4, #8]
 800a520:	4620      	mov	r0, r4
 800a522:	f000 f80d 	bl	800a540 <HAL_CRCEx_Polynomial_Set>
 800a526:	2800      	cmp	r0, #0
 800a528:	d0dc      	beq.n	800a4e4 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800a52a:	2001      	movs	r0, #1
 800a52c:	e7f1      	b.n	800a512 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	6922      	ldr	r2, [r4, #16]
 800a532:	611a      	str	r2, [r3, #16]
 800a534:	e7dc      	b.n	800a4f0 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800a536:	2001      	movs	r0, #1
}
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	04c11db7 	.word	0x04c11db7

0800a540 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a540:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a542:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a544:	461c      	mov	r4, r3
 800a546:	3b01      	subs	r3, #1
 800a548:	b134      	cbz	r4, 800a558 <HAL_CRCEx_Polynomial_Set+0x18>
 800a54a:	f003 0c1f 	and.w	ip, r3, #31
 800a54e:	fa21 fc0c 	lsr.w	ip, r1, ip
 800a552:	f01c 0f01 	tst.w	ip, #1
 800a556:	d0f5      	beq.n	800a544 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800a558:	2a18      	cmp	r2, #24
 800a55a:	d822      	bhi.n	800a5a2 <HAL_CRCEx_Polynomial_Set+0x62>
 800a55c:	e8df f002 	tbb	[pc, r2]
 800a560:	2121210f 	.word	0x2121210f
 800a564:	21212121 	.word	0x21212121
 800a568:	2121211d 	.word	0x2121211d
 800a56c:	21212121 	.word	0x21212121
 800a570:	21212119 	.word	0x21212119
 800a574:	21212121 	.word	0x21212121
 800a578:	0d          	.byte	0x0d
 800a579:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a57a:	2b06      	cmp	r3, #6
 800a57c:	d815      	bhi.n	800a5aa <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a57e:	6803      	ldr	r3, [r0, #0]
 800a580:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a582:	6801      	ldr	r1, [r0, #0]
 800a584:	688b      	ldr	r3, [r1, #8]
 800a586:	f023 0318 	bic.w	r3, r3, #24
 800a58a:	431a      	orrs	r2, r3
 800a58c:	608a      	str	r2, [r1, #8]
 800a58e:	2000      	movs	r0, #0
 800a590:	e008      	b.n	800a5a4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_8B)
 800a592:	2b07      	cmp	r3, #7
 800a594:	d9f3      	bls.n	800a57e <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800a596:	2001      	movs	r0, #1
 800a598:	e004      	b.n	800a5a4 <HAL_CRCEx_Polynomial_Set+0x64>
      if (msb >= HAL_CRC_LENGTH_16B)
 800a59a:	2b0f      	cmp	r3, #15
 800a59c:	d9ef      	bls.n	800a57e <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800a59e:	2001      	movs	r0, #1
 800a5a0:	e000      	b.n	800a5a4 <HAL_CRCEx_Polynomial_Set+0x64>
  switch (PolyLength)
 800a5a2:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 800a5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a8:	4770      	bx	lr
        status =   HAL_ERROR;
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	e7fa      	b.n	800a5a4 <HAL_CRCEx_Polynomial_Set+0x64>
	...

0800a5b0 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	f000 8129 	beq.w	800a808 <HAL_DMA_Abort_IT+0x258>
{
 800a5b6:	b508      	push	{r3, lr}
 800a5b8:	4602      	mov	r2, r0
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5ba:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d003      	beq.n	800a5cc <HAL_DMA_Abort_IT+0x1c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5c4:	2380      	movs	r3, #128	; 0x80
 800a5c6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800a5c8:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 800a5ca:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a5cc:	6803      	ldr	r3, [r0, #0]
 800a5ce:	4890      	ldr	r0, [pc, #576]	; (800a810 <HAL_DMA_Abort_IT+0x260>)
 800a5d0:	4990      	ldr	r1, [pc, #576]	; (800a814 <HAL_DMA_Abort_IT+0x264>)
 800a5d2:	428b      	cmp	r3, r1
 800a5d4:	bf18      	it	ne
 800a5d6:	4283      	cmpne	r3, r0
 800a5d8:	bf0c      	ite	eq
 800a5da:	2101      	moveq	r1, #1
 800a5dc:	2100      	movne	r1, #0
 800a5de:	d066      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a5e0:	3030      	adds	r0, #48	; 0x30
 800a5e2:	4283      	cmp	r3, r0
 800a5e4:	d063      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a5e6:	3018      	adds	r0, #24
 800a5e8:	4283      	cmp	r3, r0
 800a5ea:	d060      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a5ec:	3018      	adds	r0, #24
 800a5ee:	4283      	cmp	r3, r0
 800a5f0:	d05d      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a5f2:	3018      	adds	r0, #24
 800a5f4:	4283      	cmp	r3, r0
 800a5f6:	d05a      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a5f8:	3018      	adds	r0, #24
 800a5fa:	4283      	cmp	r3, r0
 800a5fc:	d057      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a5fe:	3018      	adds	r0, #24
 800a600:	4283      	cmp	r3, r0
 800a602:	d054      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a604:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800a608:	4283      	cmp	r3, r0
 800a60a:	d050      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a60c:	3018      	adds	r0, #24
 800a60e:	4283      	cmp	r3, r0
 800a610:	d04d      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a612:	3018      	adds	r0, #24
 800a614:	4283      	cmp	r3, r0
 800a616:	d04a      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a618:	3018      	adds	r0, #24
 800a61a:	4283      	cmp	r3, r0
 800a61c:	d047      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a61e:	3018      	adds	r0, #24
 800a620:	4283      	cmp	r3, r0
 800a622:	d044      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a624:	3018      	adds	r0, #24
 800a626:	4283      	cmp	r3, r0
 800a628:	d041      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a62a:	3018      	adds	r0, #24
 800a62c:	4283      	cmp	r3, r0
 800a62e:	d03e      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
 800a630:	3018      	adds	r0, #24
 800a632:	4283      	cmp	r3, r0
 800a634:	d03b      	beq.n	800a6ae <HAL_DMA_Abort_IT+0xfe>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a636:	6819      	ldr	r1, [r3, #0]
 800a638:	f021 010e 	bic.w	r1, r1, #14
 800a63c:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 800a63e:	6813      	ldr	r3, [r2, #0]
 800a640:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 800a644:	4973      	ldr	r1, [pc, #460]	; (800a814 <HAL_DMA_Abort_IT+0x264>)
 800a646:	428b      	cmp	r3, r1
 800a648:	bf18      	it	ne
 800a64a:	4283      	cmpne	r3, r0
 800a64c:	d06a      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a64e:	4972      	ldr	r1, [pc, #456]	; (800a818 <HAL_DMA_Abort_IT+0x268>)
 800a650:	428b      	cmp	r3, r1
 800a652:	d067      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a654:	3118      	adds	r1, #24
 800a656:	428b      	cmp	r3, r1
 800a658:	d064      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a65a:	3118      	adds	r1, #24
 800a65c:	428b      	cmp	r3, r1
 800a65e:	d061      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a660:	3118      	adds	r1, #24
 800a662:	428b      	cmp	r3, r1
 800a664:	d05e      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a666:	3118      	adds	r1, #24
 800a668:	428b      	cmp	r3, r1
 800a66a:	d05b      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a66c:	3118      	adds	r1, #24
 800a66e:	428b      	cmp	r3, r1
 800a670:	d058      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a672:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800a676:	428b      	cmp	r3, r1
 800a678:	d054      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a67a:	3118      	adds	r1, #24
 800a67c:	428b      	cmp	r3, r1
 800a67e:	d051      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a680:	3118      	adds	r1, #24
 800a682:	428b      	cmp	r3, r1
 800a684:	d04e      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a686:	3118      	adds	r1, #24
 800a688:	428b      	cmp	r3, r1
 800a68a:	d04b      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a68c:	3118      	adds	r1, #24
 800a68e:	428b      	cmp	r3, r1
 800a690:	d048      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a692:	3118      	adds	r1, #24
 800a694:	428b      	cmp	r3, r1
 800a696:	d045      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a698:	3118      	adds	r1, #24
 800a69a:	428b      	cmp	r3, r1
 800a69c:	d042      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a69e:	3118      	adds	r1, #24
 800a6a0:	428b      	cmp	r3, r1
 800a6a2:	d03f      	beq.n	800a724 <HAL_DMA_Abort_IT+0x174>
 800a6a4:	6819      	ldr	r1, [r3, #0]
 800a6a6:	f021 0101 	bic.w	r1, r1, #1
 800a6aa:	6019      	str	r1, [r3, #0]
 800a6ac:	e03e      	b.n	800a72c <HAL_DMA_Abort_IT+0x17c>
      hdma->State = HAL_DMA_STATE_ABORT;
 800a6ae:	2004      	movs	r0, #4
 800a6b0:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800a6b4:	bb81      	cbnz	r1, 800a718 <HAL_DMA_Abort_IT+0x168>
 800a6b6:	4a58      	ldr	r2, [pc, #352]	; (800a818 <HAL_DMA_Abort_IT+0x268>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d02d      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6bc:	3218      	adds	r2, #24
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d02a      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6c2:	3218      	adds	r2, #24
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d027      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6c8:	3218      	adds	r2, #24
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d024      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6ce:	3218      	adds	r2, #24
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d021      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6d4:	3218      	adds	r2, #24
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d01e      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6da:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d01a      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6e2:	3218      	adds	r2, #24
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d017      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6e8:	3218      	adds	r2, #24
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d014      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6ee:	3218      	adds	r2, #24
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d011      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6f4:	3218      	adds	r2, #24
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d00e      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a6fa:	3218      	adds	r2, #24
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d00b      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a700:	3218      	adds	r2, #24
 800a702:	4293      	cmp	r3, r2
 800a704:	d008      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a706:	3218      	adds	r2, #24
 800a708:	4293      	cmp	r3, r2
 800a70a:	d005      	beq.n	800a718 <HAL_DMA_Abort_IT+0x168>
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	f022 0201 	bic.w	r2, r2, #1
 800a712:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a714:	2000      	movs	r0, #0
 800a716:	e758      	b.n	800a5ca <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	f022 0201 	bic.w	r2, r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a720:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 800a722:	e752      	b.n	800a5ca <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800a724:	6819      	ldr	r1, [r3, #0]
 800a726:	f021 0101 	bic.w	r1, r1, #1
 800a72a:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a72c:	6813      	ldr	r3, [r2, #0]
 800a72e:	4838      	ldr	r0, [pc, #224]	; (800a810 <HAL_DMA_Abort_IT+0x260>)
 800a730:	4938      	ldr	r1, [pc, #224]	; (800a814 <HAL_DMA_Abort_IT+0x264>)
 800a732:	428b      	cmp	r3, r1
 800a734:	bf18      	it	ne
 800a736:	4283      	cmpne	r3, r0
 800a738:	d042      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a73a:	3118      	adds	r1, #24
 800a73c:	428b      	cmp	r3, r1
 800a73e:	d03f      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a740:	3118      	adds	r1, #24
 800a742:	428b      	cmp	r3, r1
 800a744:	d03c      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a746:	3118      	adds	r1, #24
 800a748:	428b      	cmp	r3, r1
 800a74a:	d039      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a74c:	3118      	adds	r1, #24
 800a74e:	428b      	cmp	r3, r1
 800a750:	d036      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a752:	3118      	adds	r1, #24
 800a754:	428b      	cmp	r3, r1
 800a756:	d033      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a758:	3118      	adds	r1, #24
 800a75a:	428b      	cmp	r3, r1
 800a75c:	d030      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a75e:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800a762:	428b      	cmp	r3, r1
 800a764:	d02c      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a766:	3118      	adds	r1, #24
 800a768:	428b      	cmp	r3, r1
 800a76a:	d029      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a76c:	3118      	adds	r1, #24
 800a76e:	428b      	cmp	r3, r1
 800a770:	d026      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a772:	3118      	adds	r1, #24
 800a774:	428b      	cmp	r3, r1
 800a776:	d023      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a778:	3118      	adds	r1, #24
 800a77a:	428b      	cmp	r3, r1
 800a77c:	d020      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a77e:	3118      	adds	r1, #24
 800a780:	428b      	cmp	r3, r1
 800a782:	d01d      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a784:	3118      	adds	r1, #24
 800a786:	428b      	cmp	r3, r1
 800a788:	d01a      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a78a:	3118      	adds	r1, #24
 800a78c:	428b      	cmp	r3, r1
 800a78e:	d017      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a790:	4922      	ldr	r1, [pc, #136]	; (800a81c <HAL_DMA_Abort_IT+0x26c>)
 800a792:	428b      	cmp	r3, r1
 800a794:	d014      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a796:	3114      	adds	r1, #20
 800a798:	428b      	cmp	r3, r1
 800a79a:	d011      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a79c:	3114      	adds	r1, #20
 800a79e:	428b      	cmp	r3, r1
 800a7a0:	d00e      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a7a2:	3114      	adds	r1, #20
 800a7a4:	428b      	cmp	r3, r1
 800a7a6:	d00b      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a7a8:	3114      	adds	r1, #20
 800a7aa:	428b      	cmp	r3, r1
 800a7ac:	d008      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a7ae:	3114      	adds	r1, #20
 800a7b0:	428b      	cmp	r3, r1
 800a7b2:	d005      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a7b4:	3114      	adds	r1, #20
 800a7b6:	428b      	cmp	r3, r1
 800a7b8:	d002      	beq.n	800a7c0 <HAL_DMA_Abort_IT+0x210>
 800a7ba:	3114      	adds	r1, #20
 800a7bc:	428b      	cmp	r3, r1
 800a7be:	d117      	bne.n	800a7f0 <HAL_DMA_Abort_IT+0x240>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a7c0:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800a7c2:	680b      	ldr	r3, [r1, #0]
 800a7c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7c8:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a7ca:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a7cc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800a7ce:	f003 011f 	and.w	r1, r3, #31
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	408b      	lsls	r3, r1
 800a7d6:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a7d8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a7da:	6e91      	ldr	r1, [r2, #104]	; 0x68
 800a7dc:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800a7de:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800a7e0:	b133      	cbz	r3, 800a7f0 <HAL_DMA_Abort_IT+0x240>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a7e2:	6819      	ldr	r1, [r3, #0]
 800a7e4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a7e8:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a7ea:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800a7ec:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800a7ee:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800a7fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a7fe:	b12b      	cbz	r3, 800a80c <HAL_DMA_Abort_IT+0x25c>
        hdma->XferAbortCallback(hdma);
 800a800:	4610      	mov	r0, r2
 800a802:	4798      	blx	r3
  return HAL_OK;
 800a804:	2000      	movs	r0, #0
 800a806:	e6e0      	b.n	800a5ca <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 800a808:	2001      	movs	r0, #1
}
 800a80a:	4770      	bx	lr
  return HAL_OK;
 800a80c:	2000      	movs	r0, #0
 800a80e:	e6dc      	b.n	800a5ca <HAL_DMA_Abort_IT+0x1a>
 800a810:	40020010 	.word	0x40020010
 800a814:	40020028 	.word	0x40020028
 800a818:	40020040 	.word	0x40020040
 800a81c:	58025408 	.word	0x58025408

0800a820 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a820:	2800      	cmp	r0, #0
 800a822:	d037      	beq.n	800a894 <HAL_DMA2D_Init+0x74>
{
 800a824:	b510      	push	{r4, lr}
 800a826:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a828:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d02c      	beq.n	800a88a <HAL_DMA2D_Init+0x6a>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a830:	2302      	movs	r3, #2
 800a832:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a836:	6821      	ldr	r1, [r4, #0]
 800a838:	680a      	ldr	r2, [r1, #0]
 800a83a:	4b17      	ldr	r3, [pc, #92]	; (800a898 <HAL_DMA2D_Init+0x78>)
 800a83c:	4013      	ands	r3, r2
 800a83e:	6862      	ldr	r2, [r4, #4]
 800a840:	69e0      	ldr	r0, [r4, #28]
 800a842:	4302      	orrs	r2, r0
 800a844:	4313      	orrs	r3, r2
 800a846:	600b      	str	r3, [r1, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a848:	6821      	ldr	r1, [r4, #0]
 800a84a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800a84c:	4b13      	ldr	r3, [pc, #76]	; (800a89c <HAL_DMA2D_Init+0x7c>)
 800a84e:	4013      	ands	r3, r2
 800a850:	68a2      	ldr	r2, [r4, #8]
 800a852:	69a0      	ldr	r0, [r4, #24]
 800a854:	4302      	orrs	r2, r0
 800a856:	4313      	orrs	r3, r2
 800a858:	634b      	str	r3, [r1, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a85a:	6822      	ldr	r2, [r4, #0]
 800a85c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a85e:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <HAL_DMA2D_Init+0x80>)
 800a860:	400b      	ands	r3, r1
 800a862:	68e1      	ldr	r1, [r4, #12]
 800a864:	430b      	orrs	r3, r1
 800a866:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a868:	6821      	ldr	r1, [r4, #0]
 800a86a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a86c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a870:	6920      	ldr	r0, [r4, #16]
 800a872:	6962      	ldr	r2, [r4, #20]
 800a874:	0552      	lsls	r2, r2, #21
 800a876:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 800a87a:	4313      	orrs	r3, r2
 800a87c:	634b      	str	r3, [r1, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a87e:	2000      	movs	r0, #0
 800a880:	6660      	str	r0, [r4, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a882:	2301      	movs	r3, #1
 800a884:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800a888:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800a88a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800a88e:	f7f8 fac1 	bl	8002e14 <HAL_DMA2D_MspInit>
 800a892:	e7cd      	b.n	800a830 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 800a894:	2001      	movs	r0, #1
}
 800a896:	4770      	bx	lr
 800a898:	fff8ffbf 	.word	0xfff8ffbf
 800a89c:	fffffef8 	.word	0xfffffef8
 800a8a0:	ffff0000 	.word	0xffff0000

0800a8a4 <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800a8a4:	4770      	bx	lr

0800a8a6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_DMA2D_IRQHandler>:
{
 800a8a8:	b570      	push	{r4, r5, r6, lr}
 800a8aa:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a8ac:	6803      	ldr	r3, [r0, #0]
 800a8ae:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800a8b0:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a8b2:	f015 0f01 	tst.w	r5, #1
 800a8b6:	d016      	beq.n	800a8e6 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800a8b8:	f416 7f80 	tst.w	r6, #256	; 0x100
 800a8bc:	d013      	beq.n	800a8e6 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8c4:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a8c6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a8c8:	f043 0301 	orr.w	r3, r3, #1
 800a8cc:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800a8ce:	6803      	ldr	r3, [r0, #0]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a8d4:	2304      	movs	r3, #4
 800a8d6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800a8e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a8e2:	b103      	cbz	r3, 800a8e6 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800a8e4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a8e6:	f015 0f20 	tst.w	r5, #32
 800a8ea:	d018      	beq.n	800a91e <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800a8ec:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800a8f0:	d015      	beq.n	800a91e <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800a8f2:	6822      	ldr	r2, [r4, #0]
 800a8f4:	6813      	ldr	r3, [r2, #0]
 800a8f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8fa:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	2220      	movs	r2, #32
 800a900:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a904:	f043 0302 	orr.w	r3, r3, #2
 800a908:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a90a:	2304      	movs	r3, #4
 800a90c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800a910:	2300      	movs	r3, #0
 800a912:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800a916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a918:	b10b      	cbz	r3, 800a91e <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 800a91a:	4620      	mov	r0, r4
 800a91c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a91e:	f015 0f08 	tst.w	r5, #8
 800a922:	d018      	beq.n	800a956 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800a924:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800a928:	d015      	beq.n	800a956 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800a92a:	6822      	ldr	r2, [r4, #0]
 800a92c:	6813      	ldr	r3, [r2, #0]
 800a92e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a932:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	2208      	movs	r2, #8
 800a938:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a93a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a93c:	f043 0304 	orr.w	r3, r3, #4
 800a940:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a942:	2304      	movs	r3, #4
 800a944:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800a948:	2300      	movs	r3, #0
 800a94a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800a94e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a950:	b10b      	cbz	r3, 800a956 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 800a952:	4620      	mov	r0, r4
 800a954:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800a956:	f015 0f04 	tst.w	r5, #4
 800a95a:	d002      	beq.n	800a962 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800a95c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800a960:	d120      	bne.n	800a9a4 <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800a962:	f015 0f02 	tst.w	r5, #2
 800a966:	d016      	beq.n	800a996 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800a968:	f416 7f00 	tst.w	r6, #512	; 0x200
 800a96c:	d013      	beq.n	800a996 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800a96e:	6822      	ldr	r2, [r4, #0]
 800a970:	6813      	ldr	r3, [r2, #0]
 800a972:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a976:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	2202      	movs	r2, #2
 800a97c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a97e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a980:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a982:	2301      	movs	r3, #1
 800a984:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800a988:	2300      	movs	r3, #0
 800a98a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800a98e:	6a23      	ldr	r3, [r4, #32]
 800a990:	b10b      	cbz	r3, 800a996 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 800a992:	4620      	mov	r0, r4
 800a994:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800a996:	f015 0f10 	tst.w	r5, #16
 800a99a:	d002      	beq.n	800a9a2 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800a99c:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 800a9a0:	d10c      	bne.n	800a9bc <HAL_DMA2D_IRQHandler+0x114>
}
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a9a4:	6822      	ldr	r2, [r4, #0]
 800a9a6:	6813      	ldr	r3, [r2, #0]
 800a9a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9ac:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	2204      	movs	r2, #4
 800a9b2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f7ff ff75 	bl	800a8a4 <HAL_DMA2D_LineEventCallback>
 800a9ba:	e7d2      	b.n	800a962 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a9bc:	6822      	ldr	r2, [r4, #0]
 800a9be:	6813      	ldr	r3, [r2, #0]
 800a9c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9c4:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800a9c6:	6823      	ldr	r3, [r4, #0]
 800a9c8:	2210      	movs	r2, #16
 800a9ca:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a9cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9ce:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f7ff ff62 	bl	800a8a6 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800a9e2:	e7de      	b.n	800a9a2 <HAL_DMA2D_IRQHandler+0xfa>

0800a9e4 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a9e4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d074      	beq.n	800aad6 <HAL_DMA2D_ConfigLayer+0xf2>
{
 800a9ec:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a9fa:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800a9fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800aa02:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800aa04:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800aa06:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800aa0a:	6b95      	ldr	r5, [r2, #56]	; 0x38
 800aa0c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800aa10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800aa12:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800aa16:	f1a4 0209 	sub.w	r2, r4, #9
 800aa1a:	2a01      	cmp	r2, #1
 800aa1c:	d921      	bls.n	800aa62 <HAL_DMA2D_ConfigLayer+0x7e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800aa1e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800aa22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800aa26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800aa2c:	bb61      	cbnz	r1, 800aa88 <HAL_DMA2D_ConfigLayer+0xa4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800aa2e:	6804      	ldr	r4, [r0, #0]
 800aa30:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa32:	4a2a      	ldr	r2, [pc, #168]	; (800aadc <HAL_DMA2D_ConfigLayer+0xf8>)
 800aa34:	402a      	ands	r2, r5
 800aa36:	4313      	orrs	r3, r2
 800aa38:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800aa3a:	6802      	ldr	r2, [r0, #0]
 800aa3c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800aa40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800aa44:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800aa46:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800aa48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4a:	3b09      	subs	r3, #9
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d911      	bls.n	800aa74 <HAL_DMA2D_ConfigLayer+0x90>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800aa50:	2301      	movs	r3, #1
 800aa52:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800aa56:	2300      	movs	r3, #0
 800aa58:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  return HAL_OK;
 800aa5c:	4618      	mov	r0, r3
}
 800aa5e:	bc30      	pop	{r4, r5}
 800aa60:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800aa62:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800aa66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800aa6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa6c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800aa70:	4313      	orrs	r3, r2
 800aa72:	e7db      	b.n	800aa2c <HAL_DMA2D_ConfigLayer+0x48>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800aa74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800aa78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa7c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800aa7e:	6802      	ldr	r2, [r0, #0]
 800aa80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aa84:	6293      	str	r3, [r2, #40]	; 0x28
 800aa86:	e7e3      	b.n	800aa50 <HAL_DMA2D_ConfigLayer+0x6c>
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800aa88:	2c0b      	cmp	r4, #11
 800aa8a:	d01b      	beq.n	800aac4 <HAL_DMA2D_ConfigLayer+0xe0>
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800aa8c:	4d14      	ldr	r5, [pc, #80]	; (800aae0 <HAL_DMA2D_ConfigLayer+0xfc>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800aa8e:	6804      	ldr	r4, [r0, #0]
 800aa90:	69e2      	ldr	r2, [r4, #28]
 800aa92:	ea22 0205 	bic.w	r2, r2, r5
 800aa96:	4313      	orrs	r3, r2
 800aa98:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800aa9a:	6802      	ldr	r2, [r0, #0]
 800aa9c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800aaa0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800aaa4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800aaa6:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800aaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaaa:	3b09      	subs	r3, #9
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d8cf      	bhi.n	800aa50 <HAL_DMA2D_ConfigLayer+0x6c>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800aab0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800aab4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aab8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800aaba:	6802      	ldr	r2, [r0, #0]
 800aabc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aac0:	6213      	str	r3, [r2, #32]
 800aac2:	e7c5      	b.n	800aa50 <HAL_DMA2D_ConfigLayer+0x6c>
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800aac4:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800aac8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800aacc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aace:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
      regMask  |= DMA2D_FGPFCCR_CSS;
 800aad2:	4d04      	ldr	r5, [pc, #16]	; (800aae4 <HAL_DMA2D_ConfigLayer+0x100>)
 800aad4:	e7db      	b.n	800aa8e <HAL_DMA2D_ConfigLayer+0xaa>
  __HAL_LOCK(hdma2d);
 800aad6:	2002      	movs	r0, #2
}
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	00ccfff0 	.word	0x00ccfff0
 800aae0:	ff33000f 	.word	0xff33000f
 800aae4:	ff3f000f 	.word	0xff3f000f

0800aae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaea:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 800aaec:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aaee:	e06b      	b.n	800abc8 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aaf0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800aaf2:	005e      	lsls	r6, r3, #1
 800aaf4:	2403      	movs	r4, #3
 800aaf6:	40b4      	lsls	r4, r6
 800aaf8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aafc:	68cc      	ldr	r4, [r1, #12]
 800aafe:	40b4      	lsls	r4, r6
 800ab00:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800ab02:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab04:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ab06:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ab0a:	684c      	ldr	r4, [r1, #4]
 800ab0c:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800ab10:	409c      	lsls	r4, r3
 800ab12:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800ab16:	6044      	str	r4, [r0, #4]
 800ab18:	e068      	b.n	800abec <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ab1a:	08dd      	lsrs	r5, r3, #3
 800ab1c:	3508      	adds	r5, #8
 800ab1e:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ab22:	f003 0407 	and.w	r4, r3, #7
 800ab26:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ab2a:	240f      	movs	r4, #15
 800ab2c:	fa04 f40c 	lsl.w	r4, r4, ip
 800ab30:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ab34:	690c      	ldr	r4, [r1, #16]
 800ab36:	fa04 f40c 	lsl.w	r4, r4, ip
 800ab3a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800ab3e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800ab42:	e06b      	b.n	800ac1c <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ab44:	2409      	movs	r4, #9
 800ab46:	e000      	b.n	800ab4a <HAL_GPIO_Init+0x62>
 800ab48:	2400      	movs	r4, #0
 800ab4a:	fa04 f40e 	lsl.w	r4, r4, lr
 800ab4e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab50:	f10c 0c02 	add.w	ip, ip, #2
 800ab54:	4d69      	ldr	r5, [pc, #420]	; (800acfc <HAL_GPIO_Init+0x214>)
 800ab56:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ab5a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800ab5e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800ab60:	43d4      	mvns	r4, r2
 800ab62:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ab66:	684f      	ldr	r7, [r1, #4]
 800ab68:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800ab6c:	d001      	beq.n	800ab72 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800ab6e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800ab72:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800ab76:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800ab78:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800ab7a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ab7e:	684f      	ldr	r7, [r1, #4]
 800ab80:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800ab84:	d001      	beq.n	800ab8a <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800ab86:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800ab8a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800ab8e:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ab90:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 800ab94:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ab98:	684f      	ldr	r7, [r1, #4]
 800ab9a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800ab9e:	d001      	beq.n	800aba4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800aba0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800aba4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800aba8:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800abac:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 800abb0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800abb2:	684e      	ldr	r6, [r1, #4]
 800abb4:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800abb8:	d001      	beq.n	800abbe <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800abba:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800abbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800abc2:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 800abc6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800abc8:	680a      	ldr	r2, [r1, #0]
 800abca:	fa32 f403 	lsrs.w	r4, r2, r3
 800abce:	f000 8092 	beq.w	800acf6 <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800abd2:	f04f 0c01 	mov.w	ip, #1
 800abd6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 800abda:	ea1c 0202 	ands.w	r2, ip, r2
 800abde:	d0f2      	beq.n	800abc6 <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800abe0:	684c      	ldr	r4, [r1, #4]
 800abe2:	f004 0403 	and.w	r4, r4, #3
 800abe6:	3c01      	subs	r4, #1
 800abe8:	2c01      	cmp	r4, #1
 800abea:	d981      	bls.n	800aaf0 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800abec:	684c      	ldr	r4, [r1, #4]
 800abee:	f004 0403 	and.w	r4, r4, #3
 800abf2:	2c03      	cmp	r4, #3
 800abf4:	d00c      	beq.n	800ac10 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 800abf6:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800abf8:	005d      	lsls	r5, r3, #1
 800abfa:	f04f 0c03 	mov.w	ip, #3
 800abfe:	fa0c fc05 	lsl.w	ip, ip, r5
 800ac02:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac06:	688c      	ldr	r4, [r1, #8]
 800ac08:	40ac      	lsls	r4, r5
 800ac0a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 800ac0e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ac10:	684c      	ldr	r4, [r1, #4]
 800ac12:	f004 0403 	and.w	r4, r4, #3
 800ac16:	2c02      	cmp	r4, #2
 800ac18:	f43f af7f 	beq.w	800ab1a <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 800ac1c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ac1e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800ac22:	f04f 0c03 	mov.w	ip, #3
 800ac26:	fa0c fc0e 	lsl.w	ip, ip, lr
 800ac2a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac2e:	684c      	ldr	r4, [r1, #4]
 800ac30:	f004 0403 	and.w	r4, r4, #3
 800ac34:	fa04 f40e 	lsl.w	r4, r4, lr
 800ac38:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800ac3c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ac3e:	684c      	ldr	r4, [r1, #4]
 800ac40:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800ac44:	d0bf      	beq.n	800abc6 <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac46:	4c2e      	ldr	r4, [pc, #184]	; (800ad00 <HAL_GPIO_Init+0x218>)
 800ac48:	f8d4 5154 	ldr.w	r5, [r4, #340]	; 0x154
 800ac4c:	f045 0502 	orr.w	r5, r5, #2
 800ac50:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 800ac54:	f8d4 4154 	ldr.w	r4, [r4, #340]	; 0x154
 800ac58:	f004 0402 	and.w	r4, r4, #2
 800ac5c:	9401      	str	r4, [sp, #4]
 800ac5e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800ac60:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800ac64:	f10c 0502 	add.w	r5, ip, #2
 800ac68:	4c24      	ldr	r4, [pc, #144]	; (800acfc <HAL_GPIO_Init+0x214>)
 800ac6a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ac6e:	f003 0403 	and.w	r4, r3, #3
 800ac72:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800ac76:	240f      	movs	r4, #15
 800ac78:	fa04 f40e 	lsl.w	r4, r4, lr
 800ac7c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ac80:	4c20      	ldr	r4, [pc, #128]	; (800ad04 <HAL_GPIO_Init+0x21c>)
 800ac82:	42a0      	cmp	r0, r4
 800ac84:	f43f af60 	beq.w	800ab48 <HAL_GPIO_Init+0x60>
 800ac88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ac8c:	42a0      	cmp	r0, r4
 800ac8e:	d022      	beq.n	800acd6 <HAL_GPIO_Init+0x1ee>
 800ac90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ac94:	42a0      	cmp	r0, r4
 800ac96:	d020      	beq.n	800acda <HAL_GPIO_Init+0x1f2>
 800ac98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ac9c:	42a0      	cmp	r0, r4
 800ac9e:	d01e      	beq.n	800acde <HAL_GPIO_Init+0x1f6>
 800aca0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aca4:	42a0      	cmp	r0, r4
 800aca6:	d01c      	beq.n	800ace2 <HAL_GPIO_Init+0x1fa>
 800aca8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800acac:	42a0      	cmp	r0, r4
 800acae:	d01a      	beq.n	800ace6 <HAL_GPIO_Init+0x1fe>
 800acb0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800acb4:	42a0      	cmp	r0, r4
 800acb6:	d018      	beq.n	800acea <HAL_GPIO_Init+0x202>
 800acb8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800acbc:	42a0      	cmp	r0, r4
 800acbe:	d016      	beq.n	800acee <HAL_GPIO_Init+0x206>
 800acc0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d014      	beq.n	800acf2 <HAL_GPIO_Init+0x20a>
 800acc8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800accc:	42a0      	cmp	r0, r4
 800acce:	f43f af39 	beq.w	800ab44 <HAL_GPIO_Init+0x5c>
 800acd2:	240a      	movs	r4, #10
 800acd4:	e739      	b.n	800ab4a <HAL_GPIO_Init+0x62>
 800acd6:	2401      	movs	r4, #1
 800acd8:	e737      	b.n	800ab4a <HAL_GPIO_Init+0x62>
 800acda:	2402      	movs	r4, #2
 800acdc:	e735      	b.n	800ab4a <HAL_GPIO_Init+0x62>
 800acde:	2403      	movs	r4, #3
 800ace0:	e733      	b.n	800ab4a <HAL_GPIO_Init+0x62>
 800ace2:	2404      	movs	r4, #4
 800ace4:	e731      	b.n	800ab4a <HAL_GPIO_Init+0x62>
 800ace6:	2405      	movs	r4, #5
 800ace8:	e72f      	b.n	800ab4a <HAL_GPIO_Init+0x62>
 800acea:	2406      	movs	r4, #6
 800acec:	e72d      	b.n	800ab4a <HAL_GPIO_Init+0x62>
 800acee:	2407      	movs	r4, #7
 800acf0:	e72b      	b.n	800ab4a <HAL_GPIO_Init+0x62>
 800acf2:	2408      	movs	r4, #8
 800acf4:	e729      	b.n	800ab4a <HAL_GPIO_Init+0x62>
  }
}
 800acf6:	b003      	add	sp, #12
 800acf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acfa:	bf00      	nop
 800acfc:	58000400 	.word	0x58000400
 800ad00:	58024400 	.word	0x58024400
 800ad04:	58020000 	.word	0x58020000

0800ad08 <HAL_GPIO_DeInit>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00U;
 800ad08:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800ad0a:	fa31 f203 	lsrs.w	r2, r1, r3
 800ad0e:	f000 809d 	beq.w	800ae4c <HAL_GPIO_DeInit+0x144>
{
 800ad12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad14:	e02e      	b.n	800ad74 <HAL_GPIO_DeInit+0x6c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ad16:	2509      	movs	r5, #9
 800ad18:	e000      	b.n	800ad1c <HAL_GPIO_DeInit+0x14>
 800ad1a:	2500      	movs	r5, #0
 800ad1c:	fa05 fc0c 	lsl.w	ip, r5, ip
 800ad20:	45a4      	cmp	ip, r4
 800ad22:	d072      	beq.n	800ae0a <HAL_GPIO_DeInit+0x102>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800ad24:	6804      	ldr	r4, [r0, #0]
 800ad26:	005d      	lsls	r5, r3, #1
 800ad28:	f04f 0c03 	mov.w	ip, #3
 800ad2c:	fa0c fc05 	lsl.w	ip, ip, r5
 800ad30:	ea44 040c 	orr.w	r4, r4, ip
 800ad34:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800ad36:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800ad3a:	f10e 0e08 	add.w	lr, lr, #8
 800ad3e:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800ad42:	f003 0507 	and.w	r5, r3, #7
 800ad46:	00ae      	lsls	r6, r5, #2
 800ad48:	250f      	movs	r5, #15
 800ad4a:	40b5      	lsls	r5, r6
 800ad4c:	ea24 0405 	bic.w	r4, r4, r5
 800ad50:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ad54:	68c4      	ldr	r4, [r0, #12]
 800ad56:	ea24 040c 	bic.w	r4, r4, ip
 800ad5a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ad5c:	6844      	ldr	r4, [r0, #4]
 800ad5e:	ea24 0202 	bic.w	r2, r4, r2
 800ad62:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ad64:	6882      	ldr	r2, [r0, #8]
 800ad66:	ea22 020c 	bic.w	r2, r2, ip
 800ad6a:	6082      	str	r2, [r0, #8]
    }

    position++;
 800ad6c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800ad6e:	fa31 f203 	lsrs.w	r2, r1, r3
 800ad72:	d06a      	beq.n	800ae4a <HAL_GPIO_DeInit+0x142>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800ad74:	2201      	movs	r2, #1
 800ad76:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800ad78:	ea12 0e01 	ands.w	lr, r2, r1
 800ad7c:	d0f6      	beq.n	800ad6c <HAL_GPIO_DeInit+0x64>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ad7e:	089e      	lsrs	r6, r3, #2
 800ad80:	1cb5      	adds	r5, r6, #2
 800ad82:	4c33      	ldr	r4, [pc, #204]	; (800ae50 <HAL_GPIO_DeInit+0x148>)
 800ad84:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800ad88:	f003 0c03 	and.w	ip, r3, #3
 800ad8c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800ad90:	250f      	movs	r5, #15
 800ad92:	fa05 f70c 	lsl.w	r7, r5, ip
 800ad96:	403c      	ands	r4, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ad98:	4d2e      	ldr	r5, [pc, #184]	; (800ae54 <HAL_GPIO_DeInit+0x14c>)
 800ad9a:	42a8      	cmp	r0, r5
 800ad9c:	d0bd      	beq.n	800ad1a <HAL_GPIO_DeInit+0x12>
 800ad9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ada2:	42a8      	cmp	r0, r5
 800ada4:	d021      	beq.n	800adea <HAL_GPIO_DeInit+0xe2>
 800ada6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adaa:	42a8      	cmp	r0, r5
 800adac:	d01f      	beq.n	800adee <HAL_GPIO_DeInit+0xe6>
 800adae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adb2:	42a8      	cmp	r0, r5
 800adb4:	d01d      	beq.n	800adf2 <HAL_GPIO_DeInit+0xea>
 800adb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adba:	42a8      	cmp	r0, r5
 800adbc:	d01b      	beq.n	800adf6 <HAL_GPIO_DeInit+0xee>
 800adbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adc2:	42a8      	cmp	r0, r5
 800adc4:	d019      	beq.n	800adfa <HAL_GPIO_DeInit+0xf2>
 800adc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adca:	42a8      	cmp	r0, r5
 800adcc:	d017      	beq.n	800adfe <HAL_GPIO_DeInit+0xf6>
 800adce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800add2:	42a8      	cmp	r0, r5
 800add4:	d015      	beq.n	800ae02 <HAL_GPIO_DeInit+0xfa>
 800add6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adda:	42a8      	cmp	r0, r5
 800addc:	d013      	beq.n	800ae06 <HAL_GPIO_DeInit+0xfe>
 800adde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ade2:	42a8      	cmp	r0, r5
 800ade4:	d097      	beq.n	800ad16 <HAL_GPIO_DeInit+0xe>
 800ade6:	250a      	movs	r5, #10
 800ade8:	e798      	b.n	800ad1c <HAL_GPIO_DeInit+0x14>
 800adea:	2501      	movs	r5, #1
 800adec:	e796      	b.n	800ad1c <HAL_GPIO_DeInit+0x14>
 800adee:	2502      	movs	r5, #2
 800adf0:	e794      	b.n	800ad1c <HAL_GPIO_DeInit+0x14>
 800adf2:	2503      	movs	r5, #3
 800adf4:	e792      	b.n	800ad1c <HAL_GPIO_DeInit+0x14>
 800adf6:	2504      	movs	r5, #4
 800adf8:	e790      	b.n	800ad1c <HAL_GPIO_DeInit+0x14>
 800adfa:	2505      	movs	r5, #5
 800adfc:	e78e      	b.n	800ad1c <HAL_GPIO_DeInit+0x14>
 800adfe:	2506      	movs	r5, #6
 800ae00:	e78c      	b.n	800ad1c <HAL_GPIO_DeInit+0x14>
 800ae02:	2507      	movs	r5, #7
 800ae04:	e78a      	b.n	800ad1c <HAL_GPIO_DeInit+0x14>
 800ae06:	2508      	movs	r5, #8
 800ae08:	e788      	b.n	800ad1c <HAL_GPIO_DeInit+0x14>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800ae0a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800ae0e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800ae12:	ea25 050e 	bic.w	r5, r5, lr
 800ae16:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800ae1a:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800ae1e:	ea25 050e 	bic.w	r5, r5, lr
 800ae22:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800ae26:	6865      	ldr	r5, [r4, #4]
 800ae28:	ea25 050e 	bic.w	r5, r5, lr
 800ae2c:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800ae2e:	6825      	ldr	r5, [r4, #0]
 800ae30:	ea25 050e 	bic.w	r5, r5, lr
 800ae34:	6025      	str	r5, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ae36:	f8df c018 	ldr.w	ip, [pc, #24]	; 800ae50 <HAL_GPIO_DeInit+0x148>
 800ae3a:	1cb4      	adds	r4, r6, #2
 800ae3c:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 800ae40:	ea25 0507 	bic.w	r5, r5, r7
 800ae44:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 800ae48:	e76c      	b.n	800ad24 <HAL_GPIO_DeInit+0x1c>
  }
}
 800ae4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	58000400 	.word	0x58000400
 800ae54:	58020000 	.word	0x58020000

0800ae58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ae58:	6903      	ldr	r3, [r0, #16]
 800ae5a:	4219      	tst	r1, r3
 800ae5c:	d001      	beq.n	800ae62 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800ae5e:	2001      	movs	r0, #1
 800ae60:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ae62:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800ae64:	4770      	bx	lr

0800ae66 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ae66:	b10a      	cbz	r2, 800ae6c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae68:	6181      	str	r1, [r0, #24]
 800ae6a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ae6c:	0409      	lsls	r1, r1, #16
 800ae6e:	6181      	str	r1, [r0, #24]
  }
}
 800ae70:	4770      	bx	lr

0800ae72 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ae72:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ae74:	ea01 0203 	and.w	r2, r1, r3
 800ae78:	ea21 0103 	bic.w	r1, r1, r3
 800ae7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae80:	6181      	str	r1, [r0, #24]
}
 800ae82:	4770      	bx	lr

0800ae84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ae84:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800ae86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae8e:	4203      	tst	r3, r0
 800ae90:	d100      	bne.n	800ae94 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 800ae92:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ae94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae98:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ae9c:	f7f7 ff7c 	bl	8002d98 <HAL_GPIO_EXTI_Callback>
}
 800aea0:	e7f7      	b.n	800ae92 <HAL_GPIO_EXTI_IRQHandler+0xe>

0800aea2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aea2:	6803      	ldr	r3, [r0, #0]
 800aea4:	699a      	ldr	r2, [r3, #24]
 800aea6:	f012 0f02 	tst.w	r2, #2
 800aeaa:	d001      	beq.n	800aeb0 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aeac:	2200      	movs	r2, #0
 800aeae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aeb0:	6803      	ldr	r3, [r0, #0]
 800aeb2:	699a      	ldr	r2, [r3, #24]
 800aeb4:	f012 0f01 	tst.w	r2, #1
 800aeb8:	d103      	bne.n	800aec2 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aeba:	699a      	ldr	r2, [r3, #24]
 800aebc:	f042 0201 	orr.w	r2, r2, #1
 800aec0:	619a      	str	r2, [r3, #24]
  }
}
 800aec2:	4770      	bx	lr

0800aec4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aec4:	b410      	push	{r4}
 800aec6:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aec8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800aecc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aed0:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aed2:	4321      	orrs	r1, r4
 800aed4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800aed8:	6802      	ldr	r2, [r0, #0]
 800aeda:	6853      	ldr	r3, [r2, #4]
 800aedc:	0d64      	lsrs	r4, r4, #21
 800aede:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800aee2:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800aee6:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800aeea:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 800aeee:	f044 0403 	orr.w	r4, r4, #3
 800aef2:	ea23 0404 	bic.w	r4, r3, r4
 800aef6:	4321      	orrs	r1, r4
 800aef8:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aefa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <I2C_IsErrorOccurred>:
{
 800af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af04:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800af06:	6803      	ldr	r3, [r0, #0]
 800af08:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800af0a:	f017 0710 	ands.w	r7, r7, #16
 800af0e:	d04e      	beq.n	800afae <I2C_IsErrorOccurred+0xae>
 800af10:	460e      	mov	r6, r1
 800af12:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af14:	2210      	movs	r2, #16
 800af16:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800af18:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	6998      	ldr	r0, [r3, #24]
 800af1e:	f010 0f20 	tst.w	r0, #32
 800af22:	d13d      	bne.n	800afa0 <I2C_IsErrorOccurred+0xa0>
 800af24:	2d00      	cmp	r5, #0
 800af26:	d13b      	bne.n	800afa0 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 800af28:	f1b6 3fff 	cmp.w	r6, #4294967295
 800af2c:	d0f5      	beq.n	800af1a <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800af2e:	f7ff f9f7 	bl	800a320 <HAL_GetTick>
 800af32:	eba0 0008 	sub.w	r0, r0, r8
 800af36:	42b0      	cmp	r0, r6
 800af38:	d801      	bhi.n	800af3e <I2C_IsErrorOccurred+0x3e>
 800af3a:	2e00      	cmp	r6, #0
 800af3c:	d1ed      	bne.n	800af1a <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800af3e:	6821      	ldr	r1, [r4, #0]
 800af40:	684a      	ldr	r2, [r1, #4]
 800af42:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800af46:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800af4a:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800af4c:	6988      	ldr	r0, [r1, #24]
 800af4e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800af52:	d004      	beq.n	800af5e <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 800af54:	3b20      	subs	r3, #32
 800af56:	bf18      	it	ne
 800af58:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 800af5a:	b902      	cbnz	r2, 800af5e <I2C_IsErrorOccurred+0x5e>
 800af5c:	b9c3      	cbnz	r3, 800af90 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	f013 0f20 	tst.w	r3, #32
 800af66:	d1d8      	bne.n	800af1a <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800af68:	f7ff f9da 	bl	800a320 <HAL_GetTick>
 800af6c:	eba0 0008 	sub.w	r0, r0, r8
 800af70:	2819      	cmp	r0, #25
 800af72:	d9f4      	bls.n	800af5e <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800af76:	f043 0320 	orr.w	r3, r3, #32
 800af7a:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800af7c:	2320      	movs	r3, #32
 800af7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800af82:	2300      	movs	r3, #0
 800af84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 800af88:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 800af8c:	2501      	movs	r5, #1
 800af8e:	e7e6      	b.n	800af5e <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800af90:	684b      	ldr	r3, [r1, #4]
 800af92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af96:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800af98:	f7ff f9c2 	bl	800a320 <HAL_GetTick>
 800af9c:	4680      	mov	r8, r0
 800af9e:	e7de      	b.n	800af5e <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	d140      	bne.n	800b026 <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afa4:	2220      	movs	r2, #32
 800afa6:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800afa8:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800afaa:	2501      	movs	r5, #1
 800afac:	e000      	b.n	800afb0 <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 800afae:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 800afb0:	6822      	ldr	r2, [r4, #0]
 800afb2:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800afb4:	f413 7f80 	tst.w	r3, #256	; 0x100
 800afb8:	d005      	beq.n	800afc6 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 800afba:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800afbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800afc2:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800afc4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800afc6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800afca:	d006      	beq.n	800afda <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 800afcc:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800afd0:	6822      	ldr	r2, [r4, #0]
 800afd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800afd6:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800afd8:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800afda:	f413 7f00 	tst.w	r3, #512	; 0x200
 800afde:	d024      	beq.n	800b02a <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 800afe0:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afea:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800afec:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800afee:	4620      	mov	r0, r4
 800aff0:	f7ff ff57 	bl	800aea2 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800aff4:	6822      	ldr	r2, [r4, #0]
 800aff6:	6853      	ldr	r3, [r2, #4]
 800aff8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800affc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b000:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b004:	f023 0301 	bic.w	r3, r3, #1
 800b008:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800b00a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b00c:	431f      	orrs	r7, r3
 800b00e:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b010:	2320      	movs	r3, #32
 800b012:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b016:	2300      	movs	r3, #0
 800b018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b01c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b020:	4628      	mov	r0, r5
 800b022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 800b026:	2704      	movs	r7, #4
 800b028:	e7c2      	b.n	800afb0 <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 800b02a:	2d00      	cmp	r5, #0
 800b02c:	d0f8      	beq.n	800b020 <I2C_IsErrorOccurred+0x120>
 800b02e:	e7de      	b.n	800afee <I2C_IsErrorOccurred+0xee>

0800b030 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	4604      	mov	r4, r0
 800b034:	460d      	mov	r5, r1
 800b036:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	f013 0f02 	tst.w	r3, #2
 800b040:	d11d      	bne.n	800b07e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b042:	4632      	mov	r2, r6
 800b044:	4629      	mov	r1, r5
 800b046:	4620      	mov	r0, r4
 800b048:	f7ff ff5a 	bl	800af00 <I2C_IsErrorOccurred>
 800b04c:	b9c8      	cbnz	r0, 800b082 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800b04e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b052:	d0f1      	beq.n	800b038 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b054:	f7ff f964 	bl	800a320 <HAL_GetTick>
 800b058:	1b80      	subs	r0, r0, r6
 800b05a:	42a8      	cmp	r0, r5
 800b05c:	d801      	bhi.n	800b062 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800b05e:	2d00      	cmp	r5, #0
 800b060:	d1ea      	bne.n	800b038 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b062:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b064:	f043 0320 	orr.w	r3, r3, #32
 800b068:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b06a:	2320      	movs	r3, #32
 800b06c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b070:	2300      	movs	r3, #0
 800b072:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b076:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800b07a:	2001      	movs	r0, #1
 800b07c:	e000      	b.n	800b080 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800b07e:	2000      	movs	r0, #0
}
 800b080:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800b082:	2001      	movs	r0, #1
 800b084:	e7fc      	b.n	800b080 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800b086 <I2C_WaitOnFlagUntilTimeout>:
{
 800b086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b08a:	4606      	mov	r6, r0
 800b08c:	4688      	mov	r8, r1
 800b08e:	4617      	mov	r7, r2
 800b090:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b092:	6834      	ldr	r4, [r6, #0]
 800b094:	69a4      	ldr	r4, [r4, #24]
 800b096:	ea38 0304 	bics.w	r3, r8, r4
 800b09a:	bf0c      	ite	eq
 800b09c:	f04f 0c01 	moveq.w	ip, #1
 800b0a0:	f04f 0c00 	movne.w	ip, #0
 800b0a4:	45bc      	cmp	ip, r7
 800b0a6:	d118      	bne.n	800b0da <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 800b0a8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b0ac:	d0f1      	beq.n	800b092 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ae:	f7ff f937 	bl	800a320 <HAL_GetTick>
 800b0b2:	9b06      	ldr	r3, [sp, #24]
 800b0b4:	1ac0      	subs	r0, r0, r3
 800b0b6:	42a8      	cmp	r0, r5
 800b0b8:	d801      	bhi.n	800b0be <I2C_WaitOnFlagUntilTimeout+0x38>
 800b0ba:	2d00      	cmp	r5, #0
 800b0bc:	d1e9      	bne.n	800b092 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0be:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800b0c0:	f043 0320 	orr.w	r3, r3, #32
 800b0c4:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0c6:	2320      	movs	r3, #32
 800b0c8:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800b0d2:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	e000      	b.n	800b0dc <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 800b0da:	2000      	movs	r0, #0
}
 800b0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0e0 <I2C_RequestMemoryWrite>:
{
 800b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e4:	b082      	sub	sp, #8
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	4690      	mov	r8, r2
 800b0ea:	461d      	mov	r5, r3
 800b0ec:	9e08      	ldr	r6, [sp, #32]
 800b0ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b0f0:	4b19      	ldr	r3, [pc, #100]	; (800b158 <I2C_RequestMemoryWrite+0x78>)
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0f8:	b2ea      	uxtb	r2, r5
 800b0fa:	f7ff fee3 	bl	800aec4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0fe:	463a      	mov	r2, r7
 800b100:	4631      	mov	r1, r6
 800b102:	4620      	mov	r0, r4
 800b104:	f7ff ff94 	bl	800b030 <I2C_WaitOnTXISFlagUntilTimeout>
 800b108:	b9f8      	cbnz	r0, 800b14a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b10a:	2d01      	cmp	r5, #1
 800b10c:	d10e      	bne.n	800b12c <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b10e:	6823      	ldr	r3, [r4, #0]
 800b110:	fa5f f288 	uxtb.w	r2, r8
 800b114:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b116:	9700      	str	r7, [sp, #0]
 800b118:	4633      	mov	r3, r6
 800b11a:	2200      	movs	r2, #0
 800b11c:	2180      	movs	r1, #128	; 0x80
 800b11e:	4620      	mov	r0, r4
 800b120:	f7ff ffb1 	bl	800b086 <I2C_WaitOnFlagUntilTimeout>
 800b124:	b9a8      	cbnz	r0, 800b152 <I2C_RequestMemoryWrite+0x72>
}
 800b126:	b002      	add	sp, #8
 800b128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800b132:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b134:	463a      	mov	r2, r7
 800b136:	4631      	mov	r1, r6
 800b138:	4620      	mov	r0, r4
 800b13a:	f7ff ff79 	bl	800b030 <I2C_WaitOnTXISFlagUntilTimeout>
 800b13e:	b930      	cbnz	r0, 800b14e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	fa5f f288 	uxtb.w	r2, r8
 800b146:	629a      	str	r2, [r3, #40]	; 0x28
 800b148:	e7e5      	b.n	800b116 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800b14a:	2001      	movs	r0, #1
 800b14c:	e7eb      	b.n	800b126 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800b14e:	2001      	movs	r0, #1
 800b150:	e7e9      	b.n	800b126 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800b152:	2001      	movs	r0, #1
 800b154:	e7e7      	b.n	800b126 <I2C_RequestMemoryWrite+0x46>
 800b156:	bf00      	nop
 800b158:	80002000 	.word	0x80002000

0800b15c <I2C_RequestMemoryRead>:
{
 800b15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b160:	b082      	sub	sp, #8
 800b162:	4604      	mov	r4, r0
 800b164:	4690      	mov	r8, r2
 800b166:	461d      	mov	r5, r3
 800b168:	9e08      	ldr	r6, [sp, #32]
 800b16a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b16c:	4b18      	ldr	r3, [pc, #96]	; (800b1d0 <I2C_RequestMemoryRead+0x74>)
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	2300      	movs	r3, #0
 800b172:	b2ea      	uxtb	r2, r5
 800b174:	f7ff fea6 	bl	800aec4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b178:	463a      	mov	r2, r7
 800b17a:	4631      	mov	r1, r6
 800b17c:	4620      	mov	r0, r4
 800b17e:	f7ff ff57 	bl	800b030 <I2C_WaitOnTXISFlagUntilTimeout>
 800b182:	b9f8      	cbnz	r0, 800b1c4 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b184:	2d01      	cmp	r5, #1
 800b186:	d10e      	bne.n	800b1a6 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	fa5f f288 	uxtb.w	r2, r8
 800b18e:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b190:	9700      	str	r7, [sp, #0]
 800b192:	4633      	mov	r3, r6
 800b194:	2200      	movs	r2, #0
 800b196:	2140      	movs	r1, #64	; 0x40
 800b198:	4620      	mov	r0, r4
 800b19a:	f7ff ff74 	bl	800b086 <I2C_WaitOnFlagUntilTimeout>
 800b19e:	b9a8      	cbnz	r0, 800b1cc <I2C_RequestMemoryRead+0x70>
}
 800b1a0:	b002      	add	sp, #8
 800b1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800b1ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1ae:	463a      	mov	r2, r7
 800b1b0:	4631      	mov	r1, r6
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f7ff ff3c 	bl	800b030 <I2C_WaitOnTXISFlagUntilTimeout>
 800b1b8:	b930      	cbnz	r0, 800b1c8 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	fa5f f288 	uxtb.w	r2, r8
 800b1c0:	629a      	str	r2, [r3, #40]	; 0x28
 800b1c2:	e7e5      	b.n	800b190 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 800b1c4:	2001      	movs	r0, #1
 800b1c6:	e7eb      	b.n	800b1a0 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 800b1c8:	2001      	movs	r0, #1
 800b1ca:	e7e9      	b.n	800b1a0 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 800b1cc:	2001      	movs	r0, #1
 800b1ce:	e7e7      	b.n	800b1a0 <I2C_RequestMemoryRead+0x44>
 800b1d0:	80002000 	.word	0x80002000

0800b1d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	460c      	mov	r4, r1
 800b1da:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	f013 0f20 	tst.w	r3, #32
 800b1e4:	d11a      	bne.n	800b21c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1e6:	4632      	mov	r2, r6
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f7ff fe88 	bl	800af00 <I2C_IsErrorOccurred>
 800b1f0:	b9b0      	cbnz	r0, 800b220 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1f2:	f7ff f895 	bl	800a320 <HAL_GetTick>
 800b1f6:	1b80      	subs	r0, r0, r6
 800b1f8:	42a0      	cmp	r0, r4
 800b1fa:	d801      	bhi.n	800b200 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800b1fc:	2c00      	cmp	r4, #0
 800b1fe:	d1ed      	bne.n	800b1dc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b200:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b202:	f043 0320 	orr.w	r3, r3, #32
 800b206:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b208:	2320      	movs	r3, #32
 800b20a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b20e:	2300      	movs	r3, #0
 800b210:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b214:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800b218:	2001      	movs	r0, #1
}
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800b21c:	2000      	movs	r0, #0
 800b21e:	e7fc      	b.n	800b21a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 800b220:	2001      	movs	r0, #1
 800b222:	e7fa      	b.n	800b21a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800b224 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800b224:	2800      	cmp	r0, #0
 800b226:	d057      	beq.n	800b2d8 <HAL_I2C_Init+0xb4>
{
 800b228:	b510      	push	{r4, lr}
 800b22a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b22c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b230:	2b00      	cmp	r3, #0
 800b232:	d041      	beq.n	800b2b8 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b234:	2324      	movs	r3, #36	; 0x24
 800b236:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b23a:	6822      	ldr	r2, [r4, #0]
 800b23c:	6813      	ldr	r3, [r2, #0]
 800b23e:	f023 0301 	bic.w	r3, r3, #1
 800b242:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b244:	6863      	ldr	r3, [r4, #4]
 800b246:	6822      	ldr	r2, [r4, #0]
 800b248:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800b24c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b24e:	6822      	ldr	r2, [r4, #0]
 800b250:	6893      	ldr	r3, [r2, #8]
 800b252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b256:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b258:	68e3      	ldr	r3, [r4, #12]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d031      	beq.n	800b2c2 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b25e:	68a3      	ldr	r3, [r4, #8]
 800b260:	6822      	ldr	r2, [r4, #0]
 800b262:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800b266:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b268:	68e3      	ldr	r3, [r4, #12]
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d02f      	beq.n	800b2ce <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b26e:	6822      	ldr	r2, [r4, #0]
 800b270:	6851      	ldr	r1, [r2, #4]
 800b272:	4b1a      	ldr	r3, [pc, #104]	; (800b2dc <HAL_I2C_Init+0xb8>)
 800b274:	430b      	orrs	r3, r1
 800b276:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b278:	6822      	ldr	r2, [r4, #0]
 800b27a:	68d3      	ldr	r3, [r2, #12]
 800b27c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b280:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b282:	6923      	ldr	r3, [r4, #16]
 800b284:	6962      	ldr	r2, [r4, #20]
 800b286:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b288:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b28a:	6822      	ldr	r2, [r4, #0]
 800b28c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b290:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b292:	69e3      	ldr	r3, [r4, #28]
 800b294:	6a21      	ldr	r1, [r4, #32]
 800b296:	6822      	ldr	r2, [r4, #0]
 800b298:	430b      	orrs	r3, r1
 800b29a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b29c:	6822      	ldr	r2, [r4, #0]
 800b29e:	6813      	ldr	r3, [r2, #0]
 800b2a0:	f043 0301 	orr.w	r3, r3, #1
 800b2a4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b2aa:	2320      	movs	r3, #32
 800b2ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b2b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2b2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800b2b6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800b2b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800b2bc:	f7f7 fdce 	bl	8002e5c <HAL_I2C_MspInit>
 800b2c0:	e7b8      	b.n	800b234 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b2c2:	68a3      	ldr	r3, [r4, #8]
 800b2c4:	6822      	ldr	r2, [r4, #0]
 800b2c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ca:	6093      	str	r3, [r2, #8]
 800b2cc:	e7cc      	b.n	800b268 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2d4:	605a      	str	r2, [r3, #4]
 800b2d6:	e7ca      	b.n	800b26e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800b2d8:	2001      	movs	r0, #1
}
 800b2da:	4770      	bx	lr
 800b2dc:	02008000 	.word	0x02008000

0800b2e0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800b2e0:	b1a8      	cbz	r0, 800b30e <HAL_I2C_DeInit+0x2e>
{
 800b2e2:	b510      	push	{r4, lr}
 800b2e4:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2e6:	2324      	movs	r3, #36	; 0x24
 800b2e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b2ec:	6802      	ldr	r2, [r0, #0]
 800b2ee:	6813      	ldr	r3, [r2, #0]
 800b2f0:	f023 0301 	bic.w	r3, r3, #1
 800b2f4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800b2f6:	f7f7 fdfd 	bl	8002ef4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b2fe:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b302:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b304:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 800b308:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800b30c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b30e:	2001      	movs	r0, #1
}
 800b310:	4770      	bx	lr

0800b312 <HAL_I2C_Mem_Write>:
{
 800b312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b316:	b083      	sub	sp, #12
 800b318:	460d      	mov	r5, r1
 800b31a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b31e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b320:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800b324:	b2c9      	uxtb	r1, r1
 800b326:	2920      	cmp	r1, #32
 800b328:	f040 80bc 	bne.w	800b4a4 <HAL_I2C_Mem_Write+0x192>
 800b32c:	4604      	mov	r4, r0
 800b32e:	4690      	mov	r8, r2
 800b330:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800b332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b334:	f1ba 0f00 	cmp.w	sl, #0
 800b338:	bf18      	it	ne
 800b33a:	2b00      	cmpne	r3, #0
 800b33c:	d016      	beq.n	800b36c <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 800b33e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b342:	2b01      	cmp	r3, #1
 800b344:	f000 80b2 	beq.w	800b4ac <HAL_I2C_Mem_Write+0x19a>
 800b348:	f04f 0b01 	mov.w	fp, #1
 800b34c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b350:	f7fe ffe6 	bl	800a320 <HAL_GetTick>
 800b354:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b356:	9000      	str	r0, [sp, #0]
 800b358:	2319      	movs	r3, #25
 800b35a:	465a      	mov	r2, fp
 800b35c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b360:	4620      	mov	r0, r4
 800b362:	f7ff fe90 	bl	800b086 <I2C_WaitOnFlagUntilTimeout>
 800b366:	b130      	cbz	r0, 800b376 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 800b368:	2001      	movs	r0, #1
 800b36a:	e09c      	b.n	800b4a6 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b36c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b370:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800b372:	2001      	movs	r0, #1
 800b374:	e097      	b.n	800b4a6 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b376:	2321      	movs	r3, #33	; 0x21
 800b378:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b37c:	2340      	movs	r3, #64	; 0x40
 800b37e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b382:	2300      	movs	r3, #0
 800b384:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800b386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b388:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800b38a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b38e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b390:	9601      	str	r6, [sp, #4]
 800b392:	9700      	str	r7, [sp, #0]
 800b394:	464b      	mov	r3, r9
 800b396:	4642      	mov	r2, r8
 800b398:	4629      	mov	r1, r5
 800b39a:	4620      	mov	r0, r4
 800b39c:	f7ff fea0 	bl	800b0e0 <I2C_RequestMemoryWrite>
 800b3a0:	b970      	cbnz	r0, 800b3c0 <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	2bff      	cmp	r3, #255	; 0xff
 800b3a8:	d90f      	bls.n	800b3ca <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3aa:	22ff      	movs	r2, #255	; 0xff
 800b3ac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f7ff fd83 	bl	800aec4 <I2C_TransferConfig>
 800b3be:	e021      	b.n	800b404 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800b3c6:	4658      	mov	r0, fp
 800b3c8:	e06d      	b.n	800b4a6 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 800b3ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b3cc:	b292      	uxth	r2, r2
 800b3ce:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3d8:	b2d2      	uxtb	r2, r2
 800b3da:	4629      	mov	r1, r5
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f7ff fd71 	bl	800aec4 <I2C_TransferConfig>
 800b3e2:	e00f      	b.n	800b404 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800b3e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b3e6:	b292      	uxth	r2, r2
 800b3e8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b3f2:	b2d2      	uxtb	r2, r2
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f7ff fd64 	bl	800aec4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b3fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	2b00      	cmp	r3, #0
 800b402:	d033      	beq.n	800b46c <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b404:	4632      	mov	r2, r6
 800b406:	4639      	mov	r1, r7
 800b408:	4620      	mov	r0, r4
 800b40a:	f7ff fe11 	bl	800b030 <I2C_WaitOnTXISFlagUntilTimeout>
 800b40e:	2800      	cmp	r0, #0
 800b410:	d14e      	bne.n	800b4b0 <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b412:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	7812      	ldrb	r2, [r2, #0]
 800b418:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b41a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b41c:	3301      	adds	r3, #1
 800b41e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b420:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b422:	b29b      	uxth	r3, r3
 800b424:	3b01      	subs	r3, #1
 800b426:	b29b      	uxth	r3, r3
 800b428:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b42a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b42c:	3b01      	subs	r3, #1
 800b42e:	b29b      	uxth	r3, r3
 800b430:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b432:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b434:	b292      	uxth	r2, r2
 800b436:	2a00      	cmp	r2, #0
 800b438:	d0e0      	beq.n	800b3fc <HAL_I2C_Mem_Write+0xea>
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1de      	bne.n	800b3fc <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b43e:	9600      	str	r6, [sp, #0]
 800b440:	463b      	mov	r3, r7
 800b442:	2200      	movs	r2, #0
 800b444:	2180      	movs	r1, #128	; 0x80
 800b446:	4620      	mov	r0, r4
 800b448:	f7ff fe1d 	bl	800b086 <I2C_WaitOnFlagUntilTimeout>
 800b44c:	bb90      	cbnz	r0, 800b4b4 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b44e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b450:	b29b      	uxth	r3, r3
 800b452:	2bff      	cmp	r3, #255	; 0xff
 800b454:	d9c6      	bls.n	800b3e4 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b456:	22ff      	movs	r2, #255	; 0xff
 800b458:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b45a:	2300      	movs	r3, #0
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b462:	4629      	mov	r1, r5
 800b464:	4620      	mov	r0, r4
 800b466:	f7ff fd2d 	bl	800aec4 <I2C_TransferConfig>
 800b46a:	e7c7      	b.n	800b3fc <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b46c:	4632      	mov	r2, r6
 800b46e:	4639      	mov	r1, r7
 800b470:	4620      	mov	r0, r4
 800b472:	f7ff feaf 	bl	800b1d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b476:	b9f8      	cbnz	r0, 800b4b8 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	2220      	movs	r2, #32
 800b47c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b47e:	6821      	ldr	r1, [r4, #0]
 800b480:	684b      	ldr	r3, [r1, #4]
 800b482:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800b486:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b48a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b48e:	f023 0301 	bic.w	r3, r3, #1
 800b492:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b494:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b498:	2300      	movs	r3, #0
 800b49a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b49e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800b4a2:	e000      	b.n	800b4a6 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 800b4a4:	2002      	movs	r0, #2
}
 800b4a6:	b003      	add	sp, #12
 800b4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b4ac:	2002      	movs	r0, #2
 800b4ae:	e7fa      	b.n	800b4a6 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 800b4b0:	2001      	movs	r0, #1
 800b4b2:	e7f8      	b.n	800b4a6 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	e7f6      	b.n	800b4a6 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 800b4b8:	2001      	movs	r0, #1
 800b4ba:	e7f4      	b.n	800b4a6 <HAL_I2C_Mem_Write+0x194>

0800b4bc <HAL_I2C_Mem_Read>:
{
 800b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c0:	b083      	sub	sp, #12
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b4c8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4ca:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800b4ce:	b2c9      	uxtb	r1, r1
 800b4d0:	2920      	cmp	r1, #32
 800b4d2:	f040 80bd 	bne.w	800b650 <HAL_I2C_Mem_Read+0x194>
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	4690      	mov	r8, r2
 800b4da:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800b4dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4de:	f1ba 0f00 	cmp.w	sl, #0
 800b4e2:	bf18      	it	ne
 800b4e4:	2b00      	cmpne	r3, #0
 800b4e6:	d016      	beq.n	800b516 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 800b4e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	f000 80b3 	beq.w	800b658 <HAL_I2C_Mem_Read+0x19c>
 800b4f2:	f04f 0b01 	mov.w	fp, #1
 800b4f6:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b4fa:	f7fe ff11 	bl	800a320 <HAL_GetTick>
 800b4fe:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b500:	9000      	str	r0, [sp, #0]
 800b502:	2319      	movs	r3, #25
 800b504:	465a      	mov	r2, fp
 800b506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b50a:	4620      	mov	r0, r4
 800b50c:	f7ff fdbb 	bl	800b086 <I2C_WaitOnFlagUntilTimeout>
 800b510:	b130      	cbz	r0, 800b520 <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 800b512:	2001      	movs	r0, #1
 800b514:	e09d      	b.n	800b652 <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b51a:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 800b51c:	2001      	movs	r0, #1
 800b51e:	e098      	b.n	800b652 <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b520:	2322      	movs	r3, #34	; 0x22
 800b522:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b526:	2340      	movs	r3, #64	; 0x40
 800b528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b52c:	2300      	movs	r3, #0
 800b52e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800b530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b532:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800b534:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b538:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b53a:	9601      	str	r6, [sp, #4]
 800b53c:	9700      	str	r7, [sp, #0]
 800b53e:	464b      	mov	r3, r9
 800b540:	4642      	mov	r2, r8
 800b542:	4629      	mov	r1, r5
 800b544:	4620      	mov	r0, r4
 800b546:	f7ff fe09 	bl	800b15c <I2C_RequestMemoryRead>
 800b54a:	b970      	cbnz	r0, 800b56a <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b54c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b54e:	b29b      	uxth	r3, r3
 800b550:	2bff      	cmp	r3, #255	; 0xff
 800b552:	d90f      	bls.n	800b574 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b554:	22ff      	movs	r2, #255	; 0xff
 800b556:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b558:	4b43      	ldr	r3, [pc, #268]	; (800b668 <HAL_I2C_Mem_Read+0x1ac>)
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b560:	4629      	mov	r1, r5
 800b562:	4620      	mov	r0, r4
 800b564:	f7ff fcae 	bl	800aec4 <I2C_TransferConfig>
 800b568:	e021      	b.n	800b5ae <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 800b56a:	2300      	movs	r3, #0
 800b56c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800b570:	4658      	mov	r0, fp
 800b572:	e06e      	b.n	800b652 <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800b574:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b576:	b292      	uxth	r2, r2
 800b578:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b57a:	4b3b      	ldr	r3, [pc, #236]	; (800b668 <HAL_I2C_Mem_Read+0x1ac>)
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b582:	b2d2      	uxtb	r2, r2
 800b584:	4629      	mov	r1, r5
 800b586:	4620      	mov	r0, r4
 800b588:	f7ff fc9c 	bl	800aec4 <I2C_TransferConfig>
 800b58c:	e00f      	b.n	800b5ae <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 800b58e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b590:	b292      	uxth	r2, r2
 800b592:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b594:	2300      	movs	r3, #0
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b59c:	b2d2      	uxtb	r2, r2
 800b59e:	4629      	mov	r1, r5
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f7ff fc8f 	bl	800aec4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b5a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d034      	beq.n	800b618 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b5ae:	9600      	str	r6, [sp, #0]
 800b5b0:	463b      	mov	r3, r7
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	2104      	movs	r1, #4
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f7ff fd65 	bl	800b086 <I2C_WaitOnFlagUntilTimeout>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d14d      	bne.n	800b65c <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5c6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800b5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b5ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b5d0:	3a01      	subs	r2, #1
 800b5d2:	b292      	uxth	r2, r2
 800b5d4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b5d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b5e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0de      	beq.n	800b5a6 <HAL_I2C_Mem_Read+0xea>
 800b5e8:	2a00      	cmp	r2, #0
 800b5ea:	d1dc      	bne.n	800b5a6 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b5ec:	9600      	str	r6, [sp, #0]
 800b5ee:	463b      	mov	r3, r7
 800b5f0:	2180      	movs	r1, #128	; 0x80
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f7ff fd47 	bl	800b086 <I2C_WaitOnFlagUntilTimeout>
 800b5f8:	bb90      	cbnz	r0, 800b660 <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	2bff      	cmp	r3, #255	; 0xff
 800b600:	d9c5      	bls.n	800b58e <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b602:	22ff      	movs	r2, #255	; 0xff
 800b604:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b606:	2300      	movs	r3, #0
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b60e:	4629      	mov	r1, r5
 800b610:	4620      	mov	r0, r4
 800b612:	f7ff fc57 	bl	800aec4 <I2C_TransferConfig>
 800b616:	e7c6      	b.n	800b5a6 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b618:	4632      	mov	r2, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	4620      	mov	r0, r4
 800b61e:	f7ff fdd9 	bl	800b1d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b622:	b9f8      	cbnz	r0, 800b664 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b624:	6823      	ldr	r3, [r4, #0]
 800b626:	2220      	movs	r2, #32
 800b628:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b62a:	6821      	ldr	r1, [r4, #0]
 800b62c:	684b      	ldr	r3, [r1, #4]
 800b62e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800b632:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b636:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b63a:	f023 0301 	bic.w	r3, r3, #1
 800b63e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b640:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b644:	2300      	movs	r3, #0
 800b646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b64a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800b64e:	e000      	b.n	800b652 <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 800b650:	2002      	movs	r0, #2
}
 800b652:	b003      	add	sp, #12
 800b654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b658:	2002      	movs	r0, #2
 800b65a:	e7fa      	b.n	800b652 <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 800b65c:	2001      	movs	r0, #1
 800b65e:	e7f8      	b.n	800b652 <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 800b660:	2001      	movs	r0, #1
 800b662:	e7f6      	b.n	800b652 <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 800b664:	2001      	movs	r0, #1
 800b666:	e7f4      	b.n	800b652 <HAL_I2C_Mem_Read+0x196>
 800b668:	80002400 	.word	0x80002400

0800b66c <HAL_I2C_GetState>:
  return hi2c->State;
 800b66c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800b670:	4770      	bx	lr

0800b672 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800b672:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800b674:	4770      	bx	lr

0800b676 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b676:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	2b20      	cmp	r3, #32
 800b67e:	d124      	bne.n	800b6ca <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b680:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b684:	2b01      	cmp	r3, #1
 800b686:	d022      	beq.n	800b6ce <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800b688:	2301      	movs	r3, #1
 800b68a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b68e:	2324      	movs	r3, #36	; 0x24
 800b690:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b694:	6802      	ldr	r2, [r0, #0]
 800b696:	6813      	ldr	r3, [r2, #0]
 800b698:	f023 0301 	bic.w	r3, r3, #1
 800b69c:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b69e:	6802      	ldr	r2, [r0, #0]
 800b6a0:	6813      	ldr	r3, [r2, #0]
 800b6a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6a6:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b6a8:	6802      	ldr	r2, [r0, #0]
 800b6aa:	6813      	ldr	r3, [r2, #0]
 800b6ac:	4319      	orrs	r1, r3
 800b6ae:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b6b0:	6802      	ldr	r2, [r0, #0]
 800b6b2:	6813      	ldr	r3, [r2, #0]
 800b6b4:	f043 0301 	orr.w	r3, r3, #1
 800b6b8:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6ba:	2320      	movs	r3, #32
 800b6bc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800b6ca:	2002      	movs	r0, #2
 800b6cc:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800b6ce:	2002      	movs	r0, #2
  }
}
 800b6d0:	4770      	bx	lr

0800b6d2 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6d2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b20      	cmp	r3, #32
 800b6da:	d122      	bne.n	800b722 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d020      	beq.n	800b726 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b6ea:	2324      	movs	r3, #36	; 0x24
 800b6ec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b6f0:	6802      	ldr	r2, [r0, #0]
 800b6f2:	6813      	ldr	r3, [r2, #0]
 800b6f4:	f023 0301 	bic.w	r3, r3, #1
 800b6f8:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b6fa:	6802      	ldr	r2, [r0, #0]
 800b6fc:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b6fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b702:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b706:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b708:	6802      	ldr	r2, [r0, #0]
 800b70a:	6813      	ldr	r3, [r2, #0]
 800b70c:	f043 0301 	orr.w	r3, r3, #1
 800b710:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b712:	2320      	movs	r3, #32
 800b714:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b718:	2300      	movs	r3, #0
 800b71a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800b71e:	4618      	mov	r0, r3
 800b720:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800b722:	2002      	movs	r0, #2
 800b724:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800b726:	2002      	movs	r0, #2
  }
}
 800b728:	4770      	bx	lr
	...

0800b72c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b72c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b72e:	684d      	ldr	r5, [r1, #4]
 800b730:	6804      	ldr	r4, [r0, #0]
 800b732:	68e3      	ldr	r3, [r4, #12]
 800b734:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800b738:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b73a:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 800b73e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800b742:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800b746:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b74a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b74e:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b750:	6804      	ldr	r4, [r0, #0]
 800b752:	68e6      	ldr	r6, [r4, #12]
 800b754:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b758:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b75a:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b75c:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b760:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b764:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b768:	68cd      	ldr	r5, [r1, #12]
 800b76a:	6804      	ldr	r4, [r0, #0]
 800b76c:	68e3      	ldr	r3, [r4, #12]
 800b76e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b772:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b774:	eb04 1ec2 	add.w	lr, r4, r2, lsl #7
 800b778:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 800b77c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b780:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b784:	688b      	ldr	r3, [r1, #8]
 800b786:	6804      	ldr	r4, [r0, #0]
 800b788:	68e6      	ldr	r6, [r4, #12]
 800b78a:	f3c6 0e0a 	ubfx	lr, r6, #0, #11
 800b78e:	4473      	add	r3, lr
 800b790:	3301      	adds	r3, #1
 800b792:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800b796:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800b79a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b79e:	6803      	ldr	r3, [r0, #0]
 800b7a0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800b7a4:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800b7a8:	f024 0407 	bic.w	r4, r4, #7
 800b7ac:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b7b0:	6803      	ldr	r3, [r0, #0]
 800b7b2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800b7b6:	690c      	ldr	r4, [r1, #16]
 800b7b8:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b7bc:	f891 7031 	ldrb.w	r7, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b7c0:	f891 6032 	ldrb.w	r6, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b7c4:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b7c6:	6804      	ldr	r4, [r0, #0]
 800b7c8:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 800b7cc:	f104 0e84 	add.w	lr, r4, #132	; 0x84
 800b7d0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b7d4:	2400      	movs	r4, #0
 800b7d6:	f8ce 4018 	str.w	r4, [lr, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b7da:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800b7de:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800b7e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800b7e6:	6806      	ldr	r6, [r0, #0]
 800b7e8:	eb06 1ec2 	add.w	lr, r6, r2, lsl #7
 800b7ec:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800b7f0:	f8ce 309c 	str.w	r3, [lr, #156]	; 0x9c
 800b7f4:	f10e 0e84 	add.w	lr, lr, #132	; 0x84

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b7f8:	6803      	ldr	r3, [r0, #0]
 800b7fa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800b7fe:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 800b802:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800b806:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b80a:	6803      	ldr	r3, [r0, #0]
 800b80c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800b810:	694d      	ldr	r5, [r1, #20]
 800b812:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b816:	6803      	ldr	r3, [r0, #0]
 800b818:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800b81c:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800b820:	4d2e      	ldr	r5, [pc, #184]	; (800b8dc <LTDC_SetConfig+0x1b0>)
 800b822:	4035      	ands	r5, r6
 800b824:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b828:	6a0d      	ldr	r5, [r1, #32]
 800b82a:	6803      	ldr	r3, [r0, #0]
 800b82c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800b830:	69ce      	ldr	r6, [r1, #28]
 800b832:	4335      	orrs	r5, r6
 800b834:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b838:	6803      	ldr	r3, [r0, #0]
 800b83a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800b83e:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 800b842:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b846:	6803      	ldr	r3, [r0, #0]
 800b848:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 800b84c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800b84e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b852:	690b      	ldr	r3, [r1, #16]
 800b854:	b16b      	cbz	r3, 800b872 <LTDC_SetConfig+0x146>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b856:	2b01      	cmp	r3, #1
 800b858:	d039      	beq.n	800b8ce <LTDC_SetConfig+0x1a2>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	bf18      	it	ne
 800b85e:	2b04      	cmpne	r3, #4
 800b860:	d037      	beq.n	800b8d2 <LTDC_SetConfig+0x1a6>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b862:	2b03      	cmp	r3, #3
 800b864:	d037      	beq.n	800b8d6 <LTDC_SetConfig+0x1aa>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b866:	2b07      	cmp	r3, #7
 800b868:	d001      	beq.n	800b86e <LTDC_SetConfig+0x142>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800b86a:	2501      	movs	r5, #1
 800b86c:	e002      	b.n	800b874 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800b86e:	2502      	movs	r5, #2
 800b870:	e000      	b.n	800b874 <LTDC_SetConfig+0x148>
    tmp = 4U;
 800b872:	2504      	movs	r5, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b874:	6802      	ldr	r2, [r0, #0]
 800b876:	4462      	add	r2, ip
 800b878:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800b87c:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 800b880:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b884:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800b886:	fb05 f402 	mul.w	r4, r5, r2
 800b88a:	684b      	ldr	r3, [r1, #4]
 800b88c:	680a      	ldr	r2, [r1, #0]
 800b88e:	1a9b      	subs	r3, r3, r2
 800b890:	fb05 f303 	mul.w	r3, r5, r3
 800b894:	3307      	adds	r3, #7
 800b896:	6802      	ldr	r2, [r0, #0]
 800b898:	4462      	add	r2, ip
 800b89a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b89e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b8a2:	6803      	ldr	r3, [r0, #0]
 800b8a4:	4463      	add	r3, ip
 800b8a6:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800b8aa:	4a0d      	ldr	r2, [pc, #52]	; (800b8e0 <LTDC_SetConfig+0x1b4>)
 800b8ac:	4022      	ands	r2, r4
 800b8ae:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b8b2:	6803      	ldr	r3, [r0, #0]
 800b8b4:	4463      	add	r3, ip
 800b8b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b8b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b8bc:	6803      	ldr	r3, [r0, #0]
 800b8be:	449c      	add	ip, r3
 800b8c0:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 800b8c4:	f043 0301 	orr.w	r3, r3, #1
 800b8c8:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
}
 800b8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 800b8ce:	2503      	movs	r5, #3
 800b8d0:	e7d0      	b.n	800b874 <LTDC_SetConfig+0x148>
    tmp = 2U;
 800b8d2:	2502      	movs	r5, #2
 800b8d4:	e7ce      	b.n	800b874 <LTDC_SetConfig+0x148>
 800b8d6:	2502      	movs	r5, #2
 800b8d8:	e7cc      	b.n	800b874 <LTDC_SetConfig+0x148>
 800b8da:	bf00      	nop
 800b8dc:	fffff8f8 	.word	0xfffff8f8
 800b8e0:	fffff800 	.word	0xfffff800

0800b8e4 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d072      	beq.n	800b9ce <HAL_LTDC_Init+0xea>
{
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b8ec:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d067      	beq.n	800b9c4 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b8fa:	6822      	ldr	r2, [r4, #0]
 800b8fc:	6993      	ldr	r3, [r2, #24]
 800b8fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b902:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b904:	6821      	ldr	r1, [r4, #0]
 800b906:	698a      	ldr	r2, [r1, #24]
 800b908:	6863      	ldr	r3, [r4, #4]
 800b90a:	68a0      	ldr	r0, [r4, #8]
 800b90c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b90e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b910:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b912:	6920      	ldr	r0, [r4, #16]
 800b914:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b916:	4313      	orrs	r3, r2
 800b918:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b91a:	6821      	ldr	r1, [r4, #0]
 800b91c:	688a      	ldr	r2, [r1, #8]
 800b91e:	4b2d      	ldr	r3, [pc, #180]	; (800b9d4 <HAL_LTDC_Init+0xf0>)
 800b920:	401a      	ands	r2, r3
 800b922:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b924:	6820      	ldr	r0, [r4, #0]
 800b926:	6882      	ldr	r2, [r0, #8]
 800b928:	69a1      	ldr	r1, [r4, #24]
 800b92a:	6965      	ldr	r5, [r4, #20]
 800b92c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800b930:	430a      	orrs	r2, r1
 800b932:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b934:	6821      	ldr	r1, [r4, #0]
 800b936:	68ca      	ldr	r2, [r1, #12]
 800b938:	401a      	ands	r2, r3
 800b93a:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b93c:	6820      	ldr	r0, [r4, #0]
 800b93e:	68c2      	ldr	r2, [r0, #12]
 800b940:	6a21      	ldr	r1, [r4, #32]
 800b942:	69e5      	ldr	r5, [r4, #28]
 800b944:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800b948:	430a      	orrs	r2, r1
 800b94a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b94c:	6821      	ldr	r1, [r4, #0]
 800b94e:	690a      	ldr	r2, [r1, #16]
 800b950:	401a      	ands	r2, r3
 800b952:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b954:	6820      	ldr	r0, [r4, #0]
 800b956:	6902      	ldr	r2, [r0, #16]
 800b958:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b95a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b95c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800b960:	430a      	orrs	r2, r1
 800b962:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b964:	6821      	ldr	r1, [r4, #0]
 800b966:	694a      	ldr	r2, [r1, #20]
 800b968:	4013      	ands	r3, r2
 800b96a:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b96c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b96e:	6821      	ldr	r1, [r4, #0]
 800b970:	694b      	ldr	r3, [r1, #20]
 800b972:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b974:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b978:	4313      	orrs	r3, r2
 800b97a:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b97c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b980:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800b984:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b986:	6821      	ldr	r1, [r4, #0]
 800b988:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b98a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b98e:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b990:	6821      	ldr	r1, [r4, #0]
 800b992:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800b994:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b998:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800b99c:	4303      	orrs	r3, r0
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b9a2:	6822      	ldr	r2, [r4, #0]
 800b9a4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b9a6:	f043 0306 	orr.w	r3, r3, #6
 800b9aa:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800b9ac:	6822      	ldr	r2, [r4, #0]
 800b9ae:	6993      	ldr	r3, [r2, #24]
 800b9b0:	f043 0301 	orr.w	r3, r3, #1
 800b9b4:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800b9c4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800b9c8:	f7f7 fab4 	bl	8002f34 <HAL_LTDC_MspInit>
 800b9cc:	e792      	b.n	800b8f4 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 800b9ce:	2001      	movs	r0, #1
}
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	f000f800 	.word	0xf000f800

0800b9d8 <HAL_LTDC_ErrorCallback>:
}
 800b9d8:	4770      	bx	lr

0800b9da <HAL_LTDC_ReloadEventCallback>:
}
 800b9da:	4770      	bx	lr

0800b9dc <HAL_LTDC_IRQHandler>:
{
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b9e0:	6803      	ldr	r3, [r0, #0]
 800b9e2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b9e4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b9e6:	f015 0f04 	tst.w	r5, #4
 800b9ea:	d002      	beq.n	800b9f2 <HAL_LTDC_IRQHandler+0x16>
 800b9ec:	f016 0f04 	tst.w	r6, #4
 800b9f0:	d112      	bne.n	800ba18 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b9f2:	f015 0f02 	tst.w	r5, #2
 800b9f6:	d002      	beq.n	800b9fe <HAL_LTDC_IRQHandler+0x22>
 800b9f8:	f016 0f02 	tst.w	r6, #2
 800b9fc:	d121      	bne.n	800ba42 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b9fe:	f015 0f01 	tst.w	r5, #1
 800ba02:	d002      	beq.n	800ba0a <HAL_LTDC_IRQHandler+0x2e>
 800ba04:	f016 0f01 	tst.w	r6, #1
 800ba08:	d132      	bne.n	800ba70 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ba0a:	f015 0f08 	tst.w	r5, #8
 800ba0e:	d002      	beq.n	800ba16 <HAL_LTDC_IRQHandler+0x3a>
 800ba10:	f016 0f08 	tst.w	r6, #8
 800ba14:	d13d      	bne.n	800ba92 <HAL_LTDC_IRQHandler+0xb6>
}
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ba18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba1a:	f022 0204 	bic.w	r2, r2, #4
 800ba1e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ba20:	6803      	ldr	r3, [r0, #0]
 800ba22:	2204      	movs	r2, #4
 800ba24:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ba26:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800ba2a:	f043 0301 	orr.w	r3, r3, #1
 800ba2e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ba32:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800ba36:	2300      	movs	r3, #0
 800ba38:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800ba3c:	f7ff ffcc 	bl	800b9d8 <HAL_LTDC_ErrorCallback>
 800ba40:	e7d7      	b.n	800b9f2 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ba42:	6822      	ldr	r2, [r4, #0]
 800ba44:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ba46:	f023 0302 	bic.w	r3, r3, #2
 800ba4a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ba4c:	6823      	ldr	r3, [r4, #0]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ba52:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800ba56:	4313      	orrs	r3, r2
 800ba58:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ba5c:	2304      	movs	r3, #4
 800ba5e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800ba62:	2300      	movs	r3, #0
 800ba64:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f7ff ffb5 	bl	800b9d8 <HAL_LTDC_ErrorCallback>
 800ba6e:	e7c6      	b.n	800b9fe <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ba70:	6822      	ldr	r2, [r4, #0]
 800ba72:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ba74:	f023 0301 	bic.w	r3, r3, #1
 800ba78:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ba7a:	6822      	ldr	r2, [r4, #0]
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800ba80:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800ba84:	2300      	movs	r3, #0
 800ba86:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f7f6 faf0 	bl	8002070 <HAL_LTDC_LineEventCallback>
 800ba90:	e7bb      	b.n	800ba0a <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ba96:	f023 0308 	bic.w	r3, r3, #8
 800ba9a:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ba9c:	6823      	ldr	r3, [r4, #0]
 800ba9e:	2208      	movs	r2, #8
 800baa0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800baa2:	2301      	movs	r3, #1
 800baa4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800baa8:	2300      	movs	r3, #0
 800baaa:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800baae:	4620      	mov	r0, r4
 800bab0:	f7ff ff93 	bl	800b9da <HAL_LTDC_ReloadEventCallback>
}
 800bab4:	e7af      	b.n	800ba16 <HAL_LTDC_IRQHandler+0x3a>

0800bab6 <HAL_LTDC_ConfigLayer>:
{
 800bab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800bab8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800babc:	2b01      	cmp	r3, #1
 800babe:	d02c      	beq.n	800bb1a <HAL_LTDC_ConfigLayer+0x64>
 800bac0:	4604      	mov	r4, r0
 800bac2:	460d      	mov	r5, r1
 800bac4:	4616      	mov	r6, r2
 800bac6:	2701      	movs	r7, #1
 800bac8:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bacc:	2302      	movs	r3, #2
 800bace:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800bad2:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800bad6:	fb0c 0c02 	mla	ip, ip, r2, r0
 800bada:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800bade:	468e      	mov	lr, r1
 800bae0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bae4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bae8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800baec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800baf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800baf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800baf8:	f8de 3000 	ldr.w	r3, [lr]
 800bafc:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800bb00:	4632      	mov	r2, r6
 800bb02:	4629      	mov	r1, r5
 800bb04:	4620      	mov	r0, r4
 800bb06:	f7ff fe11 	bl	800b72c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800bb0e:	f884 70a1 	strb.w	r7, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800bb12:	2000      	movs	r0, #0
 800bb14:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800bb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800bb1a:	2002      	movs	r0, #2
 800bb1c:	e7fc      	b.n	800bb18 <HAL_LTDC_ConfigLayer+0x62>
	...

0800bb20 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800bb20:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d01a      	beq.n	800bb5e <HAL_LTDC_ProgramLineEvent+0x3e>
{
 800bb28:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bb30:	2302      	movs	r3, #2
 800bb32:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800bb36:	6804      	ldr	r4, [r0, #0]
 800bb38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb3a:	f023 0301 	bic.w	r3, r3, #1
 800bb3e:	6363      	str	r3, [r4, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 800bb40:	4b08      	ldr	r3, [pc, #32]	; (800bb64 <HAL_LTDC_ProgramLineEvent+0x44>)
 800bb42:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800bb44:	6801      	ldr	r1, [r0, #0]
 800bb46:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	634b      	str	r3, [r1, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800bb4c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800bb50:	2300      	movs	r3, #0
 800bb52:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800bb56:	4618      	mov	r0, r3
}
 800bb58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb5c:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800bb5e:	2002      	movs	r0, #2
}
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	50001000 	.word	0x50001000

0800bb68 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 800bb6c:	f7fe fbd8 	bl	800a320 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bb70:	2c00      	cmp	r4, #0
 800bb72:	d035      	beq.n	800bbe0 <HAL_MDMA_Abort+0x78>
 800bb74:	4605      	mov	r5, r0
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800bb76:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d006      	beq.n	800bb8e <HAL_MDMA_Abort+0x26>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800bb80:	2380      	movs	r3, #128	; 0x80
 800bb82:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800bb84:	2300      	movs	r3, #0
 800bb86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    return HAL_ERROR;
 800bb8a:	2001      	movs	r0, #1
    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
}
 800bb8c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800bb8e:	6822      	ldr	r2, [r4, #0]
 800bb90:	68d3      	ldr	r3, [r2, #12]
 800bb92:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800bb96:	60d3      	str	r3, [r2, #12]
    __HAL_MDMA_DISABLE(hmdma);
 800bb98:	6822      	ldr	r2, [r4, #0]
 800bb9a:	68d3      	ldr	r3, [r2, #12]
 800bb9c:	f023 0301 	bic.w	r3, r3, #1
 800bba0:	60d3      	str	r3, [r2, #12]
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bba2:	6823      	ldr	r3, [r4, #0]
 800bba4:	68da      	ldr	r2, [r3, #12]
 800bba6:	f012 0f01 	tst.w	r2, #1
 800bbaa:	d010      	beq.n	800bbce <HAL_MDMA_Abort+0x66>
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800bbac:	f7fe fbb8 	bl	800a320 <HAL_GetTick>
 800bbb0:	1b43      	subs	r3, r0, r5
 800bbb2:	2b05      	cmp	r3, #5
 800bbb4:	d9f5      	bls.n	800bba2 <HAL_MDMA_Abort+0x3a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800bbb6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bbb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbbc:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 800bbca:	2001      	movs	r0, #1
 800bbcc:	e7de      	b.n	800bb8c <HAL_MDMA_Abort+0x24>
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800bbce:	221f      	movs	r2, #31
 800bbd0:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hmdma);
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800bbde:	e7d5      	b.n	800bb8c <HAL_MDMA_Abort+0x24>
    return HAL_ERROR;
 800bbe0:	2001      	movs	r0, #1
 800bbe2:	e7d3      	b.n	800bb8c <HAL_MDMA_Abort+0x24>

0800bbe4 <HAL_MDMA_Abort_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bbe4:	b190      	cbz	r0, 800bc0c <HAL_MDMA_Abort_IT+0x28>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800bbe6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d003      	beq.n	800bbf8 <HAL_MDMA_Abort_IT+0x14>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800bbf0:	2380      	movs	r3, #128	; 0x80
 800bbf2:	6683      	str	r3, [r0, #104]	; 0x68

    return HAL_ERROR;
 800bbf4:	2001      	movs	r0, #1
 800bbf6:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800bbf8:	2304      	movs	r3, #4
 800bbfa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800bbfe:	6802      	ldr	r2, [r0, #0]
 800bc00:	68d3      	ldr	r3, [r2, #12]
 800bc02:	f023 0301 	bic.w	r3, r3, #1
 800bc06:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 800bc08:	2000      	movs	r0, #0
 800bc0a:	4770      	bx	lr
    return HAL_ERROR;
 800bc0c:	2001      	movs	r0, #1
}
 800bc0e:	4770      	bx	lr

0800bc10 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800bc10:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800bc12:	6802      	ldr	r2, [r0, #0]
 800bc14:	6813      	ldr	r3, [r2, #0]
 800bc16:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800bc1a:	6013      	str	r3, [r2, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800bc1c:	6883      	ldr	r3, [r0, #8]
 800bc1e:	b933      	cbnz	r3, 800bc2e <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800bc20:	6802      	ldr	r2, [r0, #0]
 800bc22:	6813      	ldr	r3, [r2, #0]
 800bc24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc28:	684c      	ldr	r4, [r1, #4]
 800bc2a:	4323      	orrs	r3, r4
 800bc2c:	6013      	str	r3, [r2, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800bc2e:	680b      	ldr	r3, [r1, #0]
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	d04d      	beq.n	800bcd0 <OSPI_ConfigCmd+0xc0>
    ccr_reg = &(hospi->Instance->WCCR);
    tcr_reg = &(hospi->Instance->WTCR);
    ir_reg  = &(hospi->Instance->WIR);
    abr_reg = &(hospi->Instance->WABR);
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	d055      	beq.n	800bce4 <OSPI_ConfigCmd+0xd4>
    ir_reg  = &(hospi->Instance->WPIR);
    abr_reg = &(hospi->Instance->WPABR);
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800bc38:	6803      	ldr	r3, [r0, #0]
 800bc3a:	f503 7280 	add.w	r2, r3, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 800bc3e:	f503 7e84 	add.w	lr, r3, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 800bc42:	f503 7c88 	add.w	ip, r3, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 800bc46:	f503 7390 	add.w	r3, r3, #288	; 0x120
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800bc4a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800bc4c:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 800bc4e:	432c      	orrs	r4, r5
 800bc50:	6014      	str	r4, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800bc52:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800bc54:	b15c      	cbz	r4, 800bc6e <OSPI_ConfigCmd+0x5e>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800bc56:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800bc58:	601c      	str	r4, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800bc5a:	6813      	ldr	r3, [r2, #0]
 800bc5c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800bc60:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800bc62:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800bc64:	432c      	orrs	r4, r5
 800bc66:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800bc68:	432c      	orrs	r4, r5
 800bc6a:	4323      	orrs	r3, r4
 800bc6c:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800bc6e:	f8de 3000 	ldr.w	r3, [lr]
 800bc72:	f023 031f 	bic.w	r3, r3, #31
 800bc76:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 800bc78:	4323      	orrs	r3, r4
 800bc7a:	f8ce 3000 	str.w	r3, [lr]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800bc7e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800bc80:	b12b      	cbz	r3, 800bc8e <OSPI_ConfigCmd+0x7e>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800bc82:	680b      	ldr	r3, [r1, #0]
 800bc84:	b91b      	cbnz	r3, 800bc8e <OSPI_ConfigCmd+0x7e>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800bc86:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800bc88:	6804      	ldr	r4, [r0, #0]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800bc8e:	68cb      	ldr	r3, [r1, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d073      	beq.n	800bd7c <OSPI_ConfigCmd+0x16c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800bc94:	69cc      	ldr	r4, [r1, #28]
 800bc96:	2c00      	cmp	r4, #0
 800bc98:	d048      	beq.n	800bd2c <OSPI_ConfigCmd+0x11c>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800bc9a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 800bc9c:	b365      	cbz	r5, 800bcf8 <OSPI_ConfigCmd+0xe8>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800bc9e:	6817      	ldr	r7, [r2, #0]
 800bca0:	4e48      	ldr	r6, [pc, #288]	; (800bdc4 <OSPI_ConfigCmd+0x1b4>)
 800bca2:	403e      	ands	r6, r7
 800bca4:	694f      	ldr	r7, [r1, #20]
 800bca6:	433b      	orrs	r3, r7
 800bca8:	690f      	ldr	r7, [r1, #16]
 800bcaa:	433b      	orrs	r3, r7
 800bcac:	431c      	orrs	r4, r3
 800bcae:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bcb0:	431c      	orrs	r4, r3
 800bcb2:	6a0b      	ldr	r3, [r1, #32]
 800bcb4:	431c      	orrs	r4, r3
 800bcb6:	432c      	orrs	r4, r5
 800bcb8:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 800bcba:	432c      	orrs	r4, r5
 800bcbc:	4334      	orrs	r4, r6
 800bcbe:	6014      	str	r4, [r2, #0]
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800bcc0:	688b      	ldr	r3, [r1, #8]
 800bcc2:	f8cc 3000 	str.w	r3, [ip]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800bcc6:	6803      	ldr	r3, [r0, #0]
 800bcc8:	698a      	ldr	r2, [r1, #24]
 800bcca:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800bccc:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 800bcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccr_reg = &(hospi->Instance->WCCR);
 800bcd0:	6803      	ldr	r3, [r0, #0]
 800bcd2:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 800bcd6:	f503 7ec4 	add.w	lr, r3, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800bcda:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 800bcde:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800bce2:	e7b2      	b.n	800bc4a <OSPI_ConfigCmd+0x3a>
    ccr_reg = &(hospi->Instance->WPCCR);
 800bce4:	6803      	ldr	r3, [r0, #0]
 800bce6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 800bcea:	f503 7ea4 	add.w	lr, r3, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 800bcee:	f503 7ca8 	add.w	ip, r3, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 800bcf2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800bcf6:	e7a8      	b.n	800bc4a <OSPI_ConfigCmd+0x3a>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800bcf8:	6816      	ldr	r6, [r2, #0]
 800bcfa:	4d33      	ldr	r5, [pc, #204]	; (800bdc8 <OSPI_ConfigCmd+0x1b8>)
 800bcfc:	4035      	ands	r5, r6
 800bcfe:	694e      	ldr	r6, [r1, #20]
 800bd00:	4333      	orrs	r3, r6
 800bd02:	690e      	ldr	r6, [r1, #16]
 800bd04:	4333      	orrs	r3, r6
 800bd06:	431c      	orrs	r4, r3
 800bd08:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bd0a:	431c      	orrs	r4, r3
 800bd0c:	6a0b      	ldr	r3, [r1, #32]
 800bd0e:	431c      	orrs	r4, r3
 800bd10:	432c      	orrs	r4, r5
 800bd12:	6014      	str	r4, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800bd14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bd16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd1a:	d1d1      	bne.n	800bcc0 <OSPI_ConfigCmd+0xb0>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800bd1c:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800bd1e:	2b08      	cmp	r3, #8
 800bd20:	d1ce      	bne.n	800bcc0 <OSPI_ConfigCmd+0xb0>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800bd22:	6813      	ldr	r3, [r2, #0]
 800bd24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd28:	6013      	str	r3, [r2, #0]
 800bd2a:	e7c9      	b.n	800bcc0 <OSPI_ConfigCmd+0xb0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800bd2c:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800bd2e:	b184      	cbz	r4, 800bd52 <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800bd30:	6815      	ldr	r5, [r2, #0]
 800bd32:	4826      	ldr	r0, [pc, #152]	; (800bdcc <OSPI_ConfigCmd+0x1bc>)
 800bd34:	4028      	ands	r0, r5
 800bd36:	694d      	ldr	r5, [r1, #20]
 800bd38:	432b      	orrs	r3, r5
 800bd3a:	690d      	ldr	r5, [r1, #16]
 800bd3c:	432b      	orrs	r3, r5
 800bd3e:	431c      	orrs	r4, r3
 800bd40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd42:	431c      	orrs	r4, r3
 800bd44:	4304      	orrs	r4, r0
 800bd46:	6014      	str	r4, [r2, #0]
      *ir_reg = cmd->Instruction;
 800bd48:	688b      	ldr	r3, [r1, #8]
 800bd4a:	f8cc 3000 	str.w	r3, [ip]
  HAL_StatusTypeDef status = HAL_OK;
 800bd4e:	2000      	movs	r0, #0
 800bd50:	e7bd      	b.n	800bcce <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800bd52:	6814      	ldr	r4, [r2, #0]
 800bd54:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800bd58:	694d      	ldr	r5, [r1, #20]
 800bd5a:	432b      	orrs	r3, r5
 800bd5c:	690d      	ldr	r5, [r1, #16]
 800bd5e:	432b      	orrs	r3, r5
 800bd60:	4323      	orrs	r3, r4
 800bd62:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800bd64:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bd66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd6a:	d1ed      	bne.n	800bd48 <OSPI_ConfigCmd+0x138>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800bd6c:	694b      	ldr	r3, [r1, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800bd6e:	2b08      	cmp	r3, #8
 800bd70:	d1ea      	bne.n	800bd48 <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800bd72:	6813      	ldr	r3, [r2, #0]
 800bd74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	e7e5      	b.n	800bd48 <OSPI_ConfigCmd+0x138>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800bd7c:	69cb      	ldr	r3, [r1, #28]
 800bd7e:	b1e3      	cbz	r3, 800bdba <OSPI_ConfigCmd+0x1aa>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800bd80:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 800bd82:	b184      	cbz	r4, 800bda6 <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800bd84:	6816      	ldr	r6, [r2, #0]
 800bd86:	4d12      	ldr	r5, [pc, #72]	; (800bdd0 <OSPI_ConfigCmd+0x1c0>)
 800bd88:	4035      	ands	r5, r6
 800bd8a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800bd8c:	4333      	orrs	r3, r6
 800bd8e:	6a0e      	ldr	r6, [r1, #32]
 800bd90:	4333      	orrs	r3, r6
 800bd92:	4323      	orrs	r3, r4
 800bd94:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 800bd96:	4323      	orrs	r3, r4
 800bd98:	432b      	orrs	r3, r5
 800bd9a:	6013      	str	r3, [r2, #0]
      hospi->Instance->AR = cmd->Address;
 800bd9c:	6803      	ldr	r3, [r0, #0]
 800bd9e:	698a      	ldr	r2, [r1, #24]
 800bda0:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800bda2:	2000      	movs	r0, #0
 800bda4:	e793      	b.n	800bcce <OSPI_ConfigCmd+0xbe>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800bda6:	6814      	ldr	r4, [r2, #0]
 800bda8:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800bdac:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800bdae:	432b      	orrs	r3, r5
 800bdb0:	6a0d      	ldr	r5, [r1, #32]
 800bdb2:	432b      	orrs	r3, r5
 800bdb4:	4323      	orrs	r3, r4
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	e7f0      	b.n	800bd9c <OSPI_ConfigCmd+0x18c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800bdba:	2308      	movs	r3, #8
 800bdbc:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 800bdbe:	2001      	movs	r0, #1
 800bdc0:	e785      	b.n	800bcce <OSPI_ConfigCmd+0xbe>
 800bdc2:	bf00      	nop
 800bdc4:	f0ffc0c0 	.word	0xf0ffc0c0
 800bdc8:	ffffc0c0 	.word	0xffffc0c0
 800bdcc:	f0ffffc0 	.word	0xf0ffffc0
 800bdd0:	f0ffc0ff 	.word	0xf0ffc0ff

0800bdd4 <OSPI_WaitFlagStateUntilTimeout>:
{
 800bdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdd8:	4605      	mov	r5, r0
 800bdda:	460f      	mov	r7, r1
 800bddc:	4616      	mov	r6, r2
 800bdde:	4699      	mov	r9, r3
 800bde0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800bde4:	682c      	ldr	r4, [r5, #0]
 800bde6:	6a24      	ldr	r4, [r4, #32]
 800bde8:	423c      	tst	r4, r7
 800bdea:	bf14      	ite	ne
 800bdec:	f04f 0c01 	movne.w	ip, #1
 800bdf0:	f04f 0c00 	moveq.w	ip, #0
 800bdf4:	45b4      	cmp	ip, r6
 800bdf6:	d014      	beq.n	800be22 <OSPI_WaitFlagStateUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800bdf8:	f1b8 3fff 	cmp.w	r8, #4294967295
 800bdfc:	d0f2      	beq.n	800bde4 <OSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdfe:	f7fe fa8f 	bl	800a320 <HAL_GetTick>
 800be02:	eba0 0009 	sub.w	r0, r0, r9
 800be06:	4540      	cmp	r0, r8
 800be08:	d802      	bhi.n	800be10 <OSPI_WaitFlagStateUntilTimeout+0x3c>
 800be0a:	f1b8 0f00 	cmp.w	r8, #0
 800be0e:	d1e9      	bne.n	800bde4 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800be10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be14:	652b      	str	r3, [r5, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800be16:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800be18:	f043 0301 	orr.w	r3, r3, #1
 800be1c:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
 800be1e:	2001      	movs	r0, #1
 800be20:	e000      	b.n	800be24 <OSPI_WaitFlagStateUntilTimeout+0x50>
  return HAL_OK;
 800be22:	2000      	movs	r0, #0
}
 800be24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800be28 <HAL_OSPI_DeInit>:
  if (hospi == NULL)
 800be28:	b180      	cbz	r0, 800be4c <HAL_OSPI_DeInit+0x24>
{
 800be2a:	b510      	push	{r4, lr}
 800be2c:	4604      	mov	r4, r0
     __HAL_OSPI_DISABLE(hospi);
 800be2e:	6802      	ldr	r2, [r0, #0]
 800be30:	6813      	ldr	r3, [r2, #0]
 800be32:	f023 0301 	bic.w	r3, r3, #1
 800be36:	6013      	str	r3, [r2, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800be38:	6802      	ldr	r2, [r0, #0]
 800be3a:	6893      	ldr	r3, [r2, #8]
 800be3c:	f023 0302 	bic.w	r3, r3, #2
 800be40:	6093      	str	r3, [r2, #8]
     HAL_OSPI_MspDeInit(hospi);
 800be42:	f7f7 f955 	bl	80030f0 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 800be46:	2000      	movs	r0, #0
 800be48:	6520      	str	r0, [r4, #80]	; 0x50
}
 800be4a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800be4c:	2001      	movs	r0, #1
}
 800be4e:	4770      	bx	lr

0800be50 <HAL_OSPI_Command>:
{
 800be50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be54:	b082      	sub	sp, #8
 800be56:	4604      	mov	r4, r0
 800be58:	4688      	mov	r8, r1
 800be5a:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800be5c:	f7fe fa60 	bl	800a320 <HAL_GetTick>
 800be60:	4606      	mov	r6, r0
  state = hospi->State;
 800be62:	6d25      	ldr	r5, [r4, #80]	; 0x50
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800be64:	2d02      	cmp	r5, #2
 800be66:	d009      	beq.n	800be7c <HAL_OSPI_Command+0x2c>
 800be68:	2d14      	cmp	r5, #20
 800be6a:	d024      	beq.n	800beb6 <HAL_OSPI_Command+0x66>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800be6c:	2d24      	cmp	r5, #36	; 0x24
 800be6e:	d028      	beq.n	800bec2 <HAL_OSPI_Command+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800be70:	2310      	movs	r3, #16
 800be72:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800be74:	2001      	movs	r0, #1
}
 800be76:	b002      	add	sp, #8
 800be78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800be7c:	68e3      	ldr	r3, [r4, #12]
 800be7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be82:	d0f1      	beq.n	800be68 <HAL_OSPI_Command+0x18>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800be84:	9700      	str	r7, [sp, #0]
 800be86:	4633      	mov	r3, r6
 800be88:	2200      	movs	r2, #0
 800be8a:	2120      	movs	r1, #32
 800be8c:	4620      	mov	r0, r4
 800be8e:	f7ff ffa1 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800be92:	2800      	cmp	r0, #0
 800be94:	d1ef      	bne.n	800be76 <HAL_OSPI_Command+0x26>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800be96:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 800be98:	4641      	mov	r1, r8
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7ff feb8 	bl	800bc10 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d1e8      	bne.n	800be76 <HAL_OSPI_Command+0x26>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800bea4:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800bea8:	b193      	cbz	r3, 800bed0 <HAL_OSPI_Command+0x80>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800beaa:	f8d8 3000 	ldr.w	r3, [r8]
 800beae:	b9d3      	cbnz	r3, 800bee6 <HAL_OSPI_Command+0x96>
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800beb0:	2304      	movs	r3, #4
 800beb2:	6523      	str	r3, [r4, #80]	; 0x50
 800beb4:	e7df      	b.n	800be76 <HAL_OSPI_Command+0x26>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800beb6:	f8d8 3000 	ldr.w	r3, [r8]
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800beba:	3b02      	subs	r3, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d8d5      	bhi.n	800be6c <HAL_OSPI_Command+0x1c>
 800bec0:	e7e0      	b.n	800be84 <HAL_OSPI_Command+0x34>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800bec2:	f8d8 3000 	ldr.w	r3, [r8]
 800bec6:	2b03      	cmp	r3, #3
 800bec8:	bf18      	it	ne
 800beca:	2b01      	cmpne	r3, #1
 800becc:	d1d0      	bne.n	800be70 <HAL_OSPI_Command+0x20>
 800bece:	e7d9      	b.n	800be84 <HAL_OSPI_Command+0x34>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800bed0:	9700      	str	r7, [sp, #0]
 800bed2:	4633      	mov	r3, r6
 800bed4:	2201      	movs	r2, #1
 800bed6:	2102      	movs	r1, #2
 800bed8:	4620      	mov	r0, r4
 800beda:	f7ff ff7b 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	2202      	movs	r2, #2
 800bee2:	625a      	str	r2, [r3, #36]	; 0x24
 800bee4:	e7c7      	b.n	800be76 <HAL_OSPI_Command+0x26>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d007      	beq.n	800befa <HAL_OSPI_Command+0xaa>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800beea:	2b02      	cmp	r3, #2
 800beec:	d1c3      	bne.n	800be76 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800beee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bef0:	2b14      	cmp	r3, #20
 800bef2:	d00b      	beq.n	800bf0c <HAL_OSPI_Command+0xbc>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800bef4:	2324      	movs	r3, #36	; 0x24
 800bef6:	6523      	str	r3, [r4, #80]	; 0x50
 800bef8:	e7bd      	b.n	800be76 <HAL_OSPI_Command+0x26>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800befa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800befc:	2b24      	cmp	r3, #36	; 0x24
 800befe:	d002      	beq.n	800bf06 <HAL_OSPI_Command+0xb6>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800bf00:	2314      	movs	r3, #20
 800bf02:	6523      	str	r3, [r4, #80]	; 0x50
 800bf04:	e7b7      	b.n	800be76 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800bf06:	2304      	movs	r3, #4
 800bf08:	6523      	str	r3, [r4, #80]	; 0x50
 800bf0a:	e7b4      	b.n	800be76 <HAL_OSPI_Command+0x26>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800bf0c:	2304      	movs	r3, #4
 800bf0e:	6523      	str	r3, [r4, #80]	; 0x50
 800bf10:	e7b1      	b.n	800be76 <HAL_OSPI_Command+0x26>

0800bf12 <HAL_OSPI_Transmit>:
{
 800bf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	4604      	mov	r4, r0
 800bf1a:	4688      	mov	r8, r1
 800bf1c:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800bf1e:	f7fe f9ff 	bl	800a320 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800bf22:	6827      	ldr	r7, [r4, #0]
  if (pData == NULL)
 800bf24:	f1b8 0f00 	cmp.w	r8, #0
 800bf28:	d00a      	beq.n	800bf40 <HAL_OSPI_Transmit+0x2e>
 800bf2a:	4605      	mov	r5, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800bf2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bf2e:	2b04      	cmp	r3, #4
 800bf30:	d00a      	beq.n	800bf48 <HAL_OSPI_Transmit+0x36>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800bf32:	2310      	movs	r3, #16
 800bf34:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	b002      	add	sp, #8
 800bf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800bf40:	2308      	movs	r3, #8
 800bf42:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e7f7      	b.n	800bf38 <HAL_OSPI_Transmit+0x26>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800bf48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800bf4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bf50:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800bf52:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800bf5c:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800bf5e:	9600      	str	r6, [sp, #0]
 800bf60:	462b      	mov	r3, r5
 800bf62:	2201      	movs	r2, #1
 800bf64:	2104      	movs	r1, #4
 800bf66:	4620      	mov	r0, r4
 800bf68:	f7ff ff34 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	b960      	cbnz	r0, 800bf8a <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800bf70:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bf72:	7812      	ldrb	r2, [r2, #0]
 800bf74:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
        hospi->pBuffPtr++;
 800bf78:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bf7a:	3101      	adds	r1, #1
 800bf7c:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800bf7e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf80:	3901      	subs	r1, #1
 800bf82:	64a1      	str	r1, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800bf84:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800bf86:	2a00      	cmp	r2, #0
 800bf88:	d1e9      	bne.n	800bf5e <HAL_OSPI_Transmit+0x4c>
      if (status == HAL_OK)
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1d4      	bne.n	800bf38 <HAL_OSPI_Transmit+0x26>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800bf8e:	9600      	str	r6, [sp, #0]
 800bf90:	462b      	mov	r3, r5
 800bf92:	2201      	movs	r2, #1
 800bf94:	2102      	movs	r1, #2
 800bf96:	4620      	mov	r0, r4
 800bf98:	f7ff ff1c 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d1ca      	bne.n	800bf38 <HAL_OSPI_Transmit+0x26>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800bfa2:	6821      	ldr	r1, [r4, #0]
 800bfa4:	2202      	movs	r2, #2
 800bfa6:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800bfa8:	6522      	str	r2, [r4, #80]	; 0x50
 800bfaa:	e7c5      	b.n	800bf38 <HAL_OSPI_Transmit+0x26>

0800bfac <HAL_OSPI_Receive>:
{
 800bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	4688      	mov	r8, r1
 800bfb6:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800bfb8:	f7fe f9b2 	bl	800a320 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800bfbc:	6825      	ldr	r5, [r4, #0]
  uint32_t addr_reg = hospi->Instance->AR;
 800bfbe:	6caa      	ldr	r2, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800bfc0:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
  if (pData == NULL)
 800bfc4:	f1b8 0f00 	cmp.w	r8, #0
 800bfc8:	d00a      	beq.n	800bfe0 <HAL_OSPI_Receive+0x34>
 800bfca:	4606      	mov	r6, r0
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800bfcc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bfce:	2b04      	cmp	r3, #4
 800bfd0:	d00a      	beq.n	800bfe8 <HAL_OSPI_Receive+0x3c>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800bfd2:	2310      	movs	r3, #16
 800bfd4:	6563      	str	r3, [r4, #84]	; 0x54
      status = HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	b002      	add	sp, #8
 800bfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800bfe0:	2308      	movs	r3, #8
 800bfe2:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e7f7      	b.n	800bfd8 <HAL_OSPI_Receive+0x2c>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800bfe8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800bfea:	3301      	adds	r3, #1
 800bfec:	64a3      	str	r3, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800bfee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bff0:	6463      	str	r3, [r4, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800bff2:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800bff6:	682b      	ldr	r3, [r5, #0]
 800bff8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800bffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c000:	602b      	str	r3, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c002:	68e3      	ldr	r3, [r4, #12]
 800c004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c008:	d007      	beq.n	800c01a <HAL_OSPI_Receive+0x6e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800c00a:	6823      	ldr	r3, [r4, #0]
 800c00c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800c010:	f410 6fe0 	tst.w	r0, #1792	; 0x700
 800c014:	d02a      	beq.n	800c06c <HAL_OSPI_Receive+0xc0>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800c016:	649a      	str	r2, [r3, #72]	; 0x48
 800c018:	e001      	b.n	800c01e <HAL_OSPI_Receive+0x72>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	649a      	str	r2, [r3, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800c01e:	9700      	str	r7, [sp, #0]
 800c020:	4633      	mov	r3, r6
 800c022:	2201      	movs	r2, #1
 800c024:	2106      	movs	r1, #6
 800c026:	4620      	mov	r0, r4
 800c028:	f7ff fed4 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800c02c:	4603      	mov	r3, r0
 800c02e:	b960      	cbnz	r0, 800c04a <HAL_OSPI_Receive+0x9e>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c030:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c032:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 800c036:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 800c038:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c03a:	3101      	adds	r1, #1
 800c03c:	6421      	str	r1, [r4, #64]	; 0x40
        hospi->XferCount--;
 800c03e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c040:	3901      	subs	r1, #1
 800c042:	64a1      	str	r1, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800c044:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1e9      	bne.n	800c01e <HAL_OSPI_Receive+0x72>
      if (status == HAL_OK)
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1c4      	bne.n	800bfd8 <HAL_OSPI_Receive+0x2c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c04e:	9700      	str	r7, [sp, #0]
 800c050:	4633      	mov	r3, r6
 800c052:	2201      	movs	r2, #1
 800c054:	2102      	movs	r1, #2
 800c056:	4620      	mov	r0, r4
 800c058:	f7ff febc 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800c05c:	4603      	mov	r3, r0
 800c05e:	2800      	cmp	r0, #0
 800c060:	d1ba      	bne.n	800bfd8 <HAL_OSPI_Receive+0x2c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c062:	6821      	ldr	r1, [r4, #0]
 800c064:	2202      	movs	r2, #2
 800c066:	624a      	str	r2, [r1, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 800c068:	6522      	str	r2, [r4, #80]	; 0x50
 800c06a:	e7b5      	b.n	800bfd8 <HAL_OSPI_Receive+0x2c>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800c06c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
 800c070:	e7d5      	b.n	800c01e <HAL_OSPI_Receive+0x72>

0800c072 <HAL_OSPI_AutoPolling>:
{
 800c072:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c076:	b083      	sub	sp, #12
 800c078:	4604      	mov	r4, r0
 800c07a:	460d      	mov	r5, r1
 800c07c:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800c07e:	f7fe f94f 	bl	800a320 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 800c082:	6821      	ldr	r1, [r4, #0]
 800c084:	6c8f      	ldr	r7, [r1, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800c086:	f8d1 6110 	ldr.w	r6, [r1, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800c08a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c08c:	2904      	cmp	r1, #4
 800c08e:	d005      	beq.n	800c09c <HAL_OSPI_AutoPolling+0x2a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c090:	2310      	movs	r3, #16
 800c092:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c094:	2001      	movs	r0, #1
}
 800c096:	b003      	add	sp, #12
 800c098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c09c:	4680      	mov	r8, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800c09e:	68eb      	ldr	r3, [r5, #12]
 800c0a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0a4:	d1f4      	bne.n	800c090 <HAL_OSPI_AutoPolling+0x1e>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c0a6:	f8cd 9000 	str.w	r9, [sp]
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2120      	movs	r1, #32
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f7ff fe8f 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d1ed      	bne.n	800c096 <HAL_OSPI_AutoPolling+0x24>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	682a      	ldr	r2, [r5, #0]
 800c0be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	686a      	ldr	r2, [r5, #4]
 800c0c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	692a      	ldr	r2, [r5, #16]
 800c0ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800c0d2:	6821      	ldr	r1, [r4, #0]
 800c0d4:	680b      	ldr	r3, [r1, #0]
 800c0d6:	f023 5343 	bic.w	r3, r3, #817889280	; 0x30c00000
 800c0da:	68aa      	ldr	r2, [r5, #8]
 800c0dc:	68e8      	ldr	r0, [r5, #12]
 800c0de:	4302      	orrs	r2, r0
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0e6:	600b      	str	r3, [r1, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c0e8:	68e3      	ldr	r3, [r4, #12]
 800c0ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0ee:	d007      	beq.n	800c100 <HAL_OSPI_AutoPolling+0x8e>
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800c0f0:	6823      	ldr	r3, [r4, #0]
 800c0f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800c0f6:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 800c0fa:	d013      	beq.n	800c124 <HAL_OSPI_AutoPolling+0xb2>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800c0fc:	649f      	str	r7, [r3, #72]	; 0x48
 800c0fe:	e001      	b.n	800c104 <HAL_OSPI_AutoPolling+0x92>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	649f      	str	r7, [r3, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800c104:	f8cd 9000 	str.w	r9, [sp]
 800c108:	4643      	mov	r3, r8
 800c10a:	2201      	movs	r2, #1
 800c10c:	2108      	movs	r1, #8
 800c10e:	4620      	mov	r0, r4
 800c110:	f7ff fe60 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c114:	2800      	cmp	r0, #0
 800c116:	d1be      	bne.n	800c096 <HAL_OSPI_AutoPolling+0x24>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800c118:	6823      	ldr	r3, [r4, #0]
 800c11a:	2208      	movs	r2, #8
 800c11c:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 800c11e:	2302      	movs	r3, #2
 800c120:	6523      	str	r3, [r4, #80]	; 0x50
 800c122:	e7b8      	b.n	800c096 <HAL_OSPI_AutoPolling+0x24>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800c124:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
 800c128:	e7ec      	b.n	800c104 <HAL_OSPI_AutoPolling+0x92>
	...

0800c12c <HAL_OSPI_MemoryMapped>:
{
 800c12c:	b530      	push	{r4, r5, lr}
 800c12e:	b083      	sub	sp, #12
 800c130:	4604      	mov	r4, r0
 800c132:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800c134:	f7fe f8f4 	bl	800a320 <HAL_GetTick>
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c138:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c13a:	2b04      	cmp	r3, #4
 800c13c:	d004      	beq.n	800c148 <HAL_OSPI_MemoryMapped+0x1c>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c13e:	2310      	movs	r3, #16
 800c140:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c142:	2001      	movs	r0, #1
}
 800c144:	b003      	add	sp, #12
 800c146:	bd30      	pop	{r4, r5, pc}
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	4603      	mov	r3, r0
 800c14e:	2200      	movs	r2, #0
 800c150:	2120      	movs	r1, #32
 800c152:	4620      	mov	r0, r4
 800c154:	f7ff fe3e 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c158:	2800      	cmp	r0, #0
 800c15a:	d1f3      	bne.n	800c144 <HAL_OSPI_MemoryMapped+0x18>
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800c15c:	2388      	movs	r3, #136	; 0x88
 800c15e:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800c160:	682b      	ldr	r3, [r5, #0]
 800c162:	2b08      	cmp	r3, #8
 800c164:	d009      	beq.n	800c17a <HAL_OSPI_MemoryMapped+0x4e>
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800c166:	6822      	ldr	r2, [r4, #0]
 800c168:	6811      	ldr	r1, [r2, #0]
 800c16a:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <HAL_OSPI_MemoryMapped+0x68>)
 800c16c:	400b      	ands	r3, r1
 800c16e:	6829      	ldr	r1, [r5, #0]
 800c170:	430b      	orrs	r3, r1
 800c172:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	e7e4      	b.n	800c144 <HAL_OSPI_MemoryMapped+0x18>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800c17a:	6823      	ldr	r3, [r4, #0]
 800c17c:	686a      	ldr	r2, [r5, #4]
 800c17e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	2210      	movs	r2, #16
 800c186:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800c188:	6822      	ldr	r2, [r4, #0]
 800c18a:	6813      	ldr	r3, [r2, #0]
 800c18c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c190:	6013      	str	r3, [r2, #0]
 800c192:	e7e8      	b.n	800c166 <HAL_OSPI_MemoryMapped+0x3a>
 800c194:	cffffff7 	.word	0xcffffff7

0800c198 <HAL_OSPI_ErrorCallback>:
}
 800c198:	4770      	bx	lr

0800c19a <HAL_OSPI_AbortCpltCallback>:
}
 800c19a:	4770      	bx	lr

0800c19c <OSPI_DMAAbortCplt>:
{
 800c19c:	b508      	push	{r3, lr}
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800c19e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hospi->XferCount = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	6483      	str	r3, [r0, #72]	; 0x48
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800c1a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c1a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1aa:	d116      	bne.n	800c1da <OSPI_DMAAbortCplt+0x3e>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c1ac:	6803      	ldr	r3, [r0, #0]
 800c1ae:	6a1a      	ldr	r2, [r3, #32]
 800c1b0:	f012 0f20 	tst.w	r2, #32
 800c1b4:	d00c      	beq.n	800c1d0 <OSPI_DMAAbortCplt+0x34>
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800c1ba:	6802      	ldr	r2, [r0, #0]
 800c1bc:	6813      	ldr	r3, [r2, #0]
 800c1be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1c2:	6013      	str	r3, [r2, #0]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800c1c4:	6802      	ldr	r2, [r0, #0]
 800c1c6:	6813      	ldr	r3, [r2, #0]
 800c1c8:	f043 0302 	orr.w	r3, r3, #2
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	e008      	b.n	800c1e2 <OSPI_DMAAbortCplt+0x46>
      hospi->State = HAL_OSPI_STATE_READY;
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	6503      	str	r3, [r0, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800c1d4:	f7ff ffe1 	bl	800c19a <HAL_OSPI_AbortCpltCallback>
 800c1d8:	e003      	b.n	800c1e2 <OSPI_DMAAbortCplt+0x46>
    hospi->State = HAL_OSPI_STATE_READY;
 800c1da:	2302      	movs	r3, #2
 800c1dc:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800c1de:	f7ff ffdb 	bl	800c198 <HAL_OSPI_ErrorCallback>
}
 800c1e2:	bd08      	pop	{r3, pc}

0800c1e4 <HAL_OSPI_FifoThresholdCallback>:
}
 800c1e4:	4770      	bx	lr

0800c1e6 <HAL_OSPI_CmdCpltCallback>:
}
 800c1e6:	4770      	bx	lr

0800c1e8 <HAL_OSPI_RxCpltCallback>:
}
 800c1e8:	4770      	bx	lr

0800c1ea <HAL_OSPI_TxCpltCallback>:
}
 800c1ea:	4770      	bx	lr

0800c1ec <HAL_OSPI_StatusMatchCallback>:
}
 800c1ec:	4770      	bx	lr

0800c1ee <HAL_OSPI_TimeOutCallback>:
}
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_OSPI_IRQHandler>:
{
 800c1f0:	b510      	push	{r4, lr}
 800c1f2:	4604      	mov	r4, r0
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c1f4:	6802      	ldr	r2, [r0, #0]
  uint32_t flag           = hospi->Instance->SR;
 800c1f6:	6a13      	ldr	r3, [r2, #32]
  uint32_t itsource       = hospi->Instance->CR;
 800c1f8:	6811      	ldr	r1, [r2, #0]
  uint32_t currentstate   = hospi->State;
 800c1fa:	6d00      	ldr	r0, [r0, #80]	; 0x50
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800c1fc:	f013 0f04 	tst.w	r3, #4
 800c200:	d027      	beq.n	800c252 <HAL_OSPI_IRQHandler+0x62>
 800c202:	f411 2f80 	tst.w	r1, #262144	; 0x40000
 800c206:	d024      	beq.n	800c252 <HAL_OSPI_IRQHandler+0x62>
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800c208:	2818      	cmp	r0, #24
 800c20a:	d00c      	beq.n	800c226 <HAL_OSPI_IRQHandler+0x36>
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800c20c:	2828      	cmp	r0, #40	; 0x28
 800c20e:	d015      	beq.n	800c23c <HAL_OSPI_IRQHandler+0x4c>
    if (hospi->XferCount == 0U)
 800c210:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c212:	b923      	cbnz	r3, 800c21e <HAL_OSPI_IRQHandler+0x2e>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800c214:	6822      	ldr	r2, [r4, #0]
 800c216:	6813      	ldr	r3, [r2, #0]
 800c218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c21c:	6013      	str	r3, [r2, #0]
    HAL_OSPI_FifoThresholdCallback(hospi);
 800c21e:	4620      	mov	r0, r4
 800c220:	f7ff ffe0 	bl	800c1e4 <HAL_OSPI_FifoThresholdCallback>
}
 800c224:	bd10      	pop	{r4, pc}
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800c226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
      hospi->pBuffPtr++;
 800c22e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c230:	3301      	adds	r3, #1
 800c232:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800c234:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c236:	3b01      	subs	r3, #1
 800c238:	64a3      	str	r3, [r4, #72]	; 0x48
 800c23a:	e7e9      	b.n	800c210 <HAL_OSPI_IRQHandler+0x20>
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c23c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c23e:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c242:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800c244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c246:	3301      	adds	r3, #1
 800c248:	6423      	str	r3, [r4, #64]	; 0x40
      hospi->XferCount--;
 800c24a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c24c:	3b01      	subs	r3, #1
 800c24e:	64a3      	str	r3, [r4, #72]	; 0x48
 800c250:	e7de      	b.n	800c210 <HAL_OSPI_IRQHandler+0x20>
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800c252:	f013 0f02 	tst.w	r3, #2
 800c256:	d044      	beq.n	800c2e2 <HAL_OSPI_IRQHandler+0xf2>
 800c258:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800c25c:	d041      	beq.n	800c2e2 <HAL_OSPI_IRQHandler+0xf2>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800c25e:	2828      	cmp	r0, #40	; 0x28
 800c260:	d014      	beq.n	800c28c <HAL_OSPI_IRQHandler+0x9c>
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800c262:	2102      	movs	r1, #2
 800c264:	6251      	str	r1, [r2, #36]	; 0x24
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800c266:	6822      	ldr	r2, [r4, #0]
 800c268:	6813      	ldr	r3, [r2, #0]
 800c26a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c26e:	6013      	str	r3, [r2, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800c270:	6521      	str	r1, [r4, #80]	; 0x50
      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800c272:	2818      	cmp	r0, #24
 800c274:	d029      	beq.n	800c2ca <HAL_OSPI_IRQHandler+0xda>
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800c276:	2808      	cmp	r0, #8
 800c278:	d02b      	beq.n	800c2d2 <HAL_OSPI_IRQHandler+0xe2>
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800c27a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800c27e:	d1d1      	bne.n	800c224 <HAL_OSPI_IRQHandler+0x34>
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800c280:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c282:	bb53      	cbnz	r3, 800c2da <HAL_OSPI_IRQHandler+0xea>
          HAL_OSPI_AbortCpltCallback(hospi);
 800c284:	4620      	mov	r0, r4
 800c286:	f7ff ff88 	bl	800c19a <HAL_OSPI_AbortCpltCallback>
 800c28a:	e7cb      	b.n	800c224 <HAL_OSPI_IRQHandler+0x34>
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800c28c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c28e:	b169      	cbz	r1, 800c2ac <HAL_OSPI_IRQHandler+0xbc>
 800c290:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
 800c294:	d00a      	beq.n	800c2ac <HAL_OSPI_IRQHandler+0xbc>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c298:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800c29c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800c29e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	6423      	str	r3, [r4, #64]	; 0x40
        hospi->XferCount--;
 800c2a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	64a3      	str	r3, [r4, #72]	; 0x48
 800c2aa:	e7bb      	b.n	800c224 <HAL_OSPI_IRQHandler+0x34>
      else if(hospi->XferCount == 0U)
 800c2ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1b8      	bne.n	800c224 <HAL_OSPI_IRQHandler+0x34>
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800c2b2:	2102      	movs	r1, #2
 800c2b4:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800c2b6:	6822      	ldr	r2, [r4, #0]
 800c2b8:	6813      	ldr	r3, [r2, #0]
 800c2ba:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c2be:	6013      	str	r3, [r2, #0]
        hospi->State = HAL_OSPI_STATE_READY;
 800c2c0:	6521      	str	r1, [r4, #80]	; 0x50
        HAL_OSPI_RxCpltCallback(hospi);
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f7ff ff90 	bl	800c1e8 <HAL_OSPI_RxCpltCallback>
 800c2c8:	e7ac      	b.n	800c224 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_TxCpltCallback(hospi);
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f7ff ff8d 	bl	800c1ea <HAL_OSPI_TxCpltCallback>
 800c2d0:	e7a8      	b.n	800c224 <HAL_OSPI_IRQHandler+0x34>
        HAL_OSPI_CmdCpltCallback(hospi);
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f7ff ff87 	bl	800c1e6 <HAL_OSPI_CmdCpltCallback>
 800c2d8:	e7a4      	b.n	800c224 <HAL_OSPI_IRQHandler+0x34>
          HAL_OSPI_ErrorCallback(hospi);
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f7ff ff5c 	bl	800c198 <HAL_OSPI_ErrorCallback>
 800c2e0:	e7a0      	b.n	800c224 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800c2e2:	f013 0f08 	tst.w	r3, #8
 800c2e6:	d013      	beq.n	800c310 <HAL_OSPI_IRQHandler+0x120>
 800c2e8:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 800c2ec:	d010      	beq.n	800c310 <HAL_OSPI_IRQHandler+0x120>
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800c2ee:	2308      	movs	r3, #8
 800c2f0:	6253      	str	r3, [r2, #36]	; 0x24
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800c2fa:	d005      	beq.n	800c308 <HAL_OSPI_IRQHandler+0x118>
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800c302:	601a      	str	r2, [r3, #0]
      hospi->State = HAL_OSPI_STATE_READY;
 800c304:	2302      	movs	r3, #2
 800c306:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_OSPI_StatusMatchCallback(hospi);
 800c308:	4620      	mov	r0, r4
 800c30a:	f7ff ff6f 	bl	800c1ec <HAL_OSPI_StatusMatchCallback>
 800c30e:	e789      	b.n	800c224 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800c310:	f013 0f01 	tst.w	r3, #1
 800c314:	d029      	beq.n	800c36a <HAL_OSPI_IRQHandler+0x17a>
 800c316:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800c31a:	d026      	beq.n	800c36a <HAL_OSPI_IRQHandler+0x17a>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800c31c:	2301      	movs	r3, #1
 800c31e:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800c320:	6822      	ldr	r2, [r4, #0]
 800c322:	6813      	ldr	r3, [r2, #0]
 800c324:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c328:	6013      	str	r3, [r2, #0]
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800c32a:	2302      	movs	r3, #2
 800c32c:	6563      	str	r3, [r4, #84]	; 0x54
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	f012 0f04 	tst.w	r2, #4
 800c336:	d012      	beq.n	800c35e <HAL_OSPI_IRQHandler+0x16e>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	f022 0204 	bic.w	r2, r2, #4
 800c33e:	601a      	str	r2, [r3, #0]
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800c340:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c342:	4a11      	ldr	r2, [pc, #68]	; (800c388 <HAL_OSPI_IRQHandler+0x198>)
 800c344:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800c346:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c348:	f7ff fc4c 	bl	800bbe4 <HAL_MDMA_Abort_IT>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	f43f af69 	beq.w	800c224 <HAL_OSPI_IRQHandler+0x34>
        hospi->State = HAL_OSPI_STATE_READY;
 800c352:	2302      	movs	r3, #2
 800c354:	6523      	str	r3, [r4, #80]	; 0x50
        HAL_OSPI_ErrorCallback(hospi);
 800c356:	4620      	mov	r0, r4
 800c358:	f7ff ff1e 	bl	800c198 <HAL_OSPI_ErrorCallback>
 800c35c:	e762      	b.n	800c224 <HAL_OSPI_IRQHandler+0x34>
      hospi->State = HAL_OSPI_STATE_READY;
 800c35e:	2302      	movs	r3, #2
 800c360:	6523      	str	r3, [r4, #80]	; 0x50
      HAL_OSPI_ErrorCallback(hospi);
 800c362:	4620      	mov	r0, r4
 800c364:	f7ff ff18 	bl	800c198 <HAL_OSPI_ErrorCallback>
 800c368:	e75c      	b.n	800c224 <HAL_OSPI_IRQHandler+0x34>
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800c36a:	f013 0f10 	tst.w	r3, #16
 800c36e:	f43f af59 	beq.w	800c224 <HAL_OSPI_IRQHandler+0x34>
 800c372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c376:	f43f af55 	beq.w	800c224 <HAL_OSPI_IRQHandler+0x34>
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800c37a:	2310      	movs	r3, #16
 800c37c:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_OSPI_TimeOutCallback(hospi);
 800c37e:	4620      	mov	r0, r4
 800c380:	f7ff ff35 	bl	800c1ee <HAL_OSPI_TimeOutCallback>
}
 800c384:	e74e      	b.n	800c224 <HAL_OSPI_IRQHandler+0x34>
 800c386:	bf00      	nop
 800c388:	0800c19d 	.word	0x0800c19d

0800c38c <HAL_OSPI_Abort>:
{
 800c38c:	b530      	push	{r4, r5, lr}
 800c38e:	b083      	sub	sp, #12
 800c390:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c392:	f7fd ffc5 	bl	800a320 <HAL_GetTick>
  state = hospi->State;
 800c396:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800c398:	f012 0f0c 	tst.w	r2, #12
 800c39c:	d036      	beq.n	800c40c <HAL_OSPI_Abort+0x80>
 800c39e:	4605      	mov	r5, r0
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800c3a0:	6823      	ldr	r3, [r4, #0]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	f012 0f04 	tst.w	r2, #4
 800c3a8:	d108      	bne.n	800c3bc <HAL_OSPI_Abort+0x30>
  HAL_StatusTypeDef status = HAL_OK;
 800c3aa:	2000      	movs	r0, #0
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800c3ac:	6823      	ldr	r3, [r4, #0]
 800c3ae:	6a1a      	ldr	r2, [r3, #32]
 800c3b0:	f012 0f20 	tst.w	r2, #32
 800c3b4:	d10e      	bne.n	800c3d4 <HAL_OSPI_Abort+0x48>
      hospi->State = HAL_OSPI_STATE_READY;
 800c3b6:	2302      	movs	r3, #2
 800c3b8:	6523      	str	r3, [r4, #80]	; 0x50
 800c3ba:	e02a      	b.n	800c412 <HAL_OSPI_Abort+0x86>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	f022 0204 	bic.w	r2, r2, #4
 800c3c2:	601a      	str	r2, [r3, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 800c3c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c3c6:	f7ff fbcf 	bl	800bb68 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d0ee      	beq.n	800c3ac <HAL_OSPI_Abort+0x20>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800c3ce:	2304      	movs	r3, #4
 800c3d0:	6563      	str	r3, [r4, #84]	; 0x54
 800c3d2:	e7eb      	b.n	800c3ac <HAL_OSPI_Abort+0x20>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	f042 0202 	orr.w	r2, r2, #2
 800c3da:	601a      	str	r2, [r3, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800c3dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	462b      	mov	r3, r5
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	2102      	movs	r1, #2
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f7ff fcf4 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c3ec:	b988      	cbnz	r0, 800c412 <HAL_OSPI_Abort+0x86>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	2202      	movs	r2, #2
 800c3f2:	625a      	str	r2, [r3, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c3f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	462b      	mov	r3, r5
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	2120      	movs	r1, #32
 800c3fe:	4620      	mov	r0, r4
 800c400:	f7ff fce8 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800c404:	b928      	cbnz	r0, 800c412 <HAL_OSPI_Abort+0x86>
          hospi->State = HAL_OSPI_STATE_READY;
 800c406:	2302      	movs	r3, #2
 800c408:	6523      	str	r3, [r4, #80]	; 0x50
 800c40a:	e002      	b.n	800c412 <HAL_OSPI_Abort+0x86>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c40c:	2310      	movs	r3, #16
 800c40e:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800c410:	2001      	movs	r0, #1
}
 800c412:	b003      	add	sp, #12
 800c414:	bd30      	pop	{r4, r5, pc}

0800c416 <HAL_OSPI_SetTimeout>:
  hospi->Timeout = Timeout;
 800c416:	6581      	str	r1, [r0, #88]	; 0x58
}
 800c418:	2000      	movs	r0, #0
 800c41a:	4770      	bx	lr

0800c41c <HAL_OSPI_Init>:
{
 800c41c:	b530      	push	{r4, r5, lr}
 800c41e:	b083      	sub	sp, #12
 800c420:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c422:	f7fd ff7d 	bl	800a320 <HAL_GetTick>
  if (hospi == NULL)
 800c426:	2c00      	cmp	r4, #0
 800c428:	d077      	beq.n	800c51a <HAL_OSPI_Init+0xfe>
 800c42a:	4605      	mov	r5, r0
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800c42c:	2300      	movs	r3, #0
 800c42e:	6563      	str	r3, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800c430:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c432:	b113      	cbz	r3, 800c43a <HAL_OSPI_Init+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 800c434:	2000      	movs	r0, #0
}
 800c436:	b003      	add	sp, #12
 800c438:	bd30      	pop	{r4, r5, pc}
      HAL_OSPI_MspInit(hospi);
 800c43a:	4620      	mov	r0, r4
 800c43c:	f7f6 fe0e 	bl	800305c <HAL_OSPI_MspInit>
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800c440:	f241 3188 	movw	r1, #5000	; 0x1388
 800c444:	4620      	mov	r0, r4
 800c446:	f7ff ffe6 	bl	800c416 <HAL_OSPI_SetTimeout>
      MODIFY_REG(hospi->Instance->DCR1,
 800c44a:	6820      	ldr	r0, [r4, #0]
 800c44c:	6882      	ldr	r2, [r0, #8]
 800c44e:	4b34      	ldr	r3, [pc, #208]	; (800c520 <HAL_OSPI_Init+0x104>)
 800c450:	4013      	ands	r3, r2
 800c452:	68e2      	ldr	r2, [r4, #12]
 800c454:	6921      	ldr	r1, [r4, #16]
 800c456:	3901      	subs	r1, #1
 800c458:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c45c:	6961      	ldr	r1, [r4, #20]
 800c45e:	3901      	subs	r1, #1
 800c460:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c466:	430a      	orrs	r2, r1
 800c468:	69e1      	ldr	r1, [r4, #28]
 800c46a:	430a      	orrs	r2, r1
 800c46c:	4313      	orrs	r3, r2
 800c46e:	6083      	str	r3, [r0, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800c470:	6822      	ldr	r2, [r4, #0]
 800c472:	68d3      	ldr	r3, [r2, #12]
 800c474:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c478:	6a21      	ldr	r1, [r4, #32]
 800c47a:	430b      	orrs	r3, r1
 800c47c:	60d3      	str	r3, [r2, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800c47e:	6b21      	ldr	r1, [r4, #48]	; 0x30
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800c480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800c482:	6822      	ldr	r2, [r4, #0]
 800c484:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c488:	6113      	str	r3, [r2, #16]
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c48e:	615a      	str	r2, [r3, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800c490:	6821      	ldr	r1, [r4, #0]
 800c492:	680b      	ldr	r3, [r1, #0]
 800c494:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800c498:	6862      	ldr	r2, [r4, #4]
 800c49a:	3a01      	subs	r2, #1
 800c49c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c4a0:	600b      	str	r3, [r1, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c4a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	462b      	mov	r3, r5
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	2120      	movs	r1, #32
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f7ff fc91 	bl	800bdd4 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d1bf      	bne.n	800c436 <HAL_OSPI_Init+0x1a>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800c4b6:	6821      	ldr	r1, [r4, #0]
 800c4b8:	68cb      	ldr	r3, [r1, #12]
 800c4ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c4c0:	3a01      	subs	r2, #1
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	60cb      	str	r3, [r1, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800c4c6:	6822      	ldr	r2, [r4, #0]
 800c4c8:	6813      	ldr	r3, [r2, #0]
 800c4ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4ce:	68a1      	ldr	r1, [r4, #8]
 800c4d0:	430b      	orrs	r3, r1
 800c4d2:	6013      	str	r3, [r2, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800c4d4:	6821      	ldr	r1, [r4, #0]
 800c4d6:	f8d1 3108 	ldr.w	r3, [r1, #264]	; 0x108
 800c4da:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
 800c4de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c4e0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800c4e2:	432a      	orrs	r2, r5
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 800c4ea:	6822      	ldr	r2, [r4, #0]
 800c4ec:	6813      	ldr	r3, [r2, #0]
 800c4ee:	f043 0301 	orr.w	r3, r3, #1
 800c4f2:	6013      	str	r3, [r2, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800c4f4:	69a3      	ldr	r3, [r4, #24]
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d006      	beq.n	800c508 <HAL_OSPI_Init+0xec>
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c4fa:	68e3      	ldr	r3, [r4, #12]
 800c4fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c500:	d008      	beq.n	800c514 <HAL_OSPI_Init+0xf8>
          hospi->State = HAL_OSPI_STATE_READY;
 800c502:	2302      	movs	r3, #2
 800c504:	6523      	str	r3, [r4, #80]	; 0x50
 800c506:	e796      	b.n	800c436 <HAL_OSPI_Init+0x1a>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800c508:	6822      	ldr	r2, [r4, #0]
 800c50a:	6893      	ldr	r3, [r2, #8]
 800c50c:	f043 0302 	orr.w	r3, r3, #2
 800c510:	6093      	str	r3, [r2, #8]
 800c512:	e7f2      	b.n	800c4fa <HAL_OSPI_Init+0xde>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800c514:	2301      	movs	r3, #1
 800c516:	6523      	str	r3, [r4, #80]	; 0x50
 800c518:	e78d      	b.n	800c436 <HAL_OSPI_Init+0x1a>
    status = HAL_ERROR;
 800c51a:	2001      	movs	r0, #1
 800c51c:	e78b      	b.n	800c436 <HAL_OSPI_Init+0x1a>
 800c51e:	bf00      	nop
 800c520:	f8e0f8f4 	.word	0xf8e0f8f4

0800c524 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4604      	mov	r4, r0

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800c528:	4b22      	ldr	r3, [pc, #136]	; (800c5b4 <HAL_PWREx_ConfigSupply+0x90>)
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	f003 0307 	and.w	r3, r3, #7
 800c530:	2b06      	cmp	r3, #6
 800c532:	d007      	beq.n	800c544 <HAL_PWREx_ConfigSupply+0x20>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c534:	4b1f      	ldr	r3, [pc, #124]	; (800c5b4 <HAL_PWREx_ConfigSupply+0x90>)
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c53c:	4283      	cmp	r3, r0
 800c53e:	d036      	beq.n	800c5ae <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c540:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800c542:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c544:	4a1b      	ldr	r2, [pc, #108]	; (800c5b4 <HAL_PWREx_ConfigSupply+0x90>)
 800c546:	68d3      	ldr	r3, [r2, #12]
 800c548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c54c:	4303      	orrs	r3, r0
 800c54e:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 800c550:	f7fd fee6 	bl	800a320 <HAL_GetTick>
 800c554:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c556:	4b17      	ldr	r3, [pc, #92]	; (800c5b4 <HAL_PWREx_ConfigSupply+0x90>)
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c55e:	d107      	bne.n	800c570 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c560:	f7fd fede 	bl	800a320 <HAL_GetTick>
 800c564:	1b43      	subs	r3, r0, r5
 800c566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c56a:	d9f4      	bls.n	800c556 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 800c56c:	2001      	movs	r0, #1
 800c56e:	e7e8      	b.n	800c542 <HAL_PWREx_ConfigSupply+0x1e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800c570:	2c2e      	cmp	r4, #46	; 0x2e
 800c572:	bf18      	it	ne
 800c574:	2c1e      	cmpne	r4, #30
 800c576:	d008      	beq.n	800c58a <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800c578:	2c2d      	cmp	r4, #45	; 0x2d
 800c57a:	bf14      	ite	ne
 800c57c:	2300      	movne	r3, #0
 800c57e:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800c580:	2c1d      	cmp	r4, #29
 800c582:	d002      	beq.n	800c58a <HAL_PWREx_ConfigSupply+0x66>
 800c584:	b90b      	cbnz	r3, 800c58a <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 800c586:	2000      	movs	r0, #0
 800c588:	e7db      	b.n	800c542 <HAL_PWREx_ConfigSupply+0x1e>
    tickstart = HAL_GetTick ();
 800c58a:	f7fd fec9 	bl	800a320 <HAL_GetTick>
 800c58e:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c590:	4b08      	ldr	r3, [pc, #32]	; (800c5b4 <HAL_PWREx_ConfigSupply+0x90>)
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800c598:	d107      	bne.n	800c5aa <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c59a:	f7fd fec1 	bl	800a320 <HAL_GetTick>
 800c59e:	1b00      	subs	r0, r0, r4
 800c5a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c5a4:	d9f4      	bls.n	800c590 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 800c5a6:	2001      	movs	r0, #1
 800c5a8:	e7cb      	b.n	800c542 <HAL_PWREx_ConfigSupply+0x1e>
  return HAL_OK;
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	e7c9      	b.n	800c542 <HAL_PWREx_ConfigSupply+0x1e>
      return HAL_OK;
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	e7c7      	b.n	800c542 <HAL_PWREx_ConfigSupply+0x1e>
 800c5b2:	bf00      	nop
 800c5b4:	58024800 	.word	0x58024800

0800c5b8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	f000 82f0 	beq.w	800cb9e <HAL_RCC_OscConfig+0x5e6>
{
 800c5be:	b538      	push	{r3, r4, r5, lr}
 800c5c0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c5c2:	6803      	ldr	r3, [r0, #0]
 800c5c4:	f013 0f01 	tst.w	r3, #1
 800c5c8:	d029      	beq.n	800c61e <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c5ca:	4aa1      	ldr	r2, [pc, #644]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c5cc:	6913      	ldr	r3, [r2, #16]
 800c5ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c5d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c5d4:	2b10      	cmp	r3, #16
 800c5d6:	d019      	beq.n	800c60c <HAL_RCC_OscConfig+0x54>
 800c5d8:	2b18      	cmp	r3, #24
 800c5da:	d013      	beq.n	800c604 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c5dc:	6863      	ldr	r3, [r4, #4]
 800c5de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5e2:	d043      	beq.n	800c66c <HAL_RCC_OscConfig+0xb4>
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d158      	bne.n	800c69a <HAL_RCC_OscConfig+0xe2>
 800c5e8:	4b99      	ldr	r3, [pc, #612]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c5f8:	601a      	str	r2, [r3, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c600:	601a      	str	r2, [r3, #0]
 800c602:	e038      	b.n	800c676 <HAL_RCC_OscConfig+0xbe>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c604:	f002 0203 	and.w	r2, r2, #3
 800c608:	2a02      	cmp	r2, #2
 800c60a:	d1e7      	bne.n	800c5dc <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c60c:	4b90      	ldr	r3, [pc, #576]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c614:	d003      	beq.n	800c61e <HAL_RCC_OscConfig+0x66>
 800c616:	6863      	ldr	r3, [r4, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 82c2 	beq.w	800cba2 <HAL_RCC_OscConfig+0x5ea>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c61e:	6823      	ldr	r3, [r4, #0]
 800c620:	f013 0f02 	tst.w	r3, #2
 800c624:	f000 80a2 	beq.w	800c76c <HAL_RCC_OscConfig+0x1b4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c628:	4a89      	ldr	r2, [pc, #548]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c62a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c62c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c62e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800c632:	d074      	beq.n	800c71e <HAL_RCC_OscConfig+0x166>
 800c634:	2b18      	cmp	r3, #24
 800c636:	d06f      	beq.n	800c718 <HAL_RCC_OscConfig+0x160>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c638:	68e3      	ldr	r3, [r4, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 80c3 	beq.w	800c7c6 <HAL_RCC_OscConfig+0x20e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c640:	4983      	ldr	r1, [pc, #524]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c642:	680a      	ldr	r2, [r1, #0]
 800c644:	f022 0219 	bic.w	r2, r2, #25
 800c648:	4313      	orrs	r3, r2
 800c64a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c64c:	f7fd fe68 	bl	800a320 <HAL_GetTick>
 800c650:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c652:	4b7f      	ldr	r3, [pc, #508]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f013 0f04 	tst.w	r3, #4
 800c65a:	f040 80ab 	bne.w	800c7b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c65e:	f7fd fe5f 	bl	800a320 <HAL_GetTick>
 800c662:	1b40      	subs	r0, r0, r5
 800c664:	2802      	cmp	r0, #2
 800c666:	d9f4      	bls.n	800c652 <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 800c668:	2003      	movs	r0, #3
 800c66a:	e2a1      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c66c:	4a78      	ldr	r2, [pc, #480]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c66e:	6813      	ldr	r3, [r2, #0]
 800c670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c674:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c676:	6863      	ldr	r3, [r4, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d03e      	beq.n	800c6fa <HAL_RCC_OscConfig+0x142>
        tickstart = HAL_GetTick();
 800c67c:	f7fd fe50 	bl	800a320 <HAL_GetTick>
 800c680:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c682:	4b73      	ldr	r3, [pc, #460]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c68a:	d1c8      	bne.n	800c61e <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c68c:	f7fd fe48 	bl	800a320 <HAL_GetTick>
 800c690:	1b40      	subs	r0, r0, r5
 800c692:	2864      	cmp	r0, #100	; 0x64
 800c694:	d9f5      	bls.n	800c682 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800c696:	2003      	movs	r0, #3
 800c698:	e28a      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c69a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c69e:	d010      	beq.n	800c6c2 <HAL_RCC_OscConfig+0x10a>
 800c6a0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800c6a4:	d01b      	beq.n	800c6de <HAL_RCC_OscConfig+0x126>
 800c6a6:	4b6a      	ldr	r3, [pc, #424]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c6be:	601a      	str	r2, [r3, #0]
 800c6c0:	e7d9      	b.n	800c676 <HAL_RCC_OscConfig+0xbe>
 800c6c2:	4b63      	ldr	r3, [pc, #396]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c6ca:	601a      	str	r2, [r3, #0]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c6da:	601a      	str	r2, [r3, #0]
 800c6dc:	e7cb      	b.n	800c676 <HAL_RCC_OscConfig+0xbe>
 800c6de:	4b5c      	ldr	r3, [pc, #368]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c6ee:	601a      	str	r2, [r3, #0]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	e7bd      	b.n	800c676 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 800c6fa:	f7fd fe11 	bl	800a320 <HAL_GetTick>
 800c6fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c700:	4b53      	ldr	r3, [pc, #332]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800c708:	d089      	beq.n	800c61e <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c70a:	f7fd fe09 	bl	800a320 <HAL_GetTick>
 800c70e:	1b40      	subs	r0, r0, r5
 800c710:	2864      	cmp	r0, #100	; 0x64
 800c712:	d9f5      	bls.n	800c700 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
 800c714:	2003      	movs	r0, #3
 800c716:	e24b      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c718:	f012 0f03 	tst.w	r2, #3
 800c71c:	d18c      	bne.n	800c638 <HAL_RCC_OscConfig+0x80>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c71e:	4b4c      	ldr	r3, [pc, #304]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f013 0f04 	tst.w	r3, #4
 800c726:	d003      	beq.n	800c730 <HAL_RCC_OscConfig+0x178>
 800c728:	68e3      	ldr	r3, [r4, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f000 823b 	beq.w	800cba6 <HAL_RCC_OscConfig+0x5ee>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c730:	4a47      	ldr	r2, [pc, #284]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c732:	6813      	ldr	r3, [r2, #0]
 800c734:	f023 0319 	bic.w	r3, r3, #25
 800c738:	68e1      	ldr	r1, [r4, #12]
 800c73a:	430b      	orrs	r3, r1
 800c73c:	6013      	str	r3, [r2, #0]
          tickstart = HAL_GetTick();
 800c73e:	f7fd fdef 	bl	800a320 <HAL_GetTick>
 800c742:	4605      	mov	r5, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c744:	4b42      	ldr	r3, [pc, #264]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f013 0f04 	tst.w	r3, #4
 800c74c:	d106      	bne.n	800c75c <HAL_RCC_OscConfig+0x1a4>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c74e:	f7fd fde7 	bl	800a320 <HAL_GetTick>
 800c752:	1b40      	subs	r0, r0, r5
 800c754:	2802      	cmp	r0, #2
 800c756:	d9f5      	bls.n	800c744 <HAL_RCC_OscConfig+0x18c>
              return HAL_TIMEOUT;
 800c758:	2003      	movs	r0, #3
 800c75a:	e229      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c75c:	4a3c      	ldr	r2, [pc, #240]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c75e:	6853      	ldr	r3, [r2, #4]
 800c760:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c764:	6921      	ldr	r1, [r4, #16]
 800c766:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c76a:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c76c:	6823      	ldr	r3, [r4, #0]
 800c76e:	f013 0f10 	tst.w	r3, #16
 800c772:	d051      	beq.n	800c818 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c774:	4a36      	ldr	r2, [pc, #216]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c776:	6913      	ldr	r3, [r2, #16]
 800c778:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c77c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c77e:	2b08      	cmp	r3, #8
 800c780:	d039      	beq.n	800c7f6 <HAL_RCC_OscConfig+0x23e>
 800c782:	2b18      	cmp	r3, #24
 800c784:	d033      	beq.n	800c7ee <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800c786:	69e3      	ldr	r3, [r4, #28]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d06c      	beq.n	800c866 <HAL_RCC_OscConfig+0x2ae>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c78c:	4a30      	ldr	r2, [pc, #192]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c78e:	6813      	ldr	r3, [r2, #0]
 800c790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c796:	f7fd fdc3 	bl	800a320 <HAL_GetTick>
 800c79a:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c79c:	4b2c      	ldr	r3, [pc, #176]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c7a4:	d156      	bne.n	800c854 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800c7a6:	f7fd fdbb 	bl	800a320 <HAL_GetTick>
 800c7aa:	1b40      	subs	r0, r0, r5
 800c7ac:	2802      	cmp	r0, #2
 800c7ae:	d9f5      	bls.n	800c79c <HAL_RCC_OscConfig+0x1e4>
          {
            return HAL_TIMEOUT;
 800c7b0:	2003      	movs	r0, #3
 800c7b2:	e1fd      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7b4:	4a26      	ldr	r2, [pc, #152]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c7b6:	6853      	ldr	r3, [r2, #4]
 800c7b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c7bc:	6921      	ldr	r1, [r4, #16]
 800c7be:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c7c2:	6053      	str	r3, [r2, #4]
 800c7c4:	e7d2      	b.n	800c76c <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_DISABLE();
 800c7c6:	4a22      	ldr	r2, [pc, #136]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c7c8:	6813      	ldr	r3, [r2, #0]
 800c7ca:	f023 0301 	bic.w	r3, r3, #1
 800c7ce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800c7d0:	f7fd fda6 	bl	800a320 <HAL_GetTick>
 800c7d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c7d6:	4b1e      	ldr	r3, [pc, #120]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f013 0f04 	tst.w	r3, #4
 800c7de:	d0c5      	beq.n	800c76c <HAL_RCC_OscConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c7e0:	f7fd fd9e 	bl	800a320 <HAL_GetTick>
 800c7e4:	1b40      	subs	r0, r0, r5
 800c7e6:	2802      	cmp	r0, #2
 800c7e8:	d9f5      	bls.n	800c7d6 <HAL_RCC_OscConfig+0x21e>
            return HAL_TIMEOUT;
 800c7ea:	2003      	movs	r0, #3
 800c7ec:	e1e0      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c7ee:	f002 0203 	and.w	r2, r2, #3
 800c7f2:	2a01      	cmp	r2, #1
 800c7f4:	d1c7      	bne.n	800c786 <HAL_RCC_OscConfig+0x1ce>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c7f6:	4b16      	ldr	r3, [pc, #88]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c7fe:	d003      	beq.n	800c808 <HAL_RCC_OscConfig+0x250>
 800c800:	69e3      	ldr	r3, [r4, #28]
 800c802:	2b80      	cmp	r3, #128	; 0x80
 800c804:	f040 81d1 	bne.w	800cbaa <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c808:	4a11      	ldr	r2, [pc, #68]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c80a:	68d3      	ldr	r3, [r2, #12]
 800c80c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800c810:	6a21      	ldr	r1, [r4, #32]
 800c812:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c816:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c818:	6823      	ldr	r3, [r4, #0]
 800c81a:	f013 0f08 	tst.w	r3, #8
 800c81e:	d04a      	beq.n	800c8b6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c820:	6963      	ldr	r3, [r4, #20]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d033      	beq.n	800c88e <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c826:	4a0a      	ldr	r2, [pc, #40]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c828:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800c82a:	f043 0301 	orr.w	r3, r3, #1
 800c82e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c830:	f7fd fd76 	bl	800a320 <HAL_GetTick>
 800c834:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c836:	4b06      	ldr	r3, [pc, #24]	; (800c850 <HAL_RCC_OscConfig+0x298>)
 800c838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c83a:	f013 0f02 	tst.w	r3, #2
 800c83e:	d13a      	bne.n	800c8b6 <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c840:	f7fd fd6e 	bl	800a320 <HAL_GetTick>
 800c844:	1b40      	subs	r0, r0, r5
 800c846:	2802      	cmp	r0, #2
 800c848:	d9f5      	bls.n	800c836 <HAL_RCC_OscConfig+0x27e>
        {
          return HAL_TIMEOUT;
 800c84a:	2003      	movs	r0, #3
 800c84c:	e1b0      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
 800c84e:	bf00      	nop
 800c850:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c854:	4a8c      	ldr	r2, [pc, #560]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c856:	68d3      	ldr	r3, [r2, #12]
 800c858:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800c85c:	6a21      	ldr	r1, [r4, #32]
 800c85e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c862:	60d3      	str	r3, [r2, #12]
 800c864:	e7d8      	b.n	800c818 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_DISABLE();
 800c866:	4a88      	ldr	r2, [pc, #544]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c868:	6813      	ldr	r3, [r2, #0]
 800c86a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c86e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800c870:	f7fd fd56 	bl	800a320 <HAL_GetTick>
 800c874:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c876:	4b84      	ldr	r3, [pc, #528]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c87e:	d0cb      	beq.n	800c818 <HAL_RCC_OscConfig+0x260>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800c880:	f7fd fd4e 	bl	800a320 <HAL_GetTick>
 800c884:	1b40      	subs	r0, r0, r5
 800c886:	2802      	cmp	r0, #2
 800c888:	d9f5      	bls.n	800c876 <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 800c88a:	2003      	movs	r0, #3
 800c88c:	e190      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c88e:	4a7e      	ldr	r2, [pc, #504]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c890:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800c892:	f023 0301 	bic.w	r3, r3, #1
 800c896:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c898:	f7fd fd42 	bl	800a320 <HAL_GetTick>
 800c89c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c89e:	4b7a      	ldr	r3, [pc, #488]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c8a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8a2:	f013 0f02 	tst.w	r3, #2
 800c8a6:	d006      	beq.n	800c8b6 <HAL_RCC_OscConfig+0x2fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8a8:	f7fd fd3a 	bl	800a320 <HAL_GetTick>
 800c8ac:	1b40      	subs	r0, r0, r5
 800c8ae:	2802      	cmp	r0, #2
 800c8b0:	d9f5      	bls.n	800c89e <HAL_RCC_OscConfig+0x2e6>
        {
          return HAL_TIMEOUT;
 800c8b2:	2003      	movs	r0, #3
 800c8b4:	e17c      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	f013 0f20 	tst.w	r3, #32
 800c8bc:	d029      	beq.n	800c912 <HAL_RCC_OscConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800c8be:	69a3      	ldr	r3, [r4, #24]
 800c8c0:	b19b      	cbz	r3, 800c8ea <HAL_RCC_OscConfig+0x332>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c8c2:	4a71      	ldr	r2, [pc, #452]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c8c4:	6813      	ldr	r3, [r2, #0]
 800c8c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c8ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c8cc:	f7fd fd28 	bl	800a320 <HAL_GetTick>
 800c8d0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c8d2:	4b6d      	ldr	r3, [pc, #436]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c8da:	d11a      	bne.n	800c912 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800c8dc:	f7fd fd20 	bl	800a320 <HAL_GetTick>
 800c8e0:	1b40      	subs	r0, r0, r5
 800c8e2:	2802      	cmp	r0, #2
 800c8e4:	d9f5      	bls.n	800c8d2 <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 800c8e6:	2003      	movs	r0, #3
 800c8e8:	e162      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c8ea:	4a67      	ldr	r2, [pc, #412]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c8ec:	6813      	ldr	r3, [r2, #0]
 800c8ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c8f4:	f7fd fd14 	bl	800a320 <HAL_GetTick>
 800c8f8:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c8fa:	4b63      	ldr	r3, [pc, #396]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c902:	d006      	beq.n	800c912 <HAL_RCC_OscConfig+0x35a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800c904:	f7fd fd0c 	bl	800a320 <HAL_GetTick>
 800c908:	1b40      	subs	r0, r0, r5
 800c90a:	2802      	cmp	r0, #2
 800c90c:	d9f5      	bls.n	800c8fa <HAL_RCC_OscConfig+0x342>
        {
          return HAL_TIMEOUT;
 800c90e:	2003      	movs	r0, #3
 800c910:	e14e      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	f013 0f04 	tst.w	r3, #4
 800c918:	d122      	bne.n	800c960 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c91a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 8146 	beq.w	800cbae <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c922:	4a59      	ldr	r2, [pc, #356]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c924:	6912      	ldr	r2, [r2, #16]
 800c926:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800c92a:	2a18      	cmp	r2, #24
 800c92c:	f000 810e 	beq.w	800cb4c <HAL_RCC_OscConfig+0x594>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c930:	2b02      	cmp	r3, #2
 800c932:	f000 8094 	beq.w	800ca5e <HAL_RCC_OscConfig+0x4a6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c936:	4a54      	ldr	r2, [pc, #336]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c938:	6813      	ldr	r3, [r2, #0]
 800c93a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c93e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c940:	f7fd fcee 	bl	800a320 <HAL_GetTick>
 800c944:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c946:	4b50      	ldr	r3, [pc, #320]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800c94e:	f000 80fb 	beq.w	800cb48 <HAL_RCC_OscConfig+0x590>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c952:	f7fd fce5 	bl	800a320 <HAL_GetTick>
 800c956:	1b00      	subs	r0, r0, r4
 800c958:	2802      	cmp	r0, #2
 800c95a:	d9f4      	bls.n	800c946 <HAL_RCC_OscConfig+0x38e>
          {
            return HAL_TIMEOUT;
 800c95c:	2003      	movs	r0, #3
 800c95e:	e127      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
    PWR->CR1 |= PWR_CR1_DBP;
 800c960:	4a4a      	ldr	r2, [pc, #296]	; (800ca8c <HAL_RCC_OscConfig+0x4d4>)
 800c962:	6813      	ldr	r3, [r2, #0]
 800c964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c968:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c96a:	f7fd fcd9 	bl	800a320 <HAL_GetTick>
 800c96e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c970:	4b46      	ldr	r3, [pc, #280]	; (800ca8c <HAL_RCC_OscConfig+0x4d4>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f413 7f80 	tst.w	r3, #256	; 0x100
 800c978:	d106      	bne.n	800c988 <HAL_RCC_OscConfig+0x3d0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c97a:	f7fd fcd1 	bl	800a320 <HAL_GetTick>
 800c97e:	1b40      	subs	r0, r0, r5
 800c980:	2864      	cmp	r0, #100	; 0x64
 800c982:	d9f5      	bls.n	800c970 <HAL_RCC_OscConfig+0x3b8>
        return HAL_TIMEOUT;
 800c984:	2003      	movs	r0, #3
 800c986:	e113      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c988:	68a3      	ldr	r3, [r4, #8]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d00e      	beq.n	800c9ac <HAL_RCC_OscConfig+0x3f4>
 800c98e:	bb33      	cbnz	r3, 800c9de <HAL_RCC_OscConfig+0x426>
 800c990:	4b3d      	ldr	r3, [pc, #244]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c994:	f022 0201 	bic.w	r2, r2, #1
 800c998:	671a      	str	r2, [r3, #112]	; 0x70
 800c99a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c99c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9a0:	671a      	str	r2, [r3, #112]	; 0x70
 800c9a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c9a4:	f022 0204 	bic.w	r2, r2, #4
 800c9a8:	671a      	str	r2, [r3, #112]	; 0x70
 800c9aa:	e004      	b.n	800c9b6 <HAL_RCC_OscConfig+0x3fe>
 800c9ac:	4a36      	ldr	r2, [pc, #216]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c9ae:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800c9b0:	f043 0301 	orr.w	r3, r3, #1
 800c9b4:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c9b6:	68a3      	ldr	r3, [r4, #8]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d03e      	beq.n	800ca3a <HAL_RCC_OscConfig+0x482>
      tickstart = HAL_GetTick();
 800c9bc:	f7fd fcb0 	bl	800a320 <HAL_GetTick>
 800c9c0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c9c2:	4b31      	ldr	r3, [pc, #196]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c6:	f013 0f02 	tst.w	r3, #2
 800c9ca:	d1a6      	bne.n	800c91a <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9cc:	f7fd fca8 	bl	800a320 <HAL_GetTick>
 800c9d0:	1b40      	subs	r0, r0, r5
 800c9d2:	f241 3388 	movw	r3, #5000	; 0x1388
 800c9d6:	4298      	cmp	r0, r3
 800c9d8:	d9f3      	bls.n	800c9c2 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 800c9da:	2003      	movs	r0, #3
 800c9dc:	e0e8      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c9de:	2b05      	cmp	r3, #5
 800c9e0:	d00f      	beq.n	800ca02 <HAL_RCC_OscConfig+0x44a>
 800c9e2:	2b85      	cmp	r3, #133	; 0x85
 800c9e4:	d01b      	beq.n	800ca1e <HAL_RCC_OscConfig+0x466>
 800c9e6:	4b28      	ldr	r3, [pc, #160]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800c9e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c9ea:	f022 0201 	bic.w	r2, r2, #1
 800c9ee:	671a      	str	r2, [r3, #112]	; 0x70
 800c9f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c9f2:	f022 0204 	bic.w	r2, r2, #4
 800c9f6:	671a      	str	r2, [r3, #112]	; 0x70
 800c9f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c9fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9fe:	671a      	str	r2, [r3, #112]	; 0x70
 800ca00:	e7d9      	b.n	800c9b6 <HAL_RCC_OscConfig+0x3fe>
 800ca02:	4b21      	ldr	r3, [pc, #132]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800ca04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca06:	f042 0204 	orr.w	r2, r2, #4
 800ca0a:	671a      	str	r2, [r3, #112]	; 0x70
 800ca0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ca12:	671a      	str	r2, [r3, #112]	; 0x70
 800ca14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca16:	f042 0201 	orr.w	r2, r2, #1
 800ca1a:	671a      	str	r2, [r3, #112]	; 0x70
 800ca1c:	e7cb      	b.n	800c9b6 <HAL_RCC_OscConfig+0x3fe>
 800ca1e:	4b1a      	ldr	r3, [pc, #104]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800ca20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca22:	f042 0204 	orr.w	r2, r2, #4
 800ca26:	671a      	str	r2, [r3, #112]	; 0x70
 800ca28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ca2e:	671a      	str	r2, [r3, #112]	; 0x70
 800ca30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca32:	f042 0201 	orr.w	r2, r2, #1
 800ca36:	671a      	str	r2, [r3, #112]	; 0x70
 800ca38:	e7bd      	b.n	800c9b6 <HAL_RCC_OscConfig+0x3fe>
      tickstart = HAL_GetTick();
 800ca3a:	f7fd fc71 	bl	800a320 <HAL_GetTick>
 800ca3e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ca40:	4b11      	ldr	r3, [pc, #68]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800ca42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca44:	f013 0f02 	tst.w	r3, #2
 800ca48:	f43f af67 	beq.w	800c91a <HAL_RCC_OscConfig+0x362>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca4c:	f7fd fc68 	bl	800a320 <HAL_GetTick>
 800ca50:	1b40      	subs	r0, r0, r5
 800ca52:	f241 3388 	movw	r3, #5000	; 0x1388
 800ca56:	4298      	cmp	r0, r3
 800ca58:	d9f2      	bls.n	800ca40 <HAL_RCC_OscConfig+0x488>
          return HAL_TIMEOUT;
 800ca5a:	2003      	movs	r0, #3
 800ca5c:	e0a8      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
        __HAL_RCC_PLL_DISABLE();
 800ca5e:	4a0a      	ldr	r2, [pc, #40]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800ca60:	6813      	ldr	r3, [r2, #0]
 800ca62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ca68:	f7fd fc5a 	bl	800a320 <HAL_GetTick>
 800ca6c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ca6e:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <HAL_RCC_OscConfig+0x4d0>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ca76:	d00b      	beq.n	800ca90 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca78:	f7fd fc52 	bl	800a320 <HAL_GetTick>
 800ca7c:	1b40      	subs	r0, r0, r5
 800ca7e:	2802      	cmp	r0, #2
 800ca80:	d9f5      	bls.n	800ca6e <HAL_RCC_OscConfig+0x4b6>
            return HAL_TIMEOUT;
 800ca82:	2003      	movs	r0, #3
 800ca84:	e094      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
 800ca86:	bf00      	nop
 800ca88:	58024400 	.word	0x58024400
 800ca8c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ca90:	4b4f      	ldr	r3, [pc, #316]	; (800cbd0 <HAL_RCC_OscConfig+0x618>)
 800ca92:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800ca94:	4a4f      	ldr	r2, [pc, #316]	; (800cbd4 <HAL_RCC_OscConfig+0x61c>)
 800ca96:	400a      	ands	r2, r1
 800ca98:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ca9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ca9c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800caa0:	430a      	orrs	r2, r1
 800caa2:	629a      	str	r2, [r3, #40]	; 0x28
 800caa4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800caa6:	3a01      	subs	r2, #1
 800caa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800caac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800caae:	3901      	subs	r1, #1
 800cab0:	0249      	lsls	r1, r1, #9
 800cab2:	b289      	uxth	r1, r1
 800cab4:	430a      	orrs	r2, r1
 800cab6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cab8:	3901      	subs	r1, #1
 800caba:	0409      	lsls	r1, r1, #16
 800cabc:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800cac0:	430a      	orrs	r2, r1
 800cac2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cac4:	3901      	subs	r1, #1
 800cac6:	0609      	lsls	r1, r1, #24
 800cac8:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800cacc:	430a      	orrs	r2, r1
 800cace:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800cad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad2:	f022 0201 	bic.w	r2, r2, #1
 800cad6:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cad8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cada:	4a3f      	ldr	r2, [pc, #252]	; (800cbd8 <HAL_RCC_OscConfig+0x620>)
 800cadc:	400a      	ands	r2, r1
 800cade:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cae0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800cae4:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae8:	f022 020c 	bic.w	r2, r2, #12
 800caec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800caee:	430a      	orrs	r2, r1
 800caf0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800caf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf4:	f022 0202 	bic.w	r2, r2, #2
 800caf8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cafa:	430a      	orrs	r2, r1
 800cafc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cb04:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cb0c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb10:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cb14:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800cb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb18:	f042 0201 	orr.w	r2, r2, #1
 800cb1c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cb24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800cb26:	f7fd fbfb 	bl	800a320 <HAL_GetTick>
 800cb2a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cb2c:	4b28      	ldr	r3, [pc, #160]	; (800cbd0 <HAL_RCC_OscConfig+0x618>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800cb34:	d106      	bne.n	800cb44 <HAL_RCC_OscConfig+0x58c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb36:	f7fd fbf3 	bl	800a320 <HAL_GetTick>
 800cb3a:	1b00      	subs	r0, r0, r4
 800cb3c:	2802      	cmp	r0, #2
 800cb3e:	d9f5      	bls.n	800cb2c <HAL_RCC_OscConfig+0x574>
            return HAL_TIMEOUT;
 800cb40:	2003      	movs	r0, #3
 800cb42:	e035      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800cb44:	2000      	movs	r0, #0
 800cb46:	e033      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
 800cb48:	2000      	movs	r0, #0
 800cb4a:	e031      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800cb4c:	4920      	ldr	r1, [pc, #128]	; (800cbd0 <HAL_RCC_OscConfig+0x618>)
 800cb4e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cb50:	6b08      	ldr	r0, [r1, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d02d      	beq.n	800cbb2 <HAL_RCC_OscConfig+0x5fa>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb56:	f002 0303 	and.w	r3, r2, #3
 800cb5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb5c:	428b      	cmp	r3, r1
 800cb5e:	d12a      	bne.n	800cbb6 <HAL_RCC_OscConfig+0x5fe>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb60:	f3c2 1205 	ubfx	r2, r2, #4, #6
 800cb64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d127      	bne.n	800cbba <HAL_RCC_OscConfig+0x602>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cb6a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800cb6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cb70:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d123      	bne.n	800cbbe <HAL_RCC_OscConfig+0x606>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cb76:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800cb7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb7c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d11f      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x60a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cb82:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800cb86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cb88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d11b      	bne.n	800cbc6 <HAL_RCC_OscConfig+0x60e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cb8e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800cb92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cb94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cb96:	4298      	cmp	r0, r3
 800cb98:	d117      	bne.n	800cbca <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	e008      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
    return HAL_ERROR;
 800cb9e:	2001      	movs	r0, #1
}
 800cba0:	4770      	bx	lr
        return HAL_ERROR;
 800cba2:	2001      	movs	r0, #1
 800cba4:	e004      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800cba6:	2001      	movs	r0, #1
 800cba8:	e002      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
        return HAL_ERROR;
 800cbaa:	2001      	movs	r0, #1
 800cbac:	e000      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
  return HAL_OK;
 800cbae:	2000      	movs	r0, #0
}
 800cbb0:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800cbb2:	2001      	movs	r0, #1
 800cbb4:	e7fc      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
 800cbb6:	2001      	movs	r0, #1
 800cbb8:	e7fa      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
 800cbba:	2001      	movs	r0, #1
 800cbbc:	e7f8      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
 800cbbe:	2001      	movs	r0, #1
 800cbc0:	e7f6      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	e7f4      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
 800cbc6:	2001      	movs	r0, #1
 800cbc8:	e7f2      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
 800cbca:	2001      	movs	r0, #1
 800cbcc:	e7f0      	b.n	800cbb0 <HAL_RCC_OscConfig+0x5f8>
 800cbce:	bf00      	nop
 800cbd0:	58024400 	.word	0x58024400
 800cbd4:	fffffc0c 	.word	0xfffffc0c
 800cbd8:	ffff0007 	.word	0xffff0007

0800cbdc <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cbdc:	4b74      	ldr	r3, [pc, #464]	; (800cdb0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbe4:	2b10      	cmp	r3, #16
 800cbe6:	f000 80de 	beq.w	800cda6 <HAL_RCC_GetSysClockFreq+0x1ca>
 800cbea:	2b18      	cmp	r3, #24
 800cbec:	d010      	beq.n	800cc10 <HAL_RCC_GetSysClockFreq+0x34>
 800cbee:	b10b      	cbz	r3, 800cbf4 <HAL_RCC_GetSysClockFreq+0x18>
 800cbf0:	4870      	ldr	r0, [pc, #448]	; (800cdb4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800cbf2:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbf4:	4b6e      	ldr	r3, [pc, #440]	; (800cdb0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f013 0f20 	tst.w	r3, #32
 800cbfc:	f000 80d5 	beq.w	800cdaa <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cc00:	4b6b      	ldr	r3, [pc, #428]	; (800cdb0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cc02:	6818      	ldr	r0, [r3, #0]
 800cc04:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800cc08:	4b6b      	ldr	r3, [pc, #428]	; (800cdb8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800cc0a:	fa23 f000 	lsr.w	r0, r3, r0
 800cc0e:	4770      	bx	lr
{
 800cc10:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc12:	4a67      	ldr	r2, [pc, #412]	; (800cdb0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cc14:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800cc16:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800cc1a:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800cc1c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800cc20:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cc22:	f003 0c01 	and.w	ip, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800cc26:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800cc28:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800cc2c:	fb0c f303 	mul.w	r3, ip, r3
 800cc30:	ee07 3a90 	vmov	s15, r3
 800cc34:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 800cc38:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800cc3c:	f000 8093 	beq.w	800cd66 <HAL_RCC_GetSysClockFreq+0x18a>
    {
      switch (pllsource)
 800cc40:	2901      	cmp	r1, #1
 800cc42:	d065      	beq.n	800cd10 <HAL_RCC_GetSysClockFreq+0x134>
 800cc44:	2902      	cmp	r1, #2
 800cc46:	f000 8091 	beq.w	800cd6c <HAL_RCC_GetSysClockFreq+0x190>
 800cc4a:	b1e1      	cbz	r1, 800cc86 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cc4c:	ee07 0a10 	vmov	s14, r0
 800cc50:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800cc54:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800cdbc <HAL_RCC_GetSysClockFreq+0x1e0>
 800cc58:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cc5c:	4b54      	ldr	r3, [pc, #336]	; (800cdb0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc64:	ee06 3a90 	vmov	s13, r3
 800cc68:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800cc6c:	ed9f 6a54 	vldr	s12, [pc, #336]	; 800cdc0 <HAL_RCC_GetSysClockFreq+0x1e4>
 800cc70:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cc74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc80:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800cc84:	e060      	b.n	800cd48 <HAL_RCC_GetSysClockFreq+0x16c>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc86:	6813      	ldr	r3, [r2, #0]
 800cc88:	f013 0f20 	tst.w	r3, #32
 800cc8c:	d023      	beq.n	800ccd6 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cc8e:	4611      	mov	r1, r2
 800cc90:	6812      	ldr	r2, [r2, #0]
 800cc92:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800cc96:	4b48      	ldr	r3, [pc, #288]	; (800cdb8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800cc98:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cc9a:	ee07 3a10 	vmov	s14, r3
 800cc9e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800cca2:	ee07 0a10 	vmov	s14, r0
 800cca6:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800ccaa:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800ccae:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800ccb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb4:	ee06 3a90 	vmov	s13, r3
 800ccb8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800ccbc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800cdc0 <HAL_RCC_GetSysClockFreq+0x1e4>
 800ccc0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ccc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccd4:	e038      	b.n	800cd48 <HAL_RCC_GetSysClockFreq+0x16c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ccd6:	ee07 0a10 	vmov	s14, r0
 800ccda:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800ccde:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800cdc4 <HAL_RCC_GetSysClockFreq+0x1e8>
 800cce2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cce6:	4b32      	ldr	r3, [pc, #200]	; (800cdb0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccee:	ee06 3a90 	vmov	s13, r3
 800ccf2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800ccf6:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800cdc0 <HAL_RCC_GetSysClockFreq+0x1e4>
 800ccfa:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ccfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd0e:	e01b      	b.n	800cd48 <HAL_RCC_GetSysClockFreq+0x16c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cd10:	ee07 0a10 	vmov	s14, r0
 800cd14:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800cd18:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800cdbc <HAL_RCC_GetSysClockFreq+0x1e0>
 800cd1c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cd20:	4b23      	ldr	r3, [pc, #140]	; (800cdb0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cd22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd28:	ee06 3a90 	vmov	s13, r3
 800cd2c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800cd30:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800cdc0 <HAL_RCC_GetSysClockFreq+0x1e4>
 800cd34:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cd38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd44:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800cd48:	4b19      	ldr	r3, [pc, #100]	; (800cdb0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cd4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800cd50:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800cd52:	ee07 3a90 	vmov	s15, r3
 800cd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cd5e:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800cd62:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800cd66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd6a:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cd6c:	ee07 0a10 	vmov	s14, r0
 800cd70:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800cd74:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800cdc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cd78:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cd7c:	4b0c      	ldr	r3, [pc, #48]	; (800cdb0 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800cd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd84:	ee06 3a90 	vmov	s13, r3
 800cd88:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800cd8c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800cdc0 <HAL_RCC_GetSysClockFreq+0x1e4>
 800cd90:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cd94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cda0:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800cda4:	e7d0      	b.n	800cd48 <HAL_RCC_GetSysClockFreq+0x16c>
    sysclockfreq = HSE_VALUE;
 800cda6:	4809      	ldr	r0, [pc, #36]	; (800cdcc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800cda8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800cdaa:	4803      	ldr	r0, [pc, #12]	; (800cdb8 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	58024400 	.word	0x58024400
 800cdb4:	003d0900 	.word	0x003d0900
 800cdb8:	03d09000 	.word	0x03d09000
 800cdbc:	4a742400 	.word	0x4a742400
 800cdc0:	39000000 	.word	0x39000000
 800cdc4:	4c742400 	.word	0x4c742400
 800cdc8:	4bb71b00 	.word	0x4bb71b00
 800cdcc:	016e3600 	.word	0x016e3600

0800cdd0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	f000 8132 	beq.w	800d03a <HAL_RCC_ClockConfig+0x26a>
{
 800cdd6:	b570      	push	{r4, r5, r6, lr}
 800cdd8:	460d      	mov	r5, r1
 800cdda:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cddc:	4b9b      	ldr	r3, [pc, #620]	; (800d04c <HAL_RCC_ClockConfig+0x27c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f003 030f 	and.w	r3, r3, #15
 800cde4:	428b      	cmp	r3, r1
 800cde6:	d20b      	bcs.n	800ce00 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cde8:	4a98      	ldr	r2, [pc, #608]	; (800d04c <HAL_RCC_ClockConfig+0x27c>)
 800cdea:	6813      	ldr	r3, [r2, #0]
 800cdec:	f023 030f 	bic.w	r3, r3, #15
 800cdf0:	430b      	orrs	r3, r1
 800cdf2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cdf4:	6813      	ldr	r3, [r2, #0]
 800cdf6:	f003 030f 	and.w	r3, r3, #15
 800cdfa:	428b      	cmp	r3, r1
 800cdfc:	f040 811f 	bne.w	800d03e <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	f013 0f04 	tst.w	r3, #4
 800ce06:	d00c      	beq.n	800ce22 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ce08:	6922      	ldr	r2, [r4, #16]
 800ce0a:	4b91      	ldr	r3, [pc, #580]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ce0c:	699b      	ldr	r3, [r3, #24]
 800ce0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d905      	bls.n	800ce22 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ce16:	498e      	ldr	r1, [pc, #568]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ce18:	698b      	ldr	r3, [r1, #24]
 800ce1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce1e:	431a      	orrs	r2, r3
 800ce20:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	f013 0f08 	tst.w	r3, #8
 800ce28:	d00c      	beq.n	800ce44 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ce2a:	6962      	ldr	r2, [r4, #20]
 800ce2c:	4b88      	ldr	r3, [pc, #544]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ce2e:	69db      	ldr	r3, [r3, #28]
 800ce30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d905      	bls.n	800ce44 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ce38:	4985      	ldr	r1, [pc, #532]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ce3a:	69cb      	ldr	r3, [r1, #28]
 800ce3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce40:	431a      	orrs	r2, r3
 800ce42:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce44:	6823      	ldr	r3, [r4, #0]
 800ce46:	f013 0f10 	tst.w	r3, #16
 800ce4a:	d00c      	beq.n	800ce66 <HAL_RCC_ClockConfig+0x96>
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ce4c:	69a2      	ldr	r2, [r4, #24]
 800ce4e:	4b80      	ldr	r3, [pc, #512]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ce50:	69db      	ldr	r3, [r3, #28]
 800ce52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d905      	bls.n	800ce66 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ce5a:	497d      	ldr	r1, [pc, #500]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ce5c:	69cb      	ldr	r3, [r1, #28]
 800ce5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800ce62:	431a      	orrs	r2, r3
 800ce64:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ce66:	6823      	ldr	r3, [r4, #0]
 800ce68:	f013 0f20 	tst.w	r3, #32
 800ce6c:	d00c      	beq.n	800ce88 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ce6e:	69e2      	ldr	r2, [r4, #28]
 800ce70:	4b77      	ldr	r3, [pc, #476]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ce72:	6a1b      	ldr	r3, [r3, #32]
 800ce74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d905      	bls.n	800ce88 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ce7c:	4974      	ldr	r1, [pc, #464]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ce7e:	6a0b      	ldr	r3, [r1, #32]
 800ce80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce84:	431a      	orrs	r2, r3
 800ce86:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce88:	6823      	ldr	r3, [r4, #0]
 800ce8a:	f013 0f02 	tst.w	r3, #2
 800ce8e:	d00c      	beq.n	800ceaa <HAL_RCC_ClockConfig+0xda>
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ce90:	68e2      	ldr	r2, [r4, #12]
 800ce92:	4b6f      	ldr	r3, [pc, #444]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ce94:	699b      	ldr	r3, [r3, #24]
 800ce96:	f003 030f 	and.w	r3, r3, #15
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d905      	bls.n	800ceaa <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ce9e:	496c      	ldr	r1, [pc, #432]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cea0:	698b      	ldr	r3, [r1, #24]
 800cea2:	f023 030f 	bic.w	r3, r3, #15
 800cea6:	431a      	orrs	r2, r3
 800cea8:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ceaa:	6823      	ldr	r3, [r4, #0]
 800ceac:	f013 0f01 	tst.w	r3, #1
 800ceb0:	d041      	beq.n	800cf36 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ceb2:	4a67      	ldr	r2, [pc, #412]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ceb4:	6993      	ldr	r3, [r2, #24]
 800ceb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ceba:	68a1      	ldr	r1, [r4, #8]
 800cebc:	430b      	orrs	r3, r1
 800cebe:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cec0:	6863      	ldr	r3, [r4, #4]
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d00a      	beq.n	800cedc <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cec6:	2b03      	cmp	r3, #3
 800cec8:	d027      	beq.n	800cf1a <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d02c      	beq.n	800cf28 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cece:	4a60      	ldr	r2, [pc, #384]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800ced0:	6812      	ldr	r2, [r2, #0]
 800ced2:	f012 0f04 	tst.w	r2, #4
 800ced6:	d106      	bne.n	800cee6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800ced8:	2001      	movs	r0, #1
 800ceda:	e0ad      	b.n	800d038 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cedc:	6812      	ldr	r2, [r2, #0]
 800cede:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800cee2:	f000 80ae 	beq.w	800d042 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cee6:	495a      	ldr	r1, [pc, #360]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cee8:	690a      	ldr	r2, [r1, #16]
 800ceea:	f022 0207 	bic.w	r2, r2, #7
 800ceee:	4313      	orrs	r3, r2
 800cef0:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800cef2:	f7fd fa15 	bl	800a320 <HAL_GetTick>
 800cef6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cef8:	4b55      	ldr	r3, [pc, #340]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf00:	6862      	ldr	r2, [r4, #4]
 800cf02:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800cf06:	d016      	beq.n	800cf36 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf08:	f7fd fa0a 	bl	800a320 <HAL_GetTick>
 800cf0c:	1b80      	subs	r0, r0, r6
 800cf0e:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf12:	4298      	cmp	r0, r3
 800cf14:	d9f0      	bls.n	800cef8 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 800cf16:	2003      	movs	r0, #3
 800cf18:	e08e      	b.n	800d038 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cf1a:	4a4d      	ldr	r2, [pc, #308]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cf1c:	6812      	ldr	r2, [r2, #0]
 800cf1e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800cf22:	d1e0      	bne.n	800cee6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800cf24:	2001      	movs	r0, #1
 800cf26:	e087      	b.n	800d038 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cf28:	4a49      	ldr	r2, [pc, #292]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cf2a:	6812      	ldr	r2, [r2, #0]
 800cf2c:	f412 7f80 	tst.w	r2, #256	; 0x100
 800cf30:	d1d9      	bne.n	800cee6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 800cf32:	2001      	movs	r0, #1
 800cf34:	e080      	b.n	800d038 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	f013 0f02 	tst.w	r3, #2
 800cf3c:	d00c      	beq.n	800cf58 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800cf3e:	68e2      	ldr	r2, [r4, #12]
 800cf40:	4b43      	ldr	r3, [pc, #268]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	f003 030f 	and.w	r3, r3, #15
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d205      	bcs.n	800cf58 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf4c:	4940      	ldr	r1, [pc, #256]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cf4e:	698b      	ldr	r3, [r1, #24]
 800cf50:	f023 030f 	bic.w	r3, r3, #15
 800cf54:	431a      	orrs	r2, r3
 800cf56:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cf58:	4b3c      	ldr	r3, [pc, #240]	; (800d04c <HAL_RCC_ClockConfig+0x27c>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f003 030f 	and.w	r3, r3, #15
 800cf60:	42ab      	cmp	r3, r5
 800cf62:	d90a      	bls.n	800cf7a <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf64:	4a39      	ldr	r2, [pc, #228]	; (800d04c <HAL_RCC_ClockConfig+0x27c>)
 800cf66:	6813      	ldr	r3, [r2, #0]
 800cf68:	f023 030f 	bic.w	r3, r3, #15
 800cf6c:	432b      	orrs	r3, r5
 800cf6e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf70:	6813      	ldr	r3, [r2, #0]
 800cf72:	f003 030f 	and.w	r3, r3, #15
 800cf76:	42ab      	cmp	r3, r5
 800cf78:	d165      	bne.n	800d046 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	f013 0f04 	tst.w	r3, #4
 800cf80:	d00c      	beq.n	800cf9c <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800cf82:	6922      	ldr	r2, [r4, #16]
 800cf84:	4b32      	ldr	r3, [pc, #200]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cf86:	699b      	ldr	r3, [r3, #24]
 800cf88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d205      	bcs.n	800cf9c <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cf90:	492f      	ldr	r1, [pc, #188]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cf92:	698b      	ldr	r3, [r1, #24]
 800cf94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf98:	431a      	orrs	r2, r3
 800cf9a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf9c:	6823      	ldr	r3, [r4, #0]
 800cf9e:	f013 0f08 	tst.w	r3, #8
 800cfa2:	d00c      	beq.n	800cfbe <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800cfa4:	6962      	ldr	r2, [r4, #20]
 800cfa6:	4b2a      	ldr	r3, [pc, #168]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cfa8:	69db      	ldr	r3, [r3, #28]
 800cfaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d205      	bcs.n	800cfbe <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cfb2:	4927      	ldr	r1, [pc, #156]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cfb4:	69cb      	ldr	r3, [r1, #28]
 800cfb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfba:	431a      	orrs	r2, r3
 800cfbc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cfbe:	6823      	ldr	r3, [r4, #0]
 800cfc0:	f013 0f10 	tst.w	r3, #16
 800cfc4:	d00c      	beq.n	800cfe0 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800cfc6:	69a2      	ldr	r2, [r4, #24]
 800cfc8:	4b21      	ldr	r3, [pc, #132]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cfca:	69db      	ldr	r3, [r3, #28]
 800cfcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d205      	bcs.n	800cfe0 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cfd4:	491e      	ldr	r1, [pc, #120]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cfd6:	69cb      	ldr	r3, [r1, #28]
 800cfd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800cfdc:	431a      	orrs	r2, r3
 800cfde:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cfe0:	6823      	ldr	r3, [r4, #0]
 800cfe2:	f013 0f20 	tst.w	r3, #32
 800cfe6:	d00c      	beq.n	800d002 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800cfe8:	69e2      	ldr	r2, [r4, #28]
 800cfea:	4b19      	ldr	r3, [pc, #100]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cfec:	6a1b      	ldr	r3, [r3, #32]
 800cfee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d205      	bcs.n	800d002 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800cff6:	4916      	ldr	r1, [pc, #88]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800cff8:	6a0b      	ldr	r3, [r1, #32]
 800cffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cffe:	431a      	orrs	r2, r3
 800d000:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800d002:	f7ff fdeb 	bl	800cbdc <HAL_RCC_GetSysClockFreq>
 800d006:	4912      	ldr	r1, [pc, #72]	; (800d050 <HAL_RCC_ClockConfig+0x280>)
 800d008:	698b      	ldr	r3, [r1, #24]
 800d00a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800d00e:	4a11      	ldr	r2, [pc, #68]	; (800d054 <HAL_RCC_ClockConfig+0x284>)
 800d010:	5cd3      	ldrb	r3, [r2, r3]
 800d012:	f003 031f 	and.w	r3, r3, #31
 800d016:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800d018:	698b      	ldr	r3, [r1, #24]
 800d01a:	f003 030f 	and.w	r3, r3, #15
 800d01e:	5cd3      	ldrb	r3, [r2, r3]
 800d020:	f003 031f 	and.w	r3, r3, #31
 800d024:	fa20 f303 	lsr.w	r3, r0, r3
 800d028:	4a0b      	ldr	r2, [pc, #44]	; (800d058 <HAL_RCC_ClockConfig+0x288>)
 800d02a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800d02c:	4b0b      	ldr	r3, [pc, #44]	; (800d05c <HAL_RCC_ClockConfig+0x28c>)
 800d02e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 800d030:	4b0b      	ldr	r3, [pc, #44]	; (800d060 <HAL_RCC_ClockConfig+0x290>)
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	f7f6 f906 	bl	8003244 <HAL_InitTick>
}
 800d038:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800d03a:	2001      	movs	r0, #1
}
 800d03c:	4770      	bx	lr
      return HAL_ERROR;
 800d03e:	2001      	movs	r0, #1
 800d040:	e7fa      	b.n	800d038 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 800d042:	2001      	movs	r0, #1
 800d044:	e7f8      	b.n	800d038 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800d046:	2001      	movs	r0, #1
 800d048:	e7f6      	b.n	800d038 <HAL_RCC_ClockConfig+0x268>
 800d04a:	bf00      	nop
 800d04c:	52002000 	.word	0x52002000
 800d050:	58024400 	.word	0x58024400
 800d054:	080262a0 	.word	0x080262a0
 800d058:	24000074 	.word	0x24000074
 800d05c:	24000070 	.word	0x24000070
 800d060:	2400007c 	.word	0x2400007c

0800d064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d064:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800d066:	f7ff fdb9 	bl	800cbdc <HAL_RCC_GetSysClockFreq>
 800d06a:	4a0b      	ldr	r2, [pc, #44]	; (800d098 <HAL_RCC_GetHCLKFreq+0x34>)
 800d06c:	6993      	ldr	r3, [r2, #24]
 800d06e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800d072:	490a      	ldr	r1, [pc, #40]	; (800d09c <HAL_RCC_GetHCLKFreq+0x38>)
 800d074:	5ccb      	ldrb	r3, [r1, r3]
 800d076:	f003 031f 	and.w	r3, r3, #31
 800d07a:	fa20 f303 	lsr.w	r3, r0, r3
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800d07e:	6992      	ldr	r2, [r2, #24]
 800d080:	f002 020f 	and.w	r2, r2, #15
 800d084:	5c88      	ldrb	r0, [r1, r2]
 800d086:	f000 001f 	and.w	r0, r0, #31
 800d08a:	fa23 f000 	lsr.w	r0, r3, r0
 800d08e:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <HAL_RCC_GetHCLKFreq+0x3c>)
 800d090:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d092:	4a04      	ldr	r2, [pc, #16]	; (800d0a4 <HAL_RCC_GetHCLKFreq+0x40>)
 800d094:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800d096:	bd08      	pop	{r3, pc}
 800d098:	58024400 	.word	0x58024400
 800d09c:	080262a0 	.word	0x080262a0
 800d0a0:	24000074 	.word	0x24000074
 800d0a4:	24000070 	.word	0x24000070

0800d0a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d0a8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800d0aa:	f7ff ffdb 	bl	800d064 <HAL_RCC_GetHCLKFreq>
 800d0ae:	4b05      	ldr	r3, [pc, #20]	; (800d0c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800d0b0:	69db      	ldr	r3, [r3, #28]
 800d0b2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d0b6:	4a04      	ldr	r2, [pc, #16]	; (800d0c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d0b8:	5cd3      	ldrb	r3, [r2, r3]
 800d0ba:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800d0be:	40d8      	lsrs	r0, r3
 800d0c0:	bd08      	pop	{r3, pc}
 800d0c2:	bf00      	nop
 800d0c4:	58024400 	.word	0x58024400
 800d0c8:	080262a0 	.word	0x080262a0

0800d0cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d0cc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800d0ce:	f7ff ffc9 	bl	800d064 <HAL_RCC_GetHCLKFreq>
 800d0d2:	4b05      	ldr	r3, [pc, #20]	; (800d0e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800d0d4:	69db      	ldr	r3, [r3, #28]
 800d0d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800d0da:	4a04      	ldr	r2, [pc, #16]	; (800d0ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800d0dc:	5cd3      	ldrb	r3, [r2, r3]
 800d0de:	f003 031f 	and.w	r3, r3, #31
#endif
}
 800d0e2:	40d8      	lsrs	r0, r3
 800d0e4:	bd08      	pop	{r3, pc}
 800d0e6:	bf00      	nop
 800d0e8:	58024400 	.word	0x58024400
 800d0ec:	080262a0 	.word	0x080262a0

0800d0f0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800d0f0:	233f      	movs	r3, #63	; 0x3f
 800d0f2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d0f4:	4b11      	ldr	r3, [pc, #68]	; (800d13c <HAL_RCC_GetClockConfig+0x4c>)
 800d0f6:	691a      	ldr	r2, [r3, #16]
 800d0f8:	f002 0207 	and.w	r2, r2, #7
 800d0fc:	6042      	str	r2, [r0, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800d0fe:	699a      	ldr	r2, [r3, #24]
 800d100:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800d104:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800d106:	699a      	ldr	r2, [r3, #24]
 800d108:	f002 020f 	and.w	r2, r2, #15
 800d10c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800d10e:	699a      	ldr	r2, [r3, #24]
 800d110:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d114:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800d116:	69da      	ldr	r2, [r3, #28]
 800d118:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800d11c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800d11e:	69da      	ldr	r2, [r3, #28]
 800d120:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800d124:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800d126:	6a1b      	ldr	r3, [r3, #32]
 800d128:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d12c:	61c3      	str	r3, [r0, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d12e:	4b04      	ldr	r3, [pc, #16]	; (800d140 <HAL_RCC_GetClockConfig+0x50>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f003 030f 	and.w	r3, r3, #15
 800d136:	600b      	str	r3, [r1, #0]
}
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	58024400 	.word	0x58024400
 800d140:	52002000 	.word	0x52002000

0800d144 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d144:	4b40      	ldr	r3, [pc, #256]	; (800d248 <RCCEx_PLL2_Config+0x104>)
 800d146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d148:	f003 0303 	and.w	r3, r3, #3
 800d14c:	2b03      	cmp	r3, #3
 800d14e:	d079      	beq.n	800d244 <RCCEx_PLL2_Config+0x100>
{
 800d150:	b570      	push	{r4, r5, r6, lr}
 800d152:	4605      	mov	r5, r0
 800d154:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d156:	4a3c      	ldr	r2, [pc, #240]	; (800d248 <RCCEx_PLL2_Config+0x104>)
 800d158:	6813      	ldr	r3, [r2, #0]
 800d15a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d15e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d160:	f7fd f8de 	bl	800a320 <HAL_GetTick>
 800d164:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d166:	4b38      	ldr	r3, [pc, #224]	; (800d248 <RCCEx_PLL2_Config+0x104>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800d16e:	d006      	beq.n	800d17e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d170:	f7fd f8d6 	bl	800a320 <HAL_GetTick>
 800d174:	1b03      	subs	r3, r0, r4
 800d176:	2b02      	cmp	r3, #2
 800d178:	d9f5      	bls.n	800d166 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800d17a:	2003      	movs	r0, #3

  }


  return status;
}
 800d17c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d17e:	4b32      	ldr	r3, [pc, #200]	; (800d248 <RCCEx_PLL2_Config+0x104>)
 800d180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d182:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 800d186:	6829      	ldr	r1, [r5, #0]
 800d188:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800d18c:	629a      	str	r2, [r3, #40]	; 0x28
 800d18e:	686a      	ldr	r2, [r5, #4]
 800d190:	3a01      	subs	r2, #1
 800d192:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d196:	68a9      	ldr	r1, [r5, #8]
 800d198:	3901      	subs	r1, #1
 800d19a:	0249      	lsls	r1, r1, #9
 800d19c:	b289      	uxth	r1, r1
 800d19e:	430a      	orrs	r2, r1
 800d1a0:	68e9      	ldr	r1, [r5, #12]
 800d1a2:	3901      	subs	r1, #1
 800d1a4:	0409      	lsls	r1, r1, #16
 800d1a6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800d1aa:	430a      	orrs	r2, r1
 800d1ac:	6929      	ldr	r1, [r5, #16]
 800d1ae:	3901      	subs	r1, #1
 800d1b0:	0609      	lsls	r1, r1, #24
 800d1b2:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800d1b6:	430a      	orrs	r2, r1
 800d1b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1bc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d1c0:	6969      	ldr	r1, [r5, #20]
 800d1c2:	430a      	orrs	r2, r1
 800d1c4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c8:	f022 0220 	bic.w	r2, r2, #32
 800d1cc:	69a9      	ldr	r1, [r5, #24]
 800d1ce:	430a      	orrs	r2, r1
 800d1d0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d4:	f022 0210 	bic.w	r2, r2, #16
 800d1d8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d1da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d1dc:	4a1b      	ldr	r2, [pc, #108]	; (800d24c <RCCEx_PLL2_Config+0x108>)
 800d1de:	400a      	ands	r2, r1
 800d1e0:	69e9      	ldr	r1, [r5, #28]
 800d1e2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800d1e6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ea:	f042 0210 	orr.w	r2, r2, #16
 800d1ee:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800d1f0:	b9c6      	cbnz	r6, 800d224 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800d1fc:	4a12      	ldr	r2, [pc, #72]	; (800d248 <RCCEx_PLL2_Config+0x104>)
 800d1fe:	6813      	ldr	r3, [r2, #0]
 800d200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d204:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800d206:	f7fd f88b 	bl	800a320 <HAL_GetTick>
 800d20a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d20c:	4b0e      	ldr	r3, [pc, #56]	; (800d248 <RCCEx_PLL2_Config+0x104>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800d214:	d114      	bne.n	800d240 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d216:	f7fd f883 	bl	800a320 <HAL_GetTick>
 800d21a:	1b00      	subs	r0, r0, r4
 800d21c:	2802      	cmp	r0, #2
 800d21e:	d9f5      	bls.n	800d20c <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 800d220:	2003      	movs	r0, #3
 800d222:	e7ab      	b.n	800d17c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800d224:	2e01      	cmp	r6, #1
 800d226:	d005      	beq.n	800d234 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d228:	4a07      	ldr	r2, [pc, #28]	; (800d248 <RCCEx_PLL2_Config+0x104>)
 800d22a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d22c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d230:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d232:	e7e3      	b.n	800d1fc <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d234:	4a04      	ldr	r2, [pc, #16]	; (800d248 <RCCEx_PLL2_Config+0x104>)
 800d236:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d23c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d23e:	e7dd      	b.n	800d1fc <RCCEx_PLL2_Config+0xb8>
  return status;
 800d240:	2000      	movs	r0, #0
 800d242:	e79b      	b.n	800d17c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 800d244:	2001      	movs	r0, #1
}
 800d246:	4770      	bx	lr
 800d248:	58024400 	.word	0x58024400
 800d24c:	ffff0007 	.word	0xffff0007

0800d250 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d250:	4b40      	ldr	r3, [pc, #256]	; (800d354 <RCCEx_PLL3_Config+0x104>)
 800d252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d254:	f003 0303 	and.w	r3, r3, #3
 800d258:	2b03      	cmp	r3, #3
 800d25a:	d079      	beq.n	800d350 <RCCEx_PLL3_Config+0x100>
{
 800d25c:	b570      	push	{r4, r5, r6, lr}
 800d25e:	4605      	mov	r5, r0
 800d260:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d262:	4a3c      	ldr	r2, [pc, #240]	; (800d354 <RCCEx_PLL3_Config+0x104>)
 800d264:	6813      	ldr	r3, [r2, #0]
 800d266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d26a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d26c:	f7fd f858 	bl	800a320 <HAL_GetTick>
 800d270:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d272:	4b38      	ldr	r3, [pc, #224]	; (800d354 <RCCEx_PLL3_Config+0x104>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800d27a:	d006      	beq.n	800d28a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d27c:	f7fd f850 	bl	800a320 <HAL_GetTick>
 800d280:	1b03      	subs	r3, r0, r4
 800d282:	2b02      	cmp	r3, #2
 800d284:	d9f5      	bls.n	800d272 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 800d286:	2003      	movs	r0, #3

  }


  return status;
}
 800d288:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d28a:	4b32      	ldr	r3, [pc, #200]	; (800d354 <RCCEx_PLL3_Config+0x104>)
 800d28c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d28e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800d292:	6829      	ldr	r1, [r5, #0]
 800d294:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800d298:	629a      	str	r2, [r3, #40]	; 0x28
 800d29a:	686a      	ldr	r2, [r5, #4]
 800d29c:	3a01      	subs	r2, #1
 800d29e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2a2:	68a9      	ldr	r1, [r5, #8]
 800d2a4:	3901      	subs	r1, #1
 800d2a6:	0249      	lsls	r1, r1, #9
 800d2a8:	b289      	uxth	r1, r1
 800d2aa:	430a      	orrs	r2, r1
 800d2ac:	68e9      	ldr	r1, [r5, #12]
 800d2ae:	3901      	subs	r1, #1
 800d2b0:	0409      	lsls	r1, r1, #16
 800d2b2:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800d2b6:	430a      	orrs	r2, r1
 800d2b8:	6929      	ldr	r1, [r5, #16]
 800d2ba:	3901      	subs	r1, #1
 800d2bc:	0609      	lsls	r1, r1, #24
 800d2be:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800d2c2:	430a      	orrs	r2, r1
 800d2c4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d2cc:	6969      	ldr	r1, [r5, #20]
 800d2ce:	430a      	orrs	r2, r1
 800d2d0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d2d8:	69a9      	ldr	r1, [r5, #24]
 800d2da:	430a      	orrs	r2, r1
 800d2dc:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2e4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d2e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d2e8:	4a1b      	ldr	r2, [pc, #108]	; (800d358 <RCCEx_PLL3_Config+0x108>)
 800d2ea:	400a      	ands	r2, r1
 800d2ec:	69e9      	ldr	r1, [r5, #28]
 800d2ee:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800d2f2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d2fa:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800d2fc:	b9c6      	cbnz	r6, 800d330 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d2fe:	461a      	mov	r2, r3
 800d300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d302:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d306:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 800d308:	4a12      	ldr	r2, [pc, #72]	; (800d354 <RCCEx_PLL3_Config+0x104>)
 800d30a:	6813      	ldr	r3, [r2, #0]
 800d30c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d310:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800d312:	f7fd f805 	bl	800a320 <HAL_GetTick>
 800d316:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d318:	4b0e      	ldr	r3, [pc, #56]	; (800d354 <RCCEx_PLL3_Config+0x104>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800d320:	d114      	bne.n	800d34c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d322:	f7fc fffd 	bl	800a320 <HAL_GetTick>
 800d326:	1b00      	subs	r0, r0, r4
 800d328:	2802      	cmp	r0, #2
 800d32a:	d9f5      	bls.n	800d318 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 800d32c:	2003      	movs	r0, #3
 800d32e:	e7ab      	b.n	800d288 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 800d330:	2e01      	cmp	r6, #1
 800d332:	d005      	beq.n	800d340 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d334:	4a07      	ldr	r2, [pc, #28]	; (800d354 <RCCEx_PLL3_Config+0x104>)
 800d336:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d33c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d33e:	e7e3      	b.n	800d308 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d340:	4a04      	ldr	r2, [pc, #16]	; (800d354 <RCCEx_PLL3_Config+0x104>)
 800d342:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d348:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d34a:	e7dd      	b.n	800d308 <RCCEx_PLL3_Config+0xb8>
  return status;
 800d34c:	2000      	movs	r0, #0
 800d34e:	e79b      	b.n	800d288 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 800d350:	2001      	movs	r0, #1
}
 800d352:	4770      	bx	lr
 800d354:	58024400 	.word	0x58024400
 800d358:	ffff0007 	.word	0xffff0007

0800d35c <HAL_RCCEx_PeriphCLKConfig>:
{
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d360:	6803      	ldr	r3, [r0, #0]
 800d362:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800d366:	d030      	beq.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800d368:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d36a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d36e:	d026      	beq.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x62>
 800d370:	d80e      	bhi.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800d372:	b1eb      	cbz	r3, 800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d378:	d107      	bne.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d37a:	2102      	movs	r1, #2
 800d37c:	3004      	adds	r0, #4
 800d37e:	f7ff fee1 	bl	800d144 <RCCEx_PLL2_Config>
 800d382:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d384:	b145      	cbz	r5, 800d398 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800d386:	462e      	mov	r6, r5
 800d388:	e021      	b.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800d38a:	2601      	movs	r6, #1
 800d38c:	4635      	mov	r5, r6
 800d38e:	e01e      	b.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x72>
 800d390:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d394:	d109      	bne.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800d396:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d398:	4a99      	ldr	r2, [pc, #612]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d39a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d39c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d3a0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800d3a2:	430b      	orrs	r3, r1
 800d3a4:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d3a6:	2600      	movs	r6, #0
 800d3a8:	e011      	b.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800d3aa:	2601      	movs	r6, #1
 800d3ac:	4635      	mov	r5, r6
 800d3ae:	e00e      	b.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d3b0:	4a93      	ldr	r2, [pc, #588]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d3b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d3b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d3b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d3ba:	2500      	movs	r5, #0
 800d3bc:	e7ec      	b.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d3be:	2102      	movs	r1, #2
 800d3c0:	3024      	adds	r0, #36	; 0x24
 800d3c2:	f7ff ff45 	bl	800d250 <RCCEx_PLL3_Config>
 800d3c6:	4605      	mov	r5, r0
      break;
 800d3c8:	e7dc      	b.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d3ca:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d3cc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d3ce:	6823      	ldr	r3, [r4, #0]
 800d3d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d3d4:	d026      	beq.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800d3d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d3d8:	2b04      	cmp	r3, #4
 800d3da:	d81f      	bhi.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800d3dc:	e8df f003 	tbb	[pc, r3]
 800d3e0:	08171103 	.word	0x08171103
 800d3e4:	08          	.byte	0x08
 800d3e5:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d3e6:	4a86      	ldr	r2, [pc, #536]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d3e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d3ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d3ee:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800d3f0:	b9bd      	cbnz	r5, 800d422 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d3f2:	4a83      	ldr	r2, [pc, #524]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d3f4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d3f6:	f023 0307 	bic.w	r3, r3, #7
 800d3fa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d3fc:	430b      	orrs	r3, r1
 800d3fe:	6513      	str	r3, [r2, #80]	; 0x50
 800d400:	e010      	b.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d402:	2100      	movs	r1, #0
 800d404:	1d20      	adds	r0, r4, #4
 800d406:	f7ff fe9d 	bl	800d144 <RCCEx_PLL2_Config>
 800d40a:	4605      	mov	r5, r0
      break;
 800d40c:	e7f0      	b.n	800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d40e:	2100      	movs	r1, #0
 800d410:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d414:	f7ff ff1c 	bl	800d250 <RCCEx_PLL3_Config>
 800d418:	4605      	mov	r5, r0
      break;
 800d41a:	e7e9      	b.n	800d3f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 800d41c:	2601      	movs	r6, #1
 800d41e:	4635      	mov	r5, r6
 800d420:	e000      	b.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800d422:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d42a:	d01d      	beq.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2AClockSelection)
 800d42c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d42e:	2b80      	cmp	r3, #128	; 0x80
 800d430:	d039      	beq.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800d432:	d80b      	bhi.n	800d44c <HAL_RCCEx_PeriphCLKConfig+0xf0>
 800d434:	b38b      	cbz	r3, 800d49a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800d436:	2b40      	cmp	r3, #64	; 0x40
 800d438:	d105      	bne.n	800d446 <HAL_RCCEx_PeriphCLKConfig+0xea>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d43a:	2100      	movs	r1, #0
 800d43c:	1d20      	adds	r0, r4, #4
 800d43e:	f7ff fe81 	bl	800d144 <RCCEx_PLL2_Config>
 800d442:	4605      	mov	r5, r0
      break;
 800d444:	e008      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch(PeriphClkInit->Sai2AClockSelection)
 800d446:	2601      	movs	r6, #1
 800d448:	4635      	mov	r5, r6
 800d44a:	e00d      	b.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800d44c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d450:	d002      	beq.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800d452:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d456:	d11b      	bne.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x134>
    if(ret == HAL_OK)
 800d458:	bb65      	cbnz	r5, 800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800d45a:	4a69      	ldr	r2, [pc, #420]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d45c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d45e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800d462:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d464:	430b      	orrs	r3, r1
 800d466:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800d46e:	d035      	beq.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->Sai2BClockSelection)
 800d470:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d476:	d057      	beq.n	800d528 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d478:	d821      	bhi.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0x162>
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d04e      	beq.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800d47e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d482:	d119      	bne.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d484:	2100      	movs	r1, #0
 800d486:	1d20      	adds	r0, r4, #4
 800d488:	f7ff fe5c 	bl	800d144 <RCCEx_PLL2_Config>
 800d48c:	4605      	mov	r5, r0
      break;
 800d48e:	e01c      	b.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    switch(PeriphClkInit->Sai2AClockSelection)
 800d490:	2bc0      	cmp	r3, #192	; 0xc0
 800d492:	d0e1      	beq.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800d494:	2601      	movs	r6, #1
 800d496:	4635      	mov	r5, r6
 800d498:	e7e6      	b.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d49a:	4a59      	ldr	r2, [pc, #356]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d49c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d49e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d4a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800d4a4:	e7d8      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d4ac:	f7ff fed0 	bl	800d250 <RCCEx_PLL3_Config>
 800d4b0:	4605      	mov	r5, r0
      break;
 800d4b2:	e7d1      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800d4b4:	462e      	mov	r6, r5
 800d4b6:	e7d7      	b.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai2BClockSelection)
 800d4b8:	2601      	movs	r6, #1
 800d4ba:	4635      	mov	r5, r6
 800d4bc:	e00e      	b.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800d4be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4c2:	d002      	beq.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800d4c4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d4c8:	d122      	bne.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(ret == HAL_OK)
 800d4ca:	2d00      	cmp	r5, #0
 800d4cc:	d133      	bne.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800d4ce:	4a4c      	ldr	r2, [pc, #304]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d4d0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d4d2:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 800d4d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d4d8:	430b      	orrs	r3, r1
 800d4da:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800d4e2:	d031      	beq.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->OspiClockSelection)
 800d4e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d4e6:	2b20      	cmp	r3, #32
 800d4e8:	d041      	beq.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800d4ea:	d829      	bhi.n	800d540 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800d4ec:	b133      	cbz	r3, 800d4fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800d4ee:	2b10      	cmp	r3, #16
 800d4f0:	d123      	bne.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4f2:	4a43      	ldr	r2, [pc, #268]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d4f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d4f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d4fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800d4fc:	2d00      	cmp	r5, #0
 800d4fe:	d13c      	bne.n	800d57a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800d500:	4a3f      	ldr	r2, [pc, #252]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d502:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d504:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d508:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d50a:	430b      	orrs	r3, r1
 800d50c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d50e:	e01b      	b.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Sai2BClockSelection)
 800d510:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d514:	d0d9      	beq.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800d516:	2601      	movs	r6, #1
 800d518:	4635      	mov	r5, r6
 800d51a:	e7df      	b.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x180>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d51c:	4a38      	ldr	r2, [pc, #224]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d51e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d524:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800d526:	e7d0      	b.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d528:	2100      	movs	r1, #0
 800d52a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d52e:	f7ff fe8f 	bl	800d250 <RCCEx_PLL3_Config>
 800d532:	4605      	mov	r5, r0
      break;
 800d534:	e7c9      	b.n	800d4ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800d536:	462e      	mov	r6, r5
 800d538:	e7d0      	b.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x180>
    switch(PeriphClkInit->OspiClockSelection)
 800d53a:	2601      	movs	r6, #1
 800d53c:	4635      	mov	r5, r6
 800d53e:	e003      	b.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800d540:	2b30      	cmp	r3, #48	; 0x30
 800d542:	d0db      	beq.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800d544:	2601      	movs	r6, #1
 800d546:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800d54e:	d039      	beq.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 800d550:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d556:	d02d      	beq.n	800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800d558:	d814      	bhi.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800d55a:	b32b      	cbz	r3, 800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800d55c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d560:	d10d      	bne.n	800d57e <HAL_RCCEx_PeriphCLKConfig+0x222>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d562:	2100      	movs	r1, #0
 800d564:	1d20      	adds	r0, r4, #4
 800d566:	f7ff fded 	bl	800d144 <RCCEx_PLL2_Config>
 800d56a:	4605      	mov	r5, r0
      break;
 800d56c:	e010      	b.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d56e:	2102      	movs	r1, #2
 800d570:	1d20      	adds	r0, r4, #4
 800d572:	f7ff fde7 	bl	800d144 <RCCEx_PLL2_Config>
 800d576:	4605      	mov	r5, r0
      break;
 800d578:	e7c0      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800d57a:	462e      	mov	r6, r5
 800d57c:	e7e4      	b.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    switch(PeriphClkInit->Spi123ClockSelection)
 800d57e:	2601      	movs	r6, #1
 800d580:	4635      	mov	r5, r6
 800d582:	e01f      	b.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800d584:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d588:	d002      	beq.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800d58a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d58e:	d108      	bne.n	800d5a2 <HAL_RCCEx_PeriphCLKConfig+0x246>
    if(ret == HAL_OK)
 800d590:	b9bd      	cbnz	r5, 800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d592:	4a1b      	ldr	r2, [pc, #108]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d594:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d59a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800d59c:	430b      	orrs	r3, r1
 800d59e:	6513      	str	r3, [r2, #80]	; 0x50
 800d5a0:	e010      	b.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    switch(PeriphClkInit->Spi123ClockSelection)
 800d5a2:	2601      	movs	r6, #1
 800d5a4:	4635      	mov	r5, r6
 800d5a6:	e00d      	b.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5a8:	4a15      	ldr	r2, [pc, #84]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d5aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d5ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5b0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800d5b2:	e7ed      	b.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0x234>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d5ba:	f7ff fe49 	bl	800d250 <RCCEx_PLL3_Config>
 800d5be:	4605      	mov	r5, r0
      break;
 800d5c0:	e7e6      	b.n	800d590 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800d5c2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d5c4:	6823      	ldr	r3, [r4, #0]
 800d5c6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800d5ca:	d026      	beq.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 800d5cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5d2:	d037      	beq.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800d5d4:	d816      	bhi.n	800d604 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d5d6:	b13b      	cbz	r3, 800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5dc:	d10d      	bne.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d5de:	2101      	movs	r1, #1
 800d5e0:	1d20      	adds	r0, r4, #4
 800d5e2:	f7ff fdaf 	bl	800d144 <RCCEx_PLL2_Config>
 800d5e6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d5e8:	bb9d      	cbnz	r5, 800d652 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d5ea:	4a05      	ldr	r2, [pc, #20]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d5ec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d5ee:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800d5f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d5f4:	430b      	orrs	r3, r1
 800d5f6:	6513      	str	r3, [r2, #80]	; 0x50
 800d5f8:	e00f      	b.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi45ClockSelection)
 800d5fa:	2601      	movs	r6, #1
 800d5fc:	4635      	mov	r5, r6
 800d5fe:	e00c      	b.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800d600:	58024400 	.word	0x58024400
 800d604:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d608:	d0ee      	beq.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d60a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d60e:	d0eb      	beq.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d610:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d614:	d0e8      	beq.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d616:	2601      	movs	r6, #1
 800d618:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d61a:	6823      	ldr	r3, [r4, #0]
 800d61c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800d620:	d025      	beq.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800d622:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800d626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d62a:	d04c      	beq.n	800d6c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800d62c:	d816      	bhi.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d03c      	beq.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d636:	d10e      	bne.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d638:	2101      	movs	r1, #1
 800d63a:	1d20      	adds	r0, r4, #4
 800d63c:	f7ff fd82 	bl	800d144 <RCCEx_PLL2_Config>
 800d640:	4605      	mov	r5, r0
      break;
 800d642:	e033      	b.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x350>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d644:	2101      	movs	r1, #1
 800d646:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d64a:	f7ff fe01 	bl	800d250 <RCCEx_PLL3_Config>
 800d64e:	4605      	mov	r5, r0
      break;
 800d650:	e7ca      	b.n	800d5e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800d652:	462e      	mov	r6, r5
 800d654:	e7e1      	b.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch(PeriphClkInit->Spi6ClockSelection)
 800d656:	2601      	movs	r6, #1
 800d658:	4635      	mov	r5, r6
 800d65a:	e008      	b.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x312>
 800d65c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d660:	d024      	beq.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d662:	d91d      	bls.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800d664:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800d668:	d020      	beq.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d66a:	2601      	movs	r6, #1
 800d66c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800d674:	d009      	beq.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    switch(PeriphClkInit->FdcanClockSelection)
 800d676:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d67c:	d02c      	beq.n	800d6d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 800d67e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d682:	d037      	beq.n	800d6f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 800d684:	b36b      	cbz	r3, 800d6e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800d686:	2601      	movs	r6, #1
 800d688:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d68a:	6823      	ldr	r3, [r4, #0]
 800d68c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800d690:	d045      	beq.n	800d71e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch(PeriphClkInit->FmcClockSelection)
 800d692:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d694:	2b03      	cmp	r3, #3
 800d696:	d86d      	bhi.n	800d774 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d698:	e8df f003 	tbb	[pc, r3]
 800d69c:	39663439 	.word	0x39663439
    switch(PeriphClkInit->Spi6ClockSelection)
 800d6a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6a4:	d002      	beq.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6aa:	d109      	bne.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0x364>
    if(ret == HAL_OK)
 800d6ac:	b995      	cbnz	r5, 800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x378>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d6ae:	4a8c      	ldr	r2, [pc, #560]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d6b0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d6b2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800d6b6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800d6ba:	430b      	orrs	r3, r1
 800d6bc:	6593      	str	r3, [r2, #88]	; 0x58
 800d6be:	e7d6      	b.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x312>
    switch(PeriphClkInit->Spi6ClockSelection)
 800d6c0:	2601      	movs	r6, #1
 800d6c2:	4635      	mov	r5, r6
 800d6c4:	e7d3      	b.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x312>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d6c6:	2101      	movs	r1, #1
 800d6c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d6cc:	f7ff fdc0 	bl	800d250 <RCCEx_PLL3_Config>
 800d6d0:	4605      	mov	r5, r0
      break;
 800d6d2:	e7eb      	b.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x350>
 800d6d4:	462e      	mov	r6, r5
 800d6d6:	e7ca      	b.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6d8:	4a81      	ldr	r2, [pc, #516]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d6da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d6dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d6e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800d6e2:	b96d      	cbnz	r5, 800d700 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d6e4:	4a7e      	ldr	r2, [pc, #504]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d6e6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d6e8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800d6ec:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800d6ee:	430b      	orrs	r3, r1
 800d6f0:	6513      	str	r3, [r2, #80]	; 0x50
 800d6f2:	e7ca      	b.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x32e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	1d20      	adds	r0, r4, #4
 800d6f8:	f7ff fd24 	bl	800d144 <RCCEx_PLL2_Config>
 800d6fc:	4605      	mov	r5, r0
      break;
 800d6fe:	e7f0      	b.n	800d6e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800d700:	462e      	mov	r6, r5
 800d702:	e7c2      	b.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d704:	4a76      	ldr	r2, [pc, #472]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d706:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d70c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800d70e:	bba5      	cbnz	r5, 800d77a <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d710:	4a73      	ldr	r2, [pc, #460]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d712:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d714:	f023 0303 	bic.w	r3, r3, #3
 800d718:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d71a:	430b      	orrs	r3, r1
 800d71c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800d724:	d12b      	bne.n	800d77e <HAL_RCCEx_PeriphCLKConfig+0x422>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d726:	6823      	ldr	r3, [r4, #0]
 800d728:	f013 0f01 	tst.w	r3, #1
 800d72c:	f000 80a3 	beq.w	800d876 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch(PeriphClkInit->Usart16ClockSelection)
 800d730:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d734:	2b28      	cmp	r3, #40	; 0x28
 800d736:	f200 809c 	bhi.w	800d872 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800d73a:	e8df f003 	tbb	[pc, r3]
 800d73e:	9a89      	.short	0x9a89
 800d740:	9a9a9a9a 	.word	0x9a9a9a9a
 800d744:	9a849a9a 	.word	0x9a849a9a
 800d748:	9a9a9a9a 	.word	0x9a9a9a9a
 800d74c:	9a939a9a 	.word	0x9a939a9a
 800d750:	9a9a9a9a 	.word	0x9a9a9a9a
 800d754:	9a899a9a 	.word	0x9a899a9a
 800d758:	9a9a9a9a 	.word	0x9a9a9a9a
 800d75c:	9a899a9a 	.word	0x9a899a9a
 800d760:	9a9a9a9a 	.word	0x9a9a9a9a
 800d764:	9a9a      	.short	0x9a9a
 800d766:	89          	.byte	0x89
 800d767:	00          	.byte	0x00
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d768:	2102      	movs	r1, #2
 800d76a:	1d20      	adds	r0, r4, #4
 800d76c:	f7ff fcea 	bl	800d144 <RCCEx_PLL2_Config>
 800d770:	4605      	mov	r5, r0
      break;
 800d772:	e7cc      	b.n	800d70e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    switch(PeriphClkInit->FmcClockSelection)
 800d774:	2601      	movs	r6, #1
 800d776:	4635      	mov	r5, r6
 800d778:	e7d1      	b.n	800d71e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800d77a:	462e      	mov	r6, r5
 800d77c:	e7cf      	b.n	800d71e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d77e:	4a59      	ldr	r2, [pc, #356]	; (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800d780:	6813      	ldr	r3, [r2, #0]
 800d782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d786:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800d788:	f7fc fdca 	bl	800a320 <HAL_GetTick>
 800d78c:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d78e:	4b55      	ldr	r3, [pc, #340]	; (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d796:	d105      	bne.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d798:	f7fc fdc2 	bl	800a320 <HAL_GetTick>
 800d79c:	1bc0      	subs	r0, r0, r7
 800d79e:	2864      	cmp	r0, #100	; 0x64
 800d7a0:	d9f5      	bls.n	800d78e <HAL_RCCEx_PeriphCLKConfig+0x432>
        ret = HAL_TIMEOUT;
 800d7a2:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 800d7a4:	2d00      	cmp	r5, #0
 800d7a6:	d14a      	bne.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d7a8:	4b4d      	ldr	r3, [pc, #308]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d7aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ac:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800d7b0:	4053      	eors	r3, r2
 800d7b2:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d7b6:	d00c      	beq.n	800d7d2 <HAL_RCCEx_PeriphCLKConfig+0x476>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d7b8:	4b49      	ldr	r3, [pc, #292]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d7ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d7bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800d7c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d7c2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800d7c6:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d7c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d7ca:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800d7ce:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800d7d0:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d7d2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800d7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7da:	d015      	beq.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if(ret == HAL_OK)
 800d7dc:	bb8d      	cbnz	r5, 800d842 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d7de:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800d7e2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d7e6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800d7ea:	d01e      	beq.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800d7ec:	4a3c      	ldr	r2, [pc, #240]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d7ee:	6913      	ldr	r3, [r2, #16]
 800d7f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d7f4:	6113      	str	r3, [r2, #16]
 800d7f6:	493a      	ldr	r1, [pc, #232]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d7f8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800d7fa:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800d7fe:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800d802:	4313      	orrs	r3, r2
 800d804:	670b      	str	r3, [r1, #112]	; 0x70
 800d806:	e78e      	b.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        tickstart = HAL_GetTick();
 800d808:	f7fc fd8a 	bl	800a320 <HAL_GetTick>
 800d80c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d80e:	4b34      	ldr	r3, [pc, #208]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d812:	f013 0f02 	tst.w	r3, #2
 800d816:	d1e1      	bne.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x480>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d818:	f7fc fd82 	bl	800a320 <HAL_GetTick>
 800d81c:	1bc0      	subs	r0, r0, r7
 800d81e:	f241 3388 	movw	r3, #5000	; 0x1388
 800d822:	4298      	cmp	r0, r3
 800d824:	d9f3      	bls.n	800d80e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
            ret = HAL_TIMEOUT;
 800d826:	2503      	movs	r5, #3
 800d828:	e7d8      	b.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x480>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d82a:	482d      	ldr	r0, [pc, #180]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d82c:	6902      	ldr	r2, [r0, #16]
 800d82e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800d832:	492d      	ldr	r1, [pc, #180]	; (800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800d834:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800d838:	4313      	orrs	r3, r2
 800d83a:	6103      	str	r3, [r0, #16]
 800d83c:	e7db      	b.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0x49a>
      status = ret;
 800d83e:	462e      	mov	r6, r5
 800d840:	e771      	b.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 800d842:	462e      	mov	r6, r5
 800d844:	e76f      	b.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d846:	2101      	movs	r1, #1
 800d848:	1d20      	adds	r0, r4, #4
 800d84a:	f7ff fc7b 	bl	800d144 <RCCEx_PLL2_Config>
 800d84e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d850:	b9ed      	cbnz	r5, 800d88e <HAL_RCCEx_PeriphCLKConfig+0x532>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d852:	4a23      	ldr	r2, [pc, #140]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d854:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d856:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800d85a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800d85e:	430b      	orrs	r3, r1
 800d860:	6553      	str	r3, [r2, #84]	; 0x54
 800d862:	e008      	b.n	800d876 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d864:	2101      	movs	r1, #1
 800d866:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d86a:	f7ff fcf1 	bl	800d250 <RCCEx_PLL3_Config>
 800d86e:	4605      	mov	r5, r0
      break;
 800d870:	e7ee      	b.n	800d850 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    switch(PeriphClkInit->Usart16ClockSelection)
 800d872:	2601      	movs	r6, #1
 800d874:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d876:	6823      	ldr	r3, [r4, #0]
 800d878:	f013 0f02 	tst.w	r3, #2
 800d87c:	d016      	beq.n	800d8ac <HAL_RCCEx_PeriphCLKConfig+0x550>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800d87e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d880:	2b05      	cmp	r3, #5
 800d882:	d827      	bhi.n	800d8d4 <HAL_RCCEx_PeriphCLKConfig+0x578>
 800d884:	e8df f003 	tbb	[pc, r3]
 800d888:	0a1f050a 	.word	0x0a1f050a
 800d88c:	0a0a      	.short	0x0a0a
 800d88e:	462e      	mov	r6, r5
 800d890:	e7f1      	b.n	800d876 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d892:	2101      	movs	r1, #1
 800d894:	1d20      	adds	r0, r4, #4
 800d896:	f7ff fc55 	bl	800d144 <RCCEx_PLL2_Config>
 800d89a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d89c:	b9ed      	cbnz	r5, 800d8da <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d89e:	4a10      	ldr	r2, [pc, #64]	; (800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d8a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d8a2:	f023 0307 	bic.w	r3, r3, #7
 800d8a6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800d8a8:	430b      	orrs	r3, r1
 800d8aa:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d8ac:	6823      	ldr	r3, [r4, #0]
 800d8ae:	f013 0f04 	tst.w	r3, #4
 800d8b2:	d029      	beq.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800d8b4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800d8b8:	2b05      	cmp	r3, #5
 800d8ba:	d84a      	bhi.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800d8bc:	e8df f003 	tbb	[pc, r3]
 800d8c0:	1b42161b 	.word	0x1b42161b
 800d8c4:	1b1b      	.short	0x1b1b
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d8c6:	2101      	movs	r1, #1
 800d8c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d8cc:	f7ff fcc0 	bl	800d250 <RCCEx_PLL3_Config>
 800d8d0:	4605      	mov	r5, r0
      break;
 800d8d2:	e7e3      	b.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x540>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800d8d4:	2601      	movs	r6, #1
 800d8d6:	4635      	mov	r5, r6
 800d8d8:	e7e8      	b.n	800d8ac <HAL_RCCEx_PeriphCLKConfig+0x550>
 800d8da:	462e      	mov	r6, r5
 800d8dc:	e7e6      	b.n	800d8ac <HAL_RCCEx_PeriphCLKConfig+0x550>
 800d8de:	bf00      	nop
 800d8e0:	58024400 	.word	0x58024400
 800d8e4:	58024800 	.word	0x58024800
 800d8e8:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	1d20      	adds	r0, r4, #4
 800d8f0:	f7ff fc28 	bl	800d144 <RCCEx_PLL2_Config>
 800d8f4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d8f6:	bb7d      	cbnz	r5, 800d958 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d8f8:	4aa9      	ldr	r2, [pc, #676]	; (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800d8fa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d8fc:	f023 0307 	bic.w	r3, r3, #7
 800d900:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800d904:	430b      	orrs	r3, r1
 800d906:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d908:	6823      	ldr	r3, [r4, #0]
 800d90a:	f013 0f20 	tst.w	r3, #32
 800d90e:	d033      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800d910:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800d914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d918:	d04c      	beq.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x658>
 800d91a:	d822      	bhi.n	800d962 <HAL_RCCEx_PeriphCLKConfig+0x606>
 800d91c:	b13b      	cbz	r3, 800d92e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800d91e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d922:	d11b      	bne.n	800d95c <HAL_RCCEx_PeriphCLKConfig+0x600>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d924:	2100      	movs	r1, #0
 800d926:	1d20      	adds	r0, r4, #4
 800d928:	f7ff fc0c 	bl	800d144 <RCCEx_PLL2_Config>
 800d92c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d92e:	2d00      	cmp	r5, #0
 800d930:	d147      	bne.n	800d9c2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d932:	4a9b      	ldr	r2, [pc, #620]	; (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800d934:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d936:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800d93a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800d93e:	430b      	orrs	r3, r1
 800d940:	6553      	str	r3, [r2, #84]	; 0x54
 800d942:	e019      	b.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x61c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d944:	2101      	movs	r1, #1
 800d946:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d94a:	f7ff fc81 	bl	800d250 <RCCEx_PLL3_Config>
 800d94e:	4605      	mov	r5, r0
      break;
 800d950:	e7d1      	b.n	800d8f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800d952:	2601      	movs	r6, #1
 800d954:	4635      	mov	r5, r6
 800d956:	e7d7      	b.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800d958:	462e      	mov	r6, r5
 800d95a:	e7d5      	b.n	800d908 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800d95c:	2601      	movs	r6, #1
 800d95e:	4635      	mov	r5, r6
 800d960:	e00a      	b.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800d962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d966:	d0e2      	beq.n	800d92e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800d968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d96c:	d0df      	beq.n	800d92e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800d96e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d972:	d0dc      	beq.n	800d92e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800d974:	2601      	movs	r6, #1
 800d976:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d97e:	d030      	beq.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800d980:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800d984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d988:	d04b      	beq.n	800da22 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 800d98a:	d81f      	bhi.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x670>
 800d98c:	b13b      	cbz	r3, 800d99e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800d98e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d992:	d118      	bne.n	800d9c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d994:	2100      	movs	r1, #0
 800d996:	1d20      	adds	r0, r4, #4
 800d998:	f7ff fbd4 	bl	800d144 <RCCEx_PLL2_Config>
 800d99c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800d99e:	2d00      	cmp	r5, #0
 800d9a0:	d146      	bne.n	800da30 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d9a2:	4a7f      	ldr	r2, [pc, #508]	; (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800d9a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d9a6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800d9aa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800d9ae:	430b      	orrs	r3, r1
 800d9b0:	6593      	str	r3, [r2, #88]	; 0x58
 800d9b2:	e016      	b.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0x686>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d9b4:	2102      	movs	r1, #2
 800d9b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800d9ba:	f7ff fc49 	bl	800d250 <RCCEx_PLL3_Config>
 800d9be:	4605      	mov	r5, r0
      break;
 800d9c0:	e7b5      	b.n	800d92e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800d9c2:	462e      	mov	r6, r5
 800d9c4:	e7d8      	b.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x61c>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800d9c6:	2601      	movs	r6, #1
 800d9c8:	4635      	mov	r5, r6
 800d9ca:	e00a      	b.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0x686>
 800d9cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9d0:	d0e5      	beq.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800d9d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d9d6:	d0e2      	beq.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800d9d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d9dc:	d0df      	beq.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800d9de:	2601      	movs	r6, #1
 800d9e0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d9e8:	d032      	beq.n	800da50 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800d9ea:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800d9ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9f2:	f000 80a2 	beq.w	800db3a <HAL_RCCEx_PeriphCLKConfig+0x7de>
 800d9f6:	d820      	bhi.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0x6de>
 800d9f8:	b13b      	cbz	r3, 800da0a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800d9fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9fe:	d119      	bne.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800da00:	2100      	movs	r1, #0
 800da02:	1d20      	adds	r0, r4, #4
 800da04:	f7ff fb9e 	bl	800d144 <RCCEx_PLL2_Config>
 800da08:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800da0a:	2d00      	cmp	r5, #0
 800da0c:	f040 809c 	bne.w	800db48 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800da10:	4a63      	ldr	r2, [pc, #396]	; (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800da12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800da14:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800da18:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800da1c:	430b      	orrs	r3, r1
 800da1e:	6593      	str	r3, [r2, #88]	; 0x58
 800da20:	e016      	b.n	800da50 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800da22:	2102      	movs	r1, #2
 800da24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800da28:	f7ff fc12 	bl	800d250 <RCCEx_PLL3_Config>
 800da2c:	4605      	mov	r5, r0
      break;
 800da2e:	e7b6      	b.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800da30:	462e      	mov	r6, r5
 800da32:	e7d6      	b.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0x686>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800da34:	2601      	movs	r6, #1
 800da36:	4635      	mov	r5, r6
 800da38:	e00a      	b.n	800da50 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800da3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da3e:	d0e4      	beq.n	800da0a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800da40:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800da44:	d0e1      	beq.n	800da0a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800da46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800da4a:	d0de      	beq.n	800da0a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800da4c:	2601      	movs	r6, #1
 800da4e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800da50:	6823      	ldr	r3, [r4, #0]
 800da52:	f013 0f08 	tst.w	r3, #8
 800da56:	d00c      	beq.n	800da72 <HAL_RCCEx_PeriphCLKConfig+0x716>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800da58:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800da5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da60:	d074      	beq.n	800db4c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800da62:	4a4f      	ldr	r2, [pc, #316]	; (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800da64:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800da66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800da6a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800da6e:	430b      	orrs	r3, r1
 800da70:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	f013 0f10 	tst.w	r3, #16
 800da78:	d00c      	beq.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x738>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800da7a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800da7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da82:	d06c      	beq.n	800db5e <HAL_RCCEx_PeriphCLKConfig+0x802>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800da84:	4a46      	ldr	r2, [pc, #280]	; (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800da86:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800da88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da8c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800da90:	430b      	orrs	r3, r1
 800da92:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800da94:	6823      	ldr	r3, [r4, #0]
 800da96:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800da9a:	d00b      	beq.n	800dab4 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch(PeriphClkInit->AdcClockSelection)
 800da9c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800daa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daa4:	d073      	beq.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800daa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800daaa:	d066      	beq.n	800db7a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800daac:	2b00      	cmp	r3, #0
 800daae:	d05f      	beq.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800dab0:	2601      	movs	r6, #1
 800dab2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800dab4:	6823      	ldr	r3, [r4, #0]
 800dab6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800daba:	d00c      	beq.n	800dad6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    switch(PeriphClkInit->UsbClockSelection)
 800dabc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800dac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dac4:	d07d      	beq.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x866>
 800dac6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800daca:	d070      	beq.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x852>
 800dacc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dad0:	d068      	beq.n	800dba4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800dad2:	2601      	movs	r6, #1
 800dad4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800dadc:	d008      	beq.n	800daf0 <HAL_RCCEx_PeriphCLKConfig+0x794>
    switch(PeriphClkInit->SdmmcClockSelection)
 800dade:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d077      	beq.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0x878>
 800dae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dae8:	f000 8082 	beq.w	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800daec:	2601      	movs	r6, #1
 800daee:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800daf6:	f040 8083 	bne.w	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dafa:	6823      	ldr	r3, [r4, #0]
 800dafc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800db00:	f000 808b 	beq.w	800dc1a <HAL_RCCEx_PeriphCLKConfig+0x8be>
    switch(PeriphClkInit->RngClockSelection)
 800db04:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800db08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db0c:	f000 80c9 	beq.w	800dca2 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800db10:	f240 8080 	bls.w	800dc14 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800db14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db18:	d003      	beq.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800db1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db1e:	f040 80be 	bne.w	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(ret == HAL_OK)
 800db22:	2d00      	cmp	r5, #0
 800db24:	f040 80c3 	bne.w	800dcae <HAL_RCCEx_PeriphCLKConfig+0x952>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800db28:	4a1d      	ldr	r2, [pc, #116]	; (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800db2a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800db2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db30:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800db34:	430b      	orrs	r3, r1
 800db36:	6553      	str	r3, [r2, #84]	; 0x54
 800db38:	e06f      	b.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0x8be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800db3a:	2102      	movs	r1, #2
 800db3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800db40:	f7ff fb86 	bl	800d250 <RCCEx_PLL3_Config>
 800db44:	4605      	mov	r5, r0
      break;
 800db46:	e760      	b.n	800da0a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800db48:	462e      	mov	r6, r5
 800db4a:	e781      	b.n	800da50 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800db4c:	2102      	movs	r1, #2
 800db4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800db52:	f7ff fb7d 	bl	800d250 <RCCEx_PLL3_Config>
 800db56:	2800      	cmp	r0, #0
 800db58:	d083      	beq.n	800da62 <HAL_RCCEx_PeriphCLKConfig+0x706>
          status = HAL_ERROR;
 800db5a:	2601      	movs	r6, #1
 800db5c:	e781      	b.n	800da62 <HAL_RCCEx_PeriphCLKConfig+0x706>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800db5e:	2102      	movs	r1, #2
 800db60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800db64:	f7ff fb74 	bl	800d250 <RCCEx_PLL3_Config>
 800db68:	2800      	cmp	r0, #0
 800db6a:	d08b      	beq.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x728>
        status = HAL_ERROR;
 800db6c:	2601      	movs	r6, #1
 800db6e:	e789      	b.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x728>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800db70:	2100      	movs	r1, #0
 800db72:	1d20      	adds	r0, r4, #4
 800db74:	f7ff fae6 	bl	800d144 <RCCEx_PLL2_Config>
 800db78:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800db7a:	b97d      	cbnz	r5, 800db9c <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db7c:	4a08      	ldr	r2, [pc, #32]	; (800dba0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800db7e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800db80:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800db84:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800db88:	430b      	orrs	r3, r1
 800db8a:	6593      	str	r3, [r2, #88]	; 0x58
 800db8c:	e792      	b.n	800dab4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800db8e:	2102      	movs	r1, #2
 800db90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800db94:	f7ff fb5c 	bl	800d250 <RCCEx_PLL3_Config>
 800db98:	4605      	mov	r5, r0
      break;
 800db9a:	e7ee      	b.n	800db7a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800db9c:	462e      	mov	r6, r5
 800db9e:	e789      	b.n	800dab4 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800dba0:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dba4:	4a47      	ldr	r2, [pc, #284]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dba6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800dba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbac:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800dbae:	b97d      	cbnz	r5, 800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dbb0:	4a44      	ldr	r2, [pc, #272]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dbb2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dbb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800dbb8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800dbbc:	430b      	orrs	r3, r1
 800dbbe:	6553      	str	r3, [r2, #84]	; 0x54
 800dbc0:	e789      	b.n	800dad6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dbc2:	2101      	movs	r1, #1
 800dbc4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dbc8:	f7ff fb42 	bl	800d250 <RCCEx_PLL3_Config>
 800dbcc:	4605      	mov	r5, r0
      break;
 800dbce:	e7ee      	b.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x852>
 800dbd0:	462e      	mov	r6, r5
 800dbd2:	e780      	b.n	800dad6 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbd4:	4a3b      	ldr	r2, [pc, #236]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dbd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800dbd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800dbde:	b96d      	cbnz	r5, 800dbfc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dbe0:	4a38      	ldr	r2, [pc, #224]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dbe2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800dbe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dbe8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dbea:	430b      	orrs	r3, r1
 800dbec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dbee:	e77f      	b.n	800daf0 <HAL_RCCEx_PeriphCLKConfig+0x794>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800dbf0:	2102      	movs	r1, #2
 800dbf2:	1d20      	adds	r0, r4, #4
 800dbf4:	f7ff faa6 	bl	800d144 <RCCEx_PLL2_Config>
 800dbf8:	4605      	mov	r5, r0
      break;
 800dbfa:	e7f0      	b.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x882>
 800dbfc:	462e      	mov	r6, r5
 800dbfe:	e777      	b.n	800daf0 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800dc00:	2102      	movs	r1, #2
 800dc02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800dc06:	f7ff fb23 	bl	800d250 <RCCEx_PLL3_Config>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	f43f af75 	beq.w	800dafa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      status=HAL_ERROR;
 800dc10:	2601      	movs	r6, #1
 800dc12:	e772      	b.n	800dafa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    switch(PeriphClkInit->RngClockSelection)
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d084      	beq.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800dc18:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dc1a:	6823      	ldr	r3, [r4, #0]
 800dc1c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800dc20:	d006      	beq.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dc22:	4a28      	ldr	r2, [pc, #160]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dc24:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800dc26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc2a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800dc2c:	430b      	orrs	r3, r1
 800dc2e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800dc36:	d006      	beq.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dc38:	4a22      	ldr	r2, [pc, #136]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dc3a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800dc3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dc40:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800dc42:	430b      	orrs	r3, r1
 800dc44:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800dc4c:	d006      	beq.n	800dc5c <HAL_RCCEx_PeriphCLKConfig+0x900>
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800dc4e:	4a1d      	ldr	r2, [pc, #116]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dc50:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800dc52:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800dc56:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800dc58:	430b      	orrs	r3, r1
 800dc5a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800dc62:	d009      	beq.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800dc64:	4b17      	ldr	r3, [pc, #92]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dc66:	691a      	ldr	r2, [r3, #16]
 800dc68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dc6c:	611a      	str	r2, [r3, #16]
 800dc6e:	691a      	ldr	r2, [r3, #16]
 800dc70:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800dc74:	430a      	orrs	r2, r1
 800dc76:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800dc78:	6823      	ldr	r3, [r4, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	db19      	blt.n	800dcb2 <HAL_RCCEx_PeriphCLKConfig+0x956>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800dc84:	d007      	beq.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x93a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dc86:	4a0f      	ldr	r2, [pc, #60]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dc88:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800dc8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800dc8e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800dc92:	430b      	orrs	r3, r1
 800dc94:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 800dc96:	b106      	cbz	r6, 800dc9a <HAL_RCCEx_PeriphCLKConfig+0x93e>
  return HAL_ERROR;
 800dc98:	2601      	movs	r6, #1
}
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 800dc9e:	2601      	movs	r6, #1
 800dca0:	e7bb      	b.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dca2:	4a08      	ldr	r2, [pc, #32]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dca4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800dca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dcaa:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800dcac:	e739      	b.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 800dcae:	462e      	mov	r6, r5
 800dcb0:	e7b3      	b.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0x8be>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dcb2:	4a04      	ldr	r2, [pc, #16]	; (800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 800dcb4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800dcb6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800dcba:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800dcbc:	430b      	orrs	r3, r1
 800dcbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dcc0:	e7dd      	b.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x922>
 800dcc2:	bf00      	nop
 800dcc4:	58024400 	.word	0x58024400

0800dcc8 <SPI_RxISR_8BIT>:
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800dcc8:	6802      	ldr	r2, [r0, #0]
 800dcca:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800dccc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800dcd0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800dcd2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800dcd8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	3b01      	subs	r3, #1
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800dce6:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	b923      	cbnz	r3, 800dcf8 <SPI_RxISR_8BIT+0x30>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800dcee:	6802      	ldr	r2, [r0, #0]
 800dcf0:	6913      	ldr	r3, [r2, #16]
 800dcf2:	f023 0301 	bic.w	r3, r3, #1
 800dcf6:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800dcf8:	4770      	bx	lr

0800dcfa <SPI_RxISR_16BIT>:
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dcfa:	6802      	ldr	r2, [r0, #0]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dcfc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800dcfe:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800dd00:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd02:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800dd04:	3302      	adds	r3, #2
 800dd06:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800dd08:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800dd16:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	b923      	cbnz	r3, 800dd28 <SPI_RxISR_16BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800dd1e:	6802      	ldr	r2, [r0, #0]
 800dd20:	6913      	ldr	r3, [r2, #16]
 800dd22:	f023 0301 	bic.w	r3, r3, #1
 800dd26:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800dd28:	4770      	bx	lr

0800dd2a <SPI_RxISR_32BIT>:
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800dd2a:	6802      	ldr	r2, [r0, #0]
 800dd2c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800dd2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd30:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800dd32:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800dd34:	3304      	adds	r3, #4
 800dd36:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferCount--;
 800dd38:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	3b01      	subs	r3, #1
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800dd46:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	b923      	cbnz	r3, 800dd58 <SPI_RxISR_32BIT+0x2e>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800dd4e:	6802      	ldr	r2, [r0, #0]
 800dd50:	6913      	ldr	r3, [r2, #16]
 800dd52:	f023 0301 	bic.w	r3, r3, #1
 800dd56:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800dd58:	4770      	bx	lr

0800dd5a <SPI_TxISR_8BIT>:
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 800dd5a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800dd5c:	6803      	ldr	r3, [r0, #0]
 800dd5e:	7812      	ldrb	r2, [r2, #0]
 800dd60:	f883 2020 	strb.w	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd64:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800dd66:	3301      	adds	r3, #1
 800dd68:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800dd6a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	3b01      	subs	r3, #1
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800dd78:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	b923      	cbnz	r3, 800dd8a <SPI_TxISR_8BIT+0x30>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800dd80:	6802      	ldr	r2, [r0, #0]
 800dd82:	6913      	ldr	r3, [r2, #16]
 800dd84:	f023 0302 	bic.w	r3, r3, #2
 800dd88:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800dd8a:	4770      	bx	lr

0800dd8c <SPI_TxISR_16BIT>:
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dd8c:	6803      	ldr	r3, [r0, #0]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dd8e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800dd90:	8812      	ldrh	r2, [r2, #0]
 800dd92:	841a      	strh	r2, [r3, #32]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd94:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800dd96:	3302      	adds	r3, #2
 800dd98:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800dd9a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	3b01      	subs	r3, #1
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800dda8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	b923      	cbnz	r3, 800ddba <SPI_TxISR_16BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800ddb0:	6802      	ldr	r2, [r0, #0]
 800ddb2:	6913      	ldr	r3, [r2, #16]
 800ddb4:	f023 0302 	bic.w	r3, r3, #2
 800ddb8:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800ddba:	4770      	bx	lr

0800ddbc <SPI_TxISR_32BIT>:
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ddbc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800ddbe:	6803      	ldr	r3, [r0, #0]
 800ddc0:	6812      	ldr	r2, [r2, #0]
 800ddc2:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddc4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi->TxXferCount--;
 800ddca:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800ddd8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	b923      	cbnz	r3, 800ddea <SPI_TxISR_32BIT+0x2e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800dde0:	6802      	ldr	r2, [r0, #0]
 800dde2:	6913      	ldr	r3, [r2, #16]
 800dde4:	f023 0302 	bic.w	r3, r3, #2
 800dde8:	6113      	str	r3, [r2, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800ddea:	4770      	bx	lr

0800ddec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ddec:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800ddee:	6802      	ldr	r2, [r0, #0]
 800ddf0:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ddf2:	6991      	ldr	r1, [r2, #24]
 800ddf4:	f041 0108 	orr.w	r1, r1, #8
 800ddf8:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ddfa:	6801      	ldr	r1, [r0, #0]
 800ddfc:	698a      	ldr	r2, [r1, #24]
 800ddfe:	f042 0210 	orr.w	r2, r2, #16
 800de02:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de04:	6801      	ldr	r1, [r0, #0]
 800de06:	680a      	ldr	r2, [r1, #0]
 800de08:	f022 0201 	bic.w	r2, r2, #1
 800de0c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800de0e:	6801      	ldr	r1, [r0, #0]
 800de10:	690c      	ldr	r4, [r1, #16]
 800de12:	4a29      	ldr	r2, [pc, #164]	; (800deb8 <SPI_CloseTransfer+0xcc>)
 800de14:	4022      	ands	r2, r4
 800de16:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800de18:	6801      	ldr	r1, [r0, #0]
 800de1a:	688a      	ldr	r2, [r1, #8]
 800de1c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800de20:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800de22:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800de26:	b2d2      	uxtb	r2, r2
 800de28:	2a04      	cmp	r2, #4
 800de2a:	d00d      	beq.n	800de48 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800de2c:	f013 0f20 	tst.w	r3, #32
 800de30:	d00a      	beq.n	800de48 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800de32:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800de36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800de3a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800de3e:	6801      	ldr	r1, [r0, #0]
 800de40:	698a      	ldr	r2, [r1, #24]
 800de42:	f042 0220 	orr.w	r2, r2, #32
 800de46:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800de48:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800de4c:	b2d2      	uxtb	r2, r2
 800de4e:	2a03      	cmp	r2, #3
 800de50:	d00d      	beq.n	800de6e <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800de52:	f013 0f40 	tst.w	r3, #64	; 0x40
 800de56:	d00a      	beq.n	800de6e <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800de58:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800de5c:	f042 0204 	orr.w	r2, r2, #4
 800de60:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800de64:	6801      	ldr	r1, [r0, #0]
 800de66:	698a      	ldr	r2, [r1, #24]
 800de68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de6c:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800de6e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800de72:	d00a      	beq.n	800de8a <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800de74:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800de78:	f042 0201 	orr.w	r2, r2, #1
 800de7c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800de80:	6801      	ldr	r1, [r0, #0]
 800de82:	698a      	ldr	r2, [r1, #24]
 800de84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de88:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800de8a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800de8e:	d00a      	beq.n	800dea6 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800de90:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800de94:	f043 0308 	orr.w	r3, r3, #8
 800de98:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800de9c:	6802      	ldr	r2, [r0, #0]
 800de9e:	6993      	ldr	r3, [r2, #24]
 800dea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dea4:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800deac:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800deb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	fffffc90 	.word	0xfffffc90

0800debc <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800debc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800debe:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dec0:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dec2:	3008      	adds	r0, #8
 800dec4:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800dec6:	fb03 0000 	mla	r0, r3, r0, r0
 800deca:	4770      	bx	lr

0800decc <SPI_WaitOnFlagUntilTimeout>:
{
 800decc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ded0:	4607      	mov	r7, r0
 800ded2:	460e      	mov	r6, r1
 800ded4:	4615      	mov	r5, r2
 800ded6:	4698      	mov	r8, r3
 800ded8:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800deda:	e000      	b.n	800dede <SPI_WaitOnFlagUntilTimeout+0x12>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dedc:	b1c4      	cbz	r4, 800df10 <SPI_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	695b      	ldr	r3, [r3, #20]
 800dee2:	ea36 0303 	bics.w	r3, r6, r3
 800dee6:	bf0c      	ite	eq
 800dee8:	f04f 0c01 	moveq.w	ip, #1
 800deec:	f04f 0c00 	movne.w	ip, #0
 800def0:	45ac      	cmp	ip, r5
 800def2:	d10a      	bne.n	800df0a <SPI_WaitOnFlagUntilTimeout+0x3e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800def4:	f7fc fa14 	bl	800a320 <HAL_GetTick>
 800def8:	eba0 0008 	sub.w	r0, r0, r8
 800defc:	42a0      	cmp	r0, r4
 800defe:	d3ed      	bcc.n	800dedc <SPI_WaitOnFlagUntilTimeout+0x10>
 800df00:	f1b4 3fff 	cmp.w	r4, #4294967295
 800df04:	d0ea      	beq.n	800dedc <SPI_WaitOnFlagUntilTimeout+0x10>
      return HAL_TIMEOUT;
 800df06:	2003      	movs	r0, #3
 800df08:	e000      	b.n	800df0c <SPI_WaitOnFlagUntilTimeout+0x40>
  return HAL_OK;
 800df0a:	2000      	movs	r0, #0
}
 800df0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_TIMEOUT;
 800df10:	2003      	movs	r0, #3
 800df12:	e7fb      	b.n	800df0c <SPI_WaitOnFlagUntilTimeout+0x40>

0800df14 <HAL_SPI_Init>:
  if (hspi == NULL)
 800df14:	2800      	cmp	r0, #0
 800df16:	f000 80a3 	beq.w	800e060 <HAL_SPI_Init+0x14c>
{
 800df1a:	b570      	push	{r4, r5, r6, lr}
 800df1c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df1e:	2300      	movs	r3, #0
 800df20:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df22:	6805      	ldr	r5, [r0, #0]
 800df24:	4b52      	ldr	r3, [pc, #328]	; (800e070 <HAL_SPI_Init+0x15c>)
 800df26:	4e53      	ldr	r6, [pc, #332]	; (800e074 <HAL_SPI_Init+0x160>)
 800df28:	429d      	cmp	r5, r3
 800df2a:	bf18      	it	ne
 800df2c:	42b5      	cmpne	r5, r6
 800df2e:	bf14      	ite	ne
 800df30:	2601      	movne	r6, #1
 800df32:	2600      	moveq	r6, #0
 800df34:	d007      	beq.n	800df46 <HAL_SPI_Init+0x32>
 800df36:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800df3a:	429d      	cmp	r5, r3
 800df3c:	d003      	beq.n	800df46 <HAL_SPI_Init+0x32>
 800df3e:	68c3      	ldr	r3, [r0, #12]
 800df40:	2b0f      	cmp	r3, #15
 800df42:	f200 808f 	bhi.w	800e064 <HAL_SPI_Init+0x150>
  packet_length = SPI_GetPacketSize(hspi);
 800df46:	4620      	mov	r0, r4
 800df48:	f7ff ffb8 	bl	800debc <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df4c:	b12e      	cbz	r6, 800df5a <HAL_SPI_Init+0x46>
 800df4e:	4b4a      	ldr	r3, [pc, #296]	; (800e078 <HAL_SPI_Init+0x164>)
 800df50:	429d      	cmp	r5, r3
 800df52:	d002      	beq.n	800df5a <HAL_SPI_Init+0x46>
 800df54:	2808      	cmp	r0, #8
 800df56:	f200 8087 	bhi.w	800e068 <HAL_SPI_Init+0x154>
 800df5a:	4a45      	ldr	r2, [pc, #276]	; (800e070 <HAL_SPI_Init+0x15c>)
 800df5c:	4b45      	ldr	r3, [pc, #276]	; (800e074 <HAL_SPI_Init+0x160>)
 800df5e:	429d      	cmp	r5, r3
 800df60:	bf18      	it	ne
 800df62:	4295      	cmpne	r5, r2
 800df64:	d003      	beq.n	800df6e <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df6a:	429d      	cmp	r5, r3
 800df6c:	d101      	bne.n	800df72 <HAL_SPI_Init+0x5e>
 800df6e:	2810      	cmp	r0, #16
 800df70:	d87c      	bhi.n	800e06c <HAL_SPI_Init+0x158>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800df72:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800df76:	2b00      	cmp	r3, #0
 800df78:	d059      	beq.n	800e02e <HAL_SPI_Init+0x11a>
  hspi->State = HAL_SPI_STATE_BUSY;
 800df7a:	2302      	movs	r3, #2
 800df7c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800df80:	6822      	ldr	r2, [r4, #0]
 800df82:	6813      	ldr	r3, [r2, #0]
 800df84:	f023 0301 	bic.w	r3, r3, #1
 800df88:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800df8a:	6821      	ldr	r1, [r4, #0]
 800df8c:	688a      	ldr	r2, [r1, #8]
 800df8e:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800df92:	69a3      	ldr	r3, [r4, #24]
 800df94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800df98:	d04f      	beq.n	800e03a <HAL_SPI_Init+0x126>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800df9a:	69e3      	ldr	r3, [r4, #28]
 800df9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800df9e:	430b      	orrs	r3, r1
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	68e1      	ldr	r1, [r4, #12]
 800dfa8:	6822      	ldr	r2, [r4, #0]
 800dfaa:	430b      	orrs	r3, r1
 800dfac:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dfae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	69a2      	ldr	r2, [r4, #24]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	6922      	ldr	r2, [r4, #16]
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	6962      	ldr	r2, [r4, #20]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	6a22      	ldr	r2, [r4, #32]
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	6862      	ldr	r2, [r4, #4]
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	68a2      	ldr	r2, [r4, #8]
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dfda:	6822      	ldr	r2, [r4, #0]
 800dfdc:	430b      	orrs	r3, r1
 800dfde:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dfe0:	6863      	ldr	r3, [r4, #4]
 800dfe2:	b96b      	cbnz	r3, 800e000 <HAL_SPI_Init+0xec>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dfe4:	6822      	ldr	r2, [r4, #0]
 800dfe6:	6893      	ldr	r3, [r2, #8]
 800dfe8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800dfec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dff0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dff2:	6822      	ldr	r2, [r4, #0]
 800dff4:	6893      	ldr	r3, [r2, #8]
 800dff6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800dffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dffe:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e000:	6822      	ldr	r2, [r4, #0]
 800e002:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e004:	f023 0301 	bic.w	r3, r3, #1
 800e008:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e00a:	6863      	ldr	r3, [r4, #4]
 800e00c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800e010:	d006      	beq.n	800e020 <HAL_SPI_Init+0x10c>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e012:	6822      	ldr	r2, [r4, #0]
 800e014:	68d3      	ldr	r3, [r2, #12]
 800e016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e01a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e01c:	430b      	orrs	r3, r1
 800e01e:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e020:	2000      	movs	r0, #0
 800e022:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e026:	2301      	movs	r3, #1
 800e028:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800e02c:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800e02e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800e032:	4620      	mov	r0, r4
 800e034:	f7f5 f878 	bl	8003128 <HAL_SPI_MspInit>
 800e038:	e79f      	b.n	800df7a <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e03a:	6863      	ldr	r3, [r4, #4]
 800e03c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e040:	d006      	beq.n	800e050 <HAL_SPI_Init+0x13c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e042:	2b00      	cmp	r3, #0
 800e044:	d1a9      	bne.n	800df9a <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e04c:	d1a5      	bne.n	800df9a <HAL_SPI_Init+0x86>
 800e04e:	e002      	b.n	800e056 <HAL_SPI_Init+0x142>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e050:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e052:	2800      	cmp	r0, #0
 800e054:	d1f5      	bne.n	800e042 <HAL_SPI_Init+0x12e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e056:	680b      	ldr	r3, [r1, #0]
 800e058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e05c:	600b      	str	r3, [r1, #0]
 800e05e:	e79c      	b.n	800df9a <HAL_SPI_Init+0x86>
    return HAL_ERROR;
 800e060:	2001      	movs	r0, #1
}
 800e062:	4770      	bx	lr
    return HAL_ERROR;
 800e064:	2001      	movs	r0, #1
 800e066:	e7e1      	b.n	800e02c <HAL_SPI_Init+0x118>
    return HAL_ERROR;
 800e068:	2001      	movs	r0, #1
 800e06a:	e7df      	b.n	800e02c <HAL_SPI_Init+0x118>
 800e06c:	2001      	movs	r0, #1
 800e06e:	e7dd      	b.n	800e02c <HAL_SPI_Init+0x118>
 800e070:	40013000 	.word	0x40013000
 800e074:	40003800 	.word	0x40003800
 800e078:	40003c00 	.word	0x40003c00

0800e07c <HAL_SPI_DeInit>:
  if (hspi == NULL)
 800e07c:	b198      	cbz	r0, 800e0a6 <HAL_SPI_DeInit+0x2a>
{
 800e07e:	b510      	push	{r4, lr}
 800e080:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 800e082:	2302      	movs	r3, #2
 800e084:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800e088:	6802      	ldr	r2, [r0, #0]
 800e08a:	6813      	ldr	r3, [r2, #0]
 800e08c:	f023 0301 	bic.w	r3, r3, #1
 800e090:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800e092:	f7f5 f8b5 	bl	8003200 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e096:	2000      	movs	r0, #0
 800e098:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 800e09c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  __HAL_UNLOCK(hspi);
 800e0a0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800e0a4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800e0a6:	2001      	movs	r0, #1
}
 800e0a8:	4770      	bx	lr

0800e0aa <HAL_SPI_TransmitReceive>:
{
 800e0aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	461d      	mov	r5, r3
 800e0b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e0b4:	f8d0 a000 	ldr.w	sl, [r0]
  __HAL_LOCK(hspi);
 800e0b8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	f000 8179 	beq.w	800e3b4 <HAL_SPI_TransmitReceive+0x30a>
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	4688      	mov	r8, r1
 800e0c6:	4691      	mov	r9, r2
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800e0ce:	f7fc f927 	bl	800a320 <HAL_GetTick>
 800e0d2:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 800e0d4:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800e0d8:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800e0da:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d007      	beq.n	800e0f0 <HAL_SPI_TransmitReceive+0x46>
 800e0e0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800e0e4:	d13d      	bne.n	800e162 <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e0e6:	68a2      	ldr	r2, [r4, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800e0e8:	2a00      	cmp	r2, #0
 800e0ea:	d13a      	bne.n	800e162 <HAL_SPI_TransmitReceive+0xb8>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e0ec:	2b04      	cmp	r3, #4
 800e0ee:	d138      	bne.n	800e162 <HAL_SPI_TransmitReceive+0xb8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e0f0:	f1b9 0f00 	cmp.w	r9, #0
 800e0f4:	bf18      	it	ne
 800e0f6:	f1b8 0f00 	cmpne.w	r8, #0
 800e0fa:	d039      	beq.n	800e170 <HAL_SPI_TransmitReceive+0xc6>
 800e0fc:	2d00      	cmp	r5, #0
 800e0fe:	d037      	beq.n	800e170 <HAL_SPI_TransmitReceive+0xc6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e100:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b04      	cmp	r3, #4
 800e108:	d002      	beq.n	800e110 <HAL_SPI_TransmitReceive+0x66>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e10a:	2305      	movs	r3, #5
 800e10c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e110:	2300      	movs	r3, #0
 800e112:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e116:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e11a:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e11e:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e122:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e126:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e12a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 800e12e:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e130:	6763      	str	r3, [r4, #116]	; 0x74
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e132:	6822      	ldr	r2, [r4, #0]
 800e134:	6851      	ldr	r1, [r2, #4]
 800e136:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800e13a:	400b      	ands	r3, r1
 800e13c:	432b      	orrs	r3, r5
 800e13e:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 800e140:	6822      	ldr	r2, [r4, #0]
 800e142:	6813      	ldr	r3, [r2, #0]
 800e144:	f043 0301 	orr.w	r3, r3, #1
 800e148:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e14a:	6863      	ldr	r3, [r4, #4]
 800e14c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e150:	d013      	beq.n	800e17a <HAL_SPI_TransmitReceive+0xd0>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e152:	68e3      	ldr	r3, [r4, #12]
 800e154:	2b0f      	cmp	r3, #15
 800e156:	d868      	bhi.n	800e22a <HAL_SPI_TransmitReceive+0x180>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e158:	2b07      	cmp	r3, #7
 800e15a:	f200 80bb 	bhi.w	800e2d4 <HAL_SPI_TransmitReceive+0x22a>
  initial_RxXferCount = Size;
 800e15e:	46a8      	mov	r8, r5
 800e160:	e0c4      	b.n	800e2ec <HAL_SPI_TransmitReceive+0x242>
    __HAL_UNLOCK(hspi);
 800e162:	2300      	movs	r3, #0
 800e164:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e168:	2002      	movs	r0, #2
}
 800e16a:	b002      	add	sp, #8
 800e16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800e170:	2300      	movs	r3, #0
 800e172:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e176:	2001      	movs	r0, #1
 800e178:	e7f7      	b.n	800e16a <HAL_SPI_TransmitReceive+0xc0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e17a:	6822      	ldr	r2, [r4, #0]
 800e17c:	6813      	ldr	r3, [r2, #0]
 800e17e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e182:	6013      	str	r3, [r2, #0]
 800e184:	e7e5      	b.n	800e152 <HAL_SPI_TransmitReceive+0xa8>
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e186:	6823      	ldr	r3, [r4, #0]
 800e188:	6959      	ldr	r1, [r3, #20]
 800e18a:	f248 0208 	movw	r2, #32776	; 0x8008
 800e18e:	4211      	tst	r1, r2
 800e190:	d013      	beq.n	800e1ba <HAL_SPI_TransmitReceive+0x110>
 800e192:	f1b8 0f00 	cmp.w	r8, #0
 800e196:	d010      	beq.n	800e1ba <HAL_SPI_TransmitReceive+0x110>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e198:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e19c:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e19e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1a0:	3304      	adds	r3, #4
 800e1a2:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 800e1a4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e1b2:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800e1b6:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1ba:	f7fc f8b1 	bl	800a320 <HAL_GetTick>
 800e1be:	1bc0      	subs	r0, r0, r7
 800e1c0:	42b0      	cmp	r0, r6
 800e1c2:	d302      	bcc.n	800e1ca <HAL_SPI_TransmitReceive+0x120>
 800e1c4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e1c8:	d11e      	bne.n	800e208 <HAL_SPI_TransmitReceive+0x15e>
 800e1ca:	b1ee      	cbz	r6, 800e208 <HAL_SPI_TransmitReceive+0x15e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e1cc:	ea45 0308 	orr.w	r3, r5, r8
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	f000 80d2 	beq.w	800e37c <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e1d8:	6823      	ldr	r3, [r4, #0]
 800e1da:	695a      	ldr	r2, [r3, #20]
 800e1dc:	f012 0f02 	tst.w	r2, #2
 800e1e0:	d0d1      	beq.n	800e186 <HAL_SPI_TransmitReceive+0xdc>
 800e1e2:	2d00      	cmp	r5, #0
 800e1e4:	d0cf      	beq.n	800e186 <HAL_SPI_TransmitReceive+0xdc>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e1e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e1e8:	6812      	ldr	r2, [r2, #0]
 800e1ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e1ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e1ee:	3304      	adds	r3, #4
 800e1f0:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 800e1f2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e200:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800e204:	b2ad      	uxth	r5, r5
 800e206:	e7be      	b.n	800e186 <HAL_SPI_TransmitReceive+0xdc>
        SPI_CloseTransfer(hspi);
 800e208:	4620      	mov	r0, r4
 800e20a:	f7ff fdef 	bl	800ddec <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800e20e:	2300      	movs	r3, #0
 800e210:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e214:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e21c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e220:	2301      	movs	r3, #1
 800e222:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800e226:	2003      	movs	r0, #3
 800e228:	e79f      	b.n	800e16a <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800e22a:	46a8      	mov	r8, r5
 800e22c:	e7ce      	b.n	800e1cc <HAL_SPI_TransmitReceive+0x122>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e22e:	f7fc f877 	bl	800a320 <HAL_GetTick>
 800e232:	1bc0      	subs	r0, r0, r7
 800e234:	42b0      	cmp	r0, r6
 800e236:	d302      	bcc.n	800e23e <HAL_SPI_TransmitReceive+0x194>
 800e238:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e23c:	d139      	bne.n	800e2b2 <HAL_SPI_TransmitReceive+0x208>
 800e23e:	2e00      	cmp	r6, #0
 800e240:	d037      	beq.n	800e2b2 <HAL_SPI_TransmitReceive+0x208>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e242:	ea45 0308 	orr.w	r3, r5, r8
 800e246:	b29b      	uxth	r3, r3
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f000 8097 	beq.w	800e37c <HAL_SPI_TransmitReceive+0x2d2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e24e:	6823      	ldr	r3, [r4, #0]
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	f013 0f02 	tst.w	r3, #2
 800e256:	d011      	beq.n	800e27c <HAL_SPI_TransmitReceive+0x1d2>
 800e258:	b185      	cbz	r5, 800e27c <HAL_SPI_TransmitReceive+0x1d2>
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e25a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e25c:	881b      	ldrh	r3, [r3, #0]
 800e25e:	f8aa 3020 	strh.w	r3, [sl, #32]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e262:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e264:	3302      	adds	r3, #2
 800e266:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800e268:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	3b01      	subs	r3, #1
 800e270:	b29b      	uxth	r3, r3
 800e272:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e276:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800e27a:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800e27c:	6823      	ldr	r3, [r4, #0]
 800e27e:	695b      	ldr	r3, [r3, #20]
 800e280:	f013 0f01 	tst.w	r3, #1
 800e284:	d0d3      	beq.n	800e22e <HAL_SPI_TransmitReceive+0x184>
 800e286:	f1b8 0f00 	cmp.w	r8, #0
 800e28a:	d0d0      	beq.n	800e22e <HAL_SPI_TransmitReceive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e28c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e28e:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 800e292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e296:	3302      	adds	r3, #2
 800e298:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e29a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e2a8:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800e2ac:	fa1f f888 	uxth.w	r8, r8
 800e2b0:	e7bd      	b.n	800e22e <HAL_SPI_TransmitReceive+0x184>
        SPI_CloseTransfer(hspi);
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f7ff fd9a 	bl	800ddec <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2be:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e2c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800e2d0:	2003      	movs	r0, #3
 800e2d2:	e74a      	b.n	800e16a <HAL_SPI_TransmitReceive+0xc0>
  initial_RxXferCount = Size;
 800e2d4:	46a8      	mov	r8, r5
 800e2d6:	e7b4      	b.n	800e242 <HAL_SPI_TransmitReceive+0x198>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2d8:	f7fc f822 	bl	800a320 <HAL_GetTick>
 800e2dc:	1bc0      	subs	r0, r0, r7
 800e2de:	42b0      	cmp	r0, r6
 800e2e0:	d302      	bcc.n	800e2e8 <HAL_SPI_TransmitReceive+0x23e>
 800e2e2:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e2e6:	d138      	bne.n	800e35a <HAL_SPI_TransmitReceive+0x2b0>
 800e2e8:	2e00      	cmp	r6, #0
 800e2ea:	d036      	beq.n	800e35a <HAL_SPI_TransmitReceive+0x2b0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e2ec:	ea45 0308 	orr.w	r3, r5, r8
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d042      	beq.n	800e37c <HAL_SPI_TransmitReceive+0x2d2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e2f6:	6823      	ldr	r3, [r4, #0]
 800e2f8:	695a      	ldr	r2, [r3, #20]
 800e2fa:	f012 0f02 	tst.w	r2, #2
 800e2fe:	d011      	beq.n	800e324 <HAL_SPI_TransmitReceive+0x27a>
 800e300:	b185      	cbz	r5, 800e324 <HAL_SPI_TransmitReceive+0x27a>
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e302:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e304:	7812      	ldrb	r2, [r2, #0]
 800e306:	f883 2020 	strb.w	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e30a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e30c:	3301      	adds	r3, #1
 800e30e:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 800e310:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e314:	b29b      	uxth	r3, r3
 800e316:	3b01      	subs	r3, #1
 800e318:	b29b      	uxth	r3, r3
 800e31a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e31e:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
 800e322:	b2ad      	uxth	r5, r5
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800e324:	6823      	ldr	r3, [r4, #0]
 800e326:	695a      	ldr	r2, [r3, #20]
 800e328:	f012 0f01 	tst.w	r2, #1
 800e32c:	d0d4      	beq.n	800e2d8 <HAL_SPI_TransmitReceive+0x22e>
 800e32e:	f1b8 0f00 	cmp.w	r8, #0
 800e332:	d0d1      	beq.n	800e2d8 <HAL_SPI_TransmitReceive+0x22e>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e334:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e33a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e33c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e33e:	3301      	adds	r3, #1
 800e340:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e342:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e346:	b29b      	uxth	r3, r3
 800e348:	3b01      	subs	r3, #1
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e350:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 800e354:	fa1f f888 	uxth.w	r8, r8
 800e358:	e7be      	b.n	800e2d8 <HAL_SPI_TransmitReceive+0x22e>
        SPI_CloseTransfer(hspi);
 800e35a:	4620      	mov	r0, r4
 800e35c:	f7ff fd46 	bl	800ddec <SPI_CloseTransfer>
        __HAL_UNLOCK(hspi);
 800e360:	2300      	movs	r3, #0
 800e362:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e366:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e36a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e36e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e372:	2301      	movs	r3, #1
 800e374:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_TIMEOUT;
 800e378:	2003      	movs	r0, #3
 800e37a:	e6f6      	b.n	800e16a <HAL_SPI_TransmitReceive+0xc0>
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e37c:	9600      	str	r6, [sp, #0]
 800e37e:	463b      	mov	r3, r7
 800e380:	2200      	movs	r2, #0
 800e382:	2108      	movs	r1, #8
 800e384:	4620      	mov	r0, r4
 800e386:	f7ff fda1 	bl	800decc <SPI_WaitOnFlagUntilTimeout>
 800e38a:	b128      	cbz	r0, 800e398 <HAL_SPI_TransmitReceive+0x2ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e38c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e390:	f043 0320 	orr.w	r3, r3, #32
 800e394:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SPI_CloseTransfer(hspi);
 800e398:	4620      	mov	r0, r4
 800e39a:	f7ff fd27 	bl	800ddec <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3aa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e3ae:	b91b      	cbnz	r3, 800e3b8 <HAL_SPI_TransmitReceive+0x30e>
  return errorcode;
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	e6da      	b.n	800e16a <HAL_SPI_TransmitReceive+0xc0>
  __HAL_LOCK(hspi);
 800e3b4:	2002      	movs	r0, #2
 800e3b6:	e6d8      	b.n	800e16a <HAL_SPI_TransmitReceive+0xc0>
    return HAL_ERROR;
 800e3b8:	2001      	movs	r0, #1
 800e3ba:	e6d6      	b.n	800e16a <HAL_SPI_TransmitReceive+0xc0>

0800e3bc <HAL_SPI_Receive>:
{
 800e3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c0:	b082      	sub	sp, #8
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	468a      	mov	sl, r1
 800e3c6:	4691      	mov	r9, r2
 800e3c8:	461d      	mov	r5, r3
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e3ca:	f8d0 8000 	ldr.w	r8, [r0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e3ce:	6843      	ldr	r3, [r0, #4]
 800e3d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e3d4:	d042      	beq.n	800e45c <HAL_SPI_Receive+0xa0>
  __HAL_LOCK(hspi);
 800e3d6:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	f000 810c 	beq.w	800e5f8 <HAL_SPI_Receive+0x23c>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800e3e6:	f7fb ff9b 	bl	800a320 <HAL_GetTick>
 800e3ea:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800e3ec:	f894 6081 	ldrb.w	r6, [r4, #129]	; 0x81
 800e3f0:	b2f6      	uxtb	r6, r6
 800e3f2:	2e01      	cmp	r6, #1
 800e3f4:	d13f      	bne.n	800e476 <HAL_SPI_Receive+0xba>
  if ((pData == NULL) || (Size == 0UL))
 800e3f6:	f1b9 0f00 	cmp.w	r9, #0
 800e3fa:	bf18      	it	ne
 800e3fc:	f1ba 0f00 	cmpne.w	sl, #0
 800e400:	d041      	beq.n	800e486 <HAL_SPI_Receive+0xca>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e402:	2304      	movs	r3, #4
 800e404:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e408:	2300      	movs	r3, #0
 800e40a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e40e:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e412:	f8a4 9068 	strh.w	r9, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e416:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800e41a:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e41c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e420:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e424:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e426:	6763      	str	r3, [r4, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e428:	68a3      	ldr	r3, [r4, #8]
 800e42a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e42e:	d02e      	beq.n	800e48e <HAL_SPI_Receive+0xd2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	6859      	ldr	r1, [r3, #4]
 800e434:	4a71      	ldr	r2, [pc, #452]	; (800e5fc <HAL_SPI_Receive+0x240>)
 800e436:	400a      	ands	r2, r1
 800e438:	ea49 0202 	orr.w	r2, r9, r2
 800e43c:	605a      	str	r2, [r3, #4]
  __HAL_SPI_ENABLE(hspi);
 800e43e:	6822      	ldr	r2, [r4, #0]
 800e440:	6813      	ldr	r3, [r2, #0]
 800e442:	f043 0301 	orr.w	r3, r3, #1
 800e446:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e448:	6863      	ldr	r3, [r4, #4]
 800e44a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e44e:	d024      	beq.n	800e49a <HAL_SPI_Receive+0xde>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e450:	68e3      	ldr	r3, [r4, #12]
 800e452:	2b0f      	cmp	r3, #15
 800e454:	d830      	bhi.n	800e4b8 <HAL_SPI_Receive+0xfc>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e456:	2b07      	cmp	r3, #7
 800e458:	d862      	bhi.n	800e520 <HAL_SPI_Receive+0x164>
 800e45a:	e094      	b.n	800e586 <HAL_SPI_Receive+0x1ca>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e45c:	6883      	ldr	r3, [r0, #8]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1b9      	bne.n	800e3d6 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e462:	2304      	movs	r3, #4
 800e464:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e468:	9500      	str	r5, [sp, #0]
 800e46a:	4613      	mov	r3, r2
 800e46c:	460a      	mov	r2, r1
 800e46e:	f7ff fe1c 	bl	800e0aa <HAL_SPI_TransmitReceive>
 800e472:	4606      	mov	r6, r0
 800e474:	e003      	b.n	800e47e <HAL_SPI_Receive+0xc2>
    __HAL_UNLOCK(hspi);
 800e476:	2300      	movs	r3, #0
 800e478:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e47c:	2602      	movs	r6, #2
}
 800e47e:	4630      	mov	r0, r6
 800e480:	b002      	add	sp, #8
 800e482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800e486:	2300      	movs	r3, #0
 800e488:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800e48c:	e7f7      	b.n	800e47e <HAL_SPI_Receive+0xc2>
    SPI_1LINE_RX(hspi);
 800e48e:	6822      	ldr	r2, [r4, #0]
 800e490:	6813      	ldr	r3, [r2, #0]
 800e492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e496:	6013      	str	r3, [r2, #0]
 800e498:	e7ca      	b.n	800e430 <HAL_SPI_Receive+0x74>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e49a:	6822      	ldr	r2, [r4, #0]
 800e49c:	6813      	ldr	r3, [r2, #0]
 800e49e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e4a2:	6013      	str	r3, [r2, #0]
 800e4a4:	e7d4      	b.n	800e450 <HAL_SPI_Receive+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4a6:	f7fb ff3b 	bl	800a320 <HAL_GetTick>
 800e4aa:	1bc0      	subs	r0, r0, r7
 800e4ac:	42a8      	cmp	r0, r5
 800e4ae:	d302      	bcc.n	800e4b6 <HAL_SPI_Receive+0xfa>
 800e4b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e4b4:	d11a      	bne.n	800e4ec <HAL_SPI_Receive+0x130>
 800e4b6:	b1cd      	cbz	r5, 800e4ec <HAL_SPI_Receive+0x130>
    while (hspi->RxXferCount > 0UL)
 800e4b8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	f000 808a 	beq.w	800e5d8 <HAL_SPI_Receive+0x21c>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e4c4:	6823      	ldr	r3, [r4, #0]
 800e4c6:	6959      	ldr	r1, [r3, #20]
 800e4c8:	f248 0208 	movw	r2, #32776	; 0x8008
 800e4cc:	4211      	tst	r1, r2
 800e4ce:	d0ea      	beq.n	800e4a6 <HAL_SPI_Receive+0xea>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d4:	6013      	str	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4d8:	3304      	adds	r3, #4
 800e4da:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e4dc:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800e4e0:	b292      	uxth	r2, r2
 800e4e2:	3a01      	subs	r2, #1
 800e4e4:	b292      	uxth	r2, r2
 800e4e6:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800e4ea:	e7e5      	b.n	800e4b8 <HAL_SPI_Receive+0xfc>
          SPI_CloseTransfer(hspi);
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f7ff fc7d 	bl	800ddec <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e4fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e500:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e504:	2301      	movs	r3, #1
 800e506:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800e50a:	2603      	movs	r6, #3
 800e50c:	e7b7      	b.n	800e47e <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e50e:	f7fb ff07 	bl	800a320 <HAL_GetTick>
 800e512:	1bc0      	subs	r0, r0, r7
 800e514:	42a8      	cmp	r0, r5
 800e516:	d302      	bcc.n	800e51e <HAL_SPI_Receive+0x162>
 800e518:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e51c:	d119      	bne.n	800e552 <HAL_SPI_Receive+0x196>
 800e51e:	b1c5      	cbz	r5, 800e552 <HAL_SPI_Receive+0x196>
    while (hspi->RxXferCount > 0UL)
 800e520:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e524:	b29b      	uxth	r3, r3
 800e526:	2b00      	cmp	r3, #0
 800e528:	d056      	beq.n	800e5d8 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	695b      	ldr	r3, [r3, #20]
 800e52e:	f013 0f01 	tst.w	r3, #1
 800e532:	d0ec      	beq.n	800e50e <HAL_SPI_Receive+0x152>
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e534:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e536:	f8b8 2030 	ldrh.w	r2, [r8, #48]	; 0x30
 800e53a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e53c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e53e:	3302      	adds	r3, #2
 800e540:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e542:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e546:	b29b      	uxth	r3, r3
 800e548:	3b01      	subs	r3, #1
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800e550:	e7e6      	b.n	800e520 <HAL_SPI_Receive+0x164>
          SPI_CloseTransfer(hspi);
 800e552:	4620      	mov	r0, r4
 800e554:	f7ff fc4a 	bl	800ddec <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800e558:	2300      	movs	r3, #0
 800e55a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e55e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e566:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e56a:	2301      	movs	r3, #1
 800e56c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800e570:	2603      	movs	r6, #3
 800e572:	e784      	b.n	800e47e <HAL_SPI_Receive+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e574:	f7fb fed4 	bl	800a320 <HAL_GetTick>
 800e578:	1bc0      	subs	r0, r0, r7
 800e57a:	42a8      	cmp	r0, r5
 800e57c:	d302      	bcc.n	800e584 <HAL_SPI_Receive+0x1c8>
 800e57e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e582:	d118      	bne.n	800e5b6 <HAL_SPI_Receive+0x1fa>
 800e584:	b1bd      	cbz	r5, 800e5b6 <HAL_SPI_Receive+0x1fa>
    while (hspi->RxXferCount > 0UL)
 800e586:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	b323      	cbz	r3, 800e5d8 <HAL_SPI_Receive+0x21c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e58e:	6823      	ldr	r3, [r4, #0]
 800e590:	695a      	ldr	r2, [r3, #20]
 800e592:	f012 0f01 	tst.w	r2, #1
 800e596:	d0ed      	beq.n	800e574 <HAL_SPI_Receive+0x1b8>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e598:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e59a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e59e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e5a6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800e5b4:	e7e7      	b.n	800e586 <HAL_SPI_Receive+0x1ca>
          SPI_CloseTransfer(hspi);
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f7ff fc18 	bl	800ddec <SPI_CloseTransfer>
          __HAL_UNLOCK(hspi);
 800e5bc:	2300      	movs	r3, #0
 800e5be:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e5c2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e5c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
          return HAL_TIMEOUT;
 800e5d4:	2603      	movs	r6, #3
 800e5d6:	e752      	b.n	800e47e <HAL_SPI_Receive+0xc2>
  SPI_CloseTransfer(hspi);
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f7ff fc07 	bl	800ddec <SPI_CloseTransfer>
  __HAL_UNLOCK(hspi);
 800e5de:	2300      	movs	r3, #0
 800e5e0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e5ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f47f af45 	bne.w	800e47e <HAL_SPI_Receive+0xc2>
  return errorcode;
 800e5f4:	2600      	movs	r6, #0
 800e5f6:	e742      	b.n	800e47e <HAL_SPI_Receive+0xc2>
  __HAL_LOCK(hspi);
 800e5f8:	2602      	movs	r6, #2
 800e5fa:	e740      	b.n	800e47e <HAL_SPI_Receive+0xc2>
 800e5fc:	ffff0000 	.word	0xffff0000

0800e600 <HAL_SPI_Transmit_IT>:
  __HAL_LOCK(hspi);
 800e600:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800e604:	2b01      	cmp	r3, #1
 800e606:	d060      	beq.n	800e6ca <HAL_SPI_Transmit_IT+0xca>
 800e608:	2301      	movs	r3, #1
 800e60a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if ((pData == NULL) || (Size == 0UL))
 800e60e:	2a00      	cmp	r2, #0
 800e610:	bf18      	it	ne
 800e612:	2900      	cmpne	r1, #0
 800e614:	d03b      	beq.n	800e68e <HAL_SPI_Transmit_IT+0x8e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800e616:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d13b      	bne.n	800e698 <HAL_SPI_Transmit_IT+0x98>
{
 800e620:	b410      	push	{r4}
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e622:	2303      	movs	r3, #3
 800e624:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e628:	2300      	movs	r3, #0
 800e62a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e62e:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e630:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e634:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = NULL;
 800e638:	6643      	str	r3, [r0, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e63a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e63e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800e642:	6703      	str	r3, [r0, #112]	; 0x70
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e644:	68c3      	ldr	r3, [r0, #12]
 800e646:	2b0f      	cmp	r3, #15
 800e648:	d92b      	bls.n	800e6a2 <HAL_SPI_Transmit_IT+0xa2>
    hspi->TxISR = SPI_TxISR_32BIT;
 800e64a:	4b21      	ldr	r3, [pc, #132]	; (800e6d0 <HAL_SPI_Transmit_IT+0xd0>)
 800e64c:	6743      	str	r3, [r0, #116]	; 0x74
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e64e:	6883      	ldr	r3, [r0, #8]
 800e650:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e654:	d02d      	beq.n	800e6b2 <HAL_SPI_Transmit_IT+0xb2>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e656:	6801      	ldr	r1, [r0, #0]
 800e658:	684c      	ldr	r4, [r1, #4]
 800e65a:	4b1e      	ldr	r3, [pc, #120]	; (800e6d4 <HAL_SPI_Transmit_IT+0xd4>)
 800e65c:	4023      	ands	r3, r4
 800e65e:	431a      	orrs	r2, r3
 800e660:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800e662:	6802      	ldr	r2, [r0, #0]
 800e664:	6813      	ldr	r3, [r2, #0]
 800e666:	f043 0301 	orr.w	r3, r3, #1
 800e66a:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800e66c:	6802      	ldr	r2, [r0, #0]
 800e66e:	6911      	ldr	r1, [r2, #16]
 800e670:	f240 732a 	movw	r3, #1834	; 0x72a
 800e674:	430b      	orrs	r3, r1
 800e676:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e678:	6843      	ldr	r3, [r0, #4]
 800e67a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e67e:	d01e      	beq.n	800e6be <HAL_SPI_Transmit_IT+0xbe>
  __HAL_UNLOCK(hspi);
 800e680:	2300      	movs	r3, #0
 800e682:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800e686:	4618      	mov	r0, r3
}
 800e688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e68c:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800e68e:	2300      	movs	r3, #0
 800e690:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800e694:	2001      	movs	r0, #1
 800e696:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800e698:	2300      	movs	r3, #0
 800e69a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800e69e:	2002      	movs	r0, #2
 800e6a0:	4770      	bx	lr
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e6a2:	2b07      	cmp	r3, #7
 800e6a4:	d902      	bls.n	800e6ac <HAL_SPI_Transmit_IT+0xac>
    hspi->TxISR = SPI_TxISR_16BIT;
 800e6a6:	4b0c      	ldr	r3, [pc, #48]	; (800e6d8 <HAL_SPI_Transmit_IT+0xd8>)
 800e6a8:	6743      	str	r3, [r0, #116]	; 0x74
 800e6aa:	e7d0      	b.n	800e64e <HAL_SPI_Transmit_IT+0x4e>
    hspi->TxISR = SPI_TxISR_8BIT;
 800e6ac:	4b0b      	ldr	r3, [pc, #44]	; (800e6dc <HAL_SPI_Transmit_IT+0xdc>)
 800e6ae:	6743      	str	r3, [r0, #116]	; 0x74
 800e6b0:	e7cd      	b.n	800e64e <HAL_SPI_Transmit_IT+0x4e>
    SPI_1LINE_TX(hspi);
 800e6b2:	6801      	ldr	r1, [r0, #0]
 800e6b4:	680b      	ldr	r3, [r1, #0]
 800e6b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e6ba:	600b      	str	r3, [r1, #0]
 800e6bc:	e7cb      	b.n	800e656 <HAL_SPI_Transmit_IT+0x56>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e6be:	6802      	ldr	r2, [r0, #0]
 800e6c0:	6813      	ldr	r3, [r2, #0]
 800e6c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e6c6:	6013      	str	r3, [r2, #0]
 800e6c8:	e7da      	b.n	800e680 <HAL_SPI_Transmit_IT+0x80>
  __HAL_LOCK(hspi);
 800e6ca:	2002      	movs	r0, #2
}
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	0800ddbd 	.word	0x0800ddbd
 800e6d4:	ffff0000 	.word	0xffff0000
 800e6d8:	0800dd8d 	.word	0x0800dd8d
 800e6dc:	0800dd5b 	.word	0x0800dd5b

0800e6e0 <HAL_SPI_TransmitReceive_IT>:
{
 800e6e0:	b430      	push	{r4, r5}
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e6e2:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hspi);
 800e6e4:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 800e6e8:	f1bc 0f01 	cmp.w	ip, #1
 800e6ec:	f000 8101 	beq.w	800e8f2 <HAL_SPI_TransmitReceive_IT+0x212>
 800e6f0:	f04f 0c01 	mov.w	ip, #1
 800e6f4:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80
  tmp_state  = hspi->State;
 800e6f8:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
 800e6fc:	fa5f fc8c 	uxtb.w	ip, ip
  tmp_mode   = hspi->Init.Mode;
 800e700:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e702:	f1bc 0f01 	cmp.w	ip, #1
 800e706:	d008      	beq.n	800e71a <HAL_SPI_TransmitReceive_IT+0x3a>
 800e708:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 800e70c:	d136      	bne.n	800e77c <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e70e:	6885      	ldr	r5, [r0, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800e710:	2d00      	cmp	r5, #0
 800e712:	d133      	bne.n	800e77c <HAL_SPI_TransmitReceive_IT+0x9c>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800e714:	f1bc 0f04 	cmp.w	ip, #4
 800e718:	d130      	bne.n	800e77c <HAL_SPI_TransmitReceive_IT+0x9c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e71a:	2a00      	cmp	r2, #0
 800e71c:	bf18      	it	ne
 800e71e:	2900      	cmpne	r1, #0
 800e720:	d032      	beq.n	800e788 <HAL_SPI_TransmitReceive_IT+0xa8>
 800e722:	2b00      	cmp	r3, #0
 800e724:	d030      	beq.n	800e788 <HAL_SPI_TransmitReceive_IT+0xa8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e726:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800e72a:	b2ed      	uxtb	r5, r5
 800e72c:	2d04      	cmp	r5, #4
 800e72e:	d002      	beq.n	800e736 <HAL_SPI_TransmitReceive_IT+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e730:	2505      	movs	r5, #5
 800e732:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e736:	2500      	movs	r5, #0
 800e738:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e73c:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e73e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e742:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e746:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e748:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e74c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 800e750:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800e754:	b292      	uxth	r2, r2
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e756:	68c1      	ldr	r1, [r0, #12]
 800e758:	290f      	cmp	r1, #15
 800e75a:	d91a      	bls.n	800e792 <HAL_SPI_TransmitReceive_IT+0xb2>
    hspi->TxISR     = SPI_TxISR_32BIT;
 800e75c:	4966      	ldr	r1, [pc, #408]	; (800e8f8 <HAL_SPI_TransmitReceive_IT+0x218>)
 800e75e:	6741      	str	r1, [r0, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 800e760:	4966      	ldr	r1, [pc, #408]	; (800e8fc <HAL_SPI_TransmitReceive_IT+0x21c>)
 800e762:	6701      	str	r1, [r0, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e764:	6865      	ldr	r5, [r4, #4]
 800e766:	4966      	ldr	r1, [pc, #408]	; (800e900 <HAL_SPI_TransmitReceive_IT+0x220>)
 800e768:	4029      	ands	r1, r5
 800e76a:	430b      	orrs	r3, r1
 800e76c:	6063      	str	r3, [r4, #4]
  __HAL_SPI_ENABLE(hspi);
 800e76e:	6801      	ldr	r1, [r0, #0]
 800e770:	680b      	ldr	r3, [r1, #0]
 800e772:	f043 0301 	orr.w	r3, r3, #1
 800e776:	600b      	str	r3, [r1, #0]
  uint32_t max_fifo_length = 0UL;
 800e778:	2100      	movs	r1, #0
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800e77a:	e041      	b.n	800e800 <HAL_SPI_TransmitReceive_IT+0x120>
    __HAL_UNLOCK(hspi);
 800e77c:	2300      	movs	r3, #0
 800e77e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800e782:	2002      	movs	r0, #2
}
 800e784:	bc30      	pop	{r4, r5}
 800e786:	4770      	bx	lr
    __HAL_UNLOCK(hspi);
 800e788:	2300      	movs	r3, #0
 800e78a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800e78e:	2001      	movs	r0, #1
 800e790:	e7f8      	b.n	800e784 <HAL_SPI_TransmitReceive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e792:	2907      	cmp	r1, #7
 800e794:	d904      	bls.n	800e7a0 <HAL_SPI_TransmitReceive_IT+0xc0>
    hspi->RxISR     = SPI_RxISR_16BIT;
 800e796:	495b      	ldr	r1, [pc, #364]	; (800e904 <HAL_SPI_TransmitReceive_IT+0x224>)
 800e798:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 800e79a:	495b      	ldr	r1, [pc, #364]	; (800e908 <HAL_SPI_TransmitReceive_IT+0x228>)
 800e79c:	6741      	str	r1, [r0, #116]	; 0x74
 800e79e:	e7e1      	b.n	800e764 <HAL_SPI_TransmitReceive_IT+0x84>
    hspi->RxISR     = SPI_RxISR_8BIT;
 800e7a0:	495a      	ldr	r1, [pc, #360]	; (800e90c <HAL_SPI_TransmitReceive_IT+0x22c>)
 800e7a2:	6701      	str	r1, [r0, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 800e7a4:	495a      	ldr	r1, [pc, #360]	; (800e910 <HAL_SPI_TransmitReceive_IT+0x230>)
 800e7a6:	6741      	str	r1, [r0, #116]	; 0x74
 800e7a8:	e7dc      	b.n	800e764 <HAL_SPI_TransmitReceive_IT+0x84>
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e7aa:	2b07      	cmp	r3, #7
 800e7ac:	d945      	bls.n	800e83a <HAL_SPI_TransmitReceive_IT+0x15a>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e7ae:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d912      	bls.n	800e7de <HAL_SPI_TransmitReceive_IT+0xfe>
 800e7b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e7ba:	b183      	cbz	r3, 800e7de <HAL_SPI_TransmitReceive_IT+0xfe>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e7bc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e7c2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e7c4:	3304      	adds	r3, #4
 800e7c6:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e7c8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	3b02      	subs	r3, #2
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800e7d6:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800e7da:	b292      	uxth	r2, r2
 800e7dc:	e00f      	b.n	800e7fe <HAL_SPI_TransmitReceive_IT+0x11e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e7de:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e7e0:	881b      	ldrh	r3, [r3, #0]
 800e7e2:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e7e6:	3302      	adds	r3, #2
 800e7e8:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800e7ea:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800e7f8:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800e7fc:	b292      	uxth	r2, r2
      max_fifo_length++;
 800e7fe:	3101      	adds	r1, #1
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 800e800:	6805      	ldr	r5, [r0, #0]
 800e802:	696b      	ldr	r3, [r5, #20]
 800e804:	f013 0f02 	tst.w	r3, #2
 800e808:	d05f      	beq.n	800e8ca <HAL_SPI_TransmitReceive_IT+0x1ea>
 800e80a:	2a00      	cmp	r2, #0
 800e80c:	d05d      	beq.n	800e8ca <HAL_SPI_TransmitReceive_IT+0x1ea>
    if (max_fifo_length < MAX_FIFO_LENGTH)
 800e80e:	290f      	cmp	r1, #15
 800e810:	d856      	bhi.n	800e8c0 <HAL_SPI_TransmitReceive_IT+0x1e0>
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e812:	68c3      	ldr	r3, [r0, #12]
 800e814:	2b0f      	cmp	r3, #15
 800e816:	d9c8      	bls.n	800e7aa <HAL_SPI_TransmitReceive_IT+0xca>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e818:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	622b      	str	r3, [r5, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e81e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e820:	3304      	adds	r3, #4
 800e822:	65c3      	str	r3, [r0, #92]	; 0x5c
        hspi->TxXferCount--;
 800e824:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e828:	b29b      	uxth	r3, r3
 800e82a:	3b01      	subs	r3, #1
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 800e832:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800e836:	b292      	uxth	r2, r2
 800e838:	e7e1      	b.n	800e7fe <HAL_SPI_TransmitReceive_IT+0x11e>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e83a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e83e:	b29b      	uxth	r3, r3
 800e840:	2b03      	cmp	r3, #3
 800e842:	d913      	bls.n	800e86c <HAL_SPI_TransmitReceive_IT+0x18c>
 800e844:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e846:	2b40      	cmp	r3, #64	; 0x40
 800e848:	d910      	bls.n	800e86c <HAL_SPI_TransmitReceive_IT+0x18c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e84a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	622b      	str	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e850:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e852:	3304      	adds	r3, #4
 800e854:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e856:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	3b04      	subs	r3, #4
 800e85e:	b29b      	uxth	r3, r3
 800e860:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800e864:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800e868:	b292      	uxth	r2, r2
 800e86a:	e7c8      	b.n	800e7fe <HAL_SPI_TransmitReceive_IT+0x11e>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e86c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e870:	b29b      	uxth	r3, r3
 800e872:	2b01      	cmp	r3, #1
 800e874:	d912      	bls.n	800e89c <HAL_SPI_TransmitReceive_IT+0x1bc>
 800e876:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e878:	b183      	cbz	r3, 800e89c <HAL_SPI_TransmitReceive_IT+0x1bc>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e87a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e87c:	881b      	ldrh	r3, [r3, #0]
 800e87e:	8423      	strh	r3, [r4, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e880:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e882:	3302      	adds	r3, #2
 800e884:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e886:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	3b02      	subs	r3, #2
 800e88e:	b29b      	uxth	r3, r3
 800e890:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800e894:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800e898:	b292      	uxth	r2, r2
 800e89a:	e7b0      	b.n	800e7fe <HAL_SPI_TransmitReceive_IT+0x11e>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e89c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	f885 3020 	strb.w	r3, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e8a4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	65c3      	str	r3, [r0, #92]	; 0x5c
          hspi->TxXferCount--;
 800e8aa:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 800e8b8:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800e8bc:	b292      	uxth	r2, r2
 800e8be:	e79e      	b.n	800e7fe <HAL_SPI_TransmitReceive_IT+0x11e>
      __HAL_UNLOCK(hspi);
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      return errorcode;
 800e8c6:	2002      	movs	r0, #2
 800e8c8:	e75c      	b.n	800e784 <HAL_SPI_TransmitReceive_IT+0xa4>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 800e8ca:	692a      	ldr	r2, [r5, #16]
 800e8cc:	f240 736c 	movw	r3, #1900	; 0x76c
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	612b      	str	r3, [r5, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e8d4:	6843      	ldr	r3, [r0, #4]
 800e8d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8da:	d004      	beq.n	800e8e6 <HAL_SPI_TransmitReceive_IT+0x206>
  __HAL_UNLOCK(hspi);
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return errorcode;
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	e74e      	b.n	800e784 <HAL_SPI_TransmitReceive_IT+0xa4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e8e6:	6802      	ldr	r2, [r0, #0]
 800e8e8:	6813      	ldr	r3, [r2, #0]
 800e8ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e8ee:	6013      	str	r3, [r2, #0]
 800e8f0:	e7f4      	b.n	800e8dc <HAL_SPI_TransmitReceive_IT+0x1fc>
  __HAL_LOCK(hspi);
 800e8f2:	2002      	movs	r0, #2
 800e8f4:	e746      	b.n	800e784 <HAL_SPI_TransmitReceive_IT+0xa4>
 800e8f6:	bf00      	nop
 800e8f8:	0800ddbd 	.word	0x0800ddbd
 800e8fc:	0800dd2b 	.word	0x0800dd2b
 800e900:	ffff0000 	.word	0xffff0000
 800e904:	0800dcfb 	.word	0x0800dcfb
 800e908:	0800dd8d 	.word	0x0800dd8d
 800e90c:	0800dcc9 	.word	0x0800dcc9
 800e910:	0800dd5b 	.word	0x0800dd5b

0800e914 <HAL_SPI_Receive_IT>:
{
 800e914:	b510      	push	{r4, lr}
 800e916:	4684      	mov	ip, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e918:	6884      	ldr	r4, [r0, #8]
 800e91a:	b91c      	cbnz	r4, 800e924 <HAL_SPI_Receive_IT+0x10>
 800e91c:	6843      	ldr	r3, [r0, #4]
 800e91e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e922:	d04a      	beq.n	800e9ba <HAL_SPI_Receive_IT+0xa6>
  __HAL_LOCK(hspi);
 800e924:	f89c 3080 	ldrb.w	r3, [ip, #128]	; 0x80
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d06f      	beq.n	800ea0c <HAL_SPI_Receive_IT+0xf8>
 800e92c:	2301      	movs	r3, #1
 800e92e:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800e932:	f89c 0081 	ldrb.w	r0, [ip, #129]	; 0x81
 800e936:	b2c0      	uxtb	r0, r0
 800e938:	4298      	cmp	r0, r3
 800e93a:	d146      	bne.n	800e9ca <HAL_SPI_Receive_IT+0xb6>
  if ((pData == NULL) || (Size == 0UL))
 800e93c:	2a00      	cmp	r2, #0
 800e93e:	bf18      	it	ne
 800e940:	2900      	cmpne	r1, #0
 800e942:	d047      	beq.n	800e9d4 <HAL_SPI_Receive_IT+0xc0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e944:	2304      	movs	r3, #4
 800e946:	f88c 3081 	strb.w	r3, [ip, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e94a:	2300      	movs	r3, #0
 800e94c:	f8cc 3084 	str.w	r3, [ip, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e950:	f8cc 1064 	str.w	r1, [ip, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e954:	f8ac 2068 	strh.w	r2, [ip, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e958:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
  hspi->pTxBuffPtr  = NULL;
 800e95c:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e960:	f8ac 3060 	strh.w	r3, [ip, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e964:	f8ac 3062 	strh.w	r3, [ip, #98]	; 0x62
  hspi->TxISR       = NULL;
 800e968:	f8cc 3074 	str.w	r3, [ip, #116]	; 0x74
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e96c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800e970:	2b0f      	cmp	r3, #15
 800e972:	d933      	bls.n	800e9dc <HAL_SPI_Receive_IT+0xc8>
    hspi->RxISR = SPI_RxISR_32BIT;
 800e974:	4b26      	ldr	r3, [pc, #152]	; (800ea10 <HAL_SPI_Receive_IT+0xfc>)
 800e976:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e97a:	f5b4 2fc0 	cmp.w	r4, #393216	; 0x60000
 800e97e:	d037      	beq.n	800e9f0 <HAL_SPI_Receive_IT+0xdc>
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e980:	f8dc 1000 	ldr.w	r1, [ip]
 800e984:	6848      	ldr	r0, [r1, #4]
 800e986:	4b23      	ldr	r3, [pc, #140]	; (800ea14 <HAL_SPI_Receive_IT+0x100>)
 800e988:	4003      	ands	r3, r0
 800e98a:	431a      	orrs	r2, r3
 800e98c:	604a      	str	r2, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800e98e:	f8dc 2000 	ldr.w	r2, [ip]
 800e992:	6813      	ldr	r3, [r2, #0]
 800e994:	f043 0301 	orr.w	r3, r3, #1
 800e998:	6013      	str	r3, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800e99a:	f8dc 2000 	ldr.w	r2, [ip]
 800e99e:	6911      	ldr	r1, [r2, #16]
 800e9a0:	f240 7349 	movw	r3, #1865	; 0x749
 800e9a4:	430b      	orrs	r3, r1
 800e9a6:	6113      	str	r3, [r2, #16]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e9a8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800e9ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e9b0:	d025      	beq.n	800e9fe <HAL_SPI_Receive_IT+0xea>
  __HAL_UNLOCK(hspi);
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	f88c 0080 	strb.w	r0, [ip, #128]	; 0x80
}
 800e9b8:	bd10      	pop	{r4, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e9ba:	2304      	movs	r3, #4
 800e9bc:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	460a      	mov	r2, r1
 800e9c4:	f7ff fe8c 	bl	800e6e0 <HAL_SPI_TransmitReceive_IT>
 800e9c8:	e7f6      	b.n	800e9b8 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800e9d0:	2002      	movs	r0, #2
 800e9d2:	e7f1      	b.n	800e9b8 <HAL_SPI_Receive_IT+0xa4>
    __HAL_UNLOCK(hspi);
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	f88c 3080 	strb.w	r3, [ip, #128]	; 0x80
    return errorcode;
 800e9da:	e7ed      	b.n	800e9b8 <HAL_SPI_Receive_IT+0xa4>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e9dc:	2b07      	cmp	r3, #7
 800e9de:	d903      	bls.n	800e9e8 <HAL_SPI_Receive_IT+0xd4>
    hspi->RxISR = SPI_RxISR_16BIT;
 800e9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ea18 <HAL_SPI_Receive_IT+0x104>)
 800e9e2:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800e9e6:	e7c8      	b.n	800e97a <HAL_SPI_Receive_IT+0x66>
    hspi->RxISR = SPI_RxISR_8BIT;
 800e9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ea1c <HAL_SPI_Receive_IT+0x108>)
 800e9ea:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70
 800e9ee:	e7c4      	b.n	800e97a <HAL_SPI_Receive_IT+0x66>
    SPI_1LINE_RX(hspi);
 800e9f0:	f8dc 1000 	ldr.w	r1, [ip]
 800e9f4:	680b      	ldr	r3, [r1, #0]
 800e9f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e9fa:	600b      	str	r3, [r1, #0]
 800e9fc:	e7c0      	b.n	800e980 <HAL_SPI_Receive_IT+0x6c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e9fe:	f8dc 2000 	ldr.w	r2, [ip]
 800ea02:	6813      	ldr	r3, [r2, #0]
 800ea04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea08:	6013      	str	r3, [r2, #0]
 800ea0a:	e7d2      	b.n	800e9b2 <HAL_SPI_Receive_IT+0x9e>
  __HAL_LOCK(hspi);
 800ea0c:	2002      	movs	r0, #2
 800ea0e:	e7d3      	b.n	800e9b8 <HAL_SPI_Receive_IT+0xa4>
 800ea10:	0800dd2b 	.word	0x0800dd2b
 800ea14:	ffff0000 	.word	0xffff0000
 800ea18:	0800dcfb 	.word	0x0800dcfb
 800ea1c:	0800dcc9 	.word	0x0800dcc9

0800ea20 <HAL_SPI_TxRxCpltCallback>:
}
 800ea20:	4770      	bx	lr

0800ea22 <HAL_SPI_ErrorCallback>:
}
 800ea22:	4770      	bx	lr

0800ea24 <HAL_SPI_IRQHandler>:
{
 800ea24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea28:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800ea2a:	6806      	ldr	r6, [r0, #0]
 800ea2c:	f8d6 a010 	ldr.w	sl, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800ea30:	f8d6 9014 	ldr.w	r9, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800ea34:	ea0a 0509 	and.w	r5, sl, r9
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ea38:	f8d6 b008 	ldr.w	fp, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800ea3c:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 800ea40:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ea42:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800ea46:	2b04      	cmp	r3, #4
 800ea48:	d03b      	beq.n	800eac2 <HAL_SPI_IRQHandler+0x9e>
  uint32_t handled  = 0UL;
 800ea4a:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ea4c:	f005 0845 	and.w	r8, r5, #69	; 0x45
 800ea50:	f1b8 0f01 	cmp.w	r8, #1
 800ea54:	d03c      	beq.n	800ead0 <HAL_SPI_IRQHandler+0xac>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ea56:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800ea5a:	2a02      	cmp	r2, #2
 800ea5c:	d03d      	beq.n	800eada <HAL_SPI_IRQHandler+0xb6>
  if (handled != 0UL)
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d13e      	bne.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ea62:	f015 0f08 	tst.w	r5, #8
 800ea66:	d071      	beq.n	800eb4c <HAL_SPI_IRQHandler+0x128>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ea68:	6822      	ldr	r2, [r4, #0]
 800ea6a:	6993      	ldr	r3, [r2, #24]
 800ea6c:	f043 0308 	orr.w	r3, r3, #8
 800ea70:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ea72:	6822      	ldr	r2, [r4, #0]
 800ea74:	6993      	ldr	r3, [r2, #24]
 800ea76:	f043 0310 	orr.w	r3, r3, #16
 800ea7a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ea7c:	6822      	ldr	r2, [r4, #0]
 800ea7e:	6993      	ldr	r3, [r2, #24]
 800ea80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ea84:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ea86:	6822      	ldr	r2, [r4, #0]
 800ea88:	6913      	ldr	r3, [r2, #16]
 800ea8a:	f023 0308 	bic.w	r3, r3, #8
 800ea8e:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	689b      	ldr	r3, [r3, #8]
 800ea94:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800ea98:	d033      	beq.n	800eb02 <HAL_SPI_IRQHandler+0xde>
    SPI_CloseTransfer(hspi);
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	f7ff f9a6 	bl	800ddec <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eaa6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d142      	bne.n	800eb34 <HAL_SPI_IRQHandler+0x110>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800eaae:	2f05      	cmp	r7, #5
 800eab0:	d044      	beq.n	800eb3c <HAL_SPI_IRQHandler+0x118>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800eab2:	2f04      	cmp	r7, #4
 800eab4:	d046      	beq.n	800eb44 <HAL_SPI_IRQHandler+0x120>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800eab6:	2f03      	cmp	r7, #3
 800eab8:	d112      	bne.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxCpltCallback(hspi);
 800eaba:	4620      	mov	r0, r4
 800eabc:	f7f4 f8bc 	bl	8002c38 <HAL_SPI_TxCpltCallback>
    return;
 800eac0:	e00e      	b.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
    hspi->TxISR(hspi);
 800eac2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800eac4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800eac6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800eac8:	4620      	mov	r0, r4
 800eaca:	4798      	blx	r3
    handled = 1UL;
 800eacc:	2301      	movs	r3, #1
 800eace:	e7bd      	b.n	800ea4c <HAL_SPI_IRQHandler+0x28>
    hspi->RxISR(hspi);
 800ead0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ead2:	4620      	mov	r0, r4
 800ead4:	4798      	blx	r3
    handled = 1UL;
 800ead6:	4643      	mov	r3, r8
 800ead8:	e7bd      	b.n	800ea56 <HAL_SPI_IRQHandler+0x32>
    hspi->TxISR(hspi);
 800eada:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800eadc:	4620      	mov	r0, r4
 800eade:	4798      	blx	r3
}
 800eae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eae4:	2b07      	cmp	r3, #7
 800eae6:	d91c      	bls.n	800eb22 <HAL_SPI_IRQHandler+0xfe>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800eae8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaea:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800eaec:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800eaee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaf0:	3302      	adds	r3, #2
 800eaf2:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800eaf4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	3b01      	subs	r3, #1
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800eb02:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d0c6      	beq.n	800ea9a <HAL_SPI_IRQHandler+0x76>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eb0c:	68e3      	ldr	r3, [r4, #12]
 800eb0e:	2b0f      	cmp	r3, #15
 800eb10:	d9e8      	bls.n	800eae4 <HAL_SPI_IRQHandler+0xc0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800eb12:	6822      	ldr	r2, [r4, #0]
 800eb14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800eb18:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800eb1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb1c:	3304      	adds	r3, #4
 800eb1e:	6663      	str	r3, [r4, #100]	; 0x64
 800eb20:	e7e8      	b.n	800eaf4 <HAL_SPI_IRQHandler+0xd0>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eb22:	6822      	ldr	r2, [r4, #0]
 800eb24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb26:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800eb2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800eb2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb2e:	3301      	adds	r3, #1
 800eb30:	6663      	str	r3, [r4, #100]	; 0x64
 800eb32:	e7df      	b.n	800eaf4 <HAL_SPI_IRQHandler+0xd0>
      HAL_SPI_ErrorCallback(hspi);
 800eb34:	4620      	mov	r0, r4
 800eb36:	f7ff ff74 	bl	800ea22 <HAL_SPI_ErrorCallback>
      return;
 800eb3a:	e7d1      	b.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_TxRxCpltCallback(hspi);
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f7ff ff6f 	bl	800ea20 <HAL_SPI_TxRxCpltCallback>
 800eb42:	e7cd      	b.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
      HAL_SPI_RxCpltCallback(hspi);
 800eb44:	4620      	mov	r0, r4
 800eb46:	f7f4 f86d 	bl	8002c24 <HAL_SPI_RxCpltCallback>
 800eb4a:	e7c9      	b.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800eb4c:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800eb50:	d002      	beq.n	800eb58 <HAL_SPI_IRQHandler+0x134>
 800eb52:	f01a 0f08 	tst.w	sl, #8
 800eb56:	d173      	bne.n	800ec40 <HAL_SPI_IRQHandler+0x21c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800eb58:	f415 7f58 	tst.w	r5, #864	; 0x360
 800eb5c:	d0c0      	beq.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800eb5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eb62:	d00a      	beq.n	800eb7a <HAL_SPI_IRQHandler+0x156>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eb64:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800eb68:	f043 0304 	orr.w	r3, r3, #4
 800eb6c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eb70:	6822      	ldr	r2, [r4, #0]
 800eb72:	6993      	ldr	r3, [r2, #24]
 800eb74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb78:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800eb7a:	f415 7f00 	tst.w	r5, #512	; 0x200
 800eb7e:	d00a      	beq.n	800eb96 <HAL_SPI_IRQHandler+0x172>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eb80:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800eb84:	f043 0301 	orr.w	r3, r3, #1
 800eb88:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eb8c:	6822      	ldr	r2, [r4, #0]
 800eb8e:	6993      	ldr	r3, [r2, #24]
 800eb90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb94:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800eb96:	f415 7f80 	tst.w	r5, #256	; 0x100
 800eb9a:	d00a      	beq.n	800ebb2 <HAL_SPI_IRQHandler+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eb9c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800eba0:	f043 0308 	orr.w	r3, r3, #8
 800eba4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eba8:	6822      	ldr	r2, [r4, #0]
 800ebaa:	6993      	ldr	r3, [r2, #24]
 800ebac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebb0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ebb2:	f015 0f20 	tst.w	r5, #32
 800ebb6:	d00a      	beq.n	800ebce <HAL_SPI_IRQHandler+0x1aa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ebb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ebbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebc0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ebc4:	6822      	ldr	r2, [r4, #0]
 800ebc6:	6993      	ldr	r3, [r2, #24]
 800ebc8:	f043 0320 	orr.w	r3, r3, #32
 800ebcc:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d084      	beq.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
      __HAL_SPI_DISABLE(hspi);
 800ebd6:	6822      	ldr	r2, [r4, #0]
 800ebd8:	6813      	ldr	r3, [r2, #0]
 800ebda:	f023 0301 	bic.w	r3, r3, #1
 800ebde:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ebe0:	6822      	ldr	r2, [r4, #0]
 800ebe2:	6911      	ldr	r1, [r2, #16]
 800ebe4:	4b1d      	ldr	r3, [pc, #116]	; (800ec5c <HAL_SPI_IRQHandler+0x238>)
 800ebe6:	400b      	ands	r3, r1
 800ebe8:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ebea:	f40b 4b40 	and.w	fp, fp, #49152	; 0xc000
 800ebee:	f5bb 4f40 	cmp.w	fp, #49152	; 0xc000
 800ebf2:	d12b      	bne.n	800ec4c <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ebf4:	6822      	ldr	r2, [r4, #0]
 800ebf6:	6893      	ldr	r3, [r2, #8]
 800ebf8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ebfc:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800ebfe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ec00:	b15b      	cbz	r3, 800ec1a <HAL_SPI_IRQHandler+0x1f6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ec02:	4a17      	ldr	r2, [pc, #92]	; (800ec60 <HAL_SPI_IRQHandler+0x23c>)
 800ec04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ec06:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ec08:	f7fb fcd2 	bl	800a5b0 <HAL_DMA_Abort_IT>
 800ec0c:	b128      	cbz	r0, 800ec1a <HAL_SPI_IRQHandler+0x1f6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ec0e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ec12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800ec1a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f43f af5f 	beq.w	800eae0 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ec22:	4a0f      	ldr	r2, [pc, #60]	; (800ec60 <HAL_SPI_IRQHandler+0x23c>)
 800ec24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ec26:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ec28:	f7fb fcc2 	bl	800a5b0 <HAL_DMA_Abort_IT>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	f43f af57 	beq.w	800eae0 <HAL_SPI_IRQHandler+0xbc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ec32:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ec36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec3a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ec3e:	e74f      	b.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ec40:	6822      	ldr	r2, [r4, #0]
 800ec42:	6993      	ldr	r3, [r2, #24]
 800ec44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ec48:	6193      	str	r3, [r2, #24]
    return;
 800ec4a:	e749      	b.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ec52:	4620      	mov	r0, r4
 800ec54:	f7ff fee5 	bl	800ea22 <HAL_SPI_ErrorCallback>
    return;
 800ec58:	e742      	b.n	800eae0 <HAL_SPI_IRQHandler+0xbc>
 800ec5a:	bf00      	nop
 800ec5c:	fffffc94 	.word	0xfffffc94
 800ec60:	0800ec65 	.word	0x0800ec65

0800ec64 <SPI_DMAAbortOnError>:
{
 800ec64:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec66:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ec6e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800ec72:	2301      	movs	r3, #1
 800ec74:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800ec78:	f7ff fed3 	bl	800ea22 <HAL_SPI_ErrorCallback>
}
 800ec7c:	bd08      	pop	{r3, pc}

0800ec7e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ec7e:	4770      	bx	lr

0800ec80 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec80:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d13a      	bne.n	800ed00 <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec8a:	2302      	movs	r3, #2
 800ec8c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec90:	6802      	ldr	r2, [r0, #0]
 800ec92:	68d3      	ldr	r3, [r2, #12]
 800ec94:	f043 0301 	orr.w	r3, r3, #1
 800ec98:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec9a:	6803      	ldr	r3, [r0, #0]
 800ec9c:	4a1a      	ldr	r2, [pc, #104]	; (800ed08 <HAL_TIM_Base_Start_IT+0x88>)
 800ec9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eca2:	bf18      	it	ne
 800eca4:	4293      	cmpne	r3, r2
 800eca6:	d01d      	beq.n	800ece4 <HAL_TIM_Base_Start_IT+0x64>
 800eca8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d019      	beq.n	800ece4 <HAL_TIM_Base_Start_IT+0x64>
 800ecb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d015      	beq.n	800ece4 <HAL_TIM_Base_Start_IT+0x64>
 800ecb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d011      	beq.n	800ece4 <HAL_TIM_Base_Start_IT+0x64>
 800ecc0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d00d      	beq.n	800ece4 <HAL_TIM_Base_Start_IT+0x64>
 800ecc8:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d009      	beq.n	800ece4 <HAL_TIM_Base_Start_IT+0x64>
 800ecd0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d005      	beq.n	800ece4 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	f042 0201 	orr.w	r2, r2, #1
 800ecde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ece0:	2000      	movs	r0, #0
 800ece2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ece4:	6899      	ldr	r1, [r3, #8]
 800ece6:	4a09      	ldr	r2, [pc, #36]	; (800ed0c <HAL_TIM_Base_Start_IT+0x8c>)
 800ece8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecea:	2a06      	cmp	r2, #6
 800ecec:	bf18      	it	ne
 800ecee:	f5b2 3f80 	cmpne.w	r2, #65536	; 0x10000
 800ecf2:	d007      	beq.n	800ed04 <HAL_TIM_Base_Start_IT+0x84>
      __HAL_TIM_ENABLE(htim);
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	f042 0201 	orr.w	r2, r2, #1
 800ecfa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	4770      	bx	lr
    return HAL_ERROR;
 800ed00:	2001      	movs	r0, #1
 800ed02:	4770      	bx	lr
  return HAL_OK;
 800ed04:	2000      	movs	r0, #0
}
 800ed06:	4770      	bx	lr
 800ed08:	40010000 	.word	0x40010000
 800ed0c:	00010007 	.word	0x00010007

0800ed10 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ed10:	4770      	bx	lr

0800ed12 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ed12:	4770      	bx	lr

0800ed14 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ed14:	4770      	bx	lr

0800ed16 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ed16:	4770      	bx	lr

0800ed18 <HAL_TIM_IRQHandler>:
{
 800ed18:	b510      	push	{r4, lr}
 800ed1a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ed1c:	6803      	ldr	r3, [r0, #0]
 800ed1e:	691a      	ldr	r2, [r3, #16]
 800ed20:	f012 0f02 	tst.w	r2, #2
 800ed24:	d011      	beq.n	800ed4a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ed26:	68da      	ldr	r2, [r3, #12]
 800ed28:	f012 0f02 	tst.w	r2, #2
 800ed2c:	d00d      	beq.n	800ed4a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ed2e:	f06f 0202 	mvn.w	r2, #2
 800ed32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed34:	2301      	movs	r3, #1
 800ed36:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed38:	6803      	ldr	r3, [r0, #0]
 800ed3a:	699b      	ldr	r3, [r3, #24]
 800ed3c:	f013 0f03 	tst.w	r3, #3
 800ed40:	d079      	beq.n	800ee36 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800ed42:	f7ff ffe6 	bl	800ed12 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed46:	2300      	movs	r3, #0
 800ed48:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	691a      	ldr	r2, [r3, #16]
 800ed4e:	f012 0f04 	tst.w	r2, #4
 800ed52:	d012      	beq.n	800ed7a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ed54:	68da      	ldr	r2, [r3, #12]
 800ed56:	f012 0f04 	tst.w	r2, #4
 800ed5a:	d00e      	beq.n	800ed7a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ed5c:	f06f 0204 	mvn.w	r2, #4
 800ed60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed62:	2302      	movs	r3, #2
 800ed64:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed66:	6823      	ldr	r3, [r4, #0]
 800ed68:	699b      	ldr	r3, [r3, #24]
 800ed6a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ed6e:	d068      	beq.n	800ee42 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800ed70:	4620      	mov	r0, r4
 800ed72:	f7ff ffce 	bl	800ed12 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed76:	2300      	movs	r3, #0
 800ed78:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	691a      	ldr	r2, [r3, #16]
 800ed7e:	f012 0f08 	tst.w	r2, #8
 800ed82:	d012      	beq.n	800edaa <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ed84:	68da      	ldr	r2, [r3, #12]
 800ed86:	f012 0f08 	tst.w	r2, #8
 800ed8a:	d00e      	beq.n	800edaa <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ed8c:	f06f 0208 	mvn.w	r2, #8
 800ed90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed92:	2304      	movs	r3, #4
 800ed94:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed96:	6823      	ldr	r3, [r4, #0]
 800ed98:	69db      	ldr	r3, [r3, #28]
 800ed9a:	f013 0f03 	tst.w	r3, #3
 800ed9e:	d057      	beq.n	800ee50 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800eda0:	4620      	mov	r0, r4
 800eda2:	f7ff ffb6 	bl	800ed12 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eda6:	2300      	movs	r3, #0
 800eda8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800edaa:	6823      	ldr	r3, [r4, #0]
 800edac:	691a      	ldr	r2, [r3, #16]
 800edae:	f012 0f10 	tst.w	r2, #16
 800edb2:	d012      	beq.n	800edda <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800edb4:	68da      	ldr	r2, [r3, #12]
 800edb6:	f012 0f10 	tst.w	r2, #16
 800edba:	d00e      	beq.n	800edda <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800edbc:	f06f 0210 	mvn.w	r2, #16
 800edc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edc2:	2308      	movs	r3, #8
 800edc4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800edc6:	6823      	ldr	r3, [r4, #0]
 800edc8:	69db      	ldr	r3, [r3, #28]
 800edca:	f413 7f40 	tst.w	r3, #768	; 0x300
 800edce:	d046      	beq.n	800ee5e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800edd0:	4620      	mov	r0, r4
 800edd2:	f7ff ff9e 	bl	800ed12 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edd6:	2300      	movs	r3, #0
 800edd8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800edda:	6823      	ldr	r3, [r4, #0]
 800eddc:	691a      	ldr	r2, [r3, #16]
 800edde:	f012 0f01 	tst.w	r2, #1
 800ede2:	d003      	beq.n	800edec <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ede4:	68da      	ldr	r2, [r3, #12]
 800ede6:	f012 0f01 	tst.w	r2, #1
 800edea:	d13f      	bne.n	800ee6c <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800edec:	6823      	ldr	r3, [r4, #0]
 800edee:	691a      	ldr	r2, [r3, #16]
 800edf0:	f012 0f80 	tst.w	r2, #128	; 0x80
 800edf4:	d003      	beq.n	800edfe <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800edf6:	68da      	ldr	r2, [r3, #12]
 800edf8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800edfc:	d13d      	bne.n	800ee7a <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800edfe:	6823      	ldr	r3, [r4, #0]
 800ee00:	691a      	ldr	r2, [r3, #16]
 800ee02:	f412 7f80 	tst.w	r2, #256	; 0x100
 800ee06:	d003      	beq.n	800ee10 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee08:	68da      	ldr	r2, [r3, #12]
 800ee0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ee0e:	d13b      	bne.n	800ee88 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ee10:	6823      	ldr	r3, [r4, #0]
 800ee12:	691a      	ldr	r2, [r3, #16]
 800ee14:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ee18:	d003      	beq.n	800ee22 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ee1a:	68da      	ldr	r2, [r3, #12]
 800ee1c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ee20:	d139      	bne.n	800ee96 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	691a      	ldr	r2, [r3, #16]
 800ee26:	f012 0f20 	tst.w	r2, #32
 800ee2a:	d003      	beq.n	800ee34 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ee2c:	68da      	ldr	r2, [r3, #12]
 800ee2e:	f012 0f20 	tst.w	r2, #32
 800ee32:	d137      	bne.n	800eea4 <HAL_TIM_IRQHandler+0x18c>
}
 800ee34:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee36:	f7ff ff6b 	bl	800ed10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f7ff ff6a 	bl	800ed14 <HAL_TIM_PWM_PulseFinishedCallback>
 800ee40:	e781      	b.n	800ed46 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee42:	4620      	mov	r0, r4
 800ee44:	f7ff ff64 	bl	800ed10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f7ff ff63 	bl	800ed14 <HAL_TIM_PWM_PulseFinishedCallback>
 800ee4e:	e792      	b.n	800ed76 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee50:	4620      	mov	r0, r4
 800ee52:	f7ff ff5d 	bl	800ed10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee56:	4620      	mov	r0, r4
 800ee58:	f7ff ff5c 	bl	800ed14 <HAL_TIM_PWM_PulseFinishedCallback>
 800ee5c:	e7a3      	b.n	800eda6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee5e:	4620      	mov	r0, r4
 800ee60:	f7ff ff56 	bl	800ed10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee64:	4620      	mov	r0, r4
 800ee66:	f7ff ff55 	bl	800ed14 <HAL_TIM_PWM_PulseFinishedCallback>
 800ee6a:	e7b4      	b.n	800edd6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ee6c:	f06f 0201 	mvn.w	r2, #1
 800ee70:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee72:	4620      	mov	r0, r4
 800ee74:	f7f3 fc78 	bl	8002768 <HAL_TIM_PeriodElapsedCallback>
 800ee78:	e7b8      	b.n	800edec <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ee7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ee7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ee80:	4620      	mov	r0, r4
 800ee82:	f000 f8ca 	bl	800f01a <HAL_TIMEx_BreakCallback>
 800ee86:	e7ba      	b.n	800edfe <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ee88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ee8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ee8e:	4620      	mov	r0, r4
 800ee90:	f000 f8c4 	bl	800f01c <HAL_TIMEx_Break2Callback>
 800ee94:	e7bc      	b.n	800ee10 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ee96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ee9a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f7ff ff3a 	bl	800ed16 <HAL_TIM_TriggerCallback>
 800eea2:	e7be      	b.n	800ee22 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eea4:	f06f 0220 	mvn.w	r2, #32
 800eea8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 f8b4 	bl	800f018 <HAL_TIMEx_CommutCallback>
}
 800eeb0:	e7c0      	b.n	800ee34 <HAL_TIM_IRQHandler+0x11c>
	...

0800eeb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eeb4:	b530      	push	{r4, r5, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eeb6:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eeb8:	4a39      	ldr	r2, [pc, #228]	; (800efa0 <TIM_Base_SetConfig+0xec>)
 800eeba:	4290      	cmp	r0, r2
 800eebc:	bf14      	ite	ne
 800eebe:	f04f 0e00 	movne.w	lr, #0
 800eec2:	f04f 0e01 	moveq.w	lr, #1
 800eec6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800eeca:	bf14      	ite	ne
 800eecc:	4672      	movne	r2, lr
 800eece:	f04e 0201 	orreq.w	r2, lr, #1
 800eed2:	b9aa      	cbnz	r2, 800ef00 <TIM_Base_SetConfig+0x4c>
 800eed4:	4c33      	ldr	r4, [pc, #204]	; (800efa4 <TIM_Base_SetConfig+0xf0>)
 800eed6:	42a0      	cmp	r0, r4
 800eed8:	bf14      	ite	ne
 800eeda:	2400      	movne	r4, #0
 800eedc:	2401      	moveq	r4, #1
 800eede:	4d32      	ldr	r5, [pc, #200]	; (800efa8 <TIM_Base_SetConfig+0xf4>)
 800eee0:	42a8      	cmp	r0, r5
 800eee2:	d00d      	beq.n	800ef00 <TIM_Base_SetConfig+0x4c>
 800eee4:	b964      	cbnz	r4, 800ef00 <TIM_Base_SetConfig+0x4c>
 800eee6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800eeea:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 800eeee:	42a0      	cmp	r0, r4
 800eef0:	bf14      	ite	ne
 800eef2:	2400      	movne	r4, #0
 800eef4:	2401      	moveq	r4, #1
 800eef6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800eefa:	42a8      	cmp	r0, r5
 800eefc:	d000      	beq.n	800ef00 <TIM_Base_SetConfig+0x4c>
 800eefe:	b11c      	cbz	r4, 800ef08 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ef04:	684c      	ldr	r4, [r1, #4]
 800ef06:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef08:	bb12      	cbnz	r2, 800ef50 <TIM_Base_SetConfig+0x9c>
 800ef0a:	4a26      	ldr	r2, [pc, #152]	; (800efa4 <TIM_Base_SetConfig+0xf0>)
 800ef0c:	4290      	cmp	r0, r2
 800ef0e:	bf14      	ite	ne
 800ef10:	2200      	movne	r2, #0
 800ef12:	2201      	moveq	r2, #1
 800ef14:	4c24      	ldr	r4, [pc, #144]	; (800efa8 <TIM_Base_SetConfig+0xf4>)
 800ef16:	42a0      	cmp	r0, r4
 800ef18:	d01a      	beq.n	800ef50 <TIM_Base_SetConfig+0x9c>
 800ef1a:	b9ca      	cbnz	r2, 800ef50 <TIM_Base_SetConfig+0x9c>
 800ef1c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ef20:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800ef24:	4290      	cmp	r0, r2
 800ef26:	bf14      	ite	ne
 800ef28:	2200      	movne	r2, #0
 800ef2a:	2201      	moveq	r2, #1
 800ef2c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800ef30:	42a0      	cmp	r0, r4
 800ef32:	d00d      	beq.n	800ef50 <TIM_Base_SetConfig+0x9c>
 800ef34:	b962      	cbnz	r2, 800ef50 <TIM_Base_SetConfig+0x9c>
 800ef36:	4a1d      	ldr	r2, [pc, #116]	; (800efac <TIM_Base_SetConfig+0xf8>)
 800ef38:	4290      	cmp	r0, r2
 800ef3a:	bf14      	ite	ne
 800ef3c:	2200      	movne	r2, #0
 800ef3e:	2201      	moveq	r2, #1
 800ef40:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 800ef44:	42a0      	cmp	r0, r4
 800ef46:	d003      	beq.n	800ef50 <TIM_Base_SetConfig+0x9c>
 800ef48:	b912      	cbnz	r2, 800ef50 <TIM_Base_SetConfig+0x9c>
 800ef4a:	4a19      	ldr	r2, [pc, #100]	; (800efb0 <TIM_Base_SetConfig+0xfc>)
 800ef4c:	4290      	cmp	r0, r2
 800ef4e:	d104      	bne.n	800ef5a <TIM_Base_SetConfig+0xa6>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef50:	f423 7c40 	bic.w	ip, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef54:	68cb      	ldr	r3, [r1, #12]
 800ef56:	ea43 030c 	orr.w	r3, r3, ip
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef5e:	694a      	ldr	r2, [r1, #20]
 800ef60:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800ef62:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef64:	688a      	ldr	r2, [r1, #8]
 800ef66:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef68:	680a      	ldr	r2, [r1, #0]
 800ef6a:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef6c:	4a11      	ldr	r2, [pc, #68]	; (800efb4 <TIM_Base_SetConfig+0x100>)
 800ef6e:	4290      	cmp	r0, r2
 800ef70:	bf14      	ite	ne
 800ef72:	4673      	movne	r3, lr
 800ef74:	f04e 0301 	orreq.w	r3, lr, #1
 800ef78:	b963      	cbnz	r3, 800ef94 <TIM_Base_SetConfig+0xe0>
 800ef7a:	4b0c      	ldr	r3, [pc, #48]	; (800efac <TIM_Base_SetConfig+0xf8>)
 800ef7c:	4298      	cmp	r0, r3
 800ef7e:	bf14      	ite	ne
 800ef80:	2300      	movne	r3, #0
 800ef82:	2301      	moveq	r3, #1
 800ef84:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800ef88:	4290      	cmp	r0, r2
 800ef8a:	d003      	beq.n	800ef94 <TIM_Base_SetConfig+0xe0>
 800ef8c:	b913      	cbnz	r3, 800ef94 <TIM_Base_SetConfig+0xe0>
 800ef8e:	4b08      	ldr	r3, [pc, #32]	; (800efb0 <TIM_Base_SetConfig+0xfc>)
 800ef90:	4298      	cmp	r0, r3
 800ef92:	d101      	bne.n	800ef98 <TIM_Base_SetConfig+0xe4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef94:	690b      	ldr	r3, [r1, #16]
 800ef96:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	6143      	str	r3, [r0, #20]
}
 800ef9c:	bd30      	pop	{r4, r5, pc}
 800ef9e:	bf00      	nop
 800efa0:	40010000 	.word	0x40010000
 800efa4:	40000800 	.word	0x40000800
 800efa8:	40000400 	.word	0x40000400
 800efac:	40014400 	.word	0x40014400
 800efb0:	40014800 	.word	0x40014800
 800efb4:	40010400 	.word	0x40010400

0800efb8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800efb8:	b360      	cbz	r0, 800f014 <HAL_TIM_Base_Init+0x5c>
{
 800efba:	b510      	push	{r4, lr}
 800efbc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800efbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800efc2:	b313      	cbz	r3, 800f00a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800efc4:	2302      	movs	r3, #2
 800efc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efca:	4621      	mov	r1, r4
 800efcc:	f851 0b04 	ldr.w	r0, [r1], #4
 800efd0:	f7ff ff70 	bl	800eeb4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800efd4:	2301      	movs	r3, #1
 800efd6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800efde:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800efe2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800efe6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800efea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eff2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800eff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800effa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800effe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f002:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800f006:	2000      	movs	r0, #0
}
 800f008:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800f00a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800f00e:	f7ff fe36 	bl	800ec7e <HAL_TIM_Base_MspInit>
 800f012:	e7d7      	b.n	800efc4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800f014:	2001      	movs	r0, #1
}
 800f016:	4770      	bx	lr

0800f018 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f018:	4770      	bx	lr

0800f01a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f01a:	4770      	bx	lr

0800f01c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f01c:	4770      	bx	lr

0800f01e <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f01e:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800f020:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f024:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f026:	f001 ff6f 	bl	8010f08 <xTaskGetSchedulerState>
 800f02a:	2801      	cmp	r0, #1
 800f02c:	d100      	bne.n	800f030 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800f02e:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 800f030:	f000 fc70 	bl	800f914 <xPortSysTickHandler>
}
 800f034:	e7fb      	b.n	800f02e <SysTick_Handler+0x10>
	...

0800f038 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f038:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f03c:	b92b      	cbnz	r3, 800f04a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800f03e:	4b06      	ldr	r3, [pc, #24]	; (800f058 <osKernelInitialize+0x20>)
 800f040:	6818      	ldr	r0, [r3, #0]
 800f042:	b928      	cbnz	r0, 800f050 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f044:	2201      	movs	r2, #1
 800f046:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f048:	4770      	bx	lr
    stat = osErrorISR;
 800f04a:	f06f 0005 	mvn.w	r0, #5
 800f04e:	4770      	bx	lr
    } else {
      stat = osError;
 800f050:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	2400683c 	.word	0x2400683c

0800f05c <osKernelStart>:
 800f05c:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800f060:	b973      	cbnz	r3, 800f080 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800f062:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <osKernelStart+0x30>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b01      	cmp	r3, #1
 800f068:	d10d      	bne.n	800f086 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800f06a:	b510      	push	{r4, lr}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f06c:	2400      	movs	r4, #0
 800f06e:	4b08      	ldr	r3, [pc, #32]	; (800f090 <osKernelStart+0x34>)
 800f070:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f072:	4b06      	ldr	r3, [pc, #24]	; (800f08c <osKernelStart+0x30>)
 800f074:	2202      	movs	r2, #2
 800f076:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f078:	f001 fcbc 	bl	80109f4 <vTaskStartScheduler>
      stat = osOK;
 800f07c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800f07e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800f080:	f06f 0005 	mvn.w	r0, #5
 800f084:	4770      	bx	lr
      stat = osError;
 800f086:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f08a:	4770      	bx	lr
 800f08c:	2400683c 	.word	0x2400683c
 800f090:	e000ed00 	.word	0xe000ed00

0800f094 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f096:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f098:	2400      	movs	r4, #0
 800f09a:	9405      	str	r4, [sp, #20]
 800f09c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800f0a0:	bb74      	cbnz	r4, 800f100 <osThreadNew+0x6c>
 800f0a2:	b368      	cbz	r0, 800f100 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800f0a4:	b322      	cbz	r2, 800f0f0 <osThreadNew+0x5c>
      if (attr->name != NULL) {
 800f0a6:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800f0a8:	6993      	ldr	r3, [r2, #24]
 800f0aa:	b903      	cbnz	r3, 800f0ae <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 800f0ac:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f0ae:	1e5c      	subs	r4, r3, #1
 800f0b0:	2c37      	cmp	r4, #55	; 0x37
 800f0b2:	d849      	bhi.n	800f148 <osThreadNew+0xb4>
 800f0b4:	6854      	ldr	r4, [r2, #4]
 800f0b6:	f014 0f01 	tst.w	r4, #1
 800f0ba:	d147      	bne.n	800f14c <osThreadNew+0xb8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800f0bc:	6956      	ldr	r6, [r2, #20]
 800f0be:	b16e      	cbz	r6, 800f0dc <osThreadNew+0x48>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f0c0:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f0c4:	6894      	ldr	r4, [r2, #8]
 800f0c6:	b12c      	cbz	r4, 800f0d4 <osThreadNew+0x40>
 800f0c8:	68d7      	ldr	r7, [r2, #12]
 800f0ca:	2fbb      	cmp	r7, #187	; 0xbb
 800f0cc:	d902      	bls.n	800f0d4 <osThreadNew+0x40>
 800f0ce:	6917      	ldr	r7, [r2, #16]
 800f0d0:	b107      	cbz	r7, 800f0d4 <osThreadNew+0x40>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f0d2:	b9c6      	cbnz	r6, 800f106 <osThreadNew+0x72>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f0d4:	b12c      	cbz	r4, 800f0e2 <osThreadNew+0x4e>
    mem  = -1;
 800f0d6:	f04f 34ff 	mov.w	r4, #4294967295
 800f0da:	e00e      	b.n	800f0fa <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
 800f0dc:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800f0e0:	e7f0      	b.n	800f0c4 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f0e2:	68d4      	ldr	r4, [r2, #12]
 800f0e4:	b98c      	cbnz	r4, 800f10a <osThreadNew+0x76>
 800f0e6:	6914      	ldr	r4, [r2, #16]
 800f0e8:	b194      	cbz	r4, 800f110 <osThreadNew+0x7c>
    mem  = -1;
 800f0ea:	f04f 34ff 	mov.w	r4, #4294967295
 800f0ee:	e004      	b.n	800f0fa <osThreadNew+0x66>
    name = NULL;
 800f0f0:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800f0f2:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800f0f4:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800f0f6:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 800f0fa:	2c01      	cmp	r4, #1
 800f0fc:	d00a      	beq.n	800f114 <osThreadNew+0x80>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800f0fe:	b1ac      	cbz	r4, 800f12c <osThreadNew+0x98>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f100:	9805      	ldr	r0, [sp, #20]
}
 800f102:	b007      	add	sp, #28
 800f104:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800f106:	2401      	movs	r4, #1
 800f108:	e7f7      	b.n	800f0fa <osThreadNew+0x66>
    mem  = -1;
 800f10a:	f04f 34ff 	mov.w	r4, #4294967295
 800f10e:	e7f4      	b.n	800f0fa <osThreadNew+0x66>
          mem = 0;
 800f110:	2400      	movs	r4, #0
 800f112:	e7f2      	b.n	800f0fa <osThreadNew+0x66>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f114:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f116:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f118:	9202      	str	r2, [sp, #8]
 800f11a:	9401      	str	r4, [sp, #4]
 800f11c:	9300      	str	r3, [sp, #0]
 800f11e:	460b      	mov	r3, r1
 800f120:	4662      	mov	r2, ip
 800f122:	4629      	mov	r1, r5
 800f124:	f001 fbf6 	bl	8010914 <xTaskCreateStatic>
 800f128:	9005      	str	r0, [sp, #20]
 800f12a:	e7e9      	b.n	800f100 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f12c:	aa05      	add	r2, sp, #20
 800f12e:	9201      	str	r2, [sp, #4]
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	460b      	mov	r3, r1
 800f134:	fa1f f28c 	uxth.w	r2, ip
 800f138:	4629      	mov	r1, r5
 800f13a:	f001 fc26 	bl	801098a <xTaskCreate>
 800f13e:	2801      	cmp	r0, #1
 800f140:	d0de      	beq.n	800f100 <osThreadNew+0x6c>
            hTask = NULL;
 800f142:	2300      	movs	r3, #0
 800f144:	9305      	str	r3, [sp, #20]
 800f146:	e7db      	b.n	800f100 <osThreadNew+0x6c>
        return (NULL);
 800f148:	2000      	movs	r0, #0
 800f14a:	e7da      	b.n	800f102 <osThreadNew+0x6e>
 800f14c:	2000      	movs	r0, #0
 800f14e:	e7d8      	b.n	800f102 <osThreadNew+0x6e>

0800f150 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f150:	b570      	push	{r4, r5, r6, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d14d      	bne.n	800f1f8 <osSemaphoreNew+0xa8>
 800f15c:	460e      	mov	r6, r1
 800f15e:	4614      	mov	r4, r2
 800f160:	4288      	cmp	r0, r1
 800f162:	bf34      	ite	cc
 800f164:	2300      	movcc	r3, #0
 800f166:	2301      	movcs	r3, #1
 800f168:	2800      	cmp	r0, #0
 800f16a:	d049      	beq.n	800f200 <osSemaphoreNew+0xb0>
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d047      	beq.n	800f200 <osSemaphoreNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800f170:	b14a      	cbz	r2, 800f186 <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f172:	6895      	ldr	r5, [r2, #8]
 800f174:	b115      	cbz	r5, 800f17c <osSemaphoreNew+0x2c>
 800f176:	68d3      	ldr	r3, [r2, #12]
 800f178:	2b4f      	cmp	r3, #79	; 0x4f
 800f17a:	d814      	bhi.n	800f1a6 <osSemaphoreNew+0x56>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f17c:	2d00      	cmp	r5, #0
 800f17e:	d141      	bne.n	800f204 <osSemaphoreNew+0xb4>
 800f180:	68e3      	ldr	r3, [r4, #12]
 800f182:	b10b      	cbz	r3, 800f188 <osSemaphoreNew+0x38>
 800f184:	e039      	b.n	800f1fa <osSemaphoreNew+0xaa>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 800f186:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800f188:	2801      	cmp	r0, #1
 800f18a:	d00e      	beq.n	800f1aa <osSemaphoreNew+0x5a>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 800f18c:	bb73      	cbnz	r3, 800f1ec <osSemaphoreNew+0x9c>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f18e:	4631      	mov	r1, r6
 800f190:	f000 fe39 	bl	800fe06 <xQueueCreateCountingSemaphore>
 800f194:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f196:	b385      	cbz	r5, 800f1fa <osSemaphoreNew+0xaa>
        if (attr != NULL) {
 800f198:	b104      	cbz	r4, 800f19c <osSemaphoreNew+0x4c>
          name = attr->name;
 800f19a:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f19c:	4621      	mov	r1, r4
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f001 f9aa 	bl	80104f8 <vQueueAddToRegistry>
 800f1a4:	e029      	b.n	800f1fa <osSemaphoreNew+0xaa>
        mem = 1;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e7ee      	b.n	800f188 <osSemaphoreNew+0x38>
        if (mem == 1) {
 800f1aa:	b9b3      	cbnz	r3, 800f1da <osSemaphoreNew+0x8a>
            hSemaphore = xSemaphoreCreateBinary();
 800f1ac:	2203      	movs	r2, #3
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	2001      	movs	r0, #1
 800f1b2:	f000 fde1 	bl	800fd78 <xQueueGenericCreate>
 800f1b6:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f1b8:	2d00      	cmp	r5, #0
 800f1ba:	bf18      	it	ne
 800f1bc:	2e00      	cmpne	r6, #0
 800f1be:	d0ea      	beq.n	800f196 <osSemaphoreNew+0x46>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f000 fe3b 	bl	800fe42 <xQueueGenericSend>
 800f1cc:	2801      	cmp	r0, #1
 800f1ce:	d0e2      	beq.n	800f196 <osSemaphoreNew+0x46>
            vSemaphoreDelete (hSemaphore);
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	f001 f9bb 	bl	801054c <vQueueDelete>
            hSemaphore = NULL;
 800f1d6:	2500      	movs	r5, #0
 800f1d8:	e00f      	b.n	800f1fa <osSemaphoreNew+0xaa>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f1da:	68a3      	ldr	r3, [r4, #8]
 800f1dc:	2203      	movs	r2, #3
 800f1de:	9200      	str	r2, [sp, #0]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	4611      	mov	r1, r2
 800f1e4:	f000 fd75 	bl	800fcd2 <xQueueGenericCreateStatic>
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	e7e5      	b.n	800f1b8 <osSemaphoreNew+0x68>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f1ec:	68a2      	ldr	r2, [r4, #8]
 800f1ee:	4631      	mov	r1, r6
 800f1f0:	f000 fde6 	bl	800fdc0 <xQueueCreateCountingSemaphoreStatic>
 800f1f4:	4605      	mov	r5, r0
 800f1f6:	e7ce      	b.n	800f196 <osSemaphoreNew+0x46>
  hSemaphore = NULL;
 800f1f8:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	b002      	add	sp, #8
 800f1fe:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800f200:	2500      	movs	r5, #0
 800f202:	e7fa      	b.n	800f1fa <osSemaphoreNew+0xaa>
 800f204:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800f206:	e7f8      	b.n	800f1fa <osSemaphoreNew+0xaa>

0800f208 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f208:	b320      	cbz	r0, 800f254 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f20a:	b510      	push	{r4, lr}
 800f20c:	b082      	sub	sp, #8
 800f20e:	460c      	mov	r4, r1
 800f210:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f214:	b1b3      	cbz	r3, 800f244 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800f216:	bb01      	cbnz	r1, 800f25a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800f218:	2100      	movs	r1, #0
 800f21a:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f21c:	aa01      	add	r2, sp, #4
 800f21e:	f001 f916 	bl	801044e <xQueueReceiveFromISR>
 800f222:	2801      	cmp	r0, #1
 800f224:	d11c      	bne.n	800f260 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f226:	9801      	ldr	r0, [sp, #4]
 800f228:	b150      	cbz	r0, 800f240 <osSemaphoreAcquire+0x38>
 800f22a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f232:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f236:	f3bf 8f4f 	dsb	sy
 800f23a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f23e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f240:	b002      	add	sp, #8
 800f242:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f244:	f001 f830 	bl	80102a8 <xQueueSemaphoreTake>
 800f248:	2801      	cmp	r0, #1
 800f24a:	d00c      	beq.n	800f266 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800f24c:	b16c      	cbz	r4, 800f26a <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800f24e:	f06f 0001 	mvn.w	r0, #1
 800f252:	e7f5      	b.n	800f240 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800f254:	f06f 0003 	mvn.w	r0, #3
}
 800f258:	4770      	bx	lr
      stat = osErrorParameter;
 800f25a:	f06f 0003 	mvn.w	r0, #3
 800f25e:	e7ef      	b.n	800f240 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800f260:	f06f 0002 	mvn.w	r0, #2
 800f264:	e7ec      	b.n	800f240 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800f266:	2000      	movs	r0, #0
 800f268:	e7ea      	b.n	800f240 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800f26a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f26e:	e7e7      	b.n	800f240 <osSemaphoreAcquire+0x38>

0800f270 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800f270:	b320      	cbz	r0, 800f2bc <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f272:	b500      	push	{lr}
 800f274:	b083      	sub	sp, #12
 800f276:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f27a:	b1a3      	cbz	r3, 800f2a6 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800f27c:	2300      	movs	r3, #0
 800f27e:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f280:	a901      	add	r1, sp, #4
 800f282:	f000 ff09 	bl	8010098 <xQueueGiveFromISR>
 800f286:	2801      	cmp	r0, #1
 800f288:	d11b      	bne.n	800f2c2 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800f28a:	9801      	ldr	r0, [sp, #4]
 800f28c:	b198      	cbz	r0, 800f2b6 <osSemaphoreRelease+0x46>
 800f28e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f296:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f29a:	f3bf 8f4f 	dsb	sy
 800f29e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f2a2:	2000      	movs	r0, #0
 800f2a4:	e007      	b.n	800f2b6 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	f000 fdc9 	bl	800fe42 <xQueueGenericSend>
 800f2b0:	2801      	cmp	r0, #1
 800f2b2:	d109      	bne.n	800f2c8 <osSemaphoreRelease+0x58>
  stat = osOK;
 800f2b4:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800f2b6:	b003      	add	sp, #12
 800f2b8:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800f2bc:	f06f 0003 	mvn.w	r0, #3
}
 800f2c0:	4770      	bx	lr
      stat = osErrorResource;
 800f2c2:	f06f 0002 	mvn.w	r0, #2
 800f2c6:	e7f6      	b.n	800f2b6 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800f2c8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f2cc:	e7f3      	b.n	800f2b6 <osSemaphoreRelease+0x46>

0800f2ce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f2ce:	b570      	push	{r4, r5, r6, lr}
 800f2d0:	b082      	sub	sp, #8
 800f2d2:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d13d      	bne.n	800f356 <osMessageQueueNew+0x88>
 800f2da:	4614      	mov	r4, r2
 800f2dc:	1e0b      	subs	r3, r1, #0
 800f2de:	bf18      	it	ne
 800f2e0:	2301      	movne	r3, #1
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d03b      	beq.n	800f35e <osMessageQueueNew+0x90>
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d039      	beq.n	800f35e <osMessageQueueNew+0x90>
    mem = -1;

    if (attr != NULL) {
 800f2ea:	b36a      	cbz	r2, 800f348 <osMessageQueueNew+0x7a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f2ec:	6893      	ldr	r3, [r2, #8]
 800f2ee:	b14b      	cbz	r3, 800f304 <osMessageQueueNew+0x36>
 800f2f0:	68d2      	ldr	r2, [r2, #12]
 800f2f2:	2a4f      	cmp	r2, #79	; 0x4f
 800f2f4:	d906      	bls.n	800f304 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f2f6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f2f8:	b122      	cbz	r2, 800f304 <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f2fa:	fb01 f500 	mul.w	r5, r1, r0
 800f2fe:	6966      	ldr	r6, [r4, #20]
 800f300:	42ae      	cmp	r6, r5
 800f302:	d21b      	bcs.n	800f33c <osMessageQueueNew+0x6e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f304:	b173      	cbz	r3, 800f324 <osMessageQueueNew+0x56>
    mem = -1;
 800f306:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800f30a:	bb53      	cbnz	r3, 800f362 <osMessageQueueNew+0x94>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f30c:	2200      	movs	r2, #0
 800f30e:	f000 fd33 	bl	800fd78 <xQueueGenericCreate>
 800f312:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f314:	b305      	cbz	r5, 800f358 <osMessageQueueNew+0x8a>
      if (attr != NULL) {
 800f316:	b104      	cbz	r4, 800f31a <osMessageQueueNew+0x4c>
        name = attr->name;
 800f318:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800f31a:	4621      	mov	r1, r4
 800f31c:	4628      	mov	r0, r5
 800f31e:	f001 f8eb 	bl	80104f8 <vQueueAddToRegistry>
 800f322:	e019      	b.n	800f358 <osMessageQueueNew+0x8a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f324:	68e3      	ldr	r3, [r4, #12]
 800f326:	b98b      	cbnz	r3, 800f34c <osMessageQueueNew+0x7e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f328:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f32a:	b113      	cbz	r3, 800f332 <osMessageQueueNew+0x64>
    mem = -1;
 800f32c:	f04f 33ff 	mov.w	r3, #4294967295
 800f330:	e7eb      	b.n	800f30a <osMessageQueueNew+0x3c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f332:	6963      	ldr	r3, [r4, #20]
 800f334:	b16b      	cbz	r3, 800f352 <osMessageQueueNew+0x84>
    mem = -1;
 800f336:	f04f 33ff 	mov.w	r3, #4294967295
 800f33a:	e7e6      	b.n	800f30a <osMessageQueueNew+0x3c>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f33c:	2500      	movs	r5, #0
 800f33e:	9500      	str	r5, [sp, #0]
 800f340:	f000 fcc7 	bl	800fcd2 <xQueueGenericCreateStatic>
 800f344:	4605      	mov	r5, r0
 800f346:	e7e5      	b.n	800f314 <osMessageQueueNew+0x46>
      mem = 0;
 800f348:	2300      	movs	r3, #0
 800f34a:	e7de      	b.n	800f30a <osMessageQueueNew+0x3c>
    mem = -1;
 800f34c:	f04f 33ff 	mov.w	r3, #4294967295
 800f350:	e7db      	b.n	800f30a <osMessageQueueNew+0x3c>
          mem = 0;
 800f352:	2300      	movs	r3, #0
 800f354:	e7d9      	b.n	800f30a <osMessageQueueNew+0x3c>
  hQueue = NULL;
 800f356:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800f358:	4628      	mov	r0, r5
 800f35a:	b002      	add	sp, #8
 800f35c:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800f35e:	2500      	movs	r5, #0
 800f360:	e7fa      	b.n	800f358 <osMessageQueueNew+0x8a>
 800f362:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800f364:	e7f8      	b.n	800f358 <osMessageQueueNew+0x8a>

0800f366 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f366:	b510      	push	{r4, lr}
 800f368:	b082      	sub	sp, #8
 800f36a:	461c      	mov	r4, r3
 800f36c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f370:	b1d3      	cbz	r3, 800f3a8 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f372:	2900      	cmp	r1, #0
 800f374:	bf18      	it	ne
 800f376:	2800      	cmpne	r0, #0
 800f378:	d024      	beq.n	800f3c4 <osMessageQueuePut+0x5e>
 800f37a:	bb34      	cbnz	r4, 800f3ca <osMessageQueuePut+0x64>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800f37c:	2300      	movs	r3, #0
 800f37e:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f380:	aa01      	add	r2, sp, #4
 800f382:	f000 fe22 	bl	800ffca <xQueueGenericSendFromISR>
 800f386:	2801      	cmp	r0, #1
 800f388:	d122      	bne.n	800f3d0 <osMessageQueuePut+0x6a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f38a:	9801      	ldr	r0, [sp, #4]
 800f38c:	b150      	cbz	r0, 800f3a4 <osMessageQueuePut+0x3e>
 800f38e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f396:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f3a2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f3a4:	b002      	add	sp, #8
 800f3a6:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f3a8:	2900      	cmp	r1, #0
 800f3aa:	bf18      	it	ne
 800f3ac:	2800      	cmpne	r0, #0
 800f3ae:	d012      	beq.n	800f3d6 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	4622      	mov	r2, r4
 800f3b4:	f000 fd45 	bl	800fe42 <xQueueGenericSend>
 800f3b8:	2801      	cmp	r0, #1
 800f3ba:	d00f      	beq.n	800f3dc <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 800f3bc:	b184      	cbz	r4, 800f3e0 <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 800f3be:	f06f 0001 	mvn.w	r0, #1
 800f3c2:	e7ef      	b.n	800f3a4 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f3c4:	f06f 0003 	mvn.w	r0, #3
 800f3c8:	e7ec      	b.n	800f3a4 <osMessageQueuePut+0x3e>
 800f3ca:	f06f 0003 	mvn.w	r0, #3
 800f3ce:	e7e9      	b.n	800f3a4 <osMessageQueuePut+0x3e>
        stat = osErrorResource;
 800f3d0:	f06f 0002 	mvn.w	r0, #2
 800f3d4:	e7e6      	b.n	800f3a4 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f3d6:	f06f 0003 	mvn.w	r0, #3
 800f3da:	e7e3      	b.n	800f3a4 <osMessageQueuePut+0x3e>
  stat = osOK;
 800f3dc:	2000      	movs	r0, #0
 800f3de:	e7e1      	b.n	800f3a4 <osMessageQueuePut+0x3e>
          stat = osErrorResource;
 800f3e0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f3e4:	e7de      	b.n	800f3a4 <osMessageQueuePut+0x3e>

0800f3e6 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f3e6:	b510      	push	{r4, lr}
 800f3e8:	b082      	sub	sp, #8
 800f3ea:	461c      	mov	r4, r3
 800f3ec:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f3f0:	b1d3      	cbz	r3, 800f428 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f3f2:	2900      	cmp	r1, #0
 800f3f4:	bf18      	it	ne
 800f3f6:	2800      	cmpne	r0, #0
 800f3f8:	d023      	beq.n	800f442 <osMessageQueueGet+0x5c>
 800f3fa:	bb2c      	cbnz	r4, 800f448 <osMessageQueueGet+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f400:	aa01      	add	r2, sp, #4
 800f402:	f001 f824 	bl	801044e <xQueueReceiveFromISR>
 800f406:	2801      	cmp	r0, #1
 800f408:	d121      	bne.n	800f44e <osMessageQueueGet+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f40a:	9801      	ldr	r0, [sp, #4]
 800f40c:	b150      	cbz	r0, 800f424 <osMessageQueueGet+0x3e>
 800f40e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f416:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800f422:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f424:	b002      	add	sp, #8
 800f426:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f428:	2900      	cmp	r1, #0
 800f42a:	bf18      	it	ne
 800f42c:	2800      	cmpne	r0, #0
 800f42e:	d011      	beq.n	800f454 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f430:	4622      	mov	r2, r4
 800f432:	f000 fe8a 	bl	801014a <xQueueReceive>
 800f436:	2801      	cmp	r0, #1
 800f438:	d00f      	beq.n	800f45a <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 800f43a:	b184      	cbz	r4, 800f45e <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 800f43c:	f06f 0001 	mvn.w	r0, #1
 800f440:	e7f0      	b.n	800f424 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800f442:	f06f 0003 	mvn.w	r0, #3
 800f446:	e7ed      	b.n	800f424 <osMessageQueueGet+0x3e>
 800f448:	f06f 0003 	mvn.w	r0, #3
 800f44c:	e7ea      	b.n	800f424 <osMessageQueueGet+0x3e>
        stat = osErrorResource;
 800f44e:	f06f 0002 	mvn.w	r0, #2
 800f452:	e7e7      	b.n	800f424 <osMessageQueueGet+0x3e>
      stat = osErrorParameter;
 800f454:	f06f 0003 	mvn.w	r0, #3
 800f458:	e7e4      	b.n	800f424 <osMessageQueueGet+0x3e>
  stat = osOK;
 800f45a:	2000      	movs	r0, #0
 800f45c:	e7e2      	b.n	800f424 <osMessageQueueGet+0x3e>
          stat = osErrorResource;
 800f45e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800f462:	e7df      	b.n	800f424 <osMessageQueueGet+0x3e>

0800f464 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f464:	4b03      	ldr	r3, [pc, #12]	; (800f474 <vApplicationGetIdleTaskMemory+0x10>)
 800f466:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f468:	4b03      	ldr	r3, [pc, #12]	; (800f478 <vApplicationGetIdleTaskMemory+0x14>)
 800f46a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f46c:	2380      	movs	r3, #128	; 0x80
 800f46e:	6013      	str	r3, [r2, #0]
}
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop
 800f474:	24006780 	.word	0x24006780
 800f478:	24006580 	.word	0x24006580

0800f47c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f47c:	4b03      	ldr	r3, [pc, #12]	; (800f48c <vApplicationGetTimerTaskMemory+0x10>)
 800f47e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f480:	4b03      	ldr	r3, [pc, #12]	; (800f490 <vApplicationGetTimerTaskMemory+0x14>)
 800f482:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f484:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f488:	6013      	str	r3, [r2, #0]
}
 800f48a:	4770      	bx	lr
 800f48c:	24006c40 	.word	0x24006c40
 800f490:	24006840 	.word	0x24006840

0800f494 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f494:	4a12      	ldr	r2, [pc, #72]	; (800f4e0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f496:	f012 0f07 	tst.w	r2, #7
 800f49a:	d01e      	beq.n	800f4da <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f49c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f49e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f4a2:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 800f4a6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4a8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f4aa:	480e      	ldr	r0, [pc, #56]	; (800f4e4 <prvHeapInit+0x50>)
 800f4ac:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f4b2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800f4b4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f4b6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800f4ba:	480b      	ldr	r0, [pc, #44]	; (800f4e8 <prvHeapInit+0x54>)
 800f4bc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800f4be:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f4c0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f4c2:	1a99      	subs	r1, r3, r2
 800f4c4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f4c6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f4c8:	4b08      	ldr	r3, [pc, #32]	; (800f4ec <prvHeapInit+0x58>)
 800f4ca:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f4cc:	4b08      	ldr	r3, [pc, #32]	; (800f4f0 <prvHeapInit+0x5c>)
 800f4ce:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f4d0:	4b08      	ldr	r3, [pc, #32]	; (800f4f4 <prvHeapInit+0x60>)
 800f4d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f4d6:	601a      	str	r2, [r3, #0]
}
 800f4d8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f4da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4de:	e7e4      	b.n	800f4aa <prvHeapInit+0x16>
 800f4e0:	24006d00 	.word	0x24006d00
 800f4e4:	2400ed14 	.word	0x2400ed14
 800f4e8:	24006cfc 	.word	0x24006cfc
 800f4ec:	2400ed08 	.word	0x2400ed08
 800f4f0:	2400ed04 	.word	0x2400ed04
 800f4f4:	2400ed00 	.word	0x2400ed00

0800f4f8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f4f8:	4b16      	ldr	r3, [pc, #88]	; (800f554 <prvInsertBlockIntoFreeList+0x5c>)
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	4283      	cmp	r3, r0
 800f500:	d3fb      	bcc.n	800f4fa <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f502:	6851      	ldr	r1, [r2, #4]
 800f504:	eb02 0c01 	add.w	ip, r2, r1
 800f508:	4584      	cmp	ip, r0
 800f50a:	d009      	beq.n	800f520 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f50c:	6841      	ldr	r1, [r0, #4]
 800f50e:	eb00 0c01 	add.w	ip, r0, r1
 800f512:	4563      	cmp	r3, ip
 800f514:	d009      	beq.n	800f52a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f516:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f518:	4290      	cmp	r0, r2
 800f51a:	d019      	beq.n	800f550 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f51c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800f51e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f520:	6840      	ldr	r0, [r0, #4]
 800f522:	4401      	add	r1, r0
 800f524:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800f526:	4610      	mov	r0, r2
 800f528:	e7f0      	b.n	800f50c <prvInsertBlockIntoFreeList+0x14>
{
 800f52a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f52c:	4c0a      	ldr	r4, [pc, #40]	; (800f558 <prvInsertBlockIntoFreeList+0x60>)
 800f52e:	6824      	ldr	r4, [r4, #0]
 800f530:	42a3      	cmp	r3, r4
 800f532:	d00b      	beq.n	800f54c <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	4419      	add	r1, r3
 800f538:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f53a:	6813      	ldr	r3, [r2, #0]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800f540:	4290      	cmp	r0, r2
 800f542:	d000      	beq.n	800f546 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f544:	6010      	str	r0, [r2, #0]
	}
}
 800f546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f54a:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f54c:	6004      	str	r4, [r0, #0]
 800f54e:	e7f7      	b.n	800f540 <prvInsertBlockIntoFreeList+0x48>
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	2400ed14 	.word	0x2400ed14
 800f558:	24006cfc 	.word	0x24006cfc

0800f55c <pvPortMalloc>:
{
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800f560:	f001 fa9e 	bl	8010aa0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f564:	4b36      	ldr	r3, [pc, #216]	; (800f640 <pvPortMalloc+0xe4>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	b1a3      	cbz	r3, 800f594 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f56a:	4b36      	ldr	r3, [pc, #216]	; (800f644 <pvPortMalloc+0xe8>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	421d      	tst	r5, r3
 800f570:	d14e      	bne.n	800f610 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 800f572:	b135      	cbz	r5, 800f582 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800f574:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f576:	f015 0f07 	tst.w	r5, #7
 800f57a:	d002      	beq.n	800f582 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f57c:	f025 0507 	bic.w	r5, r5, #7
 800f580:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f582:	2d00      	cmp	r5, #0
 800f584:	d046      	beq.n	800f614 <pvPortMalloc+0xb8>
 800f586:	4b30      	ldr	r3, [pc, #192]	; (800f648 <pvPortMalloc+0xec>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	42ab      	cmp	r3, r5
 800f58c:	d351      	bcc.n	800f632 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800f58e:	4a2f      	ldr	r2, [pc, #188]	; (800f64c <pvPortMalloc+0xf0>)
 800f590:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f592:	e004      	b.n	800f59e <pvPortMalloc+0x42>
			prvHeapInit();
 800f594:	f7ff ff7e 	bl	800f494 <prvHeapInit>
 800f598:	e7e7      	b.n	800f56a <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800f59a:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800f59c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f59e:	6863      	ldr	r3, [r4, #4]
 800f5a0:	42ab      	cmp	r3, r5
 800f5a2:	d202      	bcs.n	800f5aa <pvPortMalloc+0x4e>
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1f7      	bne.n	800f59a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800f5aa:	4b25      	ldr	r3, [pc, #148]	; (800f640 <pvPortMalloc+0xe4>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	42a3      	cmp	r3, r4
 800f5b0:	d041      	beq.n	800f636 <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f5b2:	6816      	ldr	r6, [r2, #0]
 800f5b4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5b6:	6823      	ldr	r3, [r4, #0]
 800f5b8:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5ba:	6863      	ldr	r3, [r4, #4]
 800f5bc:	1b5b      	subs	r3, r3, r5
 800f5be:	2b10      	cmp	r3, #16
 800f5c0:	d910      	bls.n	800f5e4 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5c2:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5c4:	f010 0f07 	tst.w	r0, #7
 800f5c8:	d008      	beq.n	800f5dc <pvPortMalloc+0x80>
 800f5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	e7fe      	b.n	800f5da <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f5dc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f5de:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f5e0:	f7ff ff8a 	bl	800f4f8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f5e4:	6862      	ldr	r2, [r4, #4]
 800f5e6:	4918      	ldr	r1, [pc, #96]	; (800f648 <pvPortMalloc+0xec>)
 800f5e8:	680b      	ldr	r3, [r1, #0]
 800f5ea:	1a9b      	subs	r3, r3, r2
 800f5ec:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f5ee:	4918      	ldr	r1, [pc, #96]	; (800f650 <pvPortMalloc+0xf4>)
 800f5f0:	6809      	ldr	r1, [r1, #0]
 800f5f2:	428b      	cmp	r3, r1
 800f5f4:	d201      	bcs.n	800f5fa <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f5f6:	4916      	ldr	r1, [pc, #88]	; (800f650 <pvPortMalloc+0xf4>)
 800f5f8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f5fa:	4b12      	ldr	r3, [pc, #72]	; (800f644 <pvPortMalloc+0xe8>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4313      	orrs	r3, r2
 800f600:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f602:	2300      	movs	r3, #0
 800f604:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800f606:	4a13      	ldr	r2, [pc, #76]	; (800f654 <pvPortMalloc+0xf8>)
 800f608:	6813      	ldr	r3, [r2, #0]
 800f60a:	3301      	adds	r3, #1
 800f60c:	6013      	str	r3, [r2, #0]
 800f60e:	e002      	b.n	800f616 <pvPortMalloc+0xba>
void *pvReturn = NULL;
 800f610:	2600      	movs	r6, #0
 800f612:	e000      	b.n	800f616 <pvPortMalloc+0xba>
 800f614:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800f616:	f001 fadd 	bl	8010bd4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f61a:	f016 0f07 	tst.w	r6, #7
 800f61e:	d00c      	beq.n	800f63a <pvPortMalloc+0xde>
 800f620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f624:	f383 8811 	msr	BASEPRI, r3
 800f628:	f3bf 8f6f 	isb	sy
 800f62c:	f3bf 8f4f 	dsb	sy
 800f630:	e7fe      	b.n	800f630 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 800f632:	2600      	movs	r6, #0
 800f634:	e7ef      	b.n	800f616 <pvPortMalloc+0xba>
 800f636:	2600      	movs	r6, #0
 800f638:	e7ed      	b.n	800f616 <pvPortMalloc+0xba>
}
 800f63a:	4630      	mov	r0, r6
 800f63c:	bd70      	pop	{r4, r5, r6, pc}
 800f63e:	bf00      	nop
 800f640:	24006cfc 	.word	0x24006cfc
 800f644:	2400ed00 	.word	0x2400ed00
 800f648:	2400ed04 	.word	0x2400ed04
 800f64c:	2400ed14 	.word	0x2400ed14
 800f650:	2400ed08 	.word	0x2400ed08
 800f654:	2400ed0c 	.word	0x2400ed0c

0800f658 <vPortFree>:
	if( pv != NULL )
 800f658:	2800      	cmp	r0, #0
 800f65a:	d034      	beq.n	800f6c6 <vPortFree+0x6e>
{
 800f65c:	b538      	push	{r3, r4, r5, lr}
 800f65e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800f660:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f664:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f668:	4a17      	ldr	r2, [pc, #92]	; (800f6c8 <vPortFree+0x70>)
 800f66a:	6812      	ldr	r2, [r2, #0]
 800f66c:	4213      	tst	r3, r2
 800f66e:	d108      	bne.n	800f682 <vPortFree+0x2a>
 800f670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	e7fe      	b.n	800f680 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f682:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800f686:	b141      	cbz	r1, 800f69a <vPortFree+0x42>
 800f688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68c:	f383 8811 	msr	BASEPRI, r3
 800f690:	f3bf 8f6f 	isb	sy
 800f694:	f3bf 8f4f 	dsb	sy
 800f698:	e7fe      	b.n	800f698 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f69a:	ea23 0302 	bic.w	r3, r3, r2
 800f69e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800f6a2:	f001 f9fd 	bl	8010aa0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f6a6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800f6aa:	4a08      	ldr	r2, [pc, #32]	; (800f6cc <vPortFree+0x74>)
 800f6ac:	6813      	ldr	r3, [r2, #0]
 800f6ae:	440b      	add	r3, r1
 800f6b0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	f7ff ff20 	bl	800f4f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f6b8:	4a05      	ldr	r2, [pc, #20]	; (800f6d0 <vPortFree+0x78>)
 800f6ba:	6813      	ldr	r3, [r2, #0]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800f6c0:	f001 fa88 	bl	8010bd4 <xTaskResumeAll>
}
 800f6c4:	bd38      	pop	{r3, r4, r5, pc}
 800f6c6:	4770      	bx	lr
 800f6c8:	2400ed00 	.word	0x2400ed00
 800f6cc:	2400ed04 	.word	0x2400ed04
 800f6d0:	2400ed10 	.word	0x2400ed10

0800f6d4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6d4:	f100 0308 	add.w	r3, r0, #8
 800f6d8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f6da:	f04f 32ff 	mov.w	r2, #4294967295
 800f6de:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6e0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6e2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f6e8:	4770      	bx	lr

0800f6ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f6ee:	4770      	bx	lr

0800f6f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800f6f0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f6f2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f6f4:	689a      	ldr	r2, [r3, #8]
 800f6f6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f6f8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f6fa:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f6fc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800f6fe:	6803      	ldr	r3, [r0, #0]
 800f700:	3301      	adds	r3, #1
 800f702:	6003      	str	r3, [r0, #0]
}
 800f704:	4770      	bx	lr

0800f706 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f706:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f708:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f70a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800f70e:	d011      	beq.n	800f734 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f710:	f100 0308 	add.w	r3, r0, #8
 800f714:	461c      	mov	r4, r3
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	681a      	ldr	r2, [r3, #0]
 800f71a:	42aa      	cmp	r2, r5
 800f71c:	d9fa      	bls.n	800f714 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f71e:	6863      	ldr	r3, [r4, #4]
 800f720:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f722:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f724:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800f726:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f728:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800f72a:	6803      	ldr	r3, [r0, #0]
 800f72c:	3301      	adds	r3, #1
 800f72e:	6003      	str	r3, [r0, #0]
}
 800f730:	bc30      	pop	{r4, r5}
 800f732:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800f734:	6904      	ldr	r4, [r0, #16]
 800f736:	e7f2      	b.n	800f71e <vListInsert+0x18>

0800f738 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f738:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f73a:	6841      	ldr	r1, [r0, #4]
 800f73c:	6882      	ldr	r2, [r0, #8]
 800f73e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f740:	6841      	ldr	r1, [r0, #4]
 800f742:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f744:	685a      	ldr	r2, [r3, #4]
 800f746:	4282      	cmp	r2, r0
 800f748:	d006      	beq.n	800f758 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f74a:	2200      	movs	r2, #0
 800f74c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	3a01      	subs	r2, #1
 800f752:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f754:	6818      	ldr	r0, [r3, #0]
}
 800f756:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f758:	6882      	ldr	r2, [r0, #8]
 800f75a:	605a      	str	r2, [r3, #4]
 800f75c:	e7f5      	b.n	800f74a <uxListRemove+0x12>
	...

0800f760 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f760:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800f762:	2300      	movs	r3, #0
 800f764:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f766:	4b0d      	ldr	r3, [pc, #52]	; (800f79c <prvTaskExitError+0x3c>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f76e:	d008      	beq.n	800f782 <prvTaskExitError+0x22>
 800f770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	e7fe      	b.n	800f780 <prvTaskExitError+0x20>
 800f782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f786:	f383 8811 	msr	BASEPRI, r3
 800f78a:	f3bf 8f6f 	isb	sy
 800f78e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f792:	9b01      	ldr	r3, [sp, #4]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d0fc      	beq.n	800f792 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f798:	b002      	add	sp, #8
 800f79a:	4770      	bx	lr
 800f79c:	24000080 	.word	0x24000080

0800f7a0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f7a0:	4808      	ldr	r0, [pc, #32]	; (800f7c4 <prvPortStartFirstTask+0x24>)
 800f7a2:	6800      	ldr	r0, [r0, #0]
 800f7a4:	6800      	ldr	r0, [r0, #0]
 800f7a6:	f380 8808 	msr	MSP, r0
 800f7aa:	f04f 0000 	mov.w	r0, #0
 800f7ae:	f380 8814 	msr	CONTROL, r0
 800f7b2:	b662      	cpsie	i
 800f7b4:	b661      	cpsie	f
 800f7b6:	f3bf 8f4f 	dsb	sy
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	df00      	svc	0
 800f7c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f7c2:	0000      	.short	0x0000
 800f7c4:	e000ed08 	.word	0xe000ed08

0800f7c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f7c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f7d8 <vPortEnableVFP+0x10>
 800f7cc:	6801      	ldr	r1, [r0, #0]
 800f7ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f7d2:	6001      	str	r1, [r0, #0]
 800f7d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f7d6:	0000      	.short	0x0000
 800f7d8:	e000ed88 	.word	0xe000ed88

0800f7dc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f7dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f7e0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f7e4:	f021 0101 	bic.w	r1, r1, #1
 800f7e8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f7ec:	4b05      	ldr	r3, [pc, #20]	; (800f804 <pxPortInitialiseStack+0x28>)
 800f7ee:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f7f2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f7f6:	f06f 0302 	mvn.w	r3, #2
 800f7fa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800f7fe:	3844      	subs	r0, #68	; 0x44
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	0800f761 	.word	0x0800f761
	...

0800f810 <SVC_Handler>:
	__asm volatile (
 800f810:	4b07      	ldr	r3, [pc, #28]	; (800f830 <pxCurrentTCBConst2>)
 800f812:	6819      	ldr	r1, [r3, #0]
 800f814:	6808      	ldr	r0, [r1, #0]
 800f816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81a:	f380 8809 	msr	PSP, r0
 800f81e:	f3bf 8f6f 	isb	sy
 800f822:	f04f 0000 	mov.w	r0, #0
 800f826:	f380 8811 	msr	BASEPRI, r0
 800f82a:	4770      	bx	lr
 800f82c:	f3af 8000 	nop.w

0800f830 <pxCurrentTCBConst2>:
 800f830:	2400ed64 	.word	0x2400ed64

0800f834 <vPortEnterCritical>:
 800f834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f838:	f383 8811 	msr	BASEPRI, r3
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800f844:	4a0b      	ldr	r2, [pc, #44]	; (800f874 <vPortEnterCritical+0x40>)
 800f846:	6813      	ldr	r3, [r2, #0]
 800f848:	3301      	adds	r3, #1
 800f84a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d000      	beq.n	800f852 <vPortEnterCritical+0x1e>
}
 800f850:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f852:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f856:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800f85a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f85e:	d0f7      	beq.n	800f850 <vPortEnterCritical+0x1c>
 800f860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f864:	f383 8811 	msr	BASEPRI, r3
 800f868:	f3bf 8f6f 	isb	sy
 800f86c:	f3bf 8f4f 	dsb	sy
 800f870:	e7fe      	b.n	800f870 <vPortEnterCritical+0x3c>
 800f872:	bf00      	nop
 800f874:	24000080 	.word	0x24000080

0800f878 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f878:	4b09      	ldr	r3, [pc, #36]	; (800f8a0 <vPortExitCritical+0x28>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	b943      	cbnz	r3, 800f890 <vPortExitCritical+0x18>
 800f87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	e7fe      	b.n	800f88e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800f890:	3b01      	subs	r3, #1
 800f892:	4a03      	ldr	r2, [pc, #12]	; (800f8a0 <vPortExitCritical+0x28>)
 800f894:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f896:	b90b      	cbnz	r3, 800f89c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f898:	f383 8811 	msr	BASEPRI, r3
}
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop
 800f8a0:	24000080 	.word	0x24000080
	...

0800f8b0 <PendSV_Handler>:
	__asm volatile
 800f8b0:	f3ef 8009 	mrs	r0, PSP
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	4b15      	ldr	r3, [pc, #84]	; (800f910 <pxCurrentTCBConst>)
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	f01e 0f10 	tst.w	lr, #16
 800f8c0:	bf08      	it	eq
 800f8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ca:	6010      	str	r0, [r2, #0]
 800f8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f8d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f8d4:	f380 8811 	msr	BASEPRI, r0
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	f001 f9f4 	bl	8010ccc <vTaskSwitchContext>
 800f8e4:	f04f 0000 	mov.w	r0, #0
 800f8e8:	f380 8811 	msr	BASEPRI, r0
 800f8ec:	bc09      	pop	{r0, r3}
 800f8ee:	6819      	ldr	r1, [r3, #0]
 800f8f0:	6808      	ldr	r0, [r1, #0]
 800f8f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f6:	f01e 0f10 	tst.w	lr, #16
 800f8fa:	bf08      	it	eq
 800f8fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f900:	f380 8809 	msr	PSP, r0
 800f904:	f3bf 8f6f 	isb	sy
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop
 800f90c:	f3af 8000 	nop.w

0800f910 <pxCurrentTCBConst>:
 800f910:	2400ed64 	.word	0x2400ed64

0800f914 <xPortSysTickHandler>:
{
 800f914:	b508      	push	{r3, lr}
	__asm volatile
 800f916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91a:	f383 8811 	msr	BASEPRI, r3
 800f91e:	f3bf 8f6f 	isb	sy
 800f922:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800f926:	f001 f8c9 	bl	8010abc <xTaskIncrementTick>
 800f92a:	b128      	cbz	r0, 800f938 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f92c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f934:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800f938:	2300      	movs	r3, #0
 800f93a:	f383 8811 	msr	BASEPRI, r3
}
 800f93e:	bd08      	pop	{r3, pc}

0800f940 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f940:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800f944:	2300      	movs	r3, #0
 800f946:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f948:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f94a:	4b05      	ldr	r3, [pc, #20]	; (800f960 <vPortSetupTimerInterrupt+0x20>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4905      	ldr	r1, [pc, #20]	; (800f964 <vPortSetupTimerInterrupt+0x24>)
 800f950:	fba1 1303 	umull	r1, r3, r1, r3
 800f954:	099b      	lsrs	r3, r3, #6
 800f956:	3b01      	subs	r3, #1
 800f958:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f95a:	2307      	movs	r3, #7
 800f95c:	6113      	str	r3, [r2, #16]
}
 800f95e:	4770      	bx	lr
 800f960:	24000070 	.word	0x24000070
 800f964:	10624dd3 	.word	0x10624dd3

0800f968 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f968:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f96c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800f970:	4b3d      	ldr	r3, [pc, #244]	; (800fa68 <xPortStartScheduler+0x100>)
 800f972:	429a      	cmp	r2, r3
 800f974:	d01c      	beq.n	800f9b0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f976:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f97a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800f97e:	4b3b      	ldr	r3, [pc, #236]	; (800fa6c <xPortStartScheduler+0x104>)
 800f980:	429a      	cmp	r2, r3
 800f982:	d01e      	beq.n	800f9c2 <xPortStartScheduler+0x5a>
{
 800f984:	b530      	push	{r4, r5, lr}
 800f986:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f988:	4b39      	ldr	r3, [pc, #228]	; (800fa70 <xPortStartScheduler+0x108>)
 800f98a:	781a      	ldrb	r2, [r3, #0]
 800f98c:	b2d2      	uxtb	r2, r2
 800f98e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f990:	22ff      	movs	r2, #255	; 0xff
 800f992:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	b2db      	uxtb	r3, r3
 800f998:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f99c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f9a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f9a4:	4a33      	ldr	r2, [pc, #204]	; (800fa74 <xPortStartScheduler+0x10c>)
 800f9a6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f9a8:	4b33      	ldr	r3, [pc, #204]	; (800fa78 <xPortStartScheduler+0x110>)
 800f9aa:	2207      	movs	r2, #7
 800f9ac:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f9ae:	e01b      	b.n	800f9e8 <xPortStartScheduler+0x80>
	__asm volatile
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f9c0:	e7fe      	b.n	800f9c0 <xPortStartScheduler+0x58>
 800f9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c6:	f383 8811 	msr	BASEPRI, r3
 800f9ca:	f3bf 8f6f 	isb	sy
 800f9ce:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f9d2:	e7fe      	b.n	800f9d2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800f9d4:	4a28      	ldr	r2, [pc, #160]	; (800fa78 <xPortStartScheduler+0x110>)
 800f9d6:	6813      	ldr	r3, [r2, #0]
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f9dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f9e0:	005b      	lsls	r3, r3, #1
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f9e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f9ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f9f0:	d1f0      	bne.n	800f9d4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f9f2:	4b21      	ldr	r3, [pc, #132]	; (800fa78 <xPortStartScheduler+0x110>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b03      	cmp	r3, #3
 800f9f8:	d008      	beq.n	800fa0c <xPortStartScheduler+0xa4>
 800f9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	e7fe      	b.n	800fa0a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fa0c:	021b      	lsls	r3, r3, #8
 800fa0e:	4a1a      	ldr	r2, [pc, #104]	; (800fa78 <xPortStartScheduler+0x110>)
 800fa10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fa12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fa16:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fa18:	9b01      	ldr	r3, [sp, #4]
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	4a14      	ldr	r2, [pc, #80]	; (800fa70 <xPortStartScheduler+0x108>)
 800fa1e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fa20:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800fa24:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800fa28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fa2c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fa30:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800fa34:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fa38:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800fa3c:	f7ff ff80 	bl	800f940 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800fa40:	2500      	movs	r5, #0
 800fa42:	4b0e      	ldr	r3, [pc, #56]	; (800fa7c <xPortStartScheduler+0x114>)
 800fa44:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800fa46:	f7ff febf 	bl	800f7c8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fa4a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800fa4e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fa52:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800fa56:	f7ff fea3 	bl	800f7a0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800fa5a:	f001 f937 	bl	8010ccc <vTaskSwitchContext>
	prvTaskExitError();
 800fa5e:	f7ff fe7f 	bl	800f760 <prvTaskExitError>
}
 800fa62:	4628      	mov	r0, r5
 800fa64:	b003      	add	sp, #12
 800fa66:	bd30      	pop	{r4, r5, pc}
 800fa68:	410fc271 	.word	0x410fc271
 800fa6c:	410fc270 	.word	0x410fc270
 800fa70:	e000e400 	.word	0xe000e400
 800fa74:	2400ed1c 	.word	0x2400ed1c
 800fa78:	2400ed20 	.word	0x2400ed20
 800fa7c:	24000080 	.word	0x24000080

0800fa80 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fa80:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fa84:	2b0f      	cmp	r3, #15
 800fa86:	d90f      	bls.n	800faa8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fa88:	4a11      	ldr	r2, [pc, #68]	; (800fad0 <vPortValidateInterruptPriority+0x50>)
 800fa8a:	5c9b      	ldrb	r3, [r3, r2]
 800fa8c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fa8e:	4a11      	ldr	r2, [pc, #68]	; (800fad4 <vPortValidateInterruptPriority+0x54>)
 800fa90:	7812      	ldrb	r2, [r2, #0]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d908      	bls.n	800faa8 <vPortValidateInterruptPriority+0x28>
 800fa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa9a:	f383 8811 	msr	BASEPRI, r3
 800fa9e:	f3bf 8f6f 	isb	sy
 800faa2:	f3bf 8f4f 	dsb	sy
 800faa6:	e7fe      	b.n	800faa6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800faa8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800faac:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800fab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fab4:	4a08      	ldr	r2, [pc, #32]	; (800fad8 <vPortValidateInterruptPriority+0x58>)
 800fab6:	6812      	ldr	r2, [r2, #0]
 800fab8:	4293      	cmp	r3, r2
 800faba:	d908      	bls.n	800face <vPortValidateInterruptPriority+0x4e>
 800fabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	e7fe      	b.n	800facc <vPortValidateInterruptPriority+0x4c>
	}
 800face:	4770      	bx	lr
 800fad0:	e000e3f0 	.word	0xe000e3f0
 800fad4:	2400ed1c 	.word	0x2400ed1c
 800fad8:	2400ed20 	.word	0x2400ed20

0800fadc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fadc:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fade:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fae0:	b118      	cbz	r0, 800faea <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fae4:	6818      	ldr	r0, [r3, #0]
 800fae6:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800faea:	4770      	bx	lr

0800faec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800faec:	b510      	push	{r4, lr}
 800faee:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800faf0:	f7ff fea0 	bl	800f834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800faf4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800faf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d004      	beq.n	800fb06 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800fafc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800fafe:	f7ff febb 	bl	800f878 <vPortExitCritical>

	return xReturn;
}
 800fb02:	4620      	mov	r0, r4
 800fb04:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800fb06:	2401      	movs	r4, #1
 800fb08:	e7f9      	b.n	800fafe <prvIsQueueFull+0x12>

0800fb0a <prvIsQueueEmpty>:
{
 800fb0a:	b510      	push	{r4, lr}
 800fb0c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800fb0e:	f7ff fe91 	bl	800f834 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fb12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fb14:	b923      	cbnz	r3, 800fb20 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800fb16:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800fb18:	f7ff feae 	bl	800f878 <vPortExitCritical>
}
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800fb20:	2400      	movs	r4, #0
 800fb22:	e7f9      	b.n	800fb18 <prvIsQueueEmpty+0xe>

0800fb24 <prvCopyDataToQueue>:
{
 800fb24:	b570      	push	{r4, r5, r6, lr}
 800fb26:	4604      	mov	r4, r0
 800fb28:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb2a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fb2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fb2e:	b95a      	cbnz	r2, 800fb48 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb30:	6803      	ldr	r3, [r0, #0]
 800fb32:	b11b      	cbz	r3, 800fb3c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800fb34:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fb36:	3601      	adds	r6, #1
 800fb38:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800fb3a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fb3c:	6880      	ldr	r0, [r0, #8]
 800fb3e:	f001 fa3f 	bl	8010fc0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fb42:	2300      	movs	r3, #0
 800fb44:	60a3      	str	r3, [r4, #8]
 800fb46:	e7f6      	b.n	800fb36 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800fb48:	b96d      	cbnz	r5, 800fb66 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fb4a:	6840      	ldr	r0, [r0, #4]
 800fb4c:	f013 faca 	bl	80230e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fb50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fb52:	6863      	ldr	r3, [r4, #4]
 800fb54:	4413      	add	r3, r2
 800fb56:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fb58:	68a2      	ldr	r2, [r4, #8]
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d319      	bcc.n	800fb92 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fb5e:	6823      	ldr	r3, [r4, #0]
 800fb60:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800fb62:	4628      	mov	r0, r5
 800fb64:	e7e7      	b.n	800fb36 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fb66:	68c0      	ldr	r0, [r0, #12]
 800fb68:	f013 fabc 	bl	80230e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fb6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800fb6e:	4251      	negs	r1, r2
 800fb70:	68e3      	ldr	r3, [r4, #12]
 800fb72:	1a9b      	subs	r3, r3, r2
 800fb74:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fb76:	6822      	ldr	r2, [r4, #0]
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d202      	bcs.n	800fb82 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fb7c:	68a3      	ldr	r3, [r4, #8]
 800fb7e:	440b      	add	r3, r1
 800fb80:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800fb82:	2d02      	cmp	r5, #2
 800fb84:	d001      	beq.n	800fb8a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800fb86:	2000      	movs	r0, #0
 800fb88:	e7d5      	b.n	800fb36 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fb8a:	b126      	cbz	r6, 800fb96 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800fb8c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800fb8e:	2000      	movs	r0, #0
 800fb90:	e7d1      	b.n	800fb36 <prvCopyDataToQueue+0x12>
 800fb92:	4628      	mov	r0, r5
 800fb94:	e7cf      	b.n	800fb36 <prvCopyDataToQueue+0x12>
 800fb96:	2000      	movs	r0, #0
 800fb98:	e7cd      	b.n	800fb36 <prvCopyDataToQueue+0x12>

0800fb9a <prvCopyDataFromQueue>:
{
 800fb9a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fb9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800fb9e:	b16a      	cbz	r2, 800fbbc <prvCopyDataFromQueue+0x22>
{
 800fba0:	b510      	push	{r4, lr}
 800fba2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fba4:	68d9      	ldr	r1, [r3, #12]
 800fba6:	4411      	add	r1, r2
 800fba8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fbaa:	689c      	ldr	r4, [r3, #8]
 800fbac:	42a1      	cmp	r1, r4
 800fbae:	d301      	bcc.n	800fbb4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fbb0:	6819      	ldr	r1, [r3, #0]
 800fbb2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fbb4:	68d9      	ldr	r1, [r3, #12]
 800fbb6:	f013 fa95 	bl	80230e4 <memcpy>
}
 800fbba:	bd10      	pop	{r4, pc}
 800fbbc:	4770      	bx	lr

0800fbbe <prvUnlockQueue>:
{
 800fbbe:	b538      	push	{r3, r4, r5, lr}
 800fbc0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800fbc2:	f7ff fe37 	bl	800f834 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800fbc6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800fbca:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fbcc:	e001      	b.n	800fbd2 <prvUnlockQueue+0x14>
			--cTxLock;
 800fbce:	3c01      	subs	r4, #1
 800fbd0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fbd2:	2c00      	cmp	r4, #0
 800fbd4:	dd0a      	ble.n	800fbec <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fbd8:	b143      	cbz	r3, 800fbec <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbda:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800fbde:	f001 f8f9 	bl	8010dd4 <xTaskRemoveFromEventList>
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d0f3      	beq.n	800fbce <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800fbe6:	f001 f989 	bl	8010efc <vTaskMissedYield>
 800fbea:	e7f0      	b.n	800fbce <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800fbec:	23ff      	movs	r3, #255	; 0xff
 800fbee:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800fbf2:	f7ff fe41 	bl	800f878 <vPortExitCritical>
	taskENTER_CRITICAL();
 800fbf6:	f7ff fe1d 	bl	800f834 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800fbfa:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800fbfe:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fc00:	e001      	b.n	800fc06 <prvUnlockQueue+0x48>
				--cRxLock;
 800fc02:	3c01      	subs	r4, #1
 800fc04:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fc06:	2c00      	cmp	r4, #0
 800fc08:	dd0a      	ble.n	800fc20 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc0a:	692b      	ldr	r3, [r5, #16]
 800fc0c:	b143      	cbz	r3, 800fc20 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc0e:	f105 0010 	add.w	r0, r5, #16
 800fc12:	f001 f8df 	bl	8010dd4 <xTaskRemoveFromEventList>
 800fc16:	2800      	cmp	r0, #0
 800fc18:	d0f3      	beq.n	800fc02 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800fc1a:	f001 f96f 	bl	8010efc <vTaskMissedYield>
 800fc1e:	e7f0      	b.n	800fc02 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800fc20:	23ff      	movs	r3, #255	; 0xff
 800fc22:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800fc26:	f7ff fe27 	bl	800f878 <vPortExitCritical>
}
 800fc2a:	bd38      	pop	{r3, r4, r5, pc}

0800fc2c <xQueueGenericReset>:
{
 800fc2c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800fc2e:	b1e0      	cbz	r0, 800fc6a <xQueueGenericReset+0x3e>
 800fc30:	460d      	mov	r5, r1
 800fc32:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800fc34:	f7ff fdfe 	bl	800f834 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc38:	6823      	ldr	r3, [r4, #0]
 800fc3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fc3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fc3e:	fb01 3002 	mla	r0, r1, r2, r3
 800fc42:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fc44:	2000      	movs	r0, #0
 800fc46:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc48:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc4a:	3a01      	subs	r2, #1
 800fc4c:	fb02 3301 	mla	r3, r2, r1, r3
 800fc50:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fc52:	23ff      	movs	r3, #255	; 0xff
 800fc54:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fc58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800fc5c:	b9fd      	cbnz	r5, 800fc9e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc5e:	6923      	ldr	r3, [r4, #16]
 800fc60:	b963      	cbnz	r3, 800fc7c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800fc62:	f7ff fe09 	bl	800f878 <vPortExitCritical>
}
 800fc66:	2001      	movs	r0, #1
 800fc68:	bd38      	pop	{r3, r4, r5, pc}
 800fc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6e:	f383 8811 	msr	BASEPRI, r3
 800fc72:	f3bf 8f6f 	isb	sy
 800fc76:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800fc7a:	e7fe      	b.n	800fc7a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc7c:	f104 0010 	add.w	r0, r4, #16
 800fc80:	f001 f8a8 	bl	8010dd4 <xTaskRemoveFromEventList>
 800fc84:	2800      	cmp	r0, #0
 800fc86:	d0ec      	beq.n	800fc62 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800fc88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fc8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc90:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fc94:	f3bf 8f4f 	dsb	sy
 800fc98:	f3bf 8f6f 	isb	sy
 800fc9c:	e7e1      	b.n	800fc62 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fc9e:	f104 0010 	add.w	r0, r4, #16
 800fca2:	f7ff fd17 	bl	800f6d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fca6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fcaa:	f7ff fd13 	bl	800f6d4 <vListInitialise>
 800fcae:	e7d8      	b.n	800fc62 <xQueueGenericReset+0x36>

0800fcb0 <prvInitialiseNewQueue>:
{
 800fcb0:	b538      	push	{r3, r4, r5, lr}
 800fcb2:	461d      	mov	r5, r3
 800fcb4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	b949      	cbnz	r1, 800fcce <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fcba:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800fcbc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fcbe:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fcc0:	2101      	movs	r1, #1
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	f7ff ffb2 	bl	800fc2c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800fcc8:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800fccc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fcce:	6022      	str	r2, [r4, #0]
 800fcd0:	e7f4      	b.n	800fcbc <prvInitialiseNewQueue+0xc>

0800fcd2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fcd2:	b940      	cbnz	r0, 800fce6 <xQueueGenericCreateStatic+0x14>
 800fcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd8:	f383 8811 	msr	BASEPRI, r3
 800fcdc:	f3bf 8f6f 	isb	sy
 800fce0:	f3bf 8f4f 	dsb	sy
 800fce4:	e7fe      	b.n	800fce4 <xQueueGenericCreateStatic+0x12>
	{
 800fce6:	b510      	push	{r4, lr}
 800fce8:	b084      	sub	sp, #16
 800fcea:	461c      	mov	r4, r3
		configASSERT( pxStaticQueue != NULL );
 800fcec:	b183      	cbz	r3, 800fd10 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fcee:	1e0b      	subs	r3, r1, #0
 800fcf0:	bf18      	it	ne
 800fcf2:	2301      	movne	r3, #1
 800fcf4:	2a00      	cmp	r2, #0
 800fcf6:	bf08      	it	eq
 800fcf8:	f043 0301 	orreq.w	r3, r3, #1
 800fcfc:	b98b      	cbnz	r3, 800fd22 <xQueueGenericCreateStatic+0x50>
 800fcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	e7fe      	b.n	800fd0e <xQueueGenericCreateStatic+0x3c>
 800fd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd14:	f383 8811 	msr	BASEPRI, r3
 800fd18:	f3bf 8f6f 	isb	sy
 800fd1c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800fd20:	e7fe      	b.n	800fd20 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fd22:	fab1 f381 	clz	r3, r1
 800fd26:	095b      	lsrs	r3, r3, #5
 800fd28:	2a00      	cmp	r2, #0
 800fd2a:	bf18      	it	ne
 800fd2c:	f043 0301 	orrne.w	r3, r3, #1
 800fd30:	b943      	cbnz	r3, 800fd44 <xQueueGenericCreateStatic+0x72>
 800fd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd36:	f383 8811 	msr	BASEPRI, r3
 800fd3a:	f3bf 8f6f 	isb	sy
 800fd3e:	f3bf 8f4f 	dsb	sy
 800fd42:	e7fe      	b.n	800fd42 <xQueueGenericCreateStatic+0x70>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fd44:	2350      	movs	r3, #80	; 0x50
 800fd46:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fd48:	9b03      	ldr	r3, [sp, #12]
 800fd4a:	2b50      	cmp	r3, #80	; 0x50
 800fd4c:	d008      	beq.n	800fd60 <xQueueGenericCreateStatic+0x8e>
 800fd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd52:	f383 8811 	msr	BASEPRI, r3
 800fd56:	f3bf 8f6f 	isb	sy
 800fd5a:	f3bf 8f4f 	dsb	sy
 800fd5e:	e7fe      	b.n	800fd5e <xQueueGenericCreateStatic+0x8c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fd60:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fd62:	2301      	movs	r3, #1
 800fd64:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fd68:	9400      	str	r4, [sp, #0]
 800fd6a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800fd6e:	f7ff ff9f 	bl	800fcb0 <prvInitialiseNewQueue>
	}
 800fd72:	4620      	mov	r0, r4
 800fd74:	b004      	add	sp, #16
 800fd76:	bd10      	pop	{r4, pc}

0800fd78 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd78:	b940      	cbnz	r0, 800fd8c <xQueueGenericCreate+0x14>
 800fd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7e:	f383 8811 	msr	BASEPRI, r3
 800fd82:	f3bf 8f6f 	isb	sy
 800fd86:	f3bf 8f4f 	dsb	sy
 800fd8a:	e7fe      	b.n	800fd8a <xQueueGenericCreate+0x12>
	{
 800fd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	460d      	mov	r5, r1
 800fd92:	4614      	mov	r4, r2
 800fd94:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd96:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fd9a:	3050      	adds	r0, #80	; 0x50
 800fd9c:	f7ff fbde 	bl	800f55c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800fda0:	4607      	mov	r7, r0
 800fda2:	b150      	cbz	r0, 800fdba <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fda4:	2300      	movs	r3, #0
 800fda6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fdaa:	9000      	str	r0, [sp, #0]
 800fdac:	4623      	mov	r3, r4
 800fdae:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800fdb2:	4629      	mov	r1, r5
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	f7ff ff7b 	bl	800fcb0 <prvInitialiseNewQueue>
	}
 800fdba:	4638      	mov	r0, r7
 800fdbc:	b003      	add	sp, #12
 800fdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fdc0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800fdc0:	b940      	cbnz	r0, 800fdd4 <xQueueCreateCountingSemaphoreStatic+0x14>
 800fdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc6:	f383 8811 	msr	BASEPRI, r3
 800fdca:	f3bf 8f6f 	isb	sy
 800fdce:	f3bf 8f4f 	dsb	sy
 800fdd2:	e7fe      	b.n	800fdd2 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800fdd4:	b510      	push	{r4, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800fdda:	4288      	cmp	r0, r1
 800fddc:	d208      	bcs.n	800fdf0 <xQueueCreateCountingSemaphoreStatic+0x30>
 800fdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde2:	f383 8811 	msr	BASEPRI, r3
 800fde6:	f3bf 8f6f 	isb	sy
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	e7fe      	b.n	800fdee <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fdf0:	2302      	movs	r3, #2
 800fdf2:	9300      	str	r3, [sp, #0]
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	4611      	mov	r1, r2
 800fdfa:	f7ff ff6a 	bl	800fcd2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800fdfe:	b100      	cbz	r0, 800fe02 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fe00:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800fe02:	b002      	add	sp, #8
 800fe04:	bd10      	pop	{r4, pc}

0800fe06 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800fe06:	b940      	cbnz	r0, 800fe1a <xQueueCreateCountingSemaphore+0x14>
 800fe08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0c:	f383 8811 	msr	BASEPRI, r3
 800fe10:	f3bf 8f6f 	isb	sy
 800fe14:	f3bf 8f4f 	dsb	sy
 800fe18:	e7fe      	b.n	800fe18 <xQueueCreateCountingSemaphore+0x12>
	{
 800fe1a:	b510      	push	{r4, lr}
 800fe1c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800fe1e:	4288      	cmp	r0, r1
 800fe20:	d208      	bcs.n	800fe34 <xQueueCreateCountingSemaphore+0x2e>
 800fe22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe26:	f383 8811 	msr	BASEPRI, r3
 800fe2a:	f3bf 8f6f 	isb	sy
 800fe2e:	f3bf 8f4f 	dsb	sy
 800fe32:	e7fe      	b.n	800fe32 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fe34:	2202      	movs	r2, #2
 800fe36:	2100      	movs	r1, #0
 800fe38:	f7ff ff9e 	bl	800fd78 <xQueueGenericCreate>
		if( xHandle != NULL )
 800fe3c:	b100      	cbz	r0, 800fe40 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fe3e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800fe40:	bd10      	pop	{r4, pc}

0800fe42 <xQueueGenericSend>:
{
 800fe42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe44:	b085      	sub	sp, #20
 800fe46:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800fe48:	b188      	cbz	r0, 800fe6e <xQueueGenericSend+0x2c>
 800fe4a:	460f      	mov	r7, r1
 800fe4c:	461d      	mov	r5, r3
 800fe4e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe50:	b1b1      	cbz	r1, 800fe80 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fe52:	2d02      	cmp	r5, #2
 800fe54:	d120      	bne.n	800fe98 <xQueueGenericSend+0x56>
 800fe56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d01d      	beq.n	800fe98 <xQueueGenericSend+0x56>
 800fe5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe60:	f383 8811 	msr	BASEPRI, r3
 800fe64:	f3bf 8f6f 	isb	sy
 800fe68:	f3bf 8f4f 	dsb	sy
 800fe6c:	e7fe      	b.n	800fe6c <xQueueGenericSend+0x2a>
 800fe6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800fe7e:	e7fe      	b.n	800fe7e <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d0e5      	beq.n	800fe52 <xQueueGenericSend+0x10>
 800fe86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8a:	f383 8811 	msr	BASEPRI, r3
 800fe8e:	f3bf 8f6f 	isb	sy
 800fe92:	f3bf 8f4f 	dsb	sy
 800fe96:	e7fe      	b.n	800fe96 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe98:	f001 f836 	bl	8010f08 <xTaskGetSchedulerState>
 800fe9c:	4606      	mov	r6, r0
 800fe9e:	b958      	cbnz	r0, 800feb8 <xQueueGenericSend+0x76>
 800fea0:	9b01      	ldr	r3, [sp, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d048      	beq.n	800ff38 <xQueueGenericSend+0xf6>
 800fea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feaa:	f383 8811 	msr	BASEPRI, r3
 800feae:	f3bf 8f6f 	isb	sy
 800feb2:	f3bf 8f4f 	dsb	sy
 800feb6:	e7fe      	b.n	800feb6 <xQueueGenericSend+0x74>
 800feb8:	2600      	movs	r6, #0
 800feba:	e03d      	b.n	800ff38 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800febc:	462a      	mov	r2, r5
 800febe:	4639      	mov	r1, r7
 800fec0:	4620      	mov	r0, r4
 800fec2:	f7ff fe2f 	bl	800fb24 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fec8:	b97b      	cbnz	r3, 800feea <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800feca:	b148      	cbz	r0, 800fee0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800fecc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fed4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fed8:	f3bf 8f4f 	dsb	sy
 800fedc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800fee0:	f7ff fcca 	bl	800f878 <vPortExitCritical>
				return pdPASS;
 800fee4:	2001      	movs	r0, #1
}
 800fee6:	b005      	add	sp, #20
 800fee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800feea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800feee:	f000 ff71 	bl	8010dd4 <xTaskRemoveFromEventList>
 800fef2:	2800      	cmp	r0, #0
 800fef4:	d0f4      	beq.n	800fee0 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800fef6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fefe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ff02:	f3bf 8f4f 	dsb	sy
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	e7e9      	b.n	800fee0 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800ff0c:	f7ff fcb4 	bl	800f878 <vPortExitCritical>
					return errQUEUE_FULL;
 800ff10:	2000      	movs	r0, #0
 800ff12:	e7e8      	b.n	800fee6 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff14:	a802      	add	r0, sp, #8
 800ff16:	f000 ffa3 	bl	8010e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff1a:	2601      	movs	r6, #1
 800ff1c:	e019      	b.n	800ff52 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800ff1e:	2300      	movs	r3, #0
 800ff20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ff24:	e021      	b.n	800ff6a <xQueueGenericSend+0x128>
 800ff26:	2300      	movs	r3, #0
 800ff28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff2c:	e023      	b.n	800ff76 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f7ff fe45 	bl	800fbbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff34:	f000 fe4e 	bl	8010bd4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800ff38:	f7ff fc7c 	bl	800f834 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d3bb      	bcc.n	800febc <xQueueGenericSend+0x7a>
 800ff44:	2d02      	cmp	r5, #2
 800ff46:	d0b9      	beq.n	800febc <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff48:	9b01      	ldr	r3, [sp, #4]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d0de      	beq.n	800ff0c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800ff4e:	2e00      	cmp	r6, #0
 800ff50:	d0e0      	beq.n	800ff14 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800ff52:	f7ff fc91 	bl	800f878 <vPortExitCritical>
		vTaskSuspendAll();
 800ff56:	f000 fda3 	bl	8010aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff5a:	f7ff fc6b 	bl	800f834 <vPortEnterCritical>
 800ff5e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800ff62:	b252      	sxtb	r2, r2
 800ff64:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff68:	d0d9      	beq.n	800ff1e <xQueueGenericSend+0xdc>
 800ff6a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800ff6e:	b252      	sxtb	r2, r2
 800ff70:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff74:	d0d7      	beq.n	800ff26 <xQueueGenericSend+0xe4>
 800ff76:	f7ff fc7f 	bl	800f878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff7a:	a901      	add	r1, sp, #4
 800ff7c:	a802      	add	r0, sp, #8
 800ff7e:	f000 ff7b 	bl	8010e78 <xTaskCheckForTimeOut>
 800ff82:	b9d8      	cbnz	r0, 800ffbc <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ff84:	4620      	mov	r0, r4
 800ff86:	f7ff fdb1 	bl	800faec <prvIsQueueFull>
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	d0cf      	beq.n	800ff2e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ff8e:	9901      	ldr	r1, [sp, #4]
 800ff90:	f104 0010 	add.w	r0, r4, #16
 800ff94:	f000 feea 	bl	8010d6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f7ff fe10 	bl	800fbbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ff9e:	f000 fe19 	bl	8010bd4 <xTaskResumeAll>
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	d1c8      	bne.n	800ff38 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800ffa6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ffaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ffb2:	f3bf 8f4f 	dsb	sy
 800ffb6:	f3bf 8f6f 	isb	sy
 800ffba:	e7bd      	b.n	800ff38 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	f7ff fdfe 	bl	800fbbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ffc2:	f000 fe07 	bl	8010bd4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800ffc6:	2000      	movs	r0, #0
 800ffc8:	e78d      	b.n	800fee6 <xQueueGenericSend+0xa4>

0800ffca <xQueueGenericSendFromISR>:
{
 800ffca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800ffce:	b190      	cbz	r0, 800fff6 <xQueueGenericSendFromISR+0x2c>
 800ffd0:	460f      	mov	r7, r1
 800ffd2:	4616      	mov	r6, r2
 800ffd4:	461c      	mov	r4, r3
 800ffd6:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffd8:	b1b1      	cbz	r1, 8010008 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ffda:	2c02      	cmp	r4, #2
 800ffdc:	d120      	bne.n	8010020 <xQueueGenericSendFromISR+0x56>
 800ffde:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d01d      	beq.n	8010020 <xQueueGenericSendFromISR+0x56>
 800ffe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe8:	f383 8811 	msr	BASEPRI, r3
 800ffec:	f3bf 8f6f 	isb	sy
 800fff0:	f3bf 8f4f 	dsb	sy
 800fff4:	e7fe      	b.n	800fff4 <xQueueGenericSendFromISR+0x2a>
 800fff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffa:	f383 8811 	msr	BASEPRI, r3
 800fffe:	f3bf 8f6f 	isb	sy
 8010002:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010006:	e7fe      	b.n	8010006 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010008:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801000a:	2b00      	cmp	r3, #0
 801000c:	d0e5      	beq.n	800ffda <xQueueGenericSendFromISR+0x10>
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	e7fe      	b.n	801001e <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010020:	f7ff fd2e 	bl	800fa80 <vPortValidateInterruptPriority>
	__asm volatile
 8010024:	f3ef 8911 	mrs	r9, BASEPRI
 8010028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002c:	f383 8811 	msr	BASEPRI, r3
 8010030:	f3bf 8f6f 	isb	sy
 8010034:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010038:	6baa      	ldr	r2, [r5, #56]	; 0x38
 801003a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801003c:	429a      	cmp	r2, r3
 801003e:	d306      	bcc.n	801004e <xQueueGenericSendFromISR+0x84>
 8010040:	2c02      	cmp	r4, #2
 8010042:	d004      	beq.n	801004e <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8010044:	2000      	movs	r0, #0
	__asm volatile
 8010046:	f389 8811 	msr	BASEPRI, r9
}
 801004a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 801004e:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8010052:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010056:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010058:	4622      	mov	r2, r4
 801005a:	4639      	mov	r1, r7
 801005c:	4628      	mov	r0, r5
 801005e:	f7ff fd61 	bl	800fb24 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8010062:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010066:	d006      	beq.n	8010076 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010068:	f108 0301 	add.w	r3, r8, #1
 801006c:	b25b      	sxtb	r3, r3
 801006e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8010072:	2001      	movs	r0, #1
 8010074:	e7e7      	b.n	8010046 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010078:	b90b      	cbnz	r3, 801007e <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 801007a:	2001      	movs	r0, #1
 801007c:	e7e3      	b.n	8010046 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801007e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8010082:	f000 fea7 	bl	8010dd4 <xTaskRemoveFromEventList>
 8010086:	b118      	cbz	r0, 8010090 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8010088:	b126      	cbz	r6, 8010094 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801008a:	2001      	movs	r0, #1
 801008c:	6030      	str	r0, [r6, #0]
 801008e:	e7da      	b.n	8010046 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8010090:	2001      	movs	r0, #1
 8010092:	e7d8      	b.n	8010046 <xQueueGenericSendFromISR+0x7c>
 8010094:	2001      	movs	r0, #1
 8010096:	e7d6      	b.n	8010046 <xQueueGenericSendFromISR+0x7c>

08010098 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8010098:	b168      	cbz	r0, 80100b6 <xQueueGiveFromISR+0x1e>
{
 801009a:	b570      	push	{r4, r5, r6, lr}
 801009c:	460c      	mov	r4, r1
 801009e:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80100a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80100a2:	b18b      	cbz	r3, 80100c8 <xQueueGiveFromISR+0x30>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	e7fe      	b.n	80100b4 <xQueueGiveFromISR+0x1c>
 80100b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80100c6:	e7fe      	b.n	80100c6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80100c8:	6803      	ldr	r3, [r0, #0]
 80100ca:	b1eb      	cbz	r3, 8010108 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80100cc:	f7ff fcd8 	bl	800fa80 <vPortValidateInterruptPriority>
	__asm volatile
 80100d0:	f3ef 8611 	mrs	r6, BASEPRI
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80100e6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d926      	bls.n	801013a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80100ec:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80100f0:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80100f2:	3201      	adds	r2, #1
 80100f4:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80100f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100fa:	d011      	beq.n	8010120 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80100fc:	3301      	adds	r3, #1
 80100fe:	b25b      	sxtb	r3, r3
 8010100:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8010104:	2001      	movs	r0, #1
 8010106:	e019      	b.n	801013c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010108:	6883      	ldr	r3, [r0, #8]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d0de      	beq.n	80100cc <xQueueGiveFromISR+0x34>
	__asm volatile
 801010e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010112:	f383 8811 	msr	BASEPRI, r3
 8010116:	f3bf 8f6f 	isb	sy
 801011a:	f3bf 8f4f 	dsb	sy
 801011e:	e7fe      	b.n	801011e <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010120:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010122:	b90b      	cbnz	r3, 8010128 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8010124:	2001      	movs	r0, #1
 8010126:	e009      	b.n	801013c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010128:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801012c:	f000 fe52 	bl	8010dd4 <xTaskRemoveFromEventList>
 8010130:	b138      	cbz	r0, 8010142 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8010132:	b144      	cbz	r4, 8010146 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010134:	2001      	movs	r0, #1
 8010136:	6020      	str	r0, [r4, #0]
 8010138:	e000      	b.n	801013c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 801013a:	2000      	movs	r0, #0
	__asm volatile
 801013c:	f386 8811 	msr	BASEPRI, r6
}
 8010140:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8010142:	2001      	movs	r0, #1
 8010144:	e7fa      	b.n	801013c <xQueueGiveFromISR+0xa4>
 8010146:	2001      	movs	r0, #1
 8010148:	e7f8      	b.n	801013c <xQueueGiveFromISR+0xa4>

0801014a <xQueueReceive>:
{
 801014a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801014c:	b085      	sub	sp, #20
 801014e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8010150:	b190      	cbz	r0, 8010178 <xQueueReceive+0x2e>
 8010152:	460f      	mov	r7, r1
 8010154:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010156:	b1c1      	cbz	r1, 801018a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010158:	f000 fed6 	bl	8010f08 <xTaskGetSchedulerState>
 801015c:	4606      	mov	r6, r0
 801015e:	bb00      	cbnz	r0, 80101a2 <xQueueReceive+0x58>
 8010160:	9b01      	ldr	r3, [sp, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d05e      	beq.n	8010224 <xQueueReceive+0xda>
	__asm volatile
 8010166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801016a:	f383 8811 	msr	BASEPRI, r3
 801016e:	f3bf 8f6f 	isb	sy
 8010172:	f3bf 8f4f 	dsb	sy
 8010176:	e7fe      	b.n	8010176 <xQueueReceive+0x2c>
 8010178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801017c:	f383 8811 	msr	BASEPRI, r3
 8010180:	f3bf 8f6f 	isb	sy
 8010184:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8010188:	e7fe      	b.n	8010188 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801018a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801018c:	2b00      	cmp	r3, #0
 801018e:	d0e3      	beq.n	8010158 <xQueueReceive+0xe>
 8010190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010194:	f383 8811 	msr	BASEPRI, r3
 8010198:	f3bf 8f6f 	isb	sy
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	e7fe      	b.n	80101a0 <xQueueReceive+0x56>
 80101a2:	2600      	movs	r6, #0
 80101a4:	e03e      	b.n	8010224 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80101a6:	4639      	mov	r1, r7
 80101a8:	4620      	mov	r0, r4
 80101aa:	f7ff fcf6 	bl	800fb9a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80101ae:	3d01      	subs	r5, #1
 80101b0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101b2:	6923      	ldr	r3, [r4, #16]
 80101b4:	b923      	cbnz	r3, 80101c0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80101b6:	f7ff fb5f 	bl	800f878 <vPortExitCritical>
				return pdPASS;
 80101ba:	2001      	movs	r0, #1
}
 80101bc:	b005      	add	sp, #20
 80101be:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101c0:	f104 0010 	add.w	r0, r4, #16
 80101c4:	f000 fe06 	bl	8010dd4 <xTaskRemoveFromEventList>
 80101c8:	2800      	cmp	r0, #0
 80101ca:	d0f4      	beq.n	80101b6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80101cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80101d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80101d8:	f3bf 8f4f 	dsb	sy
 80101dc:	f3bf 8f6f 	isb	sy
 80101e0:	e7e9      	b.n	80101b6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80101e2:	f7ff fb49 	bl	800f878 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80101e6:	2000      	movs	r0, #0
 80101e8:	e7e8      	b.n	80101bc <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80101ea:	a802      	add	r0, sp, #8
 80101ec:	f000 fe38 	bl	8010e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80101f0:	2601      	movs	r6, #1
 80101f2:	e021      	b.n	8010238 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80101f4:	2300      	movs	r3, #0
 80101f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80101fa:	e029      	b.n	8010250 <xQueueReceive+0x106>
 80101fc:	2300      	movs	r3, #0
 80101fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010202:	e02b      	b.n	801025c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8010204:	4620      	mov	r0, r4
 8010206:	f7ff fcda 	bl	800fbbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801020a:	f000 fce3 	bl	8010bd4 <xTaskResumeAll>
 801020e:	e009      	b.n	8010224 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8010210:	4620      	mov	r0, r4
 8010212:	f7ff fcd4 	bl	800fbbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010216:	f000 fcdd 	bl	8010bd4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801021a:	4620      	mov	r0, r4
 801021c:	f7ff fc75 	bl	800fb0a <prvIsQueueEmpty>
 8010220:	2800      	cmp	r0, #0
 8010222:	d13f      	bne.n	80102a4 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8010224:	f7ff fb06 	bl	800f834 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010228:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801022a:	2d00      	cmp	r5, #0
 801022c:	d1bb      	bne.n	80101a6 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801022e:	9b01      	ldr	r3, [sp, #4]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d0d6      	beq.n	80101e2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8010234:	2e00      	cmp	r6, #0
 8010236:	d0d8      	beq.n	80101ea <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8010238:	f7ff fb1e 	bl	800f878 <vPortExitCritical>
		vTaskSuspendAll();
 801023c:	f000 fc30 	bl	8010aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010240:	f7ff faf8 	bl	800f834 <vPortEnterCritical>
 8010244:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010248:	b25b      	sxtb	r3, r3
 801024a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024e:	d0d1      	beq.n	80101f4 <xQueueReceive+0xaa>
 8010250:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010254:	b25b      	sxtb	r3, r3
 8010256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801025a:	d0cf      	beq.n	80101fc <xQueueReceive+0xb2>
 801025c:	f7ff fb0c 	bl	800f878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010260:	a901      	add	r1, sp, #4
 8010262:	a802      	add	r0, sp, #8
 8010264:	f000 fe08 	bl	8010e78 <xTaskCheckForTimeOut>
 8010268:	2800      	cmp	r0, #0
 801026a:	d1d1      	bne.n	8010210 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801026c:	4620      	mov	r0, r4
 801026e:	f7ff fc4c 	bl	800fb0a <prvIsQueueEmpty>
 8010272:	2800      	cmp	r0, #0
 8010274:	d0c6      	beq.n	8010204 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010276:	9901      	ldr	r1, [sp, #4]
 8010278:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801027c:	f000 fd76 	bl	8010d6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010280:	4620      	mov	r0, r4
 8010282:	f7ff fc9c 	bl	800fbbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010286:	f000 fca5 	bl	8010bd4 <xTaskResumeAll>
 801028a:	2800      	cmp	r0, #0
 801028c:	d1ca      	bne.n	8010224 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 801028e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010296:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	f3bf 8f6f 	isb	sy
 80102a2:	e7bf      	b.n	8010224 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80102a4:	2000      	movs	r0, #0
 80102a6:	e789      	b.n	80101bc <xQueueReceive+0x72>

080102a8 <xQueueSemaphoreTake>:
{
 80102a8:	b570      	push	{r4, r5, r6, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80102ae:	b158      	cbz	r0, 80102c8 <xQueueSemaphoreTake+0x20>
 80102b0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80102b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80102b4:	b18b      	cbz	r3, 80102da <xQueueSemaphoreTake+0x32>
 80102b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ba:	f383 8811 	msr	BASEPRI, r3
 80102be:	f3bf 8f6f 	isb	sy
 80102c2:	f3bf 8f4f 	dsb	sy
 80102c6:	e7fe      	b.n	80102c6 <xQueueSemaphoreTake+0x1e>
 80102c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102cc:	f383 8811 	msr	BASEPRI, r3
 80102d0:	f3bf 8f6f 	isb	sy
 80102d4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80102d8:	e7fe      	b.n	80102d8 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80102da:	f000 fe15 	bl	8010f08 <xTaskGetSchedulerState>
 80102de:	4605      	mov	r5, r0
 80102e0:	b950      	cbnz	r0, 80102f8 <xQueueSemaphoreTake+0x50>
 80102e2:	9b01      	ldr	r3, [sp, #4]
 80102e4:	b15b      	cbz	r3, 80102fe <xQueueSemaphoreTake+0x56>
 80102e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ea:	f383 8811 	msr	BASEPRI, r3
 80102ee:	f3bf 8f6f 	isb	sy
 80102f2:	f3bf 8f4f 	dsb	sy
 80102f6:	e7fe      	b.n	80102f6 <xQueueSemaphoreTake+0x4e>
 80102f8:	2600      	movs	r6, #0
 80102fa:	4635      	mov	r5, r6
 80102fc:	e055      	b.n	80103aa <xQueueSemaphoreTake+0x102>
 80102fe:	4606      	mov	r6, r0
 8010300:	e053      	b.n	80103aa <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010302:	3b01      	subs	r3, #1
 8010304:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010306:	6823      	ldr	r3, [r4, #0]
 8010308:	b13b      	cbz	r3, 801031a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801030a:	6923      	ldr	r3, [r4, #16]
 801030c:	b94b      	cbnz	r3, 8010322 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 801030e:	f7ff fab3 	bl	800f878 <vPortExitCritical>
				return pdPASS;
 8010312:	2601      	movs	r6, #1
}
 8010314:	4630      	mov	r0, r6
 8010316:	b004      	add	sp, #16
 8010318:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801031a:	f000 fee9 	bl	80110f0 <pvTaskIncrementMutexHeldCount>
 801031e:	60a0      	str	r0, [r4, #8]
 8010320:	e7f3      	b.n	801030a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010322:	f104 0010 	add.w	r0, r4, #16
 8010326:	f000 fd55 	bl	8010dd4 <xTaskRemoveFromEventList>
 801032a:	2800      	cmp	r0, #0
 801032c:	d0ef      	beq.n	801030e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 801032e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010336:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801033a:	f3bf 8f4f 	dsb	sy
 801033e:	f3bf 8f6f 	isb	sy
 8010342:	e7e4      	b.n	801030e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010344:	b146      	cbz	r6, 8010358 <xQueueSemaphoreTake+0xb0>
 8010346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034a:	f383 8811 	msr	BASEPRI, r3
 801034e:	f3bf 8f6f 	isb	sy
 8010352:	f3bf 8f4f 	dsb	sy
 8010356:	e7fe      	b.n	8010356 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8010358:	f7ff fa8e 	bl	800f878 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801035c:	e7da      	b.n	8010314 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801035e:	a802      	add	r0, sp, #8
 8010360:	f000 fd7e 	bl	8010e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010364:	2501      	movs	r5, #1
 8010366:	e02a      	b.n	80103be <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8010368:	2300      	movs	r3, #0
 801036a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801036e:	e032      	b.n	80103d6 <xQueueSemaphoreTake+0x12e>
 8010370:	2300      	movs	r3, #0
 8010372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010376:	e034      	b.n	80103e2 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8010378:	f7ff fa5c 	bl	800f834 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801037c:	68a0      	ldr	r0, [r4, #8]
 801037e:	f000 fdd3 	bl	8010f28 <xTaskPriorityInherit>
 8010382:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8010384:	f7ff fa78 	bl	800f878 <vPortExitCritical>
 8010388:	e03b      	b.n	8010402 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 801038a:	4620      	mov	r0, r4
 801038c:	f7ff fc17 	bl	800fbbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010390:	f000 fc20 	bl	8010bd4 <xTaskResumeAll>
 8010394:	e009      	b.n	80103aa <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8010396:	4620      	mov	r0, r4
 8010398:	f7ff fc11 	bl	800fbbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801039c:	f000 fc1a 	bl	8010bd4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103a0:	4620      	mov	r0, r4
 80103a2:	f7ff fbb2 	bl	800fb0a <prvIsQueueEmpty>
 80103a6:	2800      	cmp	r0, #0
 80103a8:	d142      	bne.n	8010430 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80103aa:	f7ff fa43 	bl	800f834 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80103ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d1a6      	bne.n	8010302 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80103b4:	9b01      	ldr	r3, [sp, #4]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d0c4      	beq.n	8010344 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80103ba:	2d00      	cmp	r5, #0
 80103bc:	d0cf      	beq.n	801035e <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80103be:	f7ff fa5b 	bl	800f878 <vPortExitCritical>
		vTaskSuspendAll();
 80103c2:	f000 fb6d 	bl	8010aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80103c6:	f7ff fa35 	bl	800f834 <vPortEnterCritical>
 80103ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80103ce:	b25b      	sxtb	r3, r3
 80103d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d4:	d0c8      	beq.n	8010368 <xQueueSemaphoreTake+0xc0>
 80103d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80103da:	b25b      	sxtb	r3, r3
 80103dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e0:	d0c6      	beq.n	8010370 <xQueueSemaphoreTake+0xc8>
 80103e2:	f7ff fa49 	bl	800f878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103e6:	a901      	add	r1, sp, #4
 80103e8:	a802      	add	r0, sp, #8
 80103ea:	f000 fd45 	bl	8010e78 <xTaskCheckForTimeOut>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	d1d1      	bne.n	8010396 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103f2:	4620      	mov	r0, r4
 80103f4:	f7ff fb89 	bl	800fb0a <prvIsQueueEmpty>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	d0c6      	beq.n	801038a <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103fc:	6823      	ldr	r3, [r4, #0]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d0ba      	beq.n	8010378 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010402:	9901      	ldr	r1, [sp, #4]
 8010404:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010408:	f000 fcb0 	bl	8010d6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801040c:	4620      	mov	r0, r4
 801040e:	f7ff fbd6 	bl	800fbbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010412:	f000 fbdf 	bl	8010bd4 <xTaskResumeAll>
 8010416:	2800      	cmp	r0, #0
 8010418:	d1c7      	bne.n	80103aa <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 801041a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801041e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010422:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010426:	f3bf 8f4f 	dsb	sy
 801042a:	f3bf 8f6f 	isb	sy
 801042e:	e7bc      	b.n	80103aa <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8010430:	b90e      	cbnz	r6, 8010436 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8010432:	2600      	movs	r6, #0
 8010434:	e76e      	b.n	8010314 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8010436:	f7ff f9fd 	bl	800f834 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801043a:	4620      	mov	r0, r4
 801043c:	f7ff fb4e 	bl	800fadc <prvGetDisinheritPriorityAfterTimeout>
 8010440:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010442:	68a0      	ldr	r0, [r4, #8]
 8010444:	f000 fe04 	bl	8011050 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8010448:	f7ff fa16 	bl	800f878 <vPortExitCritical>
 801044c:	e7f1      	b.n	8010432 <xQueueSemaphoreTake+0x18a>

0801044e <xQueueReceiveFromISR>:
{
 801044e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8010452:	b1b0      	cbz	r0, 8010482 <xQueueReceiveFromISR+0x34>
 8010454:	460d      	mov	r5, r1
 8010456:	4616      	mov	r6, r2
 8010458:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801045a:	b1d9      	cbz	r1, 8010494 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801045c:	f7ff fb10 	bl	800fa80 <vPortValidateInterruptPriority>
	__asm volatile
 8010460:	f3ef 8811 	mrs	r8, BASEPRI
 8010464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010468:	f383 8811 	msr	BASEPRI, r3
 801046c:	f3bf 8f6f 	isb	sy
 8010470:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010474:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010476:	b9cf      	cbnz	r7, 80104ac <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8010478:	2000      	movs	r0, #0
	__asm volatile
 801047a:	f388 8811 	msr	BASEPRI, r8
}
 801047e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8010482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010486:	f383 8811 	msr	BASEPRI, r3
 801048a:	f3bf 8f6f 	isb	sy
 801048e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010492:	e7fe      	b.n	8010492 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010494:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010496:	2b00      	cmp	r3, #0
 8010498:	d0e0      	beq.n	801045c <xQueueReceiveFromISR+0xe>
 801049a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049e:	f383 8811 	msr	BASEPRI, r3
 80104a2:	f3bf 8f6f 	isb	sy
 80104a6:	f3bf 8f4f 	dsb	sy
 80104aa:	e7fe      	b.n	80104aa <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80104ac:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 80104b0:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80104b4:	4629      	mov	r1, r5
 80104b6:	4620      	mov	r0, r4
 80104b8:	f7ff fb6f 	bl	800fb9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80104bc:	3f01      	subs	r7, #1
 80104be:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80104c0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80104c4:	d006      	beq.n	80104d4 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80104c6:	f109 0301 	add.w	r3, r9, #1
 80104ca:	b25b      	sxtb	r3, r3
 80104cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80104d0:	2001      	movs	r0, #1
 80104d2:	e7d2      	b.n	801047a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104d4:	6923      	ldr	r3, [r4, #16]
 80104d6:	b90b      	cbnz	r3, 80104dc <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80104d8:	2001      	movs	r0, #1
 80104da:	e7ce      	b.n	801047a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104dc:	f104 0010 	add.w	r0, r4, #16
 80104e0:	f000 fc78 	bl	8010dd4 <xTaskRemoveFromEventList>
 80104e4:	b118      	cbz	r0, 80104ee <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 80104e6:	b126      	cbz	r6, 80104f2 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80104e8:	2001      	movs	r0, #1
 80104ea:	6030      	str	r0, [r6, #0]
 80104ec:	e7c5      	b.n	801047a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80104ee:	2001      	movs	r0, #1
 80104f0:	e7c3      	b.n	801047a <xQueueReceiveFromISR+0x2c>
 80104f2:	2001      	movs	r0, #1
 80104f4:	e7c1      	b.n	801047a <xQueueReceiveFromISR+0x2c>
	...

080104f8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80104f8:	2300      	movs	r3, #0
 80104fa:	2b07      	cmp	r3, #7
 80104fc:	d80c      	bhi.n	8010518 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80104fe:	4a07      	ldr	r2, [pc, #28]	; (801051c <vQueueAddToRegistry+0x24>)
 8010500:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010504:	b10a      	cbz	r2, 801050a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010506:	3301      	adds	r3, #1
 8010508:	e7f7      	b.n	80104fa <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801050a:	4a04      	ldr	r2, [pc, #16]	; (801051c <vQueueAddToRegistry+0x24>)
 801050c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010510:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010514:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010516:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010518:	4770      	bx	lr
 801051a:	bf00      	nop
 801051c:	2400ed24 	.word	0x2400ed24

08010520 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010520:	2300      	movs	r3, #0
 8010522:	2b07      	cmp	r3, #7
 8010524:	d80f      	bhi.n	8010546 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010526:	4a08      	ldr	r2, [pc, #32]	; (8010548 <vQueueUnregisterQueue+0x28>)
 8010528:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801052c:	6852      	ldr	r2, [r2, #4]
 801052e:	4282      	cmp	r2, r0
 8010530:	d001      	beq.n	8010536 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010532:	3301      	adds	r3, #1
 8010534:	e7f5      	b.n	8010522 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010536:	4a04      	ldr	r2, [pc, #16]	; (8010548 <vQueueUnregisterQueue+0x28>)
 8010538:	2100      	movs	r1, #0
 801053a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801053e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010542:	6059      	str	r1, [r3, #4]
				break;
 8010544:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010546:	4770      	bx	lr
 8010548:	2400ed24 	.word	0x2400ed24

0801054c <vQueueDelete>:
	configASSERT( pxQueue );
 801054c:	b138      	cbz	r0, 801055e <vQueueDelete+0x12>
{
 801054e:	b510      	push	{r4, lr}
 8010550:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8010552:	f7ff ffe5 	bl	8010520 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010556:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801055a:	b14b      	cbz	r3, 8010570 <vQueueDelete+0x24>
}
 801055c:	bd10      	pop	{r4, pc}
 801055e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010562:	f383 8811 	msr	BASEPRI, r3
 8010566:	f3bf 8f6f 	isb	sy
 801056a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801056e:	e7fe      	b.n	801056e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8010570:	4620      	mov	r0, r4
 8010572:	f7ff f871 	bl	800f658 <vPortFree>
}
 8010576:	e7f1      	b.n	801055c <vQueueDelete+0x10>

08010578 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010578:	b570      	push	{r4, r5, r6, lr}
 801057a:	4604      	mov	r4, r0
 801057c:	460d      	mov	r5, r1
 801057e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010580:	f7ff f958 	bl	800f834 <vPortEnterCritical>
 8010584:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010588:	b25b      	sxtb	r3, r3
 801058a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801058e:	d00d      	beq.n	80105ac <vQueueWaitForMessageRestricted+0x34>
 8010590:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010594:	b25b      	sxtb	r3, r3
 8010596:	f1b3 3fff 	cmp.w	r3, #4294967295
 801059a:	d00b      	beq.n	80105b4 <vQueueWaitForMessageRestricted+0x3c>
 801059c:	f7ff f96c 	bl	800f878 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80105a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80105a2:	b15b      	cbz	r3, 80105bc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80105a4:	4620      	mov	r0, r4
 80105a6:	f7ff fb0a 	bl	800fbbe <prvUnlockQueue>
	}
 80105aa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80105ac:	2300      	movs	r3, #0
 80105ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80105b2:	e7ed      	b.n	8010590 <vQueueWaitForMessageRestricted+0x18>
 80105b4:	2300      	movs	r3, #0
 80105b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105ba:	e7ef      	b.n	801059c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80105bc:	4632      	mov	r2, r6
 80105be:	4629      	mov	r1, r5
 80105c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80105c4:	f000 fbea 	bl	8010d9c <vTaskPlaceOnEventListRestricted>
 80105c8:	e7ec      	b.n	80105a4 <vQueueWaitForMessageRestricted+0x2c>
	...

080105cc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105cc:	4b08      	ldr	r3, [pc, #32]	; (80105f0 <prvResetNextTaskUnblockTime+0x24>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	b923      	cbnz	r3, 80105de <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80105d4:	4b07      	ldr	r3, [pc, #28]	; (80105f4 <prvResetNextTaskUnblockTime+0x28>)
 80105d6:	f04f 32ff 	mov.w	r2, #4294967295
 80105da:	601a      	str	r2, [r3, #0]
 80105dc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105de:	4b04      	ldr	r3, [pc, #16]	; (80105f0 <prvResetNextTaskUnblockTime+0x24>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80105e6:	685a      	ldr	r2, [r3, #4]
 80105e8:	4b02      	ldr	r3, [pc, #8]	; (80105f4 <prvResetNextTaskUnblockTime+0x28>)
 80105ea:	601a      	str	r2, [r3, #0]
	}
}
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	2400ed68 	.word	0x2400ed68
 80105f4:	2400f210 	.word	0x2400f210

080105f8 <prvInitialiseNewTask>:
{
 80105f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105fc:	4680      	mov	r8, r0
 80105fe:	460d      	mov	r5, r1
 8010600:	4617      	mov	r7, r2
 8010602:	4699      	mov	r9, r3
 8010604:	9e08      	ldr	r6, [sp, #32]
 8010606:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801060a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801060c:	0092      	lsls	r2, r2, #2
 801060e:	21a5      	movs	r1, #165	; 0xa5
 8010610:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010612:	f012 fd75 	bl	8023100 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010616:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010618:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 801061c:	443a      	add	r2, r7
 801061e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010622:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8010626:	2d00      	cmp	r5, #0
 8010628:	d043      	beq.n	80106b2 <prvInitialiseNewTask+0xba>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801062a:	f04f 0c00 	mov.w	ip, #0
 801062e:	f1bc 0f0f 	cmp.w	ip, #15
 8010632:	d80b      	bhi.n	801064c <prvInitialiseNewTask+0x54>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010634:	f815 200c 	ldrb.w	r2, [r5, ip]
 8010638:	eb04 030c 	add.w	r3, r4, ip
 801063c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8010640:	f815 300c 	ldrb.w	r3, [r5, ip]
 8010644:	b113      	cbz	r3, 801064c <prvInitialiseNewTask+0x54>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010646:	f10c 0c01 	add.w	ip, ip, #1
 801064a:	e7f0      	b.n	801062e <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801064c:	2300      	movs	r3, #0
 801064e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010652:	2e37      	cmp	r6, #55	; 0x37
 8010654:	d900      	bls.n	8010658 <prvInitialiseNewTask+0x60>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010656:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8010658:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801065a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801065c:	2500      	movs	r5, #0
 801065e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010660:	1d20      	adds	r0, r4, #4
 8010662:	f7ff f842 	bl	800f6ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010666:	f104 0018 	add.w	r0, r4, #24
 801066a:	f7ff f83e 	bl	800f6ea <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801066e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010670:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8010674:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010676:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8010678:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801067c:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010680:	2260      	movs	r2, #96	; 0x60
 8010682:	4629      	mov	r1, r5
 8010684:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8010688:	f012 fd3a 	bl	8023100 <memset>
 801068c:	4b0b      	ldr	r3, [pc, #44]	; (80106bc <prvInitialiseNewTask+0xc4>)
 801068e:	65a3      	str	r3, [r4, #88]	; 0x58
 8010690:	4b0b      	ldr	r3, [pc, #44]	; (80106c0 <prvInitialiseNewTask+0xc8>)
 8010692:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010694:	4b0b      	ldr	r3, [pc, #44]	; (80106c4 <prvInitialiseNewTask+0xcc>)
 8010696:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010698:	464a      	mov	r2, r9
 801069a:	4641      	mov	r1, r8
 801069c:	4638      	mov	r0, r7
 801069e:	f7ff f89d 	bl	800f7dc <pxPortInitialiseStack>
 80106a2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80106a4:	f1ba 0f00 	cmp.w	sl, #0
 80106a8:	d001      	beq.n	80106ae <prvInitialiseNewTask+0xb6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80106aa:	f8ca 4000 	str.w	r4, [sl]
}
 80106ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80106b2:	2300      	movs	r3, #0
 80106b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80106b8:	e7cb      	b.n	8010652 <prvInitialiseNewTask+0x5a>
 80106ba:	bf00      	nop
 80106bc:	08026e5c 	.word	0x08026e5c
 80106c0:	08026e7c 	.word	0x08026e7c
 80106c4:	08026e3c 	.word	0x08026e3c

080106c8 <prvInitialiseTaskLists>:
{
 80106c8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80106ca:	2400      	movs	r4, #0
 80106cc:	e007      	b.n	80106de <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80106ce:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80106d2:	0093      	lsls	r3, r2, #2
 80106d4:	480e      	ldr	r0, [pc, #56]	; (8010710 <prvInitialiseTaskLists+0x48>)
 80106d6:	4418      	add	r0, r3
 80106d8:	f7fe fffc 	bl	800f6d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80106dc:	3401      	adds	r4, #1
 80106de:	2c37      	cmp	r4, #55	; 0x37
 80106e0:	d9f5      	bls.n	80106ce <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80106e2:	4d0c      	ldr	r5, [pc, #48]	; (8010714 <prvInitialiseTaskLists+0x4c>)
 80106e4:	4628      	mov	r0, r5
 80106e6:	f7fe fff5 	bl	800f6d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80106ea:	4c0b      	ldr	r4, [pc, #44]	; (8010718 <prvInitialiseTaskLists+0x50>)
 80106ec:	4620      	mov	r0, r4
 80106ee:	f7fe fff1 	bl	800f6d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80106f2:	480a      	ldr	r0, [pc, #40]	; (801071c <prvInitialiseTaskLists+0x54>)
 80106f4:	f7fe ffee 	bl	800f6d4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80106f8:	4809      	ldr	r0, [pc, #36]	; (8010720 <prvInitialiseTaskLists+0x58>)
 80106fa:	f7fe ffeb 	bl	800f6d4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80106fe:	4809      	ldr	r0, [pc, #36]	; (8010724 <prvInitialiseTaskLists+0x5c>)
 8010700:	f7fe ffe8 	bl	800f6d4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8010704:	4b08      	ldr	r3, [pc, #32]	; (8010728 <prvInitialiseTaskLists+0x60>)
 8010706:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010708:	4b08      	ldr	r3, [pc, #32]	; (801072c <prvInitialiseTaskLists+0x64>)
 801070a:	601c      	str	r4, [r3, #0]
}
 801070c:	bd38      	pop	{r3, r4, r5, pc}
 801070e:	bf00      	nop
 8010710:	2400ed70 	.word	0x2400ed70
 8010714:	2400f1e4 	.word	0x2400f1e4
 8010718:	2400f1f8 	.word	0x2400f1f8
 801071c:	2400f21c 	.word	0x2400f21c
 8010720:	2400f248 	.word	0x2400f248
 8010724:	2400f234 	.word	0x2400f234
 8010728:	2400ed68 	.word	0x2400ed68
 801072c:	2400ed6c 	.word	0x2400ed6c

08010730 <prvAddNewTaskToReadyList>:
{
 8010730:	b510      	push	{r4, lr}
 8010732:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010734:	f7ff f87e 	bl	800f834 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8010738:	4a22      	ldr	r2, [pc, #136]	; (80107c4 <prvAddNewTaskToReadyList+0x94>)
 801073a:	6813      	ldr	r3, [r2, #0]
 801073c:	3301      	adds	r3, #1
 801073e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010740:	4b21      	ldr	r3, [pc, #132]	; (80107c8 <prvAddNewTaskToReadyList+0x98>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	b15b      	cbz	r3, 801075e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8010746:	4b21      	ldr	r3, [pc, #132]	; (80107cc <prvAddNewTaskToReadyList+0x9c>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	b96b      	cbnz	r3, 8010768 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801074c:	4b1e      	ldr	r3, [pc, #120]	; (80107c8 <prvAddNewTaskToReadyList+0x98>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010752:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010754:	429a      	cmp	r2, r3
 8010756:	d807      	bhi.n	8010768 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8010758:	4b1b      	ldr	r3, [pc, #108]	; (80107c8 <prvAddNewTaskToReadyList+0x98>)
 801075a:	601c      	str	r4, [r3, #0]
 801075c:	e004      	b.n	8010768 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 801075e:	4b1a      	ldr	r3, [pc, #104]	; (80107c8 <prvAddNewTaskToReadyList+0x98>)
 8010760:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010762:	6813      	ldr	r3, [r2, #0]
 8010764:	2b01      	cmp	r3, #1
 8010766:	d029      	beq.n	80107bc <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8010768:	4a19      	ldr	r2, [pc, #100]	; (80107d0 <prvAddNewTaskToReadyList+0xa0>)
 801076a:	6813      	ldr	r3, [r2, #0]
 801076c:	3301      	adds	r3, #1
 801076e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010770:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8010772:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010774:	4b17      	ldr	r3, [pc, #92]	; (80107d4 <prvAddNewTaskToReadyList+0xa4>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4298      	cmp	r0, r3
 801077a:	d901      	bls.n	8010780 <prvAddNewTaskToReadyList+0x50>
 801077c:	4b15      	ldr	r3, [pc, #84]	; (80107d4 <prvAddNewTaskToReadyList+0xa4>)
 801077e:	6018      	str	r0, [r3, #0]
 8010780:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010784:	1d21      	adds	r1, r4, #4
 8010786:	4b14      	ldr	r3, [pc, #80]	; (80107d8 <prvAddNewTaskToReadyList+0xa8>)
 8010788:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801078c:	f7fe ffb0 	bl	800f6f0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8010790:	f7ff f872 	bl	800f878 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8010794:	4b0d      	ldr	r3, [pc, #52]	; (80107cc <prvAddNewTaskToReadyList+0x9c>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	b17b      	cbz	r3, 80107ba <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801079a:	4b0b      	ldr	r3, [pc, #44]	; (80107c8 <prvAddNewTaskToReadyList+0x98>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d209      	bcs.n	80107ba <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80107a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80107aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80107b2:	f3bf 8f4f 	dsb	sy
 80107b6:	f3bf 8f6f 	isb	sy
}
 80107ba:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80107bc:	f7ff ff84 	bl	80106c8 <prvInitialiseTaskLists>
 80107c0:	e7d2      	b.n	8010768 <prvAddNewTaskToReadyList+0x38>
 80107c2:	bf00      	nop
 80107c4:	2400f1d0 	.word	0x2400f1d0
 80107c8:	2400ed64 	.word	0x2400ed64
 80107cc:	2400f230 	.word	0x2400f230
 80107d0:	2400f1dc 	.word	0x2400f1dc
 80107d4:	2400f1e0 	.word	0x2400f1e0
 80107d8:	2400ed70 	.word	0x2400ed70

080107dc <prvDeleteTCB>:
	{
 80107dc:	b510      	push	{r4, lr}
 80107de:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80107e0:	3054      	adds	r0, #84	; 0x54
 80107e2:	f013 f871 	bl	80238c8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80107e6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 80107ea:	b163      	cbz	r3, 8010806 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d011      	beq.n	8010814 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80107f0:	2b02      	cmp	r3, #2
 80107f2:	d00e      	beq.n	8010812 <prvDeleteTCB+0x36>
 80107f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f8:	f383 8811 	msr	BASEPRI, r3
 80107fc:	f3bf 8f6f 	isb	sy
 8010800:	f3bf 8f4f 	dsb	sy
 8010804:	e7fe      	b.n	8010804 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8010806:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010808:	f7fe ff26 	bl	800f658 <vPortFree>
				vPortFree( pxTCB );
 801080c:	4620      	mov	r0, r4
 801080e:	f7fe ff23 	bl	800f658 <vPortFree>
	}
 8010812:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8010814:	4620      	mov	r0, r4
 8010816:	f7fe ff1f 	bl	800f658 <vPortFree>
 801081a:	e7fa      	b.n	8010812 <prvDeleteTCB+0x36>

0801081c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801081c:	4b0f      	ldr	r3, [pc, #60]	; (801085c <prvCheckTasksWaitingTermination+0x40>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	b1d3      	cbz	r3, 8010858 <prvCheckTasksWaitingTermination+0x3c>
{
 8010822:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8010824:	f7ff f806 	bl	800f834 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010828:	4b0d      	ldr	r3, [pc, #52]	; (8010860 <prvCheckTasksWaitingTermination+0x44>)
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801082e:	1d20      	adds	r0, r4, #4
 8010830:	f7fe ff82 	bl	800f738 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010834:	4a0b      	ldr	r2, [pc, #44]	; (8010864 <prvCheckTasksWaitingTermination+0x48>)
 8010836:	6813      	ldr	r3, [r2, #0]
 8010838:	3b01      	subs	r3, #1
 801083a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801083c:	4a07      	ldr	r2, [pc, #28]	; (801085c <prvCheckTasksWaitingTermination+0x40>)
 801083e:	6813      	ldr	r3, [r2, #0]
 8010840:	3b01      	subs	r3, #1
 8010842:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8010844:	f7ff f818 	bl	800f878 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010848:	4620      	mov	r0, r4
 801084a:	f7ff ffc7 	bl	80107dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801084e:	4b03      	ldr	r3, [pc, #12]	; (801085c <prvCheckTasksWaitingTermination+0x40>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d1e6      	bne.n	8010824 <prvCheckTasksWaitingTermination+0x8>
}
 8010856:	bd10      	pop	{r4, pc}
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop
 801085c:	2400f1d4 	.word	0x2400f1d4
 8010860:	2400f248 	.word	0x2400f248
 8010864:	2400f1d0 	.word	0x2400f1d0

08010868 <prvIdleTask>:
{
 8010868:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 801086a:	f7ff ffd7 	bl	801081c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801086e:	4b07      	ldr	r3, [pc, #28]	; (801088c <prvIdleTask+0x24>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	2b01      	cmp	r3, #1
 8010874:	d9f9      	bls.n	801086a <prvIdleTask+0x2>
				taskYIELD();
 8010876:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801087a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801087e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010882:	f3bf 8f4f 	dsb	sy
 8010886:	f3bf 8f6f 	isb	sy
 801088a:	e7ee      	b.n	801086a <prvIdleTask+0x2>
 801088c:	2400ed70 	.word	0x2400ed70

08010890 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010890:	b570      	push	{r4, r5, r6, lr}
 8010892:	4604      	mov	r4, r0
 8010894:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010896:	4b19      	ldr	r3, [pc, #100]	; (80108fc <prvAddCurrentTaskToDelayedList+0x6c>)
 8010898:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801089a:	4b19      	ldr	r3, [pc, #100]	; (8010900 <prvAddCurrentTaskToDelayedList+0x70>)
 801089c:	6818      	ldr	r0, [r3, #0]
 801089e:	3004      	adds	r0, #4
 80108a0:	f7fe ff4a 	bl	800f738 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80108a4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80108a8:	bf14      	ite	ne
 80108aa:	2300      	movne	r3, #0
 80108ac:	2301      	moveq	r3, #1
 80108ae:	2d00      	cmp	r5, #0
 80108b0:	bf08      	it	eq
 80108b2:	2300      	moveq	r3, #0
 80108b4:	b96b      	cbnz	r3, 80108d2 <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80108b6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80108b8:	4b11      	ldr	r3, [pc, #68]	; (8010900 <prvAddCurrentTaskToDelayedList+0x70>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80108be:	42a6      	cmp	r6, r4
 80108c0:	d90e      	bls.n	80108e0 <prvAddCurrentTaskToDelayedList+0x50>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108c2:	4b10      	ldr	r3, [pc, #64]	; (8010904 <prvAddCurrentTaskToDelayedList+0x74>)
 80108c4:	6818      	ldr	r0, [r3, #0]
 80108c6:	4b0e      	ldr	r3, [pc, #56]	; (8010900 <prvAddCurrentTaskToDelayedList+0x70>)
 80108c8:	6819      	ldr	r1, [r3, #0]
 80108ca:	3104      	adds	r1, #4
 80108cc:	f7fe ff1b 	bl	800f706 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80108d0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108d2:	4b0b      	ldr	r3, [pc, #44]	; (8010900 <prvAddCurrentTaskToDelayedList+0x70>)
 80108d4:	6819      	ldr	r1, [r3, #0]
 80108d6:	3104      	adds	r1, #4
 80108d8:	480b      	ldr	r0, [pc, #44]	; (8010908 <prvAddCurrentTaskToDelayedList+0x78>)
 80108da:	f7fe ff09 	bl	800f6f0 <vListInsertEnd>
 80108de:	e7f7      	b.n	80108d0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108e0:	4b0a      	ldr	r3, [pc, #40]	; (801090c <prvAddCurrentTaskToDelayedList+0x7c>)
 80108e2:	6818      	ldr	r0, [r3, #0]
 80108e4:	4b06      	ldr	r3, [pc, #24]	; (8010900 <prvAddCurrentTaskToDelayedList+0x70>)
 80108e6:	6819      	ldr	r1, [r3, #0]
 80108e8:	3104      	adds	r1, #4
 80108ea:	f7fe ff0c 	bl	800f706 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80108ee:	4b08      	ldr	r3, [pc, #32]	; (8010910 <prvAddCurrentTaskToDelayedList+0x80>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	42a3      	cmp	r3, r4
 80108f4:	d9ec      	bls.n	80108d0 <prvAddCurrentTaskToDelayedList+0x40>
					xNextTaskUnblockTime = xTimeToWake;
 80108f6:	4b06      	ldr	r3, [pc, #24]	; (8010910 <prvAddCurrentTaskToDelayedList+0x80>)
 80108f8:	601c      	str	r4, [r3, #0]
}
 80108fa:	e7e9      	b.n	80108d0 <prvAddCurrentTaskToDelayedList+0x40>
 80108fc:	2400f25c 	.word	0x2400f25c
 8010900:	2400ed64 	.word	0x2400ed64
 8010904:	2400ed6c 	.word	0x2400ed6c
 8010908:	2400f234 	.word	0x2400f234
 801090c:	2400ed68 	.word	0x2400ed68
 8010910:	2400f210 	.word	0x2400f210

08010914 <xTaskCreateStatic>:
	{
 8010914:	b530      	push	{r4, r5, lr}
 8010916:	b087      	sub	sp, #28
 8010918:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 801091a:	b17c      	cbz	r4, 801093c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801091c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801091e:	b1b5      	cbz	r5, 801094e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8010920:	25bc      	movs	r5, #188	; 0xbc
 8010922:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010924:	9d04      	ldr	r5, [sp, #16]
 8010926:	2dbc      	cmp	r5, #188	; 0xbc
 8010928:	d01a      	beq.n	8010960 <xTaskCreateStatic+0x4c>
 801092a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092e:	f383 8811 	msr	BASEPRI, r3
 8010932:	f3bf 8f6f 	isb	sy
 8010936:	f3bf 8f4f 	dsb	sy
 801093a:	e7fe      	b.n	801093a <xTaskCreateStatic+0x26>
 801093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010940:	f383 8811 	msr	BASEPRI, r3
 8010944:	f3bf 8f6f 	isb	sy
 8010948:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 801094c:	e7fe      	b.n	801094c <xTaskCreateStatic+0x38>
 801094e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010952:	f383 8811 	msr	BASEPRI, r3
 8010956:	f3bf 8f6f 	isb	sy
 801095a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 801095e:	e7fe      	b.n	801095e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010960:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010964:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010966:	2402      	movs	r4, #2
 8010968:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801096c:	2400      	movs	r4, #0
 801096e:	9403      	str	r4, [sp, #12]
 8010970:	9502      	str	r5, [sp, #8]
 8010972:	ac05      	add	r4, sp, #20
 8010974:	9401      	str	r4, [sp, #4]
 8010976:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010978:	9400      	str	r4, [sp, #0]
 801097a:	f7ff fe3d 	bl	80105f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801097e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010980:	f7ff fed6 	bl	8010730 <prvAddNewTaskToReadyList>
	}
 8010984:	9805      	ldr	r0, [sp, #20]
 8010986:	b007      	add	sp, #28
 8010988:	bd30      	pop	{r4, r5, pc}

0801098a <xTaskCreate>:
	{
 801098a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801098e:	b085      	sub	sp, #20
 8010990:	4607      	mov	r7, r0
 8010992:	4688      	mov	r8, r1
 8010994:	4614      	mov	r4, r2
 8010996:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010998:	0090      	lsls	r0, r2, #2
 801099a:	f7fe fddf 	bl	800f55c <pvPortMalloc>
			if( pxStack != NULL )
 801099e:	b300      	cbz	r0, 80109e2 <xTaskCreate+0x58>
 80109a0:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80109a2:	20bc      	movs	r0, #188	; 0xbc
 80109a4:	f7fe fdda 	bl	800f55c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80109a8:	4605      	mov	r5, r0
 80109aa:	b1b0      	cbz	r0, 80109da <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80109ac:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80109b0:	b1e5      	cbz	r5, 80109ec <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80109b2:	2300      	movs	r3, #0
 80109b4:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80109b8:	9303      	str	r3, [sp, #12]
 80109ba:	9502      	str	r5, [sp, #8]
 80109bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109be:	9301      	str	r3, [sp, #4]
 80109c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109c2:	9300      	str	r3, [sp, #0]
 80109c4:	4633      	mov	r3, r6
 80109c6:	4622      	mov	r2, r4
 80109c8:	4641      	mov	r1, r8
 80109ca:	4638      	mov	r0, r7
 80109cc:	f7ff fe14 	bl	80105f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80109d0:	4628      	mov	r0, r5
 80109d2:	f7ff fead 	bl	8010730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80109d6:	2001      	movs	r0, #1
 80109d8:	e005      	b.n	80109e6 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 80109da:	4648      	mov	r0, r9
 80109dc:	f7fe fe3c 	bl	800f658 <vPortFree>
 80109e0:	e7e6      	b.n	80109b0 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80109e2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80109e6:	b005      	add	sp, #20
 80109e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80109ec:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80109f0:	e7f9      	b.n	80109e6 <xTaskCreate+0x5c>
	...

080109f4 <vTaskStartScheduler>:
{
 80109f4:	b510      	push	{r4, lr}
 80109f6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80109f8:	2400      	movs	r4, #0
 80109fa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80109fc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80109fe:	aa07      	add	r2, sp, #28
 8010a00:	a906      	add	r1, sp, #24
 8010a02:	a805      	add	r0, sp, #20
 8010a04:	f7fe fd2e 	bl	800f464 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010a08:	9b05      	ldr	r3, [sp, #20]
 8010a0a:	9302      	str	r3, [sp, #8]
 8010a0c:	9b06      	ldr	r3, [sp, #24]
 8010a0e:	9301      	str	r3, [sp, #4]
 8010a10:	9400      	str	r4, [sp, #0]
 8010a12:	4623      	mov	r3, r4
 8010a14:	9a07      	ldr	r2, [sp, #28]
 8010a16:	491a      	ldr	r1, [pc, #104]	; (8010a80 <vTaskStartScheduler+0x8c>)
 8010a18:	481a      	ldr	r0, [pc, #104]	; (8010a84 <vTaskStartScheduler+0x90>)
 8010a1a:	f7ff ff7b 	bl	8010914 <xTaskCreateStatic>
 8010a1e:	4b1a      	ldr	r3, [pc, #104]	; (8010a88 <vTaskStartScheduler+0x94>)
 8010a20:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8010a22:	b140      	cbz	r0, 8010a36 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8010a24:	f000 fbe2 	bl	80111ec <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8010a28:	2801      	cmp	r0, #1
 8010a2a:	d006      	beq.n	8010a3a <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010a2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010a30:	d01d      	beq.n	8010a6e <vTaskStartScheduler+0x7a>
}
 8010a32:	b008      	add	sp, #32
 8010a34:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8010a36:	2000      	movs	r0, #0
 8010a38:	e7f6      	b.n	8010a28 <vTaskStartScheduler+0x34>
 8010a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a3e:	f383 8811 	msr	BASEPRI, r3
 8010a42:	f3bf 8f6f 	isb	sy
 8010a46:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010a4a:	4b10      	ldr	r3, [pc, #64]	; (8010a8c <vTaskStartScheduler+0x98>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	3354      	adds	r3, #84	; 0x54
 8010a50:	4a0f      	ldr	r2, [pc, #60]	; (8010a90 <vTaskStartScheduler+0x9c>)
 8010a52:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8010a54:	4b0f      	ldr	r3, [pc, #60]	; (8010a94 <vTaskStartScheduler+0xa0>)
 8010a56:	f04f 32ff 	mov.w	r2, #4294967295
 8010a5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010a5c:	4b0e      	ldr	r3, [pc, #56]	; (8010a98 <vTaskStartScheduler+0xa4>)
 8010a5e:	2201      	movs	r2, #1
 8010a60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010a62:	4b0e      	ldr	r3, [pc, #56]	; (8010a9c <vTaskStartScheduler+0xa8>)
 8010a64:	2200      	movs	r2, #0
 8010a66:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8010a68:	f7fe ff7e 	bl	800f968 <xPortStartScheduler>
 8010a6c:	e7e1      	b.n	8010a32 <vTaskStartScheduler+0x3e>
 8010a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a72:	f383 8811 	msr	BASEPRI, r3
 8010a76:	f3bf 8f6f 	isb	sy
 8010a7a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010a7e:	e7fe      	b.n	8010a7e <vTaskStartScheduler+0x8a>
 8010a80:	080262b0 	.word	0x080262b0
 8010a84:	08010869 	.word	0x08010869
 8010a88:	2400f20c 	.word	0x2400f20c
 8010a8c:	2400ed64 	.word	0x2400ed64
 8010a90:	240000dc 	.word	0x240000dc
 8010a94:	2400f210 	.word	0x2400f210
 8010a98:	2400f230 	.word	0x2400f230
 8010a9c:	2400f25c 	.word	0x2400f25c

08010aa0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010aa0:	4a02      	ldr	r2, [pc, #8]	; (8010aac <vTaskSuspendAll+0xc>)
 8010aa2:	6813      	ldr	r3, [r2, #0]
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	6013      	str	r3, [r2, #0]
}
 8010aa8:	4770      	bx	lr
 8010aaa:	bf00      	nop
 8010aac:	2400f1d8 	.word	0x2400f1d8

08010ab0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010ab0:	4b01      	ldr	r3, [pc, #4]	; (8010ab8 <xTaskGetTickCount+0x8>)
 8010ab2:	6818      	ldr	r0, [r3, #0]
}
 8010ab4:	4770      	bx	lr
 8010ab6:	bf00      	nop
 8010ab8:	2400f25c 	.word	0x2400f25c

08010abc <xTaskIncrementTick>:
{
 8010abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010abe:	4b3a      	ldr	r3, [pc, #232]	; (8010ba8 <xTaskIncrementTick+0xec>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d169      	bne.n	8010b9a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010ac6:	4b39      	ldr	r3, [pc, #228]	; (8010bac <xTaskIncrementTick+0xf0>)
 8010ac8:	681d      	ldr	r5, [r3, #0]
 8010aca:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8010acc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010ace:	b9c5      	cbnz	r5, 8010b02 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8010ad0:	4b37      	ldr	r3, [pc, #220]	; (8010bb0 <xTaskIncrementTick+0xf4>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	b143      	cbz	r3, 8010aea <xTaskIncrementTick+0x2e>
 8010ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010adc:	f383 8811 	msr	BASEPRI, r3
 8010ae0:	f3bf 8f6f 	isb	sy
 8010ae4:	f3bf 8f4f 	dsb	sy
 8010ae8:	e7fe      	b.n	8010ae8 <xTaskIncrementTick+0x2c>
 8010aea:	4a31      	ldr	r2, [pc, #196]	; (8010bb0 <xTaskIncrementTick+0xf4>)
 8010aec:	6811      	ldr	r1, [r2, #0]
 8010aee:	4b31      	ldr	r3, [pc, #196]	; (8010bb4 <xTaskIncrementTick+0xf8>)
 8010af0:	6818      	ldr	r0, [r3, #0]
 8010af2:	6010      	str	r0, [r2, #0]
 8010af4:	6019      	str	r1, [r3, #0]
 8010af6:	4a30      	ldr	r2, [pc, #192]	; (8010bb8 <xTaskIncrementTick+0xfc>)
 8010af8:	6813      	ldr	r3, [r2, #0]
 8010afa:	3301      	adds	r3, #1
 8010afc:	6013      	str	r3, [r2, #0]
 8010afe:	f7ff fd65 	bl	80105cc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010b02:	4b2e      	ldr	r3, [pc, #184]	; (8010bbc <xTaskIncrementTick+0x100>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	42ab      	cmp	r3, r5
 8010b08:	d93d      	bls.n	8010b86 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8010b0a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010b0c:	4b2c      	ldr	r3, [pc, #176]	; (8010bc0 <xTaskIncrementTick+0x104>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010b16:	009a      	lsls	r2, r3, #2
 8010b18:	4b2a      	ldr	r3, [pc, #168]	; (8010bc4 <xTaskIncrementTick+0x108>)
 8010b1a:	589b      	ldr	r3, [r3, r2]
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d900      	bls.n	8010b22 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8010b20:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8010b22:	4b29      	ldr	r3, [pc, #164]	; (8010bc8 <xTaskIncrementTick+0x10c>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d03c      	beq.n	8010ba4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8010b2a:	2701      	movs	r7, #1
	return xSwitchRequired;
 8010b2c:	e03a      	b.n	8010ba4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8010b2e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b30:	4b1f      	ldr	r3, [pc, #124]	; (8010bb0 <xTaskIncrementTick+0xf4>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	b343      	cbz	r3, 8010b8a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b38:	4b1d      	ldr	r3, [pc, #116]	; (8010bb0 <xTaskIncrementTick+0xf4>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	68db      	ldr	r3, [r3, #12]
 8010b3e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010b40:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8010b42:	429d      	cmp	r5, r3
 8010b44:	d326      	bcc.n	8010b94 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010b46:	1d26      	adds	r6, r4, #4
 8010b48:	4630      	mov	r0, r6
 8010b4a:	f7fe fdf5 	bl	800f738 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010b50:	b11b      	cbz	r3, 8010b5a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010b52:	f104 0018 	add.w	r0, r4, #24
 8010b56:	f7fe fdef 	bl	800f738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010b5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010b5c:	4a1b      	ldr	r2, [pc, #108]	; (8010bcc <xTaskIncrementTick+0x110>)
 8010b5e:	6812      	ldr	r2, [r2, #0]
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d901      	bls.n	8010b68 <xTaskIncrementTick+0xac>
 8010b64:	4a19      	ldr	r2, [pc, #100]	; (8010bcc <xTaskIncrementTick+0x110>)
 8010b66:	6013      	str	r3, [r2, #0]
 8010b68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010b6c:	009a      	lsls	r2, r3, #2
 8010b6e:	4631      	mov	r1, r6
 8010b70:	4814      	ldr	r0, [pc, #80]	; (8010bc4 <xTaskIncrementTick+0x108>)
 8010b72:	4410      	add	r0, r2
 8010b74:	f7fe fdbc 	bl	800f6f0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010b7a:	4b11      	ldr	r3, [pc, #68]	; (8010bc0 <xTaskIncrementTick+0x104>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d2d4      	bcs.n	8010b2e <xTaskIncrementTick+0x72>
 8010b84:	e7d4      	b.n	8010b30 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8010b86:	2700      	movs	r7, #0
 8010b88:	e7d2      	b.n	8010b30 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b8a:	4b0c      	ldr	r3, [pc, #48]	; (8010bbc <xTaskIncrementTick+0x100>)
 8010b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b90:	601a      	str	r2, [r3, #0]
					break;
 8010b92:	e7bb      	b.n	8010b0c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8010b94:	4a09      	ldr	r2, [pc, #36]	; (8010bbc <xTaskIncrementTick+0x100>)
 8010b96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010b98:	e7b8      	b.n	8010b0c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8010b9a:	4a0d      	ldr	r2, [pc, #52]	; (8010bd0 <xTaskIncrementTick+0x114>)
 8010b9c:	6813      	ldr	r3, [r2, #0]
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8010ba2:	2700      	movs	r7, #0
}
 8010ba4:	4638      	mov	r0, r7
 8010ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ba8:	2400f1d8 	.word	0x2400f1d8
 8010bac:	2400f25c 	.word	0x2400f25c
 8010bb0:	2400ed68 	.word	0x2400ed68
 8010bb4:	2400ed6c 	.word	0x2400ed6c
 8010bb8:	2400f214 	.word	0x2400f214
 8010bbc:	2400f210 	.word	0x2400f210
 8010bc0:	2400ed64 	.word	0x2400ed64
 8010bc4:	2400ed70 	.word	0x2400ed70
 8010bc8:	2400f260 	.word	0x2400f260
 8010bcc:	2400f1e0 	.word	0x2400f1e0
 8010bd0:	2400f218 	.word	0x2400f218

08010bd4 <xTaskResumeAll>:
{
 8010bd4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8010bd6:	4b35      	ldr	r3, [pc, #212]	; (8010cac <xTaskResumeAll+0xd8>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	b943      	cbnz	r3, 8010bee <xTaskResumeAll+0x1a>
 8010bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010be0:	f383 8811 	msr	BASEPRI, r3
 8010be4:	f3bf 8f6f 	isb	sy
 8010be8:	f3bf 8f4f 	dsb	sy
 8010bec:	e7fe      	b.n	8010bec <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8010bee:	f7fe fe21 	bl	800f834 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8010bf2:	4b2e      	ldr	r3, [pc, #184]	; (8010cac <xTaskResumeAll+0xd8>)
 8010bf4:	681a      	ldr	r2, [r3, #0]
 8010bf6:	3a01      	subs	r2, #1
 8010bf8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d14f      	bne.n	8010ca0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010c00:	4b2b      	ldr	r3, [pc, #172]	; (8010cb0 <xTaskResumeAll+0xdc>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	b90b      	cbnz	r3, 8010c0a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8010c06:	2400      	movs	r4, #0
 8010c08:	e04b      	b.n	8010ca2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8010c0a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c0c:	4b29      	ldr	r3, [pc, #164]	; (8010cb4 <xTaskResumeAll+0xe0>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	b31b      	cbz	r3, 8010c5a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c12:	4b28      	ldr	r3, [pc, #160]	; (8010cb4 <xTaskResumeAll+0xe0>)
 8010c14:	68db      	ldr	r3, [r3, #12]
 8010c16:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c18:	f104 0018 	add.w	r0, r4, #24
 8010c1c:	f7fe fd8c 	bl	800f738 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c20:	1d25      	adds	r5, r4, #4
 8010c22:	4628      	mov	r0, r5
 8010c24:	f7fe fd88 	bl	800f738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010c28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010c2a:	4b23      	ldr	r3, [pc, #140]	; (8010cb8 <xTaskResumeAll+0xe4>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	4298      	cmp	r0, r3
 8010c30:	d901      	bls.n	8010c36 <xTaskResumeAll+0x62>
 8010c32:	4b21      	ldr	r3, [pc, #132]	; (8010cb8 <xTaskResumeAll+0xe4>)
 8010c34:	6018      	str	r0, [r3, #0]
 8010c36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010c3a:	4629      	mov	r1, r5
 8010c3c:	4b1f      	ldr	r3, [pc, #124]	; (8010cbc <xTaskResumeAll+0xe8>)
 8010c3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010c42:	f7fe fd55 	bl	800f6f0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010c48:	4b1d      	ldr	r3, [pc, #116]	; (8010cc0 <xTaskResumeAll+0xec>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d3dc      	bcc.n	8010c0c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8010c52:	4b1c      	ldr	r3, [pc, #112]	; (8010cc4 <xTaskResumeAll+0xf0>)
 8010c54:	2201      	movs	r2, #1
 8010c56:	601a      	str	r2, [r3, #0]
 8010c58:	e7d8      	b.n	8010c0c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8010c5a:	b10c      	cbz	r4, 8010c60 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8010c5c:	f7ff fcb6 	bl	80105cc <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010c60:	4b19      	ldr	r3, [pc, #100]	; (8010cc8 <xTaskResumeAll+0xf4>)
 8010c62:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8010c64:	b984      	cbnz	r4, 8010c88 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8010c66:	4b17      	ldr	r3, [pc, #92]	; (8010cc4 <xTaskResumeAll+0xf0>)
 8010c68:	681c      	ldr	r4, [r3, #0]
 8010c6a:	b1d4      	cbz	r4, 8010ca2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8010c6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8010c80:	2401      	movs	r4, #1
 8010c82:	e00e      	b.n	8010ca2 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010c84:	3c01      	subs	r4, #1
 8010c86:	d007      	beq.n	8010c98 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8010c88:	f7ff ff18 	bl	8010abc <xTaskIncrementTick>
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	d0f9      	beq.n	8010c84 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8010c90:	4b0c      	ldr	r3, [pc, #48]	; (8010cc4 <xTaskResumeAll+0xf0>)
 8010c92:	2201      	movs	r2, #1
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	e7f5      	b.n	8010c84 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8010c98:	4b0b      	ldr	r3, [pc, #44]	; (8010cc8 <xTaskResumeAll+0xf4>)
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	601a      	str	r2, [r3, #0]
 8010c9e:	e7e2      	b.n	8010c66 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8010ca0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010ca2:	f7fe fde9 	bl	800f878 <vPortExitCritical>
}
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	bd38      	pop	{r3, r4, r5, pc}
 8010caa:	bf00      	nop
 8010cac:	2400f1d8 	.word	0x2400f1d8
 8010cb0:	2400f1d0 	.word	0x2400f1d0
 8010cb4:	2400f21c 	.word	0x2400f21c
 8010cb8:	2400f1e0 	.word	0x2400f1e0
 8010cbc:	2400ed70 	.word	0x2400ed70
 8010cc0:	2400ed64 	.word	0x2400ed64
 8010cc4:	2400f260 	.word	0x2400f260
 8010cc8:	2400f218 	.word	0x2400f218

08010ccc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010ccc:	4b21      	ldr	r3, [pc, #132]	; (8010d54 <vTaskSwitchContext+0x88>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	b11b      	cbz	r3, 8010cda <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8010cd2:	4b21      	ldr	r3, [pc, #132]	; (8010d58 <vTaskSwitchContext+0x8c>)
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	601a      	str	r2, [r3, #0]
 8010cd8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8010cda:	4b1f      	ldr	r3, [pc, #124]	; (8010d58 <vTaskSwitchContext+0x8c>)
 8010cdc:	2200      	movs	r2, #0
 8010cde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ce0:	4b1e      	ldr	r3, [pc, #120]	; (8010d5c <vTaskSwitchContext+0x90>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8010ce8:	008a      	lsls	r2, r1, #2
 8010cea:	491d      	ldr	r1, [pc, #116]	; (8010d60 <vTaskSwitchContext+0x94>)
 8010cec:	588a      	ldr	r2, [r1, r2]
 8010cee:	b95a      	cbnz	r2, 8010d08 <vTaskSwitchContext+0x3c>
 8010cf0:	b10b      	cbz	r3, 8010cf6 <vTaskSwitchContext+0x2a>
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	e7f6      	b.n	8010ce4 <vTaskSwitchContext+0x18>
 8010cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfa:	f383 8811 	msr	BASEPRI, r3
 8010cfe:	f3bf 8f6f 	isb	sy
 8010d02:	f3bf 8f4f 	dsb	sy
 8010d06:	e7fe      	b.n	8010d06 <vTaskSwitchContext+0x3a>
 8010d08:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8010d0c:	0082      	lsls	r2, r0, #2
 8010d0e:	440a      	add	r2, r1
 8010d10:	6850      	ldr	r0, [r2, #4]
 8010d12:	6840      	ldr	r0, [r0, #4]
 8010d14:	6050      	str	r0, [r2, #4]
 8010d16:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8010d1a:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8010d1e:	3208      	adds	r2, #8
 8010d20:	4411      	add	r1, r2
 8010d22:	4288      	cmp	r0, r1
 8010d24:	d00f      	beq.n	8010d46 <vTaskSwitchContext+0x7a>
 8010d26:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8010d2a:	0091      	lsls	r1, r2, #2
 8010d2c:	4a0c      	ldr	r2, [pc, #48]	; (8010d60 <vTaskSwitchContext+0x94>)
 8010d2e:	440a      	add	r2, r1
 8010d30:	6852      	ldr	r2, [r2, #4]
 8010d32:	68d1      	ldr	r1, [r2, #12]
 8010d34:	4a0b      	ldr	r2, [pc, #44]	; (8010d64 <vTaskSwitchContext+0x98>)
 8010d36:	6011      	str	r1, [r2, #0]
 8010d38:	4908      	ldr	r1, [pc, #32]	; (8010d5c <vTaskSwitchContext+0x90>)
 8010d3a:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010d3c:	6813      	ldr	r3, [r2, #0]
 8010d3e:	3354      	adds	r3, #84	; 0x54
 8010d40:	4a09      	ldr	r2, [pc, #36]	; (8010d68 <vTaskSwitchContext+0x9c>)
 8010d42:	6013      	str	r3, [r2, #0]
}
 8010d44:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d46:	6840      	ldr	r0, [r0, #4]
 8010d48:	4662      	mov	r2, ip
 8010d4a:	0091      	lsls	r1, r2, #2
 8010d4c:	4a04      	ldr	r2, [pc, #16]	; (8010d60 <vTaskSwitchContext+0x94>)
 8010d4e:	440a      	add	r2, r1
 8010d50:	6050      	str	r0, [r2, #4]
 8010d52:	e7e8      	b.n	8010d26 <vTaskSwitchContext+0x5a>
 8010d54:	2400f1d8 	.word	0x2400f1d8
 8010d58:	2400f260 	.word	0x2400f260
 8010d5c:	2400f1e0 	.word	0x2400f1e0
 8010d60:	2400ed70 	.word	0x2400ed70
 8010d64:	2400ed64 	.word	0x2400ed64
 8010d68:	240000dc 	.word	0x240000dc

08010d6c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8010d6c:	b158      	cbz	r0, 8010d86 <vTaskPlaceOnEventList+0x1a>
{
 8010d6e:	b510      	push	{r4, lr}
 8010d70:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010d72:	4a09      	ldr	r2, [pc, #36]	; (8010d98 <vTaskPlaceOnEventList+0x2c>)
 8010d74:	6811      	ldr	r1, [r2, #0]
 8010d76:	3118      	adds	r1, #24
 8010d78:	f7fe fcc5 	bl	800f706 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010d7c:	2101      	movs	r1, #1
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f7ff fd86 	bl	8010890 <prvAddCurrentTaskToDelayedList>
}
 8010d84:	bd10      	pop	{r4, pc}
 8010d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d8a:	f383 8811 	msr	BASEPRI, r3
 8010d8e:	f3bf 8f6f 	isb	sy
 8010d92:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8010d96:	e7fe      	b.n	8010d96 <vTaskPlaceOnEventList+0x2a>
 8010d98:	2400ed64 	.word	0x2400ed64

08010d9c <vTaskPlaceOnEventListRestricted>:
	{
 8010d9c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8010d9e:	b170      	cbz	r0, 8010dbe <vTaskPlaceOnEventListRestricted+0x22>
 8010da0:	460d      	mov	r5, r1
 8010da2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010da4:	4a0a      	ldr	r2, [pc, #40]	; (8010dd0 <vTaskPlaceOnEventListRestricted+0x34>)
 8010da6:	6811      	ldr	r1, [r2, #0]
 8010da8:	3118      	adds	r1, #24
 8010daa:	f7fe fca1 	bl	800f6f0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8010dae:	b10c      	cbz	r4, 8010db4 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8010db0:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010db4:	4621      	mov	r1, r4
 8010db6:	4628      	mov	r0, r5
 8010db8:	f7ff fd6a 	bl	8010890 <prvAddCurrentTaskToDelayedList>
	}
 8010dbc:	bd38      	pop	{r3, r4, r5, pc}
 8010dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc2:	f383 8811 	msr	BASEPRI, r3
 8010dc6:	f3bf 8f6f 	isb	sy
 8010dca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8010dce:	e7fe      	b.n	8010dce <vTaskPlaceOnEventListRestricted+0x32>
 8010dd0:	2400ed64 	.word	0x2400ed64

08010dd4 <xTaskRemoveFromEventList>:
{
 8010dd4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dd6:	68c3      	ldr	r3, [r0, #12]
 8010dd8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8010dda:	b324      	cbz	r4, 8010e26 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010ddc:	f104 0518 	add.w	r5, r4, #24
 8010de0:	4628      	mov	r0, r5
 8010de2:	f7fe fca9 	bl	800f738 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010de6:	4b18      	ldr	r3, [pc, #96]	; (8010e48 <xTaskRemoveFromEventList+0x74>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	bb2b      	cbnz	r3, 8010e38 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010dec:	1d25      	adds	r5, r4, #4
 8010dee:	4628      	mov	r0, r5
 8010df0:	f7fe fca2 	bl	800f738 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010df4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010df6:	4b15      	ldr	r3, [pc, #84]	; (8010e4c <xTaskRemoveFromEventList+0x78>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	4298      	cmp	r0, r3
 8010dfc:	d901      	bls.n	8010e02 <xTaskRemoveFromEventList+0x2e>
 8010dfe:	4b13      	ldr	r3, [pc, #76]	; (8010e4c <xTaskRemoveFromEventList+0x78>)
 8010e00:	6018      	str	r0, [r3, #0]
 8010e02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010e06:	4629      	mov	r1, r5
 8010e08:	4b11      	ldr	r3, [pc, #68]	; (8010e50 <xTaskRemoveFromEventList+0x7c>)
 8010e0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010e0e:	f7fe fc6f 	bl	800f6f0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010e12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010e14:	4b0f      	ldr	r3, [pc, #60]	; (8010e54 <xTaskRemoveFromEventList+0x80>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d911      	bls.n	8010e42 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8010e1e:	2001      	movs	r0, #1
 8010e20:	4b0d      	ldr	r3, [pc, #52]	; (8010e58 <xTaskRemoveFromEventList+0x84>)
 8010e22:	6018      	str	r0, [r3, #0]
}
 8010e24:	bd38      	pop	{r3, r4, r5, pc}
 8010e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e2a:	f383 8811 	msr	BASEPRI, r3
 8010e2e:	f3bf 8f6f 	isb	sy
 8010e32:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8010e36:	e7fe      	b.n	8010e36 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010e38:	4629      	mov	r1, r5
 8010e3a:	4808      	ldr	r0, [pc, #32]	; (8010e5c <xTaskRemoveFromEventList+0x88>)
 8010e3c:	f7fe fc58 	bl	800f6f0 <vListInsertEnd>
 8010e40:	e7e7      	b.n	8010e12 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8010e42:	2000      	movs	r0, #0
	return xReturn;
 8010e44:	e7ee      	b.n	8010e24 <xTaskRemoveFromEventList+0x50>
 8010e46:	bf00      	nop
 8010e48:	2400f1d8 	.word	0x2400f1d8
 8010e4c:	2400f1e0 	.word	0x2400f1e0
 8010e50:	2400ed70 	.word	0x2400ed70
 8010e54:	2400ed64 	.word	0x2400ed64
 8010e58:	2400f260 	.word	0x2400f260
 8010e5c:	2400f21c 	.word	0x2400f21c

08010e60 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010e60:	4b03      	ldr	r3, [pc, #12]	; (8010e70 <vTaskInternalSetTimeOutState+0x10>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010e66:	4b03      	ldr	r3, [pc, #12]	; (8010e74 <vTaskInternalSetTimeOutState+0x14>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	6043      	str	r3, [r0, #4]
}
 8010e6c:	4770      	bx	lr
 8010e6e:	bf00      	nop
 8010e70:	2400f214 	.word	0x2400f214
 8010e74:	2400f25c 	.word	0x2400f25c

08010e78 <xTaskCheckForTimeOut>:
{
 8010e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8010e7a:	b1c8      	cbz	r0, 8010eb0 <xTaskCheckForTimeOut+0x38>
 8010e7c:	460c      	mov	r4, r1
 8010e7e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8010e80:	b1f9      	cbz	r1, 8010ec2 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8010e82:	f7fe fcd7 	bl	800f834 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8010e86:	4b1b      	ldr	r3, [pc, #108]	; (8010ef4 <xTaskCheckForTimeOut+0x7c>)
 8010e88:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010e8a:	686b      	ldr	r3, [r5, #4]
 8010e8c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8010e8e:	6822      	ldr	r2, [r4, #0]
 8010e90:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010e94:	d026      	beq.n	8010ee4 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010e96:	4e18      	ldr	r6, [pc, #96]	; (8010ef8 <xTaskCheckForTimeOut+0x80>)
 8010e98:	6836      	ldr	r6, [r6, #0]
 8010e9a:	682f      	ldr	r7, [r5, #0]
 8010e9c:	42b7      	cmp	r7, r6
 8010e9e:	d001      	beq.n	8010ea4 <xTaskCheckForTimeOut+0x2c>
 8010ea0:	428b      	cmp	r3, r1
 8010ea2:	d924      	bls.n	8010eee <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010ea4:	4282      	cmp	r2, r0
 8010ea6:	d815      	bhi.n	8010ed4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8010eac:	2401      	movs	r4, #1
 8010eae:	e01a      	b.n	8010ee6 <xTaskCheckForTimeOut+0x6e>
 8010eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb4:	f383 8811 	msr	BASEPRI, r3
 8010eb8:	f3bf 8f6f 	isb	sy
 8010ebc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8010ec0:	e7fe      	b.n	8010ec0 <xTaskCheckForTimeOut+0x48>
 8010ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec6:	f383 8811 	msr	BASEPRI, r3
 8010eca:	f3bf 8f6f 	isb	sy
 8010ece:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8010ed2:	e7fe      	b.n	8010ed2 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8010ed4:	1a5b      	subs	r3, r3, r1
 8010ed6:	4413      	add	r3, r2
 8010ed8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010eda:	4628      	mov	r0, r5
 8010edc:	f7ff ffc0 	bl	8010e60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010ee0:	2400      	movs	r4, #0
 8010ee2:	e000      	b.n	8010ee6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8010ee4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010ee6:	f7fe fcc7 	bl	800f878 <vPortExitCritical>
}
 8010eea:	4620      	mov	r0, r4
 8010eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8010eee:	2401      	movs	r4, #1
 8010ef0:	e7f9      	b.n	8010ee6 <xTaskCheckForTimeOut+0x6e>
 8010ef2:	bf00      	nop
 8010ef4:	2400f25c 	.word	0x2400f25c
 8010ef8:	2400f214 	.word	0x2400f214

08010efc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010efc:	4b01      	ldr	r3, [pc, #4]	; (8010f04 <vTaskMissedYield+0x8>)
 8010efe:	2201      	movs	r2, #1
 8010f00:	601a      	str	r2, [r3, #0]
}
 8010f02:	4770      	bx	lr
 8010f04:	2400f260 	.word	0x2400f260

08010f08 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010f08:	4b05      	ldr	r3, [pc, #20]	; (8010f20 <xTaskGetSchedulerState+0x18>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	b133      	cbz	r3, 8010f1c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f0e:	4b05      	ldr	r3, [pc, #20]	; (8010f24 <xTaskGetSchedulerState+0x1c>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	b10b      	cbz	r3, 8010f18 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8010f14:	2000      	movs	r0, #0
	}
 8010f16:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8010f18:	2002      	movs	r0, #2
 8010f1a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010f1c:	2001      	movs	r0, #1
 8010f1e:	4770      	bx	lr
 8010f20:	2400f230 	.word	0x2400f230
 8010f24:	2400f1d8 	.word	0x2400f1d8

08010f28 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	d03e      	beq.n	8010faa <xTaskPriorityInherit+0x82>
	{
 8010f2c:	b538      	push	{r3, r4, r5, lr}
 8010f2e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010f30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010f32:	4a20      	ldr	r2, [pc, #128]	; (8010fb4 <xTaskPriorityInherit+0x8c>)
 8010f34:	6812      	ldr	r2, [r2, #0]
 8010f36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d22e      	bcs.n	8010f9a <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010f3c:	6982      	ldr	r2, [r0, #24]
 8010f3e:	2a00      	cmp	r2, #0
 8010f40:	db05      	blt.n	8010f4e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f42:	4a1c      	ldr	r2, [pc, #112]	; (8010fb4 <xTaskPriorityInherit+0x8c>)
 8010f44:	6812      	ldr	r2, [r2, #0]
 8010f46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010f48:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010f4c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010f4e:	6961      	ldr	r1, [r4, #20]
 8010f50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010f54:	4a18      	ldr	r2, [pc, #96]	; (8010fb8 <xTaskPriorityInherit+0x90>)
 8010f56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f5a:	4299      	cmp	r1, r3
 8010f5c:	d005      	beq.n	8010f6a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010f5e:	4b15      	ldr	r3, [pc, #84]	; (8010fb4 <xTaskPriorityInherit+0x8c>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f64:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8010f66:	2001      	movs	r0, #1
	}
 8010f68:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f6a:	1d25      	adds	r5, r4, #4
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	f7fe fbe3 	bl	800f738 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010f72:	4b10      	ldr	r3, [pc, #64]	; (8010fb4 <xTaskPriorityInherit+0x8c>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010f78:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010f7a:	4b10      	ldr	r3, [pc, #64]	; (8010fbc <xTaskPriorityInherit+0x94>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	4298      	cmp	r0, r3
 8010f80:	d901      	bls.n	8010f86 <xTaskPriorityInherit+0x5e>
 8010f82:	4b0e      	ldr	r3, [pc, #56]	; (8010fbc <xTaskPriorityInherit+0x94>)
 8010f84:	6018      	str	r0, [r3, #0]
 8010f86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	4b0a      	ldr	r3, [pc, #40]	; (8010fb8 <xTaskPriorityInherit+0x90>)
 8010f8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010f92:	f7fe fbad 	bl	800f6f0 <vListInsertEnd>
				xReturn = pdTRUE;
 8010f96:	2001      	movs	r0, #1
 8010f98:	e7e6      	b.n	8010f68 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010f9a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8010f9c:	4b05      	ldr	r3, [pc, #20]	; (8010fb4 <xTaskPriorityInherit+0x8c>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d303      	bcc.n	8010fae <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 8010fa6:	2000      	movs	r0, #0
 8010fa8:	e7de      	b.n	8010f68 <xTaskPriorityInherit+0x40>
 8010faa:	2000      	movs	r0, #0
	}
 8010fac:	4770      	bx	lr
					xReturn = pdTRUE;
 8010fae:	2001      	movs	r0, #1
		return xReturn;
 8010fb0:	e7da      	b.n	8010f68 <xTaskPriorityInherit+0x40>
 8010fb2:	bf00      	nop
 8010fb4:	2400ed64 	.word	0x2400ed64
 8010fb8:	2400ed70 	.word	0x2400ed70
 8010fbc:	2400f1e0 	.word	0x2400f1e0

08010fc0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	d03b      	beq.n	801103c <xTaskPriorityDisinherit+0x7c>
	{
 8010fc4:	b538      	push	{r3, r4, r5, lr}
 8010fc6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8010fc8:	4b1e      	ldr	r3, [pc, #120]	; (8011044 <xTaskPriorityDisinherit+0x84>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4283      	cmp	r3, r0
 8010fce:	d008      	beq.n	8010fe2 <xTaskPriorityDisinherit+0x22>
 8010fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fd4:	f383 8811 	msr	BASEPRI, r3
 8010fd8:	f3bf 8f6f 	isb	sy
 8010fdc:	f3bf 8f4f 	dsb	sy
 8010fe0:	e7fe      	b.n	8010fe0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8010fe2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010fe4:	b943      	cbnz	r3, 8010ff8 <xTaskPriorityDisinherit+0x38>
 8010fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fea:	f383 8811 	msr	BASEPRI, r3
 8010fee:	f3bf 8f6f 	isb	sy
 8010ff2:	f3bf 8f4f 	dsb	sy
 8010ff6:	e7fe      	b.n	8010ff6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8010ff8:	3b01      	subs	r3, #1
 8010ffa:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010ffc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8010ffe:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8011000:	4291      	cmp	r1, r2
 8011002:	d01d      	beq.n	8011040 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011004:	b10b      	cbz	r3, 801100a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8011006:	2000      	movs	r0, #0
	}
 8011008:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801100a:	1d05      	adds	r5, r0, #4
 801100c:	4628      	mov	r0, r5
 801100e:	f7fe fb93 	bl	800f738 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011012:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011014:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011016:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 801101a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 801101c:	4b0a      	ldr	r3, [pc, #40]	; (8011048 <xTaskPriorityDisinherit+0x88>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4298      	cmp	r0, r3
 8011022:	d901      	bls.n	8011028 <xTaskPriorityDisinherit+0x68>
 8011024:	4b08      	ldr	r3, [pc, #32]	; (8011048 <xTaskPriorityDisinherit+0x88>)
 8011026:	6018      	str	r0, [r3, #0]
 8011028:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801102c:	4629      	mov	r1, r5
 801102e:	4b07      	ldr	r3, [pc, #28]	; (801104c <xTaskPriorityDisinherit+0x8c>)
 8011030:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011034:	f7fe fb5c 	bl	800f6f0 <vListInsertEnd>
					xReturn = pdTRUE;
 8011038:	2001      	movs	r0, #1
 801103a:	e7e5      	b.n	8011008 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 801103c:	2000      	movs	r0, #0
	}
 801103e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8011040:	2000      	movs	r0, #0
 8011042:	e7e1      	b.n	8011008 <xTaskPriorityDisinherit+0x48>
 8011044:	2400ed64 	.word	0x2400ed64
 8011048:	2400f1e0 	.word	0x2400f1e0
 801104c:	2400ed70 	.word	0x2400ed70

08011050 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8011050:	2800      	cmp	r0, #0
 8011052:	d046      	beq.n	80110e2 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8011054:	b538      	push	{r3, r4, r5, lr}
 8011056:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8011058:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801105a:	b943      	cbnz	r3, 801106e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801105c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011060:	f383 8811 	msr	BASEPRI, r3
 8011064:	f3bf 8f6f 	isb	sy
 8011068:	f3bf 8f4f 	dsb	sy
 801106c:	e7fe      	b.n	801106c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801106e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8011070:	428a      	cmp	r2, r1
 8011072:	d200      	bcs.n	8011076 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011074:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011076:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011078:	4291      	cmp	r1, r2
 801107a:	d001      	beq.n	8011080 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801107c:	2b01      	cmp	r3, #1
 801107e:	d000      	beq.n	8011082 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8011080:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8011082:	4b18      	ldr	r3, [pc, #96]	; (80110e4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	42a3      	cmp	r3, r4
 8011088:	d022      	beq.n	80110d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 801108a:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801108c:	69a3      	ldr	r3, [r4, #24]
 801108e:	2b00      	cmp	r3, #0
 8011090:	db02      	blt.n	8011098 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011092:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011096:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011098:	6962      	ldr	r2, [r4, #20]
 801109a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801109e:	4b12      	ldr	r3, [pc, #72]	; (80110e8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80110a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80110a4:	428a      	cmp	r2, r1
 80110a6:	d1eb      	bne.n	8011080 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110a8:	1d25      	adds	r5, r4, #4
 80110aa:	4628      	mov	r0, r5
 80110ac:	f7fe fb44 	bl	800f738 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80110b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80110b2:	4b0e      	ldr	r3, [pc, #56]	; (80110ec <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4298      	cmp	r0, r3
 80110b8:	d901      	bls.n	80110be <vTaskPriorityDisinheritAfterTimeout+0x6e>
 80110ba:	4b0c      	ldr	r3, [pc, #48]	; (80110ec <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80110bc:	6018      	str	r0, [r3, #0]
 80110be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80110c2:	4629      	mov	r1, r5
 80110c4:	4b08      	ldr	r3, [pc, #32]	; (80110e8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80110c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80110ca:	f7fe fb11 	bl	800f6f0 <vListInsertEnd>
	}
 80110ce:	e7d7      	b.n	8011080 <vTaskPriorityDisinheritAfterTimeout+0x30>
 80110d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d4:	f383 8811 	msr	BASEPRI, r3
 80110d8:	f3bf 8f6f 	isb	sy
 80110dc:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80110e0:	e7fe      	b.n	80110e0 <vTaskPriorityDisinheritAfterTimeout+0x90>
 80110e2:	4770      	bx	lr
 80110e4:	2400ed64 	.word	0x2400ed64
 80110e8:	2400ed70 	.word	0x2400ed70
 80110ec:	2400f1e0 	.word	0x2400f1e0

080110f0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80110f0:	4b05      	ldr	r3, [pc, #20]	; (8011108 <pvTaskIncrementMutexHeldCount+0x18>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	b123      	cbz	r3, 8011100 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80110f6:	4b04      	ldr	r3, [pc, #16]	; (8011108 <pvTaskIncrementMutexHeldCount+0x18>)
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80110fc:	3301      	adds	r3, #1
 80110fe:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8011100:	4b01      	ldr	r3, [pc, #4]	; (8011108 <pvTaskIncrementMutexHeldCount+0x18>)
 8011102:	6818      	ldr	r0, [r3, #0]
	}
 8011104:	4770      	bx	lr
 8011106:	bf00      	nop
 8011108:	2400ed64 	.word	0x2400ed64

0801110c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801110c:	4b06      	ldr	r3, [pc, #24]	; (8011128 <prvGetNextExpireTime+0x1c>)
 801110e:	681a      	ldr	r2, [r3, #0]
 8011110:	6813      	ldr	r3, [r2, #0]
 8011112:	b92b      	cbnz	r3, 8011120 <prvGetNextExpireTime+0x14>
 8011114:	2301      	movs	r3, #1
 8011116:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011118:	b923      	cbnz	r3, 8011124 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801111a:	68d3      	ldr	r3, [r2, #12]
 801111c:	6818      	ldr	r0, [r3, #0]
 801111e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011120:	2300      	movs	r3, #0
 8011122:	e7f8      	b.n	8011116 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011124:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8011126:	4770      	bx	lr
 8011128:	2400f264 	.word	0x2400f264

0801112c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801112c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801112e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011130:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011132:	4291      	cmp	r1, r2
 8011134:	d80c      	bhi.n	8011150 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011136:	1ad2      	subs	r2, r2, r3
 8011138:	6983      	ldr	r3, [r0, #24]
 801113a:	429a      	cmp	r2, r3
 801113c:	d301      	bcc.n	8011142 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801113e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8011140:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011142:	1d01      	adds	r1, r0, #4
 8011144:	4b0b      	ldr	r3, [pc, #44]	; (8011174 <prvInsertTimerInActiveList+0x48>)
 8011146:	6818      	ldr	r0, [r3, #0]
 8011148:	f7fe fadd 	bl	800f706 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801114c:	2000      	movs	r0, #0
 801114e:	e7f7      	b.n	8011140 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011150:	429a      	cmp	r2, r3
 8011152:	bf2c      	ite	cs
 8011154:	2200      	movcs	r2, #0
 8011156:	2201      	movcc	r2, #1
 8011158:	4299      	cmp	r1, r3
 801115a:	bf38      	it	cc
 801115c:	2200      	movcc	r2, #0
 801115e:	b10a      	cbz	r2, 8011164 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 8011160:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8011162:	e7ed      	b.n	8011140 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011164:	1d01      	adds	r1, r0, #4
 8011166:	4b04      	ldr	r3, [pc, #16]	; (8011178 <prvInsertTimerInActiveList+0x4c>)
 8011168:	6818      	ldr	r0, [r3, #0]
 801116a:	f7fe facc 	bl	800f706 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801116e:	2000      	movs	r0, #0
 8011170:	e7e6      	b.n	8011140 <prvInsertTimerInActiveList+0x14>
 8011172:	bf00      	nop
 8011174:	2400f268 	.word	0x2400f268
 8011178:	2400f264 	.word	0x2400f264

0801117c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801117c:	b530      	push	{r4, r5, lr}
 801117e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011180:	f7fe fb58 	bl	800f834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011184:	4b11      	ldr	r3, [pc, #68]	; (80111cc <prvCheckForValidListAndQueue+0x50>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	b11b      	cbz	r3, 8011192 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801118a:	f7fe fb75 	bl	800f878 <vPortExitCritical>
}
 801118e:	b003      	add	sp, #12
 8011190:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8011192:	4d0f      	ldr	r5, [pc, #60]	; (80111d0 <prvCheckForValidListAndQueue+0x54>)
 8011194:	4628      	mov	r0, r5
 8011196:	f7fe fa9d 	bl	800f6d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801119a:	4c0e      	ldr	r4, [pc, #56]	; (80111d4 <prvCheckForValidListAndQueue+0x58>)
 801119c:	4620      	mov	r0, r4
 801119e:	f7fe fa99 	bl	800f6d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80111a2:	4b0d      	ldr	r3, [pc, #52]	; (80111d8 <prvCheckForValidListAndQueue+0x5c>)
 80111a4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80111a6:	4b0d      	ldr	r3, [pc, #52]	; (80111dc <prvCheckForValidListAndQueue+0x60>)
 80111a8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80111aa:	2300      	movs	r3, #0
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	4b0c      	ldr	r3, [pc, #48]	; (80111e0 <prvCheckForValidListAndQueue+0x64>)
 80111b0:	4a0c      	ldr	r2, [pc, #48]	; (80111e4 <prvCheckForValidListAndQueue+0x68>)
 80111b2:	2110      	movs	r1, #16
 80111b4:	200a      	movs	r0, #10
 80111b6:	f7fe fd8c 	bl	800fcd2 <xQueueGenericCreateStatic>
 80111ba:	4b04      	ldr	r3, [pc, #16]	; (80111cc <prvCheckForValidListAndQueue+0x50>)
 80111bc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80111be:	2800      	cmp	r0, #0
 80111c0:	d0e3      	beq.n	801118a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80111c2:	4909      	ldr	r1, [pc, #36]	; (80111e8 <prvCheckForValidListAndQueue+0x6c>)
 80111c4:	f7ff f998 	bl	80104f8 <vQueueAddToRegistry>
 80111c8:	e7df      	b.n	801118a <prvCheckForValidListAndQueue+0xe>
 80111ca:	bf00      	nop
 80111cc:	2400f388 	.word	0x2400f388
 80111d0:	2400f30c 	.word	0x2400f30c
 80111d4:	2400f320 	.word	0x2400f320
 80111d8:	2400f264 	.word	0x2400f264
 80111dc:	2400f268 	.word	0x2400f268
 80111e0:	2400f338 	.word	0x2400f338
 80111e4:	2400f26c 	.word	0x2400f26c
 80111e8:	080262b8 	.word	0x080262b8

080111ec <xTimerCreateTimerTask>:
{
 80111ec:	b510      	push	{r4, lr}
 80111ee:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80111f0:	f7ff ffc4 	bl	801117c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80111f4:	4b12      	ldr	r3, [pc, #72]	; (8011240 <xTimerCreateTimerTask+0x54>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	b1cb      	cbz	r3, 801122e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80111fa:	2400      	movs	r4, #0
 80111fc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80111fe:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011200:	aa07      	add	r2, sp, #28
 8011202:	a906      	add	r1, sp, #24
 8011204:	a805      	add	r0, sp, #20
 8011206:	f7fe f939 	bl	800f47c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801120a:	9b05      	ldr	r3, [sp, #20]
 801120c:	9302      	str	r3, [sp, #8]
 801120e:	9b06      	ldr	r3, [sp, #24]
 8011210:	9301      	str	r3, [sp, #4]
 8011212:	2302      	movs	r3, #2
 8011214:	9300      	str	r3, [sp, #0]
 8011216:	4623      	mov	r3, r4
 8011218:	9a07      	ldr	r2, [sp, #28]
 801121a:	490a      	ldr	r1, [pc, #40]	; (8011244 <xTimerCreateTimerTask+0x58>)
 801121c:	480a      	ldr	r0, [pc, #40]	; (8011248 <xTimerCreateTimerTask+0x5c>)
 801121e:	f7ff fb79 	bl	8010914 <xTaskCreateStatic>
 8011222:	4b0a      	ldr	r3, [pc, #40]	; (801124c <xTimerCreateTimerTask+0x60>)
 8011224:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8011226:	b110      	cbz	r0, 801122e <xTimerCreateTimerTask+0x42>
}
 8011228:	2001      	movs	r0, #1
 801122a:	b008      	add	sp, #32
 801122c:	bd10      	pop	{r4, pc}
 801122e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011232:	f383 8811 	msr	BASEPRI, r3
 8011236:	f3bf 8f6f 	isb	sy
 801123a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801123e:	e7fe      	b.n	801123e <xTimerCreateTimerTask+0x52>
 8011240:	2400f388 	.word	0x2400f388
 8011244:	080262c0 	.word	0x080262c0
 8011248:	08011555 	.word	0x08011555
 801124c:	2400f38c 	.word	0x2400f38c

08011250 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8011250:	b1b8      	cbz	r0, 8011282 <xTimerGenericCommand+0x32>
 8011252:	469c      	mov	ip, r3
 8011254:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8011256:	4818      	ldr	r0, [pc, #96]	; (80112b8 <xTimerGenericCommand+0x68>)
 8011258:	6800      	ldr	r0, [r0, #0]
 801125a:	b358      	cbz	r0, 80112b4 <xTimerGenericCommand+0x64>
{
 801125c:	b500      	push	{lr}
 801125e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8011260:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011262:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011264:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011266:	2905      	cmp	r1, #5
 8011268:	dc1c      	bgt.n	80112a4 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801126a:	f7ff fe4d 	bl	8010f08 <xTaskGetSchedulerState>
 801126e:	2802      	cmp	r0, #2
 8011270:	d010      	beq.n	8011294 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011272:	2300      	movs	r3, #0
 8011274:	461a      	mov	r2, r3
 8011276:	4669      	mov	r1, sp
 8011278:	480f      	ldr	r0, [pc, #60]	; (80112b8 <xTimerGenericCommand+0x68>)
 801127a:	6800      	ldr	r0, [r0, #0]
 801127c:	f7fe fde1 	bl	800fe42 <xQueueGenericSend>
 8011280:	e015      	b.n	80112ae <xTimerGenericCommand+0x5e>
 8011282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011286:	f383 8811 	msr	BASEPRI, r3
 801128a:	f3bf 8f6f 	isb	sy
 801128e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8011292:	e7fe      	b.n	8011292 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011294:	2300      	movs	r3, #0
 8011296:	9a06      	ldr	r2, [sp, #24]
 8011298:	4669      	mov	r1, sp
 801129a:	4807      	ldr	r0, [pc, #28]	; (80112b8 <xTimerGenericCommand+0x68>)
 801129c:	6800      	ldr	r0, [r0, #0]
 801129e:	f7fe fdd0 	bl	800fe42 <xQueueGenericSend>
 80112a2:	e004      	b.n	80112ae <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80112a4:	2300      	movs	r3, #0
 80112a6:	4662      	mov	r2, ip
 80112a8:	4669      	mov	r1, sp
 80112aa:	f7fe fe8e 	bl	800ffca <xQueueGenericSendFromISR>
}
 80112ae:	b005      	add	sp, #20
 80112b0:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 80112b4:	2000      	movs	r0, #0
}
 80112b6:	4770      	bx	lr
 80112b8:	2400f388 	.word	0x2400f388

080112bc <prvSwitchTimerLists>:
{
 80112bc:	b570      	push	{r4, r5, r6, lr}
 80112be:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80112c0:	4b1b      	ldr	r3, [pc, #108]	; (8011330 <prvSwitchTimerLists+0x74>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	b362      	cbz	r2, 8011322 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80112c8:	68db      	ldr	r3, [r3, #12]
 80112ca:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112cc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80112ce:	1d25      	adds	r5, r4, #4
 80112d0:	4628      	mov	r0, r5
 80112d2:	f7fe fa31 	bl	800f738 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80112d6:	6a23      	ldr	r3, [r4, #32]
 80112d8:	4620      	mov	r0, r4
 80112da:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80112dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80112e0:	f013 0f04 	tst.w	r3, #4
 80112e4:	d0ec      	beq.n	80112c0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80112e6:	69a3      	ldr	r3, [r4, #24]
 80112e8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80112ea:	429e      	cmp	r6, r3
 80112ec:	d207      	bcs.n	80112fe <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80112ee:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80112f0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80112f2:	4629      	mov	r1, r5
 80112f4:	4b0e      	ldr	r3, [pc, #56]	; (8011330 <prvSwitchTimerLists+0x74>)
 80112f6:	6818      	ldr	r0, [r3, #0]
 80112f8:	f7fe fa05 	bl	800f706 <vListInsert>
 80112fc:	e7e0      	b.n	80112c0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80112fe:	2100      	movs	r1, #0
 8011300:	9100      	str	r1, [sp, #0]
 8011302:	460b      	mov	r3, r1
 8011304:	4632      	mov	r2, r6
 8011306:	4620      	mov	r0, r4
 8011308:	f7ff ffa2 	bl	8011250 <xTimerGenericCommand>
				configASSERT( xResult );
 801130c:	2800      	cmp	r0, #0
 801130e:	d1d7      	bne.n	80112c0 <prvSwitchTimerLists+0x4>
 8011310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011314:	f383 8811 	msr	BASEPRI, r3
 8011318:	f3bf 8f6f 	isb	sy
 801131c:	f3bf 8f4f 	dsb	sy
 8011320:	e7fe      	b.n	8011320 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8011322:	4a04      	ldr	r2, [pc, #16]	; (8011334 <prvSwitchTimerLists+0x78>)
 8011324:	6810      	ldr	r0, [r2, #0]
 8011326:	4902      	ldr	r1, [pc, #8]	; (8011330 <prvSwitchTimerLists+0x74>)
 8011328:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801132a:	6013      	str	r3, [r2, #0]
}
 801132c:	b002      	add	sp, #8
 801132e:	bd70      	pop	{r4, r5, r6, pc}
 8011330:	2400f264 	.word	0x2400f264
 8011334:	2400f268 	.word	0x2400f268

08011338 <prvSampleTimeNow>:
{
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 801133c:	f7ff fbb8 	bl	8010ab0 <xTaskGetTickCount>
 8011340:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8011342:	4b07      	ldr	r3, [pc, #28]	; (8011360 <prvSampleTimeNow+0x28>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4283      	cmp	r3, r0
 8011348:	d805      	bhi.n	8011356 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 801134a:	2300      	movs	r3, #0
 801134c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801134e:	4b04      	ldr	r3, [pc, #16]	; (8011360 <prvSampleTimeNow+0x28>)
 8011350:	601c      	str	r4, [r3, #0]
}
 8011352:	4620      	mov	r0, r4
 8011354:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8011356:	f7ff ffb1 	bl	80112bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801135a:	2301      	movs	r3, #1
 801135c:	602b      	str	r3, [r5, #0]
 801135e:	e7f6      	b.n	801134e <prvSampleTimeNow+0x16>
 8011360:	2400f334 	.word	0x2400f334

08011364 <prvProcessExpiredTimer>:
{
 8011364:	b570      	push	{r4, r5, r6, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	4606      	mov	r6, r0
 801136a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801136c:	4917      	ldr	r1, [pc, #92]	; (80113cc <prvProcessExpiredTimer+0x68>)
 801136e:	6809      	ldr	r1, [r1, #0]
 8011370:	68c9      	ldr	r1, [r1, #12]
 8011372:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011374:	1d20      	adds	r0, r4, #4
 8011376:	f7fe f9df 	bl	800f738 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801137a:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 801137e:	f01c 0f04 	tst.w	ip, #4
 8011382:	d108      	bne.n	8011396 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011384:	f02c 0c01 	bic.w	ip, ip, #1
 8011388:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801138c:	6a23      	ldr	r3, [r4, #32]
 801138e:	4620      	mov	r0, r4
 8011390:	4798      	blx	r3
}
 8011392:	b002      	add	sp, #8
 8011394:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011396:	69a1      	ldr	r1, [r4, #24]
 8011398:	4633      	mov	r3, r6
 801139a:	462a      	mov	r2, r5
 801139c:	4431      	add	r1, r6
 801139e:	4620      	mov	r0, r4
 80113a0:	f7ff fec4 	bl	801112c <prvInsertTimerInActiveList>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d0f1      	beq.n	801138c <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80113a8:	2100      	movs	r1, #0
 80113aa:	9100      	str	r1, [sp, #0]
 80113ac:	460b      	mov	r3, r1
 80113ae:	4632      	mov	r2, r6
 80113b0:	4620      	mov	r0, r4
 80113b2:	f7ff ff4d 	bl	8011250 <xTimerGenericCommand>
			configASSERT( xResult );
 80113b6:	2800      	cmp	r0, #0
 80113b8:	d1e8      	bne.n	801138c <prvProcessExpiredTimer+0x28>
 80113ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113be:	f383 8811 	msr	BASEPRI, r3
 80113c2:	f3bf 8f6f 	isb	sy
 80113c6:	f3bf 8f4f 	dsb	sy
 80113ca:	e7fe      	b.n	80113ca <prvProcessExpiredTimer+0x66>
 80113cc:	2400f264 	.word	0x2400f264

080113d0 <prvProcessTimerOrBlockTask>:
{
 80113d0:	b570      	push	{r4, r5, r6, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	4606      	mov	r6, r0
 80113d6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80113d8:	f7ff fb62 	bl	8010aa0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80113dc:	a801      	add	r0, sp, #4
 80113de:	f7ff ffab 	bl	8011338 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80113e2:	9b01      	ldr	r3, [sp, #4]
 80113e4:	bb3b      	cbnz	r3, 8011436 <prvProcessTimerOrBlockTask+0x66>
 80113e6:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80113e8:	42b0      	cmp	r0, r6
 80113ea:	bf28      	it	cs
 80113ec:	2c00      	cmpcs	r4, #0
 80113ee:	d019      	beq.n	8011424 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 80113f0:	b124      	cbz	r4, 80113fc <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80113f2:	4a13      	ldr	r2, [pc, #76]	; (8011440 <prvProcessTimerOrBlockTask+0x70>)
 80113f4:	6812      	ldr	r2, [r2, #0]
 80113f6:	6812      	ldr	r2, [r2, #0]
 80113f8:	b9da      	cbnz	r2, 8011432 <prvProcessTimerOrBlockTask+0x62>
 80113fa:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80113fc:	4622      	mov	r2, r4
 80113fe:	1b71      	subs	r1, r6, r5
 8011400:	4b10      	ldr	r3, [pc, #64]	; (8011444 <prvProcessTimerOrBlockTask+0x74>)
 8011402:	6818      	ldr	r0, [r3, #0]
 8011404:	f7ff f8b8 	bl	8010578 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011408:	f7ff fbe4 	bl	8010bd4 <xTaskResumeAll>
 801140c:	b9a8      	cbnz	r0, 801143a <prvProcessTimerOrBlockTask+0x6a>
					portYIELD_WITHIN_API();
 801140e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011416:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	f3bf 8f6f 	isb	sy
 8011422:	e00a      	b.n	801143a <prvProcessTimerOrBlockTask+0x6a>
				( void ) xTaskResumeAll();
 8011424:	f7ff fbd6 	bl	8010bd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011428:	4629      	mov	r1, r5
 801142a:	4630      	mov	r0, r6
 801142c:	f7ff ff9a 	bl	8011364 <prvProcessExpiredTimer>
 8011430:	e003      	b.n	801143a <prvProcessTimerOrBlockTask+0x6a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011432:	461c      	mov	r4, r3
 8011434:	e7e2      	b.n	80113fc <prvProcessTimerOrBlockTask+0x2c>
			( void ) xTaskResumeAll();
 8011436:	f7ff fbcd 	bl	8010bd4 <xTaskResumeAll>
}
 801143a:	b002      	add	sp, #8
 801143c:	bd70      	pop	{r4, r5, r6, pc}
 801143e:	bf00      	nop
 8011440:	2400f268 	.word	0x2400f268
 8011444:	2400f388 	.word	0x2400f388

08011448 <prvProcessReceivedCommands>:
{
 8011448:	b510      	push	{r4, lr}
 801144a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801144c:	e002      	b.n	8011454 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801144e:	9b04      	ldr	r3, [sp, #16]
 8011450:	2b00      	cmp	r3, #0
 8011452:	da0f      	bge.n	8011474 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011454:	2200      	movs	r2, #0
 8011456:	a904      	add	r1, sp, #16
 8011458:	4b3d      	ldr	r3, [pc, #244]	; (8011550 <prvProcessReceivedCommands+0x108>)
 801145a:	6818      	ldr	r0, [r3, #0]
 801145c:	f7fe fe75 	bl	801014a <xQueueReceive>
 8011460:	2800      	cmp	r0, #0
 8011462:	d073      	beq.n	801154c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011464:	9b04      	ldr	r3, [sp, #16]
 8011466:	2b00      	cmp	r3, #0
 8011468:	daf1      	bge.n	801144e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801146a:	9907      	ldr	r1, [sp, #28]
 801146c:	9806      	ldr	r0, [sp, #24]
 801146e:	9b05      	ldr	r3, [sp, #20]
 8011470:	4798      	blx	r3
 8011472:	e7ec      	b.n	801144e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011474:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011476:	6963      	ldr	r3, [r4, #20]
 8011478:	b113      	cbz	r3, 8011480 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801147a:	1d20      	adds	r0, r4, #4
 801147c:	f7fe f95c 	bl	800f738 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011480:	a803      	add	r0, sp, #12
 8011482:	f7ff ff59 	bl	8011338 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8011486:	9b04      	ldr	r3, [sp, #16]
 8011488:	2b09      	cmp	r3, #9
 801148a:	d8e3      	bhi.n	8011454 <prvProcessReceivedCommands+0xc>
 801148c:	e8df f003 	tbb	[pc, r3]
 8011490:	30050505 	.word	0x30050505
 8011494:	05055037 	.word	0x05055037
 8011498:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801149a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801149e:	f043 0301 	orr.w	r3, r3, #1
 80114a2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80114a6:	9b05      	ldr	r3, [sp, #20]
 80114a8:	69a1      	ldr	r1, [r4, #24]
 80114aa:	4602      	mov	r2, r0
 80114ac:	4419      	add	r1, r3
 80114ae:	4620      	mov	r0, r4
 80114b0:	f7ff fe3c 	bl	801112c <prvInsertTimerInActiveList>
 80114b4:	2800      	cmp	r0, #0
 80114b6:	d0cd      	beq.n	8011454 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80114b8:	6a23      	ldr	r3, [r4, #32]
 80114ba:	4620      	mov	r0, r4
 80114bc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80114be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80114c2:	f013 0f04 	tst.w	r3, #4
 80114c6:	d0c5      	beq.n	8011454 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80114c8:	69a2      	ldr	r2, [r4, #24]
 80114ca:	2100      	movs	r1, #0
 80114cc:	9100      	str	r1, [sp, #0]
 80114ce:	460b      	mov	r3, r1
 80114d0:	9805      	ldr	r0, [sp, #20]
 80114d2:	4402      	add	r2, r0
 80114d4:	4620      	mov	r0, r4
 80114d6:	f7ff febb 	bl	8011250 <xTimerGenericCommand>
							configASSERT( xResult );
 80114da:	2800      	cmp	r0, #0
 80114dc:	d1ba      	bne.n	8011454 <prvProcessReceivedCommands+0xc>
 80114de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e2:	f383 8811 	msr	BASEPRI, r3
 80114e6:	f3bf 8f6f 	isb	sy
 80114ea:	f3bf 8f4f 	dsb	sy
 80114ee:	e7fe      	b.n	80114ee <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80114f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80114f4:	f023 0301 	bic.w	r3, r3, #1
 80114f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 80114fc:	e7aa      	b.n	8011454 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80114fe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011502:	f043 0301 	orr.w	r3, r3, #1
 8011506:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801150a:	9905      	ldr	r1, [sp, #20]
 801150c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801150e:	b131      	cbz	r1, 801151e <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011510:	4603      	mov	r3, r0
 8011512:	4602      	mov	r2, r0
 8011514:	4401      	add	r1, r0
 8011516:	4620      	mov	r0, r4
 8011518:	f7ff fe08 	bl	801112c <prvInsertTimerInActiveList>
					break;
 801151c:	e79a      	b.n	8011454 <prvProcessReceivedCommands+0xc>
 801151e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011522:	f383 8811 	msr	BASEPRI, r3
 8011526:	f3bf 8f6f 	isb	sy
 801152a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801152e:	e7fe      	b.n	801152e <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011530:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011534:	f013 0f02 	tst.w	r3, #2
 8011538:	d004      	beq.n	8011544 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801153a:	f023 0301 	bic.w	r3, r3, #1
 801153e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8011542:	e787      	b.n	8011454 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8011544:	4620      	mov	r0, r4
 8011546:	f7fe f887 	bl	800f658 <vPortFree>
 801154a:	e783      	b.n	8011454 <prvProcessReceivedCommands+0xc>
}
 801154c:	b008      	add	sp, #32
 801154e:	bd10      	pop	{r4, pc}
 8011550:	2400f388 	.word	0x2400f388

08011554 <prvTimerTask>:
{
 8011554:	b500      	push	{lr}
 8011556:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011558:	a801      	add	r0, sp, #4
 801155a:	f7ff fdd7 	bl	801110c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801155e:	9901      	ldr	r1, [sp, #4]
 8011560:	f7ff ff36 	bl	80113d0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8011564:	f7ff ff70 	bl	8011448 <prvProcessReceivedCommands>
	for( ;; )
 8011568:	e7f6      	b.n	8011558 <prvTimerTask+0x4>

0801156a <net_aton>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
int32_t net_aton(const char_t *ptr, net_ip_addr_t *addr)
{
 801156a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801156c:	b085      	sub	sp, #20
 801156e:	4684      	mov	ip, r0
 8011570:	460e      	mov	r6, r1
  uint32_t parts[4];
  uint32_t *pp = parts;
  int32_t ret = 1;
  int32_t done;

  c0 = *cp;
 8011572:	7803      	ldrb	r3, [r0, #0]
  done = 0;
 8011574:	2000      	movs	r0, #0
  int32_t ret = 1;
 8011576:	2501      	movs	r5, #1
  uint32_t *pp = parts;
 8011578:	466c      	mov	r4, sp
  uint32_t val = 0;
 801157a:	4601      	mov	r1, r0
 801157c:	e03e      	b.n	80115fc <net_aton+0x92>
         *  a.b.c   (with c treated as 16 bits)
         *  a.b (with b treated as 24 bits)
         */
        if (pp >= (parts + 3))
        {
          ret = 0;
 801157e:	4605      	mov	r5, r0
          done = 1;
 8011580:	2001      	movs	r0, #1
 8011582:	e03b      	b.n	80115fc <net_aton+0x92>
      ret = 0;
 8011584:	4605      	mov	r5, r0
      done = 1;
 8011586:	2001      	movs	r0, #1
 8011588:	e038      	b.n	80115fc <net_aton+0x92>
        ++cp;
 801158a:	f10c 0201 	add.w	r2, ip, #1
        c0 = (char_t) * cp;
 801158e:	f89c 3001 	ldrb.w	r3, [ip, #1]
        if ((c0 == (char_t) 'x') || (c0 == (char_t) 'X'))
 8011592:	2b58      	cmp	r3, #88	; 0x58
 8011594:	bf18      	it	ne
 8011596:	2b78      	cmpne	r3, #120	; 0x78
 8011598:	d106      	bne.n	80115a8 <net_aton+0x3e>
          c0 = (char_t) * cp;
 801159a:	f89c 3002 	ldrb.w	r3, [ip, #2]
          ++cp;
 801159e:	f10c 0c02 	add.w	ip, ip, #2
          base = 16;
 80115a2:	f04f 0e10 	mov.w	lr, #16
 80115a6:	e033      	b.n	8011610 <net_aton+0xa6>
        ++cp;
 80115a8:	4694      	mov	ip, r2
          base = 8;
 80115aa:	f04f 0e08 	mov.w	lr, #8
 80115ae:	e02f      	b.n	8011610 <net_aton+0xa6>
          val = (val * base) + (uint32_t)c0 - (uint32_t) '0';
 80115b0:	fb0e 3101 	mla	r1, lr, r1, r3
 80115b4:	3930      	subs	r1, #48	; 0x30
          c0 = (char_t) * cp;
 80115b6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
        if (NET_ISDIGIT(c0))
 80115ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80115be:	b2d2      	uxtb	r2, r2
 80115c0:	2a09      	cmp	r2, #9
 80115c2:	d9f5      	bls.n	80115b0 <net_aton+0x46>
        else if ((base == 16U) && NET_ISXDIGIT(c0))
 80115c4:	f1be 0f10 	cmp.w	lr, #16
 80115c8:	d115      	bne.n	80115f6 <net_aton+0x8c>
 80115ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80115ce:	b2d2      	uxtb	r2, r2
 80115d0:	2a05      	cmp	r2, #5
 80115d2:	d904      	bls.n	80115de <net_aton+0x74>
 80115d4:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 80115d8:	b2ff      	uxtb	r7, r7
 80115da:	2f05      	cmp	r7, #5
 80115dc:	d80b      	bhi.n	80115f6 <net_aton+0x8c>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 80115de:	0109      	lsls	r1, r1, #4
 80115e0:	2a19      	cmp	r2, #25
 80115e2:	d806      	bhi.n	80115f2 <net_aton+0x88>
 80115e4:	2261      	movs	r2, #97	; 0x61
 80115e6:	1a9b      	subs	r3, r3, r2
 80115e8:	330a      	adds	r3, #10
 80115ea:	4319      	orrs	r1, r3
          c0 = (char_t) * cp;
 80115ec:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80115f0:	e7e3      	b.n	80115ba <net_aton+0x50>
          val = (val << 4) | ((uint32_t)c0 + 10U - (uint32_t)(NET_ISLOWER(c0) ? 'a' : 'A'));
 80115f2:	2241      	movs	r2, #65	; 0x41
 80115f4:	e7f7      	b.n	80115e6 <net_aton+0x7c>
      if (c0 == '.')
 80115f6:	2b2e      	cmp	r3, #46	; 0x2e
 80115f8:	d00c      	beq.n	8011614 <net_aton+0xaa>
          c0 = (char_t) * cp;
        }
      }
      else
      {
        done = 1;
 80115fa:	2001      	movs	r0, #1
    if (done == 1)
 80115fc:	b9a0      	cbnz	r0, 8011628 <net_aton+0xbe>
    if (!NET_ISDIGIT(c0))
 80115fe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011602:	b2d2      	uxtb	r2, r2
 8011604:	2a09      	cmp	r2, #9
 8011606:	d8bd      	bhi.n	8011584 <net_aton+0x1a>
      if (c0 == '0')
 8011608:	2b30      	cmp	r3, #48	; 0x30
 801160a:	d0be      	beq.n	801158a <net_aton+0x20>
      base = 10;
 801160c:	f04f 0e0a 	mov.w	lr, #10
          base = 8;
 8011610:	2100      	movs	r1, #0
 8011612:	e7d2      	b.n	80115ba <net_aton+0x50>
        if (pp >= (parts + 3))
 8011614:	aa03      	add	r2, sp, #12
 8011616:	4294      	cmp	r4, r2
 8011618:	d2b1      	bcs.n	801157e <net_aton+0x14>
          *pp = val;
 801161a:	f844 1b04 	str.w	r1, [r4], #4
          c0 = (char_t) * cp;
 801161e:	f89c 3001 	ldrb.w	r3, [ip, #1]
          ++cp;
 8011622:	f10c 0c01 	add.w	ip, ip, #1
 8011626:	e7e9      	b.n	80115fc <net_aton+0x92>
    }
  }
  /*
   * Check for trailing characters.
   */
  if ((c0 != (char_t)'\0') && (NET_ISSPACE((c0)) == false))
 8011628:	b19b      	cbz	r3, 8011652 <net_aton+0xe8>
 801162a:	2b0c      	cmp	r3, #12
 801162c:	bf18      	it	ne
 801162e:	2b20      	cmpne	r3, #32
 8011630:	d00f      	beq.n	8011652 <net_aton+0xe8>
 8011632:	2b0d      	cmp	r3, #13
 8011634:	bf14      	ite	ne
 8011636:	2200      	movne	r2, #0
 8011638:	2201      	moveq	r2, #1
 801163a:	2b0a      	cmp	r3, #10
 801163c:	d009      	beq.n	8011652 <net_aton+0xe8>
 801163e:	b942      	cbnz	r2, 8011652 <net_aton+0xe8>
 8011640:	2b0b      	cmp	r3, #11
 8011642:	bf14      	ite	ne
 8011644:	2200      	movne	r2, #0
 8011646:	2201      	moveq	r2, #1
 8011648:	2b09      	cmp	r3, #9
 801164a:	d002      	beq.n	8011652 <net_aton+0xe8>
 801164c:	b90a      	cbnz	r2, 8011652 <net_aton+0xe8>
  {
    ret = 0;
 801164e:	2500      	movs	r5, #0
 8011650:	e011      	b.n	8011676 <net_aton+0x10c>
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
  {
    switch (pp - parts + 1)
 8011652:	466b      	mov	r3, sp
 8011654:	1ae3      	subs	r3, r4, r3
 8011656:	109b      	asrs	r3, r3, #2
 8011658:	2b03      	cmp	r3, #3
 801165a:	d834      	bhi.n	80116c6 <net_aton+0x15c>
 801165c:	e8df f003 	tbb	[pc, r3]
 8011660:	180e0209 	.word	0x180e0209

      case 1:             /* a -- 32 bits */
        break;

      case 2:             /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
 8011664:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8011668:	d300      	bcc.n	801166c <net_aton+0x102>
        {
          ret = 0;
 801166a:	2500      	movs	r5, #0
        }
        val |= parts[0] << 24;
 801166c:	9b00      	ldr	r3, [sp, #0]
 801166e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        ret = 0;
        break;
    }
  }

  if (ret == 1)
 8011672:	2d01      	cmp	r5, #1
 8011674:	d018      	beq.n	80116a8 <net_aton+0x13e>
    {
      addr->addr = NET_HTONL(val);
    }
  }
  return ret;
}
 8011676:	4628      	mov	r0, r5
 8011678:	b005      	add	sp, #20
 801167a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (val > 0xffffU)
 801167c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8011680:	d223      	bcs.n	80116ca <net_aton+0x160>
        val |= (parts[0] << 24) | (parts[1] << 16);
 8011682:	9b01      	ldr	r3, [sp, #4]
 8011684:	041b      	lsls	r3, r3, #16
 8011686:	9a00      	ldr	r2, [sp, #0]
 8011688:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801168c:	4319      	orrs	r1, r3
        break;
 801168e:	e7f0      	b.n	8011672 <net_aton+0x108>
        if (val > 0xffU)
 8011690:	29ff      	cmp	r1, #255	; 0xff
 8011692:	d81c      	bhi.n	80116ce <net_aton+0x164>
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8011694:	9b01      	ldr	r3, [sp, #4]
 8011696:	041b      	lsls	r3, r3, #16
 8011698:	9a00      	ldr	r2, [sp, #0]
 801169a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801169e:	9a02      	ldr	r2, [sp, #8]
 80116a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80116a4:	4319      	orrs	r1, r3
        break;
 80116a6:	e7e4      	b.n	8011672 <net_aton+0x108>
    if (addr != NULL)
 80116a8:	2e00      	cmp	r6, #0
 80116aa:	d0e4      	beq.n	8011676 <net_aton+0x10c>
      addr->addr = NET_HTONL(val);
 80116ac:	0a0b      	lsrs	r3, r1, #8
 80116ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80116b2:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80116b6:	020a      	lsls	r2, r1, #8
 80116b8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80116bc:	4313      	orrs	r3, r2
 80116be:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 80116c2:	6031      	str	r1, [r6, #0]
 80116c4:	e7d7      	b.n	8011676 <net_aton+0x10c>
    switch (pp - parts + 1)
 80116c6:	2500      	movs	r5, #0
 80116c8:	e7d5      	b.n	8011676 <net_aton+0x10c>
          ret = 0;
 80116ca:	2500      	movs	r5, #0
 80116cc:	e7d3      	b.n	8011676 <net_aton+0x10c>
          ret = 0;
 80116ce:	2500      	movs	r5, #0
  return ret;
 80116d0:	e7d1      	b.n	8011676 <net_aton+0x10c>

080116d2 <net_get_ip_addr>:
  /*cstat -MISRAC2012-Rule-11.3 Cast */
  addrv = ((net_sockaddr_in_t *)addr)->sin_addr.s_addr;
  /*cstat +MISRAC2012-Rule-11.3 Cast */
  NET_COPY(ipaddr, addrv);
  return ipaddr;
}
 80116d2:	6840      	ldr	r0, [r0, #4]
 80116d4:	4770      	bx	lr
	...

080116d8 <net_wifi_string_to_security>:
/**
  * @brief  Convert a string to a security enum value
  * @param  sec is a pointer to a string
  */
uint32_t net_wifi_string_to_security(char_t *sec)
{
 80116d8:	b538      	push	{r3, r4, r5, lr}
 80116da:	4604      	mov	r4, r0
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
  if (strcmp(sec, "Open") == 0)
 80116dc:	493d      	ldr	r1, [pc, #244]	; (80117d4 <net_wifi_string_to_security+0xfc>)
 80116de:	f7ee fe07 	bl	80002f0 <strcmp>
 80116e2:	2800      	cmp	r0, #0
 80116e4:	d071      	beq.n	80117ca <net_wifi_string_to_security+0xf2>
  uint32_t       ret = NET_WIFI_SM_UNKNOWN;
 80116e6:	f04f 35ff 	mov.w	r5, #4294967295
  {
    ret = NET_WIFI_SM_OPEN;
  }
  if (strcmp(sec, "WEP-shared") == 0)
 80116ea:	493b      	ldr	r1, [pc, #236]	; (80117d8 <net_wifi_string_to_security+0x100>)
 80116ec:	4620      	mov	r0, r4
 80116ee:	f7ee fdff 	bl	80002f0 <strcmp>
 80116f2:	b908      	cbnz	r0, 80116f8 <net_wifi_string_to_security+0x20>
  {
    ret = NET_WIFI_SM_WEP_SHARED;
 80116f4:	f248 0501 	movw	r5, #32769	; 0x8001
  }
  if (strcmp(sec, "WPA-TKIP") == 0)
 80116f8:	4938      	ldr	r1, [pc, #224]	; (80117dc <net_wifi_string_to_security+0x104>)
 80116fa:	4620      	mov	r0, r4
 80116fc:	f7ee fdf8 	bl	80002f0 <strcmp>
 8011700:	b900      	cbnz	r0, 8011704 <net_wifi_string_to_security+0x2c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_PSK;
 8011702:	4d37      	ldr	r5, [pc, #220]	; (80117e0 <net_wifi_string_to_security+0x108>)
  }
  if (strcmp(sec, "WPA-Mixed") == 0)
 8011704:	4937      	ldr	r1, [pc, #220]	; (80117e4 <net_wifi_string_to_security+0x10c>)
 8011706:	4620      	mov	r0, r4
 8011708:	f7ee fdf2 	bl	80002f0 <strcmp>
 801170c:	b900      	cbnz	r0, 8011710 <net_wifi_string_to_security+0x38>
  {
    ret = NET_WIFI_SM_WPA_MIXED_PSK;
 801170e:	4d36      	ldr	r5, [pc, #216]	; (80117e8 <net_wifi_string_to_security+0x110>)
  }
  if (strcmp(sec, "WPA2-AES") == 0)
 8011710:	4936      	ldr	r1, [pc, #216]	; (80117ec <net_wifi_string_to_security+0x114>)
 8011712:	4620      	mov	r0, r4
 8011714:	f7ee fdec 	bl	80002f0 <strcmp>
 8011718:	b900      	cbnz	r0, 801171c <net_wifi_string_to_security+0x44>
  {
    ret = NET_WIFI_SM_WPA2_AES_PSK;
 801171a:	4d35      	ldr	r5, [pc, #212]	; (80117f0 <net_wifi_string_to_security+0x118>)
  }
  if (strcmp(sec, "WPA2-TKIP") == 0)
 801171c:	4935      	ldr	r1, [pc, #212]	; (80117f4 <net_wifi_string_to_security+0x11c>)
 801171e:	4620      	mov	r0, r4
 8011720:	f7ee fde6 	bl	80002f0 <strcmp>
 8011724:	b900      	cbnz	r0, 8011728 <net_wifi_string_to_security+0x50>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 8011726:	4d34      	ldr	r5, [pc, #208]	; (80117f8 <net_wifi_string_to_security+0x120>)
  }
  if (strcmp(sec, "WPA2-Mixed") == 0)
 8011728:	4934      	ldr	r1, [pc, #208]	; (80117fc <net_wifi_string_to_security+0x124>)
 801172a:	4620      	mov	r0, r4
 801172c:	f7ee fde0 	bl	80002f0 <strcmp>
 8011730:	b900      	cbnz	r0, 8011734 <net_wifi_string_to_security+0x5c>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 8011732:	4d33      	ldr	r5, [pc, #204]	; (8011800 <net_wifi_string_to_security+0x128>)
  }
  if (strcmp(sec, "WPA2-DBT") == 0)
 8011734:	4933      	ldr	r1, [pc, #204]	; (8011804 <net_wifi_string_to_security+0x12c>)
 8011736:	4620      	mov	r0, r4
 8011738:	f7ee fdda 	bl	80002f0 <strcmp>
 801173c:	b900      	cbnz	r0, 8011740 <net_wifi_string_to_security+0x68>
  {
    ret = NET_WIFI_SM_WPA2_FBT_PSK;
 801173e:	4d32      	ldr	r5, [pc, #200]	; (8011808 <net_wifi_string_to_security+0x130>)
  }
  if (strcmp(sec, "WPA3") == 0)
 8011740:	4932      	ldr	r1, [pc, #200]	; (801180c <net_wifi_string_to_security+0x134>)
 8011742:	4620      	mov	r0, r4
 8011744:	f7ee fdd4 	bl	80002f0 <strcmp>
 8011748:	b900      	cbnz	r0, 801174c <net_wifi_string_to_security+0x74>
  {
    ret = NET_WIFI_SM_WPA3_SAE;
 801174a:	4d31      	ldr	r5, [pc, #196]	; (8011810 <net_wifi_string_to_security+0x138>)
  }
  if (strcmp(sec, "WPA3-WPA2") == 0)
 801174c:	4931      	ldr	r1, [pc, #196]	; (8011814 <net_wifi_string_to_security+0x13c>)
 801174e:	4620      	mov	r0, r4
 8011750:	f7ee fdce 	bl	80002f0 <strcmp>
 8011754:	b900      	cbnz	r0, 8011758 <net_wifi_string_to_security+0x80>
  {
    ret = NET_WIFI_SM_WPA3_WPA2_PSK;
 8011756:	4d30      	ldr	r5, [pc, #192]	; (8011818 <net_wifi_string_to_security+0x140>)
  }

  if (strcmp(sec, "WPA-TKIP-Ent") == 0)
 8011758:	4930      	ldr	r1, [pc, #192]	; (801181c <net_wifi_string_to_security+0x144>)
 801175a:	4620      	mov	r0, r4
 801175c:	f7ee fdc8 	bl	80002f0 <strcmp>
 8011760:	b900      	cbnz	r0, 8011764 <net_wifi_string_to_security+0x8c>
  {
    ret = NET_WIFI_SM_WPA_TKIP_ENT;
 8011762:	4d2f      	ldr	r5, [pc, #188]	; (8011820 <net_wifi_string_to_security+0x148>)
  }
  if (strcmp(sec, "WPA-AES-Ent") == 0)
 8011764:	492f      	ldr	r1, [pc, #188]	; (8011824 <net_wifi_string_to_security+0x14c>)
 8011766:	4620      	mov	r0, r4
 8011768:	f7ee fdc2 	bl	80002f0 <strcmp>
 801176c:	b900      	cbnz	r0, 8011770 <net_wifi_string_to_security+0x98>
  {
    ret = NET_WIFI_SM_WPA_AES_ENT;
 801176e:	4d2e      	ldr	r5, [pc, #184]	; (8011828 <net_wifi_string_to_security+0x150>)
  }
  if (strcmp(sec, "WPA2-TKIP-Ent") == 0)
 8011770:	492e      	ldr	r1, [pc, #184]	; (801182c <net_wifi_string_to_security+0x154>)
 8011772:	4620      	mov	r0, r4
 8011774:	f7ee fdbc 	bl	80002f0 <strcmp>
 8011778:	b900      	cbnz	r0, 801177c <net_wifi_string_to_security+0xa4>
  {
    ret = NET_WIFI_SM_WPA2_TKIP_ENT;
 801177a:	4d2d      	ldr	r5, [pc, #180]	; (8011830 <net_wifi_string_to_security+0x158>)
  }
  if (strcmp(sec, "WPA2-AES-Ent") == 0)
 801177c:	492d      	ldr	r1, [pc, #180]	; (8011834 <net_wifi_string_to_security+0x15c>)
 801177e:	4620      	mov	r0, r4
 8011780:	f7ee fdb6 	bl	80002f0 <strcmp>
 8011784:	b900      	cbnz	r0, 8011788 <net_wifi_string_to_security+0xb0>
  {
    ret = NET_WIFI_SM_WPA2_AES_ENT;
 8011786:	4d2c      	ldr	r5, [pc, #176]	; (8011838 <net_wifi_string_to_security+0x160>)
  }
  if (strcmp(sec, "WPA2-Mixed-Ent") == 0)
 8011788:	492c      	ldr	r1, [pc, #176]	; (801183c <net_wifi_string_to_security+0x164>)
 801178a:	4620      	mov	r0, r4
 801178c:	f7ee fdb0 	bl	80002f0 <strcmp>
 8011790:	b900      	cbnz	r0, 8011794 <net_wifi_string_to_security+0xbc>
  {
    ret = NET_WIFI_SM_WPA2_MIXED_ENT;
 8011792:	4d2b      	ldr	r5, [pc, #172]	; (8011840 <net_wifi_string_to_security+0x168>)
  }
  if (strcmp(sec, "WPA-FBT-Ent") == 0)
 8011794:	492b      	ldr	r1, [pc, #172]	; (8011844 <net_wifi_string_to_security+0x16c>)
 8011796:	4620      	mov	r0, r4
 8011798:	f7ee fdaa 	bl	80002f0 <strcmp>
 801179c:	b900      	cbnz	r0, 80117a0 <net_wifi_string_to_security+0xc8>
  {
    ret = NET_WIFI_SM_WPA2_FBT_ENT;
 801179e:	4d2a      	ldr	r5, [pc, #168]	; (8011848 <net_wifi_string_to_security+0x170>)
  }
  if (strcmp(sec, "IBS") == 0)
 80117a0:	492a      	ldr	r1, [pc, #168]	; (801184c <net_wifi_string_to_security+0x174>)
 80117a2:	4620      	mov	r0, r4
 80117a4:	f7ee fda4 	bl	80002f0 <strcmp>
 80117a8:	b908      	cbnz	r0, 80117ae <net_wifi_string_to_security+0xd6>
  {
    ret = NET_WIFI_SM_IBSS_OPEN;
 80117aa:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  }
  if (strcmp(sec, "WPS") == 0)
 80117ae:	4928      	ldr	r1, [pc, #160]	; (8011850 <net_wifi_string_to_security+0x178>)
 80117b0:	4620      	mov	r0, r4
 80117b2:	f7ee fd9d 	bl	80002f0 <strcmp>
 80117b6:	b908      	cbnz	r0, 80117bc <net_wifi_string_to_security+0xe4>
  {
    ret = NET_WIFI_SM_WPS_OPEN;
 80117b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  }
  if (strcmp(sec, "WPS-AES") == 0)
 80117bc:	4925      	ldr	r1, [pc, #148]	; (8011854 <net_wifi_string_to_security+0x17c>)
 80117be:	4620      	mov	r0, r4
 80117c0:	f7ee fd96 	bl	80002f0 <strcmp>
 80117c4:	b118      	cbz	r0, 80117ce <net_wifi_string_to_security+0xf6>
  {
    ret = NET_WIFI_SM_WPS_SECURE;
  }

  return ret;
}
 80117c6:	4628      	mov	r0, r5
 80117c8:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_WIFI_SM_OPEN;
 80117ca:	2500      	movs	r5, #0
 80117cc:	e78d      	b.n	80116ea <net_wifi_string_to_security+0x12>
    ret = NET_WIFI_SM_WPS_SECURE;
 80117ce:	4d22      	ldr	r5, [pc, #136]	; (8011858 <net_wifi_string_to_security+0x180>)
  return ret;
 80117d0:	e7f9      	b.n	80117c6 <net_wifi_string_to_security+0xee>
 80117d2:	bf00      	nop
 80117d4:	08026044 	.word	0x08026044
 80117d8:	080262d0 	.word	0x080262d0
 80117dc:	080262dc 	.word	0x080262dc
 80117e0:	00200002 	.word	0x00200002
 80117e4:	080262e8 	.word	0x080262e8
 80117e8:	00200006 	.word	0x00200006
 80117ec:	080262f4 	.word	0x080262f4
 80117f0:	00400004 	.word	0x00400004
 80117f4:	08026300 	.word	0x08026300
 80117f8:	00400002 	.word	0x00400002
 80117fc:	080263a0 	.word	0x080263a0
 8011800:	00400006 	.word	0x00400006
 8011804:	080263ac 	.word	0x080263ac
 8011808:	40400004 	.word	0x40400004
 801180c:	08026324 	.word	0x08026324
 8011810:	01000004 	.word	0x01000004
 8011814:	0802632c 	.word	0x0802632c
 8011818:	01400004 	.word	0x01400004
 801181c:	08026338 	.word	0x08026338
 8011820:	02200002 	.word	0x02200002
 8011824:	08026348 	.word	0x08026348
 8011828:	02200004 	.word	0x02200004
 801182c:	08026354 	.word	0x08026354
 8011830:	02400002 	.word	0x02400002
 8011834:	08026364 	.word	0x08026364
 8011838:	02400004 	.word	0x02400004
 801183c:	08026374 	.word	0x08026374
 8011840:	02400006 	.word	0x02400006
 8011844:	08026384 	.word	0x08026384
 8011848:	42400004 	.word	0x42400004
 801184c:	08026390 	.word	0x08026390
 8011850:	08026394 	.word	0x08026394
 8011854:	08026398 	.word	0x08026398
 8011858:	10000004 	.word	0x10000004

0801185c <net_wifi_scan>:
  * @retval return the number of found access point , max value is "number".
   * This function is a synchronous function.
  */

int32_t net_wifi_scan(net_if_handle_t *pnetif_in, net_wifi_scan_mode_t mode, char_t *ssid)
{
 801185c:	b570      	push	{r4, r5, r6, lr}
 801185e:	460d      	mov	r5, r1
 8011860:	4614      	mov	r4, r2
  int32_t ret = NET_OK;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011862:	f000 f861 	bl	8011928 <netif_check>
  if (pnetif == NULL)
 8011866:	b150      	cbz	r0, 801187e <net_wifi_scan+0x22>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 8011868:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 801186c:	7811      	ldrb	r1, [r2, #0]
 801186e:	b949      	cbnz	r1, 8011884 <net_wifi_scan+0x28>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    if (pnetif->pdrv->extension.wifi->scan(pnetif, mode, ssid) != NET_OK)
 8011870:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8011872:	6816      	ldr	r6, [r2, #0]
 8011874:	4622      	mov	r2, r4
 8011876:	4629      	mov	r1, r5
 8011878:	47b0      	blx	r6
 801187a:	b930      	cbnz	r0, 801188a <net_wifi_scan+0x2e>
      ret = NET_ERROR_GENERIC;
    }
  }

  return ret;
}
 801187c:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 801187e:	f06f 0003 	mvn.w	r0, #3
 8011882:	e7fb      	b.n	801187c <net_wifi_scan+0x20>
    ret = NET_ERROR_PARAMETER;
 8011884:	f06f 0003 	mvn.w	r0, #3
 8011888:	e7f8      	b.n	801187c <net_wifi_scan+0x20>
      ret = NET_ERROR_GENERIC;
 801188a:	f06f 001c 	mvn.w	r0, #28
  return ret;
 801188e:	e7f5      	b.n	801187c <net_wifi_scan+0x20>

08011890 <net_wifi_get_scan_results>:
  * @param  results is a pointer to an allocated array of net_wifi_scan_results_t
  * @param  number is unsigned integer , size of the array 'results'
  * @retval return the number of found access point , max value is "number".
  */
int32_t net_wifi_get_scan_results(net_if_handle_t *pnetif_in, net_wifi_scan_results_t *results, uint8_t number)
{
 8011890:	b570      	push	{r4, r5, r6, lr}
 8011892:	460d      	mov	r5, r1
 8011894:	4614      	mov	r4, r2
  int32_t ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011896:	f000 f847 	bl	8011928 <netif_check>
  if (pnetif == NULL)
 801189a:	b148      	cbz	r0, 80118b0 <net_wifi_get_scan_results+0x20>
  {
    NET_DBG_ERROR("No network interface defined");
    ret = NET_ERROR_PARAMETER;
  }
  else if (pnetif->pdrv->if_class != NET_INTERFACE_CLASS_WIFI)
 801189c:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 80118a0:	7811      	ldrb	r1, [r2, #0]
 80118a2:	b941      	cbnz	r1, 80118b6 <net_wifi_get_scan_results+0x26>
    NET_DBG_ERROR("Incorrect class interface when calling net_wifi_scan function\n");
    ret = NET_ERROR_PARAMETER;
  }
  else
  {
    ret = pnetif->pdrv->extension.wifi->get_scan_results(pnetif, results, number);
 80118a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80118a6:	6856      	ldr	r6, [r2, #4]
 80118a8:	4622      	mov	r2, r4
 80118aa:	4629      	mov	r1, r5
 80118ac:	47b0      	blx	r6
  }
  return ret;
}
 80118ae:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_PARAMETER;
 80118b0:	f06f 0003 	mvn.w	r0, #3
 80118b4:	e7fb      	b.n	80118ae <net_wifi_get_scan_results+0x1e>
    ret = NET_ERROR_PARAMETER;
 80118b6:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80118ba:	e7f8      	b.n	80118ae <net_wifi_get_scan_results+0x1e>

080118bc <net_wifi_set_credentials>:
  * @param  credentials a pointer to a const allocated structure which contain credentials values (ssid , passwd)
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_wifi_set_credentials(net_if_handle_t *pnetif, const net_wifi_credentials_t *credentials)
{
  pnetif->pdrv->extension.wifi->credentials = credentials;
 80118bc:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80118c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118c2:	6159      	str	r1, [r3, #20]
  return NET_OK;
}
 80118c4:	2000      	movs	r0, #0
 80118c6:	4770      	bx	lr

080118c8 <netif_add_to_list>:
#endif /* IO */

static void netif_add_to_list(net_if_handle_t *pnetif)
{
  LOCK_NETIF_LIST();
  if (net_if_list == NULL)
 80118c8:	4b05      	ldr	r3, [pc, #20]	; (80118e0 <netif_add_to_list+0x18>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	b12b      	cbz	r3, 80118da <netif_add_to_list+0x12>
  else
  {
    /*add it to end of the list*/
    net_if_handle_t *plastnetif;
    plastnetif = net_if_list;
    while (plastnetif->next != NULL)
 80118ce:	461a      	mov	r2, r3
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d1fb      	bne.n	80118ce <netif_add_to_list+0x6>
    {
      plastnetif = plastnetif->next;
    }
    plastnetif->next = pnetif;
 80118d6:	6010      	str	r0, [r2, #0]
  }
  UNLOCK_NETIF_LIST();
}
 80118d8:	4770      	bx	lr
    net_if_list = pnetif;
 80118da:	4b01      	ldr	r3, [pc, #4]	; (80118e0 <netif_add_to_list+0x18>)
 80118dc:	6018      	str	r0, [r3, #0]
 80118de:	4770      	bx	lr
 80118e0:	2400f390 	.word	0x2400f390

080118e4 <net_if_find>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
net_if_handle_t *net_if_find(net_sockaddr_t *addr)
{
 80118e4:	b510      	push	{r4, lr}
 80118e6:	b082      	sub	sp, #8
  net_if_handle_t *ptr;
  net_ip_addr_t ipaddr;
  net_ip_addr_t ipaddr_zero;

  NET_ZERO(ipaddr_zero);
 80118e8:	2300      	movs	r3, #0
 80118ea:	9300      	str	r3, [sp, #0]
  NET_ZERO(ipaddr);
 80118ec:	9301      	str	r3, [sp, #4]
  if (addr != NULL)
 80118ee:	b110      	cbz	r0, 80118f6 <net_if_find+0x12>
  {
    ipaddr = net_get_ip_addr(addr);
 80118f0:	f7ff feef 	bl	80116d2 <net_get_ip_addr>
 80118f4:	9001      	str	r0, [sp, #4]

  }
  LOCK_NETIF_LIST();

  ptr = net_if_list;
 80118f6:	4b0b      	ldr	r3, [pc, #44]	; (8011924 <net_if_find+0x40>)
 80118f8:	681c      	ldr	r4, [r3, #0]

  if (NET_DIFF(ipaddr, ipaddr_zero) != 0)
 80118fa:	2204      	movs	r2, #4
 80118fc:	4669      	mov	r1, sp
 80118fe:	eb0d 0002 	add.w	r0, sp, r2
 8011902:	f011 fbdf 	bl	80230c4 <memcmp>
 8011906:	b148      	cbz	r0, 801191c <net_if_find+0x38>
  {
    do
    {
      if (NET_EQUAL(ptr->ipaddr, ipaddr))
 8011908:	2204      	movs	r2, #4
 801190a:	eb0d 0102 	add.w	r1, sp, r2
 801190e:	18a0      	adds	r0, r4, r2
 8011910:	f011 fbd8 	bl	80230c4 <memcmp>
 8011914:	b110      	cbz	r0, 801191c <net_if_find+0x38>
      {
        break;
      }
      ptr = ptr->next;
 8011916:	6824      	ldr	r4, [r4, #0]
    } while (ptr != NULL);
 8011918:	2c00      	cmp	r4, #0
 801191a:	d1f5      	bne.n	8011908 <net_if_find+0x24>
  }
  UNLOCK_NETIF_LIST();
  return ptr;
}
 801191c:	4620      	mov	r0, r4
 801191e:	b002      	add	sp, #8
 8011920:	bd10      	pop	{r4, pc}
 8011922:	bf00      	nop
 8011924:	2400f390 	.word	0x2400f390

08011928 <netif_check>:


net_if_handle_t *netif_check(net_if_handle_t *pnetif_in)
{
 8011928:	b508      	push	{r3, lr}
  net_if_handle_t *pnetif = pnetif_in;
  if (pnetif == NULL)
 801192a:	b100      	cbz	r0, 801192e <netif_check+0x6>
    {
      NET_DBG_ERROR("No network interface defined");
    }
  }
  return pnetif;
}
 801192c:	bd08      	pop	{r3, pc}
    pnetif = net_if_find(NULL);
 801192e:	2000      	movs	r0, #0
 8011930:	f7ff ffd8 	bl	80118e4 <net_if_find>
    if (pnetif == NULL)
 8011934:	e7fa      	b.n	801192c <netif_check+0x4>

08011936 <net_if_wait_state>:
  * @retval 0 in case of success, an error code otherwise
  */
extern uint32_t HAL_GetTick(void);

int32_t net_if_wait_state(net_if_handle_t *pnetif, net_state_t state, uint32_t timeout)
{
 8011936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011938:	4604      	mov	r4, r0
 801193a:	460d      	mov	r5, r1
 801193c:	4617      	mov	r7, r2
  int32_t  ret = NET_OK;
  __IO net_state_t      *p;
  p = &pnetif->state;

  uint32_t start_time = HAL_GetTick();
 801193e:	f7f8 fcef 	bl	800a320 <HAL_GetTick>
 8011942:	4606      	mov	r6, r0
  while (*p != state)
 8011944:	e005      	b.n	8011952 <net_if_wait_state+0x1c>
    if (HAL_GetTick() >= (start_time + timeout))
    {
      ret = NET_TIMEOUT;
      break;
    }
    WAIT_STATE_CHANGE(timeout);
 8011946:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 801194a:	695b      	ldr	r3, [r3, #20]
 801194c:	210a      	movs	r1, #10
 801194e:	4620      	mov	r0, r4
 8011950:	4798      	blx	r3
  while (*p != state)
 8011952:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
 8011956:	b2db      	uxtb	r3, r3
 8011958:	42ab      	cmp	r3, r5
 801195a:	d007      	beq.n	801196c <net_if_wait_state+0x36>
    if (HAL_GetTick() >= (start_time + timeout))
 801195c:	f7f8 fce0 	bl	800a320 <HAL_GetTick>
 8011960:	19f3      	adds	r3, r6, r7
 8011962:	4298      	cmp	r0, r3
 8011964:	d3ef      	bcc.n	8011946 <net_if_wait_state+0x10>
      ret = NET_TIMEOUT;
 8011966:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return ret;
 801196a:	e000      	b.n	801196e <net_if_wait_state+0x38>
  int32_t  ret = NET_OK;
 801196c:	2000      	movs	r0, #0

}
 801196e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011970 <net_if_notify>:


void net_if_notify(net_if_handle_t *pnetif, net_evt_t event_class, uint32_t event_id, void  *event_data)
{
  /* call the user Handler first ,FIXME , first or not , race between wait state transition and user handler */
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8011970:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 8011974:	b128      	cbz	r0, 8011982 <net_if_notify+0x12>
{
 8011976:	b510      	push	{r4, lr}
  if ((NULL != pnetif->event_handler) && (NULL != pnetif->event_handler->callback))
 8011978:	6804      	ldr	r4, [r0, #0]
 801197a:	b10c      	cbz	r4, 8011980 <net_if_notify+0x10>
  {
    pnetif->event_handler->callback(pnetif->event_handler->context, event_class, event_id, event_data);
 801197c:	6840      	ldr	r0, [r0, #4]
 801197e:	47a0      	blx	r4
  }
}
 8011980:	bd10      	pop	{r4, pc}
 8011982:	4770      	bx	lr

08011984 <net_if_init>:
    net_init_locks();
    net_initialized = 1;
  }
#endif /* NET_USE_RTOS */

  if (pnetif != NULL)
 8011984:	b168      	cbz	r0, 80119a2 <net_if_init+0x1e>
{
 8011986:	b538      	push	{r3, r4, r5, lr}
 8011988:	460d      	mov	r5, r1
 801198a:	4604      	mov	r4, r0
  {
    pnetif->event_handler = event_handler;
 801198c:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    pnetif->state = NET_STATE_INITIALIZED;
 8011990:	2301      	movs	r3, #1
 8011992:	f880 30ea 	strb.w	r3, [r0, #234]	; 0xea
    netif_add_to_list(pnetif);
 8011996:	f7ff ff97 	bl	80118c8 <netif_add_to_list>
    ret = (*driver_init)(pnetif);
 801199a:	4620      	mov	r0, r4
 801199c:	47a8      	blx	r5
    if (NET_OK != ret)
 801199e:	b918      	cbnz	r0, 80119a8 <net_if_init+0x24>
  {
    NET_DBG_ERROR("Invalid interface.");
    ret = NET_ERROR_PARAMETER;
  }
  return ret;
}
 80119a0:	bd38      	pop	{r3, r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 80119a2:	f06f 0003 	mvn.w	r0, #3
}
 80119a6:	4770      	bx	lr
      ret = NET_ERROR_INTERFACE_FAILURE;
 80119a8:	f06f 0010 	mvn.w	r0, #16
  return ret;
 80119ac:	e7f8      	b.n	80119a0 <net_if_init+0x1c>

080119ae <net_if_start>:
  * @brief  Start network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_start(net_if_handle_t *pnetif)
{
 80119ae:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_START);
 80119b0:	2101      	movs	r1, #1
 80119b2:	f000 f8ab 	bl	8011b0c <net_state_manage_event>
}
 80119b6:	bd08      	pop	{r3, pc}

080119b8 <net_if_connect>:
  * @brief  Connect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_connect(net_if_handle_t *pnetif)
{
 80119b8:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_CONNECT);
 80119ba:	2102      	movs	r1, #2
 80119bc:	f000 f8a6 	bl	8011b0c <net_state_manage_event>
}
 80119c0:	bd08      	pop	{r3, pc}

080119c2 <net_if_disconnect>:
  * @brief  Disconnect network interface
  * @param  pnetif a pointer to an allocated network interface structure
  * @retval 0 in case of success, an error code otherwise
  */
int32_t net_if_disconnect(net_if_handle_t *pnetif)
{
 80119c2:	b508      	push	{r3, lr}
  return net_state_manage_event(pnetif, NET_EVENT_CMD_DISCONNECT);
 80119c4:	2103      	movs	r1, #3
 80119c6:	f000 f8a1 	bl	8011b0c <net_state_manage_event>
}
 80119ca:	bd08      	pop	{r3, pc}

080119cc <set_state>:
  "NET_STATE_CONNECTION_LOST",
};
#endif /* DEBUGSTATE */

static void   set_state(net_if_handle_t *pnetif, net_state_t state)
{
 80119cc:	b508      	push	{r3, lr}
 80119ce:	460a      	mov	r2, r1
  pnetif->state = state;
 80119d0:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
  net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) state, NULL);
 80119d4:	2300      	movs	r3, #0
 80119d6:	4619      	mov	r1, r3
 80119d8:	f7ff ffca 	bl	8011970 <net_if_notify>
  SIGNAL_STATE_CHANGE();
}
 80119dc:	bd08      	pop	{r3, pc}

080119de <net_state_initialized>:


static  int32_t net_state_initialized(net_if_handle_t *pnetif, net_state_event_t event)
{
 80119de:	b538      	push	{r3, r4, r5, lr}
 80119e0:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 80119e2:	2901      	cmp	r1, #1
 80119e4:	d004      	beq.n	80119f0 <net_state_initialized+0x12>
 80119e6:	2905      	cmp	r1, #5
 80119e8:	d010      	beq.n	8011a0c <net_state_initialized+0x2e>
 80119ea:	2500      	movs	r5, #0

    default:
      break;
  }
  return ret;
}
 80119ec:	4628      	mov	r0, r5
 80119ee:	bd38      	pop	{r3, r4, r5, pc}
      set_state(pnetif, NET_STATE_STARTING);
 80119f0:	2102      	movs	r1, #2
 80119f2:	f7ff ffeb 	bl	80119cc <set_state>
      ret = pnetif->pdrv->if_start(pnetif);
 80119f6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	4620      	mov	r0, r4
 80119fe:	4798      	blx	r3
      if (NET_OK != ret)
 8011a00:	4605      	mov	r5, r0
 8011a02:	2800      	cmp	r0, #0
 8011a04:	d0f2      	beq.n	80119ec <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011a06:	f06f 0510 	mvn.w	r5, #16
 8011a0a:	e7ef      	b.n	80119ec <net_state_initialized+0xe>
      ret = pnetif->pdrv->if_deinit(pnetif);
 8011a0c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011a10:	689b      	ldr	r3, [r3, #8]
 8011a12:	4798      	blx	r3
 8011a14:	4605      	mov	r5, r0
      set_state(pnetif, NET_STATE_DEINITIALIZED);
 8011a16:	2100      	movs	r1, #0
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f7ff ffd7 	bl	80119cc <set_state>
      if (NET_OK != ret)
 8011a1e:	2d00      	cmp	r5, #0
 8011a20:	d0e4      	beq.n	80119ec <net_state_initialized+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011a22:	f06f 0510 	mvn.w	r5, #16
  return ret;
 8011a26:	e7e1      	b.n	80119ec <net_state_initialized+0xe>

08011a28 <net_state_starting>:

static  int32_t net_state_starting(net_if_handle_t *pnetif, net_state_event_t  event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8011a28:	2907      	cmp	r1, #7
 8011a2a:	d001      	beq.n	8011a30 <net_state_starting+0x8>

    default:
      break;
  }
  return ret;
}
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	4770      	bx	lr
{
 8011a30:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 8011a32:	2103      	movs	r1, #3
 8011a34:	f7ff ffca 	bl	80119cc <set_state>
}
 8011a38:	2000      	movs	r0, #0
 8011a3a:	bd08      	pop	{r3, pc}

08011a3c <net_state_ready>:

static  int32_t net_state_ready(net_if_handle_t *pnetif, net_state_event_t event)
{
 8011a3c:	b510      	push	{r4, lr}
 8011a3e:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8011a40:	2902      	cmp	r1, #2
 8011a42:	d003      	beq.n	8011a4c <net_state_ready+0x10>
 8011a44:	2904      	cmp	r1, #4
 8011a46:	d00e      	beq.n	8011a66 <net_state_ready+0x2a>
 8011a48:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 8011a4a:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_CONNECTING);
 8011a4c:	2104      	movs	r1, #4
 8011a4e:	f7ff ffbd 	bl	80119cc <set_state>
      ret = pnetif->pdrv->if_connect(pnetif);
 8011a52:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011a56:	699b      	ldr	r3, [r3, #24]
 8011a58:	4620      	mov	r0, r4
 8011a5a:	4798      	blx	r3
      if (NET_OK != ret)
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d0f4      	beq.n	8011a4a <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011a60:	f06f 0010 	mvn.w	r0, #16
 8011a64:	e7f1      	b.n	8011a4a <net_state_ready+0xe>
      set_state(pnetif, NET_STATE_STOPPING);
 8011a66:	2106      	movs	r1, #6
 8011a68:	f7ff ffb0 	bl	80119cc <set_state>
      ret = pnetif->pdrv->if_stop(pnetif);
 8011a6c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011a70:	691b      	ldr	r3, [r3, #16]
 8011a72:	4620      	mov	r0, r4
 8011a74:	4798      	blx	r3
      if (NET_OK != ret)
 8011a76:	2800      	cmp	r0, #0
 8011a78:	d0e7      	beq.n	8011a4a <net_state_ready+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011a7a:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8011a7e:	e7e4      	b.n	8011a4a <net_state_ready+0xe>

08011a80 <net_state_connecting>:

static  int32_t net_state_connecting(net_if_handle_t *pnetif, net_state_event_t  event)
{
 8011a80:	b508      	push	{r3, lr}
  int32_t       ret = NET_OK;
  switch (event)
 8011a82:	2903      	cmp	r1, #3
 8011a84:	d006      	beq.n	8011a94 <net_state_connecting+0x14>
 8011a86:	290a      	cmp	r1, #10
 8011a88:	d102      	bne.n	8011a90 <net_state_connecting+0x10>
  {
    case NET_EVENT_IPADDR:
      set_state(pnetif, NET_STATE_CONNECTED);
 8011a8a:	2105      	movs	r1, #5
 8011a8c:	f7ff ff9e 	bl	80119cc <set_state>

    default:
      break;
  }
  return ret;
}
 8011a90:	2000      	movs	r0, #0
 8011a92:	bd08      	pop	{r3, pc}
      set_state(pnetif, NET_STATE_READY);
 8011a94:	2103      	movs	r1, #3
 8011a96:	f7ff ff99 	bl	80119cc <set_state>
      break;
 8011a9a:	e7f9      	b.n	8011a90 <net_state_connecting+0x10>

08011a9c <net_state_connected>:

static  int32_t net_state_connected(net_if_handle_t *pnetif, net_state_event_t event)
{
 8011a9c:	b510      	push	{r4, lr}
 8011a9e:	4604      	mov	r4, r0
  int32_t       ret = NET_OK;
  switch (event)
 8011aa0:	2903      	cmp	r1, #3
 8011aa2:	d003      	beq.n	8011aac <net_state_connected+0x10>
 8011aa4:	2909      	cmp	r1, #9
 8011aa6:	d00e      	beq.n	8011ac6 <net_state_connected+0x2a>
 8011aa8:	2000      	movs	r0, #0

    default:
      break;
  }
  return ret;
}
 8011aaa:	bd10      	pop	{r4, pc}
      set_state(pnetif, NET_STATE_DISCONNECTING);
 8011aac:	2107      	movs	r1, #7
 8011aae:	f7ff ff8d 	bl	80119cc <set_state>
      ret = pnetif->pdrv->if_disconnect(pnetif);
 8011ab2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011ab6:	69db      	ldr	r3, [r3, #28]
 8011ab8:	4620      	mov	r0, r4
 8011aba:	4798      	blx	r3
      if (NET_OK != ret)
 8011abc:	2800      	cmp	r0, #0
 8011abe:	d0f4      	beq.n	8011aaa <net_state_connected+0xe>
        ret = NET_ERROR_INTERFACE_FAILURE;
 8011ac0:	f06f 0010 	mvn.w	r0, #16
  return ret;
 8011ac4:	e7f1      	b.n	8011aaa <net_state_connected+0xe>
      set_state(pnetif, NET_STATE_CONNECTION_LOST);
 8011ac6:	2108      	movs	r1, #8
 8011ac8:	f7ff ff80 	bl	80119cc <set_state>
  int32_t       ret = NET_OK;
 8011acc:	2000      	movs	r0, #0
      break;
 8011ace:	e7ec      	b.n	8011aaa <net_state_connected+0xe>

08011ad0 <net_state_disconnecting>:

static  int32_t net_state_disconnecting(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8011ad0:	2907      	cmp	r1, #7
 8011ad2:	d001      	beq.n	8011ad8 <net_state_disconnecting+0x8>

    default:
      break;
  }
  return ret;
}
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	4770      	bx	lr
{
 8011ad8:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_READY);
 8011ada:	2103      	movs	r1, #3
 8011adc:	f7ff ff76 	bl	80119cc <set_state>
}
 8011ae0:	2000      	movs	r0, #0
 8011ae2:	bd08      	pop	{r3, pc}

08011ae4 <net_state_connection_lost>:
}

static  int32_t net_state_connection_lost(net_if_handle_t *pnetif, net_state_event_t event)
{
  int32_t       ret = NET_OK;
  switch (event)
 8011ae4:	2908      	cmp	r1, #8
 8011ae6:	d001      	beq.n	8011aec <net_state_connection_lost+0x8>

    default:
      break;
  }
  return ret;
}
 8011ae8:	2000      	movs	r0, #0
 8011aea:	4770      	bx	lr
{
 8011aec:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_CONNECTED);
 8011aee:	2105      	movs	r1, #5
 8011af0:	f7ff ff6c 	bl	80119cc <set_state>
}
 8011af4:	2000      	movs	r0, #0
 8011af6:	bd08      	pop	{r3, pc}

08011af8 <net_state_stopping>:
  switch (event)
 8011af8:	2906      	cmp	r1, #6
 8011afa:	d001      	beq.n	8011b00 <net_state_stopping+0x8>
}
 8011afc:	2000      	movs	r0, #0
 8011afe:	4770      	bx	lr
{
 8011b00:	b508      	push	{r3, lr}
      set_state(pnetif, NET_STATE_INITIALIZED);
 8011b02:	2101      	movs	r1, #1
 8011b04:	f7ff ff62 	bl	80119cc <set_state>
}
 8011b08:	2000      	movs	r0, #0
 8011b0a:	bd08      	pop	{r3, pc}

08011b0c <net_state_manage_event>:




int32_t net_state_manage_event(net_if_handle_t *pnetif_in, net_state_event_t event)
{
 8011b0c:	b510      	push	{r4, lr}
 8011b0e:	460c      	mov	r4, r1
  int32_t       ret;
  net_if_handle_t *pnetif;

  pnetif = netif_check(pnetif_in);
 8011b10:	f7ff ff0a 	bl	8011928 <netif_check>
  if (pnetif == NULL)
 8011b14:	b350      	cbz	r0, 8011b6c <net_state_manage_event+0x60>
  else
  {
#ifdef DEBUGSTATE
    printf("In state %s , received event %s\n", statestr[pnetif->state], eventstr[event]);
#endif /* DEBUGSTATE */
    switch (pnetif->state)
 8011b16:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 8011b1a:	3b01      	subs	r3, #1
 8011b1c:	2b07      	cmp	r3, #7
 8011b1e:	d828      	bhi.n	8011b72 <net_state_manage_event+0x66>
 8011b20:	e8df f003 	tbb	[pc, r3]
 8011b24:	100c0804 	.word	0x100c0804
 8011b28:	1c182014 	.word	0x1c182014
    {
      case  NET_STATE_INITIALIZED:
        ret = net_state_initialized(pnetif, event);
 8011b2c:	4621      	mov	r1, r4
 8011b2e:	f7ff ff56 	bl	80119de <net_state_initialized>
        ret = NET_ERROR_INVALID_STATE;
        break;
    }
  }
  return ret;
}
 8011b32:	bd10      	pop	{r4, pc}
        ret = net_state_starting(pnetif, event);
 8011b34:	4621      	mov	r1, r4
 8011b36:	f7ff ff77 	bl	8011a28 <net_state_starting>
        break;
 8011b3a:	e7fa      	b.n	8011b32 <net_state_manage_event+0x26>
        ret = net_state_ready(pnetif, event);
 8011b3c:	4621      	mov	r1, r4
 8011b3e:	f7ff ff7d 	bl	8011a3c <net_state_ready>
        break;
 8011b42:	e7f6      	b.n	8011b32 <net_state_manage_event+0x26>
        ret = net_state_connecting(pnetif, event);
 8011b44:	4621      	mov	r1, r4
 8011b46:	f7ff ff9b 	bl	8011a80 <net_state_connecting>
        break;
 8011b4a:	e7f2      	b.n	8011b32 <net_state_manage_event+0x26>
        ret = net_state_connected(pnetif, event);
 8011b4c:	4621      	mov	r1, r4
 8011b4e:	f7ff ffa5 	bl	8011a9c <net_state_connected>
        break;
 8011b52:	e7ee      	b.n	8011b32 <net_state_manage_event+0x26>
        ret = net_state_disconnecting(pnetif, event);
 8011b54:	4621      	mov	r1, r4
 8011b56:	f7ff ffbb 	bl	8011ad0 <net_state_disconnecting>
        break;
 8011b5a:	e7ea      	b.n	8011b32 <net_state_manage_event+0x26>
        ret = net_state_connection_lost(pnetif, event);
 8011b5c:	4621      	mov	r1, r4
 8011b5e:	f7ff ffc1 	bl	8011ae4 <net_state_connection_lost>
        break;
 8011b62:	e7e6      	b.n	8011b32 <net_state_manage_event+0x26>
        ret = net_state_stopping(pnetif, event);
 8011b64:	4621      	mov	r1, r4
 8011b66:	f7ff ffc7 	bl	8011af8 <net_state_stopping>
        break;
 8011b6a:	e7e2      	b.n	8011b32 <net_state_manage_event+0x26>
    ret = NET_ERROR_PARAMETER;
 8011b6c:	f06f 0003 	mvn.w	r0, #3
 8011b70:	e7df      	b.n	8011b32 <net_state_manage_event+0x26>
    switch (pnetif->state)
 8011b72:	f06f 001b 	mvn.w	r0, #27
  return ret;
 8011b76:	e7dc      	b.n	8011b32 <net_state_manage_event+0x26>

08011b78 <castcontext>:
{
  /*cstat -MISRAC2012-Rule-11.5 */
  return (ES_WIFIObject_t *)context;
  /*cstat +MISRAC2012-Rule-11.5 */

}
 8011b78:	4770      	bx	lr

08011b7a <cast2sockaddr_in>:
{
  /*cstat -MISRAC2012-Rule-11.3 -MISRAC2012-Rule-11.8 */
  return (sockaddr_in_t *) addr;
  /*cstat +MISRAC2012-Rule-11.3 +MISRAC2012-Rule-11.8 */

}
 8011b7a:	4770      	bx	lr

08011b7c <es_wifi_socket>:
static int32_t es_wifi_socket(int32_t domain, int32_t type, int32_t protocol_in)
{
  int32_t ret = NET_OK;
  int32_t protocol = protocol_in;

  if (domain != NET_AF_INET)
 8011b7c:	2802      	cmp	r0, #2
 8011b7e:	d13b      	bne.n	8011bf8 <es_wifi_socket+0x7c>
    ret = NET_ERROR_UNSUPPORTED;
  }
  else
  {
    /* currently only SOCK_DGRAM and SOCK_STREAM are supported */
    if ((type != (int32_t) NET_SOCK_STREAM) && (type != (int32_t) NET_SOCK_DGRAM))
 8011b80:	1e4b      	subs	r3, r1, #1
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d83b      	bhi.n	8011bfe <es_wifi_socket+0x82>
      ret = NET_ERROR_UNSUPPORTED;
    }
    else
    {
      /* Only support PROT_IP/TCP/UDP/IPV4 are supported */
      if ((protocol != NET_IPPROTO_TCP) && (protocol != NET_IPPROTO_UDP))
 8011b86:	2a06      	cmp	r2, #6
 8011b88:	bf18      	it	ne
 8011b8a:	2a11      	cmpne	r2, #17
 8011b8c:	d004      	beq.n	8011b98 <es_wifi_socket+0x1c>
      {
        if (type == (int32_t) NET_SOCK_STREAM)
 8011b8e:	2901      	cmp	r1, #1
 8011b90:	d030      	beq.n	8011bf4 <es_wifi_socket+0x78>
        {
          protocol = NET_IPPROTO_TCP;
        }
        /*cstat -MISRAC2012-Rule-14.3_a */
        else if (type == (int32_t) NET_SOCK_DGRAM)
 8011b92:	2902      	cmp	r1, #2
 8011b94:	d113      	bne.n	8011bbe <es_wifi_socket+0x42>
          /*cstat +MISRAC2012-Rule-14.3_a */
        {
          protocol = NET_IPPROTO_UDP;
 8011b96:	2211      	movs	r2, #17
 8011b98:	2000      	movs	r0, #0

  if (ret == NET_OK)
  {
    ret = NET_ERROR_INVALID_SOCKET;

    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8011b9a:	2803      	cmp	r0, #3
 8011b9c:	dc32      	bgt.n	8011c04 <es_wifi_socket+0x88>
{
 8011b9e:	b410      	push	{r4}
    {
      if (WifiChannel[i].status == WIFI_FREE_SOCKET)
 8011ba0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011ba4:	4c19      	ldr	r4, [pc, #100]	; (8011c0c <es_wifi_socket+0x90>)
 8011ba6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8011baa:	785b      	ldrb	r3, [r3, #1]
 8011bac:	b153      	cbz	r3, 8011bc4 <es_wifi_socket+0x48>
    for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8011bae:	3001      	adds	r0, #1
 8011bb0:	2803      	cmp	r0, #3
 8011bb2:	ddf5      	ble.n	8011ba0 <es_wifi_socket+0x24>
    ret = NET_ERROR_INVALID_SOCKET;
 8011bb4:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return ret;
}
 8011bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bbc:	4770      	bx	lr
          ret = NET_ERROR_UNSUPPORTED;
 8011bbe:	f06f 0002 	mvn.w	r0, #2
 8011bc2:	4770      	bx	lr
        WifiChannel[i].status = WIFI_ALLOCATED_SOCKET;
 8011bc4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011bc8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8011bcc:	2401      	movs	r4, #1
 8011bce:	705c      	strb	r4, [r3, #1]
        if (type == (int32_t) NET_SOCK_DGRAM)
 8011bd0:	2902      	cmp	r1, #2
 8011bd2:	d007      	beq.n	8011be4 <es_wifi_socket+0x68>
        WifiChannel[i].protocol        = (uint8_t) protocol;
 8011bd4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011bd8:	4c0c      	ldr	r4, [pc, #48]	; (8011c0c <es_wifi_socket+0x90>)
 8011bda:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8011bde:	709a      	strb	r2, [r3, #2]
        WifiChannel[i].type            = (uint8_t) type;
 8011be0:	70d9      	strb	r1, [r3, #3]
        break;
 8011be2:	e7e9      	b.n	8011bb8 <es_wifi_socket+0x3c>
          WifiChannel[i].status |= WIFI_SEND_OK | WIFI_RECV_OK;
 8011be4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011be8:	4c08      	ldr	r4, [pc, #32]	; (8011c0c <es_wifi_socket+0x90>)
 8011bea:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8011bee:	240d      	movs	r4, #13
 8011bf0:	705c      	strb	r4, [r3, #1]
 8011bf2:	e7ef      	b.n	8011bd4 <es_wifi_socket+0x58>
          protocol = NET_IPPROTO_TCP;
 8011bf4:	2206      	movs	r2, #6
 8011bf6:	e7cf      	b.n	8011b98 <es_wifi_socket+0x1c>
    ret = NET_ERROR_UNSUPPORTED;
 8011bf8:	f06f 0002 	mvn.w	r0, #2
 8011bfc:	4770      	bx	lr
      ret = NET_ERROR_UNSUPPORTED;
 8011bfe:	f06f 0002 	mvn.w	r0, #2
  return ret;
 8011c02:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 8011c04:	f06f 0005 	mvn.w	r0, #5
}
 8011c08:	4770      	bx	lr
 8011c0a:	bf00      	nop
 8011c0c:	2400f394 	.word	0x2400f394

08011c10 <es_wifi_bind>:
  * @brief  Function description
  * @param  Params
  * @retval socket status
  */
static int32_t es_wifi_bind(int32_t sock, const net_sockaddr_t *addr, uint32_t addrlen)
{
 8011c10:	b570      	push	{r4, r5, r6, lr}
 8011c12:	4604      	mov	r4, r0
  int32_t ret;
  sockaddr_in_t *source;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011c14:	2803      	cmp	r0, #3
 8011c16:	d826      	bhi.n	8011c66 <es_wifi_bind+0x56>
 8011c18:	4608      	mov	r0, r1
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    /* STREAM sockets cannot be bound after connection. */
    if ((WifiChannel [sock].status == WIFI_ALLOCATED_SOCKET)
 8011c1a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8011c1e:	4d18      	ldr	r5, [pc, #96]	; (8011c80 <es_wifi_bind+0x70>)
 8011c20:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8011c24:	785d      	ldrb	r5, [r3, #1]
 8011c26:	2d01      	cmp	r5, #1
 8011c28:	d00a      	beq.n	8011c40 <es_wifi_bind+0x30>
        || (((WifiChannel [sock].status & WIFI_ALLOCATED_SOCKET) != 0U)
 8011c2a:	f015 0f01 	tst.w	r5, #1
 8011c2e:	d01d      	beq.n	8011c6c <es_wifi_bind+0x5c>
            && ((uint8_t) WifiChannel [sock].type == (uint8_t) NET_SOCK_DGRAM)))
 8011c30:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8011c34:	4e12      	ldr	r6, [pc, #72]	; (8011c80 <es_wifi_bind+0x70>)
 8011c36:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8011c3a:	78db      	ldrb	r3, [r3, #3]
 8011c3c:	2b02      	cmp	r3, #2
 8011c3e:	d118      	bne.n	8011c72 <es_wifi_bind+0x62>
    {
      if (addrlen == sizeof(sockaddr_in_t))
 8011c40:	2a10      	cmp	r2, #16
 8011c42:	d119      	bne.n	8011c78 <es_wifi_bind+0x68>
      {
        source = cast2sockaddr_in(addr);
 8011c44:	f7ff ff99 	bl	8011b7a <cast2sockaddr_in>
        WifiChannel [sock].localport = NET_NTOHS(source->sin_port);
 8011c48:	8841      	ldrh	r1, [r0, #2]
 8011c4a:	ba49      	rev16	r1, r1
 8011c4c:	4b0c      	ldr	r3, [pc, #48]	; (8011c80 <es_wifi_bind+0x70>)
 8011c4e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8011c52:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011c56:	8091      	strh	r1, [r2, #4]
        WifiChannel [sock].localaddress = source->sin_addr.s_addr;
 8011c58:	6841      	ldr	r1, [r0, #4]
 8011c5a:	6091      	str	r1, [r2, #8]
        WifiChannel [sock].status |= WIFI_BIND_SOCKET;
 8011c5c:	f045 0502 	orr.w	r5, r5, #2
 8011c60:	7055      	strb	r5, [r2, #1]
        ret = NET_OK;
 8011c62:	2000      	movs	r0, #0
    {
      ret = NET_ERROR_INVALID_SOCKET;
    }
  }
  return ret;
}
 8011c64:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 8011c66:	f06f 0005 	mvn.w	r0, #5
 8011c6a:	e7fb      	b.n	8011c64 <es_wifi_bind+0x54>
      ret = NET_ERROR_INVALID_SOCKET;
 8011c6c:	f06f 0005 	mvn.w	r0, #5
 8011c70:	e7f8      	b.n	8011c64 <es_wifi_bind+0x54>
 8011c72:	f06f 0005 	mvn.w	r0, #5
 8011c76:	e7f5      	b.n	8011c64 <es_wifi_bind+0x54>
        ret = NET_ERROR_PARAMETER;
 8011c78:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8011c7c:	e7f2      	b.n	8011c64 <es_wifi_bind+0x54>
 8011c7e:	bf00      	nop
 8011c80:	2400f394 	.word	0x2400f394

08011c84 <es_wifi_shutdown>:
  * @retval socket status
  */
static int32_t es_wifi_shutdown(int32_t sock, int32_t mode)
{
  int32_t       ret;
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011c84:	2803      	cmp	r0, #3
 8011c86:	d82f      	bhi.n	8011ce8 <es_wifi_shutdown+0x64>
  {
    ret =  NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    if ((WifiChannel[sock].status &  WIFI_CONNECTED_SOCKET) != 0U)
 8011c88:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011c8c:	4a19      	ldr	r2, [pc, #100]	; (8011cf4 <es_wifi_shutdown+0x70>)
 8011c8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011c92:	785b      	ldrb	r3, [r3, #1]
 8011c94:	f013 0f10 	tst.w	r3, #16
 8011c98:	d029      	beq.n	8011cee <es_wifi_shutdown+0x6a>
{
 8011c9a:	b410      	push	{r4}
    {
      if (mode == NET_SHUTDOWN_R)
 8011c9c:	b939      	cbnz	r1, 8011cae <es_wifi_shutdown+0x2a>
      {
        WifiChannel[sock].status &=  ~WIFI_RECV_OK;
 8011c9e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8011ca2:	4c14      	ldr	r4, [pc, #80]	; (8011cf4 <es_wifi_shutdown+0x70>)
 8011ca4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8011ca8:	f023 0308 	bic.w	r3, r3, #8
 8011cac:	7053      	strb	r3, [r2, #1]
      }
      if (mode == NET_SHUTDOWN_W)
 8011cae:	2901      	cmp	r1, #1
 8011cb0:	d005      	beq.n	8011cbe <es_wifi_shutdown+0x3a>
      {
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
      }
      if (mode == NET_SHUTDOWN_RW)
 8011cb2:	2902      	cmp	r1, #2
 8011cb4:	d00d      	beq.n	8011cd2 <es_wifi_shutdown+0x4e>
      {
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
      }
    }
    ret = NET_OK;
 8011cb6:	2000      	movs	r0, #0
  }
  return ret;
}
 8011cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cbc:	4770      	bx	lr
        WifiChannel[sock].status &=  ~WIFI_SEND_OK;
 8011cbe:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011cc2:	4a0c      	ldr	r2, [pc, #48]	; (8011cf4 <es_wifi_shutdown+0x70>)
 8011cc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011cc8:	785a      	ldrb	r2, [r3, #1]
 8011cca:	f022 0204 	bic.w	r2, r2, #4
 8011cce:	705a      	strb	r2, [r3, #1]
 8011cd0:	e7ef      	b.n	8011cb2 <es_wifi_shutdown+0x2e>
        WifiChannel[sock].status &=  ~(WIFI_SEND_OK | WIFI_RECV_OK);
 8011cd2:	4b08      	ldr	r3, [pc, #32]	; (8011cf4 <es_wifi_shutdown+0x70>)
 8011cd4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8011cd8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011cdc:	7853      	ldrb	r3, [r2, #1]
 8011cde:	f023 030c 	bic.w	r3, r3, #12
 8011ce2:	7053      	strb	r3, [r2, #1]
    ret = NET_OK;
 8011ce4:	2000      	movs	r0, #0
 8011ce6:	e7e7      	b.n	8011cb8 <es_wifi_shutdown+0x34>
    ret =  NET_ERROR_INVALID_SOCKET;
 8011ce8:	f06f 0005 	mvn.w	r0, #5
 8011cec:	4770      	bx	lr
    ret = NET_OK;
 8011cee:	2000      	movs	r0, #0
}
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	2400f394 	.word	0x2400f394

08011cf8 <conv_to_net_security>:


static uint32_t conv_to_net_security(ES_WIFI_SecurityType_t     sec)
{
  uint32_t ret;
  switch (sec)
 8011cf8:	2805      	cmp	r0, #5
 8011cfa:	d80e      	bhi.n	8011d1a <conv_to_net_security+0x22>
 8011cfc:	e8df f000 	tbb	[pc, r0]
 8011d00:	07051003 	.word	0x07051003
 8011d04:	0b09      	.short	0x0b09
 8011d06:	2000      	movs	r0, #0
 8011d08:	4770      	bx	lr
      break;
    case ES_WIFI_SEC_WEP:
      ret = NET_WIFI_SM_WEP_PSK;
      break;
    case ES_WIFI_SEC_WPA:
      ret = NET_WIFI_SM_WPA_MIXED_PSK;
 8011d0a:	4806      	ldr	r0, [pc, #24]	; (8011d24 <conv_to_net_security+0x2c>)
      break;
 8011d0c:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 8011d0e:	4806      	ldr	r0, [pc, #24]	; (8011d28 <conv_to_net_security+0x30>)
      break;
 8011d10:	4770      	bx	lr
    case ES_WIFI_SEC_WPA_WPA2:
      ret = NET_WIFI_SM_WPA2_MIXED_PSK;
 8011d12:	4805      	ldr	r0, [pc, #20]	; (8011d28 <conv_to_net_security+0x30>)
      break;
 8011d14:	4770      	bx	lr
    case ES_WIFI_SEC_WPA2_TKIP:
      ret = NET_WIFI_SM_WPA2_TKIP_PSK;
 8011d16:	4805      	ldr	r0, [pc, #20]	; (8011d2c <conv_to_net_security+0x34>)
      break;
 8011d18:	4770      	bx	lr
    default :
      ret = NET_WIFI_SM_UNKNOWN;
 8011d1a:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 8011d1e:	4770      	bx	lr
      ret = NET_WIFI_SM_WEP_PSK;
 8011d20:	2001      	movs	r0, #1

  }
  return ret;
}
 8011d22:	4770      	bx	lr
 8011d24:	00200006 	.word	0x00200006
 8011d28:	00400006 	.word	0x00400006
 8011d2c:	00400002 	.word	0x00400002

08011d30 <es_wifi_setsockopt>:
  bool          *optbool = (bool *)optvalue;
  /*cstat +MISRAC2012-Rule-11.8 +MISRAC2012-Rule-11.5  */

  (void) level;

  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8011d30:	2803      	cmp	r0, #3
 8011d32:	d83e      	bhi.n	8011db2 <es_wifi_setsockopt+0x82>
  {
    ret = NET_ERROR_INVALID_SOCKET;
  }
  else
  {
    switch (optname)
 8011d34:	f241 0105 	movw	r1, #4101	; 0x1005
 8011d38:	428a      	cmp	r2, r1
 8011d3a:	d013      	beq.n	8011d64 <es_wifi_setsockopt+0x34>
 8011d3c:	dc05      	bgt.n	8011d4a <es_wifi_setsockopt+0x1a>
 8011d3e:	2a04      	cmp	r2, #4
 8011d40:	d028      	beq.n	8011d94 <es_wifi_setsockopt+0x64>
 8011d42:	2a0e      	cmp	r2, #14
 8011d44:	d138      	bne.n	8011db8 <es_wifi_setsockopt+0x88>
        }
        break;

      case  NET_SO_TLS_CERT_PROF:
        NET_DBG_ERROR("Ignore this option because it embedded inside Inventek Wifi module and can not be changed\n");
        ret =  NET_OK;
 8011d46:	2000      	movs	r0, #0
 8011d48:	4770      	bx	lr
    switch (optname)
 8011d4a:	f241 0106 	movw	r1, #4102	; 0x1006
 8011d4e:	428a      	cmp	r2, r1
 8011d50:	d135      	bne.n	8011dbe <es_wifi_setsockopt+0x8e>
        WifiChannel[sock].recvtimeout = * optint32;
 8011d52:	681a      	ldr	r2, [r3, #0]
 8011d54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011d58:	4b1e      	ldr	r3, [pc, #120]	; (8011dd4 <es_wifi_setsockopt+0xa4>)
 8011d5a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011d5e:	6182      	str	r2, [r0, #24]
        ret = NET_OK;
 8011d60:	2000      	movs	r0, #0
        break;
 8011d62:	4770      	bx	lr
        WifiChannel[sock].sendtimeout = *optint32;
 8011d64:	6819      	ldr	r1, [r3, #0]
 8011d66:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011d6a:	4a1a      	ldr	r2, [pc, #104]	; (8011dd4 <es_wifi_setsockopt+0xa4>)
 8011d6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011d70:	6159      	str	r1, [r3, #20]
        if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_UDP)
 8011d72:	789b      	ldrb	r3, [r3, #2]
 8011d74:	2b11      	cmp	r3, #17
 8011d76:	d001      	beq.n	8011d7c <es_wifi_setsockopt+0x4c>
        ret = NET_OK;
 8011d78:	2000      	movs	r0, #0
 8011d7a:	4770      	bx	lr
          if (WifiChannel[sock].sendtimeout > NET_UDP_MAX_SEND_BLOCK_TO)
 8011d7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011d80:	dd20      	ble.n	8011dc4 <es_wifi_setsockopt+0x94>
            WifiChannel[sock].sendtimeout = NET_UDP_MAX_SEND_BLOCK_TO;
 8011d82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011d86:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8011d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d8e:	6143      	str	r3, [r0, #20]
        ret = NET_OK;
 8011d90:	2000      	movs	r0, #0
 8011d92:	4770      	bx	lr
        if (sizeof(bool) != optlen)
 8011d94:	9a00      	ldr	r2, [sp, #0]
 8011d96:	2a01      	cmp	r2, #1
 8011d98:	d116      	bne.n	8011dc8 <es_wifi_setsockopt+0x98>
          if (*optbool == false)
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	b9bb      	cbnz	r3, 8011dce <es_wifi_setsockopt+0x9e>
            WifiChannel[sock].sendtimeout = 1;
 8011d9e:	4b0d      	ldr	r3, [pc, #52]	; (8011dd4 <es_wifi_setsockopt+0xa4>)
 8011da0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8011da4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011da8:	2101      	movs	r1, #1
 8011daa:	6151      	str	r1, [r2, #20]
            WifiChannel[sock].recvtimeout = 1;
 8011dac:	6191      	str	r1, [r2, #24]
          ret =  NET_OK;
 8011dae:	2000      	movs	r0, #0
 8011db0:	4770      	bx	lr
    ret = NET_ERROR_INVALID_SOCKET;
 8011db2:	f06f 0005 	mvn.w	r0, #5
 8011db6:	4770      	bx	lr
    switch (optname)
 8011db8:	f06f 0003 	mvn.w	r0, #3
 8011dbc:	4770      	bx	lr
 8011dbe:	f06f 0003 	mvn.w	r0, #3
 8011dc2:	4770      	bx	lr
        ret = NET_OK;
 8011dc4:	2000      	movs	r0, #0
 8011dc6:	4770      	bx	lr
          ret = NET_ERROR_PARAMETER;
 8011dc8:	f06f 0003 	mvn.w	r0, #3
 8011dcc:	4770      	bx	lr
          ret =  NET_OK;
 8011dce:	2000      	movs	r0, #0
      default :
        break;
    }
  }
  return ret;
}
 8011dd0:	4770      	bx	lr
 8011dd2:	bf00      	nop
 8011dd4:	2400f394 	.word	0x2400f394

08011dd8 <es_wifi_getsockopt>:
  (void) optname;
  (void) optvalue;
  (void) optlen;

  return NET_ERROR_UNSUPPORTED;
}
 8011dd8:	f06f 0002 	mvn.w	r0, #2
 8011ddc:	4770      	bx	lr

08011dde <es_wifi_scan>:
{
  (void) mode;
  (void) pnetif;
  (void) ssid;
  return 0;
}
 8011dde:	2000      	movs	r0, #0
 8011de0:	4770      	bx	lr

08011de2 <es_wifi_if_deinit>:
{
 8011de2:	b538      	push	{r3, r4, r5, lr}
 8011de4:	4604      	mov	r4, r0
  NET_FREE(pnetif->pdrv->extension.wifi);
 8011de6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011dea:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8011dec:	f011 f962 	bl	80230b4 <free>
  pnetif->pdrv->extension.wifi = NULL;
 8011df0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8011df4:	2500      	movs	r5, #0
 8011df6:	675d      	str	r5, [r3, #116]	; 0x74
  NET_FREE(pnetif->pdrv);
 8011df8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8011dfc:	f011 f95a 	bl	80230b4 <free>
  pnetif->pdrv = NULL;
 8011e00:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
}
 8011e04:	4628      	mov	r0, r5
 8011e06:	bd38      	pop	{r3, r4, r5, pc}

08011e08 <es_wifi_if_init>:
{
 8011e08:	b570      	push	{r4, r5, r6, lr}
 8011e0a:	4605      	mov	r5, r0
  net_if_drv_t *p = NET_MALLOC(sizeof(net_if_drv_t));
 8011e0c:	2084      	movs	r0, #132	; 0x84
 8011e0e:	f011 f949 	bl	80230a4 <malloc>
  if (p != NULL)
 8011e12:	2800      	cmp	r0, #0
 8011e14:	d04c      	beq.n	8011eb0 <es_wifi_if_init+0xa8>
 8011e16:	4604      	mov	r4, r0
    p->if_class = NET_INTERFACE_CLASS_WIFI;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	7003      	strb	r3, [r0, #0]
    p->if_init = es_wifi_if_init;
 8011e1c:	4b26      	ldr	r3, [pc, #152]	; (8011eb8 <es_wifi_if_init+0xb0>)
 8011e1e:	6043      	str	r3, [r0, #4]
    p->if_deinit = es_wifi_if_deinit;
 8011e20:	4b26      	ldr	r3, [pc, #152]	; (8011ebc <es_wifi_if_init+0xb4>)
 8011e22:	6083      	str	r3, [r0, #8]
    p->if_start = es_wifi_if_start;
 8011e24:	4b26      	ldr	r3, [pc, #152]	; (8011ec0 <es_wifi_if_init+0xb8>)
 8011e26:	60c3      	str	r3, [r0, #12]
    p->if_stop = es_wifi_if_stop;
 8011e28:	4b26      	ldr	r3, [pc, #152]	; (8011ec4 <es_wifi_if_init+0xbc>)
 8011e2a:	6103      	str	r3, [r0, #16]
    p->if_connect = es_wifi_if_connect;
 8011e2c:	4b26      	ldr	r3, [pc, #152]	; (8011ec8 <es_wifi_if_init+0xc0>)
 8011e2e:	6183      	str	r3, [r0, #24]
    p->if_disconnect = es_wifi_if_disconnect;
 8011e30:	4b26      	ldr	r3, [pc, #152]	; (8011ecc <es_wifi_if_init+0xc4>)
 8011e32:	61c3      	str	r3, [r0, #28]
    p->psocket = es_wifi_socket;
 8011e34:	4b26      	ldr	r3, [pc, #152]	; (8011ed0 <es_wifi_if_init+0xc8>)
 8011e36:	6303      	str	r3, [r0, #48]	; 0x30
    p->pbind = es_wifi_bind;
 8011e38:	4b26      	ldr	r3, [pc, #152]	; (8011ed4 <es_wifi_if_init+0xcc>)
 8011e3a:	6343      	str	r3, [r0, #52]	; 0x34
    p->plisten = es_wifi_listen;
 8011e3c:	4b26      	ldr	r3, [pc, #152]	; (8011ed8 <es_wifi_if_init+0xd0>)
 8011e3e:	6383      	str	r3, [r0, #56]	; 0x38
    p->paccept = es_wifi_accept;
 8011e40:	4b26      	ldr	r3, [pc, #152]	; (8011edc <es_wifi_if_init+0xd4>)
 8011e42:	63c3      	str	r3, [r0, #60]	; 0x3c
    p->pconnect = es_wifi_connect;
 8011e44:	4b26      	ldr	r3, [pc, #152]	; (8011ee0 <es_wifi_if_init+0xd8>)
 8011e46:	6403      	str	r3, [r0, #64]	; 0x40
    p->psend = es_wifi_send;
 8011e48:	4b26      	ldr	r3, [pc, #152]	; (8011ee4 <es_wifi_if_init+0xdc>)
 8011e4a:	6443      	str	r3, [r0, #68]	; 0x44
    p->precv = es_wifi_recv;
 8011e4c:	4b26      	ldr	r3, [pc, #152]	; (8011ee8 <es_wifi_if_init+0xe0>)
 8011e4e:	6483      	str	r3, [r0, #72]	; 0x48
    p->psendto = es_wifi_sendto;
 8011e50:	4b26      	ldr	r3, [pc, #152]	; (8011eec <es_wifi_if_init+0xe4>)
 8011e52:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->precvfrom = es_wifi_recvfrom;
 8011e54:	4b26      	ldr	r3, [pc, #152]	; (8011ef0 <es_wifi_if_init+0xe8>)
 8011e56:	6503      	str	r3, [r0, #80]	; 0x50
    p->psetsockopt = es_wifi_setsockopt;
 8011e58:	4b26      	ldr	r3, [pc, #152]	; (8011ef4 <es_wifi_if_init+0xec>)
 8011e5a:	6543      	str	r3, [r0, #84]	; 0x54
    p->pgetsockopt = es_wifi_getsockopt;
 8011e5c:	4b26      	ldr	r3, [pc, #152]	; (8011ef8 <es_wifi_if_init+0xf0>)
 8011e5e:	6583      	str	r3, [r0, #88]	; 0x58
    p->pgetsockname = es_wifi_getsockname;
 8011e60:	4b26      	ldr	r3, [pc, #152]	; (8011efc <es_wifi_if_init+0xf4>)
 8011e62:	65c3      	str	r3, [r0, #92]	; 0x5c
    p->pgetpeername = es_wifi_getpeername;
 8011e64:	4b26      	ldr	r3, [pc, #152]	; (8011f00 <es_wifi_if_init+0xf8>)
 8011e66:	6603      	str	r3, [r0, #96]	; 0x60
    p->pclose = es_wifi_close;
 8011e68:	4b26      	ldr	r3, [pc, #152]	; (8011f04 <es_wifi_if_init+0xfc>)
 8011e6a:	6643      	str	r3, [r0, #100]	; 0x64
    p->pshutdown = es_wifi_shutdown;
 8011e6c:	4b26      	ldr	r3, [pc, #152]	; (8011f08 <es_wifi_if_init+0x100>)
 8011e6e:	6683      	str	r3, [r0, #104]	; 0x68
    p->pgethostbyname = es_wifi_gethostbyname;
 8011e70:	4b26      	ldr	r3, [pc, #152]	; (8011f0c <es_wifi_if_init+0x104>)
 8011e72:	66c3      	str	r3, [r0, #108]	; 0x6c
    p->pping = es_wifi_ping;
 8011e74:	4b26      	ldr	r3, [pc, #152]	; (8011f10 <es_wifi_if_init+0x108>)
 8011e76:	6703      	str	r3, [r0, #112]	; 0x70
    pextwifi = NET_MALLOC(sizeof(net_if_wifi_class_extension_t));
 8011e78:	2024      	movs	r0, #36	; 0x24
 8011e7a:	f011 f913 	bl	80230a4 <malloc>
    if (NULL == pextwifi)
 8011e7e:	4606      	mov	r6, r0
 8011e80:	b180      	cbz	r0, 8011ea4 <es_wifi_if_init+0x9c>
      (void) memset(pextwifi, 0, sizeof(net_if_wifi_class_extension_t));
 8011e82:	2224      	movs	r2, #36	; 0x24
 8011e84:	2100      	movs	r1, #0
 8011e86:	f011 f93b 	bl	8023100 <memset>
      pnetif->pdrv = p;
 8011e8a:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
      p->extension.wifi = pextwifi;
 8011e8e:	6766      	str	r6, [r4, #116]	; 0x74
      p->extension.wifi->scan = es_wifi_scan;
 8011e90:	4b20      	ldr	r3, [pc, #128]	; (8011f14 <es_wifi_if_init+0x10c>)
 8011e92:	6033      	str	r3, [r6, #0]
      p->extension.wifi->get_scan_results = es_wifi_get_scan_results;
 8011e94:	4b20      	ldr	r3, [pc, #128]	; (8011f18 <es_wifi_if_init+0x110>)
 8011e96:	6073      	str	r3, [r6, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8011e98:	2106      	movs	r1, #6
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	f7ff fe36 	bl	8011b0c <net_state_manage_event>
      ret = NET_OK;
 8011ea0:	2000      	movs	r0, #0
}
 8011ea2:	bd70      	pop	{r4, r5, r6, pc}
      NET_FREE(p);
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	f011 f905 	bl	80230b4 <free>
      ret = NET_ERROR_NO_MEMORY;
 8011eaa:	f06f 0007 	mvn.w	r0, #7
 8011eae:	e7f8      	b.n	8011ea2 <es_wifi_if_init+0x9a>
    ret = NET_ERROR_NO_MEMORY;
 8011eb0:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8011eb4:	e7f5      	b.n	8011ea2 <es_wifi_if_init+0x9a>
 8011eb6:	bf00      	nop
 8011eb8:	08011e09 	.word	0x08011e09
 8011ebc:	08011de3 	.word	0x08011de3
 8011ec0:	080128bd 	.word	0x080128bd
 8011ec4:	08011f1d 	.word	0x08011f1d
 8011ec8:	08012acd 	.word	0x08012acd
 8011ecc:	0801289d 	.word	0x0801289d
 8011ed0:	08011b7d 	.word	0x08011b7d
 8011ed4:	08011c11 	.word	0x08011c11
 8011ed8:	08012841 	.word	0x08012841
 8011edc:	080127bd 	.word	0x080127bd
 8011ee0:	08012301 	.word	0x08012301
 8011ee4:	08012729 	.word	0x08012729
 8011ee8:	08012691 	.word	0x08012691
 8011eec:	080123b9 	.word	0x080123b9
 8011ef0:	0801253d 	.word	0x0801253d
 8011ef4:	08011d31 	.word	0x08011d31
 8011ef8:	08011dd9 	.word	0x08011dd9
 8011efc:	08012215 	.word	0x08012215
 8011f00:	08012171 	.word	0x08012171
 8011f04:	0801207d 	.word	0x0801207d
 8011f08:	08011c85 	.word	0x08011c85
 8011f0c:	0801202d 	.word	0x0801202d
 8011f10:	08011ff5 	.word	0x08011ff5
 8011f14:	08011ddf 	.word	0x08011ddf
 8011f18:	08011f29 	.word	0x08011f29

08011f1c <es_wifi_if_stop>:
{
 8011f1c:	b508      	push	{r3, lr}
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_INITIALIZED);
 8011f1e:	2106      	movs	r1, #6
 8011f20:	f7ff fdf4 	bl	8011b0c <net_state_manage_event>
}
 8011f24:	2000      	movs	r0, #0
 8011f26:	bd08      	pop	{r3, pc}

08011f28 <es_wifi_get_scan_results>:

static  int32_t es_wifi_get_scan_results(net_if_handle_t *pnetif, net_wifi_scan_results_t *results, uint8_t number)
{
 8011f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f2c:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 8011f30:	4688      	mov	r8, r1
 8011f32:	4614      	mov	r4, r2
  int32_t ret;
  ES_WIFI_APs_t APs;
  ES_WIFI_AP_t *AP = &APs.AP[0];

  if (ES_WIFI_STATUS_OK == ES_WIFI_ListAccessPoints(castcontext(pnetif->pdrv->context), &APs))
 8011f34:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8011f38:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011f3a:	f7ff fe1d 	bl	8011b78 <castcontext>
 8011f3e:	a901      	add	r1, sp, #4
 8011f40:	f7f5 fe0c 	bl	8007b5c <ES_WIFI_ListAccessPoints>
 8011f44:	2800      	cmp	r0, #0
 8011f46:	d14f      	bne.n	8011fe8 <es_wifi_get_scan_results+0xc0>
  {
    if (APs.nbr > number)
 8011f48:	f89d 3374 	ldrb.w	r3, [sp, #884]	; 0x374
 8011f4c:	42a3      	cmp	r3, r4
 8011f4e:	d901      	bls.n	8011f54 <es_wifi_get_scan_results+0x2c>
    {
      APs.nbr = number;
 8011f50:	f88d 4374 	strb.w	r4, [sp, #884]	; 0x374
{
 8011f54:	2600      	movs	r6, #0
 8011f56:	ac01      	add	r4, sp, #4
 8011f58:	e03e      	b.n	8011fd8 <es_wifi_get_scan_results+0xb0>
    }
    for (uint32_t i = 0; i < APs.nbr ; i++)
    {
      (void) memset((void *) &results[i], 0, sizeof(net_wifi_scan_bss_t));
 8011f5a:	2234      	movs	r2, #52	; 0x34
 8011f5c:	fb02 f706 	mul.w	r7, r2, r6
 8011f60:	eb08 0507 	add.w	r5, r8, r7
 8011f64:	2100      	movs	r1, #0
 8011f66:	4628      	mov	r0, r5
 8011f68:	f011 f8ca 	bl	8023100 <memset>
      (void) memcpy(results[i].ssid.value, AP->SSID, NET_WIFI_MAX_SSID_SIZE);
 8011f6c:	6821      	ldr	r1, [r4, #0]
 8011f6e:	6860      	ldr	r0, [r4, #4]
 8011f70:	68a2      	ldr	r2, [r4, #8]
 8011f72:	68e3      	ldr	r3, [r4, #12]
 8011f74:	f8c5 1001 	str.w	r1, [r5, #1]
 8011f78:	f8c5 0005 	str.w	r0, [r5, #5]
 8011f7c:	f8c5 2009 	str.w	r2, [r5, #9]
 8011f80:	f8c5 300d 	str.w	r3, [r5, #13]
 8011f84:	6921      	ldr	r1, [r4, #16]
 8011f86:	6960      	ldr	r0, [r4, #20]
 8011f88:	69a2      	ldr	r2, [r4, #24]
 8011f8a:	69e3      	ldr	r3, [r4, #28]
 8011f8c:	f8c5 1011 	str.w	r1, [r5, #17]
 8011f90:	f8c5 0015 	str.w	r0, [r5, #21]
 8011f94:	f8c5 2019 	str.w	r2, [r5, #25]
 8011f98:	f8c5 301d 	str.w	r3, [r5, #29]
      results[i].ssid.length = (uint8_t) strlen((char_t *) AP->SSID);
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	f7ee f9b1 	bl	8000304 <strlen>
 8011fa2:	f808 0007 	strb.w	r0, [r8, r7]
      results[i].security = conv_to_net_security(AP->Security);
 8011fa6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8011faa:	f7ff fea5 	bl	8011cf8 <conv_to_net_security>
 8011fae:	62a8      	str	r0, [r5, #40]	; 0x28
      (void)  memcpy(&results[i].bssid, AP->MAC, NET_WIFI_MAC_ADDRESS_SIZE);
 8011fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fb2:	f8c5 3021 	str.w	r3, [r5, #33]	; 0x21
 8011fb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8011fb8:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
      results[i].rssi = (int8_t)AP->RSSI;
 8011fbc:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
 8011fc0:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      results[i].channel = AP->Channel;
 8011fc4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8011fc8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
      (void) memcpy(results[i].country, ".CN", 4);  /* NOT SUPPORT for MX_WIFI */
 8011fcc:	4b08      	ldr	r3, [pc, #32]	; (8011ff0 <es_wifi_get_scan_results+0xc8>)
 8011fce:	6818      	ldr	r0, [r3, #0]
 8011fd0:	f8c5 002d 	str.w	r0, [r5, #45]	; 0x2d
      AP++;
 8011fd4:	342c      	adds	r4, #44	; 0x2c
    for (uint32_t i = 0; i < APs.nbr ; i++)
 8011fd6:	3601      	adds	r6, #1
 8011fd8:	f89d 0374 	ldrb.w	r0, [sp, #884]	; 0x374
 8011fdc:	42b0      	cmp	r0, r6
 8011fde:	d8bc      	bhi.n	8011f5a <es_wifi_get_scan_results+0x32>
  else
  {
    ret = NET_ERROR_NO_CONNECTION;
  }
  return ret;
}
 8011fe0:	f50d 7d5e 	add.w	sp, sp, #888	; 0x378
 8011fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_NO_CONNECTION;
 8011fe8:	f06f 0004 	mvn.w	r0, #4
  return ret;
 8011fec:	e7f8      	b.n	8011fe0 <es_wifi_get_scan_results+0xb8>
 8011fee:	bf00      	nop
 8011ff0:	080263b8 	.word	0x080263b8

08011ff4 <es_wifi_ping>:
{
 8011ff4:	b530      	push	{r4, r5, lr}
 8011ff6:	b085      	sub	sp, #20
 8011ff8:	4684      	mov	ip, r0
 8011ffa:	4614      	mov	r4, r2
 8011ffc:	461d      	mov	r5, r3
  (void) memcpy(ipaddr, &addr->sa_data[2], 6);
 8011ffe:	6848      	ldr	r0, [r1, #4]
 8012000:	9002      	str	r0, [sp, #8]
 8012002:	890b      	ldrh	r3, [r1, #8]
 8012004:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (ES_WIFI_STATUS_OK == ES_WIFI_Ping(castcontext(pnetif->pdrv->context), ipaddr, (uint16_t) count, (uint16_t) delay,
 8012008:	f8dc 30ec 	ldr.w	r3, [ip, #236]	; 0xec
 801200c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801200e:	f7ff fdb3 	bl	8011b78 <castcontext>
 8012012:	9b08      	ldr	r3, [sp, #32]
 8012014:	9300      	str	r3, [sp, #0]
 8012016:	b2ab      	uxth	r3, r5
 8012018:	b2a2      	uxth	r2, r4
 801201a:	a902      	add	r1, sp, #8
 801201c:	f7f5 ff48 	bl	8007eb0 <ES_WIFI_Ping>
 8012020:	b908      	cbnz	r0, 8012026 <es_wifi_ping+0x32>
}
 8012022:	b005      	add	sp, #20
 8012024:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_NO_CONNECTION;
 8012026:	f06f 0004 	mvn.w	r0, #4
  return ret;
 801202a:	e7fa      	b.n	8012022 <es_wifi_ping+0x2e>

0801202c <es_wifi_gethostbyname>:
  if (addr->sa_len < sizeof(sockaddr_in_t))
 801202c:	780b      	ldrb	r3, [r1, #0]
 801202e:	2b0f      	cmp	r3, #15
 8012030:	d91e      	bls.n	8012070 <es_wifi_gethostbyname+0x44>
{
 8012032:	b530      	push	{r4, r5, lr}
 8012034:	b083      	sub	sp, #12
 8012036:	460c      	mov	r4, r1
 8012038:	4615      	mov	r5, r2
    if (ES_WIFI_STATUS_OK == ES_WIFI_DNS_LookUp(castcontext(pnetif->pdrv->context), (char_t *)name, ipaddr))
 801203a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 801203e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012040:	f7ff fd9a 	bl	8011b78 <castcontext>
 8012044:	466a      	mov	r2, sp
 8012046:	4629      	mov	r1, r5
 8012048:	f7f5 ff8e 	bl	8007f68 <ES_WIFI_DNS_LookUp>
 801204c:	b998      	cbnz	r0, 8012076 <es_wifi_gethostbyname+0x4a>
      uint8_t len = addr->sa_len;
 801204e:	7825      	ldrb	r5, [r4, #0]
      sockaddr_in_t *saddr = cast2sockaddr_in(addr);
 8012050:	4620      	mov	r0, r4
 8012052:	f7ff fd92 	bl	8011b7a <cast2sockaddr_in>
 8012056:	4604      	mov	r4, r0
      (void)  memset(saddr, 0, len);
 8012058:	462a      	mov	r2, r5
 801205a:	2100      	movs	r1, #0
 801205c:	f011 f850 	bl	8023100 <memset>
      saddr->sin_len = len;
 8012060:	7025      	strb	r5, [r4, #0]
      saddr->sin_family = NET_AF_INET;
 8012062:	2302      	movs	r3, #2
 8012064:	7063      	strb	r3, [r4, #1]
      (void) memcpy(&(saddr->sin_addr), ipaddr, 4);
 8012066:	9b00      	ldr	r3, [sp, #0]
 8012068:	6063      	str	r3, [r4, #4]
      ret = NET_OK;
 801206a:	2000      	movs	r0, #0
}
 801206c:	b003      	add	sp, #12
 801206e:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_PARAMETER;
 8012070:	f06f 0003 	mvn.w	r0, #3
}
 8012074:	4770      	bx	lr
      ret = NET_ERROR_DNS_FAILURE;
 8012076:	f06f 0009 	mvn.w	r0, #9
  return ret;
 801207a:	e7f7      	b.n	801206c <es_wifi_gethostbyname+0x40>

0801207c <es_wifi_close>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 801207c:	2803      	cmp	r0, #3
 801207e:	d871      	bhi.n	8012164 <es_wifi_close+0xe8>
{
 8012080:	b510      	push	{r4, lr}
 8012082:	b086      	sub	sp, #24
 8012084:	4604      	mov	r4, r0
    if ((WifiChannel [sock].status & WIFI_STARTED_SERVER_SOCKET) != 0U)
 8012086:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801208a:	4a38      	ldr	r2, [pc, #224]	; (801216c <es_wifi_close+0xf0>)
 801208c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012090:	785b      	ldrb	r3, [r3, #1]
 8012092:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012096:	d042      	beq.n	801211e <es_wifi_close+0xa2>
      if (isaclone)
 8012098:	b301      	cbz	r1, 80120dc <es_wifi_close+0x60>
        if (ES_WIFI_CloseServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 801209a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801209e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80120a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80120a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80120aa:	f7ff fd65 	bl	8011b78 <castcontext>
 80120ae:	4621      	mov	r1, r4
 80120b0:	f7f6 f952 	bl	8008358 <ES_WIFI_CloseServerConnection>
 80120b4:	b940      	cbnz	r0, 80120c8 <es_wifi_close+0x4c>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 80120b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80120ba:	4b2c      	ldr	r3, [pc, #176]	; (801216c <es_wifi_close+0xf0>)
 80120bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80120c0:	2000      	movs	r0, #0
 80120c2:	7060      	strb	r0, [r4, #1]
}
 80120c4:	b006      	add	sp, #24
 80120c6:	bd10      	pop	{r4, pc}
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 80120c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80120cc:	4b27      	ldr	r3, [pc, #156]	; (801216c <es_wifi_close+0xf0>)
 80120ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80120d2:	2200      	movs	r2, #0
 80120d4:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 80120d6:	f06f 0012 	mvn.w	r0, #18
 80120da:	e7f3      	b.n	80120c4 <es_wifi_close+0x48>
        if (ES_WIFI_StopServerSingleConn(castcontext(WifiChannel[sock].pnetif->pdrv->context), sock)
 80120dc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80120e0:	4a22      	ldr	r2, [pc, #136]	; (801216c <es_wifi_close+0xf0>)
 80120e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80120e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80120ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80120ee:	f7ff fd43 	bl	8011b78 <castcontext>
 80120f2:	4621      	mov	r1, r4
 80120f4:	f7f6 f954 	bl	80083a0 <ES_WIFI_StopServerSingleConn>
 80120f8:	b938      	cbnz	r0, 801210a <es_wifi_close+0x8e>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 80120fa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80120fe:	4b1b      	ldr	r3, [pc, #108]	; (801216c <es_wifi_close+0xf0>)
 8012100:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012104:	2000      	movs	r0, #0
 8012106:	7060      	strb	r0, [r4, #1]
          ret = NET_OK;
 8012108:	e7dc      	b.n	80120c4 <es_wifi_close+0x48>
          WifiChannel[sock].status = WIFI_FREE_SOCKET;
 801210a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801210e:	4b17      	ldr	r3, [pc, #92]	; (801216c <es_wifi_close+0xf0>)
 8012110:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012114:	2200      	movs	r2, #0
 8012116:	705a      	strb	r2, [r3, #1]
          ret = NET_ERROR_SOCKET_FAILURE;
 8012118:	f06f 0012 	mvn.w	r0, #18
 801211c:	e7d2      	b.n	80120c4 <es_wifi_close+0x48>
      conn.Number = (uint8_t) sock;
 801211e:	f88d 0006 	strb.w	r0, [sp, #6]
      if (ES_WIFI_StopClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn)
 8012122:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012126:	4a11      	ldr	r2, [pc, #68]	; (801216c <es_wifi_close+0xf0>)
 8012128:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801212e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012132:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012134:	f7ff fd20 	bl	8011b78 <castcontext>
 8012138:	a901      	add	r1, sp, #4
 801213a:	f7f5 ffd1 	bl	80080e0 <ES_WIFI_StopClientConnection>
 801213e:	b148      	cbz	r0, 8012154 <es_wifi_close+0xd8>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8012140:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012144:	4b09      	ldr	r3, [pc, #36]	; (801216c <es_wifi_close+0xf0>)
 8012146:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801214a:	2300      	movs	r3, #0
 801214c:	7063      	strb	r3, [r4, #1]
        ret = NET_ERROR_SOCKET_FAILURE;
 801214e:	f06f 0012 	mvn.w	r0, #18
 8012152:	e7b7      	b.n	80120c4 <es_wifi_close+0x48>
        WifiChannel[sock].status = WIFI_FREE_SOCKET;
 8012154:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012158:	4b04      	ldr	r3, [pc, #16]	; (801216c <es_wifi_close+0xf0>)
 801215a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801215e:	2000      	movs	r0, #0
 8012160:	7060      	strb	r0, [r4, #1]
        ret = NET_OK;
 8012162:	e7af      	b.n	80120c4 <es_wifi_close+0x48>
    ret = NET_ERROR_INVALID_SOCKET;
 8012164:	f06f 0005 	mvn.w	r0, #5
}
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop
 801216c:	2400f394 	.word	0x2400f394

08012170 <es_wifi_getpeername>:
  if (*namelen < sizeof(sockaddr_in_t))
 8012170:	6813      	ldr	r3, [r2, #0]
 8012172:	2b0f      	cmp	r3, #15
 8012174:	d943      	bls.n	80121fe <es_wifi_getpeername+0x8e>
{
 8012176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801217a:	b086      	sub	sp, #24
 801217c:	4604      	mov	r4, r0
 801217e:	460e      	mov	r6, r1
 8012180:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= (int32_t) ESWIFI_MAX_CHANNEL_NBR))
 8012182:	2803      	cmp	r0, #3
 8012184:	d83e      	bhi.n	8012204 <es_wifi_getpeername+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_PeerInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012186:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8012210 <es_wifi_getpeername+0xa0>
 801218a:	0087      	lsls	r7, r0, #2
 801218c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012190:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8012194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012196:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801219a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801219c:	f7ff fcec 	bl	8011b78 <castcontext>
 80121a0:	443c      	add	r4, r7
 80121a2:	f10d 0312 	add.w	r3, sp, #18
 80121a6:	aa05      	add	r2, sp, #20
 80121a8:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 80121ac:	f7f6 fb24 	bl	80087f8 <ES_WIFI_PeerInfo>
 80121b0:	bb58      	cbnz	r0, 801220a <es_wifi_getpeername+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 80121b2:	2400      	movs	r4, #0
 80121b4:	9400      	str	r4, [sp, #0]
 80121b6:	9401      	str	r4, [sp, #4]
 80121b8:	9402      	str	r4, [sp, #8]
 80121ba:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 80121bc:	2302      	movs	r3, #2
 80121be:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 80121c2:	9b05      	ldr	r3, [sp, #20]
 80121c4:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 80121c6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80121ca:	ba5b      	rev16	r3, r3
 80121cc:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 80121d0:	2710      	movs	r7, #16
 80121d2:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 80121d6:	682a      	ldr	r2, [r5, #0]
 80121d8:	4621      	mov	r1, r4
 80121da:	4630      	mov	r0, r6
 80121dc:	f010 ff90 	bl	8023100 <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 80121e0:	f89d 2000 	ldrb.w	r2, [sp]
 80121e4:	682b      	ldr	r3, [r5, #0]
 80121e6:	429a      	cmp	r2, r3
 80121e8:	bf28      	it	cs
 80121ea:	461a      	movcs	r2, r3
 80121ec:	4669      	mov	r1, sp
 80121ee:	4630      	mov	r0, r6
 80121f0:	f010 ff78 	bl	80230e4 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 80121f4:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 80121f6:	4620      	mov	r0, r4
}
 80121f8:	b006      	add	sp, #24
 80121fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 80121fe:	f06f 0003 	mvn.w	r0, #3
}
 8012202:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 8012204:	f06f 0005 	mvn.w	r0, #5
 8012208:	e7f6      	b.n	80121f8 <es_wifi_getpeername+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 801220a:	f06f 0004 	mvn.w	r0, #4
  return ret;
 801220e:	e7f3      	b.n	80121f8 <es_wifi_getpeername+0x88>
 8012210:	2400f394 	.word	0x2400f394

08012214 <es_wifi_getsockname>:
  if (*namelen < sizeof(sockaddr_in_t))
 8012214:	6813      	ldr	r3, [r2, #0]
 8012216:	2b0f      	cmp	r3, #15
 8012218:	d943      	bls.n	80122a2 <es_wifi_getsockname+0x8e>
{
 801221a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801221e:	b086      	sub	sp, #24
 8012220:	4604      	mov	r4, r0
 8012222:	460e      	mov	r6, r1
 8012224:	4615      	mov	r5, r2
    if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012226:	2803      	cmp	r0, #3
 8012228:	d83e      	bhi.n	80122a8 <es_wifi_getsockname+0x94>
      if (ES_WIFI_STATUS_OK == ES_WIFI_SockInfo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801222a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80122b4 <es_wifi_getsockname+0xa0>
 801222e:	0087      	lsls	r7, r0, #2
 8012230:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012234:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8012238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801223a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801223e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012240:	f7ff fc9a 	bl	8011b78 <castcontext>
 8012244:	443c      	add	r4, r7
 8012246:	f10d 0312 	add.w	r3, sp, #18
 801224a:	aa05      	add	r2, sp, #20
 801224c:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
 8012250:	f7f6 fa98 	bl	8008784 <ES_WIFI_SockInfo>
 8012254:	bb58      	cbnz	r0, 80122ae <es_wifi_getsockname+0x9a>
        (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 8012256:	2400      	movs	r4, #0
 8012258:	9400      	str	r4, [sp, #0]
 801225a:	9401      	str	r4, [sp, #4]
 801225c:	9402      	str	r4, [sp, #8]
 801225e:	9403      	str	r4, [sp, #12]
        saddr.sin_family = NET_AF_INET;
 8012260:	2302      	movs	r3, #2
 8012262:	f88d 3001 	strb.w	r3, [sp, #1]
        saddr.sin_addr.s_addr = IPaddr;
 8012266:	9b05      	ldr	r3, [sp, #20]
 8012268:	9301      	str	r3, [sp, #4]
        saddr.sin_port = NET_HTONS(port);
 801226a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801226e:	ba5b      	rev16	r3, r3
 8012270:	f8ad 3002 	strh.w	r3, [sp, #2]
        saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 8012274:	2710      	movs	r7, #16
 8012276:	f88d 7000 	strb.w	r7, [sp]
        (void)  memset(name, 0, *namelen);
 801227a:	682a      	ldr	r2, [r5, #0]
 801227c:	4621      	mov	r1, r4
 801227e:	4630      	mov	r0, r6
 8012280:	f010 ff3e 	bl	8023100 <memset>
        (void)  memcpy(name, &saddr, MIN((*namelen), (saddr.sin_len)));
 8012284:	f89d 2000 	ldrb.w	r2, [sp]
 8012288:	682b      	ldr	r3, [r5, #0]
 801228a:	429a      	cmp	r2, r3
 801228c:	bf28      	it	cs
 801228e:	461a      	movcs	r2, r3
 8012290:	4669      	mov	r1, sp
 8012292:	4630      	mov	r0, r6
 8012294:	f010 ff26 	bl	80230e4 <memcpy>
        *namelen = sizeof(sockaddr_in_t);
 8012298:	602f      	str	r7, [r5, #0]
        ret = NET_OK;
 801229a:	4620      	mov	r0, r4
}
 801229c:	b006      	add	sp, #24
 801229e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = NET_ERROR_PARAMETER;
 80122a2:	f06f 0003 	mvn.w	r0, #3
}
 80122a6:	4770      	bx	lr
      ret = NET_ERROR_INVALID_SOCKET;
 80122a8:	f06f 0005 	mvn.w	r0, #5
 80122ac:	e7f6      	b.n	801229c <es_wifi_getsockname+0x88>
        ret = NET_ERROR_NO_CONNECTION;
 80122ae:	f06f 0004 	mvn.w	r0, #4
  return ret;
 80122b2:	e7f3      	b.n	801229c <es_wifi_getsockname+0x88>
 80122b4:	2400f394 	.word	0x2400f394

080122b8 <check_connection_lost>:
{
 80122b8:	b510      	push	{r4, lr}
 80122ba:	4604      	mov	r4, r0
  if (n <= 0)
 80122bc:	2900      	cmp	r1, #0
 80122be:	dd04      	ble.n	80122ca <check_connection_lost+0x12>
    if (NET_STATE_CONNECTION_LOST == pnetif->state)
 80122c0:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 80122c4:	2b08      	cmp	r3, #8
 80122c6:	d014      	beq.n	80122f2 <check_connection_lost+0x3a>
}
 80122c8:	bd10      	pop	{r4, pc}
    if (NET_STATE_CONNECTED == pnetif->state)
 80122ca:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
 80122ce:	2b05      	cmp	r3, #5
 80122d0:	d1fa      	bne.n	80122c8 <check_connection_lost+0x10>
      if (ES_WIFI_IsConnected(castcontext(pnetif->pdrv->context)) == 0u)
 80122d2:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80122d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80122d8:	f7ff fc4e 	bl	8011b78 <castcontext>
 80122dc:	f7f5 fd16 	bl	8007d0c <ES_WIFI_IsConnected>
 80122e0:	2800      	cmp	r0, #0
 80122e2:	d1f1      	bne.n	80122c8 <check_connection_lost+0x10>
        (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTION_LOST, NULL);
 80122e4:	2300      	movs	r3, #0
 80122e6:	2208      	movs	r2, #8
 80122e8:	4619      	mov	r1, r3
 80122ea:	4620      	mov	r0, r4
 80122ec:	f7ff fb40 	bl	8011970 <net_if_notify>
 80122f0:	e7ea      	b.n	80122c8 <check_connection_lost+0x10>
      (void) net_if_notify(pnetif, NET_EVENT_STATE_CHANGE, (uint32_t) NET_STATE_CONNECTED, NULL);
 80122f2:	2300      	movs	r3, #0
 80122f4:	2205      	movs	r2, #5
 80122f6:	4619      	mov	r1, r3
 80122f8:	f7ff fb3a 	bl	8011970 <net_if_notify>
}
 80122fc:	e7e4      	b.n	80122c8 <check_connection_lost+0x10>
	...

08012300 <es_wifi_connect>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012300:	2803      	cmp	r0, #3
 8012302:	d854      	bhi.n	80123ae <es_wifi_connect+0xae>
{
 8012304:	b510      	push	{r4, lr}
 8012306:	b086      	sub	sp, #24
 8012308:	4604      	mov	r4, r0
    if (addrlen == sizeof(sockaddr_in_t))
 801230a:	2a10      	cmp	r2, #16
 801230c:	d003      	beq.n	8012316 <es_wifi_connect+0x16>
      ret = NET_ERROR_PARAMETER;
 801230e:	f06f 0003 	mvn.w	r0, #3
}
 8012312:	b006      	add	sp, #24
 8012314:	bd10      	pop	{r4, pc}
      dest = cast2sockaddr_in(addr);
 8012316:	4608      	mov	r0, r1
 8012318:	f7ff fc2f 	bl	8011b7a <cast2sockaddr_in>
      conn.Number = (uint8_t) sock;
 801231c:	f88d 4006 	strb.w	r4, [sp, #6]
      conn.LocalPort = WifiChannel[sock].localport;
 8012320:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012324:	4a23      	ldr	r2, [pc, #140]	; (80123b4 <es_wifi_connect+0xb4>)
 8012326:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801232a:	889a      	ldrh	r2, [r3, #4]
 801232c:	f8ad 200a 	strh.w	r2, [sp, #10]
      conn.RemotePort = NET_NTOHS(dest->sin_port);
 8012330:	8842      	ldrh	r2, [r0, #2]
 8012332:	ba52      	rev16	r2, r2
 8012334:	f8ad 2008 	strh.w	r2, [sp, #8]
      NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 8012338:	79c2      	ldrb	r2, [r0, #7]
 801233a:	f88d 200f 	strb.w	r2, [sp, #15]
 801233e:	7982      	ldrb	r2, [r0, #6]
 8012340:	f88d 200e 	strb.w	r2, [sp, #14]
 8012344:	7942      	ldrb	r2, [r0, #5]
 8012346:	f88d 200d 	strb.w	r2, [sp, #13]
 801234a:	7902      	ldrb	r2, [r0, #4]
 801234c:	f88d 200c 	strb.w	r2, [sp, #12]
      switch (WifiChannel[sock].protocol)
 8012350:	789b      	ldrb	r3, [r3, #2]
 8012352:	2b11      	cmp	r3, #17
 8012354:	d022      	beq.n	801239c <es_wifi_connect+0x9c>
 8012356:	2b24      	cmp	r3, #36	; 0x24
 8012358:	d023      	beq.n	80123a2 <es_wifi_connect+0xa2>
 801235a:	2b06      	cmp	r3, #6
 801235c:	d002      	beq.n	8012364 <es_wifi_connect+0x64>
          ret = NET_ERROR_PARAMETER;
 801235e:	f06f 0003 	mvn.w	r0, #3
 8012362:	e7d6      	b.n	8012312 <es_wifi_connect+0x12>
          conn.Type = ES_WIFI_TCP_CONNECTION;
 8012364:	2300      	movs	r3, #0
 8012366:	f88d 3004 	strb.w	r3, [sp, #4]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 801236a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801236e:	4a11      	ldr	r2, [pc, #68]	; (80123b4 <es_wifi_connect+0xb4>)
 8012370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012376:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801237a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801237c:	f7ff fbfc 	bl	8011b78 <castcontext>
 8012380:	a901      	add	r1, sp, #4
 8012382:	f7f5 fe15 	bl	8007fb0 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 8012386:	b978      	cbnz	r0, 80123a8 <es_wifi_connect+0xa8>
          WifiChannel[sock].status |= WIFI_CONNECTED_SOCKET_RW;
 8012388:	4b0a      	ldr	r3, [pc, #40]	; (80123b4 <es_wifi_connect+0xb4>)
 801238a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801238e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012392:	7853      	ldrb	r3, [r2, #1]
 8012394:	f043 031c 	orr.w	r3, r3, #28
 8012398:	7053      	strb	r3, [r2, #1]
 801239a:	e7ba      	b.n	8012312 <es_wifi_connect+0x12>
      switch (WifiChannel[sock].protocol)
 801239c:	f06f 0002 	mvn.w	r0, #2
 80123a0:	e7b7      	b.n	8012312 <es_wifi_connect+0x12>
 80123a2:	f06f 0002 	mvn.w	r0, #2
 80123a6:	e7b4      	b.n	8012312 <es_wifi_connect+0x12>
          ret = NET_ERROR_SOCKET_FAILURE;
 80123a8:	f06f 0012 	mvn.w	r0, #18
 80123ac:	e7b1      	b.n	8012312 <es_wifi_connect+0x12>
    ret = NET_ERROR_INVALID_SOCKET;
 80123ae:	f06f 0005 	mvn.w	r0, #5
}
 80123b2:	4770      	bx	lr
 80123b4:	2400f394 	.word	0x2400f394

080123b8 <es_wifi_sendto>:
{
 80123b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123bc:	b08a      	sub	sp, #40	; 0x28
 80123be:	9f10      	ldr	r7, [sp, #64]	; 0x40
  if ((flags != 0) || (to->sa_family != (uint8_t) NET_AF_INET))
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	f040 80aa 	bne.w	801251a <es_wifi_sendto+0x162>
 80123c6:	4604      	mov	r4, r0
 80123c8:	460e      	mov	r6, r1
 80123ca:	4615      	mov	r5, r2
 80123cc:	787b      	ldrb	r3, [r7, #1]
 80123ce:	2b02      	cmp	r3, #2
 80123d0:	f040 80a6 	bne.w	8012520 <es_wifi_sendto+0x168>
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80123d4:	2803      	cmp	r0, #3
 80123d6:	f200 80a6 	bhi.w	8012526 <es_wifi_sendto+0x16e>
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 80123da:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80123de:	4a56      	ldr	r2, [pc, #344]	; (8012538 <es_wifi_sendto+0x180>)
 80123e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80123e4:	789b      	ldrb	r3, [r3, #2]
 80123e6:	2b11      	cmp	r3, #17
 80123e8:	f040 80a0 	bne.w	801252c <es_wifi_sendto+0x174>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 80123ec:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80123f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80123f4:	785b      	ldrb	r3, [r3, #1]
 80123f6:	f013 0f04 	tst.w	r3, #4
 80123fa:	f000 809a 	beq.w	8012532 <es_wifi_sendto+0x17a>
    if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 80123fe:	f013 0f20 	tst.w	r3, #32
 8012402:	d102      	bne.n	801240a <es_wifi_sendto+0x52>
      if (tolen == sizeof(sockaddr_in_t))
 8012404:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012406:	2b10      	cmp	r3, #16
 8012408:	d04d      	beq.n	80124a6 <es_wifi_sendto+0xee>
      if (len > ES_WIFI_PAYLOAD_SIZE)
 801240a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 801240e:	dd01      	ble.n	8012414 <es_wifi_sendto+0x5c>
        len = ES_WIFI_PAYLOAD_SIZE;
 8012410:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
      sockaddr_in_t *saddr = cast2sockaddr_in(to);
 8012414:	4638      	mov	r0, r7
 8012416:	f7ff fbb0 	bl	8011b7a <cast2sockaddr_in>
      remoteaddr = NET_NTOHL(saddr->sin_addr.s_addr);
 801241a:	6843      	ldr	r3, [r0, #4]
 801241c:	0a1a      	lsrs	r2, r3, #8
 801241e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8012422:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8012426:	0219      	lsls	r1, r3, #8
 8012428:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 801242c:	430a      	orrs	r2, r1
 801242e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
      uint32_t IPaddr = NET_NTOHL(remoteaddr);
 8012432:	b2db      	uxtb	r3, r3
 8012434:	0a11      	lsrs	r1, r2, #8
 8012436:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801243a:	430b      	orrs	r3, r1
 801243c:	0211      	lsls	r1, r2, #8
 801243e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8012442:	430b      	orrs	r3, r1
 8012444:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012448:	9305      	str	r3, [sp, #20]
      uint16_t Port = NET_NTOHS(saddr->sin_port);
 801244a:	8847      	ldrh	r7, [r0, #2]
 801244c:	ba7f      	rev16	r7, r7
 801244e:	b2bf      	uxth	r7, r7
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012450:	eb04 0884 	add.w	r8, r4, r4, lsl #2
 8012454:	4b38      	ldr	r3, [pc, #224]	; (8012538 <es_wifi_sendto+0x180>)
 8012456:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801245a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801245e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012462:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012464:	f7ff fb88 	bl	8011b78 <castcontext>
                                                  (uint32_t) WifiChannel[sock].sendtimeout,
 8012468:	f8d8 3014 	ldr.w	r3, [r8, #20]
      if (ES_WIFI_STATUS_OK == ES_WIFI_SendDataTo(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801246c:	9703      	str	r7, [sp, #12]
 801246e:	aa05      	add	r2, sp, #20
 8012470:	9202      	str	r2, [sp, #8]
 8012472:	9301      	str	r3, [sp, #4]
 8012474:	f10d 0312 	add.w	r3, sp, #18
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	b2ab      	uxth	r3, r5
 801247c:	4632      	mov	r2, r6
 801247e:	b2e1      	uxtb	r1, r4
 8012480:	f7f6 f80a 	bl	8008498 <ES_WIFI_SendDataTo>
 8012484:	2800      	cmp	r0, #0
 8012486:	d145      	bne.n	8012514 <es_wifi_sendto+0x15c>
        ret = (int32_t) SentDatalen;
 8012488:	f8bd 5012 	ldrh.w	r5, [sp, #18]
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 801248c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012490:	4829      	ldr	r0, [pc, #164]	; (8012538 <es_wifi_sendto+0x180>)
 8012492:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8012496:	4629      	mov	r1, r5
 8012498:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801249a:	f7ff ff0d 	bl	80122b8 <check_connection_lost>
}
 801249e:	4628      	mov	r0, r5
 80124a0:	b00a      	add	sp, #40	; 0x28
 80124a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dest = cast2sockaddr_in(to);
 80124a6:	4638      	mov	r0, r7
 80124a8:	f7ff fb67 	bl	8011b7a <cast2sockaddr_in>
        conn.Number = (uint8_t) sock;
 80124ac:	f88d 4016 	strb.w	r4, [sp, #22]
        conn.LocalPort = WifiChannel[sock].localport;
 80124b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80124b4:	4a20      	ldr	r2, [pc, #128]	; (8012538 <es_wifi_sendto+0x180>)
 80124b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80124ba:	889a      	ldrh	r2, [r3, #4]
 80124bc:	f8ad 201a 	strh.w	r2, [sp, #26]
        conn.RemotePort = NET_NTOHS(dest->sin_port);
 80124c0:	8842      	ldrh	r2, [r0, #2]
 80124c2:	ba52      	rev16	r2, r2
 80124c4:	f8ad 2018 	strh.w	r2, [sp, #24]
        NET_NTOAR((dest->sin_addr.s_addr), (conn.RemoteIP));
 80124c8:	79c2      	ldrb	r2, [r0, #7]
 80124ca:	f88d 201f 	strb.w	r2, [sp, #31]
 80124ce:	7982      	ldrb	r2, [r0, #6]
 80124d0:	f88d 201e 	strb.w	r2, [sp, #30]
 80124d4:	7942      	ldrb	r2, [r0, #5]
 80124d6:	f88d 201d 	strb.w	r2, [sp, #29]
 80124da:	7902      	ldrb	r2, [r0, #4]
 80124dc:	f88d 201c 	strb.w	r2, [sp, #28]
        conn.Type = ES_WIFI_UDP_CONNECTION;
 80124e0:	2201      	movs	r2, #1
 80124e2:	f88d 2014 	strb.w	r2, [sp, #20]
            ES_WIFI_StartClientConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), &conn))
 80124e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80124ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80124ee:	f7ff fb43 	bl	8011b78 <castcontext>
 80124f2:	a905      	add	r1, sp, #20
 80124f4:	f7f5 fd5c 	bl	8007fb0 <ES_WIFI_StartClientConnection>
        if (ES_WIFI_STATUS_OK ==
 80124f8:	b948      	cbnz	r0, 801250e <es_wifi_sendto+0x156>
          WifiChannel[sock].status |= WIFI_STARTED_CLIENT_SOCKET;
 80124fa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80124fe:	4a0e      	ldr	r2, [pc, #56]	; (8012538 <es_wifi_sendto+0x180>)
 8012500:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012504:	785a      	ldrb	r2, [r3, #1]
 8012506:	f042 0220 	orr.w	r2, r2, #32
 801250a:	705a      	strb	r2, [r3, #1]
    if (ret == NET_OK)
 801250c:	e77d      	b.n	801240a <es_wifi_sendto+0x52>
          ret = NET_ERROR_SOCKET_FAILURE;
 801250e:	f06f 0512 	mvn.w	r5, #18
 8012512:	e7c4      	b.n	801249e <es_wifi_sendto+0xe6>
        ret = NET_ERROR_SOCKET_FAILURE;
 8012514:	f06f 0512 	mvn.w	r5, #18
 8012518:	e7b8      	b.n	801248c <es_wifi_sendto+0xd4>
    ret = NET_ERROR_UNSUPPORTED;
 801251a:	f06f 0502 	mvn.w	r5, #2
 801251e:	e7be      	b.n	801249e <es_wifi_sendto+0xe6>
 8012520:	f06f 0502 	mvn.w	r5, #2
 8012524:	e7bb      	b.n	801249e <es_wifi_sendto+0xe6>
    ret = NET_ERROR_INVALID_SOCKET;
 8012526:	f06f 0505 	mvn.w	r5, #5
 801252a:	e7b8      	b.n	801249e <es_wifi_sendto+0xe6>
    ret = NET_ERROR_SOCKET_FAILURE;
 801252c:	f06f 0512 	mvn.w	r5, #18
 8012530:	e7b5      	b.n	801249e <es_wifi_sendto+0xe6>
    ret =  NET_ERROR_SOCKET_FAILURE;
 8012532:	f06f 0512 	mvn.w	r5, #18
  return ret;
 8012536:	e7b2      	b.n	801249e <es_wifi_sendto+0xe6>
 8012538:	2400f394 	.word	0x2400f394

0801253c <es_wifi_recvfrom>:
{
 801253c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012540:	b08a      	sub	sp, #40	; 0x28
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012542:	2803      	cmp	r0, #3
 8012544:	f200 8097 	bhi.w	8012676 <es_wifi_recvfrom+0x13a>
 8012548:	4604      	mov	r4, r0
 801254a:	4688      	mov	r8, r1
 801254c:	4615      	mov	r5, r2
  else if (WifiChannel[sock].protocol != (uint8_t) NET_IPPROTO_UDP)
 801254e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012552:	4f4d      	ldr	r7, [pc, #308]	; (8012688 <es_wifi_recvfrom+0x14c>)
 8012554:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8012558:	7882      	ldrb	r2, [r0, #2]
 801255a:	2a11      	cmp	r2, #17
 801255c:	f040 808e 	bne.w	801267c <es_wifi_recvfrom+0x140>
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 8012560:	7842      	ldrb	r2, [r0, #1]
 8012562:	f012 0f08 	tst.w	r2, #8
 8012566:	f000 808c 	beq.w	8012682 <es_wifi_recvfrom+0x146>
    if (((uint8_t) flags & (uint8_t) NET_MSG_DONTWAIT) == 0U)
 801256a:	f013 0f08 	tst.w	r3, #8
 801256e:	d107      	bne.n	8012580 <es_wifi_recvfrom+0x44>
      timeout = (uint32_t) WifiChannel[sock].recvtimeout;
 8012570:	6986      	ldr	r6, [r0, #24]
    if (timeout > (uint32_t) ES_WIFI_MAX_SO_TIMEOUT)
 8012572:	f247 5330 	movw	r3, #30000	; 0x7530
 8012576:	429e      	cmp	r6, r3
 8012578:	d903      	bls.n	8012582 <es_wifi_recvfrom+0x46>
      ret = NET_ERROR_UNSUPPORTED;
 801257a:	f06f 0702 	mvn.w	r7, #2
  return ret;
 801257e:	e030      	b.n	80125e2 <es_wifi_recvfrom+0xa6>
  uint32_t timeout = 0;
 8012580:	2600      	movs	r6, #0
      if ((WifiChannel [sock].status & WIFI_STARTED_CLIENT_SOCKET) == 0U)
 8012582:	f012 0f20 	tst.w	r2, #32
 8012586:	d030      	beq.n	80125ea <es_wifi_recvfrom+0xae>
        uint32_t IPaddr = 0;
 8012588:	2300      	movs	r3, #0
 801258a:	9305      	str	r3, [sp, #20]
        uint16_t port = 0;
 801258c:	f8ad 3012 	strh.w	r3, [sp, #18]
        if (len > ES_WIFI_PAYLOAD_SIZE)
 8012590:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8012594:	dd01      	ble.n	801259a <es_wifi_recvfrom+0x5e>
          len = ES_WIFI_PAYLOAD_SIZE;
 8012596:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
        if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveDataFrom(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801259a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801259e:	4a3a      	ldr	r2, [pc, #232]	; (8012688 <es_wifi_recvfrom+0x14c>)
 80125a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80125a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80125aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80125ac:	f7ff fae4 	bl	8011b78 <castcontext>
 80125b0:	f10d 0312 	add.w	r3, sp, #18
 80125b4:	9303      	str	r3, [sp, #12]
 80125b6:	ab05      	add	r3, sp, #20
 80125b8:	9302      	str	r3, [sp, #8]
 80125ba:	9601      	str	r6, [sp, #4]
 80125bc:	ab04      	add	r3, sp, #16
 80125be:	9300      	str	r3, [sp, #0]
 80125c0:	b2ab      	uxth	r3, r5
 80125c2:	4642      	mov	r2, r8
 80125c4:	b2e1      	uxtb	r1, r4
 80125c6:	f7f6 f857 	bl	8008678 <ES_WIFI_ReceiveDataFrom>
 80125ca:	b368      	cbz	r0, 8012628 <es_wifi_recvfrom+0xec>
          ret = NET_ERROR_SOCKET_FAILURE;
 80125cc:	f06f 0712 	mvn.w	r7, #18
      check_connection_lost(WifiChannel[sock].pnetif, ret);
 80125d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80125d4:	482c      	ldr	r0, [pc, #176]	; (8012688 <es_wifi_recvfrom+0x14c>)
 80125d6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80125da:	4639      	mov	r1, r7
 80125dc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80125de:	f7ff fe6b 	bl	80122b8 <check_connection_lost>
}
 80125e2:	4638      	mov	r0, r7
 80125e4:	b00a      	add	sp, #40	; 0x28
 80125e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (void) NET_ATON((const char_t *)"224.0.0.251", &ipaddr);
 80125ea:	a905      	add	r1, sp, #20
 80125ec:	4827      	ldr	r0, [pc, #156]	; (801268c <es_wifi_recvfrom+0x150>)
 80125ee:	f7fe ffbc 	bl	801156a <net_aton>
        NET_IPADDR_PORT_TO_SOCKADDR(&saddr, &ipaddr, 5353);
 80125f2:	2310      	movs	r3, #16
 80125f4:	f88d 3018 	strb.w	r3, [sp, #24]
 80125f8:	2202      	movs	r2, #2
 80125fa:	f88d 2019 	strb.w	r2, [sp, #25]
 80125fe:	f64e 1214 	movw	r2, #59668	; 0xe914
 8012602:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012606:	9a05      	ldr	r2, [sp, #20]
 8012608:	9207      	str	r2, [sp, #28]
 801260a:	2100      	movs	r1, #0
 801260c:	9108      	str	r1, [sp, #32]
 801260e:	9109      	str	r1, [sp, #36]	; 0x24
        ret = es_wifi_sendto(sock, NULL, 0, flags, &saddr, sizeof(sockaddr_in_t));
 8012610:	9301      	str	r3, [sp, #4]
 8012612:	ab06      	add	r3, sp, #24
 8012614:	9300      	str	r3, [sp, #0]
 8012616:	460b      	mov	r3, r1
 8012618:	460a      	mov	r2, r1
 801261a:	4620      	mov	r0, r4
 801261c:	f7ff fecc 	bl	80123b8 <es_wifi_sendto>
      if (ret == NET_OK)
 8012620:	4607      	mov	r7, r0
 8012622:	2800      	cmp	r0, #0
 8012624:	d1d4      	bne.n	80125d0 <es_wifi_recvfrom+0x94>
 8012626:	e7af      	b.n	8012588 <es_wifi_recvfrom+0x4c>
          (void) memset(&saddr, 0, sizeof(sockaddr_in_t));
 8012628:	2100      	movs	r1, #0
 801262a:	9106      	str	r1, [sp, #24]
 801262c:	9107      	str	r1, [sp, #28]
 801262e:	9108      	str	r1, [sp, #32]
 8012630:	9109      	str	r1, [sp, #36]	; 0x24
          saddr.sin_family = NET_AF_INET;
 8012632:	2302      	movs	r3, #2
 8012634:	f88d 3019 	strb.w	r3, [sp, #25]
          saddr.sin_addr.s_addr = IPaddr;
 8012638:	9b05      	ldr	r3, [sp, #20]
 801263a:	9307      	str	r3, [sp, #28]
          saddr.sin_port = NET_HTONS(port);
 801263c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012640:	ba5b      	rev16	r3, r3
 8012642:	f8ad 301a 	strh.w	r3, [sp, #26]
          saddr.sin_len = (uint8_t) sizeof(sockaddr_in_t);
 8012646:	2510      	movs	r5, #16
 8012648:	f88d 5018 	strb.w	r5, [sp, #24]
          (void)  memset(from, 0, *fromlen);
 801264c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801264e:	681a      	ldr	r2, [r3, #0]
 8012650:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012652:	f010 fd55 	bl	8023100 <memset>
          (void)  memcpy(from, &saddr, MIN((*fromlen), (saddr.sin_len)));
 8012656:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801265a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	429a      	cmp	r2, r3
 8012660:	bf28      	it	cs
 8012662:	461a      	movcs	r2, r3
 8012664:	a906      	add	r1, sp, #24
 8012666:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012668:	f010 fd3c 	bl	80230e4 <memcpy>
          *fromlen = sizeof(sockaddr_in_t);
 801266c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801266e:	601d      	str	r5, [r3, #0]
          ret = (int32_t) ReceivedDatalen;
 8012670:	f8bd 7010 	ldrh.w	r7, [sp, #16]
 8012674:	e7ac      	b.n	80125d0 <es_wifi_recvfrom+0x94>
    ret = NET_ERROR_INVALID_SOCKET;
 8012676:	f06f 0705 	mvn.w	r7, #5
 801267a:	e7b2      	b.n	80125e2 <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 801267c:	f06f 0712 	mvn.w	r7, #18
 8012680:	e7af      	b.n	80125e2 <es_wifi_recvfrom+0xa6>
    ret = NET_ERROR_SOCKET_FAILURE;
 8012682:	f06f 0712 	mvn.w	r7, #18
 8012686:	e7ac      	b.n	80125e2 <es_wifi_recvfrom+0xa6>
 8012688:	2400f394 	.word	0x2400f394
 801268c:	080263bc 	.word	0x080263bc

08012690 <es_wifi_recv>:
{
 8012690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012692:	b085      	sub	sp, #20
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012694:	2803      	cmp	r0, #3
 8012696:	d83f      	bhi.n	8012718 <es_wifi_recv+0x88>
 8012698:	4604      	mov	r4, r0
 801269a:	460e      	mov	r6, r1
 801269c:	4615      	mov	r5, r2
  else if ((WifiChannel [sock].status & WIFI_RECV_OK) == 0U)
 801269e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80126a2:	4920      	ldr	r1, [pc, #128]	; (8012724 <es_wifi_recv+0x94>)
 80126a4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80126a8:	7852      	ldrb	r2, [r2, #1]
 80126aa:	f012 0f08 	tst.w	r2, #8
 80126ae:	d036      	beq.n	801271e <es_wifi_recv+0x8e>
    if (flags == (int32_t) NET_MSG_DONTWAIT)
 80126b0:	2b08      	cmp	r3, #8
 80126b2:	d02c      	beq.n	801270e <es_wifi_recv+0x7e>
      timeout = (uint16_t) WifiChannel[sock].recvtimeout;
 80126b4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80126b8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80126bc:	8b1f      	ldrh	r7, [r3, #24]
    if (len > ES_WIFI_PAYLOAD_SIZE)
 80126be:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80126c2:	dd01      	ble.n	80126c8 <es_wifi_recv+0x38>
      len = ES_WIFI_PAYLOAD_SIZE;
 80126c4:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_ReceiveData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 80126c8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80126cc:	4a15      	ldr	r2, [pc, #84]	; (8012724 <es_wifi_recv+0x94>)
 80126ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80126d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80126d8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80126da:	f7ff fa4d 	bl	8011b78 <castcontext>
 80126de:	9701      	str	r7, [sp, #4]
 80126e0:	f10d 030e 	add.w	r3, sp, #14
 80126e4:	9300      	str	r3, [sp, #0]
 80126e6:	b2ab      	uxth	r3, r5
 80126e8:	4632      	mov	r2, r6
 80126ea:	b2e1      	uxtb	r1, r4
 80126ec:	f7f5 ff70 	bl	80085d0 <ES_WIFI_ReceiveData>
 80126f0:	b978      	cbnz	r0, 8012712 <es_wifi_recv+0x82>
      ret = (int32_t) ReceivedDatalen;
 80126f2:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 80126f6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80126fa:	480a      	ldr	r0, [pc, #40]	; (8012724 <es_wifi_recv+0x94>)
 80126fc:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8012700:	4629      	mov	r1, r5
 8012702:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012704:	f7ff fdd8 	bl	80122b8 <check_connection_lost>
}
 8012708:	4628      	mov	r0, r5
 801270a:	b005      	add	sp, #20
 801270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      timeout = 0;
 801270e:	2700      	movs	r7, #0
 8012710:	e7d5      	b.n	80126be <es_wifi_recv+0x2e>
      ret = NET_ERROR_SOCKET_FAILURE;
 8012712:	f06f 0512 	mvn.w	r5, #18
 8012716:	e7ee      	b.n	80126f6 <es_wifi_recv+0x66>
    ret = NET_ERROR_INVALID_SOCKET;
 8012718:	f06f 0505 	mvn.w	r5, #5
 801271c:	e7f4      	b.n	8012708 <es_wifi_recv+0x78>
    ret = NET_ERROR_SOCKET_FAILURE;
 801271e:	f06f 0512 	mvn.w	r5, #18
  return ret;
 8012722:	e7f1      	b.n	8012708 <es_wifi_recv+0x78>
 8012724:	2400f394 	.word	0x2400f394

08012728 <es_wifi_send>:
{
 8012728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801272a:	b085      	sub	sp, #20
  if (flags != 0)
 801272c:	2b00      	cmp	r3, #0
 801272e:	d139      	bne.n	80127a4 <es_wifi_send+0x7c>
 8012730:	4604      	mov	r4, r0
 8012732:	460f      	mov	r7, r1
 8012734:	4615      	mov	r5, r2
  else if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012736:	2803      	cmp	r0, #3
 8012738:	d837      	bhi.n	80127aa <es_wifi_send+0x82>
  else if ((WifiChannel [sock].status & WIFI_SEND_OK) == 0U)
 801273a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801273e:	4a1e      	ldr	r2, [pc, #120]	; (80127b8 <es_wifi_send+0x90>)
 8012740:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012744:	785b      	ldrb	r3, [r3, #1]
 8012746:	f013 0f04 	tst.w	r3, #4
 801274a:	d031      	beq.n	80127b0 <es_wifi_send+0x88>
    if (len > ES_WIFI_PAYLOAD_SIZE)
 801274c:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8012750:	dd01      	ble.n	8012756 <es_wifi_send+0x2e>
      len = ES_WIFI_PAYLOAD_SIZE;
 8012752:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 8012756:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 801275a:	4b17      	ldr	r3, [pc, #92]	; (80127b8 <es_wifi_send+0x90>)
 801275c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8012760:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012762:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012766:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012768:	f7ff fa06 	bl	8011b78 <castcontext>
                                              (uint32_t) WifiChannel[sock].sendtimeout))
 801276c:	6973      	ldr	r3, [r6, #20]
    if (ES_WIFI_STATUS_OK == ES_WIFI_SendData(castcontext(WifiChannel[sock].pnetif->pdrv->context),
 801276e:	9301      	str	r3, [sp, #4]
 8012770:	f10d 030e 	add.w	r3, sp, #14
 8012774:	9300      	str	r3, [sp, #0]
 8012776:	b2ab      	uxth	r3, r5
 8012778:	463a      	mov	r2, r7
 801277a:	b2e1      	uxtb	r1, r4
 801277c:	f7f5 fe32 	bl	80083e4 <ES_WIFI_SendData>
 8012780:	b968      	cbnz	r0, 801279e <es_wifi_send+0x76>
      ret = (int32_t) SentDatalen;
 8012782:	f8bd 500e 	ldrh.w	r5, [sp, #14]
    check_connection_lost(WifiChannel[sock].pnetif, ret);
 8012786:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801278a:	480b      	ldr	r0, [pc, #44]	; (80127b8 <es_wifi_send+0x90>)
 801278c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8012790:	4629      	mov	r1, r5
 8012792:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012794:	f7ff fd90 	bl	80122b8 <check_connection_lost>
}
 8012798:	4628      	mov	r0, r5
 801279a:	b005      	add	sp, #20
 801279c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = NET_ERROR_SOCKET_FAILURE;
 801279e:	f06f 0512 	mvn.w	r5, #18
 80127a2:	e7f0      	b.n	8012786 <es_wifi_send+0x5e>
    ret = NET_ERROR_UNSUPPORTED;
 80127a4:	f06f 0502 	mvn.w	r5, #2
 80127a8:	e7f6      	b.n	8012798 <es_wifi_send+0x70>
    ret = NET_ERROR_INVALID_SOCKET;
 80127aa:	f06f 0505 	mvn.w	r5, #5
 80127ae:	e7f3      	b.n	8012798 <es_wifi_send+0x70>
    ret = NET_ERROR_SOCKET_FAILURE;
 80127b0:	f06f 0512 	mvn.w	r5, #18
  return ret;
 80127b4:	e7f0      	b.n	8012798 <es_wifi_send+0x70>
 80127b6:	bf00      	nop
 80127b8:	2400f394 	.word	0x2400f394

080127bc <es_wifi_accept>:
{
 80127bc:	b530      	push	{r4, r5, lr}
 80127be:	b087      	sub	sp, #28
 80127c0:	4604      	mov	r4, r0
  sockaddr_in_t *addrin = cast2sockaddr_in(addr);
 80127c2:	4608      	mov	r0, r1
 80127c4:	f7ff f9d9 	bl	8011b7a <cast2sockaddr_in>
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 80127c8:	2c03      	cmp	r4, #3
 80127ca:	d834      	bhi.n	8012836 <es_wifi_accept+0x7a>
 80127cc:	4605      	mov	r5, r0
    conn.Number = (uint8_t) sock;
 80127ce:	f88d 4006 	strb.w	r4, [sp, #6]
    status = ES_WIFI_WaitServerConnection(castcontext(WifiChannel[sock].pnetif->pdrv->context), 0, &conn);
 80127d2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80127d6:	4a19      	ldr	r2, [pc, #100]	; (801283c <es_wifi_accept+0x80>)
 80127d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80127dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80127e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80127e4:	f7ff f9c8 	bl	8011b78 <castcontext>
 80127e8:	aa01      	add	r2, sp, #4
 80127ea:	2100      	movs	r1, #0
 80127ec:	f7f5 fd06 	bl	80081fc <ES_WIFI_WaitServerConnection>
    if (ES_WIFI_STATUS_OK == status)
 80127f0:	b9e8      	cbnz	r0, 801282e <es_wifi_accept+0x72>
      addrin->sin_port = NET_NTOHS(conn.RemotePort);
 80127f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80127f6:	ba5b      	rev16	r3, r3
 80127f8:	806b      	strh	r3, [r5, #2]
      addrin->sin_addr.s_addr = NET_ARTON(conn.RemoteIP);
 80127fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80127fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8012802:	041b      	lsls	r3, r3, #16
 8012804:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012808:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801280c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012810:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012814:	4313      	orrs	r3, r2
 8012816:	606b      	str	r3, [r5, #4]
      WifiChannel [sock].status |= WIFI_CONNECTED_SOCKET_RW | WIFI_STARTED_SERVER_SOCKET ;
 8012818:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801281c:	4b07      	ldr	r3, [pc, #28]	; (801283c <es_wifi_accept+0x80>)
 801281e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012822:	785a      	ldrb	r2, [r3, #1]
 8012824:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 8012828:	705a      	strb	r2, [r3, #1]
      ret = sock;
 801282a:	4620      	mov	r0, r4
 801282c:	e001      	b.n	8012832 <es_wifi_accept+0x76>
      ret =  NET_ERROR_SOCKET_FAILURE;
 801282e:	f06f 0012 	mvn.w	r0, #18
}
 8012832:	b007      	add	sp, #28
 8012834:	bd30      	pop	{r4, r5, pc}
    ret = NET_ERROR_INVALID_SOCKET;
 8012836:	f06f 0005 	mvn.w	r0, #5
  return ret;
 801283a:	e7fa      	b.n	8012832 <es_wifi_accept+0x76>
 801283c:	2400f394 	.word	0x2400f394

08012840 <es_wifi_listen>:
  if ((sock < 0) || (sock >= ESWIFI_MAX_CHANNEL_NBR))
 8012840:	2803      	cmp	r0, #3
 8012842:	d826      	bhi.n	8012892 <es_wifi_listen+0x52>
{
 8012844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012848:	b086      	sub	sp, #24
 801284a:	4604      	mov	r4, r0
 801284c:	460f      	mov	r7, r1
    ES_WIFIObject_t  *pEsWifiObj = castcontext(WifiChannel[sock].pnetif->pdrv->context);
 801284e:	4d12      	ldr	r5, [pc, #72]	; (8012898 <es_wifi_listen+0x58>)
 8012850:	eb00 0680 	add.w	r6, r0, r0, lsl #2
 8012854:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8012858:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801285a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801285e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012860:	f7ff f98a 	bl	8011b78 <castcontext>
    conn.Number = (uint8_t) sock;
 8012864:	f88d 4006 	strb.w	r4, [sp, #6]
    conn.LocalPort = WifiChannel[sock].localport;
 8012868:	88b3      	ldrh	r3, [r6, #4]
 801286a:	f8ad 300a 	strh.w	r3, [sp, #10]
    conn.Type = ES_WIFI_UDP_CONNECTION;
 801286e:	2301      	movs	r3, #1
 8012870:	f88d 3004 	strb.w	r3, [sp, #4]
    if (WifiChannel[sock].protocol == (uint8_t) NET_IPPROTO_TCP)
 8012874:	78b3      	ldrb	r3, [r6, #2]
 8012876:	2b06      	cmp	r3, #6
 8012878:	d007      	beq.n	801288a <es_wifi_listen+0x4a>
    conn.Backlog = (uint8_t) backlog;
 801287a:	f88d 7014 	strb.w	r7, [sp, #20]
    ret = (int32_t) ES_WIFI_StartServerSingleConn(pEsWifiObj, &conn);
 801287e:	a901      	add	r1, sp, #4
 8012880:	f7f5 fc50 	bl	8008124 <ES_WIFI_StartServerSingleConn>
}
 8012884:	b006      	add	sp, #24
 8012886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      conn.Type = ES_WIFI_TCP_CONNECTION;
 801288a:	2300      	movs	r3, #0
 801288c:	f88d 3004 	strb.w	r3, [sp, #4]
 8012890:	e7f3      	b.n	801287a <es_wifi_listen+0x3a>
    ret = NET_ERROR_INVALID_SOCKET;
 8012892:	f06f 0005 	mvn.w	r0, #5
}
 8012896:	4770      	bx	lr
 8012898:	2400f394 	.word	0x2400f394

0801289c <es_wifi_if_disconnect>:
{
 801289c:	b510      	push	{r4, lr}
 801289e:	4604      	mov	r4, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 80128a0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 80128a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80128a6:	f7ff f967 	bl	8011b78 <castcontext>
  (void) ES_WIFI_Disconnect(pEsWifiObj);
 80128aa:	f7f5 fa49 	bl	8007d40 <ES_WIFI_Disconnect>
  (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 80128ae:	2107      	movs	r1, #7
 80128b0:	4620      	mov	r0, r4
 80128b2:	f7ff f92b 	bl	8011b0c <net_state_manage_event>
}
 80128b6:	2000      	movs	r0, #0
 80128b8:	bd10      	pop	{r4, pc}
	...

080128bc <es_wifi_if_start>:
{
 80128bc:	b570      	push	{r4, r5, r6, lr}
 80128be:	4604      	mov	r4, r0
  if (wifi_probe(&pnetif->pdrv->context) == NET_OK)
 80128c0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80128c4:	302c      	adds	r0, #44	; 0x2c
 80128c6:	f7f0 fa45 	bl	8002d54 <wifi_probe>
 80128ca:	2800      	cmp	r0, #0
 80128cc:	d13f      	bne.n	801294e <es_wifi_if_start+0x92>
 80128ce:	4605      	mov	r5, r0
    pEsWifiObj = castcontext(pnetif->pdrv->context);
 80128d0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80128d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80128d6:	f7ff f94f 	bl	8011b78 <castcontext>
 80128da:	4606      	mov	r6, r0
    if (ES_WIFI_STATUS_OK != ES_WIFI_Init(pEsWifiObj))
 80128dc:	f7f5 f8fc 	bl	8007ad8 <ES_WIFI_Init>
 80128e0:	bbc0      	cbnz	r0, 8012954 <es_wifi_if_start+0x98>
      (void)strncpy(pnetif->DeviceName, (char_t *)pEsWifiObj->Product_Name, NET_DEVICE_NAME_LEN);
 80128e2:	2240      	movs	r2, #64	; 0x40
 80128e4:	f106 0168 	add.w	r1, r6, #104	; 0x68
 80128e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80128ec:	f011 f913 	bl	8023b16 <strncpy>
      (void) strncpy(pnetif->DeviceID, (char_t *)pEsWifiObj->Product_ID, NET_DEVICE_ID_LEN);
 80128f0:	2240      	movs	r2, #64	; 0x40
 80128f2:	4631      	mov	r1, r6
 80128f4:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80128f8:	f011 f90d 	bl	8023b16 <strncpy>
      (void) strncpy(pnetif->DeviceVer, (char_t *)pEsWifiObj->FW_Rev, NET_DEVICE_VER_LEN);
 80128fc:	2240      	movs	r2, #64	; 0x40
 80128fe:	f106 0120 	add.w	r1, r6, #32
 8012902:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 8012906:	f011 f906 	bl	8023b16 <strncpy>
      (void) ES_WIFI_GetMACAddress(pEsWifiObj, pnetif->macaddr.mac);
 801290a:	f104 01e4 	add.w	r1, r4, #228	; 0xe4
 801290e:	4630      	mov	r0, r6
 8012910:	f7f5 faac 	bl	8007e6c <ES_WIFI_GetMACAddress>
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 8012914:	462b      	mov	r3, r5
 8012916:	e012      	b.n	801293e <es_wifi_if_start+0x82>
        WifiChannel[i].status          = WIFI_FREE_SOCKET;
 8012918:	4910      	ldr	r1, [pc, #64]	; (801295c <es_wifi_if_start+0xa0>)
 801291a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 801291e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 8012922:	f04f 0c00 	mov.w	ip, #0
 8012926:	f882 c001 	strb.w	ip, [r2, #1]
        WifiChannel[i].Number          = (uint8_t) i;
 801292a:	f801 3030 	strb.w	r3, [r1, r0, lsl #3]
        WifiChannel[i].recvtimeout     = MIN((NET_SOCK_DEFAULT_RECEIVE_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 801292e:	f247 5130 	movw	r1, #30000	; 0x7530
 8012932:	6191      	str	r1, [r2, #24]
        WifiChannel[i].sendtimeout     = MIN((NET_SOCK_DEFAULT_SEND_TO), (ES_WIFI_MAX_SO_TIMEOUT));
 8012934:	6151      	str	r1, [r2, #20]
        WifiChannel[i].blocking        = 1; /* default blocking */
 8012936:	2101      	movs	r1, #1
 8012938:	6111      	str	r1, [r2, #16]
        WifiChannel[i].pnetif          = pnetif;
 801293a:	6254      	str	r4, [r2, #36]	; 0x24
      for (int32_t i = 0; i < ESWIFI_MAX_CHANNEL_NBR; i++)
 801293c:	440b      	add	r3, r1
 801293e:	2b03      	cmp	r3, #3
 8012940:	ddea      	ble.n	8012918 <es_wifi_if_start+0x5c>
      (void) net_state_manage_event(pnetif, NET_EVENT_INTERFACE_READY);
 8012942:	2107      	movs	r1, #7
 8012944:	4620      	mov	r0, r4
 8012946:	f7ff f8e1 	bl	8011b0c <net_state_manage_event>
}
 801294a:	4628      	mov	r0, r5
 801294c:	bd70      	pop	{r4, r5, r6, pc}
    ret = NET_ERROR_DEVICE_ERROR;
 801294e:	f06f 050c 	mvn.w	r5, #12
 8012952:	e7fa      	b.n	801294a <es_wifi_if_start+0x8e>
      ret = NET_ERROR_INTERFACE_FAILURE;
 8012954:	f06f 0510 	mvn.w	r5, #16
  return ret;
 8012958:	e7f7      	b.n	801294a <es_wifi_if_start+0x8e>
 801295a:	bf00      	nop
 801295c:	2400f394 	.word	0x2400f394

08012960 <es_wifi_driver>:
{
 8012960:	b508      	push	{r3, lr}
  return es_wifi_if_init(pnetif);
 8012962:	f7ff fa51 	bl	8011e08 <es_wifi_if_init>
}
 8012966:	bd08      	pop	{r3, pc}

08012968 <GetESWifiSecurityType>:
  if (security == NET_WIFI_SM_OPEN)
 8012968:	4603      	mov	r3, r0
 801296a:	b1e8      	cbz	r0, 80129a8 <GetESWifiSecurityType+0x40>
  ES_WIFI_SecurityType_t        ret = ES_WIFI_SEC_UNKNOWN;
 801296c:	20ff      	movs	r0, #255	; 0xff
  if (MATCH(security, NET_WEP_ENABLED))
 801296e:	f013 0f01 	tst.w	r3, #1
 8012972:	d000      	beq.n	8012976 <GetESWifiSecurityType+0xe>
    ret = ES_WIFI_SEC_WEP;
 8012974:	2001      	movs	r0, #1
  if (MATCH(security, NET_WIFI_SM_WPA_MIXED_PSK))
 8012976:	4a14      	ldr	r2, [pc, #80]	; (80129c8 <GetESWifiSecurityType+0x60>)
 8012978:	439a      	bics	r2, r3
 801297a:	d017      	beq.n	80129ac <GetESWifiSecurityType+0x44>
  if (MATCH(security, NET_WIFI_SM_WPA_TKIP_PSK))
 801297c:	4a13      	ldr	r2, [pc, #76]	; (80129cc <GetESWifiSecurityType+0x64>)
 801297e:	439a      	bics	r2, r3
 8012980:	d016      	beq.n	80129b0 <GetESWifiSecurityType+0x48>
  if (MATCH(security, NET_WIFI_SM_WPA_AES_PSK))
 8012982:	4a13      	ldr	r2, [pc, #76]	; (80129d0 <GetESWifiSecurityType+0x68>)
 8012984:	439a      	bics	r2, r3
 8012986:	d015      	beq.n	80129b4 <GetESWifiSecurityType+0x4c>
  if (MATCH(security, NET_WIFI_SM_WPA2_WPA_PSK))
 8012988:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801298c:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8012990:	d012      	beq.n	80129b8 <GetESWifiSecurityType+0x50>
  if (MATCH(security, NET_WIFI_SM_WPA2_TKIP_PSK))
 8012992:	4a10      	ldr	r2, [pc, #64]	; (80129d4 <GetESWifiSecurityType+0x6c>)
 8012994:	439a      	bics	r2, r3
 8012996:	d011      	beq.n	80129bc <GetESWifiSecurityType+0x54>
  if (MATCH(security, NET_WIFI_SM_WPA2_AES_PSK))
 8012998:	4a0f      	ldr	r2, [pc, #60]	; (80129d8 <GetESWifiSecurityType+0x70>)
 801299a:	439a      	bics	r2, r3
 801299c:	d010      	beq.n	80129c0 <GetESWifiSecurityType+0x58>
  if (MATCH(security, NET_WIFI_SM_WPA2_MIXED_PSK))
 801299e:	4a0f      	ldr	r2, [pc, #60]	; (80129dc <GetESWifiSecurityType+0x74>)
 80129a0:	ea32 0303 	bics.w	r3, r2, r3
 80129a4:	d00e      	beq.n	80129c4 <GetESWifiSecurityType+0x5c>
}
 80129a6:	4770      	bx	lr
    ret = ES_WIFI_SEC_OPEN;
 80129a8:	2000      	movs	r0, #0
 80129aa:	e7e0      	b.n	801296e <GetESWifiSecurityType+0x6>
    ret = ES_WIFI_SEC_WPA;
 80129ac:	2002      	movs	r0, #2
 80129ae:	e7e5      	b.n	801297c <GetESWifiSecurityType+0x14>
    ret = ES_WIFI_SEC_WPA;
 80129b0:	2002      	movs	r0, #2
 80129b2:	e7e6      	b.n	8012982 <GetESWifiSecurityType+0x1a>
    ret = ES_WIFI_SEC_WPA;
 80129b4:	2002      	movs	r0, #2
 80129b6:	e7e7      	b.n	8012988 <GetESWifiSecurityType+0x20>
    ret = ES_WIFI_SEC_WPA_WPA2;
 80129b8:	2004      	movs	r0, #4
 80129ba:	e7ea      	b.n	8012992 <GetESWifiSecurityType+0x2a>
    ret = ES_WIFI_SEC_WPA_WPA2;
 80129bc:	2004      	movs	r0, #4
 80129be:	e7eb      	b.n	8012998 <GetESWifiSecurityType+0x30>
    ret = ES_WIFI_SEC_WPA_WPA2;
 80129c0:	2004      	movs	r0, #4
 80129c2:	e7ec      	b.n	801299e <GetESWifiSecurityType+0x36>
    ret = ES_WIFI_SEC_WPA_WPA2;
 80129c4:	2004      	movs	r0, #4
 80129c6:	e7ee      	b.n	80129a6 <GetESWifiSecurityType+0x3e>
 80129c8:	00200006 	.word	0x00200006
 80129cc:	00200002 	.word	0x00200002
 80129d0:	00200004 	.word	0x00200004
 80129d4:	00400002 	.word	0x00400002
 80129d8:	00400004 	.word	0x00400004
 80129dc:	00400006 	.word	0x00400006

080129e0 <es_wifi_if_connect_sta>:
{
 80129e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129e2:	b083      	sub	sp, #12
 80129e4:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 80129e6:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
 80129ea:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80129ec:	f7ff f8c4 	bl	8011b78 <castcontext>
 80129f0:	4604      	mov	r4, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 80129f2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80129f4:	695b      	ldr	r3, [r3, #20]
  ret = ES_WIFI_Connect(pEsWifiObj, credentials->ssid, credentials->psk,
 80129f6:	681e      	ldr	r6, [r3, #0]
 80129f8:	685f      	ldr	r7, [r3, #4]
 80129fa:	6898      	ldr	r0, [r3, #8]
 80129fc:	f7ff ffb4 	bl	8012968 <GetESWifiSecurityType>
 8012a00:	4603      	mov	r3, r0
 8012a02:	463a      	mov	r2, r7
 8012a04:	4631      	mov	r1, r6
 8012a06:	4620      	mov	r0, r4
 8012a08:	f7f5 f936 	bl	8007c78 <ES_WIFI_Connect>
  if (ret == ES_WIFI_STATUS_OK)
 8012a0c:	4606      	mov	r6, r0
 8012a0e:	b138      	cbz	r0, 8012a20 <es_wifi_if_connect_sta+0x40>
  if (ES_WIFI_STATUS_OK == ret)
 8012a10:	b91e      	cbnz	r6, 8012a1a <es_wifi_if_connect_sta+0x3a>
    if (pEsWifiObj->NetSettings.IsConnected != 0U)
 8012a12:	f894 30d2 	ldrb.w	r3, [r4, #210]	; 0xd2
 8012a16:	b943      	cbnz	r3, 8012a2a <es_wifi_if_connect_sta+0x4a>
      ret = ES_WIFI_STATUS_ERROR;
 8012a18:	2602      	movs	r6, #2
}
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	b003      	add	sp, #12
 8012a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = ES_WIFI_GetNetworkSettings(pEsWifiObj);
 8012a20:	4620      	mov	r0, r4
 8012a22:	f7f5 f99d 	bl	8007d60 <ES_WIFI_GetNetworkSettings>
 8012a26:	4606      	mov	r6, r0
 8012a28:	e7f2      	b.n	8012a10 <es_wifi_if_connect_sta+0x30>
      (void) memcpy(addr, pEsWifiObj->NetSettings.IP_Addr, 4);
 8012a2a:	f8d4 20d5 	ldr.w	r2, [r4, #213]	; 0xd5
 8012a2e:	9201      	str	r2, [sp, #4]
      pnetif->ipaddr.addr = NET_ARTON(addr);
 8012a30:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 8012a34:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
 8012a38:	430b      	orrs	r3, r1
 8012a3a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8012a3e:	430b      	orrs	r3, r1
 8012a40:	b2d2      	uxtb	r2, r2
 8012a42:	4313      	orrs	r3, r2
 8012a44:	606b      	str	r3, [r5, #4]
      (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8012a46:	210a      	movs	r1, #10
 8012a48:	4628      	mov	r0, r5
 8012a4a:	f7ff f85f 	bl	8011b0c <net_state_manage_event>
      ret = ES_WIFI_STATUS_OK;
 8012a4e:	e7e4      	b.n	8012a1a <es_wifi_if_connect_sta+0x3a>

08012a50 <es_wifi_if_connect_ap>:
{
 8012a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a52:	b093      	sub	sp, #76	; 0x4c
 8012a54:	4605      	mov	r5, r0
  ES_WIFIObject_t  *pEsWifiObj = castcontext(pnetif->pdrv->context);
 8012a56:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
 8012a5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012a5c:	f7ff f88c 	bl	8011b78 <castcontext>
 8012a60:	4606      	mov	r6, r0
  const net_wifi_credentials_t *credentials =  pnetif->pdrv->extension.wifi->credentials;
 8012a62:	6f64      	ldr	r4, [r4, #116]	; 0x74
 8012a64:	6967      	ldr	r7, [r4, #20]
  (void) strncpy((char_t *) ApConfig.SSID, credentials->ssid, sizeof(ApConfig.SSID));
 8012a66:	2221      	movs	r2, #33	; 0x21
 8012a68:	6839      	ldr	r1, [r7, #0]
 8012a6a:	4668      	mov	r0, sp
 8012a6c:	f011 f853 	bl	8023b16 <strncpy>
  (void) strncpy((char_t *) ApConfig.Pass, credentials->psk, sizeof(ApConfig.SSID));
 8012a70:	2221      	movs	r2, #33	; 0x21
 8012a72:	6879      	ldr	r1, [r7, #4]
 8012a74:	eb0d 0002 	add.w	r0, sp, r2
 8012a78:	f011 f84d 	bl	8023b16 <strncpy>
  ApConfig.Security = GetESWifiSecurityType(credentials->security_mode);
 8012a7c:	68b8      	ldr	r0, [r7, #8]
 8012a7e:	f7ff ff73 	bl	8012968 <GetESWifiSecurityType>
 8012a82:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
  ApConfig.Channel = pnetif->pdrv->extension.wifi->access_channel;
 8012a86:	7e63      	ldrb	r3, [r4, #25]
 8012a88:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
  ApConfig.MaxConnections = pnetif->pdrv->extension.wifi->max_connections;
 8012a8c:	7ea3      	ldrb	r3, [r4, #26]
 8012a8e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (pnetif->pdrv->extension.wifi->AP_hidden)
 8012a92:	7ee3      	ldrb	r3, [r4, #27]
 8012a94:	b15b      	cbz	r3, 8012aae <es_wifi_if_connect_ap+0x5e>
    ApConfig.Hidden = 1;
 8012a96:	2301      	movs	r3, #1
 8012a98:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  ret = ES_WIFI_ActivateAP(pEsWifiObj, &ApConfig);
 8012a9c:	4669      	mov	r1, sp
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f7f5 f978 	bl	8007d94 <ES_WIFI_ActivateAP>
  if (ret == ES_WIFI_STATUS_OK)
 8012aa4:	4604      	mov	r4, r0
 8012aa6:	b130      	cbz	r0, 8012ab6 <es_wifi_if_connect_ap+0x66>
}
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	b013      	add	sp, #76	; 0x4c
 8012aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ApConfig.Hidden = 0;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 8012ab4:	e7f2      	b.n	8012a9c <es_wifi_if_connect_ap+0x4c>
    (void) NET_ATON("192.168.10.1", &(pnetif->ipaddr));
 8012ab6:	1d29      	adds	r1, r5, #4
 8012ab8:	4803      	ldr	r0, [pc, #12]	; (8012ac8 <es_wifi_if_connect_ap+0x78>)
 8012aba:	f7fe fd56 	bl	801156a <net_aton>
    (void) net_state_manage_event(pnetif, NET_EVENT_IPADDR);
 8012abe:	210a      	movs	r1, #10
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	f7ff f823 	bl	8011b0c <net_state_manage_event>
    ret = ES_WIFI_STATUS_OK;
 8012ac6:	e7ef      	b.n	8012aa8 <es_wifi_if_connect_ap+0x58>
 8012ac8:	080263c8 	.word	0x080263c8

08012acc <es_wifi_if_connect>:
{
 8012acc:	b508      	push	{r3, lr}
  if (pnetif->pdrv->extension.wifi->mode == NET_WIFI_MODE_STA)
 8012ace:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
 8012ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ad4:	7e1b      	ldrb	r3, [r3, #24]
 8012ad6:	b913      	cbnz	r3, 8012ade <es_wifi_if_connect+0x12>
    ret =  es_wifi_if_connect_sta(pnetif);
 8012ad8:	f7ff ff82 	bl	80129e0 <es_wifi_if_connect_sta>
}
 8012adc:	bd08      	pop	{r3, pc}
    ret =  es_wifi_if_connect_ap(pnetif);
 8012ade:	f7ff ffb7 	bl	8012a50 <es_wifi_if_connect_ap>
  return ret;
 8012ae2:	e7fb      	b.n	8012adc <es_wifi_if_connect+0x10>

08012ae4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012ae4:	8880      	ldrh	r0, [r0, #4]
 8012ae6:	4770      	bx	lr

08012ae8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012ae8:	b570      	push	{r4, r5, r6, lr}
 8012aea:	6803      	ldr	r3, [r0, #0]
 8012aec:	460c      	mov	r4, r1
 8012aee:	2100      	movs	r1, #0
 8012af0:	4605      	mov	r5, r0
 8012af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012af4:	4798      	blx	r3
 8012af6:	4606      	mov	r6, r0
 8012af8:	682b      	ldr	r3, [r5, #0]
 8012afa:	4628      	mov	r0, r5
 8012afc:	1ba4      	subs	r4, r4, r6
 8012afe:	6a1b      	ldr	r3, [r3, #32]
 8012b00:	b2a4      	uxth	r4, r4
 8012b02:	4798      	blx	r3
 8012b04:	fbb4 f0f0 	udiv	r0, r4, r0
 8012b08:	bd70      	pop	{r4, r5, r6, pc}

08012b0a <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	8083      	strh	r3, [r0, #4]
 8012b0e:	4770      	bx	lr

08012b10 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8012b10:	b510      	push	{r4, lr}
 8012b12:	6803      	ldr	r3, [r0, #0]
 8012b14:	4604      	mov	r4, r0
 8012b16:	8881      	ldrh	r1, [r0, #4]
 8012b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b1a:	4798      	blx	r3
 8012b1c:	88a3      	ldrh	r3, [r4, #4]
 8012b1e:	3301      	adds	r3, #1
 8012b20:	80a3      	strh	r3, [r4, #4]
 8012b22:	bd10      	pop	{r4, pc}

08012b24 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012b24:	6803      	ldr	r3, [r0, #0]
 8012b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b28:	4718      	bx	r3

08012b2a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012b2a:	4770      	bx	lr

08012b2c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012b2c:	4a02      	ldr	r2, [pc, #8]	; (8012b38 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012b2e:	6002      	str	r2, [r0, #0]
 8012b30:	2200      	movs	r2, #0
 8012b32:	8082      	strh	r2, [r0, #4]
 8012b34:	4770      	bx	lr
 8012b36:	bf00      	nop
 8012b38:	080263e0 	.word	0x080263e0

08012b3c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012b3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012b3e:	2000      	movs	r0, #0
 8012b40:	b12b      	cbz	r3, 8012b4e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012b42:	b920      	cbnz	r0, 8012b4e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012b44:	1a5a      	subs	r2, r3, r1
 8012b46:	699b      	ldr	r3, [r3, #24]
 8012b48:	4250      	negs	r0, r2
 8012b4a:	4150      	adcs	r0, r2
 8012b4c:	e7f8      	b.n	8012b40 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012b4e:	4770      	bx	lr

08012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012b50:	2300      	movs	r3, #0
 8012b52:	6148      	str	r0, [r1, #20]
 8012b54:	618b      	str	r3, [r1, #24]
 8012b56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012b58:	b913      	cbnz	r3, 8012b60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012b5a:	6281      	str	r1, [r0, #40]	; 0x28
 8012b5c:	4770      	bx	lr
 8012b5e:	4613      	mov	r3, r2
 8012b60:	699a      	ldr	r2, [r3, #24]
 8012b62:	2a00      	cmp	r2, #0
 8012b64:	d1fb      	bne.n	8012b5e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012b66:	6199      	str	r1, [r3, #24]
 8012b68:	4770      	bx	lr

08012b6a <_ZN8touchgfx9Container9removeAllEv>:
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012b6e:	b123      	cbz	r3, 8012b7a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012b70:	6999      	ldr	r1, [r3, #24]
 8012b72:	6281      	str	r1, [r0, #40]	; 0x28
 8012b74:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012b78:	e7f8      	b.n	8012b6c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012b7a:	4770      	bx	lr

08012b7c <_ZN8touchgfx9Container6unlinkEv>:
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	6283      	str	r3, [r0, #40]	; 0x28
 8012b80:	4770      	bx	lr

08012b82 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012b82:	2200      	movs	r2, #0
 8012b84:	8002      	strh	r2, [r0, #0]
 8012b86:	8042      	strh	r2, [r0, #2]
 8012b88:	8082      	strh	r2, [r0, #4]
 8012b8a:	80c2      	strh	r2, [r0, #6]
 8012b8c:	4770      	bx	lr

08012b8e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012b8e:	b570      	push	{r4, r5, r6, lr}
 8012b90:	460d      	mov	r5, r1
 8012b92:	4616      	mov	r6, r2
 8012b94:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012b96:	b13c      	cbz	r4, 8012ba8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012b98:	6823      	ldr	r3, [r4, #0]
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	4632      	mov	r2, r6
 8012b9e:	4629      	mov	r1, r5
 8012ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ba2:	4798      	blx	r3
 8012ba4:	69a4      	ldr	r4, [r4, #24]
 8012ba6:	e7f6      	b.n	8012b96 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012ba8:	bd70      	pop	{r4, r5, r6, pc}

08012baa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012baa:	b538      	push	{r3, r4, r5, lr}
 8012bac:	460d      	mov	r5, r1
 8012bae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012bb0:	b134      	cbz	r4, 8012bc0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012bb2:	682b      	ldr	r3, [r5, #0]
 8012bb4:	4621      	mov	r1, r4
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	689b      	ldr	r3, [r3, #8]
 8012bba:	4798      	blx	r3
 8012bbc:	69a4      	ldr	r4, [r4, #24]
 8012bbe:	e7f7      	b.n	8012bb0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012bc0:	bd38      	pop	{r3, r4, r5, pc}

08012bc2 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8012bc2:	b510      	push	{r4, lr}
 8012bc4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012bc6:	b12c      	cbz	r4, 8012bd4 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8012bc8:	6823      	ldr	r3, [r4, #0]
 8012bca:	4620      	mov	r0, r4
 8012bcc:	699b      	ldr	r3, [r3, #24]
 8012bce:	4798      	blx	r3
 8012bd0:	69a4      	ldr	r4, [r4, #24]
 8012bd2:	e7f8      	b.n	8012bc6 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8012bd4:	bd10      	pop	{r4, pc}

08012bd6 <_ZN8touchgfx9ContainerD1Ev>:
 8012bd6:	4770      	bx	lr

08012bd8 <_ZN8touchgfx9ContainerD0Ev>:
 8012bd8:	b510      	push	{r4, lr}
 8012bda:	4604      	mov	r4, r0
 8012bdc:	212c      	movs	r1, #44	; 0x2c
 8012bde:	f010 f8ca 	bl	8022d76 <_ZdlPvj>
 8012be2:	4620      	mov	r0, r4
 8012be4:	bd10      	pop	{r4, pc}

08012be6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012be6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012be8:	b19b      	cbz	r3, 8012c12 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012bea:	428b      	cmp	r3, r1
 8012bec:	d109      	bne.n	8012c02 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012bee:	699a      	ldr	r2, [r3, #24]
 8012bf0:	2100      	movs	r1, #0
 8012bf2:	6159      	str	r1, [r3, #20]
 8012bf4:	6282      	str	r2, [r0, #40]	; 0x28
 8012bf6:	b902      	cbnz	r2, 8012bfa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012bf8:	4770      	bx	lr
 8012bfa:	6199      	str	r1, [r3, #24]
 8012bfc:	4770      	bx	lr
 8012bfe:	4613      	mov	r3, r2
 8012c00:	b13a      	cbz	r2, 8012c12 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012c02:	699a      	ldr	r2, [r3, #24]
 8012c04:	428a      	cmp	r2, r1
 8012c06:	d1fa      	bne.n	8012bfe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012c08:	698a      	ldr	r2, [r1, #24]
 8012c0a:	619a      	str	r2, [r3, #24]
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012c12:	4770      	bx	lr

08012c14 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012c14:	b410      	push	{r4}
 8012c16:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012c18:	4604      	mov	r4, r0
 8012c1a:	b92b      	cbnz	r3, 8012c28 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012c1c:	6803      	ldr	r3, [r0, #0]
 8012c1e:	4611      	mov	r1, r2
 8012c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c26:	4718      	bx	r3
 8012c28:	b941      	cbnz	r1, 8012c3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012c2a:	6193      	str	r3, [r2, #24]
 8012c2c:	6282      	str	r2, [r0, #40]	; 0x28
 8012c2e:	6154      	str	r4, [r2, #20]
 8012c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c34:	4770      	bx	lr
 8012c36:	4603      	mov	r3, r0
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	d0f9      	beq.n	8012c30 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012c3c:	4299      	cmp	r1, r3
 8012c3e:	6998      	ldr	r0, [r3, #24]
 8012c40:	d1f9      	bne.n	8012c36 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012c42:	6190      	str	r0, [r2, #24]
 8012c44:	618a      	str	r2, [r1, #24]
 8012c46:	e7f2      	b.n	8012c2e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012c48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c4c:	461f      	mov	r7, r3
 8012c4e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012c52:	460d      	mov	r5, r1
 8012c54:	4616      	mov	r6, r2
 8012c56:	b103      	cbz	r3, 8012c5a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012c58:	6038      	str	r0, [r7, #0]
 8012c5a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012c5c:	b314      	cbz	r4, 8012ca4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012c5e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012c62:	b1eb      	cbz	r3, 8012ca0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c64:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012c68:	428d      	cmp	r5, r1
 8012c6a:	db19      	blt.n	8012ca0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c6c:	b289      	uxth	r1, r1
 8012c6e:	8923      	ldrh	r3, [r4, #8]
 8012c70:	440b      	add	r3, r1
 8012c72:	b21b      	sxth	r3, r3
 8012c74:	429d      	cmp	r5, r3
 8012c76:	da13      	bge.n	8012ca0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c78:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012c7c:	4296      	cmp	r6, r2
 8012c7e:	db0f      	blt.n	8012ca0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c80:	b292      	uxth	r2, r2
 8012c82:	8963      	ldrh	r3, [r4, #10]
 8012c84:	4413      	add	r3, r2
 8012c86:	b21b      	sxth	r3, r3
 8012c88:	429e      	cmp	r6, r3
 8012c8a:	da09      	bge.n	8012ca0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012c8c:	6823      	ldr	r3, [r4, #0]
 8012c8e:	1ab2      	subs	r2, r6, r2
 8012c90:	1a69      	subs	r1, r5, r1
 8012c92:	4620      	mov	r0, r4
 8012c94:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8012c98:	b212      	sxth	r2, r2
 8012c9a:	463b      	mov	r3, r7
 8012c9c:	b209      	sxth	r1, r1
 8012c9e:	47c0      	blx	r8
 8012ca0:	69a4      	ldr	r4, [r4, #24]
 8012ca2:	e7db      	b.n	8012c5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ca8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cac:	4c6d      	ldr	r4, [pc, #436]	; (8012e64 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012cae:	b0a1      	sub	sp, #132	; 0x84
 8012cb0:	4606      	mov	r6, r0
 8012cb2:	6824      	ldr	r4, [r4, #0]
 8012cb4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8012cb6:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8012cba:	2400      	movs	r4, #0
 8012cbc:	9303      	str	r3, [sp, #12]
 8012cbe:	802c      	strh	r4, [r5, #0]
 8012cc0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8012cc2:	802c      	strh	r4, [r5, #0]
 8012cc4:	601c      	str	r4, [r3, #0]
 8012cc6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012cca:	f7ff ffbd 	bl	8012c48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012cce:	f1b9 0f03 	cmp.w	r9, #3
 8012cd2:	f340 80c1 	ble.w	8012e58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8012cd6:	4631      	mov	r1, r6
 8012cd8:	a80c      	add	r0, sp, #48	; 0x30
 8012cda:	f005 ff4d 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012cde:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012ce2:	9306      	str	r3, [sp, #24]
 8012ce4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012ce8:	9307      	str	r3, [sp, #28]
 8012cea:	9b03      	ldr	r3, [sp, #12]
 8012cec:	f8d3 a000 	ldr.w	sl, [r3]
 8012cf0:	f1ba 0f00 	cmp.w	sl, #0
 8012cf4:	f000 80b3 	beq.w	8012e5e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8012cf8:	4651      	mov	r1, sl
 8012cfa:	a810      	add	r0, sp, #64	; 0x40
 8012cfc:	f005 ff3c 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012d00:	2002      	movs	r0, #2
 8012d02:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8012d06:	9b01      	ldr	r3, [sp, #4]
 8012d08:	9a06      	ldr	r2, [sp, #24]
 8012d0a:	fb91 f1f0 	sdiv	r1, r1, r0
 8012d0e:	189d      	adds	r5, r3, r2
 8012d10:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8012d14:	9a07      	ldr	r2, [sp, #28]
 8012d16:	4419      	add	r1, r3
 8012d18:	9b02      	ldr	r3, [sp, #8]
 8012d1a:	4413      	add	r3, r2
 8012d1c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012d20:	1a6d      	subs	r5, r5, r1
 8012d22:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012d26:	fb92 f2f0 	sdiv	r2, r2, r0
 8012d2a:	440a      	add	r2, r1
 8012d2c:	1a9b      	subs	r3, r3, r2
 8012d2e:	435b      	muls	r3, r3
 8012d30:	fb05 3505 	mla	r5, r5, r5, r3
 8012d34:	4f4c      	ldr	r7, [pc, #304]	; (8012e68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012d36:	ac10      	add	r4, sp, #64	; 0x40
 8012d38:	f1b9 0f0c 	cmp.w	r9, #12
 8012d3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d48:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012d50:	f04f 0303 	mov.w	r3, #3
 8012d54:	bfd8      	it	le
 8012d56:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012d5a:	f04f 0400 	mov.w	r4, #0
 8012d5e:	f8cd 9000 	str.w	r9, [sp]
 8012d62:	bfcc      	ite	gt
 8012d64:	4698      	movgt	r8, r3
 8012d66:	fb92 f8f3 	sdivle	r8, r2, r3
 8012d6a:	1c63      	adds	r3, r4, #1
 8012d6c:	aa10      	add	r2, sp, #64	; 0x40
 8012d6e:	f004 0401 	and.w	r4, r4, #1
 8012d72:	f04f 0b00 	mov.w	fp, #0
 8012d76:	9308      	str	r3, [sp, #32]
 8012d78:	9b00      	ldr	r3, [sp, #0]
 8012d7a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012d7e:	fb93 f3f8 	sdiv	r3, r3, r8
 8012d82:	3404      	adds	r4, #4
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	9304      	str	r3, [sp, #16]
 8012d88:	9a04      	ldr	r2, [sp, #16]
 8012d8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012d8e:	fb13 f302 	smulbb	r3, r3, r2
 8012d92:	9a01      	ldr	r2, [sp, #4]
 8012d94:	b29b      	uxth	r3, r3
 8012d96:	1899      	adds	r1, r3, r2
 8012d98:	9305      	str	r3, [sp, #20]
 8012d9a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012d9e:	b209      	sxth	r1, r1
 8012da0:	4299      	cmp	r1, r3
 8012da2:	db4d      	blt.n	8012e40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012da4:	8932      	ldrh	r2, [r6, #8]
 8012da6:	4413      	add	r3, r2
 8012da8:	b21b      	sxth	r3, r3
 8012daa:	4299      	cmp	r1, r3
 8012dac:	da48      	bge.n	8012e40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012dae:	9b04      	ldr	r3, [sp, #16]
 8012db0:	6827      	ldr	r7, [r4, #0]
 8012db2:	fb17 f703 	smulbb	r7, r7, r3
 8012db6:	9b02      	ldr	r3, [sp, #8]
 8012db8:	b2bf      	uxth	r7, r7
 8012dba:	18fa      	adds	r2, r7, r3
 8012dbc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012dc0:	b212      	sxth	r2, r2
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	db3c      	blt.n	8012e40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012dc6:	8970      	ldrh	r0, [r6, #10]
 8012dc8:	4403      	add	r3, r0
 8012dca:	b21b      	sxth	r3, r3
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	da37      	bge.n	8012e40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8012dd6:	ab0b      	add	r3, sp, #44	; 0x2c
 8012dd8:	f7ff ff36 	bl	8012c48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012ddc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012dde:	b37a      	cbz	r2, 8012e40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012de0:	4552      	cmp	r2, sl
 8012de2:	d02d      	beq.n	8012e40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012de4:	4611      	mov	r1, r2
 8012de6:	a80e      	add	r0, sp, #56	; 0x38
 8012de8:	9209      	str	r2, [sp, #36]	; 0x24
 8012dea:	f005 fec5 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012dee:	f04f 0e02 	mov.w	lr, #2
 8012df2:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8012df6:	9a06      	ldr	r2, [sp, #24]
 8012df8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8012dfc:	9b01      	ldr	r3, [sp, #4]
 8012dfe:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8012e02:	4413      	add	r3, r2
 8012e04:	9a07      	ldr	r2, [sp, #28]
 8012e06:	fb91 f1fe 	sdiv	r1, r1, lr
 8012e0a:	fb9c fcfe 	sdiv	ip, ip, lr
 8012e0e:	4401      	add	r1, r0
 8012e10:	1a58      	subs	r0, r3, r1
 8012e12:	9b02      	ldr	r3, [sp, #8]
 8012e14:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8012e18:	4413      	add	r3, r2
 8012e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e1c:	448c      	add	ip, r1
 8012e1e:	eba3 030c 	sub.w	r3, r3, ip
 8012e22:	435b      	muls	r3, r3
 8012e24:	fb00 3300 	mla	r3, r0, r0, r3
 8012e28:	42ab      	cmp	r3, r5
 8012e2a:	d208      	bcs.n	8012e3e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012e2e:	461d      	mov	r5, r3
 8012e30:	9803      	ldr	r0, [sp, #12]
 8012e32:	6001      	str	r1, [r0, #0]
 8012e34:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012e36:	9805      	ldr	r0, [sp, #20]
 8012e38:	8008      	strh	r0, [r1, #0]
 8012e3a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012e3c:	800f      	strh	r7, [r1, #0]
 8012e3e:	4692      	mov	sl, r2
 8012e40:	f10b 0b01 	add.w	fp, fp, #1
 8012e44:	3408      	adds	r4, #8
 8012e46:	f1bb 0f04 	cmp.w	fp, #4
 8012e4a:	d19d      	bne.n	8012d88 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012e4c:	9b00      	ldr	r3, [sp, #0]
 8012e4e:	9c08      	ldr	r4, [sp, #32]
 8012e50:	444b      	add	r3, r9
 8012e52:	4544      	cmp	r4, r8
 8012e54:	9300      	str	r3, [sp, #0]
 8012e56:	d188      	bne.n	8012d6a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012e58:	b021      	add	sp, #132	; 0x84
 8012e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e5e:	f04f 35ff 	mov.w	r5, #4294967295
 8012e62:	e767      	b.n	8012d34 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012e64:	2400f440 	.word	0x2400f440
 8012e68:	080244ac 	.word	0x080244ac

08012e6c <_ZN8touchgfx4RectaNERKS0_>:
 8012e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e70:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012e74:	888c      	ldrh	r4, [r1, #4]
 8012e76:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012e7a:	443c      	add	r4, r7
 8012e7c:	b2a4      	uxth	r4, r4
 8012e7e:	fa0f f884 	sxth.w	r8, r4
 8012e82:	45c1      	cmp	r9, r8
 8012e84:	da2f      	bge.n	8012ee6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012e86:	8882      	ldrh	r2, [r0, #4]
 8012e88:	444a      	add	r2, r9
 8012e8a:	b292      	uxth	r2, r2
 8012e8c:	fa0f fe82 	sxth.w	lr, r2
 8012e90:	4577      	cmp	r7, lr
 8012e92:	da28      	bge.n	8012ee6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012e94:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012e98:	88cb      	ldrh	r3, [r1, #6]
 8012e9a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012e9e:	442b      	add	r3, r5
 8012ea0:	b21b      	sxth	r3, r3
 8012ea2:	429e      	cmp	r6, r3
 8012ea4:	da1f      	bge.n	8012ee6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012ea6:	88c3      	ldrh	r3, [r0, #6]
 8012ea8:	4433      	add	r3, r6
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	fa0f fc83 	sxth.w	ip, r3
 8012eb0:	4565      	cmp	r5, ip
 8012eb2:	da18      	bge.n	8012ee6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012eb4:	454f      	cmp	r7, r9
 8012eb6:	bfb8      	it	lt
 8012eb8:	464f      	movlt	r7, r9
 8012eba:	42b5      	cmp	r5, r6
 8012ebc:	bfb8      	it	lt
 8012ebe:	4635      	movlt	r5, r6
 8012ec0:	45f0      	cmp	r8, lr
 8012ec2:	bfd8      	it	le
 8012ec4:	4622      	movle	r2, r4
 8012ec6:	1bd2      	subs	r2, r2, r7
 8012ec8:	8082      	strh	r2, [r0, #4]
 8012eca:	884a      	ldrh	r2, [r1, #2]
 8012ecc:	88c9      	ldrh	r1, [r1, #6]
 8012ece:	8007      	strh	r7, [r0, #0]
 8012ed0:	440a      	add	r2, r1
 8012ed2:	8045      	strh	r5, [r0, #2]
 8012ed4:	b292      	uxth	r2, r2
 8012ed6:	b211      	sxth	r1, r2
 8012ed8:	458c      	cmp	ip, r1
 8012eda:	bfa8      	it	ge
 8012edc:	4613      	movge	r3, r2
 8012ede:	1b5b      	subs	r3, r3, r5
 8012ee0:	80c3      	strh	r3, [r0, #6]
 8012ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	8003      	strh	r3, [r0, #0]
 8012eea:	8043      	strh	r3, [r0, #2]
 8012eec:	8083      	strh	r3, [r0, #4]
 8012eee:	80c3      	strh	r3, [r0, #6]
 8012ef0:	e7f7      	b.n	8012ee2 <_ZN8touchgfx4RectaNERKS0_+0x76>

08012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012ef2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	dd06      	ble.n	8012f08 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012efa:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012efe:	2800      	cmp	r0, #0
 8012f00:	bfcc      	ite	gt
 8012f02:	2000      	movgt	r0, #0
 8012f04:	2001      	movle	r0, #1
 8012f06:	4770      	bx	lr
 8012f08:	2001      	movs	r0, #1
 8012f0a:	4770      	bx	lr

08012f0c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f10:	2300      	movs	r3, #0
 8012f12:	4604      	mov	r4, r0
 8012f14:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012f16:	8003      	strh	r3, [r0, #0]
 8012f18:	8043      	strh	r3, [r0, #2]
 8012f1a:	8083      	strh	r3, [r0, #4]
 8012f1c:	80c3      	strh	r3, [r0, #6]
 8012f1e:	2d00      	cmp	r5, #0
 8012f20:	d040      	beq.n	8012fa4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012f22:	1d28      	adds	r0, r5, #4
 8012f24:	f7ff ffe5 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f28:	b988      	cbnz	r0, 8012f4e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	f7ff ffe1 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f30:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012f34:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012f38:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012f3c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012f40:	b138      	cbz	r0, 8012f52 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012f42:	8022      	strh	r2, [r4, #0]
 8012f44:	8063      	strh	r3, [r4, #2]
 8012f46:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012f4a:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012f4e:	69ad      	ldr	r5, [r5, #24]
 8012f50:	e7e5      	b.n	8012f1e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012f52:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012f56:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012f5a:	4290      	cmp	r0, r2
 8012f5c:	4607      	mov	r7, r0
 8012f5e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8012f62:	460e      	mov	r6, r1
 8012f64:	bfa8      	it	ge
 8012f66:	4617      	movge	r7, r2
 8012f68:	4299      	cmp	r1, r3
 8012f6a:	4472      	add	r2, lr
 8012f6c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012f70:	bfa8      	it	ge
 8012f72:	461e      	movge	r6, r3
 8012f74:	4440      	add	r0, r8
 8012f76:	4471      	add	r1, lr
 8012f78:	4463      	add	r3, ip
 8012f7a:	b200      	sxth	r0, r0
 8012f7c:	8027      	strh	r7, [r4, #0]
 8012f7e:	b212      	sxth	r2, r2
 8012f80:	8066      	strh	r6, [r4, #2]
 8012f82:	b209      	sxth	r1, r1
 8012f84:	b21b      	sxth	r3, r3
 8012f86:	4290      	cmp	r0, r2
 8012f88:	bfac      	ite	ge
 8012f8a:	ebc7 0200 	rsbge	r2, r7, r0
 8012f8e:	ebc7 0202 	rsblt	r2, r7, r2
 8012f92:	4299      	cmp	r1, r3
 8012f94:	bfac      	ite	ge
 8012f96:	ebc6 0301 	rsbge	r3, r6, r1
 8012f9a:	ebc6 0303 	rsblt	r3, r6, r3
 8012f9e:	80a2      	strh	r2, [r4, #4]
 8012fa0:	80e3      	strh	r3, [r4, #6]
 8012fa2:	e7d4      	b.n	8012f4e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012faa <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012faa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012fae:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012fb2:	b383      	cbz	r3, 8013016 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012fb4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012fb6:	b374      	cbz	r4, 8013016 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012fb8:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012fbc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012fc0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012fc4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012fc8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012fcc:	b303      	cbz	r3, 8013010 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012fce:	4668      	mov	r0, sp
 8012fd0:	1d21      	adds	r1, r4, #4
 8012fd2:	f8ad 5000 	strh.w	r5, [sp]
 8012fd6:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012fda:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012fde:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012fe2:	f7ff ff43 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 8012fe6:	4668      	mov	r0, sp
 8012fe8:	f7ff ff83 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012fec:	b980      	cbnz	r0, 8013010 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012fee:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ff2:	4669      	mov	r1, sp
 8012ff4:	88a2      	ldrh	r2, [r4, #4]
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	1a9b      	subs	r3, r3, r2
 8012ffa:	88e2      	ldrh	r2, [r4, #6]
 8012ffc:	f8ad 3000 	strh.w	r3, [sp]
 8013000:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013004:	1a9b      	subs	r3, r3, r2
 8013006:	f8ad 3002 	strh.w	r3, [sp, #2]
 801300a:	6823      	ldr	r3, [r4, #0]
 801300c:	689b      	ldr	r3, [r3, #8]
 801300e:	4798      	blx	r3
 8013010:	69a4      	ldr	r4, [r4, #24]
 8013012:	2c00      	cmp	r4, #0
 8013014:	d1d8      	bne.n	8012fc8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8013016:	b002      	add	sp, #8
 8013018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801301c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801301c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801301e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013022:	460d      	mov	r5, r1
 8013024:	4616      	mov	r6, r2
 8013026:	b323      	cbz	r3, 8013072 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013028:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801302a:	b314      	cbz	r4, 8013072 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801302c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013030:	b1eb      	cbz	r3, 801306e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013032:	6828      	ldr	r0, [r5, #0]
 8013034:	466b      	mov	r3, sp
 8013036:	6869      	ldr	r1, [r5, #4]
 8013038:	c303      	stmia	r3!, {r0, r1}
 801303a:	4668      	mov	r0, sp
 801303c:	1d21      	adds	r1, r4, #4
 801303e:	f7ff ff15 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 8013042:	4668      	mov	r0, sp
 8013044:	f7ff ff55 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013048:	b988      	cbnz	r0, 801306e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801304a:	f8bd 3000 	ldrh.w	r3, [sp]
 801304e:	4669      	mov	r1, sp
 8013050:	88a2      	ldrh	r2, [r4, #4]
 8013052:	4620      	mov	r0, r4
 8013054:	1a9b      	subs	r3, r3, r2
 8013056:	88e2      	ldrh	r2, [r4, #6]
 8013058:	f8ad 3000 	strh.w	r3, [sp]
 801305c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013060:	1a9b      	subs	r3, r3, r2
 8013062:	4632      	mov	r2, r6
 8013064:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013068:	6823      	ldr	r3, [r4, #0]
 801306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801306c:	4798      	blx	r3
 801306e:	69a4      	ldr	r4, [r4, #24]
 8013070:	e7db      	b.n	801302a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013072:	b002      	add	sp, #8
 8013074:	bd70      	pop	{r4, r5, r6, pc}

08013076 <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 8013076:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801307a:	4770      	bx	lr

0801307c <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 801307c:	b538      	push	{r3, r4, r5, lr}
 801307e:	7882      	ldrb	r2, [r0, #2]
 8013080:	4604      	mov	r4, r0
 8013082:	460d      	mov	r5, r1
 8013084:	6843      	ldr	r3, [r0, #4]
 8013086:	b98a      	cbnz	r2, 80130ac <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 8013088:	4299      	cmp	r1, r3
 801308a:	d101      	bne.n	8013090 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801308c:	2301      	movs	r3, #1
 801308e:	7083      	strb	r3, [r0, #2]
 8013090:	6863      	ldr	r3, [r4, #4]
 8013092:	42ab      	cmp	r3, r5
 8013094:	d009      	beq.n	80130aa <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8013096:	7a23      	ldrb	r3, [r4, #8]
 8013098:	2b01      	cmp	r3, #1
 801309a:	d11b      	bne.n	80130d4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 801309c:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80130a0:	f9b4 2000 	ldrsh.w	r2, [r4]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	bfb8      	it	lt
 80130a8:	8023      	strhlt	r3, [r4, #0]
 80130aa:	bd38      	pop	{r3, r4, r5, pc}
 80130ac:	7a02      	ldrb	r2, [r0, #8]
 80130ae:	2a01      	cmp	r2, #1
 80130b0:	d108      	bne.n	80130c4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 80130b2:	895b      	ldrh	r3, [r3, #10]
 80130b4:	88c9      	ldrh	r1, [r1, #6]
 80130b6:	1ac9      	subs	r1, r1, r3
 80130b8:	682b      	ldr	r3, [r5, #0]
 80130ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130bc:	b209      	sxth	r1, r1
 80130be:	4628      	mov	r0, r5
 80130c0:	4798      	blx	r3
 80130c2:	e7e5      	b.n	8013090 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 80130c4:	2a02      	cmp	r2, #2
 80130c6:	d1e3      	bne.n	8013090 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 80130c8:	891b      	ldrh	r3, [r3, #8]
 80130ca:	8889      	ldrh	r1, [r1, #4]
 80130cc:	1ac9      	subs	r1, r1, r3
 80130ce:	682b      	ldr	r3, [r5, #0]
 80130d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130d2:	e7f3      	b.n	80130bc <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 80130d4:	2b02      	cmp	r3, #2
 80130d6:	d1e8      	bne.n	80130aa <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 80130d8:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80130dc:	e7e0      	b.n	80130a0 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

080130de <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 80130de:	4770      	bx	lr

080130e0 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 80130e0:	4770      	bx	lr

080130e2 <_ZN8touchgfx10ListLayoutD1Ev>:
 80130e2:	4770      	bx	lr

080130e4 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 80130e4:	b430      	push	{r4, r5}
 80130e6:	68c5      	ldr	r5, [r0, #12]
 80130e8:	4603      	mov	r3, r0
 80130ea:	6844      	ldr	r4, [r0, #4]
 80130ec:	106a      	asrs	r2, r5, #1
 80130ee:	07ed      	lsls	r5, r5, #31
 80130f0:	689b      	ldr	r3, [r3, #8]
 80130f2:	eb04 0002 	add.w	r0, r4, r2
 80130f6:	bf48      	it	mi
 80130f8:	58a2      	ldrmi	r2, [r4, r2]
 80130fa:	bc30      	pop	{r4, r5}
 80130fc:	bf48      	it	mi
 80130fe:	58d3      	ldrmi	r3, [r2, r3]
 8013100:	4718      	bx	r3

08013102 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 8013102:	6843      	ldr	r3, [r0, #4]
 8013104:	b12b      	cbz	r3, 8013112 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 8013106:	6883      	ldr	r3, [r0, #8]
 8013108:	b92b      	cbnz	r3, 8013116 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 801310a:	68c0      	ldr	r0, [r0, #12]
 801310c:	f000 0001 	and.w	r0, r0, #1
 8013110:	4770      	bx	lr
 8013112:	4618      	mov	r0, r3
 8013114:	4770      	bx	lr
 8013116:	2001      	movs	r0, #1
 8013118:	4770      	bx	lr

0801311a <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 801311a:	b430      	push	{r4, r5}
 801311c:	68c5      	ldr	r5, [r0, #12]
 801311e:	4603      	mov	r3, r0
 8013120:	6844      	ldr	r4, [r0, #4]
 8013122:	106a      	asrs	r2, r5, #1
 8013124:	07ed      	lsls	r5, r5, #31
 8013126:	689b      	ldr	r3, [r3, #8]
 8013128:	eb04 0002 	add.w	r0, r4, r2
 801312c:	bf48      	it	mi
 801312e:	58a2      	ldrmi	r2, [r4, r2]
 8013130:	bc30      	pop	{r4, r5}
 8013132:	bf48      	it	mi
 8013134:	58d3      	ldrmi	r3, [r2, r3]
 8013136:	4718      	bx	r3

08013138 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 8013138:	6843      	ldr	r3, [r0, #4]
 801313a:	b12b      	cbz	r3, 8013148 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 801313c:	6883      	ldr	r3, [r0, #8]
 801313e:	b92b      	cbnz	r3, 801314c <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 8013140:	68c0      	ldr	r0, [r0, #12]
 8013142:	f000 0001 	and.w	r0, r0, #1
 8013146:	4770      	bx	lr
 8013148:	4618      	mov	r0, r3
 801314a:	4770      	bx	lr
 801314c:	2001      	movs	r0, #1
 801314e:	4770      	bx	lr

08013150 <_ZN8touchgfx10ListLayoutD0Ev>:
 8013150:	b510      	push	{r4, lr}
 8013152:	4604      	mov	r4, r0
 8013154:	2130      	movs	r1, #48	; 0x30
 8013156:	f00f fe0e 	bl	8022d76 <_ZdlPvj>
 801315a:	4620      	mov	r0, r4
 801315c:	bd10      	pop	{r4, pc}

0801315e <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 801315e:	b510      	push	{r4, lr}
 8013160:	4604      	mov	r4, r0
 8013162:	2110      	movs	r1, #16
 8013164:	f00f fe07 	bl	8022d76 <_ZdlPvj>
 8013168:	4620      	mov	r0, r4
 801316a:	bd10      	pop	{r4, pc}

0801316c <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 801316c:	b510      	push	{r4, lr}
 801316e:	4604      	mov	r4, r0
 8013170:	2110      	movs	r1, #16
 8013172:	f00f fe00 	bl	8022d76 <_ZdlPvj>
 8013176:	4620      	mov	r0, r4
 8013178:	bd10      	pop	{r4, pc}

0801317a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 801317a:	4603      	mov	r3, r0
 801317c:	4608      	mov	r0, r1
 801317e:	789a      	ldrb	r2, [r3, #2]
 8013180:	b992      	cbnz	r2, 80131a8 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 8013182:	685a      	ldr	r2, [r3, #4]
 8013184:	428a      	cmp	r2, r1
 8013186:	d102      	bne.n	801318e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 8013188:	2201      	movs	r2, #1
 801318a:	709a      	strb	r2, [r3, #2]
 801318c:	4770      	bx	lr
 801318e:	7a1a      	ldrb	r2, [r3, #8]
 8013190:	2a01      	cmp	r2, #1
 8013192:	d104      	bne.n	801319e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 8013194:	88ca      	ldrh	r2, [r1, #6]
 8013196:	8949      	ldrh	r1, [r1, #10]
 8013198:	440a      	add	r2, r1
 801319a:	801a      	strh	r2, [r3, #0]
 801319c:	4770      	bx	lr
 801319e:	2a02      	cmp	r2, #2
 80131a0:	d116      	bne.n	80131d0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 80131a2:	888a      	ldrh	r2, [r1, #4]
 80131a4:	8909      	ldrh	r1, [r1, #8]
 80131a6:	e7f7      	b.n	8013198 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 80131a8:	7a1a      	ldrb	r2, [r3, #8]
 80131aa:	2a01      	cmp	r2, #1
 80131ac:	d107      	bne.n	80131be <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	8959      	ldrh	r1, [r3, #10]
 80131b2:	88c3      	ldrh	r3, [r0, #6]
 80131b4:	4419      	add	r1, r3
 80131b6:	6803      	ldr	r3, [r0, #0]
 80131b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131ba:	b209      	sxth	r1, r1
 80131bc:	4718      	bx	r3
 80131be:	2a02      	cmp	r2, #2
 80131c0:	d106      	bne.n	80131d0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	8919      	ldrh	r1, [r3, #8]
 80131c6:	8883      	ldrh	r3, [r0, #4]
 80131c8:	4419      	add	r1, r3
 80131ca:	6803      	ldr	r3, [r0, #0]
 80131cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131ce:	e7f4      	b.n	80131ba <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 80131d0:	4770      	bx	lr

080131d2 <_ZN8touchgfx8Drawable5setXYEss>:
 80131d2:	b570      	push	{r4, r5, r6, lr}
 80131d4:	6803      	ldr	r3, [r0, #0]
 80131d6:	4604      	mov	r4, r0
 80131d8:	4615      	mov	r5, r2
 80131da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131dc:	4798      	blx	r3
 80131de:	6823      	ldr	r3, [r4, #0]
 80131e0:	4629      	mov	r1, r5
 80131e2:	4620      	mov	r0, r4
 80131e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131ea:	4718      	bx	r3

080131ec <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80131ec:	b570      	push	{r4, r5, r6, lr}
 80131ee:	6803      	ldr	r3, [r0, #0]
 80131f0:	4604      	mov	r4, r0
 80131f2:	4615      	mov	r5, r2
 80131f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131f6:	4798      	blx	r3
 80131f8:	6823      	ldr	r3, [r4, #0]
 80131fa:	4629      	mov	r1, r5
 80131fc:	4620      	mov	r0, r4
 80131fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013204:	4718      	bx	r3

08013206 <_ZN8touchgfx10ListLayout9removeAllEv>:
 8013206:	2200      	movs	r2, #0
 8013208:	b510      	push	{r4, lr}
 801320a:	4604      	mov	r4, r0
 801320c:	85c2      	strh	r2, [r0, #46]	; 0x2e
 801320e:	4611      	mov	r1, r2
 8013210:	f7ff ffec 	bl	80131ec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013214:	4620      	mov	r0, r4
 8013216:	f7ff fca8 	bl	8012b6a <_ZN8touchgfx9Container9removeAllEv>
 801321a:	6960      	ldr	r0, [r4, #20]
 801321c:	b120      	cbz	r0, 8013228 <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 801321e:	6803      	ldr	r3, [r0, #0]
 8013220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013226:	4718      	bx	r3
 8013228:	bd10      	pop	{r4, pc}
	...

0801322c <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 801322c:	b530      	push	{r4, r5, lr}
 801322e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013232:	b085      	sub	sp, #20
 8013234:	4604      	mov	r4, r0
 8013236:	428b      	cmp	r3, r1
 8013238:	d017      	beq.n	801326a <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 801323a:	2500      	movs	r5, #0
 801323c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8013240:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8013242:	462a      	mov	r2, r5
 8013244:	4629      	mov	r1, r5
 8013246:	f7ff ffd1 	bl	80131ec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801324a:	4b09      	ldr	r3, [pc, #36]	; (8013270 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 801324c:	4620      	mov	r0, r4
 801324e:	4669      	mov	r1, sp
 8013250:	e9cd 3400 	strd	r3, r4, [sp]
 8013254:	4b07      	ldr	r3, [pc, #28]	; (8013274 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 8013256:	e9cd 3502 	strd	r3, r5, [sp, #8]
 801325a:	6823      	ldr	r3, [r4, #0]
 801325c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801325e:	4798      	blx	r3
 8013260:	6960      	ldr	r0, [r4, #20]
 8013262:	b110      	cbz	r0, 801326a <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8013264:	6803      	ldr	r3, [r0, #0]
 8013266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013268:	4798      	blx	r3
 801326a:	b005      	add	sp, #20
 801326c:	bd30      	pop	{r4, r5, pc}
 801326e:	bf00      	nop
 8013270:	080264a4 	.word	0x080264a4
 8013274:	080132dd 	.word	0x080132dd

08013278 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 8013278:	b538      	push	{r3, r4, r5, lr}
 801327a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801327e:	460d      	mov	r5, r1
 8013280:	4604      	mov	r4, r0
 8013282:	4611      	mov	r1, r2
 8013284:	2b01      	cmp	r3, #1
 8013286:	d002      	beq.n	801328e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 8013288:	2b02      	cmp	r3, #2
 801328a:	d015      	beq.n	80132b8 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 801328c:	bd38      	pop	{r3, r4, r5, pc}
 801328e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8013292:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8013296:	429a      	cmp	r2, r3
 8013298:	bfb8      	it	lt
 801329a:	8103      	strhlt	r3, [r0, #8]
 801329c:	8943      	ldrh	r3, [r0, #10]
 801329e:	896a      	ldrh	r2, [r5, #10]
 80132a0:	4413      	add	r3, r2
 80132a2:	460a      	mov	r2, r1
 80132a4:	2100      	movs	r1, #0
 80132a6:	8143      	strh	r3, [r0, #10]
 80132a8:	4628      	mov	r0, r5
 80132aa:	f7ff ff92 	bl	80131d2 <_ZN8touchgfx8Drawable5setXYEss>
 80132ae:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80132b0:	896a      	ldrh	r2, [r5, #10]
 80132b2:	4413      	add	r3, r2
 80132b4:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80132b6:	e7e9      	b.n	801328c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 80132b8:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80132bc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80132c0:	429a      	cmp	r2, r3
 80132c2:	bfb8      	it	lt
 80132c4:	8143      	strhlt	r3, [r0, #10]
 80132c6:	8903      	ldrh	r3, [r0, #8]
 80132c8:	892a      	ldrh	r2, [r5, #8]
 80132ca:	4413      	add	r3, r2
 80132cc:	2200      	movs	r2, #0
 80132ce:	8103      	strh	r3, [r0, #8]
 80132d0:	4628      	mov	r0, r5
 80132d2:	f7ff ff7e 	bl	80131d2 <_ZN8touchgfx8Drawable5setXYEss>
 80132d6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80132d8:	892a      	ldrh	r2, [r5, #8]
 80132da:	e7ea      	b.n	80132b2 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

080132dc <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 80132dc:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 80132e0:	f7ff bfca 	b.w	8013278 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

080132e4 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 80132e4:	b570      	push	{r4, r5, r6, lr}
 80132e6:	4604      	mov	r4, r0
 80132e8:	460d      	mov	r5, r1
 80132ea:	f7ff fff7 	bl	80132dc <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 80132ee:	4620      	mov	r0, r4
 80132f0:	4629      	mov	r1, r5
 80132f2:	f7ff fc2d 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80132f6:	6960      	ldr	r0, [r4, #20]
 80132f8:	b120      	cbz	r0, 8013304 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 80132fa:	6803      	ldr	r3, [r0, #0]
 80132fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013302:	4718      	bx	r3
 8013304:	bd70      	pop	{r4, r5, r6, pc}
	...

08013308 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8013308:	b530      	push	{r4, r5, lr}
 801330a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801330c:	b089      	sub	sp, #36	; 0x24
 801330e:	4604      	mov	r4, r0
 8013310:	4615      	mov	r5, r2
 8013312:	b92b      	cbnz	r3, 8013320 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8013314:	6803      	ldr	r3, [r0, #0]
 8013316:	4611      	mov	r1, r2
 8013318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801331a:	4798      	blx	r3
 801331c:	b009      	add	sp, #36	; 0x24
 801331e:	bd30      	pop	{r4, r5, pc}
 8013320:	f7ff fc78 	bl	8012c14 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8013324:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8013328:	2300      	movs	r3, #0
 801332a:	a904      	add	r1, sp, #16
 801332c:	f88d 200c 	strb.w	r2, [sp, #12]
 8013330:	4620      	mov	r0, r4
 8013332:	4a0e      	ldr	r2, [pc, #56]	; (801336c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8013334:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013338:	9204      	str	r2, [sp, #16]
 801333a:	aa01      	add	r2, sp, #4
 801333c:	f88d 3006 	strb.w	r3, [sp, #6]
 8013340:	9205      	str	r2, [sp, #20]
 8013342:	4a0b      	ldr	r2, [pc, #44]	; (8013370 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8013344:	9502      	str	r5, [sp, #8]
 8013346:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801334a:	6823      	ldr	r3, [r4, #0]
 801334c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801334e:	4798      	blx	r3
 8013350:	4620      	mov	r0, r4
 8013352:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013356:	4629      	mov	r1, r5
 8013358:	f7ff ff8e 	bl	8013278 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 801335c:	6960      	ldr	r0, [r4, #20]
 801335e:	2800      	cmp	r0, #0
 8013360:	d0dc      	beq.n	801331c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8013362:	6803      	ldr	r3, [r0, #0]
 8013364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013366:	4798      	blx	r3
 8013368:	e7d8      	b.n	801331c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 801336a:	bf00      	nop
 801336c:	080264bc 	.word	0x080264bc
 8013370:	0801317b 	.word	0x0801317b

08013374 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8013374:	b538      	push	{r3, r4, r5, lr}
 8013376:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801337a:	4604      	mov	r4, r0
 801337c:	460d      	mov	r5, r1
 801337e:	2b01      	cmp	r3, #1
 8013380:	d002      	beq.n	8013388 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 8013382:	2b02      	cmp	r3, #2
 8013384:	d018      	beq.n	80133b8 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8013386:	bd38      	pop	{r3, r4, r5, pc}
 8013388:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801338c:	4293      	cmp	r3, r2
 801338e:	8943      	ldrh	r3, [r0, #10]
 8013390:	bfc8      	it	gt
 8013392:	8102      	strhgt	r2, [r0, #8]
 8013394:	894a      	ldrh	r2, [r1, #10]
 8013396:	1a9b      	subs	r3, r3, r2
 8013398:	8143      	strh	r3, [r0, #10]
 801339a:	4628      	mov	r0, r5
 801339c:	680b      	ldr	r3, [r1, #0]
 801339e:	2100      	movs	r1, #0
 80133a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a2:	4798      	blx	r3
 80133a4:	682b      	ldr	r3, [r5, #0]
 80133a6:	2100      	movs	r1, #0
 80133a8:	4628      	mov	r0, r5
 80133aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133ac:	4798      	blx	r3
 80133ae:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80133b0:	896a      	ldrh	r2, [r5, #10]
 80133b2:	1a9b      	subs	r3, r3, r2
 80133b4:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80133b6:	e7e6      	b.n	8013386 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 80133b8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80133bc:	4293      	cmp	r3, r2
 80133be:	8903      	ldrh	r3, [r0, #8]
 80133c0:	bfc8      	it	gt
 80133c2:	8142      	strhgt	r2, [r0, #10]
 80133c4:	890a      	ldrh	r2, [r1, #8]
 80133c6:	1a9b      	subs	r3, r3, r2
 80133c8:	8103      	strh	r3, [r0, #8]
 80133ca:	4628      	mov	r0, r5
 80133cc:	680b      	ldr	r3, [r1, #0]
 80133ce:	2100      	movs	r1, #0
 80133d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133d2:	4798      	blx	r3
 80133d4:	682b      	ldr	r3, [r5, #0]
 80133d6:	2100      	movs	r1, #0
 80133d8:	4628      	mov	r0, r5
 80133da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133dc:	4798      	blx	r3
 80133de:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80133e0:	892a      	ldrh	r2, [r5, #8]
 80133e2:	e7e6      	b.n	80133b2 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

080133e4 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 80133e4:	b530      	push	{r4, r5, lr}
 80133e6:	b089      	sub	sp, #36	; 0x24
 80133e8:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80133ec:	2300      	movs	r3, #0
 80133ee:	460d      	mov	r5, r1
 80133f0:	f88d 200c 	strb.w	r2, [sp, #12]
 80133f4:	4604      	mov	r4, r0
 80133f6:	4a12      	ldr	r2, [pc, #72]	; (8013440 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 80133f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80133fc:	9204      	str	r2, [sp, #16]
 80133fe:	aa01      	add	r2, sp, #4
 8013400:	f88d 3006 	strb.w	r3, [sp, #6]
 8013404:	9205      	str	r2, [sp, #20]
 8013406:	4a0f      	ldr	r2, [pc, #60]	; (8013444 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8013408:	9102      	str	r1, [sp, #8]
 801340a:	a904      	add	r1, sp, #16
 801340c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013410:	6803      	ldr	r3, [r0, #0]
 8013412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013414:	4798      	blx	r3
 8013416:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801341a:	b14b      	cbz	r3, 8013430 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 801341c:	4629      	mov	r1, r5
 801341e:	4620      	mov	r0, r4
 8013420:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013424:	f7ff ffa6 	bl	8013374 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8013428:	4629      	mov	r1, r5
 801342a:	4620      	mov	r0, r4
 801342c:	f7ff fbdb 	bl	8012be6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8013430:	6960      	ldr	r0, [r4, #20]
 8013432:	b110      	cbz	r0, 801343a <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8013434:	6803      	ldr	r3, [r0, #0]
 8013436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013438:	4798      	blx	r3
 801343a:	b009      	add	sp, #36	; 0x24
 801343c:	bd30      	pop	{r4, r5, pc}
 801343e:	bf00      	nop
 8013440:	080264bc 	.word	0x080264bc
 8013444:	0801307d 	.word	0x0801307d

08013448 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013448:	2000      	movs	r0, #0
 801344a:	4770      	bx	lr

0801344c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801344c:	2001      	movs	r0, #1
 801344e:	4770      	bx	lr

08013450 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 8013450:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013452:	6803      	ldr	r3, [r0, #0]
 8013454:	4604      	mov	r4, r0
 8013456:	460e      	mov	r6, r1
 8013458:	4601      	mov	r1, r0
 801345a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801345e:	4668      	mov	r0, sp
 8013460:	4615      	mov	r5, r2
 8013462:	4798      	blx	r3
 8013464:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8013468:	b13b      	cbz	r3, 801347a <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x2a>
 801346a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801346e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013472:	4293      	cmp	r3, r2
 8013474:	bfac      	ite	ge
 8013476:	2300      	movge	r3, #0
 8013478:	2301      	movlt	r3, #1
 801347a:	7033      	strb	r3, [r6, #0]
 801347c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8013480:	b13b      	cbz	r3, 8013492 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x42>
 8013482:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013486:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801348a:	4293      	cmp	r3, r2
 801348c:	bfac      	ite	ge
 801348e:	2300      	movge	r3, #0
 8013490:	2301      	movlt	r3, #1
 8013492:	702b      	strb	r3, [r5, #0]
 8013494:	b002      	add	sp, #8
 8013496:	bd70      	pop	{r4, r5, r6, pc}

08013498 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 8013498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801349c:	4604      	mov	r4, r0
 801349e:	460f      	mov	r7, r1
 80134a0:	4616      	mov	r6, r2
 80134a2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80134a4:	f100 0838 	add.w	r8, r0, #56	; 0x38
 80134a8:	f100 0964 	add.w	r9, r0, #100	; 0x64
 80134ac:	b15d      	cbz	r5, 80134c6 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 80134ae:	4545      	cmp	r5, r8
 80134b0:	d007      	beq.n	80134c2 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80134b2:	454d      	cmp	r5, r9
 80134b4:	d005      	beq.n	80134c2 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 80134b6:	682b      	ldr	r3, [r5, #0]
 80134b8:	4632      	mov	r2, r6
 80134ba:	4639      	mov	r1, r7
 80134bc:	4628      	mov	r0, r5
 80134be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134c0:	4798      	blx	r3
 80134c2:	69ad      	ldr	r5, [r5, #24]
 80134c4:	e7f2      	b.n	80134ac <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 80134c6:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80134ca:	441f      	add	r7, r3
 80134cc:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 80134d0:	441e      	add	r6, r3
 80134d2:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
 80134d6:	f8a4 609a 	strh.w	r6, [r4, #154]	; 0x9a
 80134da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080134de <_ZN8touchgfx19ScrollableContainerD1Ev>:
 80134de:	4770      	bx	lr

080134e0 <_ZN8touchgfx9DragEventD1Ev>:
 80134e0:	4770      	bx	lr

080134e2 <_ZN8touchgfx10ClickEventD1Ev>:
 80134e2:	4770      	bx	lr

080134e4 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 80134e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134e6:	4605      	mov	r5, r0
 80134e8:	f100 0638 	add.w	r6, r0, #56	; 0x38
 80134ec:	4604      	mov	r4, r0
 80134ee:	460f      	mov	r7, r1
 80134f0:	f855 3b64 	ldr.w	r3, [r5], #100
 80134f4:	4631      	mov	r1, r6
 80134f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134f8:	4798      	blx	r3
 80134fa:	6823      	ldr	r3, [r4, #0]
 80134fc:	4629      	mov	r1, r5
 80134fe:	4620      	mov	r0, r4
 8013500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013502:	4798      	blx	r3
 8013504:	4639      	mov	r1, r7
 8013506:	4620      	mov	r0, r4
 8013508:	f7ff fb22 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801350c:	4631      	mov	r1, r6
 801350e:	4620      	mov	r0, r4
 8013510:	f7ff fb1e 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013514:	4629      	mov	r1, r5
 8013516:	4620      	mov	r0, r4
 8013518:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801351c:	f7ff bb18 	b.w	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>

08013520 <_ZN8touchgfx10ClickEventD0Ev>:
 8013520:	b510      	push	{r4, lr}
 8013522:	4604      	mov	r4, r0
 8013524:	210c      	movs	r1, #12
 8013526:	f00f fc26 	bl	8022d76 <_ZdlPvj>
 801352a:	4620      	mov	r0, r4
 801352c:	bd10      	pop	{r4, pc}

0801352e <_ZN8touchgfx9DragEventD0Ev>:
 801352e:	b510      	push	{r4, lr}
 8013530:	4604      	mov	r4, r0
 8013532:	2110      	movs	r1, #16
 8013534:	f00f fc1f 	bl	8022d76 <_ZdlPvj>
 8013538:	4620      	mov	r0, r4
 801353a:	bd10      	pop	{r4, pc}

0801353c <_ZN8touchgfx19ScrollableContainerD0Ev>:
 801353c:	b510      	push	{r4, lr}
 801353e:	4604      	mov	r4, r0
 8013540:	21bc      	movs	r1, #188	; 0xbc
 8013542:	f00f fc18 	bl	8022d76 <_ZdlPvj>
 8013546:	4620      	mov	r0, r4
 8013548:	bd10      	pop	{r4, pc}
	...

0801354c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 801354c:	b570      	push	{r4, r5, r6, lr}
 801354e:	b086      	sub	sp, #24
 8013550:	2300      	movs	r3, #0
 8013552:	460c      	mov	r4, r1
 8013554:	4605      	mov	r5, r0
 8013556:	aa06      	add	r2, sp, #24
 8013558:	f88d 3002 	strb.w	r3, [sp, #2]
 801355c:	f10d 0102 	add.w	r1, sp, #2
 8013560:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8013564:	6803      	ldr	r3, [r0, #0]
 8013566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801356a:	4798      	blx	r3
 801356c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013570:	b10b      	cbz	r3, 8013576 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 8013572:	7923      	ldrb	r3, [r4, #4]
 8013574:	b133      	cbz	r3, 8013584 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 8013576:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d067      	beq.n	801364e <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 801357e:	7923      	ldrb	r3, [r4, #4]
 8013580:	2b01      	cmp	r3, #1
 8013582:	d164      	bne.n	801364e <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013584:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013588:	2a00      	cmp	r2, #0
 801358a:	bfb8      	it	lt
 801358c:	4252      	neglt	r2, r2
 801358e:	b213      	sxth	r3, r2
 8013590:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	; 0x9c
 8013594:	429a      	cmp	r2, r3
 8013596:	dc5a      	bgt.n	801364e <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013598:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 801359a:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
 801359e:	429a      	cmp	r2, r3
 80135a0:	bfa8      	it	ge
 80135a2:	461a      	movge	r2, r3
 80135a4:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	; 0xba
 80135a8:	b212      	sxth	r2, r2
 80135aa:	2a05      	cmp	r2, #5
 80135ac:	bfb8      	it	lt
 80135ae:	2205      	movlt	r2, #5
 80135b0:	4351      	muls	r1, r2
 80135b2:	3a04      	subs	r2, #4
 80135b4:	fb91 f1f3 	sdiv	r1, r1, r3
 80135b8:	f8a5 10a8 	strh.w	r1, [r5, #168]	; 0xa8
 80135bc:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80135c0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80135c4:	b289      	uxth	r1, r1
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135cc:	bfcc      	ite	gt
 80135ce:	2001      	movgt	r0, #1
 80135d0:	4618      	movle	r0, r3
 80135d2:	00d3      	lsls	r3, r2, #3
 80135d4:	fb13 f300 	smulbb	r3, r3, r0
 80135d8:	b21b      	sxth	r3, r3
 80135da:	2b00      	cmp	r3, #0
 80135dc:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
 80135e0:	bfb8      	it	lt
 80135e2:	425b      	neglt	r3, r3
 80135e4:	b21b      	sxth	r3, r3
 80135e6:	428b      	cmp	r3, r1
 80135e8:	bfa8      	it	ge
 80135ea:	460b      	movge	r3, r1
 80135ec:	4629      	mov	r1, r5
 80135ee:	f8a5 30a8 	strh.w	r3, [r5, #168]	; 0xa8
 80135f2:	7922      	ldrb	r2, [r4, #4]
 80135f4:	682b      	ldr	r3, [r5, #0]
 80135f6:	2a01      	cmp	r2, #1
 80135f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135fc:	d129      	bne.n	8013652 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x106>
 80135fe:	a801      	add	r0, sp, #4
 8013600:	4798      	blx	r3
 8013602:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013606:	2601      	movs	r6, #1
 8013608:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
 801360c:	f885 60b0 	strb.w	r6, [r5, #176]	; 0xb0
 8013610:	f004 fa42 	bl	8017a98 <_ZN8touchgfx11Application11getInstanceEv>
 8013614:	4629      	mov	r1, r5
 8013616:	f004 fa45 	bl	8017aa4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801361a:	7923      	ldrb	r3, [r4, #4]
 801361c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8013620:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8013624:	b198      	cbz	r0, 801364e <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8013626:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 801362a:	b983      	cbnz	r3, 801364e <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 801362c:	4a0b      	ldr	r2, [pc, #44]	; (801365c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x110>)
 801362e:	a903      	add	r1, sp, #12
 8013630:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013634:	9203      	str	r2, [sp, #12]
 8013636:	2202      	movs	r2, #2
 8013638:	f8ad 3014 	strh.w	r3, [sp, #20]
 801363c:	f88d 2010 	strb.w	r2, [sp, #16]
 8013640:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013644:	6803      	ldr	r3, [r0, #0]
 8013646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013648:	4798      	blx	r3
 801364a:	f885 60b6 	strb.w	r6, [r5, #182]	; 0xb6
 801364e:	b006      	add	sp, #24
 8013650:	bd70      	pop	{r4, r5, r6, pc}
 8013652:	a803      	add	r0, sp, #12
 8013654:	4798      	blx	r3
 8013656:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801365a:	e7d4      	b.n	8013606 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 801365c:	0802656c 	.word	0x0802656c

08013660 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 8013660:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013662:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8013666:	4604      	mov	r4, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d048      	beq.n	80136fe <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 801366c:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
 8013670:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8013674:	3001      	adds	r0, #1
 8013676:	b280      	uxth	r0, r0
 8013678:	4298      	cmp	r0, r3
 801367a:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 801367e:	d842      	bhi.n	8013706 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa6>
 8013680:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8013684:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8013688:	f005 fe1a 	bl	80192c0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801368c:	4605      	mov	r5, r0
 801368e:	b282      	uxth	r2, r0
 8013690:	f012 0301 	ands.w	r3, r2, #1
 8013694:	d006      	beq.n	80136a4 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 8013696:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801369a:	2800      	cmp	r0, #0
 801369c:	bfd8      	it	le
 801369e:	460b      	movle	r3, r1
 80136a0:	18d5      	adds	r5, r2, r3
 80136a2:	b22d      	sxth	r5, r5
 80136a4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80136a8:	2b01      	cmp	r3, #1
 80136aa:	d02a      	beq.n	8013702 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 80136ac:	6823      	ldr	r3, [r4, #0]
 80136ae:	4621      	mov	r1, r4
 80136b0:	4668      	mov	r0, sp
 80136b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80136b6:	4798      	blx	r3
 80136b8:	f8bd 6000 	ldrh.w	r6, [sp]
 80136bc:	1bae      	subs	r6, r5, r6
 80136be:	b236      	sxth	r6, r6
 80136c0:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80136c4:	b14a      	cbz	r2, 80136da <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x7a>
 80136c6:	6823      	ldr	r3, [r4, #0]
 80136c8:	4621      	mov	r1, r4
 80136ca:	4668      	mov	r0, sp
 80136cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80136d0:	4798      	blx	r3
 80136d2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80136d6:	1aad      	subs	r5, r5, r2
 80136d8:	b22a      	sxth	r2, r5
 80136da:	6823      	ldr	r3, [r4, #0]
 80136dc:	4631      	mov	r1, r6
 80136de:	4620      	mov	r0, r4
 80136e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80136e4:	4798      	blx	r3
 80136e6:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
 80136ea:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
 80136ee:	b935      	cbnz	r5, 80136fe <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 80136f0:	f004 f9d2 	bl	8017a98 <_ZN8touchgfx11Application11getInstanceEv>
 80136f4:	4621      	mov	r1, r4
 80136f6:	f004 f9fa 	bl	8017aee <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80136fa:	f8a4 50ae 	strh.w	r5, [r4, #174]	; 0xae
 80136fe:	b002      	add	sp, #8
 8013700:	bd70      	pop	{r4, r5, r6, pc}
 8013702:	2600      	movs	r6, #0
 8013704:	e7dc      	b.n	80136c0 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x60>
 8013706:	2300      	movs	r3, #0
 8013708:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 801370c:	e7ed      	b.n	80136ea <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x8a>

0801370e <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 801370e:	b470      	push	{r4, r5, r6}
 8013710:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 8013714:	461d      	mov	r5, r3
 8013716:	b11e      	cbz	r6, 8013720 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 8013718:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 801371c:	b116      	cbz	r6, 8013724 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 801371e:	6028      	str	r0, [r5, #0]
 8013720:	bc70      	pop	{r4, r5, r6}
 8013722:	4770      	bx	lr
 8013724:	bc70      	pop	{r4, r5, r6}
 8013726:	f7ff ba8f 	b.w	8012c48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
	...

0801372c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 801372c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013730:	b08b      	sub	sp, #44	; 0x2c
 8013732:	2300      	movs	r3, #0
 8013734:	4604      	mov	r4, r0
 8013736:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801373a:	aa0a      	add	r2, sp, #40	; 0x28
 801373c:	f88d 3006 	strb.w	r3, [sp, #6]
 8013740:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8013744:	460f      	mov	r7, r1
 8013746:	f802 3d21 	strb.w	r3, [r2, #-33]!
 801374a:	6803      	ldr	r3, [r0, #0]
 801374c:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 8013750:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 8013754:	f10d 0106 	add.w	r1, sp, #6
 8013758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801375c:	4798      	blx	r3
 801375e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8013762:	2900      	cmp	r1, #0
 8013764:	d03d      	beq.n	80137e2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013766:	42a1      	cmp	r1, r4
 8013768:	d03b      	beq.n	80137e2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801376a:	a802      	add	r0, sp, #8
 801376c:	f005 fa04 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013770:	4621      	mov	r1, r4
 8013772:	a804      	add	r0, sp, #16
 8013774:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 8013778:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 801377c:	f005 f9fc 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013780:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8013784:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 8013788:	eba3 030b 	sub.w	r3, r3, fp
 801378c:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8013790:	88f9      	ldrh	r1, [r7, #6]
 8013792:	4413      	add	r3, r2
 8013794:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013798:	f89d c006 	ldrb.w	ip, [sp, #6]
 801379c:	eba2 020a 	sub.w	r2, r2, sl
 80137a0:	b29b      	uxth	r3, r3
 80137a2:	4402      	add	r2, r0
 80137a4:	8938      	ldrh	r0, [r7, #8]
 80137a6:	4419      	add	r1, r3
 80137a8:	b292      	uxth	r2, r2
 80137aa:	b209      	sxth	r1, r1
 80137ac:	4410      	add	r0, r2
 80137ae:	b200      	sxth	r0, r0
 80137b0:	f1bc 0f00 	cmp.w	ip, #0
 80137b4:	f040 808d 	bne.w	80138d2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a6>
 80137b8:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
 80137bc:	4473      	add	r3, lr
 80137be:	b21b      	sxth	r3, r3
 80137c0:	f89d e007 	ldrb.w	lr, [sp, #7]
 80137c4:	f1be 0f00 	cmp.w	lr, #0
 80137c8:	f040 80b1 	bne.w	801392e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 80137cc:	f8b7 e00c 	ldrh.w	lr, [r7, #12]
 80137d0:	4472      	add	r2, lr
 80137d2:	b212      	sxth	r2, r2
 80137d4:	f1bc 0f00 	cmp.w	ip, #0
 80137d8:	f000 80c8 	beq.w	801396c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 80137dc:	4290      	cmp	r0, r2
 80137de:	f040 80ae 	bne.w	801393e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 80137e2:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 80137e6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	f040 8099 	bne.w	8013922 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 80137f0:	897d      	ldrh	r5, [r7, #10]
 80137f2:	89be      	ldrh	r6, [r7, #12]
 80137f4:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 80137f8:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
 80137fc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
 8013800:	f8b4 c0a0 	ldrh.w	ip, [r4, #160]	; 0xa0
 8013804:	4411      	add	r1, r2
 8013806:	442a      	add	r2, r5
 8013808:	449c      	add	ip, r3
 801380a:	4433      	add	r3, r6
 801380c:	b292      	uxth	r2, r2
 801380e:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8013812:	b29b      	uxth	r3, r3
 8013814:	b289      	uxth	r1, r1
 8013816:	fa1f fc8c 	uxth.w	ip, ip
 801381a:	b215      	sxth	r5, r2
 801381c:	b21e      	sxth	r6, r3
 801381e:	b15f      	cbz	r7, 8013838 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10c>
 8013820:	1a52      	subs	r2, r2, r1
 8013822:	f9b4 709c 	ldrsh.w	r7, [r4, #156]	; 0x9c
 8013826:	b212      	sxth	r2, r2
 8013828:	2a00      	cmp	r2, #0
 801382a:	bfb8      	it	lt
 801382c:	4252      	neglt	r2, r2
 801382e:	b212      	sxth	r2, r2
 8013830:	4297      	cmp	r7, r2
 8013832:	bfac      	ite	ge
 8013834:	2700      	movge	r7, #0
 8013836:	2701      	movlt	r7, #1
 8013838:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801383c:	b152      	cbz	r2, 8013854 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x128>
 801383e:	eba3 030c 	sub.w	r3, r3, ip
 8013842:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
 8013846:	b21b      	sxth	r3, r3
 8013848:	2b00      	cmp	r3, #0
 801384a:	bfb8      	it	lt
 801384c:	425b      	neglt	r3, r3
 801384e:	b21b      	sxth	r3, r3
 8013850:	429a      	cmp	r2, r3
 8013852:	db01      	blt.n	8013858 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 8013854:	2f00      	cmp	r7, #0
 8013856:	d03e      	beq.n	80138d6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 8013858:	2701      	movs	r7, #1
 801385a:	fa0f f881 	sxth.w	r8, r1
 801385e:	fa0f f98c 	sxth.w	r9, ip
 8013862:	f884 70a3 	strb.w	r7, [r4, #163]	; 0xa3
 8013866:	b1a0      	cbz	r0, 8013892 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 8013868:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 801386c:	b98b      	cbnz	r3, 8013892 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 801386e:	4a41      	ldr	r2, [pc, #260]	; (8013974 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 8013870:	a906      	add	r1, sp, #24
 8013872:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013876:	9206      	str	r2, [sp, #24]
 8013878:	2202      	movs	r2, #2
 801387a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801387e:	f88d 201c 	strb.w	r2, [sp, #28]
 8013882:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013886:	6803      	ldr	r3, [r0, #0]
 8013888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801388a:	4798      	blx	r3
 801388c:	2301      	movs	r3, #1
 801388e:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8013892:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 8013896:	b149      	cbz	r1, 80138ac <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8013898:	eba5 0108 	sub.w	r1, r5, r8
 801389c:	b209      	sxth	r1, r1
 801389e:	b12f      	cbz	r7, 80138ac <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 80138a0:	2900      	cmp	r1, #0
 80138a2:	dc40      	bgt.n	8013926 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 80138a4:	bf14      	ite	ne
 80138a6:	f04f 31ff 	movne.w	r1, #4294967295
 80138aa:	2100      	moveq	r1, #0
 80138ac:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 80138b0:	b14a      	cbz	r2, 80138c6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 80138b2:	eba6 0609 	sub.w	r6, r6, r9
 80138b6:	b232      	sxth	r2, r6
 80138b8:	b12f      	cbz	r7, 80138c6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 80138ba:	2a00      	cmp	r2, #0
 80138bc:	dc35      	bgt.n	801392a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 80138be:	bf14      	ite	ne
 80138c0:	f04f 32ff 	movne.w	r2, #4294967295
 80138c4:	2200      	moveq	r2, #0
 80138c6:	6823      	ldr	r3, [r4, #0]
 80138c8:	4620      	mov	r0, r4
 80138ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80138ce:	4798      	blx	r3
 80138d0:	e024      	b.n	801391c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80138d2:	460b      	mov	r3, r1
 80138d4:	e774      	b.n	80137c0 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 80138d6:	b308      	cbz	r0, 801391c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80138d8:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 80138dc:	b9f3      	cbnz	r3, 801391c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80138de:	ab0a      	add	r3, sp, #40	; 0x28
 80138e0:	4620      	mov	r0, r4
 80138e2:	4632      	mov	r2, r6
 80138e4:	4629      	mov	r1, r5
 80138e6:	f843 7d18 	str.w	r7, [r3, #-24]!
 80138ea:	f7ff f9ad 	bl	8012c48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80138ee:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80138f2:	9b04      	ldr	r3, [sp, #16]
 80138f4:	4298      	cmp	r0, r3
 80138f6:	d011      	beq.n	801391c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 80138f8:	4b1e      	ldr	r3, [pc, #120]	; (8013974 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 80138fa:	a906      	add	r1, sp, #24
 80138fc:	f8ad 701e 	strh.w	r7, [sp, #30]
 8013900:	9306      	str	r3, [sp, #24]
 8013902:	2302      	movs	r3, #2
 8013904:	f8ad 7020 	strh.w	r7, [sp, #32]
 8013908:	f88d 301c 	strb.w	r3, [sp, #28]
 801390c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013910:	6803      	ldr	r3, [r0, #0]
 8013912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013914:	4798      	blx	r3
 8013916:	2301      	movs	r3, #1
 8013918:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 801391c:	b00b      	add	sp, #44	; 0x2c
 801391e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013922:	2700      	movs	r7, #0
 8013924:	e79f      	b.n	8013866 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13a>
 8013926:	2101      	movs	r1, #1
 8013928:	e7c0      	b.n	80138ac <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 801392a:	2201      	movs	r2, #1
 801392c:	e7cb      	b.n	80138c6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 801392e:	f1bc 0f00 	cmp.w	ip, #0
 8013932:	f47f af56 	bne.w	80137e2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8013936:	428b      	cmp	r3, r1
 8013938:	f43f af53 	beq.w	80137e2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801393c:	4602      	mov	r2, r0
 801393e:	f8df c038 	ldr.w	ip, [pc, #56]	; 8013978 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>
 8013942:	f8ad 0020 	strh.w	r0, [sp, #32]
 8013946:	f8cd c018 	str.w	ip, [sp, #24]
 801394a:	f04f 0c00 	mov.w	ip, #0
 801394e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013952:	f8ad 101e 	strh.w	r1, [sp, #30]
 8013956:	a906      	add	r1, sp, #24
 8013958:	f88d c01c 	strb.w	ip, [sp, #28]
 801395c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013960:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8013964:	6803      	ldr	r3, [r0, #0]
 8013966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013968:	4798      	blx	r3
 801396a:	e73a      	b.n	80137e2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 801396c:	428b      	cmp	r3, r1
 801396e:	f43f af35 	beq.w	80137dc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 8013972:	e7e4      	b.n	801393e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8013974:	0802656c 	.word	0x0802656c
 8013978:	08026580 	.word	0x08026580

0801397c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801397e:	4604      	mov	r4, r0
 8013980:	4608      	mov	r0, r1
 8013982:	460d      	mov	r5, r1
 8013984:	f7ff fab5 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013988:	b978      	cbnz	r0, 80139aa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801398a:	4620      	mov	r0, r4
 801398c:	f7ff fab1 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013990:	f9b5 6000 	ldrsh.w	r6, [r5]
 8013994:	b150      	cbz	r0, 80139ac <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8013996:	8026      	strh	r6, [r4, #0]
 8013998:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801399c:	8063      	strh	r3, [r4, #2]
 801399e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80139a2:	80a3      	strh	r3, [r4, #4]
 80139a4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80139a8:	80e3      	strh	r3, [r4, #6]
 80139aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139ac:	f9b4 1000 	ldrsh.w	r1, [r4]
 80139b0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80139b4:	42b1      	cmp	r1, r6
 80139b6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80139ba:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80139be:	460f      	mov	r7, r1
 80139c0:	88ed      	ldrh	r5, [r5, #6]
 80139c2:	bfa8      	it	ge
 80139c4:	4637      	movge	r7, r6
 80139c6:	4293      	cmp	r3, r2
 80139c8:	4618      	mov	r0, r3
 80139ca:	4466      	add	r6, ip
 80139cc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80139d0:	bfa8      	it	ge
 80139d2:	4610      	movge	r0, r2
 80139d4:	442a      	add	r2, r5
 80139d6:	88e5      	ldrh	r5, [r4, #6]
 80139d8:	4461      	add	r1, ip
 80139da:	b236      	sxth	r6, r6
 80139dc:	8027      	strh	r7, [r4, #0]
 80139de:	442b      	add	r3, r5
 80139e0:	b209      	sxth	r1, r1
 80139e2:	b212      	sxth	r2, r2
 80139e4:	8060      	strh	r0, [r4, #2]
 80139e6:	b21b      	sxth	r3, r3
 80139e8:	428e      	cmp	r6, r1
 80139ea:	bfac      	ite	ge
 80139ec:	ebc7 0106 	rsbge	r1, r7, r6
 80139f0:	ebc7 0101 	rsblt	r1, r7, r1
 80139f4:	429a      	cmp	r2, r3
 80139f6:	bfac      	ite	ge
 80139f8:	ebc0 0202 	rsbge	r2, r0, r2
 80139fc:	ebc0 0203 	rsblt	r2, r0, r3
 8013a00:	80a1      	strh	r1, [r4, #4]
 8013a02:	80e2      	strh	r2, [r4, #6]
 8013a04:	e7d1      	b.n	80139aa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08013a06 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 8013a06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013a08:	4604      	mov	r4, r0
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8013a10:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8013a14:	680b      	ldr	r3, [r1, #0]
 8013a16:	8022      	strh	r2, [r4, #0]
 8013a18:	8062      	strh	r2, [r4, #2]
 8013a1a:	80e0      	strh	r0, [r4, #6]
 8013a1c:	4668      	mov	r0, sp
 8013a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013a22:	80a5      	strh	r5, [r4, #4]
 8013a24:	4798      	blx	r3
 8013a26:	4620      	mov	r0, r4
 8013a28:	4669      	mov	r1, sp
 8013a2a:	f7ff ffa7 	bl	801397c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013a2e:	4620      	mov	r0, r4
 8013a30:	b003      	add	sp, #12
 8013a32:	bd30      	pop	{r4, r5, pc}

08013a34 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 8013a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a36:	2300      	movs	r3, #0
 8013a38:	4605      	mov	r5, r0
 8013a3a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013a3c:	f101 0738 	add.w	r7, r1, #56	; 0x38
 8013a40:	f101 0664 	add.w	r6, r1, #100	; 0x64
 8013a44:	8003      	strh	r3, [r0, #0]
 8013a46:	8043      	strh	r3, [r0, #2]
 8013a48:	8083      	strh	r3, [r0, #4]
 8013a4a:	80c3      	strh	r3, [r0, #6]
 8013a4c:	b164      	cbz	r4, 8013a68 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 8013a4e:	42bc      	cmp	r4, r7
 8013a50:	d008      	beq.n	8013a64 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013a52:	42b4      	cmp	r4, r6
 8013a54:	d006      	beq.n	8013a64 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013a56:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013a5a:	b11b      	cbz	r3, 8013a64 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 8013a5c:	1d21      	adds	r1, r4, #4
 8013a5e:	4628      	mov	r0, r5
 8013a60:	f7ff ff8c 	bl	801397c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013a64:	69a4      	ldr	r4, [r4, #24]
 8013a66:	e7f1      	b.n	8013a4c <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 8013a68:	4628      	mov	r0, r5
 8013a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013a6c <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 8013a6c:	b530      	push	{r4, r5, lr}
 8013a6e:	2500      	movs	r5, #0
 8013a70:	6283      	str	r3, [r0, #40]	; 0x28
 8013a72:	8101      	strh	r1, [r0, #8]
 8013a74:	8085      	strh	r5, [r0, #4]
 8013a76:	80c5      	strh	r5, [r0, #6]
 8013a78:	8185      	strh	r5, [r0, #12]
 8013a7a:	81c5      	strh	r5, [r0, #14]
 8013a7c:	8205      	strh	r5, [r0, #16]
 8013a7e:	8245      	strh	r5, [r0, #18]
 8013a80:	61c5      	str	r5, [r0, #28]
 8013a82:	8405      	strh	r5, [r0, #32]
 8013a84:	8445      	strh	r5, [r0, #34]	; 0x22
 8013a86:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8013a8a:	8142      	strh	r2, [r0, #10]
 8013a8c:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013a90:	2501      	movs	r5, #1
 8013a92:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8013a96:	4d03      	ldr	r5, [pc, #12]	; (8013aa4 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 8013a98:	6005      	str	r5, [r0, #0]
 8013a9a:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8013a9e:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 8013aa2:	bd30      	pop	{r4, r5, pc}
 8013aa4:	08026818 	.word	0x08026818

08013aa8 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8013aa8:	4b2f      	ldr	r3, [pc, #188]	; (8013b68 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 8013aaa:	2278      	movs	r2, #120	; 0x78
 8013aac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013aae:	6003      	str	r3, [r0, #0]
 8013ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ab4:	2500      	movs	r5, #0
 8013ab6:	2601      	movs	r6, #1
 8013ab8:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013aba:	2111      	movs	r1, #17
 8013abc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ac0:	4604      	mov	r4, r0
 8013ac2:	8085      	strh	r5, [r0, #4]
 8013ac4:	80c5      	strh	r5, [r0, #6]
 8013ac6:	8105      	strh	r5, [r0, #8]
 8013ac8:	8145      	strh	r5, [r0, #10]
 8013aca:	8185      	strh	r5, [r0, #12]
 8013acc:	81c5      	strh	r5, [r0, #14]
 8013ace:	8205      	strh	r5, [r0, #16]
 8013ad0:	8245      	strh	r5, [r0, #18]
 8013ad2:	61c5      	str	r5, [r0, #28]
 8013ad4:	8405      	strh	r5, [r0, #32]
 8013ad6:	8445      	strh	r5, [r0, #34]	; 0x22
 8013ad8:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8013adc:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
 8013ae0:	6285      	str	r5, [r0, #40]	; 0x28
 8013ae2:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8013ae6:	6303      	str	r3, [r0, #48]	; 0x30
 8013ae8:	8681      	strh	r1, [r0, #52]	; 0x34
 8013aea:	4629      	mov	r1, r5
 8013aec:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
 8013af0:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013af4:	9200      	str	r2, [sp, #0]
 8013af6:	3038      	adds	r0, #56	; 0x38
 8013af8:	462a      	mov	r2, r5
 8013afa:	f7ff ffb7 	bl	8013a6c <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8013afe:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8013b02:	462a      	mov	r2, r5
 8013b04:	4629      	mov	r1, r5
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8013b0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013b0e:	f7ff ffad 	bl	8013a6c <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8013b12:	2305      	movs	r3, #5
 8013b14:	4620      	mov	r0, r4
 8013b16:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 8013b1a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8013b1e:	4b13      	ldr	r3, [pc, #76]	; (8013b6c <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 8013b20:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8013b24:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 8013b28:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 8013b2c:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8013b30:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 8013b34:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8013b38:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 8013b3c:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8013b40:	f8a4 50b2 	strh.w	r5, [r4, #178]	; 0xb2
 8013b44:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
 8013b48:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 8013b4c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8013b50:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 8013b54:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 8013b58:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8013b5c:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 8013b60:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 8013b64:	b002      	add	sp, #8
 8013b66:	bd70      	pop	{r4, r5, r6, pc}
 8013b68:	08026594 	.word	0x08026594
 8013b6c:	00010007 	.word	0x00010007

08013b70 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 8013b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b72:	2600      	movs	r6, #0
 8013b74:	f891 30a4 	ldrb.w	r3, [r1, #164]	; 0xa4
 8013b78:	4605      	mov	r5, r0
 8013b7a:	460c      	mov	r4, r1
 8013b7c:	8006      	strh	r6, [r0, #0]
 8013b7e:	8046      	strh	r6, [r0, #2]
 8013b80:	8086      	strh	r6, [r0, #4]
 8013b82:	80c6      	strh	r6, [r0, #6]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d041      	beq.n	8013c0c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8013b88:	680b      	ldr	r3, [r1, #0]
 8013b8a:	4668      	mov	r0, sp
 8013b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b90:	4798      	blx	r3
 8013b92:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8013b96:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d039      	beq.n	8013c12 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 8013b9e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013ba2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	dd05      	ble.n	8013bb6 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>
 8013baa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013bae:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013bb2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013bb6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013bba:	42bb      	cmp	r3, r7
 8013bbc:	da26      	bge.n	8013c0c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 8013bbe:	f9bd 0000 	ldrsh.w	r0, [sp]
 8013bc2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013bc6:	4242      	negs	r2, r0
 8013bc8:	4438      	add	r0, r7
 8013bca:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 8013bce:	b200      	sxth	r0, r0
 8013bd0:	435a      	muls	r2, r3
 8013bd2:	1b9e      	subs	r6, r3, r6
 8013bd4:	1ac0      	subs	r0, r0, r3
 8013bd6:	4343      	muls	r3, r0
 8013bd8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8013bdc:	fb92 f2f7 	sdiv	r2, r2, r7
 8013be0:	fb93 f3f7 	sdiv	r3, r3, r7
 8013be4:	4413      	add	r3, r2
 8013be6:	0047      	lsls	r7, r0, #1
 8013be8:	1af3      	subs	r3, r6, r3
 8013bea:	429f      	cmp	r7, r3
 8013bec:	dd05      	ble.n	8013bfa <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 8013bee:	1afb      	subs	r3, r7, r3
 8013bf0:	4353      	muls	r3, r2
 8013bf2:	fb93 f3f6 	sdiv	r3, r3, r6
 8013bf6:	1ad2      	subs	r2, r2, r3
 8013bf8:	463b      	mov	r3, r7
 8013bfa:	b289      	uxth	r1, r1
 8013bfc:	8964      	ldrh	r4, [r4, #10]
 8013bfe:	80ab      	strh	r3, [r5, #4]
 8013c00:	180e      	adds	r6, r1, r0
 8013c02:	4411      	add	r1, r2
 8013c04:	80e8      	strh	r0, [r5, #6]
 8013c06:	1ba4      	subs	r4, r4, r6
 8013c08:	8029      	strh	r1, [r5, #0]
 8013c0a:	806c      	strh	r4, [r5, #2]
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	b003      	add	sp, #12
 8013c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c12:	461e      	mov	r6, r3
 8013c14:	e7cf      	b.n	8013bb6 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>

08013c16 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 8013c16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c18:	2600      	movs	r6, #0
 8013c1a:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
 8013c1e:	4605      	mov	r5, r0
 8013c20:	460c      	mov	r4, r1
 8013c22:	8006      	strh	r6, [r0, #0]
 8013c24:	8046      	strh	r6, [r0, #2]
 8013c26:	8086      	strh	r6, [r0, #4]
 8013c28:	80c6      	strh	r6, [r0, #6]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d041      	beq.n	8013cb2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8013c2e:	680b      	ldr	r3, [r1, #0]
 8013c30:	4668      	mov	r0, sp
 8013c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c36:	4798      	blx	r3
 8013c38:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8013c3c:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d039      	beq.n	8013cb8 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 8013c44:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013c48:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	dd05      	ble.n	8013c5c <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>
 8013c50:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013c54:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013c58:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8013c5c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013c60:	42bb      	cmp	r3, r7
 8013c62:	da26      	bge.n	8013cb2 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 8013c64:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8013c68:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013c6c:	4242      	negs	r2, r0
 8013c6e:	4438      	add	r0, r7
 8013c70:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 8013c74:	b200      	sxth	r0, r0
 8013c76:	435a      	muls	r2, r3
 8013c78:	1b9e      	subs	r6, r3, r6
 8013c7a:	1ac0      	subs	r0, r0, r3
 8013c7c:	4343      	muls	r3, r0
 8013c7e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8013c82:	fb92 f2f7 	sdiv	r2, r2, r7
 8013c86:	fb93 f3f7 	sdiv	r3, r3, r7
 8013c8a:	4413      	add	r3, r2
 8013c8c:	0047      	lsls	r7, r0, #1
 8013c8e:	1af3      	subs	r3, r6, r3
 8013c90:	429f      	cmp	r7, r3
 8013c92:	dd05      	ble.n	8013ca0 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 8013c94:	1afb      	subs	r3, r7, r3
 8013c96:	4353      	muls	r3, r2
 8013c98:	fb93 f3f6 	sdiv	r3, r3, r6
 8013c9c:	1ad2      	subs	r2, r2, r3
 8013c9e:	463b      	mov	r3, r7
 8013ca0:	b289      	uxth	r1, r1
 8013ca2:	8924      	ldrh	r4, [r4, #8]
 8013ca4:	80a8      	strh	r0, [r5, #4]
 8013ca6:	180e      	adds	r6, r1, r0
 8013ca8:	4411      	add	r1, r2
 8013caa:	80eb      	strh	r3, [r5, #6]
 8013cac:	1ba4      	subs	r4, r4, r6
 8013cae:	8069      	strh	r1, [r5, #2]
 8013cb0:	802c      	strh	r4, [r5, #0]
 8013cb2:	4628      	mov	r0, r5
 8013cb4:	b003      	add	sp, #12
 8013cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cb8:	461e      	mov	r6, r3
 8013cba:	e7cf      	b.n	8013c5c <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>

08013cbc <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 8013cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cc0:	4617      	mov	r7, r2
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	4604      	mov	r4, r0
 8013cc6:	460e      	mov	r6, r1
 8013cc8:	8002      	strh	r2, [r0, #0]
 8013cca:	4698      	mov	r8, r3
 8013ccc:	8042      	strh	r2, [r0, #2]
 8013cce:	8082      	strh	r2, [r0, #4]
 8013cd0:	80c2      	strh	r2, [r0, #6]
 8013cd2:	4638      	mov	r0, r7
 8013cd4:	f7ff f90d 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013cd8:	4605      	mov	r5, r0
 8013cda:	b998      	cbnz	r0, 8013d04 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 8013cdc:	4640      	mov	r0, r8
 8013cde:	f7ff f908 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013ce2:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8013ce6:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 8013cea:	b908      	cbnz	r0, 8013cf0 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 8013cec:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8013cf0:	8933      	ldrh	r3, [r6, #8]
 8013cf2:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8013cf6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8013cfa:	8022      	strh	r2, [r4, #0]
 8013cfc:	8067      	strh	r7, [r4, #2]
 8013cfe:	1b58      	subs	r0, r3, r5
 8013d00:	80e1      	strh	r1, [r4, #6]
 8013d02:	80a0      	strh	r0, [r4, #4]
 8013d04:	4620      	mov	r0, r4
 8013d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d0a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 8013d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d0e:	4604      	mov	r4, r0
 8013d10:	2000      	movs	r0, #0
 8013d12:	460f      	mov	r7, r1
 8013d14:	4616      	mov	r6, r2
 8013d16:	8020      	strh	r0, [r4, #0]
 8013d18:	4698      	mov	r8, r3
 8013d1a:	8060      	strh	r0, [r4, #2]
 8013d1c:	80a0      	strh	r0, [r4, #4]
 8013d1e:	80e0      	strh	r0, [r4, #6]
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7ff f8e6 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d26:	4605      	mov	r5, r0
 8013d28:	b998      	cbnz	r0, 8013d52 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 8013d2a:	4630      	mov	r0, r6
 8013d2c:	f7ff f8e1 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d30:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 8013d34:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013d38:	b908      	cbnz	r0, 8013d3e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 8013d3a:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 8013d3e:	897a      	ldrh	r2, [r7, #10]
 8013d40:	f8b8 3000 	ldrh.w	r3, [r8]
 8013d44:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 8013d48:	8066      	strh	r6, [r4, #2]
 8013d4a:	8023      	strh	r3, [r4, #0]
 8013d4c:	1b50      	subs	r0, r2, r5
 8013d4e:	80a1      	strh	r1, [r4, #4]
 8013d50:	80e0      	strh	r0, [r4, #6]
 8013d52:	4620      	mov	r0, r4
 8013d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d58 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 8013d58:	b570      	push	{r4, r5, r6, lr}
 8013d5a:	b088      	sub	sp, #32
 8013d5c:	4604      	mov	r4, r0
 8013d5e:	4601      	mov	r1, r0
 8013d60:	4668      	mov	r0, sp
 8013d62:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8013d66:	f7ff ff03 	bl	8013b70 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 8013d6a:	4621      	mov	r1, r4
 8013d6c:	a802      	add	r0, sp, #8
 8013d6e:	f7ff ff52 	bl	8013c16 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 8013d72:	ab02      	add	r3, sp, #8
 8013d74:	466a      	mov	r2, sp
 8013d76:	4621      	mov	r1, r4
 8013d78:	a804      	add	r0, sp, #16
 8013d7a:	f7ff ff9f 	bl	8013cbc <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 8013d7e:	ab02      	add	r3, sp, #8
 8013d80:	466a      	mov	r2, sp
 8013d82:	4621      	mov	r1, r4
 8013d84:	a806      	add	r0, sp, #24
 8013d86:	f7ff ffc0 	bl	8013d0a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 8013d8a:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8013d8e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8013d92:	429a      	cmp	r2, r3
 8013d94:	da02      	bge.n	8013d9c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8013d96:	4630      	mov	r0, r6
 8013d98:	f004 fe52 	bl	8018a40 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013d9c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8013da0:	f104 0564 	add.w	r5, r4, #100	; 0x64
 8013da4:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8013da8:	429a      	cmp	r2, r3
 8013daa:	da02      	bge.n	8013db2 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 8013dac:	4628      	mov	r0, r5
 8013dae:	f004 fe47 	bl	8018a40 <_ZNK8touchgfx8Drawable10invalidateEv>
 8013db2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013db6:	f8bd 0000 	ldrh.w	r0, [sp]
 8013dba:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8013dbe:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013dc2:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8013dc4:	4630      	mov	r0, r6
 8013dc6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8013dc8:	f7ff fa10 	bl	80131ec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013dcc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8013dd0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8013dd4:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8013dd8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8013ddc:	4628      	mov	r0, r5
 8013dde:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8013de2:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8013de6:	f7ff fa01 	bl	80131ec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013dea:	8922      	ldrh	r2, [r4, #8]
 8013dec:	2300      	movs	r3, #0
 8013dee:	a804      	add	r0, sp, #16
 8013df0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013df4:	8962      	ldrh	r2, [r4, #10]
 8013df6:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013dfa:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013dfe:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013e02:	f7ff f876 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013e06:	b920      	cbnz	r0, 8013e12 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8013e08:	6823      	ldr	r3, [r4, #0]
 8013e0a:	a904      	add	r1, sp, #16
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	691b      	ldr	r3, [r3, #16]
 8013e10:	4798      	blx	r3
 8013e12:	a806      	add	r0, sp, #24
 8013e14:	f7ff f86d 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013e18:	b920      	cbnz	r0, 8013e24 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 8013e1a:	6823      	ldr	r3, [r4, #0]
 8013e1c:	a906      	add	r1, sp, #24
 8013e1e:	4620      	mov	r0, r4
 8013e20:	691b      	ldr	r3, [r3, #16]
 8013e22:	4798      	blx	r3
 8013e24:	b008      	add	sp, #32
 8013e26:	bd70      	pop	{r4, r5, r6, pc}

08013e28 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8013e28:	b570      	push	{r4, r5, r6, lr}
 8013e2a:	790b      	ldrb	r3, [r1, #4]
 8013e2c:	b08a      	sub	sp, #40	; 0x28
 8013e2e:	4604      	mov	r4, r0
 8013e30:	460d      	mov	r5, r1
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d17e      	bne.n	8013f34 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10c>
 8013e36:	2201      	movs	r2, #1
 8013e38:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 8013e3c:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 8013e40:	b142      	cbz	r2, 8013e54 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2c>
 8013e42:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8013e46:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
 8013e4a:	f003 fe25 	bl	8017a98 <_ZN8touchgfx11Application11getInstanceEv>
 8013e4e:	4621      	mov	r1, r4
 8013e50:	f003 fe4d 	bl	8017aee <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8013e54:	4623      	mov	r3, r4
 8013e56:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013e5a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8013e5e:	f853 0bb4 	ldr.w	r0, [r3], #180
 8013e62:	9301      	str	r3, [sp, #4]
 8013e64:	f104 03b2 	add.w	r3, r4, #178	; 0xb2
 8013e68:	9300      	str	r3, [sp, #0]
 8013e6a:	f104 0390 	add.w	r3, r4, #144	; 0x90
 8013e6e:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8013e70:	4620      	mov	r0, r4
 8013e72:	47b0      	blx	r6
 8013e74:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8013e78:	42a3      	cmp	r3, r4
 8013e7a:	bf04      	itt	eq
 8013e7c:	2300      	moveq	r3, #0
 8013e7e:	f8c4 3090 	streq.w	r3, [r4, #144]	; 0x90
 8013e82:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8013e86:	2900      	cmp	r1, #0
 8013e88:	d03a      	beq.n	8013f00 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 8013e8a:	2600      	movs	r6, #0
 8013e8c:	a803      	add	r0, sp, #12
 8013e8e:	f884 60b6 	strb.w	r6, [r4, #182]	; 0xb6
 8013e92:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013e96:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8013e9a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8013e9e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8013ea2:	f004 fe69 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ea6:	4621      	mov	r1, r4
 8013ea8:	a805      	add	r0, sp, #20
 8013eaa:	f004 fe65 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013eae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013eb2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013eb6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8013eba:	1ad2      	subs	r2, r2, r3
 8013ebc:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8013ec0:	7929      	ldrb	r1, [r5, #4]
 8013ec2:	441a      	add	r2, r3
 8013ec4:	88eb      	ldrh	r3, [r5, #6]
 8013ec6:	f88d 1020 	strb.w	r1, [sp, #32]
 8013eca:	a907      	add	r1, sp, #28
 8013ecc:	441a      	add	r2, r3
 8013ece:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013ed2:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8013ed6:	1a1b      	subs	r3, r3, r0
 8013ed8:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8013edc:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8013ee0:	4403      	add	r3, r0
 8013ee2:	8928      	ldrh	r0, [r5, #8]
 8013ee4:	4403      	add	r3, r0
 8013ee6:	482f      	ldr	r0, [pc, #188]	; (8013fa4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8013ee8:	9007      	str	r0, [sp, #28]
 8013eea:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013eee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013ef2:	6803      	ldr	r3, [r0, #0]
 8013ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ef6:	4798      	blx	r3
 8013ef8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8013efc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8013f00:	2300      	movs	r3, #0
 8013f02:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 8013f06:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8013f0a:	b112      	cbz	r2, 8013f12 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xea>
 8013f0c:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8013f10:	b90b      	cbnz	r3, 8013f16 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xee>
 8013f12:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8013f16:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8013f1a:	b112      	cbz	r2, 8013f22 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfa>
 8013f1c:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8013f20:	b90b      	cbnz	r3, 8013f26 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfe>
 8013f22:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8013f26:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	f7ff ff14 	bl	8013d58 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8013f30:	b00a      	add	sp, #40	; 0x28
 8013f32:	bd70      	pop	{r4, r5, r6, pc}
 8013f34:	2b02      	cmp	r3, #2
 8013f36:	d0fb      	beq.n	8013f30 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x108>
 8013f38:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 8013f3c:	b361      	cbz	r1, 8013f98 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x170>
 8013f3e:	a803      	add	r0, sp, #12
 8013f40:	f004 fe1a 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f44:	4621      	mov	r1, r4
 8013f46:	a805      	add	r0, sp, #20
 8013f48:	f004 fe16 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f4c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013f50:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013f54:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8013f58:	1ad2      	subs	r2, r2, r3
 8013f5a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8013f5e:	7929      	ldrb	r1, [r5, #4]
 8013f60:	441a      	add	r2, r3
 8013f62:	88eb      	ldrh	r3, [r5, #6]
 8013f64:	f88d 1020 	strb.w	r1, [sp, #32]
 8013f68:	a907      	add	r1, sp, #28
 8013f6a:	441a      	add	r2, r3
 8013f6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013f70:	1a1b      	subs	r3, r3, r0
 8013f72:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8013f76:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8013f7a:	4403      	add	r3, r0
 8013f7c:	8928      	ldrh	r0, [r5, #8]
 8013f7e:	4403      	add	r3, r0
 8013f80:	4808      	ldr	r0, [pc, #32]	; (8013fa4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8013f82:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013f86:	2300      	movs	r3, #0
 8013f88:	9007      	str	r0, [sp, #28]
 8013f8a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013f8e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013f92:	6803      	ldr	r3, [r0, #0]
 8013f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f96:	4798      	blx	r3
 8013f98:	2300      	movs	r3, #0
 8013f9a:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
 8013f9e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8013fa2:	e7ad      	b.n	8013f00 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 8013fa4:	0802656c 	.word	0x0802656c

08013fa8 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8013fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013faa:	4606      	mov	r6, r0
 8013fac:	4615      	mov	r5, r2
 8013fae:	460c      	mov	r4, r1
 8013fb0:	b919      	cbnz	r1, 8013fba <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8013fb2:	b912      	cbnz	r2, 8013fba <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8013fb4:	2000      	movs	r0, #0
 8013fb6:	b003      	add	sp, #12
 8013fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fba:	6833      	ldr	r3, [r6, #0]
 8013fbc:	4631      	mov	r1, r6
 8013fbe:	4668      	mov	r0, sp
 8013fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013fc4:	4798      	blx	r3
 8013fc6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8013fca:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8013fce:	f9bd 2000 	ldrsh.w	r2, [sp]
 8013fd2:	4288      	cmp	r0, r1
 8013fd4:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8013fd8:	da2c      	bge.n	8014034 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8c>
 8013fda:	2c00      	cmp	r4, #0
 8013fdc:	dd20      	ble.n	8014020 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x78>
 8013fde:	1913      	adds	r3, r2, r4
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	dd01      	ble.n	8013fe8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8013fe4:	4252      	negs	r2, r2
 8013fe6:	b214      	sxth	r4, r2
 8013fe8:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8013fec:	4297      	cmp	r7, r2
 8013fee:	dd2c      	ble.n	801404a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8013ff0:	2d00      	cmp	r5, #0
 8013ff2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013ff6:	dd1f      	ble.n	8014038 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x90>
 8013ff8:	195a      	adds	r2, r3, r5
 8013ffa:	2a00      	cmp	r2, #0
 8013ffc:	dd04      	ble.n	8014008 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8013ffe:	425b      	negs	r3, r3
 8014000:	b21d      	sxth	r5, r3
 8014002:	b90c      	cbnz	r4, 8014008 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8014004:	2d00      	cmp	r5, #0
 8014006:	d0d5      	beq.n	8013fb4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8014008:	6833      	ldr	r3, [r6, #0]
 801400a:	462a      	mov	r2, r5
 801400c:	4621      	mov	r1, r4
 801400e:	4630      	mov	r0, r6
 8014010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014014:	4798      	blx	r3
 8014016:	4630      	mov	r0, r6
 8014018:	f7ff fe9e 	bl	8013d58 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 801401c:	2001      	movs	r0, #1
 801401e:	e7ca      	b.n	8013fb6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 8014020:	d0e2      	beq.n	8013fe8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8014022:	440a      	add	r2, r1
 8014024:	b292      	uxth	r2, r2
 8014026:	fa04 f382 	sxtah	r3, r4, r2
 801402a:	4283      	cmp	r3, r0
 801402c:	dadc      	bge.n	8013fe8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 801402e:	1a84      	subs	r4, r0, r2
 8014030:	b224      	sxth	r4, r4
 8014032:	e7d9      	b.n	8013fe8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8014034:	2400      	movs	r4, #0
 8014036:	e7d7      	b.n	8013fe8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8014038:	d007      	beq.n	801404a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 801403a:	443b      	add	r3, r7
 801403c:	b29b      	uxth	r3, r3
 801403e:	fa05 f183 	sxtah	r1, r5, r3
 8014042:	4291      	cmp	r1, r2
 8014044:	dae0      	bge.n	8014008 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8014046:	1ad3      	subs	r3, r2, r3
 8014048:	e7da      	b.n	8014000 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x58>
 801404a:	2c00      	cmp	r4, #0
 801404c:	d0b2      	beq.n	8013fb4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 801404e:	2500      	movs	r5, #0
 8014050:	e7da      	b.n	8014008 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>

08014052 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 8014052:	b513      	push	{r0, r1, r4, lr}
 8014054:	6803      	ldr	r3, [r0, #0]
 8014056:	4601      	mov	r1, r0
 8014058:	4604      	mov	r4, r0
 801405a:	4668      	mov	r0, sp
 801405c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014060:	4798      	blx	r3
 8014062:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8014066:	f9bd 1000 	ldrsh.w	r1, [sp]
 801406a:	2800      	cmp	r0, #0
 801406c:	dd20      	ble.n	80140b0 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 801406e:	4602      	mov	r2, r0
 8014070:	2900      	cmp	r1, #0
 8014072:	dc0e      	bgt.n	8014092 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 8014074:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014078:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801407c:	440b      	add	r3, r1
 801407e:	b21b      	sxth	r3, r3
 8014080:	4298      	cmp	r0, r3
 8014082:	dd04      	ble.n	801408e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 8014084:	1a1b      	subs	r3, r3, r0
 8014086:	4299      	cmp	r1, r3
 8014088:	bfb8      	it	lt
 801408a:	4619      	movlt	r1, r3
 801408c:	b909      	cbnz	r1, 8014092 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 801408e:	b1f2      	cbz	r2, 80140ce <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 8014090:	2100      	movs	r1, #0
 8014092:	6823      	ldr	r3, [r4, #0]
 8014094:	4252      	negs	r2, r2
 8014096:	4249      	negs	r1, r1
 8014098:	4620      	mov	r0, r4
 801409a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801409e:	b212      	sxth	r2, r2
 80140a0:	b209      	sxth	r1, r1
 80140a2:	4798      	blx	r3
 80140a4:	4620      	mov	r0, r4
 80140a6:	b002      	add	sp, #8
 80140a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140ac:	f7ff be54 	b.w	8013d58 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80140b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80140b4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80140b8:	4403      	add	r3, r0
 80140ba:	b21b      	sxth	r3, r3
 80140bc:	429a      	cmp	r2, r3
 80140be:	dd04      	ble.n	80140ca <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 80140c0:	1a9a      	subs	r2, r3, r2
 80140c2:	4282      	cmp	r2, r0
 80140c4:	bfb8      	it	lt
 80140c6:	4602      	movlt	r2, r0
 80140c8:	e7d2      	b.n	8014070 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 80140ca:	2200      	movs	r2, #0
 80140cc:	e7d0      	b.n	8014070 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 80140ce:	b002      	add	sp, #8
 80140d0:	bd10      	pop	{r4, pc}

080140d2 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 80140d2:	6301      	str	r1, [r0, #48]	; 0x30
 80140d4:	6601      	str	r1, [r0, #96]	; 0x60
 80140d6:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 80140da:	4770      	bx	lr

080140dc <_ZN8touchgfx19ScrollableContainer18setScrollbarsAlphaEh>:
 80140dc:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 80140e0:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
 80140e4:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
 80140e8:	4770      	bx	lr

080140ea <_ZN8touchgfx19ScrollableContainer19setScrollbarPaddingEh>:
 80140ea:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 80140ee:	4770      	bx	lr

080140f0 <_ZN8touchgfx19ScrollableContainer17setScrollbarWidthEh>:
 80140f0:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 80140f4:	4770      	bx	lr

080140f6 <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>:
 80140f6:	2201      	movs	r2, #1
 80140f8:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
 80140fc:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
 8014100:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 8014104:	f7ff be28 	b.w	8013d58 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

08014108 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8014108:	4770      	bx	lr

0801410a <_ZN8touchgfx3HAL10FlushCacheEv>:
 801410a:	4770      	bx	lr

0801410c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801410c:	6803      	ldr	r3, [r0, #0]
 801410e:	b513      	push	{r0, r1, r4, lr}
 8014110:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8014114:	2300      	movs	r3, #0
 8014116:	e9cd 3300 	strd	r3, r3, [sp]
 801411a:	466b      	mov	r3, sp
 801411c:	47a0      	blx	r4
 801411e:	b002      	add	sp, #8
 8014120:	bd10      	pop	{r4, pc}

08014122 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014122:	2301      	movs	r3, #1
 8014124:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014128:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801412c:	4770      	bx	lr

0801412e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801412e:	2301      	movs	r3, #1
 8014130:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8014134:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8014138:	4770      	bx	lr

0801413a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801413a:	6843      	ldr	r3, [r0, #4]
 801413c:	2201      	movs	r2, #1
 801413e:	725a      	strb	r2, [r3, #9]
 8014140:	6840      	ldr	r0, [r0, #4]
 8014142:	6803      	ldr	r3, [r0, #0]
 8014144:	691b      	ldr	r3, [r3, #16]
 8014146:	4718      	bx	r3

08014148 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014148:	6840      	ldr	r0, [r0, #4]
 801414a:	6803      	ldr	r3, [r0, #0]
 801414c:	689b      	ldr	r3, [r3, #8]
 801414e:	4718      	bx	r3

08014150 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8014150:	b530      	push	{r4, r5, lr}
 8014152:	b08b      	sub	sp, #44	; 0x2c
 8014154:	6804      	ldr	r4, [r0, #0]
 8014156:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801415a:	9509      	str	r5, [sp, #36]	; 0x24
 801415c:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8014160:	9508      	str	r5, [sp, #32]
 8014162:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8014166:	9507      	str	r5, [sp, #28]
 8014168:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801416c:	9506      	str	r5, [sp, #24]
 801416e:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8014172:	9505      	str	r5, [sp, #20]
 8014174:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8014178:	9504      	str	r5, [sp, #16]
 801417a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801417e:	9503      	str	r5, [sp, #12]
 8014180:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014184:	9502      	str	r5, [sp, #8]
 8014186:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801418a:	e9cd 3500 	strd	r3, r5, [sp]
 801418e:	4613      	mov	r3, r2
 8014190:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8014192:	2200      	movs	r2, #0
 8014194:	47a0      	blx	r4
 8014196:	b00b      	add	sp, #44	; 0x2c
 8014198:	bd30      	pop	{r4, r5, pc}
	...

0801419c <_ZN8touchgfx3HAL10beginFrameEv>:
 801419c:	4b04      	ldr	r3, [pc, #16]	; (80141b0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	b123      	cbz	r3, 80141ac <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80141a2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80141a6:	f080 0001 	eor.w	r0, r0, #1
 80141aa:	4770      	bx	lr
 80141ac:	2001      	movs	r0, #1
 80141ae:	4770      	bx	lr
 80141b0:	2400f43e 	.word	0x2400f43e

080141b4 <_ZN8touchgfx3HAL8endFrameEv>:
 80141b4:	b510      	push	{r4, lr}
 80141b6:	4604      	mov	r4, r0
 80141b8:	6840      	ldr	r0, [r0, #4]
 80141ba:	6803      	ldr	r3, [r0, #0]
 80141bc:	689b      	ldr	r3, [r3, #8]
 80141be:	4798      	blx	r3
 80141c0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80141c4:	b113      	cbz	r3, 80141cc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80141c6:	2301      	movs	r3, #1
 80141c8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80141cc:	bd10      	pop	{r4, pc}

080141ce <_ZN8touchgfx3HAL10initializeEv>:
 80141ce:	b510      	push	{r4, lr}
 80141d0:	4604      	mov	r4, r0
 80141d2:	f7ec fb51 	bl	8000878 <_ZN8touchgfx10OSWrappers10initializeEv>
 80141d6:	6860      	ldr	r0, [r4, #4]
 80141d8:	6803      	ldr	r3, [r0, #0]
 80141da:	68db      	ldr	r3, [r3, #12]
 80141dc:	4798      	blx	r3
 80141de:	68e0      	ldr	r0, [r4, #12]
 80141e0:	6803      	ldr	r3, [r0, #0]
 80141e2:	689b      	ldr	r3, [r3, #8]
 80141e4:	4798      	blx	r3
 80141e6:	6823      	ldr	r3, [r4, #0]
 80141e8:	4620      	mov	r0, r4
 80141ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141f0:	4718      	bx	r3

080141f2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80141f2:	b508      	push	{r3, lr}
 80141f4:	6803      	ldr	r3, [r0, #0]
 80141f6:	4604      	mov	r4, r0
 80141f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80141fc:	4798      	blx	r3
 80141fe:	6823      	ldr	r3, [r4, #0]
 8014200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014202:	4620      	mov	r0, r4
 8014204:	4798      	blx	r3
 8014206:	f7ec fb93 	bl	8000930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801420a:	6823      	ldr	r3, [r4, #0]
 801420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801420e:	e7f8      	b.n	8014202 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08014210 <_ZN8touchgfx3HAL4tickEv>:
 8014210:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014212:	6803      	ldr	r3, [r0, #0]
 8014214:	4604      	mov	r4, r0
 8014216:	4d5b      	ldr	r5, [pc, #364]	; (8014384 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8014218:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801421c:	4798      	blx	r3
 801421e:	2800      	cmp	r0, #0
 8014220:	f000 8095 	beq.w	801434e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8014224:	2001      	movs	r0, #1
 8014226:	2600      	movs	r6, #0
 8014228:	f7ec f94c 	bl	80004c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801422c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8014230:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8014234:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014238:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801423c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8014240:	b133      	cbz	r3, 8014250 <_ZN8touchgfx3HAL4tickEv+0x40>
 8014242:	6823      	ldr	r3, [r4, #0]
 8014244:	4620      	mov	r0, r4
 8014246:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801424a:	4798      	blx	r3
 801424c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8014250:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8014254:	2601      	movs	r6, #1
 8014256:	6862      	ldr	r2, [r4, #4]
 8014258:	f083 0301 	eor.w	r3, r3, #1
 801425c:	702e      	strb	r6, [r5, #0]
 801425e:	7253      	strb	r3, [r2, #9]
 8014260:	f003 fc1a 	bl	8017a98 <_ZN8touchgfx11Application11getInstanceEv>
 8014264:	6803      	ldr	r3, [r0, #0]
 8014266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014268:	4798      	blx	r3
 801426a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801426e:	b90b      	cbnz	r3, 8014274 <_ZN8touchgfx3HAL4tickEv+0x64>
 8014270:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8014274:	f003 fc10 	bl	8017a98 <_ZN8touchgfx11Application11getInstanceEv>
 8014278:	6803      	ldr	r3, [r0, #0]
 801427a:	695b      	ldr	r3, [r3, #20]
 801427c:	4798      	blx	r3
 801427e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014280:	6803      	ldr	r3, [r0, #0]
 8014282:	691b      	ldr	r3, [r3, #16]
 8014284:	4798      	blx	r3
 8014286:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801428a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801428e:	3b01      	subs	r3, #1
 8014290:	b2db      	uxtb	r3, r3
 8014292:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014296:	b10a      	cbz	r2, 801429c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8014298:	2b00      	cmp	r3, #0
 801429a:	d1eb      	bne.n	8014274 <_ZN8touchgfx3HAL4tickEv+0x64>
 801429c:	4a3a      	ldr	r2, [pc, #232]	; (8014388 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801429e:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80142a2:	7813      	ldrb	r3, [r2, #0]
 80142a4:	3301      	adds	r3, #1
 80142a6:	b25b      	sxtb	r3, r3
 80142a8:	4299      	cmp	r1, r3
 80142aa:	7013      	strb	r3, [r2, #0]
 80142ac:	dc10      	bgt.n	80142d0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80142ae:	2300      	movs	r3, #0
 80142b0:	68e0      	ldr	r0, [r4, #12]
 80142b2:	a902      	add	r1, sp, #8
 80142b4:	7013      	strb	r3, [r2, #0]
 80142b6:	aa03      	add	r2, sp, #12
 80142b8:	6803      	ldr	r3, [r0, #0]
 80142ba:	68db      	ldr	r3, [r3, #12]
 80142bc:	4798      	blx	r3
 80142be:	6823      	ldr	r3, [r4, #0]
 80142c0:	2800      	cmp	r0, #0
 80142c2:	d050      	beq.n	8014366 <_ZN8touchgfx3HAL4tickEv+0x156>
 80142c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80142c8:	4620      	mov	r0, r4
 80142ca:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80142ce:	4798      	blx	r3
 80142d0:	2300      	movs	r3, #0
 80142d2:	6960      	ldr	r0, [r4, #20]
 80142d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80142d8:	b158      	cbz	r0, 80142f2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80142da:	6803      	ldr	r3, [r0, #0]
 80142dc:	f10d 0107 	add.w	r1, sp, #7
 80142e0:	68db      	ldr	r3, [r3, #12]
 80142e2:	4798      	blx	r3
 80142e4:	b128      	cbz	r0, 80142f2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80142e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80142ec:	6803      	ldr	r3, [r0, #0]
 80142ee:	68db      	ldr	r3, [r3, #12]
 80142f0:	4798      	blx	r3
 80142f2:	f104 001c 	add.w	r0, r4, #28
 80142f6:	f00e fc89 	bl	8022c0c <_ZN8touchgfx8Gestures4tickEv>
 80142fa:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80142fe:	b30b      	cbz	r3, 8014344 <_ZN8touchgfx3HAL4tickEv+0x134>
 8014300:	6920      	ldr	r0, [r4, #16]
 8014302:	6803      	ldr	r3, [r0, #0]
 8014304:	691b      	ldr	r3, [r3, #16]
 8014306:	4798      	blx	r3
 8014308:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801430a:	4606      	mov	r6, r0
 801430c:	b903      	cbnz	r3, 8014310 <_ZN8touchgfx3HAL4tickEv+0x100>
 801430e:	6720      	str	r0, [r4, #112]	; 0x70
 8014310:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014312:	4a1e      	ldr	r2, [pc, #120]	; (801438c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014314:	1af3      	subs	r3, r6, r3
 8014316:	4293      	cmp	r3, r2
 8014318:	d914      	bls.n	8014344 <_ZN8touchgfx3HAL4tickEv+0x134>
 801431a:	6920      	ldr	r0, [r4, #16]
 801431c:	6803      	ldr	r3, [r0, #0]
 801431e:	699b      	ldr	r3, [r3, #24]
 8014320:	4798      	blx	r3
 8014322:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014324:	2264      	movs	r2, #100	; 0x64
 8014326:	1af3      	subs	r3, r6, r3
 8014328:	fbb3 f3f2 	udiv	r3, r3, r2
 801432c:	fbb0 f0f3 	udiv	r0, r0, r3
 8014330:	2800      	cmp	r0, #0
 8014332:	dc1d      	bgt.n	8014370 <_ZN8touchgfx3HAL4tickEv+0x160>
 8014334:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8014338:	6920      	ldr	r0, [r4, #16]
 801433a:	2100      	movs	r1, #0
 801433c:	6803      	ldr	r3, [r0, #0]
 801433e:	69db      	ldr	r3, [r3, #28]
 8014340:	4798      	blx	r3
 8014342:	6726      	str	r6, [r4, #112]	; 0x70
 8014344:	f003 fba8 	bl	8017a98 <_ZN8touchgfx11Application11getInstanceEv>
 8014348:	6803      	ldr	r3, [r0, #0]
 801434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801434c:	4798      	blx	r3
 801434e:	6823      	ldr	r3, [r4, #0]
 8014350:	4620      	mov	r0, r4
 8014352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014356:	4798      	blx	r3
 8014358:	2001      	movs	r0, #1
 801435a:	f7ec f8f1 	bl	8000540 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801435e:	2300      	movs	r3, #0
 8014360:	702b      	strb	r3, [r5, #0]
 8014362:	b004      	add	sp, #16
 8014364:	bd70      	pop	{r4, r5, r6, pc}
 8014366:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801436a:	4620      	mov	r0, r4
 801436c:	4798      	blx	r3
 801436e:	e7af      	b.n	80142d0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014370:	2863      	cmp	r0, #99	; 0x63
 8014372:	bfcb      	itete	gt
 8014374:	2300      	movgt	r3, #0
 8014376:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801437a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801437e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8014382:	e7d9      	b.n	8014338 <_ZN8touchgfx3HAL4tickEv+0x128>
 8014384:	2400f444 	.word	0x2400f444
 8014388:	2400f445 	.word	0x2400f445
 801438c:	05f5e100 	.word	0x05f5e100

08014390 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014390:	f7ec baa6 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014394 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014394:	6581      	str	r1, [r0, #88]	; 0x58
 8014396:	301c      	adds	r0, #28
 8014398:	f00e bc36 	b.w	8022c08 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801439c <_ZN8touchgfx3HAL5touchEll>:
 801439c:	b530      	push	{r4, r5, lr}
 801439e:	b087      	sub	sp, #28
 80143a0:	4604      	mov	r4, r0
 80143a2:	a804      	add	r0, sp, #16
 80143a4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80143a8:	f003 f95a 	bl	8017660 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80143ac:	9b04      	ldr	r3, [sp, #16]
 80143ae:	a906      	add	r1, sp, #24
 80143b0:	a803      	add	r0, sp, #12
 80143b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80143b6:	9b05      	ldr	r3, [sp, #20]
 80143b8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80143bc:	f003 f9a2 	bl	8017704 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80143c0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80143c4:	f104 001c 	add.w	r0, r4, #28
 80143c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80143cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80143d0:	b189      	cbz	r1, 80143f6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80143d2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80143d6:	9300      	str	r3, [sp, #0]
 80143d8:	4613      	mov	r3, r2
 80143da:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80143de:	462a      	mov	r2, r5
 80143e0:	f00e fc22 	bl	8022c28 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80143e4:	b128      	cbz	r0, 80143f2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80143e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80143ea:	65e3      	str	r3, [r4, #92]	; 0x5c
 80143ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80143f0:	6623      	str	r3, [r4, #96]	; 0x60
 80143f2:	b007      	add	sp, #28
 80143f4:	bd30      	pop	{r4, r5, pc}
 80143f6:	f00e fc57 	bl	8022ca8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80143fa:	2301      	movs	r3, #1
 80143fc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014400:	e7f1      	b.n	80143e6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08014402 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8014402:	b510      	push	{r4, lr}
 8014404:	2b00      	cmp	r3, #0
 8014406:	d046      	beq.n	8014496 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014408:	ea81 0002 	eor.w	r0, r1, r2
 801440c:	07c4      	lsls	r4, r0, #31
 801440e:	d508      	bpl.n	8014422 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8014410:	440b      	add	r3, r1
 8014412:	3a01      	subs	r2, #1
 8014414:	428b      	cmp	r3, r1
 8014416:	d93e      	bls.n	8014496 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014418:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801441c:	f801 0b01 	strb.w	r0, [r1], #1
 8014420:	e7f8      	b.n	8014414 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8014422:	07d0      	lsls	r0, r2, #31
 8014424:	bf42      	ittt	mi
 8014426:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801442a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801442e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8014432:	2b01      	cmp	r3, #1
 8014434:	d911      	bls.n	801445a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014436:	ea81 0402 	eor.w	r4, r1, r2
 801443a:	4610      	mov	r0, r2
 801443c:	07a4      	lsls	r4, r4, #30
 801443e:	d022      	beq.n	8014486 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8014440:	f023 0401 	bic.w	r4, r3, #1
 8014444:	440c      	add	r4, r1
 8014446:	428c      	cmp	r4, r1
 8014448:	4602      	mov	r2, r0
 801444a:	d904      	bls.n	8014456 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801444c:	8812      	ldrh	r2, [r2, #0]
 801444e:	3002      	adds	r0, #2
 8014450:	f821 2b02 	strh.w	r2, [r1], #2
 8014454:	e7f7      	b.n	8014446 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8014456:	f003 0301 	and.w	r3, r3, #1
 801445a:	f023 0003 	bic.w	r0, r3, #3
 801445e:	4408      	add	r0, r1
 8014460:	4288      	cmp	r0, r1
 8014462:	4614      	mov	r4, r2
 8014464:	d904      	bls.n	8014470 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014466:	6824      	ldr	r4, [r4, #0]
 8014468:	3204      	adds	r2, #4
 801446a:	f841 4b04 	str.w	r4, [r1], #4
 801446e:	e7f7      	b.n	8014460 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8014470:	f003 0303 	and.w	r3, r3, #3
 8014474:	3a01      	subs	r2, #1
 8014476:	440b      	add	r3, r1
 8014478:	428b      	cmp	r3, r1
 801447a:	d90c      	bls.n	8014496 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801447c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8014480:	f801 0b01 	strb.w	r0, [r1], #1
 8014484:	e7f8      	b.n	8014478 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014486:	0790      	lsls	r0, r2, #30
 8014488:	d0e7      	beq.n	801445a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801448a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801448e:	3b02      	subs	r3, #2
 8014490:	f821 0b02 	strh.w	r0, [r1], #2
 8014494:	e7e1      	b.n	801445a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014496:	2001      	movs	r0, #1
 8014498:	bd10      	pop	{r4, pc}

0801449a <_ZN8touchgfx3HAL7noTouchEv>:
 801449a:	b510      	push	{r4, lr}
 801449c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80144a0:	4604      	mov	r4, r0
 80144a2:	b153      	cbz	r3, 80144ba <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80144a4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80144a8:	2101      	movs	r1, #1
 80144aa:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80144ae:	301c      	adds	r0, #28
 80144b0:	f00e fbfa 	bl	8022ca8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80144b4:	2300      	movs	r3, #0
 80144b6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80144ba:	bd10      	pop	{r4, pc}

080144bc <_ZN8touchgfx3HAL3lcdEv>:
 80144bc:	4b04      	ldr	r3, [pc, #16]	; (80144d0 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80144c4:	b10a      	cbz	r2, 80144ca <_ZN8touchgfx3HAL3lcdEv+0xe>
 80144c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80144c8:	b900      	cbnz	r0, 80144cc <_ZN8touchgfx3HAL3lcdEv+0x10>
 80144ca:	6898      	ldr	r0, [r3, #8]
 80144cc:	4770      	bx	lr
 80144ce:	bf00      	nop
 80144d0:	2400f440 	.word	0x2400f440

080144d4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80144d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144d8:	b085      	sub	sp, #20
 80144da:	4604      	mov	r4, r0
 80144dc:	2000      	movs	r0, #0
 80144de:	4699      	mov	r9, r3
 80144e0:	ad04      	add	r5, sp, #16
 80144e2:	460f      	mov	r7, r1
 80144e4:	4690      	mov	r8, r2
 80144e6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80144ea:	69a0      	ldr	r0, [r4, #24]
 80144ec:	6806      	ldr	r6, [r0, #0]
 80144ee:	9501      	str	r5, [sp, #4]
 80144f0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80144f4:	9500      	str	r5, [sp, #0]
 80144f6:	6835      	ldr	r5, [r6, #0]
 80144f8:	47a8      	blx	r5
 80144fa:	4d10      	ldr	r5, [pc, #64]	; (801453c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80144fc:	4606      	mov	r6, r0
 80144fe:	f8a5 9000 	strh.w	r9, [r5]
 8014502:	f7ff ffdb 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 8014506:	6803      	ldr	r3, [r0, #0]
 8014508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801450a:	4798      	blx	r3
 801450c:	b128      	cbz	r0, 801451a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801450e:	2801      	cmp	r0, #1
 8014510:	d00b      	beq.n	801452a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8014512:	4630      	mov	r0, r6
 8014514:	b005      	add	sp, #20
 8014516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801451a:	882b      	ldrh	r3, [r5, #0]
 801451c:	fb08 7203 	mla	r2, r8, r3, r7
 8014520:	9b03      	ldr	r3, [sp, #12]
 8014522:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8014526:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014528:	e7f3      	b.n	8014512 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801452a:	882a      	ldrh	r2, [r5, #0]
 801452c:	9b03      	ldr	r3, [sp, #12]
 801452e:	fb08 7202 	mla	r2, r8, r2, r7
 8014532:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014536:	1a9a      	subs	r2, r3, r2
 8014538:	63e2      	str	r2, [r4, #60]	; 0x3c
 801453a:	e7ea      	b.n	8014512 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801453c:	2400f43a 	.word	0x2400f43a

08014540 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8014540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014542:	b08b      	sub	sp, #44	; 0x2c
 8014544:	4617      	mov	r7, r2
 8014546:	4604      	mov	r4, r0
 8014548:	460e      	mov	r6, r1
 801454a:	461d      	mov	r5, r3
 801454c:	f7ff ffb6 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 8014550:	6803      	ldr	r3, [r0, #0]
 8014552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014554:	4798      	blx	r3
 8014556:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801455a:	9007      	str	r0, [sp, #28]
 801455c:	4631      	mov	r1, r6
 801455e:	6822      	ldr	r2, [r4, #0]
 8014560:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014564:	4b0c      	ldr	r3, [pc, #48]	; (8014598 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014566:	4620      	mov	r0, r4
 8014568:	881b      	ldrh	r3, [r3, #0]
 801456a:	9306      	str	r3, [sp, #24]
 801456c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014570:	9305      	str	r3, [sp, #20]
 8014572:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014576:	9304      	str	r3, [sp, #16]
 8014578:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801457c:	9303      	str	r3, [sp, #12]
 801457e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014582:	9302      	str	r3, [sp, #8]
 8014584:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014588:	e9cd 5300 	strd	r5, r3, [sp]
 801458c:	463b      	mov	r3, r7
 801458e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8014590:	2200      	movs	r2, #0
 8014592:	47a8      	blx	r5
 8014594:	b00b      	add	sp, #44	; 0x2c
 8014596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014598:	2400f43a 	.word	0x2400f43a

0801459c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801459c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145a0:	4698      	mov	r8, r3
 80145a2:	6803      	ldr	r3, [r0, #0]
 80145a4:	b08b      	sub	sp, #44	; 0x2c
 80145a6:	4617      	mov	r7, r2
 80145a8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80145aa:	460e      	mov	r6, r1
 80145ac:	4b13      	ldr	r3, [pc, #76]	; (80145fc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80145ae:	4604      	mov	r4, r0
 80145b0:	f8b3 9000 	ldrh.w	r9, [r3]
 80145b4:	f7ff ff82 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 80145b8:	6803      	ldr	r3, [r0, #0]
 80145ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145bc:	4798      	blx	r3
 80145be:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80145c2:	2200      	movs	r2, #0
 80145c4:	4631      	mov	r1, r6
 80145c6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80145ca:	2302      	movs	r3, #2
 80145cc:	4620      	mov	r0, r4
 80145ce:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80145d2:	2301      	movs	r3, #1
 80145d4:	9305      	str	r3, [sp, #20]
 80145d6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80145da:	9304      	str	r3, [sp, #16]
 80145dc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80145e0:	9303      	str	r3, [sp, #12]
 80145e2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80145e6:	9302      	str	r3, [sp, #8]
 80145e8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80145ec:	e9cd 8300 	strd	r8, r3, [sp]
 80145f0:	463b      	mov	r3, r7
 80145f2:	47a8      	blx	r5
 80145f4:	b00b      	add	sp, #44	; 0x2c
 80145f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145fa:	bf00      	nop
 80145fc:	2400f43a 	.word	0x2400f43a

08014600 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8014600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014604:	4698      	mov	r8, r3
 8014606:	6803      	ldr	r3, [r0, #0]
 8014608:	b087      	sub	sp, #28
 801460a:	460e      	mov	r6, r1
 801460c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801460e:	4617      	mov	r7, r2
 8014610:	4b0f      	ldr	r3, [pc, #60]	; (8014650 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8014612:	4604      	mov	r4, r0
 8014614:	f8b3 9000 	ldrh.w	r9, [r3]
 8014618:	f7ff ff50 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 801461c:	6803      	ldr	r3, [r0, #0]
 801461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014620:	4798      	blx	r3
 8014622:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8014626:	463a      	mov	r2, r7
 8014628:	4631      	mov	r1, r6
 801462a:	f8cd 900c 	str.w	r9, [sp, #12]
 801462e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8014632:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8014636:	4620      	mov	r0, r4
 8014638:	9302      	str	r3, [sp, #8]
 801463a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801463e:	9301      	str	r3, [sp, #4]
 8014640:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8014644:	9300      	str	r3, [sp, #0]
 8014646:	4643      	mov	r3, r8
 8014648:	47a8      	blx	r5
 801464a:	b007      	add	sp, #28
 801464c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014650:	2400f43a 	.word	0x2400f43a

08014654 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014658:	4604      	mov	r4, r0
 801465a:	b08f      	sub	sp, #60	; 0x3c
 801465c:	4610      	mov	r0, r2
 801465e:	460d      	mov	r5, r1
 8014660:	4691      	mov	r9, r2
 8014662:	461e      	mov	r6, r3
 8014664:	f006 f968 	bl	801a938 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014668:	2800      	cmp	r0, #0
 801466a:	f000 809d 	beq.w	80147a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801466e:	6823      	ldr	r3, [r4, #0]
 8014670:	4620      	mov	r0, r4
 8014672:	f8df b198 	ldr.w	fp, [pc, #408]	; 801480c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014676:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801467c:	4798      	blx	r3
 801467e:	6823      	ldr	r3, [r4, #0]
 8014680:	4620      	mov	r0, r4
 8014682:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8014810 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8014686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014688:	4798      	blx	r3
 801468a:	f8bb 3000 	ldrh.w	r3, [fp]
 801468e:	4f5c      	ldr	r7, [pc, #368]	; (8014800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014690:	9301      	str	r3, [sp, #4]
 8014692:	f8ba 3000 	ldrh.w	r3, [sl]
 8014696:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801469a:	4640      	mov	r0, r8
 801469c:	9302      	str	r3, [sp, #8]
 801469e:	883b      	ldrh	r3, [r7, #0]
 80146a0:	9303      	str	r3, [sp, #12]
 80146a2:	4b58      	ldr	r3, [pc, #352]	; (8014804 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80146a4:	881a      	ldrh	r2, [r3, #0]
 80146a6:	9305      	str	r3, [sp, #20]
 80146a8:	9204      	str	r2, [sp, #16]
 80146aa:	f006 fa89 	bl	801abc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80146ae:	8038      	strh	r0, [r7, #0]
 80146b0:	4640      	mov	r0, r8
 80146b2:	f006 fab9 	bl	801ac28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80146b6:	9b05      	ldr	r3, [sp, #20]
 80146b8:	b280      	uxth	r0, r0
 80146ba:	8018      	strh	r0, [r3, #0]
 80146bc:	4b52      	ldr	r3, [pc, #328]	; (8014808 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d174      	bne.n	80147ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80146c4:	883b      	ldrh	r3, [r7, #0]
 80146c6:	f8aa 0000 	strh.w	r0, [sl]
 80146ca:	f8ab 3000 	strh.w	r3, [fp]
 80146ce:	4648      	mov	r0, r9
 80146d0:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80146d4:	f006 f930 	bl	801a938 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80146d8:	2200      	movs	r2, #0
 80146da:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80146de:	4611      	mov	r1, r2
 80146e0:	4628      	mov	r0, r5
 80146e2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80146e6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80146ea:	f7fe fd72 	bl	80131d2 <_ZN8touchgfx8Drawable5setXYEss>
 80146ee:	2301      	movs	r3, #1
 80146f0:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80146f4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80146f8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	dd5c      	ble.n	80147ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014700:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014704:	2b00      	cmp	r3, #0
 8014706:	dd58      	ble.n	80147ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8014708:	462a      	mov	r2, r5
 801470a:	ab0a      	add	r3, sp, #40	; 0x28
 801470c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014710:	6851      	ldr	r1, [r2, #4]
 8014712:	c303      	stmia	r3!, {r0, r1}
 8014714:	4631      	mov	r1, r6
 8014716:	a80a      	add	r0, sp, #40	; 0x28
 8014718:	f7fe fba8 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 801471c:	4b38      	ldr	r3, [pc, #224]	; (8014800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801471e:	2100      	movs	r1, #0
 8014720:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014724:	4b37      	ldr	r3, [pc, #220]	; (8014804 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014726:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801472a:	aa0a      	add	r2, sp, #40	; 0x28
 801472c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014730:	910c      	str	r1, [sp, #48]	; 0x30
 8014732:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014736:	ab08      	add	r3, sp, #32
 8014738:	e892 0003 	ldmia.w	r2, {r0, r1}
 801473c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014740:	4618      	mov	r0, r3
 8014742:	a90c      	add	r1, sp, #48	; 0x30
 8014744:	f7fe fb92 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 8014748:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801474a:	2b00      	cmp	r3, #0
 801474c:	d13c      	bne.n	80147c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801474e:	2000      	movs	r0, #0
 8014750:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014754:	2600      	movs	r6, #0
 8014756:	696b      	ldr	r3, [r5, #20]
 8014758:	a908      	add	r1, sp, #32
 801475a:	682a      	ldr	r2, [r5, #0]
 801475c:	4628      	mov	r0, r5
 801475e:	9305      	str	r3, [sp, #20]
 8014760:	616e      	str	r6, [r5, #20]
 8014762:	6892      	ldr	r2, [r2, #8]
 8014764:	4790      	blx	r2
 8014766:	9b05      	ldr	r3, [sp, #20]
 8014768:	4652      	mov	r2, sl
 801476a:	4649      	mov	r1, r9
 801476c:	616b      	str	r3, [r5, #20]
 801476e:	4628      	mov	r0, r5
 8014770:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8014774:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014778:	f7fe fd2b 	bl	80131d2 <_ZN8touchgfx8Drawable5setXYEss>
 801477c:	9a01      	ldr	r2, [sp, #4]
 801477e:	4b23      	ldr	r3, [pc, #140]	; (801480c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014780:	4620      	mov	r0, r4
 8014782:	801a      	strh	r2, [r3, #0]
 8014784:	9a02      	ldr	r2, [sp, #8]
 8014786:	4b22      	ldr	r3, [pc, #136]	; (8014810 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8014788:	801a      	strh	r2, [r3, #0]
 801478a:	9a03      	ldr	r2, [sp, #12]
 801478c:	4b1c      	ldr	r3, [pc, #112]	; (8014800 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801478e:	801a      	strh	r2, [r3, #0]
 8014790:	4b1c      	ldr	r3, [pc, #112]	; (8014804 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8014792:	9a04      	ldr	r2, [sp, #16]
 8014794:	801a      	strh	r2, [r3, #0]
 8014796:	6823      	ldr	r3, [r4, #0]
 8014798:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801479e:	4798      	blx	r3
 80147a0:	6823      	ldr	r3, [r4, #0]
 80147a2:	4620      	mov	r0, r4
 80147a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147a6:	4798      	blx	r3
 80147a8:	b00f      	add	sp, #60	; 0x3c
 80147aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ae:	883b      	ldrh	r3, [r7, #0]
 80147b0:	f8ab 0000 	strh.w	r0, [fp]
 80147b4:	f8aa 3000 	strh.w	r3, [sl]
 80147b8:	e789      	b.n	80146ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80147ba:	462a      	mov	r2, r5
 80147bc:	ab0a      	add	r3, sp, #40	; 0x28
 80147be:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80147c2:	6851      	ldr	r1, [r2, #4]
 80147c4:	c303      	stmia	r3!, {r0, r1}
 80147c6:	e7a9      	b.n	801471c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80147c8:	a807      	add	r0, sp, #28
 80147ca:	f006 fb31 	bl	801ae30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80147ce:	4606      	mov	r6, r0
 80147d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80147d2:	6803      	ldr	r3, [r0, #0]
 80147d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147d6:	4798      	blx	r3
 80147d8:	4286      	cmp	r6, r0
 80147da:	d1b8      	bne.n	801474e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80147dc:	f7ff fe6e 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 80147e0:	6803      	ldr	r3, [r0, #0]
 80147e2:	4606      	mov	r6, r0
 80147e4:	a807      	add	r0, sp, #28
 80147e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147e8:	9305      	str	r3, [sp, #20]
 80147ea:	f006 fb21 	bl	801ae30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80147ee:	9b05      	ldr	r3, [sp, #20]
 80147f0:	4601      	mov	r1, r0
 80147f2:	4630      	mov	r0, r6
 80147f4:	4798      	blx	r3
 80147f6:	f080 0001 	eor.w	r0, r0, #1
 80147fa:	b2c0      	uxtb	r0, r0
 80147fc:	e7a8      	b.n	8014750 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80147fe:	bf00      	nop
 8014800:	2400f434 	.word	0x2400f434
 8014804:	2400f436 	.word	0x2400f436
 8014808:	2400f438 	.word	0x2400f438
 801480c:	2400f43a 	.word	0x2400f43a
 8014810:	2400f43c 	.word	0x2400f43c

08014814 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8014814:	4b07      	ldr	r3, [pc, #28]	; (8014834 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8014816:	b510      	push	{r4, lr}
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	4604      	mov	r4, r0
 801481c:	b13b      	cbz	r3, 801482e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801481e:	6803      	ldr	r3, [r0, #0]
 8014820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014822:	4798      	blx	r3
 8014824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014826:	4283      	cmp	r3, r0
 8014828:	d101      	bne.n	801482e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801482a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801482c:	bd10      	pop	{r4, pc}
 801482e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014830:	e7fc      	b.n	801482c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8014832:	bf00      	nop
 8014834:	2400f43e 	.word	0x2400f43e

08014838 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8014838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801483c:	461d      	mov	r5, r3
 801483e:	b08a      	sub	sp, #40	; 0x28
 8014840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014844:	4690      	mov	r8, r2
 8014846:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801484a:	2400      	movs	r4, #0
 801484c:	4607      	mov	r7, r0
 801484e:	fb06 8505 	mla	r5, r6, r5, r8
 8014852:	9404      	str	r4, [sp, #16]
 8014854:	f88d 4020 	strb.w	r4, [sp, #32]
 8014858:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801485c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014860:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014864:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014868:	f8ad 301a 	strh.w	r3, [sp, #26]
 801486c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014870:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014874:	f7ff ffce 	bl	8014814 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014878:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014882:	a901      	add	r1, sp, #4
 8014884:	9505      	str	r5, [sp, #20]
 8014886:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801488a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801488e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8014892:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8014896:	6803      	ldr	r3, [r0, #0]
 8014898:	685b      	ldr	r3, [r3, #4]
 801489a:	4798      	blx	r3
 801489c:	b00a      	add	sp, #40	; 0x28
 801489e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148a2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80148a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148a6:	b08b      	sub	sp, #44	; 0x2c
 80148a8:	2400      	movs	r4, #0
 80148aa:	4691      	mov	r9, r2
 80148ac:	461d      	mov	r5, r3
 80148ae:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80148b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80148b6:	4688      	mov	r8, r1
 80148b8:	4607      	mov	r7, r0
 80148ba:	9404      	str	r4, [sp, #16]
 80148bc:	fb06 9505 	mla	r5, r6, r5, r9
 80148c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80148c4:	f7ff ffa6 	bl	8014814 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80148c8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80148cc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80148d6:	a901      	add	r1, sp, #4
 80148d8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80148dc:	9505      	str	r5, [sp, #20]
 80148de:	f8ad 301a 	strh.w	r3, [sp, #26]
 80148e2:	f8ad 401c 	strh.w	r4, [sp, #28]
 80148e6:	f8ad 601e 	strh.w	r6, [sp, #30]
 80148ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80148ee:	f8ad 4020 	strh.w	r4, [sp, #32]
 80148f2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80148f6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80148fa:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80148fe:	6803      	ldr	r3, [r0, #0]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	4798      	blx	r3
 8014904:	b00b      	add	sp, #44	; 0x2c
 8014906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801490c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014910:	b08a      	sub	sp, #40	; 0x28
 8014912:	4698      	mov	r8, r3
 8014914:	2300      	movs	r3, #0
 8014916:	4606      	mov	r6, r0
 8014918:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801491c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8014920:	2d0b      	cmp	r5, #11
 8014922:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8014926:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801492a:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801492e:	9304      	str	r3, [sp, #16]
 8014930:	d137      	bne.n	80149a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8014932:	2380      	movs	r3, #128	; 0x80
 8014934:	f88d 0020 	strb.w	r0, [sp, #32]
 8014938:	4630      	mov	r0, r6
 801493a:	9203      	str	r2, [sp, #12]
 801493c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014940:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014944:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014948:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801494c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014950:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014954:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014958:	f7ff ff5c 	bl	8014814 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801495c:	2c0b      	cmp	r4, #11
 801495e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8014962:	f8ad 701e 	strh.w	r7, [sp, #30]
 8014966:	bf94      	ite	ls
 8014968:	4b19      	ldrls	r3, [pc, #100]	; (80149d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801496a:	2100      	movhi	r1, #0
 801496c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8014970:	bf98      	it	ls
 8014972:	5d19      	ldrbls	r1, [r3, r4]
 8014974:	fb02 8307 	mla	r3, r2, r7, r8
 8014978:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801497c:	10c9      	asrs	r1, r1, #3
 801497e:	fb01 0003 	mla	r0, r1, r3, r0
 8014982:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014986:	a901      	add	r1, sp, #4
 8014988:	9005      	str	r0, [sp, #20]
 801498a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801498e:	2300      	movs	r3, #0
 8014990:	6870      	ldr	r0, [r6, #4]
 8014992:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014996:	6803      	ldr	r3, [r0, #0]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	4798      	blx	r3
 801499c:	b00a      	add	sp, #40	; 0x28
 801499e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149a2:	2d02      	cmp	r5, #2
 80149a4:	d109      	bne.n	80149ba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80149a6:	28ff      	cmp	r0, #255	; 0xff
 80149a8:	d105      	bne.n	80149b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80149aa:	f1bc 0f00 	cmp.w	ip, #0
 80149ae:	bf14      	ite	ne
 80149b0:	2340      	movne	r3, #64	; 0x40
 80149b2:	2320      	moveq	r3, #32
 80149b4:	e7be      	b.n	8014934 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80149b6:	2340      	movs	r3, #64	; 0x40
 80149b8:	e7bc      	b.n	8014934 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80149ba:	28ff      	cmp	r0, #255	; 0xff
 80149bc:	d105      	bne.n	80149ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80149be:	f1bc 0f00 	cmp.w	ip, #0
 80149c2:	bf14      	ite	ne
 80149c4:	2304      	movne	r3, #4
 80149c6:	2301      	moveq	r3, #1
 80149c8:	e7b4      	b.n	8014934 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80149ca:	2304      	movs	r3, #4
 80149cc:	e7b2      	b.n	8014934 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80149ce:	bf00      	nop
 80149d0:	08026628 	.word	0x08026628

080149d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80149d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149d8:	b08b      	sub	sp, #44	; 0x2c
 80149da:	461d      	mov	r5, r3
 80149dc:	2400      	movs	r4, #0
 80149de:	4688      	mov	r8, r1
 80149e0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80149e4:	4693      	mov	fp, r2
 80149e6:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80149ea:	4607      	mov	r7, r0
 80149ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80149f0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80149f4:	9404      	str	r4, [sp, #16]
 80149f6:	bf14      	ite	ne
 80149f8:	2308      	movne	r3, #8
 80149fa:	2302      	moveq	r3, #2
 80149fc:	fb05 b50a 	mla	r5, r5, sl, fp
 8014a00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014a04:	f7ff ff06 	bl	8014814 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014a08:	2e0b      	cmp	r6, #11
 8014a0a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014a0e:	a901      	add	r1, sp, #4
 8014a10:	bf98      	it	ls
 8014a12:	4b13      	ldrls	r3, [pc, #76]	; (8014a60 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8014a14:	f8ad a01e 	strh.w	sl, [sp, #30]
 8014a18:	bf98      	it	ls
 8014a1a:	5d9c      	ldrbls	r4, [r3, r6]
 8014a1c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014a20:	10e4      	asrs	r4, r4, #3
 8014a22:	f8cd 8010 	str.w	r8, [sp, #16]
 8014a26:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014a2a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014a2e:	fb04 0405 	mla	r4, r4, r5, r0
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014a38:	2300      	movs	r3, #0
 8014a3a:	9405      	str	r4, [sp, #20]
 8014a3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a40:	f88d 9020 	strb.w	r9, [sp, #32]
 8014a44:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8014a48:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014a4c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8014a50:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8014a54:	6803      	ldr	r3, [r0, #0]
 8014a56:	685b      	ldr	r3, [r3, #4]
 8014a58:	4798      	blx	r3
 8014a5a:	b00b      	add	sp, #44	; 0x2c
 8014a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a60:	08026628 	.word	0x08026628

08014a64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a68:	461e      	mov	r6, r3
 8014a6a:	4b0a      	ldr	r3, [pc, #40]	; (8014a94 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8014a6c:	460f      	mov	r7, r1
 8014a6e:	4690      	mov	r8, r2
 8014a70:	881d      	ldrh	r5, [r3, #0]
 8014a72:	f7ff fd23 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 8014a76:	6803      	ldr	r3, [r0, #0]
 8014a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a7a:	4798      	blx	r3
 8014a7c:	280b      	cmp	r0, #11
 8014a7e:	bf96      	itet	ls
 8014a80:	4b05      	ldrls	r3, [pc, #20]	; (8014a98 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014a82:	2400      	movhi	r4, #0
 8014a84:	5c1c      	ldrbls	r4, [r3, r0]
 8014a86:	fb08 7005 	mla	r0, r8, r5, r7
 8014a8a:	10e4      	asrs	r4, r4, #3
 8014a8c:	fb04 6000 	mla	r0, r4, r0, r6
 8014a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a94:	2400f43a 	.word	0x2400f43a
 8014a98:	08026628 	.word	0x08026628

08014a9c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a9e:	b08b      	sub	sp, #44	; 0x2c
 8014aa0:	461f      	mov	r7, r3
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	4616      	mov	r6, r2
 8014aa6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014aaa:	2500      	movs	r5, #0
 8014aac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8014ab0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014ab4:	9504      	str	r5, [sp, #16]
 8014ab6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014aba:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014abe:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014ac2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014ac6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014aca:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014ace:	f88d 3020 	strb.w	r3, [sp, #32]
 8014ad2:	f7ff fe9f 	bl	8014814 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ad6:	463a      	mov	r2, r7
 8014ad8:	4631      	mov	r1, r6
 8014ada:	4603      	mov	r3, r0
 8014adc:	4620      	mov	r0, r4
 8014ade:	f7ff ffc1 	bl	8014a64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014ae2:	4b0e      	ldr	r3, [pc, #56]	; (8014b1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8014ae4:	9005      	str	r0, [sp, #20]
 8014ae6:	881b      	ldrh	r3, [r3, #0]
 8014ae8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014aec:	f7ff fce6 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 8014af0:	6803      	ldr	r3, [r0, #0]
 8014af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014af4:	4798      	blx	r3
 8014af6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014af8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8014afc:	a901      	add	r1, sp, #4
 8014afe:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8014b02:	9304      	str	r3, [sp, #16]
 8014b04:	6860      	ldr	r0, [r4, #4]
 8014b06:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014b0a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8014b0e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8014b12:	6803      	ldr	r3, [r0, #0]
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	4798      	blx	r3
 8014b18:	b00b      	add	sp, #44	; 0x2c
 8014b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b1c:	2400f43a 	.word	0x2400f43a

08014b20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b22:	b08d      	sub	sp, #52	; 0x34
 8014b24:	2501      	movs	r5, #1
 8014b26:	4604      	mov	r4, r0
 8014b28:	466b      	mov	r3, sp
 8014b2a:	9503      	str	r5, [sp, #12]
 8014b2c:	e883 0006 	stmia.w	r3, {r1, r2}
 8014b30:	2300      	movs	r3, #0
 8014b32:	f8bd 6000 	ldrh.w	r6, [sp]
 8014b36:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014b3a:	9306      	str	r3, [sp, #24]
 8014b3c:	6803      	ldr	r3, [r0, #0]
 8014b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b40:	4798      	blx	r3
 8014b42:	463a      	mov	r2, r7
 8014b44:	4631      	mov	r1, r6
 8014b46:	4603      	mov	r3, r0
 8014b48:	4620      	mov	r0, r4
 8014b4a:	f7ff ff8b 	bl	8014a64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014b4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014b50:	9004      	str	r0, [sp, #16]
 8014b52:	9307      	str	r3, [sp, #28]
 8014b54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014b58:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014b5c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014b60:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014b64:	4b0e      	ldr	r3, [pc, #56]	; (8014ba0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8014b66:	881b      	ldrh	r3, [r3, #0]
 8014b68:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014b6c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014b70:	f7ff fca4 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 8014b74:	6803      	ldr	r3, [r0, #0]
 8014b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b78:	4798      	blx	r3
 8014b7a:	23ff      	movs	r3, #255	; 0xff
 8014b7c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014b80:	a903      	add	r1, sp, #12
 8014b82:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014b86:	6860      	ldr	r0, [r4, #4]
 8014b88:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014b8c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014b90:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8014b94:	6803      	ldr	r3, [r0, #0]
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	4798      	blx	r3
 8014b9a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014b9c:	b00d      	add	sp, #52	; 0x34
 8014b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ba0:	2400f43a 	.word	0x2400f43a

08014ba4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba8:	b08c      	sub	sp, #48	; 0x30
 8014baa:	461e      	mov	r6, r3
 8014bac:	2300      	movs	r3, #0
 8014bae:	4604      	mov	r4, r0
 8014bb0:	466d      	mov	r5, sp
 8014bb2:	9306      	str	r3, [sp, #24]
 8014bb4:	6803      	ldr	r3, [r0, #0]
 8014bb6:	e885 0006 	stmia.w	r5, {r1, r2}
 8014bba:	2501      	movs	r5, #1
 8014bbc:	f8bd 7000 	ldrh.w	r7, [sp]
 8014bc0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014bc4:	9503      	str	r5, [sp, #12]
 8014bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bc8:	4798      	blx	r3
 8014bca:	4642      	mov	r2, r8
 8014bcc:	4639      	mov	r1, r7
 8014bce:	4603      	mov	r3, r0
 8014bd0:	4620      	mov	r0, r4
 8014bd2:	f7ff ff47 	bl	8014a64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014bd6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014bda:	9004      	str	r0, [sp, #16]
 8014bdc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014be0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014be4:	9607      	str	r6, [sp, #28]
 8014be6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014bea:	4b10      	ldr	r3, [pc, #64]	; (8014c2c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8014bec:	881b      	ldrh	r3, [r3, #0]
 8014bee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8014bf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014bf4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014bf8:	f7ff fc60 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 8014bfc:	6803      	ldr	r3, [r0, #0]
 8014bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c00:	4798      	blx	r3
 8014c02:	23ff      	movs	r3, #255	; 0xff
 8014c04:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8014c08:	a903      	add	r1, sp, #12
 8014c0a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8014c0e:	6860      	ldr	r0, [r4, #4]
 8014c10:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8014c14:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8014c18:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8014c1c:	6803      	ldr	r3, [r0, #0]
 8014c1e:	685b      	ldr	r3, [r3, #4]
 8014c20:	4798      	blx	r3
 8014c22:	4630      	mov	r0, r6
 8014c24:	b00c      	add	sp, #48	; 0x30
 8014c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c2a:	bf00      	nop
 8014c2c:	2400f43a 	.word	0x2400f43a

08014c30 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8014c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c32:	b085      	sub	sp, #20
 8014c34:	4605      	mov	r5, r0
 8014c36:	ac02      	add	r4, sp, #8
 8014c38:	e884 0006 	stmia.w	r4, {r1, r2}
 8014c3c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8014c40:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8014c44:	f7ff fde6 	bl	8014814 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014c48:	4631      	mov	r1, r6
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	463a      	mov	r2, r7
 8014c4e:	4628      	mov	r0, r5
 8014c50:	f7ff ff08 	bl	8014a64 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014c54:	4a05      	ldr	r2, [pc, #20]	; (8014c6c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8014c56:	682b      	ldr	r3, [r5, #0]
 8014c58:	8812      	ldrh	r2, [r2, #0]
 8014c5a:	9200      	str	r2, [sp, #0]
 8014c5c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8014c5e:	4603      	mov	r3, r0
 8014c60:	4628      	mov	r0, r5
 8014c62:	e894 0006 	ldmia.w	r4, {r1, r2}
 8014c66:	47b0      	blx	r6
 8014c68:	b005      	add	sp, #20
 8014c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c6c:	2400f43a 	.word	0x2400f43a

08014c70 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014c70:	b570      	push	{r4, r5, r6, lr}
 8014c72:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8014c76:	4604      	mov	r4, r0
 8014c78:	b19b      	cbz	r3, 8014ca2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014c7a:	2002      	movs	r0, #2
 8014c7c:	f7eb fca0 	bl	80005c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014c80:	2300      	movs	r3, #0
 8014c82:	4620      	mov	r0, r4
 8014c84:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014c88:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8014c8c:	6823      	ldr	r3, [r4, #0]
 8014c8e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8014c92:	f7ff fdbf 	bl	8014814 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014c96:	4601      	mov	r1, r0
 8014c98:	4620      	mov	r0, r4
 8014c9a:	462b      	mov	r3, r5
 8014c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ca0:	4718      	bx	r3
 8014ca2:	bd70      	pop	{r4, r5, r6, pc}

08014ca4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014ca4:	b538      	push	{r3, r4, r5, lr}
 8014ca6:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8014caa:	4604      	mov	r4, r0
 8014cac:	460d      	mov	r5, r1
 8014cae:	428b      	cmp	r3, r1
 8014cb0:	d006      	beq.n	8014cc0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8014cb2:	6803      	ldr	r3, [r0, #0]
 8014cb4:	b929      	cbnz	r1, 8014cc2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8014cb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014cba:	4798      	blx	r3
 8014cbc:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8014cc0:	bd38      	pop	{r3, r4, r5, pc}
 8014cc2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014cc6:	e7f8      	b.n	8014cba <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08014cc8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014cc8:	4b0d      	ldr	r3, [pc, #52]	; (8014d00 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014cca:	b510      	push	{r4, lr}
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	4604      	mov	r4, r0
 8014cd0:	b95b      	cbnz	r3, 8014cea <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014cd2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8014cd6:	2b02      	cmp	r3, #2
 8014cd8:	d007      	beq.n	8014cea <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014cda:	6840      	ldr	r0, [r0, #4]
 8014cdc:	f000 f916 	bl	8014f0c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014ce0:	b118      	cbz	r0, 8014cea <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014ce2:	6862      	ldr	r2, [r4, #4]
 8014ce4:	7a53      	ldrb	r3, [r2, #9]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d0fc      	beq.n	8014ce4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014cea:	f7eb fdef 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014cee:	4620      	mov	r0, r4
 8014cf0:	2100      	movs	r1, #0
 8014cf2:	f7ff ffd7 	bl	8014ca4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014cf6:	4620      	mov	r0, r4
 8014cf8:	f7ff fd8c 	bl	8014814 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014cfc:	bd10      	pop	{r4, pc}
 8014cfe:	bf00      	nop
 8014d00:	2400f43e 	.word	0x2400f43e

08014d04 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8014d04:	4770      	bx	lr

08014d06 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8014d06:	2000      	movs	r0, #0
 8014d08:	4770      	bx	lr

08014d0a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014d0a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014d0e:	1a13      	subs	r3, r2, r0
 8014d10:	4258      	negs	r0, r3
 8014d12:	4158      	adcs	r0, r3
 8014d14:	4770      	bx	lr

08014d16 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8014d16:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8014d1a:	1a9b      	subs	r3, r3, r2
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	bfdc      	itt	le
 8014d20:	6882      	ldrle	r2, [r0, #8]
 8014d22:	189b      	addle	r3, r3, r2
 8014d24:	2b01      	cmp	r3, #1
 8014d26:	bfcc      	ite	gt
 8014d28:	2000      	movgt	r0, #0
 8014d2a:	2001      	movle	r0, #1
 8014d2c:	4770      	bx	lr

08014d2e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8014d2e:	6902      	ldr	r2, [r0, #16]
 8014d30:	6843      	ldr	r3, [r0, #4]
 8014d32:	2024      	movs	r0, #36	; 0x24
 8014d34:	fb00 3002 	mla	r0, r0, r2, r3
 8014d38:	4770      	bx	lr

08014d3a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8014d3a:	6803      	ldr	r3, [r0, #0]
 8014d3c:	691b      	ldr	r3, [r3, #16]
 8014d3e:	4718      	bx	r3

08014d40 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014d40:	2301      	movs	r3, #1
 8014d42:	b570      	push	{r4, r5, r6, lr}
 8014d44:	7203      	strb	r3, [r0, #8]
 8014d46:	4604      	mov	r4, r0
 8014d48:	6840      	ldr	r0, [r0, #4]
 8014d4a:	6803      	ldr	r3, [r0, #0]
 8014d4c:	699b      	ldr	r3, [r3, #24]
 8014d4e:	4798      	blx	r3
 8014d50:	6803      	ldr	r3, [r0, #0]
 8014d52:	4605      	mov	r5, r0
 8014d54:	2b40      	cmp	r3, #64	; 0x40
 8014d56:	d00c      	beq.n	8014d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d58:	d810      	bhi.n	8014d7c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8014d5a:	2b04      	cmp	r3, #4
 8014d5c:	d01d      	beq.n	8014d9a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8014d5e:	d804      	bhi.n	8014d6a <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d006      	beq.n	8014d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d64:	2b02      	cmp	r3, #2
 8014d66:	d02c      	beq.n	8014dc2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8014d68:	bd70      	pop	{r4, r5, r6, pc}
 8014d6a:	2b08      	cmp	r3, #8
 8014d6c:	d01d      	beq.n	8014daa <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8014d6e:	2b20      	cmp	r3, #32
 8014d70:	d1fa      	bne.n	8014d68 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8014d72:	6823      	ldr	r3, [r4, #0]
 8014d74:	4620      	mov	r0, r4
 8014d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d78:	4798      	blx	r3
 8014d7a:	e013      	b.n	8014da4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8014d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d80:	d0f7      	beq.n	8014d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d82:	d804      	bhi.n	8014d8e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8014d84:	2b80      	cmp	r3, #128	; 0x80
 8014d86:	d0f4      	beq.n	8014d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d8c:	e7f0      	b.n	8014d70 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8014d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d92:	d0ee      	beq.n	8014d72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8014d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014d98:	e7e5      	b.n	8014d66 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8014d9a:	6823      	ldr	r3, [r4, #0]
 8014d9c:	7f01      	ldrb	r1, [r0, #28]
 8014d9e:	4620      	mov	r0, r4
 8014da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014da2:	4798      	blx	r3
 8014da4:	6823      	ldr	r3, [r4, #0]
 8014da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014da8:	e006      	b.n	8014db8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8014daa:	6823      	ldr	r3, [r4, #0]
 8014dac:	7f01      	ldrb	r1, [r0, #28]
 8014dae:	4620      	mov	r0, r4
 8014db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014db2:	4798      	blx	r3
 8014db4:	6823      	ldr	r3, [r4, #0]
 8014db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014db8:	4629      	mov	r1, r5
 8014dba:	4620      	mov	r0, r4
 8014dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dc0:	4718      	bx	r3
 8014dc2:	6823      	ldr	r3, [r4, #0]
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014dc8:	4798      	blx	r3
 8014dca:	e7f3      	b.n	8014db4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08014dcc <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014dcc:	4770      	bx	lr

08014dce <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014dce:	4770      	bx	lr

08014dd0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8014dd0:	4770      	bx	lr

08014dd2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014dd2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8014dd6:	b510      	push	{r4, lr}
 8014dd8:	1ad2      	subs	r2, r2, r3
 8014dda:	2a00      	cmp	r2, #0
 8014ddc:	bfdc      	itt	le
 8014dde:	6884      	ldrle	r4, [r0, #8]
 8014de0:	1912      	addle	r2, r2, r4
 8014de2:	2a01      	cmp	r2, #1
 8014de4:	dd16      	ble.n	8014e14 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8014de6:	6842      	ldr	r2, [r0, #4]
 8014de8:	2424      	movs	r4, #36	; 0x24
 8014dea:	fb04 2303 	mla	r3, r4, r3, r2
 8014dee:	f101 0220 	add.w	r2, r1, #32
 8014df2:	f851 4b04 	ldr.w	r4, [r1], #4
 8014df6:	4291      	cmp	r1, r2
 8014df8:	f843 4b04 	str.w	r4, [r3], #4
 8014dfc:	d1f9      	bne.n	8014df2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8014dfe:	780a      	ldrb	r2, [r1, #0]
 8014e00:	701a      	strb	r2, [r3, #0]
 8014e02:	68c3      	ldr	r3, [r0, #12]
 8014e04:	6882      	ldr	r2, [r0, #8]
 8014e06:	f3bf 8f5b 	dmb	ish
 8014e0a:	3301      	adds	r3, #1
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	bfd8      	it	le
 8014e10:	1a9b      	suble	r3, r3, r2
 8014e12:	60c3      	str	r3, [r0, #12]
 8014e14:	bd10      	pop	{r4, pc}

08014e16 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014e16:	6903      	ldr	r3, [r0, #16]
 8014e18:	6882      	ldr	r2, [r0, #8]
 8014e1a:	f3bf 8f5b 	dmb	ish
 8014e1e:	3301      	adds	r3, #1
 8014e20:	429a      	cmp	r2, r3
 8014e22:	bfd8      	it	le
 8014e24:	1a9b      	suble	r3, r3, r2
 8014e26:	6103      	str	r3, [r0, #16]
 8014e28:	4770      	bx	lr
	...

08014e2c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8014e2c:	b570      	push	{r4, r5, r6, lr}
 8014e2e:	4604      	mov	r4, r0
 8014e30:	460e      	mov	r6, r1
 8014e32:	6860      	ldr	r0, [r4, #4]
 8014e34:	6803      	ldr	r3, [r0, #0]
 8014e36:	685b      	ldr	r3, [r3, #4]
 8014e38:	4798      	blx	r3
 8014e3a:	2800      	cmp	r0, #0
 8014e3c:	d1f9      	bne.n	8014e32 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8014e3e:	4d0d      	ldr	r5, [pc, #52]	; (8014e74 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8014e40:	6828      	ldr	r0, [r5, #0]
 8014e42:	6803      	ldr	r3, [r0, #0]
 8014e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e46:	4798      	blx	r3
 8014e48:	f7eb fd52 	bl	80008f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014e4c:	6828      	ldr	r0, [r5, #0]
 8014e4e:	2101      	movs	r1, #1
 8014e50:	f7ff ff28 	bl	8014ca4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014e54:	6860      	ldr	r0, [r4, #4]
 8014e56:	4631      	mov	r1, r6
 8014e58:	6803      	ldr	r3, [r0, #0]
 8014e5a:	689b      	ldr	r3, [r3, #8]
 8014e5c:	4798      	blx	r3
 8014e5e:	6823      	ldr	r3, [r4, #0]
 8014e60:	4620      	mov	r0, r4
 8014e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e64:	4798      	blx	r3
 8014e66:	6828      	ldr	r0, [r5, #0]
 8014e68:	6803      	ldr	r3, [r0, #0]
 8014e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e70:	4718      	bx	r3
 8014e72:	bf00      	nop
 8014e74:	2400f440 	.word	0x2400f440

08014e78 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014e78:	b508      	push	{r3, lr}
 8014e7a:	f7eb fd27 	bl	80008cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014e82:	f7eb bd2d 	b.w	80008e0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014e86 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014e86:	b510      	push	{r4, lr}
 8014e88:	4604      	mov	r4, r0
 8014e8a:	2114      	movs	r1, #20
 8014e8c:	f00d ff73 	bl	8022d76 <_ZdlPvj>
 8014e90:	4620      	mov	r0, r4
 8014e92:	bd10      	pop	{r4, pc}

08014e94 <_ZN8touchgfx13DMA_Interface5startEv>:
 8014e94:	b510      	push	{r4, lr}
 8014e96:	4604      	mov	r4, r0
 8014e98:	6840      	ldr	r0, [r0, #4]
 8014e9a:	6803      	ldr	r3, [r0, #0]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	4798      	blx	r3
 8014ea0:	b948      	cbnz	r0, 8014eb6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014ea2:	7a63      	ldrb	r3, [r4, #9]
 8014ea4:	b13b      	cbz	r3, 8014eb6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014ea6:	7a23      	ldrb	r3, [r4, #8]
 8014ea8:	b92b      	cbnz	r3, 8014eb6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014eaa:	6823      	ldr	r3, [r4, #0]
 8014eac:	4620      	mov	r0, r4
 8014eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014eb4:	4718      	bx	r3
 8014eb6:	bd10      	pop	{r4, pc}

08014eb8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014eb8:	b570      	push	{r4, r5, r6, lr}
 8014eba:	4604      	mov	r4, r0
 8014ebc:	6840      	ldr	r0, [r0, #4]
 8014ebe:	6803      	ldr	r3, [r0, #0]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	4798      	blx	r3
 8014ec4:	4605      	mov	r5, r0
 8014ec6:	b930      	cbnz	r0, 8014ed6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014ec8:	7a23      	ldrb	r3, [r4, #8]
 8014eca:	b123      	cbz	r3, 8014ed6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014ecc:	6860      	ldr	r0, [r4, #4]
 8014ece:	6803      	ldr	r3, [r0, #0]
 8014ed0:	695b      	ldr	r3, [r3, #20]
 8014ed2:	4798      	blx	r3
 8014ed4:	7225      	strb	r5, [r4, #8]
 8014ed6:	6860      	ldr	r0, [r4, #4]
 8014ed8:	6803      	ldr	r3, [r0, #0]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	4798      	blx	r3
 8014ede:	b928      	cbnz	r0, 8014eec <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014ee0:	6823      	ldr	r3, [r4, #0]
 8014ee2:	4620      	mov	r0, r4
 8014ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014eea:	4718      	bx	r3
 8014eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ef0:	f7eb bd08 	b.w	8000904 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08014ef4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014ef4:	b510      	push	{r4, lr}
 8014ef6:	6082      	str	r2, [r0, #8]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	4c03      	ldr	r4, [pc, #12]	; (8014f08 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014efc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014f00:	e9c0 4100 	strd	r4, r1, [r0]
 8014f04:	bd10      	pop	{r4, pc}
 8014f06:	bf00      	nop
 8014f08:	08026764 	.word	0x08026764

08014f0c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014f0c:	6840      	ldr	r0, [r0, #4]
 8014f0e:	6803      	ldr	r3, [r0, #0]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	4718      	bx	r3

08014f14 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8014f14:	2000      	movs	r0, #0
 8014f16:	4770      	bx	lr

08014f18 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8014f18:	4b07      	ldr	r3, [pc, #28]	; (8014f38 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8014f1a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8014f1c:	881b      	ldrh	r3, [r3, #0]
 8014f1e:	4293      	cmp	r3, r2
 8014f20:	bf81      	itttt	hi
 8014f22:	4b06      	ldrhi	r3, [pc, #24]	; (8014f3c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8014f24:	681b      	ldrhi	r3, [r3, #0]
 8014f26:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8014f2a:	7858      	ldrbhi	r0, [r3, #1]
 8014f2c:	bf8c      	ite	hi
 8014f2e:	f000 0003 	andhi.w	r0, r0, #3
 8014f32:	2000      	movls	r0, #0
 8014f34:	4770      	bx	lr
 8014f36:	bf00      	nop
 8014f38:	2400f494 	.word	0x2400f494
 8014f3c:	2400f490 	.word	0x2400f490

08014f40 <_ZN8touchgfx8TextAreaD1Ev>:
 8014f40:	4770      	bx	lr
	...

08014f44 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8014f44:	4b11      	ldr	r3, [pc, #68]	; (8014f8c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8014f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f4a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	881b      	ldrh	r3, [r3, #0]
 8014f50:	428b      	cmp	r3, r1
 8014f52:	d918      	bls.n	8014f86 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8014f54:	6803      	ldr	r3, [r0, #0]
 8014f56:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8014f58:	4b0d      	ldr	r3, [pc, #52]	; (8014f90 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8014f5a:	6818      	ldr	r0, [r3, #0]
 8014f5c:	f7ef fa9a 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 8014f60:	6823      	ldr	r3, [r4, #0]
 8014f62:	4606      	mov	r6, r0
 8014f64:	4620      	mov	r0, r4
 8014f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f68:	4798      	blx	r3
 8014f6a:	6823      	ldr	r3, [r4, #0]
 8014f6c:	4607      	mov	r7, r0
 8014f6e:	4620      	mov	r0, r4
 8014f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014f74:	4798      	blx	r3
 8014f76:	463a      	mov	r2, r7
 8014f78:	4603      	mov	r3, r0
 8014f7a:	4631      	mov	r1, r6
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	46ac      	mov	ip, r5
 8014f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f84:	4760      	bx	ip
 8014f86:	2000      	movs	r0, #0
 8014f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f8c:	2400f494 	.word	0x2400f494
 8014f90:	2400f49c 	.word	0x2400f49c

08014f94 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8014f94:	4b18      	ldr	r3, [pc, #96]	; (8014ff8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8014f96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014f9a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	881b      	ldrh	r3, [r3, #0]
 8014fa0:	428b      	cmp	r3, r1
 8014fa2:	d926      	bls.n	8014ff2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8014fa4:	4b15      	ldr	r3, [pc, #84]	; (8014ffc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8014fac:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8014fb0:	4b13      	ldr	r3, [pc, #76]	; (8015000 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8014fb2:	7855      	ldrb	r5, [r2, #1]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8014fba:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8014fbe:	6833      	ldr	r3, [r6, #0]
 8014fc0:	69df      	ldr	r7, [r3, #28]
 8014fc2:	4b10      	ldr	r3, [pc, #64]	; (8015004 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8014fc4:	6818      	ldr	r0, [r3, #0]
 8014fc6:	f7ef fa65 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 8014fca:	6823      	ldr	r3, [r4, #0]
 8014fcc:	4680      	mov	r8, r0
 8014fce:	4620      	mov	r0, r4
 8014fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014fd2:	4798      	blx	r3
 8014fd4:	6823      	ldr	r3, [r4, #0]
 8014fd6:	4681      	mov	r9, r0
 8014fd8:	4620      	mov	r0, r4
 8014fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014fde:	4798      	blx	r3
 8014fe0:	464b      	mov	r3, r9
 8014fe2:	9000      	str	r0, [sp, #0]
 8014fe4:	4642      	mov	r2, r8
 8014fe6:	4629      	mov	r1, r5
 8014fe8:	4630      	mov	r0, r6
 8014fea:	47b8      	blx	r7
 8014fec:	b003      	add	sp, #12
 8014fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ff2:	2000      	movs	r0, #0
 8014ff4:	e7fa      	b.n	8014fec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8014ff6:	bf00      	nop
 8014ff8:	2400f494 	.word	0x2400f494
 8014ffc:	2400f490 	.word	0x2400f490
 8015000:	2400f498 	.word	0x2400f498
 8015004:	2400f49c 	.word	0x2400f49c

08015008 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015008:	b40e      	push	{r1, r2, r3}
 801500a:	4b30      	ldr	r3, [pc, #192]	; (80150cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015010:	881a      	ldrh	r2, [r3, #0]
 8015012:	b09d      	sub	sp, #116	; 0x74
 8015014:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015016:	4604      	mov	r4, r0
 8015018:	429a      	cmp	r2, r3
 801501a:	d954      	bls.n	80150c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801501c:	aa26      	add	r2, sp, #152	; 0x98
 801501e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80150d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8015022:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80150d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8015026:	9202      	str	r2, [sp, #8]
 8015028:	f8d9 2000 	ldr.w	r2, [r9]
 801502c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015030:	f8d8 3000 	ldr.w	r3, [r8]
 8015034:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015038:	682b      	ldr	r3, [r5, #0]
 801503a:	4628      	mov	r0, r5
 801503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801503e:	4798      	blx	r3
 8015040:	4606      	mov	r6, r0
 8015042:	b207      	sxth	r7, r0
 8015044:	a803      	add	r0, sp, #12
 8015046:	f004 f96e 	bl	8019326 <_ZN8touchgfx12TextProviderC1Ev>
 801504a:	682b      	ldr	r3, [r5, #0]
 801504c:	4628      	mov	r0, r5
 801504e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015050:	4798      	blx	r3
 8015052:	682b      	ldr	r3, [r5, #0]
 8015054:	4682      	mov	sl, r0
 8015056:	4628      	mov	r0, r5
 8015058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801505a:	4798      	blx	r3
 801505c:	4653      	mov	r3, sl
 801505e:	9000      	str	r0, [sp, #0]
 8015060:	a803      	add	r0, sp, #12
 8015062:	9a02      	ldr	r2, [sp, #8]
 8015064:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015066:	f004 f9b9 	bl	80193dc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801506a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801506c:	f8d9 3000 	ldr.w	r3, [r9]
 8015070:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8015074:	8925      	ldrh	r5, [r4, #8]
 8015076:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801507a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801507e:	eba5 050c 	sub.w	r5, r5, ip
 8015082:	784a      	ldrb	r2, [r1, #1]
 8015084:	f8d8 3000 	ldr.w	r3, [r8]
 8015088:	b22d      	sxth	r5, r5
 801508a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801508e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015092:	9500      	str	r5, [sp, #0]
 8015094:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015098:	a803      	add	r0, sp, #12
 801509a:	f002 f876 	bl	801718a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801509e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80150a2:	b203      	sxth	r3, r0
 80150a4:	18b9      	adds	r1, r7, r2
 80150a6:	2900      	cmp	r1, #0
 80150a8:	dd0b      	ble.n	80150c2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80150aa:	3b01      	subs	r3, #1
 80150ac:	fb13 f302 	smulbb	r3, r3, r2
 80150b0:	fb16 3300 	smlabb	r3, r6, r0, r3
 80150b4:	b21f      	sxth	r7, r3
 80150b6:	4638      	mov	r0, r7
 80150b8:	b01d      	add	sp, #116	; 0x74
 80150ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150be:	b003      	add	sp, #12
 80150c0:	4770      	bx	lr
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	dcf7      	bgt.n	80150b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80150c6:	2700      	movs	r7, #0
 80150c8:	e7f5      	b.n	80150b6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80150ca:	bf00      	nop
 80150cc:	2400f494 	.word	0x2400f494
 80150d0:	2400f490 	.word	0x2400f490
 80150d4:	2400f498 	.word	0x2400f498

080150d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 80150d8:	4bbc      	ldr	r3, [pc, #752]	; (80153cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 80150da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150de:	460c      	mov	r4, r1
 80150e0:	881b      	ldrh	r3, [r3, #0]
 80150e2:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 80150e4:	b0a9      	sub	sp, #164	; 0xa4
 80150e6:	4681      	mov	r9, r0
 80150e8:	428b      	cmp	r3, r1
 80150ea:	d809      	bhi.n	8015100 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 80150ec:	2300      	movs	r3, #0
 80150ee:	f04f 32ff 	mov.w	r2, #4294967295
 80150f2:	6083      	str	r3, [r0, #8]
 80150f4:	e9c0 3200 	strd	r3, r2, [r0]
 80150f8:	4648      	mov	r0, r9
 80150fa:	b029      	add	sp, #164	; 0xa4
 80150fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015100:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 80153d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8015104:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8015108:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 80153d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 801510c:	f8db 3000 	ldr.w	r3, [fp]
 8015110:	f8d8 0000 	ldr.w	r0, [r8]
 8015114:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8015118:	4bad      	ldr	r3, [pc, #692]	; (80153d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015120:	f7ef f9b8 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 8015124:	4607      	mov	r7, r0
 8015126:	682b      	ldr	r3, [r5, #0]
 8015128:	4628      	mov	r0, r5
 801512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801512c:	4798      	blx	r3
 801512e:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8015130:	f8cd 800c 	str.w	r8, [sp, #12]
 8015134:	4430      	add	r0, r6
 8015136:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 801513a:	b283      	uxth	r3, r0
 801513c:	4650      	mov	r0, sl
 801513e:	9302      	str	r3, [sp, #8]
 8015140:	2e00      	cmp	r6, #0
 8015142:	f040 8090 	bne.w	8015266 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8015146:	f004 f8ee 	bl	8019326 <_ZN8touchgfx12TextProviderC1Ev>
 801514a:	682b      	ldr	r3, [r5, #0]
 801514c:	4628      	mov	r0, r5
 801514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015150:	4798      	blx	r3
 8015152:	682b      	ldr	r3, [r5, #0]
 8015154:	9005      	str	r0, [sp, #20]
 8015156:	4628      	mov	r0, r5
 8015158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801515a:	4798      	blx	r3
 801515c:	6823      	ldr	r3, [r4, #0]
 801515e:	4680      	mov	r8, r0
 8015160:	4620      	mov	r0, r4
 8015162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015164:	4798      	blx	r3
 8015166:	6822      	ldr	r2, [r4, #0]
 8015168:	9004      	str	r0, [sp, #16]
 801516a:	4620      	mov	r0, r4
 801516c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015170:	4790      	blx	r2
 8015172:	9905      	ldr	r1, [sp, #20]
 8015174:	9b04      	ldr	r3, [sp, #16]
 8015176:	460a      	mov	r2, r1
 8015178:	4639      	mov	r1, r7
 801517a:	4637      	mov	r7, r6
 801517c:	9001      	str	r0, [sp, #4]
 801517e:	9300      	str	r3, [sp, #0]
 8015180:	4650      	mov	r0, sl
 8015182:	4643      	mov	r3, r8
 8015184:	f004 f93f 	bl	8019406 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015188:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801518a:	4629      	mov	r1, r5
 801518c:	f8db 3000 	ldr.w	r3, [fp]
 8015190:	4650      	mov	r0, sl
 8015192:	3601      	adds	r6, #1
 8015194:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015198:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801519c:	b2b6      	uxth	r6, r6
 801519e:	785b      	ldrb	r3, [r3, #1]
 80151a0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80151a4:	f001 fd42 	bl	8016c2c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80151a8:	4287      	cmp	r7, r0
 80151aa:	bfb8      	it	lt
 80151ac:	b207      	sxthlt	r7, r0
 80151ae:	4650      	mov	r0, sl
 80151b0:	f004 f8e0 	bl	8019374 <_ZN8touchgfx12TextProvider11endOfStringEv>
 80151b4:	2800      	cmp	r0, #0
 80151b6:	d0e7      	beq.n	8015188 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 80151b8:	9b02      	ldr	r3, [sp, #8]
 80151ba:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 80151be:	fb13 f606 	smulbb	r6, r3, r6
 80151c2:	eba6 0608 	sub.w	r6, r6, r8
 80151c6:	b2b6      	uxth	r6, r6
 80151c8:	fa0f f886 	sxth.w	r8, r6
 80151cc:	f1b8 0f00 	cmp.w	r8, #0
 80151d0:	dd06      	ble.n	80151e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 80151d2:	682b      	ldr	r3, [r5, #0]
 80151d4:	4628      	mov	r0, r5
 80151d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151d8:	4798      	blx	r3
 80151da:	4430      	add	r0, r6
 80151dc:	fa0f f880 	sxth.w	r8, r0
 80151e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80151e4:	4620      	mov	r0, r4
 80151e6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80151ea:	6823      	ldr	r3, [r4, #0]
 80151ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151ee:	bf0c      	ite	eq
 80151f0:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 80151f4:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 80151f8:	4798      	blx	r3
 80151fa:	2801      	cmp	r0, #1
 80151fc:	b2ba      	uxth	r2, r7
 80151fe:	f000 80d2 	beq.w	80153a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 8015202:	2802      	cmp	r0, #2
 8015204:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8015208:	f000 80d3 	beq.w	80153b2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 801520c:	b21e      	sxth	r6, r3
 801520e:	7a29      	ldrb	r1, [r5, #8]
 8015210:	7a6d      	ldrb	r5, [r5, #9]
 8015212:	1a76      	subs	r6, r6, r1
 8015214:	4429      	add	r1, r5
 8015216:	b2b3      	uxth	r3, r6
 8015218:	440a      	add	r2, r1
 801521a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801521e:	b21f      	sxth	r7, r3
 8015220:	b292      	uxth	r2, r2
 8015222:	2902      	cmp	r1, #2
 8015224:	b216      	sxth	r6, r2
 8015226:	f000 80c7 	beq.w	80153b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 801522a:	2903      	cmp	r1, #3
 801522c:	f000 80d6 	beq.w	80153dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8015230:	2901      	cmp	r1, #1
 8015232:	f040 80dc 	bne.w	80153ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 8015236:	8923      	ldrh	r3, [r4, #8]
 8015238:	4632      	mov	r2, r6
 801523a:	463d      	mov	r5, r7
 801523c:	4646      	mov	r6, r8
 801523e:	eba3 0308 	sub.w	r3, r3, r8
 8015242:	4690      	mov	r8, r2
 8015244:	b21f      	sxth	r7, r3
 8015246:	9b03      	ldr	r3, [sp, #12]
 8015248:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801524a:	6818      	ldr	r0, [r3, #0]
 801524c:	f7ef f922 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 8015250:	f8a9 7000 	strh.w	r7, [r9]
 8015254:	f8a9 5002 	strh.w	r5, [r9, #2]
 8015258:	f8a9 6004 	strh.w	r6, [r9, #4]
 801525c:	f8a9 8006 	strh.w	r8, [r9, #6]
 8015260:	f8c9 0008 	str.w	r0, [r9, #8]
 8015264:	e748      	b.n	80150f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8015266:	f004 f85e 	bl	8019326 <_ZN8touchgfx12TextProviderC1Ev>
 801526a:	682b      	ldr	r3, [r5, #0]
 801526c:	4628      	mov	r0, r5
 801526e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015270:	4798      	blx	r3
 8015272:	682b      	ldr	r3, [r5, #0]
 8015274:	4606      	mov	r6, r0
 8015276:	4628      	mov	r0, r5
 8015278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801527a:	4798      	blx	r3
 801527c:	6823      	ldr	r3, [r4, #0]
 801527e:	4680      	mov	r8, r0
 8015280:	4620      	mov	r0, r4
 8015282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015284:	4798      	blx	r3
 8015286:	6822      	ldr	r2, [r4, #0]
 8015288:	9004      	str	r0, [sp, #16]
 801528a:	4620      	mov	r0, r4
 801528c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015290:	4790      	blx	r2
 8015292:	9b04      	ldr	r3, [sp, #16]
 8015294:	4632      	mov	r2, r6
 8015296:	9001      	str	r0, [sp, #4]
 8015298:	9300      	str	r3, [sp, #0]
 801529a:	4639      	mov	r1, r7
 801529c:	4643      	mov	r3, r8
 801529e:	4650      	mov	r0, sl
 80152a0:	f004 f8b1 	bl	8019406 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80152a4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80152a8:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80152ac:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80152b0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80152b4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80152b6:	bf0a      	itet	eq
 80152b8:	4642      	moveq	r2, r8
 80152ba:	461a      	movne	r2, r3
 80152bc:	4698      	moveq	r8, r3
 80152be:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80152c2:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80152c6:	1ad2      	subs	r2, r2, r3
 80152c8:	f8db 3000 	ldr.w	r3, [fp]
 80152cc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80152d0:	7859      	ldrb	r1, [r3, #1]
 80152d2:	2300      	movs	r3, #0
 80152d4:	f8cd a020 	str.w	sl, [sp, #32]
 80152d8:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80152dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80152e0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80152e4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80152e8:	950a      	str	r5, [sp, #40]	; 0x28
 80152ea:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80152ee:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80152f2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 80152f6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80152fa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80152fe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015302:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8015306:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801530a:	b350      	cbz	r0, 8015362 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801530c:	682b      	ldr	r3, [r5, #0]
 801530e:	4628      	mov	r0, r5
 8015310:	695b      	ldr	r3, [r3, #20]
 8015312:	4798      	blx	r3
 8015314:	4607      	mov	r7, r0
 8015316:	b320      	cbz	r0, 8015362 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8015318:	980a      	ldr	r0, [sp, #40]	; 0x28
 801531a:	4639      	mov	r1, r7
 801531c:	6803      	ldr	r3, [r0, #0]
 801531e:	68db      	ldr	r3, [r3, #12]
 8015320:	4798      	blx	r3
 8015322:	4606      	mov	r6, r0
 8015324:	b1e8      	cbz	r0, 8015362 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8015326:	7b43      	ldrb	r3, [r0, #13]
 8015328:	7a82      	ldrb	r2, [r0, #10]
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015330:	4313      	orrs	r3, r2
 8015332:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8015336:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801533a:	2b04      	cmp	r3, #4
 801533c:	d111      	bne.n	8015362 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801533e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015340:	4632      	mov	r2, r6
 8015342:	4639      	mov	r1, r7
 8015344:	6803      	ldr	r3, [r0, #0]
 8015346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015348:	4798      	blx	r3
 801534a:	7b73      	ldrb	r3, [r6, #13]
 801534c:	005b      	lsls	r3, r3, #1
 801534e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015352:	7ab3      	ldrb	r3, [r6, #10]
 8015354:	4313      	orrs	r3, r2
 8015356:	4418      	add	r0, r3
 8015358:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801535c:	4418      	add	r0, r3
 801535e:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8015362:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8015366:	2600      	movs	r6, #0
 8015368:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 801536c:	4637      	mov	r7, r6
 801536e:	45c3      	cmp	fp, r8
 8015370:	a807      	add	r0, sp, #28
 8015372:	f106 0601 	add.w	r6, r6, #1
 8015376:	bfd4      	ite	le
 8015378:	2100      	movle	r1, #0
 801537a:	2101      	movgt	r1, #1
 801537c:	f001 fe36 	bl	8016fec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015380:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8015384:	b2b6      	uxth	r6, r6
 8015386:	429f      	cmp	r7, r3
 8015388:	bfb8      	it	lt
 801538a:	b21f      	sxthlt	r7, r3
 801538c:	9b02      	ldr	r3, [sp, #8]
 801538e:	eba8 0803 	sub.w	r8, r8, r3
 8015392:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015396:	fa0f f888 	sxth.w	r8, r8
 801539a:	2b00      	cmp	r3, #0
 801539c:	f43f af0c 	beq.w	80151b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80153a0:	45c2      	cmp	sl, r8
 80153a2:	dbe4      	blt.n	801536e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 80153a4:	e708      	b.n	80151b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80153a6:	1bf6      	subs	r6, r6, r7
 80153a8:	2702      	movs	r7, #2
 80153aa:	fb96 f6f7 	sdiv	r6, r6, r7
 80153ae:	b236      	sxth	r6, r6
 80153b0:	e72d      	b.n	801520e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 80153b2:	4413      	add	r3, r2
 80153b4:	1af6      	subs	r6, r6, r3
 80153b6:	e7fa      	b.n	80153ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 80153b8:	8925      	ldrh	r5, [r4, #8]
 80153ba:	1aad      	subs	r5, r5, r2
 80153bc:	1aed      	subs	r5, r5, r3
 80153be:	b22f      	sxth	r7, r5
 80153c0:	8965      	ldrh	r5, [r4, #10]
 80153c2:	eba5 0508 	sub.w	r5, r5, r8
 80153c6:	b22d      	sxth	r5, r5
 80153c8:	e73d      	b.n	8015246 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80153ca:	bf00      	nop
 80153cc:	2400f494 	.word	0x2400f494
 80153d0:	2400f498 	.word	0x2400f498
 80153d4:	2400f490 	.word	0x2400f490
 80153d8:	2400f49c 	.word	0x2400f49c
 80153dc:	8965      	ldrh	r5, [r4, #10]
 80153de:	2700      	movs	r7, #0
 80153e0:	1aad      	subs	r5, r5, r2
 80153e2:	1aed      	subs	r5, r5, r3
 80153e4:	4633      	mov	r3, r6
 80153e6:	4646      	mov	r6, r8
 80153e8:	b22d      	sxth	r5, r5
 80153ea:	4698      	mov	r8, r3
 80153ec:	e72b      	b.n	8015246 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80153ee:	2500      	movs	r5, #0
 80153f0:	e729      	b.n	8015246 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80153f2:	bf00      	nop

080153f4 <_ZN8touchgfx8TextAreaD0Ev>:
 80153f4:	b510      	push	{r4, lr}
 80153f6:	4604      	mov	r4, r0
 80153f8:	2148      	movs	r1, #72	; 0x48
 80153fa:	f00d fcbc 	bl	8022d76 <_ZdlPvj>
 80153fe:	4620      	mov	r0, r4
 8015400:	bd10      	pop	{r4, pc}
	...

08015404 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8015404:	b513      	push	{r0, r1, r4, lr}
 8015406:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801540a:	4604      	mov	r4, r0
 801540c:	b1fb      	cbz	r3, 801544e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801540e:	4b16      	ldr	r3, [pc, #88]	; (8015468 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8015410:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015412:	881b      	ldrh	r3, [r3, #0]
 8015414:	428b      	cmp	r3, r1
 8015416:	d91a      	bls.n	801544e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015418:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801541c:	2b00      	cmp	r3, #0
 801541e:	dd16      	ble.n	801544e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015420:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015424:	2b00      	cmp	r3, #0
 8015426:	dd12      	ble.n	801544e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015428:	4b10      	ldr	r3, [pc, #64]	; (801546c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801542a:	6818      	ldr	r0, [r3, #0]
 801542c:	f7ef f832 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 8015430:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8015434:	6822      	ldr	r2, [r4, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	db06      	blt.n	8015448 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801543a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801543e:	2b00      	cmp	r3, #0
 8015440:	db02      	blt.n	8015448 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8015442:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015444:	4298      	cmp	r0, r3
 8015446:	d004      	beq.n	8015452 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8015448:	6953      	ldr	r3, [r2, #20]
 801544a:	4620      	mov	r0, r4
 801544c:	4798      	blx	r3
 801544e:	b002      	add	sp, #8
 8015450:	bd10      	pop	{r4, pc}
 8015452:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8015456:	466b      	mov	r3, sp
 8015458:	6912      	ldr	r2, [r2, #16]
 801545a:	c903      	ldmia	r1, {r0, r1}
 801545c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015460:	4619      	mov	r1, r3
 8015462:	4620      	mov	r0, r4
 8015464:	4790      	blx	r2
 8015466:	e7f2      	b.n	801544e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015468:	2400f494 	.word	0x2400f494
 801546c:	2400f49c 	.word	0x2400f49c

08015470 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015470:	4b45      	ldr	r3, [pc, #276]	; (8015588 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8015472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015476:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015478:	b08e      	sub	sp, #56	; 0x38
 801547a:	881b      	ldrh	r3, [r3, #0]
 801547c:	4604      	mov	r4, r0
 801547e:	4293      	cmp	r3, r2
 8015480:	d97e      	bls.n	8015580 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015482:	6808      	ldr	r0, [r1, #0]
 8015484:	ab05      	add	r3, sp, #20
 8015486:	6849      	ldr	r1, [r1, #4]
 8015488:	4d40      	ldr	r5, [pc, #256]	; (801558c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801548a:	c303      	stmia	r3!, {r0, r1}
 801548c:	4611      	mov	r1, r2
 801548e:	6828      	ldr	r0, [r5, #0]
 8015490:	f7ef f800 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 8015494:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8015498:	2b00      	cmp	r3, #0
 801549a:	db11      	blt.n	80154c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801549c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	db0d      	blt.n	80154c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80154a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80154a6:	4298      	cmp	r0, r3
 80154a8:	d10a      	bne.n	80154c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80154aa:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80154ae:	ab09      	add	r3, sp, #36	; 0x24
 80154b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80154b8:	4619      	mov	r1, r3
 80154ba:	a805      	add	r0, sp, #20
 80154bc:	f7fd fcd6 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 80154c0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	dd5b      	ble.n	8015580 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80154c8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	dd57      	ble.n	8015580 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80154d0:	4f2f      	ldr	r7, [pc, #188]	; (8015590 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 80154d2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80154d4:	683b      	ldr	r3, [r7, #0]
 80154d6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80154da:	4b2e      	ldr	r3, [pc, #184]	; (8015594 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80154e2:	2e00      	cmp	r6, #0
 80154e4:	d04c      	beq.n	8015580 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80154e6:	6823      	ldr	r3, [r4, #0]
 80154e8:	4620      	mov	r0, r4
 80154ea:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 80154ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154f0:	4798      	blx	r3
 80154f2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 80154fa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80154fe:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8015502:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8015506:	785b      	ldrb	r3, [r3, #1]
 8015508:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 801550c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015510:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015512:	9609      	str	r6, [sp, #36]	; 0x24
 8015514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015518:	4b1f      	ldr	r3, [pc, #124]	; (8015598 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801551a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8015524:	910b      	str	r1, [sp, #44]	; 0x2c
 8015526:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801552a:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801552e:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8015532:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8015536:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801553a:	b10a      	cbz	r2, 8015540 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 801553c:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801553e:	b906      	cbnz	r6, 8015542 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8015540:	689e      	ldr	r6, [r3, #8]
 8015542:	af07      	add	r7, sp, #28
 8015544:	4621      	mov	r1, r4
 8015546:	4638      	mov	r0, r7
 8015548:	f003 fb16 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801554c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801554e:	6828      	ldr	r0, [r5, #0]
 8015550:	f7ee ffa0 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 8015554:	6823      	ldr	r3, [r4, #0]
 8015556:	4605      	mov	r5, r0
 8015558:	4620      	mov	r0, r4
 801555a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801555c:	4798      	blx	r3
 801555e:	6823      	ldr	r3, [r4, #0]
 8015560:	4680      	mov	r8, r0
 8015562:	4620      	mov	r0, r4
 8015564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015568:	4798      	blx	r3
 801556a:	ab09      	add	r3, sp, #36	; 0x24
 801556c:	9501      	str	r5, [sp, #4]
 801556e:	9300      	str	r3, [sp, #0]
 8015570:	ab05      	add	r3, sp, #20
 8015572:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8015576:	4630      	mov	r0, r6
 8015578:	e897 0006 	ldmia.w	r7, {r1, r2}
 801557c:	f7ee ff36 	bl	80043ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015580:	b00e      	add	sp, #56	; 0x38
 8015582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015586:	bf00      	nop
 8015588:	2400f494 	.word	0x2400f494
 801558c:	2400f49c 	.word	0x2400f49c
 8015590:	2400f490 	.word	0x2400f490
 8015594:	2400f498 	.word	0x2400f498
 8015598:	2400f440 	.word	0x2400f440

0801559c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801559c:	b538      	push	{r3, r4, r5, lr}
 801559e:	4b0e      	ldr	r3, [pc, #56]	; (80155d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80155a0:	4604      	mov	r4, r0
 80155a2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80155a4:	881b      	ldrh	r3, [r3, #0]
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d214      	bcs.n	80155d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80155aa:	6803      	ldr	r3, [r0, #0]
 80155ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155ae:	4798      	blx	r3
 80155b0:	6823      	ldr	r3, [r4, #0]
 80155b2:	4605      	mov	r5, r0
 80155b4:	4620      	mov	r0, r4
 80155b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155b8:	4798      	blx	r3
 80155ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80155be:	b22d      	sxth	r5, r5
 80155c0:	4601      	mov	r1, r0
 80155c2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80155c6:	bf06      	itte	eq
 80155c8:	4602      	moveq	r2, r0
 80155ca:	4629      	moveq	r1, r5
 80155cc:	462a      	movne	r2, r5
 80155ce:	4620      	mov	r0, r4
 80155d0:	f7fd fe0c 	bl	80131ec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80155d4:	bd38      	pop	{r3, r4, r5, pc}
 80155d6:	bf00      	nop
 80155d8:	2400f494 	.word	0x2400f494

080155dc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80155dc:	b530      	push	{r4, r5, lr}
 80155de:	888b      	ldrh	r3, [r1, #4]
 80155e0:	b085      	sub	sp, #20
 80155e2:	4604      	mov	r4, r0
 80155e4:	8583      	strh	r3, [r0, #44]	; 0x2c
 80155e6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80155ea:	b923      	cbnz	r3, 80155f6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80155ec:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80155f0:	b90b      	cbnz	r3, 80155f6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80155f2:	f7ff ffd3 	bl	801559c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80155f6:	6823      	ldr	r3, [r4, #0]
 80155f8:	466d      	mov	r5, sp
 80155fa:	4621      	mov	r1, r4
 80155fc:	343c      	adds	r4, #60	; 0x3c
 80155fe:	4628      	mov	r0, r5
 8015600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015604:	4798      	blx	r3
 8015606:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801560a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801560e:	b005      	add	sp, #20
 8015610:	bd30      	pop	{r4, r5, pc}

08015612 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8015612:	2300      	movs	r3, #0
 8015614:	8083      	strh	r3, [r0, #4]
 8015616:	80c3      	strh	r3, [r0, #6]
 8015618:	8003      	strh	r3, [r0, #0]
 801561a:	8043      	strh	r3, [r0, #2]
 801561c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8015620:	2bff      	cmp	r3, #255	; 0xff
 8015622:	bf01      	itttt	eq
 8015624:	890b      	ldrheq	r3, [r1, #8]
 8015626:	8083      	strheq	r3, [r0, #4]
 8015628:	894b      	ldrheq	r3, [r1, #10]
 801562a:	80c3      	strheq	r3, [r0, #6]
 801562c:	4770      	bx	lr
	...

08015630 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8015630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015632:	4604      	mov	r4, r0
 8015634:	466b      	mov	r3, sp
 8015636:	6808      	ldr	r0, [r1, #0]
 8015638:	6849      	ldr	r1, [r1, #4]
 801563a:	c303      	stmia	r3!, {r0, r1}
 801563c:	6823      	ldr	r3, [r4, #0]
 801563e:	4669      	mov	r1, sp
 8015640:	4620      	mov	r0, r4
 8015642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015644:	4798      	blx	r3
 8015646:	4b08      	ldr	r3, [pc, #32]	; (8015668 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801564e:	b10a      	cbz	r2, 8015654 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8015650:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015652:	b900      	cbnz	r0, 8015656 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8015654:	6898      	ldr	r0, [r3, #8]
 8015656:	6803      	ldr	r3, [r0, #0]
 8015658:	4669      	mov	r1, sp
 801565a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801565c:	6a1d      	ldr	r5, [r3, #32]
 801565e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015662:	47a8      	blx	r5
 8015664:	b003      	add	sp, #12
 8015666:	bd30      	pop	{r4, r5, pc}
 8015668:	2400f440 	.word	0x2400f440

0801566c <_ZN8touchgfx3BoxD1Ev>:
 801566c:	4770      	bx	lr

0801566e <_ZN8touchgfx3BoxD0Ev>:
 801566e:	b510      	push	{r4, lr}
 8015670:	4604      	mov	r4, r0
 8015672:	212c      	movs	r1, #44	; 0x2c
 8015674:	f00d fb7f 	bl	8022d76 <_ZdlPvj>
 8015678:	4620      	mov	r0, r4
 801567a:	bd10      	pop	{r4, pc}

0801567c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801567c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8015680:	b12a      	cbz	r2, 801568e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015682:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8015686:	b112      	cbz	r2, 801568e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8015688:	6803      	ldr	r3, [r0, #0]
 801568a:	695b      	ldr	r3, [r3, #20]
 801568c:	4718      	bx	r3
 801568e:	4770      	bx	lr

08015690 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
 8015690:	4770      	bx	lr
	...

08015694 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8015694:	4b30      	ldr	r3, [pc, #192]	; (8015758 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8015696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801569a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801569c:	b08d      	sub	sp, #52	; 0x34
 801569e:	881b      	ldrh	r3, [r3, #0]
 80156a0:	4604      	mov	r4, r0
 80156a2:	460f      	mov	r7, r1
 80156a4:	4293      	cmp	r3, r2
 80156a6:	d954      	bls.n	8015752 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80156a8:	4b2c      	ldr	r3, [pc, #176]	; (801575c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80156aa:	6819      	ldr	r1, [r3, #0]
 80156ac:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80156b0:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80156b4:	4a2a      	ldr	r2, [pc, #168]	; (8015760 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80156b6:	6812      	ldr	r2, [r2, #0]
 80156b8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80156bc:	2900      	cmp	r1, #0
 80156be:	d048      	beq.n	8015752 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80156c0:	785a      	ldrb	r2, [r3, #1]
 80156c2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80156c6:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80156ca:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80156ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80156d2:	4b24      	ldr	r3, [pc, #144]	; (8015764 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80156d4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80156d8:	681a      	ldr	r2, [r3, #0]
 80156da:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 80156de:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80156e2:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80156e6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80156e8:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 80156ec:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 80156f0:	9107      	str	r1, [sp, #28]
 80156f2:	f88d 8020 	strb.w	r8, [sp, #32]
 80156f6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 80156fa:	9609      	str	r6, [sp, #36]	; 0x24
 80156fc:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8015700:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8015704:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8015708:	b10b      	cbz	r3, 801570e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801570a:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 801570c:	b905      	cbnz	r5, 8015710 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801570e:	6895      	ldr	r5, [r2, #8]
 8015710:	ae05      	add	r6, sp, #20
 8015712:	4621      	mov	r1, r4
 8015714:	4630      	mov	r0, r6
 8015716:	f003 fa2f 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801571a:	4b13      	ldr	r3, [pc, #76]	; (8015768 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801571c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801571e:	6818      	ldr	r0, [r3, #0]
 8015720:	f7ee feb8 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 8015724:	6823      	ldr	r3, [r4, #0]
 8015726:	4680      	mov	r8, r0
 8015728:	4620      	mov	r0, r4
 801572a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801572c:	4798      	blx	r3
 801572e:	6823      	ldr	r3, [r4, #0]
 8015730:	4681      	mov	r9, r0
 8015732:	4620      	mov	r0, r4
 8015734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015738:	4798      	blx	r3
 801573a:	ab07      	add	r3, sp, #28
 801573c:	f8cd 8004 	str.w	r8, [sp, #4]
 8015740:	9300      	str	r3, [sp, #0]
 8015742:	463b      	mov	r3, r7
 8015744:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8015748:	4628      	mov	r0, r5
 801574a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801574e:	f7ee fe4d 	bl	80043ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015752:	b00d      	add	sp, #52	; 0x34
 8015754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015758:	2400f494 	.word	0x2400f494
 801575c:	2400f490 	.word	0x2400f490
 8015760:	2400f498 	.word	0x2400f498
 8015764:	2400f440 	.word	0x2400f440
 8015768:	2400f49c 	.word	0x2400f49c

0801576c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 801576c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015770:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8015774:	b0a0      	sub	sp, #128	; 0x80
 8015776:	4604      	mov	r4, r0
 8015778:	b193      	cbz	r3, 80157a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801577a:	4b30      	ldr	r3, [pc, #192]	; (801583c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 801577c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801577e:	881b      	ldrh	r3, [r3, #0]
 8015780:	428b      	cmp	r3, r1
 8015782:	d90d      	bls.n	80157a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015784:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015788:	2b00      	cmp	r3, #0
 801578a:	dd09      	ble.n	80157a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801578c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015790:	2b00      	cmp	r3, #0
 8015792:	dd05      	ble.n	80157a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8015794:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8015798:	b12b      	cbz	r3, 80157a6 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 801579a:	6803      	ldr	r3, [r0, #0]
 801579c:	695b      	ldr	r3, [r3, #20]
 801579e:	4798      	blx	r3
 80157a0:	b020      	add	sp, #128	; 0x80
 80157a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157a6:	4b26      	ldr	r3, [pc, #152]	; (8015840 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80157ae:	4b25      	ldr	r3, [pc, #148]	; (8015844 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80157b6:	4b24      	ldr	r3, [pc, #144]	; (8015848 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 80157b8:	6818      	ldr	r0, [r3, #0]
 80157ba:	f7ee fe6b 	bl	8004494 <_ZNK8touchgfx5Texts7getTextEt>
 80157be:	4606      	mov	r6, r0
 80157c0:	a807      	add	r0, sp, #28
 80157c2:	f003 fdb0 	bl	8019326 <_ZN8touchgfx12TextProviderC1Ev>
 80157c6:	682b      	ldr	r3, [r5, #0]
 80157c8:	4628      	mov	r0, r5
 80157ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157cc:	4798      	blx	r3
 80157ce:	682b      	ldr	r3, [r5, #0]
 80157d0:	4607      	mov	r7, r0
 80157d2:	4628      	mov	r0, r5
 80157d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80157d6:	4798      	blx	r3
 80157d8:	6823      	ldr	r3, [r4, #0]
 80157da:	4605      	mov	r5, r0
 80157dc:	4620      	mov	r0, r4
 80157de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80157e0:	4798      	blx	r3
 80157e2:	6823      	ldr	r3, [r4, #0]
 80157e4:	4680      	mov	r8, r0
 80157e6:	4620      	mov	r0, r4
 80157e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80157ec:	4798      	blx	r3
 80157ee:	462b      	mov	r3, r5
 80157f0:	463a      	mov	r2, r7
 80157f2:	4631      	mov	r1, r6
 80157f4:	e9cd 8000 	strd	r8, r0, [sp]
 80157f8:	a807      	add	r0, sp, #28
 80157fa:	f003 fe04 	bl	8019406 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80157fe:	a807      	add	r0, sp, #28
 8015800:	f004 f9be 	bl	8019b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015804:	280a      	cmp	r0, #10
 8015806:	d103      	bne.n	8015810 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8015808:	6823      	ldr	r3, [r4, #0]
 801580a:	4620      	mov	r0, r4
 801580c:	695b      	ldr	r3, [r3, #20]
 801580e:	e7c6      	b.n	801579e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8015810:	a807      	add	r0, sp, #28
 8015812:	f004 f9b5 	bl	8019b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015816:	2800      	cmp	r0, #0
 8015818:	d1f4      	bne.n	8015804 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 801581a:	ad04      	add	r5, sp, #16
 801581c:	4621      	mov	r1, r4
 801581e:	4628      	mov	r0, r5
 8015820:	f7ff fc5a 	bl	80150d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8015824:	ab02      	add	r3, sp, #8
 8015826:	6822      	ldr	r2, [r4, #0]
 8015828:	e895 0003 	ldmia.w	r5, {r0, r1}
 801582c:	6912      	ldr	r2, [r2, #16]
 801582e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015832:	4619      	mov	r1, r3
 8015834:	4620      	mov	r0, r4
 8015836:	4790      	blx	r2
 8015838:	e7b2      	b.n	80157a0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801583a:	bf00      	nop
 801583c:	2400f494 	.word	0x2400f494
 8015840:	2400f490 	.word	0x2400f490
 8015844:	2400f498 	.word	0x2400f498
 8015848:	2400f49c 	.word	0x2400f49c

0801584c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 801584c:	b510      	push	{r4, lr}
 801584e:	4604      	mov	r4, r0
 8015850:	2148      	movs	r1, #72	; 0x48
 8015852:	f00d fa90 	bl	8022d76 <_ZdlPvj>
 8015856:	4620      	mov	r0, r4
 8015858:	bd10      	pop	{r4, pc}

0801585a <_ZN8touchgfx13BoxWithBorderD1Ev>:
 801585a:	4770      	bx	lr

0801585c <_ZN8touchgfx13BoxWithBorderD0Ev>:
 801585c:	b510      	push	{r4, lr}
 801585e:	4604      	mov	r4, r0
 8015860:	2134      	movs	r1, #52	; 0x34
 8015862:	f00d fa88 	bl	8022d76 <_ZdlPvj>
 8015866:	4620      	mov	r0, r4
 8015868:	bd10      	pop	{r4, pc}

0801586a <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801586a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801586e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8015870:	4604      	mov	r4, r0
 8015872:	460e      	mov	r6, r1
 8015874:	b08e      	sub	sp, #56	; 0x38
 8015876:	b218      	sxth	r0, r3
 8015878:	8921      	ldrh	r1, [r4, #8]
 801587a:	005b      	lsls	r3, r3, #1
 801587c:	8962      	ldrh	r2, [r4, #10]
 801587e:	f8ad 0000 	strh.w	r0, [sp]
 8015882:	b29b      	uxth	r3, r3
 8015884:	f8ad 0002 	strh.w	r0, [sp, #2]
 8015888:	1ac9      	subs	r1, r1, r3
 801588a:	1ad3      	subs	r3, r2, r3
 801588c:	b209      	sxth	r1, r1
 801588e:	b21b      	sxth	r3, r3
 8015890:	2900      	cmp	r1, #0
 8015892:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015896:	f8ad 3006 	strh.w	r3, [sp, #6]
 801589a:	dd5e      	ble.n	801595a <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801589c:	2b00      	cmp	r3, #0
 801589e:	dd5c      	ble.n	801595a <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80158a0:	6830      	ldr	r0, [r6, #0]
 80158a2:	ab02      	add	r3, sp, #8
 80158a4:	6871      	ldr	r1, [r6, #4]
 80158a6:	c303      	stmia	r3!, {r0, r1}
 80158a8:	4669      	mov	r1, sp
 80158aa:	a802      	add	r0, sp, #8
 80158ac:	f7fd fade 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 80158b0:	4620      	mov	r0, r4
 80158b2:	a902      	add	r1, sp, #8
 80158b4:	f7ff febc 	bl	8015630 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80158b8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80158ba:	2800      	cmp	r0, #0
 80158bc:	d05f      	beq.n	801597e <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80158be:	8963      	ldrh	r3, [r4, #10]
 80158c0:	b202      	sxth	r2, r0
 80158c2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80158c6:	2500      	movs	r5, #0
 80158c8:	1a1f      	subs	r7, r3, r0
 80158ca:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80158ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80158d2:	b21b      	sxth	r3, r3
 80158d4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80158d8:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80158dc:	af04      	add	r7, sp, #16
 80158de:	1a09      	subs	r1, r1, r0
 80158e0:	9506      	str	r5, [sp, #24]
 80158e2:	f8ad 201e 	strh.w	r2, [sp, #30]
 80158e6:	f8ad 5020 	strh.w	r5, [sp, #32]
 80158ea:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80158ee:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80158f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80158f6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80158fa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80158fe:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8015902:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8015906:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801590a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801590e:	ab06      	add	r3, sp, #24
 8015910:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015914:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015918:	e887 0003 	stmia.w	r7, {r0, r1}
 801591c:	4631      	mov	r1, r6
 801591e:	4638      	mov	r0, r7
 8015920:	f7fd faa4 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 8015924:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015928:	2b00      	cmp	r3, #0
 801592a:	dd12      	ble.n	8015952 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801592c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015930:	2b00      	cmp	r3, #0
 8015932:	dd0e      	ble.n	8015952 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8015934:	6823      	ldr	r3, [r4, #0]
 8015936:	4639      	mov	r1, r7
 8015938:	4620      	mov	r0, r4
 801593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801593c:	4798      	blx	r3
 801593e:	f7fe fdbd 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 8015942:	6803      	ldr	r3, [r0, #0]
 8015944:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015946:	4639      	mov	r1, r7
 8015948:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801594c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015950:	47c0      	blx	r8
 8015952:	3501      	adds	r5, #1
 8015954:	2d04      	cmp	r5, #4
 8015956:	d1da      	bne.n	801590e <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8015958:	e011      	b.n	801597e <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801595a:	6830      	ldr	r0, [r6, #0]
 801595c:	ab06      	add	r3, sp, #24
 801595e:	6871      	ldr	r1, [r6, #4]
 8015960:	c303      	stmia	r3!, {r0, r1}
 8015962:	6823      	ldr	r3, [r4, #0]
 8015964:	a906      	add	r1, sp, #24
 8015966:	4620      	mov	r0, r4
 8015968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801596a:	4798      	blx	r3
 801596c:	f7fe fda6 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 8015970:	6803      	ldr	r3, [r0, #0]
 8015972:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015974:	a906      	add	r1, sp, #24
 8015976:	6a1d      	ldr	r5, [r3, #32]
 8015978:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801597c:	47a8      	blx	r5
 801597e:	b00e      	add	sp, #56	; 0x38
 8015980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015984 <_ZN8touchgfx5ImageD1Ev>:
 8015984:	4770      	bx	lr

08015986 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8015986:	b570      	push	{r4, r5, r6, lr}
 8015988:	880b      	ldrh	r3, [r1, #0]
 801598a:	460d      	mov	r5, r1
 801598c:	4604      	mov	r4, r0
 801598e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8015990:	4608      	mov	r0, r1
 8015992:	f005 f915 	bl	801abc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015996:	4606      	mov	r6, r0
 8015998:	4628      	mov	r0, r5
 801599a:	f005 f945 	bl	801ac28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801599e:	6823      	ldr	r3, [r4, #0]
 80159a0:	4605      	mov	r5, r0
 80159a2:	4631      	mov	r1, r6
 80159a4:	4620      	mov	r0, r4
 80159a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159a8:	4798      	blx	r3
 80159aa:	6823      	ldr	r3, [r4, #0]
 80159ac:	4629      	mov	r1, r5
 80159ae:	4620      	mov	r0, r4
 80159b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159b6:	4718      	bx	r3

080159b8 <_ZN8touchgfx5ImageD0Ev>:
 80159b8:	b510      	push	{r4, lr}
 80159ba:	4604      	mov	r4, r0
 80159bc:	212c      	movs	r1, #44	; 0x2c
 80159be:	f00d f9da 	bl	8022d76 <_ZdlPvj>
 80159c2:	4620      	mov	r0, r4
 80159c4:	bd10      	pop	{r4, pc}

080159c6 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80159c6:	b510      	push	{r4, lr}
 80159c8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80159cc:	4604      	mov	r4, r0
 80159ce:	2bff      	cmp	r3, #255	; 0xff
 80159d0:	d006      	beq.n	80159e0 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80159d2:	2300      	movs	r3, #0
 80159d4:	8003      	strh	r3, [r0, #0]
 80159d6:	8043      	strh	r3, [r0, #2]
 80159d8:	8083      	strh	r3, [r0, #4]
 80159da:	80c3      	strh	r3, [r0, #6]
 80159dc:	4620      	mov	r0, r4
 80159de:	bd10      	pop	{r4, pc}
 80159e0:	3126      	adds	r1, #38	; 0x26
 80159e2:	f005 f955 	bl	801ac90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80159e6:	e7f9      	b.n	80159dc <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080159e8 <_ZNK8touchgfx5Image17invalidateContentEv>:
 80159e8:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80159ec:	b12a      	cbz	r2, 80159fa <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80159ee:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80159f2:	b112      	cbz	r2, 80159fa <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80159f4:	6803      	ldr	r3, [r0, #0]
 80159f6:	695b      	ldr	r3, [r3, #20]
 80159f8:	4718      	bx	r3
 80159fa:	4770      	bx	lr

080159fc <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80159fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a00:	4604      	mov	r4, r0
 8015a02:	b088      	sub	sp, #32
 8015a04:	2500      	movs	r5, #0
 8015a06:	460f      	mov	r7, r1
 8015a08:	f854 3b26 	ldr.w	r3, [r4], #38
 8015a0c:	a904      	add	r1, sp, #16
 8015a0e:	4606      	mov	r6, r0
 8015a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015a16:	4798      	blx	r3
 8015a18:	4620      	mov	r0, r4
 8015a1a:	f005 f8d1 	bl	801abc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015a1e:	4680      	mov	r8, r0
 8015a20:	4620      	mov	r0, r4
 8015a22:	f005 f901 	bl	801ac28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015a26:	9506      	str	r5, [sp, #24]
 8015a28:	ad06      	add	r5, sp, #24
 8015a2a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015a2e:	4639      	mov	r1, r7
 8015a30:	f8ad 801c 	strh.w	r8, [sp, #28]
 8015a34:	4628      	mov	r0, r5
 8015a36:	f7fd fa19 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 8015a3a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	dd19      	ble.n	8015a76 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015a42:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	dd15      	ble.n	8015a76 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8015a4a:	4b0c      	ldr	r3, [pc, #48]	; (8015a7c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015a52:	b10a      	cbz	r2, 8015a58 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8015a54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015a56:	b900      	cbnz	r0, 8015a5a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8015a58:	6898      	ldr	r0, [r3, #8]
 8015a5a:	2701      	movs	r7, #1
 8015a5c:	6801      	ldr	r1, [r0, #0]
 8015a5e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015a62:	9702      	str	r7, [sp, #8]
 8015a64:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8015a68:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8015a6c:	e9cd 5600 	strd	r5, r6, [sp]
 8015a70:	688d      	ldr	r5, [r1, #8]
 8015a72:	4621      	mov	r1, r4
 8015a74:	47a8      	blx	r5
 8015a76:	b008      	add	sp, #32
 8015a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a7c:	2400f440 	.word	0x2400f440

08015a80 <_ZN8touchgfx8KeyboardD1Ev>:
 8015a80:	4770      	bx	lr

08015a82 <_ZN8touchgfx8Keyboard14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015a82:	b538      	push	{r3, r4, r5, lr}
 8015a84:	4604      	mov	r4, r0
 8015a86:	4615      	mov	r5, r2
 8015a88:	f7fd fac8 	bl	801301c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8015a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a90:	81a3      	strh	r3, [r4, #12]
 8015a92:	f04f 33ff 	mov.w	r3, #4294967295
 8015a96:	6223      	str	r3, [r4, #32]
 8015a98:	682b      	ldr	r3, [r5, #0]
 8015a9a:	61e3      	str	r3, [r4, #28]
 8015a9c:	602c      	str	r4, [r5, #0]
 8015a9e:	bd38      	pop	{r3, r4, r5, pc}

08015aa0 <_ZN8touchgfx8KeyboardD0Ev>:
 8015aa0:	b510      	push	{r4, lr}
 8015aa2:	4604      	mov	r4, r0
 8015aa4:	21e8      	movs	r1, #232	; 0xe8
 8015aa6:	f00d f966 	bl	8022d76 <_ZdlPvj>
 8015aaa:	4620      	mov	r0, r4
 8015aac:	bd10      	pop	{r4, pc}

08015aae <_ZNK8touchgfx4Rect9intersectEss>:
 8015aae:	b510      	push	{r4, lr}
 8015ab0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015ab4:	428b      	cmp	r3, r1
 8015ab6:	dc10      	bgt.n	8015ada <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8015ab8:	8884      	ldrh	r4, [r0, #4]
 8015aba:	4423      	add	r3, r4
 8015abc:	b21b      	sxth	r3, r3
 8015abe:	4299      	cmp	r1, r3
 8015ac0:	da0b      	bge.n	8015ada <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8015ac2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	dc07      	bgt.n	8015ada <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8015aca:	88c0      	ldrh	r0, [r0, #6]
 8015acc:	4418      	add	r0, r3
 8015ace:	b200      	sxth	r0, r0
 8015ad0:	4282      	cmp	r2, r0
 8015ad2:	bfac      	ite	ge
 8015ad4:	2000      	movge	r0, #0
 8015ad6:	2001      	movlt	r0, #1
 8015ad8:	bd10      	pop	{r4, pc}
 8015ada:	2000      	movs	r0, #0
 8015adc:	e7fc      	b.n	8015ad8 <_ZNK8touchgfx4Rect9intersectEss+0x2a>
	...

08015ae0 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE>:
 8015ae0:	b530      	push	{r4, r5, lr}
 8015ae2:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
 8015ae6:	b085      	sub	sp, #20
 8015ae8:	4604      	mov	r4, r0
 8015aea:	460d      	mov	r5, r1
 8015aec:	b1f3      	cbz	r3, 8015b2c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8015aee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015af2:	30bc      	adds	r0, #188	; 0xbc
 8015af4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8015af8:	f7ff ffd9 	bl	8015aae <_ZNK8touchgfx4Rect9intersectEss>
 8015afc:	b9b0      	cbnz	r0, 8015b2c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8015afe:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8015b02:	b99b      	cbnz	r3, 8015b2c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8015b04:	480a      	ldr	r0, [pc, #40]	; (8015b30 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x50>)
 8015b06:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015b0a:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8015b0e:	9001      	str	r0, [sp, #4]
 8015b10:	2002      	movs	r0, #2
 8015b12:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015b16:	6823      	ldr	r3, [r4, #0]
 8015b18:	f88d 0008 	strb.w	r0, [sp, #8]
 8015b1c:	4620      	mov	r0, r4
 8015b1e:	f8ad 100a 	strh.w	r1, [sp, #10]
 8015b22:	a901      	add	r1, sp, #4
 8015b24:	f8ad 200c 	strh.w	r2, [sp, #12]
 8015b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b2a:	4798      	blx	r3
 8015b2c:	b005      	add	sp, #20
 8015b2e:	bd30      	pop	{r4, r5, pc}
 8015b30:	0802656c 	.word	0x0802656c

08015b34 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8015b34:	b510      	push	{r4, lr}
 8015b36:	f9b1 4000 	ldrsh.w	r4, [r1]
 8015b3a:	888a      	ldrh	r2, [r1, #4]
 8015b3c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015b40:	4422      	add	r2, r4
 8015b42:	b212      	sxth	r2, r2
 8015b44:	4293      	cmp	r3, r2
 8015b46:	da15      	bge.n	8015b74 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015b48:	8882      	ldrh	r2, [r0, #4]
 8015b4a:	4413      	add	r3, r2
 8015b4c:	b21b      	sxth	r3, r3
 8015b4e:	429c      	cmp	r4, r3
 8015b50:	da10      	bge.n	8015b74 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015b52:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8015b56:	88c9      	ldrh	r1, [r1, #6]
 8015b58:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015b5c:	4419      	add	r1, r3
 8015b5e:	b209      	sxth	r1, r1
 8015b60:	428a      	cmp	r2, r1
 8015b62:	da07      	bge.n	8015b74 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015b64:	88c0      	ldrh	r0, [r0, #6]
 8015b66:	4410      	add	r0, r2
 8015b68:	b200      	sxth	r0, r0
 8015b6a:	4283      	cmp	r3, r0
 8015b6c:	bfac      	ite	ge
 8015b6e:	2000      	movge	r0, #0
 8015b70:	2001      	movlt	r0, #1
 8015b72:	bd10      	pop	{r4, pc}
 8015b74:	2000      	movs	r0, #0
 8015b76:	e7fc      	b.n	8015b72 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08015b78 <_ZN8touchgfx8DrawableC1Ev>:
 8015b78:	4a0a      	ldr	r2, [pc, #40]	; (8015ba4 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 8015b7a:	6002      	str	r2, [r0, #0]
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	8082      	strh	r2, [r0, #4]
 8015b80:	80c2      	strh	r2, [r0, #6]
 8015b82:	8102      	strh	r2, [r0, #8]
 8015b84:	8142      	strh	r2, [r0, #10]
 8015b86:	8182      	strh	r2, [r0, #12]
 8015b88:	81c2      	strh	r2, [r0, #14]
 8015b8a:	8202      	strh	r2, [r0, #16]
 8015b8c:	8242      	strh	r2, [r0, #18]
 8015b8e:	61c2      	str	r2, [r0, #28]
 8015b90:	8402      	strh	r2, [r0, #32]
 8015b92:	8442      	strh	r2, [r0, #34]	; 0x22
 8015b94:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015b98:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015b9c:	2201      	movs	r2, #1
 8015b9e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 8015ba2:	4770      	bx	lr
 8015ba4:	08026b18 	.word	0x08026b18

08015ba8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8015ba8:	b538      	push	{r3, r4, r5, lr}
 8015baa:	4604      	mov	r4, r0
 8015bac:	460d      	mov	r5, r1
 8015bae:	2226      	movs	r2, #38	; 0x26
 8015bb0:	2100      	movs	r1, #0
 8015bb2:	f00d faa5 	bl	8023100 <memset>
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	f7ff ffde 	bl	8015b78 <_ZN8touchgfx8DrawableC1Ev>
 8015bbc:	4b06      	ldr	r3, [pc, #24]	; (8015bd8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8015bbe:	4620      	mov	r0, r4
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	6023      	str	r3, [r4, #0]
 8015bc4:	882b      	ldrh	r3, [r5, #0]
 8015bc6:	84e3      	strh	r3, [r4, #38]	; 0x26
 8015bc8:	23ff      	movs	r3, #255	; 0xff
 8015bca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8015bce:	f7ff feda 	bl	8015986 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	bd38      	pop	{r3, r4, r5, pc}
 8015bd6:	bf00      	nop
 8015bd8:	08026978 	.word	0x08026978

08015bdc <_ZN8touchgfx8KeyboardC1Ev>:
 8015bdc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015be0:	4604      	mov	r4, r0
 8015be2:	2500      	movs	r5, #0
 8015be4:	f7ff ffc8 	bl	8015b78 <_ZN8touchgfx8DrawableC1Ev>
 8015be8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8015bec:	4b2f      	ldr	r3, [pc, #188]	; (8015cac <_ZN8touchgfx8KeyboardC1Ev+0xd0>)
 8015bee:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8015bf2:	af02      	add	r7, sp, #8
 8015bf4:	f104 0864 	add.w	r8, r4, #100	; 0x64
 8015bf8:	6023      	str	r3, [r4, #0]
 8015bfa:	4648      	mov	r0, r9
 8015bfc:	f827 6d04 	strh.w	r6, [r7, #-4]!
 8015c00:	4639      	mov	r1, r7
 8015c02:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
 8015c06:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 8015c0a:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8015c0e:	f7ff ffcb 	bl	8015ba8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015c12:	2226      	movs	r2, #38	; 0x26
 8015c14:	4629      	mov	r1, r5
 8015c16:	4640      	mov	r0, r8
 8015c18:	f00d fa72 	bl	8023100 <memset>
 8015c1c:	4640      	mov	r0, r8
 8015c1e:	f7ff ffab 	bl	8015b78 <_ZN8touchgfx8DrawableC1Ev>
 8015c22:	4b23      	ldr	r3, [pc, #140]	; (8015cb0 <_ZN8touchgfx8KeyboardC1Ev+0xd4>)
 8015c24:	4639      	mov	r1, r7
 8015c26:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 8015c2a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8015c2e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8015c32:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 8015c36:	4650      	mov	r0, sl
 8015c38:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8015c3c:	4b1d      	ldr	r3, [pc, #116]	; (8015cb4 <_ZN8touchgfx8KeyboardC1Ev+0xd8>)
 8015c3e:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 8015c42:	6663      	str	r3, [r4, #100]	; 0x64
 8015c44:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
 8015c48:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8015c4c:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 8015c50:	f8a4 60a4 	strh.w	r6, [r4, #164]	; 0xa4
 8015c54:	f8a4 60a6 	strh.w	r6, [r4, #166]	; 0xa6
 8015c58:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8015c5c:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 8015c60:	f8ad 6004 	strh.w	r6, [sp, #4]
 8015c64:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8015c68:	f7ff ff9e 	bl	8015ba8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	462a      	mov	r2, r5
 8015c70:	4629      	mov	r1, r5
 8015c72:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8015c76:	4648      	mov	r0, r9
 8015c78:	f884 50e4 	strb.w	r5, [r4, #228]	; 0xe4
 8015c7c:	f7fd faa9 	bl	80131d2 <_ZN8touchgfx8Drawable5setXYEss>
 8015c80:	4649      	mov	r1, r9
 8015c82:	4620      	mov	r0, r4
 8015c84:	f7fc ff64 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015c88:	4651      	mov	r1, sl
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f884 50dd 	strb.w	r5, [r4, #221]	; 0xdd
 8015c90:	f7fc ff5e 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015c94:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8015c98:	4620      	mov	r0, r4
 8015c9a:	4641      	mov	r1, r8
 8015c9c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8015ca0:	f7fc ff56 	bl	8012b50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	b002      	add	sp, #8
 8015ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cac:	080269e4 	.word	0x080269e4
 8015cb0:	08024a78 	.word	0x08024a78
 8015cb4:	08025790 	.word	0x08025790

08015cb8 <_ZN8touchgfx8Keyboard9setBufferEPtt>:
 8015cb8:	b510      	push	{r4, lr}
 8015cba:	4604      	mov	r4, r0
 8015cbc:	6301      	str	r1, [r0, #48]	; 0x30
 8015cbe:	8682      	strh	r2, [r0, #52]	; 0x34
 8015cc0:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
 8015cc4:	4608      	mov	r0, r1
 8015cc6:	f004 fa95 	bl	801a1f4 <_ZN8touchgfx7Unicode6strlenEPKt>
 8015cca:	86e0      	strh	r0, [r4, #54]	; 0x36
 8015ccc:	bd10      	pop	{r4, pc}

08015cce <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>:
 8015cce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015cd2:	4605      	mov	r5, r0
 8015cd4:	460c      	mov	r4, r1
 8015cd6:	f8c5 10b0 	str.w	r1, [r5, #176]	; 0xb0
 8015cda:	b309      	cbz	r1, 8015d20 <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE+0x52>
 8015cdc:	460f      	mov	r7, r1
 8015cde:	a902      	add	r1, sp, #8
 8015ce0:	f105 0664 	add.w	r6, r5, #100	; 0x64
 8015ce4:	3038      	adds	r0, #56	; 0x38
 8015ce6:	f837 3b1c 	ldrh.w	r3, [r7], #28
 8015cea:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8015cee:	f7ff fe4a 	bl	8015986 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8015cf2:	4639      	mov	r1, r7
 8015cf4:	4630      	mov	r0, r6
 8015cf6:	f7ff fc71 	bl	80155dc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8015cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cfc:	4630      	mov	r0, r6
 8015cfe:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 8015d02:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
 8015d06:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
 8015d0a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8015d0e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8015d12:	f7fd fa5e 	bl	80131d2 <_ZN8touchgfx8Drawable5setXYEss>
 8015d16:	4642      	mov	r2, r8
 8015d18:	4639      	mov	r1, r7
 8015d1a:	4630      	mov	r0, r6
 8015d1c:	f7fd fa66 	bl	80131ec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015d20:	682b      	ldr	r3, [r5, #0]
 8015d22:	4628      	mov	r0, r5
 8015d24:	695b      	ldr	r3, [r3, #20]
 8015d26:	4798      	blx	r3
 8015d28:	b002      	add	sp, #8
 8015d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08015d30 <_ZN8touchgfx8Keyboard18setTextIndentationEv>:
 8015d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d34:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8015d38:	4604      	mov	r4, r0
 8015d3a:	b343      	cbz	r3, 8015d8e <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x5e>
 8015d3c:	4a15      	ldr	r2, [pc, #84]	; (8015d94 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x64>)
 8015d3e:	f100 0764 	add.w	r7, r0, #100	; 0x64
 8015d42:	8c19      	ldrh	r1, [r3, #32]
 8015d44:	6812      	ldr	r2, [r2, #0]
 8015d46:	4638      	mov	r0, r7
 8015d48:	8add      	ldrh	r5, [r3, #22]
 8015d4a:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 8015d4e:	4a12      	ldr	r2, [pc, #72]	; (8015d98 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x68>)
 8015d50:	f9b3 8018 	ldrsh.w	r8, [r3, #24]
 8015d54:	6812      	ldr	r2, [r2, #0]
 8015d56:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8015d5a:	8a59      	ldrh	r1, [r3, #18]
 8015d5c:	7a16      	ldrb	r6, [r2, #8]
 8015d5e:	b2b2      	uxth	r2, r6
 8015d60:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 8015d64:	1a89      	subs	r1, r1, r2
 8015d66:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8015d6a:	b22d      	sxth	r5, r5
 8015d6c:	b209      	sxth	r1, r1
 8015d6e:	f7fd fa30 	bl	80131d2 <_ZN8touchgfx8Drawable5setXYEss>
 8015d72:	4642      	mov	r2, r8
 8015d74:	4629      	mov	r1, r5
 8015d76:	4638      	mov	r0, r7
 8015d78:	f7fd fa38 	bl	80131ec <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d82:	f884 609b 	strb.w	r6, [r4, #155]	; 0x9b
 8015d86:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8015d8a:	e9c4 3228 	strd	r3, r2, [r4, #160]	; 0xa0
 8015d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d92:	bf00      	nop
 8015d94:	2400f490 	.word	0x2400f490
 8015d98:	2400f498 	.word	0x2400f498

08015d9c <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>:
 8015d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da0:	4690      	mov	r8, r2
 8015da2:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8015da6:	2200      	movs	r2, #0
 8015da8:	4606      	mov	r6, r0
 8015daa:	4699      	mov	r9, r3
 8015dac:	8042      	strh	r2, [r0, #2]
 8015dae:	8082      	strh	r2, [r0, #4]
 8015db0:	80c2      	strh	r2, [r0, #6]
 8015db2:	8102      	strh	r2, [r0, #8]
 8015db4:	7002      	strb	r2, [r0, #0]
 8015db6:	b1c7      	cbz	r7, 8015dea <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8015db8:	f897 a008 	ldrb.w	sl, [r7, #8]
 8015dbc:	4615      	mov	r5, r2
 8015dbe:	f04f 0b0c 	mov.w	fp, #12
 8015dc2:	b2eb      	uxtb	r3, r5
 8015dc4:	459a      	cmp	sl, r3
 8015dc6:	d910      	bls.n	8015dea <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8015dc8:	687c      	ldr	r4, [r7, #4]
 8015dca:	464a      	mov	r2, r9
 8015dcc:	4641      	mov	r1, r8
 8015dce:	fb0b 4405 	mla	r4, fp, r5, r4
 8015dd2:	3501      	adds	r5, #1
 8015dd4:	1ca0      	adds	r0, r4, #2
 8015dd6:	f7ff fe6a 	bl	8015aae <_ZNK8touchgfx4Rect9intersectEss>
 8015dda:	2800      	cmp	r0, #0
 8015ddc:	d0f1      	beq.n	8015dc2 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x26>
 8015dde:	6823      	ldr	r3, [r4, #0]
 8015de0:	6033      	str	r3, [r6, #0]
 8015de2:	6863      	ldr	r3, [r4, #4]
 8015de4:	6073      	str	r3, [r6, #4]
 8015de6:	68a3      	ldr	r3, [r4, #8]
 8015de8:	60b3      	str	r3, [r6, #8]
 8015dea:	4630      	mov	r0, r6
 8015dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015df0 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>:
 8015df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015df4:	2500      	movs	r5, #0
 8015df6:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8015dfa:	4606      	mov	r6, r0
 8015dfc:	4690      	mov	r8, r2
 8015dfe:	4699      	mov	r9, r3
 8015e00:	6085      	str	r5, [r0, #8]
 8015e02:	e9c0 5500 	strd	r5, r5, [r0]
 8015e06:	b307      	cbz	r7, 8015e4a <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 8015e08:	f897 a010 	ldrb.w	sl, [r7, #16]
 8015e0c:	b2eb      	uxtb	r3, r5
 8015e0e:	459a      	cmp	sl, r3
 8015e10:	d91b      	bls.n	8015e4a <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 8015e12:	68fc      	ldr	r4, [r7, #12]
 8015e14:	464a      	mov	r2, r9
 8015e16:	4641      	mov	r1, r8
 8015e18:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8015e1c:	3501      	adds	r5, #1
 8015e1e:	4620      	mov	r0, r4
 8015e20:	f7ff fe45 	bl	8015aae <_ZNK8touchgfx4Rect9intersectEss>
 8015e24:	2800      	cmp	r0, #0
 8015e26:	d0f1      	beq.n	8015e0c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x1c>
 8015e28:	4623      	mov	r3, r4
 8015e2a:	4632      	mov	r2, r6
 8015e2c:	f104 0508 	add.w	r5, r4, #8
 8015e30:	6818      	ldr	r0, [r3, #0]
 8015e32:	3308      	adds	r3, #8
 8015e34:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015e38:	4614      	mov	r4, r2
 8015e3a:	42ab      	cmp	r3, r5
 8015e3c:	c403      	stmia	r4!, {r0, r1}
 8015e3e:	4622      	mov	r2, r4
 8015e40:	d1f6      	bne.n	8015e30 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x40>
 8015e42:	6818      	ldr	r0, [r3, #0]
 8015e44:	6020      	str	r0, [r4, #0]
 8015e46:	889b      	ldrh	r3, [r3, #4]
 8015e48:	80a3      	strh	r3, [r4, #4]
 8015e4a:	4630      	mov	r0, r6
 8015e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015e50 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>:
 8015e50:	b570      	push	{r4, r5, r6, lr}
 8015e52:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 8015e56:	b160      	cbz	r0, 8015e72 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>
 8015e58:	7906      	ldrb	r6, [r0, #4]
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	b2da      	uxtb	r2, r3
 8015e5e:	4296      	cmp	r6, r2
 8015e60:	d908      	bls.n	8015e74 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x24>
 8015e62:	009a      	lsls	r2, r3, #2
 8015e64:	6804      	ldr	r4, [r0, #0]
 8015e66:	3301      	adds	r3, #1
 8015e68:	18a5      	adds	r5, r4, r2
 8015e6a:	5ca2      	ldrb	r2, [r4, r2]
 8015e6c:	428a      	cmp	r2, r1
 8015e6e:	d1f5      	bne.n	8015e5c <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0xc>
 8015e70:	8868      	ldrh	r0, [r5, #2]
 8015e72:	bd70      	pop	{r4, r5, r6, pc}
 8015e74:	2000      	movs	r0, #0
 8015e76:	e7fc      	b.n	8015e72 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>

08015e78 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE>:
 8015e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e7c:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8015e80:	b08d      	sub	sp, #52	; 0x34
 8015e82:	4605      	mov	r5, r0
 8015e84:	460e      	mov	r6, r1
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	f000 80c4 	beq.w	8016014 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8015e8c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8015e8e:	f004 fd37 	bl	801a900 <_ZN8touchgfx11FontManager7getFontEt>
 8015e92:	2800      	cmp	r0, #0
 8015e94:	f000 80be 	beq.w	8016014 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8015e98:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8015e9c:	2400      	movs	r4, #0
 8015e9e:	9007      	str	r0, [sp, #28]
 8015ea0:	920a      	str	r2, [sp, #40]	; 0x28
 8015ea2:	2201      	movs	r2, #1
 8015ea4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8015ea8:	f88d 2020 	strb.w	r2, [sp, #32]
 8015eac:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
 8015eb0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015eb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015eb6:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
 8015eba:	9209      	str	r2, [sp, #36]	; 0x24
 8015ebc:	9402      	str	r4, [sp, #8]
 8015ebe:	6803      	ldr	r3, [r0, #0]
 8015ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ec2:	4798      	blx	r3
 8015ec4:	4607      	mov	r7, r0
 8015ec6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8015eca:	fa5f f884 	uxtb.w	r8, r4
 8015ece:	7a1a      	ldrb	r2, [r3, #8]
 8015ed0:	4542      	cmp	r2, r8
 8015ed2:	f240 809f 	bls.w	8016014 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8015ed6:	220c      	movs	r2, #12
 8015ed8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8015edc:	4631      	mov	r1, r6
 8015ede:	fb02 f808 	mul.w	r8, r2, r8
 8015ee2:	eb09 0a08 	add.w	sl, r9, r8
 8015ee6:	f10a 0a02 	add.w	sl, sl, #2
 8015eea:	4650      	mov	r0, sl
 8015eec:	f7ff fe22 	bl	8015b34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	f000 808a 	beq.w	801600a <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 8015ef6:	f819 1008 	ldrb.w	r1, [r9, r8]
 8015efa:	4628      	mov	r0, r5
 8015efc:	f7ff ffa8 	bl	8015e50 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 8015f00:	4681      	mov	r9, r0
 8015f02:	2800      	cmp	r0, #0
 8015f04:	f000 8081 	beq.w	801600a <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 8015f08:	f8da 0000 	ldr.w	r0, [sl]
 8015f0c:	ab03      	add	r3, sp, #12
 8015f0e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8015f12:	c303      	stmia	r3!, {r0, r1}
 8015f14:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8015f18:	2102      	movs	r1, #2
 8015f1a:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8015f1e:	1bd3      	subs	r3, r2, r7
 8015f20:	fb93 f3f1 	sdiv	r3, r3, r1
 8015f24:	b29b      	uxth	r3, r3
 8015f26:	4498      	add	r8, r3
 8015f28:	1ad3      	subs	r3, r2, r3
 8015f2a:	fa1f f888 	uxth.w	r8, r8
 8015f2e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015f32:	ab05      	add	r3, sp, #20
 8015f34:	f8da 1004 	ldr.w	r1, [sl, #4]
 8015f38:	f8ad 800e 	strh.w	r8, [sp, #14]
 8015f3c:	f8da 0000 	ldr.w	r0, [sl]
 8015f40:	c303      	stmia	r3!, {r0, r1}
 8015f42:	4631      	mov	r1, r6
 8015f44:	a805      	add	r0, sp, #20
 8015f46:	f7ff fdf5 	bl	8015b34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	d05f      	beq.n	801600e <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x196>
 8015f4e:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 8015f52:	f9b6 2000 	ldrsh.w	r2, [r6]
 8015f56:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8015f5a:	4686      	mov	lr, r0
 8015f5c:	4290      	cmp	r0, r2
 8015f5e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8015f62:	4450      	add	r0, sl
 8015f64:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 8015f68:	bfb8      	it	lt
 8015f6a:	4696      	movlt	lr, r2
 8015f6c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8015f70:	4452      	add	r2, sl
 8015f72:	b280      	uxth	r0, r0
 8015f74:	4299      	cmp	r1, r3
 8015f76:	468c      	mov	ip, r1
 8015f78:	b292      	uxth	r2, r2
 8015f7a:	f8ad e014 	strh.w	lr, [sp, #20]
 8015f7e:	fa0f fb80 	sxth.w	fp, r0
 8015f82:	bfb8      	it	lt
 8015f84:	469c      	movlt	ip, r3
 8015f86:	fa0f fa82 	sxth.w	sl, r2
 8015f8a:	f8ad c016 	strh.w	ip, [sp, #22]
 8015f8e:	45d3      	cmp	fp, sl
 8015f90:	bfb8      	it	lt
 8015f92:	4602      	movlt	r2, r0
 8015f94:	eba2 020e 	sub.w	r2, r2, lr
 8015f98:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015f9c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015fa0:	4411      	add	r1, r2
 8015fa2:	88f2      	ldrh	r2, [r6, #6]
 8015fa4:	4413      	add	r3, r2
 8015fa6:	b289      	uxth	r1, r1
 8015fa8:	b29b      	uxth	r3, r3
 8015faa:	b208      	sxth	r0, r1
 8015fac:	b21a      	sxth	r2, r3
 8015fae:	4290      	cmp	r0, r2
 8015fb0:	bfb8      	it	lt
 8015fb2:	460b      	movlt	r3, r1
 8015fb4:	eba3 030c 	sub.w	r3, r3, ip
 8015fb8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015fbc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015fc0:	4628      	mov	r0, r5
 8015fc2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015fc6:	f8ad 9008 	strh.w	r9, [sp, #8]
 8015fca:	1a9b      	subs	r3, r3, r2
 8015fcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015fd0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015fd4:	eba3 0808 	sub.w	r8, r3, r8
 8015fd8:	682b      	ldr	r3, [r5, #0]
 8015fda:	f8ad 8016 	strh.w	r8, [sp, #22]
 8015fde:	f10d 080c 	add.w	r8, sp, #12
 8015fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fe4:	4641      	mov	r1, r8
 8015fe6:	4798      	blx	r3
 8015fe8:	4b0c      	ldr	r3, [pc, #48]	; (801601c <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1a4>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015ff0:	b10a      	cbz	r2, 8015ff6 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x17e>
 8015ff2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015ff4:	b900      	cbnz	r0, 8015ff8 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x180>
 8015ff6:	6898      	ldr	r0, [r3, #8]
 8015ff8:	ab02      	add	r3, sp, #8
 8015ffa:	9301      	str	r3, [sp, #4]
 8015ffc:	ab07      	add	r3, sp, #28
 8015ffe:	9300      	str	r3, [sp, #0]
 8016000:	ab05      	add	r3, sp, #20
 8016002:	e898 0006 	ldmia.w	r8, {r1, r2}
 8016006:	f7ee f9f1 	bl	80043ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801600a:	3401      	adds	r4, #1
 801600c:	e75b      	b.n	8015ec6 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x4e>
 801600e:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8016012:	e7d3      	b.n	8015fbc <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x144>
 8016014:	b00d      	add	sp, #52	; 0x34
 8016016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801601a:	bf00      	nop
 801601c:	2400f440 	.word	0x2400f440

08016020 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE>:
 8016020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016024:	790d      	ldrb	r5, [r1, #4]
 8016026:	b08b      	sub	sp, #44	; 0x2c
 8016028:	4604      	mov	r4, r0
 801602a:	2d01      	cmp	r5, #1
 801602c:	d108      	bne.n	8016040 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 801602e:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
 8016032:	b12b      	cbz	r3, 8016040 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 8016034:	2300      	movs	r3, #0
 8016036:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 801603a:	b00b      	add	sp, #44	; 0x2c
 801603c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016040:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016044:	2700      	movs	r7, #0
 8016046:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 801604a:	a806      	add	r0, sp, #24
 801604c:	4642      	mov	r2, r8
 801604e:	4621      	mov	r1, r4
 8016050:	464b      	mov	r3, r9
 8016052:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8016056:	f7ff fecb 	bl	8015df0 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>
 801605a:	9e08      	ldr	r6, [sp, #32]
 801605c:	2e00      	cmp	r6, #0
 801605e:	d049      	beq.n	80160f4 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xd4>
 8016060:	2d00      	cmp	r5, #0
 8016062:	d133      	bne.n	80160cc <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xac>
 8016064:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 8016068:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801606c:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8016070:	4630      	mov	r0, r6
 8016072:	f7fd f8ae 	bl	80131d2 <_ZN8touchgfx8Drawable5setXYEss>
 8016076:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801607a:	a90a      	add	r1, sp, #40	; 0x28
 801607c:	f821 3d1c 	strh.w	r3, [r1, #-28]!
 8016080:	4630      	mov	r0, r6
 8016082:	f7ff fc80 	bl	8015986 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016086:	2301      	movs	r3, #1
 8016088:	4622      	mov	r2, r4
 801608a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801608e:	ab01      	add	r3, sp, #4
 8016090:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 8016094:	6851      	ldr	r1, [r2, #4]
 8016096:	c303      	stmia	r3!, {r0, r1}
 8016098:	6823      	ldr	r3, [r4, #0]
 801609a:	a901      	add	r1, sp, #4
 801609c:	4620      	mov	r0, r4
 801609e:	691b      	ldr	r3, [r3, #16]
 80160a0:	4798      	blx	r3
 80160a2:	1e6b      	subs	r3, r5, #1
 80160a4:	2b01      	cmp	r3, #1
 80160a6:	d8c8      	bhi.n	801603a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 80160a8:	4622      	mov	r2, r4
 80160aa:	ab01      	add	r3, sp, #4
 80160ac:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 80160b0:	6851      	ldr	r1, [r2, #4]
 80160b2:	c303      	stmia	r3!, {r0, r1}
 80160b4:	2300      	movs	r3, #0
 80160b6:	a901      	add	r1, sp, #4
 80160b8:	4620      	mov	r0, r4
 80160ba:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 80160be:	6823      	ldr	r3, [r4, #0]
 80160c0:	691b      	ldr	r3, [r3, #16]
 80160c2:	4798      	blx	r3
 80160c4:	2d02      	cmp	r5, #2
 80160c6:	d1b8      	bne.n	801603a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 80160c8:	2301      	movs	r3, #1
 80160ca:	e7b4      	b.n	8016036 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x16>
 80160cc:	2d01      	cmp	r5, #1
 80160ce:	d1e8      	bne.n	80160a2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80160d0:	6833      	ldr	r3, [r6, #0]
 80160d2:	4630      	mov	r0, r6
 80160d4:	68db      	ldr	r3, [r3, #12]
 80160d6:	4798      	blx	r3
 80160d8:	2800      	cmp	r0, #0
 80160da:	d0e5      	beq.n	80160a8 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 80160dc:	6833      	ldr	r3, [r6, #0]
 80160de:	4630      	mov	r0, r6
 80160e0:	689b      	ldr	r3, [r3, #8]
 80160e2:	4798      	blx	r3
 80160e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80160e6:	2800      	cmp	r0, #0
 80160e8:	d0de      	beq.n	80160a8 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 80160ea:	6803      	ldr	r3, [r0, #0]
 80160ec:	4639      	mov	r1, r7
 80160ee:	689b      	ldr	r3, [r3, #8]
 80160f0:	4798      	blx	r3
 80160f2:	e7d6      	b.n	80160a2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80160f4:	4621      	mov	r1, r4
 80160f6:	464b      	mov	r3, r9
 80160f8:	4642      	mov	r2, r8
 80160fa:	a803      	add	r0, sp, #12
 80160fc:	f7ff fe4e 	bl	8015d9c <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>
 8016100:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8016104:	b985      	cbnz	r5, 8016128 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x108>
 8016106:	2900      	cmp	r1, #0
 8016108:	d0cb      	beq.n	80160a2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801610a:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 801610e:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8016112:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016116:	4630      	mov	r0, r6
 8016118:	f7fd f85b 	bl	80131d2 <_ZN8touchgfx8Drawable5setXYEss>
 801611c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016120:	a90a      	add	r1, sp, #40	; 0x28
 8016122:	f821 3d28 	strh.w	r3, [r1, #-40]!
 8016126:	e7ab      	b.n	8016080 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x60>
 8016128:	2d01      	cmp	r5, #1
 801612a:	d1ba      	bne.n	80160a2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801612c:	2900      	cmp	r1, #0
 801612e:	d0b8      	beq.n	80160a2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8016130:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016132:	2b00      	cmp	r3, #0
 8016134:	d0b5      	beq.n	80160a2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8016136:	4620      	mov	r0, r4
 8016138:	f7ff fe8a 	bl	8015e50 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 801613c:	4607      	mov	r7, r0
 801613e:	2800      	cmp	r0, #0
 8016140:	d0af      	beq.n	80160a2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8016142:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016144:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016146:	3b01      	subs	r3, #1
 8016148:	429a      	cmp	r2, r3
 801614a:	daaa      	bge.n	80160a2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801614c:	f104 0864 	add.w	r8, r4, #100	; 0x64
 8016150:	4640      	mov	r0, r8
 8016152:	f7ff fb0b 	bl	801576c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 8016156:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8016158:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801615a:	4640      	mov	r0, r8
 801615c:	1c59      	adds	r1, r3, #1
 801615e:	86e1      	strh	r1, [r4, #54]	; 0x36
 8016160:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8016164:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016166:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016168:	f823 6012 	strh.w	r6, [r3, r2, lsl #1]
 801616c:	f7ff fafe 	bl	801576c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>
 8016170:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016172:	2800      	cmp	r0, #0
 8016174:	d1b9      	bne.n	80160ea <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xca>
 8016176:	e794      	b.n	80160a2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>

08016178 <_ZN8touchgfx8Keyboard17setBufferPositionEt>:
 8016178:	86c1      	strh	r1, [r0, #54]	; 0x36
 801617a:	3064      	adds	r0, #100	; 0x64
 801617c:	f002 bc60 	b.w	8018a40 <_ZNK8touchgfx8Drawable10invalidateEv>

08016180 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>:
 8016180:	6803      	ldr	r3, [r0, #0]
 8016182:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
 8016186:	695b      	ldr	r3, [r3, #20]
 8016188:	4718      	bx	r3

0801618a <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801618a:	b510      	push	{r4, lr}
 801618c:	6803      	ldr	r3, [r0, #0]
 801618e:	460c      	mov	r4, r1
 8016190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016192:	4798      	blx	r3
 8016194:	1b03      	subs	r3, r0, r4
 8016196:	4258      	negs	r0, r3
 8016198:	4158      	adcs	r0, r3
 801619a:	bd10      	pop	{r4, pc}

0801619c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801619c:	4b01      	ldr	r3, [pc, #4]	; (80161a4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801619e:	6019      	str	r1, [r3, #0]
 80161a0:	4770      	bx	lr
 80161a2:	bf00      	nop
 80161a4:	2400f448 	.word	0x2400f448

080161a8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80161a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ac:	4696      	mov	lr, r2
 80161ae:	b097      	sub	sp, #92	; 0x5c
 80161b0:	4605      	mov	r5, r0
 80161b2:	4614      	mov	r4, r2
 80161b4:	460e      	mov	r6, r1
 80161b6:	461f      	mov	r7, r3
 80161b8:	f10d 0c1c 	add.w	ip, sp, #28
 80161bc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80161c0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80161c4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80161c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80161cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161d0:	f8de 3000 	ldr.w	r3, [lr]
 80161d4:	f104 0e14 	add.w	lr, r4, #20
 80161d8:	f8cc 3000 	str.w	r3, [ip]
 80161dc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80161e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80161e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161e8:	f8de 3000 	ldr.w	r3, [lr]
 80161ec:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80161f0:	f8cc 3000 	str.w	r3, [ip]
 80161f4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80161f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80161fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016200:	f8de 3000 	ldr.w	r3, [lr]
 8016204:	4631      	mov	r1, r6
 8016206:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016208:	4628      	mov	r0, r5
 801620a:	f8cc 3000 	str.w	r3, [ip]
 801620e:	682b      	ldr	r3, [r5, #0]
 8016210:	9201      	str	r2, [sp, #4]
 8016212:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016214:	f8cd 8008 	str.w	r8, [sp, #8]
 8016218:	9200      	str	r2, [sp, #0]
 801621a:	aa07      	add	r2, sp, #28
 801621c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016220:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8016224:	463b      	mov	r3, r7
 8016226:	47d8      	blx	fp
 8016228:	46a6      	mov	lr, r4
 801622a:	f10d 0c1c 	add.w	ip, sp, #28
 801622e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016232:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016236:	f8de 3000 	ldr.w	r3, [lr]
 801623a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801623e:	343c      	adds	r4, #60	; 0x3c
 8016240:	f8cc 3000 	str.w	r3, [ip]
 8016244:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016248:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801624c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016250:	f8de 3000 	ldr.w	r3, [lr]
 8016254:	f8cc 3000 	str.w	r3, [ip]
 8016258:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801625c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801625e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016262:	6823      	ldr	r3, [r4, #0]
 8016264:	4631      	mov	r1, r6
 8016266:	4628      	mov	r0, r5
 8016268:	f8cc 3000 	str.w	r3, [ip]
 801626c:	682b      	ldr	r3, [r5, #0]
 801626e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016272:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016274:	f8cd 8008 	str.w	r8, [sp, #8]
 8016278:	9201      	str	r2, [sp, #4]
 801627a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801627c:	9200      	str	r2, [sp, #0]
 801627e:	aa07      	add	r2, sp, #28
 8016280:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8016282:	463b      	mov	r3, r7
 8016284:	47a0      	blx	r4
 8016286:	b017      	add	sp, #92	; 0x5c
 8016288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801628c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801628c:	2000      	movs	r0, #0
 801628e:	4770      	bx	lr

08016290 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016294:	b08d      	sub	sp, #52	; 0x34
 8016296:	4688      	mov	r8, r1
 8016298:	f8d3 c000 	ldr.w	ip, [r3]
 801629c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801629e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80162a2:	680f      	ldr	r7, [r1, #0]
 80162a4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80162a8:	eba7 070c 	sub.w	r7, r7, ip
 80162ac:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80162b0:	edd3 6a07 	vldr	s13, [r3, #28]
 80162b4:	42bc      	cmp	r4, r7
 80162b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80162b8:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80162bc:	bfa8      	it	ge
 80162be:	463c      	movge	r4, r7
 80162c0:	f9b1 9000 	ldrsh.w	r9, [r1]
 80162c4:	f9ba 1000 	ldrsh.w	r1, [sl]
 80162c8:	ee07 4a90 	vmov	s15, r4
 80162cc:	eb09 0e0c 	add.w	lr, r9, ip
 80162d0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80162d4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80162d8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80162dc:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80162e0:	4571      	cmp	r1, lr
 80162e2:	ee25 4a04 	vmul.f32	s8, s10, s8
 80162e6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80162ea:	ee25 5a27 	vmul.f32	s10, s10, s15
 80162ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80162f2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80162f6:	ee32 1a05 	vadd.f32	s2, s4, s10
 80162fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80162fe:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016302:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016306:	ee22 2a07 	vmul.f32	s4, s4, s14
 801630a:	f340 808c 	ble.w	8016426 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801630e:	eba1 060e 	sub.w	r6, r1, lr
 8016312:	fb96 f5f4 	sdiv	r5, r6, r4
 8016316:	ee07 5a10 	vmov	s14, r5
 801631a:	2d00      	cmp	r5, #0
 801631c:	fb04 6615 	mls	r6, r4, r5, r6
 8016320:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016324:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016328:	eee7 0a24 	vfma.f32	s1, s14, s9
 801632c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016330:	dd12      	ble.n	8016358 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016332:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016336:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801633a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801633e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016346:	bf14      	ite	ne
 8016348:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801634c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016350:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016354:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016358:	fb05 f204 	mul.w	r2, r5, r4
 801635c:	1abf      	subs	r7, r7, r2
 801635e:	4494      	add	ip, r2
 8016360:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016364:	4411      	add	r1, r2
 8016366:	eb09 020c 	add.w	r2, r9, ip
 801636a:	b209      	sxth	r1, r1
 801636c:	443a      	add	r2, r7
 801636e:	428a      	cmp	r2, r1
 8016370:	bfc4      	itt	gt
 8016372:	eba1 0209 	subgt.w	r2, r1, r9
 8016376:	eba2 070c 	subgt.w	r7, r2, ip
 801637a:	2f00      	cmp	r7, #0
 801637c:	dd50      	ble.n	8016420 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801637e:	fb97 f1f4 	sdiv	r1, r7, r4
 8016382:	fb04 7211 	mls	r2, r4, r1, r7
 8016386:	b90a      	cbnz	r2, 801638c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016388:	3901      	subs	r1, #1
 801638a:	4622      	mov	r2, r4
 801638c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016390:	6840      	ldr	r0, [r0, #4]
 8016392:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8016396:	44b6      	add	lr, r6
 8016398:	f8d0 a000 	ldr.w	sl, [r0]
 801639c:	2900      	cmp	r1, #0
 801639e:	bfcc      	ite	gt
 80163a0:	46a1      	movgt	r9, r4
 80163a2:	4691      	movle	r9, r2
 80163a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80163a6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80163a8:	fb04 e505 	mla	r5, r4, r5, lr
 80163ac:	eef0 6a42 	vmov.f32	s13, s4
 80163b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80163b4:	9008      	str	r0, [sp, #32]
 80163b6:	eeb0 7a61 	vmov.f32	s14, s3
 80163ba:	9818      	ldr	r0, [sp, #96]	; 0x60
 80163bc:	695b      	ldr	r3, [r3, #20]
 80163be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80163c2:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80163c6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80163ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80163cc:	445b      	add	r3, fp
 80163ce:	9307      	str	r3, [sp, #28]
 80163d0:	ee16 3a90 	vmov	r3, s13
 80163d4:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80163d8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80163dc:	ee21 3a23 	vmul.f32	s6, s2, s7
 80163e0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80163e4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80163e8:	ee17 7a90 	vmov	r7, s15
 80163ec:	ee73 7a42 	vsub.f32	s15, s6, s4
 80163f0:	fb97 f7f4 	sdiv	r7, r7, r4
 80163f4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80163f8:	ee17 ca90 	vmov	ip, s15
 80163fc:	fb9c fcf4 	sdiv	ip, ip, r4
 8016400:	fb0c 3306 	mla	r3, ip, r6, r3
 8016404:	9302      	str	r3, [sp, #8]
 8016406:	ee17 3a10 	vmov	r3, s14
 801640a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801640e:	fb07 3706 	mla	r7, r7, r6, r3
 8016412:	eba9 0306 	sub.w	r3, r9, r6
 8016416:	e9cd 4700 	strd	r4, r7, [sp]
 801641a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801641e:	47a0      	blx	r4
 8016420:	b00d      	add	sp, #52	; 0x34
 8016422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016426:	2500      	movs	r5, #0
 8016428:	462e      	mov	r6, r5
 801642a:	e799      	b.n	8016360 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801642c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016430:	b0db      	sub	sp, #364	; 0x16c
 8016432:	461d      	mov	r5, r3
 8016434:	4614      	mov	r4, r2
 8016436:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801643a:	910f      	str	r1, [sp, #60]	; 0x3c
 801643c:	4629      	mov	r1, r5
 801643e:	930a      	str	r3, [sp, #40]	; 0x28
 8016440:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8016444:	9009      	str	r0, [sp, #36]	; 0x24
 8016446:	930b      	str	r3, [sp, #44]	; 0x2c
 8016448:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801644c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8016450:	9310      	str	r3, [sp, #64]	; 0x40
 8016452:	6803      	ldr	r3, [r0, #0]
 8016454:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8016456:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801645a:	47b8      	blx	r7
 801645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801645e:	6058      	str	r0, [r3, #4]
 8016460:	2800      	cmp	r0, #0
 8016462:	f000 83a1 	beq.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016466:	682b      	ldr	r3, [r5, #0]
 8016468:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801646c:	ed94 7a02 	vldr	s14, [r4, #8]
 8016470:	9314      	str	r3, [sp, #80]	; 0x50
 8016472:	686b      	ldr	r3, [r5, #4]
 8016474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016478:	9315      	str	r3, [sp, #84]	; 0x54
 801647a:	4bc1      	ldr	r3, [pc, #772]	; (8016780 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801647c:	7819      	ldrb	r1, [r3, #0]
 801647e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016482:	2900      	cmp	r1, #0
 8016484:	bf16      	itet	ne
 8016486:	4619      	movne	r1, r3
 8016488:	4611      	moveq	r1, r2
 801648a:	4613      	movne	r3, r2
 801648c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016490:	9116      	str	r1, [sp, #88]	; 0x58
 8016492:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8016496:	f240 8387 	bls.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801649a:	ed94 7a07 	vldr	s14, [r4, #28]
 801649e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80164a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a6:	f240 837f 	bls.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80164aa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80164ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80164b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164b6:	f240 8377 	bls.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80164ba:	6822      	ldr	r2, [r4, #0]
 80164bc:	4bb1      	ldr	r3, [pc, #708]	; (8016784 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80164be:	429a      	cmp	r2, r3
 80164c0:	f2c0 8372 	blt.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80164c4:	49b0      	ldr	r1, [pc, #704]	; (8016788 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80164c6:	6963      	ldr	r3, [r4, #20]
 80164c8:	428a      	cmp	r2, r1
 80164ca:	f300 836d 	bgt.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80164ce:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80164d2:	48ae      	ldr	r0, [pc, #696]	; (801678c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80164d4:	33ff      	adds	r3, #255	; 0xff
 80164d6:	4283      	cmp	r3, r0
 80164d8:	f200 8366 	bhi.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80164dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80164de:	4dac      	ldr	r5, [pc, #688]	; (8016790 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80164e0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80164e4:	33ff      	adds	r3, #255	; 0xff
 80164e6:	42ab      	cmp	r3, r5
 80164e8:	f200 835e 	bhi.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80164ec:	6862      	ldr	r2, [r4, #4]
 80164ee:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80164f2:	33ff      	adds	r3, #255	; 0xff
 80164f4:	4283      	cmp	r3, r0
 80164f6:	f200 8357 	bhi.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80164fa:	69a1      	ldr	r1, [r4, #24]
 80164fc:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8016500:	33ff      	adds	r3, #255	; 0xff
 8016502:	4283      	cmp	r3, r0
 8016504:	f200 8350 	bhi.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016508:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801650a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801650e:	30ff      	adds	r0, #255	; 0xff
 8016510:	42a8      	cmp	r0, r5
 8016512:	f200 8349 	bhi.w	8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016516:	428a      	cmp	r2, r1
 8016518:	f280 8110 	bge.w	801673c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801651c:	429a      	cmp	r2, r3
 801651e:	f300 8119 	bgt.w	8016754 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016522:	4299      	cmp	r1, r3
 8016524:	f280 811d 	bge.w	8016762 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016528:	2502      	movs	r5, #2
 801652a:	2701      	movs	r7, #1
 801652c:	46a9      	mov	r9, r5
 801652e:	46b8      	mov	r8, r7
 8016530:	f04f 0a00 	mov.w	sl, #0
 8016534:	4621      	mov	r1, r4
 8016536:	a849      	add	r0, sp, #292	; 0x124
 8016538:	f003 fc40 	bl	8019dbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801653c:	4622      	mov	r2, r4
 801653e:	4653      	mov	r3, sl
 8016540:	a949      	add	r1, sp, #292	; 0x124
 8016542:	f8cd 9000 	str.w	r9, [sp]
 8016546:	a819      	add	r0, sp, #100	; 0x64
 8016548:	f003 fd68 	bl	801a01c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801654c:	4622      	mov	r2, r4
 801654e:	4653      	mov	r3, sl
 8016550:	a949      	add	r1, sp, #292	; 0x124
 8016552:	f8cd 8000 	str.w	r8, [sp]
 8016556:	a829      	add	r0, sp, #164	; 0xa4
 8016558:	f003 fd60 	bl	801a01c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801655c:	4643      	mov	r3, r8
 801655e:	4622      	mov	r2, r4
 8016560:	a949      	add	r1, sp, #292	; 0x124
 8016562:	f8cd 9000 	str.w	r9, [sp]
 8016566:	a839      	add	r0, sp, #228	; 0xe4
 8016568:	f003 fd58 	bl	801a01c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801656c:	42af      	cmp	r7, r5
 801656e:	af12      	add	r7, sp, #72	; 0x48
 8016570:	bfb7      	itett	lt
 8016572:	2300      	movlt	r3, #0
 8016574:	2301      	movge	r3, #1
 8016576:	ad29      	addlt	r5, sp, #164	; 0xa4
 8016578:	ac19      	addlt	r4, sp, #100	; 0x64
 801657a:	bfb1      	iteee	lt
 801657c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801657e:	ad19      	addge	r5, sp, #100	; 0x64
 8016580:	930e      	strge	r3, [sp, #56]	; 0x38
 8016582:	ac29      	addge	r4, sp, #164	; 0xa4
 8016584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016586:	e893 0003 	ldmia.w	r3, {r0, r1}
 801658a:	e887 0003 	stmia.w	r7, {r0, r1}
 801658e:	b928      	cbnz	r0, 801659c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016590:	4b80      	ldr	r3, [pc, #512]	; (8016794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016592:	6818      	ldr	r0, [r3, #0]
 8016594:	6803      	ldr	r3, [r0, #0]
 8016596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016598:	4798      	blx	r3
 801659a:	6038      	str	r0, [r7, #0]
 801659c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801659e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80165a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80165a6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80165a8:	930c      	str	r3, [sp, #48]	; 0x30
 80165aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80165ac:	6963      	ldr	r3, [r4, #20]
 80165ae:	440b      	add	r3, r1
 80165b0:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80165b4:	4408      	add	r0, r1
 80165b6:	b200      	sxth	r0, r0
 80165b8:	4283      	cmp	r3, r0
 80165ba:	900d      	str	r0, [sp, #52]	; 0x34
 80165bc:	f280 80dd 	bge.w	801677a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80165c0:	428b      	cmp	r3, r1
 80165c2:	da08      	bge.n	80165d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80165c4:	2a00      	cmp	r2, #0
 80165c6:	dd06      	ble.n	80165d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80165c8:	1acb      	subs	r3, r1, r3
 80165ca:	429a      	cmp	r2, r3
 80165cc:	f2c0 80e4 	blt.w	8016798 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	f300 80e2 	bgt.w	801679a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80165d6:	6967      	ldr	r7, [r4, #20]
 80165d8:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80165dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165de:	443b      	add	r3, r7
 80165e0:	461f      	mov	r7, r3
 80165e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165e4:	1bdf      	subs	r7, r3, r7
 80165e6:	4297      	cmp	r7, r2
 80165e8:	bfa8      	it	ge
 80165ea:	4617      	movge	r7, r2
 80165ec:	2f00      	cmp	r7, #0
 80165ee:	f340 8166 	ble.w	80168be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80165f2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80165f4:	6829      	ldr	r1, [r5, #0]
 80165f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80165fa:	f9bb 3000 	ldrsh.w	r3, [fp]
 80165fe:	4411      	add	r1, r2
 8016600:	6820      	ldr	r0, [r4, #0]
 8016602:	4299      	cmp	r1, r3
 8016604:	dd1a      	ble.n	801663c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016606:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801660a:	4402      	add	r2, r0
 801660c:	440b      	add	r3, r1
 801660e:	b21b      	sxth	r3, r3
 8016610:	429a      	cmp	r2, r3
 8016612:	dc13      	bgt.n	801663c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016614:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016616:	a912      	add	r1, sp, #72	; 0x48
 8016618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801661a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	9206      	str	r2, [sp, #24]
 8016620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016622:	9500      	str	r5, [sp, #0]
 8016624:	9205      	str	r2, [sp, #20]
 8016626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016628:	e9cd b203 	strd	fp, r2, [sp, #12]
 801662c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801662e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016632:	aa49      	add	r2, sp, #292	; 0x124
 8016634:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016638:	4623      	mov	r3, r4
 801663a:	47c8      	blx	r9
 801663c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8016640:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016644:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016648:	ee37 7a27 	vadd.f32	s14, s14, s15
 801664c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8016650:	68a1      	ldr	r1, [r4, #8]
 8016652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016656:	ed94 6a08 	vldr	s12, [r4, #32]
 801665a:	edd4 6a07 	vldr	s13, [r4, #28]
 801665e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016662:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016666:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801666a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801666e:	edc4 6a07 	vstr	s13, [r4, #28]
 8016672:	441a      	add	r2, r3
 8016674:	6963      	ldr	r3, [r4, #20]
 8016676:	3301      	adds	r3, #1
 8016678:	6022      	str	r2, [r4, #0]
 801667a:	6163      	str	r3, [r4, #20]
 801667c:	69a3      	ldr	r3, [r4, #24]
 801667e:	3b01      	subs	r3, #1
 8016680:	61a3      	str	r3, [r4, #24]
 8016682:	6923      	ldr	r3, [r4, #16]
 8016684:	440b      	add	r3, r1
 8016686:	68e1      	ldr	r1, [r4, #12]
 8016688:	428b      	cmp	r3, r1
 801668a:	6123      	str	r3, [r4, #16]
 801668c:	db15      	blt.n	80166ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801668e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8016692:	3201      	adds	r2, #1
 8016694:	1a5b      	subs	r3, r3, r1
 8016696:	ee76 6a26 	vadd.f32	s13, s12, s13
 801669a:	6022      	str	r2, [r4, #0]
 801669c:	6123      	str	r3, [r4, #16]
 801669e:	edc4 6a07 	vstr	s13, [r4, #28]
 80166a2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80166a6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80166aa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80166ae:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80166b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80166b6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80166ba:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80166be:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80166c2:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80166c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80166ca:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80166ce:	68a9      	ldr	r1, [r5, #8]
 80166d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80166d4:	ed95 6a08 	vldr	s12, [r5, #32]
 80166d8:	edd5 6a07 	vldr	s13, [r5, #28]
 80166dc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80166e0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80166e4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80166e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80166ec:	edc5 6a07 	vstr	s13, [r5, #28]
 80166f0:	441a      	add	r2, r3
 80166f2:	696b      	ldr	r3, [r5, #20]
 80166f4:	3301      	adds	r3, #1
 80166f6:	602a      	str	r2, [r5, #0]
 80166f8:	616b      	str	r3, [r5, #20]
 80166fa:	69ab      	ldr	r3, [r5, #24]
 80166fc:	3b01      	subs	r3, #1
 80166fe:	61ab      	str	r3, [r5, #24]
 8016700:	692b      	ldr	r3, [r5, #16]
 8016702:	440b      	add	r3, r1
 8016704:	68e9      	ldr	r1, [r5, #12]
 8016706:	428b      	cmp	r3, r1
 8016708:	612b      	str	r3, [r5, #16]
 801670a:	db15      	blt.n	8016738 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801670c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016710:	3201      	adds	r2, #1
 8016712:	1a5b      	subs	r3, r3, r1
 8016714:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016718:	602a      	str	r2, [r5, #0]
 801671a:	612b      	str	r3, [r5, #16]
 801671c:	edc5 6a07 	vstr	s13, [r5, #28]
 8016720:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016724:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016728:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801672c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016734:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016738:	3f01      	subs	r7, #1
 801673a:	e757      	b.n	80165ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801673c:	4299      	cmp	r1, r3
 801673e:	dc13      	bgt.n	8016768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8016740:	429a      	cmp	r2, r3
 8016742:	da14      	bge.n	801676e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8016744:	2502      	movs	r5, #2
 8016746:	2703      	movs	r7, #3
 8016748:	f04f 0800 	mov.w	r8, #0
 801674c:	46a9      	mov	r9, r5
 801674e:	f04f 0a01 	mov.w	sl, #1
 8016752:	e6ef      	b.n	8016534 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016754:	2501      	movs	r5, #1
 8016756:	2700      	movs	r7, #0
 8016758:	46a9      	mov	r9, r5
 801675a:	46b8      	mov	r8, r7
 801675c:	f04f 0a02 	mov.w	sl, #2
 8016760:	e6e8      	b.n	8016534 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8016762:	2501      	movs	r5, #1
 8016764:	2702      	movs	r7, #2
 8016766:	e6e1      	b.n	801652c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8016768:	2500      	movs	r5, #0
 801676a:	2701      	movs	r7, #1
 801676c:	e7f4      	b.n	8016758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801676e:	2702      	movs	r7, #2
 8016770:	2503      	movs	r5, #3
 8016772:	f04f 0900 	mov.w	r9, #0
 8016776:	46b8      	mov	r8, r7
 8016778:	e7e9      	b.n	801674e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801677a:	4613      	mov	r3, r2
 801677c:	e728      	b.n	80165d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801677e:	bf00      	nop
 8016780:	2400f438 	.word	0x2400f438
 8016784:	fffd8f01 	.word	0xfffd8f01
 8016788:	00027100 	.word	0x00027100
 801678c:	0004e1ff 	.word	0x0004e1ff
 8016790:	0004e1fe 	.word	0x0004e1fe
 8016794:	2400f440 	.word	0x2400f440
 8016798:	4613      	mov	r3, r2
 801679a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801679c:	469e      	mov	lr, r3
 801679e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80167a0:	469c      	mov	ip, r3
 80167a2:	9111      	str	r1, [sp, #68]	; 0x44
 80167a4:	f04f 0900 	mov.w	r9, #0
 80167a8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80167ac:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80167b0:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80167b4:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80167b8:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80167bc:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80167c0:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80167c4:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80167c8:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80167cc:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80167d0:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80167d4:	f1bc 0f00 	cmp.w	ip, #0
 80167d8:	d147      	bne.n	801686a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80167da:	eb03 0c07 	add.w	ip, r3, r7
 80167de:	1ad7      	subs	r7, r2, r3
 80167e0:	f1b9 0f00 	cmp.w	r9, #0
 80167e4:	d009      	beq.n	80167fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80167e6:	9029      	str	r0, [sp, #164]	; 0xa4
 80167e8:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80167ec:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80167f0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80167f4:	912d      	str	r1, [sp, #180]	; 0xb4
 80167f6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80167fa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80167fc:	f04f 0800 	mov.w	r8, #0
 8016800:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016804:	9111      	str	r1, [sp, #68]	; 0x44
 8016806:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801680a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801680e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016812:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016816:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801681a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801681e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016822:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016826:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801682a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801682e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016832:	f1be 0f00 	cmp.w	lr, #0
 8016836:	d031      	beq.n	801689c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8016838:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801683a:	4450      	add	r0, sl
 801683c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016840:	4431      	add	r1, r6
 8016842:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016846:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801684a:	4549      	cmp	r1, r9
 801684c:	db08      	blt.n	8016860 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801684e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016852:	3001      	adds	r0, #1
 8016854:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016858:	eba1 0109 	sub.w	r1, r1, r9
 801685c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016860:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016864:	f04f 0801 	mov.w	r8, #1
 8016868:	e7e3      	b.n	8016832 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801686a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801686c:	4450      	add	r0, sl
 801686e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016872:	4431      	add	r1, r6
 8016874:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016878:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801687c:	4541      	cmp	r1, r8
 801687e:	db08      	blt.n	8016892 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8016880:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016884:	3001      	adds	r0, #1
 8016886:	ee37 7a25 	vadd.f32	s14, s14, s11
 801688a:	eba1 0108 	sub.w	r1, r1, r8
 801688e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016892:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016896:	f04f 0901 	mov.w	r9, #1
 801689a:	e79b      	b.n	80167d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801689c:	449c      	add	ip, r3
 801689e:	1aff      	subs	r7, r7, r3
 80168a0:	f1b8 0f00 	cmp.w	r8, #0
 80168a4:	d009      	beq.n	80168ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80168a6:	9019      	str	r0, [sp, #100]	; 0x64
 80168a8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80168ac:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80168b0:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80168b4:	911d      	str	r1, [sp, #116]	; 0x74
 80168b6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80168ba:	1ad2      	subs	r2, r2, r3
 80168bc:	e68b      	b.n	80165d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80168be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168c0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	f000 80d1 	beq.w	8016a6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80168c8:	ad19      	add	r5, sp, #100	; 0x64
 80168ca:	ac39      	add	r4, sp, #228	; 0xe4
 80168cc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80168ce:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80168d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80168d6:	930c      	str	r3, [sp, #48]	; 0x30
 80168d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80168da:	6963      	ldr	r3, [r4, #20]
 80168dc:	440b      	add	r3, r1
 80168de:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80168e2:	4408      	add	r0, r1
 80168e4:	b200      	sxth	r0, r0
 80168e6:	4283      	cmp	r3, r0
 80168e8:	900d      	str	r0, [sp, #52]	; 0x34
 80168ea:	f280 80c1 	bge.w	8016a70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80168ee:	428b      	cmp	r3, r1
 80168f0:	da08      	bge.n	8016904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80168f2:	2a00      	cmp	r2, #0
 80168f4:	dd06      	ble.n	8016904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80168f6:	1acb      	subs	r3, r1, r3
 80168f8:	429a      	cmp	r2, r3
 80168fa:	f2c0 80bb 	blt.w	8016a74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80168fe:	2b00      	cmp	r3, #0
 8016900:	f300 80b9 	bgt.w	8016a76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8016904:	6967      	ldr	r7, [r4, #20]
 8016906:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801690a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801690c:	443b      	add	r3, r7
 801690e:	461f      	mov	r7, r3
 8016910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016912:	1bdf      	subs	r7, r3, r7
 8016914:	4297      	cmp	r7, r2
 8016916:	bfa8      	it	ge
 8016918:	4617      	movge	r7, r2
 801691a:	2f00      	cmp	r7, #0
 801691c:	f340 813c 	ble.w	8016b98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8016920:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8016922:	6829      	ldr	r1, [r5, #0]
 8016924:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016928:	f9bb 3000 	ldrsh.w	r3, [fp]
 801692c:	4411      	add	r1, r2
 801692e:	6820      	ldr	r0, [r4, #0]
 8016930:	4299      	cmp	r1, r3
 8016932:	dd1a      	ble.n	801696a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016934:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016938:	4402      	add	r2, r0
 801693a:	440b      	add	r3, r1
 801693c:	b21b      	sxth	r3, r3
 801693e:	429a      	cmp	r2, r3
 8016940:	dc13      	bgt.n	801696a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016942:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016944:	a912      	add	r1, sp, #72	; 0x48
 8016946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016948:	9809      	ldr	r0, [sp, #36]	; 0x24
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	9206      	str	r2, [sp, #24]
 801694e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016950:	9500      	str	r5, [sp, #0]
 8016952:	9205      	str	r2, [sp, #20]
 8016954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016956:	e9cd b203 	strd	fp, r2, [sp, #12]
 801695a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801695c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016960:	aa49      	add	r2, sp, #292	; 0x124
 8016962:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016966:	4623      	mov	r3, r4
 8016968:	47c8      	blx	r9
 801696a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801696e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8016972:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016976:	ee37 7a27 	vadd.f32	s14, s14, s15
 801697a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801697e:	68a1      	ldr	r1, [r4, #8]
 8016980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016984:	ed94 6a08 	vldr	s12, [r4, #32]
 8016988:	edd4 6a07 	vldr	s13, [r4, #28]
 801698c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8016990:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016994:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016998:	e9d4 2300 	ldrd	r2, r3, [r4]
 801699c:	edc4 6a07 	vstr	s13, [r4, #28]
 80169a0:	441a      	add	r2, r3
 80169a2:	6963      	ldr	r3, [r4, #20]
 80169a4:	3301      	adds	r3, #1
 80169a6:	6022      	str	r2, [r4, #0]
 80169a8:	6163      	str	r3, [r4, #20]
 80169aa:	69a3      	ldr	r3, [r4, #24]
 80169ac:	3b01      	subs	r3, #1
 80169ae:	61a3      	str	r3, [r4, #24]
 80169b0:	6923      	ldr	r3, [r4, #16]
 80169b2:	440b      	add	r3, r1
 80169b4:	68e1      	ldr	r1, [r4, #12]
 80169b6:	428b      	cmp	r3, r1
 80169b8:	6123      	str	r3, [r4, #16]
 80169ba:	db15      	blt.n	80169e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80169bc:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80169c0:	3201      	adds	r2, #1
 80169c2:	1a5b      	subs	r3, r3, r1
 80169c4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80169c8:	6022      	str	r2, [r4, #0]
 80169ca:	6123      	str	r3, [r4, #16]
 80169cc:	edc4 6a07 	vstr	s13, [r4, #28]
 80169d0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80169d4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80169d8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80169dc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80169e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80169e4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80169e8:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80169ec:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80169f0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80169f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80169f8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80169fc:	68a9      	ldr	r1, [r5, #8]
 80169fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a02:	ed95 6a08 	vldr	s12, [r5, #32]
 8016a06:	edd5 6a07 	vldr	s13, [r5, #28]
 8016a0a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016a0e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016a12:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016a16:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016a1a:	edc5 6a07 	vstr	s13, [r5, #28]
 8016a1e:	441a      	add	r2, r3
 8016a20:	696b      	ldr	r3, [r5, #20]
 8016a22:	3301      	adds	r3, #1
 8016a24:	602a      	str	r2, [r5, #0]
 8016a26:	616b      	str	r3, [r5, #20]
 8016a28:	69ab      	ldr	r3, [r5, #24]
 8016a2a:	3b01      	subs	r3, #1
 8016a2c:	61ab      	str	r3, [r5, #24]
 8016a2e:	692b      	ldr	r3, [r5, #16]
 8016a30:	440b      	add	r3, r1
 8016a32:	68e9      	ldr	r1, [r5, #12]
 8016a34:	428b      	cmp	r3, r1
 8016a36:	612b      	str	r3, [r5, #16]
 8016a38:	db15      	blt.n	8016a66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016a3a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8016a3e:	3201      	adds	r2, #1
 8016a40:	1a5b      	subs	r3, r3, r1
 8016a42:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016a46:	602a      	str	r2, [r5, #0]
 8016a48:	612b      	str	r3, [r5, #16]
 8016a4a:	edc5 6a07 	vstr	s13, [r5, #28]
 8016a4e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8016a52:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016a56:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016a5a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8016a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016a62:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016a66:	3f01      	subs	r7, #1
 8016a68:	e757      	b.n	801691a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016a6a:	ad39      	add	r5, sp, #228	; 0xe4
 8016a6c:	ac19      	add	r4, sp, #100	; 0x64
 8016a6e:	e72d      	b.n	80168cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8016a70:	4613      	mov	r3, r2
 8016a72:	e744      	b.n	80168fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016a74:	4613      	mov	r3, r2
 8016a76:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016a78:	469e      	mov	lr, r3
 8016a7a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8016a7e:	461f      	mov	r7, r3
 8016a80:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016a84:	f04f 0900 	mov.w	r9, #0
 8016a88:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8016a8c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8016a90:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016a94:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016a98:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8016a9c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8016a9e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8016aa2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016aa6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016aaa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8016aae:	960e      	str	r6, [sp, #56]	; 0x38
 8016ab0:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8016ab4:	2f00      	cmp	r7, #0
 8016ab6:	d146      	bne.n	8016b46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016ab8:	449c      	add	ip, r3
 8016aba:	1ad7      	subs	r7, r2, r3
 8016abc:	f1b9 0f00 	cmp.w	r9, #0
 8016ac0:	d009      	beq.n	8016ad6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8016ac2:	9039      	str	r0, [sp, #228]	; 0xe4
 8016ac4:	913d      	str	r1, [sp, #244]	; 0xf4
 8016ac6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8016aca:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8016ace:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8016ad2:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8016ad6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8016ad8:	f04f 0800 	mov.w	r8, #0
 8016adc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8016ae0:	910e      	str	r1, [sp, #56]	; 0x38
 8016ae2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8016ae6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8016aea:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8016aee:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8016af2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8016af6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8016afa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8016afe:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8016b02:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8016b06:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8016b0a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8016b0e:	f1be 0f00 	cmp.w	lr, #0
 8016b12:	d030      	beq.n	8016b76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8016b14:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016b16:	4450      	add	r0, sl
 8016b18:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8016b1c:	4431      	add	r1, r6
 8016b1e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8016b22:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016b26:	4549      	cmp	r1, r9
 8016b28:	db08      	blt.n	8016b3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016b2a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8016b2e:	3001      	adds	r0, #1
 8016b30:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016b34:	eba1 0109 	sub.w	r1, r1, r9
 8016b38:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016b3c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016b40:	f04f 0801 	mov.w	r8, #1
 8016b44:	e7e3      	b.n	8016b0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016b46:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016b48:	4450      	add	r0, sl
 8016b4a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8016b4e:	4431      	add	r1, r6
 8016b50:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016b54:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016b58:	4541      	cmp	r1, r8
 8016b5a:	db08      	blt.n	8016b6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016b5c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8016b60:	3001      	adds	r0, #1
 8016b62:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016b66:	eba1 0108 	sub.w	r1, r1, r8
 8016b6a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8016b6e:	3f01      	subs	r7, #1
 8016b70:	f04f 0901 	mov.w	r9, #1
 8016b74:	e79e      	b.n	8016ab4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016b76:	449c      	add	ip, r3
 8016b78:	1aff      	subs	r7, r7, r3
 8016b7a:	f1b8 0f00 	cmp.w	r8, #0
 8016b7e:	d009      	beq.n	8016b94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8016b80:	9019      	str	r0, [sp, #100]	; 0x64
 8016b82:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016b86:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016b8a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8016b8e:	911d      	str	r1, [sp, #116]	; 0x74
 8016b90:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016b94:	1ad2      	subs	r2, r2, r3
 8016b96:	e6b5      	b.n	8016904 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016b98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	b923      	cbnz	r3, 8016ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016b9e:	4b04      	ldr	r3, [pc, #16]	; (8016bb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8016ba0:	6818      	ldr	r0, [r3, #0]
 8016ba2:	6803      	ldr	r3, [r0, #0]
 8016ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ba6:	4798      	blx	r3
 8016ba8:	b05b      	add	sp, #364	; 0x16c
 8016baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bae:	bf00      	nop
 8016bb0:	2400f440 	.word	0x2400f440

08016bb4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8016bb4:	b570      	push	{r4, r5, r6, lr}
 8016bb6:	4604      	mov	r4, r0
 8016bb8:	2500      	movs	r5, #0
 8016bba:	9804      	ldr	r0, [sp, #16]
 8016bbc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8016bc0:	8025      	strh	r5, [r4, #0]
 8016bc2:	6061      	str	r1, [r4, #4]
 8016bc4:	7223      	strb	r3, [r4, #8]
 8016bc6:	7266      	strb	r6, [r4, #9]
 8016bc8:	60e0      	str	r0, [r4, #12]
 8016bca:	8222      	strh	r2, [r4, #16]
 8016bcc:	8265      	strh	r5, [r4, #18]
 8016bce:	82a5      	strh	r5, [r4, #20]
 8016bd0:	82e5      	strh	r5, [r4, #22]
 8016bd2:	8325      	strh	r5, [r4, #24]
 8016bd4:	8365      	strh	r5, [r4, #26]
 8016bd6:	83a5      	strh	r5, [r4, #28]
 8016bd8:	77a5      	strb	r5, [r4, #30]
 8016bda:	b32e      	cbz	r6, 8016c28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8016bdc:	6803      	ldr	r3, [r0, #0]
 8016bde:	695b      	ldr	r3, [r3, #20]
 8016be0:	4798      	blx	r3
 8016be2:	4606      	mov	r6, r0
 8016be4:	b300      	cbz	r0, 8016c28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8016be6:	68e0      	ldr	r0, [r4, #12]
 8016be8:	4631      	mov	r1, r6
 8016bea:	6803      	ldr	r3, [r0, #0]
 8016bec:	68db      	ldr	r3, [r3, #12]
 8016bee:	4798      	blx	r3
 8016bf0:	4605      	mov	r5, r0
 8016bf2:	b1c8      	cbz	r0, 8016c28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8016bf4:	7b43      	ldrb	r3, [r0, #13]
 8016bf6:	7a82      	ldrb	r2, [r0, #10]
 8016bf8:	005b      	lsls	r3, r3, #1
 8016bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016bfe:	4313      	orrs	r3, r2
 8016c00:	83a3      	strh	r3, [r4, #28]
 8016c02:	7a63      	ldrb	r3, [r4, #9]
 8016c04:	2b04      	cmp	r3, #4
 8016c06:	d10f      	bne.n	8016c28 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8016c08:	68e0      	ldr	r0, [r4, #12]
 8016c0a:	462a      	mov	r2, r5
 8016c0c:	4631      	mov	r1, r6
 8016c0e:	6803      	ldr	r3, [r0, #0]
 8016c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c12:	4798      	blx	r3
 8016c14:	7b6b      	ldrb	r3, [r5, #13]
 8016c16:	005b      	lsls	r3, r3, #1
 8016c18:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016c1c:	7aab      	ldrb	r3, [r5, #10]
 8016c1e:	4313      	orrs	r3, r2
 8016c20:	4418      	add	r0, r3
 8016c22:	8ba3      	ldrh	r3, [r4, #28]
 8016c24:	4418      	add	r0, r3
 8016c26:	83a0      	strh	r0, [r4, #28]
 8016c28:	4620      	mov	r0, r4
 8016c2a:	bd70      	pop	{r4, r5, r6, pc}

08016c2c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c30:	2400      	movs	r4, #0
 8016c32:	b085      	sub	sp, #20
 8016c34:	4681      	mov	r9, r0
 8016c36:	4688      	mov	r8, r1
 8016c38:	4692      	mov	sl, r2
 8016c3a:	469b      	mov	fp, r3
 8016c3c:	4627      	mov	r7, r4
 8016c3e:	4625      	mov	r5, r4
 8016c40:	4626      	mov	r6, r4
 8016c42:	4554      	cmp	r4, sl
 8016c44:	da2a      	bge.n	8016c9c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016c46:	2300      	movs	r3, #0
 8016c48:	9303      	str	r3, [sp, #12]
 8016c4a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016c4e:	429d      	cmp	r5, r3
 8016c50:	d004      	beq.n	8016c5c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8016c52:	f242 030b 	movw	r3, #8203	; 0x200b
 8016c56:	429d      	cmp	r5, r3
 8016c58:	bf18      	it	ne
 8016c5a:	462f      	movne	r7, r5
 8016c5c:	ab03      	add	r3, sp, #12
 8016c5e:	4642      	mov	r2, r8
 8016c60:	4659      	mov	r1, fp
 8016c62:	4648      	mov	r0, r9
 8016c64:	f002 fec0 	bl	80199e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016c68:	4605      	mov	r5, r0
 8016c6a:	b1b8      	cbz	r0, 8016c9c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016c6c:	280a      	cmp	r0, #10
 8016c6e:	d015      	beq.n	8016c9c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016c70:	9a03      	ldr	r2, [sp, #12]
 8016c72:	b18a      	cbz	r2, 8016c98 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8016c74:	7b50      	ldrb	r0, [r2, #13]
 8016c76:	4639      	mov	r1, r7
 8016c78:	7a93      	ldrb	r3, [r2, #10]
 8016c7a:	0040      	lsls	r0, r0, #1
 8016c7c:	8895      	ldrh	r5, [r2, #4]
 8016c7e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8016c82:	4303      	orrs	r3, r0
 8016c84:	4640      	mov	r0, r8
 8016c86:	9301      	str	r3, [sp, #4]
 8016c88:	f8d8 3000 	ldr.w	r3, [r8]
 8016c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c8e:	4798      	blx	r3
 8016c90:	9b01      	ldr	r3, [sp, #4]
 8016c92:	4418      	add	r0, r3
 8016c94:	4406      	add	r6, r0
 8016c96:	b2b6      	uxth	r6, r6
 8016c98:	3401      	adds	r4, #1
 8016c9a:	e7d2      	b.n	8016c42 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8016c9c:	4630      	mov	r0, r6
 8016c9e:	b005      	add	sp, #20
 8016ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ca4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8016ca4:	2a02      	cmp	r2, #2
 8016ca6:	b530      	push	{r4, r5, lr}
 8016ca8:	d011      	beq.n	8016cce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8016caa:	2a03      	cmp	r2, #3
 8016cac:	d01c      	beq.n	8016ce8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8016cae:	2a01      	cmp	r2, #1
 8016cb0:	d10c      	bne.n	8016ccc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016cb2:	888b      	ldrh	r3, [r1, #4]
 8016cb4:	8801      	ldrh	r1, [r0, #0]
 8016cb6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016cba:	1a5b      	subs	r3, r3, r1
 8016cbc:	8844      	ldrh	r4, [r0, #2]
 8016cbe:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016cc2:	1a9b      	subs	r3, r3, r2
 8016cc4:	8004      	strh	r4, [r0, #0]
 8016cc6:	8081      	strh	r1, [r0, #4]
 8016cc8:	8043      	strh	r3, [r0, #2]
 8016cca:	80c2      	strh	r2, [r0, #6]
 8016ccc:	bd30      	pop	{r4, r5, pc}
 8016cce:	88cb      	ldrh	r3, [r1, #6]
 8016cd0:	8842      	ldrh	r2, [r0, #2]
 8016cd2:	1a9b      	subs	r3, r3, r2
 8016cd4:	88c2      	ldrh	r2, [r0, #6]
 8016cd6:	1a9b      	subs	r3, r3, r2
 8016cd8:	888a      	ldrh	r2, [r1, #4]
 8016cda:	8801      	ldrh	r1, [r0, #0]
 8016cdc:	8043      	strh	r3, [r0, #2]
 8016cde:	1a52      	subs	r2, r2, r1
 8016ce0:	8881      	ldrh	r1, [r0, #4]
 8016ce2:	1a52      	subs	r2, r2, r1
 8016ce4:	8002      	strh	r2, [r0, #0]
 8016ce6:	e7f1      	b.n	8016ccc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016ce8:	88cb      	ldrh	r3, [r1, #6]
 8016cea:	8841      	ldrh	r1, [r0, #2]
 8016cec:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016cf0:	1a5b      	subs	r3, r3, r1
 8016cf2:	f9b0 5000 	ldrsh.w	r5, [r0]
 8016cf6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016cfa:	1a9b      	subs	r3, r3, r2
 8016cfc:	8045      	strh	r5, [r0, #2]
 8016cfe:	8082      	strh	r2, [r0, #4]
 8016d00:	8003      	strh	r3, [r0, #0]
 8016d02:	80c4      	strh	r4, [r0, #6]
 8016d04:	e7e2      	b.n	8016ccc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08016d06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8016d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d0a:	b09f      	sub	sp, #124	; 0x7c
 8016d0c:	9116      	str	r1, [sp, #88]	; 0x58
 8016d0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016d10:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8016d12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016d14:	8809      	ldrh	r1, [r1, #0]
 8016d16:	889b      	ldrh	r3, [r3, #4]
 8016d18:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8016d1c:	440b      	add	r3, r1
 8016d1e:	9212      	str	r2, [sp, #72]	; 0x48
 8016d20:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8016d24:	b21b      	sxth	r3, r3
 8016d26:	9011      	str	r0, [sp, #68]	; 0x44
 8016d28:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8016d2c:	9310      	str	r3, [sp, #64]	; 0x40
 8016d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8016d32:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8016d36:	7a59      	ldrb	r1, [r3, #9]
 8016d38:	7a1b      	ldrb	r3, [r3, #8]
 8016d3a:	9114      	str	r1, [sp, #80]	; 0x50
 8016d3c:	9315      	str	r3, [sp, #84]	; 0x54
 8016d3e:	2a00      	cmp	r2, #0
 8016d40:	d06a      	beq.n	8016e18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8016d42:	f898 3010 	ldrb.w	r3, [r8, #16]
 8016d46:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8016d48:	2b04      	cmp	r3, #4
 8016d4a:	bf14      	ite	ne
 8016d4c:	2301      	movne	r3, #1
 8016d4e:	2302      	moveq	r3, #2
 8016d50:	4413      	add	r3, r2
 8016d52:	f04f 0900 	mov.w	r9, #0
 8016d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d58:	464c      	mov	r4, r9
 8016d5a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016d5e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8016d62:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8016d66:	4293      	cmp	r3, r2
 8016d68:	f280 808f 	bge.w	8016e8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8016d72:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8016d76:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016d7a:	429c      	cmp	r4, r3
 8016d7c:	d006      	beq.n	8016d8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8016d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d80:	f242 020b 	movw	r2, #8203	; 0x200b
 8016d84:	4294      	cmp	r4, r2
 8016d86:	bf18      	it	ne
 8016d88:	4623      	movne	r3, r4
 8016d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8016d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d8e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8016d90:	f8d8 2000 	ldr.w	r2, [r8]
 8016d94:	428b      	cmp	r3, r1
 8016d96:	db41      	blt.n	8016e1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8016d98:	6813      	ldr	r3, [r2, #0]
 8016d9a:	4610      	mov	r0, r2
 8016d9c:	695b      	ldr	r3, [r3, #20]
 8016d9e:	4798      	blx	r3
 8016da0:	4604      	mov	r4, r0
 8016da2:	f8d8 0000 	ldr.w	r0, [r8]
 8016da6:	aa1d      	add	r2, sp, #116	; 0x74
 8016da8:	4621      	mov	r1, r4
 8016daa:	6803      	ldr	r3, [r0, #0]
 8016dac:	689e      	ldr	r6, [r3, #8]
 8016dae:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8016db2:	47b0      	blx	r6
 8016db4:	901c      	str	r0, [sp, #112]	; 0x70
 8016db6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016dba:	429c      	cmp	r4, r3
 8016dbc:	f000 80ea 	beq.w	8016f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8016dc0:	f242 030b 	movw	r3, #8203	; 0x200b
 8016dc4:	429c      	cmp	r4, r3
 8016dc6:	f000 80e5 	beq.w	8016f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8016dca:	2c00      	cmp	r4, #0
 8016dcc:	f000 80f7 	beq.w	8016fbe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8016dd0:	2c0a      	cmp	r4, #10
 8016dd2:	d060      	beq.n	8016e96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8016dd4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016dd6:	b36a      	cbz	r2, 8016e34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8016dd8:	8894      	ldrh	r4, [r2, #4]
 8016dda:	f1bb 0f00 	cmp.w	fp, #0
 8016dde:	d03b      	beq.n	8016e58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8016de0:	f892 900d 	ldrb.w	r9, [r2, #13]
 8016de4:	f1bb 0f01 	cmp.w	fp, #1
 8016de8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8016dec:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8016df0:	f892 900a 	ldrb.w	r9, [r2, #10]
 8016df4:	ea49 0903 	orr.w	r9, r9, r3
 8016df8:	d134      	bne.n	8016e64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8016dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016dfc:	eba5 0509 	sub.w	r5, r5, r9
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d14f      	bne.n	8016ea4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8016e04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e06:	eb09 0305 	add.w	r3, r9, r5
 8016e0a:	4413      	add	r3, r2
 8016e0c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8016e0e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016e12:	4293      	cmp	r3, r2
 8016e14:	da51      	bge.n	8016eba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8016e16:	e038      	b.n	8016e8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8016e18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e1a:	e79a      	b.n	8016d52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8016e1c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8016e20:	4659      	mov	r1, fp
 8016e22:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016e24:	9301      	str	r3, [sp, #4]
 8016e26:	ab1d      	add	r3, sp, #116	; 0x74
 8016e28:	9300      	str	r3, [sp, #0]
 8016e2a:	ab1c      	add	r3, sp, #112	; 0x70
 8016e2c:	f002 fe25 	bl	8019a7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8016e30:	4604      	mov	r4, r0
 8016e32:	e7c0      	b.n	8016db6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8016e34:	f8d8 0000 	ldr.w	r0, [r8]
 8016e38:	6803      	ldr	r3, [r0, #0]
 8016e3a:	691b      	ldr	r3, [r3, #16]
 8016e3c:	4798      	blx	r3
 8016e3e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016e42:	4298      	cmp	r0, r3
 8016e44:	f000 80a6 	beq.w	8016f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8016e48:	f242 030b 	movw	r3, #8203	; 0x200b
 8016e4c:	4298      	cmp	r0, r3
 8016e4e:	f000 80a1 	beq.w	8016f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8016e52:	f1bb 0f00 	cmp.w	fp, #0
 8016e56:	d100      	bne.n	8016e5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8016e58:	444d      	add	r5, r9
 8016e5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016e5c:	2a00      	cmp	r2, #0
 8016e5e:	d1bf      	bne.n	8016de0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8016e60:	4691      	mov	r9, r2
 8016e62:	e097      	b.n	8016f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8016e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	f000 80ab 	beq.w	8016fc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8016e6c:	f1bb 0f00 	cmp.w	fp, #0
 8016e70:	d118      	bne.n	8016ea4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8016e72:	f8d8 0000 	ldr.w	r0, [r8]
 8016e76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016e78:	6803      	ldr	r3, [r0, #0]
 8016e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e7c:	4798      	blx	r3
 8016e7e:	4405      	add	r5, r0
 8016e80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e84:	1aeb      	subs	r3, r5, r3
 8016e86:	4293      	cmp	r3, r2
 8016e88:	dd17      	ble.n	8016eba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8016e8a:	2c00      	cmp	r4, #0
 8016e8c:	f000 8097 	beq.w	8016fbe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8016e90:	2c0a      	cmp	r4, #10
 8016e92:	f040 8085 	bne.w	8016fa0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8016e96:	240a      	movs	r4, #10
 8016e98:	fab4 f084 	clz	r0, r4
 8016e9c:	0940      	lsrs	r0, r0, #5
 8016e9e:	b01f      	add	sp, #124	; 0x7c
 8016ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ea4:	f8d8 0000 	ldr.w	r0, [r8]
 8016ea8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016eaa:	6803      	ldr	r3, [r0, #0]
 8016eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016eae:	4798      	blx	r3
 8016eb0:	f1bb 0f01 	cmp.w	fp, #1
 8016eb4:	eba5 0500 	sub.w	r5, r5, r0
 8016eb8:	d0a4      	beq.n	8016e04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8016eba:	981c      	ldr	r0, [sp, #112]	; 0x70
 8016ebc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016ebe:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8016ec2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016ec6:	7b43      	ldrb	r3, [r0, #13]
 8016ec8:	4429      	add	r1, r5
 8016eca:	015b      	lsls	r3, r3, #5
 8016ecc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016ed0:	7983      	ldrb	r3, [r0, #6]
 8016ed2:	4313      	orrs	r3, r2
 8016ed4:	440b      	add	r3, r1
 8016ed6:	42b3      	cmp	r3, r6
 8016ed8:	db5c      	blt.n	8016f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8016eda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016edc:	4299      	cmp	r1, r3
 8016ede:	da59      	bge.n	8016f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8016ee0:	f8d8 0000 	ldr.w	r0, [r8]
 8016ee4:	42ae      	cmp	r6, r5
 8016ee6:	6803      	ldr	r3, [r0, #0]
 8016ee8:	bfcc      	ite	gt
 8016eea:	1b76      	subgt	r6, r6, r5
 8016eec:	2600      	movle	r6, #0
 8016eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ef0:	bfc8      	it	gt
 8016ef2:	b2b6      	uxthgt	r6, r6
 8016ef4:	4798      	blx	r3
 8016ef6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016ef8:	7b5a      	ldrb	r2, [r3, #13]
 8016efa:	00d1      	lsls	r1, r2, #3
 8016efc:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8016f00:	7a19      	ldrb	r1, [r3, #8]
 8016f02:	4339      	orrs	r1, r7
 8016f04:	0657      	lsls	r7, r2, #25
 8016f06:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8016f08:	bf48      	it	mi
 8016f0a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8016f0e:	4407      	add	r7, r0
 8016f10:	bf48      	it	mi
 8016f12:	b209      	sxthmi	r1, r1
 8016f14:	1a7f      	subs	r7, r7, r1
 8016f16:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8016f18:	b2bf      	uxth	r7, r7
 8016f1a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016f1e:	fa0f fa87 	sxth.w	sl, r7
 8016f22:	4551      	cmp	r1, sl
 8016f24:	dd3a      	ble.n	8016f9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8016f26:	0112      	lsls	r2, r2, #4
 8016f28:	79d8      	ldrb	r0, [r3, #7]
 8016f2a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016f2e:	4302      	orrs	r2, r0
 8016f30:	4492      	add	sl, r2
 8016f32:	4551      	cmp	r1, sl
 8016f34:	dc2e      	bgt.n	8016f94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8016f36:	1bcf      	subs	r7, r1, r7
 8016f38:	468a      	mov	sl, r1
 8016f3a:	b2bf      	uxth	r7, r7
 8016f3c:	9319      	str	r3, [sp, #100]	; 0x64
 8016f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f40:	f8d8 0000 	ldr.w	r0, [r8]
 8016f44:	681a      	ldr	r2, [r3, #0]
 8016f46:	6801      	ldr	r1, [r0, #0]
 8016f48:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8016f4a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016f4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8016f4e:	9218      	str	r2, [sp, #96]	; 0x60
 8016f50:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8016f52:	4788      	blx	r1
 8016f54:	f898 1006 	ldrb.w	r1, [r8, #6]
 8016f58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016f5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8016f5c:	f898 100e 	ldrb.w	r1, [r8, #14]
 8016f60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016f62:	910a      	str	r1, [sp, #40]	; 0x28
 8016f64:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8016f68:	9109      	str	r1, [sp, #36]	; 0x24
 8016f6a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8016f6e:	9305      	str	r3, [sp, #20]
 8016f70:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8016f72:	9206      	str	r2, [sp, #24]
 8016f74:	e9cd a601 	strd	sl, r6, [sp, #4]
 8016f78:	442e      	add	r6, r5
 8016f7a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8016f7e:	b236      	sxth	r6, r6
 8016f80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016f82:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8016f86:	9600      	str	r6, [sp, #0]
 8016f88:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016f8a:	681a      	ldr	r2, [r3, #0]
 8016f8c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016f8e:	685b      	ldr	r3, [r3, #4]
 8016f90:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016f92:	47b0      	blx	r6
 8016f94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f96:	3301      	adds	r3, #1
 8016f98:	930e      	str	r3, [sp, #56]	; 0x38
 8016f9a:	e6e2      	b.n	8016d62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8016f9c:	2700      	movs	r7, #0
 8016f9e:	e7cd      	b.n	8016f3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8016fa0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016fa2:	3501      	adds	r5, #1
 8016fa4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016fa6:	429d      	cmp	r5, r3
 8016fa8:	f6bf af76 	bge.w	8016e98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8016fac:	4659      	mov	r1, fp
 8016fae:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016fb0:	f7ed f9c6 	bl	8004340 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016fb4:	4604      	mov	r4, r0
 8016fb6:	b110      	cbz	r0, 8016fbe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8016fb8:	280a      	cmp	r0, #10
 8016fba:	d1f2      	bne.n	8016fa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8016fbc:	e76b      	b.n	8016e96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8016fbe:	2400      	movs	r4, #0
 8016fc0:	e76a      	b.n	8016e98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8016fc2:	f1bb 0f00 	cmp.w	fp, #0
 8016fc6:	f43f af5b 	beq.w	8016e80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8016fca:	e776      	b.n	8016eba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08016fcc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8016fcc:	b530      	push	{r4, r5, lr}
 8016fce:	8a44      	ldrh	r4, [r0, #18]
 8016fd0:	8ac5      	ldrh	r5, [r0, #22]
 8016fd2:	82c3      	strh	r3, [r0, #22]
 8016fd4:	442c      	add	r4, r5
 8016fd6:	1ae4      	subs	r4, r4, r3
 8016fd8:	8b03      	ldrh	r3, [r0, #24]
 8016fda:	8244      	strh	r4, [r0, #18]
 8016fdc:	8a84      	ldrh	r4, [r0, #20]
 8016fde:	4422      	add	r2, r4
 8016fe0:	440c      	add	r4, r1
 8016fe2:	1a59      	subs	r1, r3, r1
 8016fe4:	8342      	strh	r2, [r0, #26]
 8016fe6:	8284      	strh	r4, [r0, #20]
 8016fe8:	8301      	strh	r1, [r0, #24]
 8016fea:	bd30      	pop	{r4, r5, pc}

08016fec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8016fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ff0:	7a43      	ldrb	r3, [r0, #9]
 8016ff2:	b087      	sub	sp, #28
 8016ff4:	4604      	mov	r4, r0
 8016ff6:	460f      	mov	r7, r1
 8016ff8:	1eda      	subs	r2, r3, #3
 8016ffa:	b2d2      	uxtb	r2, r2
 8016ffc:	2900      	cmp	r1, #0
 8016ffe:	d036      	beq.n	801706e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8017000:	2a01      	cmp	r2, #1
 8017002:	d932      	bls.n	801706a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8017004:	1e58      	subs	r0, r3, #1
 8017006:	f1d0 0b00 	rsbs	fp, r0, #0
 801700a:	eb4b 0b00 	adc.w	fp, fp, r0
 801700e:	1e99      	subs	r1, r3, #2
 8017010:	424b      	negs	r3, r1
 8017012:	414b      	adcs	r3, r1
 8017014:	9303      	str	r3, [sp, #12]
 8017016:	2300      	movs	r3, #0
 8017018:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801701c:	2500      	movs	r5, #0
 801701e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8017022:	46a9      	mov	r9, r5
 8017024:	8265      	strh	r5, [r4, #18]
 8017026:	82a5      	strh	r5, [r4, #20]
 8017028:	2300      	movs	r3, #0
 801702a:	9305      	str	r3, [sp, #20]
 801702c:	8823      	ldrh	r3, [r4, #0]
 801702e:	2b20      	cmp	r3, #32
 8017030:	d02b      	beq.n	801708a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8017032:	eba3 020a 	sub.w	r2, r3, sl
 8017036:	4256      	negs	r6, r2
 8017038:	4156      	adcs	r6, r2
 801703a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801703e:	4293      	cmp	r3, r2
 8017040:	d004      	beq.n	801704c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8017042:	4553      	cmp	r3, sl
 8017044:	bf16      	itet	ne
 8017046:	4699      	movne	r9, r3
 8017048:	2601      	moveq	r6, #1
 801704a:	2600      	movne	r6, #0
 801704c:	ab05      	add	r3, sp, #20
 801704e:	68e2      	ldr	r2, [r4, #12]
 8017050:	7a21      	ldrb	r1, [r4, #8]
 8017052:	6860      	ldr	r0, [r4, #4]
 8017054:	f002 fcc8 	bl	80199e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017058:	8020      	strh	r0, [r4, #0]
 801705a:	b9c8      	cbnz	r0, 8017090 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801705c:	8b22      	ldrh	r2, [r4, #24]
 801705e:	2300      	movs	r3, #0
 8017060:	4611      	mov	r1, r2
 8017062:	4620      	mov	r0, r4
 8017064:	f7ff ffb2 	bl	8016fcc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017068:	e066      	b.n	8017138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801706a:	468b      	mov	fp, r1
 801706c:	e7cf      	b.n	801700e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801706e:	3b01      	subs	r3, #1
 8017070:	2a01      	cmp	r2, #1
 8017072:	9103      	str	r1, [sp, #12]
 8017074:	468b      	mov	fp, r1
 8017076:	bf8c      	ite	hi
 8017078:	2200      	movhi	r2, #0
 801707a:	2201      	movls	r2, #1
 801707c:	2b01      	cmp	r3, #1
 801707e:	9202      	str	r2, [sp, #8]
 8017080:	bf8c      	ite	hi
 8017082:	2300      	movhi	r3, #0
 8017084:	2301      	movls	r3, #1
 8017086:	9301      	str	r3, [sp, #4]
 8017088:	e7c8      	b.n	801701c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801708a:	4699      	mov	r9, r3
 801708c:	2601      	movs	r6, #1
 801708e:	e7dd      	b.n	801704c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8017090:	8ae3      	ldrh	r3, [r4, #22]
 8017092:	280a      	cmp	r0, #10
 8017094:	f103 0301 	add.w	r3, r3, #1
 8017098:	82e3      	strh	r3, [r4, #22]
 801709a:	d0df      	beq.n	801705c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801709c:	9a05      	ldr	r2, [sp, #20]
 801709e:	bb42      	cbnz	r2, 80170f2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80170a0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80170a4:	4298      	cmp	r0, r3
 80170a6:	d001      	beq.n	80170ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80170a8:	4550      	cmp	r0, sl
 80170aa:	d1bd      	bne.n	8017028 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80170ac:	8823      	ldrh	r3, [r4, #0]
 80170ae:	8b21      	ldrh	r1, [r4, #24]
 80170b0:	2b20      	cmp	r3, #32
 80170b2:	d001      	beq.n	80170b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80170b4:	4553      	cmp	r3, sl
 80170b6:	d131      	bne.n	801711c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80170b8:	2e00      	cmp	r6, #0
 80170ba:	bf0a      	itet	eq
 80170bc:	460d      	moveq	r5, r1
 80170be:	4630      	movne	r0, r6
 80170c0:	2001      	moveq	r0, #1
 80170c2:	440a      	add	r2, r1
 80170c4:	8aa3      	ldrh	r3, [r4, #20]
 80170c6:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80170ca:	b292      	uxth	r2, r2
 80170cc:	8322      	strh	r2, [r4, #24]
 80170ce:	4413      	add	r3, r2
 80170d0:	2f00      	cmp	r7, #0
 80170d2:	d03a      	beq.n	801714a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80170d4:	f1bb 0f00 	cmp.w	fp, #0
 80170d8:	d102      	bne.n	80170e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80170da:	9903      	ldr	r1, [sp, #12]
 80170dc:	b301      	cbz	r1, 8017120 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80170de:	b1f8      	cbz	r0, 8017120 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80170e0:	8ba1      	ldrh	r1, [r4, #28]
 80170e2:	4419      	add	r1, r3
 80170e4:	458c      	cmp	ip, r1
 80170e6:	da2a      	bge.n	801713e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80170e8:	8a61      	ldrh	r1, [r4, #18]
 80170ea:	b341      	cbz	r1, 801713e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80170ec:	4563      	cmp	r3, ip
 80170ee:	dd9b      	ble.n	8017028 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80170f0:	e01c      	b.n	801712c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80170f2:	8893      	ldrh	r3, [r2, #4]
 80170f4:	4649      	mov	r1, r9
 80170f6:	8023      	strh	r3, [r4, #0]
 80170f8:	f892 800d 	ldrb.w	r8, [r2, #13]
 80170fc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8017100:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8017104:	f892 800a 	ldrb.w	r8, [r2, #10]
 8017108:	ea48 0800 	orr.w	r8, r8, r0
 801710c:	68e0      	ldr	r0, [r4, #12]
 801710e:	6803      	ldr	r3, [r0, #0]
 8017110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017112:	4798      	blx	r3
 8017114:	eb08 0200 	add.w	r2, r8, r0
 8017118:	b292      	uxth	r2, r2
 801711a:	e7c7      	b.n	80170ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801711c:	2000      	movs	r0, #0
 801711e:	e7d0      	b.n	80170c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8017120:	4563      	cmp	r3, ip
 8017122:	dd81      	ble.n	8017028 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017124:	8a63      	ldrh	r3, [r4, #18]
 8017126:	2b00      	cmp	r3, #0
 8017128:	f43f af7e 	beq.w	8017028 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801712c:	2301      	movs	r3, #1
 801712e:	8ba2      	ldrh	r2, [r4, #28]
 8017130:	77a3      	strb	r3, [r4, #30]
 8017132:	8b63      	ldrh	r3, [r4, #26]
 8017134:	4413      	add	r3, r2
 8017136:	8363      	strh	r3, [r4, #26]
 8017138:	b007      	add	sp, #28
 801713a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801713e:	2300      	movs	r3, #0
 8017140:	4611      	mov	r1, r2
 8017142:	4620      	mov	r0, r4
 8017144:	f7ff ff42 	bl	8016fcc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017148:	e76e      	b.n	8017028 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801714a:	4563      	cmp	r3, ip
 801714c:	dd14      	ble.n	8017178 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801714e:	9b02      	ldr	r3, [sp, #8]
 8017150:	b113      	cbz	r3, 8017158 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 8017152:	2301      	movs	r3, #1
 8017154:	460a      	mov	r2, r1
 8017156:	e783      	b.n	8017060 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8017158:	9b01      	ldr	r3, [sp, #4]
 801715a:	2b00      	cmp	r3, #0
 801715c:	f43f af64 	beq.w	8017028 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017160:	2800      	cmp	r0, #0
 8017162:	f47f af61 	bne.w	8017028 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017166:	b116      	cbz	r6, 801716e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8017168:	2301      	movs	r3, #1
 801716a:	462a      	mov	r2, r5
 801716c:	e779      	b.n	8017062 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801716e:	8a63      	ldrh	r3, [r4, #18]
 8017170:	2b00      	cmp	r3, #0
 8017172:	f43f af59 	beq.w	8017028 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017176:	e7df      	b.n	8017138 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8017178:	2800      	cmp	r0, #0
 801717a:	f47f af55 	bne.w	8017028 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801717e:	2e00      	cmp	r6, #0
 8017180:	f43f af52 	beq.w	8017028 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8017184:	2301      	movs	r3, #1
 8017186:	462a      	mov	r2, r5
 8017188:	e7db      	b.n	8017142 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801718a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801718a:	b530      	push	{r4, r5, lr}
 801718c:	4605      	mov	r5, r0
 801718e:	b08b      	sub	sp, #44	; 0x2c
 8017190:	b191      	cbz	r1, 80171b8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8017192:	2401      	movs	r4, #1
 8017194:	e9cd 3100 	strd	r3, r1, [sp]
 8017198:	4613      	mov	r3, r2
 801719a:	4601      	mov	r1, r0
 801719c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80171a0:	a802      	add	r0, sp, #8
 80171a2:	f7ff fd07 	bl	8016bb4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80171a6:	2100      	movs	r1, #0
 80171a8:	a802      	add	r0, sp, #8
 80171aa:	f7ff ff1f 	bl	8016fec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80171ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80171b2:	b163      	cbz	r3, 80171ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80171b4:	3401      	adds	r4, #1
 80171b6:	e7f6      	b.n	80171a6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80171b8:	2401      	movs	r4, #1
 80171ba:	f002 fce1 	bl	8019b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80171be:	280a      	cmp	r0, #10
 80171c0:	4628      	mov	r0, r5
 80171c2:	bf08      	it	eq
 80171c4:	3401      	addeq	r4, #1
 80171c6:	f002 fcdb 	bl	8019b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80171ca:	2800      	cmp	r0, #0
 80171cc:	d1f7      	bne.n	80171be <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80171ce:	b2a0      	uxth	r0, r4
 80171d0:	b00b      	add	sp, #44	; 0x2c
 80171d2:	bd30      	pop	{r4, r5, pc}

080171d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80171d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d8:	b0e5      	sub	sp, #404	; 0x194
 80171da:	4689      	mov	r9, r1
 80171dc:	461c      	mov	r4, r3
 80171de:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 80171e2:	900a      	str	r0, [sp, #40]	; 0x28
 80171e4:	f1ba 0f00 	cmp.w	sl, #0
 80171e8:	f000 80b4 	beq.w	8017354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	f000 80b0 	beq.w	8017354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80171f4:	7ba3      	ldrb	r3, [r4, #14]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	f000 80ac 	beq.w	8017354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80171fc:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8017200:	6810      	ldr	r0, [r2, #0]
 8017202:	6851      	ldr	r1, [r2, #4]
 8017204:	2500      	movs	r5, #0
 8017206:	4643      	mov	r3, r8
 8017208:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801720c:	950f      	str	r5, [sp, #60]	; 0x3c
 801720e:	af19      	add	r7, sp, #100	; 0x64
 8017210:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017214:	79a2      	ldrb	r2, [r4, #6]
 8017216:	c303      	stmia	r3!, {r0, r1}
 8017218:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801721c:	a90f      	add	r1, sp, #60	; 0x3c
 801721e:	4640      	mov	r0, r8
 8017220:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017224:	f7ff fd3e 	bl	8016ca4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017228:	a90f      	add	r1, sp, #60	; 0x3c
 801722a:	79a2      	ldrb	r2, [r4, #6]
 801722c:	4608      	mov	r0, r1
 801722e:	f7ff fd39 	bl	8016ca4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017232:	4638      	mov	r0, r7
 8017234:	f002 f877 	bl	8019326 <_ZN8touchgfx12TextProviderC1Ev>
 8017238:	6820      	ldr	r0, [r4, #0]
 801723a:	6803      	ldr	r3, [r0, #0]
 801723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801723e:	4798      	blx	r3
 8017240:	4606      	mov	r6, r0
 8017242:	6820      	ldr	r0, [r4, #0]
 8017244:	6803      	ldr	r3, [r0, #0]
 8017246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017248:	4798      	blx	r3
 801724a:	4633      	mov	r3, r6
 801724c:	9000      	str	r0, [sp, #0]
 801724e:	4651      	mov	r1, sl
 8017250:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8017252:	4638      	mov	r0, r7
 8017254:	f002 f8c2 	bl	80193dc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017258:	7923      	ldrb	r3, [r4, #4]
 801725a:	6820      	ldr	r0, [r4, #0]
 801725c:	9308      	str	r3, [sp, #32]
 801725e:	6803      	ldr	r3, [r0, #0]
 8017260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017262:	4798      	blx	r3
 8017264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017268:	181e      	adds	r6, r3, r0
 801726a:	42ae      	cmp	r6, r5
 801726c:	dd06      	ble.n	801727c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801726e:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8017272:	4282      	cmp	r2, r0
 8017274:	bfa4      	itt	ge
 8017276:	189d      	addge	r5, r3, r2
 8017278:	fb95 f5f6 	sdivge	r5, r5, r6
 801727c:	a832      	add	r0, sp, #200	; 0xc8
 801727e:	f002 f852 	bl	8019326 <_ZN8touchgfx12TextProviderC1Ev>
 8017282:	7c23      	ldrb	r3, [r4, #16]
 8017284:	b17b      	cbz	r3, 80172a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8017286:	6820      	ldr	r0, [r4, #0]
 8017288:	6803      	ldr	r3, [r0, #0]
 801728a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801728c:	4798      	blx	r3
 801728e:	4683      	mov	fp, r0
 8017290:	6820      	ldr	r0, [r4, #0]
 8017292:	6803      	ldr	r3, [r0, #0]
 8017294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017296:	4798      	blx	r3
 8017298:	465b      	mov	r3, fp
 801729a:	9000      	str	r0, [sp, #0]
 801729c:	4651      	mov	r1, sl
 801729e:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80172a0:	a832      	add	r0, sp, #200	; 0xc8
 80172a2:	f002 f89b 	bl	80193dc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80172a6:	7be1      	ldrb	r1, [r4, #15]
 80172a8:	a811      	add	r0, sp, #68	; 0x44
 80172aa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80172ae:	7963      	ldrb	r3, [r4, #5]
 80172b0:	1a52      	subs	r2, r2, r1
 80172b2:	7c21      	ldrb	r1, [r4, #16]
 80172b4:	9101      	str	r1, [sp, #4]
 80172b6:	b292      	uxth	r2, r2
 80172b8:	6821      	ldr	r1, [r4, #0]
 80172ba:	9100      	str	r1, [sp, #0]
 80172bc:	a932      	add	r1, sp, #200	; 0xc8
 80172be:	f7ff fc79 	bl	8016bb4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80172c2:	7c23      	ldrb	r3, [r4, #16]
 80172c4:	b9bb      	cbnz	r3, 80172f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 80172c6:	fa1f fa86 	uxth.w	sl, r6
 80172ca:	2d00      	cmp	r5, #0
 80172cc:	dd45      	ble.n	801735a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 80172ce:	4638      	mov	r0, r7
 80172d0:	f002 fc56 	bl	8019b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80172d4:	2800      	cmp	r0, #0
 80172d6:	d03d      	beq.n	8017354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80172d8:	280a      	cmp	r0, #10
 80172da:	d1f6      	bne.n	80172ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80172dc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80172e0:	3d01      	subs	r5, #1
 80172e2:	4453      	add	r3, sl
 80172e4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80172e8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80172ec:	eba3 030a 	sub.w	r3, r3, sl
 80172f0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80172f4:	e7e9      	b.n	80172ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80172f6:	0073      	lsls	r3, r6, #1
 80172f8:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80172fc:	fa1f fa86 	uxth.w	sl, r6
 8017300:	9309      	str	r3, [sp, #36]	; 0x24
 8017302:	2d00      	cmp	r5, #0
 8017304:	dd29      	ble.n	801735a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8017306:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801730a:	a811      	add	r0, sp, #68	; 0x44
 801730c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801730e:	428b      	cmp	r3, r1
 8017310:	bfd4      	ite	le
 8017312:	2100      	movle	r1, #0
 8017314:	2101      	movgt	r1, #1
 8017316:	f7ff fe69 	bl	8016fec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801731a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801731e:	3b01      	subs	r3, #1
 8017320:	b29b      	uxth	r3, r3
 8017322:	455b      	cmp	r3, fp
 8017324:	930b      	str	r3, [sp, #44]	; 0x2c
 8017326:	d005      	beq.n	8017334 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8017328:	7961      	ldrb	r1, [r4, #5]
 801732a:	4638      	mov	r0, r7
 801732c:	f7ed f808 	bl	8004340 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017332:	e7f4      	b.n	801731e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8017334:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017338:	3d01      	subs	r5, #1
 801733a:	4453      	add	r3, sl
 801733c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017340:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8017344:	eba3 030a 	sub.w	r3, r3, sl
 8017348:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801734c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017350:	2b00      	cmp	r3, #0
 8017352:	d1d6      	bne.n	8017302 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8017354:	b065      	add	sp, #404	; 0x194
 8017356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801735a:	0075      	lsls	r5, r6, #1
 801735c:	f04f 0a00 	mov.w	sl, #0
 8017360:	7c23      	ldrb	r3, [r4, #16]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d066      	beq.n	8017434 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8017366:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801736a:	a811      	add	r0, sp, #68	; 0x44
 801736c:	428d      	cmp	r5, r1
 801736e:	bfd4      	ite	le
 8017370:	2100      	movle	r1, #0
 8017372:	2101      	movgt	r1, #1
 8017374:	f7ff fe3a 	bl	8016fec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8017378:	9b08      	ldr	r3, [sp, #32]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d055      	beq.n	801742a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801737e:	f894 b010 	ldrb.w	fp, [r4, #16]
 8017382:	2264      	movs	r2, #100	; 0x64
 8017384:	4639      	mov	r1, r7
 8017386:	a84b      	add	r0, sp, #300	; 0x12c
 8017388:	f00b feac 	bl	80230e4 <memcpy>
 801738c:	f1bb 0f00 	cmp.w	fp, #0
 8017390:	d058      	beq.n	8017444 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8017392:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8017396:	7922      	ldrb	r2, [r4, #4]
 8017398:	2a01      	cmp	r2, #1
 801739a:	d13c      	bne.n	8017416 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801739c:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80173a0:	1ac0      	subs	r0, r0, r3
 80173a2:	2302      	movs	r3, #2
 80173a4:	fb90 f0f3 	sdiv	r0, r0, r3
 80173a8:	b200      	sxth	r0, r0
 80173aa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80173ae:	4418      	add	r0, r3
 80173b0:	7c23      	ldrb	r3, [r4, #16]
 80173b2:	b200      	sxth	r0, r0
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d03a      	beq.n	801742e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 80173b8:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 80173bc:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 80173c0:	9000      	str	r0, [sp, #0]
 80173c2:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80173c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80173c8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80173cc:	e9cd a703 	strd	sl, r7, [sp, #12]
 80173d0:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80173d4:	464a      	mov	r2, r9
 80173d6:	2100      	movs	r1, #0
 80173d8:	f7ff fc95 	bl	8016d06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80173dc:	2800      	cmp	r0, #0
 80173de:	d1b9      	bne.n	8017354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80173e0:	b2b2      	uxth	r2, r6
 80173e2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80173e6:	4611      	mov	r1, r2
 80173e8:	4413      	add	r3, r2
 80173ea:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80173ee:	b21b      	sxth	r3, r3
 80173f0:	1a52      	subs	r2, r2, r1
 80173f2:	7c21      	ldrb	r1, [r4, #16]
 80173f4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80173f8:	b212      	sxth	r2, r2
 80173fa:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80173fe:	b109      	cbz	r1, 8017404 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8017400:	42b2      	cmp	r2, r6
 8017402:	dba7      	blt.n	8017354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017404:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8017408:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801740c:	440a      	add	r2, r1
 801740e:	b212      	sxth	r2, r2
 8017410:	4293      	cmp	r3, r2
 8017412:	dda5      	ble.n	8017360 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8017414:	e79e      	b.n	8017354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8017416:	2a02      	cmp	r2, #2
 8017418:	d105      	bne.n	8017426 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801741a:	7be2      	ldrb	r2, [r4, #15]
 801741c:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8017420:	1a80      	subs	r0, r0, r2
 8017422:	1ac0      	subs	r0, r0, r3
 8017424:	e7c0      	b.n	80173a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8017426:	2000      	movs	r0, #0
 8017428:	e7bf      	b.n	80173aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801742a:	7be0      	ldrb	r0, [r4, #15]
 801742c:	e7bd      	b.n	80173aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801742e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017432:	e7c3      	b.n	80173bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8017434:	9b08      	ldr	r3, [sp, #32]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d0f7      	beq.n	801742a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801743a:	2264      	movs	r2, #100	; 0x64
 801743c:	4639      	mov	r1, r7
 801743e:	a84b      	add	r0, sp, #300	; 0x12c
 8017440:	f00b fe50 	bl	80230e4 <memcpy>
 8017444:	2300      	movs	r3, #0
 8017446:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801744a:	6821      	ldr	r1, [r4, #0]
 801744c:	a84b      	add	r0, sp, #300	; 0x12c
 801744e:	f7ff fbed 	bl	8016c2c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017452:	b203      	sxth	r3, r0
 8017454:	e79f      	b.n	8017396 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

08017456 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017456:	2b03      	cmp	r3, #3
 8017458:	d818      	bhi.n	801748c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801745a:	e8df f003 	tbb	[pc, r3]
 801745e:	0602      	.short	0x0602
 8017460:	130d      	.short	0x130d
 8017462:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017466:	1850      	adds	r0, r2, r1
 8017468:	4770      	bx	lr
 801746a:	8803      	ldrh	r3, [r0, #0]
 801746c:	8880      	ldrh	r0, [r0, #4]
 801746e:	4418      	add	r0, r3
 8017470:	b200      	sxth	r0, r0
 8017472:	1a80      	subs	r0, r0, r2
 8017474:	3801      	subs	r0, #1
 8017476:	4770      	bx	lr
 8017478:	8803      	ldrh	r3, [r0, #0]
 801747a:	8880      	ldrh	r0, [r0, #4]
 801747c:	4418      	add	r0, r3
 801747e:	b200      	sxth	r0, r0
 8017480:	1a40      	subs	r0, r0, r1
 8017482:	e7f7      	b.n	8017474 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017484:	f9b0 0000 	ldrsh.w	r0, [r0]
 8017488:	4410      	add	r0, r2
 801748a:	4770      	bx	lr
 801748c:	2000      	movs	r0, #0
 801748e:	4770      	bx	lr

08017490 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017490:	2b03      	cmp	r3, #3
 8017492:	d817      	bhi.n	80174c4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017494:	e8df f003 	tbb	[pc, r3]
 8017498:	10090602 	.word	0x10090602
 801749c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80174a0:	1850      	adds	r0, r2, r1
 80174a2:	4770      	bx	lr
 80174a4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80174a8:	e7fa      	b.n	80174a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80174aa:	8843      	ldrh	r3, [r0, #2]
 80174ac:	88c0      	ldrh	r0, [r0, #6]
 80174ae:	4418      	add	r0, r3
 80174b0:	b200      	sxth	r0, r0
 80174b2:	1a80      	subs	r0, r0, r2
 80174b4:	3801      	subs	r0, #1
 80174b6:	4770      	bx	lr
 80174b8:	8843      	ldrh	r3, [r0, #2]
 80174ba:	88c0      	ldrh	r0, [r0, #6]
 80174bc:	4418      	add	r0, r3
 80174be:	b200      	sxth	r0, r0
 80174c0:	1a40      	subs	r0, r0, r1
 80174c2:	e7f7      	b.n	80174b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80174c4:	2000      	movs	r0, #0
 80174c6:	4770      	bx	lr

080174c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80174c8:	4b01      	ldr	r3, [pc, #4]	; (80174d0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80174ca:	2200      	movs	r2, #0
 80174cc:	601a      	str	r2, [r3, #0]
 80174ce:	4770      	bx	lr
 80174d0:	2400f448 	.word	0x2400f448

080174d4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80174d4:	4603      	mov	r3, r0
 80174d6:	b1c8      	cbz	r0, 801750c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80174d8:	0c02      	lsrs	r2, r0, #16
 80174da:	0412      	lsls	r2, r2, #16
 80174dc:	b9a2      	cbnz	r2, 8017508 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80174de:	0403      	lsls	r3, r0, #16
 80174e0:	2010      	movs	r0, #16
 80174e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80174e6:	bf04      	itt	eq
 80174e8:	021b      	lsleq	r3, r3, #8
 80174ea:	3008      	addeq	r0, #8
 80174ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80174f0:	bf04      	itt	eq
 80174f2:	011b      	lsleq	r3, r3, #4
 80174f4:	3004      	addeq	r0, #4
 80174f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80174fa:	bf04      	itt	eq
 80174fc:	009b      	lsleq	r3, r3, #2
 80174fe:	3002      	addeq	r0, #2
 8017500:	2b00      	cmp	r3, #0
 8017502:	db04      	blt.n	801750e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017504:	3001      	adds	r0, #1
 8017506:	4770      	bx	lr
 8017508:	2000      	movs	r0, #0
 801750a:	e7ea      	b.n	80174e2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801750c:	2020      	movs	r0, #32
 801750e:	4770      	bx	lr

08017510 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017514:	b087      	sub	sp, #28
 8017516:	4681      	mov	r9, r0
 8017518:	4698      	mov	r8, r3
 801751a:	4610      	mov	r0, r2
 801751c:	460d      	mov	r5, r1
 801751e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8017522:	b981      	cbnz	r1, 8017546 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8017524:	b14b      	cbz	r3, 801753a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8017526:	460b      	mov	r3, r1
 8017528:	464a      	mov	r2, r9
 801752a:	4641      	mov	r1, r8
 801752c:	e9cd 4700 	strd	r4, r7, [sp]
 8017530:	f7ff ffee 	bl	8017510 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017534:	b007      	add	sp, #28
 8017536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801753a:	f04f 33ff 	mov.w	r3, #4294967295
 801753e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017542:	603b      	str	r3, [r7, #0]
 8017544:	e7f6      	b.n	8017534 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8017546:	fa32 fa01 	lsrs.w	sl, r2, r1
 801754a:	d107      	bne.n	801755c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801754c:	fb09 f602 	mul.w	r6, r9, r2
 8017550:	fbb6 f0f4 	udiv	r0, r6, r4
 8017554:	fb04 6610 	mls	r6, r4, r0, r6
 8017558:	603e      	str	r6, [r7, #0]
 801755a:	e7eb      	b.n	8017534 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801755c:	2601      	movs	r6, #1
 801755e:	fa09 fb01 	lsl.w	fp, r9, r1
 8017562:	408e      	lsls	r6, r1
 8017564:	fbbb f3f4 	udiv	r3, fp, r4
 8017568:	3e01      	subs	r6, #1
 801756a:	9302      	str	r3, [sp, #8]
 801756c:	fb0a f303 	mul.w	r3, sl, r3
 8017570:	4016      	ands	r6, r2
 8017572:	9303      	str	r3, [sp, #12]
 8017574:	4630      	mov	r0, r6
 8017576:	f7ff ffad 	bl	80174d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801757a:	464a      	mov	r2, r9
 801757c:	460b      	mov	r3, r1
 801757e:	4601      	mov	r1, r0
 8017580:	4630      	mov	r0, r6
 8017582:	e9cd 4700 	strd	r4, r7, [sp]
 8017586:	f7ff ffc3 	bl	8017510 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801758a:	9b02      	ldr	r3, [sp, #8]
 801758c:	4606      	mov	r6, r0
 801758e:	eb05 0108 	add.w	r1, r5, r8
 8017592:	fb04 bb13 	mls	fp, r4, r3, fp
 8017596:	4658      	mov	r0, fp
 8017598:	f7ff ff9c 	bl	80174d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801759c:	ab05      	add	r3, sp, #20
 801759e:	465a      	mov	r2, fp
 80175a0:	e9cd 4300 	strd	r4, r3, [sp]
 80175a4:	4603      	mov	r3, r0
 80175a6:	4650      	mov	r0, sl
 80175a8:	f7ff ffb2 	bl	8017510 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80175ac:	6839      	ldr	r1, [r7, #0]
 80175ae:	9a05      	ldr	r2, [sp, #20]
 80175b0:	9b03      	ldr	r3, [sp, #12]
 80175b2:	4411      	add	r1, r2
 80175b4:	fbb1 f2f4 	udiv	r2, r1, r4
 80175b8:	18d3      	adds	r3, r2, r3
 80175ba:	fb04 1412 	mls	r4, r4, r2, r1
 80175be:	441e      	add	r6, r3
 80175c0:	603c      	str	r4, [r7, #0]
 80175c2:	4430      	add	r0, r6
 80175c4:	e7b6      	b.n	8017534 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080175c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80175c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175ca:	b085      	sub	sp, #20
 80175cc:	f1b0 0900 	subs.w	r9, r0, #0
 80175d0:	461d      	mov	r5, r3
 80175d2:	4617      	mov	r7, r2
 80175d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80175d6:	bfbb      	ittet	lt
 80175d8:	f1c9 0900 	rsblt	r9, r9, #0
 80175dc:	f04f 36ff 	movlt.w	r6, #4294967295
 80175e0:	2601      	movge	r6, #1
 80175e2:	6823      	ldrlt	r3, [r4, #0]
 80175e4:	bfbc      	itt	lt
 80175e6:	425b      	neglt	r3, r3
 80175e8:	6023      	strlt	r3, [r4, #0]
 80175ea:	2a00      	cmp	r2, #0
 80175ec:	da04      	bge.n	80175f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80175ee:	6823      	ldr	r3, [r4, #0]
 80175f0:	4257      	negs	r7, r2
 80175f2:	4276      	negs	r6, r6
 80175f4:	425b      	negs	r3, r3
 80175f6:	6023      	str	r3, [r4, #0]
 80175f8:	2d00      	cmp	r5, #0
 80175fa:	4638      	mov	r0, r7
 80175fc:	bfba      	itte	lt
 80175fe:	426d      	neglt	r5, r5
 8017600:	f04f 38ff 	movlt.w	r8, #4294967295
 8017604:	f04f 0801 	movge.w	r8, #1
 8017608:	f7ff ff64 	bl	80174d4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801760c:	ab03      	add	r3, sp, #12
 801760e:	463a      	mov	r2, r7
 8017610:	e9cd 5300 	strd	r5, r3, [sp]
 8017614:	4603      	mov	r3, r0
 8017616:	4648      	mov	r0, r9
 8017618:	f7ff ff7a 	bl	8017510 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801761c:	6823      	ldr	r3, [r4, #0]
 801761e:	9a03      	ldr	r2, [sp, #12]
 8017620:	4546      	cmp	r6, r8
 8017622:	441a      	add	r2, r3
 8017624:	fb92 f3f5 	sdiv	r3, r2, r5
 8017628:	4418      	add	r0, r3
 801762a:	fb05 2313 	mls	r3, r5, r3, r2
 801762e:	bf18      	it	ne
 8017630:	4240      	negne	r0, r0
 8017632:	1c72      	adds	r2, r6, #1
 8017634:	6023      	str	r3, [r4, #0]
 8017636:	d105      	bne.n	8017644 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8017638:	2b00      	cmp	r3, #0
 801763a:	f1c3 0200 	rsb	r2, r3, #0
 801763e:	db0b      	blt.n	8017658 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8017640:	6022      	str	r2, [r4, #0]
 8017642:	e006      	b.n	8017652 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017644:	2e01      	cmp	r6, #1
 8017646:	d104      	bne.n	8017652 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8017648:	2b00      	cmp	r3, #0
 801764a:	da02      	bge.n	8017652 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801764c:	442b      	add	r3, r5
 801764e:	3801      	subs	r0, #1
 8017650:	6023      	str	r3, [r4, #0]
 8017652:	b005      	add	sp, #20
 8017654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017658:	3801      	subs	r0, #1
 801765a:	1b52      	subs	r2, r2, r5
 801765c:	e7f0      	b.n	8017640 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08017660 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8017660:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8017664:	4c1c      	ldr	r4, [pc, #112]	; (80176d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8017666:	4605      	mov	r5, r0
 8017668:	6807      	ldr	r7, [r0, #0]
 801766a:	69a3      	ldr	r3, [r4, #24]
 801766c:	b92b      	cbnz	r3, 801767a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801766e:	6840      	ldr	r0, [r0, #4]
 8017670:	e9c5 7000 	strd	r7, r0, [r5]
 8017674:	b004      	add	sp, #16
 8017676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801767a:	f04f 0802 	mov.w	r8, #2
 801767e:	68a2      	ldr	r2, [r4, #8]
 8017680:	ae04      	add	r6, sp, #16
 8017682:	6820      	ldr	r0, [r4, #0]
 8017684:	fb93 f1f8 	sdiv	r1, r3, r8
 8017688:	440a      	add	r2, r1
 801768a:	69e1      	ldr	r1, [r4, #28]
 801768c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8017690:	463a      	mov	r2, r7
 8017692:	9600      	str	r6, [sp, #0]
 8017694:	f7ff ff97 	bl	80175c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8017698:	69a3      	ldr	r3, [r4, #24]
 801769a:	4607      	mov	r7, r0
 801769c:	686a      	ldr	r2, [r5, #4]
 801769e:	6a21      	ldr	r1, [r4, #32]
 80176a0:	9600      	str	r6, [sp, #0]
 80176a2:	6860      	ldr	r0, [r4, #4]
 80176a4:	f7ff ff8f 	bl	80175c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80176a8:	69a3      	ldr	r3, [r4, #24]
 80176aa:	6962      	ldr	r2, [r4, #20]
 80176ac:	4407      	add	r7, r0
 80176ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80176b0:	9600      	str	r6, [sp, #0]
 80176b2:	68e0      	ldr	r0, [r4, #12]
 80176b4:	fb93 f8f8 	sdiv	r8, r3, r8
 80176b8:	4442      	add	r2, r8
 80176ba:	9203      	str	r2, [sp, #12]
 80176bc:	682a      	ldr	r2, [r5, #0]
 80176be:	f7ff ff82 	bl	80175c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80176c2:	4680      	mov	r8, r0
 80176c4:	9600      	str	r6, [sp, #0]
 80176c6:	69a3      	ldr	r3, [r4, #24]
 80176c8:	686a      	ldr	r2, [r5, #4]
 80176ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80176cc:	6920      	ldr	r0, [r4, #16]
 80176ce:	f7ff ff7a 	bl	80175c6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80176d2:	4440      	add	r0, r8
 80176d4:	e7cc      	b.n	8017670 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80176d6:	bf00      	nop
 80176d8:	2400f44c 	.word	0x2400f44c

080176dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80176dc:	4b07      	ldr	r3, [pc, #28]	; (80176fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80176de:	781b      	ldrb	r3, [r3, #0]
 80176e0:	2b01      	cmp	r3, #1
 80176e2:	d109      	bne.n	80176f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80176e4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80176e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80176ec:	8003      	strh	r3, [r0, #0]
 80176ee:	4b04      	ldr	r3, [pc, #16]	; (8017700 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80176f0:	881b      	ldrh	r3, [r3, #0]
 80176f2:	3b01      	subs	r3, #1
 80176f4:	1a9b      	subs	r3, r3, r2
 80176f6:	800b      	strh	r3, [r1, #0]
 80176f8:	4770      	bx	lr
 80176fa:	bf00      	nop
 80176fc:	2400f438 	.word	0x2400f438
 8017700:	2400f434 	.word	0x2400f434

08017704 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8017704:	4b07      	ldr	r3, [pc, #28]	; (8017724 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8017706:	b510      	push	{r4, lr}
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	2b01      	cmp	r3, #1
 801770c:	d108      	bne.n	8017720 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801770e:	4b06      	ldr	r3, [pc, #24]	; (8017728 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8017710:	880c      	ldrh	r4, [r1, #0]
 8017712:	881b      	ldrh	r3, [r3, #0]
 8017714:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017718:	3b01      	subs	r3, #1
 801771a:	1b1b      	subs	r3, r3, r4
 801771c:	8003      	strh	r3, [r0, #0]
 801771e:	800a      	strh	r2, [r1, #0]
 8017720:	bd10      	pop	{r4, pc}
 8017722:	bf00      	nop
 8017724:	2400f438 	.word	0x2400f438
 8017728:	2400f434 	.word	0x2400f434

0801772c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801772c:	4b0a      	ldr	r3, [pc, #40]	; (8017758 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801772e:	b510      	push	{r4, lr}
 8017730:	781b      	ldrb	r3, [r3, #0]
 8017732:	2b01      	cmp	r3, #1
 8017734:	d10e      	bne.n	8017754 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8017736:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801773a:	8843      	ldrh	r3, [r0, #2]
 801773c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017740:	18ca      	adds	r2, r1, r3
 8017742:	4b06      	ldr	r3, [pc, #24]	; (801775c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8017744:	8044      	strh	r4, [r0, #2]
 8017746:	881b      	ldrh	r3, [r3, #0]
 8017748:	1a9b      	subs	r3, r3, r2
 801774a:	8003      	strh	r3, [r0, #0]
 801774c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017750:	8081      	strh	r1, [r0, #4]
 8017752:	80c3      	strh	r3, [r0, #6]
 8017754:	bd10      	pop	{r4, pc}
 8017756:	bf00      	nop
 8017758:	2400f438 	.word	0x2400f438
 801775c:	2400f434 	.word	0x2400f434

08017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8017760:	4b08      	ldr	r3, [pc, #32]	; (8017784 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8017762:	781b      	ldrb	r3, [r3, #0]
 8017764:	2b01      	cmp	r3, #1
 8017766:	d10c      	bne.n	8017782 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8017768:	8803      	ldrh	r3, [r0, #0]
 801776a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801776e:	8842      	ldrh	r2, [r0, #2]
 8017770:	8002      	strh	r2, [r0, #0]
 8017772:	185a      	adds	r2, r3, r1
 8017774:	4b04      	ldr	r3, [pc, #16]	; (8017788 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8017776:	881b      	ldrh	r3, [r3, #0]
 8017778:	1a9b      	subs	r3, r3, r2
 801777a:	8043      	strh	r3, [r0, #2]
 801777c:	88c3      	ldrh	r3, [r0, #6]
 801777e:	80c1      	strh	r1, [r0, #6]
 8017780:	8083      	strh	r3, [r0, #4]
 8017782:	4770      	bx	lr
 8017784:	2400f438 	.word	0x2400f438
 8017788:	2400f434 	.word	0x2400f434

0801778c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801778c:	4b07      	ldr	r3, [pc, #28]	; (80177ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801778e:	b510      	push	{r4, lr}
 8017790:	781b      	ldrb	r3, [r3, #0]
 8017792:	2b01      	cmp	r3, #1
 8017794:	d108      	bne.n	80177a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8017796:	f9b1 3000 	ldrsh.w	r3, [r1]
 801779a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801779e:	8003      	strh	r3, [r0, #0]
 80177a0:	8893      	ldrh	r3, [r2, #4]
 80177a2:	3b01      	subs	r3, #1
 80177a4:	1b1b      	subs	r3, r3, r4
 80177a6:	800b      	strh	r3, [r1, #0]
 80177a8:	bd10      	pop	{r4, pc}
 80177aa:	bf00      	nop
 80177ac:	2400f438 	.word	0x2400f438

080177b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80177b0:	4b0a      	ldr	r3, [pc, #40]	; (80177dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80177b2:	460a      	mov	r2, r1
 80177b4:	b510      	push	{r4, lr}
 80177b6:	781b      	ldrb	r3, [r3, #0]
 80177b8:	2b01      	cmp	r3, #1
 80177ba:	d10d      	bne.n	80177d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80177bc:	8881      	ldrh	r1, [r0, #4]
 80177be:	8803      	ldrh	r3, [r0, #0]
 80177c0:	440b      	add	r3, r1
 80177c2:	4601      	mov	r1, r0
 80177c4:	3b01      	subs	r3, #1
 80177c6:	f821 3b02 	strh.w	r3, [r1], #2
 80177ca:	f7ff ffdf 	bl	801778c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80177ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80177d2:	88c2      	ldrh	r2, [r0, #6]
 80177d4:	80c3      	strh	r3, [r0, #6]
 80177d6:	8082      	strh	r2, [r0, #4]
 80177d8:	bd10      	pop	{r4, pc}
 80177da:	bf00      	nop
 80177dc:	2400f438 	.word	0x2400f438

080177e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80177e0:	b570      	push	{r4, r5, r6, lr}
 80177e2:	2300      	movs	r3, #0
 80177e4:	4c0a      	ldr	r4, [pc, #40]	; (8017810 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80177e6:	4605      	mov	r5, r0
 80177e8:	460e      	mov	r6, r1
 80177ea:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80177ee:	6820      	ldr	r0, [r4, #0]
 80177f0:	b110      	cbz	r0, 80177f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 80177f2:	6803      	ldr	r3, [r0, #0]
 80177f4:	695b      	ldr	r3, [r3, #20]
 80177f6:	4798      	blx	r3
 80177f8:	6026      	str	r6, [r4, #0]
 80177fa:	4630      	mov	r0, r6
 80177fc:	6833      	ldr	r3, [r6, #0]
 80177fe:	68db      	ldr	r3, [r3, #12]
 8017800:	4798      	blx	r3
 8017802:	682b      	ldr	r3, [r5, #0]
 8017804:	4628      	mov	r0, r5
 8017806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801780c:	4718      	bx	r3
 801780e:	bf00      	nop
 8017810:	2400f47c 	.word	0x2400f47c

08017814 <_ZN8touchgfx11Application13requestRedrawEv>:
 8017814:	4b06      	ldr	r3, [pc, #24]	; (8017830 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8017816:	2100      	movs	r1, #0
 8017818:	f9b3 2000 	ldrsh.w	r2, [r3]
 801781c:	4b05      	ldr	r3, [pc, #20]	; (8017834 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801781e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8017822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017826:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801782a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801782e:	4770      	bx	lr
 8017830:	2400f434 	.word	0x2400f434
 8017834:	2400f436 	.word	0x2400f436

08017838 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8017838:	4b03      	ldr	r3, [pc, #12]	; (8017848 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801783a:	6818      	ldr	r0, [r3, #0]
 801783c:	b110      	cbz	r0, 8017844 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801783e:	6803      	ldr	r3, [r0, #0]
 8017840:	699b      	ldr	r3, [r3, #24]
 8017842:	4718      	bx	r3
 8017844:	4770      	bx	lr
 8017846:	bf00      	nop
 8017848:	2400f47c 	.word	0x2400f47c

0801784c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801784c:	4770      	bx	lr
	...

08017850 <_ZN8touchgfx11Application4drawEv>:
 8017850:	4b09      	ldr	r3, [pc, #36]	; (8017878 <_ZN8touchgfx11Application4drawEv+0x28>)
 8017852:	b507      	push	{r0, r1, r2, lr}
 8017854:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017858:	2100      	movs	r1, #0
 801785a:	4b08      	ldr	r3, [pc, #32]	; (801787c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801785c:	9100      	str	r1, [sp, #0]
 801785e:	4669      	mov	r1, sp
 8017860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017864:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017868:	f8ad 3006 	strh.w	r3, [sp, #6]
 801786c:	6803      	ldr	r3, [r0, #0]
 801786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017870:	4798      	blx	r3
 8017872:	b003      	add	sp, #12
 8017874:	f85d fb04 	ldr.w	pc, [sp], #4
 8017878:	2400f434 	.word	0x2400f434
 801787c:	2400f436 	.word	0x2400f436

08017880 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8017880:	4b03      	ldr	r3, [pc, #12]	; (8017890 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8017882:	6818      	ldr	r0, [r3, #0]
 8017884:	b110      	cbz	r0, 801788c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8017886:	6803      	ldr	r3, [r0, #0]
 8017888:	69db      	ldr	r3, [r3, #28]
 801788a:	4718      	bx	r3
 801788c:	4770      	bx	lr
 801788e:	bf00      	nop
 8017890:	2400f47c 	.word	0x2400f47c

08017894 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8017894:	4b03      	ldr	r3, [pc, #12]	; (80178a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8017896:	6818      	ldr	r0, [r3, #0]
 8017898:	b110      	cbz	r0, 80178a0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801789a:	6803      	ldr	r3, [r0, #0]
 801789c:	6a1b      	ldr	r3, [r3, #32]
 801789e:	4718      	bx	r3
 80178a0:	4770      	bx	lr
 80178a2:	bf00      	nop
 80178a4:	2400f47c 	.word	0x2400f47c

080178a8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80178a8:	2300      	movs	r3, #0
 80178aa:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80178ae:	4770      	bx	lr

080178b0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80178b0:	4b03      	ldr	r3, [pc, #12]	; (80178c0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80178b2:	6818      	ldr	r0, [r3, #0]
 80178b4:	b110      	cbz	r0, 80178bc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80178b6:	6803      	ldr	r3, [r0, #0]
 80178b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178ba:	4718      	bx	r3
 80178bc:	4770      	bx	lr
 80178be:	bf00      	nop
 80178c0:	2400f47c 	.word	0x2400f47c

080178c4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80178c4:	b570      	push	{r4, r5, r6, lr}
 80178c6:	4d32      	ldr	r5, [pc, #200]	; (8017990 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 80178c8:	4604      	mov	r4, r0
 80178ca:	6828      	ldr	r0, [r5, #0]
 80178cc:	b140      	cbz	r0, 80178e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80178ce:	7a03      	ldrb	r3, [r0, #8]
 80178d0:	b933      	cbnz	r3, 80178e0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80178d2:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 80178d6:	6803      	ldr	r3, [r0, #0]
 80178d8:	689b      	ldr	r3, [r3, #8]
 80178da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178de:	4718      	bx	r3
 80178e0:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 80178e4:	b97b      	cbnz	r3, 8017906 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80178e6:	b170      	cbz	r0, 8017906 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80178e8:	7a03      	ldrb	r3, [r0, #8]
 80178ea:	b163      	cbz	r3, 8017906 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80178ec:	4b29      	ldr	r3, [pc, #164]	; (8017994 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 80178ee:	6818      	ldr	r0, [r3, #0]
 80178f0:	b110      	cbz	r0, 80178f8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80178f2:	6803      	ldr	r3, [r0, #0]
 80178f4:	691b      	ldr	r3, [r3, #16]
 80178f6:	4798      	blx	r3
 80178f8:	6828      	ldr	r0, [r5, #0]
 80178fa:	6803      	ldr	r3, [r0, #0]
 80178fc:	68db      	ldr	r3, [r3, #12]
 80178fe:	4798      	blx	r3
 8017900:	2301      	movs	r3, #1
 8017902:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8017906:	2500      	movs	r5, #0
 8017908:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801790c:	42a8      	cmp	r0, r5
 801790e:	dd0c      	ble.n	801792a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8017910:	1963      	adds	r3, r4, r5
 8017912:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017916:	b132      	cbz	r2, 8017926 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8017918:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801791c:	4413      	add	r3, r2
 801791e:	6858      	ldr	r0, [r3, #4]
 8017920:	6803      	ldr	r3, [r0, #0]
 8017922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017924:	4798      	blx	r3
 8017926:	3501      	adds	r5, #1
 8017928:	e7ee      	b.n	8017908 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801792a:	2300      	movs	r3, #0
 801792c:	461a      	mov	r2, r3
 801792e:	4298      	cmp	r0, r3
 8017930:	d015      	beq.n	801795e <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8017932:	18e1      	adds	r1, r4, r3
 8017934:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8017938:	b16d      	cbz	r5, 8017956 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801793a:	429a      	cmp	r2, r3
 801793c:	d00a      	beq.n	8017954 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801793e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8017942:	4431      	add	r1, r6
 8017944:	684e      	ldr	r6, [r1, #4]
 8017946:	b291      	uxth	r1, r2
 8017948:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801794c:	604e      	str	r6, [r1, #4]
 801794e:	18a1      	adds	r1, r4, r2
 8017950:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8017954:	3201      	adds	r2, #1
 8017956:	3301      	adds	r3, #1
 8017958:	e7e9      	b.n	801792e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801795a:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801795e:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8017962:	4295      	cmp	r5, r2
 8017964:	dd0d      	ble.n	8017982 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8017966:	1e6b      	subs	r3, r5, #1
 8017968:	b29b      	uxth	r3, r3
 801796a:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801796e:	4618      	mov	r0, r3
 8017970:	3104      	adds	r1, #4
 8017972:	4285      	cmp	r5, r0
 8017974:	ddf1      	ble.n	801795a <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8017976:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801797a:	3001      	adds	r0, #1
 801797c:	f841 6c04 	str.w	r6, [r1, #-4]
 8017980:	e7f7      	b.n	8017972 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8017982:	4b04      	ldr	r3, [pc, #16]	; (8017994 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8017984:	6818      	ldr	r0, [r3, #0]
 8017986:	b110      	cbz	r0, 801798e <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8017988:	6803      	ldr	r3, [r0, #0]
 801798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801798c:	e7a5      	b.n	80178da <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801798e:	bd70      	pop	{r4, r5, r6, pc}
 8017990:	2400f480 	.word	0x2400f480
 8017994:	2400f47c 	.word	0x2400f47c

08017998 <_ZN8touchgfx11ApplicationD1Ev>:
 8017998:	4770      	bx	lr

0801799a <_ZN8touchgfx11ApplicationD0Ev>:
 801799a:	b510      	push	{r4, lr}
 801799c:	4604      	mov	r4, r0
 801799e:	f44f 719c 	mov.w	r1, #312	; 0x138
 80179a2:	f00b f9e8 	bl	8022d76 <_ZdlPvj>
 80179a6:	4620      	mov	r0, r4
 80179a8:	bd10      	pop	{r4, pc}

080179aa <_ZN8touchgfx4Rect10restrictToEss>:
 80179aa:	f9b0 3000 	ldrsh.w	r3, [r0]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	b510      	push	{r4, lr}
 80179b2:	da04      	bge.n	80179be <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80179b4:	8884      	ldrh	r4, [r0, #4]
 80179b6:	4423      	add	r3, r4
 80179b8:	8083      	strh	r3, [r0, #4]
 80179ba:	2300      	movs	r3, #0
 80179bc:	8003      	strh	r3, [r0, #0]
 80179be:	f9b0 4000 	ldrsh.w	r4, [r0]
 80179c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80179c6:	1b09      	subs	r1, r1, r4
 80179c8:	428b      	cmp	r3, r1
 80179ca:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80179ce:	bfc8      	it	gt
 80179d0:	8081      	strhgt	r1, [r0, #4]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	da04      	bge.n	80179e0 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80179d6:	88c1      	ldrh	r1, [r0, #6]
 80179d8:	440b      	add	r3, r1
 80179da:	80c3      	strh	r3, [r0, #6]
 80179dc:	2300      	movs	r3, #0
 80179de:	8043      	strh	r3, [r0, #2]
 80179e0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80179e4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80179e8:	1a52      	subs	r2, r2, r1
 80179ea:	4293      	cmp	r3, r2
 80179ec:	bfc8      	it	gt
 80179ee:	80c2      	strhgt	r2, [r0, #6]
 80179f0:	bd10      	pop	{r4, pc}
	...

080179f4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80179f4:	4b10      	ldr	r3, [pc, #64]	; (8017a38 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80179f6:	b510      	push	{r4, lr}
 80179f8:	460c      	mov	r4, r1
 80179fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80179fe:	4b0f      	ldr	r3, [pc, #60]	; (8017a3c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8017a00:	4620      	mov	r0, r4
 8017a02:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017a06:	f7ff ffd0 	bl	80179aa <_ZN8touchgfx4Rect10restrictToEss>
 8017a0a:	4b0d      	ldr	r3, [pc, #52]	; (8017a40 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8017a0c:	6818      	ldr	r0, [r3, #0]
 8017a0e:	b190      	cbz	r0, 8017a36 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8017a10:	6803      	ldr	r3, [r0, #0]
 8017a12:	4621      	mov	r1, r4
 8017a14:	689b      	ldr	r3, [r3, #8]
 8017a16:	4798      	blx	r3
 8017a18:	4b0a      	ldr	r3, [pc, #40]	; (8017a44 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8017a1a:	6818      	ldr	r0, [r3, #0]
 8017a1c:	b118      	cbz	r0, 8017a26 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8017a1e:	6803      	ldr	r3, [r0, #0]
 8017a20:	4621      	mov	r1, r4
 8017a22:	689b      	ldr	r3, [r3, #8]
 8017a24:	4798      	blx	r3
 8017a26:	4b08      	ldr	r3, [pc, #32]	; (8017a48 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8017a28:	4621      	mov	r1, r4
 8017a2a:	6818      	ldr	r0, [r3, #0]
 8017a2c:	6803      	ldr	r3, [r0, #0]
 8017a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a32:	69db      	ldr	r3, [r3, #28]
 8017a34:	4718      	bx	r3
 8017a36:	bd10      	pop	{r4, pc}
 8017a38:	2400f436 	.word	0x2400f436
 8017a3c:	2400f434 	.word	0x2400f434
 8017a40:	2400f47c 	.word	0x2400f47c
 8017a44:	2400f478 	.word	0x2400f478
 8017a48:	2400f440 	.word	0x2400f440

08017a4c <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a4e:	4606      	mov	r6, r0
 8017a50:	4608      	mov	r0, r1
 8017a52:	460f      	mov	r7, r1
 8017a54:	f7fb fa4d 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a58:	b9e8      	cbnz	r0, 8017a96 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017a5a:	f9b7 5000 	ldrsh.w	r5, [r7]
 8017a5e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017a62:	42a5      	cmp	r5, r4
 8017a64:	db17      	blt.n	8017a96 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017a66:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8017a6a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	db11      	blt.n	8017a96 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017a72:	88b9      	ldrh	r1, [r7, #4]
 8017a74:	440d      	add	r5, r1
 8017a76:	88b1      	ldrh	r1, [r6, #4]
 8017a78:	440c      	add	r4, r1
 8017a7a:	b22d      	sxth	r5, r5
 8017a7c:	b224      	sxth	r4, r4
 8017a7e:	42a5      	cmp	r5, r4
 8017a80:	dc09      	bgt.n	8017a96 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017a82:	88f8      	ldrh	r0, [r7, #6]
 8017a84:	4410      	add	r0, r2
 8017a86:	88f2      	ldrh	r2, [r6, #6]
 8017a88:	4413      	add	r3, r2
 8017a8a:	b200      	sxth	r0, r0
 8017a8c:	b21b      	sxth	r3, r3
 8017a8e:	4298      	cmp	r0, r3
 8017a90:	bfcc      	ite	gt
 8017a92:	2000      	movgt	r0, #0
 8017a94:	2001      	movle	r0, #1
 8017a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017a98 <_ZN8touchgfx11Application11getInstanceEv>:
 8017a98:	4b01      	ldr	r3, [pc, #4]	; (8017aa0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8017a9a:	6818      	ldr	r0, [r3, #0]
 8017a9c:	4770      	bx	lr
 8017a9e:	bf00      	nop
 8017aa0:	2400f48c 	.word	0x2400f48c

08017aa4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8017aa4:	b570      	push	{r4, r5, r6, lr}
 8017aa6:	2200      	movs	r2, #0
 8017aa8:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8017aac:	1d04      	adds	r4, r0, #4
 8017aae:	b295      	uxth	r5, r2
 8017ab0:	429d      	cmp	r5, r3
 8017ab2:	d20e      	bcs.n	8017ad2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8017ab4:	f854 6b04 	ldr.w	r6, [r4], #4
 8017ab8:	4615      	mov	r5, r2
 8017aba:	3201      	adds	r2, #1
 8017abc:	428e      	cmp	r6, r1
 8017abe:	d1f6      	bne.n	8017aae <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8017ac0:	4428      	add	r0, r5
 8017ac2:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8017ac6:	2bff      	cmp	r3, #255	; 0xff
 8017ac8:	d002      	beq.n	8017ad0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8017aca:	3301      	adds	r3, #1
 8017acc:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8017ad0:	bd70      	pop	{r4, r5, r6, pc}
 8017ad2:	18c2      	adds	r2, r0, r3
 8017ad4:	2b20      	cmp	r3, #32
 8017ad6:	f04f 0401 	mov.w	r4, #1
 8017ada:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8017ade:	bf1f      	itttt	ne
 8017ae0:	191a      	addne	r2, r3, r4
 8017ae2:	f8a0 2084 	strhne.w	r2, [r0, #132]	; 0x84
 8017ae6:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
 8017aea:	6041      	strne	r1, [r0, #4]
 8017aec:	e7f0      	b.n	8017ad0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>

08017aee <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8017aee:	b570      	push	{r4, r5, r6, lr}
 8017af0:	2300      	movs	r3, #0
 8017af2:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8017af6:	1d04      	adds	r4, r0, #4
 8017af8:	b29a      	uxth	r2, r3
 8017afa:	4296      	cmp	r6, r2
 8017afc:	d90a      	bls.n	8017b14 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8017afe:	f854 2b04 	ldr.w	r2, [r4], #4
 8017b02:	428a      	cmp	r2, r1
 8017b04:	d107      	bne.n	8017b16 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8017b06:	18c5      	adds	r5, r0, r3
 8017b08:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8017b0c:	b11a      	cbz	r2, 8017b16 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8017b0e:	3a01      	subs	r2, #1
 8017b10:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8017b14:	bd70      	pop	{r4, r5, r6, pc}
 8017b16:	3301      	adds	r3, #1
 8017b18:	e7ee      	b.n	8017af8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08017b1a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8017b20:	30a8      	adds	r0, #168	; 0xa8
 8017b22:	f820 3c24 	strh.w	r3, [r0, #-36]
 8017b26:	f802 3b01 	strb.w	r3, [r2], #1
 8017b2a:	4282      	cmp	r2, r0
 8017b2c:	d1fb      	bne.n	8017b26 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8017b2e:	4770      	bx	lr

08017b30 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8017b30:	4603      	mov	r3, r0
 8017b32:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8017b36:	2200      	movs	r2, #0
 8017b38:	801a      	strh	r2, [r3, #0]
 8017b3a:	3308      	adds	r3, #8
 8017b3c:	f823 2c06 	strh.w	r2, [r3, #-6]
 8017b40:	f823 2c04 	strh.w	r2, [r3, #-4]
 8017b44:	f823 2c02 	strh.w	r2, [r3, #-2]
 8017b48:	428b      	cmp	r3, r1
 8017b4a:	d1f5      	bne.n	8017b38 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8017b4c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8017b50:	4770      	bx	lr
	...

08017b54 <_ZN8touchgfx11ApplicationC1Ev>:
 8017b54:	b570      	push	{r4, r5, r6, lr}
 8017b56:	4b19      	ldr	r3, [pc, #100]	; (8017bbc <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8017b58:	2500      	movs	r5, #0
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	30a8      	adds	r0, #168	; 0xa8
 8017b5e:	f840 3ca8 	str.w	r3, [r0, #-168]
 8017b62:	f820 5c24 	strh.w	r5, [r0, #-36]
 8017b66:	f7ff ffe3 	bl	8017b30 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017b6a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8017b6e:	f7ff ffdf 	bl	8017b30 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017b72:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8017b76:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8017b7a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8017b7e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8017b82:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8017b86:	490e      	ldr	r1, [pc, #56]	; (8017bc0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8017b88:	480e      	ldr	r0, [pc, #56]	; (8017bc4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8017b8a:	f00a ffeb 	bl	8022b64 <CRC_Lock>
 8017b8e:	4e0e      	ldr	r6, [pc, #56]	; (8017bc8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8017b90:	4b0e      	ldr	r3, [pc, #56]	; (8017bcc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8017b92:	b158      	cbz	r0, 8017bac <_ZN8touchgfx11ApplicationC1Ev+0x58>
 8017b94:	801d      	strh	r5, [r3, #0]
 8017b96:	2300      	movs	r3, #0
 8017b98:	4a0d      	ldr	r2, [pc, #52]	; (8017bd0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8017b9a:	4620      	mov	r0, r4
 8017b9c:	6013      	str	r3, [r2, #0]
 8017b9e:	4a0d      	ldr	r2, [pc, #52]	; (8017bd4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017ba0:	6033      	str	r3, [r6, #0]
 8017ba2:	6013      	str	r3, [r2, #0]
 8017ba4:	f7ff ffb9 	bl	8017b1a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8017ba8:	4620      	mov	r0, r4
 8017baa:	bd70      	pop	{r4, r5, r6, pc}
 8017bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017bb0:	2002      	movs	r0, #2
 8017bb2:	801a      	strh	r2, [r3, #0]
 8017bb4:	6030      	str	r0, [r6, #0]
 8017bb6:	f001 fa09 	bl	8018fcc <_ZN8touchgfx6Screen4drawEv>
 8017bba:	e7ec      	b.n	8017b96 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8017bbc:	08026acc 	.word	0x08026acc
 8017bc0:	b5e8b5cd 	.word	0xb5e8b5cd
 8017bc4:	f407a5c2 	.word	0xf407a5c2
 8017bc8:	2400f47c 	.word	0x2400f47c
 8017bcc:	24000084 	.word	0x24000084
 8017bd0:	2400f48c 	.word	0x2400f48c
 8017bd4:	2400f480 	.word	0x2400f480

08017bd8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017bd8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8017bdc:	3b01      	subs	r3, #1
 8017bde:	b29b      	uxth	r3, r3
 8017be0:	428b      	cmp	r3, r1
 8017be2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8017be6:	b510      	push	{r4, lr}
 8017be8:	d908      	bls.n	8017bfc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8017bea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8017bee:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017bf2:	681a      	ldr	r2, [r3, #0]
 8017bf4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8017bf8:	685a      	ldr	r2, [r3, #4]
 8017bfa:	6062      	str	r2, [r4, #4]
 8017bfc:	bd10      	pop	{r4, pc}
	...

08017c00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c04:	b08f      	sub	sp, #60	; 0x3c
 8017c06:	4b94      	ldr	r3, [pc, #592]	; (8017e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8017c08:	4683      	mov	fp, r0
 8017c0a:	ac0a      	add	r4, sp, #40	; 0x28
 8017c0c:	e884 0006 	stmia.w	r4, {r1, r2}
 8017c10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017c14:	4620      	mov	r0, r4
 8017c16:	4b91      	ldr	r3, [pc, #580]	; (8017e5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8017c18:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017c1c:	f7ff fec5 	bl	80179aa <_ZN8touchgfx4Rect10restrictToEss>
 8017c20:	4620      	mov	r0, r4
 8017c22:	f7fb f966 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c26:	2800      	cmp	r0, #0
 8017c28:	d16a      	bne.n	8017d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017c2a:	9403      	str	r4, [sp, #12]
 8017c2c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8017c30:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8017c34:	2400      	movs	r4, #0
 8017c36:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8017c3a:	9301      	str	r3, [sp, #4]
 8017c3c:	36a0      	adds	r6, #160	; 0xa0
 8017c3e:	42a5      	cmp	r5, r4
 8017c40:	d00d      	beq.n	8017c5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8017c42:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8017c46:	9803      	ldr	r0, [sp, #12]
 8017c48:	f7ff ff00 	bl	8017a4c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017c4c:	b128      	cbz	r0, 8017c5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8017c4e:	1e69      	subs	r1, r5, #1
 8017c50:	9801      	ldr	r0, [sp, #4]
 8017c52:	1b09      	subs	r1, r1, r4
 8017c54:	b289      	uxth	r1, r1
 8017c56:	f7ff ffbf 	bl	8017bd8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017c5a:	3401      	adds	r4, #1
 8017c5c:	e7ef      	b.n	8017c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 8017c5e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8017c62:	1e7b      	subs	r3, r7, #1
 8017c64:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8017c68:	9704      	str	r7, [sp, #16]
 8017c6a:	9302      	str	r3, [sp, #8]
 8017c6c:	2400      	movs	r4, #0
 8017c6e:	4655      	mov	r5, sl
 8017c70:	9705      	str	r7, [sp, #20]
 8017c72:	4626      	mov	r6, r4
 8017c74:	9b05      	ldr	r3, [sp, #20]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d078      	beq.n	8017d6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 8017c7a:	9903      	ldr	r1, [sp, #12]
 8017c7c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8017c80:	f7fd ff58 	bl	8015b34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017c84:	b360      	cbz	r0, 8017ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017c86:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8017c8a:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8017c8e:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8017c92:	45e6      	cmp	lr, ip
 8017c94:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8017c98:	db35      	blt.n	8017d06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017c9a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017c9e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017ca2:	4472      	add	r2, lr
 8017ca4:	4463      	add	r3, ip
 8017ca6:	b212      	sxth	r2, r2
 8017ca8:	b21b      	sxth	r3, r3
 8017caa:	429a      	cmp	r2, r3
 8017cac:	dc2b      	bgt.n	8017d06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017cae:	fa1f f288 	uxth.w	r2, r8
 8017cb2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017cb6:	45c1      	cmp	r9, r8
 8017cb8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017cbc:	4413      	add	r3, r2
 8017cbe:	fa1f fc89 	uxth.w	ip, r9
 8017cc2:	b29b      	uxth	r3, r3
 8017cc4:	fa0f fe83 	sxth.w	lr, r3
 8017cc8:	db0f      	blt.n	8017cea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8017cca:	eba3 030c 	sub.w	r3, r3, ip
 8017cce:	1ac9      	subs	r1, r1, r3
 8017cd0:	b209      	sxth	r1, r1
 8017cd2:	2900      	cmp	r1, #0
 8017cd4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017cd8:	dd12      	ble.n	8017d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017cda:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8017cde:	4604      	mov	r4, r0
 8017ce0:	9b05      	ldr	r3, [sp, #20]
 8017ce2:	3d08      	subs	r5, #8
 8017ce4:	3b01      	subs	r3, #1
 8017ce6:	9305      	str	r3, [sp, #20]
 8017ce8:	e7c4      	b.n	8017c74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8017cea:	4461      	add	r1, ip
 8017cec:	b209      	sxth	r1, r1
 8017cee:	4571      	cmp	r1, lr
 8017cf0:	dc3a      	bgt.n	8017d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017cf2:	eba2 020c 	sub.w	r2, r2, ip
 8017cf6:	b212      	sxth	r2, r2
 8017cf8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8017cfc:	2a00      	cmp	r2, #0
 8017cfe:	dcee      	bgt.n	8017cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017d00:	b00f      	add	sp, #60	; 0x3c
 8017d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d06:	45c1      	cmp	r9, r8
 8017d08:	db2e      	blt.n	8017d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017d0a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8017d0e:	4499      	add	r9, r3
 8017d10:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8017d14:	4498      	add	r8, r3
 8017d16:	fa0f f989 	sxth.w	r9, r9
 8017d1a:	fa0f f888 	sxth.w	r8, r8
 8017d1e:	45c1      	cmp	r9, r8
 8017d20:	dc22      	bgt.n	8017d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017d22:	fa1f f28c 	uxth.w	r2, ip
 8017d26:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8017d2a:	45e6      	cmp	lr, ip
 8017d2c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017d30:	4413      	add	r3, r2
 8017d32:	fa1f f88e 	uxth.w	r8, lr
 8017d36:	b29b      	uxth	r3, r3
 8017d38:	fa0f f983 	sxth.w	r9, r3
 8017d3c:	db0a      	blt.n	8017d54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 8017d3e:	eba3 0308 	sub.w	r3, r3, r8
 8017d42:	1ac9      	subs	r1, r1, r3
 8017d44:	b209      	sxth	r1, r1
 8017d46:	2900      	cmp	r1, #0
 8017d48:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8017d4c:	ddd8      	ble.n	8017d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017d4e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8017d52:	e7c4      	b.n	8017cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017d54:	4441      	add	r1, r8
 8017d56:	b209      	sxth	r1, r1
 8017d58:	4549      	cmp	r1, r9
 8017d5a:	dc05      	bgt.n	8017d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017d5c:	eba2 0208 	sub.w	r2, r2, r8
 8017d60:	b212      	sxth	r2, r2
 8017d62:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017d66:	e7c9      	b.n	8017cfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8017d68:	4606      	mov	r6, r0
 8017d6a:	e7b9      	b.n	8017ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8017d6c:	2c00      	cmp	r4, #0
 8017d6e:	f47f af7d 	bne.w	8017c6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8017d72:	2e00      	cmp	r6, #0
 8017d74:	f000 81e1 	beq.w	801813a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8017d78:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8017d7c:	4655      	mov	r5, sl
 8017d7e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8017d82:	b2b9      	uxth	r1, r7
 8017d84:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017d88:	b2b3      	uxth	r3, r6
 8017d8a:	9105      	str	r1, [sp, #20]
 8017d8c:	9805      	ldr	r0, [sp, #20]
 8017d8e:	441a      	add	r2, r3
 8017d90:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8017d94:	b292      	uxth	r2, r2
 8017d96:	4401      	add	r1, r0
 8017d98:	fa0f f882 	sxth.w	r8, r2
 8017d9c:	b289      	uxth	r1, r1
 8017d9e:	9106      	str	r1, [sp, #24]
 8017da0:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8017da4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8017da8:	9b04      	ldr	r3, [sp, #16]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d058      	beq.n	8017e60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8017dae:	9903      	ldr	r1, [sp, #12]
 8017db0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8017db4:	f7fd febe 	bl	8015b34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017db8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017dbc:	b1d8      	cbz	r0, 8017df6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017dbe:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8017dc2:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8017dc6:	4576      	cmp	r6, lr
 8017dc8:	dc26      	bgt.n	8017e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8017dca:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8017dce:	44f4      	add	ip, lr
 8017dd0:	fa0f fc8c 	sxth.w	ip, ip
 8017dd4:	45e0      	cmp	r8, ip
 8017dd6:	db1f      	blt.n	8017e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8017dd8:	428f      	cmp	r7, r1
 8017dda:	fa1f fc81 	uxth.w	ip, r1
 8017dde:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8017de2:	dc0f      	bgt.n	8017e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8017de4:	9806      	ldr	r0, [sp, #24]
 8017de6:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8017dea:	eba0 0c0c 	sub.w	ip, r0, ip
 8017dee:	eba1 010c 	sub.w	r1, r1, ip
 8017df2:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8017df6:	4620      	mov	r0, r4
 8017df8:	9904      	ldr	r1, [sp, #16]
 8017dfa:	3d08      	subs	r5, #8
 8017dfc:	4604      	mov	r4, r0
 8017dfe:	3901      	subs	r1, #1
 8017e00:	9104      	str	r1, [sp, #16]
 8017e02:	e7cf      	b.n	8017da4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8017e04:	4461      	add	r1, ip
 8017e06:	b209      	sxth	r1, r1
 8017e08:	4549      	cmp	r1, r9
 8017e0a:	dcf5      	bgt.n	8017df8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017e0c:	9905      	ldr	r1, [sp, #20]
 8017e0e:	eba1 0c0c 	sub.w	ip, r1, ip
 8017e12:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8017e16:	e7ee      	b.n	8017df6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017e18:	428f      	cmp	r7, r1
 8017e1a:	dced      	bgt.n	8017df8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017e1c:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8017e20:	4461      	add	r1, ip
 8017e22:	b209      	sxth	r1, r1
 8017e24:	4589      	cmp	r9, r1
 8017e26:	dbe7      	blt.n	8017df8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017e28:	4576      	cmp	r6, lr
 8017e2a:	fa1f fc8e 	uxth.w	ip, lr
 8017e2e:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8017e32:	dc08      	bgt.n	8017e46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8017e34:	eba2 0c0c 	sub.w	ip, r2, ip
 8017e38:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8017e3c:	eba1 010c 	sub.w	r1, r1, ip
 8017e40:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8017e44:	e7d7      	b.n	8017df6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017e46:	4461      	add	r1, ip
 8017e48:	b209      	sxth	r1, r1
 8017e4a:	4588      	cmp	r8, r1
 8017e4c:	dbd4      	blt.n	8017df8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8017e4e:	eba3 0c0c 	sub.w	ip, r3, ip
 8017e52:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8017e56:	e7ce      	b.n	8017df6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8017e58:	2400f436 	.word	0x2400f436
 8017e5c:	2400f434 	.word	0x2400f434
 8017e60:	2c00      	cmp	r4, #0
 8017e62:	f000 816a 	beq.w	801813a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8017e66:	9b02      	ldr	r3, [sp, #8]
 8017e68:	3301      	adds	r3, #1
 8017e6a:	f000 8166 	beq.w	801813a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8017e6e:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8017e72:	9803      	ldr	r0, [sp, #12]
 8017e74:	4621      	mov	r1, r4
 8017e76:	f7ff fde9 	bl	8017a4c <_ZNK8touchgfx4Rect8includesERKS0_>
 8017e7a:	b120      	cbz	r0, 8017e86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8017e7c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8017e80:	9801      	ldr	r0, [sp, #4]
 8017e82:	f7ff fea9 	bl	8017bd8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017e86:	9903      	ldr	r1, [sp, #12]
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f7fd fe53 	bl	8015b34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017e8e:	2800      	cmp	r0, #0
 8017e90:	f000 809b 	beq.w	8017fca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8017e94:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8017e98:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 8017e9c:	b281      	uxth	r1, r0
 8017e9e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8017ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ea4:	eb01 0c03 	add.w	ip, r1, r3
 8017ea8:	b2ab      	uxth	r3, r5
 8017eaa:	4285      	cmp	r5, r0
 8017eac:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8017eb0:	fa1f f98c 	uxth.w	r9, ip
 8017eb4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8017eb8:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8017ebc:	eb03 040c 	add.w	r4, r3, ip
 8017ec0:	b2a4      	uxth	r4, r4
 8017ec2:	9405      	str	r4, [sp, #20]
 8017ec4:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8017ec8:	9404      	str	r4, [sp, #16]
 8017eca:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 8017ece:	f340 809a 	ble.w	8018006 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8017ed2:	1a5b      	subs	r3, r3, r1
 8017ed4:	4596      	cmp	lr, r2
 8017ed6:	fa0f f589 	sxth.w	r5, r9
 8017eda:	b29b      	uxth	r3, r3
 8017edc:	b21e      	sxth	r6, r3
 8017ede:	dd2e      	ble.n	8017f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8017ee0:	9f02      	ldr	r7, [sp, #8]
 8017ee2:	fa1f fe8e 	uxth.w	lr, lr
 8017ee6:	b292      	uxth	r2, r2
 8017ee8:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8017eec:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017ef0:	9f04      	ldr	r7, [sp, #16]
 8017ef2:	ebae 0102 	sub.w	r1, lr, r2
 8017ef6:	4486      	add	lr, r0
 8017ef8:	1b7f      	subs	r7, r7, r5
 8017efa:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 8017efe:	b289      	uxth	r1, r1
 8017f00:	442a      	add	r2, r5
 8017f02:	fa0f fe8e 	sxth.w	lr, lr
 8017f06:	b20c      	sxth	r4, r1
 8017f08:	b212      	sxth	r2, r2
 8017f0a:	4367      	muls	r7, r4
 8017f0c:	ebae 0202 	sub.w	r2, lr, r2
 8017f10:	4372      	muls	r2, r6
 8017f12:	4297      	cmp	r7, r2
 8017f14:	db09      	blt.n	8017f2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8017f16:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8017f1a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 8017f1e:	449c      	add	ip, r3
 8017f20:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8017f24:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017f28:	e680      	b.n	8017c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f2a:	4401      	add	r1, r0
 8017f2c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8017f30:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8017f34:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017f38:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017f3c:	e676      	b.n	8017c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f3e:	9f04      	ldr	r7, [sp, #16]
 8017f40:	42bd      	cmp	r5, r7
 8017f42:	da27      	bge.n	8017f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8017f44:	9902      	ldr	r1, [sp, #8]
 8017f46:	1b7f      	subs	r7, r7, r5
 8017f48:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8017f4c:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8017f50:	eb04 010e 	add.w	r1, r4, lr
 8017f54:	fa1f f881 	uxth.w	r8, r1
 8017f58:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 8017f5c:	4411      	add	r1, r2
 8017f5e:	fa0f f988 	sxth.w	r9, r8
 8017f62:	eba2 020e 	sub.w	r2, r2, lr
 8017f66:	eba1 0108 	sub.w	r1, r1, r8
 8017f6a:	4372      	muls	r2, r6
 8017f6c:	b289      	uxth	r1, r1
 8017f6e:	fa0f f881 	sxth.w	r8, r1
 8017f72:	fb08 f707 	mul.w	r7, r8, r7
 8017f76:	42ba      	cmp	r2, r7
 8017f78:	dc06      	bgt.n	8017f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8017f7a:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 8017f7e:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8017f82:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8017f86:	e7ca      	b.n	8017f1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8017f88:	4421      	add	r1, r4
 8017f8a:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 8017f8e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017f92:	e64b      	b.n	8017c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017f94:	9d05      	ldr	r5, [sp, #20]
 8017f96:	2c06      	cmp	r4, #6
 8017f98:	eba9 0505 	sub.w	r5, r9, r5
 8017f9c:	b2ad      	uxth	r5, r5
 8017f9e:	fa0f fe85 	sxth.w	lr, r5
 8017fa2:	d818      	bhi.n	8017fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8017fa4:	9b04      	ldr	r3, [sp, #16]
 8017fa6:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 8017faa:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8017fae:	1c63      	adds	r3, r4, #1
 8017fb0:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8017fb4:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8017fb8:	9b01      	ldr	r3, [sp, #4]
 8017fba:	9d01      	ldr	r5, [sp, #4]
 8017fbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017fc0:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8017fc4:	805a      	strh	r2, [r3, #2]
 8017fc6:	809e      	strh	r6, [r3, #4]
 8017fc8:	80d9      	strh	r1, [r3, #6]
 8017fca:	9b02      	ldr	r3, [sp, #8]
 8017fcc:	f1aa 0a08 	sub.w	sl, sl, #8
 8017fd0:	3b01      	subs	r3, #1
 8017fd2:	9302      	str	r3, [sp, #8]
 8017fd4:	e747      	b.n	8017e66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8017fd6:	9a02      	ldr	r2, [sp, #8]
 8017fd8:	45b6      	cmp	lr, r6
 8017fda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017fde:	db0d      	blt.n	8017ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8017fe0:	449c      	add	ip, r3
 8017fe2:	445a      	add	r2, fp
 8017fe4:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8017fe8:	fa1f fc8c 	uxth.w	ip, ip
 8017fec:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8017ff0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017ff4:	448c      	add	ip, r1
 8017ff6:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8017ffa:	e617      	b.n	8017c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017ffc:	445a      	add	r2, fp
 8017ffe:	44ac      	add	ip, r5
 8018000:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8018004:	e78e      	b.n	8017f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8018006:	fa1f f18e 	uxth.w	r1, lr
 801800a:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801800e:	b293      	uxth	r3, r2
 8018010:	4596      	cmp	lr, r2
 8018012:	eb01 0806 	add.w	r8, r1, r6
 8018016:	9306      	str	r3, [sp, #24]
 8018018:	fa1f f888 	uxth.w	r8, r8
 801801c:	9f06      	ldr	r7, [sp, #24]
 801801e:	fa0f f388 	sxth.w	r3, r8
 8018022:	9307      	str	r3, [sp, #28]
 8018024:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8018028:	443b      	add	r3, r7
 801802a:	b29b      	uxth	r3, r3
 801802c:	9308      	str	r3, [sp, #32]
 801802e:	da25      	bge.n	801807c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8018030:	9905      	ldr	r1, [sp, #20]
 8018032:	eba3 0308 	sub.w	r3, r3, r8
 8018036:	eba2 020e 	sub.w	r2, r2, lr
 801803a:	1b40      	subs	r0, r0, r5
 801803c:	eba9 0401 	sub.w	r4, r9, r1
 8018040:	b29b      	uxth	r3, r3
 8018042:	b2a4      	uxth	r4, r4
 8018044:	b219      	sxth	r1, r3
 8018046:	fa0f f984 	sxth.w	r9, r4
 801804a:	4348      	muls	r0, r1
 801804c:	fb09 f202 	mul.w	r2, r9, r2
 8018050:	4282      	cmp	r2, r0
 8018052:	9a02      	ldr	r2, [sp, #8]
 8018054:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018058:	445a      	add	r2, fp
 801805a:	dc06      	bgt.n	801806a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801805c:	9b07      	ldr	r3, [sp, #28]
 801805e:	44a4      	add	ip, r4
 8018060:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8018064:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8018068:	e75c      	b.n	8017f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801806a:	9904      	ldr	r1, [sp, #16]
 801806c:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8018070:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8018074:	4433      	add	r3, r6
 8018076:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801807a:	e5d7      	b.n	8017c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801807c:	9f06      	ldr	r7, [sp, #24]
 801807e:	9b04      	ldr	r3, [sp, #16]
 8018080:	1bc9      	subs	r1, r1, r7
 8018082:	fa0f f789 	sxth.w	r7, r9
 8018086:	b289      	uxth	r1, r1
 8018088:	429f      	cmp	r7, r3
 801808a:	fa0f fe81 	sxth.w	lr, r1
 801808e:	dd22      	ble.n	80180d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 8018090:	9a05      	ldr	r2, [sp, #20]
 8018092:	1b40      	subs	r0, r0, r5
 8018094:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018098:	eba9 0202 	sub.w	r2, r9, r2
 801809c:	9d07      	ldr	r5, [sp, #28]
 801809e:	fb0e f000 	mul.w	r0, lr, r0
 80180a2:	b292      	uxth	r2, r2
 80180a4:	eba5 0a03 	sub.w	sl, r5, r3
 80180a8:	9b02      	ldr	r3, [sp, #8]
 80180aa:	b214      	sxth	r4, r2
 80180ac:	00db      	lsls	r3, r3, #3
 80180ae:	fb04 fa0a 	mul.w	sl, r4, sl
 80180b2:	445b      	add	r3, fp
 80180b4:	4550      	cmp	r0, sl
 80180b6:	db03      	blt.n	80180c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 80180b8:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 80180bc:	4494      	add	ip, r2
 80180be:	e731      	b.n	8017f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80180c0:	9a04      	ldr	r2, [sp, #16]
 80180c2:	4431      	add	r1, r6
 80180c4:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 80180c8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80180cc:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80180d0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80180d4:	e75b      	b.n	8017f8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 80180d6:	9b08      	ldr	r3, [sp, #32]
 80180d8:	2c06      	cmp	r4, #6
 80180da:	eba3 0308 	sub.w	r3, r3, r8
 80180de:	b29b      	uxth	r3, r3
 80180e0:	b21d      	sxth	r5, r3
 80180e2:	d813      	bhi.n	801810c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 80180e4:	9b07      	ldr	r3, [sp, #28]
 80180e6:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 80180ea:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 80180ee:	1c63      	adds	r3, r4, #1
 80180f0:	9901      	ldr	r1, [sp, #4]
 80180f2:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80180f6:	9b01      	ldr	r3, [sp, #4]
 80180f8:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 80180fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018100:	805a      	strh	r2, [r3, #2]
 8018102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018104:	f8a3 e006 	strh.w	lr, [r3, #6]
 8018108:	809a      	strh	r2, [r3, #4]
 801810a:	e75e      	b.n	8017fca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801810c:	9802      	ldr	r0, [sp, #8]
 801810e:	4575      	cmp	r5, lr
 8018110:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8018114:	db0d      	blt.n	8018132 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8018116:	4431      	add	r1, r6
 8018118:	9b06      	ldr	r3, [sp, #24]
 801811a:	4458      	add	r0, fp
 801811c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8018120:	b289      	uxth	r1, r1
 8018122:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8018126:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801812a:	4419      	add	r1, r3
 801812c:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8018130:	e57c      	b.n	8017c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018132:	4458      	add	r0, fp
 8018134:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8018138:	e79c      	b.n	8018074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801813a:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801813e:	2e07      	cmp	r6, #7
 8018140:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8018144:	d812      	bhi.n	801816c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8018146:	1c75      	adds	r5, r6, #1
 8018148:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801814c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8018150:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8018154:	9d01      	ldr	r5, [sp, #4]
 8018156:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801815a:	442c      	add	r4, r5
 801815c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8018160:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8018164:	8061      	strh	r1, [r4, #2]
 8018166:	80a2      	strh	r2, [r4, #4]
 8018168:	80e3      	strh	r3, [r4, #6]
 801816a:	e5c9      	b.n	8017d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801816c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8018170:	3e01      	subs	r6, #1
 8018172:	445c      	add	r4, fp
 8018174:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8018178:	f04f 37ff 	mov.w	r7, #4294967295
 801817c:	2500      	movs	r5, #0
 801817e:	9305      	str	r3, [sp, #20]
 8018180:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8018184:	1e72      	subs	r2, r6, #1
 8018186:	9302      	str	r3, [sp, #8]
 8018188:	4691      	mov	r9, r2
 801818a:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801818e:	9304      	str	r3, [sp, #16]
 8018190:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8018194:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018198:	6818      	ldr	r0, [r3, #0]
 801819a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801819e:	9207      	str	r2, [sp, #28]
 80181a0:	bf16      	itet	ne
 80181a2:	9905      	ldrne	r1, [sp, #20]
 80181a4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80181a8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80181ac:	9306      	str	r3, [sp, #24]
 80181ae:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80181b2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80181b6:	fb18 f801 	smulbb	r8, r8, r1
 80181ba:	6859      	ldr	r1, [r3, #4]
 80181bc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80181c0:	4671      	mov	r1, lr
 80181c2:	a80c      	add	r0, sp, #48	; 0x30
 80181c4:	f7fb fbda 	bl	801397c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80181c8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80181cc:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80181d0:	f04f 0c08 	mov.w	ip, #8
 80181d4:	9b04      	ldr	r3, [sp, #16]
 80181d6:	9a02      	ldr	r2, [sp, #8]
 80181d8:	fb10 f001 	smulbb	r0, r0, r1
 80181dc:	fb02 8803 	mla	r8, r2, r3, r8
 80181e0:	eba0 0108 	sub.w	r1, r0, r8
 80181e4:	fb90 f0fc 	sdiv	r0, r0, ip
 80181e8:	4288      	cmp	r0, r1
 80181ea:	dc20      	bgt.n	801822e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 80181ec:	4551      	cmp	r1, sl
 80181ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80181f2:	da03      	bge.n	80181fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80181f4:	b1d9      	cbz	r1, 801822e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 80181f6:	468a      	mov	sl, r1
 80181f8:	464f      	mov	r7, r9
 80181fa:	4635      	mov	r5, r6
 80181fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8018200:	f119 0f02 	cmn.w	r9, #2
 8018204:	d1c6      	bne.n	8018194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8018206:	4616      	mov	r6, r2
 8018208:	3201      	adds	r2, #1
 801820a:	f1a4 0408 	sub.w	r4, r4, #8
 801820e:	d1b7      	bne.n	8018180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8018210:	9b01      	ldr	r3, [sp, #4]
 8018212:	b2ac      	uxth	r4, r5
 8018214:	00ed      	lsls	r5, r5, #3
 8018216:	1958      	adds	r0, r3, r5
 8018218:	1c7b      	adds	r3, r7, #1
 801821a:	d10b      	bne.n	8018234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801821c:	4601      	mov	r1, r0
 801821e:	9803      	ldr	r0, [sp, #12]
 8018220:	f7fb fbac 	bl	801397c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018224:	4621      	mov	r1, r4
 8018226:	9801      	ldr	r0, [sp, #4]
 8018228:	f7ff fcd6 	bl	8017bd8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801822c:	e4fe      	b.n	8017c2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801822e:	464f      	mov	r7, r9
 8018230:	4635      	mov	r5, r6
 8018232:	e7ed      	b.n	8018210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8018234:	9b01      	ldr	r3, [sp, #4]
 8018236:	00ff      	lsls	r7, r7, #3
 8018238:	445d      	add	r5, fp
 801823a:	19d9      	adds	r1, r3, r7
 801823c:	445f      	add	r7, fp
 801823e:	f7fb fb9d 	bl	801397c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018242:	9b03      	ldr	r3, [sp, #12]
 8018244:	cb03      	ldmia	r3!, {r0, r1}
 8018246:	9b03      	ldr	r3, [sp, #12]
 8018248:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801824c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8018250:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8018254:	6869      	ldr	r1, [r5, #4]
 8018256:	c303      	stmia	r3!, {r0, r1}
 8018258:	e7e4      	b.n	8018224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801825a:	bf00      	nop

0801825c <_ZN8touchgfx11Application10invalidateEv>:
 801825c:	4b09      	ldr	r3, [pc, #36]	; (8018284 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801825e:	b082      	sub	sp, #8
 8018260:	2100      	movs	r1, #0
 8018262:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018266:	4b08      	ldr	r3, [pc, #32]	; (8018288 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8018268:	9100      	str	r1, [sp, #0]
 801826a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801826e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018272:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018276:	ab02      	add	r3, sp, #8
 8018278:	e913 0006 	ldmdb	r3, {r1, r2}
 801827c:	b002      	add	sp, #8
 801827e:	f7ff bcbf 	b.w	8017c00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018282:	bf00      	nop
 8018284:	2400f434 	.word	0x2400f434
 8018288:	2400f436 	.word	0x2400f436

0801828c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018290:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8018294:	b09b      	sub	sp, #108	; 0x6c
 8018296:	4604      	mov	r4, r0
 8018298:	4630      	mov	r0, r6
 801829a:	f7fa fe2a 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801829e:	4605      	mov	r5, r0
 80182a0:	b940      	cbnz	r0, 80182b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80182a2:	4620      	mov	r0, r4
 80182a4:	e896 0006 	ldmia.w	r6, {r1, r2}
 80182a8:	f7ff fcaa 	bl	8017c00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80182ac:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80182b0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80182b4:	4bc8      	ldr	r3, [pc, #800]	; (80185d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d03e      	beq.n	801833a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80182bc:	4dc7      	ldr	r5, [pc, #796]	; (80185dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80182be:	4628      	mov	r0, r5
 80182c0:	f7fa fe17 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80182c4:	4606      	mov	r6, r0
 80182c6:	2800      	cmp	r0, #0
 80182c8:	d137      	bne.n	801833a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80182ca:	4628      	mov	r0, r5
 80182cc:	f7ff fa2e 	bl	801772c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80182d0:	6829      	ldr	r1, [r5, #0]
 80182d2:	686a      	ldr	r2, [r5, #4]
 80182d4:	4620      	mov	r0, r4
 80182d6:	f7ff fc93 	bl	8017c00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80182da:	802e      	strh	r6, [r5, #0]
 80182dc:	806e      	strh	r6, [r5, #2]
 80182de:	80ae      	strh	r6, [r5, #4]
 80182e0:	80ee      	strh	r6, [r5, #6]
 80182e2:	ae09      	add	r6, sp, #36	; 0x24
 80182e4:	4630      	mov	r0, r6
 80182e6:	f7ff fc23 	bl	8017b30 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80182ea:	4abd      	ldr	r2, [pc, #756]	; (80185e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80182ec:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80182f0:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80182f4:	8815      	ldrh	r5, [r2, #0]
 80182f6:	9202      	str	r2, [sp, #8]
 80182f8:	462b      	mov	r3, r5
 80182fa:	429f      	cmp	r7, r3
 80182fc:	d924      	bls.n	8018348 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 80182fe:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8018302:	2907      	cmp	r1, #7
 8018304:	d816      	bhi.n	8018334 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8018306:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801830a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801830e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8018312:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8018316:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801831a:	1c4a      	adds	r2, r1, #1
 801831c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8018320:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8018324:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8018328:	f8a2 9002 	strh.w	r9, [r2, #2]
 801832c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018330:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018334:	3301      	adds	r3, #1
 8018336:	b29b      	uxth	r3, r3
 8018338:	e7df      	b.n	80182fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801833a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801833e:	2b00      	cmp	r3, #0
 8018340:	d1cf      	bne.n	80182e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8018342:	b01b      	add	sp, #108	; 0x6c
 8018344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018348:	462f      	mov	r7, r5
 801834a:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801834e:	42bb      	cmp	r3, r7
 8018350:	d90b      	bls.n	801836a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8018352:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8018356:	3701      	adds	r7, #1
 8018358:	4620      	mov	r0, r4
 801835a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801835e:	b2bf      	uxth	r7, r7
 8018360:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8018364:	f7ff fc4c 	bl	8017c00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018368:	e7ef      	b.n	801834a <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801836a:	4a9e      	ldr	r2, [pc, #632]	; (80185e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801836c:	6813      	ldr	r3, [r2, #0]
 801836e:	4690      	mov	r8, r2
 8018370:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018374:	2b01      	cmp	r3, #1
 8018376:	f040 80e4 	bne.w	8018542 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801837a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801837e:	4629      	mov	r1, r5
 8018380:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8018384:	2500      	movs	r5, #0
 8018386:	33aa      	adds	r3, #170	; 0xaa
 8018388:	428f      	cmp	r7, r1
 801838a:	f103 0308 	add.w	r3, r3, #8
 801838e:	dd0a      	ble.n	80183a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8018390:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8018394:	3101      	adds	r1, #1
 8018396:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801839a:	4402      	add	r2, r0
 801839c:	b212      	sxth	r2, r2
 801839e:	4295      	cmp	r5, r2
 80183a0:	bfb8      	it	lt
 80183a2:	4615      	movlt	r5, r2
 80183a4:	e7f0      	b.n	8018388 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80183a6:	4b90      	ldr	r3, [pc, #576]	; (80185e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80183a8:	f8df b238 	ldr.w	fp, [pc, #568]	; 80185e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 80183ac:	881b      	ldrh	r3, [r3, #0]
 80183ae:	46d8      	mov	r8, fp
 80183b0:	2b0f      	cmp	r3, #15
 80183b2:	bf8c      	ite	hi
 80183b4:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80183b8:	f04f 0a01 	movls.w	sl, #1
 80183bc:	2300      	movs	r3, #0
 80183be:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80183c2:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80183c6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80183ca:	4438      	add	r0, r7
 80183cc:	b207      	sxth	r7, r0
 80183ce:	f8db 0000 	ldr.w	r0, [fp]
 80183d2:	42bd      	cmp	r5, r7
 80183d4:	6803      	ldr	r3, [r0, #0]
 80183d6:	f340 8084 	ble.w	80184e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80183da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80183de:	4798      	blx	r3
 80183e0:	eb07 030a 	add.w	r3, r7, sl
 80183e4:	4298      	cmp	r0, r3
 80183e6:	da07      	bge.n	80183f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80183e8:	4285      	cmp	r5, r0
 80183ea:	dd05      	ble.n	80183f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80183ec:	4287      	cmp	r7, r0
 80183ee:	dd6d      	ble.n	80184cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80183f0:	2f00      	cmp	r7, #0
 80183f2:	dd6b      	ble.n	80184cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80183f4:	4628      	mov	r0, r5
 80183f6:	e004      	b.n	8018402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 80183f8:	4287      	cmp	r7, r0
 80183fa:	dcfb      	bgt.n	80183f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 80183fc:	42a8      	cmp	r0, r5
 80183fe:	bfa8      	it	ge
 8018400:	4628      	movge	r0, r5
 8018402:	4b7a      	ldr	r3, [pc, #488]	; (80185ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8018404:	1bc0      	subs	r0, r0, r7
 8018406:	2200      	movs	r2, #0
 8018408:	f8ad 7016 	strh.w	r7, [sp, #22]
 801840c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018410:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018414:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018418:	9b02      	ldr	r3, [sp, #8]
 801841a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801841e:	881f      	ldrh	r7, [r3, #0]
 8018420:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8018424:	42bb      	cmp	r3, r7
 8018426:	d9cc      	bls.n	80183c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8018428:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801842c:	ab07      	add	r3, sp, #28
 801842e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018432:	6851      	ldr	r1, [r2, #4]
 8018434:	c303      	stmia	r3!, {r0, r1}
 8018436:	a905      	add	r1, sp, #20
 8018438:	a807      	add	r0, sp, #28
 801843a:	f7fd fb7b 	bl	8015b34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801843e:	2800      	cmp	r0, #0
 8018440:	d04c      	beq.n	80184dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8018442:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8018446:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801844a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801844e:	4686      	mov	lr, r0
 8018450:	4290      	cmp	r0, r2
 8018452:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8018456:	4448      	add	r0, r9
 8018458:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801845c:	bfb8      	it	lt
 801845e:	4696      	movlt	lr, r2
 8018460:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018464:	444a      	add	r2, r9
 8018466:	b280      	uxth	r0, r0
 8018468:	4299      	cmp	r1, r3
 801846a:	468c      	mov	ip, r1
 801846c:	b292      	uxth	r2, r2
 801846e:	9303      	str	r3, [sp, #12]
 8018470:	bfb8      	it	lt
 8018472:	469c      	movlt	ip, r3
 8018474:	b203      	sxth	r3, r0
 8018476:	fa0f f982 	sxth.w	r9, r2
 801847a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801847e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8018482:	454b      	cmp	r3, r9
 8018484:	bfb8      	it	lt
 8018486:	4602      	movlt	r2, r0
 8018488:	9b03      	ldr	r3, [sp, #12]
 801848a:	eba2 020e 	sub.w	r2, r2, lr
 801848e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018492:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8018496:	4411      	add	r1, r2
 8018498:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801849c:	4413      	add	r3, r2
 801849e:	b289      	uxth	r1, r1
 80184a0:	b29b      	uxth	r3, r3
 80184a2:	b208      	sxth	r0, r1
 80184a4:	b21a      	sxth	r2, r3
 80184a6:	4290      	cmp	r0, r2
 80184a8:	bfb8      	it	lt
 80184aa:	460b      	movlt	r3, r1
 80184ac:	eba3 030c 	sub.w	r3, r3, ip
 80184b0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80184b4:	a807      	add	r0, sp, #28
 80184b6:	f7fa fd1c 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80184ba:	b920      	cbnz	r0, 80184c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80184bc:	6823      	ldr	r3, [r4, #0]
 80184be:	a907      	add	r1, sp, #28
 80184c0:	4620      	mov	r0, r4
 80184c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184c4:	4798      	blx	r3
 80184c6:	3701      	adds	r7, #1
 80184c8:	b2bf      	uxth	r7, r7
 80184ca:	e7a9      	b.n	8018420 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80184cc:	f8d8 0000 	ldr.w	r0, [r8]
 80184d0:	2101      	movs	r1, #1
 80184d2:	6803      	ldr	r3, [r0, #0]
 80184d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80184d8:	4798      	blx	r3
 80184da:	e772      	b.n	80183c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 80184dc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80184e0:	e7e8      	b.n	80184b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80184e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184e4:	4798      	blx	r3
 80184e6:	4b42      	ldr	r3, [pc, #264]	; (80185f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	f43f af29 	beq.w	8018342 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80184f0:	2300      	movs	r3, #0
 80184f2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80184f6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80184fa:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 80184fe:	9b02      	ldr	r3, [sp, #8]
 8018500:	881b      	ldrh	r3, [r3, #0]
 8018502:	429d      	cmp	r5, r3
 8018504:	f67f af1d 	bls.w	8018342 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8018508:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801850c:	2907      	cmp	r1, #7
 801850e:	d815      	bhi.n	801853c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8018510:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8018514:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8018518:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801851c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8018520:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8018524:	1c4a      	adds	r2, r1, #1
 8018526:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801852a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801852e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8018532:	f8a2 e002 	strh.w	lr, [r2, #2]
 8018536:	f8a2 c004 	strh.w	ip, [r2, #4]
 801853a:	80d7      	strh	r7, [r2, #6]
 801853c:	3301      	adds	r3, #1
 801853e:	b29b      	uxth	r3, r3
 8018540:	e7df      	b.n	8018502 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8018542:	2b02      	cmp	r3, #2
 8018544:	f040 8135 	bne.w	80187b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8018548:	4b2a      	ldr	r3, [pc, #168]	; (80185f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801854a:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801854e:	781b      	ldrb	r3, [r3, #0]
 8018550:	2b01      	cmp	r3, #1
 8018552:	f000 809c 	beq.w	801868e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8018556:	9b02      	ldr	r3, [sp, #8]
 8018558:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801855c:	f8b3 b000 	ldrh.w	fp, [r3]
 8018560:	f10b 0b01 	add.w	fp, fp, #1
 8018564:	fa1f fb8b 	uxth.w	fp, fp
 8018568:	2a00      	cmp	r2, #0
 801856a:	d0bc      	beq.n	80184e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801856c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8018570:	4659      	mov	r1, fp
 8018572:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8018576:	f04f 0800 	mov.w	r8, #0
 801857a:	441d      	add	r5, r3
 801857c:	b22d      	sxth	r5, r5
 801857e:	b28b      	uxth	r3, r1
 8018580:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8018584:	429a      	cmp	r2, r3
 8018586:	f240 80c0 	bls.w	801870a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801858a:	4427      	add	r7, r4
 801858c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8018590:	4608      	mov	r0, r1
 8018592:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8018596:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801859a:	4563      	cmp	r3, ip
 801859c:	f340 80a2 	ble.w	80186e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80185a0:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 80185a4:	4465      	add	r5, ip
 80185a6:	b22d      	sxth	r5, r5
 80185a8:	429d      	cmp	r5, r3
 80185aa:	bfa8      	it	ge
 80185ac:	461d      	movge	r5, r3
 80185ae:	3101      	adds	r1, #1
 80185b0:	4680      	mov	r8, r0
 80185b2:	e7e4      	b.n	801857e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 80185b4:	d10b      	bne.n	80185ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 80185b6:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80185ba:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 80185be:	458c      	cmp	ip, r1
 80185c0:	bfb4      	ite	lt
 80185c2:	469c      	movlt	ip, r3
 80185c4:	46bc      	movge	ip, r7
 80185c6:	4572      	cmp	r2, lr
 80185c8:	bfb8      	it	lt
 80185ca:	4672      	movlt	r2, lr
 80185cc:	e087      	b.n	80186de <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 80185ce:	428a      	cmp	r2, r1
 80185d0:	46bc      	mov	ip, r7
 80185d2:	bfb8      	it	lt
 80185d4:	460a      	movlt	r2, r1
 80185d6:	e082      	b.n	80186de <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 80185d8:	2400f478 	.word	0x2400f478
 80185dc:	2400f484 	.word	0x2400f484
 80185e0:	24000084 	.word	0x24000084
 80185e4:	2400f440 	.word	0x2400f440
 80185e8:	2400f436 	.word	0x2400f436
 80185ec:	2400f434 	.word	0x2400f434
 80185f0:	2400f43e 	.word	0x2400f43e
 80185f4:	2400f438 	.word	0x2400f438
 80185f8:	1961      	adds	r1, r4, r5
 80185fa:	ab07      	add	r3, sp, #28
 80185fc:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8018600:	6849      	ldr	r1, [r1, #4]
 8018602:	c303      	stmia	r3!, {r0, r1}
 8018604:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018608:	a807      	add	r0, sp, #28
 801860a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801860e:	2b13      	cmp	r3, #19
 8018610:	440b      	add	r3, r1
 8018612:	bfd8      	it	le
 8018614:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8018618:	1a9b      	subs	r3, r3, r2
 801861a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801861e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018622:	f7ff f89d 	bl	8017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018626:	a807      	add	r0, sp, #28
 8018628:	f7fa fc63 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801862c:	bb78      	cbnz	r0, 801868e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801862e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8018632:	4425      	add	r5, r4
 8018634:	f8d8 0000 	ldr.w	r0, [r8]
 8018638:	f1bc 0f14 	cmp.w	ip, #20
 801863c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018640:	f8d0 e000 	ldr.w	lr, [r0]
 8018644:	bfa8      	it	ge
 8018646:	f04f 0c14 	movge.w	ip, #20
 801864a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801864e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018652:	fa1f fc8c 	uxth.w	ip, ip
 8018656:	f8cd c000 	str.w	ip, [sp]
 801865a:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801865e:	47d0      	blx	sl
 8018660:	4682      	mov	sl, r0
 8018662:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8018666:	a807      	add	r0, sp, #28
 8018668:	f7ff f860 	bl	801772c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801866c:	6823      	ldr	r3, [r4, #0]
 801866e:	4620      	mov	r0, r4
 8018670:	a907      	add	r1, sp, #28
 8018672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018674:	4798      	blx	r3
 8018676:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801867a:	eba0 000a 	sub.w	r0, r0, sl
 801867e:	b200      	sxth	r0, r0
 8018680:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8018684:	b918      	cbnz	r0, 801868e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8018686:	b2b9      	uxth	r1, r7
 8018688:	4648      	mov	r0, r9
 801868a:	f7ff faa5 	bl	8017bd8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801868e:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8018692:	f1bb 0f00 	cmp.w	fp, #0
 8018696:	f43f af26 	beq.w	80184e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801869a:	9b02      	ldr	r3, [sp, #8]
 801869c:	2700      	movs	r7, #0
 801869e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80186a2:	881b      	ldrh	r3, [r3, #0]
 80186a4:	3301      	adds	r3, #1
 80186a6:	b29b      	uxth	r3, r3
 80186a8:	b299      	uxth	r1, r3
 80186aa:	00fd      	lsls	r5, r7, #3
 80186ac:	458b      	cmp	fp, r1
 80186ae:	d9a3      	bls.n	80185f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 80186b0:	4425      	add	r5, r4
 80186b2:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80186b6:	469c      	mov	ip, r3
 80186b8:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80186bc:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80186c0:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80186c4:	4408      	add	r0, r1
 80186c6:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80186ca:	4471      	add	r1, lr
 80186cc:	b200      	sxth	r0, r0
 80186ce:	b209      	sxth	r1, r1
 80186d0:	4288      	cmp	r0, r1
 80186d2:	f6bf af6f 	bge.w	80185b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 80186d6:	4586      	cmp	lr, r0
 80186d8:	4672      	mov	r2, lr
 80186da:	bfb8      	it	lt
 80186dc:	4602      	movlt	r2, r0
 80186de:	3301      	adds	r3, #1
 80186e0:	4667      	mov	r7, ip
 80186e2:	e7e1      	b.n	80186a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 80186e4:	d10c      	bne.n	8018700 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 80186e6:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 80186ea:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 80186ee:	4287      	cmp	r7, r0
 80186f0:	bfb4      	ite	lt
 80186f2:	4608      	movlt	r0, r1
 80186f4:	4640      	movge	r0, r8
 80186f6:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 80186fa:	443b      	add	r3, r7
 80186fc:	b21b      	sxth	r3, r3
 80186fe:	e753      	b.n	80185a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8018700:	4565      	cmp	r5, ip
 8018702:	4640      	mov	r0, r8
 8018704:	bfa8      	it	ge
 8018706:	4665      	movge	r5, ip
 8018708:	e751      	b.n	80185ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801870a:	eb09 0007 	add.w	r0, r9, r7
 801870e:	4427      	add	r7, r4
 8018710:	9203      	str	r2, [sp, #12]
 8018712:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8018716:	f1ba 0f13 	cmp.w	sl, #19
 801871a:	bfde      	ittt	le
 801871c:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8018720:	4455      	addle	r5, sl
 8018722:	b22d      	sxthle	r5, r5
 8018724:	f7fa fbe5 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018728:	9a03      	ldr	r2, [sp, #12]
 801872a:	2800      	cmp	r0, #0
 801872c:	f47f af1c 	bne.w	8018568 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8018730:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8018734:	fa1f fa8a 	uxth.w	sl, sl
 8018738:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801873c:	1aad      	subs	r5, r5, r2
 801873e:	4829      	ldr	r0, [pc, #164]	; (80187e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8018740:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8018744:	2d14      	cmp	r5, #20
 8018746:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801874a:	6800      	ldr	r0, [r0, #0]
 801874c:	bfa8      	it	ge
 801874e:	2514      	movge	r5, #20
 8018750:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018754:	f8ad 201e 	strh.w	r2, [sp, #30]
 8018758:	b289      	uxth	r1, r1
 801875a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801875e:	b2ad      	uxth	r5, r5
 8018760:	f8d0 c000 	ldr.w	ip, [r0]
 8018764:	b292      	uxth	r2, r2
 8018766:	4555      	cmp	r5, sl
 8018768:	bf94      	ite	ls
 801876a:	9500      	strls	r5, [sp, #0]
 801876c:	f8cd a000 	strhi.w	sl, [sp]
 8018770:	b29b      	uxth	r3, r3
 8018772:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8018776:	47a8      	blx	r5
 8018778:	6823      	ldr	r3, [r4, #0]
 801877a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801877e:	a907      	add	r1, sp, #28
 8018780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018782:	4620      	mov	r0, r4
 8018784:	4798      	blx	r3
 8018786:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801878a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801878e:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8018792:	1a5b      	subs	r3, r3, r1
 8018794:	440a      	add	r2, r1
 8018796:	b21b      	sxth	r3, r3
 8018798:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801879c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	f47f aed8 	bne.w	8018556 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80187a6:	fa1f f188 	uxth.w	r1, r8
 80187aa:	4648      	mov	r0, r9
 80187ac:	f7ff fa14 	bl	8017bd8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80187b0:	e6d1      	b.n	8018556 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80187b2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80187b6:	42ab      	cmp	r3, r5
 80187b8:	f67f ae95 	bls.w	80184e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80187bc:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80187c0:	ab07      	add	r3, sp, #28
 80187c2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80187c6:	6851      	ldr	r1, [r2, #4]
 80187c8:	c303      	stmia	r3!, {r0, r1}
 80187ca:	a807      	add	r0, sp, #28
 80187cc:	f7fa fb91 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80187d0:	b920      	cbnz	r0, 80187dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 80187d2:	6823      	ldr	r3, [r4, #0]
 80187d4:	a907      	add	r1, sp, #28
 80187d6:	4620      	mov	r0, r4
 80187d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187da:	4798      	blx	r3
 80187dc:	3501      	adds	r5, #1
 80187de:	b2ad      	uxth	r5, r5
 80187e0:	e7e7      	b.n	80187b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80187e2:	bf00      	nop
 80187e4:	2400f440 	.word	0x2400f440

080187e8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80187e8:	4b03      	ldr	r3, [pc, #12]	; (80187f8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80187ea:	2200      	movs	r2, #0
 80187ec:	801a      	strh	r2, [r3, #0]
 80187ee:	805a      	strh	r2, [r3, #2]
 80187f0:	809a      	strh	r2, [r3, #4]
 80187f2:	80da      	strh	r2, [r3, #6]
 80187f4:	4770      	bx	lr
 80187f6:	bf00      	nop
 80187f8:	2400f484 	.word	0x2400f484

080187fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80187fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018800:	b09d      	sub	sp, #116	; 0x74
 8018802:	4606      	mov	r6, r0
 8018804:	4614      	mov	r4, r2
 8018806:	468a      	mov	sl, r1
 8018808:	a803      	add	r0, sp, #12
 801880a:	461d      	mov	r5, r3
 801880c:	f000 fd8b 	bl	8019326 <_ZN8touchgfx12TextProviderC1Ev>
 8018810:	6833      	ldr	r3, [r6, #0]
 8018812:	4630      	mov	r0, r6
 8018814:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8018818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801881a:	4798      	blx	r3
 801881c:	6833      	ldr	r3, [r6, #0]
 801881e:	4607      	mov	r7, r0
 8018820:	4630      	mov	r0, r6
 8018822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018824:	4798      	blx	r3
 8018826:	462a      	mov	r2, r5
 8018828:	2500      	movs	r5, #0
 801882a:	4621      	mov	r1, r4
 801882c:	9000      	str	r0, [sp, #0]
 801882e:	463b      	mov	r3, r7
 8018830:	462c      	mov	r4, r5
 8018832:	46a9      	mov	r9, r5
 8018834:	46a8      	mov	r8, r5
 8018836:	a803      	add	r0, sp, #12
 8018838:	f000 fdd0 	bl	80193dc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801883c:	2300      	movs	r3, #0
 801883e:	9302      	str	r3, [sp, #8]
 8018840:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018844:	429c      	cmp	r4, r3
 8018846:	d002      	beq.n	801884e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8018848:	455c      	cmp	r4, fp
 801884a:	bf18      	it	ne
 801884c:	4625      	movne	r5, r4
 801884e:	ab02      	add	r3, sp, #8
 8018850:	4632      	mov	r2, r6
 8018852:	4651      	mov	r1, sl
 8018854:	a803      	add	r0, sp, #12
 8018856:	f001 f8c7 	bl	80199e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801885a:	4604      	mov	r4, r0
 801885c:	b108      	cbz	r0, 8018862 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801885e:	280a      	cmp	r0, #10
 8018860:	d10a      	bne.n	8018878 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8018862:	45c1      	cmp	r9, r8
 8018864:	bf38      	it	cc
 8018866:	46c1      	movcc	r9, r8
 8018868:	f04f 0800 	mov.w	r8, #0
 801886c:	2c00      	cmp	r4, #0
 801886e:	d1e5      	bne.n	801883c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8018870:	4648      	mov	r0, r9
 8018872:	b01d      	add	sp, #116	; 0x74
 8018874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018878:	9a02      	ldr	r2, [sp, #8]
 801887a:	2a00      	cmp	r2, #0
 801887c:	d0de      	beq.n	801883c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801887e:	7b57      	ldrb	r7, [r2, #13]
 8018880:	4629      	mov	r1, r5
 8018882:	6833      	ldr	r3, [r6, #0]
 8018884:	007f      	lsls	r7, r7, #1
 8018886:	8894      	ldrh	r4, [r2, #4]
 8018888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801888a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801888e:	7a97      	ldrb	r7, [r2, #10]
 8018890:	4307      	orrs	r7, r0
 8018892:	4630      	mov	r0, r6
 8018894:	4798      	blx	r3
 8018896:	4438      	add	r0, r7
 8018898:	4480      	add	r8, r0
 801889a:	fa1f f888 	uxth.w	r8, r8
 801889e:	e7e5      	b.n	801886c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080188a0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80188a0:	b508      	push	{r3, lr}
 80188a2:	6803      	ldr	r3, [r0, #0]
 80188a4:	68db      	ldr	r3, [r3, #12]
 80188a6:	4798      	blx	r3
 80188a8:	b128      	cbz	r0, 80188b6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80188aa:	7b43      	ldrb	r3, [r0, #13]
 80188ac:	7a80      	ldrb	r0, [r0, #10]
 80188ae:	005b      	lsls	r3, r3, #1
 80188b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80188b4:	4318      	orrs	r0, r3
 80188b6:	bd08      	pop	{r3, pc}

080188b8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80188b8:	b40e      	push	{r1, r2, r3}
 80188ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188bc:	b09e      	sub	sp, #120	; 0x78
 80188be:	4605      	mov	r5, r0
 80188c0:	ab23      	add	r3, sp, #140	; 0x8c
 80188c2:	a805      	add	r0, sp, #20
 80188c4:	f853 4b04 	ldr.w	r4, [r3], #4
 80188c8:	9303      	str	r3, [sp, #12]
 80188ca:	f000 fd2c 	bl	8019326 <_ZN8touchgfx12TextProviderC1Ev>
 80188ce:	682b      	ldr	r3, [r5, #0]
 80188d0:	4628      	mov	r0, r5
 80188d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188d4:	4798      	blx	r3
 80188d6:	682b      	ldr	r3, [r5, #0]
 80188d8:	4606      	mov	r6, r0
 80188da:	4628      	mov	r0, r5
 80188dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80188de:	4798      	blx	r3
 80188e0:	4633      	mov	r3, r6
 80188e2:	4621      	mov	r1, r4
 80188e4:	ae1e      	add	r6, sp, #120	; 0x78
 80188e6:	2400      	movs	r4, #0
 80188e8:	9000      	str	r0, [sp, #0]
 80188ea:	9a03      	ldr	r2, [sp, #12]
 80188ec:	a805      	add	r0, sp, #20
 80188ee:	f000 fd75 	bl	80193dc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80188f2:	f846 4d68 	str.w	r4, [r6, #-104]!
 80188f6:	462a      	mov	r2, r5
 80188f8:	4633      	mov	r3, r6
 80188fa:	4621      	mov	r1, r4
 80188fc:	a805      	add	r0, sp, #20
 80188fe:	f001 f873 	bl	80199e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018902:	b300      	cbz	r0, 8018946 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8018904:	280a      	cmp	r0, #10
 8018906:	d01a      	beq.n	801893e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018908:	9f04      	ldr	r7, [sp, #16]
 801890a:	b1c7      	cbz	r7, 801893e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801890c:	7b78      	ldrb	r0, [r7, #13]
 801890e:	7a3b      	ldrb	r3, [r7, #8]
 8018910:	00c1      	lsls	r1, r0, #3
 8018912:	88aa      	ldrh	r2, [r5, #4]
 8018914:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018918:	4319      	orrs	r1, r3
 801891a:	0643      	lsls	r3, r0, #25
 801891c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018920:	bf48      	it	mi
 8018922:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018926:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801892a:	bf48      	it	mi
 801892c:	b219      	sxthmi	r1, r3
 801892e:	79fb      	ldrb	r3, [r7, #7]
 8018930:	4303      	orrs	r3, r0
 8018932:	4413      	add	r3, r2
 8018934:	1a5b      	subs	r3, r3, r1
 8018936:	b29b      	uxth	r3, r3
 8018938:	42a3      	cmp	r3, r4
 801893a:	bfc8      	it	gt
 801893c:	b21c      	sxthgt	r4, r3
 801893e:	4633      	mov	r3, r6
 8018940:	462a      	mov	r2, r5
 8018942:	2100      	movs	r1, #0
 8018944:	e7da      	b.n	80188fc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8018946:	b2a0      	uxth	r0, r4
 8018948:	b01e      	add	sp, #120	; 0x78
 801894a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801894e:	b003      	add	sp, #12
 8018950:	4770      	bx	lr

08018952 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8018952:	b40e      	push	{r1, r2, r3}
 8018954:	b570      	push	{r4, r5, r6, lr}
 8018956:	b09d      	sub	sp, #116	; 0x74
 8018958:	4604      	mov	r4, r0
 801895a:	ab21      	add	r3, sp, #132	; 0x84
 801895c:	a803      	add	r0, sp, #12
 801895e:	f853 5b04 	ldr.w	r5, [r3], #4
 8018962:	9302      	str	r3, [sp, #8]
 8018964:	f000 fcdf 	bl	8019326 <_ZN8touchgfx12TextProviderC1Ev>
 8018968:	6823      	ldr	r3, [r4, #0]
 801896a:	4620      	mov	r0, r4
 801896c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801896e:	4798      	blx	r3
 8018970:	6823      	ldr	r3, [r4, #0]
 8018972:	4606      	mov	r6, r0
 8018974:	4620      	mov	r0, r4
 8018976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018978:	2401      	movs	r4, #1
 801897a:	4798      	blx	r3
 801897c:	4633      	mov	r3, r6
 801897e:	9000      	str	r0, [sp, #0]
 8018980:	4629      	mov	r1, r5
 8018982:	9a02      	ldr	r2, [sp, #8]
 8018984:	a803      	add	r0, sp, #12
 8018986:	f000 fd29 	bl	80193dc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801898a:	a803      	add	r0, sp, #12
 801898c:	f001 f8f8 	bl	8019b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018990:	b2a3      	uxth	r3, r4
 8018992:	b138      	cbz	r0, 80189a4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018994:	280a      	cmp	r0, #10
 8018996:	a803      	add	r0, sp, #12
 8018998:	bf04      	itt	eq
 801899a:	3301      	addeq	r3, #1
 801899c:	b21c      	sxtheq	r4, r3
 801899e:	f001 f8ef 	bl	8019b80 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80189a2:	e7f5      	b.n	8018990 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80189a4:	4618      	mov	r0, r3
 80189a6:	b01d      	add	sp, #116	; 0x74
 80189a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189ac:	b003      	add	sp, #12
 80189ae:	4770      	bx	lr

080189b0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80189b0:	b40e      	push	{r1, r2, r3}
 80189b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189b4:	b09e      	sub	sp, #120	; 0x78
 80189b6:	4604      	mov	r4, r0
 80189b8:	ab23      	add	r3, sp, #140	; 0x8c
 80189ba:	a805      	add	r0, sp, #20
 80189bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80189c0:	9303      	str	r3, [sp, #12]
 80189c2:	f000 fcb0 	bl	8019326 <_ZN8touchgfx12TextProviderC1Ev>
 80189c6:	6823      	ldr	r3, [r4, #0]
 80189c8:	4620      	mov	r0, r4
 80189ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189cc:	4798      	blx	r3
 80189ce:	6823      	ldr	r3, [r4, #0]
 80189d0:	4606      	mov	r6, r0
 80189d2:	4620      	mov	r0, r4
 80189d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80189d6:	4798      	blx	r3
 80189d8:	4633      	mov	r3, r6
 80189da:	4629      	mov	r1, r5
 80189dc:	9000      	str	r0, [sp, #0]
 80189de:	9a03      	ldr	r2, [sp, #12]
 80189e0:	a805      	add	r0, sp, #20
 80189e2:	f000 fcfb 	bl	80193dc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80189e6:	ad1e      	add	r5, sp, #120	; 0x78
 80189e8:	2100      	movs	r1, #0
 80189ea:	26ff      	movs	r6, #255	; 0xff
 80189ec:	4622      	mov	r2, r4
 80189ee:	a805      	add	r0, sp, #20
 80189f0:	f845 1d68 	str.w	r1, [r5, #-104]!
 80189f4:	462b      	mov	r3, r5
 80189f6:	f000 fff7 	bl	80199e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80189fa:	b1d8      	cbz	r0, 8018a34 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 80189fc:	280a      	cmp	r0, #10
 80189fe:	d012      	beq.n	8018a26 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018a00:	9804      	ldr	r0, [sp, #16]
 8018a02:	b180      	cbz	r0, 8018a26 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8018a04:	7b47      	ldrb	r7, [r0, #13]
 8018a06:	7922      	ldrb	r2, [r4, #4]
 8018a08:	00fb      	lsls	r3, r7, #3
 8018a0a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018a0e:	7a03      	ldrb	r3, [r0, #8]
 8018a10:	430b      	orrs	r3, r1
 8018a12:	0679      	lsls	r1, r7, #25
 8018a14:	bf44      	itt	mi
 8018a16:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018a1a:	b21b      	sxthmi	r3, r3
 8018a1c:	1ad3      	subs	r3, r2, r3
 8018a1e:	b2db      	uxtb	r3, r3
 8018a20:	429e      	cmp	r6, r3
 8018a22:	bf28      	it	cs
 8018a24:	461e      	movcs	r6, r3
 8018a26:	462b      	mov	r3, r5
 8018a28:	4622      	mov	r2, r4
 8018a2a:	2100      	movs	r1, #0
 8018a2c:	a805      	add	r0, sp, #20
 8018a2e:	f000 ffdb 	bl	80199e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018a32:	e7e2      	b.n	80189fa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8018a34:	4630      	mov	r0, r6
 8018a36:	b01e      	add	sp, #120	; 0x78
 8018a38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018a3c:	b003      	add	sp, #12
 8018a3e:	4770      	bx	lr

08018a40 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8018a40:	b513      	push	{r0, r1, r4, lr}
 8018a42:	6803      	ldr	r3, [r0, #0]
 8018a44:	2400      	movs	r4, #0
 8018a46:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018a4a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018a4e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018a52:	4669      	mov	r1, sp
 8018a54:	691b      	ldr	r3, [r3, #16]
 8018a56:	9400      	str	r4, [sp, #0]
 8018a58:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018a5c:	4798      	blx	r3
 8018a5e:	b002      	add	sp, #8
 8018a60:	bd10      	pop	{r4, pc}

08018a62 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8018a62:	b538      	push	{r3, r4, r5, lr}
 8018a64:	680b      	ldr	r3, [r1, #0]
 8018a66:	460c      	mov	r4, r1
 8018a68:	4605      	mov	r5, r0
 8018a6a:	68db      	ldr	r3, [r3, #12]
 8018a6c:	4798      	blx	r3
 8018a6e:	6823      	ldr	r3, [r4, #0]
 8018a70:	4620      	mov	r0, r4
 8018a72:	4629      	mov	r1, r5
 8018a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a76:	4798      	blx	r3
 8018a78:	4628      	mov	r0, r5
 8018a7a:	bd38      	pop	{r3, r4, r5, pc}

08018a7c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8018a7c:	b410      	push	{r4}
 8018a7e:	880a      	ldrh	r2, [r1, #0]
 8018a80:	8884      	ldrh	r4, [r0, #4]
 8018a82:	4422      	add	r2, r4
 8018a84:	800a      	strh	r2, [r1, #0]
 8018a86:	884a      	ldrh	r2, [r1, #2]
 8018a88:	88c4      	ldrh	r4, [r0, #6]
 8018a8a:	4422      	add	r2, r4
 8018a8c:	804a      	strh	r2, [r1, #2]
 8018a8e:	6940      	ldr	r0, [r0, #20]
 8018a90:	b120      	cbz	r0, 8018a9c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018a92:	6803      	ldr	r3, [r0, #0]
 8018a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a9a:	4718      	bx	r3
 8018a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018aa0:	4770      	bx	lr

08018aa2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018aa2:	b570      	push	{r4, r5, r6, lr}
 8018aa4:	8882      	ldrh	r2, [r0, #4]
 8018aa6:	460c      	mov	r4, r1
 8018aa8:	880b      	ldrh	r3, [r1, #0]
 8018aaa:	4605      	mov	r5, r0
 8018aac:	4413      	add	r3, r2
 8018aae:	800b      	strh	r3, [r1, #0]
 8018ab0:	884b      	ldrh	r3, [r1, #2]
 8018ab2:	88c2      	ldrh	r2, [r0, #6]
 8018ab4:	4413      	add	r3, r2
 8018ab6:	804b      	strh	r3, [r1, #2]
 8018ab8:	1d01      	adds	r1, r0, #4
 8018aba:	4620      	mov	r0, r4
 8018abc:	f7fa f9d6 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 8018ac0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	dd0b      	ble.n	8018ae0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018ac8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	dd07      	ble.n	8018ae0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018ad0:	6968      	ldr	r0, [r5, #20]
 8018ad2:	b128      	cbz	r0, 8018ae0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018ad4:	6803      	ldr	r3, [r0, #0]
 8018ad6:	4621      	mov	r1, r4
 8018ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ade:	4718      	bx	r3
 8018ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

08018ae4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018ae4:	b570      	push	{r4, r5, r6, lr}
 8018ae6:	8882      	ldrh	r2, [r0, #4]
 8018ae8:	460c      	mov	r4, r1
 8018aea:	880b      	ldrh	r3, [r1, #0]
 8018aec:	4605      	mov	r5, r0
 8018aee:	4413      	add	r3, r2
 8018af0:	800b      	strh	r3, [r1, #0]
 8018af2:	884b      	ldrh	r3, [r1, #2]
 8018af4:	88c2      	ldrh	r2, [r0, #6]
 8018af6:	4413      	add	r3, r2
 8018af8:	804b      	strh	r3, [r1, #2]
 8018afa:	1d01      	adds	r1, r0, #4
 8018afc:	4620      	mov	r0, r4
 8018afe:	f7fa f9b5 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 8018b02:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	dd18      	ble.n	8018b3c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018b0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	dd14      	ble.n	8018b3c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018b12:	6968      	ldr	r0, [r5, #20]
 8018b14:	b128      	cbz	r0, 8018b22 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8018b16:	6803      	ldr	r3, [r0, #0]
 8018b18:	4621      	mov	r1, r4
 8018b1a:	691b      	ldr	r3, [r3, #16]
 8018b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b20:	4718      	bx	r3
 8018b22:	4b07      	ldr	r3, [pc, #28]	; (8018b40 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	3304      	adds	r3, #4
 8018b28:	429d      	cmp	r5, r3
 8018b2a:	d107      	bne.n	8018b3c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018b2c:	f7fe ffb4 	bl	8017a98 <_ZN8touchgfx11Application11getInstanceEv>
 8018b30:	6821      	ldr	r1, [r4, #0]
 8018b32:	6862      	ldr	r2, [r4, #4]
 8018b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b38:	f7ff b862 	b.w	8017c00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8018b3c:	bd70      	pop	{r4, r5, r6, pc}
 8018b3e:	bf00      	nop
 8018b40:	2400f47c 	.word	0x2400f47c

08018b44 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8018b44:	b570      	push	{r4, r5, r6, lr}
 8018b46:	4604      	mov	r4, r0
 8018b48:	4616      	mov	r6, r2
 8018b4a:	460d      	mov	r5, r1
 8018b4c:	b901      	cbnz	r1, 8018b50 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8018b4e:	b192      	cbz	r2, 8018b76 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8018b50:	6823      	ldr	r3, [r4, #0]
 8018b52:	4620      	mov	r0, r4
 8018b54:	699b      	ldr	r3, [r3, #24]
 8018b56:	4798      	blx	r3
 8018b58:	88e2      	ldrh	r2, [r4, #6]
 8018b5a:	88a1      	ldrh	r1, [r4, #4]
 8018b5c:	4620      	mov	r0, r4
 8018b5e:	4432      	add	r2, r6
 8018b60:	4429      	add	r1, r5
 8018b62:	b212      	sxth	r2, r2
 8018b64:	b209      	sxth	r1, r1
 8018b66:	f7fa fb34 	bl	80131d2 <_ZN8touchgfx8Drawable5setXYEss>
 8018b6a:	6823      	ldr	r3, [r4, #0]
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	699b      	ldr	r3, [r3, #24]
 8018b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b74:	4718      	bx	r3
 8018b76:	bd70      	pop	{r4, r5, r6, pc}

08018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8018b78:	b510      	push	{r4, lr}
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	4604      	mov	r4, r0
 8018b7e:	4608      	mov	r0, r1
 8018b80:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018b84:	8023      	strh	r3, [r4, #0]
 8018b86:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018b8a:	8063      	strh	r3, [r4, #2]
 8018b8c:	6803      	ldr	r3, [r0, #0]
 8018b8e:	80a1      	strh	r1, [r4, #4]
 8018b90:	4621      	mov	r1, r4
 8018b92:	80e2      	strh	r2, [r4, #6]
 8018b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b96:	4798      	blx	r3
 8018b98:	4620      	mov	r0, r4
 8018b9a:	bd10      	pop	{r4, pc}

08018b9c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8018b9c:	b530      	push	{r4, r5, lr}
 8018b9e:	8083      	strh	r3, [r0, #4]
 8018ba0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8018ba4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8018ba8:	7183      	strb	r3, [r0, #6]
 8018baa:	79c3      	ldrb	r3, [r0, #7]
 8018bac:	6101      	str	r1, [r0, #16]
 8018bae:	f365 0306 	bfi	r3, r5, #0, #7
 8018bb2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8018bb6:	8282      	strh	r2, [r0, #20]
 8018bb8:	f365 13c7 	bfi	r3, r5, #7, #1
 8018bbc:	71c3      	strb	r3, [r0, #7]
 8018bbe:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018bc2:	7203      	strb	r3, [r0, #8]
 8018bc4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8018bc8:	7243      	strb	r3, [r0, #9]
 8018bca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018bce:	8143      	strh	r3, [r0, #10]
 8018bd0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8018bd4:	8183      	strh	r3, [r0, #12]
 8018bd6:	4b01      	ldr	r3, [pc, #4]	; (8018bdc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8018bd8:	6003      	str	r3, [r0, #0]
 8018bda:	bd30      	pop	{r4, r5, pc}
 8018bdc:	08026b80 	.word	0x08026b80

08018be0 <_ZNK8touchgfx9ConstFont4findEt>:
 8018be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018be2:	6904      	ldr	r4, [r0, #16]
 8018be4:	b3bc      	cbz	r4, 8018c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018be6:	88a3      	ldrh	r3, [r4, #4]
 8018be8:	8a82      	ldrh	r2, [r0, #20]
 8018bea:	1acb      	subs	r3, r1, r3
 8018bec:	f102 32ff 	add.w	r2, r2, #4294967295
 8018bf0:	d431      	bmi.n	8018c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018bf2:	4293      	cmp	r3, r2
 8018bf4:	dd0c      	ble.n	8018c10 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018bf6:	230e      	movs	r3, #14
 8018bf8:	fb03 4302 	mla	r3, r3, r2, r4
 8018bfc:	889b      	ldrh	r3, [r3, #4]
 8018bfe:	1a5b      	subs	r3, r3, r1
 8018c00:	1ad3      	subs	r3, r2, r3
 8018c02:	429a      	cmp	r2, r3
 8018c04:	db27      	blt.n	8018c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	bfbc      	itt	lt
 8018c0a:	2302      	movlt	r3, #2
 8018c0c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018c10:	2500      	movs	r5, #0
 8018c12:	260e      	movs	r6, #14
 8018c14:	4295      	cmp	r5, r2
 8018c16:	dc1e      	bgt.n	8018c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c18:	fb06 4003 	mla	r0, r6, r3, r4
 8018c1c:	8887      	ldrh	r7, [r0, #4]
 8018c1e:	42b9      	cmp	r1, r7
 8018c20:	d01a      	beq.n	8018c58 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018c22:	d20d      	bcs.n	8018c40 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018c24:	1e5a      	subs	r2, r3, #1
 8018c26:	4295      	cmp	r5, r2
 8018c28:	dc15      	bgt.n	8018c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c2a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8018c2e:	1a5b      	subs	r3, r3, r1
 8018c30:	1ad3      	subs	r3, r2, r3
 8018c32:	429a      	cmp	r2, r3
 8018c34:	db0f      	blt.n	8018c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c36:	429d      	cmp	r5, r3
 8018c38:	ddec      	ble.n	8018c14 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018c3a:	1953      	adds	r3, r2, r5
 8018c3c:	105b      	asrs	r3, r3, #1
 8018c3e:	e7e9      	b.n	8018c14 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018c40:	1c5d      	adds	r5, r3, #1
 8018c42:	42aa      	cmp	r2, r5
 8018c44:	db07      	blt.n	8018c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c46:	8a43      	ldrh	r3, [r0, #18]
 8018c48:	1acb      	subs	r3, r1, r3
 8018c4a:	442b      	add	r3, r5
 8018c4c:	429d      	cmp	r5, r3
 8018c4e:	dc02      	bgt.n	8018c56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018c50:	429a      	cmp	r2, r3
 8018c52:	dadf      	bge.n	8018c14 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018c54:	e7f1      	b.n	8018c3a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018c56:	2000      	movs	r0, #0
 8018c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018c5a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8018c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c5c:	4604      	mov	r4, r0
 8018c5e:	4617      	mov	r7, r2
 8018c60:	461e      	mov	r6, r3
 8018c62:	b911      	cbnz	r1, 8018c6a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018c64:	2500      	movs	r5, #0
 8018c66:	4628      	mov	r0, r5
 8018c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c6a:	290a      	cmp	r1, #10
 8018c6c:	d0fa      	beq.n	8018c64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018c6e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018c72:	4291      	cmp	r1, r2
 8018c74:	d0f6      	beq.n	8018c64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018c76:	f242 020b 	movw	r2, #8203	; 0x200b
 8018c7a:	4291      	cmp	r1, r2
 8018c7c:	d0f2      	beq.n	8018c64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018c7e:	f7ff ffaf 	bl	8018be0 <_ZNK8touchgfx9ConstFont4findEt>
 8018c82:	4605      	mov	r5, r0
 8018c84:	b950      	cbnz	r0, 8018c9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018c86:	6823      	ldr	r3, [r4, #0]
 8018c88:	4620      	mov	r0, r4
 8018c8a:	691b      	ldr	r3, [r3, #16]
 8018c8c:	4798      	blx	r3
 8018c8e:	4601      	mov	r1, r0
 8018c90:	4620      	mov	r0, r4
 8018c92:	f7ff ffa5 	bl	8018be0 <_ZNK8touchgfx9ConstFont4findEt>
 8018c96:	4605      	mov	r5, r0
 8018c98:	2800      	cmp	r0, #0
 8018c9a:	d0e3      	beq.n	8018c64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018c9c:	6823      	ldr	r3, [r4, #0]
 8018c9e:	4629      	mov	r1, r5
 8018ca0:	4620      	mov	r0, r4
 8018ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ca4:	4798      	blx	r3
 8018ca6:	6038      	str	r0, [r7, #0]
 8018ca8:	6823      	ldr	r3, [r4, #0]
 8018caa:	4620      	mov	r0, r4
 8018cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018cae:	4798      	blx	r3
 8018cb0:	7030      	strb	r0, [r6, #0]
 8018cb2:	e7d8      	b.n	8018c66 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018cb4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8018cb4:	2002      	movs	r0, #2
 8018cb6:	4770      	bx	lr

08018cb8 <_ZN8touchgfx6ScreenD1Ev>:
 8018cb8:	4770      	bx	lr

08018cba <_ZN8touchgfx12GestureEventD1Ev>:
 8018cba:	4770      	bx	lr

08018cbc <_ZN8touchgfx12GestureEventD0Ev>:
 8018cbc:	b510      	push	{r4, lr}
 8018cbe:	4604      	mov	r4, r0
 8018cc0:	210c      	movs	r1, #12
 8018cc2:	f00a f858 	bl	8022d76 <_ZdlPvj>
 8018cc6:	4620      	mov	r0, r4
 8018cc8:	bd10      	pop	{r4, pc}

08018cca <_ZN8touchgfx6ScreenD0Ev>:
 8018cca:	b510      	push	{r4, lr}
 8018ccc:	4604      	mov	r4, r0
 8018cce:	213c      	movs	r1, #60	; 0x3c
 8018cd0:	f00a f851 	bl	8022d76 <_ZdlPvj>
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	bd10      	pop	{r4, pc}

08018cd8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018cd8:	b530      	push	{r4, r5, lr}
 8018cda:	460d      	mov	r5, r1
 8018cdc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018cde:	b087      	sub	sp, #28
 8018ce0:	4604      	mov	r4, r0
 8018ce2:	b301      	cbz	r1, 8018d26 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8018ce4:	a801      	add	r0, sp, #4
 8018ce6:	f7ff ff47 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018cea:	892a      	ldrh	r2, [r5, #8]
 8018cec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018cf0:	7928      	ldrb	r0, [r5, #4]
 8018cf2:	1ad2      	subs	r2, r2, r3
 8018cf4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018cf6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018cfa:	441a      	add	r2, r3
 8018cfc:	896b      	ldrh	r3, [r5, #10]
 8018cfe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8018d02:	f88d 0010 	strb.w	r0, [sp, #16]
 8018d06:	1b5b      	subs	r3, r3, r5
 8018d08:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018d0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018d0c:	442b      	add	r3, r5
 8018d0e:	4d07      	ldr	r5, [pc, #28]	; (8018d2c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018d10:	f8ad 1012 	strh.w	r1, [sp, #18]
 8018d14:	a903      	add	r1, sp, #12
 8018d16:	9503      	str	r5, [sp, #12]
 8018d18:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018d1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018d20:	6803      	ldr	r3, [r0, #0]
 8018d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018d24:	4798      	blx	r3
 8018d26:	b007      	add	sp, #28
 8018d28:	bd30      	pop	{r4, r5, pc}
 8018d2a:	bf00      	nop
 8018d2c:	08026bd8 	.word	0x08026bd8

08018d30 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d34:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018d36:	b08a      	sub	sp, #40	; 0x28
 8018d38:	4604      	mov	r4, r0
 8018d3a:	460d      	mov	r5, r1
 8018d3c:	b113      	cbz	r3, 8018d44 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8018d3e:	790b      	ldrb	r3, [r1, #4]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d044      	beq.n	8018dce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018d44:	f104 0804 	add.w	r8, r4, #4
 8018d48:	a803      	add	r0, sp, #12
 8018d4a:	4641      	mov	r1, r8
 8018d4c:	f7ff ff14 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d50:	792b      	ldrb	r3, [r5, #4]
 8018d52:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8018d56:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018d5a:	b983      	cbnz	r3, 8018d7e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8018d5c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8018d60:	892a      	ldrh	r2, [r5, #8]
 8018d62:	88e9      	ldrh	r1, [r5, #6]
 8018d64:	4640      	mov	r0, r8
 8018d66:	1b92      	subs	r2, r2, r6
 8018d68:	9301      	str	r3, [sp, #4]
 8018d6a:	1bc9      	subs	r1, r1, r7
 8018d6c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8018d70:	b212      	sxth	r2, r2
 8018d72:	9300      	str	r3, [sp, #0]
 8018d74:	b209      	sxth	r1, r1
 8018d76:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8018d7a:	f7f9 ff95 	bl	8012ca8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8018d7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018d80:	b329      	cbz	r1, 8018dce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018d82:	a805      	add	r0, sp, #20
 8018d84:	f7ff fef8 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018d88:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018d8c:	792b      	ldrb	r3, [r5, #4]
 8018d8e:	a907      	add	r1, sp, #28
 8018d90:	1abf      	subs	r7, r7, r2
 8018d92:	88ea      	ldrh	r2, [r5, #6]
 8018d94:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018d96:	4417      	add	r7, r2
 8018d98:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8018d9a:	f88d 3020 	strb.w	r3, [sp, #32]
 8018d9e:	4417      	add	r7, r2
 8018da0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018da4:	1ab6      	subs	r6, r6, r2
 8018da6:	892a      	ldrh	r2, [r5, #8]
 8018da8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018dac:	4416      	add	r6, r2
 8018dae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018db0:	4416      	add	r6, r2
 8018db2:	4a08      	ldr	r2, [pc, #32]	; (8018dd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8018db4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018db8:	2600      	movs	r6, #0
 8018dba:	9207      	str	r2, [sp, #28]
 8018dbc:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018dc0:	6803      	ldr	r3, [r0, #0]
 8018dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018dc4:	4798      	blx	r3
 8018dc6:	792b      	ldrb	r3, [r5, #4]
 8018dc8:	b10b      	cbz	r3, 8018dce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018dca:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8018dce:	b00a      	add	sp, #40	; 0x28
 8018dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dd4:	0802656c 	.word	0x0802656c

08018dd8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ddc:	460c      	mov	r4, r1
 8018dde:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018de0:	b088      	sub	sp, #32
 8018de2:	4605      	mov	r5, r0
 8018de4:	2900      	cmp	r1, #0
 8018de6:	d06d      	beq.n	8018ec4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018de8:	4668      	mov	r0, sp
 8018dea:	f7ff fec5 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018dee:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8018df0:	88e3      	ldrh	r3, [r4, #6]
 8018df2:	f9bd 8000 	ldrsh.w	r8, [sp]
 8018df6:	440b      	add	r3, r1
 8018df8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018dfc:	b21b      	sxth	r3, r3
 8018dfe:	4543      	cmp	r3, r8
 8018e00:	db31      	blt.n	8018e66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018e02:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8018e06:	44c4      	add	ip, r8
 8018e08:	fa0f fc8c 	sxth.w	ip, ip
 8018e0c:	4563      	cmp	r3, ip
 8018e0e:	da2a      	bge.n	8018e66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018e10:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8018e12:	8926      	ldrh	r6, [r4, #8]
 8018e14:	4416      	add	r6, r2
 8018e16:	b236      	sxth	r6, r6
 8018e18:	42be      	cmp	r6, r7
 8018e1a:	db24      	blt.n	8018e66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018e1c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018e20:	4438      	add	r0, r7
 8018e22:	b200      	sxth	r0, r0
 8018e24:	4286      	cmp	r6, r0
 8018e26:	da1e      	bge.n	8018e66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018e28:	8963      	ldrh	r3, [r4, #10]
 8018e2a:	4419      	add	r1, r3
 8018e2c:	b209      	sxth	r1, r1
 8018e2e:	4541      	cmp	r1, r8
 8018e30:	db08      	blt.n	8018e44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018e32:	4561      	cmp	r1, ip
 8018e34:	da06      	bge.n	8018e44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018e36:	89a3      	ldrh	r3, [r4, #12]
 8018e38:	441a      	add	r2, r3
 8018e3a:	b212      	sxth	r2, r2
 8018e3c:	42ba      	cmp	r2, r7
 8018e3e:	db01      	blt.n	8018e44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018e40:	4282      	cmp	r2, r0
 8018e42:	db10      	blt.n	8018e66 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018e44:	4b21      	ldr	r3, [pc, #132]	; (8018ecc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8018e46:	a904      	add	r1, sp, #16
 8018e48:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018e4a:	9304      	str	r3, [sp, #16]
 8018e4c:	2302      	movs	r3, #2
 8018e4e:	f88d 3014 	strb.w	r3, [sp, #20]
 8018e52:	2300      	movs	r3, #0
 8018e54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018e58:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018e5c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018e60:	6803      	ldr	r3, [r0, #0]
 8018e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e64:	4798      	blx	r3
 8018e66:	1d29      	adds	r1, r5, #4
 8018e68:	a802      	add	r0, sp, #8
 8018e6a:	f7ff fe85 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e6e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018e72:	88e0      	ldrh	r0, [r4, #6]
 8018e74:	eba3 0808 	sub.w	r8, r3, r8
 8018e78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8018e7c:	7921      	ldrb	r1, [r4, #4]
 8018e7e:	fa1f f888 	uxth.w	r8, r8
 8018e82:	1bdf      	subs	r7, r3, r7
 8018e84:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8018e88:	b2bb      	uxth	r3, r7
 8018e8a:	4440      	add	r0, r8
 8018e8c:	8922      	ldrh	r2, [r4, #8]
 8018e8e:	8967      	ldrh	r7, [r4, #10]
 8018e90:	4460      	add	r0, ip
 8018e92:	89a4      	ldrh	r4, [r4, #12]
 8018e94:	441a      	add	r2, r3
 8018e96:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8018e98:	44b8      	add	r8, r7
 8018e9a:	4423      	add	r3, r4
 8018e9c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018ea0:	4432      	add	r2, r6
 8018ea2:	44e0      	add	r8, ip
 8018ea4:	4433      	add	r3, r6
 8018ea6:	4c0a      	ldr	r4, [pc, #40]	; (8018ed0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018ea8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018eaa:	f88d 1014 	strb.w	r1, [sp, #20]
 8018eae:	a904      	add	r1, sp, #16
 8018eb0:	9404      	str	r4, [sp, #16]
 8018eb2:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018eb6:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018eba:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018ebe:	6803      	ldr	r3, [r0, #0]
 8018ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ec2:	4798      	blx	r3
 8018ec4:	b008      	add	sp, #32
 8018ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018eca:	bf00      	nop
 8018ecc:	0802656c 	.word	0x0802656c
 8018ed0:	08026580 	.word	0x08026580

08018ed4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ed6:	4604      	mov	r4, r0
 8018ed8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018edc:	3201      	adds	r2, #1
 8018ede:	d112      	bne.n	8018f06 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018ee0:	2500      	movs	r5, #0
 8018ee2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018ee6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018eea:	6803      	ldr	r3, [r0, #0]
 8018eec:	9500      	str	r5, [sp, #0]
 8018eee:	466d      	mov	r5, sp
 8018ef0:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018ef4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018ef8:	4629      	mov	r1, r5
 8018efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018efc:	4798      	blx	r3
 8018efe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018f02:	e884 0003 	stmia.w	r4, {r0, r1}
 8018f06:	4620      	mov	r0, r4
 8018f08:	b003      	add	sp, #12
 8018f0a:	bd30      	pop	{r4, r5, pc}

08018f0c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018f0c:	b513      	push	{r0, r1, r4, lr}
 8018f0e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018f12:	4604      	mov	r4, r0
 8018f14:	3301      	adds	r3, #1
 8018f16:	d109      	bne.n	8018f2c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018f18:	4601      	mov	r1, r0
 8018f1a:	4668      	mov	r0, sp
 8018f1c:	f7ff fe2c 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f20:	f8bd 3000 	ldrh.w	r3, [sp]
 8018f24:	8423      	strh	r3, [r4, #32]
 8018f26:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018f2a:	8463      	strh	r3, [r4, #34]	; 0x22
 8018f2c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018f30:	b002      	add	sp, #8
 8018f32:	bd10      	pop	{r4, pc}

08018f34 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018f34:	b513      	push	{r0, r1, r4, lr}
 8018f36:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018f3a:	4604      	mov	r4, r0
 8018f3c:	3301      	adds	r3, #1
 8018f3e:	d109      	bne.n	8018f54 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018f40:	4601      	mov	r1, r0
 8018f42:	4668      	mov	r0, sp
 8018f44:	f7ff fe18 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f48:	f8bd 3000 	ldrh.w	r3, [sp]
 8018f4c:	8423      	strh	r3, [r4, #32]
 8018f4e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018f52:	8463      	strh	r3, [r4, #34]	; 0x22
 8018f54:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8018f58:	b002      	add	sp, #8
 8018f5a:	bd10      	pop	{r4, pc}

08018f5c <_ZN8touchgfx6ScreenC1Ev>:
 8018f5c:	b570      	push	{r4, r5, r6, lr}
 8018f5e:	4b17      	ldr	r3, [pc, #92]	; (8018fbc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8018f60:	4605      	mov	r5, r0
 8018f62:	4a17      	ldr	r2, [pc, #92]	; (8018fc0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8018f64:	2101      	movs	r1, #1
 8018f66:	f845 3b04 	str.w	r3, [r5], #4
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	6042      	str	r2, [r0, #4]
 8018f6e:	4604      	mov	r4, r0
 8018f70:	8103      	strh	r3, [r0, #8]
 8018f72:	8143      	strh	r3, [r0, #10]
 8018f74:	8183      	strh	r3, [r0, #12]
 8018f76:	81c3      	strh	r3, [r0, #14]
 8018f78:	8203      	strh	r3, [r0, #16]
 8018f7a:	8243      	strh	r3, [r0, #18]
 8018f7c:	8283      	strh	r3, [r0, #20]
 8018f7e:	82c3      	strh	r3, [r0, #22]
 8018f80:	6203      	str	r3, [r0, #32]
 8018f82:	8483      	strh	r3, [r0, #36]	; 0x24
 8018f84:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018f86:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8018f8a:	6343      	str	r3, [r0, #52]	; 0x34
 8018f8c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8018f90:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8018f94:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018f98:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8018f9c:	4b09      	ldr	r3, [pc, #36]	; (8018fc4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018f9e:	4628      	mov	r0, r5
 8018fa0:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018fa4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8018fa6:	4a08      	ldr	r2, [pc, #32]	; (8018fc8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018fa8:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018fac:	4798      	blx	r3
 8018fae:	6863      	ldr	r3, [r4, #4]
 8018fb0:	4628      	mov	r0, r5
 8018fb2:	4631      	mov	r1, r6
 8018fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fb6:	4798      	blx	r3
 8018fb8:	4620      	mov	r0, r4
 8018fba:	bd70      	pop	{r4, r5, r6, pc}
 8018fbc:	08026bec 	.word	0x08026bec
 8018fc0:	08026414 	.word	0x08026414
 8018fc4:	2400f436 	.word	0x2400f436
 8018fc8:	2400f434 	.word	0x2400f434

08018fcc <_ZN8touchgfx6Screen4drawEv>:
 8018fcc:	4b09      	ldr	r3, [pc, #36]	; (8018ff4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018fce:	b507      	push	{r0, r1, r2, lr}
 8018fd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018fd4:	2100      	movs	r1, #0
 8018fd6:	4b08      	ldr	r3, [pc, #32]	; (8018ff8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018fd8:	9100      	str	r1, [sp, #0]
 8018fda:	4669      	mov	r1, sp
 8018fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fe0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018fe4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018fe8:	6803      	ldr	r3, [r0, #0]
 8018fea:	689b      	ldr	r3, [r3, #8]
 8018fec:	4798      	blx	r3
 8018fee:	b003      	add	sp, #12
 8018ff0:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ff4:	2400f434 	.word	0x2400f434
 8018ff8:	2400f436 	.word	0x2400f436

08018ffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019000:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019004:	b089      	sub	sp, #36	; 0x24
 8019006:	4680      	mov	r8, r0
 8019008:	460c      	mov	r4, r1
 801900a:	2b00      	cmp	r3, #0
 801900c:	4615      	mov	r5, r2
 801900e:	dd0e      	ble.n	801902e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019010:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019014:	2b00      	cmp	r3, #0
 8019016:	dd0a      	ble.n	801902e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019018:	4628      	mov	r0, r5
 801901a:	f7ff ff5b 	bl	8018ed4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801901e:	4621      	mov	r1, r4
 8019020:	f7fc fd88 	bl	8015b34 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019024:	69eb      	ldr	r3, [r5, #28]
 8019026:	b928      	cbnz	r0, 8019034 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019028:	461d      	mov	r5, r3
 801902a:	2b00      	cmp	r3, #0
 801902c:	d1f4      	bne.n	8019018 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801902e:	b009      	add	sp, #36	; 0x24
 8019030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019034:	ae04      	add	r6, sp, #16
 8019036:	2b00      	cmp	r3, #0
 8019038:	f000 80b5 	beq.w	80191a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801903c:	682b      	ldr	r3, [r5, #0]
 801903e:	4629      	mov	r1, r5
 8019040:	a802      	add	r0, sp, #8
 8019042:	68db      	ldr	r3, [r3, #12]
 8019044:	4798      	blx	r3
 8019046:	4628      	mov	r0, r5
 8019048:	f7ff ff60 	bl	8018f0c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801904c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019050:	4407      	add	r7, r0
 8019052:	4628      	mov	r0, r5
 8019054:	f7ff ff6e 	bl	8018f34 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019058:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801905c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019060:	b23f      	sxth	r7, r7
 8019062:	4418      	add	r0, r3
 8019064:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019068:	4621      	mov	r1, r4
 801906a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801906e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019072:	4630      	mov	r0, r6
 8019074:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019078:	f8ad 7010 	strh.w	r7, [sp, #16]
 801907c:	f7f9 fef6 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 8019080:	4628      	mov	r0, r5
 8019082:	f7ff ff27 	bl	8018ed4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019086:	ab06      	add	r3, sp, #24
 8019088:	4602      	mov	r2, r0
 801908a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801908e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019092:	4611      	mov	r1, r2
 8019094:	4618      	mov	r0, r3
 8019096:	f7f9 fee9 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 801909a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801909e:	f9b4 1000 	ldrsh.w	r1, [r4]
 80190a2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80190a6:	4299      	cmp	r1, r3
 80190a8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80190ac:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80190b0:	d10b      	bne.n	80190ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80190b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80190b6:	4552      	cmp	r2, sl
 80190b8:	d107      	bne.n	80190ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80190ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80190be:	455a      	cmp	r2, fp
 80190c0:	d103      	bne.n	80190ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80190c2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80190c6:	454a      	cmp	r2, r9
 80190c8:	d06d      	beq.n	80191a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80190ca:	f1bb 0f00 	cmp.w	fp, #0
 80190ce:	dd65      	ble.n	801919c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80190d0:	f1b9 0f00 	cmp.w	r9, #0
 80190d4:	dd62      	ble.n	801919c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80190d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80190da:	fa1f f08a 	uxth.w	r0, sl
 80190de:	4552      	cmp	r2, sl
 80190e0:	9000      	str	r0, [sp, #0]
 80190e2:	da12      	bge.n	801910a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80190e4:	9301      	str	r3, [sp, #4]
 80190e6:	9b00      	ldr	r3, [sp, #0]
 80190e8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80190ec:	f8ad 2012 	strh.w	r2, [sp, #18]
 80190f0:	1a9a      	subs	r2, r3, r2
 80190f2:	f8ad 1010 	strh.w	r1, [sp, #16]
 80190f6:	4631      	mov	r1, r6
 80190f8:	f8ad 0014 	strh.w	r0, [sp, #20]
 80190fc:	4640      	mov	r0, r8
 80190fe:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019102:	69ea      	ldr	r2, [r5, #28]
 8019104:	f7ff ff7a 	bl	8018ffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019108:	9b01      	ldr	r3, [sp, #4]
 801910a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801910e:	b29f      	uxth	r7, r3
 8019110:	429a      	cmp	r2, r3
 8019112:	da0d      	bge.n	8019130 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8019114:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019118:	1aba      	subs	r2, r7, r2
 801911a:	f8ad a012 	strh.w	sl, [sp, #18]
 801911e:	4631      	mov	r1, r6
 8019120:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019124:	4640      	mov	r0, r8
 8019126:	f8ad 9016 	strh.w	r9, [sp, #22]
 801912a:	69ea      	ldr	r2, [r5, #28]
 801912c:	f7ff ff66 	bl	8018ffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019130:	8822      	ldrh	r2, [r4, #0]
 8019132:	445f      	add	r7, fp
 8019134:	88a3      	ldrh	r3, [r4, #4]
 8019136:	b2bf      	uxth	r7, r7
 8019138:	4413      	add	r3, r2
 801913a:	b23a      	sxth	r2, r7
 801913c:	b29b      	uxth	r3, r3
 801913e:	b219      	sxth	r1, r3
 8019140:	4291      	cmp	r1, r2
 8019142:	dd0d      	ble.n	8019160 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8019144:	1bdb      	subs	r3, r3, r7
 8019146:	f8ad 2010 	strh.w	r2, [sp, #16]
 801914a:	f8ad a012 	strh.w	sl, [sp, #18]
 801914e:	4631      	mov	r1, r6
 8019150:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019154:	4640      	mov	r0, r8
 8019156:	f8ad 9016 	strh.w	r9, [sp, #22]
 801915a:	69ea      	ldr	r2, [r5, #28]
 801915c:	f7ff ff4e 	bl	8018ffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019160:	88e2      	ldrh	r2, [r4, #6]
 8019162:	8863      	ldrh	r3, [r4, #2]
 8019164:	4413      	add	r3, r2
 8019166:	9a00      	ldr	r2, [sp, #0]
 8019168:	444a      	add	r2, r9
 801916a:	b29b      	uxth	r3, r3
 801916c:	fa1f f982 	uxth.w	r9, r2
 8019170:	b219      	sxth	r1, r3
 8019172:	fa0f f289 	sxth.w	r2, r9
 8019176:	428a      	cmp	r2, r1
 8019178:	da15      	bge.n	80191a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801917a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801917e:	eba3 0309 	sub.w	r3, r3, r9
 8019182:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019186:	f8ad 1014 	strh.w	r1, [sp, #20]
 801918a:	4631      	mov	r1, r6
 801918c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019190:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019194:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019198:	69ea      	ldr	r2, [r5, #28]
 801919a:	e001      	b.n	80191a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801919c:	69ea      	ldr	r2, [r5, #28]
 801919e:	4621      	mov	r1, r4
 80191a0:	4640      	mov	r0, r8
 80191a2:	f7ff ff2b 	bl	8018ffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80191a6:	4628      	mov	r0, r5
 80191a8:	f7ff fe94 	bl	8018ed4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80191ac:	6861      	ldr	r1, [r4, #4]
 80191ae:	4602      	mov	r2, r0
 80191b0:	4633      	mov	r3, r6
 80191b2:	6820      	ldr	r0, [r4, #0]
 80191b4:	c303      	stmia	r3!, {r0, r1}
 80191b6:	4611      	mov	r1, r2
 80191b8:	4630      	mov	r0, r6
 80191ba:	f7f9 fe57 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 80191be:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	f77f af33 	ble.w	801902e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80191c8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	f77f af2e 	ble.w	801902e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80191d2:	4628      	mov	r0, r5
 80191d4:	f7ff fe9a 	bl	8018f0c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80191d8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80191dc:	1a18      	subs	r0, r3, r0
 80191de:	f8ad 0010 	strh.w	r0, [sp, #16]
 80191e2:	4628      	mov	r0, r5
 80191e4:	f7ff fea6 	bl	8018f34 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80191e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80191ec:	4631      	mov	r1, r6
 80191ee:	1a18      	subs	r0, r3, r0
 80191f0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80191f4:	4628      	mov	r0, r5
 80191f6:	682b      	ldr	r3, [r5, #0]
 80191f8:	689b      	ldr	r3, [r3, #8]
 80191fa:	4798      	blx	r3
 80191fc:	e717      	b.n	801902e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080191fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80191fe:	b570      	push	{r4, r5, r6, lr}
 8019200:	1d06      	adds	r6, r0, #4
 8019202:	b086      	sub	sp, #24
 8019204:	460c      	mov	r4, r1
 8019206:	2300      	movs	r3, #0
 8019208:	4631      	mov	r1, r6
 801920a:	4605      	mov	r5, r0
 801920c:	a802      	add	r0, sp, #8
 801920e:	9301      	str	r3, [sp, #4]
 8019210:	f7ff fcb2 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019214:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019218:	8822      	ldrh	r2, [r4, #0]
 801921a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801921e:	1ad2      	subs	r2, r2, r3
 8019220:	8863      	ldrh	r3, [r4, #2]
 8019222:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019226:	1a5b      	subs	r3, r3, r1
 8019228:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801922c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019230:	aa01      	add	r2, sp, #4
 8019232:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019236:	4630      	mov	r0, r6
 8019238:	f8ad 1016 	strh.w	r1, [sp, #22]
 801923c:	a904      	add	r1, sp, #16
 801923e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019242:	f7f9 feeb 	bl	801301c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019246:	9a01      	ldr	r2, [sp, #4]
 8019248:	b11a      	cbz	r2, 8019252 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801924a:	4621      	mov	r1, r4
 801924c:	4628      	mov	r0, r5
 801924e:	f7ff fed5 	bl	8018ffc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019252:	b006      	add	sp, #24
 8019254:	bd70      	pop	{r4, r5, r6, pc}

08019256 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8019256:	4602      	mov	r2, r0
 8019258:	b530      	push	{r4, r5, lr}
 801925a:	4604      	mov	r4, r0
 801925c:	b085      	sub	sp, #20
 801925e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8019262:	460d      	mov	r5, r1
 8019264:	466b      	mov	r3, sp
 8019266:	6851      	ldr	r1, [r2, #4]
 8019268:	c303      	stmia	r3!, {r0, r1}
 801926a:	4629      	mov	r1, r5
 801926c:	4668      	mov	r0, sp
 801926e:	f7f9 fdfd 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 8019272:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019276:	b12b      	cbz	r3, 8019284 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8019278:	4669      	mov	r1, sp
 801927a:	4620      	mov	r0, r4
 801927c:	f7ff ffbf 	bl	80191fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8019280:	b005      	add	sp, #20
 8019282:	bd30      	pop	{r4, r5, pc}
 8019284:	3404      	adds	r4, #4
 8019286:	a802      	add	r0, sp, #8
 8019288:	4621      	mov	r1, r4
 801928a:	f7ff fc75 	bl	8018b78 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801928e:	f8bd 3000 	ldrh.w	r3, [sp]
 8019292:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019296:	4669      	mov	r1, sp
 8019298:	4620      	mov	r0, r4
 801929a:	1a9b      	subs	r3, r3, r2
 801929c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80192a0:	f8ad 3000 	strh.w	r3, [sp]
 80192a4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80192a8:	1a9b      	subs	r3, r3, r2
 80192aa:	f8ad 3002 	strh.w	r3, [sp, #2]
 80192ae:	f7f9 fe7c 	bl	8012faa <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80192b2:	e7e5      	b.n	8019280 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080192b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80192b4:	460b      	mov	r3, r1
 80192b6:	680a      	ldr	r2, [r1, #0]
 80192b8:	1d01      	adds	r1, r0, #4
 80192ba:	6992      	ldr	r2, [r2, #24]
 80192bc:	4618      	mov	r0, r3
 80192be:	4710      	bx	r2

080192c0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 80192c0:	4298      	cmp	r0, r3
 80192c2:	d200      	bcs.n	80192c6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 80192c4:	b913      	cbnz	r3, 80192cc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 80192c6:	440a      	add	r2, r1
 80192c8:	b210      	sxth	r0, r2
 80192ca:	4770      	bx	lr
 80192cc:	ee07 0a90 	vmov	s15, r0
 80192d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80192d4:	ee07 3a90 	vmov	s15, r3
 80192d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80192e0:	ee07 2a90 	vmov	s15, r2
 80192e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80192e8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80192ec:	ee07 1a90 	vmov	s15, r1
 80192f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192f4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80192f8:	ee67 5a07 	vmul.f32	s11, s14, s14
 80192fc:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019300:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019304:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019308:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801930c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019310:	bfcc      	ite	gt
 8019312:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 8019316:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801931a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801931e:	ee17 3a90 	vmov	r3, s15
 8019322:	b218      	sxth	r0, r3
 8019324:	4770      	bx	lr

08019326 <_ZN8touchgfx12TextProviderC1Ev>:
 8019326:	b538      	push	{r3, r4, r5, lr}
 8019328:	2500      	movs	r5, #0
 801932a:	2302      	movs	r3, #2
 801932c:	4604      	mov	r4, r0
 801932e:	220e      	movs	r2, #14
 8019330:	7403      	strb	r3, [r0, #16]
 8019332:	4629      	mov	r1, r5
 8019334:	6145      	str	r5, [r0, #20]
 8019336:	7605      	strb	r5, [r0, #24]
 8019338:	83c5      	strh	r5, [r0, #30]
 801933a:	8405      	strh	r5, [r0, #32]
 801933c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801933e:	8705      	strh	r5, [r0, #56]	; 0x38
 8019340:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8019342:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8019346:	e9c0 5500 	strd	r5, r5, [r0]
 801934a:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801934e:	304c      	adds	r0, #76	; 0x4c
 8019350:	f009 fed6 	bl	8023100 <memset>
 8019354:	2301      	movs	r3, #1
 8019356:	4620      	mov	r0, r4
 8019358:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801935c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8019360:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8019364:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8019368:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801936c:	f7eb f83a 	bl	80043e4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8019370:	4620      	mov	r0, r4
 8019372:	bd38      	pop	{r3, r4, r5, pc}

08019374 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8019374:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019376:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801937a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801937c:	fab0 f080 	clz	r0, r0
 8019380:	0940      	lsrs	r0, r0, #5
 8019382:	4770      	bx	lr

08019384 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8019384:	b530      	push	{r4, r5, lr}
 8019386:	2500      	movs	r5, #0
 8019388:	2401      	movs	r4, #1
 801938a:	6843      	ldr	r3, [r0, #4]
 801938c:	b913      	cbnz	r3, 8019394 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801938e:	6803      	ldr	r3, [r0, #0]
 8019390:	b313      	cbz	r3, 80193d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8019392:	6043      	str	r3, [r0, #4]
 8019394:	7e03      	ldrb	r3, [r0, #24]
 8019396:	b143      	cbz	r3, 80193aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8019398:	6943      	ldr	r3, [r0, #20]
 801939a:	b12b      	cbz	r3, 80193a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801939c:	881a      	ldrh	r2, [r3, #0]
 801939e:	b11a      	cbz	r2, 80193a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80193a0:	1c9a      	adds	r2, r3, #2
 80193a2:	6142      	str	r2, [r0, #20]
 80193a4:	8818      	ldrh	r0, [r3, #0]
 80193a6:	bd30      	pop	{r4, r5, pc}
 80193a8:	7605      	strb	r5, [r0, #24]
 80193aa:	6843      	ldr	r3, [r0, #4]
 80193ac:	8819      	ldrh	r1, [r3, #0]
 80193ae:	b199      	cbz	r1, 80193d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80193b0:	1c9a      	adds	r2, r3, #2
 80193b2:	2902      	cmp	r1, #2
 80193b4:	6042      	str	r2, [r0, #4]
 80193b6:	d1f5      	bne.n	80193a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80193b8:	7c03      	ldrb	r3, [r0, #16]
 80193ba:	2b01      	cmp	r3, #1
 80193bc:	d8e5      	bhi.n	801938a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193be:	1c5a      	adds	r2, r3, #1
 80193c0:	3302      	adds	r3, #2
 80193c2:	7402      	strb	r2, [r0, #16]
 80193c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80193c8:	6143      	str	r3, [r0, #20]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d0dd      	beq.n	801938a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193ce:	881b      	ldrh	r3, [r3, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d0da      	beq.n	801938a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193d4:	7604      	strb	r4, [r0, #24]
 80193d6:	e7d8      	b.n	801938a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80193d8:	2000      	movs	r0, #0
 80193da:	e7e4      	b.n	80193a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080193dc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80193dc:	6001      	str	r1, [r0, #0]
 80193de:	2100      	movs	r1, #0
 80193e0:	b430      	push	{r4, r5}
 80193e2:	6041      	str	r1, [r0, #4]
 80193e4:	6815      	ldr	r5, [r2, #0]
 80193e6:	6085      	str	r5, [r0, #8]
 80193e8:	6852      	ldr	r2, [r2, #4]
 80193ea:	6443      	str	r3, [r0, #68]	; 0x44
 80193ec:	9b02      	ldr	r3, [sp, #8]
 80193ee:	60c2      	str	r2, [r0, #12]
 80193f0:	7401      	strb	r1, [r0, #16]
 80193f2:	6141      	str	r1, [r0, #20]
 80193f4:	7601      	strb	r1, [r0, #24]
 80193f6:	8701      	strh	r1, [r0, #56]	; 0x38
 80193f8:	8401      	strh	r1, [r0, #32]
 80193fa:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80193fe:	6483      	str	r3, [r0, #72]	; 0x48
 8019400:	bc30      	pop	{r4, r5}
 8019402:	f7ea bfef 	b.w	80043e4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08019406 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8019406:	b408      	push	{r3}
 8019408:	b510      	push	{r4, lr}
 801940a:	b085      	sub	sp, #20
 801940c:	ac07      	add	r4, sp, #28
 801940e:	f854 3b04 	ldr.w	r3, [r4], #4
 8019412:	9300      	str	r3, [sp, #0]
 8019414:	4613      	mov	r3, r2
 8019416:	4622      	mov	r2, r4
 8019418:	9403      	str	r4, [sp, #12]
 801941a:	f7ff ffdf 	bl	80193dc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801941e:	b005      	add	sp, #20
 8019420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019424:	b001      	add	sp, #4
 8019426:	4770      	bx	lr

08019428 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8019428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801942a:	4605      	mov	r5, r0
 801942c:	4608      	mov	r0, r1
 801942e:	b1f1      	cbz	r1, 801946e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8019430:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8019434:	460b      	mov	r3, r1
 8019436:	f101 0708 	add.w	r7, r1, #8
 801943a:	4622      	mov	r2, r4
 801943c:	6818      	ldr	r0, [r3, #0]
 801943e:	3308      	adds	r3, #8
 8019440:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8019444:	4626      	mov	r6, r4
 8019446:	42bb      	cmp	r3, r7
 8019448:	c603      	stmia	r6!, {r0, r1}
 801944a:	4634      	mov	r4, r6
 801944c:	d1f6      	bne.n	801943c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801944e:	6818      	ldr	r0, [r3, #0]
 8019450:	6030      	str	r0, [r6, #0]
 8019452:	4610      	mov	r0, r2
 8019454:	889b      	ldrh	r3, [r3, #4]
 8019456:	80b3      	strh	r3, [r6, #4]
 8019458:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801945c:	015b      	lsls	r3, r3, #5
 801945e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019462:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8019466:	430b      	orrs	r3, r1
 8019468:	425b      	negs	r3, r3
 801946a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801946e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019470 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8019470:	b538      	push	{r3, r4, r5, lr}
 8019472:	460c      	mov	r4, r1
 8019474:	6811      	ldr	r1, [r2, #0]
 8019476:	4610      	mov	r0, r2
 8019478:	68cd      	ldr	r5, [r1, #12]
 801947a:	4619      	mov	r1, r3
 801947c:	47a8      	blx	r5
 801947e:	2800      	cmp	r0, #0
 8019480:	bf08      	it	eq
 8019482:	4620      	moveq	r0, r4
 8019484:	bd38      	pop	{r3, r4, r5, pc}
	...

08019488 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8019488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801948a:	4604      	mov	r4, r0
 801948c:	4615      	mov	r5, r2
 801948e:	4608      	mov	r0, r1
 8019490:	b93a      	cbnz	r2, 80194a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8019492:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019496:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801949a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801949e:	4628      	mov	r0, r5
 80194a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194a2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80194a6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80194aa:	8893      	ldrh	r3, [r2, #4]
 80194ac:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80194b0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80194b4:	79ee      	ldrb	r6, [r5, #7]
 80194b6:	4316      	orrs	r6, r2
 80194b8:	19da      	adds	r2, r3, r7
 80194ba:	b291      	uxth	r1, r2
 80194bc:	b2b7      	uxth	r7, r6
 80194be:	291d      	cmp	r1, #29
 80194c0:	d87b      	bhi.n	80195ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80194c2:	2201      	movs	r2, #1
 80194c4:	10f6      	asrs	r6, r6, #3
 80194c6:	408a      	lsls	r2, r1
 80194c8:	4974      	ldr	r1, [pc, #464]	; (801969c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80194ca:	420a      	tst	r2, r1
 80194cc:	d12e      	bne.n	801952c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80194ce:	f412 7f60 	tst.w	r2, #896	; 0x380
 80194d2:	d072      	beq.n	80195ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80194d4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80194d8:	462b      	mov	r3, r5
 80194da:	f105 0e08 	add.w	lr, r5, #8
 80194de:	4615      	mov	r5, r2
 80194e0:	6818      	ldr	r0, [r3, #0]
 80194e2:	3308      	adds	r3, #8
 80194e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80194e8:	4694      	mov	ip, r2
 80194ea:	4573      	cmp	r3, lr
 80194ec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80194f0:	4662      	mov	r2, ip
 80194f2:	d1f5      	bne.n	80194e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80194f4:	6818      	ldr	r0, [r3, #0]
 80194f6:	f8cc 0000 	str.w	r0, [ip]
 80194fa:	889b      	ldrh	r3, [r3, #4]
 80194fc:	f8ac 3004 	strh.w	r3, [ip, #4]
 8019500:	b2b3      	uxth	r3, r6
 8019502:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8019506:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801950a:	1aca      	subs	r2, r1, r3
 801950c:	1bcf      	subs	r7, r1, r7
 801950e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8019512:	b292      	uxth	r2, r2
 8019514:	1afb      	subs	r3, r7, r3
 8019516:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801951a:	10d2      	asrs	r2, r2, #3
 801951c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8019520:	4302      	orrs	r2, r0
 8019522:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8019526:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801952a:	e7b8      	b.n	801949e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801952c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801952e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019532:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8019534:	f640 6333 	movw	r3, #3635	; 0xe33
 8019538:	4299      	cmp	r1, r3
 801953a:	d110      	bne.n	801955e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801953c:	6803      	ldr	r3, [r0, #0]
 801953e:	68db      	ldr	r3, [r3, #12]
 8019540:	4798      	blx	r3
 8019542:	7b41      	ldrb	r1, [r0, #13]
 8019544:	00cb      	lsls	r3, r1, #3
 8019546:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801954a:	7a03      	ldrb	r3, [r0, #8]
 801954c:	0648      	lsls	r0, r1, #25
 801954e:	ea43 0302 	orr.w	r3, r3, r2
 8019552:	bf44      	itt	mi
 8019554:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019558:	b21b      	sxthmi	r3, r3
 801955a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801955e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8019562:	462a      	mov	r2, r5
 8019564:	f105 0c08 	add.w	ip, r5, #8
 8019568:	443b      	add	r3, r7
 801956a:	4433      	add	r3, r6
 801956c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8019570:	b29b      	uxth	r3, r3
 8019572:	4635      	mov	r5, r6
 8019574:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019578:	6810      	ldr	r0, [r2, #0]
 801957a:	3208      	adds	r2, #8
 801957c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8019580:	4637      	mov	r7, r6
 8019582:	4562      	cmp	r2, ip
 8019584:	c703      	stmia	r7!, {r0, r1}
 8019586:	463e      	mov	r6, r7
 8019588:	d1f6      	bne.n	8019578 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801958a:	6810      	ldr	r0, [r2, #0]
 801958c:	6038      	str	r0, [r7, #0]
 801958e:	8892      	ldrh	r2, [r2, #4]
 8019590:	80ba      	strh	r2, [r7, #4]
 8019592:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019596:	10db      	asrs	r3, r3, #3
 8019598:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801959c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80195a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80195a4:	4313      	orrs	r3, r2
 80195a6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80195aa:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80195ae:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80195b2:	1a9b      	subs	r3, r3, r2
 80195b4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80195b8:	e771      	b.n	801949e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80195ba:	f023 0204 	bic.w	r2, r3, #4
 80195be:	f640 611b 	movw	r1, #3611	; 0xe1b
 80195c2:	428a      	cmp	r2, r1
 80195c4:	d003      	beq.n	80195ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80195c6:	f640 621d 	movw	r2, #3613	; 0xe1d
 80195ca:	4293      	cmp	r3, r2
 80195cc:	d120      	bne.n	8019610 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80195ce:	3b01      	subs	r3, #1
 80195d0:	4602      	mov	r2, r0
 80195d2:	4629      	mov	r1, r5
 80195d4:	4620      	mov	r0, r4
 80195d6:	b29b      	uxth	r3, r3
 80195d8:	f7ff ff4a 	bl	8019470 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80195dc:	7b41      	ldrb	r1, [r0, #13]
 80195de:	00cb      	lsls	r3, r1, #3
 80195e0:	0649      	lsls	r1, r1, #25
 80195e2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80195e6:	7a03      	ldrb	r3, [r0, #8]
 80195e8:	ea43 0302 	orr.w	r3, r3, r2
 80195ec:	bf44      	itt	mi
 80195ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80195f2:	b21b      	sxthmi	r3, r3
 80195f4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80195f8:	7b6b      	ldrb	r3, [r5, #13]
 80195fa:	7aaa      	ldrb	r2, [r5, #10]
 80195fc:	005b      	lsls	r3, r3, #1
 80195fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019602:	4313      	orrs	r3, r2
 8019604:	115a      	asrs	r2, r3, #5
 8019606:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801960a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801960e:	e035      	b.n	801967c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8019610:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8019614:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8019618:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801961c:	7a2a      	ldrb	r2, [r5, #8]
 801961e:	ea42 0201 	orr.w	r2, r2, r1
 8019622:	f640 6109 	movw	r1, #3593	; 0xe09
 8019626:	bf1c      	itt	ne
 8019628:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801962c:	b212      	sxthne	r2, r2
 801962e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8019632:	f023 0210 	bic.w	r2, r3, #16
 8019636:	428a      	cmp	r2, r1
 8019638:	d003      	beq.n	8019642 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801963a:	f640 6213 	movw	r2, #3603	; 0xe13
 801963e:	4293      	cmp	r3, r2
 8019640:	d129      	bne.n	8019696 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8019642:	7b6e      	ldrb	r6, [r5, #13]
 8019644:	4629      	mov	r1, r5
 8019646:	0076      	lsls	r6, r6, #1
 8019648:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801964c:	7aae      	ldrb	r6, [r5, #10]
 801964e:	4316      	orrs	r6, r2
 8019650:	f640 6213 	movw	r2, #3603	; 0xe13
 8019654:	4293      	cmp	r3, r2
 8019656:	4602      	mov	r2, r0
 8019658:	4620      	mov	r0, r4
 801965a:	bf16      	itet	ne
 801965c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8019660:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8019664:	b29b      	uxthne	r3, r3
 8019666:	f7ff ff03 	bl	8019470 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801966a:	7b43      	ldrb	r3, [r0, #13]
 801966c:	7a82      	ldrb	r2, [r0, #10]
 801966e:	005b      	lsls	r3, r3, #1
 8019670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019674:	4313      	orrs	r3, r2
 8019676:	1af6      	subs	r6, r6, r3
 8019678:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801967c:	7b69      	ldrb	r1, [r5, #13]
 801967e:	00cb      	lsls	r3, r1, #3
 8019680:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019684:	7a2b      	ldrb	r3, [r5, #8]
 8019686:	4313      	orrs	r3, r2
 8019688:	064a      	lsls	r2, r1, #25
 801968a:	bf44      	itt	mi
 801968c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019690:	b21b      	sxthmi	r3, r3
 8019692:	1bdb      	subs	r3, r3, r7
 8019694:	e747      	b.n	8019526 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8019696:	2300      	movs	r3, #0
 8019698:	e7b7      	b.n	801960a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801969a:	bf00      	nop
 801969c:	3fc00079 	.word	0x3fc00079

080196a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80196a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80196a4:	4604      	mov	r4, r0
 80196a6:	b942      	cbnz	r2, 80196ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80196a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80196ac:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80196b0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80196b4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80196b8:	e047      	b.n	801974a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80196ba:	7b51      	ldrb	r1, [r2, #13]
 80196bc:	8893      	ldrh	r3, [r2, #4]
 80196be:	010d      	lsls	r5, r1, #4
 80196c0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80196c4:	79d5      	ldrb	r5, [r2, #7]
 80196c6:	4305      	orrs	r5, r0
 80196c8:	2d04      	cmp	r5, #4
 80196ca:	bfcc      	ite	gt
 80196cc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80196d0:	f04f 0e01 	movle.w	lr, #1
 80196d4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80196d8:	f200 80ab 	bhi.w	8019832 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80196dc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80196e0:	4283      	cmp	r3, r0
 80196e2:	d216      	bcs.n	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80196e4:	f240 605b 	movw	r0, #1627	; 0x65b
 80196e8:	4283      	cmp	r3, r0
 80196ea:	d859      	bhi.n	80197a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80196ec:	f240 6057 	movw	r0, #1623	; 0x657
 80196f0:	4283      	cmp	r3, r0
 80196f2:	d20e      	bcs.n	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80196f4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80196f8:	d24a      	bcs.n	8019790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80196fa:	f240 604e 	movw	r0, #1614	; 0x64e
 80196fe:	4283      	cmp	r3, r0
 8019700:	d207      	bcs.n	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019702:	f240 601a 	movw	r0, #1562	; 0x61a
 8019706:	4283      	cmp	r3, r0
 8019708:	d02a      	beq.n	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801970a:	d821      	bhi.n	8019750 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801970c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8019710:	d35b      	bcc.n	80197ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019712:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8019716:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801971a:	f040 80d0 	bne.w	80198be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801971e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8019722:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019726:	f040 80ca 	bne.w	80198be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801972a:	00cb      	lsls	r3, r1, #3
 801972c:	0649      	lsls	r1, r1, #25
 801972e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019732:	7a13      	ldrb	r3, [r2, #8]
 8019734:	ea43 0300 	orr.w	r3, r3, r0
 8019738:	bf44      	itt	mi
 801973a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801973e:	b21b      	sxthmi	r3, r3
 8019740:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019744:	1b5d      	subs	r5, r3, r5
 8019746:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801974a:	4610      	mov	r0, r2
 801974c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019750:	f240 604b 	movw	r0, #1611	; 0x64b
 8019754:	4283      	cmp	r3, r0
 8019756:	d338      	bcc.n	80197ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019758:	f240 604c 	movw	r0, #1612	; 0x64c
 801975c:	4283      	cmp	r3, r0
 801975e:	d9d8      	bls.n	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019760:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8019764:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8019768:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801976c:	f040 80f3 	bne.w	8019956 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019770:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019774:	f040 80ef 	bne.w	8019956 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019778:	00cb      	lsls	r3, r1, #3
 801977a:	064e      	lsls	r6, r1, #25
 801977c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019780:	7a13      	ldrb	r3, [r2, #8]
 8019782:	ea43 0300 	orr.w	r3, r3, r0
 8019786:	bf44      	itt	mi
 8019788:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801978c:	b21b      	sxthmi	r3, r3
 801978e:	e7d9      	b.n	8019744 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8019790:	f240 6054 	movw	r0, #1620	; 0x654
 8019794:	4283      	cmp	r3, r0
 8019796:	d8e3      	bhi.n	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019798:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801979c:	d9e0      	bls.n	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801979e:	e7b8      	b.n	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197a0:	f240 6074 	movw	r0, #1652	; 0x674
 80197a4:	4283      	cmp	r3, r0
 80197a6:	d0b4      	beq.n	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197a8:	d82d      	bhi.n	8019806 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80197aa:	f240 605e 	movw	r0, #1630	; 0x65e
 80197ae:	4283      	cmp	r3, r0
 80197b0:	d804      	bhi.n	80197bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80197b2:	f240 605d 	movw	r0, #1629	; 0x65d
 80197b6:	4283      	cmp	r3, r0
 80197b8:	d3d2      	bcc.n	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197ba:	e7aa      	b.n	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197bc:	f240 605f 	movw	r0, #1631	; 0x65f
 80197c0:	4283      	cmp	r3, r0
 80197c2:	d0cd      	beq.n	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80197c4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80197c8:	d0a3      	beq.n	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80197ca:	00cb      	lsls	r3, r1, #3
 80197cc:	0649      	lsls	r1, r1, #25
 80197ce:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80197d2:	7a13      	ldrb	r3, [r2, #8]
 80197d4:	ea43 0300 	orr.w	r3, r3, r0
 80197d8:	bf44      	itt	mi
 80197da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80197de:	b21b      	sxthmi	r3, r3
 80197e0:	1b5d      	subs	r5, r3, r5
 80197e2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80197e6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80197ea:	7b53      	ldrb	r3, [r2, #13]
 80197ec:	015b      	lsls	r3, r3, #5
 80197ee:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80197f2:	7993      	ldrb	r3, [r2, #6]
 80197f4:	430b      	orrs	r3, r1
 80197f6:	2105      	movs	r1, #5
 80197f8:	005b      	lsls	r3, r3, #1
 80197fa:	fb93 f3f1 	sdiv	r3, r3, r1
 80197fe:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8019802:	440b      	add	r3, r1
 8019804:	e756      	b.n	80196b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8019806:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801980a:	4283      	cmp	r3, r0
 801980c:	d809      	bhi.n	8019822 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801980e:	f240 60df 	movw	r0, #1759	; 0x6df
 8019812:	4283      	cmp	r3, r0
 8019814:	f4bf af7d 	bcs.w	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019818:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801981c:	2b05      	cmp	r3, #5
 801981e:	d8d4      	bhi.n	80197ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019820:	e777      	b.n	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019822:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8019826:	4283      	cmp	r3, r0
 8019828:	d09a      	beq.n	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801982a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801982e:	4283      	cmp	r3, r0
 8019830:	e7ca      	b.n	80197c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019832:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8019836:	d22b      	bcs.n	8019890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019838:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801983c:	4283      	cmp	r3, r0
 801983e:	d28f      	bcs.n	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019840:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019844:	4283      	cmp	r3, r0
 8019846:	d816      	bhi.n	8019876 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019848:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801984c:	4283      	cmp	r3, r0
 801984e:	f4bf af60 	bcs.w	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019852:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8019856:	4283      	cmp	r3, r0
 8019858:	d80a      	bhi.n	8019870 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801985a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801985e:	4283      	cmp	r3, r0
 8019860:	f4bf af57 	bcs.w	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019864:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8019868:	4283      	cmp	r3, r0
 801986a:	f43f af79 	beq.w	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801986e:	e7ac      	b.n	80197ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019870:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8019874:	e7f8      	b.n	8019868 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8019876:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801987a:	4283      	cmp	r3, r0
 801987c:	d802      	bhi.n	8019884 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801987e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019882:	e798      	b.n	80197b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019884:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8019888:	4283      	cmp	r3, r0
 801988a:	f47f af42 	bne.w	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801988e:	e767      	b.n	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019890:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8019894:	4283      	cmp	r3, r0
 8019896:	f43f af63 	beq.w	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801989a:	d802      	bhi.n	80198a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801989c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80198a0:	e7f2      	b.n	8019888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80198a2:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80198a6:	4283      	cmp	r3, r0
 80198a8:	d805      	bhi.n	80198b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80198aa:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80198ae:	4283      	cmp	r3, r0
 80198b0:	f4ff af2f 	bcc.w	8019712 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80198b4:	e754      	b.n	8019760 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80198b6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80198ba:	4283      	cmp	r3, r0
 80198bc:	e7af      	b.n	801981e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80198be:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80198c2:	4617      	mov	r7, r2
 80198c4:	f102 0808 	add.w	r8, r2, #8
 80198c8:	4666      	mov	r6, ip
 80198ca:	6838      	ldr	r0, [r7, #0]
 80198cc:	3708      	adds	r7, #8
 80198ce:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80198d2:	46e6      	mov	lr, ip
 80198d4:	4547      	cmp	r7, r8
 80198d6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80198da:	46f4      	mov	ip, lr
 80198dc:	d1f5      	bne.n	80198ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80198de:	6838      	ldr	r0, [r7, #0]
 80198e0:	f8ce 0000 	str.w	r0, [lr]
 80198e4:	88b9      	ldrh	r1, [r7, #4]
 80198e6:	f8ae 1004 	strh.w	r1, [lr, #4]
 80198ea:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80198ee:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80198f2:	d009      	beq.n	8019908 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80198f4:	7b51      	ldrb	r1, [r2, #13]
 80198f6:	7992      	ldrb	r2, [r2, #6]
 80198f8:	0149      	lsls	r1, r1, #5
 80198fa:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80198fe:	4311      	orrs	r1, r2
 8019900:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019904:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019908:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801990c:	b2ad      	uxth	r5, r5
 801990e:	d00d      	beq.n	801992c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8019910:	442b      	add	r3, r5
 8019912:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8019916:	b29b      	uxth	r3, r3
 8019918:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801991c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019920:	10db      	asrs	r3, r3, #3
 8019922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019926:	4313      	orrs	r3, r2
 8019928:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801992c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019930:	00cb      	lsls	r3, r1, #3
 8019932:	064f      	lsls	r7, r1, #25
 8019934:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019938:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801993c:	ea43 0302 	orr.w	r3, r3, r2
 8019940:	bf44      	itt	mi
 8019942:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019946:	b21b      	sxthmi	r3, r3
 8019948:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801994c:	1b5b      	subs	r3, r3, r5
 801994e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019952:	4632      	mov	r2, r6
 8019954:	e6f9      	b.n	801974a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019956:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801995a:	4617      	mov	r7, r2
 801995c:	f102 0908 	add.w	r9, r2, #8
 8019960:	4666      	mov	r6, ip
 8019962:	6838      	ldr	r0, [r7, #0]
 8019964:	3708      	adds	r7, #8
 8019966:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801996a:	46e0      	mov	r8, ip
 801996c:	454f      	cmp	r7, r9
 801996e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019972:	46c4      	mov	ip, r8
 8019974:	d1f5      	bne.n	8019962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8019976:	6838      	ldr	r0, [r7, #0]
 8019978:	f8c8 0000 	str.w	r0, [r8]
 801997c:	88b9      	ldrh	r1, [r7, #4]
 801997e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019982:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019986:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801998a:	d009      	beq.n	80199a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801998c:	7b51      	ldrb	r1, [r2, #13]
 801998e:	7992      	ldrb	r2, [r2, #6]
 8019990:	0149      	lsls	r1, r1, #5
 8019992:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019996:	4311      	orrs	r1, r2
 8019998:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801999c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80199a0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80199a4:	d00e      	beq.n	80199c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80199a6:	eba3 030e 	sub.w	r3, r3, lr
 80199aa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80199ae:	b29b      	uxth	r3, r3
 80199b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80199b4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80199b8:	10db      	asrs	r3, r3, #3
 80199ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80199be:	4313      	orrs	r3, r2
 80199c0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80199c4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80199c8:	00cb      	lsls	r3, r1, #3
 80199ca:	0648      	lsls	r0, r1, #25
 80199cc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80199d0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80199d4:	ea43 0302 	orr.w	r3, r3, r2
 80199d8:	bf44      	itt	mi
 80199da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80199de:	b21b      	sxthmi	r3, r3
 80199e0:	1b5d      	subs	r5, r3, r5
 80199e2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80199e6:	e7b4      	b.n	8019952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080199e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80199e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199ec:	461e      	mov	r6, r3
 80199ee:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80199f0:	4604      	mov	r4, r0
 80199f2:	4617      	mov	r7, r2
 80199f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80199f8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80199fc:	f7ea fca0 	bl	8004340 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019a00:	4605      	mov	r5, r0
 8019a02:	b918      	cbnz	r0, 8019a0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8019a04:	6030      	str	r0, [r6, #0]
 8019a06:	4628      	mov	r0, r5
 8019a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a0c:	683b      	ldr	r3, [r7, #0]
 8019a0e:	4601      	mov	r1, r0
 8019a10:	4638      	mov	r0, r7
 8019a12:	68db      	ldr	r3, [r3, #12]
 8019a14:	4798      	blx	r3
 8019a16:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019a1a:	4602      	mov	r2, r0
 8019a1c:	6030      	str	r0, [r6, #0]
 8019a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019a22:	d213      	bcs.n	8019a4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8019a24:	4643      	mov	r3, r8
 8019a26:	4639      	mov	r1, r7
 8019a28:	4620      	mov	r0, r4
 8019a2a:	f7ff fe39 	bl	80196a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019a2e:	6030      	str	r0, [r6, #0]
 8019a30:	6833      	ldr	r3, [r6, #0]
 8019a32:	b143      	cbz	r3, 8019a46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019a34:	7b5a      	ldrb	r2, [r3, #13]
 8019a36:	7a9b      	ldrb	r3, [r3, #10]
 8019a38:	0052      	lsls	r2, r2, #1
 8019a3a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019a3e:	4313      	orrs	r3, r2
 8019a40:	bf0c      	ite	eq
 8019a42:	2301      	moveq	r3, #1
 8019a44:	2300      	movne	r3, #0
 8019a46:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8019a4a:	e7dc      	b.n	8019a06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8019a4c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019a50:	b29b      	uxth	r3, r3
 8019a52:	2b7f      	cmp	r3, #127	; 0x7f
 8019a54:	d804      	bhi.n	8019a60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019a56:	4639      	mov	r1, r7
 8019a58:	4620      	mov	r0, r4
 8019a5a:	f7ff fd15 	bl	8019488 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019a5e:	e7e6      	b.n	8019a2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019a60:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d0e3      	beq.n	8019a30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019a68:	f640 1302 	movw	r3, #2306	; 0x902
 8019a6c:	429d      	cmp	r5, r3
 8019a6e:	d1df      	bne.n	8019a30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019a70:	4601      	mov	r1, r0
 8019a72:	4620      	mov	r0, r4
 8019a74:	f7ff fcd8 	bl	8019428 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019a78:	e7d9      	b.n	8019a2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08019a7a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8019a7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a7e:	461e      	mov	r6, r3
 8019a80:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019a82:	4604      	mov	r4, r0
 8019a84:	4617      	mov	r7, r2
 8019a86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019a8a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019a8e:	f7ea fc57 	bl	8004340 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019a92:	4605      	mov	r5, r0
 8019a94:	b918      	cbnz	r0, 8019a9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8019a96:	6030      	str	r0, [r6, #0]
 8019a98:	4628      	mov	r0, r5
 8019a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a9e:	683b      	ldr	r3, [r7, #0]
 8019aa0:	4601      	mov	r1, r0
 8019aa2:	4638      	mov	r0, r7
 8019aa4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019aa8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019aac:	47c8      	blx	r9
 8019aae:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019ab2:	4602      	mov	r2, r0
 8019ab4:	6030      	str	r0, [r6, #0]
 8019ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019aba:	d213      	bcs.n	8019ae4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8019abc:	4643      	mov	r3, r8
 8019abe:	4639      	mov	r1, r7
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	f7ff fded 	bl	80196a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019ac6:	6030      	str	r0, [r6, #0]
 8019ac8:	6833      	ldr	r3, [r6, #0]
 8019aca:	b143      	cbz	r3, 8019ade <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8019acc:	7b5a      	ldrb	r2, [r3, #13]
 8019ace:	7a9b      	ldrb	r3, [r3, #10]
 8019ad0:	0052      	lsls	r2, r2, #1
 8019ad2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8019ad6:	4313      	orrs	r3, r2
 8019ad8:	bf0c      	ite	eq
 8019ada:	2301      	moveq	r3, #1
 8019adc:	2300      	movne	r3, #0
 8019ade:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8019ae2:	e7d9      	b.n	8019a98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8019ae4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019ae8:	b29b      	uxth	r3, r3
 8019aea:	2b7f      	cmp	r3, #127	; 0x7f
 8019aec:	d804      	bhi.n	8019af8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8019aee:	4639      	mov	r1, r7
 8019af0:	4620      	mov	r0, r4
 8019af2:	f7ff fcc9 	bl	8019488 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019af6:	e7e6      	b.n	8019ac6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8019af8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d0e3      	beq.n	8019ac8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019b00:	f640 1302 	movw	r3, #2306	; 0x902
 8019b04:	429d      	cmp	r5, r3
 8019b06:	d1df      	bne.n	8019ac8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019b08:	4601      	mov	r1, r0
 8019b0a:	4620      	mov	r0, r4
 8019b0c:	f7ff fc8c 	bl	8019428 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019b10:	e7d9      	b.n	8019ac6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08019b12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8019b12:	b510      	push	{r4, lr}
 8019b14:	4604      	mov	r4, r0
 8019b16:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8019b1a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019b1c:	b1e1      	cbz	r1, 8019b58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8019b1e:	2b0a      	cmp	r3, #10
 8019b20:	d02d      	beq.n	8019b7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8019b22:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019b24:	3901      	subs	r1, #1
 8019b26:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019b2a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8019b2c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8019b30:	1c51      	adds	r1, r2, #1
 8019b32:	b289      	uxth	r1, r1
 8019b34:	2901      	cmp	r1, #1
 8019b36:	bf8a      	itet	hi
 8019b38:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019b3c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8019b3e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8019b40:	1c5a      	adds	r2, r3, #1
 8019b42:	8722      	strh	r2, [r4, #56]	; 0x38
 8019b44:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019b46:	4413      	add	r3, r2
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	2b09      	cmp	r3, #9
 8019b4c:	bf88      	it	hi
 8019b4e:	3b0a      	subhi	r3, #10
 8019b50:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019b54:	8458      	strh	r0, [r3, #34]	; 0x22
 8019b56:	e7de      	b.n	8019b16 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019b58:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019b5a:	2b0a      	cmp	r3, #10
 8019b5c:	d00f      	beq.n	8019b7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8019b5e:	4620      	mov	r0, r4
 8019b60:	f7ff fc10 	bl	8019384 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019b64:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019b66:	1c5a      	adds	r2, r3, #1
 8019b68:	8722      	strh	r2, [r4, #56]	; 0x38
 8019b6a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019b6c:	4413      	add	r3, r2
 8019b6e:	b29b      	uxth	r3, r3
 8019b70:	2b09      	cmp	r3, #9
 8019b72:	bf88      	it	hi
 8019b74:	3b0a      	subhi	r3, #10
 8019b76:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019b7a:	8458      	strh	r0, [r3, #34]	; 0x22
 8019b7c:	e7ec      	b.n	8019b58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8019b7e:	bd10      	pop	{r4, pc}

08019b80 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019b80:	b538      	push	{r3, r4, r5, lr}
 8019b82:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019b84:	4604      	mov	r4, r0
 8019b86:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8019b8a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8019b8c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8019b8e:	3a01      	subs	r2, #1
 8019b90:	8702      	strh	r2, [r0, #56]	; 0x38
 8019b92:	1c5a      	adds	r2, r3, #1
 8019b94:	b292      	uxth	r2, r2
 8019b96:	2a09      	cmp	r2, #9
 8019b98:	bf8a      	itet	hi
 8019b9a:	3b09      	subhi	r3, #9
 8019b9c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8019b9e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8019ba0:	f7ff ffb7 	bl	8019b12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019ba4:	8c23      	ldrh	r3, [r4, #32]
 8019ba6:	2b01      	cmp	r3, #1
 8019ba8:	bf9c      	itt	ls
 8019baa:	3301      	addls	r3, #1
 8019bac:	8423      	strhls	r3, [r4, #32]
 8019bae:	8be3      	ldrh	r3, [r4, #30]
 8019bb0:	b90b      	cbnz	r3, 8019bb6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8019bb2:	2302      	movs	r3, #2
 8019bb4:	83e3      	strh	r3, [r4, #30]
 8019bb6:	8be3      	ldrh	r3, [r4, #30]
 8019bb8:	4628      	mov	r0, r5
 8019bba:	3b01      	subs	r3, #1
 8019bbc:	b29b      	uxth	r3, r3
 8019bbe:	83e3      	strh	r3, [r4, #30]
 8019bc0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019bc4:	8365      	strh	r5, [r4, #26]
 8019bc6:	bd38      	pop	{r3, r4, r5, pc}

08019bc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019bc8:	428a      	cmp	r2, r1
 8019bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bce:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8019bd0:	d932      	bls.n	8019c38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8019bd2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8019bd4:	1a54      	subs	r4, r2, r1
 8019bd6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8019bda:	19ee      	adds	r6, r5, r7
 8019bdc:	fa1f fe84 	uxth.w	lr, r4
 8019be0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8019be4:	3e01      	subs	r6, #1
 8019be6:	b2b4      	uxth	r4, r6
 8019be8:	eba4 090e 	sub.w	r9, r4, lr
 8019bec:	fa1f f989 	uxth.w	r9, r9
 8019bf0:	2c09      	cmp	r4, #9
 8019bf2:	4626      	mov	r6, r4
 8019bf4:	bf88      	it	hi
 8019bf6:	f1a4 060a 	subhi.w	r6, r4, #10
 8019bfa:	f1bc 0f00 	cmp.w	ip, #0
 8019bfe:	f104 34ff 	add.w	r4, r4, #4294967295
 8019c02:	bf08      	it	eq
 8019c04:	f04f 0c02 	moveq.w	ip, #2
 8019c08:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019c0c:	b2a4      	uxth	r4, r4
 8019c0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019c12:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8019c16:	454c      	cmp	r4, r9
 8019c18:	fa1f fc8c 	uxth.w	ip, ip
 8019c1c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019c20:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8019c24:	d1e4      	bne.n	8019bf0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8019c26:	eba5 050e 	sub.w	r5, r5, lr
 8019c2a:	eb0e 0408 	add.w	r4, lr, r8
 8019c2e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8019c32:	8705      	strh	r5, [r0, #56]	; 0x38
 8019c34:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8019c38:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8019c3a:	250a      	movs	r5, #10
 8019c3c:	1a64      	subs	r4, r4, r1
 8019c3e:	4439      	add	r1, r7
 8019c40:	b289      	uxth	r1, r1
 8019c42:	8704      	strh	r4, [r0, #56]	; 0x38
 8019c44:	2909      	cmp	r1, #9
 8019c46:	bf88      	it	hi
 8019c48:	390a      	subhi	r1, #10
 8019c4a:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019c4c:	b18a      	cbz	r2, 8019c72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8019c4e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8019c50:	3a01      	subs	r2, #1
 8019c52:	3101      	adds	r1, #1
 8019c54:	b292      	uxth	r2, r2
 8019c56:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8019c5a:	8701      	strh	r1, [r0, #56]	; 0x38
 8019c5c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019c5e:	b901      	cbnz	r1, 8019c62 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8019c60:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019c62:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019c64:	3901      	subs	r1, #1
 8019c66:	b289      	uxth	r1, r1
 8019c68:	86c1      	strh	r1, [r0, #54]	; 0x36
 8019c6a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8019c6e:	844c      	strh	r4, [r1, #34]	; 0x22
 8019c70:	e7ec      	b.n	8019c4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8019c72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c76:	f7ff bf4c 	b.w	8019b12 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08019c7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8019c7a:	b570      	push	{r4, r5, r6, lr}
 8019c7c:	2500      	movs	r5, #0
 8019c7e:	4295      	cmp	r5, r2
 8019c80:	d011      	beq.n	8019ca6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019c82:	8bc4      	ldrh	r4, [r0, #30]
 8019c84:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019c88:	4414      	add	r4, r2
 8019c8a:	3c01      	subs	r4, #1
 8019c8c:	1b64      	subs	r4, r4, r5
 8019c8e:	b2a4      	uxth	r4, r4
 8019c90:	2c01      	cmp	r4, #1
 8019c92:	bf88      	it	hi
 8019c94:	3c02      	subhi	r4, #2
 8019c96:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8019c9a:	8b64      	ldrh	r4, [r4, #26]
 8019c9c:	42b4      	cmp	r4, r6
 8019c9e:	d117      	bne.n	8019cd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019ca0:	3501      	adds	r5, #1
 8019ca2:	b2ad      	uxth	r5, r5
 8019ca4:	e7eb      	b.n	8019c7e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019ca6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019caa:	2400      	movs	r4, #0
 8019cac:	4413      	add	r3, r2
 8019cae:	b2a2      	uxth	r2, r4
 8019cb0:	429a      	cmp	r2, r3
 8019cb2:	da0f      	bge.n	8019cd4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019cb4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8019cb6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019cba:	3401      	adds	r4, #1
 8019cbc:	4432      	add	r2, r6
 8019cbe:	b292      	uxth	r2, r2
 8019cc0:	2a09      	cmp	r2, #9
 8019cc2:	bf88      	it	hi
 8019cc4:	3a0a      	subhi	r2, #10
 8019cc6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019cca:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8019ccc:	42aa      	cmp	r2, r5
 8019cce:	d0ee      	beq.n	8019cae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8019cd0:	2000      	movs	r0, #0
 8019cd2:	bd70      	pop	{r4, r5, r6, pc}
 8019cd4:	2001      	movs	r0, #1
 8019cd6:	e7fc      	b.n	8019cd2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019cd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cdc:	4605      	mov	r5, r0
 8019cde:	4616      	mov	r6, r2
 8019ce0:	1c8c      	adds	r4, r1, #2
 8019ce2:	8809      	ldrh	r1, [r1, #0]
 8019ce4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019ce8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019cec:	42b3      	cmp	r3, r6
 8019cee:	d124      	bne.n	8019d3a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8019cf0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019cf4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019cf8:	f001 070f 	and.w	r7, r1, #15
 8019cfc:	4652      	mov	r2, sl
 8019cfe:	f8cd 8000 	str.w	r8, [sp]
 8019d02:	464b      	mov	r3, r9
 8019d04:	4621      	mov	r1, r4
 8019d06:	4628      	mov	r0, r5
 8019d08:	f7ff ffb7 	bl	8019c7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019d0c:	4683      	mov	fp, r0
 8019d0e:	b168      	cbz	r0, 8019d2c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8019d10:	eb0a 0109 	add.w	r1, sl, r9
 8019d14:	463a      	mov	r2, r7
 8019d16:	4628      	mov	r0, r5
 8019d18:	4441      	add	r1, r8
 8019d1a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8019d1e:	4649      	mov	r1, r9
 8019d20:	f7ff ff52 	bl	8019bc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019d24:	4658      	mov	r0, fp
 8019d26:	b003      	add	sp, #12
 8019d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d2c:	eb07 010a 	add.w	r1, r7, sl
 8019d30:	4449      	add	r1, r9
 8019d32:	4441      	add	r1, r8
 8019d34:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019d38:	e7d2      	b.n	8019ce0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019d3a:	f04f 0b00 	mov.w	fp, #0
 8019d3e:	e7f1      	b.n	8019d24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019d40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019d40:	b570      	push	{r4, r5, r6, lr}
 8019d42:	8810      	ldrh	r0, [r2, #0]
 8019d44:	4298      	cmp	r0, r3
 8019d46:	d817      	bhi.n	8019d78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019d48:	1e48      	subs	r0, r1, #1
 8019d4a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8019d4e:	4298      	cmp	r0, r3
 8019d50:	d312      	bcc.n	8019d78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019d52:	2400      	movs	r4, #0
 8019d54:	428c      	cmp	r4, r1
 8019d56:	d20f      	bcs.n	8019d78 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019d58:	1860      	adds	r0, r4, r1
 8019d5a:	1040      	asrs	r0, r0, #1
 8019d5c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019d60:	0085      	lsls	r5, r0, #2
 8019d62:	42b3      	cmp	r3, r6
 8019d64:	d902      	bls.n	8019d6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019d66:	3001      	adds	r0, #1
 8019d68:	b284      	uxth	r4, r0
 8019d6a:	e7f3      	b.n	8019d54 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019d6c:	d201      	bcs.n	8019d72 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8019d6e:	b281      	uxth	r1, r0
 8019d70:	e7f0      	b.n	8019d54 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019d72:	442a      	add	r2, r5
 8019d74:	8850      	ldrh	r0, [r2, #2]
 8019d76:	bd70      	pop	{r4, r5, r6, pc}
 8019d78:	2000      	movs	r0, #0
 8019d7a:	e7fc      	b.n	8019d76 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08019d7c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8019d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d80:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8019d82:	4604      	mov	r4, r0
 8019d84:	260b      	movs	r6, #11
 8019d86:	886f      	ldrh	r7, [r5, #2]
 8019d88:	087f      	lsrs	r7, r7, #1
 8019d8a:	3e01      	subs	r6, #1
 8019d8c:	d013      	beq.n	8019db6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019d8e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019d90:	462a      	mov	r2, r5
 8019d92:	4639      	mov	r1, r7
 8019d94:	4620      	mov	r0, r4
 8019d96:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019d9a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8019d9e:	4643      	mov	r3, r8
 8019da0:	f7ff ffce 	bl	8019d40 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019da4:	b138      	cbz	r0, 8019db6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019da6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019daa:	4642      	mov	r2, r8
 8019dac:	4620      	mov	r0, r4
 8019dae:	f7ff ff93 	bl	8019cd8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019db2:	2800      	cmp	r0, #0
 8019db4:	d1e9      	bne.n	8019d8a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08019dbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019dbc:	b570      	push	{r4, r5, r6, lr}
 8019dbe:	694a      	ldr	r2, [r1, #20]
 8019dc0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019dc2:	684b      	ldr	r3, [r1, #4]
 8019dc4:	1b54      	subs	r4, r2, r5
 8019dc6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8019dc8:	f000 8106 	beq.w	8019fd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8019dcc:	1b9b      	subs	r3, r3, r6
 8019dce:	d003      	beq.n	8019dd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019dd0:	4363      	muls	r3, r4
 8019dd2:	2210      	movs	r2, #16
 8019dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8019dd8:	680c      	ldr	r4, [r1, #0]
 8019dda:	698a      	ldr	r2, [r1, #24]
 8019ddc:	1b65      	subs	r5, r4, r5
 8019dde:	f000 80fd 	beq.w	8019fdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8019de2:	1b92      	subs	r2, r2, r6
 8019de4:	d003      	beq.n	8019dee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019de6:	436a      	muls	r2, r5
 8019de8:	2410      	movs	r4, #16
 8019dea:	fb92 f2f4 	sdiv	r2, r2, r4
 8019dee:	1a9b      	subs	r3, r3, r2
 8019df0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801a018 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8019df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019df8:	460a      	mov	r2, r1
 8019dfa:	ee07 3a90 	vmov	s15, r3
 8019dfe:	f100 040c 	add.w	r4, r0, #12
 8019e02:	4603      	mov	r3, r0
 8019e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e08:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019e0c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8019e10:	eeb1 6a43 	vneg.f32	s12, s6
 8019e14:	edd2 7a02 	vldr	s15, [r2, #8]
 8019e18:	3214      	adds	r2, #20
 8019e1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019e1e:	ece3 6a01 	vstmia	r3!, {s13}
 8019e22:	429c      	cmp	r4, r3
 8019e24:	ed52 7a02 	vldr	s15, [r2, #-8]
 8019e28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e2c:	edc3 7a02 	vstr	s15, [r3, #8]
 8019e30:	ed52 7a01 	vldr	s15, [r2, #-4]
 8019e34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e38:	edc3 7a05 	vstr	s15, [r3, #20]
 8019e3c:	d1ea      	bne.n	8019e14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8019e3e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019e40:	698b      	ldr	r3, [r1, #24]
 8019e42:	edd0 4a02 	vldr	s9, [r0, #8]
 8019e46:	1a9b      	subs	r3, r3, r2
 8019e48:	edd0 3a00 	vldr	s7, [r0]
 8019e4c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019e50:	ee07 3a90 	vmov	s15, r3
 8019e54:	684b      	ldr	r3, [r1, #4]
 8019e56:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8019e5a:	ed90 5a05 	vldr	s10, [r0, #20]
 8019e5e:	1a9b      	subs	r3, r3, r2
 8019e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e64:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019e68:	ed90 2a03 	vldr	s4, [r0, #12]
 8019e6c:	ee07 3a10 	vmov	s14, r3
 8019e70:	edd0 5a04 	vldr	s11, [r0, #16]
 8019e74:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019e78:	ed90 1a07 	vldr	s2, [r0, #28]
 8019e7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e80:	edd0 2a06 	vldr	s5, [r0, #24]
 8019e84:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019e88:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8019e8c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019e90:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019e94:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019e98:	ee67 7a83 	vmul.f32	s15, s15, s6
 8019e9c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8019ea0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019ea2:	694a      	ldr	r2, [r1, #20]
 8019ea4:	1b13      	subs	r3, r2, r4
 8019ea6:	ee07 3a10 	vmov	s14, r3
 8019eaa:	680b      	ldr	r3, [r1, #0]
 8019eac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019eb0:	1b1b      	subs	r3, r3, r4
 8019eb2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019eb6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8019eba:	ee07 3a10 	vmov	s14, r3
 8019ebe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ec2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019ec6:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019eca:	ee64 4a86 	vmul.f32	s9, s9, s12
 8019ece:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8019ed2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019ed4:	698b      	ldr	r3, [r1, #24]
 8019ed6:	1a9b      	subs	r3, r3, r2
 8019ed8:	ee06 3a90 	vmov	s13, r3
 8019edc:	684b      	ldr	r3, [r1, #4]
 8019ede:	1a9b      	subs	r3, r3, r2
 8019ee0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019ee4:	ee07 3a10 	vmov	s14, r3
 8019ee8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019eec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ef0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019ef4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019ef8:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019efc:	ee66 6a83 	vmul.f32	s13, s13, s6
 8019f00:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8019f04:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019f06:	694a      	ldr	r2, [r1, #20]
 8019f08:	1b13      	subs	r3, r2, r4
 8019f0a:	ee07 3a10 	vmov	s14, r3
 8019f0e:	680b      	ldr	r3, [r1, #0]
 8019f10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f14:	1b1b      	subs	r3, r3, r4
 8019f16:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019f1a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8019f1e:	ee07 3a10 	vmov	s14, r3
 8019f22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f26:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019f2a:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019f2e:	edd0 5a08 	vldr	s11, [r0, #32]
 8019f32:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019f36:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8019f3a:	ee25 5a06 	vmul.f32	s10, s10, s12
 8019f3e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8019f42:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019f44:	698b      	ldr	r3, [r1, #24]
 8019f46:	1a9b      	subs	r3, r3, r2
 8019f48:	ee07 3a10 	vmov	s14, r3
 8019f4c:	684b      	ldr	r3, [r1, #4]
 8019f4e:	1a9b      	subs	r3, r3, r2
 8019f50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019f54:	ee01 3a90 	vmov	s3, r3
 8019f58:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019f5c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019f60:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019f64:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019f68:	eea1 7a21 	vfma.f32	s14, s2, s3
 8019f6c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019f70:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019f74:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019f76:	694a      	ldr	r2, [r1, #20]
 8019f78:	1b13      	subs	r3, r2, r4
 8019f7a:	ee03 3a10 	vmov	s6, r3
 8019f7e:	680b      	ldr	r3, [r1, #0]
 8019f80:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019f84:	1b1b      	subs	r3, r3, r4
 8019f86:	ee23 3a04 	vmul.f32	s6, s6, s8
 8019f8a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8019f8e:	ee03 3a10 	vmov	s6, r3
 8019f92:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019f96:	ee23 4a04 	vmul.f32	s8, s6, s8
 8019f9a:	eee1 5a04 	vfma.f32	s11, s2, s8
 8019f9e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019fa2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019fa6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8019faa:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8019fae:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fb6:	dd13      	ble.n	8019fe0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8019fb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019fbc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8019fc0:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019fc2:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fce:	dd15      	ble.n	8019ffc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8019fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019fd4:	6403      	str	r3, [r0, #64]	; 0x40
 8019fd6:	bd70      	pop	{r4, r5, r6, pc}
 8019fd8:	4623      	mov	r3, r4
 8019fda:	e6fd      	b.n	8019dd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019fdc:	462a      	mov	r2, r5
 8019fde:	e706      	b.n	8019dee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019fe0:	d502      	bpl.n	8019fe8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8019fe2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8019fe6:	e7e9      	b.n	8019fbc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8019fe8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019fec:	eea3 2a85 	vfma.f32	s4, s7, s10
 8019ff0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ff8:	dade      	bge.n	8019fb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8019ffa:	e7f2      	b.n	8019fe2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019ffc:	d502      	bpl.n	801a004 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8019ffe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a002:	e7e7      	b.n	8019fd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801a004:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801a008:	eee3 4a86 	vfma.f32	s9, s7, s12
 801a00c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801a010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a014:	dadc      	bge.n	8019fd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801a016:	e7f2      	b.n	8019ffe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801a018:	3d800000 	.word	0x3d800000

0801a01c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801a01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a020:	2714      	movs	r7, #20
 801a022:	435f      	muls	r7, r3
 801a024:	eb02 0c07 	add.w	ip, r2, r7
 801a028:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801a02c:	f115 0e0f 	adds.w	lr, r5, #15
 801a030:	f100 80a2 	bmi.w	801a178 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801a034:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801a038:	9c08      	ldr	r4, [sp, #32]
 801a03a:	2614      	movs	r6, #20
 801a03c:	f8c0 e014 	str.w	lr, [r0, #20]
 801a040:	4366      	muls	r6, r4
 801a042:	eb02 0806 	add.w	r8, r2, r6
 801a046:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801a04a:	f115 040f 	adds.w	r4, r5, #15
 801a04e:	f100 809f 	bmi.w	801a190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801a052:	1124      	asrs	r4, r4, #4
 801a054:	eba4 040e 	sub.w	r4, r4, lr
 801a058:	6184      	str	r4, [r0, #24]
 801a05a:	2c00      	cmp	r4, #0
 801a05c:	f000 808a 	beq.w	801a174 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801a060:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801a064:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801a068:	5995      	ldr	r5, [r2, r6]
 801a06a:	eba4 0809 	sub.w	r8, r4, r9
 801a06e:	59d4      	ldr	r4, [r2, r7]
 801a070:	eba5 0a04 	sub.w	sl, r5, r4
 801a074:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801a078:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801a07c:	fb0e fe05 	mul.w	lr, lr, r5
 801a080:	fb0a ee19 	mls	lr, sl, r9, lr
 801a084:	fb08 e404 	mla	r4, r8, r4, lr
 801a088:	3c01      	subs	r4, #1
 801a08a:	19a4      	adds	r4, r4, r6
 801a08c:	f100 808c 	bmi.w	801a1a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801a090:	fb94 fef6 	sdiv	lr, r4, r6
 801a094:	fb06 441e 	mls	r4, r6, lr, r4
 801a098:	f8c0 e000 	str.w	lr, [r0]
 801a09c:	6104      	str	r4, [r0, #16]
 801a09e:	2d00      	cmp	r5, #0
 801a0a0:	f2c0 8095 	blt.w	801a1ce <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801a0a4:	fb95 f4f6 	sdiv	r4, r5, r6
 801a0a8:	fb06 5514 	mls	r5, r6, r4, r5
 801a0ac:	6044      	str	r4, [r0, #4]
 801a0ae:	6085      	str	r5, [r0, #8]
 801a0b0:	60c6      	str	r6, [r0, #12]
 801a0b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a0b6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801a0ba:	6945      	ldr	r5, [r0, #20]
 801a0bc:	59d2      	ldr	r2, [r2, r7]
 801a0be:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801a0c2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801a1f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801a0c6:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a0ca:	ee07 4a10 	vmov	s14, r4
 801a0ce:	6804      	ldr	r4, [r0, #0]
 801a0d0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801a0d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a0d8:	ee07 2a90 	vmov	s15, r2
 801a0dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a0e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a0e8:	edd3 6a00 	vldr	s13, [r3]
 801a0ec:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a0f0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801a0f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a0f8:	edc0 6a07 	vstr	s13, [r0, #28]
 801a0fc:	edd0 6a01 	vldr	s13, [r0, #4]
 801a100:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801a104:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a108:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801a10c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a110:	ed80 6a08 	vstr	s12, [r0, #32]
 801a114:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801a116:	6242      	str	r2, [r0, #36]	; 0x24
 801a118:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801a11c:	ed93 6a03 	vldr	s12, [r3, #12]
 801a120:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a124:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a128:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801a12c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801a130:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801a134:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801a138:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a13c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801a140:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801a142:	6302      	str	r2, [r0, #48]	; 0x30
 801a144:	ed93 6a06 	vldr	s12, [r3, #24]
 801a148:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801a14c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a150:	eeb0 7a46 	vmov.f32	s14, s12
 801a154:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801a158:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a15c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801a160:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801a164:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801a168:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a16c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801a170:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801a172:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a178:	2410      	movs	r4, #16
 801a17a:	f1c5 0501 	rsb	r5, r5, #1
 801a17e:	fb9e fef4 	sdiv	lr, lr, r4
 801a182:	f015 050f 	ands.w	r5, r5, #15
 801a186:	bf18      	it	ne
 801a188:	2501      	movne	r5, #1
 801a18a:	ebae 0e05 	sub.w	lr, lr, r5
 801a18e:	e753      	b.n	801a038 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801a190:	f04f 0910 	mov.w	r9, #16
 801a194:	f1c5 0501 	rsb	r5, r5, #1
 801a198:	fb94 f4f9 	sdiv	r4, r4, r9
 801a19c:	f015 050f 	ands.w	r5, r5, #15
 801a1a0:	bf18      	it	ne
 801a1a2:	2501      	movne	r5, #1
 801a1a4:	1b64      	subs	r4, r4, r5
 801a1a6:	e755      	b.n	801a054 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801a1a8:	4264      	negs	r4, r4
 801a1aa:	fb94 fef6 	sdiv	lr, r4, r6
 801a1ae:	f1ce 0800 	rsb	r8, lr, #0
 801a1b2:	fb06 441e 	mls	r4, r6, lr, r4
 801a1b6:	f8c0 8000 	str.w	r8, [r0]
 801a1ba:	6104      	str	r4, [r0, #16]
 801a1bc:	2c00      	cmp	r4, #0
 801a1be:	f43f af6e 	beq.w	801a09e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801a1c2:	ea6f 0e0e 	mvn.w	lr, lr
 801a1c6:	1b34      	subs	r4, r6, r4
 801a1c8:	f8c0 e000 	str.w	lr, [r0]
 801a1cc:	e766      	b.n	801a09c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801a1ce:	426d      	negs	r5, r5
 801a1d0:	fb95 f4f6 	sdiv	r4, r5, r6
 801a1d4:	f1c4 0e00 	rsb	lr, r4, #0
 801a1d8:	fb06 5514 	mls	r5, r6, r4, r5
 801a1dc:	f8c0 e004 	str.w	lr, [r0, #4]
 801a1e0:	6085      	str	r5, [r0, #8]
 801a1e2:	2d00      	cmp	r5, #0
 801a1e4:	f43f af64 	beq.w	801a0b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801a1e8:	43e4      	mvns	r4, r4
 801a1ea:	1b75      	subs	r5, r6, r5
 801a1ec:	6044      	str	r4, [r0, #4]
 801a1ee:	e75e      	b.n	801a0ae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801a1f0:	3d800000 	.word	0x3d800000

0801a1f4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801a1f4:	4602      	mov	r2, r0
 801a1f6:	b148      	cbz	r0, 801a20c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	b298      	uxth	r0, r3
 801a1fc:	3301      	adds	r3, #1
 801a1fe:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a202:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801a206:	2900      	cmp	r1, #0
 801a208:	d1f7      	bne.n	801a1fa <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801a20a:	4770      	bx	lr
 801a20c:	4770      	bx	lr

0801a20e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801a20e:	b530      	push	{r4, r5, lr}
 801a210:	4604      	mov	r4, r0
 801a212:	b159      	cbz	r1, 801a22c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801a214:	b148      	cbz	r0, 801a22a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a216:	2300      	movs	r3, #0
 801a218:	b298      	uxth	r0, r3
 801a21a:	4282      	cmp	r2, r0
 801a21c:	d905      	bls.n	801a22a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801a21e:	5ccd      	ldrb	r5, [r1, r3]
 801a220:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801a224:	3301      	adds	r3, #1
 801a226:	2d00      	cmp	r5, #0
 801a228:	d1f6      	bne.n	801a218 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801a22a:	bd30      	pop	{r4, r5, pc}
 801a22c:	4608      	mov	r0, r1
 801a22e:	e7fc      	b.n	801a22a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801a230 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801a230:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a232:	468c      	mov	ip, r1
 801a234:	b08b      	sub	sp, #44	; 0x2c
 801a236:	2100      	movs	r1, #0
 801a238:	ae01      	add	r6, sp, #4
 801a23a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a23e:	211f      	movs	r1, #31
 801a240:	fbb0 f7f3 	udiv	r7, r0, r3
 801a244:	fb03 0517 	mls	r5, r3, r7, r0
 801a248:	4638      	mov	r0, r7
 801a24a:	b2ec      	uxtb	r4, r5
 801a24c:	2d09      	cmp	r5, #9
 801a24e:	bfd4      	ite	le
 801a250:	3430      	addle	r4, #48	; 0x30
 801a252:	3457      	addgt	r4, #87	; 0x57
 801a254:	b2e4      	uxtb	r4, r4
 801a256:	558c      	strb	r4, [r1, r6]
 801a258:	1e4c      	subs	r4, r1, #1
 801a25a:	b92f      	cbnz	r7, 801a268 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801a25c:	4431      	add	r1, r6
 801a25e:	4660      	mov	r0, ip
 801a260:	f7ff ffd5 	bl	801a20e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a264:	b00b      	add	sp, #44	; 0x2c
 801a266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a268:	4621      	mov	r1, r4
 801a26a:	e7e9      	b.n	801a240 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801a26c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a26e:	4607      	mov	r7, r0
 801a270:	b08b      	sub	sp, #44	; 0x2c
 801a272:	4608      	mov	r0, r1
 801a274:	b341      	cbz	r1, 801a2c8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a276:	1e99      	subs	r1, r3, #2
 801a278:	2922      	cmp	r1, #34	; 0x22
 801a27a:	d825      	bhi.n	801a2c8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801a27c:	2100      	movs	r1, #0
 801a27e:	463c      	mov	r4, r7
 801a280:	261f      	movs	r6, #31
 801a282:	f10d 0c04 	add.w	ip, sp, #4
 801a286:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a28a:	1e71      	subs	r1, r6, #1
 801a28c:	fb94 fef3 	sdiv	lr, r4, r3
 801a290:	fb03 441e 	mls	r4, r3, lr, r4
 801a294:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801a298:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801a29c:	b2ec      	uxtb	r4, r5
 801a29e:	2d09      	cmp	r5, #9
 801a2a0:	bfd4      	ite	le
 801a2a2:	3430      	addle	r4, #48	; 0x30
 801a2a4:	3457      	addgt	r4, #87	; 0x57
 801a2a6:	b2e4      	uxtb	r4, r4
 801a2a8:	f80c 4006 	strb.w	r4, [ip, r6]
 801a2ac:	4674      	mov	r4, lr
 801a2ae:	b96c      	cbnz	r4, 801a2cc <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801a2b0:	2f00      	cmp	r7, #0
 801a2b2:	da05      	bge.n	801a2c0 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801a2b4:	ab0a      	add	r3, sp, #40	; 0x28
 801a2b6:	4419      	add	r1, r3
 801a2b8:	232d      	movs	r3, #45	; 0x2d
 801a2ba:	f801 3c24 	strb.w	r3, [r1, #-36]
 801a2be:	1eb1      	subs	r1, r6, #2
 801a2c0:	3101      	adds	r1, #1
 801a2c2:	4461      	add	r1, ip
 801a2c4:	f7ff ffa3 	bl	801a20e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801a2c8:	b00b      	add	sp, #44	; 0x2c
 801a2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2cc:	460e      	mov	r6, r1
 801a2ce:	e7dc      	b.n	801a28a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801a2d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2d4:	b085      	sub	sp, #20
 801a2d6:	4691      	mov	r9, r2
 801a2d8:	6802      	ldr	r2, [r0, #0]
 801a2da:	4688      	mov	r8, r1
 801a2dc:	461c      	mov	r4, r3
 801a2de:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801a2e2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a2e6:	4683      	mov	fp, r0
 801a2e8:	4610      	mov	r0, r2
 801a2ea:	9103      	str	r1, [sp, #12]
 801a2ec:	9302      	str	r3, [sp, #8]
 801a2ee:	9201      	str	r2, [sp, #4]
 801a2f0:	f7ff ff80 	bl	801a1f4 <_ZN8touchgfx7Unicode6strlenEPKt>
 801a2f4:	f1b8 0f00 	cmp.w	r8, #0
 801a2f8:	bf0c      	ite	eq
 801a2fa:	4684      	moveq	ip, r0
 801a2fc:	f100 0c01 	addne.w	ip, r0, #1
 801a300:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801a304:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801a308:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a30a:	fa1f fc8c 	uxth.w	ip, ip
 801a30e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a310:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801a314:	9903      	ldr	r1, [sp, #12]
 801a316:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a31a:	d041      	beq.n	801a3a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a31c:	d834      	bhi.n	801a388 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801a31e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801a322:	d059      	beq.n	801a3d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801a324:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801a328:	d03a      	beq.n	801a3a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801a32a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801a32e:	d034      	beq.n	801a39a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a330:	2400      	movs	r4, #0
 801a332:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801a336:	3a01      	subs	r2, #1
 801a338:	b169      	cbz	r1, 801a356 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a33a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a33c:	458c      	cmp	ip, r1
 801a33e:	da09      	bge.n	801a354 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a340:	eba1 010c 	sub.w	r1, r1, ip
 801a344:	b289      	uxth	r1, r1
 801a346:	b933      	cbnz	r3, 801a356 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a348:	2e00      	cmp	r6, #0
 801a34a:	d051      	beq.n	801a3f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a34c:	2800      	cmp	r0, #0
 801a34e:	d04f      	beq.n	801a3f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801a350:	440c      	add	r4, r1
 801a352:	b2a4      	uxth	r4, r4
 801a354:	2100      	movs	r1, #0
 801a356:	682b      	ldr	r3, [r5, #0]
 801a358:	4293      	cmp	r3, r2
 801a35a:	da07      	bge.n	801a36c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a35c:	f1b8 0f00 	cmp.w	r8, #0
 801a360:	d004      	beq.n	801a36c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801a362:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801a366:	682b      	ldr	r3, [r5, #0]
 801a368:	3301      	adds	r3, #1
 801a36a:	602b      	str	r3, [r5, #0]
 801a36c:	2730      	movs	r7, #48	; 0x30
 801a36e:	2c00      	cmp	r4, #0
 801a370:	d04e      	beq.n	801a410 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a372:	682e      	ldr	r6, [r5, #0]
 801a374:	3c01      	subs	r4, #1
 801a376:	42b2      	cmp	r2, r6
 801a378:	b2a4      	uxth	r4, r4
 801a37a:	dd49      	ble.n	801a410 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a37c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a380:	682b      	ldr	r3, [r5, #0]
 801a382:	3301      	adds	r3, #1
 801a384:	602b      	str	r3, [r5, #0]
 801a386:	e7f2      	b.n	801a36e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801a388:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801a38c:	d01d      	beq.n	801a3ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801a38e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801a392:	d002      	beq.n	801a39a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801a394:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801a398:	e7c9      	b.n	801a32e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801a39a:	4684      	mov	ip, r0
 801a39c:	f04f 0800 	mov.w	r8, #0
 801a3a0:	2c00      	cmp	r4, #0
 801a3a2:	d0c6      	beq.n	801a332 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a3a4:	b947      	cbnz	r7, 801a3b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a3a6:	2801      	cmp	r0, #1
 801a3a8:	d106      	bne.n	801a3b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801a3aa:	8814      	ldrh	r4, [r2, #0]
 801a3ac:	2c30      	cmp	r4, #48	; 0x30
 801a3ae:	bf02      	ittt	eq
 801a3b0:	3202      	addeq	r2, #2
 801a3b2:	4638      	moveq	r0, r7
 801a3b4:	f8cb 2000 	streq.w	r2, [fp]
 801a3b8:	45bc      	cmp	ip, r7
 801a3ba:	da14      	bge.n	801a3e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801a3bc:	b2bf      	uxth	r7, r7
 801a3be:	eba7 040c 	sub.w	r4, r7, ip
 801a3c2:	46bc      	mov	ip, r7
 801a3c4:	b2a4      	uxth	r4, r4
 801a3c6:	2600      	movs	r6, #0
 801a3c8:	e7b3      	b.n	801a332 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a3ca:	4684      	mov	ip, r0
 801a3cc:	b16c      	cbz	r4, 801a3ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801a3ce:	42b8      	cmp	r0, r7
 801a3d0:	dd00      	ble.n	801a3d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801a3d2:	b2b8      	uxth	r0, r7
 801a3d4:	2400      	movs	r4, #0
 801a3d6:	e003      	b.n	801a3e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801a3d8:	f04f 0c01 	mov.w	ip, #1
 801a3dc:	2400      	movs	r4, #0
 801a3de:	4660      	mov	r0, ip
 801a3e0:	4626      	mov	r6, r4
 801a3e2:	46a0      	mov	r8, r4
 801a3e4:	e7a5      	b.n	801a332 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a3e6:	2400      	movs	r4, #0
 801a3e8:	e7ed      	b.n	801a3c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801a3ea:	4626      	mov	r6, r4
 801a3ec:	46a0      	mov	r8, r4
 801a3ee:	e7a0      	b.n	801a332 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801a3f0:	2900      	cmp	r1, #0
 801a3f2:	d0b0      	beq.n	801a356 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a3f4:	2720      	movs	r7, #32
 801a3f6:	682e      	ldr	r6, [r5, #0]
 801a3f8:	2900      	cmp	r1, #0
 801a3fa:	d0ac      	beq.n	801a356 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801a3fc:	3901      	subs	r1, #1
 801a3fe:	4296      	cmp	r6, r2
 801a400:	b289      	uxth	r1, r1
 801a402:	daa7      	bge.n	801a354 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801a404:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801a408:	682b      	ldr	r3, [r5, #0]
 801a40a:	3301      	adds	r3, #1
 801a40c:	602b      	str	r3, [r5, #0]
 801a40e:	e7f2      	b.n	801a3f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801a410:	b188      	cbz	r0, 801a436 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a412:	682b      	ldr	r3, [r5, #0]
 801a414:	3801      	subs	r0, #1
 801a416:	429a      	cmp	r2, r3
 801a418:	b280      	uxth	r0, r0
 801a41a:	dd0c      	ble.n	801a436 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801a41c:	f8db 3000 	ldr.w	r3, [fp]
 801a420:	1c9c      	adds	r4, r3, #2
 801a422:	f8cb 4000 	str.w	r4, [fp]
 801a426:	881c      	ldrh	r4, [r3, #0]
 801a428:	682b      	ldr	r3, [r5, #0]
 801a42a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801a42e:	682b      	ldr	r3, [r5, #0]
 801a430:	3301      	adds	r3, #1
 801a432:	602b      	str	r3, [r5, #0]
 801a434:	e7ec      	b.n	801a410 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801a436:	2620      	movs	r6, #32
 801a438:	b151      	cbz	r1, 801a450 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a43a:	6828      	ldr	r0, [r5, #0]
 801a43c:	3901      	subs	r1, #1
 801a43e:	4282      	cmp	r2, r0
 801a440:	b289      	uxth	r1, r1
 801a442:	dd05      	ble.n	801a450 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801a444:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801a448:	682b      	ldr	r3, [r5, #0]
 801a44a:	3301      	adds	r3, #1
 801a44c:	602b      	str	r3, [r5, #0]
 801a44e:	e7f3      	b.n	801a438 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801a450:	b005      	add	sp, #20
 801a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a456 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801a456:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a45a:	2400      	movs	r4, #0
 801a45c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801a460:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801a464:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801a468:	8014      	strh	r4, [r2, #0]
 801a46a:	701c      	strb	r4, [r3, #0]
 801a46c:	f888 4000 	strb.w	r4, [r8]
 801a470:	f88c 4000 	strb.w	r4, [ip]
 801a474:	f88e 4000 	strb.w	r4, [lr]
 801a478:	703c      	strb	r4, [r7, #0]
 801a47a:	6804      	ldr	r4, [r0, #0]
 801a47c:	b1a4      	cbz	r4, 801a4a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801a47e:	8824      	ldrh	r4, [r4, #0]
 801a480:	f04f 0901 	mov.w	r9, #1
 801a484:	b314      	cbz	r4, 801a4cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a486:	2c2b      	cmp	r4, #43	; 0x2b
 801a488:	d001      	beq.n	801a48e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801a48a:	2c20      	cmp	r4, #32
 801a48c:	d110      	bne.n	801a4b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801a48e:	8014      	strh	r4, [r2, #0]
 801a490:	6804      	ldr	r4, [r0, #0]
 801a492:	b10c      	cbz	r4, 801a498 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801a494:	3402      	adds	r4, #2
 801a496:	6004      	str	r4, [r0, #0]
 801a498:	680c      	ldr	r4, [r1, #0]
 801a49a:	b10c      	cbz	r4, 801a4a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801a49c:	3401      	adds	r4, #1
 801a49e:	600c      	str	r4, [r1, #0]
 801a4a0:	6804      	ldr	r4, [r0, #0]
 801a4a2:	b17c      	cbz	r4, 801a4c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801a4a4:	8824      	ldrh	r4, [r4, #0]
 801a4a6:	e7ed      	b.n	801a484 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a4a8:	680c      	ldr	r4, [r1, #0]
 801a4aa:	b17c      	cbz	r4, 801a4cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a4ac:	7824      	ldrb	r4, [r4, #0]
 801a4ae:	e7e7      	b.n	801a480 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801a4b0:	2c2d      	cmp	r4, #45	; 0x2d
 801a4b2:	d102      	bne.n	801a4ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801a4b4:	f883 9000 	strb.w	r9, [r3]
 801a4b8:	e7ea      	b.n	801a490 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a4ba:	2c23      	cmp	r4, #35	; 0x23
 801a4bc:	d107      	bne.n	801a4ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801a4be:	f888 9000 	strb.w	r9, [r8]
 801a4c2:	e7e5      	b.n	801a490 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801a4c4:	680c      	ldr	r4, [r1, #0]
 801a4c6:	b10c      	cbz	r4, 801a4cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801a4c8:	7824      	ldrb	r4, [r4, #0]
 801a4ca:	e7db      	b.n	801a484 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801a4cc:	2400      	movs	r4, #0
 801a4ce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801a4d2:	2b09      	cmp	r3, #9
 801a4d4:	d901      	bls.n	801a4da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801a4d6:	2c2a      	cmp	r4, #42	; 0x2a
 801a4d8:	d122      	bne.n	801a520 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a4da:	2301      	movs	r3, #1
 801a4dc:	2c30      	cmp	r4, #48	; 0x30
 801a4de:	f88e 3000 	strb.w	r3, [lr]
 801a4e2:	d10d      	bne.n	801a500 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a4e4:	f88c 3000 	strb.w	r3, [ip]
 801a4e8:	6803      	ldr	r3, [r0, #0]
 801a4ea:	b10b      	cbz	r3, 801a4f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801a4ec:	3302      	adds	r3, #2
 801a4ee:	6003      	str	r3, [r0, #0]
 801a4f0:	680b      	ldr	r3, [r1, #0]
 801a4f2:	b10b      	cbz	r3, 801a4f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801a4f4:	3301      	adds	r3, #1
 801a4f6:	600b      	str	r3, [r1, #0]
 801a4f8:	6803      	ldr	r3, [r0, #0]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d02f      	beq.n	801a55e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801a4fe:	881c      	ldrh	r4, [r3, #0]
 801a500:	2c2a      	cmp	r4, #42	; 0x2a
 801a502:	d135      	bne.n	801a570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a504:	f04f 33ff 	mov.w	r3, #4294967295
 801a508:	6033      	str	r3, [r6, #0]
 801a50a:	6803      	ldr	r3, [r0, #0]
 801a50c:	b10b      	cbz	r3, 801a512 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801a50e:	3302      	adds	r3, #2
 801a510:	6003      	str	r3, [r0, #0]
 801a512:	680b      	ldr	r3, [r1, #0]
 801a514:	b10b      	cbz	r3, 801a51a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801a516:	3301      	adds	r3, #1
 801a518:	600b      	str	r3, [r1, #0]
 801a51a:	6803      	ldr	r3, [r0, #0]
 801a51c:	b31b      	cbz	r3, 801a566 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801a51e:	881c      	ldrh	r4, [r3, #0]
 801a520:	2c2e      	cmp	r4, #46	; 0x2e
 801a522:	d11a      	bne.n	801a55a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a524:	2301      	movs	r3, #1
 801a526:	703b      	strb	r3, [r7, #0]
 801a528:	6803      	ldr	r3, [r0, #0]
 801a52a:	b10b      	cbz	r3, 801a530 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801a52c:	3302      	adds	r3, #2
 801a52e:	6003      	str	r3, [r0, #0]
 801a530:	680b      	ldr	r3, [r1, #0]
 801a532:	b10b      	cbz	r3, 801a538 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801a534:	3301      	adds	r3, #1
 801a536:	600b      	str	r3, [r1, #0]
 801a538:	6803      	ldr	r3, [r0, #0]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d036      	beq.n	801a5ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801a53e:	881b      	ldrh	r3, [r3, #0]
 801a540:	2b2a      	cmp	r3, #42	; 0x2a
 801a542:	d137      	bne.n	801a5b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a544:	f04f 33ff 	mov.w	r3, #4294967295
 801a548:	602b      	str	r3, [r5, #0]
 801a54a:	6803      	ldr	r3, [r0, #0]
 801a54c:	b10b      	cbz	r3, 801a552 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801a54e:	3302      	adds	r3, #2
 801a550:	6003      	str	r3, [r0, #0]
 801a552:	680b      	ldr	r3, [r1, #0]
 801a554:	b10b      	cbz	r3, 801a55a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a556:	3301      	adds	r3, #1
 801a558:	600b      	str	r3, [r1, #0]
 801a55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a55e:	680c      	ldr	r4, [r1, #0]
 801a560:	b134      	cbz	r4, 801a570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801a562:	7824      	ldrb	r4, [r4, #0]
 801a564:	e7cc      	b.n	801a500 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801a566:	680b      	ldr	r3, [r1, #0]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d0f6      	beq.n	801a55a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801a56c:	781c      	ldrb	r4, [r3, #0]
 801a56e:	e7d7      	b.n	801a520 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a570:	2300      	movs	r3, #0
 801a572:	220a      	movs	r2, #10
 801a574:	6033      	str	r3, [r6, #0]
 801a576:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a57a:	fa1f f38c 	uxth.w	r3, ip
 801a57e:	2b09      	cmp	r3, #9
 801a580:	d8ce      	bhi.n	801a520 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801a582:	6833      	ldr	r3, [r6, #0]
 801a584:	fb02 c303 	mla	r3, r2, r3, ip
 801a588:	6033      	str	r3, [r6, #0]
 801a58a:	6803      	ldr	r3, [r0, #0]
 801a58c:	b10b      	cbz	r3, 801a592 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801a58e:	3302      	adds	r3, #2
 801a590:	6003      	str	r3, [r0, #0]
 801a592:	680b      	ldr	r3, [r1, #0]
 801a594:	b10b      	cbz	r3, 801a59a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801a596:	3301      	adds	r3, #1
 801a598:	600b      	str	r3, [r1, #0]
 801a59a:	6803      	ldr	r3, [r0, #0]
 801a59c:	b10b      	cbz	r3, 801a5a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801a59e:	881c      	ldrh	r4, [r3, #0]
 801a5a0:	e7e9      	b.n	801a576 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a5a2:	680c      	ldr	r4, [r1, #0]
 801a5a4:	2c00      	cmp	r4, #0
 801a5a6:	d0e6      	beq.n	801a576 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a5a8:	7824      	ldrb	r4, [r4, #0]
 801a5aa:	e7e4      	b.n	801a576 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801a5ac:	680b      	ldr	r3, [r1, #0]
 801a5ae:	b10b      	cbz	r3, 801a5b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801a5b0:	781b      	ldrb	r3, [r3, #0]
 801a5b2:	e7c5      	b.n	801a540 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801a5b4:	2200      	movs	r2, #0
 801a5b6:	240a      	movs	r4, #10
 801a5b8:	602a      	str	r2, [r5, #0]
 801a5ba:	3b30      	subs	r3, #48	; 0x30
 801a5bc:	682a      	ldr	r2, [r5, #0]
 801a5be:	b29e      	uxth	r6, r3
 801a5c0:	2e09      	cmp	r6, #9
 801a5c2:	d813      	bhi.n	801a5ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801a5c4:	fb04 3302 	mla	r3, r4, r2, r3
 801a5c8:	602b      	str	r3, [r5, #0]
 801a5ca:	6803      	ldr	r3, [r0, #0]
 801a5cc:	b10b      	cbz	r3, 801a5d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801a5ce:	3302      	adds	r3, #2
 801a5d0:	6003      	str	r3, [r0, #0]
 801a5d2:	680b      	ldr	r3, [r1, #0]
 801a5d4:	b10b      	cbz	r3, 801a5da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801a5d6:	3301      	adds	r3, #1
 801a5d8:	600b      	str	r3, [r1, #0]
 801a5da:	6803      	ldr	r3, [r0, #0]
 801a5dc:	b10b      	cbz	r3, 801a5e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801a5de:	881b      	ldrh	r3, [r3, #0]
 801a5e0:	e7eb      	b.n	801a5ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a5e2:	680b      	ldr	r3, [r1, #0]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d0e8      	beq.n	801a5ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a5e8:	781b      	ldrb	r3, [r3, #0]
 801a5ea:	e7e6      	b.n	801a5ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801a5ec:	2a06      	cmp	r2, #6
 801a5ee:	bfa8      	it	ge
 801a5f0:	2206      	movge	r2, #6
 801a5f2:	602a      	str	r2, [r5, #0]
 801a5f4:	e7b1      	b.n	801a55a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801a5f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801a5f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5fa:	b0a3      	sub	sp, #140	; 0x8c
 801a5fc:	2600      	movs	r6, #0
 801a5fe:	4607      	mov	r7, r0
 801a600:	4688      	mov	r8, r1
 801a602:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801a606:	4631      	mov	r1, r6
 801a608:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801a60a:	4648      	mov	r0, r9
 801a60c:	960d      	str	r6, [sp, #52]	; 0x34
 801a60e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801a612:	2242      	movs	r2, #66	; 0x42
 801a614:	f008 fd74 	bl	8023100 <memset>
 801a618:	b15f      	cbz	r7, 801a632 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801a61a:	f108 3aff 	add.w	sl, r8, #4294967295
 801a61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a620:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a622:	b152      	cbz	r2, 801a63a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801a624:	8812      	ldrh	r2, [r2, #0]
 801a626:	b10a      	cbz	r2, 801a62c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801a628:	459a      	cmp	sl, r3
 801a62a:	dc2e      	bgt.n	801a68a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801a62c:	2200      	movs	r2, #0
 801a62e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801a632:	4638      	mov	r0, r7
 801a634:	b023      	add	sp, #140	; 0x8c
 801a636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a63a:	9a08      	ldr	r2, [sp, #32]
 801a63c:	2a00      	cmp	r2, #0
 801a63e:	d0f5      	beq.n	801a62c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801a640:	7812      	ldrb	r2, [r2, #0]
 801a642:	e7f0      	b.n	801a626 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801a644:	2d00      	cmp	r5, #0
 801a646:	d0ea      	beq.n	801a61e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a648:	782a      	ldrb	r2, [r5, #0]
 801a64a:	b142      	cbz	r2, 801a65e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801a64c:	2a25      	cmp	r2, #37	; 0x25
 801a64e:	d001      	beq.n	801a654 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801a650:	459a      	cmp	sl, r3
 801a652:	dc08      	bgt.n	801a666 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801a654:	f1bb 0f00 	cmp.w	fp, #0
 801a658:	d121      	bne.n	801a69e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801a65a:	2d00      	cmp	r5, #0
 801a65c:	d0df      	beq.n	801a61e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a65e:	782a      	ldrb	r2, [r5, #0]
 801a660:	f04f 0b00 	mov.w	fp, #0
 801a664:	e01d      	b.n	801a6a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801a666:	f1bb 0f00 	cmp.w	fp, #0
 801a66a:	d077      	beq.n	801a75c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801a66c:	f8bb 2000 	ldrh.w	r2, [fp]
 801a670:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801a674:	f1bb 0f00 	cmp.w	fp, #0
 801a678:	d002      	beq.n	801a680 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801a67a:	f10b 0202 	add.w	r2, fp, #2
 801a67e:	9209      	str	r2, [sp, #36]	; 0x24
 801a680:	b10d      	cbz	r5, 801a686 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801a682:	3501      	adds	r5, #1
 801a684:	9508      	str	r5, [sp, #32]
 801a686:	3301      	adds	r3, #1
 801a688:	930d      	str	r3, [sp, #52]	; 0x34
 801a68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a68c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801a690:	f1bb 0f00 	cmp.w	fp, #0
 801a694:	d0d6      	beq.n	801a644 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801a696:	f8bb 2000 	ldrh.w	r2, [fp]
 801a69a:	2a00      	cmp	r2, #0
 801a69c:	d1d6      	bne.n	801a64c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801a69e:	f8bb 2000 	ldrh.w	r2, [fp]
 801a6a2:	2a00      	cmp	r2, #0
 801a6a4:	d0bb      	beq.n	801a61e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a6a6:	459a      	cmp	sl, r3
 801a6a8:	ddb9      	ble.n	801a61e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a6aa:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801a6ae:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801a6b2:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801a6b6:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801a6ba:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801a6be:	960e      	str	r6, [sp, #56]	; 0x38
 801a6c0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801a6c4:	960f      	str	r6, [sp, #60]	; 0x3c
 801a6c6:	f1bb 0f00 	cmp.w	fp, #0
 801a6ca:	d002      	beq.n	801a6d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801a6cc:	f10b 0302 	add.w	r3, fp, #2
 801a6d0:	9309      	str	r3, [sp, #36]	; 0x24
 801a6d2:	b10d      	cbz	r5, 801a6d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801a6d4:	1c6b      	adds	r3, r5, #1
 801a6d6:	9308      	str	r3, [sp, #32]
 801a6d8:	ab0f      	add	r3, sp, #60	; 0x3c
 801a6da:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801a6de:	a908      	add	r1, sp, #32
 801a6e0:	a809      	add	r0, sp, #36	; 0x24
 801a6e2:	9305      	str	r3, [sp, #20]
 801a6e4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801a6e8:	9304      	str	r3, [sp, #16]
 801a6ea:	ab0e      	add	r3, sp, #56	; 0x38
 801a6ec:	9303      	str	r3, [sp, #12]
 801a6ee:	ab0c      	add	r3, sp, #48	; 0x30
 801a6f0:	9302      	str	r3, [sp, #8]
 801a6f2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801a6f6:	9301      	str	r3, [sp, #4]
 801a6f8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801a6fc:	9300      	str	r3, [sp, #0]
 801a6fe:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801a702:	f7ff fea8 	bl	801a456 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801a706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a708:	2b00      	cmp	r3, #0
 801a70a:	bfbf      	itttt	lt
 801a70c:	6823      	ldrlt	r3, [r4, #0]
 801a70e:	3404      	addlt	r4, #4
 801a710:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a714:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a718:	2b00      	cmp	r3, #0
 801a71a:	bfbe      	ittt	lt
 801a71c:	6823      	ldrlt	r3, [r4, #0]
 801a71e:	3404      	addlt	r4, #4
 801a720:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a724:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a728:	bfb8      	it	lt
 801a72a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801a72c:	b1d9      	cbz	r1, 801a766 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801a72e:	880b      	ldrh	r3, [r1, #0]
 801a730:	2b69      	cmp	r3, #105	; 0x69
 801a732:	d01f      	beq.n	801a774 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a734:	d82f      	bhi.n	801a796 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801a736:	2b58      	cmp	r3, #88	; 0x58
 801a738:	d01c      	beq.n	801a774 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a73a:	d818      	bhi.n	801a76e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801a73c:	2b25      	cmp	r3, #37	; 0x25
 801a73e:	d034      	beq.n	801a7aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801a740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a742:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801a746:	f1bb 0f00 	cmp.w	fp, #0
 801a74a:	f000 80b7 	beq.w	801a8bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801a74e:	f8bb 5000 	ldrh.w	r5, [fp]
 801a752:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801a756:	3301      	adds	r3, #1
 801a758:	930d      	str	r3, [sp, #52]	; 0x34
 801a75a:	e029      	b.n	801a7b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a75c:	b10d      	cbz	r5, 801a762 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801a75e:	782a      	ldrb	r2, [r5, #0]
 801a760:	e786      	b.n	801a670 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a762:	462a      	mov	r2, r5
 801a764:	e784      	b.n	801a670 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a766:	2a00      	cmp	r2, #0
 801a768:	d0ea      	beq.n	801a740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a76a:	7813      	ldrb	r3, [r2, #0]
 801a76c:	e7e0      	b.n	801a730 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801a76e:	3b63      	subs	r3, #99	; 0x63
 801a770:	2b01      	cmp	r3, #1
 801a772:	d8e5      	bhi.n	801a740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a774:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801a778:	b329      	cbz	r1, 801a7c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801a77a:	880b      	ldrh	r3, [r1, #0]
 801a77c:	2b69      	cmp	r3, #105	; 0x69
 801a77e:	d063      	beq.n	801a848 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a780:	d825      	bhi.n	801a7ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801a782:	2b63      	cmp	r3, #99	; 0x63
 801a784:	d038      	beq.n	801a7f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801a786:	2b64      	cmp	r3, #100	; 0x64
 801a788:	d05e      	beq.n	801a848 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a78a:	2b58      	cmp	r3, #88	; 0x58
 801a78c:	d07a      	beq.n	801a884 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801a78e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801a792:	4625      	mov	r5, r4
 801a794:	e036      	b.n	801a804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a796:	2b73      	cmp	r3, #115	; 0x73
 801a798:	d0ec      	beq.n	801a774 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a79a:	d802      	bhi.n	801a7a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801a79c:	2b6f      	cmp	r3, #111	; 0x6f
 801a79e:	d1cf      	bne.n	801a740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a7a0:	e7e8      	b.n	801a774 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a7a2:	2b75      	cmp	r3, #117	; 0x75
 801a7a4:	d0e6      	beq.n	801a774 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a7a6:	2b78      	cmp	r3, #120	; 0x78
 801a7a8:	e7f9      	b.n	801a79e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801a7aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a7ac:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801a7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7b2:	b10b      	cbz	r3, 801a7b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801a7b4:	3302      	adds	r3, #2
 801a7b6:	9309      	str	r3, [sp, #36]	; 0x24
 801a7b8:	9b08      	ldr	r3, [sp, #32]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	f43f af2f 	beq.w	801a61e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a7c0:	3301      	adds	r3, #1
 801a7c2:	9308      	str	r3, [sp, #32]
 801a7c4:	e72b      	b.n	801a61e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a7c6:	2a00      	cmp	r2, #0
 801a7c8:	d0e1      	beq.n	801a78e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a7ca:	7813      	ldrb	r3, [r2, #0]
 801a7cc:	e7d6      	b.n	801a77c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801a7ce:	2b73      	cmp	r3, #115	; 0x73
 801a7d0:	d036      	beq.n	801a840 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801a7d2:	d807      	bhi.n	801a7e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801a7d4:	2b6f      	cmp	r3, #111	; 0x6f
 801a7d6:	d1da      	bne.n	801a78e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a7d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a7da:	1d25      	adds	r5, r4, #4
 801a7dc:	2308      	movs	r3, #8
 801a7de:	eba8 0202 	sub.w	r2, r8, r2
 801a7e2:	e049      	b.n	801a878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a7e4:	2b75      	cmp	r3, #117	; 0x75
 801a7e6:	d042      	beq.n	801a86e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801a7e8:	2b78      	cmp	r3, #120	; 0x78
 801a7ea:	d1d0      	bne.n	801a78e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a7ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a7ee:	1d25      	adds	r5, r4, #4
 801a7f0:	2310      	movs	r3, #16
 801a7f2:	eba8 0202 	sub.w	r2, r8, r2
 801a7f6:	e03f      	b.n	801a878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a7f8:	6823      	ldr	r3, [r4, #0]
 801a7fa:	1d25      	adds	r5, r4, #4
 801a7fc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801a800:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801a804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a806:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d051      	beq.n	801a8b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801a80e:	881a      	ldrh	r2, [r3, #0]
 801a810:	a80d      	add	r0, sp, #52	; 0x34
 801a812:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801a816:	462c      	mov	r4, r5
 801a818:	9005      	str	r0, [sp, #20]
 801a81a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801a81e:	9004      	str	r0, [sp, #16]
 801a820:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a822:	9003      	str	r0, [sp, #12]
 801a824:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801a828:	9002      	str	r0, [sp, #8]
 801a82a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a82c:	9001      	str	r0, [sp, #4]
 801a82e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801a832:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801a836:	9000      	str	r0, [sp, #0]
 801a838:	a810      	add	r0, sp, #64	; 0x40
 801a83a:	f7ff fd49 	bl	801a2d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801a83e:	e7b7      	b.n	801a7b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a840:	1d25      	adds	r5, r4, #4
 801a842:	6823      	ldr	r3, [r4, #0]
 801a844:	9310      	str	r3, [sp, #64]	; 0x40
 801a846:	e7dd      	b.n	801a804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a848:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a84a:	230a      	movs	r3, #10
 801a84c:	4649      	mov	r1, r9
 801a84e:	6820      	ldr	r0, [r4, #0]
 801a850:	eba8 0202 	sub.w	r2, r8, r2
 801a854:	1d25      	adds	r5, r4, #4
 801a856:	b292      	uxth	r2, r2
 801a858:	f7ff fd08 	bl	801a26c <_ZN8touchgfx7Unicode4itoaElPtti>
 801a85c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a860:	2b2d      	cmp	r3, #45	; 0x2d
 801a862:	d1cf      	bne.n	801a804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a864:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a868:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a86a:	3302      	adds	r3, #2
 801a86c:	e7ea      	b.n	801a844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801a86e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a870:	1d25      	adds	r5, r4, #4
 801a872:	230a      	movs	r3, #10
 801a874:	eba8 0202 	sub.w	r2, r8, r2
 801a878:	b292      	uxth	r2, r2
 801a87a:	4649      	mov	r1, r9
 801a87c:	6820      	ldr	r0, [r4, #0]
 801a87e:	f7ff fcd7 	bl	801a230 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801a882:	e7bf      	b.n	801a804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a886:	2310      	movs	r3, #16
 801a888:	4649      	mov	r1, r9
 801a88a:	6820      	ldr	r0, [r4, #0]
 801a88c:	eba8 0202 	sub.w	r2, r8, r2
 801a890:	1d25      	adds	r5, r4, #4
 801a892:	b292      	uxth	r2, r2
 801a894:	f7ff fccc 	bl	801a230 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801a898:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801a89c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d0af      	beq.n	801a804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a8a4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801a8a8:	2919      	cmp	r1, #25
 801a8aa:	d8f7      	bhi.n	801a89c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a8ac:	3b20      	subs	r3, #32
 801a8ae:	8013      	strh	r3, [r2, #0]
 801a8b0:	e7f4      	b.n	801a89c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a8b2:	9a08      	ldr	r2, [sp, #32]
 801a8b4:	2a00      	cmp	r2, #0
 801a8b6:	d0ab      	beq.n	801a810 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a8b8:	7812      	ldrb	r2, [r2, #0]
 801a8ba:	e7a9      	b.n	801a810 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a8bc:	2d00      	cmp	r5, #0
 801a8be:	f43f af48 	beq.w	801a752 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801a8c2:	782d      	ldrb	r5, [r5, #0]
 801a8c4:	e745      	b.n	801a752 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801a8c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801a8c6:	b507      	push	{r0, r1, r2, lr}
 801a8c8:	9300      	str	r3, [sp, #0]
 801a8ca:	4613      	mov	r3, r2
 801a8cc:	2200      	movs	r2, #0
 801a8ce:	f7ff fe92 	bl	801a5f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801a8d2:	b003      	add	sp, #12
 801a8d4:	f85d fb04 	ldr.w	pc, [sp], #4

0801a8d8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801a8d8:	b40c      	push	{r2, r3}
 801a8da:	b507      	push	{r0, r1, r2, lr}
 801a8dc:	ab04      	add	r3, sp, #16
 801a8de:	f853 2b04 	ldr.w	r2, [r3], #4
 801a8e2:	9301      	str	r3, [sp, #4]
 801a8e4:	f7ff ffef 	bl	801a8c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801a8e8:	b003      	add	sp, #12
 801a8ea:	f85d eb04 	ldr.w	lr, [sp], #4
 801a8ee:	b002      	add	sp, #8
 801a8f0:	4770      	bx	lr
	...

0801a8f4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a8f4:	4b01      	ldr	r3, [pc, #4]	; (801a8fc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a8f6:	6018      	str	r0, [r3, #0]
 801a8f8:	4770      	bx	lr
 801a8fa:	bf00      	nop
 801a8fc:	2400f4a0 	.word	0x2400f4a0

0801a900 <_ZN8touchgfx11FontManager7getFontEt>:
 801a900:	4b03      	ldr	r3, [pc, #12]	; (801a910 <_ZN8touchgfx11FontManager7getFontEt+0x10>)
 801a902:	4601      	mov	r1, r0
 801a904:	6818      	ldr	r0, [r3, #0]
 801a906:	b110      	cbz	r0, 801a90e <_ZN8touchgfx11FontManager7getFontEt+0xe>
 801a908:	6803      	ldr	r3, [r0, #0]
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	4718      	bx	r3
 801a90e:	4770      	bx	lr
 801a910:	2400f4a0 	.word	0x2400f4a0

0801a914 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a914:	4b06      	ldr	r3, [pc, #24]	; (801a930 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a916:	881a      	ldrh	r2, [r3, #0]
 801a918:	4282      	cmp	r2, r0
 801a91a:	d807      	bhi.n	801a92c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a91c:	4b05      	ldr	r3, [pc, #20]	; (801a934 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a91e:	881b      	ldrh	r3, [r3, #0]
 801a920:	4413      	add	r3, r2
 801a922:	4298      	cmp	r0, r3
 801a924:	bfac      	ite	ge
 801a926:	2000      	movge	r0, #0
 801a928:	2001      	movlt	r0, #1
 801a92a:	4770      	bx	lr
 801a92c:	2000      	movs	r0, #0
 801a92e:	4770      	bx	lr
 801a930:	2400f4c0 	.word	0x2400f4c0
 801a934:	2400f4c4 	.word	0x2400f4c4

0801a938 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a938:	b508      	push	{r3, lr}
 801a93a:	4601      	mov	r1, r0
 801a93c:	f7ff ffea 	bl	801a914 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a940:	b118      	cbz	r0, 801a94a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a942:	4b02      	ldr	r3, [pc, #8]	; (801a94c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a94a:	bd08      	pop	{r3, pc}
 801a94c:	2400f4a4 	.word	0x2400f4a4

0801a950 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801a950:	b538      	push	{r3, r4, r5, lr}
 801a952:	4604      	mov	r4, r0
 801a954:	f7ff ffde 	bl	801a914 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a958:	b188      	cbz	r0, 801a97e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801a95a:	4b09      	ldr	r3, [pc, #36]	; (801a980 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801a95c:	881a      	ldrh	r2, [r3, #0]
 801a95e:	4b09      	ldr	r3, [pc, #36]	; (801a984 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801a960:	1aa4      	subs	r4, r4, r2
 801a962:	220e      	movs	r2, #14
 801a964:	681d      	ldr	r5, [r3, #0]
 801a966:	4362      	muls	r2, r4
 801a968:	18ac      	adds	r4, r5, r2
 801a96a:	7b23      	ldrb	r3, [r4, #12]
 801a96c:	f013 0320 	ands.w	r3, r3, #32
 801a970:	bf17      	itett	ne
 801a972:	680b      	ldrne	r3, [r1, #0]
 801a974:	4618      	moveq	r0, r3
 801a976:	50ab      	strne	r3, [r5, r2]
 801a978:	684b      	ldrne	r3, [r1, #4]
 801a97a:	bf18      	it	ne
 801a97c:	6063      	strne	r3, [r4, #4]
 801a97e:	bd38      	pop	{r3, r4, r5, pc}
 801a980:	2400f4c0 	.word	0x2400f4c0
 801a984:	2400f4a8 	.word	0x2400f4a8

0801a988 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801a988:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a98c:	4606      	mov	r6, r0
 801a98e:	460c      	mov	r4, r1
 801a990:	f7ff ffc0 	bl	801a914 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a994:	b918      	cbnz	r0, 801a99e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801a996:	2000      	movs	r0, #0
 801a998:	b002      	add	sp, #8
 801a99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a99e:	4608      	mov	r0, r1
 801a9a0:	f7f8 faa7 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a9a4:	2800      	cmp	r0, #0
 801a9a6:	d1f6      	bne.n	801a996 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a9a8:	4b3f      	ldr	r3, [pc, #252]	; (801aaa8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801a9aa:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801aaac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801a9ae:	881d      	ldrh	r5, [r3, #0]
 801a9b0:	f8d9 a000 	ldr.w	sl, [r9]
 801a9b4:	46c8      	mov	r8, r9
 801a9b6:	1b73      	subs	r3, r6, r5
 801a9b8:	250e      	movs	r5, #14
 801a9ba:	435d      	muls	r5, r3
 801a9bc:	eb0a 0705 	add.w	r7, sl, r5
 801a9c0:	7b3b      	ldrb	r3, [r7, #12]
 801a9c2:	f013 0f20 	tst.w	r3, #32
 801a9c6:	d0e6      	beq.n	801a996 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a9c8:	4621      	mov	r1, r4
 801a9ca:	4638      	mov	r0, r7
 801a9cc:	f7fd f83e 	bl	8017a4c <_ZNK8touchgfx4Rect8includesERKS0_>
 801a9d0:	2800      	cmp	r0, #0
 801a9d2:	d1e1      	bne.n	801a998 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801a9d4:	4639      	mov	r1, r7
 801a9d6:	4620      	mov	r0, r4
 801a9d8:	f7fd f838 	bl	8017a4c <_ZNK8touchgfx4Rect8includesERKS0_>
 801a9dc:	b108      	cbz	r0, 801a9e2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801a9de:	4621      	mov	r1, r4
 801a9e0:	e020      	b.n	801aa24 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801a9e2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a9e6:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801a9ea:	429a      	cmp	r2, r3
 801a9ec:	d11e      	bne.n	801aa2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a9ee:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a9f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801a9f6:	429a      	cmp	r2, r3
 801a9f8:	d118      	bne.n	801aa2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a9fa:	6820      	ldr	r0, [r4, #0]
 801a9fc:	466b      	mov	r3, sp
 801a9fe:	6861      	ldr	r1, [r4, #4]
 801aa00:	c303      	stmia	r3!, {r0, r1}
 801aa02:	4639      	mov	r1, r7
 801aa04:	4668      	mov	r0, sp
 801aa06:	f7f8 ffb9 	bl	801397c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801aa0a:	f8d9 3000 	ldr.w	r3, [r9]
 801aa0e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801aa12:	442b      	add	r3, r5
 801aa14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801aa18:	4413      	add	r3, r2
 801aa1a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801aa1e:	4293      	cmp	r3, r2
 801aa20:	dc04      	bgt.n	801aa2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801aa22:	4669      	mov	r1, sp
 801aa24:	4630      	mov	r0, r6
 801aa26:	f7ff ff93 	bl	801a950 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801aa2a:	e7b5      	b.n	801a998 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801aa2c:	f8d8 3000 	ldr.w	r3, [r8]
 801aa30:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801aa34:	442b      	add	r3, r5
 801aa36:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801aa3a:	4291      	cmp	r1, r2
 801aa3c:	d119      	bne.n	801aa72 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801aa3e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801aa42:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801aa46:	4291      	cmp	r1, r2
 801aa48:	d113      	bne.n	801aa72 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801aa4a:	6820      	ldr	r0, [r4, #0]
 801aa4c:	466a      	mov	r2, sp
 801aa4e:	6861      	ldr	r1, [r4, #4]
 801aa50:	c203      	stmia	r2!, {r0, r1}
 801aa52:	4619      	mov	r1, r3
 801aa54:	4668      	mov	r0, sp
 801aa56:	f7f8 ff91 	bl	801397c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801aa5a:	f8d8 3000 	ldr.w	r3, [r8]
 801aa5e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801aa62:	442b      	add	r3, r5
 801aa64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aa68:	4413      	add	r3, r2
 801aa6a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801aa6e:	4293      	cmp	r3, r2
 801aa70:	ddd7      	ble.n	801aa22 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801aa72:	4620      	mov	r0, r4
 801aa74:	f7f8 fa3d 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa78:	b990      	cbnz	r0, 801aaa0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801aa7a:	88a7      	ldrh	r7, [r4, #4]
 801aa7c:	88e3      	ldrh	r3, [r4, #6]
 801aa7e:	fb17 f703 	smulbb	r7, r7, r3
 801aa82:	f8d8 3000 	ldr.w	r3, [r8]
 801aa86:	441d      	add	r5, r3
 801aa88:	4628      	mov	r0, r5
 801aa8a:	f7f8 fa32 	bl	8012ef2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa8e:	b948      	cbnz	r0, 801aaa4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801aa90:	88ab      	ldrh	r3, [r5, #4]
 801aa92:	88ea      	ldrh	r2, [r5, #6]
 801aa94:	fb13 f302 	smulbb	r3, r3, r2
 801aa98:	42bb      	cmp	r3, r7
 801aa9a:	f6bf af7c 	bge.w	801a996 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801aa9e:	e79e      	b.n	801a9de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801aaa0:	2700      	movs	r7, #0
 801aaa2:	e7ee      	b.n	801aa82 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	e7f7      	b.n	801aa98 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801aaa8:	2400f4c0 	.word	0x2400f4c0
 801aaac:	2400f4a8 	.word	0x2400f4a8

0801aab0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801aab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aab2:	4c24      	ldr	r4, [pc, #144]	; (801ab44 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801aab4:	6823      	ldr	r3, [r4, #0]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d042      	beq.n	801ab40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801aaba:	4a23      	ldr	r2, [pc, #140]	; (801ab48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801aabc:	4d23      	ldr	r5, [pc, #140]	; (801ab4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801aabe:	8811      	ldrh	r1, [r2, #0]
 801aac0:	f8b5 c000 	ldrh.w	ip, [r5]
 801aac4:	4822      	ldr	r0, [pc, #136]	; (801ab50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801aac6:	4461      	add	r1, ip
 801aac8:	1c4a      	adds	r2, r1, #1
 801aaca:	008f      	lsls	r7, r1, #2
 801aacc:	f022 0201 	bic.w	r2, r2, #1
 801aad0:	19de      	adds	r6, r3, r7
 801aad2:	0412      	lsls	r2, r2, #16
 801aad4:	6006      	str	r6, [r0, #0]
 801aad6:	4e1f      	ldr	r6, [pc, #124]	; (801ab54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801aad8:	0c12      	lsrs	r2, r2, #16
 801aada:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801aade:	19da      	adds	r2, r3, r7
 801aae0:	6032      	str	r2, [r6, #0]
 801aae2:	220e      	movs	r2, #14
 801aae4:	fb02 f20c 	mul.w	r2, r2, ip
 801aae8:	3203      	adds	r2, #3
 801aaea:	f022 0203 	bic.w	r2, r2, #3
 801aaee:	443a      	add	r2, r7
 801aaf0:	4f19      	ldr	r7, [pc, #100]	; (801ab58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801aaf2:	4413      	add	r3, r2
 801aaf4:	603b      	str	r3, [r7, #0]
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	4f18      	ldr	r7, [pc, #96]	; (801ab5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801aafa:	469c      	mov	ip, r3
 801aafc:	803b      	strh	r3, [r7, #0]
 801aafe:	4f18      	ldr	r7, [pc, #96]	; (801ab60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ab00:	683f      	ldr	r7, [r7, #0]
 801ab02:	1aba      	subs	r2, r7, r2
 801ab04:	4f17      	ldr	r7, [pc, #92]	; (801ab64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ab06:	603a      	str	r2, [r7, #0]
 801ab08:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801ab0c:	4a16      	ldr	r2, [pc, #88]	; (801ab68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ab0e:	8013      	strh	r3, [r2, #0]
 801ab10:	428b      	cmp	r3, r1
 801ab12:	d10d      	bne.n	801ab30 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ab14:	882d      	ldrh	r5, [r5, #0]
 801ab16:	2300      	movs	r3, #0
 801ab18:	6830      	ldr	r0, [r6, #0]
 801ab1a:	240e      	movs	r4, #14
 801ab1c:	429d      	cmp	r5, r3
 801ab1e:	d90f      	bls.n	801ab40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ab20:	fb04 0203 	mla	r2, r4, r3, r0
 801ab24:	3301      	adds	r3, #1
 801ab26:	7b11      	ldrb	r1, [r2, #12]
 801ab28:	f36f 1145 	bfc	r1, #5, #1
 801ab2c:	7311      	strb	r1, [r2, #12]
 801ab2e:	e7f5      	b.n	801ab1c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ab30:	6822      	ldr	r2, [r4, #0]
 801ab32:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ab36:	6802      	ldr	r2, [r0, #0]
 801ab38:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801ab3c:	3301      	adds	r3, #1
 801ab3e:	e7e7      	b.n	801ab10 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801ab40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab42:	bf00      	nop
 801ab44:	2400f4a4 	.word	0x2400f4a4
 801ab48:	2400f4c0 	.word	0x2400f4c0
 801ab4c:	2400f4c4 	.word	0x2400f4c4
 801ab50:	2400f4b8 	.word	0x2400f4b8
 801ab54:	2400f4a8 	.word	0x2400f4a8
 801ab58:	2400f4b0 	.word	0x2400f4b0
 801ab5c:	2400f4c2 	.word	0x2400f4c2
 801ab60:	2400f4ac 	.word	0x2400f4ac
 801ab64:	2400f4bc 	.word	0x2400f4bc
 801ab68:	2400f4b4 	.word	0x2400f4b4

0801ab6c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ab6c:	4b06      	ldr	r3, [pc, #24]	; (801ab88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	b943      	cbnz	r3, 801ab84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ab72:	b139      	cbz	r1, 801ab84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ab74:	4b05      	ldr	r3, [pc, #20]	; (801ab8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801ab76:	801a      	strh	r2, [r3, #0]
 801ab78:	4b05      	ldr	r3, [pc, #20]	; (801ab90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801ab7a:	6019      	str	r1, [r3, #0]
 801ab7c:	4b05      	ldr	r3, [pc, #20]	; (801ab94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801ab7e:	6018      	str	r0, [r3, #0]
 801ab80:	f7ff bf96 	b.w	801aab0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ab84:	4770      	bx	lr
 801ab86:	bf00      	nop
 801ab88:	2400f4b0 	.word	0x2400f4b0
 801ab8c:	2400f4c4 	.word	0x2400f4c4
 801ab90:	2400f4ac 	.word	0x2400f4ac
 801ab94:	2400f4a4 	.word	0x2400f4a4

0801ab98 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ab98:	b470      	push	{r4, r5, r6}
 801ab9a:	4c07      	ldr	r4, [pc, #28]	; (801abb8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ab9c:	4605      	mov	r5, r0
 801ab9e:	4610      	mov	r0, r2
 801aba0:	9a03      	ldr	r2, [sp, #12]
 801aba2:	6826      	ldr	r6, [r4, #0]
 801aba4:	b936      	cbnz	r6, 801abb4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801aba6:	6025      	str	r5, [r4, #0]
 801aba8:	4c04      	ldr	r4, [pc, #16]	; (801abbc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801abaa:	8021      	strh	r1, [r4, #0]
 801abac:	4619      	mov	r1, r3
 801abae:	bc70      	pop	{r4, r5, r6}
 801abb0:	f7ff bfdc 	b.w	801ab6c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801abb4:	bc70      	pop	{r4, r5, r6}
 801abb6:	4770      	bx	lr
 801abb8:	2400f4c8 	.word	0x2400f4c8
 801abbc:	2400f4c0 	.word	0x2400f4c0

0801abc0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801abc0:	4a12      	ldr	r2, [pc, #72]	; (801ac0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801abc2:	8803      	ldrh	r3, [r0, #0]
 801abc4:	8812      	ldrh	r2, [r2, #0]
 801abc6:	4293      	cmp	r3, r2
 801abc8:	d207      	bcs.n	801abda <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801abca:	4a11      	ldr	r2, [pc, #68]	; (801ac10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801abcc:	2114      	movs	r1, #20
 801abce:	6812      	ldr	r2, [r2, #0]
 801abd0:	fb01 2303 	mla	r3, r1, r3, r2
 801abd4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801abd8:	4770      	bx	lr
 801abda:	490e      	ldr	r1, [pc, #56]	; (801ac14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801abdc:	8809      	ldrh	r1, [r1, #0]
 801abde:	4411      	add	r1, r2
 801abe0:	428b      	cmp	r3, r1
 801abe2:	da04      	bge.n	801abee <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801abe4:	1a9b      	subs	r3, r3, r2
 801abe6:	4a0c      	ldr	r2, [pc, #48]	; (801ac18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801abe8:	210e      	movs	r1, #14
 801abea:	6812      	ldr	r2, [r2, #0]
 801abec:	e7f0      	b.n	801abd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801abee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801abf2:	4293      	cmp	r3, r2
 801abf4:	d108      	bne.n	801ac08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801abf6:	4b09      	ldr	r3, [pc, #36]	; (801ac1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801abf8:	781b      	ldrb	r3, [r3, #0]
 801abfa:	b91b      	cbnz	r3, 801ac04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801abfc:	4b08      	ldr	r3, [pc, #32]	; (801ac20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801abfe:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ac02:	4770      	bx	lr
 801ac04:	4b07      	ldr	r3, [pc, #28]	; (801ac24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ac06:	e7fa      	b.n	801abfe <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801ac08:	2000      	movs	r0, #0
 801ac0a:	4770      	bx	lr
 801ac0c:	2400f4c0 	.word	0x2400f4c0
 801ac10:	2400f4c8 	.word	0x2400f4c8
 801ac14:	2400f4c4 	.word	0x2400f4c4
 801ac18:	2400f4a8 	.word	0x2400f4a8
 801ac1c:	2400f438 	.word	0x2400f438
 801ac20:	2400f43a 	.word	0x2400f43a
 801ac24:	2400f43c 	.word	0x2400f43c

0801ac28 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ac28:	4a12      	ldr	r2, [pc, #72]	; (801ac74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801ac2a:	8803      	ldrh	r3, [r0, #0]
 801ac2c:	8812      	ldrh	r2, [r2, #0]
 801ac2e:	4293      	cmp	r3, r2
 801ac30:	d207      	bcs.n	801ac42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801ac32:	4a11      	ldr	r2, [pc, #68]	; (801ac78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801ac34:	2114      	movs	r1, #20
 801ac36:	6812      	ldr	r2, [r2, #0]
 801ac38:	fb01 2303 	mla	r3, r1, r3, r2
 801ac3c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801ac40:	4770      	bx	lr
 801ac42:	490e      	ldr	r1, [pc, #56]	; (801ac7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ac44:	8809      	ldrh	r1, [r1, #0]
 801ac46:	4411      	add	r1, r2
 801ac48:	428b      	cmp	r3, r1
 801ac4a:	da04      	bge.n	801ac56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801ac4c:	1a9b      	subs	r3, r3, r2
 801ac4e:	4a0c      	ldr	r2, [pc, #48]	; (801ac80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ac50:	210e      	movs	r1, #14
 801ac52:	6812      	ldr	r2, [r2, #0]
 801ac54:	e7f0      	b.n	801ac38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801ac56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ac5a:	4293      	cmp	r3, r2
 801ac5c:	d108      	bne.n	801ac70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801ac5e:	4b09      	ldr	r3, [pc, #36]	; (801ac84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ac60:	781b      	ldrb	r3, [r3, #0]
 801ac62:	b91b      	cbnz	r3, 801ac6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801ac64:	4b08      	ldr	r3, [pc, #32]	; (801ac88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ac66:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ac6a:	4770      	bx	lr
 801ac6c:	4b07      	ldr	r3, [pc, #28]	; (801ac8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ac6e:	e7fa      	b.n	801ac66 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801ac70:	2000      	movs	r0, #0
 801ac72:	4770      	bx	lr
 801ac74:	2400f4c0 	.word	0x2400f4c0
 801ac78:	2400f4c8 	.word	0x2400f4c8
 801ac7c:	2400f4c4 	.word	0x2400f4c4
 801ac80:	2400f4a8 	.word	0x2400f4a8
 801ac84:	2400f438 	.word	0x2400f438
 801ac88:	2400f43c 	.word	0x2400f43c
 801ac8c:	2400f43a 	.word	0x2400f43a

0801ac90 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ac90:	4a1f      	ldr	r2, [pc, #124]	; (801ad10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801ac92:	b510      	push	{r4, lr}
 801ac94:	880b      	ldrh	r3, [r1, #0]
 801ac96:	8812      	ldrh	r2, [r2, #0]
 801ac98:	4293      	cmp	r3, r2
 801ac9a:	d213      	bcs.n	801acc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801ac9c:	4a1d      	ldr	r2, [pc, #116]	; (801ad14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801ac9e:	2114      	movs	r1, #20
 801aca0:	6812      	ldr	r2, [r2, #0]
 801aca2:	fb01 2303 	mla	r3, r1, r3, r2
 801aca6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801acaa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801acae:	8a1a      	ldrh	r2, [r3, #16]
 801acb0:	8a5b      	ldrh	r3, [r3, #18]
 801acb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801acb6:	8004      	strh	r4, [r0, #0]
 801acb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801acbc:	8041      	strh	r1, [r0, #2]
 801acbe:	8082      	strh	r2, [r0, #4]
 801acc0:	80c3      	strh	r3, [r0, #6]
 801acc2:	e00e      	b.n	801ace2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801acc4:	4914      	ldr	r1, [pc, #80]	; (801ad18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801acc6:	8809      	ldrh	r1, [r1, #0]
 801acc8:	4411      	add	r1, r2
 801acca:	428b      	cmp	r3, r1
 801accc:	da0a      	bge.n	801ace4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801acce:	1a9b      	subs	r3, r3, r2
 801acd0:	4a12      	ldr	r2, [pc, #72]	; (801ad1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801acd2:	210e      	movs	r1, #14
 801acd4:	6812      	ldr	r2, [r2, #0]
 801acd6:	fb01 2303 	mla	r3, r1, r3, r2
 801acda:	681a      	ldr	r2, [r3, #0]
 801acdc:	6002      	str	r2, [r0, #0]
 801acde:	685a      	ldr	r2, [r3, #4]
 801ace0:	6042      	str	r2, [r0, #4]
 801ace2:	bd10      	pop	{r4, pc}
 801ace4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ace8:	4293      	cmp	r3, r2
 801acea:	d10b      	bne.n	801ad04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801acec:	4b0c      	ldr	r3, [pc, #48]	; (801ad20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801acee:	f9b3 1000 	ldrsh.w	r1, [r3]
 801acf2:	4b0c      	ldr	r3, [pc, #48]	; (801ad24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801acf4:	8081      	strh	r1, [r0, #4]
 801acf6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801acfa:	2300      	movs	r3, #0
 801acfc:	80c2      	strh	r2, [r0, #6]
 801acfe:	8003      	strh	r3, [r0, #0]
 801ad00:	8043      	strh	r3, [r0, #2]
 801ad02:	e7ee      	b.n	801ace2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801ad04:	2300      	movs	r3, #0
 801ad06:	8003      	strh	r3, [r0, #0]
 801ad08:	8043      	strh	r3, [r0, #2]
 801ad0a:	8083      	strh	r3, [r0, #4]
 801ad0c:	e7d8      	b.n	801acc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801ad0e:	bf00      	nop
 801ad10:	2400f4c0 	.word	0x2400f4c0
 801ad14:	2400f4c8 	.word	0x2400f4c8
 801ad18:	2400f4c4 	.word	0x2400f4c4
 801ad1c:	2400f4a8 	.word	0x2400f4a8
 801ad20:	2400f434 	.word	0x2400f434
 801ad24:	2400f436 	.word	0x2400f436

0801ad28 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ad28:	4a12      	ldr	r2, [pc, #72]	; (801ad74 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ad2a:	8803      	ldrh	r3, [r0, #0]
 801ad2c:	8811      	ldrh	r1, [r2, #0]
 801ad2e:	428b      	cmp	r3, r1
 801ad30:	d20b      	bcs.n	801ad4a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801ad32:	4a11      	ldr	r2, [pc, #68]	; (801ad78 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ad34:	6812      	ldr	r2, [r2, #0]
 801ad36:	b112      	cbz	r2, 801ad3e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ad38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ad3c:	b9c0      	cbnz	r0, 801ad70 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801ad3e:	4a0f      	ldr	r2, [pc, #60]	; (801ad7c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ad40:	6811      	ldr	r1, [r2, #0]
 801ad42:	2214      	movs	r2, #20
 801ad44:	4353      	muls	r3, r2
 801ad46:	58c8      	ldr	r0, [r1, r3]
 801ad48:	4770      	bx	lr
 801ad4a:	4a0d      	ldr	r2, [pc, #52]	; (801ad80 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ad4c:	8812      	ldrh	r2, [r2, #0]
 801ad4e:	440a      	add	r2, r1
 801ad50:	4293      	cmp	r3, r2
 801ad52:	da04      	bge.n	801ad5e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801ad54:	4a08      	ldr	r2, [pc, #32]	; (801ad78 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ad56:	6812      	ldr	r2, [r2, #0]
 801ad58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ad5c:	4770      	bx	lr
 801ad5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ad62:	4293      	cmp	r3, r2
 801ad64:	d103      	bne.n	801ad6e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ad66:	4b07      	ldr	r3, [pc, #28]	; (801ad84 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ad6c:	4770      	bx	lr
 801ad6e:	2000      	movs	r0, #0
 801ad70:	4770      	bx	lr
 801ad72:	bf00      	nop
 801ad74:	2400f4c0 	.word	0x2400f4c0
 801ad78:	2400f4a4 	.word	0x2400f4a4
 801ad7c:	2400f4c8 	.word	0x2400f4c8
 801ad80:	2400f4c4 	.word	0x2400f4c4
 801ad84:	2400f440 	.word	0x2400f440

0801ad88 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ad88:	4b24      	ldr	r3, [pc, #144]	; (801ae1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ad8a:	8802      	ldrh	r2, [r0, #0]
 801ad8c:	8818      	ldrh	r0, [r3, #0]
 801ad8e:	4282      	cmp	r2, r0
 801ad90:	d221      	bcs.n	801add6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801ad92:	4b23      	ldr	r3, [pc, #140]	; (801ae20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ad94:	6819      	ldr	r1, [r3, #0]
 801ad96:	2314      	movs	r3, #20
 801ad98:	fb03 1302 	mla	r3, r3, r2, r1
 801ad9c:	6858      	ldr	r0, [r3, #4]
 801ad9e:	2800      	cmp	r0, #0
 801ada0:	d03a      	beq.n	801ae18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ada2:	4920      	ldr	r1, [pc, #128]	; (801ae24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ada4:	6809      	ldr	r1, [r1, #0]
 801ada6:	2900      	cmp	r1, #0
 801ada8:	d036      	beq.n	801ae18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801adaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801adae:	2900      	cmp	r1, #0
 801adb0:	d032      	beq.n	801ae18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801adb2:	891a      	ldrh	r2, [r3, #8]
 801adb4:	8958      	ldrh	r0, [r3, #10]
 801adb6:	4350      	muls	r0, r2
 801adb8:	7c5a      	ldrb	r2, [r3, #17]
 801adba:	7cdb      	ldrb	r3, [r3, #19]
 801adbc:	0952      	lsrs	r2, r2, #5
 801adbe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801adc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801adc6:	2b0b      	cmp	r3, #11
 801adc8:	bf18      	it	ne
 801adca:	0040      	lslne	r0, r0, #1
 801adcc:	3003      	adds	r0, #3
 801adce:	f020 0003 	bic.w	r0, r0, #3
 801add2:	4408      	add	r0, r1
 801add4:	4770      	bx	lr
 801add6:	4b14      	ldr	r3, [pc, #80]	; (801ae28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801add8:	881b      	ldrh	r3, [r3, #0]
 801adda:	4403      	add	r3, r0
 801addc:	429a      	cmp	r2, r3
 801adde:	da1a      	bge.n	801ae16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ade0:	4b12      	ldr	r3, [pc, #72]	; (801ae2c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ade2:	1a10      	subs	r0, r2, r0
 801ade4:	210e      	movs	r1, #14
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	fb01 3000 	mla	r0, r1, r0, r3
 801adec:	7b03      	ldrb	r3, [r0, #12]
 801adee:	f003 031f 	and.w	r3, r3, #31
 801adf2:	2b0b      	cmp	r3, #11
 801adf4:	d10b      	bne.n	801ae0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801adf6:	8903      	ldrh	r3, [r0, #8]
 801adf8:	8940      	ldrh	r0, [r0, #10]
 801adfa:	4358      	muls	r0, r3
 801adfc:	4b09      	ldr	r3, [pc, #36]	; (801ae24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801adfe:	3003      	adds	r0, #3
 801ae00:	6819      	ldr	r1, [r3, #0]
 801ae02:	f020 0303 	bic.w	r3, r0, #3
 801ae06:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ae0a:	4418      	add	r0, r3
 801ae0c:	4770      	bx	lr
 801ae0e:	2b0d      	cmp	r3, #13
 801ae10:	d101      	bne.n	801ae16 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ae12:	300d      	adds	r0, #13
 801ae14:	4770      	bx	lr
 801ae16:	2000      	movs	r0, #0
 801ae18:	4770      	bx	lr
 801ae1a:	bf00      	nop
 801ae1c:	2400f4c0 	.word	0x2400f4c0
 801ae20:	2400f4c8 	.word	0x2400f4c8
 801ae24:	2400f4a4 	.word	0x2400f4a4
 801ae28:	2400f4c4 	.word	0x2400f4c4
 801ae2c:	2400f4a8 	.word	0x2400f4a8

0801ae30 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ae30:	4a17      	ldr	r2, [pc, #92]	; (801ae90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801ae32:	b510      	push	{r4, lr}
 801ae34:	8803      	ldrh	r3, [r0, #0]
 801ae36:	8812      	ldrh	r2, [r2, #0]
 801ae38:	4293      	cmp	r3, r2
 801ae3a:	d20c      	bcs.n	801ae56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ae3c:	4a15      	ldr	r2, [pc, #84]	; (801ae94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801ae3e:	2114      	movs	r1, #20
 801ae40:	6812      	ldr	r2, [r2, #0]
 801ae42:	fb01 2303 	mla	r3, r1, r3, r2
 801ae46:	7c58      	ldrb	r0, [r3, #17]
 801ae48:	0942      	lsrs	r2, r0, #5
 801ae4a:	7cd8      	ldrb	r0, [r3, #19]
 801ae4c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801ae50:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801ae54:	bd10      	pop	{r4, pc}
 801ae56:	4910      	ldr	r1, [pc, #64]	; (801ae98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801ae58:	8809      	ldrh	r1, [r1, #0]
 801ae5a:	4411      	add	r1, r2
 801ae5c:	428b      	cmp	r3, r1
 801ae5e:	da09      	bge.n	801ae74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801ae60:	1a9b      	subs	r3, r3, r2
 801ae62:	4a0e      	ldr	r2, [pc, #56]	; (801ae9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801ae64:	210e      	movs	r1, #14
 801ae66:	6812      	ldr	r2, [r2, #0]
 801ae68:	fb01 2303 	mla	r3, r1, r3, r2
 801ae6c:	7b18      	ldrb	r0, [r3, #12]
 801ae6e:	f000 001f 	and.w	r0, r0, #31
 801ae72:	e7ef      	b.n	801ae54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801ae74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ae78:	4293      	cmp	r3, r2
 801ae7a:	d106      	bne.n	801ae8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801ae7c:	f7f9 fb1e 	bl	80144bc <_ZN8touchgfx3HAL3lcdEv>
 801ae80:	6803      	ldr	r3, [r0, #0]
 801ae82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae88:	4718      	bx	r3
 801ae8a:	2000      	movs	r0, #0
 801ae8c:	e7e2      	b.n	801ae54 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801ae8e:	bf00      	nop
 801ae90:	2400f4c0 	.word	0x2400f4c0
 801ae94:	2400f4c8 	.word	0x2400f4c8
 801ae98:	2400f4c4 	.word	0x2400f4c4
 801ae9c:	2400f4a8 	.word	0x2400f4a8

0801aea0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801aea0:	2018      	movs	r0, #24
 801aea2:	4770      	bx	lr

0801aea4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801aea4:	2001      	movs	r0, #1
 801aea6:	4770      	bx	lr

0801aea8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801aea8:	4b02      	ldr	r3, [pc, #8]	; (801aeb4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801aeaa:	8818      	ldrh	r0, [r3, #0]
 801aeac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aeb0:	b280      	uxth	r0, r0
 801aeb2:	4770      	bx	lr
 801aeb4:	2400f43a 	.word	0x2400f43a

0801aeb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801aeb8:	2bff      	cmp	r3, #255	; 0xff
 801aeba:	d040      	beq.n	801af3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801aebc:	2a2c      	cmp	r2, #44	; 0x2c
 801aebe:	d02a      	beq.n	801af16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801aec0:	d80f      	bhi.n	801aee2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801aec2:	2a08      	cmp	r2, #8
 801aec4:	d037      	beq.n	801af36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aec6:	d805      	bhi.n	801aed4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801aec8:	2a04      	cmp	r2, #4
 801aeca:	d032      	beq.n	801af32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801aecc:	2a05      	cmp	r2, #5
 801aece:	d02e      	beq.n	801af2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801aed0:	2000      	movs	r0, #0
 801aed2:	4770      	bx	lr
 801aed4:	2a0a      	cmp	r2, #10
 801aed6:	d02e      	beq.n	801af36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801aed8:	d301      	bcc.n	801aede <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801aeda:	2a0b      	cmp	r2, #11
 801aedc:	d1f8      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801aede:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801aee0:	4770      	bx	lr
 801aee2:	2a30      	cmp	r2, #48	; 0x30
 801aee4:	d029      	beq.n	801af3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801aee6:	d808      	bhi.n	801aefa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801aee8:	2a2e      	cmp	r2, #46	; 0x2e
 801aeea:	684b      	ldr	r3, [r1, #4]
 801aeec:	d01a      	beq.n	801af24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801aeee:	d90b      	bls.n	801af08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801aef0:	781b      	ldrb	r3, [r3, #0]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d1ec      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801aef6:	6a00      	ldr	r0, [r0, #32]
 801aef8:	4770      	bx	lr
 801aefa:	2a32      	cmp	r2, #50	; 0x32
 801aefc:	d01d      	beq.n	801af3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801aefe:	d301      	bcc.n	801af04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801af00:	2a33      	cmp	r2, #51	; 0x33
 801af02:	d1e5      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801af04:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801af06:	4770      	bx	lr
 801af08:	781b      	ldrb	r3, [r3, #0]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d0f3      	beq.n	801aef6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801af0e:	2b01      	cmp	r3, #1
 801af10:	d1de      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801af12:	6900      	ldr	r0, [r0, #16]
 801af14:	4770      	bx	lr
 801af16:	684b      	ldr	r3, [r1, #4]
 801af18:	781b      	ldrb	r3, [r3, #0]
 801af1a:	b133      	cbz	r3, 801af2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801af1c:	2b01      	cmp	r3, #1
 801af1e:	d1d7      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801af20:	6880      	ldr	r0, [r0, #8]
 801af22:	4770      	bx	lr
 801af24:	781b      	ldrb	r3, [r3, #0]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d1d2      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801af2a:	6980      	ldr	r0, [r0, #24]
 801af2c:	4770      	bx	lr
 801af2e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801af30:	4770      	bx	lr
 801af32:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801af34:	4770      	bx	lr
 801af36:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801af38:	4770      	bx	lr
 801af3a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801af3c:	4770      	bx	lr
 801af3e:	2a2c      	cmp	r2, #44	; 0x2c
 801af40:	d02a      	beq.n	801af98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801af42:	d80f      	bhi.n	801af64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801af44:	2a08      	cmp	r2, #8
 801af46:	d035      	beq.n	801afb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801af48:	d805      	bhi.n	801af56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801af4a:	2a04      	cmp	r2, #4
 801af4c:	d030      	beq.n	801afb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801af4e:	2a05      	cmp	r2, #5
 801af50:	d1be      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801af52:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801af54:	4770      	bx	lr
 801af56:	2a0a      	cmp	r2, #10
 801af58:	d02c      	beq.n	801afb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801af5a:	d301      	bcc.n	801af60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801af5c:	2a0b      	cmp	r2, #11
 801af5e:	d1b7      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801af60:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801af62:	4770      	bx	lr
 801af64:	2a30      	cmp	r2, #48	; 0x30
 801af66:	d027      	beq.n	801afb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801af68:	d808      	bhi.n	801af7c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801af6a:	2a2e      	cmp	r2, #46	; 0x2e
 801af6c:	684b      	ldr	r3, [r1, #4]
 801af6e:	d01a      	beq.n	801afa6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801af70:	d90b      	bls.n	801af8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801af72:	781b      	ldrb	r3, [r3, #0]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d1ab      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801af78:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801af7a:	4770      	bx	lr
 801af7c:	2a32      	cmp	r2, #50	; 0x32
 801af7e:	d01b      	beq.n	801afb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801af80:	d301      	bcc.n	801af86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801af82:	2a33      	cmp	r2, #51	; 0x33
 801af84:	d1a4      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801af86:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801af88:	4770      	bx	lr
 801af8a:	781b      	ldrb	r3, [r3, #0]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d0f3      	beq.n	801af78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801af90:	2b01      	cmp	r3, #1
 801af92:	d19d      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801af94:	6940      	ldr	r0, [r0, #20]
 801af96:	4770      	bx	lr
 801af98:	684b      	ldr	r3, [r1, #4]
 801af9a:	781b      	ldrb	r3, [r3, #0]
 801af9c:	b133      	cbz	r3, 801afac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801af9e:	2b01      	cmp	r3, #1
 801afa0:	d196      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801afa2:	68c0      	ldr	r0, [r0, #12]
 801afa4:	4770      	bx	lr
 801afa6:	781b      	ldrb	r3, [r3, #0]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d191      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801afac:	69c0      	ldr	r0, [r0, #28]
 801afae:	4770      	bx	lr
 801afb0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801afb2:	4770      	bx	lr
 801afb4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801afb6:	4770      	bx	lr
 801afb8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801afba:	4770      	bx	lr

0801afbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801afbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afc0:	b085      	sub	sp, #20
 801afc2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801afc4:	9203      	str	r2, [sp, #12]
 801afc6:	6870      	ldr	r0, [r6, #4]
 801afc8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801afcc:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801afd0:	9101      	str	r1, [sp, #4]
 801afd2:	fa1f f885 	uxth.w	r8, r5
 801afd6:	43ed      	mvns	r5, r5
 801afd8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801afdc:	b2ed      	uxtb	r5, r5
 801afde:	fb00 2404 	mla	r4, r0, r4, r2
 801afe2:	6832      	ldr	r2, [r6, #0]
 801afe4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801afe8:	4414      	add	r4, r2
 801afea:	f8dc 2000 	ldr.w	r2, [ip]
 801afee:	9202      	str	r2, [sp, #8]
 801aff0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801aff4:	f102 0e04 	add.w	lr, r2, #4
 801aff8:	9a01      	ldr	r2, [sp, #4]
 801affa:	2a00      	cmp	r2, #0
 801affc:	dc03      	bgt.n	801b006 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801affe:	9a03      	ldr	r2, [sp, #12]
 801b000:	2a00      	cmp	r2, #0
 801b002:	f340 8116 	ble.w	801b232 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b008:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801b00c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b010:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b012:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801b016:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	dd0e      	ble.n	801b03c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801b01e:	1406      	asrs	r6, r0, #16
 801b020:	d405      	bmi.n	801b02e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b022:	4556      	cmp	r6, sl
 801b024:	da03      	bge.n	801b02e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b026:	1416      	asrs	r6, r2, #16
 801b028:	d401      	bmi.n	801b02e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b02a:	454e      	cmp	r6, r9
 801b02c:	db07      	blt.n	801b03e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b02e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b030:	3b01      	subs	r3, #1
 801b032:	3403      	adds	r4, #3
 801b034:	4430      	add	r0, r6
 801b036:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b038:	4432      	add	r2, r6
 801b03a:	e7ee      	b.n	801b01a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801b03c:	d063      	beq.n	801b106 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b03e:	1e5e      	subs	r6, r3, #1
 801b040:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801b042:	fb07 0706 	mla	r7, r7, r6, r0
 801b046:	143f      	asrs	r7, r7, #16
 801b048:	d454      	bmi.n	801b0f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b04a:	4557      	cmp	r7, sl
 801b04c:	da52      	bge.n	801b0f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b04e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801b050:	fb07 2606 	mla	r6, r7, r6, r2
 801b054:	1436      	asrs	r6, r6, #16
 801b056:	d44d      	bmi.n	801b0f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b058:	454e      	cmp	r6, r9
 801b05a:	da4b      	bge.n	801b0f4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b05c:	1ce6      	adds	r6, r4, #3
 801b05e:	4699      	mov	r9, r3
 801b060:	f1b9 0f00 	cmp.w	r9, #0
 801b064:	f106 0603 	add.w	r6, r6, #3
 801b068:	dd48      	ble.n	801b0fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801b06a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801b06e:	1417      	asrs	r7, r2, #16
 801b070:	9902      	ldr	r1, [sp, #8]
 801b072:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b076:	f109 39ff 	add.w	r9, r9, #4294967295
 801b07a:	fb0b 1707 	mla	r7, fp, r7, r1
 801b07e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b082:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b084:	f817 700a 	ldrb.w	r7, [r7, sl]
 801b088:	fb1b fb05 	smulbb	fp, fp, r5
 801b08c:	4408      	add	r0, r1
 801b08e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b090:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b094:	440a      	add	r2, r1
 801b096:	eb0e 0a07 	add.w	sl, lr, r7
 801b09a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801b09e:	fb07 b708 	mla	r7, r7, r8, fp
 801b0a2:	b2bf      	uxth	r7, r7
 801b0a4:	f107 0b01 	add.w	fp, r7, #1
 801b0a8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b0ac:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b0b0:	fb1b fb05 	smulbb	fp, fp, r5
 801b0b4:	123f      	asrs	r7, r7, #8
 801b0b6:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b0ba:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b0be:	fb07 b708 	mla	r7, r7, r8, fp
 801b0c2:	b2bf      	uxth	r7, r7
 801b0c4:	f107 0b01 	add.w	fp, r7, #1
 801b0c8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b0cc:	123f      	asrs	r7, r7, #8
 801b0ce:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b0d2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b0d6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b0da:	fb1a fa05 	smulbb	sl, sl, r5
 801b0de:	fb07 a708 	mla	r7, r7, r8, sl
 801b0e2:	b2bf      	uxth	r7, r7
 801b0e4:	f107 0a01 	add.w	sl, r7, #1
 801b0e8:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b0ec:	123f      	asrs	r7, r7, #8
 801b0ee:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b0f2:	e7b5      	b.n	801b060 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801b0f4:	2700      	movs	r7, #0
 801b0f6:	1bde      	subs	r6, r3, r7
 801b0f8:	2e00      	cmp	r6, #0
 801b0fa:	dc42      	bgt.n	801b182 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801b0fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b104:	441c      	add	r4, r3
 801b106:	9b01      	ldr	r3, [sp, #4]
 801b108:	2b00      	cmp	r3, #0
 801b10a:	f340 8092 	ble.w	801b232 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801b10e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b114:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b118:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b11c:	eef0 6a62 	vmov.f32	s13, s5
 801b120:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b124:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b128:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b12c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b130:	eef0 6a43 	vmov.f32	s13, s6
 801b134:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b138:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b13c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b140:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b144:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b148:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b14c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b150:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b154:	ee12 2a90 	vmov	r2, s5
 801b158:	eef0 2a47 	vmov.f32	s5, s14
 801b15c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b160:	ee13 2a10 	vmov	r2, s6
 801b164:	9311      	str	r3, [sp, #68]	; 0x44
 801b166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b168:	eeb0 3a67 	vmov.f32	s6, s15
 801b16c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b170:	9312      	str	r3, [sp, #72]	; 0x48
 801b172:	9b01      	ldr	r3, [sp, #4]
 801b174:	9a03      	ldr	r2, [sp, #12]
 801b176:	3b01      	subs	r3, #1
 801b178:	9301      	str	r3, [sp, #4]
 801b17a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b17c:	bf08      	it	eq
 801b17e:	4613      	moveq	r3, r2
 801b180:	e73a      	b.n	801aff8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b182:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b186:	d44e      	bmi.n	801b226 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b188:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b18c:	4556      	cmp	r6, sl
 801b18e:	dd4a      	ble.n	801b226 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b190:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801b194:	d447      	bmi.n	801b226 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b196:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801b19a:	4559      	cmp	r1, fp
 801b19c:	dd43      	ble.n	801b226 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b19e:	fa0f f986 	sxth.w	r9, r6
 801b1a2:	9902      	ldr	r1, [sp, #8]
 801b1a4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b1a8:	fb0b 1909 	mla	r9, fp, r9, r1
 801b1ac:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b1b0:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b1b4:	fb1b fb05 	smulbb	fp, fp, r5
 801b1b8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b1bc:	eb0e 0a09 	add.w	sl, lr, r9
 801b1c0:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801b1c4:	fb09 b908 	mla	r9, r9, r8, fp
 801b1c8:	fa1f f989 	uxth.w	r9, r9
 801b1cc:	f109 0b01 	add.w	fp, r9, #1
 801b1d0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b1d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b1d8:	f804 9006 	strb.w	r9, [r4, r6]
 801b1dc:	4426      	add	r6, r4
 801b1de:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b1e2:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b1e6:	fb1b fb05 	smulbb	fp, fp, r5
 801b1ea:	fb09 b908 	mla	r9, r9, r8, fp
 801b1ee:	fa1f f989 	uxth.w	r9, r9
 801b1f2:	f109 0b01 	add.w	fp, r9, #1
 801b1f6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b1fa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b1fe:	f886 9001 	strb.w	r9, [r6, #1]
 801b202:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b206:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b20a:	fb1a fa05 	smulbb	sl, sl, r5
 801b20e:	fb09 a908 	mla	r9, r9, r8, sl
 801b212:	fa1f f989 	uxth.w	r9, r9
 801b216:	f109 0a01 	add.w	sl, r9, #1
 801b21a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b21e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b222:	f886 9002 	strb.w	r9, [r6, #2]
 801b226:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b228:	3701      	adds	r7, #1
 801b22a:	4408      	add	r0, r1
 801b22c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b22e:	440a      	add	r2, r1
 801b230:	e761      	b.n	801b0f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b232:	b005      	add	sp, #20
 801b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b238 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b23c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b23e:	4693      	mov	fp, r2
 801b240:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801b242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b246:	6868      	ldr	r0, [r5, #4]
 801b248:	6877      	ldr	r7, [r6, #4]
 801b24a:	9100      	str	r1, [sp, #0]
 801b24c:	3704      	adds	r7, #4
 801b24e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b252:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801b256:	fb00 2404 	mla	r4, r0, r4, r2
 801b25a:	682a      	ldr	r2, [r5, #0]
 801b25c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b260:	4414      	add	r4, r2
 801b262:	6832      	ldr	r2, [r6, #0]
 801b264:	9201      	str	r2, [sp, #4]
 801b266:	9a00      	ldr	r2, [sp, #0]
 801b268:	2a00      	cmp	r2, #0
 801b26a:	dc03      	bgt.n	801b274 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b26c:	f1bb 0f00 	cmp.w	fp, #0
 801b270:	f340 80bc 	ble.w	801b3ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b274:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b276:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801b27a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b27e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b280:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801b284:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b288:	2b00      	cmp	r3, #0
 801b28a:	dd0c      	ble.n	801b2a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b28c:	1405      	asrs	r5, r0, #16
 801b28e:	d405      	bmi.n	801b29c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b290:	4555      	cmp	r5, sl
 801b292:	da03      	bge.n	801b29c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b294:	1415      	asrs	r5, r2, #16
 801b296:	d401      	bmi.n	801b29c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801b298:	454d      	cmp	r5, r9
 801b29a:	db05      	blt.n	801b2a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b29c:	4440      	add	r0, r8
 801b29e:	4472      	add	r2, lr
 801b2a0:	3b01      	subs	r3, #1
 801b2a2:	3403      	adds	r4, #3
 801b2a4:	e7f0      	b.n	801b288 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801b2a6:	d03f      	beq.n	801b328 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801b2a8:	1e5d      	subs	r5, r3, #1
 801b2aa:	fb08 0c05 	mla	ip, r8, r5, r0
 801b2ae:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801b2b2:	d42e      	bmi.n	801b312 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b2b4:	45d4      	cmp	ip, sl
 801b2b6:	da2c      	bge.n	801b312 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b2b8:	fb0e 2505 	mla	r5, lr, r5, r2
 801b2bc:	142d      	asrs	r5, r5, #16
 801b2be:	d428      	bmi.n	801b312 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b2c0:	454d      	cmp	r5, r9
 801b2c2:	da26      	bge.n	801b312 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b2c4:	1ce5      	adds	r5, r4, #3
 801b2c6:	469c      	mov	ip, r3
 801b2c8:	f1bc 0f00 	cmp.w	ip, #0
 801b2cc:	f105 0503 	add.w	r5, r5, #3
 801b2d0:	dd25      	ble.n	801b31e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801b2d2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801b2d6:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b2da:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b2de:	4472      	add	r2, lr
 801b2e0:	468a      	mov	sl, r1
 801b2e2:	9901      	ldr	r1, [sp, #4]
 801b2e4:	fb0a 1909 	mla	r9, sl, r9, r1
 801b2e8:	1401      	asrs	r1, r0, #16
 801b2ea:	4440      	add	r0, r8
 801b2ec:	f819 9001 	ldrb.w	r9, [r9, r1]
 801b2f0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b2f4:	eb07 0a09 	add.w	sl, r7, r9
 801b2f8:	f817 9009 	ldrb.w	r9, [r7, r9]
 801b2fc:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b300:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b304:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b308:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b30c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b310:	e7da      	b.n	801b2c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b312:	2500      	movs	r5, #0
 801b314:	eba3 0c05 	sub.w	ip, r3, r5
 801b318:	f1bc 0f00 	cmp.w	ip, #0
 801b31c:	dc3b      	bgt.n	801b396 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801b31e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b322:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b326:	441c      	add	r4, r3
 801b328:	9b00      	ldr	r3, [sp, #0]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	dd5e      	ble.n	801b3ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b32e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b334:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b338:	eeb0 6a62 	vmov.f32	s12, s5
 801b33c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b340:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b344:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b348:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b34c:	eeb0 6a43 	vmov.f32	s12, s6
 801b350:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b354:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801b358:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b35c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b360:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b364:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b368:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b36c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b370:	ee12 2a90 	vmov	r2, s5
 801b374:	eef0 2a47 	vmov.f32	s5, s14
 801b378:	fb92 f8f3 	sdiv	r8, r2, r3
 801b37c:	ee13 2a10 	vmov	r2, s6
 801b380:	eeb0 3a67 	vmov.f32	s6, s15
 801b384:	fb92 fef3 	sdiv	lr, r2, r3
 801b388:	9b00      	ldr	r3, [sp, #0]
 801b38a:	3b01      	subs	r3, #1
 801b38c:	9300      	str	r3, [sp, #0]
 801b38e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b390:	bf08      	it	eq
 801b392:	465b      	moveq	r3, fp
 801b394:	e767      	b.n	801b266 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b396:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b39a:	d423      	bmi.n	801b3e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b39c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801b3a0:	45cc      	cmp	ip, r9
 801b3a2:	dd1f      	ble.n	801b3e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b3a4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b3a8:	d41c      	bmi.n	801b3e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b3aa:	68f1      	ldr	r1, [r6, #12]
 801b3ac:	4551      	cmp	r1, sl
 801b3ae:	dd19      	ble.n	801b3e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b3b0:	fa0f fc8c 	sxth.w	ip, ip
 801b3b4:	9901      	ldr	r1, [sp, #4]
 801b3b6:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801b3ba:	f81c c009 	ldrb.w	ip, [ip, r9]
 801b3be:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b3c2:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801b3c6:	eb07 090c 	add.w	r9, r7, ip
 801b3ca:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801b3ce:	f804 a00c 	strb.w	sl, [r4, ip]
 801b3d2:	44a4      	add	ip, r4
 801b3d4:	f899 a001 	ldrb.w	sl, [r9, #1]
 801b3d8:	f88c a001 	strb.w	sl, [ip, #1]
 801b3dc:	f899 9002 	ldrb.w	r9, [r9, #2]
 801b3e0:	f88c 9002 	strb.w	r9, [ip, #2]
 801b3e4:	4440      	add	r0, r8
 801b3e6:	4472      	add	r2, lr
 801b3e8:	3501      	adds	r5, #1
 801b3ea:	e793      	b.n	801b314 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801b3ec:	b003      	add	sp, #12
 801b3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b3f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b3f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3f6:	b085      	sub	sp, #20
 801b3f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b3fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b3fe:	9202      	str	r2, [sp, #8]
 801b400:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b404:	6860      	ldr	r0, [r4, #4]
 801b406:	9203      	str	r2, [sp, #12]
 801b408:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b40c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801b410:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b414:	fb00 2505 	mla	r5, r0, r5, r2
 801b418:	6822      	ldr	r2, [r4, #0]
 801b41a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b41e:	4415      	add	r5, r2
 801b420:	f8dc 2000 	ldr.w	r2, [ip]
 801b424:	9200      	str	r2, [sp, #0]
 801b426:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b42a:	3204      	adds	r2, #4
 801b42c:	9201      	str	r2, [sp, #4]
 801b42e:	2900      	cmp	r1, #0
 801b430:	dc03      	bgt.n	801b43a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b432:	9a02      	ldr	r2, [sp, #8]
 801b434:	2a00      	cmp	r2, #0
 801b436:	f340 8127 	ble.w	801b688 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801b43a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b43c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b440:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b444:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b446:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b44a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b44e:	2b00      	cmp	r3, #0
 801b450:	dd0d      	ble.n	801b46e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b452:	1422      	asrs	r2, r4, #16
 801b454:	d405      	bmi.n	801b462 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b456:	4542      	cmp	r2, r8
 801b458:	da03      	bge.n	801b462 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b45a:	1402      	asrs	r2, r0, #16
 801b45c:	d401      	bmi.n	801b462 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b45e:	42ba      	cmp	r2, r7
 801b460:	db06      	blt.n	801b470 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b462:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b464:	4474      	add	r4, lr
 801b466:	3b01      	subs	r3, #1
 801b468:	3503      	adds	r5, #3
 801b46a:	4410      	add	r0, r2
 801b46c:	e7ef      	b.n	801b44e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b46e:	d075      	beq.n	801b55c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801b470:	1e5a      	subs	r2, r3, #1
 801b472:	fb0e 4602 	mla	r6, lr, r2, r4
 801b476:	1436      	asrs	r6, r6, #16
 801b478:	d465      	bmi.n	801b546 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b47a:	4546      	cmp	r6, r8
 801b47c:	da63      	bge.n	801b546 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b47e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b480:	fb06 0202 	mla	r2, r6, r2, r0
 801b484:	1412      	asrs	r2, r2, #16
 801b486:	d45e      	bmi.n	801b546 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b488:	42ba      	cmp	r2, r7
 801b48a:	da5c      	bge.n	801b546 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b48c:	1cef      	adds	r7, r5, #3
 801b48e:	4699      	mov	r9, r3
 801b490:	f1b9 0f00 	cmp.w	r9, #0
 801b494:	dd5d      	ble.n	801b552 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801b496:	1402      	asrs	r2, r0, #16
 801b498:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b49c:	1426      	asrs	r6, r4, #16
 801b49e:	4692      	mov	sl, r2
 801b4a0:	9a00      	ldr	r2, [sp, #0]
 801b4a2:	fb08 220a 	mla	r2, r8, sl, r2
 801b4a6:	5d92      	ldrb	r2, [r2, r6]
 801b4a8:	9e01      	ldr	r6, [sp, #4]
 801b4aa:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801b4ae:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801b4b2:	d041      	beq.n	801b538 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b4b4:	9a03      	ldr	r2, [sp, #12]
 801b4b6:	fa5f fb86 	uxtb.w	fp, r6
 801b4ba:	fb02 f808 	mul.w	r8, r2, r8
 801b4be:	f108 0201 	add.w	r2, r8, #1
 801b4c2:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801b4c6:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801b4ca:	1212      	asrs	r2, r2, #8
 801b4cc:	fa1f fa82 	uxth.w	sl, r2
 801b4d0:	43d2      	mvns	r2, r2
 801b4d2:	fb1b fb0a 	smulbb	fp, fp, sl
 801b4d6:	b2d2      	uxtb	r2, r2
 801b4d8:	fb08 b802 	mla	r8, r8, r2, fp
 801b4dc:	fa1f f888 	uxth.w	r8, r8
 801b4e0:	f108 0b01 	add.w	fp, r8, #1
 801b4e4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b4e8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b4ec:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b4f0:	fb1b fb0a 	smulbb	fp, fp, sl
 801b4f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b4f8:	fb16 fa0a 	smulbb	sl, r6, sl
 801b4fc:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b500:	f807 8c03 	strb.w	r8, [r7, #-3]
 801b504:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801b508:	fb06 aa02 	mla	sl, r6, r2, sl
 801b50c:	fb08 b802 	mla	r8, r8, r2, fp
 801b510:	fa1f fa8a 	uxth.w	sl, sl
 801b514:	fa1f f888 	uxth.w	r8, r8
 801b518:	f10a 0601 	add.w	r6, sl, #1
 801b51c:	f108 0b01 	add.w	fp, r8, #1
 801b520:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b524:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b528:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b52c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b530:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b534:	f807 8c02 	strb.w	r8, [r7, #-2]
 801b538:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b53a:	4474      	add	r4, lr
 801b53c:	3703      	adds	r7, #3
 801b53e:	f109 39ff 	add.w	r9, r9, #4294967295
 801b542:	4410      	add	r0, r2
 801b544:	e7a4      	b.n	801b490 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801b546:	f04f 0800 	mov.w	r8, #0
 801b54a:	eba3 0208 	sub.w	r2, r3, r8
 801b54e:	2a00      	cmp	r2, #0
 801b550:	dc3b      	bgt.n	801b5ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801b552:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b556:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b55a:	441d      	add	r5, r3
 801b55c:	2900      	cmp	r1, #0
 801b55e:	f340 8093 	ble.w	801b688 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801b562:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b568:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b56c:	3901      	subs	r1, #1
 801b56e:	eeb0 6a62 	vmov.f32	s12, s5
 801b572:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b576:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b57a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b57e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b582:	eeb0 6a43 	vmov.f32	s12, s6
 801b586:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b58a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b58e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b592:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b596:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b59a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b59e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b5a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b5a6:	ee12 2a90 	vmov	r2, s5
 801b5aa:	eef0 2a47 	vmov.f32	s5, s14
 801b5ae:	fb92 fef3 	sdiv	lr, r2, r3
 801b5b2:	ee13 2a10 	vmov	r2, s6
 801b5b6:	eeb0 3a67 	vmov.f32	s6, s15
 801b5ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801b5be:	9a02      	ldr	r2, [sp, #8]
 801b5c0:	9312      	str	r3, [sp, #72]	; 0x48
 801b5c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b5c4:	bf08      	it	eq
 801b5c6:	4613      	moveq	r3, r2
 801b5c8:	e731      	b.n	801b42e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b5ca:	1427      	asrs	r7, r4, #16
 801b5cc:	d456      	bmi.n	801b67c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b5ce:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b5d2:	42be      	cmp	r6, r7
 801b5d4:	dd52      	ble.n	801b67c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b5d6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b5da:	d44f      	bmi.n	801b67c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b5dc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b5e0:	454a      	cmp	r2, r9
 801b5e2:	dd4b      	ble.n	801b67c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b5e4:	9a00      	ldr	r2, [sp, #0]
 801b5e6:	b236      	sxth	r6, r6
 801b5e8:	fb09 2606 	mla	r6, r9, r6, r2
 801b5ec:	5df2      	ldrb	r2, [r6, r7]
 801b5ee:	9e01      	ldr	r6, [sp, #4]
 801b5f0:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801b5f4:	0e3a      	lsrs	r2, r7, #24
 801b5f6:	d041      	beq.n	801b67c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b5f8:	9e03      	ldr	r6, [sp, #12]
 801b5fa:	fa5f fb87 	uxtb.w	fp, r7
 801b5fe:	4372      	muls	r2, r6
 801b600:	1c56      	adds	r6, r2, #1
 801b602:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b606:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801b60a:	1212      	asrs	r2, r2, #8
 801b60c:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b610:	fa1f fa82 	uxth.w	sl, r2
 801b614:	43d2      	mvns	r2, r2
 801b616:	fb1b fb0a 	smulbb	fp, fp, sl
 801b61a:	b2d2      	uxtb	r2, r2
 801b61c:	fb09 b902 	mla	r9, r9, r2, fp
 801b620:	fa1f f989 	uxth.w	r9, r9
 801b624:	f109 0b01 	add.w	fp, r9, #1
 801b628:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b62c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b630:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b634:	fb1b fb0a 	smulbb	fp, fp, sl
 801b638:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b63c:	fb17 fa0a 	smulbb	sl, r7, sl
 801b640:	f805 9006 	strb.w	r9, [r5, r6]
 801b644:	442e      	add	r6, r5
 801b646:	78b7      	ldrb	r7, [r6, #2]
 801b648:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b64c:	fb07 aa02 	mla	sl, r7, r2, sl
 801b650:	fb09 b902 	mla	r9, r9, r2, fp
 801b654:	fa1f fa8a 	uxth.w	sl, sl
 801b658:	fa1f f989 	uxth.w	r9, r9
 801b65c:	f10a 0701 	add.w	r7, sl, #1
 801b660:	f109 0b01 	add.w	fp, r9, #1
 801b664:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b668:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b66c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b670:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b674:	f886 a002 	strb.w	sl, [r6, #2]
 801b678:	f886 9001 	strb.w	r9, [r6, #1]
 801b67c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b67e:	4474      	add	r4, lr
 801b680:	f108 0801 	add.w	r8, r8, #1
 801b684:	4410      	add	r0, r2
 801b686:	e760      	b.n	801b54a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801b688:	b005      	add	sp, #20
 801b68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b68e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b68e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b692:	b085      	sub	sp, #20
 801b694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b698:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b69a:	9203      	str	r2, [sp, #12]
 801b69c:	6868      	ldr	r0, [r5, #4]
 801b69e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b6a2:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801b6a6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b6aa:	fb00 2404 	mla	r4, r0, r4, r2
 801b6ae:	682a      	ldr	r2, [r5, #0]
 801b6b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b6b4:	4414      	add	r4, r2
 801b6b6:	f8dc 2000 	ldr.w	r2, [ip]
 801b6ba:	9201      	str	r2, [sp, #4]
 801b6bc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b6c0:	3204      	adds	r2, #4
 801b6c2:	9202      	str	r2, [sp, #8]
 801b6c4:	2900      	cmp	r1, #0
 801b6c6:	dc03      	bgt.n	801b6d0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b6c8:	9a03      	ldr	r2, [sp, #12]
 801b6ca:	2a00      	cmp	r2, #0
 801b6cc:	f340 8137 	ble.w	801b93e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b6d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b6d2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b6d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b6da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b6dc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b6e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	dd0d      	ble.n	801b704 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b6e8:	1405      	asrs	r5, r0, #16
 801b6ea:	d405      	bmi.n	801b6f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b6ec:	4545      	cmp	r5, r8
 801b6ee:	da03      	bge.n	801b6f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b6f0:	1415      	asrs	r5, r2, #16
 801b6f2:	d401      	bmi.n	801b6f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b6f4:	42bd      	cmp	r5, r7
 801b6f6:	db06      	blt.n	801b706 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b6f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b6fa:	4470      	add	r0, lr
 801b6fc:	3b01      	subs	r3, #1
 801b6fe:	3403      	adds	r4, #3
 801b700:	442a      	add	r2, r5
 801b702:	e7ef      	b.n	801b6e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801b704:	d070      	beq.n	801b7e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801b706:	1e5d      	subs	r5, r3, #1
 801b708:	fb0e 0605 	mla	r6, lr, r5, r0
 801b70c:	1436      	asrs	r6, r6, #16
 801b70e:	d462      	bmi.n	801b7d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b710:	4546      	cmp	r6, r8
 801b712:	da60      	bge.n	801b7d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b714:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b716:	fb06 2505 	mla	r5, r6, r5, r2
 801b71a:	142d      	asrs	r5, r5, #16
 801b71c:	d45b      	bmi.n	801b7d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b71e:	42bd      	cmp	r5, r7
 801b720:	da59      	bge.n	801b7d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b722:	1ce5      	adds	r5, r4, #3
 801b724:	469a      	mov	sl, r3
 801b726:	f1ba 0f00 	cmp.w	sl, #0
 801b72a:	dd58      	ble.n	801b7de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801b72c:	1416      	asrs	r6, r2, #16
 801b72e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b732:	1407      	asrs	r7, r0, #16
 801b734:	46b1      	mov	r9, r6
 801b736:	9e01      	ldr	r6, [sp, #4]
 801b738:	fb08 6609 	mla	r6, r8, r9, r6
 801b73c:	5df6      	ldrb	r6, [r6, r7]
 801b73e:	9f02      	ldr	r7, [sp, #8]
 801b740:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801b744:	0e37      	lsrs	r7, r6, #24
 801b746:	2fff      	cmp	r7, #255	; 0xff
 801b748:	f000 80f0 	beq.w	801b92c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801b74c:	fa5f f887 	uxtb.w	r8, r7
 801b750:	b3d7      	cbz	r7, 801b7c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b752:	fa1f f788 	uxth.w	r7, r8
 801b756:	ea6f 0808 	mvn.w	r8, r8
 801b75a:	fa5f fb86 	uxtb.w	fp, r6
 801b75e:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801b762:	fa5f f888 	uxtb.w	r8, r8
 801b766:	fb1b fb07 	smulbb	fp, fp, r7
 801b76a:	fb09 b908 	mla	r9, r9, r8, fp
 801b76e:	fa1f f989 	uxth.w	r9, r9
 801b772:	f109 0b01 	add.w	fp, r9, #1
 801b776:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b77a:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801b77e:	fb1b fb08 	smulbb	fp, fp, r8
 801b782:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b786:	f805 9c03 	strb.w	r9, [r5, #-3]
 801b78a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801b78e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b792:	fb09 b907 	mla	r9, r9, r7, fp
 801b796:	fa1f f989 	uxth.w	r9, r9
 801b79a:	f109 0b01 	add.w	fp, r9, #1
 801b79e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b7a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b7a6:	f805 9c02 	strb.w	r9, [r5, #-2]
 801b7aa:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801b7ae:	fb19 f808 	smulbb	r8, r9, r8
 801b7b2:	fb06 8607 	mla	r6, r6, r7, r8
 801b7b6:	b2b6      	uxth	r6, r6
 801b7b8:	f106 0801 	add.w	r8, r6, #1
 801b7bc:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801b7c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b7c4:	f805 8c01 	strb.w	r8, [r5, #-1]
 801b7c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b7ca:	4470      	add	r0, lr
 801b7cc:	3503      	adds	r5, #3
 801b7ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b7d2:	4432      	add	r2, r6
 801b7d4:	e7a7      	b.n	801b726 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b7d6:	2600      	movs	r6, #0
 801b7d8:	1b9d      	subs	r5, r3, r6
 801b7da:	2d00      	cmp	r5, #0
 801b7dc:	dc3b      	bgt.n	801b856 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b7de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b7e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b7e6:	441c      	add	r4, r3
 801b7e8:	2900      	cmp	r1, #0
 801b7ea:	f340 80a8 	ble.w	801b93e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b7ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b7f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b7f8:	3901      	subs	r1, #1
 801b7fa:	eeb0 6a62 	vmov.f32	s12, s5
 801b7fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b802:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b806:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b80a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b80e:	eeb0 6a43 	vmov.f32	s12, s6
 801b812:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b816:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b81a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b81e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b822:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b826:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b82a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b82e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b832:	ee12 2a90 	vmov	r2, s5
 801b836:	eef0 2a47 	vmov.f32	s5, s14
 801b83a:	fb92 fef3 	sdiv	lr, r2, r3
 801b83e:	ee13 2a10 	vmov	r2, s6
 801b842:	eeb0 3a67 	vmov.f32	s6, s15
 801b846:	fb92 f3f3 	sdiv	r3, r2, r3
 801b84a:	9a03      	ldr	r2, [sp, #12]
 801b84c:	9312      	str	r3, [sp, #72]	; 0x48
 801b84e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b850:	bf08      	it	eq
 801b852:	4613      	moveq	r3, r2
 801b854:	e736      	b.n	801b6c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b856:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b85a:	d457      	bmi.n	801b90c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b85c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801b860:	4547      	cmp	r7, r8
 801b862:	dd53      	ble.n	801b90c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b864:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b868:	d450      	bmi.n	801b90c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b86a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801b86e:	454d      	cmp	r5, r9
 801b870:	dd4c      	ble.n	801b90c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b872:	9d01      	ldr	r5, [sp, #4]
 801b874:	b23f      	sxth	r7, r7
 801b876:	fb09 5707 	mla	r7, r9, r7, r5
 801b87a:	f817 5008 	ldrb.w	r5, [r7, r8]
 801b87e:	9f02      	ldr	r7, [sp, #8]
 801b880:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801b884:	0e2f      	lsrs	r7, r5, #24
 801b886:	2fff      	cmp	r7, #255	; 0xff
 801b888:	d045      	beq.n	801b916 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b88a:	fa5f f987 	uxtb.w	r9, r7
 801b88e:	b3ef      	cbz	r7, 801b90c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b890:	fa1f f889 	uxth.w	r8, r9
 801b894:	ea6f 0909 	mvn.w	r9, r9
 801b898:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b89c:	fa5f fb85 	uxtb.w	fp, r5
 801b8a0:	f814 a007 	ldrb.w	sl, [r4, r7]
 801b8a4:	fa5f f989 	uxtb.w	r9, r9
 801b8a8:	fb1b fb08 	smulbb	fp, fp, r8
 801b8ac:	fb0a ba09 	mla	sl, sl, r9, fp
 801b8b0:	fa1f fa8a 	uxth.w	sl, sl
 801b8b4:	f10a 0b01 	add.w	fp, sl, #1
 801b8b8:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b8bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b8c0:	f804 a007 	strb.w	sl, [r4, r7]
 801b8c4:	4427      	add	r7, r4
 801b8c6:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b8ca:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801b8ce:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b8d2:	fb1b fb09 	smulbb	fp, fp, r9
 801b8d6:	fb0a ba08 	mla	sl, sl, r8, fp
 801b8da:	fa1f fa8a 	uxth.w	sl, sl
 801b8de:	f10a 0b01 	add.w	fp, sl, #1
 801b8e2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b8e6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b8ea:	f887 a001 	strb.w	sl, [r7, #1]
 801b8ee:	f897 a002 	ldrb.w	sl, [r7, #2]
 801b8f2:	fb1a f909 	smulbb	r9, sl, r9
 801b8f6:	fb05 9508 	mla	r5, r5, r8, r9
 801b8fa:	b2ad      	uxth	r5, r5
 801b8fc:	f105 0901 	add.w	r9, r5, #1
 801b900:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801b904:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b908:	f887 9002 	strb.w	r9, [r7, #2]
 801b90c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b90e:	4470      	add	r0, lr
 801b910:	3601      	adds	r6, #1
 801b912:	442a      	add	r2, r5
 801b914:	e760      	b.n	801b7d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b916:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b91a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801b91e:	55e5      	strb	r5, [r4, r7]
 801b920:	4427      	add	r7, r4
 801b922:	0c2d      	lsrs	r5, r5, #16
 801b924:	f887 8001 	strb.w	r8, [r7, #1]
 801b928:	70bd      	strb	r5, [r7, #2]
 801b92a:	e7ef      	b.n	801b90c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b92c:	0a37      	lsrs	r7, r6, #8
 801b92e:	f805 6c03 	strb.w	r6, [r5, #-3]
 801b932:	0c36      	lsrs	r6, r6, #16
 801b934:	f805 7c02 	strb.w	r7, [r5, #-2]
 801b938:	f805 6c01 	strb.w	r6, [r5, #-1]
 801b93c:	e744      	b.n	801b7c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b93e:	b005      	add	sp, #20
 801b940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b944 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b948:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b94a:	9201      	str	r2, [sp, #4]
 801b94c:	6870      	ldr	r0, [r6, #4]
 801b94e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801b952:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801b956:	fa1f fe85 	uxth.w	lr, r5
 801b95a:	43ed      	mvns	r5, r5
 801b95c:	f8dc 8000 	ldr.w	r8, [ip]
 801b960:	b2ed      	uxtb	r5, r5
 801b962:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b966:	fb00 2404 	mla	r4, r0, r4, r2
 801b96a:	6832      	ldr	r2, [r6, #0]
 801b96c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b970:	4414      	add	r4, r2
 801b972:	2900      	cmp	r1, #0
 801b974:	dc03      	bgt.n	801b97e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b976:	9a01      	ldr	r2, [sp, #4]
 801b978:	2a00      	cmp	r2, #0
 801b97a:	f340 810d 	ble.w	801bb98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801b97e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b980:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801b984:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b98a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801b98e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b992:	2b00      	cmp	r3, #0
 801b994:	dd0e      	ble.n	801b9b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b996:	1406      	asrs	r6, r0, #16
 801b998:	d405      	bmi.n	801b9a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b99a:	4556      	cmp	r6, sl
 801b99c:	da03      	bge.n	801b9a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b99e:	1416      	asrs	r6, r2, #16
 801b9a0:	d401      	bmi.n	801b9a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b9a2:	454e      	cmp	r6, r9
 801b9a4:	db07      	blt.n	801b9b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b9a6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b9a8:	3b01      	subs	r3, #1
 801b9aa:	3403      	adds	r4, #3
 801b9ac:	4430      	add	r0, r6
 801b9ae:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b9b0:	4432      	add	r2, r6
 801b9b2:	e7ee      	b.n	801b992 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801b9b4:	d060      	beq.n	801ba78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801b9b6:	1e5e      	subs	r6, r3, #1
 801b9b8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b9ba:	fb07 0706 	mla	r7, r7, r6, r0
 801b9be:	143f      	asrs	r7, r7, #16
 801b9c0:	d451      	bmi.n	801ba66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b9c2:	4557      	cmp	r7, sl
 801b9c4:	da4f      	bge.n	801ba66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b9c6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b9c8:	fb07 2606 	mla	r6, r7, r6, r2
 801b9cc:	1436      	asrs	r6, r6, #16
 801b9ce:	d44a      	bmi.n	801ba66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b9d0:	454e      	cmp	r6, r9
 801b9d2:	da48      	bge.n	801ba66 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b9d4:	1ce6      	adds	r6, r4, #3
 801b9d6:	4699      	mov	r9, r3
 801b9d8:	f1b9 0f00 	cmp.w	r9, #0
 801b9dc:	f106 0603 	add.w	r6, r6, #3
 801b9e0:	dd45      	ble.n	801ba6e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801b9e2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801b9e6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b9ea:	1417      	asrs	r7, r2, #16
 801b9ec:	f109 39ff 	add.w	r9, r9, #4294967295
 801b9f0:	fb0b a707 	mla	r7, fp, r7, sl
 801b9f4:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b9f8:	fb1b fb05 	smulbb	fp, fp, r5
 801b9fc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ba00:	eb08 0a07 	add.w	sl, r8, r7
 801ba04:	f818 7007 	ldrb.w	r7, [r8, r7]
 801ba08:	fb07 b70e 	mla	r7, r7, lr, fp
 801ba0c:	b2bf      	uxth	r7, r7
 801ba0e:	f107 0b01 	add.w	fp, r7, #1
 801ba12:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ba16:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801ba1a:	fb1b fb05 	smulbb	fp, fp, r5
 801ba1e:	123f      	asrs	r7, r7, #8
 801ba20:	f806 7c06 	strb.w	r7, [r6, #-6]
 801ba24:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801ba28:	fb07 b70e 	mla	r7, r7, lr, fp
 801ba2c:	b2bf      	uxth	r7, r7
 801ba2e:	f107 0b01 	add.w	fp, r7, #1
 801ba32:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ba36:	123f      	asrs	r7, r7, #8
 801ba38:	f806 7c05 	strb.w	r7, [r6, #-5]
 801ba3c:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801ba40:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ba44:	fb1a fa05 	smulbb	sl, sl, r5
 801ba48:	fb07 a70e 	mla	r7, r7, lr, sl
 801ba4c:	b2bf      	uxth	r7, r7
 801ba4e:	f107 0a01 	add.w	sl, r7, #1
 801ba52:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801ba56:	123f      	asrs	r7, r7, #8
 801ba58:	f806 7c04 	strb.w	r7, [r6, #-4]
 801ba5c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801ba5e:	4438      	add	r0, r7
 801ba60:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ba62:	443a      	add	r2, r7
 801ba64:	e7b8      	b.n	801b9d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ba66:	2700      	movs	r7, #0
 801ba68:	1bde      	subs	r6, r3, r7
 801ba6a:	2e00      	cmp	r6, #0
 801ba6c:	dc3f      	bgt.n	801baee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801ba6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba76:	441c      	add	r4, r3
 801ba78:	2900      	cmp	r1, #0
 801ba7a:	f340 808d 	ble.w	801bb98 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ba7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ba82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba84:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba88:	3901      	subs	r1, #1
 801ba8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba8e:	eef0 6a62 	vmov.f32	s13, s5
 801ba92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ba96:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ba9e:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801baa2:	eef0 6a43 	vmov.f32	s13, s6
 801baa6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801baaa:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801baae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bab2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bab6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801baba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801babe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bac2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bac6:	ee12 2a90 	vmov	r2, s5
 801baca:	eef0 2a47 	vmov.f32	s5, s14
 801bace:	fb92 f3f3 	sdiv	r3, r2, r3
 801bad2:	ee13 2a10 	vmov	r2, s6
 801bad6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bada:	eeb0 3a67 	vmov.f32	s6, s15
 801bade:	fb92 f3f3 	sdiv	r3, r2, r3
 801bae2:	9a01      	ldr	r2, [sp, #4]
 801bae4:	9310      	str	r3, [sp, #64]	; 0x40
 801bae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bae8:	bf08      	it	eq
 801baea:	4613      	moveq	r3, r2
 801baec:	e741      	b.n	801b972 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801baee:	ea5f 4920 	movs.w	r9, r0, asr #16
 801baf2:	d44b      	bmi.n	801bb8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801baf4:	f8dc b008 	ldr.w	fp, [ip, #8]
 801baf8:	45cb      	cmp	fp, r9
 801bafa:	dd47      	ble.n	801bb8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bafc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bb00:	d444      	bmi.n	801bb8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bb02:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801bb06:	4556      	cmp	r6, sl
 801bb08:	dd40      	ble.n	801bb8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801bb0a:	fa0f f68b 	sxth.w	r6, fp
 801bb0e:	fb0a 9906 	mla	r9, sl, r6, r9
 801bb12:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801bb16:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801bb1a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801bb1e:	fb1b fb05 	smulbb	fp, fp, r5
 801bb22:	eb08 0a09 	add.w	sl, r8, r9
 801bb26:	f818 9009 	ldrb.w	r9, [r8, r9]
 801bb2a:	fb09 b90e 	mla	r9, r9, lr, fp
 801bb2e:	fa1f f989 	uxth.w	r9, r9
 801bb32:	f109 0b01 	add.w	fp, r9, #1
 801bb36:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bb3a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bb3e:	f804 9006 	strb.w	r9, [r4, r6]
 801bb42:	4426      	add	r6, r4
 801bb44:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801bb48:	f896 b001 	ldrb.w	fp, [r6, #1]
 801bb4c:	fb1b fb05 	smulbb	fp, fp, r5
 801bb50:	fb09 b90e 	mla	r9, r9, lr, fp
 801bb54:	fa1f f989 	uxth.w	r9, r9
 801bb58:	f109 0b01 	add.w	fp, r9, #1
 801bb5c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bb60:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bb64:	f886 9001 	strb.w	r9, [r6, #1]
 801bb68:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801bb6c:	f896 a002 	ldrb.w	sl, [r6, #2]
 801bb70:	fb1a fa05 	smulbb	sl, sl, r5
 801bb74:	fb09 a90e 	mla	r9, r9, lr, sl
 801bb78:	fa1f f989 	uxth.w	r9, r9
 801bb7c:	f109 0a01 	add.w	sl, r9, #1
 801bb80:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801bb84:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bb88:	f886 9002 	strb.w	r9, [r6, #2]
 801bb8c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bb8e:	3701      	adds	r7, #1
 801bb90:	4430      	add	r0, r6
 801bb92:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bb94:	4432      	add	r2, r6
 801bb96:	e767      	b.n	801ba68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801bb98:	b003      	add	sp, #12
 801bb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bb9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bba2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bba8:	9201      	str	r2, [sp, #4]
 801bbaa:	6868      	ldr	r0, [r5, #4]
 801bbac:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801bbae:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bbb2:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801bbb6:	fb00 2404 	mla	r4, r0, r4, r2
 801bbba:	682a      	ldr	r2, [r5, #0]
 801bbbc:	f8d7 8000 	ldr.w	r8, [r7]
 801bbc0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bbc4:	4414      	add	r4, r2
 801bbc6:	2900      	cmp	r1, #0
 801bbc8:	dc03      	bgt.n	801bbd2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801bbca:	9a01      	ldr	r2, [sp, #4]
 801bbcc:	2a00      	cmp	r2, #0
 801bbce:	f340 80af 	ble.w	801bd30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801bbd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bbd4:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801bbd8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bbdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bbde:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801bbe2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	dd0c      	ble.n	801bc04 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801bbea:	1405      	asrs	r5, r0, #16
 801bbec:	d405      	bmi.n	801bbfa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bbee:	4555      	cmp	r5, sl
 801bbf0:	da03      	bge.n	801bbfa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bbf2:	1415      	asrs	r5, r2, #16
 801bbf4:	d401      	bmi.n	801bbfa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801bbf6:	454d      	cmp	r5, r9
 801bbf8:	db05      	blt.n	801bc06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bbfa:	4470      	add	r0, lr
 801bbfc:	4462      	add	r2, ip
 801bbfe:	3b01      	subs	r3, #1
 801bc00:	3403      	adds	r4, #3
 801bc02:	e7f0      	b.n	801bbe6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bc04:	d038      	beq.n	801bc78 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801bc06:	1e5d      	subs	r5, r3, #1
 801bc08:	fb0e 0605 	mla	r6, lr, r5, r0
 801bc0c:	1436      	asrs	r6, r6, #16
 801bc0e:	d42a      	bmi.n	801bc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801bc10:	4556      	cmp	r6, sl
 801bc12:	da28      	bge.n	801bc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801bc14:	fb0c 2505 	mla	r5, ip, r5, r2
 801bc18:	142d      	asrs	r5, r5, #16
 801bc1a:	d424      	bmi.n	801bc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801bc1c:	454d      	cmp	r5, r9
 801bc1e:	da22      	bge.n	801bc66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801bc20:	1ce6      	adds	r6, r4, #3
 801bc22:	4699      	mov	r9, r3
 801bc24:	f1b9 0f00 	cmp.w	r9, #0
 801bc28:	f106 0603 	add.w	r6, r6, #3
 801bc2c:	dd1f      	ble.n	801bc6e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801bc2e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801bc32:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801bc36:	1415      	asrs	r5, r2, #16
 801bc38:	4470      	add	r0, lr
 801bc3a:	4462      	add	r2, ip
 801bc3c:	f109 39ff 	add.w	r9, r9, #4294967295
 801bc40:	fb0b a505 	mla	r5, fp, r5, sl
 801bc44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc48:	eb08 0a05 	add.w	sl, r8, r5
 801bc4c:	f818 5005 	ldrb.w	r5, [r8, r5]
 801bc50:	f806 5c06 	strb.w	r5, [r6, #-6]
 801bc54:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801bc58:	f806 5c05 	strb.w	r5, [r6, #-5]
 801bc5c:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801bc60:	f806 5c04 	strb.w	r5, [r6, #-4]
 801bc64:	e7de      	b.n	801bc24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801bc66:	2600      	movs	r6, #0
 801bc68:	1b9d      	subs	r5, r3, r6
 801bc6a:	2d00      	cmp	r5, #0
 801bc6c:	dc38      	bgt.n	801bce0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801bc6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc76:	441c      	add	r4, r3
 801bc78:	2900      	cmp	r1, #0
 801bc7a:	dd59      	ble.n	801bd30 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801bc7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc86:	3901      	subs	r1, #1
 801bc88:	eeb0 6a62 	vmov.f32	s12, s5
 801bc8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bc90:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bc98:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801bc9c:	eeb0 6a43 	vmov.f32	s12, s6
 801bca0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bca4:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801bca8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bcac:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bcb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bcb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bcb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bcbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bcc0:	ee12 2a90 	vmov	r2, s5
 801bcc4:	eef0 2a47 	vmov.f32	s5, s14
 801bcc8:	fb92 fef3 	sdiv	lr, r2, r3
 801bccc:	ee13 2a10 	vmov	r2, s6
 801bcd0:	eeb0 3a67 	vmov.f32	s6, s15
 801bcd4:	fb92 fcf3 	sdiv	ip, r2, r3
 801bcd8:	9a01      	ldr	r2, [sp, #4]
 801bcda:	bf08      	it	eq
 801bcdc:	4613      	moveq	r3, r2
 801bcde:	e772      	b.n	801bbc6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801bce0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bce4:	d420      	bmi.n	801bd28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bce6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801bcea:	45cb      	cmp	fp, r9
 801bcec:	dd1c      	ble.n	801bd28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bcee:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801bcf2:	d419      	bmi.n	801bd28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bcf4:	68fd      	ldr	r5, [r7, #12]
 801bcf6:	4555      	cmp	r5, sl
 801bcf8:	dd16      	ble.n	801bd28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801bcfa:	fa0f f58b 	sxth.w	r5, fp
 801bcfe:	fb0a 9505 	mla	r5, sl, r5, r9
 801bd02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd06:	f818 9005 	ldrb.w	r9, [r8, r5]
 801bd0a:	eb08 0b05 	add.w	fp, r8, r5
 801bd0e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801bd12:	f804 9005 	strb.w	r9, [r4, r5]
 801bd16:	4425      	add	r5, r4
 801bd18:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801bd1c:	f885 9001 	strb.w	r9, [r5, #1]
 801bd20:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801bd24:	f885 9002 	strb.w	r9, [r5, #2]
 801bd28:	4470      	add	r0, lr
 801bd2a:	4462      	add	r2, ip
 801bd2c:	3601      	adds	r6, #1
 801bd2e:	e79b      	b.n	801bc68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801bd30:	b003      	add	sp, #12
 801bd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd36 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bd36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd3a:	b085      	sub	sp, #20
 801bd3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bd40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bd42:	9202      	str	r2, [sp, #8]
 801bd44:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801bd48:	6860      	ldr	r0, [r4, #4]
 801bd4a:	9203      	str	r2, [sp, #12]
 801bd4c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801bd50:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801bd54:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801bd58:	fb00 2505 	mla	r5, r0, r5, r2
 801bd5c:	6822      	ldr	r2, [r4, #0]
 801bd5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd62:	4415      	add	r5, r2
 801bd64:	f8dc 2000 	ldr.w	r2, [ip]
 801bd68:	9201      	str	r2, [sp, #4]
 801bd6a:	2900      	cmp	r1, #0
 801bd6c:	dc03      	bgt.n	801bd76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801bd6e:	9a02      	ldr	r2, [sp, #8]
 801bd70:	2a00      	cmp	r2, #0
 801bd72:	f340 8122 	ble.w	801bfba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801bd76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bd78:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bd7c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bd80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bd82:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bd86:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	dd0d      	ble.n	801bdaa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801bd8e:	1422      	asrs	r2, r4, #16
 801bd90:	d405      	bmi.n	801bd9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bd92:	4542      	cmp	r2, r8
 801bd94:	da03      	bge.n	801bd9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bd96:	1402      	asrs	r2, r0, #16
 801bd98:	d401      	bmi.n	801bd9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801bd9a:	42ba      	cmp	r2, r7
 801bd9c:	db06      	blt.n	801bdac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bd9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bda0:	4474      	add	r4, lr
 801bda2:	3b01      	subs	r3, #1
 801bda4:	3503      	adds	r5, #3
 801bda6:	4410      	add	r0, r2
 801bda8:	e7ef      	b.n	801bd8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801bdaa:	d072      	beq.n	801be92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801bdac:	1e5a      	subs	r2, r3, #1
 801bdae:	fb0e 4602 	mla	r6, lr, r2, r4
 801bdb2:	1436      	asrs	r6, r6, #16
 801bdb4:	d462      	bmi.n	801be7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bdb6:	4546      	cmp	r6, r8
 801bdb8:	da60      	bge.n	801be7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bdba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bdbc:	fb06 0202 	mla	r2, r6, r2, r0
 801bdc0:	1412      	asrs	r2, r2, #16
 801bdc2:	d45b      	bmi.n	801be7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bdc4:	42ba      	cmp	r2, r7
 801bdc6:	da59      	bge.n	801be7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801bdc8:	1cef      	adds	r7, r5, #3
 801bdca:	4699      	mov	r9, r3
 801bdcc:	f1b9 0f00 	cmp.w	r9, #0
 801bdd0:	dd5a      	ble.n	801be88 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801bdd2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bdd6:	1426      	asrs	r6, r4, #16
 801bdd8:	1402      	asrs	r2, r0, #16
 801bdda:	fb08 6202 	mla	r2, r8, r2, r6
 801bdde:	9e01      	ldr	r6, [sp, #4]
 801bde0:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801bde4:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801bde8:	d041      	beq.n	801be6e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801bdea:	9a03      	ldr	r2, [sp, #12]
 801bdec:	fa5f fb86 	uxtb.w	fp, r6
 801bdf0:	fb02 f808 	mul.w	r8, r2, r8
 801bdf4:	f108 0201 	add.w	r2, r8, #1
 801bdf8:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801bdfc:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801be00:	1212      	asrs	r2, r2, #8
 801be02:	fa1f fa82 	uxth.w	sl, r2
 801be06:	43d2      	mvns	r2, r2
 801be08:	fb1b fb0a 	smulbb	fp, fp, sl
 801be0c:	b2d2      	uxtb	r2, r2
 801be0e:	fb08 b802 	mla	r8, r8, r2, fp
 801be12:	fa1f f888 	uxth.w	r8, r8
 801be16:	f108 0b01 	add.w	fp, r8, #1
 801be1a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801be1e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801be22:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801be26:	fb1b fb0a 	smulbb	fp, fp, sl
 801be2a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801be2e:	fb16 fa0a 	smulbb	sl, r6, sl
 801be32:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801be36:	f807 8c03 	strb.w	r8, [r7, #-3]
 801be3a:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801be3e:	fb06 aa02 	mla	sl, r6, r2, sl
 801be42:	fb08 b802 	mla	r8, r8, r2, fp
 801be46:	fa1f fa8a 	uxth.w	sl, sl
 801be4a:	fa1f f888 	uxth.w	r8, r8
 801be4e:	f10a 0601 	add.w	r6, sl, #1
 801be52:	f108 0b01 	add.w	fp, r8, #1
 801be56:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801be5a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801be5e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801be62:	ea4f 2828 	mov.w	r8, r8, asr #8
 801be66:	f807 ac01 	strb.w	sl, [r7, #-1]
 801be6a:	f807 8c02 	strb.w	r8, [r7, #-2]
 801be6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801be70:	4474      	add	r4, lr
 801be72:	3703      	adds	r7, #3
 801be74:	f109 39ff 	add.w	r9, r9, #4294967295
 801be78:	4410      	add	r0, r2
 801be7a:	e7a7      	b.n	801bdcc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801be7c:	f04f 0800 	mov.w	r8, #0
 801be80:	eba3 0208 	sub.w	r2, r3, r8
 801be84:	2a00      	cmp	r2, #0
 801be86:	dc3b      	bgt.n	801bf00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801be88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be90:	441d      	add	r5, r3
 801be92:	2900      	cmp	r1, #0
 801be94:	f340 8091 	ble.w	801bfba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801be98:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801be9e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bea2:	3901      	subs	r1, #1
 801bea4:	eeb0 6a62 	vmov.f32	s12, s5
 801bea8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801beac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801beb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801beb4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801beb8:	eeb0 6a43 	vmov.f32	s12, s6
 801bebc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bec0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bec4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bec8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801becc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bed0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bed4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bed8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bedc:	ee12 2a90 	vmov	r2, s5
 801bee0:	eef0 2a47 	vmov.f32	s5, s14
 801bee4:	fb92 fef3 	sdiv	lr, r2, r3
 801bee8:	ee13 2a10 	vmov	r2, s6
 801beec:	eeb0 3a67 	vmov.f32	s6, s15
 801bef0:	fb92 f3f3 	sdiv	r3, r2, r3
 801bef4:	9a02      	ldr	r2, [sp, #8]
 801bef6:	9312      	str	r3, [sp, #72]	; 0x48
 801bef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801befa:	bf08      	it	eq
 801befc:	4613      	moveq	r3, r2
 801befe:	e734      	b.n	801bd6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801bf00:	1427      	asrs	r7, r4, #16
 801bf02:	d454      	bmi.n	801bfae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801bf04:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801bf08:	42be      	cmp	r6, r7
 801bf0a:	dd50      	ble.n	801bfae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801bf0c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801bf10:	d44d      	bmi.n	801bfae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801bf12:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bf16:	454a      	cmp	r2, r9
 801bf18:	dd49      	ble.n	801bfae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801bf1a:	b236      	sxth	r6, r6
 801bf1c:	9a01      	ldr	r2, [sp, #4]
 801bf1e:	fb09 7606 	mla	r6, r9, r6, r7
 801bf22:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801bf26:	0e3a      	lsrs	r2, r7, #24
 801bf28:	d041      	beq.n	801bfae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801bf2a:	9e03      	ldr	r6, [sp, #12]
 801bf2c:	fa5f fb87 	uxtb.w	fp, r7
 801bf30:	4372      	muls	r2, r6
 801bf32:	1c56      	adds	r6, r2, #1
 801bf34:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bf38:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801bf3c:	1212      	asrs	r2, r2, #8
 801bf3e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801bf42:	fa1f fa82 	uxth.w	sl, r2
 801bf46:	43d2      	mvns	r2, r2
 801bf48:	fb1b fb0a 	smulbb	fp, fp, sl
 801bf4c:	b2d2      	uxtb	r2, r2
 801bf4e:	fb09 b902 	mla	r9, r9, r2, fp
 801bf52:	fa1f f989 	uxth.w	r9, r9
 801bf56:	f109 0b01 	add.w	fp, r9, #1
 801bf5a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bf5e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bf62:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bf66:	fb1b fb0a 	smulbb	fp, fp, sl
 801bf6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf6e:	fb17 fa0a 	smulbb	sl, r7, sl
 801bf72:	f805 9006 	strb.w	r9, [r5, r6]
 801bf76:	442e      	add	r6, r5
 801bf78:	78b7      	ldrb	r7, [r6, #2]
 801bf7a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801bf7e:	fb07 aa02 	mla	sl, r7, r2, sl
 801bf82:	fb09 b902 	mla	r9, r9, r2, fp
 801bf86:	fa1f fa8a 	uxth.w	sl, sl
 801bf8a:	fa1f f989 	uxth.w	r9, r9
 801bf8e:	f10a 0701 	add.w	r7, sl, #1
 801bf92:	f109 0b01 	add.w	fp, r9, #1
 801bf96:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bf9a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bf9e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bfa2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bfa6:	f886 a002 	strb.w	sl, [r6, #2]
 801bfaa:	f886 9001 	strb.w	r9, [r6, #1]
 801bfae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bfb0:	4474      	add	r4, lr
 801bfb2:	f108 0801 	add.w	r8, r8, #1
 801bfb6:	4410      	add	r0, r2
 801bfb8:	e762      	b.n	801be80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801bfba:	b005      	add	sp, #20
 801bfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bfc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bfc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bfc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bfca:	9201      	str	r2, [sp, #4]
 801bfcc:	6860      	ldr	r0, [r4, #4]
 801bfce:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801bfd2:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801bfd6:	fb00 2505 	mla	r5, r0, r5, r2
 801bfda:	6822      	ldr	r2, [r4, #0]
 801bfdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bfe0:	4415      	add	r5, r2
 801bfe2:	f8dc 2000 	ldr.w	r2, [ip]
 801bfe6:	9200      	str	r2, [sp, #0]
 801bfe8:	2900      	cmp	r1, #0
 801bfea:	dc03      	bgt.n	801bff4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801bfec:	9a01      	ldr	r2, [sp, #4]
 801bfee:	2a00      	cmp	r2, #0
 801bff0:	f340 812b 	ble.w	801c24a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bff6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801bffa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bffe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c000:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c004:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c008:	2b00      	cmp	r3, #0
 801c00a:	dd0e      	ble.n	801c02a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c00c:	1422      	asrs	r2, r4, #16
 801c00e:	d405      	bmi.n	801c01c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c010:	4572      	cmp	r2, lr
 801c012:	da03      	bge.n	801c01c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c014:	1402      	asrs	r2, r0, #16
 801c016:	d401      	bmi.n	801c01c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c018:	42ba      	cmp	r2, r7
 801c01a:	db07      	blt.n	801c02c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801c01c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c01e:	3b01      	subs	r3, #1
 801c020:	3503      	adds	r5, #3
 801c022:	4414      	add	r4, r2
 801c024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c026:	4410      	add	r0, r2
 801c028:	e7ee      	b.n	801c008 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c02a:	d06f      	beq.n	801c10c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801c02c:	1e5a      	subs	r2, r3, #1
 801c02e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c030:	fb06 4602 	mla	r6, r6, r2, r4
 801c034:	1436      	asrs	r6, r6, #16
 801c036:	d45e      	bmi.n	801c0f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c038:	4576      	cmp	r6, lr
 801c03a:	da5c      	bge.n	801c0f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c03c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c03e:	fb06 0202 	mla	r2, r6, r2, r0
 801c042:	1412      	asrs	r2, r2, #16
 801c044:	d457      	bmi.n	801c0f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c046:	42ba      	cmp	r2, r7
 801c048:	da55      	bge.n	801c0f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c04a:	1cee      	adds	r6, r5, #3
 801c04c:	469a      	mov	sl, r3
 801c04e:	f1ba 0f00 	cmp.w	sl, #0
 801c052:	dd56      	ble.n	801c102 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c054:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c058:	1427      	asrs	r7, r4, #16
 801c05a:	1402      	asrs	r2, r0, #16
 801c05c:	fb0e 7202 	mla	r2, lr, r2, r7
 801c060:	9f00      	ldr	r7, [sp, #0]
 801c062:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c066:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801c06a:	d03c      	beq.n	801c0e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c06c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c070:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c074:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c078:	fa5f f28e 	uxtb.w	r2, lr
 801c07c:	b2ff      	uxtb	r7, r7
 801c07e:	f000 80dd 	beq.w	801c23c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801c082:	fa1f f882 	uxth.w	r8, r2
 801c086:	43d2      	mvns	r2, r2
 801c088:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801c08c:	fb17 f708 	smulbb	r7, r7, r8
 801c090:	b2d2      	uxtb	r2, r2
 801c092:	fb19 f908 	smulbb	r9, r9, r8
 801c096:	fb0e 7702 	mla	r7, lr, r2, r7
 801c09a:	fb1b f808 	smulbb	r8, fp, r8
 801c09e:	b2bf      	uxth	r7, r7
 801c0a0:	f107 0e01 	add.w	lr, r7, #1
 801c0a4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c0a8:	123f      	asrs	r7, r7, #8
 801c0aa:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c0ae:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c0b2:	fb07 9902 	mla	r9, r7, r2, r9
 801c0b6:	fa1f f989 	uxth.w	r9, r9
 801c0ba:	f109 0701 	add.w	r7, r9, #1
 801c0be:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c0c2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c0c6:	fb07 8802 	mla	r8, r7, r2, r8
 801c0ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0ce:	fa1f f888 	uxth.w	r8, r8
 801c0d2:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c0d6:	f108 0201 	add.w	r2, r8, #1
 801c0da:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c0de:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c0e2:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c0e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c0e8:	3603      	adds	r6, #3
 801c0ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c0ee:	4414      	add	r4, r2
 801c0f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c0f2:	4410      	add	r0, r2
 801c0f4:	e7ab      	b.n	801c04e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c0f6:	f04f 0e00 	mov.w	lr, #0
 801c0fa:	eba3 020e 	sub.w	r2, r3, lr
 801c0fe:	2a00      	cmp	r2, #0
 801c100:	dc3d      	bgt.n	801c17e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801c102:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c106:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c10a:	441d      	add	r5, r3
 801c10c:	2900      	cmp	r1, #0
 801c10e:	f340 809c 	ble.w	801c24a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c112:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c118:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c11c:	3901      	subs	r1, #1
 801c11e:	eeb0 6a62 	vmov.f32	s12, s5
 801c122:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c126:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c12a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c12e:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c132:	eeb0 6a43 	vmov.f32	s12, s6
 801c136:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c13a:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c13e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c142:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c146:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c14a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c14e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c152:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c156:	ee12 2a90 	vmov	r2, s5
 801c15a:	eef0 2a47 	vmov.f32	s5, s14
 801c15e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c162:	ee13 2a10 	vmov	r2, s6
 801c166:	930f      	str	r3, [sp, #60]	; 0x3c
 801c168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c16a:	eeb0 3a67 	vmov.f32	s6, s15
 801c16e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c172:	9a01      	ldr	r2, [sp, #4]
 801c174:	9310      	str	r3, [sp, #64]	; 0x40
 801c176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c178:	bf08      	it	eq
 801c17a:	4613      	moveq	r3, r2
 801c17c:	e734      	b.n	801bfe8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801c17e:	1427      	asrs	r7, r4, #16
 801c180:	d44d      	bmi.n	801c21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c182:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c186:	42be      	cmp	r6, r7
 801c188:	dd49      	ble.n	801c21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c18a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c18e:	d446      	bmi.n	801c21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c190:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c194:	4542      	cmp	r2, r8
 801c196:	dd42      	ble.n	801c21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c198:	b236      	sxth	r6, r6
 801c19a:	9a00      	ldr	r2, [sp, #0]
 801c19c:	fb08 7606 	mla	r6, r8, r6, r7
 801c1a0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801c1a4:	0e3a      	lsrs	r2, r7, #24
 801c1a6:	d03a      	beq.n	801c21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c1a8:	2aff      	cmp	r2, #255	; 0xff
 801c1aa:	b2d6      	uxtb	r6, r2
 801c1ac:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c1b0:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c1b4:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801c1b8:	b2ff      	uxtb	r7, r7
 801c1ba:	d037      	beq.n	801c22c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801c1bc:	fa1f f986 	uxth.w	r9, r6
 801c1c0:	4472      	add	r2, lr
 801c1c2:	43f6      	mvns	r6, r6
 801c1c4:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c1c8:	fb17 f709 	smulbb	r7, r7, r9
 801c1cc:	fb1a fa09 	smulbb	sl, sl, r9
 801c1d0:	b2f6      	uxtb	r6, r6
 801c1d2:	fb1b f909 	smulbb	r9, fp, r9
 801c1d6:	fb08 7706 	mla	r7, r8, r6, r7
 801c1da:	b2bf      	uxth	r7, r7
 801c1dc:	f107 0801 	add.w	r8, r7, #1
 801c1e0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c1e4:	123f      	asrs	r7, r7, #8
 801c1e6:	54af      	strb	r7, [r5, r2]
 801c1e8:	442a      	add	r2, r5
 801c1ea:	7857      	ldrb	r7, [r2, #1]
 801c1ec:	fb07 aa06 	mla	sl, r7, r6, sl
 801c1f0:	fa1f fa8a 	uxth.w	sl, sl
 801c1f4:	f10a 0701 	add.w	r7, sl, #1
 801c1f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c1fc:	7897      	ldrb	r7, [r2, #2]
 801c1fe:	fb07 9906 	mla	r9, r7, r6, r9
 801c202:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c206:	fa1f f989 	uxth.w	r9, r9
 801c20a:	f882 a001 	strb.w	sl, [r2, #1]
 801c20e:	f109 0601 	add.w	r6, r9, #1
 801c212:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c216:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c21a:	f882 9002 	strb.w	r9, [r2, #2]
 801c21e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c220:	f10e 0e01 	add.w	lr, lr, #1
 801c224:	4414      	add	r4, r2
 801c226:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c228:	4410      	add	r0, r2
 801c22a:	e766      	b.n	801c0fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c22c:	4472      	add	r2, lr
 801c22e:	54af      	strb	r7, [r5, r2]
 801c230:	442a      	add	r2, r5
 801c232:	f882 a001 	strb.w	sl, [r2, #1]
 801c236:	f882 b002 	strb.w	fp, [r2, #2]
 801c23a:	e7f0      	b.n	801c21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801c23c:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c240:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c244:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c248:	e74d      	b.n	801c0e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c24a:	b003      	add	sp, #12
 801c24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c250 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c254:	b087      	sub	sp, #28
 801c256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c25a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c25c:	9204      	str	r2, [sp, #16]
 801c25e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c262:	6860      	ldr	r0, [r4, #4]
 801c264:	9205      	str	r2, [sp, #20]
 801c266:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801c26a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801c26e:	9101      	str	r1, [sp, #4]
 801c270:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c274:	fb00 2505 	mla	r5, r0, r5, r2
 801c278:	6822      	ldr	r2, [r4, #0]
 801c27a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c27e:	4415      	add	r5, r2
 801c280:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c284:	3201      	adds	r2, #1
 801c286:	f022 0201 	bic.w	r2, r2, #1
 801c28a:	9202      	str	r2, [sp, #8]
 801c28c:	f8dc 2000 	ldr.w	r2, [ip]
 801c290:	9203      	str	r2, [sp, #12]
 801c292:	9a01      	ldr	r2, [sp, #4]
 801c294:	2a00      	cmp	r2, #0
 801c296:	dc03      	bgt.n	801c2a0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c298:	9a04      	ldr	r2, [sp, #16]
 801c29a:	2a00      	cmp	r2, #0
 801c29c:	f340 8135 	ble.w	801c50a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c2a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c2a2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c2a6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c2aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c2ac:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c2b0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	dd0d      	ble.n	801c2d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c2b8:	1422      	asrs	r2, r4, #16
 801c2ba:	d405      	bmi.n	801c2c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c2bc:	4542      	cmp	r2, r8
 801c2be:	da03      	bge.n	801c2c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c2c0:	1402      	asrs	r2, r0, #16
 801c2c2:	d401      	bmi.n	801c2c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c2c4:	42ba      	cmp	r2, r7
 801c2c6:	db06      	blt.n	801c2d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c2c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c2ca:	4474      	add	r4, lr
 801c2cc:	3b01      	subs	r3, #1
 801c2ce:	3503      	adds	r5, #3
 801c2d0:	4410      	add	r0, r2
 801c2d2:	e7ef      	b.n	801c2b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c2d4:	d077      	beq.n	801c3c6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801c2d6:	1e5a      	subs	r2, r3, #1
 801c2d8:	fb0e 4602 	mla	r6, lr, r2, r4
 801c2dc:	1436      	asrs	r6, r6, #16
 801c2de:	d469      	bmi.n	801c3b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c2e0:	4546      	cmp	r6, r8
 801c2e2:	da67      	bge.n	801c3b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c2e4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c2e6:	fb06 0202 	mla	r2, r6, r2, r0
 801c2ea:	1412      	asrs	r2, r2, #16
 801c2ec:	d462      	bmi.n	801c3b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c2ee:	42ba      	cmp	r2, r7
 801c2f0:	da60      	bge.n	801c3b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c2f2:	1cee      	adds	r6, r5, #3
 801c2f4:	4699      	mov	r9, r3
 801c2f6:	f1b9 0f00 	cmp.w	r9, #0
 801c2fa:	dd5f      	ble.n	801c3bc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801c2fc:	1422      	asrs	r2, r4, #16
 801c2fe:	9902      	ldr	r1, [sp, #8]
 801c300:	1407      	asrs	r7, r0, #16
 801c302:	fb01 2707 	mla	r7, r1, r7, r2
 801c306:	9903      	ldr	r1, [sp, #12]
 801c308:	087a      	lsrs	r2, r7, #1
 801c30a:	5c8a      	ldrb	r2, [r1, r2]
 801c30c:	07f9      	lsls	r1, r7, #31
 801c30e:	bf54      	ite	pl
 801c310:	f002 020f 	andpl.w	r2, r2, #15
 801c314:	1112      	asrmi	r2, r2, #4
 801c316:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c31a:	b2d2      	uxtb	r2, r2
 801c31c:	2a00      	cmp	r2, #0
 801c31e:	d042      	beq.n	801c3a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c320:	497b      	ldr	r1, [pc, #492]	; (801c510 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c322:	680f      	ldr	r7, [r1, #0]
 801c324:	9905      	ldr	r1, [sp, #20]
 801c326:	fa5f fb87 	uxtb.w	fp, r7
 801c32a:	434a      	muls	r2, r1
 801c32c:	f102 0801 	add.w	r8, r2, #1
 801c330:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801c334:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801c338:	1212      	asrs	r2, r2, #8
 801c33a:	fa1f fa82 	uxth.w	sl, r2
 801c33e:	43d2      	mvns	r2, r2
 801c340:	fb1b fb0a 	smulbb	fp, fp, sl
 801c344:	b2d2      	uxtb	r2, r2
 801c346:	fb08 b802 	mla	r8, r8, r2, fp
 801c34a:	fa1f f888 	uxth.w	r8, r8
 801c34e:	f108 0b01 	add.w	fp, r8, #1
 801c352:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c356:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c35a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c35e:	fb1b fb0a 	smulbb	fp, fp, sl
 801c362:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c366:	fb17 fa0a 	smulbb	sl, r7, sl
 801c36a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c36e:	f806 8c03 	strb.w	r8, [r6, #-3]
 801c372:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801c376:	fb07 aa02 	mla	sl, r7, r2, sl
 801c37a:	fb08 b802 	mla	r8, r8, r2, fp
 801c37e:	fa1f fa8a 	uxth.w	sl, sl
 801c382:	fa1f f888 	uxth.w	r8, r8
 801c386:	f10a 0701 	add.w	r7, sl, #1
 801c38a:	f108 0b01 	add.w	fp, r8, #1
 801c38e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c392:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c396:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c39a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c39e:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c3a2:	f806 8c02 	strb.w	r8, [r6, #-2]
 801c3a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c3a8:	4474      	add	r4, lr
 801c3aa:	3603      	adds	r6, #3
 801c3ac:	f109 39ff 	add.w	r9, r9, #4294967295
 801c3b0:	4410      	add	r0, r2
 801c3b2:	e7a0      	b.n	801c2f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801c3b4:	2700      	movs	r7, #0
 801c3b6:	1bda      	subs	r2, r3, r7
 801c3b8:	2a00      	cmp	r2, #0
 801c3ba:	dc3e      	bgt.n	801c43a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801c3bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c3c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3c4:	441d      	add	r5, r3
 801c3c6:	9b01      	ldr	r3, [sp, #4]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	f340 809e 	ble.w	801c50a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801c3ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c3d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c3d8:	eeb0 6a62 	vmov.f32	s12, s5
 801c3dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c3e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c3e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3e8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c3ec:	eeb0 6a43 	vmov.f32	s12, s6
 801c3f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3f4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c3f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c400:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c404:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c408:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c40c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c410:	ee12 2a90 	vmov	r2, s5
 801c414:	eef0 2a47 	vmov.f32	s5, s14
 801c418:	fb92 fef3 	sdiv	lr, r2, r3
 801c41c:	ee13 2a10 	vmov	r2, s6
 801c420:	eeb0 3a67 	vmov.f32	s6, s15
 801c424:	fb92 f3f3 	sdiv	r3, r2, r3
 801c428:	9314      	str	r3, [sp, #80]	; 0x50
 801c42a:	9b01      	ldr	r3, [sp, #4]
 801c42c:	9a04      	ldr	r2, [sp, #16]
 801c42e:	3b01      	subs	r3, #1
 801c430:	9301      	str	r3, [sp, #4]
 801c432:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c434:	bf08      	it	eq
 801c436:	4613      	moveq	r3, r2
 801c438:	e72b      	b.n	801c292 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c43a:	1426      	asrs	r6, r4, #16
 801c43c:	d460      	bmi.n	801c500 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c43e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c442:	42b2      	cmp	r2, r6
 801c444:	dd5c      	ble.n	801c500 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c446:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c44a:	d459      	bmi.n	801c500 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c44c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c450:	4542      	cmp	r2, r8
 801c452:	dd55      	ble.n	801c500 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c454:	9a02      	ldr	r2, [sp, #8]
 801c456:	9903      	ldr	r1, [sp, #12]
 801c458:	fb08 6602 	mla	r6, r8, r2, r6
 801c45c:	0872      	lsrs	r2, r6, #1
 801c45e:	07f6      	lsls	r6, r6, #31
 801c460:	5c8a      	ldrb	r2, [r1, r2]
 801c462:	bf54      	ite	pl
 801c464:	f002 020f 	andpl.w	r2, r2, #15
 801c468:	1112      	asrmi	r2, r2, #4
 801c46a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c46e:	b2d2      	uxtb	r2, r2
 801c470:	2a00      	cmp	r2, #0
 801c472:	d045      	beq.n	801c500 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c474:	4926      	ldr	r1, [pc, #152]	; (801c510 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801c476:	f8d1 8000 	ldr.w	r8, [r1]
 801c47a:	9905      	ldr	r1, [sp, #20]
 801c47c:	fa5f fb88 	uxtb.w	fp, r8
 801c480:	434a      	muls	r2, r1
 801c482:	1c56      	adds	r6, r2, #1
 801c484:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c488:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c48c:	1212      	asrs	r2, r2, #8
 801c48e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c492:	fa1f fa82 	uxth.w	sl, r2
 801c496:	43d2      	mvns	r2, r2
 801c498:	fb1b fb0a 	smulbb	fp, fp, sl
 801c49c:	b2d2      	uxtb	r2, r2
 801c49e:	fb09 b902 	mla	r9, r9, r2, fp
 801c4a2:	fa1f f989 	uxth.w	r9, r9
 801c4a6:	f109 0b01 	add.w	fp, r9, #1
 801c4aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c4ae:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801c4b2:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801c4b6:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4be:	fb18 fa0a 	smulbb	sl, r8, sl
 801c4c2:	f805 9006 	strb.w	r9, [r5, r6]
 801c4c6:	442e      	add	r6, r5
 801c4c8:	f896 8002 	ldrb.w	r8, [r6, #2]
 801c4cc:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c4d0:	fb08 aa02 	mla	sl, r8, r2, sl
 801c4d4:	fb09 b902 	mla	r9, r9, r2, fp
 801c4d8:	fa1f fa8a 	uxth.w	sl, sl
 801c4dc:	fa1f f989 	uxth.w	r9, r9
 801c4e0:	f10a 0801 	add.w	r8, sl, #1
 801c4e4:	f109 0b01 	add.w	fp, r9, #1
 801c4e8:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801c4ec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c4f0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c4f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4f8:	f886 a002 	strb.w	sl, [r6, #2]
 801c4fc:	f886 9001 	strb.w	r9, [r6, #1]
 801c500:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c502:	4474      	add	r4, lr
 801c504:	3701      	adds	r7, #1
 801c506:	4410      	add	r0, r2
 801c508:	e755      	b.n	801c3b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801c50a:	b007      	add	sp, #28
 801c50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c510:	2400f448 	.word	0x2400f448

0801c514 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c518:	b085      	sub	sp, #20
 801c51a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c51e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c520:	9203      	str	r2, [sp, #12]
 801c522:	6860      	ldr	r0, [r4, #4]
 801c524:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c528:	9100      	str	r1, [sp, #0]
 801c52a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801c52e:	fb00 2606 	mla	r6, r0, r6, r2
 801c532:	6822      	ldr	r2, [r4, #0]
 801c534:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c538:	4416      	add	r6, r2
 801c53a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c53e:	3201      	adds	r2, #1
 801c540:	f022 0201 	bic.w	r2, r2, #1
 801c544:	9201      	str	r2, [sp, #4]
 801c546:	f8dc 2000 	ldr.w	r2, [ip]
 801c54a:	9202      	str	r2, [sp, #8]
 801c54c:	9a00      	ldr	r2, [sp, #0]
 801c54e:	2a00      	cmp	r2, #0
 801c550:	dc03      	bgt.n	801c55a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801c552:	9a03      	ldr	r2, [sp, #12]
 801c554:	2a00      	cmp	r2, #0
 801c556:	f340 8140 	ble.w	801c7da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801c55a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c55c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801c560:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801c564:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c566:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c56a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c56e:	2b00      	cmp	r3, #0
 801c570:	dd0e      	ble.n	801c590 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c572:	142a      	asrs	r2, r5, #16
 801c574:	d405      	bmi.n	801c582 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c576:	4572      	cmp	r2, lr
 801c578:	da03      	bge.n	801c582 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c57a:	1422      	asrs	r2, r4, #16
 801c57c:	d401      	bmi.n	801c582 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c57e:	42ba      	cmp	r2, r7
 801c580:	db07      	blt.n	801c592 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c582:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c584:	3b01      	subs	r3, #1
 801c586:	3603      	adds	r6, #3
 801c588:	4415      	add	r5, r2
 801c58a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c58c:	4414      	add	r4, r2
 801c58e:	e7ee      	b.n	801c56e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c590:	d072      	beq.n	801c678 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801c592:	1e5a      	subs	r2, r3, #1
 801c594:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c596:	fb00 5002 	mla	r0, r0, r2, r5
 801c59a:	1400      	asrs	r0, r0, #16
 801c59c:	d463      	bmi.n	801c666 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c59e:	4570      	cmp	r0, lr
 801c5a0:	da61      	bge.n	801c666 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c5a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c5a4:	fb00 4202 	mla	r2, r0, r2, r4
 801c5a8:	1412      	asrs	r2, r2, #16
 801c5aa:	d45c      	bmi.n	801c666 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c5ac:	42ba      	cmp	r2, r7
 801c5ae:	da5a      	bge.n	801c666 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c5b0:	1cf0      	adds	r0, r6, #3
 801c5b2:	469a      	mov	sl, r3
 801c5b4:	f1ba 0f00 	cmp.w	sl, #0
 801c5b8:	dd59      	ble.n	801c66e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c5ba:	142a      	asrs	r2, r5, #16
 801c5bc:	9901      	ldr	r1, [sp, #4]
 801c5be:	1427      	asrs	r7, r4, #16
 801c5c0:	fb01 2707 	mla	r7, r1, r7, r2
 801c5c4:	9902      	ldr	r1, [sp, #8]
 801c5c6:	087a      	lsrs	r2, r7, #1
 801c5c8:	5c8a      	ldrb	r2, [r1, r2]
 801c5ca:	07f9      	lsls	r1, r7, #31
 801c5cc:	bf54      	ite	pl
 801c5ce:	f002 020f 	andpl.w	r2, r2, #15
 801c5d2:	1112      	asrmi	r2, r2, #4
 801c5d4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c5d8:	b2d2      	uxtb	r2, r2
 801c5da:	2a00      	cmp	r2, #0
 801c5dc:	d03b      	beq.n	801c656 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c5de:	4980      	ldr	r1, [pc, #512]	; (801c7e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801c5e0:	2aff      	cmp	r2, #255	; 0xff
 801c5e2:	680f      	ldr	r7, [r1, #0]
 801c5e4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c5e8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c5ec:	b2ff      	uxtb	r7, r7
 801c5ee:	f000 80ed 	beq.w	801c7cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801c5f2:	fa1f f882 	uxth.w	r8, r2
 801c5f6:	43d2      	mvns	r2, r2
 801c5f8:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801c5fc:	fb17 f708 	smulbb	r7, r7, r8
 801c600:	b2d2      	uxtb	r2, r2
 801c602:	fb19 f908 	smulbb	r9, r9, r8
 801c606:	fb0e 7702 	mla	r7, lr, r2, r7
 801c60a:	fb1b f808 	smulbb	r8, fp, r8
 801c60e:	b2bf      	uxth	r7, r7
 801c610:	f107 0e01 	add.w	lr, r7, #1
 801c614:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c618:	123f      	asrs	r7, r7, #8
 801c61a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c61e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801c622:	fb07 9902 	mla	r9, r7, r2, r9
 801c626:	fa1f f989 	uxth.w	r9, r9
 801c62a:	f109 0701 	add.w	r7, r9, #1
 801c62e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c632:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801c636:	fb07 8802 	mla	r8, r7, r2, r8
 801c63a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c63e:	fa1f f888 	uxth.w	r8, r8
 801c642:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c646:	f108 0201 	add.w	r2, r8, #1
 801c64a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c64e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c652:	f800 8c01 	strb.w	r8, [r0, #-1]
 801c656:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c658:	3003      	adds	r0, #3
 801c65a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c65e:	4415      	add	r5, r2
 801c660:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c662:	4414      	add	r4, r2
 801c664:	e7a6      	b.n	801c5b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c666:	2700      	movs	r7, #0
 801c668:	1bda      	subs	r2, r3, r7
 801c66a:	2a00      	cmp	r2, #0
 801c66c:	dc40      	bgt.n	801c6f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801c66e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c672:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c676:	441e      	add	r6, r3
 801c678:	9b00      	ldr	r3, [sp, #0]
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	f340 80ad 	ble.w	801c7da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801c680:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c686:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c68a:	eeb0 6a62 	vmov.f32	s12, s5
 801c68e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c692:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c696:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c69a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c69e:	eeb0 6a43 	vmov.f32	s12, s6
 801c6a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6a6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c6aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6c2:	ee12 2a90 	vmov	r2, s5
 801c6c6:	eef0 2a47 	vmov.f32	s5, s14
 801c6ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6ce:	ee13 2a10 	vmov	r2, s6
 801c6d2:	9311      	str	r3, [sp, #68]	; 0x44
 801c6d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6d6:	eeb0 3a67 	vmov.f32	s6, s15
 801c6da:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6de:	9312      	str	r3, [sp, #72]	; 0x48
 801c6e0:	9b00      	ldr	r3, [sp, #0]
 801c6e2:	9a03      	ldr	r2, [sp, #12]
 801c6e4:	3b01      	subs	r3, #1
 801c6e6:	9300      	str	r3, [sp, #0]
 801c6e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6ea:	bf08      	it	eq
 801c6ec:	4613      	moveq	r3, r2
 801c6ee:	e72d      	b.n	801c54c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c6f0:	1428      	asrs	r0, r5, #16
 801c6f2:	d45c      	bmi.n	801c7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c6f4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c6f8:	4282      	cmp	r2, r0
 801c6fa:	dd58      	ble.n	801c7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c6fc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c700:	d455      	bmi.n	801c7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c702:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c706:	4572      	cmp	r2, lr
 801c708:	dd51      	ble.n	801c7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c70a:	9a01      	ldr	r2, [sp, #4]
 801c70c:	9902      	ldr	r1, [sp, #8]
 801c70e:	fb0e 0002 	mla	r0, lr, r2, r0
 801c712:	0842      	lsrs	r2, r0, #1
 801c714:	07c0      	lsls	r0, r0, #31
 801c716:	5c8a      	ldrb	r2, [r1, r2]
 801c718:	bf54      	ite	pl
 801c71a:	f002 020f 	andpl.w	r2, r2, #15
 801c71e:	1112      	asrmi	r2, r2, #4
 801c720:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c724:	b2d2      	uxtb	r2, r2
 801c726:	2a00      	cmp	r2, #0
 801c728:	d041      	beq.n	801c7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c72a:	492d      	ldr	r1, [pc, #180]	; (801c7e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801c72c:	2aff      	cmp	r2, #255	; 0xff
 801c72e:	6808      	ldr	r0, [r1, #0]
 801c730:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801c734:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c738:	fa5f fe80 	uxtb.w	lr, r0
 801c73c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801c740:	d03b      	beq.n	801c7ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801c742:	fa1f f982 	uxth.w	r9, r2
 801c746:	4438      	add	r0, r7
 801c748:	43d2      	mvns	r2, r2
 801c74a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801c74e:	fb1e fe09 	smulbb	lr, lr, r9
 801c752:	fb1a fa09 	smulbb	sl, sl, r9
 801c756:	b2d2      	uxtb	r2, r2
 801c758:	fb1b f909 	smulbb	r9, fp, r9
 801c75c:	fb08 ee02 	mla	lr, r8, r2, lr
 801c760:	fa1f fe8e 	uxth.w	lr, lr
 801c764:	f10e 0801 	add.w	r8, lr, #1
 801c768:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801c76c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c770:	f806 e000 	strb.w	lr, [r6, r0]
 801c774:	4430      	add	r0, r6
 801c776:	f890 e001 	ldrb.w	lr, [r0, #1]
 801c77a:	fb0e aa02 	mla	sl, lr, r2, sl
 801c77e:	fa1f fa8a 	uxth.w	sl, sl
 801c782:	f10a 0e01 	add.w	lr, sl, #1
 801c786:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801c78a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801c78e:	fb0e 9902 	mla	r9, lr, r2, r9
 801c792:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c796:	fa1f f989 	uxth.w	r9, r9
 801c79a:	f880 a001 	strb.w	sl, [r0, #1]
 801c79e:	f109 0201 	add.w	r2, r9, #1
 801c7a2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c7a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c7aa:	f880 9002 	strb.w	r9, [r0, #2]
 801c7ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c7b0:	3701      	adds	r7, #1
 801c7b2:	4415      	add	r5, r2
 801c7b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c7b6:	4414      	add	r4, r2
 801c7b8:	e756      	b.n	801c668 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c7ba:	4438      	add	r0, r7
 801c7bc:	f806 e000 	strb.w	lr, [r6, r0]
 801c7c0:	4430      	add	r0, r6
 801c7c2:	f880 a001 	strb.w	sl, [r0, #1]
 801c7c6:	f880 b002 	strb.w	fp, [r0, #2]
 801c7ca:	e7f0      	b.n	801c7ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c7cc:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c7d0:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c7d4:	f800 bc01 	strb.w	fp, [r0, #-1]
 801c7d8:	e73d      	b.n	801c656 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c7da:	b005      	add	sp, #20
 801c7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7e0:	2400f448 	.word	0x2400f448

0801c7e4 <_ZN8touchgfx8LCD24bppD1Ev>:
 801c7e4:	4770      	bx	lr

0801c7e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c7e6:	4770      	bx	lr

0801c7e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c7e8:	4770      	bx	lr

0801c7ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c7ea:	4770      	bx	lr

0801c7ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c7ec:	4770      	bx	lr

0801c7ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c7ee:	4770      	bx	lr

0801c7f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c7f0:	4770      	bx	lr

0801c7f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c7f2:	4770      	bx	lr

0801c7f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c7f4:	4770      	bx	lr

0801c7f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c7f6:	4770      	bx	lr

0801c7f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c7f8:	4770      	bx	lr

0801c7fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c7fa:	4770      	bx	lr

0801c7fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c7fc:	4770      	bx	lr

0801c7fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c7fe:	4770      	bx	lr

0801c800 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c800:	4770      	bx	lr

0801c802 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c802:	4770      	bx	lr

0801c804 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c804:	4770      	bx	lr

0801c806 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c806:	4770      	bx	lr

0801c808 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c808:	4770      	bx	lr

0801c80a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c80a:	4770      	bx	lr

0801c80c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c80c:	4770      	bx	lr
	...

0801c810 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c810:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c812:	4606      	mov	r6, r0
 801c814:	b087      	sub	sp, #28
 801c816:	4615      	mov	r5, r2
 801c818:	461f      	mov	r7, r3
 801c81a:	b353      	cbz	r3, 801c872 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c81c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c820:	2b00      	cmp	r3, #0
 801c822:	dd26      	ble.n	801c872 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c824:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	dd22      	ble.n	801c872 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c82c:	6808      	ldr	r0, [r1, #0]
 801c82e:	aa04      	add	r2, sp, #16
 801c830:	6849      	ldr	r1, [r1, #4]
 801c832:	4c1b      	ldr	r4, [pc, #108]	; (801c8a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c834:	c203      	stmia	r2!, {r0, r1}
 801c836:	a804      	add	r0, sp, #16
 801c838:	f7fa ff92 	bl	8017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c83c:	6820      	ldr	r0, [r4, #0]
 801c83e:	6803      	ldr	r3, [r0, #0]
 801c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c842:	4798      	blx	r3
 801c844:	2fff      	cmp	r7, #255	; 0xff
 801c846:	d016      	beq.n	801c876 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c848:	f010 0f08 	tst.w	r0, #8
 801c84c:	6820      	ldr	r0, [r4, #0]
 801c84e:	d015      	beq.n	801c87c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801c850:	2400      	movs	r4, #0
 801c852:	6801      	ldr	r1, [r0, #0]
 801c854:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c858:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c85c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801c860:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c864:	9401      	str	r4, [sp, #4]
 801c866:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c86a:	9400      	str	r4, [sp, #0]
 801c86c:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801c86e:	4629      	mov	r1, r5
 801c870:	47a0      	blx	r4
 801c872:	b007      	add	sp, #28
 801c874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c876:	f010 0f02 	tst.w	r0, #2
 801c87a:	e7e7      	b.n	801c84c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801c87c:	6803      	ldr	r3, [r0, #0]
 801c87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c880:	4798      	blx	r3
 801c882:	4b08      	ldr	r3, [pc, #32]	; (801c8a4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801c884:	4601      	mov	r1, r0
 801c886:	4630      	mov	r0, r6
 801c888:	881a      	ldrh	r2, [r3, #0]
 801c88a:	6833      	ldr	r3, [r6, #0]
 801c88c:	e9cd 5700 	strd	r5, r7, [sp]
 801c890:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c892:	ab04      	add	r3, sp, #16
 801c894:	47a8      	blx	r5
 801c896:	6820      	ldr	r0, [r4, #0]
 801c898:	6803      	ldr	r3, [r0, #0]
 801c89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c89c:	4798      	blx	r3
 801c89e:	e7e8      	b.n	801c872 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c8a0:	2400f440 	.word	0x2400f440
 801c8a4:	2400f43a 	.word	0x2400f43a

0801c8a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c8ac:	b08b      	sub	sp, #44	; 0x2c
 801c8ae:	460d      	mov	r5, r1
 801c8b0:	4616      	mov	r6, r2
 801c8b2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801c8b6:	f1b8 0f00 	cmp.w	r8, #0
 801c8ba:	d047      	beq.n	801c94c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801c8bc:	6810      	ldr	r0, [r2, #0]
 801c8be:	ac06      	add	r4, sp, #24
 801c8c0:	6851      	ldr	r1, [r2, #4]
 801c8c2:	4f51      	ldr	r7, [pc, #324]	; (801ca08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801c8c4:	c403      	stmia	r4!, {r0, r1}
 801c8c6:	6818      	ldr	r0, [r3, #0]
 801c8c8:	ac08      	add	r4, sp, #32
 801c8ca:	6859      	ldr	r1, [r3, #4]
 801c8cc:	c403      	stmia	r4!, {r0, r1}
 801c8ce:	a806      	add	r0, sp, #24
 801c8d0:	f7fa ff46 	bl	8017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c8d4:	4631      	mov	r1, r6
 801c8d6:	a808      	add	r0, sp, #32
 801c8d8:	f7fa ff6a 	bl	80177b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c8dc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c8e0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c8e4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c8e8:	6838      	ldr	r0, [r7, #0]
 801c8ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c8ee:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801c8f2:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801c8f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c8fa:	440d      	add	r5, r1
 801c8fc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c900:	440a      	add	r2, r1
 801c902:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c906:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c90a:	4413      	add	r3, r2
 801c90c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c910:	6803      	ldr	r3, [r0, #0]
 801c912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c914:	4798      	blx	r3
 801c916:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c91a:	d01a      	beq.n	801c952 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801c91c:	f010 0f04 	tst.w	r0, #4
 801c920:	6838      	ldr	r0, [r7, #0]
 801c922:	d019      	beq.n	801c958 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801c924:	2100      	movs	r1, #0
 801c926:	6807      	ldr	r7, [r0, #0]
 801c928:	b2a4      	uxth	r4, r4
 801c92a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c92e:	b2b6      	uxth	r6, r6
 801c930:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c934:	9401      	str	r4, [sp, #4]
 801c936:	9600      	str	r6, [sp, #0]
 801c938:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c93c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801c940:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c944:	9102      	str	r1, [sp, #8]
 801c946:	4629      	mov	r1, r5
 801c948:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801c94a:	47a0      	blx	r4
 801c94c:	b00b      	add	sp, #44	; 0x2c
 801c94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c952:	f010 0f01 	tst.w	r0, #1
 801c956:	e7e3      	b.n	801c920 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801c958:	6803      	ldr	r3, [r0, #0]
 801c95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c95c:	4798      	blx	r3
 801c95e:	4a2b      	ldr	r2, [pc, #172]	; (801ca0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801c960:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801c964:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c968:	8813      	ldrh	r3, [r2, #0]
 801c96a:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801c96e:	fb03 f404 	mul.w	r4, r3, r4
 801c972:	fb03 c101 	mla	r1, r3, r1, ip
 801c976:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c97a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c97e:	4408      	add	r0, r1
 801c980:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801c984:	4404      	add	r4, r0
 801c986:	d02e      	beq.n	801c9e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801c988:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801c98c:	1b9b      	subs	r3, r3, r6
 801c98e:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801c992:	1b96      	subs	r6, r2, r6
 801c994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c998:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c99c:	42a0      	cmp	r0, r4
 801c99e:	d22d      	bcs.n	801c9fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801c9a0:	eb00 0e01 	add.w	lr, r0, r1
 801c9a4:	4570      	cmp	r0, lr
 801c9a6:	d210      	bcs.n	801c9ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801c9a8:	f890 9000 	ldrb.w	r9, [r0]
 801c9ac:	f815 2b01 	ldrb.w	r2, [r5], #1
 801c9b0:	fb19 f90c 	smulbb	r9, r9, ip
 801c9b4:	fb02 9208 	mla	r2, r2, r8, r9
 801c9b8:	b292      	uxth	r2, r2
 801c9ba:	f102 0901 	add.w	r9, r2, #1
 801c9be:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801c9c2:	1212      	asrs	r2, r2, #8
 801c9c4:	f800 2b01 	strb.w	r2, [r0], #1
 801c9c8:	e7ec      	b.n	801c9a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801c9ca:	4418      	add	r0, r3
 801c9cc:	4435      	add	r5, r6
 801c9ce:	e7e5      	b.n	801c99c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801c9d0:	8813      	ldrh	r3, [r2, #0]
 801c9d2:	1b9b      	subs	r3, r3, r6
 801c9d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9d8:	4418      	add	r0, r3
 801c9da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c9de:	1b9b      	subs	r3, r3, r6
 801c9e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9e4:	441d      	add	r5, r3
 801c9e6:	42a0      	cmp	r0, r4
 801c9e8:	d208      	bcs.n	801c9fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801c9ea:	eb00 0c01 	add.w	ip, r0, r1
 801c9ee:	4560      	cmp	r0, ip
 801c9f0:	d2ee      	bcs.n	801c9d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801c9f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c9f6:	f800 3b01 	strb.w	r3, [r0], #1
 801c9fa:	e7f8      	b.n	801c9ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801c9fc:	6838      	ldr	r0, [r7, #0]
 801c9fe:	6803      	ldr	r3, [r0, #0]
 801ca00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca02:	4798      	blx	r3
 801ca04:	e7a2      	b.n	801c94c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801ca06:	bf00      	nop
 801ca08:	2400f440 	.word	0x2400f440
 801ca0c:	2400f43a 	.word	0x2400f43a

0801ca10 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801ca10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca12:	2300      	movs	r3, #0
 801ca14:	b085      	sub	sp, #20
 801ca16:	9300      	str	r3, [sp, #0]
 801ca18:	4b41      	ldr	r3, [pc, #260]	; (801cb20 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801ca1a:	781b      	ldrb	r3, [r3, #0]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d136      	bne.n	801ca8e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801ca20:	4a40      	ldr	r2, [pc, #256]	; (801cb24 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801ca22:	f9b2 2000 	ldrsh.w	r2, [r2]
 801ca26:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d131      	bne.n	801ca92 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801ca2e:	4b3e      	ldr	r3, [pc, #248]	; (801cb28 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801ca30:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ca34:	ac02      	add	r4, sp, #8
 801ca36:	6808      	ldr	r0, [r1, #0]
 801ca38:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ca3c:	ab02      	add	r3, sp, #8
 801ca3e:	6849      	ldr	r1, [r1, #4]
 801ca40:	4d3a      	ldr	r5, [pc, #232]	; (801cb2c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801ca42:	c303      	stmia	r3!, {r0, r1}
 801ca44:	4669      	mov	r1, sp
 801ca46:	4620      	mov	r0, r4
 801ca48:	f7fa feb2 	bl	80177b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca4c:	4668      	mov	r0, sp
 801ca4e:	f7fa fe87 	bl	8017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca52:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ca56:	f8bd 2000 	ldrh.w	r2, [sp]
 801ca5a:	462e      	mov	r6, r5
 801ca5c:	6828      	ldr	r0, [r5, #0]
 801ca5e:	4413      	add	r3, r2
 801ca60:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801ca64:	f8ad 3008 	strh.w	r3, [sp, #8]
 801ca68:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801ca6c:	4413      	add	r3, r2
 801ca6e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801ca72:	6803      	ldr	r3, [r0, #0]
 801ca74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ca76:	4798      	blx	r3
 801ca78:	f010 0f01 	tst.w	r0, #1
 801ca7c:	d00b      	beq.n	801ca96 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801ca7e:	6828      	ldr	r0, [r5, #0]
 801ca80:	6803      	ldr	r3, [r0, #0]
 801ca82:	e894 0006 	ldmia.w	r4, {r1, r2}
 801ca86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ca88:	4798      	blx	r3
 801ca8a:	b005      	add	sp, #20
 801ca8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca8e:	4a26      	ldr	r2, [pc, #152]	; (801cb28 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801ca90:	e7c7      	b.n	801ca22 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801ca92:	4b24      	ldr	r3, [pc, #144]	; (801cb24 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801ca94:	e7cc      	b.n	801ca30 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801ca96:	6830      	ldr	r0, [r6, #0]
 801ca98:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801ca9c:	6803      	ldr	r3, [r0, #0]
 801ca9e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801caa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801caa4:	4798      	blx	r3
 801caa6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801caaa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801caae:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801cab2:	fb14 3402 	smlabb	r4, r4, r2, r3
 801cab6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801caba:	4404      	add	r4, r0
 801cabc:	6830      	ldr	r0, [r6, #0]
 801cabe:	6803      	ldr	r3, [r0, #0]
 801cac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cac2:	4798      	blx	r3
 801cac4:	4917      	ldr	r1, [pc, #92]	; (801cb24 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801cac6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801caca:	880b      	ldrh	r3, [r1, #0]
 801cacc:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801cad0:	fb03 c202 	mla	r2, r3, r2, ip
 801cad4:	437b      	muls	r3, r7
 801cad6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801cada:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cade:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cae2:	4410      	add	r0, r2
 801cae4:	18c2      	adds	r2, r0, r3
 801cae6:	4290      	cmp	r0, r2
 801cae8:	d214      	bcs.n	801cb14 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801caea:	eb00 0c07 	add.w	ip, r0, r7
 801caee:	4560      	cmp	r0, ip
 801caf0:	d204      	bcs.n	801cafc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801caf2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801caf6:	f800 3b01 	strb.w	r3, [r0], #1
 801cafa:	e7f8      	b.n	801caee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801cafc:	880b      	ldrh	r3, [r1, #0]
 801cafe:	1b5b      	subs	r3, r3, r5
 801cb00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb04:	4418      	add	r0, r3
 801cb06:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801cb0a:	1b5b      	subs	r3, r3, r5
 801cb0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb10:	441c      	add	r4, r3
 801cb12:	e7e8      	b.n	801cae6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801cb14:	6830      	ldr	r0, [r6, #0]
 801cb16:	6803      	ldr	r3, [r0, #0]
 801cb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb1a:	4798      	blx	r3
 801cb1c:	e7b5      	b.n	801ca8a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801cb1e:	bf00      	nop
 801cb20:	2400f438 	.word	0x2400f438
 801cb24:	2400f43a 	.word	0x2400f43a
 801cb28:	2400f43c 	.word	0x2400f43c
 801cb2c:	2400f440 	.word	0x2400f440

0801cb30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb34:	b089      	sub	sp, #36	; 0x24
 801cb36:	4607      	mov	r7, r0
 801cb38:	4689      	mov	r9, r1
 801cb3a:	4692      	mov	sl, r2
 801cb3c:	ac08      	add	r4, sp, #32
 801cb3e:	461e      	mov	r6, r3
 801cb40:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801cb44:	4620      	mov	r0, r4
 801cb46:	f7fe f8ef 	bl	801ad28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801cb4a:	683b      	ldr	r3, [r7, #0]
 801cb4c:	4605      	mov	r5, r0
 801cb4e:	4620      	mov	r0, r4
 801cb50:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801cb54:	f7fe f834 	bl	801abc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cb58:	4683      	mov	fp, r0
 801cb5a:	4620      	mov	r0, r4
 801cb5c:	f7fe f864 	bl	801ac28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cb60:	4653      	mov	r3, sl
 801cb62:	464a      	mov	r2, r9
 801cb64:	4639      	mov	r1, r7
 801cb66:	9500      	str	r5, [sp, #0]
 801cb68:	e9cd b001 	strd	fp, r0, [sp, #4]
 801cb6c:	a806      	add	r0, sp, #24
 801cb6e:	47c0      	blx	r8
 801cb70:	a906      	add	r1, sp, #24
 801cb72:	4630      	mov	r0, r6
 801cb74:	f7fd ff08 	bl	801a988 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801cb78:	4628      	mov	r0, r5
 801cb7a:	b009      	add	sp, #36	; 0x24
 801cb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb80 <_ZN8touchgfx8LCD24bppD0Ev>:
 801cb80:	b510      	push	{r4, lr}
 801cb82:	4604      	mov	r4, r0
 801cb84:	2158      	movs	r1, #88	; 0x58
 801cb86:	f006 f8f6 	bl	8022d76 <_ZdlPvj>
 801cb8a:	4620      	mov	r0, r4
 801cb8c:	bd10      	pop	{r4, pc}

0801cb8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cb8e:	b510      	push	{r4, lr}
 801cb90:	4604      	mov	r4, r0
 801cb92:	2104      	movs	r1, #4
 801cb94:	f006 f8ef 	bl	8022d76 <_ZdlPvj>
 801cb98:	4620      	mov	r0, r4
 801cb9a:	bd10      	pop	{r4, pc}

0801cb9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cb9c:	b510      	push	{r4, lr}
 801cb9e:	4604      	mov	r4, r0
 801cba0:	2104      	movs	r1, #4
 801cba2:	f006 f8e8 	bl	8022d76 <_ZdlPvj>
 801cba6:	4620      	mov	r0, r4
 801cba8:	bd10      	pop	{r4, pc}

0801cbaa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cbaa:	b510      	push	{r4, lr}
 801cbac:	4604      	mov	r4, r0
 801cbae:	2104      	movs	r1, #4
 801cbb0:	f006 f8e1 	bl	8022d76 <_ZdlPvj>
 801cbb4:	4620      	mov	r0, r4
 801cbb6:	bd10      	pop	{r4, pc}

0801cbb8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cbb8:	b510      	push	{r4, lr}
 801cbba:	4604      	mov	r4, r0
 801cbbc:	2104      	movs	r1, #4
 801cbbe:	f006 f8da 	bl	8022d76 <_ZdlPvj>
 801cbc2:	4620      	mov	r0, r4
 801cbc4:	bd10      	pop	{r4, pc}

0801cbc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cbc6:	b510      	push	{r4, lr}
 801cbc8:	4604      	mov	r4, r0
 801cbca:	2104      	movs	r1, #4
 801cbcc:	f006 f8d3 	bl	8022d76 <_ZdlPvj>
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	bd10      	pop	{r4, pc}

0801cbd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cbd4:	b510      	push	{r4, lr}
 801cbd6:	4604      	mov	r4, r0
 801cbd8:	2104      	movs	r1, #4
 801cbda:	f006 f8cc 	bl	8022d76 <_ZdlPvj>
 801cbde:	4620      	mov	r0, r4
 801cbe0:	bd10      	pop	{r4, pc}

0801cbe2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cbe2:	b510      	push	{r4, lr}
 801cbe4:	4604      	mov	r4, r0
 801cbe6:	2104      	movs	r1, #4
 801cbe8:	f006 f8c5 	bl	8022d76 <_ZdlPvj>
 801cbec:	4620      	mov	r0, r4
 801cbee:	bd10      	pop	{r4, pc}

0801cbf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cbf0:	b510      	push	{r4, lr}
 801cbf2:	4604      	mov	r4, r0
 801cbf4:	2104      	movs	r1, #4
 801cbf6:	f006 f8be 	bl	8022d76 <_ZdlPvj>
 801cbfa:	4620      	mov	r0, r4
 801cbfc:	bd10      	pop	{r4, pc}

0801cbfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801cbfe:	b510      	push	{r4, lr}
 801cc00:	4604      	mov	r4, r0
 801cc02:	2104      	movs	r1, #4
 801cc04:	f006 f8b7 	bl	8022d76 <_ZdlPvj>
 801cc08:	4620      	mov	r0, r4
 801cc0a:	bd10      	pop	{r4, pc}

0801cc0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801cc0c:	b510      	push	{r4, lr}
 801cc0e:	4604      	mov	r4, r0
 801cc10:	2104      	movs	r1, #4
 801cc12:	f006 f8b0 	bl	8022d76 <_ZdlPvj>
 801cc16:	4620      	mov	r0, r4
 801cc18:	bd10      	pop	{r4, pc}

0801cc1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801cc1a:	b510      	push	{r4, lr}
 801cc1c:	4604      	mov	r4, r0
 801cc1e:	2104      	movs	r1, #4
 801cc20:	f006 f8a9 	bl	8022d76 <_ZdlPvj>
 801cc24:	4620      	mov	r0, r4
 801cc26:	bd10      	pop	{r4, pc}

0801cc28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801cc28:	b510      	push	{r4, lr}
 801cc2a:	4604      	mov	r4, r0
 801cc2c:	2104      	movs	r1, #4
 801cc2e:	f006 f8a2 	bl	8022d76 <_ZdlPvj>
 801cc32:	4620      	mov	r0, r4
 801cc34:	bd10      	pop	{r4, pc}

0801cc36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801cc36:	b510      	push	{r4, lr}
 801cc38:	4604      	mov	r4, r0
 801cc3a:	2104      	movs	r1, #4
 801cc3c:	f006 f89b 	bl	8022d76 <_ZdlPvj>
 801cc40:	4620      	mov	r0, r4
 801cc42:	bd10      	pop	{r4, pc}

0801cc44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801cc44:	b510      	push	{r4, lr}
 801cc46:	4604      	mov	r4, r0
 801cc48:	2104      	movs	r1, #4
 801cc4a:	f006 f894 	bl	8022d76 <_ZdlPvj>
 801cc4e:	4620      	mov	r0, r4
 801cc50:	bd10      	pop	{r4, pc}

0801cc52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801cc52:	b510      	push	{r4, lr}
 801cc54:	4604      	mov	r4, r0
 801cc56:	2104      	movs	r1, #4
 801cc58:	f006 f88d 	bl	8022d76 <_ZdlPvj>
 801cc5c:	4620      	mov	r0, r4
 801cc5e:	bd10      	pop	{r4, pc}

0801cc60 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801cc60:	b510      	push	{r4, lr}
 801cc62:	4604      	mov	r4, r0
 801cc64:	2104      	movs	r1, #4
 801cc66:	f006 f886 	bl	8022d76 <_ZdlPvj>
 801cc6a:	4620      	mov	r0, r4
 801cc6c:	bd10      	pop	{r4, pc}

0801cc6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801cc6e:	b510      	push	{r4, lr}
 801cc70:	4604      	mov	r4, r0
 801cc72:	2104      	movs	r1, #4
 801cc74:	f006 f87f 	bl	8022d76 <_ZdlPvj>
 801cc78:	4620      	mov	r0, r4
 801cc7a:	bd10      	pop	{r4, pc}

0801cc7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801cc7c:	b510      	push	{r4, lr}
 801cc7e:	4604      	mov	r4, r0
 801cc80:	2104      	movs	r1, #4
 801cc82:	f006 f878 	bl	8022d76 <_ZdlPvj>
 801cc86:	4620      	mov	r0, r4
 801cc88:	bd10      	pop	{r4, pc}

0801cc8a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801cc8a:	b510      	push	{r4, lr}
 801cc8c:	4604      	mov	r4, r0
 801cc8e:	2104      	movs	r1, #4
 801cc90:	f006 f871 	bl	8022d76 <_ZdlPvj>
 801cc94:	4620      	mov	r0, r4
 801cc96:	bd10      	pop	{r4, pc}

0801cc98 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801cc98:	b510      	push	{r4, lr}
 801cc9a:	4604      	mov	r4, r0
 801cc9c:	2104      	movs	r1, #4
 801cc9e:	f006 f86a 	bl	8022d76 <_ZdlPvj>
 801cca2:	4620      	mov	r0, r4
 801cca4:	bd10      	pop	{r4, pc}

0801cca6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801cca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccaa:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801ccae:	9c06      	ldr	r4, [sp, #24]
 801ccb0:	2800      	cmp	r0, #0
 801ccb2:	d06e      	beq.n	801cd92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ccb4:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801ccb8:	2d00      	cmp	r5, #0
 801ccba:	dd6a      	ble.n	801cd92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ccbc:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801ccc0:	f1bc 0f00 	cmp.w	ip, #0
 801ccc4:	dd65      	ble.n	801cd92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ccc6:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801ccca:	28ff      	cmp	r0, #255	; 0xff
 801cccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ccd0:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801ccd4:	fb02 3306 	mla	r3, r2, r6, r3
 801ccd8:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801ccdc:	b2e4      	uxtb	r4, r4
 801ccde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cce2:	4419      	add	r1, r3
 801cce4:	fb02 f30c 	mul.w	r3, r2, ip
 801cce8:	eba2 0205 	sub.w	r2, r2, r5
 801ccec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ccf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ccf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ccf8:	440b      	add	r3, r1
 801ccfa:	d03e      	beq.n	801cd7a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801ccfc:	fa1f fc80 	uxth.w	ip, r0
 801cd00:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801cd04:	fb06 f60c 	mul.w	r6, r6, ip
 801cd08:	b280      	uxth	r0, r0
 801cd0a:	fb07 f70c 	mul.w	r7, r7, ip
 801cd0e:	fb04 f40c 	mul.w	r4, r4, ip
 801cd12:	4299      	cmp	r1, r3
 801cd14:	d23d      	bcs.n	801cd92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801cd16:	eb01 0c05 	add.w	ip, r1, r5
 801cd1a:	458c      	cmp	ip, r1
 801cd1c:	f101 0e03 	add.w	lr, r1, #3
 801cd20:	d928      	bls.n	801cd74 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801cd22:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801cd26:	fb11 f100 	smulbb	r1, r1, r0
 801cd2a:	4421      	add	r1, r4
 801cd2c:	b289      	uxth	r1, r1
 801cd2e:	f101 0801 	add.w	r8, r1, #1
 801cd32:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801cd36:	1209      	asrs	r1, r1, #8
 801cd38:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801cd3c:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801cd40:	fb11 f100 	smulbb	r1, r1, r0
 801cd44:	4439      	add	r1, r7
 801cd46:	b289      	uxth	r1, r1
 801cd48:	f101 0801 	add.w	r8, r1, #1
 801cd4c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801cd50:	1209      	asrs	r1, r1, #8
 801cd52:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801cd56:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801cd5a:	fb11 f100 	smulbb	r1, r1, r0
 801cd5e:	4431      	add	r1, r6
 801cd60:	b289      	uxth	r1, r1
 801cd62:	f101 0801 	add.w	r8, r1, #1
 801cd66:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801cd6a:	1209      	asrs	r1, r1, #8
 801cd6c:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801cd70:	4671      	mov	r1, lr
 801cd72:	e7d2      	b.n	801cd1a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801cd74:	4411      	add	r1, r2
 801cd76:	e7cc      	b.n	801cd12 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801cd78:	4411      	add	r1, r2
 801cd7a:	4299      	cmp	r1, r3
 801cd7c:	d209      	bcs.n	801cd92 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801cd7e:	1948      	adds	r0, r1, r5
 801cd80:	4281      	cmp	r1, r0
 801cd82:	d2f9      	bcs.n	801cd78 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801cd84:	700c      	strb	r4, [r1, #0]
 801cd86:	3103      	adds	r1, #3
 801cd88:	f801 7c02 	strb.w	r7, [r1, #-2]
 801cd8c:	f801 6c01 	strb.w	r6, [r1, #-1]
 801cd90:	e7f6      	b.n	801cd80 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801cd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801cd98 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd9c:	b093      	sub	sp, #76	; 0x4c
 801cd9e:	4699      	mov	r9, r3
 801cda0:	4617      	mov	r7, r2
 801cda2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cda6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801cdaa:	4604      	mov	r4, r0
 801cdac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cdb0:	a80c      	add	r0, sp, #48	; 0x30
 801cdb2:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801cdb6:	460d      	mov	r5, r1
 801cdb8:	4649      	mov	r1, r9
 801cdba:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801cdbe:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cdc2:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801cdc6:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801cdca:	f7f6 f84f 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 801cdce:	4639      	mov	r1, r7
 801cdd0:	a80c      	add	r0, sp, #48	; 0x30
 801cdd2:	f7f6 f84b 	bl	8012e6c <_ZN8touchgfx4RectaNERKS0_>
 801cdd6:	4b78      	ldr	r3, [pc, #480]	; (801cfb8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801cdd8:	8818      	ldrh	r0, [r3, #0]
 801cdda:	4b78      	ldr	r3, [pc, #480]	; (801cfbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801cddc:	b202      	sxth	r2, r0
 801cdde:	8819      	ldrh	r1, [r3, #0]
 801cde0:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801cde4:	b20f      	sxth	r7, r1
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	da07      	bge.n	801cdfa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801cdea:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801cdee:	4463      	add	r3, ip
 801cdf0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801cdf4:	2300      	movs	r3, #0
 801cdf6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801cdfa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801cdfe:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801ce02:	1ad2      	subs	r2, r2, r3
 801ce04:	4594      	cmp	ip, r2
 801ce06:	bfc4      	itt	gt
 801ce08:	1ac2      	subgt	r2, r0, r3
 801ce0a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801ce0e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801ce12:	2a00      	cmp	r2, #0
 801ce14:	da07      	bge.n	801ce26 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801ce16:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801ce1a:	4462      	add	r2, ip
 801ce1c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801ce20:	2200      	movs	r2, #0
 801ce22:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801ce26:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801ce2a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801ce2e:	1abf      	subs	r7, r7, r2
 801ce30:	45bc      	cmp	ip, r7
 801ce32:	f8df c190 	ldr.w	ip, [pc, #400]	; 801cfc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801ce36:	bfc8      	it	gt
 801ce38:	1a8f      	subgt	r7, r1, r2
 801ce3a:	f89c c000 	ldrb.w	ip, [ip]
 801ce3e:	bfc8      	it	gt
 801ce40:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801ce44:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801ce48:	f1bc 0f00 	cmp.w	ip, #0
 801ce4c:	d176      	bne.n	801cf3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801ce4e:	4287      	cmp	r7, r0
 801ce50:	bf14      	ite	ne
 801ce52:	2100      	movne	r1, #0
 801ce54:	2101      	moveq	r1, #1
 801ce56:	2f00      	cmp	r7, #0
 801ce58:	9107      	str	r1, [sp, #28]
 801ce5a:	dd73      	ble.n	801cf44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801ce5c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801ce60:	2900      	cmp	r1, #0
 801ce62:	9104      	str	r1, [sp, #16]
 801ce64:	dd6e      	ble.n	801cf44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801ce66:	f8b9 1000 	ldrh.w	r1, [r9]
 801ce6a:	a80e      	add	r0, sp, #56	; 0x38
 801ce6c:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801ce70:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801ce74:	1a5b      	subs	r3, r3, r1
 801ce76:	a910      	add	r1, sp, #64	; 0x40
 801ce78:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801ce7c:	b21b      	sxth	r3, r3
 801ce7e:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801ce82:	f8df a144 	ldr.w	sl, [pc, #324]	; 801cfc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801ce86:	9305      	str	r3, [sp, #20]
 801ce88:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801ce8c:	1ad2      	subs	r2, r2, r3
 801ce8e:	b213      	sxth	r3, r2
 801ce90:	9306      	str	r3, [sp, #24]
 801ce92:	9b05      	ldr	r3, [sp, #20]
 801ce94:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801ce98:	9b06      	ldr	r3, [sp, #24]
 801ce9a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801ce9e:	9b04      	ldr	r3, [sp, #16]
 801cea0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801cea4:	2300      	movs	r3, #0
 801cea6:	9310      	str	r3, [sp, #64]	; 0x40
 801cea8:	f7fa fc82 	bl	80177b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ceac:	4640      	mov	r0, r8
 801ceae:	f7fa fc57 	bl	8017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ceb2:	a810      	add	r0, sp, #64	; 0x40
 801ceb4:	f7fa fc54 	bl	8017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ceb8:	4b41      	ldr	r3, [pc, #260]	; (801cfc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801ceba:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801cebe:	4628      	mov	r0, r5
 801cec0:	881b      	ldrh	r3, [r3, #0]
 801cec2:	9308      	str	r3, [sp, #32]
 801cec4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801cec8:	b21b      	sxth	r3, r3
 801ceca:	9303      	str	r3, [sp, #12]
 801cecc:	682b      	ldr	r3, [r5, #0]
 801cece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ced0:	4798      	blx	r3
 801ced2:	9a03      	ldr	r2, [sp, #12]
 801ced4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801ced8:	4681      	mov	r9, r0
 801ceda:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801cede:	fb13 f302 	smulbb	r3, r3, r2
 801cee2:	2203      	movs	r2, #3
 801cee4:	f8da 0000 	ldr.w	r0, [sl]
 801cee8:	fb15 3302 	smlabb	r3, r5, r2, r3
 801ceec:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801ceee:	920b      	str	r2, [sp, #44]	; 0x2c
 801cef0:	441d      	add	r5, r3
 801cef2:	6803      	ldr	r3, [r0, #0]
 801cef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cef6:	4798      	blx	r3
 801cef8:	9009      	str	r0, [sp, #36]	; 0x24
 801cefa:	f8da 0000 	ldr.w	r0, [sl]
 801cefe:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801cf02:	6803      	ldr	r3, [r0, #0]
 801cf04:	910a      	str	r1, [sp, #40]	; 0x28
 801cf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf08:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801cf0c:	4798      	blx	r3
 801cf0e:	f010 0f01 	tst.w	r0, #1
 801cf12:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801cf16:	d01e      	beq.n	801cf56 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801cf18:	f8da 0000 	ldr.w	r0, [sl]
 801cf1c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801cf20:	6803      	ldr	r3, [r0, #0]
 801cf22:	9200      	str	r2, [sp, #0]
 801cf24:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801cf26:	462b      	mov	r3, r5
 801cf28:	e898 0006 	ldmia.w	r8, {r1, r2}
 801cf2c:	47b0      	blx	r6
 801cf2e:	9b05      	ldr	r3, [sp, #20]
 801cf30:	80a7      	strh	r7, [r4, #4]
 801cf32:	8023      	strh	r3, [r4, #0]
 801cf34:	9b06      	ldr	r3, [sp, #24]
 801cf36:	8063      	strh	r3, [r4, #2]
 801cf38:	9b04      	ldr	r3, [sp, #16]
 801cf3a:	e007      	b.n	801cf4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801cf3c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801cf40:	4288      	cmp	r0, r1
 801cf42:	e785      	b.n	801ce50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801cf44:	2300      	movs	r3, #0
 801cf46:	8023      	strh	r3, [r4, #0]
 801cf48:	8063      	strh	r3, [r4, #2]
 801cf4a:	80a3      	strh	r3, [r4, #4]
 801cf4c:	4620      	mov	r0, r4
 801cf4e:	80e3      	strh	r3, [r4, #6]
 801cf50:	b013      	add	sp, #76	; 0x4c
 801cf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf56:	fb09 f606 	mul.w	r6, r9, r6
 801cf5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf5c:	fb11 6602 	smlabb	r6, r1, r2, r6
 801cf60:	9a07      	ldr	r2, [sp, #28]
 801cf62:	4433      	add	r3, r6
 801cf64:	461e      	mov	r6, r3
 801cf66:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801cf6a:	b16a      	cbz	r2, 801cf88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801cf6c:	9a08      	ldr	r2, [sp, #32]
 801cf6e:	4593      	cmp	fp, r2
 801cf70:	d10a      	bne.n	801cf88 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801cf72:	f8da 0000 	ldr.w	r0, [sl]
 801cf76:	fb09 f303 	mul.w	r3, r9, r3
 801cf7a:	4629      	mov	r1, r5
 801cf7c:	6802      	ldr	r2, [r0, #0]
 801cf7e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801cf82:	4632      	mov	r2, r6
 801cf84:	47d0      	blx	sl
 801cf86:	e7d2      	b.n	801cf2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801cf88:	9a03      	ldr	r2, [sp, #12]
 801cf8a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801cfc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801cf8e:	fb02 5803 	mla	r8, r2, r3, r5
 801cf92:	4545      	cmp	r5, r8
 801cf94:	d2cb      	bcs.n	801cf2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801cf96:	f8db 0000 	ldr.w	r0, [fp]
 801cf9a:	4629      	mov	r1, r5
 801cf9c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801cfa0:	6802      	ldr	r2, [r0, #0]
 801cfa2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfa6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801cfaa:	4632      	mov	r2, r6
 801cfac:	47d0      	blx	sl
 801cfae:	9b03      	ldr	r3, [sp, #12]
 801cfb0:	444e      	add	r6, r9
 801cfb2:	441d      	add	r5, r3
 801cfb4:	e7ed      	b.n	801cf92 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801cfb6:	bf00      	nop
 801cfb8:	2400f434 	.word	0x2400f434
 801cfbc:	2400f436 	.word	0x2400f436
 801cfc0:	2400f43a 	.word	0x2400f43a
 801cfc4:	2400f438 	.word	0x2400f438
 801cfc8:	2400f440 	.word	0x2400f440

0801cfcc <_ZN8touchgfx8LCD24bppC1Ev>:
 801cfcc:	2200      	movs	r2, #0
 801cfce:	490c      	ldr	r1, [pc, #48]	; (801d000 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801cfd0:	6042      	str	r2, [r0, #4]
 801cfd2:	6001      	str	r1, [r0, #0]
 801cfd4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801cfd8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801cfdc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801cfe0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801cfe4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801cfe8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801cfec:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801cff0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801cff4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801cff8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801cffc:	4770      	bx	lr
 801cffe:	bf00      	nop
 801d000:	08026db0 	.word	0x08026db0

0801d004 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d008:	b091      	sub	sp, #68	; 0x44
 801d00a:	4607      	mov	r7, r0
 801d00c:	4688      	mov	r8, r1
 801d00e:	6810      	ldr	r0, [r2, #0]
 801d010:	6851      	ldr	r1, [r2, #4]
 801d012:	ac0c      	add	r4, sp, #48	; 0x30
 801d014:	4616      	mov	r6, r2
 801d016:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801d01a:	4d64      	ldr	r5, [pc, #400]	; (801d1ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d01c:	f8df a190 	ldr.w	sl, [pc, #400]	; 801d1b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d020:	c403      	stmia	r4!, {r0, r1}
 801d022:	6818      	ldr	r0, [r3, #0]
 801d024:	ac0e      	add	r4, sp, #56	; 0x38
 801d026:	6859      	ldr	r1, [r3, #4]
 801d028:	c403      	stmia	r4!, {r0, r1}
 801d02a:	a80c      	add	r0, sp, #48	; 0x30
 801d02c:	f7fa fb98 	bl	8017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d030:	4631      	mov	r1, r6
 801d032:	a80e      	add	r0, sp, #56	; 0x38
 801d034:	f7fa fbbc 	bl	80177b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d038:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d03c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d040:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d044:	6828      	ldr	r0, [r5, #0]
 801d046:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d04a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801d04e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801d052:	440f      	add	r7, r1
 801d054:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d058:	440a      	add	r2, r1
 801d05a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d05e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d062:	4413      	add	r3, r2
 801d064:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d068:	6803      	ldr	r3, [r0, #0]
 801d06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d06c:	4798      	blx	r3
 801d06e:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d072:	6828      	ldr	r0, [r5, #0]
 801d074:	d01f      	beq.n	801d0b6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801d076:	2201      	movs	r2, #1
 801d078:	2500      	movs	r5, #0
 801d07a:	6801      	ldr	r1, [r0, #0]
 801d07c:	b2a4      	uxth	r4, r4
 801d07e:	b2b6      	uxth	r6, r6
 801d080:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d084:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801d088:	250b      	movs	r5, #11
 801d08a:	9507      	str	r5, [sp, #28]
 801d08c:	f8ba 5000 	ldrh.w	r5, [sl]
 801d090:	f8cd 9010 	str.w	r9, [sp, #16]
 801d094:	9602      	str	r6, [sp, #8]
 801d096:	9401      	str	r4, [sp, #4]
 801d098:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801d09c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d0a0:	9203      	str	r2, [sp, #12]
 801d0a2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d0a6:	9200      	str	r2, [sp, #0]
 801d0a8:	4642      	mov	r2, r8
 801d0aa:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801d0ac:	4639      	mov	r1, r7
 801d0ae:	47a0      	blx	r4
 801d0b0:	b011      	add	sp, #68	; 0x44
 801d0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0b6:	6803      	ldr	r3, [r0, #0]
 801d0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0ba:	4798      	blx	r3
 801d0bc:	f8ba 5000 	ldrh.w	r5, [sl]
 801d0c0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d0c4:	f04f 0e04 	mov.w	lr, #4
 801d0c8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d0cc:	436e      	muls	r6, r5
 801d0ce:	fb05 2303 	mla	r3, r5, r3, r2
 801d0d2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d0d6:	1b2d      	subs	r5, r5, r4
 801d0d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d0e0:	4418      	add	r0, r3
 801d0e2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d0e6:	1982      	adds	r2, r0, r6
 801d0e8:	1b1b      	subs	r3, r3, r4
 801d0ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d0ee:	930b      	str	r3, [sp, #44]	; 0x2c
 801d0f0:	4290      	cmp	r0, r2
 801d0f2:	d254      	bcs.n	801d19e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801d0f4:	eb00 0a04 	add.w	sl, r0, r4
 801d0f8:	4550      	cmp	r0, sl
 801d0fa:	d24c      	bcs.n	801d196 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801d0fc:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d100:	fb1e e101 	smlabb	r1, lr, r1, lr
 801d104:	eb08 0c01 	add.w	ip, r8, r1
 801d108:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801d10c:	b173      	cbz	r3, 801d12c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d10e:	2bff      	cmp	r3, #255	; 0xff
 801d110:	f818 b001 	ldrb.w	fp, [r8, r1]
 801d114:	d10c      	bne.n	801d130 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d116:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d11a:	d109      	bne.n	801d130 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d11c:	f880 b000 	strb.w	fp, [r0]
 801d120:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801d124:	7043      	strb	r3, [r0, #1]
 801d126:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801d12a:	7083      	strb	r3, [r0, #2]
 801d12c:	3003      	adds	r0, #3
 801d12e:	e7e3      	b.n	801d0f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d130:	fb09 f103 	mul.w	r1, r9, r3
 801d134:	1c4b      	adds	r3, r1, #1
 801d136:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d13a:	7801      	ldrb	r1, [r0, #0]
 801d13c:	121b      	asrs	r3, r3, #8
 801d13e:	b29e      	uxth	r6, r3
 801d140:	43db      	mvns	r3, r3
 801d142:	fb1b fb06 	smulbb	fp, fp, r6
 801d146:	b2db      	uxtb	r3, r3
 801d148:	fb01 b103 	mla	r1, r1, r3, fp
 801d14c:	b289      	uxth	r1, r1
 801d14e:	f101 0b01 	add.w	fp, r1, #1
 801d152:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d156:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d15a:	fb1b fb03 	smulbb	fp, fp, r3
 801d15e:	1209      	asrs	r1, r1, #8
 801d160:	7001      	strb	r1, [r0, #0]
 801d162:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d166:	fb01 b106 	mla	r1, r1, r6, fp
 801d16a:	b289      	uxth	r1, r1
 801d16c:	f101 0b01 	add.w	fp, r1, #1
 801d170:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d174:	1209      	asrs	r1, r1, #8
 801d176:	7041      	strb	r1, [r0, #1]
 801d178:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801d17c:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d180:	fb1c f303 	smulbb	r3, ip, r3
 801d184:	fb01 3606 	mla	r6, r1, r6, r3
 801d188:	b2b6      	uxth	r6, r6
 801d18a:	1c73      	adds	r3, r6, #1
 801d18c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d190:	1236      	asrs	r6, r6, #8
 801d192:	7086      	strb	r6, [r0, #2]
 801d194:	e7ca      	b.n	801d12c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d198:	4428      	add	r0, r5
 801d19a:	441f      	add	r7, r3
 801d19c:	e7a8      	b.n	801d0f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801d19e:	4b03      	ldr	r3, [pc, #12]	; (801d1ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d1a0:	6818      	ldr	r0, [r3, #0]
 801d1a2:	6803      	ldr	r3, [r0, #0]
 801d1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d1a6:	4798      	blx	r3
 801d1a8:	e782      	b.n	801d0b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d1aa:	bf00      	nop
 801d1ac:	2400f440 	.word	0x2400f440
 801d1b0:	2400f43a 	.word	0x2400f43a

0801d1b4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1b8:	b091      	sub	sp, #68	; 0x44
 801d1ba:	4680      	mov	r8, r0
 801d1bc:	460e      	mov	r6, r1
 801d1be:	6810      	ldr	r0, [r2, #0]
 801d1c0:	6851      	ldr	r1, [r2, #4]
 801d1c2:	ad0c      	add	r5, sp, #48	; 0x30
 801d1c4:	4614      	mov	r4, r2
 801d1c6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d1ca:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801d364 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801d1ce:	f8df a198 	ldr.w	sl, [pc, #408]	; 801d368 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d1d2:	c503      	stmia	r5!, {r0, r1}
 801d1d4:	6818      	ldr	r0, [r3, #0]
 801d1d6:	ad0e      	add	r5, sp, #56	; 0x38
 801d1d8:	6859      	ldr	r1, [r3, #4]
 801d1da:	c503      	stmia	r5!, {r0, r1}
 801d1dc:	a80c      	add	r0, sp, #48	; 0x30
 801d1de:	f7fa fabf 	bl	8017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d1e2:	4621      	mov	r1, r4
 801d1e4:	a80e      	add	r0, sp, #56	; 0x38
 801d1e6:	f7fa fae3 	bl	80177b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d1ea:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d1ee:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d1f2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d1f6:	f8d9 0000 	ldr.w	r0, [r9]
 801d1fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d1fe:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801d202:	eb08 0401 	add.w	r4, r8, r1
 801d206:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d20a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801d20e:	440a      	add	r2, r1
 801d210:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d214:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d218:	4413      	add	r3, r2
 801d21a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d21e:	6803      	ldr	r3, [r0, #0]
 801d220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d222:	4798      	blx	r3
 801d224:	f010 0f80 	tst.w	r0, #128	; 0x80
 801d228:	f8d9 0000 	ldr.w	r0, [r9]
 801d22c:	d022      	beq.n	801d274 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801d22e:	2200      	movs	r2, #0
 801d230:	f04f 0c01 	mov.w	ip, #1
 801d234:	6801      	ldr	r1, [r0, #0]
 801d236:	b2ad      	uxth	r5, r5
 801d238:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d23c:	e9cd c208 	strd	ip, r2, [sp, #32]
 801d240:	f04f 0c0b 	mov.w	ip, #11
 801d244:	f8cd c01c 	str.w	ip, [sp, #28]
 801d248:	f8ba c000 	ldrh.w	ip, [sl]
 801d24c:	9704      	str	r7, [sp, #16]
 801d24e:	9502      	str	r5, [sp, #8]
 801d250:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801d254:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d258:	9203      	str	r2, [sp, #12]
 801d25a:	fa1f f288 	uxth.w	r2, r8
 801d25e:	9201      	str	r2, [sp, #4]
 801d260:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d264:	9200      	str	r2, [sp, #0]
 801d266:	4632      	mov	r2, r6
 801d268:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801d26a:	4621      	mov	r1, r4
 801d26c:	47a8      	blx	r5
 801d26e:	b011      	add	sp, #68	; 0x44
 801d270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d274:	6803      	ldr	r3, [r0, #0]
 801d276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d278:	4798      	blx	r3
 801d27a:	f8ba 2000 	ldrh.w	r2, [sl]
 801d27e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d282:	f04f 0e03 	mov.w	lr, #3
 801d286:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801d28a:	4355      	muls	r5, r2
 801d28c:	fa1f fc87 	uxth.w	ip, r7
 801d290:	fb02 1303 	mla	r3, r2, r3, r1
 801d294:	eba2 0208 	sub.w	r2, r2, r8
 801d298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d29c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d2a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d2a4:	4418      	add	r0, r3
 801d2a6:	920b      	str	r2, [sp, #44]	; 0x2c
 801d2a8:	1943      	adds	r3, r0, r5
 801d2aa:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801d2ae:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801d2b2:	eba2 0208 	sub.w	r2, r2, r8
 801d2b6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d2ba:	b2ad      	uxth	r5, r5
 801d2bc:	4298      	cmp	r0, r3
 801d2be:	d24a      	bcs.n	801d356 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801d2c0:	eb00 0908 	add.w	r9, r0, r8
 801d2c4:	4621      	mov	r1, r4
 801d2c6:	4548      	cmp	r0, r9
 801d2c8:	460c      	mov	r4, r1
 801d2ca:	d240      	bcs.n	801d34e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801d2cc:	f04f 0a04 	mov.w	sl, #4
 801d2d0:	7824      	ldrb	r4, [r4, #0]
 801d2d2:	2fff      	cmp	r7, #255	; 0xff
 801d2d4:	f101 0101 	add.w	r1, r1, #1
 801d2d8:	fb1e a404 	smlabb	r4, lr, r4, sl
 801d2dc:	eb06 0a04 	add.w	sl, r6, r4
 801d2e0:	f816 b004 	ldrb.w	fp, [r6, r4]
 801d2e4:	d02b      	beq.n	801d33e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801d2e6:	7804      	ldrb	r4, [r0, #0]
 801d2e8:	fb14 f405 	smulbb	r4, r4, r5
 801d2ec:	fb0b 440c 	mla	r4, fp, ip, r4
 801d2f0:	b2a4      	uxth	r4, r4
 801d2f2:	f104 0b01 	add.w	fp, r4, #1
 801d2f6:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d2fa:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d2fe:	fb1b fb05 	smulbb	fp, fp, r5
 801d302:	1224      	asrs	r4, r4, #8
 801d304:	7004      	strb	r4, [r0, #0]
 801d306:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801d30a:	fb04 b40c 	mla	r4, r4, ip, fp
 801d30e:	b2a4      	uxth	r4, r4
 801d310:	f104 0b01 	add.w	fp, r4, #1
 801d314:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d318:	1224      	asrs	r4, r4, #8
 801d31a:	7044      	strb	r4, [r0, #1]
 801d31c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801d320:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d324:	fb1a fa05 	smulbb	sl, sl, r5
 801d328:	fb04 a40c 	mla	r4, r4, ip, sl
 801d32c:	b2a4      	uxth	r4, r4
 801d32e:	f104 0a01 	add.w	sl, r4, #1
 801d332:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d336:	1224      	asrs	r4, r4, #8
 801d338:	7084      	strb	r4, [r0, #2]
 801d33a:	3003      	adds	r0, #3
 801d33c:	e7c3      	b.n	801d2c6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801d33e:	f880 b000 	strb.w	fp, [r0]
 801d342:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801d346:	7044      	strb	r4, [r0, #1]
 801d348:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801d34c:	e7f4      	b.n	801d338 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801d34e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d350:	4420      	add	r0, r4
 801d352:	188c      	adds	r4, r1, r2
 801d354:	e7b2      	b.n	801d2bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801d356:	4b03      	ldr	r3, [pc, #12]	; (801d364 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801d358:	6818      	ldr	r0, [r3, #0]
 801d35a:	6803      	ldr	r3, [r0, #0]
 801d35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d35e:	4798      	blx	r3
 801d360:	e785      	b.n	801d26e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801d362:	bf00      	nop
 801d364:	2400f440 	.word	0x2400f440
 801d368:	2400f43a 	.word	0x2400f43a

0801d36c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d36c:	b430      	push	{r4, r5}
 801d36e:	780d      	ldrb	r5, [r1, #0]
 801d370:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801d374:	b11d      	cbz	r5, 801d37e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801d376:	2d01      	cmp	r5, #1
 801d378:	d005      	beq.n	801d386 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801d37a:	bc30      	pop	{r4, r5}
 801d37c:	4770      	bx	lr
 801d37e:	9402      	str	r4, [sp, #8]
 801d380:	bc30      	pop	{r4, r5}
 801d382:	f7ff be3f 	b.w	801d004 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d386:	9402      	str	r4, [sp, #8]
 801d388:	bc30      	pop	{r4, r5}
 801d38a:	f7ff bf13 	b.w	801d1b4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801d390 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801d390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d394:	4605      	mov	r5, r0
 801d396:	b08f      	sub	sp, #60	; 0x3c
 801d398:	460c      	mov	r4, r1
 801d39a:	461f      	mov	r7, r3
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d052      	beq.n	801d446 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801d3a0:	6808      	ldr	r0, [r1, #0]
 801d3a2:	ab0a      	add	r3, sp, #40	; 0x28
 801d3a4:	6849      	ldr	r1, [r1, #4]
 801d3a6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801d570 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801d3aa:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801d574 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801d3ae:	c303      	stmia	r3!, {r0, r1}
 801d3b0:	6810      	ldr	r0, [r2, #0]
 801d3b2:	ab0c      	add	r3, sp, #48	; 0x30
 801d3b4:	6851      	ldr	r1, [r2, #4]
 801d3b6:	c303      	stmia	r3!, {r0, r1}
 801d3b8:	a80a      	add	r0, sp, #40	; 0x28
 801d3ba:	f7fa f9d1 	bl	8017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3be:	4621      	mov	r1, r4
 801d3c0:	a80c      	add	r0, sp, #48	; 0x30
 801d3c2:	f7fa f9f5 	bl	80177b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3c6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d3ca:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d3ce:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d3d2:	f8d8 0000 	ldr.w	r0, [r8]
 801d3d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d3da:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801d3de:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801d3e2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801d3e6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d3ea:	440a      	add	r2, r1
 801d3ec:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d3f0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801d3f4:	4413      	add	r3, r2
 801d3f6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801d3fa:	6803      	ldr	r3, [r0, #0]
 801d3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3fe:	4798      	blx	r3
 801d400:	2fff      	cmp	r7, #255	; 0xff
 801d402:	d023      	beq.n	801d44c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801d404:	f010 0f04 	tst.w	r0, #4
 801d408:	f8d8 0000 	ldr.w	r0, [r8]
 801d40c:	d021      	beq.n	801d452 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801d40e:	2100      	movs	r1, #0
 801d410:	f04f 0e01 	mov.w	lr, #1
 801d414:	f8d0 c000 	ldr.w	ip, [r0]
 801d418:	b2a4      	uxth	r4, r4
 801d41a:	9106      	str	r1, [sp, #24]
 801d41c:	b2b6      	uxth	r6, r6
 801d41e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801d422:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801d426:	e9cd e107 	strd	lr, r1, [sp, #28]
 801d42a:	f8b9 e000 	ldrh.w	lr, [r9]
 801d42e:	9703      	str	r7, [sp, #12]
 801d430:	9401      	str	r4, [sp, #4]
 801d432:	9600      	str	r6, [sp, #0]
 801d434:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d438:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d43c:	9102      	str	r1, [sp, #8]
 801d43e:	4629      	mov	r1, r5
 801d440:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801d444:	47a0      	blx	r4
 801d446:	b00f      	add	sp, #60	; 0x3c
 801d448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d44c:	f010 0f01 	tst.w	r0, #1
 801d450:	e7da      	b.n	801d408 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801d452:	6803      	ldr	r3, [r0, #0]
 801d454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d456:	4798      	blx	r3
 801d458:	f8b9 1000 	ldrh.w	r1, [r9]
 801d45c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801d460:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801d464:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d468:	434c      	muls	r4, r1
 801d46a:	2fff      	cmp	r7, #255	; 0xff
 801d46c:	fb01 2303 	mla	r3, r1, r3, r2
 801d470:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d474:	eba1 0106 	sub.w	r1, r1, r6
 801d478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d47c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d480:	4418      	add	r0, r3
 801d482:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801d486:	eba3 0606 	sub.w	r6, r3, r6
 801d48a:	4404      	add	r4, r0
 801d48c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801d490:	d04a      	beq.n	801d528 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801d492:	43fa      	mvns	r2, r7
 801d494:	b2bb      	uxth	r3, r7
 801d496:	b2d7      	uxtb	r7, r2
 801d498:	42a0      	cmp	r0, r4
 801d49a:	d263      	bcs.n	801d564 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801d49c:	eb00 0e0c 	add.w	lr, r0, ip
 801d4a0:	4586      	cmp	lr, r0
 801d4a2:	f100 0803 	add.w	r8, r0, #3
 801d4a6:	d93a      	bls.n	801d51e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801d4a8:	f835 2b02 	ldrh.w	r2, [r5], #2
 801d4ac:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801d4b0:	00d0      	lsls	r0, r2, #3
 801d4b2:	fb19 f907 	smulbb	r9, r9, r7
 801d4b6:	b2c0      	uxtb	r0, r0
 801d4b8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801d4bc:	fb00 9003 	mla	r0, r0, r3, r9
 801d4c0:	b280      	uxth	r0, r0
 801d4c2:	f100 0901 	add.w	r9, r0, #1
 801d4c6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801d4ca:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801d4ce:	fb19 f907 	smulbb	r9, r9, r7
 801d4d2:	1200      	asrs	r0, r0, #8
 801d4d4:	f808 0c03 	strb.w	r0, [r8, #-3]
 801d4d8:	10d0      	asrs	r0, r2, #3
 801d4da:	1212      	asrs	r2, r2, #8
 801d4dc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d4e0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d4e4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801d4e8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d4ec:	fb00 9003 	mla	r0, r0, r3, r9
 801d4f0:	b280      	uxth	r0, r0
 801d4f2:	f100 0901 	add.w	r9, r0, #1
 801d4f6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801d4fa:	1200      	asrs	r0, r0, #8
 801d4fc:	f808 0c02 	strb.w	r0, [r8, #-2]
 801d500:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801d504:	fb10 f007 	smulbb	r0, r0, r7
 801d508:	fb02 0203 	mla	r2, r2, r3, r0
 801d50c:	b292      	uxth	r2, r2
 801d50e:	1c50      	adds	r0, r2, #1
 801d510:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d514:	4640      	mov	r0, r8
 801d516:	1212      	asrs	r2, r2, #8
 801d518:	f808 2c01 	strb.w	r2, [r8, #-1]
 801d51c:	e7c0      	b.n	801d4a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801d51e:	4408      	add	r0, r1
 801d520:	4435      	add	r5, r6
 801d522:	e7b9      	b.n	801d498 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801d524:	4408      	add	r0, r1
 801d526:	4435      	add	r5, r6
 801d528:	42a0      	cmp	r0, r4
 801d52a:	d21b      	bcs.n	801d564 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801d52c:	eb00 070c 	add.w	r7, r0, ip
 801d530:	42b8      	cmp	r0, r7
 801d532:	d2f7      	bcs.n	801d524 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801d534:	f835 3b02 	ldrh.w	r3, [r5], #2
 801d538:	3003      	adds	r0, #3
 801d53a:	00da      	lsls	r2, r3, #3
 801d53c:	b2d2      	uxtb	r2, r2
 801d53e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d542:	f800 2c03 	strb.w	r2, [r0, #-3]
 801d546:	10da      	asrs	r2, r3, #3
 801d548:	121b      	asrs	r3, r3, #8
 801d54a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d54e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d552:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d556:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d55a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801d55e:	f800 3c01 	strb.w	r3, [r0, #-1]
 801d562:	e7e5      	b.n	801d530 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801d564:	4b02      	ldr	r3, [pc, #8]	; (801d570 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801d566:	6818      	ldr	r0, [r3, #0]
 801d568:	6803      	ldr	r3, [r0, #0]
 801d56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d56c:	4798      	blx	r3
 801d56e:	e76a      	b.n	801d446 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801d570:	2400f440 	.word	0x2400f440
 801d574:	2400f43a 	.word	0x2400f43a

0801d578 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d57c:	b08a      	sub	sp, #40	; 0x28
 801d57e:	460d      	mov	r5, r1
 801d580:	4604      	mov	r4, r0
 801d582:	461e      	mov	r6, r3
 801d584:	6808      	ldr	r0, [r1, #0]
 801d586:	ab06      	add	r3, sp, #24
 801d588:	6849      	ldr	r1, [r1, #4]
 801d58a:	4f5d      	ldr	r7, [pc, #372]	; (801d700 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801d58c:	c303      	stmia	r3!, {r0, r1}
 801d58e:	6810      	ldr	r0, [r2, #0]
 801d590:	ab08      	add	r3, sp, #32
 801d592:	6851      	ldr	r1, [r2, #4]
 801d594:	c303      	stmia	r3!, {r0, r1}
 801d596:	a806      	add	r0, sp, #24
 801d598:	f7fa f8e2 	bl	8017760 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d59c:	4629      	mov	r1, r5
 801d59e:	a808      	add	r0, sp, #32
 801d5a0:	f7fa f906 	bl	80177b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d5a4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d5a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d5ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d5b0:	6838      	ldr	r0, [r7, #0]
 801d5b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d5b6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801d5ba:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801d5be:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d5c2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d5c6:	440a      	add	r2, r1
 801d5c8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d5cc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d5d0:	4413      	add	r3, r2
 801d5d2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801d5d6:	6803      	ldr	r3, [r0, #0]
 801d5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5da:	4798      	blx	r3
 801d5dc:	2eff      	cmp	r6, #255	; 0xff
 801d5de:	d119      	bne.n	801d614 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801d5e0:	f010 0f20 	tst.w	r0, #32
 801d5e4:	6838      	ldr	r0, [r7, #0]
 801d5e6:	d018      	beq.n	801d61a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801d5e8:	b2ad      	uxth	r5, r5
 801d5ea:	2700      	movs	r7, #0
 801d5ec:	6801      	ldr	r1, [r0, #0]
 801d5ee:	9501      	str	r5, [sp, #4]
 801d5f0:	fa1f f588 	uxth.w	r5, r8
 801d5f4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d5f8:	9500      	str	r5, [sp, #0]
 801d5fa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d5fe:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801d602:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801d606:	9602      	str	r6, [sp, #8]
 801d608:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801d60a:	4621      	mov	r1, r4
 801d60c:	47a8      	blx	r5
 801d60e:	b00a      	add	sp, #40	; 0x28
 801d610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d614:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d618:	e7e4      	b.n	801d5e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801d61a:	6803      	ldr	r3, [r0, #0]
 801d61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d61e:	4798      	blx	r3
 801d620:	4b38      	ldr	r3, [pc, #224]	; (801d704 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801d622:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d626:	f8b3 c000 	ldrh.w	ip, [r3]
 801d62a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d62e:	fb0c f505 	mul.w	r5, ip, r5
 801d632:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801d636:	fb0c 2303 	mla	r3, ip, r3, r2
 801d63a:	ebac 0c08 	sub.w	ip, ip, r8
 801d63e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d642:	ebae 0e08 	sub.w	lr, lr, r8
 801d646:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d64a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d64e:	4418      	add	r0, r3
 801d650:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801d654:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d658:	4405      	add	r5, r0
 801d65a:	42a8      	cmp	r0, r5
 801d65c:	d24a      	bcs.n	801d6f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801d65e:	eb00 0803 	add.w	r8, r0, r3
 801d662:	4540      	cmp	r0, r8
 801d664:	d243      	bcs.n	801d6ee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801d666:	78e2      	ldrb	r2, [r4, #3]
 801d668:	b15a      	cbz	r2, 801d682 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801d66a:	2aff      	cmp	r2, #255	; 0xff
 801d66c:	f894 9000 	ldrb.w	r9, [r4]
 801d670:	d10a      	bne.n	801d688 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801d672:	2eff      	cmp	r6, #255	; 0xff
 801d674:	d108      	bne.n	801d688 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801d676:	f880 9000 	strb.w	r9, [r0]
 801d67a:	7862      	ldrb	r2, [r4, #1]
 801d67c:	7042      	strb	r2, [r0, #1]
 801d67e:	78a2      	ldrb	r2, [r4, #2]
 801d680:	7082      	strb	r2, [r0, #2]
 801d682:	3003      	adds	r0, #3
 801d684:	3404      	adds	r4, #4
 801d686:	e7ec      	b.n	801d662 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801d688:	4372      	muls	r2, r6
 801d68a:	1c51      	adds	r1, r2, #1
 801d68c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801d690:	1209      	asrs	r1, r1, #8
 801d692:	fa1f fa81 	uxth.w	sl, r1
 801d696:	43c9      	mvns	r1, r1
 801d698:	fb19 f90a 	smulbb	r9, r9, sl
 801d69c:	b2ca      	uxtb	r2, r1
 801d69e:	7801      	ldrb	r1, [r0, #0]
 801d6a0:	fb01 9902 	mla	r9, r1, r2, r9
 801d6a4:	fa1f f989 	uxth.w	r9, r9
 801d6a8:	f109 0101 	add.w	r1, r9, #1
 801d6ac:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801d6b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d6b4:	f880 9000 	strb.w	r9, [r0]
 801d6b8:	f890 9001 	ldrb.w	r9, [r0, #1]
 801d6bc:	7861      	ldrb	r1, [r4, #1]
 801d6be:	fb19 f902 	smulbb	r9, r9, r2
 801d6c2:	fb01 910a 	mla	r1, r1, sl, r9
 801d6c6:	b289      	uxth	r1, r1
 801d6c8:	f101 0901 	add.w	r9, r1, #1
 801d6cc:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801d6d0:	1209      	asrs	r1, r1, #8
 801d6d2:	7041      	strb	r1, [r0, #1]
 801d6d4:	7881      	ldrb	r1, [r0, #2]
 801d6d6:	f894 9002 	ldrb.w	r9, [r4, #2]
 801d6da:	fb11 f202 	smulbb	r2, r1, r2
 801d6de:	fb09 220a 	mla	r2, r9, sl, r2
 801d6e2:	b292      	uxth	r2, r2
 801d6e4:	1c51      	adds	r1, r2, #1
 801d6e6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d6ea:	1212      	asrs	r2, r2, #8
 801d6ec:	e7c8      	b.n	801d680 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801d6ee:	4460      	add	r0, ip
 801d6f0:	4474      	add	r4, lr
 801d6f2:	e7b2      	b.n	801d65a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801d6f4:	6838      	ldr	r0, [r7, #0]
 801d6f6:	6803      	ldr	r3, [r0, #0]
 801d6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d6fa:	4798      	blx	r3
 801d6fc:	e787      	b.n	801d60e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801d6fe:	bf00      	nop
 801d700:	2400f440 	.word	0x2400f440
 801d704:	2400f43a 	.word	0x2400f43a

0801d708 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801d708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d70c:	b085      	sub	sp, #20
 801d70e:	4606      	mov	r6, r0
 801d710:	460c      	mov	r4, r1
 801d712:	4691      	mov	r9, r2
 801d714:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801d718:	4698      	mov	r8, r3
 801d71a:	b31d      	cbz	r5, 801d764 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d71c:	4608      	mov	r0, r1
 801d71e:	f7fd fa4f 	bl	801abc0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d722:	4607      	mov	r7, r0
 801d724:	4620      	mov	r0, r4
 801d726:	f7fd fa7f 	bl	801ac28 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d72a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801d72e:	4620      	mov	r0, r4
 801d730:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d734:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d738:	f8ad 700c 	strh.w	r7, [sp, #12]
 801d73c:	f7fd fb78 	bl	801ae30 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d740:	280b      	cmp	r0, #11
 801d742:	d80f      	bhi.n	801d764 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d744:	e8df f000 	tbb	[pc, r0]
 801d748:	0e062920 	.word	0x0e062920
 801d74c:	0e0e0e0e 	.word	0x0e0e0e0e
 801d750:	110e0e0e 	.word	0x110e0e0e
 801d754:	4620      	mov	r0, r4
 801d756:	f7fd fae7 	bl	801ad28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d75a:	462b      	mov	r3, r5
 801d75c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d75e:	a902      	add	r1, sp, #8
 801d760:	f7ff ff0a 	bl	801d578 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d764:	b005      	add	sp, #20
 801d766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d76a:	4620      	mov	r0, r4
 801d76c:	f7fd fadc 	bl	801ad28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d770:	4606      	mov	r6, r0
 801d772:	4620      	mov	r0, r4
 801d774:	f7fd fb08 	bl	801ad88 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d778:	9500      	str	r5, [sp, #0]
 801d77a:	4601      	mov	r1, r0
 801d77c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d77e:	aa02      	add	r2, sp, #8
 801d780:	4630      	mov	r0, r6
 801d782:	f7ff fdf3 	bl	801d36c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d786:	e7ed      	b.n	801d764 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d788:	4620      	mov	r0, r4
 801d78a:	f7fd facd 	bl	801ad28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d78e:	462b      	mov	r3, r5
 801d790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d792:	a902      	add	r1, sp, #8
 801d794:	f7ff fdfc 	bl	801d390 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801d798:	e7e4      	b.n	801d764 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d79a:	6833      	ldr	r3, [r6, #0]
 801d79c:	4620      	mov	r0, r4
 801d79e:	68df      	ldr	r7, [r3, #12]
 801d7a0:	f7fd fac2 	bl	801ad28 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d7a4:	2300      	movs	r3, #0
 801d7a6:	4601      	mov	r1, r0
 801d7a8:	aa02      	add	r2, sp, #8
 801d7aa:	4630      	mov	r0, r6
 801d7ac:	e9cd 5300 	strd	r5, r3, [sp]
 801d7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d7b2:	47b8      	blx	r7
 801d7b4:	e7d6      	b.n	801d764 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801d7b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d7b6:	b4f0      	push	{r4, r5, r6, r7}
 801d7b8:	4616      	mov	r6, r2
 801d7ba:	461c      	mov	r4, r3
 801d7bc:	460d      	mov	r5, r1
 801d7be:	9a04      	ldr	r2, [sp, #16]
 801d7c0:	2e01      	cmp	r6, #1
 801d7c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d7c6:	d00e      	beq.n	801d7e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801d7c8:	d303      	bcc.n	801d7d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801d7ca:	2e02      	cmp	r6, #2
 801d7cc:	d006      	beq.n	801d7dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801d7ce:	bcf0      	pop	{r4, r5, r6, r7}
 801d7d0:	4770      	bx	lr
 801d7d2:	4621      	mov	r1, r4
 801d7d4:	4628      	mov	r0, r5
 801d7d6:	bcf0      	pop	{r4, r5, r6, r7}
 801d7d8:	f7ff bdda 	b.w	801d390 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801d7dc:	4621      	mov	r1, r4
 801d7de:	4628      	mov	r0, r5
 801d7e0:	bcf0      	pop	{r4, r5, r6, r7}
 801d7e2:	f7ff bec9 	b.w	801d578 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d7e6:	6805      	ldr	r5, [r0, #0]
 801d7e8:	2600      	movs	r6, #0
 801d7ea:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801d7ee:	68ed      	ldr	r5, [r5, #12]
 801d7f0:	4613      	mov	r3, r2
 801d7f2:	4622      	mov	r2, r4
 801d7f4:	46ac      	mov	ip, r5
 801d7f6:	bcf0      	pop	{r4, r5, r6, r7}
 801d7f8:	4760      	bx	ip
	...

0801d7fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801d7fc:	b160      	cbz	r0, 801d818 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801d7fe:	2903      	cmp	r1, #3
 801d800:	d818      	bhi.n	801d834 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801d802:	e8df f001 	tbb	[pc, r1]
 801d806:	1902      	.short	0x1902
 801d808:	1b06      	.short	0x1b06
 801d80a:	4b0e      	ldr	r3, [pc, #56]	; (801d844 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801d80c:	8818      	ldrh	r0, [r3, #0]
 801d80e:	4240      	negs	r0, r0
 801d810:	4770      	bx	lr
 801d812:	4b0c      	ldr	r3, [pc, #48]	; (801d844 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801d814:	8818      	ldrh	r0, [r3, #0]
 801d816:	4770      	bx	lr
 801d818:	2903      	cmp	r1, #3
 801d81a:	d80b      	bhi.n	801d834 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801d81c:	a301      	add	r3, pc, #4	; (adr r3, 801d824 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801d81e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d822:	bf00      	nop
 801d824:	0801d839 	.word	0x0801d839
 801d828:	0801d813 	.word	0x0801d813
 801d82c:	0801d83d 	.word	0x0801d83d
 801d830:	0801d80b 	.word	0x0801d80b
 801d834:	2000      	movs	r0, #0
 801d836:	4770      	bx	lr
 801d838:	2001      	movs	r0, #1
 801d83a:	4770      	bx	lr
 801d83c:	f04f 30ff 	mov.w	r0, #4294967295
 801d840:	4770      	bx	lr
 801d842:	bf00      	nop
 801d844:	2400f43a 	.word	0x2400f43a

0801d848 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801d848:	b160      	cbz	r0, 801d864 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801d84a:	2903      	cmp	r1, #3
 801d84c:	d818      	bhi.n	801d880 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801d84e:	e8df f001 	tbb	[pc, r1]
 801d852:	0219      	.short	0x0219
 801d854:	051b      	.short	0x051b
 801d856:	4b0e      	ldr	r3, [pc, #56]	; (801d890 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801d858:	8818      	ldrh	r0, [r3, #0]
 801d85a:	4770      	bx	lr
 801d85c:	4b0c      	ldr	r3, [pc, #48]	; (801d890 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801d85e:	8818      	ldrh	r0, [r3, #0]
 801d860:	4240      	negs	r0, r0
 801d862:	4770      	bx	lr
 801d864:	2903      	cmp	r1, #3
 801d866:	d80b      	bhi.n	801d880 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801d868:	a301      	add	r3, pc, #4	; (adr r3, 801d870 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801d86a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d86e:	bf00      	nop
 801d870:	0801d857 	.word	0x0801d857
 801d874:	0801d889 	.word	0x0801d889
 801d878:	0801d85d 	.word	0x0801d85d
 801d87c:	0801d885 	.word	0x0801d885
 801d880:	2000      	movs	r0, #0
 801d882:	4770      	bx	lr
 801d884:	2001      	movs	r0, #1
 801d886:	4770      	bx	lr
 801d888:	f04f 30ff 	mov.w	r0, #4294967295
 801d88c:	4770      	bx	lr
 801d88e:	bf00      	nop
 801d890:	2400f43a 	.word	0x2400f43a

0801d894 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d898:	b097      	sub	sp, #92	; 0x5c
 801d89a:	910b      	str	r1, [sp, #44]	; 0x2c
 801d89c:	a912      	add	r1, sp, #72	; 0x48
 801d89e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801d8a2:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801d8a6:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801d8aa:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801d8ae:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801d8b2:	e881 000c 	stmia.w	r1, {r2, r3}
 801d8b6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801d8ba:	930a      	str	r3, [sp, #40]	; 0x28
 801d8bc:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801d8c0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801d8c4:	9311      	str	r3, [sp, #68]	; 0x44
 801d8c6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801d8ca:	798d      	ldrb	r5, [r1, #6]
 801d8cc:	930c      	str	r3, [sp, #48]	; 0x30
 801d8ce:	7b4b      	ldrb	r3, [r1, #13]
 801d8d0:	0158      	lsls	r0, r3, #5
 801d8d2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d8d6:	4328      	orrs	r0, r5
 801d8d8:	9009      	str	r0, [sp, #36]	; 0x24
 801d8da:	f000 817c 	beq.w	801dbd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d8de:	011b      	lsls	r3, r3, #4
 801d8e0:	79c8      	ldrb	r0, [r1, #7]
 801d8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d8e6:	4303      	orrs	r3, r0
 801d8e8:	930e      	str	r3, [sp, #56]	; 0x38
 801d8ea:	f000 8174 	beq.w	801dbd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d8ee:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d8f2:	b29b      	uxth	r3, r3
 801d8f4:	2f00      	cmp	r7, #0
 801d8f6:	f000 8116 	beq.w	801db26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801d8fa:	1aff      	subs	r7, r7, r3
 801d8fc:	b2bf      	uxth	r7, r7
 801d8fe:	043b      	lsls	r3, r7, #16
 801d900:	d502      	bpl.n	801d908 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d902:	1bf6      	subs	r6, r6, r7
 801d904:	2700      	movs	r7, #0
 801d906:	b236      	sxth	r6, r6
 801d908:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d90c:	a812      	add	r0, sp, #72	; 0x48
 801d90e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801d912:	428e      	cmp	r6, r1
 801d914:	b28b      	uxth	r3, r1
 801d916:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d91a:	bfbf      	itttt	lt
 801d91c:	18ff      	addlt	r7, r7, r3
 801d91e:	1bbe      	sublt	r6, r7, r6
 801d920:	b2b7      	uxthlt	r7, r6
 801d922:	460e      	movlt	r6, r1
 801d924:	8891      	ldrh	r1, [r2, #4]
 801d926:	440b      	add	r3, r1
 801d928:	4631      	mov	r1, r6
 801d92a:	b21b      	sxth	r3, r3
 801d92c:	9310      	str	r3, [sp, #64]	; 0x40
 801d92e:	88d3      	ldrh	r3, [r2, #6]
 801d930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d932:	449a      	add	sl, r3
 801d934:	fa0f f38a 	sxth.w	r3, sl
 801d938:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801d93c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d93e:	4bb5      	ldr	r3, [pc, #724]	; (801dc14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801d940:	f893 b000 	ldrb.w	fp, [r3]
 801d944:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d948:	f1dc 0300 	rsbs	r3, ip, #0
 801d94c:	eb43 030c 	adc.w	r3, r3, ip
 801d950:	930d      	str	r3, [sp, #52]	; 0x34
 801d952:	464b      	mov	r3, r9
 801d954:	f7f9 fd7f 	bl	8017456 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d958:	4631      	mov	r1, r6
 801d95a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801d95e:	464b      	mov	r3, r9
 801d960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d962:	a812      	add	r0, sp, #72	; 0x48
 801d964:	f7f9 fd94 	bl	8017490 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d968:	a916      	add	r1, sp, #88	; 0x58
 801d96a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d96e:	a815      	add	r0, sp, #84	; 0x54
 801d970:	f7f9 feb4 	bl	80176dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d974:	f1b9 0f00 	cmp.w	r9, #0
 801d978:	f040 80d8 	bne.w	801db2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801d97c:	f1bb 0f01 	cmp.w	fp, #1
 801d980:	f040 80dc 	bne.w	801db3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801d984:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d986:	b153      	cbz	r3, 801d99e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801d988:	2508      	movs	r5, #8
 801d98a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d98c:	fb95 f3f8 	sdiv	r3, r5, r8
 801d990:	1e5d      	subs	r5, r3, #1
 801d992:	4415      	add	r5, r2
 801d994:	fb95 f5f3 	sdiv	r5, r5, r3
 801d998:	fb15 f503 	smulbb	r5, r5, r3
 801d99c:	b2ad      	uxth	r5, r5
 801d99e:	b907      	cbnz	r7, 801d9a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801d9a0:	b16c      	cbz	r4, 801d9be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801d9a2:	fb04 7305 	mla	r3, r4, r5, r7
 801d9a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d9a8:	ebaa 0a04 	sub.w	sl, sl, r4
 801d9ac:	fb08 f303 	mul.w	r3, r8, r3
 801d9b0:	fa1f fa8a 	uxth.w	sl, sl
 801d9b4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801d9b8:	f003 0407 	and.w	r4, r3, #7
 801d9bc:	9226      	str	r2, [sp, #152]	; 0x98
 801d9be:	4649      	mov	r1, r9
 801d9c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d9c2:	f7ff ff1b 	bl	801d7fc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801d9c6:	4683      	mov	fp, r0
 801d9c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d9ca:	f7ff ff3d 	bl	801d848 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801d9ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d9d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d9d2:	4681      	mov	r9, r0
 801d9d4:	1a9b      	subs	r3, r3, r2
 801d9d6:	459a      	cmp	sl, r3
 801d9d8:	bfa8      	it	ge
 801d9da:	469a      	movge	sl, r3
 801d9dc:	f1ba 0f00 	cmp.w	sl, #0
 801d9e0:	f340 80f9 	ble.w	801dbd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d9e4:	1bf6      	subs	r6, r6, r7
 801d9e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9e8:	1b9e      	subs	r6, r3, r6
 801d9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9ec:	429e      	cmp	r6, r3
 801d9ee:	bfd4      	ite	le
 801d9f0:	ebc7 0706 	rsble	r7, r7, r6
 801d9f4:	ebc7 0703 	rsbgt	r7, r7, r3
 801d9f8:	2f00      	cmp	r7, #0
 801d9fa:	f340 80ec 	ble.w	801dbd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d9fe:	1bed      	subs	r5, r5, r7
 801da00:	fb08 f305 	mul.w	r3, r8, r5
 801da04:	930d      	str	r3, [sp, #52]	; 0x34
 801da06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801da08:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801da0c:	930e      	str	r3, [sp, #56]	; 0x38
 801da0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801da10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801da14:	930f      	str	r3, [sp, #60]	; 0x3c
 801da16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801da18:	b2db      	uxtb	r3, r3
 801da1a:	9310      	str	r3, [sp, #64]	; 0x40
 801da1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da1e:	2b00      	cmp	r3, #0
 801da20:	f040 80de 	bne.w	801dbe0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801da24:	4b7c      	ldr	r3, [pc, #496]	; (801dc18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801da26:	6818      	ldr	r0, [r3, #0]
 801da28:	6803      	ldr	r3, [r0, #0]
 801da2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da2c:	4798      	blx	r3
 801da2e:	2301      	movs	r3, #1
 801da30:	4a7a      	ldr	r2, [pc, #488]	; (801dc1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801da32:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801da36:	fb07 9b1b 	mls	fp, r7, fp, r9
 801da3a:	fa03 f308 	lsl.w	r3, r3, r8
 801da3e:	8811      	ldrh	r1, [r2, #0]
 801da40:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801da44:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801da48:	3b01      	subs	r3, #1
 801da4a:	fb06 bb07 	mla	fp, r6, r7, fp
 801da4e:	b2db      	uxtb	r3, r3
 801da50:	930a      	str	r3, [sp, #40]	; 0x28
 801da52:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801da56:	fb01 2303 	mla	r3, r1, r3, r2
 801da5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da5e:	18c3      	adds	r3, r0, r3
 801da60:	9309      	str	r3, [sp, #36]	; 0x24
 801da62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801da64:	781a      	ldrb	r2, [r3, #0]
 801da66:	4122      	asrs	r2, r4
 801da68:	b2d2      	uxtb	r2, r2
 801da6a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801da6e:	f0c0 80d7 	bcc.w	801dc20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801da72:	46be      	mov	lr, r7
 801da74:	9909      	ldr	r1, [sp, #36]	; 0x24
 801da76:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801da7a:	f0c0 80ba 	bcc.w	801dbf2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801da7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da80:	4013      	ands	r3, r2
 801da82:	d041      	beq.n	801db08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801da84:	20ff      	movs	r0, #255	; 0xff
 801da86:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801da88:	fb90 f5f5 	sdiv	r5, r0, r5
 801da8c:	436b      	muls	r3, r5
 801da8e:	2bfe      	cmp	r3, #254	; 0xfe
 801da90:	dd03      	ble.n	801da9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801da92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801da94:	4285      	cmp	r5, r0
 801da96:	f000 80a5 	beq.w	801dbe4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801da9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801da9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801da9e:	fb15 f303 	smulbb	r3, r5, r3
 801daa2:	b29b      	uxth	r3, r3
 801daa4:	1c5d      	adds	r5, r3, #1
 801daa6:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801daaa:	780d      	ldrb	r5, [r1, #0]
 801daac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dab0:	fa1f fc83 	uxth.w	ip, r3
 801dab4:	43db      	mvns	r3, r3
 801dab6:	fb10 f90c 	smulbb	r9, r0, ip
 801daba:	b2db      	uxtb	r3, r3
 801dabc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801dabe:	fb05 9503 	mla	r5, r5, r3, r9
 801dac2:	b2ad      	uxth	r5, r5
 801dac4:	f105 0901 	add.w	r9, r5, #1
 801dac8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801dacc:	fb10 f90c 	smulbb	r9, r0, ip
 801dad0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801dad2:	122d      	asrs	r5, r5, #8
 801dad4:	fb10 fc0c 	smulbb	ip, r0, ip
 801dad8:	700d      	strb	r5, [r1, #0]
 801dada:	784d      	ldrb	r5, [r1, #1]
 801dadc:	fb05 9503 	mla	r5, r5, r3, r9
 801dae0:	b2ad      	uxth	r5, r5
 801dae2:	f105 0901 	add.w	r9, r5, #1
 801dae6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801daea:	122d      	asrs	r5, r5, #8
 801daec:	704d      	strb	r5, [r1, #1]
 801daee:	788d      	ldrb	r5, [r1, #2]
 801daf0:	fb05 cc03 	mla	ip, r5, r3, ip
 801daf4:	fa1f fc8c 	uxth.w	ip, ip
 801daf8:	f10c 0301 	add.w	r3, ip, #1
 801dafc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801db00:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801db04:	f881 c002 	strb.w	ip, [r1, #2]
 801db08:	4444      	add	r4, r8
 801db0a:	4431      	add	r1, r6
 801db0c:	b2a4      	uxth	r4, r4
 801db0e:	2c07      	cmp	r4, #7
 801db10:	bf89      	itett	hi
 801db12:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801db14:	fa42 f208 	asrls.w	r2, r2, r8
 801db18:	2400      	movhi	r4, #0
 801db1a:	785a      	ldrbhi	r2, [r3, #1]
 801db1c:	bf8a      	itet	hi
 801db1e:	3301      	addhi	r3, #1
 801db20:	b2d2      	uxtbls	r2, r2
 801db22:	9326      	strhi	r3, [sp, #152]	; 0x98
 801db24:	e7a7      	b.n	801da76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801db26:	441e      	add	r6, r3
 801db28:	b236      	sxth	r6, r6
 801db2a:	e6ed      	b.n	801d908 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801db2c:	f1b9 0f01 	cmp.w	r9, #1
 801db30:	f47f af28 	bne.w	801d984 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801db34:	f1bb 0f01 	cmp.w	fp, #1
 801db38:	f47f af24 	bne.w	801d984 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801db3c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801dc18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801db40:	f8db 0000 	ldr.w	r0, [fp]
 801db44:	6803      	ldr	r3, [r0, #0]
 801db46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db48:	4798      	blx	r3
 801db4a:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801db4e:	465a      	mov	r2, fp
 801db50:	d006      	beq.n	801db60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801db52:	f1b8 0f04 	cmp.w	r8, #4
 801db56:	d141      	bne.n	801dbdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801db58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db5a:	3300      	adds	r3, #0
 801db5c:	bf18      	it	ne
 801db5e:	2301      	movne	r3, #1
 801db60:	0580      	lsls	r0, r0, #22
 801db62:	d566      	bpl.n	801dc32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801db64:	f1b8 0f08 	cmp.w	r8, #8
 801db68:	d163      	bne.n	801dc32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801db6a:	2b00      	cmp	r3, #0
 801db6c:	bf0c      	ite	eq
 801db6e:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801db72:	f44f 7180 	movne.w	r1, #256	; 0x100
 801db76:	2f00      	cmp	r7, #0
 801db78:	f47f af04 	bne.w	801d984 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801db7c:	2c00      	cmp	r4, #0
 801db7e:	f47f af01 	bne.w	801d984 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801db82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db84:	9810      	ldr	r0, [sp, #64]	; 0x40
 801db86:	18f3      	adds	r3, r6, r3
 801db88:	4283      	cmp	r3, r0
 801db8a:	f73f aefb 	bgt.w	801d984 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801db8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801db90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db92:	4403      	add	r3, r0
 801db94:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801db96:	4283      	cmp	r3, r0
 801db98:	f73f aef4 	bgt.w	801d984 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801db9c:	f1b8 0f08 	cmp.w	r8, #8
 801dba0:	6810      	ldr	r0, [r2, #0]
 801dba2:	f04f 0600 	mov.w	r6, #0
 801dba6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801dbaa:	bf18      	it	ne
 801dbac:	3501      	addne	r5, #1
 801dbae:	6804      	ldr	r4, [r0, #0]
 801dbb0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801dbb4:	bf18      	it	ne
 801dbb6:	f025 0501 	bicne.w	r5, r5, #1
 801dbba:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801dbbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dbc0:	bf18      	it	ne
 801dbc2:	b2ad      	uxthne	r5, r5
 801dbc4:	9104      	str	r1, [sp, #16]
 801dbc6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801dbc8:	e9cd 5a00 	strd	r5, sl, [sp]
 801dbcc:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801dbd0:	9926      	ldr	r1, [sp, #152]	; 0x98
 801dbd2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801dbd4:	47a0      	blx	r4
 801dbd6:	b017      	add	sp, #92	; 0x5c
 801dbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbdc:	2300      	movs	r3, #0
 801dbde:	e7bf      	b.n	801db60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801dbe0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801dbe2:	e724      	b.n	801da2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801dbe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dbe6:	700b      	strb	r3, [r1, #0]
 801dbe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dbea:	704b      	strb	r3, [r1, #1]
 801dbec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbee:	708b      	strb	r3, [r1, #2]
 801dbf0:	e78a      	b.n	801db08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801dbf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dbf4:	b153      	cbz	r3, 801dc0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801dbf6:	441c      	add	r4, r3
 801dbf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801dbfa:	b2a4      	uxth	r4, r4
 801dbfc:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801dc00:	f004 0407 	and.w	r4, r4, #7
 801dc04:	781a      	ldrb	r2, [r3, #0]
 801dc06:	9326      	str	r3, [sp, #152]	; 0x98
 801dc08:	4122      	asrs	r2, r4
 801dc0a:	b2d2      	uxtb	r2, r2
 801dc0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc0e:	445b      	add	r3, fp
 801dc10:	9309      	str	r3, [sp, #36]	; 0x24
 801dc12:	e72a      	b.n	801da6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801dc14:	2400f438 	.word	0x2400f438
 801dc18:	2400f440 	.word	0x2400f440
 801dc1c:	2400f43a 	.word	0x2400f43a
 801dc20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d1d7      	bne.n	801dbd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801dc26:	4b06      	ldr	r3, [pc, #24]	; (801dc40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801dc28:	6818      	ldr	r0, [r3, #0]
 801dc2a:	6803      	ldr	r3, [r0, #0]
 801dc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc2e:	4798      	blx	r3
 801dc30:	e7d1      	b.n	801dbd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	f43f aea6 	beq.w	801d984 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801dc38:	f44f 7180 	mov.w	r1, #256	; 0x100
 801dc3c:	e79b      	b.n	801db76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801dc3e:	bf00      	nop
 801dc40:	2400f440 	.word	0x2400f440

0801dc44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801dc44:	b538      	push	{r3, r4, r5, lr}
 801dc46:	4c15      	ldr	r4, [pc, #84]	; (801dc9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801dc48:	4605      	mov	r5, r0
 801dc4a:	7823      	ldrb	r3, [r4, #0]
 801dc4c:	f3bf 8f5b 	dmb	ish
 801dc50:	07da      	lsls	r2, r3, #31
 801dc52:	d40b      	bmi.n	801dc6c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801dc54:	4620      	mov	r0, r4
 801dc56:	f005 f890 	bl	8022d7a <__cxa_guard_acquire>
 801dc5a:	b138      	cbz	r0, 801dc6c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801dc5c:	4620      	mov	r0, r4
 801dc5e:	f005 f898 	bl	8022d92 <__cxa_guard_release>
 801dc62:	4a0f      	ldr	r2, [pc, #60]	; (801dca0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801dc64:	490f      	ldr	r1, [pc, #60]	; (801dca4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801dc66:	4810      	ldr	r0, [pc, #64]	; (801dca8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801dc68:	f005 f880 	bl	8022d6c <__aeabi_atexit>
 801dc6c:	4c0f      	ldr	r4, [pc, #60]	; (801dcac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801dc6e:	7823      	ldrb	r3, [r4, #0]
 801dc70:	f3bf 8f5b 	dmb	ish
 801dc74:	07db      	lsls	r3, r3, #31
 801dc76:	d40b      	bmi.n	801dc90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801dc78:	4620      	mov	r0, r4
 801dc7a:	f005 f87e 	bl	8022d7a <__cxa_guard_acquire>
 801dc7e:	b138      	cbz	r0, 801dc90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801dc80:	4620      	mov	r0, r4
 801dc82:	f005 f886 	bl	8022d92 <__cxa_guard_release>
 801dc86:	4a06      	ldr	r2, [pc, #24]	; (801dca0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801dc88:	4909      	ldr	r1, [pc, #36]	; (801dcb0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801dc8a:	480a      	ldr	r0, [pc, #40]	; (801dcb4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801dc8c:	f005 f86e 	bl	8022d6c <__aeabi_atexit>
 801dc90:	4b05      	ldr	r3, [pc, #20]	; (801dca8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801dc92:	612b      	str	r3, [r5, #16]
 801dc94:	4b07      	ldr	r3, [pc, #28]	; (801dcb4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801dc96:	616b      	str	r3, [r5, #20]
 801dc98:	bd38      	pop	{r3, r4, r5, pc}
 801dc9a:	bf00      	nop
 801dc9c:	2400f50c 	.word	0x2400f50c
 801dca0:	24000000 	.word	0x24000000
 801dca4:	0801c809 	.word	0x0801c809
 801dca8:	240000c8 	.word	0x240000c8
 801dcac:	2400f510 	.word	0x2400f510
 801dcb0:	0801c807 	.word	0x0801c807
 801dcb4:	240000cc 	.word	0x240000cc

0801dcb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801dcb8:	b538      	push	{r3, r4, r5, lr}
 801dcba:	4c15      	ldr	r4, [pc, #84]	; (801dd10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801dcbc:	4605      	mov	r5, r0
 801dcbe:	7823      	ldrb	r3, [r4, #0]
 801dcc0:	f3bf 8f5b 	dmb	ish
 801dcc4:	07da      	lsls	r2, r3, #31
 801dcc6:	d40b      	bmi.n	801dce0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801dcc8:	4620      	mov	r0, r4
 801dcca:	f005 f856 	bl	8022d7a <__cxa_guard_acquire>
 801dcce:	b138      	cbz	r0, 801dce0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801dcd0:	4620      	mov	r0, r4
 801dcd2:	f005 f85e 	bl	8022d92 <__cxa_guard_release>
 801dcd6:	4a0f      	ldr	r2, [pc, #60]	; (801dd14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801dcd8:	490f      	ldr	r1, [pc, #60]	; (801dd18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801dcda:	4810      	ldr	r0, [pc, #64]	; (801dd1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801dcdc:	f005 f846 	bl	8022d6c <__aeabi_atexit>
 801dce0:	4c0f      	ldr	r4, [pc, #60]	; (801dd20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801dce2:	7823      	ldrb	r3, [r4, #0]
 801dce4:	f3bf 8f5b 	dmb	ish
 801dce8:	07db      	lsls	r3, r3, #31
 801dcea:	d40b      	bmi.n	801dd04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801dcec:	4620      	mov	r0, r4
 801dcee:	f005 f844 	bl	8022d7a <__cxa_guard_acquire>
 801dcf2:	b138      	cbz	r0, 801dd04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801dcf4:	4620      	mov	r0, r4
 801dcf6:	f005 f84c 	bl	8022d92 <__cxa_guard_release>
 801dcfa:	4a06      	ldr	r2, [pc, #24]	; (801dd14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801dcfc:	4909      	ldr	r1, [pc, #36]	; (801dd24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801dcfe:	480a      	ldr	r0, [pc, #40]	; (801dd28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801dd00:	f005 f834 	bl	8022d6c <__aeabi_atexit>
 801dd04:	4b05      	ldr	r3, [pc, #20]	; (801dd1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801dd06:	60ab      	str	r3, [r5, #8]
 801dd08:	4b07      	ldr	r3, [pc, #28]	; (801dd28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801dd0a:	60eb      	str	r3, [r5, #12]
 801dd0c:	bd38      	pop	{r3, r4, r5, pc}
 801dd0e:	bf00      	nop
 801dd10:	2400f4ec 	.word	0x2400f4ec
 801dd14:	24000000 	.word	0x24000000
 801dd18:	0801c80d 	.word	0x0801c80d
 801dd1c:	240000a8 	.word	0x240000a8
 801dd20:	2400f4f0 	.word	0x2400f4f0
 801dd24:	0801c80b 	.word	0x0801c80b
 801dd28:	240000ac 	.word	0x240000ac

0801dd2c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801dd2c:	b510      	push	{r4, lr}
 801dd2e:	4604      	mov	r4, r0
 801dd30:	f7ff ff88 	bl	801dc44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801dd34:	4620      	mov	r0, r4
 801dd36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd3a:	f7ff bfbd 	b.w	801dcb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801dd40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801dd40:	b538      	push	{r3, r4, r5, lr}
 801dd42:	4c15      	ldr	r4, [pc, #84]	; (801dd98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801dd44:	4605      	mov	r5, r0
 801dd46:	7823      	ldrb	r3, [r4, #0]
 801dd48:	f3bf 8f5b 	dmb	ish
 801dd4c:	07da      	lsls	r2, r3, #31
 801dd4e:	d40b      	bmi.n	801dd68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801dd50:	4620      	mov	r0, r4
 801dd52:	f005 f812 	bl	8022d7a <__cxa_guard_acquire>
 801dd56:	b138      	cbz	r0, 801dd68 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801dd58:	4620      	mov	r0, r4
 801dd5a:	f005 f81a 	bl	8022d92 <__cxa_guard_release>
 801dd5e:	4a0f      	ldr	r2, [pc, #60]	; (801dd9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801dd60:	490f      	ldr	r1, [pc, #60]	; (801dda0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801dd62:	4810      	ldr	r0, [pc, #64]	; (801dda4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801dd64:	f005 f802 	bl	8022d6c <__aeabi_atexit>
 801dd68:	4c0f      	ldr	r4, [pc, #60]	; (801dda8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801dd6a:	7823      	ldrb	r3, [r4, #0]
 801dd6c:	f3bf 8f5b 	dmb	ish
 801dd70:	07db      	lsls	r3, r3, #31
 801dd72:	d40b      	bmi.n	801dd8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801dd74:	4620      	mov	r0, r4
 801dd76:	f005 f800 	bl	8022d7a <__cxa_guard_acquire>
 801dd7a:	b138      	cbz	r0, 801dd8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801dd7c:	4620      	mov	r0, r4
 801dd7e:	f005 f808 	bl	8022d92 <__cxa_guard_release>
 801dd82:	4a06      	ldr	r2, [pc, #24]	; (801dd9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801dd84:	4909      	ldr	r1, [pc, #36]	; (801ddac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801dd86:	480a      	ldr	r0, [pc, #40]	; (801ddb0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801dd88:	f004 fff0 	bl	8022d6c <__aeabi_atexit>
 801dd8c:	4b05      	ldr	r3, [pc, #20]	; (801dda4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801dd8e:	622b      	str	r3, [r5, #32]
 801dd90:	4b07      	ldr	r3, [pc, #28]	; (801ddb0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801dd92:	626b      	str	r3, [r5, #36]	; 0x24
 801dd94:	bd38      	pop	{r3, r4, r5, pc}
 801dd96:	bf00      	nop
 801dd98:	2400f514 	.word	0x2400f514
 801dd9c:	24000000 	.word	0x24000000
 801dda0:	0801c801 	.word	0x0801c801
 801dda4:	240000d0 	.word	0x240000d0
 801dda8:	2400f518 	.word	0x2400f518
 801ddac:	0801c7ff 	.word	0x0801c7ff
 801ddb0:	240000d4 	.word	0x240000d4

0801ddb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ddb4:	b538      	push	{r3, r4, r5, lr}
 801ddb6:	4c15      	ldr	r4, [pc, #84]	; (801de0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ddb8:	4605      	mov	r5, r0
 801ddba:	7823      	ldrb	r3, [r4, #0]
 801ddbc:	f3bf 8f5b 	dmb	ish
 801ddc0:	07da      	lsls	r2, r3, #31
 801ddc2:	d40b      	bmi.n	801dddc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ddc4:	4620      	mov	r0, r4
 801ddc6:	f004 ffd8 	bl	8022d7a <__cxa_guard_acquire>
 801ddca:	b138      	cbz	r0, 801dddc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ddcc:	4620      	mov	r0, r4
 801ddce:	f004 ffe0 	bl	8022d92 <__cxa_guard_release>
 801ddd2:	4a0f      	ldr	r2, [pc, #60]	; (801de10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ddd4:	490f      	ldr	r1, [pc, #60]	; (801de14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ddd6:	4810      	ldr	r0, [pc, #64]	; (801de18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ddd8:	f004 ffc8 	bl	8022d6c <__aeabi_atexit>
 801dddc:	4c0f      	ldr	r4, [pc, #60]	; (801de1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ddde:	7823      	ldrb	r3, [r4, #0]
 801dde0:	f3bf 8f5b 	dmb	ish
 801dde4:	07db      	lsls	r3, r3, #31
 801dde6:	d40b      	bmi.n	801de00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801dde8:	4620      	mov	r0, r4
 801ddea:	f004 ffc6 	bl	8022d7a <__cxa_guard_acquire>
 801ddee:	b138      	cbz	r0, 801de00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ddf0:	4620      	mov	r0, r4
 801ddf2:	f004 ffce 	bl	8022d92 <__cxa_guard_release>
 801ddf6:	4a06      	ldr	r2, [pc, #24]	; (801de10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ddf8:	4909      	ldr	r1, [pc, #36]	; (801de20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801ddfa:	480a      	ldr	r0, [pc, #40]	; (801de24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801ddfc:	f004 ffb6 	bl	8022d6c <__aeabi_atexit>
 801de00:	4b05      	ldr	r3, [pc, #20]	; (801de18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801de02:	61ab      	str	r3, [r5, #24]
 801de04:	4b07      	ldr	r3, [pc, #28]	; (801de24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801de06:	61eb      	str	r3, [r5, #28]
 801de08:	bd38      	pop	{r3, r4, r5, pc}
 801de0a:	bf00      	nop
 801de0c:	2400f4f4 	.word	0x2400f4f4
 801de10:	24000000 	.word	0x24000000
 801de14:	0801c805 	.word	0x0801c805
 801de18:	240000b0 	.word	0x240000b0
 801de1c:	2400f4f8 	.word	0x2400f4f8
 801de20:	0801c803 	.word	0x0801c803
 801de24:	240000b4 	.word	0x240000b4

0801de28 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801de28:	b510      	push	{r4, lr}
 801de2a:	4604      	mov	r4, r0
 801de2c:	f7ff ff88 	bl	801dd40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801de30:	4620      	mov	r0, r4
 801de32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de36:	f7ff bfbd 	b.w	801ddb4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801de3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801de3c:	b538      	push	{r3, r4, r5, lr}
 801de3e:	4c15      	ldr	r4, [pc, #84]	; (801de94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801de40:	4605      	mov	r5, r0
 801de42:	7823      	ldrb	r3, [r4, #0]
 801de44:	f3bf 8f5b 	dmb	ish
 801de48:	07da      	lsls	r2, r3, #31
 801de4a:	d40b      	bmi.n	801de64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801de4c:	4620      	mov	r0, r4
 801de4e:	f004 ff94 	bl	8022d7a <__cxa_guard_acquire>
 801de52:	b138      	cbz	r0, 801de64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801de54:	4620      	mov	r0, r4
 801de56:	f004 ff9c 	bl	8022d92 <__cxa_guard_release>
 801de5a:	4a0f      	ldr	r2, [pc, #60]	; (801de98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801de5c:	490f      	ldr	r1, [pc, #60]	; (801de9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801de5e:	4810      	ldr	r0, [pc, #64]	; (801dea0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801de60:	f004 ff84 	bl	8022d6c <__aeabi_atexit>
 801de64:	4c0f      	ldr	r4, [pc, #60]	; (801dea4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801de66:	7823      	ldrb	r3, [r4, #0]
 801de68:	f3bf 8f5b 	dmb	ish
 801de6c:	07db      	lsls	r3, r3, #31
 801de6e:	d40b      	bmi.n	801de88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801de70:	4620      	mov	r0, r4
 801de72:	f004 ff82 	bl	8022d7a <__cxa_guard_acquire>
 801de76:	b138      	cbz	r0, 801de88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801de78:	4620      	mov	r0, r4
 801de7a:	f004 ff8a 	bl	8022d92 <__cxa_guard_release>
 801de7e:	4a06      	ldr	r2, [pc, #24]	; (801de98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801de80:	4909      	ldr	r1, [pc, #36]	; (801dea8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801de82:	480a      	ldr	r0, [pc, #40]	; (801deac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801de84:	f004 ff72 	bl	8022d6c <__aeabi_atexit>
 801de88:	4b05      	ldr	r3, [pc, #20]	; (801dea0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801de8a:	632b      	str	r3, [r5, #48]	; 0x30
 801de8c:	4b07      	ldr	r3, [pc, #28]	; (801deac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801de8e:	636b      	str	r3, [r5, #52]	; 0x34
 801de90:	bd38      	pop	{r3, r4, r5, pc}
 801de92:	bf00      	nop
 801de94:	2400f4fc 	.word	0x2400f4fc
 801de98:	24000000 	.word	0x24000000
 801de9c:	0801c7f9 	.word	0x0801c7f9
 801dea0:	240000b8 	.word	0x240000b8
 801dea4:	2400f500 	.word	0x2400f500
 801dea8:	0801c7f7 	.word	0x0801c7f7
 801deac:	240000bc 	.word	0x240000bc

0801deb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801deb0:	b538      	push	{r3, r4, r5, lr}
 801deb2:	4c15      	ldr	r4, [pc, #84]	; (801df08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801deb4:	4605      	mov	r5, r0
 801deb6:	7823      	ldrb	r3, [r4, #0]
 801deb8:	f3bf 8f5b 	dmb	ish
 801debc:	07da      	lsls	r2, r3, #31
 801debe:	d40b      	bmi.n	801ded8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801dec0:	4620      	mov	r0, r4
 801dec2:	f004 ff5a 	bl	8022d7a <__cxa_guard_acquire>
 801dec6:	b138      	cbz	r0, 801ded8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801dec8:	4620      	mov	r0, r4
 801deca:	f004 ff62 	bl	8022d92 <__cxa_guard_release>
 801dece:	4a0f      	ldr	r2, [pc, #60]	; (801df0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801ded0:	490f      	ldr	r1, [pc, #60]	; (801df10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801ded2:	4810      	ldr	r0, [pc, #64]	; (801df14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801ded4:	f004 ff4a 	bl	8022d6c <__aeabi_atexit>
 801ded8:	4c0f      	ldr	r4, [pc, #60]	; (801df18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801deda:	7823      	ldrb	r3, [r4, #0]
 801dedc:	f3bf 8f5b 	dmb	ish
 801dee0:	07db      	lsls	r3, r3, #31
 801dee2:	d40b      	bmi.n	801defc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801dee4:	4620      	mov	r0, r4
 801dee6:	f004 ff48 	bl	8022d7a <__cxa_guard_acquire>
 801deea:	b138      	cbz	r0, 801defc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801deec:	4620      	mov	r0, r4
 801deee:	f004 ff50 	bl	8022d92 <__cxa_guard_release>
 801def2:	4a06      	ldr	r2, [pc, #24]	; (801df0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801def4:	4909      	ldr	r1, [pc, #36]	; (801df1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801def6:	480a      	ldr	r0, [pc, #40]	; (801df20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801def8:	f004 ff38 	bl	8022d6c <__aeabi_atexit>
 801defc:	4b05      	ldr	r3, [pc, #20]	; (801df14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801defe:	62ab      	str	r3, [r5, #40]	; 0x28
 801df00:	4b07      	ldr	r3, [pc, #28]	; (801df20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801df02:	62eb      	str	r3, [r5, #44]	; 0x2c
 801df04:	bd38      	pop	{r3, r4, r5, pc}
 801df06:	bf00      	nop
 801df08:	2400f4d4 	.word	0x2400f4d4
 801df0c:	24000000 	.word	0x24000000
 801df10:	0801c7fd 	.word	0x0801c7fd
 801df14:	24000090 	.word	0x24000090
 801df18:	2400f4d8 	.word	0x2400f4d8
 801df1c:	0801c7fb 	.word	0x0801c7fb
 801df20:	24000094 	.word	0x24000094

0801df24 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801df24:	b510      	push	{r4, lr}
 801df26:	4604      	mov	r4, r0
 801df28:	f7ff ff88 	bl	801de3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801df2c:	4620      	mov	r0, r4
 801df2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df32:	f7ff bfbd 	b.w	801deb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801df38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801df38:	b538      	push	{r3, r4, r5, lr}
 801df3a:	4c15      	ldr	r4, [pc, #84]	; (801df90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801df3c:	4605      	mov	r5, r0
 801df3e:	7823      	ldrb	r3, [r4, #0]
 801df40:	f3bf 8f5b 	dmb	ish
 801df44:	07da      	lsls	r2, r3, #31
 801df46:	d40b      	bmi.n	801df60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801df48:	4620      	mov	r0, r4
 801df4a:	f004 ff16 	bl	8022d7a <__cxa_guard_acquire>
 801df4e:	b138      	cbz	r0, 801df60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801df50:	4620      	mov	r0, r4
 801df52:	f004 ff1e 	bl	8022d92 <__cxa_guard_release>
 801df56:	4a0f      	ldr	r2, [pc, #60]	; (801df94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801df58:	490f      	ldr	r1, [pc, #60]	; (801df98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801df5a:	4810      	ldr	r0, [pc, #64]	; (801df9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801df5c:	f004 ff06 	bl	8022d6c <__aeabi_atexit>
 801df60:	4c0f      	ldr	r4, [pc, #60]	; (801dfa0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801df62:	7823      	ldrb	r3, [r4, #0]
 801df64:	f3bf 8f5b 	dmb	ish
 801df68:	07db      	lsls	r3, r3, #31
 801df6a:	d40b      	bmi.n	801df84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801df6c:	4620      	mov	r0, r4
 801df6e:	f004 ff04 	bl	8022d7a <__cxa_guard_acquire>
 801df72:	b138      	cbz	r0, 801df84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801df74:	4620      	mov	r0, r4
 801df76:	f004 ff0c 	bl	8022d92 <__cxa_guard_release>
 801df7a:	4a06      	ldr	r2, [pc, #24]	; (801df94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801df7c:	4909      	ldr	r1, [pc, #36]	; (801dfa4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801df7e:	480a      	ldr	r0, [pc, #40]	; (801dfa8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801df80:	f004 fef4 	bl	8022d6c <__aeabi_atexit>
 801df84:	4b05      	ldr	r3, [pc, #20]	; (801df9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801df86:	642b      	str	r3, [r5, #64]	; 0x40
 801df88:	4b07      	ldr	r3, [pc, #28]	; (801dfa8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801df8a:	646b      	str	r3, [r5, #68]	; 0x44
 801df8c:	bd38      	pop	{r3, r4, r5, pc}
 801df8e:	bf00      	nop
 801df90:	2400f504 	.word	0x2400f504
 801df94:	24000000 	.word	0x24000000
 801df98:	0801c7f1 	.word	0x0801c7f1
 801df9c:	240000c0 	.word	0x240000c0
 801dfa0:	2400f508 	.word	0x2400f508
 801dfa4:	0801c7ef 	.word	0x0801c7ef
 801dfa8:	240000c4 	.word	0x240000c4

0801dfac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801dfac:	b538      	push	{r3, r4, r5, lr}
 801dfae:	4c15      	ldr	r4, [pc, #84]	; (801e004 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801dfb0:	4605      	mov	r5, r0
 801dfb2:	7823      	ldrb	r3, [r4, #0]
 801dfb4:	f3bf 8f5b 	dmb	ish
 801dfb8:	07da      	lsls	r2, r3, #31
 801dfba:	d40b      	bmi.n	801dfd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801dfbc:	4620      	mov	r0, r4
 801dfbe:	f004 fedc 	bl	8022d7a <__cxa_guard_acquire>
 801dfc2:	b138      	cbz	r0, 801dfd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801dfc4:	4620      	mov	r0, r4
 801dfc6:	f004 fee4 	bl	8022d92 <__cxa_guard_release>
 801dfca:	4a0f      	ldr	r2, [pc, #60]	; (801e008 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801dfcc:	490f      	ldr	r1, [pc, #60]	; (801e00c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801dfce:	4810      	ldr	r0, [pc, #64]	; (801e010 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801dfd0:	f004 fecc 	bl	8022d6c <__aeabi_atexit>
 801dfd4:	4c0f      	ldr	r4, [pc, #60]	; (801e014 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801dfd6:	7823      	ldrb	r3, [r4, #0]
 801dfd8:	f3bf 8f5b 	dmb	ish
 801dfdc:	07db      	lsls	r3, r3, #31
 801dfde:	d40b      	bmi.n	801dff8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801dfe0:	4620      	mov	r0, r4
 801dfe2:	f004 feca 	bl	8022d7a <__cxa_guard_acquire>
 801dfe6:	b138      	cbz	r0, 801dff8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801dfe8:	4620      	mov	r0, r4
 801dfea:	f004 fed2 	bl	8022d92 <__cxa_guard_release>
 801dfee:	4a06      	ldr	r2, [pc, #24]	; (801e008 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801dff0:	4909      	ldr	r1, [pc, #36]	; (801e018 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801dff2:	480a      	ldr	r0, [pc, #40]	; (801e01c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801dff4:	f004 feba 	bl	8022d6c <__aeabi_atexit>
 801dff8:	4b05      	ldr	r3, [pc, #20]	; (801e010 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801dffa:	63ab      	str	r3, [r5, #56]	; 0x38
 801dffc:	4b07      	ldr	r3, [pc, #28]	; (801e01c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801dffe:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e000:	bd38      	pop	{r3, r4, r5, pc}
 801e002:	bf00      	nop
 801e004:	2400f4e4 	.word	0x2400f4e4
 801e008:	24000000 	.word	0x24000000
 801e00c:	0801c7f5 	.word	0x0801c7f5
 801e010:	240000a0 	.word	0x240000a0
 801e014:	2400f4e8 	.word	0x2400f4e8
 801e018:	0801c7f3 	.word	0x0801c7f3
 801e01c:	240000a4 	.word	0x240000a4

0801e020 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e020:	b510      	push	{r4, lr}
 801e022:	4604      	mov	r4, r0
 801e024:	f7ff ff88 	bl	801df38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e028:	4620      	mov	r0, r4
 801e02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e02e:	f7ff bfbd 	b.w	801dfac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e034 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e034:	b538      	push	{r3, r4, r5, lr}
 801e036:	4c15      	ldr	r4, [pc, #84]	; (801e08c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e038:	4605      	mov	r5, r0
 801e03a:	7823      	ldrb	r3, [r4, #0]
 801e03c:	f3bf 8f5b 	dmb	ish
 801e040:	07da      	lsls	r2, r3, #31
 801e042:	d40b      	bmi.n	801e05c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e044:	4620      	mov	r0, r4
 801e046:	f004 fe98 	bl	8022d7a <__cxa_guard_acquire>
 801e04a:	b138      	cbz	r0, 801e05c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e04c:	4620      	mov	r0, r4
 801e04e:	f004 fea0 	bl	8022d92 <__cxa_guard_release>
 801e052:	4a0f      	ldr	r2, [pc, #60]	; (801e090 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e054:	490f      	ldr	r1, [pc, #60]	; (801e094 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e056:	4810      	ldr	r0, [pc, #64]	; (801e098 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e058:	f004 fe88 	bl	8022d6c <__aeabi_atexit>
 801e05c:	4c0f      	ldr	r4, [pc, #60]	; (801e09c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e05e:	7823      	ldrb	r3, [r4, #0]
 801e060:	f3bf 8f5b 	dmb	ish
 801e064:	07db      	lsls	r3, r3, #31
 801e066:	d40b      	bmi.n	801e080 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e068:	4620      	mov	r0, r4
 801e06a:	f004 fe86 	bl	8022d7a <__cxa_guard_acquire>
 801e06e:	b138      	cbz	r0, 801e080 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e070:	4620      	mov	r0, r4
 801e072:	f004 fe8e 	bl	8022d92 <__cxa_guard_release>
 801e076:	4a06      	ldr	r2, [pc, #24]	; (801e090 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e078:	4909      	ldr	r1, [pc, #36]	; (801e0a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e07a:	480a      	ldr	r0, [pc, #40]	; (801e0a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e07c:	f004 fe76 	bl	8022d6c <__aeabi_atexit>
 801e080:	4b05      	ldr	r3, [pc, #20]	; (801e098 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e082:	652b      	str	r3, [r5, #80]	; 0x50
 801e084:	4b07      	ldr	r3, [pc, #28]	; (801e0a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e086:	656b      	str	r3, [r5, #84]	; 0x54
 801e088:	bd38      	pop	{r3, r4, r5, pc}
 801e08a:	bf00      	nop
 801e08c:	2400f4dc 	.word	0x2400f4dc
 801e090:	24000000 	.word	0x24000000
 801e094:	0801c7e9 	.word	0x0801c7e9
 801e098:	24000098 	.word	0x24000098
 801e09c:	2400f4e0 	.word	0x2400f4e0
 801e0a0:	0801c7e7 	.word	0x0801c7e7
 801e0a4:	2400009c 	.word	0x2400009c

0801e0a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e0a8:	b538      	push	{r3, r4, r5, lr}
 801e0aa:	4c15      	ldr	r4, [pc, #84]	; (801e100 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e0ac:	4605      	mov	r5, r0
 801e0ae:	7823      	ldrb	r3, [r4, #0]
 801e0b0:	f3bf 8f5b 	dmb	ish
 801e0b4:	07da      	lsls	r2, r3, #31
 801e0b6:	d40b      	bmi.n	801e0d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e0b8:	4620      	mov	r0, r4
 801e0ba:	f004 fe5e 	bl	8022d7a <__cxa_guard_acquire>
 801e0be:	b138      	cbz	r0, 801e0d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	f004 fe66 	bl	8022d92 <__cxa_guard_release>
 801e0c6:	4a0f      	ldr	r2, [pc, #60]	; (801e104 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e0c8:	490f      	ldr	r1, [pc, #60]	; (801e108 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e0ca:	4810      	ldr	r0, [pc, #64]	; (801e10c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e0cc:	f004 fe4e 	bl	8022d6c <__aeabi_atexit>
 801e0d0:	4c0f      	ldr	r4, [pc, #60]	; (801e110 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e0d2:	7823      	ldrb	r3, [r4, #0]
 801e0d4:	f3bf 8f5b 	dmb	ish
 801e0d8:	07db      	lsls	r3, r3, #31
 801e0da:	d40b      	bmi.n	801e0f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e0dc:	4620      	mov	r0, r4
 801e0de:	f004 fe4c 	bl	8022d7a <__cxa_guard_acquire>
 801e0e2:	b138      	cbz	r0, 801e0f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e0e4:	4620      	mov	r0, r4
 801e0e6:	f004 fe54 	bl	8022d92 <__cxa_guard_release>
 801e0ea:	4a06      	ldr	r2, [pc, #24]	; (801e104 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e0ec:	4909      	ldr	r1, [pc, #36]	; (801e114 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e0ee:	480a      	ldr	r0, [pc, #40]	; (801e118 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e0f0:	f004 fe3c 	bl	8022d6c <__aeabi_atexit>
 801e0f4:	4b05      	ldr	r3, [pc, #20]	; (801e10c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e0f6:	64ab      	str	r3, [r5, #72]	; 0x48
 801e0f8:	4b07      	ldr	r3, [pc, #28]	; (801e118 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e0fa:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e0fc:	bd38      	pop	{r3, r4, r5, pc}
 801e0fe:	bf00      	nop
 801e100:	2400f4cc 	.word	0x2400f4cc
 801e104:	24000000 	.word	0x24000000
 801e108:	0801c7ed 	.word	0x0801c7ed
 801e10c:	24000088 	.word	0x24000088
 801e110:	2400f4d0 	.word	0x2400f4d0
 801e114:	0801c7eb 	.word	0x0801c7eb
 801e118:	2400008c 	.word	0x2400008c

0801e11c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e11c:	b510      	push	{r4, lr}
 801e11e:	4604      	mov	r4, r0
 801e120:	f7ff ff88 	bl	801e034 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e124:	4620      	mov	r0, r4
 801e126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e12a:	f7ff bfbd 	b.w	801e0a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e12e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e12e:	b510      	push	{r4, lr}
 801e130:	4604      	mov	r4, r0
 801e132:	f7ff fff3 	bl	801e11c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e136:	4620      	mov	r0, r4
 801e138:	f7ff ff72 	bl	801e020 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e13c:	4620      	mov	r0, r4
 801e13e:	f7ff fe73 	bl	801de28 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e142:	4620      	mov	r0, r4
 801e144:	f7ff fdf2 	bl	801dd2c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e148:	4620      	mov	r0, r4
 801e14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e14e:	f7ff bee9 	b.w	801df24 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801e152 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e152:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e156:	b087      	sub	sp, #28
 801e158:	788d      	ldrb	r5, [r1, #2]
 801e15a:	f891 9000 	ldrb.w	r9, [r1]
 801e15e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801e162:	9501      	str	r5, [sp, #4]
 801e164:	784d      	ldrb	r5, [r1, #1]
 801e166:	9203      	str	r2, [sp, #12]
 801e168:	9502      	str	r5, [sp, #8]
 801e16a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801e16e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801e172:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801e176:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801e17a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801e17e:	fb06 0708 	mla	r7, r6, r8, r0
 801e182:	2e00      	cmp	r6, #0
 801e184:	eb02 0a07 	add.w	sl, r2, r7
 801e188:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801e18c:	9d01      	ldr	r5, [sp, #4]
 801e18e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801e192:	ea45 0509 	orr.w	r5, r5, r9
 801e196:	9505      	str	r5, [sp, #20]
 801e198:	f2c0 80b2 	blt.w	801e300 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801e19c:	45b3      	cmp	fp, r6
 801e19e:	f340 80af 	ble.w	801e300 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801e1a2:	2800      	cmp	r0, #0
 801e1a4:	f2c0 80aa 	blt.w	801e2fc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801e1a8:	4580      	cmp	r8, r0
 801e1aa:	f340 80a7 	ble.w	801e2fc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801e1ae:	9a03      	ldr	r2, [sp, #12]
 801e1b0:	5dd7      	ldrb	r7, [r2, r7]
 801e1b2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e1b6:	441f      	add	r7, r3
 801e1b8:	1c42      	adds	r2, r0, #1
 801e1ba:	f100 80a4 	bmi.w	801e306 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e1be:	4590      	cmp	r8, r2
 801e1c0:	f340 80a1 	ble.w	801e306 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e1c4:	2c00      	cmp	r4, #0
 801e1c6:	f000 809e 	beq.w	801e306 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e1ca:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801e1ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e1d2:	441d      	add	r5, r3
 801e1d4:	3601      	adds	r6, #1
 801e1d6:	f100 809a 	bmi.w	801e30e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e1da:	45b3      	cmp	fp, r6
 801e1dc:	f340 8097 	ble.w	801e30e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e1e0:	f1bc 0f00 	cmp.w	ip, #0
 801e1e4:	f000 8093 	beq.w	801e30e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e1e8:	2800      	cmp	r0, #0
 801e1ea:	f2c0 808e 	blt.w	801e30a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801e1ee:	4580      	cmp	r8, r0
 801e1f0:	f340 808b 	ble.w	801e30a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801e1f4:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801e1f8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e1fc:	441e      	add	r6, r3
 801e1fe:	3001      	adds	r0, #1
 801e200:	f100 8088 	bmi.w	801e314 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e204:	4580      	cmp	r8, r0
 801e206:	f340 8085 	ble.w	801e314 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e20a:	2c00      	cmp	r4, #0
 801e20c:	f000 8082 	beq.w	801e314 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e210:	44d0      	add	r8, sl
 801e212:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e216:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e21a:	4413      	add	r3, r2
 801e21c:	b2a4      	uxth	r4, r4
 801e21e:	f895 a000 	ldrb.w	sl, [r5]
 801e222:	fa1f fc8c 	uxth.w	ip, ip
 801e226:	fb04 fb0c 	mul.w	fp, r4, ip
 801e22a:	0124      	lsls	r4, r4, #4
 801e22c:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801e230:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801e234:	eba4 040b 	sub.w	r4, r4, fp
 801e238:	fa1f f08c 	uxth.w	r0, ip
 801e23c:	b2a2      	uxth	r2, r4
 801e23e:	783c      	ldrb	r4, [r7, #0]
 801e240:	eba8 0800 	sub.w	r8, r8, r0
 801e244:	fa1f fc8e 	uxth.w	ip, lr
 801e248:	fb02 fa0a 	mul.w	sl, r2, sl
 801e24c:	ea6f 0e0e 	mvn.w	lr, lr
 801e250:	fa1f f888 	uxth.w	r8, r8
 801e254:	fa5f fe8e 	uxtb.w	lr, lr
 801e258:	fb08 aa04 	mla	sl, r8, r4, sl
 801e25c:	7834      	ldrb	r4, [r6, #0]
 801e25e:	fb19 f90e 	smulbb	r9, r9, lr
 801e262:	fb00 aa04 	mla	sl, r0, r4, sl
 801e266:	781c      	ldrb	r4, [r3, #0]
 801e268:	fb0b a404 	mla	r4, fp, r4, sl
 801e26c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e270:	fb04 990c 	mla	r9, r4, ip, r9
 801e274:	fa1f f989 	uxth.w	r9, r9
 801e278:	f109 0401 	add.w	r4, r9, #1
 801e27c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801e280:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e284:	f881 9000 	strb.w	r9, [r1]
 801e288:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e28c:	787c      	ldrb	r4, [r7, #1]
 801e28e:	fb02 f909 	mul.w	r9, r2, r9
 801e292:	fb08 9904 	mla	r9, r8, r4, r9
 801e296:	7874      	ldrb	r4, [r6, #1]
 801e298:	fb00 9904 	mla	r9, r0, r4, r9
 801e29c:	785c      	ldrb	r4, [r3, #1]
 801e29e:	fb0b 9404 	mla	r4, fp, r4, r9
 801e2a2:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801e2a6:	9c02      	ldr	r4, [sp, #8]
 801e2a8:	fb14 f90e 	smulbb	r9, r4, lr
 801e2ac:	fb0a 940c 	mla	r4, sl, ip, r9
 801e2b0:	b2a4      	uxth	r4, r4
 801e2b2:	f104 0901 	add.w	r9, r4, #1
 801e2b6:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801e2ba:	1224      	asrs	r4, r4, #8
 801e2bc:	704c      	strb	r4, [r1, #1]
 801e2be:	78ad      	ldrb	r5, [r5, #2]
 801e2c0:	78bc      	ldrb	r4, [r7, #2]
 801e2c2:	436a      	muls	r2, r5
 801e2c4:	789b      	ldrb	r3, [r3, #2]
 801e2c6:	fb08 2204 	mla	r2, r8, r4, r2
 801e2ca:	78b4      	ldrb	r4, [r6, #2]
 801e2cc:	fb00 2004 	mla	r0, r0, r4, r2
 801e2d0:	fb0b 0b03 	mla	fp, fp, r3, r0
 801e2d4:	9b01      	ldr	r3, [sp, #4]
 801e2d6:	fb13 fe0e 	smulbb	lr, r3, lr
 801e2da:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801e2de:	fb0b ec0c 	mla	ip, fp, ip, lr
 801e2e2:	fa1f fc8c 	uxth.w	ip, ip
 801e2e6:	f10c 0e01 	add.w	lr, ip, #1
 801e2ea:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801e2ee:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e2f2:	f881 c002 	strb.w	ip, [r1, #2]
 801e2f6:	b007      	add	sp, #28
 801e2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2fc:	af05      	add	r7, sp, #20
 801e2fe:	e75b      	b.n	801e1b8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801e300:	ad05      	add	r5, sp, #20
 801e302:	462f      	mov	r7, r5
 801e304:	e766      	b.n	801e1d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801e306:	ad05      	add	r5, sp, #20
 801e308:	e764      	b.n	801e1d4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801e30a:	ae05      	add	r6, sp, #20
 801e30c:	e777      	b.n	801e1fe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801e30e:	ab05      	add	r3, sp, #20
 801e310:	461e      	mov	r6, r3
 801e312:	e783      	b.n	801e21c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801e314:	ab05      	add	r3, sp, #20
 801e316:	e781      	b.n	801e21c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801e318 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e31c:	b093      	sub	sp, #76	; 0x4c
 801e31e:	9210      	str	r2, [sp, #64]	; 0x40
 801e320:	9309      	str	r3, [sp, #36]	; 0x24
 801e322:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e324:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801e328:	9011      	str	r0, [sp, #68]	; 0x44
 801e32a:	930e      	str	r3, [sp, #56]	; 0x38
 801e32c:	6850      	ldr	r0, [r2, #4]
 801e32e:	910d      	str	r1, [sp, #52]	; 0x34
 801e330:	6812      	ldr	r2, [r2, #0]
 801e332:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801e336:	fb00 1303 	mla	r3, r0, r3, r1
 801e33a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e33e:	18d3      	adds	r3, r2, r3
 801e340:	930a      	str	r3, [sp, #40]	; 0x28
 801e342:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	930c      	str	r3, [sp, #48]	; 0x30
 801e348:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e34a:	685c      	ldr	r4, [r3, #4]
 801e34c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e34e:	3404      	adds	r4, #4
 801e350:	43db      	mvns	r3, r3
 801e352:	b2db      	uxtb	r3, r3
 801e354:	930b      	str	r3, [sp, #44]	; 0x2c
 801e356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e358:	2b00      	cmp	r3, #0
 801e35a:	dc03      	bgt.n	801e364 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e35c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e35e:	2b00      	cmp	r3, #0
 801e360:	f340 8250 	ble.w	801e804 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801e364:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e366:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e36a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e36e:	1e48      	subs	r0, r1, #1
 801e370:	1e55      	subs	r5, r2, #1
 801e372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e374:	2b00      	cmp	r3, #0
 801e376:	f340 80ee 	ble.w	801e556 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801e37a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801e37c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e37e:	1436      	asrs	r6, r6, #16
 801e380:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e384:	d406      	bmi.n	801e394 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e386:	4286      	cmp	r6, r0
 801e388:	da04      	bge.n	801e394 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	db02      	blt.n	801e394 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e38e:	42ab      	cmp	r3, r5
 801e390:	f2c0 80e2 	blt.w	801e558 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e394:	3601      	adds	r6, #1
 801e396:	f100 80cf 	bmi.w	801e538 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e39a:	42b1      	cmp	r1, r6
 801e39c:	f2c0 80cc 	blt.w	801e538 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e3a0:	3301      	adds	r3, #1
 801e3a2:	f100 80c9 	bmi.w	801e538 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e3a6:	429a      	cmp	r2, r3
 801e3a8:	f2c0 80c6 	blt.w	801e538 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e3ac:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801e3b0:	f1bb 0f00 	cmp.w	fp, #0
 801e3b4:	f340 80f1 	ble.w	801e59a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801e3b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e3ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e3bc:	9824      	ldr	r0, [sp, #144]	; 0x90
 801e3be:	141d      	asrs	r5, r3, #16
 801e3c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e3c2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e3c6:	68c7      	ldr	r7, [r0, #12]
 801e3c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e3ca:	1418      	asrs	r0, r3, #16
 801e3cc:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801e3d0:	6892      	ldr	r2, [r2, #8]
 801e3d2:	f100 8137 	bmi.w	801e644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e3d6:	f102 3cff 	add.w	ip, r2, #4294967295
 801e3da:	4560      	cmp	r0, ip
 801e3dc:	f280 8132 	bge.w	801e644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e3e0:	2d00      	cmp	r5, #0
 801e3e2:	f2c0 812f 	blt.w	801e644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e3e6:	f107 3cff 	add.w	ip, r7, #4294967295
 801e3ea:	4565      	cmp	r5, ip
 801e3ec:	f280 812a 	bge.w	801e644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e3f0:	b212      	sxth	r2, r2
 801e3f2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e3f4:	fb05 0002 	mla	r0, r5, r2, r0
 801e3f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e3fa:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e3fe:	4405      	add	r5, r0
 801e400:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e404:	eb04 0e0c 	add.w	lr, r4, ip
 801e408:	f1b8 0f00 	cmp.w	r8, #0
 801e40c:	f000 810c 	beq.w	801e628 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801e410:	786f      	ldrb	r7, [r5, #1]
 801e412:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e416:	4427      	add	r7, r4
 801e418:	2900      	cmp	r1, #0
 801e41a:	f000 810d 	beq.w	801e638 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801e41e:	18a8      	adds	r0, r5, r2
 801e420:	5caa      	ldrb	r2, [r5, r2]
 801e422:	7840      	ldrb	r0, [r0, #1]
 801e424:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e428:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e42c:	4422      	add	r2, r4
 801e42e:	4420      	add	r0, r4
 801e430:	fa1f f388 	uxth.w	r3, r8
 801e434:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801e438:	b289      	uxth	r1, r1
 801e43a:	f897 c000 	ldrb.w	ip, [r7]
 801e43e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801e442:	fb03 f901 	mul.w	r9, r3, r1
 801e446:	011b      	lsls	r3, r3, #4
 801e448:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e44c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801e450:	eba3 0309 	sub.w	r3, r3, r9
 801e454:	b289      	uxth	r1, r1
 801e456:	b29b      	uxth	r3, r3
 801e458:	eba8 0801 	sub.w	r8, r8, r1
 801e45c:	fb03 fc0c 	mul.w	ip, r3, ip
 801e460:	fa1f f888 	uxth.w	r8, r8
 801e464:	930f      	str	r3, [sp, #60]	; 0x3c
 801e466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e468:	fb08 cc0a 	mla	ip, r8, sl, ip
 801e46c:	f892 a000 	ldrb.w	sl, [r2]
 801e470:	fb01 cc0a 	mla	ip, r1, sl, ip
 801e474:	f890 a000 	ldrb.w	sl, [r0]
 801e478:	fb09 cc0a 	mla	ip, r9, sl, ip
 801e47c:	f896 a000 	ldrb.w	sl, [r6]
 801e480:	fb1a fa03 	smulbb	sl, sl, r3
 801e484:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e48a:	fb0c ac05 	mla	ip, ip, r5, sl
 801e48e:	fa1f fc8c 	uxth.w	ip, ip
 801e492:	f10c 0a01 	add.w	sl, ip, #1
 801e496:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801e49a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e49e:	f886 a000 	strb.w	sl, [r6]
 801e4a2:	f897 c001 	ldrb.w	ip, [r7, #1]
 801e4a6:	f89e a001 	ldrb.w	sl, [lr, #1]
 801e4aa:	fb03 fc0c 	mul.w	ip, r3, ip
 801e4ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e4b0:	fb08 cc0a 	mla	ip, r8, sl, ip
 801e4b4:	f892 a001 	ldrb.w	sl, [r2, #1]
 801e4b8:	fb01 cc0a 	mla	ip, r1, sl, ip
 801e4bc:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e4c0:	fb09 cc0a 	mla	ip, r9, sl, ip
 801e4c4:	f896 a001 	ldrb.w	sl, [r6, #1]
 801e4c8:	fb1a fa03 	smulbb	sl, sl, r3
 801e4cc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e4d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e4d2:	fb0c ac05 	mla	ip, ip, r5, sl
 801e4d6:	fa1f fc8c 	uxth.w	ip, ip
 801e4da:	f10c 0a01 	add.w	sl, ip, #1
 801e4de:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801e4e2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e4e6:	f886 c001 	strb.w	ip, [r6, #1]
 801e4ea:	78bf      	ldrb	r7, [r7, #2]
 801e4ec:	f89e c002 	ldrb.w	ip, [lr, #2]
 801e4f0:	437b      	muls	r3, r7
 801e4f2:	fb08 330c 	mla	r3, r8, ip, r3
 801e4f6:	f892 c002 	ldrb.w	ip, [r2, #2]
 801e4fa:	7882      	ldrb	r2, [r0, #2]
 801e4fc:	fb01 310c 	mla	r1, r1, ip, r3
 801e500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e502:	fb09 1902 	mla	r9, r9, r2, r1
 801e506:	78b1      	ldrb	r1, [r6, #2]
 801e508:	fb11 f103 	smulbb	r1, r1, r3
 801e50c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e510:	fb09 1505 	mla	r5, r9, r5, r1
 801e514:	b2ad      	uxth	r5, r5
 801e516:	1c6b      	adds	r3, r5, #1
 801e518:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e51c:	122d      	asrs	r5, r5, #8
 801e51e:	70b5      	strb	r5, [r6, #2]
 801e520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e522:	3603      	adds	r6, #3
 801e524:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e526:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e52a:	4413      	add	r3, r2
 801e52c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e52e:	931d      	str	r3, [sp, #116]	; 0x74
 801e530:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e532:	4413      	add	r3, r2
 801e534:	931e      	str	r3, [sp, #120]	; 0x78
 801e536:	e73b      	b.n	801e3b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e538:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e53a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801e53c:	4433      	add	r3, r6
 801e53e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801e540:	931d      	str	r3, [sp, #116]	; 0x74
 801e542:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e544:	4433      	add	r3, r6
 801e546:	931e      	str	r3, [sp, #120]	; 0x78
 801e548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e54a:	3b01      	subs	r3, #1
 801e54c:	9309      	str	r3, [sp, #36]	; 0x24
 801e54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e550:	3303      	adds	r3, #3
 801e552:	930a      	str	r3, [sp, #40]	; 0x28
 801e554:	e70d      	b.n	801e372 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e556:	d028      	beq.n	801e5aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801e558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e55a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e55c:	3b01      	subs	r3, #1
 801e55e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801e560:	fb00 5003 	mla	r0, r0, r3, r5
 801e564:	1400      	asrs	r0, r0, #16
 801e566:	f53f af21 	bmi.w	801e3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e56a:	3901      	subs	r1, #1
 801e56c:	4288      	cmp	r0, r1
 801e56e:	f6bf af1d 	bge.w	801e3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e572:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e574:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e576:	fb01 0303 	mla	r3, r1, r3, r0
 801e57a:	141b      	asrs	r3, r3, #16
 801e57c:	f53f af16 	bmi.w	801e3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e580:	3a01      	subs	r2, #1
 801e582:	4293      	cmp	r3, r2
 801e584:	f6bf af12 	bge.w	801e3ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e58a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801e58e:	1cdf      	adds	r7, r3, #3
 801e590:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801e594:	f1b9 0f00 	cmp.w	r9, #0
 801e598:	dc73      	bgt.n	801e682 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801e59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e59c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e59e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e5a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5a6:	441a      	add	r2, r3
 801e5a8:	920a      	str	r2, [sp, #40]	; 0x28
 801e5aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	f340 8129 	ble.w	801e804 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801e5b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e5b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e5b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e5bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e5c0:	eef0 6a62 	vmov.f32	s13, s5
 801e5c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e5c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e5cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e5d0:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801e5d4:	eef0 6a43 	vmov.f32	s13, s6
 801e5d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e5dc:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801e5e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e5e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e5e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e5ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e5f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e5f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e5f8:	ee12 2a90 	vmov	r2, s5
 801e5fc:	eef0 2a47 	vmov.f32	s5, s14
 801e600:	fb92 f3f3 	sdiv	r3, r2, r3
 801e604:	ee13 2a10 	vmov	r2, s6
 801e608:	931f      	str	r3, [sp, #124]	; 0x7c
 801e60a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e60c:	eeb0 3a67 	vmov.f32	s6, s15
 801e610:	fb92 f3f3 	sdiv	r3, r2, r3
 801e614:	9320      	str	r3, [sp, #128]	; 0x80
 801e616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e618:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e61a:	3b01      	subs	r3, #1
 801e61c:	930d      	str	r3, [sp, #52]	; 0x34
 801e61e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e620:	bf08      	it	eq
 801e622:	4613      	moveq	r3, r2
 801e624:	9309      	str	r3, [sp, #36]	; 0x24
 801e626:	e696      	b.n	801e356 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e628:	b149      	cbz	r1, 801e63e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801e62a:	5caa      	ldrb	r2, [r5, r2]
 801e62c:	4670      	mov	r0, lr
 801e62e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e632:	4422      	add	r2, r4
 801e634:	4677      	mov	r7, lr
 801e636:	e6fb      	b.n	801e430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e638:	4670      	mov	r0, lr
 801e63a:	4672      	mov	r2, lr
 801e63c:	e6f8      	b.n	801e430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e63e:	4670      	mov	r0, lr
 801e640:	4672      	mov	r2, lr
 801e642:	e7f7      	b.n	801e634 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801e644:	f110 0c01 	adds.w	ip, r0, #1
 801e648:	f53f af6a 	bmi.w	801e520 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e64c:	4562      	cmp	r2, ip
 801e64e:	f6ff af67 	blt.w	801e520 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e652:	f115 0c01 	adds.w	ip, r5, #1
 801e656:	f53f af63 	bmi.w	801e520 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e65a:	4567      	cmp	r7, ip
 801e65c:	f6ff af60 	blt.w	801e520 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e662:	b23f      	sxth	r7, r7
 801e664:	b212      	sxth	r2, r2
 801e666:	9002      	str	r0, [sp, #8]
 801e668:	9701      	str	r7, [sp, #4]
 801e66a:	9200      	str	r2, [sp, #0]
 801e66c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e66e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e670:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801e674:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801e678:	4623      	mov	r3, r4
 801e67a:	4631      	mov	r1, r6
 801e67c:	f7ff fd69 	bl	801e152 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801e680:	e74e      	b.n	801e520 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801e682:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e684:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e686:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e68a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801e68c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801e68e:	1400      	asrs	r0, r0, #16
 801e690:	142d      	asrs	r5, r5, #16
 801e692:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e694:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e698:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e69c:	fb02 5000 	mla	r0, r2, r0, r5
 801e6a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e6a2:	f815 e000 	ldrb.w	lr, [r5, r0]
 801e6a6:	eb05 0c00 	add.w	ip, r5, r0
 801e6aa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e6ae:	eb04 060e 	add.w	r6, r4, lr
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	f000 8097 	beq.w	801e7e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801e6b8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801e6bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e6c0:	4425      	add	r5, r4
 801e6c2:	2900      	cmp	r1, #0
 801e6c4:	f000 8098 	beq.w	801e7f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801e6c8:	eb0c 0002 	add.w	r0, ip, r2
 801e6cc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e6d0:	7840      	ldrb	r0, [r0, #1]
 801e6d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e6d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e6da:	4422      	add	r2, r4
 801e6dc:	4420      	add	r0, r4
 801e6de:	b29b      	uxth	r3, r3
 801e6e0:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801e6e4:	b289      	uxth	r1, r1
 801e6e6:	f895 e000 	ldrb.w	lr, [r5]
 801e6ea:	3703      	adds	r7, #3
 801e6ec:	f109 39ff 	add.w	r9, r9, #4294967295
 801e6f0:	fb03 f801 	mul.w	r8, r3, r1
 801e6f4:	011b      	lsls	r3, r3, #4
 801e6f6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801e6fa:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801e6fe:	eba3 0308 	sub.w	r3, r3, r8
 801e702:	b289      	uxth	r1, r1
 801e704:	b29b      	uxth	r3, r3
 801e706:	ebac 0c01 	sub.w	ip, ip, r1
 801e70a:	fb03 fe0e 	mul.w	lr, r3, lr
 801e70e:	fa1f fc8c 	uxth.w	ip, ip
 801e712:	930f      	str	r3, [sp, #60]	; 0x3c
 801e714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e716:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e71a:	f892 b000 	ldrb.w	fp, [r2]
 801e71e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e722:	f890 b000 	ldrb.w	fp, [r0]
 801e726:	fb08 ee0b 	mla	lr, r8, fp, lr
 801e72a:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801e72e:	fb1b fb03 	smulbb	fp, fp, r3
 801e732:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e736:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e738:	fb0e be0a 	mla	lr, lr, sl, fp
 801e73c:	fa1f fe8e 	uxth.w	lr, lr
 801e740:	f10e 0b01 	add.w	fp, lr, #1
 801e744:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e748:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e74c:	f807 ec06 	strb.w	lr, [r7, #-6]
 801e750:	f895 e001 	ldrb.w	lr, [r5, #1]
 801e754:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e758:	fb03 fe0e 	mul.w	lr, r3, lr
 801e75c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e75e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e762:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e766:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e76a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e76e:	fb08 ee0b 	mla	lr, r8, fp, lr
 801e772:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801e776:	fb1b fb03 	smulbb	fp, fp, r3
 801e77a:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e77e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e780:	fb0e be0a 	mla	lr, lr, sl, fp
 801e784:	fa1f fe8e 	uxth.w	lr, lr
 801e788:	f10e 0b01 	add.w	fp, lr, #1
 801e78c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e790:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e794:	f807 ec05 	strb.w	lr, [r7, #-5]
 801e798:	78ad      	ldrb	r5, [r5, #2]
 801e79a:	78b6      	ldrb	r6, [r6, #2]
 801e79c:	436b      	muls	r3, r5
 801e79e:	7895      	ldrb	r5, [r2, #2]
 801e7a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e7a2:	fb0c 3306 	mla	r3, ip, r6, r3
 801e7a6:	fb01 3305 	mla	r3, r1, r5, r3
 801e7aa:	7885      	ldrb	r5, [r0, #2]
 801e7ac:	fb08 3805 	mla	r8, r8, r5, r3
 801e7b0:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801e7b4:	fb13 f302 	smulbb	r3, r3, r2
 801e7b8:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e7bc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e7be:	fb08 380a 	mla	r8, r8, sl, r3
 801e7c2:	fa1f f888 	uxth.w	r8, r8
 801e7c6:	f108 0301 	add.w	r3, r8, #1
 801e7ca:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801e7ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e7d0:	4413      	add	r3, r2
 801e7d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e7d4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e7d8:	931d      	str	r3, [sp, #116]	; 0x74
 801e7da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e7dc:	f807 8c04 	strb.w	r8, [r7, #-4]
 801e7e0:	4413      	add	r3, r2
 801e7e2:	931e      	str	r3, [sp, #120]	; 0x78
 801e7e4:	e6d6      	b.n	801e594 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e7e6:	b151      	cbz	r1, 801e7fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801e7e8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e7ec:	4630      	mov	r0, r6
 801e7ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e7f2:	4422      	add	r2, r4
 801e7f4:	4635      	mov	r5, r6
 801e7f6:	e772      	b.n	801e6de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801e7f8:	4630      	mov	r0, r6
 801e7fa:	4632      	mov	r2, r6
 801e7fc:	e76f      	b.n	801e6de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801e7fe:	4630      	mov	r0, r6
 801e800:	4632      	mov	r2, r6
 801e802:	e7f7      	b.n	801e7f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e804:	b013      	add	sp, #76	; 0x4c
 801e806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e80a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801e80a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801e80e:	784c      	ldrb	r4, [r1, #1]
 801e810:	f891 a002 	ldrb.w	sl, [r1, #2]
 801e814:	0224      	lsls	r4, r4, #8
 801e816:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801e81a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801e81e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801e822:	f891 a000 	ldrb.w	sl, [r1]
 801e826:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801e82a:	ea44 040a 	orr.w	r4, r4, sl
 801e82e:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801e832:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801e836:	9401      	str	r4, [sp, #4]
 801e838:	fb05 c70e 	mla	r7, r5, lr, ip
 801e83c:	2d00      	cmp	r5, #0
 801e83e:	eb02 0807 	add.w	r8, r2, r7
 801e842:	db72      	blt.n	801e92a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801e844:	45a9      	cmp	r9, r5
 801e846:	dd70      	ble.n	801e92a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801e848:	f1bc 0f00 	cmp.w	ip, #0
 801e84c:	db6b      	blt.n	801e926 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801e84e:	45e6      	cmp	lr, ip
 801e850:	dd69      	ble.n	801e926 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801e852:	5dd7      	ldrb	r7, [r2, r7]
 801e854:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e858:	441f      	add	r7, r3
 801e85a:	f11c 0201 	adds.w	r2, ip, #1
 801e85e:	d467      	bmi.n	801e930 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801e860:	4596      	cmp	lr, r2
 801e862:	dd65      	ble.n	801e930 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801e864:	2800      	cmp	r0, #0
 801e866:	d063      	beq.n	801e930 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801e868:	f898 4001 	ldrb.w	r4, [r8, #1]
 801e86c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e870:	441c      	add	r4, r3
 801e872:	3501      	adds	r5, #1
 801e874:	d460      	bmi.n	801e938 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801e876:	45a9      	cmp	r9, r5
 801e878:	dd5e      	ble.n	801e938 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801e87a:	2e00      	cmp	r6, #0
 801e87c:	d05c      	beq.n	801e938 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801e87e:	f1bc 0f00 	cmp.w	ip, #0
 801e882:	db57      	blt.n	801e934 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801e884:	45e6      	cmp	lr, ip
 801e886:	dd55      	ble.n	801e934 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801e888:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e88c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e890:	441d      	add	r5, r3
 801e892:	f11c 0201 	adds.w	r2, ip, #1
 801e896:	d452      	bmi.n	801e93e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801e898:	4596      	cmp	lr, r2
 801e89a:	dd50      	ble.n	801e93e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801e89c:	2800      	cmp	r0, #0
 801e89e:	d04e      	beq.n	801e93e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801e8a0:	44c6      	add	lr, r8
 801e8a2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e8a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e8aa:	4413      	add	r3, r2
 801e8ac:	b280      	uxth	r0, r0
 801e8ae:	f897 8000 	ldrb.w	r8, [r7]
 801e8b2:	b2b2      	uxth	r2, r6
 801e8b4:	fb00 f602 	mul.w	r6, r0, r2
 801e8b8:	0100      	lsls	r0, r0, #4
 801e8ba:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801e8be:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801e8c2:	1b80      	subs	r0, r0, r6
 801e8c4:	fa1f fc82 	uxth.w	ip, r2
 801e8c8:	b282      	uxth	r2, r0
 801e8ca:	7820      	ldrb	r0, [r4, #0]
 801e8cc:	ebae 0e0c 	sub.w	lr, lr, ip
 801e8d0:	4350      	muls	r0, r2
 801e8d2:	fa1f fe8e 	uxth.w	lr, lr
 801e8d6:	fb0e 0808 	mla	r8, lr, r8, r0
 801e8da:	7828      	ldrb	r0, [r5, #0]
 801e8dc:	fb0c 8800 	mla	r8, ip, r0, r8
 801e8e0:	7818      	ldrb	r0, [r3, #0]
 801e8e2:	fb06 8000 	mla	r0, r6, r0, r8
 801e8e6:	1200      	asrs	r0, r0, #8
 801e8e8:	7008      	strb	r0, [r1, #0]
 801e8ea:	7860      	ldrb	r0, [r4, #1]
 801e8ec:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e8f0:	4350      	muls	r0, r2
 801e8f2:	fb0e 0808 	mla	r8, lr, r8, r0
 801e8f6:	7868      	ldrb	r0, [r5, #1]
 801e8f8:	fb0c 8800 	mla	r8, ip, r0, r8
 801e8fc:	7858      	ldrb	r0, [r3, #1]
 801e8fe:	fb06 8000 	mla	r0, r6, r0, r8
 801e902:	1200      	asrs	r0, r0, #8
 801e904:	7048      	strb	r0, [r1, #1]
 801e906:	78a0      	ldrb	r0, [r4, #2]
 801e908:	78bf      	ldrb	r7, [r7, #2]
 801e90a:	4350      	muls	r0, r2
 801e90c:	78aa      	ldrb	r2, [r5, #2]
 801e90e:	fb0e 0007 	mla	r0, lr, r7, r0
 801e912:	fb0c 0c02 	mla	ip, ip, r2, r0
 801e916:	789a      	ldrb	r2, [r3, #2]
 801e918:	fb06 c202 	mla	r2, r6, r2, ip
 801e91c:	1212      	asrs	r2, r2, #8
 801e91e:	708a      	strb	r2, [r1, #2]
 801e920:	b002      	add	sp, #8
 801e922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e926:	af01      	add	r7, sp, #4
 801e928:	e797      	b.n	801e85a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801e92a:	ac01      	add	r4, sp, #4
 801e92c:	4627      	mov	r7, r4
 801e92e:	e7a0      	b.n	801e872 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e930:	ac01      	add	r4, sp, #4
 801e932:	e79e      	b.n	801e872 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e934:	ad01      	add	r5, sp, #4
 801e936:	e7ac      	b.n	801e892 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801e938:	ab01      	add	r3, sp, #4
 801e93a:	461d      	mov	r5, r3
 801e93c:	e7b6      	b.n	801e8ac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801e93e:	ab01      	add	r3, sp, #4
 801e940:	e7b4      	b.n	801e8ac <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801e942 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e942:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e946:	b08d      	sub	sp, #52	; 0x34
 801e948:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e94c:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801e950:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e952:	900b      	str	r0, [sp, #44]	; 0x2c
 801e954:	9306      	str	r3, [sp, #24]
 801e956:	6850      	ldr	r0, [r2, #4]
 801e958:	6812      	ldr	r2, [r2, #0]
 801e95a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e95c:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801e960:	fb00 1303 	mla	r3, r0, r3, r1
 801e964:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e968:	18d3      	adds	r3, r2, r3
 801e96a:	9307      	str	r3, [sp, #28]
 801e96c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	9308      	str	r3, [sp, #32]
 801e972:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e974:	685d      	ldr	r5, [r3, #4]
 801e976:	3504      	adds	r5, #4
 801e978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	dc03      	bgt.n	801e986 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e980:	2b00      	cmp	r3, #0
 801e982:	f340 81e6 	ble.w	801ed52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801e986:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e988:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e98c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e990:	1e48      	subs	r0, r1, #1
 801e992:	1e56      	subs	r6, r2, #1
 801e994:	9b06      	ldr	r3, [sp, #24]
 801e996:	2b00      	cmp	r3, #0
 801e998:	f340 80bd 	ble.w	801eb16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e99c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e99e:	1427      	asrs	r7, r4, #16
 801e9a0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e9a4:	d406      	bmi.n	801e9b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e9a6:	4287      	cmp	r7, r0
 801e9a8:	da04      	bge.n	801e9b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	db02      	blt.n	801e9b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e9ae:	42b3      	cmp	r3, r6
 801e9b0:	f2c0 80b2 	blt.w	801eb18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801e9b4:	3701      	adds	r7, #1
 801e9b6:	f100 80a1 	bmi.w	801eafc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e9ba:	42b9      	cmp	r1, r7
 801e9bc:	f2c0 809e 	blt.w	801eafc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e9c0:	3301      	adds	r3, #1
 801e9c2:	f100 809b 	bmi.w	801eafc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e9c6:	429a      	cmp	r2, r3
 801e9c8:	f2c0 8098 	blt.w	801eafc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e9cc:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801e9d0:	f1bb 0f00 	cmp.w	fp, #0
 801e9d4:	f340 80bf 	ble.w	801eb56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e9d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e9da:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e9dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e9de:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e9e2:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801e9e6:	1420      	asrs	r0, r4, #16
 801e9e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e9ea:	ea4f 4723 	mov.w	r7, r3, asr #16
 801e9ee:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801e9f2:	6892      	ldr	r2, [r2, #8]
 801e9f4:	f100 8103 	bmi.w	801ebfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801e9f8:	f102 3eff 	add.w	lr, r2, #4294967295
 801e9fc:	4570      	cmp	r0, lr
 801e9fe:	f280 80fe 	bge.w	801ebfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ea02:	2f00      	cmp	r7, #0
 801ea04:	f2c0 80fb 	blt.w	801ebfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ea08:	f10c 3eff 	add.w	lr, ip, #4294967295
 801ea0c:	4577      	cmp	r7, lr
 801ea0e:	f280 80f6 	bge.w	801ebfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ea12:	b212      	sxth	r2, r2
 801ea14:	fb07 0002 	mla	r0, r7, r2, r0
 801ea18:	9f08      	ldr	r7, [sp, #32]
 801ea1a:	f817 8000 	ldrb.w	r8, [r7, r0]
 801ea1e:	eb07 0e00 	add.w	lr, r7, r0
 801ea22:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ea26:	eb05 0c08 	add.w	ip, r5, r8
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	f000 80d8 	beq.w	801ebe0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ea30:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801ea34:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ea38:	442f      	add	r7, r5
 801ea3a:	2900      	cmp	r1, #0
 801ea3c:	f000 80d9 	beq.w	801ebf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ea40:	eb0e 0002 	add.w	r0, lr, r2
 801ea44:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801ea48:	7840      	ldrb	r0, [r0, #1]
 801ea4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ea4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea52:	442a      	add	r2, r5
 801ea54:	4428      	add	r0, r5
 801ea56:	b29b      	uxth	r3, r3
 801ea58:	f815 a008 	ldrb.w	sl, [r5, r8]
 801ea5c:	b289      	uxth	r1, r1
 801ea5e:	f897 8000 	ldrb.w	r8, [r7]
 801ea62:	fb03 f901 	mul.w	r9, r3, r1
 801ea66:	011b      	lsls	r3, r3, #4
 801ea68:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ea6c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ea70:	eba3 0309 	sub.w	r3, r3, r9
 801ea74:	b289      	uxth	r1, r1
 801ea76:	b29b      	uxth	r3, r3
 801ea78:	ebae 0e01 	sub.w	lr, lr, r1
 801ea7c:	fb03 f808 	mul.w	r8, r3, r8
 801ea80:	fa1f fe8e 	uxth.w	lr, lr
 801ea84:	fb0e 880a 	mla	r8, lr, sl, r8
 801ea88:	f892 a000 	ldrb.w	sl, [r2]
 801ea8c:	fb01 880a 	mla	r8, r1, sl, r8
 801ea90:	f890 a000 	ldrb.w	sl, [r0]
 801ea94:	fb09 880a 	mla	r8, r9, sl, r8
 801ea98:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ea9c:	f886 8000 	strb.w	r8, [r6]
 801eaa0:	f897 8001 	ldrb.w	r8, [r7, #1]
 801eaa4:	f89c a001 	ldrb.w	sl, [ip, #1]
 801eaa8:	fb03 f808 	mul.w	r8, r3, r8
 801eaac:	fb0e 880a 	mla	r8, lr, sl, r8
 801eab0:	f892 a001 	ldrb.w	sl, [r2, #1]
 801eab4:	fb01 880a 	mla	r8, r1, sl, r8
 801eab8:	f890 a001 	ldrb.w	sl, [r0, #1]
 801eabc:	fb09 880a 	mla	r8, r9, sl, r8
 801eac0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eac4:	f886 8001 	strb.w	r8, [r6, #1]
 801eac8:	78bf      	ldrb	r7, [r7, #2]
 801eaca:	f89c c002 	ldrb.w	ip, [ip, #2]
 801eace:	437b      	muls	r3, r7
 801ead0:	7892      	ldrb	r2, [r2, #2]
 801ead2:	fb0e 330c 	mla	r3, lr, ip, r3
 801ead6:	fb01 3102 	mla	r1, r1, r2, r3
 801eada:	7882      	ldrb	r2, [r0, #2]
 801eadc:	fb09 1902 	mla	r9, r9, r2, r1
 801eae0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eae4:	f886 9002 	strb.w	r9, [r6, #2]
 801eae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801eaea:	3603      	adds	r6, #3
 801eaec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801eaee:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eaf2:	441c      	add	r4, r3
 801eaf4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801eaf6:	4413      	add	r3, r2
 801eaf8:	9318      	str	r3, [sp, #96]	; 0x60
 801eafa:	e769      	b.n	801e9d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801eafc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801eafe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801eb00:	441c      	add	r4, r3
 801eb02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801eb04:	443b      	add	r3, r7
 801eb06:	9318      	str	r3, [sp, #96]	; 0x60
 801eb08:	9b06      	ldr	r3, [sp, #24]
 801eb0a:	3b01      	subs	r3, #1
 801eb0c:	9306      	str	r3, [sp, #24]
 801eb0e:	9b07      	ldr	r3, [sp, #28]
 801eb10:	3303      	adds	r3, #3
 801eb12:	9307      	str	r3, [sp, #28]
 801eb14:	e73e      	b.n	801e994 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801eb16:	d026      	beq.n	801eb66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801eb18:	9b06      	ldr	r3, [sp, #24]
 801eb1a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801eb1c:	3b01      	subs	r3, #1
 801eb1e:	fb00 4003 	mla	r0, r0, r3, r4
 801eb22:	1400      	asrs	r0, r0, #16
 801eb24:	f53f af52 	bmi.w	801e9cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eb28:	3901      	subs	r1, #1
 801eb2a:	4288      	cmp	r0, r1
 801eb2c:	f6bf af4e 	bge.w	801e9cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eb30:	991a      	ldr	r1, [sp, #104]	; 0x68
 801eb32:	9818      	ldr	r0, [sp, #96]	; 0x60
 801eb34:	fb01 0303 	mla	r3, r1, r3, r0
 801eb38:	141b      	asrs	r3, r3, #16
 801eb3a:	f53f af47 	bmi.w	801e9cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eb3e:	3a01      	subs	r2, #1
 801eb40:	4293      	cmp	r3, r2
 801eb42:	f6bf af43 	bge.w	801e9cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801eb46:	9b07      	ldr	r3, [sp, #28]
 801eb48:	f8dd a018 	ldr.w	sl, [sp, #24]
 801eb4c:	f103 0803 	add.w	r8, r3, #3
 801eb50:	f1ba 0f00 	cmp.w	sl, #0
 801eb54:	dc71      	bgt.n	801ec3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801eb56:	9b06      	ldr	r3, [sp, #24]
 801eb58:	9a07      	ldr	r2, [sp, #28]
 801eb5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb62:	441a      	add	r2, r3
 801eb64:	9207      	str	r2, [sp, #28]
 801eb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb68:	2b00      	cmp	r3, #0
 801eb6a:	f340 80f2 	ble.w	801ed52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801eb6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb72:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801eb74:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb78:	eeb0 6a62 	vmov.f32	s12, s5
 801eb7c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb80:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb84:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb88:	ee16 4a10 	vmov	r4, s12
 801eb8c:	eeb0 6a43 	vmov.f32	s12, s6
 801eb90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb94:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801eb98:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eba0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eba4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eba8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ebac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ebb0:	ee12 2a90 	vmov	r2, s5
 801ebb4:	eef0 2a47 	vmov.f32	s5, s14
 801ebb8:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebbc:	ee13 2a10 	vmov	r2, s6
 801ebc0:	9319      	str	r3, [sp, #100]	; 0x64
 801ebc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ebc4:	eeb0 3a67 	vmov.f32	s6, s15
 801ebc8:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebcc:	931a      	str	r3, [sp, #104]	; 0x68
 801ebce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ebd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ebd2:	3b01      	subs	r3, #1
 801ebd4:	9309      	str	r3, [sp, #36]	; 0x24
 801ebd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ebd8:	bf08      	it	eq
 801ebda:	4613      	moveq	r3, r2
 801ebdc:	9306      	str	r3, [sp, #24]
 801ebde:	e6cb      	b.n	801e978 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ebe0:	b151      	cbz	r1, 801ebf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ebe2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801ebe6:	4660      	mov	r0, ip
 801ebe8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ebec:	442a      	add	r2, r5
 801ebee:	4667      	mov	r7, ip
 801ebf0:	e731      	b.n	801ea56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ebf2:	4660      	mov	r0, ip
 801ebf4:	4662      	mov	r2, ip
 801ebf6:	e72e      	b.n	801ea56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801ebf8:	4660      	mov	r0, ip
 801ebfa:	4662      	mov	r2, ip
 801ebfc:	e7f7      	b.n	801ebee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801ebfe:	f110 0e01 	adds.w	lr, r0, #1
 801ec02:	f53f af71 	bmi.w	801eae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ec06:	4572      	cmp	r2, lr
 801ec08:	f6ff af6e 	blt.w	801eae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ec0c:	f117 0e01 	adds.w	lr, r7, #1
 801ec10:	f53f af6a 	bmi.w	801eae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ec14:	45f4      	cmp	ip, lr
 801ec16:	f6ff af67 	blt.w	801eae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ec1a:	b212      	sxth	r2, r2
 801ec1c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801ec20:	fa0f f38c 	sxth.w	r3, ip
 801ec24:	9200      	str	r2, [sp, #0]
 801ec26:	4631      	mov	r1, r6
 801ec28:	9a08      	ldr	r2, [sp, #32]
 801ec2a:	9301      	str	r3, [sp, #4]
 801ec2c:	462b      	mov	r3, r5
 801ec2e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801ec32:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ec34:	f7ff fde9 	bl	801e80a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801ec38:	e756      	b.n	801eae8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ec3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ec3c:	1426      	asrs	r6, r4, #16
 801ec3e:	9818      	ldr	r0, [sp, #96]	; 0x60
 801ec40:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ec44:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ec48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ec4a:	1400      	asrs	r0, r0, #16
 801ec4c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ec50:	fb02 6000 	mla	r0, r2, r0, r6
 801ec54:	9e08      	ldr	r6, [sp, #32]
 801ec56:	f816 e000 	ldrb.w	lr, [r6, r0]
 801ec5a:	eb06 0c00 	add.w	ip, r6, r0
 801ec5e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ec62:	eb05 070e 	add.w	r7, r5, lr
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d064      	beq.n	801ed34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801ec6a:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801ec6e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ec72:	442e      	add	r6, r5
 801ec74:	2900      	cmp	r1, #0
 801ec76:	d066      	beq.n	801ed46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801ec78:	eb0c 0002 	add.w	r0, ip, r2
 801ec7c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ec80:	7840      	ldrb	r0, [r0, #1]
 801ec82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ec8a:	442a      	add	r2, r5
 801ec8c:	4428      	add	r0, r5
 801ec8e:	b29b      	uxth	r3, r3
 801ec90:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801ec94:	b289      	uxth	r1, r1
 801ec96:	f896 e000 	ldrb.w	lr, [r6]
 801ec9a:	f108 0803 	add.w	r8, r8, #3
 801ec9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eca2:	fb03 f901 	mul.w	r9, r3, r1
 801eca6:	011b      	lsls	r3, r3, #4
 801eca8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ecac:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ecb0:	eba3 0309 	sub.w	r3, r3, r9
 801ecb4:	b289      	uxth	r1, r1
 801ecb6:	b29b      	uxth	r3, r3
 801ecb8:	ebac 0c01 	sub.w	ip, ip, r1
 801ecbc:	fb03 fe0e 	mul.w	lr, r3, lr
 801ecc0:	fa1f fc8c 	uxth.w	ip, ip
 801ecc4:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ecc8:	f892 b000 	ldrb.w	fp, [r2]
 801eccc:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ecd0:	f890 b000 	ldrb.w	fp, [r0]
 801ecd4:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ecd8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ecdc:	f808 ec06 	strb.w	lr, [r8, #-6]
 801ece0:	f896 e001 	ldrb.w	lr, [r6, #1]
 801ece4:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ece8:	fb03 fe0e 	mul.w	lr, r3, lr
 801ecec:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ecf0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ecf4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ecf8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ecfc:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ed00:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ed04:	f808 ec05 	strb.w	lr, [r8, #-5]
 801ed08:	78b6      	ldrb	r6, [r6, #2]
 801ed0a:	78bf      	ldrb	r7, [r7, #2]
 801ed0c:	4373      	muls	r3, r6
 801ed0e:	7896      	ldrb	r6, [r2, #2]
 801ed10:	7882      	ldrb	r2, [r0, #2]
 801ed12:	fb0c 3307 	mla	r3, ip, r7, r3
 801ed16:	fb01 3306 	mla	r3, r1, r6, r3
 801ed1a:	fb09 3902 	mla	r9, r9, r2, r3
 801ed1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ed20:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ed22:	441c      	add	r4, r3
 801ed24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ed26:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ed2a:	4413      	add	r3, r2
 801ed2c:	f808 9c04 	strb.w	r9, [r8, #-4]
 801ed30:	9318      	str	r3, [sp, #96]	; 0x60
 801ed32:	e70d      	b.n	801eb50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801ed34:	b151      	cbz	r1, 801ed4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801ed36:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ed3a:	4638      	mov	r0, r7
 801ed3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed40:	442a      	add	r2, r5
 801ed42:	463e      	mov	r6, r7
 801ed44:	e7a3      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801ed46:	4638      	mov	r0, r7
 801ed48:	463a      	mov	r2, r7
 801ed4a:	e7a0      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801ed4c:	4638      	mov	r0, r7
 801ed4e:	463a      	mov	r2, r7
 801ed50:	e7f7      	b.n	801ed42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801ed52:	b00d      	add	sp, #52	; 0x34
 801ed54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801ed58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed5c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801ed60:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801ed64:	2d00      	cmp	r5, #0
 801ed66:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801ed6a:	fb05 700c 	mla	r0, r5, ip, r7
 801ed6e:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801ed72:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801ed76:	eb02 0800 	add.w	r8, r2, r0
 801ed7a:	f2c0 8118 	blt.w	801efae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801ed7e:	45a9      	cmp	r9, r5
 801ed80:	f340 8115 	ble.w	801efae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801ed84:	2f00      	cmp	r7, #0
 801ed86:	f2c0 8110 	blt.w	801efaa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801ed8a:	45bc      	cmp	ip, r7
 801ed8c:	f340 810d 	ble.w	801efaa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801ed90:	5c12      	ldrb	r2, [r2, r0]
 801ed92:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ed96:	1c7a      	adds	r2, r7, #1
 801ed98:	f100 810c 	bmi.w	801efb4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801ed9c:	4594      	cmp	ip, r2
 801ed9e:	f340 8109 	ble.w	801efb4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801eda2:	2c00      	cmp	r4, #0
 801eda4:	f000 8108 	beq.w	801efb8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801eda8:	f898 2001 	ldrb.w	r2, [r8, #1]
 801edac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801edb0:	3501      	adds	r5, #1
 801edb2:	f100 8105 	bmi.w	801efc0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801edb6:	45a9      	cmp	r9, r5
 801edb8:	f340 8102 	ble.w	801efc0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801edbc:	f1be 0f00 	cmp.w	lr, #0
 801edc0:	f000 8101 	beq.w	801efc6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801edc4:	2f00      	cmp	r7, #0
 801edc6:	f2c0 80f9 	blt.w	801efbc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801edca:	45bc      	cmp	ip, r7
 801edcc:	f340 80f6 	ble.w	801efbc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801edd0:	f818 200c 	ldrb.w	r2, [r8, ip]
 801edd4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801edd8:	3701      	adds	r7, #1
 801edda:	f100 80f7 	bmi.w	801efcc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801edde:	45bc      	cmp	ip, r7
 801ede0:	f340 80f4 	ble.w	801efcc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801ede4:	2c00      	cmp	r4, #0
 801ede6:	f000 80f3 	beq.w	801efd0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801edea:	44c4      	add	ip, r8
 801edec:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801edf0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801edf4:	fa1f fc84 	uxth.w	ip, r4
 801edf8:	fa1f f48e 	uxth.w	r4, lr
 801edfc:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801ee00:	fb04 fe0c 	mul.w	lr, r4, ip
 801ee04:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ee08:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801ee0c:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801ee10:	ebac 070e 	sub.w	r7, ip, lr
 801ee14:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ee18:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801ee1c:	b2a4      	uxth	r4, r4
 801ee1e:	b2bf      	uxth	r7, r7
 801ee20:	1b1b      	subs	r3, r3, r4
 801ee22:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801ee26:	fb07 fc0a 	mul.w	ip, r7, sl
 801ee2a:	b29b      	uxth	r3, r3
 801ee2c:	fb03 cc0b 	mla	ip, r3, fp, ip
 801ee30:	9300      	str	r3, [sp, #0]
 801ee32:	fb04 cc09 	mla	ip, r4, r9, ip
 801ee36:	fb0e cc08 	mla	ip, lr, r8, ip
 801ee3a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ee3e:	9301      	str	r3, [sp, #4]
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	f000 80af 	beq.w	801efa4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801ee46:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801ee4a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ee4e:	fb0b fc0c 	mul.w	ip, fp, ip
 801ee52:	fb0b f606 	mul.w	r6, fp, r6
 801ee56:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ee5a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ee5e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801ee62:	44dc      	add	ip, fp
 801ee64:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801ee68:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ee6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee70:	fb0a fb0b 	mul.w	fp, sl, fp
 801ee74:	fb0a fa00 	mul.w	sl, sl, r0
 801ee78:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801ee7c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ee80:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801ee84:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ee88:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ee8c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ee90:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801ee94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee98:	0a36      	lsrs	r6, r6, #8
 801ee9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee9e:	44dc      	add	ip, fp
 801eea0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801eea4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801eea8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801eeac:	fb09 fb0b 	mul.w	fp, r9, fp
 801eeb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eeb4:	fb09 f905 	mul.w	r9, r9, r5
 801eeb8:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801eebc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eec0:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801eec4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801eec8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801eecc:	fb0c fc07 	mul.w	ip, ip, r7
 801eed0:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801eed4:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801eed8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801eedc:	4458      	add	r0, fp
 801eede:	fb08 f505 	mul.w	r5, r8, r5
 801eee2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eee6:	fb08 f802 	mul.w	r8, r8, r2
 801eeea:	0a00      	lsrs	r0, r0, #8
 801eeec:	0a2a      	lsrs	r2, r5, #8
 801eeee:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801eef2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801eef6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801eefa:	4415      	add	r5, r2
 801eefc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801ef00:	0a2d      	lsrs	r5, r5, #8
 801ef02:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ef06:	9a00      	ldr	r2, [sp, #0]
 801ef08:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ef0c:	fb03 cc02 	mla	ip, r3, r2, ip
 801ef10:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ef14:	9b01      	ldr	r3, [sp, #4]
 801ef16:	fb05 c50e 	mla	r5, r5, lr, ip
 801ef1a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801ef1e:	fb00 5004 	mla	r0, r0, r4, r5
 801ef22:	0a00      	lsrs	r0, r0, #8
 801ef24:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801ef28:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801ef2c:	4378      	muls	r0, r7
 801ef2e:	fb02 0006 	mla	r0, r2, r6, r0
 801ef32:	fb0e 0e08 	mla	lr, lr, r8, r0
 801ef36:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801ef3a:	fb04 e000 	mla	r0, r4, r0, lr
 801ef3e:	0a00      	lsrs	r0, r0, #8
 801ef40:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ef44:	4328      	orrs	r0, r5
 801ef46:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801ef4a:	b2ad      	uxth	r5, r5
 801ef4c:	b2c4      	uxtb	r4, r0
 801ef4e:	436b      	muls	r3, r5
 801ef50:	fb14 f405 	smulbb	r4, r4, r5
 801ef54:	1c5a      	adds	r2, r3, #1
 801ef56:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ef5a:	780b      	ldrb	r3, [r1, #0]
 801ef5c:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801ef60:	b2d2      	uxtb	r2, r2
 801ef62:	fb03 4302 	mla	r3, r3, r2, r4
 801ef66:	b29b      	uxth	r3, r3
 801ef68:	1c5c      	adds	r4, r3, #1
 801ef6a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ef6e:	784c      	ldrb	r4, [r1, #1]
 801ef70:	fb14 f402 	smulbb	r4, r4, r2
 801ef74:	121b      	asrs	r3, r3, #8
 801ef76:	700b      	strb	r3, [r1, #0]
 801ef78:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801ef7c:	fb03 4305 	mla	r3, r3, r5, r4
 801ef80:	b29b      	uxth	r3, r3
 801ef82:	1c5c      	adds	r4, r3, #1
 801ef84:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ef88:	0c04      	lsrs	r4, r0, #16
 801ef8a:	7888      	ldrb	r0, [r1, #2]
 801ef8c:	121b      	asrs	r3, r3, #8
 801ef8e:	fb10 f002 	smulbb	r0, r0, r2
 801ef92:	704b      	strb	r3, [r1, #1]
 801ef94:	fb04 0005 	mla	r0, r4, r5, r0
 801ef98:	b280      	uxth	r0, r0
 801ef9a:	1c43      	adds	r3, r0, #1
 801ef9c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801efa0:	1200      	asrs	r0, r0, #8
 801efa2:	7088      	strb	r0, [r1, #2]
 801efa4:	b003      	add	sp, #12
 801efa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efaa:	2600      	movs	r6, #0
 801efac:	e6f3      	b.n	801ed96 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801efae:	2000      	movs	r0, #0
 801efb0:	4606      	mov	r6, r0
 801efb2:	e6fd      	b.n	801edb0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801efb4:	2000      	movs	r0, #0
 801efb6:	e6fb      	b.n	801edb0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801efb8:	4620      	mov	r0, r4
 801efba:	e6f9      	b.n	801edb0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801efbc:	2500      	movs	r5, #0
 801efbe:	e70b      	b.n	801edd8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801efc0:	2200      	movs	r2, #0
 801efc2:	4615      	mov	r5, r2
 801efc4:	e716      	b.n	801edf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801efc6:	4672      	mov	r2, lr
 801efc8:	4675      	mov	r5, lr
 801efca:	e713      	b.n	801edf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801efcc:	2200      	movs	r2, #0
 801efce:	e711      	b.n	801edf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801efd0:	4622      	mov	r2, r4
 801efd2:	e70f      	b.n	801edf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801efd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801efd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efd8:	b09f      	sub	sp, #124	; 0x7c
 801efda:	921b      	str	r2, [sp, #108]	; 0x6c
 801efdc:	9309      	str	r3, [sp, #36]	; 0x24
 801efde:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801efe0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801efe4:	901d      	str	r0, [sp, #116]	; 0x74
 801efe6:	931c      	str	r3, [sp, #112]	; 0x70
 801efe8:	6850      	ldr	r0, [r2, #4]
 801efea:	9119      	str	r1, [sp, #100]	; 0x64
 801efec:	6812      	ldr	r2, [r2, #0]
 801efee:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801eff0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801eff4:	fb00 1303 	mla	r3, r0, r3, r1
 801eff8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801effc:	18d3      	adds	r3, r2, r3
 801effe:	930c      	str	r3, [sp, #48]	; 0x30
 801f000:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f002:	681b      	ldr	r3, [r3, #0]
 801f004:	9312      	str	r3, [sp, #72]	; 0x48
 801f006:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f008:	685e      	ldr	r6, [r3, #4]
 801f00a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801f00e:	3604      	adds	r6, #4
 801f010:	930d      	str	r3, [sp, #52]	; 0x34
 801f012:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f014:	2b00      	cmp	r3, #0
 801f016:	dc03      	bgt.n	801f020 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f018:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f01a:	2b00      	cmp	r3, #0
 801f01c:	f340 8378 	ble.w	801f710 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f020:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f022:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f026:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f02a:	1e48      	subs	r0, r1, #1
 801f02c:	1e57      	subs	r7, r2, #1
 801f02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f030:	2b00      	cmp	r3, #0
 801f032:	f340 818c 	ble.w	801f34e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801f036:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f038:	142b      	asrs	r3, r5, #16
 801f03a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f03e:	d406      	bmi.n	801f04e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f040:	4584      	cmp	ip, r0
 801f042:	da04      	bge.n	801f04e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f044:	2b00      	cmp	r3, #0
 801f046:	db02      	blt.n	801f04e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f048:	42bb      	cmp	r3, r7
 801f04a:	f2c0 8181 	blt.w	801f350 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f04e:	f11c 0c01 	adds.w	ip, ip, #1
 801f052:	f100 816f 	bmi.w	801f334 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f056:	4561      	cmp	r1, ip
 801f058:	f2c0 816c 	blt.w	801f334 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f05c:	3301      	adds	r3, #1
 801f05e:	f100 8169 	bmi.w	801f334 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f062:	429a      	cmp	r2, r3
 801f064:	f2c0 8166 	blt.w	801f334 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f06a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f06c:	931a      	str	r3, [sp, #104]	; 0x68
 801f06e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f070:	2b00      	cmp	r3, #0
 801f072:	f340 818c 	ble.w	801f38e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f076:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f078:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f07c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f080:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f084:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f086:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801f08a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f08c:	141b      	asrs	r3, r3, #16
 801f08e:	f100 81d0 	bmi.w	801f432 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f092:	f100 38ff 	add.w	r8, r0, #4294967295
 801f096:	4543      	cmp	r3, r8
 801f098:	f280 81cb 	bge.w	801f432 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f09c:	f1bc 0f00 	cmp.w	ip, #0
 801f0a0:	f2c0 81c7 	blt.w	801f432 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f0a4:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f0a8:	45c4      	cmp	ip, r8
 801f0aa:	f280 81c2 	bge.w	801f432 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f0ae:	b200      	sxth	r0, r0
 801f0b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f0b2:	fb0c 3300 	mla	r3, ip, r0, r3
 801f0b6:	eb04 0803 	add.w	r8, r4, r3
 801f0ba:	5ce3      	ldrb	r3, [r4, r3]
 801f0bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f0c0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f0c4:	2a00      	cmp	r2, #0
 801f0c6:	f000 81a9 	beq.w	801f41c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801f0ca:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f0ce:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f0d2:	940e      	str	r4, [sp, #56]	; 0x38
 801f0d4:	0e24      	lsrs	r4, r4, #24
 801f0d6:	9415      	str	r4, [sp, #84]	; 0x54
 801f0d8:	b179      	cbz	r1, 801f0fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f0da:	eb08 0c00 	add.w	ip, r8, r0
 801f0de:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f0e2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f0e6:	900a      	str	r0, [sp, #40]	; 0x28
 801f0e8:	0e00      	lsrs	r0, r0, #24
 801f0ea:	9013      	str	r0, [sp, #76]	; 0x4c
 801f0ec:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f0f0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f0f4:	900f      	str	r0, [sp, #60]	; 0x3c
 801f0f6:	0e00      	lsrs	r0, r0, #24
 801f0f8:	9016      	str	r0, [sp, #88]	; 0x58
 801f0fa:	b292      	uxth	r2, r2
 801f0fc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f0fe:	b289      	uxth	r1, r1
 801f100:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f102:	fb02 f901 	mul.w	r9, r2, r1
 801f106:	0112      	lsls	r2, r2, #4
 801f108:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f10c:	eba2 0809 	sub.w	r8, r2, r9
 801f110:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f114:	b289      	uxth	r1, r1
 801f116:	fa1f f888 	uxth.w	r8, r8
 801f11a:	1a52      	subs	r2, r2, r1
 801f11c:	fb08 f000 	mul.w	r0, r8, r0
 801f120:	b292      	uxth	r2, r2
 801f122:	fb02 000e 	mla	r0, r2, lr, r0
 801f126:	fb01 0004 	mla	r0, r1, r4, r0
 801f12a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f12c:	fb09 0004 	mla	r0, r9, r4, r0
 801f130:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f134:	2800      	cmp	r0, #0
 801f136:	f000 80f2 	beq.w	801f31e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f13a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f13e:	d01b      	beq.n	801f178 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f140:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f144:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f148:	fb0e fa0a 	mul.w	sl, lr, sl
 801f14c:	fb0e fe03 	mul.w	lr, lr, r3
 801f150:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f154:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f158:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f15c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f160:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f164:	4453      	add	r3, sl
 801f166:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f16a:	0a1b      	lsrs	r3, r3, #8
 801f16c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f170:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f174:	ea43 030c 	orr.w	r3, r3, ip
 801f178:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f17a:	2cff      	cmp	r4, #255	; 0xff
 801f17c:	d021      	beq.n	801f1c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f17e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f180:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f184:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f186:	fb04 fb0b 	mul.w	fp, r4, fp
 801f18a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f18c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f190:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f192:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f196:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f19a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f19e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f1a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f1a6:	44de      	add	lr, fp
 801f1a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f1ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f1b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f1b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f1b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f1bc:	ea4e 040a 	orr.w	r4, lr, sl
 801f1c0:	940e      	str	r4, [sp, #56]	; 0x38
 801f1c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f1c4:	2cff      	cmp	r4, #255	; 0xff
 801f1c6:	d021      	beq.n	801f20c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801f1c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f1ca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f1ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f1d0:	fb04 fb0b 	mul.w	fp, r4, fp
 801f1d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f1d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f1da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f1dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f1e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f1e4:	fb04 fa0a 	mul.w	sl, r4, sl
 801f1e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f1ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f1f0:	44de      	add	lr, fp
 801f1f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f1f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f1fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f1fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f202:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f206:	ea4e 040a 	orr.w	r4, lr, sl
 801f20a:	940a      	str	r4, [sp, #40]	; 0x28
 801f20c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f20e:	2cff      	cmp	r4, #255	; 0xff
 801f210:	d021      	beq.n	801f256 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801f212:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f214:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f218:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f21a:	fb04 fb0b 	mul.w	fp, r4, fp
 801f21e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f220:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f224:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f226:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f22a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f22e:	fb04 fa0a 	mul.w	sl, r4, sl
 801f232:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f236:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f23a:	44de      	add	lr, fp
 801f23c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f240:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f244:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f248:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f24c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f250:	ea4e 040a 	orr.w	r4, lr, sl
 801f254:	940f      	str	r4, [sp, #60]	; 0x3c
 801f256:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f258:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f25c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f260:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f264:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f266:	fb08 fc0c 	mul.w	ip, r8, ip
 801f26a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f26e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f272:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f274:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f278:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f27c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f27e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f282:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f286:	fb08 f80e 	mul.w	r8, r8, lr
 801f28a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f28e:	fb02 8303 	mla	r3, r2, r3, r8
 801f292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f294:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f298:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f29c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f29e:	fb01 330a 	mla	r3, r1, sl, r3
 801f2a2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f2a6:	fb09 3901 	mla	r9, r9, r1, r3
 801f2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f2ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f2ae:	4343      	muls	r3, r0
 801f2b0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f2b4:	1c58      	adds	r0, r3, #1
 801f2b6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f2ba:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f2be:	ea4c 0c09 	orr.w	ip, ip, r9
 801f2c2:	783b      	ldrb	r3, [r7, #0]
 801f2c4:	fa5f f28c 	uxtb.w	r2, ip
 801f2c8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f2cc:	fb12 f201 	smulbb	r2, r2, r1
 801f2d0:	b2c0      	uxtb	r0, r0
 801f2d2:	fb03 2300 	mla	r3, r3, r0, r2
 801f2d6:	b29b      	uxth	r3, r3
 801f2d8:	1c5a      	adds	r2, r3, #1
 801f2da:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f2de:	787a      	ldrb	r2, [r7, #1]
 801f2e0:	fb12 f200 	smulbb	r2, r2, r0
 801f2e4:	121b      	asrs	r3, r3, #8
 801f2e6:	703b      	strb	r3, [r7, #0]
 801f2e8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f2ec:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f2f0:	fb03 2301 	mla	r3, r3, r1, r2
 801f2f4:	b29b      	uxth	r3, r3
 801f2f6:	1c5a      	adds	r2, r3, #1
 801f2f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f2fc:	121b      	asrs	r3, r3, #8
 801f2fe:	707b      	strb	r3, [r7, #1]
 801f300:	78bb      	ldrb	r3, [r7, #2]
 801f302:	fb13 f000 	smulbb	r0, r3, r0
 801f306:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f30a:	fa1f fc8c 	uxth.w	ip, ip
 801f30e:	f10c 0301 	add.w	r3, ip, #1
 801f312:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f316:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f31a:	f887 c002 	strb.w	ip, [r7, #2]
 801f31e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f320:	3703      	adds	r7, #3
 801f322:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f324:	441a      	add	r2, r3
 801f326:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f328:	441d      	add	r5, r3
 801f32a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f32c:	9229      	str	r2, [sp, #164]	; 0xa4
 801f32e:	3b01      	subs	r3, #1
 801f330:	931a      	str	r3, [sp, #104]	; 0x68
 801f332:	e69c      	b.n	801f06e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f334:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f336:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f338:	441c      	add	r4, r3
 801f33a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f33c:	441d      	add	r5, r3
 801f33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f340:	9429      	str	r4, [sp, #164]	; 0xa4
 801f342:	3b01      	subs	r3, #1
 801f344:	9309      	str	r3, [sp, #36]	; 0x24
 801f346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f348:	3303      	adds	r3, #3
 801f34a:	930c      	str	r3, [sp, #48]	; 0x30
 801f34c:	e66f      	b.n	801f02e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f34e:	d026      	beq.n	801f39e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801f350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f352:	982b      	ldr	r0, [sp, #172]	; 0xac
 801f354:	3b01      	subs	r3, #1
 801f356:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f358:	fb00 4003 	mla	r0, r0, r3, r4
 801f35c:	1400      	asrs	r0, r0, #16
 801f35e:	f53f ae83 	bmi.w	801f068 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f362:	3901      	subs	r1, #1
 801f364:	4288      	cmp	r0, r1
 801f366:	f6bf ae7f 	bge.w	801f068 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f36a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f36c:	fb01 5303 	mla	r3, r1, r3, r5
 801f370:	141b      	asrs	r3, r3, #16
 801f372:	f53f ae79 	bmi.w	801f068 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f376:	3a01      	subs	r2, #1
 801f378:	4293      	cmp	r3, r2
 801f37a:	f6bf ae75 	bge.w	801f068 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f37e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f380:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f384:	f103 0e03 	add.w	lr, r3, #3
 801f388:	f1bb 0f00 	cmp.w	fp, #0
 801f38c:	dc71      	bgt.n	801f472 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801f38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f390:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f396:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f39a:	4423      	add	r3, r4
 801f39c:	930c      	str	r3, [sp, #48]	; 0x30
 801f39e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	f340 81b5 	ble.w	801f710 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f3a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f3aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f3ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3b4:	eef0 6a62 	vmov.f32	s13, s5
 801f3b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f3bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3c4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801f3c8:	eef0 6a43 	vmov.f32	s13, s6
 801f3cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3d0:	ee16 5a90 	vmov	r5, s13
 801f3d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3ec:	ee12 2a90 	vmov	r2, s5
 801f3f0:	eef0 2a47 	vmov.f32	s5, s14
 801f3f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3f8:	ee13 2a10 	vmov	r2, s6
 801f3fc:	932b      	str	r3, [sp, #172]	; 0xac
 801f3fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f400:	eeb0 3a67 	vmov.f32	s6, s15
 801f404:	fb92 f3f3 	sdiv	r3, r2, r3
 801f408:	932c      	str	r3, [sp, #176]	; 0xb0
 801f40a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f40c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801f40e:	3b01      	subs	r3, #1
 801f410:	9319      	str	r3, [sp, #100]	; 0x64
 801f412:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f414:	bf08      	it	eq
 801f416:	4613      	moveq	r3, r2
 801f418:	9309      	str	r3, [sp, #36]	; 0x24
 801f41a:	e5fa      	b.n	801f012 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f41c:	2900      	cmp	r1, #0
 801f41e:	f43f ae6c 	beq.w	801f0fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f422:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f426:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f42a:	900a      	str	r0, [sp, #40]	; 0x28
 801f42c:	0e00      	lsrs	r0, r0, #24
 801f42e:	9013      	str	r0, [sp, #76]	; 0x4c
 801f430:	e663      	b.n	801f0fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f432:	f113 0801 	adds.w	r8, r3, #1
 801f436:	f53f af72 	bmi.w	801f31e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f43a:	4540      	cmp	r0, r8
 801f43c:	f6ff af6f 	blt.w	801f31e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f440:	f11c 0801 	adds.w	r8, ip, #1
 801f444:	f53f af6b 	bmi.w	801f31e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f448:	45c6      	cmp	lr, r8
 801f44a:	f6ff af68 	blt.w	801f31e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f44e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801f450:	b200      	sxth	r0, r0
 801f452:	9302      	str	r3, [sp, #8]
 801f454:	fa0f f38e 	sxth.w	r3, lr
 801f458:	9000      	str	r0, [sp, #0]
 801f45a:	9301      	str	r3, [sp, #4]
 801f45c:	4633      	mov	r3, r6
 801f45e:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f460:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f464:	e9cd c203 	strd	ip, r2, [sp, #12]
 801f468:	4639      	mov	r1, r7
 801f46a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f46c:	f7ff fc74 	bl	801ed58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801f470:	e755      	b.n	801f31e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f472:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f474:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f478:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801f47a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f47e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f480:	1427      	asrs	r7, r4, #16
 801f482:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f484:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f488:	142b      	asrs	r3, r5, #16
 801f48a:	fb01 7303 	mla	r3, r1, r3, r7
 801f48e:	18e7      	adds	r7, r4, r3
 801f490:	5ce3      	ldrb	r3, [r4, r3]
 801f492:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f496:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f49a:	2a00      	cmp	r2, #0
 801f49c:	f000 812e 	beq.w	801f6fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801f4a0:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f4a4:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801f4a8:	9410      	str	r4, [sp, #64]	; 0x40
 801f4aa:	0e24      	lsrs	r4, r4, #24
 801f4ac:	9417      	str	r4, [sp, #92]	; 0x5c
 801f4ae:	b170      	cbz	r0, 801f4ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801f4b0:	eb07 0801 	add.w	r8, r7, r1
 801f4b4:	5c79      	ldrb	r1, [r7, r1]
 801f4b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f4ba:	910b      	str	r1, [sp, #44]	; 0x2c
 801f4bc:	0e09      	lsrs	r1, r1, #24
 801f4be:	9114      	str	r1, [sp, #80]	; 0x50
 801f4c0:	f898 1001 	ldrb.w	r1, [r8, #1]
 801f4c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f4c8:	9111      	str	r1, [sp, #68]	; 0x44
 801f4ca:	0e09      	lsrs	r1, r1, #24
 801f4cc:	9118      	str	r1, [sp, #96]	; 0x60
 801f4ce:	b292      	uxth	r2, r2
 801f4d0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f4d2:	b280      	uxth	r0, r0
 801f4d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f4d6:	fb02 f900 	mul.w	r9, r2, r0
 801f4da:	0112      	lsls	r2, r2, #4
 801f4dc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f4e0:	eba2 0809 	sub.w	r8, r2, r9
 801f4e4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f4e8:	b280      	uxth	r0, r0
 801f4ea:	fa1f f888 	uxth.w	r8, r8
 801f4ee:	1a12      	subs	r2, r2, r0
 801f4f0:	fb08 f101 	mul.w	r1, r8, r1
 801f4f4:	b292      	uxth	r2, r2
 801f4f6:	fb02 110c 	mla	r1, r2, ip, r1
 801f4fa:	fb00 1104 	mla	r1, r0, r4, r1
 801f4fe:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f500:	fb09 1104 	mla	r1, r9, r4, r1
 801f504:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f508:	2900      	cmp	r1, #0
 801f50a:	f000 80ec 	beq.w	801f6e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801f50e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f512:	d019      	beq.n	801f548 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801f514:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f518:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f51c:	fb0c fa0a 	mul.w	sl, ip, sl
 801f520:	fb0c fc03 	mul.w	ip, ip, r3
 801f524:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f528:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f52c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801f530:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f534:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f538:	4453      	add	r3, sl
 801f53a:	0a3f      	lsrs	r7, r7, #8
 801f53c:	0a1b      	lsrs	r3, r3, #8
 801f53e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f542:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f546:	433b      	orrs	r3, r7
 801f548:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f54a:	2cff      	cmp	r4, #255	; 0xff
 801f54c:	d020      	beq.n	801f590 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801f54e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f550:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f554:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f556:	4367      	muls	r7, r4
 801f558:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f55a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f55e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f562:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f564:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f568:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f56c:	fb04 fa0a 	mul.w	sl, r4, sl
 801f570:	44bc      	add	ip, r7
 801f572:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f576:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f57a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f57e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f582:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f586:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f58a:	ea4c 040a 	orr.w	r4, ip, sl
 801f58e:	9410      	str	r4, [sp, #64]	; 0x40
 801f590:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f592:	2cff      	cmp	r4, #255	; 0xff
 801f594:	d020      	beq.n	801f5d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801f596:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f598:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f59c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f59e:	4367      	muls	r7, r4
 801f5a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f5a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f5a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f5aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f5ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f5b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f5b4:	fb04 fa0a 	mul.w	sl, r4, sl
 801f5b8:	44bc      	add	ip, r7
 801f5ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f5be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f5c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f5c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f5ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f5ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f5d2:	ea4c 040a 	orr.w	r4, ip, sl
 801f5d6:	940b      	str	r4, [sp, #44]	; 0x2c
 801f5d8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f5da:	2cff      	cmp	r4, #255	; 0xff
 801f5dc:	d020      	beq.n	801f620 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801f5de:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f5e0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f5e4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f5e6:	4367      	muls	r7, r4
 801f5e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f5ea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f5ee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f5f2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801f5f4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f5f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f5fc:	fb04 fa0a 	mul.w	sl, r4, sl
 801f600:	44bc      	add	ip, r7
 801f602:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f606:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f60a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f60e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f612:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f616:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f61a:	ea4c 040a 	orr.w	r4, ip, sl
 801f61e:	9411      	str	r4, [sp, #68]	; 0x44
 801f620:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f622:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f626:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f62a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f62e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f630:	fb08 f707 	mul.w	r7, r8, r7
 801f634:	fb02 770c 	mla	r7, r2, ip, r7
 801f638:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f63c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f63e:	fb00 770c 	mla	r7, r0, ip, r7
 801f642:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f646:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f648:	fb09 770c 	mla	r7, r9, ip, r7
 801f64c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801f650:	fb08 f80c 	mul.w	r8, r8, ip
 801f654:	0a3f      	lsrs	r7, r7, #8
 801f656:	fb02 8303 	mla	r3, r2, r3, r8
 801f65a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f65c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f660:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f664:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f666:	fb00 330a 	mla	r3, r0, sl, r3
 801f66a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f66e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f670:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f676:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f67a:	434b      	muls	r3, r1
 801f67c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f680:	1c59      	adds	r1, r3, #1
 801f682:	ea47 070c 	orr.w	r7, r7, ip
 801f686:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f68a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f68e:	b2fa      	uxtb	r2, r7
 801f690:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801f694:	fb12 f200 	smulbb	r2, r2, r0
 801f698:	b2c9      	uxtb	r1, r1
 801f69a:	fb03 2301 	mla	r3, r3, r1, r2
 801f69e:	b29b      	uxth	r3, r3
 801f6a0:	1c5a      	adds	r2, r3, #1
 801f6a2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f6a6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801f6aa:	fb12 f201 	smulbb	r2, r2, r1
 801f6ae:	121b      	asrs	r3, r3, #8
 801f6b0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f6b4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801f6b8:	0c3f      	lsrs	r7, r7, #16
 801f6ba:	fb03 2300 	mla	r3, r3, r0, r2
 801f6be:	b29b      	uxth	r3, r3
 801f6c0:	1c5a      	adds	r2, r3, #1
 801f6c2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f6c6:	121b      	asrs	r3, r3, #8
 801f6c8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f6cc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f6d0:	fb13 f101 	smulbb	r1, r3, r1
 801f6d4:	fb07 1700 	mla	r7, r7, r0, r1
 801f6d8:	b2bf      	uxth	r7, r7
 801f6da:	1c7b      	adds	r3, r7, #1
 801f6dc:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f6e0:	123f      	asrs	r7, r7, #8
 801f6e2:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801f6e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f6e8:	f10e 0e03 	add.w	lr, lr, #3
 801f6ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f6ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f6f2:	441a      	add	r2, r3
 801f6f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f6f6:	9229      	str	r2, [sp, #164]	; 0xa4
 801f6f8:	441d      	add	r5, r3
 801f6fa:	e645      	b.n	801f388 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801f6fc:	2800      	cmp	r0, #0
 801f6fe:	f43f aee6 	beq.w	801f4ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801f702:	5c79      	ldrb	r1, [r7, r1]
 801f704:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f708:	910b      	str	r1, [sp, #44]	; 0x2c
 801f70a:	0e09      	lsrs	r1, r1, #24
 801f70c:	9114      	str	r1, [sp, #80]	; 0x50
 801f70e:	e6de      	b.n	801f4ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801f710:	b01f      	add	sp, #124	; 0x7c
 801f712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f716 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801f716:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f71a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801f71e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801f722:	2d00      	cmp	r5, #0
 801f724:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801f728:	fb05 700e 	mla	r0, r5, lr, r7
 801f72c:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801f730:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801f734:	eb02 0800 	add.w	r8, r2, r0
 801f738:	f2c0 8105 	blt.w	801f946 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801f73c:	45a9      	cmp	r9, r5
 801f73e:	f340 8102 	ble.w	801f946 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801f742:	2f00      	cmp	r7, #0
 801f744:	f2c0 80fd 	blt.w	801f942 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801f748:	45be      	cmp	lr, r7
 801f74a:	f340 80fa 	ble.w	801f942 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801f74e:	5c12      	ldrb	r2, [r2, r0]
 801f750:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f754:	1c7a      	adds	r2, r7, #1
 801f756:	f100 80f9 	bmi.w	801f94c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801f75a:	4596      	cmp	lr, r2
 801f75c:	f340 80f6 	ble.w	801f94c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801f760:	2c00      	cmp	r4, #0
 801f762:	f000 80f5 	beq.w	801f950 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801f766:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f76a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f76e:	3501      	adds	r5, #1
 801f770:	f100 80f2 	bmi.w	801f958 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801f774:	45a9      	cmp	r9, r5
 801f776:	f340 80ef 	ble.w	801f958 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801f77a:	f1bc 0f00 	cmp.w	ip, #0
 801f77e:	f000 80ee 	beq.w	801f95e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801f782:	2f00      	cmp	r7, #0
 801f784:	f2c0 80e6 	blt.w	801f954 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801f788:	45be      	cmp	lr, r7
 801f78a:	f340 80e3 	ble.w	801f954 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801f78e:	f818 200e 	ldrb.w	r2, [r8, lr]
 801f792:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f796:	3701      	adds	r7, #1
 801f798:	f100 80e4 	bmi.w	801f964 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801f79c:	45be      	cmp	lr, r7
 801f79e:	f340 80e1 	ble.w	801f964 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801f7a2:	2c00      	cmp	r4, #0
 801f7a4:	f000 80e0 	beq.w	801f968 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801f7a8:	44c6      	add	lr, r8
 801f7aa:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f7ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f7b2:	b2a3      	uxth	r3, r4
 801f7b4:	fa1f fc8c 	uxth.w	ip, ip
 801f7b8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801f7bc:	fb0c fe03 	mul.w	lr, ip, r3
 801f7c0:	011b      	lsls	r3, r3, #4
 801f7c2:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f7c6:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801f7ca:	eba3 070e 	sub.w	r7, r3, lr
 801f7ce:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801f7d2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f7d6:	fa1f f48c 	uxth.w	r4, ip
 801f7da:	b2bf      	uxth	r7, r7
 801f7dc:	1b1b      	subs	r3, r3, r4
 801f7de:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f7e2:	fb07 fc0a 	mul.w	ip, r7, sl
 801f7e6:	b29b      	uxth	r3, r3
 801f7e8:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f7ec:	9300      	str	r3, [sp, #0]
 801f7ee:	fb04 cc09 	mla	ip, r4, r9, ip
 801f7f2:	fb0e cc08 	mla	ip, lr, r8, ip
 801f7f6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f7fa:	9301      	str	r3, [sp, #4]
 801f7fc:	2b00      	cmp	r3, #0
 801f7fe:	f000 809d 	beq.w	801f93c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801f802:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f806:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f80a:	fb0b fc0c 	mul.w	ip, fp, ip
 801f80e:	fb0b f606 	mul.w	r6, fp, r6
 801f812:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f816:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f81a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f81e:	44dc      	add	ip, fp
 801f820:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801f824:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f828:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f82c:	fb0a fb0b 	mul.w	fp, sl, fp
 801f830:	fb0a fa00 	mul.w	sl, sl, r0
 801f834:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f838:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f83c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801f840:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f844:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f848:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f84c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801f850:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f854:	0a36      	lsrs	r6, r6, #8
 801f856:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f85a:	44dc      	add	ip, fp
 801f85c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f860:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f864:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f868:	fb09 fb0b 	mul.w	fp, r9, fp
 801f86c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f870:	fb09 f905 	mul.w	r9, r9, r5
 801f874:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801f878:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f87c:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801f880:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f884:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f888:	fb0c fc07 	mul.w	ip, ip, r7
 801f88c:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801f890:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801f894:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f898:	4458      	add	r0, fp
 801f89a:	fb08 f505 	mul.w	r5, r8, r5
 801f89e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f8a2:	fb08 f802 	mul.w	r8, r8, r2
 801f8a6:	0a00      	lsrs	r0, r0, #8
 801f8a8:	0a2a      	lsrs	r2, r5, #8
 801f8aa:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801f8ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f8b2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f8b6:	4415      	add	r5, r2
 801f8b8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f8bc:	0a2d      	lsrs	r5, r5, #8
 801f8be:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f8c2:	9a00      	ldr	r2, [sp, #0]
 801f8c4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f8c8:	fb03 cc02 	mla	ip, r3, r2, ip
 801f8cc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f8d0:	9b01      	ldr	r3, [sp, #4]
 801f8d2:	fb05 c50e 	mla	r5, r5, lr, ip
 801f8d6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f8da:	43db      	mvns	r3, r3
 801f8dc:	fb00 5004 	mla	r0, r0, r4, r5
 801f8e0:	b2db      	uxtb	r3, r3
 801f8e2:	0a00      	lsrs	r0, r0, #8
 801f8e4:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801f8e8:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801f8ec:	4378      	muls	r0, r7
 801f8ee:	fb02 0006 	mla	r0, r2, r6, r0
 801f8f2:	780a      	ldrb	r2, [r1, #0]
 801f8f4:	fb0e 0e08 	mla	lr, lr, r8, r0
 801f8f8:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801f8fc:	fb04 e000 	mla	r0, r4, r0, lr
 801f900:	fb02 f403 	mul.w	r4, r2, r3
 801f904:	0a00      	lsrs	r0, r0, #8
 801f906:	1c62      	adds	r2, r4, #1
 801f908:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f90c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f910:	4328      	orrs	r0, r5
 801f912:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f916:	700a      	strb	r2, [r1, #0]
 801f918:	784a      	ldrb	r2, [r1, #1]
 801f91a:	435a      	muls	r2, r3
 801f91c:	1c54      	adds	r4, r2, #1
 801f91e:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801f922:	0a02      	lsrs	r2, r0, #8
 801f924:	0c00      	lsrs	r0, r0, #16
 801f926:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f92a:	704a      	strb	r2, [r1, #1]
 801f92c:	788a      	ldrb	r2, [r1, #2]
 801f92e:	4353      	muls	r3, r2
 801f930:	1c5a      	adds	r2, r3, #1
 801f932:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f936:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f93a:	7088      	strb	r0, [r1, #2]
 801f93c:	b003      	add	sp, #12
 801f93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f942:	2600      	movs	r6, #0
 801f944:	e706      	b.n	801f754 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801f946:	2000      	movs	r0, #0
 801f948:	4606      	mov	r6, r0
 801f94a:	e710      	b.n	801f76e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801f94c:	2000      	movs	r0, #0
 801f94e:	e70e      	b.n	801f76e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801f950:	4620      	mov	r0, r4
 801f952:	e70c      	b.n	801f76e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801f954:	2500      	movs	r5, #0
 801f956:	e71e      	b.n	801f796 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801f958:	2200      	movs	r2, #0
 801f95a:	4615      	mov	r5, r2
 801f95c:	e729      	b.n	801f7b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801f95e:	4662      	mov	r2, ip
 801f960:	4665      	mov	r5, ip
 801f962:	e726      	b.n	801f7b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801f964:	2200      	movs	r2, #0
 801f966:	e724      	b.n	801f7b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801f968:	4622      	mov	r2, r4
 801f96a:	e722      	b.n	801f7b2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801f96c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f970:	b09b      	sub	sp, #108	; 0x6c
 801f972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f976:	9218      	str	r2, [sp, #96]	; 0x60
 801f978:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f97a:	9019      	str	r0, [sp, #100]	; 0x64
 801f97c:	9116      	str	r1, [sp, #88]	; 0x58
 801f97e:	6850      	ldr	r0, [r2, #4]
 801f980:	9307      	str	r3, [sp, #28]
 801f982:	6812      	ldr	r2, [r2, #0]
 801f984:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801f986:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f98a:	fb00 1303 	mla	r3, r0, r3, r1
 801f98e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f992:	18d3      	adds	r3, r2, r3
 801f994:	930a      	str	r3, [sp, #40]	; 0x28
 801f996:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f998:	681b      	ldr	r3, [r3, #0]
 801f99a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f99c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f99e:	685e      	ldr	r6, [r3, #4]
 801f9a0:	3604      	adds	r6, #4
 801f9a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	dc03      	bgt.n	801f9b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f9a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f9aa:	2b00      	cmp	r3, #0
 801f9ac:	f340 834f 	ble.w	802004e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801f9b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f9b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f9b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f9ba:	1e48      	subs	r0, r1, #1
 801f9bc:	1e57      	subs	r7, r2, #1
 801f9be:	9b07      	ldr	r3, [sp, #28]
 801f9c0:	2b00      	cmp	r3, #0
 801f9c2:	f340 8178 	ble.w	801fcb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f9c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f9c8:	142b      	asrs	r3, r5, #16
 801f9ca:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f9ce:	d406      	bmi.n	801f9de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f9d0:	4584      	cmp	ip, r0
 801f9d2:	da04      	bge.n	801f9de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	db02      	blt.n	801f9de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f9d8:	42bb      	cmp	r3, r7
 801f9da:	f2c0 816d 	blt.w	801fcb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f9de:	f11c 0c01 	adds.w	ip, ip, #1
 801f9e2:	f100 815b 	bmi.w	801fc9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f9e6:	4561      	cmp	r1, ip
 801f9e8:	f2c0 8158 	blt.w	801fc9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f9ec:	3301      	adds	r3, #1
 801f9ee:	f100 8155 	bmi.w	801fc9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f9f2:	429a      	cmp	r2, r3
 801f9f4:	f2c0 8152 	blt.w	801fc9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f9f8:	9b07      	ldr	r3, [sp, #28]
 801f9fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f9fc:	9317      	str	r3, [sp, #92]	; 0x5c
 801f9fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	f340 8178 	ble.w	801fcf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801fa06:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fa08:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801fa0c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fa10:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fa14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fa16:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801fa1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fa1c:	141b      	asrs	r3, r3, #16
 801fa1e:	f100 81ba 	bmi.w	801fd96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801fa22:	f101 38ff 	add.w	r8, r1, #4294967295
 801fa26:	4543      	cmp	r3, r8
 801fa28:	f280 81b5 	bge.w	801fd96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801fa2c:	f1bc 0f00 	cmp.w	ip, #0
 801fa30:	f2c0 81b1 	blt.w	801fd96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801fa34:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fa38:	45c4      	cmp	ip, r8
 801fa3a:	f280 81ac 	bge.w	801fd96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801fa3e:	b209      	sxth	r1, r1
 801fa40:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fa42:	fb0c 3301 	mla	r3, ip, r1, r3
 801fa46:	eb04 0803 	add.w	r8, r4, r3
 801fa4a:	5ce3      	ldrb	r3, [r4, r3]
 801fa4c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fa50:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801fa54:	2a00      	cmp	r2, #0
 801fa56:	f000 8193 	beq.w	801fd80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801fa5a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801fa5e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801fa62:	940b      	str	r4, [sp, #44]	; 0x2c
 801fa64:	0e24      	lsrs	r4, r4, #24
 801fa66:	9412      	str	r4, [sp, #72]	; 0x48
 801fa68:	b178      	cbz	r0, 801fa8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801fa6a:	eb08 0c01 	add.w	ip, r8, r1
 801fa6e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fa72:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fa76:	9108      	str	r1, [sp, #32]
 801fa78:	0e09      	lsrs	r1, r1, #24
 801fa7a:	9110      	str	r1, [sp, #64]	; 0x40
 801fa7c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801fa80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fa84:	910c      	str	r1, [sp, #48]	; 0x30
 801fa86:	0e09      	lsrs	r1, r1, #24
 801fa88:	9113      	str	r1, [sp, #76]	; 0x4c
 801fa8a:	b292      	uxth	r2, r2
 801fa8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fa8e:	b280      	uxth	r0, r0
 801fa90:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fa92:	fb02 f900 	mul.w	r9, r2, r0
 801fa96:	0112      	lsls	r2, r2, #4
 801fa98:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fa9c:	eba2 0809 	sub.w	r8, r2, r9
 801faa0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801faa4:	b280      	uxth	r0, r0
 801faa6:	fa1f f888 	uxth.w	r8, r8
 801faaa:	1a12      	subs	r2, r2, r0
 801faac:	fb08 f101 	mul.w	r1, r8, r1
 801fab0:	b292      	uxth	r2, r2
 801fab2:	fb02 110e 	mla	r1, r2, lr, r1
 801fab6:	fb00 1104 	mla	r1, r0, r4, r1
 801faba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fabc:	fb09 1104 	mla	r1, r9, r4, r1
 801fac0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fac4:	2900      	cmp	r1, #0
 801fac6:	f000 80de 	beq.w	801fc86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801faca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801face:	d01b      	beq.n	801fb08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801fad0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fad4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fad8:	fb0e fa0a 	mul.w	sl, lr, sl
 801fadc:	fb0e fe03 	mul.w	lr, lr, r3
 801fae0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fae4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fae8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801faec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801faf0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801faf4:	4453      	add	r3, sl
 801faf6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fafa:	0a1b      	lsrs	r3, r3, #8
 801fafc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fb00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fb04:	ea43 030c 	orr.w	r3, r3, ip
 801fb08:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fb0a:	2cff      	cmp	r4, #255	; 0xff
 801fb0c:	d021      	beq.n	801fb52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801fb0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fb10:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fb14:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fb16:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fb1c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fb20:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fb22:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb26:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fb2a:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb2e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb32:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fb36:	44de      	add	lr, fp
 801fb38:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb3c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb44:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb48:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb4c:	ea4e 040a 	orr.w	r4, lr, sl
 801fb50:	940b      	str	r4, [sp, #44]	; 0x2c
 801fb52:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fb54:	2cff      	cmp	r4, #255	; 0xff
 801fb56:	d021      	beq.n	801fb9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801fb58:	9c08      	ldr	r4, [sp, #32]
 801fb5a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fb5e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fb60:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb64:	9c08      	ldr	r4, [sp, #32]
 801fb66:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fb6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801fb6c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb70:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fb74:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb7c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fb80:	44de      	add	lr, fp
 801fb82:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb8e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb92:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb96:	ea4e 040a 	orr.w	r4, lr, sl
 801fb9a:	9408      	str	r4, [sp, #32]
 801fb9c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fb9e:	2cff      	cmp	r4, #255	; 0xff
 801fba0:	d021      	beq.n	801fbe6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801fba2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fba4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fba8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fbaa:	fb04 fb0b 	mul.w	fp, r4, fp
 801fbae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fbb0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fbb4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fbb6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fbba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fbbe:	fb04 fa0a 	mul.w	sl, r4, sl
 801fbc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fbc6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fbca:	44de      	add	lr, fp
 801fbcc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fbd0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fbd4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fbd8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fbdc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fbe0:	ea4e 040a 	orr.w	r4, lr, sl
 801fbe4:	940c      	str	r4, [sp, #48]	; 0x30
 801fbe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fbe8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801fbec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fbf0:	43c9      	mvns	r1, r1
 801fbf2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fbf6:	9c08      	ldr	r4, [sp, #32]
 801fbf8:	b2c9      	uxtb	r1, r1
 801fbfa:	fb08 fc0c 	mul.w	ip, r8, ip
 801fbfe:	fb02 cc0e 	mla	ip, r2, lr, ip
 801fc02:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fc06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fc08:	fb00 cc0e 	mla	ip, r0, lr, ip
 801fc0c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fc10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fc12:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fc16:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801fc1a:	fb08 f80e 	mul.w	r8, r8, lr
 801fc1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc22:	fb02 8303 	mla	r3, r2, r3, r8
 801fc26:	9a08      	ldr	r2, [sp, #32]
 801fc28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fc2c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fc30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fc32:	fb00 330a 	mla	r3, r0, sl, r3
 801fc36:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801fc3a:	fb09 3900 	mla	r9, r9, r0, r3
 801fc3e:	783b      	ldrb	r3, [r7, #0]
 801fc40:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fc44:	fb03 f201 	mul.w	r2, r3, r1
 801fc48:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fc4c:	1c53      	adds	r3, r2, #1
 801fc4e:	ea4c 0c09 	orr.w	ip, ip, r9
 801fc52:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fc56:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801fc5a:	703b      	strb	r3, [r7, #0]
 801fc5c:	787b      	ldrb	r3, [r7, #1]
 801fc5e:	434b      	muls	r3, r1
 801fc60:	1c5a      	adds	r2, r3, #1
 801fc62:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fc66:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801fc6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fc6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fc72:	707b      	strb	r3, [r7, #1]
 801fc74:	78bb      	ldrb	r3, [r7, #2]
 801fc76:	4359      	muls	r1, r3
 801fc78:	1c4b      	adds	r3, r1, #1
 801fc7a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801fc7e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801fc82:	f887 c002 	strb.w	ip, [r7, #2]
 801fc86:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fc88:	3703      	adds	r7, #3
 801fc8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fc8c:	441a      	add	r2, r3
 801fc8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc90:	441d      	add	r5, r3
 801fc92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fc94:	9225      	str	r2, [sp, #148]	; 0x94
 801fc96:	3b01      	subs	r3, #1
 801fc98:	9317      	str	r3, [sp, #92]	; 0x5c
 801fc9a:	e6b0      	b.n	801f9fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fc9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fc9e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801fca0:	441c      	add	r4, r3
 801fca2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fca4:	441d      	add	r5, r3
 801fca6:	9b07      	ldr	r3, [sp, #28]
 801fca8:	9425      	str	r4, [sp, #148]	; 0x94
 801fcaa:	3b01      	subs	r3, #1
 801fcac:	9307      	str	r3, [sp, #28]
 801fcae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fcb0:	3303      	adds	r3, #3
 801fcb2:	930a      	str	r3, [sp, #40]	; 0x28
 801fcb4:	e683      	b.n	801f9be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fcb6:	d026      	beq.n	801fd06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801fcb8:	9b07      	ldr	r3, [sp, #28]
 801fcba:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fcbc:	3b01      	subs	r3, #1
 801fcbe:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801fcc0:	fb00 4003 	mla	r0, r0, r3, r4
 801fcc4:	1400      	asrs	r0, r0, #16
 801fcc6:	f53f ae97 	bmi.w	801f9f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fcca:	3901      	subs	r1, #1
 801fccc:	4288      	cmp	r0, r1
 801fcce:	f6bf ae93 	bge.w	801f9f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fcd2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801fcd4:	fb01 5303 	mla	r3, r1, r3, r5
 801fcd8:	141b      	asrs	r3, r3, #16
 801fcda:	f53f ae8d 	bmi.w	801f9f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fcde:	3a01      	subs	r2, #1
 801fce0:	4293      	cmp	r3, r2
 801fce2:	f6bf ae89 	bge.w	801f9f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fce8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fcec:	f103 0e03 	add.w	lr, r3, #3
 801fcf0:	f1bb 0f00 	cmp.w	fp, #0
 801fcf4:	dc6d      	bgt.n	801fdd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801fcf6:	9b07      	ldr	r3, [sp, #28]
 801fcf8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fcfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fcfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fd02:	4423      	add	r3, r4
 801fd04:	930a      	str	r3, [sp, #40]	; 0x28
 801fd06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	f340 81a0 	ble.w	802004e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801fd0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd12:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd18:	eeb0 6a62 	vmov.f32	s12, s5
 801fd1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fd20:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd28:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801fd2c:	eeb0 6a43 	vmov.f32	s12, s6
 801fd30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd34:	ee16 5a10 	vmov	r5, s12
 801fd38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd40:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd50:	ee12 2a90 	vmov	r2, s5
 801fd54:	eef0 2a47 	vmov.f32	s5, s14
 801fd58:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd5c:	ee13 2a10 	vmov	r2, s6
 801fd60:	9327      	str	r3, [sp, #156]	; 0x9c
 801fd62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd64:	eeb0 3a67 	vmov.f32	s6, s15
 801fd68:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd6c:	9328      	str	r3, [sp, #160]	; 0xa0
 801fd6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fd70:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fd72:	3b01      	subs	r3, #1
 801fd74:	9316      	str	r3, [sp, #88]	; 0x58
 801fd76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd78:	bf08      	it	eq
 801fd7a:	4613      	moveq	r3, r2
 801fd7c:	9307      	str	r3, [sp, #28]
 801fd7e:	e610      	b.n	801f9a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801fd80:	2800      	cmp	r0, #0
 801fd82:	f43f ae82 	beq.w	801fa8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801fd86:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fd8a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fd8e:	9108      	str	r1, [sp, #32]
 801fd90:	0e09      	lsrs	r1, r1, #24
 801fd92:	9110      	str	r1, [sp, #64]	; 0x40
 801fd94:	e679      	b.n	801fa8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801fd96:	f113 0801 	adds.w	r8, r3, #1
 801fd9a:	f53f af74 	bmi.w	801fc86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801fd9e:	4541      	cmp	r1, r8
 801fda0:	f6ff af71 	blt.w	801fc86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801fda4:	f11c 0801 	adds.w	r8, ip, #1
 801fda8:	f53f af6d 	bmi.w	801fc86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801fdac:	45c6      	cmp	lr, r8
 801fdae:	f6ff af6a 	blt.w	801fc86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801fdb2:	b209      	sxth	r1, r1
 801fdb4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801fdb8:	fa0f f38e 	sxth.w	r3, lr
 801fdbc:	9100      	str	r1, [sp, #0]
 801fdbe:	4639      	mov	r1, r7
 801fdc0:	9301      	str	r3, [sp, #4]
 801fdc2:	4633      	mov	r3, r6
 801fdc4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801fdc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fdca:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fdcc:	f7ff fca3 	bl	801f716 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801fdd0:	e759      	b.n	801fc86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801fdd2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fdd4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fdd8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801fdda:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801fdde:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fde0:	1427      	asrs	r7, r4, #16
 801fde2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fde4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fde8:	142b      	asrs	r3, r5, #16
 801fdea:	fb01 7303 	mla	r3, r1, r3, r7
 801fdee:	18e7      	adds	r7, r4, r3
 801fdf0:	5ce3      	ldrb	r3, [r4, r3]
 801fdf2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801fdf6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fdfa:	2a00      	cmp	r2, #0
 801fdfc:	f000 811d 	beq.w	802003a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801fe00:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fe04:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801fe08:	940d      	str	r4, [sp, #52]	; 0x34
 801fe0a:	0e24      	lsrs	r4, r4, #24
 801fe0c:	9414      	str	r4, [sp, #80]	; 0x50
 801fe0e:	b170      	cbz	r0, 801fe2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801fe10:	eb07 0801 	add.w	r8, r7, r1
 801fe14:	5c79      	ldrb	r1, [r7, r1]
 801fe16:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fe1a:	9109      	str	r1, [sp, #36]	; 0x24
 801fe1c:	0e09      	lsrs	r1, r1, #24
 801fe1e:	9111      	str	r1, [sp, #68]	; 0x44
 801fe20:	f898 1001 	ldrb.w	r1, [r8, #1]
 801fe24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fe28:	910e      	str	r1, [sp, #56]	; 0x38
 801fe2a:	0e09      	lsrs	r1, r1, #24
 801fe2c:	9115      	str	r1, [sp, #84]	; 0x54
 801fe2e:	b292      	uxth	r2, r2
 801fe30:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fe32:	b280      	uxth	r0, r0
 801fe34:	fb02 f900 	mul.w	r9, r2, r0
 801fe38:	0112      	lsls	r2, r2, #4
 801fe3a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fe3e:	eba2 0809 	sub.w	r8, r2, r9
 801fe42:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801fe46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe48:	b280      	uxth	r0, r0
 801fe4a:	fa1f f888 	uxth.w	r8, r8
 801fe4e:	1a09      	subs	r1, r1, r0
 801fe50:	fb08 f202 	mul.w	r2, r8, r2
 801fe54:	b289      	uxth	r1, r1
 801fe56:	fb01 220c 	mla	r2, r1, ip, r2
 801fe5a:	fb00 2204 	mla	r2, r0, r4, r2
 801fe5e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fe60:	fb09 2204 	mla	r2, r9, r4, r2
 801fe64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801fe68:	2a00      	cmp	r2, #0
 801fe6a:	f000 80db 	beq.w	8020024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801fe6e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fe72:	d019      	beq.n	801fea8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801fe74:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fe78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe7c:	fb0c fa0a 	mul.w	sl, ip, sl
 801fe80:	fb0c fc03 	mul.w	ip, ip, r3
 801fe84:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fe88:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fe8c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801fe90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fe94:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fe98:	4453      	add	r3, sl
 801fe9a:	0a3f      	lsrs	r7, r7, #8
 801fe9c:	0a1b      	lsrs	r3, r3, #8
 801fe9e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fea2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fea6:	433b      	orrs	r3, r7
 801fea8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801feaa:	2cff      	cmp	r4, #255	; 0xff
 801feac:	d020      	beq.n	801fef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801feae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801feb0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801feb4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801feb6:	4367      	muls	r7, r4
 801feb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801feba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801febe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fec2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fec4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fec8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fecc:	fb04 fa0a 	mul.w	sl, r4, sl
 801fed0:	44bc      	add	ip, r7
 801fed2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fed6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801feda:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fede:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fee2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fee6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801feea:	ea4c 040a 	orr.w	r4, ip, sl
 801feee:	940d      	str	r4, [sp, #52]	; 0x34
 801fef0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fef2:	2cff      	cmp	r4, #255	; 0xff
 801fef4:	d020      	beq.n	801ff38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801fef6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fef8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fefc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fefe:	4367      	muls	r7, r4
 801ff00:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ff02:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff06:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ff0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ff0c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ff10:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff14:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff18:	44bc      	add	ip, r7
 801ff1a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ff1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff22:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff2a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ff32:	ea4c 040a 	orr.w	r4, ip, sl
 801ff36:	9409      	str	r4, [sp, #36]	; 0x24
 801ff38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ff3a:	2cff      	cmp	r4, #255	; 0xff
 801ff3c:	d020      	beq.n	801ff80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801ff3e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ff40:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ff44:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ff46:	4367      	muls	r7, r4
 801ff48:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ff4a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff4e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ff52:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ff54:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ff58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff5c:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff60:	44bc      	add	ip, r7
 801ff62:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ff66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff6a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ff7a:	ea4c 040a 	orr.w	r4, ip, sl
 801ff7e:	940e      	str	r4, [sp, #56]	; 0x38
 801ff80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ff82:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ff86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff8a:	43d2      	mvns	r2, r2
 801ff8c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ff90:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ff92:	b2d2      	uxtb	r2, r2
 801ff94:	fb08 f707 	mul.w	r7, r8, r7
 801ff98:	fb01 770c 	mla	r7, r1, ip, r7
 801ff9c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ffa0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ffa2:	fb00 770c 	mla	r7, r0, ip, r7
 801ffa6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ffaa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ffac:	fb09 770c 	mla	r7, r9, ip, r7
 801ffb0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ffb4:	fb08 f80c 	mul.w	r8, r8, ip
 801ffb8:	0a3f      	lsrs	r7, r7, #8
 801ffba:	fb01 8303 	mla	r3, r1, r3, r8
 801ffbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ffc0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ffc4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ffc8:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ffca:	fb00 330a 	mla	r3, r0, sl, r3
 801ffce:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ffd2:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ffd6:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ffda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffde:	fb03 f102 	mul.w	r1, r3, r2
 801ffe2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ffe6:	1c4b      	adds	r3, r1, #1
 801ffe8:	ea47 070c 	orr.w	r7, r7, ip
 801ffec:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fff0:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801fff4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fff8:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801fffc:	4353      	muls	r3, r2
 801fffe:	1c59      	adds	r1, r3, #1
 8020000:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020004:	0a3b      	lsrs	r3, r7, #8
 8020006:	0c3f      	lsrs	r7, r7, #16
 8020008:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802000c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020010:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020014:	435a      	muls	r2, r3
 8020016:	1c53      	adds	r3, r2, #1
 8020018:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802001c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020020:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020024:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020026:	f10e 0e03 	add.w	lr, lr, #3
 802002a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802002c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020030:	441a      	add	r2, r3
 8020032:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020034:	9225      	str	r2, [sp, #148]	; 0x94
 8020036:	441d      	add	r5, r3
 8020038:	e65a      	b.n	801fcf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802003a:	2800      	cmp	r0, #0
 802003c:	f43f aef7 	beq.w	801fe2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020040:	5c79      	ldrb	r1, [r7, r1]
 8020042:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020046:	9109      	str	r1, [sp, #36]	; 0x24
 8020048:	0e09      	lsrs	r1, r1, #24
 802004a:	9111      	str	r1, [sp, #68]	; 0x44
 802004c:	e6ef      	b.n	801fe2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802004e:	b01b      	add	sp, #108	; 0x6c
 8020050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020054 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8020054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020058:	b08d      	sub	sp, #52	; 0x34
 802005a:	468b      	mov	fp, r1
 802005c:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8020060:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8020064:	fb0c 5703 	mla	r7, ip, r3, r5
 8020068:	f1bc 0f00 	cmp.w	ip, #0
 802006c:	910b      	str	r1, [sp, #44]	; 0x2c
 802006e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020072:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8020076:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 802007a:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 802007e:	eb02 0607 	add.w	r6, r2, r7
 8020082:	f89b 4000 	ldrb.w	r4, [fp]
 8020086:	f89b 0001 	ldrb.w	r0, [fp, #1]
 802008a:	f89b 1002 	ldrb.w	r1, [fp, #2]
 802008e:	f2c0 80c1 	blt.w	8020214 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8020092:	45e6      	cmp	lr, ip
 8020094:	f340 80be 	ble.w	8020214 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8020098:	2d00      	cmp	r5, #0
 802009a:	f2c0 80b7 	blt.w	802020c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802009e:	42ab      	cmp	r3, r5
 80200a0:	f340 80b4 	ble.w	802020c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 80200a4:	5dd2      	ldrb	r2, [r2, r7]
 80200a6:	9205      	str	r2, [sp, #20]
 80200a8:	7872      	ldrb	r2, [r6, #1]
 80200aa:	9206      	str	r2, [sp, #24]
 80200ac:	78b2      	ldrb	r2, [r6, #2]
 80200ae:	9207      	str	r2, [sp, #28]
 80200b0:	1c6a      	adds	r2, r5, #1
 80200b2:	f100 80b6 	bmi.w	8020222 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80200b6:	4293      	cmp	r3, r2
 80200b8:	f340 80b3 	ble.w	8020222 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80200bc:	f1b8 0f00 	cmp.w	r8, #0
 80200c0:	f000 80af 	beq.w	8020222 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80200c4:	78f2      	ldrb	r2, [r6, #3]
 80200c6:	9201      	str	r2, [sp, #4]
 80200c8:	7932      	ldrb	r2, [r6, #4]
 80200ca:	9202      	str	r2, [sp, #8]
 80200cc:	7972      	ldrb	r2, [r6, #5]
 80200ce:	9203      	str	r2, [sp, #12]
 80200d0:	f11c 0c01 	adds.w	ip, ip, #1
 80200d4:	f100 80ad 	bmi.w	8020232 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80200d8:	45e6      	cmp	lr, ip
 80200da:	f340 80aa 	ble.w	8020232 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80200de:	f1ba 0f00 	cmp.w	sl, #0
 80200e2:	f000 80a6 	beq.w	8020232 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 80200e6:	2d00      	cmp	r5, #0
 80200e8:	f2c0 809f 	blt.w	802022a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80200ec:	42ab      	cmp	r3, r5
 80200ee:	f340 809c 	ble.w	802022a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 80200f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80200f6:	f816 9002 	ldrb.w	r9, [r6, r2]
 80200fa:	2203      	movs	r2, #3
 80200fc:	fb03 6c02 	mla	ip, r3, r2, r6
 8020100:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8020104:	f89c e002 	ldrb.w	lr, [ip, #2]
 8020108:	9704      	str	r7, [sp, #16]
 802010a:	3501      	adds	r5, #1
 802010c:	f100 8098 	bmi.w	8020240 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020110:	42ab      	cmp	r3, r5
 8020112:	f340 8095 	ble.w	8020240 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020116:	f1b8 0f00 	cmp.w	r8, #0
 802011a:	f000 8091 	beq.w	8020240 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 802011e:	f04f 0c03 	mov.w	ip, #3
 8020122:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8020126:	5cb5      	ldrb	r5, [r6, r2]
 8020128:	fb03 620c 	mla	r2, r3, ip, r6
 802012c:	fb03 630c 	mla	r3, r3, ip, r6
 8020130:	7912      	ldrb	r2, [r2, #4]
 8020132:	795e      	ldrb	r6, [r3, #5]
 8020134:	fa1f f388 	uxth.w	r3, r8
 8020138:	fa1f fc8a 	uxth.w	ip, sl
 802013c:	fb03 f70c 	mul.w	r7, r3, ip
 8020140:	011b      	lsls	r3, r3, #4
 8020142:	9708      	str	r7, [sp, #32]
 8020144:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020148:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 802014c:	1bdb      	subs	r3, r3, r7
 802014e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8020152:	fa1f fc8c 	uxth.w	ip, ip
 8020156:	b29b      	uxth	r3, r3
 8020158:	9709      	str	r7, [sp, #36]	; 0x24
 802015a:	ebaa 0a0c 	sub.w	sl, sl, ip
 802015e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020160:	930a      	str	r3, [sp, #40]	; 0x28
 8020162:	fa1f fa8a 	uxth.w	sl, sl
 8020166:	ea6f 0807 	mvn.w	r8, r7
 802016a:	9f01      	ldr	r7, [sp, #4]
 802016c:	435f      	muls	r7, r3
 802016e:	9b05      	ldr	r3, [sp, #20]
 8020170:	fa5f f888 	uxtb.w	r8, r8
 8020174:	fb0a 7703 	mla	r7, sl, r3, r7
 8020178:	9b08      	ldr	r3, [sp, #32]
 802017a:	fb14 f408 	smulbb	r4, r4, r8
 802017e:	fb0c 7709 	mla	r7, ip, r9, r7
 8020182:	fb10 f008 	smulbb	r0, r0, r8
 8020186:	fb11 f108 	smulbb	r1, r1, r8
 802018a:	fb03 7705 	mla	r7, r3, r5, r7
 802018e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020190:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020194:	fb07 4703 	mla	r7, r7, r3, r4
 8020198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802019a:	b2bf      	uxth	r7, r7
 802019c:	1c7c      	adds	r4, r7, #1
 802019e:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 80201a2:	1224      	asrs	r4, r4, #8
 80201a4:	f88b 4000 	strb.w	r4, [fp]
 80201a8:	9c02      	ldr	r4, [sp, #8]
 80201aa:	435c      	muls	r4, r3
 80201ac:	9b06      	ldr	r3, [sp, #24]
 80201ae:	fb0a 4403 	mla	r4, sl, r3, r4
 80201b2:	9b04      	ldr	r3, [sp, #16]
 80201b4:	fb0c 4403 	mla	r4, ip, r3, r4
 80201b8:	9b08      	ldr	r3, [sp, #32]
 80201ba:	fb03 4402 	mla	r4, r3, r2, r4
 80201be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80201c2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80201c6:	fb04 0403 	mla	r4, r4, r3, r0
 80201ca:	9b03      	ldr	r3, [sp, #12]
 80201cc:	435a      	muls	r2, r3
 80201ce:	b2a4      	uxth	r4, r4
 80201d0:	4613      	mov	r3, r2
 80201d2:	9a07      	ldr	r2, [sp, #28]
 80201d4:	1c60      	adds	r0, r4, #1
 80201d6:	fb0a 3a02 	mla	sl, sl, r2, r3
 80201da:	9b08      	ldr	r3, [sp, #32]
 80201dc:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 80201e0:	fb0c ac0e 	mla	ip, ip, lr, sl
 80201e4:	1224      	asrs	r4, r4, #8
 80201e6:	fb03 c606 	mla	r6, r3, r6, ip
 80201ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80201ec:	f88b 4001 	strb.w	r4, [fp, #1]
 80201f0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80201f4:	fb06 1103 	mla	r1, r6, r3, r1
 80201f8:	b289      	uxth	r1, r1
 80201fa:	1c4e      	adds	r6, r1, #1
 80201fc:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8020200:	1209      	asrs	r1, r1, #8
 8020202:	f88b 1002 	strb.w	r1, [fp, #2]
 8020206:	b00d      	add	sp, #52	; 0x34
 8020208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802020c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020210:	9405      	str	r4, [sp, #20]
 8020212:	e74d      	b.n	80200b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8020214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020218:	9401      	str	r4, [sp, #4]
 802021a:	9405      	str	r4, [sp, #20]
 802021c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020220:	e756      	b.n	80200d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8020222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020226:	9401      	str	r4, [sp, #4]
 8020228:	e752      	b.n	80200d0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 802022a:	468e      	mov	lr, r1
 802022c:	9004      	str	r0, [sp, #16]
 802022e:	46a1      	mov	r9, r4
 8020230:	e76b      	b.n	802010a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8020232:	460e      	mov	r6, r1
 8020234:	4602      	mov	r2, r0
 8020236:	4625      	mov	r5, r4
 8020238:	468e      	mov	lr, r1
 802023a:	9004      	str	r0, [sp, #16]
 802023c:	46a1      	mov	r9, r4
 802023e:	e779      	b.n	8020134 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8020240:	460e      	mov	r6, r1
 8020242:	4602      	mov	r2, r0
 8020244:	4625      	mov	r5, r4
 8020246:	e775      	b.n	8020134 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08020248 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802024c:	b09f      	sub	sp, #124	; 0x7c
 802024e:	920e      	str	r2, [sp, #56]	; 0x38
 8020250:	9307      	str	r3, [sp, #28]
 8020252:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020254:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020258:	901d      	str	r0, [sp, #116]	; 0x74
 802025a:	930c      	str	r3, [sp, #48]	; 0x30
 802025c:	6850      	ldr	r0, [r2, #4]
 802025e:	910b      	str	r1, [sp, #44]	; 0x2c
 8020260:	6812      	ldr	r2, [r2, #0]
 8020262:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020266:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 802026a:	fb00 1303 	mla	r3, r0, r3, r1
 802026e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020272:	18d3      	adds	r3, r2, r3
 8020274:	9308      	str	r3, [sp, #32]
 8020276:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020278:	681b      	ldr	r3, [r3, #0]
 802027a:	930a      	str	r3, [sp, #40]	; 0x28
 802027c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802027e:	43db      	mvns	r3, r3
 8020280:	b2db      	uxtb	r3, r3
 8020282:	9309      	str	r3, [sp, #36]	; 0x24
 8020284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020286:	2b00      	cmp	r3, #0
 8020288:	dc03      	bgt.n	8020292 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802028a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802028c:	2b00      	cmp	r3, #0
 802028e:	f340 81f5 	ble.w	802067c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8020292:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020294:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020298:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802029c:	1e48      	subs	r0, r1, #1
 802029e:	1e54      	subs	r4, r2, #1
 80202a0:	9b07      	ldr	r3, [sp, #28]
 80202a2:	2b00      	cmp	r3, #0
 80202a4:	f340 80d5 	ble.w	8020452 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80202a8:	ea5f 452a 	movs.w	r5, sl, asr #16
 80202ac:	ea4f 4328 	mov.w	r3, r8, asr #16
 80202b0:	d406      	bmi.n	80202c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80202b2:	4285      	cmp	r5, r0
 80202b4:	da04      	bge.n	80202c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	db02      	blt.n	80202c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80202ba:	42a3      	cmp	r3, r4
 80202bc:	f2c0 80ca 	blt.w	8020454 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80202c0:	3501      	adds	r5, #1
 80202c2:	f100 80bb 	bmi.w	802043c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80202c6:	42a9      	cmp	r1, r5
 80202c8:	f2c0 80b8 	blt.w	802043c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80202cc:	3301      	adds	r3, #1
 80202ce:	f100 80b5 	bmi.w	802043c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80202d2:	429a      	cmp	r2, r3
 80202d4:	f2c0 80b2 	blt.w	802043c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80202d8:	9b07      	ldr	r3, [sp, #28]
 80202da:	9d08      	ldr	r5, [sp, #32]
 80202dc:	930d      	str	r3, [sp, #52]	; 0x34
 80202de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80202e0:	2b00      	cmp	r3, #0
 80202e2:	f340 80d6 	ble.w	8020492 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 80202e6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80202e8:	ea4f 4428 	mov.w	r4, r8, asr #16
 80202ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80202ee:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80202f2:	68c6      	ldr	r6, [r0, #12]
 80202f4:	ea5f 402a 	movs.w	r0, sl, asr #16
 80202f8:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80202fc:	689b      	ldr	r3, [r3, #8]
 80202fe:	f100 810f 	bmi.w	8020520 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020302:	1e5f      	subs	r7, r3, #1
 8020304:	42b8      	cmp	r0, r7
 8020306:	f280 810b 	bge.w	8020520 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802030a:	2c00      	cmp	r4, #0
 802030c:	f2c0 8108 	blt.w	8020520 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020310:	1e77      	subs	r7, r6, #1
 8020312:	42bc      	cmp	r4, r7
 8020314:	f280 8104 	bge.w	8020520 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020318:	b21b      	sxth	r3, r3
 802031a:	fb04 0003 	mla	r0, r4, r3, r0
 802031e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020320:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020324:	1826      	adds	r6, r4, r0
 8020326:	5c24      	ldrb	r4, [r4, r0]
 8020328:	78b7      	ldrb	r7, [r6, #2]
 802032a:	7870      	ldrb	r0, [r6, #1]
 802032c:	970f      	str	r7, [sp, #60]	; 0x3c
 802032e:	7977      	ldrb	r7, [r6, #5]
 8020330:	f896 e003 	ldrb.w	lr, [r6, #3]
 8020334:	f896 c004 	ldrb.w	ip, [r6, #4]
 8020338:	9710      	str	r7, [sp, #64]	; 0x40
 802033a:	b1c9      	cbz	r1, 8020370 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802033c:	f04f 0b03 	mov.w	fp, #3
 8020340:	f06f 0904 	mvn.w	r9, #4
 8020344:	3605      	adds	r6, #5
 8020346:	fb13 930b 	smlabb	r3, r3, fp, r9
 802034a:	eb06 0b03 	add.w	fp, r6, r3
 802034e:	5cf3      	ldrb	r3, [r6, r3]
 8020350:	9311      	str	r3, [sp, #68]	; 0x44
 8020352:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8020356:	9313      	str	r3, [sp, #76]	; 0x4c
 8020358:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802035c:	9315      	str	r3, [sp, #84]	; 0x54
 802035e:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8020362:	9312      	str	r3, [sp, #72]	; 0x48
 8020364:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8020368:	9314      	str	r3, [sp, #80]	; 0x50
 802036a:	f89b 3005 	ldrb.w	r3, [fp, #5]
 802036e:	9316      	str	r3, [sp, #88]	; 0x58
 8020370:	b292      	uxth	r2, r2
 8020372:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8020374:	b289      	uxth	r1, r1
 8020376:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802037a:	fb02 f601 	mul.w	r6, r2, r1
 802037e:	0112      	lsls	r2, r2, #4
 8020380:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8020384:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8020388:	1b92      	subs	r2, r2, r6
 802038a:	b289      	uxth	r1, r1
 802038c:	b292      	uxth	r2, r2
 802038e:	eba9 0901 	sub.w	r9, r9, r1
 8020392:	fb02 fe0e 	mul.w	lr, r2, lr
 8020396:	fa1f f989 	uxth.w	r9, r9
 802039a:	fb02 fc0c 	mul.w	ip, r2, ip
 802039e:	fb09 e404 	mla	r4, r9, r4, lr
 80203a2:	f895 e000 	ldrb.w	lr, [r5]
 80203a6:	fb09 c000 	mla	r0, r9, r0, ip
 80203aa:	fb01 4407 	mla	r4, r1, r7, r4
 80203ae:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80203b0:	fb06 4407 	mla	r4, r6, r7, r4
 80203b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80203b6:	fb1e fe07 	smulbb	lr, lr, r7
 80203ba:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80203be:	fb04 e403 	mla	r4, r4, r3, lr
 80203c2:	b2a4      	uxth	r4, r4
 80203c4:	f104 0e01 	add.w	lr, r4, #1
 80203c8:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80203cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80203ce:	fb01 0004 	mla	r0, r1, r4, r0
 80203d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80203d4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80203d8:	fb06 0004 	mla	r0, r6, r4, r0
 80203dc:	786c      	ldrb	r4, [r5, #1]
 80203de:	f885 e000 	strb.w	lr, [r5]
 80203e2:	fb14 f407 	smulbb	r4, r4, r7
 80203e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80203ea:	fb00 4003 	mla	r0, r0, r3, r4
 80203ee:	b280      	uxth	r0, r0
 80203f0:	1c44      	adds	r4, r0, #1
 80203f2:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80203f6:	1200      	asrs	r0, r0, #8
 80203f8:	7068      	strb	r0, [r5, #1]
 80203fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80203fc:	4342      	muls	r2, r0
 80203fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020400:	fb09 2200 	mla	r2, r9, r0, r2
 8020404:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020406:	fb01 2100 	mla	r1, r1, r0, r2
 802040a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802040c:	fb06 1602 	mla	r6, r6, r2, r1
 8020410:	78a9      	ldrb	r1, [r5, #2]
 8020412:	fb11 f107 	smulbb	r1, r1, r7
 8020416:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802041a:	fb06 1303 	mla	r3, r6, r3, r1
 802041e:	b29b      	uxth	r3, r3
 8020420:	1c5e      	adds	r6, r3, #1
 8020422:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020426:	121b      	asrs	r3, r3, #8
 8020428:	70ab      	strb	r3, [r5, #2]
 802042a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802042c:	3503      	adds	r5, #3
 802042e:	449a      	add	sl, r3
 8020430:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020432:	4498      	add	r8, r3
 8020434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020436:	3b01      	subs	r3, #1
 8020438:	930d      	str	r3, [sp, #52]	; 0x34
 802043a:	e750      	b.n	80202de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802043c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802043e:	449a      	add	sl, r3
 8020440:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020442:	4498      	add	r8, r3
 8020444:	9b07      	ldr	r3, [sp, #28]
 8020446:	3b01      	subs	r3, #1
 8020448:	9307      	str	r3, [sp, #28]
 802044a:	9b08      	ldr	r3, [sp, #32]
 802044c:	3303      	adds	r3, #3
 802044e:	9308      	str	r3, [sp, #32]
 8020450:	e726      	b.n	80202a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020452:	d026      	beq.n	80204a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8020454:	9b07      	ldr	r3, [sp, #28]
 8020456:	982b      	ldr	r0, [sp, #172]	; 0xac
 8020458:	3b01      	subs	r3, #1
 802045a:	fb00 a003 	mla	r0, r0, r3, sl
 802045e:	1400      	asrs	r0, r0, #16
 8020460:	f53f af3a 	bmi.w	80202d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020464:	3901      	subs	r1, #1
 8020466:	4288      	cmp	r0, r1
 8020468:	f6bf af36 	bge.w	80202d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802046c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802046e:	fb01 8303 	mla	r3, r1, r3, r8
 8020472:	141b      	asrs	r3, r3, #16
 8020474:	f53f af30 	bmi.w	80202d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020478:	3a01      	subs	r2, #1
 802047a:	4293      	cmp	r3, r2
 802047c:	f6bf af2c 	bge.w	80202d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020480:	9b08      	ldr	r3, [sp, #32]
 8020482:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020486:	1cdd      	adds	r5, r3, #3
 8020488:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 802048c:	f1bc 0f00 	cmp.w	ip, #0
 8020490:	dc5f      	bgt.n	8020552 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8020492:	9b07      	ldr	r3, [sp, #28]
 8020494:	9a08      	ldr	r2, [sp, #32]
 8020496:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802049a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802049e:	441a      	add	r2, r3
 80204a0:	9208      	str	r2, [sp, #32]
 80204a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	f340 80e9 	ble.w	802067c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80204aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80204ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80204b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80204b8:	eef0 6a62 	vmov.f32	s13, s5
 80204bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80204c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80204c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204c8:	ee16 aa90 	vmov	sl, s13
 80204cc:	eef0 6a43 	vmov.f32	s13, s6
 80204d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80204d4:	ee16 8a90 	vmov	r8, s13
 80204d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80204dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80204e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80204e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80204e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80204ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80204f0:	ee12 2a90 	vmov	r2, s5
 80204f4:	eef0 2a47 	vmov.f32	s5, s14
 80204f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80204fc:	ee13 2a10 	vmov	r2, s6
 8020500:	932b      	str	r3, [sp, #172]	; 0xac
 8020502:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020504:	eeb0 3a67 	vmov.f32	s6, s15
 8020508:	fb92 f3f3 	sdiv	r3, r2, r3
 802050c:	932c      	str	r3, [sp, #176]	; 0xb0
 802050e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020512:	3b01      	subs	r3, #1
 8020514:	930b      	str	r3, [sp, #44]	; 0x2c
 8020516:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020518:	bf08      	it	eq
 802051a:	4613      	moveq	r3, r2
 802051c:	9307      	str	r3, [sp, #28]
 802051e:	e6b1      	b.n	8020284 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020520:	1c47      	adds	r7, r0, #1
 8020522:	d482      	bmi.n	802042a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020524:	42bb      	cmp	r3, r7
 8020526:	db80      	blt.n	802042a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020528:	1c67      	adds	r7, r4, #1
 802052a:	f53f af7e 	bmi.w	802042a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802052e:	42be      	cmp	r6, r7
 8020530:	f6ff af7b 	blt.w	802042a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020534:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020536:	b236      	sxth	r6, r6
 8020538:	9001      	str	r0, [sp, #4]
 802053a:	b21b      	sxth	r3, r3
 802053c:	9600      	str	r6, [sp, #0]
 802053e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020540:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8020544:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8020548:	4629      	mov	r1, r5
 802054a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802054c:	f7ff fd82 	bl	8020054 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020550:	e76b      	b.n	802042a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020552:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8020554:	ea4f 402a 	mov.w	r0, sl, asr #16
 8020558:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802055c:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8020560:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8020564:	ea4f 4128 	mov.w	r1, r8, asr #16
 8020568:	fb07 0101 	mla	r1, r7, r1, r0
 802056c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802056e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020572:	1844      	adds	r4, r0, r1
 8020574:	5c40      	ldrb	r0, [r0, r1]
 8020576:	78a6      	ldrb	r6, [r4, #2]
 8020578:	7861      	ldrb	r1, [r4, #1]
 802057a:	960f      	str	r6, [sp, #60]	; 0x3c
 802057c:	78e6      	ldrb	r6, [r4, #3]
 802057e:	910d      	str	r1, [sp, #52]	; 0x34
 8020580:	9610      	str	r6, [sp, #64]	; 0x40
 8020582:	f894 9004 	ldrb.w	r9, [r4, #4]
 8020586:	f894 b005 	ldrb.w	fp, [r4, #5]
 802058a:	b192      	cbz	r2, 80205b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802058c:	f06f 0604 	mvn.w	r6, #4
 8020590:	2103      	movs	r1, #3
 8020592:	3405      	adds	r4, #5
 8020594:	fb17 6701 	smlabb	r7, r7, r1, r6
 8020598:	19e6      	adds	r6, r4, r7
 802059a:	5de4      	ldrb	r4, [r4, r7]
 802059c:	9417      	str	r4, [sp, #92]	; 0x5c
 802059e:	7874      	ldrb	r4, [r6, #1]
 80205a0:	9419      	str	r4, [sp, #100]	; 0x64
 80205a2:	78b4      	ldrb	r4, [r6, #2]
 80205a4:	941b      	str	r4, [sp, #108]	; 0x6c
 80205a6:	78f4      	ldrb	r4, [r6, #3]
 80205a8:	9418      	str	r4, [sp, #96]	; 0x60
 80205aa:	7934      	ldrb	r4, [r6, #4]
 80205ac:	941a      	str	r4, [sp, #104]	; 0x68
 80205ae:	7974      	ldrb	r4, [r6, #5]
 80205b0:	941c      	str	r4, [sp, #112]	; 0x70
 80205b2:	b29b      	uxth	r3, r3
 80205b4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80205b6:	b292      	uxth	r2, r2
 80205b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80205ba:	3503      	adds	r5, #3
 80205bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80205c0:	fb03 f402 	mul.w	r4, r3, r2
 80205c4:	011b      	lsls	r3, r3, #4
 80205c6:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80205ca:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80205ce:	1b1b      	subs	r3, r3, r4
 80205d0:	b292      	uxth	r2, r2
 80205d2:	b29b      	uxth	r3, r3
 80205d4:	1ab6      	subs	r6, r6, r2
 80205d6:	435f      	muls	r7, r3
 80205d8:	b2b6      	uxth	r6, r6
 80205da:	fb03 f909 	mul.w	r9, r3, r9
 80205de:	fb03 fb0b 	mul.w	fp, r3, fp
 80205e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80205e4:	fb06 7000 	mla	r0, r6, r0, r7
 80205e8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80205ea:	fb06 bb03 	mla	fp, r6, r3, fp
 80205ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80205f0:	fb02 0007 	mla	r0, r2, r7, r0
 80205f4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80205f6:	fb02 bb03 	mla	fp, r2, r3, fp
 80205fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80205fc:	fb04 0007 	mla	r0, r4, r7, r0
 8020600:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8020604:	fb17 f701 	smulbb	r7, r7, r1
 8020608:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802060c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802060e:	fb00 700e 	mla	r0, r0, lr, r7
 8020612:	fb06 9101 	mla	r1, r6, r1, r9
 8020616:	b280      	uxth	r0, r0
 8020618:	1c47      	adds	r7, r0, #1
 802061a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 802061e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020620:	1200      	asrs	r0, r0, #8
 8020622:	f805 0c06 	strb.w	r0, [r5, #-6]
 8020626:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020628:	fb02 1100 	mla	r1, r2, r0, r1
 802062c:	981a      	ldr	r0, [sp, #104]	; 0x68
 802062e:	fb04 1100 	mla	r1, r4, r0, r1
 8020632:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8020636:	fb04 b403 	mla	r4, r4, r3, fp
 802063a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 802063e:	fb10 f007 	smulbb	r0, r0, r7
 8020642:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020646:	fb13 f307 	smulbb	r3, r3, r7
 802064a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802064e:	fb01 010e 	mla	r1, r1, lr, r0
 8020652:	fb04 340e 	mla	r4, r4, lr, r3
 8020656:	b289      	uxth	r1, r1
 8020658:	b2a4      	uxth	r4, r4
 802065a:	1c48      	adds	r0, r1, #1
 802065c:	1c63      	adds	r3, r4, #1
 802065e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020662:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020666:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020668:	1209      	asrs	r1, r1, #8
 802066a:	1224      	asrs	r4, r4, #8
 802066c:	449a      	add	sl, r3
 802066e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020670:	f805 1c05 	strb.w	r1, [r5, #-5]
 8020674:	f805 4c04 	strb.w	r4, [r5, #-4]
 8020678:	4498      	add	r8, r3
 802067a:	e707      	b.n	802048c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802067c:	b01f      	add	sp, #124	; 0x7c
 802067e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020682 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020686:	b087      	sub	sp, #28
 8020688:	780d      	ldrb	r5, [r1, #0]
 802068a:	784c      	ldrb	r4, [r1, #1]
 802068c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8020690:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8020694:	9004      	str	r0, [sp, #16]
 8020696:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 802069a:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 802069e:	9005      	str	r0, [sp, #20]
 80206a0:	fb06 bc03 	mla	ip, r6, r3, fp
 80206a4:	2e00      	cmp	r6, #0
 80206a6:	7888      	ldrb	r0, [r1, #2]
 80206a8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80206ac:	eb02 090c 	add.w	r9, r2, ip
 80206b0:	f2c0 8084 	blt.w	80207bc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80206b4:	42b7      	cmp	r7, r6
 80206b6:	f340 8081 	ble.w	80207bc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 80206ba:	f1bb 0f00 	cmp.w	fp, #0
 80206be:	db79      	blt.n	80207b4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80206c0:	455b      	cmp	r3, fp
 80206c2:	dd77      	ble.n	80207b4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 80206c4:	f812 200c 	ldrb.w	r2, [r2, ip]
 80206c8:	9201      	str	r2, [sp, #4]
 80206ca:	f899 2001 	ldrb.w	r2, [r9, #1]
 80206ce:	9202      	str	r2, [sp, #8]
 80206d0:	f899 2002 	ldrb.w	r2, [r9, #2]
 80206d4:	9203      	str	r2, [sp, #12]
 80206d6:	f11b 0201 	adds.w	r2, fp, #1
 80206da:	d476      	bmi.n	80207ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80206dc:	4293      	cmp	r3, r2
 80206de:	dd74      	ble.n	80207ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80206e0:	9a04      	ldr	r2, [sp, #16]
 80206e2:	2a00      	cmp	r2, #0
 80206e4:	d071      	beq.n	80207ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 80206e6:	f899 8003 	ldrb.w	r8, [r9, #3]
 80206ea:	f899 c004 	ldrb.w	ip, [r9, #4]
 80206ee:	f899 a005 	ldrb.w	sl, [r9, #5]
 80206f2:	3601      	adds	r6, #1
 80206f4:	d471      	bmi.n	80207da <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80206f6:	42b7      	cmp	r7, r6
 80206f8:	dd6f      	ble.n	80207da <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80206fa:	9a05      	ldr	r2, [sp, #20]
 80206fc:	2a00      	cmp	r2, #0
 80206fe:	d06c      	beq.n	80207da <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8020700:	f1bb 0f00 	cmp.w	fp, #0
 8020704:	db65      	blt.n	80207d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8020706:	455b      	cmp	r3, fp
 8020708:	dd63      	ble.n	80207d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 802070a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802070e:	f819 e002 	ldrb.w	lr, [r9, r2]
 8020712:	2203      	movs	r2, #3
 8020714:	fb03 9602 	mla	r6, r3, r2, r9
 8020718:	7877      	ldrb	r7, [r6, #1]
 802071a:	78b6      	ldrb	r6, [r6, #2]
 802071c:	f11b 0b01 	adds.w	fp, fp, #1
 8020720:	d40c      	bmi.n	802073c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020722:	455b      	cmp	r3, fp
 8020724:	dd0a      	ble.n	802073c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020726:	9a04      	ldr	r2, [sp, #16]
 8020728:	b142      	cbz	r2, 802073c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 802072a:	2203      	movs	r2, #3
 802072c:	fb13 2002 	smlabb	r0, r3, r2, r2
 8020730:	f819 5000 	ldrb.w	r5, [r9, r0]
 8020734:	fb03 9002 	mla	r0, r3, r2, r9
 8020738:	7904      	ldrb	r4, [r0, #4]
 802073a:	7940      	ldrb	r0, [r0, #5]
 802073c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020740:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8020744:	fb03 fb02 	mul.w	fp, r3, r2
 8020748:	011b      	lsls	r3, r3, #4
 802074a:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802074e:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8020752:	eba3 030b 	sub.w	r3, r3, fp
 8020756:	b292      	uxth	r2, r2
 8020758:	b29b      	uxth	r3, r3
 802075a:	eba9 0902 	sub.w	r9, r9, r2
 802075e:	9304      	str	r3, [sp, #16]
 8020760:	fa1f f989 	uxth.w	r9, r9
 8020764:	fb03 f808 	mul.w	r8, r3, r8
 8020768:	9b01      	ldr	r3, [sp, #4]
 802076a:	fb09 8803 	mla	r8, r9, r3, r8
 802076e:	9b04      	ldr	r3, [sp, #16]
 8020770:	fb03 fc0c 	mul.w	ip, r3, ip
 8020774:	9b02      	ldr	r3, [sp, #8]
 8020776:	fb02 880e 	mla	r8, r2, lr, r8
 802077a:	fb09 cc03 	mla	ip, r9, r3, ip
 802077e:	9b04      	ldr	r3, [sp, #16]
 8020780:	fb0b 8805 	mla	r8, fp, r5, r8
 8020784:	fb02 c707 	mla	r7, r2, r7, ip
 8020788:	fb03 f30a 	mul.w	r3, r3, sl
 802078c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020790:	fb0b 7404 	mla	r4, fp, r4, r7
 8020794:	f881 8000 	strb.w	r8, [r1]
 8020798:	1224      	asrs	r4, r4, #8
 802079a:	704c      	strb	r4, [r1, #1]
 802079c:	9c03      	ldr	r4, [sp, #12]
 802079e:	fb09 3904 	mla	r9, r9, r4, r3
 80207a2:	fb02 9206 	mla	r2, r2, r6, r9
 80207a6:	fb0b 2000 	mla	r0, fp, r0, r2
 80207aa:	1200      	asrs	r0, r0, #8
 80207ac:	7088      	strb	r0, [r1, #2]
 80207ae:	b007      	add	sp, #28
 80207b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207b4:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80207b8:	9501      	str	r5, [sp, #4]
 80207ba:	e78c      	b.n	80206d6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 80207bc:	4682      	mov	sl, r0
 80207be:	46a4      	mov	ip, r4
 80207c0:	46a8      	mov	r8, r5
 80207c2:	9501      	str	r5, [sp, #4]
 80207c4:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80207c8:	e793      	b.n	80206f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80207ca:	4682      	mov	sl, r0
 80207cc:	46a4      	mov	ip, r4
 80207ce:	46a8      	mov	r8, r5
 80207d0:	e78f      	b.n	80206f2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 80207d2:	4606      	mov	r6, r0
 80207d4:	4627      	mov	r7, r4
 80207d6:	46ae      	mov	lr, r5
 80207d8:	e7a0      	b.n	802071c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80207da:	4606      	mov	r6, r0
 80207dc:	4627      	mov	r7, r4
 80207de:	46ae      	mov	lr, r5
 80207e0:	e7ac      	b.n	802073c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

080207e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207e6:	b09b      	sub	sp, #108	; 0x6c
 80207e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80207ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80207ec:	9019      	str	r0, [sp, #100]	; 0x64
 80207ee:	9109      	str	r1, [sp, #36]	; 0x24
 80207f0:	6850      	ldr	r0, [r2, #4]
 80207f2:	9306      	str	r3, [sp, #24]
 80207f4:	6812      	ldr	r2, [r2, #0]
 80207f6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80207fa:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 80207fe:	fb00 1303 	mla	r3, r0, r3, r1
 8020802:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020806:	18d3      	adds	r3, r2, r3
 8020808:	9307      	str	r3, [sp, #28]
 802080a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802080c:	681b      	ldr	r3, [r3, #0]
 802080e:	9308      	str	r3, [sp, #32]
 8020810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020812:	2b00      	cmp	r3, #0
 8020814:	dc03      	bgt.n	802081e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020818:	2b00      	cmp	r3, #0
 802081a:	f340 81ab 	ble.w	8020b74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802081e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020820:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020824:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020828:	1e48      	subs	r0, r1, #1
 802082a:	1e55      	subs	r5, r2, #1
 802082c:	9b06      	ldr	r3, [sp, #24]
 802082e:	2b00      	cmp	r3, #0
 8020830:	f340 80b1 	ble.w	8020996 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020834:	ea5f 462b 	movs.w	r6, fp, asr #16
 8020838:	ea4f 4324 	mov.w	r3, r4, asr #16
 802083c:	d406      	bmi.n	802084c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802083e:	4286      	cmp	r6, r0
 8020840:	da04      	bge.n	802084c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020842:	2b00      	cmp	r3, #0
 8020844:	db02      	blt.n	802084c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020846:	42ab      	cmp	r3, r5
 8020848:	f2c0 80a6 	blt.w	8020998 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802084c:	3601      	adds	r6, #1
 802084e:	f100 8097 	bmi.w	8020980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020852:	42b1      	cmp	r1, r6
 8020854:	f2c0 8094 	blt.w	8020980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020858:	3301      	adds	r3, #1
 802085a:	f100 8091 	bmi.w	8020980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802085e:	429a      	cmp	r2, r3
 8020860:	f2c0 808e 	blt.w	8020980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020864:	9b06      	ldr	r3, [sp, #24]
 8020866:	9e07      	ldr	r6, [sp, #28]
 8020868:	930a      	str	r3, [sp, #40]	; 0x28
 802086a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802086c:	2b00      	cmp	r3, #0
 802086e:	f340 80b0 	ble.w	80209d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020872:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8020874:	1425      	asrs	r5, r4, #16
 8020876:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020878:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802087c:	68c7      	ldr	r7, [r0, #12]
 802087e:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020882:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020886:	689b      	ldr	r3, [r3, #8]
 8020888:	f100 80ea 	bmi.w	8020a60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802088c:	f103 3cff 	add.w	ip, r3, #4294967295
 8020890:	4560      	cmp	r0, ip
 8020892:	f280 80e5 	bge.w	8020a60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020896:	2d00      	cmp	r5, #0
 8020898:	f2c0 80e2 	blt.w	8020a60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802089c:	f107 3cff 	add.w	ip, r7, #4294967295
 80208a0:	4565      	cmp	r5, ip
 80208a2:	f280 80dd 	bge.w	8020a60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80208a6:	b21b      	sxth	r3, r3
 80208a8:	fb05 0003 	mla	r0, r5, r3, r0
 80208ac:	9d08      	ldr	r5, [sp, #32]
 80208ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80208b2:	182f      	adds	r7, r5, r0
 80208b4:	5c2d      	ldrb	r5, [r5, r0]
 80208b6:	7878      	ldrb	r0, [r7, #1]
 80208b8:	f897 e002 	ldrb.w	lr, [r7, #2]
 80208bc:	900c      	str	r0, [sp, #48]	; 0x30
 80208be:	f897 9003 	ldrb.w	r9, [r7, #3]
 80208c2:	f897 8004 	ldrb.w	r8, [r7, #4]
 80208c6:	f897 a005 	ldrb.w	sl, [r7, #5]
 80208ca:	b1c9      	cbz	r1, 8020900 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80208cc:	f04f 0c03 	mov.w	ip, #3
 80208d0:	f06f 0004 	mvn.w	r0, #4
 80208d4:	3705      	adds	r7, #5
 80208d6:	fb13 030c 	smlabb	r3, r3, ip, r0
 80208da:	eb07 0c03 	add.w	ip, r7, r3
 80208de:	5cfb      	ldrb	r3, [r7, r3]
 80208e0:	930d      	str	r3, [sp, #52]	; 0x34
 80208e2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80208e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80208e8:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80208ec:	9311      	str	r3, [sp, #68]	; 0x44
 80208ee:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80208f2:	930e      	str	r3, [sp, #56]	; 0x38
 80208f4:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80208f8:	9310      	str	r3, [sp, #64]	; 0x40
 80208fa:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80208fe:	9312      	str	r3, [sp, #72]	; 0x48
 8020900:	b292      	uxth	r2, r2
 8020902:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020904:	b289      	uxth	r1, r1
 8020906:	fb02 f301 	mul.w	r3, r2, r1
 802090a:	0112      	lsls	r2, r2, #4
 802090c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020910:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8020914:	1ad2      	subs	r2, r2, r3
 8020916:	b289      	uxth	r1, r1
 8020918:	b292      	uxth	r2, r2
 802091a:	1a7f      	subs	r7, r7, r1
 802091c:	fb02 f909 	mul.w	r9, r2, r9
 8020920:	b2bf      	uxth	r7, r7
 8020922:	fb02 f808 	mul.w	r8, r2, r8
 8020926:	fb02 fa0a 	mul.w	sl, r2, sl
 802092a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802092c:	fb07 9905 	mla	r9, r7, r5, r9
 8020930:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020932:	fb07 8800 	mla	r8, r7, r0, r8
 8020936:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020938:	fb07 aa0e 	mla	sl, r7, lr, sl
 802093c:	fb01 9905 	mla	r9, r1, r5, r9
 8020940:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020942:	fb01 8800 	mla	r8, r1, r0, r8
 8020946:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020948:	fb01 a102 	mla	r1, r1, r2, sl
 802094c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802094e:	fb03 9905 	mla	r9, r3, r5, r9
 8020952:	fb03 8800 	mla	r8, r3, r0, r8
 8020956:	fb03 1302 	mla	r3, r3, r2, r1
 802095a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802095e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020962:	121b      	asrs	r3, r3, #8
 8020964:	f886 9000 	strb.w	r9, [r6]
 8020968:	f886 8001 	strb.w	r8, [r6, #1]
 802096c:	70b3      	strb	r3, [r6, #2]
 802096e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020970:	3603      	adds	r6, #3
 8020972:	449b      	add	fp, r3
 8020974:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020976:	441c      	add	r4, r3
 8020978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802097a:	3b01      	subs	r3, #1
 802097c:	930a      	str	r3, [sp, #40]	; 0x28
 802097e:	e774      	b.n	802086a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8020980:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020982:	449b      	add	fp, r3
 8020984:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020986:	441c      	add	r4, r3
 8020988:	9b06      	ldr	r3, [sp, #24]
 802098a:	3b01      	subs	r3, #1
 802098c:	9306      	str	r3, [sp, #24]
 802098e:	9b07      	ldr	r3, [sp, #28]
 8020990:	3303      	adds	r3, #3
 8020992:	9307      	str	r3, [sp, #28]
 8020994:	e74a      	b.n	802082c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020996:	d024      	beq.n	80209e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020998:	9b06      	ldr	r3, [sp, #24]
 802099a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802099c:	3b01      	subs	r3, #1
 802099e:	fb00 b003 	mla	r0, r0, r3, fp
 80209a2:	1400      	asrs	r0, r0, #16
 80209a4:	f53f af5e 	bmi.w	8020864 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80209a8:	3901      	subs	r1, #1
 80209aa:	4288      	cmp	r0, r1
 80209ac:	f6bf af5a 	bge.w	8020864 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80209b0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80209b2:	fb01 4303 	mla	r3, r1, r3, r4
 80209b6:	141b      	asrs	r3, r3, #16
 80209b8:	f53f af54 	bmi.w	8020864 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80209bc:	3a01      	subs	r2, #1
 80209be:	4293      	cmp	r3, r2
 80209c0:	f6bf af50 	bge.w	8020864 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80209c4:	9b07      	ldr	r3, [sp, #28]
 80209c6:	f8dd e018 	ldr.w	lr, [sp, #24]
 80209ca:	1cde      	adds	r6, r3, #3
 80209cc:	f1be 0f00 	cmp.w	lr, #0
 80209d0:	dc5f      	bgt.n	8020a92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80209d2:	9b06      	ldr	r3, [sp, #24]
 80209d4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80209d8:	9b07      	ldr	r3, [sp, #28]
 80209da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80209de:	4423      	add	r3, r4
 80209e0:	9307      	str	r3, [sp, #28]
 80209e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209e4:	2b00      	cmp	r3, #0
 80209e6:	f340 80c5 	ble.w	8020b74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80209ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80209ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80209f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80209f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80209f8:	eef0 6a62 	vmov.f32	s13, s5
 80209fc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020a00:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020a04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a08:	ee16 ba90 	vmov	fp, s13
 8020a0c:	eef0 6a43 	vmov.f32	s13, s6
 8020a10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a14:	ee16 4a90 	vmov	r4, s13
 8020a18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a20:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a30:	ee12 2a90 	vmov	r2, s5
 8020a34:	eef0 2a47 	vmov.f32	s5, s14
 8020a38:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a3c:	ee13 2a10 	vmov	r2, s6
 8020a40:	9327      	str	r3, [sp, #156]	; 0x9c
 8020a42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a44:	eeb0 3a67 	vmov.f32	s6, s15
 8020a48:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8020a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020a52:	3b01      	subs	r3, #1
 8020a54:	9309      	str	r3, [sp, #36]	; 0x24
 8020a56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a58:	bf08      	it	eq
 8020a5a:	4613      	moveq	r3, r2
 8020a5c:	9306      	str	r3, [sp, #24]
 8020a5e:	e6d7      	b.n	8020810 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020a60:	f110 0c01 	adds.w	ip, r0, #1
 8020a64:	d483      	bmi.n	802096e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020a66:	4563      	cmp	r3, ip
 8020a68:	db81      	blt.n	802096e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020a6a:	f115 0c01 	adds.w	ip, r5, #1
 8020a6e:	f53f af7e 	bmi.w	802096e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020a72:	4567      	cmp	r7, ip
 8020a74:	f6ff af7b 	blt.w	802096e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020a78:	b23f      	sxth	r7, r7
 8020a7a:	b21b      	sxth	r3, r3
 8020a7c:	9700      	str	r7, [sp, #0]
 8020a7e:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8020a82:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8020a86:	9a08      	ldr	r2, [sp, #32]
 8020a88:	4631      	mov	r1, r6
 8020a8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020a8c:	f7ff fdf9 	bl	8020682 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8020a90:	e76d      	b.n	802096e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020a92:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020a94:	ea4f 402b 	mov.w	r0, fp, asr #16
 8020a98:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020a9c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020aa0:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8020aa4:	1421      	asrs	r1, r4, #16
 8020aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8020aa8:	fb0c 0101 	mla	r1, ip, r1, r0
 8020aac:	9808      	ldr	r0, [sp, #32]
 8020aae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020ab2:	1845      	adds	r5, r0, r1
 8020ab4:	5c40      	ldrb	r0, [r0, r1]
 8020ab6:	796f      	ldrb	r7, [r5, #5]
 8020ab8:	7869      	ldrb	r1, [r5, #1]
 8020aba:	f895 8002 	ldrb.w	r8, [r5, #2]
 8020abe:	f895 a003 	ldrb.w	sl, [r5, #3]
 8020ac2:	f895 9004 	ldrb.w	r9, [r5, #4]
 8020ac6:	970c      	str	r7, [sp, #48]	; 0x30
 8020ac8:	b1a2      	cbz	r2, 8020af4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8020aca:	2703      	movs	r7, #3
 8020acc:	f06f 0304 	mvn.w	r3, #4
 8020ad0:	3505      	adds	r5, #5
 8020ad2:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8020ad6:	eb05 070c 	add.w	r7, r5, ip
 8020ada:	f815 500c 	ldrb.w	r5, [r5, ip]
 8020ade:	9513      	str	r5, [sp, #76]	; 0x4c
 8020ae0:	787d      	ldrb	r5, [r7, #1]
 8020ae2:	9515      	str	r5, [sp, #84]	; 0x54
 8020ae4:	78bd      	ldrb	r5, [r7, #2]
 8020ae6:	9517      	str	r5, [sp, #92]	; 0x5c
 8020ae8:	78fd      	ldrb	r5, [r7, #3]
 8020aea:	9514      	str	r5, [sp, #80]	; 0x50
 8020aec:	793d      	ldrb	r5, [r7, #4]
 8020aee:	9516      	str	r5, [sp, #88]	; 0x58
 8020af0:	797d      	ldrb	r5, [r7, #5]
 8020af2:	9518      	str	r5, [sp, #96]	; 0x60
 8020af4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8020af8:	b292      	uxth	r2, r2
 8020afa:	3603      	adds	r6, #3
 8020afc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020b00:	fb03 f502 	mul.w	r5, r3, r2
 8020b04:	011b      	lsls	r3, r3, #4
 8020b06:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8020b0a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020b0e:	1b5b      	subs	r3, r3, r5
 8020b10:	b292      	uxth	r2, r2
 8020b12:	b29b      	uxth	r3, r3
 8020b14:	1abf      	subs	r7, r7, r2
 8020b16:	fb03 f909 	mul.w	r9, r3, r9
 8020b1a:	b2bf      	uxth	r7, r7
 8020b1c:	fb03 fa0a 	mul.w	sl, r3, sl
 8020b20:	fb07 9901 	mla	r9, r7, r1, r9
 8020b24:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020b26:	fb07 aa00 	mla	sl, r7, r0, sl
 8020b2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020b2c:	fb02 9901 	mla	r9, r2, r1, r9
 8020b30:	9916      	ldr	r1, [sp, #88]	; 0x58
 8020b32:	fb02 aa00 	mla	sl, r2, r0, sl
 8020b36:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020b38:	fb05 9901 	mla	r9, r5, r1, r9
 8020b3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020b3e:	fb05 aa00 	mla	sl, r5, r0, sl
 8020b42:	434b      	muls	r3, r1
 8020b44:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020b46:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020b4a:	fb07 3308 	mla	r3, r7, r8, r3
 8020b4e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020b52:	f806 ac06 	strb.w	sl, [r6, #-6]
 8020b56:	fb02 3201 	mla	r2, r2, r1, r3
 8020b5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020b5c:	f806 9c05 	strb.w	r9, [r6, #-5]
 8020b60:	fb05 2503 	mla	r5, r5, r3, r2
 8020b64:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020b66:	122d      	asrs	r5, r5, #8
 8020b68:	449b      	add	fp, r3
 8020b6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b6c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8020b70:	441c      	add	r4, r3
 8020b72:	e72b      	b.n	80209cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020b74:	b01b      	add	sp, #108	; 0x6c
 8020b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b7a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8020b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b7e:	b087      	sub	sp, #28
 8020b80:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8020b84:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8020b88:	fb05 7003 	mla	r0, r5, r3, r7
 8020b8c:	2d00      	cmp	r5, #0
 8020b8e:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8020b92:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8020b96:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8020b9a:	f2c0 811f 	blt.w	8020ddc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8020b9e:	45a8      	cmp	r8, r5
 8020ba0:	f340 811c 	ble.w	8020ddc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8020ba4:	2f00      	cmp	r7, #0
 8020ba6:	f2c0 8117 	blt.w	8020dd8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8020baa:	42bb      	cmp	r3, r7
 8020bac:	f340 8114 	ble.w	8020dd8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8020bb0:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8020bb4:	1c7a      	adds	r2, r7, #1
 8020bb6:	f100 8114 	bmi.w	8020de2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8020bba:	4293      	cmp	r3, r2
 8020bbc:	f340 8111 	ble.w	8020de2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8020bc0:	2c00      	cmp	r4, #0
 8020bc2:	f000 8110 	beq.w	8020de6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8020bc6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8020bca:	3501      	adds	r5, #1
 8020bcc:	f100 810f 	bmi.w	8020dee <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8020bd0:	45a8      	cmp	r8, r5
 8020bd2:	f340 810c 	ble.w	8020dee <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8020bd6:	f1be 0f00 	cmp.w	lr, #0
 8020bda:	f000 810b 	beq.w	8020df4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8020bde:	2f00      	cmp	r7, #0
 8020be0:	f2c0 8103 	blt.w	8020dea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8020be4:	42bb      	cmp	r3, r7
 8020be6:	f340 8100 	ble.w	8020dea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8020bea:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8020bee:	3701      	adds	r7, #1
 8020bf0:	f100 8103 	bmi.w	8020dfa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8020bf4:	42bb      	cmp	r3, r7
 8020bf6:	f340 8100 	ble.w	8020dfa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8020bfa:	2c00      	cmp	r4, #0
 8020bfc:	f000 80ff 	beq.w	8020dfe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8020c00:	3301      	adds	r3, #1
 8020c02:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8020c06:	fa1f fc84 	uxth.w	ip, r4
 8020c0a:	fa1f fe8e 	uxth.w	lr, lr
 8020c0e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020c12:	fb0c f90e 	mul.w	r9, ip, lr
 8020c16:	0e13      	lsrs	r3, r2, #24
 8020c18:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8020c1c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8020c20:	9302      	str	r3, [sp, #8]
 8020c22:	ebac 0709 	sub.w	r7, ip, r9
 8020c26:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8020c2a:	fa1f f48e 	uxth.w	r4, lr
 8020c2e:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8020c32:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c36:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8020c3a:	fb0a fe0e 	mul.w	lr, sl, lr
 8020c3e:	1b1b      	subs	r3, r3, r4
 8020c40:	fb0a f606 	mul.w	r6, sl, r6
 8020c44:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8020c48:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020c4c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020c50:	b29b      	uxth	r3, r3
 8020c52:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c56:	b2bf      	uxth	r7, r7
 8020c58:	9301      	str	r3, [sp, #4]
 8020c5a:	44e6      	add	lr, ip
 8020c5c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020c60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c64:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020c68:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8020c6c:	9303      	str	r3, [sp, #12]
 8020c6e:	0a33      	lsrs	r3, r6, #8
 8020c70:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8020c74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020c78:	9304      	str	r3, [sp, #16]
 8020c7a:	fb0b f606 	mul.w	r6, fp, r6
 8020c7e:	fb0b f000 	mul.w	r0, fp, r0
 8020c82:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8020c86:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020c8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020c8e:	44b6      	add	lr, r6
 8020c90:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8020c94:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8020c98:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8020c9c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020ca0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ca4:	fb08 f606 	mul.w	r6, r8, r6
 8020ca8:	0a03      	lsrs	r3, r0, #8
 8020caa:	fb08 f505 	mul.w	r5, r8, r5
 8020cae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020cb2:	0a30      	lsrs	r0, r6, #8
 8020cb4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020cb8:	9305      	str	r3, [sp, #20]
 8020cba:	0e13      	lsrs	r3, r2, #24
 8020cbc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020cc0:	fb0e fe07 	mul.w	lr, lr, r7
 8020cc4:	4430      	add	r0, r6
 8020cc6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8020cca:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8020cce:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020cd2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020cd6:	0a00      	lsrs	r0, r0, #8
 8020cd8:	435e      	muls	r6, r3
 8020cda:	0a2d      	lsrs	r5, r5, #8
 8020cdc:	435a      	muls	r2, r3
 8020cde:	9b03      	ldr	r3, [sp, #12]
 8020ce0:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8020ce4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020ce8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020cec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020cf0:	44b4      	add	ip, r6
 8020cf2:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8020cf6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020cfa:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8020cfe:	9e01      	ldr	r6, [sp, #4]
 8020d00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020d04:	fb03 ee06 	mla	lr, r3, r6, lr
 8020d08:	9b04      	ldr	r3, [sp, #16]
 8020d0a:	0a12      	lsrs	r2, r2, #8
 8020d0c:	fb0c ee09 	mla	lr, ip, r9, lr
 8020d10:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8020d14:	9b05      	ldr	r3, [sp, #20]
 8020d16:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020d1a:	fb00 ee04 	mla	lr, r0, r4, lr
 8020d1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020d22:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8020d26:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8020d2a:	9b01      	ldr	r3, [sp, #4]
 8020d2c:	fb07 fe0e 	mul.w	lr, r7, lr
 8020d30:	fb07 f70b 	mul.w	r7, r7, fp
 8020d34:	fb03 ee06 	mla	lr, r3, r6, lr
 8020d38:	fb03 730a 	mla	r3, r3, sl, r7
 8020d3c:	fb09 e202 	mla	r2, r9, r2, lr
 8020d40:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8020d44:	fb04 2e0e 	mla	lr, r4, lr, r2
 8020d48:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8020d4c:	fb04 3408 	mla	r4, r4, r8, r3
 8020d50:	9b02      	ldr	r3, [sp, #8]
 8020d52:	b292      	uxth	r2, r2
 8020d54:	fb09 4903 	mla	r9, r9, r3, r4
 8020d58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020d5c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8020d60:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020d64:	fb09 f902 	mul.w	r9, r9, r2
 8020d68:	ea40 0e0e 	orr.w	lr, r0, lr
 8020d6c:	f109 0301 	add.w	r3, r9, #1
 8020d70:	fa5f f08e 	uxtb.w	r0, lr
 8020d74:	fb10 f002 	smulbb	r0, r0, r2
 8020d78:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8020d7c:	780b      	ldrb	r3, [r1, #0]
 8020d7e:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8020d82:	fa5f f989 	uxtb.w	r9, r9
 8020d86:	fb03 0309 	mla	r3, r3, r9, r0
 8020d8a:	b29b      	uxth	r3, r3
 8020d8c:	1c58      	adds	r0, r3, #1
 8020d8e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020d92:	7848      	ldrb	r0, [r1, #1]
 8020d94:	fb10 f009 	smulbb	r0, r0, r9
 8020d98:	121b      	asrs	r3, r3, #8
 8020d9a:	700b      	strb	r3, [r1, #0]
 8020d9c:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8020da0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020da4:	fb03 0302 	mla	r3, r3, r2, r0
 8020da8:	b29b      	uxth	r3, r3
 8020daa:	1c58      	adds	r0, r3, #1
 8020dac:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020db0:	121b      	asrs	r3, r3, #8
 8020db2:	704b      	strb	r3, [r1, #1]
 8020db4:	788b      	ldrb	r3, [r1, #2]
 8020db6:	fb13 f909 	smulbb	r9, r3, r9
 8020dba:	fb0e 9e02 	mla	lr, lr, r2, r9
 8020dbe:	fa1f fe8e 	uxth.w	lr, lr
 8020dc2:	f10e 0301 	add.w	r3, lr, #1
 8020dc6:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8020dca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020dce:	f881 e002 	strb.w	lr, [r1, #2]
 8020dd2:	b007      	add	sp, #28
 8020dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dd8:	2600      	movs	r6, #0
 8020dda:	e6eb      	b.n	8020bb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8020ddc:	2000      	movs	r0, #0
 8020dde:	4606      	mov	r6, r0
 8020de0:	e6f3      	b.n	8020bca <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8020de2:	2000      	movs	r0, #0
 8020de4:	e6f1      	b.n	8020bca <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8020de6:	4620      	mov	r0, r4
 8020de8:	e6ef      	b.n	8020bca <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8020dea:	2500      	movs	r5, #0
 8020dec:	e6ff      	b.n	8020bee <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8020dee:	2200      	movs	r2, #0
 8020df0:	4615      	mov	r5, r2
 8020df2:	e708      	b.n	8020c06 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020df4:	4672      	mov	r2, lr
 8020df6:	4675      	mov	r5, lr
 8020df8:	e705      	b.n	8020c06 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020dfa:	2200      	movs	r2, #0
 8020dfc:	e703      	b.n	8020c06 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8020dfe:	4622      	mov	r2, r4
 8020e00:	e701      	b.n	8020c06 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08020e02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e06:	b09d      	sub	sp, #116	; 0x74
 8020e08:	9219      	str	r2, [sp, #100]	; 0x64
 8020e0a:	9307      	str	r3, [sp, #28]
 8020e0c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020e0e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8020e12:	901b      	str	r0, [sp, #108]	; 0x6c
 8020e14:	931a      	str	r3, [sp, #104]	; 0x68
 8020e16:	6850      	ldr	r0, [r2, #4]
 8020e18:	9117      	str	r1, [sp, #92]	; 0x5c
 8020e1a:	6812      	ldr	r2, [r2, #0]
 8020e1c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020e20:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8020e24:	fb00 1303 	mla	r3, r0, r3, r1
 8020e28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e2c:	18d3      	adds	r3, r2, r3
 8020e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8020e30:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	9310      	str	r3, [sp, #64]	; 0x40
 8020e36:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8020e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8020e3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	dc03      	bgt.n	8020e4a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020e42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	f340 8368 	ble.w	802151a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8020e4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020e4c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020e50:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020e54:	1e48      	subs	r0, r1, #1
 8020e56:	1e57      	subs	r7, r2, #1
 8020e58:	9b07      	ldr	r3, [sp, #28]
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	f340 8187 	ble.w	802116e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8020e60:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8020e64:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020e68:	d406      	bmi.n	8020e78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020e6a:	4584      	cmp	ip, r0
 8020e6c:	da04      	bge.n	8020e78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020e6e:	2b00      	cmp	r3, #0
 8020e70:	db02      	blt.n	8020e78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020e72:	42bb      	cmp	r3, r7
 8020e74:	f2c0 817c 	blt.w	8021170 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020e78:	f11c 0c01 	adds.w	ip, ip, #1
 8020e7c:	f100 816c 	bmi.w	8021158 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020e80:	4561      	cmp	r1, ip
 8020e82:	f2c0 8169 	blt.w	8021158 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020e86:	3301      	adds	r3, #1
 8020e88:	f100 8166 	bmi.w	8021158 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020e8c:	429a      	cmp	r2, r3
 8020e8e:	f2c0 8163 	blt.w	8021158 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020e92:	9b07      	ldr	r3, [sp, #28]
 8020e94:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020e96:	9318      	str	r3, [sp, #96]	; 0x60
 8020e98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020e9a:	2b00      	cmp	r3, #0
 8020e9c:	f340 8186 	ble.w	80211ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8020ea0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020ea2:	142a      	asrs	r2, r5, #16
 8020ea4:	ea4f 4026 	mov.w	r0, r6, asr #16
 8020ea8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020eac:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020eb0:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020eb4:	f100 81cb 	bmi.w	802124e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020eb8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020ebc:	4542      	cmp	r2, r8
 8020ebe:	f280 81c6 	bge.w	802124e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020ec2:	2800      	cmp	r0, #0
 8020ec4:	f2c0 81c3 	blt.w	802124e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020ec8:	f103 38ff 	add.w	r8, r3, #4294967295
 8020ecc:	4540      	cmp	r0, r8
 8020ece:	f280 81be 	bge.w	802124e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020ed2:	fa0f f38e 	sxth.w	r3, lr
 8020ed6:	fb00 2203 	mla	r2, r0, r3, r2
 8020eda:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020edc:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8020ee0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8020ee4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020ee8:	2900      	cmp	r1, #0
 8020eea:	f000 81a6 	beq.w	802123a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8020eee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8020ef2:	900c      	str	r0, [sp, #48]	; 0x30
 8020ef4:	0e00      	lsrs	r0, r0, #24
 8020ef6:	9013      	str	r0, [sp, #76]	; 0x4c
 8020ef8:	f1bc 0f00 	cmp.w	ip, #0
 8020efc:	d00f      	beq.n	8020f1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020efe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8020f02:	3b01      	subs	r3, #1
 8020f04:	009b      	lsls	r3, r3, #2
 8020f06:	3304      	adds	r3, #4
 8020f08:	eb08 0003 	add.w	r0, r8, r3
 8020f0c:	f858 3003 	ldr.w	r3, [r8, r3]
 8020f10:	9308      	str	r3, [sp, #32]
 8020f12:	0e1b      	lsrs	r3, r3, #24
 8020f14:	9311      	str	r3, [sp, #68]	; 0x44
 8020f16:	6843      	ldr	r3, [r0, #4]
 8020f18:	930d      	str	r3, [sp, #52]	; 0x34
 8020f1a:	0e1b      	lsrs	r3, r3, #24
 8020f1c:	9314      	str	r3, [sp, #80]	; 0x50
 8020f1e:	b289      	uxth	r1, r1
 8020f20:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020f22:	fa1f fc8c 	uxth.w	ip, ip
 8020f26:	0108      	lsls	r0, r1, #4
 8020f28:	fb01 f90c 	mul.w	r9, r1, ip
 8020f2c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8020f30:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8020f34:	eba0 0809 	sub.w	r8, r0, r9
 8020f38:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020f3a:	fa1f f18c 	uxth.w	r1, ip
 8020f3e:	fa1f f888 	uxth.w	r8, r8
 8020f42:	1a5b      	subs	r3, r3, r1
 8020f44:	fb08 f000 	mul.w	r0, r8, r0
 8020f48:	b29b      	uxth	r3, r3
 8020f4a:	fb03 000e 	mla	r0, r3, lr, r0
 8020f4e:	fb01 0004 	mla	r0, r1, r4, r0
 8020f52:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020f54:	fb09 0004 	mla	r0, r9, r4, r0
 8020f58:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020f5c:	2800      	cmp	r0, #0
 8020f5e:	f000 80f2 	beq.w	8021146 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020f62:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020f66:	d01b      	beq.n	8020fa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020f68:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8020f6c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020f70:	fb0e fa0a 	mul.w	sl, lr, sl
 8020f74:	fb0e fe02 	mul.w	lr, lr, r2
 8020f78:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020f7c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020f80:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020f84:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020f88:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020f8c:	4452      	add	r2, sl
 8020f8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f92:	0a12      	lsrs	r2, r2, #8
 8020f94:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020f98:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020f9c:	ea42 020c 	orr.w	r2, r2, ip
 8020fa0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020fa2:	2cff      	cmp	r4, #255	; 0xff
 8020fa4:	d021      	beq.n	8020fea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020fa6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020fa8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020fac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020fae:	fb04 fb0b 	mul.w	fp, r4, fp
 8020fb2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020fb4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020fb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020fba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020fbe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020fc2:	fb04 fa0a 	mul.w	sl, r4, sl
 8020fc6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020fce:	44de      	add	lr, fp
 8020fd0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020fd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020fdc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020fe0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020fe4:	ea4e 040a 	orr.w	r4, lr, sl
 8020fe8:	940c      	str	r4, [sp, #48]	; 0x30
 8020fea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020fec:	2cff      	cmp	r4, #255	; 0xff
 8020fee:	d021      	beq.n	8021034 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020ff0:	9c08      	ldr	r4, [sp, #32]
 8020ff2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020ff6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020ff8:	fb04 fb0b 	mul.w	fp, r4, fp
 8020ffc:	9c08      	ldr	r4, [sp, #32]
 8020ffe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021002:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021004:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021008:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802100c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021010:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021014:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021018:	44de      	add	lr, fp
 802101a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802101e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021022:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021026:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802102a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802102e:	ea4e 040a 	orr.w	r4, lr, sl
 8021032:	9408      	str	r4, [sp, #32]
 8021034:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021036:	2cff      	cmp	r4, #255	; 0xff
 8021038:	d021      	beq.n	802107e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802103a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802103c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8021040:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021042:	fb04 fb0b 	mul.w	fp, r4, fp
 8021046:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021048:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802104c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802104e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021052:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021056:	fb04 fa0a 	mul.w	sl, r4, sl
 802105a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802105e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021062:	44de      	add	lr, fp
 8021064:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021068:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802106c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021070:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021074:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021078:	ea4e 040a 	orr.w	r4, lr, sl
 802107c:	940d      	str	r4, [sp, #52]	; 0x34
 802107e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021080:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021084:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021088:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802108c:	9c08      	ldr	r4, [sp, #32]
 802108e:	fb08 fc0c 	mul.w	ip, r8, ip
 8021092:	fb03 cc0e 	mla	ip, r3, lr, ip
 8021096:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802109a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802109c:	fb01 cc0e 	mla	ip, r1, lr, ip
 80210a0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80210a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80210a6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80210aa:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80210ae:	fb08 f80e 	mul.w	r8, r8, lr
 80210b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210b6:	fb03 8202 	mla	r2, r3, r2, r8
 80210ba:	9b08      	ldr	r3, [sp, #32]
 80210bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80210c0:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80210c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80210c6:	fb01 220a 	mla	r2, r1, sl, r2
 80210ca:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80210ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210d0:	fb09 2901 	mla	r9, r9, r1, r2
 80210d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80210d6:	4343      	muls	r3, r0
 80210d8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80210dc:	1c58      	adds	r0, r3, #1
 80210de:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80210e2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80210e6:	783b      	ldrb	r3, [r7, #0]
 80210e8:	ea4c 0c09 	orr.w	ip, ip, r9
 80210ec:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80210f0:	fa5f f28c 	uxtb.w	r2, ip
 80210f4:	b2c0      	uxtb	r0, r0
 80210f6:	fb12 f201 	smulbb	r2, r2, r1
 80210fa:	fb03 2300 	mla	r3, r3, r0, r2
 80210fe:	b29b      	uxth	r3, r3
 8021100:	1c5a      	adds	r2, r3, #1
 8021102:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021106:	787a      	ldrb	r2, [r7, #1]
 8021108:	fb12 f200 	smulbb	r2, r2, r0
 802110c:	121b      	asrs	r3, r3, #8
 802110e:	703b      	strb	r3, [r7, #0]
 8021110:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021114:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021118:	fb03 2301 	mla	r3, r3, r1, r2
 802111c:	b29b      	uxth	r3, r3
 802111e:	1c5a      	adds	r2, r3, #1
 8021120:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021124:	121b      	asrs	r3, r3, #8
 8021126:	707b      	strb	r3, [r7, #1]
 8021128:	78bb      	ldrb	r3, [r7, #2]
 802112a:	fb13 f000 	smulbb	r0, r3, r0
 802112e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8021132:	fa1f fc8c 	uxth.w	ip, ip
 8021136:	f10c 0301 	add.w	r3, ip, #1
 802113a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802113e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021142:	f887 c002 	strb.w	ip, [r7, #2]
 8021146:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021148:	3703      	adds	r7, #3
 802114a:	441d      	add	r5, r3
 802114c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802114e:	441e      	add	r6, r3
 8021150:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021152:	3b01      	subs	r3, #1
 8021154:	9318      	str	r3, [sp, #96]	; 0x60
 8021156:	e69f      	b.n	8020e98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021158:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802115a:	441d      	add	r5, r3
 802115c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802115e:	441e      	add	r6, r3
 8021160:	9b07      	ldr	r3, [sp, #28]
 8021162:	3b01      	subs	r3, #1
 8021164:	9307      	str	r3, [sp, #28]
 8021166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021168:	3303      	adds	r3, #3
 802116a:	930a      	str	r3, [sp, #40]	; 0x28
 802116c:	e674      	b.n	8020e58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802116e:	d025      	beq.n	80211bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8021170:	9b07      	ldr	r3, [sp, #28]
 8021172:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8021174:	3b01      	subs	r3, #1
 8021176:	fb00 5003 	mla	r0, r0, r3, r5
 802117a:	1400      	asrs	r0, r0, #16
 802117c:	f53f ae89 	bmi.w	8020e92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021180:	3901      	subs	r1, #1
 8021182:	4288      	cmp	r0, r1
 8021184:	f6bf ae85 	bge.w	8020e92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021188:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802118a:	fb01 6303 	mla	r3, r1, r3, r6
 802118e:	141b      	asrs	r3, r3, #16
 8021190:	f53f ae7f 	bmi.w	8020e92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021194:	3a01      	subs	r2, #1
 8021196:	4293      	cmp	r3, r2
 8021198:	f6bf ae7b 	bge.w	8020e92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802119c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802119e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80211a2:	f103 0e03 	add.w	lr, r3, #3
 80211a6:	f1bb 0f00 	cmp.w	fp, #0
 80211aa:	dc6e      	bgt.n	802128a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80211ac:	9b07      	ldr	r3, [sp, #28]
 80211ae:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80211b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80211b8:	4423      	add	r3, r4
 80211ba:	930a      	str	r3, [sp, #40]	; 0x28
 80211bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80211be:	2b00      	cmp	r3, #0
 80211c0:	f340 81ab 	ble.w	802151a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80211c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80211c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80211ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80211ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80211d2:	eef0 6a62 	vmov.f32	s13, s5
 80211d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80211da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80211de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211e2:	ee16 5a90 	vmov	r5, s13
 80211e6:	eef0 6a43 	vmov.f32	s13, s6
 80211ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80211ee:	ee16 6a90 	vmov	r6, s13
 80211f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80211f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80211fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80211fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021202:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021206:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802120a:	ee12 2a90 	vmov	r2, s5
 802120e:	eef0 2a47 	vmov.f32	s5, s14
 8021212:	fb92 f3f3 	sdiv	r3, r2, r3
 8021216:	ee13 2a10 	vmov	r2, s6
 802121a:	9329      	str	r3, [sp, #164]	; 0xa4
 802121c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802121e:	eeb0 3a67 	vmov.f32	s6, s15
 8021222:	fb92 f3f3 	sdiv	r3, r2, r3
 8021226:	932a      	str	r3, [sp, #168]	; 0xa8
 8021228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802122a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802122c:	3b01      	subs	r3, #1
 802122e:	9317      	str	r3, [sp, #92]	; 0x5c
 8021230:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021232:	bf08      	it	eq
 8021234:	4613      	moveq	r3, r2
 8021236:	9307      	str	r3, [sp, #28]
 8021238:	e600      	b.n	8020e3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802123a:	f1bc 0f00 	cmp.w	ip, #0
 802123e:	f43f ae6e 	beq.w	8020f1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021242:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021246:	9308      	str	r3, [sp, #32]
 8021248:	0e1b      	lsrs	r3, r3, #24
 802124a:	9311      	str	r3, [sp, #68]	; 0x44
 802124c:	e667      	b.n	8020f1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802124e:	f112 0801 	adds.w	r8, r2, #1
 8021252:	f53f af78 	bmi.w	8021146 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021256:	45c6      	cmp	lr, r8
 8021258:	f6ff af75 	blt.w	8021146 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802125c:	f110 0801 	adds.w	r8, r0, #1
 8021260:	f53f af71 	bmi.w	8021146 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021264:	4543      	cmp	r3, r8
 8021266:	f6ff af6e 	blt.w	8021146 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802126a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802126c:	b21b      	sxth	r3, r3
 802126e:	9201      	str	r2, [sp, #4]
 8021270:	9300      	str	r3, [sp, #0]
 8021272:	fa0f f38e 	sxth.w	r3, lr
 8021276:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802127c:	e9cd c404 	strd	ip, r4, [sp, #16]
 8021280:	4639      	mov	r1, r7
 8021282:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8021284:	f7ff fc79 	bl	8020b7a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8021288:	e75d      	b.n	8021146 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802128a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802128c:	142f      	asrs	r7, r5, #16
 802128e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021290:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021294:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8021298:	1433      	asrs	r3, r6, #16
 802129a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802129e:	fb02 7303 	mla	r3, r2, r3, r7
 80212a2:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80212a6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80212aa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80212ae:	2900      	cmp	r1, #0
 80212b0:	f000 812a 	beq.w	8021508 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80212b4:	687c      	ldr	r4, [r7, #4]
 80212b6:	940e      	str	r4, [sp, #56]	; 0x38
 80212b8:	0e24      	lsrs	r4, r4, #24
 80212ba:	9415      	str	r4, [sp, #84]	; 0x54
 80212bc:	b178      	cbz	r0, 80212de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80212be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80212c2:	3a01      	subs	r2, #1
 80212c4:	0092      	lsls	r2, r2, #2
 80212c6:	3204      	adds	r2, #4
 80212c8:	eb07 0802 	add.w	r8, r7, r2
 80212cc:	58ba      	ldr	r2, [r7, r2]
 80212ce:	9209      	str	r2, [sp, #36]	; 0x24
 80212d0:	0e12      	lsrs	r2, r2, #24
 80212d2:	9212      	str	r2, [sp, #72]	; 0x48
 80212d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80212d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80212da:	0e12      	lsrs	r2, r2, #24
 80212dc:	9216      	str	r2, [sp, #88]	; 0x58
 80212de:	b289      	uxth	r1, r1
 80212e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80212e2:	b280      	uxth	r0, r0
 80212e4:	fb01 f900 	mul.w	r9, r1, r0
 80212e8:	0109      	lsls	r1, r1, #4
 80212ea:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80212ee:	eba1 0809 	sub.w	r8, r1, r9
 80212f2:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80212f6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80212f8:	b280      	uxth	r0, r0
 80212fa:	fa1f f888 	uxth.w	r8, r8
 80212fe:	1a12      	subs	r2, r2, r0
 8021300:	fb08 f101 	mul.w	r1, r8, r1
 8021304:	b292      	uxth	r2, r2
 8021306:	fb02 110c 	mla	r1, r2, ip, r1
 802130a:	fb00 1104 	mla	r1, r0, r4, r1
 802130e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021310:	fb09 1104 	mla	r1, r9, r4, r1
 8021314:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021318:	2900      	cmp	r1, #0
 802131a:	f000 80ec 	beq.w	80214f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 802131e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021322:	d019      	beq.n	8021358 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8021324:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802132c:	fb0c fa0a 	mul.w	sl, ip, sl
 8021330:	fb0c fc03 	mul.w	ip, ip, r3
 8021334:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021338:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802133c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021340:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021344:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021348:	4453      	add	r3, sl
 802134a:	0a3f      	lsrs	r7, r7, #8
 802134c:	0a1b      	lsrs	r3, r3, #8
 802134e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021352:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021356:	433b      	orrs	r3, r7
 8021358:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802135a:	2cff      	cmp	r4, #255	; 0xff
 802135c:	d020      	beq.n	80213a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 802135e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021360:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021364:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021366:	4367      	muls	r7, r4
 8021368:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802136a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802136e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021372:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021374:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021378:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802137c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021380:	44bc      	add	ip, r7
 8021382:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021386:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802138a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802138e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021392:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021396:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802139a:	ea4c 040a 	orr.w	r4, ip, sl
 802139e:	940e      	str	r4, [sp, #56]	; 0x38
 80213a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80213a2:	2cff      	cmp	r4, #255	; 0xff
 80213a4:	d020      	beq.n	80213e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 80213a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80213a8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80213ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80213ae:	4367      	muls	r7, r4
 80213b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80213b2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80213b6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80213ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80213bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80213c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213c4:	fb04 fa0a 	mul.w	sl, r4, sl
 80213c8:	44bc      	add	ip, r7
 80213ca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80213ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213d2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80213d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80213da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213e2:	ea4c 040a 	orr.w	r4, ip, sl
 80213e6:	9409      	str	r4, [sp, #36]	; 0x24
 80213e8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80213ea:	2cff      	cmp	r4, #255	; 0xff
 80213ec:	d020      	beq.n	8021430 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 80213ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80213f0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80213f4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80213f6:	4367      	muls	r7, r4
 80213f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80213fa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80213fe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021402:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021404:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021408:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802140c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021410:	44bc      	add	ip, r7
 8021412:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021416:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802141a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802141e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021422:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021426:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802142a:	ea4c 040a 	orr.w	r4, ip, sl
 802142e:	940f      	str	r4, [sp, #60]	; 0x3c
 8021430:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021432:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021436:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802143a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802143e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021440:	fb08 f707 	mul.w	r7, r8, r7
 8021444:	fb02 770c 	mla	r7, r2, ip, r7
 8021448:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802144c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802144e:	fb00 770c 	mla	r7, r0, ip, r7
 8021452:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021456:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021458:	fb09 770c 	mla	r7, r9, ip, r7
 802145c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021460:	fb08 f80c 	mul.w	r8, r8, ip
 8021464:	0a3f      	lsrs	r7, r7, #8
 8021466:	fb02 8303 	mla	r3, r2, r3, r8
 802146a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802146c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021470:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8021474:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021476:	fb00 330a 	mla	r3, r0, sl, r3
 802147a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802147e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8021480:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021486:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802148a:	434b      	muls	r3, r1
 802148c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021490:	1c59      	adds	r1, r3, #1
 8021492:	ea47 070c 	orr.w	r7, r7, ip
 8021496:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802149a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802149e:	b2fa      	uxtb	r2, r7
 80214a0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80214a4:	fb12 f200 	smulbb	r2, r2, r0
 80214a8:	b2c9      	uxtb	r1, r1
 80214aa:	fb03 2301 	mla	r3, r3, r1, r2
 80214ae:	b29b      	uxth	r3, r3
 80214b0:	1c5a      	adds	r2, r3, #1
 80214b2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80214b6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80214ba:	fb12 f201 	smulbb	r2, r2, r1
 80214be:	121b      	asrs	r3, r3, #8
 80214c0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80214c4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80214c8:	0c3f      	lsrs	r7, r7, #16
 80214ca:	fb03 2300 	mla	r3, r3, r0, r2
 80214ce:	b29b      	uxth	r3, r3
 80214d0:	1c5a      	adds	r2, r3, #1
 80214d2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80214d6:	121b      	asrs	r3, r3, #8
 80214d8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80214dc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80214e0:	fb13 f101 	smulbb	r1, r3, r1
 80214e4:	fb07 1700 	mla	r7, r7, r0, r1
 80214e8:	b2bf      	uxth	r7, r7
 80214ea:	1c79      	adds	r1, r7, #1
 80214ec:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80214f0:	123f      	asrs	r7, r7, #8
 80214f2:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80214f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80214f8:	f10e 0e03 	add.w	lr, lr, #3
 80214fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021500:	441d      	add	r5, r3
 8021502:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021504:	441e      	add	r6, r3
 8021506:	e64e      	b.n	80211a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8021508:	2800      	cmp	r0, #0
 802150a:	f43f aee8 	beq.w	80212de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802150e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8021512:	9209      	str	r2, [sp, #36]	; 0x24
 8021514:	0e12      	lsrs	r2, r2, #24
 8021516:	9212      	str	r2, [sp, #72]	; 0x48
 8021518:	e6e1      	b.n	80212de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802151a:	b01d      	add	sp, #116	; 0x74
 802151c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021520 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021524:	b087      	sub	sp, #28
 8021526:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 802152a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 802152e:	fb05 7003 	mla	r0, r5, r3, r7
 8021532:	2d00      	cmp	r5, #0
 8021534:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8021538:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 802153c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8021540:	f2c0 810a 	blt.w	8021758 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8021544:	45a8      	cmp	r8, r5
 8021546:	f340 8107 	ble.w	8021758 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 802154a:	2f00      	cmp	r7, #0
 802154c:	f2c0 8102 	blt.w	8021754 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021550:	42bb      	cmp	r3, r7
 8021552:	f340 80ff 	ble.w	8021754 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021556:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 802155a:	1c7a      	adds	r2, r7, #1
 802155c:	f100 80ff 	bmi.w	802175e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021560:	4293      	cmp	r3, r2
 8021562:	f340 80fc 	ble.w	802175e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021566:	2c00      	cmp	r4, #0
 8021568:	f000 80fb 	beq.w	8021762 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 802156c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8021570:	3501      	adds	r5, #1
 8021572:	f100 80fa 	bmi.w	802176a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8021576:	45a8      	cmp	r8, r5
 8021578:	f340 80f7 	ble.w	802176a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802157c:	f1be 0f00 	cmp.w	lr, #0
 8021580:	f000 80f6 	beq.w	8021770 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8021584:	2f00      	cmp	r7, #0
 8021586:	f2c0 80ee 	blt.w	8021766 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802158a:	42bb      	cmp	r3, r7
 802158c:	f340 80eb 	ble.w	8021766 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021590:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8021594:	3701      	adds	r7, #1
 8021596:	f100 80ee 	bmi.w	8021776 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802159a:	42bb      	cmp	r3, r7
 802159c:	f340 80eb 	ble.w	8021776 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80215a0:	2c00      	cmp	r4, #0
 80215a2:	f000 80ea 	beq.w	802177a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 80215a6:	3301      	adds	r3, #1
 80215a8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80215ac:	fa1f fc84 	uxth.w	ip, r4
 80215b0:	fa1f fe8e 	uxth.w	lr, lr
 80215b4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80215b8:	fb0c f90e 	mul.w	r9, ip, lr
 80215bc:	0e13      	lsrs	r3, r2, #24
 80215be:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80215c2:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80215c6:	9302      	str	r3, [sp, #8]
 80215c8:	ebac 0709 	sub.w	r7, ip, r9
 80215cc:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80215d0:	fa1f f48e 	uxth.w	r4, lr
 80215d4:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80215d8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80215dc:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80215e0:	fb0a fe0e 	mul.w	lr, sl, lr
 80215e4:	1b1b      	subs	r3, r3, r4
 80215e6:	fb0a f606 	mul.w	r6, sl, r6
 80215ea:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80215ee:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80215f2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80215f6:	b29b      	uxth	r3, r3
 80215f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80215fc:	b2bf      	uxth	r7, r7
 80215fe:	9301      	str	r3, [sp, #4]
 8021600:	44e6      	add	lr, ip
 8021602:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021606:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802160a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802160e:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8021612:	9303      	str	r3, [sp, #12]
 8021614:	0a33      	lsrs	r3, r6, #8
 8021616:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 802161a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802161e:	9304      	str	r3, [sp, #16]
 8021620:	fb0b f606 	mul.w	r6, fp, r6
 8021624:	fb0b f000 	mul.w	r0, fp, r0
 8021628:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 802162c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021630:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021634:	44b6      	add	lr, r6
 8021636:	f500 7680 	add.w	r6, r0, #256	; 0x100
 802163a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 802163e:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8021642:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021646:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802164a:	fb08 f606 	mul.w	r6, r8, r6
 802164e:	0a03      	lsrs	r3, r0, #8
 8021650:	fb08 f505 	mul.w	r5, r8, r5
 8021654:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021658:	0a30      	lsrs	r0, r6, #8
 802165a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802165e:	9305      	str	r3, [sp, #20]
 8021660:	0e13      	lsrs	r3, r2, #24
 8021662:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021666:	fb0e fe07 	mul.w	lr, lr, r7
 802166a:	4430      	add	r0, r6
 802166c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021670:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021674:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8021678:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802167c:	0a00      	lsrs	r0, r0, #8
 802167e:	435e      	muls	r6, r3
 8021680:	0a2d      	lsrs	r5, r5, #8
 8021682:	435a      	muls	r2, r3
 8021684:	9b03      	ldr	r3, [sp, #12]
 8021686:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 802168a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 802168e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021692:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021696:	44b4      	add	ip, r6
 8021698:	f502 7680 	add.w	r6, r2, #256	; 0x100
 802169c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216a0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80216a4:	9e01      	ldr	r6, [sp, #4]
 80216a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80216aa:	fb03 ee06 	mla	lr, r3, r6, lr
 80216ae:	9b04      	ldr	r3, [sp, #16]
 80216b0:	0a12      	lsrs	r2, r2, #8
 80216b2:	fb0c ee09 	mla	lr, ip, r9, lr
 80216b6:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80216ba:	9b05      	ldr	r3, [sp, #20]
 80216bc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80216c0:	fb00 ee04 	mla	lr, r0, r4, lr
 80216c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80216c8:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80216cc:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80216d0:	9b01      	ldr	r3, [sp, #4]
 80216d2:	fb07 fe0e 	mul.w	lr, r7, lr
 80216d6:	fb07 f70b 	mul.w	r7, r7, fp
 80216da:	fb03 ee06 	mla	lr, r3, r6, lr
 80216de:	fb03 730a 	mla	r3, r3, sl, r7
 80216e2:	fb09 e202 	mla	r2, r9, r2, lr
 80216e6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80216ea:	fb04 2e0e 	mla	lr, r4, lr, r2
 80216ee:	fb04 3408 	mla	r4, r4, r8, r3
 80216f2:	9b02      	ldr	r3, [sp, #8]
 80216f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80216f8:	fb09 4903 	mla	r9, r9, r3, r4
 80216fc:	780b      	ldrb	r3, [r1, #0]
 80216fe:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021702:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8021706:	ea40 0e0e 	orr.w	lr, r0, lr
 802170a:	fa5f f989 	uxtb.w	r9, r9
 802170e:	fb03 f209 	mul.w	r2, r3, r9
 8021712:	1c53      	adds	r3, r2, #1
 8021714:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021718:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802171c:	700b      	strb	r3, [r1, #0]
 802171e:	784b      	ldrb	r3, [r1, #1]
 8021720:	fb03 f309 	mul.w	r3, r3, r9
 8021724:	1c5a      	adds	r2, r3, #1
 8021726:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802172a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802172e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021732:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021736:	704b      	strb	r3, [r1, #1]
 8021738:	788b      	ldrb	r3, [r1, #2]
 802173a:	fb03 f909 	mul.w	r9, r3, r9
 802173e:	f109 0301 	add.w	r3, r9, #1
 8021742:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8021746:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 802174a:	f881 e002 	strb.w	lr, [r1, #2]
 802174e:	b007      	add	sp, #28
 8021750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021754:	2600      	movs	r6, #0
 8021756:	e700      	b.n	802155a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8021758:	2000      	movs	r0, #0
 802175a:	4606      	mov	r6, r0
 802175c:	e708      	b.n	8021570 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802175e:	2000      	movs	r0, #0
 8021760:	e706      	b.n	8021570 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021762:	4620      	mov	r0, r4
 8021764:	e704      	b.n	8021570 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021766:	2500      	movs	r5, #0
 8021768:	e714      	b.n	8021594 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 802176a:	2200      	movs	r2, #0
 802176c:	4615      	mov	r5, r2
 802176e:	e71d      	b.n	80215ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021770:	4672      	mov	r2, lr
 8021772:	4675      	mov	r5, lr
 8021774:	e71a      	b.n	80215ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021776:	2200      	movs	r2, #0
 8021778:	e718      	b.n	80215ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802177a:	4622      	mov	r2, r4
 802177c:	e716      	b.n	80215ac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0802177e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802177e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021782:	b099      	sub	sp, #100	; 0x64
 8021784:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8021788:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802178a:	9017      	str	r0, [sp, #92]	; 0x5c
 802178c:	9306      	str	r3, [sp, #24]
 802178e:	6850      	ldr	r0, [r2, #4]
 8021790:	6812      	ldr	r2, [r2, #0]
 8021792:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8021796:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 802179a:	fb00 1303 	mla	r3, r0, r3, r1
 802179e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80217a2:	18d3      	adds	r3, r2, r3
 80217a4:	9309      	str	r3, [sp, #36]	; 0x24
 80217a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80217a8:	681b      	ldr	r3, [r3, #0]
 80217aa:	930e      	str	r3, [sp, #56]	; 0x38
 80217ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80217ae:	2b00      	cmp	r3, #0
 80217b0:	dc03      	bgt.n	80217ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80217b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	f340 8360 	ble.w	8021e7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80217ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80217bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80217c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80217c4:	1e48      	subs	r0, r1, #1
 80217c6:	1e57      	subs	r7, r2, #1
 80217c8:	9b06      	ldr	r3, [sp, #24]
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	f340 817b 	ble.w	8021ac6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 80217d0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80217d4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80217d8:	d406      	bmi.n	80217e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80217da:	4584      	cmp	ip, r0
 80217dc:	da04      	bge.n	80217e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80217de:	2b00      	cmp	r3, #0
 80217e0:	db02      	blt.n	80217e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80217e2:	42bb      	cmp	r3, r7
 80217e4:	f2c0 8170 	blt.w	8021ac8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80217e8:	f11c 0c01 	adds.w	ip, ip, #1
 80217ec:	f100 8160 	bmi.w	8021ab0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80217f0:	4561      	cmp	r1, ip
 80217f2:	f2c0 815d 	blt.w	8021ab0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80217f6:	3301      	adds	r3, #1
 80217f8:	f100 815a 	bmi.w	8021ab0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80217fc:	429a      	cmp	r2, r3
 80217fe:	f2c0 8157 	blt.w	8021ab0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021802:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8021806:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021808:	f1b8 0f00 	cmp.w	r8, #0
 802180c:	f340 8179 	ble.w	8021b02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8021810:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021812:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021816:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021818:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802181c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021820:	142a      	asrs	r2, r5, #16
 8021822:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021826:	689b      	ldr	r3, [r3, #8]
 8021828:	f100 81be 	bmi.w	8021ba8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802182c:	f103 39ff 	add.w	r9, r3, #4294967295
 8021830:	454a      	cmp	r2, r9
 8021832:	f280 81b9 	bge.w	8021ba8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021836:	f1bc 0f00 	cmp.w	ip, #0
 802183a:	f2c0 81b5 	blt.w	8021ba8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802183e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8021842:	45cc      	cmp	ip, r9
 8021844:	f280 81b0 	bge.w	8021ba8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021848:	b21b      	sxth	r3, r3
 802184a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802184c:	fb0c 2203 	mla	r2, ip, r3, r2
 8021850:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8021854:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021858:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802185c:	2900      	cmp	r1, #0
 802185e:	f000 8197 	beq.w	8021b90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8021862:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8021866:	940a      	str	r4, [sp, #40]	; 0x28
 8021868:	0e24      	lsrs	r4, r4, #24
 802186a:	9411      	str	r4, [sp, #68]	; 0x44
 802186c:	b180      	cbz	r0, 8021890 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802186e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021872:	3b01      	subs	r3, #1
 8021874:	009b      	lsls	r3, r3, #2
 8021876:	3304      	adds	r3, #4
 8021878:	eb09 0c03 	add.w	ip, r9, r3
 802187c:	f859 3003 	ldr.w	r3, [r9, r3]
 8021880:	9307      	str	r3, [sp, #28]
 8021882:	0e1b      	lsrs	r3, r3, #24
 8021884:	930f      	str	r3, [sp, #60]	; 0x3c
 8021886:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802188a:	930b      	str	r3, [sp, #44]	; 0x2c
 802188c:	0e1b      	lsrs	r3, r3, #24
 802188e:	9312      	str	r3, [sp, #72]	; 0x48
 8021890:	b289      	uxth	r1, r1
 8021892:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021894:	b280      	uxth	r0, r0
 8021896:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021898:	fb01 fa00 	mul.w	sl, r1, r0
 802189c:	0109      	lsls	r1, r1, #4
 802189e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80218a2:	eba1 090a 	sub.w	r9, r1, sl
 80218a6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80218aa:	b280      	uxth	r0, r0
 80218ac:	fa1f f989 	uxth.w	r9, r9
 80218b0:	1a09      	subs	r1, r1, r0
 80218b2:	fb09 f303 	mul.w	r3, r9, r3
 80218b6:	b289      	uxth	r1, r1
 80218b8:	fb01 330e 	mla	r3, r1, lr, r3
 80218bc:	fb00 3304 	mla	r3, r0, r4, r3
 80218c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80218c2:	fb0a 3304 	mla	r3, sl, r4, r3
 80218c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	f000 80e8 	beq.w	8021aa0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80218d0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80218d4:	d01b      	beq.n	802190e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80218d6:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80218da:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80218de:	fb0e fb0b 	mul.w	fp, lr, fp
 80218e2:	fb0e fe02 	mul.w	lr, lr, r2
 80218e6:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80218ea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80218ee:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80218f2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80218f6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80218fa:	445a      	add	r2, fp
 80218fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021900:	0a12      	lsrs	r2, r2, #8
 8021902:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021906:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802190a:	ea42 020c 	orr.w	r2, r2, ip
 802190e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021910:	2cff      	cmp	r4, #255	; 0xff
 8021912:	d021      	beq.n	8021958 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8021914:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021916:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802191a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802191c:	fb04 fc0c 	mul.w	ip, r4, ip
 8021920:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021922:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021926:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802192a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802192c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021930:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021934:	fb04 fb0b 	mul.w	fp, r4, fp
 8021938:	44e6      	add	lr, ip
 802193a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802193e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021942:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021946:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802194a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802194e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021952:	ea4e 040b 	orr.w	r4, lr, fp
 8021956:	940a      	str	r4, [sp, #40]	; 0x28
 8021958:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802195a:	2cff      	cmp	r4, #255	; 0xff
 802195c:	d021      	beq.n	80219a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802195e:	9c07      	ldr	r4, [sp, #28]
 8021960:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021964:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021966:	fb04 fc0c 	mul.w	ip, r4, ip
 802196a:	9c07      	ldr	r4, [sp, #28]
 802196c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021970:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8021974:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021976:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802197a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802197e:	fb04 fb0b 	mul.w	fp, r4, fp
 8021982:	44e6      	add	lr, ip
 8021984:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8021988:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802198c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021990:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021994:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021998:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802199c:	ea4e 040b 	orr.w	r4, lr, fp
 80219a0:	9407      	str	r4, [sp, #28]
 80219a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80219a4:	2cff      	cmp	r4, #255	; 0xff
 80219a6:	d021      	beq.n	80219ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80219a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219aa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80219ae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80219b0:	fb04 fc0c 	mul.w	ip, r4, ip
 80219b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80219b6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80219ba:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80219be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80219c0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80219c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80219c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80219cc:	44e6      	add	lr, ip
 80219ce:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80219d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80219d6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80219da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80219de:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80219e2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80219e6:	ea4e 040b 	orr.w	r4, lr, fp
 80219ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80219ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80219ee:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80219f2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80219f6:	2bff      	cmp	r3, #255	; 0xff
 80219f8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80219fc:	9c07      	ldr	r4, [sp, #28]
 80219fe:	fb09 fc0c 	mul.w	ip, r9, ip
 8021a02:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021a06:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021a0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021a0c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021a10:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021a14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021a16:	fb0a cc0e 	mla	ip, sl, lr, ip
 8021a1a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021a1e:	fb09 f90e 	mul.w	r9, r9, lr
 8021a22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a26:	fb01 9202 	mla	r2, r1, r2, r9
 8021a2a:	9907      	ldr	r1, [sp, #28]
 8021a2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021a30:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8021a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021a36:	fb00 220b 	mla	r2, r0, fp, r2
 8021a3a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8021a3e:	fb0a 2a00 	mla	sl, sl, r0, r2
 8021a42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021a46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021a4a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021a4e:	fa5f f08c 	uxtb.w	r0, ip
 8021a52:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8021a56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021a5a:	f000 80a2 	beq.w	8021ba2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8021a5e:	43db      	mvns	r3, r3
 8021a60:	783a      	ldrb	r2, [r7, #0]
 8021a62:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021a66:	b2db      	uxtb	r3, r3
 8021a68:	fb02 fe03 	mul.w	lr, r2, r3
 8021a6c:	fb0a fa03 	mul.w	sl, sl, r3
 8021a70:	f10e 0201 	add.w	r2, lr, #1
 8021a74:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8021a78:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021a7c:	703a      	strb	r2, [r7, #0]
 8021a7e:	787a      	ldrb	r2, [r7, #1]
 8021a80:	fb02 f003 	mul.w	r0, r2, r3
 8021a84:	f10a 0301 	add.w	r3, sl, #1
 8021a88:	1c42      	adds	r2, r0, #1
 8021a8a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021a8e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021a92:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021a96:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021a9a:	707a      	strb	r2, [r7, #1]
 8021a9c:	f887 c002 	strb.w	ip, [r7, #2]
 8021aa0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021aa2:	3703      	adds	r7, #3
 8021aa4:	f108 38ff 	add.w	r8, r8, #4294967295
 8021aa8:	441d      	add	r5, r3
 8021aaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021aac:	441e      	add	r6, r3
 8021aae:	e6ab      	b.n	8021808 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021ab0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021ab2:	441d      	add	r5, r3
 8021ab4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021ab6:	441e      	add	r6, r3
 8021ab8:	9b06      	ldr	r3, [sp, #24]
 8021aba:	3b01      	subs	r3, #1
 8021abc:	9306      	str	r3, [sp, #24]
 8021abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ac0:	3303      	adds	r3, #3
 8021ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8021ac4:	e680      	b.n	80217c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021ac6:	d024      	beq.n	8021b12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021ac8:	9b06      	ldr	r3, [sp, #24]
 8021aca:	9825      	ldr	r0, [sp, #148]	; 0x94
 8021acc:	3b01      	subs	r3, #1
 8021ace:	fb00 5003 	mla	r0, r0, r3, r5
 8021ad2:	1400      	asrs	r0, r0, #16
 8021ad4:	f53f ae95 	bmi.w	8021802 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021ad8:	3901      	subs	r1, #1
 8021ada:	4288      	cmp	r0, r1
 8021adc:	f6bf ae91 	bge.w	8021802 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021ae0:	9926      	ldr	r1, [sp, #152]	; 0x98
 8021ae2:	fb01 6303 	mla	r3, r1, r3, r6
 8021ae6:	141b      	asrs	r3, r3, #16
 8021ae8:	f53f ae8b 	bmi.w	8021802 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021aec:	3a01      	subs	r2, #1
 8021aee:	4293      	cmp	r3, r2
 8021af0:	f6bf ae87 	bge.w	8021802 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021af6:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021afa:	1cdf      	adds	r7, r3, #3
 8021afc:	f1bb 0f00 	cmp.w	fp, #0
 8021b00:	dc6e      	bgt.n	8021be0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8021b02:	9b06      	ldr	r3, [sp, #24]
 8021b04:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b0a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021b0e:	4423      	add	r3, r4
 8021b10:	9309      	str	r3, [sp, #36]	; 0x24
 8021b12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021b14:	2b00      	cmp	r3, #0
 8021b16:	f340 81b0 	ble.w	8021e7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8021b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021b20:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021b24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021b28:	eef0 6a62 	vmov.f32	s13, s5
 8021b2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021b30:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021b34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b38:	ee16 5a90 	vmov	r5, s13
 8021b3c:	eef0 6a43 	vmov.f32	s13, s6
 8021b40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b44:	ee16 6a90 	vmov	r6, s13
 8021b48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021b4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021b50:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021b54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021b58:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021b5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021b60:	ee12 2a90 	vmov	r2, s5
 8021b64:	eef0 2a47 	vmov.f32	s5, s14
 8021b68:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b6c:	ee13 2a10 	vmov	r2, s6
 8021b70:	9325      	str	r3, [sp, #148]	; 0x94
 8021b72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021b74:	eeb0 3a67 	vmov.f32	s6, s15
 8021b78:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b7c:	9326      	str	r3, [sp, #152]	; 0x98
 8021b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021b80:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021b82:	3b01      	subs	r3, #1
 8021b84:	9315      	str	r3, [sp, #84]	; 0x54
 8021b86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021b88:	bf08      	it	eq
 8021b8a:	4613      	moveq	r3, r2
 8021b8c:	9306      	str	r3, [sp, #24]
 8021b8e:	e60d      	b.n	80217ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021b90:	2800      	cmp	r0, #0
 8021b92:	f43f ae7d 	beq.w	8021890 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021b96:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8021b9a:	9307      	str	r3, [sp, #28]
 8021b9c:	0e1b      	lsrs	r3, r3, #24
 8021b9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021ba0:	e676      	b.n	8021890 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021ba2:	7038      	strb	r0, [r7, #0]
 8021ba4:	7079      	strb	r1, [r7, #1]
 8021ba6:	e779      	b.n	8021a9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021ba8:	f112 0901 	adds.w	r9, r2, #1
 8021bac:	f53f af78 	bmi.w	8021aa0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021bb0:	454b      	cmp	r3, r9
 8021bb2:	f6ff af75 	blt.w	8021aa0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021bb6:	f11c 0901 	adds.w	r9, ip, #1
 8021bba:	f53f af71 	bmi.w	8021aa0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021bbe:	45ce      	cmp	lr, r9
 8021bc0:	f6ff af6e 	blt.w	8021aa0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021bc4:	b21b      	sxth	r3, r3
 8021bc6:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8021bca:	fa0f f28e 	sxth.w	r2, lr
 8021bce:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8021bd2:	9200      	str	r2, [sp, #0]
 8021bd4:	4639      	mov	r1, r7
 8021bd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021bd8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021bda:	f7ff fca1 	bl	8021520 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8021bde:	e75f      	b.n	8021aa0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021be0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021be2:	1429      	asrs	r1, r5, #16
 8021be4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021be6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021bea:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8021bee:	1433      	asrs	r3, r6, #16
 8021bf0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021bf4:	fb0c 1303 	mla	r3, ip, r3, r1
 8021bf8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021bfa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8021bfe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8021c02:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021c06:	2a00      	cmp	r2, #0
 8021c08:	f000 8129 	beq.w	8021e5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8021c0c:	684c      	ldr	r4, [r1, #4]
 8021c0e:	940c      	str	r4, [sp, #48]	; 0x30
 8021c10:	0e24      	lsrs	r4, r4, #24
 8021c12:	9413      	str	r4, [sp, #76]	; 0x4c
 8021c14:	b198      	cbz	r0, 8021c3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8021c16:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8021c1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021c1e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8021c22:	f10c 0c04 	add.w	ip, ip, #4
 8021c26:	eb01 080c 	add.w	r8, r1, ip
 8021c2a:	f851 100c 	ldr.w	r1, [r1, ip]
 8021c2e:	9108      	str	r1, [sp, #32]
 8021c30:	0e09      	lsrs	r1, r1, #24
 8021c32:	9110      	str	r1, [sp, #64]	; 0x40
 8021c34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021c38:	910d      	str	r1, [sp, #52]	; 0x34
 8021c3a:	0e09      	lsrs	r1, r1, #24
 8021c3c:	9114      	str	r1, [sp, #80]	; 0x50
 8021c3e:	b292      	uxth	r2, r2
 8021c40:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021c42:	b280      	uxth	r0, r0
 8021c44:	fb02 f900 	mul.w	r9, r2, r0
 8021c48:	0112      	lsls	r2, r2, #4
 8021c4a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021c4e:	eba2 0809 	sub.w	r8, r2, r9
 8021c52:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021c56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021c58:	b280      	uxth	r0, r0
 8021c5a:	fa1f f888 	uxth.w	r8, r8
 8021c5e:	1a09      	subs	r1, r1, r0
 8021c60:	fb08 f202 	mul.w	r2, r8, r2
 8021c64:	b289      	uxth	r1, r1
 8021c66:	fb01 220e 	mla	r2, r1, lr, r2
 8021c6a:	fb00 2204 	mla	r2, r0, r4, r2
 8021c6e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021c70:	fb09 2204 	mla	r2, r9, r4, r2
 8021c74:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021c78:	2a00      	cmp	r2, #0
 8021c7a:	f000 80e8 	beq.w	8021e4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8021c7e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021c82:	d01b      	beq.n	8021cbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8021c84:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021c88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c8c:	fb0e fa0a 	mul.w	sl, lr, sl
 8021c90:	fb0e fe03 	mul.w	lr, lr, r3
 8021c94:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021c98:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021c9c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021ca0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021ca4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021ca8:	4453      	add	r3, sl
 8021caa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021cae:	0a1b      	lsrs	r3, r3, #8
 8021cb0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021cb4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021cb8:	ea43 030c 	orr.w	r3, r3, ip
 8021cbc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021cbe:	2cff      	cmp	r4, #255	; 0xff
 8021cc0:	d021      	beq.n	8021d06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8021cc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021cc4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021cc8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021cca:	fb04 fc0c 	mul.w	ip, r4, ip
 8021cce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021cd0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021cd4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021cd8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021cda:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021cde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021ce2:	fb04 fa0a 	mul.w	sl, r4, sl
 8021ce6:	44e6      	add	lr, ip
 8021ce8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021cec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021cf0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021cf4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021cf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021cfc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d00:	ea4e 040a 	orr.w	r4, lr, sl
 8021d04:	940c      	str	r4, [sp, #48]	; 0x30
 8021d06:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021d08:	2cff      	cmp	r4, #255	; 0xff
 8021d0a:	d021      	beq.n	8021d50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8021d0c:	9c08      	ldr	r4, [sp, #32]
 8021d0e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021d12:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021d14:	fb04 fc0c 	mul.w	ip, r4, ip
 8021d18:	9c08      	ldr	r4, [sp, #32]
 8021d1a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021d1e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8021d20:	fb04 fa0e 	mul.w	sl, r4, lr
 8021d24:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021d28:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021d2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d30:	44e6      	add	lr, ip
 8021d32:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021d36:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021d3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d4a:	ea4e 040a 	orr.w	r4, lr, sl
 8021d4e:	9408      	str	r4, [sp, #32]
 8021d50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021d52:	2cff      	cmp	r4, #255	; 0xff
 8021d54:	d021      	beq.n	8021d9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8021d56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021d58:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021d5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021d5e:	fb04 fc0c 	mul.w	ip, r4, ip
 8021d62:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021d64:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021d68:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021d6c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021d6e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021d72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d76:	fb04 fa0a 	mul.w	sl, r4, sl
 8021d7a:	44e6      	add	lr, ip
 8021d7c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021d80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d84:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021d88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d90:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d94:	ea4e 040a 	orr.w	r4, lr, sl
 8021d98:	940d      	str	r4, [sp, #52]	; 0x34
 8021d9a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021d9c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021da4:	2aff      	cmp	r2, #255	; 0xff
 8021da6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021daa:	9c08      	ldr	r4, [sp, #32]
 8021dac:	fb08 fc0c 	mul.w	ip, r8, ip
 8021db0:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021db4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021db8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021dba:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021dbe:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021dc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021dc4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021dc8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021dcc:	fb08 f80e 	mul.w	r8, r8, lr
 8021dd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021dd4:	fb01 8303 	mla	r3, r1, r3, r8
 8021dd8:	9908      	ldr	r1, [sp, #32]
 8021dda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021dde:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021de2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8021de4:	fb00 330a 	mla	r3, r0, sl, r3
 8021de8:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8021dec:	fb09 3e0e 	mla	lr, r9, lr, r3
 8021df0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021df4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021df8:	ea4c 0c0e 	orr.w	ip, ip, lr
 8021dfc:	fa5f f08c 	uxtb.w	r0, ip
 8021e00:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8021e04:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021e08:	d032      	beq.n	8021e70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8021e0a:	43d2      	mvns	r2, r2
 8021e0c:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8021e10:	b2d2      	uxtb	r2, r2
 8021e12:	fb0e fe02 	mul.w	lr, lr, r2
 8021e16:	f10e 0301 	add.w	r3, lr, #1
 8021e1a:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8021e1e:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8021e22:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8021e26:	4350      	muls	r0, r2
 8021e28:	f807 3c03 	strb.w	r3, [r7, #-3]
 8021e2c:	1c43      	adds	r3, r0, #1
 8021e2e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8021e32:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021e36:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8021e3a:	4353      	muls	r3, r2
 8021e3c:	f807 1c02 	strb.w	r1, [r7, #-2]
 8021e40:	1c5a      	adds	r2, r3, #1
 8021e42:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021e46:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8021e4a:	f807 cc01 	strb.w	ip, [r7, #-1]
 8021e4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021e50:	3703      	adds	r7, #3
 8021e52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021e56:	441d      	add	r5, r3
 8021e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021e5a:	441e      	add	r6, r3
 8021e5c:	e64e      	b.n	8021afc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8021e5e:	2800      	cmp	r0, #0
 8021e60:	f43f aeed 	beq.w	8021c3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8021e64:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8021e68:	9108      	str	r1, [sp, #32]
 8021e6a:	0e09      	lsrs	r1, r1, #24
 8021e6c:	9110      	str	r1, [sp, #64]	; 0x40
 8021e6e:	e6e6      	b.n	8021c3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8021e70:	f807 0c03 	strb.w	r0, [r7, #-3]
 8021e74:	f807 1c02 	strb.w	r1, [r7, #-2]
 8021e78:	e7e7      	b.n	8021e4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8021e7a:	b019      	add	sp, #100	; 0x64
 8021e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021e80 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8021e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e84:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8021e88:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021e8c:	2c00      	cmp	r4, #0
 8021e8e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021e92:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8021e96:	fb00 4e03 	mla	lr, r0, r3, r4
 8021e9a:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8021e9e:	f2c0 80b8 	blt.w	8022012 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021ea2:	45a1      	cmp	r9, r4
 8021ea4:	f340 80b5 	ble.w	8022012 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021ea8:	2800      	cmp	r0, #0
 8021eaa:	f2c0 80b2 	blt.w	8022012 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021eae:	4580      	cmp	r8, r0
 8021eb0:	f340 80af 	ble.w	8022012 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021eb4:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8021eb8:	f01e 0f01 	tst.w	lr, #1
 8021ebc:	5d56      	ldrb	r6, [r2, r5]
 8021ebe:	bf0c      	ite	eq
 8021ec0:	f006 060f 	andeq.w	r6, r6, #15
 8021ec4:	1136      	asrne	r6, r6, #4
 8021ec6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021eca:	b2f6      	uxtb	r6, r6
 8021ecc:	f114 0a01 	adds.w	sl, r4, #1
 8021ed0:	f100 80a1 	bmi.w	8022016 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8021ed4:	45d1      	cmp	r9, sl
 8021ed6:	f340 809e 	ble.w	8022016 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8021eda:	2800      	cmp	r0, #0
 8021edc:	f2c0 809b 	blt.w	8022016 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8021ee0:	4580      	cmp	r8, r0
 8021ee2:	f340 8098 	ble.w	8022016 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8021ee6:	2f00      	cmp	r7, #0
 8021ee8:	f000 8097 	beq.w	802201a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8021eec:	f10e 0b01 	add.w	fp, lr, #1
 8021ef0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8021ef4:	f01b 0f01 	tst.w	fp, #1
 8021ef8:	5d55      	ldrb	r5, [r2, r5]
 8021efa:	bf0c      	ite	eq
 8021efc:	f005 050f 	andeq.w	r5, r5, #15
 8021f00:	112d      	asrne	r5, r5, #4
 8021f02:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8021f06:	b2ed      	uxtb	r5, r5
 8021f08:	f1bc 0f00 	cmp.w	ip, #0
 8021f0c:	f000 8089 	beq.w	8022022 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8021f10:	2c00      	cmp	r4, #0
 8021f12:	f100 0001 	add.w	r0, r0, #1
 8021f16:	f2c0 8082 	blt.w	802201e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8021f1a:	45a1      	cmp	r9, r4
 8021f1c:	dd7f      	ble.n	802201e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8021f1e:	2800      	cmp	r0, #0
 8021f20:	db7d      	blt.n	802201e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8021f22:	4580      	cmp	r8, r0
 8021f24:	dd7b      	ble.n	802201e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8021f26:	eb03 0b0e 	add.w	fp, r3, lr
 8021f2a:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8021f2e:	f01b 0f01 	tst.w	fp, #1
 8021f32:	5d14      	ldrb	r4, [r2, r4]
 8021f34:	bf0c      	ite	eq
 8021f36:	f004 040f 	andeq.w	r4, r4, #15
 8021f3a:	1124      	asrne	r4, r4, #4
 8021f3c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021f40:	b2e4      	uxtb	r4, r4
 8021f42:	f1ba 0f00 	cmp.w	sl, #0
 8021f46:	db6f      	blt.n	8022028 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021f48:	45d1      	cmp	r9, sl
 8021f4a:	dd6d      	ble.n	8022028 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021f4c:	2800      	cmp	r0, #0
 8021f4e:	db6b      	blt.n	8022028 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021f50:	4580      	cmp	r8, r0
 8021f52:	dd69      	ble.n	8022028 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021f54:	2f00      	cmp	r7, #0
 8021f56:	d069      	beq.n	802202c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8021f58:	3301      	adds	r3, #1
 8021f5a:	449e      	add	lr, r3
 8021f5c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021f60:	f01e 0f01 	tst.w	lr, #1
 8021f64:	5cd0      	ldrb	r0, [r2, r3]
 8021f66:	bf0c      	ite	eq
 8021f68:	f000 000f 	andeq.w	r0, r0, #15
 8021f6c:	1100      	asrne	r0, r0, #4
 8021f6e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021f72:	b2c3      	uxtb	r3, r0
 8021f74:	b2ba      	uxth	r2, r7
 8021f76:	fa1f fc8c 	uxth.w	ip, ip
 8021f7a:	fb02 f00c 	mul.w	r0, r2, ip
 8021f7e:	0112      	lsls	r2, r2, #4
 8021f80:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8021f84:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021f88:	1a12      	subs	r2, r2, r0
 8021f8a:	fa1f fc8c 	uxth.w	ip, ip
 8021f8e:	b292      	uxth	r2, r2
 8021f90:	eba7 070c 	sub.w	r7, r7, ip
 8021f94:	436a      	muls	r2, r5
 8021f96:	b2bf      	uxth	r7, r7
 8021f98:	fb06 2207 	mla	r2, r6, r7, r2
 8021f9c:	fb0c 2404 	mla	r4, ip, r4, r2
 8021fa0:	fb00 4303 	mla	r3, r0, r3, r4
 8021fa4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021fa8:	b38b      	cbz	r3, 802200e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8021faa:	4a21      	ldr	r2, [pc, #132]	; (8022030 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8021fac:	6814      	ldr	r4, [r2, #0]
 8021fae:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8021fb2:	b2e5      	uxtb	r5, r4
 8021fb4:	4353      	muls	r3, r2
 8021fb6:	1c5a      	adds	r2, r3, #1
 8021fb8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021fbc:	1212      	asrs	r2, r2, #8
 8021fbe:	b290      	uxth	r0, r2
 8021fc0:	43d2      	mvns	r2, r2
 8021fc2:	fb15 f500 	smulbb	r5, r5, r0
 8021fc6:	b2d3      	uxtb	r3, r2
 8021fc8:	780a      	ldrb	r2, [r1, #0]
 8021fca:	fb02 5203 	mla	r2, r2, r3, r5
 8021fce:	b292      	uxth	r2, r2
 8021fd0:	1c55      	adds	r5, r2, #1
 8021fd2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8021fd6:	784d      	ldrb	r5, [r1, #1]
 8021fd8:	fb15 f503 	smulbb	r5, r5, r3
 8021fdc:	1212      	asrs	r2, r2, #8
 8021fde:	700a      	strb	r2, [r1, #0]
 8021fe0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8021fe4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8021fe8:	fb02 5200 	mla	r2, r2, r0, r5
 8021fec:	b292      	uxth	r2, r2
 8021fee:	1c55      	adds	r5, r2, #1
 8021ff0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8021ff4:	1212      	asrs	r2, r2, #8
 8021ff6:	704a      	strb	r2, [r1, #1]
 8021ff8:	788a      	ldrb	r2, [r1, #2]
 8021ffa:	fb12 f303 	smulbb	r3, r2, r3
 8021ffe:	fb04 3300 	mla	r3, r4, r0, r3
 8022002:	b29b      	uxth	r3, r3
 8022004:	1c5a      	adds	r2, r3, #1
 8022006:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802200a:	121b      	asrs	r3, r3, #8
 802200c:	708b      	strb	r3, [r1, #2]
 802200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022012:	2600      	movs	r6, #0
 8022014:	e75a      	b.n	8021ecc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8022016:	2500      	movs	r5, #0
 8022018:	e776      	b.n	8021f08 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802201a:	463d      	mov	r5, r7
 802201c:	e774      	b.n	8021f08 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802201e:	2400      	movs	r4, #0
 8022020:	e78f      	b.n	8021f42 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8022022:	4663      	mov	r3, ip
 8022024:	4664      	mov	r4, ip
 8022026:	e7a5      	b.n	8021f74 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022028:	2300      	movs	r3, #0
 802202a:	e7a3      	b.n	8021f74 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802202c:	463b      	mov	r3, r7
 802202e:	e7a1      	b.n	8021f74 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022030:	2400f448 	.word	0x2400f448

08022034 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022038:	b097      	sub	sp, #92	; 0x5c
 802203a:	9214      	str	r2, [sp, #80]	; 0x50
 802203c:	9309      	str	r3, [sp, #36]	; 0x24
 802203e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022040:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8022044:	9015      	str	r0, [sp, #84]	; 0x54
 8022046:	910c      	str	r1, [sp, #48]	; 0x30
 8022048:	6850      	ldr	r0, [r2, #4]
 802204a:	930e      	str	r3, [sp, #56]	; 0x38
 802204c:	6812      	ldr	r2, [r2, #0]
 802204e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8022052:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8022056:	fb00 1303 	mla	r3, r0, r3, r1
 802205a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802205e:	eb02 0a03 	add.w	sl, r2, r3
 8022062:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022064:	689b      	ldr	r3, [r3, #8]
 8022066:	3301      	adds	r3, #1
 8022068:	f023 0301 	bic.w	r3, r3, #1
 802206c:	930f      	str	r3, [sp, #60]	; 0x3c
 802206e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022070:	681f      	ldr	r7, [r3, #0]
 8022072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022074:	2b00      	cmp	r3, #0
 8022076:	dc03      	bgt.n	8022080 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802207a:	2b00      	cmp	r3, #0
 802207c:	f340 8247 	ble.w	802250e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8022080:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022082:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022086:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802208a:	1e48      	subs	r0, r1, #1
 802208c:	f102 3cff 	add.w	ip, r2, #4294967295
 8022090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022092:	2b00      	cmp	r3, #0
 8022094:	f340 80e5 	ble.w	8022262 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8022098:	ea5f 4e25 	movs.w	lr, r5, asr #16
 802209c:	ea4f 4326 	mov.w	r3, r6, asr #16
 80220a0:	d406      	bmi.n	80220b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80220a2:	4586      	cmp	lr, r0
 80220a4:	da04      	bge.n	80220b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	db02      	blt.n	80220b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80220aa:	4563      	cmp	r3, ip
 80220ac:	f2c0 80da 	blt.w	8022264 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80220b0:	f11e 0e01 	adds.w	lr, lr, #1
 80220b4:	f100 80cb 	bmi.w	802224e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80220b8:	4571      	cmp	r1, lr
 80220ba:	f2c0 80c8 	blt.w	802224e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80220be:	3301      	adds	r3, #1
 80220c0:	f100 80c5 	bmi.w	802224e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80220c4:	429a      	cmp	r2, r3
 80220c6:	f2c0 80c2 	blt.w	802224e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80220ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80220cc:	46d0      	mov	r8, sl
 80220ce:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80220d2:	930d      	str	r3, [sp, #52]	; 0x34
 80220d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	f340 80e3 	ble.w	80222a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80220dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80220de:	1430      	asrs	r0, r6, #16
 80220e0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80220e4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80220e8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80220ec:	142b      	asrs	r3, r5, #16
 80220ee:	f100 812e 	bmi.w	802234e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80220f2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80220f6:	455b      	cmp	r3, fp
 80220f8:	f280 8129 	bge.w	802234e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80220fc:	2800      	cmp	r0, #0
 80220fe:	f2c0 8126 	blt.w	802234e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022102:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022106:	4558      	cmp	r0, fp
 8022108:	f280 8121 	bge.w	802234e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802210c:	fb00 3309 	mla	r3, r0, r9, r3
 8022110:	0858      	lsrs	r0, r3, #1
 8022112:	07dc      	lsls	r4, r3, #31
 8022114:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022118:	bf54      	ite	pl
 802211a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802211e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022122:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022126:	fa5f fc8c 	uxtb.w	ip, ip
 802212a:	2a00      	cmp	r2, #0
 802212c:	f000 80fe 	beq.w	802232c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8022130:	1c58      	adds	r0, r3, #1
 8022132:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022136:	07c0      	lsls	r0, r0, #31
 8022138:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802213c:	bf54      	ite	pl
 802213e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022142:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022146:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802214a:	fa5f f08e 	uxtb.w	r0, lr
 802214e:	9010      	str	r0, [sp, #64]	; 0x40
 8022150:	b1d9      	cbz	r1, 802218a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022152:	444b      	add	r3, r9
 8022154:	0858      	lsrs	r0, r3, #1
 8022156:	07dc      	lsls	r4, r3, #31
 8022158:	f103 0301 	add.w	r3, r3, #1
 802215c:	5c38      	ldrb	r0, [r7, r0]
 802215e:	bf54      	ite	pl
 8022160:	f000 000f 	andpl.w	r0, r0, #15
 8022164:	1100      	asrmi	r0, r0, #4
 8022166:	07dc      	lsls	r4, r3, #31
 8022168:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802216c:	b2c0      	uxtb	r0, r0
 802216e:	900a      	str	r0, [sp, #40]	; 0x28
 8022170:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8022174:	f817 e000 	ldrb.w	lr, [r7, r0]
 8022178:	bf54      	ite	pl
 802217a:	f00e 030f 	andpl.w	r3, lr, #15
 802217e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8022182:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022186:	b2db      	uxtb	r3, r3
 8022188:	9311      	str	r3, [sp, #68]	; 0x44
 802218a:	b292      	uxth	r2, r2
 802218c:	b289      	uxth	r1, r1
 802218e:	0113      	lsls	r3, r2, #4
 8022190:	fb02 f001 	mul.w	r0, r2, r1
 8022194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022196:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802219a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 802219e:	1a1b      	subs	r3, r3, r0
 80221a0:	b289      	uxth	r1, r1
 80221a2:	b29b      	uxth	r3, r3
 80221a4:	ebae 0e01 	sub.w	lr, lr, r1
 80221a8:	4353      	muls	r3, r2
 80221aa:	fa1f fe8e 	uxth.w	lr, lr
 80221ae:	fb0c 320e 	mla	r2, ip, lr, r3
 80221b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80221b4:	fb01 2203 	mla	r2, r1, r3, r2
 80221b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80221ba:	fb00 2203 	mla	r2, r0, r3, r2
 80221be:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80221c2:	2a00      	cmp	r2, #0
 80221c4:	d039      	beq.n	802223a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80221c6:	4bc7      	ldr	r3, [pc, #796]	; (80224e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80221c8:	6819      	ldr	r1, [r3, #0]
 80221ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221cc:	fa5f fc81 	uxtb.w	ip, r1
 80221d0:	435a      	muls	r2, r3
 80221d2:	1c53      	adds	r3, r2, #1
 80221d4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80221d8:	1212      	asrs	r2, r2, #8
 80221da:	b290      	uxth	r0, r2
 80221dc:	43d2      	mvns	r2, r2
 80221de:	fb1c fc00 	smulbb	ip, ip, r0
 80221e2:	b2d3      	uxtb	r3, r2
 80221e4:	f898 2000 	ldrb.w	r2, [r8]
 80221e8:	fb02 c203 	mla	r2, r2, r3, ip
 80221ec:	b292      	uxth	r2, r2
 80221ee:	f102 0c01 	add.w	ip, r2, #1
 80221f2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80221f6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80221fa:	fb1c fc03 	smulbb	ip, ip, r3
 80221fe:	1212      	asrs	r2, r2, #8
 8022200:	f888 2000 	strb.w	r2, [r8]
 8022204:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022208:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802220c:	fb02 c200 	mla	r2, r2, r0, ip
 8022210:	b292      	uxth	r2, r2
 8022212:	f102 0c01 	add.w	ip, r2, #1
 8022216:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802221a:	1212      	asrs	r2, r2, #8
 802221c:	f888 2001 	strb.w	r2, [r8, #1]
 8022220:	f898 2002 	ldrb.w	r2, [r8, #2]
 8022224:	fb12 f303 	smulbb	r3, r2, r3
 8022228:	fb01 3300 	mla	r3, r1, r0, r3
 802222c:	b29b      	uxth	r3, r3
 802222e:	1c5a      	adds	r2, r3, #1
 8022230:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022234:	121b      	asrs	r3, r3, #8
 8022236:	f888 3002 	strb.w	r3, [r8, #2]
 802223a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802223c:	f108 0803 	add.w	r8, r8, #3
 8022240:	441d      	add	r5, r3
 8022242:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022244:	441e      	add	r6, r3
 8022246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022248:	3b01      	subs	r3, #1
 802224a:	930d      	str	r3, [sp, #52]	; 0x34
 802224c:	e742      	b.n	80220d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802224e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022250:	f10a 0a03 	add.w	sl, sl, #3
 8022254:	441d      	add	r5, r3
 8022256:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022258:	441e      	add	r6, r3
 802225a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802225c:	3b01      	subs	r3, #1
 802225e:	9309      	str	r3, [sp, #36]	; 0x24
 8022260:	e716      	b.n	8022090 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8022262:	d024      	beq.n	80222ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8022264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022266:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022268:	3b01      	subs	r3, #1
 802226a:	fb00 5003 	mla	r0, r0, r3, r5
 802226e:	1400      	asrs	r0, r0, #16
 8022270:	f53f af2b 	bmi.w	80220ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022274:	3901      	subs	r1, #1
 8022276:	4288      	cmp	r0, r1
 8022278:	f6bf af27 	bge.w	80220ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802227c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802227e:	fb01 6303 	mla	r3, r1, r3, r6
 8022282:	141b      	asrs	r3, r3, #16
 8022284:	f53f af21 	bmi.w	80220ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022288:	3a01      	subs	r2, #1
 802228a:	4293      	cmp	r3, r2
 802228c:	f6bf af1d 	bge.w	80220ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022290:	f10a 0e03 	add.w	lr, sl, #3
 8022294:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8022298:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802229c:	f1b8 0f00 	cmp.w	r8, #0
 80222a0:	dc76      	bgt.n	8022390 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80222a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222a4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80222a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80222ac:	44a2      	add	sl, r4
 80222ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80222b0:	2b00      	cmp	r3, #0
 80222b2:	f340 812c 	ble.w	802250e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80222b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80222ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80222bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80222c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80222c4:	eef0 6a62 	vmov.f32	s13, s5
 80222c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80222cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80222d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222d4:	ee16 5a90 	vmov	r5, s13
 80222d8:	eef0 6a43 	vmov.f32	s13, s6
 80222dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80222e0:	ee16 6a90 	vmov	r6, s13
 80222e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80222e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80222ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 80222f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80222f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80222f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80222fc:	ee12 2a90 	vmov	r2, s5
 8022300:	eef0 2a47 	vmov.f32	s5, s14
 8022304:	fb92 f3f3 	sdiv	r3, r2, r3
 8022308:	ee13 2a10 	vmov	r2, s6
 802230c:	9323      	str	r3, [sp, #140]	; 0x8c
 802230e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022310:	eeb0 3a67 	vmov.f32	s6, s15
 8022314:	fb92 f3f3 	sdiv	r3, r2, r3
 8022318:	9324      	str	r3, [sp, #144]	; 0x90
 802231a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802231c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802231e:	3b01      	subs	r3, #1
 8022320:	930c      	str	r3, [sp, #48]	; 0x30
 8022322:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022324:	bf08      	it	eq
 8022326:	4613      	moveq	r3, r2
 8022328:	9309      	str	r3, [sp, #36]	; 0x24
 802232a:	e6a2      	b.n	8022072 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802232c:	2900      	cmp	r1, #0
 802232e:	f43f af2c 	beq.w	802218a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022332:	eb09 0003 	add.w	r0, r9, r3
 8022336:	0843      	lsrs	r3, r0, #1
 8022338:	07c0      	lsls	r0, r0, #31
 802233a:	5cfb      	ldrb	r3, [r7, r3]
 802233c:	bf54      	ite	pl
 802233e:	f003 030f 	andpl.w	r3, r3, #15
 8022342:	111b      	asrmi	r3, r3, #4
 8022344:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022348:	b2db      	uxtb	r3, r3
 802234a:	930a      	str	r3, [sp, #40]	; 0x28
 802234c:	e71d      	b.n	802218a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802234e:	f113 0b01 	adds.w	fp, r3, #1
 8022352:	f53f af72 	bmi.w	802223a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022356:	45dc      	cmp	ip, fp
 8022358:	f6ff af6f 	blt.w	802223a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802235c:	f110 0b01 	adds.w	fp, r0, #1
 8022360:	f53f af6b 	bmi.w	802223a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022364:	45de      	cmp	lr, fp
 8022366:	f6ff af68 	blt.w	802223a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802236a:	9302      	str	r3, [sp, #8]
 802236c:	fa0f f38e 	sxth.w	r3, lr
 8022370:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022372:	9301      	str	r3, [sp, #4]
 8022374:	fa0f f38c 	sxth.w	r3, ip
 8022378:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802237c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022380:	9300      	str	r3, [sp, #0]
 8022382:	463a      	mov	r2, r7
 8022384:	464b      	mov	r3, r9
 8022386:	4641      	mov	r1, r8
 8022388:	9815      	ldr	r0, [sp, #84]	; 0x54
 802238a:	f7ff fd79 	bl	8021e80 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802238e:	e754      	b.n	802223a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022390:	142a      	asrs	r2, r5, #16
 8022392:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022396:	1433      	asrs	r3, r6, #16
 8022398:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802239c:	fb09 2303 	mla	r3, r9, r3, r2
 80223a0:	085a      	lsrs	r2, r3, #1
 80223a2:	07dc      	lsls	r4, r3, #31
 80223a4:	5cba      	ldrb	r2, [r7, r2]
 80223a6:	bf54      	ite	pl
 80223a8:	f002 020f 	andpl.w	r2, r2, #15
 80223ac:	1112      	asrmi	r2, r2, #4
 80223ae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80223b2:	b2d2      	uxtb	r2, r2
 80223b4:	2900      	cmp	r1, #0
 80223b6:	f000 8097 	beq.w	80224e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80223ba:	f103 0b01 	add.w	fp, r3, #1
 80223be:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80223c2:	f01b 0f01 	tst.w	fp, #1
 80223c6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80223ca:	bf0c      	ite	eq
 80223cc:	f00c 0c0f 	andeq.w	ip, ip, #15
 80223d0:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80223d4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80223d8:	fa5f f48c 	uxtb.w	r4, ip
 80223dc:	9412      	str	r4, [sp, #72]	; 0x48
 80223de:	b300      	cbz	r0, 8022422 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80223e0:	444b      	add	r3, r9
 80223e2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80223e6:	07dc      	lsls	r4, r3, #31
 80223e8:	f103 0301 	add.w	r3, r3, #1
 80223ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80223f0:	bf54      	ite	pl
 80223f2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80223f6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80223fa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80223fe:	fa5f f48c 	uxtb.w	r4, ip
 8022402:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022406:	940b      	str	r4, [sp, #44]	; 0x2c
 8022408:	07dc      	lsls	r4, r3, #31
 802240a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802240e:	bf54      	ite	pl
 8022410:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022414:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022418:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802241c:	fa5f f38c 	uxtb.w	r3, ip
 8022420:	9313      	str	r3, [sp, #76]	; 0x4c
 8022422:	b289      	uxth	r1, r1
 8022424:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022426:	b280      	uxth	r0, r0
 8022428:	fb01 f300 	mul.w	r3, r1, r0
 802242c:	0109      	lsls	r1, r1, #4
 802242e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022432:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022436:	1ac9      	subs	r1, r1, r3
 8022438:	b280      	uxth	r0, r0
 802243a:	b289      	uxth	r1, r1
 802243c:	ebac 0c00 	sub.w	ip, ip, r0
 8022440:	4361      	muls	r1, r4
 8022442:	fa1f fc8c 	uxth.w	ip, ip
 8022446:	fb02 120c 	mla	r2, r2, ip, r1
 802244a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802244c:	fb00 2001 	mla	r0, r0, r1, r2
 8022450:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022452:	fb03 0302 	mla	r3, r3, r2, r0
 8022456:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802245a:	2b00      	cmp	r3, #0
 802245c:	d039      	beq.n	80224d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802245e:	4a21      	ldr	r2, [pc, #132]	; (80224e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8022460:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022464:	6810      	ldr	r0, [r2, #0]
 8022466:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022468:	fa5f fc80 	uxtb.w	ip, r0
 802246c:	4353      	muls	r3, r2
 802246e:	1c5a      	adds	r2, r3, #1
 8022470:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022474:	121b      	asrs	r3, r3, #8
 8022476:	b29a      	uxth	r2, r3
 8022478:	43db      	mvns	r3, r3
 802247a:	fb1c fc02 	smulbb	ip, ip, r2
 802247e:	b2db      	uxtb	r3, r3
 8022480:	fb01 c103 	mla	r1, r1, r3, ip
 8022484:	b289      	uxth	r1, r1
 8022486:	f101 0c01 	add.w	ip, r1, #1
 802248a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802248e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022492:	fb1c fc03 	smulbb	ip, ip, r3
 8022496:	1209      	asrs	r1, r1, #8
 8022498:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802249c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80224a0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80224a4:	fb01 c102 	mla	r1, r1, r2, ip
 80224a8:	b289      	uxth	r1, r1
 80224aa:	f101 0c01 	add.w	ip, r1, #1
 80224ae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80224b2:	1209      	asrs	r1, r1, #8
 80224b4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80224b8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80224bc:	fb11 f303 	smulbb	r3, r1, r3
 80224c0:	fb00 3002 	mla	r0, r0, r2, r3
 80224c4:	b280      	uxth	r0, r0
 80224c6:	1c42      	adds	r2, r0, #1
 80224c8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80224cc:	1200      	asrs	r0, r0, #8
 80224ce:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80224d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80224d4:	f10e 0e03 	add.w	lr, lr, #3
 80224d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80224dc:	441d      	add	r5, r3
 80224de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80224e0:	441e      	add	r6, r3
 80224e2:	e6db      	b.n	802229c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80224e4:	2400f448 	.word	0x2400f448
 80224e8:	2800      	cmp	r0, #0
 80224ea:	d09a      	beq.n	8022422 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80224ec:	444b      	add	r3, r9
 80224ee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80224f2:	07db      	lsls	r3, r3, #31
 80224f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80224f8:	bf54      	ite	pl
 80224fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80224fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022502:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022506:	fa5f f38c 	uxtb.w	r3, ip
 802250a:	930b      	str	r3, [sp, #44]	; 0x2c
 802250c:	e789      	b.n	8022422 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802250e:	b017      	add	sp, #92	; 0x5c
 8022510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022514 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022518:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 802251c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022520:	2d00      	cmp	r5, #0
 8022522:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022526:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 802252a:	fb04 5e03 	mla	lr, r4, r3, r5
 802252e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8022532:	f2c0 80b1 	blt.w	8022698 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022536:	45a9      	cmp	r9, r5
 8022538:	f340 80ae 	ble.w	8022698 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802253c:	2c00      	cmp	r4, #0
 802253e:	f2c0 80ab 	blt.w	8022698 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022542:	45a0      	cmp	r8, r4
 8022544:	f340 80a8 	ble.w	8022698 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022548:	ea4f 065e 	mov.w	r6, lr, lsr #1
 802254c:	f01e 0f01 	tst.w	lr, #1
 8022550:	5d97      	ldrb	r7, [r2, r6]
 8022552:	bf0c      	ite	eq
 8022554:	f007 070f 	andeq.w	r7, r7, #15
 8022558:	113f      	asrne	r7, r7, #4
 802255a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802255e:	b2ff      	uxtb	r7, r7
 8022560:	f115 0a01 	adds.w	sl, r5, #1
 8022564:	f100 809a 	bmi.w	802269c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022568:	45d1      	cmp	r9, sl
 802256a:	f340 8097 	ble.w	802269c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802256e:	2c00      	cmp	r4, #0
 8022570:	f2c0 8094 	blt.w	802269c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022574:	45a0      	cmp	r8, r4
 8022576:	f340 8091 	ble.w	802269c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802257a:	2800      	cmp	r0, #0
 802257c:	f000 8090 	beq.w	80226a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8022580:	f10e 0b01 	add.w	fp, lr, #1
 8022584:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8022588:	f01b 0f01 	tst.w	fp, #1
 802258c:	5d96      	ldrb	r6, [r2, r6]
 802258e:	bf0c      	ite	eq
 8022590:	f006 060f 	andeq.w	r6, r6, #15
 8022594:	1136      	asrne	r6, r6, #4
 8022596:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802259a:	b2f6      	uxtb	r6, r6
 802259c:	f1bc 0f00 	cmp.w	ip, #0
 80225a0:	f000 8082 	beq.w	80226a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80225a4:	2d00      	cmp	r5, #0
 80225a6:	f104 0401 	add.w	r4, r4, #1
 80225aa:	db7b      	blt.n	80226a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80225ac:	45a9      	cmp	r9, r5
 80225ae:	dd79      	ble.n	80226a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80225b0:	2c00      	cmp	r4, #0
 80225b2:	db77      	blt.n	80226a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80225b4:	45a0      	cmp	r8, r4
 80225b6:	dd75      	ble.n	80226a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80225b8:	eb03 0b0e 	add.w	fp, r3, lr
 80225bc:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80225c0:	f01b 0f01 	tst.w	fp, #1
 80225c4:	5d55      	ldrb	r5, [r2, r5]
 80225c6:	bf0c      	ite	eq
 80225c8:	f005 050f 	andeq.w	r5, r5, #15
 80225cc:	112d      	asrne	r5, r5, #4
 80225ce:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80225d2:	b2ed      	uxtb	r5, r5
 80225d4:	f1ba 0f00 	cmp.w	sl, #0
 80225d8:	db69      	blt.n	80226ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80225da:	45d1      	cmp	r9, sl
 80225dc:	dd67      	ble.n	80226ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80225de:	2c00      	cmp	r4, #0
 80225e0:	db65      	blt.n	80226ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80225e2:	45a0      	cmp	r8, r4
 80225e4:	dd63      	ble.n	80226ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80225e6:	2800      	cmp	r0, #0
 80225e8:	d063      	beq.n	80226b2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80225ea:	3301      	adds	r3, #1
 80225ec:	449e      	add	lr, r3
 80225ee:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80225f2:	f01e 0f01 	tst.w	lr, #1
 80225f6:	5cd4      	ldrb	r4, [r2, r3]
 80225f8:	bf0c      	ite	eq
 80225fa:	f004 040f 	andeq.w	r4, r4, #15
 80225fe:	1124      	asrne	r4, r4, #4
 8022600:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022604:	b2e3      	uxtb	r3, r4
 8022606:	b282      	uxth	r2, r0
 8022608:	fa1f fc8c 	uxth.w	ip, ip
 802260c:	fb02 f40c 	mul.w	r4, r2, ip
 8022610:	0112      	lsls	r2, r2, #4
 8022612:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8022616:	fa1f f08c 	uxth.w	r0, ip
 802261a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802261e:	1b12      	subs	r2, r2, r4
 8022620:	ebac 0c00 	sub.w	ip, ip, r0
 8022624:	b292      	uxth	r2, r2
 8022626:	fa1f fc8c 	uxth.w	ip, ip
 802262a:	4372      	muls	r2, r6
 802262c:	fb07 220c 	mla	r2, r7, ip, r2
 8022630:	fb00 2005 	mla	r0, r0, r5, r2
 8022634:	fb04 0303 	mla	r3, r4, r3, r0
 8022638:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802263c:	b353      	cbz	r3, 8022694 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802263e:	4a1e      	ldr	r2, [pc, #120]	; (80226b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8022640:	7808      	ldrb	r0, [r1, #0]
 8022642:	6814      	ldr	r4, [r2, #0]
 8022644:	b29a      	uxth	r2, r3
 8022646:	43db      	mvns	r3, r3
 8022648:	b2e5      	uxtb	r5, r4
 802264a:	b2db      	uxtb	r3, r3
 802264c:	fb15 f502 	smulbb	r5, r5, r2
 8022650:	fb00 5003 	mla	r0, r0, r3, r5
 8022654:	b280      	uxth	r0, r0
 8022656:	1c45      	adds	r5, r0, #1
 8022658:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802265c:	784d      	ldrb	r5, [r1, #1]
 802265e:	fb15 f503 	smulbb	r5, r5, r3
 8022662:	1200      	asrs	r0, r0, #8
 8022664:	7008      	strb	r0, [r1, #0]
 8022666:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802266a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802266e:	fb00 5002 	mla	r0, r0, r2, r5
 8022672:	b280      	uxth	r0, r0
 8022674:	1c45      	adds	r5, r0, #1
 8022676:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802267a:	1200      	asrs	r0, r0, #8
 802267c:	7048      	strb	r0, [r1, #1]
 802267e:	7888      	ldrb	r0, [r1, #2]
 8022680:	fb10 f303 	smulbb	r3, r0, r3
 8022684:	fb04 3202 	mla	r2, r4, r2, r3
 8022688:	b292      	uxth	r2, r2
 802268a:	1c53      	adds	r3, r2, #1
 802268c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022690:	1212      	asrs	r2, r2, #8
 8022692:	708a      	strb	r2, [r1, #2]
 8022694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022698:	2700      	movs	r7, #0
 802269a:	e761      	b.n	8022560 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 802269c:	2600      	movs	r6, #0
 802269e:	e77d      	b.n	802259c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80226a0:	4606      	mov	r6, r0
 80226a2:	e77b      	b.n	802259c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80226a4:	2500      	movs	r5, #0
 80226a6:	e795      	b.n	80225d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80226a8:	4663      	mov	r3, ip
 80226aa:	4665      	mov	r5, ip
 80226ac:	e7ab      	b.n	8022606 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80226ae:	2300      	movs	r3, #0
 80226b0:	e7a9      	b.n	8022606 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80226b2:	4603      	mov	r3, r0
 80226b4:	e7a7      	b.n	8022606 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80226b6:	bf00      	nop
 80226b8:	2400f448 	.word	0x2400f448

080226bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80226bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226c0:	b093      	sub	sp, #76	; 0x4c
 80226c2:	461c      	mov	r4, r3
 80226c4:	920c      	str	r2, [sp, #48]	; 0x30
 80226c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80226c8:	9011      	str	r0, [sp, #68]	; 0x44
 80226ca:	9107      	str	r1, [sp, #28]
 80226cc:	6850      	ldr	r0, [r2, #4]
 80226ce:	6812      	ldr	r2, [r2, #0]
 80226d0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80226d4:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 80226d8:	fb00 1303 	mla	r3, r0, r3, r1
 80226dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80226e0:	eb02 0b03 	add.w	fp, r2, r3
 80226e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226e6:	689b      	ldr	r3, [r3, #8]
 80226e8:	3301      	adds	r3, #1
 80226ea:	f023 0301 	bic.w	r3, r3, #1
 80226ee:	9309      	str	r3, [sp, #36]	; 0x24
 80226f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226f2:	f8d3 8000 	ldr.w	r8, [r3]
 80226f6:	9b07      	ldr	r3, [sp, #28]
 80226f8:	2b00      	cmp	r3, #0
 80226fa:	dc03      	bgt.n	8022704 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80226fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80226fe:	2b00      	cmp	r3, #0
 8022700:	f340 822b 	ble.w	8022b5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022704:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022706:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802270a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802270e:	1e48      	subs	r0, r1, #1
 8022710:	1e57      	subs	r7, r2, #1
 8022712:	2c00      	cmp	r4, #0
 8022714:	f340 80d7 	ble.w	80228c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8022718:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802271c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022720:	d406      	bmi.n	8022730 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022722:	4584      	cmp	ip, r0
 8022724:	da04      	bge.n	8022730 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022726:	2b00      	cmp	r3, #0
 8022728:	db02      	blt.n	8022730 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802272a:	42bb      	cmp	r3, r7
 802272c:	f2c0 80cc 	blt.w	80228c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022730:	f11c 0c01 	adds.w	ip, ip, #1
 8022734:	f100 80bf 	bmi.w	80228b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022738:	4561      	cmp	r1, ip
 802273a:	f2c0 80bc 	blt.w	80228b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802273e:	3301      	adds	r3, #1
 8022740:	f100 80b9 	bmi.w	80228b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022744:	429a      	cmp	r2, r3
 8022746:	f2c0 80b6 	blt.w	80228b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802274a:	46a2      	mov	sl, r4
 802274c:	465f      	mov	r7, fp
 802274e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022752:	f1ba 0f00 	cmp.w	sl, #0
 8022756:	f340 80d4 	ble.w	8022902 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802275a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802275e:	1430      	asrs	r0, r6, #16
 8022760:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022764:	9308      	str	r3, [sp, #32]
 8022766:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022768:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802276c:	142b      	asrs	r3, r5, #16
 802276e:	f100 8124 	bmi.w	80229ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022772:	f10c 32ff 	add.w	r2, ip, #4294967295
 8022776:	4293      	cmp	r3, r2
 8022778:	f280 811f 	bge.w	80229ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802277c:	2800      	cmp	r0, #0
 802277e:	f2c0 811c 	blt.w	80229ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022782:	f10e 32ff 	add.w	r2, lr, #4294967295
 8022786:	4290      	cmp	r0, r2
 8022788:	f280 8117 	bge.w	80229ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802278c:	fb00 3309 	mla	r3, r0, r9, r3
 8022790:	0858      	lsrs	r0, r3, #1
 8022792:	07da      	lsls	r2, r3, #31
 8022794:	9a08      	ldr	r2, [sp, #32]
 8022796:	f818 c000 	ldrb.w	ip, [r8, r0]
 802279a:	bf54      	ite	pl
 802279c:	f00c 0c0f 	andpl.w	ip, ip, #15
 80227a0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80227a4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80227a8:	fa5f fc8c 	uxtb.w	ip, ip
 80227ac:	2a00      	cmp	r2, #0
 80227ae:	f000 80ed 	beq.w	802298c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80227b2:	1c58      	adds	r0, r3, #1
 80227b4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80227b8:	07c0      	lsls	r0, r0, #31
 80227ba:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80227be:	bf54      	ite	pl
 80227c0:	f00e 0e0f 	andpl.w	lr, lr, #15
 80227c4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80227c8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80227cc:	fa5f fe8e 	uxtb.w	lr, lr
 80227d0:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80227d4:	b1c9      	cbz	r1, 802280a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80227d6:	444b      	add	r3, r9
 80227d8:	0858      	lsrs	r0, r3, #1
 80227da:	07da      	lsls	r2, r3, #31
 80227dc:	f818 0000 	ldrb.w	r0, [r8, r0]
 80227e0:	bf54      	ite	pl
 80227e2:	f000 000f 	andpl.w	r0, r0, #15
 80227e6:	1100      	asrmi	r0, r0, #4
 80227e8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80227ec:	b2c0      	uxtb	r0, r0
 80227ee:	900a      	str	r0, [sp, #40]	; 0x28
 80227f0:	1c58      	adds	r0, r3, #1
 80227f2:	0843      	lsrs	r3, r0, #1
 80227f4:	07c2      	lsls	r2, r0, #31
 80227f6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80227fa:	bf54      	ite	pl
 80227fc:	f003 030f 	andpl.w	r3, r3, #15
 8022800:	111b      	asrmi	r3, r3, #4
 8022802:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022806:	b2db      	uxtb	r3, r3
 8022808:	930e      	str	r3, [sp, #56]	; 0x38
 802280a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802280e:	b289      	uxth	r1, r1
 8022810:	fb02 f301 	mul.w	r3, r2, r1
 8022814:	0112      	lsls	r2, r2, #4
 8022816:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802281a:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802281e:	1ad2      	subs	r2, r2, r3
 8022820:	b289      	uxth	r1, r1
 8022822:	b292      	uxth	r2, r2
 8022824:	1a40      	subs	r0, r0, r1
 8022826:	fa1f fe80 	uxth.w	lr, r0
 802282a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802282c:	4342      	muls	r2, r0
 802282e:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022834:	fb01 c102 	mla	r1, r1, r2, ip
 8022838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802283a:	fb03 1302 	mla	r3, r3, r2, r1
 802283e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022842:	b383      	cbz	r3, 80228a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022844:	4ac6      	ldr	r2, [pc, #792]	; (8022b60 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8022846:	2bff      	cmp	r3, #255	; 0xff
 8022848:	6812      	ldr	r2, [r2, #0]
 802284a:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802284e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8022852:	b2d2      	uxtb	r2, r2
 8022854:	f000 80ac 	beq.w	80229b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022858:	b299      	uxth	r1, r3
 802285a:	43db      	mvns	r3, r3
 802285c:	f897 c000 	ldrb.w	ip, [r7]
 8022860:	fb12 f201 	smulbb	r2, r2, r1
 8022864:	b2db      	uxtb	r3, r3
 8022866:	fb10 f001 	smulbb	r0, r0, r1
 802286a:	fb0c 2203 	mla	r2, ip, r3, r2
 802286e:	fb1e f101 	smulbb	r1, lr, r1
 8022872:	b292      	uxth	r2, r2
 8022874:	f102 0c01 	add.w	ip, r2, #1
 8022878:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802287c:	1212      	asrs	r2, r2, #8
 802287e:	703a      	strb	r2, [r7, #0]
 8022880:	787a      	ldrb	r2, [r7, #1]
 8022882:	fb02 0003 	mla	r0, r2, r3, r0
 8022886:	b280      	uxth	r0, r0
 8022888:	1c42      	adds	r2, r0, #1
 802288a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802288e:	78ba      	ldrb	r2, [r7, #2]
 8022890:	fb02 1303 	mla	r3, r2, r3, r1
 8022894:	1200      	asrs	r0, r0, #8
 8022896:	b29b      	uxth	r3, r3
 8022898:	7078      	strb	r0, [r7, #1]
 802289a:	f103 0e01 	add.w	lr, r3, #1
 802289e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80228a2:	121b      	asrs	r3, r3, #8
 80228a4:	70bb      	strb	r3, [r7, #2]
 80228a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80228a8:	3703      	adds	r7, #3
 80228aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80228ae:	441d      	add	r5, r3
 80228b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228b2:	441e      	add	r6, r3
 80228b4:	e74d      	b.n	8022752 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80228b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80228b8:	3c01      	subs	r4, #1
 80228ba:	f10b 0b03 	add.w	fp, fp, #3
 80228be:	441d      	add	r5, r3
 80228c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228c2:	441e      	add	r6, r3
 80228c4:	e725      	b.n	8022712 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80228c6:	d021      	beq.n	802290c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80228c8:	1e63      	subs	r3, r4, #1
 80228ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80228cc:	fb00 5003 	mla	r0, r0, r3, r5
 80228d0:	1400      	asrs	r0, r0, #16
 80228d2:	f53f af3a 	bmi.w	802274a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228d6:	3901      	subs	r1, #1
 80228d8:	4288      	cmp	r0, r1
 80228da:	f6bf af36 	bge.w	802274a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228de:	9920      	ldr	r1, [sp, #128]	; 0x80
 80228e0:	fb01 6303 	mla	r3, r1, r3, r6
 80228e4:	141b      	asrs	r3, r3, #16
 80228e6:	f53f af30 	bmi.w	802274a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228ea:	3a01      	subs	r2, #1
 80228ec:	4293      	cmp	r3, r2
 80228ee:	f6bf af2c 	bge.w	802274a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80228f2:	f10b 0c03 	add.w	ip, fp, #3
 80228f6:	46a6      	mov	lr, r4
 80228f8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80228fc:	f1be 0f00 	cmp.w	lr, #0
 8022900:	dc79      	bgt.n	80229f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8022902:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022906:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802290a:	44a3      	add	fp, r4
 802290c:	9b07      	ldr	r3, [sp, #28]
 802290e:	2b00      	cmp	r3, #0
 8022910:	f340 8123 	ble.w	8022b5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022918:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802291a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802291e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022922:	eef0 6a62 	vmov.f32	s13, s5
 8022926:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802292a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802292e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022932:	ee16 5a90 	vmov	r5, s13
 8022936:	eef0 6a43 	vmov.f32	s13, s6
 802293a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802293e:	ee16 6a90 	vmov	r6, s13
 8022942:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022946:	ee61 7a27 	vmul.f32	s15, s2, s15
 802294a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802294e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022952:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022956:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802295a:	ee12 2a90 	vmov	r2, s5
 802295e:	eef0 2a47 	vmov.f32	s5, s14
 8022962:	fb92 f3f3 	sdiv	r3, r2, r3
 8022966:	ee13 2a10 	vmov	r2, s6
 802296a:	931f      	str	r3, [sp, #124]	; 0x7c
 802296c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802296e:	eeb0 3a67 	vmov.f32	s6, s15
 8022972:	fb92 f3f3 	sdiv	r3, r2, r3
 8022976:	9320      	str	r3, [sp, #128]	; 0x80
 8022978:	9b07      	ldr	r3, [sp, #28]
 802297a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802297c:	3b01      	subs	r3, #1
 802297e:	9307      	str	r3, [sp, #28]
 8022980:	bf08      	it	eq
 8022982:	4614      	moveq	r4, r2
 8022984:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022986:	bf18      	it	ne
 8022988:	461c      	movne	r4, r3
 802298a:	e6b4      	b.n	80226f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802298c:	2900      	cmp	r1, #0
 802298e:	f43f af3c 	beq.w	802280a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022992:	eb09 0003 	add.w	r0, r9, r3
 8022996:	0843      	lsrs	r3, r0, #1
 8022998:	07c0      	lsls	r0, r0, #31
 802299a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802299e:	bf54      	ite	pl
 80229a0:	f003 030f 	andpl.w	r3, r3, #15
 80229a4:	111b      	asrmi	r3, r3, #4
 80229a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80229aa:	b2db      	uxtb	r3, r3
 80229ac:	930a      	str	r3, [sp, #40]	; 0x28
 80229ae:	e72c      	b.n	802280a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80229b0:	703a      	strb	r2, [r7, #0]
 80229b2:	7078      	strb	r0, [r7, #1]
 80229b4:	f887 e002 	strb.w	lr, [r7, #2]
 80229b8:	e775      	b.n	80228a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80229ba:	1c5a      	adds	r2, r3, #1
 80229bc:	f53f af73 	bmi.w	80228a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80229c0:	4594      	cmp	ip, r2
 80229c2:	f6ff af70 	blt.w	80228a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80229c6:	1c42      	adds	r2, r0, #1
 80229c8:	f53f af6d 	bmi.w	80228a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80229cc:	4596      	cmp	lr, r2
 80229ce:	f6ff af6a 	blt.w	80228a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80229d2:	9302      	str	r3, [sp, #8]
 80229d4:	fa0f f38e 	sxth.w	r3, lr
 80229d8:	9a08      	ldr	r2, [sp, #32]
 80229da:	9301      	str	r3, [sp, #4]
 80229dc:	fa0f f38c 	sxth.w	r3, ip
 80229e0:	9105      	str	r1, [sp, #20]
 80229e2:	4639      	mov	r1, r7
 80229e4:	9300      	str	r3, [sp, #0]
 80229e6:	464b      	mov	r3, r9
 80229e8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80229ec:	4642      	mov	r2, r8
 80229ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80229f0:	f7ff fd90 	bl	8022514 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80229f4:	e757      	b.n	80228a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80229f6:	142a      	asrs	r2, r5, #16
 80229f8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80229fc:	1433      	asrs	r3, r6, #16
 80229fe:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8022a02:	fb09 2303 	mla	r3, r9, r3, r2
 8022a06:	085a      	lsrs	r2, r3, #1
 8022a08:	07d9      	lsls	r1, r3, #31
 8022a0a:	f818 2002 	ldrb.w	r2, [r8, r2]
 8022a0e:	bf54      	ite	pl
 8022a10:	f002 020f 	andpl.w	r2, r2, #15
 8022a14:	1112      	asrmi	r2, r2, #4
 8022a16:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022a1a:	b2d2      	uxtb	r2, r2
 8022a1c:	2800      	cmp	r0, #0
 8022a1e:	f000 8085 	beq.w	8022b2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022a22:	f103 0a01 	add.w	sl, r3, #1
 8022a26:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022a2a:	f01a 0f01 	tst.w	sl, #1
 8022a2e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022a32:	bf0c      	ite	eq
 8022a34:	f001 010f 	andeq.w	r1, r1, #15
 8022a38:	1109      	asrne	r1, r1, #4
 8022a3a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022a3e:	b2c9      	uxtb	r1, r1
 8022a40:	910f      	str	r1, [sp, #60]	; 0x3c
 8022a42:	b1df      	cbz	r7, 8022a7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022a44:	444b      	add	r3, r9
 8022a46:	0859      	lsrs	r1, r3, #1
 8022a48:	f013 0f01 	tst.w	r3, #1
 8022a4c:	f103 0301 	add.w	r3, r3, #1
 8022a50:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022a54:	bf0c      	ite	eq
 8022a56:	f001 010f 	andeq.w	r1, r1, #15
 8022a5a:	1109      	asrne	r1, r1, #4
 8022a5c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022a60:	b2c9      	uxtb	r1, r1
 8022a62:	910b      	str	r1, [sp, #44]	; 0x2c
 8022a64:	0859      	lsrs	r1, r3, #1
 8022a66:	07db      	lsls	r3, r3, #31
 8022a68:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022a6c:	bf54      	ite	pl
 8022a6e:	f001 010f 	andpl.w	r1, r1, #15
 8022a72:	1109      	asrmi	r1, r1, #4
 8022a74:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022a78:	b2c9      	uxtb	r1, r1
 8022a7a:	9110      	str	r1, [sp, #64]	; 0x40
 8022a7c:	b280      	uxth	r0, r0
 8022a7e:	b2bf      	uxth	r7, r7
 8022a80:	fb00 f307 	mul.w	r3, r0, r7
 8022a84:	0100      	lsls	r0, r0, #4
 8022a86:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8022a8a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022a8e:	1ac0      	subs	r0, r0, r3
 8022a90:	b2bf      	uxth	r7, r7
 8022a92:	b280      	uxth	r0, r0
 8022a94:	1bc9      	subs	r1, r1, r7
 8022a96:	fa1f fa81 	uxth.w	sl, r1
 8022a9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022a9c:	4348      	muls	r0, r1
 8022a9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022aa0:	fb02 020a 	mla	r2, r2, sl, r0
 8022aa4:	fb07 2701 	mla	r7, r7, r1, r2
 8022aa8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022aaa:	fb03 7302 	mla	r3, r3, r2, r7
 8022aae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022ab2:	b393      	cbz	r3, 8022b1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022ab4:	4a2a      	ldr	r2, [pc, #168]	; (8022b60 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8022ab6:	2bff      	cmp	r3, #255	; 0xff
 8022ab8:	6811      	ldr	r1, [r2, #0]
 8022aba:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8022abe:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8022ac2:	b2c9      	uxtb	r1, r1
 8022ac4:	d042      	beq.n	8022b4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022ac6:	b298      	uxth	r0, r3
 8022ac8:	43db      	mvns	r3, r3
 8022aca:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8022ace:	fb11 f100 	smulbb	r1, r1, r0
 8022ad2:	b2db      	uxtb	r3, r3
 8022ad4:	fb17 f700 	smulbb	r7, r7, r0
 8022ad8:	fb02 1103 	mla	r1, r2, r3, r1
 8022adc:	fb1a f000 	smulbb	r0, sl, r0
 8022ae0:	b289      	uxth	r1, r1
 8022ae2:	1c4a      	adds	r2, r1, #1
 8022ae4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022ae8:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8022aec:	fb02 7703 	mla	r7, r2, r3, r7
 8022af0:	1209      	asrs	r1, r1, #8
 8022af2:	b2bf      	uxth	r7, r7
 8022af4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8022af8:	1c7a      	adds	r2, r7, #1
 8022afa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022afe:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8022b02:	fb02 0303 	mla	r3, r2, r3, r0
 8022b06:	123f      	asrs	r7, r7, #8
 8022b08:	b29b      	uxth	r3, r3
 8022b0a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8022b0e:	1c5a      	adds	r2, r3, #1
 8022b10:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022b14:	121b      	asrs	r3, r3, #8
 8022b16:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8022b1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022b1c:	f10c 0c03 	add.w	ip, ip, #3
 8022b20:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022b24:	441d      	add	r5, r3
 8022b26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b28:	441e      	add	r6, r3
 8022b2a:	e6e7      	b.n	80228fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8022b2c:	2f00      	cmp	r7, #0
 8022b2e:	d0a5      	beq.n	8022a7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022b30:	444b      	add	r3, r9
 8022b32:	0859      	lsrs	r1, r3, #1
 8022b34:	07db      	lsls	r3, r3, #31
 8022b36:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022b3a:	bf54      	ite	pl
 8022b3c:	f001 010f 	andpl.w	r1, r1, #15
 8022b40:	1109      	asrmi	r1, r1, #4
 8022b42:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022b46:	b2c9      	uxtb	r1, r1
 8022b48:	910b      	str	r1, [sp, #44]	; 0x2c
 8022b4a:	e797      	b.n	8022a7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022b4c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8022b50:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8022b54:	f80c ac01 	strb.w	sl, [ip, #-1]
 8022b58:	e7df      	b.n	8022b1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022b5a:	b013      	add	sp, #76	; 0x4c
 8022b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b60:	2400f448 	.word	0x2400f448

08022b64 <CRC_Lock>:
 8022b64:	4a20      	ldr	r2, [pc, #128]	; (8022be8 <CRC_Lock+0x84>)
 8022b66:	b530      	push	{r4, r5, lr}
 8022b68:	6813      	ldr	r3, [r2, #0]
 8022b6a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8022b6e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8022b72:	f023 0301 	bic.w	r3, r3, #1
 8022b76:	6013      	str	r3, [r2, #0]
 8022b78:	4b1c      	ldr	r3, [pc, #112]	; (8022bec <CRC_Lock+0x88>)
 8022b7a:	681a      	ldr	r2, [r3, #0]
 8022b7c:	4022      	ands	r2, r4
 8022b7e:	42aa      	cmp	r2, r5
 8022b80:	d005      	beq.n	8022b8e <CRC_Lock+0x2a>
 8022b82:	681b      	ldr	r3, [r3, #0]
 8022b84:	f24c 2270 	movw	r2, #49776	; 0xc270
 8022b88:	4023      	ands	r3, r4
 8022b8a:	4293      	cmp	r3, r2
 8022b8c:	d124      	bne.n	8022bd8 <CRC_Lock+0x74>
 8022b8e:	4b18      	ldr	r3, [pc, #96]	; (8022bf0 <CRC_Lock+0x8c>)
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	bb0b      	cbnz	r3, 8022bd8 <CRC_Lock+0x74>
 8022b94:	4b17      	ldr	r3, [pc, #92]	; (8022bf4 <CRC_Lock+0x90>)
 8022b96:	681a      	ldr	r2, [r3, #0]
 8022b98:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022b9c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8022ba0:	d00d      	beq.n	8022bbe <CRC_Lock+0x5a>
 8022ba2:	681a      	ldr	r2, [r3, #0]
 8022ba4:	f240 4483 	movw	r4, #1155	; 0x483
 8022ba8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022bac:	42a2      	cmp	r2, r4
 8022bae:	d006      	beq.n	8022bbe <CRC_Lock+0x5a>
 8022bb0:	681b      	ldr	r3, [r3, #0]
 8022bb2:	f240 4285 	movw	r2, #1157	; 0x485
 8022bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022bba:	4293      	cmp	r3, r2
 8022bbc:	d10c      	bne.n	8022bd8 <CRC_Lock+0x74>
 8022bbe:	4b0e      	ldr	r3, [pc, #56]	; (8022bf8 <CRC_Lock+0x94>)
 8022bc0:	2201      	movs	r2, #1
 8022bc2:	601a      	str	r2, [r3, #0]
 8022bc4:	681a      	ldr	r2, [r3, #0]
 8022bc6:	2a00      	cmp	r2, #0
 8022bc8:	d1fc      	bne.n	8022bc4 <CRC_Lock+0x60>
 8022bca:	4b0c      	ldr	r3, [pc, #48]	; (8022bfc <CRC_Lock+0x98>)
 8022bcc:	6018      	str	r0, [r3, #0]
 8022bce:	6818      	ldr	r0, [r3, #0]
 8022bd0:	1a43      	subs	r3, r0, r1
 8022bd2:	4258      	negs	r0, r3
 8022bd4:	4158      	adcs	r0, r3
 8022bd6:	bd30      	pop	{r4, r5, pc}
 8022bd8:	4b09      	ldr	r3, [pc, #36]	; (8022c00 <CRC_Lock+0x9c>)
 8022bda:	2201      	movs	r2, #1
 8022bdc:	601a      	str	r2, [r3, #0]
 8022bde:	681a      	ldr	r2, [r3, #0]
 8022be0:	2a00      	cmp	r2, #0
 8022be2:	d1fc      	bne.n	8022bde <CRC_Lock+0x7a>
 8022be4:	4b07      	ldr	r3, [pc, #28]	; (8022c04 <CRC_Lock+0xa0>)
 8022be6:	e7f1      	b.n	8022bcc <CRC_Lock+0x68>
 8022be8:	e0002000 	.word	0xe0002000
 8022bec:	e000ed00 	.word	0xe000ed00
 8022bf0:	e0042000 	.word	0xe0042000
 8022bf4:	5c001000 	.word	0x5c001000
 8022bf8:	58024c08 	.word	0x58024c08
 8022bfc:	58024c00 	.word	0x58024c00
 8022c00:	40023008 	.word	0x40023008
 8022c04:	40023000 	.word	0x40023000

08022c08 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8022c08:	6101      	str	r1, [r0, #16]
 8022c0a:	4770      	bx	lr

08022c0c <_ZN8touchgfx8Gestures4tickEv>:
 8022c0c:	7b83      	ldrb	r3, [r0, #14]
 8022c0e:	b14b      	cbz	r3, 8022c24 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8022c10:	8903      	ldrh	r3, [r0, #8]
 8022c12:	3301      	adds	r3, #1
 8022c14:	b29b      	uxth	r3, r3
 8022c16:	2b07      	cmp	r3, #7
 8022c18:	8103      	strh	r3, [r0, #8]
 8022c1a:	bf81      	itttt	hi
 8022c1c:	2300      	movhi	r3, #0
 8022c1e:	8143      	strhhi	r3, [r0, #10]
 8022c20:	8183      	strhhi	r3, [r0, #12]
 8022c22:	7383      	strbhi	r3, [r0, #14]
 8022c24:	4770      	bx	lr
	...

08022c28 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022c28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022c2c:	4698      	mov	r8, r3
 8022c2e:	8883      	ldrh	r3, [r0, #4]
 8022c30:	4604      	mov	r4, r0
 8022c32:	4617      	mov	r7, r2
 8022c34:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022c38:	eba8 0303 	sub.w	r3, r8, r3
 8022c3c:	4a19      	ldr	r2, [pc, #100]	; (8022ca4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8022c3e:	460e      	mov	r6, r1
 8022c40:	b21b      	sxth	r3, r3
 8022c42:	88c1      	ldrh	r1, [r0, #6]
 8022c44:	9200      	str	r2, [sp, #0]
 8022c46:	2000      	movs	r0, #0
 8022c48:	2b00      	cmp	r3, #0
 8022c4a:	8aa2      	ldrh	r2, [r4, #20]
 8022c4c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8022c50:	bfb8      	it	lt
 8022c52:	425b      	neglt	r3, r3
 8022c54:	f88d 0004 	strb.w	r0, [sp, #4]
 8022c58:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022c5c:	b21b      	sxth	r3, r3
 8022c5e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022c62:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022c66:	4293      	cmp	r3, r2
 8022c68:	dc07      	bgt.n	8022c7a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8022c6a:	1a69      	subs	r1, r5, r1
 8022c6c:	b209      	sxth	r1, r1
 8022c6e:	2900      	cmp	r1, #0
 8022c70:	bfb8      	it	lt
 8022c72:	4249      	neglt	r1, r1
 8022c74:	b209      	sxth	r1, r1
 8022c76:	428a      	cmp	r2, r1
 8022c78:	da10      	bge.n	8022c9c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8022c7a:	6920      	ldr	r0, [r4, #16]
 8022c7c:	4669      	mov	r1, sp
 8022c7e:	eba8 0606 	sub.w	r6, r8, r6
 8022c82:	1bef      	subs	r7, r5, r7
 8022c84:	6803      	ldr	r3, [r0, #0]
 8022c86:	685b      	ldr	r3, [r3, #4]
 8022c88:	4798      	blx	r3
 8022c8a:	2300      	movs	r3, #0
 8022c8c:	2001      	movs	r0, #1
 8022c8e:	8166      	strh	r6, [r4, #10]
 8022c90:	8123      	strh	r3, [r4, #8]
 8022c92:	81a7      	strh	r7, [r4, #12]
 8022c94:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022c98:	80e5      	strh	r5, [r4, #6]
 8022c9a:	73a0      	strb	r0, [r4, #14]
 8022c9c:	b004      	add	sp, #16
 8022c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ca2:	bf00      	nop
 8022ca4:	08026580 	.word	0x08026580

08022ca8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022caa:	461e      	mov	r6, r3
 8022cac:	1e4b      	subs	r3, r1, #1
 8022cae:	b085      	sub	sp, #20
 8022cb0:	4604      	mov	r4, r0
 8022cb2:	2b01      	cmp	r3, #1
 8022cb4:	460d      	mov	r5, r1
 8022cb6:	4617      	mov	r7, r2
 8022cb8:	d84b      	bhi.n	8022d52 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8022cba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022cbe:	1cd3      	adds	r3, r2, #3
 8022cc0:	b29b      	uxth	r3, r3
 8022cc2:	2b06      	cmp	r3, #6
 8022cc4:	d916      	bls.n	8022cf4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8022cc6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8022d68 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8022cca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022cce:	f8cd c004 	str.w	ip, [sp, #4]
 8022cd2:	f04f 0c00 	mov.w	ip, #0
 8022cd6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022cda:	6900      	ldr	r0, [r0, #16]
 8022cdc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022ce0:	a901      	add	r1, sp, #4
 8022ce2:	f88d c008 	strb.w	ip, [sp, #8]
 8022ce6:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022cea:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022cee:	6803      	ldr	r3, [r0, #0]
 8022cf0:	689b      	ldr	r3, [r3, #8]
 8022cf2:	4798      	blx	r3
 8022cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022cf8:	1cd3      	adds	r3, r2, #3
 8022cfa:	b29b      	uxth	r3, r3
 8022cfc:	2b06      	cmp	r3, #6
 8022cfe:	d916      	bls.n	8022d2e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022d00:	f8df c064 	ldr.w	ip, [pc, #100]	; 8022d68 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8022d04:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022d08:	f8cd c004 	str.w	ip, [sp, #4]
 8022d0c:	f04f 0c01 	mov.w	ip, #1
 8022d10:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8022d14:	6920      	ldr	r0, [r4, #16]
 8022d16:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022d1a:	a901      	add	r1, sp, #4
 8022d1c:	f88d c008 	strb.w	ip, [sp, #8]
 8022d20:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022d24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022d28:	6803      	ldr	r3, [r0, #0]
 8022d2a:	689b      	ldr	r3, [r3, #8]
 8022d2c:	4798      	blx	r3
 8022d2e:	4b0d      	ldr	r3, [pc, #52]	; (8022d64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8022d30:	a901      	add	r1, sp, #4
 8022d32:	6920      	ldr	r0, [r4, #16]
 8022d34:	9301      	str	r3, [sp, #4]
 8022d36:	2300      	movs	r3, #0
 8022d38:	f88d 5008 	strb.w	r5, [sp, #8]
 8022d3c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8022d40:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022d44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022d48:	6803      	ldr	r3, [r0, #0]
 8022d4a:	681b      	ldr	r3, [r3, #0]
 8022d4c:	4798      	blx	r3
 8022d4e:	b005      	add	sp, #20
 8022d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d52:	2900      	cmp	r1, #0
 8022d54:	d1eb      	bne.n	8022d2e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022d56:	80a2      	strh	r2, [r4, #4]
 8022d58:	80c6      	strh	r6, [r0, #6]
 8022d5a:	60a1      	str	r1, [r4, #8]
 8022d5c:	81a1      	strh	r1, [r4, #12]
 8022d5e:	73a1      	strb	r1, [r4, #14]
 8022d60:	e7e5      	b.n	8022d2e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022d62:	bf00      	nop
 8022d64:	0802656c 	.word	0x0802656c
 8022d68:	08026bd8 	.word	0x08026bd8

08022d6c <__aeabi_atexit>:
 8022d6c:	460b      	mov	r3, r1
 8022d6e:	4601      	mov	r1, r0
 8022d70:	4618      	mov	r0, r3
 8022d72:	f000 b853 	b.w	8022e1c <__cxa_atexit>

08022d76 <_ZdlPvj>:
 8022d76:	f000 b812 	b.w	8022d9e <_ZdlPv>

08022d7a <__cxa_guard_acquire>:
 8022d7a:	6803      	ldr	r3, [r0, #0]
 8022d7c:	07db      	lsls	r3, r3, #31
 8022d7e:	d406      	bmi.n	8022d8e <__cxa_guard_acquire+0x14>
 8022d80:	7843      	ldrb	r3, [r0, #1]
 8022d82:	b103      	cbz	r3, 8022d86 <__cxa_guard_acquire+0xc>
 8022d84:	deff      	udf	#255	; 0xff
 8022d86:	2301      	movs	r3, #1
 8022d88:	7043      	strb	r3, [r0, #1]
 8022d8a:	4618      	mov	r0, r3
 8022d8c:	4770      	bx	lr
 8022d8e:	2000      	movs	r0, #0
 8022d90:	4770      	bx	lr

08022d92 <__cxa_guard_release>:
 8022d92:	2301      	movs	r3, #1
 8022d94:	6003      	str	r3, [r0, #0]
 8022d96:	4770      	bx	lr

08022d98 <__cxa_pure_virtual>:
 8022d98:	b508      	push	{r3, lr}
 8022d9a:	f000 f80f 	bl	8022dbc <_ZSt9terminatev>

08022d9e <_ZdlPv>:
 8022d9e:	f000 b989 	b.w	80230b4 <free>

08022da2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022da2:	b508      	push	{r3, lr}
 8022da4:	4780      	blx	r0
 8022da6:	f000 f80e 	bl	8022dc6 <abort>
	...

08022dac <_ZSt13get_terminatev>:
 8022dac:	4b02      	ldr	r3, [pc, #8]	; (8022db8 <_ZSt13get_terminatev+0xc>)
 8022dae:	6818      	ldr	r0, [r3, #0]
 8022db0:	f3bf 8f5b 	dmb	ish
 8022db4:	4770      	bx	lr
 8022db6:	bf00      	nop
 8022db8:	240000d8 	.word	0x240000d8

08022dbc <_ZSt9terminatev>:
 8022dbc:	b508      	push	{r3, lr}
 8022dbe:	f7ff fff5 	bl	8022dac <_ZSt13get_terminatev>
 8022dc2:	f7ff ffee 	bl	8022da2 <_ZN10__cxxabiv111__terminateEPFvvE>

08022dc6 <abort>:
 8022dc6:	b508      	push	{r3, lr}
 8022dc8:	2006      	movs	r0, #6
 8022dca:	f000 fe11 	bl	80239f0 <raise>
 8022dce:	2001      	movs	r0, #1
 8022dd0:	f7e0 faca 	bl	8003368 <_exit>

08022dd4 <__assert_func>:
 8022dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022dd6:	4614      	mov	r4, r2
 8022dd8:	461a      	mov	r2, r3
 8022dda:	4b09      	ldr	r3, [pc, #36]	; (8022e00 <__assert_func+0x2c>)
 8022ddc:	681b      	ldr	r3, [r3, #0]
 8022dde:	4605      	mov	r5, r0
 8022de0:	68d8      	ldr	r0, [r3, #12]
 8022de2:	b14c      	cbz	r4, 8022df8 <__assert_func+0x24>
 8022de4:	4b07      	ldr	r3, [pc, #28]	; (8022e04 <__assert_func+0x30>)
 8022de6:	9100      	str	r1, [sp, #0]
 8022de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022dec:	4906      	ldr	r1, [pc, #24]	; (8022e08 <__assert_func+0x34>)
 8022dee:	462b      	mov	r3, r5
 8022df0:	f000 f8fe 	bl	8022ff0 <fiprintf>
 8022df4:	f7ff ffe7 	bl	8022dc6 <abort>
 8022df8:	4b04      	ldr	r3, [pc, #16]	; (8022e0c <__assert_func+0x38>)
 8022dfa:	461c      	mov	r4, r3
 8022dfc:	e7f3      	b.n	8022de6 <__assert_func+0x12>
 8022dfe:	bf00      	nop
 8022e00:	240000dc 	.word	0x240000dc
 8022e04:	08026e00 	.word	0x08026e00
 8022e08:	08026e0d 	.word	0x08026e0d
 8022e0c:	08026e3b 	.word	0x08026e3b

08022e10 <atexit>:
 8022e10:	2300      	movs	r3, #0
 8022e12:	4601      	mov	r1, r0
 8022e14:	461a      	mov	r2, r3
 8022e16:	4618      	mov	r0, r3
 8022e18:	f000 bfa4 	b.w	8023d64 <__register_exitproc>

08022e1c <__cxa_atexit>:
 8022e1c:	b510      	push	{r4, lr}
 8022e1e:	4c05      	ldr	r4, [pc, #20]	; (8022e34 <__cxa_atexit+0x18>)
 8022e20:	4613      	mov	r3, r2
 8022e22:	b12c      	cbz	r4, 8022e30 <__cxa_atexit+0x14>
 8022e24:	460a      	mov	r2, r1
 8022e26:	4601      	mov	r1, r0
 8022e28:	2002      	movs	r0, #2
 8022e2a:	f000 ff9b 	bl	8023d64 <__register_exitproc>
 8022e2e:	bd10      	pop	{r4, pc}
 8022e30:	4620      	mov	r0, r4
 8022e32:	e7fc      	b.n	8022e2e <__cxa_atexit+0x12>
 8022e34:	08023d65 	.word	0x08023d65

08022e38 <__errno>:
 8022e38:	4b01      	ldr	r3, [pc, #4]	; (8022e40 <__errno+0x8>)
 8022e3a:	6818      	ldr	r0, [r3, #0]
 8022e3c:	4770      	bx	lr
 8022e3e:	bf00      	nop
 8022e40:	240000dc 	.word	0x240000dc

08022e44 <std>:
 8022e44:	2300      	movs	r3, #0
 8022e46:	b510      	push	{r4, lr}
 8022e48:	4604      	mov	r4, r0
 8022e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8022e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022e52:	6083      	str	r3, [r0, #8]
 8022e54:	8181      	strh	r1, [r0, #12]
 8022e56:	6643      	str	r3, [r0, #100]	; 0x64
 8022e58:	81c2      	strh	r2, [r0, #14]
 8022e5a:	6183      	str	r3, [r0, #24]
 8022e5c:	4619      	mov	r1, r3
 8022e5e:	2208      	movs	r2, #8
 8022e60:	305c      	adds	r0, #92	; 0x5c
 8022e62:	f000 f94d 	bl	8023100 <memset>
 8022e66:	4b05      	ldr	r3, [pc, #20]	; (8022e7c <std+0x38>)
 8022e68:	6263      	str	r3, [r4, #36]	; 0x24
 8022e6a:	4b05      	ldr	r3, [pc, #20]	; (8022e80 <std+0x3c>)
 8022e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8022e6e:	4b05      	ldr	r3, [pc, #20]	; (8022e84 <std+0x40>)
 8022e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022e72:	4b05      	ldr	r3, [pc, #20]	; (8022e88 <std+0x44>)
 8022e74:	6224      	str	r4, [r4, #32]
 8022e76:	6323      	str	r3, [r4, #48]	; 0x30
 8022e78:	bd10      	pop	{r4, pc}
 8022e7a:	bf00      	nop
 8022e7c:	08023a69 	.word	0x08023a69
 8022e80:	08023a8b 	.word	0x08023a8b
 8022e84:	08023ac3 	.word	0x08023ac3
 8022e88:	08023ae7 	.word	0x08023ae7

08022e8c <_cleanup_r>:
 8022e8c:	4901      	ldr	r1, [pc, #4]	; (8022e94 <_cleanup_r+0x8>)
 8022e8e:	f000 b8c1 	b.w	8023014 <_fwalk_reent>
 8022e92:	bf00      	nop
 8022e94:	08023f55 	.word	0x08023f55

08022e98 <__sfmoreglue>:
 8022e98:	b570      	push	{r4, r5, r6, lr}
 8022e9a:	2268      	movs	r2, #104	; 0x68
 8022e9c:	1e4d      	subs	r5, r1, #1
 8022e9e:	4355      	muls	r5, r2
 8022ea0:	460e      	mov	r6, r1
 8022ea2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022ea6:	f000 f99f 	bl	80231e8 <_malloc_r>
 8022eaa:	4604      	mov	r4, r0
 8022eac:	b140      	cbz	r0, 8022ec0 <__sfmoreglue+0x28>
 8022eae:	2100      	movs	r1, #0
 8022eb0:	e9c0 1600 	strd	r1, r6, [r0]
 8022eb4:	300c      	adds	r0, #12
 8022eb6:	60a0      	str	r0, [r4, #8]
 8022eb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022ebc:	f000 f920 	bl	8023100 <memset>
 8022ec0:	4620      	mov	r0, r4
 8022ec2:	bd70      	pop	{r4, r5, r6, pc}

08022ec4 <__sfp_lock_acquire>:
 8022ec4:	4801      	ldr	r0, [pc, #4]	; (8022ecc <__sfp_lock_acquire+0x8>)
 8022ec6:	f000 b8ea 	b.w	802309e <__retarget_lock_acquire_recursive>
 8022eca:	bf00      	nop
 8022ecc:	2400f51e 	.word	0x2400f51e

08022ed0 <__sfp_lock_release>:
 8022ed0:	4801      	ldr	r0, [pc, #4]	; (8022ed8 <__sfp_lock_release+0x8>)
 8022ed2:	f000 b8e6 	b.w	80230a2 <__retarget_lock_release_recursive>
 8022ed6:	bf00      	nop
 8022ed8:	2400f51e 	.word	0x2400f51e

08022edc <__sinit_lock_acquire>:
 8022edc:	4801      	ldr	r0, [pc, #4]	; (8022ee4 <__sinit_lock_acquire+0x8>)
 8022ede:	f000 b8de 	b.w	802309e <__retarget_lock_acquire_recursive>
 8022ee2:	bf00      	nop
 8022ee4:	2400f51f 	.word	0x2400f51f

08022ee8 <__sinit_lock_release>:
 8022ee8:	4801      	ldr	r0, [pc, #4]	; (8022ef0 <__sinit_lock_release+0x8>)
 8022eea:	f000 b8da 	b.w	80230a2 <__retarget_lock_release_recursive>
 8022eee:	bf00      	nop
 8022ef0:	2400f51f 	.word	0x2400f51f

08022ef4 <__sinit>:
 8022ef4:	b510      	push	{r4, lr}
 8022ef6:	4604      	mov	r4, r0
 8022ef8:	f7ff fff0 	bl	8022edc <__sinit_lock_acquire>
 8022efc:	69a3      	ldr	r3, [r4, #24]
 8022efe:	b11b      	cbz	r3, 8022f08 <__sinit+0x14>
 8022f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022f04:	f7ff bff0 	b.w	8022ee8 <__sinit_lock_release>
 8022f08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022f0c:	6523      	str	r3, [r4, #80]	; 0x50
 8022f0e:	4b13      	ldr	r3, [pc, #76]	; (8022f5c <__sinit+0x68>)
 8022f10:	4a13      	ldr	r2, [pc, #76]	; (8022f60 <__sinit+0x6c>)
 8022f12:	681b      	ldr	r3, [r3, #0]
 8022f14:	62a2      	str	r2, [r4, #40]	; 0x28
 8022f16:	42a3      	cmp	r3, r4
 8022f18:	bf04      	itt	eq
 8022f1a:	2301      	moveq	r3, #1
 8022f1c:	61a3      	streq	r3, [r4, #24]
 8022f1e:	4620      	mov	r0, r4
 8022f20:	f000 f820 	bl	8022f64 <__sfp>
 8022f24:	6060      	str	r0, [r4, #4]
 8022f26:	4620      	mov	r0, r4
 8022f28:	f000 f81c 	bl	8022f64 <__sfp>
 8022f2c:	60a0      	str	r0, [r4, #8]
 8022f2e:	4620      	mov	r0, r4
 8022f30:	f000 f818 	bl	8022f64 <__sfp>
 8022f34:	2200      	movs	r2, #0
 8022f36:	60e0      	str	r0, [r4, #12]
 8022f38:	2104      	movs	r1, #4
 8022f3a:	6860      	ldr	r0, [r4, #4]
 8022f3c:	f7ff ff82 	bl	8022e44 <std>
 8022f40:	68a0      	ldr	r0, [r4, #8]
 8022f42:	2201      	movs	r2, #1
 8022f44:	2109      	movs	r1, #9
 8022f46:	f7ff ff7d 	bl	8022e44 <std>
 8022f4a:	68e0      	ldr	r0, [r4, #12]
 8022f4c:	2202      	movs	r2, #2
 8022f4e:	2112      	movs	r1, #18
 8022f50:	f7ff ff78 	bl	8022e44 <std>
 8022f54:	2301      	movs	r3, #1
 8022f56:	61a3      	str	r3, [r4, #24]
 8022f58:	e7d2      	b.n	8022f00 <__sinit+0xc>
 8022f5a:	bf00      	nop
 8022f5c:	08026e9c 	.word	0x08026e9c
 8022f60:	08022e8d 	.word	0x08022e8d

08022f64 <__sfp>:
 8022f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f66:	4607      	mov	r7, r0
 8022f68:	f7ff ffac 	bl	8022ec4 <__sfp_lock_acquire>
 8022f6c:	4b1e      	ldr	r3, [pc, #120]	; (8022fe8 <__sfp+0x84>)
 8022f6e:	681e      	ldr	r6, [r3, #0]
 8022f70:	69b3      	ldr	r3, [r6, #24]
 8022f72:	b913      	cbnz	r3, 8022f7a <__sfp+0x16>
 8022f74:	4630      	mov	r0, r6
 8022f76:	f7ff ffbd 	bl	8022ef4 <__sinit>
 8022f7a:	3648      	adds	r6, #72	; 0x48
 8022f7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022f80:	3b01      	subs	r3, #1
 8022f82:	d503      	bpl.n	8022f8c <__sfp+0x28>
 8022f84:	6833      	ldr	r3, [r6, #0]
 8022f86:	b30b      	cbz	r3, 8022fcc <__sfp+0x68>
 8022f88:	6836      	ldr	r6, [r6, #0]
 8022f8a:	e7f7      	b.n	8022f7c <__sfp+0x18>
 8022f8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022f90:	b9d5      	cbnz	r5, 8022fc8 <__sfp+0x64>
 8022f92:	4b16      	ldr	r3, [pc, #88]	; (8022fec <__sfp+0x88>)
 8022f94:	60e3      	str	r3, [r4, #12]
 8022f96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022f9a:	6665      	str	r5, [r4, #100]	; 0x64
 8022f9c:	f000 f87e 	bl	802309c <__retarget_lock_init_recursive>
 8022fa0:	f7ff ff96 	bl	8022ed0 <__sfp_lock_release>
 8022fa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022fa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022fac:	6025      	str	r5, [r4, #0]
 8022fae:	61a5      	str	r5, [r4, #24]
 8022fb0:	2208      	movs	r2, #8
 8022fb2:	4629      	mov	r1, r5
 8022fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022fb8:	f000 f8a2 	bl	8023100 <memset>
 8022fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022fc4:	4620      	mov	r0, r4
 8022fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022fc8:	3468      	adds	r4, #104	; 0x68
 8022fca:	e7d9      	b.n	8022f80 <__sfp+0x1c>
 8022fcc:	2104      	movs	r1, #4
 8022fce:	4638      	mov	r0, r7
 8022fd0:	f7ff ff62 	bl	8022e98 <__sfmoreglue>
 8022fd4:	4604      	mov	r4, r0
 8022fd6:	6030      	str	r0, [r6, #0]
 8022fd8:	2800      	cmp	r0, #0
 8022fda:	d1d5      	bne.n	8022f88 <__sfp+0x24>
 8022fdc:	f7ff ff78 	bl	8022ed0 <__sfp_lock_release>
 8022fe0:	230c      	movs	r3, #12
 8022fe2:	603b      	str	r3, [r7, #0]
 8022fe4:	e7ee      	b.n	8022fc4 <__sfp+0x60>
 8022fe6:	bf00      	nop
 8022fe8:	08026e9c 	.word	0x08026e9c
 8022fec:	ffff0001 	.word	0xffff0001

08022ff0 <fiprintf>:
 8022ff0:	b40e      	push	{r1, r2, r3}
 8022ff2:	b503      	push	{r0, r1, lr}
 8022ff4:	4601      	mov	r1, r0
 8022ff6:	ab03      	add	r3, sp, #12
 8022ff8:	4805      	ldr	r0, [pc, #20]	; (8023010 <fiprintf+0x20>)
 8022ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8022ffe:	6800      	ldr	r0, [r0, #0]
 8023000:	9301      	str	r3, [sp, #4]
 8023002:	f000 f98f 	bl	8023324 <_vfiprintf_r>
 8023006:	b002      	add	sp, #8
 8023008:	f85d eb04 	ldr.w	lr, [sp], #4
 802300c:	b003      	add	sp, #12
 802300e:	4770      	bx	lr
 8023010:	240000dc 	.word	0x240000dc

08023014 <_fwalk_reent>:
 8023014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023018:	4606      	mov	r6, r0
 802301a:	4688      	mov	r8, r1
 802301c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023020:	2700      	movs	r7, #0
 8023022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023026:	f1b9 0901 	subs.w	r9, r9, #1
 802302a:	d505      	bpl.n	8023038 <_fwalk_reent+0x24>
 802302c:	6824      	ldr	r4, [r4, #0]
 802302e:	2c00      	cmp	r4, #0
 8023030:	d1f7      	bne.n	8023022 <_fwalk_reent+0xe>
 8023032:	4638      	mov	r0, r7
 8023034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023038:	89ab      	ldrh	r3, [r5, #12]
 802303a:	2b01      	cmp	r3, #1
 802303c:	d907      	bls.n	802304e <_fwalk_reent+0x3a>
 802303e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023042:	3301      	adds	r3, #1
 8023044:	d003      	beq.n	802304e <_fwalk_reent+0x3a>
 8023046:	4629      	mov	r1, r5
 8023048:	4630      	mov	r0, r6
 802304a:	47c0      	blx	r8
 802304c:	4307      	orrs	r7, r0
 802304e:	3568      	adds	r5, #104	; 0x68
 8023050:	e7e9      	b.n	8023026 <_fwalk_reent+0x12>
	...

08023054 <__libc_init_array>:
 8023054:	b570      	push	{r4, r5, r6, lr}
 8023056:	4d0d      	ldr	r5, [pc, #52]	; (802308c <__libc_init_array+0x38>)
 8023058:	4c0d      	ldr	r4, [pc, #52]	; (8023090 <__libc_init_array+0x3c>)
 802305a:	1b64      	subs	r4, r4, r5
 802305c:	10a4      	asrs	r4, r4, #2
 802305e:	2600      	movs	r6, #0
 8023060:	42a6      	cmp	r6, r4
 8023062:	d109      	bne.n	8023078 <__libc_init_array+0x24>
 8023064:	4d0b      	ldr	r5, [pc, #44]	; (8023094 <__libc_init_array+0x40>)
 8023066:	4c0c      	ldr	r4, [pc, #48]	; (8023098 <__libc_init_array+0x44>)
 8023068:	f001 fa14 	bl	8024494 <_init>
 802306c:	1b64      	subs	r4, r4, r5
 802306e:	10a4      	asrs	r4, r4, #2
 8023070:	2600      	movs	r6, #0
 8023072:	42a6      	cmp	r6, r4
 8023074:	d105      	bne.n	8023082 <__libc_init_array+0x2e>
 8023076:	bd70      	pop	{r4, r5, r6, pc}
 8023078:	f855 3b04 	ldr.w	r3, [r5], #4
 802307c:	4798      	blx	r3
 802307e:	3601      	adds	r6, #1
 8023080:	e7ee      	b.n	8023060 <__libc_init_array+0xc>
 8023082:	f855 3b04 	ldr.w	r3, [r5], #4
 8023086:	4798      	blx	r3
 8023088:	3601      	adds	r6, #1
 802308a:	e7f2      	b.n	8023072 <__libc_init_array+0x1e>
 802308c:	08027664 	.word	0x08027664
 8023090:	08027664 	.word	0x08027664
 8023094:	08027664 	.word	0x08027664
 8023098:	0802768c 	.word	0x0802768c

0802309c <__retarget_lock_init_recursive>:
 802309c:	4770      	bx	lr

0802309e <__retarget_lock_acquire_recursive>:
 802309e:	4770      	bx	lr

080230a0 <__retarget_lock_release>:
 80230a0:	4770      	bx	lr

080230a2 <__retarget_lock_release_recursive>:
 80230a2:	4770      	bx	lr

080230a4 <malloc>:
 80230a4:	4b02      	ldr	r3, [pc, #8]	; (80230b0 <malloc+0xc>)
 80230a6:	4601      	mov	r1, r0
 80230a8:	6818      	ldr	r0, [r3, #0]
 80230aa:	f000 b89d 	b.w	80231e8 <_malloc_r>
 80230ae:	bf00      	nop
 80230b0:	240000dc 	.word	0x240000dc

080230b4 <free>:
 80230b4:	4b02      	ldr	r3, [pc, #8]	; (80230c0 <free+0xc>)
 80230b6:	4601      	mov	r1, r0
 80230b8:	6818      	ldr	r0, [r3, #0]
 80230ba:	f000 b829 	b.w	8023110 <_free_r>
 80230be:	bf00      	nop
 80230c0:	240000dc 	.word	0x240000dc

080230c4 <memcmp>:
 80230c4:	b510      	push	{r4, lr}
 80230c6:	3901      	subs	r1, #1
 80230c8:	4402      	add	r2, r0
 80230ca:	4290      	cmp	r0, r2
 80230cc:	d101      	bne.n	80230d2 <memcmp+0xe>
 80230ce:	2000      	movs	r0, #0
 80230d0:	e005      	b.n	80230de <memcmp+0x1a>
 80230d2:	7803      	ldrb	r3, [r0, #0]
 80230d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80230d8:	42a3      	cmp	r3, r4
 80230da:	d001      	beq.n	80230e0 <memcmp+0x1c>
 80230dc:	1b18      	subs	r0, r3, r4
 80230de:	bd10      	pop	{r4, pc}
 80230e0:	3001      	adds	r0, #1
 80230e2:	e7f2      	b.n	80230ca <memcmp+0x6>

080230e4 <memcpy>:
 80230e4:	440a      	add	r2, r1
 80230e6:	4291      	cmp	r1, r2
 80230e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80230ec:	d100      	bne.n	80230f0 <memcpy+0xc>
 80230ee:	4770      	bx	lr
 80230f0:	b510      	push	{r4, lr}
 80230f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80230f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80230fa:	4291      	cmp	r1, r2
 80230fc:	d1f9      	bne.n	80230f2 <memcpy+0xe>
 80230fe:	bd10      	pop	{r4, pc}

08023100 <memset>:
 8023100:	4402      	add	r2, r0
 8023102:	4603      	mov	r3, r0
 8023104:	4293      	cmp	r3, r2
 8023106:	d100      	bne.n	802310a <memset+0xa>
 8023108:	4770      	bx	lr
 802310a:	f803 1b01 	strb.w	r1, [r3], #1
 802310e:	e7f9      	b.n	8023104 <memset+0x4>

08023110 <_free_r>:
 8023110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023112:	2900      	cmp	r1, #0
 8023114:	d044      	beq.n	80231a0 <_free_r+0x90>
 8023116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802311a:	9001      	str	r0, [sp, #4]
 802311c:	2b00      	cmp	r3, #0
 802311e:	f1a1 0404 	sub.w	r4, r1, #4
 8023122:	bfb8      	it	lt
 8023124:	18e4      	addlt	r4, r4, r3
 8023126:	f000 ffe3 	bl	80240f0 <__malloc_lock>
 802312a:	4a1e      	ldr	r2, [pc, #120]	; (80231a4 <_free_r+0x94>)
 802312c:	9801      	ldr	r0, [sp, #4]
 802312e:	6813      	ldr	r3, [r2, #0]
 8023130:	b933      	cbnz	r3, 8023140 <_free_r+0x30>
 8023132:	6063      	str	r3, [r4, #4]
 8023134:	6014      	str	r4, [r2, #0]
 8023136:	b003      	add	sp, #12
 8023138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802313c:	f000 bfde 	b.w	80240fc <__malloc_unlock>
 8023140:	42a3      	cmp	r3, r4
 8023142:	d908      	bls.n	8023156 <_free_r+0x46>
 8023144:	6825      	ldr	r5, [r4, #0]
 8023146:	1961      	adds	r1, r4, r5
 8023148:	428b      	cmp	r3, r1
 802314a:	bf01      	itttt	eq
 802314c:	6819      	ldreq	r1, [r3, #0]
 802314e:	685b      	ldreq	r3, [r3, #4]
 8023150:	1949      	addeq	r1, r1, r5
 8023152:	6021      	streq	r1, [r4, #0]
 8023154:	e7ed      	b.n	8023132 <_free_r+0x22>
 8023156:	461a      	mov	r2, r3
 8023158:	685b      	ldr	r3, [r3, #4]
 802315a:	b10b      	cbz	r3, 8023160 <_free_r+0x50>
 802315c:	42a3      	cmp	r3, r4
 802315e:	d9fa      	bls.n	8023156 <_free_r+0x46>
 8023160:	6811      	ldr	r1, [r2, #0]
 8023162:	1855      	adds	r5, r2, r1
 8023164:	42a5      	cmp	r5, r4
 8023166:	d10b      	bne.n	8023180 <_free_r+0x70>
 8023168:	6824      	ldr	r4, [r4, #0]
 802316a:	4421      	add	r1, r4
 802316c:	1854      	adds	r4, r2, r1
 802316e:	42a3      	cmp	r3, r4
 8023170:	6011      	str	r1, [r2, #0]
 8023172:	d1e0      	bne.n	8023136 <_free_r+0x26>
 8023174:	681c      	ldr	r4, [r3, #0]
 8023176:	685b      	ldr	r3, [r3, #4]
 8023178:	6053      	str	r3, [r2, #4]
 802317a:	4421      	add	r1, r4
 802317c:	6011      	str	r1, [r2, #0]
 802317e:	e7da      	b.n	8023136 <_free_r+0x26>
 8023180:	d902      	bls.n	8023188 <_free_r+0x78>
 8023182:	230c      	movs	r3, #12
 8023184:	6003      	str	r3, [r0, #0]
 8023186:	e7d6      	b.n	8023136 <_free_r+0x26>
 8023188:	6825      	ldr	r5, [r4, #0]
 802318a:	1961      	adds	r1, r4, r5
 802318c:	428b      	cmp	r3, r1
 802318e:	bf04      	itt	eq
 8023190:	6819      	ldreq	r1, [r3, #0]
 8023192:	685b      	ldreq	r3, [r3, #4]
 8023194:	6063      	str	r3, [r4, #4]
 8023196:	bf04      	itt	eq
 8023198:	1949      	addeq	r1, r1, r5
 802319a:	6021      	streq	r1, [r4, #0]
 802319c:	6054      	str	r4, [r2, #4]
 802319e:	e7ca      	b.n	8023136 <_free_r+0x26>
 80231a0:	b003      	add	sp, #12
 80231a2:	bd30      	pop	{r4, r5, pc}
 80231a4:	2400f520 	.word	0x2400f520

080231a8 <sbrk_aligned>:
 80231a8:	b570      	push	{r4, r5, r6, lr}
 80231aa:	4e0e      	ldr	r6, [pc, #56]	; (80231e4 <sbrk_aligned+0x3c>)
 80231ac:	460c      	mov	r4, r1
 80231ae:	6831      	ldr	r1, [r6, #0]
 80231b0:	4605      	mov	r5, r0
 80231b2:	b911      	cbnz	r1, 80231ba <sbrk_aligned+0x12>
 80231b4:	f000 fbe4 	bl	8023980 <_sbrk_r>
 80231b8:	6030      	str	r0, [r6, #0]
 80231ba:	4621      	mov	r1, r4
 80231bc:	4628      	mov	r0, r5
 80231be:	f000 fbdf 	bl	8023980 <_sbrk_r>
 80231c2:	1c43      	adds	r3, r0, #1
 80231c4:	d00a      	beq.n	80231dc <sbrk_aligned+0x34>
 80231c6:	1cc4      	adds	r4, r0, #3
 80231c8:	f024 0403 	bic.w	r4, r4, #3
 80231cc:	42a0      	cmp	r0, r4
 80231ce:	d007      	beq.n	80231e0 <sbrk_aligned+0x38>
 80231d0:	1a21      	subs	r1, r4, r0
 80231d2:	4628      	mov	r0, r5
 80231d4:	f000 fbd4 	bl	8023980 <_sbrk_r>
 80231d8:	3001      	adds	r0, #1
 80231da:	d101      	bne.n	80231e0 <sbrk_aligned+0x38>
 80231dc:	f04f 34ff 	mov.w	r4, #4294967295
 80231e0:	4620      	mov	r0, r4
 80231e2:	bd70      	pop	{r4, r5, r6, pc}
 80231e4:	2400f524 	.word	0x2400f524

080231e8 <_malloc_r>:
 80231e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231ec:	1ccd      	adds	r5, r1, #3
 80231ee:	f025 0503 	bic.w	r5, r5, #3
 80231f2:	3508      	adds	r5, #8
 80231f4:	2d0c      	cmp	r5, #12
 80231f6:	bf38      	it	cc
 80231f8:	250c      	movcc	r5, #12
 80231fa:	2d00      	cmp	r5, #0
 80231fc:	4607      	mov	r7, r0
 80231fe:	db01      	blt.n	8023204 <_malloc_r+0x1c>
 8023200:	42a9      	cmp	r1, r5
 8023202:	d905      	bls.n	8023210 <_malloc_r+0x28>
 8023204:	230c      	movs	r3, #12
 8023206:	603b      	str	r3, [r7, #0]
 8023208:	2600      	movs	r6, #0
 802320a:	4630      	mov	r0, r6
 802320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023210:	4e2e      	ldr	r6, [pc, #184]	; (80232cc <_malloc_r+0xe4>)
 8023212:	f000 ff6d 	bl	80240f0 <__malloc_lock>
 8023216:	6833      	ldr	r3, [r6, #0]
 8023218:	461c      	mov	r4, r3
 802321a:	bb34      	cbnz	r4, 802326a <_malloc_r+0x82>
 802321c:	4629      	mov	r1, r5
 802321e:	4638      	mov	r0, r7
 8023220:	f7ff ffc2 	bl	80231a8 <sbrk_aligned>
 8023224:	1c43      	adds	r3, r0, #1
 8023226:	4604      	mov	r4, r0
 8023228:	d14d      	bne.n	80232c6 <_malloc_r+0xde>
 802322a:	6834      	ldr	r4, [r6, #0]
 802322c:	4626      	mov	r6, r4
 802322e:	2e00      	cmp	r6, #0
 8023230:	d140      	bne.n	80232b4 <_malloc_r+0xcc>
 8023232:	6823      	ldr	r3, [r4, #0]
 8023234:	4631      	mov	r1, r6
 8023236:	4638      	mov	r0, r7
 8023238:	eb04 0803 	add.w	r8, r4, r3
 802323c:	f000 fba0 	bl	8023980 <_sbrk_r>
 8023240:	4580      	cmp	r8, r0
 8023242:	d13a      	bne.n	80232ba <_malloc_r+0xd2>
 8023244:	6821      	ldr	r1, [r4, #0]
 8023246:	3503      	adds	r5, #3
 8023248:	1a6d      	subs	r5, r5, r1
 802324a:	f025 0503 	bic.w	r5, r5, #3
 802324e:	3508      	adds	r5, #8
 8023250:	2d0c      	cmp	r5, #12
 8023252:	bf38      	it	cc
 8023254:	250c      	movcc	r5, #12
 8023256:	4629      	mov	r1, r5
 8023258:	4638      	mov	r0, r7
 802325a:	f7ff ffa5 	bl	80231a8 <sbrk_aligned>
 802325e:	3001      	adds	r0, #1
 8023260:	d02b      	beq.n	80232ba <_malloc_r+0xd2>
 8023262:	6823      	ldr	r3, [r4, #0]
 8023264:	442b      	add	r3, r5
 8023266:	6023      	str	r3, [r4, #0]
 8023268:	e00e      	b.n	8023288 <_malloc_r+0xa0>
 802326a:	6822      	ldr	r2, [r4, #0]
 802326c:	1b52      	subs	r2, r2, r5
 802326e:	d41e      	bmi.n	80232ae <_malloc_r+0xc6>
 8023270:	2a0b      	cmp	r2, #11
 8023272:	d916      	bls.n	80232a2 <_malloc_r+0xba>
 8023274:	1961      	adds	r1, r4, r5
 8023276:	42a3      	cmp	r3, r4
 8023278:	6025      	str	r5, [r4, #0]
 802327a:	bf18      	it	ne
 802327c:	6059      	strne	r1, [r3, #4]
 802327e:	6863      	ldr	r3, [r4, #4]
 8023280:	bf08      	it	eq
 8023282:	6031      	streq	r1, [r6, #0]
 8023284:	5162      	str	r2, [r4, r5]
 8023286:	604b      	str	r3, [r1, #4]
 8023288:	4638      	mov	r0, r7
 802328a:	f104 060b 	add.w	r6, r4, #11
 802328e:	f000 ff35 	bl	80240fc <__malloc_unlock>
 8023292:	f026 0607 	bic.w	r6, r6, #7
 8023296:	1d23      	adds	r3, r4, #4
 8023298:	1af2      	subs	r2, r6, r3
 802329a:	d0b6      	beq.n	802320a <_malloc_r+0x22>
 802329c:	1b9b      	subs	r3, r3, r6
 802329e:	50a3      	str	r3, [r4, r2]
 80232a0:	e7b3      	b.n	802320a <_malloc_r+0x22>
 80232a2:	6862      	ldr	r2, [r4, #4]
 80232a4:	42a3      	cmp	r3, r4
 80232a6:	bf0c      	ite	eq
 80232a8:	6032      	streq	r2, [r6, #0]
 80232aa:	605a      	strne	r2, [r3, #4]
 80232ac:	e7ec      	b.n	8023288 <_malloc_r+0xa0>
 80232ae:	4623      	mov	r3, r4
 80232b0:	6864      	ldr	r4, [r4, #4]
 80232b2:	e7b2      	b.n	802321a <_malloc_r+0x32>
 80232b4:	4634      	mov	r4, r6
 80232b6:	6876      	ldr	r6, [r6, #4]
 80232b8:	e7b9      	b.n	802322e <_malloc_r+0x46>
 80232ba:	230c      	movs	r3, #12
 80232bc:	603b      	str	r3, [r7, #0]
 80232be:	4638      	mov	r0, r7
 80232c0:	f000 ff1c 	bl	80240fc <__malloc_unlock>
 80232c4:	e7a1      	b.n	802320a <_malloc_r+0x22>
 80232c6:	6025      	str	r5, [r4, #0]
 80232c8:	e7de      	b.n	8023288 <_malloc_r+0xa0>
 80232ca:	bf00      	nop
 80232cc:	2400f520 	.word	0x2400f520

080232d0 <__sfputc_r>:
 80232d0:	6893      	ldr	r3, [r2, #8]
 80232d2:	3b01      	subs	r3, #1
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	b410      	push	{r4}
 80232d8:	6093      	str	r3, [r2, #8]
 80232da:	da08      	bge.n	80232ee <__sfputc_r+0x1e>
 80232dc:	6994      	ldr	r4, [r2, #24]
 80232de:	42a3      	cmp	r3, r4
 80232e0:	db01      	blt.n	80232e6 <__sfputc_r+0x16>
 80232e2:	290a      	cmp	r1, #10
 80232e4:	d103      	bne.n	80232ee <__sfputc_r+0x1e>
 80232e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232ea:	f000 bc69 	b.w	8023bc0 <__swbuf_r>
 80232ee:	6813      	ldr	r3, [r2, #0]
 80232f0:	1c58      	adds	r0, r3, #1
 80232f2:	6010      	str	r0, [r2, #0]
 80232f4:	7019      	strb	r1, [r3, #0]
 80232f6:	4608      	mov	r0, r1
 80232f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232fc:	4770      	bx	lr

080232fe <__sfputs_r>:
 80232fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023300:	4606      	mov	r6, r0
 8023302:	460f      	mov	r7, r1
 8023304:	4614      	mov	r4, r2
 8023306:	18d5      	adds	r5, r2, r3
 8023308:	42ac      	cmp	r4, r5
 802330a:	d101      	bne.n	8023310 <__sfputs_r+0x12>
 802330c:	2000      	movs	r0, #0
 802330e:	e007      	b.n	8023320 <__sfputs_r+0x22>
 8023310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023314:	463a      	mov	r2, r7
 8023316:	4630      	mov	r0, r6
 8023318:	f7ff ffda 	bl	80232d0 <__sfputc_r>
 802331c:	1c43      	adds	r3, r0, #1
 802331e:	d1f3      	bne.n	8023308 <__sfputs_r+0xa>
 8023320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023324 <_vfiprintf_r>:
 8023324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023328:	460d      	mov	r5, r1
 802332a:	b09d      	sub	sp, #116	; 0x74
 802332c:	4614      	mov	r4, r2
 802332e:	4698      	mov	r8, r3
 8023330:	4606      	mov	r6, r0
 8023332:	b118      	cbz	r0, 802333c <_vfiprintf_r+0x18>
 8023334:	6983      	ldr	r3, [r0, #24]
 8023336:	b90b      	cbnz	r3, 802333c <_vfiprintf_r+0x18>
 8023338:	f7ff fddc 	bl	8022ef4 <__sinit>
 802333c:	4b89      	ldr	r3, [pc, #548]	; (8023564 <_vfiprintf_r+0x240>)
 802333e:	429d      	cmp	r5, r3
 8023340:	d11b      	bne.n	802337a <_vfiprintf_r+0x56>
 8023342:	6875      	ldr	r5, [r6, #4]
 8023344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023346:	07d9      	lsls	r1, r3, #31
 8023348:	d405      	bmi.n	8023356 <_vfiprintf_r+0x32>
 802334a:	89ab      	ldrh	r3, [r5, #12]
 802334c:	059a      	lsls	r2, r3, #22
 802334e:	d402      	bmi.n	8023356 <_vfiprintf_r+0x32>
 8023350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023352:	f7ff fea4 	bl	802309e <__retarget_lock_acquire_recursive>
 8023356:	89ab      	ldrh	r3, [r5, #12]
 8023358:	071b      	lsls	r3, r3, #28
 802335a:	d501      	bpl.n	8023360 <_vfiprintf_r+0x3c>
 802335c:	692b      	ldr	r3, [r5, #16]
 802335e:	b9eb      	cbnz	r3, 802339c <_vfiprintf_r+0x78>
 8023360:	4629      	mov	r1, r5
 8023362:	4630      	mov	r0, r6
 8023364:	f000 fc90 	bl	8023c88 <__swsetup_r>
 8023368:	b1c0      	cbz	r0, 802339c <_vfiprintf_r+0x78>
 802336a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802336c:	07dc      	lsls	r4, r3, #31
 802336e:	d50e      	bpl.n	802338e <_vfiprintf_r+0x6a>
 8023370:	f04f 30ff 	mov.w	r0, #4294967295
 8023374:	b01d      	add	sp, #116	; 0x74
 8023376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802337a:	4b7b      	ldr	r3, [pc, #492]	; (8023568 <_vfiprintf_r+0x244>)
 802337c:	429d      	cmp	r5, r3
 802337e:	d101      	bne.n	8023384 <_vfiprintf_r+0x60>
 8023380:	68b5      	ldr	r5, [r6, #8]
 8023382:	e7df      	b.n	8023344 <_vfiprintf_r+0x20>
 8023384:	4b79      	ldr	r3, [pc, #484]	; (802356c <_vfiprintf_r+0x248>)
 8023386:	429d      	cmp	r5, r3
 8023388:	bf08      	it	eq
 802338a:	68f5      	ldreq	r5, [r6, #12]
 802338c:	e7da      	b.n	8023344 <_vfiprintf_r+0x20>
 802338e:	89ab      	ldrh	r3, [r5, #12]
 8023390:	0598      	lsls	r0, r3, #22
 8023392:	d4ed      	bmi.n	8023370 <_vfiprintf_r+0x4c>
 8023394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023396:	f7ff fe84 	bl	80230a2 <__retarget_lock_release_recursive>
 802339a:	e7e9      	b.n	8023370 <_vfiprintf_r+0x4c>
 802339c:	2300      	movs	r3, #0
 802339e:	9309      	str	r3, [sp, #36]	; 0x24
 80233a0:	2320      	movs	r3, #32
 80233a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80233a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80233aa:	2330      	movs	r3, #48	; 0x30
 80233ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023570 <_vfiprintf_r+0x24c>
 80233b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80233b4:	f04f 0901 	mov.w	r9, #1
 80233b8:	4623      	mov	r3, r4
 80233ba:	469a      	mov	sl, r3
 80233bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80233c0:	b10a      	cbz	r2, 80233c6 <_vfiprintf_r+0xa2>
 80233c2:	2a25      	cmp	r2, #37	; 0x25
 80233c4:	d1f9      	bne.n	80233ba <_vfiprintf_r+0x96>
 80233c6:	ebba 0b04 	subs.w	fp, sl, r4
 80233ca:	d00b      	beq.n	80233e4 <_vfiprintf_r+0xc0>
 80233cc:	465b      	mov	r3, fp
 80233ce:	4622      	mov	r2, r4
 80233d0:	4629      	mov	r1, r5
 80233d2:	4630      	mov	r0, r6
 80233d4:	f7ff ff93 	bl	80232fe <__sfputs_r>
 80233d8:	3001      	adds	r0, #1
 80233da:	f000 80aa 	beq.w	8023532 <_vfiprintf_r+0x20e>
 80233de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80233e0:	445a      	add	r2, fp
 80233e2:	9209      	str	r2, [sp, #36]	; 0x24
 80233e4:	f89a 3000 	ldrb.w	r3, [sl]
 80233e8:	2b00      	cmp	r3, #0
 80233ea:	f000 80a2 	beq.w	8023532 <_vfiprintf_r+0x20e>
 80233ee:	2300      	movs	r3, #0
 80233f0:	f04f 32ff 	mov.w	r2, #4294967295
 80233f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80233f8:	f10a 0a01 	add.w	sl, sl, #1
 80233fc:	9304      	str	r3, [sp, #16]
 80233fe:	9307      	str	r3, [sp, #28]
 8023400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023404:	931a      	str	r3, [sp, #104]	; 0x68
 8023406:	4654      	mov	r4, sl
 8023408:	2205      	movs	r2, #5
 802340a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802340e:	4858      	ldr	r0, [pc, #352]	; (8023570 <_vfiprintf_r+0x24c>)
 8023410:	f7dc ff86 	bl	8000320 <memchr>
 8023414:	9a04      	ldr	r2, [sp, #16]
 8023416:	b9d8      	cbnz	r0, 8023450 <_vfiprintf_r+0x12c>
 8023418:	06d1      	lsls	r1, r2, #27
 802341a:	bf44      	itt	mi
 802341c:	2320      	movmi	r3, #32
 802341e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023422:	0713      	lsls	r3, r2, #28
 8023424:	bf44      	itt	mi
 8023426:	232b      	movmi	r3, #43	; 0x2b
 8023428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802342c:	f89a 3000 	ldrb.w	r3, [sl]
 8023430:	2b2a      	cmp	r3, #42	; 0x2a
 8023432:	d015      	beq.n	8023460 <_vfiprintf_r+0x13c>
 8023434:	9a07      	ldr	r2, [sp, #28]
 8023436:	4654      	mov	r4, sl
 8023438:	2000      	movs	r0, #0
 802343a:	f04f 0c0a 	mov.w	ip, #10
 802343e:	4621      	mov	r1, r4
 8023440:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023444:	3b30      	subs	r3, #48	; 0x30
 8023446:	2b09      	cmp	r3, #9
 8023448:	d94e      	bls.n	80234e8 <_vfiprintf_r+0x1c4>
 802344a:	b1b0      	cbz	r0, 802347a <_vfiprintf_r+0x156>
 802344c:	9207      	str	r2, [sp, #28]
 802344e:	e014      	b.n	802347a <_vfiprintf_r+0x156>
 8023450:	eba0 0308 	sub.w	r3, r0, r8
 8023454:	fa09 f303 	lsl.w	r3, r9, r3
 8023458:	4313      	orrs	r3, r2
 802345a:	9304      	str	r3, [sp, #16]
 802345c:	46a2      	mov	sl, r4
 802345e:	e7d2      	b.n	8023406 <_vfiprintf_r+0xe2>
 8023460:	9b03      	ldr	r3, [sp, #12]
 8023462:	1d19      	adds	r1, r3, #4
 8023464:	681b      	ldr	r3, [r3, #0]
 8023466:	9103      	str	r1, [sp, #12]
 8023468:	2b00      	cmp	r3, #0
 802346a:	bfbb      	ittet	lt
 802346c:	425b      	neglt	r3, r3
 802346e:	f042 0202 	orrlt.w	r2, r2, #2
 8023472:	9307      	strge	r3, [sp, #28]
 8023474:	9307      	strlt	r3, [sp, #28]
 8023476:	bfb8      	it	lt
 8023478:	9204      	strlt	r2, [sp, #16]
 802347a:	7823      	ldrb	r3, [r4, #0]
 802347c:	2b2e      	cmp	r3, #46	; 0x2e
 802347e:	d10c      	bne.n	802349a <_vfiprintf_r+0x176>
 8023480:	7863      	ldrb	r3, [r4, #1]
 8023482:	2b2a      	cmp	r3, #42	; 0x2a
 8023484:	d135      	bne.n	80234f2 <_vfiprintf_r+0x1ce>
 8023486:	9b03      	ldr	r3, [sp, #12]
 8023488:	1d1a      	adds	r2, r3, #4
 802348a:	681b      	ldr	r3, [r3, #0]
 802348c:	9203      	str	r2, [sp, #12]
 802348e:	2b00      	cmp	r3, #0
 8023490:	bfb8      	it	lt
 8023492:	f04f 33ff 	movlt.w	r3, #4294967295
 8023496:	3402      	adds	r4, #2
 8023498:	9305      	str	r3, [sp, #20]
 802349a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023580 <_vfiprintf_r+0x25c>
 802349e:	7821      	ldrb	r1, [r4, #0]
 80234a0:	2203      	movs	r2, #3
 80234a2:	4650      	mov	r0, sl
 80234a4:	f7dc ff3c 	bl	8000320 <memchr>
 80234a8:	b140      	cbz	r0, 80234bc <_vfiprintf_r+0x198>
 80234aa:	2340      	movs	r3, #64	; 0x40
 80234ac:	eba0 000a 	sub.w	r0, r0, sl
 80234b0:	fa03 f000 	lsl.w	r0, r3, r0
 80234b4:	9b04      	ldr	r3, [sp, #16]
 80234b6:	4303      	orrs	r3, r0
 80234b8:	3401      	adds	r4, #1
 80234ba:	9304      	str	r3, [sp, #16]
 80234bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80234c0:	482c      	ldr	r0, [pc, #176]	; (8023574 <_vfiprintf_r+0x250>)
 80234c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80234c6:	2206      	movs	r2, #6
 80234c8:	f7dc ff2a 	bl	8000320 <memchr>
 80234cc:	2800      	cmp	r0, #0
 80234ce:	d03f      	beq.n	8023550 <_vfiprintf_r+0x22c>
 80234d0:	4b29      	ldr	r3, [pc, #164]	; (8023578 <_vfiprintf_r+0x254>)
 80234d2:	bb1b      	cbnz	r3, 802351c <_vfiprintf_r+0x1f8>
 80234d4:	9b03      	ldr	r3, [sp, #12]
 80234d6:	3307      	adds	r3, #7
 80234d8:	f023 0307 	bic.w	r3, r3, #7
 80234dc:	3308      	adds	r3, #8
 80234de:	9303      	str	r3, [sp, #12]
 80234e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80234e2:	443b      	add	r3, r7
 80234e4:	9309      	str	r3, [sp, #36]	; 0x24
 80234e6:	e767      	b.n	80233b8 <_vfiprintf_r+0x94>
 80234e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80234ec:	460c      	mov	r4, r1
 80234ee:	2001      	movs	r0, #1
 80234f0:	e7a5      	b.n	802343e <_vfiprintf_r+0x11a>
 80234f2:	2300      	movs	r3, #0
 80234f4:	3401      	adds	r4, #1
 80234f6:	9305      	str	r3, [sp, #20]
 80234f8:	4619      	mov	r1, r3
 80234fa:	f04f 0c0a 	mov.w	ip, #10
 80234fe:	4620      	mov	r0, r4
 8023500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023504:	3a30      	subs	r2, #48	; 0x30
 8023506:	2a09      	cmp	r2, #9
 8023508:	d903      	bls.n	8023512 <_vfiprintf_r+0x1ee>
 802350a:	2b00      	cmp	r3, #0
 802350c:	d0c5      	beq.n	802349a <_vfiprintf_r+0x176>
 802350e:	9105      	str	r1, [sp, #20]
 8023510:	e7c3      	b.n	802349a <_vfiprintf_r+0x176>
 8023512:	fb0c 2101 	mla	r1, ip, r1, r2
 8023516:	4604      	mov	r4, r0
 8023518:	2301      	movs	r3, #1
 802351a:	e7f0      	b.n	80234fe <_vfiprintf_r+0x1da>
 802351c:	ab03      	add	r3, sp, #12
 802351e:	9300      	str	r3, [sp, #0]
 8023520:	462a      	mov	r2, r5
 8023522:	4b16      	ldr	r3, [pc, #88]	; (802357c <_vfiprintf_r+0x258>)
 8023524:	a904      	add	r1, sp, #16
 8023526:	4630      	mov	r0, r6
 8023528:	f3af 8000 	nop.w
 802352c:	4607      	mov	r7, r0
 802352e:	1c78      	adds	r0, r7, #1
 8023530:	d1d6      	bne.n	80234e0 <_vfiprintf_r+0x1bc>
 8023532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023534:	07d9      	lsls	r1, r3, #31
 8023536:	d405      	bmi.n	8023544 <_vfiprintf_r+0x220>
 8023538:	89ab      	ldrh	r3, [r5, #12]
 802353a:	059a      	lsls	r2, r3, #22
 802353c:	d402      	bmi.n	8023544 <_vfiprintf_r+0x220>
 802353e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023540:	f7ff fdaf 	bl	80230a2 <__retarget_lock_release_recursive>
 8023544:	89ab      	ldrh	r3, [r5, #12]
 8023546:	065b      	lsls	r3, r3, #25
 8023548:	f53f af12 	bmi.w	8023370 <_vfiprintf_r+0x4c>
 802354c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802354e:	e711      	b.n	8023374 <_vfiprintf_r+0x50>
 8023550:	ab03      	add	r3, sp, #12
 8023552:	9300      	str	r3, [sp, #0]
 8023554:	462a      	mov	r2, r5
 8023556:	4b09      	ldr	r3, [pc, #36]	; (802357c <_vfiprintf_r+0x258>)
 8023558:	a904      	add	r1, sp, #16
 802355a:	4630      	mov	r0, r6
 802355c:	f000 f880 	bl	8023660 <_printf_i>
 8023560:	e7e4      	b.n	802352c <_vfiprintf_r+0x208>
 8023562:	bf00      	nop
 8023564:	08026e5c 	.word	0x08026e5c
 8023568:	08026e7c 	.word	0x08026e7c
 802356c:	08026e3c 	.word	0x08026e3c
 8023570:	08026ea0 	.word	0x08026ea0
 8023574:	08026eaa 	.word	0x08026eaa
 8023578:	00000000 	.word	0x00000000
 802357c:	080232ff 	.word	0x080232ff
 8023580:	08026ea6 	.word	0x08026ea6

08023584 <_printf_common>:
 8023584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023588:	4616      	mov	r6, r2
 802358a:	4699      	mov	r9, r3
 802358c:	688a      	ldr	r2, [r1, #8]
 802358e:	690b      	ldr	r3, [r1, #16]
 8023590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023594:	4293      	cmp	r3, r2
 8023596:	bfb8      	it	lt
 8023598:	4613      	movlt	r3, r2
 802359a:	6033      	str	r3, [r6, #0]
 802359c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80235a0:	4607      	mov	r7, r0
 80235a2:	460c      	mov	r4, r1
 80235a4:	b10a      	cbz	r2, 80235aa <_printf_common+0x26>
 80235a6:	3301      	adds	r3, #1
 80235a8:	6033      	str	r3, [r6, #0]
 80235aa:	6823      	ldr	r3, [r4, #0]
 80235ac:	0699      	lsls	r1, r3, #26
 80235ae:	bf42      	ittt	mi
 80235b0:	6833      	ldrmi	r3, [r6, #0]
 80235b2:	3302      	addmi	r3, #2
 80235b4:	6033      	strmi	r3, [r6, #0]
 80235b6:	6825      	ldr	r5, [r4, #0]
 80235b8:	f015 0506 	ands.w	r5, r5, #6
 80235bc:	d106      	bne.n	80235cc <_printf_common+0x48>
 80235be:	f104 0a19 	add.w	sl, r4, #25
 80235c2:	68e3      	ldr	r3, [r4, #12]
 80235c4:	6832      	ldr	r2, [r6, #0]
 80235c6:	1a9b      	subs	r3, r3, r2
 80235c8:	42ab      	cmp	r3, r5
 80235ca:	dc26      	bgt.n	802361a <_printf_common+0x96>
 80235cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80235d0:	1e13      	subs	r3, r2, #0
 80235d2:	6822      	ldr	r2, [r4, #0]
 80235d4:	bf18      	it	ne
 80235d6:	2301      	movne	r3, #1
 80235d8:	0692      	lsls	r2, r2, #26
 80235da:	d42b      	bmi.n	8023634 <_printf_common+0xb0>
 80235dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80235e0:	4649      	mov	r1, r9
 80235e2:	4638      	mov	r0, r7
 80235e4:	47c0      	blx	r8
 80235e6:	3001      	adds	r0, #1
 80235e8:	d01e      	beq.n	8023628 <_printf_common+0xa4>
 80235ea:	6823      	ldr	r3, [r4, #0]
 80235ec:	68e5      	ldr	r5, [r4, #12]
 80235ee:	6832      	ldr	r2, [r6, #0]
 80235f0:	f003 0306 	and.w	r3, r3, #6
 80235f4:	2b04      	cmp	r3, #4
 80235f6:	bf08      	it	eq
 80235f8:	1aad      	subeq	r5, r5, r2
 80235fa:	68a3      	ldr	r3, [r4, #8]
 80235fc:	6922      	ldr	r2, [r4, #16]
 80235fe:	bf0c      	ite	eq
 8023600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023604:	2500      	movne	r5, #0
 8023606:	4293      	cmp	r3, r2
 8023608:	bfc4      	itt	gt
 802360a:	1a9b      	subgt	r3, r3, r2
 802360c:	18ed      	addgt	r5, r5, r3
 802360e:	2600      	movs	r6, #0
 8023610:	341a      	adds	r4, #26
 8023612:	42b5      	cmp	r5, r6
 8023614:	d11a      	bne.n	802364c <_printf_common+0xc8>
 8023616:	2000      	movs	r0, #0
 8023618:	e008      	b.n	802362c <_printf_common+0xa8>
 802361a:	2301      	movs	r3, #1
 802361c:	4652      	mov	r2, sl
 802361e:	4649      	mov	r1, r9
 8023620:	4638      	mov	r0, r7
 8023622:	47c0      	blx	r8
 8023624:	3001      	adds	r0, #1
 8023626:	d103      	bne.n	8023630 <_printf_common+0xac>
 8023628:	f04f 30ff 	mov.w	r0, #4294967295
 802362c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023630:	3501      	adds	r5, #1
 8023632:	e7c6      	b.n	80235c2 <_printf_common+0x3e>
 8023634:	18e1      	adds	r1, r4, r3
 8023636:	1c5a      	adds	r2, r3, #1
 8023638:	2030      	movs	r0, #48	; 0x30
 802363a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802363e:	4422      	add	r2, r4
 8023640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023648:	3302      	adds	r3, #2
 802364a:	e7c7      	b.n	80235dc <_printf_common+0x58>
 802364c:	2301      	movs	r3, #1
 802364e:	4622      	mov	r2, r4
 8023650:	4649      	mov	r1, r9
 8023652:	4638      	mov	r0, r7
 8023654:	47c0      	blx	r8
 8023656:	3001      	adds	r0, #1
 8023658:	d0e6      	beq.n	8023628 <_printf_common+0xa4>
 802365a:	3601      	adds	r6, #1
 802365c:	e7d9      	b.n	8023612 <_printf_common+0x8e>
	...

08023660 <_printf_i>:
 8023660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023664:	7e0f      	ldrb	r7, [r1, #24]
 8023666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023668:	2f78      	cmp	r7, #120	; 0x78
 802366a:	4691      	mov	r9, r2
 802366c:	4680      	mov	r8, r0
 802366e:	460c      	mov	r4, r1
 8023670:	469a      	mov	sl, r3
 8023672:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023676:	d807      	bhi.n	8023688 <_printf_i+0x28>
 8023678:	2f62      	cmp	r7, #98	; 0x62
 802367a:	d80a      	bhi.n	8023692 <_printf_i+0x32>
 802367c:	2f00      	cmp	r7, #0
 802367e:	f000 80d8 	beq.w	8023832 <_printf_i+0x1d2>
 8023682:	2f58      	cmp	r7, #88	; 0x58
 8023684:	f000 80a3 	beq.w	80237ce <_printf_i+0x16e>
 8023688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802368c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023690:	e03a      	b.n	8023708 <_printf_i+0xa8>
 8023692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023696:	2b15      	cmp	r3, #21
 8023698:	d8f6      	bhi.n	8023688 <_printf_i+0x28>
 802369a:	a101      	add	r1, pc, #4	; (adr r1, 80236a0 <_printf_i+0x40>)
 802369c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80236a0:	080236f9 	.word	0x080236f9
 80236a4:	0802370d 	.word	0x0802370d
 80236a8:	08023689 	.word	0x08023689
 80236ac:	08023689 	.word	0x08023689
 80236b0:	08023689 	.word	0x08023689
 80236b4:	08023689 	.word	0x08023689
 80236b8:	0802370d 	.word	0x0802370d
 80236bc:	08023689 	.word	0x08023689
 80236c0:	08023689 	.word	0x08023689
 80236c4:	08023689 	.word	0x08023689
 80236c8:	08023689 	.word	0x08023689
 80236cc:	08023819 	.word	0x08023819
 80236d0:	0802373d 	.word	0x0802373d
 80236d4:	080237fb 	.word	0x080237fb
 80236d8:	08023689 	.word	0x08023689
 80236dc:	08023689 	.word	0x08023689
 80236e0:	0802383b 	.word	0x0802383b
 80236e4:	08023689 	.word	0x08023689
 80236e8:	0802373d 	.word	0x0802373d
 80236ec:	08023689 	.word	0x08023689
 80236f0:	08023689 	.word	0x08023689
 80236f4:	08023803 	.word	0x08023803
 80236f8:	682b      	ldr	r3, [r5, #0]
 80236fa:	1d1a      	adds	r2, r3, #4
 80236fc:	681b      	ldr	r3, [r3, #0]
 80236fe:	602a      	str	r2, [r5, #0]
 8023700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023708:	2301      	movs	r3, #1
 802370a:	e0a3      	b.n	8023854 <_printf_i+0x1f4>
 802370c:	6820      	ldr	r0, [r4, #0]
 802370e:	6829      	ldr	r1, [r5, #0]
 8023710:	0606      	lsls	r6, r0, #24
 8023712:	f101 0304 	add.w	r3, r1, #4
 8023716:	d50a      	bpl.n	802372e <_printf_i+0xce>
 8023718:	680e      	ldr	r6, [r1, #0]
 802371a:	602b      	str	r3, [r5, #0]
 802371c:	2e00      	cmp	r6, #0
 802371e:	da03      	bge.n	8023728 <_printf_i+0xc8>
 8023720:	232d      	movs	r3, #45	; 0x2d
 8023722:	4276      	negs	r6, r6
 8023724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023728:	485e      	ldr	r0, [pc, #376]	; (80238a4 <_printf_i+0x244>)
 802372a:	230a      	movs	r3, #10
 802372c:	e019      	b.n	8023762 <_printf_i+0x102>
 802372e:	680e      	ldr	r6, [r1, #0]
 8023730:	602b      	str	r3, [r5, #0]
 8023732:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023736:	bf18      	it	ne
 8023738:	b236      	sxthne	r6, r6
 802373a:	e7ef      	b.n	802371c <_printf_i+0xbc>
 802373c:	682b      	ldr	r3, [r5, #0]
 802373e:	6820      	ldr	r0, [r4, #0]
 8023740:	1d19      	adds	r1, r3, #4
 8023742:	6029      	str	r1, [r5, #0]
 8023744:	0601      	lsls	r1, r0, #24
 8023746:	d501      	bpl.n	802374c <_printf_i+0xec>
 8023748:	681e      	ldr	r6, [r3, #0]
 802374a:	e002      	b.n	8023752 <_printf_i+0xf2>
 802374c:	0646      	lsls	r6, r0, #25
 802374e:	d5fb      	bpl.n	8023748 <_printf_i+0xe8>
 8023750:	881e      	ldrh	r6, [r3, #0]
 8023752:	4854      	ldr	r0, [pc, #336]	; (80238a4 <_printf_i+0x244>)
 8023754:	2f6f      	cmp	r7, #111	; 0x6f
 8023756:	bf0c      	ite	eq
 8023758:	2308      	moveq	r3, #8
 802375a:	230a      	movne	r3, #10
 802375c:	2100      	movs	r1, #0
 802375e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023762:	6865      	ldr	r5, [r4, #4]
 8023764:	60a5      	str	r5, [r4, #8]
 8023766:	2d00      	cmp	r5, #0
 8023768:	bfa2      	ittt	ge
 802376a:	6821      	ldrge	r1, [r4, #0]
 802376c:	f021 0104 	bicge.w	r1, r1, #4
 8023770:	6021      	strge	r1, [r4, #0]
 8023772:	b90e      	cbnz	r6, 8023778 <_printf_i+0x118>
 8023774:	2d00      	cmp	r5, #0
 8023776:	d04d      	beq.n	8023814 <_printf_i+0x1b4>
 8023778:	4615      	mov	r5, r2
 802377a:	fbb6 f1f3 	udiv	r1, r6, r3
 802377e:	fb03 6711 	mls	r7, r3, r1, r6
 8023782:	5dc7      	ldrb	r7, [r0, r7]
 8023784:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023788:	4637      	mov	r7, r6
 802378a:	42bb      	cmp	r3, r7
 802378c:	460e      	mov	r6, r1
 802378e:	d9f4      	bls.n	802377a <_printf_i+0x11a>
 8023790:	2b08      	cmp	r3, #8
 8023792:	d10b      	bne.n	80237ac <_printf_i+0x14c>
 8023794:	6823      	ldr	r3, [r4, #0]
 8023796:	07de      	lsls	r6, r3, #31
 8023798:	d508      	bpl.n	80237ac <_printf_i+0x14c>
 802379a:	6923      	ldr	r3, [r4, #16]
 802379c:	6861      	ldr	r1, [r4, #4]
 802379e:	4299      	cmp	r1, r3
 80237a0:	bfde      	ittt	le
 80237a2:	2330      	movle	r3, #48	; 0x30
 80237a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80237a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80237ac:	1b52      	subs	r2, r2, r5
 80237ae:	6122      	str	r2, [r4, #16]
 80237b0:	f8cd a000 	str.w	sl, [sp]
 80237b4:	464b      	mov	r3, r9
 80237b6:	aa03      	add	r2, sp, #12
 80237b8:	4621      	mov	r1, r4
 80237ba:	4640      	mov	r0, r8
 80237bc:	f7ff fee2 	bl	8023584 <_printf_common>
 80237c0:	3001      	adds	r0, #1
 80237c2:	d14c      	bne.n	802385e <_printf_i+0x1fe>
 80237c4:	f04f 30ff 	mov.w	r0, #4294967295
 80237c8:	b004      	add	sp, #16
 80237ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80237ce:	4835      	ldr	r0, [pc, #212]	; (80238a4 <_printf_i+0x244>)
 80237d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80237d4:	6829      	ldr	r1, [r5, #0]
 80237d6:	6823      	ldr	r3, [r4, #0]
 80237d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80237dc:	6029      	str	r1, [r5, #0]
 80237de:	061d      	lsls	r5, r3, #24
 80237e0:	d514      	bpl.n	802380c <_printf_i+0x1ac>
 80237e2:	07df      	lsls	r7, r3, #31
 80237e4:	bf44      	itt	mi
 80237e6:	f043 0320 	orrmi.w	r3, r3, #32
 80237ea:	6023      	strmi	r3, [r4, #0]
 80237ec:	b91e      	cbnz	r6, 80237f6 <_printf_i+0x196>
 80237ee:	6823      	ldr	r3, [r4, #0]
 80237f0:	f023 0320 	bic.w	r3, r3, #32
 80237f4:	6023      	str	r3, [r4, #0]
 80237f6:	2310      	movs	r3, #16
 80237f8:	e7b0      	b.n	802375c <_printf_i+0xfc>
 80237fa:	6823      	ldr	r3, [r4, #0]
 80237fc:	f043 0320 	orr.w	r3, r3, #32
 8023800:	6023      	str	r3, [r4, #0]
 8023802:	2378      	movs	r3, #120	; 0x78
 8023804:	4828      	ldr	r0, [pc, #160]	; (80238a8 <_printf_i+0x248>)
 8023806:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802380a:	e7e3      	b.n	80237d4 <_printf_i+0x174>
 802380c:	0659      	lsls	r1, r3, #25
 802380e:	bf48      	it	mi
 8023810:	b2b6      	uxthmi	r6, r6
 8023812:	e7e6      	b.n	80237e2 <_printf_i+0x182>
 8023814:	4615      	mov	r5, r2
 8023816:	e7bb      	b.n	8023790 <_printf_i+0x130>
 8023818:	682b      	ldr	r3, [r5, #0]
 802381a:	6826      	ldr	r6, [r4, #0]
 802381c:	6961      	ldr	r1, [r4, #20]
 802381e:	1d18      	adds	r0, r3, #4
 8023820:	6028      	str	r0, [r5, #0]
 8023822:	0635      	lsls	r5, r6, #24
 8023824:	681b      	ldr	r3, [r3, #0]
 8023826:	d501      	bpl.n	802382c <_printf_i+0x1cc>
 8023828:	6019      	str	r1, [r3, #0]
 802382a:	e002      	b.n	8023832 <_printf_i+0x1d2>
 802382c:	0670      	lsls	r0, r6, #25
 802382e:	d5fb      	bpl.n	8023828 <_printf_i+0x1c8>
 8023830:	8019      	strh	r1, [r3, #0]
 8023832:	2300      	movs	r3, #0
 8023834:	6123      	str	r3, [r4, #16]
 8023836:	4615      	mov	r5, r2
 8023838:	e7ba      	b.n	80237b0 <_printf_i+0x150>
 802383a:	682b      	ldr	r3, [r5, #0]
 802383c:	1d1a      	adds	r2, r3, #4
 802383e:	602a      	str	r2, [r5, #0]
 8023840:	681d      	ldr	r5, [r3, #0]
 8023842:	6862      	ldr	r2, [r4, #4]
 8023844:	2100      	movs	r1, #0
 8023846:	4628      	mov	r0, r5
 8023848:	f7dc fd6a 	bl	8000320 <memchr>
 802384c:	b108      	cbz	r0, 8023852 <_printf_i+0x1f2>
 802384e:	1b40      	subs	r0, r0, r5
 8023850:	6060      	str	r0, [r4, #4]
 8023852:	6863      	ldr	r3, [r4, #4]
 8023854:	6123      	str	r3, [r4, #16]
 8023856:	2300      	movs	r3, #0
 8023858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802385c:	e7a8      	b.n	80237b0 <_printf_i+0x150>
 802385e:	6923      	ldr	r3, [r4, #16]
 8023860:	462a      	mov	r2, r5
 8023862:	4649      	mov	r1, r9
 8023864:	4640      	mov	r0, r8
 8023866:	47d0      	blx	sl
 8023868:	3001      	adds	r0, #1
 802386a:	d0ab      	beq.n	80237c4 <_printf_i+0x164>
 802386c:	6823      	ldr	r3, [r4, #0]
 802386e:	079b      	lsls	r3, r3, #30
 8023870:	d413      	bmi.n	802389a <_printf_i+0x23a>
 8023872:	68e0      	ldr	r0, [r4, #12]
 8023874:	9b03      	ldr	r3, [sp, #12]
 8023876:	4298      	cmp	r0, r3
 8023878:	bfb8      	it	lt
 802387a:	4618      	movlt	r0, r3
 802387c:	e7a4      	b.n	80237c8 <_printf_i+0x168>
 802387e:	2301      	movs	r3, #1
 8023880:	4632      	mov	r2, r6
 8023882:	4649      	mov	r1, r9
 8023884:	4640      	mov	r0, r8
 8023886:	47d0      	blx	sl
 8023888:	3001      	adds	r0, #1
 802388a:	d09b      	beq.n	80237c4 <_printf_i+0x164>
 802388c:	3501      	adds	r5, #1
 802388e:	68e3      	ldr	r3, [r4, #12]
 8023890:	9903      	ldr	r1, [sp, #12]
 8023892:	1a5b      	subs	r3, r3, r1
 8023894:	42ab      	cmp	r3, r5
 8023896:	dcf2      	bgt.n	802387e <_printf_i+0x21e>
 8023898:	e7eb      	b.n	8023872 <_printf_i+0x212>
 802389a:	2500      	movs	r5, #0
 802389c:	f104 0619 	add.w	r6, r4, #25
 80238a0:	e7f5      	b.n	802388e <_printf_i+0x22e>
 80238a2:	bf00      	nop
 80238a4:	08026eb1 	.word	0x08026eb1
 80238a8:	08026ec2 	.word	0x08026ec2

080238ac <cleanup_glue>:
 80238ac:	b538      	push	{r3, r4, r5, lr}
 80238ae:	460c      	mov	r4, r1
 80238b0:	6809      	ldr	r1, [r1, #0]
 80238b2:	4605      	mov	r5, r0
 80238b4:	b109      	cbz	r1, 80238ba <cleanup_glue+0xe>
 80238b6:	f7ff fff9 	bl	80238ac <cleanup_glue>
 80238ba:	4621      	mov	r1, r4
 80238bc:	4628      	mov	r0, r5
 80238be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80238c2:	f7ff bc25 	b.w	8023110 <_free_r>
	...

080238c8 <_reclaim_reent>:
 80238c8:	4b2c      	ldr	r3, [pc, #176]	; (802397c <_reclaim_reent+0xb4>)
 80238ca:	681b      	ldr	r3, [r3, #0]
 80238cc:	4283      	cmp	r3, r0
 80238ce:	b570      	push	{r4, r5, r6, lr}
 80238d0:	4604      	mov	r4, r0
 80238d2:	d051      	beq.n	8023978 <_reclaim_reent+0xb0>
 80238d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80238d6:	b143      	cbz	r3, 80238ea <_reclaim_reent+0x22>
 80238d8:	68db      	ldr	r3, [r3, #12]
 80238da:	2b00      	cmp	r3, #0
 80238dc:	d14a      	bne.n	8023974 <_reclaim_reent+0xac>
 80238de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80238e0:	6819      	ldr	r1, [r3, #0]
 80238e2:	b111      	cbz	r1, 80238ea <_reclaim_reent+0x22>
 80238e4:	4620      	mov	r0, r4
 80238e6:	f7ff fc13 	bl	8023110 <_free_r>
 80238ea:	6961      	ldr	r1, [r4, #20]
 80238ec:	b111      	cbz	r1, 80238f4 <_reclaim_reent+0x2c>
 80238ee:	4620      	mov	r0, r4
 80238f0:	f7ff fc0e 	bl	8023110 <_free_r>
 80238f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80238f6:	b111      	cbz	r1, 80238fe <_reclaim_reent+0x36>
 80238f8:	4620      	mov	r0, r4
 80238fa:	f7ff fc09 	bl	8023110 <_free_r>
 80238fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023900:	b111      	cbz	r1, 8023908 <_reclaim_reent+0x40>
 8023902:	4620      	mov	r0, r4
 8023904:	f7ff fc04 	bl	8023110 <_free_r>
 8023908:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802390a:	b111      	cbz	r1, 8023912 <_reclaim_reent+0x4a>
 802390c:	4620      	mov	r0, r4
 802390e:	f7ff fbff 	bl	8023110 <_free_r>
 8023912:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023914:	b111      	cbz	r1, 802391c <_reclaim_reent+0x54>
 8023916:	4620      	mov	r0, r4
 8023918:	f7ff fbfa 	bl	8023110 <_free_r>
 802391c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802391e:	b111      	cbz	r1, 8023926 <_reclaim_reent+0x5e>
 8023920:	4620      	mov	r0, r4
 8023922:	f7ff fbf5 	bl	8023110 <_free_r>
 8023926:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023928:	b111      	cbz	r1, 8023930 <_reclaim_reent+0x68>
 802392a:	4620      	mov	r0, r4
 802392c:	f7ff fbf0 	bl	8023110 <_free_r>
 8023930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023932:	b111      	cbz	r1, 802393a <_reclaim_reent+0x72>
 8023934:	4620      	mov	r0, r4
 8023936:	f7ff fbeb 	bl	8023110 <_free_r>
 802393a:	69a3      	ldr	r3, [r4, #24]
 802393c:	b1e3      	cbz	r3, 8023978 <_reclaim_reent+0xb0>
 802393e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8023940:	4620      	mov	r0, r4
 8023942:	4798      	blx	r3
 8023944:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8023946:	b1b9      	cbz	r1, 8023978 <_reclaim_reent+0xb0>
 8023948:	4620      	mov	r0, r4
 802394a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802394e:	f7ff bfad 	b.w	80238ac <cleanup_glue>
 8023952:	5949      	ldr	r1, [r1, r5]
 8023954:	b941      	cbnz	r1, 8023968 <_reclaim_reent+0xa0>
 8023956:	3504      	adds	r5, #4
 8023958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802395a:	2d80      	cmp	r5, #128	; 0x80
 802395c:	68d9      	ldr	r1, [r3, #12]
 802395e:	d1f8      	bne.n	8023952 <_reclaim_reent+0x8a>
 8023960:	4620      	mov	r0, r4
 8023962:	f7ff fbd5 	bl	8023110 <_free_r>
 8023966:	e7ba      	b.n	80238de <_reclaim_reent+0x16>
 8023968:	680e      	ldr	r6, [r1, #0]
 802396a:	4620      	mov	r0, r4
 802396c:	f7ff fbd0 	bl	8023110 <_free_r>
 8023970:	4631      	mov	r1, r6
 8023972:	e7ef      	b.n	8023954 <_reclaim_reent+0x8c>
 8023974:	2500      	movs	r5, #0
 8023976:	e7ef      	b.n	8023958 <_reclaim_reent+0x90>
 8023978:	bd70      	pop	{r4, r5, r6, pc}
 802397a:	bf00      	nop
 802397c:	240000dc 	.word	0x240000dc

08023980 <_sbrk_r>:
 8023980:	b538      	push	{r3, r4, r5, lr}
 8023982:	4d06      	ldr	r5, [pc, #24]	; (802399c <_sbrk_r+0x1c>)
 8023984:	2300      	movs	r3, #0
 8023986:	4604      	mov	r4, r0
 8023988:	4608      	mov	r0, r1
 802398a:	602b      	str	r3, [r5, #0]
 802398c:	f7df fd1c 	bl	80033c8 <_sbrk>
 8023990:	1c43      	adds	r3, r0, #1
 8023992:	d102      	bne.n	802399a <_sbrk_r+0x1a>
 8023994:	682b      	ldr	r3, [r5, #0]
 8023996:	b103      	cbz	r3, 802399a <_sbrk_r+0x1a>
 8023998:	6023      	str	r3, [r4, #0]
 802399a:	bd38      	pop	{r3, r4, r5, pc}
 802399c:	2400f630 	.word	0x2400f630

080239a0 <_raise_r>:
 80239a0:	291f      	cmp	r1, #31
 80239a2:	b538      	push	{r3, r4, r5, lr}
 80239a4:	4604      	mov	r4, r0
 80239a6:	460d      	mov	r5, r1
 80239a8:	d904      	bls.n	80239b4 <_raise_r+0x14>
 80239aa:	2316      	movs	r3, #22
 80239ac:	6003      	str	r3, [r0, #0]
 80239ae:	f04f 30ff 	mov.w	r0, #4294967295
 80239b2:	bd38      	pop	{r3, r4, r5, pc}
 80239b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80239b6:	b112      	cbz	r2, 80239be <_raise_r+0x1e>
 80239b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80239bc:	b94b      	cbnz	r3, 80239d2 <_raise_r+0x32>
 80239be:	4620      	mov	r0, r4
 80239c0:	f000 f830 	bl	8023a24 <_getpid_r>
 80239c4:	462a      	mov	r2, r5
 80239c6:	4601      	mov	r1, r0
 80239c8:	4620      	mov	r0, r4
 80239ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80239ce:	f000 b817 	b.w	8023a00 <_kill_r>
 80239d2:	2b01      	cmp	r3, #1
 80239d4:	d00a      	beq.n	80239ec <_raise_r+0x4c>
 80239d6:	1c59      	adds	r1, r3, #1
 80239d8:	d103      	bne.n	80239e2 <_raise_r+0x42>
 80239da:	2316      	movs	r3, #22
 80239dc:	6003      	str	r3, [r0, #0]
 80239de:	2001      	movs	r0, #1
 80239e0:	e7e7      	b.n	80239b2 <_raise_r+0x12>
 80239e2:	2400      	movs	r4, #0
 80239e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80239e8:	4628      	mov	r0, r5
 80239ea:	4798      	blx	r3
 80239ec:	2000      	movs	r0, #0
 80239ee:	e7e0      	b.n	80239b2 <_raise_r+0x12>

080239f0 <raise>:
 80239f0:	4b02      	ldr	r3, [pc, #8]	; (80239fc <raise+0xc>)
 80239f2:	4601      	mov	r1, r0
 80239f4:	6818      	ldr	r0, [r3, #0]
 80239f6:	f7ff bfd3 	b.w	80239a0 <_raise_r>
 80239fa:	bf00      	nop
 80239fc:	240000dc 	.word	0x240000dc

08023a00 <_kill_r>:
 8023a00:	b538      	push	{r3, r4, r5, lr}
 8023a02:	4d07      	ldr	r5, [pc, #28]	; (8023a20 <_kill_r+0x20>)
 8023a04:	2300      	movs	r3, #0
 8023a06:	4604      	mov	r4, r0
 8023a08:	4608      	mov	r0, r1
 8023a0a:	4611      	mov	r1, r2
 8023a0c:	602b      	str	r3, [r5, #0]
 8023a0e:	f7df fca3 	bl	8003358 <_kill>
 8023a12:	1c43      	adds	r3, r0, #1
 8023a14:	d102      	bne.n	8023a1c <_kill_r+0x1c>
 8023a16:	682b      	ldr	r3, [r5, #0]
 8023a18:	b103      	cbz	r3, 8023a1c <_kill_r+0x1c>
 8023a1a:	6023      	str	r3, [r4, #0]
 8023a1c:	bd38      	pop	{r3, r4, r5, pc}
 8023a1e:	bf00      	nop
 8023a20:	2400f630 	.word	0x2400f630

08023a24 <_getpid_r>:
 8023a24:	f7df bc96 	b.w	8003354 <_getpid>

08023a28 <siprintf>:
 8023a28:	b40e      	push	{r1, r2, r3}
 8023a2a:	b500      	push	{lr}
 8023a2c:	b09c      	sub	sp, #112	; 0x70
 8023a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8023a30:	9002      	str	r0, [sp, #8]
 8023a32:	9006      	str	r0, [sp, #24]
 8023a34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8023a38:	4809      	ldr	r0, [pc, #36]	; (8023a60 <siprintf+0x38>)
 8023a3a:	9107      	str	r1, [sp, #28]
 8023a3c:	9104      	str	r1, [sp, #16]
 8023a3e:	4909      	ldr	r1, [pc, #36]	; (8023a64 <siprintf+0x3c>)
 8023a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8023a44:	9105      	str	r1, [sp, #20]
 8023a46:	6800      	ldr	r0, [r0, #0]
 8023a48:	9301      	str	r3, [sp, #4]
 8023a4a:	a902      	add	r1, sp, #8
 8023a4c:	f000 fbe6 	bl	802421c <_svfiprintf_r>
 8023a50:	9b02      	ldr	r3, [sp, #8]
 8023a52:	2200      	movs	r2, #0
 8023a54:	701a      	strb	r2, [r3, #0]
 8023a56:	b01c      	add	sp, #112	; 0x70
 8023a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8023a5c:	b003      	add	sp, #12
 8023a5e:	4770      	bx	lr
 8023a60:	240000dc 	.word	0x240000dc
 8023a64:	ffff0208 	.word	0xffff0208

08023a68 <__sread>:
 8023a68:	b510      	push	{r4, lr}
 8023a6a:	460c      	mov	r4, r1
 8023a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a70:	f000 fcd4 	bl	802441c <_read_r>
 8023a74:	2800      	cmp	r0, #0
 8023a76:	bfab      	itete	ge
 8023a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8023a7c:	181b      	addge	r3, r3, r0
 8023a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023a82:	bfac      	ite	ge
 8023a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8023a86:	81a3      	strhlt	r3, [r4, #12]
 8023a88:	bd10      	pop	{r4, pc}

08023a8a <__swrite>:
 8023a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a8e:	461f      	mov	r7, r3
 8023a90:	898b      	ldrh	r3, [r1, #12]
 8023a92:	05db      	lsls	r3, r3, #23
 8023a94:	4605      	mov	r5, r0
 8023a96:	460c      	mov	r4, r1
 8023a98:	4616      	mov	r6, r2
 8023a9a:	d505      	bpl.n	8023aa8 <__swrite+0x1e>
 8023a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023aa0:	2302      	movs	r3, #2
 8023aa2:	2200      	movs	r2, #0
 8023aa4:	f000 fa92 	bl	8023fcc <_lseek_r>
 8023aa8:	89a3      	ldrh	r3, [r4, #12]
 8023aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023ab2:	81a3      	strh	r3, [r4, #12]
 8023ab4:	4632      	mov	r2, r6
 8023ab6:	463b      	mov	r3, r7
 8023ab8:	4628      	mov	r0, r5
 8023aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023abe:	f000 b8d1 	b.w	8023c64 <_write_r>

08023ac2 <__sseek>:
 8023ac2:	b510      	push	{r4, lr}
 8023ac4:	460c      	mov	r4, r1
 8023ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023aca:	f000 fa7f 	bl	8023fcc <_lseek_r>
 8023ace:	1c43      	adds	r3, r0, #1
 8023ad0:	89a3      	ldrh	r3, [r4, #12]
 8023ad2:	bf15      	itete	ne
 8023ad4:	6560      	strne	r0, [r4, #84]	; 0x54
 8023ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023ade:	81a3      	strheq	r3, [r4, #12]
 8023ae0:	bf18      	it	ne
 8023ae2:	81a3      	strhne	r3, [r4, #12]
 8023ae4:	bd10      	pop	{r4, pc}

08023ae6 <__sclose>:
 8023ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023aea:	f000 b99d 	b.w	8023e28 <_close_r>

08023aee <strncmp>:
 8023aee:	b510      	push	{r4, lr}
 8023af0:	b17a      	cbz	r2, 8023b12 <strncmp+0x24>
 8023af2:	4603      	mov	r3, r0
 8023af4:	3901      	subs	r1, #1
 8023af6:	1884      	adds	r4, r0, r2
 8023af8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8023afc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023b00:	4290      	cmp	r0, r2
 8023b02:	d101      	bne.n	8023b08 <strncmp+0x1a>
 8023b04:	42a3      	cmp	r3, r4
 8023b06:	d101      	bne.n	8023b0c <strncmp+0x1e>
 8023b08:	1a80      	subs	r0, r0, r2
 8023b0a:	bd10      	pop	{r4, pc}
 8023b0c:	2800      	cmp	r0, #0
 8023b0e:	d1f3      	bne.n	8023af8 <strncmp+0xa>
 8023b10:	e7fa      	b.n	8023b08 <strncmp+0x1a>
 8023b12:	4610      	mov	r0, r2
 8023b14:	e7f9      	b.n	8023b0a <strncmp+0x1c>

08023b16 <strncpy>:
 8023b16:	b510      	push	{r4, lr}
 8023b18:	3901      	subs	r1, #1
 8023b1a:	4603      	mov	r3, r0
 8023b1c:	b132      	cbz	r2, 8023b2c <strncpy+0x16>
 8023b1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023b22:	f803 4b01 	strb.w	r4, [r3], #1
 8023b26:	3a01      	subs	r2, #1
 8023b28:	2c00      	cmp	r4, #0
 8023b2a:	d1f7      	bne.n	8023b1c <strncpy+0x6>
 8023b2c:	441a      	add	r2, r3
 8023b2e:	2100      	movs	r1, #0
 8023b30:	4293      	cmp	r3, r2
 8023b32:	d100      	bne.n	8023b36 <strncpy+0x20>
 8023b34:	bd10      	pop	{r4, pc}
 8023b36:	f803 1b01 	strb.w	r1, [r3], #1
 8023b3a:	e7f9      	b.n	8023b30 <strncpy+0x1a>

08023b3c <strstr>:
 8023b3c:	780a      	ldrb	r2, [r1, #0]
 8023b3e:	b570      	push	{r4, r5, r6, lr}
 8023b40:	b96a      	cbnz	r2, 8023b5e <strstr+0x22>
 8023b42:	bd70      	pop	{r4, r5, r6, pc}
 8023b44:	429a      	cmp	r2, r3
 8023b46:	d109      	bne.n	8023b5c <strstr+0x20>
 8023b48:	460c      	mov	r4, r1
 8023b4a:	4605      	mov	r5, r0
 8023b4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8023b50:	2b00      	cmp	r3, #0
 8023b52:	d0f6      	beq.n	8023b42 <strstr+0x6>
 8023b54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8023b58:	429e      	cmp	r6, r3
 8023b5a:	d0f7      	beq.n	8023b4c <strstr+0x10>
 8023b5c:	3001      	adds	r0, #1
 8023b5e:	7803      	ldrb	r3, [r0, #0]
 8023b60:	2b00      	cmp	r3, #0
 8023b62:	d1ef      	bne.n	8023b44 <strstr+0x8>
 8023b64:	4618      	mov	r0, r3
 8023b66:	e7ec      	b.n	8023b42 <strstr+0x6>

08023b68 <__strtok_r>:
 8023b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b6a:	b908      	cbnz	r0, 8023b70 <__strtok_r+0x8>
 8023b6c:	6810      	ldr	r0, [r2, #0]
 8023b6e:	b188      	cbz	r0, 8023b94 <__strtok_r+0x2c>
 8023b70:	4604      	mov	r4, r0
 8023b72:	4620      	mov	r0, r4
 8023b74:	f814 5b01 	ldrb.w	r5, [r4], #1
 8023b78:	460f      	mov	r7, r1
 8023b7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8023b7e:	b91e      	cbnz	r6, 8023b88 <__strtok_r+0x20>
 8023b80:	b965      	cbnz	r5, 8023b9c <__strtok_r+0x34>
 8023b82:	6015      	str	r5, [r2, #0]
 8023b84:	4628      	mov	r0, r5
 8023b86:	e005      	b.n	8023b94 <__strtok_r+0x2c>
 8023b88:	42b5      	cmp	r5, r6
 8023b8a:	d1f6      	bne.n	8023b7a <__strtok_r+0x12>
 8023b8c:	2b00      	cmp	r3, #0
 8023b8e:	d1f0      	bne.n	8023b72 <__strtok_r+0xa>
 8023b90:	6014      	str	r4, [r2, #0]
 8023b92:	7003      	strb	r3, [r0, #0]
 8023b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b96:	461c      	mov	r4, r3
 8023b98:	e00c      	b.n	8023bb4 <__strtok_r+0x4c>
 8023b9a:	b915      	cbnz	r5, 8023ba2 <__strtok_r+0x3a>
 8023b9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023ba0:	460e      	mov	r6, r1
 8023ba2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8023ba6:	42ab      	cmp	r3, r5
 8023ba8:	d1f7      	bne.n	8023b9a <__strtok_r+0x32>
 8023baa:	2b00      	cmp	r3, #0
 8023bac:	d0f3      	beq.n	8023b96 <__strtok_r+0x2e>
 8023bae:	2300      	movs	r3, #0
 8023bb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8023bb4:	6014      	str	r4, [r2, #0]
 8023bb6:	e7ed      	b.n	8023b94 <__strtok_r+0x2c>

08023bb8 <strtok_r>:
 8023bb8:	2301      	movs	r3, #1
 8023bba:	f7ff bfd5 	b.w	8023b68 <__strtok_r>
	...

08023bc0 <__swbuf_r>:
 8023bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023bc2:	460e      	mov	r6, r1
 8023bc4:	4614      	mov	r4, r2
 8023bc6:	4605      	mov	r5, r0
 8023bc8:	b118      	cbz	r0, 8023bd2 <__swbuf_r+0x12>
 8023bca:	6983      	ldr	r3, [r0, #24]
 8023bcc:	b90b      	cbnz	r3, 8023bd2 <__swbuf_r+0x12>
 8023bce:	f7ff f991 	bl	8022ef4 <__sinit>
 8023bd2:	4b21      	ldr	r3, [pc, #132]	; (8023c58 <__swbuf_r+0x98>)
 8023bd4:	429c      	cmp	r4, r3
 8023bd6:	d12b      	bne.n	8023c30 <__swbuf_r+0x70>
 8023bd8:	686c      	ldr	r4, [r5, #4]
 8023bda:	69a3      	ldr	r3, [r4, #24]
 8023bdc:	60a3      	str	r3, [r4, #8]
 8023bde:	89a3      	ldrh	r3, [r4, #12]
 8023be0:	071a      	lsls	r2, r3, #28
 8023be2:	d52f      	bpl.n	8023c44 <__swbuf_r+0x84>
 8023be4:	6923      	ldr	r3, [r4, #16]
 8023be6:	b36b      	cbz	r3, 8023c44 <__swbuf_r+0x84>
 8023be8:	6923      	ldr	r3, [r4, #16]
 8023bea:	6820      	ldr	r0, [r4, #0]
 8023bec:	1ac0      	subs	r0, r0, r3
 8023bee:	6963      	ldr	r3, [r4, #20]
 8023bf0:	b2f6      	uxtb	r6, r6
 8023bf2:	4283      	cmp	r3, r0
 8023bf4:	4637      	mov	r7, r6
 8023bf6:	dc04      	bgt.n	8023c02 <__swbuf_r+0x42>
 8023bf8:	4621      	mov	r1, r4
 8023bfa:	4628      	mov	r0, r5
 8023bfc:	f000 f9aa 	bl	8023f54 <_fflush_r>
 8023c00:	bb30      	cbnz	r0, 8023c50 <__swbuf_r+0x90>
 8023c02:	68a3      	ldr	r3, [r4, #8]
 8023c04:	3b01      	subs	r3, #1
 8023c06:	60a3      	str	r3, [r4, #8]
 8023c08:	6823      	ldr	r3, [r4, #0]
 8023c0a:	1c5a      	adds	r2, r3, #1
 8023c0c:	6022      	str	r2, [r4, #0]
 8023c0e:	701e      	strb	r6, [r3, #0]
 8023c10:	6963      	ldr	r3, [r4, #20]
 8023c12:	3001      	adds	r0, #1
 8023c14:	4283      	cmp	r3, r0
 8023c16:	d004      	beq.n	8023c22 <__swbuf_r+0x62>
 8023c18:	89a3      	ldrh	r3, [r4, #12]
 8023c1a:	07db      	lsls	r3, r3, #31
 8023c1c:	d506      	bpl.n	8023c2c <__swbuf_r+0x6c>
 8023c1e:	2e0a      	cmp	r6, #10
 8023c20:	d104      	bne.n	8023c2c <__swbuf_r+0x6c>
 8023c22:	4621      	mov	r1, r4
 8023c24:	4628      	mov	r0, r5
 8023c26:	f000 f995 	bl	8023f54 <_fflush_r>
 8023c2a:	b988      	cbnz	r0, 8023c50 <__swbuf_r+0x90>
 8023c2c:	4638      	mov	r0, r7
 8023c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023c30:	4b0a      	ldr	r3, [pc, #40]	; (8023c5c <__swbuf_r+0x9c>)
 8023c32:	429c      	cmp	r4, r3
 8023c34:	d101      	bne.n	8023c3a <__swbuf_r+0x7a>
 8023c36:	68ac      	ldr	r4, [r5, #8]
 8023c38:	e7cf      	b.n	8023bda <__swbuf_r+0x1a>
 8023c3a:	4b09      	ldr	r3, [pc, #36]	; (8023c60 <__swbuf_r+0xa0>)
 8023c3c:	429c      	cmp	r4, r3
 8023c3e:	bf08      	it	eq
 8023c40:	68ec      	ldreq	r4, [r5, #12]
 8023c42:	e7ca      	b.n	8023bda <__swbuf_r+0x1a>
 8023c44:	4621      	mov	r1, r4
 8023c46:	4628      	mov	r0, r5
 8023c48:	f000 f81e 	bl	8023c88 <__swsetup_r>
 8023c4c:	2800      	cmp	r0, #0
 8023c4e:	d0cb      	beq.n	8023be8 <__swbuf_r+0x28>
 8023c50:	f04f 37ff 	mov.w	r7, #4294967295
 8023c54:	e7ea      	b.n	8023c2c <__swbuf_r+0x6c>
 8023c56:	bf00      	nop
 8023c58:	08026e5c 	.word	0x08026e5c
 8023c5c:	08026e7c 	.word	0x08026e7c
 8023c60:	08026e3c 	.word	0x08026e3c

08023c64 <_write_r>:
 8023c64:	b538      	push	{r3, r4, r5, lr}
 8023c66:	4d07      	ldr	r5, [pc, #28]	; (8023c84 <_write_r+0x20>)
 8023c68:	4604      	mov	r4, r0
 8023c6a:	4608      	mov	r0, r1
 8023c6c:	4611      	mov	r1, r2
 8023c6e:	2200      	movs	r2, #0
 8023c70:	602a      	str	r2, [r5, #0]
 8023c72:	461a      	mov	r2, r3
 8023c74:	f7df fb8e 	bl	8003394 <_write>
 8023c78:	1c43      	adds	r3, r0, #1
 8023c7a:	d102      	bne.n	8023c82 <_write_r+0x1e>
 8023c7c:	682b      	ldr	r3, [r5, #0]
 8023c7e:	b103      	cbz	r3, 8023c82 <_write_r+0x1e>
 8023c80:	6023      	str	r3, [r4, #0]
 8023c82:	bd38      	pop	{r3, r4, r5, pc}
 8023c84:	2400f630 	.word	0x2400f630

08023c88 <__swsetup_r>:
 8023c88:	4b32      	ldr	r3, [pc, #200]	; (8023d54 <__swsetup_r+0xcc>)
 8023c8a:	b570      	push	{r4, r5, r6, lr}
 8023c8c:	681d      	ldr	r5, [r3, #0]
 8023c8e:	4606      	mov	r6, r0
 8023c90:	460c      	mov	r4, r1
 8023c92:	b125      	cbz	r5, 8023c9e <__swsetup_r+0x16>
 8023c94:	69ab      	ldr	r3, [r5, #24]
 8023c96:	b913      	cbnz	r3, 8023c9e <__swsetup_r+0x16>
 8023c98:	4628      	mov	r0, r5
 8023c9a:	f7ff f92b 	bl	8022ef4 <__sinit>
 8023c9e:	4b2e      	ldr	r3, [pc, #184]	; (8023d58 <__swsetup_r+0xd0>)
 8023ca0:	429c      	cmp	r4, r3
 8023ca2:	d10f      	bne.n	8023cc4 <__swsetup_r+0x3c>
 8023ca4:	686c      	ldr	r4, [r5, #4]
 8023ca6:	89a3      	ldrh	r3, [r4, #12]
 8023ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023cac:	0719      	lsls	r1, r3, #28
 8023cae:	d42c      	bmi.n	8023d0a <__swsetup_r+0x82>
 8023cb0:	06dd      	lsls	r5, r3, #27
 8023cb2:	d411      	bmi.n	8023cd8 <__swsetup_r+0x50>
 8023cb4:	2309      	movs	r3, #9
 8023cb6:	6033      	str	r3, [r6, #0]
 8023cb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023cbc:	81a3      	strh	r3, [r4, #12]
 8023cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8023cc2:	e03e      	b.n	8023d42 <__swsetup_r+0xba>
 8023cc4:	4b25      	ldr	r3, [pc, #148]	; (8023d5c <__swsetup_r+0xd4>)
 8023cc6:	429c      	cmp	r4, r3
 8023cc8:	d101      	bne.n	8023cce <__swsetup_r+0x46>
 8023cca:	68ac      	ldr	r4, [r5, #8]
 8023ccc:	e7eb      	b.n	8023ca6 <__swsetup_r+0x1e>
 8023cce:	4b24      	ldr	r3, [pc, #144]	; (8023d60 <__swsetup_r+0xd8>)
 8023cd0:	429c      	cmp	r4, r3
 8023cd2:	bf08      	it	eq
 8023cd4:	68ec      	ldreq	r4, [r5, #12]
 8023cd6:	e7e6      	b.n	8023ca6 <__swsetup_r+0x1e>
 8023cd8:	0758      	lsls	r0, r3, #29
 8023cda:	d512      	bpl.n	8023d02 <__swsetup_r+0x7a>
 8023cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023cde:	b141      	cbz	r1, 8023cf2 <__swsetup_r+0x6a>
 8023ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023ce4:	4299      	cmp	r1, r3
 8023ce6:	d002      	beq.n	8023cee <__swsetup_r+0x66>
 8023ce8:	4630      	mov	r0, r6
 8023cea:	f7ff fa11 	bl	8023110 <_free_r>
 8023cee:	2300      	movs	r3, #0
 8023cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8023cf2:	89a3      	ldrh	r3, [r4, #12]
 8023cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023cf8:	81a3      	strh	r3, [r4, #12]
 8023cfa:	2300      	movs	r3, #0
 8023cfc:	6063      	str	r3, [r4, #4]
 8023cfe:	6923      	ldr	r3, [r4, #16]
 8023d00:	6023      	str	r3, [r4, #0]
 8023d02:	89a3      	ldrh	r3, [r4, #12]
 8023d04:	f043 0308 	orr.w	r3, r3, #8
 8023d08:	81a3      	strh	r3, [r4, #12]
 8023d0a:	6923      	ldr	r3, [r4, #16]
 8023d0c:	b94b      	cbnz	r3, 8023d22 <__swsetup_r+0x9a>
 8023d0e:	89a3      	ldrh	r3, [r4, #12]
 8023d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023d18:	d003      	beq.n	8023d22 <__swsetup_r+0x9a>
 8023d1a:	4621      	mov	r1, r4
 8023d1c:	4630      	mov	r0, r6
 8023d1e:	f000 f98d 	bl	802403c <__smakebuf_r>
 8023d22:	89a0      	ldrh	r0, [r4, #12]
 8023d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023d28:	f010 0301 	ands.w	r3, r0, #1
 8023d2c:	d00a      	beq.n	8023d44 <__swsetup_r+0xbc>
 8023d2e:	2300      	movs	r3, #0
 8023d30:	60a3      	str	r3, [r4, #8]
 8023d32:	6963      	ldr	r3, [r4, #20]
 8023d34:	425b      	negs	r3, r3
 8023d36:	61a3      	str	r3, [r4, #24]
 8023d38:	6923      	ldr	r3, [r4, #16]
 8023d3a:	b943      	cbnz	r3, 8023d4e <__swsetup_r+0xc6>
 8023d3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023d40:	d1ba      	bne.n	8023cb8 <__swsetup_r+0x30>
 8023d42:	bd70      	pop	{r4, r5, r6, pc}
 8023d44:	0781      	lsls	r1, r0, #30
 8023d46:	bf58      	it	pl
 8023d48:	6963      	ldrpl	r3, [r4, #20]
 8023d4a:	60a3      	str	r3, [r4, #8]
 8023d4c:	e7f4      	b.n	8023d38 <__swsetup_r+0xb0>
 8023d4e:	2000      	movs	r0, #0
 8023d50:	e7f7      	b.n	8023d42 <__swsetup_r+0xba>
 8023d52:	bf00      	nop
 8023d54:	240000dc 	.word	0x240000dc
 8023d58:	08026e5c 	.word	0x08026e5c
 8023d5c:	08026e7c 	.word	0x08026e7c
 8023d60:	08026e3c 	.word	0x08026e3c

08023d64 <__register_exitproc>:
 8023d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023d68:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8023e24 <__register_exitproc+0xc0>
 8023d6c:	4606      	mov	r6, r0
 8023d6e:	f8d8 0000 	ldr.w	r0, [r8]
 8023d72:	461f      	mov	r7, r3
 8023d74:	460d      	mov	r5, r1
 8023d76:	4691      	mov	r9, r2
 8023d78:	f7ff f991 	bl	802309e <__retarget_lock_acquire_recursive>
 8023d7c:	4b25      	ldr	r3, [pc, #148]	; (8023e14 <__register_exitproc+0xb0>)
 8023d7e:	681c      	ldr	r4, [r3, #0]
 8023d80:	b934      	cbnz	r4, 8023d90 <__register_exitproc+0x2c>
 8023d82:	4c25      	ldr	r4, [pc, #148]	; (8023e18 <__register_exitproc+0xb4>)
 8023d84:	601c      	str	r4, [r3, #0]
 8023d86:	4b25      	ldr	r3, [pc, #148]	; (8023e1c <__register_exitproc+0xb8>)
 8023d88:	b113      	cbz	r3, 8023d90 <__register_exitproc+0x2c>
 8023d8a:	681b      	ldr	r3, [r3, #0]
 8023d8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023d90:	6863      	ldr	r3, [r4, #4]
 8023d92:	2b1f      	cmp	r3, #31
 8023d94:	dd07      	ble.n	8023da6 <__register_exitproc+0x42>
 8023d96:	f8d8 0000 	ldr.w	r0, [r8]
 8023d9a:	f7ff f982 	bl	80230a2 <__retarget_lock_release_recursive>
 8023d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8023da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023da6:	b34e      	cbz	r6, 8023dfc <__register_exitproc+0x98>
 8023da8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023dac:	b988      	cbnz	r0, 8023dd2 <__register_exitproc+0x6e>
 8023dae:	4b1c      	ldr	r3, [pc, #112]	; (8023e20 <__register_exitproc+0xbc>)
 8023db0:	b923      	cbnz	r3, 8023dbc <__register_exitproc+0x58>
 8023db2:	f8d8 0000 	ldr.w	r0, [r8]
 8023db6:	f7ff f973 	bl	80230a0 <__retarget_lock_release>
 8023dba:	e7f0      	b.n	8023d9e <__register_exitproc+0x3a>
 8023dbc:	f44f 7084 	mov.w	r0, #264	; 0x108
 8023dc0:	f7ff f970 	bl	80230a4 <malloc>
 8023dc4:	2800      	cmp	r0, #0
 8023dc6:	d0f4      	beq.n	8023db2 <__register_exitproc+0x4e>
 8023dc8:	2300      	movs	r3, #0
 8023dca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8023dce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8023dd2:	6863      	ldr	r3, [r4, #4]
 8023dd4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023dd8:	2201      	movs	r2, #1
 8023dda:	409a      	lsls	r2, r3
 8023ddc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023de0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8023de4:	4313      	orrs	r3, r2
 8023de6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8023dea:	2e02      	cmp	r6, #2
 8023dec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8023df0:	bf02      	ittt	eq
 8023df2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8023df6:	4313      	orreq	r3, r2
 8023df8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8023dfc:	6863      	ldr	r3, [r4, #4]
 8023dfe:	f8d8 0000 	ldr.w	r0, [r8]
 8023e02:	1c5a      	adds	r2, r3, #1
 8023e04:	3302      	adds	r3, #2
 8023e06:	6062      	str	r2, [r4, #4]
 8023e08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8023e0c:	f7ff f949 	bl	80230a2 <__retarget_lock_release_recursive>
 8023e10:	2000      	movs	r0, #0
 8023e12:	e7c6      	b.n	8023da2 <__register_exitproc+0x3e>
 8023e14:	2400f6c0 	.word	0x2400f6c0
 8023e18:	2400f634 	.word	0x2400f634
 8023e1c:	08026ed4 	.word	0x08026ed4
 8023e20:	080230a5 	.word	0x080230a5
 8023e24:	24000140 	.word	0x24000140

08023e28 <_close_r>:
 8023e28:	b538      	push	{r3, r4, r5, lr}
 8023e2a:	4d06      	ldr	r5, [pc, #24]	; (8023e44 <_close_r+0x1c>)
 8023e2c:	2300      	movs	r3, #0
 8023e2e:	4604      	mov	r4, r0
 8023e30:	4608      	mov	r0, r1
 8023e32:	602b      	str	r3, [r5, #0]
 8023e34:	f7df fabc 	bl	80033b0 <_close>
 8023e38:	1c43      	adds	r3, r0, #1
 8023e3a:	d102      	bne.n	8023e42 <_close_r+0x1a>
 8023e3c:	682b      	ldr	r3, [r5, #0]
 8023e3e:	b103      	cbz	r3, 8023e42 <_close_r+0x1a>
 8023e40:	6023      	str	r3, [r4, #0]
 8023e42:	bd38      	pop	{r3, r4, r5, pc}
 8023e44:	2400f630 	.word	0x2400f630

08023e48 <__sflush_r>:
 8023e48:	898a      	ldrh	r2, [r1, #12]
 8023e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023e4e:	4605      	mov	r5, r0
 8023e50:	0710      	lsls	r0, r2, #28
 8023e52:	460c      	mov	r4, r1
 8023e54:	d458      	bmi.n	8023f08 <__sflush_r+0xc0>
 8023e56:	684b      	ldr	r3, [r1, #4]
 8023e58:	2b00      	cmp	r3, #0
 8023e5a:	dc05      	bgt.n	8023e68 <__sflush_r+0x20>
 8023e5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023e5e:	2b00      	cmp	r3, #0
 8023e60:	dc02      	bgt.n	8023e68 <__sflush_r+0x20>
 8023e62:	2000      	movs	r0, #0
 8023e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023e6a:	2e00      	cmp	r6, #0
 8023e6c:	d0f9      	beq.n	8023e62 <__sflush_r+0x1a>
 8023e6e:	2300      	movs	r3, #0
 8023e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023e74:	682f      	ldr	r7, [r5, #0]
 8023e76:	602b      	str	r3, [r5, #0]
 8023e78:	d032      	beq.n	8023ee0 <__sflush_r+0x98>
 8023e7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023e7c:	89a3      	ldrh	r3, [r4, #12]
 8023e7e:	075a      	lsls	r2, r3, #29
 8023e80:	d505      	bpl.n	8023e8e <__sflush_r+0x46>
 8023e82:	6863      	ldr	r3, [r4, #4]
 8023e84:	1ac0      	subs	r0, r0, r3
 8023e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023e88:	b10b      	cbz	r3, 8023e8e <__sflush_r+0x46>
 8023e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023e8c:	1ac0      	subs	r0, r0, r3
 8023e8e:	2300      	movs	r3, #0
 8023e90:	4602      	mov	r2, r0
 8023e92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023e94:	6a21      	ldr	r1, [r4, #32]
 8023e96:	4628      	mov	r0, r5
 8023e98:	47b0      	blx	r6
 8023e9a:	1c43      	adds	r3, r0, #1
 8023e9c:	89a3      	ldrh	r3, [r4, #12]
 8023e9e:	d106      	bne.n	8023eae <__sflush_r+0x66>
 8023ea0:	6829      	ldr	r1, [r5, #0]
 8023ea2:	291d      	cmp	r1, #29
 8023ea4:	d82c      	bhi.n	8023f00 <__sflush_r+0xb8>
 8023ea6:	4a2a      	ldr	r2, [pc, #168]	; (8023f50 <__sflush_r+0x108>)
 8023ea8:	40ca      	lsrs	r2, r1
 8023eaa:	07d6      	lsls	r6, r2, #31
 8023eac:	d528      	bpl.n	8023f00 <__sflush_r+0xb8>
 8023eae:	2200      	movs	r2, #0
 8023eb0:	6062      	str	r2, [r4, #4]
 8023eb2:	04d9      	lsls	r1, r3, #19
 8023eb4:	6922      	ldr	r2, [r4, #16]
 8023eb6:	6022      	str	r2, [r4, #0]
 8023eb8:	d504      	bpl.n	8023ec4 <__sflush_r+0x7c>
 8023eba:	1c42      	adds	r2, r0, #1
 8023ebc:	d101      	bne.n	8023ec2 <__sflush_r+0x7a>
 8023ebe:	682b      	ldr	r3, [r5, #0]
 8023ec0:	b903      	cbnz	r3, 8023ec4 <__sflush_r+0x7c>
 8023ec2:	6560      	str	r0, [r4, #84]	; 0x54
 8023ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023ec6:	602f      	str	r7, [r5, #0]
 8023ec8:	2900      	cmp	r1, #0
 8023eca:	d0ca      	beq.n	8023e62 <__sflush_r+0x1a>
 8023ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023ed0:	4299      	cmp	r1, r3
 8023ed2:	d002      	beq.n	8023eda <__sflush_r+0x92>
 8023ed4:	4628      	mov	r0, r5
 8023ed6:	f7ff f91b 	bl	8023110 <_free_r>
 8023eda:	2000      	movs	r0, #0
 8023edc:	6360      	str	r0, [r4, #52]	; 0x34
 8023ede:	e7c1      	b.n	8023e64 <__sflush_r+0x1c>
 8023ee0:	6a21      	ldr	r1, [r4, #32]
 8023ee2:	2301      	movs	r3, #1
 8023ee4:	4628      	mov	r0, r5
 8023ee6:	47b0      	blx	r6
 8023ee8:	1c41      	adds	r1, r0, #1
 8023eea:	d1c7      	bne.n	8023e7c <__sflush_r+0x34>
 8023eec:	682b      	ldr	r3, [r5, #0]
 8023eee:	2b00      	cmp	r3, #0
 8023ef0:	d0c4      	beq.n	8023e7c <__sflush_r+0x34>
 8023ef2:	2b1d      	cmp	r3, #29
 8023ef4:	d001      	beq.n	8023efa <__sflush_r+0xb2>
 8023ef6:	2b16      	cmp	r3, #22
 8023ef8:	d101      	bne.n	8023efe <__sflush_r+0xb6>
 8023efa:	602f      	str	r7, [r5, #0]
 8023efc:	e7b1      	b.n	8023e62 <__sflush_r+0x1a>
 8023efe:	89a3      	ldrh	r3, [r4, #12]
 8023f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023f04:	81a3      	strh	r3, [r4, #12]
 8023f06:	e7ad      	b.n	8023e64 <__sflush_r+0x1c>
 8023f08:	690f      	ldr	r7, [r1, #16]
 8023f0a:	2f00      	cmp	r7, #0
 8023f0c:	d0a9      	beq.n	8023e62 <__sflush_r+0x1a>
 8023f0e:	0793      	lsls	r3, r2, #30
 8023f10:	680e      	ldr	r6, [r1, #0]
 8023f12:	bf08      	it	eq
 8023f14:	694b      	ldreq	r3, [r1, #20]
 8023f16:	600f      	str	r7, [r1, #0]
 8023f18:	bf18      	it	ne
 8023f1a:	2300      	movne	r3, #0
 8023f1c:	eba6 0807 	sub.w	r8, r6, r7
 8023f20:	608b      	str	r3, [r1, #8]
 8023f22:	f1b8 0f00 	cmp.w	r8, #0
 8023f26:	dd9c      	ble.n	8023e62 <__sflush_r+0x1a>
 8023f28:	6a21      	ldr	r1, [r4, #32]
 8023f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023f2c:	4643      	mov	r3, r8
 8023f2e:	463a      	mov	r2, r7
 8023f30:	4628      	mov	r0, r5
 8023f32:	47b0      	blx	r6
 8023f34:	2800      	cmp	r0, #0
 8023f36:	dc06      	bgt.n	8023f46 <__sflush_r+0xfe>
 8023f38:	89a3      	ldrh	r3, [r4, #12]
 8023f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023f3e:	81a3      	strh	r3, [r4, #12]
 8023f40:	f04f 30ff 	mov.w	r0, #4294967295
 8023f44:	e78e      	b.n	8023e64 <__sflush_r+0x1c>
 8023f46:	4407      	add	r7, r0
 8023f48:	eba8 0800 	sub.w	r8, r8, r0
 8023f4c:	e7e9      	b.n	8023f22 <__sflush_r+0xda>
 8023f4e:	bf00      	nop
 8023f50:	20400001 	.word	0x20400001

08023f54 <_fflush_r>:
 8023f54:	b538      	push	{r3, r4, r5, lr}
 8023f56:	690b      	ldr	r3, [r1, #16]
 8023f58:	4605      	mov	r5, r0
 8023f5a:	460c      	mov	r4, r1
 8023f5c:	b913      	cbnz	r3, 8023f64 <_fflush_r+0x10>
 8023f5e:	2500      	movs	r5, #0
 8023f60:	4628      	mov	r0, r5
 8023f62:	bd38      	pop	{r3, r4, r5, pc}
 8023f64:	b118      	cbz	r0, 8023f6e <_fflush_r+0x1a>
 8023f66:	6983      	ldr	r3, [r0, #24]
 8023f68:	b90b      	cbnz	r3, 8023f6e <_fflush_r+0x1a>
 8023f6a:	f7fe ffc3 	bl	8022ef4 <__sinit>
 8023f6e:	4b14      	ldr	r3, [pc, #80]	; (8023fc0 <_fflush_r+0x6c>)
 8023f70:	429c      	cmp	r4, r3
 8023f72:	d11b      	bne.n	8023fac <_fflush_r+0x58>
 8023f74:	686c      	ldr	r4, [r5, #4]
 8023f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023f7a:	2b00      	cmp	r3, #0
 8023f7c:	d0ef      	beq.n	8023f5e <_fflush_r+0xa>
 8023f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023f80:	07d0      	lsls	r0, r2, #31
 8023f82:	d404      	bmi.n	8023f8e <_fflush_r+0x3a>
 8023f84:	0599      	lsls	r1, r3, #22
 8023f86:	d402      	bmi.n	8023f8e <_fflush_r+0x3a>
 8023f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023f8a:	f7ff f888 	bl	802309e <__retarget_lock_acquire_recursive>
 8023f8e:	4628      	mov	r0, r5
 8023f90:	4621      	mov	r1, r4
 8023f92:	f7ff ff59 	bl	8023e48 <__sflush_r>
 8023f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023f98:	07da      	lsls	r2, r3, #31
 8023f9a:	4605      	mov	r5, r0
 8023f9c:	d4e0      	bmi.n	8023f60 <_fflush_r+0xc>
 8023f9e:	89a3      	ldrh	r3, [r4, #12]
 8023fa0:	059b      	lsls	r3, r3, #22
 8023fa2:	d4dd      	bmi.n	8023f60 <_fflush_r+0xc>
 8023fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023fa6:	f7ff f87c 	bl	80230a2 <__retarget_lock_release_recursive>
 8023faa:	e7d9      	b.n	8023f60 <_fflush_r+0xc>
 8023fac:	4b05      	ldr	r3, [pc, #20]	; (8023fc4 <_fflush_r+0x70>)
 8023fae:	429c      	cmp	r4, r3
 8023fb0:	d101      	bne.n	8023fb6 <_fflush_r+0x62>
 8023fb2:	68ac      	ldr	r4, [r5, #8]
 8023fb4:	e7df      	b.n	8023f76 <_fflush_r+0x22>
 8023fb6:	4b04      	ldr	r3, [pc, #16]	; (8023fc8 <_fflush_r+0x74>)
 8023fb8:	429c      	cmp	r4, r3
 8023fba:	bf08      	it	eq
 8023fbc:	68ec      	ldreq	r4, [r5, #12]
 8023fbe:	e7da      	b.n	8023f76 <_fflush_r+0x22>
 8023fc0:	08026e5c 	.word	0x08026e5c
 8023fc4:	08026e7c 	.word	0x08026e7c
 8023fc8:	08026e3c 	.word	0x08026e3c

08023fcc <_lseek_r>:
 8023fcc:	b538      	push	{r3, r4, r5, lr}
 8023fce:	4d07      	ldr	r5, [pc, #28]	; (8023fec <_lseek_r+0x20>)
 8023fd0:	4604      	mov	r4, r0
 8023fd2:	4608      	mov	r0, r1
 8023fd4:	4611      	mov	r1, r2
 8023fd6:	2200      	movs	r2, #0
 8023fd8:	602a      	str	r2, [r5, #0]
 8023fda:	461a      	mov	r2, r3
 8023fdc:	f7df f9f2 	bl	80033c4 <_lseek>
 8023fe0:	1c43      	adds	r3, r0, #1
 8023fe2:	d102      	bne.n	8023fea <_lseek_r+0x1e>
 8023fe4:	682b      	ldr	r3, [r5, #0]
 8023fe6:	b103      	cbz	r3, 8023fea <_lseek_r+0x1e>
 8023fe8:	6023      	str	r3, [r4, #0]
 8023fea:	bd38      	pop	{r3, r4, r5, pc}
 8023fec:	2400f630 	.word	0x2400f630

08023ff0 <__swhatbuf_r>:
 8023ff0:	b570      	push	{r4, r5, r6, lr}
 8023ff2:	460e      	mov	r6, r1
 8023ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ff8:	2900      	cmp	r1, #0
 8023ffa:	b096      	sub	sp, #88	; 0x58
 8023ffc:	4614      	mov	r4, r2
 8023ffe:	461d      	mov	r5, r3
 8024000:	da08      	bge.n	8024014 <__swhatbuf_r+0x24>
 8024002:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024006:	2200      	movs	r2, #0
 8024008:	602a      	str	r2, [r5, #0]
 802400a:	061a      	lsls	r2, r3, #24
 802400c:	d410      	bmi.n	8024030 <__swhatbuf_r+0x40>
 802400e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024012:	e00e      	b.n	8024032 <__swhatbuf_r+0x42>
 8024014:	466a      	mov	r2, sp
 8024016:	f000 fa13 	bl	8024440 <_fstat_r>
 802401a:	2800      	cmp	r0, #0
 802401c:	dbf1      	blt.n	8024002 <__swhatbuf_r+0x12>
 802401e:	9a01      	ldr	r2, [sp, #4]
 8024020:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024024:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024028:	425a      	negs	r2, r3
 802402a:	415a      	adcs	r2, r3
 802402c:	602a      	str	r2, [r5, #0]
 802402e:	e7ee      	b.n	802400e <__swhatbuf_r+0x1e>
 8024030:	2340      	movs	r3, #64	; 0x40
 8024032:	2000      	movs	r0, #0
 8024034:	6023      	str	r3, [r4, #0]
 8024036:	b016      	add	sp, #88	; 0x58
 8024038:	bd70      	pop	{r4, r5, r6, pc}
	...

0802403c <__smakebuf_r>:
 802403c:	898b      	ldrh	r3, [r1, #12]
 802403e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024040:	079d      	lsls	r5, r3, #30
 8024042:	4606      	mov	r6, r0
 8024044:	460c      	mov	r4, r1
 8024046:	d507      	bpl.n	8024058 <__smakebuf_r+0x1c>
 8024048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802404c:	6023      	str	r3, [r4, #0]
 802404e:	6123      	str	r3, [r4, #16]
 8024050:	2301      	movs	r3, #1
 8024052:	6163      	str	r3, [r4, #20]
 8024054:	b002      	add	sp, #8
 8024056:	bd70      	pop	{r4, r5, r6, pc}
 8024058:	ab01      	add	r3, sp, #4
 802405a:	466a      	mov	r2, sp
 802405c:	f7ff ffc8 	bl	8023ff0 <__swhatbuf_r>
 8024060:	9900      	ldr	r1, [sp, #0]
 8024062:	4605      	mov	r5, r0
 8024064:	4630      	mov	r0, r6
 8024066:	f7ff f8bf 	bl	80231e8 <_malloc_r>
 802406a:	b948      	cbnz	r0, 8024080 <__smakebuf_r+0x44>
 802406c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024070:	059a      	lsls	r2, r3, #22
 8024072:	d4ef      	bmi.n	8024054 <__smakebuf_r+0x18>
 8024074:	f023 0303 	bic.w	r3, r3, #3
 8024078:	f043 0302 	orr.w	r3, r3, #2
 802407c:	81a3      	strh	r3, [r4, #12]
 802407e:	e7e3      	b.n	8024048 <__smakebuf_r+0xc>
 8024080:	4b0d      	ldr	r3, [pc, #52]	; (80240b8 <__smakebuf_r+0x7c>)
 8024082:	62b3      	str	r3, [r6, #40]	; 0x28
 8024084:	89a3      	ldrh	r3, [r4, #12]
 8024086:	6020      	str	r0, [r4, #0]
 8024088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802408c:	81a3      	strh	r3, [r4, #12]
 802408e:	9b00      	ldr	r3, [sp, #0]
 8024090:	6163      	str	r3, [r4, #20]
 8024092:	9b01      	ldr	r3, [sp, #4]
 8024094:	6120      	str	r0, [r4, #16]
 8024096:	b15b      	cbz	r3, 80240b0 <__smakebuf_r+0x74>
 8024098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802409c:	4630      	mov	r0, r6
 802409e:	f000 f9e1 	bl	8024464 <_isatty_r>
 80240a2:	b128      	cbz	r0, 80240b0 <__smakebuf_r+0x74>
 80240a4:	89a3      	ldrh	r3, [r4, #12]
 80240a6:	f023 0303 	bic.w	r3, r3, #3
 80240aa:	f043 0301 	orr.w	r3, r3, #1
 80240ae:	81a3      	strh	r3, [r4, #12]
 80240b0:	89a0      	ldrh	r0, [r4, #12]
 80240b2:	4305      	orrs	r5, r0
 80240b4:	81a5      	strh	r5, [r4, #12]
 80240b6:	e7cd      	b.n	8024054 <__smakebuf_r+0x18>
 80240b8:	08022e8d 	.word	0x08022e8d

080240bc <memmove>:
 80240bc:	4288      	cmp	r0, r1
 80240be:	b510      	push	{r4, lr}
 80240c0:	eb01 0402 	add.w	r4, r1, r2
 80240c4:	d902      	bls.n	80240cc <memmove+0x10>
 80240c6:	4284      	cmp	r4, r0
 80240c8:	4623      	mov	r3, r4
 80240ca:	d807      	bhi.n	80240dc <memmove+0x20>
 80240cc:	1e43      	subs	r3, r0, #1
 80240ce:	42a1      	cmp	r1, r4
 80240d0:	d008      	beq.n	80240e4 <memmove+0x28>
 80240d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80240d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80240da:	e7f8      	b.n	80240ce <memmove+0x12>
 80240dc:	4402      	add	r2, r0
 80240de:	4601      	mov	r1, r0
 80240e0:	428a      	cmp	r2, r1
 80240e2:	d100      	bne.n	80240e6 <memmove+0x2a>
 80240e4:	bd10      	pop	{r4, pc}
 80240e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80240ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80240ee:	e7f7      	b.n	80240e0 <memmove+0x24>

080240f0 <__malloc_lock>:
 80240f0:	4801      	ldr	r0, [pc, #4]	; (80240f8 <__malloc_lock+0x8>)
 80240f2:	f7fe bfd4 	b.w	802309e <__retarget_lock_acquire_recursive>
 80240f6:	bf00      	nop
 80240f8:	2400f51d 	.word	0x2400f51d

080240fc <__malloc_unlock>:
 80240fc:	4801      	ldr	r0, [pc, #4]	; (8024104 <__malloc_unlock+0x8>)
 80240fe:	f7fe bfd0 	b.w	80230a2 <__retarget_lock_release_recursive>
 8024102:	bf00      	nop
 8024104:	2400f51d 	.word	0x2400f51d

08024108 <_realloc_r>:
 8024108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802410c:	4680      	mov	r8, r0
 802410e:	4614      	mov	r4, r2
 8024110:	460e      	mov	r6, r1
 8024112:	b921      	cbnz	r1, 802411e <_realloc_r+0x16>
 8024114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024118:	4611      	mov	r1, r2
 802411a:	f7ff b865 	b.w	80231e8 <_malloc_r>
 802411e:	b92a      	cbnz	r2, 802412c <_realloc_r+0x24>
 8024120:	f7fe fff6 	bl	8023110 <_free_r>
 8024124:	4625      	mov	r5, r4
 8024126:	4628      	mov	r0, r5
 8024128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802412c:	f000 f9aa 	bl	8024484 <_malloc_usable_size_r>
 8024130:	4284      	cmp	r4, r0
 8024132:	4607      	mov	r7, r0
 8024134:	d802      	bhi.n	802413c <_realloc_r+0x34>
 8024136:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802413a:	d812      	bhi.n	8024162 <_realloc_r+0x5a>
 802413c:	4621      	mov	r1, r4
 802413e:	4640      	mov	r0, r8
 8024140:	f7ff f852 	bl	80231e8 <_malloc_r>
 8024144:	4605      	mov	r5, r0
 8024146:	2800      	cmp	r0, #0
 8024148:	d0ed      	beq.n	8024126 <_realloc_r+0x1e>
 802414a:	42bc      	cmp	r4, r7
 802414c:	4622      	mov	r2, r4
 802414e:	4631      	mov	r1, r6
 8024150:	bf28      	it	cs
 8024152:	463a      	movcs	r2, r7
 8024154:	f7fe ffc6 	bl	80230e4 <memcpy>
 8024158:	4631      	mov	r1, r6
 802415a:	4640      	mov	r0, r8
 802415c:	f7fe ffd8 	bl	8023110 <_free_r>
 8024160:	e7e1      	b.n	8024126 <_realloc_r+0x1e>
 8024162:	4635      	mov	r5, r6
 8024164:	e7df      	b.n	8024126 <_realloc_r+0x1e>

08024166 <__ssputs_r>:
 8024166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802416a:	688e      	ldr	r6, [r1, #8]
 802416c:	429e      	cmp	r6, r3
 802416e:	4682      	mov	sl, r0
 8024170:	460c      	mov	r4, r1
 8024172:	4690      	mov	r8, r2
 8024174:	461f      	mov	r7, r3
 8024176:	d838      	bhi.n	80241ea <__ssputs_r+0x84>
 8024178:	898a      	ldrh	r2, [r1, #12]
 802417a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802417e:	d032      	beq.n	80241e6 <__ssputs_r+0x80>
 8024180:	6825      	ldr	r5, [r4, #0]
 8024182:	6909      	ldr	r1, [r1, #16]
 8024184:	eba5 0901 	sub.w	r9, r5, r1
 8024188:	6965      	ldr	r5, [r4, #20]
 802418a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802418e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024192:	3301      	adds	r3, #1
 8024194:	444b      	add	r3, r9
 8024196:	106d      	asrs	r5, r5, #1
 8024198:	429d      	cmp	r5, r3
 802419a:	bf38      	it	cc
 802419c:	461d      	movcc	r5, r3
 802419e:	0553      	lsls	r3, r2, #21
 80241a0:	d531      	bpl.n	8024206 <__ssputs_r+0xa0>
 80241a2:	4629      	mov	r1, r5
 80241a4:	f7ff f820 	bl	80231e8 <_malloc_r>
 80241a8:	4606      	mov	r6, r0
 80241aa:	b950      	cbnz	r0, 80241c2 <__ssputs_r+0x5c>
 80241ac:	230c      	movs	r3, #12
 80241ae:	f8ca 3000 	str.w	r3, [sl]
 80241b2:	89a3      	ldrh	r3, [r4, #12]
 80241b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80241b8:	81a3      	strh	r3, [r4, #12]
 80241ba:	f04f 30ff 	mov.w	r0, #4294967295
 80241be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80241c2:	6921      	ldr	r1, [r4, #16]
 80241c4:	464a      	mov	r2, r9
 80241c6:	f7fe ff8d 	bl	80230e4 <memcpy>
 80241ca:	89a3      	ldrh	r3, [r4, #12]
 80241cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80241d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80241d4:	81a3      	strh	r3, [r4, #12]
 80241d6:	6126      	str	r6, [r4, #16]
 80241d8:	6165      	str	r5, [r4, #20]
 80241da:	444e      	add	r6, r9
 80241dc:	eba5 0509 	sub.w	r5, r5, r9
 80241e0:	6026      	str	r6, [r4, #0]
 80241e2:	60a5      	str	r5, [r4, #8]
 80241e4:	463e      	mov	r6, r7
 80241e6:	42be      	cmp	r6, r7
 80241e8:	d900      	bls.n	80241ec <__ssputs_r+0x86>
 80241ea:	463e      	mov	r6, r7
 80241ec:	6820      	ldr	r0, [r4, #0]
 80241ee:	4632      	mov	r2, r6
 80241f0:	4641      	mov	r1, r8
 80241f2:	f7ff ff63 	bl	80240bc <memmove>
 80241f6:	68a3      	ldr	r3, [r4, #8]
 80241f8:	1b9b      	subs	r3, r3, r6
 80241fa:	60a3      	str	r3, [r4, #8]
 80241fc:	6823      	ldr	r3, [r4, #0]
 80241fe:	4433      	add	r3, r6
 8024200:	6023      	str	r3, [r4, #0]
 8024202:	2000      	movs	r0, #0
 8024204:	e7db      	b.n	80241be <__ssputs_r+0x58>
 8024206:	462a      	mov	r2, r5
 8024208:	f7ff ff7e 	bl	8024108 <_realloc_r>
 802420c:	4606      	mov	r6, r0
 802420e:	2800      	cmp	r0, #0
 8024210:	d1e1      	bne.n	80241d6 <__ssputs_r+0x70>
 8024212:	6921      	ldr	r1, [r4, #16]
 8024214:	4650      	mov	r0, sl
 8024216:	f7fe ff7b 	bl	8023110 <_free_r>
 802421a:	e7c7      	b.n	80241ac <__ssputs_r+0x46>

0802421c <_svfiprintf_r>:
 802421c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024220:	4698      	mov	r8, r3
 8024222:	898b      	ldrh	r3, [r1, #12]
 8024224:	061b      	lsls	r3, r3, #24
 8024226:	b09d      	sub	sp, #116	; 0x74
 8024228:	4607      	mov	r7, r0
 802422a:	460d      	mov	r5, r1
 802422c:	4614      	mov	r4, r2
 802422e:	d50e      	bpl.n	802424e <_svfiprintf_r+0x32>
 8024230:	690b      	ldr	r3, [r1, #16]
 8024232:	b963      	cbnz	r3, 802424e <_svfiprintf_r+0x32>
 8024234:	2140      	movs	r1, #64	; 0x40
 8024236:	f7fe ffd7 	bl	80231e8 <_malloc_r>
 802423a:	6028      	str	r0, [r5, #0]
 802423c:	6128      	str	r0, [r5, #16]
 802423e:	b920      	cbnz	r0, 802424a <_svfiprintf_r+0x2e>
 8024240:	230c      	movs	r3, #12
 8024242:	603b      	str	r3, [r7, #0]
 8024244:	f04f 30ff 	mov.w	r0, #4294967295
 8024248:	e0d1      	b.n	80243ee <_svfiprintf_r+0x1d2>
 802424a:	2340      	movs	r3, #64	; 0x40
 802424c:	616b      	str	r3, [r5, #20]
 802424e:	2300      	movs	r3, #0
 8024250:	9309      	str	r3, [sp, #36]	; 0x24
 8024252:	2320      	movs	r3, #32
 8024254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024258:	f8cd 800c 	str.w	r8, [sp, #12]
 802425c:	2330      	movs	r3, #48	; 0x30
 802425e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024408 <_svfiprintf_r+0x1ec>
 8024262:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024266:	f04f 0901 	mov.w	r9, #1
 802426a:	4623      	mov	r3, r4
 802426c:	469a      	mov	sl, r3
 802426e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024272:	b10a      	cbz	r2, 8024278 <_svfiprintf_r+0x5c>
 8024274:	2a25      	cmp	r2, #37	; 0x25
 8024276:	d1f9      	bne.n	802426c <_svfiprintf_r+0x50>
 8024278:	ebba 0b04 	subs.w	fp, sl, r4
 802427c:	d00b      	beq.n	8024296 <_svfiprintf_r+0x7a>
 802427e:	465b      	mov	r3, fp
 8024280:	4622      	mov	r2, r4
 8024282:	4629      	mov	r1, r5
 8024284:	4638      	mov	r0, r7
 8024286:	f7ff ff6e 	bl	8024166 <__ssputs_r>
 802428a:	3001      	adds	r0, #1
 802428c:	f000 80aa 	beq.w	80243e4 <_svfiprintf_r+0x1c8>
 8024290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024292:	445a      	add	r2, fp
 8024294:	9209      	str	r2, [sp, #36]	; 0x24
 8024296:	f89a 3000 	ldrb.w	r3, [sl]
 802429a:	2b00      	cmp	r3, #0
 802429c:	f000 80a2 	beq.w	80243e4 <_svfiprintf_r+0x1c8>
 80242a0:	2300      	movs	r3, #0
 80242a2:	f04f 32ff 	mov.w	r2, #4294967295
 80242a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80242aa:	f10a 0a01 	add.w	sl, sl, #1
 80242ae:	9304      	str	r3, [sp, #16]
 80242b0:	9307      	str	r3, [sp, #28]
 80242b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80242b6:	931a      	str	r3, [sp, #104]	; 0x68
 80242b8:	4654      	mov	r4, sl
 80242ba:	2205      	movs	r2, #5
 80242bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80242c0:	4851      	ldr	r0, [pc, #324]	; (8024408 <_svfiprintf_r+0x1ec>)
 80242c2:	f7dc f82d 	bl	8000320 <memchr>
 80242c6:	9a04      	ldr	r2, [sp, #16]
 80242c8:	b9d8      	cbnz	r0, 8024302 <_svfiprintf_r+0xe6>
 80242ca:	06d0      	lsls	r0, r2, #27
 80242cc:	bf44      	itt	mi
 80242ce:	2320      	movmi	r3, #32
 80242d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80242d4:	0711      	lsls	r1, r2, #28
 80242d6:	bf44      	itt	mi
 80242d8:	232b      	movmi	r3, #43	; 0x2b
 80242da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80242de:	f89a 3000 	ldrb.w	r3, [sl]
 80242e2:	2b2a      	cmp	r3, #42	; 0x2a
 80242e4:	d015      	beq.n	8024312 <_svfiprintf_r+0xf6>
 80242e6:	9a07      	ldr	r2, [sp, #28]
 80242e8:	4654      	mov	r4, sl
 80242ea:	2000      	movs	r0, #0
 80242ec:	f04f 0c0a 	mov.w	ip, #10
 80242f0:	4621      	mov	r1, r4
 80242f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80242f6:	3b30      	subs	r3, #48	; 0x30
 80242f8:	2b09      	cmp	r3, #9
 80242fa:	d94e      	bls.n	802439a <_svfiprintf_r+0x17e>
 80242fc:	b1b0      	cbz	r0, 802432c <_svfiprintf_r+0x110>
 80242fe:	9207      	str	r2, [sp, #28]
 8024300:	e014      	b.n	802432c <_svfiprintf_r+0x110>
 8024302:	eba0 0308 	sub.w	r3, r0, r8
 8024306:	fa09 f303 	lsl.w	r3, r9, r3
 802430a:	4313      	orrs	r3, r2
 802430c:	9304      	str	r3, [sp, #16]
 802430e:	46a2      	mov	sl, r4
 8024310:	e7d2      	b.n	80242b8 <_svfiprintf_r+0x9c>
 8024312:	9b03      	ldr	r3, [sp, #12]
 8024314:	1d19      	adds	r1, r3, #4
 8024316:	681b      	ldr	r3, [r3, #0]
 8024318:	9103      	str	r1, [sp, #12]
 802431a:	2b00      	cmp	r3, #0
 802431c:	bfbb      	ittet	lt
 802431e:	425b      	neglt	r3, r3
 8024320:	f042 0202 	orrlt.w	r2, r2, #2
 8024324:	9307      	strge	r3, [sp, #28]
 8024326:	9307      	strlt	r3, [sp, #28]
 8024328:	bfb8      	it	lt
 802432a:	9204      	strlt	r2, [sp, #16]
 802432c:	7823      	ldrb	r3, [r4, #0]
 802432e:	2b2e      	cmp	r3, #46	; 0x2e
 8024330:	d10c      	bne.n	802434c <_svfiprintf_r+0x130>
 8024332:	7863      	ldrb	r3, [r4, #1]
 8024334:	2b2a      	cmp	r3, #42	; 0x2a
 8024336:	d135      	bne.n	80243a4 <_svfiprintf_r+0x188>
 8024338:	9b03      	ldr	r3, [sp, #12]
 802433a:	1d1a      	adds	r2, r3, #4
 802433c:	681b      	ldr	r3, [r3, #0]
 802433e:	9203      	str	r2, [sp, #12]
 8024340:	2b00      	cmp	r3, #0
 8024342:	bfb8      	it	lt
 8024344:	f04f 33ff 	movlt.w	r3, #4294967295
 8024348:	3402      	adds	r4, #2
 802434a:	9305      	str	r3, [sp, #20]
 802434c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024418 <_svfiprintf_r+0x1fc>
 8024350:	7821      	ldrb	r1, [r4, #0]
 8024352:	2203      	movs	r2, #3
 8024354:	4650      	mov	r0, sl
 8024356:	f7db ffe3 	bl	8000320 <memchr>
 802435a:	b140      	cbz	r0, 802436e <_svfiprintf_r+0x152>
 802435c:	2340      	movs	r3, #64	; 0x40
 802435e:	eba0 000a 	sub.w	r0, r0, sl
 8024362:	fa03 f000 	lsl.w	r0, r3, r0
 8024366:	9b04      	ldr	r3, [sp, #16]
 8024368:	4303      	orrs	r3, r0
 802436a:	3401      	adds	r4, #1
 802436c:	9304      	str	r3, [sp, #16]
 802436e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024372:	4826      	ldr	r0, [pc, #152]	; (802440c <_svfiprintf_r+0x1f0>)
 8024374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024378:	2206      	movs	r2, #6
 802437a:	f7db ffd1 	bl	8000320 <memchr>
 802437e:	2800      	cmp	r0, #0
 8024380:	d038      	beq.n	80243f4 <_svfiprintf_r+0x1d8>
 8024382:	4b23      	ldr	r3, [pc, #140]	; (8024410 <_svfiprintf_r+0x1f4>)
 8024384:	bb1b      	cbnz	r3, 80243ce <_svfiprintf_r+0x1b2>
 8024386:	9b03      	ldr	r3, [sp, #12]
 8024388:	3307      	adds	r3, #7
 802438a:	f023 0307 	bic.w	r3, r3, #7
 802438e:	3308      	adds	r3, #8
 8024390:	9303      	str	r3, [sp, #12]
 8024392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024394:	4433      	add	r3, r6
 8024396:	9309      	str	r3, [sp, #36]	; 0x24
 8024398:	e767      	b.n	802426a <_svfiprintf_r+0x4e>
 802439a:	fb0c 3202 	mla	r2, ip, r2, r3
 802439e:	460c      	mov	r4, r1
 80243a0:	2001      	movs	r0, #1
 80243a2:	e7a5      	b.n	80242f0 <_svfiprintf_r+0xd4>
 80243a4:	2300      	movs	r3, #0
 80243a6:	3401      	adds	r4, #1
 80243a8:	9305      	str	r3, [sp, #20]
 80243aa:	4619      	mov	r1, r3
 80243ac:	f04f 0c0a 	mov.w	ip, #10
 80243b0:	4620      	mov	r0, r4
 80243b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80243b6:	3a30      	subs	r2, #48	; 0x30
 80243b8:	2a09      	cmp	r2, #9
 80243ba:	d903      	bls.n	80243c4 <_svfiprintf_r+0x1a8>
 80243bc:	2b00      	cmp	r3, #0
 80243be:	d0c5      	beq.n	802434c <_svfiprintf_r+0x130>
 80243c0:	9105      	str	r1, [sp, #20]
 80243c2:	e7c3      	b.n	802434c <_svfiprintf_r+0x130>
 80243c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80243c8:	4604      	mov	r4, r0
 80243ca:	2301      	movs	r3, #1
 80243cc:	e7f0      	b.n	80243b0 <_svfiprintf_r+0x194>
 80243ce:	ab03      	add	r3, sp, #12
 80243d0:	9300      	str	r3, [sp, #0]
 80243d2:	462a      	mov	r2, r5
 80243d4:	4b0f      	ldr	r3, [pc, #60]	; (8024414 <_svfiprintf_r+0x1f8>)
 80243d6:	a904      	add	r1, sp, #16
 80243d8:	4638      	mov	r0, r7
 80243da:	f3af 8000 	nop.w
 80243de:	1c42      	adds	r2, r0, #1
 80243e0:	4606      	mov	r6, r0
 80243e2:	d1d6      	bne.n	8024392 <_svfiprintf_r+0x176>
 80243e4:	89ab      	ldrh	r3, [r5, #12]
 80243e6:	065b      	lsls	r3, r3, #25
 80243e8:	f53f af2c 	bmi.w	8024244 <_svfiprintf_r+0x28>
 80243ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80243ee:	b01d      	add	sp, #116	; 0x74
 80243f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243f4:	ab03      	add	r3, sp, #12
 80243f6:	9300      	str	r3, [sp, #0]
 80243f8:	462a      	mov	r2, r5
 80243fa:	4b06      	ldr	r3, [pc, #24]	; (8024414 <_svfiprintf_r+0x1f8>)
 80243fc:	a904      	add	r1, sp, #16
 80243fe:	4638      	mov	r0, r7
 8024400:	f7ff f92e 	bl	8023660 <_printf_i>
 8024404:	e7eb      	b.n	80243de <_svfiprintf_r+0x1c2>
 8024406:	bf00      	nop
 8024408:	08026ea0 	.word	0x08026ea0
 802440c:	08026eaa 	.word	0x08026eaa
 8024410:	00000000 	.word	0x00000000
 8024414:	08024167 	.word	0x08024167
 8024418:	08026ea6 	.word	0x08026ea6

0802441c <_read_r>:
 802441c:	b538      	push	{r3, r4, r5, lr}
 802441e:	4d07      	ldr	r5, [pc, #28]	; (802443c <_read_r+0x20>)
 8024420:	4604      	mov	r4, r0
 8024422:	4608      	mov	r0, r1
 8024424:	4611      	mov	r1, r2
 8024426:	2200      	movs	r2, #0
 8024428:	602a      	str	r2, [r5, #0]
 802442a:	461a      	mov	r2, r3
 802442c:	f7de ffa2 	bl	8003374 <_read>
 8024430:	1c43      	adds	r3, r0, #1
 8024432:	d102      	bne.n	802443a <_read_r+0x1e>
 8024434:	682b      	ldr	r3, [r5, #0]
 8024436:	b103      	cbz	r3, 802443a <_read_r+0x1e>
 8024438:	6023      	str	r3, [r4, #0]
 802443a:	bd38      	pop	{r3, r4, r5, pc}
 802443c:	2400f630 	.word	0x2400f630

08024440 <_fstat_r>:
 8024440:	b538      	push	{r3, r4, r5, lr}
 8024442:	4d07      	ldr	r5, [pc, #28]	; (8024460 <_fstat_r+0x20>)
 8024444:	2300      	movs	r3, #0
 8024446:	4604      	mov	r4, r0
 8024448:	4608      	mov	r0, r1
 802444a:	4611      	mov	r1, r2
 802444c:	602b      	str	r3, [r5, #0]
 802444e:	f7de ffb2 	bl	80033b6 <_fstat>
 8024452:	1c43      	adds	r3, r0, #1
 8024454:	d102      	bne.n	802445c <_fstat_r+0x1c>
 8024456:	682b      	ldr	r3, [r5, #0]
 8024458:	b103      	cbz	r3, 802445c <_fstat_r+0x1c>
 802445a:	6023      	str	r3, [r4, #0]
 802445c:	bd38      	pop	{r3, r4, r5, pc}
 802445e:	bf00      	nop
 8024460:	2400f630 	.word	0x2400f630

08024464 <_isatty_r>:
 8024464:	b538      	push	{r3, r4, r5, lr}
 8024466:	4d06      	ldr	r5, [pc, #24]	; (8024480 <_isatty_r+0x1c>)
 8024468:	2300      	movs	r3, #0
 802446a:	4604      	mov	r4, r0
 802446c:	4608      	mov	r0, r1
 802446e:	602b      	str	r3, [r5, #0]
 8024470:	f7de ffa6 	bl	80033c0 <_isatty>
 8024474:	1c43      	adds	r3, r0, #1
 8024476:	d102      	bne.n	802447e <_isatty_r+0x1a>
 8024478:	682b      	ldr	r3, [r5, #0]
 802447a:	b103      	cbz	r3, 802447e <_isatty_r+0x1a>
 802447c:	6023      	str	r3, [r4, #0]
 802447e:	bd38      	pop	{r3, r4, r5, pc}
 8024480:	2400f630 	.word	0x2400f630

08024484 <_malloc_usable_size_r>:
 8024484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024488:	1f18      	subs	r0, r3, #4
 802448a:	2b00      	cmp	r3, #0
 802448c:	bfbc      	itt	lt
 802448e:	580b      	ldrlt	r3, [r1, r0]
 8024490:	18c0      	addlt	r0, r0, r3
 8024492:	4770      	bx	lr

08024494 <_init>:
 8024494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024496:	bf00      	nop
 8024498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802449a:	bc08      	pop	{r3}
 802449c:	469e      	mov	lr, r3
 802449e:	4770      	bx	lr

080244a0 <_fini>:
 80244a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244a2:	bf00      	nop
 80244a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80244a6:	bc08      	pop	{r3}
 80244a8:	469e      	mov	lr, r3
 80244aa:	4770      	bx	lr
